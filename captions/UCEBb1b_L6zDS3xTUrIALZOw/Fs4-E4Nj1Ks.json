[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13320",
    "end": "18450"
  },
  {
    "text": " ERIK DEMAINE: All\nright, today we're going to do some crossover\nbetween two kinds of data",
    "start": "18450",
    "end": "25420"
  },
  {
    "text": "structures, memory\nhierarchy data structures and geometric data structures. And this will be\nthe final lecture",
    "start": "25420",
    "end": "31419"
  },
  {
    "text": "in the memory hierarchy series,\nso the end of cache oblivious. So we're going to look at\ntwo-dimensional geometric data",
    "start": "31420",
    "end": "38860"
  },
  {
    "text": "structure problems,\nboth offline and online. So our good friend,\northogonal 2D range searching,",
    "start": "38860",
    "end": "45800"
  },
  {
    "text": "which we spent a lot of\ntime in a few years ago, we will come back to, and try\nto get our bounds good, even",
    "start": "45800",
    "end": "52930"
  },
  {
    "text": "cache obliviously. So instead of log n,\nwe want log base b of n",
    "start": "52930",
    "end": "58900"
  },
  {
    "text": "to make things interesting. And the batch version\nis where you're given a whole bunch\nof rectangles, and a whole bunch\nof points up front,",
    "start": "58900",
    "end": "65410"
  },
  {
    "text": "and you want to find\nall the points that live in all the rectangles. So that's an easier\nversion of the problem.",
    "start": "65410",
    "end": "72130"
  },
  {
    "text": "We'll start with\nthat and then we'll go to the usual\nonline version, where you have queries coming one at\na time, rectangles coming one",
    "start": "72130",
    "end": "80410"
  },
  {
    "text": "at a time. The points are pre-processed,\nit will be static.",
    "start": "80410",
    "end": "85430"
  },
  {
    "text": "And to do the\nbatched, we're going to introduce a new technique\ncalled distribution sweep,",
    "start": "85430",
    "end": "90716"
  },
  {
    "text": "which is a combination of\nthe sweep line technique we saw back as we\nused persistence to make sweep line thing\ninto a data structure thing.",
    "start": "90717",
    "end": "98920"
  },
  {
    "text": "But we're just going to use\nthe algorithmic version of that plus a cache oblivious\nsorting algorithm.",
    "start": "98920",
    "end": "104479"
  },
  {
    "text": "So we'll finally do\ncache oblivious sorting and optimal N/B log\nbase M/B / of N/B",
    "start": "104479",
    "end": "110259"
  },
  {
    "text": "using a particular algorithm\ncalled lazy funnel sort, which you can actually also use to\nmake another kind of cache",
    "start": "110260",
    "end": "117010"
  },
  {
    "text": "oblivious priority queue,\nbut we won't get into that. And so by combining those two\nthings, we'll get a divide",
    "start": "117010",
    "end": "122680"
  },
  {
    "text": "and conquer technique for\ngeometric problems that lets us solve the batched\nthing, and then we'll",
    "start": "122680",
    "end": "127702"
  },
  {
    "text": "use completely\ndifferent techniques for the online thing. So for starters, let's finally\ndo cache oblivious optimal",
    "start": "127702",
    "end": "135310"
  },
  {
    "text": "sorting. I'm not going to analyze this\nalgorithm because it's just",
    "start": "135310",
    "end": "142000"
  },
  {
    "text": "an algorithm, not\na data structure, and also because the\nanalysis is pretty close to the analysis\nfor priority queues",
    "start": "142000",
    "end": "153340"
  },
  {
    "text": "we did last class. ",
    "start": "153340",
    "end": "158409"
  },
  {
    "text": "So funnel sort is\nbasically a merge sort.",
    "start": "158410",
    "end": "163810"
  },
  {
    "text": "I mentioned last time\nthat in external memory, the right way to do,\nor a right way to do",
    "start": "163810",
    "end": "170890"
  },
  {
    "text": "optimal external memory sorting\nis an m over B-way merge sort. In cache obliviously, you\ndon't know what m and b are,",
    "start": "170890",
    "end": "178270"
  },
  {
    "text": "so it's hard to do\nm over B-way merge. So instead, you basically\ndo a N-way merge.",
    "start": "178270",
    "end": "183820"
  },
  {
    "text": "Not quite N-way, I\ncan't afford that, but it's going to be n to\nthe 1/3 way merge sort.",
    "start": "183820",
    "end": "190090"
  },
  {
    "text": "And the big question then\nbecomes, how do you do emerge? And the answer is with a funnel.",
    "start": "190090",
    "end": "195104"
  },
  {
    "text": "And so the heart of the\nalgorithm is a funnel. ",
    "start": "195104",
    "end": "200990"
  },
  {
    "text": "So if you have K-sorted\nlists that are big, sized K cubed, then you can\nmerge them in, basically,",
    "start": "200990",
    "end": "214150"
  },
  {
    "text": "the optimal bound. ",
    "start": "214150",
    "end": "226650"
  },
  {
    "text": "So K-funnel, K-sorted\nlists, total size K cubed.",
    "start": "226650",
    "end": "233489"
  },
  {
    "text": "Number of memory\ntransfers to merge them is K cubed over B\ntimes log base M/B of K",
    "start": "233490",
    "end": "238670"
  },
  {
    "text": "cubed over B.\nThere's a plus K term and when you plug this into\nan actual sorting algorithm,",
    "start": "238670",
    "end": "245879"
  },
  {
    "text": "you need to think about that,\nbut that's not a big deal. Usually this term will dominate.",
    "start": "245880",
    "end": "251502"
  },
  {
    "text": " OK, so let me show\nyou how funnel works.",
    "start": "251502",
    "end": "257894"
  },
  {
    "text": "We're just going to go\nthrough the algorithmic part and I won't analyze the\nnumber of memory transfers. ",
    "start": "257894",
    "end": "272330"
  },
  {
    "text": "Maybe I'll draw this here. ",
    "start": "272330",
    "end": "279397"
  },
  {
    "text": "So we're going to\nhave the inputs down at the bottom of this funnel.",
    "start": "279397",
    "end": "285329"
  },
  {
    "text": "It's going to have\nsome data in them. ",
    "start": "285329",
    "end": "292580"
  },
  {
    "text": "Those k inputs down\nhere, total size,",
    "start": "292580",
    "end": "297710"
  },
  {
    "text": "all these is theta K cubed. ",
    "start": "297710",
    "end": "305970"
  },
  {
    "text": "And then at the top here,\nwe have our output buffer.",
    "start": "305970",
    "end": "313320"
  },
  {
    "text": "This is where we're\ngoing to put the results and this will have size K cubed.",
    "start": "313320",
    "end": "319940"
  },
  {
    "text": " Maybe we've already\ndone some work",
    "start": "319940",
    "end": "325139"
  },
  {
    "text": "and we've filled some of it. OK, the question is what\ndo you put in this triangle",
    "start": "325140",
    "end": "330300"
  },
  {
    "text": "to do the merge? And the obvious thing\nis recursive triangles.",
    "start": "330300",
    "end": "335940"
  },
  {
    "text": "Recursion is like\nthe one technique we know in cache\noblivious data structures.",
    "start": "335940",
    "end": "341370"
  },
  {
    "text": "So we're going to take\nsquare root of K-funnels",
    "start": "341370",
    "end": "348660"
  },
  {
    "text": "and just join them together\nin the obvious way. So just like [INAUDIBLE]\nlayout, except--",
    "start": "348660",
    "end": "371370"
  },
  {
    "text": "I didn't quite leave\nenough room here-- in between the\nlevels are buffers.",
    "start": "371370",
    "end": "379780"
  },
  {
    "text": "There's a buffer here\ntwo between the nodes",
    "start": "379780",
    "end": "385530"
  },
  {
    "text": "of this funnel and the\nnodes of this funnel. ",
    "start": "385530",
    "end": "393130"
  },
  {
    "text": "OK, these buffers may have some\nstuff in them at any moment.",
    "start": "393130",
    "end": "399862"
  },
  {
    "text": "OK, and the big question is\nhow do you set the buffer size? This is the key step. And the claim is each buffer,\nwe set to a size of K to the 3/2",
    "start": "399862",
    "end": "410449"
  },
  {
    "text": "because the number of buffers\nis about square root of K because there's one per\nleaf of this funnel.",
    "start": "410450",
    "end": "418130"
  },
  {
    "text": "And a K-funnel has K inputs,\nso a root K funnel is going to have root K inputs here.",
    "start": "418130",
    "end": "423380"
  },
  {
    "text": "And so the total size\nof all the buffers is K squared, which\nis not too big.",
    "start": "423380",
    "end": "435199"
  },
  {
    "text": "I'm not going to go\nthrough the recurrence, but if you add up the\ntotal size of this thing, it is linear size in\nthe output, K cubed.",
    "start": "435199",
    "end": "445210"
  },
  {
    "text": "I think also if you don't count\nthe output buffer, it's linear and K squared. If I recall correctly.",
    "start": "445210",
    "end": "452860"
  },
  {
    "text": "We're not too concerned with\nthat here, just overall. ",
    "start": "452860",
    "end": "458410"
  },
  {
    "text": "Once we have\nK-funnels, funnel sort",
    "start": "458410",
    "end": "464920"
  },
  {
    "text": "is just going to be N to the\n1/3 way merge sort with an N",
    "start": "464920",
    "end": "480170"
  },
  {
    "text": "to the 1/3 funnel as the merger.",
    "start": "480170",
    "end": "487180"
  },
  {
    "start": "487180",
    "end": "492979"
  },
  {
    "text": "We can only up to n the 1/3\nbecause of this cubic thing. We can only merge--",
    "start": "492980",
    "end": "499250"
  },
  {
    "text": "if we want the sorting bound\nN/B log base M/B of N/B we can only afford K\nbeing up to n to the 1/3.",
    "start": "499250",
    "end": "506690"
  },
  {
    "text": "So that's the biggest we can do. So it's a recursive algorithm\nwhere each of the merging steps",
    "start": "506690",
    "end": "513620"
  },
  {
    "text": "is this recursive\ndata structure. Now, this is really\njust about layout. I haven't told you what the\nactual algorithm is yet,",
    "start": "513620",
    "end": "522210"
  },
  {
    "text": "but it's a recursive layout. You store the entire\nupper triangle, then each of the triangles,\nsomewhere you put the buffers.",
    "start": "522210",
    "end": "528755"
  },
  {
    "text": "It doesn't really\nmatter where the buffers are as long as each\ntriangle is stored. As a consecutive array\nof memory, we'll be OK.",
    "start": "528755",
    "end": "537230"
  },
  {
    "text": "And now let me tell you\nabout the actual algorithm to do this.",
    "start": "537230",
    "end": "542430"
  },
  {
    "text": "It's a very simple\nlazy algorithm. ",
    "start": "542430",
    "end": "550671"
  },
  {
    "text": "So there's a whole\nbunch of buffers. If you want to do this merge,\nreally what you'd like to do",
    "start": "550671",
    "end": "555920"
  },
  {
    "text": "is fill this output buffer. So you call this subroutine\ncalled fill on the output",
    "start": "555920",
    "end": "562310"
  },
  {
    "text": "buffer and say, I would like\nto fill this entire buffer with elements.",
    "start": "562310",
    "end": "567940"
  },
  {
    "text": "Precondition, if you're going to\ndo a fill, right now the buffer is empty, and then at\nthe end of the fill",
    "start": "567940",
    "end": "573800"
  },
  {
    "text": "you'd like this to\nbe completely full. And how do you do it? Well, if you look\nat any buffer--",
    "start": "573800",
    "end": "580430"
  },
  {
    "text": " partially filled, whatever--\nand you look right below it,",
    "start": "580430",
    "end": "586010"
  },
  {
    "text": "there's a node in this tree. You recurse all the way down. In the end, this is just a\nbinary tree with buffers in it.",
    "start": "586010",
    "end": "595370"
  },
  {
    "text": "So it's going to be there's a\nbuffer, then there's a node, then there's two children,\neach of which is a buffer,",
    "start": "595370",
    "end": "600932"
  },
  {
    "text": "and then there's\na node below that. ",
    "start": "600932",
    "end": "606920"
  },
  {
    "text": "OK, so how do I fill this thing? I just read the first\nitem, the beginning,",
    "start": "606920",
    "end": "615090"
  },
  {
    "text": "the smallest item for each\nof these, compare them. Whichever smaller,\nI stick at here.",
    "start": "615090",
    "end": "620600"
  },
  {
    "text": "It's just a regular binary\nmerge which is kind of cool. You've got two arrays. You want to merge them.",
    "start": "620600",
    "end": "625940"
  },
  {
    "text": "Stick the results here. So that's how we do fill. ",
    "start": "625940",
    "end": "638250"
  },
  {
    "text": "Binary merge of the two children\nbuffers until we're full.",
    "start": "638250",
    "end": "655580"
  },
  {
    "text": "But there's one thing\nthat can happen, which is that one of the\nchild buffers might empty. ",
    "start": "655580",
    "end": "668320"
  },
  {
    "text": "What do we do then? Recursively fill it. ",
    "start": "668320",
    "end": "680050"
  },
  {
    "text": "That's the algorithm. Very simple. The obvious lazy thing to do. Do a binary merge.",
    "start": "680050",
    "end": "686050"
  },
  {
    "text": "This is going to be nice\nbecause it's like two scans, until one of these guys empties,\nand then you pause this merge,",
    "start": "686050",
    "end": "693550"
  },
  {
    "text": "and then say OK, I'm going to\nfill this entire buffer, which will recursively do stuff\nuntil it's completely full",
    "start": "693550",
    "end": "701260"
  },
  {
    "text": "or I run out of input elements,\nwhichever comes first, and then resume this merge.",
    "start": "701260",
    "end": "707389"
  },
  {
    "text": "Question? AUDIENCE: Aren't there more\nthan two child buffers? ERIK DEMAINE: Should only\nbe two children buffers.",
    "start": "707390",
    "end": "714970"
  },
  {
    "text": "The question is, are\nthere more than two? This recursion of the root\nk and root k child triangles",
    "start": "714970",
    "end": "723220"
  },
  {
    "text": "of size root k is\nexactly the recursion we did on a binary tree. I didn't say, but underlying\nthis is a binary tree.",
    "start": "723220",
    "end": "729006"
  },
  {
    "text": "The only difference between\nthis and a [INAUDIBLE] layout is we're adding these buffers. I intended to draw\nthis as binary.",
    "start": "729006",
    "end": "735936"
  },
  {
    "text": "It's a little hard to tell\nbecause I didn't draw the base case, but it is indeed a\nbinary tree in the end.",
    "start": "735936",
    "end": "742240"
  },
  {
    "text": " OK, other questions?",
    "start": "742240",
    "end": "747647"
  },
  {
    "text": "So that's the algorithm\nand as I said, I'm not going to analyze it, but\nit's the same kind of analysis.",
    "start": "747647",
    "end": "753370"
  },
  {
    "text": "You look at the threshold\nwhere things fit in cache or don't and argue accordingly.",
    "start": "753370",
    "end": "760105"
  },
  {
    "text": " It's pretty hand-wavy.",
    "start": "760105",
    "end": "765880"
  },
  {
    "text": "What I want to get\nto is how we use this to solve more interesting\nproblems than sorting.",
    "start": "765880",
    "end": "770950"
  },
  {
    "text": "Sorting is a little bit boring. So let's go to batched\northogonal range searching.",
    "start": "770950",
    "end": "778369"
  },
  {
    "start": "778369",
    "end": "800890"
  },
  {
    "text": "And in general, this technique\ncalled distribution sweep. ",
    "start": "800890",
    "end": "809235"
  },
  {
    "text": "The idea with distribution\nsweep is that not only can we",
    "start": "809235",
    "end": "814570"
  },
  {
    "text": "use this cool funnel\nsort algorithm to sort, but we can think of\nit as doing a divide",
    "start": "814570",
    "end": "820030"
  },
  {
    "text": "and conquer on the key value. ",
    "start": "820030",
    "end": "853010"
  },
  {
    "text": "And in this case, we\nhave two coordinates. We're going to use\nthe divide and conquer on one of the coordinates.",
    "start": "853010",
    "end": "859360"
  },
  {
    "text": "And where we have\nsome flexibility is in this binary merge step.",
    "start": "859360",
    "end": "865730"
  },
  {
    "text": "We're doing this binary\nmerge, and normally it's just you take the min, you spit\nit out here, you take the min, you spit it out here.",
    "start": "865730",
    "end": "873100"
  },
  {
    "text": "That's the min of one\nparticular coordinate. Now you've got to deal with\nsome auxiliary information about the other coordinates.",
    "start": "873100",
    "end": "878646"
  },
  {
    "text": "So in general, you're\nmerging two sorted things. If there's other\ngeometric information,",
    "start": "878646",
    "end": "883990"
  },
  {
    "text": "you can try to preserve\nit during the merge. As long as you can do that, this\nis the conqueror part or that",
    "start": "883990",
    "end": "889630"
  },
  {
    "text": "combine step of\ndivide and conquer. You can do a lot. There's a powerful\ntechnique, it turns out.",
    "start": "889630",
    "end": "897610"
  },
  {
    "text": "It's by Brodal and Fagerberg. It's in their early\ndays of cache oblivious.",
    "start": "897610",
    "end": "904750"
  },
  {
    "text": "It was the first\ngeometric paper.  Fine, so replace or say\naugment the binary merge, which",
    "start": "904750",
    "end": "922630"
  },
  {
    "text": "is, in the end, the only\npart of the algorithm other than the recursion. So it's the only thing\nyou need to do to maintain",
    "start": "922630",
    "end": "934600"
  },
  {
    "text": "auxiliary information. That's the generic idea\nof distribution sweep.",
    "start": "934600",
    "end": "940324"
  },
  {
    "text": "And distribution\nsweep has been applied to solve lots of\ndifferent problems. Batched orthogonal range\nqueries is one of them.",
    "start": "940325",
    "end": "947620"
  },
  {
    "text": "Generally, you've got a\nbunch of orthogonal segments, rectangles, points, and you want\nto compute how they intersect.",
    "start": "947620",
    "end": "953330"
  },
  {
    "text": "Those sorts of problems\nthat can be solved here. Also weird things like I\ngive you a bunch of points",
    "start": "953330",
    "end": "959319"
  },
  {
    "text": "and I want to know\nfor every point what's its nearest neighbor. In Euclidean sense,\nthat can be solved.",
    "start": "959320",
    "end": "965920"
  },
  {
    "text": "But I like orthogonal\nrange searching because it's the closest to\nour data structure problem and that's a problem we've seen.",
    "start": "965920",
    "end": "972850"
  },
  {
    "text": "So the actual batched\northogonal range searching is your given N points,\nand N rectangles,",
    "start": "972850",
    "end": "987470"
  },
  {
    "text": "and you want to know which\npoints are in which rectangles. That's the general problem.",
    "start": "987470",
    "end": "993150"
  },
  {
    "text": "So normally, we're\ngiven the points first, and then we're given the\nrectangles one at a time.",
    "start": "993150",
    "end": "999550"
  },
  {
    "text": "That's what we've\nsolved in the past. That's what we will solve later. That's the online version. The batched version\nis I give you",
    "start": "999550",
    "end": "1004820"
  },
  {
    "text": "a whole bunch of queries\nI want to simultaneously and we're going to achieve\nthe sorting bound N/B log base",
    "start": "1004820",
    "end": "1015170"
  },
  {
    "text": "M/B of N/B plus the size\nof the output over B.",
    "start": "1015170",
    "end": "1022790"
  },
  {
    "text": "And this is\ngenerally the optimal bound you could hope for. It's not obvious\nyou need the log,",
    "start": "1022790",
    "end": "1028399"
  },
  {
    "text": "but I think for most\nproblems in external memory you need this log. It's hard to beat\nthe sorting bound,",
    "start": "1028400",
    "end": "1034490"
  },
  {
    "text": "and then once you pay\nthe sorting bound, this is the optimal linear time\nto just write down the output.",
    "start": "1034490",
    "end": "1040559"
  },
  {
    "text": "Now, this problem can be solved. Give me all the point\nrectangle pairs that result.",
    "start": "1040560",
    "end": "1048650"
  },
  {
    "text": "I'm not going to\nsolve it here exactly. We're going to solve a\nslightly different version,",
    "start": "1048650",
    "end": "1054960"
  },
  {
    "text": "or in general-- whatever. Let me tell you about another\nversion of this problem, which",
    "start": "1054960",
    "end": "1061700"
  },
  {
    "text": "is a little bit easier. Then I'll sketch how\nyou solve that problem. ",
    "start": "1061700",
    "end": "1071040"
  },
  {
    "text": "So remember, we've talked\nabout range reporting and also range\ncounting, which is you",
    "start": "1071040",
    "end": "1078259"
  },
  {
    "text": "just want to know the\nnumber of answers. Here's something in between. You want to know\nfor every point,",
    "start": "1078260",
    "end": "1086300"
  },
  {
    "text": "how many rectangles contain it? And particularly,\nthis will tell you for each point, does\nit appear in any",
    "start": "1086300",
    "end": "1092791"
  },
  {
    "text": "of the rectangles in the set? It will tell you how\nmany and this is actually necessary as a first\nstep because one",
    "start": "1092791",
    "end": "1099230"
  },
  {
    "text": "of the hard parts in solving\nthese kinds of problems or reporting problems, is\nthat the output could be big.",
    "start": "1099230",
    "end": "1106370"
  },
  {
    "text": "We know that's always an issue,\nbut with cache oblivious, it's a big issue, literally,\nbecause space is important.",
    "start": "1106370",
    "end": "1115370"
  },
  {
    "text": "You can't afford to\nput space anywhere. ",
    "start": "1115370",
    "end": "1121610"
  },
  {
    "text": "If these buffers have to\nget much bigger in order to store those\nanswers, then life",
    "start": "1121610",
    "end": "1127010"
  },
  {
    "text": "is kind of tough because\nthen this data structure gets too big, and then my\nanalysis goes out the window",
    "start": "1127010",
    "end": "1132682"
  },
  {
    "text": "because things that\nused to fit in cache, no longer fit in cache. The analysis I didn't show you.",
    "start": "1132682",
    "end": "1138330"
  },
  {
    "text": "So it's an issue. So the first step\nof this algorithm",
    "start": "1138330",
    "end": "1145340"
  },
  {
    "text": "is to first figure out\nhow big those buffers have to be so that we don't have\nto allocate them too large.",
    "start": "1145340",
    "end": "1151059"
  },
  {
    "text": "And to do that, we\nneed to basically count how many answers there are,\nand this is what we'll do.",
    "start": "1151060",
    "end": "1158000"
  },
  {
    "text": "To compute these values,\nthe answers aren't very big. These answers are just\nsingle numbers per point,",
    "start": "1158000",
    "end": "1163220"
  },
  {
    "text": "so it's no big deal. OK, so here's what we do.",
    "start": "1163220",
    "end": "1170299"
  },
  {
    "text": "Sort the points and the\ncorners of the rectangles",
    "start": "1170300",
    "end": "1178430"
  },
  {
    "text": "by x-coordinate using\nlazy final sort.",
    "start": "1178430",
    "end": "1184010"
  },
  {
    "text": "Nothing fancy here. No augmentation,\nregular old sort. Then-- this will\nbe useful later--",
    "start": "1184010",
    "end": "1191809"
  },
  {
    "text": "then we're going to\ndivide and conquer on y via a distribution sweep.",
    "start": "1191810",
    "end": "1202320"
  },
  {
    "text": " And here, our binary merger\nis going to be an upward sweep",
    "start": "1202320",
    "end": "1217320"
  },
  {
    "text": "line algorithm. ",
    "start": "1217320",
    "end": "1229880"
  },
  {
    "text": "So let's talk about that\nsweep line algorithm. ",
    "start": "1229880",
    "end": "1237190"
  },
  {
    "text": "We presorted our points by x. If you think about the merging\nstep, what this means--",
    "start": "1237190",
    "end": "1245360"
  },
  {
    "text": " it's confusing.",
    "start": "1245360",
    "end": "1251770"
  },
  {
    "text": "We're trying to sort by y,\nwe were in a certain sense,",
    "start": "1251770",
    "end": "1257500"
  },
  {
    "text": "but we're always going to be\nsorted by x because we did that up front.",
    "start": "1257500",
    "end": "1262730"
  },
  {
    "text": "So the picture is going\nto be something like this. We're in a slab.",
    "start": "1262730",
    "end": "1268090"
  },
  {
    "text": "There's going to\nbe the left slab. So here's the binary merger.",
    "start": "1268090",
    "end": "1273880"
  },
  {
    "text": " Here's the L points\nand the R points.",
    "start": "1273880",
    "end": "1280000"
  },
  {
    "text": "The L points are going to be\nin a particular x interval. The R points are going to\nbe in an adjacent x interval",
    "start": "1280000",
    "end": "1288070"
  },
  {
    "text": "corresponding to\nthis tree picture. And then we have these points,\nwhich they overlap and why?",
    "start": "1288070",
    "end": "1299680"
  },
  {
    "text": "Because the whole point is\nwe're trying to merge by y. OK, we also have\nsome rectangles,",
    "start": "1299680",
    "end": "1309360"
  },
  {
    "text": "and their corners are\nwhat we have represented. ",
    "start": "1309360",
    "end": "1318544"
  },
  {
    "text": "I probably should\nhave used colors here. ",
    "start": "1318544",
    "end": "1329390"
  },
  {
    "text": "Something like this. ",
    "start": "1329390",
    "end": "1337790"
  },
  {
    "text": "So we're given,\nessentially-- we have whatever we want on the\npoints and corners in here.",
    "start": "1337790",
    "end": "1343196"
  },
  {
    "text": "We have whatever we\nwant in the points and corners in this slab. Let me add a little\nbit of color.",
    "start": "1343197",
    "end": "1350279"
  },
  {
    "text": "These lines. ",
    "start": "1350280",
    "end": "1355580"
  },
  {
    "text": "And now we want to merge these\ntwo things and merging here",
    "start": "1355580",
    "end": "1360950"
  },
  {
    "text": "is all about counting how many\nrectangles contain each point. Now, we already know how\nmany points over here",
    "start": "1360950",
    "end": "1368240"
  },
  {
    "text": "are contained in rectangles\nthat are over here. So we've presumably\nalready found that this point lies\nin this rectangle.",
    "start": "1368240",
    "end": "1375930"
  },
  {
    "text": "We've already found-- I guess there's no points here. We've already found\nthat this point is contained in this rectangle.",
    "start": "1375930",
    "end": "1382200"
  },
  {
    "text": "OK, because these corners were\nin this slab, and so let's say every corner knows\nthe entire rectangle.",
    "start": "1382200",
    "end": "1388680"
  },
  {
    "text": "So when you were processing\nR, you saw these corners, you saw this point. Somehow you figured that out.",
    "start": "1388680",
    "end": "1394040"
  },
  {
    "text": "What we're missing are things\nlike this rectangle, where",
    "start": "1394040",
    "end": "1399830"
  },
  {
    "text": "none of the corners\nare inside R. So R knew nothing\nabout this rectangle, and yet it has points\nthat are contained in it.",
    "start": "1399830",
    "end": "1406580"
  },
  {
    "text": "Similarly, there are these\nrectangles that completely span L, and so therefore none\nof the corners are inside L.",
    "start": "1406580",
    "end": "1415700"
  },
  {
    "text": "But we need to know that\nthese points are in there. Those are the only things that\nwill be missing at this level.",
    "start": "1415700",
    "end": "1422419"
  },
  {
    "text": " There might be other\nrectangles that completely span L and R. Those will be\ndiscovered at higher levels,",
    "start": "1422420",
    "end": "1430059"
  },
  {
    "text": "now here. It's a little bit awkward to\ncheck if this will actually find everything, but it will.",
    "start": "1430060",
    "end": "1438200"
  },
  {
    "text": "So to figure this out, when\nwe're merging L and R--",
    "start": "1438200",
    "end": "1443725"
  },
  {
    "text": "see, L knows about\nthis rectangle because it sees these points. We want to keep track\nas we sweep upwards.",
    "start": "1443725",
    "end": "1449840"
  },
  {
    "text": "We want to realize that these\npoints are in a big rectangle here, whereas they\nweren't discovered in L, and they weren't\ndiscovered in R.",
    "start": "1449840",
    "end": "1457520"
  },
  {
    "text": "To do that, we maintain a number\nas-- we have a horizontal line,",
    "start": "1457520",
    "end": "1465140"
  },
  {
    "text": "we're sweeping up. We want to maintain the\nnumber of active rectangles.",
    "start": "1465140",
    "end": "1474170"
  },
  {
    "text": "Active means that it's currently\nbeing sliced by the sweep line. ",
    "start": "1474170",
    "end": "1482450"
  },
  {
    "text": "That have left corners\nin L and completely",
    "start": "1482450",
    "end": "1493130"
  },
  {
    "text": "span R. So that's these guys. So that's easy to do.",
    "start": "1493130",
    "end": "1499550"
  },
  {
    "text": "We're merging these points. So that each of them\nhas been sorted by y. Now we're doing\na merge, so we're",
    "start": "1499550",
    "end": "1506870"
  },
  {
    "text": "considering all the\ncorners, and all the points, and increasing the y-coordinate\nas we do that binary merge.",
    "start": "1506870",
    "end": "1513740"
  },
  {
    "text": "So whenever we visit a left\ncorner of a rectangle-- a lower left corner-- we\nsay oh, does this rectangle",
    "start": "1513740",
    "end": "1520954"
  },
  {
    "text": "go all the way across? This one does not. By the time we get to here, this\none goes all the way cross R,",
    "start": "1520954",
    "end": "1526820"
  },
  {
    "text": "and so we increment CL. And when we get to the upper\nleft corner, we decrement CL.",
    "start": "1526820",
    "end": "1532670"
  },
  {
    "text": "Say oh, that rectangle's over. So it's very easy\nto do constant time,",
    "start": "1532670",
    "end": "1538070"
  },
  {
    "text": "but it's only going\nto be 1/B memory transfers per one of\nthese because it's a nice, cheap merge.",
    "start": "1538070",
    "end": "1545870"
  },
  {
    "text": "And then symmetrically,\nwe do CR. It's the number of\nactive rectangles",
    "start": "1545870",
    "end": "1552020"
  },
  {
    "text": "with the right\ncorners in R that span L. So that's this guy, CR,\nI guess, this guy is CL.",
    "start": "1552020",
    "end": "1565440"
  },
  {
    "text": "In general, there might be a\nlot of them, so you count them. And then the only\nthing we need to do",
    "start": "1565440",
    "end": "1582271"
  },
  {
    "text": "is whenever we\nencounter a point as opposed to a corner,\nbecause we're storing them all together, we add--",
    "start": "1582271",
    "end": "1590440"
  },
  {
    "text": "I got this right-- CR to it's counter.",
    "start": "1590440",
    "end": "1596950"
  },
  {
    "text": "We want to know how many\nrectangles contain that point. And so for example,\nwhen we see this point,",
    "start": "1596950",
    "end": "1603400"
  },
  {
    "text": "and CR is currently one, then\nwe know that this point appeared in some rectangle\nthat spanned L.",
    "start": "1603400",
    "end": "1609160"
  },
  {
    "text": "So we increment\nthis points counter. Similarly, when we see these\npoints, CL is positive, so we increment these guys\ncounters by whatever CL is.",
    "start": "1609160",
    "end": "1617500"
  },
  {
    "text": "So this is a symmetric\nversion in R when we add CL.",
    "start": "1617500",
    "end": "1625329"
  },
  {
    "text": "Probably should have called\nthem the other names, but anyway, CL,\nCR, doesn't matter.",
    "start": "1625329",
    "end": "1630350"
  },
  {
    "text": "CLRS. Question? AUDIENCE: The bottom\nis the x-axis, right?",
    "start": "1630350",
    "end": "1635740"
  },
  {
    "text": "ERIK DEMAINE: This\nis the x-axis, yeah. AUDIENCE: So are we dividing\nand conquering on x? ERIK DEMAINE: It does look like\nwe're dividing and conquering",
    "start": "1635740",
    "end": "1643230"
  },
  {
    "text": "on x, I think you're right. Sorry. For some reason I\nthought it was y.",
    "start": "1643230",
    "end": "1648682"
  },
  {
    "text": "You're right. So it's a funny thing. We're pre-sorting by x,\nwhich is what's getting us--",
    "start": "1648682",
    "end": "1655770"
  },
  {
    "text": "thank you. That's much clearer now. In my mind I was like\nthere's something weird here. We're presorting on\nx and then we're just",
    "start": "1655770",
    "end": "1662190"
  },
  {
    "text": "sticking these guys down here. So evenly dividing\nthem into lists.",
    "start": "1662190",
    "end": "1668760"
  },
  {
    "text": "Or, I guess actually, we're\ndoing our funnel sort, the merge sort.",
    "start": "1668760",
    "end": "1674389"
  },
  {
    "text": "Things have already\nbeen sorted by x, but now we're merge\nsorting again,",
    "start": "1674389",
    "end": "1679740"
  },
  {
    "text": "and this time when we merge, we\ncarry along this information. So they're both in terms of\nx, which is kind of funny.",
    "start": "1679740",
    "end": "1687330"
  },
  {
    "text": "Is there another question? AUDIENCE: Sorry, is it\nimportant that we do",
    "start": "1687330",
    "end": "1692953"
  },
  {
    "text": "the upward sweep [INAUDIBLE]? ",
    "start": "1692953",
    "end": "1698640"
  },
  {
    "text": "ERIK DEMAINE: The upward sweep. Yeah, we have to do the\npoints in order by y.",
    "start": "1698640",
    "end": "1704145"
  },
  {
    "text": "AUDIENCE: So do we\nwant to just sort by y, and then [INAUDIBLE].",
    "start": "1704145",
    "end": "1709900"
  },
  {
    "text": "ERIK DEMAINE: Ah,\nso confused now. AUDIENCE: Because in the\nnotes, it said x and then y.",
    "start": "1709900",
    "end": "1715707"
  },
  {
    "text": "ERIK DEMAINE: Yeah, I know\nin the notes it says y. It used to say x. I believe, we're dividing\nand conquering on x,",
    "start": "1715707",
    "end": "1724480"
  },
  {
    "text": "but we're sorting by y,\nand that's the confusion. I'll double check\nthis, but in order",
    "start": "1724480",
    "end": "1732850"
  },
  {
    "text": "for this sweep to work-- so\nit's like you first sort by x. You",
    "start": "1732850",
    "end": "1738386"
  },
  {
    "text": "We are in some sense\ndoing divide and conquer by x because we\ndid this sort by x. But the merge short is on y.",
    "start": "1738386",
    "end": "1747980"
  },
  {
    "text": "It makes more sense. If you're already\nin x order, sorting isn't going to learn you much. It isn't going to\nteach you much.",
    "start": "1747980",
    "end": "1755620"
  },
  {
    "text": "So first you sort by x. Things are nicely ordered by x. So we get these nice horizontal\nslabs in the decomposition,",
    "start": "1755620",
    "end": "1761799"
  },
  {
    "text": "but now when we merge-- Now we're going to sort by y. So we're going to reorder\nthe points and that's",
    "start": "1761800",
    "end": "1766908"
  },
  {
    "text": "what lets us do the sweep. And we are, in the end, merging\nall these points together in y order.",
    "start": "1766908",
    "end": "1772690"
  },
  {
    "text": "And as we do it, then\nwe get the information we want about\nrectangles and points. OK, this is why I wanted\nthis to be both x and y.",
    "start": "1772690",
    "end": "1781269"
  },
  {
    "text": "But really, the divide and\nconquer is happening on x, but we are doing\na merge sort on y.",
    "start": "1781270",
    "end": "1788170"
  },
  {
    "text": "Finally clear. Thanks for helping me. This is a new lecturers,\nas you may have guessed,",
    "start": "1788170",
    "end": "1793972"
  },
  {
    "text": "so still working out some kinks. I really wanted to\nintroduce this lecture",
    "start": "1793972",
    "end": "1799330"
  },
  {
    "text": "because the next thing\nwe're going to cover, which is a way to do orthogonal\n2D range search and cache",
    "start": "1799330",
    "end": "1805630"
  },
  {
    "text": "obviously, is super cool. It's like one of the\ncraziest things there is.",
    "start": "1805630",
    "end": "1813540"
  },
  {
    "text": "At least in the cache\noblivious world. Any other questions before-- Oh, I should say a little\nbit more about this.",
    "start": "1813540",
    "end": "1821740"
  },
  {
    "text": "We've now solved this first\nstep, which is figuring out the output size.",
    "start": "1821740",
    "end": "1828520"
  },
  {
    "text": "Counting for each point how\nmany rectangles contain it, which is an interesting\nproblem by itself.",
    "start": "1828520",
    "end": "1834070"
  },
  {
    "text": "That's the range\ncounting problem. You can also use it to\nfigure out, at this level,",
    "start": "1834070",
    "end": "1839620"
  },
  {
    "text": "at this merging step, how many\nthings will be output here? How many new outputs are there?",
    "start": "1839620",
    "end": "1845140"
  },
  {
    "text": "How many points in\nrectangles are there? It's essentially just the\nsum of all those things. ",
    "start": "1845140",
    "end": "1852650"
  },
  {
    "text": "So you can count the\nnumber of outputs per merge and so then there's a natural\nstrategy, which is you",
    "start": "1852650",
    "end": "1860530"
  },
  {
    "text": "build a new funnel structure\nwhere these buffers",
    "start": "1860530",
    "end": "1865720"
  },
  {
    "text": "have the right size. You've pre-computed what\nall sizes need to be. At every merge you\nknow how many things",
    "start": "1865720",
    "end": "1872620"
  },
  {
    "text": "are going to get spit out here. So you could allocate that\nmuch space and that will",
    "start": "1872620",
    "end": "1877780"
  },
  {
    "text": "be a kind of decent merge sort. Because I haven't\ndone the analysis,",
    "start": "1877780",
    "end": "1882870"
  },
  {
    "text": "it's hard to get into\ndetail about this. But it will not be\noptimal, unfortunately.",
    "start": "1882870",
    "end": "1889390"
  },
  {
    "text": "To actually make\nit work, you end up having to take this\ntree, carving it into subtrees of linear size.",
    "start": "1889390",
    "end": "1896530"
  },
  {
    "text": "So normally, the whole\nthing is linear size. Everything's fine. And where the analysis\nbreaks, essentially,",
    "start": "1896530",
    "end": "1901810"
  },
  {
    "text": "is if you have a giant buffer\nbecause one of the outputs-- potentially, the output\nsize here is quadratic.",
    "start": "1901810",
    "end": "1907760"
  },
  {
    "text": "And so the overall thing\nmight be super linear. And so when you have a super\nlinear buffer or a bunch",
    "start": "1907760",
    "end": "1913930"
  },
  {
    "text": "of very large buffers\nthat sum to linear size, you essentially need to\ncarve that tree, which you do by recursive\ncarving of the tree.",
    "start": "1913930",
    "end": "1921511"
  },
  {
    "text": "So that each of the\ntrees has linear size. Then you apply the analysis to\neach of the trees separately. You store them\nconsecutively, separately.",
    "start": "1921511",
    "end": "1928120"
  },
  {
    "text": "Each of them has good\noptimal running time and then the combination does. That's the hand-wavy\nversion of how",
    "start": "1928120",
    "end": "1933640"
  },
  {
    "text": "to do actual range reporting\nwith end points and end rectangles. If you're interested in the\ndetails, read the paper.",
    "start": "1933640",
    "end": "1940460"
  },
  {
    "text": "It's just a little bit\nmessy and especially when you don't know the analysis.",
    "start": "1940460",
    "end": "1946780"
  },
  {
    "text": "I want to move on to\nonline orthogonal 2D range searching because it's\nthe hardest and coolest of them",
    "start": "1946780",
    "end": "1958270"
  },
  {
    "text": "all. Unless there are more questions. All right. ",
    "start": "1958270",
    "end": "1964827"
  },
  {
    "text": "AUDIENCE: So you do the\nrange counting [INAUDIBLE] in detail, and [INAUDIBLE]\nto the [INAUDIBLE]..",
    "start": "1964827",
    "end": "1972700"
  },
  {
    "text": "ERIK DEMAINE: Exactly. At this point, if you\nbelieve in funnel sort, you should believe that\nrange counting is easy to do,",
    "start": "1972700",
    "end": "1980260"
  },
  {
    "text": "and I've just hand waved\nthe range reporting part. Are you scribing?",
    "start": "1980260",
    "end": "1985285"
  },
  {
    "text": "Is that why you ask? ",
    "start": "1985285",
    "end": "1991080"
  },
  {
    "text": "That's where we stand. The next thing we're going to\ndo is regular range reporting,",
    "start": "1991080",
    "end": "1997450"
  },
  {
    "text": "regular online stuff. So this is orthogonal\n2D range search.",
    "start": "1997450",
    "end": "2004565"
  },
  {
    "start": "2004565",
    "end": "2010110"
  },
  {
    "text": "And we spent a\ncouple of lectures on 2D and 3D range search. All this crazy stuff with\nfractional cascading,",
    "start": "2010110",
    "end": "2018450"
  },
  {
    "text": "and so on, and the\nlayered range trees. We're going to use some of those\ntechniques that we built there,",
    "start": "2018450",
    "end": "2024450"
  },
  {
    "text": "and in particular,\nyou may recall there was this idea that if\nwe have a bunch of points,",
    "start": "2024450",
    "end": "2031890"
  },
  {
    "text": "regular 2D range searching\nis I give you a rectangle, give me all the points\nin the rectangle.",
    "start": "2031890",
    "end": "2037240"
  },
  {
    "text": "Fine. Our goal is to achieve log base\nB of N plus output size over B.",
    "start": "2037240",
    "end": "2046710"
  },
  {
    "text": "That's the new optimal bound. This is how long it takes to\ndo a regular search in one dimension.",
    "start": "2046710",
    "end": "2053550"
  },
  {
    "text": "So if you have output\nsize whatever-- and we'll probably be\nable to do range counting,",
    "start": "2053550",
    "end": "2058877"
  },
  {
    "text": "but I won't worry about it here. We'll just think\nabout range reporting. If there's this\nmany points, we'll output them all in\nthat much over B.",
    "start": "2058877",
    "end": "2066330"
  },
  {
    "text": "This is what we call a\nregular range search, but I'm going to distinguish it\nand call it a four sided range",
    "start": "2066330",
    "end": "2072719"
  },
  {
    "text": "search because a\nrectangle has four sides. But you could think\nof the other versions",
    "start": "2072719",
    "end": "2079669"
  },
  {
    "text": "and we actually did this when\nwe were doing the 3-D problem. So if these are two\nrays and an edge,",
    "start": "2079670",
    "end": "2087770"
  },
  {
    "text": "this you might call a\nthree sided rectangle, and you can go all the\nway down to two sides.",
    "start": "2087770",
    "end": "2094158"
  },
  {
    "text": "Hard to go down to one side. Here's a two sided rectangle,\nit just has two rays.",
    "start": "2094159",
    "end": "2103150"
  },
  {
    "text": "OK, as you might expect,\nthis is easier than that. And if I recall, in 3-D we ended\nup doing this thing in linear",
    "start": "2103150",
    "end": "2111760"
  },
  {
    "text": "space with this fancy-- first you do a search\non the left coordinate and then you just walk.",
    "start": "2111760",
    "end": "2117970"
  },
  {
    "text": "We'd subdivided with\nfractional cascading so that every face\nhad constant size,",
    "start": "2117970",
    "end": "2123040"
  },
  {
    "text": "and so you could\njust walk, and each step you'd report a new point. If you may recall for this\nkind of two sided thing.",
    "start": "2123040",
    "end": "2128666"
  },
  {
    "text": "First, you would\nsearch for this, and then you would basically\njust follow this line until you found this point, this corner.",
    "start": "2128666",
    "end": "2137109"
  },
  {
    "text": "This we could achieve in a\nlinear space, logarithmic time.",
    "start": "2137110",
    "end": "2142750"
  },
  {
    "text": "This one we needed\nN log N space. Actually, the best known is\nN log N divided by log log N.",
    "start": "2142750",
    "end": "2151660"
  },
  {
    "text": "But we could N log\nN using range trees. And we got down to\nlog N time using--",
    "start": "2151660",
    "end": "2158260"
  },
  {
    "text": "log N query time and log N\nspace using layered range trees.",
    "start": "2158260",
    "end": "2163390"
  },
  {
    "text": "That was the internal\nmemory regular algorithms. AUDIENCE: Aren't you\nmissing an M/B though?",
    "start": "2163390",
    "end": "2169044"
  },
  {
    "text": "ERIK DEMAINE: Am\nI missing an M/B? No, this is log base B of N,\nnot log base M/B of N. Yeah,",
    "start": "2169044",
    "end": "2174920"
  },
  {
    "text": "it's good to ask. When we're sorting this kind\nof thing, we get log base M/B,",
    "start": "2174920",
    "end": "2181634"
  },
  {
    "text": "but when you're searching,\nthe best you can do is log base B. We\nactually proved a lower bound about this in the\nfirst memory hierarchy lecture.",
    "start": "2181634",
    "end": "2187780"
  },
  {
    "text": " Because this is online,\nyou read it in a block.",
    "start": "2187780",
    "end": "2193900"
  },
  {
    "text": "You can only learn where\nyou fit among B items. And so the best you\ncan hope to achieve is log base B of N for\nsearch in one dimension.",
    "start": "2193900",
    "end": "2200680"
  },
  {
    "text": "So this is a lower\nbound for search. When you're doing\nbatch operations, then you can hope to\nachieve this stuff, which",
    "start": "2200680",
    "end": "2207100"
  },
  {
    "text": "is a lot faster. Then it's like 1/B times\nlog base M/B of M/B.",
    "start": "2207100",
    "end": "2212770"
  },
  {
    "text": "OK, so in a certain\nsense, this is slower than the\nbatched operations, but it's more online. So it's a trade-off.",
    "start": "2212770",
    "end": "2217872"
  },
  {
    "start": "2217872",
    "end": "2226080"
  },
  {
    "text": "So for all these problems we\ncan achieve log base B of N plus [? out ?] over B.\nThe issue is with space.",
    "start": "2226080",
    "end": "2232040"
  },
  {
    "start": "2232040",
    "end": "2237980"
  },
  {
    "text": "Maybe I'll do sort of regular\nRAM algorithms versus cache",
    "start": "2237980",
    "end": "2245240"
  },
  {
    "text": "oblivious.  So we've got two sided,\nthree sided, four sided.",
    "start": "2245240",
    "end": "2254330"
  },
  {
    "text": "And for two sided, I believe\nthese are the right answers.",
    "start": "2254330",
    "end": "2264440"
  },
  {
    "text": "Log N over log log N. But we\nhaven't actually seen this one.",
    "start": "2264440",
    "end": "2270260"
  },
  {
    "start": "2270260",
    "end": "2275900"
  },
  {
    "text": "And cache oblivious,\nhere's what we can do. This is with optimal query\ntimes and this is all static.",
    "start": "2275900",
    "end": "2284750"
  },
  {
    "start": "2284750",
    "end": "2292270"
  },
  {
    "text": "OK, and if there's time,\nI'll cover all of these. So they're not perfect. These two were off by a\nlog factor, but not bad.",
    "start": "2292270",
    "end": "2301960"
  },
  {
    "text": "Pretty good orthogonal\n2D range queries. And really, the coolest\none is this one.",
    "start": "2301960",
    "end": "2307930"
  },
  {
    "text": "This one blows my mind\nevery time I see it. So let's do it. ",
    "start": "2307930",
    "end": "2316600"
  },
  {
    "text": "We'll start with two\nsided and then we have existing\ntechniques once you have two sided to\nadd on more sides,",
    "start": "2316600",
    "end": "2323800"
  },
  {
    "text": "you may recall from the 3D\nrange searching lecture. So we're going to\nuse those techniques",
    "start": "2323800",
    "end": "2328840"
  },
  {
    "text": "and refine them a little bit\nto get that log log factor.",
    "start": "2328840",
    "end": "2335110"
  },
  {
    "text": "But you may recall way back\nwhen, at lecture six or so,",
    "start": "2335110",
    "end": "2340780"
  },
  {
    "text": "that we had a technique. Once it was two\nsided, every time we added a log factor in space,\nwe could add another side.",
    "start": "2340780",
    "end": "2347650"
  },
  {
    "text": "The hard part was getting\nup the number of dimensions. Then the easy part was turning\nhalf infinite intervals",
    "start": "2347650",
    "end": "2354819"
  },
  {
    "text": "into regular intervals. So once we have this, it's easy\nto add a log, add another log.",
    "start": "2354820",
    "end": "2361300"
  },
  {
    "text": "With a bit of sophistication,\nwe can save a log log factor. OK, but let's do two sided.",
    "start": "2361300",
    "end": "2368930"
  },
  {
    "text": "This will be the\nbulk of the lecture. ",
    "start": "2368930",
    "end": "2376630"
  },
  {
    "text": "This is a paper by [? Harga ?]\nand [? Zey ?] in 2006.",
    "start": "2376630",
    "end": "2384420"
  },
  {
    "text": "All right, so we want to do-- I'm going to assume that\nthey are this kind of quarter plain query.",
    "start": "2384420",
    "end": "2389770"
  },
  {
    "text": "So less than or\nequal to x, less than or equal to some y-coordinate.",
    "start": "2389770",
    "end": "2398210"
  },
  {
    "text": "We want to know all the\npoints in that quarter plane.",
    "start": "2398210",
    "end": "2403390"
  },
  {
    "text": "So here's what\nwe're going to do. It's all static.",
    "start": "2403390",
    "end": "2409960"
  },
  {
    "text": "We're going to have a\nVan Emde Boas layout. So a binary tree on\nthe y-coordinate.",
    "start": "2409960",
    "end": "2421100"
  },
  {
    "text": "So this just stores all\nthe points sorted by y. ",
    "start": "2421100",
    "end": "2426280"
  },
  {
    "text": "So if you want to do this query,\nuse search for that value of y,",
    "start": "2426280",
    "end": "2432750"
  },
  {
    "text": "then each of these positions\nin between two keys in here",
    "start": "2432750",
    "end": "2439520"
  },
  {
    "text": "has a pointer to an array. ",
    "start": "2439520",
    "end": "2445369"
  },
  {
    "text": "The array is not sorted by x\nor y, it's a very weird thing. ",
    "start": "2445370",
    "end": "2452450"
  },
  {
    "text": "And then here's the\nalgorithm you follow. You follow this pointer, you\ngo here, you walk to the right",
    "start": "2452450",
    "end": "2459920"
  },
  {
    "text": "until you find a point whose\nx-coordinate is too big.",
    "start": "2459920",
    "end": "2467285"
  },
  {
    "text": "It's bigger than x. I should probably\ncall this x2, y2.",
    "start": "2467285",
    "end": "2472870"
  },
  {
    "text": "So first you search for a y2\nhere, in this thing keyed by y.",
    "start": "2472870",
    "end": "2479390"
  },
  {
    "text": "Follow the pointer. You look at all the points that\nhave x-coordinate less than or equal to x2.",
    "start": "2479390",
    "end": "2485269"
  },
  {
    "text": "Those are the ones you want. Once you find a point whose\nx-coordinate is bigger than x2, you stop, and then you\nreport these points.",
    "start": "2485270",
    "end": "2493410"
  },
  {
    "text": "It's not quite so simple\nbecause some of these points might be duplicates. You have to remove duplicates.",
    "start": "2493410",
    "end": "2499400"
  },
  {
    "text": "That is your answer. ",
    "start": "2499400",
    "end": "2506170"
  },
  {
    "text": "To me, this is an insane idea. I would never\nimagine this to work.",
    "start": "2506170",
    "end": "2511930"
  },
  {
    "text": "But the claim is you can make\nthis array have linear size. That's the hard part.",
    "start": "2511930",
    "end": "2519520"
  },
  {
    "text": "Make this, the amount of stuff\nthat you have to traverse here, be linear in out in the number\nof points that are actually",
    "start": "2519520",
    "end": "2528970"
  },
  {
    "text": "in this range. You are going to do a little\nbit more work because there",
    "start": "2528970",
    "end": "2534670"
  },
  {
    "text": "are duplicates in here, but only\na constant factor of more work. And yet somehow, you've taken\nthis two dimensional problem",
    "start": "2534670",
    "end": "2541360"
  },
  {
    "text": "and squashed it onto a line. You did one search at\nthe beginning, which costs you log base B of N,\nthen you do this linear scan,",
    "start": "2541360",
    "end": "2548650"
  },
  {
    "text": "and you get the right\nanswer, magically. I don't know how they thought\nthis would be possible,",
    "start": "2548650",
    "end": "2556120"
  },
  {
    "text": "but magically, it turns\nout it is possible. It was kind of a breakthrough\nin cache oblivious",
    "start": "2556120",
    "end": "2562750"
  },
  {
    "text": "range searching. It was known how to do this for\nexternal memory a lot easier. ",
    "start": "2562750",
    "end": "2570680"
  },
  {
    "text": "For example, you can\ndo it with persistence, but this is a much cooler way\nto do two sided range queries.",
    "start": "2570680",
    "end": "2580050"
  },
  {
    "text": "All right, so I've explained\nthe query algorithm. ",
    "start": "2580050",
    "end": "2587126"
  },
  {
    "text": "The big thing I\nhaven't explained is how to build this array. ",
    "start": "2587126",
    "end": "2595192"
  },
  {
    "text": "Maybe I'll write\ndown the things we need to prove as well\nbefore we get there, so you can think\nabout them as we're",
    "start": "2595192",
    "end": "2601000"
  },
  {
    "text": "writing down the algorithm. First claim is that this\nalgorithm, which just decides",
    "start": "2601000",
    "end": "2606460"
  },
  {
    "text": "to stop whenever it gets an\nx-coordinate that is too big, actually finds the right answer. It Finds all points in the\nrange that we care about.",
    "start": "2606460",
    "end": "2617109"
  },
  {
    "text": " The second thing is that the\nnumber of scanned points,",
    "start": "2617110",
    "end": "2625210"
  },
  {
    "text": "the length of that step here,\nis order the size of the output.",
    "start": "2625210",
    "end": "2636830"
  },
  {
    "text": "The number of actual\noutput points. We don't waste time\ndoing the scan.",
    "start": "2636830",
    "end": "2642830"
  },
  {
    "text": "And the other thing is that the\narray has size order N. That's",
    "start": "2642830",
    "end": "2649490"
  },
  {
    "text": "the biggest surprise to me. So those are the\nthree things we need",
    "start": "2649490",
    "end": "2655430"
  },
  {
    "text": "to prove about the algorithm,\nwhich I will now tell you. ",
    "start": "2655430",
    "end": "2676270"
  },
  {
    "text": "OK, before I can define\nhow this array works, I need to define a\nconcept called density. ",
    "start": "2676270",
    "end": "2689450"
  },
  {
    "text": "If we look at a query, there's\ntwo things that could happen.",
    "start": "2689450",
    "end": "2699760"
  },
  {
    "text": "The good thing for\nus would be if--",
    "start": "2699760",
    "end": "2705240"
  },
  {
    "text": "get this right.  The number of points in\nlesser or equal to x star",
    "start": "2705240",
    "end": "2720570"
  },
  {
    "text": "is at most, alpha times the\nnumber of points in the answer.",
    "start": "2720570",
    "end": "2727780"
  },
  {
    "start": "2727780",
    "end": "2734530"
  },
  {
    "text": "OK, star means no\nrestriction on y. Minus infinity to infinity.",
    "start": "2734530",
    "end": "2739673"
  },
  {
    "start": "2739674",
    "end": "2745110"
  },
  {
    "text": "This would be good for\nus because it says-- ultimately what we're trying\nto do here is do a scan in x.",
    "start": "2745110",
    "end": "2752085"
  },
  {
    "text": " It's the right thing to do here.",
    "start": "2752085",
    "end": "2760050"
  },
  {
    "text": "Then for this\nparticular y-coordinate, we could just basically start\nat the beginning of the array,",
    "start": "2760050",
    "end": "2765240"
  },
  {
    "text": "start scanning, and just\nreport all the points that are actually in our range.",
    "start": "2765240",
    "end": "2770410"
  },
  {
    "text": "Sorry, I need to also\npotentially throw away points that are not low enough.",
    "start": "2770410",
    "end": "2778560"
  },
  {
    "text": "So the answer is\ncontained in here. I should say to throw\naway duplicates,",
    "start": "2778560",
    "end": "2784350"
  },
  {
    "text": "you have to throw away points\nthat are not in the range lesser or equal to x,\ncomma lesser or equal to y. Still, we claim the\nnumber of scan points",
    "start": "2784350",
    "end": "2790500"
  },
  {
    "text": "is proportional to\nthe output size. That's what we need. So if this held for every\nquery, we'd be happy.",
    "start": "2790500",
    "end": "2800119"
  },
  {
    "text": "Just start at the\nbeginning, scan, and as long as this\nalpha is some constant-- it's going to be a\nconstant bigger than 1,",
    "start": "2800120",
    "end": "2808380"
  },
  {
    "text": "then the number of points in\nthe answer is proportional-- sorry, the number of\npoints we had to scan",
    "start": "2808380",
    "end": "2814200"
  },
  {
    "text": "through is proportional to the\nnumber of points in the answer, and so we're done. So this is the easy case.",
    "start": "2814200",
    "end": "2819840"
  },
  {
    "text": "We need to distinguish\nit, otherwise we call this range query\nsparse, and those",
    "start": "2819840",
    "end": "2829677"
  },
  {
    "text": "are the interesting cases.  So nothing deep\nhere, but we're going",
    "start": "2829677",
    "end": "2836250"
  },
  {
    "text": "to use this concept a lot. ",
    "start": "2836250",
    "end": "2852650"
  },
  {
    "text": "OK, so we're going\nto actually try to solve this problem twice.",
    "start": "2852650",
    "end": "2857840"
  },
  {
    "text": "The first try isn't going\nto be quite successful, but it gets a lot\nof the right ideas.",
    "start": "2857840",
    "end": "2865160"
  },
  {
    "text": "So I'm going to let S0 be\nall the points sorted by x.",
    "start": "2865160",
    "end": "2875470"
  },
  {
    "text": "It's going to be sorted by x. I put things down here. And just to give you an\nidea of where we're going,",
    "start": "2875470",
    "end": "2882830"
  },
  {
    "text": "the array we're\nimagining here is first we write down all\nthe points, then",
    "start": "2882830",
    "end": "2888680"
  },
  {
    "text": "we'll write down some subset\nof the points, S1, then some subset of that subset,\nand so on until we get down",
    "start": "2888680",
    "end": "2896029"
  },
  {
    "text": "to a constant size structure. OK, first we write\ndown all the points. Why?",
    "start": "2896030",
    "end": "2901130"
  },
  {
    "text": "Because for dense queries,\nthat's what we want. We want all the points\njust sitting there. So then you can just read\nthrough all the points",
    "start": "2901130",
    "end": "2908660"
  },
  {
    "text": "and dense queries will be happy. So if we detect a y-coordinate\nwhere the queries going to be",
    "start": "2908660",
    "end": "2915380"
  },
  {
    "text": "dense-- I don't know how we detect that. Let's not worry\nabout it right now-- then you could just\nlook through S0.",
    "start": "2915380",
    "end": "2921620"
  },
  {
    "text": "That's fine. But some queries are\ngoing to be sparse, and for that we're going\nto use S1, S2, and so on.",
    "start": "2921620",
    "end": "2927420"
  },
  {
    "text": "The intuition is the following. If in your query,\nthe y-coordinate",
    "start": "2927420",
    "end": "2933619"
  },
  {
    "text": "is very large,\nlike say infinity, then your query is\nguaranteed to be dense.",
    "start": "2933620",
    "end": "2939059"
  },
  {
    "text": "It doesn't matter what x is. And in general, if\ny is near the top,",
    "start": "2939060",
    "end": "2944599"
  },
  {
    "text": "like it's at the top most\npoint, or maybe the next of top most point, or maybe a\nlittle bit farther down,",
    "start": "2944600",
    "end": "2949650"
  },
  {
    "text": "it depends on the point\nset, then a lot of queries are going to be dense. So that's good news.",
    "start": "2949650",
    "end": "2956539"
  },
  {
    "text": "Let's consider the first time\nwhen there's a sparse query.",
    "start": "2956540",
    "end": "2961620"
  },
  {
    "text": "So we're going to let yi be the\nlargest y-coordinate where some",
    "start": "2961620",
    "end": "2972980"
  },
  {
    "text": "query, some x-coordinate-- that y-coordinate.",
    "start": "2972980",
    "end": "2978626"
  },
  {
    "text": "This is going to be less than\nor equal to x, comma less than or equal to yi-- ",
    "start": "2978626",
    "end": "2984920"
  },
  {
    "text": "is sparse in Si minus 1.",
    "start": "2984920",
    "end": "2993326"
  },
  {
    "text": "OK, so initially we\nhave S0, all points. y1 is the largest y\nco-ordinate where there's--",
    "start": "2993326",
    "end": "2999079"
  },
  {
    "text": "so we work our way\ndown until there's some sparse query in S0. That's yi.",
    "start": "2999079",
    "end": "3006065"
  },
  {
    "text": "So then we just\nfilter, based on that.",
    "start": "3006065",
    "end": "3011400"
  },
  {
    "text": "So throw away all\nthe points above yi. So we're going to\nsay take Si minus 1,",
    "start": "3011400",
    "end": "3017860"
  },
  {
    "text": "intersect it with the\nrange query, star less than or equal to yi.",
    "start": "3017860",
    "end": "3024950"
  },
  {
    "text": "OK, so the picture is\nwe have some point set. ",
    "start": "3024950",
    "end": "3035930"
  },
  {
    "text": "Up here, every possible\nquery along this line is going to be dense\nbecause everything",
    "start": "3035930",
    "end": "3042110"
  },
  {
    "text": "to the left of the x-coordinate\nwill be in the output. At some point, we're going\nto decide this is too scary.",
    "start": "3042110",
    "end": "3048600"
  },
  {
    "text": "There's a query\nhere, maybe this one, or maybe it's this\nquery that's sparse.",
    "start": "3048600",
    "end": "3053630"
  },
  {
    "text": "And so we say OK, throw\naway these points. Redo the data structure\nfrom here down,",
    "start": "3053630",
    "end": "3059330"
  },
  {
    "text": "ignoring all these\npoints, repeat, and write down these things.",
    "start": "3059330",
    "end": "3066960"
  },
  {
    "text": "So the idea is that if you\nlook at a particular query, it will be dense in\none of these Si's.",
    "start": "3066960",
    "end": "3074950"
  },
  {
    "text": "And you can tell that just\naccording to your y-coordinate. Because you said oh, well, if\nyou're up here in y-coordinate,",
    "start": "3074950",
    "end": "3080830"
  },
  {
    "text": "you're guaranteed safe. So just do that\nsearch and you're OK.",
    "start": "3080830",
    "end": "3087520"
  },
  {
    "text": "In general, we\ncontinue this process until we get to some Si\nthat has constant size.",
    "start": "3087520",
    "end": "3097150"
  },
  {
    "text": "At that point, we're\ndone, and then we can afford to look\nthrough all the points.",
    "start": "3097150",
    "end": "3102250"
  },
  {
    "text": "Unfortunately, this is\nnot a very good strategy, but it's the first cut, and\nit's close to what works.",
    "start": "3102250",
    "end": "3110300"
  },
  {
    "text": "Here's a problem with it. Suppose you have this point set. ",
    "start": "3110300",
    "end": "3118960"
  },
  {
    "text": "OK, what happens is you start at\nthe top, everything looks fine. At some point you decide\nthere's a query here, namely",
    "start": "3118960",
    "end": "3126510"
  },
  {
    "text": "this one, which has\nan empty answer, and yet there are points to\nthe left of this x-coordinate.",
    "start": "3126510",
    "end": "3133020"
  },
  {
    "text": "So that's bad because\nit's very hard to get within a\nconstant factor of zero.",
    "start": "3133020",
    "end": "3138540"
  },
  {
    "text": "So pretty much immediately\nyou've got to draw a line here and say OK, S0 is all\npoints, S1 is these points,",
    "start": "3138540",
    "end": "3150280"
  },
  {
    "text": "S2 is going to be these points. In general, there's\nsuffixes of the points,",
    "start": "3150280",
    "end": "3156270"
  },
  {
    "text": "and so the total space\nwill be quadratic. So the first two\nproperties will be correct",
    "start": "3156270",
    "end": "3161990"
  },
  {
    "text": "because you're just looking\nin S0, or S1, or whatever. Everything looks\nfine, but your right",
    "start": "3161990",
    "end": "3168030"
  },
  {
    "text": "does not have linear size. So no good. First try, failed.",
    "start": "3168030",
    "end": "3174089"
  },
  {
    "start": "3174090",
    "end": "3179101"
  },
  {
    "text": "Second time's the charm. ",
    "start": "3179101",
    "end": "3191840"
  },
  {
    "text": "You need a little\nmore sophistication in how we do this partitioning,\nhow we build our array,",
    "start": "3191840",
    "end": "3200712"
  },
  {
    "text": "and we'll get it. ",
    "start": "3200712",
    "end": "3211809"
  },
  {
    "text": "I didn't read this before. This one line that says\nmaximize common suffix.",
    "start": "3211810",
    "end": "3220135"
  },
  {
    "text": "I have no idea what\nthis means, but maybe it will mean something by the end. Let's see. OK, this is the part I read.",
    "start": "3220135",
    "end": "3229530"
  },
  {
    "text": "So xi is going to be-- so we had a yi That's going\nto be the same as before.",
    "start": "3229530",
    "end": "3236701"
  },
  {
    "text": "This is why I did\nthe first attempt. This definition\nremains the same. So largest y where we have some\nsparse query in Si minus 1.",
    "start": "3236701",
    "end": "3246930"
  },
  {
    "text": "I want to look at what\nthat x-coordinate is. It's just that here it\nsays there's some x.",
    "start": "3246930",
    "end": "3252805"
  },
  {
    "text": " What is that x?",
    "start": "3252805",
    "end": "3258619"
  },
  {
    "text": "Let's just look at the maximum\npossible x that it could be. This will turn out\nto be really useful.",
    "start": "3258620",
    "end": "3265150"
  },
  {
    "text": "The maximum x-coordinate where\nless than or equal to xi,",
    "start": "3265150",
    "end": "3270700"
  },
  {
    "text": "comma less than or\nequal to yi is sparse-- ",
    "start": "3270700",
    "end": "3277020"
  },
  {
    "text": "and Si minus 1. OK, we know there's\nsomething we can put in here that makes yi sparse.",
    "start": "3277020",
    "end": "3283529"
  },
  {
    "text": "So look at the largest\npossible such x. So that means any query--",
    "start": "3283530",
    "end": "3290099"
  },
  {
    "text": "so we have this new point. It's not an actual\npoint in our problem, but it's a query, xi, yi.",
    "start": "3290100",
    "end": "3299280"
  },
  {
    "text": "And it's dense, oh\nsorry, it's sparse. It's bad. We know that any query\nup here is dense.",
    "start": "3299280",
    "end": "3311700"
  },
  {
    "text": "That was the definition of yi. And now we also know that\nany query over here, I guess,",
    "start": "3311700",
    "end": "3320130"
  },
  {
    "text": "that's saying a lot. But these queries\nare also dense. Because again, if you're\nfar enough to the right,",
    "start": "3320130",
    "end": "3326010"
  },
  {
    "text": "that's going to be\nbasically everything. So let's get rid\nof that as well. And this is a problem,\nqueries over here",
    "start": "3326010",
    "end": "3333100"
  },
  {
    "text": "are also potentially a problem. We don't know. It doesn't seem like much,\nbut it will be enough.",
    "start": "3333100",
    "end": "3340830"
  },
  {
    "text": "We're going to\nredefine Si as well. So here's the fun part. If we have some\nSi minus 1, we're",
    "start": "3340830",
    "end": "3352134"
  },
  {
    "text": "going to define a\nnew thing, which is Pi minus 1, which is this.",
    "start": "3352134",
    "end": "3363672"
  },
  {
    "text": "This is a funny thing, but it\nis this part of the point set.",
    "start": "3363672",
    "end": "3373960"
  },
  {
    "text": "This is Pi minus 1. So the points we care\nabout are kind of here,",
    "start": "3373960",
    "end": "3380500"
  },
  {
    "text": "but let's just take\neverything to the left of this x-coordinate. Why not? It's a thing.",
    "start": "3380500",
    "end": "3386530"
  },
  {
    "text": "That is Pi minus 1. So Si minus 1 is\neverything in this picture.",
    "start": "3386530",
    "end": "3392589"
  },
  {
    "text": "First, let's restrict\nto x, then the next step is we're going to restrict to y.",
    "start": "3392590",
    "end": "3397600"
  },
  {
    "text": "But it's in a funny way. This is the Si, the next s set.",
    "start": "3397600",
    "end": "3404200"
  },
  {
    "text": "Take the previous set\nand we intersect it with a funny thing. ",
    "start": "3404200",
    "end": "3412984"
  },
  {
    "text": "It's harder to\nwrite algebraically than it is to draw the picture. ",
    "start": "3412984",
    "end": "3421160"
  },
  {
    "text": "So it's intersected with a\nunion, which is basically-- dare I draw it on\nthe same picture?",
    "start": "3421160",
    "end": "3428020"
  },
  {
    "text": "Where's my red? ",
    "start": "3428020",
    "end": "3435960"
  },
  {
    "text": "It's going to be less\nthan or equal to y. ",
    "start": "3435960",
    "end": "3448640"
  },
  {
    "text": "This thing is going to be Si. ",
    "start": "3448640",
    "end": "3459250"
  },
  {
    "text": "We'll see why,\neventually, this works. I still don't know what\nmaximize common suffix means,",
    "start": "3459250",
    "end": "3464420"
  },
  {
    "text": "but we'll get there. So we're looking at the\npoints below the line.",
    "start": "3464420",
    "end": "3470770"
  },
  {
    "text": "That's what we did before. We used to say Si is just the\nintersection with less than or equal to yi.",
    "start": "3470770",
    "end": "3476380"
  },
  {
    "text": "But things are just\na little bit messier because of this restriction.",
    "start": "3476380",
    "end": "3483270"
  },
  {
    "text": "Do I really not have a P here? OK, here's the difference.",
    "start": "3483270",
    "end": "3488762"
  },
  {
    "text": "The reason we have to go\nthrough this business. The array that we're going\nto store is not the Si's.",
    "start": "3488762",
    "end": "3494740"
  },
  {
    "text": "Si's are still too\nbig, potentially. What we're going to\nstore are the Pi's. ",
    "start": "3494740",
    "end": "3507664"
  },
  {
    "text": "Pi minus 1. And then in the end,\nwe're in a store Si. Si, again, has constant size.",
    "start": "3507664",
    "end": "3514250"
  },
  {
    "text": "The final Si has constants size. I probably should have\nused a different letter, Sk or whatever.",
    "start": "3514250",
    "end": "3519490"
  },
  {
    "text": "We keep doing this\nuntil we get down to something constant\nsized, then we store it. That's the easy case.",
    "start": "3519490",
    "end": "3526460"
  },
  {
    "text": "Until then, we just store\nthe Pi's, because really, we know that all the queries up\nhere and over here are OK.",
    "start": "3526460",
    "end": "3535800"
  },
  {
    "text": "They're nice and dense. We sort of only care about the\npoints to the left of the line.",
    "start": "3535800",
    "end": "3542210"
  },
  {
    "text": "OK, but essentially, the\nSi has to pick up the slack",
    "start": "3542210",
    "end": "3547310"
  },
  {
    "text": "and we have to include\nthese points in the next Si. Whereas, before, we did not.",
    "start": "3547310",
    "end": "3552950"
  },
  {
    "text": "Before we just took\nthings below the line. Now we have to take things\nthat are below the line or to the right of\nthe vertical line.",
    "start": "3552950",
    "end": "3560180"
  },
  {
    "text": " This is essentially\nnecessary for correctness.",
    "start": "3560180",
    "end": "3566231"
  },
  {
    "start": "3566231",
    "end": "3571640"
  },
  {
    "text": "So we kind of win\nsome, we lose some. But it turns out all is well.",
    "start": "3571640",
    "end": "3579730"
  },
  {
    "text": "So I know this is weird, but\nlet's jump to the analysis.",
    "start": "3579730",
    "end": "3586840"
  },
  {
    "text": "These claims, in particular,\nthat the array has linear size. Let's think about that and it\nwill become clear why the heck",
    "start": "3586840",
    "end": "3594394"
  },
  {
    "text": "we've made these choices.  Unless you have\na question first. AUDIENCE: Is there\nany relationship",
    "start": "3594394",
    "end": "3600193"
  },
  {
    "text": "between the Si here and\nthe Si on the first try? ERIK DEMAINE: No,\nthis definition of Si is no longer in effect.",
    "start": "3600194",
    "end": "3606340"
  },
  {
    "text": "S0 is correct, and all the\nSi's are still sorted by x.",
    "start": "3606340",
    "end": "3612250"
  },
  {
    "text": "We're no longer doing this. Instead of this rule,\nwe're doing this rule.",
    "start": "3612250",
    "end": "3618010"
  },
  {
    "text": "This part is the same, but we\nhave this extra union, which contradicts the previous rule.",
    "start": "3618010",
    "end": "3623320"
  },
  {
    "text": "So the yi definition\nis the same. Sorry, it's a little weird. xi is new, Pi is\nnew, and Si is new.",
    "start": "3623320",
    "end": "3630520"
  },
  {
    "start": "3630520",
    "end": "3636900"
  },
  {
    "text": "At this point, it's this\nalgebraic weird thing. Here's the cool thing.",
    "start": "3636900",
    "end": "3643079"
  },
  {
    "text": "For the space\nbound, the claim is",
    "start": "3643080",
    "end": "3650930"
  },
  {
    "text": "Pi minus 1 intersect Si\nis less than or equal to 1",
    "start": "3650930",
    "end": "3657710"
  },
  {
    "text": "over alpha times Pi minus 1.",
    "start": "3657710",
    "end": "3664369"
  },
  {
    "text": "This is hard to even\ninterpret what it means, but it's good news.",
    "start": "3664370",
    "end": "3669450"
  },
  {
    "text": "So remember, alpha is\na number bigger than 1. It's what we use in the\ndefinition of density,",
    "start": "3669450",
    "end": "3675058"
  },
  {
    "text": "and you could set this parameter\nto whatever you want, say 2. ",
    "start": "3675059",
    "end": "3680420"
  },
  {
    "text": "So then we're going to get that\nthis thing, whatever it is, is at most half the size\nof the previous one.",
    "start": "3680420",
    "end": "3685730"
  },
  {
    "text": " I claim this is good news. I claim it means that these Pi's\nessentially are geometrically",
    "start": "3685730",
    "end": "3696079"
  },
  {
    "text": "decreasing in size,\nwhich is how we get-- that's not quite right, but this\nwill give us a charging scheme.",
    "start": "3696080",
    "end": "3705050"
  },
  {
    "text": "which will prove that the\nwhole thing has linear size. First, why is this true?",
    "start": "3705050",
    "end": "3710830"
  },
  {
    "text": "It could really only be true\nfor sparsity from the alpha. Right, so we said\noh, density is good.",
    "start": "3710830",
    "end": "3717550"
  },
  {
    "text": "If we have dense,\nthere's nothing to do. Just put the points in\nx order, we're done.",
    "start": "3717550",
    "end": "3723650"
  },
  {
    "text": "Sparse is bad. But actually, sparse\ntells us something. It tells us there\nare a lot of points",
    "start": "3723650",
    "end": "3729680"
  },
  {
    "text": "that are not in the answer. So we're looking at\nthis query, xi yi. And we'd like to just say oh,\nstart at negative infinity,",
    "start": "3729680",
    "end": "3737750"
  },
  {
    "text": "and just take all the\npoints up to here. If we're dense, that is\nwithin a constant factor",
    "start": "3737750",
    "end": "3744320"
  },
  {
    "text": "of the number of points that are\nactually in the answer, which is down here.",
    "start": "3744320",
    "end": "3749400"
  },
  {
    "text": "If we're sparse, that means\nthere are a lot of points up here.",
    "start": "3749400",
    "end": "3754730"
  },
  {
    "text": "Most of the points have to be\nup here in order to be sparse. And that's actually\nwhat this is saying",
    "start": "3754730",
    "end": "3761480"
  },
  {
    "text": "if you expand the definitions. So Pi minus 1, that was\nall the stuff to the left.",
    "start": "3761480",
    "end": "3767820"
  },
  {
    "text": "So that's this thing. This is what we would get\nif we just did a linear scan from left to right.",
    "start": "3767820",
    "end": "3773809"
  },
  {
    "text": "Versus we're\nconsidering the points in Pi minus 1, which\njust restricts to x,",
    "start": "3773810",
    "end": "3780980"
  },
  {
    "text": "and then we're looking at Si. Si does this business.",
    "start": "3780980",
    "end": "3786890"
  },
  {
    "text": "But if we restrict\nto the Si points that are to the left of the line-- so we're looking\nat, basically, this",
    "start": "3786890",
    "end": "3793460"
  },
  {
    "text": "left portion, which was this\nwhite rectangle, intersected with this funny red rectangle,\nwhich was kind of awkward--",
    "start": "3793460",
    "end": "3800750"
  },
  {
    "text": "the intersection is just this. That's the answer for\nthis query, xi yi.",
    "start": "3800750",
    "end": "3806120"
  },
  {
    "text": "OK, so this is the size\nof the answer for xi yi.",
    "start": "3806120",
    "end": "3818540"
  },
  {
    "text": "And this was the\nnumber of points",
    "start": "3818540",
    "end": "3827270"
  },
  {
    "text": "in less than or\nequal to xi star. ",
    "start": "3827270",
    "end": "3833660"
  },
  {
    "text": "We wanted to just do a\nlinear scan like this. But this is the correct\nanswer and because we",
    "start": "3833660",
    "end": "3839300"
  },
  {
    "text": "know that this point\nis sparse-- that was the definition of xi and yi, it\nwas the maximum sparse point. So it's a sparse\npoint, therefore",
    "start": "3839300",
    "end": "3845930"
  },
  {
    "text": "we know that this does not hold. So the number of points less\nthan or equal to x comma star",
    "start": "3845930",
    "end": "3851000"
  },
  {
    "text": "is greater than alpha\ntimes the number of points in the correct range.",
    "start": "3851000",
    "end": "3856190"
  },
  {
    "text": "And if I got it right,\nthat should be this. You could put alpha over\nhere without the one over",
    "start": "3856190",
    "end": "3861240"
  },
  {
    "text": "and I guess this is\nstrictly greater. No big deal. So that's the\ndefinition of sparsity.",
    "start": "3861240",
    "end": "3868820"
  },
  {
    "text": "So this is the\ncool thing we know. Now, we're going to use--",
    "start": "3868820",
    "end": "3873930"
  },
  {
    "text": "this is now a\nnumbered less than 1. Question? AUDIENCE: So for Pi\nminus 1, we add them",
    "start": "3873930",
    "end": "3879520"
  },
  {
    "text": "as the number of points\nless than xi star. But for example-- ERIK DEMAINE: Yes, that's\nthe definition here. AUDIENCE: [INAUDIBLE]\nlike Pi, you",
    "start": "3879520",
    "end": "3885276"
  },
  {
    "text": "don't have that block in\nthe top left corner, right? ERIK DEMAINE: Right. After we restrict\nto Si, yeah, we've",
    "start": "3885276",
    "end": "3892080"
  },
  {
    "text": "thrown away all of these points. AUDIENCE: Right. So if you take the next\nPi, it's not necessarily going to be the points\nless than or equal to xi--",
    "start": "3892080",
    "end": "3898031"
  },
  {
    "text": "ERIK DEMAINE: It's true. When I say points, I\ndon't mean all points. I mean points in Si minus 1.",
    "start": "3898031",
    "end": "3904480"
  },
  {
    "text": "I'm dropping that\nbecause it gets awkward to keep talking about. So that's a correctness\nissue, essentially.",
    "start": "3904480",
    "end": "3910530"
  },
  {
    "text": "You have to argue that we\ncan throw away these points and it's safe. Once we do, then you could\njust ignore their existence.",
    "start": "3910530",
    "end": "3918940"
  },
  {
    "text": "You can ignore their\nexistence because you already solved all the\ndense queries, which are over here, or over here,\nwhich involve those points.",
    "start": "3918940",
    "end": "3926700"
  },
  {
    "text": "And so we now know\nthat we're only going to be doing\nqueries from here down.",
    "start": "3926700",
    "end": "3931950"
  },
  {
    "text": "Otherwise, you look at P0. So forget about those. Forget about those points.",
    "start": "3931950",
    "end": "3936970"
  },
  {
    "text": "Now you're going to be searching\nin one of these structures. So you can forget about\nall the points over here.",
    "start": "3936970",
    "end": "3942040"
  },
  {
    "text": "So that's that argument. Once you've restricted\nto Si minus 1 and you don't have to\nlook at any other points,",
    "start": "3942040",
    "end": "3948090"
  },
  {
    "text": "among those points,\nthis is going to be all the points\nless than or equal to xi. But that's how we were\ndefining bar sparse.",
    "start": "3948090",
    "end": "3954600"
  },
  {
    "text": "We said sparse in Si minus 1. So it's among those\npoints we have sparsity. So this is the definition\nof what we have.",
    "start": "3954600",
    "end": "3963800"
  },
  {
    "text": "OK, the claim is\nit's a good thing. Here's the charging scheme. ",
    "start": "3963800",
    "end": "3969790"
  },
  {
    "text": "So this is by sparsity. ",
    "start": "3969790",
    "end": "3977910"
  },
  {
    "text": "So I'm going to charge storing\nPi minus 1 to Pi minus 1",
    "start": "3977910",
    "end": "3989069"
  },
  {
    "text": "minus Si. This algebra, I have to\ninterpret every single time,",
    "start": "3989070",
    "end": "3995760"
  },
  {
    "text": "but that's fine. Let's look at the picture. OK, Pi minus 1 remember, was\nthis white rectangle over here.",
    "start": "3995760",
    "end": "4003692"
  },
  {
    "text": "Everything to the\nleft of the line.  We have to store Pi.",
    "start": "4003692",
    "end": "4009950"
  },
  {
    "text": "We want that the sum of the\nsizes of the Pi's is good. And so here's my\ncharging scheme. We have to store Pi minus 1.",
    "start": "4009950",
    "end": "4016590"
  },
  {
    "text": "I'm going to charge\nit to these points. What are those points? Those are the points that are\ninside the white rectangle,",
    "start": "4016590",
    "end": "4023360"
  },
  {
    "text": "but outside the red L-shape. So that's these points.",
    "start": "4023360",
    "end": "4029900"
  },
  {
    "text": "This is Pi minus 1 minus Si. Those are the points\nthat I'm throwing away.",
    "start": "4029900",
    "end": "4036830"
  },
  {
    "text": "That's good. So if I charge them now, I will\nnever charge them in the future because I just threw them away.",
    "start": "4036830",
    "end": "4043670"
  },
  {
    "text": "They are not in the next Si. ",
    "start": "4043670",
    "end": "4048800"
  },
  {
    "text": "Each point overall in the point\nset only gets charged once. ",
    "start": "4048800",
    "end": "4061080"
  },
  {
    "text": "OK, how much does\nit get charged? How do these things relate\nto each other in size?",
    "start": "4061080",
    "end": "4067380"
  },
  {
    "text": "That's where we use this thing. It gets confusing to think about\nintersection versus difference,",
    "start": "4067380",
    "end": "4073170"
  },
  {
    "text": "but the point is if we look\nat the Pi minus ones that are in Si, that's a small fraction.",
    "start": "4073170",
    "end": "4080069"
  },
  {
    "text": "Think of alpha as 100. So then the Pi minus 1-- so this\npart down here that's in Si,",
    "start": "4080070",
    "end": "4086880"
  },
  {
    "text": "this is only 1/100 of the\nwhole white rectangle. So that means this part\nis 99/100 of the Pi.",
    "start": "4086880",
    "end": "4097799"
  },
  {
    "text": "So if we charged the storing\nof the entire rectangle to these guys, we're only\nlosing a very small factor",
    "start": "4097800",
    "end": "4104278"
  },
  {
    "text": "like 100/99 or something. It isn't actually exactly\n100/99, I believe.",
    "start": "4104279",
    "end": "4110460"
  },
  {
    "text": "I worked it out and\nthe factor of charging, assuming I did it\ncorrectly, is 1 over 1",
    "start": "4110460",
    "end": "4117120"
  },
  {
    "text": "minus 1 over alpha,\nwhich works out to alpha over alpha minus 1.",
    "start": "4117120",
    "end": "4123420"
  },
  {
    "text": "It doesn't really matter, but\nthe point is it's constant. I think that's easy to believe.",
    "start": "4123420",
    "end": "4128621"
  },
  {
    "text": "Maybe it's actually easiest to\nthink about when alpha is 2. ",
    "start": "4128622",
    "end": "4134939"
  },
  {
    "text": "At most, half the\npoints are here. At least, half the\npoints are here. And so we're charging\nstoring the entire point set",
    "start": "4134939",
    "end": "4141210"
  },
  {
    "text": "to these points, which will\nnever get charged again. So we're only charging\nwith a factor of two.",
    "start": "4141210",
    "end": "4146220"
  },
  {
    "text": "That's all we need,\na constant factor. OK, therefore, this\nthing has linear size.",
    "start": "4146220",
    "end": "4152580"
  },
  {
    "text": "That's the cool thing. We get more though. We also get the\nquery bound we want. ",
    "start": "4152580",
    "end": "4160394"
  },
  {
    "text": "Let's think about\nthe query bound. ",
    "start": "4160394",
    "end": "4171589"
  },
  {
    "text": "This is fun. Think about where the query is. It used to be over here. We do a search in S0,\nor we do a search in S1,",
    "start": "4171590",
    "end": "4181219"
  },
  {
    "text": "or we do a search in S2. We'd never look at multiple Si's\nbecause there'd be no point.",
    "start": "4181220",
    "end": "4187818"
  },
  {
    "text": "Either S0 was dense, and\nwe're fine, just do it. Or you have to jump to\nS1, skip some guys up top,",
    "start": "4187819",
    "end": "4193702"
  },
  {
    "text": "do the search in there. Fine. We no longer have that luxury\nover here because we're using Pi's instead of Si's.",
    "start": "4193702",
    "end": "4199970"
  },
  {
    "text": "So it actually may be\nthe search starts in P1, but then has to go through\nP2, and has to go through P3.",
    "start": "4199970",
    "end": "4206630"
  },
  {
    "text": "But it's OK because\nthe farther we go right, we have this sparsity\ncondition that tells us",
    "start": "4206630",
    "end": "4214040"
  },
  {
    "text": "basically the points\nwe're looking at are-- the number of points\nwe're looking at",
    "start": "4214040",
    "end": "4219230"
  },
  {
    "text": "are getting smaller and smaller.  So I'll wave my hands\na little bit here,",
    "start": "4219230",
    "end": "4226070"
  },
  {
    "text": "but the claim is it's\na geometric series. ",
    "start": "4226070",
    "end": "4233130"
  },
  {
    "text": "This needs a formal proof, but\nwe won't go through it here. Decreasing-- so this\nis the query bound.",
    "start": "4233130",
    "end": "4243679"
  },
  {
    "text": "The number of scanned\npoints is order output size. So you have to check that no\nmatter where you start in Pi--",
    "start": "4243680",
    "end": "4250514"
  },
  {
    "text": "that's the little\nbit tricky part. We're not looking at all of Pi. We're looking at\nsome of Pi and then",
    "start": "4250514",
    "end": "4256760"
  },
  {
    "text": "we're going to the\nright from there. Actually, is that true? Maybe we always\nlook at all of Pi. ",
    "start": "4256760",
    "end": "4264010"
  },
  {
    "text": "Let me think about this.  I think we do, actually.",
    "start": "4264010",
    "end": "4270170"
  },
  {
    "text": "Sorry. That's what we did before. ",
    "start": "4270170",
    "end": "4278360"
  },
  {
    "text": "We basically figure out\nwhere we are in y-coordinate. That was the overall structure. We had a Van Emde\nBoas search tree on y.",
    "start": "4278360",
    "end": "4285290"
  },
  {
    "text": "So all we know at this point is\nthe y-coordinate of our search. And so we use that to\ndetermine which of the Pi's we",
    "start": "4285290",
    "end": "4291830"
  },
  {
    "text": "go to, based on where the\nyi becomes no longer dense.",
    "start": "4291830",
    "end": "4297120"
  },
  {
    "text": " And then we're going to have to\nsearch through that entire Pi and potentially more\nof them because this",
    "start": "4297120",
    "end": "4307099"
  },
  {
    "text": "is no longer an Si. It's just doing the\nthings to the left. And so if we're lucky,\nthe Pi we're looking at,",
    "start": "4307100",
    "end": "4316250"
  },
  {
    "text": "or the query we're doing, is\nnot to the right of this point.",
    "start": "4316250",
    "end": "4321647"
  },
  {
    "text": "OK, maybe it's right here. That would be great. Then all our answers are done.",
    "start": "4321647",
    "end": "4326809"
  },
  {
    "text": "If our query is here, that\nwould have been dense, so we would have done\nit at an earlier stage. Our query might be\ndown here though.",
    "start": "4326809",
    "end": "4333860"
  },
  {
    "text": "When the query's down here, we\nneed to report on these points.",
    "start": "4333860",
    "end": "4339181"
  },
  {
    "text": "Then we're going\nto have to do more and that's going\nto be Pi plus 1. So we'll do more and\nmore Pi's until we",
    "start": "4339182",
    "end": "4345949"
  },
  {
    "text": "get to our actual query here. But in any case, the claim\nis that this is geometrically",
    "start": "4345950",
    "end": "4353270"
  },
  {
    "text": "decreasing by the\nsame charging scheme.  OK, that's two out\nof the three claims.",
    "start": "4353270",
    "end": "4360219"
  },
  {
    "text": "There's one more, which\nis closely related.",
    "start": "4360220",
    "end": "4366530"
  },
  {
    "text": "It's still about\nthe query problem. What we haven't shown is that\nwe actually find all the points. This is what you might\ncall correctness.",
    "start": "4366530",
    "end": "4373760"
  },
  {
    "text": " To prove this, what\nwe need to say--",
    "start": "4373760",
    "end": "4381360"
  },
  {
    "text": "what we claim is that\nafter you do the P1's-- ",
    "start": "4381360",
    "end": "4387280"
  },
  {
    "text": "and now you do the P2's. ",
    "start": "4387280",
    "end": "4392910"
  },
  {
    "text": "Well, I'll tell you. The claim is that you visited\nsome x-coordinates here.",
    "start": "4392910",
    "end": "4398790"
  },
  {
    "text": "The Pi's were all the things\nup to some x-coordinate. Claim that the very\nnext point in here, in P2, has a smaller\nx-coordinate than what you just",
    "start": "4398790",
    "end": "4407231"
  },
  {
    "text": "did.  I think that should be clear\nbecause presumably there",
    "start": "4407231",
    "end": "4414110"
  },
  {
    "text": "are some points in here, and\nso the very next Pi, it's restricted within\nthis red thing,",
    "start": "4414110",
    "end": "4420050"
  },
  {
    "text": "but it's going to be up\nto some x-coordinate. So you're basically\nstarting over. Every time you go to the Pi's,\nyou're starting over in x.",
    "start": "4420050",
    "end": "4427310"
  },
  {
    "text": "Go back to minus infinity in x. So the idea is the picture\nwill look something like this.",
    "start": "4427310",
    "end": "4433130"
  },
  {
    "text": "You start at minus infinity,\nyou read some points. At some point, you\nrun out of the Pi's. Then you start over again,\nyou read some smaller set",
    "start": "4433130",
    "end": "4439597"
  },
  {
    "text": "of the points. Maybe you get a little farther. You start over again,\nread a little farther. At some point, you're going\nto reach your threshold x.",
    "start": "4439597",
    "end": "4447050"
  },
  {
    "text": "That's when you stop. So that's correctness. ",
    "start": "4447050",
    "end": "4453510"
  },
  {
    "text": "I feel like I need\nanother sentence there. ",
    "start": "4453510",
    "end": "4459309"
  },
  {
    "text": "Once your Pi encompasses\nyour x range, that's going to\nhave your answer.",
    "start": "4459310",
    "end": "4464620"
  },
  {
    "text": "Then you're done. So that's this moment. And so the only worry is that\nan early Pi, basically, or maybe",
    "start": "4464620",
    "end": "4472690"
  },
  {
    "text": "the next Pi does\nthis, and then we do this or something like this. That never happens basically\nbecause you're always",
    "start": "4472690",
    "end": "4478840"
  },
  {
    "text": "resetting x range. And so your x will always\nstart over to something less than what you had.",
    "start": "4478840",
    "end": "4484060"
  },
  {
    "text": "And so the\ntermination condition, which I probably didn't\nwrite down here, but which is",
    "start": "4484060",
    "end": "4491090"
  },
  {
    "text": "stop when your x-coordinate\nis bigger than what you want. Never terminates early.",
    "start": "4491090",
    "end": "4496210"
  },
  {
    "text": "Therefore we get all the\npoints we care about. OK, a little bit\nhand-wavy, but that",
    "start": "4496210",
    "end": "4501250"
  },
  {
    "text": "is why this structure works. It's a very weird set up, but\nlinear sized, and you just",
    "start": "4501250",
    "end": "4510740"
  },
  {
    "text": "jump into the right\npoint in the array, start reading, throw\naway the points that aren't in your range because\nthey just happen to be there.",
    "start": "4510740",
    "end": "4517790"
  },
  {
    "text": "Those would be these\npoints up here. Throw away duplicates.",
    "start": "4517790",
    "end": "4524560"
  },
  {
    "text": "Just output the points in\nyour range and it gives you, magically, all the points\nin here by a linear scan.",
    "start": "4524560",
    "end": "4531789"
  },
  {
    "text": "I still find this so\nweird, but it's true. ",
    "start": "4531790",
    "end": "4538050"
  },
  {
    "text": "Truth is stranger\nthan fiction, I guess. They're fun facts. You can actually compute this\nthing in the sorting bound.",
    "start": "4538050",
    "end": "4545220"
  },
  {
    "text": "So pre-processing is just sort. I won't prove that here.",
    "start": "4545220",
    "end": "4552125"
  },
  {
    "text": "So this was two sided. Let me briefly tell\nyou how to solve three sided and four sided.",
    "start": "4552125",
    "end": "4558300"
  },
  {
    "text": "We basically already did\nthis one, which was-- I'll remind you\nwhat it looks like.",
    "start": "4558300",
    "end": "4565110"
  },
  {
    "start": "4565110",
    "end": "4570550"
  },
  {
    "text": "So you have a binary\ntree, and in each node you store two\naugmented structures.",
    "start": "4570550",
    "end": "4578400"
  },
  {
    "text": "One which can do ranged\nqueries like this, and one which can do inverted\nrange queries like this.",
    "start": "4578400",
    "end": "4583707"
  },
  {
    "text": "This should look familiar.  And so you do a search on--",
    "start": "4583707",
    "end": "4591929"
  },
  {
    "text": "let's say we want\nto do this thing. So we have x1, x2, y2.",
    "start": "4591930",
    "end": "4599489"
  },
  {
    "text": "You search for x1,\nyou search for x2. You find the LCA and then in\nthis subtree, you do a search.",
    "start": "4599490",
    "end": "4610140"
  },
  {
    "text": "In this subtree, you already\nknow that you're less than x2, and so you do the x1,\ny2 search in this node.",
    "start": "4610140",
    "end": "4622650"
  },
  {
    "text": "And then in the right subtree,\nyou do the x2, y2 search.",
    "start": "4622650",
    "end": "4629460"
  },
  {
    "text": "You take the union of those two\nresults and that is this query.",
    "start": "4629460",
    "end": "4635170"
  },
  {
    "text": "That's how we did it before. No difficulty here. And the point is,\nyou can build this,",
    "start": "4635170",
    "end": "4642240"
  },
  {
    "text": "put it in a Van\nEmde Boas layout. You do this search,\nyou do this search, you find the LCA in\nlog base B of N--",
    "start": "4642240",
    "end": "4648300"
  },
  {
    "text": "to check that everything\nworks, cache obviously. Then these structures are just\nstructures which we already",
    "start": "4648300",
    "end": "4653699"
  },
  {
    "text": "built, and so yes,\nwe lose a lag factor because every point appears\nin log data structures,",
    "start": "4653700",
    "end": "4662190"
  },
  {
    "text": "but that's it. Everything else works the same. So we get N log N\nspace log base B of N",
    "start": "4662190",
    "end": "4668430"
  },
  {
    "text": "plus output over B query. Because now we just have to\ndo two queries instead of one.",
    "start": "4668430",
    "end": "4673560"
  },
  {
    "text": "We don't there's a log factor. That's the trick we did\nbefore OK, that was easy.",
    "start": "4673560",
    "end": "4681810"
  },
  {
    "text": " One more.",
    "start": "4681810",
    "end": "4688071"
  },
  {
    "text": "So that was three sided. ",
    "start": "4688071",
    "end": "4693579"
  },
  {
    "text": "Next is four sided. ",
    "start": "4693580",
    "end": "4700850"
  },
  {
    "text": "Four sided, of course, we could\ndo exactly the same thing. Lose another log\nfactor in space. ",
    "start": "4700850",
    "end": "4709040"
  },
  {
    "text": "Maintain log base B of N plus\noutput over B query time. But I want to do\nslightly better and this",
    "start": "4709040",
    "end": "4716119"
  },
  {
    "text": "is a trick we could have done\nin internal memory as well. But I have two minutes\nto show it to you.",
    "start": "4716120",
    "end": "4722270"
  },
  {
    "text": "So here's a bonus.  Didn't have to do this in\nexternal memory context,",
    "start": "4722270",
    "end": "4729230"
  },
  {
    "text": "but we can.  Four sided.",
    "start": "4729230",
    "end": "4734690"
  },
  {
    "text": "So we're going to do\nthe same thing, but not on a binary tree.",
    "start": "4734690",
    "end": "4740150"
  },
  {
    "text": "Take this binary tree, this\nis sorted by x, I suppose. This is key on x.",
    "start": "4740150",
    "end": "4746910"
  },
  {
    "text": " Instead of making it binary,\nmake it root log [? N ary. ?]",
    "start": "4746910",
    "end": "4756200"
  },
  {
    "text": "So imagine taking\nthe binary tree, taking little chunks, which\nhave size square root log",
    "start": "4756200",
    "end": "4762130"
  },
  {
    "text": "N. Its capital N. And\nimagine contracting",
    "start": "4762130",
    "end": "4767630"
  },
  {
    "text": "those chunks into single nodes. So we have a single note\nwhich has square root log N. Children [INAUDIBLE]\nhas square root log N children.",
    "start": "4767630",
    "end": "4778289"
  },
  {
    "text": "This is all static. And so on. Otherwise, the same.",
    "start": "4778290",
    "end": "4785060"
  },
  {
    "text": "The augmentation is going to\nbe a little bit different. If we look at a\nnode, we're going",
    "start": "4785060",
    "end": "4790490"
  },
  {
    "text": "to store the same\nthings we had before, which was this kind of query,\nand this kind of query.",
    "start": "4790490",
    "end": "4797270"
  },
  {
    "text": "We're going to store\na little bit more. Namely, for any\ninterval of children,",
    "start": "4797270",
    "end": "4804230"
  },
  {
    "text": "like here you have some start\nchild and some end child. I want to store for all the\npoints that are down there.",
    "start": "4804230",
    "end": "4812059"
  },
  {
    "text": "For this thing, store a\nregular binary search tree on y for those points.",
    "start": "4812060",
    "end": "4820650"
  },
  {
    "text": "Why? Because if we do a search-- OK, same deal-- we\nfind the LCA of x1, x1?",
    "start": "4820650",
    "end": "4832610"
  },
  {
    "text": "I don't know. Let's say it's on x. We'll have to do it\nagain on y whatever.",
    "start": "4832610",
    "end": "4839940"
  },
  {
    "text": "So here's the LCA. Let's say there's\na lot of children. OK, maybe here is\nx1 and here is x2.",
    "start": "4839940",
    "end": "4852410"
  },
  {
    "text": "So in this subtree, we do this-- sorry, we do this\nrange query because we",
    "start": "4852410",
    "end": "4860810"
  },
  {
    "text": "want to go from x1 to infinity. Over in this subtree, we\nwant to do this range query",
    "start": "4860810",
    "end": "4867440"
  },
  {
    "text": "because we want to go from\nnegative infinity to x2. But then there's all\nthis stuff in the middle.",
    "start": "4867440",
    "end": "4873620"
  },
  {
    "text": "I don't want to have to do a\nquery for every single tree. Instead, I have this\naugmentation that",
    "start": "4873620",
    "end": "4879410"
  },
  {
    "text": "says for this interval,\nhere are all the points sorted by x-coordinate.",
    "start": "4879410",
    "end": "4884869"
  },
  {
    "text": "I guess we're doing it this way. ",
    "start": "4884870",
    "end": "4890090"
  },
  {
    "text": "Fine, so then it\nis a range query. I want to know what\nare all the points.",
    "start": "4890090",
    "end": "4897170"
  },
  {
    "text": "Whoa, this is confusing. I feel like I've\nmissed something here. No, this on y. Sorry.",
    "start": "4897170",
    "end": "4902280"
  },
  {
    "text": " These points I've\ngot sorted by y.",
    "start": "4902280",
    "end": "4907460"
  },
  {
    "text": "So I should draw\nit the other way. These points we already know\nare in-between x1 and x2 in x.",
    "start": "4907460",
    "end": "4914240"
  },
  {
    "text": "We've already solved\nthe x problem here. So now I just need to restrict\nto the y range from y1 to y2.",
    "start": "4914240",
    "end": "4923510"
  },
  {
    "text": "In these trees, these\nalready match in x. I just need to make\nsure they match in y.",
    "start": "4923510",
    "end": "4928610"
  },
  {
    "text": "So I do a regular 1D range tree. I search for y1,\nI search for y2, take all the points in between.",
    "start": "4928610",
    "end": "4934489"
  },
  {
    "text": "This is cheap if I just have a\nregular old binary search tree. Now, this thing has linear size.",
    "start": "4934490",
    "end": "4942380"
  },
  {
    "text": "This thing has-- sorry,\nI think I actually need--",
    "start": "4942380",
    "end": "4949340"
  },
  {
    "text": "I should have a three\nsided range query. Thanks. These should be three\nsided because here I",
    "start": "4949340",
    "end": "4957079"
  },
  {
    "text": "know that I've got the\nright side covered already in this tree, I've got the\nleft side covered already",
    "start": "4957080",
    "end": "4962210"
  },
  {
    "text": "in this tree, but I still need\nthe remaining three sides. In here, I only\nneed these two sides because I've already\ngot x1 and x2 covered.",
    "start": "4962210",
    "end": "4970050"
  },
  {
    "text": "OK, so this is cheap. I only need a linear\nspace data structure. This thing is not so cheap. I'm using the previous\ndata structure.",
    "start": "4970050",
    "end": "4976940"
  },
  {
    "text": "This thing, which\nhas N log N size, these are three\nsided range queries. Sorry for drawing it wrong.",
    "start": "4976940",
    "end": "4983000"
  },
  {
    "text": " So I need two three\nsided structures.",
    "start": "4983000",
    "end": "4988760"
  },
  {
    "text": "Then I need actually\na whole bunch of these structures because\nthis was for every interval. But conveniently, they're\nonly log N intervals",
    "start": "4988760",
    "end": "4995660"
  },
  {
    "text": "because there's\nroot log N children. So root log N squared is\nlog N. So there's root N,",
    "start": "4995660",
    "end": "5001410"
  },
  {
    "text": "but then we need log N of them. And so that's why these\nthings balance out.",
    "start": "5001410",
    "end": "5007260"
  },
  {
    "text": "See? So normally, this would be N log\nsquared N because every point",
    "start": "5007260",
    "end": "5014790"
  },
  {
    "text": "would appear in log N trees. But now the height\nof my tree is merely",
    "start": "5014790",
    "end": "5020220"
  },
  {
    "text": "log N over log log\nN with a factor 2 out here because I\nhave a square root here.",
    "start": "5020220",
    "end": "5029170"
  },
  {
    "text": "OK, so the tree has height\nlog N over log log N. So each point only appears\nin log N over log log N",
    "start": "5029170",
    "end": "5034770"
  },
  {
    "text": "structures. Each of them needs a\nstructure size N log N. So we end up with N log\nsquared N over log log N space.",
    "start": "5034770",
    "end": "5043470"
  },
  {
    "text": "Kind of crazy, but\nthis is how you get that last little bit of\nlog log N space improvement by contracting nodes,\ndoing a simpler data",
    "start": "5043470",
    "end": "5050400"
  },
  {
    "text": "structure for these\nmiddle children, and just focusing on--",
    "start": "5050400",
    "end": "5056289"
  },
  {
    "text": "The left child and the right\nchild you have to do one three sided call, but\nthen the middle is a very simple two sided call.",
    "start": "5056290",
    "end": "5062140"
  },
  {
    "text": "It's just a 1D structure\nand so it's really cheap. That's it.",
    "start": "5062140",
    "end": "5068690"
  },
  {
    "start": "5068690",
    "end": "5077901"
  }
]