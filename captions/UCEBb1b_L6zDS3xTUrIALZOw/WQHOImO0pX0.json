[
  {
    "text": "PROFESSOR: [? Diagonal ?]\narguments are elegant,",
    "start": "0",
    "end": "2450"
  },
  {
    "text": "and infinite sets-- some\npeople think-- are romantic.",
    "start": "2450",
    "end": "6060"
  },
  {
    "text": "But you could legitimately ask\nwhat is all this weird infinite",
    "start": "6060",
    "end": "9990"
  },
  {
    "text": "stuff doing in a course that's\nmath for computer science?",
    "start": "9990",
    "end": "12934"
  },
  {
    "text": "And the reason is that\ndiagonal arguments turn out",
    "start": "12935",
    "end": "15410"
  },
  {
    "text": "to play a fundamental role\nin the theory of computing.",
    "start": "15410",
    "end": "19180"
  },
  {
    "text": "And what we're going\nto talk about now",
    "start": "19180",
    "end": "20950"
  },
  {
    "text": "is the application\nof diagonal arguments",
    "start": "20950",
    "end": "22910"
  },
  {
    "text": "to show that there\nare noncomputable sets",
    "start": "22910",
    "end": "25770"
  },
  {
    "text": "and examine a particular one.",
    "start": "25770",
    "end": "30280"
  },
  {
    "text": "So let's look at the class\nof infinite binary strings.",
    "start": "30280",
    "end": "36015"
  },
  {
    "start": "36015",
    "end": "39260"
  },
  {
    "text": "Now, we've seen that there\nare an uncountable number",
    "start": "39260",
    "end": "41460"
  },
  {
    "text": "of infinite binary\nstrings, and that's",
    "start": "41460",
    "end": "44280"
  },
  {
    "text": "because there was\na simple bijection",
    "start": "44280",
    "end": "46300"
  },
  {
    "text": "between the infinite\nbinary strings",
    "start": "46300",
    "end": "48405"
  },
  {
    "text": "and the subsets of\nthe natural numbers--",
    "start": "48405",
    "end": "50949"
  },
  {
    "text": "that is the power set of n.",
    "start": "50950",
    "end": "53340"
  },
  {
    "text": "Let's look at the\ninfinite binary strings",
    "start": "53340",
    "end": "57360"
  },
  {
    "text": "that we might think of and\ncall computable strings.",
    "start": "57360",
    "end": "59977"
  },
  {
    "text": "And what I mean by\na computable string",
    "start": "59977",
    "end": "61560"
  },
  {
    "text": "is that there's simply a\nprocedure that will tell me",
    "start": "61560",
    "end": "64518"
  },
  {
    "text": "what its digits are.",
    "start": "64519",
    "end": "65740"
  },
  {
    "text": "So what I mean is that the\nprocedure applied to argument n",
    "start": "65740",
    "end": "70180"
  },
  {
    "text": "will return the n-th\ndigit of the string s.",
    "start": "70180",
    "end": "73140"
  },
  {
    "text": "That's the definition of what I\nmean by saying s is computable.",
    "start": "73140",
    "end": "76020"
  },
  {
    "text": "I can compute its digits,\nwhichever digits are needed.",
    "start": "76020",
    "end": "80360"
  },
  {
    "text": "Now, we saw that there were\nonly a countable number",
    "start": "80360",
    "end": "83840"
  },
  {
    "text": "of finite binary\nsequences, and I",
    "start": "83840",
    "end": "86479"
  },
  {
    "text": "mention that now because I\nwant to think about sequences",
    "start": "86480",
    "end": "89890"
  },
  {
    "text": "over the slightly larger\nalphabet instead of 0 1,",
    "start": "89890",
    "end": "92854"
  },
  {
    "text": "the 256 ASCII characters.",
    "start": "92854",
    "end": "95679"
  },
  {
    "text": "And by the same argument, the\nset of finite ASCII strings",
    "start": "95680",
    "end": "100130"
  },
  {
    "text": "is also countable.",
    "start": "100130",
    "end": "102242"
  },
  {
    "text": "You just list them in order\nof length-- same argument",
    "start": "102242",
    "end": "104450"
  },
  {
    "text": "that we used for\nthe binary strings.",
    "start": "104450",
    "end": "106360"
  },
  {
    "text": "Now, the point of looking at\nthe ASCII strings-- the 256",
    "start": "106360",
    "end": "109430"
  },
  {
    "text": "keyboard characters--\nis that every procedure",
    "start": "109430",
    "end": "114000"
  },
  {
    "text": "that we enter into a computer,\nwe type in an ASCII string.",
    "start": "114000",
    "end": "119630"
  },
  {
    "text": "Every procedure can be\nrepresented by an ASCII string.",
    "start": "119630",
    "end": "124009"
  },
  {
    "text": "And since they're only countably\nmany finite ASCII strings,",
    "start": "124010",
    "end": "128280"
  },
  {
    "text": "it follows that there are\nonly countably many computable",
    "start": "128280",
    "end": "131620"
  },
  {
    "text": "procedures.",
    "start": "131620",
    "end": "133370"
  },
  {
    "text": "Now, since in order to be a\ncomputable infinite string,",
    "start": "133370",
    "end": "137280"
  },
  {
    "text": "there has to be a procedure\nwhich computes is digits,",
    "start": "137280",
    "end": "140270"
  },
  {
    "text": "we can immediately conclude\nthat there are only",
    "start": "140270",
    "end": "142970"
  },
  {
    "text": "countably many infinite binary\nsequences that are computable--",
    "start": "142970",
    "end": "147990"
  },
  {
    "text": "only countably many computable\ninfinite binary sequences.",
    "start": "147990",
    "end": "152040"
  },
  {
    "text": "But I already said there\nare an uncountable number",
    "start": "152040",
    "end": "154887"
  },
  {
    "text": "of those infinite\nbinary sequences.",
    "start": "154887",
    "end": "156344"
  },
  {
    "text": "So it has to be that there\nare noncomputable sequences,",
    "start": "156345",
    "end": "160630"
  },
  {
    "text": "noncomputable infinite\nbinary strings, that exist.",
    "start": "160630",
    "end": "164410"
  },
  {
    "text": "So we can conclude that\nas a matter of fact,",
    "start": "164410",
    "end": "166530"
  },
  {
    "text": "since the set of infinite\nbinary strings is uncountable",
    "start": "166530",
    "end": "170220"
  },
  {
    "text": "and the computable ones\nare a countable subset,",
    "start": "170220",
    "end": "173420"
  },
  {
    "text": "there have to be an\nuncountable number",
    "start": "173420",
    "end": "176430"
  },
  {
    "text": "of noncomputable infinite\nbinary sequences.",
    "start": "176430",
    "end": "179730"
  },
  {
    "text": "Most infinite binary sequences\nare actually noncomputable.",
    "start": "179730",
    "end": "185180"
  },
  {
    "text": "OK.",
    "start": "185180",
    "end": "186109"
  },
  {
    "text": "That's kind of\nabstract thing to know.",
    "start": "186110",
    "end": "187910"
  },
  {
    "text": "They're out there, and you\ncan't get a hold of them",
    "start": "187910",
    "end": "190330"
  },
  {
    "text": "computationally.",
    "start": "190330",
    "end": "191210"
  },
  {
    "text": "But the reasonable question to\nask is what do they look like?",
    "start": "191210",
    "end": "195310"
  },
  {
    "text": "And what we're going to\nsee is that if you consider",
    "start": "195310",
    "end": "200410"
  },
  {
    "text": "a sensible concrete\ncomputational",
    "start": "200410",
    "end": "202740"
  },
  {
    "text": "problem of giving a\nprocedure, figuring out",
    "start": "202740",
    "end": "206600"
  },
  {
    "text": "whether it will run and\nturn a value successfully",
    "start": "206600",
    "end": "211180"
  },
  {
    "text": "on some argument or not is\ncalled testing the halting",
    "start": "211180",
    "end": "216430"
  },
  {
    "text": "property of procedures.",
    "start": "216430",
    "end": "217881"
  },
  {
    "text": "I want to know-- given a\nprocedure and argument that I",
    "start": "217881",
    "end": "220129"
  },
  {
    "text": "could apply it to,\ndoes it return a value",
    "start": "220130",
    "end": "223350"
  },
  {
    "text": "or does something\nelse bad happen",
    "start": "223350",
    "end": "224955"
  },
  {
    "text": "and it runs forever\nand returns an error?",
    "start": "224955",
    "end": "227220"
  },
  {
    "text": "We don't get a\nsatisfactory value out.",
    "start": "227220",
    "end": "229155"
  },
  {
    "text": "And if it does\n[? satisfactorily ?] return",
    "start": "229155",
    "end": "231030"
  },
  {
    "text": "something, we say it halts.",
    "start": "231030",
    "end": "233470"
  },
  {
    "text": "And what I'm going to argue is\nthat the halting problem is not",
    "start": "233470",
    "end": "238940"
  },
  {
    "text": "decidable.",
    "start": "238940",
    "end": "239710"
  },
  {
    "text": "That is, there's\nno procedure which",
    "start": "239710",
    "end": "242750"
  },
  {
    "text": "given input that\ndescribes a procedure,",
    "start": "242750",
    "end": "246600"
  },
  {
    "text": "the fixed procedure can figure\nout what its input is doing.",
    "start": "246600",
    "end": "249370"
  },
  {
    "text": "Let's look at that\nin more detail.",
    "start": "249370",
    "end": "252370"
  },
  {
    "text": "So let's think about\nstring procedures",
    "start": "252370",
    "end": "254284"
  },
  {
    "text": "because we're thinking about\nprocedures being represented",
    "start": "254285",
    "end": "256660"
  },
  {
    "text": "by ASCII strings.",
    "start": "256660",
    "end": "257870"
  },
  {
    "text": "So let's think about procedures\nthat take a string argument.",
    "start": "257870",
    "end": "260370"
  },
  {
    "text": "So an example of\na procedure P, it",
    "start": "260370",
    "end": "262530"
  },
  {
    "text": "might be that when you apply P\nto the string no, it returns 2.",
    "start": "262530",
    "end": "266050"
  },
  {
    "text": "When you apply it to the string\nalbert, it returns meyer.",
    "start": "266050",
    "end": "269699"
  },
  {
    "text": "When you apply it to this\nstring of weird symbols,",
    "start": "269700",
    "end": "273660"
  },
  {
    "text": "that causes an error.",
    "start": "273660",
    "end": "275220"
  },
  {
    "text": "And you apply it to the\nsequence of characters what now,",
    "start": "275220",
    "end": "279860"
  },
  {
    "text": "and it actually runs forever.",
    "start": "279860",
    "end": "281310"
  },
  {
    "text": "These are just illustrations\nof the kind of behavior",
    "start": "281310",
    "end": "284669"
  },
  {
    "text": "that some weird string\nprocedure might exhibit.",
    "start": "284670",
    "end": "289260"
  },
  {
    "text": "So what I want to\nthink about is--",
    "start": "289260",
    "end": "291210"
  },
  {
    "text": "suppose I have an ASCII string\ns, a finite ASCII string.",
    "start": "291210",
    "end": "295690"
  },
  {
    "text": "That's the one that defines\nthis procedure P. When",
    "start": "295690",
    "end": "297950"
  },
  {
    "text": "I'm trying to run\nP on the computer,",
    "start": "297950",
    "end": "300150"
  },
  {
    "text": "I'll have to type in\ns in order to give",
    "start": "300150",
    "end": "302210"
  },
  {
    "text": "the computer the definition\nof P to tell it what to do.",
    "start": "302210",
    "end": "305410"
  },
  {
    "text": "And I'm going to\nsay that s HALTS--",
    "start": "305410",
    "end": "307650"
  },
  {
    "text": "the string has this\nproperty called halting",
    "start": "307650",
    "end": "310120"
  },
  {
    "text": "or HALTS-- if and only if this\nprocedure P that s describes",
    "start": "310120",
    "end": "315580"
  },
  {
    "text": "returns successfully\nwhen it's applied to s.",
    "start": "315580",
    "end": "319340"
  },
  {
    "text": "This is where we're really\ndoing a diagonal argument.",
    "start": "319340",
    "end": "321690"
  },
  {
    "text": "We're taking the sth\nobject-- the procedure",
    "start": "321690",
    "end": "325940"
  },
  {
    "text": "that's described by s\nand applying it to s.",
    "start": "325940",
    "end": "328560"
  },
  {
    "text": "And that's kind of going down\nthe diagonal of s applied",
    "start": "328560",
    "end": "332280"
  },
  {
    "text": "to s, where the n-th\nelement of the n-th row",
    "start": "332280",
    "end": "337530"
  },
  {
    "text": "in a pictorial\ndiagonal argument.",
    "start": "337530",
    "end": "339817"
  },
  {
    "text": "That's the idea that\nwe're going here.",
    "start": "339817",
    "end": "341400"
  },
  {
    "text": "But let's to go back\nto the definition.",
    "start": "341400",
    "end": "343199"
  },
  {
    "text": "A string is said to HALT\nif when you interpret it",
    "start": "343200",
    "end": "347210"
  },
  {
    "text": "as the description of a\nprocedure that takes a string",
    "start": "347210",
    "end": "350400"
  },
  {
    "text": "argument and you\napply that string",
    "start": "350400",
    "end": "353000"
  },
  {
    "text": "procedure to that\nvery same thing, s,",
    "start": "353000",
    "end": "355710"
  },
  {
    "text": "you successfully return.",
    "start": "355710",
    "end": "357660"
  },
  {
    "text": "That's the halting problem.",
    "start": "357660",
    "end": "360460"
  },
  {
    "text": "And what I want to argue\nis that it's impossible",
    "start": "360460",
    "end": "363600"
  },
  {
    "text": "that there could be a procedure\nQ that decided the property",
    "start": "363600",
    "end": "368210"
  },
  {
    "text": "HALTS of strings.",
    "start": "368210",
    "end": "369970"
  },
  {
    "text": "That is to say, Q applied\nto a string returns",
    "start": "369970",
    "end": "372890"
  },
  {
    "text": "yes if s does return\nsuccessfully-- if s HALTS.",
    "start": "372890",
    "end": "377270"
  },
  {
    "text": "And it returns no otherwise.",
    "start": "377270",
    "end": "379310"
  },
  {
    "text": "Q applied to s will say\nno if s runs forever",
    "start": "379310",
    "end": "383740"
  },
  {
    "text": "or if s has a type\nerror or s does",
    "start": "383740",
    "end": "386250"
  },
  {
    "text": "anything other than\nsuccessfully return a value.",
    "start": "386250",
    "end": "389720"
  },
  {
    "text": "Let's suppose, for the\nsake of contradiction,",
    "start": "389720",
    "end": "392050"
  },
  {
    "text": "that there was\nthis HALTS decider.",
    "start": "392050",
    "end": "394349"
  },
  {
    "text": "I claim there can't be such a Q.\nFor the sake of contradiction,",
    "start": "394350",
    "end": "399410"
  },
  {
    "text": "let's assume there was one.",
    "start": "399410",
    "end": "401650"
  },
  {
    "text": "Then this is the trick\nthat I'm going to do.",
    "start": "401650",
    "end": "404000"
  },
  {
    "text": "I'm going to modify\nQ to act as though it",
    "start": "404000",
    "end": "408713"
  },
  {
    "text": "was complementing the diagonal.",
    "start": "408713",
    "end": "410317"
  },
  {
    "text": "More precisely, this\nis what I'm going",
    "start": "410317",
    "end": "411900"
  },
  {
    "text": "to do with Q. I'm\ngoing to modify",
    "start": "411900",
    "end": "413470"
  },
  {
    "text": "Q to be another\nprocedure Q prime,",
    "start": "413470",
    "end": "416380"
  },
  {
    "text": "which just behaves a\nlittle bit differently.",
    "start": "416380",
    "end": "418260"
  },
  {
    "text": "Namely, Q prime of s returns\nyes when Q of s returns no,",
    "start": "418260",
    "end": "423490"
  },
  {
    "text": "and Q prime of s\nreturns nothing--",
    "start": "423490",
    "end": "426766"
  },
  {
    "text": "that is, it doesn't HALT--\nif you Q of s returns yes.",
    "start": "426766",
    "end": "430990"
  },
  {
    "text": "So Q prime is like complementing\nthe bits on the diagonal,",
    "start": "430990",
    "end": "434509"
  },
  {
    "text": "but here's the\nprecise definition.",
    "start": "434510",
    "end": "436390"
  },
  {
    "text": "Q of s says no.",
    "start": "436390",
    "end": "437190"
  },
  {
    "text": "Q of prime of s says yes.",
    "start": "437190",
    "end": "439410"
  },
  {
    "text": "Q of s says yes.",
    "start": "439410",
    "end": "442680"
  },
  {
    "text": "s HALTS successfully.",
    "start": "442680",
    "end": "443880"
  },
  {
    "text": "Q prime then does not\nHALT successfully.",
    "start": "443880",
    "end": "447070"
  },
  {
    "text": "It returns nothing at all.",
    "start": "447070",
    "end": "448960"
  },
  {
    "text": "Let's go crank through\nthe consequences",
    "start": "448960",
    "end": "450840"
  },
  {
    "text": "of these definitions.",
    "start": "450840",
    "end": "452660"
  },
  {
    "text": "So s HALTS means Q prime\nof s returns nothing.",
    "start": "452660",
    "end": "458550"
  },
  {
    "text": "That was the way we\ndefine Q prime of s.",
    "start": "458550",
    "end": "462169"
  },
  {
    "text": "Now, let's let t be\nthe text for Q prime.",
    "start": "462170",
    "end": "467310"
  },
  {
    "text": "If Q was a procedure,\nthen surely we",
    "start": "467310",
    "end": "469190"
  },
  {
    "text": "can tweak this procedure Q\nto get the procedure Q prime.",
    "start": "469190",
    "end": "473100"
  },
  {
    "text": "So Q prime will have\na text that describes.",
    "start": "473100",
    "end": "475940"
  },
  {
    "text": "It'll be the ASCII string\nthat defines Q prime.",
    "start": "475940",
    "end": "479160"
  },
  {
    "text": "Let's let t be\nthat ASCII string.",
    "start": "479160",
    "end": "481550"
  },
  {
    "text": "What do we have?",
    "start": "481550",
    "end": "482530"
  },
  {
    "text": "Then by definition of\nHALTS, t HALTS if and only",
    "start": "482530",
    "end": "486180"
  },
  {
    "text": "if the procedure that t\nscribes-- namely Q prime",
    "start": "486180",
    "end": "490009"
  },
  {
    "text": "applied to t-- returns\na value successfully.",
    "start": "490010",
    "end": "493790"
  },
  {
    "text": "OK?",
    "start": "493790",
    "end": "494660"
  },
  {
    "text": "Now by definition of Q\nprime however, Q prime",
    "start": "494660",
    "end": "497260"
  },
  {
    "text": "was the thing that on t, it\nreturned a value successfully",
    "start": "497260",
    "end": "503000"
  },
  {
    "text": "if and only if it was not\nthe case that t HALTS.",
    "start": "503000",
    "end": "507950"
  },
  {
    "text": "So if you put those two\nthings together-- that is,",
    "start": "507950",
    "end": "511020"
  },
  {
    "text": "we're looking at t HALTS if and\nonly if Q prime of t returns,",
    "start": "511020",
    "end": "515320"
  },
  {
    "text": "and Q prime of t returns a value\nsuccessfully if only if not t",
    "start": "515320",
    "end": "519860"
  },
  {
    "text": "HALTS-- then put\nthe two together,",
    "start": "519860",
    "end": "522269"
  },
  {
    "text": "and we have a contradiction.",
    "start": "522270",
    "end": "523990"
  },
  {
    "text": "t HALTS if and only\nif t doesn't HALT.",
    "start": "523990",
    "end": "527220"
  },
  {
    "text": "And that contradiction says\nthat our original hypothesis",
    "start": "527220",
    "end": "531139"
  },
  {
    "text": "that we had a Q that would\ndecide the halting problem",
    "start": "531140",
    "end": "534770"
  },
  {
    "text": "can't be right.",
    "start": "534770",
    "end": "536210"
  },
  {
    "text": "It's impossible to write a\nprocedure that determines",
    "start": "536210",
    "end": "540450"
  },
  {
    "text": "of strings whether they\ndescribe a procedure that",
    "start": "540450",
    "end": "543610"
  },
  {
    "text": "HALTS when applied to itself.",
    "start": "543610",
    "end": "546140"
  },
  {
    "text": "OK.",
    "start": "546140",
    "end": "547000"
  },
  {
    "text": "That at least gives us\nsome concrete problem",
    "start": "547000",
    "end": "549950"
  },
  {
    "text": "that we can say is not something\nthat a computer can do.",
    "start": "549950",
    "end": "553990"
  },
  {
    "text": "Even though it's a very\nwell defined clear question,",
    "start": "553990",
    "end": "558250"
  },
  {
    "text": "it's just not possible to get\na computing procedure that",
    "start": "558250",
    "end": "563530"
  },
  {
    "text": "will on an arbitrary string,\nfigure out the right answer.",
    "start": "563530",
    "end": "567220"
  },
  {
    "text": "Any program that\napplied to strings",
    "start": "567220",
    "end": "570839"
  },
  {
    "text": "is trying to do this job, either\nit will give the wrong answer.",
    "start": "570840",
    "end": "573841"
  },
  {
    "text": "Or if it never gives\na wrong answer,",
    "start": "573841",
    "end": "575340"
  },
  {
    "text": "it means it doesn't give an\nanswer at all on some strings.",
    "start": "575340",
    "end": "580650"
  },
  {
    "text": "All right.",
    "start": "580650",
    "end": "581231"
  },
  {
    "text": "Well, you could say that I don't\nreally care very much about",
    "start": "581231",
    "end": "583730"
  },
  {
    "text": "whether a program HALTS or not.",
    "start": "583730",
    "end": "585120"
  },
  {
    "text": "So let's look at\nhow do you apply",
    "start": "585120",
    "end": "587360"
  },
  {
    "text": "the same reasoning--\nor more precisely,",
    "start": "587360",
    "end": "590860"
  },
  {
    "text": "as a corollary of the fact\nthat the halting problem is not",
    "start": "590860",
    "end": "594269"
  },
  {
    "text": "computable, let's\ntalk about something",
    "start": "594270",
    "end": "596240"
  },
  {
    "text": "that sounds closer to\na practical interest,",
    "start": "596240",
    "end": "598330"
  },
  {
    "text": "mainly type-checking.",
    "start": "598330",
    "end": "600200"
  },
  {
    "text": "So I want to think about\nthe type-checking problem.",
    "start": "600200",
    "end": "602990"
  },
  {
    "text": "And what I want to say\nis that in fact, there's",
    "start": "602990",
    "end": "606160"
  },
  {
    "text": "no strict procedures that\ntype-checks procedures",
    "start": "606160",
    "end": "610079"
  },
  {
    "text": "perfectly.",
    "start": "610080",
    "end": "612350"
  },
  {
    "text": "So what I mean is\nthat I want to be",
    "start": "612350",
    "end": "615769"
  },
  {
    "text": "able to write a program\nthat will look at a program",
    "start": "615770",
    "end": "620880"
  },
  {
    "text": "text, an ASCII string that\ndescribes a procedure,",
    "start": "620880",
    "end": "624510"
  },
  {
    "text": "and figure out whether that\nASCII string, if you ran it,",
    "start": "624510",
    "end": "629360"
  },
  {
    "text": "would cause a\nrun-time type error.",
    "start": "629360",
    "end": "631925"
  },
  {
    "text": "That's what type-checkers\nare supposed to do.",
    "start": "631926",
    "end": "633800"
  },
  {
    "text": "They're supposed to\ncheck your program,",
    "start": "633800",
    "end": "635425"
  },
  {
    "text": "figure out whether the program\nwill cause a run-time type",
    "start": "635425",
    "end": "638505"
  },
  {
    "text": "error.",
    "start": "638505",
    "end": "639005"
  },
  {
    "text": "If so, it reports it.",
    "start": "639005",
    "end": "640400"
  },
  {
    "text": "If not, it says,\nthis program is safe.",
    "start": "640400",
    "end": "643530"
  },
  {
    "text": "Other things may go\nwrong, but it's not",
    "start": "643530",
    "end": "645530"
  },
  {
    "text": "going to commit a\nrun-time type error.",
    "start": "645530",
    "end": "647730"
  },
  {
    "text": "So let's suppose that I had\nsuch a type checking procedure",
    "start": "647730",
    "end": "651380"
  },
  {
    "text": "C. So what that means is that\nfor program text s, C of s",
    "start": "651380",
    "end": "656370"
  },
  {
    "text": "returns yes if running s would\ncause a run-time type error.",
    "start": "656370",
    "end": "661720"
  },
  {
    "text": "And C of s returns no-- the\noutput string no-- otherwise",
    "start": "661720",
    "end": "665879"
  },
  {
    "text": "if s would not cause\na run-time type error.",
    "start": "665880",
    "end": "670260"
  },
  {
    "text": "In other words, s is safe.",
    "start": "670260",
    "end": "672238"
  },
  {
    "text": "All right.",
    "start": "672238",
    "end": "673579"
  },
  {
    "text": "Now, what I claim is\nthat if you give me C--",
    "start": "673580",
    "end": "676050"
  },
  {
    "text": "if I have a procedure that's\nthis perfect type-checker-- I",
    "start": "676050",
    "end": "678779"
  },
  {
    "text": "can use C to build a tester\nfor HALTS, which we said",
    "start": "678780",
    "end": "683870"
  },
  {
    "text": "is impossible.",
    "start": "683870",
    "end": "684910"
  },
  {
    "text": "So how would I use C to\nget a HALTS tester, H.",
    "start": "684910",
    "end": "689449"
  },
  {
    "text": "Here's how.",
    "start": "689450",
    "end": "691430"
  },
  {
    "text": "I'm going to tell you\nhow to compute H of s.",
    "start": "691430",
    "end": "697360"
  },
  {
    "text": "I'm describing the procedure\nthat this tester H carries out",
    "start": "697360",
    "end": "701779"
  },
  {
    "text": "on argument s.",
    "start": "701780",
    "end": "703390"
  },
  {
    "text": "And what it does is\ngiven argument s,",
    "start": "703390",
    "end": "705630"
  },
  {
    "text": "it's going to construct\na new program that's",
    "start": "705630",
    "end": "707680"
  },
  {
    "text": "a small modification of s.",
    "start": "707680",
    "end": "709520"
  },
  {
    "text": "It's going to construct this\nnew program s prime that acts",
    "start": "709520",
    "end": "714390"
  },
  {
    "text": "like an interpreter for s.",
    "start": "714390",
    "end": "716450"
  },
  {
    "text": "So s is a computer\nprogram or a procedure.",
    "start": "716450",
    "end": "720540"
  },
  {
    "text": "I want to know whether if you\njust run it, it'll HALT or not.",
    "start": "720540",
    "end": "723410"
  },
  {
    "text": "I'm going to tweak it a little\nbit so that s prime acts like s",
    "start": "723410",
    "end": "727269"
  },
  {
    "text": "but in a slightly modified way.",
    "start": "727270",
    "end": "729295"
  },
  {
    "text": "And here's how s prime works.",
    "start": "729295",
    "end": "731410"
  },
  {
    "text": "S prime is going to be an\ninterpreter that's simulating",
    "start": "731410",
    "end": "734480"
  },
  {
    "text": "step-by-step how s behaves.",
    "start": "734480",
    "end": "736209"
  },
  {
    "text": "But at the moment\nthat it discovers",
    "start": "736210",
    "end": "738430"
  },
  {
    "text": "that s is about to\ncommit a run-time type",
    "start": "738430",
    "end": "741529"
  },
  {
    "text": "error-- that the next\ninstruction that s prime",
    "start": "741530",
    "end": "744230"
  },
  {
    "text": "would execute in simulating s\nwas going to be a run-time type",
    "start": "744230",
    "end": "748199"
  },
  {
    "text": "error-- s prime\nwould just skip it.",
    "start": "748200",
    "end": "750620"
  },
  {
    "text": "And who knows what the\nconsequences of skipping it",
    "start": "750620",
    "end": "753470"
  },
  {
    "text": "will be, but it'll skip\nit and just keep going.",
    "start": "753470",
    "end": "756769"
  },
  {
    "text": "OK.",
    "start": "756770",
    "end": "757270"
  },
  {
    "start": "757270",
    "end": "760828"
  },
  {
    "text": "If s prime in simulating program\ns discovers that in fact s",
    "start": "760828",
    "end": "766920"
  },
  {
    "text": "returns successfully--\nthose that is s",
    "start": "766920",
    "end": "769190"
  },
  {
    "text": "HALTS-- then s prime will\npurposely make a type error.",
    "start": "769190",
    "end": "774530"
  },
  {
    "text": "So let's think about\nwhat that means.",
    "start": "774530",
    "end": "776150"
  },
  {
    "start": "776150",
    "end": "777130"
  },
  {
    "text": "Well, actually let me just wrap\nup what the definition of H is.",
    "start": "777130",
    "end": "780470"
  },
  {
    "text": "So the way H works\nis given input s,",
    "start": "780470",
    "end": "783430"
  },
  {
    "text": "it constructs the program\ns prime and applies",
    "start": "783430",
    "end": "786550"
  },
  {
    "text": "the type-checker C to s prime\nand returns the same value",
    "start": "786550",
    "end": "791100"
  },
  {
    "text": "that c does.",
    "start": "791100",
    "end": "793190"
  },
  {
    "text": "So what we can figure\nout by these definitions",
    "start": "793190",
    "end": "795920"
  },
  {
    "text": "is the s HALTS-- the string\ns is a cloud halting string--",
    "start": "795920",
    "end": "801320"
  },
  {
    "text": "if and only if\nthe string s prime",
    "start": "801320",
    "end": "804450"
  },
  {
    "text": "makes a run-time type error.",
    "start": "804450",
    "end": "806330"
  },
  {
    "text": "Because remember,\nthe interpreter,",
    "start": "806330",
    "end": "808510"
  },
  {
    "text": "which is what s prime\nwas behaving like,",
    "start": "808510",
    "end": "811660"
  },
  {
    "text": "was simulating what s did.",
    "start": "811660",
    "end": "814519"
  },
  {
    "text": "And if s was going\nto HALT successfully,",
    "start": "814520",
    "end": "816700"
  },
  {
    "text": "s prime makes a\nrun-time type error.",
    "start": "816700",
    "end": "819110"
  },
  {
    "text": "That means that C is going\nto say yes to s prime-- yes,",
    "start": "819110",
    "end": "823390"
  },
  {
    "text": "it has a run-time type error.",
    "start": "823390",
    "end": "825100"
  },
  {
    "text": "And by definition of H,\nthat means that H of s",
    "start": "825100",
    "end": "828550"
  },
  {
    "text": "says yes because H of s\nconstructed s prime to C. OK.",
    "start": "828550",
    "end": "834279"
  },
  {
    "text": "On the other hand,\nif s does not HALT,",
    "start": "834280",
    "end": "838220"
  },
  {
    "text": "that means that something\nelse goes wrong with s.",
    "start": "838220",
    "end": "842610"
  },
  {
    "text": "It's not going to\nsuccessfully return.",
    "start": "842610",
    "end": "845060"
  },
  {
    "text": "Then s prime-- when it's\nsimulating s-- is never",
    "start": "845060",
    "end": "850740"
  },
  {
    "text": "going to make a run-time\ntype error because that's",
    "start": "850740",
    "end": "852880"
  },
  {
    "text": "the way s prime goes.",
    "start": "852880",
    "end": "853760"
  },
  {
    "text": "Whenever it detects\nthat there would",
    "start": "853760",
    "end": "855259"
  },
  {
    "text": "be about to be a run-time\ntype error, it skips it.",
    "start": "855259",
    "end": "857610"
  },
  {
    "text": "So s prime is likely to keep\nrunning forever because it's",
    "start": "857610",
    "end": "861160"
  },
  {
    "text": "simulating this program\ns that doesn't HALT,",
    "start": "861160",
    "end": "863930"
  },
  {
    "text": "but it won't make a type error.",
    "start": "863930",
    "end": "866500"
  },
  {
    "text": "And that means that\nC of s prime is going",
    "start": "866500",
    "end": "868520"
  },
  {
    "text": "to say no-- no type error.",
    "start": "868520",
    "end": "870600"
  },
  {
    "text": "And H of s is going to say no.",
    "start": "870600",
    "end": "873360"
  },
  {
    "text": "And that means that when\ns does not HALT, H of s",
    "start": "873360",
    "end": "876980"
  },
  {
    "text": "properly says no.",
    "start": "876980",
    "end": "878209"
  },
  {
    "text": "In other words, I've just\nwalked through the argument",
    "start": "878210",
    "end": "880930"
  },
  {
    "text": "that this procedure H that\nI've described actually",
    "start": "880930",
    "end": "884820"
  },
  {
    "text": "is a decider for HALTS.",
    "start": "884820",
    "end": "887480"
  },
  {
    "text": "And that's a contradiction.",
    "start": "887480",
    "end": "889810"
  },
  {
    "text": "The H that I gave you would\nsolve the halting problem",
    "start": "889810",
    "end": "892900"
  },
  {
    "text": "if there was a\nperfect type-checker,",
    "start": "892900",
    "end": "895230"
  },
  {
    "text": "and there can't be a\nhalting problem decider.",
    "start": "895230",
    "end": "898230"
  },
  {
    "text": "So there can't be a\nperfect type checker.",
    "start": "898230",
    "end": "900449"
  },
  {
    "text": "C must make a mistake.",
    "start": "900450",
    "end": "902210"
  },
  {
    "text": "It can't accurately\npredict run-time errors.",
    "start": "902210",
    "end": "906520"
  },
  {
    "text": "And that is an\nexample of how you",
    "start": "906520",
    "end": "910490"
  },
  {
    "text": "reason from this kind of\ncontrived halting problem",
    "start": "910490",
    "end": "914050"
  },
  {
    "text": "that's sort of self-referential\nwhether the string",
    "start": "914050",
    "end": "918370"
  },
  {
    "text": "procedure applied to its\nown definition HALTS or not.",
    "start": "918370",
    "end": "922510"
  },
  {
    "text": "And we can apply it to all sorts\nof questions and properties",
    "start": "922510",
    "end": "926024"
  },
  {
    "text": "of procedures that\nwe really care about.",
    "start": "926024",
    "end": "927690"
  },
  {
    "text": "In fact, the same\nreasoning really",
    "start": "927690",
    "end": "929106"
  },
  {
    "text": "shows that it's not\njust type-checking.",
    "start": "929106",
    "end": "930840"
  },
  {
    "text": "That's a kind of\narbitrary example,",
    "start": "930840",
    "end": "932640"
  },
  {
    "text": "but there's more or\nless no perfect checker",
    "start": "932640",
    "end": "935510"
  },
  {
    "text": "for any kind of property\nthat procedure outcomes",
    "start": "935510",
    "end": "938860"
  },
  {
    "text": "might exhibit.",
    "start": "938860",
    "end": "940399"
  },
  {
    "text": "Which is why theoretical\ncomputer scientists",
    "start": "940400",
    "end": "944710"
  },
  {
    "text": "interested in the\ntheory of computation",
    "start": "944710",
    "end": "947170"
  },
  {
    "text": "have great respect and\ninterest in diagonal arguments",
    "start": "947170",
    "end": "950240"
  },
  {
    "text": "because they crystallize\na whole set of absolutely",
    "start": "950240",
    "end": "953730"
  },
  {
    "text": "logical, intrinsic limitations\non the power of computation.",
    "start": "953730",
    "end": "959660"
  },
  {
    "start": "959660",
    "end": "961862"
  }
]