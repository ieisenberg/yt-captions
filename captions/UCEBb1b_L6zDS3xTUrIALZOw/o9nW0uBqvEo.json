[
  {
    "start": "0",
    "end": "23000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "7029"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "7030",
    "end": "13990"
  },
  {
    "text": "from hundreds of\nMIT courses, visit MITOpenCourseWare@ocw.mit.edu. ",
    "start": "13990",
    "end": "24840"
  },
  {
    "start": "23000",
    "end": "155000"
  },
  {
    "text": "PROFESSOR: OK, folks. Welcome back. Hope you had a nice long\nweekend with no classes.",
    "start": "24840",
    "end": "31000"
  },
  {
    "text": "You got caught up on all\nthose problem sets that have been sneaking up on you. You enjoyed watching\nthe Patriots and Tom",
    "start": "31000",
    "end": "36540"
  },
  {
    "text": "Brady come back. Oh, sorry, I'm\nshowing my local bias. Before we talk\nabout today's topic,",
    "start": "36540",
    "end": "44030"
  },
  {
    "text": "I want to take a second\nto set the stage. And I want you to stop and\nthink about what you've seen so far in this course.",
    "start": "44030",
    "end": "50322"
  },
  {
    "text": "We're coming up on the\nend of the first section of the course. And you've already seen a lot. You've certainly learned about\nfundamentals of computation.",
    "start": "50322",
    "end": "58120"
  },
  {
    "text": "You've seen different\nkinds of data structures, both mutable and immutable, so\ntuples and lists, dictionaries,",
    "start": "58120",
    "end": "64180"
  },
  {
    "text": "different ways of\npulling things together. You've seen a\nrange of algorithms from simple linear code\nto loops, fors and whiles.",
    "start": "64180",
    "end": "72729"
  },
  {
    "text": "You've seen\niterative algorithms. You've seen\nrecursive algorithms. You've seen classes\nof algorithms.",
    "start": "72730",
    "end": "79630"
  },
  {
    "text": "Divide and conquer. Greedy algorithms. Bisection search. A range of things.",
    "start": "79630",
    "end": "85270"
  },
  {
    "text": "And then most recently,\nyou start pulling things together with classes--\na way to group together",
    "start": "85270",
    "end": "90430"
  },
  {
    "text": "data that belongs together along\nwith methods or procedures that are designed to\nmanipulate that data.",
    "start": "90430",
    "end": "97120"
  },
  {
    "text": "So you've had actually\na fairly good coverage already of a lot of the\nfundamentals of computation.",
    "start": "97120",
    "end": "103181"
  },
  {
    "text": "And you're starting\nto get geared up to be able to tackle a pretty\ninteresting range of problems.",
    "start": "103181",
    "end": "109180"
  },
  {
    "text": "Today and Monday,\nwe're going to take a little bit of a different\nlook at computation.",
    "start": "109180",
    "end": "114280"
  },
  {
    "text": "Because now that you've got\nthe tools to start building up your own personal\narmamentarium of tools,",
    "start": "114280",
    "end": "121390"
  },
  {
    "text": "we'd like to ask a couple\nof important questions. The primary one of which is how\nefficient are my algorithms?",
    "start": "121390",
    "end": "129840"
  },
  {
    "text": "And by efficiency, we'll see it\nrefers both to space and time, but primarily to time. And we'd like to know both how\nfast are my algorithms going",
    "start": "129840",
    "end": "138460"
  },
  {
    "text": "to run and how could I reason\nabout past performance. And that's what we're going\nto do with today's topics.",
    "start": "138460",
    "end": "144019"
  },
  {
    "text": "We're going to talk\nabout orders of growth. We'll define what that\nmeans in a few minutes. We're going to talk about what's\ncalled the big O notation.",
    "start": "144020",
    "end": "150970"
  },
  {
    "text": "And we're going to begin to\nexplore different classes of algorithms.",
    "start": "150970",
    "end": "156159"
  },
  {
    "start": "155000",
    "end": "195000"
  },
  {
    "text": "Before we do that though,\nlet's talk about why. And I want to suggest to you\nthere are two reasons this",
    "start": "156160",
    "end": "163739"
  },
  {
    "text": "is important to be considering. First question is how could\nwe reason about an algorithm",
    "start": "163740",
    "end": "169930"
  },
  {
    "text": "something you write in order\nto predict how much time is it going to need to solve a\nproblem of a particular size?",
    "start": "169930",
    "end": "177920"
  },
  {
    "text": "I might be testing my code\non small scale examples. And I want to know if I'd run\nit on a really big one, how",
    "start": "177920",
    "end": "183390"
  },
  {
    "text": "long is it going to take? Can I predict that? Can I make guesses\nabout how much time",
    "start": "183390",
    "end": "189030"
  },
  {
    "text": "I'm going to need to\nsolve this problem? Especially if it's\nin a real world circumstance where time\nis going to be crucial.",
    "start": "189030",
    "end": "196120"
  },
  {
    "start": "195000",
    "end": "229000"
  },
  {
    "text": "Equally important is\ngoing the other direction. We want you to begin to\nreason about the algorithms",
    "start": "196120",
    "end": "203380"
  },
  {
    "text": "you write to be\nable to say how do certain choices in a design\nof an algorithm influence",
    "start": "203380",
    "end": "210040"
  },
  {
    "text": "how much time it's\ngoing to take. If I choose to do\nthis recursively, is that going to be\ndifferent than iteratively?",
    "start": "210040",
    "end": "215560"
  },
  {
    "text": "If I choose to do this with a\nparticular kind of structure in my algorithm, what does\nthat say about the amount",
    "start": "215560",
    "end": "221890"
  },
  {
    "text": "of time I'm going to need? And you're going to see\nthere's a nice association between classes of algorithms\nand the interior structure",
    "start": "221890",
    "end": "228909"
  },
  {
    "text": "of them. And in particular, we want to\nask some fundamental questions.",
    "start": "228910",
    "end": "234580"
  },
  {
    "start": "229000",
    "end": "248000"
  },
  {
    "text": "Are there fundamental\nlimits to how much time it's going to take to\nsolve a particular problem,",
    "start": "234580",
    "end": "239800"
  },
  {
    "text": "no matter what kind of\nalgorithm I design around this? And we'll see that there\nare some nice challenges about that.",
    "start": "239800",
    "end": "245950"
  },
  {
    "text": "So that's what we're going\nto do over the next two days. Before we do though, let's\nmaybe ask the obvious question--",
    "start": "245950",
    "end": "251850"
  },
  {
    "start": "248000",
    "end": "427000"
  },
  {
    "text": "why should we care? Could be on a quiz,\nmight matter to you.",
    "start": "251850",
    "end": "258109"
  },
  {
    "text": "Better choice is because it\nactually makes a difference. And I say that because it\nmay not be as obvious to you",
    "start": "258110",
    "end": "265100"
  },
  {
    "text": "as it was in an\nearlier generation. So people with my gray hair\nor what's left of my gray hair like to tell stories.",
    "start": "265100",
    "end": "271200"
  },
  {
    "text": "I'll make it short. But I started programming\n41 years ago-- no,",
    "start": "271200",
    "end": "277699"
  },
  {
    "text": "sorry, 45 years\nago-- on punch cards. You don't know what those are\nunless you've been to a museum",
    "start": "277700",
    "end": "283039"
  },
  {
    "text": "on a machine that\nfilled a half a room and that took about\nfive minutes to execute what you can do in a fraction\nof a second on your phone.",
    "start": "283040",
    "end": "290970"
  },
  {
    "text": "Right. This is to tell you're\nliving in a great time, not independent of what's going\nto happen on November 8th.",
    "start": "290970",
    "end": "297320"
  },
  {
    "text": "All right. We'll stay away from those\ntopics as well, won't we? My point is yeah,\nI tell old stories.",
    "start": "297320",
    "end": "303229"
  },
  {
    "text": "I'm an old guy. But you might argue\nlook, computers are getting so much faster. Does it really matter?",
    "start": "303230",
    "end": "308479"
  },
  {
    "text": "And I want to say to you--\nmaybe it's obvious to you-- yes, absolutely it does. Because in conjunction with\nus getting faster computers,",
    "start": "308480",
    "end": "316190"
  },
  {
    "text": "we're increasing the\nsizes of the problems. The data sets we want to\nanalyze are getting massive.",
    "start": "316190",
    "end": "321789"
  },
  {
    "text": "And I'll give you an example. I just pulled this off\nof Google, of course.",
    "start": "321790",
    "end": "326990"
  },
  {
    "text": "In 2014-- I don't have\nmore recent numbers-- Google served-- I think I\nhave that number right-- 30 trillion pages on the web.",
    "start": "326990",
    "end": "337110"
  },
  {
    "text": "It's either 30 trillionaire\nor 30 quadrillion. I can't count that\nmany zeros there. It covered 100 million\ngigabytes of data.",
    "start": "337110",
    "end": "345586"
  },
  {
    "text": "And I suggest to you if you want\nto find a piece of information on the web, can you write a\nsimple little search algorithm",
    "start": "345586",
    "end": "351401"
  },
  {
    "text": "that's going to sequentially\ngo through all the pages and find anything in any\nreasonable amount of time?",
    "start": "351402",
    "end": "357090"
  },
  {
    "text": "Probably not. Right? It's just growing way too fast. This, by the way, is of course,\nwhy Google makes a lot of money",
    "start": "357090",
    "end": "363870"
  },
  {
    "text": "off of their map\nreduced algorithm for searching the web,\nwritten by the way, or co-written by an MIT grad\nand the parent of a current MIT",
    "start": "363870",
    "end": "372540"
  },
  {
    "text": "student. So there's a nice\nhook in there, not that Google pays MIT royalties\nfor that wonderful thing, by the way.",
    "start": "372540",
    "end": "378490"
  },
  {
    "text": "All right. Bad jokes aside, searching\nGoogle-- ton of time. Searching a genomics\ndata set-- ton of time.",
    "start": "378490",
    "end": "386590"
  },
  {
    "text": "The data sets are\ngrowing so fast. You're working for\nthe US government. You want to track terrorists\nusing image surveillance",
    "start": "386590",
    "end": "393960"
  },
  {
    "text": "from around the world,\ngrowing incredibly rapidly. Pick a problem. The data sets grow\nso quickly that even",
    "start": "393960",
    "end": "401100"
  },
  {
    "text": "if the computers\nspeed up, you still need to think about how to\ncome up with efficient ways to solve those problems.",
    "start": "401100",
    "end": "407680"
  },
  {
    "text": "So I want to suggest\nto you while sometimes simple solutions are great,\nthey are the easy ones to rate-- too write.",
    "start": "407680",
    "end": "413130"
  },
  {
    "text": "Sorry. At times, you need to\nbe more sophisticated. Therefore, we want\nto reason about",
    "start": "413130",
    "end": "419010"
  },
  {
    "text": "how do we measure\nefficiency and how do we relate algorithm design\nchoices to the cost that's",
    "start": "419010",
    "end": "425340"
  },
  {
    "text": "going to be associated with it? OK. Even when we do that,\nwe've got a choice to make.",
    "start": "425340",
    "end": "431710"
  },
  {
    "start": "427000",
    "end": "486000"
  },
  {
    "text": "Because we could talk about\nboth efficiency in terms of time or in terms of space,\nmeaning how much storage",
    "start": "431710",
    "end": "438700"
  },
  {
    "text": "do I have inside the computer? And the reason\nthat's relevant is there's actually in many cases\na trade-off between those two.",
    "start": "438700",
    "end": "445955"
  },
  {
    "text": "And you've actually seen an\nexample, which you may or may not remember. You may recall when we\nintroduced dictionaries,",
    "start": "445955",
    "end": "451810"
  },
  {
    "text": "I showed you a\nvariation where you could compute Fibonacci\nusing the dictionary to keep",
    "start": "451810",
    "end": "457060"
  },
  {
    "text": "track of intermediate values. And we'll see in next week\nthat it actually tremendously",
    "start": "457060",
    "end": "462130"
  },
  {
    "text": "reduces the time complexity. That's called a trade-off,\nin the sense that sometimes I can pre-compute\nportions of the answer,",
    "start": "462130",
    "end": "469710"
  },
  {
    "text": "store them away,\nso that when I've tried to a bigger\nversion of the answer I can just look\nup those portions.",
    "start": "469710",
    "end": "474910"
  },
  {
    "text": "So there's going to\nbe a trade-off here. We're going to\nfocus, for purposes of this lecture and the next\none, on time efficiency.",
    "start": "474910",
    "end": "481910"
  },
  {
    "text": "How much time is it going\nto take our algorithms to solve a problem?",
    "start": "481910",
    "end": "487060"
  },
  {
    "start": "486000",
    "end": "567000"
  },
  {
    "text": "OK. What are the challenges\nin doing that before we look at the actual tools? And in fact, this is going\nto lead into the tools.",
    "start": "487060",
    "end": "495229"
  },
  {
    "text": "The first one is even if\nI've decided on an algorithm, there are lots of ways\nto implement that.",
    "start": "495230",
    "end": "501930"
  },
  {
    "text": "A while loop and a for loop\nmight have slightly different behavior. I could choose to do it\nwith temporary variables",
    "start": "501930",
    "end": "508169"
  },
  {
    "text": "or using direct substitution. There's lots of little choices. So an algorithm\ncould be implemented many different ways.",
    "start": "508170",
    "end": "514210"
  },
  {
    "text": "How do I measure the actual\nefficiency of the algorithm? Second one is I might,\nfor a given problem,",
    "start": "514210",
    "end": "520729"
  },
  {
    "text": "have different\nchoices of algorithm. A recursive solution\nversus an iterative one.",
    "start": "520730",
    "end": "526490"
  },
  {
    "text": "Using divide and conquer\nversus straightforward search. We're going to see\nsome examples of that. So I've got to somehow\nseparate those pieces out.",
    "start": "526490",
    "end": "534320"
  },
  {
    "text": "And in particular, I'd\nlike to separate out the choice of implementation\nfrom the choice of algorithm.",
    "start": "534320",
    "end": "540110"
  },
  {
    "text": "I want to measure how\nhard is the algorithm, not can I come up\nwith a slightly more efficient way of coming\nup with an implementation.",
    "start": "540110",
    "end": "548649"
  },
  {
    "text": "So here are three\nways I might do it. And we're going to look at\neach one of them very briefly.",
    "start": "548650",
    "end": "553770"
  },
  {
    "text": "The obvious one is we could\nbe scientists-- time it. Write the code, run a bunch\nof test case, run a timer,",
    "start": "553770",
    "end": "560390"
  },
  {
    "text": "use that to try and come up with\na way of estimating efficiency. We'll see some\nchallenges with that.",
    "start": "560390",
    "end": "567610"
  },
  {
    "start": "567000",
    "end": "604000"
  },
  {
    "text": "Slightly more abstractly,\nwe could count operations. We could say here are the set\nof fundamental operations--",
    "start": "567610",
    "end": "575260"
  },
  {
    "text": "mathematical operations,\ncomparisons, setting values, retrieving values.",
    "start": "575260",
    "end": "580480"
  },
  {
    "text": "And simply say how many\nof those operations do I use in my\nalgorithm as a function of the size of the input?",
    "start": "580480",
    "end": "586930"
  },
  {
    "text": "And that could be used to\ngive us a sense of efficiency. We're going to see both of\nthose are flawed somewhat more",
    "start": "586930",
    "end": "593480"
  },
  {
    "text": "in the first case\nthan the second one. And so we're going to\nabstract that second one to a more abstract\nnotion of something",
    "start": "593480",
    "end": "599519"
  },
  {
    "text": "we call an order of growth. And I'll come back to that\nin a couple of minutes.",
    "start": "599520",
    "end": "604970"
  },
  {
    "start": "604000",
    "end": "621000"
  },
  {
    "text": "This is the one we're\ngoing to focus on. It's one that computer\nscientists use. It leads to what we\ncall complexity classes.",
    "start": "604970",
    "end": "611180"
  },
  {
    "text": "So order of growth\nor big O notation is a way of\nabstractly describing",
    "start": "611180",
    "end": "616190"
  },
  {
    "text": "the behavior of an\nalgorithm, and especially the equivalences of\ndifferent algorithms.",
    "start": "616190",
    "end": "621880"
  },
  {
    "start": "621000",
    "end": "755000"
  },
  {
    "text": "But let's look at those. Timing. Python provides a timer for you. You could import\nthe time module.",
    "start": "621880",
    "end": "628771"
  },
  {
    "text": "And then you can call, as\nyou can see right down here. I might have defined a really\nsimple little function--",
    "start": "628771",
    "end": "633820"
  },
  {
    "text": "convert Celsius to Fahrenheit. And in particular, I could\ninvoke the clock method",
    "start": "633820",
    "end": "639130"
  },
  {
    "text": "from the time module. And what that does\nis it gives me a number as the number of some\nfractions of a second currently",
    "start": "639130",
    "end": "646040"
  },
  {
    "text": "there. Having done that I\ncould call the function. And then I could call the clock\nagain, and take the difference",
    "start": "646040",
    "end": "652270"
  },
  {
    "text": "to tell me how much time\nit took to execute this. It's going to be a\ntiny amount of time. And then I could certainly\nprint out some statistics.",
    "start": "652270",
    "end": "660022"
  },
  {
    "text": "I could do that\nover a large number of runs-- different\nsizes of the input-- and come up with a sense of\nhow much time does it take.",
    "start": "660022",
    "end": "668470"
  },
  {
    "text": "Here's the problem with that. Not a bad idea. But again, my goal is\nto evaluate algorithms.",
    "start": "668470",
    "end": "675920"
  },
  {
    "text": "Do different algorithms\nhave different amounts of time associated with them? The good news is is that\nif I measure running time,",
    "start": "675920",
    "end": "682190"
  },
  {
    "text": "it will certainly vary\nas the algorithm changes. Just what I want to measure. Sorry.",
    "start": "682190",
    "end": "688640"
  },
  {
    "text": "But one of the problems\nis that it will also vary as a function of\nthe implementation.",
    "start": "688640",
    "end": "694330"
  },
  {
    "text": "Right? If I use a loop that's got a\ncouple of more steps inside of it in one algorithm\nthan another, it's going to change the time.",
    "start": "694330",
    "end": "700010"
  },
  {
    "text": "And I don't really care\nabout that difference. So I'm confounding or conflating\nimplementation influence",
    "start": "700010",
    "end": "705690"
  },
  {
    "text": "on time with algorithm\ninfluence on time. Not so good.",
    "start": "705690",
    "end": "711450"
  },
  {
    "text": "Worse, timing will\ndepend on the computer. My Mac here is pretty old.",
    "start": "711450",
    "end": "717139"
  },
  {
    "text": "Well, at least for\ncomputer versions. It's about five years old. I'm sure some of you have\nmuch more recent Macs",
    "start": "717139",
    "end": "722370"
  },
  {
    "text": "or other kinds of machines. Your speeds may be\ndifferent from mine. That's not going to help me\nin trying to measure this.",
    "start": "722370",
    "end": "728490"
  },
  {
    "text": "And even if I could measure\nit on small sized problems, it doesn't necessarily\npredict what",
    "start": "728490",
    "end": "733709"
  },
  {
    "text": "happens when I go to a\nreally large sized problems, because of issues\nlike the time it takes to get things\nout of memory",
    "start": "733710",
    "end": "740340"
  },
  {
    "text": "and bring them back\nin to the computer. So what it says is\nthat timing does",
    "start": "740340",
    "end": "746280"
  },
  {
    "text": "vary based on what\nI'd like to measure, but it varies on a\nlot of other factors. And it's really not\nall that valuable.",
    "start": "746280",
    "end": "753630"
  },
  {
    "text": "OK. Got rid of the first one. Let's abstract that.",
    "start": "753630",
    "end": "759320"
  },
  {
    "start": "755000",
    "end": "1138000"
  },
  {
    "text": "By abstract, I'm going to\nmake the following assumption. I'm going to identify a set\nof primitive operations.",
    "start": "759320",
    "end": "766026"
  },
  {
    "text": "Kind of get to\nsay what they are, but the obvious\none is to say what does the machine do\nfor me automatically.",
    "start": "766026",
    "end": "771449"
  },
  {
    "text": "That would be things\nlike arithmetic or mathematical operations,\nmultiplication, division,",
    "start": "771450",
    "end": "776940"
  },
  {
    "text": "subtraction,\ncomparisons, something equal to another thing,\nsomething greater than,",
    "start": "776940",
    "end": "782450"
  },
  {
    "text": "something less\nthan, assignments, set a name to a value,\nand retrieval from memory.",
    "start": "782450",
    "end": "789190"
  },
  {
    "text": "I'm going to assume that\nall of these operations take about the same amount\nof time inside my machine.",
    "start": "789190",
    "end": "796764"
  },
  {
    "text": "Nice thing here\nis then it doesn't matter which machine I'm using. I'm measuring how long\ndoes the algorithm take",
    "start": "796764",
    "end": "801870"
  },
  {
    "text": "by counting how many\noperations of this type are done inside\nof the algorithm.",
    "start": "801870",
    "end": "808130"
  },
  {
    "text": "And I'm going to use\nthat count to come up with a number of\noperations executed as a function of the\nsize of the input.",
    "start": "808130",
    "end": "813996"
  },
  {
    "text": "And if I'm lucky,\nthat'll give me a sense of what's the\nefficiency of the algorithm. So this one's pretty boring.",
    "start": "813996",
    "end": "820910"
  },
  {
    "text": "It's got three steps. Right? A multiplication, a division,\nand an addition-- four, if you count the return.",
    "start": "820910",
    "end": "826570"
  },
  {
    "text": "But if I had a little\nthing here that added up the integers from\n0 up to x, I've",
    "start": "826570",
    "end": "831651"
  },
  {
    "text": "got a little loop inside here. And I could count operations. So in this case, it's just,\nas I said, three operations.",
    "start": "831651",
    "end": "837550"
  },
  {
    "text": "Here, I've got one operation. I'm doing an assignment.",
    "start": "837550",
    "end": "843269"
  },
  {
    "text": "And then inside\nhere, in essence, there's one operation to set i\nto a value from that iterator.",
    "start": "843270",
    "end": "850630"
  },
  {
    "text": "Initially, it's going to be 0. And then it's going to be 1. And you get the idea. And here, that's\nactually two operations.",
    "start": "850630",
    "end": "859500"
  },
  {
    "text": "It's nice Python shorthand. But what is that operation? It says take the value of\ntotal and the value of i,",
    "start": "859500",
    "end": "864810"
  },
  {
    "text": "add them together--\nit's one operation-- and then set that value,\nor rather, set the name",
    "start": "864810",
    "end": "870029"
  },
  {
    "text": "total to that new value. So a second operation. So you can see in here,\nI've got three operations.",
    "start": "870030",
    "end": "876100"
  },
  {
    "text": "And what else do I have? Well, I'm going to go\nthrough this loop x times.",
    "start": "876100",
    "end": "881530"
  },
  {
    "text": "Right? I do it for i equals 0. And therefore, i\nequal 1, and so on. So I'm going to run\nthrough that loop x times.",
    "start": "881530",
    "end": "888480"
  },
  {
    "text": "And if I put that together, I\nget a nice little expression.",
    "start": "888480",
    "end": "894209"
  },
  {
    "text": "1 plus 3x. Actually, I probably\ncheated here. I shouldn't say cheated. I probably should have\ncounted the return",
    "start": "894210",
    "end": "900528"
  },
  {
    "text": "as one more operation, so that\nwould be 1 plus 3x plus 1, or 3x plus 2 operations.",
    "start": "900528",
    "end": "907480"
  },
  {
    "text": "Why should you care? It's a little closer\nto what I'd like. Because now I've\ngot an expression",
    "start": "907480",
    "end": "912760"
  },
  {
    "text": "that tells me something\nabout how much time is this going to take as I\nchange the size of the problem.",
    "start": "912760",
    "end": "920180"
  },
  {
    "text": "If x is equal to 10, it's\ngoing to take me 32 operations. If x is equal to\n100, 302 operations.",
    "start": "920180",
    "end": "925790"
  },
  {
    "text": "If x is equal to 1,000,\n3,002 operations. And if I wanted the\nactual time, I'd just multiply that by whatever\nthat constant amount of time",
    "start": "925790",
    "end": "933394"
  },
  {
    "text": "is for each operation. I've got a good\nestimate of that. Sounds pretty good.",
    "start": "933394",
    "end": "939230"
  },
  {
    "text": "Not quite what we\nwant, but it's close. So if I was counting operations,\nwhat could I say about it?",
    "start": "939230",
    "end": "946190"
  },
  {
    "text": "First of all, it certainly\ndepends on the algorithm. That's great.",
    "start": "946190",
    "end": "951250"
  },
  {
    "text": "Number of operations is\ngoing to directly relate to the algorithm I'm\ntrying to measure, which is what I'm after.",
    "start": "951250",
    "end": "957550"
  },
  {
    "text": "Unfortunately, it still\ndepends a little bit on the implementation.",
    "start": "957550",
    "end": "962932"
  },
  {
    "text": "Let me show you\nwhat I mean by that by backing up for a second. Suppose I were to change this\nfor loop to a while loop.",
    "start": "962932",
    "end": "972460"
  },
  {
    "text": "I'll set i equal to 0\noutside of the loop. And then while i is\nless than x plus 1,",
    "start": "972460",
    "end": "978930"
  },
  {
    "text": "I'll do the things\ninside of that. That would actually\nadd one more operation inside the loop, because I\nboth have to set the value of i",
    "start": "978930",
    "end": "988130"
  },
  {
    "text": "and I have to test\nthe value of i, as well as doing the other\noperations down here.",
    "start": "988130",
    "end": "993710"
  },
  {
    "text": "And so rather than getting 3x\nplus 1, I would get 4x plus 1.",
    "start": "993710",
    "end": "998760"
  },
  {
    "text": "Eh. As the government says,\nwhat's the difference between three and for\nwhen you're talking about really big numbers?",
    "start": "998760",
    "end": "1006199"
  },
  {
    "text": "Problem is in terms of\ncounting, it does depend. And I want to get rid\nof that in a second, so it still depends a little\nbit on the implementation.",
    "start": "1006200",
    "end": "1013370"
  },
  {
    "text": "I remind you, I\nwanted to measure impact of the algorithm. But the other good\nnews is the count",
    "start": "1013370",
    "end": "1019630"
  },
  {
    "text": "is independent of which\ncomputer I run on. As long as all my computers\ncome with the same set",
    "start": "1019630",
    "end": "1025180"
  },
  {
    "text": "of basic operations,\nI don't care what the time of my\ncomputer is versus yours to do those operations\non measuring",
    "start": "1025180",
    "end": "1031839"
  },
  {
    "text": "how much time it would take. And I should say,\nby the way, one of the reasons I want\nto do it is last to know",
    "start": "1031839",
    "end": "1037275"
  },
  {
    "text": "is it going to take 37.42\nfemtoseconds or not, but rather to say if\nthis algorithm has",
    "start": "1037275",
    "end": "1042560"
  },
  {
    "text": "a particular behavior, if I\ndouble the size of the input, does that double the\namount of time I need?",
    "start": "1042560",
    "end": "1048590"
  },
  {
    "text": "Does that quadruple the\namount of time I need? Does it increase it\nby a factor of 10? And here, what matters isn't\nthe speed of the computer.",
    "start": "1048590",
    "end": "1056669"
  },
  {
    "text": "It's the number of operations. The last one I'm not going\nto really worry about. But we'd have to\nreally think about what",
    "start": "1056670",
    "end": "1063600"
  },
  {
    "text": "are the operations\nwe want to count. I made an assumption\nthat the amount of time it takes to retrieve\nsomething from memory",
    "start": "1063600",
    "end": "1070440"
  },
  {
    "text": "is the same as\nthe amount of time it takes to do a\nnumerical computation. That may not be accurate.",
    "start": "1070440",
    "end": "1075780"
  },
  {
    "text": "But this one could\nprobably be dealt with by just agreeing on what\nare the common operations and then doing the measurement.",
    "start": "1075780",
    "end": "1082330"
  },
  {
    "text": "So this is closer. Excuse me. And certainly, that count\nvaries for different inputs.",
    "start": "1082330",
    "end": "1088840"
  },
  {
    "text": "And we can use it to come\nup with a relationship between the inputs\nand the count. And for the most part, it\nreflects the algorithm, not",
    "start": "1088840",
    "end": "1096639"
  },
  {
    "text": "the implementation. But it's still got that\nlast piece left there, so I need to get rid\nof the last piece.",
    "start": "1096640",
    "end": "1102710"
  },
  {
    "text": "So what can we say here? Timing and counting do evaluate\nor reflect implementations?",
    "start": "1102710",
    "end": "1107760"
  },
  {
    "text": "I don't want that. Timing also evaluates\nthe machines. What I want to do is just\nevaluate the algorithm.",
    "start": "1107760",
    "end": "1114790"
  },
  {
    "text": "And especially, I want to\nunderstand how does it scale? I'm going to say what I said\na few minutes ago again.",
    "start": "1114790",
    "end": "1121179"
  },
  {
    "text": "If I were to take\nan algorithm, and I say I know what its\ncomplexity is, my question is",
    "start": "1121180",
    "end": "1126910"
  },
  {
    "text": "if I double the\nsize of the input, what does that say to the speed? Because that's going to tell me\nsomething about the algorithm.",
    "start": "1126910",
    "end": "1132550"
  },
  {
    "text": "I want to say what\nhappens when I scale it? And in particular, I\nwant to relate that to the size of the input.",
    "start": "1132550",
    "end": "1138845"
  },
  {
    "text": "So here's what\nwe're going to do. We're going to introduce\norders of growth. It's a wonderful tool\nin computer science.",
    "start": "1138845",
    "end": "1143945"
  },
  {
    "text": "And what we're going to\nfocus on is that idea of counting operations. But we're not going to worry\nabout small variations,",
    "start": "1143946",
    "end": "1151100"
  },
  {
    "text": "whether it's three or four\nsteps inside of the loop. We're going to show that\nthat doesn't matter. And if you think about my\nstatement of does it double",
    "start": "1151100",
    "end": "1157580"
  },
  {
    "text": "in terms of size or speed\nor not-- or I'm sorry-- time or not, whether it goes from\nthree to six or four to eight,",
    "start": "1157580",
    "end": "1164090"
  },
  {
    "text": "it's still a doubling. So I don't care about\nthose pieces inside. I'm going to focus\non what happens",
    "start": "1164090",
    "end": "1169730"
  },
  {
    "text": "when the size of the problem\ngets arbitrarily large. I don't care about\ncounting things from 0",
    "start": "1169730",
    "end": "1175710"
  },
  {
    "text": "up to x when x is 10 or 20. What happens when\nit's a million? 100 million? What's the asymptotic\nbehavior of this?",
    "start": "1175710",
    "end": "1182610"
  },
  {
    "text": "And I want to relate\nthat time needed against the size of the\ninput, so I can make",
    "start": "1182610",
    "end": "1187649"
  },
  {
    "text": "that comparison I suggested. OK. So to do that, we've got\nto do a couple of things.",
    "start": "1187650",
    "end": "1193280"
  },
  {
    "text": "We have to decide what\nare we going to measure? And then we have to\nthink about how do we count without worrying about\nimplementation details.",
    "start": "1193280",
    "end": "1200750"
  },
  {
    "start": "1199000",
    "end": "1304000"
  },
  {
    "text": "So we're going to\nexpress efficiency in terms of size of input. And usually, this is\ngoing to be obvious.",
    "start": "1200750",
    "end": "1208190"
  },
  {
    "text": "If I've got a procedure that\ntakes one argument that's an integer, the\nsize of the integer",
    "start": "1208190",
    "end": "1214227"
  },
  {
    "text": "is the thing I'm going\nto measure things in. If I double the size\nof that integer, what happens to the computation?",
    "start": "1214227",
    "end": "1220270"
  },
  {
    "text": "If I'm computing\nsomething over a list, typically the length\nof the list is going to be the thing I'm\ngoing to use to characterize",
    "start": "1220270",
    "end": "1227680"
  },
  {
    "text": "the size of the problem. If I've got-- and we'll see this\nin a second-- a function that takes more than\none argument, I get",
    "start": "1227680",
    "end": "1234490"
  },
  {
    "text": "to decide what's the\nparameter I want to use. If I'm searching to see is\nthis element in that list, typically, I'm going\nto worry about what's",
    "start": "1234490",
    "end": "1240820"
  },
  {
    "text": "the size of the list, not\nwhat's the size of the element. But we have to specify what\nis that we're measuring.",
    "start": "1240820",
    "end": "1246135"
  },
  {
    "text": "And we're going to see examples\nof that in just a second. ",
    "start": "1246135",
    "end": "1251500"
  },
  {
    "text": "OK. So now, we start thinking\nabout that sounds great. Certainly fun computing\nsomething numeric.",
    "start": "1251500",
    "end": "1258929"
  },
  {
    "text": "Sum of integers from 0 up to x. It's kind of obvious x is\nthe size of my problem. How many steps does it take?",
    "start": "1258930",
    "end": "1264450"
  },
  {
    "text": "I can count that. But in some cases, the\namount of time the code takes is going to depend on the input.",
    "start": "1264450",
    "end": "1272030"
  },
  {
    "text": "So let's take this little\npiece of code here. And I do hope by now, even\nthough we flash up code,",
    "start": "1272030",
    "end": "1277381"
  },
  {
    "text": "you're already beginning to\nrecognize what does it do. Not the least of which, by\nthe clever name that we chose.",
    "start": "1277381",
    "end": "1283600"
  },
  {
    "text": "But this is obviously\njust a little function. It runs through a loop--\nsorry, a for loop that takes i",
    "start": "1283600",
    "end": "1289480"
  },
  {
    "text": "for each element in\na list L. And it's checking to see is i equal\nto the element I've provided.",
    "start": "1289480",
    "end": "1295522"
  },
  {
    "text": "And when it is, I'm\ngoing to return true. If I get all the way through\nthe loop and I didn't find it, I'm going to return false.",
    "start": "1295522",
    "end": "1300943"
  },
  {
    "text": "It's just saying is\ne in my input list L? How many steps is\nthis going to take?",
    "start": "1300943",
    "end": "1308778"
  },
  {
    "start": "1304000",
    "end": "1461000"
  },
  {
    "text": "Well, we can certainly count\nthe number of steps in the loop. Right? We've got a set i. We've got to compare i\nand potentially we've",
    "start": "1308779",
    "end": "1315140"
  },
  {
    "text": "got to return. So there's at most three\nsteps inside the loop. But depends on how\nlucky I'm feeling.",
    "start": "1315140",
    "end": "1323070"
  },
  {
    "text": "Right? If e happens to be the\nfirst element in the list-- it goes through the\nloop once-- I'm done.",
    "start": "1323070",
    "end": "1329039"
  },
  {
    "text": "Great. I'm not always that lucky. If e is not in the\nlist, then it will",
    "start": "1329040",
    "end": "1336419"
  },
  {
    "text": "go through this\nentire loop until it gets all the way through\nthe elements of L before saying false.",
    "start": "1336420",
    "end": "1343010"
  },
  {
    "text": "So this-- sort of a\nbest case scenario. This is the worst case scenario.",
    "start": "1343010",
    "end": "1349002"
  },
  {
    "text": "Again, if I'm assigned and say\nwell, let's run some trials. Let's do a bunch of examples\nand see how many steps does it go through.",
    "start": "1349002",
    "end": "1354500"
  },
  {
    "text": "And that would be\nthe average case. On average, I'm likely to\nlook at half the elements",
    "start": "1354500",
    "end": "1359600"
  },
  {
    "text": "in the list before I find it. Right? If I'm lucky, it's early on. If I'm not so lucky,\nit's later on.",
    "start": "1359600",
    "end": "1366070"
  },
  {
    "text": "Which one do I use? Well, we're going to\nfocus on this one.",
    "start": "1366070",
    "end": "1372210"
  },
  {
    "text": "Because that gives you an upper\nbound on the amount of time it's going to take. What happens in the\nworst case scenario?",
    "start": "1372210",
    "end": "1378900"
  },
  {
    "text": "We will find at times\nit's valuable to look at the average case to give\nus a rough sense of what's going to happen on average.",
    "start": "1378900",
    "end": "1385719"
  },
  {
    "text": "But usually, when we\ntalk about complexity, we're going to focus on\nthe worst case behavior.",
    "start": "1385719",
    "end": "1391839"
  },
  {
    "text": "So to say it in a little\nbit different way, let's go back to my example. Suppose you gave it a\nlist L of some length.",
    "start": "1391839",
    "end": "1397620"
  },
  {
    "text": "Length of L, you can call\nthat len if you like. Then my best case would be\nthe minimum running type.",
    "start": "1397620",
    "end": "1404095"
  },
  {
    "text": "And in this case, it will be for\nthe first element in the list. And notice in that case,\nthe number of steps I take",
    "start": "1404095",
    "end": "1410200"
  },
  {
    "text": "would be independent of the\nlength of L. That's great. It doesn't matter\nhow long the list is. If I'm always going to find\nthe first element, I'm done.",
    "start": "1410200",
    "end": "1417860"
  },
  {
    "text": "The average case\nwould be the average over the number of\nsteps I take, depending on the length of the list.",
    "start": "1417860",
    "end": "1423640"
  },
  {
    "text": "It's going to grow linearly\nwith the length of the list. It's a good practical measure. But the one I want to focus\non will be the worst case.",
    "start": "1423640",
    "end": "1432400"
  },
  {
    "text": "And here, the amount\nof time as we're going to see in a\ncouple of slides, is linear in the\nsize of the problem.",
    "start": "1432400",
    "end": "1439660"
  },
  {
    "text": "Meaning if I double the length\nof the list in the worst case, it's going to take\nme twice as much time",
    "start": "1439660",
    "end": "1447220"
  },
  {
    "text": "to find that it's not there. If I increase the length in\nthe list by a factor of 10, in the worst case,\nit's going to take me",
    "start": "1447220",
    "end": "1453490"
  },
  {
    "text": "10 times as much time as\nit did in the earlier case to find out that the\nproblem's not there. And that linear relationship\nis what I want to capture.",
    "start": "1453490",
    "end": "1463169"
  },
  {
    "start": "1461000",
    "end": "1565000"
  },
  {
    "text": "So I'm going to focus on that. What's the worst case behavior? And we're about ready to start\ntalking about orders of growth,",
    "start": "1463170",
    "end": "1469520"
  },
  {
    "text": "but here then is\nwhat orders of growth are going to provide for me. I want to evaluate\nefficiency, particularly when",
    "start": "1469520",
    "end": "1476390"
  },
  {
    "text": "the input is very large. What happens when I\nreally scale this up? I want to express the growth\nof the program's runtime",
    "start": "1476390",
    "end": "1484260"
  },
  {
    "text": "as that input grows. Not the exact runtime, but\nthat notion of if I doubled it,",
    "start": "1484260",
    "end": "1490830"
  },
  {
    "text": "how much longer does it take? What's the relationship\nbetween increasing the size of the input\nand the increase",
    "start": "1490830",
    "end": "1496620"
  },
  {
    "text": "in the amount of time\nit takes to solve it? We're going to put an\nupper bound on that growth.",
    "start": "1496620",
    "end": "1502889"
  },
  {
    "text": "And if you haven't\nseen this in math, it basically says I want to\ncome up with a description that is at least as big as--\nsorry-- as big as or bigger",
    "start": "1502889",
    "end": "1511850"
  },
  {
    "text": "than the actual amount of\ntime it's going to take. And I'm going to not\nworry about being precise.",
    "start": "1511850",
    "end": "1517475"
  },
  {
    "text": "We're going to talk about the\norder of rather than exact. I don't need to know to the\nfemtosecond how long this",
    "start": "1517475",
    "end": "1523340"
  },
  {
    "text": "is going to take, or to exactly\none operation how long this is going to take. But I want to say things like\nthis is going to grow linearly.",
    "start": "1523340",
    "end": "1531057"
  },
  {
    "text": "I double the size of the input,\nit doubles the amount of time. Or this is going to\ngrow quadratically. I double the size\nof the input, it's",
    "start": "1531057",
    "end": "1537750"
  },
  {
    "text": "going to take four times\nas much time to solve it. Or if I'm really lucky, this is\ngoing to have constant growth.",
    "start": "1537750",
    "end": "1543756"
  },
  {
    "text": "No matter how I\nchange the input, it's not going to\ntake any more time. To do that, we're going\nto look at the largest",
    "start": "1543756",
    "end": "1549820"
  },
  {
    "text": "factors in the runtime. Which piece of the program\ntakes the most time? And so in orders\nof growth, we are",
    "start": "1549820",
    "end": "1555280"
  },
  {
    "text": "going to look for\nas tight as possible an upper bound on the growth\nas a function of the size",
    "start": "1555280",
    "end": "1560650"
  },
  {
    "text": "of the input in the worst case. Nice long definition.",
    "start": "1560650",
    "end": "1567530"
  },
  {
    "start": "1565000",
    "end": "1605000"
  },
  {
    "text": "Almost ready to look\nat some examples. So here's the notation\nwe're going to use. It's called Big O notation.",
    "start": "1567530",
    "end": "1573419"
  },
  {
    "text": "I have to admit-- and\nJohn's not here today to remind me the history--\nI think it comes because we used Omicron-- God knows why.",
    "start": "1573419",
    "end": "1579529"
  },
  {
    "text": "Sounds like something\nfrom Futurama. But we used Omicron as\nour symbol to define this.",
    "start": "1579530",
    "end": "1586152"
  },
  {
    "text": "I'm having such good luck\nwith bad jokes today. You're not even wincing when\nI throw those things out. But that's OK.",
    "start": "1586152",
    "end": "1591740"
  },
  {
    "text": "It's called Big O notation. We're going to use it. We're going to describe\nthe rules of it. Is this the tradition of it? It describes the worst\ncase, because it's often",
    "start": "1591740",
    "end": "1599029"
  },
  {
    "text": "the bottleneck we're after. And as we said, it's\ngoing to express the growth of the program\nrelative to the input size.",
    "start": "1599030",
    "end": "1606468"
  },
  {
    "text": "OK. Let's see how we go\nfrom counting operations to getting to orders of growth.",
    "start": "1606468",
    "end": "1611789"
  },
  {
    "text": "Then we're going to define some\nexamples of ordered growth. And we're going to start\nlooking at algorithms. Here's a piece of code\nyou've seen before.",
    "start": "1611790",
    "end": "1618230"
  },
  {
    "text": "Again, hopefully, you\nrecognize or can see fairly quickly what it's doing. Computing factorials\nthe iterative way.",
    "start": "1618230",
    "end": "1624110"
  },
  {
    "text": "Basically, remember\nn factorial is n times n minus 1 times n\nminus 2 all the way down to 1. Hopefully, assuming n is\na non-negative integer.",
    "start": "1624110",
    "end": "1632360"
  },
  {
    "text": "Here, we're going to set up\nan internal variable called answer. And then we're just\ngoing to run over a loop.",
    "start": "1632360",
    "end": "1637909"
  },
  {
    "text": "As long as n is\nbigger than 1, we're going to multiply answer by\nn, store it back into answer, decrease n by 1.",
    "start": "1637910",
    "end": "1643730"
  },
  {
    "text": "We'll keep doing that until\nwe get out of the loop. And we're going\nto return answer.",
    "start": "1643730",
    "end": "1648850"
  },
  {
    "text": "We'll start by counting steps.  And that's, by the way, just to\nremind you that in fact, there",
    "start": "1648850",
    "end": "1655170"
  },
  {
    "text": "are two steps here. So what do I have? I've got one step up there. Set answer to one. I'm setting up n-- sorry,\nI'm not setting up n.",
    "start": "1655170",
    "end": "1663669"
  },
  {
    "text": "I'm going to test n. And then I'm going\nto do two steps here, because I got a multiply answer\nby n and then set it to answer.",
    "start": "1663670",
    "end": "1670270"
  },
  {
    "text": "And now similarly, we've\ngot two steps there because I'm subtracting 1 from\nn and then setting it to n.",
    "start": "1670270",
    "end": "1675700"
  },
  {
    "text": "So I've got 2 plus 4 plus\nthe test, which is 5.",
    "start": "1675700",
    "end": "1681480"
  },
  {
    "text": "I've got 1 outside here. I got 1 outside there. And I'm going to go\nthrough this loop n times.",
    "start": "1681480",
    "end": "1687740"
  },
  {
    "text": "So I would suggest that if\nI count the number of steps, it's 1 plus 5n plus 1.",
    "start": "1687740",
    "end": "1693310"
  },
  {
    "text": " Sort of what we did before.",
    "start": "1693310",
    "end": "1699450"
  },
  {
    "text": "5n plus 2 is the total number\nof steps that I use here. But now, I'm interested in\nwhat's the worst case behavior?",
    "start": "1699450",
    "end": "1706270"
  },
  {
    "text": "Well, in this case, it is\nthe worst case behavior because it doesn't have\ndecisions anywhere in here. But I just want to know what's\nthe asymptotic complexity?",
    "start": "1706270",
    "end": "1714760"
  },
  {
    "text": "And I'm going to\nsay-- oh, sorry-- that is to say I could do\nthis different ways. I could have done this\nwith two steps like that.",
    "start": "1714760",
    "end": "1721240"
  },
  {
    "text": "That would have made it\nnot just 1 plus 5n plus 1. It would have made\nit 1 plus 6n plus 1 because I've got an extra step.",
    "start": "1721240",
    "end": "1728630"
  },
  {
    "text": "I put that up because\nI want to remind you I don't care about\nimplementation differences.",
    "start": "1728630",
    "end": "1734610"
  },
  {
    "text": "And so I want to\nknow what captures both of those behaviors. And in Big O notation,\nI say that's order n.",
    "start": "1734610",
    "end": "1744539"
  },
  {
    "text": "Grows linearly. So I'm going to keep\ndoing this to you until you really do wince at me.",
    "start": "1744540",
    "end": "1749700"
  },
  {
    "text": "If I were to double\nthe size of n, whether I use this\nversion or that version,",
    "start": "1749700",
    "end": "1756059"
  },
  {
    "text": "the amount of time\nthe number of steps is basically going to double. Now you say, wait a minute.",
    "start": "1756060",
    "end": "1761470"
  },
  {
    "text": "5n plus 2-- if n\nis 10 that's 52. And if n is 20, that's 102.",
    "start": "1761470",
    "end": "1768620"
  },
  {
    "text": "That's not quite doubling it. And you're right. But remember, we\nreally care about this in the asymptotic case.",
    "start": "1768620",
    "end": "1773750"
  },
  {
    "text": "When n gets really big,\nthose extra little pieces don't matter. And so what we're\ngoing to do is we're",
    "start": "1773750",
    "end": "1779000"
  },
  {
    "text": "going to ignore the\nadditive constants and we're going to ignore the\nmultiplicative constants when",
    "start": "1779000",
    "end": "1785370"
  },
  {
    "text": "we talk about orders of growth. So what does o of n measure?",
    "start": "1785370",
    "end": "1791074"
  },
  {
    "text": "Well, we're just\nsummarizing here. We want to describe how much\ntime is needed to compute or how does the amount\nof time, rather,",
    "start": "1791074",
    "end": "1796420"
  },
  {
    "text": "needed to computer\nproblem growth as the size of the\nproblem itself grows. So we want an\nexpression that counts",
    "start": "1796420",
    "end": "1803590"
  },
  {
    "text": "that asymptotic behavior. And we're going to focus as a\nconsequence on the term that grows most rapidly.",
    "start": "1803590",
    "end": "1811190"
  },
  {
    "start": "1809000",
    "end": "2364000"
  },
  {
    "text": "So here are some examples. And I know if you're\nfollowing along, you can already see\nthe answers here. But we're going to\ndo this to simply",
    "start": "1811190",
    "end": "1817570"
  },
  {
    "text": "give you a sense of that. If I'm counting\noperations and I come up with an expression\nthat has n squared",
    "start": "1817570",
    "end": "1823809"
  },
  {
    "text": "plus 2n plus 2 operations,\nthat expression I say",
    "start": "1823810",
    "end": "1828880"
  },
  {
    "text": "is order n squared. The 2 and the 2n don't matter. And think about what happens\nif you make n really big.",
    "start": "1828880",
    "end": "1836450"
  },
  {
    "text": "n squared is much more\ndominant than the other terms. We say that's order n squared.",
    "start": "1836450",
    "end": "1842590"
  },
  {
    "text": "Even this expression we\nsay is order n squared. So in this case, for\nlower values of n,",
    "start": "1842590",
    "end": "1849690"
  },
  {
    "text": "this term is going to\nbe the big one in terms of number of steps. I have no idea how I wrote\nsuch an inefficient algorithm",
    "start": "1849690",
    "end": "1856080"
  },
  {
    "text": "that it took 100,000\nsteps to do something. But if I had that expression\nfor smaller values of n,",
    "start": "1856080",
    "end": "1861150"
  },
  {
    "text": "this matters a lot. This is a really big number. But when I'm interested\nin the growth,",
    "start": "1861150",
    "end": "1866310"
  },
  {
    "text": "then that's the\nterm that dominates. And you see the idea or\nbegin to see the idea here that when I have-- sorry,\nlet me go back there--",
    "start": "1866310",
    "end": "1873299"
  },
  {
    "text": "when I have expressions, if\nit's a polynomial expression, it's the highest order term.",
    "start": "1873300",
    "end": "1879240"
  },
  {
    "text": "It's the term that\ncaptures the complexity. Both of these are quadratic. This term is order n, because\nn grows faster than log of n.",
    "start": "1879240",
    "end": "1891710"
  },
  {
    "text": "This funky looking\nterm, even though that looks like the big\nnumber there and it is a big number, that expression\nwe see is order n log n.",
    "start": "1891710",
    "end": "1900529"
  },
  {
    "text": "Because again, if\nI plot out as how this changes as I\nmake n really large, this term eventually takes\nover as the dominant term.",
    "start": "1900530",
    "end": "1908780"
  },
  {
    "text": "What about that one? What's the big term there? How many people think\nit's n to the 30th?",
    "start": "1908780",
    "end": "1916529"
  },
  {
    "text": "Show of hands. How many people think\nit's 3 to the n? Show of hands.",
    "start": "1916530",
    "end": "1922049"
  },
  {
    "text": "Thank you. You're following along. You're also paying attention. How many people think I\nshould stop asking questions?",
    "start": "1922050",
    "end": "1927088"
  },
  {
    "text": "No show of hands. All right. But you're right. Exponentials are much\nworse than powers.",
    "start": "1927088",
    "end": "1934845"
  },
  {
    "text": "Even something\nlike this-- again, it's going to take a big value\nof n before it gets there, but it does get there.",
    "start": "1934845",
    "end": "1940300"
  },
  {
    "text": "And that, by the\nway, is important, because we're going to\nsee later on in the term that there are\nsome problems where it's believed that all of the\nsolutions are exponential.",
    "start": "1940300",
    "end": "1949410"
  },
  {
    "text": "And that's a pain,\nbecause it says it's always going to be\nexpensive to compute. So that's how we're going to\nreason about these things.",
    "start": "1949410",
    "end": "1956700"
  },
  {
    "text": "And to see it visually,\nhere are the differences between those different classes.",
    "start": "1956700",
    "end": "1962013"
  },
  {
    "text": "Something that's constant--\nthe amount of time doesn't change as I change\nthe size of the input.",
    "start": "1962014",
    "end": "1967210"
  },
  {
    "text": "Something that linear\ngrows as a straight line, as you would expect. Nice behavior. Quadratic starts to\ngrow more quickly.",
    "start": "1967210",
    "end": "1975140"
  },
  {
    "text": "The log is always\nbetter than linear because it slows down\nas we increase the size.",
    "start": "1975140",
    "end": "1981300"
  },
  {
    "text": "n log n or log linear\nis a funky term, but we're going to see it's\na very common complexity",
    "start": "1981300",
    "end": "1986770"
  },
  {
    "text": "for really valuable algorithms\nin computer science. And it has a nice behavior,\nsort of between the linear",
    "start": "1986770",
    "end": "1992840"
  },
  {
    "text": "and the quadratic. And exponential blows up. Just to remind you\nof that-- well,",
    "start": "1992840",
    "end": "1998420"
  },
  {
    "text": "sorry-- let me show\nyou how we're going to do the reasoning about this. So here's how we're\ngoing to reason about it.",
    "start": "1998420",
    "end": "2005114"
  },
  {
    "text": "We've already seen\nsome code where I started working through this\nprocess of counting operations.",
    "start": "2005114",
    "end": "2010250"
  },
  {
    "text": "Here are the tools\nI want you to use. Given a piece of\ncode, you're going to reason about each\nchunk of code separately.",
    "start": "2010250",
    "end": "2017659"
  },
  {
    "text": "If you've got sequential\npieces of code, then the rules are called\nthe law of addition",
    "start": "2017660",
    "end": "2023840"
  },
  {
    "text": "for order of growth is\nthat the order of growth of the combination\nis the combination",
    "start": "2023840",
    "end": "2030080"
  },
  {
    "text": "of the order of the growth. Say that quickly 10 times. But let's look at\nan example of that.",
    "start": "2030080",
    "end": "2036130"
  },
  {
    "text": "Here are two loops. You've already seen\nexamples of how to reason about those loops.",
    "start": "2036130",
    "end": "2041260"
  },
  {
    "text": "For this one, it's\nlinear in the size of n. I'm going to go through the loop\nn times doing a constant amount",
    "start": "2041260",
    "end": "2048190"
  },
  {
    "text": "of things each time around. But what I just\nshowed, that's order n. This one-- again, I'm doing\njust a constant number of things",
    "start": "2048190",
    "end": "2055270"
  },
  {
    "text": "inside the loop-- but\nnotice, that it's n squared.",
    "start": "2055270",
    "end": "2060379"
  },
  {
    "text": "So that's order n squared. n times n. The combination is I have to do\nthis work and then that work.",
    "start": "2060380",
    "end": "2067719"
  },
  {
    "text": "So I write that as saying that\nis order of n plus order of n squared.",
    "start": "2067719",
    "end": "2073260"
  },
  {
    "text": "But by this up here,\nthat is the same as saying what's the order of\ngrowth of n plus n squared.",
    "start": "2073260",
    "end": "2079179"
  },
  {
    "text": "Oh yeah. We just saw that. Says it's n squared. So addition or the\nlaw of addition",
    "start": "2079179",
    "end": "2084794"
  },
  {
    "text": "let's be reasonable\nabout the fact that this will be an\norder n squared algorithm.",
    "start": "2084794",
    "end": "2090138"
  },
  {
    "text": "Second one I'm going\nto use is called the law of multiplication. And this says when I have nested\nstatements or nested loops,",
    "start": "2090139",
    "end": "2101260"
  },
  {
    "text": "I need to reason about those. And in that case, what I want\nto argue-- or not argue-- state",
    "start": "2101260",
    "end": "2106410"
  },
  {
    "text": "is that the order of growth\nhere is a multiplication. That is, when I\nhave nested things, I figure out what's\nthe order of growth",
    "start": "2106410",
    "end": "2112890"
  },
  {
    "text": "of the inner part, what's the\norder growth of the outer part, and I'm going to multiply--\nbleh, try again-- I'm",
    "start": "2112890",
    "end": "2118890"
  },
  {
    "text": "going to multiply together\nthose orders of growth, get the overall order of growth.",
    "start": "2118890",
    "end": "2124150"
  },
  {
    "text": "If you think about\nit, it makes sense. Look at my little example here. It's a trivial little example. But I'm looping for\ni from 0 up to n.",
    "start": "2124150",
    "end": "2133109"
  },
  {
    "text": "For every value of i, I'm\nlooping for j from 0 up to n. And then I'm printing\nout A. I'm the Fonz.",
    "start": "2133110",
    "end": "2139250"
  },
  {
    "text": "I'm saying heyyy a lot. Oh, come on. At least throw something,\nI mean, when it's that bad.",
    "start": "2139250",
    "end": "2144578"
  },
  {
    "text": "Right? Want to make sure\nyou're still awake. OK. You get the idea. But what I want to show you here\nis notice the order of growth.",
    "start": "2144578",
    "end": "2152359"
  },
  {
    "text": "That's order n. Right? I'm doing that n times. But I'm doing that\nfor each value of i.",
    "start": "2152360",
    "end": "2159650"
  },
  {
    "text": "The outer piece here\nloops also n times. For each value of i, I'm\ndoing order n things.",
    "start": "2159650",
    "end": "2165430"
  },
  {
    "text": "So I'm doing order of n\ntimes order of n steps.",
    "start": "2165430",
    "end": "2170770"
  },
  {
    "text": "And by that law, that is\nthe same order of n times n or n squared.",
    "start": "2170770",
    "end": "2176099"
  },
  {
    "text": "So this is a\nquadratic expression. You're going to see that a lot.",
    "start": "2176100",
    "end": "2181140"
  },
  {
    "text": "Nested loops typically\nhave that kind of behavior. Not always, but typically\nhave that kind of behavior.",
    "start": "2181140",
    "end": "2189117"
  },
  {
    "text": "So what you're going\nto see is there's a set of complexity classes. And we're about to\nstart filling these in.",
    "start": "2189117",
    "end": "2194960"
  },
  {
    "text": "Order one is constant. Says amount of time it\ntakes doesn't depend on the size of the problem.",
    "start": "2194960",
    "end": "2202170"
  },
  {
    "text": "These are really\nrare that you get. They tend to be trivial pieces\nof code, but they're valuable.",
    "start": "2202170",
    "end": "2207330"
  },
  {
    "text": "Log n reflects\nlogarithmic runtime. You can sort of read\nthe rest of them. These are the kinds of things\nthat we're going to deal with.",
    "start": "2207330",
    "end": "2214390"
  },
  {
    "text": "We are going to see examples\nhere, here, and here. And later on, we're going\nto come back and see",
    "start": "2214390",
    "end": "2220410"
  },
  {
    "text": "these, which are really\nnice examples to have. Just to remind you why\nthese orders of growth",
    "start": "2220410",
    "end": "2225732"
  },
  {
    "text": "matter-- sorry, that's\njust reminding you what they look like. We've already done that.",
    "start": "2225732",
    "end": "2231040"
  },
  {
    "text": "Here is the difference\nbetween constant log, linear, log linear\nsquared, and exponential.",
    "start": "2231040",
    "end": "2237940"
  },
  {
    "text": "When n is equal to 10,\n100, 1,000 or a million.",
    "start": "2237940",
    "end": "2243520"
  },
  {
    "text": "I know you know this, but I want\nto drive home the difference. Something that's constant\nis wonderful, no matter",
    "start": "2243520",
    "end": "2249190"
  },
  {
    "text": "how big the problem is. Takes the same amount of time. Something that is\nlog is pretty nice.",
    "start": "2249190",
    "end": "2254710"
  },
  {
    "text": "Increase the size of\nthe problem by 10, it increases by a factor of 2.",
    "start": "2254710",
    "end": "2259870"
  },
  {
    "text": "From another 10,\nit only increases by a factor of another 50%. It only increases a little bit.",
    "start": "2259870",
    "end": "2264910"
  },
  {
    "text": "That's a gorgeous kind\nof problem to have. Linear-- not so bad. I go from 10 to 100\nto 1,000 to a million.",
    "start": "2264910",
    "end": "2271570"
  },
  {
    "text": "You can see log linear\nis not bad either. Right? A factor of 10 increase here\nis only a factor of 20 increase",
    "start": "2271570",
    "end": "2278600"
  },
  {
    "text": "there. A factor of 10 increase there\nis only a factor of 30 increase there.",
    "start": "2278600",
    "end": "2284050"
  },
  {
    "text": "So log linear doesn't\ngrow that badly. But look at the difference\nbetween n squared and 2",
    "start": "2284050",
    "end": "2289890"
  },
  {
    "text": "to the n. I actually did think\nof printing this out. By the way, Python\nwill compute this.",
    "start": "2289890",
    "end": "2295320"
  },
  {
    "text": "But it was taken pages\nand pages and pages. I didn't want to do it. You get the point.",
    "start": "2295320",
    "end": "2300420"
  },
  {
    "text": "Exponential-- always much worse. Always much worse than\na quadratic or a power",
    "start": "2300420",
    "end": "2306780"
  },
  {
    "text": "expression. And you really see\nthe difference here. All right.",
    "start": "2306780",
    "end": "2312600"
  },
  {
    "text": "The reason I put this up is\nas you design algorithms, your goal is to be as high up\nin this listing as you can.",
    "start": "2312600",
    "end": "2321369"
  },
  {
    "text": "The closer you are to\nthe top of this list, the better off you are. If you have a solution\nthat's down here,",
    "start": "2321369",
    "end": "2327900"
  },
  {
    "text": "bring a sleeping\nbag and some coffee. You're going to be\nthere for a while. Right? You really want to try\nand avoid that if you can.",
    "start": "2327900",
    "end": "2334230"
  },
  {
    "text": "So now what we want to do,\nboth for the rest of today in the last 15 minutes\nand then next week,",
    "start": "2334230",
    "end": "2341900"
  },
  {
    "text": "is start identifying\ncommon algorithms and what is their complexity.",
    "start": "2341900",
    "end": "2347991"
  },
  {
    "text": "As I said to you way\nback at the beginning of this lecture, which\nI'm sure you remember, it's not just to be able\nto identify the complexity.",
    "start": "2347991",
    "end": "2353760"
  },
  {
    "text": "I want you to see\nhow choices algorithm design are going to\nlead to particular kinds",
    "start": "2353760",
    "end": "2360120"
  },
  {
    "text": "of consequences in terms of\nwhat this is going to cost you. That's your goal here. All right.",
    "start": "2360120",
    "end": "2366110"
  },
  {
    "start": "2364000",
    "end": "2516000"
  },
  {
    "text": "We've already seen\nsome examples. I'm going to do one more here. But simple iterative\nloop algorithms are typically linear.",
    "start": "2366110",
    "end": "2373760"
  },
  {
    "text": "Here's another\nversion of searching. Imagine I'll have\nan unsorted list. Arbitrary order.",
    "start": "2373760",
    "end": "2379340"
  },
  {
    "text": "Here's another way of\ndoing the linear search. Looks a little bit faster. I'm going to set a flag\ninitially to false.",
    "start": "2379340",
    "end": "2386810"
  },
  {
    "text": "And then I'm going\nto loop for i from 0 up to the length of L.\nI'm going to use that",
    "start": "2386810",
    "end": "2392329"
  },
  {
    "text": "to index into the list, pull\nout each element of the list in turn, and check to see is\nit the thing I'm looking for.",
    "start": "2392330",
    "end": "2398510"
  },
  {
    "text": "As soon as I find it, I'm\ngoing to send-- sorry-- set the flag to true.",
    "start": "2398510",
    "end": "2404650"
  },
  {
    "text": "OK? So that when I return out of the\nloop, I can just return found. And if I found it to be\ntrue, if I never found it,",
    "start": "2404650",
    "end": "2411200"
  },
  {
    "text": "found will still be\nfalse and I'll return it. We could count the\noperations here,",
    "start": "2411200",
    "end": "2416320"
  },
  {
    "text": "but you've already seen\nexamples of doing that. This is linear,\nbecause I'm looping",
    "start": "2416320",
    "end": "2423270"
  },
  {
    "text": "n times if n is the length\nof the list over there. And the number of things I do\ninside the loop is constant.",
    "start": "2423270",
    "end": "2430080"
  },
  {
    "text": "Now, you might\nsay, wait a minute. This is really brain\ndamaged, or if you're being more politically correct,\ncomputationally challenged.",
    "start": "2430080",
    "end": "2437391"
  },
  {
    "text": "OK? In the sense of\nonce I've found it, why bother looking at\nthe rest of the list?",
    "start": "2437391",
    "end": "2443109"
  },
  {
    "text": "So in fact, I could just\nreturn true right here.",
    "start": "2443110",
    "end": "2448160"
  },
  {
    "text": "Does that change the order\nof growth of this algorithm? No.",
    "start": "2448160",
    "end": "2454170"
  },
  {
    "text": "Changes the average time. I'm going to stop faster. But remember the order\nof growth captures",
    "start": "2454170",
    "end": "2460260"
  },
  {
    "text": "what's the worst case behavior. And the worst case\nbehavior is the elements not in the list I got\nto look at everything.",
    "start": "2460260",
    "end": "2465850"
  },
  {
    "text": "So this will be an example\nof a linear algorithm. And you can see, I'm\nlooping length of L times",
    "start": "2465850",
    "end": "2472740"
  },
  {
    "text": "over the loop inside of there. It's taking the\norder one to test it. So it's order n.",
    "start": "2472740",
    "end": "2479835"
  },
  {
    "text": "And if I were to actually count\nit, there's the expression. It's 1 plus 4n plus 1, which\nis 4n plus 2, which by my rule",
    "start": "2479835",
    "end": "2485910"
  },
  {
    "text": "says I don't care about\nthe additive constant. I only care about\nthe dominant term. And I don't care about that\nmultiplicative constant.",
    "start": "2485910",
    "end": "2492650"
  },
  {
    "text": "It's order n. An example of a template\nyou're going to see a lot.",
    "start": "2492650",
    "end": "2498790"
  },
  {
    "text": "Now, order n where n is\nthe length of the list and I need to specify that.",
    "start": "2498790",
    "end": "2504430"
  },
  {
    "text": "That's the thing I'm after. If you think about\nit, I cheated. Sorry-- I never cheat.",
    "start": "2504430",
    "end": "2510020"
  },
  {
    "text": "I'm tenure. I never cheat. I just mislead you badly. ",
    "start": "2510020",
    "end": "2515299"
  },
  {
    "text": "Not a chance. How do I know that accessing\nan element of the list",
    "start": "2515300",
    "end": "2522250"
  },
  {
    "start": "2516000",
    "end": "2539000"
  },
  {
    "text": "takes constant time? I made an assumption about that. And this is a reasonable\nthing to ask about-- both",
    "start": "2522250",
    "end": "2529450"
  },
  {
    "text": "what am I assuming about\nthe constant operations and how do I know\nthat's actually true? Well, it gives me a chance\nto point out something",
    "start": "2529450",
    "end": "2536290"
  },
  {
    "text": "that Python does\nvery effectively. Not all languages do. But think about a list. Suppose I've got a list\nthat's all integers.",
    "start": "2536290",
    "end": "2542710"
  },
  {
    "start": "2539000",
    "end": "2584000"
  },
  {
    "text": "I'm going to need\nsome amount of memory to represent each integer. So if a byte is 8 bits, I might\nreserve 4 bytes or 32 bits",
    "start": "2542710",
    "end": "2550599"
  },
  {
    "text": "to cover any reasonable\nsized integer. When I represent a list, I\ncould simply have each of them",
    "start": "2550600",
    "end": "2556450"
  },
  {
    "text": "in turn. So what do I need to know? I'm going to allocate\nout a particular length-- say 4 bytes, 32 bits, 32\nsequential elements of memory",
    "start": "2556450",
    "end": "2564940"
  },
  {
    "text": "to represent each integer. And then I just\nneed to know where's the first part of\nthe list, what's",
    "start": "2564940",
    "end": "2571210"
  },
  {
    "text": "the address and memory of\nthe first part of the list. And to get to the\ni-th element, I take that base plus 4 bytes times i.",
    "start": "2571210",
    "end": "2579930"
  },
  {
    "text": "And I can go straight\nto this point without having to\nwalk down the list. That's nice.",
    "start": "2579930",
    "end": "2585750"
  },
  {
    "start": "2584000",
    "end": "2846000"
  },
  {
    "text": "OK? It says, in fact, I can get\nto any element of memory-- I'm sorry-- any element of\nthe list in constant time.",
    "start": "2585750",
    "end": "2594921"
  },
  {
    "text": "OK. Now, what if the things I'm\nrepresenting aren't integers? They're arbitrary\nthings and they take up a big chunk of space.",
    "start": "2594921",
    "end": "2601820"
  },
  {
    "text": "Well, if the list\nis heterogeneous, we use a nice technique\ncalled indirection. And that simply says\nwe, again, have a list.",
    "start": "2601820",
    "end": "2608930"
  },
  {
    "text": "We know the address\nof this point. We know the address there for\nthe i-th element of this list. But inside of here, we don't\nstore the actual value.",
    "start": "2608930",
    "end": "2618005"
  },
  {
    "text": "We store a pointer to\nwhere it is in memory. Just what these\nthings are indicating. So they can be arbitrary size.",
    "start": "2618005",
    "end": "2624740"
  },
  {
    "text": "But again, I can get to any\nelement in constant time, which is exactly what I want. So that's great.",
    "start": "2624740",
    "end": "2632550"
  },
  {
    "text": "OK. Now, suppose I tell you\nthat the list is sorted. It's in increasing order.",
    "start": "2632550",
    "end": "2637750"
  },
  {
    "text": "I can be more clever\nabout my algorithm. Because now, as I\nloop through it, I can say if it's the thing I'm\nlooking for, just return true.",
    "start": "2637750",
    "end": "2645680"
  },
  {
    "text": "If the element of the list\nis bigger than the thing I'm looking for, I'm done.",
    "start": "2645680",
    "end": "2650795"
  },
  {
    "text": "I don't need to look at\nthe rest of the list, because I know it can't be there\nbecause it's ordered or sorted. I can just return false.",
    "start": "2650795",
    "end": "2656770"
  },
  {
    "text": "If I get all the way through\nthe loop, I can return false. So I only have to look\nuntil I get to a point where the thing in\nthe list is bigger",
    "start": "2656770",
    "end": "2663151"
  },
  {
    "text": "than what I'm looking for. It's the order of growth here. Again, the average time\nbehavior will be faster.",
    "start": "2663151",
    "end": "2671670"
  },
  {
    "text": "But the order of\ngrowth is I've got to do order of\nlength of the list to go through the loop,\norder of one to do the test,",
    "start": "2671670",
    "end": "2678720"
  },
  {
    "text": "and in the worst\ncase, again, I still have to go through\nthe entire list. So the order of growth\nhere is the same.",
    "start": "2678720",
    "end": "2684420"
  },
  {
    "text": "It is, again, linear in\nthe length of the list, even though the runtime\nwill be different depending",
    "start": "2684420",
    "end": "2689950"
  },
  {
    "text": "whether it's sorted or not. I want you to hold\non to that idea, because we're going to come\nback to the sorted list",
    "start": "2689950",
    "end": "2696359"
  },
  {
    "text": "next week to see\nthat there actually are much more efficient ways\nto use the fact that a list is sorted to do the search.",
    "start": "2696360",
    "end": "2702960"
  },
  {
    "text": "But both of these versions\nsame order growth, order n. OK.",
    "start": "2702960",
    "end": "2708820"
  },
  {
    "text": "So lurching through a\nlist-- right, sorry-- searching through\na list in sequence is linear because of that loop.",
    "start": "2708820",
    "end": "2716110"
  },
  {
    "text": "There are other things\nthat have a similar flavor. And I'm going to\ndo these quickly to get to the last example.",
    "start": "2716110",
    "end": "2721369"
  },
  {
    "text": "Imagine I give you a string of\ncharacters that are all soon to be composed of\ndecimal digits.",
    "start": "2721370",
    "end": "2726760"
  },
  {
    "text": "I just want to add them all up. This is also linear,\nbecause there's the loop. I'm going to loop over the\ncharacters in the string.",
    "start": "2726760",
    "end": "2733630"
  },
  {
    "text": "I'm going to cast\nthem into integers, add them in, and\nreturn the value. This is linear in the\nlength of the input s.",
    "start": "2733630",
    "end": "2743730"
  },
  {
    "text": "Notice the pattern. That loop-- that\nin-iterative loop-- it's got that linear\nbehavior, because inside of the loop\nconstant number of things",
    "start": "2743730",
    "end": "2749943"
  },
  {
    "text": "that I'm executing. We already looked at fact iter. Same idea.",
    "start": "2749943",
    "end": "2755569"
  },
  {
    "text": "There's the loop I'm going to\ndo that n times inside the loop a constant amount of things. So looping around it is order n.",
    "start": "2755569",
    "end": "2762779"
  },
  {
    "text": "There's the actual expression. But again, the pattern\nI want you to see here is that this is order n.",
    "start": "2762780",
    "end": "2769619"
  },
  {
    "text": "OK. Last example for today. I know you're all secretly\nlooking at your watches.",
    "start": "2769620",
    "end": "2777470"
  },
  {
    "text": "Standard loops,\ntypically linear. What about nested loops? What about loops that\nhave loops inside of them?",
    "start": "2777470",
    "end": "2784310"
  },
  {
    "text": "How long do they take? I want to show you a\ncouple of examples. And mostly, I want to show\nyou how to reason about them.",
    "start": "2784310",
    "end": "2792820"
  },
  {
    "text": "Suppose I gave you two\nlists composed of integers, and I want to know\nis the first list",
    "start": "2792820",
    "end": "2798010"
  },
  {
    "text": "a subset of the second list. Codes in the handbook, by the\nway, if you want to go run it.",
    "start": "2798010",
    "end": "2803630"
  },
  {
    "text": "But basically, the\nsimple idea would be I'm going to loop over every\nelement in the first list.",
    "start": "2803630",
    "end": "2808965"
  },
  {
    "text": "And for each one\nof those, I want to say is it in the second list? So I'll use the\nsame kind of trick. I'll set up a flag\nthat's initially false.",
    "start": "2808965",
    "end": "2816310"
  },
  {
    "text": "And then I'm going to loop over\neverything in the second list. And if that thing is equal\nto the thing I'm looking for,",
    "start": "2816310",
    "end": "2823350"
  },
  {
    "text": "I'll set match to true and\nbreak out of the loop-- the inner loop. If I get all the way\nthrough the second list",
    "start": "2823350",
    "end": "2829120"
  },
  {
    "text": "and I haven't\nfound the thing I'm looking for, when I break\nout or come out of this loop,",
    "start": "2829120",
    "end": "2834160"
  },
  {
    "text": "matched in that case, will still\nbe false and all return false. But if up here, I found\nsomething that matched,",
    "start": "2834160",
    "end": "2840549"
  },
  {
    "text": "match would be true. I break out of it. It's not false. Therefore, a return true.",
    "start": "2840550",
    "end": "2847664"
  },
  {
    "start": "2846000",
    "end": "3085000"
  },
  {
    "text": "I want you look at the code. You should be able\nto look at this and realize what it's doing. For each element\nin the first list,",
    "start": "2847664",
    "end": "2853460"
  },
  {
    "text": "I walk through the second list\nto say is that element there. And if it is, I return true. If that's true for all of the\nelements in the first list,",
    "start": "2853460",
    "end": "2860150"
  },
  {
    "text": "I return true overall. OK. Order of growth. ",
    "start": "2860150",
    "end": "2867789"
  },
  {
    "text": "Outer loop-- this loop\nI'm going to execute the length of L1 times.",
    "start": "2867790",
    "end": "2873190"
  },
  {
    "text": "Right? I've got to walk\ndown that first list. If I call that n, it's\ngoing to take that n times over the outer loop.",
    "start": "2873190",
    "end": "2880760"
  },
  {
    "text": "But what about n here? All of the earlier examples,\nwe had a constant number",
    "start": "2880760",
    "end": "2886300"
  },
  {
    "text": "of operations\ninside of the loop. Here, we don't. We've got another loop that's\nlooping over in principle",
    "start": "2886300",
    "end": "2893980"
  },
  {
    "text": "all the elements\nof the second list. So in each iteration is going\nto execute the inner loop up",
    "start": "2893980",
    "end": "2900310"
  },
  {
    "text": "to length of L2 times, where\ninside of this inner loop there is a constant\nnumber of operations.",
    "start": "2900310",
    "end": "2907910"
  },
  {
    "text": "Ah, nice. That's the multiplicative\nlaw of orders of growth. It says if this is\norder length L1.",
    "start": "2907910",
    "end": "2915309"
  },
  {
    "text": "And we're going to\ndo that then order length of L2 times, the\norder of growth is a product.",
    "start": "2915309",
    "end": "2921941"
  },
  {
    "text": "And the most common or\nthe worst case behavior is going to be when the\nlists are of the same length",
    "start": "2921941",
    "end": "2927040"
  },
  {
    "text": "and none of the elements\nof L1 are in L2. And in that case, we're\ngoing to get something that's",
    "start": "2927040",
    "end": "2932680"
  },
  {
    "text": "order n squared\nquadratic, where n is the length of the list in\nterms of number of operations.",
    "start": "2932680",
    "end": "2940900"
  },
  {
    "text": "I don't really\ncare about subsets. I've got one more example. We could similarly\ndo intersection.",
    "start": "2940900",
    "end": "2947730"
  },
  {
    "text": "If I wanted to say what is\nthe intersection of two lists? What elements are on\nboth list 1 and list 2?",
    "start": "2947730",
    "end": "2953380"
  },
  {
    "text": "Same basic idea. Here, I've got a\npair of nested loops. I'm looping over\neverything in L1.",
    "start": "2953380",
    "end": "2959140"
  },
  {
    "text": "For that, I'm looping\nover everything in L2. And if they are the same,\nI'm going to put that",
    "start": "2959140",
    "end": "2964930"
  },
  {
    "text": "into a temporary variable. Once I've done that, I\nneed to clean things up. So I'm going to write\nanother loop that",
    "start": "2964930",
    "end": "2971220"
  },
  {
    "text": "sets up an internal variable\nand then runs through everything in the list I\naccumulated, making sure",
    "start": "2971220",
    "end": "2976410"
  },
  {
    "text": "that it's not already there. And as long as it isn't, I'm\ngoing to put it in the result and return it.",
    "start": "2976410",
    "end": "2982580"
  },
  {
    "text": "I did it quickly. You can look through it. You'll see it does\nthe right thing. What I want it to see is\nwhat's the order of growth.",
    "start": "2982580",
    "end": "2988140"
  },
  {
    "text": "I need to look at this piece. Then I need to\nlook at that piece. This piece-- well, it's order\nlength L1 to do the outer loop.",
    "start": "2988140",
    "end": "2998240"
  },
  {
    "text": "For each version of\ne1, I've got to do order of length L2 things\ninside to accumulate them.",
    "start": "2998240",
    "end": "3005080"
  },
  {
    "text": "So that's quadratic. What about the second loop?",
    "start": "3005080",
    "end": "3010410"
  },
  {
    "text": "Well, this one is a\nlittle more subtle. I'm only looping over temp,\nwhich is at most going",
    "start": "3010410",
    "end": "3017430"
  },
  {
    "text": "to be length L1 long. But I'm checking to see\nis that element in a list?",
    "start": "3017430",
    "end": "3027730"
  },
  {
    "text": "And it depends on\nthe implementation. But typically, that's\ngoing to take up to the length of\nthe list to do it. I got to look to see\nis it there or not.",
    "start": "3027730",
    "end": "3034590"
  },
  {
    "text": "And so that inner\nloop if we assume the lists are the\nsame size is also going to take potentially\nup to length L1 steps.",
    "start": "3034590",
    "end": "3042280"
  },
  {
    "text": "And so this is,\nagain, quadratic. It's actually two\nquadratics-- one for the first nested loop,\none for the second one,",
    "start": "3042280",
    "end": "3049560"
  },
  {
    "text": "because there's an implicit\nsecond loop right there. But overall, it's quadratic.",
    "start": "3049560",
    "end": "3056319"
  },
  {
    "text": "So what you see\nin general-- this is a really dumb way\nto compute n squared.",
    "start": "3056320",
    "end": "3061430"
  },
  {
    "text": "When you have nested\nloops, typically, it's going to be quadratic behavior. And so what we've\ndone then is we've",
    "start": "3061430",
    "end": "3067760"
  },
  {
    "text": "started to build up examples. We've now seen simple looping\nmechanisms, simple iterative",
    "start": "3067760",
    "end": "3072800"
  },
  {
    "text": "mechanisms, nested loops. They tend to naturally give\nrise to linear and quadratic",
    "start": "3072800",
    "end": "3077869"
  },
  {
    "text": "complexity. And next time, we're\ngoing to start looking at more interesting classes. And we'll see you next time.",
    "start": "3077870",
    "end": "3085152"
  },
  {
    "start": "3085153",
    "end": "3085652"
  }
]