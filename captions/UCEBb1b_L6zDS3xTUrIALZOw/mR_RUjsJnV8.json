[
  {
    "start": "0",
    "end": "37000"
  },
  {
    "text": "So, there is a lot of Today we're going to not talk\nabout sorting. This is an exciting new\ndevelopment.\nWe know that what we're looking",
    "start": "7000",
    "end": "14000"
  },
  {
    "text": "We're going to talk about\nanother problem, a related problem,\nbut a different problem.",
    "start": "14000",
    "end": "23000"
  },
  {
    "start": "23000",
    "end": "35000"
  },
  {
    "text": "We're going to talk about\nanother problem that we would like to solve in linear time.\nLast class we talked about we",
    "start": "35000",
    "end": "41000"
  },
  {
    "start": "37000",
    "end": "213000"
  },
  {
    "text": "could do sorting in linear time.\nTo do that we needed some additional assumptions.\nToday we're going to look at a",
    "start": "41000",
    "end": "47000"
  },
  {
    "text": "problem that really only needs\nlinear time, even though at first glance it might look like\nit requires sorting.",
    "start": "47000",
    "end": "54000"
  },
  {
    "text": "So this is going to be an\neasier problem. The problem is I give you a\nbunch of numbers.",
    "start": "54000",
    "end": "60000"
  },
  {
    "text": "Let's call them elements.\nAnd they are in some array,",
    "start": "60000",
    "end": "66000"
  },
  {
    "text": "let's say.\nAnd they're in no particular order, so unsorted.\nI want to find the kth smallest",
    "start": "66000",
    "end": "78000"
  },
  {
    "text": "element. ",
    "start": "78000",
    "end": "86000"
  },
  {
    "text": "This is called the element of\nrank k. ",
    "start": "86000",
    "end": "97000"
  },
  {
    "text": "In other words,\nI have this list of numbers which is unsorted.\nAnd, if I were to sort it,",
    "start": "97000",
    "end": "103000"
  },
  {
    "text": "I would like to know what the\nkth element is. But I'm not allowed to sort it.\nOne solution to this problem,",
    "start": "103000",
    "end": "110000"
  },
  {
    "text": "this is the na√îve algorithm,\nis you just sort and then return the kth element.\nThis is another possible",
    "start": "110000",
    "end": "117000"
  },
  {
    "text": "definition of the problem.\nAnd we would like to do better",
    "start": "117000",
    "end": "123000"
  },
  {
    "text": "than that.\nSo you could sort, what's called the array A,\nand then return A[k].",
    "start": "123000",
    "end": "130000"
  },
  {
    "text": "That is one thing we could do.\nAnd if we use heap sort or",
    "start": "130000",
    "end": "136000"
  },
  {
    "text": "mergesort, this will take n lg n\ntime. We would like to do better than\nn lg n.",
    "start": "136000",
    "end": "143000"
  },
  {
    "text": "Ideally linear time.\nThe problem is pretty natural,",
    "start": "143000",
    "end": "149000"
  },
  {
    "text": "straightforward.\nIt has various applications. Depending on how you choose k,\nk could be any number between 1",
    "start": "149000",
    "end": "159000"
  },
  {
    "text": "and n.\nFor example, if we choose k=1 that element\nhas a name. Any suggestions of what the\nname is?",
    "start": "159000",
    "end": "167000"
  },
  {
    "text": "The minimum.\nThat's easy. Any suggestions on how we could\nfind the minimum element in an",
    "start": "167000",
    "end": "175000"
  },
  {
    "text": "array in linear time?\nRight. Just scan through the array.\nKeep track of what the smallest",
    "start": "175000",
    "end": "184000"
  },
  {
    "text": "number is that you've seen.\nThe same thing with the maximum, k=n.\nThese are rather trivial.",
    "start": "184000",
    "end": "192000"
  },
  {
    "text": "But a more interesting version\nof the order statistic problem is to find the median.\nThis is either k equals n plus",
    "start": "192000",
    "end": "201000"
  },
  {
    "text": "1 over 2 floor or ceiling.\nI will call both of those elements medians.",
    "start": "201000",
    "end": "209000"
  },
  {
    "text": " Finding the median of an\nunsorted array in linear time is",
    "start": "209000",
    "end": "217000"
  },
  {
    "start": "213000",
    "end": "300000"
  },
  {
    "text": "quite tricky.\nAnd that sort of is the main goal of this lecture,\nis to be able to find the medians.\nFor free we're going to be able",
    "start": "217000",
    "end": "223000"
  },
  {
    "text": "to find the arbitrary kth\nsmallest element, but typically we're most\ninterested in finding the median.\nAnd on Friday in recitation",
    "start": "223000",
    "end": "230000"
  },
  {
    "text": "you'll see why that is so\nuseful. There are all sorts of\nsituations where you can use median for really effective\ndivide-and-conquer without",
    "start": "230000",
    "end": "238000"
  },
  {
    "text": "having to sort.\nYou can solve a lot of problems in linear time as a result.\nAnd we're going to cover today",
    "start": "238000",
    "end": "247000"
  },
  {
    "text": "two algorithms for finding order\nstatistics. Both of them are linear time.\nThe first one is randomized,",
    "start": "247000",
    "end": "255000"
  },
  {
    "text": "so it's only linear expected\ntime. And the second one is\nworst-case linear time,",
    "start": "255000",
    "end": "261000"
  },
  {
    "text": "and it will build on the\nrandomized version. Let's start with a randomize\ndivide-and-conquer algorithm.",
    "start": "261000",
    "end": "271000"
  },
  {
    "start": "271000",
    "end": "286000"
  },
  {
    "text": "This algorithm is called\nrand-select. ",
    "start": "286000",
    "end": "302000"
  },
  {
    "start": "300000",
    "end": "367000"
  },
  {
    "text": "And the parameters are a little\nbit more than what we're used to.\nThe order statistics problem",
    "start": "302000",
    "end": "308000"
  },
  {
    "text": "you're given an array A.\nAnd here I've changed notation and I'm looking for the ith\nsmallest element,",
    "start": "308000",
    "end": "315000"
  },
  {
    "text": "so i is the index I'm looking\nfor. And I'm also going to change\nthe problem a little bit.",
    "start": "315000",
    "end": "321000"
  },
  {
    "text": "And instead of trying to find\nit in the whole array, I'm going to look in a\nparticular interval of the",
    "start": "321000",
    "end": "329000"
  },
  {
    "text": "array, A from p up to q.\nWe're going to need that for a recursion.\nThis better be a recursive",
    "start": "329000",
    "end": "336000"
  },
  {
    "text": "algorithm because we're using\ndivide-and-conquer. Here is the algorithm. ",
    "start": "336000",
    "end": "351000"
  },
  {
    "text": "With a base case.\nIt's pretty simple. Then we're going to use part of\nthe quicksort algorithm,",
    "start": "351000",
    "end": "360000"
  },
  {
    "text": "randomized quicksort. ",
    "start": "360000",
    "end": "369000"
  },
  {
    "start": "367000",
    "end": "450000"
  },
  {
    "text": "We didn't actually define this\nsubroutine two lectures ago, but you should know what it\ndoes, especially if you've read",
    "start": "369000",
    "end": "377000"
  },
  {
    "text": "the textbook.\nThis says in the array A[p...q] pick a random element,\nso pick a random index between",
    "start": "377000",
    "end": "384000"
  },
  {
    "text": "p and q, swap it with the first\nelement, then call partition.",
    "start": "384000",
    "end": "390000"
  },
  {
    "text": "And partition uses that first\nelement to split the rest of the array into less than or equal to\nthat random partition and",
    "start": "390000",
    "end": "399000"
  },
  {
    "text": "greater than or equal to that\npartition. This is just picking a random\npartition element between p and",
    "start": "399000",
    "end": "407000"
  },
  {
    "text": "q, cutting the array in half,\nalthough the two sizes may not be equal.\nAnd it returns the index of",
    "start": "407000",
    "end": "414000"
  },
  {
    "text": "that partition element,\nsome number between p and q.",
    "start": "414000",
    "end": "420000"
  },
  {
    "text": "And we're going to define k to\nbe this particular value,",
    "start": "420000",
    "end": "428000"
  },
  {
    "text": "r minus p plus 1.\nAnd the reason for that is that",
    "start": "428000",
    "end": "435000"
  },
  {
    "text": "k is then the rank of the\npartition element.",
    "start": "435000",
    "end": "441000"
  },
  {
    "text": "This is in A[p...q].\nLet me draw a picture here.",
    "start": "441000",
    "end": "450000"
  },
  {
    "start": "450000",
    "end": "707000"
  },
  {
    "text": "We have our array A.\nIt starts at p and ends at q. There is other stuff,\nbut for this recursive all we",
    "start": "450000",
    "end": "458000"
  },
  {
    "text": "care about is p up to q.\nWe pick a random partition element, say this one,\nand we partition things so that",
    "start": "458000",
    "end": "467000"
  },
  {
    "text": "everything in here,\nlet's call this r, is less than or equal to A[r]\nand everything up here is",
    "start": "467000",
    "end": "475000"
  },
  {
    "text": "greater than or equal to A[r].\nAnd A[r] is our partition element.\nAfter this call,",
    "start": "475000",
    "end": "483000"
  },
  {
    "text": "that's what the array looks\nlike. And we get r.\nWe get the index of where",
    "start": "483000",
    "end": "489000"
  },
  {
    "text": "partition element is stored.\nThe number of elements that are less than or equal to A[r] and\nincluding r is r minus p plus 1.",
    "start": "489000",
    "end": "500000"
  },
  {
    "text": "There will be r minus p\nelements here, and we're adding 1 to get this\nelement.",
    "start": "500000",
    "end": "508000"
  },
  {
    "text": "And, if you start counting at\n1, if this is rank 1, rank 2, this element will have\nrank k.",
    "start": "508000",
    "end": "515000"
  },
  {
    "text": "That's just from the\nconstruction in the partition. And now we get to recurse.\nAnd there are three cases --",
    "start": "515000",
    "end": "526000"
  },
  {
    "start": "526000",
    "end": "533000"
  },
  {
    "text": "-- depending on how i relates\nto k. Remember i is the rank that\nwe're looking for, k is the rank that we happen to\nget out of this random",
    "start": "533000",
    "end": "541000"
  },
  {
    "text": "partition.\nWe don't have much control over k, but if we're lucky i=k.\nThat's the element we want.",
    "start": "541000",
    "end": "547000"
  },
  {
    "start": "547000",
    "end": "553000"
  },
  {
    "text": "Then we just return the\npartition element. More likely is that the element\nwe're looking for is either to the left or to the right.\nAnd if it's to the left we're",
    "start": "553000",
    "end": "560000"
  },
  {
    "text": "going to recurse in the\nleft-hand portion of the array. And if it's to the right we're\ngoing to recurse in the",
    "start": "560000",
    "end": "566000"
  },
  {
    "text": "right-hand portion.\nSo, pretty straightforward at this point. ",
    "start": "566000",
    "end": "585000"
  },
  {
    "text": "I just have to get all the\nindices right. ",
    "start": "585000",
    "end": "608000"
  },
  {
    "text": "Either we're going to recurse\non the part between p and r minus 1, that's this case.\nThe rank we're looking for is",
    "start": "608000",
    "end": "614000"
  },
  {
    "text": "to the left of the rank of\nelement A[r]. Or, we're going to recurse on\nthe right part between r plus 1",
    "start": "614000",
    "end": "620000"
  },
  {
    "text": "and q.\nWhere we recurse on the left part the rank we're looking for\nremains the same, but when we recurse on the\nright part the rank we're",
    "start": "620000",
    "end": "628000"
  },
  {
    "text": "looking for gets offset.\nBecause we sort of got rid of the k elements over here.\nI should have written this",
    "start": "628000",
    "end": "638000"
  },
  {
    "text": "length is k.\nWe've sort of swept away k ranks of elements.\nAnd now within this array we're",
    "start": "638000",
    "end": "646000"
  },
  {
    "text": "looking for the i minus kth\nsmallest element. That's the recursion.\nWe only recurse once.",
    "start": "646000",
    "end": "655000"
  },
  {
    "text": "And random partition is not a\nrecursion. That just takes linear time.\nAnd the total amount of work",
    "start": "655000",
    "end": "664000"
  },
  {
    "text": "we're doing here should be\nlinear time plus one recursion. And we'd next like to see what\nthe total running time is in",
    "start": "664000",
    "end": "674000"
  },
  {
    "text": "expectation, but let's first do\na little example -- ",
    "start": "674000",
    "end": "686000"
  },
  {
    "text": "-- to make this algorithm\nperfectly clear. Let's suppose we're looking for\nthe seventh smallest element in",
    "start": "686000",
    "end": "693000"
  },
  {
    "text": "this array. ",
    "start": "693000",
    "end": "710000"
  },
  {
    "start": "707000",
    "end": "919000"
  },
  {
    "text": "And let's suppose,\njust for example, that the pivot we're using is\njust the first element.",
    "start": "710000",
    "end": "717000"
  },
  {
    "text": "So, nothing fancy.\nI would have to flip a few coins in order to generate a\nrandom one, so let's just pick",
    "start": "717000",
    "end": "726000"
  },
  {
    "text": "this one.\nIf I partition at the element 6, this is actually an example\nwe did two weeks ago,",
    "start": "726000",
    "end": "733000"
  },
  {
    "text": "and I won't go through it\nagain, but we get the same array, as we did two weeks ago,\nnamely 2, 5,",
    "start": "733000",
    "end": "741000"
  },
  {
    "text": "3, 6, 8, 13,\n10 and 11. If you run through the\npartitioning algorithm, that happens to be the order\nthat it throws the elements",
    "start": "741000",
    "end": "751000"
  },
  {
    "text": "into.\nAnd this is our position r. This is p here.\nIt's just 1.",
    "start": "751000",
    "end": "757000"
  },
  {
    "text": "And q is just the end.\nAnd I am looking for the seventh smallest element.\nAnd it happens when I run this",
    "start": "757000",
    "end": "764000"
  },
  {
    "text": "partition that 6 falls into the\nfourth place. And we know that means,\nbecause all the elements here",
    "start": "764000",
    "end": "772000"
  },
  {
    "text": "are less than 6 and all the\nelements here are greater than 6, if this array were sorted,\n6 would be right here in",
    "start": "772000",
    "end": "780000"
  },
  {
    "text": "position four.\nSo, r here is 4. Yeah?\nThe 12 turned into an 11?",
    "start": "780000",
    "end": "789000"
  },
  {
    "text": "This was an 11,\nbelieve it or not. Let me be simple.\nSorry.",
    "start": "789000",
    "end": "796000"
  },
  {
    "text": "Sometimes my ones look like\ntwos. Not a good feature.\nThat's an easy way to cover.",
    "start": "796000",
    "end": "807000"
  },
  {
    "text": "[LAUGHTER]\nDon't try that on exams. Oh, that one was just a two.\nNo.",
    "start": "807000",
    "end": "813000"
  },
  {
    "text": "Even though we're not sorting\nthe array, we're only spending\n191\n00:13:37,000 --> 00:00:06,000\nlinear work here to partition by ",
    "start": "813000",
    "end": "819000"
  },
  {
    "text": "We know that if we had sorted\nthe array 6 would fall here. We don't know about these other\nelements.",
    "start": "819000",
    "end": "826000"
  },
  {
    "text": "They're not in sorted order,\nbut from the properties of partition we know 6 went the\nright spot.",
    "start": "826000",
    "end": "832000"
  },
  {
    "text": "We now know rank of 6 is 4.\nWe happened to be looking for 7 and we happened to get this\nnumber 4.",
    "start": "832000",
    "end": "840000"
  },
  {
    "text": "We want something over here.\nIt turns out we're looking for 10, I guess.\nNo, 11. There should be eight elements\nin this array,",
    "start": "840000",
    "end": "848000"
  },
  {
    "text": "so it's the next to max.\nMax here is 13, I'm cheating here.\nThe answer we're looking for is\n204\n00:14:14,000 --> 00:00:11,000",
    "start": "848000",
    "end": "854000"
  },
  {
    "text": "for is in the right-hand part\nbecause the rank we're looking\n206\n00:14:20,000 --> 00:00:04,000\nfor is 7, which is bigger than ",
    "start": "856000",
    "end": "862000"
  },
  {
    "text": "Now, what rank are we looking\nfor in here? Well, we've gotten rid of four\nelements over here.",
    "start": "862000",
    "end": "870000"
  },
  {
    "text": "It happened here that k is also\n4 because p is 1 in this example.\nThe rank of 6 was 4.",
    "start": "870000",
    "end": "878000"
  },
  {
    "text": "We throw away those four\nelements. Now we're looking for rank 7\nminus 4 which is 3.",
    "start": "878000",
    "end": "886000"
  },
  {
    "text": "And, indeed,\nthe rank 3 element here is still 11.\nSo, you recursively find that.",
    "start": "886000",
    "end": "893000"
  },
  {
    "text": "That's your answer.\nNow that algorithm should be pretty clear.\nThe tricky part is to analyze",
    "start": "893000",
    "end": "903000"
  },
  {
    "text": "it.\nAnd the analysis here is quite a bit like randomized quicksort,\nalthough not quite as hairy,",
    "start": "903000",
    "end": "910000"
  },
  {
    "text": "so it will go faster.\nBut it will be also sort of a nice review of the randomized\nquicksort analysis which was a",
    "start": "910000",
    "end": "918000"
  },
  {
    "text": "bit tricky and always good to\nsee a couple of times. We're going to follow the same\nkind of outline as before to",
    "start": "918000",
    "end": "926000"
  },
  {
    "start": "919000",
    "end": "2127000"
  },
  {
    "text": "look at the expected running\ntime of this algorithm. And to start out we're going\nto, as before,",
    "start": "926000",
    "end": "934000"
  },
  {
    "text": "look at some intuition just to\nfeel good about ourselves. Also feel bad as you'll see.\nLet's think about two sort of",
    "start": "934000",
    "end": "944000"
  },
  {
    "text": "extreme cases,\na good case and the worst case. And I should mention that in\nall of the analyses today we",
    "start": "944000",
    "end": "954000"
  },
  {
    "text": "assume the elements are\ndistinct. ",
    "start": "954000",
    "end": "964000"
  },
  {
    "text": "It gets really messy if the\nelements are not distinct. And you may even have to change\nthe algorithms a little bit",
    "start": "964000",
    "end": "972000"
  },
  {
    "text": "because if all the elements are\nequal, if you pick a random element, the partition does not\ndo so well.",
    "start": "972000",
    "end": "979000"
  },
  {
    "text": "But let's assume they're all\ndistinct, which is the really interesting case.\nA pretty luck case --",
    "start": "979000",
    "end": "988000"
  },
  {
    "text": "I mean the best cases we\npartition right in the middle. The number of elements to the\nleft of our partition is equal",
    "start": "988000",
    "end": "997000"
  },
  {
    "text": "to the number of elements to the\nright of our partition. But almost as good would be\nsome kind of 1/10 to 9/10 split.",
    "start": "997000",
    "end": "1007000"
  },
  {
    "text": "Any constant fraction,\nwe should feel that. Any constant fraction is as\ngood as 1/2.",
    "start": "1007000",
    "end": "1014000"
  },
  {
    "text": "Then the recurrence we get is,\nlet's say at most, this bad.\nSo, it depends.",
    "start": "1014000",
    "end": "1021000"
  },
  {
    "text": "If we have let's say 1/10 on\nthe left and 9/10 on the right every time we do a partition.\nIt depends where our answer is.",
    "start": "1021000",
    "end": "1028000"
  },
  {
    "text": "It could be if i is really\nsmall it's in the 1/10 part. If i is really big it's going\nto be in the 9/10 part,",
    "start": "1028000",
    "end": "1036000"
  },
  {
    "text": "or most of the time it's going\nto be in the 9/10 part. We're doing worst-case analysis\nwithin the lucky case,",
    "start": "1036000",
    "end": "1043000"
  },
  {
    "text": "so we're happy to have upper\nbounds. I will say t(n) is at most t of\nT(9/10n)+Theta(n).",
    "start": "1043000",
    "end": "1050000"
  },
  {
    "text": "Clearly it's worse if we're in\nthe bigger part. What is the solution to this\nrecurrence?",
    "start": "1050000",
    "end": "1058000"
  },
  {
    "text": "Oh, solving recurrence was so\nlong ago. What method should we use for\nsolving this recurrence?",
    "start": "1058000",
    "end": "1067000"
  },
  {
    "text": "The master method.\nWhat case are we in? Three.\nGood. You still remember.\nThis is Case 3.",
    "start": "1067000",
    "end": "1075000"
  },
  {
    "text": "We're looking at nlog_b(a).\nb here is 10/9,",
    "start": "1075000",
    "end": "1081000"
  },
  {
    "text": "although it doesn't really\nmatter because a is 1. log base anything of 1 is 0.\nSo, this is n^0 which is 1.",
    "start": "1081000",
    "end": "1091000"
  },
  {
    "text": "And n is polynomially larger\nthan 1. This is going to be O(n),\nwhich is good.",
    "start": "1091000",
    "end": "1098000"
  },
  {
    "text": "That is what we want,\nlinear time. If we're in the lucky case,\ngreat.",
    "start": "1098000",
    "end": "1105000"
  },
  {
    "text": "Unfortunately this is only\nintuition. And we're not always going to\nget the lucky case.",
    "start": "1105000",
    "end": "1112000"
  },
  {
    "text": "We could do the same kind of\nanalysis as we did with randomized quicksort.\nIf you alternate between lucky",
    "start": "1112000",
    "end": "1118000"
  },
  {
    "text": "and unlucky, things will still\nbe good, but let's just talk about the unlucky case to show\nhow bad things can get.",
    "start": "1118000",
    "end": "1124000"
  },
  {
    "text": "And this really would be a\nworst-case analysis. ",
    "start": "1124000",
    "end": "1133000"
  },
  {
    "text": "The unlucky case we get a split\nof 0:n-1.",
    "start": "1133000",
    "end": "1140000"
  },
  {
    "text": "Because we're removing the\npartition element either way. And there could be nothing less\nthan the partition element.",
    "start": "1140000",
    "end": "1149000"
  },
  {
    "text": "We have 0 on the left-hand side\nand we have n-1 on the right-hand side.\nNow we get a recurrence like",
    "start": "1149000",
    "end": "1158000"
  },
  {
    "text": "T(n)=T(n-1) plus linear cost.\nAnd what's the solution to that recurrence?\nn^2.",
    "start": "1158000",
    "end": "1165000"
  },
  {
    "text": "Yes.\nThis one you should just know. It's n^2 because it's an\narithmetic series.",
    "start": "1165000",
    "end": "1173000"
  },
  {
    "text": " And that's pretty bad.\nThis is much,",
    "start": "1173000",
    "end": "1180000"
  },
  {
    "text": "much worse than sorting and\nthen picking the ith element. In the worst-case this\nalgorithm really sucks,",
    "start": "1180000",
    "end": "1186000"
  },
  {
    "text": "but most of the time it's going\nto do really well. And, unless you're really,\nreally unlucky and every coin",
    "start": "1186000",
    "end": "1192000"
  },
  {
    "text": "you flip gives the wrong answer,\nyou won't get this case and you will get something more like the\nlucky case.",
    "start": "1192000",
    "end": "1198000"
  },
  {
    "text": "At least that's what we'd like\nto prove. And we will prove that the\nexpected running time here is",
    "start": "1198000",
    "end": "1205000"
  },
  {
    "text": "linear.\nSo, it's very rare to get anything quadratic.\nBut later on we will see how to make the worst-case linear as\nwell.",
    "start": "1205000",
    "end": "1211000"
  },
  {
    "text": "This would really,\nreally solve the problem. ",
    "start": "1211000",
    "end": "1230000"
  },
  {
    "text": "Let's get into the analysis. ",
    "start": "1230000",
    "end": "1243000"
  },
  {
    "text": "Now, you've seen an analysis\nmuch like this before. What do you suggest we do in\norder to analyze this expected",
    "start": "1243000",
    "end": "1251000"
  },
  {
    "text": "time?\nIt's a divide-and-conquer algorithm, so we kind of like to\nwrite down the recurrence on",
    "start": "1251000",
    "end": "1259000"
  },
  {
    "text": "something resembling the running\ntime. ",
    "start": "1259000",
    "end": "1269000"
  },
  {
    "text": "I don't need the answer,\nbut what's the first step that we might do to analyze the\nexpected running time of this",
    "start": "1269000",
    "end": "1276000"
  },
  {
    "text": "algorithm?\nSorry? Look at different cases,\nyeah. Exactly.\nWe have all these possible ways",
    "start": "1276000",
    "end": "1282000"
  },
  {
    "text": "that random partition could\nsplit. It could split 0 to the n-1.\nIt could split in half.",
    "start": "1282000",
    "end": "1290000"
  },
  {
    "text": "There are n choices where it\ncould split. How can we break into those\ncases? Indicator random variables.\nCool.",
    "start": "1290000",
    "end": "1298000"
  },
  {
    "text": "Exactly.\nThat's what we want to do. Indicator random variable\nsuggests that what we're dealing",
    "start": "1298000",
    "end": "1306000"
  },
  {
    "text": "with is not exactly just a\nfunction T(n) but it's a random variable.\nThis is one subtlety.",
    "start": "1306000",
    "end": "1313000"
  },
  {
    "text": "T(n) depends on the random\nchoices, so it's really a random variable.",
    "start": "1313000",
    "end": "1320000"
  },
  {
    "text": " And then we're going to use\nindicator random variables to",
    "start": "1320000",
    "end": "1328000"
  },
  {
    "text": "get a recurrence on T(n). ",
    "start": "1328000",
    "end": "1345000"
  },
  {
    "text": "So, T(n) is the running time of\nrand-select on an input of size",
    "start": "1345000",
    "end": "1352000"
  },
  {
    "text": "n. ",
    "start": "1352000",
    "end": "1360000"
  },
  {
    "text": "And I am also going to write\ndown explicitly an assumption",
    "start": "1360000",
    "end": "1366000"
  },
  {
    "text": "about the random numbers. ",
    "start": "1366000",
    "end": "1375000"
  },
  {
    "text": "That they should be chosen\nindependently from each other. Every time I call random\npartition, it's generating a",
    "start": "1375000",
    "end": "1383000"
  },
  {
    "text": "completely independent random\nnumber from all the other times I call random partition.\nThat is important,",
    "start": "1383000",
    "end": "1390000"
  },
  {
    "text": "of course, for this analysis to\nwork. We will see why some point down\nthe line. And now, to sort of write down\nan equation for T(n) we're going",
    "start": "1390000",
    "end": "1399000"
  },
  {
    "text": "to define indicator random\nvariables, as you suggested. ",
    "start": "1399000",
    "end": "1416000"
  },
  {
    "text": "And we will call it X_k.\nAnd this is for all k=0...n-1.",
    "start": "1416000",
    "end": "1424000"
  },
  {
    "start": "1424000",
    "end": "1430000"
  },
  {
    "text": "Indicator random variables\neither 1 or 0. And it's going to be 1 if the\npartition comes out k on the",
    "start": "1430000",
    "end": "1440000"
  },
  {
    "text": "left-hand side.\nSo say the partition generates",
    "start": "1440000",
    "end": "1446000"
  },
  {
    "text": "a k:n-k-1 split and it is 0\notherwise. We have n of these indicator\nrandom variables between",
    "start": "1446000",
    "end": "1457000"
  },
  {
    "text": "0...n-1.\nAnd in each case, no matter how the random choice\ncomes out, exactly one of them",
    "start": "1457000",
    "end": "1467000"
  },
  {
    "text": "will be 1.\nAll the others will be 0. Now we can divide out the\nrunning time of this algorithm",
    "start": "1467000",
    "end": "1477000"
  },
  {
    "text": "based on which case we're in. ",
    "start": "1477000",
    "end": "1489000"
  },
  {
    "text": "That will sort of unify this\nintuition that we did and get",
    "start": "1489000",
    "end": "1497000"
  },
  {
    "text": "all the cases.\nAnd then we can look at the expectation.\nT(n), if we just split out by",
    "start": "1497000",
    "end": "1508000"
  },
  {
    "text": "cases, we have an upper bound\nlike this.",
    "start": "1508000",
    "end": "1515000"
  },
  {
    "start": "1515000",
    "end": "1528000"
  },
  {
    "text": "If we have 0 to n-1 split,\nthe worst is we have n-1. Then we have to recurse in a\nproblem of size n-1.",
    "start": "1528000",
    "end": "1538000"
  },
  {
    "text": "In fact, it would be pretty\nhard to recurse in a problem of size 0.\nIf we have a 1 to n-2 split",
    "start": "1538000",
    "end": "1547000"
  },
  {
    "text": "then we take the max of the two\nsides. That's certainly going to give\nus an upper bound and so on.",
    "start": "1547000",
    "end": "1558000"
  },
  {
    "text": " And at the bottom you get an\nn-1 to 0 split.",
    "start": "1558000",
    "end": "1566000"
  },
  {
    "start": "1566000",
    "end": "1574000"
  },
  {
    "text": "This is now sort of\nconditioning on various events, but we have indicator random\nvariables to tell us when these events happen.\nWe can just multiply each of",
    "start": "1574000",
    "end": "1581000"
  },
  {
    "text": "these values by the indicator\nrandom variable and it will come out 0 if that's not the case and\nwill come out 1 and give us this",
    "start": "1581000",
    "end": "1588000"
  },
  {
    "text": "value if that happens to be the\nsplit. So, if we add up all of those\nwe'll get the same thing.",
    "start": "1588000",
    "end": "1597000"
  },
  {
    "text": "This is equal to the sum over\nall k of the indicator random",
    "start": "1597000",
    "end": "1605000"
  },
  {
    "text": "variable times the cost in that\ncase, which is t of max k,",
    "start": "1605000",
    "end": "1612000"
  },
  {
    "text": "and the other side,\nwhich is n-k-1, plus theta n.\nThis is our recurrence,",
    "start": "1612000",
    "end": "1621000"
  },
  {
    "text": "in some sense,\nfor the random variable representing running time.\nNow, the value will depend on",
    "start": "1621000",
    "end": "1629000"
  },
  {
    "text": "which case we come into.\nWe know the probability of each of these events happening is the\nsame because we're choosing the",
    "start": "1629000",
    "end": "1639000"
  },
  {
    "text": "partition element uniformly at\nrandom, but we cannot really simplify much beyond this until\nwe take expectations.",
    "start": "1639000",
    "end": "1649000"
  },
  {
    "text": "We know this random variable\ncould be as big as n^2. Hopefully it's usually linear.\nWe will take expectations of",
    "start": "1649000",
    "end": "1657000"
  },
  {
    "text": "both sides and get what we want. ",
    "start": "1657000",
    "end": "1674000"
  },
  {
    "text": "Let's look at the expectation\nof this random variable, which is just the expectation,\nI will copy over,",
    "start": "1674000",
    "end": "1682000"
  },
  {
    "text": "summation we have here so I can\nwork on this board. ",
    "start": "1682000",
    "end": "1710000"
  },
  {
    "text": "I want to compute the\nexpectation of this summation. What property of expectation\nshould I use?",
    "start": "1710000",
    "end": "1716000"
  },
  {
    "text": "Linearity, good.\nWe can bring the summation outside. ",
    "start": "1716000",
    "end": "1748000"
  },
  {
    "text": "Now I have a sum of\nexpectation. Let's look at each expectation\nindividually. It's a product of two random\nvariables, if you will.",
    "start": "1748000",
    "end": "1755000"
  },
  {
    "text": "This is an indicator random\nvariable and this is some more complicated function,\nsome more complicated random",
    "start": "1755000",
    "end": "1762000"
  },
  {
    "text": "variable representing some\nrunning time, which depends on what random\nchoices are made in that",
    "start": "1762000",
    "end": "1768000"
  },
  {
    "text": "recursive call.\nNow what should I do? I have the expectation of the\nproduct of two random variables.",
    "start": "1768000",
    "end": "1777000"
  },
  {
    "text": "Independence,\nexactly. If I know that these two random\nvariables are independent then I",
    "start": "1777000",
    "end": "1785000"
  },
  {
    "text": "know that the expectation of the\nproduct is the product of the",
    "start": "1785000",
    "end": "1791000"
  },
  {
    "text": "expectations.\nNow we have to check are they independent?\nI hope so because otherwise",
    "start": "1791000",
    "end": "1798000"
  },
  {
    "text": "there isn't much else I can do.\nWhy are they independent?",
    "start": "1798000",
    "end": "1804000"
  },
  {
    "text": "Sorry?\nBecause we stated that they are, right.\nBecause of this assumption.",
    "start": "1804000",
    "end": "1810000"
  },
  {
    "text": "We assume that all the random\nnumbers are chosen independently.\nWe need to sort of interpolate",
    "start": "1810000",
    "end": "1817000"
  },
  {
    "text": "that here.\nThese X_k's, all the X_k's,\nX_0 up to X_n-1, so all the ones appearing in\nthis summation are dependent",
    "start": "1817000",
    "end": "1826000"
  },
  {
    "text": "upon a single random choice of\nthis particular call to random partition.\nAll of these are correlated,",
    "start": "1826000",
    "end": "1836000"
  },
  {
    "text": "because if one of them is 1,\nall the others are forced to be\n425\n00:30:44,000 --> 00:00:00,000",
    "start": "1836000",
    "end": "1844000"
  },
  {
    "text": "correlation among the X_k's.\nBut with respect to everything",
    "start": "1847000",
    "end": "1854000"
  },
  {
    "text": "that is in here,\nand the only random part is",
    "start": "1854000",
    "end": "1860000"
  },
  {
    "text": "this T(max(kn-k-1)).\nThat is the reason that this",
    "start": "1860000",
    "end": "1867000"
  },
  {
    "text": "random variable is independent\nfrom these. The same thing as quicksort,\nbut I know some people got",
    "start": "1867000",
    "end": "1879000"
  },
  {
    "text": "confused about it a couple\nlectures ago so I am reiterating.\nWe get the product of",
    "start": "1879000",
    "end": "1889000"
  },
  {
    "text": "expectations,\nE[X_k] E[T(max(kn-k-1))].",
    "start": "1889000",
    "end": "1895000"
  },
  {
    "text": "I mean the order n comes\noutside, but let's leave it inside for now.\nThere is no expectation to",
    "start": "1895000",
    "end": "1904000"
  },
  {
    "text": "compute there for order n.\nOrder n is order n. What is the expectation of X_k?\n1/n, because they're all chosen",
    "start": "1904000",
    "end": "1915000"
  },
  {
    "text": "with equal probability.\nThere is n of them, so the expectation is 1/n.\nThe value is either 1 or 0.",
    "start": "1915000",
    "end": "1924000"
  },
  {
    "text": "We start to be able to split\nthis up. We have 1/n times this expected\nvalue of some recursive T call,",
    "start": "1924000",
    "end": "1932000"
  },
  {
    "text": "and then we have plus 1 over n\ntimes order n, also known as a constant,\nbut everything is summed up n",
    "start": "1932000",
    "end": "1940000"
  },
  {
    "text": "times so let's expand this. ",
    "start": "1940000",
    "end": "1955000"
  },
  {
    "text": "I have the sum k=0 to n-1.\nI guess the 1/n can come",
    "start": "1955000",
    "end": "1962000"
  },
  {
    "text": "outside.\nAnd we have expectation of [T(max(kn-k-1))].\nLots of nifty braces there.",
    "start": "1962000",
    "end": "1974000"
  },
  {
    "text": "And then plus we have,\non the other hand, the sum k=0 to n-1.\nLet me just write that out",
    "start": "1974000",
    "end": "1986000"
  },
  {
    "text": "again.\nWe have a 1/n in front and we have a Theta(n) inside.\nThis summation is n^2.",
    "start": "1986000",
    "end": "1992000"
  },
  {
    "text": "And then we're dividing by n,\nso this whole thing is, again, order n.\nNothing fancy happened there.",
    "start": "1992000",
    "end": "2000000"
  },
  {
    "text": "This is really just saying the\nexpectation of order n is order n.\nAverage value of order n is",
    "start": "2000000",
    "end": "2007000"
  },
  {
    "text": "order n.\nWhat is interesting is this part.\nNow, what could we do with this",
    "start": "2007000",
    "end": "2015000"
  },
  {
    "text": "summation?\nHere we start to differ from randomized quicksort because we\nhave this max.",
    "start": "2015000",
    "end": "2023000"
  },
  {
    "text": "Randomized quicksort we had the\nsum of T(k) plus T(n-k-1) because we were making both\nrecursive calls.",
    "start": "2023000",
    "end": "2032000"
  },
  {
    "text": "Here we're only making the\nbiggest one. That max is really a pain for\nevaluating this recurrence.",
    "start": "2032000",
    "end": "2043000"
  },
  {
    "text": "How could I get rid of the max?\nThat's one way to think of it.",
    "start": "2043000",
    "end": "2051000"
  },
  {
    "text": "Yeah? ",
    "start": "2051000",
    "end": "2058000"
  },
  {
    "text": "Exactly.\nI could only sum up to halfway and then double.\nIn other words, terms are getting repeated\ntwice here.",
    "start": "2058000",
    "end": "2066000"
  },
  {
    "text": "When k=0 or when k=n-1,\nI get the same T(n-1). When k=1 or n-2,\nI get the same thing,",
    "start": "2066000",
    "end": "2073000"
  },
  {
    "text": "2 and n-3.\nWhat I will actually do is sum from halfway up.\nThat's a little bit cleaner.",
    "start": "2073000",
    "end": "2082000"
  },
  {
    "text": "And let me get the indices\nright. Floor of n/2 up to n-1 will be\nsafe.",
    "start": "2082000",
    "end": "2089000"
  },
  {
    "text": "And then I just have E[T(k)],\nexcept I forgot to multiply by",
    "start": "2089000",
    "end": "2095000"
  },
  {
    "text": "2, so I'm going to change this 1\nto a 2.",
    "start": "2095000",
    "end": "2101000"
  },
  {
    "text": "And order n is preserved.\nThis is just because each term is appearing twice.\nI can factor it out.",
    "start": "2101000",
    "end": "2107000"
  },
  {
    "text": "And if n is odd,\nI'm actually double-counting somewhat, but it's certain at\nmost that.",
    "start": "2107000",
    "end": "2113000"
  },
  {
    "text": "So, that's a safe upper bound.\nAnd upper bounds are all we care about because we're hoping\nto get linear.",
    "start": "2113000",
    "end": "2120000"
  },
  {
    "text": "And the running time of this\nalgorithm is definitely at least linear, so we just need an upper\nbounded linear.",
    "start": "2120000",
    "end": "2129000"
  },
  {
    "start": "2127000",
    "end": "2335000"
  },
  {
    "text": "So, this is a recurrence.\nE[T(n)] is at most 2/n times the sum of half the numbers\nbetween 0 and n of",
    "start": "2129000",
    "end": "2136000"
  },
  {
    "text": "E[T(k)]+Theta(n).\nIt's a bit of hairy recurrence. We want to solve it,\nthough. And it's actually a little bit\neasier than the randomized",
    "start": "2136000",
    "end": "2145000"
  },
  {
    "text": "quicksort recurrence.\nWe're going to solve it. What method should we use?\nSorry?",
    "start": "2145000",
    "end": "2151000"
  },
  {
    "text": "Master method?\nMaster would be nice, except that each of the\nrecursive calls is with a",
    "start": "2151000",
    "end": "2157000"
  },
  {
    "text": "different value of k.\nThe master method only works when all the calls are with the\nsame value, same size.",
    "start": "2157000",
    "end": "2165000"
  },
  {
    "text": "Alas, it would be nice if we\ncould use the master method. What else do we have?\nSubstitution.",
    "start": "2165000",
    "end": "2171000"
  },
  {
    "text": "When it's hard,\nwhen in doubt, use substitution.\nI mean the good thing here is we know what we want.\nFrom the intuition at least,",
    "start": "2171000",
    "end": "2180000"
  },
  {
    "text": "which is now erased,\nwe really feel that this should be linear time.\nSo, we know what we want to",
    "start": "2180000",
    "end": "2186000"
  },
  {
    "text": "prove.\nAnd indeed we can prove it just directly with substitution.",
    "start": "2186000",
    "end": "2195000"
  },
  {
    "start": "2195000",
    "end": "2202000"
  },
  {
    "text": "I want to claim there is some\nconstant c greater than zero such that E[T(n)],\naccording to this recurrence,",
    "start": "2202000",
    "end": "2209000"
  },
  {
    "text": "is at most c times n.\nLet's prove that over here. ",
    "start": "2209000",
    "end": "2220000"
  },
  {
    "text": "As we guessed,\nthe proof is by substitution. ",
    "start": "2220000",
    "end": "2233000"
  },
  {
    "text": "What that means is we're going\nto assume, by induction, that this inequality is true\nfor all smaller m.",
    "start": "2233000",
    "end": "2242000"
  },
  {
    "text": "I will just say 4 less than n.\nAnd we need to prove it for n.",
    "start": "2242000",
    "end": "2248000"
  },
  {
    "text": "We get E[T(n)].\nNow we are just going to expand using the recurrence that we\nhave.",
    "start": "2248000",
    "end": "2256000"
  },
  {
    "text": "It's at most this.\nI will copy that over. ",
    "start": "2256000",
    "end": "2274000"
  },
  {
    "text": "And then each of these\nrecursive calls is with some value k that is strictly smaller\nthan n.",
    "start": "2274000",
    "end": "2280000"
  },
  {
    "text": "Sorry, I copied it wrong,\nfloor of n over 2, not zero.\nAnd so I can apply the",
    "start": "2280000",
    "end": "2287000"
  },
  {
    "text": "induction hypothesis to each of\nthese. This is at most c times k by\nthe induction hypothesis.",
    "start": "2287000",
    "end": "2296000"
  },
  {
    "text": "And so I get this inequality. ",
    "start": "2296000",
    "end": "2317000"
  },
  {
    "text": "This c can come outside the\nsummation because it's just a constant.\nAnd I will be slightly tedious",
    "start": "2317000",
    "end": "2323000"
  },
  {
    "text": "in writing this down again,\nbecause what I care about is the summation here that is left\nover.",
    "start": "2323000",
    "end": "2330000"
  },
  {
    "start": "2330000",
    "end": "2336000"
  },
  {
    "start": "2335000",
    "end": "2691000"
  },
  {
    "text": "This is a good old-fashioned\nsummation. And if you remember back to\nyour summation tricks or",
    "start": "2336000",
    "end": "2344000"
  },
  {
    "text": "whatever, you should be able to\nevaluate this. If we started at zero and went\nup to n minus 1,",
    "start": "2344000",
    "end": "2351000"
  },
  {
    "text": "that's just an arithmetic\nseries, but here we have the tail end of an arithmetic\nseries. And you should know,\nat least up to theta,",
    "start": "2351000",
    "end": "2359000"
  },
  {
    "text": "what this is,\nright? n^2, yeah.\nIt's definitely T(n^2). But we need here a slightly\nbetter upper bond,",
    "start": "2359000",
    "end": "2366000"
  },
  {
    "text": "as we will see the constants\nreally matter. What we're going to use is that\nthis summation is at most 3/8",
    "start": "2366000",
    "end": "2375000"
  },
  {
    "text": "times n^2.\nAnd that will be critical, the fact that 3/8 is smaller\nthan 1/2, I believe.",
    "start": "2375000",
    "end": "2381000"
  },
  {
    "text": "So it's going to get rid of\nthis 2. I am not going to prove this.\nThis is an exercise.",
    "start": "2381000",
    "end": "2387000"
  },
  {
    "text": "When you know that it is true,\nit's easy because you can just prove it by induction.\nFiguring out that number is a",
    "start": "2387000",
    "end": "2395000"
  },
  {
    "text": "little bit more work,\nbut not too much more. So you should prove that by\ninduction.",
    "start": "2395000",
    "end": "2404000"
  },
  {
    "text": "Now let me simplify.\nThis is a bit messy, but what I want is c times n.\nLet's write it as our desired",
    "start": "2404000",
    "end": "2415000"
  },
  {
    "text": "value minus the residual.\nAnd here we have some crazy",
    "start": "2415000",
    "end": "2422000"
  },
  {
    "text": "fractions.\nThis is 2 times 3 which is 6 over 8 which is 3/4,\nright?",
    "start": "2422000",
    "end": "2431000"
  },
  {
    "text": "Here we have 1,\nso we have to subtract up 1/4 to get 3/4.\nAnd this should be,",
    "start": "2431000",
    "end": "2437000"
  },
  {
    "text": "I guess, 1/4 times c times n.\nAnd then we have this theta n with double negation becomes a\nplus theta n.",
    "start": "2437000",
    "end": "2445000"
  },
  {
    "text": "That should be clear.\nI am just rewriting that. So we have what we want over\nhere.",
    "start": "2445000",
    "end": "2452000"
  },
  {
    "text": "And then we hope that this is\nnonnegative because what we want is that this less than or equal\nto c times n.",
    "start": "2452000",
    "end": "2463000"
  },
  {
    "text": "That will be true,\nprovided this thing is nonnegative.\nAnd it looks pretty good",
    "start": "2463000",
    "end": "2469000"
  },
  {
    "text": "because we're free to choose c\nhowever large we want. Whatever constant is imbedded\nin this beta notation is one",
    "start": "2469000",
    "end": "2477000"
  },
  {
    "text": "fixed constant,\nwhatever makes this recurrence true.\nWe just set c to be bigger than",
    "start": "2477000",
    "end": "2484000"
  },
  {
    "text": "4 times that constant and then\nthis will be nonnegative. So this is true for c\nsufficiently large to dwarf that",
    "start": "2484000",
    "end": "2492000"
  },
  {
    "text": "theta constant.\nIt's also the base case. I just have to make the cursory\nmention that we choose c large",
    "start": "2492000",
    "end": "2501000"
  },
  {
    "text": "enough so that this claim is\ntrue, even in the base case where n is at most some\nconstant.",
    "start": "2501000",
    "end": "2508000"
  },
  {
    "text": "Here it's like 1 or so because\nthen we're not making a recursive call.\nWhat we get --",
    "start": "2508000",
    "end": "2515000"
  },
  {
    "text": "This algorithm,\nrandomize select, has expected running time order\nn, Theta(n).",
    "start": "2515000",
    "end": "2525000"
  },
  {
    "start": "2525000",
    "end": "2532000"
  },
  {
    "text": "The annoying this is that in\nthe worst-case, if you're really,\nreally unlucky it's n^2.",
    "start": "2532000",
    "end": "2539000"
  },
  {
    "text": "Any questions before we move on\nfrom this point? This finished off the proof of\nthis fact that we have Theta(n)",
    "start": "2539000",
    "end": "2549000"
  },
  {
    "text": "expected time.\nWe already saw the n^2 worst-case.\nAll perfectly clear? Good.\nYou should go over these",
    "start": "2549000",
    "end": "2557000"
  },
  {
    "text": "proofs.\nThey're intrinsically related between randomized quicksort and\nrandomized select.",
    "start": "2557000",
    "end": "2563000"
  },
  {
    "text": "Know them in your heart.\nThis is a great algorithm that works really well in practice\nbecause most of the time you're",
    "start": "2563000",
    "end": "2572000"
  },
  {
    "text": "going to split,\nsay, in the middle, somewhere between a 1/4 and 3/4\nand everything is good.",
    "start": "2572000",
    "end": "2580000"
  },
  {
    "text": "It's extremely unlikely that\nyou get the n^2 worst-case. It would have to happen with\nlike 1 over n^n probability or",
    "start": "2580000",
    "end": "2586000"
  },
  {
    "text": "something really,\nreally small. But I am a theoretician at\nleast. And it would be really nice if\nyou could get Theta(n) in the",
    "start": "2586000",
    "end": "2594000"
  },
  {
    "text": "worst-case.\nThat would be the cleanest result that you could hope for\nbecause that's optimal. You cannot do better than\nTheta(n).",
    "start": "2594000",
    "end": "2601000"
  },
  {
    "text": "You've got to look at the\nelements. So, you might ask,\ncan we get rid of this worst-case behavior and somehow\navoid randomization and",
    "start": "2601000",
    "end": "2609000"
  },
  {
    "text": "guarantee Theta(n) worst-case\nrunning time? And you can but it's a rather\nnontrivial algorithm.",
    "start": "2609000",
    "end": "2619000"
  },
  {
    "text": "And this is going to be one of\nthe most sophisticated that",
    "start": "2619000",
    "end": "2625000"
  },
  {
    "text": "we've seen so far.\nIt won't continue to be the",
    "start": "2625000",
    "end": "2631000"
  },
  {
    "text": "most sophisticated algorithm we\nwill see, but here it is.",
    "start": "2631000",
    "end": "2638000"
  },
  {
    "text": "Worst-case linear time order\nstatistics.",
    "start": "2638000",
    "end": "2644000"
  },
  {
    "text": " And this is an algorithm by\nseveral, all very famous people,",
    "start": "2644000",
    "end": "2662000"
  },
  {
    "text": "Blum, Floyd,\nPratt, Rivest and Tarjan.",
    "start": "2662000",
    "end": "2672000"
  },
  {
    "text": "I think I've only met the B and\nthe R and the T. Oh, no, I've met Pratt as well.\nI'm getting close to all the",
    "start": "2672000",
    "end": "2679000"
  },
  {
    "text": "authors.\nThis is a somewhat old result, but at the time it was a major\nbreakthrough and still is an",
    "start": "2679000",
    "end": "2686000"
  },
  {
    "text": "amazing algorithm.\nRon Rivest is a professor here. You should know him from the R\nin RSA.",
    "start": "2686000",
    "end": "2692000"
  },
  {
    "start": "2691000",
    "end": "2764000"
  },
  {
    "text": "When I took my PhD\ncomprehensives some time ago, on the cover sheet was a joke\nquestion.",
    "start": "2692000",
    "end": "2700000"
  },
  {
    "text": "It asked of the authors of the\nworst-case linear time order statistics algorithm,\nwhich of them is the most rich?",
    "start": "2700000",
    "end": "2708000"
  },
  {
    "text": "Sadly it was not a graded part\nof the comprehensive exam, but it was an amusing question.\nI won't answer it here because",
    "start": "2708000",
    "end": "2718000"
  },
  {
    "text": "we're on tape,\n[LAUGHTER] but think about it. I may not be obvious.\nSeveral of them are rich.",
    "start": "2718000",
    "end": "2725000"
  },
  {
    "text": "It's just the question of who\nis the most rich. Anyway, before they were rich\nthey came up with this",
    "start": "2725000",
    "end": "2733000"
  },
  {
    "text": "algorithm.\nThey've come up with many algorithms since,\neven after getting rich, believe it or not.\nWhat we want is a good pivot,",
    "start": "2733000",
    "end": "2742000"
  },
  {
    "text": "guaranteed good pivot.\nRandom pivot is going to be really good.\nAnd so the simplest algorithm",
    "start": "2742000",
    "end": "2748000"
  },
  {
    "text": "is just pick a random pivot.\nIt's going to be good with high probability.\nWe want to force a good pivot",
    "start": "2748000",
    "end": "2755000"
  },
  {
    "text": "deterministically.\nAnd the new idea here is we're going to generate it\nrecursively.",
    "start": "2755000",
    "end": "2762000"
  },
  {
    "text": "What else could we do but\nrecurse? Well, you should know from your\nrecurrences that if we did two",
    "start": "2762000",
    "end": "2768000"
  },
  {
    "text": "recursive calls on problems of\nhalf the size and we have a linear extra work that's the\nmergesort recurrence,",
    "start": "2768000",
    "end": "2776000"
  },
  {
    "text": "T(n)=2[T(n/2)+Theta(n)].\nYou should recite in your sleep.\nThat's n lg n. So we cannot recurse on two\nproblems of half the size.",
    "start": "2776000",
    "end": "2785000"
  },
  {
    "text": "We've got to do better.\nSomehow these recursions have to add up to strictly less than\nn.",
    "start": "2785000",
    "end": "2792000"
  },
  {
    "text": "That's the magic of this\nalgorithm. So this will just be called\nselect instead of rand-select.",
    "start": "2792000",
    "end": "2799000"
  },
  {
    "text": "And it really depends on an\narray, but I will focus on the i-th element that we want to\nselect and the size of the array",
    "start": "2799000",
    "end": "2808000"
  },
  {
    "text": "that we want to select in.\nAnd I am going to write this algorithm slightly less formally\nthan randomize-select because",
    "start": "2808000",
    "end": "2817000"
  },
  {
    "text": "it's a bit higher level of an\nalgorithm. ",
    "start": "2817000",
    "end": "2842000"
  },
  {
    "text": "And let me draw over here the\npicture of the algorithm.",
    "start": "2842000",
    "end": "2851000"
  },
  {
    "text": "The first step is sort of the\nweirdest and it's one of the key ideas.\nYou take your elements,",
    "start": "2851000",
    "end": "2858000"
  },
  {
    "text": "and they are in no particular\norder, so instead of drawing them on a line,\nI am going to draw them in a 5",
    "start": "2858000",
    "end": "2867000"
  },
  {
    "text": "by n over 5 grid.\nWhy not? This, unfortunately,\ntake a little while to draw,",
    "start": "2867000",
    "end": "2874000"
  },
  {
    "text": "but it will take you equally\nlong so I will take my time.",
    "start": "2874000",
    "end": "2880000"
  },
  {
    "text": "It doesn't really matter what\nthe width is, but it should be width n over 5\nso make sure you draw your",
    "start": "2880000",
    "end": "2886000"
  },
  {
    "text": "figure accordingly.\nWidth n over 5, but the height should be\nexactly 5. I think I got it right.\nI can count that high.",
    "start": "2886000",
    "end": "2893000"
  },
  {
    "text": "Here is 5.\nAnd this should be, well, you know,\nour number may not be divisible by 5, so maybe it ends off in\nsort of an odd way.",
    "start": "2893000",
    "end": "2900000"
  },
  {
    "text": "But what I would like is that\nthese chunks should be floor of n over 5.\nAnd then we will have,",
    "start": "2900000",
    "end": "2906000"
  },
  {
    "text": "at most, four elements left\nover. So I am going to ignore those.\nThey don't really matter.",
    "start": "2906000",
    "end": "2913000"
  },
  {
    "text": "It's just an additive constant.\nHere is my array. I just happened to write it in\nthis funny way.",
    "start": "2913000",
    "end": "2919000"
  },
  {
    "text": "And I will call these vertical\nthings groups. I would circle them,\nand I did that in my notes,",
    "start": "2919000",
    "end": "2925000"
  },
  {
    "text": "but things get really messy if\nyou start circling. This diagram is going to get\nreally full, just to warn you.",
    "start": "2925000",
    "end": "2933000"
  },
  {
    "text": "By the end it will be almost\nunintelligible, but there it is.\nIf you are really feeling",
    "start": "2933000",
    "end": "2940000"
  },
  {
    "text": "bored, you can draw this a few\ntimes. And you should draw how it\ngrows.",
    "start": "2940000",
    "end": "2946000"
  },
  {
    "text": "So there are the groups,\nvertical groups of five. Next step.",
    "start": "2946000",
    "end": "2952000"
  },
  {
    "start": "2952000",
    "end": "2958000"
  },
  {
    "text": "The second step is to recurse.\nThis is where things are a bit",
    "start": "2958000",
    "end": "2964000"
  },
  {
    "text": "unusual, well,\neven more unusual. Oops, sorry.\nI really should have had a line",
    "start": "2964000",
    "end": "2972000"
  },
  {
    "text": "between one and two so I am\ngoing to have to move this down and insert it here.\nI also, in step one,",
    "start": "2972000",
    "end": "2980000"
  },
  {
    "text": "want to find the median of each\ngroup. ",
    "start": "2980000",
    "end": "2993000"
  },
  {
    "text": "What I would like to do is just\nimagine this figure, each of the five elements in\neach group gets reorganized so",
    "start": "2993000",
    "end": "2999000"
  },
  {
    "text": "that the middle one is the\nmedian. So I am going to call these the\nmedians of each group.",
    "start": "2999000",
    "end": "3005000"
  },
  {
    "text": "I have five elements so the\nmedian is right in the middle. There are two elements less\nthan the median,",
    "start": "3005000",
    "end": "3013000"
  },
  {
    "text": "two elements greater than the\nmedian. Again, we're assuming all\nelements are distinct.",
    "start": "3013000",
    "end": "3019000"
  },
  {
    "text": "So there they are.\nI compute them. How long does that take me?\nN over five groups, each with five elements,\ncompute the median of each one?",
    "start": "3019000",
    "end": "3030000"
  },
  {
    "text": "Sorry?\nYeah, 2 times n over 5. It's theta n,\nthat's all I need to know. I mean, you're counting\ncomparisons, which is good.",
    "start": "3030000",
    "end": "3038000"
  },
  {
    "text": "It's definitely Theta(n).\nThe point is within each group, I only have to do a constant\nnumber of comparisons because",
    "start": "3038000",
    "end": "3046000"
  },
  {
    "text": "it's a constant number of\nelements. It doesn't matter.\nYou could use randomize select for all I care.\nNo matter what you do,",
    "start": "3046000",
    "end": "3054000"
  },
  {
    "text": "it can only take a constant\nnumber of comparisons. As long as you don't make a\ncomparison more than once.",
    "start": "3054000",
    "end": "3063000"
  },
  {
    "text": "So this is easy.\nYou could sort the five numbers and then look at the third one,\nit doesn't matter because there",
    "start": "3063000",
    "end": "3072000"
  },
  {
    "text": "are only five of them.\nThat's one nifty idea. Already we have some elements\nthat are sort of vaguely in the",
    "start": "3072000",
    "end": "3081000"
  },
  {
    "text": "middle but just of the group.\nAnd we've only done linear work.\nSo doing well so far.",
    "start": "3081000",
    "end": "3089000"
  },
  {
    "text": "Now we get to the second step,\nwhich I started to write before, where we recurse.",
    "start": "3089000",
    "end": "3096000"
  },
  {
    "start": "3096000",
    "end": "3118000"
  },
  {
    "text": "So the next idea is,\nwell, we have these floor over n over 5 medians.\nI am going to compute the",
    "start": "3118000",
    "end": "3124000"
  },
  {
    "text": "median of those medians.\nI am imagining that I rearranged these.\nAnd, unfortunately, it's an even number,\nthere are six of them,",
    "start": "3124000",
    "end": "3131000"
  },
  {
    "text": "but I will rearrange so that\nthis guy, I have drawn in a second box, is the median of\nthese elements so that these two",
    "start": "3131000",
    "end": "3138000"
  },
  {
    "text": "elements are strictly less than\nthis guy, these three elements are strictly greater than this\nguy.",
    "start": "3138000",
    "end": "3144000"
  },
  {
    "text": "Now, that doesn't directly tell\nme anything, it would seem, about any of the elements out\nhere.",
    "start": "3144000",
    "end": "3151000"
  },
  {
    "text": "We will come back to that.\nIn fact, it does tell us about some of the elements.\nBut right now this element is",
    "start": "3151000",
    "end": "3158000"
  },
  {
    "text": "just the median of these guys.\nEach of these guys is a median of five elements.\nThat's all we know.",
    "start": "3158000",
    "end": "3165000"
  },
  {
    "text": "If we do that recursively,\nthis is going to take T of n over 5 time.\nSo far so good.",
    "start": "3165000",
    "end": "3171000"
  },
  {
    "text": "We can afford a recursion on a\nproblem of size n over 5 and linear work.\nWe know that works out to",
    "start": "3171000",
    "end": "3178000"
  },
  {
    "text": "linear time.\nBut there is more. We're obviously not done yet. ",
    "start": "3178000",
    "end": "3190000"
  },
  {
    "text": "The next step is x is our\npartition element. We partition there.\nThe rest of the algorithm is just like randomized partition,\nso we're going to define k to",
    "start": "3190000",
    "end": "3199000"
  },
  {
    "text": "be the rank of x.\nAnd this can be done, I mean it's n minus r plus 1 or\nwhatever, but I'm not going to",
    "start": "3199000",
    "end": "3205000"
  },
  {
    "text": "write out how to do that because\nwe're at a higher level here. But it can be done.\nAnd then we have the three-way",
    "start": "3205000",
    "end": "3214000"
  },
  {
    "text": "branching.\nSo if i happens to equal k we're happy.\nThe pivot element is the",
    "start": "3214000",
    "end": "3221000"
  },
  {
    "text": "element we're looking for,\nbut more likely i is either less than k or it is bigger than\nk.",
    "start": "3221000",
    "end": "3229000"
  },
  {
    "text": "And then we make the\nappropriate recursive call, so here we recursively select\nthe i-th smallest element --",
    "start": "3229000",
    "end": "3240000"
  },
  {
    "start": "3240000",
    "end": "3248000"
  },
  {
    "text": "-- in the lower part of the\narray. Left of the partition element.\nOtherwise, we recursively",
    "start": "3248000",
    "end": "3256000"
  },
  {
    "text": "select the i minus k-th smallest\nelement in the upper part of the",
    "start": "3256000",
    "end": "3262000"
  },
  {
    "text": "array.\nI am writing this at a high level because we've already seen\nit.",
    "start": "3262000",
    "end": "3270000"
  },
  {
    "text": "All of this is the same as the\nlast couple steps of randomized",
    "start": "3270000",
    "end": "3276000"
  },
  {
    "text": "select. ",
    "start": "3276000",
    "end": "3285000"
  },
  {
    "text": "That is the algorithm.\nThe real question is why does it work?\nWhy is this linear time? The first question is what's\nthe recurrence?",
    "start": "3285000",
    "end": "3293000"
  },
  {
    "text": "We cannot quite write it down\nyet because we don't know how big these recursive subproblems\ncould be.",
    "start": "3293000",
    "end": "3300000"
  },
  {
    "text": "We're going to either recurse\nin the lower part or the upper part, that's just like before.\nIf we're unlucky and we have a",
    "start": "3300000",
    "end": "3307000"
  },
  {
    "text": "split of like zero to n minus\none, this is going to be a quadratic time algorithm.\nThe claim is that this",
    "start": "3307000",
    "end": "3314000"
  },
  {
    "text": "partition element is guaranteed\nto be pretty good and good enough.\nThe running time of this thing",
    "start": "3314000",
    "end": "3321000"
  },
  {
    "text": "will be T of something times n,\nand we don't know what the something is yet.\nHow big could it be?",
    "start": "3321000",
    "end": "3327000"
  },
  {
    "text": "Well, I could ask you.\nBut we're sort of indirect here so I will tell you.\nWe have already a recursive",
    "start": "3327000",
    "end": "3334000"
  },
  {
    "text": "call of T of n over 5.\nIt better be that whatever constant, so it's going to be\nsomething times n,",
    "start": "3334000",
    "end": "3341000"
  },
  {
    "text": "it better be that that constant\nis strictly less than 4/5. If it's equal to 4/5 then\nyou're not splitting up the",
    "start": "3341000",
    "end": "3348000"
  },
  {
    "text": "problem enough to get an n lg n\nrunning time. If it's strictly less than 4/5\nthen you're reducing the problem",
    "start": "3348000",
    "end": "3355000"
  },
  {
    "text": "by at least a constant factor.\nIn the sense if you add up all the recursive subproblems,\nn over 5 and something times n,",
    "start": "3355000",
    "end": "3363000"
  },
  {
    "text": "you get something that is a\nconstant strictly less than one times n.\nThat forces the work to be",
    "start": "3363000",
    "end": "3369000"
  },
  {
    "text": "geometric.\nIf it's geometric you're going to get linear time.\nSo this is intuition but it's",
    "start": "3369000",
    "end": "3375000"
  },
  {
    "text": "the right intuition.\nWhenever you're aiming for linear time keep that in mind.\nIf you're doing a",
    "start": "3375000",
    "end": "3381000"
  },
  {
    "text": "divide-and-conquer,\nyou've got to get the total subproblem size to be some\nconstant less than one times n.",
    "start": "3381000",
    "end": "3387000"
  },
  {
    "text": "That will work.\nOK, so we've got to work out this constant here.\nAnd we're going to use this",
    "start": "3387000",
    "end": "3397000"
  },
  {
    "text": "figure, which so far looks\nsurprisingly uncluttered. Now we will make it cluttered.\nWhat I would like to do is draw",
    "start": "3397000",
    "end": "3408000"
  },
  {
    "text": "an arrow between two vertices,\ntwo points, elements, whatever you want to call them.\nLet's call them a and b.",
    "start": "3408000",
    "end": "3420000"
  },
  {
    "text": "And I want to orient the arrow\nso it points to a larger value, so this means that a is less\nthan b.",
    "start": "3420000",
    "end": "3426000"
  },
  {
    "text": "This is notation just for the\ndiagram. And so this element,\nI am going to write down what I",
    "start": "3426000",
    "end": "3433000"
  },
  {
    "text": "know.\nThis element is the median of these five elements.\nI will suppose that it is drawn",
    "start": "3433000",
    "end": "3439000"
  },
  {
    "text": "so that these elements are\nlarger than the median, these elements are smaller than\nthe median.",
    "start": "3439000",
    "end": "3445000"
  },
  {
    "text": "Therefore, I have arrows like\nthis. Here is where I wish I had some\ncolored chalk.",
    "start": "3445000",
    "end": "3453000"
  },
  {
    "text": "This is just stating this guy\nis in the middle of those five elements.\nI know that in every single",
    "start": "3453000",
    "end": "3459000"
  },
  {
    "text": "column. ",
    "start": "3459000",
    "end": "3475000"
  },
  {
    "text": "Here is where the diagram\nstarts to get messy. I am not done yet.\nNow, we also know that this",
    "start": "3475000",
    "end": "3481000"
  },
  {
    "text": "element is the median of the\nmedians. Of all the squared elements,\nthis guy is the middle. And I will draw it so that\nthese are the ones smaller than",
    "start": "3481000",
    "end": "3490000"
  },
  {
    "text": "the median, these are the ones\nlarger than the median. I mean the algorithm cannot do\nthis. It doesn't necessarily know how\nall this works.",
    "start": "3490000",
    "end": "3498000"
  },
  {
    "text": "I guess it could,\nbut this is just for analysis purposes.\nWe know this guy is bigger than that one and bigger than that\none.",
    "start": "3498000",
    "end": "3505000"
  },
  {
    "text": "We don't directly know about\nthe other elements. We just know that that one is\nbigger than both of those and",
    "start": "3505000",
    "end": "3513000"
  },
  {
    "text": "this guy is smaller than these.\nNow, that is as messy as the figure will get.\nNow, the nice thing about less",
    "start": "3513000",
    "end": "3520000"
  },
  {
    "text": "than is that it's a transitive\nrelation. If I have a directed path in\nthis graph, I know that this",
    "start": "3520000",
    "end": "3527000"
  },
  {
    "text": "element is strictly less than\nthat element because this is less than that one and this is\nless than that one.",
    "start": "3527000",
    "end": "3534000"
  },
  {
    "text": "Even though directly I only\nknow within a column and within this middle row,\nI actually know that this",
    "start": "3534000",
    "end": "3542000"
  },
  {
    "text": "element --\nThis is x, by the way. This element is larger than all\nof these elements because it's",
    "start": "3542000",
    "end": "3550000"
  },
  {
    "text": "larger than this one and this\none and each of these is larger than all of those by these\narrows.",
    "start": "3550000",
    "end": "3557000"
  },
  {
    "text": "I also know that all of these\nelements in this rectangle here, and you don't have to do this\nbut I will make the background",
    "start": "3557000",
    "end": "3567000"
  },
  {
    "text": "even more cluttered.\nAll of these elements in this rectangle are greater than or\nequal to this one and all of the",
    "start": "3567000",
    "end": "3577000"
  },
  {
    "text": "elements in this rectangle are\nless than or equal to x. Now, how many are there?\nWell, this is roughly halfway",
    "start": "3577000",
    "end": "3587000"
  },
  {
    "text": "along the set of groups and this\nis 3/5 of these columns. So what we get is that there\nare at least --",
    "start": "3587000",
    "end": "3597000"
  },
  {
    "text": "We have n over 5 groups and we\nhave half of the groups that",
    "start": "3597000",
    "end": "3603554"
  },
  {
    "text": "we're looking at here roughly,\nso let's call that floor of n",
    "start": "3603554",
    "end": "3610222"
  },
  {
    "text": "over 2, and then within each\ngroup we have three elements.",
    "start": "3610222",
    "end": "3616663"
  },
  {
    "text": "So we have at least 3 times\nfloor of floor of n over 5 over",
    "start": "3616664",
    "end": "3623219"
  },
  {
    "text": "2 n floor elements that are less\nthan or equal to x.",
    "start": "3623219",
    "end": "3630000"
  },
  {
    "text": "And we have the same that are\ngreater than or equal to x.",
    "start": "3630000",
    "end": "3636222"
  },
  {
    "text": "Let me simplify this a little\nbit more. I can also give you some more\njustification,",
    "start": "3636222",
    "end": "3645222"
  },
  {
    "text": "and we drew the picture,\nbut just for why this is true.",
    "start": "3645222",
    "end": "3651222"
  },
  {
    "text": "We have at least n over 5 over\n2 group medians that are less",
    "start": "3651222",
    "end": "3657776"
  },
  {
    "text": "than or equal to x.\nThis is the argument we use. We have half of the group\nmedians are less than or equal",
    "start": "3657777",
    "end": "3665809"
  },
  {
    "text": "to x because x is the median of\nthe group median, so that is no big surprise.\nThis is almost an equality but",
    "start": "3665809",
    "end": "3671892"
  },
  {
    "text": "we're making floors so it's\ngreater than or equal to. And then, for each group\nmedian, we know that there are",
    "start": "3671892",
    "end": "3678034"
  },
  {
    "text": "three elements there that are\nless than or equal to that group median.\nSo, by transitivity,",
    "start": "3678034",
    "end": "3683133"
  },
  {
    "text": "they're also less than or equal\nto x. We get this number times three.\nThis is actually just floor of",
    "start": "3683133",
    "end": "3690664"
  },
  {
    "text": "n over 10.\nI was being unnecessarily complicated there,\nbut that is where it came from.",
    "start": "3690664",
    "end": "3698126"
  },
  {
    "text": "What we know is that this thing\nis now at least 3 times n over",
    "start": "3698126",
    "end": "3703544"
  },
  {
    "text": "10, which is roughly 3/10 of\nelements are in one side. In fact, at least 3/10 of the\nelements are in each side.",
    "start": "3703544",
    "end": "3713137"
  },
  {
    "text": "Therefore, each side has at\nmost 7/10 elements roughly.",
    "start": "3713137",
    "end": "3719000"
  },
  {
    "text": "So the number here will be\n7/10. And, if I'm lucky,\n7/10 plus 1/5 is strictly less",
    "start": "3719000",
    "end": "3724642"
  },
  {
    "text": "than one.\nI believe it is, but I have trouble working with\ntenths. I can only handle powers of\ntwo.",
    "start": "3724642",
    "end": "3731357"
  },
  {
    "text": "What we're going to use is a\nminor simplification, which just barely still works,\nis a little bit easier to think",
    "start": "3731357",
    "end": "3739213"
  },
  {
    "text": "about.\nIt's mainly to get rid of this floor because the floor is\nannoying.",
    "start": "3739214",
    "end": "3744285"
  },
  {
    "text": "And we don't really have a\nsloppiness lemma that applies here.\nIt turns out if n is",
    "start": "3744285",
    "end": "3751463"
  },
  {
    "text": "sufficiently large,\n3 times floor of n over 10 is greater than or equal to 1/4.\nQuarters I can handle.",
    "start": "3751463",
    "end": "3758707"
  },
  {
    "text": "The claim is that each group\nhas size at least 1/4, therefore each group has size\nat most 3/4 because there's a",
    "start": "3758707",
    "end": "3766609"
  },
  {
    "text": "quarter on the side.\nThis will be 3/4. And I can definitely tell that\n1/5 is less than 1/4.",
    "start": "3766609",
    "end": "3773047"
  },
  {
    "text": "This is going to add up to\nsomething strictly less than one and then it will work.\nHow is my time?",
    "start": "3773048",
    "end": "3781292"
  },
  {
    "text": "Good.\nAt this point, the rest of the analysis is\neasy. How the heck you would come up\nwith this algorithm,",
    "start": "3781292",
    "end": "3789993"
  },
  {
    "text": "you realize that this is\nclearly a really good choice for finding a partition element,\njust barely good enough that",
    "start": "3789993",
    "end": "3799643"
  },
  {
    "text": "both recursions add up to linear\ntime. Well, that's why it took so\nmany famous people.",
    "start": "3799643",
    "end": "3808000"
  },
  {
    "text": "Especially in quizzes,\nbut I think in general this class, you won't have to come up\nwith an algorithm this clever",
    "start": "3808000",
    "end": "3814241"
  },
  {
    "text": "because you can just use this\nalgorithm to find the median. And the median is a really good\npartition element.",
    "start": "3814241",
    "end": "3820312"
  },
  {
    "text": "Now that you know this\nalgorithm, now that we're beyond 1973, you don't need to know how\nto do this.",
    "start": "3820312",
    "end": "3825815"
  },
  {
    "text": "I mean you should know how this\nalgorithm works, but you don't need to do this\nin another algorithm because you",
    "start": "3825815",
    "end": "3831942"
  },
  {
    "text": "can just say run this algorithm,\nyou will get the median in linear time, and then you can\npartition to the left and the",
    "start": "3831943",
    "end": "3838524"
  },
  {
    "text": "right.\nAnd then the left and the right will have exactly equal size.\nGreat.",
    "start": "3838524",
    "end": "3844737"
  },
  {
    "text": "This is a really powerful\nsubroutine. You could use this all over the\nplace, and you will on Friday.",
    "start": "3844737",
    "end": "3851700"
  },
  {
    "text": "Have I analyzed the running\ntime pretty much? The first step is linear.\nThe second step is T of n over\n925\n01:04:18,806 --> 00:00:05,000 The third step,",
    "start": "3851700",
    "end": "3860027"
  },
  {
    "text": "I didn't write it,\nis linear. And then the last step is just\na recursive call.",
    "start": "3860027",
    "end": "3865410"
  },
  {
    "text": "And now we know that this is\n3/4. ",
    "start": "3865410",
    "end": "3874000"
  },
  {
    "text": "I get this recurrence.\nT of n is, I'll say at most,",
    "start": "3874000",
    "end": "3880000"
  },
  {
    "text": "T of n over 5 plus T of 3/4n.\nYou could have also used 7/10.",
    "start": "3880000",
    "end": "3887079"
  },
  {
    "text": "It would give the same answer,\nbut you would also need a floor",
    "start": "3887079",
    "end": "3894400"
  },
  {
    "text": "so we won't do that.\nI claim that this is linear.",
    "start": "3894400",
    "end": "3901000"
  },
  {
    "text": "How should I prove it?\nSubstitution.",
    "start": "3901000",
    "end": "3907000"
  },
  {
    "text": " Claim that T of n is at most\nagain c times n,",
    "start": "3907000",
    "end": "3915901"
  },
  {
    "text": "that will be enough.\nProof is by substitution. Again, we assume this is true\nfor smaller n.",
    "start": "3915901",
    "end": "3923704"
  },
  {
    "text": "And want to prove it for n.\nWe have T of n is at most this",
    "start": "3923704",
    "end": "3928758"
  },
  {
    "text": "thing.\nT of n over 5. And by induction,\nbecause n of 5 is smaller than",
    "start": "3928758",
    "end": "3936489"
  },
  {
    "text": "n, we know that this is at most\nc. Let me write it as c over 5\ntimes n.",
    "start": "3936489",
    "end": "3943723"
  },
  {
    "text": "Sure, why not.\nThen we have here 3/4cn. And then we have a linear term.\nNow, unfortunately,",
    "start": "3943723",
    "end": "3953085"
  },
  {
    "text": "I have to deal with things that\nare not powers of two.",
    "start": "3953085",
    "end": "3960000"
  },
  {
    "text": "I will cheat and look at my\nnotes. This is also known as 19/20\ntimes c times n plus theta n.",
    "start": "3960000",
    "end": "3966599"
  },
  {
    "text": "And the point is just that this\nis strictly less than one. Because it's strictly less than\none, I can write this as one",
    "start": "3966599",
    "end": "3975202"
  },
  {
    "text": "times c of n minus some\nconstant, here it happens to be 1/20, as long as I have\nsomething left over here,",
    "start": "3975202",
    "end": "3982766"
  },
  {
    "text": "1/20 times c times n.\nThen I have this annoying theta n term which I want to get rid\nof because I want this to be",
    "start": "3982766",
    "end": "3990923"
  },
  {
    "text": "nonnegative.\nBut it is nonnegative, as long as I set c to be\nreally, really large,",
    "start": "3990923",
    "end": "3998432"
  },
  {
    "text": "at least 20 times whatever\nconstant is here. So this is at most c times n\nfor c sufficiently large.",
    "start": "3998432",
    "end": "4006216"
  },
  {
    "text": "And, oh, by the way,\nif n is less than or equal to 50, which we used up here,\nthen T of n is a constant,",
    "start": "4006216",
    "end": "4014404"
  },
  {
    "text": "it doesn't really matter what\nyou do, and T of n is at most c times n for c sufficiently\nlarge.",
    "start": "4014404",
    "end": "4023000"
  },
  {
    "text": "That proves this claim.\nOf course, the constant here is pretty damn big.\nIt depends exactly what the",
    "start": "4023000",
    "end": "4028421"
  },
  {
    "text": "constants and the running times\nare, which depends on your machine, but practically this\nalgorithm is not so hot because",
    "start": "4028421",
    "end": "4034960"
  },
  {
    "text": "the constants are pretty big.\nEven though this element is guaranteed to be somewhere\nvaguely in the middle,",
    "start": "4034960",
    "end": "4040772"
  },
  {
    "text": "and even though these\nrecursions add up to strictly less than n and it's geometric,\nit's geometric because the",
    "start": "4040772",
    "end": "4046752"
  },
  {
    "text": "problem is reducing by at least\na factor of 19/20 each time. So it actually takes a while\nfor the problem to get really",
    "start": "4046752",
    "end": "4054742"
  },
  {
    "text": "small.\nPractically you probably don't want to use this algorithm\nunless you cannot somehow flip",
    "start": "4054742",
    "end": "4060782"
  },
  {
    "text": "coins.\nThe randomized algorithm works really, really fast.\nTheoretically this is your",
    "start": "4060782",
    "end": "4066166"
  },
  {
    "text": "dream, the best you could hope\nfor because it's linear time and you need linear time as\nguaranteed linear time.",
    "start": "4066166",
    "end": "4073257"
  },
  {
    "text": "I will mention,\nbefore we end, an exercise. ",
    "start": "4073257",
    "end": "4083000"
  },
  {
    "text": "Why did we use groups of five?\nWhy not groups of three? As you might guess,\nthe answer is because it",
    "start": "4083000",
    "end": "4089062"
  },
  {
    "text": "doesn't work with groups of\nthree. But it's quite constructive to\nfind out why. If you work through this math\nwith groups of three instead of",
    "start": "4089062",
    "end": "4097562"
  },
  {
    "text": "groups of five,\nyou will find that you don't quite get the problem reduction\nthat you need.",
    "start": "4097562",
    "end": "4103062"
  },
  {
    "text": "Five is the smallest number for\nwhich this works. It would work with seven,\nbut theoretically not any",
    "start": "4103062",
    "end": "4110175"
  },
  {
    "text": "better than a constant factor.\nAny questions? All right.\nThen recitation Friday. Homework lab Sunday.\nProblem set due Monday.",
    "start": "4110176",
    "end": "4117800"
  },
  {
    "text": "Quiz one in two weeks.",
    "start": "4117801",
    "end": "4120000"
  }
]