[
  {
    "start": "4490",
    "end": "4490"
  },
  {
    "text": "The cp parameter-- cp stands\nfor complexity parameter.",
    "start": "4490",
    "end": "10219"
  },
  {
    "text": "Recall that the\nfirst tree we made",
    "start": "10220",
    "end": "12180"
  },
  {
    "text": "using latitude and longitude\nonly had many splits,",
    "start": "12180",
    "end": "15630"
  },
  {
    "text": "but we were able to trim it\nwithout losing much accuracy.",
    "start": "15630",
    "end": "19370"
  },
  {
    "text": "The intuition we gain is,\nhaving too many splits",
    "start": "19370",
    "end": "22010"
  },
  {
    "text": "is bad for generalization--\nthat is, performance on the test",
    "start": "22010",
    "end": "25680"
  },
  {
    "text": "set-- so we should\npenalize the complexity.",
    "start": "25680",
    "end": "27930"
  },
  {
    "text": "Let us define RSS to be the\nresidual sum of squares, also",
    "start": "30710",
    "end": "35800"
  },
  {
    "text": "known as the sum of\nsquare differences.",
    "start": "35800",
    "end": "39930"
  },
  {
    "text": "Our goal when\nbuilding the tree is",
    "start": "39930",
    "end": "41740"
  },
  {
    "text": "to minimize the RSS\nby making splits,",
    "start": "41740",
    "end": "44630"
  },
  {
    "text": "but we want to penalize\nhaving too many splits now.",
    "start": "44630",
    "end": "48780"
  },
  {
    "text": "Define S to be the\nnumber of splits,",
    "start": "48780",
    "end": "51210"
  },
  {
    "text": "and lambda to be our penalty.",
    "start": "51210",
    "end": "53899"
  },
  {
    "text": "Our new goal is to\nfind a tree that",
    "start": "53900",
    "end": "56050"
  },
  {
    "text": "minimizes the sum of\nthe RSS at each leaf,",
    "start": "56050",
    "end": "60079"
  },
  {
    "text": "plus lambda, times S,\nfor the number of splits.",
    "start": "60080",
    "end": "64730"
  },
  {
    "text": "Let us consider this\nfollowing example.",
    "start": "64730",
    "end": "68289"
  },
  {
    "text": "Here we have set lambda\nto be equal to 0.5.",
    "start": "68289",
    "end": "72280"
  },
  {
    "text": "Initially, we have a\ntree with no splits.",
    "start": "72280",
    "end": "74840"
  },
  {
    "text": "We simply take the\naverage of the data.",
    "start": "74840",
    "end": "77359"
  },
  {
    "text": "The RSS in this case is 5, thus\nour total penalty is also 5.",
    "start": "77360",
    "end": "83190"
  },
  {
    "text": "If we make one split,\nwe now have two leaves.",
    "start": "83190",
    "end": "87150"
  },
  {
    "text": "At each of these leaves, say,\nwe have an error, or RSS of 2.",
    "start": "87150",
    "end": "92600"
  },
  {
    "text": "The total RSS error\nis then 2+2=4.",
    "start": "92600",
    "end": "97039"
  },
  {
    "text": "And the total penalty is\n4+0.5*1, the number of splits.",
    "start": "97039",
    "end": "103370"
  },
  {
    "text": "Our total penalty\nin this case is 4.5.",
    "start": "103370",
    "end": "107410"
  },
  {
    "text": "If we split again on\none of our leaves,",
    "start": "107410",
    "end": "110190"
  },
  {
    "text": "we now have a total of\nthree leaves for two splits.",
    "start": "110190",
    "end": "114100"
  },
  {
    "text": "The error at our\nleft-most leaf is 1.",
    "start": "114100",
    "end": "116939"
  },
  {
    "text": "The next leaf has\nan error of 0.8.",
    "start": "116940",
    "end": "119600"
  },
  {
    "text": "And the next leaf has an error\nof 2, for a total error of 3.8.",
    "start": "119600",
    "end": "124340"
  },
  {
    "text": "The total penalty\nis thus 3.8+0.5*2,",
    "start": "124340",
    "end": "129629"
  },
  {
    "text": "for a total penalty of 4.8.",
    "start": "129630",
    "end": "134220"
  },
  {
    "text": "Notice that if we pick\na large value of lambda,",
    "start": "134220",
    "end": "136950"
  },
  {
    "text": "we won't make many\nsplits, because you",
    "start": "136950",
    "end": "138970"
  },
  {
    "text": "pay a big price for every\nadditional split that",
    "start": "138970",
    "end": "141380"
  },
  {
    "text": "will outweigh the\ndecrease in error.",
    "start": "141380",
    "end": "144470"
  },
  {
    "text": "If we pick a small,\nor 0 value of lambda,",
    "start": "144470",
    "end": "147040"
  },
  {
    "text": "it will make splits until it\nno longer decreases the error.",
    "start": "147040",
    "end": "149959"
  },
  {
    "text": "You may be wondering at this\npoint, the definition of cp",
    "start": "152650",
    "end": "155689"
  },
  {
    "text": "is what, exactly?",
    "start": "155690",
    "end": "157750"
  },
  {
    "text": "Well, it's very closely\nrelated to lambda.",
    "start": "157750",
    "end": "161200"
  },
  {
    "text": "Considering a tree\nwith no splits,",
    "start": "161200",
    "end": "164020"
  },
  {
    "text": "we simply take the\naverage of our data,",
    "start": "164020",
    "end": "166740"
  },
  {
    "text": "calculate RSS for\nthat so-called tree,",
    "start": "166740",
    "end": "168890"
  },
  {
    "text": "and let us call that\nRSS for no splits.",
    "start": "168890",
    "end": "172540"
  },
  {
    "text": "Then we can define\ncp=lambda/RSS(no splits).",
    "start": "172540",
    "end": "174370"
  },
  {
    "text": "When you're actually\nusing cp in your R code,",
    "start": "178950",
    "end": "181879"
  },
  {
    "text": "you don't need to think\nexactly what it means-- just",
    "start": "181880",
    "end": "185000"
  },
  {
    "text": "that small numbers of cp\nencourage large trees,",
    "start": "185000",
    "end": "188420"
  },
  {
    "text": "and large values of cp\nencourage small trees.",
    "start": "188420",
    "end": "192400"
  },
  {
    "text": "Let's go back to R now,\nand apply cross-validation",
    "start": "192400",
    "end": "195450"
  },
  {
    "text": "to our training data.",
    "start": "195450",
    "end": "197720"
  }
]