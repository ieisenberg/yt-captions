[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "7029"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "7030",
    "end": "13990"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13990",
    "end": "30000"
  },
  {
    "start": "30000",
    "end": "79000"
  },
  {
    "text": "ANA BELL: All right\neveryone, let's get started. So good afternoon.",
    "start": "30000",
    "end": "35410"
  },
  {
    "text": "So this is the 3rd\nlecture of 6.0001 and 600. As always, please\ndownload slides and code",
    "start": "35410",
    "end": "42149"
  },
  {
    "text": "to follow along. So a quick recap of\nwhat we did last time. Last time, we talked about\nstrings as a new object type,",
    "start": "42150",
    "end": "51095"
  },
  {
    "text": "as sequences of characters. And then we introduced\ntwo new concepts",
    "start": "51095",
    "end": "56857"
  },
  {
    "text": "that allowed us to\nwrite slightly more complicated programs. So we introduced branching, with\nthese keywords, if, elif, else.",
    "start": "56857",
    "end": "63950"
  },
  {
    "text": "And branching allowed\nus to write programs that, us, as programmers,\ncould introduce decisions",
    "start": "63950",
    "end": "69600"
  },
  {
    "text": "into our programs. And then we introduced two\ndifferent kinds of loops, while loops and for loops.",
    "start": "69600",
    "end": "74632"
  },
  {
    "text": "And those also added a\nlittle bit of complexity to our programs. Today, we're going to talk a\nlittle bit more about strings.",
    "start": "74632",
    "end": "81310"
  },
  {
    "start": "79000",
    "end": "97000"
  },
  {
    "text": "So we're going to see a\ncouple of more operations that you can do on strings\nand string objects.",
    "start": "81310",
    "end": "86490"
  },
  {
    "text": "And then we're going\nto talk about three different algorithms,\na guess and check algorithm, an\napproximate solution",
    "start": "86490",
    "end": "92970"
  },
  {
    "text": "algorithm, and a bisection\nmethod algorithm.",
    "start": "92970",
    "end": "98390"
  },
  {
    "text": "So let's dive right in. We'll talk a little bit\nabout strings, first. So strings, we thought of them\nas sequences of characters,",
    "start": "98390",
    "end": "105050"
  },
  {
    "text": "case sensitive, as we saw in\nprograms we wrote last lecture.",
    "start": "105050",
    "end": "110300"
  },
  {
    "text": "And strings are objects. And we can do all of these\noperations on string objects,",
    "start": "110300",
    "end": "116930"
  },
  {
    "text": "like test if they're equal, less\nthan, greater than, and so on. It turns out, we can do more\nthan just concatenate two",
    "start": "116930",
    "end": "124140"
  },
  {
    "text": "strings together or do\nthese little tests on them. So we're going to start\nintroducing the idea",
    "start": "124140",
    "end": "131650"
  },
  {
    "text": "of a function or a procedure. And we're going to see\nmore about functions and how you can write your\nown functions next lecture.",
    "start": "131650",
    "end": "138900"
  },
  {
    "text": "But for today, you can\nthink of a function as sort of a procedure that\ndoes something for you.",
    "start": "138900",
    "end": "144490"
  },
  {
    "text": "Someone already wrote this. So the first one\nwe're going to look at is a pretty popular function.",
    "start": "144490",
    "end": "150770"
  },
  {
    "text": "And when applied on a string,\nthis function, called len, will tell you the\nlength of a string.",
    "start": "150770",
    "end": "156990"
  },
  {
    "text": "So that's going to tell\nyou how many characters are in the string.",
    "start": "156990",
    "end": "162230"
  },
  {
    "text": "And characters are going\nto be letters, digits, special characters,\nspaces, and so on. So it's just going to\ncount how many characters",
    "start": "162230",
    "end": "169440"
  },
  {
    "text": "are in a string. So if I have the string\ns is equal to \"abc\"-- remember a string is in\nquotation marks-- then,",
    "start": "169440",
    "end": "177360"
  },
  {
    "text": "if I do this, if I write\nthis expression, len s, here,",
    "start": "177360",
    "end": "183480"
  },
  {
    "text": "since it's an expression,\nit has a value. So it evaluates to\na certain value. And by definition, it's\ngoing to tell me what",
    "start": "183480",
    "end": "190290"
  },
  {
    "text": "the length of the string,\nwhich is 3 characters long. ",
    "start": "190290",
    "end": "199810"
  },
  {
    "start": "198000",
    "end": "322000"
  },
  {
    "text": "Another thing that\nwe can do on strings is, since they're a\nsequence of characters, I might want to get\nwhat character is",
    "start": "199810",
    "end": "205959"
  },
  {
    "text": "at a certain position. So we do this using this\nfancy word called indexing.",
    "start": "205960",
    "end": "213069"
  },
  {
    "text": "But pretty much what\nindexing into a string means is you're going\nto tell Python, I",
    "start": "213070",
    "end": "218920"
  },
  {
    "text": "want to know the character,\nat this certain position or at this certain\nindex, inside my sting.",
    "start": "218920",
    "end": "225640"
  },
  {
    "text": "So once again, let's use this\nstring, s is equal to \"abc.\" And let's index into it.",
    "start": "225640",
    "end": "231730"
  },
  {
    "text": "So in computer science, we start\nfrom 0, counting by convention. Notice, we had a problem\nset 0 in this class.",
    "start": "231730",
    "end": "238540"
  },
  {
    "text": "Python is no different. So in Python, you start\nindexing at position 0.",
    "start": "238540",
    "end": "245709"
  },
  {
    "text": "Or you start indexing at 0. So the first character, in your\nstring, we say is at position 0",
    "start": "245710",
    "end": "253629"
  },
  {
    "text": "or at index 0. The next character in\nthe string is at index 1. And the next character in\nthe string is at index 2.",
    "start": "253630",
    "end": "260078"
  },
  {
    "text": " In Python, it turns\nout, you can also use negative numbers to index.",
    "start": "260079",
    "end": "267710"
  },
  {
    "text": "And if you index into the string\nwith negative 1, for example,",
    "start": "267710",
    "end": "275759"
  },
  {
    "text": "that means that you want the\nlast character in the string. So the last character\nin your string is always going to be\nat position negative 1,",
    "start": "275760",
    "end": "283106"
  },
  {
    "text": "the second-to-last\ncharacter is at negative 2, third-to-last character\nis at negative 3, and so on and so on.",
    "start": "283106",
    "end": "290034"
  },
  {
    "text": "So the way you\nindex into a string is with these square\nbrackets, here. And this is the notation.",
    "start": "290034",
    "end": "296520"
  },
  {
    "text": "So if I want the character\nat position 0 or at index 0, I say s, which is the\nstring I want to index into.",
    "start": "296520",
    "end": "303979"
  },
  {
    "text": "And then, inside\nthe square brackets, I say what index I want. So s at index 0 is going to\nbe the value \"a.\" s at index 1",
    "start": "303979",
    "end": "312710"
  },
  {
    "text": "is going to be the value\n\"b,\" and so on and so on. And we can also do\nnegative indexing, as well.",
    "start": "312710",
    "end": "321380"
  },
  {
    "text": " I added this in here. If you do try to\nindex into a string",
    "start": "321380",
    "end": "327360"
  },
  {
    "start": "322000",
    "end": "644000"
  },
  {
    "text": "beyond the limits\nof the string-- and we can even\ntry this out, just to show you that it's not the\nend of the world if we do that.",
    "start": "327360",
    "end": "335490"
  },
  {
    "text": "If we have s is equal to \"abc,\"\nand we have s at position 20,",
    "start": "335490",
    "end": "341130"
  },
  {
    "text": "for example,\nobviously, my string is only length 3, so\nwhat's at position 20?",
    "start": "341130",
    "end": "347000"
  },
  {
    "text": "I get an error. I call this angry\ntext, here, in Python. But really, the most\nrelevant thing to note",
    "start": "347000",
    "end": "353440"
  },
  {
    "text": "is these last couple\nof lines here. This tells you what\nline is problematic.",
    "start": "353440",
    "end": "361370"
  },
  {
    "text": "So s at position\n20 has an issue. And this last line here tells\nme what actual error I have.",
    "start": "361370",
    "end": "368800"
  },
  {
    "text": "So it's an index\nerror, which means I'm trying to index too\nfar into the string, because it only has\nthree characters.",
    "start": "368800",
    "end": "374670"
  },
  {
    "start": "374670",
    "end": "382230"
  },
  {
    "text": "So it's nice to be able to\nget a single character out of my string. But sometimes, I might\nwant to get a substring.",
    "start": "382230",
    "end": "389310"
  },
  {
    "text": "So I want to start at\nthe first character and go halfway into\nthe string, or I",
    "start": "389310",
    "end": "394500"
  },
  {
    "text": "want to take a few\ncharacters in between, or I want to skip every other\nletter or something like that",
    "start": "394500",
    "end": "400690"
  },
  {
    "text": "in my string. So if I want to do this slightly\nmore complicated interaction",
    "start": "400690",
    "end": "406479"
  },
  {
    "text": "with strings, we call that\nslicing, slicing into a string.",
    "start": "406480",
    "end": "412540"
  },
  {
    "text": "And this notation here should\nseem a little bit familiar, because we saw it last lecture\nwhen we did it with range.",
    "start": "412540",
    "end": "419710"
  },
  {
    "text": "We had a start,\nstop, and a step. The notation was a\nlittle bit different, because, in range, we had\nopen-close parentheses",
    "start": "419710",
    "end": "427210"
  },
  {
    "text": "and commas in between. But except for that, this\nsort of works the same.",
    "start": "427210",
    "end": "433930"
  },
  {
    "text": "The start is the\nindex, starting from 0, from where you want to\nslice into this string.",
    "start": "433930",
    "end": "440110"
  },
  {
    "text": "The stop is the stop index. So you're going to go\nup until stop minus 1",
    "start": "440110",
    "end": "445780"
  },
  {
    "text": "and take that index. And then the step is how many\nletters you wish to take.",
    "start": "445780",
    "end": "452030"
  },
  {
    "text": " So this is the\nfull notation here.",
    "start": "452030",
    "end": "457400"
  },
  {
    "text": "But sometimes, you\ncan not give it a third sort of number in here.",
    "start": "457400",
    "end": "464552"
  },
  {
    "text": "So if you only give\nit two numbers, then, to Python, that represents\njust the start and the stop. And by default, step\nis going to be 1.",
    "start": "464552",
    "end": "470800"
  },
  {
    "text": " And there's a lot of other\nthings you can do with strings.",
    "start": "470800",
    "end": "477500"
  },
  {
    "text": "You can omit numbers and\njust leave colons in Python. ",
    "start": "477500",
    "end": "483160"
  },
  {
    "text": "By definition, the way\nthat whoever wrote slicing had decided, if\nyou omit numbers,",
    "start": "483160",
    "end": "490360"
  },
  {
    "text": "then it's going to be\nequivalent to these things here. So we slice using square\nbrackets, just like indexing.",
    "start": "490360",
    "end": "497490"
  },
  {
    "text": "Except now, we can\ngive it two numbers. So with this string, s, if\nwe slice into the string s,",
    "start": "497490",
    "end": "511490"
  },
  {
    "text": "we start from index 3\nand go up until index 6. So if we have abcdefgh, this is\nposition 0, 1, 2, 3, 4, 5, 6,",
    "start": "511490",
    "end": "527279"
  },
  {
    "text": "7.  And you just count.",
    "start": "527280",
    "end": "532509"
  },
  {
    "text": "So s, starting from 3 and going\ntill 6, is going to start here,",
    "start": "532510",
    "end": "538920"
  },
  {
    "text": "3. So it's going to come\nup with-- sorry d.",
    "start": "538920",
    "end": "544449"
  },
  {
    "text": "And then we're going to take e. And then we're going to take f. And since we're going\nuntil stop minus 1,",
    "start": "544450",
    "end": "550630"
  },
  {
    "text": "we're not going to take g. Because this is position 6, and\nwe're going until 6 minus 1.",
    "start": "550630",
    "end": "557050"
  },
  {
    "text": " The next one here, 3, 6, 2\nis going every other one.",
    "start": "557050",
    "end": "566240"
  },
  {
    "text": "So we start at 3, and then\nwe skip every other one, so we go d but not e, and\nthen f, and then stop.",
    "start": "566240",
    "end": "573290"
  },
  {
    "text": " If you do s and then nothing\ninside except colons,",
    "start": "573290",
    "end": "583620"
  },
  {
    "text": "notice that you're going\nto have s, and then nothing, and then colon,\nnothing, colon, nothing.",
    "start": "583620",
    "end": "589470"
  },
  {
    "text": "So nothing for start, nothing\nfor stop, nothing for step. And that's just going to value\nit to the string, itself.",
    "start": "589470",
    "end": "596310"
  },
  {
    "text": "It's the same as 0 to the\nlength s going every step. This one might\nactually be useful.",
    "start": "596310",
    "end": "602970"
  },
  {
    "text": "It reverses the string\nautomatically for you. So with this one\nlittle line here, you can get the\ninverse of your string.",
    "start": "602970",
    "end": "610210"
  },
  {
    "text": "And that's equivalent to that.  So the minus 1 represents\nstarting from the end",
    "start": "610210",
    "end": "616640"
  },
  {
    "text": "and going back every letter. And then this one's a little\nbit more complicated but also",
    "start": "616640",
    "end": "623140"
  },
  {
    "text": "not too bad. ",
    "start": "623140",
    "end": "630019"
  },
  {
    "text": "So as we're doing\nthese string slices, again, if you're unsure\nwhat something does,",
    "start": "630020",
    "end": "635540"
  },
  {
    "text": "just type it into Spider. And you might be surprised. You might not be. But it's a good way\nto check yourself,",
    "start": "635540",
    "end": "641183"
  },
  {
    "text": "to make sure you're\nunderstanding what's happening. One thing I want to\nmention, and it's",
    "start": "641183",
    "end": "648310"
  },
  {
    "start": "644000",
    "end": "783000"
  },
  {
    "text": "good to keep this in\nthe back of your mind. We're going to come\nback to this as we start talking about slightly\nmore complicated object types.",
    "start": "648310",
    "end": "656290"
  },
  {
    "text": "But strings are immutable. So just keep this word\nin the back of your mind as we go through this class.",
    "start": "656290",
    "end": "661980"
  },
  {
    "text": "And what I mean by this is\nthat an actual string object, once it's created,\ncannot be modified.",
    "start": "661980",
    "end": "669040"
  },
  {
    "text": "This might not mean\nanything right now. But let me just draw\na little something.",
    "start": "669040",
    "end": "674940"
  },
  {
    "text": "Let's say I have this\nstring, s is equal to hello. Remember, in the\nfirst lecture, we drew a diagram\nsort of like this.",
    "start": "674940",
    "end": "681080"
  },
  {
    "text": "This is my memory. I have this object \"hello.\" And this object, \"hello\" is\nbound to this variable s.",
    "start": "681080",
    "end": "689360"
  },
  {
    "text": "So now I can access the object\n\"hello\" using this variable s.",
    "start": "689360",
    "end": "696339"
  },
  {
    "text": "Now you might think, well, since\nI could index into a string, I might be able to just say\nsomething like, s at position 0",
    "start": "696340",
    "end": "703600"
  },
  {
    "text": "is equal to y. And that will just change\nthe little h into a y, and I'll have a new object.",
    "start": "703600",
    "end": "709845"
  },
  {
    "text": "Well strings are immutable,\nwhich means, in Python, you're not actually\nallowed to do this. And it gives you an error\nif you do try to do that.",
    "start": "709845",
    "end": "715444"
  },
  {
    "text": " If you want the variable s to\npoint to the string, Y-E-L-L-O,",
    "start": "715444",
    "end": "723954"
  },
  {
    "text": "you could just say s\nis equal to Y-E-L-L-O. Or you could do string\noperations like this.",
    "start": "723954",
    "end": "730970"
  },
  {
    "text": "And this takes the y\nand it concatenates it to the string s,\nall of the elements",
    "start": "730970",
    "end": "738020"
  },
  {
    "text": "starting from position\n1, which is e, l, l, o. So this makes Y-E-L-L-O.",
    "start": "738020",
    "end": "744570"
  },
  {
    "text": "Now internally,\nwhat happens when I write this line\nis Python says, OK, I'm going to break my\nbond with this original object",
    "start": "744570",
    "end": "751329"
  },
  {
    "text": "\"hello.\" I'm going to bind\nmy string variable",
    "start": "751330",
    "end": "756610"
  },
  {
    "text": "s to the new object \"yello.\"\nand this other, old object still is in memory somewhere.",
    "start": "756610",
    "end": "762459"
  },
  {
    "text": "But it's an entirely different\nobject that I've created here. Again, it might not\nmean anything right now,",
    "start": "762460",
    "end": "769200"
  },
  {
    "text": "but just keep this in\nthe back of your mind, strings are immutable. ",
    "start": "769200",
    "end": "779450"
  },
  {
    "text": "So the next thing I\nwant to talk about is a little bit of\nrecap on for loops.",
    "start": "779450",
    "end": "786600"
  },
  {
    "start": "783000",
    "end": "960000"
  },
  {
    "text": "And we're going to see how\nwe can apply for loops, very easily, to write very\nnice, readable code when",
    "start": "786600",
    "end": "792620"
  },
  {
    "text": "dealing with strings. So remember that for\nloops had a loop variable.",
    "start": "792620",
    "end": "798380"
  },
  {
    "text": "My loop variable being this var,\nhere, in this particular case. It can be anything you want.",
    "start": "798380",
    "end": "804500"
  },
  {
    "text": "And this variable, in\nthis particular case, iterates over this sequence\nof numbers, 0, 1, 2, 3, 4.",
    "start": "804500",
    "end": "812530"
  },
  {
    "text": "So the very first time through\nthe loop, var has a value of 0. It does the expressions\nin the loop.",
    "start": "812530",
    "end": "818600"
  },
  {
    "text": "As soon as they're done,\nvar takes the value 1. It does all the\nexpressions in the loop. And then var takes the value\n2, and it does that all",
    "start": "818600",
    "end": "825940"
  },
  {
    "text": "the way up until 0, 1, 2. And the last time it goes around\nis with var is equal to 3.",
    "start": "825940",
    "end": "833430"
  },
  {
    "text": "And remember, we said that\nwe can customize our range in order to start\nfrom a custom value to end at a different value\nand to skip certain numbers.",
    "start": "833430",
    "end": "841589"
  },
  {
    "text": " So, so far, we've only\nbeen using for loops",
    "start": "841590",
    "end": "847370"
  },
  {
    "text": "over a sequence of numbers. But actually, for loops are a\nlot more powerful than that. You can use them to iterate\nover any sequence of values",
    "start": "847370",
    "end": "856970"
  },
  {
    "text": "not just numbers\nbut also strings. So here are two pieces of code,\nthis one and this one here.",
    "start": "856970",
    "end": "868540"
  },
  {
    "text": "These two pieces of code\nboth do the exact same thing. ",
    "start": "868540",
    "end": "873620"
  },
  {
    "text": "To me, possibly to\nyou, this one looks a lot more readable than this\none, just at a first glance.",
    "start": "873620",
    "end": "880000"
  },
  {
    "text": " If I were to read this one,\njust using the keywords",
    "start": "880000",
    "end": "886709"
  },
  {
    "text": "and variables here, it would\nsound like broken English.",
    "start": "886710",
    "end": "894120"
  },
  {
    "text": "But you could decipher\nwhat I'm trying to say. For a char in a string s,\nif the char is equal to \"i\"",
    "start": "894120",
    "end": "901590"
  },
  {
    "text": "or a char is equal to \"u,\"\nprint \"There is an i or a u.\"",
    "start": "901590",
    "end": "907065"
  },
  {
    "text": "It sounds weird, but\nyou could probably tell what I was\ntrying to do here. Whereas up here,\nit's a little more",
    "start": "907065",
    "end": "914130"
  },
  {
    "text": "complicated to tell\nwhat I'm doing. You have to sort of think\nabout it a little bit. For some index in\nthis range of numbers,",
    "start": "914130",
    "end": "920490"
  },
  {
    "text": "0 through the\nlength of the string s, if s, at position index, is\nan \"i\" or s at position index",
    "start": "920490",
    "end": "928889"
  },
  {
    "text": "is a \"u\" print, \"There\nis an i or a u.\" Both of these codes just\ngo through the string s.",
    "start": "928890",
    "end": "936940"
  },
  {
    "text": "And if it encounters a\nletter that's an i or a u, it's just going to print\nout this string here.",
    "start": "936940",
    "end": "942010"
  },
  {
    "text": "But this bottom one is\na lot more pythonic. It's an actual word created\nby the Python community.",
    "start": "942010",
    "end": "948460"
  },
  {
    "text": "And it just looks pretty, right? You can tell what this\ncode's supposed to do.",
    "start": "948460",
    "end": "955724"
  },
  {
    "text": "Whereas this one is a little\nbit harder to decipher. ",
    "start": "955724",
    "end": "961620"
  },
  {
    "start": "960000",
    "end": "1289000"
  },
  {
    "text": "So that's sort of an\nillustration of a for loop over a sequence of characters.",
    "start": "961620",
    "end": "966990"
  },
  {
    "text": "So char is going to be\na loop variable, still. And the loop variable,\ninstead of iterating over",
    "start": "966990",
    "end": "973920"
  },
  {
    "text": "a set of numbers, it's going\nto iterate over every character in s, directly.",
    "start": "973920",
    "end": "979170"
  },
  {
    "text": "And char is going\nto be a character. It's going to be a letter.",
    "start": "979170",
    "end": "984461"
  },
  {
    "text": " So here's a more\ncomplicated example.",
    "start": "984461",
    "end": "991690"
  },
  {
    "text": "I wrote this code a\ncouple of years ago. And it was my attempt at\ncreating robot cheerleaders ,",
    "start": "991690",
    "end": "997870"
  },
  {
    "text": "because I needed\nsome motivation. And then I googled, last\nnight, \"robot cheerleaders,\"",
    "start": "997870",
    "end": "1004410"
  },
  {
    "text": "and was not disappointed. Created this GIF. It looks pretty cool. And it looks like they\nkind of stole my idea.",
    "start": "1004410",
    "end": "1010920"
  },
  {
    "text": "But that's fine. So let's look at what this\ncode's supposed to do.",
    "start": "1010920",
    "end": "1016107"
  },
  {
    "text": "I'm going to run it. ",
    "start": "1016107",
    "end": "1025467"
  },
  {
    "text": "I'm going to run it, and\nthen we'll go through it. ",
    "start": "1025467",
    "end": "1032199"
  },
  {
    "text": "All right, it prints out,\n\"I will cheer for you! Enter a word.\" You know what, I like robots,\nso I'll put in \"ROBOTS.\"",
    "start": "1032200",
    "end": "1040530"
  },
  {
    "text": "How enthusiastic\nam I about robots? Let's say 6.",
    "start": "1040530",
    "end": "1045939"
  },
  {
    "text": "So what this is going to\nprint is-- it's a cheerleader, right? \"Give me an r, r.\" \"Give\nme an o, o.\" \"Give me a b, b,\"",
    "start": "1045940",
    "end": "1052270"
  },
  {
    "text": "and so on and so on. \"What does that spell? ROBOTS.\" And it's going to print it 6\ntimes, because I'm 6 out of 10",
    "start": "1052270",
    "end": "1059320"
  },
  {
    "text": "enthusiastic about robots. So that's pretty much what\nthat code's supposed to do. And you can write it using\nwhat we've learned so far.",
    "start": "1059320",
    "end": "1065950"
  },
  {
    "text": " Now let's go through\nit a little bit. And I'm going to show\nyou just how easy it",
    "start": "1065950",
    "end": "1072570"
  },
  {
    "text": "is to convert this code using\na for loop over characters. Right now, what it does is\nit asks the user for input,",
    "start": "1072570",
    "end": "1083679"
  },
  {
    "text": "so a word and a number. And then it does this\nthing, here, right?",
    "start": "1083680",
    "end": "1089220"
  },
  {
    "text": "First, it uses a while loop. And second, it uses indexing.",
    "start": "1089220",
    "end": "1096740"
  },
  {
    "text": "And what tips you off\nthat it's using indexing is it's using the square\nbracket, here, into the word.",
    "start": "1096740",
    "end": "1104240"
  },
  {
    "text": " And obviously, it's\nusing a while loop.",
    "start": "1104240",
    "end": "1110480"
  },
  {
    "text": "And it has to first create\na counter, initialize it. And then, down here, it's\ngoing to increment it",
    "start": "1110480",
    "end": "1116630"
  },
  {
    "text": "inside the while loop. If you remember,\nthat's sort of what we need to do for while loops.",
    "start": "1116630",
    "end": "1124290"
  },
  {
    "text": "So it's going to start at 0,\nand it's just basically going to go through index i is\nequal to 0, 1, 2, 3 4, which",
    "start": "1124290",
    "end": "1130650"
  },
  {
    "text": "is going to go all the way to\nthe end of the word, whatever the user typed in, in\nthis case \"ROBOTS.\"",
    "start": "1130650",
    "end": "1136710"
  },
  {
    "text": "It's going to get the\ncharacter at that position. word at position i is\ngoing to be a character.",
    "start": "1136710",
    "end": "1145470"
  },
  {
    "text": "This line here is just for the\ncheerleading to make sense.",
    "start": "1145470",
    "end": "1154850"
  },
  {
    "text": "It's just to take\ncare of letters that make sense to use an, right?",
    "start": "1154850",
    "end": "1160340"
  },
  {
    "text": "So give me a b, give me an b. So give me an b does\nnot make sense, right?",
    "start": "1160340",
    "end": "1165500"
  },
  {
    "text": "So that's just\ntaking care of that. And I'm using this\nin keyword to check",
    "start": "1165500",
    "end": "1171500"
  },
  {
    "text": "whether the character-- so\nthe character, r, for example, in robots-- is\ninside an letters.",
    "start": "1171500",
    "end": "1179240"
  },
  {
    "text": "And an letters I've defined\nup here, which is these are all the letters\nthat make sense to put an an before the letter.",
    "start": "1179240",
    "end": "1188080"
  },
  {
    "text": "So give me an r for\nexample, here, on the right. ",
    "start": "1188080",
    "end": "1195950"
  },
  {
    "text": "And so if it makes sense to\nuse an before the letter, use that, and otherwise\nuse just an a.",
    "start": "1195950",
    "end": "1203990"
  },
  {
    "text": "And after I'm done, I say,\n\"What does that spell?\" And then it's just a for loop\nthat goes times many times",
    "start": "1203990",
    "end": "1210470"
  },
  {
    "text": "and prints out the word\nand the exclamation mark. ",
    "start": "1210470",
    "end": "1223000"
  },
  {
    "text": "So this code might have been\na little bit more intuitive if I rewrote it or\nif I'd originally",
    "start": "1223000",
    "end": "1229059"
  },
  {
    "text": "written it with a for loop. So this part here, the\nwhile loop and indexing",
    "start": "1229060",
    "end": "1236800"
  },
  {
    "text": "and creating my\noriginal counter, we can get rid of that.",
    "start": "1236800",
    "end": "1241990"
  },
  {
    "text": "And we can replace it with\nthis, for char in word. I'm originally using\nchar, so I can use char",
    "start": "1241990",
    "end": "1249380"
  },
  {
    "text": "as my loop variable again. And simply, I'm just going to\niterate over the word, itself.",
    "start": "1249380",
    "end": "1255289"
  },
  {
    "text": " So now, instead of\nhaving this mess here, I have a one-liner that says,\nfor every character in my word,",
    "start": "1255290",
    "end": "1263480"
  },
  {
    "text": "do all this stuff here. So that remains the same. And then I don't even need to\nincrement a counter variable,",
    "start": "1263480",
    "end": "1268730"
  },
  {
    "text": "because I'm not using\nwhile loops anymore. I'm just using a for loop. ",
    "start": "1268730",
    "end": "1274070"
  },
  {
    "text": "So the code becomes-- delete\nthat-- for char in word.",
    "start": "1274070",
    "end": "1280399"
  },
  {
    "text": "And then delete that. And that does the\nexact same thing. And it's a lot more readable.",
    "start": "1280400",
    "end": "1286400"
  },
  {
    "text": " So this was our toolbox at\nthe beginning of this course.",
    "start": "1286400",
    "end": "1294769"
  },
  {
    "start": "1289000",
    "end": "1333000"
  },
  {
    "text": "We are two and half,\nI guess, lectures in. These are the things\nwe've added to it. We know integer,\nfloats, Booleans.",
    "start": "1294770",
    "end": "1302540"
  },
  {
    "text": "We know a bit of string\nmanipulation, math operations. We added, recently, these\nconditionals and branching",
    "start": "1302540",
    "end": "1308870"
  },
  {
    "text": "to write slightly more\ninteresting programs. And now we have loops,\nfor and while loops",
    "start": "1308870",
    "end": "1313910"
  },
  {
    "text": "to add interesting and\nmore complicated programs. So with these, the second\npart of this lecture",
    "start": "1313910",
    "end": "1319010"
  },
  {
    "text": "is going to be looking at\nthree different algorithms. That's the sort of\ncomputer science part of this class, Introduction\nto Computer Science",
    "start": "1319010",
    "end": "1326180"
  },
  {
    "text": "and Programming using Python. Don't let the word\nalgorithm scare you. ",
    "start": "1326180",
    "end": "1334520"
  },
  {
    "start": "1333000",
    "end": "1355000"
  },
  {
    "text": "They're not that complicated. You just have to sort of\nthink a little bit about them.",
    "start": "1334520",
    "end": "1339950"
  },
  {
    "text": "And you'll be able to get them. So we're going to look\nat three algorithms, all",
    "start": "1339950",
    "end": "1345200"
  },
  {
    "text": "in the context of solving\none problem, which is finding the cube root. The first algorithm\nis guess and check,",
    "start": "1345200",
    "end": "1350709"
  },
  {
    "text": "then we're going to look at\nan approximation algorithm, and then a bisection search.",
    "start": "1350709",
    "end": "1356720"
  },
  {
    "start": "1355000",
    "end": "1678000"
  },
  {
    "text": "So the first is the\nguess and check method. You might have done this,\nin math, in high school.",
    "start": "1356720",
    "end": "1364840"
  },
  {
    "text": "The guess and check method\nis also sometimes called exhaustive enumeration. And you'll see why. So given a problem, let's say,\nfind the cube root of a number,",
    "start": "1364840",
    "end": "1373380"
  },
  {
    "text": "let's say you can guess a\nstarting value for a solution. ",
    "start": "1373380",
    "end": "1379049"
  },
  {
    "text": "The guess and check\nmethod works if you're able to check if your\nsolution is correct. So if your guess is\noriginally 0, you can say,",
    "start": "1379050",
    "end": "1386440"
  },
  {
    "text": "is 0 cubed equal to the\ncube of whatever I'm trying",
    "start": "1386440",
    "end": "1392080"
  },
  {
    "text": "to find the cube root of? So if I'm trying to\nfind the cube root of 8, is 0 cubed equal to 8?",
    "start": "1392080",
    "end": "1397590"
  },
  {
    "text": "No. So the solution is not correct. If it's not correct,\nguess another value.",
    "start": "1397590",
    "end": "1403190"
  },
  {
    "text": "Do it systematically\nuntil you find a solution or you've guessed all\nthe possible values,",
    "start": "1403190",
    "end": "1412270"
  },
  {
    "text": "you've exhausted all\nof your search space.  So here's a very simple guess\nand check code that finds",
    "start": "1412270",
    "end": "1419460"
  },
  {
    "text": "the cube root of a number. So I'm trying to find\nthe cube root of 8. So my cube is 8.",
    "start": "1419460",
    "end": "1425730"
  },
  {
    "text": "I'm going to have a\nfor loop that says, I'm going to start from 0. And I'm going to go\nall the way up to--",
    "start": "1425730",
    "end": "1433980"
  },
  {
    "text": "So I'm going to start from 0\nand go all the way up to 8.",
    "start": "1433980",
    "end": "1439079"
  },
  {
    "text": "For every one of these\nnumbers, I'm going to say, is my guess to the power\nof 3 equal to the cube 8?",
    "start": "1439079",
    "end": "1444900"
  },
  {
    "text": "And if it is, I'm going\nto print out this message. Pretty simple, however, this\ncode is not very user friendly,",
    "start": "1444900",
    "end": "1454090"
  },
  {
    "text": "right? If the user wants to\nfind the cube root of 9, they're not going to get\nany output, because we never",
    "start": "1454090",
    "end": "1460830"
  },
  {
    "text": "print anything in\nthe case of the guess not being a perfect cube.",
    "start": "1460830",
    "end": "1468122"
  },
  {
    "text": "or the cube not\nbeing a perfect cube. So we can modify the\ncode a little bit",
    "start": "1468122",
    "end": "1474299"
  },
  {
    "text": "to add two extra features. The first is we're\ngoing to be able to deal",
    "start": "1474300",
    "end": "1479660"
  },
  {
    "text": "with negative cubes,\nwhich is kind of cool. And the second is we're\ngoing to tell the user,",
    "start": "1479660",
    "end": "1486740"
  },
  {
    "text": "if the cube is not\na perfect cube, hey, this cube is\nnot a perfect cube. So we're not going to\nsilently just fail,",
    "start": "1486740",
    "end": "1492680"
  },
  {
    "text": "because then the user\nhas some sort of feedback on their input.",
    "start": "1492680",
    "end": "1498040"
  },
  {
    "text": "So let's step through this code. We have, first of all, a\nfor loop just like before.",
    "start": "1498040",
    "end": "1505950"
  },
  {
    "text": "And we're going to go\nthrough 0 to 8 in this case.",
    "start": "1505950",
    "end": "1513070"
  },
  {
    "text": "We're using the absolute\nvalue, because we might want to find the cube\nroot of negative numbers. ",
    "start": "1513070",
    "end": "1520320"
  },
  {
    "text": "First thing we're doing\nis doing this check here. ",
    "start": "1520320",
    "end": "1527400"
  },
  {
    "text": "Instead of guessing whether\nthe guess to the power of 3 is equal to the\ncube, we're going",
    "start": "1527400",
    "end": "1534180"
  },
  {
    "text": "to check if it's\ngreater or equal to, and we're going to do that\nfor the following reason.",
    "start": "1534180",
    "end": "1539370"
  },
  {
    "text": "So if we're trying to\nfind the cube root of 8, for example, versus a\ncube root of 9-- this is 8",
    "start": "1539370",
    "end": "1547360"
  },
  {
    "text": "and this is 9-- what is\nthis code going to do? It's going to first guess 0.",
    "start": "1547360",
    "end": "1554320"
  },
  {
    "text": "0 cubed is not\ngreater or equal to 8. 1 cubed is not\ngreater or equal to 8.",
    "start": "1554320",
    "end": "1560240"
  },
  {
    "text": "2 cubed is greater\nor equal to 8, so here, once we've guessed\n2, we're going to break.",
    "start": "1560240",
    "end": "1565760"
  },
  {
    "text": "Because we found a\nnumber that works. And there's no need\nto keep looking.",
    "start": "1565760",
    "end": "1571789"
  },
  {
    "text": "Once we've found the cubed\nroot of this number 8, there's no need to keep\nsearching the remainder, 3, 4,",
    "start": "1571790",
    "end": "1580399"
  },
  {
    "text": "5, 6, 7, 8.  Sort of the same idea\nwhen we're trying",
    "start": "1580400",
    "end": "1586690"
  },
  {
    "text": "to find the cube root of 9. We're going to start with 0. 0 to the power of\n3 is less than 9.",
    "start": "1586690",
    "end": "1594410"
  },
  {
    "text": "1 to the power of 3 is less 9. 2 to the power of\n3 is less than 9. When we get to 3\nto the power of 3,",
    "start": "1594410",
    "end": "1600370"
  },
  {
    "text": "that's going to\nbe greater than 9. So this code tells\nus, once we've",
    "start": "1600370",
    "end": "1614950"
  },
  {
    "text": "picked a number that's\nbeyond the reasonable number of our cubed root, of our cube,\nthe cubed root of our cube,",
    "start": "1614950",
    "end": "1622480"
  },
  {
    "text": "then we should stop. Because, again, it doesn't\nmake sense to keep searching. Because if 3 to the power of\n3 is already greater than 9,",
    "start": "1622480",
    "end": "1630220"
  },
  {
    "text": "4 to the power of 3 is also\ngoing to be greater than 9 and so on. So once we break here, we\neither have guess being 2",
    "start": "1630220",
    "end": "1639250"
  },
  {
    "text": "or guess being 3 depending on\nwhat cube we're trying to find. ",
    "start": "1639250",
    "end": "1645120"
  },
  {
    "text": "And if the guess to the power\nor 3 is not equal to the cube, then, obviously, the cube\nwas not a perfect cube.",
    "start": "1645120",
    "end": "1652870"
  },
  {
    "text": "So that's this case\nhere, if we were looking at at the cube root of 9.",
    "start": "1652870",
    "end": "1658740"
  },
  {
    "text": "And otherwise, this\npart here just looks at whether we should make it\na positive or a negative cube.",
    "start": "1658740",
    "end": "1666240"
  },
  {
    "text": "So if our original cube\nwas less than 0, then, obviously, the cube root\nof a negative number",
    "start": "1666240",
    "end": "1671740"
  },
  {
    "text": "is going to be a\nnegative number, and, otherwise,\nit's just our guess. ",
    "start": "1671740",
    "end": "1679148"
  },
  {
    "start": "1678000",
    "end": "1774000"
  },
  {
    "text": "So that's the guess\nand check method, slightly more\nfeature-rich program for guessing the cube root.",
    "start": "1679149",
    "end": "1685340"
  },
  {
    "text": "But that only tells us the\ncube root of perfect cubes and doesn't really give\nus anything else, any more",
    "start": "1685340",
    "end": "1692690"
  },
  {
    "text": "information. So sometimes, you might\nwant to say, well, I don't care that 9\nis not a perfect cube,",
    "start": "1692690",
    "end": "1699370"
  },
  {
    "text": "just give me a\nclose enough answer. So that's where approximate\nsolutions come in.",
    "start": "1699370",
    "end": "1705220"
  },
  {
    "text": "So this is where we're OK with\nhaving a good enough solution. So in order to do\nthat, we're going",
    "start": "1705220",
    "end": "1710800"
  },
  {
    "text": "to start with a guess\nand then increment that guess by some small value. ",
    "start": "1710800",
    "end": "1717020"
  },
  {
    "text": "Start from 0 and start\nincrementing by 0.001 and just go upwards from there.",
    "start": "1717020",
    "end": "1722470"
  },
  {
    "text": "And at some point, you might\nfind a good enough solution.",
    "start": "1722470",
    "end": "1727880"
  },
  {
    "text": "In this program, we're going to\nkeep guessing as long as we're not close enough.",
    "start": "1727880",
    "end": "1735310"
  },
  {
    "text": "And close enough is going\nto be given by this epsilon value in the program.",
    "start": "1735310",
    "end": "1740570"
  },
  {
    "text": "So as long as the guess cubed\nminus the cube-- so how far",
    "start": "1740570",
    "end": "1745899"
  },
  {
    "text": "away are we from\nthe actual answer-- is greater than some\nepsilon, keep guessing,",
    "start": "1745900",
    "end": "1751210"
  },
  {
    "text": "because the solution\nis not good enough. But once this is\nless than epsilon, then we've reached a\ngood enough solution.",
    "start": "1751210",
    "end": "1759140"
  },
  {
    "text": "So two things to note with\napproximate solutions. So you can get more\naccurate answers if your step size is\nreally, really small.",
    "start": "1759140",
    "end": "1765910"
  },
  {
    "text": "If you're incrementing\nby 0.0001, you're going to get a really\ngood approximate solution, but your program\nwill be a lot slower.",
    "start": "1765910",
    "end": "1771573"
  },
  {
    "text": " Same sort of idea with epsilon,\nyou can change epsilon.",
    "start": "1771573",
    "end": "1779660"
  },
  {
    "start": "1774000",
    "end": "2150000"
  },
  {
    "text": "If you change epsilon\nto be a bigger epsilon, you're sacrificing\naccuracy, but you're going to reach a\nsolution a lot faster.",
    "start": "1779660",
    "end": "1786195"
  },
  {
    "text": " So here's the code for the\napproximate solution of a cube",
    "start": "1786195",
    "end": "1792901"
  },
  {
    "text": "root. It might look\nintimidating, but, look, almost half this code is\njust initializing variables.",
    "start": "1792901",
    "end": "1799730"
  },
  {
    "text": "So we're initializing,\nthis is the cube we want to find\nthe cube root of.",
    "start": "1799730",
    "end": "1804800"
  },
  {
    "text": "We pick an epsilon of this. We start with a guess of 0. We start with an\nincrement of 0.0001.",
    "start": "1804800",
    "end": "1810202"
  },
  {
    "text": "And just for fun, let's keep\ntrack of the number of guesses that it takes us to\nget to the answer. ",
    "start": "1810202",
    "end": "1817710"
  },
  {
    "text": "This is similar to the\nguess and check from before. ",
    "start": "1817710",
    "end": "1826672"
  },
  {
    "text": "It's not similar. Well this part is similar to\nthe guess and check from before. So we're going to take the\nguess to the power of 3",
    "start": "1826672",
    "end": "1833769"
  },
  {
    "text": "minus the cube, right? So that's how far away are\nwe from the actual answer? And we're going to\nsay, if that's not good",
    "start": "1833770",
    "end": "1840559"
  },
  {
    "text": "enough-- so if\nwe're still greater than or equal to the\nepsilon-- then keep guessing.",
    "start": "1840560",
    "end": "1846050"
  },
  {
    "text": "So we're going to be\nstuck in this loop, where we keep guessing\nvalues, until we've",
    "start": "1846050",
    "end": "1851830"
  },
  {
    "text": "reached a guess\nthat's good enough, so until we're\nless than epsilon.",
    "start": "1851830",
    "end": "1857190"
  },
  {
    "text": "And way we keep guessing\nis just with this line, right here, which says,\nincrement my guess",
    "start": "1857190",
    "end": "1864010"
  },
  {
    "text": "by increment, and increment\nbeing this really small value. That make sense? ",
    "start": "1864010",
    "end": "1871445"
  },
  {
    "text": "So I'm going to\nkeep incrementing my guess by that small value. Before I go on, I'm\ngoing to run the code.",
    "start": "1871445",
    "end": "1878100"
  },
  {
    "text": "And we're going to discover\na small issue with it. ",
    "start": "1878100",
    "end": "1892580"
  },
  {
    "text": "So with 27, we're\ngoing to run it. Perfect, it took me 300 guesses. But 2.99999 is close\nto the cube root of 27.",
    "start": "1892580",
    "end": "1900490"
  },
  {
    "text": " We can find the cube\nroot of this guy here.",
    "start": "1900490",
    "end": "1907830"
  },
  {
    "text": "And it took me 20,000\nguesses, but I figured out that 200.99999, so 201,\nis close to the cube",
    "start": "1907830",
    "end": "1915169"
  },
  {
    "text": "root of that large number. ",
    "start": "1915170",
    "end": "1926160"
  },
  {
    "text": "I should have done this. This is going to be\na giveaway, you guys. Sorry. Then we're going\nto have-- let's say",
    "start": "1926160",
    "end": "1932700"
  },
  {
    "text": "I want to try cube of 10,000. So 10,000 is not a perfect cube.",
    "start": "1932700",
    "end": "1937870"
  },
  {
    "text": "So we can run the code. And with 8,120,601 I had\nalready gotten an answer.",
    "start": "1937870",
    "end": "1946340"
  },
  {
    "text": "But with 10,000, I'm not\ngetting an answer yet, right? So I'm thinking that there\nmight be something wrong.",
    "start": "1946340",
    "end": "1952490"
  },
  {
    "text": "So I'm going to stop my code. So I just hit Control C,\nbecause I feel like I've",
    "start": "1952490",
    "end": "1957500"
  },
  {
    "text": "entered an infinite loop. And, in fact, I have. So what ended up happening\nis this problem here.",
    "start": "1957500",
    "end": "1965570"
  },
  {
    "text": "So I'm going to draw something. ",
    "start": "1965570",
    "end": "1970600"
  },
  {
    "text": "According to the code,\nI'm going to start from 0,",
    "start": "1970600",
    "end": "1978500"
  },
  {
    "text": "and I'm going to increment\nmy guesses, like that. With every little increment,\nI'm going to make a new guess.",
    "start": "1978500",
    "end": "1986030"
  },
  {
    "text": "I'm going to take that\nguess to the power of 3. I'm going to subtract\nthe cube, and I'm going to figure out if\nI'm less than epsilon.",
    "start": "1986030",
    "end": "1992269"
  },
  {
    "text": "This is the epsilon that I want\nto be in, this little bit here.",
    "start": "1992270",
    "end": "1998830"
  },
  {
    "text": "So with every new\nguess, I might be, maybe-- so this is\nwhere I want to be,",
    "start": "1998830",
    "end": "2003940"
  },
  {
    "text": "within this little\nboundary here. With every new guess,\nI might be here.",
    "start": "2003940",
    "end": "2009270"
  },
  {
    "text": "With the next guess, over\nhere, I might be here. When I make another\nguess, I might be here.",
    "start": "2009270",
    "end": "2016389"
  },
  {
    "text": "So I'm getting close to\nbeing within epsilon. But maybe with my\nnext guess, I'm going to hop over my epsilon and\nhave made too big of a guess.",
    "start": "2016390",
    "end": "2025059"
  },
  {
    "text": " So just because of\nthe way the numbers",
    "start": "2025060",
    "end": "2032410"
  },
  {
    "text": "were chosen in this example,\njust to illustrate this, using an increment of 0.01, a\nwith finding the cube of 10,000",
    "start": "2032410",
    "end": "2039264"
  },
  {
    "text": "and epsilon of 0.1, it\nturns out that, as I'm doing all these\ncalculations, I'm going to skip over this perfect\nsort of epsilon difference.",
    "start": "2039265",
    "end": "2052590"
  },
  {
    "text": "So first, I'm going\nto be too small. And then I'm going\nto be too large. And once I've become too large\nor too far away from epsilon,",
    "start": "2052590",
    "end": "2060260"
  },
  {
    "text": "the guesses I continue\nto make are just going to be even farther\naway from epsilon.",
    "start": "2060260",
    "end": "2066658"
  },
  {
    "text": "And I'm not going\nto get to my answer. And that's why I've reached\nan infinite loop in this code. ",
    "start": "2066659",
    "end": "2073570"
  },
  {
    "text": "All I'm doing in\nthis code is checking whether my guess cube minus\ncube is less than epsilon.",
    "start": "2073570",
    "end": "2081919"
  },
  {
    "text": "The only thing I\nneed to do here is sort of add this\nlittle clause, here, that says, oh, by the way, also\ncheck that I'm less than cube.",
    "start": "2081920",
    "end": "2091419"
  },
  {
    "text": " Because this is just like we\ndid in the very first program,",
    "start": "2091420",
    "end": "2098400"
  },
  {
    "text": "when I'm checking 0,\n1, 2, 3, 4, 5, 6, 7, 8,",
    "start": "2098400",
    "end": "2104989"
  },
  {
    "text": "when I'm trying to find\nthe cube root of 8. ",
    "start": "2104989",
    "end": "2114150"
  },
  {
    "text": "Once I've reached 8,\nI'm going to stop. And it's the same thing here. ",
    "start": "2114150",
    "end": "2122140"
  },
  {
    "text": "So I just added\nthis little clause that says, well,\nwhile I'm greater than or equal to\nepsilon and I'm still",
    "start": "2122140",
    "end": "2127839"
  },
  {
    "text": "less than the actual\ncube, just keep searching. But once I've reached the\ncube, then stop searching.",
    "start": "2127840",
    "end": "2135400"
  },
  {
    "text": "And with 10,000,\nyou can see that I failed to actually find-- so\nthat's what this part, here,",
    "start": "2135400",
    "end": "2141130"
  },
  {
    "text": "does. It tells me I've\nfailed to find the cube root with those\nparticular parameters.",
    "start": "2141130",
    "end": "2146950"
  },
  {
    "text": " The last thing we're going to\nlook at is bisection search.",
    "start": "2146950",
    "end": "2153920"
  },
  {
    "start": "2150000",
    "end": "2378000"
  },
  {
    "text": "And to illustrate this, I'm\ngoing to need one volunteer. And you're going to\nplay a game with me in front of the whole class.",
    "start": "2153920",
    "end": "2160160"
  },
  {
    "text": "And there will be a prize. There go the hands. ",
    "start": "2160160",
    "end": "2166310"
  },
  {
    "text": "In the blue shirt, right there. Cool. So the prize is going\nto be, once again, this.",
    "start": "2166310",
    "end": "2172670"
  },
  {
    "text": "I promise I don't have millions\nof these, Google glasses. I also don't work for Google.",
    "start": "2172670",
    "end": "2178880"
  },
  {
    "text": "I just happened to get a couple. So the game is this.",
    "start": "2178880",
    "end": "2184910"
  },
  {
    "text": "I'm going to ask you to pick\na number, a whole number, between 0 and 100.",
    "start": "2184910",
    "end": "2190500"
  },
  {
    "text": "And I'm going to\ntry to guess it. And you need to\nmake it hard for me. And you need to make it so hard\nfor me that I cannot guess it",
    "start": "2190500",
    "end": "2196631"
  },
  {
    "text": "within 10 guesses. And if you can do that, if\nI cannot guess it within 10",
    "start": "2196631",
    "end": "2202880"
  },
  {
    "text": "guesses, you get this. ",
    "start": "2202880",
    "end": "2208310"
  },
  {
    "text": "And I'm going to draw out\nwhat I do as we go along. So do you have your number?",
    "start": "2208310",
    "end": "2213349"
  },
  {
    "text": "Yes? AUDIENCE: Yeah. ANA BELL: Perfect. Let me erase that. Actually, I should've\nprobably kept that,",
    "start": "2213350",
    "end": "2218778"
  },
  {
    "text": "because I'll still use it. There's the numbers, 0 to 100.",
    "start": "2218778",
    "end": "2224809"
  },
  {
    "text": "Is your number 50? AUDIENCE: No. ANA BELL: 50 Was my guess.",
    "start": "2224810",
    "end": "2230110"
  },
  {
    "text": "So I've made one guess. Is your number higher\nor lower than 50? AUDIENCE: Higher. ANA BELL: Higher.",
    "start": "2230110",
    "end": "2235940"
  },
  {
    "text": "Is your number-- my next\nguess is going to be 75.",
    "start": "2235940",
    "end": "2241050"
  },
  {
    "text": "And the reason I'm guessing 75\nis because-- what's your name? AUDIENCE: Sophie. ANA BELL: What's that? AUDIENCE: Sophie.",
    "start": "2241050",
    "end": "2246230"
  },
  {
    "text": "ANA BELL: Sophie. Sophie said, 50 was too low. So I immediately know that it\ncannot be any less than 50.",
    "start": "2246230",
    "end": "2252650"
  },
  {
    "text": "So I've already eliminated\nhalf of the numbers. So my next guess is 75. Is your number 75?",
    "start": "2252650",
    "end": "2260020"
  },
  {
    "text": "Is your number lower or higher? AUDIENCE: Higher. ",
    "start": "2260020",
    "end": "2265060"
  },
  {
    "text": "ANA BELL: Since it's higher,\nI'm eliminating this half here. Is your number-- so\nbetween 75 and 100.",
    "start": "2265060",
    "end": "2272255"
  },
  {
    "text": "Oh, boy, you're\nputting me on the spot. What's that? AUDIENCE: 87. ANA BELL: 87, thank you.",
    "start": "2272255",
    "end": "2277480"
  },
  {
    "text": "87? AUDIENCE: No. ANA BELL: Higher or lower? AUDIENCE: Lower. ANA BELL: Lower. So since it's lower, I'm\neliminating that half.",
    "start": "2277480",
    "end": "2284789"
  },
  {
    "text": " Is your number 81?",
    "start": "2284790",
    "end": "2290780"
  },
  {
    "text": "Higher or lower? AUDIENCE: Lower.  ANA BELL: So she said, lower,\nso I'm eliminating that half.",
    "start": "2290780",
    "end": "2298190"
  },
  {
    "text": " Is your number 78? Oh, boy, that's really hard.",
    "start": "2298190",
    "end": "2304770"
  },
  {
    "text": "78, OK. Higher or lower? AUDIENCE: Lower.",
    "start": "2304770",
    "end": "2310080"
  },
  {
    "text": "ANA BELL: Is your number 76? AUDIENCE: Yeah. ANA BELL: Yay. All right, perfect,\n76 was the number.",
    "start": "2310080",
    "end": "2315327"
  },
  {
    "text": "So how many guesses have I made? One, two, three, four, five,\nsix-- I made six guesses.",
    "start": "2315327",
    "end": "2323789"
  },
  {
    "text": "So I did get it under 10. But you know what? The game was rigged.",
    "start": "2323790",
    "end": "2330720"
  },
  {
    "text": "So you get the prize anyway,\njust because I rigged the game. Here you go. Pass it down. AUDIENCE: Thank you.",
    "start": "2330720",
    "end": "2336513"
  },
  {
    "text": "ANA BELL: Thank you. So notice, in bisection\nsearch, what I did was I",
    "start": "2336513",
    "end": "2342010"
  },
  {
    "text": "eliminated half the search\nspace with every guess. I said, well, she said\nit's higher or lower,",
    "start": "2342010",
    "end": "2347140"
  },
  {
    "text": "so I definitely cannot be in\nthe other search space, right? If I was doing approximate\nsolution or, in this case,",
    "start": "2347140",
    "end": "2352520"
  },
  {
    "text": "guess and check, I would be\nasking Sophie, is your number 0, 1, 2, 3, 4, and so on?",
    "start": "2352520",
    "end": "2360310"
  },
  {
    "text": "So with guess and check,\nit would have taken me 76 guesses to get to the number,\nwhereas, with this bisection",
    "start": "2360310",
    "end": "2369220"
  },
  {
    "text": "search, that I just\ndid, it only took me 6. Isn't that cool?",
    "start": "2369220",
    "end": "2375240"
  },
  {
    "text": "So that means that the\nlarger the space actually",
    "start": "2375240",
    "end": "2380840"
  },
  {
    "text": "is, that I need to\nsearch, the better it is to use bisection search,\nthis bisection search method.",
    "start": "2380840",
    "end": "2386490"
  },
  {
    "text": " So that's basically what\nI'm illustrating here. So we have our\noriginal search space.",
    "start": "2386490",
    "end": "2394579"
  },
  {
    "text": "We're going to choose a\nguess halfway, eliminate half of the guesses. Then we're going look in\nthe remaining interval,",
    "start": "2394580",
    "end": "2401780"
  },
  {
    "text": "eliminate half the guesses,\nand so on and so on. ",
    "start": "2401780",
    "end": "2408849"
  },
  {
    "text": "So then this is the code\nfor bisection search. ",
    "start": "2408850",
    "end": "2414550"
  },
  {
    "text": "Also looks intimidating,\nbut it's not so bad. So we're initializing a\nbunch of stuff up here. The most important couple\nof things we're initializing",
    "start": "2414550",
    "end": "2420970"
  },
  {
    "text": "are, first of all, this high\nand this low boundaries.",
    "start": "2420970",
    "end": "2426940"
  },
  {
    "text": "So with the guessing game,\nthe low boundary was 0, and the high boundary was 100.",
    "start": "2426940",
    "end": "2434741"
  },
  {
    "text": "When we're looking\nat the cube root, the low boundary\nis going to be 0, and the high boundary is\ngoing to be just my cube,",
    "start": "2434741",
    "end": "2442960"
  },
  {
    "text": "because a guess to the power\nof 3 cannot be any greater than cube.",
    "start": "2442960",
    "end": "2448370"
  },
  {
    "text": "And then, I'm just going\nto do the same procedure that I did with the\nguessing game, which is I'm going to make my\nguess, be halfway in between.",
    "start": "2448370",
    "end": "2456540"
  },
  {
    "text": "So with this guessing game,\nI had to sort of choose, if there were four\nnumbers in between,",
    "start": "2456540",
    "end": "2462230"
  },
  {
    "text": "should I go higher or lower? Well, when we're doing\nby bisection search, here, we don't care about that.",
    "start": "2462230",
    "end": "2468492"
  },
  {
    "text": "We're just going to do\nfloating point division, because we want decimal numbers.",
    "start": "2468492",
    "end": "2477530"
  },
  {
    "text": "So I have a low boundary\nand a high boundary. And I figured out\nmy halfway point. ",
    "start": "2477530",
    "end": "2484630"
  },
  {
    "text": "Then I have this\nwhile loop here. A while loop is similar to the\napproximation method, where,",
    "start": "2484630",
    "end": "2495530"
  },
  {
    "text": "as long as I don't have a\nguest that's good enough-- so this, depicted by\nthis greater or equal to epsilon-- as long as my\nguess is not good enough,",
    "start": "2495530",
    "end": "2502550"
  },
  {
    "text": "I'm going to keep guessing. That's what this\nwhile loop is saying. So if the guess to the\npower of 3 minus cube",
    "start": "2502550",
    "end": "2507805"
  },
  {
    "text": "is not good enough,\nkeep guessing. And the way I keep guessing\nis this part, here,",
    "start": "2507805",
    "end": "2516340"
  },
  {
    "text": "says, my guess was too low. So if my guess was too\nlow, set the low boundary",
    "start": "2516340",
    "end": "2523510"
  },
  {
    "text": "to be the guess. Because I don't care about\nall of the other numbers that are much lower than me.",
    "start": "2523510",
    "end": "2530620"
  },
  {
    "text": "So set the low to be the guess. That's what that line is doing. And otherwise, my\nguess was too high.",
    "start": "2530620",
    "end": "2539160"
  },
  {
    "text": "That's what this else is doing. So set the high to be\nthe guess, because I don't care about numbers\nany higher than my guess.",
    "start": "2539160",
    "end": "2546690"
  },
  {
    "text": "Once I have these\nnew boundaries, I make another\nguess, again, halfway in between the new\nboundary points.",
    "start": "2546690",
    "end": "2554466"
  },
  {
    "text": "So essentially, I'm\njust halving my interval with every single guess. And that's what the\nwhile loop is doing.",
    "start": "2554467",
    "end": "2560380"
  },
  {
    "text": "And then I print out\nthe remaining part. So notice the search\nspace originally being N,",
    "start": "2560380",
    "end": "2570450"
  },
  {
    "text": "we're halving it\nwith each guess. So the first guess\ndivides it by 2, the second guess divides\nit by 4, and so on.",
    "start": "2570450",
    "end": "2576070"
  },
  {
    "text": "So by the time we get\nto the k-th guess, N/2k, the k-th guess, let's say\nthat's the actual answer we're",
    "start": "2576070",
    "end": "2583727"
  },
  {
    "text": "interested in. There's only one value\nin that little interval. And that's the answer we want.",
    "start": "2583727",
    "end": "2589440"
  },
  {
    "text": "So 2 to the k is\nequal to N. And then how many guesses did we make?",
    "start": "2589440",
    "end": "2594960"
  },
  {
    "text": "k is equal to log\nbase 2 of N. So when",
    "start": "2594960",
    "end": "2601150"
  },
  {
    "text": "we are playing the guessing\ngame of 100, my end was 100. Log base 2 of 100 is\n6.-something, I think.",
    "start": "2601150",
    "end": "2609940"
  },
  {
    "text": "So in fact, I could\nhave said, if I don't guess it\nwithin seven guesses,",
    "start": "2609940",
    "end": "2615760"
  },
  {
    "text": "you would have won as well. So that's why the\ngame was rigged. So the guess,\nnotice, it converges",
    "start": "2615760",
    "end": "2621730"
  },
  {
    "text": "on the order of\nlog base N instead of just linearly in terms of N.\nSo that's why it's so powerful.",
    "start": "2621730",
    "end": "2628582"
  },
  {
    "text": "One last thing I\nwant to mention is the code I showed only\nworks for positive cubes. And that's because\nof the following.",
    "start": "2628582",
    "end": "2637599"
  },
  {
    "text": "So I have this 0 and 1. Let's say I'm trying to\nfind the cube root of 0.5.",
    "start": "2637600",
    "end": "2643779"
  },
  {
    "text": "When I first set my initial\nboundaries, my low is this one, and my high is this one.",
    "start": "2643780",
    "end": "2650680"
  },
  {
    "text": "But what's the cube root of 0.5? Is it within this boundary or\nis it outside this boundary? AUDIENCE: Outside the boundary.",
    "start": "2650680",
    "end": "2656360"
  },
  {
    "text": "ANA BELL: I heard, outside. It's like 0.7 something. So it's out here. So with this\nparticular code, I'm",
    "start": "2656360",
    "end": "2661700"
  },
  {
    "text": "going to be halving my interval\nin between those numbers, but I'll never get to an answer.",
    "start": "2661700",
    "end": "2668150"
  },
  {
    "text": "Because the actual cube root\nof 0.5, or numbers less than 1, is going to be\noutside that boundary.",
    "start": "2668150",
    "end": "2674700"
  },
  {
    "text": "So there's a small change you\ncan make to the program, which will fix that. And that's in the code. I didn't put it in, but it's a\nvery small change, a small if",
    "start": "2674700",
    "end": "2682369"
  },
  {
    "text": "statement. So that's it. All right, thank you.",
    "start": "2682370",
    "end": "2690130"
  },
  {
    "text": "[APPLAUSE] ",
    "start": "2690130",
    "end": "2700966"
  }
]