[
  {
    "start": "0",
    "end": "60000"
  },
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING]",
    "start": "0",
    "end": "7728"
  },
  {
    "start": "7728",
    "end": "13618"
  },
  {
    "text": "JUSTIN SOLOMON: OK, team. Let's get started for the day. It's a pleasure to\nsee all of you guys.",
    "start": "13618",
    "end": "21350"
  },
  {
    "text": "In case you don't\nremember, I'm Justin. I'm the third instructor of 006\nthat you probably forgot about,",
    "start": "21350",
    "end": "26630"
  },
  {
    "text": "but you're going to see a lot\nmore of me in the graph theory part of our course because\nthat's the part of algorithms",
    "start": "26630",
    "end": "31640"
  },
  {
    "text": "that I like. If I were reincarnated as a\ntheoretical computer scientist, I would probably\ngo into this area.",
    "start": "31640",
    "end": "37130"
  },
  {
    "text": "Hey, guys. OK. We have our PhD admit\nvisit days coming up",
    "start": "37130",
    "end": "43190"
  },
  {
    "text": "for the next couple of days I'm\nworking on my camp counselor cheerleader voice. So don't make me wake all\nof you guys up for the day.",
    "start": "43190",
    "end": "51680"
  },
  {
    "text": "You're not going to like it. But in any event, so in\n6.006 if you look back",
    "start": "51680",
    "end": "57350"
  },
  {
    "text": "at the course outline,\nwe're officially starting part two of this class. There are a few\ncorollaries to that fact.",
    "start": "57350",
    "end": "64155"
  },
  {
    "start": "60000",
    "end": "120000"
  },
  {
    "text": "So unless there are any\nquestions about that, we'll get started with\nour new unit in 6.006 which is a graph theory.",
    "start": "64155",
    "end": "71870"
  },
  {
    "text": "If you're wondering, there's\na graph on the screen here. But of course, we'll fill in\na little bit more information",
    "start": "71870",
    "end": "77570"
  },
  {
    "text": "today throughout our lecture. When I was learning how to\nteach, which I'm still doing,",
    "start": "77570",
    "end": "84680"
  },
  {
    "text": "actually my PhD advisor\ntold me if you want somebody to learn something, you have\nto write it as big as possible. And so I'm really leaning\ninto that approach",
    "start": "84680",
    "end": "91880"
  },
  {
    "text": "today in our slides. So in any event, so\ntoday we're going to have our first\nlecture on graphs",
    "start": "91880",
    "end": "98689"
  },
  {
    "text": "which I think will somewhat be\na review for many of you guys. And if it's not,\nthat's cool too.",
    "start": "98690",
    "end": "104337"
  },
  {
    "text": "Because we'll start\nfrom the beginning and kind of build\nup all the notions that we need to understand and\nprocess graphs and hopefully",
    "start": "104337",
    "end": "110299"
  },
  {
    "text": "by the end of lecture,\nhave some style of algorithm for computing the\nshortest path from one vertex",
    "start": "110300",
    "end": "116060"
  },
  {
    "text": "to all the other ones. So in case we forgot a little\nbit of terminology, a graph--",
    "start": "116060",
    "end": "121620"
  },
  {
    "start": "120000",
    "end": "240000"
  },
  {
    "text": "some people call this network,\nbut sometimes that term is overloaded with a few\ndifferent kind of variations on the theme--",
    "start": "121620",
    "end": "127820"
  },
  {
    "text": "is a collection of two things. That's what this\nparentheses notation means. There's a set of vertices\nand a set of edges.",
    "start": "127820",
    "end": "136519"
  },
  {
    "text": "And the edges, like you can\nsee in the sort of third point on our screen here, are a\nsubset of v cross v. Now",
    "start": "136520",
    "end": "143599"
  },
  {
    "text": "this is fancy\nnotation for something really, really simple. Because what is this telling me? This is telling me that an\nedge, like in the picture",
    "start": "143600",
    "end": "150870"
  },
  {
    "text": "that we see on the screen here. it just just something that\nconnects to vertices together.",
    "start": "150870",
    "end": "156107"
  },
  {
    "text": "So if I think of there being a\npair of vertices, like the from and the to, then that is a\nsubset of the cross product",
    "start": "156107",
    "end": "162335"
  },
  {
    "text": "of v and itself. So hopefully the notation in\nthat third line on the screen makes some sense. This is just fancy notation for\nedges are pairs of vertices.",
    "start": "162335",
    "end": "170900"
  },
  {
    "text": "But of course, inside\nof that notation there are two special cases that\nwe care about in this class.",
    "start": "170900",
    "end": "177230"
  },
  {
    "text": "One is when you have\na directed graph, and one is when you have\nan undirected graph-- because I said them in\nopposite order from what's",
    "start": "177230",
    "end": "183592"
  },
  {
    "text": "on the screen. So in an undirected graph, I\nguess we still think of an edge like a pair of vertices, but\nreally I should have notated",
    "start": "183592",
    "end": "190730"
  },
  {
    "text": "this slightly\ndifferently-- in fact, maybe I'll revise it in\nthe slides before they go into OCW-- where instead of writing\ne equals w comma v,",
    "start": "190730",
    "end": "200150"
  },
  {
    "text": "I should write in\nfact equals v comma w. And notice that there's a slight\ndifference between the notation",
    "start": "200150",
    "end": "207770"
  },
  {
    "text": "on the slide and what I've\nwritten on the board, which is the set notation here. What's the difference between\nparentheses and squiggly lines",
    "start": "207770",
    "end": "215050"
  },
  {
    "text": "is that this guy is unordered. This is a set of things. And what's on the\nboard is ordered--",
    "start": "215050",
    "end": "220960"
  },
  {
    "text": "or what's on the screen rather. And of course, in\nan undirected edge there's no such thing\nas an edge from w",
    "start": "220960",
    "end": "226930"
  },
  {
    "text": "to v being distinct from\nan edge from v to w. Those are the same thing. They're undirected. It just is a notion\nof connectivity.",
    "start": "226930",
    "end": "233890"
  },
  {
    "text": "Whereas in a directed\ngraph, now we're going to use that\nparenthetical notation to say that the\nedge from w to v is",
    "start": "233890",
    "end": "241330"
  },
  {
    "text": "different than the\nedge from v to w. That's going to make\na big difference. So for example in the\ngraph on the right--",
    "start": "241330",
    "end": "249160"
  },
  {
    "text": "let's maybe redraw\nit on the board here. So we have four vertices. I drew this last night, and\nI'm hoping that this example",
    "start": "249160",
    "end": "256540"
  },
  {
    "text": "actually works. ",
    "start": "256540",
    "end": "262028"
  },
  {
    "text": "Like that-- can I get from\nthe upper right vertex to the lower left vertex\nfollowing edges in this graph?",
    "start": "262029",
    "end": "271550"
  },
  {
    "text": "I heard one person. Everybody on three-- 1, 2, 3. AUDIENCE: No. JUSTIN SOLOMON: No, right.",
    "start": "271550",
    "end": "277463"
  },
  {
    "text": "Because if I wanted to-- I mean maybe I think of\ndrawing this path here-- but of course, if I would\ngo from the upper right",
    "start": "277463",
    "end": "284270"
  },
  {
    "text": "to the lower left-- this is like the ugliest thing\nI've ever done, I'm so sorry-- you can notice that\nthe edges are pointing",
    "start": "284270",
    "end": "290300"
  },
  {
    "text": "in the up direction here. So I'd have to go against\nthe stream of the water, but that's not allowable\nin the directed graph case.",
    "start": "290300",
    "end": "297242"
  },
  {
    "text": "Of course, I'm\nalready anticipating the notion of a path which we\nhaven't really defined yet. But I think\nintuitively, that's sort",
    "start": "297242",
    "end": "302900"
  },
  {
    "text": "of the big difference between a\ndirected and undirected graph. Does that distinction makes\nsense to all of you all",
    "start": "302900",
    "end": "308140"
  },
  {
    "text": "or have I managed to lose\nyou in four minutes or less? Excellent.",
    "start": "308140",
    "end": "314360"
  },
  {
    "text": "So I flipped things a tiny,\ntiny bit from the course notes because I\nfigured we'd define what a graph is first\nbefore telling you",
    "start": "314360",
    "end": "319776"
  },
  {
    "start": "315000",
    "end": "460000"
  },
  {
    "text": "what the implications are. But in any event,\nI think it's really not a big stretch\nof the imagination",
    "start": "319777",
    "end": "326000"
  },
  {
    "text": "to say that graphs are\nliterally everywhere in our everyday life, right. Any time that we come up with\na network of stuff connected",
    "start": "326000",
    "end": "334130"
  },
  {
    "text": "together, implicitly the\nright abstraction often in the back of our heads\nis to think about a graph.",
    "start": "334130",
    "end": "340480"
  },
  {
    "text": "So some simple\nexamples that I think would all come to\nmind for us would be like computer networks--",
    "start": "340480",
    "end": "345580"
  },
  {
    "text": "so the nodes or the vertices of\nyour graph in that case, maybe are computers,\nand then the edges",
    "start": "345580",
    "end": "350960"
  },
  {
    "text": "are roughly the cables\nconnecting them together in my very coarse understanding\nof how networks work--",
    "start": "350960",
    "end": "357110"
  },
  {
    "text": "or maybe at a social network-- the nodes are people\non your social network,",
    "start": "357110",
    "end": "362210"
  },
  {
    "text": "and the edges are\nfriend relationships or frenemy relationships\nor whatever.",
    "start": "362210",
    "end": "368300"
  },
  {
    "text": "In fact, I think you could think\nof both directed and undirected versions of that\nparticular network.",
    "start": "368300",
    "end": "375220"
  },
  {
    "text": "In road networks, maybe\nI'm working for Google and I want to tell\nyou the shortest path",
    "start": "375220",
    "end": "380599"
  },
  {
    "text": "between your house and MIT. Of course, in order to\ndo that and essentially behind the scenes, we're\nsolving some version",
    "start": "380600",
    "end": "386840"
  },
  {
    "text": "of computing the\nshortest path between two vertices in a graph. That's a tiny bit of\na lie in the sense",
    "start": "386840",
    "end": "391850"
  },
  {
    "text": "that there's a lot of\nstructure in that problem that we're not going to\nleverage in this course. A road network is a very\nspecial type of graph,",
    "start": "391850",
    "end": "398900"
  },
  {
    "text": "and if you take an\nadvanced course maybe you'll say, well, if I know\na little more about my graph I can do better than the general\ncase we'll talk about here.",
    "start": "398900",
    "end": "406740"
  },
  {
    "text": "But the basic algorithms that\nwe'll talk about in 6.006 are certainly\nrelevant in that case and are really the\nbuilding blocks",
    "start": "406740",
    "end": "412490"
  },
  {
    "text": "for what goes on\nin the tools that are used every day on your\nphone when you open Google Maps or Ways or whatever.",
    "start": "412490",
    "end": "419630"
  },
  {
    "text": "And of course,\nthere's many others. So for instance, an\nexample that maybe is a little bit\nmore subtle would",
    "start": "419630",
    "end": "425210"
  },
  {
    "text": "be the set of states\nand transitions of a discrete thing. So think about like\na Rubik's cube.",
    "start": "425210",
    "end": "431420"
  },
  {
    "text": "So I could make a\ngraph where the node is every configuration\nof my Rubik's cube, like every rotation.",
    "start": "431420",
    "end": "437300"
  },
  {
    "text": "And then the edges\nare like can I get from this\nconfiguration to that one by making one simple\ntransition, like one flip.",
    "start": "437300",
    "end": "444170"
  },
  {
    "text": "I don't actually know the\nterminology in Rubik's cube, I have a feeling you\ndo, for one rotation.",
    "start": "444170",
    "end": "449870"
  },
  {
    "text": "Twist-- thank you. And of course, there\nare many other places. So for instance, in\nmy day job here at MIT",
    "start": "449870",
    "end": "458250"
  },
  {
    "text": "I typically teach\ncomputer graphics courses. And actually graph\ntheory, although we talk about it very differently,\nappears in that world",
    "start": "458250",
    "end": "465170"
  },
  {
    "start": "460000",
    "end": "590000"
  },
  {
    "text": "constantly. Because of course, with\nsitting behind any 3D model on your computer is a\ngiant network of triangles.",
    "start": "465170",
    "end": "472724"
  },
  {
    "text": "This is called a\ntriangulated surface-- like this torus we see here. And this is nothing\nmore than a graph.",
    "start": "472725",
    "end": "477827"
  },
  {
    "text": "And in fact, if you\nsquint at the algorithms that we cover in six\neight three eight, you'll see they're roughly just\ngraph algorithms in disguise.",
    "start": "477827",
    "end": "485373"
  },
  {
    "text": "In fact, if you take my graduate\ncourse one thing we'll do is we'll spend a lot of time\ndoing differential geometry. And then we'll step\nback 10 feet and notice",
    "start": "485373",
    "end": "492103"
  },
  {
    "text": "that exactly the\nalgorithms we are using for computing curvature\nand bendiness on triangle",
    "start": "492103",
    "end": "497569"
  },
  {
    "text": "meshes, just looks\nlike a graph algorithm and can be applied to networks\nin exactly the same way. So it will be a nice\nkind of fun reveal there.",
    "start": "497570",
    "end": "505430"
  },
  {
    "text": "And of course, there's one\nlast kind of fun application. I actually was gone\nthe last couple of days",
    "start": "505430",
    "end": "511160"
  },
  {
    "text": "at a conference on\npolitical redistricting. And the funny thing is\nmost of the discussion at that conference was\nabout graph theory.",
    "start": "511160",
    "end": "518510"
  },
  {
    "text": "And the reason for that is\nsort of a theme that shows up a lot in geometry world,\nwhich is if I take my state,",
    "start": "518510",
    "end": "526642"
  },
  {
    "text": "in this case I think\nthese are the voting precincts in some\nstate or another, and I look at adjacency\nrelationships,",
    "start": "526642",
    "end": "533810"
  },
  {
    "text": "then maybe I put a node for\nevery precinct and an edge any time that they share a\nboundary with one another.",
    "start": "533810",
    "end": "539760"
  },
  {
    "text": "Well now I have a network. And maybe a region on my graph\nis like a connected piece of this network.",
    "start": "539760",
    "end": "546149"
  },
  {
    "text": "And so anyway, this is one\nof these examples where graphs and networks and\nconnectivity and so on just",
    "start": "546150",
    "end": "551210"
  },
  {
    "text": "show up literally no\nmatter where you go. They're totally unavoidable. And so that's what we'll be\nspending quite a bit of time",
    "start": "551210",
    "end": "557210"
  },
  {
    "text": "on in this class here. Now you could easily\ntake, I would argue,",
    "start": "557210",
    "end": "563000"
  },
  {
    "text": "at least three entire courses\non graph theory here at MIT, and you could easily build a\nPhD dissertation doing nothing",
    "start": "563000",
    "end": "570560"
  },
  {
    "text": "more than really simple\nproblems on graphs. Of course, in this class\nwe're limited to just a few",
    "start": "570560",
    "end": "577580"
  },
  {
    "text": "lectures out of many. So we're going to make\na couple of assumptions both on the problems we want to\nsolve, as well as in the graphs",
    "start": "577580",
    "end": "583250"
  },
  {
    "text": "that we care about. So in particular, one\nsimplifying assumption, which actually\nreally doesn't affect",
    "start": "583250",
    "end": "588767"
  },
  {
    "text": "many of the algorithms\nwe'll talk about here but it's worth\nnoting explicitly, is that we'll mostly be\nthinking about a particular type",
    "start": "588767",
    "end": "595519"
  },
  {
    "start": "590000",
    "end": "940000"
  },
  {
    "text": "of graph which is\na simple graph. And in fact often, depending\non how you define your graph,",
    "start": "595520",
    "end": "601690"
  },
  {
    "text": "you kind of accidentally\nmade your graph simple even if you didn't intend to. So for example, we\nwrote that our edges",
    "start": "601690",
    "end": "607570"
  },
  {
    "text": "were a subset of v cross v.\nWhich maybe means that I can't have multiple edges\nthat sort of traverse",
    "start": "607570",
    "end": "615459"
  },
  {
    "text": "the same pair of vertices. So let's see an example of\na graph that is not simple.",
    "start": "615460",
    "end": "622190"
  },
  {
    "text": "So sorry, I haven't\nactually defined it. A simple graph is a graph\nthat has no self loops,",
    "start": "622190",
    "end": "627440"
  },
  {
    "text": "so it can't go from\na vertex to itself, and every edge is distinct. So let's make the most non\nsimple graph we can think of.",
    "start": "627440",
    "end": "636610"
  },
  {
    "text": "Like let's say I\nhave two vertices. So maybe if I want to make my--",
    "start": "636610",
    "end": "642699"
  },
  {
    "text": "so there's a graph, right,\ntwo vertices and one edge. This is simple. If I wanted to be annoying\nand make it not simple,",
    "start": "642700",
    "end": "649420"
  },
  {
    "text": "maybe I take this edge and I'd\nduplicate it three times just for fun.",
    "start": "649420",
    "end": "654430"
  },
  {
    "text": "That violates the\nsecond assumption. And now to make it even worse,\nI could violate the first one",
    "start": "654430",
    "end": "659590"
  },
  {
    "text": "by adding an edge that goes\nfrom this vertex to itself. This is not simple.",
    "start": "659590",
    "end": "666529"
  },
  {
    "text": " I don't know what you would call\nit actually-- general graph,",
    "start": "666530",
    "end": "672370"
  },
  {
    "text": "I guess-- complicated\nbecause it's not simple. I don't know-- a multigraph.",
    "start": "672370",
    "end": "679297"
  },
  {
    "text": "I always thought of that-- anyway, it doesn't matter. But in any event,\nin this class we're not going to worry about\nthis particular circumstance.",
    "start": "679297",
    "end": "686745"
  },
  {
    "text": "And of course, in many\napplications of graph theory that's a totally reasonable\nassumption to make. Any questions about the\ndefinition of a simple graph?",
    "start": "686745",
    "end": "693820"
  },
  {
    "text": " OK, so from now on whenever\nwe think about a graph,",
    "start": "693820",
    "end": "699092"
  },
  {
    "text": "in the back of our\nhead we're going to think of our graph as simple. There's one nice property\nthat a simple graph has,",
    "start": "699092",
    "end": "704870"
  },
  {
    "text": "which I've written in really\nbig text on the screen here, which is that the\nedges are big O of v squared.",
    "start": "704870",
    "end": "712250"
  },
  {
    "text": "And in fact, let's expand\nthat formula just a tiny bit. So there's sort\nof two cases, one",
    "start": "712250",
    "end": "717860"
  },
  {
    "text": "is when my graph is\nundirected, the other is when my graph is directed.",
    "start": "717860",
    "end": "723779"
  },
  {
    "text": "So if I have a directed graph-- ",
    "start": "723780",
    "end": "732220"
  },
  {
    "text": "well, let's think about how many\nedges we could possibly have. So an edge is a pair of a\nfrom vertex and a to vertex,",
    "start": "732220",
    "end": "741580"
  },
  {
    "text": "and I can never repeat it twice. That's sort of like the\nsecond assumption here.",
    "start": "741580",
    "end": "747190"
  },
  {
    "text": "So in particular,\nwhat do we know? We know that mod E--\nor rather the number of edges in our graph is\nupper bounded by what?",
    "start": "747190",
    "end": "756740"
  },
  {
    "text": "Well, I can take any\npair of vertices-- ",
    "start": "756740",
    "end": "763957"
  },
  {
    "text": "like that-- but I have to\nbe a little bit careful because my graph is directed-- so from and to matter here.",
    "start": "763958",
    "end": "770450"
  },
  {
    "text": "So this is v choose\n2 is saying that I can take any unique\npair of vertices,",
    "start": "770450",
    "end": "775630"
  },
  {
    "text": "but I have to put a\nfactor of 2 in front of it to account for the fact that\nthe source and the target can be flip back and forth.",
    "start": "775630",
    "end": "781900"
  },
  {
    "text": "And of course, if I want\nto do the undirected I don't have to\nworry about that. ",
    "start": "781900",
    "end": "790520"
  },
  {
    "text": "We'll get E here is less than\nor equal to just mod v choose 2.",
    "start": "790520",
    "end": "796540"
  },
  {
    "text": "So this is just a\nfancy way of saying that every edge consists\nof two vertices, and my edges are unique.",
    "start": "796540",
    "end": "802648"
  },
  {
    "text": "And one thing, if\nyou just write down the formula for our\nbinomial coefficient here, we'll see that both\nof these things--",
    "start": "802648",
    "end": "810440"
  },
  {
    "text": "oops, oh, yeah, sorry-- ",
    "start": "810440",
    "end": "817329"
  },
  {
    "text": "are at worse mod v squared here. ",
    "start": "817330",
    "end": "823370"
  },
  {
    "text": "And that makes perfect sense,\nbecause of course, an edge is a pair of vertices. You kind of expect there\nto be a square there.",
    "start": "823370",
    "end": "828470"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE]",
    "start": "828470",
    "end": "833941"
  },
  {
    "text": "JUSTIN SOLOMON: I'm so sorry. I can't hear you. AUDIENCE: So the 2\ncomes from the fact that it's from the source. JUSTIN SOLOMON: Yes, exactly.",
    "start": "833942",
    "end": "840140"
  },
  {
    "text": "So the 2 for the director\ncase, comes from the fact that an edge from v to w is\ndifferent than an edge from w",
    "start": "840140",
    "end": "847900"
  },
  {
    "text": "to v. So remember that the\nbinomial coefficient here, it's just counting the\nnumber of ways that I can choose two things\nfrom a set of size v,",
    "start": "847900",
    "end": "855279"
  },
  {
    "text": "but it doesn't care\nabout ordering. Yeah, any other questions?",
    "start": "855280",
    "end": "860760"
  },
  {
    "text": "Fabulous. So why is this going to matter? Well, these sorts\nof bounds, I mean they might seem a little\nbit obvious to you,",
    "start": "860760",
    "end": "866470"
  },
  {
    "text": "but we're going to write\ndown graph algorithms. And now when we analyze\nthe runtime and the space that they take, we now have\nsort of two different numbers",
    "start": "866470",
    "end": "873368"
  },
  {
    "text": "that we can think about-- the number of vertices\nand the number of edges. And so for instance,\nif I write down",
    "start": "873368",
    "end": "879240"
  },
  {
    "text": "an algorithm whose runtime\nis proportional to the number of edges, maybe\nthen genErikally I",
    "start": "879240",
    "end": "884940"
  },
  {
    "text": "could also think\nof the algorithm as having a runtime that looks\nlike the number of vertices squared unless I put some\nadditional assumptions",
    "start": "884940",
    "end": "891029"
  },
  {
    "text": "on my graph. And so there's some\nconnection between all of these different\nconstants, and it's useful to kind of keep that\nat the back of our head.",
    "start": "891030",
    "end": "897000"
  },
  {
    "text": "That sometimes you'll see a\nbunch of different expressions that really are encoding roughly\nthe same relationship just",
    "start": "897000",
    "end": "902220"
  },
  {
    "text": "in different language Of course, that also means\nthat we can be more precise. So sometimes a graph is\nwhat we would call sparse.",
    "start": "902220",
    "end": "910470"
  },
  {
    "text": "So in my universe,\nalmost all graphs that I deal with in my day to\nday life are extremely sparse.",
    "start": "910470",
    "end": "915529"
  },
  {
    "text": "This is a consequence\nof topology. And because of\nthat, an algorithm",
    "start": "915530",
    "end": "920750"
  },
  {
    "text": "that scales like\nthe number of edges might actually be much\npreferable to an algorithm that scales like the\nnumber of vertices",
    "start": "920750",
    "end": "926840"
  },
  {
    "text": "squared because,\nin practice, often there are fewer edges than like\nevery single possible pair.",
    "start": "926840",
    "end": "932329"
  },
  {
    "text": "And so that's the\nsort of reason why it's we're thinking\nabout these numbers. OK, so let's continue making\nboring definitions here.",
    "start": "932330",
    "end": "940550"
  },
  {
    "start": "940000",
    "end": "1257000"
  },
  {
    "text": "So some other ones that\nwe should think about involve the topology or the\nconnectivity of our graph--",
    "start": "940550",
    "end": "946490"
  },
  {
    "text": "in particular, thinking\nabout neighbors. So in general we kind think\nabout pairs of vertices",
    "start": "946490",
    "end": "952400"
  },
  {
    "text": "as being neighbors\nof one another if there's an edge between them. We have to be a\nlittle bit careful",
    "start": "952400",
    "end": "957710"
  },
  {
    "text": "because, of course, when\nwe have a directed edge, we have to be careful\nwho's on the sort of giving",
    "start": "957710",
    "end": "962900"
  },
  {
    "text": "and the receiving end of\nthis neighbor relationship. Yeah, so let's draw a\nreally, really simple graph.",
    "start": "962900",
    "end": "968730"
  },
  {
    "text": "So here's vertex 0, here's\nvertex 1, here's vertex 2. And maybe we'll have an edge\ngoing up, an edge going down,",
    "start": "968730",
    "end": "977570"
  },
  {
    "text": "and then a cycle here. OK.",
    "start": "977570",
    "end": "982699"
  },
  {
    "text": "Now we can define a lot\nof different notions of neighbors-- like the\noutgoing neighbor set, the incoming neighbor set.",
    "start": "982700",
    "end": "989120"
  },
  {
    "text": "And the basic idea\nhere is that we want to keep track of edges\ngoing from a vertex and edges pointing into one.",
    "start": "989120",
    "end": "995630"
  },
  {
    "text": "Yeah, so for instance,\nthe outgoing neighbor set, which we're going to\nnotate as Adj plus here--",
    "start": "995630",
    "end": "1002199"
  },
  {
    "text": " what is the outgoing\nneighbor set of node 0 here?",
    "start": "1002200",
    "end": "1009037"
  },
  {
    "text": "Well, if we take a look,\nnotice that there's one edge going out of node\n0, and it points to node 2.",
    "start": "1009037",
    "end": "1014230"
  },
  {
    "text": "So of course, this\nis a set which just contains one other node.",
    "start": "1014230",
    "end": "1019389"
  },
  {
    "text": "And similarly, the incoming\nneighbor set of node 0, well",
    "start": "1019390",
    "end": "1025959"
  },
  {
    "text": "notice that there's one\nincoming neighbor from vertex 1, so that is a set like that.",
    "start": "1025960",
    "end": "1034180"
  },
  {
    "text": "Now of course, in\nan undirected graph the sort of distinction\nbetween these two things doesn't matter.",
    "start": "1034180",
    "end": "1039323"
  },
  {
    "text": "So if you look at our\nfinal bullet point here, often in the\nundirected case we just drop that plus\nor minus superscript",
    "start": "1039323",
    "end": "1045020"
  },
  {
    "text": "because it sort\nof doesn't matter. In any event, there's one\nadditional piece of terminology",
    "start": "1045020",
    "end": "1051190"
  },
  {
    "text": "that matters quite a\nbit, which is degree. And this is nothing\nmore than just counting the size of this set.",
    "start": "1051190",
    "end": "1057010"
  },
  {
    "text": "So the out degree is\nthe number of edges that point out of a vertex. And the in degree is the\nnumber of edges that point in.",
    "start": "1057010",
    "end": "1064149"
  },
  {
    "text": "So notice in this case,\nboth of those numbers are 1. Let's see an example\nwhere they're not. So in node 1, notice there's\ntwo edges that come out.",
    "start": "1064150",
    "end": "1073160"
  },
  {
    "text": "So the out degree\nof node 1 is 2. There's one edge that points\nin, so the in degree is 1.",
    "start": "1073160",
    "end": "1081420"
  },
  {
    "text": "OK, so often why are\nwe going to do this? Well, we're going to get\na lot of graph algorithms that like have a FOR loop\nover the neighbors of a given",
    "start": "1081420",
    "end": "1087660"
  },
  {
    "text": "vertex. And then this degree number\nis going to come into play. It's worth bounding these\nthings just a tiny bit.",
    "start": "1087660",
    "end": "1095950"
  },
  {
    "text": "So in particular, one thing\nwe could think about-- ",
    "start": "1095950",
    "end": "1103610"
  },
  {
    "text": "I write too big, and I'm\ngoing to run out of space really quickly here-- is the following.",
    "start": "1103610",
    "end": "1109029"
  },
  {
    "text": "So let's take a look at\nall of the possible nodes inside of my graph,\nand now let's",
    "start": "1109030",
    "end": "1115578"
  },
  {
    "text": "sum up all of their degrees. ",
    "start": "1115578",
    "end": "1122460"
  },
  {
    "text": "So I'm going to-- let's see, if I\nlook at this graph notice there's three edges\nadjacent to this vertex",
    "start": "1122460",
    "end": "1129940"
  },
  {
    "text": "here, three edges adjacent to\nthat one, two adjacent to this. So we sum them all together. So it's just a convenient\nbound to have around--",
    "start": "1129940",
    "end": "1136830"
  },
  {
    "text": "is to sum these\nthings, because we're going to have algorithms that\nlook like for every vertex, for every neighbor do something.",
    "start": "1136830",
    "end": "1142400"
  },
  {
    "text": "So we might as well know\nroughly how much time that's going to take. Let's think about this.",
    "start": "1142400",
    "end": "1149120"
  },
  {
    "text": "So what do we know? In an undirected\ngraph every edge is adjacent to two vertices.",
    "start": "1149120",
    "end": "1155380"
  },
  {
    "text": " So if we think\nabout how we account",
    "start": "1155380",
    "end": "1160539"
  },
  {
    "text": "for degree what do we know? Well we know that\nan edge sort of contributes to the degree\nof two different vertices.",
    "start": "1160540",
    "end": "1169470"
  },
  {
    "text": "So if we think about\nit carefully here,",
    "start": "1169470",
    "end": "1175260"
  },
  {
    "text": "what we're going to see is that\nif our graph is undirected-- ",
    "start": "1175260",
    "end": "1183070"
  },
  {
    "text": "oh, sorry-- is that right,\nwait I'm backward again.",
    "start": "1183070",
    "end": "1189019"
  },
  {
    "text": "So if I have a graph with\ntwo vertices and one edge and it is undirected, notice\nthat is the number of edges",
    "start": "1189020",
    "end": "1198500"
  },
  {
    "text": "here is 1. What is the sum of the degree? Well, it's 1 plus 1 equals 2.",
    "start": "1198500",
    "end": "1204890"
  },
  {
    "text": "Yeah, so there's a 2 here\nif my graph is undirected,",
    "start": "1204890",
    "end": "1214990"
  },
  {
    "text": "and E if my graph is\ndirected, if what I'm counting",
    "start": "1214990",
    "end": "1220900"
  },
  {
    "text": "is just the outgoing degree. Does that makes sense? I think I managed to\ntotally botch that sentence,",
    "start": "1220900",
    "end": "1227832"
  },
  {
    "text": "so maybe let's try that again. So if I'm counting just the\nnumber of edges pointing out of every vertex,\nand I count that",
    "start": "1227832",
    "end": "1234250"
  },
  {
    "text": "over all of the\npossible vertices, then there's two cases-- one is directed and\none is undirected.",
    "start": "1234250",
    "end": "1240220"
  },
  {
    "text": "So in the undirected\ncase you get a 2 here because essentially every\nedge is simultaneously in going and outgoing.",
    "start": "1240220",
    "end": "1246400"
  },
  {
    "text": "Whereas you get a 1\nas the coefficient in the directed case. Does that makes sense? I'm sorry I botched\nthat for a second.",
    "start": "1246400",
    "end": "1253029"
  },
  {
    "text": "OK, excellent. OK, that's going to be a\nuseful bound for us later on.",
    "start": "1253030",
    "end": "1258298"
  },
  {
    "start": "1257000",
    "end": "1595000"
  },
  {
    "text": "Now we think about\ngraphs, of course, we just spent the\nlast couple of weeks thinking about data structures. We should think about how to\nstore a graph on a computer,",
    "start": "1258298",
    "end": "1264680"
  },
  {
    "text": "and there's many\ndifferent options. In fact, really one thing that\nyou can do is sort of pair--",
    "start": "1264680",
    "end": "1270039"
  },
  {
    "text": "just like when we\ntalked about sets. There are many different\nways to store sets. And one way to think\nabout it was depending",
    "start": "1270040",
    "end": "1276340"
  },
  {
    "text": "on how we're going to interact\nwith that set we might choose one data structure or\nanother to sort optimize",
    "start": "1276340",
    "end": "1281830"
  },
  {
    "text": "the types of interactions we're\ngoing to have with that set and make them as\nfast as possible. This is exactly the\nsame story for a graph.",
    "start": "1281830",
    "end": "1289690"
  },
  {
    "text": "So for instance, the world's\ndumbest representation of a graph would be to just\nhave a long list of edges.",
    "start": "1289690",
    "end": "1296530"
  },
  {
    "text": "So for example, for\nthis graph up here maybe I have 0, 1, that's\nan edge, and then 0,",
    "start": "1296530",
    "end": "1304929"
  },
  {
    "text": "2, that's another edge, and\nthen 1, 2, and then 2, 1.",
    "start": "1304930",
    "end": "1310930"
  },
  {
    "text": "There's a big list of edges. It's really a set. I don't care about the order. AUDIENCE: The first one's 1, 2.",
    "start": "1310930",
    "end": "1316718"
  },
  {
    "text": "JUSTIN SOLOMON: 1--\noh, you're right. I'm sorry. Yeah, the edge points up-- thanks Erik, or not Erik--",
    "start": "1316718",
    "end": "1321875"
  },
  {
    "text": "Jason.  OK, so let's say that I\nhave a graph algorithm,",
    "start": "1321875",
    "end": "1328408"
  },
  {
    "text": "and I'm going to\nhave to do something like check whether there\nexists an edge from v to w a bunch of times.",
    "start": "1328408",
    "end": "1334270"
  },
  {
    "text": " How long is that going to\ntake in this data structure?",
    "start": "1334270",
    "end": "1339380"
  },
  {
    "text": "Well, if I just have like a hot\nmess disorganized list of edges and I want to know does there\nexist an edge from v to w,",
    "start": "1339380",
    "end": "1345250"
  },
  {
    "text": "all I can do is write a FOR\nloop that just goes along this and says, like this the\nedge I'm looking for.",
    "start": "1345250",
    "end": "1350480"
  },
  {
    "text": "No. Is that the edge\nI'm looking for? No. So every single time I\nwant to find an edge, it's going to take\nme time proportional",
    "start": "1350480",
    "end": "1357933"
  },
  {
    "text": "to the number of\nedges of my graph which could potentially\nbe up to v squared. Yeah, so this is not such\na great representation",
    "start": "1357933",
    "end": "1364600"
  },
  {
    "text": "of a graph on my computer. So if we're thinking back\nto our data structure we may say, OK, so an edge list\nis probably not the way to go.",
    "start": "1364600",
    "end": "1372130"
  },
  {
    "text": "Although notice that\nthe way we notated what is a graph kind of\nlooks like an edge list. But in any event, the\nmore common thing to do",
    "start": "1372130",
    "end": "1379870"
  },
  {
    "text": "is to source something\nlike an adjacency list. So the basic idea\nof an adjacency list",
    "start": "1379870",
    "end": "1388360"
  },
  {
    "text": "is that what I'm going to store\nis a set that maps a vertex",
    "start": "1388360",
    "end": "1398710"
  },
  {
    "text": "u to everything adjacent to u.",
    "start": "1398710",
    "end": "1404465"
  },
  {
    "text": "So in other words,\nI'm just going to keep track of all\nthe outgoing edges from every vertex.",
    "start": "1404465",
    "end": "1409830"
  },
  {
    "text": "And now I have to decide, how\nam I going to store this object. And oftentimes,\nwe're going to have",
    "start": "1409830",
    "end": "1415100"
  },
  {
    "text": "to answer queries like does\nthere exist an edge from v to w. So how could I do that? First, I would look\nup v, and I get back",
    "start": "1415100",
    "end": "1423140"
  },
  {
    "text": "sort of a list or a\nset of all the things that are adjacent to v. And\nI have to query that thing. And I want it to be pretty fast.",
    "start": "1423140",
    "end": "1429110"
  },
  {
    "text": "So maybe what I do\nis I store the set",
    "start": "1429110",
    "end": "1434990"
  },
  {
    "text": "of adjacent stuff as\nsomething like a direct access",
    "start": "1434990",
    "end": "1440990"
  },
  {
    "text": "array or a hash table to\nmake that look up fast.",
    "start": "1440990",
    "end": "1447500"
  },
  {
    "start": "1447500",
    "end": "1454870"
  },
  {
    "text": "So for example, how\nlong would it take-- I see, I'm going to\nfinish the sentence here-- how long would it\ntake me to check",
    "start": "1454870",
    "end": "1460457"
  },
  {
    "text": "if an edge existed in my graph? Well, what would I do? I would first pull\nout this object, and then I'd look\ninside of here.",
    "start": "1460457",
    "end": "1466720"
  },
  {
    "text": "So if I stored this\nas a hash table, then the expected time I\nwould have order one look up, because this is\norder one and then",
    "start": "1466720",
    "end": "1472690"
  },
  {
    "text": "you have another order\none look up there. So we went from v squared to\none with one simple trick.",
    "start": "1472690",
    "end": "1478580"
  },
  {
    "text": "Yes? AUDIENCE: Does it matter\nwhat direction [INAUDIBLE] JUSTIN SOLOMON: That's\na great question.",
    "start": "1478580",
    "end": "1483890"
  },
  {
    "text": "So this is a design\ndecision here. I'm sorry, in my head I think\na lot about undirected graphs, and I'm going to make\nthis mistake a lot.",
    "start": "1483890",
    "end": "1489818"
  },
  {
    "text": "And I'm glad that you caught me. There's a totally\nreasonable thing to do, which is maybe just to keep\ntrack of the outgoing edges",
    "start": "1489818",
    "end": "1495670"
  },
  {
    "text": "for every vertex. This is a design decision. For an algorithm\nmaybe I want to keep track of the incoming edges.",
    "start": "1495670",
    "end": "1500972"
  },
  {
    "text": "Whatever, I just\nhave to make sure that it aligns with what I\nwant to do with my graph later. Excellent point.",
    "start": "1500973",
    "end": "1506990"
  },
  {
    "text": "Sorry, as a geometry person\nwe rarely encounter directed graphs. But it's important\nto keep remembering",
    "start": "1506990",
    "end": "1513700"
  },
  {
    "text": "that not everybody works on\nthe same problems that I do. OK, now if I wanted to be\ntotally extreme about it--",
    "start": "1513700",
    "end": "1520630"
  },
  {
    "text": "as just a third example\nof representation, which actually,\nin some sense, you could think of like\nan adjacency list--",
    "start": "1520630",
    "end": "1525725"
  },
  {
    "text": "we need an adjacency matrix\nwhere now I just keep a giant v by v array of\nlike does this exist,",
    "start": "1525725",
    "end": "1532090"
  },
  {
    "text": "does that edge exist. Now it's really, really easy\nto check if an edge exists.",
    "start": "1532090",
    "end": "1538670"
  },
  {
    "text": "But now let's say that I\nmake a graph algorithm that's going to have a\nFOR loop over all the neighbors of some vertex.",
    "start": "1538670",
    "end": "1545470"
  },
  {
    "text": "So here, if I wanted to loop\nover all the neighbors of u, I could do that in\ntime proportional",
    "start": "1545470",
    "end": "1551400"
  },
  {
    "text": "to the number of neighbors of u. But if I just have a\nbig adjacency matrix, just a bunch of binary values--\nlike for every pair of vertices",
    "start": "1551400",
    "end": "1559760"
  },
  {
    "text": "are these vertices\nadjacent-- yea or nay. If I want to iterate\nover all my neighbors, now I have to iterate\nover all the vertices",
    "start": "1559760",
    "end": "1567110"
  },
  {
    "text": "and check is that number\none and then do something. So actually that can\nincur some additional time and additional space.",
    "start": "1567110",
    "end": "1573200"
  },
  {
    "text": "Does that makes sense? So in any event, that's a\nsort of a lazy man's graph",
    "start": "1573200",
    "end": "1578929"
  },
  {
    "text": "representation. I use it a lot when I'm coding\nbecause adjacency matrices are easy to work with. But it does incur a lot\nof additional space,",
    "start": "1578930",
    "end": "1585407"
  },
  {
    "text": "and it's not always the\nmost efficient thing even if you have the space\nbecause iterating over neighbors, it actually can\ntake quite a bit of time.",
    "start": "1585407",
    "end": "1592700"
  },
  {
    "text": "OK, so the real point\nof our lecture today is to start introducing sort\nof the canonical problem",
    "start": "1592700",
    "end": "1597980"
  },
  {
    "start": "1595000",
    "end": "1775000"
  },
  {
    "text": "that we all worry\nabout on graphs which is computing paths, in\nparticular shortest paths.",
    "start": "1597980",
    "end": "1603383"
  },
  {
    "text": "So the first thing we\nshould do is, of course, define what a path\nis on a graph.",
    "start": "1603383",
    "end": "1608580"
  },
  {
    "text": "So we're going to talk about\nour graph like a road network. Let's think of maybe every\nnode here as an intersection.",
    "start": "1608580",
    "end": "1614659"
  },
  {
    "text": "So this is a roughly\nKendall Square. See it's a square. But in any event, let's\nsay that I want to find--",
    "start": "1614660",
    "end": "1624050"
  },
  {
    "text": "maybe a question\none would be does there exist a way to get\nfrom vertex 1 to vertex 3. And then a better\nquestion to ask",
    "start": "1624050",
    "end": "1630380"
  },
  {
    "text": "would be does there exists a\nshort way to get from vertex 1 to vertex 3. Then of course, the\nfirst thing I have to do",
    "start": "1630380",
    "end": "1635480"
  },
  {
    "text": "is to define my enemy. I have define what I'm\nlooking for, which is a path. So a path is nothing more than a\nsequence of vertices in a graph",
    "start": "1635480",
    "end": "1643130"
  },
  {
    "text": "where every pair of adjacent\nvertices in that sequence is an edge. I think this all aligns\nwith our intuition",
    "start": "1643130",
    "end": "1649310"
  },
  {
    "text": "of what a path is in a graph. So for instance, here's a\npath p equals v1, v2, v3.",
    "start": "1649310",
    "end": "1655370"
  },
  {
    "text": "So notice that there's\nan edge from v1 to v2 and also an edge from v2 to v3. So it satisfies the assumptions\nset forth in our definition.",
    "start": "1655370",
    "end": "1665600"
  },
  {
    "text": "What would not be a\npath in our graph-- would be like v1 comma v3,\nbecause there's no edge there.",
    "start": "1665600",
    "end": "1671900"
  },
  {
    "text": "OK, so if we talk about\npaths, then there's a very natural notion\nwhich is the length.",
    "start": "1671900",
    "end": "1678407"
  },
  {
    "text": "Length, I guess you could think\nof like the number of vertices in your path minus 1,\nor the number of edges",
    "start": "1678407",
    "end": "1683870"
  },
  {
    "text": "that your path traverses. Those are the same thing. So for instance, the length\nof the path p here is 2.",
    "start": "1683870",
    "end": "1690485"
  },
  {
    "text": "Does everybody see that? A very common coding bug\nthat I encounter a lot is adding 1 to that\nnumber by accident.",
    "start": "1690485",
    "end": "1698750"
  },
  {
    "text": "Because of course, there's\none more vertex in your path than there are edges. OK, and there are\nmany different--",
    "start": "1698750",
    "end": "1705730"
  },
  {
    "text": "there could be potentially\nmore than one path between any pair of vertices. So let's say that I have\nan undirected graph that",
    "start": "1705730",
    "end": "1713470"
  },
  {
    "text": "looks like the following. So it's just a square\nplus a diagonal. So here are nodes.",
    "start": "1713470",
    "end": "1719365"
  },
  {
    "text": " So then a perfectly valid\npath from the lower left",
    "start": "1719365",
    "end": "1724600"
  },
  {
    "text": "to the upper right would be\nto go one over and one up, but of course, there's\na more efficient way to get from the lower left\nto the upper right, which",
    "start": "1724600",
    "end": "1731717"
  },
  {
    "text": "is to go across the diagonal. And so when we talk\nabout the shortest path, it's nothing more\nthan the length",
    "start": "1731717",
    "end": "1737875"
  },
  {
    "text": "of the path that has the\nfewest number of edges or vertices between any pair\nof vertices in my graph.",
    "start": "1737875",
    "end": "1745290"
  },
  {
    "text": "OK, so this is our enemy. This is what we're after. It's computing the shortest path\nbetween vertices in a graph.",
    "start": "1745290",
    "end": "1751690"
  },
  {
    "text": "And this is the thing that\nwe'll be talking about quite a bit in this course. Because of course, it's\na very practical matter.",
    "start": "1751690",
    "end": "1757135"
  },
  {
    "text": "Like when I want to\nsolve routing problems, I want to move packets\nout of my network, I'd prefer not to-- well,\nunless I'm doing Tor--",
    "start": "1757135",
    "end": "1763350"
  },
  {
    "text": "I would prefer them not to hit\ntoo many computers in between. Then maybe I want a\ncomputer shortest path.",
    "start": "1763350",
    "end": "1768990"
  },
  {
    "text": "Or on a surface maybe I\nwant to move information in a way that's\nnot too far away.",
    "start": "1768990",
    "end": "1776190"
  },
  {
    "start": "1775000",
    "end": "1967000"
  },
  {
    "text": "But of course, there's\nsort of many variations on that theme when we\ntalk about shortest path or even just\nexistence of a path.",
    "start": "1776190",
    "end": "1782870"
  },
  {
    "text": "So these are three\nsort of model problems that we might solve on a graph. So the first one,\nwhich in this of course",
    "start": "1782870",
    "end": "1790090"
  },
  {
    "text": "we're calling the single\npair reachability, would be the idea that\nI take two vertices s and t on my graph g,\nand I ask you does there",
    "start": "1790090",
    "end": "1798720"
  },
  {
    "text": "exists a path between s and t. So what would be the\nsort of extreme example",
    "start": "1798720",
    "end": "1804009"
  },
  {
    "text": "where this problem\nmay not always give back the answer yes?",
    "start": "1804010",
    "end": "1809265"
  },
  {
    "text": "Somehow in our head, I\nthink we think of all graphs as being connected. But a perfectly valid graph\nthe way we've defined it",
    "start": "1809265",
    "end": "1815840"
  },
  {
    "text": "would be like 10\nvertices and no edges. This function would\nbe very easy to code",
    "start": "1815840",
    "end": "1821380"
  },
  {
    "text": "if that were the only\ngraph you ever cared about. But any event, the\nexistence of a path",
    "start": "1821380",
    "end": "1826560"
  },
  {
    "text": "is already a query\nthat takes a little bit of algorithmic thinking. We haven't figured out\nhow to do that yet.",
    "start": "1826560",
    "end": "1832950"
  },
  {
    "text": "Now another problem we can solve\nwould be the shortest path. Given a graph and\ntwo vertices, we might say, well, how far apart\nare these vertices of my graph",
    "start": "1832950",
    "end": "1841150"
  },
  {
    "text": "if I want to use the shortest\npossible distance from one to the other. Notice that I can use the second\nproblem to solve the first one.",
    "start": "1841150",
    "end": "1849250"
  },
  {
    "text": "Because what's the\nlength of the shortest path between two vertices that\ndon't have a path between them?",
    "start": "1849250",
    "end": "1855600"
  },
  {
    "text": "Infinity or a shrug--\nthat's actually a totally valid answer. Yeah, that's right.",
    "start": "1855600",
    "end": "1860730"
  },
  {
    "text": "So how could I implement\nthe reachability code? Well, I could call my\nshortest path code, and it gives me infinity.",
    "start": "1860730",
    "end": "1867030"
  },
  {
    "text": "Then I return no,\nit's not reachable. And if it gives me not\ninfinity, I return yes.",
    "start": "1867030",
    "end": "1872250"
  },
  {
    "text": "So remember that a key\nidea in an algorithms class is this idea of reduction. That I can use one\nfunction to solve another.",
    "start": "1872250",
    "end": "1879190"
  },
  {
    "text": "So in case, if we can\nsolve shortest path, then we can certainly solve\nthe reachability problem by calling that piece of code.",
    "start": "1879190",
    "end": "1886620"
  },
  {
    "text": "And then finally we could talk\nabout single source shortest path. So notice now that there's\nonly one input node here s--",
    "start": "1886620",
    "end": "1895220"
  },
  {
    "text": "so what this problem\nis saying is give me the length of the\nshortest path from s to every single other\nvertex in my graph.",
    "start": "1895220",
    "end": "1902493"
  },
  {
    "text": "Does that makes sense? Like maybe I return a big\narray with all the information, every single shortest distance.",
    "start": "1902493",
    "end": "1909690"
  },
  {
    "text": "So can we solve single\npair shortest path using single source shortest path?",
    "start": "1909690",
    "end": "1916120"
  },
  {
    "text": "Absolutely. I could take s in my single\npair shortest path problem,",
    "start": "1916120",
    "end": "1921580"
  },
  {
    "text": "compute the shortest path from\ns to literally everything else, and then throw away all of that\ninformation except the shortest",
    "start": "1921580",
    "end": "1927560"
  },
  {
    "text": "path to t, and now I'm good. Now I haven't justified that\nthis is the fastest possible",
    "start": "1927560",
    "end": "1933350"
  },
  {
    "text": "way to solve that\nsecond problem, but at least it shows that\nif I can solve problem three I can also solve problem two.",
    "start": "1933350",
    "end": "1939572"
  },
  {
    "text": "If I can solve from two I\ncan also solve problem one. So in today's\nlecture, we're just going to worry\nabout problem three.",
    "start": "1939572",
    "end": "1945603"
  },
  {
    "text": "In other words, these\nthings are sort of listed in increasing\norder of their difficulty.",
    "start": "1945603",
    "end": "1951390"
  },
  {
    "text": "OK, so in order to think about\nthe single source shortest path problem, we're going to make\none additional construction.",
    "start": "1951390",
    "end": "1957480"
  },
  {
    "text": "And this is an idea called\nthe shortest path tree. I got lazy drawing PowerPoint\nslides at 2:00 AM yesterday,",
    "start": "1957480",
    "end": "1964290"
  },
  {
    "text": "and instead thought I'd\ndraw a picture on the board. So let's draw a graph.",
    "start": "1964290",
    "end": "1972940"
  },
  {
    "start": "1967000",
    "end": "2375000"
  },
  {
    "text": "So here we have a, b-- I'm going to use letters\ninstead of numbers",
    "start": "1972940",
    "end": "1978030"
  },
  {
    "text": "to refer to nodes from now\non because I don't want to confuse the length\nof the shortest path",
    "start": "1978030",
    "end": "1983130"
  },
  {
    "text": "with the index of my node. So here's a, b, c--",
    "start": "1983130",
    "end": "1988320"
  },
  {
    "text": "I'm going to match\nmy notes here-- d, e, f.",
    "start": "1988320",
    "end": "1994725"
  },
  {
    "text": " Here's a graph--\nagain undirected",
    "start": "1994725",
    "end": "1999815"
  },
  {
    "text": "because your instructor likes to\nthink about undirected graphs. But I know I'm going\nto get feedback that I shouldn't have done that later.",
    "start": "1999815",
    "end": "2006110"
  },
  {
    "text": "But in any event,\nlet's say that I want to compute the shortest\npath from a to everything else-- or the length rather.",
    "start": "2006110",
    "end": "2011534"
  },
  {
    "text": "So first of all, even without\ntalking about an algorithm, I think it's pretty easy\nto guess what it is. So clearly the shortest path\nfrom a to a has length 0.",
    "start": "2011535",
    "end": "2019240"
  },
  {
    "text": "The shortest length from a\nto b is 1, from a to c is 2-- because I can follow these guys. Now it gets complicated.",
    "start": "2019240",
    "end": "2025040"
  },
  {
    "text": "It branched. So the next shortest path is\nlength 3, and then 4 like that.",
    "start": "2025040",
    "end": "2032695"
  },
  {
    "text": "Does everybody agree\nwith me that the numbers I've decorated here are\nthe length of the shortest path from a to everything else?",
    "start": "2032695",
    "end": "2038590"
  },
  {
    "text": " But what have I not done?",
    "start": "2038590",
    "end": "2043880"
  },
  {
    "text": "I haven't told you how to\nactually compute the path, I've just given you\nthe length of the path.",
    "start": "2043880",
    "end": "2049730"
  },
  {
    "text": "So I may want a piece\nof code that in addition to doing single source\nshortest path length,",
    "start": "2049730",
    "end": "2055550"
  },
  {
    "text": "also gives me a single\nsource shortest path. So initially when I think about\nthat, I might think about,",
    "start": "2055550",
    "end": "2062460"
  },
  {
    "text": "well, how do I even write\ndown a data structure that can store all of those paths.",
    "start": "2062460",
    "end": "2068059"
  },
  {
    "text": "Well every path could have\nlike v vertices in it, right. It could be that\nfor whatever reason,",
    "start": "2068060",
    "end": "2073254"
  },
  {
    "text": "there's a lot of\nbranching in my graph. And all the paths\nare super long. Actually, I guess I\nhave to think about",
    "start": "2073255",
    "end": "2078408"
  },
  {
    "text": "whether branching would\nmake them longer or shorter. But in any event, I could have\na really boring data structure",
    "start": "2078409",
    "end": "2084415"
  },
  {
    "text": "that just for\nevery single vertex keeps track of the shortest\npath from a to that vertex.",
    "start": "2084415",
    "end": "2091570"
  },
  {
    "text": "How big would that\ndata structure be? Well, if the only bound I\nhave on the length of a path",
    "start": "2091570",
    "end": "2096730"
  },
  {
    "text": "is that-- it certainly at most it takes\nall the vertices in my graph--",
    "start": "2096730",
    "end": "2102010"
  },
  {
    "text": "then any one path\nwill take v space. So that would take v\nsquared space total.",
    "start": "2102010",
    "end": "2107700"
  },
  {
    "text": "That wouldn't be so good. Because somehow I have an amount\nof information on my graph currently that's linear. It's just the\nlength of the path.",
    "start": "2107700",
    "end": "2113997"
  },
  {
    "text": "If I want to actually\nreconstruct that path, initially sort of spiritually\nfeels like I need way more space to do that.",
    "start": "2113997",
    "end": "2120242"
  },
  {
    "text": "But the answer is that\nwe actually don't. That we're going to\nonly need linear space, and the idea for that\nis to store an object",
    "start": "2120242",
    "end": "2125490"
  },
  {
    "text": "called the shortest path tree. Yes? AUDIENCE: Just for [INAUDIBLE]\nprevious [INAUDIBLE]..",
    "start": "2125490",
    "end": "2133823"
  },
  {
    "text": "JUSTIN SOLOMON: So the\nquestion was about recursion. We haven't actually written\ndown any graph algorithms. So we're going to defer on\nthat until we actually recurse.",
    "start": "2133823",
    "end": "2141105"
  },
  {
    "text": "And then we'll think\nabout it more carefully. Yeah, but it's a totally\nreasonable question. There are plenty of recursive\ngraph algorithms out there.",
    "start": "2141105",
    "end": "2147809"
  },
  {
    "text": "And then we'll have\nto do our counting very carefully for sure. ",
    "start": "2147810",
    "end": "2154480"
  },
  {
    "text": "Right, so instead, we're going\nto define an object called the shortest path tree. And the basic trick\nhere is to say, well,",
    "start": "2154480",
    "end": "2161810"
  },
  {
    "text": "how did I get from a to c? Well, there's always a vertex,\nwhich is its predecessor,",
    "start": "2161810",
    "end": "2168990"
  },
  {
    "text": "on the shortest path. And shortest path have this\nreally beautiful property, which is that the shortest path\nfrom a to c, if I truncate it--",
    "start": "2168990",
    "end": "2176790"
  },
  {
    "text": "right, so it goes a to b to c-- then the truncated one\nis also the shortest path",
    "start": "2176790",
    "end": "2183140"
  },
  {
    "text": "to that previous vertex. So let's think about\nthat a little bit, because that sentence\nwas, as usual, poorly phrased by your instructor.",
    "start": "2183140",
    "end": "2189530"
  },
  {
    "text": "So let's say that\nI have the shortest path from a to d, which is\nvery clearly a, b, c, d.",
    "start": "2189530",
    "end": "2198800"
  },
  {
    "text": "I think we can all agree. And now I take\nlike this sublist. I just look from a to c.",
    "start": "2198800",
    "end": "2205310"
  },
  {
    "text": "Is there ever a\ncircumstance when this is not the shortest path\nor a shortest path from a to c?",
    "start": "2205310",
    "end": "2213270"
  },
  {
    "text": "No, right because if there\nexisted a shorter path from a to c, I could\nsplice it in here",
    "start": "2213270",
    "end": "2219930"
  },
  {
    "text": "and find the shortest\npath from a to d. Do you see that? So based on that\nreasoning, rather than",
    "start": "2219930",
    "end": "2226920"
  },
  {
    "text": "string like this giant\nset of shortest paths, sort of actually\napplying, in some senses, recursive suggestion,\ninstead I can just",
    "start": "2226920",
    "end": "2235290"
  },
  {
    "text": "think of the one vertex that's\nbefore me in my shortest path. I'm going to trace backwards.",
    "start": "2235290",
    "end": "2241040"
  },
  {
    "text": "So let's take a look\nat our graph here.  Essentially, the object\nI'm going to keep track of",
    "start": "2241040",
    "end": "2247750"
  },
  {
    "text": "is like a predecessor, right. So what is the predecessor\nof f on the shortest path?",
    "start": "2247750",
    "end": "2254210"
  },
  {
    "text": "It's actually either d or e. It doesn't matter in this case. Maybe the predecessor\nis e for fun, right.",
    "start": "2254210",
    "end": "2262690"
  },
  {
    "text": "What's the predecessor of e? Well, clearly the previous\nvertex on the shortest path is c.",
    "start": "2262690",
    "end": "2269260"
  },
  {
    "text": "Similarly for d-- now we\nhave b and a and a bunch",
    "start": "2269260",
    "end": "2274540"
  },
  {
    "text": "of arrows that point this way. So for every vertex\nI'm just going to start an arrow pointing\ntoward the previous vertex",
    "start": "2274540",
    "end": "2280300"
  },
  {
    "text": "on the shortest path. I'm not going to store the\nwhole shortest path, just the very last edge.",
    "start": "2280300",
    "end": "2286369"
  },
  {
    "text": "So first of all, how much\nstorage does this take? It takes v space.",
    "start": "2286370",
    "end": "2291663"
  },
  {
    "text": "Do you see that? Or the size of the\nvertices space. Because every vertex just\nhas to store one thing, which is the previous\nvertex on the shortest path.",
    "start": "2291663",
    "end": "2300642"
  },
  {
    "text": "Now what does my algorithm\nfor tracing shortest path? It's really simple. I just start walking\nalong these edges",
    "start": "2300642",
    "end": "2305940"
  },
  {
    "text": "all the way until\nI get back to a. Now this object is called\nthe shortest path tree.",
    "start": "2305940",
    "end": "2311250"
  },
  {
    "text": "Notice I snuck in one\nadditional word which is tree. Why is that? Can I ever have a\ncycle in this graph?",
    "start": "2311250",
    "end": "2318611"
  },
  {
    "text": "It wouldn't really\nmake any sense, right. These are shortest path. You should be able to kind\nof follow the gradient back to the original vertex.",
    "start": "2318612",
    "end": "2326450"
  },
  {
    "text": "OK, so in other words, I'm going\nto basically decorate my graph",
    "start": "2326450",
    "end": "2331460"
  },
  {
    "text": "with one additional thing. We'll call it p of v which\nis the previous vertex on the shortest path from my\nsource point to my vertex v.",
    "start": "2331460",
    "end": "2340589"
  },
  {
    "text": "And what I think I've tried\nto argue to you guys today is that if I have\nthis information, that's actually enough to\nreconstruct the shortest path.",
    "start": "2340590",
    "end": "2346763"
  },
  {
    "text": "I just keep taking p of\nv, and then p of p of v, and then p of p of p\nof v, and so on, which",
    "start": "2346763",
    "end": "2352230"
  },
  {
    "text": "sounds more\ncomplicated than it is, until I trace back to\nmy original vertex. And this object conceptually is\ncalled the shortest path tree.",
    "start": "2352230",
    "end": "2360368"
  },
  {
    "text": "Any questions about that?  Yes? AUDIENCE: [INAUDIBLE]",
    "start": "2360368",
    "end": "2368045"
  },
  {
    "text": "JUSTIN SOLOMON: If I had an\nedge that connected a to d, OK. AUDIENCE: [INAUDIBLE]",
    "start": "2368045",
    "end": "2376980"
  },
  {
    "text": "JUSTIN SOLOMON: Oh, OK\nso the question was, let's say that our colleague\nhere added an edge--",
    "start": "2376980",
    "end": "2384599"
  },
  {
    "text": "this is a great question. You know somebody was evil,\nmy adversarial neural network,",
    "start": "2384600",
    "end": "2391410"
  },
  {
    "text": "stuck an edge here because\nit was adversarial, and it wanted my shortest\npath code to fail.",
    "start": "2391410",
    "end": "2396580"
  },
  {
    "text": "And now somehow the tree that I\ngave you is no longer correct. And my answer to that is yes.",
    "start": "2396580",
    "end": "2403440"
  },
  {
    "text": "Why is that? Well, by adding this edge here,\nthe length of my shortest path changed.",
    "start": "2403440",
    "end": "2408450"
  },
  {
    "text": "The shortest path\nfrom a to d is now 1. So this tree is no longer valid. I need a new tree.",
    "start": "2408450",
    "end": "2414120"
  },
  {
    "text": "So now what would be the\nprevious p of d here? Well, rather than\nbeing c, it would be a.",
    "start": "2414120",
    "end": "2422720"
  },
  {
    "text": "Yes, that's absolutely right. And it actually is reflective\nof a really annoying property of shortest path, which is if\nI add one edge to my graph,",
    "start": "2422720",
    "end": "2431150"
  },
  {
    "text": "the length of the shortest path\nto every vertex can change. Well, I guess with the\nexception of the source vertex.",
    "start": "2431150",
    "end": "2437330"
  },
  {
    "text": "Yeah, and that's actually\na really big headache in certain applications. So for instance-- and then\nI'll shut up about applications",
    "start": "2437330",
    "end": "2444980"
  },
  {
    "text": "and do math again-- I work a lot with 3D models. And there's a big data set of\n3D models of like ballerinas.",
    "start": "2444980",
    "end": "2451730"
  },
  {
    "text": "And ballerinas are really\nannoying because sometimes they put their hands\ntogether like that. And then suddenly the shortest\npath between your fingers",
    "start": "2451730",
    "end": "2458540"
  },
  {
    "text": "goes from your entire\nbody to like 0. And so incremental algorithms\nfor computing shortest path",
    "start": "2458540",
    "end": "2465860"
  },
  {
    "text": "can fail here, right. Because I have to\nupdate like everything if I accidentally glued\ntogether fingers like that.",
    "start": "2465860",
    "end": "2471974"
  },
  {
    "text": "So anyway, I'll let\nyou think about how you might fix that problem. If you want to know more,\nyou should take 6.838.",
    "start": "2471975",
    "end": "2477380"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE]. JUSTIN SOLOMON: If you\nchange your source node, the shortest possible\nchange again.",
    "start": "2477380",
    "end": "2483120"
  },
  {
    "text": "Yeah, so this is going to be one\nof these really boring things where I'm going\nto keep answering like any time I change\nanything about my problem--",
    "start": "2483120",
    "end": "2488440"
  },
  {
    "text": "I change my source,\nI change my edges-- I have to just recompute\nall the shortest paths. There are obviously algorithms\nout there that don't do that.",
    "start": "2488440",
    "end": "2496570"
  },
  {
    "text": "But we're not going to\nthink about them yet. OK. So as usual, I've\ntalked too much and left myself about\n10 minutes to do",
    "start": "2496570",
    "end": "2503220"
  },
  {
    "text": "the actual algorithm that's\ninteresting in the lecture here-- although actually, it's\nreally not so complicated,",
    "start": "2503220",
    "end": "2508550"
  },
  {
    "text": "so I think we'll do OK-- which is how do I actually\ncompute shortest paths? Yeah, and the basic\nthing we're going to do",
    "start": "2508550",
    "end": "2514080"
  },
  {
    "start": "2510000",
    "end": "2615000"
  },
  {
    "text": "is sort of build on\nthis tree analogy here. We are going to define one more\nobject, which I really like--",
    "start": "2514080",
    "end": "2519930"
  },
  {
    "text": "actually I enjoy this from\nJason's notes because it looks like calculus,\nand I enjoy that-- and that's an idea\nof the level set.",
    "start": "2519930",
    "end": "2528150"
  },
  {
    "text": "And so this is a whole\nset of things L sub k. And these are all the\nvertices that are distance k",
    "start": "2528150",
    "end": "2533715"
  },
  {
    "text": "away from my source. So for instance, if my\nsource vertex in this example is the vertex all\nthe way on the left,",
    "start": "2533715",
    "end": "2540540"
  },
  {
    "text": "then L0 obviously contains\njust that vertex, right. L1 is the next one.",
    "start": "2540540",
    "end": "2545670"
  },
  {
    "text": "L2 is the third one. But now L3 is a set\nof three vertices because those are all the\nthings that are distance",
    "start": "2545670",
    "end": "2552680"
  },
  {
    "text": "3 away from the source. That's what I've\nlabeled in pink here. OK, so that's all that\nthis notation here means.",
    "start": "2552680",
    "end": "2560230"
  },
  {
    "text": "Oh, I've made a slight typo\nbecause in this class distance is delta and not\nd, but whatever.",
    "start": "2560230",
    "end": "2566165"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JUSTIN SOLOMON: The\nshortest distance-- that's absolutely right. So for instance, I could\nhave a very long distance",
    "start": "2566165",
    "end": "2571283"
  },
  {
    "text": "from L0 to L2, right. I could just flip back and\nforth between L0 and L1, maybe go over to L4\nand then go back.",
    "start": "2571283",
    "end": "2577220"
  },
  {
    "text": "But that wouldn't be a terribly\nhelpful thing to compute. That's absolutely right. Yes?",
    "start": "2577220",
    "end": "2582286"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. JUSTIN SOLOMON: Oh,\nthe red background is the set L. So for example,\nL3 contains these three vertices",
    "start": "2582286",
    "end": "2590515"
  },
  {
    "text": "because they're all\nthe things that are distance 3 away from the left. I got a little too slick drawing\nmy diagram late last night.",
    "start": "2590515",
    "end": "2597930"
  },
  {
    "text": "I'm kind of proud of it. OK, so essentially if\nI wanted to compute",
    "start": "2597930",
    "end": "2604140"
  },
  {
    "text": "the length of the shortest path\nfrom all the way on the left to all the other\nvertices, one way",
    "start": "2604140",
    "end": "2609590"
  },
  {
    "text": "to do that would be to compute\nall these level sets and then just sort of check what\nlevel set I'm in, right.",
    "start": "2609590",
    "end": "2615150"
  },
  {
    "start": "2615000",
    "end": "2715000"
  },
  {
    "text": "So we're going to introduce\nan algorithm called Breadth-First search\nwhich does roughly that.",
    "start": "2615150",
    "end": "2620940"
  },
  {
    "text": "So Breadth-First\nsearch, the way we'll introduce it today is going to\nbe an algorithm for computing all of those level sets, L\nsub i, and then from that,",
    "start": "2620940",
    "end": "2628500"
  },
  {
    "text": "we can construct\nthe length and even the shape of the shortest path. And I'm going to move\nto my handwritten notes.",
    "start": "2628500",
    "end": "2635350"
  },
  {
    "text": "OK, and here's what our\nalgorithm is going to do.",
    "start": "2635350",
    "end": "2640568"
  },
  {
    "text": "I'm going to write it in\na slightly different way than what's in the notes and on\nthe screen, but only slightly.",
    "start": "2640568",
    "end": "2647080"
  },
  {
    "text": "So first of all, one thing\nI think we can all agree on is that level set 0--",
    "start": "2647080",
    "end": "2652150"
  },
  {
    "text": "oh, that's-- this\nchalk bifurcated-- it contains one node.",
    "start": "2652150",
    "end": "2657400"
  },
  {
    "text": "What should that node be? The source because the\nonly thing that's distance is 0 away from the source,\nis the source node.",
    "start": "2657400",
    "end": "2664140"
  },
  {
    "text": " OK, and in addition to that,\nwe can initialize the distance",
    "start": "2664140",
    "end": "2673460"
  },
  {
    "text": "from the source to itself. Everybody on three,\nwhat is the distance from the source to itself--",
    "start": "2673460",
    "end": "2678559"
  },
  {
    "text": "1, 2, 3. AUDIENCE: 0. JUSTIN SOLOMON: Thank you. See you're waking up\nnow, it's almost 11:00--",
    "start": "2678560",
    "end": "2683790"
  },
  {
    "text": "12:00. What time is it? Almost 12:00-- OK,\nand then finally--",
    "start": "2683790",
    "end": "2689210"
  },
  {
    "text": "well maybe initially\nwe don't really know anything about the array\np, so we just make it empty. Because p of the source,\nit somehow doesn't matter.",
    "start": "2689210",
    "end": "2696545"
  },
  {
    "text": "Because once I've made\nit back to the source, I'm done computing\nshortest path. So we're going to\nwrite an algorithm that",
    "start": "2696545",
    "end": "2702110"
  },
  {
    "text": "computes all the level sets and\nfills in this array p and fills in the distances\nall in one big shot.",
    "start": "2702110",
    "end": "2708380"
  },
  {
    "text": "We're going to call it\nBreadth-First search. OK, so let's do that. ",
    "start": "2708380",
    "end": "2715810"
  },
  {
    "start": "2715000",
    "end": "3172000"
  },
  {
    "text": "So we can use the notation here. And notice that\nthere's basically an induction going on, which is\nI'm going to compute level set",
    "start": "2715810",
    "end": "2722069"
  },
  {
    "text": "1 from level set 0, level\nset 2 from level set 1, and so on, until I fill\nin all my level sets.",
    "start": "2722070",
    "end": "2728560"
  },
  {
    "text": "Does that makes sense? So here's a slightly different\nway to notate the same thing.",
    "start": "2728560",
    "end": "2734080"
  },
  {
    "text": "I'm going to use a\nWHILE loop, which I know is like slightly\nnon-kosher, but that's OK.",
    "start": "2734080",
    "end": "2739540"
  },
  {
    "text": "So I'm going to initialize\na number i to be 1. This is going to be\nlike our counter.",
    "start": "2739540",
    "end": "2744580"
  },
  {
    "text": "I'm going to say WHILE the\nprevious level set is not",
    "start": "2744580",
    "end": "2752830"
  },
  {
    "text": "empty, meaning that\npotentially there's a path that goes through\nthe previous level set",
    "start": "2752830",
    "end": "2757960"
  },
  {
    "text": "into the next one. Because as soon as one\nof my levels is empty, notice that like the\nLi for even bigger i",
    "start": "2757960",
    "end": "2764845"
  },
  {
    "text": "are also going to be empty. There's like never a case when\nthere's something not distance i but then distance i plus 5.",
    "start": "2764845",
    "end": "2772109"
  },
  {
    "text": "OK, so now what\nam I going to do? Well, let's think\nback to our graph.",
    "start": "2772110",
    "end": "2778110"
  },
  {
    "text": " So like now I know that\nthis guy is distance 0 away.",
    "start": "2778110",
    "end": "2786100"
  },
  {
    "text": "That's what I started with. So now I'm going to look at all\nthe neighbors of this vertex. And I'm going to make\nthem distance 1 away.",
    "start": "2786100",
    "end": "2792790"
  },
  {
    "text": "Does that makes sense? And similarly here,\nthis guy is distance 2.",
    "start": "2792790",
    "end": "2798850"
  },
  {
    "text": "And eventually I'm going to\nget in trouble because maybe-- well, what's a\ngood example here.",
    "start": "2798850",
    "end": "2804110"
  },
  {
    "text": "I won't even try to draw. I could run into\ntrouble if I don't want to add a vertex twice\nto two different level sets.",
    "start": "2804110",
    "end": "2811670"
  },
  {
    "text": "Once I've put it\nin Li then I don't want to put it in Li\nplus 5 because I already know that it's distance i away.",
    "start": "2811670",
    "end": "2818260"
  },
  {
    "text": "Does that makes sense? OK, so what I'm\ngoing to do is I'm going to iterate over all the\nvertices in my previous level",
    "start": "2818260",
    "end": "2824720"
  },
  {
    "text": "set.  And now I'm going to\nlook at every vertex that",
    "start": "2824720",
    "end": "2832260"
  },
  {
    "text": "is adjacent to u. Because what do I know? I know that if I can get\nto u in i minus 1 steps,",
    "start": "2832260",
    "end": "2839520"
  },
  {
    "text": "how many steps should it take\nme to get to any neighbor of u? i steps because I can go\nthrough the path, which",
    "start": "2839520",
    "end": "2846710"
  },
  {
    "text": "is the length of i minus\n1, add one additional edge, and I'll get to that new guy.",
    "start": "2846710",
    "end": "2852590"
  },
  {
    "text": "So what can I do? I can iterate over\nall of v, which is in the adjacent set of u.",
    "start": "2852590",
    "end": "2862790"
  },
  {
    "text": "But I have to be a little\nbit careful because what if I have an edge backwards? So like for instance,\nhere I have an edge back",
    "start": "2862790",
    "end": "2868610"
  },
  {
    "text": "to the source. I guess this is-- yeah, that's a valid example.",
    "start": "2868610",
    "end": "2874665"
  },
  {
    "text": "I wouldn't want\nto add the source to the third level\nset because I already added it in the previous guy.",
    "start": "2874665",
    "end": "2881080"
  },
  {
    "text": "So I want to get rid\nof the union of all of the previous level sets.",
    "start": "2881080",
    "end": "2886300"
  },
  {
    "start": "2886300",
    "end": "2891416"
  },
  {
    "text": "Does that make sense? So in other words,\nI'm only going to look at the adjacent vertices\nthat I haven't visited yet",
    "start": "2891416",
    "end": "2897950"
  },
  {
    "text": "in my level set\ncomputational algorithm. And all I have to do is\nupdate my arrays, right.",
    "start": "2897950",
    "end": "2903410"
  },
  {
    "text": "So in particular, I'm going\nto add vertex v to level set i",
    "start": "2903410",
    "end": "2912230"
  },
  {
    "text": "because I haven't seen v yet. I'm going to set the distance\nfrom s to v equal to i",
    "start": "2912230",
    "end": "2923030"
  },
  {
    "text": "because I'm currently\nfilling in my level set i. And then finally what is p of v?",
    "start": "2923030",
    "end": "2931820"
  },
  {
    "text": "What is the previous\nvertex to v in my shortest path from my source? ",
    "start": "2931820",
    "end": "2938420"
  },
  {
    "text": "It's u, right. Because that's the guy\nin the previous level set that I'm building\nmy path from, right.",
    "start": "2938420",
    "end": "2945590"
  },
  {
    "text": "I'm going to set that to u. And then-- sorry, I\nran out of space-- but I also have to increment i.",
    "start": "2945590",
    "end": "2952990"
  },
  {
    "text": "OK, so what does\nthis algorithm do? It's just building one\nlevel set at a time. If we go back to our picture,\nso it starts by initializing L0",
    "start": "2952990",
    "end": "2961930"
  },
  {
    "text": "to just be the source vertex,\nthen it looks at all the edges coming out of that--\nin that case just one--",
    "start": "2961930",
    "end": "2967210"
  },
  {
    "text": "it makes that length 1-- and so on. And so this is\njust incrementally building up all\nthese level sets.",
    "start": "2967210",
    "end": "2972990"
  },
  {
    "text": "Now there's a pretty\nstraightforward proof by induction that this\nalgorithm correctly computes the L's the\np's and the deltas which",
    "start": "2972990",
    "end": "2980140"
  },
  {
    "text": "is all the information that we\nneed to compute the shortest path. I think you guys can do\nthat in your recitation",
    "start": "2980140",
    "end": "2986448"
  },
  {
    "text": "if you still need a little bit\nof induction proof practice here. And the final thing\nthat we should check",
    "start": "2986448",
    "end": "2993130"
  },
  {
    "text": "is what is the runtime\nof this algorithm. I'm going to squeeze it in there\njust at the last second here.",
    "start": "2993130",
    "end": "2999800"
  },
  {
    "text": "So let's take a look. So first of all, I did something\na little-- oh, no it's OK--",
    "start": "2999800",
    "end": "3008700"
  },
  {
    "text": "in my algorithm\nactually in step zero I had to make an array which\nwas the size equal to the number of vertices.",
    "start": "3008700",
    "end": "3014490"
  },
  {
    "text": "Remember that in 6.006\nhow much time does it take to allocate memory?",
    "start": "3014490",
    "end": "3019853"
  },
  {
    "text": "Yeah, it takes the amount\nof time proportional to the amount of\nmemory that I allocate. So already-- Steph, I see your\nhand but we're low on time.",
    "start": "3019853",
    "end": "3027180"
  },
  {
    "text": "So we're to make it to the end. Already we've incurred v time\nbecause our shortest pathway",
    "start": "3027180",
    "end": "3032599"
  },
  {
    "text": "array takes v space. But in addition to that, we\nhave this kind of funny FOR loop",
    "start": "3032600",
    "end": "3039500"
  },
  {
    "text": "where for every node I have\nto visit all of its neighbors.",
    "start": "3039500",
    "end": "3044610"
  },
  {
    "text": "But first of all, do I ever\nsee a node of twice here? No, because I'm going\nin order of distance.",
    "start": "3044610",
    "end": "3052260"
  },
  {
    "text": "And the second that I've\nseen a node in one level set, it can't be in another. That's our basic\nconstruction here.",
    "start": "3052260",
    "end": "3058830"
  },
  {
    "text": "Well, conveniently for\nyou guys, you already proved exactly the\nformula that we need. And if I'm lucky,\nI didn't trace it.",
    "start": "3058830",
    "end": "3064560"
  },
  {
    "text": "Yeah, here we are. So if we take a look here,\nthis is exactly the scenario",
    "start": "3064560",
    "end": "3069630"
  },
  {
    "text": "that we're in. Because what did we do? We iterated over all\nthe nodes in our graph, and then we iterated over all\nthe neighbors of those nodes.",
    "start": "3069630",
    "end": "3077080"
  },
  {
    "text": "And that's the basic\ncomputational time in our algorithm. So that FOR loop, or that\nWHILE loop rather, in my code",
    "start": "3077080",
    "end": "3085150"
  },
  {
    "text": "is incurring time proportional\nto the number of edges. So what is the total run time\nfor Breadth-First search?",
    "start": "3085150",
    "end": "3093440"
  },
  {
    "text": "Well, we need to\nconstruct that array. So just at step zero,\nwe've incurred v time.",
    "start": "3093440",
    "end": "3100280"
  },
  {
    "text": "And then we have to iterate\nover something that takes up most the number of edges. So overall our algorithm takes\nbig O of mod v plus mod e time.",
    "start": "3100280",
    "end": "3114813"
  },
  {
    "text": "Now, notice that this\nis-- you might view this as kind of redundant. By the way this-- I have a little bit of\na quibble with Jason.",
    "start": "3114813",
    "end": "3120059"
  },
  {
    "text": "But in this class we will call\nthis a linear time algorithm because it's linear in\nthe space that you're using to store your graph.",
    "start": "3120060",
    "end": "3125833"
  },
  {
    "text": "I think that's a\nlittle fishy personally because this scale could\nscale quadratically in v, but I digress.",
    "start": "3125833",
    "end": "3132930"
  },
  {
    "text": "In any event, why do we need\nboth of these terms here?",
    "start": "3132930",
    "end": "3139210"
  },
  {
    "text": "Well, notice that if I\nhad no edges in my graph, now this term is\ngoing to dominate.",
    "start": "3139210",
    "end": "3146110"
  },
  {
    "text": "But as I add edges to\nmy graph, this thing could go up to v squared. So this is somehow a more\ninformative expression",
    "start": "3146110",
    "end": "3152470"
  },
  {
    "text": "than just saying, well at\nworst this is v squared time. Does that makes sense? It's a slightly better\nformula to have.",
    "start": "3152470",
    "end": "3158290"
  },
  {
    "text": "OK, so with that we just\nsqueaked into the finish line. We have an algorithm for\ncomputing shortest paths.",
    "start": "3158290",
    "end": "3163339"
  },
  {
    "text": "And I will see you guys\nagain I guess on Tuesday. ",
    "start": "3163340",
    "end": "3172100"
  }
]