[
  {
    "text": "As presented in lecture, in this course, we\nuse a simple 32-bit processor called the Beta.",
    "start": "370",
    "end": "7410"
  },
  {
    "text": "The Beta works on 32-bit instruction and data\nwords.",
    "start": "7410",
    "end": "11590"
  },
  {
    "text": "However, the addresses in memory are specified\nin bytes.",
    "start": "11590",
    "end": "15500"
  },
  {
    "text": "A byte is made up of 8 bits, so each 32-bit\ninstruction consists of 4 bytes.",
    "start": "15500",
    "end": "22810"
  },
  {
    "text": "That means that if you have two instructions\nA and B in consecutive memory locations, if",
    "start": "22810",
    "end": "28570"
  },
  {
    "text": "A is at address 0x100, then B is at address\n0x104.",
    "start": "28570",
    "end": "35649"
  },
  {
    "text": "Now, suppose that you are given the following\npiece of code.",
    "start": "35649",
    "end": "42370"
  },
  {
    "text": "The . = 0 notation tells you that your program\nbegins at address 0.",
    "start": "42370",
    "end": "47018"
  },
  {
    "text": "You can assume that execution begins at this\nlocation 0 and halts when the HALT() instruction",
    "start": "47019",
    "end": "52809"
  },
  {
    "text": "is about to be executed.",
    "start": "52809",
    "end": "55448"
  },
  {
    "text": "We want to determine what value ends up in\nR0 after this instruction sequence has been",
    "start": "55449",
    "end": "60460"
  },
  {
    "text": "executed.",
    "start": "60460",
    "end": "62290"
  },
  {
    "text": "Note that we are working with hexadecimal\nnumbers in this code and we want our answer",
    "start": "62290",
    "end": "66830"
  },
  {
    "text": "to also be in hexadecimal.",
    "start": "66830",
    "end": "69900"
  },
  {
    "text": "This code begins with a LD operation into\nregister R0.",
    "start": "69900",
    "end": "74680"
  },
  {
    "text": "The load, uses the value of R31 + c as the\nsource address for the load.",
    "start": "74680",
    "end": "81120"
  },
  {
    "text": "Since R31 = 0, this means that the value stored\nat address c is being loaded into R0.",
    "start": "81120",
    "end": "89220"
  },
  {
    "text": "So after the LD, R0 = 0x300.",
    "start": "89220",
    "end": "95460"
  },
  {
    "text": "Next an ADDC of R0 with the constant b is\nperformed and that result is stored back into",
    "start": "95460",
    "end": "101830"
  },
  {
    "text": "R0.",
    "start": "101830",
    "end": "104540"
  },
  {
    "text": "The .=0x200 notation immediately preceding\nthe \"a\" label, tells us that address a = 0x200.",
    "start": "104540",
    "end": "113450"
  },
  {
    "text": "This means that address b = 0x204, and c = 0x208.",
    "start": "113450",
    "end": "122159"
  },
  {
    "text": "So if we are adding the constant b to R0,\nR0 now becomes 0x300 + 0x204 = 0x504.",
    "start": "122160",
    "end": "136709"
  },
  {
    "text": "Now lets take a look at this short piece of\ncode.",
    "start": "136709",
    "end": "140090"
  },
  {
    "text": "Our goal is to determine the value left in\nR0 in hexadecimal.",
    "start": "140090",
    "end": "146950"
  },
  {
    "text": "The . = 0 notation once again tells us that\nour first instruction (the branch) is at address",
    "start": "146950",
    "end": "152810"
  },
  {
    "text": "0.",
    "start": "152810",
    "end": "154160"
  },
  {
    "text": "The branch instruction then branches to location\n. + 4 = 0 + 4 = 4.",
    "start": "154160",
    "end": "163480"
  },
  {
    "text": "This is the address of the HALT() instruction.",
    "start": "163480",
    "end": "166590"
  },
  {
    "text": "In addition to branching to the HALT() instruction,\na branch instruction also stores the address",
    "start": "166590",
    "end": "172510"
  },
  {
    "text": "of the instruction immediately following it\ninto the destination register, R0 in this",
    "start": "172510",
    "end": "179209"
  },
  {
    "text": "case.",
    "start": "179209",
    "end": "180209"
  },
  {
    "text": "The address of the next instruction is 4,\nso R0 = 0x4.",
    "start": "180209",
    "end": "187610"
  },
  {
    "text": "Let's take a look at what this code is doing.",
    "start": "187610",
    "end": "192180"
  },
  {
    "text": "It first loads the contents of address x into\nR0, so R0 = 0x0FACE0FF or 0xFACEOFF for short.",
    "start": "192180",
    "end": "206810"
  },
  {
    "text": "It then moves the constant 0 into R1, so R1\n= 0.",
    "start": "206810",
    "end": "213110"
  },
  {
    "text": "It now enters the loop where the ANDC puts\ninto R3 the least significant bit of R0.",
    "start": "213110",
    "end": "220489"
  },
  {
    "text": "The ADD increments R1 if R3 equals 1.",
    "start": "220489",
    "end": "225260"
  },
  {
    "text": "This means that if the least significant bit\nof R0 was a 1, then R1 is incremented by 1,",
    "start": "225260",
    "end": "231750"
  },
  {
    "text": "otherwise R1 stays the same.",
    "start": "231750",
    "end": "234790"
  },
  {
    "text": "The shift right constant then shifts R0 to\nthe right by 1.",
    "start": "234790",
    "end": "239790"
  },
  {
    "text": "This makes R0 have a 0 in the most significant\nbit, and the top 31 bits, of what R0 used",
    "start": "239790",
    "end": "246909"
  },
  {
    "text": "to be, are shifted over by one position to\nthe right.",
    "start": "246909",
    "end": "251420"
  },
  {
    "text": "Note that this means that the least significant\nbit of the old R0 is now completely gone.",
    "start": "251420",
    "end": "257400"
  },
  {
    "text": "That's okay though because we already incremented\nR1 based on that original least significant",
    "start": "257400",
    "end": "262960"
  },
  {
    "text": "bit of R0.",
    "start": "262960",
    "end": "265560"
  },
  {
    "text": "The BNE, or branch on not equal, then branches\nback to loop as long as R0 is not equal to",
    "start": "265560",
    "end": "272090"
  },
  {
    "text": "0.",
    "start": "272090",
    "end": "273570"
  },
  {
    "text": "This means that what this loop is doing is\nlooking at the current least significant bit",
    "start": "273570",
    "end": "277940"
  },
  {
    "text": "of R0,\nincrementing R1 if that bit is 1,",
    "start": "277940",
    "end": "282360"
  },
  {
    "text": "and then shifting that bit out until all bits\nhave been shifted out.",
    "start": "282360",
    "end": "286860"
  },
  {
    "text": "In other words, it's counting the total number\nof ones in the original value loaded from",
    "start": "286860",
    "end": "291698"
  },
  {
    "text": "address x.",
    "start": "291699",
    "end": "293560"
  },
  {
    "text": "The loop ends when all the 1's have been counted\nat which point R0 is left with a 0 in it because",
    "start": "293560",
    "end": "300830"
  },
  {
    "text": "all the 1's have been shifted out.",
    "start": "300830",
    "end": "303720"
  },
  {
    "text": "R1 is left with the number of 1's in the data\n0x0FACE0FF equals in binary 0000 1111 1010",
    "start": "303720",
    "end": "320750"
  },
  {
    "text": "1100 1110 0000 1111 1111.",
    "start": "320750",
    "end": "331539"
  },
  {
    "text": "There are 19 ones in 0x0FACE0FF, so R1 = 19\n= 16 + 3 which in hexadecimal = 0x13.",
    "start": "331539",
    "end": "347720"
  },
  {
    "text": "In this piece of code, the CMOVE first sets\nthe stack pointer to 0x1000.",
    "start": "347720",
    "end": "354590"
  },
  {
    "text": "Then a PUSH(SP) operation is performed.",
    "start": "354590",
    "end": "358340"
  },
  {
    "text": "Lets first understand what a PUSH instruction\ndoes.",
    "start": "358340",
    "end": "361510"
  },
  {
    "text": "A PUSH instruction is actually a macro made\nup of two beta instructions.",
    "start": "361510",
    "end": "366919"
  },
  {
    "text": "To push a value onto the stack, the stack\npointer is first incremented by 4 in order",
    "start": "366919",
    "end": "372680"
  },
  {
    "text": "to point to the next empty location on the\nstack.",
    "start": "372680",
    "end": "376550"
  },
  {
    "text": "This sets SP = 0x1004.",
    "start": "376550",
    "end": "377870"
  },
  {
    "text": "Then, the contents of register Ra, which is\nbeing pushed onto the stack, are stored at",
    "start": "377870",
    "end": "387110"
  },
  {
    "text": "the memory location whose address is SP-4\nwhich is address 0x1000.",
    "start": "387110",
    "end": "395379"
  },
  {
    "text": "Now looking at the actual PUSH operation performed\nhere, we are performing a PUSH of stack pointer",
    "start": "395379",
    "end": "402500"
  },
  {
    "text": "so the Ra register is also the stack pointer.",
    "start": "402500",
    "end": "407169"
  },
  {
    "text": "This means that the value stored at location\n0x1000 is actually the value of SP which is",
    "start": "407169",
    "end": "414550"
  },
  {
    "text": "0x1004.",
    "start": "414550",
    "end": "417710"
  },
  {
    "text": "So the value that got pushed onto the stack\nis 0x1004.",
    "start": "417710",
    "end": "423289"
  }
]