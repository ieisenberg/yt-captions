[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5940"
  },
  {
    "start": "5940",
    "end": "25323"
  },
  {
    "text": "MICHAEL SIPSER: All right,\nwhy don't we get started? It's 2:35, time to begin.",
    "start": "25323",
    "end": "32820"
  },
  {
    "text": "So everyone, welcome back-- good to see you all.",
    "start": "32820",
    "end": "38240"
  },
  {
    "text": "Well, at least a few of you-- glad that you're here. ",
    "start": "38240",
    "end": "44320"
  },
  {
    "text": "So let's see. Why don't I get a layout, as I\nusually do, where we have been,",
    "start": "44320",
    "end": "53309"
  },
  {
    "text": "where we're going today. I'll talk a little tiny\nbit about the homework, because I've gotten a\ncouple of questions on that.",
    "start": "53310",
    "end": "58710"
  },
  {
    "text": "And then we'll jump in. So we have been talking\nabout Turing machines, which",
    "start": "58710",
    "end": "66810"
  },
  {
    "text": "is going to be our\npreferred model for the rest of the semester, since Turing\nmachines are the model which",
    "start": "66810",
    "end": "75329"
  },
  {
    "text": "we use to capture general\npurpose computing. And we looked at Turing\nmachines in various variations",
    "start": "75330",
    "end": "87800"
  },
  {
    "text": "on Turing machines--\nmulti-tapes, non-deterministic, and so on.",
    "start": "87800",
    "end": "93650"
  },
  {
    "text": "It's a bit recapping the history\nof the subject, when people looked at a variety of\ndifferent ways of formalizing",
    "start": "93650",
    "end": "101660"
  },
  {
    "text": "the notion of algorithm. And they showed that all of\nthose different formalizations",
    "start": "101660",
    "end": "108650"
  },
  {
    "text": "were equivalent to one another,\nwhich led to the Church-Turing thesis that all\nof these models--",
    "start": "108650",
    "end": "115070"
  },
  {
    "text": "each of these models really\ncapture our intuitive idea of what we mean by a procedure\nor an algorithm for--",
    "start": "115070",
    "end": "126650"
  },
  {
    "text": "at least for addressing things\nlike mathematical problems and precise problems\nof that kind.",
    "start": "126650",
    "end": "135200"
  },
  {
    "text": "So we talked about the\nChurch-Turing thesis. We also talked about a notation\nfor encodings and Turing",
    "start": "135200",
    "end": "140430"
  },
  {
    "text": "machines. We'll review that briefly. So today we're going to give\na bunch of examples of Turing",
    "start": "140430",
    "end": "148610"
  },
  {
    "text": "machine algorithms for solving\na variety of different problems. I should just say\nalgorithms really-- nothing special about\nTuring machines.",
    "start": "148610",
    "end": "154879"
  },
  {
    "text": "Turing machines are just going\nto be our formal counterpart. But from now on, we're going\nto use our Church-Turing thesis",
    "start": "154880",
    "end": "163130"
  },
  {
    "text": "in a way to just talk about\nalgorithms in general, because that's\nreally our interest. Turing machines is just our\nway of reasoning about them",
    "start": "163130",
    "end": "171260"
  },
  {
    "text": "mathematically, but\nwe're really ultimately interested in\nunderstanding algorithms. ",
    "start": "171260",
    "end": "177819"
  },
  {
    "text": "In terms of the format\nof today's class, I'm going to try a\nlittle experiment.",
    "start": "177820",
    "end": "182990"
  },
  {
    "text": "We're going to have little\nbreaks along the way, as well as the big coffee\nbreak in the middle.",
    "start": "182990",
    "end": "188740"
  },
  {
    "text": "We're going to have a little\nmini breaks, because I sometimes feel that there really\nisn't enough time for people",
    "start": "188740",
    "end": "194170"
  },
  {
    "text": "to be writing chat-- questions in the chat, because\nthings just are racing on.",
    "start": "194170",
    "end": "200909"
  },
  {
    "text": "And so this way we'll have\na little break after the-- pretty much after each slide. Some of them are going to be\na little longer than others.",
    "start": "200910",
    "end": "207700"
  },
  {
    "text": "In case you have questions,\nyou can pose them to me or to the TAs, and\nwe'll try to get back to you",
    "start": "207700",
    "end": "212800"
  },
  {
    "text": "on those. So moving on then, so today,\njust as a quick review,",
    "start": "212800",
    "end": "220400"
  },
  {
    "text": "Turing machines, as we\nset them up, they have-- on any input w, they have\nthree possible outcomes.",
    "start": "220400",
    "end": "229100"
  },
  {
    "text": "The Turing machine\ncan halt and accept w, can halt and reject w,\nor it can go forever",
    "start": "229100",
    "end": "235970"
  },
  {
    "text": "on w, which is rejecting\nby looping in our language. ",
    "start": "235970",
    "end": "242650"
  },
  {
    "text": "A Turing machine can recognize\na language, the collection of old strings that it accepts.",
    "start": "242650",
    "end": "248530"
  },
  {
    "text": "And if the Turing\nmachine always halts, we say it decides the\nlanguage, and it's a decider,",
    "start": "248530",
    "end": "253569"
  },
  {
    "text": "and so therefore, that language\nis a decided language, a Turing decider. Often we just say decidable,\nbecause we don't really",
    "start": "253570",
    "end": "259778"
  },
  {
    "text": "have a notion of\ndeciding in other models, so we often talk about\nTuring-recognizable",
    "start": "259779",
    "end": "266050"
  },
  {
    "text": "or just decidable. Or we'll sometimes\njust say recognizable, when we understand that we're\ntalking about Turing machines.",
    "start": "266050",
    "end": "273460"
  },
  {
    "text": "We briefly talked\nabout encodings. When you write it inside\nbrackets, some objects--",
    "start": "273460",
    "end": "280090"
  },
  {
    "text": "whatever they are-- could be\nstrings, could be machines, could be graphs,\ncould be polynomials--",
    "start": "280090",
    "end": "286210"
  },
  {
    "text": "we're representing\nthem as strings, and maybe a\ncollection of objects together represented\nas a string in order",
    "start": "286210",
    "end": "293410"
  },
  {
    "text": "so that we can present\nthat information as an input to a machine. And we talk about--",
    "start": "293410",
    "end": "298810"
  },
  {
    "text": "our languages our\ncollections of strings. And a notation for\nwriting a Turing machine",
    "start": "298810",
    "end": "304840"
  },
  {
    "text": "is going to be simply that\nEnglish description put inside quotation\nmarks to represent",
    "start": "304840",
    "end": "311560"
  },
  {
    "text": "our informal way of talking\nabout the formal object that we could produce,\nif we wanted to.",
    "start": "311560",
    "end": "316629"
  },
  {
    "text": "But we're never going\nto ask you to do that. OK, so now let me see.",
    "start": "316630",
    "end": "328565"
  },
  {
    "text": " Let's just take a quick\nbreak, as I promised.",
    "start": "328565",
    "end": "333570"
  },
  {
    "start": "333570",
    "end": "340518"
  },
  {
    "text": "If there's any quick\nquestions here, you can ask. ",
    "start": "340518",
    "end": "372040"
  },
  {
    "text": "Let's see-- got a lot\nof questions here. ",
    "start": "372040",
    "end": "378180"
  },
  {
    "text": "All right, why don't we move on? And some of these things\nare good questions.",
    "start": "378180",
    "end": "384240"
  },
  {
    "text": "Somebody asked, can\nyou-- how do you tell if the machine is looping\nor if it's really just taking",
    "start": "384240",
    "end": "389640"
  },
  {
    "text": "a very long time? You can't. That's what we're going to\nprove not in today's lecture,",
    "start": "389640",
    "end": "396270"
  },
  {
    "text": "but going to prove\nthat on Thursday.  You just can't tell.",
    "start": "396270",
    "end": "402080"
  },
  {
    "text": "So if that's in\nreference to problem 5, you're going to have to find\nsome other way of doing-- solving that problem without\nknowing whether the machine is",
    "start": "402080",
    "end": "408979"
  },
  {
    "text": "actually ever going to halt.",
    "start": "408980",
    "end": "414550"
  },
  {
    "text": "And somebody asked,\nhow can we tell if an English description is\npossible for a Turing machine?",
    "start": "414550",
    "end": "419950"
  },
  {
    "text": "Well, you can always write\ndown an English description",
    "start": "419950",
    "end": "426100"
  },
  {
    "text": "for any machine. It's-- might be very\ntechnical looking,",
    "start": "426100",
    "end": "431930"
  },
  {
    "text": "but if you can write it down\nin a formal way as states and transitions, then you can\nsimply write down an English",
    "start": "431930",
    "end": "437289"
  },
  {
    "text": "description, which would\njust be, follow those states.",
    "start": "437290",
    "end": "442750"
  },
  {
    "text": "OK, let's move on. ",
    "start": "442750",
    "end": "449300"
  },
  {
    "text": "OK, this is going to\nbe our first example of a algorithm that's\ngoing to answer",
    "start": "449300",
    "end": "457260"
  },
  {
    "text": "a question about automata. And it's a very simple problem.",
    "start": "457260",
    "end": "462870"
  },
  {
    "text": "It's a very simple\nproblem to solve, because we want\nto start out easy.",
    "start": "462870",
    "end": "468155"
  },
  {
    "text": " The name of the problem\nis the acceptance problem",
    "start": "468155",
    "end": "473780"
  },
  {
    "text": "for deterministic\nfinite automata, acceptance problem for DFAs.",
    "start": "473780",
    "end": "479560"
  },
  {
    "text": "And I'm going to express it,\nas I always do, as a language. So with this language here,\nI'm calling it a ADFA--",
    "start": "479560",
    "end": "487340"
  },
  {
    "text": "which stands for the\nacceptance problem for DFAs-- is the collection of pairs.",
    "start": "487340",
    "end": "494270"
  },
  {
    "text": "B and w-- B is a DFA. w is considered to be\nsome other string, which",
    "start": "494270",
    "end": "501770"
  },
  {
    "text": "will be an input to B.\nWe're going to be thinking of it as an input to B.\nI put the two of them",
    "start": "501770",
    "end": "507110"
  },
  {
    "text": "in brackets to represent\nthe pair of them as a single string.",
    "start": "507110",
    "end": "512560"
  },
  {
    "text": "We're not going to make explicit\nwhat the form of the encoding is. The only important thing\nis that the encoding should",
    "start": "512560",
    "end": "518419"
  },
  {
    "text": "be something simple, but\nthat the Turing machine can decode back into the DFA and\nthis input string to that DFA.",
    "start": "518419",
    "end": "528920"
  },
  {
    "text": "So anything reasonable is going\nto be a satisfactory encoding from us-- for us.",
    "start": "528920",
    "end": "535180"
  },
  {
    "text": "So this is an encoding of the\ntwo of them into a string, and where B is a\nDFA, and B accepts w.",
    "start": "535180",
    "end": "541529"
  },
  {
    "text": "So now, if you want to test if\nsomething's a member of ADFA,",
    "start": "541530",
    "end": "548040"
  },
  {
    "text": "then, first of all,\nyou want to make sure that the string itself\nthat you're getting really",
    "start": "548040",
    "end": "553950"
  },
  {
    "text": "encodes a DFA and a string. So it has to be the right form.",
    "start": "553950",
    "end": "560230"
  },
  {
    "text": "And once you know that,\nthen you have the DFA, you have the string\nw, and you're then",
    "start": "560230",
    "end": "566880"
  },
  {
    "text": "going to do the\nobvious thing, which would be to simulate\nB on w and see if it's actually accepting w.",
    "start": "566880",
    "end": "575490"
  },
  {
    "text": "So that's what the\ncontent of this slide is. I'm just going to\nwrite it down for you.",
    "start": "575490",
    "end": "580617"
  },
  {
    "text": "So I'm going to give a\nTuring machine, which I'm going to call-- the name of that Turing\nmachine is going to be D A DFA.",
    "start": "580617",
    "end": "586570"
  },
  {
    "text": " To help you remember the\nfunction of this machine.",
    "start": "586570",
    "end": "592330"
  },
  {
    "text": "This is a decider\nfor the language below, the ADFA language.",
    "start": "592330",
    "end": "597510"
  },
  {
    "text": "This is just a name, but-- so\nnothing fancy going on here, but just to help us\nremember, because I'm going to refer to some of\nthese Turing machines later on.",
    "start": "597510",
    "end": "607000"
  },
  {
    "text": "So this is the decider for ADFA. And I'm going to describe\nthat machine for you, and that machine decides\nthe ADFA language.",
    "start": "607000",
    "end": "616490"
  },
  {
    "text": "So what does that mean? So that machine-- I'm describing it now in\nEnglish, as I promised.",
    "start": "616490",
    "end": "622300"
  },
  {
    "text": "We're going to take\nan input string s, and first, it's going to check\nthat s has the right form, as I",
    "start": "622300",
    "end": "630520"
  },
  {
    "text": "mentioned-- has\nthe form which is the encoding of a DFA and a w.",
    "start": "630520",
    "end": "636980"
  },
  {
    "text": "If it's not of that\nform, the Turing machine should reject that\ninput right away.",
    "start": "636980",
    "end": "641995"
  },
  {
    "text": "Now, I'm not going to go through\nthe details of how that Turing machine is going to work, though\nI'll say a little bit more",
    "start": "641995",
    "end": "647640"
  },
  {
    "text": "this time only just to give\nyou a sense of how it actually might carry that out.",
    "start": "647640",
    "end": "654702"
  },
  {
    "text": "If you don't believe that\nyou can do it with a Turing machine, believe you could do it\nwith your favorite programming language. That's good enough,\nbecause that's",
    "start": "654702",
    "end": "660607"
  },
  {
    "text": "going to be-- that's\nequivalent to a Turing machine. So first, you check that the\ninput's of the right form.",
    "start": "660607",
    "end": "666000"
  },
  {
    "text": "Then you're going to simulate\nthe computation of B on w. And then, if B ends\nup in an accept state,",
    "start": "666000",
    "end": "671649"
  },
  {
    "text": "then we know B is accepting the\ninput, and we should accept, and we do. If B does not end up in an\naccept state at the end of w,",
    "start": "671650",
    "end": "680390"
  },
  {
    "text": "then we should reject,\nbecause B is not accepting w. OK? That's my description\nof this machine.",
    "start": "680390",
    "end": "688940"
  },
  {
    "text": "Let's just turn to a\nlittle bit of details just to make sure we're\ncomfortable with this.",
    "start": "688940",
    "end": "694070"
  },
  {
    "text": "So here is our Turing machine-- D, the decider for ADFA.",
    "start": "694070",
    "end": "700938"
  },
  {
    "text": "The input to that Turing\nmachine, as I mentioned, is going to be B and w,\nprovided it's of the right form.",
    "start": "700938",
    "end": "707500"
  },
  {
    "text": "So that's what this string S\nis supposed to be of that form. And what does that mean? It's just an encoding of the\nmachine w and the string--",
    "start": "707500",
    "end": "715629"
  },
  {
    "text": "the machine B and the string w. Let me just write it down.",
    "start": "715630",
    "end": "721240"
  },
  {
    "text": "Here is B written down in some\njust completely explicit way, where you're just listing the\nstates of B, the alphabet of B,",
    "start": "721240",
    "end": "729279"
  },
  {
    "text": "the transition function as\na table, the start state, and the set of\naccepting states--",
    "start": "729280",
    "end": "734920"
  },
  {
    "text": "just writing it down\nexplicitly, as you might do it if you would just\nwant to describe that machine in a\ncompletely formal way,",
    "start": "734920",
    "end": "740949"
  },
  {
    "text": "and then writing down\nwith the string is-- whatever it is.",
    "start": "740950",
    "end": "746630"
  },
  {
    "text": "Once DADFA has\nthat as its input, it can then go ahead\nand do that computation.",
    "start": "746630",
    "end": "753110"
  },
  {
    "text": "And just to try to make it\na little bit more explicit, I'm going to capture\nthat here by saying,",
    "start": "753110",
    "end": "759500"
  },
  {
    "text": "let's give that Turing\nmachine an extra tape, because we already know that the\nmulti-tape model is equivalent",
    "start": "759500",
    "end": "765887"
  },
  {
    "text": "to the single tape model-- make our life perhaps\na little easier. And in the course of doing\nthat simulation, what",
    "start": "765887",
    "end": "771440"
  },
  {
    "text": "do we want to keep track of? Well, what is the current\nstate of B, the DFA,",
    "start": "771440",
    "end": "777800"
  },
  {
    "text": "as we're reading\nthe symbols of w? And where in w are\nwe at right now?",
    "start": "777800",
    "end": "783389"
  },
  {
    "text": "So I'll call that k, which is\nthe input head location on w.",
    "start": "783390",
    "end": "788630"
  },
  {
    "text": "How many symbols\nof w have we read? OK? And that's all I'm going to say\nabout what this Turing machine",
    "start": "788630",
    "end": "797890"
  },
  {
    "text": "D looks like.  Oh, there's one more thing\nI do want to say for the--",
    "start": "797890",
    "end": "804910"
  },
  {
    "text": "that's coming up, because pretty\nmuch all of the Turing machines",
    "start": "804910",
    "end": "811149"
  },
  {
    "text": "that we're going to talk\nabout today and going forward are going to often want to\ncheck that their input is",
    "start": "811150",
    "end": "816850"
  },
  {
    "text": "of the correct form. I don't want to repeat this\nevery time, because that's going to be assumed. So my shorthand for that is\nto say my input is of the form",
    "start": "816850",
    "end": "825490"
  },
  {
    "text": "I'm looking for, and\nthat has built into it the check that the string-- the input string\nis of that form,",
    "start": "825490",
    "end": "832210"
  },
  {
    "text": "and we're going to\nreject if it is not. So all of our\nTuring machines are",
    "start": "832210",
    "end": "837490"
  },
  {
    "text": "going to start out, on\ninput, the string is of a certain form, and then go\nout and do something with it.",
    "start": "837490",
    "end": "845160"
  },
  {
    "text": "OK? ",
    "start": "845160",
    "end": "853370"
  },
  {
    "text": "OK, so let me try to answer\na few of the questions that I've gotten here, because\nI think this is important",
    "start": "853370",
    "end": "862680"
  },
  {
    "text": "as a way of getting\nus all started. Now, somebody asked me, can\nwe use arguments of this form?",
    "start": "862680",
    "end": "868110"
  },
  {
    "text": " Somebody asking, can we use--",
    "start": "868110",
    "end": "873709"
  },
  {
    "text": "can we give our\ndescription of a procedure, if I'm understanding\nthis correctly,",
    "start": "873710",
    "end": "879910"
  },
  {
    "text": "as using some other\nprogramming language? Well, typically, you just want\nto make sure you're understood.",
    "start": "879910",
    "end": "885970"
  },
  {
    "text": "If you want to do\nthat on a homework, I wouldn't advocate writing\nyour algorithm in Java,",
    "start": "885970",
    "end": "892167"
  },
  {
    "text": "because it's going\nto be hard to read. But write it down in some\npseudo programming language if you want, just to\nmake sure it's clear",
    "start": "892167",
    "end": "898570"
  },
  {
    "text": "that-- what you're doing. Probably English is going\nto be the easiest for you-- ",
    "start": "898570",
    "end": "906420"
  },
  {
    "text": "even though this person says-- feels it would be\neasier to do it in terms of a formal language. Well, whatever's easier-- as\nlong as we can understand it.",
    "start": "906420",
    "end": "916640"
  },
  {
    "text": "This is a good question\nhere I got to ask. What if B-- here's our\nB-- gets into a loop on w?",
    "start": "916640",
    "end": "926290"
  },
  {
    "text": "Well, that's not\ngoing to happen. B is a DFA. DFAs-- they move from state\nto state every time they",
    "start": "926290",
    "end": "935050"
  },
  {
    "text": "read a symbol of w. When they get to the end of\nw, it's the end of the story. There's no more\ncomputation to be done.",
    "start": "935050",
    "end": "941140"
  },
  {
    "text": "So we know in exactly\nhow many steps B is ever going to\ntake on-- it's going to take the same number of steps\nas the length of the input.",
    "start": "941140",
    "end": "948279"
  },
  {
    "text": "That's how many moves\nit gets to make. B as a DFA never loops.",
    "start": "948280",
    "end": "953470"
  },
  {
    "text": "So that would be a problem if\nit did loop, but it doesn't. That input never does loop.",
    "start": "953470",
    "end": "960860"
  },
  {
    "text": "So have we verified\nthat D is a decider? Well, I think I just did. ",
    "start": "960860",
    "end": "969830"
  },
  {
    "text": "From my standpoint, we've\nsaid enough to be sure that D is a decider.",
    "start": "969830",
    "end": "976520"
  },
  {
    "text": "There's never any\nreason for D to be-- for that DADFA Turing machine\nto be getting into a loop.",
    "start": "976520",
    "end": "984575"
  },
  {
    "text": "The input head location\nis referring to where we are on the string w? Yes. ",
    "start": "984575",
    "end": "994278"
  },
  {
    "text": "And somebody's asking\nme, is this the level of detail for the homework? Yes. That's all I want. It's all I'm looking for.",
    "start": "994278",
    "end": "1001345"
  },
  {
    "text": "OK?  Let us move on.",
    "start": "1001345",
    "end": "1007149"
  },
  {
    "text": "I'm going to have to-- otherwise we'll\nnever get anywhere. There are a lot\nof questions here. They're good questions.",
    "start": "1007150",
    "end": "1013250"
  },
  {
    "text": "So why don't we go on? Some of these may\nget resolved as we're going to look at\nadditional examples,",
    "start": "1013250",
    "end": "1018399"
  },
  {
    "text": "because that's all of today\nis pretty much examples. Let's talk about the similar\nproblem, the acceptance",
    "start": "1018400",
    "end": "1024657"
  },
  {
    "text": "problem, but now for NFAs.  So now, actually,\nNFAs can loop, so we",
    "start": "1024657",
    "end": "1032270"
  },
  {
    "text": "have to think about what\nthat possibly could look at. But before we get ahead\nof ourselves-- so now",
    "start": "1032270",
    "end": "1037639"
  },
  {
    "text": "the acceptance problems for\nNFAs looked very similar, except B is going to be an NFA.",
    "start": "1037640",
    "end": "1044099"
  },
  {
    "text": "That's going to be a\ndecidable language too. And now we have\nTuring machine A--",
    "start": "1044099",
    "end": "1049740"
  },
  {
    "text": "DANFA, the decider for\nANFA that decides ANFA.",
    "start": "1049740",
    "end": "1054950"
  },
  {
    "text": "OK? So now, as promised,\nhere's our new form for writing our Turing machine. On input B, w, we're\nassuming that B--",
    "start": "1054950",
    "end": "1065026"
  },
  {
    "text": "based on the context,\nsometimes you may want to say at this\npoint, what B and w are. But from the context,\nwe know what they are.",
    "start": "1065026",
    "end": "1071080"
  },
  {
    "text": "They're going to be an NFA\nand an input w for that NFA. ",
    "start": "1071080",
    "end": "1078200"
  },
  {
    "text": "I do want to jump\ninto the solution. First, before we actually look\nat the solution of this, we--",
    "start": "1078200",
    "end": "1086935"
  },
  {
    "text": "the Turing machine could\nsimulate the NFA on input w. And you have to be\ncareful on that simulation",
    "start": "1086935",
    "end": "1093049"
  },
  {
    "text": "that you don't end up\nlooping, because don't forget, an NFA could have epsilon\nmoves, and could be",
    "start": "1093050",
    "end": "1102230"
  },
  {
    "text": "looping on those epsilon moves. And so that would be a problem,\nif you're not careful about how",
    "start": "1102230",
    "end": "1108920"
  },
  {
    "text": "you do that simulation.  Now, I think, if you were\ngoing to simulate an NFA,",
    "start": "1108920",
    "end": "1117890"
  },
  {
    "text": "you would be-- wouldn't follow loop\naround loops forever.",
    "start": "1117890",
    "end": "1125120"
  },
  {
    "text": "And I think you can-- without getting--\nbecause this is not the way I'm going to\nsolve the problem--",
    "start": "1125120",
    "end": "1130147"
  },
  {
    "text": "you could find a way\nto avoid getting caught and getting stuck\nin loops for an NFA.",
    "start": "1130147",
    "end": "1138230"
  },
  {
    "text": "So even though that looks like\nit could be a problem, in terms",
    "start": "1138230",
    "end": "1144440"
  },
  {
    "text": "of looping forever, it turns\nout that it won't be a problem-- it wouldn't be a problem\nif you're careful.",
    "start": "1144440",
    "end": "1150530"
  },
  {
    "text": "But I'm not going\nto solve it that way anyway, because I'm going to\nillustrate a different method for solving this problem.",
    "start": "1150530",
    "end": "1155870"
  },
  {
    "text": "And that is we have exhibited\nbefore a way of converting NFAs",
    "start": "1155870",
    "end": "1161625"
  },
  {
    "text": "to DFAs.  So my Turing machine is going\nto solve the ANFA problem",
    "start": "1161625",
    "end": "1170180"
  },
  {
    "text": "by converting its\ninput, which is an NFA, to an equivalent DFA. I'm calling the\nNFA B and the DFA",
    "start": "1170180",
    "end": "1176899"
  },
  {
    "text": "that I got-- converting\nit into B prime. And what's nice about that\nis that, first of all,",
    "start": "1176900",
    "end": "1183460"
  },
  {
    "text": "we already know how to do\nthat conversion, because we essentially went over that in\nlecture a few lectures back,",
    "start": "1183460",
    "end": "1190740"
  },
  {
    "text": "and it's spelled out in\nfull detail in the textbook. So that is a conversion\nwe know how to do--",
    "start": "1190740",
    "end": "1196020"
  },
  {
    "text": "we'll assume we know how to do. And we can implement that\nTuring-- that conversion",
    "start": "1196020",
    "end": "1201890"
  },
  {
    "text": "on a Turing machine. Then, once we have\nthe equivalent DFA,",
    "start": "1201890",
    "end": "1207820"
  },
  {
    "text": "what do we do with that? In the previous\nslide, we showed how to solve the problem for DFAs.",
    "start": "1207820",
    "end": "1215190"
  },
  {
    "text": "So if we can convert\nthe NFA to a DFA, and then we already know how\nto solve the problem for DFAs, then we're done.",
    "start": "1215190",
    "end": "1221698"
  },
  {
    "text": "So that's how I'm going to say. We're going to convert\nthe NFA to a DFA, and then I'm going\nto run that DADFA",
    "start": "1221698",
    "end": "1230040"
  },
  {
    "text": "problem on the new\nmachine that I produced. So remember that the--",
    "start": "1230040",
    "end": "1235090"
  },
  {
    "text": "this machine here\ndecides the ADFA problem. And now I'm going to accept,\nif that new machine--",
    "start": "1235090",
    "end": "1243620"
  },
  {
    "text": "if that previous Turing machine\naccepts the DADFA problem",
    "start": "1243620",
    "end": "1251720"
  },
  {
    "text": "the machine accepts, and\nI'm going to basically do whatever it does. If it accepts, I'll accept.",
    "start": "1251720",
    "end": "1258410"
  },
  {
    "text": "If it rejects, then I'll reject. ",
    "start": "1258410",
    "end": "1271100"
  },
  {
    "text": "So I guess the thing\nthat this illustrates is this idea of using a\nconversion construction",
    "start": "1271100",
    "end": "1278299"
  },
  {
    "text": "inside a Turing\nmachine, and then a previously constructed\nTuring machine basically as a subroutine.",
    "start": "1278300",
    "end": "1286140"
  },
  {
    "text": "All this is perfectly legal,\nand it's the kind of thing we're going to be\ndoing a lot of, and that you should\nbe used to doing",
    "start": "1286140",
    "end": "1291870"
  },
  {
    "text": "that-- get ready to be doing\nthat on your homework too. ",
    "start": "1291870",
    "end": "1298650"
  },
  {
    "text": "And in fact, I'll give you\nanother a little extra hint that problem 6 can be\nsolved in this way.",
    "start": "1298650",
    "end": "1305400"
  },
  {
    "text": " OK.",
    "start": "1305400",
    "end": "1311190"
  },
  {
    "text": "All right, so here,\nlet's pause briefly. ",
    "start": "1311190",
    "end": "1321549"
  },
  {
    "text": "OK, got some interesting\nquestions here coming up-- ",
    "start": "1321550",
    "end": "1330850"
  },
  {
    "text": "somebody asked me,\ndo we need to be explicit about how\nwe're going to simulate that NFA or the DFA?",
    "start": "1330850",
    "end": "1337134"
  },
  {
    "text": "Because we don't know\nhow many states it has.  You do know how\nmany states it has.",
    "start": "1337135",
    "end": "1343600"
  },
  {
    "text": "Once it's presented\nto you on the input, you can see, oh, this is a\nmachine that has 12 states--",
    "start": "1343600",
    "end": "1349990"
  },
  {
    "text": "because you're given\nthe machine, and then you can do the simulation. ",
    "start": "1349990",
    "end": "1360270"
  },
  {
    "text": "Let's see.  And someone's asking me about\nlimits on the simulation",
    "start": "1360270",
    "end": "1367520"
  },
  {
    "text": "power of a Turing machine. That's a question that I'm\ngoing to postpone to later, because you're\nasking if a Turing",
    "start": "1367520",
    "end": "1373890"
  },
  {
    "text": "machine can simulate itself. And we'll talk about\nthings like that, but that's in a\nfew weeks from now,",
    "start": "1373890",
    "end": "1379890"
  },
  {
    "text": "so I'll hold off on that one. ",
    "start": "1379890",
    "end": "1385559"
  },
  {
    "text": "Decidable languages--\nsomebody's asking me a good question about closure\nproperties of the class",
    "start": "1385560",
    "end": "1391660"
  },
  {
    "text": "of decidable languages. Are they closed under\nintersection, union, and so on?",
    "start": "1391660",
    "end": "1396760"
  },
  {
    "text": "Yes. And the decidable languages are\nalso closed under complement.",
    "start": "1396760",
    "end": "1403659"
  },
  {
    "text": "That should be something\nyou should think about. But yes, that is true. The recognizable\nlanguages, however,",
    "start": "1403660",
    "end": "1410470"
  },
  {
    "text": "are closed under union\nand intersection, but they are not closed\nunder complement.",
    "start": "1410470",
    "end": "1416590"
  },
  {
    "text": "So that we will prove\non Thursday's lecture. ",
    "start": "1416590",
    "end": "1425830"
  },
  {
    "text": "So another question is, could we\nhave just run B on w in this-- in solving this problem,\ninstead of using reduced--",
    "start": "1425830",
    "end": "1431860"
  },
  {
    "text": "converting it to a\nnew Turing machine-- the B prime? Well, yes, we could\nhave just done that.",
    "start": "1431860",
    "end": "1441940"
  },
  {
    "text": "OK. I think we better move on. I don't want to get\ntoo bogged down here--",
    "start": "1441940",
    "end": "1447279"
  },
  {
    "text": "got a lot of questions\nthere, so sorry if I'm not getting to\nall of the questions.",
    "start": "1447280",
    "end": "1452950"
  },
  {
    "text": "OK. Or you can write to\nthe TAs too, obviously. I'm sure you are.",
    "start": "1452950",
    "end": "1458720"
  },
  {
    "text": "OK, so let's talk about\na different problem-- emptiness problem for DFAs. ",
    "start": "1458720",
    "end": "1469740"
  },
  {
    "text": "I'm going to give you now a-- just a DFA--",
    "start": "1469740",
    "end": "1475230"
  },
  {
    "text": "B-- and no input. And I'm going to ask, is\nthe language of that DFA",
    "start": "1475230",
    "end": "1482040"
  },
  {
    "text": "the empty set, the\nempty language? You understand the\nproblem, first of all?",
    "start": "1482040",
    "end": "1487800"
  },
  {
    "text": "I'm just handing you in a\nDFA, and I want to know, does this DFA accept\nany strings at all,",
    "start": "1487800",
    "end": "1493520"
  },
  {
    "text": "or is it just some dumb DFA-- it's just always\nvery negative DFA,",
    "start": "1493520",
    "end": "1499110"
  },
  {
    "text": "it just rejects everything-- and it has the empty language?",
    "start": "1499110",
    "end": "1504550"
  },
  {
    "text": "How do you tell? Not super hard, if\nyou think about how you would write a\nprogram to do that",
    "start": "1504550",
    "end": "1511669"
  },
  {
    "text": "or how you would\ndo it yourself-- so that's a decidable\nlanguage again.",
    "start": "1511670",
    "end": "1517120"
  },
  {
    "text": "So we're going to give\nnow a Turing machine decider for that language.",
    "start": "1517120",
    "end": "1522289"
  },
  {
    "text": "That decider says, well,\nI'm giving that DFA--",
    "start": "1522290",
    "end": "1527540"
  },
  {
    "text": "I want to know if its\nlanguage is empty. And the idea is just\nwhat you would think. I'm going to see, is there\na path from the start state",
    "start": "1527540",
    "end": "1535490"
  },
  {
    "text": "of that DFA to the-- an\naccept state of the DFA? If there is such a\npath, then that DFA",
    "start": "1535490",
    "end": "1540590"
  },
  {
    "text": "is going to have an input\nwhich goes along that path, and will be accepted. And so the language\nwon't be empty.",
    "start": "1540590",
    "end": "1546840"
  },
  {
    "text": "If there's no such path,\nthen clearly, this DFA can never accept anything, and\nso this language will be empty.",
    "start": "1546840",
    "end": "1554170"
  },
  {
    "text": "OK. Now, there are many\ndifferent path algorithms.",
    "start": "1554170",
    "end": "1561470"
  },
  {
    "text": "I think it would be a little\nbit sparse of me just--",
    "start": "1561470",
    "end": "1567530"
  },
  {
    "text": "some of you know algorithms. Some of you don't know\npath checking algorithms. I would like you to just\nto-- if you were giving",
    "start": "1567530",
    "end": "1573230"
  },
  {
    "text": "this kind of an\nanswer on a homework, to give me some sense\nof how that algorithm is going to work.",
    "start": "1573230",
    "end": "1579110"
  },
  {
    "text": "Don't be too high\nlevel about it. So the one I have in mind\nis the breadth research,",
    "start": "1579110",
    "end": "1587309"
  },
  {
    "text": "if you've heard of that. But it's very simple algorithm. What I'm going to use is\nkind of a marking procedure.",
    "start": "1587310",
    "end": "1593510"
  },
  {
    "text": "So I'm going to start\nby coloring the-- here is this-- I should have\nindicated-- this is my DFAB.",
    "start": "1593510",
    "end": "1601950"
  },
  {
    "text": "This is B over here. Should I try taking a chance\nof writing on this thing--",
    "start": "1601950",
    "end": "1609779"
  },
  {
    "text": "oops. This is B. Oh, great--",
    "start": "1609780",
    "end": "1616470"
  },
  {
    "text": "that didn't help. So this is B here. And the way I'm going to\ntest if it has a path--",
    "start": "1616470",
    "end": "1624150"
  },
  {
    "text": "if it accepts an\ninput is by seeing if there's a path from\nthe start state to any one of the accept states.",
    "start": "1624150",
    "end": "1629850"
  },
  {
    "text": "And I'm going to start it\nby marking the start state, and then marking\nall states that I",
    "start": "1629850",
    "end": "1635159"
  },
  {
    "text": "can get to from\npreviously marked states, and keep doing that until I\ncan't get to anything new.",
    "start": "1635160",
    "end": "1640200"
  },
  {
    "text": " There's going to be a series\nof iterations here marking",
    "start": "1640200",
    "end": "1646260"
  },
  {
    "text": "more and more states until\nthere's nothing new to mark, and then I say, did I\nmark any accept states?",
    "start": "1646260",
    "end": "1651870"
  },
  {
    "text": " OK, so let's just see how I\nwrite that down in English.",
    "start": "1651870",
    "end": "1659030"
  },
  {
    "text": "So I started marking\nthe start state. I repeat until no\nnew state is marked.",
    "start": "1659030",
    "end": "1664159"
  },
  {
    "text": " I'm going to say,\nmark every state that has an incoming arrow from\na previously marked state.",
    "start": "1664160",
    "end": "1673130"
  },
  {
    "text": "Accept-- then, once I'm done\nwith, that repeat loop-- accept if no accept state is\nmarked, because that means--",
    "start": "1673130",
    "end": "1680193"
  },
  {
    "text": "don't forget, it's a\nlittle bit inverted from what you might think. I'm going to accept if there's\nno marked accept state,",
    "start": "1680193",
    "end": "1686900"
  },
  {
    "text": "because that means there's\nno path to an accept state from the start state, which\nmeans the language is empty.",
    "start": "1686900",
    "end": "1693200"
  },
  {
    "text": "And EDFA is the DFAs\nthat have empty language, so I should be accepting those.",
    "start": "1693200",
    "end": "1700390"
  },
  {
    "text": "If there's no way to\nget to an accept state, no accept state is marked. And reject if some accept\nstate earmark, because then",
    "start": "1700390",
    "end": "1707560"
  },
  {
    "text": "the language is not empty. OK, so that's all I\nwanted to say about that.",
    "start": "1707560",
    "end": "1712690"
  },
  {
    "text": " Somebody's asking,\ncan you just say something like breadth\nversus [AUDIO OUT]..",
    "start": "1712690",
    "end": "1720270"
  },
  {
    "text": "The sketchier you\nare, the more chances that you're going to get\ncaught by the grader, who's",
    "start": "1720270",
    "end": "1725960"
  },
  {
    "text": "not going-- we have an army of people\ngrading these problems,",
    "start": "1725960",
    "end": "1731330"
  },
  {
    "text": "and just to stay on the-- be on the safe\nside of sketchiness and, say, don't cut\ntoo many corners,",
    "start": "1731330",
    "end": "1738110"
  },
  {
    "text": "because you might\nmiss something. Chances are it would be OK\njust to say breadth research, but I would prefer if--",
    "start": "1738110",
    "end": "1744530"
  },
  {
    "text": "you'd be safer if you said\na little bit more than that. OK. Oh, this is a good\nquestion here.",
    "start": "1744530",
    "end": "1754100"
  },
  {
    "text": "Somebody asked, can we just\nrun the DFA on all short-- on all strings?",
    "start": "1754100",
    "end": "1759520"
  },
  {
    "text": "Well, first of all, one thing-- to say something bad\nwould be, well, just",
    "start": "1759520",
    "end": "1766360"
  },
  {
    "text": "feed in all possible\nstrings into the DFA, and if any one of them--",
    "start": "1766360",
    "end": "1771970"
  },
  {
    "text": "if it accepts any\none of them, then we know its language is not empty. Well, that's not\na good algorithm,",
    "start": "1771970",
    "end": "1778419"
  },
  {
    "text": "because that's going to\npotentially run forever, because there's lots of strings.",
    "start": "1778420",
    "end": "1784240"
  },
  {
    "text": "There's infinitely many\nstrings to feed in to that DFA. And so a Turing machine, if\nit's trying to be a decider,",
    "start": "1784240",
    "end": "1792130"
  },
  {
    "text": "had better not do any infinite\noperations that are potentially going to go forever. ",
    "start": "1792130",
    "end": "1799290"
  },
  {
    "text": "To be fair to the proposer\nhere, the questioner here-- didn't ask that-- says, well,\ncan we feed in all strings",
    "start": "1799290",
    "end": "1806010"
  },
  {
    "text": "up to some bound, which\nwould be the number of states of the machine in this case?",
    "start": "1806010",
    "end": "1811730"
  },
  {
    "text": "And yes, that would\nwork, but then you would have to argue\nthat that's enough.",
    "start": "1811730",
    "end": "1817309"
  },
  {
    "text": "And yes, it is enough, but it\nwouldn't-- would not be enough in answering the\nproblem just to say,",
    "start": "1817310",
    "end": "1822920"
  },
  {
    "text": "feed it in that number\nof them, and we're done. You would have to say why. ",
    "start": "1822920",
    "end": "1832365"
  },
  {
    "text": "OK. ",
    "start": "1832365",
    "end": "1840550"
  },
  {
    "text": "Lot of questions here-- I'm going to move on. ",
    "start": "1840550",
    "end": "1845720"
  },
  {
    "text": "Let's see. Equivalence problem for DFAs-- now we're going to take things\nto the next level-- ask,",
    "start": "1845720",
    "end": "1851860"
  },
  {
    "text": "are there two-- I'm going to give you two DFAs.",
    "start": "1851860",
    "end": "1859170"
  },
  {
    "text": "And I want to know, do they\ndescribe the same language-- do they recognize\nthe same language?",
    "start": "1859170",
    "end": "1865140"
  },
  {
    "text": "OK? So how are we going to do that? So that's a decidable language.",
    "start": "1865140",
    "end": "1872148"
  },
  {
    "text": "Here's the decider.  My input now is going\nto be two DFAs--",
    "start": "1872148",
    "end": "1879560"
  },
  {
    "text": "again, represented as a\nstring, because that's what Turing machines deal\nwith as their inputs. But they can unpack that\nstring into two DFAs.",
    "start": "1879560",
    "end": "1888290"
  },
  {
    "text": "And there are several different\nways to do this problem, and I'm sure I'm going to get\nsuggestions with other ways",
    "start": "1888290",
    "end": "1895140"
  },
  {
    "text": "to go. One thing you could do is\njust to feed in strings",
    "start": "1895140",
    "end": "1901910"
  },
  {
    "text": "up to a certain length. Just like before, you can't\nfeed in all possible strings",
    "start": "1901910",
    "end": "1908170"
  },
  {
    "text": "and see if the machines\never behave differently on any of them, because\nthat's an infinite operation,",
    "start": "1908170",
    "end": "1915160"
  },
  {
    "text": "and we already decided\nwe can't do that. Now, if you want\nto talk about this being a recognizer,\ninstead of a decider,",
    "start": "1915160",
    "end": "1922570"
  },
  {
    "text": "then you might be able\nto do something like that just to make sure your-- you have to be just careful.",
    "start": "1922570",
    "end": "1929357"
  },
  {
    "text": "Let me not say more\non that right now. But certainly, for a decider,\nyou can't go forever.",
    "start": "1929357",
    "end": "1935539"
  },
  {
    "text": "You can't have\ninfinite operations. So you would have\nto have a cut-off.",
    "start": "1935540",
    "end": "1943500"
  },
  {
    "text": "So you can feed in all possible\nstrings up to some length, say, into A and B, and see\nif there's any difference.",
    "start": "1943500",
    "end": "1949799"
  },
  {
    "text": "Now, we actually had a problem\non that in the problem set 1, which said, if two DFAs\nhave unequal languages,",
    "start": "1949800",
    "end": "1959160"
  },
  {
    "text": "then they're going\nto see a difference. Then there's going to be a\nstring which acts differently on them, which is\nof length, at most,",
    "start": "1959160",
    "end": "1966510"
  },
  {
    "text": "the product of the number of\nstates of those two machines. So you can either\nreference that problem--",
    "start": "1966510",
    "end": "1974040"
  },
  {
    "text": "that would be an adequate\nsolution-- or reprove it or whatever. That would be fine. In fact, you can do\neven better than that,",
    "start": "1974040",
    "end": "1980160"
  },
  {
    "text": "as the optional problem showed. You only have to go up to the\nsum of the number of states, not up to the product.",
    "start": "1980160",
    "end": "1985440"
  },
  {
    "text": "But that's actually\nvery difficult to show. I'm not going to\nprove it that way.",
    "start": "1985440",
    "end": "1991255"
  },
  {
    "text": "I'm going to prove it in an\nentirely different way, which doesn't require any\nanalysis at all-- no proving something\nabout balance.",
    "start": "1991255",
    "end": "1999510"
  },
  {
    "text": "I'm going to take advantage of\nsomething we've already shown, which is I'm going to make\na new finite automaton,",
    "start": "1999510",
    "end": "2007820"
  },
  {
    "text": "a new DFAC built out\nof A and B, which accepts all the strings\non which A and B disagree.",
    "start": "2007820",
    "end": "2016247"
  },
  {
    "text": "And I'll show you how to-- that's easy to do. So first of all, let's--\nin terms of a picture, let's understand what this is.",
    "start": "2016247",
    "end": "2022420"
  },
  {
    "text": "So here we have-- this is the language of\nA, this is the language of B written as a Venn diagram.",
    "start": "2022420",
    "end": "2029590"
  },
  {
    "text": "And where are those places\nwhere they disagree? Well, they're either in\nA, but not in B, or in B,",
    "start": "2029590",
    "end": "2036850"
  },
  {
    "text": "but not in A. I'm\nshowing it to you here in terms of the blue region.",
    "start": "2036850",
    "end": "2042039"
  },
  {
    "text": "That actually has a name\ncalled the symmetric difference of these two sets.",
    "start": "2042040",
    "end": "2047830"
  },
  {
    "text": "These are the--\nall of the members which are in exactly one out\nof the two, but not both.",
    "start": "2047830",
    "end": "2053020"
  },
  {
    "text": " If you can make a machine C that\nwould accept all of the strings",
    "start": "2053020",
    "end": "2061289"
  },
  {
    "text": "in the blue region, then what\ndo we do with that machine? ",
    "start": "2061289",
    "end": "2066610"
  },
  {
    "text": "We test of its length\nlanguage is empty, which is what we've\nalready shown how to do-- because of the blue region is\nempty, that means that L of A",
    "start": "2066610",
    "end": "2074679"
  },
  {
    "text": "equals L of B. So I'm going to make a machine,\na DFAC where the language of C",
    "start": "2074679",
    "end": "2084000"
  },
  {
    "text": "is exactly that\nsymmetric difference. It's all the strings in A\nintersected with the strings that are not in B-- so in A and\nnot in B-- or in B and not--",
    "start": "2084000",
    "end": "2093149"
  },
  {
    "text": "then not an A-- take the union of\nthose two parts. And how do we know\nwe can make C? Well, we have those\nclosure constructions,",
    "start": "2093150",
    "end": "2102690"
  },
  {
    "text": "which we showed\nseveral lectures back. Those closure instructions\ncan be implemented on a Turing machine.",
    "start": "2102690",
    "end": "2109559"
  },
  {
    "text": "So a Turing machine\ncan build the DFAC, and then use that test\nfrom a few slides back,",
    "start": "2109560",
    "end": "2118850"
  },
  {
    "text": "the emptiness-- the last\nslide-- the emptiness tester for DFAs on C to see whether\nits language is empty.",
    "start": "2118850",
    "end": "2125970"
  },
  {
    "text": "And now, if C's\nlanguage is empty, then we know we can\naccept, because that means the two-- that L of\nA equals L of B. Otherwise,",
    "start": "2125970",
    "end": "2133310"
  },
  {
    "text": "we can reject. OK? So here's a note-- I'm going to ask you a check-in.",
    "start": "2133310",
    "end": "2140430"
  },
  {
    "text": "You can also use that time to\nsend me a few more questions, if you want. OK, here's my check-in.",
    "start": "2140430",
    "end": "2146570"
  },
  {
    "text": "OK, now, instead of testing\nequivalence of finite-- of DFAs, I want to\ntest equivalence",
    "start": "2146570",
    "end": "2151880"
  },
  {
    "text": "of regular expressions.  So here are R1, R2.",
    "start": "2151880",
    "end": "2158290"
  },
  {
    "text": "Regular expressions are called\nthe EQ regular expressions problem-- equivalents of\nregular expressions.",
    "start": "2158290",
    "end": "2163300"
  },
  {
    "text": "Can we now conclude that this\nproblem is also decidable, either immediately from\nstuff we've already shown;",
    "start": "2163300",
    "end": "2170940"
  },
  {
    "text": "or yes, but would take some\nsignificant extra work; or no, because intersection is\nnot a regular operation?",
    "start": "2170940",
    "end": "2177000"
  },
  {
    "text": "So let's see if I can pull that\nout here-- launch the polling. ",
    "start": "2177000",
    "end": "2182829"
  },
  {
    "text": "Here we go.  OK, I think we're\njust about done here.",
    "start": "2182830",
    "end": "2188205"
  },
  {
    "text": " Five seconds more--",
    "start": "2188205",
    "end": "2193910"
  },
  {
    "text": " OK, ready, set, end. ",
    "start": "2193910",
    "end": "2202790"
  },
  {
    "text": "All right.  Yes, the correct answer is A.\nWe have basically already shown",
    "start": "2202790",
    "end": "2211630"
  },
  {
    "text": "this fact, because-- why is that? Because we have shown\nthat we can convert--",
    "start": "2211630",
    "end": "2219730"
  },
  {
    "text": "if you're given two\nregular expressions, and we want to test\nwhether they're equivalent, they generate the\nsame language, we",
    "start": "2219730",
    "end": "2225760"
  },
  {
    "text": "can convert them both\nto find out automata.",
    "start": "2225760",
    "end": "2230980"
  },
  {
    "text": "We can convert them to NFAs,\nand then the NFAs to DFAs. And then we can\napply what we've just",
    "start": "2230980",
    "end": "2238770"
  },
  {
    "text": "showed about testing\nequivalence of DFAs. So yes, it really follows\nimmediately from stuff",
    "start": "2238770",
    "end": "2245010"
  },
  {
    "text": "we've already shown-- the\nconversion, number one, and then the testing of\nequivalence for DFAs.",
    "start": "2245010",
    "end": "2251550"
  },
  {
    "text": "So there's not really\nany work to do here. And in fact, what I'm trying to\nillustrate with this check-in--",
    "start": "2251550",
    "end": "2258000"
  },
  {
    "text": "that, once you've shown\nhow to do some kind of a test for one model, it--",
    "start": "2258000",
    "end": "2264010"
  },
  {
    "text": "going to apply for all\nof the equivalent models that we've shown to be\nequivalent, because the Turing machine can do the constructions\nwhich show the equivalence.",
    "start": "2264010",
    "end": "2274570"
  },
  {
    "text": "OK, so let's move on.  Somebody didn't get the poll.",
    "start": "2274570",
    "end": "2281250"
  },
  {
    "text": "Did most people\nnot get the poll? Well, I think most of\nyou have gotten it.",
    "start": "2281250",
    "end": "2286810"
  },
  {
    "text": "Did you? I'm not seeing a\nlot of complaints. So if you didn't get\nthe poll, something",
    "start": "2286810",
    "end": "2292350"
  },
  {
    "text": "is wrong with your\nsetup, and you're going to have to take the\nrecorded check-ins that",
    "start": "2292350",
    "end": "2300060"
  },
  {
    "text": "are going to launch right\nafter this lecture's over. Sorry. But you should figure out\nwhat's wrong with the setup",
    "start": "2300060",
    "end": "2306360"
  },
  {
    "text": "there, because I think most\npeople are getting these. OK, and with that, we're\ngoing to take a little break,",
    "start": "2306360",
    "end": "2311520"
  },
  {
    "text": "and then we'll\ncontinue on afterward. Let me know how this is--",
    "start": "2311520",
    "end": "2317250"
  },
  {
    "text": "should I be speed\na little speedier about the little mini\nbreaks that we're taking,",
    "start": "2317250",
    "end": "2324600"
  },
  {
    "text": "or is this good for you? Feedback is always-- I'm trying to make this as\ngood as I can for all of you.",
    "start": "2324600",
    "end": "2332760"
  },
  {
    "text": "OK, I think there's a mixture\nof between people saying that these breaks are good. Someone says they're\na little overlong,",
    "start": "2332760",
    "end": "2339180"
  },
  {
    "text": "so I'll try to tighten\nthem up a little. Some folks are saying what--",
    "start": "2339180",
    "end": "2344940"
  },
  {
    "text": "more people should\nbe asking the TAs. I don't know how the TAs are\ndoing, in terms of their--",
    "start": "2344940",
    "end": "2351630"
  },
  {
    "text": "I'll check with them\nafterward-- how well this is going for them,\nin terms of the questions. But I think some amount of\nbreak is good so that we don't--",
    "start": "2351630",
    "end": "2360940"
  },
  {
    "text": "so there's time to\nbe asking questions. Otherwise, what's the point\nof having a live lecture? ",
    "start": "2360940",
    "end": "2370470"
  },
  {
    "text": "So we will start promptly\nwhen this timer runs down. So be ready to go in\n55 seconds from now.",
    "start": "2370470",
    "end": "2383000"
  },
  {
    "start": "2383000",
    "end": "2390170"
  },
  {
    "text": "Just to confirm, to show the\ndecidability of the equivalence of two regular\nexpressions, do we need to show that we can use a\nTuring machine to convert them",
    "start": "2390170",
    "end": "2397332"
  },
  {
    "text": "to two DFAs first? ",
    "start": "2397332",
    "end": "2403770"
  },
  {
    "text": "If you want to test whether\ntwo regular expressions are equivalent, you can\ngive any procedure",
    "start": "2403770",
    "end": "2410970"
  },
  {
    "text": "for doing that\ndeciding you want. I'm just offering one\nsimple way to do it",
    "start": "2410970",
    "end": "2416850"
  },
  {
    "text": "that takes advantage of\nstuff we've already shown. But if you want\nto dig down and do some analysis of those\nregular expressions",
    "start": "2416850",
    "end": "2423900"
  },
  {
    "text": "to show that they describe\nthe same language, they generate the same\nlanguage, be my guest.",
    "start": "2423900",
    "end": "2428940"
  },
  {
    "text": "I think that's-- actually would\nbe complicated to do that that way. OK, so we're just about ready\nto go here, so let's continue.",
    "start": "2428940",
    "end": "2437250"
  },
  {
    "text": " And let me take\nthis timer off here.",
    "start": "2437250",
    "end": "2443990"
  },
  {
    "text": " All right. Now, we are going\nto talk a little",
    "start": "2443990",
    "end": "2451460"
  },
  {
    "text": "about context-free grammars. So we talked about decision\nproblems for finite automata.",
    "start": "2451460",
    "end": "2456720"
  },
  {
    "text": "Let's talk about\nsome for grammars.  OK, now I'm going to give\nus an analogous problem.",
    "start": "2456720",
    "end": "2463220"
  },
  {
    "text": "I'm going to give you a-- I'm calling it the\nacceptance problem, but-- just for consistency\nwith everything else,",
    "start": "2463220",
    "end": "2469100"
  },
  {
    "text": "but it's really the\ngenerating problem. So I'm giving you a grammar-- context-free grammar G and\na string that's in a string.",
    "start": "2469100",
    "end": "2478392"
  },
  {
    "text": "And I want to know, is\nit in the language of G? So does G generate w?",
    "start": "2478392",
    "end": "2483420"
  },
  {
    "text": "I'm calling that\nthe ACFG problem. So that's going to\nbe a decidable again.",
    "start": "2483420",
    "end": "2488570"
  },
  {
    "text": " These are getting slightly\nharder as we're moving along,",
    "start": "2488570",
    "end": "2494450"
  },
  {
    "text": "so I'm giving you a grammar and\na string, and I want to know,",
    "start": "2494450",
    "end": "2503160"
  },
  {
    "text": "does the grammar\ngenerate that string? ",
    "start": "2503160",
    "end": "2509790"
  },
  {
    "text": "Well, it's not totally\ntrivial to solve that. One thing you might try doing is\nlooking at all possible things,",
    "start": "2509790",
    "end": "2519570"
  },
  {
    "text": "all possible derivations\nfrom that grammar and see if any one\nof them leads to w--",
    "start": "2519570",
    "end": "2527530"
  },
  {
    "text": "leads you to generate w. Well, you have to be careful,\nbecause as I've-- as we've",
    "start": "2527530",
    "end": "2535740"
  },
  {
    "text": "shown in some of our examples,\nyou actually could have--",
    "start": "2535740",
    "end": "2541200"
  },
  {
    "text": "because you're allowed\nto have variables that can get converted\nto empty string,",
    "start": "2541200",
    "end": "2546950"
  },
  {
    "text": "you might have very long\nintermediate strings being generated from a, grammar\nwhich then ultimately give you",
    "start": "2546950",
    "end": "2554660"
  },
  {
    "text": "a small string of terminals\nthat get generated, a small string in the\nlanguage that gets produced.",
    "start": "2554660",
    "end": "2561155"
  },
  {
    "text": " You certainly don't want to\ntry every possible derivation,",
    "start": "2561155",
    "end": "2569279"
  },
  {
    "text": "because there's infinitely\nmany different derivations-- most of them\ngenerating, of course, things that are irrelevant\nto the string w.",
    "start": "2569280",
    "end": "2576869"
  },
  {
    "text": "But you have to know\nhow to cut things off, and it's not immediately\nobvious how you do that--",
    "start": "2576870",
    "end": "2582400"
  },
  {
    "text": " unless you have done the\nhomework problems that I asked",
    "start": "2582400",
    "end": "2591853"
  },
  {
    "text": "you to do, which I'm sure very\nmany of you have not done-- the zero point X problems,\nbecause they're--",
    "start": "2591853",
    "end": "2597480"
  },
  {
    "text": "that's going to come\nin handy right now. And so I'll help\nyou through that. ",
    "start": "2597480",
    "end": "2604820"
  },
  {
    "text": "Remember-- you should remember,\nbut you may not have looked at it--",
    "start": "2604820",
    "end": "2610160"
  },
  {
    "text": "something called\nChomsky normal form, which is for\ncontext-free grammars,",
    "start": "2610160",
    "end": "2616599"
  },
  {
    "text": "but only allows the rules\nto be of a special kind. And they have to look like this.",
    "start": "2616600",
    "end": "2622290"
  },
  {
    "text": "They can be a variable\nthat goes to two variables, on the right-hand\nside, or a variable that goes to a terminal.",
    "start": "2622290",
    "end": "2628900"
  },
  {
    "text": "Those are the only kinds of\nrules that you're allowed. This is a special case\nfor the empty string, but let's ignore that for--",
    "start": "2628900",
    "end": "2636040"
  },
  {
    "text": "the start variable can also\nwork to the empty string, if you want to have a-- the\nempty string in a language.",
    "start": "2636040",
    "end": "2641320"
  },
  {
    "text": "But that's a special case. Let's ignore that. These are the only\ntwo kinds of rules",
    "start": "2641320",
    "end": "2647770"
  },
  {
    "text": "that you can have in a\nChomsky normal form grammar. Once you have a Chomsky\nnormal form grammar--",
    "start": "2647770",
    "end": "2656235"
  },
  {
    "text": "well, first of all,\nthere's two things. First of all, you\ncan always convert any context-free grammar\ninto Chomsky normal form.",
    "start": "2656235",
    "end": "2663490"
  },
  {
    "text": "So that's given in the textbook. You do the obvious thing.",
    "start": "2663490",
    "end": "2668650"
  },
  {
    "text": "I'm not going to\nspend time on it. And you don't have to know it. It's just a little bit tedious,\nbut it's straightforward",
    "start": "2668650",
    "end": "2677109"
  },
  {
    "text": "and it's there,\nif you're curious. But the second lemma's\nthe thing that's",
    "start": "2677110",
    "end": "2682810"
  },
  {
    "text": "important to us, which is that,\nif you have a grammar which",
    "start": "2682810",
    "end": "2688770"
  },
  {
    "text": "is in Chomsky normal form and\na string that's generated, every derivation of that\nstring has exactly 2 times",
    "start": "2688770",
    "end": "2699870"
  },
  {
    "text": "the length of the\nstring minus 1 steps.  If you think about it, this is\na lemma-- very easy to prove.",
    "start": "2699870",
    "end": "2708270"
  },
  {
    "text": "I think the homework\nproblem asks you to prove that in\nthe 0.2 or whatever",
    "start": "2708270",
    "end": "2713400"
  },
  {
    "text": "it was in problem set 1-- or problem set 2-- I don't remember. ",
    "start": "2713400",
    "end": "2723500"
  },
  {
    "text": "Rules of this kind allow you\nto make the string one longer, and rules of this kind allow\nyou to produce a new terminal",
    "start": "2723500",
    "end": "2730869"
  },
  {
    "text": "symbol. ",
    "start": "2730870",
    "end": "2736266"
  },
  {
    "text": "If the length w is n, you're\ngoing to have n minus 1 of these and n of. Those that's why you\nget 2n minus 1 steps.",
    "start": "2736266",
    "end": "2746440"
  },
  {
    "text": "But the point is that I don't\nreally care exactly how many. It's just that we have a bound. And once you have\nthat bound, life",
    "start": "2746440",
    "end": "2753250"
  },
  {
    "text": "is good from the point\nof view of giving a Turing machine which is\ngoing to decide this language--",
    "start": "2753250",
    "end": "2762780"
  },
  {
    "text": "because here's the\nTuring machine. What it's going to do-- the first thing is\nit's going to convert G into Chomsky normal form.",
    "start": "2762780",
    "end": "2770330"
  },
  {
    "text": "That we assume we\nknow how to do. Now, we're going to try all\nderivations, but only those",
    "start": "2770330",
    "end": "2775750"
  },
  {
    "text": "of length 2-- twice the length of\nthe string minus 1,",
    "start": "2775750",
    "end": "2784870"
  },
  {
    "text": "because if any derivation\nis going to generate w, it has to be this many steps,\nnow that we know the grammar",
    "start": "2784870",
    "end": "2793990"
  },
  {
    "text": "is in Chomsky normal form. OK, so we have\nconverted this problem",
    "start": "2793990",
    "end": "2801780"
  },
  {
    "text": "of one that might be a very\nunboundedly lengthy problem and to one where it's going\nto terminate after some fixed",
    "start": "2801780",
    "end": "2808710"
  },
  {
    "text": "number of steps. And so therefore, we can\naccept, if any of those",
    "start": "2808710",
    "end": "2814160"
  },
  {
    "text": "generate w, and reject if not. OK?",
    "start": "2814160",
    "end": "2819700"
  },
  {
    "text": "Before moving on, so this\nanswers the problem-- shows that this language is\ndecidable, the ACFG language.",
    "start": "2819700",
    "end": "2829620"
  },
  {
    "text": "So that's something that-- make sure you understand. ",
    "start": "2829620",
    "end": "2835950"
  },
  {
    "text": "We're basically trying\nold derivations of up to-- of a certain length,\nbecause that's",
    "start": "2835950",
    "end": "2841050"
  },
  {
    "text": "all that's needed when the\ngrammar is in that form. Now we're going to use that\nto prove a corollary, which",
    "start": "2841050",
    "end": "2850000"
  },
  {
    "text": "is important for understanding\nhow everything fits together. And that corollary states that\nevery context-free language",
    "start": "2850000",
    "end": "2859240"
  },
  {
    "text": "is a decidable language. Every context-free\nlanguage is decidable. Now, why does that\nfollow from this?",
    "start": "2859240",
    "end": "2865990"
  },
  {
    "text": "Well, suppose you have\na context-free language.",
    "start": "2865990",
    "end": "2872550"
  },
  {
    "text": "We know that\nlanguage is generated by some context-free grammar\nG. That's what it means.",
    "start": "2872550",
    "end": "2882500"
  },
  {
    "text": "So then you can take that\ngrammar G and you can build it into a Turing machine.",
    "start": "2882500",
    "end": "2888680"
  },
  {
    "text": "So there's going to be a term\nmachine which is constructed",
    "start": "2888680",
    "end": "2896589"
  },
  {
    "text": "with the knowledge of G. And that Turing machine\nis going to take its w",
    "start": "2896590",
    "end": "2904930"
  },
  {
    "text": "and run the ACFG algorithm\nwith w combined with a G that's",
    "start": "2904930",
    "end": "2911890"
  },
  {
    "text": "already built into it. So it's just going to stick\nthat grammar G in front of w, and now we run the ACFG decider.",
    "start": "2911890",
    "end": "2920900"
  },
  {
    "text": "It's going to say,\ndoes degenerate w? Well, that's going to be\nyes every time w is in A.",
    "start": "2920900",
    "end": "2929870"
  },
  {
    "text": "And so this machine here\nnow is going to end up accepting every\nstring that's in A,",
    "start": "2929870",
    "end": "2936950"
  },
  {
    "text": "because it's every\nstring that G generates. So that is, I think, what\nI wanted to say about this.",
    "start": "2936950",
    "end": "2946890"
  },
  {
    "text": "Now, I feel that this\ncorollary here throws",
    "start": "2946890",
    "end": "2952119"
  },
  {
    "text": "a little bit of a curveball. And we can just\npause for a moment",
    "start": "2952120",
    "end": "2958210"
  },
  {
    "text": "here just to make sure\nyou're understanding this. ",
    "start": "2958210",
    "end": "2968910"
  },
  {
    "text": "The tricky thing about\nthis corollary is--",
    "start": "2968910",
    "end": "2974549"
  },
  {
    "text": "that I often get-- a question I often get where-- is when we start off with\na context-free language,",
    "start": "2974550",
    "end": "2983190"
  },
  {
    "text": "who gives-- how do we get G? ",
    "start": "2983190",
    "end": "2988830"
  },
  {
    "text": "Because we need G to build\na Turing machine M sub G. So",
    "start": "2988830",
    "end": "2994758"
  },
  {
    "text": "we know A is a\ncontext-free language, but how do we know what G is? Well, the point is that\nwe may not know what G is,",
    "start": "2994758",
    "end": "3006800"
  },
  {
    "text": "but we know G exists, because\nthat's a definition of A being a context-free language.",
    "start": "3006800",
    "end": "3014540"
  },
  {
    "text": "It must have a context-free\ngrammar, by definition. And so because G exists, I now\nknow my Turing machine, M sub",
    "start": "3014540",
    "end": "3023070"
  },
  {
    "text": "G, exists. And that's enough to\nknow that A is decidable,",
    "start": "3023070",
    "end": "3029080"
  },
  {
    "text": "because it has a\ndecider that exists. Now, if you're not going to\ntell me the grammar for G,",
    "start": "3029080",
    "end": "3035430"
  },
  {
    "text": "I'm not going to tell you the\nTuring machine which decides A.",
    "start": "3035430",
    "end": "3042380"
  },
  {
    "text": "But both of them exist. So if you tell me G, then I can\ntell you the Turing machine.",
    "start": "3042380",
    "end": "3047500"
  },
  {
    "text": " So it's a subtle,\ntricky issue there.",
    "start": "3047500",
    "end": "3052790"
  },
  {
    "text": "A certain little element\nmaybe of-- sometimes people call it non-constructive,\nbecause we're just, in a sense, showing just that\nsomething is existing.",
    "start": "3052790",
    "end": "3058837"
  },
  {
    "text": " It does the job for\nus, because it shows",
    "start": "3058837",
    "end": "3064270"
  },
  {
    "text": "that A is a decidable language. OK, so not so many questions\nhere-- maybe the TAs",
    "start": "3064270",
    "end": "3069402"
  },
  {
    "text": "are getting them. So let's move on. Here's another check-in.",
    "start": "3069402",
    "end": "3075260"
  },
  {
    "text": "So now, can we conclude that A-- instead of ACFG,\nAPDA is decidable?",
    "start": "3075260",
    "end": "3081730"
  },
  {
    "start": "3081730",
    "end": "3096608"
  },
  {
    "text": "People are getting\nthis one pretty fast. ",
    "start": "3096608",
    "end": "3102890"
  },
  {
    "text": "Another 10 seconds--\nthree seconds--",
    "start": "3102890",
    "end": "3113990"
  },
  {
    "text": "OK, going to shut it down--  end polling, share results.",
    "start": "3113990",
    "end": "3122410"
  },
  {
    "text": "Yeah. ",
    "start": "3122410",
    "end": "3128010"
  },
  {
    "text": "So this problem here\nis APDA is decidable.",
    "start": "3128010",
    "end": "3134647"
  },
  {
    "text": "I was almost wondering whether\nor not to give this poll, because it has-- it's true for\nthe same reason as poll number",
    "start": "3134647",
    "end": "3140160"
  },
  {
    "text": "1, because we know\nhow to convert PDAs-- or we stated we can\nconvert PDAs to CFGs.",
    "start": "3140160",
    "end": "3149849"
  },
  {
    "text": "And that conversion\nhas given in the book. We didn't do in\nlecture, but I just stated you have\nto know that fact, but not necessarily\nknow how to do it.",
    "start": "3149850",
    "end": "3156730"
  },
  {
    "text": "That's OK. But the fact is true. The conversion is\nin the book, and it could be implemented\non a Turing machine.",
    "start": "3156730",
    "end": "3163420"
  },
  {
    "text": "So if you want to know whether\na PDA's language is empty, you convert it to a context-free\ngrammar and then use this",
    "start": "3163420",
    "end": "3170250"
  },
  {
    "text": "procedure here to test\nwhether it's a language-- ",
    "start": "3170250",
    "end": "3175710"
  },
  {
    "text": "oh, not empty-- I'm sorry. The acceptance problem--",
    "start": "3175710",
    "end": "3181170"
  },
  {
    "text": "I just want to know, does\nthe PDA accept some input? I'm saying it wrong.",
    "start": "3181170",
    "end": "3186490"
  },
  {
    "text": "So I want to know, does\nthe PDA accept some input? I convert that PDA to\na grammar, and then I",
    "start": "3186490",
    "end": "3192990"
  },
  {
    "text": "see if the grammar generates\nthat input, because it's an equivalent grammar. So again, this is using the\nfact that grammars and PDAs are",
    "start": "3192990",
    "end": "3202030"
  },
  {
    "text": "equivalent and convertible\nfrom one to another, just like regular\nexpressions and DFAs",
    "start": "3202030",
    "end": "3207460"
  },
  {
    "text": "from the previous poll. So you need to be\ncomfortable with that, because we're going to not\neven talk about it anymore.",
    "start": "3207460",
    "end": "3214400"
  },
  {
    "text": "We're just going to be\ntreating those things-- going back and forth between\nthem without sometimes even any comment.",
    "start": "3214400",
    "end": "3221490"
  },
  {
    "text": "OK. So let's move on.",
    "start": "3221490",
    "end": "3227130"
  },
  {
    "text": "Emptiness problem for CFGs-- hopefully you're\ngetting comfortable with the terminology I'm using.",
    "start": "3227130",
    "end": "3233790"
  },
  {
    "text": "So now the emptiness problem\nfor context-free grammars-- I'm just going to\ngive you a grammar,",
    "start": "3233790",
    "end": "3239520"
  },
  {
    "text": "and I want to know if\nits language is empty. OK, so remember, we did\nthis for finite automata",
    "start": "3239520",
    "end": "3246190"
  },
  {
    "text": "by testing a path. We don't really have paths here. You might think testing\npaths and pushed automata.",
    "start": "3246190",
    "end": "3252810"
  },
  {
    "text": "That's not going to really work,\nbecause the stack is there. So how are we going\nto do that test? Well, there's something\nsort of like testing a path,",
    "start": "3252810",
    "end": "3260470"
  },
  {
    "text": "just working with\nthe grammar itself, kind of working backwards\nfrom the terminals now.",
    "start": "3260470",
    "end": "3267740"
  },
  {
    "text": "I'll illustrate that here. Here's a very simple\ngrammar, and I want to know,",
    "start": "3267740",
    "end": "3277309"
  },
  {
    "text": "does it generate any strings? Obviously, only care about\nstrings of terminals,",
    "start": "3277310",
    "end": "3282920"
  },
  {
    "text": "because those are the things\nthat are in the language-- so does this grammar generate\nany strings of terminals?",
    "start": "3282920",
    "end": "3291160"
  },
  {
    "text": "So way we're going to answer\nthat is by a marking procedure, but in a sense, we're going\nto start from the terminals",
    "start": "3291160",
    "end": "3298690"
  },
  {
    "text": "and work backwards to see if we\ncan get to the start variable. So first, we're going to mark\nall the terminal symbols,",
    "start": "3298690",
    "end": "3306370"
  },
  {
    "text": "and then we're going\nto mark anything that goes to a string of\ncompletely marked symbols,",
    "start": "3306370",
    "end": "3316369"
  },
  {
    "text": "either terminals or variables-- because anything that's\nmarked, we know, can derive",
    "start": "3316370",
    "end": "3322340"
  },
  {
    "text": "a string of terminals. That's what it means. Anything that's blue can derive\na string of just terminals.",
    "start": "3322340",
    "end": "3328580"
  },
  {
    "text": "And so now, if you\nhave a collection of those that are all\nmarked, they together",
    "start": "3328580",
    "end": "3334130"
  },
  {
    "text": "can generate some string\nof terminals together.",
    "start": "3334130",
    "end": "3339180"
  },
  {
    "text": "And so then you can mark\nthe associated variable. So T goes to a. So that may be\noversimple, but we're",
    "start": "3339180",
    "end": "3345860"
  },
  {
    "text": "going to mark T here\neverywhere in the grammar. So all these T's are\ngoing to get marked,",
    "start": "3345860",
    "end": "3351050"
  },
  {
    "text": "because we know that T can\ngenerate a string of terminals.",
    "start": "3351050",
    "end": "3356430"
  },
  {
    "text": "Now let's take a\nlook at R. R is going to a string of symbols\nthat are all marked,",
    "start": "3356430",
    "end": "3363539"
  },
  {
    "text": "and that means those symbols\ncan, in turn, generate strings of terminals. So we're going to mark R2.",
    "start": "3363540",
    "end": "3369270"
  },
  {
    "text": "We can't yet mark S,\nbecause we don't know yet whether S has some unmarked\nthing that it goes to.",
    "start": "3369270",
    "end": "3375150"
  },
  {
    "text": "So we don't know\nyet whether S can generate a string of terminals. But R we know right now,\nso we're going to mark R.",
    "start": "3375150",
    "end": "3381390"
  },
  {
    "text": "But then now that gets\nus to mark this R, and so then we can go\nbackwards and we can mark S.",
    "start": "3381390",
    "end": "3387500"
  },
  {
    "text": "And we keep doing that until\nthere's nothing new to mark. And here we've\nmarked everything,",
    "start": "3387500",
    "end": "3392570"
  },
  {
    "text": "so clearly there's\nnothing more you can mark. But you might stop before\nyou've marked everything. And then you see whether you've\nmarked the start variable",
    "start": "3392570",
    "end": "3402890"
  },
  {
    "text": "or not. And if you have, you know\nthe language is not empty.",
    "start": "3402890",
    "end": "3408700"
  },
  {
    "text": "OK, so let's just go\nthrough this in text. Mark all occurrences\nof terminals in G, then",
    "start": "3408700",
    "end": "3416680"
  },
  {
    "text": "repeat until no new\nvariables are marked. We mark all occurrences\nof variables A,",
    "start": "3416680",
    "end": "3422619"
  },
  {
    "text": "if A goes to a\nstring of symbols, and all of those symbols\nwere already marked,",
    "start": "3422620",
    "end": "3428755"
  },
  {
    "text": "because those are\nthe things that already have been shown to\ngenerate a string of terminals.",
    "start": "3428755",
    "end": "3434829"
  },
  {
    "text": "And so now we're going to\nreject if the start date-- start variable's marked--\nbecause that means that the language is not empty--",
    "start": "3434830",
    "end": "3441130"
  },
  {
    "text": "and accept if it's not. OK? ",
    "start": "3441130",
    "end": "3454210"
  },
  {
    "text": "I'll take a couple of\nquick questions here. ",
    "start": "3454210",
    "end": "3464350"
  },
  {
    "text": "OK, somebody asked whether--",
    "start": "3464350",
    "end": "3471170"
  },
  {
    "text": "if I understand-- are the\nregular languages also decidable? Well, remember, the\nregular languages are context-free languages,\nand the context-free languages",
    "start": "3471170",
    "end": "3478369"
  },
  {
    "text": "are decidable, so yes,\nthe regular languages are decidable. ",
    "start": "3478370",
    "end": "3492267"
  },
  {
    "text": "Some of those are going\nto be too long to answer, and they're trying to come up\nwith alternative solutions.",
    "start": "3492268",
    "end": "3497560"
  },
  {
    "text": "So I think we're\ngoing to move on. All right. ",
    "start": "3497560",
    "end": "3503940"
  },
  {
    "text": "Just like we did for\nthe finite automata, we talked about acceptance,\nwe talked about emptiness,",
    "start": "3503940",
    "end": "3510130"
  },
  {
    "text": "we talked about equivalence. So how about the equivalence\nproblem for context-free",
    "start": "3510130",
    "end": "3516430"
  },
  {
    "text": "grammars? I'm going to give you now\ntwo context-free grammars,",
    "start": "3516430",
    "end": "3521860"
  },
  {
    "text": "and I'd like to know, are\nthose two context-free grammars generating the same language?",
    "start": "3521860",
    "end": "3530069"
  },
  {
    "text": "OK, so how might you\nthink about that? Well, one thing-- following some\nof the ideas that we've already",
    "start": "3530070",
    "end": "3538390"
  },
  {
    "text": "had, you could try feeding\nstrings into those grammars.",
    "start": "3538390",
    "end": "3543730"
  },
  {
    "text": "You know how to test whether\nthose individual grammars can generate those strings,\nso you can just",
    "start": "3543730",
    "end": "3548950"
  },
  {
    "text": "try feeding strings\nin to G and to H, and seeing whether those\ngrammars ever disagree",
    "start": "3548950",
    "end": "3556870"
  },
  {
    "text": "or whether they\ngenerate some string. Find some string that say\nG generates, but H does not generate.",
    "start": "3556870",
    "end": "3562119"
  },
  {
    "text": "And we can test that\nstring by string. Unfortunately, we got a\nlot of strings to test.",
    "start": "3562120",
    "end": "3569760"
  },
  {
    "text": "We would need to give\nsome bound if we were going to use that procedure--",
    "start": "3569760",
    "end": "3575550"
  },
  {
    "text": "not clear what the bound is.  Another idea might be to\nuse the closure construction",
    "start": "3575550",
    "end": "3588519"
  },
  {
    "text": "that we had from before. So let's mull that over-- whether that might work.",
    "start": "3588520",
    "end": "3595360"
  },
  {
    "text": "But in fact, let me give\naway the answer here.",
    "start": "3595360",
    "end": "3604950"
  },
  {
    "text": "This language is not decidable. There's no algorithm out\nthere-- no Turing machine,",
    "start": "3604950",
    "end": "3610890"
  },
  {
    "text": "but therefore no algorithm-- which can take two grammars\nand test whether they generate",
    "start": "3610890",
    "end": "3616920"
  },
  {
    "text": "the same language or not-- seems, at first, glance\nkind of surprising.",
    "start": "3616920",
    "end": "3623410"
  },
  {
    "text": "Such simple things as\ncontext-free grammars can nonetheless be so complicated\nthat there's no procedure out",
    "start": "3623410",
    "end": "3630250"
  },
  {
    "text": "there which can tell\nwhether the two-- those two grammars\ngenerate the same language. We will show that next week.",
    "start": "3630250",
    "end": "3637780"
  },
  {
    "text": " A related problem, which is\nrelated to your homework--",
    "start": "3637780",
    "end": "3644420"
  },
  {
    "text": "this that's due on Thursday-- is testing whether a\ngrammar is ambiguous.",
    "start": "3644420",
    "end": "3653820"
  },
  {
    "text": "So given a grammar,\nI'd like to know, is that grammar an\nambiguous grammar or not?",
    "start": "3653820",
    "end": "3660080"
  },
  {
    "text": "Does it generate some\nstring in the language of that grammar in two\npossibly different ways, two",
    "start": "3660080",
    "end": "3667369"
  },
  {
    "text": "or more different ways? So is there some string\nthat can be generated",
    "start": "3667370",
    "end": "3672780"
  },
  {
    "text": "with two different parts. So the problem with testing\nwhether grammar is ambiguous--",
    "start": "3672780",
    "end": "3680460"
  },
  {
    "text": "not decidable. So I'm asking you to\ndo something hard,",
    "start": "3680460",
    "end": "3685610"
  },
  {
    "text": "when you have to produce that\ngrammar which is unambiguous",
    "start": "3685610",
    "end": "3690680"
  },
  {
    "text": "for that language. In general, testing\nwhether a grammar is ambiguous or is not\na decidable problem.",
    "start": "3690680",
    "end": "3697880"
  },
  {
    "text": "Now, hopefully the grammar that\nyou'll produce to show that--",
    "start": "3697880",
    "end": "3704930"
  },
  {
    "text": "that unambiguous grammar\nfor that language that I'm asking you\nto produce is not going to require our graders to\nsolve some decidable problem,",
    "start": "3704930",
    "end": "3713900"
  },
  {
    "text": "but it'll be clear based the\nconstruction of that grammar why it's not ambiguous.",
    "start": "3713900",
    "end": "3719060"
  },
  {
    "text": "So you'll have to hopefully\nsay some explanation of your thinking there. ",
    "start": "3719060",
    "end": "3726505"
  },
  {
    "text": "OK.  And we will prove that the\nproblem of testing ambiguity",
    "start": "3726505",
    "end": "3733890"
  },
  {
    "text": "is not decidable. That's going to be a homework\nproblem in problem set 3.",
    "start": "3733890",
    "end": "3739510"
  },
  {
    "text": "OK. Last check-in here--\nsomething that I alluded to, but didn't quite--",
    "start": "3739510",
    "end": "3746040"
  },
  {
    "text": "didn't want to give away. Why not use the same\ntechnique that we",
    "start": "3746040",
    "end": "3751170"
  },
  {
    "text": "use to show equivalence\nof DFAs is decidable, to show that equivalence\nof context-free grammars",
    "start": "3751170",
    "end": "3756960"
  },
  {
    "text": "is desirable? Obviously, something goes wrong\nbecause EQCFG is not decidable.",
    "start": "3756960",
    "end": "3762870"
  },
  {
    "text": "Why doesn't that same\ntechnique just work? Well, what's the answer?",
    "start": "3762870",
    "end": "3772175"
  },
  {
    "start": "3772175",
    "end": "3784680"
  },
  {
    "text": "Got a real race here-- ",
    "start": "3784680",
    "end": "3791740"
  },
  {
    "text": "another 15 seconds-- this\none gives you something to mull over.",
    "start": "3791740",
    "end": "3796810"
  },
  {
    "start": "3796810",
    "end": "3804430"
  },
  {
    "text": "All right. Let's end it. OK, you're good to go. At least click something.",
    "start": "3804430",
    "end": "3810500"
  },
  {
    "text": "OK, ending polling,\nsharing results--",
    "start": "3810500",
    "end": "3817515"
  },
  {
    "text": "OK, bunch of you have thought,\nwell, CFGs are generators and DFAs are recognizers,\nand that's the issue.",
    "start": "3817515",
    "end": "3824310"
  },
  {
    "text": "Well, not really,\nbecause we could test",
    "start": "3824310",
    "end": "3832410"
  },
  {
    "text": "equivalence of\nregular expressions-- those are generators. It's nothing to do\nwith being a generator",
    "start": "3832410",
    "end": "3837930"
  },
  {
    "text": "or not, because we can convert\nregular expressions to DFAs",
    "start": "3837930",
    "end": "3844550"
  },
  {
    "text": "and then test\nequivalence for the DFAs, so that-- it's not really a\nmatter of being generated.",
    "start": "3844550",
    "end": "3850009"
  },
  {
    "text": "That's not the issue. The issue is that we can't\nfollow the same construction",
    "start": "3850010",
    "end": "3855589"
  },
  {
    "text": "that we did to show\nEQDFA is decidable, because the context-free\nlanguages are not closed under",
    "start": "3855590",
    "end": "3862310"
  },
  {
    "text": "those operations we needed to\nmake that symmetric difference machine-- if you remember how that worked.",
    "start": "3862310",
    "end": "3869840"
  },
  {
    "text": "So they're not closed\nunder implementation and not closed\nunder intersection. We needed both in order\nto build that machine",
    "start": "3869840",
    "end": "3875730"
  },
  {
    "text": "C, which accepted\nall the strings that are in the difference.",
    "start": "3875730",
    "end": "3882250"
  },
  {
    "text": "OK? So let's continue on. Let's move now to\nTuring machines.",
    "start": "3882250",
    "end": "3888891"
  },
  {
    "text": "This is where stuff\nis really going to start to get interesting--\nhope it's been interesting all along, but maybe\neven more interesting.",
    "start": "3888892",
    "end": "3897319"
  },
  {
    "text": "So let's talk about\nthe acceptance problem for Turing machines, ATM.",
    "start": "3897320",
    "end": "3903460"
  },
  {
    "text": "This language is going\nto become an old friend, but we're just\ngetting to know it.",
    "start": "3903460",
    "end": "3909882"
  },
  {
    "text": "So this is the problem. You're given a Turing\nmachine now, and an input, and I want to know, does\nM accept that input?",
    "start": "3909882",
    "end": "3918810"
  },
  {
    "text": "Does that Turing machine\naccept its input?  OK, so that's going to not be\na decidable problem either.",
    "start": "3918810",
    "end": "3927390"
  },
  {
    "text": "So we've shifted gears from\na bunch of decidable things to a bunch of\nundecidable things.",
    "start": "3927390",
    "end": "3932820"
  },
  {
    "text": "So this is not a\ndecidable language. We will prove that on Thursday. That's going to be the whole\npoint of Thursday's lecture",
    "start": "3932820",
    "end": "3939650"
  },
  {
    "text": "is proving the ATM is decidable. And that's going to be\nreally a jumping off point for showing other\nproblems are decidable.",
    "start": "3939650",
    "end": "3948240"
  },
  {
    "text": "So that's going to be our\nfirst proof of decidability. ",
    "start": "3948240",
    "end": "3954240"
  },
  {
    "text": "But we do know that\nATM is recognizable, and that's worth understanding--",
    "start": "3954240",
    "end": "3964230"
  },
  {
    "text": "for multiple reasons,\nbut for one thing, it's going to give us an\nexample of a problem which we know is recognizable,\nbut not decidable,",
    "start": "3964230",
    "end": "3971460"
  },
  {
    "text": "as we'll prove undecidability. But it's also, I think,\nof historical importance,",
    "start": "3971460",
    "end": "3983610"
  },
  {
    "text": "this algorithm for showing-- recognizable. So let's go through\nthat algorithm. It's very simple, sort of\ndoing the obvious thing.",
    "start": "3983610",
    "end": "3992470"
  },
  {
    "text": "The following Turing machine-- I'm going to call it U, for\na reason that I'll make clear",
    "start": "3992470",
    "end": "3997920"
  },
  {
    "text": "in a second. That's going to be a\nrecognizer for ATM. So it takes as\ninput an M and a w,",
    "start": "3997920",
    "end": "4006990"
  },
  {
    "text": "and it's just going to simulate\nM on w, pretty much the way the algorithm the\ndecider for ADFA work.",
    "start": "4006990",
    "end": "4017580"
  },
  {
    "text": "But now the machine-- instead of being a DFA,\nit's a Turing machine, and the Turing machine\nmight go forever.",
    "start": "4017580",
    "end": "4025470"
  },
  {
    "text": "And so the simulation\nmay not stop. And that's the key difference,\nwhich makes it from a decider",
    "start": "4025470",
    "end": "4031100"
  },
  {
    "text": "into a recognizer.  So you're going to\nbe simulating, just",
    "start": "4031100",
    "end": "4037040"
  },
  {
    "text": "keeping track of the tape of M,\nthe current state of M, where--",
    "start": "4037040",
    "end": "4042650"
  },
  {
    "text": "and proceeding to modify\nthe tape as M modifies it.",
    "start": "4042650",
    "end": "4048410"
  },
  {
    "text": "And then, if M enters\nan accept state, then you know M has\naccepted its input,",
    "start": "4048410",
    "end": "4054690"
  },
  {
    "text": "so U also will enter\nan accept state. So the machine U\nenters the accept state if M observes during\nthe simulation",
    "start": "4054690",
    "end": "4061770"
  },
  {
    "text": "that M enters an accept state. Furthermore, if an M\nenters a reject state,",
    "start": "4061770",
    "end": "4069800"
  },
  {
    "text": "then U also enters\na reject state. OK?",
    "start": "4069800",
    "end": "4075670"
  },
  {
    "text": "Now I'm going to say\nsomething beyond that, which I want you to pay attention to,\nwhich is the kind of thing I",
    "start": "4075670",
    "end": "4087030"
  },
  {
    "text": "do see sometimes people saying. We want U to reject\nif M never halts.",
    "start": "4087030",
    "end": "4093819"
  },
  {
    "text": " That's also-- seems\nlike what we want,",
    "start": "4093820",
    "end": "4100109"
  },
  {
    "text": "because if it never halts,\nthen M is rejecting by looping, so you should also reject.",
    "start": "4100109",
    "end": "4106778"
  },
  {
    "text": "But I don't like that. I don't like that line here,\nstep 4 of the Turing machine,",
    "start": "4106779",
    "end": "4113770"
  },
  {
    "text": "because there's no way for a\nTuring machine to determine-- or at least as we--\nno obvious way--",
    "start": "4113770",
    "end": "4120139"
  },
  {
    "text": "and in fact, there\nwill not be any way, but certainly, at this\npoint, no obvious way for M to even tell--",
    "start": "4120140",
    "end": "4126469"
  },
  {
    "text": "for U you to tell whether\nM is halting or not. Well, certainly you\ncan tell that it's",
    "start": "4126470",
    "end": "4132310"
  },
  {
    "text": "to say it never halts. How can you make\nthat determination? If I saw this on a\nsolution, either on an exam",
    "start": "4132310",
    "end": "4141460"
  },
  {
    "text": "or a homework, I\nwould mark you off. This is no good. It's not illegal to\nTuring machine action.",
    "start": "4141460",
    "end": "4149149"
  },
  {
    "text": "If M does not hold on w,\nthen you should reject.",
    "start": "4149149",
    "end": "4157299"
  },
  {
    "text": "That is correct. And you can make that reasoning\nexternal to the algorithm of U,",
    "start": "4157300",
    "end": "4163750"
  },
  {
    "text": "but U is going to end up\nrejecting, because it never holds either. It never actually knows that\nM is rejecting w in that case,",
    "start": "4163750",
    "end": "4173399"
  },
  {
    "text": "if M is rejecting by looping. It's just blindly going along\nand doing the simulation of M on w--",
    "start": "4173399",
    "end": "4180200"
  },
  {
    "text": "and will end up halting-- rejecting by looping, if\nM is rejecting by looping. But that's something\nthat you can",
    "start": "4180200",
    "end": "4185299"
  },
  {
    "text": "argue if you need\nto make a proof or make some sort of\nreasoning about the machine,",
    "start": "4185300",
    "end": "4190810"
  },
  {
    "text": "but it's not part of the\nalgorithm of the machine. ",
    "start": "4190810",
    "end": "4196310"
  },
  {
    "text": "OK. Now, what's, I think, from\na historical standpoint, that's interesting\nabout this machine U",
    "start": "4196310",
    "end": "4201320"
  },
  {
    "text": "and why I'm calling it U\nis because this appeared-- this machine U appeared\nin Turing's original paper",
    "start": "4201320",
    "end": "4209450"
  },
  {
    "text": "where he laid out\nTuring machines. He didn't call them Turing\nmachines, by the way. He called them\ncomputing machines. People afterward called\nthem Turing machines.",
    "start": "4209450",
    "end": "4217699"
  },
  {
    "text": "But Turing called this the\nuniversal computing machine. That's his language. Actually, I just\nlooked at the paper",
    "start": "4217700",
    "end": "4223890"
  },
  {
    "text": "yesterday just to\nrefresh my memory of it. And he gives the description\nof the operation of U",
    "start": "4223890",
    "end": "4230449"
  },
  {
    "text": "in gory detail, with all of\nthe transitions and the states. He nails the whole\nthing down-- takes",
    "start": "4230450",
    "end": "4235790"
  },
  {
    "text": "pages, and pages, and pages. So he it gives it there.",
    "start": "4235790",
    "end": "4242260"
  },
  {
    "text": "So this is the original\nuniversal computing machine, universal Turing machine.",
    "start": "4242260",
    "end": "4249489"
  },
  {
    "text": "It's more than just\nan idle curiosity that this appeared\nin Turing's paper, because this actually\nturned out to be profoundly",
    "start": "4249490",
    "end": "4256180"
  },
  {
    "text": "influential in computer\nscience, because it really was the first example of\na machine that operated",
    "start": "4256180",
    "end": "4264429"
  },
  {
    "text": "based on a stored program. It really was a\nrevolutionary idea.",
    "start": "4264430",
    "end": "4270390"
  },
  {
    "text": "In those days, if\nyou wanted to make a machine that did\nsomething different, you had to wire the--",
    "start": "4270390",
    "end": "4275460"
  },
  {
    "text": "rewire the machine. But here's a machine that\noperated based on instructions.",
    "start": "4275460",
    "end": "4282860"
  },
  {
    "text": "And instructions, in a sense,\nare no different than the data. So this is what's been--",
    "start": "4282860",
    "end": "4289739"
  },
  {
    "text": "come to be known as the\nvon Neumann architecture, but von Neumann himself gave\ncredit to Turing machine",
    "start": "4289740",
    "end": "4295260"
  },
  {
    "text": "for having inspired\nhim to think of this. And some people argue\nthat it's really--",
    "start": "4295260",
    "end": "4300480"
  },
  {
    "text": "calling it the von Neumann-- bunch of people came\nup with this concept around the same time,\nmaybe other people too.",
    "start": "4300480",
    "end": "4306360"
  },
  {
    "text": "There's Babbage and so\non, and others who-- Ada Lovelace-- also who came\nup with notions of programming,",
    "start": "4306360",
    "end": "4314190"
  },
  {
    "text": "but I think it's a little\ndifferent than this, in concept. But anyway, this nevertheless\nplayed an important role",
    "start": "4314190",
    "end": "4322679"
  },
  {
    "text": "in the history of the subject. So with that, I think\nwe're out of time. I'm going to quickly\nreview where we've been.",
    "start": "4322680",
    "end": "4330810"
  },
  {
    "text": "So we just showed\nthe decidability of various problems. These are all languages that\nwe showed are decidable.",
    "start": "4330810",
    "end": "4339180"
  },
  {
    "text": "We showed that ATM is\nTuring-recognizable, and I think that was\nall we had for today.",
    "start": "4339180",
    "end": "4345460"
  },
  {
    "text": "So I will stop right here.",
    "start": "4345460",
    "end": "4351150"
  },
  {
    "text": "I will stick around and\ntake a few questions, and our TAs can take a few\nquestions, if you want, by chat.",
    "start": "4351150",
    "end": "4357750"
  },
  {
    "text": "And then I also have\nmy office hours, which will start in\nlike five minutes or so, once I get everything\nset up on my end.",
    "start": "4357750",
    "end": "4363090"
  },
  {
    "text": " OK, somebody wanted me to\nreview this point here,",
    "start": "4363090",
    "end": "4371400"
  },
  {
    "text": "which I'm happy to do. ",
    "start": "4371400",
    "end": "4379118"
  },
  {
    "text": "This code here that I'm\ndescribing in English needs to be something\nthat you can",
    "start": "4379118",
    "end": "4386190"
  },
  {
    "text": "implement on a Turing machine.",
    "start": "4386190",
    "end": "4391800"
  },
  {
    "text": "We're never going to go\nthrough the effort of building the transition functions,\nand the states, and so on,",
    "start": "4391800",
    "end": "4399330"
  },
  {
    "text": "but we need to be sure that\nwe could, if we had to. And how could you make a\nTuring machine do the test",
    "start": "4399330",
    "end": "4411120"
  },
  {
    "text": "that M doesn't halt? That's something we\ndon't know how to do.",
    "start": "4411120",
    "end": "4416350"
  },
  {
    "text": "I can see if M halts. During the simulation,\nI can see that M",
    "start": "4416350",
    "end": "4421540"
  },
  {
    "text": "has entered the Q reject\nstate or the Q accept state, so I can tell while I'm\nsimulating that it has halted.",
    "start": "4421540",
    "end": "4430230"
  },
  {
    "text": "But how would the\nmachine, or how would you know that M is now--",
    "start": "4430230",
    "end": "4436870"
  },
  {
    "text": "someone says, well,\ndo x if M never holds. Well, how do you know M--\nhow can you do the test",
    "start": "4436870",
    "end": "4444930"
  },
  {
    "text": "that M is not halting?  There's no obvious\nway to do that.",
    "start": "4444930",
    "end": "4451300"
  },
  {
    "text": "In fact, there is\nno way to do that. But as it stands\nright now, the proof would be on you to show how to\nimplement that on a machine,",
    "start": "4451300",
    "end": "4461520"
  },
  {
    "text": "and there's just no\nobvious way to do that. So I think that's why you\nshould only put down things",
    "start": "4461520",
    "end": "4466970"
  },
  {
    "text": "here which you're sure\nyou could implement, even if it might\ntake a long time.",
    "start": "4466970",
    "end": "4472170"
  },
  {
    "text": "So you don't have to worry\nabout how long it would take, but you have to put\nthings down that you",
    "start": "4472170",
    "end": "4477590"
  },
  {
    "text": "are sure you could at least\nimplement in principle. OK, so someone has asked me\nabout the equivalence problem",
    "start": "4477590",
    "end": "4488320"
  },
  {
    "text": "for context-free grammars\nbeing unsolvable. Why couldn't the machine be\na human level system of logic",
    "start": "4488320",
    "end": "4496820"
  },
  {
    "text": "so that the computer could\nlogically deduce whether or not it was decidable?",
    "start": "4496820",
    "end": "4502238"
  },
  {
    "start": "4502238",
    "end": "4508949"
  },
  {
    "text": "We're taking a turn\ninto the subject of mathematical logic, which is\nsupposed to formalize reasoning",
    "start": "4508950",
    "end": "4516900"
  },
  {
    "text": "in a way.  In the end, what it\nreally has come down to--",
    "start": "4516900",
    "end": "4524330"
  },
  {
    "text": "that there are\ncertain grammars which",
    "start": "4524330",
    "end": "4529910"
  },
  {
    "text": "are equivalent to one\nanother, but there's not",
    "start": "4529910",
    "end": "4538030"
  },
  {
    "text": "going to be any way\nto prove that they're equivalent in any\nreasonable system. ",
    "start": "4538030",
    "end": "4545870"
  },
  {
    "text": "Inequivalence you\ncan always prove. You can exhibit a\nstring that one-- you can show that this\ngrammar's generating it,",
    "start": "4545870",
    "end": "4553370"
  },
  {
    "text": "this grammar's not generating. This other one is not. So inequivalence you can\nalways prove, but equivalence--",
    "start": "4553370",
    "end": "4560792"
  },
  {
    "text": "there are going to be certain\npairs of grammars which are going to be\nbeyond the capability",
    "start": "4560792",
    "end": "4565820"
  },
  {
    "text": "of any reasonable\nformal system to be able to prove that\nthey're equivalent, because you can even convert--",
    "start": "4565820",
    "end": "4571340"
  },
  {
    "text": "make those grammars\ninto something which talk about the\nsystem itself, ultimately.",
    "start": "4571340",
    "end": "4576630"
  },
  {
    "text": "You're going to end up with a\nRussell paradox kind of thing. That's maybe going beyond\nmore than you want to know,",
    "start": "4576630",
    "end": "4582270"
  },
  {
    "text": "and I'm happy to talk\nabout it offline. But there's just no way to make\na Turing machine which is going",
    "start": "4582270",
    "end": "4588540"
  },
  {
    "text": "to implement human reasoning,\nand then get the right answer on all pairs of grammars--\njust cannot be done.",
    "start": "4588540",
    "end": "4594700"
  },
  {
    "text": "Goodbye. I'm going to shut\ndown the meeting now. ",
    "start": "4594700",
    "end": "4611000"
  }
]