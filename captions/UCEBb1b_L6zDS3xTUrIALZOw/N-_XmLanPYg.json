[
  {
    "start": "0",
    "end": "256000"
  },
  {
    "text": "[SQUEAKING][RUSTLING][CLICKING] ",
    "start": "0",
    "end": "25190"
  },
  {
    "text": "MICHAEL SIPSER: So we are-- welcome back, everybody.",
    "start": "25190",
    "end": "31830"
  },
  {
    "text": "And we are going to\ncontinue our discussion",
    "start": "31830",
    "end": "39300"
  },
  {
    "text": "of computability theory,\nTuring machines, and how",
    "start": "39300",
    "end": "46050"
  },
  {
    "text": "to prove things undecidable,\nwhich is what we've been doing.",
    "start": "46050",
    "end": "51100"
  },
  {
    "text": "So we talked about this\nmore advanced method of proving things undecidable\nlast lecture, called",
    "start": "51100",
    "end": "56820"
  },
  {
    "text": "the computation history\nmethod, which comes up in all sorts of proofs of\nundecidability, usually more",
    "start": "56820",
    "end": "66900"
  },
  {
    "text": "complex ones. Such as, for example, the\nproof of Hilbert's 10th problem",
    "start": "66900",
    "end": "73193"
  },
  {
    "text": "that I mentioned,\nwhether you want to-- if you want to test\nwhether a polynomial has",
    "start": "73193",
    "end": "79170"
  },
  {
    "text": "a solution in integers. It's a reduction from\nATM, just like we've",
    "start": "79170",
    "end": "85710"
  },
  {
    "text": "been doing all along. All of those proofs are\npretty much reductional from something undecidable. This reduction from ATM is as\ngood a starting point as any.",
    "start": "85710",
    "end": "95730"
  },
  {
    "text": "And it uses the\ncomputation history method. So what they end up doing\nis, given a Turing machine",
    "start": "95730",
    "end": "103200"
  },
  {
    "text": "and an input, you\nconstruct a polynomial that has several variables.",
    "start": "103200",
    "end": "108460"
  },
  {
    "text": "And where in order to\nget an integer root,",
    "start": "108460",
    "end": "114930"
  },
  {
    "text": "an integer solution\nof that polynomial, one of the variables\nis going to have",
    "start": "114930",
    "end": "120600"
  },
  {
    "text": "to be assigned to\nsome kind of encoding of a computation history of\nthe Turing machine of M on w.",
    "start": "120600",
    "end": "129600"
  },
  {
    "text": "One of those variables is going\nto be a computation history-- an integer which represents the\ncomputation history for m on W.",
    "start": "129600",
    "end": "139319"
  },
  {
    "text": "And the other\nvariables are there to help you kind\nof decode that so",
    "start": "139320",
    "end": "145260"
  },
  {
    "text": "that the polynomial can actually\ncheck and make a solution. It becomes a solution\nif that actually",
    "start": "145260",
    "end": "151540"
  },
  {
    "text": "is a legitimate computation\nhistory of m on W. So it really uses the very\nsame method that we've",
    "start": "151540",
    "end": "157090"
  },
  {
    "text": "been using all along,\nbut it's pretty hairy",
    "start": "157090",
    "end": "162310"
  },
  {
    "text": "to construct that polynomial\nand do the check in the way that you need to do.",
    "start": "162310",
    "end": "168830"
  },
  {
    "text": "So for the Post\nCorrespondence problem which we introduced last\ntime, doing the check is relatively simple.",
    "start": "168830",
    "end": "175400"
  },
  {
    "text": "You know that the match is\nthe computation history, and following the\nrules of the match,",
    "start": "175400",
    "end": "183189"
  },
  {
    "text": "it's fairly simple to construct\nthat Post Correspondence",
    "start": "183190",
    "end": "188230"
  },
  {
    "text": "problem instance. We talked about linearly\nbounded automata. Of course, we defined\nconfigurations and computation",
    "start": "188230",
    "end": "195700"
  },
  {
    "text": "histories along the way and\nproved certain problem-- other problems are undecidable\nas well using the same method.",
    "start": "195700",
    "end": "202939"
  },
  {
    "text": "OK, so today, we're\ngoing to shift gears.",
    "start": "202940",
    "end": "208100"
  },
  {
    "text": "We're going to--\nin our last lecture on the computability\nsection of the course,",
    "start": "208100",
    "end": "215070"
  },
  {
    "text": "we're going to talk about\nsomething called the recursion theorem, which basically gives\nTuring machines the ability",
    "start": "215070",
    "end": "224060"
  },
  {
    "text": "to refer to themselves. Turing machines in\nany program, to do self-reference so\nthat you can actually",
    "start": "224060",
    "end": "230090"
  },
  {
    "text": "get at the code of\nthe Turing machine or the code of the program\nthat you're writing.",
    "start": "230090",
    "end": "235159"
  },
  {
    "text": "Even if that's not a built-in\nprimitive of the programming language or the operating\nsystem that you're working with,",
    "start": "235160",
    "end": "241940"
  },
  {
    "text": "it still gives you that access. And also, we're going to--\nif we have time at the end, I'm going to talk a little bit\nabout mathematical logic, which",
    "start": "241940",
    "end": "249243"
  },
  {
    "text": "is sort of a nice application\nof the recursion theorem. And it's a beautiful\nsubject on its own. And it's something that I can\ngive a brief introduction to.",
    "start": "249243",
    "end": "256519"
  },
  {
    "start": "256000",
    "end": "585000"
  },
  {
    "text": "OK, so today's topic is\nabout self-reference,",
    "start": "256519",
    "end": "264850"
  },
  {
    "text": "self-reproducing machines,\nand the broader topic called the recursion theorem.",
    "start": "264850",
    "end": "271270"
  },
  {
    "text": "So let me introduce it\nwith what I would call the self-reproduction paradox.",
    "start": "271270",
    "end": "277190"
  },
  {
    "text": "And that is, suppose you have\na factory, like a Tesla effect",
    "start": "277190",
    "end": "283775"
  },
  {
    "text": "or a car manufacturing factory. ",
    "start": "283775",
    "end": "288980"
  },
  {
    "text": "See, there's a picture\nof the factory, and it's producing cars.",
    "start": "288980",
    "end": "295160"
  },
  {
    "text": "All right? So we have a factory\nthat makes cars. And what can we say about the\nrelative complexity of the cars",
    "start": "295160",
    "end": "307690"
  },
  {
    "text": "compared with the factory,\nin some informal sense? ",
    "start": "307690",
    "end": "313370"
  },
  {
    "text": "So I would argue\nthat you would be reasonable to say that the\ncomplexity of the factory",
    "start": "313370",
    "end": "321460"
  },
  {
    "text": "is going to have to be greater\nthan the complexity of the cars that it makes.",
    "start": "321460",
    "end": "328250"
  },
  {
    "text": "Because not only\ndoes the factory have to know how\nto make the cars, so it has to have\nall the instructions",
    "start": "328250",
    "end": "334130"
  },
  {
    "text": "and whatever things\nthat go into a car, it has to be included in\nat least some kind of--",
    "start": "334130",
    "end": "342695"
  },
  {
    "text": "it has to be, in some sense,\nrepresented in the factory. But the factory also has\nto have other stuff--",
    "start": "342695",
    "end": "351480"
  },
  {
    "text": "the robots, and the other\nmanufacturing items, tools, and so on--\nfor making the cars.",
    "start": "351480",
    "end": "359100"
  },
  {
    "text": "So the factory has to\nhave all the complexity of a car incorporated\nplus other things as well.",
    "start": "359100",
    "end": "366100"
  },
  {
    "text": "And for that reason,\none could imagine that the factory's complexity is\nmore than the car's complexity.",
    "start": "366100",
    "end": "375250"
  },
  {
    "text": "But now, suppose you want\nto have a factory that makes factories--",
    "start": "375250",
    "end": "381093"
  },
  {
    "text": "so imagine here's the picture--  or in general, a machine\nthat makes copies of itself.",
    "start": "381093",
    "end": "389360"
  },
  {
    "text": "Well, that seems, at first\nglance, to be impossible.",
    "start": "389360",
    "end": "395900"
  },
  {
    "text": "Because not only does\nthe factory obviously have to have all of the\ninstructions for what",
    "start": "395900",
    "end": "402860"
  },
  {
    "text": "a factory is like, but it needs\nto have all of the extra things",
    "start": "402860",
    "end": "407960"
  },
  {
    "text": "that it would need to\ndo the manufacturing.  And so for that reason,\nit seems like it's not",
    "start": "407960",
    "end": "415610"
  },
  {
    "text": "possible to have a machine\nmake copies of itself.",
    "start": "415610",
    "end": "420979"
  },
  {
    "text": "I mean, you would run\ninto the very same problem if I asked you to\nproduce a program",
    "start": "420980",
    "end": "428660"
  },
  {
    "text": "in your favorite language\nthat prints out itself--",
    "start": "428660",
    "end": "434330"
  },
  {
    "text": "an exact copy of the same code. You can always write\na program which",
    "start": "434330",
    "end": "439340"
  },
  {
    "text": "is going to print out some\nstring, like Hello, world. That's easy because you\njust put Hello, world",
    "start": "439340",
    "end": "445639"
  },
  {
    "text": "into some kind of a variable\nor some sort of a table",
    "start": "445640",
    "end": "452000"
  },
  {
    "text": "into the program and\nsay print that table. But if you want the program\nto print out a copy of itself,",
    "start": "452000",
    "end": "460729"
  },
  {
    "text": "you can't take the whole program\nand stick that into a table because the program\nis going to have",
    "start": "460730",
    "end": "468050"
  },
  {
    "text": "to be bigger than the table. And so, you're going to\nend up with something",
    "start": "468050",
    "end": "473240"
  },
  {
    "text": "impossible happening. Because the program-- an\nentire copy of the program can't fit inside the program.",
    "start": "473240",
    "end": "480889"
  },
  {
    "text": "You just get the program\ninside itself, inside itself, inside itself, forever.",
    "start": "480890",
    "end": "487050"
  },
  {
    "text": "And so, you end up with an\ninfinite program that way. So if you just kind of\nnaively approach the problem",
    "start": "487050",
    "end": "496350"
  },
  {
    "text": "for how to make a\nprogram which is going to print out a copy of\nitself, it's not so easy to do.",
    "start": "496350",
    "end": "502390"
  },
  {
    "text": "But hopefully, after\ntoday's lecture, you will see that it is possible\nand in fact, how to do it.",
    "start": "502390",
    "end": "509770"
  },
  {
    "text": "And not only that is an\nidle bit of curiosity,",
    "start": "509770",
    "end": "515250"
  },
  {
    "text": "but there are\nactually applications for why you might want\nto do that, mainly within mathematics and in\ncomputer science theory.",
    "start": "515250",
    "end": "525000"
  },
  {
    "text": "But there's even a kind of\na real-world application, if you will, in a way too. So we'll get to that at the end.",
    "start": "525000",
    "end": "531030"
  },
  {
    "text": " So it seems, as I'm\nsaying, impossible to have",
    "start": "531030",
    "end": "536620"
  },
  {
    "text": "a self-reproducing machine. But we know that\nin the world, there are things that make copies\nof themselves-- living things.",
    "start": "536620",
    "end": "546290"
  },
  {
    "text": "So it seems like a paradox. Cells can make copies\nexactly of themselves.",
    "start": "546290",
    "end": "552430"
  },
  {
    "text": "All living things can\nmake copies of themselves. So how do they manage to\nget around this paradox?",
    "start": "552430",
    "end": "559720"
  },
  {
    "text": "Well, in fact, it is no\nparadox because it is possible to make a machine\nthat self-reproduces,",
    "start": "559720",
    "end": "567610"
  },
  {
    "text": "that makes copies of itself. And this has been\nknown for many years.",
    "start": "567610",
    "end": "572830"
  },
  {
    "text": "Probably, it goes\nback to Von Neumann who wrote a famous paper on\nself-reproducing machines.",
    "start": "572830",
    "end": "580279"
  },
  {
    "text": "OK, so self-reproducing\nmachines are, in fact, possible. ",
    "start": "580280",
    "end": "587139"
  },
  {
    "start": "585000",
    "end": "786000"
  },
  {
    "text": "So let me give you\nan example of how you would make a\nself-reproducing Turing machine.",
    "start": "587140",
    "end": "592360"
  },
  {
    "text": "What do we mean by that? I mean a machine-- I'm going to call it SELF--",
    "start": "592360",
    "end": "598190"
  },
  {
    "text": "which ignores its input. So on any input, you turn it\non, the machine grinds around",
    "start": "598190",
    "end": "605950"
  },
  {
    "text": "for a while, and halts with\na description of itself on the tape--",
    "start": "605950",
    "end": "611740"
  },
  {
    "text": "with the description\nof SELF, its own code, sitting on the tape. So very much like\nproducing a program which",
    "start": "611740",
    "end": "619330"
  },
  {
    "text": "would print out its own code,\nthat's really what we're doing.",
    "start": "619330",
    "end": "624670"
  },
  {
    "text": " So for that, we're\ngoing to first need a little lemma, which\nis a very simple lemma,",
    "start": "624670",
    "end": "631790"
  },
  {
    "text": "but it looks worse than it is. So let me just\nread it out to you,",
    "start": "631790",
    "end": "638530"
  },
  {
    "text": "and then I'll explain\nwhat its saying. Because what it's saying\nis extremely simple.",
    "start": "638530",
    "end": "643640"
  },
  {
    "text": "So there's a\ncomputable function, I'm going to call\nit q, that maps strings to strings, which\nwill take any string,",
    "start": "643640",
    "end": "652470"
  },
  {
    "text": "w, and produce from w a Turing\nmachine which will print w.",
    "start": "652470",
    "end": "658154"
  },
  {
    "text": " OK? That's all it does. So as you know, if I\ngive you a string, w,",
    "start": "658155",
    "end": "665440"
  },
  {
    "text": "you could produce\na Turing machine which would have w\nrepresented in the states",
    "start": "665440",
    "end": "672790"
  },
  {
    "text": "and transitions of the machine. So that if you turn the machine\non, the machine will output w.",
    "start": "672790",
    "end": "679120"
  },
  {
    "text": "If I want you to give\nme a Turing machine that prints the string 1, 1, 0, 1 on\nthe tape, you could do that--",
    "start": "679120",
    "end": "686950"
  },
  {
    "text": "I hope. And no matter what that\nstring was, instead of 1, 1, 0, 0, or whatever, it's\n20 0's and then five 1's,",
    "start": "686950",
    "end": "698560"
  },
  {
    "text": "you could do that too. And in fact, there's\na simple procedure",
    "start": "698560",
    "end": "704140"
  },
  {
    "text": "that takes a string\nand maps that onto a Turing machine which\nprints out that string.",
    "start": "704140",
    "end": "711090"
  },
  {
    "text": "So that's a computable function,\nwhich basically takes a string",
    "start": "711090",
    "end": "718710"
  },
  {
    "text": "and converts it to something\nthat evaluates to that string.",
    "start": "718710",
    "end": "724050"
  },
  {
    "text": "And I'm calling it q. I don't know if this is\nhelpful to you or not. It's kind of like it converts\nthe string w to w in quotes.",
    "start": "724050",
    "end": "732480"
  },
  {
    "text": "So q stands for\nquotes, in a way. So if that's helpful, then good.",
    "start": "732480",
    "end": "743360"
  },
  {
    "text": "But anyway, Pw is\na Turing machine. When you turn it on, it\njust prints out w and halts.",
    "start": "743360",
    "end": "752580"
  },
  {
    "text": "And I can find Pw from w-- ",
    "start": "752580",
    "end": "757630"
  },
  {
    "text": "straightforward proof. So now, I'm going to\ntell you, assuming",
    "start": "757630",
    "end": "763300"
  },
  {
    "text": "that we have that\ncomputable function, q,",
    "start": "763300",
    "end": "771420"
  },
  {
    "text": "I'm going to tell you how\nto make this machine SELF. And it's not complicated.",
    "start": "771420",
    "end": "777620"
  },
  {
    "text": " The Turing machine\nSELF is going to have",
    "start": "777620",
    "end": "784570"
  },
  {
    "text": "two parts I'll call\nA and B. Here's a schematic for the machine.",
    "start": "784570",
    "end": "789710"
  },
  {
    "start": "786000",
    "end": "1284000"
  },
  {
    "text": "So here's SELF. It's in two parts A and B. And what I mean by A and B,\nit's like two separate teams.",
    "start": "789710",
    "end": "796750"
  },
  {
    "text": "SELF is going to\nstart out running A, and when A is finished, it's\ngoing to pass control to B.",
    "start": "796750",
    "end": "802089"
  },
  {
    "text": "And then B is going\nto finish the job. And when it's done, you're\ngoing to have the description SELF sitting here on the tape.",
    "start": "802090",
    "end": "809790"
  },
  {
    "text": "All right? So what's left is to give\nyou the code for A and for B.",
    "start": "809790",
    "end": "818060"
  },
  {
    "text": "So A is going to be\nsomething super simple.",
    "start": "818060",
    "end": "823820"
  },
  {
    "text": "A is going to be that\nmachine which prints out B--",
    "start": "823820",
    "end": "828950"
  },
  {
    "text": "prints out a description\nof B. The one that I described up here.",
    "start": "828950",
    "end": "834940"
  },
  {
    "text": "So remember, Pw is the\nmachine which prints out w.",
    "start": "834940",
    "end": "840450"
  },
  {
    "text": "And P sub the description\nof B is simply going to machine that has\nthis string, PB, stored",
    "start": "840450",
    "end": "848610"
  },
  {
    "text": "in its states and transitions. You turn on that machine,\nand it prints out B, and then it's done.",
    "start": "848610",
    "end": "855180"
  },
  {
    "text": "So this is a very simple-- A is very simple. So here, PB is a part of\nA. And when it's done,",
    "start": "855180",
    "end": "869040"
  },
  {
    "text": "B appears on the tape. So that's at the point when\nA has finished its work.",
    "start": "869040",
    "end": "874510"
  },
  {
    "text": "Now it's going to\npass control to B. So we're not obviously done\nyet, because what we want",
    "start": "874510",
    "end": "880190"
  },
  {
    "text": "is A and B both\nto be on the tape, not just B. Because SELF\nis a combination of A and B together.",
    "start": "880190",
    "end": "885530"
  },
  {
    "text": " So I have to tell you how\nB works to finish the job.",
    "start": "885530",
    "end": "893920"
  },
  {
    "text": " So you might think,\nas a first, given",
    "start": "893920",
    "end": "902370"
  },
  {
    "text": "what we did for\ngetting B on the tape, that we'll get A on the\ntape in the same way,",
    "start": "902370",
    "end": "907530"
  },
  {
    "text": "by putting a copy of A inside\nB. So a copy of B is inside A,",
    "start": "907530",
    "end": "916570"
  },
  {
    "text": "and a copy of A is inside B. And at some\nconceptual level, that",
    "start": "916570",
    "end": "923540"
  },
  {
    "text": "seems like that\nmight do the job. But it's really not-- that is not a solution. Because the fact that I\ncan put B inside A kind of",
    "start": "923540",
    "end": "932879"
  },
  {
    "text": "forbids me from also\nputting A inside P, because that's going\nto be the same kind of circular reasoning\nof just putting",
    "start": "932880",
    "end": "938580"
  },
  {
    "text": "a machine inside itself. You just can't do\nthat because you're going to end up with an\ninfinitely big machine that way.",
    "start": "938580",
    "end": "943610"
  },
  {
    "text": " In fact, if I'm\nputting B inside A--",
    "start": "943610",
    "end": "950166"
  },
  {
    "text": "a copy of B in terms of\nits description inside A, A is really going to be\nmuch bigger than B.",
    "start": "950166",
    "end": "955410"
  },
  {
    "text": "Because it has all of B with\ninside it, plus other stuff-- all the states and transitions\nfor printing that B out.",
    "start": "955410",
    "end": "963360"
  },
  {
    "text": "So I can't have the A\nbe much bigger than B and then B also\nmuch bigger than A. So this is no good.",
    "start": "963360",
    "end": "971632"
  },
  {
    "text": "We're going to have\nto do something else. ",
    "start": "971632",
    "end": "977030"
  },
  {
    "text": "So how is B now going\nto get ahold of A? ",
    "start": "977030",
    "end": "984690"
  },
  {
    "text": "And the trick for doing\nthat, without having",
    "start": "984690",
    "end": "991960"
  },
  {
    "text": "a copy of A inside B--\nwhich doesn't work. That's not going to\nbe a good solution.",
    "start": "991960",
    "end": "997449"
  },
  {
    "text": "Instead, the way that\nB is going to get A, it's going to figure\nout what A is. It's going to figure\nout what A is.",
    "start": "997450",
    "end": "1004889"
  },
  {
    "text": "And how is it going to\nfigure out what A is? Because if you remember, B can\nnow look can look at the tape.",
    "start": "1004890",
    "end": "1013899"
  },
  {
    "text": "It sees some string\nthere which happens to be a description of\nitself, but it doesn't care. It sees some string on the tape.",
    "start": "1013900",
    "end": "1020170"
  },
  {
    "text": "A is the machine that\nprints out that string. ",
    "start": "1020170",
    "end": "1027790"
  },
  {
    "text": "A is q of this string. ",
    "start": "1027790",
    "end": "1035130"
  },
  {
    "text": "So B is simply going to\ncompute q of whatever it sees on the tape.",
    "start": "1035130",
    "end": "1041089"
  },
  {
    "text": "That is A. OK?",
    "start": "1041089",
    "end": "1048230"
  },
  {
    "text": "So I don't know if you can read. That's kind of small here. It's going to compute A\nfrom B sitting on the tape.",
    "start": "1048230",
    "end": "1054919"
  },
  {
    "text": "So here is the\ninstructions for B. It's going to compute q of\nthe tape contents, which",
    "start": "1054920",
    "end": "1060740"
  },
  {
    "text": "happens to be the\ndescription of B. But that's irrelevant\nto B. B just sees some string on the tape.",
    "start": "1060740",
    "end": "1066770"
  },
  {
    "text": "It computes q of\nthat, and that is A. Because A is the machine\nwhich prints out that string.",
    "start": "1066770",
    "end": "1075940"
  },
  {
    "text": "Then it's going to\ncombine A with B, doing whatever\nslight interfacing",
    "start": "1075940",
    "end": "1082600"
  },
  {
    "text": "that needs to happen-- I'm not going to get\ninto those details-- to convert those two\npieces into one machine,",
    "start": "1082600",
    "end": "1090700"
  },
  {
    "text": "which is the machine SELF. And then it's going to print out\nwith SELF on the tape, as I'm",
    "start": "1090700",
    "end": "1096809"
  },
  {
    "text": "going to indicate over here. ",
    "start": "1096810",
    "end": "1102080"
  },
  {
    "text": "OK? So that's how a\nTuring machine can",
    "start": "1102080",
    "end": "1107960"
  },
  {
    "text": "print out a copy of\nits own description and leave it on the tape. ",
    "start": "1107960",
    "end": "1114988"
  },
  {
    "text": "And what's nice\nabout this is nothing specific about Turing machines. This is a general\nprocedure that allows",
    "start": "1114988",
    "end": "1122889"
  },
  {
    "text": "any programming\nlanguage to print out a copy of its own code. You can even carry\nthis out in English,",
    "start": "1122890",
    "end": "1129400"
  },
  {
    "text": "as I'm going to do\nin the next slide. ",
    "start": "1129400",
    "end": "1135990"
  },
  {
    "text": "OK, so here's a good question. There are many possible\nTuring machines that can print out B. That's right.",
    "start": "1135990",
    "end": "1142410"
  },
  {
    "text": "How do I know how to\nget the particular one? What I have in mind,\nthat's a little bit of a subtle question,\nbut it's a good question.",
    "start": "1142410",
    "end": "1148995"
  },
  {
    "text": " I have in mind the\nparticular Turing machine",
    "start": "1148995",
    "end": "1155960"
  },
  {
    "text": "that prints out B, which\nis the one that q produces. ",
    "start": "1155960",
    "end": "1162179"
  },
  {
    "text": "Remember, so we have to\nrefer back to this lemma. This lemma produces\na particular machine",
    "start": "1162180",
    "end": "1167970"
  },
  {
    "text": "that prints out B from B. And that's the one that\nI'm going to use for A,",
    "start": "1167970",
    "end": "1175193"
  },
  {
    "text": "and that's the one\nthat B is going to be able to obtain by running\nthe q algorithm to figure out",
    "start": "1175193",
    "end": "1181020"
  },
  {
    "text": "what A is. So you have to make sure\nyou're being consistent then. That's a little bit of a detail,\nbut it's a good question.",
    "start": "1181020",
    "end": "1186600"
  },
  {
    "text": " And why doesn't this create\na circular argument too?",
    "start": "1186600",
    "end": "1191870"
  },
  {
    "text": "Well, so that was\nanother question I'm seeing here on the tape. Well, there's no\nlonger anything-- see,",
    "start": "1191870",
    "end": "1197810"
  },
  {
    "text": "B does not have to have\nA stored within it. It figures out A.",
    "start": "1197810",
    "end": "1203240"
  },
  {
    "text": "So in a sense, you're going\nto write the code for B first. ",
    "start": "1203240",
    "end": "1209620"
  },
  {
    "text": "B is just a simple program. Here it is. There's nothing\ncircular about it. It says B is a\nsimple-- the code for B",
    "start": "1209620",
    "end": "1215380"
  },
  {
    "text": "is, take a look at the\ntape, compute q of that,",
    "start": "1215380",
    "end": "1220400"
  },
  {
    "text": "combine the result with\nwhatever was sitting on the tape from before, and print it out.",
    "start": "1220400",
    "end": "1226950"
  },
  {
    "text": "I mean, that's a piece of\ncode which you can just write. This will become more\nclear, hopefully,",
    "start": "1226950",
    "end": "1232488"
  },
  {
    "text": "in our next slide\nwhere we talk about the English implementation. But just, I don't\nwant to rush to that.",
    "start": "1232488",
    "end": "1239780"
  },
  {
    "text": "So you could figure out B\nwithout even knowing what A is. B stands alone.",
    "start": "1239780",
    "end": "1245760"
  },
  {
    "text": "But then, because B is\njust a piece of code that runs q based on\nwhat it sees on the tape.",
    "start": "1245760",
    "end": "1252260"
  },
  {
    "text": "A, now you need to\nknow what B is in order to obtain A. Because A has\nthe code for B embedded",
    "start": "1252260",
    "end": "1261940"
  },
  {
    "text": "within A as a string. So first you produce B, then\nyou can figure out-- then",
    "start": "1261940",
    "end": "1268780"
  },
  {
    "text": "you can obtain A.\nThere's nothing circular in this argument. I don't know if\nthat's helpful to you,",
    "start": "1268780",
    "end": "1273804"
  },
  {
    "text": "but you may need\nto mull it over. Or maybe it'll be helpful\nfrom the next slide. So let's go there now.",
    "start": "1273805",
    "end": "1279970"
  },
  {
    "text": "So as I'm saying, you can\nimplement this in any language. In particular, you can\nimplement it in English.",
    "start": "1279970",
    "end": "1285840"
  },
  {
    "start": "1284000",
    "end": "1575000"
  },
  {
    "text": "So let's just shift gears. Let's talk about writing\ndown English instructions.",
    "start": "1285840",
    "end": "1291450"
  },
  {
    "text": "And then I'll show what\nhappens if you carry out those instructions.",
    "start": "1291450",
    "end": "1297070"
  },
  {
    "text": "So let's start simple. How about the sentence,\nWrite \"Hello World.\"",
    "start": "1297070",
    "end": "1305860"
  },
  {
    "text": "So an obedient person\nreading those instructions would then write \"Hello World\"\non their paper or wherever.",
    "start": "1305860",
    "end": "1317665"
  },
  {
    "text": " OK, fine, hopefully\nyou get the idea.",
    "start": "1317665",
    "end": "1327040"
  },
  {
    "text": "So now, what I'd like-- here's another sentence,\nanother instruction.",
    "start": "1327040",
    "end": "1337320"
  },
  {
    "text": "Write this sentence.  And the obedient reader would\nthen, OK, Write this sentence.",
    "start": "1337320",
    "end": "1350880"
  },
  {
    "text": "This is the kind of\nthing I'm looking for. Here is a sentence which\ninstructs the reader",
    "start": "1350880",
    "end": "1358120"
  },
  {
    "text": "to make an exact copy. But I don't like this\none, even though it does, in a sense,\nwhat I'm looking for.",
    "start": "1358120",
    "end": "1364760"
  },
  {
    "text": "Because it kind of cheats. When it has this, this refers\nto the entire sentence itself.",
    "start": "1364760",
    "end": "1375799"
  },
  {
    "text": "It's using kind of\nimplicitly here a construct which a Turing\nmachine does not have.",
    "start": "1375800",
    "end": "1383560"
  },
  {
    "text": "The Turing machine\ndoes not have a way of accessing its own code.",
    "start": "1383560",
    "end": "1388795"
  },
  {
    "text": " And in fact, really what the\npoint of this whole theorem",
    "start": "1388795",
    "end": "1396149"
  },
  {
    "text": "that we're going\nto present is, is that you don't need to have this\nself-reference as a primitive.",
    "start": "1396150",
    "end": "1402590"
  },
  {
    "text": "You can get that effectively\nusing the procedure",
    "start": "1402590",
    "end": "1408950"
  },
  {
    "text": "that I'm describing, which\nwill give you the same effect. So you don't need\nit as a primitive. You can design some\nsoftware basically,",
    "start": "1408950",
    "end": "1416690"
  },
  {
    "text": "which will give you\nthe same effect.  So let me show you how\nto do that in English.",
    "start": "1416690",
    "end": "1423220"
  },
  {
    "text": "So let's look at\na slightly more-- whoops, cheating,\nso Turing machines",
    "start": "1423220",
    "end": "1429880"
  },
  {
    "text": "don't have this\nself-reference primitive. So let's look at\nanother sentence here. Write the following\ntwice, the second time",
    "start": "1429880",
    "end": "1436620"
  },
  {
    "text": "in quotes, and\nthen, \"Hello World.\" So what do we get if we\nfollow that instruction?",
    "start": "1436620",
    "end": "1446340"
  },
  {
    "text": "Well, you get \"Hello World\"\nand then \"Hello World\" again, now in quotes. ",
    "start": "1446340",
    "end": "1454040"
  },
  {
    "text": "OK? Hopefully not too bad. But now, I'm one\nstep away for doing",
    "start": "1454040",
    "end": "1459860"
  },
  {
    "text": "the implementation of the\nself-reproducing algorithm in English.",
    "start": "1459860",
    "end": "1465155"
  },
  {
    "text": " Write the following twice,\nthe second time in quotes,",
    "start": "1465155",
    "end": "1471920"
  },
  {
    "text": "and then in quotes,\nthe same text. ",
    "start": "1471920",
    "end": "1477440"
  },
  {
    "text": "Now following\nthose instructions, you get, well, \"Write\nthe following twice,",
    "start": "1477440",
    "end": "1483799"
  },
  {
    "text": "the second time in quotes,\"\nso that comes out here. And the second time,\nyou put it in quotes, just like you did with\nthe \"Hello World.\"",
    "start": "1483800",
    "end": "1491600"
  },
  {
    "text": "But that's exactly\nhere, the output",
    "start": "1491600",
    "end": "1497570"
  },
  {
    "text": "is exactly what the input was. And even though there is a\npart of the sentence here",
    "start": "1497570",
    "end": "1505820"
  },
  {
    "text": "which refers to\na different part, so here the first part is\nreferring to the second part,",
    "start": "1505820",
    "end": "1511840"
  },
  {
    "text": "never do I have to have\nthe sentence referring to its entirety.",
    "start": "1511840",
    "end": "1517720"
  },
  {
    "text": "There's no part of\nthe sentence here that's pointing at\nthe entire sentence. And so, this here\nmanages to get the effect",
    "start": "1517720",
    "end": "1526960"
  },
  {
    "text": "that I'm looking for, where the\noutput is equal to the code, but avoids having\nthe self-reference.",
    "start": "1526960",
    "end": "1535840"
  },
  {
    "text": "One thing is referring\nto something else, but not referring\nback to itself. ",
    "start": "1535840",
    "end": "1543530"
  },
  {
    "text": "So let me just see here. So here, I'm going to have a\ncheck-in on this in a minute.",
    "start": "1543530",
    "end": "1553250"
  },
  {
    "text": "So I'm going to try to\ncontrast what's happening here with what's happening in\nthat Turing machine SELF",
    "start": "1553250",
    "end": "1558580"
  },
  {
    "text": "that I had from\nthe previous slide. So why don't you mull this\nover, and I'm going to give you",
    "start": "1558580",
    "end": "1564520"
  },
  {
    "text": "a check-in to see-- this is a little bit of\na challenging check-in.",
    "start": "1564520",
    "end": "1569680"
  },
  {
    "text": "But let's see if you can\nfigure your way through it. ",
    "start": "1569680",
    "end": "1577220"
  },
  {
    "start": "1575000",
    "end": "1885000"
  },
  {
    "text": "And basically it says, so\nreally what we're doing here is called the recursion\ntheorem, as you'll see. We'll actually present the\nrecursion theorem formally",
    "start": "1577220",
    "end": "1583808"
  },
  {
    "text": "on the next slide. But here, in both\nof these cases,",
    "start": "1583808",
    "end": "1589260"
  },
  {
    "text": "we kind of have a template\npart and an action part. In both cases, there are two\nparts to the instructions,",
    "start": "1589260",
    "end": "1598070"
  },
  {
    "text": "the template and the action. OK? So I'm going to leave\nit to you to try",
    "start": "1598070",
    "end": "1603130"
  },
  {
    "text": "to imagine which\nof those is which, in each of these two examples.",
    "start": "1603130",
    "end": "1609460"
  },
  {
    "text": "And then, I'm going\nto ask you to pick.  In the Turing machine, which\nis the action and which",
    "start": "1609460",
    "end": "1615790"
  },
  {
    "text": "is the template,\nand in the sentence, which is the action and\nwhich is the template. The action is the\npart where there's",
    "start": "1615790",
    "end": "1622870"
  },
  {
    "text": "some interesting sort of\ninstructional stuff happening",
    "start": "1622870",
    "end": "1628000"
  },
  {
    "text": "that you have to carry out. The template is really basically\njust text or just a string.",
    "start": "1628000",
    "end": "1636950"
  },
  {
    "text": "So let me pull up that poll. ",
    "start": "1636950",
    "end": "1643748"
  },
  {
    "text": "See what you think. ",
    "start": "1643748",
    "end": "1650920"
  },
  {
    "text": "Because I'm asking you\nnow to indicate where is the action part in\nboth of those cases.",
    "start": "1650920",
    "end": "1657400"
  },
  {
    "start": "1657400",
    "end": "1664570"
  },
  {
    "text": "What is the upper\nphrase and lower phrase? I mean, of this sentence here. So write the following twice. This is the upper phrase.",
    "start": "1664570",
    "end": "1669920"
  },
  {
    "text": "And the part in quotations\nis the lower phrase-- sorry. ",
    "start": "1669920",
    "end": "1680510"
  },
  {
    "text": "OK, almost done here? ",
    "start": "1680510",
    "end": "1687130"
  },
  {
    "text": "5 seconds-- a few of you\nhave not answered yet.",
    "start": "1687130",
    "end": "1692300"
  },
  {
    "text": "Answer it.  One second to go.",
    "start": "1692300",
    "end": "1697340"
  },
  {
    "text": "OK, here we go, ending polling. ",
    "start": "1697340",
    "end": "1702510"
  },
  {
    "text": "So the majority here is correct. ",
    "start": "1702510",
    "end": "1709510"
  },
  {
    "text": "I would say, in the\nEnglish sentence here, the action part\nis the first part.",
    "start": "1709510",
    "end": "1716020"
  },
  {
    "text": "That's where you actually have\nbeen directed to do something. The second half of the sentence,\nthe lower part of the sentence,",
    "start": "1716020",
    "end": "1724390"
  },
  {
    "text": "is just a template written. This is just some string here.",
    "start": "1724390",
    "end": "1729850"
  },
  {
    "text": "There's no action\nreally being directed. It happens to be\nthe same as the top, but this could have\nbeen just Hello World.",
    "start": "1729850",
    "end": "1735220"
  },
  {
    "text": "This could have been anything. And then the upper\npart acts on that. So the upper part\nis the action part.",
    "start": "1735220",
    "end": "1741160"
  },
  {
    "text": "So it's the upper phrase\nthat's the relevant part. Now, in the Turing\nmachine, in a sense,",
    "start": "1741160",
    "end": "1747760"
  },
  {
    "text": "it's the other way around. The first part is really\njust the template. The second part, B, is where\nyou're doing some actual work",
    "start": "1747760",
    "end": "1756700"
  },
  {
    "text": "on the template. You're taking that, basically\ntext, which could be anything.",
    "start": "1756700",
    "end": "1763250"
  },
  {
    "text": "A could be anything. And you're looking\nat that template",
    "start": "1763250",
    "end": "1769870"
  },
  {
    "text": "and reconstructing what A\nwas from that string that",
    "start": "1769870",
    "end": "1774940"
  },
  {
    "text": "appears on the tape. So B is actually the one\nthat's doing the work. So it's B and the upper\nphrase with part c is correct.",
    "start": "1774940",
    "end": "1781179"
  },
  {
    "text": " So let us continue then.",
    "start": "1781180",
    "end": "1786730"
  },
  {
    "start": "1786730",
    "end": "1792280"
  },
  {
    "text": "Oh, I want to mention here\nproblem 6 on the Pset.",
    "start": "1792280",
    "end": "1798100"
  },
  {
    "text": "So your job really is\nto implement this in-- if you have a programming\nlanguage that you like--",
    "start": "1798100",
    "end": "1805720"
  },
  {
    "text": "it could be Python or whatever\nyour favorite Java, whatever you like-- you can\nimplement this.",
    "start": "1805720",
    "end": "1812050"
  },
  {
    "text": "If you don't know any\nprogramming languages, then just make up some sort\nof pseudo programming language and implement it there.",
    "start": "1812050",
    "end": "1818559"
  },
  {
    "text": "Let me point out that\ngetting the quoting right",
    "start": "1818560",
    "end": "1827040"
  },
  {
    "text": "is a bit of a pain because\nyou have to kind of escape the quotes and so on.",
    "start": "1827040",
    "end": "1833649"
  },
  {
    "text": "I'm not going to be\nfussy about that. So you can still get full\ncredit even if you don't get the quoting part quite correct.",
    "start": "1833650",
    "end": "1839790"
  },
  {
    "text": "Do your best. I think it's an interesting\nproblem to try to solve.",
    "start": "1839790",
    "end": "1845850"
  },
  {
    "text": "And if you struggle with it\nfor a while, it's slippery. It's the kind of\nthing you can easily",
    "start": "1845850",
    "end": "1854340"
  },
  {
    "text": "spend a couple of\nhours on this problem. Because it's a bit\ntricky to manage",
    "start": "1854340",
    "end": "1860670"
  },
  {
    "text": "to make a program which\nprints itself out, which is what the task of\nproblem is on the Pset.",
    "start": "1860670",
    "end": "1866640"
  },
  {
    "text": "But don't fuss about\ntoo much on the quoting if that's the only thing\nthat's hanging you up. Try to get the main structure\nof it, which is fairly simple,",
    "start": "1866640",
    "end": "1873250"
  },
  {
    "text": "actually. And if you can't get the\nquoting part to work, I'll ask the graders not to\npenalize you for that part.",
    "start": "1873250",
    "end": "1880980"
  },
  {
    "start": "1880980",
    "end": "1886590"
  },
  {
    "start": "1885000",
    "end": "2506000"
  },
  {
    "text": "Let's look at the sort of\nthe more formal version of what we've just done and\nreally kind of also taking it",
    "start": "1886590",
    "end": "1895050"
  },
  {
    "text": "to the next level. Because being able to print\nout a copy of yourself",
    "start": "1895050",
    "end": "1900419"
  },
  {
    "text": "is kind of a curiosity in a way.",
    "start": "1900420",
    "end": "1905500"
  },
  {
    "text": "But the recursion theorem\nsays, not only can you make a machine which prints\nout a copy of itself,",
    "start": "1905500",
    "end": "1910720"
  },
  {
    "text": "but you can actually\nmake a machine which can obtain a copy of itself\nand then do some computation",
    "start": "1910720",
    "end": "1917080"
  },
  {
    "text": "on that copy of itself, on its\nown description, which actually turns out to be a\nuseful thing to do.",
    "start": "1917080",
    "end": "1923980"
  },
  {
    "text": "Once you have access to\nyour own description, as you'll see from\nsome examples, then you can do perhaps some\ninteresting things with that.",
    "start": "1923980",
    "end": "1932230"
  },
  {
    "text": "So basically, what the\nrecursion theorem is, is a kind of a compiler. It allows you to have a\nnew primitive when you're",
    "start": "1932230",
    "end": "1939820"
  },
  {
    "text": "writing Turing\nmachines, which is, compute your own description. And the recursion theorem\nwill implement that for you.",
    "start": "1939820",
    "end": "1947450"
  },
  {
    "text": "OK? So the technical form\nof the recursion theorem",
    "start": "1947450",
    "end": "1953000"
  },
  {
    "text": "is going to look a little bit\ncounterintuitive, perhaps.",
    "start": "1953000",
    "end": "1958730"
  },
  {
    "text": "Let me put it out there. If you struggle a little bit\nwith the slide, don't sweat it.",
    "start": "1958730",
    "end": "1965030"
  },
  {
    "text": "The main thing to remember,\nand we'll see from examples, is that you can compute your\nown description in a Turing",
    "start": "1965030",
    "end": "1971140"
  },
  {
    "text": "machine. And that's going to\nbe allowed as code. So the way we're\ngoing to do this",
    "start": "1971140",
    "end": "1977780"
  },
  {
    "text": "is, what the\nrecursion theorem does",
    "start": "1977780",
    "end": "1983030"
  },
  {
    "text": "for you is, it says you can\nwrite a piece of code here.",
    "start": "1983030",
    "end": "1988830"
  },
  {
    "text": "Let's call it a piece\nof Turing machine code-- algorithmic code--\ncalled T. And T is",
    "start": "1988830",
    "end": "1997240"
  },
  {
    "text": "going to get transformed\ninto a new machine, R. And R is going to get\nprovided a copy of the program",
    "start": "1997240",
    "end": "2007540"
  },
  {
    "text": "itself, which is just a\ndescription of R, for free. But otherwise, it's going\nto act exactly like T.",
    "start": "2007540",
    "end": "2013930"
  },
  {
    "text": "So R is going to\nact exactly like T, except R is going to have\nprovided a copy of R.",
    "start": "2013930",
    "end": "2021640"
  },
  {
    "text": "And that's what the theorem\nshows you how to implement. So let me just see. So for any machine, T,\nthere is a machine R",
    "start": "2021640",
    "end": "2029500"
  },
  {
    "text": "which, for any w, which is going\nto be the input for R. R, on w,",
    "start": "2029500",
    "end": "2036610"
  },
  {
    "text": "operates the same as\nR on the input with w where it's given R. So R is\ngoing to be getting access",
    "start": "2036610",
    "end": "2045010"
  },
  {
    "text": "to R without-- it's going to be obtaining\nR by calculating it.",
    "start": "2045010",
    "end": "2052629"
  },
  {
    "text": "Maybe it'll be clear\nfrom the proof. I always struggled with how\nto explain this clearly.",
    "start": "2052630",
    "end": "2059173"
  },
  {
    "text": "So now, the proof\nof this is going to be very much like\nthe proof from two slides back, except it's\ngoing to be three parts.",
    "start": "2059173",
    "end": "2066138"
  },
  {
    "text": "This is the part, T, that\nyou're going to provide. And the T is going to be\nthe Turing machine code that",
    "start": "2066139",
    "end": "2071658"
  },
  {
    "text": "says, get your own description. And you don't have to worry\nabout how that happens.",
    "start": "2071659",
    "end": "2079179"
  },
  {
    "text": "The compiler is going to add\non the A and B parts, which is going to get the whole\ndescription of the whole thing,",
    "start": "2079179",
    "end": "2084860"
  },
  {
    "text": "which is R, and feed it into\nT as if T had it as an input.",
    "start": "2084860",
    "end": "2091908"
  },
  {
    "text": "So T is going to be allowed\nto get its own description now and operate on-- now does\nits thing on the input w.",
    "start": "2091909",
    "end": "2101560"
  },
  {
    "text": "So the way it's going\nto work, so T is given. ",
    "start": "2101560",
    "end": "2106950"
  },
  {
    "text": "A is going to be, as before,\nthe description of B now with T.",
    "start": "2106950",
    "end": "2112800"
  },
  {
    "text": "So when A is done, it's going to\nproduce BT sitting on the tape next to the w.",
    "start": "2112800",
    "end": "2120760"
  },
  {
    "text": "B is going to now figure out\nwhat A was from the BT sitting on the tape.",
    "start": "2120760",
    "end": "2126130"
  },
  {
    "text": " And then, it's going to combine\nthat to get ABT, which is R.",
    "start": "2126130",
    "end": "2135300"
  },
  {
    "text": "And after that, it passes\ncontrol to T with w and now R",
    "start": "2135300",
    "end": "2141560"
  },
  {
    "text": "sitting on the tape. And now, T is going to\nhave its own description.",
    "start": "2141560",
    "end": "2147320"
  },
  {
    "text": "But don't forget, now T\nhas been modified to be R. So it's not that T is\ngoing to get T on the tape.",
    "start": "2147320",
    "end": "2152720"
  },
  {
    "text": "For this to make\nsense, this is going to be now the new machine R.\nAnd R appears on the tape.",
    "start": "2152720",
    "end": "2159470"
  },
  {
    "text": "And now, the code\nthat you provided, T, is now going to get\nto operate on that.",
    "start": "2159470",
    "end": "2166650"
  },
  {
    "text": "OK? If you didn't get that,\nI'm not so worried.",
    "start": "2166650",
    "end": "2171990"
  },
  {
    "text": "The main thing is\nthat you can use compute your own\ndescription when you're describing Turing machines. That's what this\nthing is telling you.",
    "start": "2171990",
    "end": "2180560"
  },
  {
    "text": "I think it'll be-- oh, there's a check-in here. Yeah, so I don't know.",
    "start": "2180560",
    "end": "2187180"
  },
  {
    "text": "Let's do this one\nkind of quickly here. Can we use the recursion theorem\nto design a machine T which,",
    "start": "2187180",
    "end": "2195880"
  },
  {
    "text": "instead of producing\nits own description,",
    "start": "2195880",
    "end": "2203670"
  },
  {
    "text": "accepts only its own\ndescription as an input?",
    "start": "2203670",
    "end": "2209010"
  },
  {
    "text": "So the language\nof this machine is going to be simply the one\nstring, the description of T.",
    "start": "2209010",
    "end": "2217010"
  },
  {
    "text": "So can we make a machine,\nT, which does this? Now I'm looking\nat this check-in.",
    "start": "2217010",
    "end": "2222800"
  },
  {
    "text": "This T here is\nconfusing with that T. It's not the same T. That's bad.",
    "start": "2222800",
    "end": "2227870"
  },
  {
    "text": "I should call it M. Design\na machine, M, where L of M is the description of M.",
    "start": "2227870",
    "end": "2235940"
  },
  {
    "text": "And can we use the recursion\ntheorem to do that? What I would ask you to do is\nthink about it in this context.",
    "start": "2235940",
    "end": "2243349"
  },
  {
    "text": "You can use compute\nyour own description when you're writing the\ncode for this machine.",
    "start": "2243350",
    "end": "2250130"
  },
  {
    "text": "If you could do that,\ncould you make a machine which just accepts\nstrings which happen to be their own description?",
    "start": "2250130",
    "end": "2256010"
  },
  {
    "text": "This is supposed to be easy. But I think it ended up being\na little bit more complicated than I wanted.",
    "start": "2256010",
    "end": "2261200"
  },
  {
    "text": " Launch polling, make\nyour best guess.",
    "start": "2261200",
    "end": "2269030"
  },
  {
    "text": " I think you all kind of see-- I was kind of leading you,\nleading you along the path",
    "start": "2269030",
    "end": "2277869"
  },
  {
    "text": "here. Yes so, I think you're pretty\nmuch all are getting it. Maybe a few of you are unsure.",
    "start": "2277870",
    "end": "2292160"
  },
  {
    "text": "But anyway, let's just\nwrap this one up quickly so that we can move on. I think you're pretty much-- so,\n5 seconds, I'm going to end it.",
    "start": "2292160",
    "end": "2303339"
  },
  {
    "text": "So the correct answer is\nYes, as I was hinting at. So I think maybe this example\nwould have been better",
    "start": "2303340",
    "end": "2309640"
  },
  {
    "text": "after the next example. And then we're going\nto have a break. ",
    "start": "2309640",
    "end": "2314720"
  },
  {
    "text": "So here is a new proof\nthat ATM is undecidable but now using the\nrecursion theorem.",
    "start": "2314720",
    "end": "2321099"
  },
  {
    "text": "And this is going to give\nyou a nice example of how we use the recursion\ntheorem in action.",
    "start": "2321100",
    "end": "2327730"
  },
  {
    "text": "So remember, we spent half a\nlecture or more with a proof",
    "start": "2327730",
    "end": "2334060"
  },
  {
    "text": "by diagonalization. As our first example of an\nundecidable problem ATM,",
    "start": "2334060",
    "end": "2339609"
  },
  {
    "text": "we subsequently\nshowed other things undecidable by reduction. But for the very first example,\nwe used that diagonalization.",
    "start": "2339610",
    "end": "2349880"
  },
  {
    "text": "Now I'm going to\ngive you a new proof. So proof by\ncontradiction, assume",
    "start": "2349880",
    "end": "2355230"
  },
  {
    "text": "we have a Turing machine,\nH, that decides ATM. It starts the same way that\nthe diagonalization proof went.",
    "start": "2355230",
    "end": "2361619"
  },
  {
    "text": "But now I'm going to\nmake a new machine called R. So this is going to be\ndifferent from the earlier",
    "start": "2361620",
    "end": "2368069"
  },
  {
    "text": "proof. R says, on input w, I\nget my own description.",
    "start": "2368070",
    "end": "2373110"
  },
  {
    "text": "Use the recursion theorem. That's the way these\nthings always start. Now, I'm going to use H. Now\nthat I know my own description,",
    "start": "2373110",
    "end": "2382820"
  },
  {
    "text": "I'm going to feed-- I can ask H. I can feed R, w--",
    "start": "2382820",
    "end": "2390060"
  },
  {
    "text": "w was the input here. I can feed R, w into H to\ndetermine whether R accepts w.",
    "start": "2390060",
    "end": "2396560"
  },
  {
    "text": "That's what H does. Solving ATM, H will tell this\nmachine whether R accepts w.",
    "start": "2396560",
    "end": "2408110"
  },
  {
    "text": "R is the machine we're\nwriting, however. That is the machine\nthat's currently running.",
    "start": "2408110",
    "end": "2415920"
  },
  {
    "text": "So R now uses H, and it knows\nwhat it's supposed to do.",
    "start": "2415920",
    "end": "2423960"
  },
  {
    "text": "H is going to say, well,\nyou're going to accept w or you're not going to accept w. That's what H is assumed\nto be able to do.",
    "start": "2423960",
    "end": "2431520"
  },
  {
    "text": "But then what is R\ngoing to do after that? R is going to do the opposite\nof what H says it's going to do.",
    "start": "2431520",
    "end": "2439490"
  },
  {
    "text": "So if H says, R accepts w,\nthen R is going to reject w.",
    "start": "2439490",
    "end": "2446770"
  },
  {
    "text": "If H says R doesn't accept w-- it rejects it by looping or\nhalting, doesn't matter--",
    "start": "2446770",
    "end": "2453670"
  },
  {
    "text": "H just says it rejects, then\nit's just going to accept.",
    "start": "2453670",
    "end": "2462559"
  },
  {
    "text": "So whatever H says, R is\ngoing to show that H is wrong. So that's a contradiction.",
    "start": "2462560",
    "end": "2468091"
  },
  {
    "text": "It says that H cannot\nbe deciding ATM.",
    "start": "2468092",
    "end": "2473620"
  },
  {
    "text": "So if you step back and think\nabout what this is here, that's that whole\ndiagonalization proof",
    "start": "2473620",
    "end": "2480070"
  },
  {
    "text": "in one line. Basically, we've done that\nproof in a different way,",
    "start": "2480070",
    "end": "2485428"
  },
  {
    "text": "though there is some\nsimilarity here. I don't want to say that we've\ntotally reinvented things and done that\ntotally differently.",
    "start": "2485428",
    "end": "2490877"
  },
  {
    "text": "But it's kind of, in\nsome ways, sort of gets at the essence\nof the diagonalization in a certain sense.",
    "start": "2490877",
    "end": "2496270"
  },
  {
    "text": "But anyway, it gives you kind\nof a new, very short proof that ATM is undecidable. I think that's kind\nof a cool thing.",
    "start": "2496270",
    "end": "2502490"
  },
  {
    "text": "So why don't we take our\nlittle coffee break here,",
    "start": "2502490",
    "end": "2508480"
  },
  {
    "start": "2506000",
    "end": "2914000"
  },
  {
    "text": "and you can feel free to ask\nquestions during the break. I will start my timer going.",
    "start": "2508480",
    "end": "2516130"
  },
  {
    "text": "And we'll be back continuing\nlecture in five minutes. ",
    "start": "2516130",
    "end": "2534610"
  },
  {
    "text": "OK, so questions-- so we're\ngetting some questions on when I said, we don't have\nto worry about the quotes",
    "start": "2534610",
    "end": "2540950"
  },
  {
    "text": "when we're solving\nproblem 6 on the Pset.",
    "start": "2540950",
    "end": "2547460"
  },
  {
    "text": "Somebody says, can we just say\nprint A, B, C, instead of print",
    "start": "2547460",
    "end": "2553700"
  },
  {
    "text": "quote, \"A, B, C,\" and it will\nprint A, B, C. Yes, you can-- don't worry about the quotes. ",
    "start": "2553700",
    "end": "2561020"
  },
  {
    "text": "I think it's kind of-- you'll see a challenge\nif you want to try to get the quotes to work. But it's also kind of a pain.",
    "start": "2561020",
    "end": "2566970"
  },
  {
    "text": "So yeah, you can just\nkind of ignore the quotes, and I'll ask the graders to\ngive that full marks there.",
    "start": "2566970",
    "end": "2573810"
  },
  {
    "text": "So any reasonable\ninterpretation will-- as long as you get the\nrest of the concept right--",
    "start": "2573810",
    "end": "2581150"
  },
  {
    "text": "will be fine. Let's see, somebody is asking,\nIn the recursion theorem,",
    "start": "2581150",
    "end": "2589150"
  },
  {
    "text": "why doesn't T get\nthe description of T instead of the description of R?",
    "start": "2589150",
    "end": "2595619"
  },
  {
    "text": "Because the machine\nthat's running is R, back in the previous\nslide, two slides ago.",
    "start": "2595620",
    "end": "2606980"
  },
  {
    "text": "So if R got T, it would not be\ngetting its own description. It would be getting\nthe description of some other machine.",
    "start": "2606980",
    "end": "2612000"
  },
  {
    "text": "So you need to think\nabout what we actually need to have happen here in the\nproof of the recursion theorem. But it needs to have R, not T.",
    "start": "2612000",
    "end": "2619940"
  },
  {
    "text": "Let's just see if I can-- why does R do the\nopposite of what H says? ",
    "start": "2619940",
    "end": "2636869"
  },
  {
    "text": "Why does R do the\nopposite of what H says? Well, first of all,\nI'm the one who gets to design R. So\nhere is the code arc.",
    "start": "2636870",
    "end": "2643710"
  },
  {
    "text": "We're assuming we\nhave H. I'm going to design R to do anything\nI want to satisfy the proof.",
    "start": "2643710",
    "end": "2651180"
  },
  {
    "text": "And R here is designed\nto do the opposite of H.",
    "start": "2651180",
    "end": "2660140"
  },
  {
    "text": "So I'm asking R-- I'm programming R\nto find out what H predicts it will do\nand then do the opposite.",
    "start": "2660140",
    "end": "2669067"
  },
  {
    "text": "Maybe the situation\nis sort of like this. Suppose somebody says, I\nhave a crystal ball, which",
    "start": "2669068",
    "end": "2678930"
  },
  {
    "text": "is going to be like the role\nof H. And you say, oh, really? That's kind of cool. I don't believe you, but it\nstill sounds interesting.",
    "start": "2678930",
    "end": "2686849"
  },
  {
    "text": "And the person says, yeah,\nI can see the future. ",
    "start": "2686850",
    "end": "2692160"
  },
  {
    "text": "I know what you're going\nto do in five minutes.",
    "start": "2692160",
    "end": "2697359"
  },
  {
    "text": "And in fact, I can see\nthat in five minutes, you're going to say, Hello.",
    "start": "2697360",
    "end": "2705570"
  },
  {
    "text": "And you can say, well,\nyou can think to yourself, well, this person is nuts. I'm not going to do that.",
    "start": "2705570",
    "end": "2712120"
  },
  {
    "text": "I'm just not going to say Hello. And then the genie there\nwith the crystal ball",
    "start": "2712120",
    "end": "2718448"
  },
  {
    "text": "waits five minutes and\nyou don't say Hello. And then you've proven that\nthe crystal ball doesn't work. It's very similar.",
    "start": "2718448",
    "end": "2723750"
  },
  {
    "start": "2723750",
    "end": "2731210"
  },
  {
    "text": "I'm not going to explain how we\ncan do the combining in SELF. I just want to explain\nat a high level.",
    "start": "2731210",
    "end": "2738410"
  },
  {
    "text": "That's just going to be messy. Because I said, we were somehow\ngoing to combine in SELF.",
    "start": "2738410",
    "end": "2744520"
  },
  {
    "text": "Let me leave that as\na conceptual level. OK, how does this idea\nwork for Turing machines?",
    "start": "2744520",
    "end": "2752773"
  },
  {
    "text": "I don't really\nunderstand that question. How does this idea work for\nTuring machines are decidable? You'll have to\nresend that because I",
    "start": "2752773",
    "end": "2758790"
  },
  {
    "text": "don't understand the question. Can I explain, use\nyour own description?",
    "start": "2758790",
    "end": "2766290"
  },
  {
    "text": "So when you write code that\nsays, get your own description,",
    "start": "2766290",
    "end": "2772220"
  },
  {
    "text": "after that code executes,\nthe Turing machine",
    "start": "2772220",
    "end": "2778119"
  },
  {
    "text": "appears on the tape, like\nmagic, the description of its own code.",
    "start": "2778120",
    "end": "2785869"
  },
  {
    "text": "Say, sitting next to the\ninput to the machine, because the machine may have\nan separate input from that.",
    "start": "2785870",
    "end": "2791280"
  },
  {
    "text": "So the machine just\nmagically gets its own code. And the proof of the recursion\ntheorem implements that,",
    "start": "2791280",
    "end": "2798319"
  },
  {
    "text": "so it's not magic after all. ",
    "start": "2798320",
    "end": "2804790"
  },
  {
    "text": "But I still don't\nunderstand the question.",
    "start": "2804790",
    "end": "2809970"
  },
  {
    "start": "2809970",
    "end": "2815440"
  },
  {
    "text": "So for problem 6, is it\nenough to attach code? If you're going to attach\ncode for problem 6, and that's",
    "start": "2815440",
    "end": "2825510"
  },
  {
    "text": "good enough. Or if you can explain,\nit's also good, like usual. Do we worry about\ntabs and new lines?",
    "start": "2825510",
    "end": "2831809"
  },
  {
    "text": "No. ",
    "start": "2831810",
    "end": "2837682"
  },
  {
    "text": "OK, we're going to have to\ndefer the rest of the questions. Don't forget we have\na zillion questions here which I didn't get to.",
    "start": "2837682",
    "end": "2843279"
  },
  {
    "text": " OK, last one here-- why\ndoes programming R do",
    "start": "2843280",
    "end": "2850619"
  },
  {
    "text": "the opposite of H? Is that a contradiction? Well, H is predicting that R\naccepts, but R doesn't accept,",
    "start": "2850620",
    "end": "2857370"
  },
  {
    "text": "so H is wrong. We're a little short on time. Let me skip this one.",
    "start": "2857370",
    "end": "2864069"
  },
  {
    "text": "You can look at\nthis on your own. I mean, this is proving\nsort of the cool fact that--",
    "start": "2864070",
    "end": "2869290"
  },
  {
    "text": "I'll just say it\nat a high level. If you have a program\ntransformation,",
    "start": "2869290",
    "end": "2876050"
  },
  {
    "text": "so if I have some\nmethod of transforming one program to another program,\nbut it's done by algorithm.",
    "start": "2876050",
    "end": "2881540"
  },
  {
    "text": "So an algorithmic way\nthat transforms one program to another program. There's always going to be\nsome program whose behavior is",
    "start": "2881540",
    "end": "2889030"
  },
  {
    "text": "unchanged by the transformation. That's called the\nfixed point theorem.",
    "start": "2889030",
    "end": "2895090"
  },
  {
    "text": "So there some program\nwhose behavior doesn't change no\nmatter how you try two transform programs-- easy\nproof using the recursion",
    "start": "2895090",
    "end": "2901540"
  },
  {
    "text": "theorem. You can look at\nthe slide offline",
    "start": "2901540",
    "end": "2907480"
  },
  {
    "text": "separately if you like\nto see how that goes. It's pretty simple. ",
    "start": "2907480",
    "end": "2915340"
  },
  {
    "text": "Here's another exercise\nof the recursion theorem. ",
    "start": "2915340",
    "end": "2923180"
  },
  {
    "text": "So if I have a-- ",
    "start": "2923180",
    "end": "2931579"
  },
  {
    "text": "let's say a Turing\nmachine is minimal",
    "start": "2931580",
    "end": "2938030"
  },
  {
    "text": "if its description is the\nshortest among all Turing",
    "start": "2938030",
    "end": "2943640"
  },
  {
    "text": "machines which behave\nthe way it does, which are equivalent to it. ",
    "start": "2943640",
    "end": "2952569"
  },
  {
    "text": "When I was an undergraduate,\nI took a programming class.",
    "start": "2952570",
    "end": "2958000"
  },
  {
    "text": "And some of us sort of\nenjoyed writing short programs to carry out the exercises.",
    "start": "2958000",
    "end": "2967557"
  },
  {
    "text": "Probably these days,\nthat's forbidden because it just encourages\nbad programming style. But anyway, so you\nkind of won if you",
    "start": "2967558",
    "end": "2978730"
  },
  {
    "text": "found the shortest solution for\na given programming exercise. It was Heap Sort, I\nremember, was one of the ones",
    "start": "2978730",
    "end": "2984910"
  },
  {
    "text": "that we had to do. So this is sort of similar.",
    "start": "2984910",
    "end": "2993510"
  },
  {
    "text": "You might imagine if people try\nto find the shortest possible universal Turing machine.",
    "start": "2993510",
    "end": "2998650"
  },
  {
    "text": "So short is, in our\nsense is, in terms of whatever encoding\nmethod we have in mind,",
    "start": "2998650",
    "end": "3004609"
  },
  {
    "text": "a machine is minimal if there\nis no shorter program which",
    "start": "3004610",
    "end": "3009770"
  },
  {
    "text": "is equivalent using our\nencoding system, whatever it is.",
    "start": "3009770",
    "end": "3015470"
  },
  {
    "text": "So M is minimal if anything\nthat has a shorter description",
    "start": "3015470",
    "end": "3020599"
  },
  {
    "text": "has a different language. ",
    "start": "3020600",
    "end": "3026390"
  },
  {
    "text": "OK, so let's look at the\ncollection of all descriptions",
    "start": "3026390",
    "end": "3032589"
  },
  {
    "text": "of minimal Turing machines. And I want to prove that that\nlanguage is unrecognizable.",
    "start": "3032590",
    "end": "3039562"
  },
  {
    "text": "I'm going to do it using\nthe recursion theorem. And it's kind of\na cool exercise. And you can actually use it to\nprove something more powerful.",
    "start": "3039562",
    "end": "3046770"
  },
  {
    "text": "But let's focus on\nthis theorem for now.",
    "start": "3046770",
    "end": "3052170"
  },
  {
    "text": "So assume we have-- and it's also in the little\nnice exercise about enumerators.",
    "start": "3052170",
    "end": "3058621"
  },
  {
    "text": "I don't know how comfortable\nyou ever got with enumerators. But I'm trying to prove\nthis language here",
    "start": "3058622",
    "end": "3064860"
  },
  {
    "text": "is not recognizable. And so remember,\nenumerators, you can enumerate exactly all\nthe recognizable languages.",
    "start": "3064860",
    "end": "3072090"
  },
  {
    "text": "So I'm going to assume I have\nan enumerator for this language, which just prints out all of\nthe minimal Turing machines.",
    "start": "3072090",
    "end": "3081160"
  },
  {
    "text": "So I have some enumerator. It's a program that prints\nout the descriptions of all",
    "start": "3081160",
    "end": "3086550"
  },
  {
    "text": "of the minimal-- the shortest possible\nTuring machines. And now I'm going to\nget a contradiction.",
    "start": "3086550",
    "end": "3092980"
  },
  {
    "text": "So we're going to build\nthis Turing machine, R, which gets its own description.",
    "start": "3092980",
    "end": "3099619"
  },
  {
    "text": "And then, it's going to\nstart the enumerator until--",
    "start": "3099620",
    "end": "3106550"
  },
  {
    "text": "so looking at the strings\nthat the enumerator produces. So this enumerator is producing\nthese minimal Turing machines,",
    "start": "3106550",
    "end": "3113000"
  },
  {
    "text": "one after the next-- chunk,\nchunk, chunk, chunk, chunk. All these minimal Turing\nmachines are coming out.",
    "start": "3113000",
    "end": "3118609"
  },
  {
    "text": "And you keep looking at those\nuntil you find one of them which is bigger than yourself.",
    "start": "3118610",
    "end": "3125870"
  },
  {
    "text": "And how do you know how\nbig you are yourself? From the description you're\ngiven by the recursion theorem.",
    "start": "3125870",
    "end": "3132430"
  },
  {
    "text": "So you keep on printing\nout these Turing machines until you find one that's\nbigger than yourself.",
    "start": "3132430",
    "end": "3138590"
  },
  {
    "text": "And then, what do\nyou do with that? You simulate that. So now, so what?",
    "start": "3138590",
    "end": "3147119"
  },
  {
    "text": "Well, the point is\nthat you're going to be smaller than that\nmachine that you're simulating.",
    "start": "3147120",
    "end": "3153630"
  },
  {
    "text": "Because you waited\nto find a machine that the enumerator produced\nwhich is bigger than you.",
    "start": "3153630",
    "end": "3159039"
  },
  {
    "text": "So you're going to be\nsimulating that machine that's bigger than you. And so, you're going to be doing\nexactly what that machine does",
    "start": "3159040",
    "end": "3166668"
  },
  {
    "text": "on every input,\nbecause you're always going to be simulating that\nsame machine on every input. And so, you're going to be\nequivalent to that bigger",
    "start": "3166668",
    "end": "3173910"
  },
  {
    "text": "machine. But that bigger machine\nis supposed to be minimal because E is producing it.",
    "start": "3173910",
    "end": "3181800"
  },
  {
    "text": "But here, you are\nexhibiting a machine that's smaller than that-- that allegedly minimal\nmachine couldn't be minimal.",
    "start": "3181800",
    "end": "3190400"
  },
  {
    "text": "That's the contradiction. So the language of R, this\nmachine I just produced,",
    "start": "3190400",
    "end": "3197770"
  },
  {
    "text": "equals the language of B.\nBecause R ends up simulating B.",
    "start": "3197770",
    "end": "3203050"
  },
  {
    "text": "But R is smaller\nthan B because R waited until it found a bigger\nmachine that's bigger than it.",
    "start": "3203050",
    "end": "3209890"
  },
  {
    "text": "So B couldn't be minimal,\nbut B was one of the machines that the enumerator produced.",
    "start": "3209890",
    "end": "3214990"
  },
  {
    "text": "That's a contradiction. So let me do a check-in on this.",
    "start": "3214990",
    "end": "3220990"
  },
  {
    "text": "I expect this is going to\ncause some of you heartburn, but let's do the best you can. ",
    "start": "3220990",
    "end": "3231430"
  },
  {
    "text": "Suppose I have this collection\nof minimal Turing machines and I take some\ninfinite subset of that.",
    "start": "3231430",
    "end": "3237450"
  },
  {
    "text": "So now I'm not demanding\nthat I have all of the minimal Turing machines. I just have infinitely many\nminimal Turing machines.",
    "start": "3237450",
    "end": "3244660"
  },
  {
    "text": "Is it possible that\nsubset-- whatever it is-- could be Turing-recognizable?",
    "start": "3244660",
    "end": "3253380"
  },
  {
    "text": "Now, think about that. Now, you can have\nlanguages which",
    "start": "3253380",
    "end": "3258569"
  },
  {
    "text": "are not\nTuring-recognizable, that have infinite\nTuring-recognizable subsets.",
    "start": "3258570",
    "end": "3265809"
  },
  {
    "text": "Could that be for this language? ",
    "start": "3265810",
    "end": "3282330"
  },
  {
    "text": "And maybe I'll give you a-- ",
    "start": "3282330",
    "end": "3288420"
  },
  {
    "text": "it will be helpful to you to\nunderstand and perhaps apply the methodology that I gave\nyou in this proof here.",
    "start": "3288420",
    "end": "3297265"
  },
  {
    "text": "And that might be\nhelpful to you.  But I can see this is not--",
    "start": "3297265",
    "end": "3305380"
  },
  {
    "text": "this one is a bit of a struggle. ",
    "start": "3305380",
    "end": "3311080"
  },
  {
    "text": "OK, let's end it.  Two seconds, just\npick something.",
    "start": "3311080",
    "end": "3319670"
  },
  {
    "text": "So the majority has the\ncorrect answer here. ",
    "start": "3319670",
    "end": "3327240"
  },
  {
    "text": "So in fact, this\nproof would still",
    "start": "3327240",
    "end": "3333350"
  },
  {
    "text": "work if the enumerator was\nenumerating an infinite subset",
    "start": "3333350",
    "end": "3340500"
  },
  {
    "text": "of minimal Turing machines. Because all you need\nis to wait until one that's bigger than you appears.",
    "start": "3340500",
    "end": "3347300"
  },
  {
    "text": "And all that R\nneeds to do is wait until one that's\nbigger than R appears,",
    "start": "3347300",
    "end": "3353090"
  },
  {
    "text": "which will certainly\nhappen eventually if the subset is infinite. And then R simulates that bigger\nmachine and acts the same way,",
    "start": "3353090",
    "end": "3362810"
  },
  {
    "text": "thereby proving it\ncould not be minimal.  So it's exactly the same proof\nshows that the answer here",
    "start": "3362810",
    "end": "3370630"
  },
  {
    "text": "is No. And it's a kind of a curiosity. It's not necessarily\nthat easy to construct",
    "start": "3370630",
    "end": "3377490"
  },
  {
    "text": "languages which not only\nare they not recognizable, but they have no\nrecognizable subsets--",
    "start": "3377490",
    "end": "3383520"
  },
  {
    "text": "infinite subsets. Obviously, a finite\nsubset is going to be recognizable because it\nwould be decidable as well.",
    "start": "3383520",
    "end": "3391910"
  },
  {
    "text": "So anyway, let's move on. ",
    "start": "3391910",
    "end": "3397730"
  },
  {
    "text": "Some other\napplications-- so first,",
    "start": "3397730",
    "end": "3403712"
  },
  {
    "text": "a real-world application-- ",
    "start": "3403712",
    "end": "3414790"
  },
  {
    "text": "somebody is asking\nfor an example of a language of a\nrecognizable subset",
    "start": "3414790",
    "end": "3423390"
  },
  {
    "text": "of a non-recognizable language. So starting out with something\nwhich is not recognizable,",
    "start": "3423390",
    "end": "3429540"
  },
  {
    "text": "and can we come\nup with a quick--",
    "start": "3429540",
    "end": "3438245"
  },
  {
    "text": " So here is, I don't know\nif this will help you.",
    "start": "3438245",
    "end": "3445230"
  },
  {
    "text": "So the question is,\ncan I give an example of a non-recognizable language\nthat has a recognizable subset?",
    "start": "3445230",
    "end": "3453670"
  },
  {
    "text": "So I didn't prepare this, but\nlet me see if this helps you.",
    "start": "3453670",
    "end": "3460150"
  },
  {
    "text": "So let's take ATM complement. We already showed that ATM\ncomplement is not recognizable.",
    "start": "3460150",
    "end": "3467300"
  },
  {
    "text": "So these are the sets\nof pairs, M and w, where M does not accept w.",
    "start": "3467300",
    "end": "3473510"
  },
  {
    "start": "3473510",
    "end": "3483965"
  },
  {
    "text": "So if I focus only on those\nM's, which are finite automata,",
    "start": "3483965",
    "end": "3491630"
  },
  {
    "text": "which are a subclass\nof Turing machines, then I can get the\nanswer for those M's.",
    "start": "3491630",
    "end": "3497930"
  },
  {
    "text": " So for the infinitely many cases\nwhere the Turing machine never",
    "start": "3497930",
    "end": "3504200"
  },
  {
    "text": "writes on its tape, it\neven becomes decidable.",
    "start": "3504200",
    "end": "3511349"
  },
  {
    "text": "So I don't know\nif that's helpful, but you can\ndefinitely find cases",
    "start": "3511350",
    "end": "3517350"
  },
  {
    "text": "where there are\nundecidable languages that have decidable subsets,\nunrecognizable languages that",
    "start": "3517350",
    "end": "3522779"
  },
  {
    "text": "have recognizable\ninfinite subsets. But there's one example\nwhere it's not true,",
    "start": "3522780",
    "end": "3527923"
  },
  {
    "text": "in the previous slide. ",
    "start": "3527923",
    "end": "3533740"
  },
  {
    "text": "OK, a lot of questions\nare coming up here. ",
    "start": "3533740",
    "end": "3540860"
  },
  {
    "text": "Yes, I'm seeing some\nother proposals here. If you take ATM\ncomplement and you union",
    "start": "3540860",
    "end": "3549270"
  },
  {
    "text": "with just any old\nstrings of 1's, just one star, assuming\nthat one star--",
    "start": "3549270",
    "end": "3554762"
  },
  {
    "text": "just strings of\n1's are never going to code for a Turing machine-- that's still going\nto be unrecognizable.",
    "start": "3554762",
    "end": "3560360"
  },
  {
    "text": "But then you can\njust throw away all of those just strings\nof 1's, and you're going to get an infinite subset.",
    "start": "3560360",
    "end": "3566329"
  },
  {
    "text": "Oh, wait a minute. It's still unrecognizable. That's no good. ",
    "start": "3566330",
    "end": "3572880"
  },
  {
    "text": "Oh, no, yeah, I threw\naway the wrong stuff. You throw away the descriptions\nof the Turing machines,",
    "start": "3572880",
    "end": "3579089"
  },
  {
    "text": "and you just have the\none-star strings left. And so, that becomes\ndecidable, even regular.",
    "start": "3579090",
    "end": "3585130"
  },
  {
    "text": "Anyway, I'm not sure\nI'm helping you. Let's move on to\nother applications.",
    "start": "3585130",
    "end": "3590270"
  },
  {
    "text": "So this is kind of a curious\napplication that actually is in the real world,\nwhere a machine might want",
    "start": "3590270",
    "end": "3597610"
  },
  {
    "text": "to get a copy of itself and\nthen do something perhaps even nefarious with a\ncopy of its own code.",
    "start": "3597610",
    "end": "3607367"
  },
  {
    "text": "And that would be\na computer virus.  Computer viruses make\ncopies of themselves",
    "start": "3607367",
    "end": "3616540"
  },
  {
    "text": "and then propagate them through\nthe internet, or whatever media you have, to infect\nother computers.",
    "start": "3616540",
    "end": "3623440"
  },
  {
    "text": "And I'm sure we all\nknow computer viruses.",
    "start": "3623440",
    "end": "3628579"
  },
  {
    "text": "Well, they need to get\ncopies of themselves in order to do the infection.",
    "start": "3628580",
    "end": "3635020"
  },
  {
    "text": "How do they do that? Many of them operate in a way\nwhere in either in a language",
    "start": "3635020",
    "end": "3642579"
  },
  {
    "text": "or in a system, where\nthey can make reference to their own code, either by\nlooking at the machine code,",
    "start": "3642580",
    "end": "3655670"
  },
  {
    "text": "or whatever direct\naccess to their own code. There are languages and\nsystems which allow for that.",
    "start": "3655670",
    "end": "3662550"
  },
  {
    "text": "But I'm not an expert\non computer viruses. I would be shocked if they're\nnot some other viruses that",
    "start": "3662550",
    "end": "3669559"
  },
  {
    "text": "get access to their own code by\nusing something in the same--",
    "start": "3669560",
    "end": "3675620"
  },
  {
    "text": "using basically the method\nof the recursion theorem. I haven't done a\nsystematic study.",
    "start": "3675620",
    "end": "3681170"
  },
  {
    "text": "But I'm sure, if\nyou can't access to your own code directly\nusing some operating system",
    "start": "3681170",
    "end": "3686810"
  },
  {
    "text": "mechanism, some primitive,\nthe only other way is basically doing the method\nthat we just described.",
    "start": "3686810",
    "end": "3692497"
  },
  {
    "text": " OK, so another application\nis in a branch of mathematics",
    "start": "3692497",
    "end": "3704540"
  },
  {
    "text": "called mathematical logic. Where, I imagine that many\nof you have heard of the work",
    "start": "3704540",
    "end": "3711570"
  },
  {
    "text": "of Godel from the earlier\npart of the 20th century, where they show that\nyou can come up--",
    "start": "3711570",
    "end": "3718560"
  },
  {
    "text": "it's possible to demonstrate\nthat there are true mathematical statements but\nwhich cannot be proven to be",
    "start": "3718560",
    "end": "3725200"
  },
  {
    "text": "true.  So proof-- there might be\nsomething like maybe even",
    "start": "3725200",
    "end": "3733049"
  },
  {
    "text": "questions of interest to us,\nlike P versus NP question, which we will, at some point,\nlook at in a few weeks--",
    "start": "3733050",
    "end": "3741660"
  },
  {
    "text": "actually, yeah, maybe two\nor three weeks from now. There are many unsolved\nmathematical problems.",
    "start": "3741660",
    "end": "3747840"
  },
  {
    "text": "And people wonder,\nmaybe there's just no way to prove them\none way or the other.",
    "start": "3747840",
    "end": "3753000"
  },
  {
    "text": " So in the 1930s, when\nGodel did his work,",
    "start": "3753000",
    "end": "3760350"
  },
  {
    "text": "he shocked the\nmathematical community by showing that proof does\nnot work for everything.",
    "start": "3760350",
    "end": "3768119"
  },
  {
    "text": "There may be things that are\ntrue that you cannot prove. ",
    "start": "3768120",
    "end": "3773740"
  },
  {
    "text": "In Hilbert, in particular,\nfrom Hilbert's 10th problem, he was dismayed by this\nresult. Because he had earlier",
    "start": "3773740",
    "end": "3782970"
  },
  {
    "text": "believed that anything that\nwas true you could prove. So anyway, let's just see how--",
    "start": "3782970",
    "end": "3790650"
  },
  {
    "text": "I'm going to sketch how we\nactually go about doing that. Because we now have a\nkind of enough technique",
    "start": "3790650",
    "end": "3796500"
  },
  {
    "text": "to at least give you\nan idea of how do you demonstrate that there are\ntrue but unprovable statements",
    "start": "3796500",
    "end": "3801510"
  },
  {
    "text": "and actually even exhibit one. OK, mathematical logic\nis the mathematical study",
    "start": "3801510",
    "end": "3807490"
  },
  {
    "text": "of mathematics itself.  Godel's first incompleteness\ntheorem, as we described,",
    "start": "3807490",
    "end": "3814490"
  },
  {
    "text": "is that in any\nreasonable formal system of mathematical\nprovability, there",
    "start": "3814490",
    "end": "3821570"
  },
  {
    "text": "are going to be some\ntrue statements that are not provable. And in order to sort of get\nthe sketch of the proof--",
    "start": "3821570",
    "end": "3829619"
  },
  {
    "text": "I shouldn't say proof here. We're going to proof sketch. We're going to basically use\ntwo properties of formal proof",
    "start": "3829620",
    "end": "3839310"
  },
  {
    "text": "systems. One is that kind of obvious\nproperty that you would expect",
    "start": "3839310",
    "end": "3848050"
  },
  {
    "text": "all probability systems to\nhave, is that you can only prove true things.",
    "start": "3848050",
    "end": "3853730"
  },
  {
    "text": "So if something is being\nproven, it's going to be true. You can't prove anything false.",
    "start": "3853730",
    "end": "3860080"
  },
  {
    "text": "If you can prove false things,\nyour system of provability is bad. ",
    "start": "3860080",
    "end": "3866550"
  },
  {
    "text": "And the other thing\nis that proofs are checkable by machine.",
    "start": "3866550",
    "end": "3873960"
  },
  {
    "text": "So if you write down-- do\nyour system in a formal way and you have this\nformal notion of proofs,",
    "start": "3873960",
    "end": "3879930"
  },
  {
    "text": "which underlies all mathematical\nreasoning, by the way. This is completely\nwell accepted. Both of these properties are\naccepted by mathematicians.",
    "start": "3879930",
    "end": "3886640"
  },
  {
    "text": "Then in principle, you can\nconvert any mathematical proof into a form that you can\ncheck it by computer.",
    "start": "3886640",
    "end": "3893270"
  },
  {
    "text": "It might become much longer. But in principle, you can\nput the proof into a form where a computer\ncould check the proof.",
    "start": "3893270",
    "end": "3901070"
  },
  {
    "text": "And the way we're going\nto frame that in the way we've been talking\nabout things is",
    "start": "3901070",
    "end": "3907190"
  },
  {
    "text": "that the language of\nall pairs of proof, comma statement being proved--",
    "start": "3907190",
    "end": "3913310"
  },
  {
    "text": "so where pi is a proof\nof the statement phi-- that's a decidable thing.",
    "start": "3913310",
    "end": "3918690"
  },
  {
    "text": "So you can check, by\nmachine, whether pi is a valid proof of phi.",
    "start": "3918690",
    "end": "3925010"
  },
  {
    "text": " So your proof checker can say,\nYes, it's valid, No, not valid.",
    "start": "3925010",
    "end": "3933790"
  },
  {
    "text": "And that's something\nyou can do by algorithm. So those are the two\nassumptions that we're",
    "start": "3933790",
    "end": "3939380"
  },
  {
    "text": "going to make about\nour system of proofs. And that's all\nwe're going to need. Now, the first\nconclusion, which is,",
    "start": "3939380",
    "end": "3946000"
  },
  {
    "text": "I think, a good sort of\na little bit of exercise on the kind of thinking we've\nbeen doing in this course.",
    "start": "3946000",
    "end": "3955059"
  },
  {
    "text": "Number 2, checkability\nimplies that the set of provable statements\nis recognizable.",
    "start": "3955060",
    "end": "3963900"
  },
  {
    "text": "Why? Suppose I give you a\nstatement that has a proof--",
    "start": "3963900",
    "end": "3969300"
  },
  {
    "text": "a provable statement. I'm not saying it's a true\nstatement, necessarily. That's going to be perhaps a\nlarger class of statements.",
    "start": "3969300",
    "end": "3978820"
  },
  {
    "text": "But the statement\nthat do have proofs, that's a recognizable language.",
    "start": "3978820",
    "end": "3983849"
  },
  {
    "text": " Because, if I give\nyou a statement,",
    "start": "3983850",
    "end": "3990800"
  },
  {
    "text": "your recognizer is going\nto take that statement and start looking through\nall possible proofs.",
    "start": "3990800",
    "end": "3998900"
  },
  {
    "text": "It's going to look at string\nafter string as a candidate proof, one after the next. Some strings, of course-- most\nstrings are going to be junk.",
    "start": "3998900",
    "end": "4006297"
  },
  {
    "text": "But every once in a while, a\nproof is going to come out. It's going to be a string which\nis a valid proof of something.",
    "start": "4006297",
    "end": "4012111"
  },
  {
    "text": "And then you're\ngoing to check, oh, let me just see if\nthat's a valid proof. And if it does prove the\nstatement that I have in mind,",
    "start": "4012112",
    "end": "4018070"
  },
  {
    "text": "and if it is, then I\naccept that statement. And it goes through\nstatement by--",
    "start": "4018070",
    "end": "4023130"
  },
  {
    "text": "the input is a\nmathematical statement. And that's going to be accepted\nif the machine, by looking",
    "start": "4023130",
    "end": "4029830"
  },
  {
    "text": "through all possible\nproofs, finds one and then it accepts\nthat statement. So the collection\nof all statements",
    "start": "4029830",
    "end": "4036039"
  },
  {
    "text": "that have a proof,\nthat's recognizable. ",
    "start": "4036040",
    "end": "4041340"
  },
  {
    "text": "So similarly, if you take\nstatements of the form",
    "start": "4041340",
    "end": "4049770"
  },
  {
    "text": "M and w is in the\ncomplement of ATM. So M doesn't accept w.",
    "start": "4049770",
    "end": "4056698"
  },
  {
    "text": " If you take all statements\nof that form where M doesn't",
    "start": "4056698",
    "end": "4063230"
  },
  {
    "text": "accept w, or M, w is in\nthe complement of ATM,",
    "start": "4063230",
    "end": "4069530"
  },
  {
    "text": "some of those statements may\nhave proofs in your system. Some of them may\nnot have proofs.",
    "start": "4069530",
    "end": "4075079"
  },
  {
    "text": "If all of them\nhad proofs, if you can prove every\nstatement of this form",
    "start": "4075080",
    "end": "4080270"
  },
  {
    "text": "when it happens to be true-- obviously, you can't prove\nthe ones that are not true. But if you can prove all the\ntrue statements of this kind,",
    "start": "4080270",
    "end": "4088370"
  },
  {
    "text": "then ATM complement would\nbe Turing-recognizable.",
    "start": "4088370",
    "end": "4093660"
  },
  {
    "text": "Because you can go through, just\nfor the same reason as above. But we know that that's false.",
    "start": "4093660",
    "end": "4100859"
  },
  {
    "text": "So there must be some\nstatement of this kind which is true but does not have a proof.",
    "start": "4100859",
    "end": "4108060"
  },
  {
    "text": "Because otherwise,\nthe ATM complement would be recognizable. ",
    "start": "4108060",
    "end": "4114660"
  },
  {
    "text": "So we've actually done the first\nhalf of Godel's incompleteness",
    "start": "4114660",
    "end": "4121470"
  },
  {
    "text": "theorem. The second half, which\nwe're going to unfortunately not have time to finish, but let\nme just give you the outline,",
    "start": "4121470",
    "end": "4128278"
  },
  {
    "text": "is that we can use the recursion\ntheorem to give it specific-- see, what we showed\nhere is that there",
    "start": "4128279",
    "end": "4133859"
  },
  {
    "text": "is some statement of this form\nwhich is true but unprovable. It doesn't exhibit\na particular one.",
    "start": "4133859",
    "end": "4139720"
  },
  {
    "text": "Now the recursion theorem allows\nyou to give a particular one. And the one, it\nbasically implements",
    "start": "4139720",
    "end": "4147778"
  },
  {
    "text": "Godel's so-called Godel\nstatement or Godel sense that says, \"This\nstatement is unprovable.\"",
    "start": "4147779",
    "end": "4155339"
  },
  {
    "text": "And you can formalize\nthat precisely.",
    "start": "4155340",
    "end": "4161949"
  },
  {
    "text": "And then that statement\nbecomes true but unprovable. Let's just say why that is.",
    "start": "4161950",
    "end": "4168318"
  },
  {
    "text": "Because if the\nstatement were false, suppose the\nstatement were false,",
    "start": "4168319",
    "end": "4175818"
  },
  {
    "text": "then, well, then it\nwould be provable. Because the truth says\nit's not provable.",
    "start": "4175819",
    "end": "4181989"
  },
  {
    "text": "But if the statement\nwere provable, then it had to be\ntrue, which would mean it would be unprovable.",
    "start": "4181990",
    "end": "4188040"
  },
  {
    "text": "So the only viable outcome\nhere is that the statement is unprovable.",
    "start": "4188040",
    "end": "4193799"
  },
  {
    "text": "And which is, it's\ntherefore that it's true",
    "start": "4193800",
    "end": "4199079"
  },
  {
    "text": "that it's unprovable. So that this is\na true statement, but then it has no proof. And let me not go through\nit because again, we're",
    "start": "4199080",
    "end": "4210110"
  },
  {
    "text": "unfortunately running\nshort on time. But you can implement this using\nthe recursion theorem to make",
    "start": "4210110",
    "end": "4218150"
  },
  {
    "text": "a particular machine, R, where\nyou cannot prove that R does",
    "start": "4218150",
    "end": "4225370"
  },
  {
    "text": "not accept, say, some string 0. ",
    "start": "4225370",
    "end": "4230730"
  },
  {
    "text": "So you can find a particular\nR using the recursion theorem, where it's\nimpossible to prove",
    "start": "4230730",
    "end": "4235769"
  },
  {
    "text": "that R doesn't accept 0. Even though, by construction,\nR does not accept 0.",
    "start": "4235770",
    "end": "4243150"
  },
  {
    "text": "So it's a little\nbit slippery there because you have\nto understand what we mean by proof within\nthe formal system versus our external\nform of reasoning,",
    "start": "4243150",
    "end": "4250949"
  },
  {
    "text": "but taking us a\nlittle bit far afield. So for those of you who care,\nI hope this little digression",
    "start": "4250950",
    "end": "4259140"
  },
  {
    "text": "was interesting. As I mentioned at the\nbeginning, for those of you who don't care, you\ndon't have to worry about it.",
    "start": "4259140",
    "end": "4264850"
  },
  {
    "text": "It's not going to be on the\nmidterm or on the final exam. You're not going to be\nresponsible for this last five minutes or so of the lecture.",
    "start": "4264850",
    "end": "4270840"
  },
  {
    "text": "But I thought it's kind of\nan interesting application of the recursion theorem to\na problem outside of computer",
    "start": "4270840",
    "end": "4277620"
  },
  {
    "text": "science in mathematical logic.  OK, so here is the entire\nreasoning here again.",
    "start": "4277620",
    "end": "4287440"
  },
  {
    "text": "I invite you to look\nat that on the slide that I posted if you're curious.",
    "start": "4287440",
    "end": "4295440"
  },
  {
    "text": "So anyway, a quick\nreview of today is, we went through\nself-reference and the recursion theorem.",
    "start": "4295440",
    "end": "4300690"
  },
  {
    "text": "We gave a few applications. And we did a sketch of Godel's\nfirst incompleteness theorem in mathematical logic.",
    "start": "4300690",
    "end": "4307457"
  },
  {
    "text": "OK, so that's all I'm going\nto have for you today. We're out of time. And I will take any questions.",
    "start": "4307457",
    "end": "4316950"
  },
  {
    "text": "So getting back to the MIN\nTuring machine example, somebody is asking,\nhow do I know there's a Turing machine that's\nlonger than the machine, R,",
    "start": "4316950",
    "end": "4323910"
  },
  {
    "text": "that I'm building? Well, there are infinitely\nmany machines in MIN TM or in the infinite\nsubset of MIN TM.",
    "start": "4323910",
    "end": "4329952"
  },
  {
    "text": "So eventually, one\nof them is going to have to be longer than the\nmachine that I'm constructing.",
    "start": "4329952",
    "end": "4335040"
  },
  {
    "text": "Because that's a machine\nof some very specific size,",
    "start": "4335040",
    "end": "4340915"
  },
  {
    "text": "and so eventually there's going\nto have to be one that's bigger that shows up. ",
    "start": "4340915",
    "end": "4353033"
  },
  {
    "text": "So this may be a\nsimilar question. ",
    "start": "4353033",
    "end": "4358710"
  },
  {
    "text": "Now, another similar question\nis about, how big is R? And does the size of R in\nthat previous thing here--",
    "start": "4358710",
    "end": "4367347"
  },
  {
    "text": "I don't know if we want\nto go through this. But, OK, let's\nquickly look at it.",
    "start": "4367348",
    "end": "4372590"
  },
  {
    "text": "This machine, R, has a\nfixed, predetermined size.",
    "start": "4372590",
    "end": "4378679"
  },
  {
    "text": "Its size does not depend on B. It depends on E because it's\ngoing to be simulating E.",
    "start": "4378680",
    "end": "4385520"
  },
  {
    "text": "But E might be producing\nvery, very long strings. Eventually, it will. So E is fixed.",
    "start": "4385520",
    "end": "4391400"
  },
  {
    "text": "And then, R's size is fixed.",
    "start": "4391400",
    "end": "4398520"
  },
  {
    "text": "So eventually, R\nwill find a machine that's bigger than it is.",
    "start": "4398520",
    "end": "4403739"
  },
  {
    "text": "But let's look at-- ",
    "start": "4403740",
    "end": "4409880"
  },
  {
    "text": "right, so this is\na good question. I was wondering if I would\nget questions of this kind. This is getting back to\nthe question in logic",
    "start": "4409880",
    "end": "4417170"
  },
  {
    "text": "here at the end. ",
    "start": "4417170",
    "end": "4425219"
  },
  {
    "text": "Yes, because I said this\nstatement here is unprovable. But in a sense, I proved it.",
    "start": "4425220",
    "end": "4431010"
  },
  {
    "text": "Because how do I know it's true? And I gave you an\nargument for it.",
    "start": "4431010",
    "end": "4437739"
  },
  {
    "text": "And so, you have\nto differentiate between the reasoning\nthat we're providing",
    "start": "4437740",
    "end": "4443789"
  },
  {
    "text": "and the formal system that\nwe're reasoning about. And the formal system\nthat we're reasoning about",
    "start": "4443790",
    "end": "4449880"
  },
  {
    "text": "is not capable of proving this. But we're outside\nthat formal system so that we can reason\nabout the formal system.",
    "start": "4449880",
    "end": "4456150"
  },
  {
    "text": "I know it's a little\nbit perverse seeming. And mathematical logic\nis a little tricky because it has to deal\nwith those kinds of issues.",
    "start": "4456150",
    "end": "4464610"
  },
  {
    "text": "But this is arguing within\nany particular formal system of probability, this\nis going to be true.",
    "start": "4464610",
    "end": "4473190"
  },
  {
    "text": "But that's kind of\nan approximation",
    "start": "4473190",
    "end": "4478920"
  },
  {
    "text": "to our own thought process. So it's slippery, I agree.",
    "start": "4478920",
    "end": "4484560"
  },
  {
    "start": "4484560",
    "end": "4492440"
  },
  {
    "text": "So, a good question here,\nwould Godel's theorem still hold informal systems where\nwe don't require that proofs",
    "start": "4492440",
    "end": "4498020"
  },
  {
    "text": "of statements are decidable? So I'm not saying that\nthe proofs are decidable. That you can--\nproofs are checkable.",
    "start": "4498020",
    "end": "4504050"
  },
  {
    "text": "So you can test whether\na proof is a proof. If you can't test whether\na proof is a proof,",
    "start": "4504050",
    "end": "4509570"
  },
  {
    "text": "I don't know of any people who\nhave studied that situation. So that's a little bit\nof a trickier case.",
    "start": "4509570",
    "end": "4518030"
  },
  {
    "text": "I'm not sure what\nto say about that. Can I give an example of two\nequivalent Turing machines",
    "start": "4518030",
    "end": "4525120"
  },
  {
    "text": "where one has a shorter\ndescription than the other? How do we define the\nlength of the description?",
    "start": "4525120",
    "end": "4532380"
  },
  {
    "text": "Well, we never really precisely\ndefined our encoding system.",
    "start": "4532380",
    "end": "4539940"
  },
  {
    "text": "But whatever encoding\nsystem you want to use, is going to represent\nTuring machines as strings.",
    "start": "4539940",
    "end": "4550329"
  },
  {
    "text": "And those strings are\ngoing to have a length. And so, it doesn't\nreally matter which encoding system you're going to\nuse because the statement isn't",
    "start": "4550330",
    "end": "4558540"
  },
  {
    "text": "going to be true in any of them. We could go through the\nexercise of defining a particular encoding system.",
    "start": "4558540",
    "end": "4563969"
  },
  {
    "text": "It's going to be pretty\ntedious to do that. But you can just imagine writing\ndown the states, the transition",
    "start": "4563970",
    "end": "4571500"
  },
  {
    "text": "function, et cetera, et cetera,\nas this big long string.",
    "start": "4571500",
    "end": "4577058"
  },
  {
    "text": "And that's going to be\nour encoding system. And then there are going\nto be some long machines. Some machines will have\nlong representations",
    "start": "4577058",
    "end": "4583890"
  },
  {
    "text": "and other machines that\nhave short representations. And there's going to\nbe some machine where",
    "start": "4583890",
    "end": "4590010"
  },
  {
    "text": "you can introduce a\nbunch of useless states that are never accessed. So you can expand--",
    "start": "4590010",
    "end": "4596550"
  },
  {
    "text": "you can kind of add\njunk to the description of the machine, which is\nnot going to do anything.",
    "start": "4596550",
    "end": "4602430"
  },
  {
    "text": "But it's just going to make\nthe description of the machine unnecessarily long\ncompared to what",
    "start": "4602430",
    "end": "4608190"
  },
  {
    "text": "with some other\ndescription, which is going to compute the same\nthing but will be much shorter.",
    "start": "4608190",
    "end": "4614199"
  },
  {
    "text": "So you can certainly\nfind examples of pairs of machines that\ndo the same thing where one",
    "start": "4614200",
    "end": "4621040"
  },
  {
    "text": "is much longer than the other.  So I will then close\nthe session here.",
    "start": "4621040",
    "end": "4628230"
  },
  {
    "text": "And I will be very shortly\non the office hours link",
    "start": "4628230",
    "end": "4635370"
  },
  {
    "text": "and see some of you there. ",
    "start": "4635370",
    "end": "4652000"
  }
]