[
  {
    "start": "0",
    "end": "394000"
  },
  {
    "text": " PROFESSOR: --we'll start off\nwith a little review, so you might chance it.",
    "start": "0",
    "end": "6090"
  },
  {
    "text": "We're in the middle of\nthe chapter nine on convolutional codes. Today, I intend to hand\nout problem set six.",
    "start": "6090",
    "end": "12840"
  },
  {
    "text": "I believe Ashish will have\nit when he gets here. And we'll hand it\nout at the end.",
    "start": "12840",
    "end": "19430"
  },
  {
    "text": "Last time, I introduced you\nto a lot of things about",
    "start": "19430",
    "end": "25010"
  },
  {
    "text": "convolutional codes and\ntheir encoders. I stressed that a convolutional\nencoder had two",
    "start": "25010",
    "end": "32560"
  },
  {
    "text": "distinct characters. One is it's a linear\ntime-invariant system. So we can use the linearity\nand time-invariance and",
    "start": "32560",
    "end": "41170"
  },
  {
    "text": "algebraic analysis of\nconvolutional codes. Secondly, I stressed that's it's\na finite state system,",
    "start": "41170",
    "end": "49270"
  },
  {
    "text": "because it's a finite memory\nsystem where each memory element has a finite number of\npossible values, over F2 or",
    "start": "49270",
    "end": "55629"
  },
  {
    "text": "indeed over any finite field. And therefore, we\ncan use that for different kinds of analysis.",
    "start": "55630",
    "end": "61920"
  },
  {
    "text": "We use that, for instance, in\nconjunction with linear property to find the minimum\ndistance to a particular code.",
    "start": "61920",
    "end": "68990"
  },
  {
    "text": "And we'll see that that's the\nkey to getting an efficient optimal maximum likelihood\ndecoder --",
    "start": "68990",
    "end": "76300"
  },
  {
    "text": "is the fact that we only have\na finite number of states in this system. All right, so along the way I\nkind of went all over the map,",
    "start": "76300",
    "end": "87970"
  },
  {
    "text": "as far as the introducing\nvarious algebraic quantities.",
    "start": "87970",
    "end": "93050"
  },
  {
    "text": "I focused particularly on\nformal Laurent series. And I want to just give you a\nlittle table to make sure you",
    "start": "93050",
    "end": "100940"
  },
  {
    "text": "have fixed in your mind what all\nthese different kinds of sequences we're talking\nabout are.",
    "start": "100940",
    "end": "106380"
  },
  {
    "text": "On the left side, I have\nLaurent sequences. These are semi-infinite\nsequences that must",
    "start": "106380",
    "end": "111930"
  },
  {
    "text": "start at some time. Their delay is not equal to\nminus infinity, which would be",
    "start": "111930",
    "end": "117409"
  },
  {
    "text": "if it were all 1's forever. But their delay is\nsome finite time. It could be negative,\ncould be positive.",
    "start": "117410",
    "end": "124020"
  },
  {
    "text": "That's their starting time. And then they could\ngo on, possibly, infinitely into the future.",
    "start": "124020",
    "end": "129298"
  },
  {
    "text": " And then, among those, we can\nlook particularly at the ones",
    "start": "129299",
    "end": "138500"
  },
  {
    "text": "that start at time 0 or later,\nwhose delay is 0, or whose delay is non-negative.",
    "start": "138500",
    "end": "144720"
  },
  {
    "text": "These are called the formal\npower series, and you've probably encountered\nthem earlier. They're a lot more frequently\nencountered",
    "start": "144720",
    "end": "151550"
  },
  {
    "text": "in mathematics algebra. The rational sequences are\nsimply those that can be",
    "start": "151550",
    "end": "159270"
  },
  {
    "text": "written in a very finite way as\na numerator polynomial over a denominator polynomial.",
    "start": "159270",
    "end": "164650"
  },
  {
    "text": "Because the formal Laurent\nseries form a field, every",
    "start": "164650",
    "end": "170239"
  },
  {
    "text": "element is invertible, and, in\nparticular, every polynomial has an inverse, which, unless\nthe polynomial is a monomial,",
    "start": "170240",
    "end": "179520"
  },
  {
    "text": "is going to run on for an\ninfinite length of time. But nonetheless, there is a\nsubset, a countable subset of",
    "start": "179520",
    "end": "185680"
  },
  {
    "text": "these sequences that we\ncan write in this way. And we call these the rational\nsequences, and they're",
    "start": "185680",
    "end": "191799"
  },
  {
    "text": "analogous to the rational\nnumbers in the real field. And their particular\ncharacteristic, as we showed,",
    "start": "191800",
    "end": "199780"
  },
  {
    "text": "is that they're eventually\nperiodic. And it's easy to see that these,\ntoo, form a field.",
    "start": "199780",
    "end": "206460"
  },
  {
    "text": "Obviously, the inverse of\nN of d over D of d is D of d over N of d. Provided that n of d is not\nequal to 0, the denominator is",
    "start": "206460",
    "end": "215220"
  },
  {
    "text": "always required to be non-zero\nfor a rational sequence.",
    "start": "215220",
    "end": "220580"
  },
  {
    "text": "So that's a very nice subset. It may or may not have\noperational meaning.",
    "start": "220580",
    "end": "229220"
  },
  {
    "text": "Certainly, when we're\ntalking about realizations, it has meaning. And then the finite sequences,\nby eventually periodic, I will",
    "start": "229220",
    "end": "237950"
  },
  {
    "text": "from now on include\nthe finite case. If we have a finite sequence,\nthen its end is all 0's, and",
    "start": "237950",
    "end": "245590"
  },
  {
    "text": "that's certainly a periodic\nsequence. So I would say a finite\nsequence is also eventually periodic.",
    "start": "245590",
    "end": "252420"
  },
  {
    "text": "But among the rational\nsequences we have, particularly the finite\nsequence, these do not form a",
    "start": "252420",
    "end": "258540"
  },
  {
    "text": "field, because the non-monomial\npolynomials cannot be inverted.",
    "start": "258540",
    "end": "263569"
  },
  {
    "text": "So these are merely a ring. However, D has an inverse. Over here on this side, D minus\n1 has an element of all",
    "start": "263570",
    "end": "272280"
  },
  {
    "text": "these things. D has an inverse. Over here, on the causal side,\nthese are the causal analogs",
    "start": "272280",
    "end": "279820"
  },
  {
    "text": "to all of these. In the case of causal rational,\nwe don't have",
    "start": "279820",
    "end": "286220"
  },
  {
    "text": "particularly good notation. We just say these are the ones\nthat are both causal, formal power series and rational.",
    "start": "286220",
    "end": "294060"
  },
  {
    "text": "But they are important, because\nwe've seen that it's this kind of sequence that you\ncan get as the impulse",
    "start": "294060",
    "end": "301700"
  },
  {
    "text": "response of a time-invariant\nlinear system that is",
    "start": "301700",
    "end": "308620"
  },
  {
    "text": "realizable. Realizable has two parts. One is the impulse response must\nstart at time 0 or later,",
    "start": "308620",
    "end": "315069"
  },
  {
    "text": "by physical causality. Two, the impulse response must\nbe eventually periodic,",
    "start": "315070",
    "end": "322740"
  },
  {
    "text": "therefore rational, if it's\ngoing to be realizable with a finite number of memory\nelements.",
    "start": "322740",
    "end": "327850"
  },
  {
    "text": "So we include that in our\ndefinition of realizability. So these are sometimes called\nthe realizable sequences, or",
    "start": "327850",
    "end": "334300"
  },
  {
    "text": "the realizable D transforms. And these, of course, the causal\nfinite sequences are",
    "start": "334300",
    "end": "340730"
  },
  {
    "text": "the polynomials. These include the polynomials,\nwhich are trivially easy to",
    "start": "340730",
    "end": "346260"
  },
  {
    "text": "realize with shift registers,\nas we saw in our example.",
    "start": "346260",
    "end": "353460"
  },
  {
    "text": "So that's just a review of\nall these quantities. Does anyone feel the need for\nfurther elaboration or",
    "start": "353460",
    "end": "360720"
  },
  {
    "text": "explanation? Or can we go forward\nwith this? We tend to use all of them as we\ngo along, so I want you to",
    "start": "360720",
    "end": "368070"
  },
  {
    "text": "have them clearly in mind. Yeah. AUDIENCE: Why was\nthe [INAUDIBLE] uncountable? What was the [INAUDIBLE]?",
    "start": "368070",
    "end": "374930"
  },
  {
    "text": "PROFESSOR: Why is that\nuncountable? Try to count it.",
    "start": "374930",
    "end": "380979"
  },
  {
    "text": "I could put it in one-to-one\ncorrespondence with a set of all binary expansions of the\nreal numbers, and that's an",
    "start": "380980",
    "end": "386289"
  },
  {
    "text": "uncountable set. ",
    "start": "386290",
    "end": "395610"
  },
  {
    "start": "394000",
    "end": "1050000"
  },
  {
    "text": "Some of these side comments are\njust to trigger analogies",
    "start": "395610",
    "end": "402930"
  },
  {
    "text": "in your mind, maybe make it more\nreasonable, what we're",
    "start": "402930",
    "end": "408009"
  },
  {
    "text": "talking about. OK, so next.",
    "start": "408010",
    "end": "413130"
  },
  {
    "text": "Just again, to continue a quick\nreview, we talked about",
    "start": "413130",
    "end": "422150"
  },
  {
    "text": "realizable linear time-invariant\nsystems.",
    "start": "422150",
    "end": "427895"
  },
  {
    "text": " First, we talked about single\ninput, single output.",
    "start": "427895",
    "end": "436805"
  },
  {
    "text": "I'm imposing an order that\ndidn't necessarily exist. ",
    "start": "436805",
    "end": "443650"
  },
  {
    "text": "In any case, these are\ncharacterized by impulse response, g of D, which, for\nrealizability, that implies",
    "start": "443650",
    "end": "464900"
  },
  {
    "text": "that g of D is causal\nrational. ",
    "start": "464900",
    "end": "473300"
  },
  {
    "text": "The fact that it's rational\nmeans that we can write g of D as n of D over d of D. And the\nfact that it's causal, well,",
    "start": "473300",
    "end": "484730"
  },
  {
    "text": "we would always reduce this to\nlowest terms in the first place, so there'd be no point\ncarrying along common factors",
    "start": "484730",
    "end": "491539"
  },
  {
    "text": "in the numerator and\ndenominator. By inserting enough powers of D,\nwe can make sure that both",
    "start": "491540",
    "end": "498270"
  },
  {
    "text": "of these are polynomials. So if n of D, d of D are --",
    "start": "498270",
    "end": "505810"
  },
  {
    "text": "we can ensure that they're\nactually polynomials, not just finite sequences.",
    "start": "505810",
    "end": "511230"
  },
  {
    "text": "And if it's going to be causal,\nthat means that we can always --",
    "start": "511230",
    "end": "517019"
  },
  {
    "text": "if we remove common factors\nof D, that means that the",
    "start": "517020",
    "end": "522909"
  },
  {
    "text": "numerator might still have\nfactors of D in it, but the denominator can't have\nfactors of D in it.",
    "start": "522909",
    "end": "528610"
  },
  {
    "text": "You see that? Because, once we shift all these\nover as close to 0 as we",
    "start": "528610",
    "end": "534360"
  },
  {
    "text": "can, the denominator has\nto be closer to 0. If D0 equals 1, that means 1\nover d of D is something that",
    "start": "534360",
    "end": "543420"
  },
  {
    "text": "starts at times 0. We multiply times\nthe numerator. In order to have the whole thing\nbe causal, the numerator",
    "start": "543420",
    "end": "550240"
  },
  {
    "text": "has to be causal, because a\npoint I didn't mention, when you multiply formal Laurent\nsequences, their delays add.",
    "start": "550240",
    "end": "556750"
  },
  {
    "text": " If a of D and b of D are\nLaurent, then the delay of a",
    "start": "556750",
    "end": "563399"
  },
  {
    "text": "of D times b of D, defined as a\nconvolution, is going to be",
    "start": "563400",
    "end": "569410"
  },
  {
    "text": "the sum of the delays of each\nof the component sequence. You just take the lower order\nterm on both and that's what determines the lower order term\non the convolution, just",
    "start": "569410",
    "end": "577020"
  },
  {
    "text": "like in polynomials and\nanalogous to degrees. So from this, we find that we\ncan always write a causal",
    "start": "577020",
    "end": "586350"
  },
  {
    "text": "rational sequence in this\nform, if it isn't 0. If it is 0, we just take n of D\nto be 0, and d of D to be 1.",
    "start": "586350",
    "end": "594630"
  },
  {
    "text": "And that satisfies\nthis form, too. ",
    "start": "594630",
    "end": "599950"
  },
  {
    "text": "I guess I didn't even have\nto make that comment. We're already in that form. ",
    "start": "599950",
    "end": "607649"
  },
  {
    "text": "You can convince yourself this\nis a unique way to write a causal rational sequence.",
    "start": "607650",
    "end": "615090"
  },
  {
    "text": "And every other way is just\nmultiplying the numerator and the denominator by some common\npolynomial or finite sequence.",
    "start": "615090",
    "end": "628030"
  },
  {
    "text": "So now we had a little theorem\nthat says that, if g of D is",
    "start": "628030",
    "end": "636100"
  },
  {
    "text": "causal rational, and therefore\nequal to n of D over d of D in",
    "start": "636100",
    "end": "645190"
  },
  {
    "text": "this form, then realizable with\nhow many memory elements?",
    "start": "645190",
    "end": "657242"
  },
  {
    "text": "Does anyone remember? nu equals the maximum\nof the degrees.",
    "start": "657242",
    "end": "664165"
  },
  {
    "start": "664165",
    "end": "670079"
  },
  {
    "text": "And I debated whether to\nactually do this in class, and I think it's worth taking a\nfew minutes to actually do",
    "start": "670080",
    "end": "677960"
  },
  {
    "text": "this in class. It'll also appear as the\nfirst homework problem.",
    "start": "677960",
    "end": "683050"
  },
  {
    "text": "So this'll be a little head\nstart on the homework. So anybody have any ideas how\nwe can do this realization?",
    "start": "683050",
    "end": "691290"
  },
  {
    "text": "What we want is a circuit with\nan input, u of D. Eventually, an output, y of D equals u of\nD times n of D over d of D.",
    "start": "691290",
    "end": "703220"
  },
  {
    "text": "For these are both polynomials\nand D0 equals 1. ",
    "start": "703220",
    "end": "711629"
  },
  {
    "text": "A lot of you have probably seen\nthis in discrete-time linear filters.",
    "start": "711630",
    "end": "717050"
  },
  {
    "text": "It's going to be just\nthe same technique.  But if we don't have volunteers,\nI don't want to",
    "start": "717050",
    "end": "723380"
  },
  {
    "text": "waste time. The key is to use -- we're of course going to need\nfeedback in general.",
    "start": "723380",
    "end": "729190"
  },
  {
    "text": "To have a d of D, in general,\nwill not be 1. If it's not 1, then we're\ngoing to get an infinite",
    "start": "729190",
    "end": "737600"
  },
  {
    "text": "impulse response. To get an infinite impulse\nresponse, we need feedback. So we're going to need some\nfeedback term in here.",
    "start": "737600",
    "end": "745019"
  },
  {
    "text": "And here is the motivating\nidea of the construction. We want to create something\nhere, v of D, which is",
    "start": "745020",
    "end": "752540"
  },
  {
    "text": "basically equal to u of D over\nd of D. If we can do that,",
    "start": "752540",
    "end": "758029"
  },
  {
    "text": "we'll be done. I'll show you why.",
    "start": "758030",
    "end": "763370"
  },
  {
    "text": "So we created a different\nsequence, which is u of D divided by d of D. And then we\npass that sequence through a",
    "start": "763370",
    "end": "769964"
  },
  {
    "text": "shift register. ",
    "start": "769965",
    "end": "778660"
  },
  {
    "text": "And what do we get at\nthe various stages of the shift register? Here we would get v of D delayed\nby one time unit, v of",
    "start": "778660",
    "end": "788807"
  },
  {
    "text": "D delayed by two time units,\nand so forth, up to -- let's make this nu.",
    "start": "788807",
    "end": "797209"
  },
  {
    "text": "I want to realize it in nu\nmemory elements, where nu is",
    "start": "797210",
    "end": "802600"
  },
  {
    "text": "the maximum degree of either of\nthese defining polynomials. So finally, out here, I\nget d nu of D, v of D.",
    "start": "802600",
    "end": "815700"
  },
  {
    "text": "Now, what's the trick? AUDIENCE: [INAUDIBLE]. PROFESSOR: Excuse me?",
    "start": "815700",
    "end": "821560"
  },
  {
    "text": "AUDIENCE: Because\n[UNINTELLIGIBLE PHRASE]. ",
    "start": "821560",
    "end": "828890"
  },
  {
    "text": "PROFESSOR: That is the idea. What do we get if we take out\nthese various lines, which are",
    "start": "828890",
    "end": "834420"
  },
  {
    "text": "v of D, through d to the nu v\nof D, and we make a linear combination of them?",
    "start": "834420",
    "end": "841640"
  },
  {
    "text": "We're going to do this twice,\nactually, once to form the feedback, and once to\nform the output.",
    "start": "841640",
    "end": "853420"
  },
  {
    "text": "For the feedback, let me not\ntake this into the linear combination.",
    "start": "853420",
    "end": "858910"
  },
  {
    "text": " Otherwise, I'd get a loop\nwithout a delay element in",
    "start": "858910",
    "end": "865960"
  },
  {
    "text": "that, and that tends not\nto be well-defined.  So I want to take a linear\ncombination.",
    "start": "865960",
    "end": "872560"
  },
  {
    "text": "In general, by taking a linear\ncombination of these things, I can get the multiple of v of D\ntimes any polynomial degree,",
    "start": "872560",
    "end": "882860"
  },
  {
    "text": "nu or less, just by taking\nthe coefficients of that",
    "start": "882860",
    "end": "889260"
  },
  {
    "text": "polynomial as my linear\ncombination. Do you see that?",
    "start": "889260",
    "end": "896154"
  },
  {
    "text": "I'm not seeing people's -- AUDIENCE: [INAUDIBLE]. ",
    "start": "896155",
    "end": "901270"
  },
  {
    "text": "PROFESSOR: Excuse me? AUDIENCE: In the linear\ncombination [UNINTELLIGIBLE PHRASE]",
    "start": "901270",
    "end": "906730"
  },
  {
    "text": "you also take the one with\nzero derivative. PROFESSOR: You're getting ahead\nof me, which is fine,",
    "start": "906730",
    "end": "916290"
  },
  {
    "text": "but I'll ask for that comment\nin just a second. Let me first create\nthe output.",
    "start": "916290",
    "end": "922640"
  },
  {
    "text": "Suppose I had v of D equals u of\nD over d of D. Then to get the output, I simply want a\nlinear combination, which will",
    "start": "922640",
    "end": "930440"
  },
  {
    "text": "give me n of D times u of D over\nd of D. And that would be",
    "start": "930440",
    "end": "940485"
  },
  {
    "text": "the correct output. And since n of D is a polynomial\ndegree less than nu, I can do that by simply\ntaking n nu times this, n nu",
    "start": "940485",
    "end": "949630"
  },
  {
    "text": "minus 1 times that, n2 times\nthat, n1 times that, and 0 times that.",
    "start": "949630",
    "end": "955450"
  },
  {
    "text": "And that will give me what I\nwant as an output, if I'm successful in getting v of\nD of this form here.",
    "start": "955450",
    "end": "962510"
  },
  {
    "text": " So let me try a similar\ntrick up here.",
    "start": "962510",
    "end": "970580"
  },
  {
    "text": "The trick is, I force d of D to\nstart off with a 1, to have",
    "start": "970580",
    "end": "976760"
  },
  {
    "text": "D0 equal 1. So what I'm going to create\nup here is the linear combination, d of D minus\n1 times v of D.",
    "start": "976760",
    "end": "989680"
  },
  {
    "text": "First of all, let's verify\nthat I can do that. d of D minus 1 is what?",
    "start": "989680",
    "end": "995560"
  },
  {
    "text": "It's a polynomial. Its degree is the same as the\ndegree of d of D. Now, if d of",
    "start": "995560",
    "end": "1002755"
  },
  {
    "text": "D is equal to 1, if the\ndenominator is just 1, this whole thing falls out. I don't need anything\ncoming in here.",
    "start": "1002755",
    "end": "1008620"
  },
  {
    "text": "d of D is 1. v of D is equal\nto u of D, so that's the polynomial case where I\ndon't need feedback.",
    "start": "1008620",
    "end": "1015850"
  },
  {
    "text": "So let's assume d of D is not\nequal 1, therefore it's some polynomial of degree nu, degree\nof d of D, which is",
    "start": "1015850",
    "end": "1025000"
  },
  {
    "text": "less than or equal to\nnu, and so is this.",
    "start": "1025000",
    "end": "1030790"
  },
  {
    "text": "But by subtracting out the 1,\nI have no constant term. So it's going to be a multiple\nof D. That's another way of",
    "start": "1030790",
    "end": "1038439"
  },
  {
    "text": "saying that. It's going to have no constant\nterms, so I only need to form a linear combination\nof these terms.",
    "start": "1038440",
    "end": "1045230"
  },
  {
    "text": "So I can do it.  Now, if I do that, let's just\nsolve this equation.",
    "start": "1045230",
    "end": "1053940"
  },
  {
    "text": "I create x of D. This is\nsupposed to be a plus. This is supposed to be a minus,\nto work over any field.",
    "start": "1053940",
    "end": "1060890"
  },
  {
    "text": "This trick works over real or\ncomplex, or what you'd like. x of D is u of d minus d of D\nminus 1, times v of d, times x",
    "start": "1060890",
    "end": "1078259"
  },
  {
    "text": "of D. Maybe I should just\ncall this v of d. Now I'm going to solve\nfor v of D.",
    "start": "1078260",
    "end": "1088600"
  },
  {
    "text": "So I actually have a v of D on\nboth sides of the equation. This results in u of D equal\nv of D times d of D. And",
    "start": "1088600",
    "end": "1102280"
  },
  {
    "text": "dividing both sides by d of D,\nI see that I succeeded in getting what I wanted. So this is a typical trick of\nrealizing a rational impulse",
    "start": "1102280",
    "end": "1112240"
  },
  {
    "text": "response by including a feedback\nloop and negative",
    "start": "1112240",
    "end": "1117570"
  },
  {
    "text": "feedback in your system. ",
    "start": "1117570",
    "end": "1122950"
  },
  {
    "text": "This is done in the notes. I'm surprised if you haven't\nseen this before. Maybe it's that people in\ncommunications don't take",
    "start": "1122950",
    "end": "1129610"
  },
  {
    "text": "circuits courses, or they don't\ntake digital signal processing courses. Most people look puzzled.",
    "start": "1129610",
    "end": "1135906"
  },
  {
    "text": "In any case, can you agree that,\nformally, I've shown that we get what we want here? So I've given a way of\nrealizing, given a causal",
    "start": "1135906",
    "end": "1149270"
  },
  {
    "text": "rational function, where nu is\ndefined is the maximum degree of these two polynomials.",
    "start": "1149270",
    "end": "1155510"
  },
  {
    "text": "There's a realization with\nnu memory elements. A little bit more work, we could\nprove that this is the",
    "start": "1155510",
    "end": "1161590"
  },
  {
    "text": "minimum possible number\nof memory elements for this system.",
    "start": "1161590",
    "end": "1167600"
  },
  {
    "text": "That gets into linear\nsystem theory. AUDIENCE: [INAUDIBLE]. ",
    "start": "1167600",
    "end": "1176020"
  },
  {
    "text": "PROFESSOR: I mean, what I want\nis down here, I want the sum of n_i times d to the i, v of D.\nSo the linear coefficients",
    "start": "1176020",
    "end": "1191510"
  },
  {
    "text": "are going to be these n_i. ",
    "start": "1191510",
    "end": "1198150"
  },
  {
    "text": "If I drew it out, I have\nn0 here, n1 here. So it's scalar linear\ncombination, over F2.",
    "start": "1198150",
    "end": "1206240"
  },
  {
    "start": "1206240",
    "end": "1213216"
  },
  {
    "text": "And what is that? v of D is common. That's just n of D times v\nof D. Same trick up here.",
    "start": "1213216",
    "end": "1221720"
  },
  {
    "text": " Is that what was puzzling\neverybody?",
    "start": "1221720",
    "end": "1227970"
  },
  {
    "text": "Think about it. What is a linear combination? Something that looks\nlike that.",
    "start": "1227970",
    "end": "1233170"
  },
  {
    "start": "1233170",
    "end": "1238880"
  },
  {
    "text": "The second part, let's\nnow talk about a",
    "start": "1238880",
    "end": "1246885"
  },
  {
    "start": "1240000",
    "end": "1300000"
  },
  {
    "text": "convolutional encoder. ",
    "start": "1246885",
    "end": "1255350"
  },
  {
    "text": "And we're just going to talk\nabout rate 1/n in this course.",
    "start": "1255350",
    "end": "1260990"
  },
  {
    "text": "So this is a single input. ",
    "start": "1260990",
    "end": "1267350"
  },
  {
    "text": "n output linear time\ninvariant system.",
    "start": "1267350",
    "end": "1273485"
  },
  {
    "text": " That's my definition, I guess,\nof what I mean by a",
    "start": "1273485",
    "end": "1281550"
  },
  {
    "text": "convolutional encoder. And when I say linear\ntime-invariant, I also want it",
    "start": "1281550",
    "end": "1287445"
  },
  {
    "text": "to be a realizable, in the two\nsenses that its impulse response is causal rational.",
    "start": "1287445",
    "end": "1293380"
  },
  {
    "text": " So [INAUDIBLE]",
    "start": "1293380",
    "end": "1299292"
  },
  {
    "text": "down. Now it's characterized by\nn-tuple of impulse responses.",
    "start": "1299292",
    "end": "1315549"
  },
  {
    "start": "1300000",
    "end": "1540000"
  },
  {
    "start": "1315550",
    "end": "1321790"
  },
  {
    "text": "So it's going to be sum g of D\nequal to g1 of D, up to gn of",
    "start": "1321790",
    "end": "1331300"
  },
  {
    "text": "D, where clearly all these have\nto be causal and rational",
    "start": "1331300",
    "end": "1339350"
  },
  {
    "text": "in order for it to\nbe realizable. If any one of them was not\ncausal or not rational, then that individual impulse\nresponse wouldn't be",
    "start": "1339350",
    "end": "1346110"
  },
  {
    "text": "realizable and the whole thing\nwouldn't be realizable. So where we have the gj of D\nare all causal rational.",
    "start": "1346110",
    "end": "1355330"
  },
  {
    "start": "1355330",
    "end": "1363159"
  },
  {
    "text": "And now, again, I'm going to put\nthis into a standard form.",
    "start": "1363160",
    "end": "1368760"
  },
  {
    "text": "In general, this is going to\nbe n1 of D over d1 of D, so",
    "start": "1368760",
    "end": "1376480"
  },
  {
    "text": "forth, up to n_n of D over d_n\nof D. So I'm going to have",
    "start": "1376480",
    "end": "1382730"
  },
  {
    "text": "different denominators for\neach of the numerators.",
    "start": "1382730",
    "end": "1388070"
  },
  {
    "text": "But I can always put it into the\nform, n1 prime of D over a",
    "start": "1388070",
    "end": "1396360"
  },
  {
    "text": "common numerator, d to D, and up\nto n_n prime of D over d of",
    "start": "1396360",
    "end": "1405495"
  },
  {
    "text": "D. Let d of D be the least\ncommon multiple of all these d_i's.",
    "start": "1405495",
    "end": "1411890"
  },
  {
    "text": "These are all polynomials. Least common multiple is\nwell-defined from our discussion of factorization.",
    "start": "1411890",
    "end": "1417630"
  },
  {
    "text": "So I can always put in the least\ncommon multiple here, and then whatever d1 lacks out\nof the least common multiple,",
    "start": "1417630",
    "end": "1424410"
  },
  {
    "text": "I multiply top and bottom\nby both of that. I have the same rational\nfunction, now with a common",
    "start": "1424410",
    "end": "1430300"
  },
  {
    "text": "denominator. So I'm always going to put\nit in that standard form.",
    "start": "1430300",
    "end": "1436670"
  },
  {
    "text": "And then I will say this is\nalways realizable, with nu",
    "start": "1436670",
    "end": "1453520"
  },
  {
    "text": "equal now the max of\nany of the degrees that appears in here. So let me just abbreviate that\nby degree of the numerators,",
    "start": "1453520",
    "end": "1464870"
  },
  {
    "text": "which I'll just write as vector\nn prime of D, or the degree of the denominator d, of\nthe common denominator d of",
    "start": "1464870",
    "end": "1471505"
  },
  {
    "text": "D. Now, that's very\neasy to see.",
    "start": "1471505",
    "end": "1476540"
  },
  {
    "text": " Why is that? ",
    "start": "1476540",
    "end": "1483299"
  },
  {
    "text": "Can certainly realize\nthe first one here just by doing that. ",
    "start": "1483300",
    "end": "1490299"
  },
  {
    "text": "Yes? If I want to just generate the\nfirst output, I build a",
    "start": "1490300",
    "end": "1496540"
  },
  {
    "text": "circuit like this, and\nI don't need more of the new memory elements. There might even be some\nredundancy in that.",
    "start": "1496540",
    "end": "1502990"
  },
  {
    "text": " All right, so how would I\nthen realize the second?",
    "start": "1502990",
    "end": "1509095"
  },
  {
    "start": "1509095",
    "end": "1515549"
  },
  {
    "text": "Is it just me? Nobody is volunteering\nanything. ",
    "start": "1515550",
    "end": "1523400"
  },
  {
    "text": "I've realized this. Now I'd like to realize\na second output.",
    "start": "1523400",
    "end": "1529260"
  },
  {
    "text": "Now I want to realize this. Make this n1 of D. I want to\nrealize n2 of D over d of D,",
    "start": "1529260",
    "end": "1536759"
  },
  {
    "text": "times u of D. AUDIENCE: [INAUDIBLE]. ",
    "start": "1536760",
    "end": "1543960"
  },
  {
    "start": "1540000",
    "end": "1725000"
  },
  {
    "text": "PROFESSOR: Thank you so much. AUDIENCE: Just take out\n[UNINTELLIGIBLE]. PROFESSOR: All right. So all I need is the second\nlinear combination.",
    "start": "1543960",
    "end": "1551870"
  },
  {
    "text": "So let me just make this\nn linear combinations.",
    "start": "1551870",
    "end": "1557090"
  },
  {
    "text": "Then we're going to\nhave n outputs, an n-tuple of outputs.",
    "start": "1557090",
    "end": "1562140"
  },
  {
    "text": "Then I can form each\none as a linear combination of those up there. ",
    "start": "1562140",
    "end": "1571150"
  },
  {
    "text": "I really like more of you\nto be speaking up. Yes, thank you. AUDIENCE: [INAUDIBLE]. PROFESSOR: Excuse me?",
    "start": "1571150",
    "end": "1576290"
  },
  {
    "text": "AUDIENCE: There's a second\ncombination -- I mean the inquiry should\ncome [UNINTELLIGIBLE]. PROFESSOR: Yeah, but again, what\nI want to realize, I have",
    "start": "1576290",
    "end": "1584680"
  },
  {
    "text": "all the delays of\nv of D up here. What I want to realize is n2\nof D times v of D, which is",
    "start": "1584680",
    "end": "1592750"
  },
  {
    "text": "equal to that. n2 of D is the polynomial\nof degree less than or equal to nu.",
    "start": "1592750",
    "end": "1598639"
  },
  {
    "text": "So I can do it. AUDIENCE: Yeah, but\n[UNINTELLIGIBLE PHRASE] parallel to that n1 D over d.",
    "start": "1598640",
    "end": "1604630"
  },
  {
    "text": "The -- [INTERPOSING VOICES] PROFESSOR: Yeah, OK. I'm confusing you because\nI put all these here.",
    "start": "1604630",
    "end": "1610800"
  },
  {
    "text": "I actually wrote out the\nlinear combination. To say what I just said, I\nreally need to go back to my",
    "start": "1610800",
    "end": "1618160"
  },
  {
    "text": "original form, forget these\nmultipliers, do the multiplications in here. That's what I mean by the\nlinear combinations.",
    "start": "1618160",
    "end": "1626110"
  },
  {
    "text": "Now I'm OK. The inputs are just\nthe shifts. Make a linear combination of\nthem, that's the output.",
    "start": "1626110",
    "end": "1632289"
  },
  {
    "start": "1632289",
    "end": "1637450"
  },
  {
    "text": "So easy proof. What's significantly harder to\nprove in this case is you",
    "start": "1637450",
    "end": "1644090"
  },
  {
    "text": "can't do any better than. There aren't any realizations\nwith fewer than nu, where nu",
    "start": "1644090",
    "end": "1649890"
  },
  {
    "text": "is computed by first reducing\nto standard form and then evaluating this.",
    "start": "1649890",
    "end": "1655600"
  },
  {
    "text": "That's the best you can do. But we aren't going to go into\nminimal system realizations,",
    "start": "1655600",
    "end": "1662390"
  },
  {
    "text": "linear system realizations\nin this course. I'll just insert it. ",
    "start": "1662390",
    "end": "1668190"
  },
  {
    "text": "So this is how we can always\nbuild a convolutional encoder,",
    "start": "1668190",
    "end": "1673200"
  },
  {
    "text": "whether it has feedback\nor not. And so whatever we come up with\nas nu, this'll basically",
    "start": "1673200",
    "end": "1680360"
  },
  {
    "text": "determine the state complexity\nof our decoder. The state space is dimension\nnu, is finite dimension.",
    "start": "1680360",
    "end": "1688670"
  },
  {
    "text": "And because we're over a finite\nfield, the actual number of states is\nonly 2 to the nu.",
    "start": "1688670",
    "end": "1696920"
  },
  {
    "text": "Still can't get more than\n2 to the nu states for that system up there.",
    "start": "1696920",
    "end": "1702309"
  },
  {
    "text": "So we're still in finite\nstate world. So in particular, it's finite\nstate realization.",
    "start": "1702310",
    "end": "1710940"
  },
  {
    "text": "And again, this is\nif and only if. If we have if and only if, we\nhave an n-tuple of causal",
    "start": "1710940",
    "end": "1716120"
  },
  {
    "text": "rational, or even a matrix\nof causal rationals. We can make a realization\nlike this.",
    "start": "1716120",
    "end": "1723030"
  },
  {
    "text": " So that's convolutional\nencoders.",
    "start": "1723030",
    "end": "1728575"
  },
  {
    "start": "1725000",
    "end": "1860000"
  },
  {
    "text": "At least write 1/n over F2. And now the next step was what's\na convolutional code.",
    "start": "1728575",
    "end": "1737010"
  },
  {
    "start": "1737010",
    "end": "1742510"
  },
  {
    "text": "And a convolutional code,\nwe defined as, given a",
    "start": "1742510",
    "end": "1748330"
  },
  {
    "text": "convolutional encoder, which\nis just the set of impulse",
    "start": "1748330",
    "end": "1753630"
  },
  {
    "text": "response, given g of D, the\ncorresponding convolutional",
    "start": "1753630",
    "end": "1759330"
  },
  {
    "text": "code is just u of D, which is\nsingle sequence times this",
    "start": "1759330",
    "end": "1765179"
  },
  {
    "text": "n-tuple of sequences, as u of\nD ranges through all the",
    "start": "1765180",
    "end": "1770410"
  },
  {
    "text": "formal Laurent sequences. ",
    "start": "1770410",
    "end": "1777550"
  },
  {
    "text": "Sequences that start at some\ntime in the all-zero state and then continue perhaps forever.",
    "start": "1777550",
    "end": "1785059"
  },
  {
    "text": "It's very quick to\nshow that C, its",
    "start": "1785060",
    "end": "1790660"
  },
  {
    "text": "properties is it's linear. Obviously, it's a vector\nspace over F2.",
    "start": "1790660",
    "end": "1797440"
  },
  {
    "text": "Multiplication by scalars\nis trivial. Addition is trivial,\nso it's linear.",
    "start": "1797440",
    "end": "1804300"
  },
  {
    "text": "And its time-invariant, meaning\nthe shift of any code",
    "start": "1804300",
    "end": "1812700"
  },
  {
    "text": "sequence is another\ncode sequence. If I have one particular code\nsequence, and I want to see if",
    "start": "1812700",
    "end": "1822040"
  },
  {
    "text": "the shift of that is in the\ncode, well, that code sequence must have been generated by some\nuse, so if I just shift",
    "start": "1822040",
    "end": "1828610"
  },
  {
    "text": "the u by the amount of time\nthat I want to shift the output, y, then I'll get\nthe shifted output.",
    "start": "1828610",
    "end": "1836800"
  },
  {
    "text": "So it's easy to show that D to\nthe k of C is simply equal to",
    "start": "1836800",
    "end": "1843980"
  },
  {
    "text": "C for any integer k.",
    "start": "1843980",
    "end": "1851510"
  },
  {
    "text": "Actually, it just suffices to\nshow that the single time unit shift is in the code, and that\nimplies all the rest of this.",
    "start": "1851510",
    "end": "1857716"
  },
  {
    "text": " Yes? AUDIENCE: [UNINTELLIGIBLE].",
    "start": "1857717",
    "end": "1863140"
  },
  {
    "text": " We would want at least one of\nthe g_i of D's to start at 0.",
    "start": "1863140",
    "end": "1870276"
  },
  {
    "text": "Otherwise, they don't\ncancel out, do they? PROFESSOR: Right. ",
    "start": "1870276",
    "end": "1877530"
  },
  {
    "text": "So what you're saying is we\ndon't want d to be a common factor of all the n of D's.",
    "start": "1877530",
    "end": "1884890"
  },
  {
    "text": "And that's true. In fact, we don't want to have\nany common factors of all the n of D's.",
    "start": "1884890",
    "end": "1890030"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE]. ",
    "start": "1890030",
    "end": "1897540"
  },
  {
    "text": "PROFESSOR: The u we've\ndefined, so it can start at any time. AUDIENCE: [INAUDIBLE].",
    "start": "1897540",
    "end": "1903790"
  },
  {
    "text": "PROFESSOR: So notice that these\nhave separate algebraic characters. This is a Laurent sequence.",
    "start": "1903790",
    "end": "1911800"
  },
  {
    "text": "These are called causal\nrational sequences. So they have different\nrestrictions on them, but they",
    "start": "1911800",
    "end": "1918040"
  },
  {
    "text": "play together that way. ",
    "start": "1918040",
    "end": "1924940"
  },
  {
    "start": "1920000",
    "end": "2120000"
  },
  {
    "text": "So where you're getting to is\nthis idea of code equivalence. ",
    "start": "1924940",
    "end": "1932850"
  },
  {
    "text": "I can just keep going.  So code equivalence, let's\nabbreviate it this way.",
    "start": "1932850",
    "end": "1953600"
  },
  {
    "text": "g of D and some other n-tuple,\ng prime of D,",
    "start": "1953600",
    "end": "1960520"
  },
  {
    "text": "generate the same code. We say that g of D generates\nC up here.",
    "start": "1960520",
    "end": "1965865"
  },
  {
    "text": " So two different n-tuples\ngenerate the same code, C,",
    "start": "1965865",
    "end": "1977790"
  },
  {
    "text": "which is our notion\nof equivalence. ",
    "start": "1977790",
    "end": "1983690"
  },
  {
    "text": "And we more or less proved last\ntime it is true that g of",
    "start": "1983690",
    "end": "1990179"
  },
  {
    "text": "D is some -- this is just a single sequence\nmultiple of g prime of D. So",
    "start": "1990180",
    "end": "2002270"
  },
  {
    "text": "we have to have a of\nD not equal to 0. Otherwise, I think there could\nbe any sequence there.",
    "start": "2002270",
    "end": "2009810"
  },
  {
    "text": "So what you were saying is that,\nif all of these n's had",
    "start": "2009810",
    "end": "2014830"
  },
  {
    "text": "a common factor of d, then why\nnot just shift them all over? And that would be the same\nas multiplying --",
    "start": "2014830",
    "end": "2021799"
  },
  {
    "text": "suppose we had a g prime of\nD where they all had d's. Suppose we just multiply\nthem with d minus 1. We're still going to get the\nsame code, but we're going to",
    "start": "2021800",
    "end": "2029370"
  },
  {
    "text": "reduce the degrees of\nall the numerators. And therefore, we're likely to\nget a simpler realization.",
    "start": "2029370",
    "end": "2036970"
  },
  {
    "text": "And that's the track we're\ngoing down right now. AUDIENCE: [INAUDIBLE]. ",
    "start": "2036970",
    "end": "2045090"
  },
  {
    "text": "PROFESSOR: This would\nonly shift the n's. ",
    "start": "2045090",
    "end": "2050649"
  },
  {
    "text": "I'm assuming that all the n\nof D's are multiples of d. AUDIENCE: [INAUDIBLE]",
    "start": "2050650",
    "end": "2057590"
  },
  {
    "text": "the root of d, right? So if you can reduce the d of\nD you can't save anything.",
    "start": "2057590",
    "end": "2063899"
  },
  {
    "text": "PROFESSOR: You might not save\nanything if you've got a denominator, d of D, that\nhas a larger degree.",
    "start": "2063900",
    "end": "2069245"
  },
  {
    "text": "AUDIENCE: And that's\nalways the case. PROFESSOR: No, it's not\nalways the case. In the general case,\neither one of",
    "start": "2069245",
    "end": "2075250"
  },
  {
    "text": "these things can dominate. In that picture we had, if we\nhave a low degree, d of D,",
    "start": "2075250",
    "end": "2084469"
  },
  {
    "text": "then it's only picking off of\nthese first elements up here. AUDIENCE: But that definition\nstates [UNINTELLIGIBLE]",
    "start": "2084469",
    "end": "2090532"
  },
  {
    "text": "is the maximum d and also\nthe [UNINTELLIGIBLE]. PROFESSOR: Right. So we could have a big one here\nmaking the outputs, and a",
    "start": "2090532",
    "end": "2096870"
  },
  {
    "text": "small one there going back. In fact, we could have\nd of D equal to 1. Then we'd have no feedback\nwhatsoever.",
    "start": "2096870",
    "end": "2104650"
  },
  {
    "text": "So it could be either way. But then given this code\nequivalence concept, suppose",
    "start": "2104650",
    "end": "2112250"
  },
  {
    "text": "we have a d of D that\nis very big. Suppose it's dominated by\nd of D. What would be a",
    "start": "2112250",
    "end": "2117800"
  },
  {
    "text": "good thing to do? ",
    "start": "2117800",
    "end": "2124610"
  },
  {
    "text": "We have a certain code we want\nto keep, but the nu, the numbers for the dimension of the\nstate space is dominated",
    "start": "2124610",
    "end": "2131539"
  },
  {
    "text": "by the degree of d of D. So\nsuppose we have g of D equal",
    "start": "2131540",
    "end": "2140860"
  },
  {
    "text": "to n of D over d of D. And we\nhave degree of d of D is",
    "start": "2140860",
    "end": "2150660"
  },
  {
    "text": "greater than degree of n\nof D. What would be a",
    "start": "2150660",
    "end": "2155750"
  },
  {
    "text": "good thing to do? ",
    "start": "2155750",
    "end": "2162120"
  },
  {
    "text": "Why don't we just let g prime of\nD be equal to d of D times",
    "start": "2162120",
    "end": "2169720"
  },
  {
    "text": "g of D, and that would\nbe just n of D.",
    "start": "2169720",
    "end": "2179950"
  },
  {
    "text": "So I'm going to convert from\nthe code generated by these",
    "start": "2179950",
    "end": "2187240"
  },
  {
    "text": "rational generators,\nwhich are infinite. I can easily just multiply out\nthe denominator, and now I",
    "start": "2187240",
    "end": "2194880"
  },
  {
    "text": "have a code generated just\nby the numerator terms.",
    "start": "2194880",
    "end": "2199900"
  },
  {
    "text": "So it's feedback-free.  That may or may not be\nimportant to me.",
    "start": "2199900",
    "end": "2206950"
  },
  {
    "text": "Actually, it turns out it's very\nhard to make a case for",
    "start": "2206950",
    "end": "2212410"
  },
  {
    "text": "not having feedback, but it's\nsimpler, in any case. We don't have this feedback\nterm in the encoders.",
    "start": "2212410",
    "end": "2219809"
  },
  {
    "text": "So we get a feedback-free\nencoder. And if this is true,\nwe may reduce --",
    "start": "2219810",
    "end": "2226525"
  },
  {
    "text": " we can certainly never\nincrease it. ",
    "start": "2226525",
    "end": "2233890"
  },
  {
    "text": "But if this were true, then\nwe would reduce it. If on the other hand, this were\nless than or equal, then",
    "start": "2233890",
    "end": "2240280"
  },
  {
    "text": "nu would remain the same. So that seems like that would\nbe a good thing to do. ",
    "start": "2240280",
    "end": "2248540"
  },
  {
    "text": "So in fact, as I would advocate\nas a first step, that",
    "start": "2248540",
    "end": "2254910"
  },
  {
    "text": "you clear the denominators,\nand just come up with a polynomial generator sequence\nwhich generates the same code.",
    "start": "2254910",
    "end": "2263410"
  },
  {
    "text": "We're still going to have the\nsame minimum distance, the same code sequence, the problem\nfrom the decoder's point of view is going to\nbe absolutely unchanged.",
    "start": "2263410",
    "end": "2270035"
  },
  {
    "text": "The decoder only cares what\nthe consequences are. It wants to find the most\nlikely one that was transmitted.",
    "start": "2270035",
    "end": "2275710"
  },
  {
    "text": "So let's not make the encoder\nany more complicated than we have to.",
    "start": "2275710",
    "end": "2281596"
  },
  {
    "text": "AUDIENCE:\n[UNINTELLIGIBLE PHRASE] ",
    "start": "2281596",
    "end": "2293060"
  },
  {
    "text": "PROFESSOR: nu doesn't change\nin this condition. nu does change in\nthis condition.",
    "start": "2293060",
    "end": "2298805"
  },
  {
    "text": "AUDIENCE: So we are always\nbetter off multiplying by g of D. PROFESSOR: We can't\nbe worse off. [INTERPOSING VOICES] AUDIENCE: --or the same.",
    "start": "2298805",
    "end": "2305040"
  },
  {
    "text": "PROFESSOR: Exactly. Got it. All right, so let's now talk\nabout whether there's anything",
    "start": "2305040",
    "end": "2314630"
  },
  {
    "text": "we can do to n of D. We already\nsuggested that if all the n of D had a factor of\nd in them, why don't",
    "start": "2314630",
    "end": "2322610"
  },
  {
    "text": "just take it out? ",
    "start": "2322610",
    "end": "2327870"
  },
  {
    "text": "Let's just write that down. If all n of D have a factor of\nd, then let's just transform n",
    "start": "2327870",
    "end": "2343510"
  },
  {
    "text": "of D to d minus 1 n of D.",
    "start": "2343510",
    "end": "2349680"
  },
  {
    "text": "So that reduces nu also. ",
    "start": "2349680",
    "end": "2355360"
  },
  {
    "text": "And let's, of course, do that\nas many times as we can. So it's a good idea to take\nout common factors of d.",
    "start": "2355360",
    "end": "2363059"
  },
  {
    "text": "We get a simpler encoder. We're have a simpler\nstate diagram. ",
    "start": "2363060",
    "end": "2370010"
  },
  {
    "start": "2370000",
    "end": "2575000"
  },
  {
    "text": "This leads us to a topic called\ncatastrophicity, which",
    "start": "2370010",
    "end": "2378710"
  },
  {
    "text": "is a misleading title because\nyou have no idea where I'm going right now. So I'm actually going\nto try to fool you",
    "start": "2378710",
    "end": "2385340"
  },
  {
    "text": "for a little while. Yes? AUDIENCE: Quick question. In the definition of code\nequivalence, is there a",
    "start": "2385340",
    "end": "2391320"
  },
  {
    "text": "restriction [UNINTELLIGIBLE] that shouldn't be rational,\nshouldn't be causal?",
    "start": "2391320",
    "end": "2397460"
  },
  {
    "text": "PROFESSOR: Should there be\na restriction on this? Yes, of course.",
    "start": "2397460",
    "end": "2402480"
  },
  {
    "text": "It has to be rational\nin order -- ",
    "start": "2402480",
    "end": "2408470"
  },
  {
    "text": "But that's a consequence. If these are both causal\nrational, then what does a of",
    "start": "2408470",
    "end": "2413930"
  },
  {
    "text": "D have to be? It has to be rational. It has to be non-zero.",
    "start": "2413930",
    "end": "2419320"
  },
  {
    "text": "And does it have to be causal? No, in this case it's\nnot causal.",
    "start": "2419320",
    "end": "2425620"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "2425620",
    "end": "2431310"
  },
  {
    "text": "PROFESSOR: That's right. If there's a delay buried in g\nof D, if everything starts at",
    "start": "2431310",
    "end": "2437960"
  },
  {
    "text": "time 1 or later, then a of D,\nin fact, can be non-causal. So the key restrictions are that\nthese two guys have to be",
    "start": "2437960",
    "end": "2445190"
  },
  {
    "text": "causal rational. And that will tell you\nrestrictions on a.",
    "start": "2445190",
    "end": "2452450"
  },
  {
    "text": "Let me introduce this\nby example. And I'll warn you that\nI'm going to try to fool you for a while.",
    "start": "2452450",
    "end": "2458940"
  },
  {
    "text": "Let's just take a rate\n1/1 encoder. This may seem a little peculiar\nto you, because it",
    "start": "2458940",
    "end": "2469059"
  },
  {
    "text": "has no redundancy, one\ninput, one output. And I'm going to let g of\nD just be 1 plus d.",
    "start": "2469060",
    "end": "2478299"
  },
  {
    "text": " So what do I mean?",
    "start": "2478300",
    "end": "2483380"
  },
  {
    "text": "I'm going to try to get some\nmileage out of this encoder. ",
    "start": "2483380",
    "end": "2489146"
  },
  {
    "text": "Here's u of D. Here's y of D,\nequals 1 plus d times u of D.",
    "start": "2489146",
    "end": "2503710"
  },
  {
    "text": "Now let's draw the state diagram\nfor this encoder. It's only got two states.",
    "start": "2503710",
    "end": "2510730"
  },
  {
    "text": "One is 0. If we get a 0 in, we of\ncourse put a 0 out.",
    "start": "2510730",
    "end": "2516420"
  },
  {
    "text": "We get 0, 0. Or we could get a 1 in. In which case, we would\nget a 1 out.",
    "start": "2516420",
    "end": "2523390"
  },
  {
    "text": "Sorry, that was just\na single output. And go to 1. If we're in the 1 state,\nand we get a 0 in,",
    "start": "2523390",
    "end": "2537000"
  },
  {
    "text": "then we get a 1 out. Whereas if we get a 1 in, then\nthey're both 0, and we get the",
    "start": "2537000",
    "end": "2542990"
  },
  {
    "text": "complement. So with the 1, we get a 0 out. So that's the state transition\ndiagram of this encoder.",
    "start": "2542990",
    "end": "2550180"
  },
  {
    "start": "2550180",
    "end": "2556500"
  },
  {
    "text": "Now, let's go through a similar\nkind of argument to what we went through to find\nthe minimum distance was 5. This is a linear system, so we\nwant to find the minimum",
    "start": "2556500",
    "end": "2565170"
  },
  {
    "text": "non-zero weight of\nany code word. And here's my argument.",
    "start": "2565170",
    "end": "2571720"
  },
  {
    "text": "There's a gold star to the first\nperson who punches a hole in it. Any code word, you have to\nstart in the 0 state, so",
    "start": "2571720",
    "end": "2581559"
  },
  {
    "start": "2575000",
    "end": "3600000"
  },
  {
    "text": "you're always going to get at\nleast one unit of distance when you go to the 1 state.",
    "start": "2581560",
    "end": "2587119"
  },
  {
    "text": "You can stay out here as long\nas you like, but eventually you have to come back\nto the 0 state.",
    "start": "2587120",
    "end": "2594550"
  },
  {
    "text": "And at that point, you're\ngoing to get another unit of distance. So I claim the minimum\nnon-zero weight is 2.",
    "start": "2594550",
    "end": "2605360"
  },
  {
    "start": "2605360",
    "end": "2613328"
  },
  {
    "text": "Is that correct? ",
    "start": "2613328",
    "end": "2619869"
  },
  {
    "text": "Let me try to create\nsome doubt. What is the code here? The code is the set of all\nmultiples of 1 plus d times u",
    "start": "2619870",
    "end": "2631619"
  },
  {
    "text": "of D, where u of D is a formal\nLaurent sequence.",
    "start": "2631620",
    "end": "2638335"
  },
  {
    "text": " What is that?",
    "start": "2638335",
    "end": "2644420"
  },
  {
    "text": "I can write this briefly as\njust the set of all formal Laurent sequences\ntimes 1 plus d.",
    "start": "2644420",
    "end": "2650330"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] 1 minus d minus d squared.",
    "start": "2650330",
    "end": "2659160"
  },
  {
    "text": "PROFESSOR: Good.  That's correct.",
    "start": "2659160",
    "end": "2664260"
  },
  {
    "text": "That's what's wrong\nwith my claim. Let me detour around here.",
    "start": "2664260",
    "end": "2671099"
  },
  {
    "text": "Let me get an answer\nto this question. What is the code in this case? It's the set of all possible\nsequences you can get by",
    "start": "2671100",
    "end": "2679180"
  },
  {
    "text": "multiplying 1 plus d times the\nformal Laurent sequence. What is that? AUDIENCE: [INAUDIBLE].",
    "start": "2679180",
    "end": "2684904"
  },
  {
    "text": "PROFESSOR: What? AUDIENCE: Isn't it\n[UNINTELLIGIBLE]? PROFESSOR: It's just\nthe set of all formal Laurent sequences. ",
    "start": "2684904",
    "end": "2691430"
  },
  {
    "text": "Certainly for every formal\nLaurent sequence, I can get",
    "start": "2691430",
    "end": "2697190"
  },
  {
    "text": "such a sequence this way. In particular, the\ncode includes 1.",
    "start": "2697190",
    "end": "2705299"
  },
  {
    "text": "What do I need as an input to\nget the output sequence 1?",
    "start": "2705300",
    "end": "2710730"
  },
  {
    "text": "AUDIENCE: String of 1's. PROFESSOR: String\nof 1's, right. So an example, if u of D is\nequal to 1/1 plus d, which is",
    "start": "2710730",
    "end": "2724760"
  },
  {
    "text": "a string of 1's, then y of D is\nequal to 1 plus d times u",
    "start": "2724760",
    "end": "2737910"
  },
  {
    "text": "of D, which is 1. 1 plus d has an inverse,\nand this is it.",
    "start": "2737910",
    "end": "2744190"
  },
  {
    "text": " So now we're coming back to\nMr. Aggarwal's point.",
    "start": "2744190",
    "end": "2754170"
  },
  {
    "text": "Suppose we put in u of D equals\nthis sequence, all 0's",
    "start": "2754170",
    "end": "2759180"
  },
  {
    "text": "before times 0, all\n1's after time 0. Then where will we go?",
    "start": "2759180",
    "end": "2765530"
  },
  {
    "text": "We'll go 1, and then\nwe'll just stay in this 0 loop forever.",
    "start": "2765530",
    "end": "2771950"
  },
  {
    "text": "Anything wrong with that? Is that a code word?",
    "start": "2771950",
    "end": "2777490"
  },
  {
    "text": "That is a code word, the way\nwe've defined the code. If we had defined the code so\nthat the u of D were only",
    "start": "2777490",
    "end": "2784310"
  },
  {
    "text": "finite input sequences, then\nthis claim would be correct.",
    "start": "2784310",
    "end": "2790220"
  },
  {
    "text": "For any finite input sequence,\nwe eventually have to come back to the 0 state. ",
    "start": "2790220",
    "end": "2796619"
  },
  {
    "text": "So this is true for finite\ninputs, not true",
    "start": "2796620",
    "end": "2808210"
  },
  {
    "text": "for infinite inputs. ",
    "start": "2808210",
    "end": "2817315"
  },
  {
    "text": "So this is wrong. The fact is d3 equals 1.",
    "start": "2817315",
    "end": "2826540"
  },
  {
    "text": "The minimum weight of\nthis code is 1. ",
    "start": "2826540",
    "end": "2831690"
  },
  {
    "text": "But you see this is, first\nof all, it's a confusing",
    "start": "2831690",
    "end": "2838220"
  },
  {
    "text": "situation for analytical\npurposes. Let me further indicate why\nit might be bad to have an",
    "start": "2838220",
    "end": "2846619"
  },
  {
    "text": "encoder like this in general. The key catastrophicity, in\ngeneral, will be defined as",
    "start": "2846620",
    "end": "2864270"
  },
  {
    "text": "there are finite outputs\ngenerated by",
    "start": "2864270",
    "end": "2877540"
  },
  {
    "text": "infinite inputs, as above. ",
    "start": "2877540",
    "end": "2887990"
  },
  {
    "text": "Or equivalently, there\nare 0 loops in the",
    "start": "2887990",
    "end": "2898190"
  },
  {
    "text": "state transition diagram. ",
    "start": "2898190",
    "end": "2905619"
  },
  {
    "text": "So by choosing a proper input,\nyou can just keep driving around a 0 loop forever.",
    "start": "2905620",
    "end": "2911088"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Excuse me? AUDIENCE: [INAUDIBLE]",
    "start": "2911088",
    "end": "2916290"
  },
  {
    "text": " the output is becoming finite,\nso it's actually --",
    "start": "2916290",
    "end": "2923058"
  },
  {
    "text": "I'm just commenting on the\nwhole catastrophicity. PROFESSOR: OK, well, I want\nto next tell you where",
    "start": "2923059",
    "end": "2928280"
  },
  {
    "text": "catastrophicity comes from. The opposite of this property\nis non-catastrophicity.",
    "start": "2928280",
    "end": "2934450"
  },
  {
    "text": "What we want is non-catastrophic\nencoders. We want encoders where, to get\na finite output, you get a",
    "start": "2934450",
    "end": "2943880"
  },
  {
    "text": "finite output only from\nfinite inputs. ",
    "start": "2943880",
    "end": "2953330"
  },
  {
    "text": "That's better analytically and\nit's better in practice. Here, let me draw you the\npractical argument.",
    "start": "2953330",
    "end": "2958580"
  },
  {
    "text": "We have, for this particular\ncase, u of D comes in, gets multiplied by 1 plus d.",
    "start": "2958580",
    "end": "2966322"
  },
  {
    "text": "That gives us y of D, which -- let me just abbreviate it.",
    "start": "2966322",
    "end": "2971940"
  },
  {
    "text": "We transmit that\nover a channel, and we get our decoder.",
    "start": "2971940",
    "end": "2978470"
  },
  {
    "text": "Actually, decoder doesn't have\nmuch to do here, because all possible sequences are allowed\nat the output.",
    "start": "2978470",
    "end": "2986240"
  },
  {
    "text": "So if this were a binary\nsymmetric channel, the best the decoder could do would just\nbe to put out whatever it",
    "start": "2986240",
    "end": "2992590"
  },
  {
    "text": "sees as its guess, y-hat\nof D. So this is the decoder estimate.",
    "start": "2992590",
    "end": "2998180"
  },
  {
    "text": " So in any case, this\ncan differ by",
    "start": "2998180",
    "end": "3007140"
  },
  {
    "text": "code words from that. All possible code words\nare possible. And given y-hat of D, to get\nback to u of D, what do we",
    "start": "3007140",
    "end": "3019330"
  },
  {
    "text": "have to do? We have to divide by 1/1\nplus d, in effect, to invert this equation.",
    "start": "3019330",
    "end": "3025260"
  },
  {
    "text": "For y of D is equal to 1 plus d\ntimes u of D, then the u of D that corresponds to a\nparticular decoded code",
    "start": "3025260",
    "end": "3032330"
  },
  {
    "text": "sequence, y-hat of D, we get\nby dividing by this. But this is infinite sequence.",
    "start": "3032330",
    "end": "3038059"
  },
  {
    "text": "Suppose this makes\njust one error. It's possible for this to\ntransmit all 0's, and for this",
    "start": "3038060",
    "end": "3044420"
  },
  {
    "text": "to make just one error.  That's a code word.",
    "start": "3044420",
    "end": "3049600"
  },
  {
    "text": "That's a legitimate\ncode sequence. So it's something the decoder\nmight come up with.",
    "start": "3049600",
    "end": "3056690"
  },
  {
    "text": "If it does that, then what's\nthis going to look like? This is going to look like an\ninfinite number of 1's,",
    "start": "3056690",
    "end": "3066440"
  },
  {
    "text": "because this is the infinite\ninput that causes this code sequence with a finite\nnumber of outputs.",
    "start": "3066440",
    "end": "3074010"
  },
  {
    "text": "So it's precisely this\ncondition, whenever we make an error that corresponds to a\nfinite output sequence, and we",
    "start": "3074010",
    "end": "3082250"
  },
  {
    "text": "translate it back to the encoder\ninput, that's an infinite encoder input.",
    "start": "3082250",
    "end": "3087630"
  },
  {
    "text": "There's a one-to-one\ncorrespondence between inputs and outputs. So it's got to happen whenever\nwe make that type of error.",
    "start": "3087630",
    "end": "3093349"
  },
  {
    "text": "And this is called catastrophic\nerror propagation. The decoder hasn't done\nanything bad. It made one error, as it's going\nto do once in a while.",
    "start": "3093350",
    "end": "3103710"
  },
  {
    "text": "But the consequences\nare catastrophic. We make an infinite number of\nerrors in the bits that we",
    "start": "3103710",
    "end": "3110250"
  },
  {
    "text": "actually deliver to the user. Now, of course, what's really\ngoing to happen is that",
    "start": "3110250",
    "end": "3115540"
  },
  {
    "text": "sometime later the decoder\nis going to make another little error.",
    "start": "3115540",
    "end": "3120740"
  },
  {
    "text": "And at that point, this will\nswitch state again. So that will terminate the error\nburst when the decoder",
    "start": "3120740",
    "end": "3127750"
  },
  {
    "text": "makes another error. But this is completely random. It may take a long time\nfor this to happen, and it's not good.",
    "start": "3127750",
    "end": "3134450"
  },
  {
    "text": "So for practical reasons, we\ndon't want catastrophicity. ",
    "start": "3134450",
    "end": "3144720"
  },
  {
    "text": "I was going to give you another\nexample, but in the interest of time, I'll\njust write it down.",
    "start": "3144720",
    "end": "3152190"
  },
  {
    "text": "Here's another catastrophic\nexample. Let me just do a rate 1/2\nencoder so it looks more",
    "start": "3152190",
    "end": "3162260"
  },
  {
    "text": "reasonable. And we'll make it look\nvery much like the encoders we've had.",
    "start": "3162260",
    "end": "3170230"
  },
  {
    "text": "Our first example looks\nsomething like this. 1 plus d squared.",
    "start": "3170230",
    "end": "3176569"
  },
  {
    "text": "I'll say 1 plus d. So it's a feet-forward\nencoder. It looks perfectly reasonable.",
    "start": "3176570",
    "end": "3181755"
  },
  {
    "start": "3181755",
    "end": "3187339"
  },
  {
    "text": "The top channel is impulse\nresponse, 1 plus d squared. The second output has impulse\nresponse, 1 plus d.",
    "start": "3187340",
    "end": "3194030"
  },
  {
    "text": "If you look at the minimum\nweight for all finite sequences, it's 4, not quite\nas good as the other one which had 5.",
    "start": "3194030",
    "end": "3201549"
  },
  {
    "text": "But is this catastrophic?  Yes?",
    "start": "3201550",
    "end": "3207020"
  },
  {
    "text": "Who said yes? AUDIENCE: [INAUDIBLE]. ",
    "start": "3207020",
    "end": "3218390"
  },
  {
    "text": "PROFESSOR: Great. So the same observation, if u\nof D is equal to 1/1 plus d,",
    "start": "3218390",
    "end": "3226480"
  },
  {
    "text": "which is, again, this infinite\nsequence, then the output, y",
    "start": "3226480",
    "end": "3233280"
  },
  {
    "text": "of D equals u of D, g\nof D, is equal to --",
    "start": "3233280",
    "end": "3241040"
  },
  {
    "text": "1 plus d divides both of these,\nso we get 1 plus d1. We get a finite output\nsequence.",
    "start": "3241040",
    "end": "3246914"
  },
  {
    "text": " You saw that immediately,\nbecause we know that",
    "start": "3246915",
    "end": "3254880"
  },
  {
    "text": "polynomials are divisible by 1\nplus d if and only if they have an even number\nof non-zero terms.",
    "start": "3254880",
    "end": "3261105"
  },
  {
    "text": " So that's a more elaborate\nexample of where we can get",
    "start": "3261105",
    "end": "3267750"
  },
  {
    "text": "catastrophic behavior. So what should we do here? Clearly, we should divide out\nthe common factor from here.",
    "start": "3267750",
    "end": "3275079"
  },
  {
    "text": "We can do that. If all of these polynomials\nhave a common factor, we",
    "start": "3275080",
    "end": "3281790"
  },
  {
    "text": "should divide it out. And we know that the code\ngenerated by -- if this is g",
    "start": "3281790",
    "end": "3289359"
  },
  {
    "text": "of D, we're going to say g prime\nof D is equal to 1/1",
    "start": "3289360",
    "end": "3294940"
  },
  {
    "text": "plus d times 1 plus d\nsquared, 1 plus d.",
    "start": "3294940",
    "end": "3300490"
  },
  {
    "text": "And that is -- we've already\ncalculated -- 1 plus d1.",
    "start": "3300490",
    "end": "3306349"
  },
  {
    "text": "So by doing that, first of\nall, we got rid of the catastrophicity.",
    "start": "3306350",
    "end": "3311869"
  },
  {
    "text": "Second of all, again,\nwe reduced nu.  So this is clearly a very\ngood thing to do.",
    "start": "3311870",
    "end": "3320760"
  },
  {
    "text": "So more generally, going back\nhere, if all n of D have any",
    "start": "3320760",
    "end": "3328600"
  },
  {
    "text": "common factor -- ",
    "start": "3328600",
    "end": "3335880"
  },
  {
    "text": "in other words, let's call --  I've used d, so what'll I use?",
    "start": "3335880",
    "end": "3343540"
  },
  {
    "text": "b of D equals the greatest\ncommon divisor of all of the n",
    "start": "3343540",
    "end": "3352220"
  },
  {
    "text": "of D, 1 plus -- AUDIENCE: [INAUDIBLE]. ",
    "start": "3352220",
    "end": "3360200"
  },
  {
    "text": "PROFESSOR: Who -- AUDIENCE: Do you think\nit could be 1? PROFESSOR: You're, once again,\n30 seconds ahead of me.",
    "start": "3360200",
    "end": "3368190"
  },
  {
    "text": "So yes, that's what\nI'm going to say. If they all have a common\nfactor, then they have a GCD",
    "start": "3368190",
    "end": "3373660"
  },
  {
    "text": "that is not equal to 1. That's if and only if. So we're going to transform n\nof D to 1 over b of D. We're",
    "start": "3373660",
    "end": "3387613"
  },
  {
    "text": "going to divide out the common\nfactor, n of D. That will be our n prime.",
    "start": "3387613",
    "end": "3394760"
  },
  {
    "text": "And now what have we achieved? We've achieved that there is\nno common factor of these n",
    "start": "3394760",
    "end": "3400040"
  },
  {
    "text": "prime of D. So no common factor,\nwhich does turn out.",
    "start": "3400040",
    "end": "3410630"
  },
  {
    "text": "So that will mean it's\nnon-catastrophic, and,",
    "start": "3410630",
    "end": "3418410"
  },
  {
    "text": "furthermore, will reduce nu by\nwhatever the degree of this",
    "start": "3418410",
    "end": "3428750"
  },
  {
    "text": "common factor was, degree\nof b of D. Let me write degree of GCD.",
    "start": "3428750",
    "end": "3435010"
  },
  {
    "start": "3435010",
    "end": "3440740"
  },
  {
    "text": "We want them to have\nno common factor. We want the greatest common\ndivisor to be 1.",
    "start": "3440740",
    "end": "3448810"
  },
  {
    "text": "Another way of saying this is\nwe want the ni of d to be relatively prime, the nj of\nd to be relatively prime.",
    "start": "3448810",
    "end": "3456950"
  },
  {
    "text": "And if that's true, then\ncan we prove that it's",
    "start": "3456950",
    "end": "3463130"
  },
  {
    "text": "non-catastrophic, that if we\nhave a finite output, that it must've been generated\nby a finite input?",
    "start": "3463130",
    "end": "3469290"
  },
  {
    "text": " AUDIENCE: No, because u of D\ntimes n_i of D would have to",
    "start": "3469290",
    "end": "3476102"
  },
  {
    "text": "be a polynomial to be\ncatastrophic, and to get a",
    "start": "3476102",
    "end": "3483070"
  },
  {
    "text": "polynomial.  And u of D is rational.",
    "start": "3483070",
    "end": "3489260"
  },
  {
    "text": "It has something in\nthe denominator, because u of D is infinite. ",
    "start": "3489260",
    "end": "3494800"
  },
  {
    "text": "That denominator should\nthen get cancelled out to one of these.",
    "start": "3494800",
    "end": "3499849"
  },
  {
    "text": "PROFESSOR: Yeah, you have the\nargument in your head. Let me leave that as an exercise\nfor the student,",
    "start": "3499850",
    "end": "3506930"
  },
  {
    "text": "since at least a couple\nof you see it.  The only way that you can get\nthis behavior, if you have an",
    "start": "3506930",
    "end": "3514950"
  },
  {
    "text": "infinite input which has in\nits denominator a common factor of all the n's.",
    "start": "3514950",
    "end": "3522170"
  },
  {
    "text": "So if the n's have\nno common factor, then this can't happen. That's the outline\nof the argument.",
    "start": "3522170",
    "end": "3530680"
  },
  {
    "text": "So what's our conclusion now?",
    "start": "3530680",
    "end": "3536970"
  },
  {
    "text": "Since we have multiple encoders\nthat generate the same code, we'd like to get the\nnicest one, in some sense,",
    "start": "3536970",
    "end": "3546440"
  },
  {
    "text": "as our canonical encoder\nfor a given code. So we have a given code.",
    "start": "3546440",
    "end": "3551540"
  },
  {
    "text": "We can specify it by any causal",
    "start": "3551540",
    "end": "3556780"
  },
  {
    "text": "rational transfer function. But then, having done that, we\nshould clean this generator",
    "start": "3556780",
    "end": "3564740"
  },
  {
    "text": "n-tuple up. We should multiply out by the\nleast common multiple of all",
    "start": "3564740",
    "end": "3571539"
  },
  {
    "text": "the divisors to make it\npolynomial, feedback-free,",
    "start": "3571540",
    "end": "3576680"
  },
  {
    "text": "possibly reduce nu. And then we should check the\nnumerators and see if they",
    "start": "3576680",
    "end": "3582430"
  },
  {
    "text": "have any common factor, which\ncould be d or it could be any polynomial. And whatever it is, we should\ndivide that out.",
    "start": "3582430",
    "end": "3590119"
  },
  {
    "text": "And that will certainly\nreduce nu. So at the end of the day, we\nhave a canonical encoder,",
    "start": "3590120",
    "end": "3604190"
  },
  {
    "text": "which is equal to\ng of D times -- we want to multiply by the least\ncommon multiple of the",
    "start": "3604190",
    "end": "3610930"
  },
  {
    "text": "denominators. We want to divide by the\ngreatest common divisor of the",
    "start": "3610930",
    "end": "3617700"
  },
  {
    "text": "numerators.  And this will be some n prime\nof D, which will be",
    "start": "3617700",
    "end": "3629080"
  },
  {
    "text": "polynomial. It will be delay-free. That means it doesn't have\nd as a common factor.",
    "start": "3629080",
    "end": "3637760"
  },
  {
    "text": "It will be non-catastrophic. That means it doesn't\nhave anything else as a common factor.",
    "start": "3637760",
    "end": "3644350"
  },
  {
    "text": "And it will have minimal nu,\nfor any encoder that can",
    "start": "3644350",
    "end": "3649890"
  },
  {
    "text": "generate that same code. I haven't quite proved all those\nproperties, but I think",
    "start": "3649890",
    "end": "3655350"
  },
  {
    "text": "we're well along the way. So this is really -- AUDIENCE: [INAUDIBLE]. ",
    "start": "3655350",
    "end": "3663430"
  },
  {
    "text": "There should be at\nleast n1 and n2. [UNINTELLIGIBLE] PROFESSOR: Well, if we have a\nrate 1/1 code, we just have",
    "start": "3663430",
    "end": "3671500"
  },
  {
    "text": "one of them, then what's the\ngreatest common divisor? Suppose it's n of D over d of D.\nThe greatest common divisor",
    "start": "3671500",
    "end": "3678619"
  },
  {
    "text": "is n of D. The least common\nmultiple is d of D. We get 1. So going through this exercise\nfor any rate 1/1 code, we'll",
    "start": "3678620",
    "end": "3686250"
  },
  {
    "text": "find that the canonical\nencoder is 1. And that is clearly what we want\nfor a rate 1/1 encoder,",
    "start": "3686250",
    "end": "3694800"
  },
  {
    "text": "because a rate 1/1 is always\ngoing to have an out. The code is just going to be the\nuniverse code of all the",
    "start": "3694800",
    "end": "3701250"
  },
  {
    "text": "possible formal Laurent\nsequences. So we get down to the right\nencoder for that code, not",
    "start": "3701250",
    "end": "3707470"
  },
  {
    "text": "some stupid encoder.  And in a similar way, going\nthrough this process, we come",
    "start": "3707470",
    "end": "3715690"
  },
  {
    "text": "up with the right encoder. Is this process unique? Is there only one encoder\nwe could come up with?",
    "start": "3715690",
    "end": "3724200"
  },
  {
    "text": " Think about it a little, and\nyou could convince yourself",
    "start": "3724200",
    "end": "3731360"
  },
  {
    "text": "there's only encoder that you\ncan get from doing this. ",
    "start": "3731360",
    "end": "3739220"
  },
  {
    "text": "This is over F2. Over a larger field, it's unique\nup to units again, up",
    "start": "3739220",
    "end": "3745000"
  },
  {
    "text": "to a non-zero scalar multiple,\nwhich of course you can define to be 1 and somehow\nmake this unique.",
    "start": "3745000",
    "end": "3754390"
  },
  {
    "text": "So it's basically a unique\ncanonical encoder that has all",
    "start": "3754390",
    "end": "3761494"
  },
  {
    "text": "of these properties. You get it in this way. So this is what we're\nalways going to use.",
    "start": "3761495",
    "end": "3768400"
  },
  {
    "text": "For instance, for our original\nencoder, 1 plus --",
    "start": "3768400",
    "end": "3775135"
  },
  {
    "text": "what was it? -- 1 plus d squared, 1 plus\nd plus d squared. Is that already in\ncanonical form?",
    "start": "3775135",
    "end": "3781500"
  },
  {
    "start": "3781500",
    "end": "3787470"
  },
  {
    "text": "This is irreducible. This is divisible by 1 plus D,\nso these are relatively prime.",
    "start": "3787470",
    "end": "3793990"
  },
  {
    "text": "It's feed-forward. It doesn't have any denominator\nterms, and it's",
    "start": "3793990",
    "end": "3799330"
  },
  {
    "text": "delay-free. So it satisfies all of these,\nand clearly you can't",
    "start": "3799330",
    "end": "3805500"
  },
  {
    "text": "manipulate it. The only ways you're allowed\nto manipulate it are by multiplying by a of D over b of\nD. And it's clear that if",
    "start": "3805500",
    "end": "3815530"
  },
  {
    "text": "you have a non-trivial numerator\nor denominator, the numerator will make it\ncatastrophic, the denominator will make it to have feedback.",
    "start": "3815530",
    "end": "3824800"
  },
  {
    "text": "Now, as I was saying,\nthere's really nothing wrong with feedback. And so some people prefer --",
    "start": "3824800",
    "end": "3831560"
  },
  {
    "text": "the one thing that this doesn't\nhave, in general, is it's not systematic.",
    "start": "3831560",
    "end": "3837030"
  },
  {
    "text": "That means the input stream is\nnot one of the output streams. ",
    "start": "3837030",
    "end": "3846060"
  },
  {
    "text": "So given a canonical encoder\nlike this, can we always make it systematic?",
    "start": "3846060",
    "end": "3852160"
  },
  {
    "text": " Yeah, we just divide by any\nof these polynomials.",
    "start": "3852160",
    "end": "3860910"
  },
  {
    "text": "So here's an equivalent\nsystematic encoder. ",
    "start": "3860910",
    "end": "3871420"
  },
  {
    "text": "For instance, if we divide\nboth of these by 1 plus D squared, we get 1 plus\nD plus D squared,",
    "start": "3871420",
    "end": "3880309"
  },
  {
    "text": "over 1 plus d squared. ",
    "start": "3880310",
    "end": "3885580"
  },
  {
    "text": "This now is not polynomial. It is delay-free. ",
    "start": "3885580",
    "end": "3894190"
  },
  {
    "text": "It's non-catastrophic.  There's no 1 over something that\nwe can put in to get a",
    "start": "3894190",
    "end": "3901210"
  },
  {
    "text": "finite thing out. It turns out it's still\nminimal nu.",
    "start": "3901210",
    "end": "3907559"
  },
  {
    "text": "We know how to realize this with\ntwo memory elements now. ",
    "start": "3907560",
    "end": "3913240"
  },
  {
    "text": "And in general, if you're\nnot going to introduce a denominator term that has a\ngreater degree than the",
    "start": "3913240",
    "end": "3920870"
  },
  {
    "text": "maximum degree of the numerator\nterms, so it's still realizable with minimal nu. And so now it's systematic,\nbut now it's not",
    "start": "3920870",
    "end": "3933380"
  },
  {
    "text": "feedback-free. ",
    "start": "3933380",
    "end": "3941269"
  },
  {
    "text": "So I consider this one\ncertainly the nicest. The canonical feedback-free\nencoder is the nicest one for",
    "start": "3941270",
    "end": "3950060"
  },
  {
    "text": "analytical purposes, for\ninstance, for trying to find minumum-weight finite\ncode words.",
    "start": "3950060",
    "end": "3956510"
  },
  {
    "text": "Because of the finite property,\nif we're looking for the non-catastrophic property,\nif we're looking for",
    "start": "3956510",
    "end": "3961790"
  },
  {
    "text": "minimum-weight code words,\nwe only have to look at finite inputs. We can now use the kind of\nanalysis method that we use",
    "start": "3961790",
    "end": "3968990"
  },
  {
    "text": "that says you always have to\ncome back to the 0 state, because only finite inputs can\nproduce finite outputs here.",
    "start": "3968990",
    "end": "3979829"
  },
  {
    "text": "This also has that property. And people tended not to use\nthese for a long time, but it",
    "start": "3979830",
    "end": "3990580"
  },
  {
    "text": "was founded that in turbo codes,\nyou want to have this, one of the generators\nbe infinite.",
    "start": "3990580",
    "end": "3998460"
  },
  {
    "text": "And it was also nice to have one\nof them be systematic, so that led to a revival of\ninterest in systematic",
    "start": "3998460",
    "end": "4004030"
  },
  {
    "text": "convolutional encoders. And this, again, it's\na unique form. If you say the first one has to\nbe the systematic one, then",
    "start": "4004030",
    "end": "4010770"
  },
  {
    "text": "there's a unique equivalent\nsystematic encoder that generates any code. So it's in alternative\ncanonical form.",
    "start": "4010770",
    "end": "4018190"
  },
  {
    "text": "Take your pick. ",
    "start": "4018190",
    "end": "4023480"
  },
  {
    "text": "Yeah? AUDIENCE: What's systematic? PROFESSOR: What's systematic?",
    "start": "4023480",
    "end": "4028870"
  },
  {
    "text": "Systematic means that the input\nthat's appear unchanged as a subset of the\noutput bits.",
    "start": "4028870",
    "end": "4035559"
  },
  {
    "text": "For convolutional codes, it\nmeans that one of the output sequences, if you have a rate\n1/n encoder, one of the output",
    "start": "4035560",
    "end": "4043400"
  },
  {
    "text": "sequences is simply equal\nto the input sequence. In other words, one\nof the transfer functions is equal to 1.",
    "start": "4043400",
    "end": "4049908"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: Yes, very good.",
    "start": "4049908",
    "end": "4056570"
  },
  {
    "text": "Excellent comment. Because now, if you have a\nfinite output sequence, in",
    "start": "4056570",
    "end": "4064890"
  },
  {
    "text": "particular you can just read\noff the input sequence, the information sequence, from this\nfirst term, and if the",
    "start": "4064890",
    "end": "4071640"
  },
  {
    "text": "whole thing was finite,\nit's finite. So systematic directly ensures\nnon-catastrophicity.",
    "start": "4071640",
    "end": "4079359"
  },
  {
    "text": "Excellent, excellent comment. ",
    "start": "4079360",
    "end": "4085410"
  },
  {
    "text": "Which you might try to prove\nby the more elaborate techniques that we had.",
    "start": "4085410",
    "end": "4091410"
  },
  {
    "text": "So that gets us pretty much\nthrough the algebra that I",
    "start": "4091410",
    "end": "4096589"
  },
  {
    "text": "wanted to do. Now I want to --",
    "start": "4096590",
    "end": "4103068"
  },
  {
    "text": "OK, good. Now let's go more to the\nfinite state picture.",
    "start": "4103069",
    "end": "4109649"
  },
  {
    "text": " And our objective here is mostly\ngoing to be to get to",
    "start": "4109649",
    "end": "4131160"
  },
  {
    "text": "Viterbi decoding algorithm. But along the way, we'll see\nthat we can use something like",
    "start": "4131160",
    "end": "4137549"
  },
  {
    "text": "the Viterbi algorithm to compute\nminimum distances, too, once we have a finite state\npicture to the code.",
    "start": "4137550",
    "end": "4144348"
  },
  {
    "text": " Again, take our example one,\nwhere g of D is 1 plus D",
    "start": "4144349",
    "end": "4157770"
  },
  {
    "text": "squared, 1 plus D\nplus D squared. We have a state transition\ndiagram,",
    "start": "4157770",
    "end": "4167568"
  },
  {
    "text": "which looks like this.",
    "start": "4167569",
    "end": "4174468"
  },
  {
    "start": "4174469",
    "end": "4183890"
  },
  {
    "text": "And I won't bother\nto label it. ",
    "start": "4183890",
    "end": "4192060"
  },
  {
    "text": "And that's a complete\ndescription of the encoder operation, if I put labels of\ninputs and outputs on all",
    "start": "4192060",
    "end": "4200260"
  },
  {
    "text": "these states. So 0 slash 0,0, so forth,\n1 slash 1, 1.",
    "start": "4200260",
    "end": "4208110"
  },
  {
    "text": "Just to draw the impulse\nresponse, 0, 0, 1, and 0 slash 1, 1.",
    "start": "4208110",
    "end": "4215380"
  },
  {
    "text": "There's the basic impulse\nresponse going around, like that. ",
    "start": "4215380",
    "end": "4222940"
  },
  {
    "text": "Trellis diagram is\na very redundant picture of the same thing.",
    "start": "4222940",
    "end": "4229390"
  },
  {
    "start": "4229390",
    "end": "4235070"
  },
  {
    "text": "We can start out in the\n0 state that we like. Let's say we start off in the 0\nstate at some time k, as we",
    "start": "4235070",
    "end": "4244950"
  },
  {
    "text": "always are. We just don't know what k is. ",
    "start": "4244950",
    "end": "4250260"
  },
  {
    "text": "Then let's spread the\nstate transition diagram out in time. Let's draw all the states\nagain at time k plus 1.",
    "start": "4250260",
    "end": "4257610"
  },
  {
    "text": " Actually, there are only\ntwo it can get to, at time k plus 1.",
    "start": "4257610",
    "end": "4263950"
  },
  {
    "text": "So we can either stay in this\nstate or we can go down here",
    "start": "4263950",
    "end": "4269870"
  },
  {
    "text": "to this state, at the\nnext unit of time.",
    "start": "4269870",
    "end": "4275450"
  },
  {
    "text": "I'm just going to keep drawing\nall of the possible state trajectories or paths.",
    "start": "4275450",
    "end": "4282739"
  },
  {
    "text": "At time 2, I can reach\nall possible states. 0, 0, 1, 0, 0, 1, 1, 1.",
    "start": "4282740",
    "end": "4292730"
  },
  {
    "text": "Here again, I already\nknow what these are.",
    "start": "4292730",
    "end": "4298239"
  },
  {
    "text": "From here, I can\nget 1, 0, 2, 0.",
    "start": "4298240",
    "end": "4303741"
  },
  {
    "text": "It goes with a 0, 1 out. So 1 goes with a 1, 0.",
    "start": "4303741",
    "end": "4311170"
  },
  {
    "text": "And k plus 3, I now have all\npossible transitions.",
    "start": "4311170",
    "end": "4319380"
  },
  {
    "text": "It's going to look like this. Where can I go from 0, 1? I can go back to here, or\nI could go to here.",
    "start": "4319380",
    "end": "4327969"
  },
  {
    "text": "And I could label these. I should label these. But I won't. Here, I can go to these two.",
    "start": "4327970",
    "end": "4335770"
  },
  {
    "text": "There are eight possible\nstate transitions. k plus 4. It's completely repetitive,\nsince it's a",
    "start": "4335770",
    "end": "4342469"
  },
  {
    "text": "time-invariant system. I just keep going like this. ",
    "start": "4342470",
    "end": "4354610"
  },
  {
    "text": "And why have I gone to\nall this trouble? This clearly contains the same\ninformation as this diagram,",
    "start": "4354610",
    "end": "4360555"
  },
  {
    "text": "but it's just spread\nout in time.  The basic reason for doing it is\nthat now there is a unique",
    "start": "4360555",
    "end": "4374210"
  },
  {
    "text": "trellis path corresponding to\nevery code word that can start at time k or later.",
    "start": "4374210",
    "end": "4379380"
  },
  {
    "text": " So for instance, if I just have\nan impulse at time k and",
    "start": "4379380",
    "end": "4386840"
  },
  {
    "text": "nothing else, then the unique\ntrellis path is this.",
    "start": "4386840",
    "end": "4392449"
  },
  {
    "text": "It starts at 0, goes through\ntwo non-zero states, comes back to 0, 0, and then stays\nin 0, 0 forever more.",
    "start": "4392450",
    "end": "4401710"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE].",
    "start": "4401710",
    "end": "4407351"
  },
  {
    "text": "PROFESSOR: I've just taken an\narbitrary starting time, k. After a while, I'll\njust look at it --",
    "start": "4407351",
    "end": "4413110"
  },
  {
    "text": "well, it's entrained. This is kind of the steady state\nversion of the trellis. I've included a little\nstarting part here.",
    "start": "4413110",
    "end": "4420880"
  },
  {
    "text": "And if I terminated the trellis,\nthen I would also have an ending time.",
    "start": "4420880",
    "end": "4426360"
  },
  {
    "text": "We'll talk about that. So at this point, I just want\nyou to see what the trellis",
    "start": "4426360",
    "end": "4432250"
  },
  {
    "text": "diagram is. It's basically just an unrolling\nof the state transition diagram\nout in time.",
    "start": "4432250",
    "end": "4438130"
  },
  {
    "text": "And it allows me\nto associate -- there's a one-to-one\ncorrespondence now between code words that start at time k\nor later, and trellis paths.",
    "start": "4438130",
    "end": "4447180"
  },
  {
    "text": "So every one corresponds\nto a unique, distinct path through the code.",
    "start": "4447180",
    "end": "4453170"
  },
  {
    "text": "That's what we're going\nto use in decoding. Each of these paths represents\none possible decision that the",
    "start": "4453170",
    "end": "4460980"
  },
  {
    "text": "decoder could do about what\nwas actually set. The decoder is actually going\nto try to find the best of",
    "start": "4460980",
    "end": "4469230"
  },
  {
    "text": "these paths, in some sense, the\none that's closest to the received sequence, in the\nHamming distance or Euclidean",
    "start": "4469230",
    "end": "4474810"
  },
  {
    "text": "distance, or likelihood sense. Let's pause for a second, and\nsee how this could be used to",
    "start": "4474810",
    "end": "4482810"
  },
  {
    "text": "compute the minimum distance\nof the code.",
    "start": "4482810",
    "end": "4488890"
  },
  {
    "text": "Let's assume that I have a\nnon-catastrophic encoder.",
    "start": "4488890",
    "end": "4495810"
  },
  {
    "text": "Then I know the finite sequences\nare going to be those that start in the 0\nstate, go through some",
    "start": "4495810",
    "end": "4503510"
  },
  {
    "text": "trajectory through the state\ntransition diagram, and then ultimately come back\nto the 0 state.",
    "start": "4503510",
    "end": "4511620"
  },
  {
    "text": "If I have canonical encoder,\nI agreed what I'm going to use now.",
    "start": "4511620",
    "end": "4517270"
  },
  {
    "text": "So one way of computing the\nminimum distance would just be to perform a search through\nhere, and try to find the",
    "start": "4517270",
    "end": "4528780"
  },
  {
    "text": "minimum detour, the minimum\nweight detour that starts in",
    "start": "4528780",
    "end": "4534495"
  },
  {
    "text": "the 0 state, eventually gets\nback to the 0 state. It accumulates Hamming distance\nalong the way.",
    "start": "4534496",
    "end": "4540080"
  },
  {
    "text": "And that is the Hamming\ndistance of some valid code sequence.",
    "start": "4540080",
    "end": "4545480"
  },
  {
    "text": "So here, it's not very tough. And I've already gone\nthrough an argument.",
    "start": "4545480",
    "end": "4552220"
  },
  {
    "text": "If you didn't know, you'd\nsay, OK, here's the first one to look at. This is the only one that gets\nback in three time units.",
    "start": "4552220",
    "end": "4561739"
  },
  {
    "text": "Let's look for the finite path\nthat gets back to the 0 state in four time units.",
    "start": "4561740",
    "end": "4567630"
  },
  {
    "text": "Again, there's only\none of them. It looks like that, and it turns\nout it has weight 6.",
    "start": "4567630",
    "end": "4573235"
  },
  {
    "text": " So this is, again, it always\nends up with a 1:1 when it",
    "start": "4573235",
    "end": "4580190"
  },
  {
    "text": "merges back in here. And this, I think, is 0, 1\nor something like that.",
    "start": "4580190",
    "end": "4586210"
  },
  {
    "text": "The only 0, 0 path in\nhere is this one. But you can easily see the 0,\n0 path doesn't form a loop.",
    "start": "4586210",
    "end": "4594510"
  },
  {
    "text": "You can't proceed down\n0, 0 forever. So I go through here, and I've\nalready got four units of",
    "start": "4594510",
    "end": "4601280"
  },
  {
    "text": "distance up to here. In fact, I need to follow. Next time I explore out here,\n1, 1, 0, I've already got up",
    "start": "4601280",
    "end": "4608900"
  },
  {
    "text": "to four units of distance. Now I know I'm always going\nto have two at the end.",
    "start": "4608900",
    "end": "4614320"
  },
  {
    "text": "So any time I get to four\nor more, I can stop. And by that argument, I'm\nalready done when",
    "start": "4614320",
    "end": "4621830"
  },
  {
    "text": "I get to this one. Or if I didn't want to use\nthat, I'd just explore -- I already know that there's one\nof weight 5, the impulse",
    "start": "4621830",
    "end": "4629320"
  },
  {
    "text": "response, so I'd explore all\nthe possibilities out until they accumulated at least weight\n5, and assure myself",
    "start": "4629320",
    "end": "4636450"
  },
  {
    "text": "that there was no way of getting\nback here with weight less than 5. And that would be a very\nsystematic way of evaluating",
    "start": "4636450",
    "end": "4644030"
  },
  {
    "text": "the minimum distance\nto the code. You can see you could do that\nfor any generators.",
    "start": "4644030",
    "end": "4649481"
  },
  {
    "text": "You with me? Just explore this little graph,\npicking up weight as",
    "start": "4649481",
    "end": "4657620"
  },
  {
    "text": "you go along.  That's basically the way the\nViterbi algorithm goes as",
    "start": "4657620",
    "end": "4665210"
  },
  {
    "text": "well, except what we do is we\nhave some received pair at",
    "start": "4665210",
    "end": "4674940"
  },
  {
    "text": "time k, r1 k, r2 k, r1 k\nplus 1, r2 k plus 1.",
    "start": "4674940",
    "end": "4688730"
  },
  {
    "text": "We get two received symbols at\nevery time, whatever channel we're going over.",
    "start": "4688730",
    "end": "4694300"
  },
  {
    "text": "Assuming that the channel is\nmemory-less, I get a some kind of distance or weight or\nlikelihood weight at each",
    "start": "4694300",
    "end": "4701870"
  },
  {
    "text": "time, and maximum likelihood\nsequence decoding amounts to finding the sequence that's\nclosest, the code sequence",
    "start": "4701870",
    "end": "4710830"
  },
  {
    "text": "that's closest in Hamming\ndistance or Euclidean distance or likelihood distance to the\ntransmitted sequence.",
    "start": "4710830",
    "end": "4716350"
  },
  {
    "text": " So I can simply put a metric\non each of these branches",
    "start": "4716350",
    "end": "4723179"
  },
  {
    "text": "corresponding to\nwhat this was. Now, if it was a binary\nsymmetric channel and I received 0, 0, then I'd have\n0 weight here, but weight 2",
    "start": "4723180",
    "end": "4731310"
  },
  {
    "text": "here, in terms of Hamming\ndistance from the received sequence. And similarly, as I go along,\nI'd have another set of",
    "start": "4731310",
    "end": "4738469"
  },
  {
    "text": "metrics here. If I received 1, 1, then this\none would have weight 2, this one would be good, no distance\nfrom the received sequence.",
    "start": "4738470",
    "end": "4745160"
  },
  {
    "text": "Each of these would have\ndistance 1 from the received sequence. So I get some kind of cost\nfor every path in here.",
    "start": "4745160",
    "end": "4754680"
  },
  {
    "text": "And then the decoding algorithm\nis simply a matter of finding the minimum\ncost path.",
    "start": "4754680",
    "end": "4760560"
  },
  {
    "text": "You could all do that. We just had a celebration for\nAndy Viterbi out in USC, where",
    "start": "4760560",
    "end": "4769165"
  },
  {
    "text": "he's given them $50 million, so\nthey were very happy, and had a great celebration.",
    "start": "4769165",
    "end": "4775060"
  },
  {
    "text": "And the thing he's best known\nfor is the Viterbi algorithm. But what everybody knows is\nthat, once you reduce the",
    "start": "4775060",
    "end": "4781180"
  },
  {
    "text": "problem to this point, anybody\ncould have come up with the Viterbi algorithm. The Viterbi algorithm is just a\nsystematic way for trying to",
    "start": "4781180",
    "end": "4787960"
  },
  {
    "text": "find the lowest-cost path as\nyou go through a trellis.",
    "start": "4787960",
    "end": "4793620"
  },
  {
    "text": "And if you know dynamic\nprogramming and it's obvious how to do it, or even if you\ndon't, the next idea --",
    "start": "4793620",
    "end": "4802650"
  },
  {
    "text": "do we have a minute?  There's only one idea in the\nViterbi algorithm, which is,",
    "start": "4802650",
    "end": "4809220"
  },
  {
    "text": "when you get to this point,\nyou can already make a decision about what the best\npath is to get to each of",
    "start": "4809220",
    "end": "4815039"
  },
  {
    "text": "these states. If the closest path over the\nfirst three intervals is this",
    "start": "4815040",
    "end": "4822130"
  },
  {
    "text": "one, not this one, say, then you\ncan forget about this path",
    "start": "4822130",
    "end": "4828040"
  },
  {
    "text": "because it's never going to be\nthe first part of the ultimate closest path, because we're\nsimply adding up independent",
    "start": "4828040",
    "end": "4833370"
  },
  {
    "text": "cost, independent increments.  So you can make a subdecision at\neach of these states, what",
    "start": "4833370",
    "end": "4841870"
  },
  {
    "text": "the best path is up to that\nstate, the closest path.",
    "start": "4841870",
    "end": "4847090"
  },
  {
    "text": "And you only need to\nremember that. That's called a survivor. And this was basically, Viterbi\nwas the first one to",
    "start": "4847090",
    "end": "4856030"
  },
  {
    "text": "put down this algorithm\nwith the survivor. You can make interim\ndecisions.",
    "start": "4856030",
    "end": "4861340"
  },
  {
    "text": "You can only keep\nthe survivor. Then all you have to do is\nextend the survivor's one unit of time out here.",
    "start": "4861340",
    "end": "4867280"
  },
  {
    "text": "Again, you have to add\nthe new metric. You have to compare\nthe metrics to see which one is better.",
    "start": "4867280",
    "end": "4872590"
  },
  {
    "text": "You select the survivor, and\nonce again, you've only got four survivors going forward.",
    "start": "4872590",
    "end": "4877630"
  },
  {
    "text": "So you get an iterative\nrecursive algorithm that just proceeds forward one unit of\ntime at a time, and keeps",
    "start": "4877630",
    "end": "4886830"
  },
  {
    "text": "finding the four best survivors,\nor in general, the 2 to the nu best survivors at\ntime k plus 3, k plus 4, k",
    "start": "4886830",
    "end": "4894630"
  },
  {
    "text": "plus 5, ad infinitum. And that's the Viterbi\nalgorithm.",
    "start": "4894630",
    "end": "4900960"
  },
  {
    "text": "So once you've drawn this\ntrellis picture, it's very clear how you should decode, and\nyou get a very sufficient",
    "start": "4900960",
    "end": "4907030"
  },
  {
    "text": "decoding algorithm. We'll come back next time. I'll do that a little\nbit more carefully.",
    "start": "4907030",
    "end": "4913320"
  },
  {
    "text": "I'll talk about terminated\ncodes. I'll talk about how it works\nwhen the code isn't",
    "start": "4913320",
    "end": "4918590"
  },
  {
    "text": "terminated, and I'll talk about\nperformance analysis. But we're actually pretty close\nto the end of chapter",
    "start": "4918590",
    "end": "4924780"
  },
  {
    "text": "nine at this point. ",
    "start": "4924780",
    "end": "4934995"
  }
]