[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "We'll use the stack to hold a procedure's\nactivation record.",
    "start": "250",
    "end": "4060"
  },
  {
    "text": "That includes the values of the arguments\nto the procedure call.",
    "start": "4060",
    "end": "7310"
  },
  {
    "text": "We'll allocate words on the stack to hold\nthe values of the procedure's local variables,",
    "start": "7310",
    "end": "12549"
  },
  {
    "text": "assuming we don't keep them in registers.",
    "start": "12550",
    "end": "14950"
  },
  {
    "text": "And we'll use the stack to save the return\naddress (passed in LP) so the procedure can",
    "start": "14950",
    "end": "20080"
  },
  {
    "text": "make nested procedure calls without overwriting\nits return address.",
    "start": "20080",
    "end": "25420"
  },
  {
    "text": "The responsibility for allocating and deallocating\nthe activation record will be shared between",
    "start": "25420",
    "end": "30400"
  },
  {
    "text": "the calling procedure (the \"caller\") and the\ncalled procedure (the \"callee\").",
    "start": "30400",
    "end": "35860"
  },
  {
    "text": "The caller is responsible for evaluating the\nargument expressions and saving their values",
    "start": "35860",
    "end": "40579"
  },
  {
    "text": "in the activation record being built on the\nstack.",
    "start": "40579",
    "end": "44210"
  },
  {
    "text": "We'll adopt the convention that the arguments\nare pushed in reverse order, i.e., the first",
    "start": "44210",
    "end": "48890"
  },
  {
    "text": "argument will be the last to be pushed on\nthe stack.",
    "start": "48890",
    "end": "52480"
  },
  {
    "text": "We'll explain why we made this choice in a\ncouple of slidesâ€¦",
    "start": "52480",
    "end": "57280"
  },
  {
    "text": "The code compiled for a procedure involves\na sequence of expression evaluations, each",
    "start": "57280",
    "end": "62288"
  },
  {
    "text": "followed by a PUSH to save the calculated\nvalue on the stack.",
    "start": "62289",
    "end": "67330"
  },
  {
    "text": "So when the callee starts execution, the top\nof the stack contains the value of the first",
    "start": "67330",
    "end": "73200"
  },
  {
    "text": "argument, the next word down the value of\nthe second argument, and so on.",
    "start": "73200",
    "end": "79420"
  },
  {
    "text": "After the argument values, if any, have been\npushed on the stack, there's a BR to transfer",
    "start": "79420",
    "end": "84810"
  },
  {
    "text": "control to the procedure's entry point,\nsaving the address of the instruction following",
    "start": "84810",
    "end": "89520"
  },
  {
    "text": "the BR in the linkage pointer, R28, a register\nthat we'll dedicate to that purpose.",
    "start": "89520",
    "end": "96179"
  },
  {
    "text": "When the callee returns and execution resumes\nin the caller, a DEALLOCATE is used to remove",
    "start": "96180",
    "end": "101940"
  },
  {
    "text": "all the argument values from the stack, preserving\nstack discipline.",
    "start": "101940",
    "end": "107159"
  },
  {
    "text": "So that's the code the compiler generates\nfor the procedure.",
    "start": "107159",
    "end": "110938"
  },
  {
    "text": "The rest of the work happens in the called\nprocedure.",
    "start": "110939",
    "end": "114560"
  },
  {
    "text": "The code at the start of the called procedure\ncompletes the allocation of the activation",
    "start": "114560",
    "end": "118899"
  },
  {
    "start": "115000",
    "end": "115000"
  },
  {
    "text": "record.",
    "start": "118900",
    "end": "120040"
  },
  {
    "text": "Since when we're done the activation record\nwill occupy a bunch of consecutive words on",
    "start": "120040",
    "end": "124610"
  },
  {
    "text": "the stack, we'll sometimes refer to the activation\nrecord as a \"stack frame\" to remind us of",
    "start": "124610",
    "end": "130360"
  },
  {
    "text": "where it lives.",
    "start": "130360",
    "end": "131870"
  },
  {
    "text": "The first action is to save the return address\nfound in the LP register.",
    "start": "131870",
    "end": "136099"
  },
  {
    "text": "This frees up LP to be used by any nested\nprocedure calls in the body of the callee.",
    "start": "136099",
    "end": "142530"
  },
  {
    "text": "In order to make it easy to access values\nstored in the activation record, we'll dedicate",
    "start": "142530",
    "end": "147281"
  },
  {
    "text": "another register called the \"base pointer\"\n(BP = R27) which will point to the stack frame",
    "start": "147281",
    "end": "153890"
  },
  {
    "text": "we're building.",
    "start": "153890",
    "end": "155680"
  },
  {
    "text": "So as we enter the procedure, the code saves\nthe pointer to the caller's stack frame, and",
    "start": "155680",
    "end": "161450"
  },
  {
    "text": "then uses the current value of the stack pointer\nto make BP point to the current stack frame.",
    "start": "161450",
    "end": "167980"
  },
  {
    "text": "We'll see how we use BP in just a moment.",
    "start": "167980",
    "end": "170800"
  },
  {
    "text": "Now the code will allocate words in the stack\nframe to hold the values for the callee's",
    "start": "170800",
    "end": "175720"
  },
  {
    "text": "local variables, if any.",
    "start": "175720",
    "end": "177690"
  },
  {
    "text": "Finally, the callee needs to save the values\nof any registers it will use when executing",
    "start": "177690",
    "end": "182950"
  },
  {
    "text": "the rest of its code.",
    "start": "182950",
    "end": "184599"
  },
  {
    "text": "These saved values can be used to restore\nthe register values just before returning",
    "start": "184599",
    "end": "189760"
  },
  {
    "text": "to the caller.",
    "start": "189760",
    "end": "191060"
  },
  {
    "text": "This is called the \"callee saves\" convention\nwhere the callee guarantees that all register",
    "start": "191060",
    "end": "197170"
  },
  {
    "text": "values will be preserved across the procedure\ncall.",
    "start": "197170",
    "end": "200940"
  },
  {
    "text": "With this convention, the code in the caller\ncan assume any values it placed in registers",
    "start": "200940",
    "end": "205720"
  },
  {
    "text": "before a nested procedure call will still\nbe there when the nested call returns.",
    "start": "205720",
    "end": "211630"
  },
  {
    "text": "Note that dedicating a register as the base\npointer isn't strictly necessary.",
    "start": "211630",
    "end": "216330"
  },
  {
    "text": "All accesses to the values on the stack can\nbe made relative to the stack pointer, but",
    "start": "216330",
    "end": "220970"
  },
  {
    "text": "the offsets from SP will change as values\nare PUSHed and POPed from the stack, e.g.,",
    "start": "220970",
    "end": "226840"
  },
  {
    "text": "during procedure calls.",
    "start": "226840",
    "end": "229120"
  },
  {
    "text": "It will be easier to understand the generated\ncode if we use BP for all stack frame references.",
    "start": "229120",
    "end": "236819"
  },
  {
    "start": "236000",
    "end": "236000"
  },
  {
    "text": "Let's return to the question about the order\nof argument values in the stack frame.",
    "start": "236819",
    "end": "241470"
  },
  {
    "text": "We adopted the convention of PUSHing the values\nin reverse order, i.e., where the value of",
    "start": "241470",
    "end": "245739"
  },
  {
    "text": "the first argument is the last one to be PUSHED.",
    "start": "245739",
    "end": "249250"
  },
  {
    "text": "So, why PUSH argument values in reverse order?",
    "start": "249250",
    "end": "254200"
  },
  {
    "start": "254000",
    "end": "254000"
  },
  {
    "text": "With the arguments PUSHed in reverse order,\nthe first argument (labeled \"arg 0\") will",
    "start": "254200",
    "end": "258880"
  },
  {
    "text": "be at a fixed offset from the base pointer\nregardless of the number of argument values",
    "start": "258880",
    "end": "263220"
  },
  {
    "text": "pushed on the stack.",
    "start": "263220",
    "end": "265259"
  },
  {
    "text": "The compiler can use a simple formula to the\ndetermine the correct BP offset value for",
    "start": "265259",
    "end": "269740"
  },
  {
    "text": "any particular argument.",
    "start": "269740",
    "end": "271349"
  },
  {
    "text": "So the first argument is at offset -12, the\nsecond at -16, and so on.",
    "start": "271350",
    "end": "278060"
  },
  {
    "text": "Why is this important?",
    "start": "278060",
    "end": "280310"
  },
  {
    "text": "Some languages, such as C, support procedure\ncalls with a variable number of arguments.",
    "start": "280310",
    "end": "285590"
  },
  {
    "text": "Usually the procedure can determine from,\nsay, the first argument, how many additional",
    "start": "285590",
    "end": "289680"
  },
  {
    "text": "arguments to expect.",
    "start": "289680",
    "end": "291940"
  },
  {
    "text": "The canonical example is the C printf function\nwhere the first argument is a format string",
    "start": "291940",
    "end": "297000"
  },
  {
    "text": "that specifies how a sequence of values should\nbe printed.",
    "start": "297000",
    "end": "300780"
  },
  {
    "text": "So a call to printf includes the format string\nargument plus a varying number of additional",
    "start": "300780",
    "end": "306180"
  },
  {
    "text": "arguments.",
    "start": "306180",
    "end": "307750"
  },
  {
    "text": "With our calling convention the format string\nwill always be in the same location relative",
    "start": "307750",
    "end": "312410"
  },
  {
    "text": "to BP, so the printf code can find it without\nknowing the number of additional arguments",
    "start": "312410",
    "end": "317530"
  },
  {
    "text": "in the current call.",
    "start": "317530",
    "end": "320240"
  },
  {
    "text": "The local variables are also at fixed offsets\nfrom BP.",
    "start": "320240",
    "end": "324340"
  },
  {
    "text": "The first local variable is at offset 0, the\nsecond at offset 4, and so on.",
    "start": "324340",
    "end": "329889"
  },
  {
    "text": "So, we see that having a base pointer makes\nit easy to access the values of the arguments",
    "start": "329889",
    "end": "335140"
  },
  {
    "text": "and local variables using fixed offsets that\ncan be determined at compile time.",
    "start": "335140",
    "end": "340460"
  },
  {
    "text": "The stack above the local variables is available\nfor other uses, e.g., building the activation",
    "start": "340460",
    "end": "345770"
  },
  {
    "text": "record for a nested procedure call!",
    "start": "345770",
    "end": "347638"
  }
]