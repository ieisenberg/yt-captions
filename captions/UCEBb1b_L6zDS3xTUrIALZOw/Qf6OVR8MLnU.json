[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5390"
  },
  {
    "start": "5390",
    "end": "11270"
  },
  {
    "text": "ANA BELL: OK. So last lecture,\nwe started talking about the idea of\ndecomposition and abstraction.",
    "start": "11270",
    "end": "17900"
  },
  {
    "text": "And we talked a little\nbit about what that means and how it ties into what\nwe've already been doing.",
    "start": "17900",
    "end": "22940"
  },
  {
    "text": "Today, we're going to\ndo a real-world example of decomposition\nand abstraction, and then we'll see\nexactly how we can",
    "start": "22940",
    "end": "28550"
  },
  {
    "text": "achieve this in programming. So let's start by talking about\nan example in the real world,",
    "start": "28550",
    "end": "35570"
  },
  {
    "text": "the smartphone. So a lot of us have it,\nbut for a lot of us,",
    "start": "35570",
    "end": "40960"
  },
  {
    "text": "it's really just a black box. For me, I know it is. For most of the\npeople in the world,",
    "start": "40960",
    "end": "46449"
  },
  {
    "text": "the phone is a black box. We basically view the phone\nin terms of its inputs",
    "start": "46450",
    "end": "52090"
  },
  {
    "text": "and in terms of its outputs. So the phone has some buttons. You can scroll.",
    "start": "52090",
    "end": "58300"
  },
  {
    "text": "You can touch things. But we don't really\nknow exactly how all of these buttons\nand scrolling and all",
    "start": "58300",
    "end": "64690"
  },
  {
    "text": "these internal workings\nactually do their job. And in fact, we don't need to\nknow how they do their job.",
    "start": "64690",
    "end": "71079"
  },
  {
    "text": "To us, as the\nuser, all we really care about is the\ninterface between us and what task we\nwant to achieve.",
    "start": "71080",
    "end": "78549"
  },
  {
    "text": "So what we need to\nknow, that interface, is basically the relationship\nbetween the input",
    "start": "78550",
    "end": "84280"
  },
  {
    "text": "we give to the phone\nand the output we get. So when we push that\nbutton, the phone turns off.",
    "start": "84280",
    "end": "91300"
  },
  {
    "text": "When we push this other\nbutton, the volume increases. And so that's the\nidea of abstraction.",
    "start": "91300",
    "end": "98470"
  },
  {
    "text": "The phone basically\nabstracted away all of those hardware details,\nall of those implementations",
    "start": "98470",
    "end": "105040"
  },
  {
    "text": "that make it actually\nwork for the user. So the user doesn't\nneed to know how it works in order to use it.",
    "start": "105040",
    "end": "111460"
  },
  {
    "text": "Now, abstraction actually\nenables the decomposition. What does that mean?",
    "start": "111460",
    "end": "117170"
  },
  {
    "text": "Well, once we\nabstract away details, we can have different\nmanufacturers",
    "start": "117170",
    "end": "124140"
  },
  {
    "text": "working on different\ncomponents of the phone to build these\ndifferent components.",
    "start": "124140",
    "end": "130429"
  },
  {
    "text": "And if different\nmanufacturers are working to build these\nhundreds of distinct parts within the phone\nseparately, they",
    "start": "130430",
    "end": "137480"
  },
  {
    "text": "need to have some way to put\nthese parts back together. And when they're working\non their pieces separately,",
    "start": "137480",
    "end": "144920"
  },
  {
    "text": "that's the idea\nof decomposition. How do they know that\nwhat they're working on",
    "start": "144920",
    "end": "150230"
  },
  {
    "text": "will actually fit in with\nthe rest of the components? Well, they use the\nidea of decomposition.",
    "start": "150230",
    "end": "155450"
  },
  {
    "text": "They're basically\nfollowing a specification. They're following\na set of inputs that maybe come into\ntheir component,",
    "start": "155450",
    "end": "162980"
  },
  {
    "text": "and a set of outputs that\nmaybe their component needs to give to other components.",
    "start": "162980",
    "end": "168350"
  },
  {
    "text": "And all these\ndifferent manufacturers that are building these\ndifferent parts need to know",
    "start": "168350",
    "end": "174740"
  },
  {
    "text": "is that interface bit. They don't need to know how\nother manufacturers build their components. All they need to know\nis what functionality",
    "start": "174740",
    "end": "182720"
  },
  {
    "text": "those other components have. And so all of these\ndifferent manufacturers can build all these\ndifferent components.",
    "start": "182720",
    "end": "188930"
  },
  {
    "text": "The interfaces are going to\nbe standardized, so to speak. And that's all that\nthey care about.",
    "start": "188930",
    "end": "196120"
  },
  {
    "text": "So once you know\nthe interface, you can come together and put all\nthese different components",
    "start": "196120",
    "end": "201150"
  },
  {
    "text": "together to work\ntowards a common goal, as in, to make a phone work.",
    "start": "201150",
    "end": "206410"
  },
  {
    "text": "So this is true for hardware,\nas in the phone example, but it's also true for software. And that's exactly\nwhat we will be doing",
    "start": "206410",
    "end": "212260"
  },
  {
    "text": "in this lecture on functions. We're going to achieve\ndecomposition and abstraction",
    "start": "212260",
    "end": "217990"
  },
  {
    "text": "in programming, so treating\ncode as a black box and making a large program,\nkind of splitting it up",
    "start": "217990",
    "end": "226630"
  },
  {
    "text": "into these different\nself-contained parts. So in programming, we want\nto suppress details as well,",
    "start": "226630",
    "end": "234590"
  },
  {
    "text": "not just in hardware,\nlike with the phone. We want to suppress details\nin programming as well.",
    "start": "234590",
    "end": "239720"
  },
  {
    "text": "And we do this using\nthis idea of abstraction. So we will be writing code,\nas we have already been doing,",
    "start": "239720",
    "end": "249720"
  },
  {
    "text": "with the thought that the code\nwe're writing will be done-- will be written only once.",
    "start": "249720",
    "end": "255180"
  },
  {
    "text": "We will have some\nfunctional piece of code that will do a very\nuseful task, and then, after we've written that\ncode and debugged it and made",
    "start": "255180",
    "end": "262350"
  },
  {
    "text": "sure it works well, we'll\ntreat that code as a black box. So from there on\nout, as long as we",
    "start": "262350",
    "end": "267630"
  },
  {
    "text": "know what inputs that\npiece of code needs and what outputs\nthat piece of code gives back to somebody\nelse or to us,",
    "start": "267630",
    "end": "273690"
  },
  {
    "text": "we don't care exactly\nhow it does it. We just care that it is there,\nand it is available for use.",
    "start": "273690",
    "end": "280319"
  },
  {
    "text": "So today's lecture,\nwe're going to be seeing how we can actually\ncreate these little functional pieces of code.",
    "start": "280320",
    "end": "286770"
  },
  {
    "text": "We can then give these\npieces of code to ourselves. We can definitely use these\nfunctional pieces of code",
    "start": "286770",
    "end": "292530"
  },
  {
    "text": "that we've written, or we\ncan give them to other people so that they can\nuse them as well.",
    "start": "292530",
    "end": "298500"
  },
  {
    "text": "So we're going to write these\nfunctional pieces of code.",
    "start": "298500",
    "end": "303970"
  },
  {
    "text": "And we'll call the-- we'll call them\nfunctions or procedures. And in fact, we've already\nbeen using functions,",
    "start": "303970",
    "end": "311080"
  },
  {
    "text": "believe it or not. These three are examples\nof functions we've already",
    "start": "311080",
    "end": "316630"
  },
  {
    "text": "been using in Python. So max is a function. It's some useful piece of\ncode that, when we use it",
    "start": "316630",
    "end": "323740"
  },
  {
    "text": "in this particular way, it\nsays it's taking in two inputs and it gives me back the\nbiggest of those two inputs.",
    "start": "323740",
    "end": "332730"
  },
  {
    "text": "The middle one, abs, is the\nabsolute value function. And its input is one\nnumber, an integer,",
    "start": "332730",
    "end": "340020"
  },
  {
    "text": "and it gives back to me the\nabsolute value of that number.",
    "start": "340020",
    "end": "345930"
  },
  {
    "text": "And len is also a\nreally useful one that we've been\nusing with strings. And basically, its\ninput is a string,",
    "start": "345930",
    "end": "353460"
  },
  {
    "text": "and its output is going to\nbe how many characters are in the string. So we've already\nbeen using functions.",
    "start": "353460",
    "end": "360030"
  },
  {
    "text": "The point of today's\nlecture is you're going to start to write\nyour own functions.",
    "start": "360030",
    "end": "366150"
  },
  {
    "text": "Hopefully, useful ones. So the idea of a function is\nthat we want to abstract away",
    "start": "366150",
    "end": "373729"
  },
  {
    "text": "exactly how that function\nachieves something useful, some useful task. And so the way that we're\ngoing to tell other people how",
    "start": "373730",
    "end": "382130"
  },
  {
    "text": "to use our function is using\nthis idea of abstraction. And we capture what the function\ndoes with these things called",
    "start": "382130",
    "end": "389240"
  },
  {
    "text": "specifications. They're also called docstrings. And the docstring is\nkind of like a contract",
    "start": "389240",
    "end": "395810"
  },
  {
    "text": "between somebody who\ncreates this useful function and somebody who wants\nto use the function.",
    "start": "395810",
    "end": "401180"
  },
  {
    "text": "The person who uses the\nfunction might be you, the person who wrote it, or\nit might be somebody else. And in the contract, the things\nthat we're going to mention",
    "start": "401180",
    "end": "409340"
  },
  {
    "text": "are, what are the\ninputs to the function? So in the length function,\nit needs a string.",
    "start": "409340",
    "end": "416300"
  },
  {
    "text": "What is the function doing? And what is the output\nof the function? What does the function\ngive back to somebody",
    "start": "416300",
    "end": "423050"
  },
  {
    "text": "who uses this function? And we haven't actually\ndone this explicitly,",
    "start": "423050",
    "end": "429230"
  },
  {
    "text": "but you've probably seen this\nas you type your code in. So here's an example of the\nabsolute value function.",
    "start": "429230",
    "end": "435800"
  },
  {
    "text": "And it comes up\nwith this little pop up here whenever you type it in. So for example, abs,\nparentheses, right here,",
    "start": "435800",
    "end": "443419"
  },
  {
    "text": "or if you hover over a\nfunction in your file editor, you'll see it pop\nup this little text",
    "start": "443420",
    "end": "448940"
  },
  {
    "text": "box that says the\nspecification or the docstring. And here, you see exactly the\nsignature of the function.",
    "start": "448940",
    "end": "455580"
  },
  {
    "text": "So it takes in one\ninput, the x, the value you want to find the absolute\nvalue of, and then, some text",
    "start": "455580",
    "end": "461720"
  },
  {
    "text": "here, which is what\nthe function does. So the specification\nof the docstring is literally just a\nmulti-line comment.",
    "start": "461720",
    "end": "468830"
  },
  {
    "text": "There's nothing\nspecial about it. As long as you hit those\npoints, the inputs, what the function does, and what\nthe function gives back to you,",
    "start": "468830",
    "end": "477360"
  },
  {
    "text": "you've written a\ngood specification. ",
    "start": "477360",
    "end": "484060"
  },
  {
    "text": "Also, I should mention\nthat these contracts, even though I call\nthem contracts, they're not actually\nenforced by Python.",
    "start": "484060",
    "end": "490750"
  },
  {
    "text": "So it's really just up to the\nperson who writes the code to make sure that\ntheir specification is",
    "start": "490750",
    "end": "495939"
  },
  {
    "text": "really detailed and\nyour function does what you say you will.",
    "start": "495940",
    "end": "501490"
  },
  {
    "text": "So if your function can take\nin both positive and negative integers, for example,\nthen you better make sure that the\nfunction itself,",
    "start": "501490",
    "end": "507730"
  },
  {
    "text": "doing whatever task\nit needs to do, can handle both positive\nand negative integers.",
    "start": "507730",
    "end": "513789"
  },
  {
    "text": "So once we write\nthese functions, we now have these\nlittle bits of code",
    "start": "513789",
    "end": "518969"
  },
  {
    "text": "that perform some useful task. Given some input,\nit'll perform this task and give me back some output.",
    "start": "518970",
    "end": "525970"
  },
  {
    "text": "And now that we have these\ndifferent little pieces of functionality,\nwe can go ahead",
    "start": "525970",
    "end": "531959"
  },
  {
    "text": "and take this\nlarge file of code, which you might\nwrite from now on,",
    "start": "531960",
    "end": "537480"
  },
  {
    "text": "and see exactly\nwhich pieces of code maybe are getting repeated. That's a clue that\nthat's something",
    "start": "537480",
    "end": "544080"
  },
  {
    "text": "that you can abstract away\ninto a little module, aka, a function. And then, you can just use\nthese functions to break up",
    "start": "544080",
    "end": "551640"
  },
  {
    "text": "the code, a very\nlarge piece of code into smaller, little\nself-contained modules. And then, maybe the bulk of\nthe work that the code is doing",
    "start": "551640",
    "end": "559860"
  },
  {
    "text": "is just saying,\nhey, this module, please give me this answer.",
    "start": "559860",
    "end": "564870"
  },
  {
    "text": "And then, this module,\ngive me this answer, and then putting those\nvalues back together again.",
    "start": "564870",
    "end": "571060"
  },
  {
    "text": "So these reusable\npieces of code are called functions or procedures. We're basically going\nto try to capture",
    "start": "571060",
    "end": "576610"
  },
  {
    "text": "some sort of computation,\na very useful task that you'd want to do\nover and over again.",
    "start": "576610",
    "end": "583129"
  },
  {
    "text": "And we're going to see\nsome details about how to write functions,\nbut essentially, it's",
    "start": "583130",
    "end": "589370"
  },
  {
    "text": "just going to be code that\nyou've already been writing, just written in a special\nway that makes it reusable.",
    "start": "589370",
    "end": "598570"
  },
  {
    "text": "So we're going to have\nto switch the way we've been thinking about\ncode for a bit now that we're\nintroducing functions.",
    "start": "598570",
    "end": "604360"
  },
  {
    "text": "Because right now, when\nwe've been writing functions in a file, we basically write\nsome code top to bottom,",
    "start": "604360",
    "end": "610990"
  },
  {
    "text": "and then, we think\nabout that code as being executed line\nby line, top to bottom.",
    "start": "610990",
    "end": "617400"
  },
  {
    "text": "But now that we're creating\nthese things called functions, little blocks of code\nthat we can use many times",
    "start": "617400",
    "end": "623610"
  },
  {
    "text": "in many different\nplaces in our code, we're actually going\nto introduce the idea of defining a function.",
    "start": "623610",
    "end": "629080"
  },
  {
    "text": "So that means we're going\nto write a piece of code, and all that piece of\ncode is going to do",
    "start": "629080",
    "end": "634430"
  },
  {
    "text": "is tell Python that this is\na module or a function that exists in my program.",
    "start": "634430",
    "end": "641020"
  },
  {
    "text": "All we're doing is\ndefining the function. But we're not actually\ngoing to run the function",
    "start": "641020",
    "end": "646750"
  },
  {
    "text": "when we define it. And that's the\ndifference, the way we're going to have to\nshift our thinking here.",
    "start": "646750",
    "end": "653180"
  },
  {
    "text": "So when you define\na function, you just tell Python that here is some\nuseful piece of code that exists that does something,\nbut it doesn't actually",
    "start": "653180",
    "end": "661480"
  },
  {
    "text": "run until you call the function. And the cool thing\nabout writing a function is, once you wrote it once, you\ncan make 100 different function",
    "start": "661480",
    "end": "671360"
  },
  {
    "text": "calls to that one piece of\ncode that you wrote later on in your program. So you can call the\nfunction many times",
    "start": "671360",
    "end": "677769"
  },
  {
    "text": "with different inputs to\ngive you different outputs, but you only had to\nwrite it one time. So I would compare this to\nwhen we write code in a file.",
    "start": "677770",
    "end": "685990"
  },
  {
    "text": "When we write code\nin a file, yes, we can write a whole\nbunch of lines, but this code isn't running\nas we're writing it.",
    "start": "685990",
    "end": "694150"
  },
  {
    "text": "We have to actually push the\nRun button to run that file. So similarly, when\nwe're telling Python",
    "start": "694150",
    "end": "700467"
  },
  {
    "text": "that I'm going to create\nthis function that does something useful, it's not\nactually running those lines.",
    "start": "700468",
    "end": "705920"
  },
  {
    "text": "We have to tell Python that\nwe want to run this function.",
    "start": "705920",
    "end": "712250"
  },
  {
    "text": "So the first thing we're\ngoing to do in this lecture is just actually\ncreate a function. I'm going to show you how\nto define a function, so",
    "start": "712250",
    "end": "719260"
  },
  {
    "text": "tell Python that\nthis function exists. And then, we'll see how to\nactually run the function to give us some useful values.",
    "start": "719260",
    "end": "725810"
  },
  {
    "text": "So the function\ncharacteristics are going to be, the function\nhas to have a name.",
    "start": "725810",
    "end": "731120"
  },
  {
    "text": "So just like when\nyou create variables that store some useful value,\nlike pi to 20 decimal digits",
    "start": "731120",
    "end": "737628"
  },
  {
    "text": "that you want to reuse\nover and over again, we're going to\ncreate a function, and that name is kind of\nlike a handle for us to refer",
    "start": "737628",
    "end": "745120"
  },
  {
    "text": "to this large chunk of code that\ndoes something useful for us. A function has some inputs\ncalled parameters or arguments.",
    "start": "745120",
    "end": "753040"
  },
  {
    "text": "It can have no inputs,\nor more, or one or more. And a function should\nhave a docstring.",
    "start": "753040",
    "end": "759470"
  },
  {
    "text": "So this is the specification. Again, just a multi-line comment\nthat tells the user, the person",
    "start": "759470",
    "end": "764860"
  },
  {
    "text": "who wants to use this\nfunction, the inputs, what the function does, and what\nthe output, or the return, or whatever this\nfunction will do for you.",
    "start": "764860",
    "end": "773000"
  },
  {
    "text": "And then, the body\nof the function is just Python code,\nexactly the kind of code",
    "start": "773000",
    "end": "778480"
  },
  {
    "text": "we've already been\nwriting, except not wrapped in a function. So if you found yourself\nwriting a piece of code that",
    "start": "778480",
    "end": "783730"
  },
  {
    "text": "did something useful,\nyou can totally wrap that in a function. And we'll see how\nto do that today.",
    "start": "783730",
    "end": "790339"
  },
  {
    "text": "So the body of the function is\njust a bunch of lines of code that do this useful task. The only difference in the\nbody is that, at some point,",
    "start": "790340",
    "end": "798170"
  },
  {
    "text": "this function has to end. It has finished its task. It figured out a final value,\nthis useful thing that's",
    "start": "798170",
    "end": "805400"
  },
  {
    "text": "the result of your\ntask, and you want to give this value\nback to somebody",
    "start": "805400",
    "end": "810589"
  },
  {
    "text": "who's using this function. And we do that using this\nreturn keyword, as we're going to see in the next slide.",
    "start": "810590",
    "end": "817570"
  },
  {
    "text": "So here's an example of\na really simple function. So it's just a definition.",
    "start": "817570",
    "end": "823709"
  },
  {
    "text": "So again, these lines\nof code do not run. Here, we're just telling\nPython that we're creating",
    "start": "823710",
    "end": "829330"
  },
  {
    "text": "a function that does something. So we kick that off with\nthe def, define keyword.",
    "start": "829330",
    "end": "835877"
  },
  {
    "text": "So notice it's blue. If you type it in your code,\nyou'll notice it changes color. So def tells Python we're\ndefining a function.",
    "start": "835877",
    "end": "843550"
  },
  {
    "text": "The next is the name\nof the function. So this should be\nsomething descriptive. Usually, it's an action\nword, because a function",
    "start": "843550",
    "end": "849220"
  },
  {
    "text": "does something. So you want like,\nan actiony-type name for your function.",
    "start": "849220",
    "end": "855670"
  },
  {
    "text": "Then, we have parentheses. And inside the\nparentheses, you have any of the inputs, the\nparameters, the arguments",
    "start": "855670",
    "end": "863329"
  },
  {
    "text": "to the function. So what should the user give\nyou as input to this function? And then, of course, a colon.",
    "start": "863330",
    "end": "870030"
  },
  {
    "text": "So in that line right\nthere, the only thing that is \"customizable,\"\nquote unquote,",
    "start": "870030",
    "end": "875810"
  },
  {
    "text": "is the name of the function\nand the parameters. If there's zero parameters\nyou put nothing in there.",
    "start": "875810",
    "end": "881070"
  },
  {
    "text": "If there's more than one,\nyou separate them by commas. Everything else should\nbe standard, the def,",
    "start": "881070",
    "end": "888440"
  },
  {
    "text": "the parentheses, and\nthe colon at the end. Since we have a\ncolon at the end,",
    "start": "888440",
    "end": "894010"
  },
  {
    "text": "that means we have to\nindent the next bit of code. The indentation will tell\nPython that the rest of this",
    "start": "894010",
    "end": "901090"
  },
  {
    "text": "is part of the function. So everything from\nhere on out is part of the function definition. So we have our\ndocstring, of course.",
    "start": "901090",
    "end": "908780"
  },
  {
    "text": "You start with triple quotes and\nyou end it with triple quotes. And in it, you can\nwrite whatever you want. Just treat it like a comment\nthat's on multiple lines.",
    "start": "908780",
    "end": "918250"
  },
  {
    "text": "And you can see here, I've\nsaid that this function takes in an input, i, which I restrict\nto be a positive integer.",
    "start": "918250",
    "end": "925760"
  },
  {
    "text": "And then, I say what the\ninput gives back to the user. So it will return true\nif i is an even number,",
    "start": "925760",
    "end": "932660"
  },
  {
    "text": "and it will return\nfalse otherwise. So I've hit all the points, the\ninputs, what the function does,",
    "start": "932660",
    "end": "939439"
  },
  {
    "text": "and what it gives\nback to whoever wants this function to run. ",
    "start": "939440",
    "end": "945920"
  },
  {
    "text": "Beyond that, we have the\nbody of the function. So here, you notice\nit's just lines of code",
    "start": "945920",
    "end": "951537"
  },
  {
    "text": "that you would have\nwritten otherwise. If you were given the\nproblem on a quiz that said,",
    "start": "951537",
    "end": "956990"
  },
  {
    "text": "given i defined for\nyou, write some code that prints true if the\nnumber is even and false",
    "start": "956990",
    "end": "964485"
  },
  {
    "text": "if the number is odd. This is basically lines of\ncode that you would type in. The only difference is\nthis little return here.",
    "start": "964485",
    "end": "973790"
  },
  {
    "text": "The function is some lines\nof code that do a task.",
    "start": "973790",
    "end": "979170"
  },
  {
    "text": "And that task, when it finishes,\nhas to give something back.",
    "start": "979170",
    "end": "984290"
  },
  {
    "text": "It can't just sit\nthere, I guess. And the thing that it gives back\nto whoever wants this function",
    "start": "984290",
    "end": "991070"
  },
  {
    "text": "to run is set up by this\nreturn statement here.",
    "start": "991070",
    "end": "998240"
  },
  {
    "text": "So if the number is divisible\nby 0, we return true, and else, we return false.",
    "start": "998240",
    "end": "1003380"
  },
  {
    "text": "So one of these either\ntrue or false values will be returned\nby the function. So this is you can think\nof it like the output",
    "start": "1003380",
    "end": "1010143"
  },
  {
    "text": "of the function. ",
    "start": "1010143",
    "end": "1015640"
  },
  {
    "text": "OK, questions so far? Does this make sense? Again, this is just us\ncreating this function",
    "start": "1015640",
    "end": "1021700"
  },
  {
    "text": "inside the computer,\ninside Python. We're not actually running\nthese lines of code yet.",
    "start": "1021700",
    "end": "1026798"
  },
  {
    "text": " So if you are given\na larger problem,",
    "start": "1026799",
    "end": "1035359"
  },
  {
    "text": "I just want to take\na couple slides to talk about how you think\nabout writing the function.",
    "start": "1035359",
    "end": "1040559"
  },
  {
    "text": "This was a really easy one. So obviously, it's not\nthat hard to write,",
    "start": "1040560",
    "end": "1046819"
  },
  {
    "text": "but what is the thought process\nif you are given a larger problem, like in English\nor something like that,",
    "start": "1046819",
    "end": "1052370"
  },
  {
    "text": "and you wanted to translate\nthis into a piece of code that does something\nfunctionally interesting?",
    "start": "1052370",
    "end": "1059270"
  },
  {
    "text": "So you think about\nwhat the problem is. So our problem is,\ngiven an integer,",
    "start": "1059270",
    "end": "1064309"
  },
  {
    "text": "figure out if it's even or odd. So given this statement,\nyou could come up",
    "start": "1064310",
    "end": "1070870"
  },
  {
    "text": "with a name of\nthis piece of code that's functionally interesting. So is_even is a good name.",
    "start": "1070870",
    "end": "1080906"
  },
  {
    "text": "And we can also come up with\nthe inputs for this function. So i, we are only\ngiven one number,",
    "start": "1080906",
    "end": "1087080"
  },
  {
    "text": "so there's no need\nfor this function to take in any other inputs. And then, using that\ndescription, we can now",
    "start": "1087080",
    "end": "1093860"
  },
  {
    "text": "start to fill in the\ndocstring that says, well, our input is going\nto be a positive integer. We could use math to figure\nout restrictions on the inputs.",
    "start": "1093860",
    "end": "1102380"
  },
  {
    "text": "And then, we can write the\nrest of the docstring that tells us what to\nreturn and when, what the function is doing.",
    "start": "1102380",
    "end": "1110549"
  },
  {
    "text": "And once you have that, you\ncan just solve the problem. So for us, we solve\nthe problem by saying,",
    "start": "1110550",
    "end": "1117440"
  },
  {
    "text": "if the remainder when we divide\ni by 2 is 0, we return true, and otherwise, we return false.",
    "start": "1117440",
    "end": "1123440"
  },
  {
    "text": "So that's code that you could\nhave already written without, actually, this function lecture.",
    "start": "1123440",
    "end": "1129890"
  },
  {
    "text": "But now, we're putting it\nin the context of a function definition. So we're going to be\nable to run this function",
    "start": "1129890",
    "end": "1135470"
  },
  {
    "text": "with many different\ninputs to give us a bunch of different\noutputs, whether a bunch of these different\nnumbers are even or not.",
    "start": "1135470",
    "end": "1142820"
  },
  {
    "text": " So when we're writing\nthe body of the code,",
    "start": "1142820",
    "end": "1148380"
  },
  {
    "text": "the only difference from\nwhat you've been doing is the return statement. Instead of printing\nsomething out to the console,",
    "start": "1148380",
    "end": "1154720"
  },
  {
    "text": "we're going to return\na value to somebody who wants to know whether\nthe number i is even or odd.",
    "start": "1154720",
    "end": "1162380"
  },
  {
    "text": "The function can also\nprint stuff to the console. But the key thing\nhere is you want to return a value to the user.",
    "start": "1162380",
    "end": "1170210"
  },
  {
    "text": "And after you wrote\ncode, right off the bat, and you tested it and\nmade sure it works, you can improve the\ncode a little bit.",
    "start": "1170210",
    "end": "1177240"
  },
  {
    "text": "So here, we're improving it by\nnoticing that i%2==0 here is",
    "start": "1177240",
    "end": "1185120"
  },
  {
    "text": "actually already a boolean. If i is even, 3% 2==0 is true.",
    "start": "1185120",
    "end": "1192260"
  },
  {
    "text": "And otherwise,\nit's already false. So these four lines of code\nbasically say, if true,",
    "start": "1192260",
    "end": "1198510"
  },
  {
    "text": "return true. Else, return false. So our improvement can just be\nto return whether i%2==0 right",
    "start": "1198510",
    "end": "1208100"
  },
  {
    "text": "off the bat. So here, we're going\nto return either true or return false\nbased on what i is.",
    "start": "1208100",
    "end": "1215220"
  },
  {
    "text": " So at this point-- again, sorry I'm\nstressing this enough--",
    "start": "1215220",
    "end": "1221860"
  },
  {
    "text": "too much. But it's really\nimportant to understand that once we write\nthese lines of code",
    "start": "1221860",
    "end": "1227140"
  },
  {
    "text": "in the context of a function\ndefinition, these lines of code do not run.",
    "start": "1227140",
    "end": "1232870"
  },
  {
    "text": "They basically\njust sit in Python saying that there are\nthese lines of code that",
    "start": "1232870",
    "end": "1240320"
  },
  {
    "text": "correspond to some function\nobject whose name is even. That's it.",
    "start": "1240320",
    "end": "1247600"
  },
  {
    "text": "So what we need to do now\nis to actually tell Python to run these lines of code.",
    "start": "1247600",
    "end": "1253540"
  },
  {
    "text": "To do that, we make\na function call. And again, we've already been\ndoing function calls, just",
    "start": "1253540",
    "end": "1258910"
  },
  {
    "text": "to functions that\nalready exist in Python, just Python itself, max,\nabsolute, len, all that stuff.",
    "start": "1258910",
    "end": "1266180"
  },
  {
    "text": "But now, we're making a\nfunction call to something that we wrote, this\nnice piece of code that",
    "start": "1266180",
    "end": "1272529"
  },
  {
    "text": "tells us if a number, the\ninput, is even or not. So here, I'm going to invoke\nthe name of my function, aka,",
    "start": "1272530",
    "end": "1283490"
  },
  {
    "text": "I'm going to call the\nname of my function. I'm basically just\ntyping in the name of my function in the code.",
    "start": "1283490",
    "end": "1288510"
  },
  {
    "text": "Parentheses, and then, the\ninputs the function expects. There's only one, the\nnumber I want to figure out",
    "start": "1288510",
    "end": "1293850"
  },
  {
    "text": "if it's even or odd. And then, that's it. So I've got the\nname of my function,",
    "start": "1293850",
    "end": "1299520"
  },
  {
    "text": "and then all the\ninputs, the parameters that this function expects. At this point, Python goes\ninto the function body,",
    "start": "1299520",
    "end": "1307669"
  },
  {
    "text": "it runs the function, and\nit returns back a value. So whatever the value is\nassociated with the return is,",
    "start": "1307670",
    "end": "1317330"
  },
  {
    "text": "that value will\nimmediately be given back to whoever called it. What does that mean?",
    "start": "1317330",
    "end": "1323040"
  },
  {
    "text": "Well, that return\nvalue will completely replace this function call.",
    "start": "1323040",
    "end": "1328325"
  },
  {
    "start": "1328325",
    "end": "1334200"
  },
  {
    "text": "Let's think back to expressions. Do you remember when\nwe were learning about Python\nexpressions and I said",
    "start": "1334200",
    "end": "1339600"
  },
  {
    "text": "you have something like object,\noperator, object, like 3 plus 2? That was an expression.",
    "start": "1339600",
    "end": "1344820"
  },
  {
    "text": "And Python went in,\nevaluated that expression, and replaced that entire\nexpression by the value, 5.",
    "start": "1344820",
    "end": "1352710"
  },
  {
    "text": "This is exactly the same thing. In fact, functions are kind\nof like Python expressions. They do something useful.",
    "start": "1352710",
    "end": "1359610"
  },
  {
    "text": "It's just that it's\nnot math or something like that that gets evaluated. It's a bunch of lines of\ncode that get evaluated.",
    "start": "1359610",
    "end": "1366780"
  },
  {
    "text": "But in the end, that function\nreturns back only one value.",
    "start": "1366780",
    "end": "1373370"
  },
  {
    "text": "And that value replaces\nthe entire function call. So this entire\nfunction call is going",
    "start": "1373370",
    "end": "1379040"
  },
  {
    "text": "to be, basically,\nreplaced by false, because it's an odd number.",
    "start": "1379040",
    "end": "1384400"
  },
  {
    "text": "And the next one is going to\nbe replaced by true, the return from the function.",
    "start": "1384400",
    "end": "1389950"
  },
  {
    "text": " So the way that the\ncode looks, just",
    "start": "1389950",
    "end": "1395080"
  },
  {
    "text": "this definition of is even and\nthen running a function call is this. This is all that we\nwould have in our file.",
    "start": "1395080",
    "end": "1402940"
  },
  {
    "text": "So here, we have our\nfunction definition, and then, at the same\nindentation level, we have a function call.",
    "start": "1402940",
    "end": "1409150"
  },
  {
    "text": "Because the call is not\npart of the function. The call is just making use\nof the function that we wrote.",
    "start": "1409150",
    "end": "1416470"
  },
  {
    "text": "So what exactly happens? We'll do a little\nbit of step-by-step now going a little bit\ninto more detail as to what",
    "start": "1416470",
    "end": "1421533"
  },
  {
    "text": "exactly happens when we\nmake the function call. So when we make\nthe function call--",
    "start": "1421533",
    "end": "1427660"
  },
  {
    "text": "again, function definition. This just tells Python we\nhave this function that",
    "start": "1427660",
    "end": "1433000"
  },
  {
    "text": "does something in our\nprogram, and then, here, we have the function call.",
    "start": "1433000",
    "end": "1439640"
  },
  {
    "text": "As soon as Python sees\nthe function call, that's when it starts\ndoing something useful.",
    "start": "1439640",
    "end": "1445400"
  },
  {
    "text": "Up here, it just sort of\nstores this in memory. So as soon as it sees the\nfunction call is even 3,",
    "start": "1445400",
    "end": "1451640"
  },
  {
    "text": "it looks at the input\nparameter to the function call. And here, you see\nwe have a value.",
    "start": "1451640",
    "end": "1458470"
  },
  {
    "text": "It's an actual, tangible object. It's not some random variable. It's not something abstract.",
    "start": "1458470",
    "end": "1464799"
  },
  {
    "text": "It's a number 3. The i up here from our\nfunction definition",
    "start": "1464800",
    "end": "1470100"
  },
  {
    "text": "is called a formal parameter. It's abstract. We wrote the body of the\nfunction assuming the user",
    "start": "1470100",
    "end": "1475980"
  },
  {
    "text": "will eventually give\nus a value for i. But in the actual\nbody of the function,",
    "start": "1475980",
    "end": "1481139"
  },
  {
    "text": "i is just a variable\nwe're using. Kind of like in the quizzes. For now, I've been\nsaying, assume",
    "start": "1481140",
    "end": "1487140"
  },
  {
    "text": "you're given some number\nn that's defined for you. Write the code\nassuming this number.",
    "start": "1487140",
    "end": "1492150"
  },
  {
    "text": "It's the exact same thing. We write the code at the\nbody of the function assuming we know a value for i.",
    "start": "1492150",
    "end": "1499460"
  },
  {
    "text": "So when Python sees this\nfunction call with 3, it goes into the body of\nthe function and says,",
    "start": "1499460",
    "end": "1505423"
  },
  {
    "text": "all right, what\nare my parameters? There's only one. It's i. And it's going to\nmap them one by one",
    "start": "1505423",
    "end": "1511040"
  },
  {
    "text": "to all the actual parameters\ngiven in the function call. So basically just maps i to 3.",
    "start": "1511040",
    "end": "1517740"
  },
  {
    "text": "And then, it executes\nthe body of the function. So it replaces\neverywhere you see i.",
    "start": "1517740",
    "end": "1522840"
  },
  {
    "text": "So it might have a\nlonger bit of code here, but here, we just have one line. It replaces i with 3.",
    "start": "1522840",
    "end": "1530090"
  },
  {
    "text": "So we have 3%2==0. Now, we have a\ntangible value, false.",
    "start": "1530090",
    "end": "1536750"
  },
  {
    "text": "So this expression is\nreplaced with false. And so this line of code\nhere will return false.",
    "start": "1536750",
    "end": "1543679"
  },
  {
    "text": "And as soon as Python\nsees that return value, it immediately\nexits the function",
    "start": "1543680",
    "end": "1548740"
  },
  {
    "text": "and gives back the\nvalue that you're returning to whoever called it. So this entire function call\nhere will be replaced by false.",
    "start": "1548740",
    "end": "1557440"
  },
  {
    "text": " That was very step-by-step,\nbut does it make sense?",
    "start": "1557440",
    "end": "1565980"
  },
  {
    "text": "OK. So this is a program\nthat doesn't do anything.",
    "start": "1565980",
    "end": "1571139"
  },
  {
    "text": "If somebody were to write\nthis program and run it, it doesn't actually show\nanything to the user.",
    "start": "1571140",
    "end": "1577980"
  },
  {
    "text": "That's because, in\nour program, it's like we had just written a\nline of code that said false.",
    "start": "1577980",
    "end": "1583919"
  },
  {
    "text": "Does that get printed\nto the output? No, right? What we need to do is\ndo something useful now",
    "start": "1583920",
    "end": "1591190"
  },
  {
    "text": "that we have the result\nof a function call. So one useful thing we can do\nis to actually print the result",
    "start": "1591190",
    "end": "1598540"
  },
  {
    "text": "of the function call. So here, we have\nprint, and then, I have my function\ncall I had up here.",
    "start": "1598540",
    "end": "1605379"
  },
  {
    "text": "I'm just sticking it\ninside the print statement. And Python will, as before,\nevaluate is_even(3).",
    "start": "1605380",
    "end": "1612100"
  },
  {
    "text": "This is replaced with false,\nand this line essentially becomes print false. ",
    "start": "1612100",
    "end": "1619240"
  },
  {
    "text": "And so the way this looks\nin our actual code is this. So here, I have this is_even\nfunction, the inefficient way",
    "start": "1619240",
    "end": "1630570"
  },
  {
    "text": "of writing it. I've got two\nfunction calls here. But if I run the code, it\ndoesn't print anything.",
    "start": "1630570",
    "end": "1638170"
  },
  {
    "text": "I need to do something\nuseful with them. And one useful\nthing we can do is to print the result of\nthese function calls.",
    "start": "1638170",
    "end": "1644060"
  },
  {
    "text": "So now that I've wrapped these\ncalls inside a print statement, I see the output in my console. ",
    "start": "1644060",
    "end": "1651870"
  },
  {
    "text": "So we're writing-- so we're\nkind of separating ourselves when we're writing code now.",
    "start": "1651870",
    "end": "1657390"
  },
  {
    "text": "One, we're defining\na function, some code that does something useful. And then, two, we're\nusing this function",
    "start": "1657390",
    "end": "1664919"
  },
  {
    "text": "that we wrote to\nmake function calls. And the beauty about\nwriting the function is we only write it\nonce and debug it once,",
    "start": "1664920",
    "end": "1672090"
  },
  {
    "text": "but now, we can run it as\nmany times as we'd like. Without functions, we'd find\nourselves copying and pasting",
    "start": "1672090",
    "end": "1680280"
  },
  {
    "text": "that piece of code\nthat does something useful in many places\nin our code, which could lead to errors.",
    "start": "1680280",
    "end": "1685559"
  },
  {
    "text": "The code is hard to modify. It's hard to debug,\nall that stuff. ",
    "start": "1685560",
    "end": "1693260"
  },
  {
    "text": "I'll give you a chance to try\nthis out for about a minute. So let's have you\nwrite this code. So here, I'm giving you\nthe function specification.",
    "start": "1693260",
    "end": "1700220"
  },
  {
    "text": "Most of the time, I'll give\nit to you even in quizzes. I want you to write for me\na function called div_by.",
    "start": "1700220",
    "end": "1706610"
  },
  {
    "text": "This one takes in\ntwo parameters, both integers\ngreater than 0 and d.",
    "start": "1706610",
    "end": "1713880"
  },
  {
    "text": "And this function will return\ntrue if d divides n evenly, and false if it does\nnot divide n evenly.",
    "start": "1713880",
    "end": "1724559"
  },
  {
    "text": "So if you test it out\nwith those two values, the first one should\ngive us false, and the second one\nshould give us true.",
    "start": "1724560",
    "end": "1731510"
  },
  {
    "text": "So as usual, this is\ndown in the Python file. Around line 28 is\nwhere you should",
    "start": "1731510",
    "end": "1737987"
  },
  {
    "text": "start typing in your code.  Does anyone have a start for me?",
    "start": "1737987",
    "end": "1744955"
  },
  {
    "text": " Should be very similar\nto what we just-- yeah?",
    "start": "1744955",
    "end": "1751490"
  },
  {
    "text": "AUDIENCE: e%n==0,\nthen print true. ",
    "start": "1751490",
    "end": "1767259"
  },
  {
    "text": "ANA BELL: Else, print false. ",
    "start": "1767260",
    "end": "1774260"
  },
  {
    "text": "So let's run the function. Oh, let's just do it with one. So the first one, I'm\nexpecting to print false.",
    "start": "1774260",
    "end": "1780525"
  },
  {
    "text": " It does print false, but it also\nprints this weird none right",
    "start": "1780525",
    "end": "1788450"
  },
  {
    "text": "after it. Actually, this is\nsomething we want we're going to talk\nabout next lecture. But does anyone\nknow an improvement",
    "start": "1788450",
    "end": "1795500"
  },
  {
    "text": "we can make to the code? Yes. AUDIENCE: [INAUDIBLE]",
    "start": "1795500",
    "end": "1801230"
  },
  {
    "text": "ANA BELL: Yes, actually. You're right. So instead of printing true,\nremember, it's a function.",
    "start": "1801230",
    "end": "1807140"
  },
  {
    "text": "We want it to give us back\nthe value true, right? So instead of printing,\nwe'll do a return true.",
    "start": "1807140",
    "end": "1815179"
  },
  {
    "text": "And we don't need the\nparentheses in this case. And then, we'll\ndo a return false.",
    "start": "1815180",
    "end": "1820380"
  },
  {
    "start": "1820380",
    "end": "1828130"
  },
  {
    "text": "So now, we don't have that\nweird none right after it. That's something I was going\nto talk about in next lecture.",
    "start": "1828130",
    "end": "1833929"
  },
  {
    "text": "But basically, when\nwe had print here, what did the function return?",
    "start": "1833930",
    "end": "1839920"
  },
  {
    "text": "Did it have a return\nstatement inside it? No, right? And so if there's no return\nstatement inside the function,",
    "start": "1839920",
    "end": "1847960"
  },
  {
    "text": "Python automatically\nreturns the special none. This is something we'll talk\nabout in next lecture more",
    "start": "1847960",
    "end": "1853679"
  },
  {
    "text": "in detail. But the return true, return\nfalse is correct here. Yes?",
    "start": "1853680",
    "end": "1859000"
  },
  {
    "text": "AUDIENCE: Do you\nneed the details, or do you just return-- ANA BELL: Yeah. Yeah.",
    "start": "1859000",
    "end": "1864269"
  },
  {
    "text": "You don't need the return. The if else, just like before. So we can just do\nreturn this directly.",
    "start": "1864270",
    "end": "1872655"
  },
  {
    "text": " And we can run it\nwith the other one. ",
    "start": "1872655",
    "end": "1881519"
  },
  {
    "text": "So the second one should\nactually return true. But it returned false. Does anyone know the problem?",
    "start": "1881520",
    "end": "1887620"
  },
  {
    "text": "Yeah? AUDIENCE: It has a remainder. ANA BELL: Yes, exactly. So actually, we\nwant the remainder",
    "start": "1887620",
    "end": "1894510"
  },
  {
    "text": "when we divide n by d. So this is just flipped\naround and %d==0.",
    "start": "1894510",
    "end": "1902730"
  },
  {
    "text": "Yeah. So it's a good thing we had two\ntest cases to test for that.",
    "start": "1902730",
    "end": "1908060"
  },
  {
    "text": "And you don't have to test\nthem with such big numbers. You could obviously test them\nwith some smaller numbers as well.",
    "start": "1908060",
    "end": "1914580"
  },
  {
    "text": "So let's zoom out a little\nbit and talk about how exactly functions are stored in memory. Because I mentioned this thing\nabout defining a function,",
    "start": "1914580",
    "end": "1922250"
  },
  {
    "text": "and that just doesn't\ndo anything really that we can see. But what exactly\nhappens in memory?",
    "start": "1922250",
    "end": "1928260"
  },
  {
    "text": "Well, let's think\nabout what happens when we create variables.",
    "start": "1928260",
    "end": "1933380"
  },
  {
    "text": "So when we create a is equal to\n3 inside memory, or the program",
    "start": "1933380",
    "end": "1938740"
  },
  {
    "text": "scope-- again, we'll talk about\nthis next lecture. But you can think of\nthis as the memory. What happens is a\nbecomes a variable",
    "start": "1938740",
    "end": "1945580"
  },
  {
    "text": "that's bound to value 3. b equals 4 is a variable\nb bound to value 4. And c is going to\nbe bound to value 7.",
    "start": "1945580",
    "end": "1952600"
  },
  {
    "text": "Clear, right? We already know this. What happens when we\ncreate a function?",
    "start": "1952600",
    "end": "1957980"
  },
  {
    "text": "So again, this is something\nI might write in a code file. The top bit is my\nfunction definition.",
    "start": "1957980",
    "end": "1963980"
  },
  {
    "text": "So as soon as Python\nsees this def keyword, everything that's\nindented, that's part",
    "start": "1963980",
    "end": "1970110"
  },
  {
    "text": "of the function\ndefinition in the body is essentially just some code.",
    "start": "1970110",
    "end": "1975755"
  },
  {
    "text": " To Python, it does not care at\nthis point what that code is",
    "start": "1975755",
    "end": "1982630"
  },
  {
    "text": "or what that code does. All it knows is that there\nis a function object--",
    "start": "1982630",
    "end": "1988419"
  },
  {
    "text": "and functions are actually\nobjects in Python. There is a function\nobject whose name is even.",
    "start": "1988420",
    "end": "1995110"
  },
  {
    "text": "That is all it knows when we get\nto this point here in the code, right after we\ndefine the function,",
    "start": "1995110",
    "end": "2000960"
  },
  {
    "text": "right before a equals. So we think about the function\nas kind of like a \"variable,\"",
    "start": "2000960",
    "end": "2007980"
  },
  {
    "text": "quote unquote. It's not actually a\nvariable, but it's like a variable\nwhose name is even, and it points to-- it's\nbound to some code in memory.",
    "start": "2007980",
    "end": "2016620"
  },
  {
    "text": "And we don't care what that\ncode is right now because we might never use it. We only care what the code is\nwhen we make function calls.",
    "start": "2016620",
    "end": "2024570"
  },
  {
    "text": "So down here is where\nthe action actually happens when we make\nour function calls.",
    "start": "2024570",
    "end": "2030139"
  },
  {
    "text": "I have a is going to be,\nas usual, a variable. That's going to be\nbound to some value.",
    "start": "2030140",
    "end": "2038550"
  },
  {
    "text": "So the function definition is\nkind of just like a black box. Once you wrote it\nonce and it works,",
    "start": "2038550",
    "end": "2044270"
  },
  {
    "text": "you don't care anymore how it\nactually achieves its task. All you care is that it takes\nin a number and tells you",
    "start": "2044270",
    "end": "2051949"
  },
  {
    "text": "whether that number is\neven or odd via true false. So down here where we\nmake our function calls,",
    "start": "2051949",
    "end": "2058969"
  },
  {
    "text": "we're just using our black box. And we're using the black\nbox by making function calls.",
    "start": "2058969",
    "end": "2065908"
  },
  {
    "text": "So a is going to be\na variable that's bound to the value\nreturned by is even.",
    "start": "2065909",
    "end": "2072169"
  },
  {
    "text": "So it's going to be based\non the function call, false. And then, here, I have\nanother function call.",
    "start": "2072170",
    "end": "2078649"
  },
  {
    "text": "I'm using this useful piece\nof code that I wrote up here. And b is going to be a\nvariable that's bound to true.",
    "start": "2078650",
    "end": "2085940"
  },
  {
    "text": "And c is going to be a\nvariable that's bound to true. ",
    "start": "2085940",
    "end": "2092339"
  },
  {
    "text": "Does that make sense? Kind of separating\nthe code we write which doesn't run until we\nactually make function calls.",
    "start": "2092340",
    "end": "2099599"
  },
  {
    "text": "That's the thing\nabout functions. And that's how it helps\nus write more robust code.",
    "start": "2099600",
    "end": "2105510"
  },
  {
    "text": " So now, here, we can have a\nmore complex piece of code",
    "start": "2105510",
    "end": "2112400"
  },
  {
    "text": "where we're using the\nfunction that we wrote. Not just making a function\ncall and printing the result,",
    "start": "2112400",
    "end": "2118849"
  },
  {
    "text": "but we're actually using it\ninside a more interesting program. So here, I've got\na program that will",
    "start": "2118850",
    "end": "2125269"
  },
  {
    "text": "print for me the numbers\nbetween 1 and 10, and it'll print whether\nthat number is odd or even.",
    "start": "2125270",
    "end": "2130820"
  },
  {
    "text": "So if you were just to read this\ncode, it's pretty easy to read, right? You have a loop that goes\nthrough the numbers 1 to 10,",
    "start": "2130820",
    "end": "2138619"
  },
  {
    "text": "not including 10, and then,\nI have this if is_even.",
    "start": "2138620",
    "end": "2145110"
  },
  {
    "text": "Well, that's cool. Here, I'm using the function\nthat I wrote kind of just in the middle of\nanother piece of code.",
    "start": "2145110",
    "end": "2153869"
  },
  {
    "text": "Which is fine. Because as I said\na few slides ago, function calls are\nbasically just expressions.",
    "start": "2153870",
    "end": "2162480"
  },
  {
    "text": "They get run. They get evaluated. You one value back out of them. And then, that value\nreplaces the function call.",
    "start": "2162480",
    "end": "2169690"
  },
  {
    "text": "So that's fine. Let's use the is_even result,\nthe return from the is_even",
    "start": "2169690",
    "end": "2174930"
  },
  {
    "text": "method inside a conditional. ",
    "start": "2174930",
    "end": "2180574"
  },
  {
    "text": "If calling is_even\nwith i returns true, that means if the\nnumber is even, we print that value, comma even.",
    "start": "2180574",
    "end": "2187380"
  },
  {
    "text": "Else, we print that\nvalue, comma odd. So here, I'm not\ndefining a function. Notice, it's not wrapped in\na def or anything like that.",
    "start": "2187380",
    "end": "2194700"
  },
  {
    "text": "I'm just using a function\nthat I already wrote. So inside here.",
    "start": "2194700",
    "end": "2201080"
  },
  {
    "text": "I'll just comment that out. This is the code we\njust had on the slide. So again, notice\nit's not within.",
    "start": "2201080",
    "end": "2207420"
  },
  {
    "text": "It's not wrapped\nwithin a function. It's just a loop that tells\nme the numbers 1 at a time,",
    "start": "2207420",
    "end": "2212849"
  },
  {
    "text": "whether they're odd or even. So prints 1, comma-- yeah? AUDIENCE: What are you doing\nwhen you select [INAUDIBLE]",
    "start": "2212850",
    "end": "2219280"
  },
  {
    "text": "comment and you make it like-- ANA BELL: Oh, when\nI select everything. I just use spider-like\nability to--",
    "start": "2219280",
    "end": "2225700"
  },
  {
    "text": "so I do Control 1, or Command\n1, probably, on a Mac. And it just comments and\nuncomments things in batch.",
    "start": "2225700",
    "end": "2233069"
  },
  {
    "text": "Yeah. Very useful. Yeah. And so this code is now\nvery easy to modify.",
    "start": "2233070",
    "end": "2238810"
  },
  {
    "text": "I can just choose 100 and\nthen I can run it again. And it gives me the numbers 1\nthrough hundreds odd or even.",
    "start": "2238810",
    "end": "2244600"
  },
  {
    "text": "And you can imagine using\nyour is_even function in a more complex setting. And is_even is a really\nsimple function too write,",
    "start": "2244600",
    "end": "2252813"
  },
  {
    "text": "but again, you can\nimagine writing a more complex function. And then, that complex function\nisn't a whole chunk of code",
    "start": "2252813",
    "end": "2259480"
  },
  {
    "text": "that just gets stuck into\nthis program, this loop. It's going to be a\nfunction that you call that you can just easily\nread the specification for",
    "start": "2259480",
    "end": "2267070"
  },
  {
    "text": "and you don't need to\ncompletely understand how it works in order to use it.",
    "start": "2267070",
    "end": "2272410"
  },
  {
    "start": "2272410",
    "end": "2278329"
  },
  {
    "text": "So we're going to go\nthrough one other example to write a little function. And this will also\nshowcase the best practices",
    "start": "2278330",
    "end": "2286670"
  },
  {
    "text": "for writing a\nfunction and writing code, especially maybe\nin a quiz situation or something like that.",
    "start": "2286670",
    "end": "2292040"
  },
  {
    "text": "How to write\nincremental code, how to test it a little bit\nat a time, and so on. So the last example\nI want to go through",
    "start": "2292040",
    "end": "2298490"
  },
  {
    "text": "is I want to write some code\nthat adds all the odd integers between and including a and b.",
    "start": "2298490",
    "end": "2305579"
  },
  {
    "text": "Might be something\nyou're asked on a quiz.  The first thing you do when\nyou're faced with such a task",
    "start": "2305580",
    "end": "2313440"
  },
  {
    "text": "is to think about a nice\nname for the function. So sum_odd or sum_odds\nis a reasonable name.",
    "start": "2313440",
    "end": "2319350"
  },
  {
    "text": "The inputs to the function,\nwell, I've got two endpoints. I want to sum odd\nnumbers in between. So the inputs might well\nbe my two endpoints.",
    "start": "2319350",
    "end": "2327269"
  },
  {
    "text": "And then, what is the thing\nyour function achieves? Well, in the end, it's\ngoing to give me some sum.",
    "start": "2327270",
    "end": "2333710"
  },
  {
    "text": "So let's call that sum\na variable sum_of_odds, and we'll return it at\nthe end of our function.",
    "start": "2333710",
    "end": "2339645"
  },
  {
    "text": " And in between, we're\ngoing to have some code. ",
    "start": "2339645",
    "end": "2347330"
  },
  {
    "text": "So first thing to do is to\nnot write code right away. When you're faced\nwith a task, again, on a quiz or\nsomething like that,",
    "start": "2347330",
    "end": "2353230"
  },
  {
    "text": "it's best to take\na piece of paper, write a little bit,\none example, and try to think about how you'd solve\nit, not like a human would.",
    "start": "2353230",
    "end": "2361720"
  },
  {
    "text": "Because for us, we would\nimmediately know the sum. It's very easy for humans\nto identify the solutions",
    "start": "2361720",
    "end": "2368020"
  },
  {
    "text": "to these problems. But try to think about\nhow you would write-- what kind of a recipe\nwould work for this?",
    "start": "2368020",
    "end": "2373840"
  },
  {
    "text": "Would you loop? Would you have a conditional? Would you use a for\nloop, or a while loop, and a bunch\nof other concepts",
    "start": "2373840",
    "end": "2380799"
  },
  {
    "text": "that we'll learn about in\nthe following lectures. But the key thing is to just\nnot write code right away.",
    "start": "2380800",
    "end": "2386840"
  },
  {
    "text": "So if we start with a really\nsimple example on paper, we can say, let's choose end\npoints a is 2 and b is 4.",
    "start": "2386840",
    "end": "2395960"
  },
  {
    "text": "On paper, I would probably\nwrite out 2, 3, 4 in a row. So I know the numbers\nI need to look at.",
    "start": "2395960",
    "end": "2402140"
  },
  {
    "text": "I would say 2 is\nmy a, 4 is my b. I need to look at every one of\nthese numbers one at a time.",
    "start": "2402140",
    "end": "2408830"
  },
  {
    "text": "Reasonable. I can do another example. Sorry. And I know what the\nanswer should be. So I figure out what\nthe answer should be so",
    "start": "2408830",
    "end": "2415640"
  },
  {
    "text": "that when I write\nmy code, I actually know what I'm looking for. I look at another example,\nlet's say a little bit more",
    "start": "2415640",
    "end": "2421940"
  },
  {
    "text": "complicated, a bigger range. a is 2, b is 7. I try to use the\nsame strategy I used, same recipe I used to solve that\nsimpler example in this harder",
    "start": "2421940",
    "end": "2430650"
  },
  {
    "text": "one. So again, I'm going to\nwrite out all the numbers between 2 and 7 inclusive. This is my first,\nthis is my last.",
    "start": "2430650",
    "end": "2437270"
  },
  {
    "text": "And my strategy was to\ngo through one at a time, and if it's odd, I take\nit to my running sum,",
    "start": "2437270",
    "end": "2443570"
  },
  {
    "text": "add it to my running sum,\nand if it's even, I don't. I ignore it. And again, I know the answer\nfor this should be 50.",
    "start": "2443570",
    "end": "2451289"
  },
  {
    "text": "So with these two examples in\nmind, I can start writing code. But instead of writing code\nfor the big problem that",
    "start": "2451290",
    "end": "2458490"
  },
  {
    "text": "might include some nuances\nor some edge cases, I can actually try to\nsolve a similar problem.",
    "start": "2458490",
    "end": "2463740"
  },
  {
    "text": "So instead of summing all the\nodd numbers between a and b, let's just sum all the\nnumbers between a and b",
    "start": "2463740",
    "end": "2469680"
  },
  {
    "text": "and see if we can get\ncode working for that. Once we do, figuring\nout the odd ones should be a small\ntweak to our code.",
    "start": "2469680",
    "end": "2478230"
  },
  {
    "text": "So if we start with figuring out\nthe sum of all the odd numbers between and including a and\nb, that sounds like a loop.",
    "start": "2478230",
    "end": "2484560"
  },
  {
    "text": "Because I knew, when I\nwrote my example on paper, I'd have to touch each number\nbetween and including a and b.",
    "start": "2484560",
    "end": "2490920"
  },
  {
    "text": "So I know I need to loop through\nevery one of these values. While or a for loop?",
    "start": "2490920",
    "end": "2497030"
  },
  {
    "text": "Your choice. In the slides, I'll do both,\njust to see what it looks like. So with a for loop, it's easy.",
    "start": "2497030",
    "end": "2503220"
  },
  {
    "text": "It's just for i in range a b. But with a while loop, remember,\nwe have to initialize our loop variable, if we have one.",
    "start": "2503220",
    "end": "2509839"
  },
  {
    "text": "i equals a. Our loop condition is while\ni is less than or equal to b.",
    "start": "2509840",
    "end": "2515000"
  },
  {
    "text": "So we're going to\nloop through while I'm looking at all these values\nup to and including b. And I need to remember\nto increment my loop",
    "start": "2515000",
    "end": "2522110"
  },
  {
    "text": "variable within the loop. By one each time, in this case. ",
    "start": "2522110",
    "end": "2528770"
  },
  {
    "text": "And then, what do I\ndo within my loop? Well, I'm going\nto-- remember, we're solving a similar problem. I'm going to keep a running sum.",
    "start": "2528770",
    "end": "2535320"
  },
  {
    "text": "So as soon as I see a new i,\nI'm going to add it to my sum.",
    "start": "2535320",
    "end": "2540400"
  },
  {
    "text": "I realize here, probably\nmy id would show me that there's an error. I didn't initialize sum of odd. So I remember to initialize sum\nof odds right before the loop.",
    "start": "2540400",
    "end": "2548359"
  },
  {
    "text": "And then, this is a\ngood place to test the code for a little bit. So we'll test it with a really\nsimple example, 2, comma 4.",
    "start": "2548360",
    "end": "2556300"
  },
  {
    "text": "If we test it with 2, comma\n4, the for loop gives me a 5, but the while loop gives me a 9.",
    "start": "2556300",
    "end": "2562930"
  },
  {
    "text": "So you guys might have\nnoticed what the problem is. My for loop goes through\nup to but not including",
    "start": "2562930",
    "end": "2568630"
  },
  {
    "text": "the n variable, the b. So we can add a print\nstatement, in case you",
    "start": "2568630",
    "end": "2575230"
  },
  {
    "text": "didn't figure that out,\nand the print statement would actually tell us. It tells us what\nwe're incrementing.",
    "start": "2575230",
    "end": "2580720"
  },
  {
    "text": "First, it's 2, then, it's\n3, but I never hit the 4. So the fix is to just change\nmy end range to be plus 1.",
    "start": "2580720",
    "end": "2589970"
  },
  {
    "text": "And then, we run it again,\nand we see the answers match. And this solves\nthe bigger problem.",
    "start": "2589970",
    "end": "2596880"
  },
  {
    "text": "So now, all we need\nto do is adding the nuance, the piece where we\njust grabbed the odd numbers.",
    "start": "2596880",
    "end": "2603030"
  },
  {
    "text": "And here, we say, well, if I'm\njust grabbing the odd numbers, I only want to add\ni to my sum of odds",
    "start": "2603030",
    "end": "2610520"
  },
  {
    "text": "when I see an odd number. So here, I could use my is_even\nfunction that I already wrote.",
    "start": "2610520",
    "end": "2615560"
  },
  {
    "text": "I would say if not is_even, or\nI can just do it all over again. If i%2==1, then we do this.",
    "start": "2615560",
    "end": "2624170"
  },
  {
    "text": "And now, we can run it again,\nand hopefully, this now matches with the\nexample I had on paper.",
    "start": "2624170",
    "end": "2629840"
  },
  {
    "text": "And it does. So the idea here is to try to\nsolve a simpler problem first, and then, as you see more\nnuances to the problem,",
    "start": "2629840",
    "end": "2637310"
  },
  {
    "text": "add in the functionality\njust a little bit at a time so you don't actually get bogged\ndown by a whole bunch of issues",
    "start": "2637310",
    "end": "2644000"
  },
  {
    "text": "that might come up when you\nwrote a whole bunch of code. The last step is just to\ntest it on the other example,",
    "start": "2644000",
    "end": "2650440"
  },
  {
    "text": "just to make sure\nthat it still works. And so if we print sum_of_odds\nbetween 2 and 7 again,",
    "start": "2650440",
    "end": "2655960"
  },
  {
    "text": "this matches what I had\nwritten down on paper. If you don't want to\nuse print statements,",
    "start": "2655960",
    "end": "2662000"
  },
  {
    "text": "the Python tutor is also\na great debugging tool. So testing code\noften, very useful.",
    "start": "2662000",
    "end": "2668956"
  },
  {
    "text": "I think I've stressed this\nin previous lectures as well. Using print or the Python tutor\nto debug is also very useful.",
    "start": "2668957",
    "end": "2675790"
  },
  {
    "text": "I don't actually intend\nto go through this try it, but this, along with a\nbunch of other examples,",
    "start": "2675790",
    "end": "2684059"
  },
  {
    "text": "things to try at home\nare in the Python file. So just functions you\ncan write is palindrome,",
    "start": "2684060",
    "end": "2690300"
  },
  {
    "text": "this keep consonants,\nthis first_to_last_diff. Read the function\nspecification and try to write code that\nmatches the specification.",
    "start": "2690300",
    "end": "2698250"
  },
  {
    "text": "And as usual, the answers\nare in the Python file but, please, please, try to\ndo them on your own first before looking at the answers.",
    "start": "2698250",
    "end": "2704670"
  },
  {
    "text": " A quick summary.",
    "start": "2704670",
    "end": "2710190"
  },
  {
    "text": "Functions are very useful. Allows us to abstract\ncertain useful tasks. Basically, abstract\naway functionality",
    "start": "2710190",
    "end": "2716940"
  },
  {
    "text": "that we might reuse many\ntimes in our program. Functions take in inputs. They have something to return.",
    "start": "2716940",
    "end": "2723512"
  },
  {
    "text": "We're going to see\nnext time what happens when we don't return anything.",
    "start": "2723512",
    "end": "2728609"
  },
  {
    "text": "Creating the function is\ndifferent than running the function. So you create the\nfunction once, but you",
    "start": "2728610",
    "end": "2734760"
  },
  {
    "text": "can run it many, many times. And that's what makes\nfunctions useful. It makes code easy to\nwrite, read, debug, modify.",
    "start": "2734760",
    "end": "2742700"
  },
  {
    "text": "Leads to a very\nnice robust code. ",
    "start": "2742700",
    "end": "2753000"
  }
]