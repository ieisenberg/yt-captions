[
  {
    "start": "0",
    "end": "27000"
  },
  {
    "text": "In order for multiple processes to be able\nto run on the same computer, using a shared",
    "start": "1090",
    "end": "6300"
  },
  {
    "text": "address space, we need to have an operating\nsystem that controls which process gets to",
    "start": "6300",
    "end": "11350"
  },
  {
    "text": "run at any given point in time and ensures\nthat the state that is currently loaded into",
    "start": "11350",
    "end": "16350"
  },
  {
    "text": "the system is the state of the current process.",
    "start": "16350",
    "end": "20190"
  },
  {
    "text": "Through the following example we will take\na closer look at how the operating system",
    "start": "20190",
    "end": "24660"
  },
  {
    "text": "for the beta works.",
    "start": "24660",
    "end": "26539"
  },
  {
    "text": "We begin by examining the code responsible\nfor maintaining the current processor state",
    "start": "26540",
    "end": "31760"
  },
  {
    "start": "27000",
    "end": "27000"
  },
  {
    "text": "as well as scheduling which process should\nrun at any given point in time.",
    "start": "31760",
    "end": "36470"
  },
  {
    "text": "The operating system uses a structure called\nMState to keep track of the value of the 32",
    "start": "36470",
    "end": "42410"
  },
  {
    "text": "registers for each of the running processes.",
    "start": "42410",
    "end": "45390"
  },
  {
    "text": "The UserMState variable holds the state of\nthe currently running process.",
    "start": "45390",
    "end": "50860"
  },
  {
    "text": "The ProcTbl or process table, holds all the\nnecessary state for each of the processes",
    "start": "50860",
    "end": "56240"
  },
  {
    "text": "that runs on the machine.",
    "start": "56240",
    "end": "58470"
  },
  {
    "text": "For each process, it stores the value of all\nof its registers in the State variable.",
    "start": "58470",
    "end": "65899"
  },
  {
    "text": "Additional state may be stored per process.",
    "start": "65899",
    "end": "68729"
  },
  {
    "text": "Examples of some additional state that would\ngo in a process table are a page map per process",
    "start": "68729",
    "end": "74130"
  },
  {
    "text": "if we want to use virtual memory.",
    "start": "74130",
    "end": "76840"
  },
  {
    "text": "Another example, is a keyboard identifier,\nthat associates hardware with a particular",
    "start": "76840",
    "end": "82218"
  },
  {
    "text": "process.",
    "start": "82219",
    "end": "83389"
  },
  {
    "text": "The Cur, or current variable, holds the index\nof the currently running process.",
    "start": "83389",
    "end": "89159"
  },
  {
    "text": "When we want to switch control from one process\nto another, we call the Scheduler.",
    "start": "89159",
    "end": "94479"
  },
  {
    "start": "94000",
    "end": "94000"
  },
  {
    "text": "The Scheduler first stores the state of the\ncurrently running process into the process",
    "start": "94479",
    "end": "99288"
  },
  {
    "text": "table.",
    "start": "99289",
    "end": "100419"
  },
  {
    "text": "Next, it increments the current process by\n1.",
    "start": "100419",
    "end": "104849"
  },
  {
    "text": "If the current process was process N â€“ 1,\nthen it goes back to process 0.",
    "start": "104849",
    "end": "110868"
  },
  {
    "text": "Finally, it reloads the user variable with\nthe state for the new current process.",
    "start": "110869",
    "end": "116929"
  },
  {
    "text": "In order to be able to run a diagnostic program\non one process that samples the values in",
    "start": "116929",
    "end": "122319"
  },
  {
    "start": "117000",
    "end": "117000"
  },
  {
    "text": "the PC of another process, a supervisor call\nnamed SamplePC is provided for you.",
    "start": "122319",
    "end": "129810"
  },
  {
    "text": "The C portion of the SVC handler is provided\nfor you here.",
    "start": "129810",
    "end": "135930"
  },
  {
    "text": "It is incomplete, so our first goal is to\ndetermine what should replace the ???.",
    "start": "135930",
    "end": "142859"
  },
  {
    "text": "We are told that the way SamplePC SVC works\nis that it takes a process number p in R0,",
    "start": "142860",
    "end": "150510"
  },
  {
    "text": "and returns in R1 the value currently in the\nprogram counter of process p.",
    "start": "150510",
    "end": "156340"
  },
  {
    "text": "The handler shown here reads register 0 from\nthe UserMState data structure and stores the",
    "start": "156340",
    "end": "162250"
  },
  {
    "text": "value into variable p.",
    "start": "162250",
    "end": "165180"
  },
  {
    "text": "This is the number of the process that is\nto be monitored.",
    "start": "165180",
    "end": "168530"
  },
  {
    "text": "In order to determine the value of the PC\nof process p, one can look up the value of",
    "start": "168530",
    "end": "174079"
  },
  {
    "text": "the XP register that was saved for process\np the last time process p was run.",
    "start": "174079",
    "end": "180150"
  },
  {
    "text": "The XP register holds the value of the next\nPC address.",
    "start": "180150",
    "end": "184349"
  },
  {
    "text": "So reading the XP register from ProcTbl[p]\ntells us the next value of the pc for process",
    "start": "184349",
    "end": "192069"
  },
  {
    "text": "p.",
    "start": "192069",
    "end": "193420"
  },
  {
    "text": "The pc value is to be returned in register\nR1 of the current program.",
    "start": "193420",
    "end": "198829"
  },
  {
    "text": "This means that the missing code is UserMState.Regs[1]\nand that should be assigned the value of pc.",
    "start": "198829",
    "end": "207000"
  },
  {
    "start": "207000",
    "end": "207000"
  },
  {
    "text": "Suppose you have a compute-bound process consisting\nof a single 10,000 instruction loop.",
    "start": "207000",
    "end": "212879"
  },
  {
    "text": "You use the SamplePC supervisor call to sample\nthe PC while running this loop.",
    "start": "212879",
    "end": "219129"
  },
  {
    "text": "You notice many repeated values in the results\nof the SamplePC code.",
    "start": "219129",
    "end": "223889"
  },
  {
    "text": "You realize that the reason this is happening\nis because every time your profiling process",
    "start": "223889",
    "end": "229879"
  },
  {
    "text": "gets scheduled to run, it makes many SamplePC\ncalls but the other processes aren't running",
    "start": "229879",
    "end": "236140"
  },
  {
    "text": "so you are getting the same sampled PC multiple\ntimes.",
    "start": "236140",
    "end": "240700"
  },
  {
    "text": "How can the repeated samples be avoided?",
    "start": "240700",
    "end": "243520"
  },
  {
    "start": "243000",
    "end": "243000"
  },
  {
    "text": "To avoid repeated samples, we add a call to\nScheduler() in our SamplePC handler.",
    "start": "243520",
    "end": "249409"
  },
  {
    "text": "This ensures that every time that the profiler\nprocess is scheduled, it only samples a single",
    "start": "249409",
    "end": "254879"
  },
  {
    "text": "PC value and then let's another process run.",
    "start": "254879",
    "end": "258900"
  },
  {
    "text": "Suppose that you continue using the original\nversion of your SamplePC handler, which does",
    "start": "258900",
    "end": "263790"
  },
  {
    "start": "259000",
    "end": "259000"
  },
  {
    "text": "not call Scheduler, and you use it to test\nthis code which repeatedly calls the GetKey()",
    "start": "263790",
    "end": "270000"
  },
  {
    "text": "supervisor call to read a character from the\nkeyboard, and then calls the WrCh() supervisor",
    "start": "270000",
    "end": "276130"
  },
  {
    "text": "call to write the character that was just\nread.",
    "start": "276130",
    "end": "280520"
  },
  {
    "text": "We want to answer the question of which PC\nvalue will be the one reported the most often.",
    "start": "280520",
    "end": "287138"
  },
  {
    "text": "Address 0x100 which is the address of the\nGetKey() call is reported the most often because",
    "start": "287139",
    "end": "293740"
  },
  {
    "text": "most of the time when GetKey() is called,\nthere is no key stroke waiting to be processed.",
    "start": "293740",
    "end": "299460"
  },
  {
    "text": "This means that the GetKey() call will get\nprocessed over and over again until there",
    "start": "299460",
    "end": "303870"
  },
  {
    "text": "is finally a key to process.",
    "start": "303870",
    "end": "306020"
  },
  {
    "text": "The result of this is that the PC value that\nshows up the most often is 0x100.",
    "start": "306020",
    "end": "312520"
  },
  {
    "start": "312000",
    "end": "312000"
  },
  {
    "text": "The last question we want to consider is what\nbehavior is observed when the profiler which",
    "start": "312520",
    "end": "317000"
  },
  {
    "text": "is running in process 0 profiles process 0\nitself.",
    "start": "317000",
    "end": "321509"
  },
  {
    "text": "Assume that the profiler code consists primarily\nof one big loop which has a single call to",
    "start": "321509",
    "end": "327740"
  },
  {
    "text": "the SamplePC supervisor call at instruction\n0x1000.",
    "start": "327740",
    "end": "332949"
  },
  {
    "text": "The rest of the loop processes the data that\nwas collected by the SamplePC call.",
    "start": "332949",
    "end": "338300"
  },
  {
    "text": "The question we want to answer is what is\nobserved in the SamplePC results.",
    "start": "338300",
    "end": "344470"
  },
  {
    "text": "We are given 4 choices to select from.",
    "start": "344470",
    "end": "348229"
  },
  {
    "text": "The first choice to consider is whether or\nnot all the sampled PC values point to the",
    "start": "348229",
    "end": "353630"
  },
  {
    "text": "kernel OS code.",
    "start": "353630",
    "end": "355820"
  },
  {
    "text": "This choice is false because if it were true\nit would mean that you somehow managed to",
    "start": "355820",
    "end": "360139"
  },
  {
    "text": "interrupt kernel code which is not allowed\nby the beta.",
    "start": "360139",
    "end": "365830"
  },
  {
    "text": "The next choice to consider is whether the\nsampled PC is always 0x1004.",
    "start": "365830",
    "end": "372650"
  },
  {
    "text": "This seems like it might be a correct choice\nbecause the SamplePC supervisor call is at",
    "start": "372650",
    "end": "377659"
  },
  {
    "text": "address 0x1000, so storing PC + 4 would result\nin 0x1004 being stored into the UserMState.Regs[XP].",
    "start": "377659",
    "end": "388199"
  },
  {
    "text": "However, if you look closely at the SamplePC\nhandler you see that the XP register is read",
    "start": "388199",
    "end": "395129"
  },
  {
    "start": "389000",
    "end": "389000"
  },
  {
    "text": "from the ProcTbl.",
    "start": "395129",
    "end": "396280"
  },
  {
    "text": "But the UserMState regs are only written to\nProcTbl when Scheduler() is called, so reading",
    "start": "396280",
    "end": "402819"
  },
  {
    "text": "the value from ProcTbl would provide the last\nvalue of the PC when process 0 was last interrupted.",
    "start": "402819",
    "end": "410620"
  },
  {
    "text": "To get the correct value, you would need to\nread UserMState.Regs[XP] instead.",
    "start": "410620",
    "end": "416620"
  },
  {
    "text": "The third choice is that the SamplePC call\nnever returns.",
    "start": "416620",
    "end": "422610"
  },
  {
    "text": "There is no reason for this to be true.",
    "start": "422610",
    "end": "425918"
  },
  {
    "text": "Finally, the last choice is \"None of the above\".",
    "start": "425919",
    "end": "430039"
  },
  {
    "text": "Since none of the other choices were correct,\nthis is the correct answer.",
    "start": "430039",
    "end": "434360"
  }
]