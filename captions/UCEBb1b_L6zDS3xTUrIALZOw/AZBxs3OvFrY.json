[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING] ",
    "start": "0",
    "end": "17300"
  },
  {
    "text": "ANA BELL: OK. Let's get started\nwith today's lecture. It's going to be more\nof a chill lecture",
    "start": "17300",
    "end": "24680"
  },
  {
    "text": "than what we've\ndone in the past, even though we've got quite\na few things to cover, as you can see from\nthis title slide.",
    "start": "24680",
    "end": "31369"
  },
  {
    "text": "I'm not going to go\nsuper duper fast, so please feel free to\nask lots of questions. And then the second\nhalf of the lecture",
    "start": "31370",
    "end": "37423"
  },
  {
    "text": "will be really\nchill because we're going to be talking about\ntesting and debugging strategies. So super high-level topic.",
    "start": "37423",
    "end": "45180"
  },
  {
    "text": "But first, we're going to tie up\nsome loose ends related to lists and relating to functions.",
    "start": "45180",
    "end": "52050"
  },
  {
    "text": "So we're not going to\nintroduce a lot of new syntax. These ideas are more optional\nin your day to day coding,",
    "start": "52050",
    "end": "59210"
  },
  {
    "text": "but they're just really,\nreally nice to know. So let's first start talking\nabout this idea of a list",
    "start": "59210",
    "end": "65480"
  },
  {
    "text": "comprehension. So you've been writing\nfunctions that deal with lists.",
    "start": "65480",
    "end": "72619"
  },
  {
    "text": "And one really common pattern\nthat I hope you've seen so far is the following.",
    "start": "72620",
    "end": "78659"
  },
  {
    "text": "So this code right\nhere shows something that we've definitely\ncoded together and you've definitely\ncoded in the finger",
    "start": "78660",
    "end": "84950"
  },
  {
    "text": "exercises and the quizzes. And so it is a really\ncommon pattern. So the idea here is,\nyou have a function that",
    "start": "84950",
    "end": "92479"
  },
  {
    "text": "creates a new list, where\nthe elements of this new list are a function of\nthe input list.",
    "start": "92480",
    "end": "97590"
  },
  {
    "text": "OK? So the pattern here is,\nwe create a new empty list inside the function.",
    "start": "97590",
    "end": "103370"
  },
  {
    "text": "We have a loop over every\nelement in the input, and to each one of these\nelements in the input,",
    "start": "103370",
    "end": "109040"
  },
  {
    "text": "we apply the same function. So in this particular case,\nwe're taking that element and squaring it.",
    "start": "109040",
    "end": "114680"
  },
  {
    "text": "And each one of\nthese elements we're appending to this new list,\noriginally empty, until we've",
    "start": "114680",
    "end": "120620"
  },
  {
    "text": "reached-- we've done this function\nto every element in L. And then we return this\nnewly created list.",
    "start": "120620",
    "end": "127580"
  },
  {
    "text": "So since this is a really common\nthing that programmers do, Python allows you to do\nthis exact functionality",
    "start": "127580",
    "end": "136320"
  },
  {
    "text": "with one line of code. And the way we do this\nis using something called a list comprehension.",
    "start": "136320",
    "end": "143019"
  },
  {
    "text": "So the way that we do a list\ncomprehension, essentially taking these four lines of\ncode from this function,",
    "start": "143020",
    "end": "149190"
  },
  {
    "text": "we are going to write them\nin this one line of code that looks something like this.",
    "start": "149190",
    "end": "155700"
  },
  {
    "text": "So the idea here is, with\nthis one line of code, we're going to\ncreate a new list.",
    "start": "155700",
    "end": "161280"
  },
  {
    "text": "We're going to have\nan iterator that goes through some sort\nof sequence of values.",
    "start": "161280",
    "end": "166409"
  },
  {
    "text": "And we're going to\napply the same function to every one of those elements. And the other optional piece\nthat we can add inside this list",
    "start": "166410",
    "end": "174140"
  },
  {
    "text": "comprehension is to\nonly apply that function if some condition holds.",
    "start": "174140",
    "end": "179270"
  },
  {
    "text": "So let's look at this-- let's look at this\nexample and see how we can convert\nthese four lines of code",
    "start": "179270",
    "end": "187430"
  },
  {
    "text": "to one line of list\ncomprehension code. So we've got creating\na new empty list.",
    "start": "187430",
    "end": "196170"
  },
  {
    "text": "This is going to tell Python to\ncreate a new empty list for us.",
    "start": "196170",
    "end": "203200"
  },
  {
    "text": "So just open and\nclosed square brackets. And within these open and\nclosed square brackets we're going to write a\none-liner expression.",
    "start": "203200",
    "end": "211440"
  },
  {
    "text": "And this one-liner is\ngoing to encapsulate these two lines of code here.",
    "start": "211440",
    "end": "217900"
  },
  {
    "text": "So the expression--\nsorry, the function we're going to apply\nto every element in L",
    "start": "217900",
    "end": "223680"
  },
  {
    "text": "is going to be taking that\nelement and squaring it. So on the right-hand side here\nin the list comprehension,",
    "start": "223680",
    "end": "228810"
  },
  {
    "text": "we've got some e squared. Well, what is e? Well, it's going to be\nevery element e in L.",
    "start": "228810",
    "end": "237530"
  },
  {
    "text": "So if we read this in\nEnglish, we basically say, Lnew is going to contain\nelements e squared for e in L.",
    "start": "237530",
    "end": "244519"
  },
  {
    "text": "So it sounds weird, but\nit kind of makes sense, even if we read it in English.",
    "start": "244520",
    "end": "249540"
  },
  {
    "text": "And behind the scenes,\nPython will take, one by one, each element and square it.",
    "start": "249540",
    "end": "256180"
  },
  {
    "text": "And that's the\nsequence of elements it will populate this Lnew with.",
    "start": "256180",
    "end": "262360"
  },
  {
    "text": "OK. Now, what if we add\na condition to that? So let's say we want to create\nthis new list of elements",
    "start": "262360",
    "end": "269370"
  },
  {
    "text": "only for even elements. So we only want to\nsquare the even elements",
    "start": "269370",
    "end": "275120"
  },
  {
    "text": "within my original\nlist L. Well, if we were to write a function that\ndoes that, we have to add",
    "start": "275120",
    "end": "281569"
  },
  {
    "text": "this extra condition here. So everything else is the same\nexcept for this if e%2==0.",
    "start": "281570",
    "end": "287570"
  },
  {
    "text": "This tells Python to\nonly grab elements that are even, divisible by 2.",
    "start": "287570",
    "end": "294630"
  },
  {
    "text": "So how do we write this in\nlist comprehension form? So here's a new list. And this is the function to\napply, only if the test is true.",
    "start": "294630",
    "end": "302639"
  },
  {
    "text": "In list comprehension,\nthis is my new list. I've got the for\nloop is over here.",
    "start": "302640",
    "end": "309880"
  },
  {
    "text": "And then the test to apply is\nat the end here, if e%2==0.",
    "start": "309880",
    "end": "316873"
  },
  {
    "text": "And then, what is the\nfunction we're applying? It's just e squared,\nlike before. So the test just gets appended\nto the end of this list",
    "start": "316873",
    "end": "324460"
  },
  {
    "text": "comprehension expression here. Yeah.",
    "start": "324460",
    "end": "330010"
  },
  {
    "text": "AUDIENCE: Is it running faster? Is there a reason to do that? ANA BELL: Does it run faster?",
    "start": "330010",
    "end": "335170"
  },
  {
    "text": "I'm not sure, actually. It might run marginally faster,\nbut probably not significantly.",
    "start": "335170",
    "end": "340710"
  },
  {
    "text": "The reason to do this\nis because, as you get more practice with it, this\nwill be easier to read in code.",
    "start": "340710",
    "end": "348300"
  },
  {
    "text": "And often, if you see a\nlarge chunk like this, your eyes will glaze over.",
    "start": "348300",
    "end": "353745"
  },
  {
    "text": "You're not going to want\nto read a chunk like that. But if you see it\nall in one line, you're going to think,\nwell, how bad can it be?",
    "start": "353745",
    "end": "360389"
  },
  {
    "text": "[LAUGHS] And so you can come\nup with really complicated list comprehension expressions.",
    "start": "360390",
    "end": "366389"
  },
  {
    "text": "But usually, we reserve them for\nreally simple, really quick ways",
    "start": "366390",
    "end": "371610"
  },
  {
    "text": "to create these lists that you\njust populate with some values right off the bat. So it just makes the code\na lot easier to read.",
    "start": "371610",
    "end": "378518"
  },
  {
    "text": " OK. So list comprehensions\nare pretty useful.",
    "start": "378518",
    "end": "385433"
  },
  {
    "text": "If you get a little bit\nof practice with them, you'll find yourself using\nthem all over the place.",
    "start": "385433",
    "end": "390840"
  },
  {
    "text": "And they basically replace\ncode that looks like this. So these lines of code\nis a very generic way",
    "start": "390840",
    "end": "398870"
  },
  {
    "text": "of writing this one-liner\nlist comprehension. So here I've got a function\nf that I would like to apply.",
    "start": "398870",
    "end": "407199"
  },
  {
    "text": "This expr expression\nis the function I would like to apply\nto each element,",
    "start": "407200",
    "end": "413419"
  },
  {
    "text": "this is the list I would like\nto apply that function to, and the test is going\nto be the conditional.",
    "start": "413420",
    "end": "420280"
  },
  {
    "text": "In this particular case, this\ntest means I apply it to every single element, but you can\nimagine having a function which,",
    "start": "420280",
    "end": "428349"
  },
  {
    "text": "in the previous case, we\nwould say lambda x x%2==0 as our condition.",
    "start": "428350",
    "end": "433840"
  },
  {
    "text": "And then the function that\nwe're essentially replacing is this, with list\ncomprehensions.",
    "start": "433840",
    "end": "439840"
  },
  {
    "text": "We create this new list. Again, this is the pattern that\nwe saw in the previous slide. We loop through every\nelement in the list.",
    "start": "439840",
    "end": "446380"
  },
  {
    "text": "If that condition holds,\nappend that function applied to each element.",
    "start": "446380",
    "end": "451570"
  },
  {
    "text": "And then at the end,\nreturn the list. So this is just a\nvery generic way to write a list comprehension.",
    "start": "451570",
    "end": "459290"
  },
  {
    "text": "So let's look at some\nconcrete examples. So here, I'm not\napplying the function",
    "start": "459290",
    "end": "465699"
  },
  {
    "text": "e squared to a particular\nset of elements from a list. I'm applying it to the sequence\nof values given by range.",
    "start": "465700",
    "end": "473319"
  },
  {
    "text": "Remember, when we were talking\nabout for loops iterating through things, they can iterate\nthrough integers following",
    "start": "473320",
    "end": "479650"
  },
  {
    "text": "some pattern, like\nrange 6, range 1, 9, 2, something like that.",
    "start": "479650",
    "end": "484990"
  },
  {
    "text": "As long as you have a sequence\nof values you can iterate over, you can plop that into\nthis list comprehension.",
    "start": "484990",
    "end": "491840"
  },
  {
    "text": "So you can iterate over lists,\nyou could iterate over tuples, you could iterate over\nthese direct ranges,",
    "start": "491840",
    "end": "498310"
  },
  {
    "text": "you could iterate over a\nrange of the length of a list. Whatever creates an\niterable for you,",
    "start": "498310",
    "end": "503320"
  },
  {
    "text": "you can put that in\nthe list comprehension. So in this particular case,\nthe way I read this is I've",
    "start": "503320",
    "end": "509980"
  },
  {
    "text": "got something that I'm squaring. And what's the thing\nthat I'm squaring? It's going to be each\nvalue in range 6.",
    "start": "509980",
    "end": "516490"
  },
  {
    "text": "So I think about it like, what\nis this sequence of values that I'm going to operate on? Well, it's going to be the\nnumbers 0, 1, 2, 3, 4, 5.",
    "start": "516490",
    "end": "524020"
  },
  {
    "text": "And the thing that I'm\ngoing to do to them is square each one\nof those values. So the end list that I get\nout of this one-liner here",
    "start": "524020",
    "end": "531680"
  },
  {
    "text": "is a list containing 0 squared,\n1 squared, 2 squared, 3 squared, 4 squared, and 5 squared.",
    "start": "531680",
    "end": "539199"
  },
  {
    "text": "We can add a condition to that. So here I've got each element\nsquared for e in range 8",
    "start": "539200",
    "end": "545350"
  },
  {
    "text": "only if e is even. So then, the way I\nthink about it is,",
    "start": "545350",
    "end": "551170"
  },
  {
    "text": "let's start off with what\nevery element in the range is. Well, it's 0, 1,\n2, 3, 4, 5, 6, 7.",
    "start": "551170",
    "end": "556630"
  },
  {
    "text": "The condition I'm applying\nto that is that it's even. So the numbers I'm\ngoing to end up with, I'm filtering all\nthose to only contain",
    "start": "556630",
    "end": "565149"
  },
  {
    "text": "0, 2, 4, and 6, because we\ngo up to but not including 8. And then I'm going to\nsquare every one of those.",
    "start": "565150",
    "end": "572509"
  },
  {
    "text": "So the end result from\nthis list comprehension is a list containing the\nelements 0 squared, 2 squared,",
    "start": "572510",
    "end": "577870"
  },
  {
    "text": "4 squared, and 6 squared.  And lastly, we've been\ndoing just single integers",
    "start": "577870",
    "end": "587510"
  },
  {
    "text": "in the resulting list. But as I mentioned, we can\ndo more complicated things. So as long as we can write\na little expression here",
    "start": "587510",
    "end": "595550"
  },
  {
    "text": "for the thing that we'd like to\ncalculate or add to the list, we can put it in the\nlist comprehension.",
    "start": "595550",
    "end": "601800"
  },
  {
    "text": "So in this particular\ncase, the element that I'm adding to my list\ncomprehension or my resulting",
    "start": "601800",
    "end": "608089"
  },
  {
    "text": "list from the list\ncomprehension is a list itself. So each element in my\nresulting list is another list.",
    "start": "608090",
    "end": "616190"
  },
  {
    "text": "And that inner list is going\nto contain two elements every time-- the thing I'm actually\niterating over and it's square.",
    "start": "616190",
    "end": "624440"
  },
  {
    "text": " And I've got a condition here.",
    "start": "624440",
    "end": "629560"
  },
  {
    "text": "So I've got the\nelements 0, 1, 2, and 3. That's the range. But I'm only grabbing the odd\nones in this particular case.",
    "start": "629560",
    "end": "638019"
  },
  {
    "text": "So the resulting set of numbers\nthat I'm going to apply this to",
    "start": "638020",
    "end": "643930"
  },
  {
    "text": "is going to be the number-- is the numbers 1 and\n3 because those are",
    "start": "643930",
    "end": "650510"
  },
  {
    "text": "the two odd numbers in range 4. And so the resulting list is\ngoing to contain two elements.",
    "start": "650510",
    "end": "657910"
  },
  {
    "text": "So this outer square bracket\nis the list that I've created, and its elements\nwill be the element",
    "start": "657910",
    "end": "664319"
  },
  {
    "text": "that I have actually iterated\nover and its square as a list.",
    "start": "664320",
    "end": "669750"
  },
  {
    "text": "So 1 and 1 squared\nfor e and e squared when e is 1, and then 3 and\n9, 3 squared, when e is 3.",
    "start": "669750",
    "end": "679860"
  },
  {
    "text": " Questions about that? ",
    "start": "679860",
    "end": "686510"
  },
  {
    "text": "OK. So pretty cool. It's a really nice way to\ncreate lists really quickly. Like if you wanted to\ncreate a list full of zeros,",
    "start": "686510",
    "end": "694400"
  },
  {
    "text": "full of a hundred zeros,\nno need to do a loop. You basically do a\nlist comprehension that says square brackets\n0 for e in range 101--",
    "start": "694400",
    "end": "703040"
  },
  {
    "text": "or 100. And then you've got\nyourself a nice little list full of a hundred zeros.",
    "start": "703040",
    "end": "708425"
  },
  {
    "text": " All right. So think about this, and then\ntell me what the answer is.",
    "start": "708425",
    "end": "715690"
  },
  {
    "text": "So the idea here is we have\nthis list comprehension, and just go through\nit step by step.",
    "start": "715690",
    "end": "723160"
  },
  {
    "text": "It looks a little\nbit intimidating, but the first step is\nto look at the for loop and ask yourself, what are\nthe values I'm iterating over?",
    "start": "723160",
    "end": "730900"
  },
  {
    "text": "Then look at the\ncondition, if there is one. There is one. In this case, it's\nat the end here.",
    "start": "730900",
    "end": "736279"
  },
  {
    "text": "So now, what subsets of\nthose original things you're iterating over\nare you actually keeping? And then from those things\nthat you're keeping,",
    "start": "736280",
    "end": "743530"
  },
  {
    "text": "what function are you applying? It's the one right\nat the beginning. So think about it, and then\nI'll ask you to tell me.",
    "start": "743530",
    "end": "751230"
  },
  {
    "text": " So step one, what are the\nvalues I'm iterating over?",
    "start": "751230",
    "end": "758370"
  },
  {
    "text": "The full values, not\nincluding the condition. Someone yell it out.",
    "start": "758370",
    "end": "764883"
  },
  {
    "text": "AUDIENCE: That\nlist in the middle. ANA BELL: Yeah. That list in the middle. Awesome. OK. So xy, abcd, and then 7, and\nthen what's the last thing?",
    "start": "764883",
    "end": "778029"
  },
  {
    "text": "Is it the number\n4.0 or a string? AUDIENCE: A string. ANA BELL: Yeah, exactly. 4.0. OK.",
    "start": "778030",
    "end": "784100"
  },
  {
    "text": "String. String. Step two. From this list,\nwhat are the values that I'm actually keeping\nbased on the condition?",
    "start": "784100",
    "end": "792384"
  },
  {
    "text": "AUDIENCE: If they're a string. ANA BELL: If they're string. All right. Which one's a string? Is xy? AUDIENCE: Yes. ANA BELL: Yes.",
    "start": "792384",
    "end": "797820"
  },
  {
    "text": "Is abcd? AUDIENCE: Yes. ANA BELL: Yep. Is 7? AUDIENCE: No. ANA BELL: Nope.",
    "start": "797820",
    "end": "803095"
  },
  {
    "text": "Is 4.0? AUDIENCE: Yes. ANA BELL: Yes, excellent. OK, good. OK. So then these are the\nelements that I'm keeping.",
    "start": "803095",
    "end": "809910"
  },
  {
    "text": "And now, what's the\nfunction I'm applying, and what's the\nresult going to be? It's going to be\na list containing?",
    "start": "809910",
    "end": "816120"
  },
  {
    "text": "AUDIENCE: 2 and 4. ANA BELL: Yep. 3-- AUDIENCE: 2, 4.",
    "start": "816120",
    "end": "821390"
  },
  {
    "text": "ANA BELL: 2, 4, 3. 2 because that's length 2, 4\nbecause that's length 4, and 3 because that's length 3.",
    "start": "821390",
    "end": "828759"
  },
  {
    "text": "And we've got ourselves\na nice little list based on that condition, that\nsequence of values,",
    "start": "828760",
    "end": "834636"
  },
  {
    "text": "and that function applied. Yeah? AUDIENCE: Why does\nit return a list? ANA BELL: Why does\nit return a list?",
    "start": "834637",
    "end": "839860"
  },
  {
    "text": "AUDIENCE: Yeah. ANA BELL: The whole thing? AUDIENCE: Or I guess I thought\nit would just return 2, 4,",
    "start": "839860",
    "end": "845120"
  },
  {
    "text": "3 on separate lines. ANA BELL: Oh, yeah. So we're not printing\nthings out here. When we're writing this\nas a list comprehension,",
    "start": "845120",
    "end": "851980"
  },
  {
    "text": "we're essentially\ntelling Python to create this resulting list of values. That's just what a list\ncomprehension does.",
    "start": "851980",
    "end": "857779"
  },
  {
    "text": "And so just kind\nof this expression here, with these\nouter square brackets around our entire\nexpression, tells Python",
    "start": "857780",
    "end": "864220"
  },
  {
    "text": "that the resulting\nthing is a list. Yeah. This is a good question.",
    "start": "864220",
    "end": "870259"
  },
  {
    "text": "Other questions? OK.",
    "start": "870260",
    "end": "875449"
  },
  {
    "text": "OK. So that-- oh, yeah. Question. AUDIENCE: Does it support\nmultiple conditions?",
    "start": "875450",
    "end": "880513"
  },
  {
    "text": "ANA BELL: Does it support\nmultiple conditions? Yes. So at the end here,\nyou would say if,",
    "start": "880513",
    "end": "887740"
  },
  {
    "text": "and then you could wrap\nthem in parentheses. I don't know if you have\nto, but just to be safe,",
    "start": "887740",
    "end": "894390"
  },
  {
    "text": "I would wrap my\nconditions in parentheses. And you'd use and\nor or or whatever you want to combine the\nexpressions or the conditions",
    "start": "894390",
    "end": "901000"
  },
  {
    "text": "with. Is there a question? Yeah? AUDIENCE: Isn't the\nlambda [INAUDIBLE]??",
    "start": "901000",
    "end": "907600"
  },
  {
    "text": "ANA BELL: This one, the lambda? AUDIENCE: Yeah. ANA BELL: Here, this\nis a lambda function that we talked\nabout, I forget when.",
    "start": "907600",
    "end": "914570"
  },
  {
    "text": "A couple lectures ago it's\nbasically an anonymous function, and all it does is\nreturn true all the time.",
    "start": "914570",
    "end": "922439"
  },
  {
    "text": "So the test will\nalways be true, which",
    "start": "922440",
    "end": "927550"
  },
  {
    "text": "means that when\nwe do if test(e), this will always be true\nin this particular case.",
    "start": "927550",
    "end": "933850"
  },
  {
    "text": "But when given a\ndifferent lambda function, that might not be the case.",
    "start": "933850",
    "end": "939220"
  },
  {
    "text": "OK. So let's move on\nto the next topic. The next, I guess, two topics\nwe'll be dealing with functions.",
    "start": "939220",
    "end": "944993"
  },
  {
    "text": "And I want to wrap\nup a couple of things here just to give you a couple\nmore ideas regarding functions.",
    "start": "944993",
    "end": "950540"
  },
  {
    "text": "So the first one\nis actually related to this last question, is the\nidea of a default parameter.",
    "start": "950540",
    "end": "955880"
  },
  {
    "text": "So this is going to be a\nway for us to add parameters to our functions that\nget some default value,",
    "start": "955880",
    "end": "963730"
  },
  {
    "text": "and that's what that\nlambda thing actually was in that example. But hopefully this\npiece of the lecture",
    "start": "963730",
    "end": "969910"
  },
  {
    "text": "makes that a little\nbit more clear. And then the second\npart regarding functions we're going to go\nover is the idea",
    "start": "969910",
    "end": "975190"
  },
  {
    "text": "of functions as objects,\nkind of working up on that. And we're going to\nsee what happens",
    "start": "975190",
    "end": "980649"
  },
  {
    "text": "when we return a function\nobject from another function. We've seen functions as\nparameters to other functions,",
    "start": "980650",
    "end": "987530"
  },
  {
    "text": "but we're going to\nsee what happens when you make a\nfunction be the return value of another function.",
    "start": "987530",
    "end": "992800"
  },
  {
    "text": "But that's in a little bit. For now, let's look\nat default parameters.",
    "start": "992800",
    "end": "998640"
  },
  {
    "text": "OK. We've seen this code before. Triggering flashbacks.",
    "start": "998640",
    "end": "1004010"
  },
  {
    "text": "So this is bisection_root. I'll go over it, just to\nremind ourselves what it does.",
    "start": "1004010",
    "end": "1010190"
  },
  {
    "text": "We've got this code\ninside this function we wrote a long, long time ago.",
    "start": "1010190",
    "end": "1016160"
  },
  {
    "text": "And then we decided to\nwrap it in a function so that it's a really\nnicely useful piece of code",
    "start": "1016160",
    "end": "1021500"
  },
  {
    "text": "that we can run\nmany, many times. So the parameter\nto this function was x, a value we'd like to\napproximate the square root of.",
    "start": "1021500",
    "end": "1031160"
  },
  {
    "text": "And the code we're\nusing to approximate is using the bisection\nsearch algorithm,",
    "start": "1031160",
    "end": "1037680"
  },
  {
    "text": "which initializes some\nvariables, namely epsilon, how close we want to\nbe to the final answer.",
    "start": "1037680",
    "end": "1045709"
  },
  {
    "text": "Low and high endpoints. We remember that. And then an initial guess, the\nhalfway between low and high.",
    "start": "1045710",
    "end": "1052220"
  },
  {
    "text": "And then we keep making\nguesses between low and high,",
    "start": "1052220",
    "end": "1057620"
  },
  {
    "text": "being the midpoint\nof low and high, as long as we're not close\nenough to the final--",
    "start": "1057620",
    "end": "1066040"
  },
  {
    "text": "we're not close enough\nto the final answer. So we're going to either\nreinitialize our low endpoint",
    "start": "1066040",
    "end": "1072100"
  },
  {
    "text": "or our high endpoint depending\non whether that guess was too low or too high, and\nthen, within the loop,",
    "start": "1072100",
    "end": "1078250"
  },
  {
    "text": "we make another\nguess using those changed values of either low\nor high based on if or else.",
    "start": "1078250",
    "end": "1084610"
  },
  {
    "text": "And then we keep\ndoing this process of making more guesses\nat the halfway point as long as we're still\nfarther than epsilon away.",
    "start": "1084610",
    "end": "1094610"
  },
  {
    "text": "OK. That was a recap of\nwhat we've done so far. The interesting thing that we\nhad done with this function was,",
    "start": "1094610",
    "end": "1101930"
  },
  {
    "text": "or when we turned\nit into a function was to return our approximation. So this guess, instead of\njust printing it to the user,",
    "start": "1101930",
    "end": "1109850"
  },
  {
    "text": "we returned it so\nthat it could be useful in other\nparts of the code. And so, when we\ncalled the function,",
    "start": "1109850",
    "end": "1115940"
  },
  {
    "text": "we just said name of function,\nand then some value of x.",
    "start": "1115940",
    "end": "1121429"
  },
  {
    "text": "Now, there are situations\nwhere a user would want to change the value of epsilon.",
    "start": "1121430",
    "end": "1128470"
  },
  {
    "text": "Right now, the way we wrote this\ncode, epsilon is set to 0.01. And whenever you\nrun the function,",
    "start": "1128470",
    "end": "1134419"
  },
  {
    "text": "it always finds\nthe approximation to the square root of x\nto that precision, 0.01.",
    "start": "1134420",
    "end": "1141620"
  },
  {
    "text": "Now, sometimes, depending\non the application, the user might want an\neven better approximation,",
    "start": "1141620",
    "end": "1146929"
  },
  {
    "text": "so 0.000001, or they might\nnot care to be as precise, and they want maybe approximated\nto 1 or to 0.5 or something much",
    "start": "1146930",
    "end": "1155380"
  },
  {
    "text": "bigger than 0.01. So what are the options\nin this particular case for these scenarios?",
    "start": "1155380",
    "end": "1161850"
  },
  {
    "text": "One option would be, obviously,\nto go inside our function and say, well, I'm going to\nchange epsilon to be something",
    "start": "1161850",
    "end": "1169260"
  },
  {
    "text": "super duper precise, 0.000001. And so people who\ncall this function",
    "start": "1169260",
    "end": "1174390"
  },
  {
    "text": "will always get an\napproximation to that precision. But what about people who\ndon't want it that precise?",
    "start": "1174390",
    "end": "1181529"
  },
  {
    "text": "So all the function\ncalls are going to be affected by\nmaking that change. And so that's not\nreally desirable.",
    "start": "1181530",
    "end": "1187638"
  },
  {
    "text": "We'd like to let\nthe person who makes the function call be in charge\nof what precision they'd like.",
    "start": "1187638",
    "end": "1192880"
  },
  {
    "text": "Another option is to put\nepsilon outside the function. So to say, OK, well, the only\nparameter is going to be x.",
    "start": "1192880",
    "end": "1201190"
  },
  {
    "text": "And let's not set epsilon\nwithin the function. Let's let the user maybe set\nepsilon outside the function.",
    "start": "1201190",
    "end": "1207650"
  },
  {
    "text": "And then they can use-- and then our code\nwill basically pop up one level to the global\nscope and use the epsilon",
    "start": "1207650",
    "end": "1213940"
  },
  {
    "text": "that the user chose. Not a good idea because as\nsoon as we allow somebody using",
    "start": "1213940",
    "end": "1220780"
  },
  {
    "text": "our code to make their own\nvariables within our code,",
    "start": "1220780",
    "end": "1225790"
  },
  {
    "text": "we're putting our trust\nin somebody else's hands, and they might forget\nto reset epsilon,",
    "start": "1225790",
    "end": "1232510"
  },
  {
    "text": "or they might forget to\nset it to begin with. And so just using\nglobal variables is not a good idea\nin the first place.",
    "start": "1232510",
    "end": "1238820"
  },
  {
    "text": "We'd like to keep control\nof the epsilon that's being used inside our function.",
    "start": "1238820",
    "end": "1245000"
  },
  {
    "text": "So unsurprisingly,\nthe last option is going to be our best option. Let's just add epsilon\nas another parameter",
    "start": "1245000",
    "end": "1252280"
  },
  {
    "text": "to the function. So there it is. We've got bisection_root,\nagain, as a function.",
    "start": "1252280",
    "end": "1260840"
  },
  {
    "text": "We've got a parameter x. And we have epsilon\nas a second parameter that the user can call\nthe function with.",
    "start": "1260840",
    "end": "1270220"
  },
  {
    "text": "OK. So other than that, the function\nbody is exactly the same,",
    "start": "1270220",
    "end": "1276370"
  },
  {
    "text": "except that right now, when\nwe make a function call, we have to pass in epsilon\nas the second parameter.",
    "start": "1276370",
    "end": "1283280"
  },
  {
    "text": "So in terms of code, this\nis the bisection_root",
    "start": "1283280",
    "end": "1289230"
  },
  {
    "text": "with epsilon as a parameter. And so now the user can find\nthe approximation to 123 to 0.1.",
    "start": "1289230",
    "end": "1296190"
  },
  {
    "text": "It's 11.088, in case\nyou were wondering, and then the approximation 223\nto 0.000001, which is 11.0905.",
    "start": "1296190",
    "end": "1309049"
  },
  {
    "text": "So, much better. The user can now be in charge\nof deciding how close they'd",
    "start": "1309050",
    "end": "1315380"
  },
  {
    "text": "like the approximation to be\nfor every one of their values. But notice that this\ncode is kind of verbose.",
    "start": "1315380",
    "end": "1324520"
  },
  {
    "text": "And really, most of the\ntime, maybe the users don't want to be in charge\nof setting the epsilon.",
    "start": "1324520",
    "end": "1331330"
  },
  {
    "text": "Maybe they don't know what\na good epsilon might be. So how do they know that they\nshould choose 0.01 by default?",
    "start": "1331330",
    "end": "1338170"
  },
  {
    "text": "Maybe that's something\nyou could put in the function specification\nfor anyone using your function.",
    "start": "1338170",
    "end": "1343549"
  },
  {
    "text": "But you're going\nto rely on users reading your specification,\nand that's a little bit scary.",
    "start": "1343550",
    "end": "1351510"
  },
  {
    "text": "So instead, the functionality\nthat we'd really like to have is\nto say, OK, I want",
    "start": "1351510",
    "end": "1357950"
  },
  {
    "text": "to write a function that\ndoes take in two parameters. But by default, one\nof those parameters",
    "start": "1357950",
    "end": "1365060"
  },
  {
    "text": "is something that I\nset as the person who's writing this function. So what I would\nreally like to have",
    "start": "1365060",
    "end": "1371809"
  },
  {
    "text": "is epsilon to have some\nsort of a default value so if users don't know\nwhat to call it with,",
    "start": "1371810",
    "end": "1378370"
  },
  {
    "text": "the code will just use\nthat default value. And otherwise, if the\nuser is more experienced,",
    "start": "1378370",
    "end": "1384590"
  },
  {
    "text": "and they know they'd like\nan epsilon of 1 times 10 to the negative 10 or\nwhatever it might be,",
    "start": "1384590",
    "end": "1390110"
  },
  {
    "text": "then they can be in\ncharge of setting it. So most of the time, we want to\ncall the bisection_root function",
    "start": "1390110",
    "end": "1396020"
  },
  {
    "text": "without an epsilon parameter so\nthat it may use a default one. But sometimes we'd\nlike to allow the user",
    "start": "1396020",
    "end": "1402350"
  },
  {
    "text": "to actually set the epsilon. And so to that end,\nwe're introducing the idea of keyword\nparameters, also known",
    "start": "1402350",
    "end": "1409730"
  },
  {
    "text": "as default parameters. And they are set like this.",
    "start": "1409730",
    "end": "1415530"
  },
  {
    "text": "So the bisection_root\nfunction definition still takes in the thing we'd like to\napproximate the square root of,",
    "start": "1415530",
    "end": "1421130"
  },
  {
    "text": "x, but the second\nparameter here, epsilon, will be equal to something\ninside the function definition.",
    "start": "1421130",
    "end": "1428970"
  },
  {
    "text": "So we, as the people who\nare writing this function, are going to say, the default\nvalue of epsilon is 0.01.",
    "start": "1428970",
    "end": "1438650"
  },
  {
    "text": "So that means when we call\nthe function down here, if the user makes a function\ncall without explicitly passing",
    "start": "1438650",
    "end": "1446540"
  },
  {
    "text": "in a second parameter, Python\nwill use the default one that the person who\nwrote the function set.",
    "start": "1446540",
    "end": "1452809"
  },
  {
    "text": "So Python will run\nbisection_root of 123, with epsilon being 0.01.",
    "start": "1452810",
    "end": "1459440"
  },
  {
    "text": "And otherwise, if the user does\nwant to override that epsilon, they can just pass\nit in themselves,",
    "start": "1459440",
    "end": "1464630"
  },
  {
    "text": "and that default value of 0.01\nwill be overwritten to be 0.5.",
    "start": "1464630",
    "end": "1470910"
  },
  {
    "text": "And so in our code here,\nthis is the bisection_root",
    "start": "1470910",
    "end": "1476790"
  },
  {
    "text": "with the default values. And so you can see here,\nif I run it with 123, even though there are\ntwo parameters here",
    "start": "1476790",
    "end": "1482970"
  },
  {
    "text": "for the bisection\nsquare root function, Python doesn't complain because\nit's using epsilon as 0.01.",
    "start": "1482970",
    "end": "1489450"
  },
  {
    "text": "So I run it, and\nit runs just fine. But in the second line\nhere, if I actually",
    "start": "1489450",
    "end": "1495910"
  },
  {
    "text": "want to use 0.5 as\nmy epsilon value, it overrides my\ndefault parameter,",
    "start": "1495910",
    "end": "1501460"
  },
  {
    "text": "and it calculates the\nsquare root of 123 with epsilon being 0.5.",
    "start": "1501460",
    "end": "1509549"
  },
  {
    "text": "Questions so far? ",
    "start": "1509550",
    "end": "1514720"
  },
  {
    "text": "So now that we've introduced\ndefault parameters, there's a few rules about\nmaking function calls.",
    "start": "1514720",
    "end": "1522179"
  },
  {
    "text": "When you create the function\ndefinition-- so over here, when you're the one\ndefining a function and you decide to\nallow some default",
    "start": "1522180",
    "end": "1528750"
  },
  {
    "text": "parameters in your\nparameter list, everything that's\na default parameter needs to go at the end.",
    "start": "1528750",
    "end": "1534390"
  },
  {
    "text": "You can't switch these around. You can't say epsilon\nequals 0.01, x.",
    "start": "1534390",
    "end": "1539820"
  },
  {
    "text": "Python will not allow that. So any time you have\ndefault parameters, they always have\nto go to the end.",
    "start": "1539820",
    "end": "1548140"
  },
  {
    "text": "That's the only rule for\nmaking the function call, or defining the function\nwith default parameters.",
    "start": "1548140",
    "end": "1553270"
  },
  {
    "text": "And then, once you have\ndefault parameters, you can actually\ncall the function in many, many, many\ndifferent ways.",
    "start": "1553270",
    "end": "1560230"
  },
  {
    "text": "And I know some of\nthese will be confusing. You might not know whether\nthey're allowed or not. You can never go wrong\nwith the last one,",
    "start": "1560230",
    "end": "1566830"
  },
  {
    "text": "as we're going to see in a bit. So the first one\nhere showcases what happens when you give\nvalues for everything that's",
    "start": "1566830",
    "end": "1574010"
  },
  {
    "text": "not a default parameter,\nin this case, just x. If you just give a value\nfor non-default parameters,",
    "start": "1574010",
    "end": "1580960"
  },
  {
    "text": "Python sets default parameters\nfor everything else. So not a big deal.",
    "start": "1580960",
    "end": "1586320"
  },
  {
    "text": "Alternatively, you can\npass in-- just like we have in the past when we\nwrite our own functions with multiple parameters, you\ncan pass in, one at a time,",
    "start": "1586320",
    "end": "1594210"
  },
  {
    "text": "in the same order, values for\nevery one of those parameters, default or not. And if you pass in\nvalues for all of them,",
    "start": "1594210",
    "end": "1600780"
  },
  {
    "text": "Python will not be\nconfused, and it'll just match them one at a time. Variations on that.",
    "start": "1600780",
    "end": "1607149"
  },
  {
    "text": "You can always pass in a\nvalue for a parameter name.",
    "start": "1607150",
    "end": "1613580"
  },
  {
    "text": "So looking at the\nfunction definition, we can see the parameter names--\nthe formal parameters are",
    "start": "1613580",
    "end": "1620080"
  },
  {
    "text": "named x and epsilon. So when you make\nyour function calls, you can actually explicitly\ntell Python something like this,",
    "start": "1620080",
    "end": "1628600"
  },
  {
    "text": "x equals 123,\nepsilon equals 0.1. And if you have\nmore parameters, you",
    "start": "1628600",
    "end": "1633910"
  },
  {
    "text": "say that parameter\nequals whatever value you want to run it with. And so that will\nnot confuse Python.",
    "start": "1633910",
    "end": "1639910"
  },
  {
    "text": "And if you do it\nin that way, you can actually do it\nin any order you'd like because Python\nwill just assign",
    "start": "1639910",
    "end": "1646600"
  },
  {
    "text": "each one of these variables to\nbe whatever you told them to. So worst case, you just\ndo something like this",
    "start": "1646600",
    "end": "1654460"
  },
  {
    "text": "where, one at a time, you just\nsay what the formal parameter is and its value, and then\nPython will not get confused.",
    "start": "1654460",
    "end": "1660580"
  },
  {
    "text": "The ones at the bottom, though,\nis where we run into trouble. So for example, if you put\nthe default parameter first,",
    "start": "1660580",
    "end": "1668350"
  },
  {
    "text": "and then you put an\nactual parameter-- sorry, you put the default\nparameter first, and then any parameter that's\nnot a default one afterward,",
    "start": "1668350",
    "end": "1675520"
  },
  {
    "text": "Python gives an error\nbecause the default ones have to go after the\nnon-default ones.",
    "start": "1675520",
    "end": "1682320"
  },
  {
    "text": "And the last one doesn't\nactually give an error. But Python, remember, matches\nparameters one by one.",
    "start": "1682320",
    "end": "1688809"
  },
  {
    "text": "So it's actually going\nto find an approximation to the square root of\n0.001 to an epsilon of 123",
    "start": "1688810",
    "end": "1698540"
  },
  {
    "text": "because it's just mapping\nthe parameters one at a time. And so that's not an\nerror, but it's not",
    "start": "1698540",
    "end": "1703700"
  },
  {
    "text": "exactly what we want it to do. Questions about this? ",
    "start": "1703700",
    "end": "1711965"
  },
  {
    "text": "OK.  So now, let's move on to another\nthing, another sort of nuance",
    "start": "1711965",
    "end": "1720640"
  },
  {
    "text": "about functions. And we're going to go back\nto the idea of functions",
    "start": "1720640",
    "end": "1725830"
  },
  {
    "text": "being objects in Python. So I drew this picture back when\nwe first learned of functions",
    "start": "1725830",
    "end": "1734760"
  },
  {
    "text": "as objects. So I'll just do it again,\njust to jog your memory. So remember that when\nwe make a function",
    "start": "1734760",
    "end": "1740730"
  },
  {
    "text": "definition, inside the memory,\nPython creates an object.",
    "start": "1740730",
    "end": "1748669"
  },
  {
    "text": "As soon as we see just\nthis function definition, Python doesn't care what\ncode is inside here.",
    "start": "1748670",
    "end": "1754670"
  },
  {
    "text": "This code does not run. It only runs when\nit's being called. And right here, I have not\nmade a function call at all.",
    "start": "1754670",
    "end": "1761680"
  },
  {
    "text": "All Python knows\nat this point is that there is a function\nobject inside memory",
    "start": "1761680",
    "end": "1767360"
  },
  {
    "text": "and its name is even.",
    "start": "1767360",
    "end": "1772500"
  },
  {
    "text": "And this is exactly the\nsame as creating an integer object inside memory\nand giving it the name",
    "start": "1772500",
    "end": "1778050"
  },
  {
    "text": "r through a line like\nthis, or creating a float object in memory\nand giving it the name pi.",
    "start": "1778050",
    "end": "1783780"
  },
  {
    "text": "It's just some object\nwith some name. And so that means that we\ncan have some code that",
    "start": "1783780",
    "end": "1791280"
  },
  {
    "text": "looks like this, which is\ngoing to essentially create an alias for that\nfunction object in memory.",
    "start": "1791280",
    "end": "1799600"
  },
  {
    "text": "So here, the name is_even\nrefers to that function object.",
    "start": "1799600",
    "end": "1806120"
  },
  {
    "text": "And I'm telling\nPython that I would like to refer to that function\nobject using the name my_func as",
    "start": "1806120",
    "end": "1811880"
  },
  {
    "text": "well. So both my_func and\nis_even are names that point to this object in memory.",
    "start": "1811880",
    "end": "1819020"
  },
  {
    "text": "It's not a function call. I'm not trying to figure\nout if some number is even.",
    "start": "1819020",
    "end": "1824419"
  },
  {
    "text": "I am literally giving another\nname to this function, this code that does\nthis thing here.",
    "start": "1824420",
    "end": "1833520"
  },
  {
    "text": "OK. And so that means that\nif I have two names that point to the same object, if\nI am going to invoke those two",
    "start": "1833520",
    "end": "1841860"
  },
  {
    "text": "names, as I do here,\nwith some parameters, Python is going\nto say, well, I'm",
    "start": "1841860",
    "end": "1847710"
  },
  {
    "text": "going to run the code\npointed to by these names with these parameters. So they will both run the\ncode that they're pointing to.",
    "start": "1847710",
    "end": "1856840"
  },
  {
    "text": "This is_even. And so it's just going\nto return true or false. We've seen this before.",
    "start": "1856840",
    "end": "1863630"
  },
  {
    "text": "So remember, just another name\nfor that object in memory. So we've seen already how we\ncan pass functions as parameters",
    "start": "1863630",
    "end": "1872720"
  },
  {
    "text": "to other functions. And now we're going\nto see what happens when we return a function\nfrom another function.",
    "start": "1872720",
    "end": "1881490"
  },
  {
    "text": "So we're not returning\na function call here, we are returning\na function object.",
    "start": "1881490",
    "end": "1888850"
  },
  {
    "text": "So in this particular code,\nwe have only one function. It's named make_prod.",
    "start": "1888850",
    "end": "1895990"
  },
  {
    "text": "And it happens to have some\nstuff going on inside it. So what's the stuff that\nthis function will do?",
    "start": "1895990",
    "end": "1901510"
  },
  {
    "text": "Well, this function itself\nwill create another function. So this g only exists\nwhenever make_prod exists.",
    "start": "1901510",
    "end": "1911289"
  },
  {
    "text": "The main program--\nyou can think of it as this level of the code\nin terms of indentation.",
    "start": "1911290",
    "end": "1918450"
  },
  {
    "text": "The main program does\nnot know about g. g is only defined\ninside make_prod.",
    "start": "1918450",
    "end": "1925600"
  },
  {
    "text": "So when we first run\nthis program as is, there's no function\ncall being done. So the main program\ndoes not know anything",
    "start": "1925600",
    "end": "1931240"
  },
  {
    "text": "about the internals\nof make_prod. So make_prod creates\nits own function here.",
    "start": "1931240",
    "end": "1937890"
  },
  {
    "text": "And then all it does is\nreturn this function object. Notice it's not a function call.",
    "start": "1937890",
    "end": "1943920"
  },
  {
    "text": "There's no open/close\nparentheses with a parameter in it. It's just the name g. It's this function object.",
    "start": "1943920",
    "end": "1952110"
  },
  {
    "text": "That's the key thing here. So let's run two codes,\nthis one and this one.",
    "start": "1952110",
    "end": "1959179"
  },
  {
    "text": "They will do the\nexact same thing. They're going to call\nmake_prod with some parameters.",
    "start": "1959180",
    "end": "1967580"
  },
  {
    "text": "And then we're going to see what\nhappens when we return this g. And notice, already it's looking\nslightly different than what",
    "start": "1967580",
    "end": "1974470"
  },
  {
    "text": "we've been doing before. Yes, we have a call\nto make_prod here, but we've kind of chained\nanother function call",
    "start": "1974470",
    "end": "1982720"
  },
  {
    "text": "right after make_prod. We've got make_prod\nparentheses 2, parentheses 3.",
    "start": "1982720",
    "end": "1987910"
  },
  {
    "text": "And so this is kind of like-- I think of it as chaining\na bunch of function calls together. And this is possible,\nas we're going",
    "start": "1987910",
    "end": "1994300"
  },
  {
    "text": "to see when we step through\nthe function environments that are being created-- this is made possible because\nmake_prod, this function call,",
    "start": "1994300",
    "end": "2003450"
  },
  {
    "text": "returns a function itself. ",
    "start": "2003450",
    "end": "2008670"
  },
  {
    "text": "So let's step through the code\non the left very carefully, and then I'll step through\nthe code on the right, which",
    "start": "2008670",
    "end": "2015290"
  },
  {
    "text": "will do the exact same thing. And hopefully it will clear up\nconfusions if we do it twice.",
    "start": "2015290",
    "end": "2022230"
  },
  {
    "text": "So this is the\ncode from the left. Let's say we have this\nexact program here.",
    "start": "2022230",
    "end": "2028620"
  },
  {
    "text": "I've got one\nfunction definition, and then I've got one\nfunction call here. And then I'm going to\nprint the return value.",
    "start": "2028620",
    "end": "2036030"
  },
  {
    "text": "So as soon as I\nrun my code, Python creates my global environment. And in the global\nenvironment, this",
    "start": "2036030",
    "end": "2042650"
  },
  {
    "text": "is the scope of\nthe main program. What do we have?",
    "start": "2042650",
    "end": "2047730"
  },
  {
    "text": "Well, we have one\nfunction definition, which has some code within it. I don't care what\nit is at this point",
    "start": "2047730",
    "end": "2053719"
  },
  {
    "text": "because I don't have\na function call. So then the next thing\nthat I need to do",
    "start": "2053719",
    "end": "2060010"
  },
  {
    "text": "is go down here and\nsay, val equals. So I'm going to\ncreate a variable val",
    "start": "2060010",
    "end": "2065080"
  },
  {
    "text": "in my global environment. And I'm going to\nmake a function call. So function calls are done left\nto right, just like expressions.",
    "start": "2065080",
    "end": "2074290"
  },
  {
    "text": "And the first thing Python\nsees is this function call, make_prod(2).",
    "start": "2074290",
    "end": "2081199"
  },
  {
    "text": "It's a function call, so we need\nto create another orange box because a new environment\ngets created every time we",
    "start": "2081199",
    "end": "2088699"
  },
  {
    "text": "make a function call. So here, I have my scope, my\nenvironment for make_prod.",
    "start": "2088699",
    "end": "2096349"
  },
  {
    "text": "And I'm currently\njust stuck here, trying to figure out what\nthis is going to return, just",
    "start": "2096350",
    "end": "2101570"
  },
  {
    "text": "the red box here. Well, every time I\nhave a function call, I need to look at the\nfunction definition.",
    "start": "2101570",
    "end": "2107300"
  },
  {
    "text": "And the function definition says\nthere's one formal parameter a that I need to map to\nthe actual parameter.",
    "start": "2107300",
    "end": "2114829"
  },
  {
    "text": "So the thing I'm calling\nmake_prod with is 2. Should be pretty\nstraightforward, right?",
    "start": "2114830",
    "end": "2120880"
  },
  {
    "text": "And then I can move on to\ndo the body of make_prod.",
    "start": "2120880",
    "end": "2127339"
  },
  {
    "text": "OK. So the body of\nmake_prod says, I would like to create a\nfunction definition.",
    "start": "2127340",
    "end": "2133910"
  },
  {
    "text": "The name of this function is g. So there is g, and it\ncontains some code.",
    "start": "2133910",
    "end": "2139609"
  },
  {
    "text": "Again, I don't care what this\ncode is because I'm not making a function call to g yet. Right now, I'm just defining g.",
    "start": "2139610",
    "end": "2146201"
  },
  {
    "text": " So so far so good. So this g, I want you to notice,\nonly exists inside this call",
    "start": "2146201",
    "end": "2157920"
  },
  {
    "text": "to make_prod. The global environment does\nnot know about g at this point",
    "start": "2157920",
    "end": "2166180"
  },
  {
    "text": "because we only define\ng inside make_prod. It's here.",
    "start": "2166180",
    "end": "2171520"
  },
  {
    "text": "I didn't define it\noutside of make_prod, so the global scope\ndoesn't know about it, but make_prod does\nknow about it.",
    "start": "2171520",
    "end": "2179440"
  },
  {
    "text": "And so the only way that\nthe global environment can know about g is if this\nmake_prod function somehow",
    "start": "2179440",
    "end": "2188250"
  },
  {
    "text": "returns g.  So if we pass g back as\na parameter-- as a value,",
    "start": "2188250",
    "end": "2197150"
  },
  {
    "text": "sorry, to the main\nprogram scope, the main program\ncan know about g. But otherwise, g\nis kind of stuck",
    "start": "2197150",
    "end": "2204020"
  },
  {
    "text": "in this little subtask, little\nenvironment of make_prod. And the main program\ndoesn't know about it.",
    "start": "2204020",
    "end": "2211380"
  },
  {
    "text": "And so that's what\nthis code is doing. It's essentially saying,\nwell, I've made my definition,",
    "start": "2211380",
    "end": "2216740"
  },
  {
    "text": "and now I return g. So here, this g and\nthe associated code--",
    "start": "2216740",
    "end": "2224630"
  },
  {
    "text": "so this object pointed to by g-- is going to be returned\nback to the main program.",
    "start": "2224630",
    "end": "2233210"
  },
  {
    "text": "So now the main program\nknows about this object, g, that has some code\nassociated with it,",
    "start": "2233210",
    "end": "2240240"
  },
  {
    "text": "this line here where\nit returns a*b. ",
    "start": "2240240",
    "end": "2245380"
  },
  {
    "text": "So the thing that I've boxed\nin red down here is the return",
    "start": "2245380",
    "end": "2250599"
  },
  {
    "text": "value from make_prod(2). And make_prod(2) returned g.",
    "start": "2250600",
    "end": "2256280"
  },
  {
    "text": "So this you can\nessentially say is g. ",
    "start": "2256280",
    "end": "2263780"
  },
  {
    "text": "Is that OK? Does that make sense? We're passing functions\nalong, not function calls.",
    "start": "2263780",
    "end": "2269260"
  },
  {
    "text": "And so this is just\na function named g. And so now this line\nof code, val equals,",
    "start": "2269260",
    "end": "2276970"
  },
  {
    "text": "if we replace the red box\nwith g, val equals g(3). ",
    "start": "2276970",
    "end": "2286880"
  },
  {
    "text": "So g(3) is another\nfunction call. Just clearly.",
    "start": "2286880",
    "end": "2292190"
  },
  {
    "text": "We look at it, it's\na function call. It's got a function name,\nparentheses, and a parameter.",
    "start": "2292190",
    "end": "2297450"
  },
  {
    "text": "And so since it's\na function call, we create another scope\nfor this function call.",
    "start": "2297450",
    "end": "2303510"
  },
  {
    "text": "As before, we look at what\ng takes in as a parameter. It's a variable named b.",
    "start": "2303510",
    "end": "2309660"
  },
  {
    "text": "A formal parameter b. And we map it to 3 because\nthat's our function call, g(3).",
    "start": "2309660",
    "end": "2315870"
  },
  {
    "text": " And then we have to\ndo the body of g.",
    "start": "2315870",
    "end": "2323350"
  },
  {
    "text": "The body of g says,\nreturn a multiplied by b. Well, I know what b is. It's 3, because you just\ncalled me with that value.",
    "start": "2323350",
    "end": "2331359"
  },
  {
    "text": "But what is a? The scope of g has no within it. So thinking back to our\nlecture on functions,",
    "start": "2331360",
    "end": "2340340"
  },
  {
    "text": "if a function call doesn't\nknow about a variable name within its environment,\nwithin its scope,",
    "start": "2340340",
    "end": "2346579"
  },
  {
    "text": "it moves up the\nfunction call hierarchy. So it says, who called me?",
    "start": "2346580",
    "end": "2353509"
  },
  {
    "text": "Where was g defined? Well, g was defined\ninside make_prod,",
    "start": "2353510",
    "end": "2359000"
  },
  {
    "text": "and so it was called\nfrom make_prod. Does make_prod have\na variable named a?",
    "start": "2359000",
    "end": "2365390"
  },
  {
    "text": "It does. And its value was 2. So we didn't need to go any\nfurther up the hierarchy.",
    "start": "2365390",
    "end": "2371059"
  },
  {
    "text": "We've already found\na variable named a. So Python will use\nb is 3 and a is 2.",
    "start": "2371060",
    "end": "2377890"
  },
  {
    "text": "Multiplies that to be 6. And then the g function\ncall can return 6.",
    "start": "2377890",
    "end": "2385730"
  },
  {
    "text": "It returns it back\nto the main program because that's where this\nfunction call was being done. Remember, we had this\nreplaced with g(3)",
    "start": "2385730",
    "end": "2393920"
  },
  {
    "text": "out in this global scope here. And so that 6 gets returned\nback to the main program,",
    "start": "2393920",
    "end": "2400340"
  },
  {
    "text": "and then val becomes 6. And we print 6. ",
    "start": "2400340",
    "end": "2407900"
  },
  {
    "text": "OK. So that was showing you how to\nchain function calls together.",
    "start": "2407900",
    "end": "2413330"
  },
  {
    "text": "And this was only made\npossible because make_prod, as a function, returned\nanother function object.",
    "start": "2413330",
    "end": "2420740"
  },
  {
    "text": "If make_prod returned,\nI don't know, a tuple or an integer or\nsomething that was not",
    "start": "2420740",
    "end": "2426740"
  },
  {
    "text": "a function, this code would\nfail because the return from make_prod would be-- let's\nsay it returned the number 10.",
    "start": "2426740",
    "end": "2434180"
  },
  {
    "text": "The return from make_prod\nwould be replaced with 10, and then Python would\nsee this line as 10(3).",
    "start": "2434180",
    "end": "2440690"
  },
  {
    "text": "And what the heck is that? And so it would completely fail. And so this is only made\npossible by the fact",
    "start": "2440690",
    "end": "2447610"
  },
  {
    "text": "that this make_prod function\nreturns a function object. And so we're able to chain\nthese function calls together.",
    "start": "2447610",
    "end": "2453925"
  },
  {
    "text": " So let's look at the exact\nsame code except this time,",
    "start": "2453925",
    "end": "2460290"
  },
  {
    "text": "instead of chaining\nthem in a row, let's explicitly save\nthe intermediate steps.",
    "start": "2460290",
    "end": "2468450"
  },
  {
    "text": "So what I'm going to do is say\nmake_prod(2) I'm going to save as a variable, and then make\nthat variable call the 3,",
    "start": "2468450",
    "end": "2481450"
  },
  {
    "text": "the second part of my chain\nfrom the previous slide. And it's going to do\nthe exact same thing.",
    "start": "2481450",
    "end": "2487710"
  },
  {
    "text": "So here, I've got\nthe global scope. Just like before, I've\ngot a function definition",
    "start": "2487710",
    "end": "2494269"
  },
  {
    "text": "for make_prod. So this is the name make_prod. It points to some code. And then I've got this\nvariable doubler that's",
    "start": "2494270",
    "end": "2501260"
  },
  {
    "text": "going to equal something. So this is a function call. The function call says, here's\nmy environment for make_prod",
    "start": "2501260",
    "end": "2509760"
  },
  {
    "text": "with its scope. So in this particular\nscope, I've got my formal\nparameter a that maps",
    "start": "2509760",
    "end": "2516060"
  },
  {
    "text": "to 2, and then the function body\nitself creates this variable g.",
    "start": "2516060",
    "end": "2521850"
  },
  {
    "text": "That's just some code,\nexactly the same as before. ",
    "start": "2521850",
    "end": "2528450"
  },
  {
    "text": "Any questions so\nfar based on what happened in the last\nsort of example and here,",
    "start": "2528450",
    "end": "2533760"
  },
  {
    "text": "or is this OK so far?  OK.",
    "start": "2533760",
    "end": "2540270"
  },
  {
    "text": "So now I've set up my\ncode, and this is where the interesting part comes in. make_prod is going to\nfinish its call by saying,",
    "start": "2540270",
    "end": "2549180"
  },
  {
    "text": "I'm going to return something. And the thing it returns is g.",
    "start": "2549180",
    "end": "2554320"
  },
  {
    "text": "So it returns this name, g. Just happens to be\na function object.",
    "start": "2554320",
    "end": "2560140"
  },
  {
    "text": "But think of it\nas anything else. We're basically saying doubler\nequals 10 or doubler equals",
    "start": "2560140",
    "end": "2565540"
  },
  {
    "text": "some list or some tuple. doubler is going\nto be some value. This value is just code\nassociated with a function.",
    "start": "2565540",
    "end": "2575529"
  },
  {
    "text": "So in my main\nprogram scope, I've got doubler equals g, which,\nbased on the memory diagram",
    "start": "2575530",
    "end": "2581160"
  },
  {
    "text": "we did five or 10\nslides ago, it's like when we had\nmy_func equals is_even.",
    "start": "2581160",
    "end": "2586320"
  },
  {
    "text": "I basically have two names\nfor the same function object.",
    "start": "2586320",
    "end": "2591840"
  },
  {
    "text": "doubler is a name, and\ng is the other name. And they both point to\nthis function object.",
    "start": "2591840",
    "end": "2598935"
  },
  {
    "text": " Does that make sense?",
    "start": "2598935",
    "end": "2604640"
  },
  {
    "text": "That's OK? OK. So now that I've got two names\nthat point to the same function",
    "start": "2604640",
    "end": "2611349"
  },
  {
    "text": "object, we can just use this\ndoubler in the next line.",
    "start": "2611350",
    "end": "2617660"
  },
  {
    "text": "And this doubler is\nlike saying g(3),",
    "start": "2617660",
    "end": "2626207"
  },
  {
    "text": "except that I'm using the\nname doubler, which I saved it as on the previous line. So g(3) is another\nfunction call.",
    "start": "2626207",
    "end": "2634910"
  },
  {
    "text": "Create another environment for\ng or doubler or whatever name.",
    "start": "2634910",
    "end": "2641030"
  },
  {
    "text": "And here, I've got one\nformal parameter b. Its value is 3.",
    "start": "2641030",
    "end": "2646230"
  },
  {
    "text": "And then we do the same\ntrick where you ask, what is the value of a? I'm going to look up\nthe hierarchy of things",
    "start": "2646230",
    "end": "2652800"
  },
  {
    "text": "that got called to see what\nis the first value of a that I grab. And the first value of\na that we grab is the 2.",
    "start": "2652800",
    "end": "2660809"
  },
  {
    "text": "And so we're going to\nmultiply the 2 with the 3. And that 6 gets\nreturned back to whoever",
    "start": "2660810",
    "end": "2666390"
  },
  {
    "text": "called it, which was out here\nin the main program scope. And so this val\nwill be equal to 6.",
    "start": "2666390",
    "end": "2672630"
  },
  {
    "text": " And that's it.",
    "start": "2672630",
    "end": "2678210"
  },
  {
    "text": " Questions? Which one was easier\nto understand,",
    "start": "2678210",
    "end": "2684850"
  },
  {
    "text": "this one or the one where\nwe did the chaining? Just show of hands. Who liked this one more?",
    "start": "2684850",
    "end": "2690430"
  },
  {
    "text": "Who liked the chaining more? Oh, interesting. OK. Was the chaining\njust easier to grasp",
    "start": "2690430",
    "end": "2696730"
  },
  {
    "text": "because there were less names? OK, cool. I'm glad I showed it first then. ",
    "start": "2696730",
    "end": "2703950"
  },
  {
    "text": "Any questions though? Yeah. AUDIENCE: Is there\na particular reason we do it this way\ncompared to the chaining?",
    "start": "2703950",
    "end": "2711320"
  },
  {
    "text": "ANA BELL: No reason. In fact, you would want to do\nthe chaining way because then you avoid extra lines of code.",
    "start": "2711320",
    "end": "2717980"
  },
  {
    "text": "And again, with\npractice, it just becomes really easy to\nknow what's going on. Yeah.",
    "start": "2717980",
    "end": "2722990"
  },
  {
    "text": " OK. So that might have\nbeen confusing.",
    "start": "2722990",
    "end": "2734390"
  },
  {
    "text": "Why do we bother doing that? Because that particular\nexample, all we were doing",
    "start": "2734390",
    "end": "2739670"
  },
  {
    "text": "is multiplying two-- or I\nguess doubling a number. ",
    "start": "2739670",
    "end": "2745890"
  },
  {
    "text": "We could have easily\nwritten that code to double a number without\nactually returning a function.",
    "start": "2745890",
    "end": "2755820"
  },
  {
    "text": "That seemed way overkill for\nwhat that code was trying to do. Well, it was showing you what\nyou can do with an easy example,",
    "start": "2755820",
    "end": "2764850"
  },
  {
    "text": "and you would definitely\nnever ever write functions returning\nother functions",
    "start": "2764850",
    "end": "2770520"
  },
  {
    "text": "for such simple examples. But it's really a\nmethod for cases",
    "start": "2770520",
    "end": "2779620"
  },
  {
    "text": "where you have\nlarger pieces of code that you'd like to write\nbecause if you're trying--",
    "start": "2779620",
    "end": "2786690"
  },
  {
    "text": "so if you're writing a larger\npiece of code, some software project, and every single\nfunction you'd ever want to use",
    "start": "2786690",
    "end": "2793950"
  },
  {
    "text": "is kind of defined at the top\nlevel in the main program, it would become really messy.",
    "start": "2793950",
    "end": "2800220"
  },
  {
    "text": "And so there are\ncases where you would like some functions to only\nbe visible or accessible",
    "start": "2800220",
    "end": "2805560"
  },
  {
    "text": "by other functions. And so you'd only\ndefine those functions within the scope\nof other functions.",
    "start": "2805560",
    "end": "2811980"
  },
  {
    "text": "That's one thing. The other thing\nis using this sort of chaining method\nallows you to have",
    "start": "2811980",
    "end": "2819990"
  },
  {
    "text": "some control over the flow\nof control of a program. And so you can\nimagine in the example",
    "start": "2819990",
    "end": "2827370"
  },
  {
    "text": "here where you\nbasically create this--",
    "start": "2827370",
    "end": "2833340"
  },
  {
    "text": "you have this line here. And at some point you return g.",
    "start": "2833340",
    "end": "2838710"
  },
  {
    "text": "And you don't want to do\nthe doubling right away. So you don't want to do val\nequals doubler right away.",
    "start": "2838710",
    "end": "2844530"
  },
  {
    "text": "You can imagine having a bunch\nmore lines of code here that do other stuff before you\nactually do the doubling.",
    "start": "2844530",
    "end": "2852870"
  },
  {
    "text": "And so, in that case, in this\nlarger, more complex program, you're essentially interrupting\nthe flow of control here.",
    "start": "2852870",
    "end": "2860640"
  },
  {
    "text": "You're not doing the\ndoubling right away, but you did grab\nthis function back. And then you can maybe do\nother things with that function",
    "start": "2860640",
    "end": "2868080"
  },
  {
    "text": "before finally\ndoing the doubling. And so in that case,\nyou can basically",
    "start": "2868080",
    "end": "2874680"
  },
  {
    "text": "execute some code partially,\ndo some other operations, and then finish\nexecuting at the end",
    "start": "2874680",
    "end": "2882119"
  },
  {
    "text": "after you've done\nthese operations. So again, for this example,\nit doesn't make much sense,",
    "start": "2882120",
    "end": "2887430"
  },
  {
    "text": "but in a larger piece\nof code, this idea of functions returning\nfunctions is just another tool",
    "start": "2887430",
    "end": "2894940"
  },
  {
    "text": "to achieve these ideas of\ndecomposition abstraction, which leads you to write more\norganized code, more",
    "start": "2894940",
    "end": "2901000"
  },
  {
    "text": "robust code, more easy to read\ncode, and so on and so on. So you don't have\nto do this, but you",
    "start": "2901000",
    "end": "2907780"
  },
  {
    "text": "do have to understand what\nit means for a function to return another function.",
    "start": "2907780",
    "end": "2913780"
  },
  {
    "text": "Any other questions? OK. So now we're going to do the\nlast piece of today's lecture,",
    "start": "2913780",
    "end": "2923030"
  },
  {
    "text": "ideas of testing and debugging. This lecture is\nusually pretty dry,",
    "start": "2923030",
    "end": "2931160"
  },
  {
    "text": "so I'm going to try to make\nit more fun, as fun as I can.",
    "start": "2931160",
    "end": "2936500"
  },
  {
    "text": "The reason why we\nintroduced this lecture now is because I'm hoping that\nby this point in the course,",
    "start": "2936500",
    "end": "2944039"
  },
  {
    "text": "you've had a chance\nto do some testing and debugging\nstrategies on your own by kind of a trial and error\nthing on quizzes and on P sets.",
    "start": "2944040",
    "end": "2953510"
  },
  {
    "text": "So you've gotten a chance to\nmaybe use the Python Tutor, you've gotten a chance\nto use print statements,",
    "start": "2953510",
    "end": "2959210"
  },
  {
    "text": "various things\nlike that, and see what works best for you,\nwhat doesn't work at all, things like that.",
    "start": "2959210",
    "end": "2964230"
  },
  {
    "text": "So you've maybe gotten\na little bit burned by some of these strategies. But I hope that by you\nbeing burned by some things",
    "start": "2964230",
    "end": "2971402"
  },
  {
    "text": "that you've tried\nthat worked, that didn't work, you'll maybe\nappreciate this lecture a little bit more than\nif I just showed you",
    "start": "2971402",
    "end": "2977000"
  },
  {
    "text": "this lecture back on day one or\nday two or something like that,",
    "start": "2977000",
    "end": "2982590"
  },
  {
    "text": "because it's a lot of\ncommon sense stuff, but there's a little\nbit of actual strategy",
    "start": "2982590",
    "end": "2988860"
  },
  {
    "text": "as well in this\nparticular set of slides. So your programming\nexperience so far,",
    "start": "2988860",
    "end": "2995090"
  },
  {
    "text": "I know this is\ncertainly mine, is I hope that when I run my code,\nit immediately runs perfectly.",
    "start": "2995090",
    "end": "3000119"
  },
  {
    "text": "But instead, what ends\nup happening for me, is I run my code, and\nit immediately crashes.",
    "start": "3000120",
    "end": "3005309"
  },
  {
    "text": "I've got my red\nerrors on the side, and I get a little\nbit flustered. So this is exactly what\nhappens, probably for you too.",
    "start": "3005310",
    "end": "3013800"
  },
  {
    "text": "And the idea here\nis that you want to write the code in\nsuch a way that it makes",
    "start": "3013800",
    "end": "3020279"
  },
  {
    "text": "it easy to test and debug. And I know I always say this,\nand I actually don't always practice it, but it's important\nto write the code by writing it",
    "start": "3020280",
    "end": "3032505"
  },
  {
    "text": "by adding comments as\nyou're writing the code. So writing specifications,\nwriting comments for yourself",
    "start": "3032505",
    "end": "3038940"
  },
  {
    "text": "as you're actually writing the\ncode, not when you've finished it is, very important. It helps you as\nyou're writing it,",
    "start": "3038940",
    "end": "3044880"
  },
  {
    "text": "or when you're coming back\nto it in a couple of days. Modularizing the\nprograms also helps.",
    "start": "3044880",
    "end": "3050690"
  },
  {
    "text": "So if you see a chunk of code\nthat you're copying and pasting all over the place,\nyou'll want to plop it out",
    "start": "3050690",
    "end": "3057550"
  },
  {
    "text": "in a little function that\nyou call multiple places. So ideas like that\nkind of employ",
    "start": "3057550",
    "end": "3063490"
  },
  {
    "text": "this defensive\nprogramming mechanism, and it allows you to\nperform really easy testing",
    "start": "3063490",
    "end": "3070990"
  },
  {
    "text": "and validation when it\ncomes time to do that, and then possibly debugging\nwhen it comes time to do that.",
    "start": "3070990",
    "end": "3078590"
  },
  {
    "text": "So the lecture is going to\nbe divided into two pieces. The first, we're going to talk\nabout testing and validation.",
    "start": "3078590",
    "end": "3084339"
  },
  {
    "text": "Some nice testing strategies. And then we're going to\ntalk about some strategies for debugging as well.",
    "start": "3084340",
    "end": "3089990"
  },
  {
    "text": "So the testing and\nvalidation part is where you come up with a set\nof input test cases and expected",
    "start": "3089990",
    "end": "3096910"
  },
  {
    "text": "outputs. And all you're doing\nis running the test, running your code to make sure\nthat the expected output matches",
    "start": "3096910",
    "end": "3104109"
  },
  {
    "text": "the output that you actually\nget from running the code. The debugging part is\nwhere one of your tests",
    "start": "3104110",
    "end": "3113089"
  },
  {
    "text": "don't match the expected output. One of the outputs that you get\ndon't match the expected output.",
    "start": "3113090",
    "end": "3118890"
  },
  {
    "text": "And at that point, you have to\nfigure out why the code is not working, obviously. So before you even test your\ncode, as I mentioned before,",
    "start": "3118890",
    "end": "3128520"
  },
  {
    "text": "you have to set yourself up to\ndo the testing and debugging. So to ease this part, it's\nimportant to write documentation",
    "start": "3128520",
    "end": "3137150"
  },
  {
    "text": "very well. So when you're writing your\nown function, not functions that we've given you,\ndocument the docstring.",
    "start": "3137150",
    "end": "3142520"
  },
  {
    "text": "What are the inputs you expect? What should the function do? What should the function return? Things like that.",
    "start": "3142520",
    "end": "3148040"
  },
  {
    "text": "If you're writing\nthe code in sort of a strange way or if you\nuse some piece from Stack Overflow or something like\nthat, document it to make sure",
    "start": "3148040",
    "end": "3155900"
  },
  {
    "text": "that if you're looking\nat it a week from now you still remember what\nthat piece of code did. So really, really\nsimple things like that",
    "start": "3155900",
    "end": "3162050"
  },
  {
    "text": "can make a really big\ndifference when it comes time to test and debug. ",
    "start": "3162050",
    "end": "3167650"
  },
  {
    "text": "Breaking up the code,\nobviously, into smaller chunks is very important because if\nyou're copying and pasting",
    "start": "3167650",
    "end": "3172900"
  },
  {
    "text": "the same piece of code\nover and over again, you remember to make\na change in one place,",
    "start": "3172900",
    "end": "3178240"
  },
  {
    "text": "you might forget to\nmake that same changes in all these different places. And so that'll be\nvery frustrating",
    "start": "3178240",
    "end": "3185440"
  },
  {
    "text": "when it comes time to actually\nrun and debug the code. So once you have\ncode that's written,",
    "start": "3185440",
    "end": "3192160"
  },
  {
    "text": "you would start the\ntesting process. You remove all the errors.",
    "start": "3192160",
    "end": "3198849"
  },
  {
    "text": "Static semantic errors\nand syntax errors are really easy to remove. Python immediately\ntells you, index error",
    "start": "3198850",
    "end": "3204070"
  },
  {
    "text": "on this line or syntax\nerror on this line. Those are really\neasy to figure out.",
    "start": "3204070",
    "end": "3209790"
  },
  {
    "text": "Using a paper and pen or typing\nit out in your Python file,",
    "start": "3209790",
    "end": "3215610"
  },
  {
    "text": "you come up with a\nbunch of test cases. And for each one of\nthose test cases,",
    "start": "3215610",
    "end": "3221390"
  },
  {
    "text": "the way we write on your\nmicro quiz test cases,",
    "start": "3221390",
    "end": "3226549"
  },
  {
    "text": "you say what you expect\nthe output to be. So when you actually\nrun it, you don't need to remember what\nthis output should be.",
    "start": "3226550",
    "end": "3233030"
  },
  {
    "text": "It's just written down somewhere\non paper or on the screen.",
    "start": "3233030",
    "end": "3239470"
  },
  {
    "text": "So when you're creating\na bunch of test cases, you can create some\ndifferent classes of tests.",
    "start": "3239470",
    "end": "3245430"
  },
  {
    "text": "So hopefully we're modularizing\nour programs, which means that we're creating functions.",
    "start": "3245430",
    "end": "3251420"
  },
  {
    "text": "The simplest classes of\ntests are called unit tests, and these tests basically test a\nfunction with different inputs.",
    "start": "3251420",
    "end": "3261620"
  },
  {
    "text": "So what you're going\nto do is come up with a bunch of\ndifferent test cases",
    "start": "3261620",
    "end": "3266630"
  },
  {
    "text": "for one particular function\nand run these test cases on the function.",
    "start": "3266630",
    "end": "3272539"
  },
  {
    "text": "If they all work, perfect. But if they don't,\nor if you find a bug as you're writing test\ncases in the code,",
    "start": "3272540",
    "end": "3279540"
  },
  {
    "text": "you'll want to perform\nregression testing. And regression testing means\nthat as you find a bug,",
    "start": "3279540",
    "end": "3285260"
  },
  {
    "text": "you add a new test case for\nthem, or as you fix a bug,",
    "start": "3285260",
    "end": "3290970"
  },
  {
    "text": "you run the code-- you run the same code with\nall of the previous test cases",
    "start": "3290970",
    "end": "3296340"
  },
  {
    "text": "to make sure that\nthe bug you fixed didn't introduce errors\nin a previous test case.",
    "start": "3296340",
    "end": "3301530"
  },
  {
    "text": "So there's a bunch of iterations\nof unit testing and regression testing to test all of\nthese different modules, all",
    "start": "3301530",
    "end": "3307710"
  },
  {
    "text": "the functions in your program. And at some point, you're ready\nto do integration testing.",
    "start": "3307710",
    "end": "3313109"
  },
  {
    "text": "And in integration\ntesting, you've got all these modules, for\nexample, as you did in Hangman. You've got all these\nlittle functions",
    "start": "3313110",
    "end": "3318810"
  },
  {
    "text": "that do individual things. You put them all together\ninto a larger program. In Hangman, it was\na big while loop",
    "start": "3318810",
    "end": "3326369"
  },
  {
    "text": "where you check all\nthese different things that the user might\ninput, and then you call the different\nfunctions you wrote.",
    "start": "3326370",
    "end": "3331779"
  },
  {
    "text": "And as you find errors in\nthe integration, when you've written code that integrated all\nthese different pieces together,",
    "start": "3331780",
    "end": "3340619"
  },
  {
    "text": "you might have to go\nback and do more unit tests for some of the\nfunctions that you wrote.",
    "start": "3340620",
    "end": "3347890"
  },
  {
    "text": "OK. So you've done unit\ntesting, regression testing, and integration testing. What are some actual\ntesting approaches?",
    "start": "3347890",
    "end": "3355270"
  },
  {
    "text": "How do you actually create these\ntest cases to run your code? So I guess the most natural way\nto write a test case is just",
    "start": "3355270",
    "end": "3364740"
  },
  {
    "text": "intuition about the problem. So given a docstring,\nwhat are going",
    "start": "3364740",
    "end": "3369998"
  },
  {
    "text": "to be some natural\nboundaries, some natural values of x and y for which\nyou test this code with. You guys tell me.",
    "start": "3369998",
    "end": "3375480"
  },
  {
    "text": "What's some values that we\ncould test this code with? ",
    "start": "3375480",
    "end": "3383690"
  },
  {
    "text": "Think about the boundaries\nto the question. AUDIENCE: That means\nthe difference x to y",
    "start": "3383690",
    "end": "3389831"
  },
  {
    "text": "is [INAUDIBLE]. ANA BELL: Yeah. 3 and 4 is good. So x is less than\ny is a good one.",
    "start": "3389831",
    "end": "3395320"
  },
  {
    "text": "Vice versa. 4 and 3 is another one\nwhere y is less than x.",
    "start": "3395320",
    "end": "3401630"
  },
  {
    "text": "We could test them being equal. What about 0 and 0? What about 1,000 and 1,000? So we could do extremes, we\ncould do bigger than, less than,",
    "start": "3401630",
    "end": "3409940"
  },
  {
    "text": "we could do equal, things that. So mathematical\nfunctions are kind of easy to apply this idea\nto because they just",
    "start": "3409940",
    "end": "3416450"
  },
  {
    "text": "have natural boundaries. But often, there\nare functions which don't have these\nnatural boundaries, and then we might be stuck\ndoing random testing.",
    "start": "3416450",
    "end": "3424190"
  },
  {
    "text": "And in random testing,\nobviously, the more test cases you have, the better chance\nyou have of finding a bug.",
    "start": "3424190",
    "end": "3431190"
  },
  {
    "text": "But there are actual techniques\nfor coming up with test cases. So the first one is\ncalled black box testing.",
    "start": "3431190",
    "end": "3437430"
  },
  {
    "text": "Second is called\nglass box testing. Now, in black box\ntesting, you're",
    "start": "3437430",
    "end": "3443200"
  },
  {
    "text": "going to treat the code of\nthe function as a black box. So we don't even look at\nwhat the code is doing.",
    "start": "3443200",
    "end": "3450550"
  },
  {
    "text": "All we're looking at to\nguide writing our test cases is the specification,\nthe docstring.",
    "start": "3450550",
    "end": "3457780"
  },
  {
    "text": "And so hopefully the person\nwho wrote this function wrote a really nice\ndocstring because that's",
    "start": "3457780",
    "end": "3462910"
  },
  {
    "text": "what we're going to use\nto write our test cases. So the way that we're\ngoing to write a test",
    "start": "3462910",
    "end": "3469450"
  },
  {
    "text": "case for this square root\nfunction is by saying, what is the value of x\nand epsilon according",
    "start": "3469450",
    "end": "3476140"
  },
  {
    "text": "to these constraints here? So obviously, we're not going\nto test the code with values",
    "start": "3476140",
    "end": "3482410"
  },
  {
    "text": "that don't match those\nconstraints because the person who wrote this function\ndoesn't guarantee that this function will work\nout of those weird values.",
    "start": "3482410",
    "end": "3492260"
  },
  {
    "text": "So the good thing\nabout black box testing is if we're the ones\ntesting this function,",
    "start": "3492260",
    "end": "3497620"
  },
  {
    "text": "we're only using\nthe specification to write the test cases. So if, for example, this\nperson implemented square root",
    "start": "3497620",
    "end": "3503890"
  },
  {
    "text": "using approximation\nmethod, I don't care. My test cases will\nwork if the person",
    "start": "3503890",
    "end": "3509740"
  },
  {
    "text": "changes their implementation\nto use the bisection method. My set of test cases\nwill still work",
    "start": "3509740",
    "end": "3515920"
  },
  {
    "text": "even if the person who\nwrote this function changed the black box,\nthe implementation.",
    "start": "3515920",
    "end": "3522950"
  },
  {
    "text": "So black box testing is\nreally nice in that respect. And so for this\nparticular function,",
    "start": "3522950",
    "end": "3529339"
  },
  {
    "text": "here's a bunch of test cases\nthat I would run it with. So obviously, x being\n0, perfect square less",
    "start": "3529340",
    "end": "3535810"
  },
  {
    "text": "than 1 are kind of nice ones\nto test, irrational values, and then a bunch of extremes\nis also good to test.",
    "start": "3535810",
    "end": "3544000"
  },
  {
    "text": "And then epsilon, the same. We've got some reasonable\nvalues of epsilon, and then some extremes.",
    "start": "3544000",
    "end": "3549280"
  },
  {
    "text": "And we can even mix and match. We can have 0 and\nextremes epsilons,",
    "start": "3549280",
    "end": "3555109"
  },
  {
    "text": "and perfect squares and extremes\nepsilons, and things like that. So lots more test\ncases than this,",
    "start": "3555110",
    "end": "3561420"
  },
  {
    "text": "but this is a really good start. In glass box testing we're going\nto use the code itself to guide",
    "start": "3561420",
    "end": "3568910"
  },
  {
    "text": "the test cases that we write. So if we write something, a\ntest suite that's path complete,",
    "start": "3568910",
    "end": "3575780"
  },
  {
    "text": "that means that we're going\nto hit every single path inside the program. So that means we have to look at\nthe code to guide the test cases",
    "start": "3575780",
    "end": "3584000"
  },
  {
    "text": "that we're writing,\nwhich means that we're going to have to write a test\ncase for the code hitting the if",
    "start": "3584000",
    "end": "3590210"
  },
  {
    "text": "part of a branch, we\nhave to write a test case for the code hitting the\nelse part of a branch, or the L if part of the branch.",
    "start": "3590210",
    "end": "3596115"
  },
  {
    "text": "If we have a for loop, we need\nto write a test case where the code doesn't go\nthrough the loop at all, it goes through once, or\nit goes through many times",
    "start": "3596115",
    "end": "3602395"
  },
  {
    "text": "through the loop. Same with while loops. We write a test case so\nthat the code doesn't go through the\nwhile loop at all,",
    "start": "3602395",
    "end": "3608000"
  },
  {
    "text": "it matches the condition once,\nor it matches the condition many times. So you can imagine that\nthis glass box testing leads",
    "start": "3608000",
    "end": "3614840"
  },
  {
    "text": "to a whole lot more test\ncases, especially when we have a whole bunch of different\ncombinations of all",
    "start": "3614840",
    "end": "3620990"
  },
  {
    "text": "of these conditionals\nand loops and things that we'd like to hit. The problem with glass\nbox testing and having",
    "start": "3620990",
    "end": "3627420"
  },
  {
    "text": "a path complete test suite\nis that we might accidentally miss a bug.",
    "start": "3627420",
    "end": "3633330"
  },
  {
    "text": "So here's an example of a\ncode that's not correct. So it finds absolute value of x.",
    "start": "3633330",
    "end": "3639660"
  },
  {
    "text": "If x is less than negative\n1, we return negative x, else we return x.",
    "start": "3639660",
    "end": "3644820"
  },
  {
    "text": "So a path complete\ntest suite could be testing 2 and negative 2. The 2 brings us\nthrough the else.",
    "start": "3644820",
    "end": "3652880"
  },
  {
    "text": "So we return 2. And the negative 2\nbrings us through the if. So we return 2.",
    "start": "3652880",
    "end": "3659340"
  },
  {
    "text": "We might say this code\nworks, but it doesn't. We already can tell\nthat negative 1",
    "start": "3659340",
    "end": "3664940"
  },
  {
    "text": "is returned incorrectly\nas negative 1. And so in addition to testing\nall the paths through the code,",
    "start": "3664940",
    "end": "3673610"
  },
  {
    "text": "we'll also want to look\nat boundary condition, especially for conditionals,\nwhen we do glass box testing.",
    "start": "3673610",
    "end": "3681100"
  },
  {
    "text": "OK. So we have a whole\nbunch of test cases. We've run our code with\nall these test cases.",
    "start": "3681100",
    "end": "3686250"
  },
  {
    "text": "And then, at some point,\nwe've gotten an output from a test case that does not\nmatch what we expected to do.",
    "start": "3686250",
    "end": "3693630"
  },
  {
    "text": "Then we have to do\nthe debugging process. And this is where a little\ncreativity is required.",
    "start": "3693630",
    "end": "3705859"
  },
  {
    "text": "There is no recipe,\nlike there was in glass box testing\nand black box testing, for writing test cases.",
    "start": "3705860",
    "end": "3711620"
  },
  {
    "text": "There is no similar sort of\nrecipe for debugging a program.",
    "start": "3711620",
    "end": "3716990"
  },
  {
    "text": "There is a lot of\nexperience that's needed, a lot of times that\nyou've seen a bug crop up",
    "start": "3716990",
    "end": "3723370"
  },
  {
    "text": "in order to figure out\nwhat the problem might be. And so a lot of\nexperience writing code is very useful in the\ndebugging process.",
    "start": "3723370",
    "end": "3732680"
  },
  {
    "text": "There are tools to help you\ndo the debugging process, but there aren't many tools\nto actually do the debugging.",
    "start": "3732680",
    "end": "3738410"
  },
  {
    "text": "You kind of just have to do it. So there's tools\nbuilt into Anaconda. They're not very good.",
    "start": "3738410",
    "end": "3744450"
  },
  {
    "text": "I've used them. Python Tutor, obviously,\nis a really good one, especially for small\nprograms, because you",
    "start": "3744450",
    "end": "3749840"
  },
  {
    "text": "get to just go step by step and\nsee the values of each variable as the code is running.",
    "start": "3749840",
    "end": "3756600"
  },
  {
    "text": "So I like that a lot. Print statements are\nalso really good, but you have to know\nwhere to put them.",
    "start": "3756600",
    "end": "3762590"
  },
  {
    "text": "And you have to use\nthem effectively. So in that sense, if you're\nnot as familiar with print",
    "start": "3762590",
    "end": "3768320"
  },
  {
    "text": "statements, Python Tutor might\nbe better suited for debugging. But no matter what, it's\nimportant to be systematic.",
    "start": "3768320",
    "end": "3774560"
  },
  {
    "text": "Don't just start changing random\nvariables or random conditions, and then run the code\nthrough the tester again.",
    "start": "3774560",
    "end": "3781280"
  },
  {
    "text": "That's not going to\nwork very well for us. When we see error messages\nin the debugging process,",
    "start": "3781280",
    "end": "3787110"
  },
  {
    "text": "these are really\neasy to figure out. IndexError. Oh, shoot. I got to check my indices.",
    "start": "3787110",
    "end": "3792950"
  },
  {
    "text": "Maybe I went over. If you see an IndexError,\nyou should probably print out the\nvariable that you're",
    "start": "3792950",
    "end": "3799310"
  },
  {
    "text": "indexing into or indexing with. TypeErrors.",
    "start": "3799310",
    "end": "3804665"
  },
  {
    "text": "Oh, man, look. I'm casting a list\nto an integer. What is that going to do?",
    "start": "3804665",
    "end": "3809670"
  },
  {
    "text": "Nothing. It's going to give us an error. Or here, I'm dividing\na string by an integer. Again, something\nreally simple to fix.",
    "start": "3809670",
    "end": "3816480"
  },
  {
    "text": "NameErrors, of course. Here I have a variable that\nI've never initialized.",
    "start": "3816480",
    "end": "3822310"
  },
  {
    "text": "And then SyntaxErrors\nbasically mean things like your\nindentation is off or you're missing a parentheses\nor something like that.",
    "start": "3822310",
    "end": "3831150"
  },
  {
    "text": "Logic errors are a lot harder. These ones, you cannot just\nlook at the line and say,",
    "start": "3831150",
    "end": "3838750"
  },
  {
    "text": "this is where the problem is. These ones happen when\nyour output does not match the expected output.",
    "start": "3838750",
    "end": "3845130"
  },
  {
    "text": "And this is where engaging\nanother part of your brain is very important.",
    "start": "3845130",
    "end": "3850870"
  },
  {
    "text": "I've definitely done this a lot. I've had some errors, I\nwent for a walk, come back, and I figured it out, or I\nfigured it out in the shower,",
    "start": "3850870",
    "end": "3856920"
  },
  {
    "text": "or I figured it out in bed. So thinking a little bit before\nyou even start the problem",
    "start": "3856920",
    "end": "3863670"
  },
  {
    "text": "is good for these logic errors. Drawing pictures, taking a\nbreak, talking to friends,",
    "start": "3863670",
    "end": "3869040"
  },
  {
    "text": "all these are really good. Explaining the code to\nsomething else, somebody else, is also a really\nnice thing to do.",
    "start": "3869040",
    "end": "3874950"
  },
  {
    "text": "That's me explaining\nthe code for something we're going to do in a\ncouple of minutes to my son.",
    "start": "3874950",
    "end": "3880650"
  },
  {
    "text": "He's seven now, and\nhe's doing Scratch. So that's pretty cool. But he was helping me debug,\nand now I'm helping him debug.",
    "start": "3880650",
    "end": "3887250"
  },
  {
    "text": "Yeah. Or you can explain code to some\ninanimate object like a rubber ducky.",
    "start": "3887250",
    "end": "3892819"
  },
  {
    "text": "Now, having said that, you\nguys came on a good day because you will all get to\nhave your own rubber duck.",
    "start": "3892820",
    "end": "3905930"
  },
  {
    "text": "Different kinds. Grab your personality duck\nthat matches your personality",
    "start": "3905930",
    "end": "3911300"
  },
  {
    "text": "after class. I've got Minecraft ducks,\ngiraffe ducks, princess ducks, police ducks, elephant ducks.",
    "start": "3911300",
    "end": "3919070"
  },
  {
    "text": "Whatever ducks you'd\nlike come grab one. Use it for your quizzes.",
    "start": "3919070",
    "end": "3924320"
  },
  {
    "text": "Use it for your P sets. Whatever you'd like to\nuse it for, go for it.",
    "start": "3924320",
    "end": "3930770"
  },
  {
    "text": "OK. So hopefully it comes in handy. Use it well.",
    "start": "3930770",
    "end": "3936680"
  },
  {
    "text": "All right. So we're not quite\ndone yet, though. ",
    "start": "3936680",
    "end": "3942980"
  },
  {
    "text": "OK. So I will give you a little\nbit of debugging tips though.",
    "start": "3942980",
    "end": "3949190"
  },
  {
    "text": "So I know I said it's\na creative process. I said it's really hard\nto come up with a recipe",
    "start": "3949190",
    "end": "3955410"
  },
  {
    "text": "to do the actual debugging. But there is maybe one\nreally nice way to do it.",
    "start": "3955410",
    "end": "3962920"
  },
  {
    "text": "So the idea behind debugging\nis to basically use the scientific method.",
    "start": "3962920",
    "end": "3968340"
  },
  {
    "text": "Like I said, don't just randomly\nchange things expecting for it to work out. What you want to do is look at a\nbunch of test cases that failed.",
    "start": "3968340",
    "end": "3976049"
  },
  {
    "text": "It's possible that they all\nhave something in common. And that might lead you\nto a small piece of code",
    "start": "3976050",
    "end": "3981990"
  },
  {
    "text": "in your program that\nis the one that you should be focusing on changing. So you want to look at the\ndata, form a hypothesis,",
    "start": "3981990",
    "end": "3989460"
  },
  {
    "text": "and try to see if\nanother test case also fails that particular one. As you're doing the\ndebugging method,",
    "start": "3989460",
    "end": "3998240"
  },
  {
    "text": "if you really have no\nidea about where to start, try putting print statements at\nreasonable places in the code.",
    "start": "3998240",
    "end": "4006430"
  },
  {
    "text": "So when you first\nenter functions, when you first enter a\nloop, write all the values of the loop variable\nand all the variables",
    "start": "4006430",
    "end": "4013375"
  },
  {
    "text": "that you're creating in the\nloop or modifying in the loop and things like that. And if all else fails,\nusing the bisection method",
    "start": "4013375",
    "end": "4020400"
  },
  {
    "text": "is a really nice way to\ntry to solve the problem. So bisection method\nand debugging",
    "start": "4020400",
    "end": "4025500"
  },
  {
    "text": "basically says, put a print\nstatement about halfway in the code. If everything looks right for\nall the variables at that point,",
    "start": "4025500",
    "end": "4033200"
  },
  {
    "text": "you know the problem\nis after this. If something is wrong,\nyou know the problem is in the first half of the code.",
    "start": "4033200",
    "end": "4038869"
  },
  {
    "text": "Then put a print statement\nin a quarter of the code. And then, at that point, see\nif all the values at that point",
    "start": "4038870",
    "end": "4046760"
  },
  {
    "text": "match what you\nexpect them to be. If they do, great. You know the problem is in\nthe second quarter, I guess.",
    "start": "4046760",
    "end": "4053510"
  },
  {
    "text": "Yes, the second quarter. And if they don't, the problem\nis in the first quarter. So the bisection\nmethod is a nice way",
    "start": "4053510",
    "end": "4061550"
  },
  {
    "text": "to try to debug the code. So what we're going to do\nin the last bit of lecture is we're going to debug\nsome code together.",
    "start": "4061550",
    "end": "4068020"
  },
  {
    "text": "That's in the Python file. And then what I have\nincluded in today's zip file",
    "start": "4068020",
    "end": "4074799"
  },
  {
    "text": "is actually a Wordle\ngame that I wrote. It's like 12_wordle.py\nor whatever.",
    "start": "4074800",
    "end": "4080619"
  },
  {
    "text": "And it's buggy. So I introduced some bugs in it. And if you'd like to\npractice debugging,",
    "start": "4080620",
    "end": "4087790"
  },
  {
    "text": "you can try to fix the Wordle\ngame to get it to work. And then you can\nplay it yourself",
    "start": "4087790",
    "end": "4093339"
  },
  {
    "text": "or you can amaze\nyour friends and get them to play your\ngame in case you'd like to do something like that.",
    "start": "4093340",
    "end": "4100120"
  },
  {
    "text": "So before we end, I\nwould like to actually do some debugging with you,\njust to show you the bisection",
    "start": "4100120",
    "end": "4107560"
  },
  {
    "text": "method for debugging. So the code we're going to\ndebug is this one right here.",
    "start": "4107560",
    "end": "4115290"
  },
  {
    "text": "And I've already included\nthe fixed code step by step,",
    "start": "4115290",
    "end": "4120509"
  },
  {
    "text": "but we're going to talk\nthrough it together. So this function is buggy.",
    "start": "4120510",
    "end": "4128410"
  },
  {
    "text": "It's a function called is_pal\nthat takes in a list x.",
    "start": "4128410",
    "end": "4134068"
  },
  {
    "text": "And it's supposed to return\ntrue if the list elements are a palindrome and\nfalse otherwise.",
    "start": "4134069",
    "end": "4141660"
  },
  {
    "text": "So using the input\nabcba cast as a list--",
    "start": "4141660",
    "end": "4147990"
  },
  {
    "text": "so the input is going to\nbe the string a, string b, string c, string b,\nstring a-- this list is",
    "start": "4147990",
    "end": "4155149"
  },
  {
    "text": "a palindrome because it's\nthe same forwards as it is backwards. So if I run it, it\nshould print true.",
    "start": "4155149",
    "end": "4162719"
  },
  {
    "text": "OK. So that test case worked well. But now, what about\nthe second test case?",
    "start": "4162720",
    "end": "4167899"
  },
  {
    "text": "Surprise, it's\nnot going to work. If I pass in the list\nab, so my input is",
    "start": "4167899",
    "end": "4173680"
  },
  {
    "text": "going to be the string\na and the string b, this is not a palindrome. So I expect it to print\nfalse, but it prints true.",
    "start": "4173680",
    "end": "4181830"
  },
  {
    "text": "So I have a nice\ntest case here that I can make fixes with and see\nwhether it actually gets fixed.",
    "start": "4181830",
    "end": "4189149"
  },
  {
    "text": "Now, of course, abcdefghijklm,\nthis also doesn't work.",
    "start": "4189149",
    "end": "4195130"
  },
  {
    "text": "So this is another test case\nthat's not going to work. But I don't want to use this\nlong one as my test case.",
    "start": "4195130",
    "end": "4200750"
  },
  {
    "text": "I want to use the\nsimplest test case I can find that doesn't work. So ab seems like a really\nnice one to test with.",
    "start": "4200750",
    "end": "4208140"
  },
  {
    "text": "OK. So now, the first thing\nwe want to do, now that we've figured out the\ninput I'd like to test with,",
    "start": "4208140",
    "end": "4214080"
  },
  {
    "text": "is put a print statement about\nhalfway through the code. Yes, there's only like\nfive lines of code here.",
    "start": "4214080",
    "end": "4221410"
  },
  {
    "text": "So there's only probably\none place that makes sense to put a print statement. But let's just\nwork with me here.",
    "start": "4221410",
    "end": "4228040"
  },
  {
    "text": "So the print statement could be\nput right here, right before the if statement.",
    "start": "4228040",
    "end": "4233810"
  },
  {
    "text": "So I've got two lines of\ncode that do something, and then an if. So let's just put it\nright before the if.",
    "start": "4233810",
    "end": "4239520"
  },
  {
    "text": "Scroll down. Step two. Here I go. I've put my print statement\nright before the if.",
    "start": "4239520",
    "end": "4246590"
  },
  {
    "text": " Now we can run the code again.",
    "start": "4246590",
    "end": "4251760"
  },
  {
    "text": "So I'm not going to run\nthe one that worked. Let me try to run the one\nthat didn't work to figure out what the problem is.",
    "start": "4251760",
    "end": "4257190"
  },
  {
    "text": "So I run this. The print statement is\nprinting the temp, so the reverse of x, and x.",
    "start": "4257190",
    "end": "4265960"
  },
  {
    "text": "So what I'm expecting-- and I should have probably\nwritten this over here, what I'm expecting to get.",
    "start": "4265960",
    "end": "4272770"
  },
  {
    "text": "What I'm expecting is to\nsee the reverse of ab, so ba, and then\nthe original x, ab.",
    "start": "4272770",
    "end": "4280150"
  },
  {
    "text": "But I don't. So I see ab and ab. This first one should be ba.",
    "start": "4280150",
    "end": "4287590"
  },
  {
    "text": "So already I have something\nthat's unexpected, and so I know the\nproblem is going",
    "start": "4287590",
    "end": "4292600"
  },
  {
    "text": "to be in these first two lines\nof code, somewhere in here. ",
    "start": "4292600",
    "end": "4298030"
  },
  {
    "text": "All right. So then what I\nwould like to do is figure out which one of these\nlines of code is the problem.",
    "start": "4298030",
    "end": "4304060"
  },
  {
    "text": "So I'm going to put another\nprint statement a quarter of the way through the code. OK. Well, there's only one\nmore place to put it.",
    "start": "4304060",
    "end": "4310483"
  },
  {
    "text": "So let's put it in here. I've got another print statement\nright before the reverse.",
    "start": "4310483",
    "end": "4316320"
  },
  {
    "text": "So what I'm going to be\nchecking is, before the reverse, the value of my temp variable\nand my original variable,",
    "start": "4316320",
    "end": "4325060"
  },
  {
    "text": "and after the reverse, the\nvalue of my reverse variable and the original variable.",
    "start": "4325060",
    "end": "4331570"
  },
  {
    "text": "So what I'm expecting\nto see is this one here, they should be the same, ab, ab.",
    "start": "4331570",
    "end": "4338840"
  },
  {
    "text": "But this one here, I'm\nexpecting to see ba, ab. So run it with\nthis buggy example.",
    "start": "4338840",
    "end": "4348270"
  },
  {
    "text": "So before the reverse,\nI'm expecting ab and ab. And I do get that,\nso that's good.",
    "start": "4348270",
    "end": "4354480"
  },
  {
    "text": "I'm happy to see that. And then after the\nreverse, that's my problem. I'm expecting this one to\nbe reversed, but it's not.",
    "start": "4354480",
    "end": "4362599"
  },
  {
    "text": "So now I know the problem\nlies here, temp.reverse,",
    "start": "4362600",
    "end": "4368480"
  },
  {
    "text": "because here, in this print\nstatement, here temp and x were as expected. So what do you think the fix\nshould be to the reverse?",
    "start": "4368480",
    "end": "4374990"
  },
  {
    "text": "Yeah. AUDIENCE: We need\nto add parentheses. ANA BELL: Yeah, exactly. We need to add parentheses. This is a function.",
    "start": "4374990",
    "end": "4380250"
  },
  {
    "text": "We need to call it\nlike a function. So let's do that fix.",
    "start": "4380250",
    "end": "4387510"
  },
  {
    "text": "We've done it here. So here, I've added the\nparentheses to the reverse.",
    "start": "4387510",
    "end": "4393800"
  },
  {
    "text": "And run it again. So now what I'm\nexpecting is before the reverse, I\nneed to see ab, ab.",
    "start": "4393800",
    "end": "4400200"
  },
  {
    "text": "So this one should be the same. It shouldn't change because\nI didn't do anything to that temp equals x.",
    "start": "4400200",
    "end": "4406070"
  },
  {
    "text": "And after the reverse,\nI'm expecting the temp to be ba and the x\nto be ab, unchanged.",
    "start": "4406070",
    "end": "4412990"
  },
  {
    "text": "All right. Let's run it. So before the reverse,\neverything looks OK. temp and x are the same.",
    "start": "4412990",
    "end": "4419429"
  },
  {
    "text": "After the reverse, look at that. I've got my ba as my\nreversed variable. I'm happy.",
    "start": "4419430",
    "end": "4427290"
  },
  {
    "text": "But then my x has also changed. I'm sad. Yes.",
    "start": "4427290",
    "end": "4432929"
  },
  {
    "text": "AUDIENCE: You have\nto make a copy of x. ANA BELL: Exactly. There's a clue.",
    "start": "4432930",
    "end": "4438540"
  },
  {
    "text": "We see a clue. We've made a change to temp\nand x has also changed.",
    "start": "4438540",
    "end": "4443810"
  },
  {
    "text": "So as was suggested\nfrom the back, we need to make a copy of x.",
    "start": "4443810",
    "end": "4449810"
  },
  {
    "text": "What we've done\nhere is called, when I did temp equals x,\non a mutable variable.",
    "start": "4449810",
    "end": "4456558"
  },
  {
    "text": "What did I make? AUDIENCE: Alias. ANA BELL: An alias. Exactly. So let's make a copy\nof that x right here.",
    "start": "4456558",
    "end": "4466570"
  },
  {
    "start": "4466570",
    "end": "4472130"
  },
  {
    "text": "So hopefully that fixes\nthings because I've run out of lines to fix. So if we run this\ncode again with ab",
    "start": "4472130",
    "end": "4479210"
  },
  {
    "text": "and see the output\nbefore the reverse, temp and x should be the same.",
    "start": "4479210",
    "end": "4486060"
  },
  {
    "text": "And they are. They're both ab, ab. And after the reverse, the\ntemp should be the reversed ba,",
    "start": "4486060",
    "end": "4493160"
  },
  {
    "text": "and it is. And the x should\nremain the same, ab. And it's false, so\nit's not a palindrome.",
    "start": "4493160",
    "end": "4501650"
  },
  {
    "text": "Last thing I need to do is\ndouble-check my original test case, the one that\nactually worked",
    "start": "4501650",
    "end": "4507770"
  },
  {
    "text": "before I made all my changes,\nto see whether it still works. And it does.",
    "start": "4507770",
    "end": "4514030"
  },
  {
    "text": "So that particular\nlist is a palindrome. So that still returns true. ",
    "start": "4514030",
    "end": "4521750"
  },
  {
    "text": "So that's it. So I've got a\ncouple-- or just one, I guess, list comprehension for\nyou to try on your own to write.",
    "start": "4521750",
    "end": "4528469"
  },
  {
    "text": "And then, of course, the\nbuggy Wordle game for you to try as well. ",
    "start": "4528470",
    "end": "4545000"
  }
]