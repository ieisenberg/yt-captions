[
  {
    "start": "0",
    "end": "420000"
  },
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6383"
  },
  {
    "start": "6383",
    "end": "12780"
  },
  {
    "text": "JASON KU: All right. Welcome, everybody. Everyone ready for the quiz? AUDIENCE: No.",
    "start": "12780",
    "end": "18539"
  },
  {
    "text": "JASON KU: Quiz next week. Yes. I hope you all are\nhere because you know that there's a quiz next week.",
    "start": "18540",
    "end": "23790"
  },
  {
    "text": "OK. So what is this quiz about? It's about what\nwe've talked about so far in this class of course.",
    "start": "23790",
    "end": "29430"
  },
  {
    "text": "What is this class about? Someone remember from\nmy first lecture? What is this class about?",
    "start": "29430",
    "end": "35160"
  },
  {
    "text": "What are we trying to\ntest you in this class? AUDIENCE: Algorithims. JASON KU: Algorithms. Great. Also data structures.",
    "start": "35160",
    "end": "40655"
  },
  {
    "text": "Right? That's what the first\npart of this is. But really it's to get you to\nsolve computational problems.",
    "start": "40655",
    "end": "45870"
  },
  {
    "text": "That's the first thing. Be able to argue to someone else\nthat you actually did solve it.",
    "start": "45870",
    "end": "52000"
  },
  {
    "text": "Right? It's correct. Right? That you chose something that's\nbetter than other things, that it's efficient. Right?",
    "start": "52000",
    "end": "57690"
  },
  {
    "text": "And that you can communicate\nthose things to other people. Right? Those are my big four that I try\nto get you guys to internalize.",
    "start": "57690",
    "end": "64890"
  },
  {
    "text": "And so that's what\nour quizzes are going to try to evaluate you on. OK. And so aside from some\nnitty gritty kind of stuff",
    "start": "64890",
    "end": "75570"
  },
  {
    "text": "that we do at the\nbeginning of the term like talking about our\nmodel of computation.",
    "start": "75570",
    "end": "81010"
  },
  {
    "text": "Right? Our model-- and asymptotics.",
    "start": "81010",
    "end": "86620"
  },
  {
    "text": "Asym-- sym-- totics. Is that right?",
    "start": "86620",
    "end": "93900"
  },
  {
    "text": "Recurrences right? Aside from these\nkind of basics, we",
    "start": "93900",
    "end": "99990"
  },
  {
    "text": "delve straight into algorithms. Right? These are kind of like\nalmost definitions.",
    "start": "99990",
    "end": "108060"
  },
  {
    "text": "We don't rely on these\nthings very much. I mean, we rely on these\nthings all the time. But it's kind of the\nmathematics that we",
    "start": "108060",
    "end": "113880"
  },
  {
    "text": "use to talk about things. Right? How can we even say\nhow long this stuff takes unless we can reason-- we can abstract a way\nthat this stuff is not",
    "start": "113880",
    "end": "121260"
  },
  {
    "text": "on a real computer. This is kind of in our\nminds, in a computer. And we're reasoning\nabout these things based",
    "start": "121260",
    "end": "126483"
  },
  {
    "text": "on the number of\nconstant time operations this magical\ncomputer might have,",
    "start": "126483",
    "end": "132237"
  },
  {
    "text": "which is a pretty good\nrepresentation of any of the computers you have\nfor certain assumptions. Right?",
    "start": "132237",
    "end": "137490"
  },
  {
    "text": "We're not-- I mean, there's not\na lot of problem set questions we had you talk about.",
    "start": "137490",
    "end": "143790"
  },
  {
    "text": "These things--\nspecifically-- usually they were part of some other problem.",
    "start": "143790",
    "end": "148829"
  },
  {
    "text": "Right? You had to describe the\nrunning time of this thing. And you might have had\nto solve a recurrence.",
    "start": "148830",
    "end": "154975"
  },
  {
    "text": "And you might have\nuses master theorem. That kind of thing. Right? Or you use asymptotics\nall the time. Or you need to\nremember in our model,",
    "start": "154975",
    "end": "161819"
  },
  {
    "text": "oh, it kind of matters\nhow big of an integer I can store and do arithmetic\non in constant time.",
    "start": "161820",
    "end": "167530"
  },
  {
    "text": "Right? So for that p-set\n3 question you had at the end of the\ncoding question,",
    "start": "167530",
    "end": "174410"
  },
  {
    "text": "you wanted to hash things. And you need to argue\nthat those things fit in a constant number\nof words so that",
    "start": "174410",
    "end": "182070"
  },
  {
    "text": "could be done in constant time. A lot of you guys\nfound canonicalizations basically mapping to things\nthat were exponentially large.",
    "start": "182070",
    "end": "191620"
  },
  {
    "text": "So maybe multiplying a\nproduct of primes or something like that. And that would not be\na good representation.",
    "start": "191620",
    "end": "197560"
  },
  {
    "text": "OK. So these things come up, but\nthey're not the main focus of the problems we solve.",
    "start": "197560",
    "end": "203069"
  },
  {
    "text": "What are the main focus of the-- how do we solve a computational\nproblem in this class? I gave you two ways at\nthe beginning of the term.",
    "start": "203070",
    "end": "210600"
  },
  {
    "text": "Do you guys remember? We can solve-- how to solve a\ncomputational-- computational",
    "start": "210600",
    "end": "225270"
  },
  {
    "text": "problem. ",
    "start": "225270",
    "end": "231548"
  },
  {
    "text": "One's the hard way. One's the easy way. AUDIENCE: Brute force. JASON KU: Brute force. OK. So you're describing\nto me a technique",
    "start": "231548",
    "end": "238910"
  },
  {
    "text": "for making your own algorithm. Right? I can just design my new\nalgorithm from scratch.",
    "start": "238910",
    "end": "245840"
  },
  {
    "text": "One way I could do\nthat is brute force it. Right? Look at all the possible\noutputs and see which one works.",
    "start": "245840",
    "end": "250910"
  },
  {
    "text": "Right? Or I could reduce to something\nlike divide and conquer or something like that. That's generally a\nhard thing to do--",
    "start": "250910",
    "end": "256489"
  },
  {
    "text": "to make your own algorithm. Right? That's why we don't ask you\nto do it a lot in this class. It's an 046 kind of thing.",
    "start": "256490",
    "end": "262580"
  },
  {
    "text": "Right? So the first thing you could do\nis write design a new algorithm",
    "start": "262580",
    "end": "271099"
  },
  {
    "text": "from scratch. Usually it's not from scratch. Right? Usually you're reducing to\nsome kind of algorithmic design",
    "start": "271100",
    "end": "278360"
  },
  {
    "text": "paradigm that you've\nmaybe heard of. You'll talk a lot more about it\nin 046 and at the end of this",
    "start": "278360",
    "end": "284480"
  },
  {
    "text": "term when we talk about\ndynamic programming. But generally, that's\na hard thing to do. Right?",
    "start": "284480",
    "end": "290270"
  },
  {
    "text": "You're trying to think\nof a recursive algorithm. Right? You're trying to prove\nthat it's correct--",
    "start": "290270",
    "end": "295280"
  },
  {
    "text": "all these nitty gritty--\nwe have actually, throughout the\nclass in lectures, have been showing\nyou the algorithms.",
    "start": "295280",
    "end": "302330"
  },
  {
    "text": "But we're not really expecting\nyou to make those algorithms. What are we expecting you\nto do most of the time.",
    "start": "302330",
    "end": "308659"
  },
  {
    "text": "Yeah? To reduce it to a problem that\nwe showed you how to solve. Right? ",
    "start": "308660",
    "end": "319940"
  },
  {
    "text": "I'm going to say\nthing here, but really what I mean is an algorithm\nthat we've taught you to--",
    "start": "319940",
    "end": "325250"
  },
  {
    "text": "basically here-- reduced\nto a known thing-- to known thing.",
    "start": "325250",
    "end": "331940"
  },
  {
    "text": "Usually that means there's\na problem or an interface that we've given you.",
    "start": "331940",
    "end": "338540"
  },
  {
    "text": "And in general, we've shown\nyou multiple different ways to solve that\nproblem or interface.",
    "start": "338540",
    "end": "343770"
  },
  {
    "text": "Right? So we've shown you many\nways on how to sort things. And we've shown you many\nways on how to implement",
    "start": "343770",
    "end": "351050"
  },
  {
    "text": "sequence and set interfaces. Remember? And a lot of times\nthe types of problems",
    "start": "351050",
    "end": "359690"
  },
  {
    "text": "that we're asking you to do\nis to just use as a black box some of the things that we did.",
    "start": "359690",
    "end": "365039"
  },
  {
    "text": "But you need, as a programmer,\nas a computer scientist, you need to tell me when\nI should use what went.",
    "start": "365040",
    "end": "372350"
  },
  {
    "text": "Right? Yeah? AUDIENCE: Could you clarify what\nyou mean by use as a black box? JASON KU: Use as a black box. Exactly.",
    "start": "372350",
    "end": "377470"
  },
  {
    "text": "Right. So this is a phrase that\nI use and a lot of people in computer science use. It's basically you import\na library into your code.",
    "start": "377470",
    "end": "386030"
  },
  {
    "text": "Right? What do I have? I have an API. I have a way to\ninteract with that code.",
    "start": "386030",
    "end": "391520"
  },
  {
    "text": "I don't actually\nknow what's going on inside of that library. I'm using it as a black box.",
    "start": "391520",
    "end": "397669"
  },
  {
    "text": "It's opaque to me. I cannot look inside-- I can actually probably could\nlook inside what their code is,",
    "start": "397670",
    "end": "403550"
  },
  {
    "text": "but I'm not going to. The thing that makes\nit useful to me is that has this\nuseful API that I",
    "start": "403550",
    "end": "409460"
  },
  {
    "text": "trust it to do the\nthings that you told me that it was going to do. Right? And so there's kind of--",
    "start": "409460",
    "end": "416000"
  },
  {
    "text": "I'm going to jump around a\nlittle bit here actually, because that's a great question.",
    "start": "416000",
    "end": "422099"
  },
  {
    "start": "420000",
    "end": "810000"
  },
  {
    "text": "So here I think of there's three\ndifferent types of problems",
    "start": "422100",
    "end": "428330"
  },
  {
    "text": "that we talk about, that\nwe give you in this class. You might have seen\nthis on the problem set.",
    "start": "428330",
    "end": "433790"
  },
  {
    "text": "Right? I like to categorize them into\nthree different categories here.",
    "start": "433790",
    "end": "439229"
  },
  {
    "text": "One is you have to understand\nthe internals of a data",
    "start": "439230",
    "end": "444380"
  },
  {
    "text": "structure, an\nalgorithm that we know. You have to be able to look\ninside and, I don't know,",
    "start": "444380",
    "end": "449810"
  },
  {
    "text": "given a node in a balanced\nbinary search tree-- an AVL tree-- how can I do a rotation?",
    "start": "449810",
    "end": "455870"
  },
  {
    "text": "Right? Or how do I do an insert? Or something about the\nstructure of this thing--",
    "start": "455870",
    "end": "463370"
  },
  {
    "text": "a binary heap--\nwhere are the top k things in a max binary heap,\nwhich is on your problem set.",
    "start": "463370",
    "end": "469700"
  },
  {
    "text": "Those things require me to very\nmuch not black box these data",
    "start": "469700",
    "end": "474830"
  },
  {
    "text": "structures. It's a white box. Right? I need to know what's inside of\nthat to answer that question.",
    "start": "474830",
    "end": "479940"
  },
  {
    "text": "Right? I need to know about the\ninternals of that data structure. Right? And there are other types of\nproblems where it's like, oh,",
    "start": "479940",
    "end": "486462"
  },
  {
    "text": "I don't need to know what\nthe internals of this data structure is. I can just operate with\nknowledge of the API",
    "start": "486463",
    "end": "494450"
  },
  {
    "text": "and try to hook it in to\nthe problem that I need. And that's what I call a\nreduction type problem.",
    "start": "494450",
    "end": "500020"
  },
  {
    "text": "This is how does the core\nmaterial we presented to you in lecture work?",
    "start": "500020",
    "end": "505280"
  },
  {
    "text": "This is how do I apply\nthat core material? And harder than\nboth of those things",
    "start": "505280",
    "end": "511939"
  },
  {
    "text": "is what I might call a\nmodification type of-- these aren't really good names. I came up with\nthese this morning.",
    "start": "511940",
    "end": "518099"
  },
  {
    "text": "But it's trying\nto get at the idea here that it's possible that you\nneed to know what the API is,",
    "start": "518100",
    "end": "524400"
  },
  {
    "text": "and you need to know what's\ngoing on inside to be able to answer the problem. Things like adapting a\ndivide and conquer algorithm.",
    "start": "524400",
    "end": "531660"
  },
  {
    "text": "Or making-- instead of\nusing a dynamic array that",
    "start": "531660",
    "end": "536970"
  },
  {
    "text": "has extra space on\none end, maybe I have to put extra space in the\nmiddle or something like that. Right?",
    "start": "536970",
    "end": "542060"
  },
  {
    "text": "I'm adapting something that\nwas from the core material. It's pretty close. But I have to modify\nit in some way.",
    "start": "542060",
    "end": "547350"
  },
  {
    "text": "Augmentation right? I have to take the vanilla\nsaid AVL tree that I might",
    "start": "547350",
    "end": "552570"
  },
  {
    "text": "have given you and put some\nother property on the nodes and you need to tell me\nhow to maintain that.",
    "start": "552570",
    "end": "558870"
  },
  {
    "text": "How can I compute that subtree\nproperty from its children? Does that make sense? So this is the\nharder of the things.",
    "start": "558870",
    "end": "566490"
  },
  {
    "text": "Right? If you can identify\nwhich one of these-- a problem that you\nlook at on an exam--",
    "start": "566490",
    "end": "571750"
  },
  {
    "text": "[INAUDIBLE] under--\nmaybe that can help you conceptualize what should I use.",
    "start": "571750",
    "end": "576930"
  },
  {
    "text": "For a reduction type problem-- I'm going to talk about\nthis in a second-- but a lot of times it's\nuseful to reduce it",
    "start": "576930",
    "end": "583950"
  },
  {
    "text": "to a problem or an interface\nrather than an algorithm",
    "start": "583950",
    "end": "590910"
  },
  {
    "text": "or a data structure. What does that mean?",
    "start": "590910",
    "end": "596070"
  },
  {
    "text": "If I can solve the problem by\nsaying reducing to sorting,",
    "start": "596070",
    "end": "601620"
  },
  {
    "text": "I can argue to you that\nthat algorithm is correct. I just use sorting\nas a black box. Now it might not be efficient.",
    "start": "601620",
    "end": "607560"
  },
  {
    "text": "My choice of sorting\nalgorithm that I chose matters for efficiency. But for correctness,\nit doesn't matter.",
    "start": "607560",
    "end": "614130"
  },
  {
    "text": "Right? For a data structures\nproblem I might reduce to using two set\ndata structures and sequence",
    "start": "614130",
    "end": "622410"
  },
  {
    "text": "data structure or\nsomething like that. But it will be correct if I\nreduce it to those things.",
    "start": "622410",
    "end": "630930"
  },
  {
    "text": "I can define the operations\nin terms of those interfaces.",
    "start": "630930",
    "end": "636300"
  },
  {
    "text": "I don't have to make\nthat choice until I talk about running time. Right? Until I talk about efficiency. And the name of the game\non the quiz to get points--",
    "start": "636300",
    "end": "644820"
  },
  {
    "text": "we can't give you points\nfor an incorrect algorithm or something that's\npretty close to correct.",
    "start": "644820",
    "end": "650340"
  },
  {
    "text": "Right? And we can't give\nyou full points unless the correct algorithm\nyou give us is efficient",
    "start": "650340",
    "end": "657839"
  },
  {
    "text": "and that you've argued things\nlike correctness and running time and things like that. Your algorithm could be\ncorrect and efficient,",
    "start": "657840",
    "end": "667260"
  },
  {
    "text": "but you analyzed the\nrunning time incorrectly so we mark you\npoints off for there. Or most of the time what\nyou do is you present us",
    "start": "667260",
    "end": "675450"
  },
  {
    "text": "with an inefficient algorithm. And then you analyze\nthe running time as if it's the target running\ntime that we gave you.",
    "start": "675450",
    "end": "682050"
  },
  {
    "text": "Right? That's bad on two fronts. Right? OK. So try not to fall\ninto these traps.",
    "start": "682050",
    "end": "687220"
  },
  {
    "text": "OK. So some general test\ntaking strategies when you're looking at your quiz. I really strongly urge you to\nread through the entire exam",
    "start": "687220",
    "end": "695250"
  },
  {
    "text": "before you start because\nsome of the problems will be easier for\nyou than others.",
    "start": "695250",
    "end": "700780"
  },
  {
    "text": "And if you're trying\nto maximize points on here as all of you, I'm\nsure, are trying to do,",
    "start": "700780",
    "end": "709050"
  },
  {
    "text": "it's useful to make that initial\npass through the problems to see which ones\nare easiest for you.",
    "start": "709050",
    "end": "715529"
  },
  {
    "text": "And then you can tackle\nthem in the order in which you have confidence. Now in actuality, the average\non say quiz one of this class",
    "start": "715530",
    "end": "725370"
  },
  {
    "text": "tends to be around, I don't\nknow, between 60 and 80. I don't think it's ever been 80.",
    "start": "725370",
    "end": "731970"
  },
  {
    "text": "But it's not 100. So doing 50% of the\nproblems well is probably",
    "start": "731970",
    "end": "741690"
  },
  {
    "text": "going to be better for you\nin terms of time management and those kinds of things\nthan doing all of the--",
    "start": "741690",
    "end": "748290"
  },
  {
    "text": "attempting all of\nthe problems and not doing great on any of\nthem in terms of point--",
    "start": "748290",
    "end": "753840"
  },
  {
    "text": "you have to, in\ncomputer science, you have to be pretty close to\na correct answer to get points.",
    "start": "753840",
    "end": "759690"
  },
  {
    "text": "Right? It basically needs to be almost\ncorrect or you don't get-- if you've seen how\nyour problem sets are",
    "start": "759690",
    "end": "766590"
  },
  {
    "text": "being graded-- sometimes\nour problem set graders make mistakes. Sometimes they give you points\nfor an incorrect solution.",
    "start": "766590",
    "end": "776110"
  },
  {
    "text": "Right? It's really on you to take\na look at your problem sets that you gave us and our\nsolutions that we gave you.",
    "start": "776110",
    "end": "782370"
  },
  {
    "text": "We spent a lot of time writing\ngood solutions for you guys. You need to make sure\nthat the material.",
    "start": "782370",
    "end": "789460"
  },
  {
    "text": "Don't come up to us\nat the end of an exam and say, oh, I said the same\nthing on my problem set.",
    "start": "789460",
    "end": "796440"
  },
  {
    "text": "It was marked correct and\nyou guys marked it wrong. Well, yeah. The staff knows\na little bit more",
    "start": "796440",
    "end": "801779"
  },
  {
    "text": "about algorithms than your\ngraders on your problem sets. And we grade your exams.",
    "start": "801780",
    "end": "806950"
  },
  {
    "text": "So unfortunately,\nthat's not an excuse. It's on you to\nknow the material. Yep? AUDIENCE: So are\nmost of the problems",
    "start": "806950",
    "end": "813779"
  },
  {
    "start": "810000",
    "end": "1015000"
  },
  {
    "text": "on the exams multiple\npart things where we need to have a\ngood understanding and do the first\nfew parts in order",
    "start": "813780",
    "end": "819553"
  },
  {
    "text": "to get even partial\ncredit on the other parts? Or is it like [INAUDIBLE]? JASON KU: Yeah. So the question\nis, are questions",
    "start": "819553",
    "end": "828400"
  },
  {
    "text": "built on top of each other so\nthat you're kind of at a wall if you missed the first part?",
    "start": "828400",
    "end": "834670"
  },
  {
    "text": "We try not to design\nexams that way. OK. You can actually take a\nlook at the practice exam",
    "start": "834670",
    "end": "839770"
  },
  {
    "text": "that's already been posted. Our problems tend to\nbe self-contained.",
    "start": "839770",
    "end": "844900"
  },
  {
    "text": "And if they are multiple\nparts, the parts are usually independent.",
    "start": "844900",
    "end": "850300"
  },
  {
    "text": "Usually you don't need to\nhave done A correctly in order to do B correctly. All right?",
    "start": "850300",
    "end": "856090"
  },
  {
    "text": "And that's how our problem\nsets try to be written as well. For your last coding\nquestion and 4",
    "start": "856090",
    "end": "863162"
  },
  {
    "text": "you had this problem\nwhere you had to design this data structure. But C said use\nthat as a black box",
    "start": "863163",
    "end": "869410"
  },
  {
    "text": "essentially and\nsolve the problem. Right? So you actually\ndon't need to show-- we've given you this interface.",
    "start": "869410",
    "end": "876970"
  },
  {
    "text": "You can just use\nthat interface to be able to answer C, the\nalgorithms question,",
    "start": "876970",
    "end": "882550"
  },
  {
    "text": "without even solving the data\nstructures question correctly. Does that make sense? And actually, the\nalgorithms question",
    "start": "882550",
    "end": "889180"
  },
  {
    "text": "was the easier one there, I\nthink, from what I remember. Yeah? AUDIENCE: Do we have to\nwrite code on the exam?",
    "start": "889180",
    "end": "894460"
  },
  {
    "text": "JASON KU: Do you have to\nwrite code on the exam?  I've never given an exam where\nyou've had to write code.",
    "start": "894460",
    "end": "904360"
  },
  {
    "text": "I have written exams where\nyou have to read code. OK? So pseudocode or Python--",
    "start": "904360",
    "end": "911410"
  },
  {
    "text": "since Python's a\nprerequisite for this class, it's completely fair\ngame that we give you small snippets of\nPython code and you",
    "start": "911410",
    "end": "916930"
  },
  {
    "text": "have to be able to\nunderstand what's going on. Yeah?",
    "start": "916930",
    "end": "922870"
  },
  {
    "text": "AUDIENCE: You\nlisted amortization under the modification\n[INAUDIBLE].. Does that mean we're using\nan amortized [INAUDIBLE]??",
    "start": "922870",
    "end": "931305"
  },
  {
    "text": "JASON KU: Yeah. What I mean here-- amortization certainly\nappears in here or here--",
    "start": "931305",
    "end": "937720"
  },
  {
    "text": "these kinds of things. Oftentimes if I'm\nusing a dynamic array, if I'm using a binary heap,\nif I'm using a hash table,",
    "start": "937720",
    "end": "944440"
  },
  {
    "text": "amortization will appear\nhere in our running times for those dynamic operations. What I mean here\nin amortization--",
    "start": "944440",
    "end": "951040"
  },
  {
    "text": "I mean if I'm asking you\nto generalize something that we've done like with\ndynamic arrays where instead",
    "start": "951040",
    "end": "957940"
  },
  {
    "text": "of adding additional\nspace at the end, I'm putting additional\nspace in the middle or at the beginning or\nsomething like that.",
    "start": "957940",
    "end": "964580"
  },
  {
    "text": "And you're having to do some\nkind of amortized analysis. Now, often it's\nunnecessary to do this in--",
    "start": "964580",
    "end": "973940"
  },
  {
    "text": "when we talked about\na problem where we did do our own\namoritized analysis",
    "start": "973940",
    "end": "979990"
  },
  {
    "text": "and making a double ended deck-- I mean a double ended queue-- you could actually\nsolve it by reducing",
    "start": "979990",
    "end": "986830"
  },
  {
    "text": "to using two dynamic arrays. Right?",
    "start": "986830",
    "end": "992020"
  },
  {
    "text": "So there's a lot of\nways in which you",
    "start": "992020",
    "end": "997540"
  },
  {
    "text": "could reduce to using things. But you might have to do\nsome additional bookkeeping at the end. But what this is saying\nis that these are more--",
    "start": "997540",
    "end": "1006750"
  },
  {
    "text": "you're not using\nthings as a black box. You're changing something about\nthe boxes that we gave you. Right?",
    "start": "1006750",
    "end": "1012150"
  },
  {
    "text": "Does that make sense. Yeah? AUDIENCE: If you tell us to\nwrite an algorithm that does something like O(log n)\ntime, and we can think only",
    "start": "1012150",
    "end": "1020610"
  },
  {
    "start": "1015000",
    "end": "1310000"
  },
  {
    "text": "of an algorithm that does\nsomething inefficiently like O(n) at end time. JASON KU: OK. AUDIENCE: Then is there\nany point writing that?",
    "start": "1020610",
    "end": "1026470"
  },
  {
    "text": "JASON KU: Sure. So let's actually\nmove on for a second.",
    "start": "1026470",
    "end": "1031589"
  },
  {
    "text": "I actually-- I'm going to\nanswer your question very soon.",
    "start": "1031589",
    "end": "1039429"
  },
  {
    "text": "OK. But I'm going to get\nto it in a second. OK? If I don't answer that question\nin five minutes, please let me",
    "start": "1039430",
    "end": "1046959"
  },
  {
    "text": "know. OK? So the first thing,\nwhen I'm approaching a problem on the\nexam, I might try",
    "start": "1046960",
    "end": "1053260"
  },
  {
    "text": "to ask some questions\nabout the problem. OK. It's going to help me\ndecide what to use.",
    "start": "1053260",
    "end": "1058360"
  },
  {
    "text": "Right? Different than\nyour problems sets. Your problem sets--\nbasically, what",
    "start": "1058360",
    "end": "1063610"
  },
  {
    "text": "do you use is what did we talk\nabout in lecture that week. On a quiz you have\neight lectures",
    "start": "1063610",
    "end": "1069280"
  },
  {
    "text": "that you've talked about. And so this is going\nto be a harder thing for you to do because you don't\nknow which of the eight lecture",
    "start": "1069280",
    "end": "1076029"
  },
  {
    "text": "material is going to\napply to this problem. And it could be a\ncombination of them actually. And so I'm trying to give\nyou ways of answering",
    "start": "1076030",
    "end": "1083260"
  },
  {
    "text": "that question faster. OK? So is this a\nmechanical reduction or a modification type problem?",
    "start": "1083260",
    "end": "1088870"
  },
  {
    "text": "That's just going to help\nme determine the difficulty level of what this is. You might not be\nable to answer it.",
    "start": "1088870",
    "end": "1094240"
  },
  {
    "text": "But it can give you a sense\nfor what kind of problem it is. Is this a problem about data\nstructures sorting both?",
    "start": "1094240",
    "end": "1100840"
  },
  {
    "text": "Right? If it's about data\nstructures, do I need to support\nsequence type operations",
    "start": "1100840",
    "end": "1106780"
  },
  {
    "text": "or do I need to store an\nextrinsic order on something? Or is it a thing where I care\nabout what the objects are?",
    "start": "1106780",
    "end": "1114970"
  },
  {
    "text": "I'm trying to look things\nup by what they are. Or maybe both? Or maybe some combination?",
    "start": "1114970",
    "end": "1120580"
  },
  {
    "text": "If I have a bunch of\ndifferent types of keys that I might want\na query on, I might have to use at least two\nset type of data structures.",
    "start": "1120580",
    "end": "1128080"
  },
  {
    "text": "Right? You could get very\ncomplicated with these things. But putting it in\nterms of well, I'm going to need to do this kind\nof operation on these names.",
    "start": "1128080",
    "end": "1139150"
  },
  {
    "text": "Then I can think, oh, I need\na set data structure there. I'll think about how to\nimplement that later. Should I use a hash table?",
    "start": "1139150",
    "end": "1144490"
  },
  {
    "text": "Should I use a sorted array? Should I use a AVL tree? But thinking about it first\nat the abstract level of I",
    "start": "1144490",
    "end": "1151780"
  },
  {
    "text": "need a set data structure here\ncan help you compartmentalize correctness versus efficiency.",
    "start": "1151780",
    "end": "1157149"
  },
  {
    "text": "Does that make sense? OK. If you're stuck, this\nis your question.",
    "start": "1157150",
    "end": "1163480"
  },
  {
    "text": "If you're stuck, write\ndown a correct algorithm that's inefficient.",
    "start": "1163480",
    "end": "1169539"
  },
  {
    "text": "We can give you points for\na correct algorithm that's inefficient. At least it's a\ncorrect algorithm. That's better than other things.",
    "start": "1169540",
    "end": "1175510"
  },
  {
    "text": "Right? Now, if it's\nexponential time, you",
    "start": "1175510",
    "end": "1181150"
  },
  {
    "text": "might be limited to 10%\nor 20% of the points. But if it's a log factor--",
    "start": "1181150",
    "end": "1187299"
  },
  {
    "text": "worse, or linear factor-- worse. Maybe that's OK. On a data structures problem,\nif any operation takes order n",
    "start": "1187300",
    "end": "1196269"
  },
  {
    "text": "time, that's probably not going\nto give you a lot of points because the whole point\nof the data structure",
    "start": "1196270",
    "end": "1201280"
  },
  {
    "text": "is to make those\noperations fast. But if it solves the problem,\nyou'll get some points.",
    "start": "1201280",
    "end": "1208570"
  },
  {
    "text": "You won't get 0 points. Yeah? AUDIENCE: Will we\nget any questions that are like how fast\ncan you make this?",
    "start": "1208570",
    "end": "1214250"
  },
  {
    "text": "Make this as fast as possible. JASON KU: Yeah. So a lot of times we'll say,\ngive us an efficient algorithm.",
    "start": "1214250",
    "end": "1219590"
  },
  {
    "text": "OK. It's like, whoa, I don't know\nif it's efficient or not. Well, that just means that\nfaster running times are",
    "start": "1219590",
    "end": "1225169"
  },
  {
    "text": "going to give you more points. OK? So in questions like\nthat, it's mostly",
    "start": "1225170",
    "end": "1231580"
  },
  {
    "text": "trying to play this game of-- usually, we'll put an efficient\none in not in terms of a data",
    "start": "1231580",
    "end": "1237850"
  },
  {
    "text": "structure because usually,\nthe data structures problem-- it's important in\nyour implementation",
    "start": "1237850",
    "end": "1244270"
  },
  {
    "text": "that these data structure\noperations be fast. And we want to tell\nyou how fast is.",
    "start": "1244270",
    "end": "1250090"
  },
  {
    "text": "Right? So data structures questions\nin general, there's",
    "start": "1250090",
    "end": "1257200"
  },
  {
    "text": "usually a trade-off\nbetween running times of these different operations. And it's really important how\nthey relate to each other.",
    "start": "1257200",
    "end": "1264170"
  },
  {
    "text": "And so for data\nstructures problem, it's kind of about getting\nthose running times. OK?",
    "start": "1264170",
    "end": "1269290"
  },
  {
    "text": "With an algorithms problem\nwhere we ask you to do one thing and we try to do it\nas fast as possible,",
    "start": "1269290",
    "end": "1275590"
  },
  {
    "text": "try to get linear time. Right? Most of the time you can't\nget better than linear time if you have to read the\nentire input at some point",
    "start": "1275590",
    "end": "1283659"
  },
  {
    "text": "if I want to find the\nthings in my data. And if you can't think of\na linear time algorithm,",
    "start": "1283660",
    "end": "1288880"
  },
  {
    "text": "think of an n squared thing\nor think of n log n thing. Right? Maybe that's a little hard for\nyou guys to think of right now.",
    "start": "1288880",
    "end": "1296950"
  },
  {
    "text": "But that's why I'm saying start\nwith any correct algorithm and then maybe you can optimize.",
    "start": "1296950",
    "end": "1302320"
  },
  {
    "text": "Maybe you can use a\nbetter data structure to make it more efficient. Does that make sense? Any other questions?",
    "start": "1302320",
    "end": "1308900"
  },
  {
    "text": "OK. Moving right along. OK. Here's some downsides.",
    "start": "1308900",
    "end": "1315490"
  },
  {
    "start": "1310000",
    "end": "1530000"
  },
  {
    "text": "OK. If you find yourself doing one\nof these things three things, take a step back.",
    "start": "1315490",
    "end": "1321257"
  },
  {
    "text": "You're probably doing\nsomething wrong. OK? So question yourself if you're\ntrying to compute decimals,",
    "start": "1321257",
    "end": "1328059"
  },
  {
    "text": "rationals, or real numbers. I can't store\nthose things on a-- I mean, I can store decimals\nto finite precision.",
    "start": "1328060",
    "end": "1335060"
  },
  {
    "text": "But if you're doing\nfinite precision, you might as well multiply your\nnumbers by that fixed precision",
    "start": "1335060",
    "end": "1341255"
  },
  {
    "text": "and deal with the integers. Right? We only have taught\nyou how to deal with the integers in this class. Right?",
    "start": "1341255",
    "end": "1346490"
  },
  {
    "text": "We haven't even shown you\nhow to efficiently compute on rationals and real numbers.",
    "start": "1346490",
    "end": "1352440"
  },
  {
    "text": "We have told you if you have\na denominator and a numerator of a fraction, I can\ntake two fractions",
    "start": "1352440",
    "end": "1359150"
  },
  {
    "text": "and compare them\nright in constant time by doing cross multiplication. But if I'm trying to actually\ndo this division to arbitrary",
    "start": "1359150",
    "end": "1369770"
  },
  {
    "text": "precision, that's not\nhappy because I can't even represent that on my\ncomputer in a finite number",
    "start": "1369770",
    "end": "1376550"
  },
  {
    "text": "of decimal points for\nsome of these things. ",
    "start": "1376550",
    "end": "1382669"
  },
  {
    "text": "If you're trying to use\nRadix sort for every answer, it's probably wrong. One of the things that we\ntry to do on our quizzes--",
    "start": "1382670",
    "end": "1391700"
  },
  {
    "text": "we're not just giving you a\nbunch of problems randomly. We probably are\nmaking problems that",
    "start": "1391700",
    "end": "1397010"
  },
  {
    "text": "cover the material in some way. We do want to test you\non all of the things.",
    "start": "1397010",
    "end": "1402350"
  },
  {
    "text": "And so if you find that\nyou're using the same thing four or five times\non the exam, that",
    "start": "1402350",
    "end": "1409640"
  },
  {
    "text": "might be a sign that you're\nusing it too many times. It's not always the case. Right?",
    "start": "1409640",
    "end": "1414842"
  },
  {
    "text": "Sometimes hashing\nis super useful, so you want to use\nit all the time. But in particular,\neveryone tries",
    "start": "1414842",
    "end": "1421940"
  },
  {
    "text": "to use Radix sort when\nit's inappropriate. And they love because\nit gets linear time.",
    "start": "1421940",
    "end": "1428299"
  },
  {
    "text": "Right? But if you write merge sort for\nsomething where Radix sort will",
    "start": "1428300",
    "end": "1435080"
  },
  {
    "text": "apply, you'll get some points\nbecause it's correct but not efficient.",
    "start": "1435080",
    "end": "1441080"
  },
  {
    "text": "And it's inefficient\nby a log factor. Right? If you're trying to use\nRadix sort in a situation",
    "start": "1441080",
    "end": "1448790"
  },
  {
    "text": "where comparisons are the\nanswer and you don't have a bound on the integers,\nif I don't have a bound on the size\nof the integers,",
    "start": "1448790",
    "end": "1455330"
  },
  {
    "text": "then this may be taking\na huge amount of time. So I might not\neven think of that",
    "start": "1455330",
    "end": "1461870"
  },
  {
    "text": "as being correct because it\ncould be exponential time. I mean, I don't know.",
    "start": "1461870",
    "end": "1466970"
  },
  {
    "text": "I don't know how\nbig my word size is. It could be arbitrarily bad. OK.",
    "start": "1466970",
    "end": "1472340"
  },
  {
    "text": "And then if you're\ntrying to augment a binary tree with something\nthat's not a subtree property--",
    "start": "1472340",
    "end": "1477470"
  },
  {
    "text": "something that can't be\ncomputed from the augmentations of its two children-- you're doing something bad.",
    "start": "1477470",
    "end": "1483049"
  },
  {
    "text": "Every exam we have\n30% of students",
    "start": "1483050",
    "end": "1488240"
  },
  {
    "text": "say augment by my index in the\nentire tree or augment by--",
    "start": "1488240",
    "end": "1498410"
  },
  {
    "text": "here's one that's fun-- augment by the size\nof my left subtree-- ",
    "start": "1498410",
    "end": "1507090"
  },
  {
    "text": "the number of nodes\nin my left subtree. How can I-- ",
    "start": "1507090",
    "end": "1514010"
  },
  {
    "text": "I'm not sure how I can maintain\nthat with rotations and things like that.",
    "start": "1514010",
    "end": "1520420"
  },
  {
    "text": "Let's see. In order for me to keep\ntrack of the augmentation of my left tree from the\naugmentation of my left tree,",
    "start": "1520420",
    "end": "1530430"
  },
  {
    "start": "1530000",
    "end": "1690000"
  },
  {
    "text": "I have to do a logarithmic\nwalk all the way down the thing to figure out how many\nthings were there. So that's not a maintainable\nthing in constant time.",
    "start": "1530430",
    "end": "1537540"
  },
  {
    "text": "If I want to augment\nsomething of my left subtree, just augment the thing\nitself and just look",
    "start": "1537540",
    "end": "1542910"
  },
  {
    "text": "at your left subtree and\nlook at its augmentation. Does that make sense? Yeah? AUDIENCE: If you had say,\naugmented it with a subtree",
    "start": "1542910",
    "end": "1549460"
  },
  {
    "text": "and then augmented it again with\n[INAUDIBLE] subtree and then use that-- JASON KU: You could do that. AUDIENCE: --does\nthat still count as-- JASON KU: You could do that.",
    "start": "1549460",
    "end": "1554670"
  },
  {
    "text": "Yeah. So you could do that\nin constant time by augmenting by subtree size. Right? AUDIENCE: And then have another\naugmentation in [INAUDIBLE]..",
    "start": "1554670",
    "end": "1561360"
  },
  {
    "text": "JASON KU: You could have another\naugmentation because then you could just look at-- but then\njust look at your left subtree",
    "start": "1561360",
    "end": "1566580"
  },
  {
    "text": "please. Yeah. No reason to store it again. Right? You just do one constant time--",
    "start": "1566580",
    "end": "1572070"
  },
  {
    "text": "look to your left. OK. Don't do that. OK. So that is-- cool.",
    "start": "1572070",
    "end": "1579309"
  },
  {
    "text": "I'm not that far behind. Those are my tips on\nsolving questions.",
    "start": "1579310",
    "end": "1585540"
  },
  {
    "text": "Oh, there's one more page. Yeah? AUDIENCE: So when\ndefining an augmentation, [INAUDIBLE] do the formula and\nargue that it's [INAUDIBLE]..",
    "start": "1585540",
    "end": "1592470"
  },
  {
    "text": "JASON KU: Exactly. Right. So the idea is if you give an\naugmentation that's not a--",
    "start": "1592470",
    "end": "1601320"
  },
  {
    "text": "we're going to talk\nabout our standard things you can reduce to in a second. If you're saying, I'm\ngoing to take a set AVL",
    "start": "1601320",
    "end": "1609390"
  },
  {
    "text": "tree or a sequence AVL tree-- and for example, at\nthe end of lecture,",
    "start": "1609390",
    "end": "1615130"
  },
  {
    "text": "we were talking about how\na sequence AVL tree could be modified to\nsupport priority queue",
    "start": "1615130",
    "end": "1622260"
  },
  {
    "text": "operations in the same\nrunning times as binary heaps. Right? And that was saying we\nstore our subtree maxes--",
    "start": "1622260",
    "end": "1630149"
  },
  {
    "text": "the max thing in my subtree. Right? And so that's a\ndifferent augmentation",
    "start": "1630150",
    "end": "1636660"
  },
  {
    "text": "than what's already augmented\non the sequence AVL tree. What are the augmentations\non a sequence AVL tree?",
    "start": "1636660",
    "end": "1645399"
  },
  {
    "text": "AUDIENCE: Size. JASON KU: Size. AUDIENCE: Count. JASON KU: So counts is the\nsame thing as how many nodes",
    "start": "1645400",
    "end": "1651330"
  },
  {
    "text": "are in my subtree. And? AUDIENCE: Height. JASON KU: Height. Right because it's an AVL tree. Right?",
    "start": "1651330",
    "end": "1656730"
  },
  {
    "text": "So if I'm augmenting\nby max in my subtree, that's not part of my\nstandard interface.",
    "start": "1656730",
    "end": "1663210"
  },
  {
    "text": "So you need to tell me that. Even though we've\ndone it before, it should be very easy for you. Just say, I'm\naugmenting by my max.",
    "start": "1663210",
    "end": "1669929"
  },
  {
    "text": "Max can be computed\nas the max between me and my left and right\nsubtree if they exist.",
    "start": "1669930",
    "end": "1675300"
  },
  {
    "text": "Done. Right? But just do that. You have to tell me-- and it takes\nconstant time, so it",
    "start": "1675300",
    "end": "1681270"
  },
  {
    "text": "can be maintained at constant\ntime when I'm doing my stuff. Does that makes sense?",
    "start": "1681270",
    "end": "1687840"
  },
  {
    "text": "OK. So the last thing,\nI guess especially on the data\nstructures problems, I",
    "start": "1687840",
    "end": "1694380"
  },
  {
    "text": "would suggest that you\napproach these things by solving these problems just\nin terms of the interfaces",
    "start": "1694380",
    "end": "1703000"
  },
  {
    "text": "first. Because then at least you\nget something that's correct. And then choose the\nalgorithms or data structures",
    "start": "1703000",
    "end": "1711210"
  },
  {
    "text": "that you use to implement\nthose interfaces afterwards. One gets you to a\ncorrect algorithm.",
    "start": "1711210",
    "end": "1717280"
  },
  {
    "text": "The other is for efficiency. Decoupling these might help\nyou in solving the problem. If it doesn't help you, don't.",
    "start": "1717280",
    "end": "1725289"
  },
  {
    "text": "If you're like, whenever I\nsee a set data structure, I'm going to probably use a hash\ntable, that's probably fine.",
    "start": "1725290",
    "end": "1733710"
  },
  {
    "text": "But if we're looking for\nworst case time bounds, that's probably not fun. So you just--",
    "start": "1733710",
    "end": "1738990"
  },
  {
    "text": " I'm suggesting that you separate\nthese things so that you",
    "start": "1738990",
    "end": "1747299"
  },
  {
    "text": "concentrate on solving\nthe problem first and then optimize it later. Yeah? AUDIENCE: Just a question\nin regards to worst case",
    "start": "1747300",
    "end": "1752510"
  },
  {
    "text": "time bounds. JASON KU: Mm-hmm. AUDIENCE: So for a hash table. JASON KU: Mm-hmm. AUDIENCE: Given that's\na code one expected. JASON KU: Mm-hmm.",
    "start": "1752510",
    "end": "1757919"
  },
  {
    "text": "AUDIENCE: That also implies\nthat's O of n worst case. So could you --technically JASON KU: It doesn't imply that. It is that.",
    "start": "1757920",
    "end": "1764159"
  },
  {
    "text": "So, I mean, you could have\na data structure whose expected time bound is constant,\nbut it's a worst case bound",
    "start": "1764160",
    "end": "1770130"
  },
  {
    "text": "is n log n. It just happens to be the\nfact that for a hash table, those worst case\noperations are linear.",
    "start": "1770130",
    "end": "1777990"
  },
  {
    "text": "But if I --had we had a\nquestion up here beforehand, if I had a running time\nbound that I did something",
    "start": "1777990",
    "end": "1785190"
  },
  {
    "text": "to a hash table in constant\nexpected time, I did a look up,",
    "start": "1785190",
    "end": "1791039"
  },
  {
    "text": "and then I queried an a AVL tree\nfor the predecessor of a node or something like\nthat, and I did",
    "start": "1791040",
    "end": "1798030"
  },
  {
    "text": "that in O of log n time,\nwhat's the worst case running",
    "start": "1798030",
    "end": "1803850"
  },
  {
    "text": "time of that? AUDIENCE: O of n. JASON KU: O of n. What's the expected\nrunning time of this thing?",
    "start": "1803850",
    "end": "1809976"
  },
  {
    "text": "AUDIENCE: Log n. JASON KU: Log n. Expected log n. Because it's possible\nthat in the worst case",
    "start": "1809977",
    "end": "1815920"
  },
  {
    "text": "it could be higher. Does that makes sense? OK. ",
    "start": "1815920",
    "end": "1823960"
  },
  {
    "text": "--so OK. The second bullet is just\nsetting up a data structures",
    "start": "1823960",
    "end": "1829030"
  },
  {
    "text": "problem. There's a lot of moving parts. We're going to do two\ndata structures problem at the end of this session.",
    "start": "1829030",
    "end": "1835810"
  },
  {
    "text": "Describe all of the data\nstructures you're using,",
    "start": "1835810",
    "end": "1841120"
  },
  {
    "text": "including what they store. If you're storing a\nset data structure, you better tell me what\nthe things you're stored",
    "start": "1841120",
    "end": "1847150"
  },
  {
    "text": "are keyed on. Usually the things\nthat we're storing contain a bunch of\ninformation, and if you just",
    "start": "1847150",
    "end": "1853450"
  },
  {
    "text": "say I'm storing all of\nthe toppings of my pizza in the set data structure,\nand that's all you tell me,",
    "start": "1853450",
    "end": "1861323"
  },
  {
    "text": "I have no idea what\nyou're talking about because I don't know what\nthe semantics of your data structure are. What is it keyed on?",
    "start": "1861323",
    "end": "1866830"
  },
  {
    "text": "I have to say,\noh, it's keyed on, I don't know the y's\nor something like that.",
    "start": "1866830",
    "end": "1874140"
  },
  {
    "text": "OK. And there are invariants. How we're setting up these\ndata structures problem, usually how I solve these when\nI'm writing the solutions,",
    "start": "1874140",
    "end": "1882880"
  },
  {
    "text": "I set up a state of what\nthis data structure could",
    "start": "1882880",
    "end": "1888250"
  },
  {
    "text": "be at some instance. I'm going to say,\nthis data structure stores all of the\nthings less than --k",
    "start": "1888250",
    "end": "1895090"
  },
  {
    "text": "with key less than\nk, blah, blah, blah. And this one stores\nthe extrinsic order",
    "start": "1895090",
    "end": "1901600"
  },
  {
    "text": "of the items based\non blah, blah, blah. OK. So actually, me stating\nwhat they store in that way",
    "start": "1901600",
    "end": "1910450"
  },
  {
    "text": "is actually imposing some kind\nof invariant on these data structures that I'm\nwanting to maintain.",
    "start": "1910450",
    "end": "1916480"
  },
  {
    "text": "But what I need to do to prove\nthat this thing is correct is that based on the assumption\nthat those invariants held",
    "start": "1916480",
    "end": "1924280"
  },
  {
    "text": "before my operation. Then I can prove that\nan operation is correct",
    "start": "1924280",
    "end": "1929919"
  },
  {
    "text": "if all of those invariants\nare maintained before, then",
    "start": "1929920",
    "end": "1935620"
  },
  {
    "text": "after the operation. That's kind of how I'm proving\nthat this thing is correct. And then when I'm querying,\nI'm doing some kind of lookup",
    "start": "1935620",
    "end": "1942100"
  },
  {
    "text": "on this data structure, I\ncan rely on those invariants. I know that those\nthings are good,",
    "start": "1942100",
    "end": "1947460"
  },
  {
    "text": "those things have\nbeen maintained, and so I can rely on\nthose to look up what's the largest k of this thing.",
    "start": "1947460",
    "end": "1954250"
  },
  {
    "text": "Does that make sense? If this is very\nabstract, we're going to get a little bit more\nconcrete in just a second.",
    "start": "1954250",
    "end": "1960649"
  },
  {
    "text": "And then implement\nevery operation. You have no idea\nhow many solutions",
    "start": "1960650",
    "end": "1965950"
  },
  {
    "text": "we read on the quizzes,\nwhich we give you three operations to implement\nand you don't even mention one.",
    "start": "1965950",
    "end": "1975399"
  },
  {
    "text": "And it's usually\nthe easiest one. It's like inserted into\nyour data structure. It's like, come\non, just say that.",
    "start": "1975400",
    "end": "1982330"
  },
  {
    "text": "We can't give you points unless\nyou mention that operation. Does that make sense?",
    "start": "1982330",
    "end": "1987480"
  },
  {
    "text": "And then it's going\nto help --us happy graders give you more points.",
    "start": "1987480",
    "end": "1992740"
  },
  {
    "text": "Not really, but if\nyour solution is",
    "start": "1992740",
    "end": "1997840"
  },
  {
    "text": "well-organized and well-labeled\nand things like that, then we're going to be able to\ncomprehend your solution better",
    "start": "1997840",
    "end": "2004760"
  },
  {
    "text": "and we'll be able to\ngive you more points. Remember, part of this class\nis about communication.",
    "start": "2004760",
    "end": "2010510"
  },
  {
    "text": "If your thing is correct but we\ncan't tell what you're saying,",
    "start": "2010510",
    "end": "2017040"
  },
  {
    "text": "then it's not correct.  OK.",
    "start": "2017040",
    "end": "2024280"
  },
  {
    "text": "All right. So now we get --to\nany questions on that? Yeah. AUDIENCE: Just a\nquestion on invariants.",
    "start": "2024280",
    "end": "2031019"
  },
  {
    "text": "So one of the data\nstructures that we've discussed in the\nclass previously to state like what\nthe invariants are, like the set AVL tree rule.",
    "start": "2031020",
    "end": "2037243"
  },
  {
    "text": "JASON KU: Right. So if it's the\nstandard things, we were going to talk about what\nthe standard things are now.",
    "start": "2037243",
    "end": "2044240"
  },
  {
    "text": "Then you don't need to\nre-argue or --restate I mean, you can\nbasically say like,",
    "start": "2044240",
    "end": "2050599"
  },
  {
    "text": "because the set and sequence\ninterfaces are defined that way, these\nthings are correct,",
    "start": "2050600",
    "end": "2056419"
  },
  {
    "text": "like --almost you\ncan --basically",
    "start": "2056420",
    "end": "2062000"
  },
  {
    "text": "you're trying to convince\nus that why it's correct. If you're correctly using\na set or sequence data",
    "start": "2062000",
    "end": "2068600"
  },
  {
    "text": "structure in these data\nstructures-type problems, then unless you're using it\nin a way that is unusual,",
    "start": "2068600",
    "end": "2078239"
  },
  {
    "text": "usually you can just\nrely on the properties of the set and sequence data\nstructures that we gave you.",
    "start": "2078239",
    "end": "2083790"
  },
  {
    "text": "I do want you to mention that\nyou thought about correctness. Like this data structure\nis correct because.",
    "start": "2083790",
    "end": "2094790"
  },
  {
    "text": "Just write a sentence\nsaying that and arguing that you're\nbasically maintaining",
    "start": "2094790",
    "end": "2101480"
  },
  {
    "text": "the invariance of your\ndata structure kind of at the upper level. What kinds of things is\nthis data structure storing?",
    "start": "2101480",
    "end": "2108589"
  },
  {
    "text": "What things about the\nglobal data structure",
    "start": "2108590",
    "end": "2114320"
  },
  {
    "text": "are we relying on to\nmake query operations? As long as you are convincing\nthat after a dynamic operation",
    "start": "2114320",
    "end": "2122000"
  },
  {
    "text": "when modifying the data\nstructure that those invariant stay the --same that are\nstill satisfied, then",
    "start": "2122000",
    "end": "2129830"
  },
  {
    "text": "that's really all\nyou need to say. These invariants are\nsatisfied because",
    "start": "2129830",
    "end": "2136160"
  },
  {
    "text": "of the definitions of a set\nand sequence data structure. A lot of times it doesn't\nrequire a lot of thought",
    "start": "2136160",
    "end": "2142549"
  },
  {
    "text": "for --the we're not\n--asking the reason why we do reduction\nproblems is so you",
    "start": "2142550",
    "end": "2148850"
  },
  {
    "text": "don't have to do a lot of\nwork to prove to us that it's correct. We have these really\nnice black boxes.",
    "start": "2148850",
    "end": "2154609"
  },
  {
    "text": "They are correct. We proved them to you\nthat they're correct, and so you don't have\nto redo that work.",
    "start": "2154610",
    "end": "2161480"
  },
  {
    "text": "So now we're going to go\nthrough the core material I like",
    "start": "2161480",
    "end": "2167420"
  },
  {
    "text": "to think about in this class. The first part of\nthis class, aside from these mathematical\ntools that we developed",
    "start": "2167420",
    "end": "2176960"
  },
  {
    "text": "at the beginning\nof the course, it's mostly about solving problems\ninvolving data structures. And we motivated this\nproblem of sorting",
    "start": "2176960",
    "end": "2184309"
  },
  {
    "text": "by saying that a sorted array\nis a data structure that's actually pretty useful. But how do we sort those things?",
    "start": "2184310",
    "end": "2191030"
  },
  {
    "text": "Well, we showed you a\nbunch of ways to do that. And this is that nice table.",
    "start": "2191030",
    "end": "2197900"
  },
  {
    "text": "Lots of stuff. Why do we show you so\nmany sorting algorithms? Why don't we just give\nyou one algorithm?",
    "start": "2197900",
    "end": "2205694"
  },
  {
    "start": "2200000",
    "end": "2662000"
  },
  {
    "text": "Hmm? Yeah? AUDIENCE: --run times. JASON KU: Different run times.",
    "start": "2205694",
    "end": "2210830"
  },
  {
    "text": "AUDIENCE: Better for --different JASON KU: Better for\ndifferent scenarios. AUDIENCE: Yeah. They each have their\nown individual points, then they do better.",
    "start": "2210830",
    "end": "2215940"
  },
  {
    "text": "JASON KU: Yeah. You'll notice in\nthis table, there's not blue all the way across\nfor any of these things.",
    "start": "2215940",
    "end": "2225260"
  },
  {
    "text": "So some of them are better\nfor different scenarios. And actually, these comments\nlist some special cases where",
    "start": "2225260",
    "end": "2232250"
  },
  {
    "text": "these things might be better. In actuality, this\nultra-blue thing",
    "start": "2232250",
    "end": "2237920"
  },
  {
    "text": "is saying like this\ncould be linear time. That's better. But in some cases this is worse\nthan all the other things.",
    "start": "2237920",
    "end": "2246470"
  },
  {
    "text": "So be a little wary of\nthis blue color here.",
    "start": "2246470",
    "end": "2251570"
  },
  {
    "text": "Generally we're trying to get\nyou further down in this chart if you can.",
    "start": "2251570",
    "end": "2257900"
  },
  {
    "text": "And in general, like for\nexample, merge sort, AVL sort,",
    "start": "2257900",
    "end": "2265099"
  },
  {
    "text": "these are really the same in\nterms of asymptotic complexity and the way in which you\ninteract with these sorting",
    "start": "2265100",
    "end": "2271460"
  },
  {
    "text": "rooms. But there are\nspecial cases where you might use insertion sort\nor selection --sort actually,",
    "start": "2271460",
    "end": "2278900"
  },
  {
    "text": "I'm not sure about\ninsertion sort. You had in your\nrecitation two days ago--",
    "start": "2278900",
    "end": "2287750"
  },
  {
    "text": "I think you guys\nshowed how to do if you had a k-proximate array\nwhere things are not more",
    "start": "2287750",
    "end": "2294890"
  },
  {
    "text": "than k away from each other. Insertion sort actually\nruns in n times k, and so if k is small,\nthen that's really good,",
    "start": "2294890",
    "end": "2300560"
  },
  {
    "text": "that's kind of like linear. But you can actually\ndo even better with a binary heap, which you\nsaw in recitation, hopefully,",
    "start": "2300560",
    "end": "2308269"
  },
  {
    "text": "where you can get that down to\nn log k by --keeping maintaining a heap as you go across and\nfinding the max that way.",
    "start": "2308270",
    "end": "2317840"
  },
  {
    "text": "So insertion sort\nmaybe is not so great. But selection sort,\nthe name of the game",
    "start": "2317840",
    "end": "2323840"
  },
  {
    "text": "there is that if\nmy reads are cheap",
    "start": "2323840",
    "end": "2330290"
  },
  {
    "text": "but my writes are\nexpensive, selection sort it actually does pretty\nwell, because I only have--",
    "start": "2330290",
    "end": "2336670"
  },
  {
    "text": "sorry. Reads are cheap and my\nwrites are expensive. Selection sort does a\nlinear number of swaps.",
    "start": "2336670",
    "end": "2342675"
  },
  {
    "text": "It's looking down, finding\nthe max, swapping it in, and keep it going. And so in such cases,\nthat's actually",
    "start": "2342675",
    "end": "2348460"
  },
  {
    "text": "better than any of these other\nalgorithms that we've got. Yeah? AUDIENCE: Those heap --sorts",
    "start": "2348460",
    "end": "2353464"
  },
  {
    "text": "JASON KU: Mm-hmm. AUDIENCE: --time, worst\ncase are expected. JASON KU: This is worst case.",
    "start": "2353464",
    "end": "2359349"
  },
  {
    "text": "So it's a little hard to-- there was a lot of moving\nparts to get to this bound in Tuesday's lecture.",
    "start": "2359350",
    "end": "2367360"
  },
  {
    "text": "Basically what we\ndid, we showed you how to think of an\narray as a heap-- as a binary tree.",
    "start": "2367360",
    "end": "2374020"
  },
  {
    "text": "Complete binary tree. It's not an AVL-- I mean, it is an AVL\ntree, but AVL trees",
    "start": "2374020",
    "end": "2380380"
  },
  {
    "text": "are weaker than a complete tree. Height balance is a weaker\nproperty than a complete.",
    "start": "2380380",
    "end": "2386470"
  },
  {
    "text": "The reason why we use\ncomplete is because it's unique for a number of nodes.",
    "start": "2386470",
    "end": "2394270"
  },
  {
    "text": "That way, when I give you one\narray with a fixed length, I know exactly what tree\nyou're talking about,",
    "start": "2394270",
    "end": "2399880"
  },
  {
    "text": "because there's a\none-to-one mapping there. If there was some ambiguity on\nwhat tree I was talking about,",
    "start": "2399880",
    "end": "2410350"
  },
  {
    "text": "I --wouldn't heaps\njust wouldn't work. So what heap sort does is\nit has this correspondence",
    "start": "2410350",
    "end": "2417130"
  },
  {
    "text": "between arrays and binary trees. And then what it\ndoes is it provides",
    "start": "2417130",
    "end": "2422470"
  },
  {
    "text": "these operations that kind of\nonly do operations at the end. And then the\nin-place optimization",
    "start": "2422470",
    "end": "2430329"
  },
  {
    "text": "is that, well, instead of\nactually popping it or pushing it onto the back\nof an array, I'm just going to think of a\nsubset of my array as a heap",
    "start": "2430330",
    "end": "2439660"
  },
  {
    "text": "and then always kind of\npooping the max out to the end.",
    "start": "2439660",
    "end": "2445960"
  },
  {
    "text": "Just leaving it behind\nand thinking of my heap as a smaller subset.",
    "start": "2445960",
    "end": "2451660"
  },
  {
    "text": "And that's how we --got\nit didn't actually de-use any amortization.",
    "start": "2451660",
    "end": "2458950"
  },
  {
    "text": "For the time bound, time\nbounds you could actually do this with the amortized\nbasically dynamic array",
    "start": "2458950",
    "end": "2464950"
  },
  {
    "text": "version of this. The time bound\ndoesn't rely on that. The in-place relies on keys\nstaying all within one array.",
    "start": "2464950",
    "end": "2472720"
  },
  {
    "text": "Does that make sense? You're doing a bunch of\namortized operations, so that this actually does\nachieve worst case n log n.",
    "start": "2472720",
    "end": "2479530"
  },
  {
    "text": "Yeah? AUDIENCE: It seems that\nthe things we learned-- JASON KU: Mm-hmm. AUDIENCE: --not like--",
    "start": "2479530",
    "end": "2484550"
  },
  {
    "text": "JASON KU: Mm-hmm. AUDIENCE: They\ntend to be better. So assume that most algorithms\nthan we want them to be--",
    "start": "2484550",
    "end": "2489594"
  },
  {
    "text": "JASON KU: Uh huh. AUDIENCE: --faster. It seems like people will\nnot use as often, especially",
    "start": "2489594",
    "end": "2495460"
  },
  {
    "text": "in these [INAUDIBLE]\ninsertion and selection. JASON KU: Right, yeah. So there are these special\ncases where they're good,",
    "start": "2495460",
    "end": "2500920"
  },
  {
    "text": "but, I mean, generally\nthese are better general data structures\nfor most situations",
    "start": "2500920",
    "end": "2508599"
  },
  {
    "text": "that you come across. I mean, there are cases where\nthose other things are good, so you don't want to\ncompletely ignore them,",
    "start": "2508600",
    "end": "2514210"
  },
  {
    "text": "but generally, yeah, you're\ntrying to be lower bound in this chart. AUDIENCE: What I mean is that\nif I don't have any --bound like",
    "start": "2514210",
    "end": "2521383"
  },
  {
    "text": "I'm using them all except\nfor selection sort-- JASON KU: So there's\ntoo many things on here for us to test all\nof them on an exam.",
    "start": "2521383",
    "end": "2529030"
  },
  {
    "text": "So don't be afraid if not\neverything is covered. Worry when things are\ncovered 18 times on the exam,",
    "start": "2529030",
    "end": "2535360"
  },
  {
    "text": "that's not good. OK. So for radix sort,\nthere are situations",
    "start": "2535360",
    "end": "2540970"
  },
  {
    "text": "where you get linear time. It's when you're\npolynomial-bounded. Are there times\nwhen I want to use",
    "start": "2540970",
    "end": "2548769"
  },
  {
    "text": "radix sort when I'm\nnot polynomial-bounded in my integers? ",
    "start": "2548770",
    "end": "2557708"
  },
  {
    "text": "AUDIENCE: Well, if you're\nnot polynomial-bounded, then that could take\na really long time. JASON KU: Sure, yeah.",
    "start": "2557708",
    "end": "2563210"
  },
  {
    "text": "But like where's --the this\nwill be worse than n log n when?",
    "start": "2563210",
    "end": "2569990"
  },
  {
    "text": " It's definitely\nbetter than n log n",
    "start": "2569990",
    "end": "2575270"
  },
  {
    "text": "when u is polynomially bounded. Because it's linear.",
    "start": "2575270",
    "end": "2580540"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE]\nn to the n. JASON KU: n to the n. OK.",
    "start": "2580540",
    "end": "2585870"
  },
  {
    "text": "So if I put n to\nthe n in here, I get an n factor\nthat comes out here.",
    "start": "2585870",
    "end": "2592310"
  },
  {
    "text": "That gives me a\nquadratic running time, which is not great.",
    "start": "2592310",
    "end": "2597710"
  },
  {
    "text": "But when will this be\nbetter then n log n?",
    "start": "2597710",
    "end": "2602750"
  },
  {
    "text": "Yeah? AUDIENCE: n to the c,\nbecause it's less n to the c.",
    "start": "2602750",
    "end": "2607757"
  },
  {
    "text": "JASON KU: n to the c--\nso that'll definitely give us linear time. That's what this is saying. But we can actually\ndo better than n log n",
    "start": "2607757",
    "end": "2615710"
  },
  {
    "text": "if this u is n to the c\ntimes log n for some c.",
    "start": "2615710",
    "end": "2623150"
  },
  {
    "text": "If --it's like if it's\nn to the c log log n,",
    "start": "2623150",
    "end": "2628609"
  },
  {
    "text": "that's smaller than log n. So that's a better algorithm. That's a faster algorithm. Do you guys see why we\nwrote these things this way?",
    "start": "2628610",
    "end": "2638600"
  },
  {
    "text": "It's so that we give\nyou a more --precise this is more important for you\nunderstand what u means here",
    "start": "2638600",
    "end": "2645680"
  },
  {
    "text": "than that this thing\nsometimes runs in linear time. We want to know when\nit runs in linear time.",
    "start": "2645680",
    "end": "2652740"
  },
  {
    "text": "Does that makes sense? Or when it runs faster\nthan merge sort. Does that makes sense?",
    "start": "2652740",
    "end": "2659849"
  },
  {
    "text": "OK. So that's sorting.  We have sequence-type\ndata structures.",
    "start": "2659850",
    "end": "2666319"
  },
  {
    "text": "We have linked lists,\nwe have dynamic arrays, we have sequence AVLs. Sequence AVLs are great.",
    "start": "2666320",
    "end": "2672310"
  },
  {
    "text": "I don't know why\nno one teaches it. They're great. They don't teach it probably\nbecause they're actually not",
    "start": "2672310",
    "end": "2678230"
  },
  {
    "text": "that useful. You don't actually use the\ninsert in the middle a lot",
    "start": "2678230",
    "end": "2685760"
  },
  {
    "text": "in coding. So it's-- you can usually\nget around with like shifting something to the end and doing\ndynamic operations there,",
    "start": "2685760",
    "end": "2693045"
  },
  {
    "text": "and that's a lot of the games\nthat you try to play so you don't have to make your\nown data structures, and you can just use the\nPython list that's in your--",
    "start": "2693045",
    "end": "2702230"
  },
  {
    "text": "like native to your thing. But it has a\ntheoretical interest because it gets these\nkind of balanced bounds",
    "start": "2702230",
    "end": "2708530"
  },
  {
    "text": "if you need to insert in\nthe middle of this sequence. Now some of you look at me\nand had a question before that",
    "start": "2708530",
    "end": "2718400"
  },
  {
    "text": "was like, but Jason,\nhow does linked list",
    "start": "2718400",
    "end": "2724490"
  },
  {
    "text": "operations on the\nend of a linked list, why does that take linear time?",
    "start": "2724490",
    "end": "2730220"
  },
  {
    "text": "It's because in lecture,\nwe presented you with what? ",
    "start": "2730220",
    "end": "2736890"
  },
  {
    "text": "A singly-linked list. It just had pointers\nto the next thing.",
    "start": "2736890",
    "end": "2742412"
  },
  {
    "text": "And if I only have pointers to\nthe next thing and a pointer to the head, for\nme to find the end,",
    "start": "2742412",
    "end": "2749130"
  },
  {
    "text": "I need to walk all\nthe way down the list. Now let's say I keep my pointer\nto the tail, then finding that",
    "start": "2749130",
    "end": "2757500"
  },
  {
    "text": "and n1 is fine, but removing\nit still takes linear time, because I don't know\nwhat came before me.",
    "start": "2757500",
    "end": "2764610"
  },
  {
    "text": "And so that's why in\np-set whatever, 1, 2, I don't remember, you\nstored a pointer back",
    "start": "2764610",
    "end": "2771809"
  },
  {
    "text": "to your previous one that\ngave you doubly-linked lists. Yay, right? So actually, expanding\nthis table out,",
    "start": "2771810",
    "end": "2779130"
  },
  {
    "text": "you can reference a\ndoubly-linked list here and get this one as constant time.",
    "start": "2779130",
    "end": "2784940"
  },
  {
    "text": "Does that make sense? And this one's\nstill linear time.",
    "start": "2784940",
    "end": "2790860"
  },
  {
    "text": "OK. But this one's\nstill linear time. We actually also\nshowed you how to do",
    "start": "2790860",
    "end": "2796650"
  },
  {
    "text": "this in constant amortized. Do you guys remember that? That was in problem\nsession 2 or 1?",
    "start": "2796650",
    "end": "2805080"
  },
  {
    "text": "I don't remember. It was whatever we talking\nabout amortized stuff.",
    "start": "2805080",
    "end": "2810359"
  },
  {
    "text": "We --got we got\nactually both of these to one amortized using the\nconcepts of the dynamic array.",
    "start": "2810360",
    "end": "2818160"
  },
  {
    "text": "And then we actually\ndid it one more time where we got a good\ndoubly-ended thing. What was that?",
    "start": "2818160",
    "end": "2824970"
  },
  {
    "text": "Does anyone remember? We went to problem session 3. Yeah? AUDIENCE: Oh.",
    "start": "2824970",
    "end": "2829972"
  },
  {
    "text": "I'm probably wrong, this is-- JASON KU: OK. AUDIENCE: --problem session 3. But like q dq type stuff? JASON KU: So q dq,\nthose are talking",
    "start": "2829972",
    "end": "2837330"
  },
  {
    "text": "about doubly-ended things. Those are implemented in a\ncertain way, which is actually",
    "start": "2837330",
    "end": "2843750"
  },
  {
    "text": "one of these things. It's actually, I think,\nthis one in Python.",
    "start": "2843750",
    "end": "2848880"
  },
  {
    "text": "But there's --a we used a\ndifferent data structure to get something that\nhad really good at.",
    "start": "2848880",
    "end": "2855810"
  },
  {
    "text": "It had really good\npop and append and first and last\ndynamic operations.",
    "start": "2855810",
    "end": "2861820"
  },
  {
    "text": "Do you --guys anyone\nremember from session 3? ",
    "start": "2861820",
    "end": "2867635"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] AUDIENCE: Isn't it\ndynamic array [INAUDIBLE]?? JASON KU: That's what this was.",
    "start": "2867635",
    "end": "2874790"
  },
  {
    "text": "OK. We got one that had\nexpected bounds. Does that help?",
    "start": "2874790",
    "end": "2880640"
  },
  {
    "text": "What? I heard someone say it. Hash table. Yeah. So basically what you\ndid, instead --of this",
    "start": "2880640",
    "end": "2889100"
  },
  {
    "text": "is a sequence thing. These things don't have keys. But I could identify\nwith each item",
    "start": "2889100",
    "end": "2896270"
  },
  {
    "text": "as I stick it in, a key\nrepresenting its index. And I could use a\nhash table that way.",
    "start": "2896270",
    "end": "2902310"
  },
  {
    "text": "Now there was some difficulty\nif I removed the first thing. ",
    "start": "2902310",
    "end": "2910130"
  },
  {
    "text": "Because actually, how\n--those are all of my indices have now changed.",
    "start": "2910130",
    "end": "2915710"
  },
  {
    "text": "But if I just store what the\nsmallest index in my thing is, then I'm golden,\nbecause I can compute",
    "start": "2915710",
    "end": "2922160"
  },
  {
    "text": "what that index should be I\nchange things at the front. OK. So there's actually\nthree different ways",
    "start": "2922160",
    "end": "2928730"
  },
  {
    "text": "we showed you of getting\nconstant time at the front and the back of this thing. So actually, you can think\nof that as standard material",
    "start": "2928730",
    "end": "2937190"
  },
  {
    "text": "that you can reduce to. That's the one\nexception of the things that I'm not showing\non this chart,",
    "start": "2937190",
    "end": "2942720"
  },
  {
    "text": "but is a bonus if you're\nwatching this problem session. Yeah? AUDIENCE: So isn't a hash table\na set data structure, though?",
    "start": "2942720",
    "end": "2948890"
  },
  {
    "text": "JASON KU: It is. But we used it to implement\na sequenced data structure. So I will refer you to\nthat problem session",
    "start": "2948890",
    "end": "2955730"
  },
  {
    "text": "if you want to\nlearn more about it. So, any questions on\nsequenced data structures?",
    "start": "2955730",
    "end": "2961090"
  },
  {
    "text": "Yeah? AUDIENCE: I-- JASON KU: Yeah, uh huh. AUDIENCE: Should\nwe be-- or-- yeah. Should we be able to look prove\nthe tables that we're given?",
    "start": "2961090",
    "end": "2968930"
  },
  {
    "text": "JASON KU: So I would hope-- hope-- that if I gave you\na blank table, that you",
    "start": "2968930",
    "end": "2976550"
  },
  {
    "text": "would be able to fill it out. That's how well I\nwant you to know how these things are implemented.",
    "start": "2976550",
    "end": "2983090"
  },
  {
    "text": "We're not going to\nhave that on the exam. That's a boring\nkind of question. AUDIENCE: But it is\nimportant to know?",
    "start": "2983090",
    "end": "2989480"
  },
  {
    "text": "JASON KU: Yeah. I would-- it's good\nfor you to think, like, oh, if I'm going\nto use an AVL tree,",
    "start": "2989480",
    "end": "2996110"
  },
  {
    "text": "operations are generally\ngoing to be log n. That's a really useful\nthing-- or, if I'm going to use a hash table,\ndictionary-type operations,",
    "start": "2996110",
    "end": "3003850"
  },
  {
    "text": "finding, inserting, and\ndeleting, those are fast. Doing order-type operations\non hash tables is bad,",
    "start": "3003850",
    "end": "3011620"
  },
  {
    "text": "that's hard to do because\nI have to basically look through all my things. Knowing that dynamic operations\non a sorted array is bad.",
    "start": "3011620",
    "end": "3019869"
  },
  {
    "text": "Or knowing that-- you have to\nthink about here what we mean",
    "start": "3019870",
    "end": "3026680"
  },
  {
    "text": "when we say linked list and\ndynamic array in this table, because-- AUDIENCE: Singly-linked. JASON KU: Yeah, exactly.",
    "start": "3026680",
    "end": "3032360"
  },
  {
    "text": "We are implying\nsingly-linked here because that's what we\npresented to you in lecture. And so those are\nthe standard things",
    "start": "3032360",
    "end": "3037930"
  },
  {
    "text": "that we want you to reduce to. Yeah? AUDIENCE: --three modified\nstandard things are the doubly-linked lists,\nthe doubly-ended--",
    "start": "3037930",
    "end": "3043330"
  },
  {
    "text": "JASON KU: Yeah. Basically you can\nassume that you have-- it's this one that you\nprobably want to use,",
    "start": "3043330",
    "end": "3049390"
  },
  {
    "text": "because you get\nconstant indexing. And then pretty\ngood on both ends.",
    "start": "3049390",
    "end": "3057580"
  },
  {
    "text": "But if you need\na double-ended Q, you can also reduce it to having\ntwo dynamic arrays back-to-back",
    "start": "3057580",
    "end": "3064720"
  },
  {
    "text": "when going this way,\nwhen going this way. And so there's lots of-- we're not going to give that\nto you as a standard method",
    "start": "3064720",
    "end": "3069940"
  },
  {
    "text": "because there's literally like\nfour methods we showed you how to do. So you choose one. OK.",
    "start": "3069940",
    "end": "3075430"
  },
  {
    "text": "Yeah? AUDIENCE: In the interest\nof saving time on the exam, if we want to say, like, we do\nthis thing with the sequence",
    "start": "3075430",
    "end": "3081859"
  },
  {
    "text": "AVL and it takes log n time. Do we have to say the\nsentence like, because this is sequence AVL, it takes\na longer time because this?",
    "start": "3081860",
    "end": "3088228"
  },
  {
    "text": "Or can we just like say like,\nfor the table that we know? JASON KU: Yeah, no. If you told me that you're\nstoring things in a sequence",
    "start": "3088228",
    "end": "3095560"
  },
  {
    "text": "AVL and you just say-- you basically say what\nyou do to it, and you say,",
    "start": "3095560",
    "end": "3100900"
  },
  {
    "text": "which takes blah,\nblah, blah time, you don't need to say\nbecause it's a sequence AVL, because you already told\nus it's a sequence AVL.",
    "start": "3100900",
    "end": "3107770"
  },
  {
    "text": "I believe that you\nprobably wrote the chart on your cheat sheet\nand you looked it up.",
    "start": "3107770",
    "end": "3112910"
  },
  {
    "text": "All right. Any other questions on this? No. Yeah? AUDIENCE: Just make sure,\nthe doubly-linked lists",
    "start": "3112910",
    "end": "3119680"
  },
  {
    "text": "will make the insert\non [INAUDIBLE].. Is that the only change?",
    "start": "3119680",
    "end": "3124820"
  },
  {
    "text": "JASON KU: Yes. That doubly-linked list\ngives this guy constant time.",
    "start": "3124820",
    "end": "3130550"
  },
  {
    "text": "And actually, there are\ntwo operations here, insert, delete, and-- I guess there's a\nfind here as well.",
    "start": "3130550",
    "end": "3137300"
  },
  {
    "text": "If I just store\nthe tail pointer, that gets defined\nto constant time. but it doesn't get the\ndynamic ones to constant time.",
    "start": "3137300",
    "end": "3145190"
  },
  {
    "text": "I need to store the previous\npointers as well at each node. Does that make sense? OK.",
    "start": "3145190",
    "end": "3151880"
  },
  {
    "start": "3150000",
    "end": "3375000"
  },
  {
    "text": "Lastly-- or I guess second to\nlastly, set data structures. There are a little\nbit more of these.",
    "start": "3151880",
    "end": "3158030"
  },
  {
    "text": "Not so many more.  But yeah.",
    "start": "3158030",
    "end": "3164510"
  },
  {
    "text": "We had a sorted array, gets\ngood find, but is not dynamic. ",
    "start": "3164510",
    "end": "3171320"
  },
  {
    "text": "We set AVL tree which\ndoes pretty good find and is dynamic.",
    "start": "3171320",
    "end": "3177380"
  },
  {
    "text": "Again, you get this n\nlog n overhead to build,",
    "start": "3177380",
    "end": "3182878"
  },
  {
    "text": "because essentially what you're\ndoing with both of those data structures is to sort. But if I'm looking\non a theory question,",
    "start": "3182878",
    "end": "3192080"
  },
  {
    "text": "like I'm not asking\nyou something specifically about a\nsorted array, if you have a choice between this\ndata structure and this data",
    "start": "3192080",
    "end": "3199880"
  },
  {
    "text": "structure, which\none do you choose? ",
    "start": "3199880",
    "end": "3205619"
  },
  {
    "text": "Well, I don't quite\nknow, because it's almost like this one's better at\neverything except for this one.",
    "start": "3205620",
    "end": "3212510"
  },
  {
    "text": "But can anyone tell me how to\nmake this one constant time as well? Augmentation.",
    "start": "3212510",
    "end": "3218420"
  },
  {
    "text": "I could just store in my\nsubtrees the max or min. And I can make this one\nstrictly better than this one.",
    "start": "3218420",
    "end": "3225790"
  },
  {
    "text": "So in theory\nproblem, you probably just want to use this one. ",
    "start": "3225790",
    "end": "3231410"
  },
  {
    "text": "Here, hash tables,\ndirect access arrays, even better for\nthese operations.",
    "start": "3231410",
    "end": "3236600"
  },
  {
    "text": "That's great. But they suck at these. So if you need these,\ndon't use these.",
    "start": "3236600",
    "end": "3242720"
  },
  {
    "text": "And in actual coding,\nespecially if you're coding in a language that's not\nPython, something that doesn't",
    "start": "3242720",
    "end": "3248359"
  },
  {
    "text": "automatically give\nyou a hash table, if you're in C in a\nmicrocontroller lab at MIT",
    "start": "3248360",
    "end": "3254450"
  },
  {
    "text": "here, you're taking\n6115 or whatever, and you're doing assembly,\nusually what you're doing",
    "start": "3254450",
    "end": "3261290"
  },
  {
    "text": "is a direct access stuff. Because that's\ngiving you the jumps that you need in\nmachine language",
    "start": "3261290",
    "end": "3267740"
  },
  {
    "text": "to actually go and access\nthis in constant time. That's generally if you\nhave control over the keys",
    "start": "3267740",
    "end": "3272960"
  },
  {
    "text": "that you're putting-- that you are putting\nin your data structure, you don't want this\noverhead of running",
    "start": "3272960",
    "end": "3278515"
  },
  {
    "text": "your keys through\na hash function to look these things up. You just store the\nthings in an array.",
    "start": "3278515",
    "end": "3284990"
  },
  {
    "text": "You use the hash\ntable when you don't have control over\nthe keys or your keys are like strings or something.",
    "start": "3284990",
    "end": "3292766"
  },
  {
    "text": "So that's when you\nuse the hash table. Now for our purposes,\nusually a hash table",
    "start": "3292767",
    "end": "3298215"
  },
  {
    "text": "is just as good unless\nwe're asking you for worst case bounds. And we're going to do this\nwhen we talk about the data",
    "start": "3298215",
    "end": "3305738"
  },
  {
    "text": "structures problem. If we give you a situation where\nwe don't care if you achieve",
    "start": "3305738",
    "end": "3312050"
  },
  {
    "text": "worst case are\nexpected or amortized or any of these\nthings, we'll just say, make sure you state\nwhich one you achieve.",
    "start": "3312050",
    "end": "3319760"
  },
  {
    "text": "And as long as you analyzed\nit correctly with respect to your data structures,\nthen you're fine.",
    "start": "3319760",
    "end": "3325430"
  },
  {
    "text": "But if we say you better\ndo worst case here, I'm going to slap you around. Then please get those bounds.",
    "start": "3325430",
    "end": "3332930"
  },
  {
    "text": "Don't use the hash\ntable in that case. That makes sense?",
    "start": "3332930",
    "end": "3338330"
  },
  {
    "text": "OK. Lastly, we've got priority\nqueues which we talked about.",
    "start": "3338330",
    "end": "3343871"
  },
  {
    "text": "I'm not going to go\nthrough this one very much. It's basically just\nadding this to the thing.",
    "start": "3343872",
    "end": "3349760"
  },
  {
    "text": "But in actuality, you can\nget all of these bounds with a set AVL--",
    "start": "3349760",
    "end": "3355190"
  },
  {
    "text": "I mean a sequence AVL tree\nwith max or min augmentation, which isn't on this list because\nwe didn't really talk about it,",
    "start": "3355190",
    "end": "3361820"
  },
  {
    "text": "but hopefully you can-- if you need these bounds\nwithout the amortization,",
    "start": "3361820",
    "end": "3367850"
  },
  {
    "text": "then you could achieve them. All right. So that's basically\neverything that we've",
    "start": "3367850",
    "end": "3373700"
  },
  {
    "text": "talked about in the class. We're going to spend the rest\nof the time working a couple of data structures problem.",
    "start": "3373700",
    "end": "3379460"
  },
  {
    "start": "3375000",
    "end": "3599000"
  },
  {
    "text": "I'm not-- there's a number of\ndifferent types of questions you'll actually\nsee on the quiz--",
    "start": "3379460",
    "end": "3387980"
  },
  {
    "text": "the practice quiz that we\ngave you from last term. There are some what I call\nmechanical-type questions up",
    "start": "3387980",
    "end": "3393500"
  },
  {
    "text": "at the front. Then usually some\nreduction-type problems where you're reducing to\nusing some sorting algorithms",
    "start": "3393500",
    "end": "3400490"
  },
  {
    "text": "or some data structures. And then usually\nthe latter ones are ones where you have to do some\nkind of something additional,",
    "start": "3400490",
    "end": "3406790"
  },
  {
    "text": "like some augmentation or\nsome divide and conquer or something like that.",
    "start": "3406790",
    "end": "3411920"
  },
  {
    "text": "OK. So we're going to\ngo ahead and spend the rest of the time working\na couple of these problems.",
    "start": "3411920",
    "end": "3419390"
  },
  {
    "text": "These were from spring\nof 2019 on the exam.",
    "start": "3419390",
    "end": "3424519"
  },
  {
    "text": "And actually, one of the\nTAs who's TAing for us now was also TAing\nfor us in spring 2019.",
    "start": "3424520",
    "end": "3432020"
  },
  {
    "text": "Was grading problem\nnumber 2 here, the rainy research\nproblem, and just hated me, because no one did it right.",
    "start": "3432020",
    "end": "3438590"
  },
  {
    "text": "All right. So, let's try to\nsolve these problems. So problem 1 is\nabout restaurant--",
    "start": "3438590",
    "end": "3448730"
  },
  {
    "text": "restaurant, yes, OK. All right. So basically, what's happening?",
    "start": "3448730",
    "end": "3454040"
  },
  {
    "text": "A popular restaurant,\nCriminal Seafood. What's the reference?",
    "start": "3454040",
    "end": "3459829"
  },
  {
    "text": "Legal Seafood. Yes, opposite. Does not take reservations,\nbut maintains a wait list where customers who have\nbeen on the wait list longer",
    "start": "3459830",
    "end": "3467010"
  },
  {
    "text": "are seated earlier. Sometimes customers decide\nto eat somewhere else, so restaurant must remove\nthem from the wait list.",
    "start": "3467010",
    "end": "3473030"
  },
  {
    "text": "OK. Assume that a customer\nhas a different name. No two customers are\nadded to the wait list",
    "start": "3473030",
    "end": "3480320"
  },
  {
    "text": "at the exact same time. So there's a kind of an\nordering at which people are being added to this wait list.",
    "start": "3480320",
    "end": "3486060"
  },
  {
    "text": "Does that makes sense? Design a database to help\nCriminals Seafood maintain its wait lists\nsupporting the following",
    "start": "3486060",
    "end": "3491510"
  },
  {
    "text": "operations, each\nin constant time. OK, so here, we've refactored\nthe running time up to the top.",
    "start": "3491510",
    "end": "3498589"
  },
  {
    "text": "And it's a-- oh, sorry. I added the build here. I guess that's\nstill constant time. That's fine, OK.",
    "start": "3498590",
    "end": "3503839"
  },
  {
    "text": "AUDIENCE: I have time d-- JASON KU: Yeah. State whether each running\ntime operation is worst case,",
    "start": "3503840",
    "end": "3509450"
  },
  {
    "text": "amortized, expected. So, when you see that\nstatement, you're saying, OK, I'm allowed to use a\nhash table if I want to.",
    "start": "3509450",
    "end": "3517580"
  },
  {
    "text": "I just have to make\nsure if I use one, I label my operations expected\nand amortized when they occur.",
    "start": "3517580",
    "end": "3524900"
  },
  {
    "text": "Which operations are expected? Basically all of them. Which operations are amortized? The ones that changed what's\nin the data structure, insert,",
    "start": "3524900",
    "end": "3532790"
  },
  {
    "text": "delete. OK. So we've got some operations,\nbuilding an empty thing.",
    "start": "3532790",
    "end": "3538369"
  },
  {
    "text": "Adding a name-- so this name is\nx to the back of the wait list. What do I know about x?",
    "start": "3538370",
    "end": "3543530"
  },
  {
    "text": "What do I know about the\nnames per our assumptions in this class? AUDIENCE: They're unique,\nso they can be a key.",
    "start": "3543530",
    "end": "3548690"
  },
  {
    "text": "JASON KU: They're unique,\nso they can be a key. And they fit in a\nconstant number of words",
    "start": "3548690",
    "end": "3554540"
  },
  {
    "text": "by our assumption. So I can compare\ntwo of them in-- or I can hash one\nin constant time.",
    "start": "3554540",
    "end": "3559700"
  },
  {
    "text": "That's kind of the assumption\nwe make on these inputs, they're strings. And I didn't assign you\na bound on their length,",
    "start": "3559700",
    "end": "3566059"
  },
  {
    "text": "so it's probably not something\nyou need to worry about. OK remove a name.",
    "start": "3566060",
    "end": "3573109"
  },
  {
    "text": "So already I'm\nfeeling like, I need to be able to find\nthings by their name.",
    "start": "3573110",
    "end": "3579230"
  },
  {
    "text": "OK. And then seat the\nnext person in line. Does that makes sense?",
    "start": "3579230",
    "end": "3584609"
  },
  {
    "text": "So what kinds of things do\nI need to maintain here? I have people.",
    "start": "3584610",
    "end": "3589850"
  },
  {
    "text": "They have names and they\nhave kind of places, the time that they came in.",
    "start": "3589850",
    "end": "3595340"
  },
  {
    "text": "But am I given the times?  No.",
    "start": "3595340",
    "end": "3601019"
  },
  {
    "text": "I'm not given times anywhere. It's not on the inputs\nto my operations. So it's not like I'm going\nto be able to key on time.",
    "start": "3601020",
    "end": "3608560"
  },
  {
    "text": "That makes sense? What's the important\npart about the times? The order. AUDIENCE: And you're given that.",
    "start": "3608560",
    "end": "3613880"
  },
  {
    "text": "JASON KU: Yeah. Basically whenever--\nI'm basically trying to maintain a\nsequence on these guys.",
    "start": "3613880",
    "end": "3620160"
  },
  {
    "text": "There's a front one and a back\none and people in the middle. And I want to make sure\nthat order stays the same,",
    "start": "3620160",
    "end": "3625880"
  },
  {
    "text": "or else people are going\nto getting angry at me, because ah, they came here\nafter me and I got a--",
    "start": "3625880",
    "end": "3631390"
  },
  {
    "text": "yeah. You've been in that situation. OK. So, we're trying to maintain\nsome kind of sequence,",
    "start": "3631390",
    "end": "3638220"
  },
  {
    "text": "an extrinsic order\non these things. But we're also needing to\nbe able to look up people",
    "start": "3638220",
    "end": "3644250"
  },
  {
    "text": "by their name because I want to\nbe able to change this thing. Does this maybe sound familiar\nto some other problem we had",
    "start": "3644250",
    "end": "3651000"
  },
  {
    "text": "on this term's problem sets? Yeah, I think there\nwas a problem where--",
    "start": "3651000",
    "end": "3658600"
  },
  {
    "text": "AUDIENCE: The chat. JASON KU: The chat. You had to store a sequence. But you also had this dictionary\nthat you had to look things up.",
    "start": "3658600",
    "end": "3666120"
  },
  {
    "text": "Now the nice thing\nabout that situation",
    "start": "3666120",
    "end": "3671670"
  },
  {
    "text": "is that the things that\nyou needed to look up on was static. And so what could I\nuse for my dictionary,",
    "start": "3671670",
    "end": "3678870"
  },
  {
    "text": "my sets data structure for that? Anyone remember?",
    "start": "3678870",
    "end": "3685290"
  },
  {
    "text": "You could just use\na sorted array. Because it's\nstatic, these things aren't updating all the time,\nand so it was fine for me",
    "start": "3685290",
    "end": "3692010"
  },
  {
    "text": "to just use a static array. Here-- and we gave\nyou lookup times that",
    "start": "3692010",
    "end": "3699450"
  },
  {
    "text": "were worst case logarithmic. Here, I'm asking\nfor constant time. ",
    "start": "3699450",
    "end": "3705599"
  },
  {
    "text": "Sorted array is not\ngoing to cut it, set AVL's not going to cut\nit, so what am I going to use? AUDIENCE: Dynamic-- JASON KU: A dynamic\narray or a hash table.",
    "start": "3705600",
    "end": "3712650"
  },
  {
    "text": "Now dynamic array might not be\ngreat because I don't actually have a numeric bound on\nhow big these keys are,",
    "start": "3712650",
    "end": "3718590"
  },
  {
    "text": "I just know that\nthey fit in words. So I can't actually make\na direct access array",
    "start": "3718590",
    "end": "3723900"
  },
  {
    "text": "because those words-- while they fit in a\nconstant number of words, I don't know if the integer\nrepresentation of those",
    "start": "3723900",
    "end": "3729390"
  },
  {
    "text": "are polynomial-bounded. Does that make sense? So I do want to use\nhashing in this case.",
    "start": "3729390",
    "end": "3736043"
  },
  {
    "text": "And so what do I\nwant to maintain? I want to maintain a sequence\ndata structure on customers.",
    "start": "3736043",
    "end": "3750180"
  },
  {
    "text": "Customers. Is there a U in there somewhere? No. This is right, right? OK. And a set mapping.",
    "start": "3750180",
    "end": "3761170"
  },
  {
    "text": "So this is usually how I do it. Like I want to say a\nset keyed on something.",
    "start": "3761170",
    "end": "3766380"
  },
  {
    "text": "If it's just a set,\nthen I just have it key. I can look up whether that\nthing is there or not. But when I'm actually having\nit mapped to something else,",
    "start": "3766380",
    "end": "3775140"
  },
  {
    "text": "I'll say, mapping a key, space,\nto something else, usually the item that I'm\nstoring or maybe",
    "start": "3775140",
    "end": "3782010"
  },
  {
    "text": "some property of the\nitems that I'm storing. Does that make sense? OK. So mapping, what do I map here?",
    "start": "3782010",
    "end": "3789140"
  },
  {
    "text": "Names.  To-- oh.",
    "start": "3789140",
    "end": "3795348"
  },
  {
    "text": "To what? Do I want to map? AUDIENCE: To time--",
    "start": "3795348",
    "end": "3800558"
  },
  {
    "text": "JASON KU: The time. The time that they entered. Do I want to do that? AUDIENCE: Well, you can't\nexactly do it with the time",
    "start": "3800558",
    "end": "3807349"
  },
  {
    "text": "that they entered, but the\nsequence on the customers will show what's next in line. JASON KU: Yeah. I want to store it to where\nit is in this sequence.",
    "start": "3807350",
    "end": "3815570"
  },
  {
    "text": "So I'll just store the index\nwhere it is in the sequence and I can just look it up. That's sounds-- yeah?",
    "start": "3815570",
    "end": "3823177"
  },
  {
    "text": "Is that what-- AUDIENCE: I thought\nthe indices change. JASON KU: Yeah. Indices change every time\nI add or remove things.",
    "start": "3823177",
    "end": "3828380"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JASON KU: Ah, yeah. Store a pointer. Pointer to place in sequence.",
    "start": "3828380",
    "end": "3840740"
  },
  {
    "text": "Now, that's a\nlittle weird to say, because I haven't told you how\nI represented this sequence.",
    "start": "3840740",
    "end": "3849500"
  },
  {
    "text": "But conceptually I can\nsay I'm drawing a pointer to someplace in\nthis that represents",
    "start": "3849500",
    "end": "3855470"
  },
  {
    "text": "where it is, I'll deal with\nthe details of that later. But generally I call this\na linked data structure,",
    "start": "3855470",
    "end": "3862579"
  },
  {
    "text": "because I'm linking\nbetween two data structures so that I can do a query in one,\nsay, and find out where it is",
    "start": "3862580",
    "end": "3870380"
  },
  {
    "text": "and the other. Or do a query in the\nother, that kind of thing.",
    "start": "3870380",
    "end": "3876140"
  },
  {
    "text": "So, everyone kind of understand\nwhy I chose these things? How I approached this problem?",
    "start": "3876140",
    "end": "3881240"
  },
  {
    "text": "Yeah? AUDIENCE: I'm not sure how\na pointer fixes the problem",
    "start": "3881240",
    "end": "3886430"
  },
  {
    "text": "of just storing an index. The place that a person\nis at in the sequence",
    "start": "3886430",
    "end": "3893880"
  },
  {
    "text": "is going to change over time. JASON KU: Mm-hmm. AUDIENCE: --assuming that a\npointer updates, would that change? JASON KU: So-- OK.",
    "start": "3893880",
    "end": "3899340"
  },
  {
    "text": "So let's say if every time-- so let's say I'm storing--",
    "start": "3899340",
    "end": "3905190"
  },
  {
    "text": "let's say I'm storing this\nsequence in a linked list, let's just say,\nbecause I know that I'm going to have to be\ninserting and deleting things",
    "start": "3905190",
    "end": "3911162"
  },
  {
    "text": "from the middle of this thing. Does that make sense? All right. So I'm going to go\nahead and say that this",
    "start": "3911162",
    "end": "3916920"
  },
  {
    "text": "is going to be a linked list. Now I have this linked list. ",
    "start": "3916920",
    "end": "3924930"
  },
  {
    "text": "So if I said, all right, the\nset data structure in my set",
    "start": "3924930",
    "end": "3930900"
  },
  {
    "text": "stores-- or stores where it is\nin the linked list,",
    "start": "3930900",
    "end": "3936272"
  },
  {
    "text": "let's say it's stored\nat k, all right?",
    "start": "3936272",
    "end": "3941980"
  },
  {
    "text": "Cool. Now if I seat this guy,\nI stick him at his table,",
    "start": "3941980",
    "end": "3951750"
  },
  {
    "text": "every index has changed. So for me to update the\nindices stored in this set data",
    "start": "3951750",
    "end": "3957869"
  },
  {
    "text": "structure, I have to change\nevery single one of them. AUDIENCE: Yeah. JASON KU: Does that make sense? AUDIENCE: Yeah, no, this\nmakes way more sense.",
    "start": "3957870",
    "end": "3964000"
  },
  {
    "text": "JASON KU: Yeah. So really what I want, not\nto store a number here, but an actual pointer\nto the node that's",
    "start": "3964000",
    "end": "3969330"
  },
  {
    "text": "containing this thing,\nbecause the node isn't changing unless that\nthing left my data structure.",
    "start": "3969330",
    "end": "3976380"
  },
  {
    "text": "The node, the address of this\nthing in memory, the node is just a little\ncontainer that contains",
    "start": "3976380",
    "end": "3982500"
  },
  {
    "text": "an item and the next\npointer, and actually we're going to need a\nprevious pointer here.",
    "start": "3982500",
    "end": "3988900"
  },
  {
    "text": "We're going to need\na doubly-linked list. Because what we're going to\ndo when we remove something,",
    "start": "3988900",
    "end": "3994440"
  },
  {
    "text": "we need to stitch\nit back together in constant time,\nwhich means we need to know what's the one in front\nof us and the one behind us.",
    "start": "3994440",
    "end": "4002720"
  },
  {
    "text": "Yeah? No? All right. So linked list here. We already said maybe\nusing a hash table here.",
    "start": "4002720",
    "end": "4009500"
  },
  {
    "text": " And so, OK, great.",
    "start": "4009500",
    "end": "4016850"
  },
  {
    "text": "This is basically\nenough for me to say, this is my data structure,\nthese are the invariants.",
    "start": "4016850",
    "end": "4023500"
  },
  {
    "text": "What are the invariants? It's storing all the customers. That's an invariant. I mean, it's not a very\nstrong invariant, but it's--",
    "start": "4023500",
    "end": "4030859"
  },
  {
    "text": "yeah, I mean, I should say that. I'm storing all the\ncustomers because I'm going to have to make sure\nthat I'm maintaining that when",
    "start": "4030860",
    "end": "4037730"
  },
  {
    "text": "I do a query. And then here, set\nmapping names to pointers.",
    "start": "4037730",
    "end": "4044450"
  },
  {
    "text": "The place in this thing. And as I remove things,\nI need to make sure",
    "start": "4044450",
    "end": "4049520"
  },
  {
    "text": "that invariant stays the same. It's still mapping all\nthe names of customers that I have in my\nthing to their nodes.",
    "start": "4049520",
    "end": "4057560"
  },
  {
    "text": "So when something\nleaves, I better need to make sure that both\nof these things are updated.",
    "start": "4057560",
    "end": "4063320"
  },
  {
    "text": "Does that make sense? OK. So how do I maintain\nthese operations? We've got a build--",
    "start": "4063320",
    "end": "4070400"
  },
  {
    "text": "build just sets up\nempty of these things. It's easier to say that.",
    "start": "4070400",
    "end": "4076010"
  },
  {
    "text": "I build an empty linked\nlist, doubly-linked lists on the customers,\nand I build a set--",
    "start": "4076010",
    "end": "4084080"
  },
  {
    "text": "a hash table mapping nothing\nto nothing right now. OK. So that's build.",
    "start": "4084080",
    "end": "4090410"
  },
  {
    "text": "I'm going to be precise\nhere and actually write down the thing\nbecause I told you not",
    "start": "4090410",
    "end": "4098870"
  },
  {
    "text": "to ignore a\noperation, or else we can't give you points for it. The next one-- yeah?",
    "start": "4098870",
    "end": "4104957"
  },
  {
    "text": "AUDIENCE: By emptying-- by\nbuilding an empty linked list-- JASON KU: Mm-hmm. AUDIENCE: --it just has\nlike the head and the tail,",
    "start": "4104957",
    "end": "4110460"
  },
  {
    "text": "it's actually none,\nbut, like, it exists? JASON KU: Yeah, right. It's a thing in\nmemory that we store.",
    "start": "4110460",
    "end": "4115880"
  },
  {
    "text": "It has a pointer to\na head and a tail. Those are none right now. But we will add things to it.",
    "start": "4115880",
    "end": "4122630"
  },
  {
    "text": "OK. So the second one, add name. ",
    "start": "4122630",
    "end": "4130910"
  },
  {
    "text": "What do we have to say? We have to update this\ndata structure so it maintains it's a variance.",
    "start": "4130910",
    "end": "4136580"
  },
  {
    "text": "I have to-- usually I\nstart with one of them. I get to a point\nwhere, oh, I really",
    "start": "4136580",
    "end": "4143299"
  },
  {
    "text": "should have updated\nthe other one first. So sometimes it's hit or miss. What do I want to do here?",
    "start": "4143300",
    "end": "4148720"
  },
  {
    "text": "Well, I have no idea where\nin this sequence this is. So I kind of have\nto go here first.",
    "start": "4148720",
    "end": "4156470"
  },
  {
    "text": "Oh, sorry. Adding a guy, I\ncould do either way. I know-- where is\nhe going to go?",
    "start": "4156470",
    "end": "4163770"
  },
  {
    "text": "End of the list. So I just stick it there. So add x to end of sequence.",
    "start": "4163770",
    "end": "4176689"
  },
  {
    "text": "So I come to a\ntrick that I like. Sequence, set.",
    "start": "4176689",
    "end": "4183950"
  },
  {
    "text": "OK. In this instance I only have\none sequence and one set. And so calling them sequence\nand set, probably fine.",
    "start": "4183950",
    "end": "4190388"
  },
  {
    "text": "I'm not going to\nconfuse the greater, I'm not going to confuse myself. But when I have more\nthan one of these things,",
    "start": "4190388",
    "end": "4196970"
  },
  {
    "text": "or even for brevity on an exam\nwhere I'm time-constrained, give these things a name.",
    "start": "4196970",
    "end": "4203690"
  },
  {
    "text": "Say this is a sequence\nC and M. I don't know. I see customer here, I\nsee a map here, so maybe.",
    "start": "4203690",
    "end": "4212240"
  },
  {
    "text": "I don't know. But just give them\na letter, then we can follow you much more\nclearly and you can refer",
    "start": "4212240",
    "end": "4217970"
  },
  {
    "text": "to these things more precisely. So end of C.",
    "start": "4217970",
    "end": "4225930"
  },
  {
    "text": "Then what do we have to do? I fix this guy, this guy's good. Now I have to fix this guy.",
    "start": "4225930",
    "end": "4232570"
  },
  {
    "text": "So I add x to the set and\nI map it back to that node",
    "start": "4232570",
    "end": "4237599"
  },
  {
    "text": "that I just came from. I could store it in\na temporary variable. Add x to M pointing\nto n node v to v. OK.",
    "start": "4237600",
    "end": "4259030"
  },
  {
    "text": "Cool? So, I added my x to the end of\nC into a node v. I'm kind of--",
    "start": "4259030",
    "end": "4268050"
  },
  {
    "text": "I labeled it so I can\nreference it later. And in code, I would probably\nremember what that node was.",
    "start": "4268050",
    "end": "4275610"
  },
  {
    "text": "Add x to M pointing\nto that node, and now I've maintained\nmy invariant.",
    "start": "4275610",
    "end": "4281370"
  },
  {
    "text": "Great. AUDIENCE: Maybe [INAUDIBLE]. JASON KU: Add key x.",
    "start": "4281370",
    "end": "4288370"
  },
  {
    "text": "Or add x to M having the\nkey of x point to that node.",
    "start": "4288370",
    "end": "4295360"
  },
  {
    "text": "Does that make sense? There's a subtlety there. 3 3, we have remove--",
    "start": "4295360",
    "end": "4303100"
  },
  {
    "text": "I don't remember\nthe name, whatever. OK. So here, we have to do--",
    "start": "4303100",
    "end": "4308590"
  },
  {
    "text": "order matters. I don't know where it\nis in the sequence, but I'm going to look\nit up in the set,",
    "start": "4308590",
    "end": "4314800"
  },
  {
    "text": "and I'm going to\nremove it from the set, and I'm going to look\nat whatever it points to",
    "start": "4314800",
    "end": "4320170"
  },
  {
    "text": "and remove it from the sequence. I'm running out of\ntime a little bit here, so I'm not going to\nwrite all that down.",
    "start": "4320170",
    "end": "4325597"
  },
  {
    "text": "You guys understand\nwhat that means. Here, we're using\nthe fact that it's a doubly-linked list so that\nwe can relink things together.",
    "start": "4325597",
    "end": "4332739"
  },
  {
    "text": "You don't have to tell\nme the three points-- the previous pointer of my\nnext thing to the next-- the--",
    "start": "4332740",
    "end": "4340840"
  },
  {
    "text": "right? You don't have to\ntell me how to relink those pointers because we did\nthat already in problem set 1",
    "start": "4340840",
    "end": "4347110"
  },
  {
    "text": "or whatever. AUDIENCE: Just in general, as\nyou're in a situation for where you're using not a\ndoubly-linked list--",
    "start": "4347110",
    "end": "4352342"
  },
  {
    "text": "JASON KU: Mm-hmm. AUDIENCE: where\njust a linked list would be better than\na doubly linked list because it seems like it\nalways solves problems. JASON KU: Yeah.",
    "start": "4352342",
    "end": "4357845"
  },
  {
    "text": "Doubly-linked lists is\nalmost always strictly better than a singly-linked\nin theory problems. So yeah, use it.",
    "start": "4357845",
    "end": "4367540"
  },
  {
    "text": "OK. And then seat, last one. ",
    "start": "4367540",
    "end": "4375090"
  },
  {
    "text": "That's just take the\nfront of the sequence, remove it, change\nthe head around,",
    "start": "4375090",
    "end": "4383760"
  },
  {
    "text": "but I get that you\ncan delete first. You're reducing to the\ninterface that we had.",
    "start": "4383760",
    "end": "4389350"
  },
  {
    "text": "You're deleting first\non the sequence. But now, we have a situation.",
    "start": "4389350",
    "end": "4394870"
  },
  {
    "text": "I deleted the first guy. How do I know who\nthe first guy is? Well, I'm storing\nits name in there.",
    "start": "4394870",
    "end": "4401320"
  },
  {
    "text": "I'm storing the names\nof these customers. So I know who is at the\nfront, I look in this set data",
    "start": "4401320",
    "end": "4407220"
  },
  {
    "text": "structure, and I\nremove that entry. Does that makes sense? Because now, I no longer need\nto maintain where he goes.",
    "start": "4407220",
    "end": "4414270"
  },
  {
    "text": "Now in actuality,\nI could just not update this set data structure.",
    "start": "4414270",
    "end": "4420790"
  },
  {
    "text": "But if I do that, then,\nwell, my running times are still linear time. I'm not giving you\na bound on space.",
    "start": "4420790",
    "end": "4426900"
  },
  {
    "text": "I'm still constant time, sorry. So you don't actually\nhave to do that removal,",
    "start": "4426900",
    "end": "4433320"
  },
  {
    "text": "but if that customer\ncomes back and wants to get on the wait list again,\nthere are things to consider.",
    "start": "4433320",
    "end": "4440565"
  },
  {
    "text": " OK. So that's that question.",
    "start": "4440565",
    "end": "4447130"
  },
  {
    "text": "Next question, last\n10 minutes or so. Raniy Research.",
    "start": "4447130",
    "end": "4452790"
  },
  {
    "text": "This is a problem that\npeople had nightmares about.",
    "start": "4452790",
    "end": "4460260"
  },
  {
    "text": "OK, so basically we've\ngot a Meather Wan.",
    "start": "4460260",
    "end": "4465329"
  },
  {
    "text": "He's a weatherman. A scientist who studies\nglobal rainfall.",
    "start": "4465330",
    "end": "4470850"
  },
  {
    "text": "And he's got a bunch\nof sensors everywhere. And each one can post to\nthe cloud or something",
    "start": "4470850",
    "end": "4477540"
  },
  {
    "text": "a measurement that's\nof the form a triple of integers r, l,\nand t where r is",
    "start": "4477540",
    "end": "4483150"
  },
  {
    "text": "a positive amount of\nrainfall, an integer; a latitude, an integer\nagain; and at a time.",
    "start": "4483150",
    "end": "4491469"
  },
  {
    "text": "We got three things\nto deal with here. Yuck. ",
    "start": "4491470",
    "end": "4496478"
  },
  {
    "text": "But they're all integers. And don't be like,\noh, well Jason, latitudes are pretty small.",
    "start": "4496478",
    "end": "4503260"
  },
  {
    "text": "So I can assume these\nintegers are small and these things\ntake constant time.",
    "start": "4503260",
    "end": "4509010"
  },
  {
    "text": "I'm not specifying to\nyou a resolution at which I'm measuring these integers. And I haven't given you a bound\nbetween what that resolution is",
    "start": "4509010",
    "end": "4516630"
  },
  {
    "text": "compared to the number of\nmeasurements that I have, so I don't play those games. OK. The peak rainfall\nat a given latitude",
    "start": "4516630",
    "end": "4524880"
  },
  {
    "text": "since a particular time\nis the maximum rainfall at any measurement at that\nlatitude measured at a time",
    "start": "4524880",
    "end": "4533520"
  },
  {
    "text": "greater than or\nequal to that time. Does that make sense? Or 0 if there aren't\nmeasurements at that latitude.",
    "start": "4533520",
    "end": "4539940"
  },
  {
    "text": "OK. To score after the time-- or\nbefore the time or whatever. Describe a database that we\ncan build it in constant time.",
    "start": "4539940",
    "end": "4550110"
  },
  {
    "text": "Is an empty one-- I added this one\nbecause we weren't good about that last spring.",
    "start": "4550110",
    "end": "4555810"
  },
  {
    "text": "Record data. We give you a triplet. And then-- so record data,\nfor it to be correct,",
    "start": "4555810",
    "end": "4562170"
  },
  {
    "text": "I just have to maintain\nthat information. For these kind of\nupdates, I don't--",
    "start": "4562170",
    "end": "4567809"
  },
  {
    "text": "it's really hard for me to argue\nthat this thing is correct. Because I just-- I throw it at the\ndatabase, the database",
    "start": "4567810",
    "end": "4575130"
  },
  {
    "text": "doesn't have to give\nanything back to me. So the important thing\nhere about correctness",
    "start": "4575130",
    "end": "4580980"
  },
  {
    "text": "is that peak rainfall gives\nit to me and it gives it to me in the time bound\nthat I'm looking for. And peak rainfall is\nreturning the peak rainfall",
    "start": "4580980",
    "end": "4588030"
  },
  {
    "text": "at a particular\nlatitude since t. So we have three things.",
    "start": "4588030",
    "end": "4593790"
  },
  {
    "text": "Yep? AUDIENCE: Given\nthat you never have to return a single measurement,\nis that [INAUDIBLE]",
    "start": "4593790",
    "end": "4599290"
  },
  {
    "text": "have a record of it? JASON KU: There's the\npotential that you don't need to store\nall of the information",
    "start": "4599290",
    "end": "4604600"
  },
  {
    "text": "because all we're\ndoing is giving you back R's, essentially. It's possible that you don't\nneed to store the latitudes",
    "start": "4604600",
    "end": "4612670"
  },
  {
    "text": "or times at all. You don't even need\nto store the triplets. Now in reality, I'm querying\non the latitudes and the times.",
    "start": "4612670",
    "end": "4620980"
  },
  {
    "text": "So I should store\nthem somewhere, but I might be able\nto compress them. In particular, many things could\nbe stored at the same latitude.",
    "start": "4620980",
    "end": "4631540"
  },
  {
    "text": "That's kind of the whole\npoint of the query. And so we want-- I mean, we may only need to\nstore that latitude once.",
    "start": "4631540",
    "end": "4638120"
  },
  {
    "text": "Does that makes sense? OK. I'm going to wait\nfor questions until after because I want to get\nto a solution to this problem.",
    "start": "4638120",
    "end": "4645140"
  },
  {
    "text": "All right. So what do we need to do? We need to be able\nto add things. And I want to return.",
    "start": "4645140",
    "end": "4651110"
  },
  {
    "text": "So return, I'm going to\nhave to query something, and then I'm going\nto return something. So return peak rainfall at\nlatitude l since time t.",
    "start": "4651110",
    "end": "4660828"
  },
  {
    "text": "What do I care about\nin a particular query? I only care about all the\nthings at l, at a latitude l.",
    "start": "4660828",
    "end": "4668860"
  },
  {
    "text": "So really, this isn't\nsuch an interesting thing, but I want to be able to have\nmaybe many data structures, one",
    "start": "4668860",
    "end": "4675850"
  },
  {
    "text": "associated with each L.\nDoes that make sense? And how can I find\none in each L quickly?",
    "start": "4675850",
    "end": "4685210"
  },
  {
    "text": "Put it in a dictionary. What's my time bound? Worst case log n. So what data structure do I use\nfor that set data structure?",
    "start": "4685210",
    "end": "4691429"
  },
  {
    "text": "A set AVL. So you're going to\nfirst have a set AVL--",
    "start": "4691430",
    "end": "4697180"
  },
  {
    "text": " say, L-- mapping latitudes to--",
    "start": "4697180",
    "end": "4713500"
  },
  {
    "text": "well, now we have\nmore data structures. I want to store a lot\nof the things that",
    "start": "4713500",
    "end": "4718570"
  },
  {
    "text": "have the same latitudes\nin another data structure. The ones probably\nstoring the times",
    "start": "4718570",
    "end": "4725230"
  },
  {
    "text": "in the rainfalls of\nall those measurements. Yeah? Yeah. AUDIENCE: A hash table.",
    "start": "4725230",
    "end": "4731080"
  },
  {
    "text": "JASON KU: A hash table. OK, so what kinds\nof query am I going to want to do on the things\nat the same latitude?",
    "start": "4731080",
    "end": "4737030"
  },
  {
    "text": "AUDIENCE: You're going\nto want to get the times. JASON KU: I'm going to\nwant to get the times, but more than that, I'm doing\nkind of an ordered query.",
    "start": "4737030",
    "end": "4744520"
  },
  {
    "text": "I need the things less\nthan a certain time. Greater, sorry. AUDIENCE: So it's really--",
    "start": "4744520",
    "end": "4750160"
  },
  {
    "text": "JASON KU: Just a second. AUDIENCE: Could you do\nlike an AVL for the time and an AVL for the rain? JASON KU: OK.",
    "start": "4750160",
    "end": "4755620"
  },
  {
    "text": "Do I care about an\nAVL for the rain? I mean, looking up\non the rainfall.",
    "start": "4755620",
    "end": "4762348"
  },
  {
    "text": "AUDIENCE: No. JASON KU: No. So I'm going to go ahead\nand store these things in a time-sorted AVL to\nmapping latitude l to--",
    "start": "4762348",
    "end": "4777369"
  },
  {
    "text": "I'm going to call this\ndata structure a time data structure. I'm going to say it's t of l.",
    "start": "4777370",
    "end": "4783430"
  },
  {
    "text": "That kind of looks\nlike a recurrence, so it's a little\nirking me right now, but I don't have\nanything better. All right. So now each one of these\ntime data structures",
    "start": "4783430",
    "end": "4791679"
  },
  {
    "text": "is a set AVL mapping time\nto the rainfall measurement.",
    "start": "4791680",
    "end": "4808840"
  },
  {
    "text": "All right. So that's going to-- if my query was, return\nthe peak rainfall--",
    "start": "4808840",
    "end": "4815060"
  },
  {
    "text": "sorry. Return the rainfall of the thing\nwith latitude l and time t,",
    "start": "4815060",
    "end": "4822820"
  },
  {
    "text": "we'd be done, kind of. You'd know how to\nsupport that query. To insert things,\nI insert things",
    "start": "4822820",
    "end": "4829270"
  },
  {
    "text": "into both data structures,\nand I just look it up. The one complication\nhere is that I'm not",
    "start": "4829270",
    "end": "4834880"
  },
  {
    "text": "asking for what is the\nrainfall at a particular time. I want to know what the maximum\nrainfall is up to this time.",
    "start": "4834880",
    "end": "4844180"
  },
  {
    "text": "OK. So max heap's good if I\nwant to know the global max. But here, I want to know the\nmax bounded by a certain range.",
    "start": "4844180",
    "end": "4854200"
  },
  {
    "text": "So we're going to-- you can ask me\nquestions after this, we're running out of\ntime a little bit.",
    "start": "4854200",
    "end": "4860350"
  },
  {
    "text": "So anyone have an idea for how-- yeah? AUDIENCE: Could you just\naugment the AVL with the max?",
    "start": "4860350",
    "end": "4866723"
  },
  {
    "text": "JASON KU: OK. AUDIENCE: And you can just\nlook at the right child and then just look at\nthe max at that point? JASON KU: Ah, OK. So what your\ncolleague is saying,",
    "start": "4866723",
    "end": "4872920"
  },
  {
    "text": "if we augment by the\nmax r in my subtree,",
    "start": "4872920",
    "end": "4878110"
  },
  {
    "text": "maybe we can use that to\nfigure out this query. Because we're ordered\non t, right we",
    "start": "4878110",
    "end": "4884409"
  },
  {
    "text": "have this nice monotonic\nproperty that everything that's going to be in my query--",
    "start": "4884410",
    "end": "4890980"
  },
  {
    "text": "everything to the right\nof a certain time-- if my time is above t\nat a particular node,",
    "start": "4890980",
    "end": "4901700"
  },
  {
    "text": "in everything in\nthe right subtree is also above that t because\nof the order of my set's data",
    "start": "4901700",
    "end": "4908869"
  },
  {
    "text": "structure, because\nI'm ordered on times. So there's maybe the\npossibility that if I",
    "start": "4908870",
    "end": "4914239"
  },
  {
    "text": "look to my right\nsubtree, I can not do work all over\nhere by just looking",
    "start": "4914240",
    "end": "4919910"
  },
  {
    "text": "at the max in that subtree. so That's an idea of, let's\nsay, augmented by subtree max r.",
    "start": "4919910",
    "end": "4935000"
  },
  {
    "text": "You probably want to\ngive this a name as well. So like v max where v\nis a node in my thing.",
    "start": "4935000",
    "end": "4944840"
  },
  {
    "text": "And I want to show how to\nsupport this, how I can compute that from its children.",
    "start": "4944840",
    "end": "4949980"
  },
  {
    "text": "So how do I actually\nsupport this query, I can think of it recursively.",
    "start": "4949980",
    "end": "4957380"
  },
  {
    "text": "I have a couple of cases. If I'm at a v here, I want to\ndefine a recursive function",
    "start": "4957380",
    "end": "4964190"
  },
  {
    "text": "that's called peak rainfall\nof a given node lower bounded",
    "start": "4964190",
    "end": "4972199"
  },
  {
    "text": "by a t.  So if I'm here,\nthere's two cases.",
    "start": "4972200",
    "end": "4979190"
  },
  {
    "text": "Either my t, my time is bigger\nor smaller-- is in my range or out of my range.",
    "start": "4979190",
    "end": "4986690"
  },
  {
    "text": "If it's out of my\nrange, what do I do? It's lower than my time bound.",
    "start": "4986690",
    "end": "4992120"
  },
  {
    "text": "I can just recursively call\nthis function on this node. Because I know that\nanything is going",
    "start": "4992120",
    "end": "4999290"
  },
  {
    "text": "to be down here\nthat I care about. And that's just one\nrecursive call down the tree.",
    "start": "4999290",
    "end": "5006400"
  },
  {
    "text": "And so if I only limit myself\nto one recursive call down the tree, I'm always\ngoing down each time.",
    "start": "5006400",
    "end": "5012490"
  },
  {
    "text": "This is going to take\nlogarithmic time. So that's the first case,\nthat's the easy case.",
    "start": "5012490",
    "end": "5017739"
  },
  {
    "text": "This thing is not in range, I\nreturn recursively the thing to my right. What's the other case?",
    "start": "5017740",
    "end": "5023050"
  },
  {
    "text": "I'm in my range. Well now I could return,\nrecursively call both sides.",
    "start": "5023050",
    "end": "5031239"
  },
  {
    "text": "Because that's what this\npeak is talking about. What's my peak rainfall? But if I do that, if I\ncall it here recursively",
    "start": "5031240",
    "end": "5037720"
  },
  {
    "text": "and I call it here recursively,\nthat could take linear time. I might touch every\nnode in my tree.",
    "start": "5037720",
    "end": "5043600"
  },
  {
    "text": "So why did I do\nthis augmentation? So I don't have to\ndo work on this node. I just return the maximum\nrainfall in this subtree,",
    "start": "5043600",
    "end": "5052780"
  },
  {
    "text": "and then recurse on this side. So I did constant\nwork on this side,",
    "start": "5052780",
    "end": "5058060"
  },
  {
    "text": "I did one recursive\ncall down here which you could go to the\nbottom, but that's OK, I can afford to go to\nthe bottom of the tree.",
    "start": "5058060",
    "end": "5064863"
  },
  {
    "text": "Does that makes sense? And if I don't have either\nsubtree, then I'm done. If at any time.",
    "start": "5064863",
    "end": "5071420"
  },
  {
    "text": "I don't have the node\nthat I'm supposed to recurse on, I take the\nmax of this subtree, myself,",
    "start": "5071420",
    "end": "5080500"
  },
  {
    "text": "and whatever the recursive\nreturn value is here. And comparing three values,\nreturning their max.",
    "start": "5080500",
    "end": "5087070"
  },
  {
    "text": "Does that make sense? OK. So that's what we call\na one-sided range query.",
    "start": "5087070",
    "end": "5092380"
  },
  {
    "text": "So in the-- I think problem\nsession 4 that I didn't get to,",
    "start": "5092380",
    "end": "5098260"
  },
  {
    "text": "it shows you a way to do this\nfor a two-sided range query where I need to know the maximum\nof all things between two",
    "start": "5098260",
    "end": "5105610"
  },
  {
    "text": "things. But it's really no more\ndifficult than this to finding a recursive function\nthat uses an augmentation so",
    "start": "5105610",
    "end": "5113560"
  },
  {
    "text": "that you don't have to do\nrecursive call on both sides. Does that makes sense?",
    "start": "5113560",
    "end": "5119739"
  },
  {
    "text": "OK. That's going to be it for now,\nand I can take questions after.",
    "start": "5119740",
    "end": "5125830"
  },
  {
    "text": "Thanks for coming. ",
    "start": "5125830",
    "end": "5133002"
  }
]