[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "7696"
  },
  {
    "text": " ANA BELL: Let's get started.",
    "start": "7696",
    "end": "13100"
  },
  {
    "text": "So today's lecture\nwill be super short. We've got a 45-minute quiz on\nobject-oriented programming",
    "start": "13100",
    "end": "20230"
  },
  {
    "text": "classes, that kind of stuff. So I wanted to give you\nguys an extra bit of time to work through three\nprogramming problems.",
    "start": "20230",
    "end": "26710"
  },
  {
    "text": "But the actual lecture part-- we're going to switch\ngears a little bit.",
    "start": "26710",
    "end": "32770"
  },
  {
    "text": "And we're going to start\ntalking about something more theoretical, which\nis how to figure out",
    "start": "32770",
    "end": "38980"
  },
  {
    "text": "whether the programs\nwe write are efficient and how efficient are they. OK. So we're going to do that\ntoday using the idea of timing",
    "start": "38980",
    "end": "47980"
  },
  {
    "text": "our programs and then counting\nthe number of operations, as I'll describe\nin a little bit. But first of all, a\nlittle bit of motivation.",
    "start": "47980",
    "end": "54020"
  },
  {
    "text": "So why do we actually\ncare about this topic? It's a topic that's\na high research",
    "start": "54020",
    "end": "61390"
  },
  {
    "text": "area in computer science. So far in this\nclass though, we've emphasized correctness, right? In problem sets, the\nunit tests check for",
    "start": "61390",
    "end": "69070"
  },
  {
    "text": "whether that the programs\nyou wrote were correct. In quizzes, we basically look\nat how many test cases you pass,",
    "start": "69070",
    "end": "76579"
  },
  {
    "text": "right, and to\ndetermine the grade. But these days, we\nactually have a whole bunch",
    "start": "76580",
    "end": "82340"
  },
  {
    "text": "of data coming at us, right? So we have a lot of data\nthat we need to analyze, we need to read, we\nneed to visualize,",
    "start": "82340",
    "end": "89720"
  },
  {
    "text": "we need to make sense of. And so the programs\nthat we write, yes, they have to be correct,\nwhich is a large part of it.",
    "start": "89720",
    "end": "96900"
  },
  {
    "text": "But they also have\nto be fast, right? So if it takes a year to\nanalyze a bunch of information",
    "start": "96900",
    "end": "104930"
  },
  {
    "text": "on YouTube videos, nobody's\ngoing to really want to wait that long, right? And so we're going to emphasize\nin the next three or four",
    "start": "104930",
    "end": "113310"
  },
  {
    "text": "lectures-- I forget exactly how many--\nbut the next little section in this class, the idea\nof how to determine",
    "start": "113310",
    "end": "119570"
  },
  {
    "text": "the efficiency of our programs. So when we're talking\nabout efficiency, we can talk about the time\nefficiency of programs",
    "start": "119570",
    "end": "127220"
  },
  {
    "text": "and also the space\nefficiency of programs. And usually, there's going to\nbe a tradeoff between these two.",
    "start": "127220",
    "end": "133350"
  },
  {
    "text": "So very rarely\nthese days can you come up with an algorithm\nthat's both efficient in time",
    "start": "133350",
    "end": "138710"
  },
  {
    "text": "and space compared to algorithms\nthat are already out there. So usually, there's a tradeoff. And the best example is the\none that we saw with Fibonacci.",
    "start": "138710",
    "end": "148400"
  },
  {
    "text": "So we saw a code that was\nrecursive to calculate Fibonacci. So Fibonacci of n was\nFibonacci of n minus 1",
    "start": "148400",
    "end": "155672"
  },
  {
    "text": "plus Fibonacci of\nn minus 2, right? That was our recursive step. That program that was\nrecursive took something",
    "start": "155672",
    "end": "163709"
  },
  {
    "text": "like 30 million steps\nto calculate Fibonacci of 30-something, right?",
    "start": "163710",
    "end": "168780"
  },
  {
    "text": "30 million recursive calls,\nwhich was pretty slow. It took a couple\nseconds for it to run.",
    "start": "168780",
    "end": "174840"
  },
  {
    "text": "But then we saw a\nversion with memoization. No, there's no R missing there. It's just memoization,\nsort of the process",
    "start": "174840",
    "end": "181440"
  },
  {
    "text": "of keeping a memo\nthrough a dictionary in that particular case. And the memoization idea was\nthat we would take some values",
    "start": "181440",
    "end": "190290"
  },
  {
    "text": "that we calculate. And as we calculate them,\nstore them in the memo. So in the memoization\nexample, we",
    "start": "190290",
    "end": "198150"
  },
  {
    "text": "had given up some of\nour memory, right, to store these values so that\nwe didn't have to compute them.",
    "start": "198150",
    "end": "204459"
  },
  {
    "text": "And in the process\nof doing, so we had a program that ran really,\nreally quick, much quicker",
    "start": "204460",
    "end": "210060"
  },
  {
    "text": "than the plain recursive version\nthat we had originally seen. So there's this\ntradeoff, where you",
    "start": "210060",
    "end": "215550"
  },
  {
    "text": "have a program that's fast\nbut might store some values and take up more memory,\nor a program that",
    "start": "215550",
    "end": "221080"
  },
  {
    "text": "doesn't store anything but then\nis not going to be as fast. It's going to be slower because\nit needs to keep computing",
    "start": "221080",
    "end": "227530"
  },
  {
    "text": "a bunch of different values. So what we're going\nto do in this lecture is show you a very simple\nway of figuring out",
    "start": "227530",
    "end": "235763"
  },
  {
    "text": "how efficient our\nprograms are, which is we're just going to time them. And then we're going to count\nthe number of operations",
    "start": "235763",
    "end": "241540"
  },
  {
    "text": "that these programs take. But we're going to do\nso sort of with the idea in the back of our\nmind that there's",
    "start": "241540",
    "end": "246880"
  },
  {
    "text": "going to be a better\nway to figure out the efficiency of\nthese programs. And ultimately, we\ndon't really want",
    "start": "246880",
    "end": "252880"
  },
  {
    "text": "to figure out the efficiency\nof an implementation. An implementation means you\nimplement a program that",
    "start": "252880",
    "end": "262150"
  },
  {
    "text": "finds a sum using a while loop. I implement the program to\nfind a sum using a for loop. Those are two different\nimplementations.",
    "start": "262150",
    "end": "268630"
  },
  {
    "text": "But at their core, the\nalgorithms behind the scenes is going to be the same. And so what we want\nto do is to try",
    "start": "268630",
    "end": "276010"
  },
  {
    "text": "to figure out how to evaluate\nalgorithms as opposed to these different\nimplementations, because each one of\nyou is going to come up",
    "start": "276010",
    "end": "281470"
  },
  {
    "text": "with a completely different\nimplementation for today's quiz. But I don't want\nto evaluate that. I would like to evaluate the\nalgorithms behind the scenes.",
    "start": "281470",
    "end": "289819"
  },
  {
    "text": "OK. So we're going to do-- like\nI mentioned, we're going to, today, look at measuring\nhow long our program takes",
    "start": "289820",
    "end": "297080"
  },
  {
    "text": "with an actual timer. And then we're\ngoing to also count how many operations\nour program takes.",
    "start": "297080",
    "end": "304180"
  },
  {
    "text": "And then we're not going to look\nat this other abstract notion, we're going to look\nat that next lecture.",
    "start": "304180",
    "end": "310979"
  },
  {
    "text": "So today's lecture, we're\ngoing to use another module. We've been looking at modules\nin the past couple of lectures",
    "start": "310980",
    "end": "317480"
  },
  {
    "text": "already. We've seen the random\nmodule, which helps us deal with random numbers.",
    "start": "317480",
    "end": "323090"
  },
  {
    "text": "We've seen the\ndatetime module, which helps us deal with, or\nwas it dateutil, something",
    "start": "323090",
    "end": "329630"
  },
  {
    "text": "like that, which helps us\ndeal with datetime objects and converting\ndates into objects",
    "start": "329630",
    "end": "337520"
  },
  {
    "text": "that were nicely usable. Today, we're going to\nuse the time module--",
    "start": "337520",
    "end": "342680"
  },
  {
    "text": "right here-- which will help\nus deal with the system clock. So if we're timing\nfunctions that we run,",
    "start": "342680",
    "end": "349509"
  },
  {
    "text": "we're going to want to access\nthe system clock to figure out exactly what time we\nstarted this function and what time we\nended the function.",
    "start": "349510",
    "end": "356690"
  },
  {
    "text": "So just a little thing-- you probably already\nknow this-- how to call these functions\nwithin these modules.",
    "start": "356690",
    "end": "362870"
  },
  {
    "text": "So the modules basically\nbring in a whole bunch of functions and maybe\nobjects and things like that related to one topic\nor one subject into your code.",
    "start": "362870",
    "end": "371740"
  },
  {
    "text": "And then to run the\nfunctions in your code, you just use this dot\nnotation on the module name.",
    "start": "371740",
    "end": "378710"
  },
  {
    "text": "So if I wanted to use the sine\nfunction from the math module, I would just say math.sine.",
    "start": "378710",
    "end": "384160"
  },
  {
    "text": "And then I have access\nto that sine function. OK. So let's start looking\nat timing of program.",
    "start": "384160",
    "end": "391990"
  },
  {
    "text": "The simplest way to figure\nout how fast the program runs. So we're going to\nuse the time module.",
    "start": "391990",
    "end": "398250"
  },
  {
    "text": "So I'm importing it here. And when I do that,\nPython is going to bring in all of these\nfunctions related to the time.",
    "start": "398250",
    "end": "404130"
  },
  {
    "text": "Now we're going to look in this\nparticular lecture at three different functions. And we're going to time\nthem, each of them.",
    "start": "404130",
    "end": "410340"
  },
  {
    "text": "Next lecture, we're going\nto look at a whole bunch more functions, just to give\nyou a little bit more practice with timing and\ncounting operations.",
    "start": "410340",
    "end": "416700"
  },
  {
    "text": "And then we'll introduce\na more abstract notion of this order of growth. So the three functions\nwe're going to look at",
    "start": "416700",
    "end": "423210"
  },
  {
    "text": "are these ones-- so Celsius to\nFahrenheit, mysum, and square. So Celsius to Fahrenheit--\npretty self-explanatory.",
    "start": "423210",
    "end": "431310"
  },
  {
    "text": "It takes in one parameter,\nthe number for a Celsius temperature, and converts\nit to Fahrenheit. So we did this lecture one.",
    "start": "431310",
    "end": "438150"
  },
  {
    "text": "Just using the formula. This function, mysum,\nwill take in a number x--",
    "start": "438150",
    "end": "444630"
  },
  {
    "text": "so 7, or 10, or\n100, whatever it is. And it uses a loop,\nso computationally",
    "start": "444630",
    "end": "451919"
  },
  {
    "text": "uses this loop that iterates\nthrough each number from 0 all the way up to including\nx, and keeps a running total.",
    "start": "451920",
    "end": "459190"
  },
  {
    "text": "So it adds I to itself to\nthe total and returns it. So of course, we\ncould have rewritten",
    "start": "459190",
    "end": "464470"
  },
  {
    "text": "this in a more efficient\nway by using the formula to calculate the sum what\nis n times n plus 1 over 2.",
    "start": "464470",
    "end": "470830"
  },
  {
    "text": "But here, we're just doing\nit using this for loop. And then lastly, is this\nfunction called square.",
    "start": "470830",
    "end": "479710"
  },
  {
    "text": "And this one is going to\nbe even more inefficient. We're going to\ncalculate n squared.",
    "start": "479710",
    "end": "484970"
  },
  {
    "text": "So the parameter here\nn will be squared. But we're not doing return\nn times n or return n",
    "start": "484970",
    "end": "492640"
  },
  {
    "text": "star, star two. We're not doing any of that. We're actually going to\nuse two nested loops.",
    "start": "492640",
    "end": "498640"
  },
  {
    "text": "So I've got an outer for loop\nthat goes through the numbers 0 to n, not including. An inner for loop that\ngoes through the numbers",
    "start": "498640",
    "end": "505480"
  },
  {
    "text": "0 to n, not including. And this square sum here\nadds 1 to itself every time.",
    "start": "505480",
    "end": "511820"
  },
  {
    "text": "So effectively, we're\ngoing through and adding 1 to that sum n squared times.",
    "start": "511820",
    "end": "518830"
  },
  {
    "text": "So super inefficient. But this is where we're at. And so how do we actually\ntime these functions?",
    "start": "518830",
    "end": "526910"
  },
  {
    "text": "So here's-- this is basically\nsome lines of code in a file.",
    "start": "526910",
    "end": "532490"
  },
  {
    "text": "So I've got the time\nmodule imported here. I've got the function here.",
    "start": "532490",
    "end": "537579"
  },
  {
    "text": "I'm going to call\nthe time module, and the time function\nwithin the datetime module.",
    "start": "537580",
    "end": "545210"
  },
  {
    "text": "So this tells me the\nnumber of seconds that have passed since January 1, 1970.",
    "start": "545210",
    "end": "551240"
  },
  {
    "text": "That's called the epoch. So the beginning of\ntime in computer speak.",
    "start": "551240",
    "end": "556800"
  },
  {
    "text": "So if I grab how many seconds\nhave passed since that time, then tstart stores\nthat number of seconds.",
    "start": "556800",
    "end": "563959"
  },
  {
    "text": "Then I'm going to run\nmy function, Celsius to Fahrenheit 37. And then I'm going to get\nthe time again down here",
    "start": "563960",
    "end": "571160"
  },
  {
    "text": "and subtract the time right\nnow, after the function has finished, minus the\ntime it was right",
    "start": "571160",
    "end": "577280"
  },
  {
    "text": "before I started my function. So that gives me the DT. And then I just print that out.",
    "start": "577280",
    "end": "584820"
  },
  {
    "text": "So we can run it together. The way I'm going to run it is\nby actually doing a little bit",
    "start": "584820",
    "end": "591660"
  },
  {
    "text": "of modularization to this code. So I have this\nfunction, and this is the only function\nI'm actually",
    "start": "591660",
    "end": "597510"
  },
  {
    "text": "going to run down here. It's my-- I call\nit a time wrapper. It's a wrapper function.",
    "start": "597510",
    "end": "604939"
  },
  {
    "text": "And it takes in two parameters. The first is the actual\nfunction I want to run.",
    "start": "604940",
    "end": "610139"
  },
  {
    "text": "So I'll show you\ndown here, you can see I'm running the time\nwrapper with the name, literally",
    "start": "610140",
    "end": "615255"
  },
  {
    "text": "the name of the\nfunction I want to run. This is not a function call. It's just the name\nof my function.",
    "start": "615255",
    "end": "620650"
  },
  {
    "text": "So that's the first parameter. And the second parameter is a\nwhole bunch of different inputs I want to run the function with.",
    "start": "620650",
    "end": "627269"
  },
  {
    "text": "So this LN is created up here. And it just makes for me the\nlist of all of these inputs.",
    "start": "627270",
    "end": "634150"
  },
  {
    "text": "So I'm going to run Celsius\nto Fahrenheit with a number 1, Celsius to Fahrenheit\nwith the number",
    "start": "634150",
    "end": "639420"
  },
  {
    "text": "10, Celsius to Fahrenheit\nwith 100 and so on. So these will be all my\ninputs to my function. ",
    "start": "639420",
    "end": "646660"
  },
  {
    "text": "And so when I call\nthis wrapper, Python is just going to replace f with\nthe function that I'm actually",
    "start": "646660",
    "end": "652020"
  },
  {
    "text": "running, so Celsius to\nFahrenheit, or mysum or square. And you can see here for each\none of the different inputs I'm",
    "start": "652020",
    "end": "658620"
  },
  {
    "text": "going to grab the\ntime, run the function, grab the time again\nto get the DT,",
    "start": "658620",
    "end": "665070"
  },
  {
    "text": "and then print how long it took. So I'll show you\nwhat that looks like. So here I ran Celsius to\nFahrenheit with inputs 1, 10,",
    "start": "665070",
    "end": "674070"
  },
  {
    "text": "100, 1,000, 10,000, and so on.",
    "start": "674070",
    "end": "679580"
  },
  {
    "text": "It was really fast. It took zero seconds\nevery single time.",
    "start": "679580",
    "end": "685380"
  },
  {
    "text": "So no matter what\nthe input, 0 seconds. So fast that Python\ndidn't even tell me",
    "start": "685380",
    "end": "690560"
  },
  {
    "text": "exactly how slow it was, 10\nto the negative 9 or whatever, just 0 seconds.",
    "start": "690560",
    "end": "696449"
  },
  {
    "text": "And that's in part\nto the time function, but we'll leave it at that. It's just very fast.",
    "start": "696450",
    "end": "701730"
  },
  {
    "text": "OK, how about the next function? Let's do mysum.",
    "start": "701730",
    "end": "708310"
  },
  {
    "text": "So mysum is not just doing\ncalculations, it has a loop. That's a function of the input.",
    "start": "708310",
    "end": "714970"
  },
  {
    "text": "So our input changes. And you might have noticed\nthat as our input got bigger, we actually had to wait a\nlittle while for this result",
    "start": "714970",
    "end": "722160"
  },
  {
    "text": "to come by. So we see down here,\nor up here, when",
    "start": "722160",
    "end": "727470"
  },
  {
    "text": "the input is pretty small-- yes, it took 0 seconds. It's so fast that it\ndidn't even register it.",
    "start": "727470",
    "end": "733350"
  },
  {
    "text": "But at some point, we started\nto get actual numbers. So with 10,000, it\ntook 0.00099 seconds.",
    "start": "733350",
    "end": "741120"
  },
  {
    "text": "With 100,000, it took 0.01. With-- what is this, 1\nmillion, yeah, with 1 million",
    "start": "741120",
    "end": "748530"
  },
  {
    "text": "it took 0.05 seconds. So we can actually\nsee a little pattern",
    "start": "748530",
    "end": "754570"
  },
  {
    "text": "if we stare at it long enough,\nespecially for the bigger numbers. So down here, these\nfirst two are iffy.",
    "start": "754570",
    "end": "763300"
  },
  {
    "text": "But when we get to a big\nnumber like 1 million, we say it took 0.05 seconds. When we increase the\ninput by 10 to 10 million,",
    "start": "763300",
    "end": "771490"
  },
  {
    "text": "the input took 0.5 seconds. And when we increase the input\nby 10 again, it took 5 seconds.",
    "start": "771490",
    "end": "778149"
  },
  {
    "text": "So we could guess that when we\nincrease the input again by 10, it will take about\n50 seconds to run.",
    "start": "778150",
    "end": "785620"
  },
  {
    "text": "And you can even try\nthat out if you'd like to wait for 50 seconds. ",
    "start": "785620",
    "end": "792920"
  },
  {
    "text": "That's the mysum function. Now what about the square? Remember the square had\nthe two nested for loops--",
    "start": "792920",
    "end": "799550"
  },
  {
    "text": "for, for, and then just a\nregular addition in there. So let's run that.",
    "start": "799550",
    "end": "806149"
  },
  {
    "text": "Pretty fast. Pretty fast. Square of 1,000 is\nalready taking 0.05-- or 0.06 seconds.",
    "start": "806150",
    "end": "814370"
  },
  {
    "text": "Square of 10,000 is\nnow taking 6 seconds. ",
    "start": "814370",
    "end": "820500"
  },
  {
    "text": "What do we notice?  With one more round, if we\nwaited for square of 100,000,",
    "start": "820500",
    "end": "829310"
  },
  {
    "text": "we might be able\nto see a pattern, or we can guess the pattern. Does anyone want to\nwager a guess what",
    "start": "829310",
    "end": "834649"
  },
  {
    "text": "the next number should be\nhere when you think about it? ",
    "start": "834650",
    "end": "842540"
  },
  {
    "text": "AUDIENCE: About 600. ANA BELL: Yeah, about 600. We're going from 0.06\nto maybe about 6.",
    "start": "842540",
    "end": "848500"
  },
  {
    "text": "So, I don't know, we\ncould say about 600. I'm certainly not going\nto wait for 600 seconds.",
    "start": "848500",
    "end": "854528"
  },
  {
    "text": "And I'm actually not going\nto make my computer do that, just in case it crashes.",
    "start": "854528",
    "end": "859670"
  },
  {
    "text": "But yeah, we could\nguess something like, on the order\nof some hundreds,",
    "start": "859670",
    "end": "865010"
  },
  {
    "text": "600, something like that. So that's one thing to notice. The other thing to notice\nis that already at 10,000,",
    "start": "865010",
    "end": "873490"
  },
  {
    "text": "where the input is just 10,000,\nthis took 5 seconds already.",
    "start": "873490",
    "end": "879190"
  },
  {
    "text": "In the previous\nfunction here, mysum, we had to get to 100 million as\nmy input to run for 5 seconds.",
    "start": "879190",
    "end": "889180"
  },
  {
    "text": "So that's also a\nbig difference here. Already, this program square\nis taking a really long time",
    "start": "889180",
    "end": "894490"
  },
  {
    "text": "to run when the input\nis not very big. ",
    "start": "894490",
    "end": "901660"
  },
  {
    "text": "So some things to\nnotice about timing. And as I said, we're\ngoing to look at some more",
    "start": "901660",
    "end": "907180"
  },
  {
    "text": "programs next lecture. I just wanted to give\nyou a general sense of timing programs. First of all, the\ngreen check is good.",
    "start": "907180",
    "end": "915709"
  },
  {
    "text": "We want all these\nto be green checks. The green check is\ngood because if we have different\nalgorithms, they're",
    "start": "915710",
    "end": "921040"
  },
  {
    "text": "going to take a\ndifferent amount of time. The time that it takes for\nthese algorithms to run will be different,\nwhich is good.",
    "start": "921040",
    "end": "928060"
  },
  {
    "text": "But if we have different\nimplementations for the same sort of program,\nfor the same algorithm,",
    "start": "928060",
    "end": "933120"
  },
  {
    "text": "that's also going to give\nus different timings. And really in the long run, I\ndon't really care about that.",
    "start": "933120",
    "end": "938890"
  },
  {
    "text": "What I would really like to\nevaluate is just the algorithm itself. Because when we're\ntalking about algorithms,",
    "start": "938890",
    "end": "945899"
  },
  {
    "text": "there's probably only\na handful of algorithms out there in the world that we\ncan apply to a given problem.",
    "start": "945900",
    "end": "951450"
  },
  {
    "text": "Whereas there's\nprobably thousands of different implementations\nwe can apply to a problem. So for example, you could have\na for loop versus a while loop.",
    "start": "951450",
    "end": "959640"
  },
  {
    "text": "You could have creating\nintermediate variables as an implementation. Or you could have a\nlist comprehension",
    "start": "959640",
    "end": "965850"
  },
  {
    "text": "version of an implementation. But underlying all\nof that is going to be just some algorithm that\nyou're trying to implement.",
    "start": "965850",
    "end": "973580"
  },
  {
    "text": "So the running time\nwill vary between different implementations, which\nis not really something I want.",
    "start": "973580",
    "end": "979010"
  },
  {
    "text": "The running time will also\nvary between computers. If I ran the same programs\non an older computer,",
    "start": "979010",
    "end": "985160"
  },
  {
    "text": "it's probably not going\nto take 5 seconds to run with an input of 100 million. It might take 10 or\nit might take 11.",
    "start": "985160",
    "end": "991980"
  },
  {
    "text": "So the timing is\nalso going to differ between different computers. It will also differ between\ndifferent languages,",
    "start": "991980",
    "end": "998390"
  },
  {
    "text": "so Java versus\nPython versus C. If C is very efficient at\nmemory management,",
    "start": "998390",
    "end": "1004510"
  },
  {
    "text": "it's going to run very fast. Whereas if Python is\na little bit slower, it's going to run slower. So again, we're\nactually capturing--",
    "start": "1004510",
    "end": "1011320"
  },
  {
    "text": "the timing is capturing\nvariations between languages. And the timing is not very\npredictable for small inputs.",
    "start": "1011320",
    "end": "1019340"
  },
  {
    "text": "So if for some reason,\nwhen I was running this square function\nhere with 1,",
    "start": "1019340",
    "end": "1025869"
  },
  {
    "text": "I was also running\nNetflix in the background, or my computer decided\nto update something.",
    "start": "1025869",
    "end": "1030939"
  },
  {
    "text": "And it decided to just\ndedicate resources to doing that task\nat that moment when I'm trying to\nrun this square of 1,",
    "start": "1030940",
    "end": "1037550"
  },
  {
    "text": "this 0.0 seconds might\nnot be 0.0 seconds. It might take away from\nthe time that it allocates",
    "start": "1037550",
    "end": "1046250"
  },
  {
    "text": "to running my square program. And then what we'll see is that\nthis will no longer be 0.0.",
    "start": "1046250",
    "end": "1051890"
  },
  {
    "text": "It might be 0.1 or\nsomething like that. So timing programs\nis not very good.",
    "start": "1051890",
    "end": "1059040"
  },
  {
    "text": "It's not very\nconsistent with our goal here, which is to\nevaluate algorithms.",
    "start": "1059040",
    "end": "1065240"
  },
  {
    "text": "Let's see if we can do better\nwith the idea of counting the number of operations.",
    "start": "1065240",
    "end": "1070410"
  },
  {
    "text": "So rather than focusing on\ndescribing our program in terms",
    "start": "1070410",
    "end": "1076790"
  },
  {
    "text": "of human time, 1 second, 0.5\nseconds, things like that, let's come up with some\noperations in Python that",
    "start": "1076790",
    "end": "1085880"
  },
  {
    "text": "take one time unit. And we're going to say that\nall of these really basic",
    "start": "1085880",
    "end": "1091340"
  },
  {
    "text": "operations-- we can say that they take\nthe same amount of time. I don't care if they're like\n10 to negative 9 seconds,",
    "start": "1091340",
    "end": "1097580"
  },
  {
    "text": "or 2 times 10 to the\nnegative 9 seconds. I don't care about that. I just know that\nthey're really fast.",
    "start": "1097580",
    "end": "1103200"
  },
  {
    "text": "And if they're really fast,\nI can say that each of them just take one unit of time. So I'll just count them\nall as one unit of time.",
    "start": "1103200",
    "end": "1110190"
  },
  {
    "text": "So the examples of those\nare mathematical operations. They're pretty fast. So no matter whether I'm\nmultiplying, dividing, adding,",
    "start": "1110190",
    "end": "1116880"
  },
  {
    "text": "subtracting, taking something\nto the power of something else, I'm going to say that\neach one of those takes one unit of time.",
    "start": "1116880",
    "end": "1124080"
  },
  {
    "text": "Comparing something. So A less than B, 3 greater\nthan 4, things like that, equality, also super fast to\ndo, also takes one unit of time.",
    "start": "1124080",
    "end": "1132690"
  },
  {
    "text": "Assigning something. So A is equal to 3. That assignment statement right\nthere-- also pretty fast to do.",
    "start": "1132690",
    "end": "1138570"
  },
  {
    "text": "It takes one unit of time. And then accessing\nobjects in memory. Also pretty fast,\ntakes one unit of time.",
    "start": "1138570",
    "end": "1147380"
  },
  {
    "text": "So with this new definition of\n\"time,\" quote, unquote, where we have these units of time.",
    "start": "1147380",
    "end": "1153020"
  },
  {
    "text": "Let's figure out what\nthese functions-- how long these\nfunctions actually take.",
    "start": "1153020",
    "end": "1159330"
  },
  {
    "text": "So our Celsius to\nFahrenheit function has three operations in it.",
    "start": "1159330",
    "end": "1165230"
  },
  {
    "text": "I got a multiplication, a\ndivision, and an addition. I don't care-- so\nthe little variations",
    "start": "1165230",
    "end": "1170600"
  },
  {
    "text": "that each one of these take\nto actually do inside computer memory, I'm going to say that\nthe Celsius to Fahrenheit",
    "start": "1170600",
    "end": "1175820"
  },
  {
    "text": "program takes three\nunits of time. So no matter what\nthe input is, if I'm",
    "start": "1175820",
    "end": "1182670"
  },
  {
    "text": "converting 0 Celsius\nor 1 million Celsius, the program will still just\ntake three units of time",
    "start": "1182670",
    "end": "1189299"
  },
  {
    "text": "to complete. How about mysum?",
    "start": "1189300",
    "end": "1194660"
  },
  {
    "text": "So we'll go through\nstep by step. So in mysum, I've got one\nassignment statement here.",
    "start": "1194660",
    "end": "1200909"
  },
  {
    "text": "So that's going to\nbe one operation. The for loop here is going to\ntake I and assign it to one",
    "start": "1200910",
    "end": "1208350"
  },
  {
    "text": "of the values in the range. That's just internally\nwhat it does. So that's going to\nbe one operation each time through the loop.",
    "start": "1208350",
    "end": "1214860"
  },
  {
    "text": "And then total plus\nequals i is going to be two operations,\nbecause I have total plus",
    "start": "1214860",
    "end": "1224670"
  },
  {
    "text": "i on the right hand side. That's one operation. And then assigning that back to\ntotal is my second operation.",
    "start": "1224670",
    "end": "1234610"
  },
  {
    "text": "So that's two operations there. And that's it. But notice our for loop.",
    "start": "1234610",
    "end": "1241980"
  },
  {
    "text": "These three operations\nhere-- the one for assigning i to be a value here. And these two operations\nhere repeat x plus 1 times.",
    "start": "1241980",
    "end": "1252060"
  },
  {
    "text": "0 all the way up to x. That's x plus 1 total times. ",
    "start": "1252060",
    "end": "1258299"
  },
  {
    "text": "So how long does this\nprogram actually take? Well, we count all that up.",
    "start": "1258300",
    "end": "1263410"
  },
  {
    "text": "So the one for the\ntotal equals 0 plus, and we're multiplying\nx plus 1 times what?",
    "start": "1263410",
    "end": "1270120"
  },
  {
    "text": "The 1 plus the 2, which gives\nus 3x plus 4 total operations. So now we're noting this in\nterms of the input, which",
    "start": "1270120",
    "end": "1278370"
  },
  {
    "text": "is kind of cool. So now I have this\nnice little formula, where if I know my input is\n10, I can actually tell you",
    "start": "1278370",
    "end": "1286110"
  },
  {
    "text": "how many quote, unquote,\n\"units of time\" this program will take.",
    "start": "1286110",
    "end": "1291985"
  },
  {
    "text": "How about the square? It's going to be very similar. So I've got one operation\nfor assignment here. This is one operation\nfor grabbing the i",
    "start": "1291985",
    "end": "1300060"
  },
  {
    "text": "and making it one of\nthe values in the range. Similarly for the inner\nloop, one operation there.",
    "start": "1300060",
    "end": "1305280"
  },
  {
    "text": "And then square sum plus equals\n1 for the same reason as this, is two operations.",
    "start": "1305280",
    "end": "1311039"
  },
  {
    "text": "One for the right hand side\ndoing the addition and two for making the assignment.",
    "start": "1311040",
    "end": "1316669"
  },
  {
    "text": "Let's not forget for loops. We've got two for loops here. So the inner one\nwill repeat n times.",
    "start": "1316670",
    "end": "1323460"
  },
  {
    "text": "And for each one of\nthose outer n times, we do the inner n times.",
    "start": "1323460",
    "end": "1330470"
  },
  {
    "text": "This nested for\nloop situation here. So the total number\nof time units",
    "start": "1330470",
    "end": "1335690"
  },
  {
    "text": "that this square will\ntake is the 1 over here for this square sum\nequals 0, plus, and then",
    "start": "1335690",
    "end": "1341990"
  },
  {
    "text": "I've got these nested for loops. So the other one goes\nthrough n times-- sorry, n times\nthe one operation,",
    "start": "1341990",
    "end": "1350400"
  },
  {
    "text": "multiplied by the\ninner for loop, also n times, times what\nis the operations done",
    "start": "1350400",
    "end": "1355740"
  },
  {
    "text": "in the inner for loop? Well, it's this 1 plus these 2. So the 1 plus the 2.",
    "start": "1355740",
    "end": "1361140"
  },
  {
    "text": "So in total, 3n squared\nplus 1 operations. ",
    "start": "1361140",
    "end": "1370610"
  },
  {
    "text": "So let's run this. And now that we're\ncounting operations, we should be able to\nsee a better pattern.",
    "start": "1370610",
    "end": "1379800"
  },
  {
    "text": "So here's my Celsius\nto Fahrenheit. Mysum and square\nslightly changed",
    "start": "1379800",
    "end": "1384890"
  },
  {
    "text": "because I've got\nthis little counter variable within each function. That is going to increment\neach time I see an operation.",
    "start": "1384890",
    "end": "1393170"
  },
  {
    "text": "So obviously, for Celsius to\nFahrenheit, it's always 3. So when I do my\nreturn, I'm just going",
    "start": "1393170",
    "end": "1399559"
  },
  {
    "text": "to return the counter variable\nand then the regular thing that this function\nshould return as a tuple.",
    "start": "1399560",
    "end": "1406080"
  },
  {
    "text": "For mysum, this\ncounter equals 1 stands for this assignment statement.",
    "start": "1406080",
    "end": "1411540"
  },
  {
    "text": "And then each time\nthrough the loop, I'm going to increment\nmy counter for the three",
    "start": "1411540",
    "end": "1416550"
  },
  {
    "text": "operations,\nassigning the i to be one of the values in the range. And then two more for\nthis total plus equals i.",
    "start": "1416550",
    "end": "1424440"
  },
  {
    "text": "So that's going\nto get incremented each time through the loop. And then the square similarly.",
    "start": "1424440",
    "end": "1429870"
  },
  {
    "text": "So here's my counter equals\n1 for this statement here. Counter plus equals\n1 for grabbing",
    "start": "1429870",
    "end": "1435450"
  },
  {
    "text": "the i as one of these values. And then counter plus\nequals 3 for grabbing the j to be one of these values\nand incrementing this mysum.",
    "start": "1435450",
    "end": "1445500"
  },
  {
    "text": "So because of where I've\nplaced these counters, Python will automatically\ncount it all up no matter",
    "start": "1445500",
    "end": "1451830"
  },
  {
    "text": "how many loops I've got. So here's my wrapper\nfor counting. Slightly different\nthan the timing one,",
    "start": "1451830",
    "end": "1458430"
  },
  {
    "text": "because now I'm actually\ngoing to also keep track of how many more\noperations I've done compared",
    "start": "1458430",
    "end": "1465780"
  },
  {
    "text": "to the previous input. So let me show you\nwhat that means.",
    "start": "1465780",
    "end": "1470960"
  },
  {
    "text": "Let's run Celsius to Fahrenheit\nwith the following inputs. So I'm first of all reporting\nthe total number of operations",
    "start": "1470960",
    "end": "1479120"
  },
  {
    "text": "just like I did with timing. So always three operations. No surprise there. That's what we\ncoded up basically.",
    "start": "1479120",
    "end": "1485070"
  },
  {
    "text": "But then I'm also\nreporting here. And that's done inside the\nwrapper function, the count wrapper, how many\nmore operations is",
    "start": "1485070",
    "end": "1493370"
  },
  {
    "text": "this based on the previous one. So the first one\nis a little weird. But when my input is 10 times\nmore, I went from 100 to 1,000,",
    "start": "1493370",
    "end": "1501650"
  },
  {
    "text": "I've done one more operation. No change, obviously, because\nit's always three operations",
    "start": "1501650",
    "end": "1507700"
  },
  {
    "text": "done in total. So just for completion\nsake, this is the slide.",
    "start": "1507700",
    "end": "1514610"
  },
  {
    "text": "So no matter what happens\nto the input here, the number of operations in\nthese sort of units of time,",
    "start": "1514610",
    "end": "1521750"
  },
  {
    "text": "which we're just counting the\nnumber of operations, is 3. What about the sum?",
    "start": "1521750",
    "end": "1528230"
  },
  {
    "text": "So remember the sum had\nthat for loop in it. Let's run that and see how\nmany operations are here.",
    "start": "1528230",
    "end": "1535740"
  },
  {
    "text": "So first I'm going to report\nthe number of operations. So when the input\nis 100, it's 304.",
    "start": "1535740",
    "end": "1541740"
  },
  {
    "text": "When the input is\n1,000, it's 3,004. When the input is\n10,000, it's 30,004. So that matches up the\nformula we came up with--",
    "start": "1541740",
    "end": "1549179"
  },
  {
    "text": "3x plus 4. So that's pretty cool. And then you can\nsee now here I'm",
    "start": "1549180",
    "end": "1554430"
  },
  {
    "text": "reporting how many more\noperations is this line based on the previous line.",
    "start": "1554430",
    "end": "1560139"
  },
  {
    "text": "So it's about 9.8 times more. So when my input increases\nby 10, from 100 to 1,000,",
    "start": "1560140",
    "end": "1566310"
  },
  {
    "text": "I am doing approximately\n9.88 times more operations. When my input increases from\n1,000 to 10,000, again, by 10,",
    "start": "1566310",
    "end": "1575670"
  },
  {
    "text": "I'm doing 9.988 times\nmore operations.",
    "start": "1575670",
    "end": "1581450"
  },
  {
    "text": "So we see a nice little\nsteady state going on here,",
    "start": "1581450",
    "end": "1586460"
  },
  {
    "text": "where when my input\ngets really, really big, it looks like I'm approaching\napproximately 10 times",
    "start": "1586460",
    "end": "1593250"
  },
  {
    "text": "as many operations, when\nmy input is 10 times more. This is obviously more\napparent when the input is big,",
    "start": "1593250",
    "end": "1600910"
  },
  {
    "text": "because the tiny\nvariations in my formula, the plus 4 specifically,\nmakes less of an impact when",
    "start": "1600910",
    "end": "1609010"
  },
  {
    "text": "my input is really large. And this is kind of going\nin line with our motivation.",
    "start": "1609010",
    "end": "1614460"
  },
  {
    "text": "When the input data\nis really, really big, what I'd like to\nreport is the algorithm and how long it takes.",
    "start": "1614460",
    "end": "1620470"
  },
  {
    "text": "I don't care that the algorithm\ntakes 3x plus 4, or 3x times",
    "start": "1620470",
    "end": "1626549"
  },
  {
    "text": "3x as operations. When the input is\nreally big, all I care",
    "start": "1626550",
    "end": "1632850"
  },
  {
    "text": "is that it's sort of\non the order of x. And that's something\nwe'll get at next lecture.",
    "start": "1632850",
    "end": "1638250"
  },
  {
    "text": "But this is the big idea here. When the input increases by 10,\nit seems like at steady state,",
    "start": "1638250",
    "end": "1645059"
  },
  {
    "text": "our number of operations\nincreases by 10 as well. So it's this linear\nrelationship.",
    "start": "1645060",
    "end": "1652710"
  },
  {
    "text": "What about the last\nfunction, the square?",
    "start": "1652710",
    "end": "1658500"
  },
  {
    "text": "So I'm doing something\na little special here. I have two different inputs I'm\ngoing to run the square with.",
    "start": "1658500",
    "end": "1664920"
  },
  {
    "text": "So the first one is L2_a. So I'm going to run square with\ninput 128, 256, 512, 1024--",
    "start": "1664920",
    "end": "1673640"
  },
  {
    "text": "so I'm basically\nincreasing my input by 2. I'm multiplying my\ninput by 2 each time.",
    "start": "1673640",
    "end": "1682690"
  },
  {
    "text": "And then I'm going\nto run it with L2_b, where my input increases\nby 10 each time.",
    "start": "1682690",
    "end": "1688980"
  },
  {
    "text": "So we're going to see\nif we can figure out a relationship between\nthese for the square. Because that one\nwas a little hard",
    "start": "1688980",
    "end": "1695050"
  },
  {
    "text": "to figure out in\njust pure timing without actually waiting\nfor minutes or days.",
    "start": "1695050",
    "end": "1700270"
  },
  {
    "text": " So we've got something\nto work with here.",
    "start": "1700270",
    "end": "1706190"
  },
  {
    "text": "So here I've got my square. So this first bit here is\nwhen my input increased by 2.",
    "start": "1706190",
    "end": "1712769"
  },
  {
    "text": "And down here, it\njust finished, is when my input increases by 10.",
    "start": "1712770",
    "end": "1718070"
  },
  {
    "text": "So number of operations\nwhen my input increases by 2",
    "start": "1718070",
    "end": "1723919"
  },
  {
    "text": "are not so important. Yes, they're big. But what I'm really\ninterested in,",
    "start": "1723920",
    "end": "1729260"
  },
  {
    "text": "just like what we saw\nin the mysum example, is what happens to\nthe steady state as the input gets really big.",
    "start": "1729260",
    "end": "1735650"
  },
  {
    "text": "How many more\noperations are we doing? And what we can see is that\nthe number of operations",
    "start": "1735650",
    "end": "1742190"
  },
  {
    "text": "as the input gets really big\nis approximately 4 times more,",
    "start": "1742190",
    "end": "1747440"
  },
  {
    "text": "in the case where I increase\nmy input by 2 every round. ",
    "start": "1747440",
    "end": "1755260"
  },
  {
    "text": "So when I increase my input\nby 2, the number of operations",
    "start": "1755260",
    "end": "1762160"
  },
  {
    "text": "are going to be 4 times more. Well, what about when I\nincrease my input by 10? 1, 100, 1,000, and so on.",
    "start": "1762160",
    "end": "1769610"
  },
  {
    "text": "Again, I'm not so\nmuch interested in number of operations. But what happens to\nthe steady state?",
    "start": "1769610",
    "end": "1775150"
  },
  {
    "text": "With very few operations,\nit's hard to tell. But as we increase\nit, we see that it",
    "start": "1775150",
    "end": "1780159"
  },
  {
    "text": "goes towards approximately 100. So when my input\nincreases by 10,",
    "start": "1780160",
    "end": "1786220"
  },
  {
    "text": "that takes me to about\n100-fold increase in the number of operations.",
    "start": "1786220",
    "end": "1793410"
  },
  {
    "text": "So now do you\nguys-- can you guys see the relationship between\nthe input for the square and the number of operations?",
    "start": "1793410",
    "end": "1801020"
  },
  {
    "text": "You can, right? So it's approximately a sort\nof an n squared relationship. When my input is n, the\nnumber of operations",
    "start": "1801020",
    "end": "1812288"
  },
  {
    "text": "is going to be on the\norder of n squared more. ",
    "start": "1812288",
    "end": "1818880"
  },
  {
    "text": "So counting operations\nis actually a lot better than timing, as we can see. We've eliminated a\nbunch of those red X's.",
    "start": "1818880",
    "end": "1826770"
  },
  {
    "text": "We no longer have to deal with\nvariations between computers,",
    "start": "1826770",
    "end": "1831960"
  },
  {
    "text": "because if we're counting\nthis on a computer that's slow or fast, we're\nstill counting the same amount of stuff.",
    "start": "1831960",
    "end": "1838775"
  },
  {
    "text": "Languages-- again,\nit's not going to matter, because you'll\nimplement it in a similar way.",
    "start": "1838775",
    "end": "1843930"
  },
  {
    "text": "Small inputs is\nstill sort of iffy. We saw the square was a\nlittle bit unpredictable",
    "start": "1843930",
    "end": "1849179"
  },
  {
    "text": "when the input was pretty\nsmall, right down here-- 60 then straight up to 90.",
    "start": "1849180",
    "end": "1854429"
  },
  {
    "text": "But we didn't take long\nto see the steady state. So it's actually better than\nbefore, better than timing.",
    "start": "1854430",
    "end": "1860170"
  },
  {
    "text": "It's not 0 at least. But now the problem\nbecomes sort of what's the definition of which\noperations to count?",
    "start": "1860170",
    "end": "1867570"
  },
  {
    "text": "Notice our functions\nhave a return value. Do we count the return\nas an operation?",
    "start": "1867570",
    "end": "1873419"
  },
  {
    "text": "Technically, you should. That's a value that's being\npassed between functions. So that's going to\ntake some time to run.",
    "start": "1873420",
    "end": "1879510"
  },
  {
    "text": "But we didn't actually\ncount it in our example. But you could if you wanted to.",
    "start": "1879510",
    "end": "1884750"
  },
  {
    "text": "So that's where we stand. We've got timing and counting,\njust as an initial example.",
    "start": "1884750",
    "end": "1894460"
  },
  {
    "text": "Next lecture, we're going to\nlook at a few more examples with lists and things like that. Just again, timing and\ncounting those functions.",
    "start": "1894460",
    "end": "1901880"
  },
  {
    "text": "But again, the big\nidea here is that we're trying to get at\nevaluating just a handful of different algorithms, sort\nof what's the order of growth",
    "start": "1901880",
    "end": "1910720"
  },
  {
    "text": "as the input becomes\nreally, really big? Because all we're\ninterested in is how scalable are these\nprograms that we're",
    "start": "1910720",
    "end": "1916540"
  },
  {
    "text": "running when the input\nis really big, when we're dealing with big data. And so that's what\nwe're going to start",
    "start": "1916540",
    "end": "1922660"
  },
  {
    "text": "talking about next lecture. ",
    "start": "1922660",
    "end": "1932000"
  }
]