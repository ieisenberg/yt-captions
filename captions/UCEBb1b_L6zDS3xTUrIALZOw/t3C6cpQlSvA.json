[
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING]",
    "start": "0",
    "end": "7275"
  },
  {
    "start": "7275",
    "end": "12463"
  },
  {
    "text": "ZHENGZHONG JIN: So OK. So let's start. So I'm Zhengzhong Jin. And so today I will give\nthe lecture about SNARGs",
    "start": "12463",
    "end": "20600"
  },
  {
    "text": "for Batch NP or batch argument. ",
    "start": "20600",
    "end": "26690"
  },
  {
    "text": "So this lecture is\nabout batch argument. ",
    "start": "26690",
    "end": "37309"
  },
  {
    "text": "And it has many different\nnames, such BARGs.",
    "start": "37310",
    "end": "43948"
  },
  {
    "text": "Or you can also call\nit SNARGs for Batch NP. ",
    "start": "43948",
    "end": "56200"
  },
  {
    "text": "So batch is a very basic\nconcept in computer science.",
    "start": "56200",
    "end": "61720"
  },
  {
    "text": "So basically if you\nhave multiple items and you want to\ncollect them together, then you can call this\ncollection a batch.",
    "start": "61720",
    "end": "68200"
  },
  {
    "text": "So there are similar ideas in,\nfor example, in programming. So there are concepts\nlike batch processing.",
    "start": "68200",
    "end": "76780"
  },
  {
    "text": "And so it's a very\ncommon concept. So in this lecture, we'll\ntalk about the batch argument.",
    "start": "76780",
    "end": "86950"
  },
  {
    "text": "So it's a notion of batch\nin the proof system. So firstly, let me define\nwhat is a batch argument.",
    "start": "86950",
    "end": "97200"
  },
  {
    "text": "So definition-- so a BARGs-- a BARG is a tuple of algorithms.",
    "start": "97200",
    "end": "107326"
  },
  {
    "start": "107326",
    "end": "118149"
  },
  {
    "text": "So it consists of a\ngenerator and the prover and a verifier algorithm\nwith the following syntax.",
    "start": "118150",
    "end": "128210"
  },
  {
    "text": "So at the very\nbeginning, the generator will generate some series.",
    "start": "128210",
    "end": "133459"
  },
  {
    "text": "So it will take some\nsecurity parameter as input and generate some series. ",
    "start": "133460",
    "end": "139840"
  },
  {
    "text": "And both the prover\nand the verifier is given access to these series\nthroughout of the protocol.",
    "start": "139840",
    "end": "147670"
  },
  {
    "text": "So instead of proving\none statement at a time, the batch proof\nallows the prover",
    "start": "147670",
    "end": "152739"
  },
  {
    "text": "to convince the verifier that a\nbatch of the statement is true. So for example, so let's\nfix a NP language L so",
    "start": "152740",
    "end": "165250"
  },
  {
    "text": "that L is defined as follows. ",
    "start": "165250",
    "end": "173380"
  },
  {
    "text": "And the prover tries to\nconvince the verifier that a list of\ninstances from x1 to xk.",
    "start": "173380",
    "end": "181850"
  },
  {
    "text": "So the prover has this\nlist of statements, and he wants to\nconvince the verifier",
    "start": "181850",
    "end": "187430"
  },
  {
    "text": "that all of those statements\nare in this list MP language L.",
    "start": "187430",
    "end": "195409"
  },
  {
    "text": "So this is the statement\nthat the prover wants to convince the verifier. And the proof is a single\nrandom message, pi.",
    "start": "195410",
    "end": "204620"
  },
  {
    "text": "And also, the prover\nalso has the MP witness for this x1 to xk.",
    "start": "204620",
    "end": "211439"
  },
  {
    "text": "So let's denote the NP\nwitness as w1 to wk. So those are the NP witness.",
    "start": "211440",
    "end": "217819"
  },
  {
    "text": "OK. ",
    "start": "217820",
    "end": "223340"
  },
  {
    "text": "So now, so we say such\na BARG is succinct",
    "start": "223340",
    "end": "230090"
  },
  {
    "text": "if it satisfies the\nfollowing property. ",
    "start": "230090",
    "end": "236849"
  },
  {
    "text": "So succint is defined\nas the size of the proof is smaller than the total\nlength of the witness.",
    "start": "236850",
    "end": "246390"
  },
  {
    "text": "So can anyone see\nwhy we require this? ",
    "start": "246390",
    "end": "252600"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ZHENGZHONG JIN: Yes. Yes. Right. Exactly. So we require this is because\na trivial proof system,",
    "start": "252600",
    "end": "262919"
  },
  {
    "text": "we could have the\nprover to just send over the NP witness to the verifier. Then the proof\nwill be k times w.",
    "start": "262920",
    "end": "270000"
  },
  {
    "text": "So [INAUDIBLE]\nthis requires this. And as any proof systems,\nwe require the completeness",
    "start": "270000",
    "end": "275790"
  },
  {
    "text": "and the soundness. So completeness requires, for\nany honestly-generated proof,",
    "start": "275790",
    "end": "286020"
  },
  {
    "text": "it will always be accepted. And the soundness is\ndefined as follows.",
    "start": "286020",
    "end": "295410"
  },
  {
    "text": " So the soundness says, if\nthe statement is not true,",
    "start": "295410",
    "end": "305180"
  },
  {
    "text": "then any cheating prover\nshouldn't find a cheating proof. So it means, so if\nthis is not true, then",
    "start": "305180",
    "end": "322090"
  },
  {
    "text": "for any non-uniform PBT cheating\nprover, we have this property.",
    "start": "322090",
    "end": "330615"
  },
  {
    "start": "330615",
    "end": "338560"
  },
  {
    "text": "So the cheating prover\nis given the CRS signed by the CRS generator. And we require it to\nsend a proof pi star.",
    "start": "338560",
    "end": "346610"
  },
  {
    "text": "So pi star is the\ncheating proof. And we require the probability\nthat the proof is accepted by this verifier is negligible.",
    "start": "346610",
    "end": "353650"
  },
  {
    "start": "353650",
    "end": "360419"
  },
  {
    "text": "So I guess you already\nlearned about the concept, the definition of\nthe proof systems.",
    "start": "360420",
    "end": "366280"
  },
  {
    "text": "This is just a recap\nof the definition. ",
    "start": "366280",
    "end": "378120"
  },
  {
    "text": "So any questions\nabout this definition? ",
    "start": "378120",
    "end": "384630"
  },
  {
    "text": "OK. ",
    "start": "384630",
    "end": "390780"
  },
  {
    "text": "Now, some of you\nmight wonder why we care about such a proof system. Because such proof system\nis clearly a subclass.",
    "start": "390780",
    "end": "396970"
  },
  {
    "text": "So such a statement is\nclearly a subclass of NP So why we care about them?",
    "start": "396970",
    "end": "402449"
  },
  {
    "text": "So the reason is,\nas I just mentioned, so batch is a very\nbasic concept.",
    "start": "402450",
    "end": "409280"
  },
  {
    "text": "So this is just a notion\nof batch, the notion",
    "start": "409280",
    "end": "415270"
  },
  {
    "text": "of batch in the proof systems. And a similar concept\nhas been studied in other areas in cryptography,\nsuch as signatures.",
    "start": "415270",
    "end": "423800"
  },
  {
    "text": "So there is a signature scheme\ncalled aggregated signature.",
    "start": "423800",
    "end": "429349"
  },
  {
    "text": "So it allows you to\naggregate multiple signatures together to a short signature. Then you only need to\nverify the short signature",
    "start": "429350",
    "end": "436210"
  },
  {
    "text": "to ensure all the\nsignatures can be verified. So there is also\na similar notion",
    "start": "436210",
    "end": "444160"
  },
  {
    "text": "studied in interactive proofs. And it's called batch\ninteractive proof.",
    "start": "444160",
    "end": "451090"
  },
  {
    "text": "And so such a scheme, such a\nBARG also has many applications. So in the next lecture,\nYael will tell you",
    "start": "451090",
    "end": "458350"
  },
  {
    "text": "how to use it to build\nSNARGs for all P. And in fact, there are many\nconstructions of SNARGs",
    "start": "458350",
    "end": "467880"
  },
  {
    "text": "for all of P up to now. So from various\nassumptions and-- there are different\nconstruction,",
    "start": "467880",
    "end": "473920"
  },
  {
    "text": "but all of those\nconstructions use these BARGs as a building block in it.",
    "start": "473920",
    "end": "481260"
  },
  {
    "text": "And indeed-- yeah. AUDIENCE: Is there any hope\nfor statistical sound BARGs, or is that a possibility?",
    "start": "481260",
    "end": "486574"
  },
  {
    "text": "ZHENGZHONG JIN: That's\na good question. So there is a recent work shows,\nif you can get statistical--",
    "start": "486575",
    "end": "494040"
  },
  {
    "text": "so you can get\nstatistical BARGs, then you can build some witness,\nsome statistical witness",
    "start": "494040",
    "end": "499790"
  },
  {
    "text": "in distinguishibility. Yeah. So we don't know the\nexact answer yet.",
    "start": "499790",
    "end": "506930"
  },
  {
    "text": " And actually, there\nis a technical reason",
    "start": "506930",
    "end": "514650"
  },
  {
    "text": "why we study such a\nBARG, why we study BARGs. So I will briefly mention\nit, but I will not",
    "start": "514650",
    "end": "521519"
  },
  {
    "text": "go into detail of\nthis lower bound. So this is the work\nby Gentry and Wichs. ",
    "start": "521520",
    "end": "529140"
  },
  {
    "text": "So they show that-- I will not describe exactly\nthe impossibility result.",
    "start": "529140",
    "end": "535720"
  },
  {
    "text": "So they show some impossibility\nresult about SNARGs in general. So they show it is impossible\nto build SNARGs for any T",
    "start": "535720",
    "end": "557610"
  },
  {
    "text": "hard language with proof that is\nsignificantly less than log T.",
    "start": "557610",
    "end": "573000"
  },
  {
    "text": "So what does it mean? So here, we say a\nlanguage is T hard",
    "start": "573000",
    "end": "579510"
  },
  {
    "text": "if it takes T time to\ndecide this language. So for example, for general NP\nlanguage with witness length w,",
    "start": "579510",
    "end": "590050"
  },
  {
    "text": "then usually you will\ntake 2 to the w time to decipher this language. So by this impossibility\nresult, they",
    "start": "590050",
    "end": "597610"
  },
  {
    "text": "are saying it is a very hard\nto build SNARGs for general NP language if the proof size\nis significantly less than w.",
    "start": "597610",
    "end": "607180"
  },
  {
    "text": "So basically, SNARGs for\nNP is very hard to build. And here, the impossibility only\nholds for very good assumptions.",
    "start": "607180",
    "end": "615290"
  },
  {
    "text": "So they call those assumptions\nfalsifiable assumptions. And basically, good assumptions,\nsuch as learning with error",
    "start": "615290",
    "end": "623050"
  },
  {
    "text": "assumption, are falsifiable. So I want to mention\nthis because, indeed,",
    "start": "623050",
    "end": "632290"
  },
  {
    "text": "if you want to-- so if we consider BARGs, then\nthe language we are proving--",
    "start": "632290",
    "end": "640205"
  },
  {
    "text": "sorry.  So if we want to consider BARGs,\nthen the language we are proving",
    "start": "640205",
    "end": "647779"
  },
  {
    "text": "is the following\nlanguage, indeed. So the language the prover\ntries to convince the verifier",
    "start": "647780",
    "end": "654020"
  },
  {
    "text": "is the language L\nor product k times-- so it simply contains all of x1\nto xk such that all of x1 to xk",
    "start": "654020",
    "end": "666440"
  },
  {
    "text": "is in this language L. So what's the time to\ndecide this language?",
    "start": "666440",
    "end": "671995"
  },
  {
    "text": " Do anyone knows? ",
    "start": "671995",
    "end": "679257"
  },
  {
    "text": "AUDIENCE: Would it\nbe T times the time to decide each of\nthose statements? ZHENGZHONG JIN: Yes. Yes. Right.",
    "start": "679257",
    "end": "684680"
  },
  {
    "text": "Great. So that's correct. So to decide this language,\nwe only need to take k times 2",
    "start": "684680",
    "end": "692240"
  },
  {
    "text": "to the w because you\nonly need to decide whether each xi is in L or not.",
    "start": "692240",
    "end": "698399"
  },
  {
    "text": "And if one of them\nis not in L, then you know this instance is\nnot in this language.",
    "start": "698400",
    "end": "705690"
  },
  {
    "text": "So the point is, if you take\nthis T into this Gentry-Wichs",
    "start": "705690",
    "end": "714210"
  },
  {
    "text": "impossibility, it shows that\nit is very hard to build SNARGs for a proof size\nsignificantly less than log T.",
    "start": "714210",
    "end": "722430"
  },
  {
    "text": "But log T is roughly\nthe size of w",
    "start": "722430",
    "end": "730620"
  },
  {
    "text": "So it only shows it is very\nhard to build a SNARG for proof",
    "start": "730620",
    "end": "735810"
  },
  {
    "text": "size significantly less than w. But this is succint enough. So I mean, if we can\nbuild a SNARG with--",
    "start": "735810",
    "end": "744210"
  },
  {
    "text": "if we can build BARGs with proof\nsize w, that doesn't contradict to Gentry-Wichs, but\nit is still succinct",
    "start": "744210",
    "end": "752190"
  },
  {
    "text": "because w is already\nsignificantly less than k times w.",
    "start": "752190",
    "end": "757930"
  },
  {
    "text": "OK. Any questions? ",
    "start": "757930",
    "end": "763709"
  },
  {
    "text": "OK. So in this lecture, the\nmain theory we want to prove is the following.",
    "start": "763710",
    "end": "770120"
  },
  {
    "start": "770120",
    "end": "776740"
  },
  {
    "text": "So there exists a contraction of\nBARGs from learning with arrow.",
    "start": "776740",
    "end": "786670"
  },
  {
    "text": "And the proof size is poly of--",
    "start": "786670",
    "end": "800735"
  },
  {
    "text": "sorry. ",
    "start": "800735",
    "end": "811420"
  },
  {
    "text": "So the proof size is dominated\nby the by the relation circuit",
    "start": "811420",
    "end": "820220"
  },
  {
    "text": "size. So roughly, you can think, if\nwe consider 3 SAT instance, then",
    "start": "820220",
    "end": "826550"
  },
  {
    "text": "almost this this C is almost\nthe same as the length of w",
    "start": "826550",
    "end": "832310"
  },
  {
    "text": "because the circuit is shallow. Yeah. And the verification time--",
    "start": "832310",
    "end": "838290"
  },
  {
    "text": " so the proof size is\nalmost close to this w",
    "start": "838290",
    "end": "845420"
  },
  {
    "text": "because the log k term is small. Yeah. And the verification time is-- ",
    "start": "845420",
    "end": "857840"
  },
  {
    "text": "yeah. So the verification\ntime is k times 1 of the instance plus\nsome additional term.",
    "start": "857840",
    "end": "869850"
  },
  {
    "text": "So the additional term-- so the first term only\ndepends on the total length of the instance,\nwhich is k times x.",
    "start": "869850",
    "end": "878370"
  },
  {
    "text": "So because we have k instances\nand each of the instances has length x, so\nthe additional term",
    "start": "878370",
    "end": "885540"
  },
  {
    "text": "does not depend on the\ninstance size, the total length of the instance size. It only depends on log k,\nthe size C, and the lambda.",
    "start": "885540",
    "end": "898235"
  },
  {
    "text": " So in fact, there\nare more structure",
    "start": "898235",
    "end": "906720"
  },
  {
    "text": "of the verifier algorithm. So indeed, the\nverification algorithm",
    "start": "906720",
    "end": "912029"
  },
  {
    "text": "can be decomposed to two parts. The first part will only take\nall of the instances as input",
    "start": "912030",
    "end": "917490"
  },
  {
    "text": "and pre-processing it to\noutput some very small state. So after the pre-processing,\nthe online phase",
    "start": "917490",
    "end": "924270"
  },
  {
    "text": "will take the state from the\npre-processing algorithm, and it will verify the\nproof in a very short time.",
    "start": "924270",
    "end": "930190"
  },
  {
    "text": "So the online phase\ndoes not depend on k.",
    "start": "930190",
    "end": "936620"
  },
  {
    "text": "I will come to this point later. So this is the main\ntheorem we want to prove.",
    "start": "936620",
    "end": "941800"
  },
  {
    "start": "941800",
    "end": "953180"
  },
  {
    "text": "So next-- yeah. AUDIENCE: So [INAUDIBLE] ",
    "start": "953180",
    "end": "959900"
  },
  {
    "text": "ZHENGZHONG JIN: Sorry. AUDIENCE: The [INAUDIBLE] of pi\nis poly [INAUDIBLE] circuits, size of circuits is\nlike [INAUDIBLE].",
    "start": "959900",
    "end": "966450"
  },
  {
    "text": "ZHENGZHONG JIN: The\nnumber of lines? AUDIENCE: The [INAUDIBLE] of pi. X of pi.",
    "start": "966450",
    "end": "972068"
  },
  {
    "text": "ZHENGZHONG JIN: Oh\nlength of pi, yeah. AUDIENCE: So you want it\nto be less than k times w. So this k, like much\nlarger than the size of--",
    "start": "972068",
    "end": "978320"
  },
  {
    "text": "is k much larger\nthan length of w? ZHENGZHONG JIN: Length of w? Oh, right.",
    "start": "978320",
    "end": "983570"
  },
  {
    "text": "You can think of k\nis a polynomial in w. Yeah. Usually, yeah.",
    "start": "983570",
    "end": "988790"
  },
  {
    "text": "Because you want the prover to\nbe a polynomial time algorithm. Then you can only\nconsider polynomial k. ",
    "start": "988790",
    "end": "997032"
  },
  {
    "text": "AUDIENCE: So if k\nis polynomial w, then this construction is only\nsuccinct if the polynomial in C",
    "start": "997032",
    "end": "1003920"
  },
  {
    "text": "is a small polynomial? ZHENGZHONG JIN: Right. Yes. Yeah.",
    "start": "1003920",
    "end": "1009130"
  },
  {
    "text": "Right. So in fact, there is a way\nto generically bootstrap",
    "start": "1009130",
    "end": "1015710"
  },
  {
    "text": "this to remove the dependence\non the size of the circuit to make it even smaller,\nto make it only depend",
    "start": "1015710",
    "end": "1023300"
  },
  {
    "text": "on the witness size. But that will use the things\nin the next lecture by Yael.",
    "start": "1023300",
    "end": "1029449"
  },
  {
    "text": "So you can-- yeah. ",
    "start": "1029450",
    "end": "1035569"
  },
  {
    "text": "OK. So any questions? ",
    "start": "1035569",
    "end": "1045319"
  },
  {
    "text": "So next I will show you how\nto construct these BARGs.",
    "start": "1045319",
    "end": "1051725"
  },
  {
    "text": " So if I directly show\nyou the construction,",
    "start": "1051725",
    "end": "1057040"
  },
  {
    "text": "it will be very complicated. So I will show you a\nfirst initial attempt",
    "start": "1057040",
    "end": "1062669"
  },
  {
    "text": "to do the construction and\ngradually add the building blocks to the construction. So our starting point\nis the Kilians protocol.",
    "start": "1062670",
    "end": "1074910"
  },
  {
    "text": "Actually, it's a simplified\nversion of Kilian. ",
    "start": "1074910",
    "end": "1096899"
  },
  {
    "text": "So initially, the prover has k--",
    "start": "1096900",
    "end": "1104940"
  },
  {
    "text": "so it has k instance\nand the witness. So w1 to wk--",
    "start": "1104940",
    "end": "1111280"
  },
  {
    "text": "sorry-- x1 to xk. And the prover is going to use\nPCP to generate the PCP for all",
    "start": "1111280",
    "end": "1121059"
  },
  {
    "text": "of those instances. So he applied the PCP\nprover algorithm to it",
    "start": "1121060",
    "end": "1129309"
  },
  {
    "text": "and obtained a PCP proof,\nwhich is a long string. So this is the first\nPCP proof for x1 and w1.",
    "start": "1129310",
    "end": "1139030"
  },
  {
    "text": "And he does the same for the\nsecond instance and witness, et cetera--",
    "start": "1139030",
    "end": "1144610"
  },
  {
    "text": "so PCP k. ",
    "start": "1144610",
    "end": "1150700"
  },
  {
    "text": "So do any of you\nremember what is PCP? ",
    "start": "1150700",
    "end": "1158380"
  },
  {
    "text": "Or do I need to recall it? ",
    "start": "1158380",
    "end": "1169640"
  },
  {
    "text": "So a quick recall what is PCP-- so PCP is a-- ",
    "start": "1169640",
    "end": "1181040"
  },
  {
    "text": "so let's say PCP for NP.",
    "start": "1181040",
    "end": "1187310"
  },
  {
    "text": "So PCP for NP is a\npair of algorithms. So the prover has\nsome x and a w,",
    "start": "1187310",
    "end": "1193610"
  },
  {
    "text": "which is the NP instance\nand the witness. And he can generate a long\nproof, long PCP proof.",
    "start": "1193610",
    "end": "1201159"
  },
  {
    "text": " So this is the prover\nalgorithm for PCP.",
    "start": "1201160",
    "end": "1206750"
  },
  {
    "text": "And there is a PCP verifier. So the verifier will read--",
    "start": "1206750",
    "end": "1212150"
  },
  {
    "text": "so this PCP string is\nsome binary string. So it contains 0 and 1s. And the verifier will sample\nsome random coordinates,",
    "start": "1212150",
    "end": "1221029"
  },
  {
    "text": "Q. So let's say the\nsize of the PCP is L,",
    "start": "1221030",
    "end": "1226350"
  },
  {
    "text": "and Q is a subset of indices. ",
    "start": "1226350",
    "end": "1232980"
  },
  {
    "text": "So the PCP verifier will check. ",
    "start": "1232980",
    "end": "1239850"
  },
  {
    "text": "It will take the instance x\nand the query Q under the PCP",
    "start": "1239850",
    "end": "1248580"
  },
  {
    "text": "in the subset Q. And then it\ndecides to accept or reject.",
    "start": "1248580",
    "end": "1257490"
  },
  {
    "text": "So that's the PCP. And we require the-- so the combinant says, if\nx and w is in the language,",
    "start": "1257490",
    "end": "1266580"
  },
  {
    "text": "then the proof should be\naccepted by the verifier. And the soundness\nsays, for any x--",
    "start": "1266580",
    "end": "1279400"
  },
  {
    "text": "so if x is not in L, then\nfor any PCP string, PCP star,",
    "start": "1279400",
    "end": "1289070"
  },
  {
    "text": "we have the probability\nthat the verifier accepts is bounded by some constant.",
    "start": "1289070",
    "end": "1295800"
  },
  {
    "text": " So the randomness\nis over Q and the--",
    "start": "1295800",
    "end": "1302275"
  },
  {
    "start": "1302275",
    "end": "1311470"
  },
  {
    "text": "is bounded by some epsilon. So here we can always do\nsome parallel repetition",
    "start": "1311470",
    "end": "1317560"
  },
  {
    "text": "to amplify the witness-- sorry-- to amplify\nthe soundness. So if we do the parallel\nrepetition lambda",
    "start": "1317560",
    "end": "1324520"
  },
  {
    "text": "times, then any-- so we can amplify any constant\nsoundness error to lambda,",
    "start": "1324520",
    "end": "1333040"
  },
  {
    "text": "to epsilon lambda. So then we can set it to be 2 to\nthe minus the order of lambda.",
    "start": "1333040",
    "end": "1341720"
  },
  {
    "text": "And the cost of doing this is\nto blow up the size of the query",
    "start": "1341720",
    "end": "1347390"
  },
  {
    "text": "by lambda. So we can always assume\nwith all the generality",
    "start": "1347390",
    "end": "1354620"
  },
  {
    "text": "that there exists a PCP for NP,\nwhere the query complexity is",
    "start": "1354620",
    "end": "1360350"
  },
  {
    "text": "roughly lambda times poly log\nC. And the soundness error is",
    "start": "1360350",
    "end": "1370880"
  },
  {
    "text": "2 to the-- roughly 2 to the minus lambda. So we will use this kind of\nPCP with this query complexity",
    "start": "1370880",
    "end": "1379860"
  },
  {
    "text": "and the-- yeah. AUDIENCE: I mean, there are PCPs\nwith the size of QVO of lambda, right?",
    "start": "1379860",
    "end": "1385760"
  },
  {
    "text": "Do we need the poly log C term? ZHENGZHONG JIN: Oh,\nyou mean this term? AUDIENCE: Yeah.",
    "start": "1385760",
    "end": "1390920"
  },
  {
    "text": "ZHENGZHONG JIN: So\nthat's a good question. So it's possible that\nyou can get rid of the-- so for example, if you have a\nvery good query complexity, then",
    "start": "1390920",
    "end": "1398809"
  },
  {
    "text": "maybe you don't have this term. But in this work,\nI only-- so we will need some additional\nstructure about the PCP.",
    "start": "1398810",
    "end": "1405299"
  },
  {
    "text": "And I only know-- at least I know it holds for\nthe algebraic construction",
    "start": "1405300",
    "end": "1410310"
  },
  {
    "text": "from this written numeric code. But I don't know if it holds\nfor general other constructions of PCP.",
    "start": "1410310",
    "end": "1416670"
  },
  {
    "text": "So all right. So I'll use this PCP.",
    "start": "1416670",
    "end": "1423210"
  },
  {
    "text": "So now we have k PCP string,\nand we have our verifier.",
    "start": "1423210",
    "end": "1428549"
  },
  {
    "text": "So-- AUDIENCE: Can you remind\nus how big [INAUDIBLE] are?",
    "start": "1428550",
    "end": "1434130"
  },
  {
    "text": "ZHENGZHONG JIN: Good question. So let's say this is a\nPCP for NP language L,",
    "start": "1434130",
    "end": "1440050"
  },
  {
    "text": "and the NP language is\ndefined in this way. ",
    "start": "1440050",
    "end": "1446370"
  },
  {
    "text": "So it has a relation circuit\nC. And the length of the L--",
    "start": "1446370",
    "end": "1454020"
  },
  {
    "text": "so length of L is some poly\nin C, the circuit size.",
    "start": "1454020",
    "end": "1461260"
  },
  {
    "text": "Again, it's possible that you\ncan use some more efficient PCP construction to--",
    "start": "1461260",
    "end": "1466419"
  },
  {
    "text": "I think there exists a PCP\nsuch that this L is almost near linear in the size\nof the circuit.",
    "start": "1466420",
    "end": "1472930"
  },
  {
    "text": "Yeah. So OK. ",
    "start": "1472930",
    "end": "1479289"
  },
  {
    "text": "So we will use this PCP, and so\nwe'll use some hash function.",
    "start": "1479290",
    "end": "1485720"
  },
  {
    "text": "And we will put the\nhash key in the CRS. So the CRS will\ncontain the hash key.",
    "start": "1485720",
    "end": "1490840"
  },
  {
    "text": "Let's say some hash key. ",
    "start": "1490840",
    "end": "1496750"
  },
  {
    "text": "And we are going to look\nat-- so this PCP are-- so they are binary strings\nfor each coordinate.",
    "start": "1496750",
    "end": "1504220"
  },
  {
    "text": "They are binary values\nin each coordinate. And we are going to use\nthis hash function to hash",
    "start": "1504220",
    "end": "1510280"
  },
  {
    "text": "each column of this PCP-- of those PCPs. So that means I will take the\nfirst bit of each PCP string",
    "start": "1510280",
    "end": "1518810"
  },
  {
    "text": "and concatenate them\ntogether and hash them using a hash function.",
    "start": "1518810",
    "end": "1526190"
  },
  {
    "text": "So I apply a hash function\nhere, so to the first column.",
    "start": "1526190",
    "end": "1536929"
  },
  {
    "text": "And I get some hash value, h1. And I will do the same\nthing for the second column.",
    "start": "1536930",
    "end": "1542755"
  },
  {
    "text": " So I can get h2.",
    "start": "1542755",
    "end": "1550340"
  },
  {
    "text": "So for each column,\nI will hash it. And so basically,\nfor each column",
    "start": "1550340",
    "end": "1558080"
  },
  {
    "text": "I will hash it to\nget some hash value. So if the length of the PCP is\nL, then I get L hash values.",
    "start": "1558080",
    "end": "1563440"
  },
  {
    "text": " So under this variant of Kilians\nprotocol, I work as follows.",
    "start": "1563440",
    "end": "1571470"
  },
  {
    "text": "So I first will send all of the\nhash values, from h1 to hk-- ",
    "start": "1571470",
    "end": "1579370"
  },
  {
    "text": "sorry, h1 to hL for each column. And then I will\nhave the verifier",
    "start": "1579370",
    "end": "1587020"
  },
  {
    "text": "to send one single PCP query. ",
    "start": "1587020",
    "end": "1593560"
  },
  {
    "text": "So a PCP query, remember,\nis a subset of indices. ",
    "start": "1593560",
    "end": "1600940"
  },
  {
    "text": "So this is one single\nPCP query for-- so I mean, it's a\nPCP query for one",
    "start": "1600940",
    "end": "1607300"
  },
  {
    "text": "of the state, one\nof the PCP string. And finally, I will\nopen the query column",
    "start": "1607300",
    "end": "1616300"
  },
  {
    "text": "for these hash function,\nfor those hash function. ",
    "start": "1616300",
    "end": "1629530"
  },
  {
    "text": "So what do I mean? So this is so you can view\nthis PCB string as a matrix.",
    "start": "1629530",
    "end": "1639720"
  },
  {
    "text": "So this matrix has L\ncolumns and the k rows.",
    "start": "1639720",
    "end": "1645590"
  },
  {
    "text": " And for this one,\nsingle PCP query,",
    "start": "1645590",
    "end": "1652550"
  },
  {
    "text": "it will query some\nof the positions. So suppose it queries\nthis second position",
    "start": "1652550",
    "end": "1657620"
  },
  {
    "text": "and the last position. Then I will open the\ncorresponding column",
    "start": "1657620",
    "end": "1663320"
  },
  {
    "text": "for this query position. So let's denote the first\ncolumn as a column 1",
    "start": "1663320",
    "end": "1673250"
  },
  {
    "text": "and the second column as\na column 2, et cetera.",
    "start": "1673250",
    "end": "1678560"
  },
  {
    "text": "Then the third-round\nmessage will contain all of the column Q,\nwhere this Q is in this query,",
    "start": "1678560",
    "end": "1691500"
  },
  {
    "text": "is in this subset. So this is essentially\nthe same as Kilian,",
    "start": "1691500",
    "end": "1698730"
  },
  {
    "text": "except that I don't use a\nMerkle tree to commit them.",
    "start": "1698730",
    "end": "1704380"
  },
  {
    "text": "I use a hash function\nto directly hash",
    "start": "1704380",
    "end": "1709590"
  },
  {
    "text": "each column separately. ",
    "start": "1709590",
    "end": "1715260"
  },
  {
    "text": "Yeah, question? AUDIENCE: Do we use Merkle\ntree to commit to the h1, h2? ZHENGZHONG JIN: h1?",
    "start": "1715260",
    "end": "1721350"
  },
  {
    "text": "So at this point, I do not use\nthe Merkle tree to commit them. So I directly send\nthem to the verifier.",
    "start": "1721350",
    "end": "1728010"
  },
  {
    "text": "So OK.  So I send them in\nthe first message.",
    "start": "1728010",
    "end": "1734020"
  },
  {
    "text": "So by sending them, I\nalready fixed the PCP matrix intuitively. So then after I fix them, I have\nthe verifier send the PCP query.",
    "start": "1734020",
    "end": "1746429"
  },
  {
    "text": "And I have the prover\nto answer the same PCP query for all of the PCP.",
    "start": "1746430",
    "end": "1752800"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] I\nfollow, the third message here is the point that\nwe [INAUDIBLE], like [INAUDIBLE] OK, right?",
    "start": "1752800",
    "end": "1759476"
  },
  {
    "text": "ZHENGZHONG JIN: Yes. Yes. Good. Good observation. Yeah. ",
    "start": "1759477",
    "end": "1767980"
  },
  {
    "text": "So this is the initial protocol. ",
    "start": "1767980",
    "end": "1802240"
  },
  {
    "text": "So right. Yeah. AUDIENCE: Does the same\nthing, all those [INAUDIBLE],",
    "start": "1802240",
    "end": "1809905"
  },
  {
    "text": "is that small enough\nfor the verifier? ZHENGZHONG JIN: Oh, sorry?",
    "start": "1809905",
    "end": "1814940"
  },
  {
    "text": "You mean k, this one. AUDIENCE: Yeah, when\nyou open the column, is that's small enough\nfor the verifier? ZHENGZHONG JIN: Is that\nenough for the verifier?",
    "start": "1814940",
    "end": "1821640"
  },
  {
    "text": "AUDIENCE: No, small\nenough, small enough. ZHENGZHONG JIN: Yeah. So good. So the size of Q is only--",
    "start": "1821640",
    "end": "1827179"
  },
  {
    "text": "you can think it's almost a poly\nlog in the size of the circuit C. So this Q is very\nsmall, you can think.",
    "start": "1827180",
    "end": "1834600"
  },
  {
    "text": "So for each row,\nI'm going to open--",
    "start": "1834600",
    "end": "1840110"
  },
  {
    "text": "for each row, I'm going\nto open Q positions. So I have k rows. So the third row on the\nmessage is almost k times Q,",
    "start": "1840110",
    "end": "1847830"
  },
  {
    "text": "which is almost k. It grows with k. Yeah.",
    "start": "1847830",
    "end": "1852860"
  },
  {
    "text": " So what does the verifier do? So the verifier, it will first--",
    "start": "1852860",
    "end": "1861180"
  },
  {
    "text": "so the verifier will\nfirst verify the opening",
    "start": "1861180",
    "end": "1868560"
  },
  {
    "text": "is consistent with the hash. So it will verify hash. ",
    "start": "1868560",
    "end": "1875760"
  },
  {
    "text": "And the verification\nprocess is-- the verify just recomputes the\nhash for these queried positions",
    "start": "1875760",
    "end": "1882660"
  },
  {
    "text": "and see if they are consistent\nwith the first round message. So it will hash the--",
    "start": "1882660",
    "end": "1888930"
  },
  {
    "text": "use some hash function\napplied to the query position",
    "start": "1888930",
    "end": "1894400"
  },
  {
    "text": "and then check if it is\nthe same as the hQ for each of the Q in this\nquery, the subset.",
    "start": "1894400",
    "end": "1904529"
  },
  {
    "text": "And secondly, the verifier\nalso need to verify the PCP.",
    "start": "1904530",
    "end": "1911580"
  },
  {
    "text": "So the verifier will\nrun the PCP verification for each of the\nstatement, from x1 to xk.",
    "start": "1911580",
    "end": "1918040"
  },
  {
    "text": "So it will run the\nPCP verification for xi and for the same\nquery Q and the PCP answer.",
    "start": "1918040",
    "end": "1929480"
  },
  {
    "text": "PCP answer for the\ni-th row is the-- for i-th sigma xi is\nthe i-th coordinate",
    "start": "1929480",
    "end": "1939370"
  },
  {
    "text": "of this column vector. And you take the collection of\nall of the such position in Q.",
    "start": "1939370",
    "end": "1951550"
  },
  {
    "text": "Yeah. So that's the initial protocol. But this protocol is an\ninteractive protocol.",
    "start": "1951550",
    "end": "1957980"
  },
  {
    "text": "So to build a SNARG, we need\nto make it non-interactive.",
    "start": "1957980",
    "end": "1963890"
  },
  {
    "text": "So I think the last lecture\nbefore Thanksgiving, so that lecture is about the\ncorrelation-intractable hash",
    "start": "1963890",
    "end": "1973450"
  },
  {
    "text": "and how to use it to build\na non-interactive proof from interactive proof. So let me recall what is a\ncorrelation-Intractable hash.",
    "start": "1973450",
    "end": "1980610"
  },
  {
    "start": "1980610",
    "end": "1987020"
  },
  {
    "text": "So correlation-intractable\nhash--",
    "start": "1987020",
    "end": "2002860"
  },
  {
    "text": "so I will call it a CI hash,\na CI hash for a relation L--",
    "start": "2002860",
    "end": "2008410"
  },
  {
    "text": "for a relation--\nfor a relation R.",
    "start": "2008410",
    "end": "2014980"
  },
  {
    "text": "So R is a subset of x times y. So x here is the--",
    "start": "2014980",
    "end": "2020835"
  },
  {
    "text": " so in some subset of x and\ny is a tuple of algorithms.",
    "start": "2020835",
    "end": "2034900"
  },
  {
    "text": "So the tuple consists of a\nkey generator and a CI hash.",
    "start": "2034900",
    "end": "2040880"
  },
  {
    "text": " And it satisfies the\nfollowing property.",
    "start": "2040880",
    "end": "2047540"
  },
  {
    "text": "So for any.  non-uniform PBT adversary, we\nneed the following condition.",
    "start": "2047540",
    "end": "2063800"
  },
  {
    "text": "So the adversary is first given\nthe hash key generated by some--",
    "start": "2063800",
    "end": "2072020"
  },
  {
    "text": "let's say this is CI hash key\ngenerated by the key chain",
    "start": "2072020",
    "end": "2077780"
  },
  {
    "text": "algorithm. And the adversary is\nrequired to find some input",
    "start": "2077780",
    "end": "2083629"
  },
  {
    "text": "x such that the pair\nof the x and the hash",
    "start": "2083630",
    "end": "2089960"
  },
  {
    "text": "of-- and the CI hash of x,\nso the pair of them is in R.",
    "start": "2089960",
    "end": "2100220"
  },
  {
    "text": "So this event is bounded\nby some negligible amount.",
    "start": "2100220",
    "end": "2105910"
  },
  {
    "text": "Yeah. So this is what you learned\nfrom the last lecture.",
    "start": "2105910",
    "end": "2111980"
  },
  {
    "text": "So this is just a recap. And yes.",
    "start": "2111980",
    "end": "2119025"
  },
  {
    "start": "2119025",
    "end": "2125170"
  },
  {
    "text": "And also recall, so given\nsuch a hash function, how do you compile\nan interactive proof",
    "start": "2125170",
    "end": "2132160"
  },
  {
    "text": "to a non-interactive one? So the idea is, you\nstart with some-- so given any three-round public\ncoin interactive protocol.",
    "start": "2132160",
    "end": "2142000"
  },
  {
    "text": "So public coin means\nsecond-round message is a uniform random string. So suppose you have\nsuch a protocol.",
    "start": "2142000",
    "end": "2149150"
  },
  {
    "text": "Then you can compile it using\nthis hash function to obtain a non-interactive one. ",
    "start": "2149150",
    "end": "2158690"
  },
  {
    "text": "So the proof consists of the\ntranscript of the protocol. So the proof is\njust alpha and beta.",
    "start": "2158690",
    "end": "2166470"
  },
  {
    "text": "So beta equals the CI\nhash of the CI hash key",
    "start": "2166470",
    "end": "2171710"
  },
  {
    "text": "and the alpha and the gamma. ",
    "start": "2171710",
    "end": "2184105"
  },
  {
    "text": "And we need to\nrecall, how do you prove the soundness of this\nnon-interactive protocol? ",
    "start": "2184105",
    "end": "2192110"
  },
  {
    "text": "So to prove the\nsoundness, how do we use this\ncorrelation-intractability",
    "start": "2192110",
    "end": "2197180"
  },
  {
    "text": "to prove the soundness? So to prove the\nsoundness, you need to, firstly, define a relation.",
    "start": "2197180",
    "end": "2202559"
  },
  {
    "text": "And the relation\nis the relation R. So it consists of all of the\nfirst-round and second-round",
    "start": "2202560",
    "end": "2208580"
  },
  {
    "text": "message, alpha beta,\nsuch that there exists a pseudorandom\nmessage that can make the verifier accept.",
    "start": "2208580",
    "end": "2215045"
  },
  {
    "text": " So you define this relation\nfor the interactive protocol.",
    "start": "2215045",
    "end": "2221640"
  },
  {
    "text": "And then, so for\nany proof, for any--",
    "start": "2221640",
    "end": "2229740"
  },
  {
    "text": "so to prove the\nsoundness, we need to consider this x, the\ncase when x is not in L.",
    "start": "2229740",
    "end": "2236280"
  },
  {
    "text": "And yes, for x is not in L. And\nsuppose any cheating prover--",
    "start": "2236280",
    "end": "2241960"
  },
  {
    "text": "let's say we have a cheating\nprover with an output, a cheating proof. ",
    "start": "2241960",
    "end": "2249120"
  },
  {
    "text": "So let's say the cheating prover\noutputs a cheating proof, alpha star, beta star, and gamma star.",
    "start": "2249120",
    "end": "2255930"
  },
  {
    "text": "And if the proof is\naccepted, then this means-- so if this proof is\naccepted, then this",
    "start": "2255930",
    "end": "2270300"
  },
  {
    "text": "means this beta star equals\nthe CI hash of alpha star",
    "start": "2270300",
    "end": "2277240"
  },
  {
    "text": "under the CI hash key. So I ignore the\nCI hash key here.",
    "start": "2277240",
    "end": "2283270"
  },
  {
    "text": "And also, this-- yeah. And also the original\nverification passes.",
    "start": "2283270",
    "end": "2290025"
  },
  {
    "text": " So here is a different\nverification,",
    "start": "2290025",
    "end": "2295039"
  },
  {
    "text": "so under the original\nverification passes,",
    "start": "2295040",
    "end": "2304300"
  },
  {
    "text": "So this means this alpha-- alpha star and beta star\nis in this relation.",
    "start": "2304300",
    "end": "2311020"
  },
  {
    "text": "And this is how you prove\nthe soundness because-- so if a cheating prover exists,\nthen you reach a contradiction",
    "start": "2311020",
    "end": "2320980"
  },
  {
    "text": "with the correlation-in\ntractability because the cheating prover also\noutputs the input and output pair such that this such\nthat this beta equals",
    "start": "2320980",
    "end": "2330490"
  },
  {
    "text": "the hash of the alpha. But it satisfies\nthis relation, R.",
    "start": "2330490",
    "end": "2336230"
  },
  {
    "text": "So this is from\nthe last lecture. Any questions?",
    "start": "2336230",
    "end": "2342770"
  },
  {
    "text": "So here I want to\nemphasize here that there is a condition in this proof.",
    "start": "2342770",
    "end": "2349200"
  },
  {
    "text": "So the condition is-- So we need this for\nsuch, say hash 2 exists,",
    "start": "2349200",
    "end": "2355670"
  },
  {
    "text": "we need this relation R.\nR, It needs to be sparse.",
    "start": "2355670",
    "end": "2365930"
  },
  {
    "text": "So what do I mean? Or evasive-- so sparse here\nmeans, for any fixed R, alpha,",
    "start": "2365930",
    "end": "2375890"
  },
  {
    "text": "the fraction of the beta that\ncan make this pair, alpha beta. It satisfies this relation\nis a negligible fraction.",
    "start": "2375890",
    "end": "2383370"
  },
  {
    "text": "So it means, all of beta such\nthat alpha beta is in this R.",
    "start": "2383370",
    "end": "2395550"
  },
  {
    "text": "If you divide it by\nall the size of y,",
    "start": "2395550",
    "end": "2401260"
  },
  {
    "text": "then we need this\nto be negligible. So this condition is crucial\nfor the CI hash to exist.",
    "start": "2401260",
    "end": "2410430"
  },
  {
    "text": "The reason is-- do anyone\nknow why this is the case?",
    "start": "2410430",
    "end": "2416194"
  },
  {
    "start": "2416195",
    "end": "2421500"
  },
  {
    "text": "So let's consider\nan extreme case. So let's say if there exists--",
    "start": "2421500",
    "end": "2429380"
  },
  {
    "start": "2429380",
    "end": "2434400"
  },
  {
    "text": "let's consider extreme case. So let's say if there\nexists some alpha, alpha 0,",
    "start": "2434400",
    "end": "2439710"
  },
  {
    "text": "some fixed alpha 0, which\nis in the input space,",
    "start": "2439710",
    "end": "2445770"
  },
  {
    "text": "such that for all of the beta,\nthis alpha and beta is alpha 0,",
    "start": "2445770",
    "end": "2454450"
  },
  {
    "text": "beta is in this R. Then it means\nthat then for any hash function,",
    "start": "2454450",
    "end": "2462099"
  },
  {
    "text": "it cannot be\ncorrelation-intractable for such R, because any hash function\nwill output something,",
    "start": "2462100",
    "end": "2468370"
  },
  {
    "text": "some beta, and it will\nsatisfies this relation. So this condition,\nso at least we",
    "start": "2468370",
    "end": "2477460"
  },
  {
    "text": "need this fraction\nto be less than 1. ",
    "start": "2477460",
    "end": "2483130"
  },
  {
    "text": "The problem is, if we\nwant to apply the CI hash construction here,\nit's not clear",
    "start": "2483130",
    "end": "2490300"
  },
  {
    "text": "whether we can define a\nrelation that is sparse. So let's modify the\nconstruction using this CI hash",
    "start": "2490300",
    "end": "2499180"
  },
  {
    "text": "paradigm So we will replace\nthe second message, Q.",
    "start": "2499180",
    "end": "2508670"
  },
  {
    "text": "So instead of having\nthe verifier send the Q, we have the prover compute this\nQ by itself using the CI hash.",
    "start": "2508670",
    "end": "2516145"
  },
  {
    "text": " And so now we apply the say\nhash to all of the first round",
    "start": "2516145",
    "end": "2524839"
  },
  {
    "text": "message h1 to hQ-- sorry, h1 to hL.",
    "start": "2524840",
    "end": "2531710"
  },
  {
    "text": "And then we put the CI\nhash key inside of the CRS. ",
    "start": "2531710",
    "end": "2555345"
  },
  {
    "text": "So next I will\ndefine the relation R and try to prove the soundness. ",
    "start": "2555345",
    "end": "2603030"
  },
  {
    "text": "So, yeah? AUDIENCE: Can you say what\nchanges you made again? ZHENGZHONG JIN: Yes. Good.",
    "start": "2603030",
    "end": "2610589"
  },
  {
    "text": "So the changes is\ninstead of having the prover to send a\nmessage to the verifier",
    "start": "2610590",
    "end": "2617700"
  },
  {
    "text": "and have the verifier\nsend back a challenge, I'm going to have the prover\nnot send this h1 to hL.",
    "start": "2617700",
    "end": "2626470"
  },
  {
    "text": "So the prover directly\napplies a CI hash to h1 to hL and obtain some query.",
    "start": "2626470",
    "end": "2633160"
  },
  {
    "text": "So the prover can proceed\nto the third round and finish the third round. So the proof will\nconsist of the transcript",
    "start": "2633160",
    "end": "2639850"
  },
  {
    "text": "of the protocol, which\nis all of the h1 to hL and the third-round.",
    "start": "2639850",
    "end": "2645280"
  },
  {
    "text": "Message. OK. Yeah? AUDIENCE: What assumption\nare we making for--",
    "start": "2645280",
    "end": "2651490"
  },
  {
    "text": "we need the output\nphase of the CIh to be subsets that the verifier\nwould query or something?",
    "start": "2651490",
    "end": "2657430"
  },
  {
    "text": "ZHENGZHONG JIN: Right. Good question. So, in fact, we need the\nPCP to be a public coin.",
    "start": "2657430",
    "end": "2663230"
  },
  {
    "text": "So, yeah. That's the implicit condition. ",
    "start": "2663230",
    "end": "2669835"
  },
  {
    "text": "So in the general\ncase, the PCP query may not be uniformly random.",
    "start": "2669835",
    "end": "2676120"
  },
  {
    "text": "So in fact, there is some\nPCP, some query sampler that takes take some\nuniform random string,",
    "start": "2676120",
    "end": "2682640"
  },
  {
    "text": "and it will compute\nthe actual PCP query. So, yeah.",
    "start": "2682640",
    "end": "2687964"
  },
  {
    "text": "AUDIENCE: So we're also kind of\nassuming that the output of CIh is kind of uniformly\ndistributed,",
    "start": "2687965",
    "end": "2692990"
  },
  {
    "text": "or pseudorandomness? ZHENGZHONG JIN: Yeah. I mean, so in the general\ncase-- so in fact,",
    "start": "2692990",
    "end": "2702080"
  },
  {
    "text": "this is just some\nsuccinct way to describe",
    "start": "2702080",
    "end": "2707330"
  },
  {
    "text": "how you generate the query. So in fact, the PCP\nquery is generated by using some query\ngenerator or some sampler.",
    "start": "2707330",
    "end": "2717710"
  },
  {
    "text": "So the sampler will take\nsome uniform randomness R and generate the PCP query. So what you do is you take\nthe output of the CI hash",
    "start": "2717710",
    "end": "2726680"
  },
  {
    "text": "as the randomness, and then\nyou generate it from it to get a PCP query.",
    "start": "2726680",
    "end": "2734550"
  },
  {
    "text": "Yeah. ",
    "start": "2734550",
    "end": "2743250"
  },
  {
    "text": "OK, so next I will try\nto prove the security of this construction, try\nto prove the soundness.",
    "start": "2743250",
    "end": "2752800"
  },
  {
    "text": "So completeness is easy to show. You just can do it yourself.",
    "start": "2752800",
    "end": "2759840"
  },
  {
    "text": "I will only prove\nthe soundness here. AUDIENCE: [INAUDIBLE] ZHENGZHONG JIN: Yeah. AUDIENCE: For [INAUDIBLE]\nwhatever indices for PCP",
    "start": "2759840",
    "end": "2768840"
  },
  {
    "text": "we generate this\nprobability 1, [INAUDIBLE]",
    "start": "2768840",
    "end": "2774210"
  },
  {
    "text": "verify those [INAUDIBLE]\nSo for the PCP itself,",
    "start": "2774210",
    "end": "2783150"
  },
  {
    "text": "is complete this one? ZHENGZHONG JIN: Oh, right. Yes. Good. Yeah. We assume that there-- yeah, we choose a PCP\nwith perfect correctness.",
    "start": "2783150",
    "end": "2790930"
  },
  {
    "text": "Yeah. Yeah. Good question. ",
    "start": "2790930",
    "end": "2800270"
  },
  {
    "text": "So let's first try to\nprove the soundness.",
    "start": "2800270",
    "end": "2806306"
  },
  {
    "start": "2806306",
    "end": "2814339"
  },
  {
    "text": "So the initial\nattempt is to define a relation R similar to\nthe relation R as before.",
    "start": "2814340",
    "end": "2820200"
  },
  {
    "text": "So we just define it as\nthe relation R consists of all the pairs of\nh1 to hL and the query",
    "start": "2820200",
    "end": "2829220"
  },
  {
    "text": "set Q such that there exists\na pseudorandom message.",
    "start": "2829220",
    "end": "2835380"
  },
  {
    "text": "So gamma here is the\npseudorandom message,",
    "start": "2835380",
    "end": "2844222"
  },
  {
    "text": "such that the verifier accept. ",
    "start": "2844222",
    "end": "2870240"
  },
  {
    "text": "So this is the initial attempt\nto prove the soundness. So we'll do the same thing.",
    "start": "2870240",
    "end": "2876160"
  },
  {
    "text": "So this R is the\nsame as the relation R we defined for\nthe CI has here,",
    "start": "2876160",
    "end": "2881520"
  },
  {
    "text": "except that I just\nreplaced the alpha, beta, gamma with this protocol.",
    "start": "2881520",
    "end": "2886660"
  },
  {
    "text": "But the issue is,\nwith this relation, it's not clear whether this\nrelation is a sparse relation.",
    "start": "2886660",
    "end": "2892010"
  },
  {
    "start": "2892010",
    "end": "2901090"
  },
  {
    "text": "The reason is that\nthis hash function must be a compressing hash function.",
    "start": "2901090",
    "end": "2906490"
  },
  {
    "text": "So if we choose a compressing\nhash function, then for any hash value,\nh1 to hL, there",
    "start": "2906490",
    "end": "2913230"
  },
  {
    "text": "might be multiple\npreimages of the PCP. So for one PCP, so\nlet's say we have",
    "start": "2913230",
    "end": "2919300"
  },
  {
    "text": "one preimage of the PCP,\nwhich is PCP1 to PCPk.",
    "start": "2919300",
    "end": "2924370"
  },
  {
    "text": "Then for those PCP, you may have\na Q that can make them accept.",
    "start": "2924370",
    "end": "2929750"
  },
  {
    "text": "You may have a one Q\nto make them accept. But for other\npreimage of the PCP,",
    "start": "2929750",
    "end": "2935030"
  },
  {
    "text": "it may have another Q that\ncan make the query accept. So now this relation\nwill take the union",
    "start": "2935030",
    "end": "2943990"
  },
  {
    "text": "of all of those PCP queries. So it's not clear\nif this relation",
    "start": "2943990",
    "end": "2950710"
  },
  {
    "text": "has sparsity less than 1. Yeah. So what we will do is we will\nchoose a special hash function.",
    "start": "2950710",
    "end": "2959329"
  },
  {
    "text": "And so this special hash\nfunction is still compressing, but it will show us some\ninformation about its preimage.",
    "start": "2959330",
    "end": "2969260"
  },
  {
    "text": "So now I will define this\na special hash function. ",
    "start": "2969260",
    "end": "2980780"
  },
  {
    "text": "So the hash function\nis called somewhere statistical binding hash.",
    "start": "2980780",
    "end": "2987244"
  },
  {
    "start": "2987245",
    "end": "3005590"
  },
  {
    "text": "I will call it SSB. So it's a SSB. So such a function is\ndefined as follows.",
    "start": "3005590",
    "end": "3015070"
  },
  {
    "text": "So SSB is also a\ntuple of algorithms. ",
    "start": "3015070",
    "end": "3024730"
  },
  {
    "text": "So it has a key generator\nand some SSB hash algorithm",
    "start": "3024730",
    "end": "3029920"
  },
  {
    "text": "with the following syntax. So the key generation\nalgorithm will sample some key.",
    "start": "3029920",
    "end": "3038160"
  },
  {
    "text": " And the key generator will will\ntake some security parameter",
    "start": "3038160",
    "end": "3047300"
  },
  {
    "text": "lambda as input, and also it\nwill take some index I as input,",
    "start": "3047300",
    "end": "3053240"
  },
  {
    "text": "such that-- and then the SSB hash\nalgorithm will use the SSB key",
    "start": "3053240",
    "end": "3065630"
  },
  {
    "text": "and it will take some message,\nx1 to xn, as input and output",
    "start": "3065630",
    "end": "3071000"
  },
  {
    "text": "some hash. And we require the\nfollowing two properties. So the first property is called\nthe key indistinguishability,",
    "start": "3071000",
    "end": "3080240"
  },
  {
    "text": "or key hiding, so key\nindistinguishability. ",
    "start": "3080240",
    "end": "3092370"
  },
  {
    "text": "So it says that for any two\nindices, so i1 and i2 in this n.",
    "start": "3092370",
    "end": "3100710"
  },
  {
    "text": "So the key generated by\nusing the first indices",
    "start": "3100710",
    "end": "3108450"
  },
  {
    "text": "is indistinguishable\nwith the key",
    "start": "3108450",
    "end": "3114329"
  },
  {
    "text": "generated by the second index. And the second property is\ncalled statistical binding.",
    "start": "3114330",
    "end": "3122029"
  },
  {
    "start": "3122030",
    "end": "3132990"
  },
  {
    "text": "So statistical binding\nbasically says the hash function",
    "start": "3132990",
    "end": "3140850"
  },
  {
    "text": "is binding for the position i. So it says for any x1 to xn\nand x1 prime to xn prime.",
    "start": "3140850",
    "end": "3158559"
  },
  {
    "text": "So if the SSB hash\nof them is the same,",
    "start": "3158560",
    "end": "3179380"
  },
  {
    "text": "then we have this\nxi equals xi prime.",
    "start": "3179380",
    "end": "3186400"
  },
  {
    "text": "So it says the hash\nvalue will bind the value at the i-th position\nof its input, xi.",
    "start": "3186400",
    "end": "3193630"
  },
  {
    "text": "So here the k is generated\nin this way for this index i.",
    "start": "3193630",
    "end": "3201555"
  },
  {
    "start": "3201555",
    "end": "3224510"
  },
  {
    "text": "Any question? Yeah. AUDIENCE: Could you explain\nwhy that relation might not be sparse?",
    "start": "3224510",
    "end": "3230847"
  },
  {
    "text": "ZHENGZHONG JIN: Oh, right. So it's not clear whether\nthis is sparse or not.",
    "start": "3230847",
    "end": "3236619"
  },
  {
    "start": "3236620",
    "end": "3242600"
  },
  {
    "text": "The reason is that because\nthis hash, so h1 to hL, are the hash values.",
    "start": "3242600",
    "end": "3248349"
  },
  {
    "text": " So initially, we have\nthis PCP1 to PCPk,",
    "start": "3248350",
    "end": "3253940"
  },
  {
    "text": "and we hash them to a\nsuccinct hash value, h1 to hL.",
    "start": "3253940",
    "end": "3260569"
  },
  {
    "text": "But the size of the hash is\nmuch smaller than the preimage. So for a fixed h1 to hL, there\nmight be multiple preimages.",
    "start": "3260570",
    "end": "3271600"
  },
  {
    "text": "And for one per image,\nit may have some-- for example, for this\nfixed one preimage,",
    "start": "3271600",
    "end": "3278550"
  },
  {
    "text": "it may have some query set Q\nthat can make all of the query be accepted.",
    "start": "3278550",
    "end": "3284730"
  },
  {
    "text": "But there might\nbe some other PCP preimage for the same h1 to hQ.",
    "start": "3284730",
    "end": "3290530"
  },
  {
    "text": "So let's say it's\nsome PCP1 PCPk prime. ",
    "start": "3290530",
    "end": "3296590"
  },
  {
    "text": "And they may also hash\nto the same hash value. So if this is the case, then for\nthose set of PCP1 PCPk prime,",
    "start": "3296590",
    "end": "3308130"
  },
  {
    "text": "they may have some\nother query set Q prime that can make each of\nthe PCP1 prime to PCPk prime",
    "start": "3308130",
    "end": "3317790"
  },
  {
    "text": "be accepted. But if this is the case, then\nthis Q and Q prime need to be--",
    "start": "3317790",
    "end": "3326420"
  },
  {
    "text": "so they are also\nin this relation. R. So if this is the case, then\nboth of these, this h1 to hL--",
    "start": "3326420",
    "end": "3337090"
  },
  {
    "text": "hL and Q is in this R. And\nthe Q prime is also in R.",
    "start": "3337090",
    "end": "3346330"
  },
  {
    "text": "So you can do this do\nthis argument for each of the preimage of this H1. To hQ.",
    "start": "3346330",
    "end": "3351680"
  },
  {
    "text": "And the issue is that there\nare many, many, many preimages. So it's very compressing.",
    "start": "3351680",
    "end": "3358610"
  },
  {
    "text": "So the number of\npreimages is much larger than the size of the Q, all\npossibilities of Q. So, yeah.",
    "start": "3358610",
    "end": "3368633"
  },
  {
    "text": "AUDIENCE: In order\nfor a cheating prover to take advantage\nof this [INAUDIBLE], they would have to find\na collision like that.",
    "start": "3368633",
    "end": "3375520"
  },
  {
    "text": "So why are we\nworried about this? ZHENGZHONG JIN: Good question. So for example, if you take\na specific hash function,",
    "start": "3375520",
    "end": "3382660"
  },
  {
    "text": "it's not clear\nwhether the prover can leverage this kind of attack. But it's also not clear\nhow to prove the soundness.",
    "start": "3382660",
    "end": "3389980"
  },
  {
    "text": "So, yeah. Sorry. ",
    "start": "3389980",
    "end": "3399440"
  },
  {
    "text": "OK. So next I will show you\nhow to build such a-- yeah, any question? OK.",
    "start": "3399440",
    "end": "3404890"
  },
  {
    "text": "So next I will show you how\nto build such a SSB from FHE.",
    "start": "3404890",
    "end": "3411180"
  },
  {
    "text": "So the construction\nis very simple.",
    "start": "3411180",
    "end": "3422190"
  },
  {
    "text": "So do you remember what is FHE? So FHE is some public\nkey encryption,",
    "start": "3422190",
    "end": "3429600"
  },
  {
    "text": "where you can, given\na ciphertext of M you can homomorphically\nevaluate on the ciphertext",
    "start": "3429600",
    "end": "3436500"
  },
  {
    "text": "for any function F and to\nget a ciphertext of F of M. So that's the FHE.",
    "start": "3436500",
    "end": "3441640"
  },
  {
    "text": "So to build SSB we\ndo the following. So from the FHE--",
    "start": "3441640",
    "end": "3448660"
  },
  {
    "text": "so for the key generation,\nso for the index i,",
    "start": "3448660",
    "end": "3455650"
  },
  {
    "text": "we're going to generate\na FHE ciphertext of i. ",
    "start": "3455650",
    "end": "3465430"
  },
  {
    "text": "And we define this\nciphertext as the SSB key",
    "start": "3465430",
    "end": "3471609"
  },
  {
    "text": "And to use this ciphertext\nto hash x1 to xn,",
    "start": "3471610",
    "end": "3479470"
  },
  {
    "text": "the idea is we're going\nto homomorphically pick the i-th position under hood\nof FHE for those x1 to xn.",
    "start": "3479470",
    "end": "3488410"
  },
  {
    "text": "So what we will do is we will\ndo the homomorphic evaluation",
    "start": "3488410",
    "end": "3498140"
  },
  {
    "text": "of some function F. And F\nhas x1 to xn hardwired in it.",
    "start": "3498140",
    "end": "3503299"
  },
  {
    "text": "And we'll do this [INAUDIBLE]\non the ciphertext of i.",
    "start": "3503300",
    "end": "3510010"
  },
  {
    "text": " And this is our hash value. So here, this f is\ndefined as follows.",
    "start": "3510010",
    "end": "3517740"
  },
  {
    "text": "So F x1 to xn, given index\ni, it will output of i as--",
    "start": "3517740",
    "end": "3523080"
  },
  {
    "text": "i as coordinate. So intuitively, we just pick\nthe xi under the hood of FHE.",
    "start": "3523080",
    "end": "3529520"
  },
  {
    "start": "3529520",
    "end": "3536730"
  },
  {
    "text": "So here, so this\nis a hash function because the size of the hash\nvalue is just a ciphertext.",
    "start": "3536730",
    "end": "3543150"
  },
  {
    "text": "So the size of the hash\nvalue is poly lambda. ",
    "start": "3543150",
    "end": "3550880"
  },
  {
    "text": "And the key indistinguishability\nfollows from the security of FHE because the index i is hiding.",
    "start": "3550880",
    "end": "3557520"
  },
  {
    "start": "3557520",
    "end": "3562980"
  },
  {
    "text": "So the second property,\nthis statistical binding, you can show it directly\nbecause the hash",
    "start": "3562980",
    "end": "3569520"
  },
  {
    "text": "value contains the\nhomomorphic encryption of xi.",
    "start": "3569520",
    "end": "3574530"
  },
  {
    "start": "3574530",
    "end": "3580620"
  },
  {
    "text": "Any questions? ",
    "start": "3580620",
    "end": "3588119"
  },
  {
    "text": "So later, we will use\nthis SSB, but we will use an additional property.",
    "start": "3588120",
    "end": "3593290"
  },
  {
    "text": "So this property is\ncalled extraction. So intuitively,\nthis hash value, it",
    "start": "3593290",
    "end": "3603150"
  },
  {
    "text": "contains the ciphertext of xi. So in fact, it contains FHE.",
    "start": "3603150",
    "end": "3610500"
  },
  {
    "text": " And if you know the\nsecret key of FHE,",
    "start": "3610500",
    "end": "3617119"
  },
  {
    "text": "you can even decrypt this\ni from the hash value. So we need the extraction.",
    "start": "3617120",
    "end": "3623450"
  },
  {
    "text": " So the extraction property says\nthat there exists an extractor.",
    "start": "3623450",
    "end": "3632470"
  },
  {
    "text": "So extractor is a\npolynomial time algorithm. And moreover, so in the\nkey generation algorithm",
    "start": "3632470",
    "end": "3641080"
  },
  {
    "text": "I will add a trapdoor in it. So the key generator will\nalso output some trapdoor.",
    "start": "3641080",
    "end": "3646369"
  },
  {
    "text": "And there is some extractor\nsuch that the extractor will",
    "start": "3646370",
    "end": "3652300"
  },
  {
    "text": "take the trapdoor as input and\nalso the hash value as input,",
    "start": "3652300",
    "end": "3657410"
  },
  {
    "text": "and it will extract something. And we further\nrequire the extractor",
    "start": "3657410",
    "end": "3664450"
  },
  {
    "text": "has correctness, which\nmeans, for any x1 to xn,",
    "start": "3664450",
    "end": "3671140"
  },
  {
    "text": "if you hash it under a P k-- ",
    "start": "3671140",
    "end": "3677840"
  },
  {
    "text": "so let's say S. S is the\nhash of the x1 to xn.",
    "start": "3677840",
    "end": "3683140"
  },
  {
    "start": "3683140",
    "end": "3688430"
  },
  {
    "text": "Then the extracted value is\nconsistent with the xi, with xi. ",
    "start": "3688430",
    "end": "3702230"
  },
  {
    "text": "So this is the\nextraction correctness-- so if the key, if this hash\nkey is for the i, s position,",
    "start": "3702230",
    "end": "3715319"
  },
  {
    "text": "if the hash key is generated\nfor the i, s position. ",
    "start": "3715320",
    "end": "3727700"
  },
  {
    "text": "So now we will go back\nto the construction.",
    "start": "3727700",
    "end": "3733320"
  },
  {
    "text": "So now we have this\nSSB hash from FHE. We'll go back to\nthis construction",
    "start": "3733320",
    "end": "3739950"
  },
  {
    "text": "and modify this hash\nfunction we use.",
    "start": "3739950",
    "end": "3745109"
  },
  {
    "text": "So the hash function we\nuse, we will use a SSB hash.",
    "start": "3745110",
    "end": "3753120"
  },
  {
    "text": "And the SSB key, we\nwill move it to the--",
    "start": "3753120",
    "end": "3759840"
  },
  {
    "text": "we'll add the SSB\nkey to the CRS. So this is SSB key.",
    "start": "3759840",
    "end": "3766359"
  },
  {
    "start": "3766360",
    "end": "3771450"
  },
  {
    "text": "So now we will use this SSB hash\nto hash each column of the PCP",
    "start": "3771450",
    "end": "3776520"
  },
  {
    "text": "matrix to this PCP matrix. ",
    "start": "3776520",
    "end": "3783690"
  },
  {
    "text": "And all the other things\nare the same as before. Any questions?",
    "start": "3783690",
    "end": "3789050"
  },
  {
    "text": "OK, yeah, maybe\nwe also need to-- when we verify the hash, we also\nuse SSB to recompute each column",
    "start": "3789050",
    "end": "3797740"
  },
  {
    "text": "and verify it. ",
    "start": "3797740",
    "end": "3810940"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE], when\nyou're doing the SSB hash, what i are you putting in? Or you just don't even need one?",
    "start": "3810940",
    "end": "3817442"
  },
  {
    "text": "ZHENGZHONG JIN: Right. Exactly. So in fact, in the\nactual construction, in fact, you don't\neven need the i",
    "start": "3817443",
    "end": "3823630"
  },
  {
    "text": "because this FHE ciphertext,\nin the actual construction, is a pseudorandom. But you can put\nany index i there.",
    "start": "3823630",
    "end": "3832220"
  },
  {
    "text": "Yeah.  So now if we use the SSB hash to\nhash each column of this matrix,",
    "start": "3832220",
    "end": "3844452"
  },
  {
    "text": "what will happen? ",
    "start": "3844452",
    "end": "3850849"
  },
  {
    "text": "So let's say if the SSB hash\nis generate-- the hash key is generated for\nsome index i star.",
    "start": "3850850",
    "end": "3858980"
  },
  {
    "text": "So then intuitively, this means\nthis SSB is binding for the i,",
    "start": "3858980",
    "end": "3866075"
  },
  {
    "text": "s row of this matrix. The reason is that, for each\nhash value, we hash it by--",
    "start": "3866075",
    "end": "3876300"
  },
  {
    "text": "we obtain it by hashing\nsome column of this matrix.",
    "start": "3876300",
    "end": "3882470"
  },
  {
    "text": "For example, the\nfirst hash value is obtained by hashing the\nfirst column of this matrix. And now, if the SSB is binding\nfor the i, s coordinate.",
    "start": "3882470",
    "end": "3891119"
  },
  {
    "text": "So the i, s coordinate now\ncorresponds to the i, s row of this matrix, the\nfirst coordinate of the i,",
    "start": "3891120",
    "end": "3896600"
  },
  {
    "text": "s row of this matrix. And the same is true\nfor other columns. So for each column, we will\nbind the i, s position.",
    "start": "3896600",
    "end": "3906150"
  },
  {
    "text": "And that means this SSB\nis binding for the i, s row, so for the i stars row.",
    "start": "3906150",
    "end": "3917280"
  },
  {
    "text": "And intuitively,\nyou can think h1 to hL will contain the full\ninformation about the i, s",
    "start": "3917280",
    "end": "3925559"
  },
  {
    "text": "row of this matrix\nbecause the h1 to hL,",
    "start": "3925560",
    "end": "3931110"
  },
  {
    "text": "they are just FHE ciphertext. So it contains the actual\nvalue of the i, s row.",
    "start": "3931110",
    "end": "3940635"
  },
  {
    "text": "Any questions? AUDIENCE: How does that help\nmake a relation [INAUDIBLE]",
    "start": "3940635",
    "end": "3947543"
  },
  {
    "text": "ZHENGZHONG JIN: Right. A good question. So let's continue this proof.",
    "start": "3947543",
    "end": "3955055"
  },
  {
    "start": "3955055",
    "end": "3977500"
  },
  {
    "text": "So we want to prove the\nsoundness of this SNARG. So how do we prove it?",
    "start": "3977500",
    "end": "3983680"
  },
  {
    "text": "So to prove the\nsoundness, we need to show for any x1 to\nxk such that x1 to xk",
    "start": "3983680",
    "end": "4000330"
  },
  {
    "text": "is in L doesn't hold.  Then no cheating prover\ncan break the SNARG.",
    "start": "4000330",
    "end": "4008315"
  },
  {
    "text": " So we start with\nthe statement x1",
    "start": "4008315",
    "end": "4014490"
  },
  {
    "text": "to xk all in language\nL doesn't hold. But what does this mean?",
    "start": "4014490",
    "end": "4019590"
  },
  {
    "text": "So the key observation here is\nthat, so if this doesn't hold,",
    "start": "4019590",
    "end": "4025950"
  },
  {
    "text": "then there exists some index i. Let's say it's index i star--",
    "start": "4025950",
    "end": "4031100"
  },
  {
    "text": "some index i star such that\nthis xi star is not in L.",
    "start": "4031100",
    "end": "4038330"
  },
  {
    "text": "So it means that, if you\nwant to prove the soundness,",
    "start": "4038330",
    "end": "4045390"
  },
  {
    "text": "there is one statement xi star\nthat is not in this language. And the goal is to\njust catch this i star.",
    "start": "4045390",
    "end": "4052350"
  },
  {
    "text": "Then we can prove the soundness.  So we only need to use\nthe one statement is not",
    "start": "4052350",
    "end": "4059329"
  },
  {
    "text": "in this language. And that's how we use SSB. So remember, SSB can\nbind the i, s position,",
    "start": "4059330",
    "end": "4068450"
  },
  {
    "text": "i, s row of this PCP matrix. So the i, s row of the PCP\nmatrix is the PCP for xi.",
    "start": "4068450",
    "end": "4074510"
  },
  {
    "text": " So that gives us soundness. So that's the intuition.",
    "start": "4074510",
    "end": "4080860"
  },
  {
    "text": " AUDIENCE: My belief is that\nthe image that you're binding",
    "start": "4080860",
    "end": "4089519"
  },
  {
    "text": "is the one that's\nnot in the language. ZHENGZHONG JIN: Good question. So the proof, so the formal\nproof goes like this.",
    "start": "4089520",
    "end": "4097120"
  },
  {
    "text": " Good question. So the formal proof\nworks as follows.",
    "start": "4097120",
    "end": "4103930"
  },
  {
    "text": "So in the first hybrid\nh0, we have an adversary.",
    "start": "4103930",
    "end": "4111930"
  },
  {
    "text": "So suppose we have some\nadversary, P star, that can break the construction,\nbreak the soundness",
    "start": "4111930",
    "end": "4119040"
  },
  {
    "text": "of the construction. So what it will receive? So P star will receive\nthe CRS, some CRS.",
    "start": "4119040",
    "end": "4129850"
  },
  {
    "text": "And it will output some\ncheating proof pi star. And the verification of\nthe proof will be accepted.",
    "start": "4129850",
    "end": "4136819"
  },
  {
    "start": "4136820",
    "end": "4145929"
  },
  {
    "text": "So the verification of the\nproof will be accepted. And this happens\nwith probability",
    "start": "4145930",
    "end": "4153639"
  },
  {
    "text": "greater than some epsilon. ",
    "start": "4153640",
    "end": "4166270"
  },
  {
    "text": "So in the next hybrid, I will-- ",
    "start": "4166270",
    "end": "4185649"
  },
  {
    "text": "so in the next hybrid, I know\nthere is an index i star. And the xi star is\nnot in the language.",
    "start": "4185649",
    "end": "4195890"
  },
  {
    "text": "So this i star is fixed. So I can switch the CRS.",
    "start": "4195890",
    "end": "4201540"
  },
  {
    "text": "So in the hybrid h1,\nI will switch the CRS",
    "start": "4201540",
    "end": "4210470"
  },
  {
    "text": "to this CRS generated by SSB\ngeneration, using the i star.",
    "start": "4210470",
    "end": "4222380"
  },
  {
    "text": "So let's denote this by SSB. ",
    "start": "4222380",
    "end": "4229820"
  },
  {
    "text": "Sorry-- this to ki\nstar, SSB ki star.",
    "start": "4229820",
    "end": "4248599"
  },
  {
    "text": "And I can argue, if this is\nthe case, then we still have-- ",
    "start": "4248600",
    "end": "4255690"
  },
  {
    "text": "so this new CRS, let's\ncall it CRS star. So CRS star will contain\nthis SSB ki star in it.",
    "start": "4255690",
    "end": "4264960"
  },
  {
    "text": "And it will generate\nsome pi, pi star. And it still has the property S.\nSo this is greater than 1 minus",
    "start": "4264960",
    "end": "4280949"
  },
  {
    "text": "negligible. So this is true because--",
    "start": "4280950",
    "end": "4287520"
  },
  {
    "text": "so this is just follows from\nthe key indistinguishability because the key is hiding. ",
    "start": "4287520",
    "end": "4302100"
  },
  {
    "text": "So now in this hybrid,\nwe switch the-- so intuitively, you\ncan think given--",
    "start": "4302100",
    "end": "4311739"
  },
  {
    "text": "so given any cheating proof, in\nfact, the i, s row of the PCP is already fixed.",
    "start": "4311740",
    "end": "4318070"
  },
  {
    "text": "So next we will reach\na contradiction using correlation-intractable hash. ",
    "start": "4318070",
    "end": "4332740"
  },
  {
    "text": "So if the verifier is accepted--",
    "start": "4332740",
    "end": "4341470"
  },
  {
    "text": "so the claim is for any\nproof, for any cheating proof,",
    "start": "4341470",
    "end": "4348100"
  },
  {
    "text": "the cheating proof\nhas this h1 star to hL star and Q\nstar and gamma star.",
    "start": "4348100",
    "end": "4359349"
  },
  {
    "text": "So gamma star is the\npseudorandom message I denoted as gamma star. So this is information\nthreshold claim.",
    "start": "4359350",
    "end": "4366670"
  },
  {
    "text": "And the claim is just if the\ncheating proof is accepted-- ",
    "start": "4366670",
    "end": "4374190"
  },
  {
    "text": "oh, sorry-- then it must be\nthe case that this Q star--",
    "start": "4374190",
    "end": "4386760"
  },
  {
    "text": "sorry-- then it must be the\ncase that this h1 to hL star--",
    "start": "4386760",
    "end": "4393329"
  },
  {
    "text": "Q star is in this relation R.",
    "start": "4393330",
    "end": "4399880"
  },
  {
    "text": "So R is almost the R above,\nbut I will redefine a new R.",
    "start": "4399880",
    "end": "4407760"
  },
  {
    "text": "So R, it will contain all\nof the h1 to hL and Q.",
    "start": "4407760",
    "end": "4422309"
  },
  {
    "text": "So given h1 to hL, I\ncan use the extractor to extract a PCP because that's\nfrom the extraction of the SSB.",
    "start": "4422310",
    "end": "4441239"
  },
  {
    "text": "So this PCP is the PCP\nfor the i star position.",
    "start": "4441240",
    "end": "4447060"
  },
  {
    "text": "And then I define\nthis R as follows. So I require the PCP\nis accepted for xi.",
    "start": "4447060",
    "end": "4462090"
  },
  {
    "start": "4462090",
    "end": "4477280"
  },
  {
    "text": "So in this definition of R,\nI first extract the i, s PCP.",
    "start": "4477280",
    "end": "4482909"
  },
  {
    "text": "And then I check\nif the query Q can",
    "start": "4482910",
    "end": "4488410"
  },
  {
    "text": "make this PCP be\naccepted for the i, s star statement, xi star.",
    "start": "4488410",
    "end": "4495380"
  },
  {
    "text": " So any questions?",
    "start": "4495380",
    "end": "4502136"
  },
  {
    "text": " Is this clear? ",
    "start": "4502136",
    "end": "4514600"
  },
  {
    "text": "So intuitively, in the third\nround message, if the proof is",
    "start": "4514600",
    "end": "4520870"
  },
  {
    "text": "accepted, then anything-- so in the third-round\nmessage, the prover",
    "start": "4520870",
    "end": "4525909"
  },
  {
    "text": "needs to give some columns\nof the queried position. So for all of those\ncolumns, if you",
    "start": "4525910",
    "end": "4532780"
  },
  {
    "text": "look at the i star\nrow of it, it must be consistent with\nthe extracted PCP",
    "start": "4532780",
    "end": "4542409"
  },
  {
    "text": "because we have the SSB\nextraction correctness. ",
    "start": "4542410",
    "end": "4552739"
  },
  {
    "text": "So we define the R in this way. So in fact, it's the\nsame as the R above. ",
    "start": "4552740",
    "end": "4559970"
  },
  {
    "text": "So now to prove\nthis claim is just--",
    "start": "4559970",
    "end": "4565700"
  },
  {
    "text": "the proof of this claim is just\nthe argument I set up just now. So for any cheating proof, if\nthe verification of the proof",
    "start": "4565700",
    "end": "4574370"
  },
  {
    "text": "is accepted, then from the\ncorrectness of the extraction-- ",
    "start": "4574370",
    "end": "4582920"
  },
  {
    "text": "from the correctness\nof the extraction-- maybe let me write it.",
    "start": "4582920",
    "end": "4589250"
  },
  {
    "text": "So if pi star is accepted,\nthen from the SSB extraction",
    "start": "4589250",
    "end": "4604900"
  },
  {
    "text": "correctness we know\nthis PCP i star.",
    "start": "4604900",
    "end": "4621580"
  },
  {
    "text": "So the PCP i star, we\nextracted from this h1 to hQ--",
    "start": "4621580",
    "end": "4630550"
  },
  {
    "text": "sorry, h1 to hL. ",
    "start": "4630550",
    "end": "4650980"
  },
  {
    "text": "So let's say it's\nsome PCP i star-- PCP star.",
    "start": "4650980",
    "end": "4656110"
  },
  {
    "start": "4656110",
    "end": "4664670"
  },
  {
    "text": "If you look at the Q's\ncoordinate, then it must--",
    "start": "4664670",
    "end": "4673940"
  },
  {
    "text": "OK, so let me write in this way. ",
    "start": "4673940",
    "end": "4685160"
  },
  {
    "text": "The column star-- so\ncolumn star. are-- yeah Q-- so where the\nthird-round messages are just",
    "start": "4685160",
    "end": "4703280"
  },
  {
    "text": "the columns. ",
    "start": "4703280",
    "end": "4724590"
  },
  {
    "text": "So that's the soundness proof. ",
    "start": "4724590",
    "end": "4729760"
  },
  {
    "text": "So that's the\nproof of the claim. Yeah, any question?",
    "start": "4729760",
    "end": "4735000"
  },
  {
    "text": "AUDIENCE: In the\nhybrid, how do you identify which i star because\nyou need to know which statement",
    "start": "4735000",
    "end": "4744960"
  },
  {
    "text": "was right [INAUDIBLE]. ZHENGZHONG JIN: Right. Good question. So this soundness\nproof is non-uniform.",
    "start": "4744960",
    "end": "4750280"
  },
  {
    "text": "So it's a non-adaptive. So the soundness proof\nstarts with a fixed x1 to xk.",
    "start": "4750280",
    "end": "4756070"
  },
  {
    "text": "So for any fixed x1 to xk, you\nknow there exists an i star. That xi star is false.",
    "start": "4756070",
    "end": "4763320"
  },
  {
    "text": "So there exists a fixed i star\nsuch that xi star is false, is not in L.",
    "start": "4763320",
    "end": "4772203"
  },
  {
    "text": "AUDIENCE: So that's a given? ZHENGZHONG JIN: Yeah,\nso that's given. So you can think it's a\ngiven to the reduction",
    "start": "4772203",
    "end": "4777960"
  },
  {
    "text": "in a non-uniform way. Yeah. ",
    "start": "4777960",
    "end": "4804510"
  },
  {
    "text": "So this is from the extracted. ",
    "start": "4804510",
    "end": "4811400"
  },
  {
    "text": "So this is from the SSB\nextraction correctness. You have this. We have the consistency\nbetween this PCP extracted",
    "start": "4811400",
    "end": "4821030"
  },
  {
    "text": "and the proof in\nthe third round. And if the proof, if this\ncheating proof, pi star,",
    "start": "4821030",
    "end": "4827390"
  },
  {
    "text": "is accepted, then\nwe can use the fact that this pi star is accepted.",
    "start": "4827390",
    "end": "4835130"
  },
  {
    "text": "So if it is accepted,\nthen we know this Q. This Q can make\nthis PCP star be accepted.",
    "start": "4835130",
    "end": "4846100"
  },
  {
    "text": " So then that\ncompletes this claim.",
    "start": "4846100",
    "end": "4855260"
  },
  {
    "text": "And finally, from\nthis claim you can use the\ncorrelation-intractability",
    "start": "4855260",
    "end": "4861290"
  },
  {
    "text": "of the CI hash. So pi star-- so if\nthe proof is accepted,",
    "start": "4861290",
    "end": "4875550"
  },
  {
    "text": "then this is the\nextracted PCP from here.",
    "start": "4875550",
    "end": "4885579"
  },
  {
    "text": " It will make this a PCP\nverification accepted.",
    "start": "4885580",
    "end": "4891090"
  },
  {
    "text": "Yeah. OK. Let's have a break. Yeah.",
    "start": "4891090",
    "end": "4897340"
  }
]