[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6940"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6940",
    "end": "13490"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13490",
    "end": "19320"
  },
  {
    "text": "ocw.mit.edu. PROFESSOR JOHN GUTTAG: In the\nexample we looked at, we had a",
    "start": "19320",
    "end": "24750"
  },
  {
    "text": "list of ints. That's actually quite easy\nto do in constant time.",
    "start": "24750",
    "end": "31340"
  },
  {
    "text": "If you think about it, an int is\nalways going to occupy the",
    "start": "31340",
    "end": "38210"
  },
  {
    "text": "same amount of space, roughly\nspeaking, either 32 or 64",
    "start": "38210",
    "end": "44070"
  },
  {
    "text": "bits, depending upon\nhow big an int the language wants to support.",
    "start": "44070",
    "end": "50980"
  },
  {
    "text": "So let's just, for the sake\nof argument, assume an int",
    "start": "50980",
    "end": "56100"
  },
  {
    "text": "occupies four units of memory. And I don't care\nwhat a unit is.",
    "start": "56100",
    "end": "61280"
  },
  {
    "text": "Is a unit 8 bits, 16 bits? It doesn't matter. 4 units.",
    "start": "61280",
    "end": "69240"
  },
  {
    "text": "How would we get to the i-th\nelement of the list?",
    "start": "69240",
    "end": "74450"
  },
  {
    "text": "What is the location in\nmemory of L-th of i?",
    "start": "74450",
    "end": "80590"
  },
  {
    "start": "80590",
    "end": "87700"
  },
  {
    "text": "Well, if we know the location\nof the start of the list-- ",
    "start": "87700",
    "end": "95010"
  },
  {
    "text": "and certainly we can know that\nbecause our identifier, say L",
    "start": "95010",
    "end": "100240"
  },
  {
    "text": "in this case, will point to\nthe start of the list-- then it's simply going to be\nthe start plus 4 times i.",
    "start": "100240",
    "end": "110590"
  },
  {
    "start": "110590",
    "end": "115890"
  },
  {
    "text": "My list looks like this. I point to the start.",
    "start": "115890",
    "end": "121320"
  },
  {
    "text": "The first element is here. So, that's start\nplus 4 times 0.",
    "start": "121320",
    "end": "127840"
  },
  {
    "text": "Makes perfect sense. The second element is here. So, that's going to be\nstart plus 4 times 1.",
    "start": "127840",
    "end": "135969"
  },
  {
    "text": "Sure enough, this would be\nlocation 4, relative to the start of the list, et cetera.",
    "start": "135970",
    "end": "143680"
  },
  {
    "text": "This is a very conventional\nway to implement lists.",
    "start": "143680",
    "end": "149519"
  },
  {
    "text": "But what does its correctness\ndepend upon? ",
    "start": "149520",
    "end": "155780"
  },
  {
    "text": "It depends upon the fact that\neach element of the list is of the same size.",
    "start": "155780",
    "end": "161320"
  },
  {
    "text": " In this case, it's 4.",
    "start": "161320",
    "end": "166760"
  },
  {
    "text": "But I don't care if it's 4. If it's 2, it's 2 times i.",
    "start": "166760",
    "end": "172240"
  },
  {
    "text": "If it's 58, it's 58 times i. It doesn't matter. But what matters is that each\nelement is the same size.",
    "start": "172240",
    "end": "181849"
  },
  {
    "text": "So this trick would work for\naccessing elements of lists of floats, lists of ints, anything\nthat's of fixed size.",
    "start": "181850",
    "end": "192010"
  },
  {
    "text": "But that's not the way\nlists are in Python. In Python, I can have a list\nthat contains ints, and",
    "start": "192010",
    "end": "199670"
  },
  {
    "text": "floats, and strings, and\nother lists, and dicts, almost anything.",
    "start": "199670",
    "end": "207080"
  },
  {
    "text": "So, in Python, it's not this\nnice picture where the lists",
    "start": "207080",
    "end": "212440"
  },
  {
    "text": "are all homogeneous. In many languages they\nare, by the way.",
    "start": "212440",
    "end": "219110"
  },
  {
    "text": "And those languages would\nimplement it exactly as I've outlined it on the board here.",
    "start": "219110",
    "end": "225080"
  },
  {
    "text": "But what about languages where\nthey're not, like Python? ",
    "start": "225080",
    "end": "231700"
  },
  {
    "text": "One possibility-- and this is probably the oldest\nway that people used to",
    "start": "231700",
    "end": "237720"
  },
  {
    "text": "implement lists-- is the notion of\na linked list. ",
    "start": "237720",
    "end": "243840"
  },
  {
    "text": "These were used way back\nin the 1960s, when Lisp was first invented.",
    "start": "243840",
    "end": "249570"
  },
  {
    "text": "And, effectively, there,\nwhat you do is a list. ",
    "start": "249570",
    "end": "255909"
  },
  {
    "text": "Every element of the list is a\npointer to the next element.",
    "start": "255910",
    "end": "264460"
  },
  {
    "text": " And then the value.",
    "start": "264460",
    "end": "269550"
  },
  {
    "start": "269550",
    "end": "276810"
  },
  {
    "text": "So what it looks like in memory\nis we have the list.",
    "start": "276810",
    "end": "282335"
  },
  {
    "text": " And this points to the next\nelement, which maybe has a",
    "start": "282335",
    "end": "288759"
  },
  {
    "text": "much bigger value field. But that's OK. This points to the\nnext element.",
    "start": "288760",
    "end": "297000"
  },
  {
    "text": "Let's say this one, maybe,\nis a tiny value field. ",
    "start": "297000",
    "end": "306160"
  },
  {
    "text": "And then at the end of the\nlist, I might write none,",
    "start": "306160",
    "end": "312830"
  },
  {
    "text": "saying there is no\nnext element. Or nil, in Lisp speak. ",
    "start": "312830",
    "end": "320080"
  },
  {
    "text": "But what's the cost here of\naccessing the nth element of the list, of the i-th\nelement of the list?",
    "start": "320080",
    "end": "327160"
  },
  {
    "text": " Somebody?",
    "start": "327160",
    "end": "333660"
  },
  {
    "text": "How many steps does it take\nto find element i? AUDIENCE: i.",
    "start": "333660",
    "end": "338940"
  },
  {
    "text": "AUDIENCE: i? PROFESSOR JOHN GUTTAG:\ni steps, exactly. So for a linked list, finding\nthe i-th element is order i.",
    "start": "338940",
    "end": "350900"
  },
  {
    "text": "That's not very good. That won't help me with\nbinary search.",
    "start": "350900",
    "end": "356650"
  },
  {
    "text": "Because if this were the case\nfor finding an element of a list in Python, binary search\nwould not be log length of the",
    "start": "356650",
    "end": "366390"
  },
  {
    "text": "list, but it would be order\nlength of the list. Because the worst case is I'd\nhave to visit every element of",
    "start": "366390",
    "end": "373639"
  },
  {
    "text": "the list, say, to discover\nsomething isn't in it. ",
    "start": "373640",
    "end": "382689"
  },
  {
    "text": "So, this is not what\nyou want to do.",
    "start": "382690",
    "end": "388330"
  },
  {
    "text": "Instead, Python uses\nsomething like the picture in your handout. ",
    "start": "388330",
    "end": "399919"
  },
  {
    "text": "And the key idea here is\none of indirection. ",
    "start": "399920",
    "end": "406610"
  },
  {
    "text": "So in Python, what a list looks\nlike is it is a list, a",
    "start": "406610",
    "end": "417419"
  },
  {
    "text": "section of memory, a list of\nobjects each of the same size.",
    "start": "417420",
    "end": "426080"
  },
  {
    "text": "Because now what each\nobject is a pointer. So we've now separated in\nspace the values of the",
    "start": "426080",
    "end": "435570"
  },
  {
    "text": "members of the list and the\npointers to, if you will, the next one. So now, it can be very simple.",
    "start": "435570",
    "end": "443210"
  },
  {
    "text": "This first element\ncould be big. Second element could be small.",
    "start": "443210",
    "end": "448840"
  },
  {
    "text": "We don't care. ",
    "start": "448840",
    "end": "454290"
  },
  {
    "text": "Now I'm back to exactly the\nmodel we looked at here.",
    "start": "454290",
    "end": "459370"
  },
  {
    "text": " If, say, a pointer to someplace\nin memory is 4 units",
    "start": "459370",
    "end": "467190"
  },
  {
    "text": "long, then to find l-th of i, I\nuse that trick to find, say,",
    "start": "467190",
    "end": "475430"
  },
  {
    "text": "the i-th pointer. And then it takes me only one\nstep to follow it to get to",
    "start": "475430",
    "end": "480539"
  },
  {
    "text": "the object. ",
    "start": "480540",
    "end": "485770"
  },
  {
    "text": "So, I can now, in constant time,\naccess any object into a",
    "start": "485770",
    "end": "494910"
  },
  {
    "text": "list, even though the\nobjects in the list are of varying size.",
    "start": "494910",
    "end": "501090"
  },
  {
    "text": "This is the way it's done\nin all object-oriented programming languages.",
    "start": "501090",
    "end": "508035"
  },
  {
    "text": "Does that makes sense\nto everybody? ",
    "start": "508035",
    "end": "515340"
  },
  {
    "text": "This concept of indirection is\none of the most powerful",
    "start": "515340",
    "end": "521229"
  },
  {
    "text": "programming techniques\nwe have. It gets used a lot. ",
    "start": "521230",
    "end": "528960"
  },
  {
    "text": "My dictionary defines\nindirection as a lack of straightforwardness and openness\nand as a synonym uses",
    "start": "528960",
    "end": "536090"
  },
  {
    "text": "deceitfulness.  And it had this pejorative term\nuntil about 1950 when",
    "start": "536090",
    "end": "542930"
  },
  {
    "text": "computer scientists discovered\nit and decided it was a wonderful thing.",
    "start": "542930",
    "end": "548180"
  },
  {
    "text": "There's something that's often\nquoted at people who do algorithms. They say quote, \"all problems\nin computer science can be",
    "start": "548180",
    "end": "555200"
  },
  {
    "text": "solved by another level of\nindirection.\" So, it's sort of, whenever you're stuck,\nyou add another level of",
    "start": "555200",
    "end": "561420"
  },
  {
    "text": "indirection. The caveat to this is the one\nproblem that can't be solved",
    "start": "561420",
    "end": "566850"
  },
  {
    "text": "by adding another level of\nindirection is too many levels of indirection, which\ncan be a problem.",
    "start": "566850",
    "end": "574580"
  },
  {
    "text": "As you look at certain kinds of\nmemory structures, the fact that you've separated the\npointers from the value fields",
    "start": "574580",
    "end": "582580"
  },
  {
    "text": "can lead to them being in very\nfar apart in memory, which can disturb behaviors of caches\nand things like that.",
    "start": "582580",
    "end": "591000"
  },
  {
    "text": "So in some models of memory this\ncan lead to surprising inefficiency.",
    "start": "591000",
    "end": "596660"
  },
  {
    "text": "But most of the time\nit's really a great implementation technique. And I highly recommend it.",
    "start": "596660",
    "end": "605420"
  },
  {
    "text": "So that's how we do the trick. Now we can convince ourselves\nthat binary search is indeed",
    "start": "605420",
    "end": "612280"
  },
  {
    "text": "order log n. And as we saw Tuesday,\nlogarithmic growth is very slow.",
    "start": "612280",
    "end": "619130"
  },
  {
    "text": "So it means we can use binary\nsearch to search enormous lists and get the answer\nvery quickly.",
    "start": "619130",
    "end": "625279"
  },
  {
    "text": " All right. There's still one catch.",
    "start": "625280",
    "end": "632230"
  },
  {
    "text": "And what's the catch? There's an assumption\nto binary search.",
    "start": "632230",
    "end": "637970"
  },
  {
    "text": "Binary search works only when\nwhat assumption is true? AUDIENCE: It's sorted.",
    "start": "637970",
    "end": "643240"
  },
  {
    "text": "PROFESSOR JOHN GUTTAG: The\nlist is sorted because it",
    "start": "643240",
    "end": "651850"
  },
  {
    "text": "depends on that piece\nof knowledge.  So, that raises the question,\nhow did it get sorted?",
    "start": "651850",
    "end": "660835"
  },
  {
    "text": " Or the other question it raises,\nif I ask you to search",
    "start": "660835",
    "end": "667600"
  },
  {
    "text": "for something, does it make\nsense to follow the algorithm of (1) sort L, (2) use\nbinary search?",
    "start": "667600",
    "end": "679075"
  },
  {
    "start": "679075",
    "end": "685990"
  },
  {
    "text": "Does that make sense? Well, what does it depend upon,\nwhether this makes sense",
    "start": "685990",
    "end": "694490"
  },
  {
    "text": "from an efficiency\npoint of view? We know that that's order log\nlength of L. We also know if",
    "start": "694490",
    "end": "714210"
  },
  {
    "text": "the list isn't sorted, we can\ndo it in order L. We can",
    "start": "714210",
    "end": "721440"
  },
  {
    "text": "always use linear search. So, whether or not this makes\na good idea depends upon",
    "start": "721440",
    "end": "729780"
  },
  {
    "text": "whether we can do this\nfast enough.",
    "start": "729780",
    "end": "735750"
  },
  {
    "text": "It has the question is order\nquestion mark plus order log",
    "start": "735750",
    "end": "748250"
  },
  {
    "text": "len of L less than order L?",
    "start": "748250",
    "end": "755360"
  },
  {
    "text": " If it's not, it doesn't make\nsense to sort it first in",
    "start": "755360",
    "end": "762030"
  },
  {
    "text": "sums, right?  So what's the answer\nto this question?",
    "start": "762030",
    "end": "769509"
  },
  {
    "text": "Do we think we can sort\na list fast enough? And what would fast\nenough mean?",
    "start": "769510",
    "end": "776060"
  },
  {
    "text": "What would it have to be?  For this to be better than this,\nwe know that we have to",
    "start": "776060",
    "end": "783250"
  },
  {
    "text": "be able to sort a list\nin sublinear time. ",
    "start": "783250",
    "end": "790240"
  },
  {
    "text": "Can we do that? Alas, the answer\nis provably no.",
    "start": "790240",
    "end": "796410"
  },
  {
    "text": "No matter how clever we are,\nthere is no algorithm that will sort a list in\nsublinear time.",
    "start": "796410",
    "end": "803150"
  },
  {
    "text": "And if you think of it, that\nmakes a lot of sense. Because, how can you get\na list in ascending or",
    "start": "803150",
    "end": "808740"
  },
  {
    "text": "descending order without looking\nat every element in the list at least once?",
    "start": "808740",
    "end": "815000"
  },
  {
    "text": "Logic says you just\ncan't do it. If you're going to put something\nin order, you're",
    "start": "815000",
    "end": "820130"
  },
  {
    "text": "going to have to look at it. So we know that we have a lower\nbound on sorting, which",
    "start": "820130",
    "end": "828930"
  },
  {
    "text": "is order L. And we know that\norder L plus order log length L is the same as order L, which\nis not better than that.",
    "start": "828930",
    "end": "844520"
  },
  {
    "text": "So why do we care? If this is true, why are we\ninterested in things like binary search at all?",
    "start": "844520",
    "end": "851380"
  },
  {
    "text": "And the reason is we're often\ninterested in something called",
    "start": "851380",
    "end": "856500"
  },
  {
    "text": "amortized complexity. ",
    "start": "856500",
    "end": "865260"
  },
  {
    "text": "I know that there are some\ncourse 15 students in the class who will know what\namortization means.",
    "start": "865260",
    "end": "871360"
  },
  {
    "text": "But maybe not everybody does. The idea here is that if we can\nsort the list once and end",
    "start": "871360",
    "end": "881900"
  },
  {
    "text": "up searching it many times, the\ncost of the sort can be",
    "start": "881900",
    "end": "893590"
  },
  {
    "text": "allocated, a little bit of it,\nto each of the searches.",
    "start": "893590",
    "end": "898840"
  },
  {
    "text": "And if we do enough searches,\nthen in fact it doesn't really matter how long the\nsort takes.",
    "start": "898840",
    "end": "907680"
  },
  {
    "text": "So if we were going to search\nthis list a million times, maybe we don't care\nabout the one-time",
    "start": "907680",
    "end": "914660"
  },
  {
    "text": "overhead of sorting it. And this kind of amortized\nanalysis is quite common and",
    "start": "914660",
    "end": "922510"
  },
  {
    "text": "is what we really end up doing\nmost of the time in practice. So the real question we want\nto ask is, if we plan on",
    "start": "922510",
    "end": "939930"
  },
  {
    "text": "performing k searches-- ",
    "start": "939930",
    "end": "950550"
  },
  {
    "text": "who knows how long it will\ntake to sort it-- what we'll take is order of\nwhatever sort of the list is,",
    "start": "950550",
    "end": "963480"
  },
  {
    "text": "plus k times log length of\nL. Is that less than k",
    "start": "963480",
    "end": "989529"
  },
  {
    "text": "times len of L? ",
    "start": "989530",
    "end": "997290"
  },
  {
    "text": "If I don't sort it, to do\nk sort searches will take this much time.",
    "start": "997290",
    "end": "1002890"
  },
  {
    "text": "If I do sort it, it will\ntake this much time. ",
    "start": "1002890",
    "end": "1008730"
  },
  {
    "text": "The answer to this question, of\ncourse, depends upon what's the complexity of that\nand how big is k.",
    "start": "1008730",
    "end": "1015150"
  },
  {
    "start": "1015150",
    "end": "1021273"
  },
  {
    "text": "Does that make sense? In practice, k is\noften very big.",
    "start": "1021273",
    "end": "1029329"
  },
  {
    "text": "The number of times we access,\nsay, a student record is quite large compared to the\nnumber of times",
    "start": "1029329",
    "end": "1036369"
  },
  {
    "text": "students enroll in MIT. So if at the start of each\nsemester we produce a sorted",
    "start": "1036369",
    "end": "1043049"
  },
  {
    "text": "list, it pays off to\ndo the searches.",
    "start": "1043050",
    "end": "1049610"
  },
  {
    "text": "In fact, we don't do\na sorted list. We do something more complex. But you understand the\nconcept I hope.",
    "start": "1049610",
    "end": "1055260"
  },
  {
    "text": " Now we have to say, how\nwell can we do that?",
    "start": "1055260",
    "end": "1066279"
  },
  {
    "text": "That's what I want to spend most\nof the rest of today on now is talking about how do we\ndo sorting because it is a",
    "start": "1066280",
    "end": "1072929"
  },
  {
    "text": "very common operation. First of all, let's look at\na way we don't do sorting.",
    "start": "1072930",
    "end": "1080355"
  },
  {
    "text": " There was a famous computer\nscientist who",
    "start": "1080355",
    "end": "1088240"
  },
  {
    "text": "opined on this topic.  We can look for him this way.",
    "start": "1088240",
    "end": "1096485"
  },
  {
    "text": "A well-known technique\nis bubble sort. ",
    "start": "1096485",
    "end": "1106820"
  },
  {
    "text": "Actually, stop. We're going to need\nsound for this. Do we have sound in the booth? ",
    "start": "1106820",
    "end": "1114720"
  },
  {
    "text": "Do we have somebody\nin the booth?  Well, we either have\nsound or we don't.",
    "start": "1114720",
    "end": "1122980"
  },
  {
    "text": "We'll find out shortly. ",
    "start": "1122980",
    "end": "1146179"
  },
  {
    "text": "Other way. Come on. You should know. Oh there. ",
    "start": "1146180",
    "end": "1152050"
  },
  {
    "text": "Thank you. [VIDEO PLAYBACK] -Now, it's hard to get\na job as President. And you're going through\nthe rigors now.",
    "start": "1152050",
    "end": "1158000"
  },
  {
    "text": "It's also hard to get\na job at Google. We have questions, and we ask\nour candidates questions.",
    "start": "1158000",
    "end": "1165180"
  },
  {
    "text": "And this one is from\nLarry Schwimmer. [LAUGHTER]",
    "start": "1165180",
    "end": "1170773"
  },
  {
    "text": "-You guys think I'm kidding? It's right here. What is the most efficient\nway to sort a",
    "start": "1170774",
    "end": "1176299"
  },
  {
    "text": "million 32-bit integers? [LAUGHTER] -Well, uh.",
    "start": "1176300",
    "end": "1184130"
  },
  {
    "text": "-I'm Sorry, maybe\nthat's not a-- -I think the bubble sort would\nbe the wrong way to go.",
    "start": "1184130",
    "end": "1190549"
  },
  {
    "text": "[LAUGHTER] -Come on, who told him this?",
    "start": "1190550",
    "end": "1197879"
  },
  {
    "text": "I didn't see computer science\nin your background. -We've got our spies in there. ",
    "start": "1197880",
    "end": "1204610"
  },
  {
    "text": "-OK, let's ask a different\ninterval-- [END VIDEO PLAYBACK] PROFESSOR JOHN GUTTAG: All\nright, so as he sometimes is,",
    "start": "1204610",
    "end": "1213409"
  },
  {
    "text": "the President was correct. Bubble sort, though often\ndiscussed, is almost always",
    "start": "1213410",
    "end": "1219310"
  },
  {
    "text": "the wrong answer. So we're not going to talk\nabout bubble sort. I, by the way, know Larry\nSchwimmer and can believe he",
    "start": "1219310",
    "end": "1226429"
  },
  {
    "text": "did ask that question. But yes, I'm surprised. Someone had obviously warned\nthe President, actually the",
    "start": "1226430",
    "end": "1235010"
  },
  {
    "text": "then future president I think. Let's look at a different one\nthat's often used, and that's",
    "start": "1235010",
    "end": "1242770"
  },
  {
    "text": "called selection sort. This is about as simple\nas it gets.",
    "start": "1242770",
    "end": "1248620"
  },
  {
    "text": "The basic idea of\nselection sort-- and it's not a very good way\nto sort, but it is a useful",
    "start": "1248620",
    "end": "1256700"
  },
  {
    "text": "kind of thing to look\nat because it introduces some ideas. Like many algorithms, it depends\nupon establishing and",
    "start": "1256700",
    "end": "1269460"
  },
  {
    "text": "maintaining an invariant. ",
    "start": "1269460",
    "end": "1287860"
  },
  {
    "text": "An invariant is something\nthat's invariantly true.",
    "start": "1287860",
    "end": "1293370"
  },
  {
    "text": "The invariant we're going to\nmaintain here is we're going to have a pointer\ninto the list.",
    "start": "1293370",
    "end": "1300730"
  },
  {
    "text": "And that pointer is going to\ndivide the list into a prefix",
    "start": "1300730",
    "end": "1309130"
  },
  {
    "text": "and a suffix. ",
    "start": "1309130",
    "end": "1314810"
  },
  {
    "text": "And the invariant that we're\ngoing to maintain is that the",
    "start": "1314810",
    "end": "1322520"
  },
  {
    "text": "prefix is always sorted.",
    "start": "1322520",
    "end": "1328510"
  },
  {
    "start": "1328510",
    "end": "1333580"
  },
  {
    "text": "We'll start where the\nprefix is empty. It contains none of the list.",
    "start": "1333580",
    "end": "1339910"
  },
  {
    "text": "And then each step through the\nalgorithm, we'll decrease the size of the suffix by one\nelement and increase the size",
    "start": "1339910",
    "end": "1348430"
  },
  {
    "text": "of the prefix by one\nelement while maintaining the invariant.",
    "start": "1348430",
    "end": "1354480"
  },
  {
    "text": "And we'll be done when the size\nof the suffix is 0, and therefore the prefix contains\nall the elements.",
    "start": "1354480",
    "end": "1362750"
  },
  {
    "text": "And because we've been\nmaintaining this invariant, we know that we have now\nsorted the list.",
    "start": "1362750",
    "end": "1368210"
  },
  {
    "start": "1368210",
    "end": "1374529"
  },
  {
    "text": "So, you can think about it. For example, if I have a list\nthat looks like 4, 2, 3, I'll",
    "start": "1374530",
    "end": "1387380"
  },
  {
    "text": "start pointing here. And the prefix, which contains\nnothing, obeys the invariant.",
    "start": "1387380",
    "end": "1392610"
  },
  {
    "text": " I'll then go through the list\nand find the smallest element",
    "start": "1392610",
    "end": "1399840"
  },
  {
    "text": "in the list and swap it with\nthe first element. ",
    "start": "1399840",
    "end": "1407220"
  },
  {
    "text": "My next step, the list will\nlook like 2, 4, 3.",
    "start": "1407220",
    "end": "1412745"
  },
  {
    "text": " I'll now point here.",
    "start": "1412745",
    "end": "1419880"
  },
  {
    "text": "My invariant is true. The prefix contains only\none element, so it is in ascending order.",
    "start": "1419880",
    "end": "1426559"
  },
  {
    "text": "And I've increased\nits size by 1. ",
    "start": "1426560",
    "end": "1432320"
  },
  {
    "text": "I don't have to look at this\nelement again because I know by construction that's\nthe smallest.",
    "start": "1432320",
    "end": "1438150"
  },
  {
    "text": "Now I move here, and I look for\nthe smallest element in the suffix, which will be 3.",
    "start": "1438150",
    "end": "1447350"
  },
  {
    "text": "I swapped 3 and 4. And then I'm going to be done.",
    "start": "1447350",
    "end": "1453490"
  },
  {
    "text": "Does that make sense? It's very straightforward. It's, in some sense, the most\nobvious way to sort a list.",
    "start": "1453490",
    "end": "1463280"
  },
  {
    "text": "And if you look at the code,\nthat's exactly what it does.",
    "start": "1463280",
    "end": "1469390"
  },
  {
    "text": "I've stated the invariant\nhere. And I just go through\nand I sort it.",
    "start": "1469390",
    "end": "1476200"
  },
  {
    "text": "So we can run it. Let's do that. ",
    "start": "1476200",
    "end": "1486620"
  },
  {
    "text": "I'm going to sort the list 3,\n4, 5, et cetera, 35, 45.",
    "start": "1486620",
    "end": "1492960"
  },
  {
    "text": "I'm going to call\nselection sort. And I don't think this is in\nyour handout, but just to make",
    "start": "1492960",
    "end": "1499210"
  },
  {
    "text": "it obvious what's going on, each\niteration of the loop I'm going to print the partially\nsorted list so we can see",
    "start": "1499210",
    "end": "1508220"
  },
  {
    "text": "what's happening. ",
    "start": "1508220",
    "end": "1518250"
  },
  {
    "text": "The first step, it finds 4 and\nputs that in the beginning. ",
    "start": "1518250",
    "end": "1524277"
  },
  {
    "text": "It actually finds 0, puts it in\nthe beginning, et cetera. All right? So, people see what's\ngoing on here?",
    "start": "1524277",
    "end": "1531080"
  },
  {
    "text": "It's essentially doing\nexactly what I did on the board over there. And when we're done, we have\nthe list completely sorted.",
    "start": "1531080",
    "end": "1538030"
  },
  {
    "text": " What's the complexity of this?",
    "start": "1538030",
    "end": "1543495"
  },
  {
    "start": "1543495",
    "end": "1551580"
  },
  {
    "text": "What's the complexity\nof selection sort? ",
    "start": "1551580",
    "end": "1559260"
  },
  {
    "text": "There are two things going on. I'm doing a bunch\nof comparisons.",
    "start": "1559260",
    "end": "1564330"
  },
  {
    "text": "And I'm doing a bunch\nof swaps.  Since I do, at most, the same\nnumber of comparisons as I do",
    "start": "1564330",
    "end": "1574280"
  },
  {
    "text": "swap or swaps as I\ndo comparisons-- I never swap without doing\na comparison--",
    "start": "1574280",
    "end": "1580520"
  },
  {
    "text": "we can calculate complexity by\nlooking at the number of comparisons I'm doing.",
    "start": "1580520",
    "end": "1586630"
  },
  {
    "text": "You can see that in\nthe code as well. So how many comparisons might\nI have to do here?",
    "start": "1586630",
    "end": "1592870"
  },
  {
    "start": "1592870",
    "end": "1600850"
  },
  {
    "text": "The key thing to notice is each\ntime I look at it, each",
    "start": "1600850",
    "end": "1606679"
  },
  {
    "text": "iteration, I'm looking at\nevery element in what? ",
    "start": "1606680",
    "end": "1613650"
  },
  {
    "text": "In the list? No, every element\nin the suffix. The first time through,\nI'm going to look at--",
    "start": "1613650",
    "end": "1623210"
  },
  {
    "text": "let's just say n equals the\nlength of the list.",
    "start": "1623210",
    "end": "1628520"
  },
  {
    "text": "So the first time through, I'm\ngoing to look at n elements. ",
    "start": "1628520",
    "end": "1637060"
  },
  {
    "text": "Then I'm going to look\nat n minus 1. Then I'm going to look\nat n minus 2.",
    "start": "1637060",
    "end": "1644830"
  },
  {
    "text": "Until I'm done, right?  So that's how many operations\nI'm doing.",
    "start": "1644830",
    "end": "1654470"
  },
  {
    "text": "And what is the order of n plus\nn minus 1 plus n minus 2?",
    "start": "1654470",
    "end": "1659650"
  },
  {
    "text": " Exactly.",
    "start": "1659650",
    "end": "1666610"
  },
  {
    "text": "Order n.  So, selection sort is order n.",
    "start": "1666610",
    "end": "1672900"
  },
  {
    "text": " Is that right? Somebody said order n.",
    "start": "1672900",
    "end": "1678909"
  },
  {
    "text": "Do you believe it's n? Is this really n?",
    "start": "1678910",
    "end": "1684410"
  },
  {
    "text": "It's not n. What is it? Somebody raise your hand, so\nI can throw the candy out.",
    "start": "1684410",
    "end": "1691160"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE]",
    "start": "1691160",
    "end": "1696284"
  },
  {
    "text": "PROFESSOR JOHN GUTTAG:\nIt's not n factorial. ",
    "start": "1696284",
    "end": "1702260"
  },
  {
    "text": "AUDIENCE: n-squared? PROFESSOR JOHN GUTTAG: You said\nthat with a question mark at the end of your voice. AUDIENCE: No, it's like the sum\nof the numbers is, like, n",
    "start": "1702260",
    "end": "1709398"
  },
  {
    "text": "times n minus 1 over 2 or\nsomething like that. PROFESSOR JOHN GUTTAG: It's\nreally exactly right. ",
    "start": "1709398",
    "end": "1720190"
  },
  {
    "text": "It's a little smaller\nthan n-squared, but it's order n-squared. ",
    "start": "1720190",
    "end": "1727820"
  },
  {
    "text": "I'm doing a lot of\nthese additions. So I can't ignore all of\nthese extra terms and",
    "start": "1727820",
    "end": "1734380"
  },
  {
    "text": "say they don't matter.  It's almost as bad as comparing\nevery element to",
    "start": "1734380",
    "end": "1742090"
  },
  {
    "text": "every other element. So, selection sort is\norder n-squared.",
    "start": "1742090",
    "end": "1749140"
  },
  {
    "text": "And you can do it by\nunderstanding that sum or you can look at the code here.",
    "start": "1749140",
    "end": "1756410"
  },
  {
    "text": "And that sort of will\nalso tip you off. ",
    "start": "1756410",
    "end": "1765330"
  },
  {
    "text": "Ok. so now, can we do better?  There was a while where people\nwere pretty unsure whether you",
    "start": "1765330",
    "end": "1772549"
  },
  {
    "text": "could do better. But we can. ",
    "start": "1772550",
    "end": "1780789"
  },
  {
    "text": "If we think about it now, it was\na method invented by John",
    "start": "1780790",
    "end": "1787130"
  },
  {
    "text": "von Neumann, a very\nfamous guy. And he, back in the '40s\namazingly enough, viewed this",
    "start": "1787130",
    "end": "1796790"
  },
  {
    "text": "as a kind of divide and\nconquer algorithm. And we've looked at divide\nand conquer before. ",
    "start": "1796790",
    "end": "1804330"
  },
  {
    "text": "What is the general form\nof divide and conquer? ",
    "start": "1804330",
    "end": "1816190"
  },
  {
    "text": "A phrase you've heard me use\nmany times, popularized, by",
    "start": "1816190",
    "end": "1821330"
  },
  {
    "text": "the way, I think, by Machiavelli\nin The Prince, in a not very nice context. ",
    "start": "1821330",
    "end": "1828470"
  },
  {
    "text": "So, what we do-- and they're\nall of a kind, the same-- we start with 1.",
    "start": "1828470",
    "end": "1833490"
  },
  {
    "text": "Let me get over here and get\na full board for this. ",
    "start": "1833490",
    "end": "1843300"
  },
  {
    "text": "First, we have to choose\na threshold size. ",
    "start": "1843300",
    "end": "1861070"
  },
  {
    "text": "Let's call it n0.  And that will be, essentially,\nthe smallest problem.",
    "start": "1861070",
    "end": "1867770"
  },
  {
    "start": "1867770",
    "end": "1875590"
  },
  {
    "text": "So, we can keep dividing, making\nour problem smaller-- this is what we saw with binary\nsearch, for example--",
    "start": "1875590",
    "end": "1883710"
  },
  {
    "text": "until it's small enough that we\nsay, oh the heck with it. We'll stop dividing it. Now we'll just solve\nit directly.",
    "start": "1883710",
    "end": "1889370"
  },
  {
    "start": "1889370",
    "end": "1895350"
  },
  {
    "text": "So, that's how small we need to\ndo it, the smallest thing we'll divide things into.",
    "start": "1895350",
    "end": "1902760"
  },
  {
    "text": "The next thing we have to ask\nourselves is, how many",
    "start": "1902760",
    "end": "1913090"
  },
  {
    "text": "instances at each division? ",
    "start": "1913090",
    "end": "1922590"
  },
  {
    "text": "We have a big problem. We divide it into smaller\nproblems. How many are we going\nto divide it into?",
    "start": "1922590",
    "end": "1927789"
  },
  {
    "start": "1927790",
    "end": "1933790"
  },
  {
    "text": "We divide it into smaller\nproblems until we reach the threshold where we can\nsolve it directly.",
    "start": "1933790",
    "end": "1940930"
  },
  {
    "text": "And then the third and most\nimportant part is we need some",
    "start": "1940930",
    "end": "1946120"
  },
  {
    "text": "algorithm to combine\nthe sub-solutions. ",
    "start": "1946120",
    "end": "1954289"
  },
  {
    "text": "It's no good solving the small\nproblem if we don't have some way to combine them to solve\nthe larger problem.",
    "start": "1954290",
    "end": "1959996"
  },
  {
    "start": "1959996",
    "end": "1965950"
  },
  {
    "text": "We saw that before, and now\nwe're going to see it again. And we're going to see it, in\nparticular, in the context of",
    "start": "1965950",
    "end": "1973800"
  },
  {
    "text": "merge sort. If I use this board, can people\nsee it or is the screen",
    "start": "1973800",
    "end": "1978909"
  },
  {
    "text": "going to occlude it? Is there anyone who cannot see\nthis board if I write on it?",
    "start": "1978910",
    "end": "1985990"
  },
  {
    "text": "All right then, I will\nwrite on it. ",
    "start": "1985990",
    "end": "1991130"
  },
  {
    "text": "Let's first look at\nthis problem. ",
    "start": "1991130",
    "end": "1998720"
  },
  {
    "text": "What von Neumann observed\nin 1945 is given two sorted lists--",
    "start": "1998720",
    "end": "2005760"
  },
  {
    "text": "and amazingly enough, this is\nstill the most popular sorting algorithm or one of the two most\npopular I should say--",
    "start": "2005760",
    "end": "2012780"
  },
  {
    "text": " you can merge them quickly.",
    "start": "2012780",
    "end": "2020240"
  },
  {
    "text": "Let's look at an example. I'll take the lists 1, 5,\n12, 18, 19, and 20.",
    "start": "2020240",
    "end": "2034340"
  },
  {
    "text": "That's list one. And I'll try and merge it with\nthe list 2, 3, 4, and 17.",
    "start": "2034340",
    "end": "2043620"
  },
  {
    "text": " The way you do the merge is\nyou start by comparing the",
    "start": "2043620",
    "end": "2051550"
  },
  {
    "text": "first element to the\nfirst element. ",
    "start": "2051550",
    "end": "2057710"
  },
  {
    "text": "And then you choose and\nsay all right, 1 is smaller than 2.",
    "start": "2057710",
    "end": "2063089"
  },
  {
    "text": "So that will be the first\nelement of the merge list. I'm now done with 1,\nand I never have",
    "start": "2063090",
    "end": "2069340"
  },
  {
    "text": "to look at it again. ",
    "start": "2069340",
    "end": "2074440"
  },
  {
    "text": "The next thing I do is I compare\n5 and 2, the head of",
    "start": "2074440",
    "end": "2080929"
  },
  {
    "text": "the two remaining lists. And I say, well, 2 is\nsmaller than 5. ",
    "start": "2080929",
    "end": "2088500"
  },
  {
    "text": "I never have to look\nat 2 again. And then compare 5 and 3.",
    "start": "2088500",
    "end": "2095449"
  },
  {
    "text": "I say 3 is smaller.  I never have to look\nat 3 again.",
    "start": "2095449",
    "end": "2102240"
  },
  {
    "text": "I then compare 4 and 5. 4 is smaller. ",
    "start": "2102240",
    "end": "2109230"
  },
  {
    "text": "I then compare 5 and 17. 5 is smaller.",
    "start": "2109230",
    "end": "2116360"
  },
  {
    "text": "Et cetera. ",
    "start": "2116360",
    "end": "2122600"
  },
  {
    "text": "Now, how many comparisons am\nI going to do this time? ",
    "start": "2122600",
    "end": "2134730"
  },
  {
    "text": "Well, let's first ask the\nquestion, how many elements am I going to copy from one of\nthese lists to this list?",
    "start": "2134730",
    "end": "2140480"
  },
  {
    "text": " Copy each element once, right?",
    "start": "2140480",
    "end": "2146720"
  },
  {
    "text": "So, the number of copies is\norder len of the list.",
    "start": "2146720",
    "end": "2155340"
  },
  {
    "start": "2155340",
    "end": "2161260"
  },
  {
    "text": "That's pretty good. That's linear. That's sort of at\nthe lower bound.",
    "start": "2161260",
    "end": "2167326"
  },
  {
    "text": "But how many comparisons? That's a little trickier\nto think about.",
    "start": "2167326",
    "end": "2172410"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE]",
    "start": "2172410",
    "end": "2178870"
  },
  {
    "text": "PROFESSOR JOHN GUTTAG: Pardon? AUDIENCE: At most, the length\nof the longer list. PROFESSOR JOHN GUTTAG: At most,\nthe length of the longer",
    "start": "2178870",
    "end": "2184070"
  },
  {
    "text": "list, which would also\nbe, we could claim to be, order len of--",
    "start": "2184070",
    "end": "2193740"
  },
  {
    "text": "I sort of cheated using L\nwhen we have two lists. But just think of it\nas the longer list.",
    "start": "2193740",
    "end": "2200100"
  },
  {
    "text": "So, you'd think that\nmany comparisons. ",
    "start": "2200100",
    "end": "2208500"
  },
  {
    "text": "You think we can do this whole\nthing in linear time? ",
    "start": "2208500",
    "end": "2213920"
  },
  {
    "text": "And the answer is yes. ",
    "start": "2213920",
    "end": "2219910"
  },
  {
    "text": "That's our merge.  That's a good thing.",
    "start": "2219910",
    "end": "2227130"
  },
  {
    "text": "Now, that takes care\nof this step. ",
    "start": "2227130",
    "end": "2235740"
  },
  {
    "text": "But now we have to ask,\nhow many times are we going to do a merge? ",
    "start": "2235740",
    "end": "2244980"
  },
  {
    "text": "Because remember, this\nworked because these lists were sorted. And so I only had to compare\nthe front of each list.",
    "start": "2244980",
    "end": "2252090"
  },
  {
    "start": "2252090",
    "end": "2257710"
  },
  {
    "text": "When I think about how I'm going\nto do the binary or the merge sort, what I'm going to do\nis take the original list,",
    "start": "2257710",
    "end": "2267260"
  },
  {
    "text": "break it up, break it up, break\nit up, break it up, until I have a list\nof length 1.",
    "start": "2267260",
    "end": "2273865"
  },
  {
    "text": "Well, those are all sorted,\ntrivially sorted. And then I'll have, at\nthe end, a bunch of",
    "start": "2273865",
    "end": "2280780"
  },
  {
    "text": "lists of length 1. I'll merge pairs of those. ",
    "start": "2280780",
    "end": "2286870"
  },
  {
    "text": "Now I'll have sorted\nlists of length 2. Then I'll merge those, getting\nsorted lists of length 4.",
    "start": "2286870",
    "end": "2294620"
  },
  {
    "text": "Until at the end, I'll be\nmerging two lists, each half the length of the\noriginal list.",
    "start": "2294620",
    "end": "2303030"
  },
  {
    "text": "Right. Does that make sense\nto everybody? ",
    "start": "2303030",
    "end": "2309470"
  },
  {
    "text": "Now I have to ask the question,\nhow many times am I going to call merge?",
    "start": "2309470",
    "end": "2315330"
  },
  {
    "text": " Yeah.",
    "start": "2315330",
    "end": "2320740"
  },
  {
    "text": "AUDIENCE: Base 2 log of\none of the lists. PROFESSOR JOHN GUTTAG: Yes, I'm\ngoing to call merge log",
    "start": "2320740",
    "end": "2328078"
  },
  {
    "text": "length of the list times.  So, if each merge is order n\nwhere n is length of the list,",
    "start": "2328078",
    "end": "2346630"
  },
  {
    "text": "and I call merge log n times,\nwhat's the total complexity of",
    "start": "2346630",
    "end": "2352150"
  },
  {
    "text": "the merge sort? AUDIENCE: nlog(n). PROFESSOR JOHN GUTTAG:\nnlog(n). Thank you.",
    "start": "2352150",
    "end": "2357740"
  },
  {
    "text": " Let's see, I have to choose\na heavy candy",
    "start": "2357740",
    "end": "2362849"
  },
  {
    "text": "because they carry better. Not well enough though. All right, you can\nrelay it back.",
    "start": "2362850",
    "end": "2369280"
  },
  {
    "text": " Now let's look at an\nimplementation. ",
    "start": "2369280",
    "end": "2382170"
  },
  {
    "text": "Here's the implementation\nof sort. And I don't think you need\nto look at it in detail.",
    "start": "2382170",
    "end": "2389340"
  },
  {
    "text": "It's doing exactly what\nI did on the board. Actually, you do need to\nlook at in detail, but not in real time.",
    "start": "2389340",
    "end": "2395890"
  },
  {
    "text": "And then sort. Now, there's a little\ncomplication here because I wanted to show another\nfeature to you.",
    "start": "2395890",
    "end": "2404640"
  },
  {
    "text": "For the moment, we'll ignore the\ncomplication, which is-- ",
    "start": "2404640",
    "end": "2412080"
  },
  {
    "text": "it's, in principle, working,\nbut it's not very bright. ",
    "start": "2412080",
    "end": "2419350"
  },
  {
    "text": "I'll use the mouse. What we see here is, whenever\nyou do a sort, you're sorting",
    "start": "2419350",
    "end": "2429490"
  },
  {
    "text": "by some ordering metric. It could be less than. It could be greater than.",
    "start": "2429490",
    "end": "2435030"
  },
  {
    "text": "It could be anything you want. If you're sorting people, you\ncould sort them by weight or",
    "start": "2435030",
    "end": "2440990"
  },
  {
    "text": "you could sort them by height. You could sort them by,\nGod forbid, GPA,",
    "start": "2440990",
    "end": "2446010"
  },
  {
    "text": "whatever you want.  So, I've written sort to take\nas an argument the ordering.",
    "start": "2446010",
    "end": "2457620"
  },
  {
    "text": "I've used this funny thing\ncalled lambda, which you don't",
    "start": "2457620",
    "end": "2463270"
  },
  {
    "text": "actually have to be\nresponsible for. You're never going to, probably,\nneed to use it in this course.",
    "start": "2463270",
    "end": "2468760"
  },
  {
    "text": "But it's a way to dynamically\nbuild a function on the fly.",
    "start": "2468760",
    "end": "2473800"
  },
  {
    "text": "The function I've built is I've\nsaid the default value of",
    "start": "2473800",
    "end": "2479740"
  },
  {
    "text": "LT is x less than y.",
    "start": "2479740",
    "end": "2484930"
  },
  {
    "text": "Lambda x, lambda xy says\nx and y are the parameters to a function.",
    "start": "2484930",
    "end": "2491150"
  },
  {
    "text": "And the body of the function is\nsimply return the value x less than y.",
    "start": "2491150",
    "end": "2497310"
  },
  {
    "text": "All right? Nothing very exciting there. What is exciting is having a\nfunction as an argument.",
    "start": "2497310",
    "end": "2504680"
  },
  {
    "text": "And that is something that\nyou'll be doing in future problem sets. Because it's one of the very\npowerful and most useful",
    "start": "2504680",
    "end": "2511150"
  },
  {
    "text": "features in Python, is using\nfunctional arguments. ",
    "start": "2511150",
    "end": "2516910"
  },
  {
    "text": "Right. Having got past that, what we\nsee is we first say if the length of L is less than 2--",
    "start": "2516910",
    "end": "2524880"
  },
  {
    "text": "that's my threshold-- then I'm just going to return\nL, actually a copy of L.",
    "start": "2524880",
    "end": "2535599"
  },
  {
    "text": "Otherwise, I'm going to find\nroughly the middle of L.",
    "start": "2535600",
    "end": "2542810"
  },
  {
    "text": "Then I'm going to call sort\nrecursively with the part to",
    "start": "2542810",
    "end": "2547970"
  },
  {
    "text": "the left of the middle and the\npart to the right of the middle, and then merge them.",
    "start": "2547970",
    "end": "2557640"
  },
  {
    "text": "So I'm going to go all the way\ndown until I get to list of length 1, and then bubble\nall the way back up,",
    "start": "2557640",
    "end": "2563240"
  },
  {
    "text": "merging as I go. ",
    "start": "2563240",
    "end": "2569250"
  },
  {
    "text": "So, we can see that the depth\nof the recursion will be log(n), as observed before.",
    "start": "2569250",
    "end": "2577210"
  },
  {
    "text": "This is exactly what we\nlooked at when we looked at binary search. How many times can you divide\nsomething in half --",
    "start": "2577210",
    "end": "2583870"
  },
  {
    "text": "log(n) times? And each recursion we're\ngoing to call merge.",
    "start": "2583870",
    "end": "2593079"
  },
  {
    "text": "So, this is consistent with the\nnotion that the complexity of the overall algorithm\nis nlog(n).",
    "start": "2593080",
    "end": "2598760"
  },
  {
    "text": " Let's run it.",
    "start": "2598760",
    "end": "2605620"
  },
  {
    "text": "And I'm going to print as we\ngo what's getting merged. ",
    "start": "2605620",
    "end": "2630640"
  },
  {
    "text": "Get rid of this one. This was our selection sort. We already looked at that.",
    "start": "2630640",
    "end": "2635770"
  },
  {
    "text": "Yeah. ",
    "start": "2635770",
    "end": "2645630"
  },
  {
    "text": "So what we'll see here is the\nfirst example, I was just",
    "start": "2645630",
    "end": "2652890"
  },
  {
    "text": "sorting a list of integers. Maybe we'll look at that\nall by itself.",
    "start": "2652890",
    "end": "2658240"
  },
  {
    "start": "2658240",
    "end": "2666520"
  },
  {
    "text": "I didn't pass it in the second\nargument, so it used the default less than. ",
    "start": "2666520",
    "end": "2673920"
  },
  {
    "text": "It was first merge 4 and 5. Then it had to merge 35\nwith 4 and 5, then 29",
    "start": "2673920",
    "end": "2680960"
  },
  {
    "text": "with 17, 58 and 0. And then the longer list, 1729\nwith 058, 04535 with 0172958.",
    "start": "2680960",
    "end": "2694130"
  },
  {
    "text": "And then we were done.  So, indeed it did a logarithmic\nnumber of merges.",
    "start": "2694130",
    "end": "2700950"
  },
  {
    "text": " The next piece of code, I'm\ntaking advantage of the fact",
    "start": "2700950",
    "end": "2713359"
  },
  {
    "text": "that this function can sort\nlists of different kinds.",
    "start": "2713360",
    "end": "2719080"
  },
  {
    "text": "And I'm calling it now with\nthe list of floats. And I am passing in the\nsecond argument,",
    "start": "2719080",
    "end": "2725320"
  },
  {
    "text": "which is going to be-- well, let's for fun, I wonder\nwhat happens if I make this",
    "start": "2725320",
    "end": "2730800"
  },
  {
    "text": "greater than.  Let's see what we get. ",
    "start": "2730800",
    "end": "2741490"
  },
  {
    "text": "Now you note, it's sorted\nit in the other order. ",
    "start": "2741490",
    "end": "2746950"
  },
  {
    "text": "Because I passed in the ordering\nthat said I want to use a different comparison then\nless than, I want to use",
    "start": "2746950",
    "end": "2752730"
  },
  {
    "text": "greater than. So the same code did the\nsort the other way.",
    "start": "2752730",
    "end": "2757740"
  },
  {
    "text": " I can do more interesting\nthings. ",
    "start": "2757740",
    "end": "2769470"
  },
  {
    "text": "So, here I'm assuming I\nhave a list of names. And I've written two ordering\nfunctions myself, one that",
    "start": "2769470",
    "end": "2780300"
  },
  {
    "text": "first compares the last names\nand then the first names. And a different one that\ncompares the first names and",
    "start": "2780300",
    "end": "2785750"
  },
  {
    "text": "then the last names.  And we can look at those.",
    "start": "2785750",
    "end": "2793290"
  },
  {
    "start": "2793290",
    "end": "2802550"
  },
  {
    "text": "Just to avoid cluttering\nup the screen, let me get rid of this. ",
    "start": "2802550",
    "end": "2816370"
  },
  {
    "text": "What we can see is we got-- we did the same way of dividing\nthings initially, but",
    "start": "2816370",
    "end": "2821769"
  },
  {
    "text": "now we got different\norderings. So, if we look at the first\nordering I used, we start with",
    "start": "2821770",
    "end": "2828750"
  },
  {
    "text": "Giselle Brady and then Tom\nBrady and then Chancellor Grimson, et cetera.",
    "start": "2828750",
    "end": "2834800"
  },
  {
    "text": "And if we do the second\nordering, we see, among other things, you have me between\nGiselle and Tom.",
    "start": "2834800",
    "end": "2841590"
  },
  {
    "text": "Not a bad outcome from\nmy perspective. ",
    "start": "2841590",
    "end": "2847920"
  },
  {
    "text": "But again, a lot\nof flexibility. By using this functional\nargument, I can define",
    "start": "2847920",
    "end": "2856760"
  },
  {
    "text": "whatever functions I want, and\nusing the same sort, get lots of different code.",
    "start": "2856760",
    "end": "2863569"
  },
  {
    "text": "And you will discover that in\nfact the built in sort of Python has this kind\nof flexibility.",
    "start": "2863570",
    "end": "2872000"
  },
  {
    "text": "You will also find, as you\nwrite your own programs, increasingly you'll want to use\nfunctions as arguments.",
    "start": "2872000",
    "end": "2878680"
  },
  {
    "text": "Because it allows you to write\na lot less code to accomplish the same tasks. ",
    "start": "2878680",
    "end": "2886955"
  }
]