[
  {
    "text": "-- shortest paths.\nThis is the finale. Hopefully it was worth waiting\nfor.",
    "start": "7000",
    "end": "13832"
  },
  {
    "text": "Remind you there's a quiz\ncoming up soon, you should be studying for it.\nThere's no problem set due at",
    "start": "13832",
    "end": "23359"
  },
  {
    "text": "the same time as the quiz\nbecause you should be studying",
    "start": "23359",
    "end": "28652"
  },
  {
    "text": "now.\nIt's a take-home exam. It's required that you come to\nclass on Monday.",
    "start": "28652",
    "end": "37156"
  },
  {
    "text": "Of course, you'll all come,\nbut everyone watching at home",
    "start": "37157",
    "end": "43052"
  },
  {
    "text": "should also come next Monday to\nget the quiz. It's the required lecture.\nSo, we need a bit of a recap in",
    "start": "43052",
    "end": "53684"
  },
  {
    "text": "the trilogy so far.\nSo, the last two lectures, the last two episodes,\nor about single source shortest",
    "start": "53684",
    "end": "64000"
  },
  {
    "text": "paths.\nSo, we wanted to find the shortest path from a source\nvertex to every other vertex.",
    "start": "64000",
    "end": "73575"
  },
  {
    "text": "And, we saw a few algorithms\nfor this. Here's some recap.\nWe saw in the unweighted case,",
    "start": "73575",
    "end": "81525"
  },
  {
    "text": "that was sort of the easiest\nwhere all the edge weights were",
    "start": "81525",
    "end": "87043"
  },
  {
    "text": "one.\nThen we could use breadth first search.\nAnd this costs what we call",
    "start": "87043",
    "end": "94988"
  },
  {
    "text": "linear time in the graph world,\nthe number of vertices plus the",
    "start": "94988",
    "end": "101849"
  },
  {
    "text": "number of edges.\nThe next simplest case, perhaps, is nonnegative edge\nweights.",
    "start": "101849",
    "end": "110150"
  },
  {
    "text": "And in that case,\nwhat algorithm do we use? Dijkstra, all right,\neveryone's awake.",
    "start": "110150",
    "end": "120000"
  },
  {
    "text": "Several answers at once,\ngreat. So this takes almost linear\ntime if you use a good heap",
    "start": "120000",
    "end": "131675"
  },
  {
    "text": "structure, so,\nV log V plus E. And, in the general case,\ngeneral weights,",
    "start": "131675",
    "end": "141405"
  },
  {
    "text": "we would use Bellman-Ford which\nyou saw.",
    "start": "141405",
    "end": "146826"
  },
  {
    "text": "And that costs VE,\ngood, OK, which is quite a bit",
    "start": "146826",
    "end": "153498"
  },
  {
    "text": "worse.\nThis is ignoring log factors. Dijkstra is basically linear\ntime, Bellman-Ford you're",
    "start": "153498",
    "end": "162716"
  },
  {
    "text": "quadratic if you have a\nconnected graph. So, in the sparse case,\nwhen E is order V,",
    "start": "162716",
    "end": "169269"
  },
  {
    "text": "this is about linear.\nThis is about quadratic. In the dense case,\nwhen E is about V^2,",
    "start": "169269",
    "end": "176068"
  },
  {
    "text": "this is quadratic,\nand this is cubic. So, Dijkstra and Bellman-Ford\nare separated by about an order",
    "start": "176068",
    "end": "186164"
  },
  {
    "text": "of V factor, which is pretty\nbad. OK, but that's the best we know\nhow to do for single source",
    "start": "186164",
    "end": "195410"
  },
  {
    "text": "shortest paths,\nnegative edge weights, Bellman-Ford is the best.\nWe also saw in recitation the",
    "start": "195410",
    "end": "204760"
  },
  {
    "text": "case of a DAG.\nAnd there, what do you do?",
    "start": "204760",
    "end": "210000"
  },
  {
    "text": "Topological sort,\nyeah. So, you can do a topological\nsort to get an ordering on the",
    "start": "210000",
    "end": "219010"
  },
  {
    "text": "vertices.\nThat you run Bellman-Ford, one round.\nThis is one way to think of",
    "start": "219010",
    "end": "227118"
  },
  {
    "text": "what's going on.\nYou run Bellman-Ford in the order given by the topological\nsort, which is once,",
    "start": "227119",
    "end": "237593"
  },
  {
    "text": "and you get a linear time\nalgorithm.",
    "start": "237593",
    "end": "243000"
  },
  {
    "text": "So, DAG is another case where\nwe know how to do well even with weights.\nUnweighted, we can also do",
    "start": "243000",
    "end": "248556"
  },
  {
    "text": "linear time.\nBut most of the time, though, will be,\nso you should keep these in mind in the quiz.\nWhen you get a shortest path",
    "start": "248556",
    "end": "255633"
  },
  {
    "text": "problem, or what you end up\ndetermining is the shortest path problem, think about what's the\nbest algorithm you can use in",
    "start": "255633",
    "end": "262594"
  },
  {
    "text": "that case?\nOK, so that's single source shortest paths.\nAnd so, in our evolution of the Death Star, initially it was\njust nonnegative edge weights.",
    "start": "262594",
    "end": "270841"
  },
  {
    "text": "Then we got negative edge\nweights. Today, the Death Star\nchallenges us with all pair",
    "start": "270841",
    "end": "277333"
  },
  {
    "text": "shortest paths,\nwhere we want to know the shortest path weight between\nevery pair of vertices.",
    "start": "277333",
    "end": "284000"
  },
  {
    "text": "OK, so let's get some quick\nresults. What could we do with this\ncase?",
    "start": "299000",
    "end": "307768"
  },
  {
    "text": "So, for example,\nsuppose I have an unweighted",
    "start": "307769",
    "end": "313615"
  },
  {
    "text": "graph.\nAny suggestions of how I should compute all pair shortest paths?\nBetween every pair of vertices,",
    "start": "313615",
    "end": "326902"
  },
  {
    "text": "I want to know the shortest\npath weight.",
    "start": "326902",
    "end": "332083"
  },
  {
    "text": "BFS, a couple more words?\nYeah?",
    "start": "332083",
    "end": "337787"
  },
  {
    "text": "Right, BFS V times.\nOK, I'll say V times BFS,",
    "start": "337787",
    "end": "344720"
  },
  {
    "text": "OK?\nSo, the running time would be",
    "start": "344721",
    "end": "349763"
  },
  {
    "text": "V^2 plus V times E,\nyeah, which is assuming your",
    "start": "349763",
    "end": "357169"
  },
  {
    "text": "graph is connected,\nV times E.",
    "start": "357169",
    "end": "363000"
  },
  {
    "text": "OK, good.\nThat's probably about the best algorithm we know for unweighted\ngraphs. So, a lot of these are going to\nsort of be the obvious answer.",
    "start": "363000",
    "end": "371558"
  },
  {
    "text": "You take your single source\nalgorithm, you run it V times. That's the best you can do,\nOK, or the best we know how to",
    "start": "371558",
    "end": "378577"
  },
  {
    "text": "do.\nThis is not so bad. This is like one iteration of\nBellman-Ford, for comparison.\nWe definitely need at least,",
    "start": "378577",
    "end": "385165"
  },
  {
    "text": "like, V^2 time,\nbecause the size of the output is V^2, shortest path weight we\nhave to compute.",
    "start": "385165",
    "end": "392000"
  },
  {
    "text": "So, this is not perfect,\nbut pretty good.",
    "start": "392000",
    "end": "397052"
  },
  {
    "text": "And we are not going to improve\non that. So, nonnegative edge weights:\nthe natural thing to do is to",
    "start": "397052",
    "end": "409305"
  },
  {
    "text": "run Dijkstra V times,\nOK, no big surprise.",
    "start": "409305",
    "end": "414483"
  },
  {
    "text": "And the running time of that\nis, well, V times E again,",
    "start": "414484",
    "end": "421305"
  },
  {
    "text": "plus V^2, log V,\nwhich is also not too bad.",
    "start": "421305",
    "end": "428000"
  },
  {
    "text": "I mean, it's basically the same\nas running BFS. And then, there's the log\nfactor. If you ignore the log factor,\nthis is the dominant term.",
    "start": "428000",
    "end": "436000"
  },
  {
    "text": "And, I mean,\nthis had an [added?] V^2 as well.\nSo, these are both pretty good. I mean, this is kind of neat.\nEssentially,",
    "start": "436000",
    "end": "442977"
  },
  {
    "text": "the time it takes to run one\nBellman-Ford plus a log factor, you can compute all pair\nshortest paths if you have",
    "start": "442977",
    "end": "449533"
  },
  {
    "text": "nonnegative edge weights.\nSo, I mean, comparing all pairs",
    "start": "449533",
    "end": "455310"
  },
  {
    "text": "to signal source,\nthis seems a lot better, except we can only handle\nnonnegative edge weights.",
    "start": "455311",
    "end": "465032"
  },
  {
    "text": "OK, so now let's think about\nthe general case. Well, this is the focus of\ntoday, and here's where we can",
    "start": "465032",
    "end": "475820"
  },
  {
    "text": "actually make an improvement.\nSo the obvious thing is V times",
    "start": "475821",
    "end": "482231"
  },
  {
    "text": "Bellman-Ford,\nwhich would cost V^2 times E.",
    "start": "482231",
    "end": "488000"
  },
  {
    "text": "And that's pretty pitiful,\nand we're going to try to improve that to something closer\nto that nonnegative edge weight",
    "start": "488000",
    "end": "495862"
  },
  {
    "text": "bound.\nSo it turns out, here, we can actually make an\nimprovement whereas in these",
    "start": "495862",
    "end": "501310"
  },
  {
    "text": "special cases,\nwe really can't do much better. OK, I don't have a good\nintuition why,",
    "start": "501310",
    "end": "506965"
  },
  {
    "text": "but it's the case.\nSo, we'll cover something like three algorithms today for this\nproblem.",
    "start": "506965",
    "end": "514000"
  },
  {
    "text": "The last one will be the best,\nbut along the way we'll see some nice connections between\nshortest paths and dynamic",
    "start": "514000",
    "end": "520367"
  },
  {
    "text": "programming, which we haven't\nreally seen yet. We've seen shortest path,\nand applying greedy algorithms",
    "start": "520368",
    "end": "526054"
  },
  {
    "text": "to it, but today will actually\ndo dynamic programming. The intuition is that with all\npair shortest paths,",
    "start": "526054",
    "end": "531911"
  },
  {
    "text": "there's more potential\nsubproblem reuse. We've got to compute the\nshortest path from x to y for",
    "start": "531911",
    "end": "537143"
  },
  {
    "text": "all x and y.\nMaybe we can reuse those shortest paths in computing\nother shortest paths.",
    "start": "537143",
    "end": "543000"
  },
  {
    "text": "OK, there's a bit more\nreusability, let's say. OK, let me quickly define all\npair shortest paths formally,",
    "start": "543000",
    "end": "552363"
  },
  {
    "text": "because we're going to change\nour notation slightly. It's because we care about all\npairs.",
    "start": "552363",
    "end": "560272"
  },
  {
    "text": "So, as usual,\nthe input is directed graph, so, vertices and edges.\nWe're going to say that the",
    "start": "560272",
    "end": "569724"
  },
  {
    "text": "vertices are labeled one to n\nfor convenience because with all",
    "start": "569724",
    "end": "575880"
  },
  {
    "text": "pairs, we're going to think of\nthings more as an n by n matrix",
    "start": "575880",
    "end": "582036"
  },
  {
    "text": "instead of edges in some sense\nbecause it doesn't help to think",
    "start": "582036",
    "end": "588293"
  },
  {
    "text": "any more in terms of adjacency\nlists. And, you have edge weights as\nusual.",
    "start": "588293",
    "end": "595458"
  },
  {
    "text": "This is what makes it\ninteresting. Some of them are going to be\nnegative.",
    "start": "595458",
    "end": "605456"
  },
  {
    "text": "So, w maps to every real\nnumber, and the target output is",
    "start": "605456",
    "end": "613714"
  },
  {
    "text": "a shortest path matrix.\nSo, this is now an n by n",
    "start": "613714",
    "end": "620792"
  },
  {
    "text": "matrix.\nSo, n is just the number of",
    "start": "620792",
    "end": "625806"
  },
  {
    "text": "vertices of shortest path\nweights.",
    "start": "625806",
    "end": "632000"
  },
  {
    "text": "So, delta of i,\nj is the shortest path weight",
    "start": "632000",
    "end": "637820"
  },
  {
    "text": "from i to j for all pairs of\nvertices. So this, you could represent as\nan n by n matrix in particular.",
    "start": "637820",
    "end": "650915"
  },
  {
    "text": "OK, so now let's start doing\nalgorithms.",
    "start": "650915",
    "end": "657000"
  },
  {
    "text": "So, we have this very simple\nalgorithm, V times Bellman-Ford,",
    "start": "657000",
    "end": "662363"
  },
  {
    "text": "V^2 times E,\nand just for comparison's sake, I'm going to say,\nlet me rewrite that,",
    "start": "662363",
    "end": "669513"
  },
  {
    "text": "V times Bellman-Ford gives us\nthis running time of V^2 E,",
    "start": "669513",
    "end": "674519"
  },
  {
    "text": "and I'm going to think about\nthe case where, let's just say the graph is\ndense, meeting that the number",
    "start": "674519",
    "end": "683457"
  },
  {
    "text": "of edges is quadratic,\nand the number of vertices.",
    "start": "683458",
    "end": "689000"
  },
  {
    "text": "So in that case,\nthis will take V^4 time, which is pretty slow.\nWe'd like to do better.",
    "start": "689000",
    "end": "697675"
  },
  {
    "text": "So, first goal would just be to\nbeat V^4, V hypercubed,",
    "start": "697675",
    "end": "703251"
  },
  {
    "text": "I guess.\nOK, and we are going to use dynamic programming to do that.\nOr at least that's what the",
    "start": "703251",
    "end": "712856"
  },
  {
    "text": "motivation will come from.\nIt will take us a while before",
    "start": "712856",
    "end": "718639"
  },
  {
    "text": "we can even beat V^4,\nwhich is maybe a bit pathetic,",
    "start": "718639",
    "end": "723906"
  },
  {
    "text": "but it takes some clever\ninsights, let's say.",
    "start": "723906",
    "end": "730000"
  },
  {
    "text": "OK, so I'm going to introduce a\nbit more notation for this",
    "start": "730000",
    "end": "739576"
  },
  {
    "text": "graph.\nSo, I'm going to think about",
    "start": "739576",
    "end": "745287"
  },
  {
    "text": "the weighted adjacency matrix.\nSo, I don't think we've really",
    "start": "745288",
    "end": "753301"
  },
  {
    "text": "seen this in lecture before,\nalthough I think it's in the appendix.\nWhat that means,",
    "start": "753301",
    "end": "759516"
  },
  {
    "text": "so normally adjacency matrix is\nlike one if there's an edge, and zero if there isn't.\nAnd this is in a digraph,",
    "start": "759516",
    "end": "767803"
  },
  {
    "text": "so you have to be a little bit\ncareful. Here, these values,\nthe entries in the matrix,",
    "start": "767803",
    "end": "774171"
  },
  {
    "text": "are going to be the weights of\nthe edges. OK, this is this if ij is an\nedge.",
    "start": "774171",
    "end": "781000"
  },
  {
    "text": "So, if ij is an edge in the\ngraph, and it's going to be infinity if there is no edge.\nOK, in terms of shortest paths,",
    "start": "781000",
    "end": "788788"
  },
  {
    "text": "this is a more useful way to\nrepresent the graph. All right, and so this includes\neverything that we need from",
    "start": "788788",
    "end": "796099"
  },
  {
    "text": "here.\nAnd now we just have to think about it as a matrix.\nMatrices will be a useful tool",
    "start": "796099",
    "end": "801906"
  },
  {
    "text": "in a little while.\nOK, so now I'm going to define some sub problems.\nAnd, there's different ways",
    "start": "801906",
    "end": "808259"
  },
  {
    "text": "that you could define what's\ngoing on in the shortest paths problem.\nOK, the natural thing is I want",
    "start": "808260",
    "end": "815791"
  },
  {
    "text": "to go from vertex i to vertex j.\nWhat's the shortest path? OK, we need to refine the sub\nproblems a little but more than",
    "start": "815791",
    "end": "822550"
  },
  {
    "text": "that.\nNot surprising. And if you think about my\nanalogy to Bellman-Ford, what Bellman-Ford does is it\ntries to build longer and longer",
    "start": "822551",
    "end": "830003"
  },
  {
    "text": "shortest paths.\nBut here, length is in terms of the number of edges.\nSo, first, it builds shortest",
    "start": "830004",
    "end": "835493"
  },
  {
    "text": "paths of length one.\nWe've proven the first round it does that.\nThe second round,",
    "start": "835493",
    "end": "841789"
  },
  {
    "text": "it provides all shortest paths\nof length two, of count two,\nand so on.",
    "start": "841789",
    "end": "848842"
  },
  {
    "text": "We'd like to do that sort of\nanalogously, and try to reuse",
    "start": "848842",
    "end": "854842"
  },
  {
    "text": "things a little bit more.\nSo, I'm going to say d_ij^(m)",
    "start": "854842",
    "end": "860526"
  },
  {
    "text": "is the weight of the shortest\npath from i to j with some",
    "start": "860526",
    "end": "866315"
  },
  {
    "text": "restriction involving m.\nSo: shortest path from i to j",
    "start": "866315",
    "end": "873012"
  },
  {
    "text": "using at most m edges.\nOK, for example, if m is zero,\nthen we don't have to really",
    "start": "873012",
    "end": "881220"
  },
  {
    "text": "think very hard to find all\nshortest paths of length zero.",
    "start": "881220",
    "end": "887141"
  },
  {
    "text": "OK, they use zero edges,\nI should say. So, Bellman-Ford sort of tells\nus how to go from m to m plus",
    "start": "887142",
    "end": "897116"
  },
  {
    "text": "one.\nSo, let's just figure that out. So one thing we know from the\nBellman-Ford analysis is if we",
    "start": "897116",
    "end": "905806"
  },
  {
    "text": "look at d_ij^(m-1),\nwe know that in some sense the longest shortest path of\nrelevance, unless you have",
    "start": "905806",
    "end": "912193"
  },
  {
    "text": "negative weight cycle,\nthe longest shortest path of relevance is when m equals n\nminus one because that's the",
    "start": "912193",
    "end": "919032"
  },
  {
    "text": "longest simple path you can\nhave. So, this should be a shortest\npath weight from i to j,",
    "start": "919032",
    "end": "924516"
  },
  {
    "text": "and it would be no matter what\nlarger value you put in the superscript.\nThis should be delta of i comma",
    "start": "924516",
    "end": "932312"
  },
  {
    "text": "j if there's no negative weight\ncycles. OK, so this feels good for\ndynamic programming.",
    "start": "932312",
    "end": "938578"
  },
  {
    "text": "This will give us the answer if\nwe can compute this for all m. Then we'll have the shortest\npath weights in particular.",
    "start": "938578",
    "end": "947230"
  },
  {
    "text": "We need a way to detect\nnegative weight cycles, but let's not worry about that\ntoo much for now.",
    "start": "947230",
    "end": "954167"
  },
  {
    "text": "There are negative weights,\nbut let's just assume for now there's no negative weight\ncycles.",
    "start": "954167",
    "end": "962000"
  },
  {
    "text": "OK, and we get a recursion\nrecurrence. And the base case is when m\nequals zero.",
    "start": "962000",
    "end": "970900"
  },
  {
    "text": "This is pretty easy.\nThey have the same vertices,",
    "start": "970900",
    "end": "976522"
  },
  {
    "text": "the weight of zero,\nand otherwise it's infinity.",
    "start": "976522",
    "end": "982027"
  },
  {
    "text": "OK, and then the actual\nrecursion is for m.",
    "start": "982027",
    "end": "988000"
  },
  {
    "text": "OK, if I got this right,\nthis is a pretty easy, intuitive recursion for\nd_ij^(m) is a min of smaller",
    "start": "1017000",
    "end": "1025083"
  },
  {
    "text": "things in terms of n minus one.\nI'll just show the picture,",
    "start": "1025083",
    "end": "1030338"
  },
  {
    "text": "and then the proof of that\nclaim should be obvious. So, this is proof by picture.\nSo, we have on the one hand,",
    "start": "1030338",
    "end": "1039605"
  },
  {
    "text": "I over here,\nand j over here. We want to know the shortest\npath from i to j.",
    "start": "1039606",
    "end": "1045928"
  },
  {
    "text": "And, we want to use,\nat most, m edges. So, the idea is,\nwell, you could use m minus one",
    "start": "1045929",
    "end": "1054862"
  },
  {
    "text": "edges to get somewhere.\nSo this is, at most, m minus one edges,\nsome other place,",
    "start": "1054862",
    "end": "1062931"
  },
  {
    "text": "and we'll call it k.\nSo this is a candidate for k.",
    "start": "1062931",
    "end": "1068000"
  },
  {
    "text": "And then you could take the\nedge directly from k to j.",
    "start": "1068000",
    "end": "1073482"
  },
  {
    "text": "So, this costs A_k^j,\nand this costs DIK m minus one.",
    "start": "1073482",
    "end": "1080000"
  },
  {
    "text": "OK, and that's a candidate path\nof length that uses, at most, m edges from I to j.\nAnd this is essentially just",
    "start": "1080000",
    "end": "1086095"
  },
  {
    "text": "considering all of them.\nOK, so there's sort of many paths we are considering.\nAll of these are candidate",
    "start": "1086095",
    "end": "1091851"
  },
  {
    "text": "values of k.\nWe are taking them in over all k as intermediate nodes,\nwhatever. So there they are.\nWe take the best such path.",
    "start": "1091851",
    "end": "1098624"
  },
  {
    "text": "That should encompass all\nshortest paths. And this is essentially sort of\nwhat Bellman-Ford is doing,",
    "start": "1098624",
    "end": "1104155"
  },
  {
    "text": "although not exactly.\nWe also sort of want to think about, well, what if I just go\ndirectly with,",
    "start": "1104155",
    "end": "1109460"
  },
  {
    "text": "say, m minus one edges?\nWhat if there is no edge here that I want to use,\nin some sense?",
    "start": "1109460",
    "end": "1116513"
  },
  {
    "text": "Well, we always think about\nthere being, and the way the A's are defined, there's always this\nzero weight edge to yourself.",
    "start": "1116514",
    "end": "1125252"
  },
  {
    "text": "So, you could just take a path\nthat's shorter, go from d i to j,\nand j is a particular value of",
    "start": "1125252",
    "end": "1131951"
  },
  {
    "text": "k that we might consider,\nand then take a zero weight edge at the end from A and jj.\nOK, so this really encompasses",
    "start": "1131951",
    "end": "1140106"
  },
  {
    "text": "everything.\nSo that's a pretty trivial claim.\nOK, now once we have such a",
    "start": "1140106",
    "end": "1146252"
  },
  {
    "text": "recursion, we get a dynamic\nprogram. I mean, there,\nthis is it in some sense.",
    "start": "1146252",
    "end": "1151585"
  },
  {
    "text": "It's written recursively.\nYou can write a bottom up. And I would like to write it\nbottom up it little bit because",
    "start": "1151585",
    "end": "1159513"
  },
  {
    "text": "while it doesn't look like it,\nthis is a relaxation. This is yet another relaxation\nalgorithm.",
    "start": "1159513",
    "end": "1166072"
  },
  {
    "text": "So, I'll give you,\nso, this is sort of the algorithm.\nThis is not a very interesting",
    "start": "1166072",
    "end": "1171908"
  },
  {
    "text": "algorithm.\nSo, you don't have to write it all down if you don't feel like\nit.",
    "start": "1171909",
    "end": "1178155"
  },
  {
    "text": "It's probably not even in the\nbook. This is just an intermediate\nstep. So, we loop over all m.\nThat's sort of the outermost",
    "start": "1178155",
    "end": "1185818"
  },
  {
    "text": "thing to do.\nI want to build longer and longer paths,\nand this vaguely corresponds to",
    "start": "1185818",
    "end": "1191142"
  },
  {
    "text": "Bellman-Ford,\nalthough it's actually worse than Bellman-Ford.\nBut hey, what the heck?",
    "start": "1191142",
    "end": "1196467"
  },
  {
    "text": "It's a stepping stone.\nOK, then for all i and j,",
    "start": "1196467",
    "end": "1203591"
  },
  {
    "text": "and then we want to compute\nthis min.",
    "start": "1203591",
    "end": "1210204"
  },
  {
    "text": "So, we'll just loop over all k,\nand relax.",
    "start": "1210204",
    "end": "1217734"
  },
  {
    "text": "And, here's where we're\nactually computing the min.",
    "start": "1217734",
    "end": "1226918"
  },
  {
    "text": "And, it's a relaxation,\nis the point.",
    "start": "1226918",
    "end": "1235000"
  },
  {
    "text": "This is our good friend,\nthe relaxation step, relaxing edge.\nWell, it's not,",
    "start": "1235000",
    "end": "1240173"
  },
  {
    "text": "yeah.\nI guess we're relaxing edge kj, or something,\nexcept we don't have the same",
    "start": "1240173",
    "end": "1245700"
  },
  {
    "text": "clear notion.\nI mean, it's a particular thing that we're relaxing.\nIt's not just a single edge",
    "start": "1245700",
    "end": "1252149"
  },
  {
    "text": "because we don't have a single\nsource anymore. It's now relative to source I,\nwe are relaxing the edge kj,",
    "start": "1252149",
    "end": "1259448"
  },
  {
    "text": "something like that.\nBut this is clearly a relaxation.\nWe are just making the triangle",
    "start": "1259448",
    "end": "1265923"
  },
  {
    "text": "inequality true if it wasn't\nbefore. The tribal inequality has got\nto hold between all pairs.",
    "start": "1265923",
    "end": "1271528"
  },
  {
    "text": "And that's just implementing\nthis min, right? You're taking d ij.\nYou take the min of what it was",
    "start": "1271528",
    "end": "1277382"
  },
  {
    "text": "before in some sense.\nThat was one of the possibilities we considered when\nwe looked at the zero weight",
    "start": "1277382",
    "end": "1283610"
  },
  {
    "text": "edge.\nWe say, well, or you could go from i to some\nk in some way that we knew how to before, and then add on the\nedge, and check whether that's",
    "start": "1283610",
    "end": "1292204"
  },
  {
    "text": "better if it's better,\nset our current estimate to that.\nAnd, you do this for all k.",
    "start": "1292204",
    "end": "1298584"
  },
  {
    "text": "In particular,\nyou might actually compute something smaller than this min\nbecause I didn't put",
    "start": "1298584",
    "end": "1303924"
  },
  {
    "text": "superscripts up here.\nBut that's just making paths even better.\nOK, so you have to argue that",
    "start": "1303924",
    "end": "1309205"
  },
  {
    "text": "relaxation is always a good\nthing to do. So, by not putting\nsuperscripts, maybe I do some more\nrelaxation, but more relaxation",
    "start": "1309205",
    "end": "1316305"
  },
  {
    "text": "never hurts us.\nYou can still argue correctness using this claim.\nSo, it's not quite the direct",
    "start": "1316305",
    "end": "1323285"
  },
  {
    "text": "implementation,\nbut there you go, dynamic programming algorithm.\nThe main reason I'll write it",
    "start": "1323285",
    "end": "1330456"
  },
  {
    "text": "down: so you see that it's a\nrelaxation, and you see the running time is n^4,\nOK, which is certainly no",
    "start": "1330456",
    "end": "1338336"
  },
  {
    "text": "better than Bellman-Ford.\nBellman-Ford was n^4 even in the dense case,\nand it's a little better in the",
    "start": "1338336",
    "end": "1346138"
  },
  {
    "text": "sparse case.\nSo: not doing so great. But it's a start.\nOK, it gets our dynamic",
    "start": "1346138",
    "end": "1354740"
  },
  {
    "text": "programming minds thinking.\nAnd, we'll get a better dynamic",
    "start": "1354740",
    "end": "1361614"
  },
  {
    "text": "program in a moment.\nBut first, there's actually",
    "start": "1361614",
    "end": "1367185"
  },
  {
    "text": "something useful we can do with\nthis formulation,",
    "start": "1367185",
    "end": "1372874"
  },
  {
    "text": "and I guess I'll ask,\nbut I'll be really impressed if",
    "start": "1372874",
    "end": "1379037"
  },
  {
    "text": "anyone can see.\nDoes this formula look like",
    "start": "1379037",
    "end": "1384907"
  },
  {
    "text": "anything else that you've seen\nin any context, mathematical or algorithmic?\nHave you seen that recurrence",
    "start": "1384907",
    "end": "1395892"
  },
  {
    "text": "anywhere else?\nOK, not exactly as stated, but similar.\nI'm sure if you thought about",
    "start": "1395892",
    "end": "1404615"
  },
  {
    "text": "it for awhile,\nyou could come up with it.",
    "start": "1404615",
    "end": "1410000"
  },
  {
    "text": "Any answers?\nI didn't think you would be very intuitive,\nbut the answer is matrix",
    "start": "1410000",
    "end": "1416324"
  },
  {
    "text": "multiplication.\nAnd it may now be obvious to you, or it may not.\nYou have to think with the",
    "start": "1416324",
    "end": "1423459"
  },
  {
    "text": "right quirky mind.\nThen it's obvious that it's matrix multiplication.\nRemember, matrix",
    "start": "1423459",
    "end": "1430189"
  },
  {
    "text": "multiplication,\nwe have A, B, and C.\nThey're all n by n matrices.",
    "start": "1430189",
    "end": "1435216"
  },
  {
    "text": "And, we want to compute C\nequals A times B. And what that meant was,\nwell, c_ij was a sum over all k",
    "start": "1435216",
    "end": "1444852"
  },
  {
    "text": "of a_ik times b_kj.\nAll right, that was our definition of matrix\nmultiplication.",
    "start": "1444852",
    "end": "1451647"
  },
  {
    "text": "And that formula looks kind of\nlike this one. I mean, notice the subscripts:\nik and kj.",
    "start": "1451647",
    "end": "1459058"
  },
  {
    "text": "Now, the operators are a little\ndifferent. Here, we're multiplying the\ninside things and adding them",
    "start": "1459058",
    "end": "1467617"
  },
  {
    "text": "all together.\nThere, we're adding the inside",
    "start": "1467617",
    "end": "1474444"
  },
  {
    "text": "things and taking them in.\nBut other than that,",
    "start": "1474444",
    "end": "1481258"
  },
  {
    "text": "it's the same.\nOK, weird, but here we go.",
    "start": "1481259",
    "end": "1487185"
  },
  {
    "text": "So, the connection to shortest\npaths is you replace these",
    "start": "1487185",
    "end": "1495481"
  },
  {
    "text": "operators.\nSo, let's take matrix multiplication and replace,\nwhat should I do first,",
    "start": "1495481",
    "end": "1505198"
  },
  {
    "text": "plus this thing with min.\nSo, why not just change the",
    "start": "1505198",
    "end": "1510470"
  },
  {
    "text": "operators, replace dot with\nplus? This is just a different\nalgebra to work in,",
    "start": "1510470",
    "end": "1518073"
  },
  {
    "text": "where plus actually means min,\nand dot actually means plus.",
    "start": "1518073",
    "end": "1523953"
  },
  {
    "text": "So, you have to check that\nthings sort of work out in that",
    "start": "1523953",
    "end": "1529732"
  },
  {
    "text": "context, but if we do that,\nthen we get that c_ij is the",
    "start": "1529732",
    "end": "1535308"
  },
  {
    "text": "min overall k of a_ik plus,\na bit messy here, b_kj.\nAnd that looks like what we",
    "start": "1535308",
    "end": "1544464"
  },
  {
    "text": "actually want to compute,\nhere, for one value of m, you have to sort of do this m\ntimes.",
    "start": "1544464",
    "end": "1552224"
  },
  {
    "text": "But this conceptually is\nd_ij^(m), and this is d_ik^(m-1).\nSo, this is looking like a",
    "start": "1552224",
    "end": "1559709"
  },
  {
    "text": "matrix product,\nwhich is kind of cool. So, if we sort of plug in this\nclaim, then, and think about",
    "start": "1559709",
    "end": "1571616"
  },
  {
    "text": "things as matrices,\nthe recurrence gives us,",
    "start": "1571616",
    "end": "1577262"
  },
  {
    "text": "and I'll just write this now at\nmatrix form, that d^(m) is d^(m)",
    "start": "1577262",
    "end": "1585534"
  },
  {
    "text": "minus one, funny product,\nA. All right, so these are the\nweights.",
    "start": "1585535",
    "end": "1592187"
  },
  {
    "text": "These were the weighted\nadjacency matrix. This was the previous d value.\nThis is the new d value.",
    "start": "1592187",
    "end": "1598062"
  },
  {
    "text": "So, I'll just rewrite that in\nmatrix form with capital letters.\nOK, I have the circle up things",
    "start": "1598062",
    "end": "1603812"
  },
  {
    "text": "that are using this funny\nalgebra, so, in particular, circled product.\nOK, so that's kind of nifty.",
    "start": "1603812",
    "end": "1609812"
  },
  {
    "text": "We know something about\ncomputing matrix multiplications.\nWe can do it in n^3 time. If we were a bit fancier,\nmaybe we could do it in",
    "start": "1609812",
    "end": "1617812"
  },
  {
    "text": "sub-cubic time.\nSo, we could try to sort of use",
    "start": "1617812",
    "end": "1622956"
  },
  {
    "text": "this connection.\nAnd, well, think about what we are computing here.\nWe are saying,",
    "start": "1622956",
    "end": "1630491"
  },
  {
    "text": "well, d to the m is the\nprevious one times A. So, what is d^(m)?\nIs that some other algebraic",
    "start": "1630491",
    "end": "1639075"
  },
  {
    "text": "notion that we know?\nYeah, it's the exponent. We're taking A,\nand we want to raise it to the",
    "start": "1639075",
    "end": "1647563"
  },
  {
    "text": "power, m, with this funny notion\nof product.",
    "start": "1647563",
    "end": "1653000"
  },
  {
    "text": "So, in other words,\nd to the m is really just A to the m in a funny way.\nSo, I'll circle it,",
    "start": "1653000",
    "end": "1660005"
  },
  {
    "text": "OK?\nSo, that sounds good. We also know how to compute\npowers of things relatively",
    "start": "1660005",
    "end": "1666145"
  },
  {
    "text": "quickly, if you remember how.\nOK, for this notion, this power notion,\nto make sense,",
    "start": "1666145",
    "end": "1672521"
  },
  {
    "text": "I should say what A to the zero\nmeans. And so, I need some kind of\nidentity matrix.",
    "start": "1672521",
    "end": "1680000"
  },
  {
    "text": "And for here,\nthe identity matrix is this one, if I get it right.\nSo, it has zeros along the",
    "start": "1680000",
    "end": "1686553"
  },
  {
    "text": "diagonal, and infinities\neverywhere else. OK, that sort of just to match\nthis definition.",
    "start": "1686553",
    "end": "1692885"
  },
  {
    "text": "d_ij zero should be zeros on\nthe diagonals and infinity everywhere else.\nBut you can check this is",
    "start": "1692885",
    "end": "1699881"
  },
  {
    "text": "actually an identity.\nIf you multiply it with this funny multiplication against any\nother matrix,",
    "start": "1699881",
    "end": "1706802"
  },
  {
    "text": "you get the matrix back.\nNothing changes. This really is a valid identity\nmatrix.",
    "start": "1706802",
    "end": "1714749"
  },
  {
    "text": "And, I should mention that for\nA to the m to make sense,",
    "start": "1714749",
    "end": "1720175"
  },
  {
    "text": "you really knew that your\nproduct operation is associative.\nSo, actually A to the m circled",
    "start": "1720175",
    "end": "1728858"
  },
  {
    "text": "makes sense because circled\nmultiplication is associative,",
    "start": "1728858",
    "end": "1734482"
  },
  {
    "text": "and you can check that;\nnot hard because, I mean, min is associative,\nand addition is associative,",
    "start": "1734482",
    "end": "1743855"
  },
  {
    "text": "and all sorts of good stuff.\nAnd, you have some kind of",
    "start": "1743855",
    "end": "1750632"
  },
  {
    "text": "distributivity property.\nAnd, this is, in turn, because the real\nnumbers with,",
    "start": "1750632",
    "end": "1758227"
  },
  {
    "text": "and get the right order here,\nwith min as your addition",
    "start": "1758227",
    "end": "1763696"
  },
  {
    "text": "operation, and plus as your\nmultiplication operation is a",
    "start": "1763696",
    "end": "1769367"
  },
  {
    "text": "closed semi-ring.\nSo, if ever you want to know when powers make sense,\nthis is a good rule.",
    "start": "1769367",
    "end": "1777845"
  },
  {
    "text": "If you have a closed semi-ring,\nthen matrix products on that semi-ring will give you an\nassociative operator,",
    "start": "1777845",
    "end": "1786571"
  },
  {
    "text": "and then, good,\nyou can take products. OK, that's just some formalism.\nSo now, we have some intuition.",
    "start": "1786571",
    "end": "1794721"
  },
  {
    "text": "The question is,\nwhat's the right. Algorithm?\nThere are many possible",
    "start": "1794721",
    "end": "1800153"
  },
  {
    "text": "answers, some of which are\nright, some of which are not.",
    "start": "1800154",
    "end": "1806000"
  },
  {
    "text": "So, we have this connection to\nmatrix products, and we have a connection to\nmatrix powers.",
    "start": "1806000",
    "end": "1813024"
  },
  {
    "text": "And, we have algorithms for\nboth. The question is,\nwhat should we do?",
    "start": "1813024",
    "end": "1818354"
  },
  {
    "text": "So, all we need to do now is to\ncompute A to the funny power, n minus one.\nn minus one is when we get",
    "start": "1818354",
    "end": "1826267"
  },
  {
    "text": "shortest paths,\nassuming we have no negative weight cycles.\nIn fact, we could compute a",
    "start": "1826267",
    "end": "1834267"
  },
  {
    "text": "larger power than n minus one.\nOnce you get beyond n minus one, multipling by A doesn't\nchange you anymore.",
    "start": "1834267",
    "end": "1843002"
  },
  {
    "text": "So, how should we do it?\nOK, you're not giving any smart answers.\nI'll give the stupid answer.",
    "start": "1843002",
    "end": "1850644"
  },
  {
    "text": "You could say,\nwell, I take A. I multiply it by A.\nThen I multiply it by A,",
    "start": "1850645",
    "end": "1856692"
  },
  {
    "text": "and I multiply it by A,\nand I use normal, boring matrix to\nmultiplication.",
    "start": "1856692",
    "end": "1864000"
  },
  {
    "text": "So, I do, like,\nn minus two, standard matrix multiplies.\nSo, standard multiply costs,",
    "start": "1864000",
    "end": "1873229"
  },
  {
    "text": "like, n^3.\nAnd I'm doing n of them. So, this gives me an n^4\nalgorithm, and compute all the",
    "start": "1873229",
    "end": "1883134"
  },
  {
    "text": "shortest pathways in n^4.\nWoohoo! OK, no improvement.\nSo, how can I do better?",
    "start": "1883134",
    "end": "1891920"
  },
  {
    "text": "Right, natural thing to try\nwhich sadly does not work, is to use the sub cubic matrix\nmultiply algorithm.",
    "start": "1891920",
    "end": "1900079"
  },
  {
    "text": "We will, in some sense,\nget there in a moment with a somewhat simpler problem.\nBut, it's actually not known",
    "start": "1900079",
    "end": "1908400"
  },
  {
    "text": "how to compute shortest paths\nusing fast matrix multiplication like Strassen's system\nalgorithm.",
    "start": "1908400",
    "end": "1915839"
  },
  {
    "text": "But, good suggestion.\nOK, you have to think about why it doesn't work,\nand I'll tell you.",
    "start": "1915839",
    "end": "1924000"
  },
  {
    "text": "It's not obvious,\nso it's a perfectly reasonable suggestion.\nBut in this context it doesn't",
    "start": "1924000",
    "end": "1930099"
  },
  {
    "text": "quite work.\nIt will come up in a few moments.\nThe problem is, Strassen requires the notion of\nsubtraction.",
    "start": "1930099",
    "end": "1937099"
  },
  {
    "text": "And here, addition is min.\nAnd, there's no inverse to min. Once you take the arguments,\nyou can't sort of undo a min.",
    "start": "1937099",
    "end": "1945000"
  },
  {
    "text": "OK, so there's no notion of\nsubtraction, so it's not known how to pull that off,\nsadly.",
    "start": "1945000",
    "end": "1952000"
  },
  {
    "text": "So, what other tricks do we\nhave up our sleeve? Yeah?\nDivide and conquer,",
    "start": "1952000",
    "end": "1957801"
  },
  {
    "text": "log n powering,\nyeah, repeated squaring. That works.\nGood, we had a fancy way.",
    "start": "1957801",
    "end": "1964016"
  },
  {
    "text": "If you had a number n,\nyou sort of looked at the binary number representation of\nn, and you either squared the",
    "start": "1964016",
    "end": "1972883"
  },
  {
    "text": "number or squared it and added\nanother factor of A. Here, we don't even have to be\nsmart about it.",
    "start": "1972883",
    "end": "1982000"
  },
  {
    "text": "OK, we can just compute,\nwe really only have to think",
    "start": "1982000",
    "end": "1987306"
  },
  {
    "text": "about powers of two.\nWhat we want to know, and I'm going to need a bigger\nfont here because there's",
    "start": "1987306",
    "end": "1997102"
  },
  {
    "text": "multiple levels of subscripts,\nA to the circled power,",
    "start": "1997102",
    "end": "2002510"
  },
  {
    "text": "two to the ceiling of log n.\nActually, n minus one would be",
    "start": "2002510",
    "end": "2008428"
  },
  {
    "text": "enough.\nBut there you go. You can write n if you didn't\nleave yourself enough space like",
    "start": "2008428",
    "end": "2015852"
  },
  {
    "text": "me, n the ceiling,\nn the circle. This just means the next power\nof two after n minus one,",
    "start": "2015852",
    "end": "2021284"
  },
  {
    "text": "two to the ceiling log.\nSo, we don't have to go directly to n minus one.\nWe can go further because",
    "start": "2021284",
    "end": "2027283"
  },
  {
    "text": "anything farther than n minus\none is still just the shortest pathways.\nIf you look at the definition,",
    "start": "2027284",
    "end": "2033473"
  },
  {
    "text": "and you know that your paths\nare simple, which is true if you have no negative weight cycles,\nthen fine, just go farther.",
    "start": "2033473",
    "end": "2042000"
  },
  {
    "text": "Why not?\nAnd so, to compute this, we just do ceiling of log n\nminus one products,",
    "start": "2042000",
    "end": "2049142"
  },
  {
    "text": "just take A squared,\nand then take the result and square it; take the result and\nsquare it.",
    "start": "2049142",
    "end": "2057199"
  },
  {
    "text": "So, this is order log n\nsquares. And, we don't know how to use\nStrassen, but we can use the",
    "start": "2057199",
    "end": "2065257"
  },
  {
    "text": "boring, standard multiply of\nn^3, and that gives us n^3 log n",
    "start": "2065257",
    "end": "2070751"
  },
  {
    "text": "running time,\nOK, which finally is something that beats Bellman-Ford in the\ndense case.",
    "start": "2070751",
    "end": "2080000"
  },
  {
    "text": "OK, in the dense case,\nBellman-Ford was n^4. Here we get n^3 log n,\nfinally something better.",
    "start": "2080000",
    "end": "2086677"
  },
  {
    "text": "In the sparse case,\nit's about the same, maybe a little worse.\nE is order V.",
    "start": "2086677",
    "end": "2092093"
  },
  {
    "text": "Then we're going to get,\nlike, V3 for Bellman-Ford. Here, we get n^3 log n.\nOK, after log factors,",
    "start": "2092093",
    "end": "2099140"
  },
  {
    "text": "this is an improvement some of\nthe time. OK, it's about the same the\nother times.",
    "start": "2099141",
    "end": "2105963"
  },
  {
    "text": "Another nifty thing that you\nget for free out of this, is you can detect negative\nweight cycles.",
    "start": "2105963",
    "end": "2113029"
  },
  {
    "text": "So, here's a bit of a puzzle.\nHow would I detect, after I compute this product,\nA to the power to ceiling log n",
    "start": "2113029",
    "end": "2121235"
  },
  {
    "text": "minus one, how would I know if I\nfound a negative weight cycle? What would that mean it this\nmatrix of all their shortest",
    "start": "2121235",
    "end": "2130200"
  },
  {
    "text": "paths of, at most,\na certain length? If I found a cycle,\nwhat would have to be in that",
    "start": "2130200",
    "end": "2136875"
  },
  {
    "text": "matrix?\nYeah? Right, so I could,\nfor example, take this thing,\nmultiply it by A, see if the matrix changed at\nall.",
    "start": "2136875",
    "end": "2143285"
  },
  {
    "text": "Right, that works fine.\nThat's what we do in Bellman-Ford.\nIt's an even simpler thing. It's already there.\nYou don't have to multiply.",
    "start": "2143285",
    "end": "2151013"
  },
  {
    "text": "But that's the same running\ntime. That's a good answer.\nThe diagonal would have a negative value,\nyeah.",
    "start": "2151013",
    "end": "2156884"
  },
  {
    "text": "So, this is just a cute thing.\nBoth approaches would work,",
    "start": "2156884",
    "end": "2164909"
  },
  {
    "text": "can detect a negative weight\ncycle just by looking at the",
    "start": "2164909",
    "end": "2175089"
  },
  {
    "text": "diagonal of the matrix.\nYou just look for a negative",
    "start": "2175090",
    "end": "2184363"
  },
  {
    "text": "value in the diagonal.\nOK.",
    "start": "2184363",
    "end": "2190000"
  },
  {
    "text": "So, that's algorithm one,\nlet's say. I mean, we've seen several that\nare all bad, but I'll call this",
    "start": "2190000",
    "end": "2197329"
  },
  {
    "text": "number one.\nOK, we'll see two more. This is the only one that will,\nwell, I shouldn't say that.",
    "start": "2197329",
    "end": "2204282"
  },
  {
    "text": "Fine, there we go.\nSo, this is one dynamic program that wasn't so helpful,\nexcept it showed us a",
    "start": "2204282",
    "end": "2211308"
  },
  {
    "text": "connection to matrix\nmultiplication, which is interesting.\nWe'll see why it's useful a",
    "start": "2211309",
    "end": "2217581"
  },
  {
    "text": "little bit more.\nBut, it bled to this nasty four nested loops.\nAnd, using this trick,",
    "start": "2217581",
    "end": "2224821"
  },
  {
    "text": "we got down to n^3 log n.\nLet's try, just for n^3. OK, just get rid of that log.\nIt's annoying.",
    "start": "2224822",
    "end": "2231544"
  },
  {
    "text": "It makes you a little bit worse\nthan Bellman-Ford, and the sparse case.\nSo, let's just erase one of",
    "start": "2231544",
    "end": "2238559"
  },
  {
    "text": "these nested loops.\nOK, I want to do that. OK, obviously that algorithm\ndoesn't work because it's for",
    "start": "2238559",
    "end": "2245720"
  },
  {
    "text": "first decay, and it's not\ndefined, but, you know, I've got enough\nvariables.",
    "start": "2245720",
    "end": "2251054"
  },
  {
    "text": "Why don't I just define k to\nthe m? OK, it turns out that works.\nI'll do it from scratch,",
    "start": "2251054",
    "end": "2259555"
  },
  {
    "text": "but why not?\nI don't know if that's how Floyd and Warshall came up with\ntheir algorithm,",
    "start": "2259555",
    "end": "2267003"
  },
  {
    "text": "but here you go.\nHere's Floyd-Warshall. The idea is to define the\nsubproblems a little bit more",
    "start": "2267003",
    "end": "2275063"
  },
  {
    "text": "cleverly so that to compute one\nof these values, you don't have to take the min\nof n things.",
    "start": "2275063",
    "end": "2284000"
  },
  {
    "text": "I just want to take the min of\ntwo things. If I could do that,\nand I still only have n^3",
    "start": "2284000",
    "end": "2289639"
  },
  {
    "text": "subproblems, then I would have\nn^3 time. So, all right,\nthe running time of dynamic",
    "start": "2289639",
    "end": "2294947"
  },
  {
    "text": "program is number of subproblems\ntimes the time to compute the recurrence for one subproblem.\nSo, here's linear times n^3,",
    "start": "2294947",
    "end": "2302843"
  },
  {
    "text": "and we want n^3 times constant.\nThat would be good. So that's Floyd-Warshall.\nSo, here's the way we're going",
    "start": "2302843",
    "end": "2309809"
  },
  {
    "text": "to redefine c_ij.\nOr I guess, there it was called",
    "start": "2309810",
    "end": "2315369"
  },
  {
    "text": "d_ij.\nGood, so we're going to define something new.\nSo, c_ij superscript k is now",
    "start": "2315369",
    "end": "2323847"
  },
  {
    "text": "going to be the weight of the\nshortest path from I to j as",
    "start": "2323847",
    "end": "2330043"
  },
  {
    "text": "before.\nNotice I used the superscript k instead of m because I want k\nand m to be the same thing.",
    "start": "2330043",
    "end": "2340260"
  },
  {
    "text": "Deep.\nOK, now, here's the new constraint.\nI want all intermediate",
    "start": "2340260",
    "end": "2345995"
  },
  {
    "text": "vertices along the path,\nmeeting all vertices except for I and j at the beginning and the\nend to have a small label.",
    "start": "2345995",
    "end": "2353915"
  },
  {
    "text": "So, they should be in the set\nfrom one up to k. And this is where we are really\nusing that our vertices are",
    "start": "2353915",
    "end": "2361204"
  },
  {
    "text": "labeled one up to m.\nSo, I'm going to say, well, first think about the\nshortest paths that don't use",
    "start": "2361205",
    "end": "2368004"
  },
  {
    "text": "any other vertices.\nThat's when k is zero. Then think about all the\nshortest paths that maybe they",
    "start": "2368004",
    "end": "2375506"
  },
  {
    "text": "use vertex one.\nAnd then think about the shortest paths that maybe use\nvertex one or vertex two.",
    "start": "2375506",
    "end": "2381545"
  },
  {
    "text": "Why not?\nYou could define it in this way.\nIt turns out, then when you increase k,\nyou only have to think about",
    "start": "2381545",
    "end": "2388363"
  },
  {
    "text": "one new vertex.\nHere, we had to take min over all k.\nNow we know which k to look at.",
    "start": "2388363",
    "end": "2393623"
  },
  {
    "text": "OK, maybe that made sense.\nMaybe it's not quite obvious yet.\nBut I'm going to redo this",
    "start": "2393623",
    "end": "2399077"
  },
  {
    "text": "claim, redo a recurrence.\nSo, maybe first I should say some obvious things.\nSo, if I want delta of ij of",
    "start": "2399077",
    "end": "2407428"
  },
  {
    "text": "the shortest pathway,\nwell, just take all the vertices.\nSo, take c_ij superscript n.",
    "start": "2407428",
    "end": "2413214"
  },
  {
    "text": "That's everything.\nAnd this even works, this is true even if you have a\nnegative weight cycle.",
    "start": "2413214",
    "end": "2419713"
  },
  {
    "text": "Although, again,\nwe're going to sort of ignore negative weight cycles as long\nas we can detect them.",
    "start": "2419714",
    "end": "2426642"
  },
  {
    "text": "And, another simple case is if\nyou have, well, c_ij to zero.\nLet me put that in the claim to",
    "start": "2426642",
    "end": "2435994"
  },
  {
    "text": "be a little bit more consistent\nhere. So, here's the new claim.\nIf we want to compute c_ij",
    "start": "2435995",
    "end": "2447208"
  },
  {
    "text": "superscript zero,\nwhat is it? Superscript zero means I really\nshouldn't use any intermediate",
    "start": "2447208",
    "end": "2458679"
  },
  {
    "text": "vertices.\nSo, this has a very simple",
    "start": "2458679",
    "end": "2463918"
  },
  {
    "text": "answer, a three letter answer.\nSo, it's not zero.",
    "start": "2463918",
    "end": "2469306"
  },
  {
    "text": "It's four letters.\nWhat's that? Nil.\nNo, not working yet.",
    "start": "2469306",
    "end": "2475367"
  },
  {
    "text": "It has some subscripts,\ntoo. So, the definition would be,\nwhat's the shortest path weight",
    "start": "2475367",
    "end": "2485020"
  },
  {
    "text": "from I to j when you're not\nallowed to use any intermediate",
    "start": "2485020",
    "end": "2491530"
  },
  {
    "text": "vertices?\nSorry? So, yeah, it has a very simple\nname.",
    "start": "2491530",
    "end": "2498073"
  },
  {
    "text": "That's the tricky part.\nAll right, so if i equals j,",
    "start": "2498073",
    "end": "2503141"
  },
  {
    "text": "[LAUGHTER] you're clever,\nright, open bracket i equals j",
    "start": "2503141",
    "end": "2508605"
  },
  {
    "text": "means one, well,\nOK. It sort of works,\nbut it's not quite right.",
    "start": "2508605",
    "end": "2514666"
  },
  {
    "text": "In fact, I want infinity if i\ndoes not equal j. And I want to zero if i equals\nj, a_ij, good.",
    "start": "2514666",
    "end": "2525000"
  },
  {
    "text": "I think it's a_ij.\nIt should be, right?\nMaybe I'm wrong. Right, a_ij.\nSo it's essentially not what I",
    "start": "2525000",
    "end": "2532243"
  },
  {
    "text": "said.\nThat's the point. If i does not equal j,\nyou still have to think about a",
    "start": "2532243",
    "end": "2537961"
  },
  {
    "text": "single edge connecting i to j,\nright? OK, so that's a bit of a\nsubtlety.",
    "start": "2537961",
    "end": "2543222"
  },
  {
    "text": "This is only intermediate\nvertices, so you could still go from i to j via a single edge.\nThat will cost a_ij.",
    "start": "2543222",
    "end": "2552574"
  },
  {
    "text": "If there is an edge:\ninfinity. If there isn't one:\nthat is a_ij. So, OK, that gets us started.\nAnd then, we want a recurrence.",
    "start": "2552574",
    "end": "2562102"
  },
  {
    "text": "And, the recurrence is,\nwell, maybe you get away with all the vertices that you had\nbefore.",
    "start": "2562102",
    "end": "2569031"
  },
  {
    "text": "So, if you want to know paths\nthat you had before, so if you want to know paths\nthat use one up to k,",
    "start": "2569031",
    "end": "2576747"
  },
  {
    "text": "maybe I just use one up to k\nminus one. You could try that.\nOr, you could try using k.",
    "start": "2576748",
    "end": "2584559"
  },
  {
    "text": "So, either you use k or you\ndon't. If you don't,\nit's got to be this.",
    "start": "2584559",
    "end": "2589779"
  },
  {
    "text": "If you do, then you've got to\ngo to k. So why not go to k at the end?\nSo, you go from I to k using",
    "start": "2589779",
    "end": "2597293"
  },
  {
    "text": "the previous vertices.\nObviously, you don't want to repeat k in there.\nAnd then, you go from k to j",
    "start": "2597293",
    "end": "2604887"
  },
  {
    "text": "somehow using vertices that are\nnot k. This should be pretty\nintuitive.",
    "start": "2604887",
    "end": "2611389"
  },
  {
    "text": "Again, I can draw a picture.\nSo, either you never go to k, and that's this wiggly line.\nYou go from i to j using things",
    "start": "2611389",
    "end": "2620331"
  },
  {
    "text": "only one up to k minus one.\nIn other words, here we have to use one up to\nk.",
    "start": "2620331",
    "end": "2625959"
  },
  {
    "text": "So, this just means don't use\nk. So, that's this thing.\nOr, you use k somewhere in the",
    "start": "2625959",
    "end": "2632357"
  },
  {
    "text": "middle there.\nOK, it's got to be one of the two.\nAnd in this case, you go from i to k using only\nsmaller vertices,",
    "start": "2632357",
    "end": "2640760"
  },
  {
    "text": "because you don't want to\nrepeat k. And here, you go from k to j\nusing only smaller labeled",
    "start": "2640760",
    "end": "2650778"
  },
  {
    "text": "vertices.\nSo, every path is one of the two.\nSo, we take the shortest of",
    "start": "2650778",
    "end": "2658055"
  },
  {
    "text": "these two subproblems.\nThat's the answer. So, now we have a min of two\nthings.",
    "start": "2658055",
    "end": "2666081"
  },
  {
    "text": "It takes constant time to\ncompute. So, we get a cubic algorithm.\nSo, let me write it down.",
    "start": "2666081",
    "end": "2676766"
  },
  {
    "text": "So, this is the Floyd-Warshall\nalgorithm. I'll write the name again.\nYou give it a matrix A.",
    "start": "2676766",
    "end": "2686614"
  },
  {
    "text": "That's all it really needs to\nknow. It codes everything.\nYou copy C to A.",
    "start": "2686614",
    "end": "2694359"
  },
  {
    "text": "That's the warm up.\nRight at time zero, C equals A.\nAnd then you just have these",
    "start": "2694360",
    "end": "2703182"
  },
  {
    "text": "three loops for every value of\nk, for every value of i, and for every value of j.\nYou compute that min.",
    "start": "2703183",
    "end": "2710981"
  },
  {
    "text": "And if you think about it a\nlittle bit, that min is a relaxation.\nSurprise, surprise.",
    "start": "2710981",
    "end": "2718000"
  },
  {
    "text": "So, that is the Floyd-Warshall\nalgorithm. And, the running time is\nclearly n^3, three nested loops,",
    "start": "2747000",
    "end": "2758107"
  },
  {
    "text": "constant time inside.\nSo, we're finally getting something that is never worse\nthan Bellman-Ford.",
    "start": "2758107",
    "end": "2765056"
  },
  {
    "text": "In the sparse case,\nit's the same. And anything denser,\nthe number of edges is super linear.\nThis is strictly better than",
    "start": "2765056",
    "end": "2771590"
  },
  {
    "text": "Bellman-Ford.\nAnd, it's better than everything we've seen so far for\nall pair, shortest paths.",
    "start": "2771591",
    "end": "2776718"
  },
  {
    "text": "And, this handles negative\nweights; very simple algorithm, even simpler than the one\nbefore.",
    "start": "2776718",
    "end": "2781732"
  },
  {
    "text": "It's just relaxation within\nthree loops. What more could you ask for?\nAnd we need to check that this",
    "start": "2781732",
    "end": "2787197"
  },
  {
    "text": "is indeed what min we're\ncomputing here, except that the superscripts\nare omitted.",
    "start": "2787197",
    "end": "2793000"
  },
  {
    "text": "That's, again,\na bit of hand waving a bit. It's OK to omit subscripts\nbecause that can only mean that",
    "start": "2793000",
    "end": "2799343"
  },
  {
    "text": "you're doing more relaxation\ntechniques should be. Doing more relaxations can\nnever hurt you.",
    "start": "2799343",
    "end": "2805169"
  },
  {
    "text": "In particular,\nwe do all the ones that we have to.\nTherefore, we find the shortest",
    "start": "2805169",
    "end": "2810283"
  },
  {
    "text": "path weights.\nAnd, again, here, we're assuming that there is no\nnegative weight cycles.",
    "start": "2810283",
    "end": "2815720"
  },
  {
    "text": "It shouldn't be hard to find\nthem, but you have to think about that a little bit.\nOK, you could run another round",
    "start": "2815720",
    "end": "2824408"
  },
  {
    "text": "of Bellman-Ford,\nsee if it relaxes in a new edges again.\nFor example,",
    "start": "2824408",
    "end": "2829537"
  },
  {
    "text": "I think there's no nifty trick\nfor that version. And, we're going to cover,\nthat's our second algorithm for",
    "start": "2829537",
    "end": "2837619"
  },
  {
    "text": "all pairs shortest paths.\nBefore we go up to the third algorithm, which is going to be\nthe cleverest of them all,",
    "start": "2837619",
    "end": "2846167"
  },
  {
    "text": "the one Ring to rule them all,\nto switch trilogies, we're going to take a little\nbit of a diversion,",
    "start": "2846167",
    "end": "2853705"
  },
  {
    "text": "side story, whatever,\nand talk about transitive closure briefly.\nThis is just a good thing to",
    "start": "2853705",
    "end": "2862592"
  },
  {
    "text": "know about.\nAnd, it relates to the algorithms we've seen so far.\nSo, here's a transitive closure",
    "start": "2862592",
    "end": "2871203"
  },
  {
    "text": "problem.\nI give you a directed graph, and for all pair vertices,\ni and j, I want to compute this",
    "start": "2871203",
    "end": "2879814"
  },
  {
    "text": "number.\nIt's one if there's a path from i to j.\nFrom i to j,",
    "start": "2879814",
    "end": "2886670"
  },
  {
    "text": "OK, and then zero otherwise.\nOK, this is sort of like a",
    "start": "2886670",
    "end": "2894184"
  },
  {
    "text": "boring adjacency matrix with no\nweights, except it's about paths",
    "start": "2894185",
    "end": "2902953"
  },
  {
    "text": "instead of being about edges.\nOK, so how can I compute this?",
    "start": "2902953",
    "end": "2912000"
  },
  {
    "text": "That's very simple.\nHow should I compute this?",
    "start": "2912000",
    "end": "2919325"
  },
  {
    "text": "This gives me a graph in some\nsense.",
    "start": "2919325",
    "end": "2925023"
  },
  {
    "text": "This is adjacency matrix of a\nnew graph called the transitive",
    "start": "2925023",
    "end": "2934790"
  },
  {
    "text": "closure of my input graph.\nSo, breadth first search,",
    "start": "2934790",
    "end": "2941966"
  },
  {
    "text": "yeah, good.\nSo, all I need to do is find shortest paths,\nand if the weights come out",
    "start": "2941966",
    "end": "2948337"
  },
  {
    "text": "infinity, then there's no path.\nIf it's less than infinity, that there's a path.\nAnd so here,",
    "start": "2948337",
    "end": "2955415"
  },
  {
    "text": "so you are saying maybe I don't\ncare about the weights, so I can run breadth first\nsearch n times,",
    "start": "2955415",
    "end": "2962887"
  },
  {
    "text": "and that will work indeed.\nSo, if we do B times B of S, so it's maybe weird that I'm\ncovering here in the middle,",
    "start": "2962887",
    "end": "2971539"
  },
  {
    "text": "but it's just an interlude.\nSo, we have, then, something like V times E.\nOK, you can run any of these",
    "start": "2971539",
    "end": "2982360"
  },
  {
    "text": "algorithms.\nYou could take Floyd-Warshall for example.\nWhy not?",
    "start": "2982361",
    "end": "2988581"
  },
  {
    "text": "OK, then it would just be V^ I\nmean, you could run in any of",
    "start": "2988581",
    "end": "2994698"
  },
  {
    "text": "these algorithms with weights of\none or zero, and just check",
    "start": "2994698",
    "end": "3000816"
  },
  {
    "text": "whether the values are infinity\nor not.",
    "start": "3000816",
    "end": "3006000"
  },
  {
    "text": "So, I mean, t_ij equals zero,\nif and only if the shortest path weight from i to j is\ninfinity.",
    "start": "3006000",
    "end": "3012622"
  },
  {
    "text": "So, just solve this.\nThis is an easier problem than shortest paths.\nIt is, in fact,",
    "start": "3012622",
    "end": "3018444"
  },
  {
    "text": "strictly easier in a certain\nsense, because what's going on with transitive closure,\nand I just want to mention this",
    "start": "3018444",
    "end": "3026668"
  },
  {
    "text": "out of interest because\ntransitive closure is a useful thing to know about.\nEssentially,",
    "start": "3026668",
    "end": "3033865"
  },
  {
    "text": "what we are doing,\nlet me get this right, is using a different set of\noperators.",
    "start": "3033865",
    "end": "3039420"
  },
  {
    "text": "We're using or and and,\na logical or and and instead of min and plus,\nOK, because we want to know,",
    "start": "3039420",
    "end": "3046273"
  },
  {
    "text": "if you think about a\nrelaxation, in some sense, maybe I should think about it\nin terms of this min.",
    "start": "3046273",
    "end": "3053199"
  },
  {
    "text": "So, if I want to know,\nis there a pathway from I to j that uses vertices labeled one\nthrough k in the middle?",
    "start": "3053199",
    "end": "3062000"
  },
  {
    "text": "Well, either there is a path\nthat doesn't use the vertex k, or there is a path that uses k,\nand then it would have to look",
    "start": "3062000",
    "end": "3069720"
  },
  {
    "text": "like that.\nOK, so there would have to be a path here, and there would have\nto be a path there.",
    "start": "3069720",
    "end": "3075623"
  },
  {
    "text": "So, the min and plus get\nreplaced with or and and. And if you remember,\nthis used to be plus,",
    "start": "3075624",
    "end": "3081463"
  },
  {
    "text": "and this used to be product in\nthe matrix world. So, plus is now like or.\nAnd, multiply is now like and,",
    "start": "3081463",
    "end": "3088015"
  },
  {
    "text": "which sounds very good,\nright? Plus does feel like or,\nand multiply does feel like and",
    "start": "3088015",
    "end": "3095994"
  },
  {
    "text": "if you live in a zero-one world.\nSo, in fact, this is not quite the field Z\nmod two, but this is a good,",
    "start": "3095994",
    "end": "3105335"
  },
  {
    "text": "nice, field to work in.\nThis is the Boolean world. So, I'll just write Boole.\nGood old Boole knows all about",
    "start": "3105335",
    "end": "3115046"
  },
  {
    "text": "this.\nIt's like his master's thesis, I think, talking about Boolean\nalgebra.",
    "start": "3115046",
    "end": "3123000"
  },
  {
    "text": "And, this actually means that\nyou can use fast matrix multiply.\nYou can use Strassen's",
    "start": "3123000",
    "end": "3129235"
  },
  {
    "text": "algorithm, and the fancier\nalgorithms, and you can compute the transitive closure in\nsubcubic time.",
    "start": "3129235",
    "end": "3136448"
  },
  {
    "text": "So, this is sub cubic if the\nedges are sparse. But, it's cubic in the worst\ncase if there are lots of edges.",
    "start": "3136448",
    "end": "3144336"
  },
  {
    "text": "This is cubic.\nYou can actually do better using Strassen.\nSo, I'll just say you can do",
    "start": "3144336",
    "end": "3150572"
  },
  {
    "text": "it.\nNo details here. I think it should be,\nso in fact, there is a theorem.",
    "start": "3150572",
    "end": "3157019"
  },
  {
    "text": "This is probably not in the\ntextbook, but there's a theorem that says transitive closure is\njust as hard as matrix multiply.",
    "start": "3157019",
    "end": "3165949"
  },
  {
    "text": "OK, they are equivalent.\nTheir running times are the same.\nWe don't know how long it takes",
    "start": "3165949",
    "end": "3172371"
  },
  {
    "text": "to do a matrix multiply over a\nfield. It's somewhere between n^2 and\nn^2.3.",
    "start": "3172371",
    "end": "3177685"
  },
  {
    "text": "But, whatever the answer is:\nsame for transitive closure.",
    "start": "3177685",
    "end": "3183000"
  },
  {
    "text": "OK, there's the interlude.\nAnd that's where we actually",
    "start": "3183000",
    "end": "3189403"
  },
  {
    "text": "get to use Strassen and friends.\nRemember, Strassen was n to the",
    "start": "3189403",
    "end": "3196873"
  },
  {
    "text": "log base two of seven algorithm.\nRemember that,",
    "start": "3196873",
    "end": "3202328"
  },
  {
    "text": "especially on the final.\nThose are things you should",
    "start": "3202328",
    "end": "3208375"
  },
  {
    "text": "have at the tip of your tongue.\nOK, the last algorithm we're",
    "start": "3208375",
    "end": "3215043"
  },
  {
    "text": "going to cover is really going\nto build on what we saw last time: Johnson's algorithm.\nAnd, I've lost some of the",
    "start": "3215043",
    "end": "3223069"
  },
  {
    "text": "running times here.\nBut, when we had unweighted graphs, we could do all pairs\nreally fast, just as fast as a",
    "start": "3223070",
    "end": "3230732"
  },
  {
    "text": "single source Bellman-Ford.\nThat's kind of nifty. We don't know how to improve\nBellman-Ford in the single",
    "start": "3230732",
    "end": "3238175"
  },
  {
    "text": "source case.\nSo, we can't really help to get anything better than V times E.\nAnd, if you remember running V",
    "start": "3238175",
    "end": "3247472"
  },
  {
    "text": "times Dijkstra,\nV times Dijkstra was about the same.\nSo, just put this in the recall",
    "start": "3247472",
    "end": "3254050"
  },
  {
    "text": "bubble here: V times Dijkstra\nwould give us V times E plus V^2 log V.\nAnd, if you ignore that log",
    "start": "3254050",
    "end": "3261684"
  },
  {
    "text": "factor, this is just VE.\nOK, so this was really good. Dijkstra was great.\nAnd this was for nonnegative",
    "start": "3261685",
    "end": "3269724"
  },
  {
    "text": "edge weights.\nSo, with negative edge weights, somehow we'd like to get the\nsame running time.",
    "start": "3269725",
    "end": "3278094"
  },
  {
    "text": "Now, how might I get the same\nrunning time? Well, it would be really nice\nif I could use Dijkstra.",
    "start": "3278094",
    "end": "3285614"
  },
  {
    "text": "Of course, Dijkstra doesn't\nwork with negative weights. So what could I do?\nWhat would I hope to do?",
    "start": "3285614",
    "end": "3293292"
  },
  {
    "text": "What could I hope to?\nSuppose I want, in the middle of the algorithm,\nit says run Dijkstra n times.",
    "start": "3293292",
    "end": "3302000"
  },
  {
    "text": "Then, what should I do to\nprepare for that? Make all the weights positive,\nor nonnegative.",
    "start": "3302000",
    "end": "3309591"
  },
  {
    "text": "Why not, right?\nWe're being wishful thinking. That's what we'll do.\nSo, this is called graph",
    "start": "3309591",
    "end": "3317358"
  },
  {
    "text": "re-weighting.\nAnd, what's cool is we actually already know how to do it.\nWe just don't know that we know",
    "start": "3317358",
    "end": "3326172"
  },
  {
    "text": "how to do it.\nBut I know that we know that we know how to do it.\nYou don't yet know that we know",
    "start": "3326172",
    "end": "3334286"
  },
  {
    "text": "that I know that we know how to\ndo it. So, it turns out you can\nre-weight the vertices.",
    "start": "3334287",
    "end": "3341643"
  },
  {
    "text": "So, at the end of the last\nclass someone asked me, can you just,\nlike, add the same weight to",
    "start": "3341643",
    "end": "3346703"
  },
  {
    "text": "all the edges?\nThat doesn't work. Not quite, because different\npaths have different numbers of",
    "start": "3346704",
    "end": "3351821"
  },
  {
    "text": "edges.\nWhat we are going to do is add a particular weight to each\nvertex. What does that mean?\nWell, because we really only",
    "start": "3351821",
    "end": "3358457"
  },
  {
    "text": "have weights on the edges,\nhere's what well do. We'll re-weight each edge,\nso, (u,v), let's say,",
    "start": "3358457",
    "end": "3366738"
  },
  {
    "text": "going to go back into graph\nspeak instead of matrix speak,",
    "start": "3366738",
    "end": "3372485"
  },
  {
    "text": "(u,v) instead of I and j,\nand we'll call this modified",
    "start": "3372485",
    "end": "3377828"
  },
  {
    "text": "weight w_h.\nh is our function. It gives us a number for every\nvertex.",
    "start": "3377828",
    "end": "3384482"
  },
  {
    "text": "And, it's just going to be the\nold weight of that edge plus the",
    "start": "3384482",
    "end": "3390732"
  },
  {
    "text": "weight of the start vertex minus\nthe weight of the terminating",
    "start": "3390732",
    "end": "3396881"
  },
  {
    "text": "vertex.\nI'm sure these have good names. One of these is the head,\nand the other is the tail,",
    "start": "3396882",
    "end": "3403838"
  },
  {
    "text": "but I can never remember which.\nOK, so we've directed edge (u,v).\nJust add one of them; subtract the other.\nAnd, it's a directed edge,",
    "start": "3403838",
    "end": "3411450"
  },
  {
    "text": "so that's a consistent\ndefinition. OK, so that's called\nre-weighting. Now, this is actually a\ntheorem.",
    "start": "3411450",
    "end": "3418000"
  },
  {
    "text": "If you do this,\nthen, let's say,",
    "start": "3418000",
    "end": "3423391"
  },
  {
    "text": "for any vertices,\nu and v in the graph,",
    "start": "3423391",
    "end": "3430000"
  },
  {
    "text": "for any two vertices,\nall paths from u to v have the",
    "start": "3430000",
    "end": "3438869"
  },
  {
    "text": "same weight as they did before,\nwell, not quite.",
    "start": "3438869",
    "end": "3447043"
  },
  {
    "text": "They have the same\nre-weighting.",
    "start": "3447043",
    "end": "3454000"
  },
  {
    "text": "So, if you look at all the\ndifferent paths and you say, well, what's the difference\nbetween vh, well,",
    "start": "3454000",
    "end": "3459924"
  },
  {
    "text": "sorry, let's say delta,\nwhich is the old shortest paths, and deltas of h,\nwhich is the shortest path",
    "start": "3459925",
    "end": "3465789"
  },
  {
    "text": "weights according to this new\nweight function, then that difference is the\nsame. So, we'll say that all these\npaths are re-weighted by the",
    "start": "3465790",
    "end": "3473832"
  },
  {
    "text": "same amounts.\nOK, this is actually a statement about all paths,\nnot just shortest paths.",
    "start": "3473832",
    "end": "3480000"
  },
  {
    "text": "There we go.\nOK, to how many people is this",
    "start": "3480000",
    "end": "3485286"
  },
  {
    "text": "obvious already?\nA few, yeah, it is.\nAnd what's the one word?",
    "start": "3485286",
    "end": "3492587"
  },
  {
    "text": "OK, it's maybe not that\nobvious. All right, shout out the word\nwhen you figure it out.",
    "start": "3492587",
    "end": "3503034"
  },
  {
    "text": "Meanwhile, I'll write out this\nrather verbose proof.",
    "start": "3503034",
    "end": "3509453"
  },
  {
    "text": "There's a one word proof,\nstill waiting.",
    "start": "3509454",
    "end": "3516000"
  },
  {
    "text": "So, let's just take one of\nthese paths that starts at u and",
    "start": "3516000",
    "end": "3521601"
  },
  {
    "text": "ends at v.\nTake any path. We're just going to see what\nits new weight is relative to",
    "start": "3521601",
    "end": "3529422"
  },
  {
    "text": "its old weight.\nAnd so, let's just write out w_h of the path,\nwhich we define in the usual",
    "start": "3529423",
    "end": "3537825"
  },
  {
    "text": "way as the sum over all edges of\nthe new weight of the edge from",
    "start": "3537825",
    "end": "3543909"
  },
  {
    "text": "v_i to v_i plus one.\nDo you have the word?",
    "start": "3543909",
    "end": "3549229"
  },
  {
    "text": "No?\nTough puzzle then, OK.\nSo that's the definition of the",
    "start": "3549229",
    "end": "3555068"
  },
  {
    "text": "weight of a path.\nAnd, then we know this thing is",
    "start": "3555068",
    "end": "3560164"
  },
  {
    "text": "just w of v_i,\nv_i plus one. I'll get it right,\nplus the weight of the first",
    "start": "3560164",
    "end": "3567914"
  },
  {
    "text": "vertex, plus,\nsorry, the re-weighting of v_i minus the re-weighting of v_i\nplus one.",
    "start": "3567914",
    "end": "3578000"
  },
  {
    "text": "This is all in parentheses\nthat's summed over I. Now I need the magic word.\nTelescopes, good.",
    "start": "3578000",
    "end": "3586637"
  },
  {
    "text": "Now this is obvious:\neach of these telescopes with an extra previous,\nexcept the very beginning and",
    "start": "3586637",
    "end": "3595851"
  },
  {
    "text": "the very end.\nSo, this is the sum of these weights of edges,\nbut then outside the sum,",
    "start": "3595851",
    "end": "3603817"
  },
  {
    "text": "we have plus h of v_1,\nand minus h of v_k.",
    "start": "3603817",
    "end": "3609000"
  },
  {
    "text": "OK, those guys don't quite\ncancel. We're not looking at a cycle,\njust a path.",
    "start": "3609000",
    "end": "3615577"
  },
  {
    "text": "And, this thing is just w of\nthe path, as this is the normal",
    "start": "3615577",
    "end": "3620822"
  },
  {
    "text": "weight of the path.\nAnd so the change, the difference between w_h of P\nand w of P is this thing,",
    "start": "3620822",
    "end": "3629088"
  },
  {
    "text": "which is just h of u minus h of\nv. And, the point is that's the\nsame as long as you fix the",
    "start": "3629088",
    "end": "3636744"
  },
  {
    "text": "endpoints, u and v,\nof the shortest path, you're changing this path\nweight by the same thing for all",
    "start": "3636744",
    "end": "3643348"
  },
  {
    "text": "paths.\nThis is for any path from u to v, and that proves the theorem.\nSo, the one word here was",
    "start": "3643348",
    "end": "3649612"
  },
  {
    "text": "telescopes.\nThese change in weights telescope over any path.\nTherefore, if we want to find",
    "start": "3649612",
    "end": "3655536"
  },
  {
    "text": "shortest paths,\nyou just find the shortest paths in this re-weighted\nversion, and then you just",
    "start": "3655536",
    "end": "3661799"
  },
  {
    "text": "change it by this one amount.\nYou subtract off this amount",
    "start": "3661800",
    "end": "3666848"
  },
  {
    "text": "instead of adding it.\nThat will give you the shortest path weight in the original\nweights.",
    "start": "3666848",
    "end": "3672591"
  },
  {
    "text": "OK, so this is a tool.\nWe now know how to change weights in the graph.\nBut what we really want is to",
    "start": "3672591",
    "end": "3678995"
  },
  {
    "text": "change weights in the graph so\nthat the weights all come out nonnegative.\nOK, how do we do that?",
    "start": "3678995",
    "end": "3685134"
  },
  {
    "text": "Why in the world would there be\na function, h, that makes all the edge weights\nnonnegative?",
    "start": "3685134",
    "end": "3692000"
  },
  {
    "text": "It doesn't make sense.\nIt turns out we already know.",
    "start": "3692000",
    "end": "3702851"
  },
  {
    "text": "So, I should write down this\nconsequence.",
    "start": "3702851",
    "end": "3712000"
  },
  {
    "text": "Let me get this in the right\norder. So in particular,\nthe shortest path changes by",
    "start": "3732000",
    "end": "3737096"
  },
  {
    "text": "this amount.\nAnd if you want to know this value, you just move the stuff\nto the other side.",
    "start": "3737096",
    "end": "3742774"
  },
  {
    "text": "So, we compute deltas of h,\nthen we can compute delta. That's the consequence here.\nHow many people here pronounce",
    "start": "3742774",
    "end": "3749935"
  },
  {
    "text": "this word corollary?\nOK, and how many people pronounce it corollary?\nYeah, we are alone.",
    "start": "3749935",
    "end": "3757599"
  },
  {
    "text": "Usually get at least one other\nstudent, and they're usually Canadian or British or\nsomething.",
    "start": "3757599",
    "end": "3765353"
  },
  {
    "text": "I think that the accent.\nSo, I always avoid pronouncing his word unless I really think,\nit's corollary,",
    "start": "3765353",
    "end": "3773969"
  },
  {
    "text": "and get it right.\nI at least say Z not Zed. OK, here we go.\nSo, what we want to do is find",
    "start": "3773969",
    "end": "3783428"
  },
  {
    "text": "one of these functions.\nI mean, let's just write down",
    "start": "3783428",
    "end": "3789371"
  },
  {
    "text": "what we could hope to have.\nWe want to find a re-weighted",
    "start": "3789371",
    "end": "3795771"
  },
  {
    "text": "function, h, the signs of weight\nto each vertex such that w_h of",
    "start": "3795771",
    "end": "3802971"
  },
  {
    "text": "(u,v) is nonnegative.\nThat would be great for all",
    "start": "3802971",
    "end": "3808457"
  },
  {
    "text": "edges, all (u,v) in E.\nOK, then we could run Dijkstra.",
    "start": "3808457",
    "end": "3814735"
  },
  {
    "text": "We could run Dijkstra,\nget the delta h's, and then just undo the\nre-weighting,",
    "start": "3814735",
    "end": "3821351"
  },
  {
    "text": "and get what we want.\nAnd, that is Johnson's algorithm.\nThe claim is that this is",
    "start": "3821352",
    "end": "3828234"
  },
  {
    "text": "always possible.\nOK, why should it always be possible?\nWell, let's look at this",
    "start": "3828235",
    "end": "3834941"
  },
  {
    "text": "constraint.\nw_h of (u,v) is that. So, it's w of (u,v) plus h of u\nminus h of V should be",
    "start": "3834941",
    "end": "3842441"
  },
  {
    "text": "nonnegative.\nLet me rewrite this a little",
    "start": "3842441",
    "end": "3849691"
  },
  {
    "text": "bit.\nI'm going to put these guys",
    "start": "3849691",
    "end": "3854886"
  },
  {
    "text": "over here.\nThat would be the right thing,",
    "start": "3854886",
    "end": "3861588"
  },
  {
    "text": "h of v minus h of u is less\nthan or equal to w of (u,v).",
    "start": "3861589",
    "end": "3870805"
  },
  {
    "text": "Does that look familiar?\nDid I get it right?",
    "start": "3870805",
    "end": "3879067"
  },
  {
    "text": "It should be right.\nAnyone seen that inequality",
    "start": "3879068",
    "end": "3886496"
  },
  {
    "text": "before?\nYeah, yes, correct answer.",
    "start": "3886496",
    "end": "3891826"
  },
  {
    "text": "OK, where?\nIn a previous lecture?",
    "start": "3891826",
    "end": "3896993"
  },
  {
    "text": "In the previous lecture.\nWhat is this called if I",
    "start": "3896993",
    "end": "3906000"
  },
  {
    "text": "replace h with x?\nCharles knows.",
    "start": "3906000",
    "end": "3911166"
  },
  {
    "text": "Good, anyone else remember all\nthe way back to episode two?",
    "start": "3911166",
    "end": "3920833"
  },
  {
    "text": "I know there was a weekend.\nWhat's this operator called?",
    "start": "3920833",
    "end": "3931000"
  },
  {
    "text": "Not subtraction but,\nI think I heard it, oh man.\nAll right, I'll tell you.",
    "start": "3931000",
    "end": "3936568"
  },
  {
    "text": "It's a difference constraint,\nall right? This is the difference\noperator.",
    "start": "3936568",
    "end": "3942057"
  },
  {
    "text": "OK, it's our good friend\ndifference constraints. So, this is what we want to\nsatisfy.",
    "start": "3942058",
    "end": "3948490"
  },
  {
    "text": "We have a system of difference\nconstraints. h of V minus h of u should be,\nwe want to find these.",
    "start": "3948490",
    "end": "3955861"
  },
  {
    "text": "These are our unknowns.\nSubject to these constraints, we are given the w's.\nNow, we know in these",
    "start": "3955862",
    "end": "3965845"
  },
  {
    "text": "difference constraints are\nsatisfiable.",
    "start": "3965845",
    "end": "3970994"
  },
  {
    "text": "Can someone tell me when these\nconstraints are satisfiable?",
    "start": "3970995",
    "end": "3978855"
  },
  {
    "text": "We know exactly when for any\nset of difference constraints.",
    "start": "3978855",
    "end": "3986713"
  },
  {
    "text": "You've got to remember the\nmath.",
    "start": "3986714",
    "end": "3992000"
  },
  {
    "text": "Terminology,\nI can understand.",
    "start": "3992000",
    "end": "3997649"
  },
  {
    "text": "It's hard to remember words\nunless you're a linguist,",
    "start": "3997649",
    "end": "4007778"
  },
  {
    "text": "perhaps.\nSo, when is the system of",
    "start": "4007779",
    "end": "4014207"
  },
  {
    "text": "different constraints\nsatisfiable?",
    "start": "4014207",
    "end": "4022000"
  },
  {
    "text": "All right, you should\ndefinitely, very good.",
    "start": "4022000",
    "end": "4028341"
  },
  {
    "text": "[LAUGHTER] Yes,\nvery good. Someone brought their lecture\nnotes: when the constraint graph",
    "start": "4028341",
    "end": "4041023"
  },
  {
    "text": "has no negative weight cycles.\nGood, thank you.",
    "start": "4041023",
    "end": "4047806"
  },
  {
    "text": "Now, what is the constraint\ngraph?",
    "start": "4047806",
    "end": "4054000"
  },
  {
    "text": "OK, this has a one letter\nanswer more or less. I'll accept the one letter\nanswer.",
    "start": "4054000",
    "end": "4060458"
  },
  {
    "text": "What?\nA? A: close.\nG. Yeah, I mean,\nsame thing. Yeah, so the constraint graph\nis essentially G.",
    "start": "4060458",
    "end": "4067745"
  },
  {
    "text": "Actually, it is G.\nThe constraint graph is G, good.\nAnd, we prove this by adding a",
    "start": "4067745",
    "end": "4074286"
  },
  {
    "text": "new source for text,\nand connecting that to everyone.\nBut that's sort of beside the",
    "start": "4074286",
    "end": "4081765"
  },
  {
    "text": "point.\nThat was in order to actually satisfy them.\nBut this is our characterization.\nSo, if we assume that there are",
    "start": "4081766",
    "end": "4088527"
  },
  {
    "text": "no negative weight cycles in our\ngraph, which we've been doing all the time,\nthen we know that this thing is",
    "start": "4088527",
    "end": "4094922"
  },
  {
    "text": "satisfiable.\nTherefore, there is an assignment of this h's.\nThere is a re-weighting that",
    "start": "4094923",
    "end": "4100101"
  },
  {
    "text": "makes all the weights\nnonnegative. Then we can run Dijkstra.\nOK, we're done. Isn't that cool?\nAnd how do we satisfy these",
    "start": "4100101",
    "end": "4107167"
  },
  {
    "text": "constraints?\nWe know how to do that with one run of Bellman-Ford,\nwhich costs order VE,",
    "start": "4107167",
    "end": "4112284"
  },
  {
    "text": "which is less than V times\nDijkstra. So, that's it,\nwrite down the details",
    "start": "4112284",
    "end": "4119750"
  },
  {
    "text": "somewhere.",
    "start": "4119750",
    "end": "4121000"
  },
  {
    "text": "So, this is Johnson's\nalgorithm. This is the fanciest of them\nall.",
    "start": "4140000",
    "end": "4147930"
  },
  {
    "text": "It will be our fastest,\nall pairs shortest path",
    "start": "4147931",
    "end": "4153723"
  },
  {
    "text": "algorithm.\nSo, the claim is, we can find a function,\nh, from V to R such that the",
    "start": "4153723",
    "end": "4163543"
  },
  {
    "text": "modified weight of every edge is\nnonnegative for every edge,",
    "start": "4163543",
    "end": "4170971"
  },
  {
    "text": "(u,v), in our graph.\nAnd, we do that using",
    "start": "4170971",
    "end": "4177366"
  },
  {
    "text": "Bellman-Ford to solve the\ndifference constraints.",
    "start": "4177366",
    "end": "4183000"
  },
  {
    "text": "These are exactly the different\nconstraints that we were born to solve that we learned to solve\nlast time.",
    "start": "4197000",
    "end": "4203663"
  },
  {
    "text": "The graphs here are\ncorresponding exactly if you look back at the definition.\nOr, Bellman-Ford will tell us",
    "start": "4203663",
    "end": "4210391"
  },
  {
    "text": "that there is a negative weight\ncycle. OK, great, so it's not that we\nreally have to assume that there",
    "start": "4210391",
    "end": "4216796"
  },
  {
    "text": "is no negative weight cycle.\nWe'll get to know. And if your fancy,\nyou can actually figure out the",
    "start": "4216796",
    "end": "4222942"
  },
  {
    "text": "minus infinities from this.\nBut, at this point, I just want to think about the\ncase where there is no negative",
    "start": "4222942",
    "end": "4229864"
  },
  {
    "text": "weight cycle.\nBut if there is, we can find out that it exists,\nand that just tell the user.",
    "start": "4229865",
    "end": "4239953"
  },
  {
    "text": "OK, then we'd stop.\nOtherwise, there is no negative",
    "start": "4239954",
    "end": "4245257"
  },
  {
    "text": "weight cycle.\nTherefore, there is an assignment that gives is\nnonnegative edge weights.",
    "start": "4245257",
    "end": "4254166"
  },
  {
    "text": "So, we just use it.\nWe use it to run Dijkstra.",
    "start": "4254166",
    "end": "4260000"
  },
  {
    "text": "So, step two is,\noh, I should say the running time of all this is V times E.\nSo, we're just running",
    "start": "4260000",
    "end": "4265987"
  },
  {
    "text": "Bellman-Ford on exactly the\ninput graph. Plus, we add a source,\nif you recall, to solve a set of difference\nconstraints.",
    "start": "4265987",
    "end": "4273160"
  },
  {
    "text": "You add a source vertex,\nS, connected to everyone at weight zero, run Bellman-Ford\nfrom there because we don't have",
    "start": "4273160",
    "end": "4280145"
  },
  {
    "text": "a source here.\nWe just have a graph. We want to know all pairs.\nSo, this, you can use to find",
    "start": "4280145",
    "end": "4285758"
  },
  {
    "text": "whether there is a negative\nweight cycle anywhere. Or, we get this magic\nassignment.",
    "start": "4285758",
    "end": "4293428"
  },
  {
    "text": "So now, w_h is nonnegative,\nso we can run Dijkstra on w_h.",
    "start": "4293428",
    "end": "4299535"
  },
  {
    "text": "We'll say, using w_h,\nso you compute w_h. That takes linear time.\nAnd, we run Dijkstra for each",
    "start": "4299535",
    "end": "4309391"
  },
  {
    "text": "possible source.\nI'll write this out explicitly.",
    "start": "4309392",
    "end": "4314428"
  },
  {
    "text": "We've had this in our minds\nseveral times.",
    "start": "4314428",
    "end": "4320000"
  },
  {
    "text": "But, when we said n times\nDijkstra over n times BFS,",
    "start": "4320000",
    "end": "4325368"
  },
  {
    "text": "here it is.\nWe want to compute delta sub h now, of (u,v) for all V,\nand we do this separately for",
    "start": "4325368",
    "end": "4335263"
  },
  {
    "text": "all u.\nAnd so, the running time here is VE plus V^2 log V.\nThis is just V times the",
    "start": "4335263",
    "end": "4343683"
  },
  {
    "text": "running time of Dijkstra,\nwhich is E plus V log V.",
    "start": "4343684",
    "end": "4350000"
  },
  {
    "text": "OK, it happens that this term\nis the same as this one,",
    "start": "4350000",
    "end": "4355084"
  },
  {
    "text": "which is nice,\nbecause that means step one costs us nothing asymptotically.\nOK, and then,",
    "start": "4355084",
    "end": "4363334"
  },
  {
    "text": "last step is,\nwell, now we know delta h. We just need to compute delta.\nSo, for each pair of vertices,",
    "start": "4363334",
    "end": "4372831"
  },
  {
    "text": "we'll call it (u,v),\nwe just compute what the original weights would be,\nso what delta (u,v) is.",
    "start": "4372831",
    "end": "4383000"
  },
  {
    "text": "And we can do that using this\ncorollary. It's just delta sub h of (u,v)\nminus h of u plus h of v.",
    "start": "4383000",
    "end": "4393777"
  },
  {
    "text": "I got the signs right.\nYeah, so this takes V^2 time,",
    "start": "4393777",
    "end": "4399624"
  },
  {
    "text": "also dwarfed by the running\ntime of Dijkstra.",
    "start": "4399624",
    "end": "4404668"
  },
  {
    "text": "So, the overall running time of\nJohnson's algorithm is just the",
    "start": "4404668",
    "end": "4411777"
  },
  {
    "text": "running time of step two,\nrunning Dijkstra n times --",
    "start": "4411777",
    "end": "4419000"
  },
  {
    "text": "-- which is pretty cool.\nWhen it comes to single source shortest paths,\nBellman-Ford is the best thing",
    "start": "4431000",
    "end": "4438243"
  },
  {
    "text": "for general weights.\nDijkstra is the best thing for nonnegative weights.\nBut for all pair shortest",
    "start": "4438243",
    "end": "4444976"
  },
  {
    "text": "paths, we can skirt the whole\nnegative weight issue by using this magic we saw from\nBellman-Ford.",
    "start": "4444976",
    "end": "4451213"
  },
  {
    "text": "But now, running Dijkstra n\ntimes, which is still the best thing we know how to do,\npretty much,",
    "start": "4451213",
    "end": "4457383"
  },
  {
    "text": "for the all pairs nonnegative\nweights, now we can do it for general weights too,\nwhich is a pretty nice",
    "start": "4457383",
    "end": "4464018"
  },
  {
    "text": "combination of all the\ntechniques we've seen. In the trilogy,\nand along the way,",
    "start": "4464018",
    "end": "4470217"
  },
  {
    "text": "we saw lots of dynamic\nprogramming, which is always good practice.\nAny questions?",
    "start": "4470217",
    "end": "4475459"
  },
  {
    "text": "This is the last new content\nlecture before the quiz. On Wednesday it will be quiz\nreview, if I recall correctly.",
    "start": "4475459",
    "end": "4482852"
  },
  {
    "text": "And then it's Thanksgiving,\nso there's no recitation. And then the quiz starts on\nMonday.",
    "start": "4482852",
    "end": "4488632"
  },
  {
    "text": "So, study up.\nSee you then.",
    "start": "4488632",
    "end": "4490364"
  }
]