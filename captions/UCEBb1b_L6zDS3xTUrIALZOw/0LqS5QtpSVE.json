[
  {
    "start": "0",
    "end": "500"
  },
  {
    "text": "Now let’s turn our attention\nto control hazards,",
    "start": "500",
    "end": "3330"
  },
  {
    "text": "illustrated by the code\nfragment shown here.",
    "start": "3330",
    "end": "6675"
  },
  {
    "text": "Which instruction should\nbe executed after the BNE?",
    "start": "6675",
    "end": "8800"
  },
  {
    "text": "If the value in R3 is non-zero,\nADDC should be executed.",
    "start": "8800",
    "end": "14520"
  },
  {
    "text": "If the value in R3 is zero, the\nnext instruction should be SUB.",
    "start": "14520",
    "end": "19780"
  },
  {
    "text": "If the current instruction is\nan explicit transfer of control",
    "start": "19780",
    "end": "23090"
  },
  {
    "text": "(i.e., JMPs or branches), the\nchoice of the next instruction",
    "start": "23090",
    "end": "27260"
  },
  {
    "text": "depends on the execution\nof the current instruction.",
    "start": "27260",
    "end": "30900"
  },
  {
    "text": "What are the implications\nof this dependency",
    "start": "30900",
    "end": "33150"
  },
  {
    "text": "on our execution pipeline?",
    "start": "33150",
    "end": "36680"
  },
  {
    "text": "How does the unpipelined\nimplementation",
    "start": "36680",
    "end": "38840"
  },
  {
    "text": "determine the next instruction?",
    "start": "38840",
    "end": "41190"
  },
  {
    "text": "For branches (BEQ\nor BNE), the value",
    "start": "41190",
    "end": "44309"
  },
  {
    "text": "to be loaded into the\nprogram counter depends on",
    "start": "44310",
    "end": "47760"
  },
  {
    "text": "(1) the opcode, i.e.,\nwhether the instruction",
    "start": "47760",
    "end": "50739"
  },
  {
    "text": "is a BEQ or a BNE,",
    "start": "50740",
    "end": "51920"
  },
  {
    "text": "(2) the current value of the\nprogram counter since that’s",
    "start": "51920",
    "end": "56989"
  },
  {
    "text": "used in the offset\ncalculation, and",
    "start": "56990",
    "end": "59330"
  },
  {
    "text": "(3) the value stored in the\nregister specified by the RA",
    "start": "59330",
    "end": "62860"
  },
  {
    "text": "field of the instruction\nsince that’s the value tested",
    "start": "62860",
    "end": "65810"
  },
  {
    "text": "by the branch.",
    "start": "65810",
    "end": "67990"
  },
  {
    "text": "For JMP instructions, the next\nvalue of the program counter",
    "start": "67990",
    "end": "71180"
  },
  {
    "text": "depends once again on the opcode\nfield and the value of the RA",
    "start": "71180",
    "end": "75140"
  },
  {
    "text": "register.",
    "start": "75140",
    "end": "77030"
  },
  {
    "text": "For all other instructions,\nthe next PC value depends only",
    "start": "77030",
    "end": "80340"
  },
  {
    "text": "the opcode of the instruction\nand the value PC+4.",
    "start": "80340",
    "end": "85539"
  },
  {
    "text": "Exceptions also change\nthe program counter.",
    "start": "85540",
    "end": "88560"
  },
  {
    "text": "We’ll deal with them\nlater in the lecture.",
    "start": "88560",
    "end": "92009"
  },
  {
    "text": "The control hazard is\ntriggered by JMP and branches",
    "start": "92010",
    "end": "94870"
  },
  {
    "text": "since their execution depends\non the value in the RA register,",
    "start": "94870",
    "end": "98610"
  },
  {
    "text": "i.e., they need to read from\nthe register file, which happens",
    "start": "98610",
    "end": "102330"
  },
  {
    "text": "in the RF pipeline stage.",
    "start": "102330",
    "end": "104320"
  },
  {
    "text": "Our bypass mechanisms ensure\nthat we’ll use the correct",
    "start": "104320",
    "end": "107090"
  },
  {
    "text": "value for the RA register\neven if it’s not yet written",
    "start": "107090",
    "end": "110539"
  },
  {
    "text": "into the register file.",
    "start": "110540",
    "end": "112580"
  },
  {
    "text": "What we’re concerned about\nhere is that the address",
    "start": "112580",
    "end": "115690"
  },
  {
    "text": "of the instruction following\nthe JMP or branch will be loaded",
    "start": "115690",
    "end": "118380"
  },
  {
    "text": "into program counter at the\nend of the cycle when the JMP",
    "start": "118380",
    "end": "121890"
  },
  {
    "text": "or branch is in the RF stage.",
    "start": "121890",
    "end": "125070"
  },
  {
    "text": "But what should the IF stage\nbe doing while all this is",
    "start": "125070",
    "end": "128130"
  },
  {
    "text": "going on in RF stage?",
    "start": "128130",
    "end": "131290"
  },
  {
    "text": "The answer is that in the case\nof JMPs and taken branches,",
    "start": "131290",
    "end": "134769"
  },
  {
    "text": "we don’t know what the IF stage\nshould be doing until those",
    "start": "134770",
    "end": "137810"
  },
  {
    "text": "instructions are able to access\nthe value of the RA register",
    "start": "137810",
    "end": "141690"
  },
  {
    "text": "in the RF stage.",
    "start": "141690",
    "end": "143890"
  },
  {
    "text": "One solution is to stall the\nIF stage until the RF stage can",
    "start": "143890",
    "end": "147310"
  },
  {
    "text": "compute the necessary result.",
    "start": "147310",
    "end": "150200"
  },
  {
    "text": "This was the first of\nour general strategies",
    "start": "150200",
    "end": "152410"
  },
  {
    "text": "for dealing with hazards.",
    "start": "152410",
    "end": "154280"
  },
  {
    "text": "How would this work?",
    "start": "154280",
    "end": "156610"
  },
  {
    "text": "If the opcode in the RF\nstage is JMP, BEQ, or BNE,",
    "start": "156610",
    "end": "160510"
  },
  {
    "text": "stall the IF stage\nfor one cycle.",
    "start": "160510",
    "end": "163790"
  },
  {
    "text": "In the example code shown here,\nassume that the value in R3",
    "start": "163790",
    "end": "167459"
  },
  {
    "text": "is non-zero when the\nBNE is executed, i.e.,",
    "start": "167460",
    "end": "170630"
  },
  {
    "text": "that the instruction\nfollowing BNE",
    "start": "170630",
    "end": "173290"
  },
  {
    "text": "should be the ADDC at\nthe top of the loop.",
    "start": "173290",
    "end": "177379"
  },
  {
    "text": "The pipeline diagram shows the\neffect we’re trying to achieve:",
    "start": "177380",
    "end": "180750"
  },
  {
    "text": "a NOP is inserted into the\npipeline in cycles 4 and 8.",
    "start": "180750",
    "end": "185790"
  },
  {
    "text": "Then execution resumes\nin the next cycle",
    "start": "185790",
    "end": "188310"
  },
  {
    "text": "after the RF stage determines\nwhat instruction comes next.",
    "start": "188310",
    "end": "192430"
  },
  {
    "text": "Note, by the way, that we’re\nrelying on our bypass logic",
    "start": "192430",
    "end": "195140"
  },
  {
    "text": "to deliver the correct value\nfor R3 from the MEM stage since",
    "start": "195140",
    "end": "199310"
  },
  {
    "text": "the ADDC instruction that\nwrote into R3 is still",
    "start": "199310",
    "end": "202480"
  },
  {
    "text": "in the pipeline, i.e., we have\na data hazard to deal with too!",
    "start": "202480",
    "end": "208170"
  },
  {
    "text": "Looking at, say, the WB stage\nin the pipeline diagram,",
    "start": "208170",
    "end": "211930"
  },
  {
    "text": "we see it takes 4 cycles\nto execute one iteration",
    "start": "211930",
    "end": "215560"
  },
  {
    "text": "of our 3-instruction loop.",
    "start": "215560",
    "end": "218060"
  },
  {
    "text": "So the effective CPI is\n4/3, an increase of 33%.",
    "start": "218060",
    "end": "224450"
  },
  {
    "text": "Using stall to deal\nwith control hazards",
    "start": "224450",
    "end": "226700"
  },
  {
    "text": "has had an impact on the\ninstruction throughput",
    "start": "226700",
    "end": "229520"
  },
  {
    "text": "of our execution pipeline.",
    "start": "229520",
    "end": "230820"
  },
  {
    "start": "230820",
    "end": "233350"
  },
  {
    "text": "We’ve already seen the logic\nneeded to introduce NOPs",
    "start": "233350",
    "end": "236380"
  },
  {
    "text": "into the pipeline.",
    "start": "236380",
    "end": "237900"
  },
  {
    "text": "In this case, we add a mux\nto the instruction path",
    "start": "237900",
    "end": "240430"
  },
  {
    "text": "in the IF stage, controlled\nby the IRSrc_IF signal.",
    "start": "240430",
    "end": "245379"
  },
  {
    "text": "We use the superscript\non the control",
    "start": "245380",
    "end": "247150"
  },
  {
    "text": "signals to indicate which\npipeline stage holds",
    "start": "247150",
    "end": "249709"
  },
  {
    "text": "the logic they control.",
    "start": "249710",
    "end": "250850"
  },
  {
    "start": "250850",
    "end": "253390"
  },
  {
    "text": "If the opcode in the RF\nstage is JMP, BEQ, or BNE",
    "start": "253390",
    "end": "256769"
  },
  {
    "text": "we set IRSrc_IF\nto 1, which causes",
    "start": "256769",
    "end": "260870"
  },
  {
    "text": "a NOP to replace the\ninstruction that was",
    "start": "260870",
    "end": "263110"
  },
  {
    "text": "being read from main memory.",
    "start": "263110",
    "end": "265330"
  },
  {
    "text": "And, of course, we’ll be setting\nthe PCSEL control signals",
    "start": "265330",
    "end": "268009"
  },
  {
    "text": "to select the correct\nnext PC value,",
    "start": "268010",
    "end": "270180"
  },
  {
    "text": "so the IF stage will fetch the\ndesired follow-on instruction",
    "start": "270180",
    "end": "274030"
  },
  {
    "text": "in the next cycle.",
    "start": "274030",
    "end": "276400"
  },
  {
    "text": "If we replace an\ninstruction with NOP,",
    "start": "276400",
    "end": "279070"
  },
  {
    "text": "we say we “annulled”\nthe instruction.",
    "start": "279070",
    "end": "282880"
  },
  {
    "text": "The branch instructions\nin the Beta ISA",
    "start": "282880",
    "end": "285100"
  },
  {
    "text": "make their branch\ndecision in the RF stage",
    "start": "285100",
    "end": "287480"
  },
  {
    "text": "since they only need the\nvalue in register RA.",
    "start": "287480",
    "end": "291180"
  },
  {
    "text": "But suppose the ISA had a branch\nwhere the branch decision was",
    "start": "291180",
    "end": "294360"
  },
  {
    "text": "made in ALU stage.",
    "start": "294360",
    "end": "297479"
  },
  {
    "text": "When the branch decision\nis made in the ALU stage,",
    "start": "297480",
    "end": "299890"
  },
  {
    "text": "we need to introduce two\nNOPs into the pipeline,",
    "start": "299890",
    "end": "302570"
  },
  {
    "text": "replacing the now unwanted\ninstructions in the RF and IF",
    "start": "302570",
    "end": "306250"
  },
  {
    "text": "stages.",
    "start": "306250",
    "end": "307930"
  },
  {
    "text": "This would increase the\neffective CPI even further.",
    "start": "307930",
    "end": "312610"
  },
  {
    "text": "But the tradeoff is that\nthe more complex branches",
    "start": "312610",
    "end": "315860"
  },
  {
    "text": "may reduce the number of\ninstructions in the program.",
    "start": "315860",
    "end": "320000"
  },
  {
    "text": "If we annul instructions in all\nthe earlier pipeline stages,",
    "start": "320000",
    "end": "322970"
  },
  {
    "text": "this is called\n“flushing the pipeline”.",
    "start": "322970",
    "end": "325650"
  },
  {
    "text": "Since flushing the pipeline has\na big impact on the effective",
    "start": "325650",
    "end": "328440"
  },
  {
    "text": "CPI, we do it when it’s the\nonly way to ensure the correct",
    "start": "328440",
    "end": "333320"
  },
  {
    "text": "behavior of the\nexecution pipeline.",
    "start": "333320",
    "end": "337850"
  },
  {
    "text": "We can be smarter\nabout when we choose",
    "start": "337850",
    "end": "340140"
  },
  {
    "text": "to flush the pipeline\nwhen executing branches.",
    "start": "340140",
    "end": "342880"
  },
  {
    "text": "If the branch is not\ntaken, it turns out",
    "start": "342880",
    "end": "345430"
  },
  {
    "text": "that the pipeline has\nbeen doing the right thing",
    "start": "345430",
    "end": "347550"
  },
  {
    "text": "by fetching the instruction\nfollowing the branch.",
    "start": "347550",
    "end": "351020"
  },
  {
    "text": "Starting execution of an\ninstruction even when we’re",
    "start": "351020",
    "end": "354110"
  },
  {
    "text": "unsure whether we really\nwant it executed is called",
    "start": "354110",
    "end": "357030"
  },
  {
    "text": "“speculation”.",
    "start": "357030",
    "end": "359310"
  },
  {
    "text": "Speculative execution is\nokay if we’re able to annul",
    "start": "359310",
    "end": "361960"
  },
  {
    "text": "the instruction before it has an\neffect on the CPU state, e.g.,",
    "start": "361960",
    "end": "365729"
  },
  {
    "text": "by writing into the register\nfile or main memory.",
    "start": "365730",
    "end": "368830"
  },
  {
    "text": "Since these state changes\n(called “side effects”) happen",
    "start": "368830",
    "end": "372009"
  },
  {
    "text": "in the later pipeline stages,\nan instruction can progress",
    "start": "372010",
    "end": "375610"
  },
  {
    "text": "through the IF, RF, and ALU\nstages before we have to make",
    "start": "375610",
    "end": "379469"
  },
  {
    "text": "a final decision about\nwhether it should be annulled.",
    "start": "379470",
    "end": "383490"
  },
  {
    "text": "How does speculation help\nwith control hazards?",
    "start": "383490",
    "end": "386349"
  },
  {
    "text": "Guessing that the next value of\nthe program counter is PC+4 is",
    "start": "386350",
    "end": "390290"
  },
  {
    "text": "correct for all but\nJMPs and taken branches.",
    "start": "390290",
    "end": "394260"
  },
  {
    "text": "Here’s our example again, but\nthis time let’s assume that",
    "start": "394260",
    "end": "397120"
  },
  {
    "text": "the BNE is not taken, i.e.,\nthat the value in R3 is zero.",
    "start": "397120",
    "end": "402660"
  },
  {
    "text": "The SUB instruction\nenters the pipeline",
    "start": "402660",
    "end": "404590"
  },
  {
    "text": "at the start of cycle 4.",
    "start": "404590",
    "end": "406560"
  },
  {
    "text": "At the end of cycle 4,\nwe know whether or not",
    "start": "406560",
    "end": "409040"
  },
  {
    "text": "to annul the SUB.",
    "start": "409040",
    "end": "410990"
  },
  {
    "text": "If the branch is\nnot taken, we want",
    "start": "410990",
    "end": "413660"
  },
  {
    "text": "to execute the SUB\ninstruction, so we just",
    "start": "413660",
    "end": "415870"
  },
  {
    "text": "let it continue\ndown the pipeline.",
    "start": "415870",
    "end": "418510"
  },
  {
    "text": "In other words, instead\nof always annulling",
    "start": "418510",
    "end": "420730"
  },
  {
    "text": "the instruction\nfollowing branch,",
    "start": "420730",
    "end": "422600"
  },
  {
    "text": "we only annul it if\nthe branch was taken.",
    "start": "422600",
    "end": "425980"
  },
  {
    "text": "If the branch is not\ntaken, the pipeline",
    "start": "425980",
    "end": "427950"
  },
  {
    "text": "has speculated correctly\nand no instructions",
    "start": "427950",
    "end": "430710"
  },
  {
    "text": "need to be annulled.",
    "start": "430710",
    "end": "433020"
  },
  {
    "text": "However if the BNE\nis taken, the SUB",
    "start": "433020",
    "end": "435740"
  },
  {
    "text": "is annulled at\nthe end of cycle 4",
    "start": "435740",
    "end": "437979"
  },
  {
    "text": "and a NOP is\nexecuted in cycle 5.",
    "start": "437980",
    "end": "440230"
  },
  {
    "text": "So we only introduce a bubble\nin the pipeline when there’s",
    "start": "440230",
    "end": "444160"
  },
  {
    "text": "a taken branch.",
    "start": "444160",
    "end": "445780"
  },
  {
    "text": "Fewer bubbles will decrease\nthe impact of annulment",
    "start": "445780",
    "end": "448560"
  },
  {
    "text": "on the effective CPI.",
    "start": "448560",
    "end": "451620"
  },
  {
    "text": "We’ll be using the same data\npath circuitry as before,",
    "start": "451620",
    "end": "454419"
  },
  {
    "text": "we’ll just be a bit more\nclever about when the value",
    "start": "454420",
    "end": "457150"
  },
  {
    "text": "of the IRSrc_IF control\nsignal is set to 1.",
    "start": "457150",
    "end": "461560"
  },
  {
    "text": "Instead of setting it\nto 1 for all branches,",
    "start": "461560",
    "end": "464050"
  },
  {
    "text": "we only set it to 1 when\nthe branch is taken.",
    "start": "464050",
    "end": "469000"
  },
  {
    "text": "Our naive strategy of always\nspeculating that the next",
    "start": "469000",
    "end": "471580"
  },
  {
    "text": "instruction comes from PC+4\nis wrong for JMPs and taken",
    "start": "471580",
    "end": "475210"
  },
  {
    "text": "branches.",
    "start": "475210",
    "end": "476840"
  },
  {
    "text": "Looking at simulated\nexecution traces,",
    "start": "476840",
    "end": "479580"
  },
  {
    "text": "we’ll see that this error in\nspeculation leads to about 10%",
    "start": "479580",
    "end": "483159"
  },
  {
    "text": "higher effective CPI.",
    "start": "483160",
    "end": "485940"
  },
  {
    "text": "Can we do better?",
    "start": "485940",
    "end": "488110"
  },
  {
    "text": "This is an important question\nfor CPUs with deep pipelines.",
    "start": "488110",
    "end": "491889"
  },
  {
    "text": "For example, Intel’s Nehalem\nprocessor from 2009 resolves",
    "start": "491890",
    "end": "496100"
  },
  {
    "text": "the more complex x86 branch\ninstructions quite late",
    "start": "496100",
    "end": "499190"
  },
  {
    "text": "in the pipeline.",
    "start": "499190",
    "end": "500940"
  },
  {
    "text": "Since Nehalem is capable of\nexecuting multiple instructions",
    "start": "500940",
    "end": "503980"
  },
  {
    "text": "each cycle, flushing\nthe pipeline in Nehalem",
    "start": "503980",
    "end": "506750"
  },
  {
    "text": "actually annuls the execution\nof many instructions,",
    "start": "506750",
    "end": "509700"
  },
  {
    "text": "resulting in a considerable\nhit on the CPI.",
    "start": "509700",
    "end": "514539"
  },
  {
    "text": "Like many modern\nprocessor implementations,",
    "start": "514539",
    "end": "517250"
  },
  {
    "text": "Nehalem has a much more\nsophisticated speculation",
    "start": "517250",
    "end": "521299"
  },
  {
    "text": "mechanism.",
    "start": "521299",
    "end": "523140"
  },
  {
    "text": "Rather than always guessing the\nnext instruction is at PC+4,",
    "start": "523140",
    "end": "526280"
  },
  {
    "text": "it only does that for\nnon-branch instructions.",
    "start": "526280",
    "end": "529720"
  },
  {
    "text": "For branches, it\npredicts the behavior",
    "start": "529720",
    "end": "531670"
  },
  {
    "text": "of each individual branch\nbased on what the branch did",
    "start": "531670",
    "end": "534750"
  },
  {
    "text": "last time it was executed\nand some knowledge of how",
    "start": "534750",
    "end": "537700"
  },
  {
    "text": "the branch is being used.",
    "start": "537700",
    "end": "539630"
  },
  {
    "text": "For example, backward\nbranches at the end of loops,",
    "start": "539630",
    "end": "542910"
  },
  {
    "text": "which are taken for all but the\nfinal iteration of the loop,",
    "start": "542910",
    "end": "546420"
  },
  {
    "text": "can be identified by their\nnegative branch offset values.",
    "start": "546420",
    "end": "551120"
  },
  {
    "text": "Nehalem can even determine if\nthere’s correlation between",
    "start": "551120",
    "end": "553740"
  },
  {
    "text": "branch instructions, using\nthe results of an another,",
    "start": "553740",
    "end": "557050"
  },
  {
    "text": "earlier branch to speculate\non the branch decision",
    "start": "557050",
    "end": "559550"
  },
  {
    "text": "of the current branch.",
    "start": "559550",
    "end": "561630"
  },
  {
    "text": "With these sophisticated\nstrategies,",
    "start": "561630",
    "end": "563710"
  },
  {
    "text": "Nehalem’s speculation is\ncorrect 95% to 99% of the time,",
    "start": "563710",
    "end": "567950"
  },
  {
    "text": "greatly reducing the impact of\nbranches on the effective CPI.",
    "start": "567950",
    "end": "573890"
  },
  {
    "text": "There’s also the lazy option of\nchanging the ISA to deal with",
    "start": "573890",
    "end": "577180"
  },
  {
    "text": "control hazards.",
    "start": "577180",
    "end": "578660"
  },
  {
    "text": "For example, we\ncould change the ISA",
    "start": "578660",
    "end": "580319"
  },
  {
    "text": "to specify that the instruction\nfollowing a jump or branch",
    "start": "580320",
    "end": "583840"
  },
  {
    "text": "is always executed.",
    "start": "583840",
    "end": "585610"
  },
  {
    "text": "In other words the transfer\nof control happens *after*",
    "start": "585610",
    "end": "588250"
  },
  {
    "text": "the next instruction.",
    "start": "588250",
    "end": "590230"
  },
  {
    "text": "This change ensures that the\nguess of PC+4 as the address",
    "start": "590230",
    "end": "593620"
  },
  {
    "text": "of the next instruction\nis always correct!",
    "start": "593620",
    "end": "596839"
  },
  {
    "text": "In the example shown here,\nassuming we changed the ISA,",
    "start": "596840",
    "end": "600280"
  },
  {
    "text": "we can reorganize the execution\norder of the loop to place",
    "start": "600280",
    "end": "603450"
  },
  {
    "text": "the MUL instruction after\nthe BNE instruction,",
    "start": "603450",
    "end": "606320"
  },
  {
    "text": "in the so-called\n“branch delay slot”.",
    "start": "606320",
    "end": "609170"
  },
  {
    "text": "Since the instruction\nin the branch delay slot",
    "start": "609170",
    "end": "611420"
  },
  {
    "text": "is always executed,\nthe MUL instruction",
    "start": "611420",
    "end": "613760"
  },
  {
    "text": "will be executed during\neach iteration of the loop.",
    "start": "613760",
    "end": "617320"
  },
  {
    "text": "The resulting execution is\nshown in this pipeline diagram.",
    "start": "617320",
    "end": "621470"
  },
  {
    "text": "Assuming we can find an\nappropriate instruction",
    "start": "621470",
    "end": "623740"
  },
  {
    "text": "to place in the delay\nslot, the branch",
    "start": "623740",
    "end": "626140"
  },
  {
    "text": "will have zero impact\non the effective CPI.",
    "start": "626140",
    "end": "628720"
  },
  {
    "text": "Are branch delay\nslots a good idea?",
    "start": "628720",
    "end": "633699"
  },
  {
    "text": "Seems like they reduce\nthe negative impact",
    "start": "633700",
    "end": "636130"
  },
  {
    "text": "that branches might have\non instruction throughput.",
    "start": "636130",
    "end": "640240"
  },
  {
    "text": "The downside is that\nonly half the time can",
    "start": "640240",
    "end": "642600"
  },
  {
    "text": "we find instructions to move\nto the branch delay slot.",
    "start": "642600",
    "end": "645933"
  },
  {
    "text": "The other half of\nthe time we have",
    "start": "645933",
    "end": "647350"
  },
  {
    "text": "to fill it with an\nexplicit NOP instruction,",
    "start": "647350",
    "end": "649930"
  },
  {
    "text": "increasing the size of the code.",
    "start": "649930",
    "end": "652580"
  },
  {
    "text": "And if we make the branch\ndecision later in the pipeline,",
    "start": "652580",
    "end": "655390"
  },
  {
    "text": "there are more branch\ndelay slots, which",
    "start": "655390",
    "end": "657910"
  },
  {
    "text": "would be even harder to fill.",
    "start": "657910",
    "end": "660410"
  },
  {
    "text": "In practice, it turns out\nthat branch prediction",
    "start": "660410",
    "end": "663120"
  },
  {
    "text": "works better than\ndelay slots in reducing",
    "start": "663120",
    "end": "665650"
  },
  {
    "text": "the impact of branches.",
    "start": "665650",
    "end": "667830"
  },
  {
    "text": "So, once again we see that it’s\nproblematic to alter the ISA",
    "start": "667830",
    "end": "671650"
  },
  {
    "text": "to improve the throughput\nof pipelined execution.",
    "start": "671650",
    "end": "675930"
  },
  {
    "text": "ISAs outlive implementations,\nso it’s best not to change",
    "start": "675930",
    "end": "679520"
  },
  {
    "text": "the execution semantics to deal\nwith performance issues created",
    "start": "679520",
    "end": "683010"
  },
  {
    "text": "by a particular implementation.",
    "start": "683010",
    "end": "685346"
  },
  {
    "start": "685346",
    "end": "685846"
  }
]