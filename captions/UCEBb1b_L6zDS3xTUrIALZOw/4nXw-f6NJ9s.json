[
  {
    "start": "0",
    "end": "305000"
  },
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6986"
  },
  {
    "start": "6986",
    "end": "18490"
  },
  {
    "text": "JASON KU: Hi, everybody. Welcome to the last\nlecture of 6.006. Last lecture, we talked\nabout summing up this class",
    "start": "18490",
    "end": "27410"
  },
  {
    "text": "and talking about future\ncourses in the department that use this material.",
    "start": "27410",
    "end": "33520"
  },
  {
    "text": "Just as a pointer to\nsome of those classes, I have a little slide\nhere I didn't get to",
    "start": "33520",
    "end": "38680"
  },
  {
    "text": "at the last lecture,\ntalking about what I was talking about at the\nend of the last lecture about different models--",
    "start": "38680",
    "end": "46300"
  },
  {
    "text": "different specialized classes\non different aspects of 006 material--",
    "start": "46300",
    "end": "52030"
  },
  {
    "text": "for example, more graph\nstuff, different models of computation,\nrandomness, complexity.",
    "start": "52030",
    "end": "59230"
  },
  {
    "text": "All of these things have\ntheir own specialized classes in the department, as well\nas a lot of applications",
    "start": "59230",
    "end": "65860"
  },
  {
    "text": "for this material in subjects\nlike biology, cryptography, and in particular, for\nyour instructors, the realm",
    "start": "65860",
    "end": "74860"
  },
  {
    "text": "of graphics and geometry. All of your\ninstructors this term happened to be geometers\nand be interested",
    "start": "74860",
    "end": "82990"
  },
  {
    "text": "in geometry-related problems. Me in particular, I didn't\nstart out in computer science.",
    "start": "82990",
    "end": "89439"
  },
  {
    "text": "I started out in\nmechanical engineering. And the thing that was my\npassion coming into MIT",
    "start": "89440",
    "end": "97210"
  },
  {
    "text": "was origami. Here's a couple of\npieces that I designed--",
    "start": "97210",
    "end": "104560"
  },
  {
    "text": "origami pieces, one square\nsheet of paper without cutting. Here's a lobster, and here's\na copyrighted dinosaur",
    "start": "104560",
    "end": "114190"
  },
  {
    "text": "from a particular movie of\nthe year that I designed it. ",
    "start": "114190",
    "end": "121790"
  },
  {
    "text": "When I was young,\nin high school, I started designing\nmy own origami models.",
    "start": "121790",
    "end": "126830"
  },
  {
    "text": "And what I didn't realize\nwas, the procedures that I went about\ndesigning these models",
    "start": "126830",
    "end": "133010"
  },
  {
    "text": "was actually algorithms. And I just didn't have\nthe mathematical language to understand exactly\nwhat I was doing,",
    "start": "133010",
    "end": "140990"
  },
  {
    "text": "but I could gain some\nintuition as an origami artist and design these\nthings by using some",
    "start": "140990",
    "end": "146946"
  },
  {
    "text": "of those algorithmic techniques. It wasn't until grad school,\nas a mechanical engineer,",
    "start": "146947",
    "end": "152209"
  },
  {
    "text": "that I started talking with\nour other instructor here,",
    "start": "152210",
    "end": "158990"
  },
  {
    "text": "Professor Demaine, about using\nalgorithms and computer science to design not just\norigami, which we both do,",
    "start": "158990",
    "end": "168590"
  },
  {
    "text": "but also folded structures\nthat can be used for mechanical applications like space flight,\ndeployable bridges in times",
    "start": "168590",
    "end": "181459"
  },
  {
    "text": "when you can't-- you need a temporary bridge or\nshelter or something like that.",
    "start": "181460",
    "end": "187640"
  },
  {
    "text": "Deployable structures\nwhere you might need to make folded structures--\ntransformable structures that",
    "start": "187640",
    "end": "193880"
  },
  {
    "text": "can have different applications\nfor different purposes-- need to reconfigure.",
    "start": "193880",
    "end": "199670"
  },
  {
    "text": "The dream being that, we\nhave these powerful devices in our pockets right\nnow-- cell phones--",
    "start": "199670",
    "end": "206250"
  },
  {
    "text": "which are really powerful\nbecause we can reconfigure the bits in them\nto make software",
    "start": "206250",
    "end": "211490"
  },
  {
    "text": "of all different kinds, right? There's an exponential\nnumber of different programs",
    "start": "211490",
    "end": "216800"
  },
  {
    "text": "that we can write. And that's part of\nwhy you're here, is to write the next best one. Right?",
    "start": "216800",
    "end": "222020"
  },
  {
    "text": "So that's how to make\nkind of a universal device",
    "start": "222020",
    "end": "227960"
  },
  {
    "text": "at the electronic level. What if we could do that\nfrom a material standpoint?",
    "start": "227960",
    "end": "233990"
  },
  {
    "text": "What if I could reprogram the\nmatter in my phone so that, not only could I reprogram\nthe app that's on your phone,",
    "start": "233990",
    "end": "242030"
  },
  {
    "text": "but instead of having, say, the\niPhone 10 or whatever that you have, and you want to\ngo by the iPhone 11,",
    "start": "242030",
    "end": "249049"
  },
  {
    "text": "instead, you download a software\napp that then reconfigures the matter in your phone--",
    "start": "249050",
    "end": "255440"
  },
  {
    "text": "it folds or reconfigures into\nthe next generation iPhone.",
    "start": "255440",
    "end": "260778"
  },
  {
    "text": "You don't have to throw\naway that old one. You can essentially\nrecycle the material that you have to potentially\nsave material, save",
    "start": "260779",
    "end": "269449"
  },
  {
    "text": "cost, and be better for the\nenvironment, potentially. So I started moving\ninto computer science",
    "start": "269450",
    "end": "277130"
  },
  {
    "text": "because I found that it\nwas a really good way to model the world\nand solve some really",
    "start": "277130",
    "end": "282770"
  },
  {
    "text": "interesting problems about\nfolding that I really enjoyed.",
    "start": "282770",
    "end": "288500"
  },
  {
    "text": "The three of us today\nare going to spend some time talking a\nlittle bit about how",
    "start": "288500",
    "end": "294050"
  },
  {
    "text": "we can use algorithms-- 6.006 material and beyond-- in our own research.",
    "start": "294050",
    "end": "300259"
  },
  {
    "text": "And we're going to start\noff with Professor Demaine, and then Professor Solomon. ",
    "start": "300260",
    "end": "307532"
  },
  {
    "text": "ERIK DEMAINE: Thanks. So let me just jump in here\nto computational origami",
    "start": "307532",
    "end": "312890"
  },
  {
    "text": "and geometric\nfolding algorithms, sort of a broader umbrella for\nfolding-related things, which",
    "start": "312890",
    "end": "318800"
  },
  {
    "text": "is encapsulated by\nthis class, 6.849, which is happening next fall. So you should all take it.",
    "start": "318800",
    "end": "325940"
  },
  {
    "text": "006 should be a\nreasonable background. And in general, we're interested\nin two kinds of problems.",
    "start": "325940",
    "end": "333419"
  },
  {
    "text": "One-- the big one\nis origami design, or in general,\nfolding design, where you have some specifications of\nwhat you would like to build.",
    "start": "333420",
    "end": "340310"
  },
  {
    "text": "In this case I wanted to\nmake a logo for 6.849. And I imagined extruding that\ntext into third dimension.",
    "start": "340310",
    "end": "350330"
  },
  {
    "text": "And then I wanted an\nalgorithm to tell me how to fold that structure. And so there is an\nalgorithm, which",
    "start": "350330",
    "end": "356090"
  },
  {
    "text": "I'll talk about\nin a moment, that gives you a crease pattern. And then, currently,\nyou fold it by hand. The dream is, we'll eventually\nhave folding machines that",
    "start": "356090",
    "end": "362509"
  },
  {
    "text": "do it all for us. And so that's the\norigami design, where you go from\nthe target shape",
    "start": "362510",
    "end": "369440"
  },
  {
    "text": "back to the crease pattern. The reverse direction\nis sort of foldability.",
    "start": "369440",
    "end": "375860"
  },
  {
    "text": "If I gave you a structure like\nthis and I wanted to know, does it fold?",
    "start": "375860",
    "end": "380870"
  },
  {
    "text": "That's the problem\nwe call foldability-- in general, class of problems. And sadly, most of those\nproblems are NP-hard.",
    "start": "380870",
    "end": "387889"
  },
  {
    "text": "Jason and I proved\nthat foldability is hard for a general-- given\na crease pattern like that,",
    "start": "387890",
    "end": "394100"
  },
  {
    "text": "telling you whether\nfolds into anything, it turns out to be NP-hard. So that's bad news.",
    "start": "394100",
    "end": "399270"
  },
  {
    "text": "So we focus a lot on\nthe design problem, because that actually\ntends to be easier. We can solve it with algorithms\nlike that one you're seeing.",
    "start": "399270",
    "end": "406340"
  },
  {
    "text": " A long time ago, we proved\nthat you can fold everything.",
    "start": "406340",
    "end": "412970"
  },
  {
    "text": "If I give you a\nsquare piece of paper and you take any polygon\nyou want to make--",
    "start": "412970",
    "end": "418012"
  },
  {
    "text": "or maybe the paper's white on\none side, black on the other, you want to fold some two-color\npattern, like a zebra,",
    "start": "418012",
    "end": "423200"
  },
  {
    "text": "or in general, some\nthree-dimensional surface, like these guys, there\nis a way to fold it",
    "start": "423200",
    "end": "428389"
  },
  {
    "text": "from a large enough\nsquare of paper. And it's actually really easy\nto prove that with an algorithm.",
    "start": "428390",
    "end": "433460"
  },
  {
    "text": "I have the sketch of\nthe two pages of proof that we go over in\n6.849, but I'll just",
    "start": "433460",
    "end": "439220"
  },
  {
    "text": "hand-wave a little bit. If you take a piece of\npaper, like my lecture notes here, the first thing\nyou do is fold it down",
    "start": "439220",
    "end": "446569"
  },
  {
    "text": "into a very long, narrow strip-- much longer and\nnarrower than this one-- wasting most of the material.",
    "start": "446570",
    "end": "452479"
  },
  {
    "text": "And then you take your strip,\nand you just figure out how to turn it in\nsome general way,",
    "start": "452480",
    "end": "457639"
  },
  {
    "text": "and then you just sort\nof zigzag back and forth along the surface. So it's very cool in that you\ncan prove with an algorithm,",
    "start": "457640",
    "end": "463730"
  },
  {
    "text": "and in a very short\namount of time, to someone you can\nactually fold everything. Of course, it's a\nterrible folding,",
    "start": "463730",
    "end": "468830"
  },
  {
    "text": "because in the\nvery first step, we throw away all but\nepsilon of the material.",
    "start": "468830",
    "end": "474140"
  },
  {
    "text": "But it's a starting point. That was back in the '90s-- late '90s-- one of\nthe first results in computational origami.",
    "start": "474140",
    "end": "480740"
  },
  {
    "text": "And in modern times, we\nlook for better algorithms that are more efficient, that\ntry to minimize the scale",
    "start": "480740",
    "end": "487280"
  },
  {
    "text": "factor from, how big\nof a piece of paper do I start from to, how\nbig of a model do I get?",
    "start": "487280",
    "end": "493070"
  },
  {
    "text": "And one of the cool\nways these days, which was invented by\nTomohiro Tachi and then analyzed by the two of us--",
    "start": "493070",
    "end": "499642"
  },
  {
    "text": "it's called Origamizer. It's free software. You take a 3D\nmodel and you can--",
    "start": "499642",
    "end": "505190"
  },
  {
    "text": "it makes it into a pattern\nthat you fold from a square. In this case, it uses 22% of\nthe area, which is pretty good--",
    "start": "505190",
    "end": "512329"
  },
  {
    "text": "similar to these guys\nin terms of efficiency. But very, very different\nkind of folding",
    "start": "512330",
    "end": "519380"
  },
  {
    "text": "than what you would get from\nmore traditional origami design, which uses\ndifferent algorithms, which",
    "start": "519380",
    "end": "524839"
  },
  {
    "text": "I'm not going to talk about. But you should take the class. Jason gives a\nlecture in the class, so you can learn from him.",
    "start": "524840",
    "end": "530940"
  },
  {
    "text": "But the vision is, we can take\nany sheet of material that can hold a crease, like\nthis sheet of steel",
    "start": "530940",
    "end": "537529"
  },
  {
    "text": "that Tomohiro is folding. It was cut by a big\nlaser cutter at MIT. And this is him in\nthis Data Center",
    "start": "537530",
    "end": "544010"
  },
  {
    "text": "several years ago, folding\nit into a steel bunny. And so this is a totally new\nway to manufacture 3D objects.",
    "start": "544010",
    "end": "553100"
  },
  {
    "text": "And you can make particularly\ninteresting objects that either collapse flat for\ntransportation or transform,",
    "start": "553100",
    "end": "561779"
  },
  {
    "text": "like Jason was talking about. But I'm just giving\nyou a flavor. I think the first paper we wrote\ntogether was on maze folding.",
    "start": "561780",
    "end": "570230"
  },
  {
    "text": "So this is an example\nof folding a maze from a rectangle of paper. And you can all try this out.",
    "start": "570230",
    "end": "578510"
  },
  {
    "text": "You just google for\nour Maze Folder. You can generate a random maze. And this 3D structure\ncan be folded",
    "start": "578510",
    "end": "586940"
  },
  {
    "text": "from this crease pattern. That's a really hard one, so\nmaybe try something smaller.",
    "start": "586940",
    "end": "593010"
  },
  {
    "text": "You can also write your favorite\nmessage and fold this maze--",
    "start": "593010",
    "end": "598880"
  },
  {
    "text": "extruded graph-- from\nthis crease pattern. Might want to start\nwith something smaller,",
    "start": "598880",
    "end": "604850"
  },
  {
    "text": "but that's the general idea. And it's actually quite easy\nto prove this algorithmically,",
    "start": "604850",
    "end": "609860"
  },
  {
    "text": "if you have a really\ngood origamist like Jason on your team. What you do is design how\nto fold each type of vertex.",
    "start": "609860",
    "end": "617129"
  },
  {
    "text": "This is just a graph on a grid. There are some constant\nnumber of different ways that each vertex could look.",
    "start": "617130",
    "end": "623300"
  },
  {
    "text": "It could be degree 4. It could be degree 3, as\na T. It could be degree 2, either a turn or a straight.",
    "start": "623300",
    "end": "629630"
  },
  {
    "text": "And you design little gadgets,\nlittle crease patterns, that fold into each of\nthose little structures.",
    "start": "629630",
    "end": "634838"
  },
  {
    "text": "And if you can do it in a\nway that these boundaries are compatible, then to\nfold the whole thing, you just sort of gluon\ntogether those crease patterns.",
    "start": "634838",
    "end": "641360"
  },
  {
    "text": "And that's how that\nsoftware works. This was particularly\ninteresting,",
    "start": "641360",
    "end": "646850"
  },
  {
    "text": "because you can fold an\narbitrarily complicated graph-- arbitrarily complicated\nmaze, n by n,",
    "start": "646850",
    "end": "652640"
  },
  {
    "text": "with a constant scale factor. As long as the\nheight that you're extruding that maze\nis constant, then",
    "start": "652640",
    "end": "658339"
  },
  {
    "text": "this is one family of shapes we\nknow how to fold really well. In general, we're\ntrying to understand, what makes this lobster\na nice shape in that it",
    "start": "658340",
    "end": "666410"
  },
  {
    "text": "can be represented with a\nnot-too-large piece of paper. And we don't have general\nanswers to that problem.",
    "start": "666410",
    "end": "673960"
  },
  {
    "text": "I think that was a whirlwind\ntour of computational origami. I also play a lot in\nalgorithmic sculpture.",
    "start": "673960",
    "end": "681670"
  },
  {
    "text": "One of the leading edges\nin origami and origami math is understanding how\ncurved creases work.",
    "start": "681670",
    "end": "688550"
  },
  {
    "text": "And one of our\nfavorite models is this one, where you fold\nconcentric circles alternating mountain and valley,\ncut a circular hole out,",
    "start": "688550",
    "end": "695740"
  },
  {
    "text": "and it folds into this\nkind of Pringle shape as a nice physics\nequilibrium thing.",
    "start": "695740",
    "end": "702820"
  },
  {
    "text": "And then you can turn it into\nfun sculptures like this. These are done with my dad,\nMartin Demaine, who's also here",
    "start": "702820",
    "end": "709569"
  },
  {
    "text": "at MIT, or this guy. This paper has been\nprinted with a pattern according to getting\nburned by glass.",
    "start": "709570",
    "end": "716740"
  },
  {
    "text": "And then it gets folded and\nthen put inside glass, also. Made here at MIT.",
    "start": "716740",
    "end": "723339"
  },
  {
    "text": "We use sculpture to try\nto explore and understand intuitively how\ncurved creases work, and then we get better\nand better understanding",
    "start": "723340",
    "end": "729550"
  },
  {
    "text": "of the mathematics of even-- we don't even know whether this\nsurface exists, whether it's possible to fold in this\nway, although getting",
    "start": "729550",
    "end": "737087"
  },
  {
    "text": "close to proving it.  That was sort of in the top\nlevel of this hierarchy.",
    "start": "737087",
    "end": "746380"
  },
  {
    "text": "Computational geometry\nis a bigger umbrella, which is represented by\nanother class, 6.850,",
    "start": "746380",
    "end": "751630"
  },
  {
    "text": "that's being taught this term. And then I talked\nabout geometric folding within that branch.",
    "start": "751630",
    "end": "757150"
  },
  {
    "text": "Let me briefly tell\nyou about another world of geometry-- very different in\nterms of model of computation.",
    "start": "757150",
    "end": "763000"
  },
  {
    "text": "Oh, I jumped ahead a little bit. Rewind. Let me show you\none more fun demo,",
    "start": "763000",
    "end": "768740"
  },
  {
    "text": "which-- if I find my scissors. ",
    "start": "768740",
    "end": "774579"
  },
  {
    "text": "If I take a rectangle of\npaper, and I fold it flat and make one straight cut,\nwhat shapes can I get?",
    "start": "774580",
    "end": "783430"
  },
  {
    "text": "It's called the\nfolding cut problem. It's hundreds of years old.",
    "start": "783430",
    "end": "789400"
  },
  {
    "text": "Here, for example, I get a swan.",
    "start": "789400",
    "end": "795550"
  },
  {
    "text": "Here, I get-- one straight cut.",
    "start": "795550",
    "end": "806535"
  },
  {
    "text": "I unfold and get angelfish.",
    "start": "806535",
    "end": "812069"
  },
  {
    "text": "Tough audience today. I've got to keep going. You've seen all of these before. This is this one is a\nparticularly difficult one",
    "start": "812070",
    "end": "820040"
  },
  {
    "text": "to fold-- to only fold. And to cut, yeah.",
    "start": "820040",
    "end": "825430"
  },
  {
    "text": "OK. That works well. ",
    "start": "825430",
    "end": "830710"
  },
  {
    "text": "This is the MIT logo.",
    "start": "830710",
    "end": "836250"
  },
  {
    "text": "Ooh, ah. AUDIENCE: Ooh, aah. MIT, yeah! ERIK DEMAINE: Yeah. Go, MIT.",
    "start": "836250",
    "end": "842030"
  },
  {
    "text": "All right. That's actually\nthe first problem I worked on in\ncomputational origami.",
    "start": "842030",
    "end": "847040"
  },
  {
    "text": "It's a lot of fun. And there's a really interesting\nalgorithm here, also, for computing the\ncrease pattern,",
    "start": "847040",
    "end": "852260"
  },
  {
    "text": "how to fold your piece\nof paper to align-- in fact, any graph you\ndraw on a piece of paper,",
    "start": "852260",
    "end": "857987"
  },
  {
    "text": "you can align all of those\nedges and nothing else. So you cut along the line and\nyou get exactly what you want.",
    "start": "857987",
    "end": "863730"
  },
  {
    "text": "Cool. All right. Now, I want to talk about\nsomething completely different, which is self-assembly.",
    "start": "863730",
    "end": "869160"
  },
  {
    "start": "864000",
    "end": "1033000"
  },
  {
    "text": "A fun thing you can do with\nDNA, which we all have. Just pick out some\ncool DNA strands",
    "start": "869160",
    "end": "875640"
  },
  {
    "text": "and design them in a clever\nway so they fit together to form a kind of square\nwith dangling ends, which",
    "start": "875640",
    "end": "882090"
  },
  {
    "text": "I'll call glues and each\nof those dangling ends can have a very\nparticular pattern, and only identical or\ncomplementary patterns",
    "start": "882090",
    "end": "889440"
  },
  {
    "text": "will attach to each other. And so you can\nuse this to design your own self-assembling\nsystem, like biology",
    "start": "889440",
    "end": "896639"
  },
  {
    "text": "does, but engineered, for\nexample, to build a computer. This is an example of taking\na bunch of these square tiles",
    "start": "896640",
    "end": "903660"
  },
  {
    "text": "and building a binary counter. This thing is roughly counting\nin binary along the diagonal. It's a little skewed,\nso it's hard to see.",
    "start": "903660",
    "end": "910390"
  },
  {
    "text": "But the general model\nis, you have squares--",
    "start": "910390",
    "end": "919170"
  },
  {
    "text": "this is sort of the\ncomputational model-- with four different glues. And you can build\nany square you want,",
    "start": "919170",
    "end": "926230"
  },
  {
    "text": "but you don't have very many of\nthese different glues, ideally. And then, if you have two\ntiles with complementary glues,",
    "start": "926230",
    "end": "935190"
  },
  {
    "text": "they will want to\nmatch together. But it depends how strong this\nglue is, how much affinity",
    "start": "935190",
    "end": "941160"
  },
  {
    "text": "there is for how long those\nDNA dangling ends are, and also, the temperature\nof your system.",
    "start": "941160",
    "end": "946240"
  },
  {
    "text": "If you have really high\ntemperature, nothing. Will stick together\nlow temperature, things will stick together even\nif they're not supposed to.",
    "start": "946240",
    "end": "953160"
  },
  {
    "text": "If you tune your\nsystem really well, you can design a system so that\nmaybe these guys-- these glues",
    "start": "953160",
    "end": "960180"
  },
  {
    "text": "are really strong. And so let's, I don't\nknow, write \"E\" here-- Erik.",
    "start": "960180",
    "end": "966300"
  },
  {
    "text": "And so these tiles will\nalways glue together, but only when all three of\nthese are glued together",
    "start": "966300",
    "end": "971880"
  },
  {
    "text": "can this tile-- which has C complement\nand F complement.",
    "start": "971880",
    "end": "977640"
  },
  {
    "text": "Then it will, if you set\nthe temperatures just right, only because both of\nthese edges match will this dial be able to come in.",
    "start": "977640",
    "end": "984000"
  },
  {
    "text": "And that's the basis for\nbuilding that binary counter. This is a very different\nmodel of computation",
    "start": "984000",
    "end": "989730"
  },
  {
    "text": "from what we're used\nto in this class, where you think of instructions,\nand they run one at a time. Here the, model of\ncomputation is geometric.",
    "start": "989730",
    "end": "997440"
  },
  {
    "text": "It's these squares that are\njust floating around and gluing together. And so your program,\nat any moment,",
    "start": "997440",
    "end": "1002750"
  },
  {
    "text": "is some conglomerate of squares. I just wanted to\nmention it because it's",
    "start": "1002750",
    "end": "1007940"
  },
  {
    "text": "a really fun model. You can prove cool\nthings in this model, like how to build any shape\nby a sequence of pores",
    "start": "1007940",
    "end": "1015290"
  },
  {
    "text": "mixing between tiles that\nyou can execute in parallel. And so it only\ntakes log and time",
    "start": "1015290",
    "end": "1021200"
  },
  {
    "text": "of parallel steps, a linear\nnumber of different mix operations, to make\nan arbitrary shape--",
    "start": "1021200",
    "end": "1026780"
  },
  {
    "text": "even using a constant number of\ndifferent glues, which is cool, and maybe practical.",
    "start": "1026780",
    "end": "1033990"
  },
  {
    "start": "1033000",
    "end": "1079000"
  },
  {
    "text": "You can also use it to\nbuild a replicator, where you're given an object\nlike this that you don't know the shape of--",
    "start": "1033990",
    "end": "1040503"
  },
  {
    "text": "like, we don't know\nwhether this exists, and we can't model it\nmathematically very well, and you stick it in a vat,\nand all of these tiles",
    "start": "1040503",
    "end": "1047059"
  },
  {
    "text": "would attach and\nbasically build a mold, and then start photocopying,\nin 3D, that mold.",
    "start": "1047060",
    "end": "1052070"
  },
  {
    "text": "And you can build that with\na system with only two steps, I believe, and a constant\nnumber of tile types.",
    "start": "1052070",
    "end": "1058940"
  },
  {
    "text": "And it does all of that, in\nthis model, in constant time. In reality, you would\nhave to feed this machine",
    "start": "1058940",
    "end": "1064200"
  },
  {
    "text": "and wait for it to print\nout all of these things, and these experiments take\nhours, if not days, to run.",
    "start": "1064200",
    "end": "1070070"
  },
  {
    "text": "But in theory, it's really cool. And you get some\nreally fun models and very general results. You can also use it to build\na miniaturizer or a magnifier",
    "start": "1070070",
    "end": "1077120"
  },
  {
    "text": "and other fun stuff.  That was a brief tour of\ncomputational geometry.",
    "start": "1077120",
    "end": "1084070"
  },
  {
    "start": "1079000",
    "end": "1423000"
  },
  {
    "text": "I work mostly in four different\nareas of algorithms-- geometry, data structures, graph\nalgorithms, and what",
    "start": "1084070",
    "end": "1089890"
  },
  {
    "text": "I call recreational algorithms. I think I made up that term. And let's go into\ndata structures,",
    "start": "1089890",
    "end": "1097100"
  },
  {
    "text": "which is represented\nby this class, 6.851. All of the classes I mentioned\nhave online video lectures,",
    "start": "1097100",
    "end": "1104270"
  },
  {
    "text": "especially for those watching\nat home on OpenCourseWare. Most of these classes are on\nOpenCourseWare, and if not,",
    "start": "1104270",
    "end": "1110830"
  },
  {
    "text": "they're on my webpage. 6.851, Advanced Data Structures,\nis an extension of the sorts",
    "start": "1110830",
    "end": "1116890"
  },
  {
    "text": "of data structures\nyou've seen here, in 006 and the ones\nyou will see in 6.046.",
    "start": "1116890",
    "end": "1122710"
  },
  {
    "text": "I thought I would\ngive you a flavor of one such result,\nwhich is a problem we've",
    "start": "1122710",
    "end": "1134950"
  },
  {
    "text": "seen in this class done better.",
    "start": "1134950",
    "end": "1140260"
  },
  {
    "text": "Suppose you want to store\na dynamic ordered set. ",
    "start": "1140260",
    "end": "1147490"
  },
  {
    "text": "This is the set interface. Dynamic in the sense that\nI have insert and delete,",
    "start": "1147490",
    "end": "1157150"
  },
  {
    "text": "and ordered in the sense that\nI want to support find-next and find-previous. ",
    "start": "1157150",
    "end": "1167290"
  },
  {
    "text": "Exactly which subset\nof the set interface you choose influences what\ndata structure you've seen.",
    "start": "1167290",
    "end": "1173080"
  },
  {
    "text": "We've seen, for dynamic sets,\nyou want to use hashing. If you don't care\nabout find-next, if you just care about\nfind, then hashing",
    "start": "1173080",
    "end": "1180070"
  },
  {
    "text": "is great-- constant expected. You can prove stronger\nthings about hashing. And we do in that class.",
    "start": "1180070",
    "end": "1186370"
  },
  {
    "text": "But if you want\ndynamic and ordered, you cannot do constant\ntime per operation.",
    "start": "1186370",
    "end": "1192070"
  },
  {
    "text": "You can prove that,\nwhich is cool. What data structure have we seen\nthat solves this problem pretty",
    "start": "1192070",
    "end": "1198640"
  },
  {
    "text": "well? Set AVL trees, which\nsolve everything in log n.",
    "start": "1198640",
    "end": "1203710"
  },
  {
    "text": "So log n is one competitor. ",
    "start": "1203710",
    "end": "1213290"
  },
  {
    "text": "Yeah. I'm interested in\nthe word RAM model,",
    "start": "1213290",
    "end": "1220730"
  },
  {
    "text": "which is the only model\nwe've seen in this class. This happens to work\nin a stronger model. And we can do better than\nlog n in the following--",
    "start": "1220730",
    "end": "1232247"
  },
  {
    "text": "it will take me a while\nbefore I get better, but here's, at least, a\ndifferent bound we can get-- log w.",
    "start": "1232247",
    "end": "1239590"
  },
  {
    "text": "This is via a structure called\nvan Emde Boas, who is a person.",
    "start": "1239590",
    "end": "1245650"
  },
  {
    "text": "AVL is two people. van Emde Boas,\nI've actually met. Log w-- remember,\nw is our word size.",
    "start": "1245650",
    "end": "1252942"
  },
  {
    "text": "So this is a bit of\na weird running time. It's great if w is log n,\nthen this is log log n.",
    "start": "1252942",
    "end": "1258370"
  },
  {
    "text": "And we know w is at least log\nn, but it could be bigger. We don't really have a sense\nof how big w could get.",
    "start": "1258370",
    "end": "1264070"
  },
  {
    "text": "Maybe it's even n. Maybe it's big-- and\nthen these are the same. Maybe it's bigger than n,\nand then this is maybe worse.",
    "start": "1264070",
    "end": "1270470"
  },
  {
    "text": "But for most ws, this is\nactually pretty good-- and indeed, optimal. ",
    "start": "1270470",
    "end": "1277840"
  },
  {
    "text": "But it's not strictly\nbetter, in any sense, yet. On the other hand, there's\nanother data structure which",
    "start": "1277840",
    "end": "1284169"
  },
  {
    "text": "runs in log n divided by log w. This is called fusion trees.",
    "start": "1284170",
    "end": "1290320"
  },
  {
    "text": "This was invented\naround the time that cold fusion\nwas in the news, and so they wanted data\nstructures to represent.",
    "start": "1290320",
    "end": "1297515"
  },
  {
    "text": " We can achieve this bound or\nwe can achieve this bound.",
    "start": "1297515",
    "end": "1302950"
  },
  {
    "text": "And this bound is\ngood is if w is large. This band as good if w is small.",
    "start": "1302950",
    "end": "1309250"
  },
  {
    "text": "You can always take the min of\nthe two, whatever is better. And in particular, the min of\nthose two things is at most--",
    "start": "1309250",
    "end": "1325030"
  },
  {
    "text": "I think it's square root\nlog n over log log n. If you want to bound\njust in terms of n,",
    "start": "1325030",
    "end": "1333850"
  },
  {
    "text": "then the crossover point\nbetween these two is this place. And so you're always,\nat most, this, which is quite a bit better\nthan the log n of AVL.",
    "start": "1333850",
    "end": "1341320"
  },
  {
    "text": "We've got a square\nroot and we've got a slight thing\nin the denominator. Pretty tiny. But the big thing\nis the square root.",
    "start": "1341320",
    "end": "1347860"
  },
  {
    "text": "And that's kind of cool. And it turns out, that's\npretty much optimal. In terms of an n\nbound, this is optimal.",
    "start": "1347860",
    "end": "1353020"
  },
  {
    "text": "The min of these\ntwo, in general, is roughly optimal\nup to log log terms.",
    "start": "1353020",
    "end": "1358929"
  },
  {
    "text": "For fun, I threw up\nthe actual formula for the right-bound,\nwhich is tight",
    "start": "1358930",
    "end": "1365080"
  },
  {
    "text": "up to constant factors of\nmatching upper and lower bounds, which we talk about. It's min of three things--",
    "start": "1365080",
    "end": "1372560"
  },
  {
    "text": "four things, including log of\nw over a divided by log of log w over a log of log n over a.",
    "start": "1372560",
    "end": "1379800"
  },
  {
    "text": "That's the last term\nthat I just read. This was messy. Surprisingly, that\nis the right answer",
    "start": "1379800",
    "end": "1385210"
  },
  {
    "text": "for this very\nparticular problem-- a very natural problem. AUDIENCE: What is a? ERIK DEMAINE: A is the log\nof the space you're using.",
    "start": "1385210",
    "end": "1392600"
  },
  {
    "text": "So it's the address size. Good question. If you throw it-- so it depends.",
    "start": "1392600",
    "end": "1398700"
  },
  {
    "text": "If you have a polynomial space\ndata structure, then basically, these are optimal. And this is generalizing\nto beyond that.",
    "start": "1398700",
    "end": "1406600"
  },
  {
    "text": "Maybe you have a little bit\nmore than polynomial space. Cool. So that's data structures.",
    "start": "1406600",
    "end": "1413720"
  },
  {
    "text": "I'm going to jump ahead to\ngraph algorithms, which,",
    "start": "1413720",
    "end": "1419150"
  },
  {
    "text": "if you want to take this class,\nI recommend a time travel device. Go back to fall 2011.",
    "start": "1419150",
    "end": "1424400"
  },
  {
    "start": "1423000",
    "end": "1737000"
  },
  {
    "text": "It may never get taught again. But it has video,\nso you can watch-- instead of time\ntraveling, if you",
    "start": "1424400",
    "end": "1430042"
  },
  {
    "text": "don't want to watch\nit live, you can just watch the recorded version. It was taught by a bunch\nof postdocs that were here,",
    "start": "1430042",
    "end": "1435980"
  },
  {
    "text": "and a bit myself. What I like to do with graphs\nis the world of planar graphs,",
    "start": "1435980",
    "end": "1443179"
  },
  {
    "text": "or near-planar graphs. ",
    "start": "1443180",
    "end": "1448538"
  },
  {
    "text": "We've talked a lot\nabout, this class, algorithms that work\nfor arbitrary graphs. And the algorithms\nwe've seen in this class",
    "start": "1448538",
    "end": "1454010"
  },
  {
    "text": "are pretty much the best we\nknow for a lot of problems for arbitrary graphs. But if your graph\nhas some structure,",
    "start": "1454010",
    "end": "1460490"
  },
  {
    "text": "like it's a road network\nand there aren't too many overpasses, you can usually\ndraw these graphs in the plane",
    "start": "1460490",
    "end": "1466309"
  },
  {
    "text": "without crossings. That's the meaning of planar. Maybe not exactly. Maybe just a few crossings. There's a generalization of\nthis, which I won't get into.",
    "start": "1466310",
    "end": "1473452"
  },
  {
    "text": "But let's just think\nabout planar graphs. Planar graphs have\nsome nice features, like they always have a\nlinear number of edges.",
    "start": "1473452",
    "end": "1479898"
  },
  {
    "text": "They're always sparse.  So you can immediately plug\nthat into our existing bounds.",
    "start": "1479898",
    "end": "1486380"
  },
  {
    "text": "But even so, Dijkstra, in such a\ngraph, would take v log v time.",
    "start": "1486380",
    "end": "1493100"
  },
  {
    "text": "For planar graphs, you can do\nthe equivalent of Dijkstra, meaning, I can compute\nsingle-source shortest paths",
    "start": "1493100",
    "end": "1498910"
  },
  {
    "text": "with negative edge\nweights in linear time. ",
    "start": "1498910",
    "end": "1507260"
  },
  {
    "text": "No log. Not that impressive,\nbut remove a log.",
    "start": "1507260",
    "end": "1512309"
  },
  {
    "text": "More impressive is, we can do\nthe equivalent of Bellman-Ford, which is a single-source\nshortest paths with arbitrary",
    "start": "1512310",
    "end": "1518760"
  },
  {
    "text": "edge weights in a planar\ngraph in some time--",
    "start": "1518760",
    "end": "1525870"
  },
  {
    "text": "almost linear time.  The log squared v\nover log log v. So",
    "start": "1525870",
    "end": "1535200"
  },
  {
    "text": "there's a couple\nof factors here-- but for almost linear\ntime, whereas Bellman-Ford would take v squared time.",
    "start": "1535200",
    "end": "1540940"
  },
  {
    "text": "So this is a huge\nimprovement over what we've seen in the class. These are quite\ncomplicated algorithms, but they're covered\nin that class,",
    "start": "1540940",
    "end": "1547087"
  },
  {
    "text": "if you're interested in them. Then the area I work in a lot\nis approximation algorithms",
    "start": "1547087",
    "end": "1553410"
  },
  {
    "text": "for planar graphs. And let me just give you a fun\nflavor using something we know,",
    "start": "1553410",
    "end": "1561450"
  },
  {
    "text": "which is breadth-first search. Breath-first search\nyou can think",
    "start": "1561450",
    "end": "1567030"
  },
  {
    "text": "of as building sort of rings\naround a single root node.",
    "start": "1567030",
    "end": "1573380"
  },
  {
    "text": "And there's this\ngeneral approach-- this was introduced\nby Baker in 1994, we've used for lots\nof different problems.",
    "start": "1573380",
    "end": "1579890"
  },
  {
    "text": "We want to solve some\nNP-hard problem on a graph. So just run breadth-first\nsearch from an arbitrary vertex",
    "start": "1579890",
    "end": "1586760"
  },
  {
    "text": "and decompose your\ngraph into these layers. You could number them-- 0, 1, 2, 3.",
    "start": "1586760",
    "end": "1592550"
  },
  {
    "text": "These are levels. And let's just, like,\ndelete some of those layers.",
    "start": "1592550",
    "end": "1598760"
  },
  {
    "text": "Let's say, let's delete\nevery fourth layer. So maybe I delete this one. I delete all of the\nvertices in that layer.",
    "start": "1598760",
    "end": "1604860"
  },
  {
    "text": "And then I delete all\nof the things in layer 8, and layer 12, and so on.",
    "start": "1604860",
    "end": "1610670"
  },
  {
    "text": "Guessing-- I don't know which\none to start with, but from-- I'll just try them all. And then I delete every\nfourth layer after that.",
    "start": "1610670",
    "end": "1618380"
  },
  {
    "text": "So I've deleted, on average,\nabout a quarter of the graph. And it turns out, for a lot of\nproblems that you care about,",
    "start": "1618380",
    "end": "1626660"
  },
  {
    "text": "like choosing where to place\nfire stations in this graph to minimize travel\ntime for if there's",
    "start": "1626660",
    "end": "1632960"
  },
  {
    "text": "a fire somewhere in the graph-- this happens, you know? Fires and graphs. Then this will only hurt\nyour solution by, like,",
    "start": "1632960",
    "end": "1641120"
  },
  {
    "text": "a factor of 1 plus a quarter.",
    "start": "1641120",
    "end": "1646610"
  },
  {
    "text": "So you will get\na solution that's within 25% of the optimal,\nfor a lot of problems.",
    "start": "1646610",
    "end": "1655350"
  },
  {
    "text": "And that works for any value 4. So I could do it\nfor 10, and then I",
    "start": "1655350",
    "end": "1660600"
  },
  {
    "text": "would get within 10% of\nthe optimal solution. OK, but how do I actually\nsolve the problem once I",
    "start": "1660600",
    "end": "1666390"
  },
  {
    "text": "delete every fourth layer? Well, then your graph has\nthis extra special structure, which is a constant number\nof layers, let's say.",
    "start": "1666390",
    "end": "1673180"
  },
  {
    "text": "A constant number of\nbreadth-first search layers. If you just look\nat this portion, this connected component,\nor this connected component",
    "start": "1673180",
    "end": "1678760"
  },
  {
    "text": "in here, you can-- your graph is\nalmost like a cycle.",
    "start": "1678760",
    "end": "1683790"
  },
  {
    "text": "It's like four cycles\nstacked up together with some connections\nbetween them. And it turns out,\nthat's something",
    "start": "1683790",
    "end": "1688980"
  },
  {
    "text": "you can solve with very\nfancy dynamic programming, like the stuff we've\nseen in this class, which",
    "start": "1688980",
    "end": "1694800"
  },
  {
    "text": "focuses on just a single\npath or a single cycle. If you just have a\nconstant number of cycles, with more work, you can still do\neverything in polynomial time.",
    "start": "1694800",
    "end": "1702600"
  },
  {
    "text": "This is a very general approach\nfor getting arbitrarily good approximation algorithms. We call these 1 plus epsilon\napproximation for any epsilon.",
    "start": "1702600",
    "end": "1711930"
  },
  {
    "text": "But the larger the epsilon,\nthe more time you take. It's something like 2 to the\norder 1 over epsilon times",
    "start": "1711930",
    "end": "1719610"
  },
  {
    "text": "polynomial n. So as long as\nepsilon is constant, this is polynomial time.",
    "start": "1719610",
    "end": "1724773"
  },
  {
    "text": "This is called a PTAS.  Anyway, that was\ngraph algorithms.",
    "start": "1724773",
    "end": "1731309"
  },
  {
    "text": "Last topic is recreational\nalgorithms, which is maybe best encompassed by this class.",
    "start": "1731310",
    "end": "1736830"
  },
  {
    "text": "6.892 is its latest name. It changes names\nevery once in a while. And I mentioned it in the\nhardness complexity lecture,",
    "start": "1736830",
    "end": "1744179"
  },
  {
    "start": "1737000",
    "end": "1812000"
  },
  {
    "text": "because this class is all\nabout hardness proofs, analyzing fun games and puzzles. We saw the Tetris\nNP-hardness in that lecture.",
    "start": "1744180",
    "end": "1752160"
  },
  {
    "text": "But you can also prove Super\nMario Brothers is hard, or Portal is hard, or\nMario Kart is hard,",
    "start": "1752160",
    "end": "1758070"
  },
  {
    "text": "or The Witness, a modern\nvideo game, is hard. Or, one of our latest\nresults is that Recurse--",
    "start": "1758070",
    "end": "1764070"
  },
  {
    "text": "that game in the top\nright-- is undecidable. There's no algorithm to\nplay that game perfectly.",
    "start": "1764070",
    "end": "1772740"
  },
  {
    "text": "And you can even\ndownload the level-- an example of the level\nand play it, if you dare.",
    "start": "1772740",
    "end": "1780070"
  },
  {
    "text": "So that's a lot of-- we have a lot of fun in\nthat world of hardness of different games and puzzles.",
    "start": "1780070",
    "end": "1787309"
  },
  {
    "text": "Where do I want to go next? OK. Next topic is balloon twisting.",
    "start": "1787310",
    "end": "1792419"
  },
  {
    "text": "Totally different. This is recreational,\nbut not about hardness. This is an octahedron\ntwisted from one balloon.",
    "start": "1792420",
    "end": "1801270"
  },
  {
    "text": "I made another one on a stick. Each of these is\nmade for one balloon. What graphs can you\nmake for one balloon?",
    "start": "1801270",
    "end": "1808860"
  },
  {
    "text": "Well, you should read our paper. And you can characterize\nhow many balloons you need to make each polyhedron.",
    "start": "1808860",
    "end": "1815220"
  },
  {
    "start": "1812000",
    "end": "2080000"
  },
  {
    "text": "And some of these problems are\nNP-hard, and it's a lot of fun.",
    "start": "1815220",
    "end": "1821169"
  },
  {
    "text": "Cool. I think that's the\nend of the slides. The last thing I\nwanted to show you is a problem, a\npuzzle/magic trick--",
    "start": "1821170",
    "end": "1832889"
  },
  {
    "text": "it comes from the puzzle world-- called the picture\nhanging problem. So imagine you have a picture. You want to hang it on a wall.",
    "start": "1832890",
    "end": "1839230"
  },
  {
    "text": "So you invested\nin some nice rope, and you hang it on a nail. If the nail falls out, the\npicture falls, and you're sad.",
    "start": "1839230",
    "end": "1847380"
  },
  {
    "text": "So you invest in two\nnails, like I have here, and maybe you hang your\npicture on both those nails.",
    "start": "1847380",
    "end": "1853500"
  },
  {
    "text": "Now, if one of the\nnails falls out, you still have a\ncrookedly hung picture.",
    "start": "1853500",
    "end": "1858570"
  },
  {
    "text": "If the other nail falls\nout, OK, it's gone. I want to hang a\npicture on two nails",
    "start": "1858570",
    "end": "1864480"
  },
  {
    "text": "such that, if I remove either\nnail, the picture falls. So, Jason, pick a\nnail, left or right.",
    "start": "1864480",
    "end": "1871070"
  },
  {
    "text": "Left, we remove. Make sure this\ndoesn't fall off-- and, boom, the picture falls.",
    "start": "1871070",
    "end": "1876430"
  },
  {
    "text": "Same wrapping. You can check-- you\ncan rewind the video, make sure I did\nthe same wrapping. JASON KU: And take\nout the right.",
    "start": "1876430",
    "end": "1881679"
  },
  {
    "text": "ERIK DEMAINE: Then\ntake out the right one. Good choice. Then, also, the picture falls. ",
    "start": "1881680",
    "end": "1889150"
  },
  {
    "text": "This is a classic puzzle,\nbut you can generalize it. So let me do it for three\nnails, which is all I have here.",
    "start": "1889150",
    "end": "1896250"
  },
  {
    "text": "This nail is sagging\na little bit. y, x-- y inverse, x inverse.",
    "start": "1896250",
    "end": "1902429"
  },
  {
    "text": "I think that's right. So this is one way to hang\na picture on three nails such that, if I remove any of\nthe nails, the picture falls.",
    "start": "1902430",
    "end": "1909610"
  },
  {
    "text": "Justin, 1, 2, or 3? 2. OK.",
    "start": "1909610",
    "end": "1915880"
  },
  {
    "text": "Yeah, I want to\nget out of the way and make sure I don't\ngo over the edge here. ",
    "start": "1915880",
    "end": "1924380"
  },
  {
    "text": "Yeah. It's a lot easier to\nmake this one work. But you can see, boom,\npicture falls there.",
    "start": "1924380",
    "end": "1931220"
  },
  {
    "text": "And of course, imagine\ninfinite gravity. And the picture falls. Ta-da!",
    "start": "1931220",
    "end": "1936710"
  },
  {
    "text": "You can generalize this\nto do essentially any-- what's called a monotone Boolean\nfunction-- on any set of nails.",
    "start": "1936710",
    "end": "1943160"
  },
  {
    "text": "I mean, you can make\nany subset of the nails cause the picture to fall\nand any collection of subsets of nails to make it fall.",
    "start": "1943160",
    "end": "1948770"
  },
  {
    "text": "Of course, if you\nremove more nails, it's still going to fall. That's the monotone sense. But otherwise, you can\ndo an arbitrary pattern,",
    "start": "1948770",
    "end": "1956458"
  },
  {
    "text": "which is fun. That's actually a\nresult with Ron Rivest and a bunch of other people.",
    "start": "1956458",
    "end": "1963000"
  },
  {
    "text": "I think I'm\napproximately on time. So that was a quick tour.",
    "start": "1963000",
    "end": "1968490"
  },
  {
    "text": "And there are obviously various\nclasses here you can take. 6.892, the hardness class, was\njust offered last semester,",
    "start": "1968490",
    "end": "1975390"
  },
  {
    "text": "so it probably won't\nbe for a while. But all of these\nclasses are online. Watch the videos, feel\nfree to ask me questions.",
    "start": "1975390",
    "end": "1981270"
  },
  {
    "text": "And now we have Justin. I left you space here\nfor your outline. ",
    "start": "1981270",
    "end": "1988390"
  },
  {
    "text": "You don't have to, but\nI'll put your name. JUSTIN SOLOMON: Thank you. ",
    "start": "1988390",
    "end": "1998170"
  },
  {
    "text": "JASON KU: So Justin\nis also a geometer. ERIK DEMAINE: Yeah, we've got\na lot of geometry people in 006 this semester.",
    "start": "1998170",
    "end": "2004500"
  },
  {
    "text": "JUSTIN SOLOMON: Thank you. OK. I can't help but share that,\non our instructor chat,",
    "start": "2004500",
    "end": "2010940"
  },
  {
    "text": "Erik was texting that\nhe was going to be-- he was somehow nervous\nthat the applied guy would have all of the cool\nstuff to show off,",
    "start": "2010940",
    "end": "2016910"
  },
  {
    "text": "and now I feel totally boring. [LAUGHING] Right.",
    "start": "2016910",
    "end": "2023090"
  },
  {
    "text": "Yeah. We have three different geometry\ninstructors in this class. In this class, I think we\nhave many different flavors",
    "start": "2023090",
    "end": "2031039"
  },
  {
    "text": "of geometry that are\nkind of represented in this room here, from\nmechanical engineering, to theory plus lots\nof other cool stuff,",
    "start": "2031040",
    "end": "2037460"
  },
  {
    "text": "to whatever it is that I do. I'm a professor, also, in\nCSAIL, and lead a group",
    "start": "2037460",
    "end": "2043730"
  },
  {
    "text": "that studies slightly more\napplied geometry problems, in some sense, and in\nCSAIL, we kind of cross",
    "start": "2043730",
    "end": "2051350"
  },
  {
    "text": "a lot of boundaries-- actually,\ncloser to the math department than to the theory group\nand computer science,",
    "start": "2051350",
    "end": "2057899"
  },
  {
    "text": "which I would argue is largely\na historical artifact rather than anything interesting\nabout computer science or math.",
    "start": "2057900",
    "end": "2065719"
  },
  {
    "text": "Continuing in our whirlwind tour\nof interesting geometry classes here at MIT, I have some more\nfun things to add to the list.",
    "start": "2065719",
    "end": "2073226"
  },
  {
    "text": "And we'll introduce some of\nthe ideas in the next couple of slides here. So normally, every\nfall, I teach 6.837,",
    "start": "2073227",
    "end": "2081379"
  },
  {
    "start": "2080000",
    "end": "2466000"
  },
  {
    "text": "which is the introduction\nto computer graphics course. In fact, my background was\nworking in an animation studio",
    "start": "2081380",
    "end": "2087109"
  },
  {
    "text": "for a little bit of time, and\ngot one movie credit out of it until they changed the\nstandards for movie credits,",
    "start": "2087110",
    "end": "2093049"
  },
  {
    "text": "and then that stopped happening. But in any event, if you\nwatch-- what's that movie-- Up, with the old man.",
    "start": "2093050",
    "end": "2098859"
  },
  {
    "text": "If you hit pause at\njust the right moment, you can find me right above\nthe list of babies that were born during production.",
    "start": "2098860",
    "end": "2105800"
  },
  {
    "text": "But in any event-- although computer\ngraphics might not sound like an\nalgorithmic discipline, I'll try to convince you\nguys that, in some sense,",
    "start": "2105800",
    "end": "2112963"
  },
  {
    "text": "you could take just about\nanybody in our department, have them teach 6.006, and\ngive a similar talk that, like, the material that you've\nencountered in this course",
    "start": "2112963",
    "end": "2120200"
  },
  {
    "text": "is going to be\nrelevant to your life. The other course that I teach\nthat might be of interest--",
    "start": "2120200",
    "end": "2125809"
  },
  {
    "text": "and actually, is a little\nmore theoretically flavored-- that I teach is 6.838.",
    "start": "2125810",
    "end": "2131119"
  },
  {
    "text": "So since Erik so kindly put\nmy name on the board here, I guess I can draw\nThe So the main object",
    "start": "2131120",
    "end": "2136730"
  },
  {
    "text": "of interest in 6.838\nis a particular thing called the simplicial complex. ",
    "start": "2136730",
    "end": "2147599"
  },
  {
    "text": "Usually, in 6.006,\nwe spend a lot of time thinking about graphs. Let me draw you a graph.",
    "start": "2147600",
    "end": "2153930"
  },
  {
    "text": "So I'm going to take a\nsquare and subdivide it. And now, let's say I put\nedges diagonally like that.",
    "start": "2153930",
    "end": "2164089"
  },
  {
    "text": "Now, in 6.006, this\nthing is just a bunch of nodes connected by edges.",
    "start": "2164090",
    "end": "2169890"
  },
  {
    "text": "In fact, if I took this edge and\nI moved it down or something, it would be the same graph. But of course, in a lot of\ncomputer graphics applications,",
    "start": "2169890",
    "end": "2177420"
  },
  {
    "text": "this thing also looks an\nawful lot like a square. And the reason is\nthat, of course,",
    "start": "2177420",
    "end": "2182890"
  },
  {
    "text": "the graph here contains\ntriangles inside of it. And so for instance,\nmaybe I think of my graph",
    "start": "2182890",
    "end": "2189720"
  },
  {
    "text": "as a collection of vertices,\na collection of edges. This is the sort of\nnotation we've seen before. And then I add a third\nthing to my description,",
    "start": "2189720",
    "end": "2198070"
  },
  {
    "text": "which is a set of triplets. That's a set of triangles here. And we can take a\nlot of the algorithms",
    "start": "2198070",
    "end": "2203190"
  },
  {
    "text": "that we've talked\nabout in this class and extend it to this case. For example, here's a\ndeceptively annoying one.",
    "start": "2203190",
    "end": "2210510"
  },
  {
    "text": "Let's say that I want the\nshortest path between two vertices of my graph. We certainly have learned\nDijkstra's algorithm.",
    "start": "2210510",
    "end": "2217890"
  },
  {
    "text": "That's one technique to do that. And indeed, common practice\nin computer graphics, which is shameful, is\non your triangle mesh,",
    "start": "2217890",
    "end": "2224760"
  },
  {
    "text": "if you want the shortest path\nbetween two vertices, run Dijkstra's algorithm\non the edges.",
    "start": "2224760",
    "end": "2230792"
  },
  {
    "text": "And let's see if that\nworks really quick. Let's say that I want the\nshortest path between-- and, by the way, I'm going to\nassume the length of my edges",
    "start": "2230792",
    "end": "2237120"
  },
  {
    "text": "are the lengths as I've\ndrawn them on the board here. So it's like 1, 1,\nsquare root of 2.",
    "start": "2237120",
    "end": "2242640"
  },
  {
    "text": "OK. So let's say I want the shortest\npath between the bottom left and the upper right. If I run Dijkstra's algorithm,\nwe're in good shape, right?",
    "start": "2242640",
    "end": "2248627"
  },
  {
    "text": "We get-- I'll let you do\nthe computations at home. You'll get the path\nthat is these two edges.",
    "start": "2248627",
    "end": "2255840"
  },
  {
    "text": "But here's a really\nannoying thing. Let's say, instead, I\nwanted the shortest path from the upper left\nto the lower right.",
    "start": "2255840",
    "end": "2264840"
  },
  {
    "text": "If I run Dijkstra's algorithm\non this triangulated square, what's going to be\nthe shortest path?",
    "start": "2264840",
    "end": "2271820"
  },
  {
    "text": "Yeah. In fact, there's\na bunch of them. One of them might go all\nthe way down, and then all the way to the right.",
    "start": "2271820",
    "end": "2277238"
  },
  {
    "text": "What's the length of this path? 1, 2, 3, 4. Is that the length\nof the shortest path?",
    "start": "2277238",
    "end": "2282700"
  },
  {
    "text": "Well, probably not. Well, we would like our shortest\npath to do something like that.",
    "start": "2282700",
    "end": "2288140"
  },
  {
    "text": "But graphs don't know\nhow to talk to triangles. And this is going\nto be a problem.",
    "start": "2288140",
    "end": "2293210"
  },
  {
    "text": "In fact, it wasn't until\nfairly recently [INAUDIBLE] history terms that we were\nable to kind of work out",
    "start": "2293210",
    "end": "2298630"
  },
  {
    "text": "the correct algorithm\nfor the shortest path in a triangulated\ndomain like this. And that's the runtime\nthat we would expect.",
    "start": "2298630",
    "end": "2304700"
  },
  {
    "text": "This is called MMP. I'm guessing Erik and\nJason could do a better",
    "start": "2304700",
    "end": "2309940"
  },
  {
    "text": "job describing it than I can. But the basic idea\nof the MMP algorithm actually is a really--",
    "start": "2309940",
    "end": "2315220"
  },
  {
    "text": "happens to be a nice\nextension of the way that we taught Dijkstra's\nalgorithm in 6.006, because they really do\nkeep track of these level",
    "start": "2315220",
    "end": "2322160"
  },
  {
    "text": "sets of the distance function. But now, the level\nsets have to-- oops-- have to window\nand edge like that",
    "start": "2322160",
    "end": "2328870"
  },
  {
    "text": "when I compute shortest path,\nwhich is a giant headache. This is one of these\nalgorithms that was known in theory about 10\nyears before anybody bothered",
    "start": "2328870",
    "end": "2335920"
  },
  {
    "text": "to implement it in a way that\nthey could convince themselves it ran in n log n time.",
    "start": "2335920",
    "end": "2341170"
  },
  {
    "text": "And nowadays, there's a cottage\nindustry in computer graphics research papers to\nimplement this and then speed it up in different ways.",
    "start": "2341170",
    "end": "2347350"
  },
  {
    "text": "And sadly, the reality is that\na different algorithm that we cover in 6.838 called\nfast marching-- which doesn't actually\ngive you the shortest path,",
    "start": "2347350",
    "end": "2354100"
  },
  {
    "text": "but some approximation thereof-- is faster, easier to use, and\nbasically indistinguishable.",
    "start": "2354100",
    "end": "2360820"
  },
  {
    "text": "In any event, in\n6.838, we kind of have an interesting\ndual-mindset.",
    "start": "2360820",
    "end": "2368410"
  },
  {
    "text": "We'll talk about a\nlot of algorithms that look like what we've done\nin whatever this class is-- 6.006.",
    "start": "2368410",
    "end": "2375180"
  },
  {
    "text": "But at the same time, start to\nhave a more geometric flavor, and we don't worry quite\nas much about [INAUDIBLE]..",
    "start": "2375180",
    "end": "2381013"
  },
  {
    "text": "So in our computation\nmodel, oftentimes, we're kind of OK with real\nnumbers, because that's not where the headache is. And of course, when you\nwrite code in this class,",
    "start": "2381013",
    "end": "2387888"
  },
  {
    "text": "you use double-precision\nfloating-point. If you're more responsible, like\nin Jason's previous lecture, you should probably keep track\nof the number of operations",
    "start": "2387888",
    "end": "2395109"
  },
  {
    "text": "to make sure that\nyour error is counted. But I'm not sure that we\nreally bother with that.",
    "start": "2395110",
    "end": "2400390"
  },
  {
    "text": "In any event, this allows us\nto have two different mindsets. There's one mindset,\nwhich is discrete.",
    "start": "2400390",
    "end": "2406840"
  },
  {
    "text": "There's another mindset,\nwhich is smooth. We think about understanding\ngeometry, like these triangular",
    "start": "2406840",
    "end": "2412270"
  },
  {
    "text": "domains, as an approximation\nof a smooth surface. And then we might want to do\nstuff like compute curvature",
    "start": "2412270",
    "end": "2417350"
  },
  {
    "text": "and so on, which is really\nassociated with computing derivatives, which\nof course, we'll have on these kinds\nof simplicial objects.",
    "start": "2417350",
    "end": "2423400"
  },
  {
    "text": "And that leads to this really\nfun area of math and computer science, whatever, called\ndiscrete differential",
    "start": "2423400",
    "end": "2428890"
  },
  {
    "text": "geometry, which sounds like\na contradiction in terms. And it's something that we\ncovered in quite some detail",
    "start": "2428890",
    "end": "2434635"
  },
  {
    "text": "in this course. So we build up, all of calculus,\nthat the only calculations you're left to do\nare on the vertices",
    "start": "2434635",
    "end": "2440530"
  },
  {
    "text": "and edges and triangles\nof a triangle mesh. And get pretty far, including\nsome constructions of topology,",
    "start": "2440530",
    "end": "2446829"
  },
  {
    "text": "like the Duran\ncomplex, and so on. I would argue, actually, if\nyou take our course and then",
    "start": "2446830",
    "end": "2451990"
  },
  {
    "text": "the differential\ngeometry courses in that department,\nsomehow, some of the indices and headaches that you often\nencounter in that world",
    "start": "2451990",
    "end": "2458950"
  },
  {
    "text": "are much more\nconcrete when you try to make them work on a mesh. In any event, I think I've\nalready spent all of my time.",
    "start": "2458950",
    "end": "2464320"
  },
  {
    "text": "I can tell you a little bit\nabout research in our group. I really lead kind of a weird,\nextremely [INAUDIBLE] group,",
    "start": "2464320",
    "end": "2472250"
  },
  {
    "start": "2466000",
    "end": "2559000"
  },
  {
    "text": "where some of our students are\nessentially theory students-- touch your keyboard. I'm sorry.",
    "start": "2472250",
    "end": "2477560"
  },
  {
    "text": "It was a reflex. But it was fast. All right. So we have some students\nwhose background",
    "start": "2477560",
    "end": "2483650"
  },
  {
    "text": "is in math, other\nones that we're in autonomous driving\nindustry and decided to come back and\nwork in research.",
    "start": "2483650",
    "end": "2491568"
  },
  {
    "text": "Because of that, we have\nthis extremely broad set of research problems,\neverything from the sort of classic machine learning\nproblems you might encounter",
    "start": "2491568",
    "end": "2498829"
  },
  {
    "text": "in geometry world-- like if\nI have a self-driving car and I want to identify\npedestrians and other cars",
    "start": "2498830",
    "end": "2504950"
  },
  {
    "text": "on the road in an efficient\nand accurate fashion. By the way, part of\nthat is machine learning",
    "start": "2504950",
    "end": "2511010"
  },
  {
    "text": "and deep whatever, but\nthere's another part, which is algorithms. Because actually, what comes\ninto your LiDAR scanner",
    "start": "2511010",
    "end": "2516559"
  },
  {
    "text": "is on the order of\n[INAUDIBLE] with points and some minuscule\nfraction of time. And time complexity of\nyour learning algorithm",
    "start": "2516560",
    "end": "2524119"
  },
  {
    "text": "actually is really\ncritical to get it right, and something that there are a\nlot of open problems right now, because it's really not\ncompatible with the hardware",
    "start": "2524120",
    "end": "2531560"
  },
  {
    "text": "architecture that\nthese cars often use. We also look at [INAUDIBLE]\ngeometry problems,",
    "start": "2531560",
    "end": "2537430"
  },
  {
    "text": "like if I give you data, can\nI find a geometric structure? So it's a classic example of\nnatural language processing.",
    "start": "2537430",
    "end": "2544550"
  },
  {
    "text": "When we use words like near\nand far, in terms of semantics and meaning, all the time.",
    "start": "2544550",
    "end": "2549930"
  },
  {
    "text": "The question is, can we actually\nfind an embedded of our word data into a geometric\nspace to facilitate",
    "start": "2549930",
    "end": "2556819"
  },
  {
    "text": "the statistical algorithms\nthat we care about? And of course, we apply geometry\nto lots of practical problems,",
    "start": "2556820",
    "end": "2562819"
  },
  {
    "text": "everything from meshing\nand scientific computing, which I think is sort\nof a classic one--",
    "start": "2562820",
    "end": "2567920"
  },
  {
    "text": "in fact, I think we're the first\ngroup that sort of enumerated all of the cool things that may\nhappen to decahedral meshes,",
    "start": "2567920",
    "end": "2574170"
  },
  {
    "text": "which is this\nbottom figure here. I should show this to people. There's some fun things\nto look at there.",
    "start": "2574170",
    "end": "2579194"
  },
  {
    "text": "To other practical\nproblems, like taking-- Erik took a zebra and folded it. We can take a zebra and move its\ntexture onto a cat or a pig--",
    "start": "2579194",
    "end": "2588050"
  },
  {
    "text": "or, actually, off the\nside of the screen. But if we don't move the paper,\n[INAUDIBLE] for the 3D scan of what it might [INAUDIBLE].",
    "start": "2588050",
    "end": "2595160"
  },
  {
    "text": "In any event, in my five\nminutes remaining here, I thought I would dig into a\nlittle bit of detail of two--",
    "start": "2595160",
    "end": "2602548"
  },
  {
    "text": "or maybe one application,\ndepending on when Jason and Erik get bored. And essentially, my\nmessage for you guys",
    "start": "2602548",
    "end": "2609200"
  },
  {
    "text": "is, of course, [INAUDIBLE]. I'm not really a\ncentral CS theory group",
    "start": "2609200",
    "end": "2614660"
  },
  {
    "text": "member here at MIT. But unfortunately for you\nguys, 6.006 is unavoidable.",
    "start": "2614660",
    "end": "2619970"
  },
  {
    "text": "Even if you want to go into\ndeep learning, statistics, whatever-- data science-- you're going to encounter\nthe material that you've",
    "start": "2619970",
    "end": "2625375"
  },
  {
    "text": "seen in this course. And in fact, it's really\nthe bread and butter of just about everything\neverybody does here",
    "start": "2625375",
    "end": "2631549"
  },
  {
    "text": "in this Data Center. So then, I'll give you two\nquick examples, one of which lifted from my teaching,\none from my research.",
    "start": "2631550",
    "end": "2639530"
  },
  {
    "start": "2636000",
    "end": "2728000"
  },
  {
    "text": "If you continue\nwith me next fall, we'll teach 6.837, which is\nthe Intro to Computer Graphics",
    "start": "2639530",
    "end": "2645230"
  },
  {
    "text": "course. One thing that's always\namazing to students is, these, algorithms\nthat produce these really beautiful\nimages, can fit in about 10,",
    "start": "2645230",
    "end": "2651680"
  },
  {
    "text": "20 lines of code. So really, this is\ntotally facetious, because if you want\nthose beautiful images",
    "start": "2651680",
    "end": "2657380"
  },
  {
    "text": "and you use those\n20 lines of code, you'll be waiting until\nthe death of the universe to actually compute\nthese things.",
    "start": "2657380",
    "end": "2663740"
  },
  {
    "text": "But in any event, one nice\none for rendering-- so drawing a bunch of\nshapes [INAUDIBLE],, something called ray casting,\nor its better known cousin,",
    "start": "2663740",
    "end": "2672290"
  },
  {
    "text": "ray tracing. Typically, the difference\nis whether your rays can bounce off of the surface\nand have a secondary thing.",
    "start": "2672290",
    "end": "2678830"
  },
  {
    "text": "Right. Here's the ray\ncasting algorithm. Let's say I have a scene built\nout of spheres and cubes.",
    "start": "2678830",
    "end": "2684560"
  },
  {
    "text": "I'm going to have a for\nloop over every pixel on the computer screen. For every pixel,\nI've got to discover",
    "start": "2684560",
    "end": "2689569"
  },
  {
    "text": "what color that should be. So I shoot a ray from my\neyeball through that pixel and find the first\nobject that it runs into.",
    "start": "2689570",
    "end": "2697329"
  },
  {
    "text": "It's not so hard to\nintersect a line of a sphere or a line of a cube. So what is that algorithm?",
    "start": "2697330",
    "end": "2702370"
  },
  {
    "text": "I've given it to you\non the screen here. Not too bad to think about. And I think you guys\nare all extremely well",
    "start": "2702370",
    "end": "2708290"
  },
  {
    "text": "equipped to analyze\nthe runtime of this, which is roughly\nthe number of pixels times the number of objects.",
    "start": "2708290",
    "end": "2714410"
  },
  {
    "text": "Because for every\npixel, I've got to decide what object the ray\nout of my eyeball hits first.",
    "start": "2714410",
    "end": "2719440"
  },
  {
    "text": "So I need a for loop\nover [INAUDIBLE].. Make sense? Cool. So let's look at a\nbasic rendering problem.",
    "start": "2719440",
    "end": "2727590"
  },
  {
    "text": "In fact, Erik already secretly\nsnuck this one in here. There's a very famous 3D model\ncalled the Stanford bunny.",
    "start": "2727590",
    "end": "2734900"
  },
  {
    "start": "2728000",
    "end": "2817000"
  },
  {
    "text": "The Stanford bunny is\nactually a great example of a simplicial complex-- in fact, a manifold one,\ntriangulated surface.",
    "start": "2734900",
    "end": "2742190"
  },
  {
    "text": "Actually, I'm not sure it's\nmanifold in its original form. But usually, it is. And this innocent-looking,\nextremely famous 3D model",
    "start": "2742190",
    "end": "2750540"
  },
  {
    "text": "is actually quite pernicious. It's composed of\n69,000 triangles.",
    "start": "2750540",
    "end": "2756480"
  },
  {
    "text": "And if I wanted\n1080p-- like a high def rendering of my triangle--\nthen, of course,",
    "start": "2756480",
    "end": "2762630"
  },
  {
    "text": "there's two million\npixels on the screen. So if we look at our\nbig O expression, roughly, our\ncomputation time scales",
    "start": "2762630",
    "end": "2768360"
  },
  {
    "text": "like the product of\nthose two big numbers. So just to render\nthis ugly gray bunny takes me a pretty\nlarge amount of time.",
    "start": "2768360",
    "end": "2775810"
  },
  {
    "text": "And in fact, the reality--\nby the way, the bunny is this famous test case\nin computer graphics, so if you take my class, you'll\nbe rendering buddies all day.",
    "start": "2775810",
    "end": "2783180"
  },
  {
    "text": "The reality is,\nwe don't want just grayed, flat-shaded bunnies. We want bunnies that are\ntransparent, and reflecting",
    "start": "2783180",
    "end": "2789570"
  },
  {
    "text": "stuff, and I shoot my\nbunny with a bullet and shatters into a\nmillion pieces, and all of these cool things.",
    "start": "2789570",
    "end": "2795370"
  },
  {
    "text": "So of course that,\nray casting algorithm, with each one of these new\ngraphics features I add, only adds to the time\ncomplexity of the technique",
    "start": "2795370",
    "end": "2803700"
  },
  {
    "text": "that I implement. So pretty quickly-- and indeed,\nif you write your own ray tracer at home, which I\nstrongly encourage you to do--",
    "start": "2803700",
    "end": "2809970"
  },
  {
    "text": "what you will discover\nis that a [INAUDIBLE] would be the technical phrase.",
    "start": "2809970",
    "end": "2815083"
  },
  {
    "text": "What is our way out of this? Well, if you take\nit 837, you'll see that our way out\nof these problems,",
    "start": "2815083",
    "end": "2820770"
  },
  {
    "start": "2817000",
    "end": "3497000"
  },
  {
    "text": "in graphics, is data\nstructures and algorithms. It's completely unavoidable. For instance, obviously, we\nspent quite a bit of time",
    "start": "2820770",
    "end": "2827580"
  },
  {
    "text": "in this course talking\nabout AVL trees. In 837, we'll spend a big\nchunk of our tours talking",
    "start": "2827580",
    "end": "2833970"
  },
  {
    "text": "about space partitioning trees. Here-- I actually forgot\nwhat kind of tree this is.",
    "start": "2833970",
    "end": "2840330"
  },
  {
    "text": "I think it's a KD tree. Doesn't matter. In any event, one\nthing I could do",
    "start": "2840330",
    "end": "2846450"
  },
  {
    "text": "is take all of the\ntriangles of my bunny, and I could put the entire\nbunny in a giant cube",
    "start": "2846450",
    "end": "2853230"
  },
  {
    "text": "with the property that the\ncube is outside the bunny. Let's say I cast a ray and the\nray doesn't touch the cube.",
    "start": "2853230",
    "end": "2859810"
  },
  {
    "text": "Can the ray touch the bunny? No, right? It zings right past it. So suddenly, I just saved myself\na lot of computation time,",
    "start": "2859810",
    "end": "2866680"
  },
  {
    "text": "right? I don't have to iterate over\nall the triangles inside of the body to see whether\nthey hit the ray or not,",
    "start": "2866680",
    "end": "2871942"
  },
  {
    "text": "because I already\nconvinced myself, by this conservative\ntest, that I didn't hit even the bounding\nbox of the whole bunny.",
    "start": "2871942",
    "end": "2879830"
  },
  {
    "text": "Well, that's sort of a\nnice order 1 speed-up. But depending on\nhow big the bunny is relative to the size\nof my rendered image,",
    "start": "2879830",
    "end": "2885650"
  },
  {
    "text": "that might not be a super\nuseful efficiency test. But of course, what could I do?",
    "start": "2885650",
    "end": "2890760"
  },
  {
    "text": "I could take the box\ncontaining the bunny, I could slice it in half,\nand now it's saying, does my ray hit the front\nor the back of the bunny?",
    "start": "2890760",
    "end": "2897680"
  },
  {
    "text": "Or maybe both. That's where you've got to--\nthat's where things get gnarly. And so on. So now you have this nice\nrecursive tree structure,",
    "start": "2897680",
    "end": "2904730"
  },
  {
    "text": "where I keep taking the\nbox containing my bunny and chopping it in\nhalf and placing-- in some sense, usually,\nthe triangles--",
    "start": "2904730",
    "end": "2912750"
  },
  {
    "text": "maybe not the leaves of my\ntree, but [INAUDIBLE] that's probably good enough. You get a structure like what\nyou see on the screen here.",
    "start": "2912750",
    "end": "2919790"
  },
  {
    "text": "And why should you do that? Well, remember, it takes pn time\nto render my image of my bunny normally.",
    "start": "2919790",
    "end": "2925849"
  },
  {
    "text": "Well, now, the\npicture is actually misleadingly suggestive. But you might think that,\nmaybe, it takes roughly--",
    "start": "2925850",
    "end": "2933170"
  },
  {
    "text": "remember, n is the number\nof objects in my scene-- p log n time to\nrender my bunny now,",
    "start": "2933170",
    "end": "2938750"
  },
  {
    "text": "because I can kind of\ntraverse the tree of objects in my scene. Of course, notice, I put\na question mark here.",
    "start": "2938750",
    "end": "2945500"
  },
  {
    "text": "And the devil's in\nthe details here. In fact, I think computer\ngraphics people often believe that their rendering\nalgorithm takes p log n time.",
    "start": "2945500",
    "end": "2953580"
  },
  {
    "text": "That's often not\npossible, although kind of an interesting\nquestion, which is, the heuristics they use for\nbuilding these sorts of trees",
    "start": "2953580",
    "end": "2961370"
  },
  {
    "text": "often do, on average,\ngive them log n time. And so there's\nsomething about the data that's making this problem\neasier than it might seem.",
    "start": "2961370",
    "end": "2968733"
  },
  {
    "text": "So we'll dig into that a little\nbit in the graphics class. Of course, you're not going\nto proof as many bounds as you might in a theory course.",
    "start": "2968733",
    "end": "2974914"
  },
  {
    "text": "But we're certainly\nbuilding on the intuition that we've seen in this class\nto build on practical data structures.",
    "start": "2974915",
    "end": "2980023"
  },
  {
    "text": "And these data structures\nappear everywhere in computer graphics. For instance, directed\nacyclic graphs",
    "start": "2980023",
    "end": "2987619"
  },
  {
    "text": "appear all over the place in\ncomputer graphics literature to describe 3D scenes. For example, this classroom\nis a stark reminder",
    "start": "2987620",
    "end": "2995450"
  },
  {
    "text": "of why we need DAGs\nand computer graphics, because we have all of\nthese empty seats here,",
    "start": "2995450",
    "end": "3000579"
  },
  {
    "text": "and they're all\ncopies of one another. So would it make sense for\nme to store however many,",
    "start": "3000580",
    "end": "3006310"
  },
  {
    "text": "like, 100 3D molds\nof the same chair? Probably not. So instead, what do I do?",
    "start": "3006310",
    "end": "3012110"
  },
  {
    "text": "I store one instance of a chair,\nand then some instructions on how to tile it\ninto my entire scene.",
    "start": "3012110",
    "end": "3018840"
  },
  {
    "text": "One way that I can\ndo that is to think of there being a\nnode in a graph which knows how to draw one chair.",
    "start": "3018840",
    "end": "3025289"
  },
  {
    "text": "And now, I can have a\nbunch of different nodes in my scene for all of\nthe instances of the chair and then store a different\ntransformation for each one.",
    "start": "3025290",
    "end": "3032032"
  },
  {
    "text": "So if you think about\nthe graph structure here, each of those ones is going to\npoint into the same 3D model",
    "start": "3032032",
    "end": "3037080"
  },
  {
    "text": "of the chair for rendering. And that makes a directed\nacyclic graph structure called a scene graph, which\nwe'll spend quite a bit of time",
    "start": "3037080",
    "end": "3043980"
  },
  {
    "text": "talking about in 837, how\nto traverse and construct all that good stuff.",
    "start": "3043980",
    "end": "3049950"
  },
  {
    "text": "And there are lots of\ndifferent models of computation in that universe, as well. Your graphics card is\na very specific kind",
    "start": "3049950",
    "end": "3058500"
  },
  {
    "text": "of parallel processor\nthat's kind of like Lucille Ball on the conveyor belt,\nhammering at the same object",
    "start": "3058500",
    "end": "3063960"
  },
  {
    "text": "over and over again. But if you ask it to do\nanything other than the one thing it knows how to do to\na bunch of data at a time,",
    "start": "3063960",
    "end": "3069490"
  },
  {
    "text": "then all of your computation\ngrinds to a halt. This is called Single\nInstruction Multiple Data parallelism, SIMD.",
    "start": "3069490",
    "end": "3076350"
  },
  {
    "text": "Numerical algorithms\nmatter a lot for things like\nfluid simulation. And approximation algorithms\nare quite critical, too.",
    "start": "3076350",
    "end": "3084420"
  },
  {
    "text": "In computer graphics,\nthe complexity is kind of interesting,\nbecause of course, your eyeball",
    "start": "3084420",
    "end": "3089610"
  },
  {
    "text": "is sensitive to\nabout 29.97 frames per second worth of material.",
    "start": "3089610",
    "end": "3095880"
  },
  {
    "text": "You can choose that time to\ndo really well-rendering one object, but then you take out\nof the time rendering something",
    "start": "3095880",
    "end": "3101700"
  },
  {
    "text": "else. There's kind of an\ninteresting conservation law that you have to\nbalance when you solve",
    "start": "3101700",
    "end": "3106715"
  },
  {
    "text": "these kinds of problems, which\nis an interesting balance, now, between complexity and\nruntime of your algorithm",
    "start": "3106715",
    "end": "3112920"
  },
  {
    "text": "and perception. What things can you get away\nwith when you draw a scene? And maybe I can do tons\nof extra computation",
    "start": "3112920",
    "end": "3119492"
  },
  {
    "text": "to get that extra shadow,\nbut it's just not worth it.  I'll quickly sketch out\nanother completely different",
    "start": "3119492",
    "end": "3126770"
  },
  {
    "text": "application of the\nmaterial that we've covered in 6.006 from my own research.",
    "start": "3126770",
    "end": "3132450"
  },
  {
    "text": "Again, just like Erik-- I guess, in a funny way,\nboth of our groups, I think, are kind of broad in terms of\nsubject material, rather than--",
    "start": "3132450",
    "end": "3138620"
  },
  {
    "text": "some of our colleagues\nhave really laser focus on one topic or another.",
    "start": "3138620",
    "end": "3143780"
  },
  {
    "text": "Another Research area that\nI have sort of backed into is the area of\npolitical redistricting.",
    "start": "3143780",
    "end": "3149780"
  },
  {
    "text": "This is relevant in\nthe United States. Recently, I've been\nreading this great proposal about other countries, which\nis really interesting, how",
    "start": "3149780",
    "end": "3155432"
  },
  {
    "text": "they do this stuff. In the US, when we vote\nfor people in Congress--",
    "start": "3155432",
    "end": "3160700"
  },
  {
    "text": "by the way, not\nnecessarily for presidents. This is a common misconception. But certainly for\nCongress, your state",
    "start": "3160700",
    "end": "3168470"
  },
  {
    "text": "is divided into little\nregions, each of which elects one member of the House. And there's sort of a\nsubtle problem if you're not",
    "start": "3168470",
    "end": "3176975"
  },
  {
    "text": "used to thinking\nabout it, or one that's staring you in the\nface and screaming, depending on how often you read\nthe news and politics.",
    "start": "3176975",
    "end": "3183823"
  },
  {
    "text": "There is an issue\ncalled gerrymandering, where your legislature draws the\nlines for what area on the map",
    "start": "3183823",
    "end": "3189030"
  },
  {
    "text": "elects a member of Congress. And depending on how\nyou draw the lines, you can engineer\ndifferent results",
    "start": "3189030",
    "end": "3195420"
  },
  {
    "text": "for who's likely to get elected. So for instance, maybe\nthere's some minority. I can cluster them all together\ninto one voting district.",
    "start": "3195420",
    "end": "3201690"
  },
  {
    "text": "Then they will only\nget the opportunity to elect one person. But maybe, if I divide the\nspace where they live into two,",
    "start": "3201690",
    "end": "3208770"
  },
  {
    "text": "I managed to engineer\ntwo districts with a high probability\nof electing somebody with their political\ninterests in mind.",
    "start": "3208770",
    "end": "3216270"
  },
  {
    "text": "It turns out that\npolitical redistricting, in a broad sense, is a great\nproblem, computationally.",
    "start": "3216270",
    "end": "3221430"
  },
  {
    "text": "Even if you're a totally\nheartless theorist, there are some really\nfun problems here. So for example,\nthe state of Iowa--",
    "start": "3221430",
    "end": "3226740"
  },
  {
    "text": "we all pick on Iowa because\nit has a unique law, which is that districts have to be\nbuilt out of counties, which",
    "start": "3226740",
    "end": "3232530"
  },
  {
    "text": "are much larger than\nthe typical census unit, so it computationally is easier. But even in Iowa,\nwhich is a giant grid--",
    "start": "3232530",
    "end": "3239813"
  },
  {
    "text": "with the exception of one\nshift in the middle, which is fascinating to me-- I know [INAUDIBLE], fun fact.",
    "start": "3239813",
    "end": "3246870"
  },
  {
    "text": "Literally, people were\nmaking the map of Iowa, and they worked from the\nbottom up and the top down, and it meets in the middle\nand their grids were shifted,",
    "start": "3246870",
    "end": "3253260"
  },
  {
    "text": "and now we're stuck with that. And it has an interesting effect\non the topology of the graph, because it looks like\nsquares, but then there's",
    "start": "3253260",
    "end": "3258908"
  },
  {
    "text": "triangles in the middle. But in any event,\neven though there's only 99 counties\nin four districts,",
    "start": "3258908",
    "end": "3265530"
  },
  {
    "text": "there's approximately\nquintillions of possible ways you can divide that state into\nfour contiguous districts that",
    "start": "3265530",
    "end": "3271620"
  },
  {
    "text": "satisfy the rules as they were-- at least, if you read the\ncode literally in the law.",
    "start": "3271620",
    "end": "3278472"
  },
  {
    "text": "It seems like\ncomputers are useful, but unfortunately, it's\na little subtle how. For instance, there's no\nsingle \"best\" districting",
    "start": "3278472",
    "end": "3284730"
  },
  {
    "text": "plan out there. I can't think of a single\nstate with a law that gives you an objective function, similar\nto whatever cute characters",
    "start": "3284730",
    "end": "3294060"
  },
  {
    "text": "that we've had in 6.006. They often have very\nclear objectives in life, but unfortunately,\nredistricting, that's",
    "start": "3294060",
    "end": "3300060"
  },
  {
    "text": "very rarely the case. You have to balance\ncontiguity, population balance, compactness, all of\nthese different things.",
    "start": "3300060",
    "end": "3307080"
  },
  {
    "text": "Reality check number two\nis that, even if somebody did give you an\nobjective function, for just about any interesting\nobjective function,",
    "start": "3307080",
    "end": "3313869"
  },
  {
    "text": "it's very obvious that\ngenerating the best possible districting plan is NP-hard.",
    "start": "3313870",
    "end": "3320190"
  },
  {
    "text": "And by the way, it\ndoesn't even matter, because the law doesn't\nsay that computers have to draw the best districts.",
    "start": "3320190",
    "end": "3326340"
  },
  {
    "text": "Even if P equals NP\nreally could extract the best possible districting\nplan using an algorithm,",
    "start": "3326340",
    "end": "3332453"
  },
  {
    "text": "it doesn't mean you have\nto use it, at least the way the law's written now. Interestingly, this is not true\nin certain parts of Mexico,",
    "start": "3332453",
    "end": "3338860"
  },
  {
    "text": "where they actually make\nyou compare your districting plan against a\ncomputer-generated one, which is philosophically\nreally interesting,",
    "start": "3338860",
    "end": "3344490"
  },
  {
    "text": "although in practice, it\ndoesn't work terribly well.  Our researchers studied analysis\nof districting plans instead.",
    "start": "3344490",
    "end": "3352233"
  },
  {
    "text": "So instead of running a\npiece of software that takes in your state,\ndraws your districts, and then you're done--",
    "start": "3352233",
    "end": "3357540"
  },
  {
    "text": "instead, we ask\nstatistical questions about, I propose a\ndistricting plan, what does it look like\nrelative to the space",
    "start": "3357540",
    "end": "3363870"
  },
  {
    "text": "of the possibilities? So that, of course,\nbegs the question,",
    "start": "3363870",
    "end": "3368970"
  },
  {
    "text": "what are the possibilities? So these are the connected\ngraph partitions. Meaning, you have a graph,\nand you take the vertices",
    "start": "3368970",
    "end": "3375990"
  },
  {
    "text": "and you cluster them together\nin a way where they're connected to one another. The one thing that we all agree\non-- actually, philosophically,",
    "start": "3375990",
    "end": "3382410"
  },
  {
    "text": "it's questionable why-- is that you should\nbe able to start at any point in your district\nand walk to any other one",
    "start": "3382410",
    "end": "3387780"
  },
  {
    "text": "without leaving. These days, with\nthe internet, it's not clear that that's\nactually the best criterion.",
    "start": "3387780",
    "end": "3393270"
  },
  {
    "text": "But that's a law that,\nI think, is never going to get passed\nin the near future.",
    "start": "3393270",
    "end": "3399828"
  },
  {
    "text": "Anyway, I think I'm\nout of time, so I don't think I'll walk you\nguys through the theory here. Maybe I'll leave\nit in the slides.",
    "start": "3399828",
    "end": "3405960"
  },
  {
    "text": "There's a sort of\nvery simple proof that can show that, at least the\nvery simplest thing you might",
    "start": "3405960",
    "end": "3411029"
  },
  {
    "text": "think of for analyzing\nyour districting plan, which is to say,\nyou propose a plan, and now, I want your\nplan to be at least as",
    "start": "3411030",
    "end": "3417810"
  },
  {
    "text": "good, under some axis, as\nit's a randomly drawn one from the space of all possible\nconnected partitions--",
    "start": "3417810",
    "end": "3423810"
  },
  {
    "text": "all of the possible ways\nI could draw the lines. Well, then, it might\nbe useful to have a piece of software that\ncould just randomly draw",
    "start": "3423810",
    "end": "3430510"
  },
  {
    "text": "such a thing. So in other words,\nto draw something where the probability\nof any one partition is 1 over the number\nof partitions.",
    "start": "3430510",
    "end": "3438060"
  },
  {
    "text": "This seems innocent. In fact, there's a\nnumber of papers that claim to do things like this. But it turns out that it's\ncomputationally difficult,",
    "start": "3438060",
    "end": "3447570"
  },
  {
    "text": "assuming that you believe\nthat P doesn't equal NP. So I'll maybe leave\nsome suggestive pictures in the slide that we can--",
    "start": "3447570",
    "end": "3454440"
  },
  {
    "text": "if you guys text me, or if we\nhave a professor-student chat, I'm happy to sketch\nit out to you then.",
    "start": "3454440",
    "end": "3461160"
  },
  {
    "text": "There's a very nice,\neasy proof that reduces this to\nHamiltonian cycle, and shows you that maybe you\nshouldn't trust these tools,",
    "start": "3461160",
    "end": "3468473"
  },
  {
    "text": "as much as they're\nargued about, literally, in the Supreme Court a\ncouple of months ago. By the way, it was pretty fun.",
    "start": "3468473",
    "end": "3473849"
  },
  {
    "text": "Our expert report was referenced\nin the defense of the case last summer. And when you read\nthe discussion,",
    "start": "3473850",
    "end": "3479940"
  },
  {
    "text": "you can see the\njudges trying to talk their way around complexity. And it's an interesting,\nif somewhat dry, read.",
    "start": "3479940",
    "end": "3487677"
  },
  {
    "text": "In any event, that's\njust the starting point for our research, which\nsays that, of course, these sampling problems\nare really hard.",
    "start": "3487677",
    "end": "3493080"
  },
  {
    "text": "The questions is,\nwhat can you do? [INAUDIBLE] or not. But the real message\nhere is, of course,",
    "start": "3493080",
    "end": "3500799"
  },
  {
    "start": "3497000",
    "end": "3564000"
  },
  {
    "text": "that this course is unavoidable. Even in these extremely\napplied problems showing up in court cases or on\nyour graphics card, you still--",
    "start": "3500800",
    "end": "3507990"
  },
  {
    "text": "complexity and algorithms\nand data structures are going to come back to play.",
    "start": "3507990",
    "end": "3513230"
  },
  {
    "text": "So with that, our\nother two instructors up here for our final farewell--\nsuitably distance ourselves.",
    "start": "3513230",
    "end": "3520770"
  },
  {
    "text": "ERIK DEMAINE: So\nalgorithms are everywhere. I hope you enjoyed this class. It's been a lot of fun teaching\nyou and having you as students.",
    "start": "3520770",
    "end": "3527250"
  },
  {
    "text": "Even though you're not here\nphysically in the room, we still feel your presence. And I look forward to\nseeing you all soon.",
    "start": "3527250",
    "end": "3533680"
  },
  {
    "text": "Thanks for being a\npart of this fun thing. I want to thank our two--",
    "start": "3533680",
    "end": "3539610"
  },
  {
    "text": "my two co-instructors for an\nawesome time this semester. It's been a lot of fun\nteaching to you guys.",
    "start": "3539610",
    "end": "3546330"
  },
  {
    "text": "JASON KU: Thanks for spending\n006 with us this term. JUSTIN SOLOMON: Yeah. Thank you. And hopefully we'll\nsee you again soon. ERIK DEMAINE: Bye.",
    "start": "3546330",
    "end": "3552010"
  },
  {
    "text": "JASON KU: Bye. ",
    "start": "3552010",
    "end": "3565000"
  }
]