[
  {
    "start": "0",
    "end": "338000"
  },
  {
    "text": " PROFESSOR: So the handouts will\nbe just the problem set 8",
    "start": "0",
    "end": "8170"
  },
  {
    "text": "solutions, of which you already\nhave the first two. Remind you problem set 9 is\ndue on Friday, but we will",
    "start": "8170",
    "end": "15840"
  },
  {
    "text": "accept it on Monday if that's\nwhen you want to hand it in to Ashish. And problem set 10 I will hand\nout next week, but you won't",
    "start": "15840",
    "end": "24619"
  },
  {
    "text": "be responsible for it. You could try it if\nyou're so moved.",
    "start": "24620",
    "end": "32490"
  },
  {
    "text": "OK. We're in the middle\nof chapter 13. We've been talking about\ncapacity approaching codes.",
    "start": "32490",
    "end": "39540"
  },
  {
    "text": "We've talked about a number of\nclasses of them, low density parity check, turbo, repeat\naccumulate, and I've given you",
    "start": "39540",
    "end": "48220"
  },
  {
    "text": "a general idea of how the sum\nproduct decoding algorithm is applied to decode these codes.",
    "start": "48220",
    "end": "54580"
  },
  {
    "text": "These are all defined on graphs\nwith cycles, in the middle of which is a large\npseudo random interleaver.",
    "start": "54580",
    "end": "62329"
  },
  {
    "text": "The sum product algorithm is\ntherefore done iteratively. In general, the initial observed\ninformation comes in",
    "start": "62330",
    "end": "70400"
  },
  {
    "text": "on one side, the left side or\nthe right side, and the iterative schedule amounts to\ndoing first the left side,",
    "start": "70400",
    "end": "77880"
  },
  {
    "text": "then the right side, then the\nleft side, then the right side, until you converge,\nyou hope.",
    "start": "77880",
    "end": "84200"
  },
  {
    "text": "That was the original turbo\nidea, and that continues to be the right way to do it.",
    "start": "84200",
    "end": "90290"
  },
  {
    "text": "OK. Today, we're actually going to\ntry to do some analysis. To do the analysis, we're going\nto focus on low density",
    "start": "90290",
    "end": "98300"
  },
  {
    "text": "party check codes, which are\ncertainly far easier than",
    "start": "98300",
    "end": "104330"
  },
  {
    "text": "turbo codes to analyze,\nbecause they have such simple elements. I guess the repeat accumulate\ncodes are equally easy to",
    "start": "104330",
    "end": "111580"
  },
  {
    "text": "analyze, but maybe not as\ngood in performance. Maybe they're as good,\nI don't know.",
    "start": "111580",
    "end": "118200"
  },
  {
    "text": "No one has driven that\nas far as low density parity check codes. ",
    "start": "118200",
    "end": "123880"
  },
  {
    "text": "Also, we're going to take\na very simple channel. It's actually the channel for\nwhich most of the analysis has",
    "start": "123880",
    "end": "131110"
  },
  {
    "text": "been done, which is the Binary\nErasure Channel, where",
    "start": "131110",
    "end": "136170"
  },
  {
    "text": "everything reduces to a\none-dimensional problem, and therefore we can do things\nquite precisely.",
    "start": "136170",
    "end": "142980"
  },
  {
    "text": "But this will allow me to\nintroduce density evolution, which is the generalization of\nthis for more general channels",
    "start": "142980",
    "end": "150320"
  },
  {
    "text": "like the binary input added\nwhite Gaussian noise channel, if I manage to go fast enough.",
    "start": "150320",
    "end": "156400"
  },
  {
    "text": "I apologize today, I\ndo feel in a hurry. Nonetheless, please ask\nquestions whenever you want to",
    "start": "156400",
    "end": "163670"
  },
  {
    "text": "slow me down or just get some\nmore understanding. So, the Binary Erasure Channel\nis one of the elementary",
    "start": "163670",
    "end": "170310"
  },
  {
    "text": "channels, if you've ever taken\ninformation theory, that you look at. It has two inputs and\nthree outputs.",
    "start": "170310",
    "end": "179010"
  },
  {
    "text": "The two inputs are 0 and 1, the\noutputs are 0 and 1 or an erasure, an ambiguous output.",
    "start": "179010",
    "end": "186350"
  },
  {
    "text": "If you send a 0, you can either\nget the 0 correctly, or you could get an erasure.",
    "start": "186350",
    "end": "193030"
  },
  {
    "text": "Might be a deletion, you just\ndon't get anything. Similarly, if you send\na 1, you either",
    "start": "193030",
    "end": "198079"
  },
  {
    "text": "get a 1 or an erasure. There's no possibility of\ngetting something incorrectly. That's the key thing\nabout this channel.",
    "start": "198080",
    "end": "206870"
  },
  {
    "text": "The probability of an erasure\nis p, regardless of whether you send 0 or 1.",
    "start": "206870",
    "end": "211980"
  },
  {
    "text": "So there's a single parameter\nthat governs this channel. Now admittedly, this is not\na very realistic channel.",
    "start": "211980",
    "end": "220486"
  },
  {
    "text": "It's a toy channel in\nthe binary case. However, actually some of the\nimpetus for this development",
    "start": "220486",
    "end": "230330"
  },
  {
    "text": "was the people who were\nconsidering packet transmission on the internet.",
    "start": "230330",
    "end": "235830"
  },
  {
    "text": "And in the case of packet\ntransmission on the internet, of course, you have a long\npacket, a very non-binary",
    "start": "235830",
    "end": "242660"
  },
  {
    "text": "symbol if you like, but if you\nconsider these to be packets, then on the internet, you either\nreceive the packet",
    "start": "242660",
    "end": "248880"
  },
  {
    "text": "correctly or you fail\nto receive it. You don't receive it at all, and\nyou know it, because there",
    "start": "248880",
    "end": "256250"
  },
  {
    "text": "is an internal party check\nin each packet. So the q-ary erasure channel is\nin fact a realistic model,",
    "start": "256250",
    "end": "263220"
  },
  {
    "text": "and in fact, there's a company,\nDigital Fountain, that has been founded and is\nstill going strong as far as I",
    "start": "263220",
    "end": "271310"
  },
  {
    "text": "know, which is specifically\ndevoted to solutions for this",
    "start": "271310",
    "end": "276510"
  },
  {
    "text": "q-ary erasure channel for\nparticular kinds of scenarios on the internet where you want\nto do forward error correction",
    "start": "276510",
    "end": "283140"
  },
  {
    "text": "rather than repeat\ntransmission. And a lot of the early work on\nthe analysis of these guys--",
    "start": "283140",
    "end": "291370"
  },
  {
    "text": "Luby, Shokrollahi,\nother people-- they were some of the people\nwho focused on low density",
    "start": "291370",
    "end": "298840"
  },
  {
    "text": "party check codes immediately,\nfollowing work of Spielman and Sipser here at MIT, and said,\nOK, suppose we try this on our",
    "start": "298840",
    "end": "310110"
  },
  {
    "text": "q-ary erasure channel. And they were able to get very\nclose to the capacity of the",
    "start": "310110",
    "end": "315440"
  },
  {
    "text": "q-ary erasure channel, which\nis also 1 minus p. This is the information\ntheoretic capacity of the",
    "start": "315440",
    "end": "321230"
  },
  {
    "text": "binary channel. It's kind of obvious that it\nshould be 1 minus p, because on the average, you get 1 minus\np good bits out for",
    "start": "321230",
    "end": "329410"
  },
  {
    "text": "every bit that you send in. So the maximum rate you could\nexpect to send over this channel is 1 minus p.",
    "start": "329410",
    "end": "338100"
  },
  {
    "start": "338000",
    "end": "444000"
  },
  {
    "text": "OK.  Let's first think about maximum\nlikelihood decoding on",
    "start": "338100",
    "end": "344740"
  },
  {
    "text": "this channel. Suppose we take a word from a\ncode, from a binary code, and",
    "start": "344740",
    "end": "349979"
  },
  {
    "text": "send it through this channel,\nand we get some erasure pattern at the output.",
    "start": "349980",
    "end": "355880"
  },
  {
    "text": "So we have a subset of the\nbits that are good, and a subset that are erased\nat the output.",
    "start": "355880",
    "end": "363310"
  },
  {
    "text": "Now what does maximum likelihood\ndecoding amount to on this channel? ",
    "start": "363310",
    "end": "370630"
  },
  {
    "text": "Well, the code word that we sent\nis going to match up with",
    "start": "370630",
    "end": "375780"
  },
  {
    "text": "all the good bits\nreceived, right? So we know that there's going to\nbe at least one word in the",
    "start": "375780",
    "end": "381580"
  },
  {
    "text": "code that agrees with\nthe received sequence in the good places. ",
    "start": "381580",
    "end": "388430"
  },
  {
    "text": "If that's the only word in the\ncode that agrees with the received word in those places,\nthen we can declare it the winner, right?",
    "start": "388430",
    "end": "394900"
  },
  {
    "text": "And maximum likelihood\ndecoding succeeds. We know what the channel is, so\nwe know that all the good",
    "start": "394900",
    "end": "400130"
  },
  {
    "text": "bits have to match up\nwith the code word. But suppose there are 2 words\nin the code that match up in",
    "start": "400130",
    "end": "406120"
  },
  {
    "text": "all the good places? There's no way to decide\nbetween them, right? ",
    "start": "406120",
    "end": "414180"
  },
  {
    "text": "So basically, that's what\nmaximum likelihood decoding amounts to. You simply check how many\ncode words match the",
    "start": "414180",
    "end": "427410"
  },
  {
    "text": "received good bits. If there's only one,\nyou decode. If there's more than one, you\ncould flip a coin, but we'll",
    "start": "427410",
    "end": "435480"
  },
  {
    "text": "consider that to be a\ndecoding failure. You just don't know, so you\nthrow up your hands, you have",
    "start": "435480",
    "end": "440820"
  },
  {
    "text": "a detected decoding failure. So in the case of a linear code,\nwhat are we doing here?",
    "start": "440820",
    "end": "448860"
  },
  {
    "start": "444000",
    "end": "1513000"
  },
  {
    "text": "In the case of a linear\ncode, consider the parity check equations. We basically have n minus k\nparity check equations, and",
    "start": "448860",
    "end": "458030"
  },
  {
    "text": "we're trying to find how many\ncode sequences that solve",
    "start": "458030",
    "end": "464040"
  },
  {
    "text": "those parity check equations. So we have n minus k equations,\nn unknowns, and",
    "start": "464040",
    "end": "471350"
  },
  {
    "text": "we're basically just trying\nto solve linear equations. So that would be one\ndecoding method for",
    "start": "471350",
    "end": "477240"
  },
  {
    "text": "maximum likelihood decoding. Solve the equations. If you get a unique solution,\nyou're finished.",
    "start": "477240",
    "end": "482449"
  },
  {
    "text": "If you get a space of solutions,\nso dimension one or more, you lose.",
    "start": "482450",
    "end": "489270"
  },
  {
    "text": "OK? So we know lots of ways of\nsolving linear equations like",
    "start": "489270",
    "end": "494330"
  },
  {
    "text": "Gaussian elimination, back\npropagation/back substitution (I'm not sure exactly\nwhat it's called). ",
    "start": "494330",
    "end": "501289"
  },
  {
    "text": "That's actually what we will\nbe doing with low density parity check codes.",
    "start": "501290",
    "end": "506630"
  },
  {
    "text": "And so, decoding for the binary\nratio channel you can think of as just trying to\nsolve linear equations.",
    "start": "506630",
    "end": "513740"
  },
  {
    "text": "If you get a unique solution,\nyou win, otherwise, you fail.",
    "start": "513740",
    "end": "519839"
  },
  {
    "text": "Another way of looking at it\nin a linear code is what do",
    "start": "519840",
    "end": "525460"
  },
  {
    "text": "the good bits have to form? The erased bits have to\nbe a function of the",
    "start": "525460",
    "end": "532920"
  },
  {
    "text": "good bits, all right? In linear code, that's just\na function of where",
    "start": "532920",
    "end": "539450"
  },
  {
    "text": "the good bits are. We've run into this\nconcept before. We called it an information\nset.",
    "start": "539450",
    "end": "545366"
  },
  {
    "text": "An information set is a subset\nof the coordinates that basically determines the\nrest the coordinates.",
    "start": "545366",
    "end": "551760"
  },
  {
    "text": "If you know the bits in\nthat subset, then you know the code word. You can fill out the rest of\nthe code word through some",
    "start": "551760",
    "end": "557870"
  },
  {
    "text": "linear equation. So basically, we're going to\nsucceed if the good bits cover",
    "start": "557870",
    "end": "564500"
  },
  {
    "text": "an information set, and we're\ngoing to fail otherwise.",
    "start": "564500",
    "end": "569840"
  },
  {
    "text": "So how many bits do we need to\ncover an information set?",
    "start": "569840",
    "end": "575200"
  },
  {
    "text": "We're certainly going\nto need at least k. Now today, we're going to be\nconsidering very long codes.",
    "start": "575200",
    "end": "580440"
  },
  {
    "text": "So suppose I have a\nlong (n,k) code.",
    "start": "580440",
    "end": "585550"
  },
  {
    "text": "I have an (n,k) code, and I\ntransmit it over this channel. About how many bits are\ngoing to be erased?",
    "start": "585550",
    "end": "592915"
  },
  {
    "text": " About pn bits are going\nto be erased, or (1",
    "start": "592915",
    "end": "599400"
  },
  {
    "text": "minus p) times n. We're going to get\napproximately-- law of large numbers--",
    "start": "599400",
    "end": "605120"
  },
  {
    "text": "(1 minus p) times n unerased\nbits, and this has to be",
    "start": "605120",
    "end": "614339"
  },
  {
    "text": "clearly greater than k. OK, so with very high\nprobability, if we get more",
    "start": "614340",
    "end": "622620"
  },
  {
    "text": "than that, we'll be able to\nsolve the equations, find a unique code word.",
    "start": "622620",
    "end": "628020"
  },
  {
    "text": "If we get fewer than that,\nthere's no possible way we could solve the equations. We don't have enough left.",
    "start": "628020",
    "end": "634980"
  },
  {
    "text": "So what does this say? This says that k over n, which\nis the code rate, has to be",
    "start": "634980",
    "end": "644600"
  },
  {
    "text": "less than 1 minus p in order\nfor this maximum likelihood decoding to work with a linear\ncode over the binary erasure",
    "start": "644600",
    "end": "652480"
  },
  {
    "text": "channel, and that is consistent\nwith this. If the rate is less than 1 minus\np, then with very high",
    "start": "652480",
    "end": "660410"
  },
  {
    "text": "probability you're going\nto be successful. If it's greater than 1 minus p,\nno chance, as n becomes 1.",
    "start": "660410",
    "end": "668360"
  },
  {
    "text": "OK? You with me? AUDIENCE: [UNINTELLIGIBLE]?  PROFESSOR: Well, in general,\nthey're not, and the first",
    "start": "668360",
    "end": "677090"
  },
  {
    "text": "exercise on the homework\nsays take the 844 code. There's certain places where if\nyou erase 4 bits, you lose,",
    "start": "677090",
    "end": "686070"
  },
  {
    "text": "and there are other places\nwhere if you erase 4 bits, you win.",
    "start": "686070",
    "end": "691100"
  },
  {
    "text": "And that exercise also points\nout that the low density",
    "start": "691100",
    "end": "697630"
  },
  {
    "text": "parity check decoding that\nwe're going to do, the graphical decoding, may fail\nin a case where maximum",
    "start": "697630",
    "end": "703520"
  },
  {
    "text": "likelihood decoding\nmight work. But maximum likelihood decoding\nis certainly the best",
    "start": "703520",
    "end": "708769"
  },
  {
    "text": "we can do, so it's clear. You can't signal at a rate\ngreater than 1 minus p.",
    "start": "708770",
    "end": "716089"
  },
  {
    "text": "You just don't get more than 1\nminus p bits of information, or n times (1 minus p) bits of\ninformation in a code word of",
    "start": "716090",
    "end": "723920"
  },
  {
    "text": "length n, so you can't possibly\ncommunicate more than n times (1 minus p)\nbits in a block.",
    "start": "723920",
    "end": "733000"
  },
  {
    "text": "OK.  So what are we going\nto try to do to",
    "start": "733000",
    "end": "740920"
  },
  {
    "text": "signal over this channel? We're going to try using a low\ndensity parity check code.",
    "start": "740920",
    "end": "749500"
  },
  {
    "text": "Actually, I guess I did\nwant this first.  Let me talk about both of\nthese back and forth.",
    "start": "749500",
    "end": "757790"
  },
  {
    "text": "Sorry, Mr. TV guy.  So we're going to use a low\ndensity parity check code, and",
    "start": "757790",
    "end": "765210"
  },
  {
    "text": "initially, we're going to assume\na regular code with, say, left degree is 3 over\nhere, right degree is 6.",
    "start": "765210",
    "end": "776860"
  },
  {
    "text": "And we're going to try to decode\nby using the iterative sum product algorithm with\na left right schedule.",
    "start": "776860",
    "end": "783310"
  },
  {
    "text": " OK.",
    "start": "783310",
    "end": "790140"
  },
  {
    "text": "I can work either\nhere or up here. What are the rules for sum\nproduct update on a binary",
    "start": "790140",
    "end": "800470"
  },
  {
    "text": "erasure channel? Let's just start out, and walk\nthrough it a little bit, and",
    "start": "800470",
    "end": "810220"
  },
  {
    "text": "then step back and develop\nsome more general rules. ",
    "start": "810220",
    "end": "815700"
  },
  {
    "text": "What is the message coming\nin here that we receive from the channel?",
    "start": "815700",
    "end": "821680"
  },
  {
    "text": "We're going to convert it\ninto an APP vector. What could the APP vector be?",
    "start": "821680",
    "end": "828480"
  },
  {
    "text": "It's either, say, 0, 1 or 1,\n0, if the bit is unerased.",
    "start": "828480",
    "end": "836360"
  },
  {
    "text": "So this would be-- if we get\nthis, we know a posteriori probability of a 0 is a\n1, and of a 1 is a 0.",
    "start": "836360",
    "end": "844144"
  },
  {
    "text": "No question, we have\ncertainty. Similarly down here, it's a 1.",
    "start": "844145",
    "end": "850980"
  },
  {
    "text": "And in here, it's 1/2, 1/2.  Complete uncertainty.",
    "start": "850980",
    "end": "857310"
  },
  {
    "text": "No information.  So, we can get-- those are our three\npossibilities off the channel.",
    "start": "857310",
    "end": "865570"
  },
  {
    "text": "(0,1), (1,0), (1/2, 1/2). Now, if we get a certain bit\ncoming in, what are the",
    "start": "865570",
    "end": "872380"
  },
  {
    "text": "messages going out on each\nof these lines here? We actually only need\nto know this one.",
    "start": "872380",
    "end": "878720"
  },
  {
    "text": "Initially, everything inside\nhere is complete ignorance. Half, 1/2 everywhere.",
    "start": "878720",
    "end": "884120"
  },
  {
    "text": "You can consider everything\nto be erased.  All right. Well, if we got a known bit\ncoming in, a 0 or a 1, the",
    "start": "884120",
    "end": "893470"
  },
  {
    "text": "repetition node simply\nsays propagate that through all here. So if you worked out the sum\nproduct update rule for here,",
    "start": "893470",
    "end": "901950"
  },
  {
    "text": "it would basically say, in this\nmessage, if any of these",
    "start": "901950",
    "end": "907100"
  },
  {
    "text": "lines is known, then this line\nis known and we have a certain bit going out.",
    "start": "907100",
    "end": "913949"
  },
  {
    "text": "All right? So if 0, 1 comes in,\nwe'll get 0, 1 out. It's certainly a 1.",
    "start": "913950",
    "end": "920210"
  },
  {
    "text": "Only in the case where all of\nthese other lines are erased--",
    "start": "920210",
    "end": "926240"
  },
  {
    "text": "all these other incoming\nmessages are erasures-- then we don't know anything,\nthen the output has to be an erasure.",
    "start": "926240",
    "end": "932260"
  },
  {
    "text": "All right? So that's the sum product update\nrule at a equals node.",
    "start": "932260",
    "end": "938465"
  },
  {
    "text": "All right? If any of these d minus 1\nincoming messages is known,",
    "start": "938465",
    "end": "944050"
  },
  {
    "text": "then the output is known. If they're all unknown, then\nthe output is unknown. ",
    "start": "944050",
    "end": "952360"
  },
  {
    "text": "You're going to find, in\ngeneral, these are the only kinds of messages we're ever\ngoing to have to deal with.",
    "start": "952360",
    "end": "958010"
  },
  {
    "text": "Either, we're basically going\nto take known bits and propagate them through\nthe graph--",
    "start": "958010",
    "end": "964235"
  },
  {
    "start": "964235",
    "end": "969800"
  },
  {
    "text": "so initially, everything is\nerased, and after awhile, we start learning things. More and more things become\nknown, and we succeed if",
    "start": "969800",
    "end": "976910"
  },
  {
    "text": "everything becomes known\ninside the graph. All right? So it's just the propagation of\nunerased variables through",
    "start": "976910",
    "end": "983500"
  },
  {
    "text": "this graph. AUDIENCE: [UNINTELLIGIBLE] ",
    "start": "983500",
    "end": "989240"
  },
  {
    "text": "PROFESSOR: No.  So they're not only known,\nbut they're correct.",
    "start": "989240",
    "end": "996399"
  },
  {
    "text": "And like everything else, you\ncan prove that by induction. The bits that we receive from\nthe channel certainly have to",
    "start": "996400",
    "end": "1003649"
  },
  {
    "text": "be consistent with the\ncorrect code word. All these internal constraints\nare the constraints of the",
    "start": "1003650",
    "end": "1009110"
  },
  {
    "text": "code, so we can never generate\nan incorrect message. That's basically the hand\nwaving proof of that.",
    "start": "1009110",
    "end": "1015080"
  },
  {
    "text": " OK. ",
    "start": "1015080",
    "end": "1022510"
  },
  {
    "text": "So we're going to propagate\neither known bits or erasures in the first iteration.",
    "start": "1022510",
    "end": "1028920"
  },
  {
    "text": "And what's the fraction of these\nlines that's going to be erased in a very long code?",
    "start": "1028920",
    "end": "1036002"
  },
  {
    "text": "AUDIENCE: [UNINTELLIGIBLE] PROFESSOR: Its going to be p. All right? So initially, we have fraction\np erased and fraction 1 minus",
    "start": "1036003",
    "end": "1045520"
  },
  {
    "text": "p which are good. OK. And then, this, we'll take this\nto be a perfectly random",
    "start": "1045520",
    "end": "1053750"
  },
  {
    "text": "interleaver. So perfectly randomly,\nthis comes out there.",
    "start": "1053750",
    "end": "1059730"
  },
  {
    "text": "OK? ",
    "start": "1059730",
    "end": "1064900"
  },
  {
    "text": "All right, so now we have\nvarious messages coming in over here. Some are erased, some are known\nand correct, and that's",
    "start": "1064900",
    "end": "1074250"
  },
  {
    "text": "the only things they can be. All right, what can we do\non the right side now? On the right side, we have to\nexecute the sum product",
    "start": "1074250",
    "end": "1082460"
  },
  {
    "text": "algorithm for a zero sum\nnode of this type. ",
    "start": "1082460",
    "end": "1087960"
  },
  {
    "text": "What is the rule here?  Clearly, if we get good data\non all these input bits, we",
    "start": "1087960",
    "end": "1096710"
  },
  {
    "text": "know what the output bit is. So if we get five good ones over\nhere, we can tell what",
    "start": "1096710",
    "end": "1102570"
  },
  {
    "text": "the sixth one has to be.  However, if any of these is\nerased, then what's the",
    "start": "1102570",
    "end": "1113690"
  },
  {
    "text": "probability this\nis a 0 or a 1? It's 1/2, 1/2. So any erasure here\nmeans we get no",
    "start": "1113690",
    "end": "1122230"
  },
  {
    "text": "information out of this node. We get an erasure coming out. All right, so we come in here,\nand if p is some large number,",
    "start": "1122230",
    "end": "1136960"
  },
  {
    "text": "the rate of this code is 1/2. So I'm going to do a simulation\nfor like p equals a",
    "start": "1136960",
    "end": "1144460"
  },
  {
    "text": "little less-- small enough so that this code\ncould succeed, 0.4--",
    "start": "1144460",
    "end": "1150240"
  },
  {
    "text": "so the capacity is\n0.6 bits per bit.",
    "start": "1150240",
    "end": "1156050"
  },
  {
    "text": "But if this is 0.4, what's the\nprobability that any 5 of",
    "start": "1156050",
    "end": "1161140"
  },
  {
    "text": "these are all going\nto be unerased? It's pretty small. ",
    "start": "1161140",
    "end": "1168850"
  },
  {
    "text": "So you won't be surprised to\nlearn that the probability of",
    "start": "1168850",
    "end": "1174380"
  },
  {
    "text": "an erasure of coming back-- call that q-- equals 0.9 or more,\ngreater than 0.9.",
    "start": "1174380",
    "end": "1182930"
  },
  {
    "text": "But it's not 1. So for some small fraction of\nthese over here, we're going",
    "start": "1182930",
    "end": "1189289"
  },
  {
    "text": "to get some information, some\nadditional information, that we didn't have before. And this is going to propagate\nrandomly back, and it may",
    "start": "1189290",
    "end": "1197140"
  },
  {
    "text": "allow us to now know some of\nthese bits that were initially",
    "start": "1197140",
    "end": "1202240"
  },
  {
    "text": "erased on the channel. ",
    "start": "1202240",
    "end": "1207620"
  },
  {
    "text": "So that's the idea. So to understand the\nperformance of",
    "start": "1207620",
    "end": "1214409"
  },
  {
    "text": "this, we simply track-- let me call this, in general,\nthe erasure probability going",
    "start": "1214410",
    "end": "1222850"
  },
  {
    "text": "from left to right, and this,\nin general, we'll call the erasure probability going\nfrom right to left.",
    "start": "1222850",
    "end": "1229770"
  },
  {
    "text": " And we can actually compute what\nthese probabilities are",
    "start": "1229770",
    "end": "1236520"
  },
  {
    "text": "for each iteration under the\nassumption that the code is very long and random so that\nevery time we make a",
    "start": "1236520",
    "end": "1244090"
  },
  {
    "text": "computation, we're dealing\nwith completely fresh and independent information. And that's what we're\ngoing to do.",
    "start": "1244090",
    "end": "1249590"
  },
  {
    "text": "Yes? AUDIENCE: [UNINTELLIGIBLE] ",
    "start": "1249590",
    "end": "1258410"
  },
  {
    "text": "PROFESSOR: When they come from\nthe right side, they're either erased or they're consistent.",
    "start": "1258410",
    "end": "1264180"
  },
  {
    "text": " I argued before, waving my\nhands, that these messages",
    "start": "1264180",
    "end": "1271670"
  },
  {
    "text": "could never be incorrect. So if you get 2 known messages,\nthey can't conflict",
    "start": "1271670",
    "end": "1276680"
  },
  {
    "text": "with each other. Is that your concern? AUDIENCE: Yeah. Because you're randomly\nconnecting [UNINTELLIGIBLE],",
    "start": "1276680",
    "end": "1283218"
  },
  {
    "text": "so it might be that one of the\nplus signs gave you an [UNINTELLIGIBLE], whereas\nanother plus sign gave you a",
    "start": "1283218",
    "end": "1289174"
  },
  {
    "text": "proper message. And they both run back\nto the same equation. PROFESSOR: Well, OK.",
    "start": "1289174",
    "end": "1294450"
  },
  {
    "text": "So this is pseudo random,\nbut is chosen for once and for all. It determines the code. I don't re-choose it every time,\nbut when I analyze it,",
    "start": "1294450",
    "end": "1302900"
  },
  {
    "text": "I'll assume that it's random\nenough so that the bits that enter into any one calculation\nare bits that I've never seen",
    "start": "1302900",
    "end": "1308630"
  },
  {
    "text": "before, and therefore can be\ntaken to be entirely random. But of course, in actual\npractice, you've got a fixed",
    "start": "1308630",
    "end": "1315179"
  },
  {
    "text": "interleaver here, and you\nhave to, in order to decode the code. But the other concern here\nis if we actually had the",
    "start": "1315180",
    "end": "1324010"
  },
  {
    "text": "possibility of errors, the pure\nbinary erasure channel never allows errors. If this actually allowed a 0 to\ngo to a 1 or a 1 to go to",
    "start": "1324010",
    "end": "1332450"
  },
  {
    "text": "0, then we'd have an altogether\ndifferent situation over here, and we'd have to\nsimply honestly compute the",
    "start": "1332450",
    "end": "1338920"
  },
  {
    "text": "sum product algorithm and what\nis the APP if we have some probability of error. And they could conflict, and\nwe'd have to weigh the",
    "start": "1338920",
    "end": "1345890"
  },
  {
    "text": "evidence, and take the\ndominating evidence, or mix it all up into the single\nparameter",
    "start": "1345890",
    "end": "1351640"
  },
  {
    "text": "that we call the APP.  All right.",
    "start": "1351640",
    "end": "1357710"
  },
  {
    "text": " So let me now do a\nlittle analysis.",
    "start": "1357710",
    "end": "1365695"
  },
  {
    "text": "Actually, I've done this\na couple places. ",
    "start": "1365695",
    "end": "1370760"
  },
  {
    "text": "Suppose the probability\nof erasure here-- this is the q right\nto left parameter.",
    "start": "1370760",
    "end": "1380620"
  },
  {
    "text": "Suppose the probability of q\nright to left is 0.9, or",
    "start": "1380620",
    "end": "1386160"
  },
  {
    "text": "whatever, and this is the\noriginal received message from",
    "start": "1386160",
    "end": "1393420"
  },
  {
    "text": "the channel, which had an\nerasure probability of p. ",
    "start": "1393420",
    "end": "1399480"
  },
  {
    "text": "What's the q left to right? What's the erasure probability\nfor the outgoing message?",
    "start": "1399480",
    "end": "1408036"
  },
  {
    "text": "Well, the outgoing message is\nerased only if all of these incoming messages are erased.",
    "start": "1408036",
    "end": "1414480"
  },
  {
    "text": "All right, so this is simply\np times q right to left, d minus 1.",
    "start": "1414480",
    "end": "1422960"
  },
  {
    "text": "OK? AUDIENCE: [UNINTELLIGIBLE]  PROFESSOR: Assuming it's\na long random code, so",
    "start": "1422960",
    "end": "1429860"
  },
  {
    "text": "everything here is\nindependent. I'll say something else about\nthis in just a second.",
    "start": "1429860",
    "end": "1435360"
  },
  {
    "text": " But let's naively make that\nassumption right now, and then",
    "start": "1435360",
    "end": "1441495"
  },
  {
    "text": "see how best we can\njustify it. What's the rule over here? Here, we're over on the right\nside if we want to compute the",
    "start": "1441495",
    "end": "1451770"
  },
  {
    "text": "right to left. If these are all erased with\nprobability q left to right,",
    "start": "1451770",
    "end": "1458140"
  },
  {
    "text": "what is the probability that\nthis one going out is erased?",
    "start": "1458140",
    "end": "1464944"
  },
  {
    "text": "Well, it's easier to compute\nhere the probability of not being erased. This is not erased only if all\nof these are not erased.",
    "start": "1464944",
    "end": "1474230"
  },
  {
    "text": "So we get q right to left. One minus q right to left is\nequal to 1 minus q left to",
    "start": "1474230",
    "end": "1483780"
  },
  {
    "text": "right, to the d minus 1. And let's see, this is d right,\nand this is d left.",
    "start": "1483780",
    "end": "1491630"
  },
  {
    "text": " I'm doing it for the\nspecific context.",
    "start": "1491630",
    "end": "1498769"
  },
  {
    "text": "OK, so under the independence\nassumption, we can compute",
    "start": "1498770",
    "end": "1505320"
  },
  {
    "text": "exactly what these evolving\nerasure probabilities are as we go through this left\nright iteration.",
    "start": "1505320",
    "end": "1512520"
  },
  {
    "text": "This is what's so neat about\nthis whole thing. Now, here's the best argument\nfor why these are all",
    "start": "1512520",
    "end": "1522430"
  },
  {
    "text": "independent. Let's look at the messages\nthat enter into, say, a",
    "start": "1522430",
    "end": "1530690"
  },
  {
    "text": "particular-- this is computing q left\nto right down here. All right, we've got something\ncoming in, one bit here.",
    "start": "1530690",
    "end": "1540030"
  },
  {
    "text": "We've got more bits coming in\nup here, and here, which",
    "start": "1540030",
    "end": "1545860"
  },
  {
    "text": "originally came from bits\ncoming in up here. We have a tree of computation.",
    "start": "1545860",
    "end": "1550870"
  },
  {
    "text": "If we went back through this\npseudo random but fixed interleaver, we could actually\ndraw this tree for every",
    "start": "1550870",
    "end": "1558900"
  },
  {
    "text": "instance of every computation,\nand this would be q left to",
    "start": "1558900",
    "end": "1564790"
  },
  {
    "text": "right at the nth iteration,\nthis is-- I'm sorry. Yeah, this is q left to right at\nthe nth iteration, this is",
    "start": "1564790",
    "end": "1572470"
  },
  {
    "text": "q right to left at the n minus\nfirst iteration, this is q",
    "start": "1572470",
    "end": "1577630"
  },
  {
    "text": "left to right at the n minus\nfirst iteration, and so forth. ",
    "start": "1577630",
    "end": "1586500"
  },
  {
    "text": "Now, the argument is\nthat if I go back-- let's fix the number of\niterations I go back here--",
    "start": "1586500",
    "end": "1596049"
  },
  {
    "text": "m, let's say, and I want to do\nan analysis of the first m iterations.",
    "start": "1596050",
    "end": "1603399"
  },
  {
    "text": "I claim that as this code\nbecomes long, n goes to infinity with fixed d lambda,\nd rho, that the probability",
    "start": "1603400",
    "end": "1614340"
  },
  {
    "text": "you're ever going to run into\nrepeated bit or message up here goes to 0.",
    "start": "1614340",
    "end": "1620780"
  },
  {
    "text": "All right? So I fix the number\nof iterations I'm going to look at. I let the length of the\ncode go to infinity.",
    "start": "1620780",
    "end": "1627500"
  },
  {
    "text": "I let everything be chosen\npseudo randomly over here. Then the probability of seeing\nthe same message or bit twice",
    "start": "1627500",
    "end": "1637570"
  },
  {
    "text": "in this tree goes to 0. And therefore, in that limit,\nthe independence assumption",
    "start": "1637570",
    "end": "1642740"
  },
  {
    "text": "become valid. That is basically the\nargument, all right? So I can analyze any\nfixed number of",
    "start": "1642740",
    "end": "1649840"
  },
  {
    "text": "iterations in this way. ",
    "start": "1649840",
    "end": "1659142"
  },
  {
    "start": "1653000",
    "end": "1713000"
  },
  {
    "text": "AUDIENCE: [UNINTELLIGIBLE]  PROFESSOR: OK, yes. Good.",
    "start": "1659142",
    "end": "1665140"
  },
  {
    "text": "So this is saying the girth\nis probabilistically--",
    "start": "1665140",
    "end": "1671010"
  },
  {
    "text": "so limit in probability going\nto infinity, or it's also",
    "start": "1671010",
    "end": "1679860"
  },
  {
    "text": "referred to as the locally\ntree-like assumption. ",
    "start": "1679860",
    "end": "1685330"
  },
  {
    "text": "OK, graph in the neighborhood\nof any node-- this is kind of a map of the\nneighborhood back for a",
    "start": "1685330",
    "end": "1692380"
  },
  {
    "text": "distance of m--  we're not ever going to\nrun into any cycles.",
    "start": "1692380",
    "end": "1698640"
  },
  {
    "text": " Good, thank you.",
    "start": "1698640",
    "end": "1706420"
  },
  {
    "text": "OK, so under that assumption,\nnow we can do an exact analysis. This is what's amazing.",
    "start": "1706420",
    "end": "1712010"
  },
  {
    "text": " And how do we do it? Here's a good way of doing it.",
    "start": "1712010",
    "end": "1719180"
  },
  {
    "start": "1713000",
    "end": "2163000"
  },
  {
    "text": "We just draw the curves of these\n2 equations, and we go back and forth between them. ",
    "start": "1719180",
    "end": "1726179"
  },
  {
    "text": "And this was actually a\ntechnique invented earlier for turbo codes, but it works very\nnicely for low density parity",
    "start": "1726180",
    "end": "1733130"
  },
  {
    "text": "check code analysis. It's called the exit chart. I've drawn it in a somewhat\npeculiar way, but it's so that",
    "start": "1733130",
    "end": "1741570"
  },
  {
    "text": "it will look like the exit\ncharts you might see an in the literature. So I'm just drawing q right to\nleft on this axis, and q left",
    "start": "1741570",
    "end": "1750100"
  },
  {
    "text": "to right on this axis. I want to sort of start in the\nlower left and work my way up",
    "start": "1750100",
    "end": "1755250"
  },
  {
    "text": "to the upper right, which\nis the way exit charts always work. So to do that, I basically\ninvert the axis and take it",
    "start": "1755250",
    "end": "1763610"
  },
  {
    "text": "from 1 down to 0. Initially, both of these-- the probability is one that\neverything is erased",
    "start": "1763610",
    "end": "1770350"
  },
  {
    "text": "internally on every edge, and if\nthings work out, we'll get up to the point where nothing\nis erased with high",
    "start": "1770350",
    "end": "1778390"
  },
  {
    "text": "probability.  OK, these are our 2 equations\njust copied from over there",
    "start": "1778390",
    "end": "1786290"
  },
  {
    "text": "for the specific case of left\ndegree equals 3 and right degree equals 6.",
    "start": "1786290",
    "end": "1792900"
  },
  {
    "text": "And so I just plot the curves\nof these 2 equations. This is done in the notes, and\nthe important thing is that",
    "start": "1792900",
    "end": "1802090"
  },
  {
    "text": "the curves don't cross, for\na value of p equal 0.4.",
    "start": "1802090",
    "end": "1808659"
  },
  {
    "text": "One of these curves depends on\np, the other one doesn't. So this is just a simple little\nquadratic curve here,",
    "start": "1808660",
    "end": "1816390"
  },
  {
    "text": "and this is a fifth order\ncurve, and they look something like this.",
    "start": "1816390",
    "end": "1822000"
  },
  {
    "text": "What does this mean? Initially, the q right\nto left is 1. If I go through one iteration,\nusing the fact that I get this",
    "start": "1822000",
    "end": "1830800"
  },
  {
    "text": "external information-- extrinsic information-- then q left to right becomes\n0.4, so we do to the outer.",
    "start": "1830800",
    "end": "1839570"
  },
  {
    "text": "Now, I have q left to right\npropagating to the right side,",
    "start": "1839570",
    "end": "1845130"
  },
  {
    "text": "and at this point, I get\nsomething like 0.922, I think",
    "start": "1845130",
    "end": "1850290"
  },
  {
    "text": "is the first one. So the q right to left\nhas gone from 1 down to 0.9 something.",
    "start": "1850290",
    "end": "1858210"
  },
  {
    "text": "OK, but that's better. Now, with that value of q, of\ncourse I get a much more",
    "start": "1858210",
    "end": "1865050"
  },
  {
    "text": "favorable situation\non the left. I go over to the left\nside, and now I get",
    "start": "1865050",
    "end": "1870730"
  },
  {
    "text": "some p equal to-- this is all done\nin the notes--",
    "start": "1870730",
    "end": "1877670"
  },
  {
    "text": "0.34. So I've reduced my erasure\nprobability going from left to",
    "start": "1877670",
    "end": "1883790"
  },
  {
    "text": "right, which in turn, helps me\nout as I go over here, 0.875,",
    "start": "1883790",
    "end": "1893000"
  },
  {
    "text": "and so forth. Are you with me? Does everyone see\nwhat I'm doing?",
    "start": "1893000",
    "end": "1898730"
  },
  {
    "text": "Any questions? Again, I'm claiming this is\nan exact calculation--",
    "start": "1898730",
    "end": "1904250"
  },
  {
    "text": "or I would call it\na simulation-- of what the algorithm does\nin each iteration. First iteration, first full,\nleft, right, right left, you",
    "start": "1904250",
    "end": "1912809"
  },
  {
    "text": "get to here. Second one, you get to\nhere, and so forth. And I claim as n goes to\ninfinity, and everything is",
    "start": "1912810",
    "end": "1920640"
  },
  {
    "text": "random, this is the\nway the erasure probabilities will evolve.",
    "start": "1920640",
    "end": "1926800"
  },
  {
    "text": " And it's clear visually that if\nthe curves don't cross, we",
    "start": "1926800",
    "end": "1937320"
  },
  {
    "text": "get to the upper right corner,\nwhich means decoding succeeds. There are no erasures anywhere\nat the end of the day.",
    "start": "1937320",
    "end": "1946640"
  },
  {
    "text": "And furthermore, you go and\nyou take a very long code, like 10 to the seventh bits,\nand you simulate it on this",
    "start": "1946640",
    "end": "1953050"
  },
  {
    "text": "channel, and it will behave\nexactly like this. OK, so this is really a good\npiece of analysis.",
    "start": "1953050",
    "end": "1960100"
  },
  {
    "text": "So this reduces it to\nvery simple terms. We have 2 equations, and of\ncourse they meet here at the",
    "start": "1960100",
    "end": "1968760"
  },
  {
    "text": "(0,0) point. Substitute 0 in here,\nyou get 0 there. Substance 0 here,\nyou get 0 there.",
    "start": "1968760",
    "end": "1975690"
  },
  {
    "text": "But if they don't meet anywhere\nelse, if there's no fixed point to this iterative\nconvergence, then decoding is",
    "start": "1975690",
    "end": "1985860"
  },
  {
    "text": "going to succeed. So this is the whole question:\ncan we design 2 curves that",
    "start": "1985860",
    "end": "1990920"
  },
  {
    "text": "don't cross? ",
    "start": "1990920",
    "end": "2002020"
  },
  {
    "text": "OK.  So what do we expect\nnow to happen?",
    "start": "2002020",
    "end": "2009330"
  },
  {
    "text": "Suppose we increase p. Suppose we increase p to 0.45,\nwhich is another case that's",
    "start": "2009330",
    "end": "2017540"
  },
  {
    "text": "considered in the notes,\nwhat's going to happen? This curve is just a simple\nquadratic, it's going to be",
    "start": "2017540",
    "end": "2023990"
  },
  {
    "text": "dragged down a little bit. We're going to get some\ndifferent curve, which is just",
    "start": "2023990",
    "end": "2032570"
  },
  {
    "text": "this curve scaled by\n0.45 over 0.4. It's going to start here,\nand it's going to",
    "start": "2032570",
    "end": "2039789"
  },
  {
    "text": "be this scaled curve. And unfortunately, those\n2 curves cross. ",
    "start": "2039790",
    "end": "2047550"
  },
  {
    "text": "So that's the way it's going\nto look, and now, again, we can simulate iterative decoding\nfor this case.",
    "start": "2047550",
    "end": "2058429"
  },
  {
    "text": "Again, initially,\nwe'll start out. We'll go from 1, 0.45 will be\nour right going erasure",
    "start": "2058429",
    "end": "2064760"
  },
  {
    "text": "probability. We'll go over here, make\nsome progress, but what's going to happen?",
    "start": "2064760",
    "end": "2070690"
  },
  {
    "text": "We're going to get stuck\nright there. ",
    "start": "2070690",
    "end": "2076260"
  },
  {
    "text": "So we find the fixed point. In fact, this simulation is\na very efficient way of calculating what the fixed point\nof these 2 curves are.",
    "start": "2076260",
    "end": "2085169"
  },
  {
    "text": "Probably some of you are\nanalytical whizzes and can do it analytically, but\nit's not that easy",
    "start": "2085170",
    "end": "2090350"
  },
  {
    "text": "for a quintic equation. ",
    "start": "2090350",
    "end": "2095699"
  },
  {
    "text": "In any case, as far as decoding\nis concerned-- all right, this code doesn't\nwork on an erasure channel",
    "start": "2095699",
    "end": "2103390"
  },
  {
    "text": "which has an erasure probability\nof 0.45. It does work on one that has an\nerasure probability of 0.4.",
    "start": "2103390",
    "end": "2110119"
  },
  {
    "text": "That should suggest\nto you-- yeah?",
    "start": "2110120",
    "end": "2116770"
  },
  {
    "text": "AUDIENCE: [UNINTELLIGIBLE]  PROFESSOR: Yes, so this code\ndoesn't get to capacity.",
    "start": "2116770",
    "end": "2123520"
  },
  {
    "text": "Too bad.  So I'm not claiming that a\nregular d left equals 3, d",
    "start": "2123520",
    "end": "2133540"
  },
  {
    "text": "right equals 6 LDPC code\ncan achieve capacity. ",
    "start": "2133540",
    "end": "2140030"
  },
  {
    "text": "There's some threshold for p,\nbelow which it'll work, and above which it won't work.",
    "start": "2140030",
    "end": "2145830"
  },
  {
    "text": "That threshold is somewhere\nbetween 0.4 and 0.45. In fact, it's 0.429 something\nor other.",
    "start": "2145830",
    "end": "2153510"
  },
  {
    "text": "So this design approach will\nsucceed it's near capacity,",
    "start": "2153510",
    "end": "2160470"
  },
  {
    "text": "but I certainly don't\nclaim this is a capacity approaching code. ",
    "start": "2160470",
    "end": "2173360"
  },
  {
    "start": "2163000",
    "end": "2443000"
  },
  {
    "text": "I might mention now something\ncalled the area theorem, because it's easy to do\nnow and it will be",
    "start": "2173360",
    "end": "2180309"
  },
  {
    "text": "harder to do later. What is this area here? ",
    "start": "2180310",
    "end": "2188339"
  },
  {
    "text": "I'm saying the area above\nthis curve here. ",
    "start": "2188340",
    "end": "2195344"
  },
  {
    "text": "Well, you can do that simply\nby integrating this. It's integral of p times\nq-squared dq from 0 to 1, and",
    "start": "2195344",
    "end": "2206869"
  },
  {
    "text": "it turns out to be p over 3. Believe me? ",
    "start": "2206870",
    "end": "2214360"
  },
  {
    "text": "Which happens to be p over\nthe left degree.",
    "start": "2214360",
    "end": "2220130"
  },
  {
    "text": "Not fortuitously, because this\nis the left degree minus 1.",
    "start": "2220130",
    "end": "2226230"
  },
  {
    "text": "So you're always going to get\np over the left degree. ",
    "start": "2226230",
    "end": "2231780"
  },
  {
    "text": "And what's the area\nunder here? Well, I can compute--",
    "start": "2231780",
    "end": "2239069"
  },
  {
    "text": "basically change variables to\n1 minus q, q prime, and 1 minus q is q prime over here,\nand so I'll get the same kind",
    "start": "2239070",
    "end": "2246590"
  },
  {
    "text": "of calculation, 0 to 1, this\ntime q to the fifth over pq, which is 1/6, which not",
    "start": "2246590",
    "end": "2256020"
  },
  {
    "text": "fortuitously is 1 over d right. So the area here is p over\n3, and the area here is--",
    "start": "2256020",
    "end": "2266920"
  },
  {
    "text": "under this side of\nthe curve is-- that must be 5/6. Sorry, so the area under\nthis side is 1/6 so",
    "start": "2266920",
    "end": "2275090"
  },
  {
    "text": "it's 1 minus this. ",
    "start": "2275090",
    "end": "2287490"
  },
  {
    "text": "It's clearly the big part,\nso this is 5/6. ",
    "start": "2287490",
    "end": "2295560"
  },
  {
    "text": "All right. I've claimed my criterion for\nsuccessful decoding is that these curves not cross.",
    "start": "2295560",
    "end": "2301980"
  },
  {
    "text": "All right, so for successful\ndecoding, clearly the sum of",
    "start": "2301980",
    "end": "2311010"
  },
  {
    "text": "these 2 areas has to be\nless than 1, right? So successful decoding: a\nnecessary condition is that p",
    "start": "2311010",
    "end": "2330210"
  },
  {
    "text": "over d_lambda -- let me just extend this\nto any regular code--",
    "start": "2330210",
    "end": "2336510"
  },
  {
    "text": "plus 1 minus 1 over d_rho\nhas to be less than 1.",
    "start": "2336510",
    "end": "2343050"
  },
  {
    "start": "2343050",
    "end": "2349490"
  },
  {
    "text": "OK, what does this sum out to? This says that p has to be less\nthan d_lambda over d_rho,",
    "start": "2349490",
    "end": "2367530"
  },
  {
    "text": "which happens to 1\nminus r, right? ",
    "start": "2367530",
    "end": "2372960"
  },
  {
    "text": "Or equivalently, r less than 1\nminus p, which is capacity.",
    "start": "2372960",
    "end": "2378835"
  },
  {
    "text": " So what did I just prove\nvery quickly?",
    "start": "2378835",
    "end": "2384150"
  },
  {
    "text": "I proved that for a regular low\ndensity parity check code, just considering the areas under\nthese 2 curves and the",
    "start": "2384150",
    "end": "2394370"
  },
  {
    "text": "requirement that the 2 curves\nmust not cross, I find that",
    "start": "2394370",
    "end": "2399490"
  },
  {
    "text": "regular codes can't possibly\nwork for a rate any greater than 1 minus p, which\nis capacity.",
    "start": "2399490",
    "end": "2406520"
  },
  {
    "text": "In fact, the rate has to be less\nthan 1 minus p, strictly less, in order for there to--",
    "start": "2406520",
    "end": "2413020"
  },
  {
    "text": "unless we were lucky enough just\nto get 2 curves that were right on top of each other.",
    "start": "2413020",
    "end": "2418620"
  },
  {
    "text": "I don't know whether that\nwould work or not. I guess it doesn't work. But we'd need them to be\njust a scooch apart.",
    "start": "2418620",
    "end": "2423735"
  },
  {
    "text": " OK, so I can make an inequality\nsign here.",
    "start": "2423735",
    "end": "2430170"
  },
  {
    "text": "OK, well that's rather\ngratifying. ",
    "start": "2430170",
    "end": "2438160"
  },
  {
    "text": "What do we do to improve\nthe situation?",
    "start": "2438160",
    "end": "2443510"
  },
  {
    "start": "2443000",
    "end": "2578000"
  },
  {
    "text": "OK, one-- it's probably the first thing\nyou would think of investigating maybe at this\npoint, why don't we look at an",
    "start": "2443510",
    "end": "2450830"
  },
  {
    "text": "irregular LDPC code? ",
    "start": "2450830",
    "end": "2467359"
  },
  {
    "text": "And I'm going to characterize\nsuch a code by-- there's going to be some\ndistribution on the left side,",
    "start": "2467360",
    "end": "2478650"
  },
  {
    "text": "which I might write\nby lambda_d. This is going to be the\nfraction of left",
    "start": "2478650",
    "end": "2486920"
  },
  {
    "text": "nodes of degree d.",
    "start": "2486920",
    "end": "2493910"
  },
  {
    "text": "All right, I'll simply let that\nbe some distribution. Some might have degree 2, some\nmight have degree 3.",
    "start": "2493910",
    "end": "2499250"
  },
  {
    "text": "Some might have degree 500.",
    "start": "2499250",
    "end": "2504270"
  },
  {
    "text": "And similarly, rho_d\nis the fraction of",
    "start": "2504270",
    "end": "2511000"
  },
  {
    "text": "right nodes, et cetera. ",
    "start": "2511000",
    "end": "2521500"
  },
  {
    "text": "And there's some average degree\nhere, and some average degree here.",
    "start": "2521500",
    "end": "2529250"
  },
  {
    "text": "So this is the average degree,\nor the typical degree. ",
    "start": "2529250",
    "end": "2536500"
  },
  {
    "text": "This is average left degree,\nthis is average right degree. ",
    "start": "2536500",
    "end": "2543990"
  },
  {
    "text": "If I do that, then\nthe calculations are done in the notes.",
    "start": "2543990",
    "end": "2549640"
  },
  {
    "text": "I won't take the time to do them\nhere, but basically you find the rate of the code is 1\nminus the average left degree",
    "start": "2549640",
    "end": "2558190"
  },
  {
    "text": "over the average right degree.  OK, so it reduces to\nthe previous case",
    "start": "2558190",
    "end": "2565180"
  },
  {
    "text": "and the regular case. Regular case, this is 1 for one\nparticular degree and 0",
    "start": "2565180",
    "end": "2571440"
  },
  {
    "text": "for everything else.  It works out.",
    "start": "2571440",
    "end": "2579160"
  },
  {
    "start": "2578000",
    "end": "2833000"
  },
  {
    "text": "If I do that and go through\nexactly the same analysis with my computation tree, now I\nsimply have a distribution of",
    "start": "2579160",
    "end": "2586690"
  },
  {
    "text": "degrees at each level of the\ncomputation tree, and you will",
    "start": "2586690",
    "end": "2591710"
  },
  {
    "text": "not be surprised to hear what I\nget out as my left to right",
    "start": "2591710",
    "end": "2598040"
  },
  {
    "text": "equations, is I get out\nsome average of this. ",
    "start": "2598040",
    "end": "2605349"
  },
  {
    "text": "In fact, what I get out now is\nthat q left to right is the",
    "start": "2605350",
    "end": "2619090"
  },
  {
    "text": "sum over d of-- this is going to be lambda_d\ntimes p times q right to left",
    "start": "2619090",
    "end": "2635590"
  },
  {
    "text": "to the d minus 1. Which again reduces to the\nprevious thing, if only one of",
    "start": "2635590",
    "end": "2642140"
  },
  {
    "text": "these is 1 and the rest are 0. So I just get the--",
    "start": "2642140",
    "end": "2647500"
  },
  {
    "text": " this is just an expectation. This is the fraction\nof erasures.",
    "start": "2647500",
    "end": "2653830"
  },
  {
    "text": "I just count the number of times\nI go through a node of degree d, and for that fraction\nof time, I'm going to",
    "start": "2653830",
    "end": "2660990"
  },
  {
    "text": "get this relationship, and so\nI just average over them. That's very quick.",
    "start": "2660990",
    "end": "2666450"
  },
  {
    "text": "Look at the notes for a detailed\nderivation, but I hope it's intuitively\nplausible.",
    "start": "2666450",
    "end": "2672839"
  },
  {
    "text": "And similarly, 1 minus q right\nto the left is the sum over d",
    "start": "2672840",
    "end": "2679812"
  },
  {
    "text": "of rho_d, 1 minus q left to\nright to the d minus 1.",
    "start": "2679812",
    "end": "2688365"
  },
  {
    "text": " OK, this is elegantly\ndone if we",
    "start": "2688365",
    "end": "2695970"
  },
  {
    "text": "define generating functions. We do that over here.",
    "start": "2695970",
    "end": "2703490"
  },
  {
    "text": "I've lost it now so I'll\ndo it over here. ",
    "start": "2703490",
    "end": "2708500"
  },
  {
    "text": "So what you'll see in the\nliterature is generating functions to find is lambda_x\nequals sum over d of lambda_d",
    "start": "2708500",
    "end": "2715920"
  },
  {
    "text": "x to the d minus 1. And rho of x equals sum over d,\nrho_d, x to the d minus 1.",
    "start": "2715920",
    "end": "2725650"
  },
  {
    "text": "And then these equations\nare simply written as-- this is p times lambda of q\nright to left, and this is",
    "start": "2725650",
    "end": "2735410"
  },
  {
    "text": "equal to rho of 1 minus\nq left to right.",
    "start": "2735410",
    "end": "2742710"
  },
  {
    "text": " OK, so we get nice, elegant\ngenerating function",
    "start": "2742710",
    "end": "2749630"
  },
  {
    "text": "representations.  But from the point of view of\nthe curves, we're basically",
    "start": "2749630",
    "end": "2756350"
  },
  {
    "text": "just going to average\nthese curves. So we now replace these\nequations up here by the",
    "start": "2756350",
    "end": "2762520"
  },
  {
    "text": "average equations. ",
    "start": "2762520",
    "end": "2771940"
  },
  {
    "text": "This becomes p times lambda of\nq right to left, and this",
    "start": "2771940",
    "end": "2778099"
  },
  {
    "text": "becomes rho of 1 minus\nq left to right.",
    "start": "2778100",
    "end": "2785950"
  },
  {
    "text": "OK, but again, I'm going to\nreduce all of this 2 curves, which again I can use\nfor a simulation.",
    "start": "2785950",
    "end": "2794770"
  },
  {
    "text": "And now I have lots of\ndegrees of freedom. I could change all these lambdas\nand all these rhos,",
    "start": "2794770",
    "end": "2801630"
  },
  {
    "text": "and I can explore the space,\nand that's what's Sae-Young Chung did in his thesis, not\nso much for this channel.",
    "start": "2801630",
    "end": "2808530"
  },
  {
    "text": "He did do it for this channel,\nbut also for additive white Gaussian noise channels.",
    "start": "2808530",
    "end": "2814610"
  },
  {
    "text": "And so the idea is you try to\nmake these 2 curves just as",
    "start": "2814610",
    "end": "2820980"
  },
  {
    "text": "close together as you can. ",
    "start": "2820980",
    "end": "2828880"
  },
  {
    "text": "Something like that. Or, of course, you can\ndo other tricks. You can have some of these--",
    "start": "2828880",
    "end": "2835690"
  },
  {
    "start": "2833000",
    "end": "3293000"
  },
  {
    "text": "you can have some bits\nover here that go to the outside world. You can suppress some\nof these bits here. You can play around\nwith the graph.",
    "start": "2835690",
    "end": "2843800"
  },
  {
    "text": "No limit on invention. But you don't really have\nto do any of that. ",
    "start": "2843800",
    "end": "2850430"
  },
  {
    "text": "So it becomes a curve fitting\nexercise, and you can imagine",
    "start": "2850430",
    "end": "2857790"
  },
  {
    "text": "doing this in your thesis,\nexcept you were not born soon enough. ",
    "start": "2857790",
    "end": "2864950"
  },
  {
    "text": "The interesting point here is\nthat this now becomes-- the area becomes p over\nd_lambda-bar, again,",
    "start": "2864950",
    "end": "2871470"
  },
  {
    "text": "proof in the notes. This becomes 1 minus\n1 over d_rho-bar.",
    "start": "2871470",
    "end": "2880790"
  },
  {
    "text": " And so again, the\narea theorem--",
    "start": "2880790",
    "end": "2886720"
  },
  {
    "start": "2886720",
    "end": "2892540"
  },
  {
    "text": "in order for these curves not to\ncross, we've got to have p over d_lambda-bar plus 1 minus\n1 over d_rho-bar, less than",
    "start": "2892540",
    "end": "2905859"
  },
  {
    "text": "the area of the whole exit\nchart, which is 1. We again find that--",
    "start": "2905860",
    "end": "2913869"
  },
  {
    "text": "let me put it this way, 1\nminus d_lambda-bar over",
    "start": "2913870",
    "end": "2919870"
  },
  {
    "text": "d_rho-bar is less than 1 minus\np, which is equivalent to the",
    "start": "2919870",
    "end": "2926450"
  },
  {
    "text": "rate must be less than the\ncapacity of the channel. So this is a very nice,\nelegant result.",
    "start": "2926450",
    "end": "2932855"
  },
  {
    "text": "The area theorem says that no\nmatter how you play with these degree distributions in an\nirregular low-density parity",
    "start": "2932855",
    "end": "2939430"
  },
  {
    "text": "check code, you of course can\nnever get above capacity.",
    "start": "2939430",
    "end": "2944790"
  },
  {
    "text": "But, it certainly suggests that\nyou might be able to play",
    "start": "2944790",
    "end": "2950010"
  },
  {
    "text": "around with these curves such\nthat they get as close as you might like. And the converse of this is\nthat if you can make these",
    "start": "2950010",
    "end": "2957270"
  },
  {
    "text": "arbitrarily close to each other,\nthen you can achieve rates arbitrarily close\nto capacity.",
    "start": "2957270",
    "end": "2962829"
  },
  {
    "text": " And that, in fact, is true.",
    "start": "2962830",
    "end": "2969849"
  },
  {
    "text": "So simply by going to irregular\nlow-density parity check codes, we can get as close\nas we like, arbitrarily",
    "start": "2969850",
    "end": "2976810"
  },
  {
    "text": "close, to the capacity of the\nbinary erasure channel with this kind of iterative\ndecoding.",
    "start": "2976810",
    "end": "2984276"
  },
  {
    "text": "And you can see the kind\nof trade you're going to have to make. Obviously, you're going to have\nmore iterations as these",
    "start": "2984276",
    "end": "2991160"
  },
  {
    "text": "get very close. What is the decoding process\ngoing to look like? It's going to look like very\nfine grained steps here, lots",
    "start": "2991160",
    "end": "2999960"
  },
  {
    "text": "of iterations, but-- all right. So it's a 100 iterations. So it's 200 irritations.",
    "start": "2999960",
    "end": "3007880"
  },
  {
    "text": "These are not crazy numbers. These are quite feasible\nnumbers. And so if you're willing to\ndo a lot of computation--",
    "start": "3007880",
    "end": "3016450"
  },
  {
    "text": "which is what you expect,\nas you get close to capacity, right-- you can get as close to capacity\nas you like, at least",
    "start": "3016450",
    "end": "3023520"
  },
  {
    "text": "on this channel. OK, isn't that great?",
    "start": "3023520",
    "end": "3030010"
  },
  {
    "text": "It's an easy channel, I grant\nyou, but everything here is pretty simple.",
    "start": "3030010",
    "end": "3038000"
  },
  {
    "text": "All these sum product\nupdates-- for here, it's just a matter\nof basically snow point",
    "start": "3038000",
    "end": "3045750"
  },
  {
    "text": "propagating erasures. You just take the\nknown variables. You keep computing as many\nas you can of them.",
    "start": "3045750",
    "end": "3053130"
  },
  {
    "text": "Basically, every time an edge\nbecomes known, you only have to visit each edge\nonce, actually.",
    "start": "3053130",
    "end": "3059910"
  },
  {
    "text": "The first time it becomes known\nis the only time you have to visit it. After that, you can just\nleave it fixed.",
    "start": "3059910",
    "end": "3065490"
  },
  {
    "text": "All right, so if this has a\nlinear number of edges, as it",
    "start": "3065490",
    "end": "3073130"
  },
  {
    "text": "does, by construction, for\neither the regular or irregular case, the complexity\nis now going",
    "start": "3073130",
    "end": "3078579"
  },
  {
    "text": "to be linear, right? We only have to visit\neach edge once. There are only a number of\nedges proportional to n.",
    "start": "3078580",
    "end": "3087640"
  },
  {
    "text": "So the complexity of this whole\ndecoding algorithm-- all you do is, you fix as many edges\nas you can, then you go",
    "start": "3087640",
    "end": "3093490"
  },
  {
    "text": "over here and you try to fix as\nmany more edges as you can. You come back here, try to fix\nas many more as you can.",
    "start": "3093490",
    "end": "3099520"
  },
  {
    "text": "It will behave exactly as this\nsimulation shows it will behave, and after going back\nand forth maybe 100 times--",
    "start": "3099520",
    "end": "3109220"
  },
  {
    "text": "in more reasonable cases, it's\nonly 10 or 20 times, it's a very finite number of times--",
    "start": "3109220",
    "end": "3116970"
  },
  {
    "text": "you'll be done. Another qualitative aspect of\nthis that you already see in",
    "start": "3116970",
    "end": "3125390"
  },
  {
    "text": "the regular code case-- in fact, you see it very\nnicely there-- is that",
    "start": "3125390",
    "end": "3130760"
  },
  {
    "text": "typically, very typically, you\nhave an initial period here",
    "start": "3130760",
    "end": "3136450"
  },
  {
    "text": "where you make a rapid progress\nbecause the curves are pretty far apart, then you\nhave some narrow little tunnel",
    "start": "3136450",
    "end": "3142740"
  },
  {
    "text": "that you have to get through,\nand then the curves widen up again. I've exaggerated it here.",
    "start": "3142740",
    "end": "3148480"
  },
  {
    "text": " So OK, you're making great\nprogress, you're filling in,",
    "start": "3148480",
    "end": "3155730"
  },
  {
    "text": "lots of edges become known, and\nthen for a while it seems like you're making no progress\nat all, making very tiny",
    "start": "3155730",
    "end": "3163020"
  },
  {
    "text": "progress on each iteration. But then, you get through\nthis tunnel, and boom!",
    "start": "3163020",
    "end": "3170730"
  },
  {
    "text": "Things go very fast. And for this code,\nit has a zero--",
    "start": "3170730",
    "end": "3175920"
  },
  {
    "text": "the regular code has a zero\nslope at this point, whereas this has a non-zero slope.",
    "start": "3175920",
    "end": "3183540"
  },
  {
    "text": "So these things will go boom,\nboom, boom, boom, boom as you go in there. So these guys at Digital\nFountain, they called their",
    "start": "3183540",
    "end": "3191660"
  },
  {
    "text": "second class of codes,\n[UNINTELLIGIBLE], tornado codes, because they\nhad this effect. You have to struggle and\nstruggle, but then when you",
    "start": "3191660",
    "end": "3198369"
  },
  {
    "text": "finally get it, there's a\ntornado, a blizzard, of known edges, and all of a sudden, all\nthe edges become known.",
    "start": "3198370",
    "end": "3204661"
  },
  {
    "text": " Oh by the way, this could\nbe done for packets.",
    "start": "3204661",
    "end": "3211760"
  },
  {
    "text": "There's nothing-- you know, this is a repetition\nfor a packet, and this is a bit-wise parity check\nfor a packet.",
    "start": "3211760",
    "end": "3218799"
  },
  {
    "text": "So the same diagram works\nperfectly well for packet transmission. That's the way they use it.",
    "start": "3218800",
    "end": "3224390"
  },
  {
    "text": "Yeah? AUDIENCE: [UNINTELLIGIBLE]  PROFESSOR: Yeah.",
    "start": "3224390",
    "end": "3229760"
  },
  {
    "text": "Right. So this chart makes\nit very clear. If you're going to get this\ntornado effect, it's because",
    "start": "3229760",
    "end": "3235740"
  },
  {
    "text": "you have some gap in here. The bigger the gap, the further\naway you are from capacity, quite quantitatively.",
    "start": "3235740",
    "end": "3241630"
  },
  {
    "start": "3241630",
    "end": "3246886"
  },
  {
    "text": "So I just-- this is the first year I've been\nable to get this far in the course, and I think\nthis is very much",
    "start": "3246886",
    "end": "3253150"
  },
  {
    "text": "worth presenting because-- look at what's happened here.",
    "start": "3253150",
    "end": "3258650"
  },
  {
    "text": "At least for one channel, after\n50 years of work in trying to get to Shannon's\nchannel capacity, around 1995",
    "start": "3258650",
    "end": "3269040"
  },
  {
    "text": "or so, people finally figured\nout a way of constructing a code and a decoding algorithm\nthat in fact has linear",
    "start": "3269040",
    "end": "3275990"
  },
  {
    "text": "complexity, and can get as close\nto channel capacity as you like in a very\nfeasible way, at",
    "start": "3275990",
    "end": "3282890"
  },
  {
    "text": "least for this channel. So that's really where we want\nto end the story in this",
    "start": "3282890",
    "end": "3290160"
  },
  {
    "text": "class, because the whole class\nhas been about getting to channel capacity. Well, what about\nother channels?",
    "start": "3290160",
    "end": "3296350"
  },
  {
    "start": "3293000",
    "end": "3600000"
  },
  {
    "text": "What about channels\nwith errors here? So let's go to the symmetric\ninput binary",
    "start": "3296350",
    "end": "3313850"
  },
  {
    "text": "channel, which I--",
    "start": "3313850",
    "end": "3320700"
  },
  {
    "text": " symmetric, sorry-- symmetric\nbinary input channel.",
    "start": "3320700",
    "end": "3327760"
  },
  {
    "text": "This is not standardized. The problem is, what you really\nwant to say is the",
    "start": "3327760",
    "end": "3335809"
  },
  {
    "text": "binary symmetric channel, except\nthat term is already taken, so you've got to\nsay something else.",
    "start": "3335810",
    "end": "3341940"
  },
  {
    "text": "I say symmetric binary\ninput channel. You'll see other things\nin the literature. ",
    "start": "3341940",
    "end": "3348609"
  },
  {
    "text": "This channel has 2 inputs: 0\nand 1, and it has as many",
    "start": "3348610",
    "end": "3354840"
  },
  {
    "text": "outputs as you like. It might have an\nerasure output. And the key thing about the\nerasure output is that the",
    "start": "3354840",
    "end": "3362120"
  },
  {
    "text": "probability of getting there\nfrom either 0 or 1 is the same, call it p again.",
    "start": "3362120",
    "end": "3367790"
  },
  {
    "text": "And so the a posteriori\nprobability, let's write the APPs by each of these.",
    "start": "3367790",
    "end": "3374830"
  },
  {
    "text": "The erasure output is always\ngoing to be a state of complete ignorance,\nyou don't know. So there might be one output\nlike that, and then there will",
    "start": "3374830",
    "end": "3382010"
  },
  {
    "text": "be other outputs here\nthat occur in pairs.",
    "start": "3382010",
    "end": "3388150"
  },
  {
    "text": "And the pairs are always going\nto have the character that their APP is going\nto be 1 minus--",
    "start": "3388150",
    "end": "3395730"
  },
  {
    "text": "I've used p excessively here. Let me take it off of here\nand use it here--",
    "start": "3395730",
    "end": "3401080"
  },
  {
    "text": "for a typical other pair, you're\ngoing to have 1 minus pp, or p 1 minus p.",
    "start": "3401080",
    "end": "3408570"
  },
  {
    "text": "In other words, just looking\nat these 2 outputs, it's a binary symmetric channel. The probability of p\nof cross over and 1",
    "start": "3408570",
    "end": "3416079"
  },
  {
    "text": "minus p of being correct. And we may have pairs that are\npretty unreliable where p is",
    "start": "3416080",
    "end": "3423140"
  },
  {
    "text": "close to 1/2, and we\nmay have pairs that are extremely reliable. So this 1 minus p prime, p\nprime, where p prime might be",
    "start": "3423140",
    "end": "3434109"
  },
  {
    "text": "very close to 0. But the point is, the outputs\nalways occur in these pairs.",
    "start": "3434110",
    "end": "3440820"
  },
  {
    "text": "The output space can be\npartitioned into pairs such that, for each pair, you have a\nbinary symmetric channel, or",
    "start": "3440820",
    "end": "3448780"
  },
  {
    "text": "you might have this singleton,\nwhich is an erasure. And this is, of course, what we\nhave for the binary input",
    "start": "3448780",
    "end": "3457030"
  },
  {
    "text": "additive white Gaussian\nnoise channel. We have 2 inputs, and now we\nhave an output which is the",
    "start": "3457030",
    "end": "3465440"
  },
  {
    "text": "complete real line, which has\na distribution like this. But in this case, 0\nis the erasure.",
    "start": "3465440",
    "end": "3473555"
  },
  {
    "text": "If we get a 0, then the\nprobability of the APP message is (1/2,1/2).",
    "start": "3473555",
    "end": "3479140"
  },
  {
    "text": "And the pairs are\nplus or minus y. If we get to see y, then the\nprobability of y given 0, or",
    "start": "3479140",
    "end": "3491090"
  },
  {
    "text": "given one, that's the same pair\nas the probability of minus y given--",
    "start": "3491090",
    "end": "3496910"
  },
  {
    "text": "this is, of course, minus 1,\nplus 1 for my 2 possible transmissions here.",
    "start": "3496910",
    "end": "3502950"
  },
  {
    "text": "Point is, binary input added\nwhite Gaussian noise channel is in this class. It has a continuous output\nrather than a discrete output.",
    "start": "3502950",
    "end": "3509517"
  },
  {
    "text": " But there's a key symmetry\nproperty here.",
    "start": "3509517",
    "end": "3514630"
  },
  {
    "text": "Basically, if you exchange\n0 for 1, nothing changes.",
    "start": "3514630",
    "end": "3519720"
  },
  {
    "text": "All right, so the symmetry\nbetween 0 and 1. That's why it's called\na symmetric channel.",
    "start": "3519720",
    "end": "3524830"
  },
  {
    "text": "That means you can easily prove\nthat for the capacity achieving input distribution is\nalways (1/2,1/2), for any",
    "start": "3524830",
    "end": "3533630"
  },
  {
    "text": "such channel. If you've taken information\ntheory, you've seen this demonstrated.",
    "start": "3533630",
    "end": "3539049"
  },
  {
    "text": "And this has the important\nimplication that you can use",
    "start": "3539050",
    "end": "3544370"
  },
  {
    "text": "linear codes on any symmetric\nbinary input channel without loss of channel capacity.",
    "start": "3544370",
    "end": "3549865"
  },
  {
    "text": " Linear codes achieve capacity.",
    "start": "3549865",
    "end": "3555020"
  },
  {
    "text": " OK, whereas, of course, if this\nweren't (1/2,1/2), then",
    "start": "3555020",
    "end": "3562640"
  },
  {
    "text": "linear codes couldn't possibly\nachieve capacity. ",
    "start": "3562640",
    "end": "3572190"
  },
  {
    "text": "Suppose you have\nsuch a channel. What's the sum product\nupdates?",
    "start": "3572190",
    "end": "3578450"
  },
  {
    "text": "The sum product updates become\nmore complicated.",
    "start": "3578450",
    "end": "3583859"
  },
  {
    "text": "They're really not hard\nfor the equality sign. You remember for a repetition\nnode, the sum product update",
    "start": "3583860",
    "end": "3590559"
  },
  {
    "text": "is just the product of basically\nthe APPs coming in or the APPs going out.",
    "start": "3590560",
    "end": "3596670"
  },
  {
    "text": "So all we've got to do\nis take the product. It'll turn out the messages in\nthis case are always of the",
    "start": "3596670",
    "end": "3602410"
  },
  {
    "text": "form p, 1 minus p-- of course, because they're\nbinary, and so",
    "start": "3602410",
    "end": "3609420"
  },
  {
    "text": "has to be like this-- so we really just need\na single parameter p. We multiply all the p's, and\nthat normalize correctly, and",
    "start": "3609420",
    "end": "3618120"
  },
  {
    "text": "that'll be the output.  For the update here, I'm sorry\nI don't have time to talk",
    "start": "3618120",
    "end": "3626270"
  },
  {
    "text": "about it in class, but there's\na clever little procedure",
    "start": "3626270",
    "end": "3632990"
  },
  {
    "text": "which basically says take\nthe Hadamard Transform of p, 1 minus p. The Hadamard Transform in\ngeneral says, convert this to",
    "start": "3632990",
    "end": "3640750"
  },
  {
    "text": "the pair of a plus\nb, a minus b. So in this case, we convert it\nto a plus b is always 1, and a",
    "start": "3640750",
    "end": "3650109"
  },
  {
    "text": "minus b is, in this\ncase, 2p minus 1.",
    "start": "3650110",
    "end": "3656990"
  },
  {
    "text": "Works out better, turns\nout this is actually a likelihood ratio.",
    "start": "3656990",
    "end": "3662400"
  },
  {
    "text": "Take the Hadamard Transform,\nthen you can use the same product update rule as\nyou used up here. ",
    "start": "3662400",
    "end": "3670220"
  },
  {
    "text": "So do the repetition node\nupdates, which is easy--",
    "start": "3670220",
    "end": "3679859"
  },
  {
    "text": "so it says just multiply all the\ninputs component-wise in this vector, and then take the\nHadamard Transform again to",
    "start": "3679860",
    "end": "3687880"
  },
  {
    "text": "get your time domain\nor primal domain,",
    "start": "3687880",
    "end": "3693400"
  },
  {
    "text": "rather than dual domain. So you work in the dual\ndomain, rather than the primal domain.",
    "start": "3693400",
    "end": "3698559"
  },
  {
    "text": "Again, I'm sorry. You got a homework problem on\nit, after you've done the homework problem, you'll\nunderstand this.",
    "start": "3698560",
    "end": "3705589"
  },
  {
    "text": "And this turns out to\ninvolve hyperbolic",
    "start": "3705590",
    "end": "3711410"
  },
  {
    "text": "tangents to do these. These Hadamard Transforms turn\nout to be taking hyperbolic",
    "start": "3711410",
    "end": "3717770"
  },
  {
    "text": "tangents, and this is called the\nhyperbolic tangent rule, the tanh rule. So there's a simple way to do\nupdates in general for any of",
    "start": "3717770",
    "end": "3725789"
  },
  {
    "text": "these channels.  Now, you can do the\nsame kind of",
    "start": "3725790",
    "end": "3733400"
  },
  {
    "text": "analysis, but what's different? For the erasure channel, we only\nhad 2 types of messages,",
    "start": "3733400",
    "end": "3742280"
  },
  {
    "text": "known or erased, and all we\nreally had to do is keep track of what's the probability of the\nerasure type of message,",
    "start": "3742280",
    "end": "3748980"
  },
  {
    "text": "or 1 minus this probability,\nit doesn't matter. So that's why I said it\nwas one-dimensional.",
    "start": "3748980",
    "end": "3754670"
  },
  {
    "text": " For the symmetric binary input\nchannel, in general, you can",
    "start": "3754670",
    "end": "3765309"
  },
  {
    "text": "have any APP vector here. This is a single parameter\nvector. It's parameterized by p, or by\nthe likelihood ratio, or by",
    "start": "3765310",
    "end": "3774780"
  },
  {
    "text": "the log likelihood ratio. There are various ways\nto parameterize it. But in any case, a single number\ntells you what the APP",
    "start": "3774780",
    "end": "3781750"
  },
  {
    "text": "message is. And so at this point-- or I\nguess, better looking at it in",
    "start": "3781750",
    "end": "3788676"
  },
  {
    "text": "the competition tree-- at each point, instead of having\na single number, we have a probability distribution\non p.",
    "start": "3788676",
    "end": "3796600"
  },
  {
    "text": "So we get some probability\ndistribution on p, pp of p,",
    "start": "3796600",
    "end": "3802840"
  },
  {
    "text": "that characterizes where\nyou are at this time. Coming off the channel,\ninitially, the probability",
    "start": "3802840",
    "end": "3811490"
  },
  {
    "text": "distribution on p might be equal\nto y, I think it is, actually, or p to the minus y,\nand you get some probability",
    "start": "3811490",
    "end": "3819369"
  },
  {
    "text": "distribution on what p is. ",
    "start": "3819370",
    "end": "3825070"
  },
  {
    "text": "By the way, again because of\nsymmetry, you can always assume that the all-zero vector\nwas sent in your code.",
    "start": "3825070",
    "end": "3831760"
  },
  {
    "text": "It doesn't matter which of your\ncode words is sent, since everything is symmetrical.",
    "start": "3831760",
    "end": "3837430"
  },
  {
    "text": "So you can do all your analysis\nassuming the all-zero code word was sent. This simplifies things\na lot, too.",
    "start": "3837430",
    "end": "3844060"
  },
  {
    "text": "p then becomes the probability\nwhich-- well, I guess I've\ngot it backwards.",
    "start": "3844060",
    "end": "3850270"
  },
  {
    "text": "Should be 1 minus pp, because\np then becomes the",
    "start": "3850270",
    "end": "3855870"
  },
  {
    "text": "probability. If the assumed probability of\nthe input is a 1, in other",
    "start": "3855870",
    "end": "3862140"
  },
  {
    "text": "words, the probability\nthat your current guess would be wrong--",
    "start": "3862140",
    "end": "3867470"
  },
  {
    "text": "I'm not saying that well. Anyway, you get some\ndistribution of p. Let me just draw it like that.",
    "start": "3867470",
    "end": "3874539"
  },
  {
    "text": "So here's pp of p. There's probability\ndistribution.",
    "start": "3874540",
    "end": "3880210"
  },
  {
    "text": "And again, we'll draw it\ngoing from 1 to 0. ",
    "start": "3880210",
    "end": "3885860"
  },
  {
    "text": "So that doesn't go out here.  OK, with more effort, you can\nagain see what the effect of",
    "start": "3885860",
    "end": "3896700"
  },
  {
    "text": "the update rule is\ngoing to be. For each iteration, you have a\ncertain input distribution on",
    "start": "3896700",
    "end": "3902400"
  },
  {
    "text": "all these lines. Again, under the independence\nassumption, you get independently--",
    "start": "3902400",
    "end": "3908579"
  },
  {
    "text": "you get a distribution for the\nAPP parameter p on each of these lines.",
    "start": "3908580",
    "end": "3913980"
  },
  {
    "text": "That leads-- you can then calculate what the\ndistribution-- or simulate what it is on the output line,\njust by seeing what's the",
    "start": "3913980",
    "end": "3921380"
  },
  {
    "text": "effect of applying the\nsum product rule. It's a much more elaborate\ncalculation, but you can do",
    "start": "3921380",
    "end": "3927300"
  },
  {
    "text": "it, or you can do it up to\nsome degree of precision. This you can't do exactly, but\nyou can do it to fourteen bits",
    "start": "3927300",
    "end": "3935950"
  },
  {
    "text": "of precision if you like. And so again, you can work\nthrough something that amounts",
    "start": "3935950",
    "end": "3944290"
  },
  {
    "text": "to plotting the progress of the\niteration through here, up",
    "start": "3944290",
    "end": "3951580"
  },
  {
    "text": "to any degree of precision\nyou want. So again, you can determine\nwhether it succeeds or fails,",
    "start": "3951580",
    "end": "3959980"
  },
  {
    "text": "again, for regular or irregular\nlow-density parity check codes.",
    "start": "3959980",
    "end": "3965589"
  },
  {
    "text": "In general, it's better\nto make it irregular. You could make it as irregular\nas you like.",
    "start": "3965590",
    "end": "3971580"
  },
  {
    "text": "And so you can see that this\ncould involve a lot of computer time to optimize\neverything, but at the end of",
    "start": "3971580",
    "end": "3981000"
  },
  {
    "text": "the day, it's basically a\nsimilar kind of hill climbing,",
    "start": "3981000",
    "end": "3987080"
  },
  {
    "text": "curve fitting exercise, where\nultimately on any of these binary input symmetric channels,\nyou can get as close",
    "start": "3987080",
    "end": "3999180"
  },
  {
    "text": "as you want to capacity. In the very first lecture, I\nshowed you what Sae-Young Chung achieved in his thesis.",
    "start": "3999180",
    "end": "4006460"
  },
  {
    "text": "He got the binary input\nadditive white Gaussian noise channel. He got under the assumption of",
    "start": "4006460",
    "end": "4014980"
  },
  {
    "text": "asymptotically long random codes. He got within 0.0045 dB\nof channel capacity.",
    "start": "4014980",
    "end": "4022290"
  },
  {
    "text": "And then for a more reasonable\nnumber, like a block length of 10 to the seventh, he\ngot within 0.040",
    "start": "4022290",
    "end": "4030970"
  },
  {
    "text": "dB of channel capacity. Now, that's still a\nlonger code than anybody's going to use.",
    "start": "4030970",
    "end": "4036109"
  },
  {
    "text": "It's a little bit of a stunt,\nbut I think his work convinced everybody that we finally had\ngotten to channel capacity.",
    "start": "4036110",
    "end": "4045070"
  },
  {
    "text": "OK, the Eta Kappa Nu\nperson is here. Please help her out, and\nwe'll see you Monday.",
    "start": "4045070",
    "end": "4050910"
  },
  {
    "start": "4050910",
    "end": "4067881"
  }
]