[
  {
    "text": "So far in constructing our timesharing system,\nwe've worked hard to build an execution environment",
    "start": "520",
    "end": "5819"
  },
  {
    "text": "that gives each process the illusion of running\non its own independent virtual machine.",
    "start": "5819",
    "end": "11490"
  },
  {
    "text": "The processes appear to run concurrently although\nwe're really quickly switching between running",
    "start": "11490",
    "end": "16080"
  },
  {
    "text": "processes on a single hardware system.\nThis often leads to better overall utilization",
    "start": "16080",
    "end": "22250"
  },
  {
    "text": "since if a particular process is waiting for\nan I/O event, we can devote the unneeded cycles",
    "start": "22250",
    "end": "27780"
  },
  {
    "text": "to running other processes.\nThe downside of timesharing is that it can",
    "start": "27780",
    "end": "33190"
  },
  {
    "text": "be hard to predict exactly how long a process\nwill take to complete since the CPU time it",
    "start": "33190",
    "end": "39300"
  },
  {
    "text": "will receive depends on how much time the\nother processes are using.",
    "start": "39300",
    "end": "44399"
  },
  {
    "text": "So we'd need to know how many other processes\nthere are, whether they're waiting for I/O",
    "start": "44399",
    "end": "48739"
  },
  {
    "text": "events, etc.\nIn a timesharing system we can't make any",
    "start": "48739",
    "end": "52660"
  },
  {
    "text": "guarantees on completion times.\nAnd we chose to have the OS play the intermediary",
    "start": "52660",
    "end": "58900"
  },
  {
    "text": "between interrupt events triggered by the\noutside world and the user-mode programs where",
    "start": "58900",
    "end": "63579"
  },
  {
    "text": "the event processing occurs.\nIn other words, we've separated event handling",
    "start": "63579",
    "end": "68810"
  },
  {
    "text": "(where the data is stored by the OS)\nand event processing (where the data is passed",
    "start": "68810",
    "end": "74249"
  },
  {
    "text": "to user-mode programs via SVCs).\nThis means that using a conventional timesharing",
    "start": "74249",
    "end": "80829"
  },
  {
    "text": "system, it's hard to ensure that event processing\nwill be complete by a specified event deadline,",
    "start": "80829",
    "end": "87270"
  },
  {
    "text": "i.e., before the end of a specified time period\nafter the event was triggered.",
    "start": "87270",
    "end": "93659"
  },
  {
    "text": "Since modern CPU chips provide inexpensive,\nhigh-performance, general-purpose computing,",
    "start": "93659",
    "end": "98678"
  },
  {
    "text": "they are often used as the \"brains\" of control\nsystems where deadlines are a fact of life.",
    "start": "98679",
    "end": "104549"
  },
  {
    "text": "For example, consider the electronic stability\ncontrol (ESC) system on modern cars.",
    "start": "104549",
    "end": "109909"
  },
  {
    "text": "This system helps drivers maintain control\nof their vehicle during steering and braking",
    "start": "109909",
    "end": "114700"
  },
  {
    "text": "maneuvers by keeping the car headed in the\ndriver's intended direction.",
    "start": "114700",
    "end": "120429"
  },
  {
    "text": "The computer at the heart of the system measures\nthe forces on the car, the direction of steering,",
    "start": "120429",
    "end": "124920"
  },
  {
    "text": "and the rotation of the wheels\nto determine if there's been a loss of control",
    "start": "124920",
    "end": "128560"
  },
  {
    "text": "due to a loss of traction, i.e., is the car\n\"spinning out\"?",
    "start": "128560",
    "end": "133620"
  },
  {
    "text": "If so, the ESC uses rapid automatic braking\nof individual wheels to prevent the car's",
    "start": "133620",
    "end": "140510"
  },
  {
    "text": "heading from veering from the driver's intended\nheading.",
    "start": "140510",
    "end": "144310"
  },
  {
    "text": "With ESC you can slam on your brakes or swerve\nto avoid an obstacle and not worry that the",
    "start": "144310",
    "end": "151020"
  },
  {
    "text": "car will suddenly fishtail out of control.\nYou can feel the system working as a chatter",
    "start": "151020",
    "end": "156380"
  },
  {
    "text": "in the brakes.\nTo be effective, the ESC system has to guarantee",
    "start": "156380",
    "end": "162840"
  },
  {
    "text": "the correct braking action at each wheel within\na certain time of receiving dangerous sensor",
    "start": "162840",
    "end": "168459"
  },
  {
    "text": "settings.\nThis means that it has to be able to guarantee",
    "start": "168460",
    "end": "171840"
  },
  {
    "text": "that certain subroutines will run to completion\nwithin some predetermined time of a sensor",
    "start": "171840",
    "end": "176959"
  },
  {
    "text": "event.\nTo be able to make these guarantees we'll",
    "start": "176960",
    "end": "180800"
  },
  {
    "text": "have to come up with a better way to schedule\nprocess execution -",
    "start": "180800",
    "end": "184870"
  },
  {
    "text": "round-robin scheduling won't get the job done!\nSystems that can make such guarantees are",
    "start": "184870",
    "end": "190569"
  },
  {
    "text": "called \"real-time systems\".\nOne measure of performance in a real-time",
    "start": "190570",
    "end": "195200"
  },
  {
    "text": "system is the interrupt latency L, the amount\nof time that elapses between a request to",
    "start": "195200",
    "end": "200300"
  },
  {
    "text": "run some code and when that code actually\nstarts executing.",
    "start": "200300",
    "end": "204560"
  },
  {
    "text": "If there's a deadline D associated with servicing\nthe request, we can compute the maximum allowable",
    "start": "204560",
    "end": "209880"
  },
  {
    "text": "latency that still permits the service routine\nto complete by the deadline.",
    "start": "209880",
    "end": "214720"
  },
  {
    "text": "In other words, what's the largest L such\nthat L_max+S = D?",
    "start": "214720",
    "end": "219410"
  },
  {
    "text": "Bad things can happen if we miss certain deadlines.\nMaybe that's why we call them \"dead\"-lines",
    "start": "219410",
    "end": "225160"
  },
  {
    "text": ":)\nIn those cases we want our real time system",
    "start": "225160",
    "end": "228310"
  },
  {
    "text": "to guarantee that the actual latency is always\nless than the maximum allowable latency.",
    "start": "228310",
    "end": "234930"
  },
  {
    "text": "These critical deadlines give rise to what\nwe call \"hard real-time constraints\".",
    "start": "234930",
    "end": "240390"
  },
  {
    "text": "What factors contribute to interrupt latency?\nWell, while handling an interrupt it takes",
    "start": "240390",
    "end": "245880"
  },
  {
    "text": "times to save the process state, switch to\nthe kernel context, and dispatch to the correct",
    "start": "245880",
    "end": "251160"
  },
  {
    "text": "interrupt handler.\nWhen writing our OS, we can work to minimize",
    "start": "251160",
    "end": "255270"
  },
  {
    "text": "the amount of code involved in the setup phase\nof an interrupt handler.",
    "start": "255270",
    "end": "259859"
  },
  {
    "text": "We also have to avoid long periods of time\nwhen the processor cannot be interrupted.",
    "start": "259859",
    "end": "264270"
  },
  {
    "text": "Some ISAs have complex multi-cycle instructions,\ne.g., block move instructions where a single",
    "start": "264270",
    "end": "270490"
  },
  {
    "text": "instruction makes many memory accesses as\nit moves a block of data from one location",
    "start": "270490",
    "end": "275870"
  },
  {
    "text": "to another.\nIn designing the ISA, we need to avoid such",
    "start": "275870",
    "end": "279270"
  },
  {
    "text": "instructions or design them so that they can\nbe interrupted and restarted.",
    "start": "279270",
    "end": "283520"
  },
  {
    "text": "The biggest problem comes when we're executing\nanother interrupt handler in kernel mode.",
    "start": "283520",
    "end": "288759"
  },
  {
    "text": "In kernel mode, interrupts are disabled, so\nthe actual latency will be determined by the",
    "start": "288759",
    "end": "293560"
  },
  {
    "text": "time it takes to complete the current interrupt\nhandler in addition to the other costs mentioned",
    "start": "293560",
    "end": "298230"
  },
  {
    "text": "above.\nThis latency is not under the control of the",
    "start": "298230",
    "end": "302490"
  },
  {
    "text": "CPU designer and will depend on the particular\napplication.",
    "start": "302490",
    "end": "307479"
  },
  {
    "text": "Writing programs with hard real-time constraints\ncan get complicated!",
    "start": "307479",
    "end": "312710"
  },
  {
    "text": "Our goal is to bound and minimize interrupt\nlatency.",
    "start": "312710",
    "end": "315960"
  },
  {
    "text": "We'll do this by optimizing the cost of taking\nan interrupt and dispatching to the correct",
    "start": "315960",
    "end": "320650"
  },
  {
    "text": "handler code.\nWe'll avoid instructions whose execution time",
    "start": "320650",
    "end": "324729"
  },
  {
    "text": "is data dependent.\nAnd we'll work to minimize the time spent",
    "start": "324729",
    "end": "328389"
  },
  {
    "text": "in kernel mode.\nBut even with all these measures, we'll see",
    "start": "328389",
    "end": "332490"
  },
  {
    "text": "that in some cases we'll have to modify our\nsystem to allow interrupts even in kernel",
    "start": "332490",
    "end": "337460"
  },
  {
    "text": "mode.\nNext we'll look at some concrete examples",
    "start": "337460",
    "end": "341460"
  },
  {
    "text": "and see what mechanisms are required to make\nguarantees about hard real-time constraints.",
    "start": "341460",
    "end": "346819"
  }
]