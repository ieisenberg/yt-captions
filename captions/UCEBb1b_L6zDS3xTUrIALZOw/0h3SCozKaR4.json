[
  {
    "start": "0",
    "end": "53000"
  },
  {
    "text": "In this problem, we are going to consider\nseveral instructions that we want to add to",
    "start": "729",
    "end": "5470"
  },
  {
    "text": "our beta.",
    "start": "5470",
    "end": "6870"
  },
  {
    "text": "For each of these instructions, we will need\nto decide what the minimum requirement is",
    "start": "6870",
    "end": "11948"
  },
  {
    "text": "to add that instruction.",
    "start": "11949",
    "end": "14539"
  },
  {
    "text": "The simplest addition would be a macro that\nreferences a single already existing beta",
    "start": "14539",
    "end": "19859"
  },
  {
    "text": "instruction.",
    "start": "19859",
    "end": "21789"
  },
  {
    "text": "If our new instruction cannot be implemented\nby simply defining a macro, then we want to",
    "start": "21789",
    "end": "27589"
  },
  {
    "text": "consider whether adding a new opcode, and\nproducing the appropriate control ROM signals",
    "start": "27589",
    "end": "33270"
  },
  {
    "text": "for it, will enable the new operation to be\nexecuted on our existing Beta datapaths.",
    "start": "33270",
    "end": "39969"
  },
  {
    "text": "Finally, if neither the macro or Control ROM\nsolutions work, then we need to specify that",
    "start": "39969",
    "end": "46590"
  },
  {
    "text": "the instruction cannot be implemented without\nmaking actual hardware changes to the Beta.",
    "start": "46590",
    "end": "56949"
  },
  {
    "start": "53000",
    "end": "88000"
  },
  {
    "text": "The first instruction that we want to consider\nadding to our Beta is a SWAPR instruction",
    "start": "56949",
    "end": "62730"
  },
  {
    "text": "which swaps the contents of registers Rx and\nRy in a single clock cycle.",
    "start": "62730",
    "end": "69190"
  },
  {
    "text": "The constraint that this must be done in a\nsingle clock cycle points us to the fact that",
    "start": "69190",
    "end": "73870"
  },
  {
    "text": "the Beta hardware does not have the ability\nto write to two different registers in the",
    "start": "73870",
    "end": "79000"
  },
  {
    "text": "same clock cycle.",
    "start": "79000",
    "end": "80540"
  },
  {
    "text": "Thus, in order to add this instruction to\nthe Beta, new hardware would need to be added.",
    "start": "80540",
    "end": "89220"
  },
  {
    "start": "88000",
    "end": "141000"
  },
  {
    "text": "The next instruction that we want to consider\nadding to our beta is a NEG instruction.",
    "start": "89220",
    "end": "94880"
  },
  {
    "text": "This instruction should take the two's complement\nnegation of register Rx and store it into",
    "start": "94880",
    "end": "100860"
  },
  {
    "text": "register Ry.",
    "start": "100860",
    "end": "102790"
  },
  {
    "text": "The first question we want to ask ourselves\nis whether or not we might be able to implement",
    "start": "102790",
    "end": "107770"
  },
  {
    "text": "this using a macro.",
    "start": "107770",
    "end": "111670"
  },
  {
    "text": "Since all we are trying to do is produce the\nnegative of a given value, we can write a",
    "start": "111670",
    "end": "116290"
  },
  {
    "text": "macro for this instruction which subtracts\nRx from R31 and stores that result into Ry.",
    "start": "116290",
    "end": "123950"
  },
  {
    "text": "Note that this macro will not work for the\ncorner case which is the largest representable",
    "start": "123950",
    "end": "128670"
  },
  {
    "text": "negative number because the negation of that\nnumber cannot be represented using 32-bit",
    "start": "128670",
    "end": "134040"
  },
  {
    "text": "two's complement representation.",
    "start": "134040",
    "end": "136569"
  },
  {
    "text": "For all other cases, however, this macro works\nas expected.",
    "start": "136569",
    "end": "143680"
  },
  {
    "start": "141000",
    "end": "366000"
  },
  {
    "text": "The next instruction that we want to consider\nadding to our Beta is a PC-relative store",
    "start": "143680",
    "end": "149420"
  },
  {
    "text": "instruction.",
    "start": "149420",
    "end": "150420"
  },
  {
    "text": "The way this instruction works is that it\nwrites the contents of register Rx to a location",
    "start": "150420",
    "end": "155519"
  },
  {
    "text": "in memory whose address is computed by adding\nPC + 4 + 4*SEXT(C).",
    "start": "155519",
    "end": "164950"
  },
  {
    "text": "The only existing store operation in the beta\nis a store that writes to the address that",
    "start": "164950",
    "end": "170260"
  },
  {
    "text": "is computed by adding the contents of register\nRy and the sign extended literal C.",
    "start": "170260",
    "end": "176569"
  },
  {
    "text": "Since this is not equivalent to the store\nrelative instruction's behavior that means",
    "start": "176569",
    "end": "181420"
  },
  {
    "text": "that we cannot implement this instruction\nas a macro.",
    "start": "181420",
    "end": "185310"
  },
  {
    "text": "So next we consider whether or not we can\nimplement this instruction using our existing",
    "start": "185310",
    "end": "189930"
  },
  {
    "text": "Beta datapaths.",
    "start": "189930",
    "end": "192329"
  },
  {
    "text": "This beta diagram highlights in red the dataflow\nthrough the existing Beta datapaths that would",
    "start": "192329",
    "end": "199480"
  },
  {
    "text": "perform the desired PC relative store instruction.",
    "start": "199480",
    "end": "203459"
  },
  {
    "text": "The way this instruction works is that the\nextra adder under the instruction memory is",
    "start": "203459",
    "end": "208599"
  },
  {
    "text": "used to compute the value of the effective\naddress which is PC + 4 + 4*SEXT(C).",
    "start": "208599",
    "end": "216120"
  },
  {
    "text": "The ASEL, or A select signal is then set to\n1 to pass that value to the ALU as the A operand.",
    "start": "216120",
    "end": "224879"
  },
  {
    "text": "The ALUFN is then set to A to continue passing\nthat value through the ALU in order for it",
    "start": "224879",
    "end": "231409"
  },
  {
    "text": "to be used as the address for the data memory.",
    "start": "231409",
    "end": "234900"
  },
  {
    "text": "This address is labeled MA, or memory address\nin the beta diagram.",
    "start": "234900",
    "end": "240019"
  },
  {
    "text": "The value that is written to memory is the\nvalue of register Rx.",
    "start": "240019",
    "end": "244939"
  },
  {
    "text": "In store operations, the first operand corresponds\nto register Rc.",
    "start": "244939",
    "end": "250730"
  },
  {
    "text": "So we set RA2SEL = 1 in order to select Rc,\nwhich is Rx in this case, as the register",
    "start": "250730",
    "end": "258790"
  },
  {
    "text": "whose contents should be written to memory.",
    "start": "258790",
    "end": "262190"
  },
  {
    "text": "The value of this register is made available\nvia the RD2 register file port which then",
    "start": "262190",
    "end": "268060"
  },
  {
    "text": "feeds the MWD, or memory write data signal\nfor the memory.",
    "start": "268060",
    "end": "273639"
  },
  {
    "text": "There are a couple other memory related signals\nthat we need to set appropriately.",
    "start": "273640",
    "end": "277940"
  },
  {
    "text": "They are MWR, which stands for memory write\nread, and controls the write enable of the",
    "start": "277940",
    "end": "283171"
  },
  {
    "text": "data memory.",
    "start": "283171",
    "end": "284530"
  },
  {
    "text": "In order to be able to write to the memory,\nthe write enable must be set to 1.",
    "start": "284530",
    "end": "289650"
  },
  {
    "text": "MOE is the memory output enable.",
    "start": "289650",
    "end": "292699"
  },
  {
    "text": "We set this to 0 to specify that no output\nshould be enabled from the memory.",
    "start": "292700",
    "end": "297770"
  },
  {
    "text": "Note that you may think that MOE should be\na don't care since we are never making use",
    "start": "297770",
    "end": "302660"
  },
  {
    "text": "of the MRD, or memory read data, signal in\nour datapath.",
    "start": "302660",
    "end": "306540"
  },
  {
    "text": "However, by setting it to 0 we allow ourselves\nto potentially use the same databus for the",
    "start": "306540",
    "end": "312610"
  },
  {
    "text": "read and write data of the memory.",
    "start": "312610",
    "end": "315259"
  },
  {
    "text": "This is not explicitly shown in our beta diagram\nbut is the reason that MOE is specified as",
    "start": "315260",
    "end": "320780"
  },
  {
    "text": "0 for us.",
    "start": "320780",
    "end": "323139"
  },
  {
    "text": "The other control signal that we must set\nto 0 is WERF, which stands for write enable",
    "start": "323140",
    "end": "327790"
  },
  {
    "text": "register file.",
    "start": "327790",
    "end": "329760"
  },
  {
    "text": "Setting this signal to 0 ensures that no value\nwill be written back into our register file.",
    "start": "329760",
    "end": "335290"
  },
  {
    "text": "This allows us to then set WDSEL and WASEL\nto don't cares.",
    "start": "335290",
    "end": "341200"
  },
  {
    "text": "The last control signal is BSEL which is also\na don't care because the B operand is ignored",
    "start": "341200",
    "end": "347580"
  },
  {
    "text": "by the ALU for this instruction.",
    "start": "347580",
    "end": "350389"
  },
  {
    "text": "Finally, the PCSEL = 0 in order to increment\nthe PC by 4 so that the next instruction will",
    "start": "350390",
    "end": "357930"
  },
  {
    "text": "be fetched.",
    "start": "357930",
    "end": "361860"
  },
  {
    "text": "So our completed Control ROM for the STR operation\nis shown here.",
    "start": "361860",
    "end": "367639"
  },
  {
    "start": "366000",
    "end": "579000"
  },
  {
    "text": "The last instruction we want to add to our\nbeta is the BITCLR(Rx, Ry, Rz) instruction.",
    "start": "367640",
    "end": "374910"
  },
  {
    "text": "This instruction performs a bitwise AND of\nthe contents of register Ry with the complement",
    "start": "374910",
    "end": "380550"
  },
  {
    "text": "of the contents of register Rx.",
    "start": "380550",
    "end": "382879"
  },
  {
    "text": "There is no existing beta instruction that\nperforms this functionality so using a macro",
    "start": "382880",
    "end": "388990"
  },
  {
    "text": "is not an option.",
    "start": "388990",
    "end": "390530"
  },
  {
    "text": "Next, we want to consider whether or not we\ncould implement this instruction using our",
    "start": "390530",
    "end": "395310"
  },
  {
    "text": "existing datapaths with changes to our control\nROM.",
    "start": "395310",
    "end": "399470"
  },
  {
    "text": "To answer this question, you need to realize\nthat the operation that you are trying to",
    "start": "399470",
    "end": "404500"
  },
  {
    "text": "perform here is a boolean operation.",
    "start": "404500",
    "end": "409560"
  },
  {
    "text": "In module 1, when implementing the ALU lab,\nwe learned that the way that the bool module",
    "start": "409560",
    "end": "415440"
  },
  {
    "text": "works is that if you set the ALUFN to 10abcd,\nthen the ALU would produce the output defined",
    "start": "415440",
    "end": "424640"
  },
  {
    "text": "by this truth table for every pair of bits\nBi and Ai.",
    "start": "424640",
    "end": "431080"
  },
  {
    "text": "So for example, to implement the AND function,\nwe simply set a = 1, b = 0, c = 0, and d = 0",
    "start": "431080",
    "end": "440800"
  },
  {
    "text": "as shown in this truth table which is the\ntruth table for an AND function.",
    "start": "440800",
    "end": "446120"
  },
  {
    "text": "The truth table for the BITCLR operation is\nshown here.",
    "start": "446120",
    "end": "452110"
  },
  {
    "text": "One additional column, NOT(Rx)[i] has been\nadded to show the intermediate step of negating",
    "start": "452110",
    "end": "458419"
  },
  {
    "text": "Rx[i].",
    "start": "458420",
    "end": "460220"
  },
  {
    "text": "Then if you take the AND of the Ry[i] column\nand the Not(Rx)[i] columns you get the result",
    "start": "460220",
    "end": "467270"
  },
  {
    "text": "Rz[i].",
    "start": "467270",
    "end": "469550"
  },
  {
    "text": "This means that the ALUFN for the BITCLR operation\nis 10 followed by 0100.",
    "start": "469550",
    "end": "476889"
  },
  {
    "text": "The rest of the control signals can be determined\nby looking at this highlighted beta diagram",
    "start": "476890",
    "end": "484620"
  },
  {
    "text": "which shows in red the paths that must be\nfollowed in order to properly implement the",
    "start": "484620",
    "end": "489290"
  },
  {
    "text": "BITCLR operation.",
    "start": "489290",
    "end": "490720"
  },
  {
    "text": "The instruction memory specifies the registers\nRa and Rb, in our case Rx and Ry, that are",
    "start": "490720",
    "end": "497580"
  },
  {
    "text": "to be used by this operation.",
    "start": "497580",
    "end": "500539"
  },
  {
    "text": "Setting RA2SEL to 0 tells the register file\nto read Rb, or Ry, as the second operand.",
    "start": "500540",
    "end": "508810"
  },
  {
    "text": "Then setting ASEL and BSEL to 0 passes the\nvalues of Rx and Ry to the ALU.",
    "start": "508810",
    "end": "515249"
  },
  {
    "text": "The ALUFN is used to specify the particular\nboolean operation that we are performing.",
    "start": "515249",
    "end": "522649"
  },
  {
    "text": "Then WDSEL = 1 in order to feed the results\nof the ALU back to the register file.",
    "start": "522649",
    "end": "529920"
  },
  {
    "text": "The Rc register is Rz and it is the register\nthat the result should be written to.",
    "start": "529920",
    "end": "535779"
  },
  {
    "text": "To make that happen, we set WASEL = 0, and\nWERF = 1.",
    "start": "535779",
    "end": "542019"
  },
  {
    "text": "To avoid anything being written to the data\nmemory, MWR is set to 0.",
    "start": "542019",
    "end": "547730"
  },
  {
    "text": "MOE can be a don't care because we are not\nusing the memory for reading or writing and",
    "start": "547730",
    "end": "553240"
  },
  {
    "text": "setting WDSEL to 1 ignores anything that is\non the MRD, or memory read data, line.",
    "start": "553240",
    "end": "561199"
  },
  {
    "text": "Finally, the PCSEL = 0 in order to increment\nthe PC by 4 so that the next instruction will",
    "start": "561199",
    "end": "568420"
  },
  {
    "text": "be fetched.",
    "start": "568420",
    "end": "571040"
  },
  {
    "text": "So our completed Control ROM for the BITCLR\noperation is shown here.",
    "start": "571040",
    "end": "575980"
  }
]