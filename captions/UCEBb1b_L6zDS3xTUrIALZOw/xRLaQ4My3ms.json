[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6330"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6330",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13320",
    "end": "18430"
  },
  {
    "text": " [MUSIC PLAYING]",
    "start": "18430",
    "end": "48345"
  },
  {
    "text": "PROFESSOR: In the\nlast lecture, we introduced an alternative\nset of algorithms",
    "start": "48345",
    "end": "53820"
  },
  {
    "text": "for computation of the\nfast Fourier transform or rather, computation of the\ndiscrete Fourier transform.",
    "start": "53820",
    "end": "60930"
  },
  {
    "text": "And we refer to these as\nthe decimation in frequency form of the algorithm.",
    "start": "60930",
    "end": "66990"
  },
  {
    "text": "As you recall, we\ndeveloped the decimation in frequency form\nof the algorithm",
    "start": "66990",
    "end": "73380"
  },
  {
    "text": "by essentially organizing\nthe computation of the even numbered DFT points and the odd\nnumbered DFT points separately",
    "start": "73380",
    "end": "84390"
  },
  {
    "text": "and then proceeded\nin a similar manner. This corresponded to breaking\nthe computation into two",
    "start": "84390",
    "end": "91290"
  },
  {
    "text": "and over two point DFT's\nproceeded in a similar manner to decompose the computation\nof these separately",
    "start": "91290",
    "end": "98910"
  },
  {
    "text": "into their even numbered points\nand odd numbered points, et cetera. And the flow graph that resulted\nfrom this procedure was--",
    "start": "98910",
    "end": "108690"
  },
  {
    "text": "as I've shown here-- which is one form,\nthen, of the decimation",
    "start": "108690",
    "end": "115540"
  },
  {
    "text": "in frequency form of the fast\nFourier transform algorithm.",
    "start": "115540",
    "end": "121890"
  },
  {
    "text": "It begins with the data sorted\nin normal order and proceeds",
    "start": "121890",
    "end": "128699"
  },
  {
    "text": "to the data sorted in\nbig reversed order. And as I stressed\nlast time, it also",
    "start": "128699",
    "end": "134940"
  },
  {
    "text": "corresponds to an in-place\ncomputation because of the way in which the butterflies\nare laid out.",
    "start": "134940",
    "end": "142410"
  },
  {
    "text": "In particular, the output\nnodes for each butterfly are horizontally adjacent\nto the input nodes.",
    "start": "142410",
    "end": "150300"
  },
  {
    "text": "Now this is similar in\na number of respects to one of the decimation in\ntime forms of the FFT algorithm.",
    "start": "150300",
    "end": "161070"
  },
  {
    "text": "Although, as I also\nindicated last time, the basic structure of\nthe butterfly computation",
    "start": "161070",
    "end": "167280"
  },
  {
    "text": "is somewhat different. In particular, for\nthis set of algorithms,",
    "start": "167280",
    "end": "173510"
  },
  {
    "text": "the multiplication\nby powers of W is implemented at the\noutput of the butterfly,",
    "start": "173510",
    "end": "179850"
  },
  {
    "text": "as opposed to the\ndecimation in time forms, where the multiplication\nby powers of W",
    "start": "179850",
    "end": "185430"
  },
  {
    "text": "are implemented at the\ninput to the butterfly. However, there is a\nvery close relationship",
    "start": "185430",
    "end": "192900"
  },
  {
    "text": "between this flow graph\nand the original flow graph that we implemented for the\ndecimation in time algorithm.",
    "start": "192900",
    "end": "203160"
  },
  {
    "text": "In particular, the\ntwo flow graphs are transposes of each other.",
    "start": "203160",
    "end": "208629"
  },
  {
    "text": "Now I remind you that in\none of the early lectures, when we introduced the notation\nof flow graphs and some",
    "start": "208630",
    "end": "216360"
  },
  {
    "text": "of the properties\nof flow graphs, one of the properties of flow\ngraphs that I mentioned--",
    "start": "216360",
    "end": "222780"
  },
  {
    "text": "although we didn't derive it-- was the fact that\ntransposition of a flow graph",
    "start": "222780",
    "end": "228120"
  },
  {
    "text": "doesn't change the input\noutput characteristics. So then in fact, if we took\nthis flow graph, changed",
    "start": "228120",
    "end": "236550"
  },
  {
    "text": "the direction of\nall of the arrows, treated this set of\nnodes as the input nodes",
    "start": "236550",
    "end": "242640"
  },
  {
    "text": "and this set of nodes\nas the output nodes, then since the flow graph,\nas it's indicated here,",
    "start": "242640",
    "end": "249660"
  },
  {
    "text": "computes the discrete\nFourier transform, the transposed flow\ngraph would also",
    "start": "249660",
    "end": "255120"
  },
  {
    "text": "compute the discrete\nFourier transform. And in fact, the transposition\nof this flow graph",
    "start": "255120",
    "end": "261269"
  },
  {
    "text": "is identical to the\nfirst flow graph-- FFT flow graph--\nthat we introduced,",
    "start": "261269",
    "end": "268260"
  },
  {
    "text": "which was the initial\ndecimation in time form. And that I refer\nyou to again, here.",
    "start": "268260",
    "end": "277410"
  },
  {
    "text": "So this is the\ndecimation in time form of the algorithm with\nthe input bit reversed",
    "start": "277410",
    "end": "284490"
  },
  {
    "text": "and the output in normal order. This is the transposition\nof this flow graph, which",
    "start": "284490",
    "end": "295710"
  },
  {
    "text": "is the decimation in frequency\nform of the algorithm with the input in normal\norder and the output in bit",
    "start": "295710",
    "end": "302880"
  },
  {
    "text": "reversed order. The fact that these are\nrelated through transposition",
    "start": "302880",
    "end": "308430"
  },
  {
    "text": "of the flow graph isn't a\nparticularly important point from a practical point of view.",
    "start": "308430",
    "end": "314310"
  },
  {
    "text": "But it is a useful\npiece of insight into the relationship between\nthese various algorithms.",
    "start": "314310",
    "end": "322321"
  },
  {
    "text": "All right, now just as we\ndid with the decimation in time forms of\nthe algorithm, we",
    "start": "322321",
    "end": "329580"
  },
  {
    "text": "can rearrange the decimation in\nfrequency form of the algorithm",
    "start": "329580",
    "end": "334590"
  },
  {
    "text": "to either arrange the output to\nbe in normal order, as opposed",
    "start": "334590",
    "end": "341790"
  },
  {
    "text": "to having the input\nin normal order, or rearrange it so that both\nthe input and output are",
    "start": "341790",
    "end": "347010"
  },
  {
    "text": "in normal order or\nrearrange it as we will, so that we can utilize\nsequential memory rather",
    "start": "347010",
    "end": "354090"
  },
  {
    "text": "than random access memory. To rearrange the flow\ngraph so that the output is",
    "start": "354090",
    "end": "360210"
  },
  {
    "text": "in normal order, we\nwould, again, simply take horizontal lines\nand re-sort them",
    "start": "360210",
    "end": "367919"
  },
  {
    "text": "so that the output nodes are\nsorted in a normal order.",
    "start": "367920",
    "end": "373680"
  },
  {
    "text": "And the flow graph\nthat results is a decimation in frequency\nform of the algorithm,",
    "start": "373680",
    "end": "384120"
  },
  {
    "text": "for which the outputs\nare in normal order.",
    "start": "384120",
    "end": "390030"
  },
  {
    "text": "But the inputs are in\nbit reversed order.",
    "start": "390030",
    "end": "395520"
  },
  {
    "text": "Again, as this flow\ngraph has been sorted, it is an in-place computation.",
    "start": "395520",
    "end": "402180"
  },
  {
    "text": "In-place, again, because\nthe butterflies are laid out in such a way that they involve\nhorizontally adjacent nodes.",
    "start": "402180",
    "end": "410280"
  },
  {
    "text": "So this is an\nin-place computation with the input in\nbit reversed order",
    "start": "410280",
    "end": "415860"
  },
  {
    "text": "and the output in normal order. Again this is a transposition\nof one of the flow graphs",
    "start": "415860",
    "end": "430170"
  },
  {
    "text": "that we discussed in\nthe previous lecture. In particular, it is a\ntransposition of the flow graph",
    "start": "430170",
    "end": "436860"
  },
  {
    "text": "for which, if you imagine this\nflow graph being transposed so that the direction of\nthe arrows are reversed",
    "start": "436860",
    "end": "443430"
  },
  {
    "text": "and this is the input,\nthen it corresponds to the decimation in time form\nof the algorithm for which",
    "start": "443430",
    "end": "449880"
  },
  {
    "text": "the input is in normal order\nand the output comes out in bit reversed order.",
    "start": "449880",
    "end": "456280"
  },
  {
    "text": "And that is the flow graph\nthat I have indicated here.",
    "start": "456280",
    "end": "462720"
  },
  {
    "text": "So this is a decimation in time\nform of the algorithm, which is the transposition of\nthe decimation in frequency",
    "start": "462720",
    "end": "472710"
  },
  {
    "text": "form of the algorithm\nthat we just looked at.",
    "start": "472710",
    "end": "478229"
  },
  {
    "text": "All right, that corresponds\nthen to two possible decimation",
    "start": "478230",
    "end": "485320"
  },
  {
    "text": "in frequency algorithms. One in which the input\nis in normal order, the output is bit reversed.",
    "start": "485320",
    "end": "491850"
  },
  {
    "text": "This one in which the input\nis bit reversed and the output is in normal order.",
    "start": "491850",
    "end": "497190"
  },
  {
    "text": "We can also rearrange\nthis so that the input is in normal order and the\noutput is in normal order.",
    "start": "497190",
    "end": "504300"
  },
  {
    "text": "And the flow graph that\nresults when we implement that is similar to the corresponding\ndecimation in time flow graph.",
    "start": "504300",
    "end": "515500"
  },
  {
    "text": "In fact, it is a transposition\nof that flow graph.",
    "start": "515500",
    "end": "520530"
  },
  {
    "text": "And just as we found in the\ndecimation in time algorithm, for this case, although the\ninput is sorted in normal order",
    "start": "520530",
    "end": "529440"
  },
  {
    "text": "and the output comes\nout in normal order, the indexing is\ngenerally complicated",
    "start": "529440",
    "end": "536190"
  },
  {
    "text": "as we proceed from\nstage to stage. And furthermore, it\ndoes not correspond",
    "start": "536190",
    "end": "541980"
  },
  {
    "text": "to an in-place computation,\nbecause of the fact that the outputs\nof the butterflies",
    "start": "541980",
    "end": "549990"
  },
  {
    "text": "are no longer horizontally\nadjacent to the inputs to the butterfly.",
    "start": "549990",
    "end": "555810"
  },
  {
    "text": "So generally, this flow\ngraph and its decimation in time counterpart are not\npractically very important.",
    "start": "555810",
    "end": "566500"
  },
  {
    "text": "A final rearrangement\nof the flow graph is the rearrangement\nwhich permits",
    "start": "566500",
    "end": "576390"
  },
  {
    "text": "the use of sequential memory\nrather than random access",
    "start": "576390",
    "end": "581490"
  },
  {
    "text": "memory. And this, then,\nis the flow graph that is the counterpart\nto the flow graph",
    "start": "581490",
    "end": "589019"
  },
  {
    "text": "that we discussed last\ntime, which I referred to as the Singleton algorithm,\nor I attributed to Singleton.",
    "start": "589020",
    "end": "596460"
  },
  {
    "text": "This is a variation of\nthat type of algorithm,",
    "start": "596460",
    "end": "602210"
  },
  {
    "text": "in which now, again, we\nrecognize that the indexing is",
    "start": "602210",
    "end": "607350"
  },
  {
    "text": "identical from stage to stage. The input is in normal order.",
    "start": "607350",
    "end": "614370"
  },
  {
    "text": "And the output comes out\nin bit reversed order. And let me just\ncompare this for you",
    "start": "614370",
    "end": "621270"
  },
  {
    "text": "with the corresponding\nflow graph that we had last time,\nwhich I've indicated here.",
    "start": "621270",
    "end": "629370"
  },
  {
    "text": "That has the input\nin bit reversed order, the output\nin normal order. In fact, the transposition\nof this flow graph",
    "start": "629370",
    "end": "637440"
  },
  {
    "text": "is the decimation\nin frequency form of the algorithm, for which\nthe input is in normal order,",
    "start": "637440",
    "end": "644399"
  },
  {
    "text": "and the output is in\nbit reversed order. All right, so the indexing is\nidentical from stage to stage.",
    "start": "644400",
    "end": "652019"
  },
  {
    "text": "And just as we\nhad previously, we can implement this\nalgorithm by utilizing",
    "start": "652020",
    "end": "659010"
  },
  {
    "text": "sequential memory as opposed\nto random access memory. Although the organization of\nthe memory for the decimation",
    "start": "659010",
    "end": "666570"
  },
  {
    "text": "in frequency form of\nthe Singleton algorithm is somewhat different\nthan the organization",
    "start": "666570",
    "end": "673230"
  },
  {
    "text": "of the memory for the decimation\nin time form of the Singleton algorithm.",
    "start": "673230",
    "end": "678420"
  },
  {
    "text": "In particular, last time when\nwe discussed the decimation in time algorithm, we had four\nmemories, as we will this time.",
    "start": "678420",
    "end": "688680"
  },
  {
    "text": "The first half of\nthe data in memory A, the second half of\nthe memory in memory B. We went, first of all,\nthrough all of memory A,",
    "start": "688680",
    "end": "697170"
  },
  {
    "text": "then through all of memory B,\nstoring results alternatively in memories C and D.",
    "start": "697170",
    "end": "704430"
  },
  {
    "text": "In this case, the strategy\nin utilizing the memory is somewhat different.",
    "start": "704430",
    "end": "710440"
  },
  {
    "text": "In this case, we store the first\nhalf of the data points, again,",
    "start": "710440",
    "end": "717910"
  },
  {
    "text": "in memory A, the\nsecond half of the data points, again, in memory\nB. But notice that now",
    "start": "717910",
    "end": "724810"
  },
  {
    "text": "in the computation utilizing\nthe computation for this point,",
    "start": "724810",
    "end": "731470"
  },
  {
    "text": "for example, we use the first\noutput point from memory A",
    "start": "731470",
    "end": "736930"
  },
  {
    "text": "and the first output\npoint from memory b. We store the result in the\nfirst register in memory C",
    "start": "736930",
    "end": "746230"
  },
  {
    "text": "and in the second\nregister in memory C. Then, to compute\nthe next two points,",
    "start": "746230",
    "end": "752709"
  },
  {
    "text": "we take the next\npoint from memory A and the next point\nfrom memory B,",
    "start": "752710",
    "end": "762550"
  },
  {
    "text": "do the appropriate addition\nand subtraction, multiplication by powers of W, and store\nthose in the next two registers",
    "start": "762550",
    "end": "772360"
  },
  {
    "text": "in memory C. For this\nparticular example, namely n equals eight,\nthat fills up memory C.",
    "start": "772360",
    "end": "778300"
  },
  {
    "text": "And we proceed, likewise,\naccessing the input data, alternating between\nthe two input memories",
    "start": "778300",
    "end": "785650"
  },
  {
    "text": "and storing data first in all\nof one of the output memories and then in all of the second\nof the output memories.",
    "start": "785650",
    "end": "794230"
  },
  {
    "text": "And then we proceed in that\nfashion from stage to stage. But again, one of\nthe important aspects",
    "start": "794230",
    "end": "801040"
  },
  {
    "text": "is that it utilizes\nsequential memory, for example, disk or drum or\ntape or shift register memory.",
    "start": "801040",
    "end": "808180"
  },
  {
    "text": " OK, so this then is\nessentially a picture",
    "start": "808180",
    "end": "822090"
  },
  {
    "text": "of a variety of the\nalgorithms, which can be used for the computation\nof the discrete Fourier",
    "start": "822090",
    "end": "829620"
  },
  {
    "text": "transform, some of\nwhich were derived on the basis of a\ndecimation in time argument.",
    "start": "829620",
    "end": "836250"
  },
  {
    "text": "Some were derived on the basis\nof a decimation in frequency argument.",
    "start": "836250",
    "end": "841740"
  },
  {
    "text": "But we saw, in fact, that the\ndecimation in frequency forms of the algorithm are,\nin terms of flow graph",
    "start": "841740",
    "end": "848580"
  },
  {
    "text": "notation or\ninterpretation, transposes of the decimation in time form.",
    "start": "848580",
    "end": "855750"
  },
  {
    "text": "What I would like\nto discuss now are a few of the\ncomputational issues that",
    "start": "855750",
    "end": "863820"
  },
  {
    "text": "are involved in the implementing\nthe fast Fourier transform",
    "start": "863820",
    "end": "868980"
  },
  {
    "text": "algorithm and return, also, to\na brief discussion of at least",
    "start": "868980",
    "end": "875850"
  },
  {
    "text": "one situation in which\nthere is a preference for using decimation in time or\nusing decimation in frequency.",
    "start": "875850",
    "end": "885660"
  },
  {
    "text": "After we've discussed\nsome of the computational considerations, I will then\njust very briefly discuss",
    "start": "885660",
    "end": "893519"
  },
  {
    "text": "the generalization of the fast\nFourier transform algorithm to situations in which\nthe number of data points",
    "start": "893520",
    "end": "901350"
  },
  {
    "text": "is not a power of\ntwo, but is a more arbitrary composite number.",
    "start": "901350",
    "end": "907260"
  },
  {
    "text": "Well first of all,\nthen, let me introduce a few of the\ncomputational issues",
    "start": "907260",
    "end": "914279"
  },
  {
    "text": "that I would like to\ndraw your attention to. The first is-- and it's a point\nthat I raised in the first",
    "start": "914280",
    "end": "924450"
  },
  {
    "text": "lecture, in which I introduced\nthe fast Fourier transform algorithm-- that whereas our discussion\nhas been directed entirely",
    "start": "924450",
    "end": "932730"
  },
  {
    "text": "toward the computation\nof the DFT, it applies also, in a\nvery straightforward way,",
    "start": "932730",
    "end": "940470"
  },
  {
    "text": "to a computation\nof the inverse DFT. In particular, we know that\nthe inverse discrete Fourier",
    "start": "940470",
    "end": "949110"
  },
  {
    "text": "transform relationship is given\nby 1 over N times the sum of x",
    "start": "949110",
    "end": "954750"
  },
  {
    "text": "of k W sub-N to the minus NK. In contrast to the discrete\nFourier transform--",
    "start": "954750",
    "end": "962130"
  },
  {
    "text": "that is the forward transform-- which does not have\nthe factor of 1 over N",
    "start": "962130",
    "end": "967200"
  },
  {
    "text": "and involves multiplication by\nW sub-N to the plus NK, rather",
    "start": "967200",
    "end": "974080"
  },
  {
    "text": "than W sub-N to the minus NK. To use the algorithms\nthat we have just",
    "start": "974080",
    "end": "983280"
  },
  {
    "text": "been discussing\nfor the computation of the inverse discrete\nFourier transform,",
    "start": "983280",
    "end": "990690"
  },
  {
    "text": "the modification is\nrelatively straightforward. First of all, it\ninvolves a factor of 1",
    "start": "990690",
    "end": "996180"
  },
  {
    "text": "over N, which we can\naccommodate in a number of ways. One is, of course, by\nshifting the output",
    "start": "996180",
    "end": "1003920"
  },
  {
    "text": "or by applying scaling at each\nstage of the FFT, for example.",
    "start": "1003920",
    "end": "1010190"
  },
  {
    "text": "So this factor of 1 over\nN is easily accommodated. And the other difference\nis the inclusion",
    "start": "1010190",
    "end": "1021140"
  },
  {
    "text": "of a minus sign in the\nexponent in powers of W rather than a plus sign\nfor the forward transform.",
    "start": "1021140",
    "end": "1029060"
  },
  {
    "text": "That means, in essence,\nthat these coefficients",
    "start": "1029060",
    "end": "1034099"
  },
  {
    "text": "are the complex conjugate\nof these coefficients. Because W sub-capital N is e\nof the J two pi over capital N.",
    "start": "1034099",
    "end": "1047720"
  },
  {
    "text": "This minus sign represents\na conjugation of W. And so one procedure that we\ncan follow for implementing",
    "start": "1047720",
    "end": "1056870"
  },
  {
    "text": "the inverse discrete Fourier\ntransform using all of the flow graphs that we've talked\nabout is simply conjugate",
    "start": "1056870",
    "end": "1066650"
  },
  {
    "text": "the powers of W that are\ninvolved in the computation.",
    "start": "1066650",
    "end": "1071960"
  },
  {
    "text": "An alternative procedure,\nwhich is basically equivalent, is to use the flow graphs\nas they stand, in which case",
    "start": "1071960",
    "end": "1082070"
  },
  {
    "text": "the output data,\nwhich is obtained, is the desired result with\nlittle n replaced by minus n.",
    "start": "1082070",
    "end": "1093110"
  },
  {
    "text": "So we can either\ncompute the inverse DFT from an algorithm, which is\naimed at the forward DFT,",
    "start": "1093110",
    "end": "1102650"
  },
  {
    "text": "by conjugating the\ncoefficients or equivalently by essentially flipping the\noutput, modulo capital N. So",
    "start": "1102650",
    "end": "1113360"
  },
  {
    "text": "all of the algorithms that\nwe have talked about, then, relate in a very\nstraightforward manner",
    "start": "1113360",
    "end": "1119390"
  },
  {
    "text": "to the computation of the\ninverse discrete Fourier transform.",
    "start": "1119390",
    "end": "1124940"
  },
  {
    "text": "The second issue\nis that as we've seen in essentially\nall of the algorithms",
    "start": "1124940",
    "end": "1130640"
  },
  {
    "text": "of practical interest, they\ninvolve either bit reversal",
    "start": "1130640",
    "end": "1136500"
  },
  {
    "text": "at the input to the flow graph\nor a bit reversal at the output of the flow graph.",
    "start": "1136500",
    "end": "1143496"
  },
  {
    "text": "Bit reversal, again, is a\nrelatively straightforward",
    "start": "1143496",
    "end": "1149490"
  },
  {
    "text": "thing to implement. First of all, it is important to\nrecognize that bit reversal is",
    "start": "1149490",
    "end": "1157880"
  },
  {
    "text": "an in-place computation, if we\nthink of it as a computation. In particular, suppose that we\nhad the seven data indices zero",
    "start": "1157880",
    "end": "1169760"
  },
  {
    "text": "through seven. And we want to rearrange\nthis data so that the data is",
    "start": "1169760",
    "end": "1176990"
  },
  {
    "text": "arranged in bit reversed order. Well that means that, of course,\nzero bit reversed is zero,",
    "start": "1176990",
    "end": "1185990"
  },
  {
    "text": "one bit reversed is four. But of course, four\nbit reversed is one.",
    "start": "1185990",
    "end": "1192210"
  },
  {
    "text": "So in fact, we would\nwant to store data",
    "start": "1192210",
    "end": "1197480"
  },
  {
    "text": "with whose index is one\nin storage location four.",
    "start": "1197480",
    "end": "1204350"
  },
  {
    "text": "But we will also want to\nstore data whose data index is four in storage location one.",
    "start": "1204350",
    "end": "1211700"
  },
  {
    "text": "So in fact, implementing\nthe bit reversal can be accomplished in place\nby essentially swapping",
    "start": "1211700",
    "end": "1221210"
  },
  {
    "text": "these two pieces of data. Similarly of course,\ntwo bit reverses two.",
    "start": "1221210",
    "end": "1226440"
  },
  {
    "text": "And so that wouldn't move. Three bit reversed is six. But six bit reversed is three.",
    "start": "1226440",
    "end": "1232760"
  },
  {
    "text": "And so again, we can\ncarry out that interchange as an in-place computation.",
    "start": "1232760",
    "end": "1238700"
  },
  {
    "text": "So bit reversal, then, can\nbe implemented in place. And consequently, as\nwe restore the data",
    "start": "1238700",
    "end": "1247760"
  },
  {
    "text": "in a bit reversed\norder, we don't require double the storage,\nsince we can carry that out",
    "start": "1247760",
    "end": "1255050"
  },
  {
    "text": "as an in-place operation. Second of all, to implement\nbit reversal, of course,",
    "start": "1255050",
    "end": "1262100"
  },
  {
    "text": "to implement bit reversal\nin hardware, to obtain a bit reversed index and\nhardware is very simple.",
    "start": "1262100",
    "end": "1268910"
  },
  {
    "text": "We just simply rearrange\nthe order of the wires. To implement a bit reversed\nindex register or an index",
    "start": "1268910",
    "end": "1280620"
  },
  {
    "text": "algorithmically is a little\nmore difficult. But in fact-- and this is discussed in some\nmore detail in the text--",
    "start": "1280620",
    "end": "1288570"
  },
  {
    "text": "one of the most\nstraightforward procedures, normally, is to\nimplement a bit reversed",
    "start": "1288570",
    "end": "1296789"
  },
  {
    "text": "counter so that as we\nproceed along with an index",
    "start": "1296790",
    "end": "1302910"
  },
  {
    "text": "register accessing through\nan index in normal order, we can also run a counter that\nruns in bit reversed order",
    "start": "1302910",
    "end": "1311730"
  },
  {
    "text": "and use, essentially, those two\nas index registers to tell us how to swap the data.",
    "start": "1311730",
    "end": "1317910"
  },
  {
    "text": "So a bit reversal, in\nfact, algorithmically is relatively straightforward.",
    "start": "1317910",
    "end": "1323160"
  },
  {
    "text": "It's an interesting point that\nit is a somewhat inefficient procedure, as you'll see if you\ntry to program bit reversal.",
    "start": "1323160",
    "end": "1334860"
  },
  {
    "text": "But algorithmically\nand conceptually, it's a fairly straightforward\nprocedure to implement.",
    "start": "1334860",
    "end": "1341920"
  },
  {
    "text": "A third computational\nissue, which I would like to draw\nyour attention to",
    "start": "1341920",
    "end": "1346970"
  },
  {
    "text": "is the question of obtaining the\ncoefficients to use in the FFT",
    "start": "1346970",
    "end": "1354830"
  },
  {
    "text": "computation. And there are basically\ntwo procedures that are commonly used.",
    "start": "1354830",
    "end": "1362600"
  },
  {
    "text": "One, of course, is to store\nthe coefficients in a table",
    "start": "1362600",
    "end": "1368270"
  },
  {
    "text": "and then simply access\nthem as they're needed. A second, which saves\nstorage but requires",
    "start": "1368270",
    "end": "1376490"
  },
  {
    "text": "some computational time, is\nto generate the coefficients",
    "start": "1376490",
    "end": "1381590"
  },
  {
    "text": "recursively. That is essentially\nusing an oscillator-- programming an oscillator--",
    "start": "1381590",
    "end": "1386779"
  },
  {
    "text": "and generating the\ncoefficients as they're needed. Along those lines, it's\ninteresting to observe",
    "start": "1386780",
    "end": "1392810"
  },
  {
    "text": "that in both the decimation\nin time and decimation in frequency forms\nof the algorithm,",
    "start": "1392810",
    "end": "1399110"
  },
  {
    "text": "as you proceed from\nstage to stage, the powers of W that are\ninvolved in the computation",
    "start": "1399110",
    "end": "1408170"
  },
  {
    "text": "are powers of a basic\npower of W that doubles--",
    "start": "1408170",
    "end": "1414380"
  },
  {
    "text": "or at least that changes-- in each stage as you go\nthrough the computation. And this has\nimplications as you think",
    "start": "1414380",
    "end": "1423380"
  },
  {
    "text": "of either storing a table of\ncoefficients and accessing them or as you think of generating\nthe coefficients recursively.",
    "start": "1423380",
    "end": "1433850"
  },
  {
    "text": "The fact that the powers of W\nare related from stage to stage",
    "start": "1433850",
    "end": "1439010"
  },
  {
    "text": "suggests some fairly efficient\nprocedures for doing this.",
    "start": "1439010",
    "end": "1444140"
  },
  {
    "text": "One additional\nconsideration, though,",
    "start": "1444140",
    "end": "1450850"
  },
  {
    "text": "in obtaining the\ncoefficients is that",
    "start": "1450850",
    "end": "1458950"
  },
  {
    "text": "in some of the forms\nof the FFT algorithm, the coefficients are naturally\naccessed in a normal order,",
    "start": "1458950",
    "end": "1469040"
  },
  {
    "text": "whereas in some other forms,\nthey are naturally accessed in a bit reversed order.",
    "start": "1469040",
    "end": "1475320"
  },
  {
    "text": "For example, if we think of\nthe decimation in frequency",
    "start": "1475320",
    "end": "1481250"
  },
  {
    "text": "form of the algorithm,\nhere is the decimation in frequency form\nof the algorithm",
    "start": "1481250",
    "end": "1487910"
  },
  {
    "text": "with the input in normal\norder and the output in bit reversed order. Notice that the powers of W\nthat we have here occur in what",
    "start": "1487910",
    "end": "1499429"
  },
  {
    "text": "looks like normal order. At least these powers\nare in normal order. ",
    "start": "1499430",
    "end": "1507830"
  },
  {
    "text": "And this is normal input order,\nbit reversed output order.",
    "start": "1507830",
    "end": "1513440"
  },
  {
    "text": "Whereas if we took,\nlet's say, the decimation in time form of the algorithm--",
    "start": "1513440",
    "end": "1520909"
  },
  {
    "text": "where we have normally ordered\ninput and bit reversed output--",
    "start": "1520910",
    "end": "1527240"
  },
  {
    "text": "in that case, if you look\nat these powers of W,",
    "start": "1527240",
    "end": "1532460"
  },
  {
    "text": "they're not in normal order. In fact, what they're in\nis bit reversed order.",
    "start": "1532460",
    "end": "1537860"
  },
  {
    "text": "So in fact, in addition\nto the consideration as to whether the\ninput is bit reversed",
    "start": "1537860",
    "end": "1544850"
  },
  {
    "text": "or the output is bit reversed,\nin some forms of the algorithm, the coefficients would tend\nto be stored in normal order,",
    "start": "1544850",
    "end": "1554300"
  },
  {
    "text": "whereas in some other\nforms of the algorithm, the coefficients\nwould tend to be stored in a bit reversed order.",
    "start": "1554300",
    "end": "1561620"
  },
  {
    "text": "Or if we think about\ngenerating the coefficients, clearly it is simpler to think\nof generating coefficients",
    "start": "1561620",
    "end": "1571100"
  },
  {
    "text": "in normal order\nthan it is to think of them as being generated\nin bit reversed order.",
    "start": "1571100",
    "end": "1577740"
  },
  {
    "text": "Now with regard to the question\nof the input and output",
    "start": "1577740",
    "end": "1583920"
  },
  {
    "text": "being bit reversed, one\nimportant area in which",
    "start": "1583920",
    "end": "1589590"
  },
  {
    "text": "the computation of the DFT-- in other words, the\nFFT algorithms-- play a role is in implementing\nconvolution or correlation.",
    "start": "1589590",
    "end": "1600540"
  },
  {
    "text": "In that case, we\ncompute a transform, multiply by something-- in\nthe case of a convolution,",
    "start": "1600540",
    "end": "1607660"
  },
  {
    "text": "we multiply by the transform\nof the impulse response--",
    "start": "1607660",
    "end": "1614080"
  },
  {
    "text": "and then implement\nan inverse transform. Well the fact that there\nare two transforms involved",
    "start": "1614080",
    "end": "1620010"
  },
  {
    "text": "suggests the possibility that\nwe can organize the computation",
    "start": "1620010",
    "end": "1625110"
  },
  {
    "text": "in such a way that we\ncompletely avoid bit reversal. For example, we can\nchoose an algorithm",
    "start": "1625110",
    "end": "1632370"
  },
  {
    "text": "for the direct\ntransform, which utilizes the input in normal order and\ngenerates the transform in bit",
    "start": "1632370",
    "end": "1640020"
  },
  {
    "text": "reversed order. We then simply\nhave the transform of the impulse response stored\nin bit reversed order, carry",
    "start": "1640020",
    "end": "1647880"
  },
  {
    "text": "out the multiplication,\nand then choose a form of the algorithm for\nthe inverse transform, which",
    "start": "1647880",
    "end": "1655409"
  },
  {
    "text": "has bit reversed\ninput and results in a normally ordered output.",
    "start": "1655410",
    "end": "1662200"
  },
  {
    "text": "So in that case, what we would\nhave is the forward transform, normally ordered data\nbeing transformed",
    "start": "1662200",
    "end": "1668080"
  },
  {
    "text": "to bit reversed data. And then as the\ninverse transform, bit reversed input and\nnormally ordered output.",
    "start": "1668080",
    "end": "1675280"
  },
  {
    "text": "Well even given that, there are\na number of options available. For example, we\nhave an algorithm--",
    "start": "1675280",
    "end": "1683190"
  },
  {
    "text": "the decimation in\ntime algorithm-- which is normally ordered input.",
    "start": "1683190",
    "end": "1689445"
  },
  {
    "text": " I'm sorry, normally ordered\ninput and bit reversed",
    "start": "1689445",
    "end": "1698549"
  },
  {
    "text": "output, which we could use\nas our forward transform. Although as we just\nillustrated, it",
    "start": "1698550",
    "end": "1706230"
  },
  {
    "text": "involves bit reversed\ncoefficients. Well we could think of storing\nthe coefficients in bit",
    "start": "1706230",
    "end": "1712680"
  },
  {
    "text": "reversed order and then using\nthe companion decimation in time form of the algorithm,\nwhich has bit reversed input",
    "start": "1712680",
    "end": "1725010"
  },
  {
    "text": "and normally ordered output, to\nachieve the inverse transform.",
    "start": "1725010",
    "end": "1731790"
  },
  {
    "text": "However, in this\ncase the coefficients are in normal order. So if we match up the\nalgorithms that way,",
    "start": "1731790",
    "end": "1739919"
  },
  {
    "text": "then we're faced\nwith the problem that in the direct transform,\nthe coefficients would be stored in bit\nreversed order, whereas",
    "start": "1739920",
    "end": "1747870"
  },
  {
    "text": "in the inverse\ntransform they would be stored in normal order.",
    "start": "1747870",
    "end": "1753029"
  },
  {
    "text": "Well you can ask whether\nfor the decimation of frequency form of the\nalgorithm, we can avoid that.",
    "start": "1753030",
    "end": "1762360"
  },
  {
    "text": "But in fact, the same\nproblem arises there. If we have the\ndecimation in time in frequency form of the\nalgorithm with normal input,",
    "start": "1762360",
    "end": "1770270"
  },
  {
    "text": "bit reversed output,\nthen the coefficients are stored in normal order.",
    "start": "1770270",
    "end": "1777360"
  },
  {
    "text": "But for the inverse decimation\nin frequency transform with bit",
    "start": "1777360",
    "end": "1784170"
  },
  {
    "text": "reversed input and\nnormally ordered output, the coefficients would be\nstored in bit reversed order.",
    "start": "1784170",
    "end": "1792059"
  },
  {
    "text": "The solution is to\nmatch up a decimation in time form of the algorithm\nwith a decimation in frequency",
    "start": "1792060",
    "end": "1799800"
  },
  {
    "text": "form of the algorithm\nso that, for example,",
    "start": "1799800",
    "end": "1805620"
  },
  {
    "text": "we can choose as the\nforward transform",
    "start": "1805620",
    "end": "1811200"
  },
  {
    "text": "the decimation in frequency form\nof the algorithm with the input",
    "start": "1811200",
    "end": "1818220"
  },
  {
    "text": "in normal order, the output\nin bit reversed order, and the coefficients\nnormally ordered,",
    "start": "1818220",
    "end": "1823980"
  },
  {
    "text": "which is generally\nmore convenient. And then choose for the inverse\ntransform not the decimation",
    "start": "1823980",
    "end": "1832650"
  },
  {
    "text": "in frequency algorithm, but the\ndecimation in time algorithm,",
    "start": "1832650",
    "end": "1837690"
  },
  {
    "text": "for which the input\nis now bit reversed, the output is in normal\norder, and the coefficients",
    "start": "1837690",
    "end": "1847049"
  },
  {
    "text": "are also in normal order. So in fact, this suggests\nthat if we are implementing",
    "start": "1847050",
    "end": "1855930"
  },
  {
    "text": "a forward transform and\nan inverse transform, generally there are\nadvantages to matching up",
    "start": "1855930",
    "end": "1864299"
  },
  {
    "text": "the decimation in time form\nand the decimation in frequency form so that we have similarly\naccessed coefficients",
    "start": "1864300",
    "end": "1872190"
  },
  {
    "text": "in both cases. Well there are, of\ncourse, a large variety",
    "start": "1872190",
    "end": "1878130"
  },
  {
    "text": "of other computational\nissues to be considered in implementing\nthe fast Fourier transform",
    "start": "1878130",
    "end": "1884190"
  },
  {
    "text": "algorithms. Some of these are\ndiscussed in the text. Many of them you will\ndiscover for yourselves",
    "start": "1884190",
    "end": "1892290"
  },
  {
    "text": "as you try to program\nthe algorithm. But hopefully, this\ndiscussion provides",
    "start": "1892290",
    "end": "1899399"
  },
  {
    "text": "at least some indication of\nwhat some of the strategies are and some of the issues\nare that are involved",
    "start": "1899400",
    "end": "1907559"
  },
  {
    "text": "in computation of\nthe FFT of the forms that we've been talking about.",
    "start": "1907560",
    "end": "1913790"
  },
  {
    "text": "Now all of this\ndiscussion has been related to the computation\nof the discrete Fourier",
    "start": "1913790",
    "end": "1922490"
  },
  {
    "text": "transform when the number of\ndata points is a power of two. And these algorithms are\nreferred to as the radix two",
    "start": "1922490",
    "end": "1930640"
  },
  {
    "text": "forms of the FFT algorithm. As I indicated in the first\nlecture, in which we discussed",
    "start": "1930640",
    "end": "1937150"
  },
  {
    "text": "the FFT, the FFT, in\nfact, is more general in that it generally\napplies when",
    "start": "1937150",
    "end": "1945940"
  },
  {
    "text": "N is a highly composite number. We chose it to be\ncomposed of powers of two.",
    "start": "1945940",
    "end": "1952780"
  },
  {
    "text": "But in fact, there are\na variety of other forms of the FFT algorithm\nfor different radices.",
    "start": "1952780",
    "end": "1960350"
  },
  {
    "text": "And in some cases, there\nare some advantages to be found in using not\na power of two algorithm,",
    "start": "1960350",
    "end": "1967690"
  },
  {
    "text": "but a different algorithm. On the other hand,\nin many situations,",
    "start": "1967690",
    "end": "1973390"
  },
  {
    "text": "the disadvantages of that\noutweigh the advantages. However, what I would like to\ndo is conclude the discussion",
    "start": "1973390",
    "end": "1980380"
  },
  {
    "text": "of the fast Fourier\ntransform algorithm by just very briefly outlining\nwhat the structure of the FFT",
    "start": "1980380",
    "end": "1992320"
  },
  {
    "text": "algorithm is more generally. And again, in the text\nthere are a number",
    "start": "1992320",
    "end": "1999940"
  },
  {
    "text": "of examples of FFT\nalgorithms for radices other than a power of two and\na more complete discussion",
    "start": "1999940",
    "end": "2008350"
  },
  {
    "text": "than I feel that is appropriate\nto go through right now. However, let me just outline\nwhat some of the issues",
    "start": "2008350",
    "end": "2017400"
  },
  {
    "text": "are in discussing a more\ngeneral radix FFT algorithm.",
    "start": "2017400",
    "end": "2024930"
  },
  {
    "text": "Generally the computation\nof the discrete Fourier transform using this\nclass of algorithms",
    "start": "2024930",
    "end": "2031830"
  },
  {
    "text": "is directed toward\ncapitalizing on the fact that the size transform\nto be implemented",
    "start": "2031830",
    "end": "2039120"
  },
  {
    "text": "is a product of numbers. And it turns out that\nthe more numbers--",
    "start": "2039120",
    "end": "2047880"
  },
  {
    "text": "the more terms in\nthe decomposition-- the greater the efficiency\nthat can be obtained",
    "start": "2047880",
    "end": "2053579"
  },
  {
    "text": "in implementing the transform. In that case, generally one\nwould think of these numbers",
    "start": "2053580",
    "end": "2060419"
  },
  {
    "text": "as primes, since\nthat is the biggest decomposition of any number\nthat we can carry out.",
    "start": "2060420",
    "end": "2066030"
  },
  {
    "text": "But in fact, for the derivation,\nit is not a requirement that the p's be primes.",
    "start": "2066030",
    "end": "2072960"
  },
  {
    "text": "So let's think of N, then,\nas decomposed as a product of p1 times p2, et\ncetera, through p sub-Nu,",
    "start": "2072960",
    "end": "2081899"
  },
  {
    "text": "which we can alternatively\nwrite as p1 times q1,",
    "start": "2081900",
    "end": "2087629"
  },
  {
    "text": "where q1 is then represented\nby the product of the remaining",
    "start": "2087630",
    "end": "2092669"
  },
  {
    "text": "terms. And we can proceed,\nessentially, along a root",
    "start": "2092670",
    "end": "2101220"
  },
  {
    "text": "similar to the decimation in\ntime algorithms or along a root",
    "start": "2101220",
    "end": "2106830"
  },
  {
    "text": "similar to the decimation\nin frequency algorithms. Let me just indicate\nthe strategy paralleling",
    "start": "2106830",
    "end": "2113190"
  },
  {
    "text": "the decimation in time\nform of the algorithm, as we discussed that\nfor N, a power of two.",
    "start": "2113190",
    "end": "2120490"
  },
  {
    "text": "In that case, we decomposed\np1 is equal to two, and q1 is equal to N over two.",
    "start": "2120490",
    "end": "2128140"
  },
  {
    "text": "And we decompose the\noriginal sequence into two sub-sequences,\none consisting",
    "start": "2128140",
    "end": "2134620"
  },
  {
    "text": "of the even numbered\npoints, the other consisting of the odd numbered points. More generally, we would\ndecompose the sequence",
    "start": "2134620",
    "end": "2143170"
  },
  {
    "text": "into a set of sub-sequences\nconsisting of every p1th point.",
    "start": "2143170",
    "end": "2151819"
  },
  {
    "text": "So how many sequences are there? Well, there are p1 sequences.",
    "start": "2151820",
    "end": "2156950"
  },
  {
    "text": "And the length of\neach sequence is q1. For example, if p1 was equal\nto two, and q1 was N over two,",
    "start": "2156950",
    "end": "2165110"
  },
  {
    "text": "this would be every other point. That's choosing the\neven numbered points and the odd numbered points.",
    "start": "2165110",
    "end": "2170750"
  },
  {
    "text": "There would be\ntwo sub-sequences, each sub-sequence of\nlength N over two.",
    "start": "2170750",
    "end": "2177820"
  },
  {
    "text": "More generally, then, if\nwe had, say, N equal to 12,",
    "start": "2177820",
    "end": "2182920"
  },
  {
    "text": "and p1 equal to three, we would\ngenerate three sub-sequences,",
    "start": "2182920",
    "end": "2192220"
  },
  {
    "text": "each consisting of four points\nchosen by selecting every p1th,",
    "start": "2192220",
    "end": "2198970"
  },
  {
    "text": "or every third point. So one sub sequence, which\nI've denoted here by A,",
    "start": "2198970",
    "end": "2204700"
  },
  {
    "text": "would be this point and this\none and this one and that one. The second sub-sequence\nwould be the sub-sequence B,",
    "start": "2204700",
    "end": "2212080"
  },
  {
    "text": "which is comprised of this\npoint, this, this, and that. And the third sub-sequence\nwould be sub-sequence",
    "start": "2212080",
    "end": "2219640"
  },
  {
    "text": "C, which is this point,\nthis point, that point, and that point.",
    "start": "2219640",
    "end": "2224830"
  },
  {
    "text": "All right, so we decompose\nthe original sequence, then, into p1 sequences,\neach of length q1.",
    "start": "2224830",
    "end": "2233020"
  },
  {
    "text": "Given that, we can\norganize the sum involved in the discrete\nFourier transform",
    "start": "2233020",
    "end": "2241240"
  },
  {
    "text": "by decomposing the sum\ninto separate sums, involving each one of\nthese p1 sub-sequences.",
    "start": "2241240",
    "end": "2252600"
  },
  {
    "text": "In particular, if we think\nof the argument p1 times",
    "start": "2252600",
    "end": "2258360"
  },
  {
    "text": "r, as r ranges from\nzero to q1 minus one,",
    "start": "2258360",
    "end": "2266235"
  },
  {
    "text": "we're selecting, with this\nargument, every p1th point, starting with the\nzero-eth point.",
    "start": "2266235",
    "end": "2274470"
  },
  {
    "text": "If we think of the\nargument p1 r plus one, as r runs from zero\nto q1 minus one,",
    "start": "2274470",
    "end": "2280740"
  },
  {
    "text": "we're then collecting\ntogether the terms, which are every p1th point,\nstarting with the first point.",
    "start": "2280740",
    "end": "2288680"
  },
  {
    "text": "Et cetera, we can\nproceed to decompose this into a set of p1 sub-sums,\nas I've indicated here.",
    "start": "2288680",
    "end": "2300030"
  },
  {
    "text": "Or when we combine\nthese together, then, we can express\nx of k, the DFT,",
    "start": "2300030",
    "end": "2307740"
  },
  {
    "text": "as a double sum, where we\nhave the terms involving",
    "start": "2307740",
    "end": "2316000"
  },
  {
    "text": "the separate sub sequences\nand then the multiplication",
    "start": "2316000",
    "end": "2321130"
  },
  {
    "text": "by a power of W to\ncombine the computation",
    "start": "2321130",
    "end": "2326259"
  },
  {
    "text": "on these sub-sequences\ntogether to obtain the DFT. These terms, of course,\nare obtained by the fact",
    "start": "2326260",
    "end": "2333940"
  },
  {
    "text": "that this power of\nW is p1 r plus one. In the next sum, it will be p1\nr plus two, p1 r plus three,",
    "start": "2333940",
    "end": "2341200"
  },
  {
    "text": "et cetera. We decompose that into a\nproduct of two powers of W.",
    "start": "2341200",
    "end": "2347050"
  },
  {
    "text": "And then one of those terms-- since it doesn't\ndepend on r-- can",
    "start": "2347050",
    "end": "2352390"
  },
  {
    "text": "be removed from the sum on r\nand shows up in this second sum. Well I would suggest--",
    "start": "2352390",
    "end": "2358630"
  },
  {
    "text": "that's a somewhat\nrapid treatment-- I would suggest\njust simply working through that for an example.",
    "start": "2358630",
    "end": "2364010"
  },
  {
    "text": "And I think it will be clear how\nthis original sum is decomposed into this one.",
    "start": "2364010",
    "end": "2371180"
  },
  {
    "text": "All right, well now, just as\nwe did in both the decimation in time and decimation\nin frequency forms",
    "start": "2371180",
    "end": "2377480"
  },
  {
    "text": "of the algorithm\nfor powers of two, we can recognize\nthis power of W sub-N",
    "start": "2377480",
    "end": "2387320"
  },
  {
    "text": "as a different power of a W\nwith a different subscript.",
    "start": "2387320",
    "end": "2393830"
  },
  {
    "text": "In particular, W sub-N to\nthe p1 rk, as I have here,",
    "start": "2393830",
    "end": "2400760"
  },
  {
    "text": "is equal to e to the j two pi\nover capital-N times p1 rk.",
    "start": "2400760",
    "end": "2406730"
  },
  {
    "text": "But N is equal to p1 times q1.",
    "start": "2406730",
    "end": "2412310"
  },
  {
    "text": "That's the way we\noriginally decomposed it. And the p1's cancel out.",
    "start": "2412310",
    "end": "2419210"
  },
  {
    "text": "And we're left with e to\nthe j two pi over q1 times rk or equivalently,\nW sub-q1 to the rk.",
    "start": "2419210",
    "end": "2429680"
  },
  {
    "text": "So substituting this\nfor W sub-N to the p1 r",
    "start": "2429680",
    "end": "2436490"
  },
  {
    "text": "k in the previous expression,\nwhat results is then x of k",
    "start": "2436490",
    "end": "2442490"
  },
  {
    "text": "expressed as a sum from l\nequals zero, p1 minus one, of these powers of\nW sub-N. But then",
    "start": "2442490",
    "end": "2450650"
  },
  {
    "text": "the important thing is that\nthe inner sum involves q1 point",
    "start": "2450650",
    "end": "2456619"
  },
  {
    "text": "sequences. This factor is W\nsub-q1 to the rk.",
    "start": "2456620",
    "end": "2462710"
  },
  {
    "text": "And in fact, this entire\nsummation is a q1 point DFT.",
    "start": "2462710",
    "end": "2469730"
  },
  {
    "text": "So pursuing this, then,\nwhat we basically decomposed",
    "start": "2469730",
    "end": "2474790"
  },
  {
    "text": "the computation into is the\ncomputation of p1 q1 point",
    "start": "2474790",
    "end": "2484100"
  },
  {
    "text": "DFT's. We obtained the q1 point\nDFT's and then combined them,",
    "start": "2484100",
    "end": "2490970"
  },
  {
    "text": "according to the\nexpression as we have here. This would then lead to the\ngeneralization of the butterfly",
    "start": "2490970",
    "end": "2498380"
  },
  {
    "text": "computation as we had it for\nthe radix two algorithms.",
    "start": "2498380",
    "end": "2503779"
  },
  {
    "text": "And if you count up the\nnumber of multiplies and adds, again, you'll see that there is\nsome computational efficiency",
    "start": "2503780",
    "end": "2511130"
  },
  {
    "text": "that results from doing this. And then, just as we did with\nthe radix two algorithms,",
    "start": "2511130",
    "end": "2517579"
  },
  {
    "text": "we can continue to\ndecompose these transforms",
    "start": "2517580",
    "end": "2522590"
  },
  {
    "text": "so that we have q1 is given\nby the product p2 times p3",
    "start": "2522590",
    "end": "2529310"
  },
  {
    "text": "through p sub-Nu. This product we denote as q2.",
    "start": "2529310",
    "end": "2536990"
  },
  {
    "text": "And then we can proceed to\ndecompose these transforms--",
    "start": "2536990",
    "end": "2542030"
  },
  {
    "text": "these q1 point transforms-- into p2 q2 point transforms.",
    "start": "2542030",
    "end": "2550610"
  },
  {
    "text": "Then we can decompose the q2\npoint transforms, et cetera. If you do this, then\nwhat you'll find--",
    "start": "2550610",
    "end": "2557330"
  },
  {
    "text": "and the counting is done\na little more carefully in the text-- what you'll find is that the\nnumber of multiplies and adds",
    "start": "2557330",
    "end": "2566359"
  },
  {
    "text": "involved in computing the\ndiscrete Fourier transform this way is proportional to\nN times a sum of the factors",
    "start": "2566360",
    "end": "2579079"
  },
  {
    "text": "involved in the\ndecomposition of N. I've indicated an additional\nfactor here of minus Nu.",
    "start": "2579080",
    "end": "2587630"
  },
  {
    "text": "Depending on how you choose\nto count multiplies and adds, this factor of minus Nu\neither shows up or not.",
    "start": "2587630",
    "end": "2595130"
  },
  {
    "text": "In fact, to make this\nexpression consistent with what",
    "start": "2595130",
    "end": "2600660"
  },
  {
    "text": "we obtained for the\npower of two algorithms, the minus Nu should be in here.",
    "start": "2600660",
    "end": "2607470"
  },
  {
    "text": "And it's simply a\nquestion of whether you count or don't count some\nmultiplications by unity.",
    "start": "2607470",
    "end": "2614730"
  },
  {
    "text": "Well OK, that's a very quick\ntreatment-- discussion-- of the generalization of\nthe radix two algorithms",
    "start": "2614730",
    "end": "2623520"
  },
  {
    "text": "to more arbitrary radix. And there, as I indicated,\nare some examples",
    "start": "2623520",
    "end": "2629490"
  },
  {
    "text": "of this, which are\ngiven in the text. Although, in fact,\nwhat you'll find",
    "start": "2629490",
    "end": "2635580"
  },
  {
    "text": "is that in most\npractical contexts, it is a radix two algorithm that\nis the most efficient to use.",
    "start": "2635580",
    "end": "2645480"
  },
  {
    "text": "And I indicate,\nincidentally, that if you are faced with the problem\nof transforming data, which",
    "start": "2645480",
    "end": "2653370"
  },
  {
    "text": "is of a length which is not\na power of two, it of course can always be made to be\nof length power of two",
    "start": "2653370",
    "end": "2660180"
  },
  {
    "text": "by simply augmenting\nthe sequence with zeros. Well this concludes, then,\nthe discussion of the FFT",
    "start": "2660180",
    "end": "2669480"
  },
  {
    "text": "algorithms, the computation of\nthe discrete Fourier transform.",
    "start": "2669480",
    "end": "2675119"
  },
  {
    "text": "And there are, I hope,\na number of issues",
    "start": "2675120",
    "end": "2680280"
  },
  {
    "text": "which you will\nhave an opportunity to dwell on some as you\nread through the text",
    "start": "2680280",
    "end": "2686700"
  },
  {
    "text": "and as your attention will be\ndrawn to in the study guide. Thank you. ",
    "start": "2686700",
    "end": "2694770"
  },
  {
    "text": "[MUSIC PLAYING] ",
    "start": "2694770",
    "end": "2697994"
  }
]