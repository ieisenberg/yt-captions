[
  {
    "text": "Given the CMOS circuit with pull-down shown\nhere, we can generate the corresponding function",
    "start": "340",
    "end": "5860"
  },
  {
    "text": "that this CMOS circuit represents which is\nNOT(F) = (A+B)C + D.",
    "start": "5860",
    "end": "15740"
  },
  {
    "text": "So F = ((A+B)C + D) the whole thing negated.\nThis function can be expressed as a truth",
    "start": "15740",
    "end": "25060"
  },
  {
    "text": "table which describes the output that the\nfunction produces for any set of inputs.",
    "start": "25060",
    "end": "30789"
  },
  {
    "text": "All of the possible input combinations are\nenumerated, and then the value of F is specified",
    "start": "30790",
    "end": "36350"
  },
  {
    "text": "for each of those combinations.\nFor this function, F, for example, if A=0",
    "start": "36350",
    "end": "42760"
  },
  {
    "text": "B=0 C=0 and D=0, then (A+B)C = 0 that ORed\nwith D = 0, and finally the entire thing is",
    "start": "42760",
    "end": "54659"
  },
  {
    "text": "negated, so F = 1.\nFor A=0 B=0 C=0 and D=1, (A+B)C = 0 + D=1",
    "start": "54660",
    "end": "68319"
  },
  {
    "text": "gives us 1 and the whole thing negated is\nF=0.",
    "start": "68319",
    "end": "72100"
  },
  {
    "text": "In the same way, we can complete the rest\nof the truth table, and we get.",
    "start": "72100",
    "end": "77758"
  },
  {
    "text": "1 0 1 0 0 0 1 0 0 0 1 0 0 0\nGiven a truth table, one can be asked if the",
    "start": "77759",
    "end": "93030"
  },
  {
    "text": "function F that this truth table defines,\ncan be implemented using a single CMOS gate.",
    "start": "93030",
    "end": "99649"
  },
  {
    "text": "To figure that out, we first convert the truth\ntable to a logical equation for F.",
    "start": "99649",
    "end": "105560"
  },
  {
    "text": "Given this truth table, the function F can\nbe expressed as a sum of products by listing",
    "start": "105560",
    "end": "110810"
  },
  {
    "text": "all terms that make F=1 and ORing them together.\nFor this truth table F = NOT(A) NOT(B) NOT(C)",
    "start": "110810",
    "end": "120520"
  },
  {
    "text": "+ NOT(A) B NOT(C) + A NOT(B) NOT(C).\nIn order to determine if this function can",
    "start": "120520",
    "end": "130869"
  },
  {
    "text": "be implemented as a single CMOS circuit, the\nfunction F needs to be manipulated through",
    "start": "130869",
    "end": "136510"
  },
  {
    "text": "logic simplifications in order to see if NOT(F)\ncan be written as a function of just the inputs",
    "start": "136510",
    "end": "143420"
  },
  {
    "text": "A, B, and C (without any negations of those\ninputs) together with ANDs and ORs.",
    "start": "143420",
    "end": "151629"
  },
  {
    "text": "We start with our function for F.\nFactoring out NOT(C), that equals NOT(C) (NOT(A)",
    "start": "151629",
    "end": "159080"
  },
  {
    "text": "NOT(B) + NOT(A) B + A NOT(B)).\nRearranging the terms and repeating the first",
    "start": "159080",
    "end": "169239"
  },
  {
    "text": "one continues to produce the same function.\nSo F = NOT(C) (NOT(A) NOT(B) + A NOT(B) +",
    "start": "169239",
    "end": "179760"
  },
  {
    "text": "NOT(A) B + NOT(A) NOT(B)).\nNoting that A X + NOT(A) X = X, this reduces",
    "start": "179760",
    "end": "192560"
  },
  {
    "text": "to: F = NOT(C) (NOT(B) + NOT(A)).\nWe are almost there, we now want to convert",
    "start": "192560",
    "end": "202030"
  },
  {
    "text": "F to NOT(F) by negating the entire thing,\nso NOT(F) = NOT (NOT(C) (NOT(B) + NOT(A)).",
    "start": "202030",
    "end": "211450"
  },
  {
    "text": "To simplify this we make use of De Morgan's\nLaw which states that NOT(AB) = NOT(A) + NOT(B).",
    "start": "211450",
    "end": "226219"
  },
  {
    "text": "And that NOT(A+B) = NOT(A) AND NOT(B).\nSo NOT(F) = C + NOT(NOT(B) + NOT(A)), and",
    "start": "226219",
    "end": "241459"
  },
  {
    "text": "finally NOT(F) = C + (B A).\nNow that we have found that NOT(F) = C + BA,",
    "start": "241460",
    "end": "252790"
  },
  {
    "text": "we know that F can be implemented as a single\nCMOS gate because we were able to express",
    "start": "252790",
    "end": "258488"
  },
  {
    "text": "NOT(F) as a function that consists purely\nof our non-negated inputs, A, B, and C, together",
    "start": "258489",
    "end": "265060"
  },
  {
    "text": "with ANDs and ORs.\nThe pull-down for this circuit would basically",
    "start": "265060",
    "end": "270180"
  },
  {
    "text": "implement NOT(F) so it would be series(A,B)\nin parallel with C.",
    "start": "270180",
    "end": "277080"
  },
  {
    "text": "The pull-up would be the inverse of that which\nis parallel(A,B) in series with C.",
    "start": "277080",
    "end": "283319"
  }
]