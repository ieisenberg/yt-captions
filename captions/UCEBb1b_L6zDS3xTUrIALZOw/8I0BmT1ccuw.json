[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "7410"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "7410",
    "end": "13960"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13960",
    "end": "19790"
  },
  {
    "text": "ocw.mit.edu.  PROFESSOR: I wanted to give\neverybody a more conceptual",
    "start": "19790",
    "end": "25550"
  },
  {
    "text": "idea of what big O notation as\nwell as, hopefully, answer any lingering questions you might\nhave about object-oriented",
    "start": "25550",
    "end": "31599"
  },
  {
    "text": "programming. So I have these notes, and I\ntype them up, and they're pretty detailed. So I'm just going to\ngo through some",
    "start": "31600",
    "end": "37650"
  },
  {
    "text": "points kind of quickly. Who's still kind of unclear\nabout why we even due big O notation?",
    "start": "37650",
    "end": "43165"
  },
  {
    "text": " So who can explain why we do\nbig O notation quickly?",
    "start": "43165",
    "end": "52149"
  },
  {
    "text": "What is it? Yeah? AUDIENCE: [INAUDIBLE]. PROFESSOR: Right.",
    "start": "52150",
    "end": "57329"
  },
  {
    "text": "Exactly. So big O notation gives us an\nupper bound on how long something is going to take. Now, something that's important\nto remember is it's",
    "start": "57330",
    "end": "63870"
  },
  {
    "text": "not a time bound. So something that's often\nconfusing is that people say, oh, this is something that'll\ntell us how long our programs",
    "start": "63870",
    "end": "72660"
  },
  {
    "text": "going to run. That's actually not the case. Big O notation informs\nhow many steps",
    "start": "72660",
    "end": "77909"
  },
  {
    "text": "something's going to take. And so why is that important? Well, I mean I look at all you\nguys, a couple of you have",
    "start": "77910",
    "end": "83100"
  },
  {
    "text": "laptops out. Everybody's computer\nrun something at a different speed. Right?",
    "start": "83100",
    "end": "88450"
  },
  {
    "text": "But if we say something is big O\nof n, what we're saying here",
    "start": "88450",
    "end": "94810"
  },
  {
    "text": "is we're saying that the worst\ncase number of steps your program is going to take is\ngoing to be linear with",
    "start": "94810",
    "end": "102180"
  },
  {
    "text": "respect to the size\nof the input. So if my computer is five\ntimes faster than your computer, my computer\nwill probably run",
    "start": "102180",
    "end": "108080"
  },
  {
    "text": "it five times faster. As the size of the input grows,\nI'm going to expect a",
    "start": "108080",
    "end": "113720"
  },
  {
    "text": "linear speedup in the amount\nof time it's going to take. ",
    "start": "113720",
    "end": "119220"
  },
  {
    "text": "So why is that important? At the bottom of page one,\nbig O notation, we are",
    "start": "119220",
    "end": "126750"
  },
  {
    "text": "particularly concerned with the scalability of our functions. So what the O notation does is\nit might not predict what's",
    "start": "126750",
    "end": "135260"
  },
  {
    "text": "going to be the fastest for\nreally small inputs, for an array size 10.",
    "start": "135260",
    "end": "142740"
  },
  {
    "text": "You guys know a little bit\nabout graphs, right? We have a graph of\nx-squared, and we",
    "start": "142740",
    "end": "149640"
  },
  {
    "text": "have a graph of x-cubed.  There's a portion of time where\nthe graph of x-squared",
    "start": "149640",
    "end": "156030"
  },
  {
    "text": "is actually bigger\nthan x-cubed. But then all of a sudden,\nthere's a point where x-cubed",
    "start": "156030",
    "end": "161870"
  },
  {
    "text": "just goes, whoosh, way bigger\nthan x-squared. So if we're in some really small\namount of input, big O",
    "start": "161870",
    "end": "167960"
  },
  {
    "text": "notation might not tell us\nwhat's the best function. But in big O notation,\nwe're not",
    "start": "167960",
    "end": "173170"
  },
  {
    "text": "concerned about small inputs. We're concerned about\nreally big inputs. We're concerned about filtering\nthe genome.",
    "start": "173170",
    "end": "178629"
  },
  {
    "text": "We're concerned about analyzing\ndata from Hubble, really huge blocks of data.",
    "start": "178630",
    "end": "186690"
  },
  {
    "text": "So if we're looking at a program\nthat analyzes the human genome, like three million\nbase pairs, some",
    "start": "186690",
    "end": "194500"
  },
  {
    "text": "segment that we're looking at,\nand we have two algorithms. One runs in order n time,\nand one runs in",
    "start": "194500",
    "end": "200380"
  },
  {
    "text": "order n-cubed time.  What this means is regardless\nof the machine that we're",
    "start": "200380",
    "end": "206820"
  },
  {
    "text": "running on, so this is algorithm\n1, this is algorithm 2, regardless of the machine\nthat we're running on, we'd",
    "start": "206820",
    "end": "214060"
  },
  {
    "text": "expect algorithm 2 to run\napproximately n-cubed over n",
    "start": "214060",
    "end": "219830"
  },
  {
    "text": "approximately n-squared\nslower. So with big O notation, you can\ncompare two algorithms by",
    "start": "219830",
    "end": "225830"
  },
  {
    "text": "just looking at the ratio\nof their big O run time. So if I'm looking at something\nthat has an array of size two",
    "start": "225830",
    "end": "233040"
  },
  {
    "text": "million as its input, is it\nclear that this is going to be a much better choice? ",
    "start": "233040",
    "end": "240240"
  },
  {
    "text": "Ok. So you'll run into that,\nespecially a lot of you guys are taking this for\nthe purposes of scientific computing. So you'll run into big\nO notation a lot.",
    "start": "240240",
    "end": "246720"
  },
  {
    "text": "It's important to have a\ngrasp of what it means. ",
    "start": "246720",
    "end": "252170"
  },
  {
    "text": "On the second page of the\nhandout, I have some common ones that you'll see. The first one is\nconstant time.",
    "start": "252170",
    "end": "258870"
  },
  {
    "text": "We denote constant\ntime as order 1. But you'll notice that I have\nhere is order 1 is equal to",
    "start": "258870",
    "end": "265099"
  },
  {
    "text": "order 10 is equal to order\n2 to the 100th. That's unexpected to a lot of\npeople who are learning about",
    "start": "265100",
    "end": "271520"
  },
  {
    "text": "big O notation.  Why is this true?",
    "start": "271520",
    "end": "277060"
  },
  {
    "text": " That seems kind of ridiculous.",
    "start": "277060",
    "end": "282160"
  },
  {
    "text": "This is a really big number. This is really small number. Yeah? AUDIENCE: [INAUDIBLE].",
    "start": "282160",
    "end": "287195"
  },
  {
    "text": "PROFESSOR: Yeah. Exactly. So we look at a graph of 1 and\na graph of 2 to the 100th.",
    "start": "287196",
    "end": "294480"
  },
  {
    "start": "294480",
    "end": "301860"
  },
  {
    "text": "Ok. We'll see that even though 2 to\nthe 100th is much higher, much bigger than 1, if this is\nour input size, as the size of",
    "start": "301860",
    "end": "312919"
  },
  {
    "text": "our input grows, do we see any\nchange in these two graphs?",
    "start": "312920",
    "end": "319030"
  },
  {
    "text": "No. They're completely constant. ",
    "start": "319030",
    "end": "324270"
  },
  {
    "text": "When you're doing big O\nnotation, if you run across an algorithm that does not depend\non the size of the input, OK,",
    "start": "324270",
    "end": "331449"
  },
  {
    "text": "it's always going\nto be order 1. Even if it's like 2 to the\n100th steps, if it's a constant number of times\nregardless of the size of the",
    "start": "331450",
    "end": "339710"
  },
  {
    "text": "input, it's constant time. Other ones you'll see are\nlogarithmic time.",
    "start": "339710",
    "end": "345280"
  },
  {
    "text": "Any base for logarithmic time\nis about the same order. So order log base 2 of n is\norder log base 10 of n.",
    "start": "345280",
    "end": "354280"
  },
  {
    "text": "This is the fastest time\nbound for search. Does anybody know what type\nof search we'd be doing in logarithmic time?",
    "start": "354280",
    "end": "361780"
  },
  {
    "text": "Something maybe we-- AUDIENCE: Bisection time PROFESSOR: Yeah. Exactly. Bisection search is\nlogarithmic time.",
    "start": "361780",
    "end": "366880"
  },
  {
    "text": "Because we take our input. And at every step, we cut in\nhalf, cut in half, cut in half, and that's the fastest\nsearch we can do.",
    "start": "366880",
    "end": "373630"
  },
  {
    "text": " The order n is linear time.",
    "start": "373630",
    "end": "379610"
  },
  {
    "text": "Order n log n is the fastest\ntime bound we have for sort.",
    "start": "379610",
    "end": "384789"
  },
  {
    "text": "We'll be talking about sort\nin a couple of weeks. And order n-squared\nis quadratic time.",
    "start": "384790",
    "end": "390900"
  },
  {
    "text": "Anything that is order n to\nsome variable, so order",
    "start": "390900",
    "end": "397139"
  },
  {
    "text": "n-squared, order n-cubed, order\nn-fourth, all of that is going to be less than order\nsomething to the power of n.",
    "start": "397140",
    "end": "408060"
  },
  {
    "text": "So if we have something that's\norder 2 to the n, that's ridiculous.",
    "start": "408060",
    "end": "414280"
  },
  {
    "text": "That's a computationally very\nintensive algorithm. ",
    "start": "414280",
    "end": "419340"
  },
  {
    "text": "So on page two, I have some\nquestions for you. (1), (2), (3). Does order 100 n-squared\nequal order n-squared.",
    "start": "419340",
    "end": "425930"
  },
  {
    "text": " Who says yes? All right.",
    "start": "425930",
    "end": "431169"
  },
  {
    "text": "Very good. How about does order\none quarter n-cubed equals order n-cubed? ",
    "start": "431170",
    "end": "437830"
  },
  {
    "text": "Does order n plus order\nn equals order n?",
    "start": "437830",
    "end": "443039"
  },
  {
    "text": "The answer is yes\nto all of those. In the intuitive sense behind\nthis is that big O notation",
    "start": "443040",
    "end": "448830"
  },
  {
    "text": "deals with the limiting\nbehavior of function. So I made some nifty graphs\nfor you guys to look at.",
    "start": "448830",
    "end": "456365"
  },
  {
    "text": "When we're comparing order 100\nn-squared to n-squared n cubed",
    "start": "456365",
    "end": "464259"
  },
  {
    "text": "and 1/4 n-cubed, what people\noften think of is what I have here in the first figure.",
    "start": "464260",
    "end": "470139"
  },
  {
    "text": "So these are the four functions\nI just mentioned. There's a legend in the\ntop left-hand corner.",
    "start": "470140",
    "end": "475630"
  },
  {
    "text": "And the scale of this is\nup to x equals 80. So you'll see at this\nscale, this line",
    "start": "475630",
    "end": "482120"
  },
  {
    "text": "right here is 100 x-squared. So this is, I think, often a\ntripping point is that when",
    "start": "482120",
    "end": "487280"
  },
  {
    "text": "people are conceptualizing\nfunctions, they're saying, well, yeah, 100 x-squared is\nmuch bigger than x-cubed,",
    "start": "487280",
    "end": "492950"
  },
  {
    "text": "which is a lot bigger\nthan 1/4 x-cubed. So for very small inputs,\nyes that's true.",
    "start": "492950",
    "end": "499310"
  },
  {
    "text": "But what we're concerned about\nis the behavior as the input",
    "start": "499310",
    "end": "506620"
  },
  {
    "text": "gets very, very large.  So now, we're looking at\na size of up to 1,000.",
    "start": "506620",
    "end": "516309"
  },
  {
    "text": "So now we see here, x-cubed,\neven though it's a little bit smaller than 100 x-squared in\nthe beginning, it shoots off.",
    "start": "516309",
    "end": "523990"
  },
  {
    "text": "x-cubed is much bigger than\neither of the 2 x-squared. And even 1/4 x-cubed is becoming\nbigger than 100",
    "start": "523990",
    "end": "530339"
  },
  {
    "text": "x-squared out of 1,000. So that's an intuitive sense why\nx-cubed no matter what the",
    "start": "530340",
    "end": "536970"
  },
  {
    "text": "coefficient is in front of it is\ngoing to dominate any term with x-squared in it, because\nx-cubed is just going to go,",
    "start": "536970",
    "end": "542550"
  },
  {
    "text": "whoosh, real big like that. And if we go out even further,\nlet's go out to input size of",
    "start": "542550",
    "end": "549899"
  },
  {
    "text": "50,000, we go out to an input\nsize of 50,000, we see that",
    "start": "549900",
    "end": "556460"
  },
  {
    "text": "even 100 x-squared versus just\nx-squared, alright? they're",
    "start": "556460",
    "end": "565380"
  },
  {
    "text": "about the same. The x-cubed terms now, they're\nway above x-squared.",
    "start": "565380",
    "end": "572910"
  },
  {
    "text": "So the two x-squared terms, 100\nversus just 1, as far as the coefficient goes, they're\nabout the same.",
    "start": "572910",
    "end": "582690"
  },
  {
    "text": "So this is the scale at which\nwe're concerned about when we're talking about big O\nnotation, the limiting",
    "start": "582690",
    "end": "588550"
  },
  {
    "text": "behavior as your input size\ngrows very large. 50,000 is not even that large,\nif you think about the size of",
    "start": "588550",
    "end": "594830"
  },
  {
    "text": "the genome. I mean does anybody here bio? What's like the size of\nthe human genome.",
    "start": "594830",
    "end": "602000"
  },
  {
    "text": "How many base pairs? Or even one gene or\none chromosome.",
    "start": "602000",
    "end": "608094"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: What's the biggest? ",
    "start": "608094",
    "end": "617190"
  },
  {
    "text": "AUDIENCE: It's over 50,000. PROFESSOR: Yeah, over 50,000. And we're talking about the\namount of data that we get",
    "start": "617190",
    "end": "623950"
  },
  {
    "text": "back from the Hubble\nSpace Telescope. I mean the resolution on those\nthings are absolutely ridiculous. And you run all sorts of\nalgorithms on those images to",
    "start": "623950",
    "end": "631540"
  },
  {
    "text": "try and see if there's\nlife in the universe. So we're very concerned about\nthe big long term behavior of",
    "start": "631540",
    "end": "638190"
  },
  {
    "text": "these functions. How about page three? One last question. Does order 100 n-squared\nplus 1/4",
    "start": "638190",
    "end": "647740"
  },
  {
    "text": "n-cube equal order n-cubed? Who says yes?",
    "start": "647740",
    "end": "653680"
  },
  {
    "text": "And so I have one more graph. ",
    "start": "653680",
    "end": "661080"
  },
  {
    "text": "Down here, these red dots\nare 100 x-squared.",
    "start": "661080",
    "end": "666740"
  },
  {
    "text": "These blue circles\nare 1/4 x-cubed. And this line is the sum.",
    "start": "666740",
    "end": "673850"
  },
  {
    "text": "We can see that this line is a\nlittle bit bigger than the 1/4",
    "start": "673850",
    "end": "679810"
  },
  {
    "text": "x-cubed term. But really, this has no effect\nat this far out.",
    "start": "679810",
    "end": "686570"
  },
  {
    "text": "So that's why we're just going\nto drop any lower order terms whenever you're approached with\na big O expression that",
    "start": "686570",
    "end": "693210"
  },
  {
    "text": "has a bunch of constant factors,\nit has all sorts of different powers of n and stuff,\nyou're always just",
    "start": "693210",
    "end": "698509"
  },
  {
    "text": "going to drop all the constant\nfactors and just pick the biggest thing. So this line right here\nis order n-cubed.",
    "start": "698510",
    "end": "708501"
  },
  {
    "text": "Is that clear to everybody? So now I've gotten through the\nbasics of how we analyze this",
    "start": "708501",
    "end": "714450"
  },
  {
    "text": "and why are we looking\nat this. Let's look at some code. ",
    "start": "714450",
    "end": "721210"
  },
  {
    "text": "So the first example, all of\nthese things right here, in",
    "start": "721210",
    "end": "732500"
  },
  {
    "text": "Python, we make the assumption\nthat statements like this, x plus 1, x times y, all these\nmathematical operations are",
    "start": "732500",
    "end": "741019"
  },
  {
    "text": "all constant time. That's something that\nyou can just assume.",
    "start": "741020",
    "end": "746250"
  },
  {
    "text": "So for this function down here,\nwe have constant time, constant time, constant time,\nconstant time operation.",
    "start": "746250",
    "end": "752730"
  },
  {
    "text": "So we'd say, this function\nbar is what? What's its complexity?",
    "start": "752730",
    "end": "757779"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. Constant time. So the complexity of all these\nfunctions are just a 1,",
    "start": "757780",
    "end": "765460"
  },
  {
    "text": "because it doesn't matter\nhow big the input is. It's all going to run\nin constant time.",
    "start": "765460",
    "end": "771279"
  },
  {
    "start": "771280",
    "end": "777610"
  },
  {
    "text": "For this multiplication\nfunction here, we use a for loop.",
    "start": "777610",
    "end": "783430"
  },
  {
    "text": "Oftentimes, when we see for\nloops that's just going through the input, there's a\nsignal to us that it's going",
    "start": "783430",
    "end": "788500"
  },
  {
    "text": "to probably contain\na factor of O(n). Why is that?",
    "start": "788500",
    "end": "793800"
  },
  {
    "text": "What do we do in\nthis for loop? We say for i in range y. What does that mean?",
    "start": "793800",
    "end": "798970"
  },
  {
    "text": "How many times do we execute\nthat for loop? Yeah, y times.",
    "start": "798970",
    "end": "804170"
  },
  {
    "text": "So if y is really small, we\nexecute that for loop just a few number of times. But if y is really large, we\nexecute that for loop a whole",
    "start": "804170",
    "end": "811130"
  },
  {
    "text": "bunch of times. So when we're analyzing this,\nwe see this for loop and we say, ah, that for loop\nmust be O(y).",
    "start": "811130",
    "end": "819430"
  },
  {
    "text": " Does that make sense\nto everybody?",
    "start": "819430",
    "end": "824884"
  },
  {
    "text": "OK, good. Let's look at a factorial.",
    "start": "824884",
    "end": "830501"
  },
  {
    "text": "Can anybody tell me what the\ncomplexity of factorial is?",
    "start": "830501",
    "end": "836014"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. Order n. Why is it order n? AUDIENCE: Because it's\nself for loop.",
    "start": "836015",
    "end": "842830"
  },
  {
    "text": "PROFESSOR: Yeah. It's the exact same structure. We have a for loop that's\ngoing through range 1 to n plus 1.",
    "start": "842830",
    "end": "850850"
  },
  {
    "text": "So that's dependent\non the size of n. So this for loop is order n. And inside the for loop,\nwe just do a",
    "start": "850850",
    "end": "856110"
  },
  {
    "text": "constant time operation. That's the other thing. Just because we have this for\nloop doesn't mean that what's",
    "start": "856110",
    "end": "861389"
  },
  {
    "text": "inside the for loop is\ngoing to be constant. But in this case, if we have\norder n times, we do a content",
    "start": "861390",
    "end": "869470"
  },
  {
    "text": "time operation. Then this whole chunk of the\nfor loop is order n.",
    "start": "869470",
    "end": "874560"
  },
  {
    "text": "The rest of everything else\nis just constant time. So we have constant time plus\norder n times constant time",
    "start": "874560",
    "end": "881490"
  },
  {
    "text": "plus constant time, they're\ngoing to be order n. ",
    "start": "881490",
    "end": "888089"
  },
  {
    "text": "How about this one? Factorial 2.",
    "start": "888090",
    "end": "893810"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. Exactly. This is also order n.",
    "start": "893810",
    "end": "899160"
  },
  {
    "text": "The only thing that's different\nin this code is that we initialize its\ncount variable. And inside the for\nloop, we also",
    "start": "899160",
    "end": "904750"
  },
  {
    "text": "increment this count variable. But both result times equals\nnum and count plus equal 1,",
    "start": "904750",
    "end": "910220"
  },
  {
    "text": "both of these are constant\ntime operations. So if we do n times 2 constant\ntimes operations, that's still",
    "start": "910220",
    "end": "917870"
  },
  {
    "text": "going to be order n. So the takeaway from these two\nexamples that I'm trying to",
    "start": "917870",
    "end": "923779"
  },
  {
    "text": "demonstrate here is a single\nline of code can generate a pretty complex thing.",
    "start": "923780",
    "end": "932010"
  },
  {
    "text": "But a collection of lines\nof code might still be constant time. So you have to look at\nevery line of code",
    "start": "932010",
    "end": "937845"
  },
  {
    "text": "and consider that. ",
    "start": "937845",
    "end": "944725"
  },
  {
    "text": "I've thrown in some\nconditionals here. What's the complexity\nof this guy?",
    "start": "944725",
    "end": "950449"
  },
  {
    "start": "950450",
    "end": "957184"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. This is also linear. What's going on here? We initialize a variable count\nthat's constant time.",
    "start": "957184",
    "end": "965259"
  },
  {
    "text": "We go through character\nin a string. This is linear in the\nsize of a string.",
    "start": "965260",
    "end": "970830"
  },
  {
    "text": "Now we say if character equal,\nequal t, this character equal,",
    "start": "970830",
    "end": "976900"
  },
  {
    "text": "equal t, that's also a constant\ntime operation. That's just asking if this one\nthing equals this other thing.",
    "start": "976900",
    "end": "985200"
  },
  {
    "text": "So we're looking at\ntwo characters. We're looking at two numbers. Equal, equal or not equal\nis generally a",
    "start": "985200",
    "end": "990690"
  },
  {
    "text": "constant times operation. The exception to this might be\na quality of certain types,",
    "start": "990690",
    "end": "999950"
  },
  {
    "text": "like if you define a class and\nyou define a quality method in your class, and the equality\nmethod of your class is not",
    "start": "999950",
    "end": "1005470"
  },
  {
    "text": "constant time, then this equal,\nequal check might not be constant time. But on two strings, equal,\nequal is constant time.",
    "start": "1005470",
    "end": "1013089"
  },
  {
    "text": "And this is constant\ntime as well. So linear in the size\nof a string.",
    "start": "1013090",
    "end": "1018860"
  },
  {
    "text": "Something that's important when\nyou're doing this for exams, it's a good idea to\ndefine what n is before you",
    "start": "1018860",
    "end": "1026910"
  },
  {
    "text": "give the complexity bound. So here I'm saying n is equal\nto the size of a string.",
    "start": "1026910",
    "end": "1033699"
  },
  {
    "text": "So now, I can say this\nfunction is order n. What I'm saying is that it's a\nlinear with respect to the",
    "start": "1033700",
    "end": "1039869"
  },
  {
    "text": "size or the length\nof a string. Because sometimes, like in the\none where there is the input x",
    "start": "1039869",
    "end": "1048140"
  },
  {
    "text": "and y, the running time was only\nlinear in the size of y.",
    "start": "1048140",
    "end": "1053840"
  },
  {
    "text": "So you want to define that n was\nequal to the size of y to say that it was order n. So always be clear.",
    "start": "1053840",
    "end": "1059639"
  },
  {
    "text": "If it's not clear, be sure\nto explicitly state what n is equal to. ",
    "start": "1059640",
    "end": "1068720"
  },
  {
    "text": "This code's a little\nmore tricky. What's going on here?",
    "start": "1068720",
    "end": "1075315"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "1075315",
    "end": "1090962"
  },
  {
    "text": "PROFESSOR: Yeah. That was perfect. So just to reiterate, the for\nloop we know is linear with",
    "start": "1090963",
    "end": "1100100"
  },
  {
    "text": "respect to the size\nof a string. We have to go through every\ncharacter in a string. Now, the second is if char in\nb string, when we're looking",
    "start": "1100100",
    "end": "1109220"
  },
  {
    "text": "at big O notation, we're worried\nabout the worst case complexity in upper bound. What's the worst case?",
    "start": "1109220",
    "end": "1115635"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. If the character is not in b\nstring, we have to look at every single character\nin b string before",
    "start": "1115635",
    "end": "1122760"
  },
  {
    "text": "we can return false. So that is linear. This one single line, if\ncharacter in b string, that",
    "start": "1122760",
    "end": "1130320"
  },
  {
    "text": "one line is linear\nwith respect to the size of b string.",
    "start": "1130320",
    "end": "1135330"
  },
  {
    "text": "So how do we analyze the\ncomplexity of this? I want to be able to\ntouch the screen.",
    "start": "1135330",
    "end": "1143000"
  },
  {
    "text": "We have this for loop. This for loop is executed.",
    "start": "1143000",
    "end": "1148110"
  },
  {
    "text": "Let's call n is the length\nof a string. This for loop is executed\nn times.",
    "start": "1148110",
    "end": "1153460"
  },
  {
    "text": "Every time we execute\nthis for loop, we execute this inner body. And what's the time bound\non the inner body?",
    "start": "1153460",
    "end": "1160919"
  },
  {
    "text": "Well, if we let m equal the\nlength of b string, when we say that this check is order m\nevery time we run it, then we",
    "start": "1160920",
    "end": "1168320"
  },
  {
    "text": "run an order m operation\norder n times.",
    "start": "1168320",
    "end": "1174009"
  },
  {
    "text": "So the complexity is--  we use something of\nsize m, n times.",
    "start": "1174010",
    "end": "1181850"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. Just order n, m. ",
    "start": "1181850",
    "end": "1189640"
  },
  {
    "text": "So we execute an order m check\norder n time, we say this function is order n, m.",
    "start": "1189640",
    "end": "1197340"
  },
  {
    "text": "Does that make sense\nto everybody? Because you'll see the\nnested for loops. Nested for loops are very\nsimilar to this.",
    "start": "1197340",
    "end": "1204070"
  },
  {
    "text": " While loops combine the best of\nconditionals with the best",
    "start": "1204070",
    "end": "1211960"
  },
  {
    "text": "of for loops. Because a while loop has a\nchance to act like for loop,",
    "start": "1211960",
    "end": "1217350"
  },
  {
    "text": "but a while loop can also\nhave a conditional. It's actually possible to write\na while loop that has a",
    "start": "1217350",
    "end": "1222910"
  },
  {
    "text": "complex conditional that also\nexecutes a number of times. And so you could have one single\nline of code generating",
    "start": "1222910",
    "end": "1228790"
  },
  {
    "text": "like an order n-squared\ncomplexity. Let's look at factorial 3.",
    "start": "1228790",
    "end": "1234610"
  },
  {
    "text": "Who can tell the complexity\nof factorial 3? ",
    "start": "1234610",
    "end": "1243751"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. It's also linear. It's interesting that factorial\nis always linear",
    "start": "1243751",
    "end": "1251070"
  },
  {
    "text": "despite its name. We have constant time\noperations. How many times does the\nwhile loop executed?",
    "start": "1251070",
    "end": "1257941"
  },
  {
    "text": "AUDIENCE: n times. PROFESSOR: Yeah, n times. And what's inside the body\nof the while loop?",
    "start": "1257942",
    "end": "1263960"
  },
  {
    "text": "Constant time operations. So we execute a bunch of\nconstant time operation n times order n.",
    "start": "1263960",
    "end": "1271690"
  },
  {
    "text": "How about this char\nsplit example? ",
    "start": "1271690",
    "end": "1276884"
  },
  {
    "text": "This one's a little tricky\nbecause you're like, well, what's the complexity of len? ",
    "start": "1276884",
    "end": "1283600"
  },
  {
    "text": "In Python, len's actually a\nconstant time operation. This example's very crafted\nsuch that all of the",
    "start": "1283600",
    "end": "1289110"
  },
  {
    "text": "operations that are here\nare constant time. So appending to a list\nis constant time.",
    "start": "1289110",
    "end": "1294659"
  },
  {
    "text": "And indexing a string\nis constant time. So what's the complexity\nof char split?",
    "start": "1294660",
    "end": "1301299"
  },
  {
    "start": "1301300",
    "end": "1307940"
  },
  {
    "text": "Constant time. AUDIENCE: [INAUDIBLE]. ",
    "start": "1307940",
    "end": "1317442"
  },
  {
    "text": "PROFESSOR: Who would agree\nwith constant time? And who would say it's\nlinear time?",
    "start": "1317442",
    "end": "1323302"
  },
  {
    "text": "OK, yeah. Very good. It is linear time. That's a correct intuition. We say while the length of the\na string is not equal to the",
    "start": "1323302",
    "end": "1330990"
  },
  {
    "text": "length of the result, these\nare two constant time operations. Well, what do we do? We append a value to the result,\nand then we add up",
    "start": "1330990",
    "end": "1338850"
  },
  {
    "text": "this index. So when is this check\ngoing to be equal? This check's going to be equal\nwhen the length of the result",
    "start": "1338850",
    "end": "1345490"
  },
  {
    "text": "is equal to the length\nof a string. And that's only going to\nhappen after we've gone through the entire a string,\nand we've added each of its",
    "start": "1345490",
    "end": "1351730"
  },
  {
    "text": "characters to result. So this is linear with respect\nto the size of a string.",
    "start": "1351730",
    "end": "1358520"
  },
  {
    "text": "Something that's important to\nrecognize is that not all string in the list operations\nare constant time.",
    "start": "1358520",
    "end": "1365389"
  },
  {
    "text": "There's a website here that\nfirst off, it says C Python if you go to it.",
    "start": "1365390",
    "end": "1370780"
  },
  {
    "text": "C Python just means Python\nimplemented in C, which is actually what you're\nrunning, C Python.",
    "start": "1370780",
    "end": "1376860"
  },
  {
    "text": "So don't worry about that. There's often two time\nbound complexities.",
    "start": "1376860",
    "end": "1381919"
  },
  {
    "text": "It says the amortized time\nand the worst case time. And so if you're looking for big\nO notation, you don't want",
    "start": "1381920",
    "end": "1387990"
  },
  {
    "text": "to use the amortized time. You want to use the\nworst case time. And it's important to note that\noperations like slicing",
    "start": "1387990",
    "end": "1394870"
  },
  {
    "text": "and copying actually aren't\nconstant time. If you slice a list or a string,\nthe complexity of that",
    "start": "1394870",
    "end": "1402770"
  },
  {
    "text": "operation is going to depend\non how big your slice is. Does that makes sense? Does the way that a slice works\nis that walks through",
    "start": "1402770",
    "end": "1409690"
  },
  {
    "text": "the list until it gets to the\nindex, and then keeps walking until the final index, and\nthen copies that and",
    "start": "1409690",
    "end": "1416330"
  },
  {
    "text": "returns it to you. So slicing is not\nconstant time. Copying is similarly\nnot constant time.",
    "start": "1416330",
    "end": "1423150"
  },
  {
    "text": " For this little snippet\nof code, this is just",
    "start": "1423150",
    "end": "1430630"
  },
  {
    "text": "similar to what we-- yeah? AUDIENCE: [INAUDIBLE]. ",
    "start": "1430630",
    "end": "1446215"
  },
  {
    "text": "PROFESSOR: So this is\nwhat I was saying. You want to define what n is.",
    "start": "1446215",
    "end": "1452420"
  },
  {
    "text": "So we say something like n\nequals the length of a string. And then you can say\nit's order n.",
    "start": "1452420",
    "end": "1459400"
  },
  {
    "text": "It's important to define what\nyou're saying the complexity is related to.",
    "start": "1459400",
    "end": "1464430"
  },
  {
    "text": " So here, I'm saying if we let n\nequal to the size of z, can",
    "start": "1464430",
    "end": "1471279"
  },
  {
    "text": "anybody tell me what the\ncomplexity of this snippet of code is?",
    "start": "1471280",
    "end": "1476870"
  },
  {
    "text": "[UNINTELLIGIBLE]. AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah, precisesly. Order n-squared. Why? Well, because we execute\nthis for i for loop",
    "start": "1476870",
    "end": "1484360"
  },
  {
    "text": "here order n times. Each time through this for loop,\nthe body of this for",
    "start": "1484360",
    "end": "1490860"
  },
  {
    "text": "loop is, in fact, another\nfor loop. So my approach to problems like\nthis is just step back a",
    "start": "1490860",
    "end": "1498290"
  },
  {
    "text": "minute and ignore\nthe outer loop. Just concentrate on\nthe inner loop. What's the runtime of\nthis inner loop?",
    "start": "1498290",
    "end": "1504010"
  },
  {
    "text": " Yeah. This is order n. We go through this. Now, go to the outer loop.",
    "start": "1504010",
    "end": "1510760"
  },
  {
    "text": "Just ignore the body\nsince we've already analyzed the body. Ignore it. What's the complexity\nof the outer loop?",
    "start": "1510760",
    "end": "1517640"
  },
  {
    "text": "Also order n. So now you can combine\nthe analysis. You can say for order n times,\nI execute this body.",
    "start": "1517640",
    "end": "1526190"
  },
  {
    "text": "This body takes order n times. So if execute something that's\norder n order n times, that is",
    "start": "1526190",
    "end": "1534159"
  },
  {
    "text": "order n squared complexity. So we just multiply how long it\ntakes the outer body of the loop to take the inner\nbody of the loop.",
    "start": "1534160",
    "end": "1540550"
  },
  {
    "text": "And so in this fashion, I could\ngive you now probably a four or five nested for loop,\nand you could tell me the",
    "start": "1540550",
    "end": "1546240"
  },
  {
    "text": "complexity of it. ",
    "start": "1546240",
    "end": "1552900"
  },
  {
    "text": "Harder sometimes to understand\nis recursion. I don't know how important it is\nto understand this because",
    "start": "1552900",
    "end": "1560180"
  },
  {
    "text": "I've never actually taught\nthis class before. But Mitch did tell me\nto go over this. So I'd like to touch on it.",
    "start": "1560180",
    "end": "1566500"
  },
  {
    "text": "So consider recursive\nfactorial. What's the time complexity\nof this? How can we figure out\nthe time complexity",
    "start": "1566500",
    "end": "1573740"
  },
  {
    "text": "over a recursive function? ",
    "start": "1573740",
    "end": "1583020"
  },
  {
    "text": "The way we want to figure out\nthe time complexity of a recursive function is just to\nfigure out how many times we're executing said\nrecursive function.",
    "start": "1583020",
    "end": "1590570"
  },
  {
    "text": "So here I have recursive\nfactorial of n. When I make a call to\nthis, what do I do?",
    "start": "1590570",
    "end": "1599750"
  },
  {
    "text": "I make a call to recursive\nfactorial n minus 1.",
    "start": "1599750",
    "end": "1605850"
  },
  {
    "text": "And then what does this do? This calls recursive factorial\non a sub problem the",
    "start": "1605850",
    "end": "1611429"
  },
  {
    "text": "size n minus 2. So oftentimes, when you're\ndealing with recursive",
    "start": "1611430",
    "end": "1620179"
  },
  {
    "text": "problems to figure out the\ncomplexity, what you need to do is you need to figure out how\nmany times you're going to",
    "start": "1620180",
    "end": "1626190"
  },
  {
    "text": "make a recursive call before\na result is returned. Intuitively, we can start\nto see a pattern.",
    "start": "1626190",
    "end": "1632590"
  },
  {
    "text": "We can say, I called on n, and\nthen n minus 1, and then n minus 2, and I keep calling\nrecursive factorial until n is",
    "start": "1632590",
    "end": "1642850"
  },
  {
    "text": "less than or equal to 0. When is n going to be less\nthan or equal to 0? Well, when I get n minus n.",
    "start": "1642850",
    "end": "1648740"
  },
  {
    "text": " So how many calls is that?",
    "start": "1648740",
    "end": "1654626"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. This is n calls. So it's a good practice to get\ninto being able to draw this",
    "start": "1654626",
    "end": "1663530"
  },
  {
    "text": "out and work yourself through\nhow many times you're running the recursion. And we see we're making n calls,\nwe can say, oh, this",
    "start": "1663530",
    "end": "1671000"
  },
  {
    "text": "must be linear in time. ",
    "start": "1671000",
    "end": "1676720"
  },
  {
    "text": "How about this one,\nthis foo function? ",
    "start": "1676720",
    "end": "1686409"
  },
  {
    "text": "This one's a little\nharder to see. But what are we doing?",
    "start": "1686410",
    "end": "1692330"
  },
  {
    "text": "We call foo on input of size n,\nwhich then makes a call to",
    "start": "1692330",
    "end": "1700480"
  },
  {
    "text": "sub problem the size n/2, which\nmakes the call to a sub problem of size n/4 and so on\nuntil I make a call to sub",
    "start": "1700480",
    "end": "1714200"
  },
  {
    "text": "problem of some size. So this is n. This is 2 to the 1st.",
    "start": "1714200",
    "end": "1720840"
  },
  {
    "text": "This is 2-squared. We start to see a pattern-- 2-squared, 2-cubed,\n2 to the fourth.",
    "start": "1720840",
    "end": "1727610"
  },
  {
    "text": "So we're going to keep making\ncalls on a smaller, and smaller, and smaller\nsub problem size.",
    "start": "1727610",
    "end": "1732820"
  },
  {
    "text": "But instead of being linear like\nbefore, we're decreasing at an exponential rate.",
    "start": "1732820",
    "end": "1738100"
  },
  {
    "text": " There's a bunch of different\nways to try and work this out",
    "start": "1738100",
    "end": "1743470"
  },
  {
    "text": "in your head. I wrote up one possible\ndescription. But when we're decreasing at\nthis exponential rate, what's",
    "start": "1743470",
    "end": "1750330"
  },
  {
    "text": "going to end up happening is\nthat this recursive problem",
    "start": "1750330",
    "end": "1755360"
  },
  {
    "text": "where we make a recursive call\nin the form to sub problem of",
    "start": "1755360",
    "end": "1761900"
  },
  {
    "text": "size n/b, the complexity of that\nis always going to be log",
    "start": "1761900",
    "end": "1768310"
  },
  {
    "text": "base b of n. So this is just like bisection\nsearch, where bisection",
    "start": "1768310",
    "end": "1773840"
  },
  {
    "text": "search, we essentially do\nin bisection search. We restrict the problem size\nby half every time.",
    "start": "1773840",
    "end": "1779450"
  },
  {
    "text": "And that leads to logarithmic\ntime, actually log base 2 of n. This problem is also\nlog base 2 of n.",
    "start": "1779450",
    "end": "1786540"
  },
  {
    "text": "If we change this recursive call\nfrom n/2 to n/6, we get a",
    "start": "1786540",
    "end": "1794520"
  },
  {
    "text": "cut time complexity of\nlog base 6 of n. So try and work that through.",
    "start": "1794520",
    "end": "1800120"
  },
  {
    "text": "You can read this\ncloser later. Definitely ask me if you need\nmore help on that one.",
    "start": "1800120",
    "end": "1806280"
  },
  {
    "text": "The last one is how do we deal\ntime complexity of something like Fibonacci? ",
    "start": "1806280",
    "end": "1813250"
  },
  {
    "text": "Fibonacci, fib n minus 1 plus\nfib n minus 2, initially, that",
    "start": "1813250",
    "end": "1819260"
  },
  {
    "text": "kind of looks linear. Right? We just went over the recursive\nfactorial, and it",
    "start": "1819260",
    "end": "1824960"
  },
  {
    "text": "made the call to a sub problem\nthe size n minus 1. And that was linear.",
    "start": "1824960",
    "end": "1831280"
  },
  {
    "text": "Fibonacci's a little\nbit different. If you actually draw out in a\ntree, you start to see like at",
    "start": "1831280",
    "end": "1836870"
  },
  {
    "text": "every level of the tree, we\nexpand the call by 2.",
    "start": "1836870",
    "end": "1844090"
  },
  {
    "text": "Now imagine this is just\nfor Fibonacci of 6. Whenever you're doing big O\ncomplexity, you want to",
    "start": "1844090",
    "end": "1849610"
  },
  {
    "text": "imagine it and put\n100,000, 50,000. And you could imagine how\nbig that tree grows.",
    "start": "1849610",
    "end": "1855585"
  },
  {
    "text": " Intuitively, the point to see\nhere is that they're going to",
    "start": "1855585",
    "end": "1863640"
  },
  {
    "text": "be about n levels to get\ndown to 1 from your",
    "start": "1863640",
    "end": "1870340"
  },
  {
    "text": "initial input of 6. So to get down to 1 from an\ninitial input of size n is going to take about n levels.",
    "start": "1870340",
    "end": "1877260"
  },
  {
    "text": "The branching factor of this\ntree at each level is 2. So if we have n levels, and at\neach level, we increase our",
    "start": "1877260",
    "end": "1886460"
  },
  {
    "text": "branching factor by another 2,\nwe can say that a loose bound on the complexity of this\nis actually 2 to the n.",
    "start": "1886460",
    "end": "1892840"
  },
  {
    "text": " This is something that's even\nless intuitive, I think, than",
    "start": "1892840",
    "end": "1899450"
  },
  {
    "text": "what we did before with\nthe logarithms. So try and work through\nit again. Play with it a little bit.",
    "start": "1899450",
    "end": "1905020"
  },
  {
    "text": "There's actually a tighter bound\non this, which is like 1.62 to the n, which is a lot\nmore complicated math that you",
    "start": "1905020",
    "end": "1911170"
  },
  {
    "text": "could look up. But for the purposes of this\nclass, it's sufficient to say",
    "start": "1911170",
    "end": "1916530"
  },
  {
    "text": "that Fibonacci is order\n2 to the n. ",
    "start": "1916530",
    "end": "1922900"
  },
  {
    "text": "So does that roughly clear up\nsome time complexities stuff for you guys?",
    "start": "1922900",
    "end": "1928910"
  },
  {
    "text": "OK, awesome. Does anybody have the time? I forgot my watch today. AUDIENCE: 12:42. PROFESSOR: OK, excellent.",
    "start": "1928910",
    "end": "1935350"
  },
  {
    "text": "That gives us a little bit\nof time to talk about object-oriented programming. Does anybody had any specific\nquestions that object-oriented",
    "start": "1935350",
    "end": "1941650"
  },
  {
    "text": "programming? How about this? How many of you guys finished\nthe problem set and turned it",
    "start": "1941650",
    "end": "1947106"
  },
  {
    "text": "in already? Or did any of you guys not turn\nin the problem set yet?",
    "start": "1947106",
    "end": "1952890"
  },
  {
    "text": "I'll talk loosely about it then,\nnot too specifically. Does anybody have any questions\nfrom, I guess, at",
    "start": "1952890",
    "end": "1959120"
  },
  {
    "text": "least the first part? We're making some classes,\nmaking some trigger classes. Yeah?",
    "start": "1959120",
    "end": "1964593"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]? ",
    "start": "1964593",
    "end": "1970251"
  },
  {
    "text": "PROFESSOR: Self dot what? AUDIENCE: [INAUDIBLE]. ",
    "start": "1970251",
    "end": "1976415"
  },
  {
    "text": "PROFESSOR: When we\nhave like self-- we have like the\ngetter methods. So what's important\nabout that?",
    "start": "1976415",
    "end": "1982505"
  },
  {
    "text": "I'll Tell you what's important\nabout that. So we have a class.",
    "start": "1982505",
    "end": "1987600"
  },
  {
    "text": "Let's say we have\na class person. ",
    "start": "1987600",
    "end": "1996490"
  },
  {
    "text": "So we define our INIT method\nto just take a name.",
    "start": "1996490",
    "end": "2001900"
  },
  {
    "start": "2001900",
    "end": "2012230"
  },
  {
    "text": "And so now, what the problems\nthat ask you to do was to define a getter method. Define a getter method\ncalled get_name that",
    "start": "2012230",
    "end": "2024410"
  },
  {
    "text": "just returns the attribute. ",
    "start": "2024410",
    "end": "2030690"
  },
  {
    "text": "So what's the point of this? Because I can just say\nSally equals person.",
    "start": "2030690",
    "end": "2038333"
  },
  {
    "start": "2038333",
    "end": "2047550"
  },
  {
    "text": "So here, I defined a\nperson named Sally. And I initialized a person\nwith the string Sally.",
    "start": "2047550",
    "end": "2055579"
  },
  {
    "text": "If I just look at sally.name,\nthat's going to just directly print the attribute.",
    "start": "2055580",
    "end": "2061629"
  },
  {
    "text": "So why do we need this\nget name function? What's the point of this\nadditional getter method?",
    "start": "2061630",
    "end": "2067989"
  },
  {
    "text": "Does anybody know why that is? AUDIENCE: [INAUDIBLE]. ",
    "start": "2067989",
    "end": "2074510"
  },
  {
    "text": "PROFESSOR: Right. So that's what it does. This get_name does return\nthe attribute name. But we don't need this method\nto just look at",
    "start": "2074510",
    "end": "2082129"
  },
  {
    "text": "the attribute name.  Let's actually code this up.",
    "start": "2082130",
    "end": "2087320"
  },
  {
    "start": "2087320",
    "end": "2098970"
  },
  {
    "text": "So we have class person. ",
    "start": "2098970",
    "end": "2118760"
  },
  {
    "text": "So if we run this code, and\nover here in the shell, we define Sally equals person\nwith the name Sally.",
    "start": "2118760",
    "end": "2128210"
  },
  {
    "text": " If I just print sally.name,\nit prints the attribute.",
    "start": "2128210",
    "end": "2137200"
  },
  {
    "text": "So why did I need to provide\nthis getter method called",
    "start": "2137200",
    "end": "2142970"
  },
  {
    "text": "get_name that does\nthe same thing? That's the question. That seems sort of redundant.",
    "start": "2142970",
    "end": "2151200"
  },
  {
    "text": "But there's actually a pretty\nbig important reason for it. Let's say we set s name equal\nto the attribute sally.name.",
    "start": "2151200",
    "end": "2159200"
  },
  {
    "text": " If we look at s name,\nwe see Sally.",
    "start": "2159200",
    "end": "2167300"
  },
  {
    "text": "Now if I say-- actually, I'm not sure if this\nis the correct reasoning. ",
    "start": "2167300",
    "end": "2201770"
  },
  {
    "text": "This is going to be better. Let's say Sally equals\na person Sally",
    "start": "2201770",
    "end": "2209910"
  },
  {
    "text": "who's taking what? 1803, 605, 11.1.",
    "start": "2209910",
    "end": "2219560"
  },
  {
    "text": "So now I can look at the\nattribute classes to show Sally's classes, which\nare weird flows.",
    "start": "2219560",
    "end": "2228020"
  },
  {
    "text": "And I can also use\nsally.getclasses to look at Sally's classes.",
    "start": "2228020",
    "end": "2235300"
  },
  {
    "text": "If I set a variable s classes\nequal to sally.classes, this",
    "start": "2235300",
    "end": "2241740"
  },
  {
    "text": "binds this variable s classes\nto the attribute sally.classes.",
    "start": "2241740",
    "end": "2246960"
  },
  {
    "text": "Now if I say sclasses.append\n1401, if I now look at the",
    "start": "2246960",
    "end": "2258290"
  },
  {
    "text": "attribute sally.classes,\nit now has 1401 in it.",
    "start": "2258290",
    "end": "2266990"
  },
  {
    "text": "This is not safe. This is not type safe. Because the reason for that is\nif you define a class, and you",
    "start": "2266990",
    "end": "2272970"
  },
  {
    "text": "access the classes' attributes\ndirectly instead of through a getter method, you\ncan then do this.",
    "start": "2272970",
    "end": "2278910"
  },
  {
    "text": "And sometimes, it's\naccidental. You'll set some variable equal\nto some attribute of a class.",
    "start": "2278910",
    "end": "2285080"
  },
  {
    "text": "Then later on in your code,\nyou'll alter that variable.",
    "start": "2285080",
    "end": "2290130"
  },
  {
    "text": "But that variable is not a\ncopy of the attribute. Yes, you can make copies of that\nattribute and stuff, but",
    "start": "2290130",
    "end": "2297250"
  },
  {
    "text": "the overall takeaway is that in\nprogramming, we try to do something called defensive\nprogramming.",
    "start": "2297250",
    "end": "2302609"
  },
  {
    "text": "This isn't defensive. Because it is possible if you\ncode it incorrectly to alter",
    "start": "2302610",
    "end": "2309770"
  },
  {
    "text": "the attribute the instance\nof the class. But if we use the getter\nmethod, if instead of",
    "start": "2309770",
    "end": "2316030"
  },
  {
    "text": "sally.classes, instead of\ndirectly accessing the attribute here, we have\nset s classes equal to",
    "start": "2316030",
    "end": "2321160"
  },
  {
    "text": "sally.getclasses. And then, we had changed\ns classes around. That wouldn't have happened,\nbecause the getter method, it",
    "start": "2321160",
    "end": "2330180"
  },
  {
    "text": "does return self.classes. But in the way that Python is\nscoped and when we return",
    "start": "2330180",
    "end": "2335829"
  },
  {
    "text": "something, we're not returning\nthe exact same thing, the reference that we're returning\na copy of it.",
    "start": "2335830",
    "end": "2342849"
  },
  {
    "text": "Does that make sense? All right. Cool. Other questions about classes? We have a little class appear\nif there's like some basic",
    "start": "2342850",
    "end": "2349770"
  },
  {
    "text": "stuff that you'd like\nexplained again. Now's the time. AUDIENCE: [INAUDIBLE].",
    "start": "2349770",
    "end": "2355300"
  },
  {
    "text": " PROFESSOR: So here, I'm setting\njust some variable s",
    "start": "2355300",
    "end": "2363900"
  },
  {
    "text": "classes equal to the attribute\nsally classes. it's just like setting any sort\nof variable equal to some",
    "start": "2363900",
    "end": "2371800"
  },
  {
    "text": "other quantity. AUDIENCE: So you appending the\nvariable, but it also appended like the attribute of Sally?",
    "start": "2371800",
    "end": "2378282"
  },
  {
    "text": "PROFESSOR: So what I did here\nwas I set the variable s classes equal to this attribute\nsallly.classes.",
    "start": "2378282",
    "end": "2386710"
  },
  {
    "text": "And then, because I know this is\na list, I appended another value to it. But this is the same as when\nwe have two lists.",
    "start": "2386710",
    "end": "2394440"
  },
  {
    "text": "If we have a list called a, and\nwe say a is equal to 1, 2, 3, then I say b is equal to a.",
    "start": "2394440",
    "end": "2402440"
  },
  {
    "text": "What is b? Now If I say b.append 1401,\nwhat does b look like?",
    "start": "2402440",
    "end": "2412910"
  },
  {
    "text": "What does a look like? Because they're aliases\nof each other. So what I did here, when I set\ns classes directly equal to",
    "start": "2412910",
    "end": "2420900"
  },
  {
    "text": "the attribute sally.classes,\nI made s classes an alias of the attribute.",
    "start": "2420900",
    "end": "2426180"
  },
  {
    "text": "But the problem with that is\nthat then I can change them. And because they're\naliases, the",
    "start": "2426180",
    "end": "2431770"
  },
  {
    "text": "attribute itself has changed. And we don't want to do that\nin object-oriented programming. We need to find an object.",
    "start": "2431770",
    "end": "2438300"
  },
  {
    "text": "The only way you should be able\nto change an attribute is through some method of the\nclass that allows you to",
    "start": "2438300",
    "end": "2444330"
  },
  {
    "text": "change that attribute. So if I want to be able to add\na class to Sally's class",
    "start": "2444330",
    "end": "2449970"
  },
  {
    "text": "lists, I should define a method\ncalled define add class",
    "start": "2449970",
    "end": "2459700"
  },
  {
    "text": "that does self.classes.append\nnew class. ",
    "start": "2459700",
    "end": "2468280"
  },
  {
    "text": "While technically, it's possible\nto directly access an attribute, it's really bad\npractice to do so simply",
    "start": "2468280",
    "end": "2475540"
  },
  {
    "text": "because this unexpected\nbehavior can result. And also because if you say,\noh, well, it's not going to",
    "start": "2475540",
    "end": "2481340"
  },
  {
    "text": "matter for this one time,\nI'll remember how to do the right thing. The problem with that is it's\noften the case that you're not",
    "start": "2481340",
    "end": "2486750"
  },
  {
    "text": "the only person using\nyour code. So it's a better practice to\nprovide all the sorts of",
    "start": "2486750",
    "end": "2492320"
  },
  {
    "text": "methods that you would need to\ndo with the class in order to get an access and change\nattributes as",
    "start": "2492320",
    "end": "2498570"
  },
  {
    "text": "methods within the class. Does that make sense? ",
    "start": "2498570",
    "end": "2506059"
  },
  {
    "text": "So yeah, this is maybe our one\nviolation if you guys have been attending my recitation. Our mantra of programmers\nare lazy.",
    "start": "2506060",
    "end": "2513910"
  },
  {
    "text": "This is less lazy than just\ndirectly accessing the attributes. But even though we know that\nprogrammers are super, super",
    "start": "2513910",
    "end": "2519690"
  },
  {
    "text": "lazy, programmers also like\nto be super, super safe. So when there's a trade off\nbetween defensive programming",
    "start": "2519690",
    "end": "2525579"
  },
  {
    "text": "and being lazy, always pick\ndefensive programming. ",
    "start": "2525580",
    "end": "2531882"
  }
]