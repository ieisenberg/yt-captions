[
  {
    "start": "0",
    "end": "6070"
  },
  {
    "text": "PROFESSOR: Hi.",
    "start": "6070",
    "end": "6910"
  },
  {
    "text": "Today I'd like to talk to you\nabout some notable aspects of",
    "start": "6910",
    "end": "9330"
  },
  {
    "text": "Python that you'll encounter in\nthe 6.01 software, as well",
    "start": "9330",
    "end": "12660"
  },
  {
    "text": "as in the general sense when\nworking with Python.",
    "start": "12660",
    "end": "15639"
  },
  {
    "text": "A lot of these little tidbits\nof Python have some",
    "start": "15640",
    "end": "19160"
  },
  {
    "text": "interesting history associated\nwith them, especially related",
    "start": "19160",
    "end": "22050"
  },
  {
    "text": "to the history of computer\nscience.",
    "start": "22050",
    "end": "23689"
  },
  {
    "text": "And also, I want to indicate\nsome things that tend to mess",
    "start": "23690",
    "end": "26470"
  },
  {
    "text": "up, especially, first time\nprogrammers, but also",
    "start": "26470",
    "end": "29269"
  },
  {
    "text": "especially people that\nare new to Python.",
    "start": "29270",
    "end": "32020"
  },
  {
    "text": "First, I'd like to bring\nus back to last week.",
    "start": "32020",
    "end": "34730"
  },
  {
    "text": "We were talking about\nobject-oriented programming",
    "start": "34730",
    "end": "37140"
  },
  {
    "text": "and inheritance.",
    "start": "37140",
    "end": "37930"
  },
  {
    "text": "Object-oriented programming\nis a programming paradigm.",
    "start": "37930",
    "end": "40830"
  },
  {
    "text": "It's in the same category as\nimperative programming or",
    "start": "40830",
    "end": "43750"
  },
  {
    "text": "functional programming.",
    "start": "43750",
    "end": "45000"
  },
  {
    "text": "And you might say I have a good\nsense of the fact that in",
    "start": "45000",
    "end": "47950"
  },
  {
    "text": "object-oriented programming,\neverything is an object.",
    "start": "47950",
    "end": "49860"
  },
  {
    "text": "But I don't really have a good\nsense of what constitutes",
    "start": "49860",
    "end": "51780"
  },
  {
    "text": "imperative programming or\nfunctional programming.",
    "start": "51780",
    "end": "54699"
  },
  {
    "text": "I'm going to focus on functional\nprogramming right",
    "start": "54700",
    "end": "56310"
  },
  {
    "text": "now, because it has more of a\nhistoric root in the academic",
    "start": "56310",
    "end": "59820"
  },
  {
    "text": "development of computer\nscience.",
    "start": "59820",
    "end": "61810"
  },
  {
    "text": "Functional programming is like\nobject-oriented programming in",
    "start": "61810",
    "end": "64819"
  },
  {
    "text": "that everything is a function.",
    "start": "64819",
    "end": "66390"
  },
  {
    "text": "It refers to the idea that you\nwant to write as much of your",
    "start": "66390",
    "end": "70080"
  },
  {
    "text": "code as possible in a purely\nfunctional manner.",
    "start": "70080",
    "end": "72880"
  },
  {
    "text": "And in particular, you're\nlooking for the ability to",
    "start": "72880",
    "end": "76579"
  },
  {
    "text": "avoid things like side-effects\nor enable many different kinds",
    "start": "76580",
    "end": "82740"
  },
  {
    "text": "of evaluation.",
    "start": "82740",
    "end": "85210"
  },
  {
    "text": "Those kinds of things are not\nthe subject of this course,",
    "start": "85210",
    "end": "87159"
  },
  {
    "text": "but I think they're worth noting\nto figure out why we're",
    "start": "87160",
    "end": "90910"
  },
  {
    "text": "bothering learning about things\nlike lambdas and list",
    "start": "90910",
    "end": "92830"
  },
  {
    "text": "comprehensions in\nthe first place.",
    "start": "92830",
    "end": "95760"
  },
  {
    "text": "Speaking of which, the first\nthing we need to talk about",
    "start": "95760",
    "end": "98210"
  },
  {
    "text": "before we even talk about things\nlike lambdas and list",
    "start": "98210",
    "end": "100090"
  },
  {
    "text": "comprehensions, is the concept\nthat in Python,",
    "start": "100090",
    "end": "103880"
  },
  {
    "text": "everything is an object.",
    "start": "103880",
    "end": "105439"
  },
  {
    "text": "But because functions are\nfirst-class objects, we can",
    "start": "105440",
    "end": "108440"
  },
  {
    "text": "also treat Python to a large\nextent like a functional",
    "start": "108440",
    "end": "112030"
  },
  {
    "text": "programming language.",
    "start": "112030",
    "end": "113310"
  },
  {
    "text": "What do I mean when\nI say functions",
    "start": "113310",
    "end": "115159"
  },
  {
    "text": "are first class objects?",
    "start": "115160",
    "end": "116730"
  },
  {
    "text": "I mean that a function\ncan be the return",
    "start": "116730",
    "end": "119950"
  },
  {
    "text": "value of another function.",
    "start": "119950",
    "end": "121409"
  },
  {
    "text": "I mean that the function can be\npassed in as an argument to",
    "start": "121410",
    "end": "124550"
  },
  {
    "text": "a function.",
    "start": "124550",
    "end": "125400"
  },
  {
    "text": "And I mean that functions can be\nassigned variable names and",
    "start": "125400",
    "end": "128399"
  },
  {
    "text": "manipulated the same way that we\nmanipulate any other piece",
    "start": "128400",
    "end": "131170"
  },
  {
    "text": "of data structure.",
    "start": "131170",
    "end": "132730"
  },
  {
    "text": "This is important, because\nif you want higher order",
    "start": "132730",
    "end": "135819"
  },
  {
    "text": "functions or functions that\nactually modify or use other",
    "start": "135820",
    "end": "139840"
  },
  {
    "text": "functions as a part of you know,\nwhatever it is they do,",
    "start": "139840",
    "end": "143209"
  },
  {
    "text": "then you need to be able to\ninteract with the function",
    "start": "143210",
    "end": "145320"
  },
  {
    "text": "like it's any other object,\nin part pass it in",
    "start": "145320",
    "end": "147930"
  },
  {
    "text": "or return it out.",
    "start": "147930",
    "end": "149900"
  },
  {
    "text": "Let's look at an example.",
    "start": "149900",
    "end": "151480"
  },
  {
    "text": "So let's say I start off with a\nvery basic function, right?",
    "start": "151480",
    "end": "157290"
  },
  {
    "text": "If you want to square some\nsort of value, probably",
    "start": "157290",
    "end": "160140"
  },
  {
    "text": "numeric in this case, then\nall you have to do is",
    "start": "160140",
    "end": "163340"
  },
  {
    "text": "multiply it by itself.",
    "start": "163340",
    "end": "165180"
  },
  {
    "text": "Pretty simple.",
    "start": "165180",
    "end": "165859"
  },
  {
    "text": "Good place to start.",
    "start": "165860",
    "end": "167110"
  },
  {
    "start": "167110",
    "end": "169220"
  },
  {
    "text": "As a consequence of the idea\nthat functions are first class",
    "start": "169220",
    "end": "172160"
  },
  {
    "text": "objects, I can write a function\nthat takes in a",
    "start": "172160",
    "end": "175420"
  },
  {
    "text": "function as an argument and\nthen develops a return",
    "start": "175420",
    "end": "179650"
  },
  {
    "text": "function that uses the\nfunction that I",
    "start": "179650",
    "end": "182980"
  },
  {
    "text": "passed in, on itself.",
    "start": "182980",
    "end": "187690"
  },
  {
    "text": "So any arguments that I would\npass to someFunction, I would",
    "start": "187690",
    "end": "192890"
  },
  {
    "text": "pass into someFunction, take\nthe return value of this",
    "start": "192890",
    "end": "196720"
  },
  {
    "text": "function call, and then pass\nthat into someFunction again.",
    "start": "196720",
    "end": "202100"
  },
  {
    "text": "That's what returnFunction\ndoes.",
    "start": "202100",
    "end": "205170"
  },
  {
    "text": "And down here, I return\nreturnFunction.",
    "start": "205170",
    "end": "209240"
  },
  {
    "text": "Note that the object\ntype of this",
    "start": "209240",
    "end": "211710"
  },
  {
    "text": "return value is a function.",
    "start": "211710",
    "end": "214060"
  },
  {
    "text": "So once I have returnFunction,\nI can actually pass it",
    "start": "214060",
    "end": "216950"
  },
  {
    "text": "arguments, have them run through\nsomeFunction, not once",
    "start": "216950",
    "end": "220400"
  },
  {
    "text": "but twice, and then get out a\nvalue that's of the return",
    "start": "220400",
    "end": "225549"
  },
  {
    "text": "type of someFunction.",
    "start": "225550",
    "end": "227900"
  },
  {
    "text": "Note that I made some\nassumptions while",
    "start": "227900",
    "end": "229530"
  },
  {
    "text": "writing this function.",
    "start": "229530",
    "end": "231870"
  },
  {
    "text": "First, I've assumed that\nsomeFunction returns out the",
    "start": "231870",
    "end": "234959"
  },
  {
    "text": "same number of arguments, and\neither accept an arbitrary",
    "start": "234960",
    "end": "238530"
  },
  {
    "text": "number of arguments or accepts\nthe same number of arguments",
    "start": "238530",
    "end": "241880"
  },
  {
    "text": "as it puts out.",
    "start": "241880",
    "end": "244190"
  },
  {
    "text": "The other assumption that I've\nmade is that the data type",
    "start": "244190",
    "end": "248610"
  },
  {
    "text": "that someFunction returns is\nthe same as the data types",
    "start": "248610",
    "end": "251310"
  },
  {
    "text": "that someFunction accepts.",
    "start": "251310",
    "end": "253140"
  },
  {
    "text": "Or the things that someFunction\ndoes to its",
    "start": "253140",
    "end": "257870"
  },
  {
    "text": "arguments can be done to\nmultiple kinds of arguments.",
    "start": "257870",
    "end": "260930"
  },
  {
    "text": "But that's a whole different\nargument.",
    "start": "260930",
    "end": "262430"
  },
  {
    "text": "Right now, we're just focusing\non the fact that we pass in",
    "start": "262430",
    "end": "267990"
  },
  {
    "text": "some arbitrary number of\narguments, call someFunction",
    "start": "267990",
    "end": "270509"
  },
  {
    "text": "on it, call someFunction again\non the return value of this,",
    "start": "270510",
    "end": "274990"
  },
  {
    "text": "and return that as something you\ncan do to whatever it is,",
    "start": "274990",
    "end": "279520"
  },
  {
    "text": "someFunction operates on.",
    "start": "279520",
    "end": "281639"
  },
  {
    "text": "OK.",
    "start": "281640",
    "end": "282690"
  },
  {
    "text": "Let's review an example, because\nI promise it'll be",
    "start": "282690",
    "end": "284450"
  },
  {
    "text": "more clear.",
    "start": "284450",
    "end": "285700"
  },
  {
    "start": "285700",
    "end": "287910"
  },
  {
    "text": "Let's say f is going to be the",
    "start": "287910",
    "end": "289730"
  },
  {
    "text": "composition, a square on itself.",
    "start": "289730",
    "end": "292801"
  },
  {
    "text": "If I do that, I end up with a\nfunction that operates on an",
    "start": "292801",
    "end": "299780"
  },
  {
    "text": "arbitrary number\nof arguments--",
    "start": "299780",
    "end": "301030"
  },
  {
    "start": "301030",
    "end": "304180"
  },
  {
    "text": "that's not true.",
    "start": "304180",
    "end": "305560"
  },
  {
    "text": "I end up with a copy of square\nthat takes in the same number",
    "start": "305560",
    "end": "309080"
  },
  {
    "text": "of arguments as square\ncalled on itself.",
    "start": "309080",
    "end": "317750"
  },
  {
    "text": "So here a square is substituted\nfor someFunction.",
    "start": "317750",
    "end": "322940"
  },
  {
    "text": "Here a square is called on\nthat call of square.",
    "start": "322940",
    "end": "326690"
  },
  {
    "text": "And here is what f\nis assigned to.",
    "start": "326690",
    "end": "328100"
  },
  {
    "start": "328100",
    "end": "331350"
  },
  {
    "text": "So when I call f of\n2, I'm going to",
    "start": "331350",
    "end": "335410"
  },
  {
    "text": "substitute 2 in for args.",
    "start": "335410",
    "end": "338520"
  },
  {
    "text": "I'm going to call\nsquare on args.",
    "start": "338520",
    "end": "342590"
  },
  {
    "text": "If I call square on\nargs, I get out 4.",
    "start": "342590",
    "end": "345180"
  },
  {
    "text": "And if I call square on args\nagain, or if I call square of",
    "start": "345180",
    "end": "350979"
  },
  {
    "text": "args where args is defined as\nthe return value of this, then",
    "start": "350980",
    "end": "354420"
  },
  {
    "text": "I'm going to call square\non 4, I'll square 4,",
    "start": "354420",
    "end": "358120"
  },
  {
    "text": "and I'll get 16.",
    "start": "358120",
    "end": "359370"
  },
  {
    "start": "359370",
    "end": "361820"
  },
  {
    "text": "Take a second to type it into\nIDLE, and make it make sense",
    "start": "361820",
    "end": "364310"
  },
  {
    "text": "to yourself.",
    "start": "364310",
    "end": "365130"
  },
  {
    "text": "All of this code\nshould compile.",
    "start": "365130",
    "end": "368200"
  },
  {
    "text": "Mess around with the parameters,\nif you're having",
    "start": "368200",
    "end": "370010"
  },
  {
    "text": "trouble convincing yourself\nthat it does.",
    "start": "370010",
    "end": "371360"
  },
  {
    "start": "371360",
    "end": "376580"
  },
  {
    "text": "Ok.",
    "start": "376580",
    "end": "376664"
  },
  {
    "text": "Now I think we're ready\nto talk about lambdas.",
    "start": "376665",
    "end": "379660"
  },
  {
    "text": "If you can pass in functions as\narguments or return them as",
    "start": "379660",
    "end": "384180"
  },
  {
    "text": "values or assign them to\nvariable names and just treat",
    "start": "384180",
    "end": "387639"
  },
  {
    "text": "them like any other data type,\nthen you should be able to",
    "start": "387640",
    "end": "390300"
  },
  {
    "text": "treat them as some sort\nof raw value.",
    "start": "390300",
    "end": "392909"
  },
  {
    "text": "And that's where lambdas\ncome in.",
    "start": "392910",
    "end": "396180"
  },
  {
    "text": "Lambda is a key word in Python\nthat tells you you're about to",
    "start": "396180",
    "end": "399430"
  },
  {
    "text": "use a function that you have not\ngiven any sort of name or",
    "start": "399430",
    "end": "403930"
  },
  {
    "text": "defined in any place in your\ncode or environment",
    "start": "403930",
    "end": "406660"
  },
  {
    "text": "beforehand.",
    "start": "406660",
    "end": "407190"
  },
  {
    "text": "You're just going to start\ntalking about something that",
    "start": "407190",
    "end": "409910"
  },
  {
    "text": "you would like to do to a given\nnumber of arguments, and",
    "start": "409910",
    "end": "412990"
  },
  {
    "text": "then what you want\nto return out.",
    "start": "412990",
    "end": "415740"
  },
  {
    "text": "Lambda has roots in lambda\ncalculus which, if you're",
    "start": "415740",
    "end": "419720"
  },
  {
    "text": "familiar with the history of\ncomputer science, you've",
    "start": "419720",
    "end": "421300"
  },
  {
    "text": "probably heard of.",
    "start": "421300",
    "end": "422849"
  },
  {
    "text": "Now might be a good time to look\nup lambda calculus, if",
    "start": "422850",
    "end": "425070"
  },
  {
    "text": "you've never heard it before\nor possibly Alonzo Church.",
    "start": "425070",
    "end": "428730"
  },
  {
    "text": "But it's still available in code\ntoday, which is really",
    "start": "428730",
    "end": "432960"
  },
  {
    "text": "cool, and speaks to the\ncontinuing power or at least",
    "start": "432960",
    "end": "437610"
  },
  {
    "text": "recognition of importance of\nfunctional programming.",
    "start": "437610",
    "end": "440360"
  },
  {
    "start": "440360",
    "end": "443360"
  },
  {
    "text": "As I said before, the idea with\nlambda is that you could",
    "start": "443360",
    "end": "446460"
  },
  {
    "text": "write an anonymous function.",
    "start": "446460",
    "end": "448740"
  },
  {
    "text": "Over here, in order to write a\nfunction that's squared, I had",
    "start": "448740",
    "end": "456259"
  },
  {
    "text": "to write out a define line.",
    "start": "456260",
    "end": "458200"
  },
  {
    "text": "And because Python uses\nindentation, because in",
    "start": "458200",
    "end": "461690"
  },
  {
    "text": "Python, indentation carries\nmeaning, I'd have to enter and",
    "start": "461690",
    "end": "465000"
  },
  {
    "text": "return over to a next line--",
    "start": "465000",
    "end": "467012"
  },
  {
    "text": "I'm actually not sure if\nthat's strictly true.",
    "start": "467012",
    "end": "468729"
  },
  {
    "text": "I think you can do def\nsquare x, return",
    "start": "468730",
    "end": "470620"
  },
  {
    "text": "x, but I'm not positive.",
    "start": "470620",
    "end": "474240"
  },
  {
    "text": "I've only seen it written\nlike this.",
    "start": "474240",
    "end": "476210"
  },
  {
    "text": "And I think it's because in the\ngeneral sense, people try",
    "start": "476210",
    "end": "478810"
  },
  {
    "text": "to respect things like\nconvention and",
    "start": "478810",
    "end": "481060"
  },
  {
    "text": "readability in Python.",
    "start": "481060",
    "end": "482310"
  },
  {
    "start": "482310",
    "end": "484940"
  },
  {
    "text": "If you're using lambda, people\nalready know that you want to",
    "start": "484940",
    "end": "488070"
  },
  {
    "text": "describe a function\nreally quickly.",
    "start": "488070",
    "end": "489480"
  },
  {
    "text": "Or you want to describe\nfunction without",
    "start": "489480",
    "end": "490920"
  },
  {
    "text": "assigning it any name.",
    "start": "490920",
    "end": "493600"
  },
  {
    "text": "Therefore, the two most common\nuses you'll see of lambda is",
    "start": "493600",
    "end": "497270"
  },
  {
    "text": "when you want a really fast\nfunction and you don't want to",
    "start": "497270",
    "end": "499430"
  },
  {
    "text": "spend extra time or lines\nwriting out that function.",
    "start": "499430",
    "end": "502500"
  },
  {
    "text": "It's pretty clear what\nthis is going to do.",
    "start": "502500",
    "end": "506340"
  },
  {
    "text": "Or if, in a particular\nsense, you need",
    "start": "506340",
    "end": "509020"
  },
  {
    "text": "an anonymous function.",
    "start": "509020",
    "end": "510120"
  },
  {
    "text": "You don't want to assign\na name or memory space",
    "start": "510120",
    "end": "513380"
  },
  {
    "text": "associated with that function.",
    "start": "513380",
    "end": "514630"
  },
  {
    "start": "514630",
    "end": "518669"
  },
  {
    "text": "Note instead of using square,\nI can just write out this.",
    "start": "518669",
    "end": "522820"
  },
  {
    "text": "So I saved two lines of\ncode defining square.",
    "start": "522820",
    "end": "525830"
  },
  {
    "text": "And then I don't have to refer\nback to some earlier part of",
    "start": "525830",
    "end": "528680"
  },
  {
    "text": "the code in order to understand",
    "start": "528680",
    "end": "529890"
  },
  {
    "text": "what this line does.",
    "start": "529890",
    "end": "531570"
  },
  {
    "text": "Pretty cool.",
    "start": "531570",
    "end": "533520"
  },
  {
    "text": "All right.",
    "start": "533520",
    "end": "534960"
  },
  {
    "text": "So there's functions of\nfirst class objects.",
    "start": "534960",
    "end": "537650"
  },
  {
    "text": "There's lambda.",
    "start": "537650",
    "end": "539350"
  },
  {
    "text": "Let's talk about how to\nuse lambdas on lists.",
    "start": "539350",
    "end": "541535"
  },
  {
    "start": "541535",
    "end": "548449"
  },
  {
    "text": "In Python, you'll end up doing\na lot of list manipulation.",
    "start": "548450",
    "end": "552770"
  },
  {
    "text": "One of the best uses of\nanonymized functions in any",
    "start": "552770",
    "end": "559190"
  },
  {
    "text": "functional programming language\nis the ability to",
    "start": "559190",
    "end": "561480"
  },
  {
    "text": "manipulate lists in a line.",
    "start": "561480",
    "end": "563010"
  },
  {
    "start": "563010",
    "end": "566550"
  },
  {
    "text": "If I've defined just a pretty\nstraightforward list right",
    "start": "566550",
    "end": "569820"
  },
  {
    "text": "here, I can use functions like\nmap filter and reduce to--",
    "start": "569820",
    "end": "576700"
  },
  {
    "text": "in one line--",
    "start": "576700",
    "end": "578150"
  },
  {
    "text": "take a list, apply a function to\nevery element in that list,",
    "start": "578150",
    "end": "582420"
  },
  {
    "text": "and then return a copy of\nthe result of that list.",
    "start": "582420",
    "end": "588019"
  },
  {
    "text": "I didn't have to write a\nseparate function to do the",
    "start": "588020",
    "end": "590060"
  },
  {
    "text": "list handling.",
    "start": "590060",
    "end": "592020"
  },
  {
    "text": "I didn't have to write a\nseparate function to multiply",
    "start": "592020",
    "end": "594405"
  },
  {
    "text": "the list by two.",
    "start": "594405",
    "end": "597600"
  },
  {
    "text": "And I've communicated what I'm\ndoing effectively to people",
    "start": "597600",
    "end": "599940"
  },
  {
    "text": "that are used to functional\nprogramming.",
    "start": "599940",
    "end": "601190"
  },
  {
    "start": "601190",
    "end": "604100"
  },
  {
    "text": "So if you type this line in,\nyou should end up with a",
    "start": "604100",
    "end": "608920"
  },
  {
    "text": "return in interactive mode of\nevery element in this list",
    "start": "608920",
    "end": "612639"
  },
  {
    "text": "multiplied by two.",
    "start": "612640",
    "end": "613860"
  },
  {
    "text": "Now's a good time to try.",
    "start": "613860",
    "end": "616209"
  },
  {
    "text": "Once you've done that, I also\nrecommend looking at the",
    "start": "616210",
    "end": "619820"
  },
  {
    "text": "original copied demolist.",
    "start": "619820",
    "end": "621750"
  },
  {
    "text": "Note that this is unaltered.",
    "start": "621750",
    "end": "623910"
  },
  {
    "text": "Map actually returned a new data\nstructure that represents",
    "start": "623910",
    "end": "630079"
  },
  {
    "text": "performing this function\non this list.",
    "start": "630080",
    "end": "634430"
  },
  {
    "text": "This becomes important later\nwhen I explain aliasing, but I",
    "start": "634430",
    "end": "636910"
  },
  {
    "text": "will do that in about\ntwo minutes.",
    "start": "636910",
    "end": "638829"
  },
  {
    "start": "638830",
    "end": "643930"
  },
  {
    "text": "If we want to get even more\nelegant, we can use list",
    "start": "643930",
    "end": "647460"
  },
  {
    "text": "comprehensions.",
    "start": "647460",
    "end": "648710"
  },
  {
    "start": "648710",
    "end": "650400"
  },
  {
    "text": "List comprehensions--",
    "start": "650400",
    "end": "651990"
  },
  {
    "text": "if you ask somebody where list\ncomprehensions are from,",
    "start": "651990",
    "end": "654029"
  },
  {
    "text": "they'll probably say Haskell,\nbecause that is the most",
    "start": "654030",
    "end": "656580"
  },
  {
    "text": "popular use of list\ncomprehensions, in terms of",
    "start": "656580",
    "end": "660370"
  },
  {
    "text": "pure lazy functional\nprogramming.",
    "start": "660370",
    "end": "663450"
  },
  {
    "text": "But it actually goes back\nfurther than that, and is in",
    "start": "663450",
    "end": "666990"
  },
  {
    "text": "Small Talk, and then something\nfrom the '60s.",
    "start": "666990",
    "end": "669290"
  },
  {
    "text": "I can't remember the name\nof it right now.",
    "start": "669290",
    "end": "670740"
  },
  {
    "start": "670740",
    "end": "674620"
  },
  {
    "text": "They're really nice because\nthey borrow a syntactic",
    "start": "674620",
    "end": "690630"
  },
  {
    "text": "approach from mathematicians.",
    "start": "690630",
    "end": "692830"
  },
  {
    "text": "This looks a lot like\nset notation.",
    "start": "692830",
    "end": "695600"
  },
  {
    "text": "And when you read this, you\ncan probably tell that the",
    "start": "695600",
    "end": "699180"
  },
  {
    "text": "list listComprehension is going\nto describe a set of",
    "start": "699180",
    "end": "704000"
  },
  {
    "text": "points from 1 to 4.",
    "start": "704000",
    "end": "706970"
  },
  {
    "start": "706970",
    "end": "711910"
  },
  {
    "text": "But you accomplish that in\npossibly one line of code.",
    "start": "711910",
    "end": "715980"
  },
  {
    "text": "I've written it on three here\nbecause I wanted to keep it in",
    "start": "715980",
    "end": "719079"
  },
  {
    "text": "this space.",
    "start": "719080",
    "end": "720540"
  },
  {
    "text": "But it's really concise.",
    "start": "720540",
    "end": "724790"
  },
  {
    "text": "If you type this into IDLE,\nyou should see the kind of",
    "start": "724790",
    "end": "727329"
  },
  {
    "text": "list that it returns,\nand also what's",
    "start": "727330",
    "end": "730010"
  },
  {
    "text": "listComprehension is now--",
    "start": "730010",
    "end": "731660"
  },
  {
    "text": "what now constitutes\nlistComprehension.",
    "start": "731660",
    "end": "732910"
  },
  {
    "start": "732910",
    "end": "735319"
  },
  {
    "text": "You can use listComprehensions\nwith functions like map and",
    "start": "735320",
    "end": "740690"
  },
  {
    "text": "filter and reduce.",
    "start": "740690",
    "end": "743330"
  },
  {
    "text": "And, along with the anonymized\nfunctions, all of these tools",
    "start": "743330",
    "end": "747810"
  },
  {
    "text": "provide you with a lot of\nfunctionality in a very short",
    "start": "747810",
    "end": "749890"
  },
  {
    "text": "amount of space.",
    "start": "749890",
    "end": "751140"
  },
  {
    "start": "751140",
    "end": "753450"
  },
  {
    "text": "It's also good to be able to\nrecognize what's going on when",
    "start": "753450",
    "end": "756280"
  },
  {
    "text": "you see something like this\nor something like this.",
    "start": "756280",
    "end": "759530"
  },
  {
    "text": "Because you'll probably run into\nit in, in particular, a",
    "start": "759530",
    "end": "761940"
  },
  {
    "text": "lot with Lisp code, but also in\nthe artificial intelligence",
    "start": "761940",
    "end": "766860"
  },
  {
    "text": "community in particular.",
    "start": "766860",
    "end": "768110"
  },
  {
    "start": "768110",
    "end": "772160"
  },
  {
    "text": "Ok.",
    "start": "772160",
    "end": "772245"
  },
  {
    "text": "We've talked about all that.",
    "start": "772245",
    "end": "775400"
  },
  {
    "text": "Let's take a second to talk\nabout the fact that lists are",
    "start": "775400",
    "end": "778210"
  },
  {
    "text": "actually mutable, and what that\nmeans, and what things",
    "start": "778210",
    "end": "781710"
  },
  {
    "text": "you have to be careful about if\nyou're going to be working",
    "start": "781710",
    "end": "783670"
  },
  {
    "text": "with mutable objects.",
    "start": "783670",
    "end": "784920"
  },
  {
    "start": "784920",
    "end": "789500"
  },
  {
    "text": "If you're new to programming,\nor you're new to Python,",
    "start": "789500",
    "end": "791640"
  },
  {
    "text": "you've probably already\nworked with some of",
    "start": "791640",
    "end": "793020"
  },
  {
    "text": "these data types, right?",
    "start": "793020",
    "end": "794600"
  },
  {
    "text": "Any numbers, any strings,\nany tuples,",
    "start": "794600",
    "end": "798000"
  },
  {
    "text": "are going to be immutable.",
    "start": "798000",
    "end": "800610"
  },
  {
    "text": "What that means is if you have\na variable and you have a",
    "start": "800610",
    "end": "806920"
  },
  {
    "text": "second variable that has a\ndifferent assignment line",
    "start": "806920",
    "end": "811209"
  },
  {
    "text": "associated with it-- right?",
    "start": "811210",
    "end": "812370"
  },
  {
    "text": "I haven't assigned\ng to h here.",
    "start": "812370",
    "end": "814640"
  },
  {
    "text": "I've just signed g to \"hello\"\nand h to \"hello.\"",
    "start": "814640",
    "end": "819000"
  },
  {
    "text": "If you look at the space in\nmemory that Python associates",
    "start": "819000",
    "end": "823610"
  },
  {
    "text": "with both objects, they point\nto the same place.",
    "start": "823610",
    "end": "828000"
  },
  {
    "text": "This is the definition of\nan immutable object.",
    "start": "828000",
    "end": "831140"
  },
  {
    "text": "When g points to \"hello\" and h\npoints to \"hello,\" they both",
    "start": "831140",
    "end": "834110"
  },
  {
    "text": "point to the same place.",
    "start": "834110",
    "end": "835010"
  },
  {
    "text": "If x points to 5 and y points to\n5, they're both pointing to",
    "start": "835010",
    "end": "838040"
  },
  {
    "text": "the same place.",
    "start": "838040",
    "end": "839940"
  },
  {
    "text": "If you point x at 6,\nit now points to a",
    "start": "839940",
    "end": "843120"
  },
  {
    "text": "different memory address.",
    "start": "843120",
    "end": "844370"
  },
  {
    "start": "844370",
    "end": "848460"
  },
  {
    "text": "This gets confounded\nwhen you're talking",
    "start": "848460",
    "end": "850180"
  },
  {
    "text": "about mutable objects.",
    "start": "850180",
    "end": "851940"
  },
  {
    "text": "The problem with mutable objects\nis that you select a",
    "start": "851940",
    "end": "854670"
  },
  {
    "text": "memory space to contain the\nobject or memory ID in Python",
    "start": "854670",
    "end": "859180"
  },
  {
    "text": "to contain the object.",
    "start": "859180",
    "end": "860500"
  },
  {
    "text": "And then that object is\nchanged in place.",
    "start": "860500",
    "end": "865090"
  },
  {
    "start": "865090",
    "end": "868460"
  },
  {
    "text": "You can use this to your\nadvantage but it can",
    "start": "868460",
    "end": "870290"
  },
  {
    "text": "also mess with you.",
    "start": "870290",
    "end": "871120"
  },
  {
    "text": "And here's how.",
    "start": "871120",
    "end": "872680"
  },
  {
    "text": "Let's say I assigned\na to a small list.",
    "start": "872680",
    "end": "877160"
  },
  {
    "text": "And I also assigned b to a.",
    "start": "877160",
    "end": "881100"
  },
  {
    "text": "b and a now point at\nthe same place.",
    "start": "881100",
    "end": "882834"
  },
  {
    "start": "882835",
    "end": "885660"
  },
  {
    "text": "If I manipulate b, and I'm--",
    "start": "885660",
    "end": "888540"
  },
  {
    "text": "excuse me-- still working with\nan immutable object, or excuse",
    "start": "888540",
    "end": "891308"
  },
  {
    "text": "me, if I'm still working with\na mutable object, the object",
    "start": "891309",
    "end": "898660"
  },
  {
    "text": "in that memory address\nhas been altered.",
    "start": "898660",
    "end": "901100"
  },
  {
    "text": "And b and a still point to\nthe same place in memory.",
    "start": "901100",
    "end": "905740"
  },
  {
    "text": "So if I look at a, it's going to\nlook like b, which is going",
    "start": "905740",
    "end": "910740"
  },
  {
    "text": "to look like 1, 2, 3, 4 --",
    "start": "910740",
    "end": "912990"
  },
  {
    "text": "which is not what I assigned\na to originally.",
    "start": "912990",
    "end": "916230"
  },
  {
    "text": "Again, can be powerful, but you\nhave to keep it in mind.",
    "start": "916230",
    "end": "919000"
  },
  {
    "text": "And it might start to mess with,\nin particular, the 6.01",
    "start": "919000",
    "end": "922160"
  },
  {
    "text": "software when you're dealing\nwith state machines.",
    "start": "922160",
    "end": "926620"
  },
  {
    "text": "In order to get around this, you\ncan create a copy of the",
    "start": "926620",
    "end": "929220"
  },
  {
    "text": "list and then modify the copy.",
    "start": "929220",
    "end": "931500"
  },
  {
    "text": "This is actually\nwhat map does.",
    "start": "931500",
    "end": "934230"
  },
  {
    "text": "If you want to do it, the\neasiest way to do it on the",
    "start": "934230",
    "end": "936610"
  },
  {
    "text": "first layer is to specify\nthe index into the",
    "start": "936610",
    "end": "940120"
  },
  {
    "text": "list with no bounce.",
    "start": "940120",
    "end": "942360"
  },
  {
    "text": "It'll copy the whole thing.",
    "start": "942360",
    "end": "943769"
  },
  {
    "text": "There's also a Python library\ncopy or deep copy, if you want",
    "start": "943770",
    "end": "948430"
  },
  {
    "text": "to copy lists of lists of\nlists of lists of lists.",
    "start": "948430",
    "end": "950890"
  },
  {
    "start": "950890",
    "end": "953420"
  },
  {
    "text": "And just to clarify, you'll note\nthat after you assign c",
    "start": "953420",
    "end": "958690"
  },
  {
    "text": "to a copy of a, c and a occupy\ndifferent memory places.",
    "start": "958690",
    "end": "962780"
  },
  {
    "text": "So if you modify c, a will\nretain its original value.",
    "start": "962780",
    "end": "967096"
  },
  {
    "start": "967096",
    "end": "971070"
  },
  {
    "text": "I think that's all the\nnotable things I have",
    "start": "971070",
    "end": "972300"
  },
  {
    "text": "to say about Python.",
    "start": "972300",
    "end": "973250"
  },
  {
    "text": "and gives us enough power to do\nsome really powerful list",
    "start": "973250",
    "end": "977200"
  },
  {
    "text": "manipulation or array\nmanipulation, and covers what",
    "start": "977200",
    "end": "981980"
  },
  {
    "text": "we want to say about functional\nprogramming before",
    "start": "981980",
    "end": "983740"
  },
  {
    "text": "we get into the notion\nof state, which I'll",
    "start": "983740",
    "end": "986410"
  },
  {
    "text": "talk about next time.",
    "start": "986410",
    "end": "987660"
  },
  {
    "start": "987660",
    "end": "988500"
  }
]