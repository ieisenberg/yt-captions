[
  {
    "start": "0",
    "end": "160000"
  },
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5423"
  },
  {
    "start": "5423",
    "end": "25617"
  },
  {
    "text": "MICHAEL SIPSER: Hi, folks. Welcome back. ",
    "start": "25617",
    "end": "31580"
  },
  {
    "text": "So we will continue our\ndiscussion that we had-- that we've been doing for\nthe past few lectures.",
    "start": "31580",
    "end": "39180"
  },
  {
    "text": "We first talked about\ntime complexity. And then we shifted gears to\ntalk about space complexity.",
    "start": "39180",
    "end": "46430"
  },
  {
    "text": "So we had a couple of\nlectures on PSPACE,",
    "start": "46430",
    "end": "52460"
  },
  {
    "text": "kind of culminating in proving\nthat there were languages which are PSPACE complete,\nnamely this TQBF language,",
    "start": "52460",
    "end": "59329"
  },
  {
    "text": "which is where we started. And then we also proved that\nthere are problems involving",
    "start": "59330",
    "end": "65840"
  },
  {
    "text": "games, such as the generalized\ngeography game, where determining which side\nhas a winning strategy",
    "start": "65840",
    "end": "71840"
  },
  {
    "text": "is PSPACE complete. At the end of the\nlecture last time, we moved to a different\nregime of space,",
    "start": "71840",
    "end": "79670"
  },
  {
    "text": "namely from polynomial\nspace down to log space. And we introduced\nthe classes L and NL.",
    "start": "79670",
    "end": "85910"
  },
  {
    "text": "And so I'm going to\nbegin today's lecture by reviewing some of the\nmaterial on N and NL,",
    "start": "85910",
    "end": "92330"
  },
  {
    "text": "which I think came a little\ntoo quickly last time. And then we have two\nimportant theorems we're going to cover today.",
    "start": "92330",
    "end": "98370"
  },
  {
    "text": "One is about proving that there\nare complete languages for NL",
    "start": "98370",
    "end": "105860"
  },
  {
    "text": "that has a bearing on the\nL versus NL question-- log space,\ndeterministic log space,",
    "start": "105860",
    "end": "111500"
  },
  {
    "text": "versus nondeterministic\nlog space. That's yet another unsolved\nproblem in our field.",
    "start": "111500",
    "end": "117119"
  },
  {
    "text": "And so there is a notion of\na complete problem for NL. And then we're going\nto prove a theorem that",
    "start": "117120",
    "end": "126079"
  },
  {
    "text": "was, in its day, very\nsurprising to people. I remember when it\ncame out in the 1980s,",
    "start": "126080",
    "end": "131570"
  },
  {
    "text": "that NL, in fact, is closed\nunder complementation, that the NL class and coNL\nclass both collapse to 1,",
    "start": "131570",
    "end": "141680"
  },
  {
    "text": "that they're equal, which\nis not the way we believe the situation to be for NP. But until someone has a\nproof that they're different,",
    "start": "141680",
    "end": "150530"
  },
  {
    "text": "strange things can happen. OK. So with that, I will move\nmyself into the corner.",
    "start": "150530",
    "end": "160340"
  },
  {
    "start": "160000",
    "end": "440000"
  },
  {
    "text": "And let's do our review. So we are-- in order to talk\nabout space complexity classes",
    "start": "160340",
    "end": "173260"
  },
  {
    "text": "that are smaller than n, we\nhad to introduce a new model, which was the two-tape model,\nwhere there was a read-only",
    "start": "173260",
    "end": "183610"
  },
  {
    "text": "tape that had the input on it,\nwhich you normally would think of something very large--",
    "start": "183610",
    "end": "188920"
  },
  {
    "text": "the whole internet,\nor something so big",
    "start": "188920",
    "end": "194890"
  },
  {
    "text": "that you can't read it\ninto your local memory. And then you have a work tape,\nwhich is your local memory.",
    "start": "194890",
    "end": "205130"
  },
  {
    "text": "And the way we're going to think\nabout it in the context of log space is that that work tape\nis logarithmic in the size",
    "start": "205130",
    "end": "212900"
  },
  {
    "text": "of the input. And that is enough to have\nsmall counters or pointers",
    "start": "212900",
    "end": "218780"
  },
  {
    "text": "into the input, because a\nreference location of the input is just-- you only need log\nn bits to do that.",
    "start": "218780",
    "end": "228450"
  },
  {
    "text": "So we gave a couple of\nexamples of the L and NL--",
    "start": "228450",
    "end": "237630"
  },
  {
    "text": "of L and NL languages, so\nthis language of ww reverse, as you may remember.",
    "start": "237630",
    "end": "244590"
  },
  {
    "text": "So here is an input\nin ww reverse. It's a string follow-- it's\na palindromic string, which",
    "start": "244590",
    "end": "251340"
  },
  {
    "text": "is of even length. And so you can make a\nmachine in log space here",
    "start": "251340",
    "end": "256440"
  },
  {
    "text": "that can test whether its\ninput is of that form. And the work tape is only--",
    "start": "256440",
    "end": "262049"
  },
  {
    "text": "all it needs is a\npointer into the-- or a couple of\npointers that refer",
    "start": "262050",
    "end": "269250"
  },
  {
    "text": "to the corresponding\nplaces of the input that you're looking\nat at the moment. So you maybe start\nout looking at the two",
    "start": "269250",
    "end": "275940"
  },
  {
    "text": "outside a's and then the b\nsymbols that are next to that.",
    "start": "275940",
    "end": "281190"
  },
  {
    "text": "And you can write\ndown on your tape where you're looking currently.",
    "start": "281190",
    "end": "287949"
  },
  {
    "text": "And so that's going\nto be enough for you to-- you may have to zigzag,\nof course, back and forth a lot",
    "start": "287950",
    "end": "293250"
  },
  {
    "text": "in order to do that test. But that's completely\nfine, using the model.",
    "start": "293250",
    "end": "299710"
  },
  {
    "text": "We're not going to\nbe measuring time. We're only going to be focusing\non how much space we're using.",
    "start": "299710",
    "end": "304920"
  },
  {
    "text": "Another example that we\ngave is the PATH language, where you're given a\ngraph, and a start node,",
    "start": "304920",
    "end": "310830"
  },
  {
    "text": "and a target node. And you want to know, is there\na path in this directed graph",
    "start": "310830",
    "end": "316710"
  },
  {
    "text": "that goes from s to t? And that's the\nlanguage that's also--",
    "start": "316710",
    "end": "321840"
  },
  {
    "text": "that language is in NL-- in fact, not known to be in L.",
    "start": "321840",
    "end": "327420"
  },
  {
    "text": "So the way that\nwould look, shifting to an input in\nthe PATH language,",
    "start": "327420",
    "end": "335280"
  },
  {
    "text": "you would have a\ngraph represented, say, by a sequence of edges,\nand a start, and a target.",
    "start": "335280",
    "end": "341550"
  },
  {
    "text": "And the work tape would keep\ntrack of the current node.",
    "start": "341550",
    "end": "347348"
  },
  {
    "text": "So the nondeterministic\nmachine would guess a path that takes you\nfrom s to t, node by node.",
    "start": "347348",
    "end": "353180"
  },
  {
    "text": "And the work tape would keep\ntrack of the current node. OK, so I hope you have this--",
    "start": "353180",
    "end": "359180"
  },
  {
    "text": "develop a little bit of an\nintuition for these classes, L and NL. We're going to be spending\nthe entire lecture today",
    "start": "359180",
    "end": "365810"
  },
  {
    "text": "talking about that. OK. So as I mentioned, the L and NL\nproblem is an unsolved problem.",
    "start": "365810",
    "end": "375800"
  },
  {
    "text": "And it's very much analogous\nto the P versus NP problem, except, as I mentioned,\nas we'll show,",
    "start": "375800",
    "end": "381770"
  },
  {
    "text": "that NL and its\ncomplement end up being the same, which\nis not something that seems to be the case\nfor NP, though we don't know.",
    "start": "381770",
    "end": "389960"
  },
  {
    "start": "389960",
    "end": "397759"
  },
  {
    "text": "Can we think of this as a\nmulti-head Turing machine? I'm getting a question about\nthat, which is, I think, you can.",
    "start": "397760",
    "end": "403760"
  },
  {
    "text": "In fact, that's an alternative\nway that people look at it. You can think of it as\nhaving multiple-- you know,",
    "start": "403760",
    "end": "410210"
  },
  {
    "text": "a head basically needs log\nspace to store the location--",
    "start": "410210",
    "end": "416979"
  },
  {
    "text": "to store the location of\nwhere that head would be.",
    "start": "416980",
    "end": "423350"
  },
  {
    "text": "So if you imagine having several\ndifferent heads on the input tape, you can think\nof a log space machine",
    "start": "423350",
    "end": "428720"
  },
  {
    "text": "as being sort of\na Turing machine that has multiple heads\non the input table. It's equivalent.",
    "start": "428720",
    "end": "435590"
  },
  {
    "text": "Good question. So let's move on, then.",
    "start": "435590",
    "end": "441870"
  },
  {
    "start": "440000",
    "end": "660000"
  },
  {
    "text": "OK. So one of the things we proved\nlast time was that anything that you can do in L, you can\nalso do in polynomial time.",
    "start": "441870",
    "end": "451460"
  },
  {
    "text": "And I'll answer some of these\nchat questions in a minute. But the-- so the class\nL is a subset of P.",
    "start": "451460",
    "end": "462160"
  },
  {
    "text": "This is easy to prove. But I think it's nevertheless\nimportant to see why it's true,",
    "start": "462160",
    "end": "467800"
  },
  {
    "text": "because it sort of sets\nsome definitions of things that we're going to use later.",
    "start": "467800",
    "end": "472909"
  },
  {
    "text": "So in particular, we\nreally need to know",
    "start": "472910",
    "end": "479710"
  },
  {
    "text": "the notion of a configuration\nof a log space machine",
    "start": "479710",
    "end": "485380"
  },
  {
    "text": "on an input. So because the input\ndoes not change,",
    "start": "485380",
    "end": "492080"
  },
  {
    "text": "we don't really\nconsider the input to be part of the configuration. The only thing that's--",
    "start": "492080",
    "end": "499389"
  },
  {
    "text": "the thing that's relevant\nin the configuration is the dynamic part of the\nmachine-- the state, the head",
    "start": "499390",
    "end": "504400"
  },
  {
    "text": "locations, and the\nwork tape contents. So we're defining\nthat the configuration",
    "start": "504400",
    "end": "510550"
  },
  {
    "text": "for the machine on a\nparticular input, w, is those four things-- state, the two head locations,\nand the tape contents.",
    "start": "510550",
    "end": "518200"
  },
  {
    "text": "And the important thing to\nkeep in mind for this theorem is that we have only\na polynomial number",
    "start": "518200",
    "end": "524380"
  },
  {
    "text": "of different configurations if\nyou just do the calculation. The main part is the number\nof different tape contents",
    "start": "524380",
    "end": "531730"
  },
  {
    "text": "as you can have, which is\nexponential in the log n. And that's a polynomial.",
    "start": "531730",
    "end": "537230"
  },
  {
    "text": "And so therefore, any machine\nthat runs in log space, provided it always\nholds, and we always",
    "start": "537230",
    "end": "543440"
  },
  {
    "text": "assume our machines\nalways hold, they can only run for a\npolynomial number of steps,",
    "start": "543440",
    "end": "549860"
  },
  {
    "text": "because that's as many different\nconfigurations as they have. If they ran for, say, an\nexponential number of steps,",
    "start": "549860",
    "end": "556940"
  },
  {
    "text": "they would have to be\nrepeating configurations. And then they would be looping.",
    "start": "556940",
    "end": "563160"
  },
  {
    "text": "OK, so there we go. ",
    "start": "563160",
    "end": "570380"
  },
  {
    "text": "OK, so let me just get back--\nso somebody asked me a question. Which is harder? P versus NP or L versus NL?",
    "start": "570380",
    "end": "578790"
  },
  {
    "text": "Completely no idea. It's a-- I guess there was a\ncommon line of thinking that",
    "start": "578790",
    "end": "590769"
  },
  {
    "text": "if you're going to-- that it's good to\ntry to think about--",
    "start": "590770",
    "end": "596038"
  },
  {
    "text": "if you're trying to\nseparate classes, you might as well take\nclasses that are as far apart as one another.",
    "start": "596038",
    "end": "602740"
  },
  {
    "text": "Like, if you're\ntrying to prove-- if you're comparing P different\nfrom NP and P different",
    "start": "602740",
    "end": "608290"
  },
  {
    "text": "from PSPACE, maybe P\ndifferent from PSPACE might be easier, because P and\nPSPACE seem to be even further",
    "start": "608290",
    "end": "616510"
  },
  {
    "text": "apart than P and NP. Nobody knows. And I suspect that\nthere's something",
    "start": "616510",
    "end": "622420"
  },
  {
    "text": "fundamental about computation\nthat we just don't understand. And then once somebody\nmakes a breakthrough",
    "start": "622420",
    "end": "628510"
  },
  {
    "text": "and solves one of those\nproblems, a lot of them are going to get\nsolved in short order.",
    "start": "628510",
    "end": "634009"
  },
  {
    "text": "But again, it's\npurely speculation.",
    "start": "634010",
    "end": "639770"
  },
  {
    "text": "OK, d. What is d here? d would be\nthe size of the tape alphabet.",
    "start": "639770",
    "end": "646190"
  },
  {
    "text": "OK, so this is the number\nof different tape contents we have.",
    "start": "646190",
    "end": "651230"
  },
  {
    "text": " Good. All right.",
    "start": "651230",
    "end": "657149"
  },
  {
    "text": "So let's continue on. Another thing we mentioned\nkind of quickly in passing,",
    "start": "657150",
    "end": "663050"
  },
  {
    "start": "660000",
    "end": "790000"
  },
  {
    "text": "but still an important fact,\nis that Savitch's theorem works down to the\nlevel of log space--",
    "start": "663050",
    "end": "672100"
  },
  {
    "text": "same exact proof. So that means that\nnondeterministic log space",
    "start": "672100",
    "end": "677920"
  },
  {
    "text": "is contained in deterministic\nlog squared space, because that's what Savitch's\ntheorem does for you.",
    "start": "677920",
    "end": "684340"
  },
  {
    "text": "It converts\nnondeterministic machines to deterministic\nmachines at the cost",
    "start": "684340",
    "end": "689500"
  },
  {
    "text": "of a squaring in the\namount of space you need. And so I'm not going to\ngo through this in detail.",
    "start": "689500",
    "end": "695710"
  },
  {
    "text": "But the same picture that I\ncopied off an earlier slide with a simple modification\nis that instead of--",
    "start": "695710",
    "end": "704890"
  },
  {
    "text": "that I'm right down-- the size of the configuration\nis going to be now log n,",
    "start": "704890",
    "end": "710565"
  },
  {
    "text": "because that's how big\nthe configurations are when you have a nondeterministic\nlog space machine.",
    "start": "710565",
    "end": "715800"
  },
  {
    "text": "And so simulating that-- so this would be what\nthe tableau would",
    "start": "715800",
    "end": "722130"
  },
  {
    "text": "look like for an NL machine. And then you can simulate\nthat in the same way",
    "start": "722130",
    "end": "728850"
  },
  {
    "text": "by trying all\npossible intermediates and then splitting it,\ndoing the top half and then",
    "start": "728850",
    "end": "736733"
  },
  {
    "text": "the bottom half. We're using the space,\nof course, recursively.",
    "start": "736733",
    "end": "742363"
  },
  {
    "text": "The amount of space\nyou're going to need is going to be enough to store,\nfor one level of the recursion,",
    "start": "742363",
    "end": "749040"
  },
  {
    "text": "one configuration. And that's order log space. And then the number\nof levels of recursion",
    "start": "749040",
    "end": "754680"
  },
  {
    "text": "is going to be another\nfactor of log n, because that's log to\nthe running time, which is going to be exponential in\nlog n, which is polynomial.",
    "start": "754680",
    "end": "763470"
  },
  {
    "text": "So the total amount of\nspace that you would need would be log squared space. Again, this is sort of saying\nthe proof of Savitch's theorem,",
    "start": "763470",
    "end": "769589"
  },
  {
    "text": "just over again. So if it's coming\ntoo fast for you, just review the proof\nof Savitch's theorem",
    "start": "769590",
    "end": "776310"
  },
  {
    "text": "and observe that it works,\neven if the amount of space that the machine-- that the nondeterministic\nmachine starts off with",
    "start": "776310",
    "end": "783000"
  },
  {
    "text": "is log space.  All right.",
    "start": "783000",
    "end": "789610"
  },
  {
    "text": "And last thing I was going\nto-- last thing in the category of a review is our theorem that\nnot only is all of L within P--",
    "start": "789610",
    "end": "802330"
  },
  {
    "start": "790000",
    "end": "1300000"
  },
  {
    "text": "and that's kind of\ntrivial, kind of immediate. You don't even have\nto change the machine. If you have a log space\nmachine for some language,",
    "start": "802330",
    "end": "809870"
  },
  {
    "text": "the very same machine is\na polynomial time machine for that language,\nbecause it can only be running for a\npolynomial amount of time.",
    "start": "809870",
    "end": "815570"
  },
  {
    "text": "But now, we have a\nnondeterministic machine for some language.",
    "start": "815570",
    "end": "821850"
  },
  {
    "text": "We're going to have\nto change it to become a deterministic machine that\nruns in polynomial time.",
    "start": "821850",
    "end": "827320"
  },
  {
    "text": "And so we're going to give a\ndeterministic polynomial time simulation of a nondeterministic\nlog space machine.",
    "start": "827320",
    "end": "836660"
  },
  {
    "text": "And we kind of did this last\ntime, but a little quickly. So now, if we have some\nnondeterministic log space",
    "start": "836660",
    "end": "846490"
  },
  {
    "text": "machine, so an M, which decides\nthe language A in log space,",
    "start": "846490",
    "end": "855010"
  },
  {
    "text": "we're going to show\nhow to simulate that machine with a\ndeterministic polynomial time",
    "start": "855010",
    "end": "861130"
  },
  {
    "text": "machine. And the key idea, which\nis going to come up",
    "start": "861130",
    "end": "868210"
  },
  {
    "text": "in a later theorem, so good to\nunderstand it not only here,",
    "start": "868210",
    "end": "874830"
  },
  {
    "text": "but to understand it for the\nnext theorem that's coming,",
    "start": "874830",
    "end": "879870"
  },
  {
    "text": "is the notion of a\nconfiguration graph. I was sort of thinking about\ncalling it a computation graph.",
    "start": "879870",
    "end": "885399"
  },
  {
    "text": "But now, on further\nreflection, I think configuration graph maybe\nis the more suggestive term.",
    "start": "885400",
    "end": "890940"
  },
  {
    "text": "So let's stick with that. So a configuration graph\nfor a machine on an input",
    "start": "890940",
    "end": "899430"
  },
  {
    "text": "is just a set of\nall configurations that the machine has, all\nthe possible different configurations the\nmachine can have,",
    "start": "899430",
    "end": "907949"
  },
  {
    "text": "with edges connecting\nconfigurations that correspond to legal moves of the machine.",
    "start": "907950",
    "end": "914139"
  },
  {
    "text": "So here is some configuration. This is a snapshot of the\nmachine at a moment in time. Here is some other\nconfiguration,",
    "start": "914140",
    "end": "920709"
  },
  {
    "text": "another snapshot of the\nmachine at a moment n time. And you're going to draw\nan edge between ci and cj",
    "start": "920710",
    "end": "928080"
  },
  {
    "text": "if cj could follow\nin one step from ci. And you could tell by just\nlooking at the configurations",
    "start": "928080",
    "end": "934080"
  },
  {
    "text": "whether that could be possible. Obviously, the head has\nto be one place over in cj",
    "start": "934080",
    "end": "940320"
  },
  {
    "text": "from where it was in ci. And it has to be\nupdated according to the rules of the machine. So you can tell whether--",
    "start": "940320",
    "end": "948930"
  },
  {
    "text": "so you could fill\nout this graph. You could write down all\nthe possible configurations.",
    "start": "948930",
    "end": "953970"
  },
  {
    "text": "And you can put the edges down. Now, the point is that when\nwe have a log space machine,",
    "start": "953970",
    "end": "959970"
  },
  {
    "text": "we don't have too many\npossible configurations. There's only a\npolynomial number.",
    "start": "959970",
    "end": "965490"
  },
  {
    "text": "So the size of this whole\ngraph is polynomial. ",
    "start": "965490",
    "end": "972950"
  },
  {
    "text": "So our polynomial\ntime simulation is going to write down\nthat entire configuration",
    "start": "972950",
    "end": "979730"
  },
  {
    "text": "graph of the log space\nmachine on its input. There [INAUDIBLE]\nmany configurations.",
    "start": "979730",
    "end": "985920"
  },
  {
    "text": "There can be only\npolynomially many. So you can write down all those\nconfigurations as the nodes",
    "start": "985920",
    "end": "991260"
  },
  {
    "text": "and then go look at\neach pair of nodes, whether this configuration could\nlead to that configuration.",
    "start": "991260",
    "end": "996990"
  },
  {
    "text": "According to-- it's a\nnondeterministic machine. So a configuration could go to\nseveral different locations--",
    "start": "996990",
    "end": "1002250"
  },
  {
    "text": "there could be several\ndifferent ways to go. But those are just several\ndifferent outgoing edges from a particular node in\nthis graph representing",
    "start": "1002250",
    "end": "1009890"
  },
  {
    "text": "the configuration,\nwhich might have several different\nlegal successors in the nondeterministic\ncomputation.",
    "start": "1009890",
    "end": "1017910"
  },
  {
    "text": "OK. Now, the important thing here\nis that M accepts its input, w,",
    "start": "1017910",
    "end": "1025949"
  },
  {
    "text": "exactly when there\nis a path [INAUDIBLE] configuration graph\nthat takes you",
    "start": "1025950",
    "end": "1031569"
  },
  {
    "text": "from the start configuration\nto the accept configuration. And as I mentioned,\nlet's assume,",
    "start": "1031569",
    "end": "1036790"
  },
  {
    "text": "as we've been doing,\nthat the machine-- I should have put it\nhere, but I didn't. But the machine, when\nit is about to accept,",
    "start": "1036790",
    "end": "1045790"
  },
  {
    "text": "it erases its work tape\nand moves both of its heads to the home position at\nthe left end of the tape.",
    "start": "1045790",
    "end": "1052240"
  },
  {
    "text": "So there's just one\naccepting configuration you have to worry about. It just makes life simpler. ",
    "start": "1052240",
    "end": "1059450"
  },
  {
    "text": "So there's going to be\na start configuration, a single accept configuration\nin this configuration graph.",
    "start": "1059450",
    "end": "1065780"
  },
  {
    "text": "And now there's going to be\na path, indicated here, that",
    "start": "1065780",
    "end": "1071180"
  },
  {
    "text": "connects the start configuration\nto the accept configuration if and only if M accepts\nw, because that path",
    "start": "1071180",
    "end": "1080510"
  },
  {
    "text": "is the sequence\nof configurations that the machine\nwould go through if you launched it on w.",
    "start": "1080510",
    "end": "1087560"
  },
  {
    "text": "It would start at the start. And there might be several\ndifferent ways to go. But if there is one of them\nthat leads you to an accept,",
    "start": "1087560",
    "end": "1094760"
  },
  {
    "text": "that's going to correspond to\na branch of the computation that it's accepting. OK, so that tells us what the\npolynomial time algorithm is.",
    "start": "1094760",
    "end": "1104140"
  },
  {
    "text": "On input w, you construct\nthat configuration graph for M",
    "start": "1104140",
    "end": "1109870"
  },
  {
    "text": "on w, G sub Mw. And you test whether there's\na path from c start to c",
    "start": "1109870",
    "end": "1117440"
  },
  {
    "text": "accept using any polynomial\ntime depth-first search",
    "start": "1117440",
    "end": "1124370"
  },
  {
    "text": "or breadth-first search\nalgorithm for testing whether there's a\nconnection path in a graph.",
    "start": "1124370",
    "end": "1131990"
  },
  {
    "text": "And if there is such\na path, you accept, because that means the\nmachine M accepted.",
    "start": "1131990",
    "end": "1137060"
  },
  {
    "text": "And if there was no path,\nyou reject, because then M must have not accepted.",
    "start": "1137060",
    "end": "1143540"
  },
  {
    "text": "And therefore, you have a\npolynomial time simulation of your nondeterministic\nlog space machine M, OK?",
    "start": "1143540",
    "end": "1152190"
  },
  {
    "text": "How are we doing? OK, so that tells us that\nNL is contained within P.",
    "start": "1152190",
    "end": "1159610"
  },
  {
    "text": "And also, L is contained\nwithin NL, as before. So we have kind of this\nhierarchy of classes.",
    "start": "1159610",
    "end": "1166495"
  },
  {
    "text": " Now, you can even talk\nabout, not only is L",
    "start": "1166495",
    "end": "1171890"
  },
  {
    "text": "different from NL, even\nis L different from P? Is it possible that\nanything that you",
    "start": "1171890",
    "end": "1177020"
  },
  {
    "text": "can do in polynomial time,\nyou can do [INAUDIBLE] space? Don't know.",
    "start": "1177020",
    "end": "1182252"
  },
  {
    "text": "Open question. ",
    "start": "1182252",
    "end": "1189799"
  },
  {
    "text": "OK, getting a very good\nquestion here just now. Why is this construction\ntaking log space?",
    "start": "1189800",
    "end": "1199220"
  },
  {
    "text": "It doesn't. This construction\ntakes polynomial time. This algorithm here\nis not a polynomial--",
    "start": "1199220",
    "end": "1210990"
  },
  {
    "text": "this is not a log space\nalgorithm that I'm giving you. I'm giving you a\npolynomial time algorithm for simulating a\nnondeterministic log space",
    "start": "1210990",
    "end": "1218250"
  },
  {
    "text": "machine. Now, later on-- I don't want\nto confuse the issue right now. For this particular\nslide, all I need to do",
    "start": "1218250",
    "end": "1226450"
  },
  {
    "text": "is construct that graph\nin polynomial time. It's a polynomial size graph.",
    "start": "1226450",
    "end": "1232330"
  },
  {
    "text": "I can't store that whole\ngraph in a log space memory.",
    "start": "1232330",
    "end": "1238269"
  },
  {
    "text": "OK, so question here--  we can see that listing\nout the nodes and edges",
    "start": "1238270",
    "end": "1245549"
  },
  {
    "text": "would be polynomial time. But how do we actually\nprovide structure to this graph representation?",
    "start": "1245550",
    "end": "1250710"
  },
  {
    "text": "I don't even know\nwhat that means. So if you can\nclarify that for me, then maybe I can\ntry to answer it. But a graph is just a list\nof nodes and a list of edges.",
    "start": "1250710",
    "end": "1260640"
  },
  {
    "text": "After that, we know\nwhat the graph is. I mean, you may like a picture.",
    "start": "1260640",
    "end": "1266160"
  },
  {
    "text": "But the machine\ndoesn't need a picture. Our definition of-- we\njust represent these things",
    "start": "1266160",
    "end": "1273330"
  },
  {
    "text": "as strings, in the end.",
    "start": "1273330",
    "end": "1278390"
  },
  {
    "text": "So please clarify\nif you want me to-- I'll answer it the\nnext at the next pause.",
    "start": "1278390",
    "end": "1284560"
  },
  {
    "text": "I'm grateful for all the\nquestions, because I'm sure, any question that any of\nyou have, another 20 of you",
    "start": "1284560",
    "end": "1290559"
  },
  {
    "text": "also have. So questions are good. Don't be bashful.",
    "start": "1290560",
    "end": "1297460"
  },
  {
    "text": "And also ask the TAs\nif I become overloaded. OK, now we're going to shift\ngears into some new material.",
    "start": "1297460",
    "end": "1306130"
  },
  {
    "text": "All right. We're going to talk\nabout the notion that--",
    "start": "1306130",
    "end": "1313900"
  },
  {
    "text": "sort of thinking about,\nanalogous to the P versus NP problem, where there were\nthese NP-complete problems,",
    "start": "1313900",
    "end": "1320920"
  },
  {
    "text": "now we have the L\nversus NL problem. There are going to be\nan NL-complete problems",
    "start": "1320920",
    "end": "1328120"
  },
  {
    "text": "that kind of capture the\nessence of NL the way NP-complete problems\ncapture the essence of NP,",
    "start": "1328120",
    "end": "1335080"
  },
  {
    "text": "in a sense, in that all\nof the problems in NP are reducible to them. So they're kind of like\nthe hardest NP problems.",
    "start": "1335080",
    "end": "1341770"
  },
  {
    "text": "Here, we're going to have\nexactly analogous situations for NL, where we're\ngoing to show problems",
    "start": "1341770",
    "end": "1349269"
  },
  {
    "text": "where all other NL problems\nare reducible to them. So if you can kind\nof solve one of them,",
    "start": "1349270",
    "end": "1355390"
  },
  {
    "text": "like solve one of these\nNL-complete problems in log space deterministically, then\nyou solve all of NL problems",
    "start": "1355390",
    "end": "1362380"
  },
  {
    "text": "in log space deterministically. So it's a very\nsimilar-looking definition",
    "start": "1362380",
    "end": "1369940"
  },
  {
    "text": "to what we had before. It's NL complete if it's in NL. And then all other languages\nin NL should be reducible.",
    "start": "1369940",
    "end": "1379450"
  },
  {
    "text": "But now, we have a new notion\nhere, with an L instead of a P.",
    "start": "1379450",
    "end": "1385510"
  },
  {
    "text": "Now, before, when we talked\nabout NP completeness, we had polynomial\ntime reducibility.",
    "start": "1385510",
    "end": "1391879"
  },
  {
    "text": "That's not going\nto work anymore, because if you remember,\nNL is a subset of P.",
    "start": "1391880",
    "end": "1400970"
  },
  {
    "text": "So all NL languages\nare polynomial-- are languages in P. And\nif we're talking about--",
    "start": "1400970",
    "end": "1408260"
  },
  {
    "text": "if we use polynomial\ntime reducibility, all languages in P are\nreducible to each other.",
    "start": "1408260",
    "end": "1414100"
  },
  {
    "text": "We need to have a notion\nof reducibility which is kind of weaker than the class.",
    "start": "1414100",
    "end": "1420190"
  },
  {
    "text": "And so polynomial\ntime reducibility just would not work here,\nbecause everything",
    "start": "1420190",
    "end": "1425980"
  },
  {
    "text": "would become NL complete,\nbecause everything is reducible to each other. So we need to have\na weaker notion. We're going to use log\nspace reducibility,",
    "start": "1425980",
    "end": "1433080"
  },
  {
    "text": "which we have to define.  So here, for that,\nwe're going to have",
    "start": "1433080",
    "end": "1439049"
  },
  {
    "text": "to talk about the\nnotion of a function that you can compute\nin log space.",
    "start": "1439050",
    "end": "1446170"
  },
  {
    "text": "And it's a little tricky here. Just like when we talked\nabout language recognition in log space, where\nwe had the work tape",
    "start": "1446170",
    "end": "1452880"
  },
  {
    "text": "had to be smaller\nthan the input tape, because the inputs can be large. The work area is small.",
    "start": "1452880",
    "end": "1459000"
  },
  {
    "text": "Now the output\nalso could be large relative to the work area.",
    "start": "1459000",
    "end": "1464800"
  },
  {
    "text": "So we're going to have a\nthree-tape model, where there's",
    "start": "1464800",
    "end": "1470130"
  },
  {
    "text": "the input is going\nto be a read-only, the output is a write-only--\nit's like a printer.",
    "start": "1470130",
    "end": "1477000"
  },
  {
    "text": "It's something you\ncan only write on, but you can't read back,\nbecause otherwise, you could cheat by using the\noutput as a kind of storage.",
    "start": "1477000",
    "end": "1484030"
  },
  {
    "text": "And then you have your\nstorage area, which is your read-write work tape. ",
    "start": "1484030",
    "end": "1490890"
  },
  {
    "text": "OK, so this-- we'll call this-- the traditional name of this\nis a log space transducer.",
    "start": "1490890",
    "end": "1497070"
  },
  {
    "text": "So it converts\ninputs to outputs, but uses only log space\nfor its working memory.",
    "start": "1497070",
    "end": "1503630"
  },
  {
    "text": "OK, so the input tape\nstores n bit-- n symbols.",
    "start": "1503630",
    "end": "1508740"
  },
  {
    "text": "The work tape stores log n\nsymbols, order log n symbols. And then we have\nthe output tape.",
    "start": "1508740",
    "end": "1514670"
  },
  {
    "text": "You may want to\nthink about how big-- there's going to be a check-in\ncoming to kind of ask you,",
    "start": "1514670",
    "end": "1521240"
  },
  {
    "text": "how big could the output be? But we'll save that\nfor the end if you--",
    "start": "1521240",
    "end": "1526790"
  },
  {
    "text": "you can mull that over if\nyou want to think ahead. OK.",
    "start": "1526790",
    "end": "1533320"
  },
  {
    "start": "1530000",
    "end": "1685000"
  },
  {
    "text": "So we think of a\nlog space transducer as computing a\nfunction, which is just",
    "start": "1533320",
    "end": "1539679"
  },
  {
    "text": "a mapping from the\ninput to the output that the transducer\nprovides for you. A transducer is a deterministic\nmachine, by the way.",
    "start": "1539680",
    "end": "1550720"
  },
  {
    "text": "So you take the transducer. You give it w.",
    "start": "1550720",
    "end": "1557240"
  },
  {
    "text": "And you turn it on. And then it halts with f\nof w on its output tape.",
    "start": "1557240",
    "end": "1562950"
  },
  {
    "text": "That's what it means to be\ncomputing the function f, OK? And we'll say that A is log\nspace reducible to B, using",
    "start": "1562950",
    "end": "1573730"
  },
  {
    "text": "the l subscript symbol on the\nless than or equal to sign, if it's mapping reducible\nto B, but by a reduction",
    "start": "1573730",
    "end": "1580809"
  },
  {
    "text": "function that's\ncomputable in log space, just the\nsame way we define polynomial time reducibility.",
    "start": "1580810",
    "end": "1586059"
  },
  {
    "text": "But there, we insisted that\nthe reduction function was computable in polynomial time. ",
    "start": "1586060",
    "end": "1594640"
  },
  {
    "text": "OK. Just quickly, I got\na question again.",
    "start": "1594640",
    "end": "1599900"
  },
  {
    "text": "Why log space here? Because polynomial time would\nbe too powerful for doing",
    "start": "1599900",
    "end": "1606870"
  },
  {
    "text": "reductions internal to\nP. Every language in P",
    "start": "1606870",
    "end": "1616240"
  },
  {
    "text": "is reducible to every\nother language in P. And so everything in NL would\nbe reducible to everything else",
    "start": "1616240",
    "end": "1622029"
  },
  {
    "text": "in L with a polynomial\ntime reducibility. And so that would not be\nan interesting notion.",
    "start": "1622030",
    "end": "1627430"
  },
  {
    "text": "We have to use a weaker\nnotion than that, a weaker kind of reduction,\nusing a weaker model,",
    "start": "1627430",
    "end": "1637570"
  },
  {
    "text": "so that you don't get-- otherwise, the\nreduction function",
    "start": "1637570",
    "end": "1644710"
  },
  {
    "text": "would be able to\nanswer whether-- would be able to solve\nthe problem A itself",
    "start": "1644710",
    "end": "1651617"
  },
  {
    "text": "if we had a polynomial\ntime reduction, and we're mapping things from\nNL to other problems in NL.",
    "start": "1651617",
    "end": "1658899"
  },
  {
    "text": "The reduction would\nsolve the problem. And that's not what you want. The reduction should\nbe constrained only",
    "start": "1658900",
    "end": "1664570"
  },
  {
    "text": "to be able to do simple\ntransformations on the problem,",
    "start": "1664570",
    "end": "1670429"
  },
  {
    "text": "not to solve the problem. Anyway, you have\nto look at that. This is an issue that's come\nup before when we talked about,",
    "start": "1670430",
    "end": "1678140"
  },
  {
    "text": "what's the right\nnotion of reduction to use for PSPACE completeness? Same exact discussion.",
    "start": "1678140",
    "end": "1684760"
  },
  {
    "text": "OK. Now, there is an\nissue here, though, that we have to be careful of. When we have A being log space\nreducible to B, and B in L,",
    "start": "1684760",
    "end": "1696700"
  },
  {
    "start": "1685000",
    "end": "1860000"
  },
  {
    "text": "then what you want-- ",
    "start": "1696700",
    "end": "1702400"
  },
  {
    "text": "if A is log space\nreducible to B and B in L, then you want A\nto be in L. That's",
    "start": "1702400",
    "end": "1707920"
  },
  {
    "text": "the same pattern we've\nalways had for reductions. If A is reducible to B, and\nB is easy, then A is easy.",
    "start": "1707920",
    "end": "1713480"
  },
  {
    "text": "So here, the notion of\neasy is being an L. Now, if you remember the proof\nof that we had from before,",
    "start": "1713480",
    "end": "1721130"
  },
  {
    "text": "which I'll just\nput out for you, is that to show a log space solver\nfor A, you take an input, w.",
    "start": "1721130",
    "end": "1737630"
  },
  {
    "text": "And now, if A is reducible to\nB, you compute the reduction. And then you run\nthe decider for B.",
    "start": "1737630",
    "end": "1745640"
  },
  {
    "text": "So if we're assuming A is\nreducible to B, and B is in L, so B has a log\nspace decider, you",
    "start": "1745640",
    "end": "1752490"
  },
  {
    "text": "take your w, which you\nwant to know, is it in A? You map it over to a B problem\nusing the reduction function.",
    "start": "1752490",
    "end": "1761110"
  },
  {
    "text": "And then you solve it\nusing the decider for B. And you give the same answer.",
    "start": "1761110",
    "end": "1767840"
  },
  {
    "text": "Now, this actually\ndoesn't work anymore, or it doesn't work\nin an obvious way,",
    "start": "1767840",
    "end": "1777780"
  },
  {
    "text": "because, if you're\nfollowing me-- I hope most of you are--",
    "start": "1777780",
    "end": "1783770"
  },
  {
    "text": " there is a problem here, which--",
    "start": "1783770",
    "end": "1790649"
  },
  {
    "text": "because we're trying to give\na log space algorithm for A.",
    "start": "1790650",
    "end": "1801700"
  },
  {
    "text": "And that algorithm is going\nto be computing this reduction function, mapping w to f of w.",
    "start": "1801700",
    "end": "1809660"
  },
  {
    "text": "f of w might itself\nbe very large, as this picture suggests here.",
    "start": "1809660",
    "end": "1815150"
  },
  {
    "text": "You may not be able\nto store f of w in the log space memory for\nthe machine that's deciding A.",
    "start": "1815150",
    "end": "1830020"
  },
  {
    "text": "So this is an\nobstacle that we need",
    "start": "1830020",
    "end": "1837260"
  },
  {
    "text": "to solve in order to prove\nthis theorem, which we need, because that's the whole\njustification for doing",
    "start": "1837260",
    "end": "1843300"
  },
  {
    "text": "these reducibilities-- should be a familiar-looking\nkind of line",
    "start": "1843300",
    "end": "1848830"
  },
  {
    "text": "to what we've seen before. So we don't have\nspace to store f of w. What do we do?",
    "start": "1848830",
    "end": "1854830"
  },
  {
    "text": "And I'll also\nmention that this is going to be relevant to one\nof your homework problems. ",
    "start": "1854830",
    "end": "1862210"
  },
  {
    "start": "1860000",
    "end": "2336000"
  },
  {
    "text": "So what do we do? We don't have space to store\nthe intermediate result that we need in order\nto solve the problem.",
    "start": "1862210",
    "end": "1869130"
  },
  {
    "text": "We started with w. Now we'd need to test\nif f of w is in B.",
    "start": "1869130",
    "end": "1874360"
  },
  {
    "text": "That can run in log space. But just simply getting\nyour hands on f of w-- what do you do about that?",
    "start": "1874360",
    "end": "1881840"
  },
  {
    "text": "So what we're going to do is\nthe following, is the decider--",
    "start": "1881840",
    "end": "1890100"
  },
  {
    "text": "the decider for B,\nwhich needs f of w,",
    "start": "1890100",
    "end": "1898280"
  },
  {
    "text": "because it's deciding\nif f of w is in B-- it doesn't need all of f of w\nsitting there in front of it",
    "start": "1898280",
    "end": "1905509"
  },
  {
    "text": "all at once. If you think about how the\nTuring machine operates",
    "start": "1905510",
    "end": "1910620"
  },
  {
    "text": "on its input, it only looks\nat one symbol at a time. It starts out reading the\nleftmost symbol of f of w,",
    "start": "1910620",
    "end": "1917693"
  },
  {
    "text": "then maybe it moves\nits head right and moves to the second\nsymbol of f of w, then the third symbol of f of w. Maybe it gets up to the\n10th symbol of f of w.",
    "start": "1917693",
    "end": "1926245"
  },
  {
    "text": "Maybe it moves his head back\nand goes to the ninth symbol and the eighth symbol. But the Turing machine's\nhead, which is deciding B,",
    "start": "1926245",
    "end": "1934230"
  },
  {
    "text": "only looks at one symbol\nof f of w at a time. ",
    "start": "1934230",
    "end": "1941309"
  },
  {
    "text": "So instead of writing\ndown all of f of w, the idea is that we\nare going to compute",
    "start": "1941310",
    "end": "1951280"
  },
  {
    "text": "the individual symbols of\nf of w that we need only at the moment we need them.",
    "start": "1951280",
    "end": "1959510"
  },
  {
    "text": "So if the decider\nfor B is reading",
    "start": "1959510",
    "end": "1965180"
  },
  {
    "text": "the 10th symbol of f of w, we\nfire up the transducer on w.",
    "start": "1965180",
    "end": "1979240"
  },
  {
    "text": "And as it's writing\nout its output, which we don't have space\nto store anymore, we throw away all\nof the output values",
    "start": "1979240",
    "end": "1986410"
  },
  {
    "text": "until we get to the 10th one. And then we say, ah, the\n10th one is whatever,",
    "start": "1986410",
    "end": "1992230"
  },
  {
    "text": "is a c, whatever the value is. Now we feed that into\nthe decider for B.",
    "start": "1992230",
    "end": "1999310"
  },
  {
    "text": "We can now simulate that\ndecider for one more step. Now the decider says,\nall right, now I need the 11th symbol of f of w.",
    "start": "1999310",
    "end": "2007440"
  },
  {
    "text": "OK, now we can run that\nmachine for one more place. But if it needs--",
    "start": "2007440",
    "end": "2013140"
  },
  {
    "text": "but we don't even have to do it. I think the better way to\nthink about it is, every time",
    "start": "2013140",
    "end": "2018720"
  },
  {
    "text": "that decider for B\nneeds another symbol, we start the transducer\nover again and just keep--",
    "start": "2018720",
    "end": "2027510"
  },
  {
    "text": "throw away everything except\nfor that one symbol output that we need.",
    "start": "2027510",
    "end": "2033600"
  },
  {
    "text": "So every time we do another\nstep of simulating B,",
    "start": "2033600",
    "end": "2039500"
  },
  {
    "text": "we're going to have to rerun the\ntransducer from the beginning, just to recompute\nthat, or compute maybe",
    "start": "2039500",
    "end": "2047900"
  },
  {
    "text": "for the first time, or recompute\nit if we need it subsequently. This is going to be\nslow, but we don't care, to recompute that\nsymbol that the simulator--",
    "start": "2047900",
    "end": "2060379"
  },
  {
    "text": "that the decider\nfor B requires, OK? So I'm saying that over here.",
    "start": "2060380",
    "end": "2065899"
  },
  {
    "text": "Recompute the symbols\nof f of w as needed. OK, so let me-- let's take\na couple of questions.",
    "start": "2065900",
    "end": "2071919"
  },
  {
    "text": "And then we're going\nto move to a check-in. ",
    "start": "2071920",
    "end": "2082789"
  },
  {
    "text": "So somebody's asking, why did\nwe have to introduce transducer for log space\nreducibility when we didn't do it for polynomial\ntime reducibility?",
    "start": "2082790",
    "end": "2089870"
  },
  {
    "text": "We could have for polynomial\ntime reducibility. But we didn't need to, because\nwe could just all do it",
    "start": "2089870",
    "end": "2095658"
  },
  {
    "text": "on the same tape. The problem is, for log\nspace, the tape is-- the work tape is too small to\nhold the input on the output.",
    "start": "2095659",
    "end": "2105750"
  },
  {
    "text": "So we can't-- since\nwe're only working-- we have a log n bound that\nwe have to work within.",
    "start": "2105750",
    "end": "2112040"
  },
  {
    "text": "We need to separate\nthose functions from the work functions, the\ninput function and the output",
    "start": "2112040",
    "end": "2117950"
  },
  {
    "text": "function. So if we have more than the\namount of resource we have,",
    "start": "2117950",
    "end": "2123440"
  },
  {
    "text": "either time or space\nwas at least n, then we could just\nlump them all together and have that one tape\ndo multiple functions.",
    "start": "2123440",
    "end": "2133242"
  },
  {
    "text": "And somebody's\nasked me here, yeah, this is mapping\nreducibility, this m. This is from the\nnotion we saw before.",
    "start": "2133242",
    "end": "2142170"
  },
  {
    "text": "OK. Does f of w lie on\nthe input tape of B?",
    "start": "2142170",
    "end": "2147420"
  },
  {
    "text": "Well, yes. So we are-- good question.",
    "start": "2147420",
    "end": "2153400"
  },
  {
    "text": "So f of w-- you know, because\nwhat are we doing? We're trying to\nfind a decider for A",
    "start": "2153400",
    "end": "2159650"
  },
  {
    "text": "here, using the decider for\nB and the mapping from A",
    "start": "2159650",
    "end": "2164670"
  },
  {
    "text": "to B, the reduction from A to B. So the decider for B\nexpects to find its input",
    "start": "2164670",
    "end": "2174170"
  },
  {
    "text": "on an input tape. That input is\ngoing to be f of w. ",
    "start": "2174170",
    "end": "2182440"
  },
  {
    "text": "But we have to get\nthe effect of that without actually writing\ndown that input tape,",
    "start": "2182440",
    "end": "2188380"
  },
  {
    "text": "because we don't\nhave enough room to write down the input\ntape for the decider-- for the B decider, because\nthat could be very large.",
    "start": "2188380",
    "end": "2195730"
  },
  {
    "text": "And we only have-- we have no place\nto put the f of w.",
    "start": "2195730",
    "end": "2200849"
  },
  {
    "text": "So think about\nwhat's going on here. We're making a log space\nmachine whose input is w, has to compute f of\nw as an intermediate value,",
    "start": "2200850",
    "end": "2209849"
  },
  {
    "text": "to feed it into the B decider. That is not going to be possible\nto hold onto that whole f of w",
    "start": "2209850",
    "end": "2218640"
  },
  {
    "text": "at one-- altogether, because\nit's too big. But that doesn't matter. We don't need it. We only needed one symbol at a\ntime, which we can recompute.",
    "start": "2218640",
    "end": "2225424"
  },
  {
    "text": " OK, so let's see. ",
    "start": "2225424",
    "end": "2235569"
  },
  {
    "text": "So somebody says,\ncan we just ensure that the output tape\nis order n so we don't need to use more\ntape than the input?",
    "start": "2235570",
    "end": "2240777"
  },
  {
    "text": "Order n is still\ngoing to be too big. Where are you going\nto put that output? Even if it's just\norder n-- first of all, the answer is no, we\ncan't, because there",
    "start": "2240778",
    "end": "2248080"
  },
  {
    "text": "are going to be reductions\nwhich are bigger than that. But the other question\nis, can we just",
    "start": "2248080",
    "end": "2253960"
  },
  {
    "text": "ensure that the\noutput is order n? You can't put the output\non the input tape. The input tape is read-only.",
    "start": "2253960",
    "end": "2259990"
  },
  {
    "text": "The output tape is write-only. So there's no place to--",
    "start": "2259990",
    "end": "2265012"
  },
  {
    "text": "even if the output is\njust as big as the input, it doesn't help you. If the output is only log\nn, OK, then we could do it.",
    "start": "2265012",
    "end": "2271170"
  },
  {
    "text": "But that's not going to\nbe interesting for us. You're going to need,\nfor these large space",
    "start": "2271170",
    "end": "2277109"
  },
  {
    "text": "reductions, big outputs,\nas we'll see in a minute. ",
    "start": "2277110",
    "end": "2284510"
  },
  {
    "text": "What's the running time for\nthis log space reduction? It's all going to be polynomial. It's all going to be\na log space algorithm.",
    "start": "2284510",
    "end": "2291000"
  },
  {
    "text": "So it's all going\nto be polynomial.  Is there any NP\ncompleteness reduction",
    "start": "2291000",
    "end": "2298290"
  },
  {
    "text": "which can be done in log space? All of the NP--",
    "start": "2298290",
    "end": "2303349"
  },
  {
    "text": "all typical NP\ncompleteness reductions, those polynomial time\nreductions, they all",
    "start": "2303350",
    "end": "2308600"
  },
  {
    "text": "can be done in log\nspace, because they are--",
    "start": "2308600",
    "end": "2313650"
  },
  {
    "text": "reductions tend to be very\nsimple transformations. And log space is going to\nbe enough to do all of them.",
    "start": "2313650",
    "end": "2320309"
  },
  {
    "start": "2320310",
    "end": "2327920"
  },
  {
    "text": "OK. I can't answer the\nsecond part of that. That's too complicated.",
    "start": "2327920",
    "end": "2332970"
  },
  {
    "text": "And I think we should move on. So let's look at the\nfirst check-in here. ",
    "start": "2332970",
    "end": "2340590"
  },
  {
    "text": "So if we have a long\nspace transducer that computes f, and if you\nfeed it inputs of length n,",
    "start": "2340590",
    "end": "2346940"
  },
  {
    "text": "how big can the\noutputs be, actually? ",
    "start": "2346940",
    "end": "2354617"
  },
  {
    "text": "So why don't you think about\nthat and give me an answer? I'll give you a minute\nto answer this question.",
    "start": "2354617",
    "end": "2361700"
  },
  {
    "text": "Oh, this is a tough one. Let me just say up\nfront, there are--",
    "start": "2361700",
    "end": "2368990"
  },
  {
    "text": "I struggle with this lecture,\nbecause some-- especially the stuff in the second\nhalf, it's kind of hard.",
    "start": "2368990",
    "end": "2375619"
  },
  {
    "text": "I wouldn't say it's technical. But conceptually, I think\nsome of the material",
    "start": "2375620",
    "end": "2380900"
  },
  {
    "text": "is a little harder,\nmaybe in part because people are\nnot used to thinking",
    "start": "2380900",
    "end": "2386360"
  },
  {
    "text": "about memory complexity\nor space complexity, even though I don't see why--",
    "start": "2386360",
    "end": "2391420"
  },
  {
    "text": "I mean, I think it's\nan important resource to be considering. But I think it's less common.",
    "start": "2391420",
    "end": "2396740"
  },
  {
    "text": "And I think there's some\ndiscomfort with that. OK, so we're just\nabout done here.",
    "start": "2396740",
    "end": "2402800"
  },
  {
    "text": "Five more seconds, please.  All right, about to wrap.",
    "start": "2402800",
    "end": "2410540"
  },
  {
    "text": "Wrap the check-in. 1, 2, 3. All right.",
    "start": "2410540",
    "end": "2415680"
  },
  {
    "text": "So yes, the correct answer is c. ",
    "start": "2415680",
    "end": "2421830"
  },
  {
    "text": "As I mentioned,\nwe're going to want to have outputs that\nare larger than log n.",
    "start": "2421830",
    "end": "2431360"
  },
  {
    "text": "And there's no reason\nwhy they wouldn't be able to be larger than log\nn, according to the definition",
    "start": "2431360",
    "end": "2436550"
  },
  {
    "text": "that I gave you. There's no bound on the output. We're only measuring the\nrunning space of this algorithm",
    "start": "2436550",
    "end": "2444830"
  },
  {
    "text": "in terms of its work tape. The input and output\ntapes don't count.",
    "start": "2444830",
    "end": "2451200"
  },
  {
    "text": "So they can be more than log n. They can be more than n. Polynomial is the right answer. Why? Because a log space transducer,\nif you just ignore the output,",
    "start": "2451200",
    "end": "2462260"
  },
  {
    "text": "is just an ordinary\nlog space machine. And it can only run for a\npolynomial number of steps",
    "start": "2462260",
    "end": "2467930"
  },
  {
    "text": "without it end up\ngoing into a loop. The same argument\nthat we gave for that before applies here as well.",
    "start": "2467930",
    "end": "2475170"
  },
  {
    "text": "So if it's going to exceed a\npolynomial number of steps, it's never going to hold. And so that's going to be--",
    "start": "2475170",
    "end": "2481680"
  },
  {
    "text": "not allow it-- it's got to halt\nwith the output on the output tape. And so it'll be disqualified\nas a log space transducer",
    "start": "2481680",
    "end": "2493320"
  },
  {
    "text": "if it doesn't halt. So it\ncan't be anything longer than polynomial.",
    "start": "2493320",
    "end": "2499290"
  },
  {
    "text": "It's a good thing to think\nabout, to understand. OK, so let's continue.",
    "start": "2499290",
    "end": "2505940"
  },
  {
    "text": "So we're going to show that the\nPATH problem is NL complete. Now, we defined NL completeness.",
    "start": "2505940",
    "end": "2511420"
  },
  {
    "text": "And we've seen the\nPATH problem before. And we're now going to show\nthat PATH occupies a very",
    "start": "2511420",
    "end": "2518980"
  },
  {
    "text": "special position for\nNL, namely that it's an NL-complete problem. ",
    "start": "2518980",
    "end": "2526880"
  },
  {
    "text": "So if you can solve the PATH\nproblem deterministically in log space, you have\ngotten a big result.",
    "start": "2526880",
    "end": "2534775"
  },
  {
    "text": "No one knows how to do that. And it would collapse\nall of NL down",
    "start": "2534775",
    "end": "2540430"
  },
  {
    "text": "to log space if you could\ndo PATH in log space deterministically.",
    "start": "2540430",
    "end": "2547202"
  },
  {
    "text": "OK, so let's see why that is. So first of all, the two\ncomponents of being complete are being in the language\nand the reduction part.",
    "start": "2547202",
    "end": "2553849"
  },
  {
    "text": "So in the language,\nwe've shown already. Now, we want to show that\nfor any other language in NL,",
    "start": "2553850",
    "end": "2560710"
  },
  {
    "text": "it's going to be log\nspace reducible to PATH. In a certain sense, this\nmay not feel so surprising,",
    "start": "2560710",
    "end": "2571710"
  },
  {
    "text": "thinking back to our proof\nthat NL is a subset of P,",
    "start": "2571710",
    "end": "2580359"
  },
  {
    "text": "because we managed\nto convert any NL",
    "start": "2580360",
    "end": "2585950"
  },
  {
    "text": "machine, the running of any\nNL machine, to a PATH problem",
    "start": "2585950",
    "end": "2592880"
  },
  {
    "text": "that the polynomial time\nmachine then solved. And so it's really the same\nidea that says that PATH really",
    "start": "2592880",
    "end": "2603220"
  },
  {
    "text": "captures any NL machine.",
    "start": "2603220",
    "end": "2611800"
  },
  {
    "text": "The computation\nof any NL machine really can be seen as\na PATH problem, where",
    "start": "2611800",
    "end": "2617349"
  },
  {
    "text": "the nodes are the\nconfigurations of the machine. So let's just see how--",
    "start": "2617350",
    "end": "2622359"
  },
  {
    "start": "2620000",
    "end": "3287000"
  },
  {
    "text": "let me just try to go\nthrough that if that wasn't super clear, which\nI'm not sure it was.",
    "start": "2622360",
    "end": "2628480"
  },
  {
    "text": "So suppose we have a\nmachine decided by-- a language decided by a\nnondeterministic-- an NL",
    "start": "2628480",
    "end": "2635290"
  },
  {
    "text": "machine, a nondeterministic\nmachine in log space. Again, I should have\nput this before.",
    "start": "2635290",
    "end": "2641590"
  },
  {
    "text": "But we're going to modify\nM to erase its work tape and move its head to the\nleft end on accepting.",
    "start": "2641590",
    "end": "2646800"
  },
  {
    "text": "So it has a unique\naccepting configuration. ",
    "start": "2646800",
    "end": "2654830"
  },
  {
    "text": "Now I'm going to give it\nthe log space reduction that maps our language A, which is\nin NL, to the PATH language.",
    "start": "2654830",
    "end": "2666980"
  },
  {
    "text": "So thinking about\nwhat that means, I'm going to take an input, w,\nwhich may or may not be in A,",
    "start": "2666980",
    "end": "2673250"
  },
  {
    "text": "and produce for you a graph with\na start and target node, start",
    "start": "2673250",
    "end": "2679320"
  },
  {
    "text": "and target notes, where w is\ngoing to be in the language",
    "start": "2679320",
    "end": "2686130"
  },
  {
    "text": "if and only if G has\na path from s to t. And what do you think\nthat graph is going to be?",
    "start": "2686130",
    "end": "2692770"
  },
  {
    "text": " That's going to be\nthe configuration graph for the machine\nthat decides A, OK?",
    "start": "2692770",
    "end": "2706300"
  },
  {
    "text": "So that is how\nit's going to look.",
    "start": "2706300",
    "end": "2712840"
  },
  {
    "text": "So maybe here's a picture. Right. So f of w, where w, again, is\nyour problem about membership",
    "start": "2712840",
    "end": "2722170"
  },
  {
    "text": "in A, is going to\nbecome a problem about membership in PATH. And it's just going to be the\nconfiguration graph for M on w.",
    "start": "2722170",
    "end": "2729250"
  },
  {
    "text": " Now, what's left is to show\nthat we can do this conversion",
    "start": "2729250",
    "end": "2736940"
  },
  {
    "text": "with a log space transducer. So it's a log space\ncomputable reduction.",
    "start": "2736940",
    "end": "2742650"
  },
  {
    "text": " So let's just try to go\nthrough that quickly--",
    "start": "2742650",
    "end": "2749210"
  },
  {
    "text": "conceptually, not super hard. So here's our transducer.",
    "start": "2749210",
    "end": "2755338"
  },
  {
    "text": "Let's just think about\nwhat it needs to do. It needs to take an input,\nw, and convert that f",
    "start": "2755338",
    "end": "2760670"
  },
  {
    "text": "of w to this thing here-- computation graph of M on w--",
    "start": "2760670",
    "end": "2767740"
  },
  {
    "text": "the configuration\ngraph M on w, the start and accept configuration. So that's going to look\nlike this down here.",
    "start": "2767740",
    "end": "2774320"
  },
  {
    "text": "That's what we want\nto eventually appear on the output tape. ",
    "start": "2774320",
    "end": "2786349"
  },
  {
    "text": "So the way we're going\nto achieve that-- we only have a small log space,\norder log space work tape.",
    "start": "2786350",
    "end": "2793609"
  },
  {
    "text": "And the way we're going to be\nable to produce this output is-- the configuration graph is just\na series of edges, which are--",
    "start": "2793610",
    "end": "2803900"
  },
  {
    "text": "say, you can go from\nthis configuration to that configuration\nin one step. So what we're going to\ndo is, on our work tape,",
    "start": "2803900",
    "end": "2810589"
  },
  {
    "text": "we're going to go through\nall possible pairs of configurations, again, just\nin some like odometer order,",
    "start": "2810590",
    "end": "2818570"
  },
  {
    "text": "just by looking at all possible\nstrings, really, of length order log n that are\nbig enough to represent",
    "start": "2818570",
    "end": "2823910"
  },
  {
    "text": "two configurations. Every once in a\nwhile, it's going to be actually a pair\nof configurations. At that point, we look at those\ntwo configurations, look at M,",
    "start": "2823910",
    "end": "2831920"
  },
  {
    "text": "and see, can this configuration\ngo to that configuration? If yes, you print it\nout on the output tape.",
    "start": "2831920",
    "end": "2837440"
  },
  {
    "text": "If no, you just move on to the\nnext pair of configurations. And then, at the end, you\nwrite down on the start",
    "start": "2837440",
    "end": "2844100"
  },
  {
    "text": "and accept configurations. So I've indicated that here. Here is the transducer. It says, on input w, for all\npairs of configurations, that--",
    "start": "2844100",
    "end": "2853310"
  },
  {
    "text": "now, this is getting written\ndown on the work tape-- you output those pairs\nwhich are legal moves for M.",
    "start": "2853310",
    "end": "2858650"
  },
  {
    "text": "And then finally, you output\nthe start and the accept. That's it. So let's just see.",
    "start": "2858650",
    "end": "2864590"
  },
  {
    "text": "Let me take any questions here.  Why do we need special\naccept state for M?",
    "start": "2864590",
    "end": "2872200"
  },
  {
    "text": "Well, we want to have-- I think you mean\naccepting configuration. I just want to have a-- I don't want to\nhave a multiplicity",
    "start": "2872200",
    "end": "2878470"
  },
  {
    "text": "of different possible\naccepting configurations, because then it's not\nreally a PATH problem. Then it becomes a question\nof, can I get from the start",
    "start": "2878470",
    "end": "2884950"
  },
  {
    "text": "to one of those\nnodes representing accepting configurations?",
    "start": "2884950",
    "end": "2890290"
  },
  {
    "text": "That's a little messy. I could fix it. But the simplest\nfix is just to make there be a single\naccepting configuration.",
    "start": "2890290",
    "end": "2899760"
  },
  {
    "text": "Well, why do I output\nstart and accept at the end of the output tape? That's the way I write\ndown my PATH problem.",
    "start": "2899760",
    "end": "2906480"
  },
  {
    "text": "It's a graph, followed by a\nstart node and a target node. So I have to follow that form.",
    "start": "2906480",
    "end": "2914550"
  },
  {
    "text": "I'm not sure what you're asking. You want me to put that first? I'm not sure what the-- or why at all?",
    "start": "2914550",
    "end": "2921270"
  },
  {
    "text": "Because it has to be a-- here it is. Here's the output\nI'm looking for. ",
    "start": "2921270",
    "end": "2929110"
  },
  {
    "text": "OK.  Do the three-- do\nthe read-write work",
    "start": "2929110",
    "end": "2937560"
  },
  {
    "text": "tape here store pointers\nto configuration or some sort of counter? No, they store the\nactual configuration.",
    "start": "2937560",
    "end": "2944670"
  },
  {
    "text": "The configuration for M is-- just think about what it is.",
    "start": "2944670",
    "end": "2950050"
  },
  {
    "text": "It's a log space size object. It's a tape for\nM. It's a location",
    "start": "2950050",
    "end": "2955830"
  },
  {
    "text": "of its heads and its state. So you could kind of write down\nthat stuff right over here,",
    "start": "2955830",
    "end": "2962270"
  },
  {
    "text": "on the left side of this-- this left slot. And on the right\nslot, you're going to write another\nconfiguration for M on w.",
    "start": "2962270",
    "end": "2969280"
  },
  {
    "text": " And you're going to just put\nthe edges in accordingly.",
    "start": "2969280",
    "end": "2976106"
  },
  {
    "text": " OK, so somebody-- did that help?",
    "start": "2976106",
    "end": "2981700"
  },
  {
    "text": "Somebody, again, is asking, why\nis the configuration only log space? It's just a tape. It's a log space tape.",
    "start": "2981700",
    "end": "2989260"
  },
  {
    "text": "That's the main thing in the\nconfiguration of the tape. On the read-write\nwork tape, do we only",
    "start": "2989260",
    "end": "2996365"
  },
  {
    "text": "write two\nconfigurations at once? Yeah. We're just writing\ndown a candidate edge that we're going to output\nonto the output tape.",
    "start": "2996365",
    "end": "3003100"
  },
  {
    "text": "So that's why we have\ntwo configurations. I want to know, can I get\nfrom this configuration to that configuration?",
    "start": "3003100",
    "end": "3008110"
  },
  {
    "text": "If yes, I print it out,\nprint out that pair. That's an edge in\nmy configuration",
    "start": "3008110",
    "end": "3014650"
  },
  {
    "text": "graph, which is what I'm\nsupposed to be outputting here. Can there be multiple--",
    "start": "3014650",
    "end": "3022300"
  },
  {
    "text": "OK, why don't we move on? Again, direct\nquestions to our TAs,",
    "start": "3022300",
    "end": "3027790"
  },
  {
    "text": "who would be more than\nhappy to help you. And we will-- let\nme just quickly",
    "start": "3027790",
    "end": "3034480"
  },
  {
    "text": "give-- we're running a\nlittle tight here time-wise. But let's just see.",
    "start": "3034480",
    "end": "3040210"
  },
  {
    "text": "Here's an example of showing\nsome other problem is NL complete. You have a homework\nproblem on that.",
    "start": "3040210",
    "end": "3045700"
  },
  {
    "text": "So I thought I wanted\nto give you an example. Maybe we can just defer\nthis to the recitation. So maybe we'll try to do this\na little quickly to save us",
    "start": "3045700",
    "end": "3054319"
  },
  {
    "text": "on time. But the 2SAT problem, which\nis just like the 3SAT problem,",
    "start": "3054320",
    "end": "3059650"
  },
  {
    "text": "except with two\nliterals per clause-- curiously, the complement\nof that problem,",
    "start": "3059650",
    "end": "3065540"
  },
  {
    "text": "so the unsatisfiable\nformulas, that",
    "start": "3065540",
    "end": "3070750"
  },
  {
    "text": "form an NL-complete language. And so first of all, you\nhave to show it's in NL.",
    "start": "3070750",
    "end": "3077110"
  },
  {
    "text": "We're not going to do that. It's a nice exercise. It's not totally trivial to do.",
    "start": "3077110",
    "end": "3082990"
  },
  {
    "text": "But you might want to try that.",
    "start": "3082990",
    "end": "3088820"
  },
  {
    "text": "We're going to show that PATH\nis reducible to the complement of 2SAT.",
    "start": "3088820",
    "end": "3095170"
  },
  {
    "text": "We've got to give a reduction\nthat converts graphs to formulas, where there is a\nPATH, now, when the formula is",
    "start": "3095170",
    "end": "3103059"
  },
  {
    "text": "unsatisfied. And what's going to\nhappen is the PATH",
    "start": "3103060",
    "end": "3111160"
  },
  {
    "text": "is going to correspond to\na sequence of implications",
    "start": "3111160",
    "end": "3116740"
  },
  {
    "text": "in the formula, which\nyields a contradiction and forces it to be unsatisfied.",
    "start": "3116740",
    "end": "3124790"
  },
  {
    "text": "Again, this is going\nto come a little fast. And then maybe we can discuss it\nover the break, which is next.",
    "start": "3124790",
    "end": "3131420"
  },
  {
    "text": "So every node in G is\ngoing to have associated",
    "start": "3131420",
    "end": "3136520"
  },
  {
    "text": "variable in the formula. So there's a variable for\nevery one of the nodes.",
    "start": "3136520",
    "end": "3142250"
  },
  {
    "text": "For every edge,\nthere's going to be a clause of implication\nconnecting those two",
    "start": "3142250",
    "end": "3148130"
  },
  {
    "text": "associated nodes. So if there's an\nedge from u to v, then there's going to be an\nimplication in the formula that",
    "start": "3148130",
    "end": "3155000"
  },
  {
    "text": "says, if xu is true,\nthen xv is true.",
    "start": "3155000",
    "end": "3160190"
  },
  {
    "text": "And note that that's equivalent\nto the more conventional way [INAUDIBLE] xu complement or xv.",
    "start": "3160190",
    "end": "3168750"
  },
  {
    "text": "These are logically equivalent. So I'm not cheating you here in\nterms of being a 2SAT problem.",
    "start": "3168750",
    "end": "3175170"
  },
  {
    "text": "They really just look like this. And lastly, I'm going to\nput two additional clauses.",
    "start": "3175170",
    "end": "3182049"
  },
  {
    "text": "It's [INAUDIBLE] x for\nthe start variable-- from the start node, s--",
    "start": "3182050",
    "end": "3188640"
  },
  {
    "text": "here, s. I want to force\nthat one to be true. So it's x-- since I want to\nhave exactly two per clause,",
    "start": "3188640",
    "end": "3196319"
  },
  {
    "text": "that's xs or xs. So that forces x-- that variable true.",
    "start": "3196320",
    "end": "3203760"
  },
  {
    "text": "And lastly, if t is true,\nthat's going to force the--",
    "start": "3203760",
    "end": "3211620"
  },
  {
    "text": "if xt is true, that's going\nto force xs to be false. ",
    "start": "3211620",
    "end": "3220119"
  },
  {
    "text": "So now, if there's actually\na path in the graph that goes from s to t,\nthere's going to be",
    "start": "3220120",
    "end": "3227150"
  },
  {
    "text": "a sequence of implications,\nstarting now with s being true, forcing other things\nbeing true, including",
    "start": "3227150",
    "end": "3233750"
  },
  {
    "text": "forcing t to be true, which\nthen forces s to be false. And that's our contradiction,\nwhich shows that the formula",
    "start": "3233750",
    "end": "3240920"
  },
  {
    "text": "cannot be satisfied.  So now, you have to\nprove that this works.",
    "start": "3240920",
    "end": "3248860"
  },
  {
    "text": "As I said, for the forward\ndirection, if there is a path, you follow the implications\nto get a contradiction.",
    "start": "3248860",
    "end": "3254880"
  },
  {
    "text": "For the reverse-- let\nme not spend time here. I'll leave this to you\nto think about offline.",
    "start": "3254880",
    "end": "3262470"
  },
  {
    "text": "But if there is\nno path, there is a way of assigning the\nvariables to true and false",
    "start": "3262470",
    "end": "3269010"
  },
  {
    "text": "to make a satisfying\nassignment to the formula. So that gives the\nother direction, OK?",
    "start": "3269010",
    "end": "3275810"
  },
  {
    "text": " And you can show it's\ncomputable in log space.",
    "start": "3275810",
    "end": "3281250"
  },
  {
    "text": "That's very simple, because\na very simple transformation there, OK?",
    "start": "3281250",
    "end": "3286410"
  },
  {
    "text": "So I think we're going\nto move on to the break. ",
    "start": "3286410",
    "end": "3293390"
  },
  {
    "start": "3287000",
    "end": "3447000"
  },
  {
    "text": "And I'm happy to take questions\nat this point about this.",
    "start": "3293390",
    "end": "3299174"
  },
  {
    "text": " Does the configuration, going\nback, include the input?",
    "start": "3299175",
    "end": "3305740"
  },
  {
    "text": "No. The configuration does not-- as I said, the\nconfiguration for M on w",
    "start": "3305740",
    "end": "3311320"
  },
  {
    "text": "is the state, the head\npositions, and the work tape",
    "start": "3311320",
    "end": "3317700"
  },
  {
    "text": "contents, not the input tape,\nbecause then you would be-- ",
    "start": "3317700",
    "end": "3323630"
  },
  {
    "text": "it's not there for a reason. The input is huge.  But you don't need\nthe input there,",
    "start": "3323630",
    "end": "3330047"
  },
  {
    "text": "because the input is going\nto be constant for everybody. Everybody can look at that\ninput, which is a fixed, sort",
    "start": "3330047",
    "end": "3335230"
  },
  {
    "text": "of external thing.  Somebody's asking me, are\nthere NP-complete problems in--",
    "start": "3335230",
    "end": "3345940"
  },
  {
    "text": "there are definitely\nNP-complete [INAUDIBLE].. I don't know-- there are some\nproblems in number theory where",
    "start": "3345940",
    "end": "3357740"
  },
  {
    "text": "it's-- like factoring, where we\ndon't know the status, somewhere between P\nand NP, formulated",
    "start": "3357740",
    "end": "3365300"
  },
  {
    "text": "as a language, of course. But there are\nproblems in solving",
    "start": "3365300",
    "end": "3370580"
  },
  {
    "text": "certain kinds of equations,\nlow-degree equations,",
    "start": "3370580",
    "end": "3377670"
  },
  {
    "text": "that I don't remember now\nif [INAUDIBLE] actually known to be NP complete.",
    "start": "3377670",
    "end": "3385050"
  },
  {
    "text": "Now, you asked about NL\ncomplete [INAUDIBLE].. I don't know if there are\nNL-complete number theory problems.",
    "start": "3385050",
    "end": "3391700"
  },
  {
    "text": "Oh, good question. Somebody's asking\nme, does NL also have an alternative\ndefinition using",
    "start": "3391700",
    "end": "3397280"
  },
  {
    "text": "certificates or witnesses? Yeah. Yes, sort of.",
    "start": "3397280",
    "end": "3404300"
  },
  {
    "start": "3404300",
    "end": "3411530"
  },
  {
    "text": "For NL, you can make a\ncertificate, which is, again, polynomial size certificate.",
    "start": "3411530",
    "end": "3417170"
  },
  {
    "text": "But it has to be--\nyou're only allowed to read it with a one-way head.",
    "start": "3417170",
    "end": "3424950"
  },
  {
    "text": "So it's like a\none-way certificate.",
    "start": "3424950",
    "end": "3430589"
  },
  {
    "text": "So it has to be-- you can only\nprocess it in a certain way. That's a nice exercise,\nactually, itself.",
    "start": "3430590",
    "end": "3436099"
  },
  {
    "text": "But anyway, let us-- we are now done.",
    "start": "3436100",
    "end": "3444230"
  },
  {
    "text": "And we're going to move back. We're going to continue. So everybody return. ",
    "start": "3444230",
    "end": "3451340"
  },
  {
    "text": "This is what's\nnext on the agenda,",
    "start": "3451340",
    "end": "3457770"
  },
  {
    "text": "proving that NL equals coNL. This is a hard proof. ",
    "start": "3457770",
    "end": "3464540"
  },
  {
    "text": "I'm going to try to break\nit down as much as I can. And let's hope you get--",
    "start": "3464540",
    "end": "3471350"
  },
  {
    "text": " I hope you get it. I'll try to be as\nhelpful as I can.",
    "start": "3471350",
    "end": "3478460"
  },
  {
    "text": "OK. But if you're finding it\ntough, you won't be alone.",
    "start": "3478460",
    "end": "3484640"
  },
  {
    "text": "So first of all,\nwe're going to show--",
    "start": "3484640",
    "end": "3491234"
  },
  {
    "text": "the way we're\ngoing to solve this is by showing that\nthe complement of PATH is solvable in NL, because\nthe complement of PATH is--",
    "start": "3491235",
    "end": "3501190"
  },
  {
    "text": "just as PATH is complete\nfor NL, the complement is complete for coNL.",
    "start": "3501190",
    "end": "3507610"
  },
  {
    "text": "And so by doing\nthat problem in NL, we're going to reduce\nall of-- all of coNL",
    "start": "3507610",
    "end": "3514390"
  },
  {
    "text": "will be reducible\nto problems in NL. And so therefore,\nwe'll be in NL. coNL",
    "start": "3514390",
    "end": "3519640"
  },
  {
    "text": "will be then inside NL. And then NL is going\nto be equal to coNL.",
    "start": "3519640",
    "end": "3524980"
  },
  {
    "text": "If that sequence of logical\nconnections, is not clear.",
    "start": "3524980",
    "end": "3530950"
  },
  {
    "text": "Don't worry.  The point is that we want\n[INAUDIBLE] go back and figure",
    "start": "3530950",
    "end": "3538280"
  },
  {
    "text": "out why that's enough later. But what this means\nis we want to give a nondeterministic\nmachine, which",
    "start": "3538280",
    "end": "3545869"
  },
  {
    "text": "will accept when there\nis no path from s to t.",
    "start": "3545870",
    "end": "3552830"
  },
  {
    "text": "OK?  And please don't\nsay, why don't we",
    "start": "3552830",
    "end": "3558010"
  },
  {
    "text": "just take the machine for\nPATH and flip the answer? You can't do that with a\nnondeterministic machine.",
    "start": "3558010",
    "end": "3564640"
  },
  {
    "text": "So you better-- if you're\nthinking that that's allowed, go back and review\nnondeterminism.",
    "start": "3564640",
    "end": "3570950"
  },
  {
    "text": "So you want to make a\nnondeterministic machine, which is going to accept\nwhen there's no path. So some branch is going to\nmake a sequence of guesses.",
    "start": "3570950",
    "end": "3578109"
  },
  {
    "text": "And it has to be sure\nthat there's no path. And then it's going to be-- and then it can accept\nwhen there's no path.",
    "start": "3578110",
    "end": "3584980"
  },
  {
    "text": "Now, if you can find a way\nof like making a separator, something that cuts the graph\nin half and separates s from t,",
    "start": "3584980",
    "end": "3591190"
  },
  {
    "text": "then you would be good. The only problem is there's\nno obvious way of doing that,",
    "start": "3591190",
    "end": "3599290"
  },
  {
    "text": "because those kind\nof separators, even if they were\n[INAUDIBLE] probably too big to write down in log space.",
    "start": "3599290",
    "end": "3607720"
  },
  {
    "text": "So I'm going to give you\na completely different way of doing it. And I'm going to make-- this is\na little different presentation",
    "start": "3607720",
    "end": "3618470"
  },
  {
    "text": "than what's in the book. I think hopefully, this is a\nlittle longer, and therefore, a little clearer.",
    "start": "3618470",
    "end": "3625780"
  },
  {
    "text": "We'll see. So first of all,\nI'm going to define a notion of a nondeterministic\nmachine computing a function.",
    "start": "3625780",
    "end": "3632480"
  },
  {
    "text": "And that's a simple idea. What you want is, on\nthe different branches--",
    "start": "3632480",
    "end": "3638240"
  },
  {
    "text": "so you have some function,\nf, which has, for every w, there's an output, f of w.",
    "start": "3638240",
    "end": "3644710"
  },
  {
    "text": " And the nondeterministic\nmachine can operate that on all\nof its branches,",
    "start": "3644710",
    "end": "3654660"
  },
  {
    "text": "it's allowed to either give f of\nw or say reject, meaning punt,",
    "start": "3654660",
    "end": "3661079"
  },
  {
    "text": "or say, I don't know. So every branch has to\ngive the right answer.",
    "start": "3661080",
    "end": "3667770"
  },
  {
    "text": "So all the branches that\ngive an answer have to agree, because there's only\none right answer. All the branches\nthat give an answer",
    "start": "3667770",
    "end": "3673800"
  },
  {
    "text": "have to give the right answer,\nor they can say, I don't know.",
    "start": "3673800",
    "end": "3680300"
  },
  {
    "text": "The only thing is you have\nto also say that at least one of the branches actually\ngives an answer.",
    "start": "3680300",
    "end": "3686880"
  },
  {
    "text": "So somebody cannot reject. Somebody cannot\nsay, I don't know. ",
    "start": "3686880",
    "end": "3693820"
  },
  {
    "text": "So at least one of the\nbranches gives an answer and-- gives the answer.",
    "start": "3693820",
    "end": "3698920"
  },
  {
    "text": "And all the other branches\ncan either give the answer, or they can say--",
    "start": "3698920",
    "end": "3704890"
  },
  {
    "text": "they can just reject. But there's no\nnotion of accepting. There's just a notion of this\nnondeterministic machine,",
    "start": "3704890",
    "end": "3712869"
  },
  {
    "text": "on some branches,\ngiving the output value, and other branches just\npunting and saying reject.",
    "start": "3712870",
    "end": "3719528"
  },
  {
    "text": "Maybe reject is the wrong word. I could just say punt. ",
    "start": "3719528",
    "end": "3725320"
  },
  {
    "text": "All right. So we're going to be talking\nabout functions that you can compute with\nnondeterministic machines,",
    "start": "3725320",
    "end": "3733960"
  },
  {
    "text": "with NL machines in particular.",
    "start": "3733960",
    "end": "3739099"
  },
  {
    "text": "All right? So we're going to look at\nthis path function now.",
    "start": "3739100",
    "end": "3744670"
  },
  {
    "text": "Now, this is not exactly the\nsame as the PATH language. This is a function here,\nwritten with lowercase.",
    "start": "3744670",
    "end": "3750550"
  },
  {
    "text": "So given a graph,\ns and t, I'm going to say yes if there is a path\nand no if there's no path.",
    "start": "3750550",
    "end": "3757515"
  },
  {
    "text": "And this is a\nfunction now, which is going to output yes\nor no, not a language.",
    "start": "3757515",
    "end": "3764338"
  },
  {
    "text": "This is a function. It's very closely related. I understand. So if you can\nsolve the function,",
    "start": "3764338",
    "end": "3769500"
  },
  {
    "text": "you can do the language. But what we're going to\ngive is a NL machine,",
    "start": "3769500",
    "end": "3775980"
  },
  {
    "text": "a nondeterministic\nmachine, which is going to compute this function. ",
    "start": "3775980",
    "end": "3781280"
  },
  {
    "text": "And therefore, you can use\nthat to do the PATH language. ",
    "start": "3781280",
    "end": "3787390"
  },
  {
    "text": "Two important things for us\nis, if G is some graph, well, here's the starting node, s.",
    "start": "3787390",
    "end": "3794410"
  },
  {
    "text": "R is all of the nodes\nthat you can reach from s. This is some\ncollection of nodes.",
    "start": "3794410",
    "end": "3801700"
  },
  {
    "text": "And c, which stands\nfor count, is the number of reachable nodes.",
    "start": "3801700",
    "end": "3807030"
  },
  {
    "text": "So I've written that\ndown here more-- if you like it more formally. R is the number--",
    "start": "3807030",
    "end": "3812880"
  },
  {
    "text": "is the collection of\nnodes for which there's a path from s to the node.",
    "start": "3812880",
    "end": "3818859"
  },
  {
    "text": "And c is the size of R. So you\nhave to understand these two,",
    "start": "3818860",
    "end": "3824058"
  },
  {
    "text": "because we're going to\nbe playing with this for the next three slides. ",
    "start": "3824058",
    "end": "3831510"
  },
  {
    "text": "OK. Now, first of all, this is kind\nof a little bit of an exercise theorem. But it's still going to be\na useful fact that we're",
    "start": "3831510",
    "end": "3838225"
  },
  {
    "text": "going to end up needing later. But it's also a\nlittle bit of just to test your understanding.",
    "start": "3838225",
    "end": "3845750"
  },
  {
    "text": "Suppose there's some\nNL machine which computes this path function.",
    "start": "3845750",
    "end": "3851745"
  },
  {
    "text": "So on the different branches\nof the nondeterminism,",
    "start": "3851746",
    "end": "3857160"
  },
  {
    "text": "given a graph, G,\ns, and t, there are going to be some branches\nwhich may output yes,",
    "start": "3857160",
    "end": "3864120"
  },
  {
    "text": "or some branches\nthat may output no. And other branches\nmight say, I don't know. But the machine always has to\ngive the right answer if it's",
    "start": "3864120",
    "end": "3870528"
  },
  {
    "text": "going to give any answer. So all branches either have\nto say yes, or all branches--",
    "start": "3870528",
    "end": "3875740"
  },
  {
    "text": "all branches have\nto say yes or punt, or all branches have\nto say no or punt,",
    "start": "3875740",
    "end": "3882809"
  },
  {
    "text": "because one of those answers is\ngoing to be the right answer. So suppose I have a way\nof computing path by an NL",
    "start": "3882810",
    "end": "3891420"
  },
  {
    "text": "machine. Then can I also compute the--",
    "start": "3891420",
    "end": "3896440"
  },
  {
    "text": "can I make some other\nNL machine which computes the count, the\nnumber of nodes reachable?",
    "start": "3896440",
    "end": "3903680"
  },
  {
    "text": "So if I can test if\na node is reachable, can I figure out how\nmany nodes are reachable?",
    "start": "3903680",
    "end": "3909890"
  },
  {
    "text": "This is supposed to be easy. This is kind of a little\nbit of a practice.",
    "start": "3909890",
    "end": "3915570"
  },
  {
    "text": "So if I can figure out\nif nodes are reachable, yes or no, then I\ncan say, figure out how many nodes are reachable.",
    "start": "3915570",
    "end": "3921440"
  },
  {
    "text": "You just go through\nthem one by one, testing if they're reachable,\nand count the ones that are.",
    "start": "3921440",
    "end": "3928080"
  },
  {
    "text": "That's all I have in mind. So start with a counter\nthat's set to 0 initially.",
    "start": "3928080",
    "end": "3933810"
  },
  {
    "text": "And go through each of\nthe nodes of G one by one. And I use my NL machine\nthat computes path.",
    "start": "3933810",
    "end": "3942620"
  },
  {
    "text": "That's what I mean by this part. So I test it. If the NL machine says\nyes, there is a path,",
    "start": "3942620",
    "end": "3951470"
  },
  {
    "text": "then I increase the counter. And if it says there's\nno path, then I just",
    "start": "3951470",
    "end": "3957020"
  },
  {
    "text": "continue without\nincreasing the counter. Now, when I'm\nrunning my NL machine",
    "start": "3957020",
    "end": "3962619"
  },
  {
    "text": "to compute this function,\nthat NL machine might punt, might reject sometimes\non some branches.",
    "start": "3962620",
    "end": "3969520"
  },
  {
    "text": "That's OK. I'm also allowed. I'm also an NL machine. I'm computing a value.",
    "start": "3969520",
    "end": "3976940"
  },
  {
    "text": "And I also might punt\non some branches. ",
    "start": "3976940",
    "end": "3983200"
  },
  {
    "text": "So at the end, I'm going\nto output that count, OK? So what I'm going to prove\nnext is the converse of this.",
    "start": "3983200",
    "end": "3991700"
  },
  {
    "text": "And that's-- and that's\nthe magical hard part, that if I can compute the\ncount, then I can do the test",
    "start": "3991700",
    "end": "3999680"
  },
  {
    "text": "of whether individual nodes are\nconnected, have a path from s.",
    "start": "3999680",
    "end": "4006490"
  },
  {
    "text": " OK, so let's just see.",
    "start": "4006490",
    "end": "4012140"
  },
  {
    "text": " Somebody is asking if\nnondeterministic machines--",
    "start": "4012140",
    "end": "4021180"
  },
  {
    "text": "so like M is not\nallowed to loop? No. If a machine, if any\none of these machines,",
    "start": "4021180",
    "end": "4026520"
  },
  {
    "text": "like an NL machine, loops,\nit's going to be going forever. That's not allowed. So no looping.",
    "start": "4026520",
    "end": "4034160"
  },
  {
    "text": "I'm not sure why that's\nrelevant, but no looping.",
    "start": "4034160",
    "end": "4039468"
  },
  {
    "text": "But what I'm more\nworried is that you understand this theorem here.",
    "start": "4039468",
    "end": "4044593"
  },
  {
    "text": "I think we have a\ncheck-in coming. Let's see. ",
    "start": "4044593",
    "end": "4049630"
  },
  {
    "text": "OK. This might be helpful.  So consider the statement\nthat PATH complement is NL.",
    "start": "4049630",
    "end": "4058010"
  },
  {
    "text": "That's what we're\ntrying to prove, and also that some NL machine\ncan compute the path function.",
    "start": "4058010",
    "end": "4064845"
  },
  {
    "start": "4064845",
    "end": "4070770"
  },
  {
    "text": "These are going to\nbe related facts. Which one can we prove\nfrom the other easily?",
    "start": "4070770",
    "end": "4079047"
  },
  {
    "text": "I mean, they're both\ngoing to be true. So in some sense, it's trivial. But I want to know,\nwhich one can we",
    "start": "4079047",
    "end": "4084460"
  },
  {
    "text": "prove kind of immediately\nwithout doing much work? That I can solve this\nPATH problem in NL,",
    "start": "4084460",
    "end": "4091510"
  },
  {
    "text": "the complement of the\nPATH problem in NL, or that I can compute\nthe path function in NL?",
    "start": "4091510",
    "end": "4096640"
  },
  {
    "text": "So what do you think? OK, almost done here?",
    "start": "4096640",
    "end": "4104589"
  },
  {
    "text": "Yeah. Ending. ",
    "start": "4104590",
    "end": "4112000"
  },
  {
    "text": "You guys didn't do well. That's OK. Actually, the right answer is c.",
    "start": "4112000",
    "end": "4119890"
  },
  {
    "text": "Most of you got that if I can\nsolve the path function, so the yes-no value, I can use that\nnow to solve both PATH and PATH",
    "start": "4119890",
    "end": "4128740"
  },
  {
    "text": "complement. That seems more clear cut.",
    "start": "4128740",
    "end": "4134500"
  },
  {
    "text": "But suppose I can solve the\nPATH complement problem in NL. And I also know I can solve\nthe PATH problem in NL.",
    "start": "4134500",
    "end": "4142270"
  },
  {
    "text": "That, we've already shown. So knowing both of those, if\nI'm given a G, s, and t, what",
    "start": "4142270",
    "end": "4152210"
  },
  {
    "text": "I can do is\nnondeterministically pick which of those two directions.",
    "start": "4152210",
    "end": "4157830"
  },
  {
    "text": "You know, I pick-- I'm going to guess,\nwell, it's in PATH, or it's in the\ncomplement of PATH.",
    "start": "4157830",
    "end": "4163839"
  },
  {
    "text": "So there are two different\nnondeterministic ways to go. One of those is going to\nalways end up rejecting.",
    "start": "4163840",
    "end": "4170917"
  },
  {
    "text": "And so that's going\nto end up punting. The other direction is\ngoing to sometimes end up accepting and sometimes punting.",
    "start": "4170917",
    "end": "4176578"
  },
  {
    "text": "And based upon whether\nwhich side ends up-- one or the other is going\nto have some accept--",
    "start": "4176579",
    "end": "4181784"
  },
  {
    "text": " is going to be accepting. And so the one\nthat's accepting is",
    "start": "4181784",
    "end": "4188609"
  },
  {
    "text": "going to tell me whether\nto answer yes or no. So actually, both\ndirections, both implications",
    "start": "4188609",
    "end": "4195750"
  },
  {
    "text": "follow pretty easily.  OK.",
    "start": "4195750",
    "end": "4201099"
  },
  {
    "text": "Anyway, let's try to show--",
    "start": "4201100",
    "end": "4206200"
  },
  {
    "text": "this is the hard part. And we have five minutes. Let's see how far we can get.",
    "start": "4206200",
    "end": "4213380"
  },
  {
    "text": "So this theorem works by magic. So it kind of blew everybody's\nmind when it first came out.",
    "start": "4213380",
    "end": "4223510"
  },
  {
    "text": "So let's just see. It's really not that hard. But it's sort of-- it's kind of twisted.",
    "start": "4223510",
    "end": "4229055"
  },
  {
    "text": " So suppose some\nmachine can compute",
    "start": "4229055",
    "end": "4235080"
  },
  {
    "text": "c, the count, the\nnumber reachable from s.",
    "start": "4235080",
    "end": "4240790"
  },
  {
    "text": "I'm going to use that to\nsolve path, the path function,",
    "start": "4240790",
    "end": "4245990"
  },
  {
    "text": "to test, yes, I can output\nyes if there is a path",
    "start": "4245990",
    "end": "4251930"
  },
  {
    "text": "or no, there is no\npath, for each node t. So if I know how many\nnodes are reachable,",
    "start": "4251930",
    "end": "4258780"
  },
  {
    "text": "then I can solve now for\nindividual nodes, which is",
    "start": "4258780",
    "end": "4265400"
  },
  {
    "text": "strange that you can do that. Now, I'm not telling\nyou how to compute c.",
    "start": "4265400",
    "end": "4271699"
  },
  {
    "text": "That's for later, which\nI probably won't get to. But just pretend we\ncan somehow figure out",
    "start": "4271700",
    "end": "4278820"
  },
  {
    "text": "what the count is of the\nnumber of reachable nodes, OK?",
    "start": "4278820",
    "end": "4284570"
  },
  {
    "text": "So here is my nondeterministic\nalgorithm for computing path.",
    "start": "4284570",
    "end": "4293349"
  },
  {
    "text": "First, I'm going to compute\nc, or let's say c is given. And now, maybe the\nbest thing to do",
    "start": "4293350",
    "end": "4302730"
  },
  {
    "text": "is to try to give you\nthe idea up front. What we're going to do, since\nwe're a little short on time,",
    "start": "4302730",
    "end": "4309370"
  },
  {
    "text": "what we're going to do\nis, suppose I tell you,",
    "start": "4309370",
    "end": "4315860"
  },
  {
    "text": "there are, in this graph,\n100 nodes reachable from s.",
    "start": "4315860",
    "end": "4321020"
  },
  {
    "text": "So c is 100. There's 100 reachable nodes. Now I want to know--",
    "start": "4321020",
    "end": "4326530"
  },
  {
    "text": "I say, well, I don't really-- that's all very nice. But I'd like to know\nthis particular node, t.",
    "start": "4326530",
    "end": "4332860"
  },
  {
    "text": "Is that reachable from s? Now, I'm a\nnondeterministic machine.",
    "start": "4332860",
    "end": "4339000"
  },
  {
    "text": "Now, if t was\nreachable, then I'd be fine, because\nnondeterministically, I",
    "start": "4339000",
    "end": "4344989"
  },
  {
    "text": "don't even care about the 100. I take, nondeterministically,\non some branch, starting from s,",
    "start": "4344990",
    "end": "4351800"
  },
  {
    "text": "I'm going to hit t. And that branch is\ngoing to say yes. The other branches,\nmaybe they'll punt.",
    "start": "4351800",
    "end": "4358850"
  },
  {
    "text": "But some branch is going\nto get the right answer. The problem is, suppose\nt is not reachable.",
    "start": "4358850",
    "end": "4366250"
  },
  {
    "text": "Then you want some\nbranch to say no. And how could that\nbranch ever say no, unless it's sure that\nt is not reachable?",
    "start": "4366250",
    "end": "4374080"
  },
  {
    "text": "And how can one branch be sure? The idea is this.",
    "start": "4374080",
    "end": "4379270"
  },
  {
    "text": "Suppose I know that there\nare 100 reachable nodes. What I'm going to do\nnondeterministically is I'm",
    "start": "4379270",
    "end": "4386770"
  },
  {
    "text": "going to guess those\n100 nodes, one by one. You can't store them all,\nbecause it could be--",
    "start": "4386770",
    "end": "4392320"
  },
  {
    "text": "100 could be a big number. I'm going to guess\nthem one by one. I'm going to guess them.",
    "start": "4392320",
    "end": "4398190"
  },
  {
    "text": "And every time I\nguess a node, I'm going to prove it's reachable\nby guessing the path that shows it's reachable.",
    "start": "4398190",
    "end": "4404760"
  },
  {
    "text": "So I'm going to guess 100 nodes,\nprove that they're reachable, and then see, was t of\nthose reachable nodes?",
    "start": "4404760",
    "end": "4412280"
  },
  {
    "text": " If it was, well, then\nI would have found it,",
    "start": "4412280",
    "end": "4418210"
  },
  {
    "text": "and I would know to say yes. But if t was not one\nof the 100 reachable nodes, and I know\nthere's only 100--",
    "start": "4418210",
    "end": "4425370"
  },
  {
    "text": "so if t is not one\nof those nodes-- in other words, if I found them\nall, and t wasn't one of them,",
    "start": "4425370",
    "end": "4433010"
  },
  {
    "text": "then I know it's not reachable. And that's how,\nusing the count, I",
    "start": "4433010",
    "end": "4439400"
  },
  {
    "text": "can be sure that certain\nnodes are not reachable, because I just find all the ones\nthat are, prove that they are,",
    "start": "4439400",
    "end": "4446210"
  },
  {
    "text": "check that the count agrees\nwith what I was given, and then say no, t\nis not reachable,",
    "start": "4446210",
    "end": "4451910"
  },
  {
    "text": "if it's not one of\nthose nodes that I've found to be reachable, which\nadds up to my given count.",
    "start": "4451910",
    "end": "4460573"
  },
  {
    "text": "That's the whole idea.  Of course, how do\nyou get the count?",
    "start": "4460573",
    "end": "4466410"
  },
  {
    "text": "Oddly enough, it's\nkind of the same idea repeated over and over again.",
    "start": "4466410",
    "end": "4472110"
  },
  {
    "text": "But I guess we'll have\nto do that next time. So let's just write this down. And we'll kind of use\nit as the beginning",
    "start": "4472110",
    "end": "4478290"
  },
  {
    "text": "of Thursday's lecture. So we're going to go through\neach node u, one by one.",
    "start": "4478290",
    "end": "4483690"
  },
  {
    "text": " Now we're going to\nguess, for each node,",
    "start": "4483690",
    "end": "4489330"
  },
  {
    "text": "whether there's a\npath to it or not. So I'm going to call\nit either p or n.",
    "start": "4489330",
    "end": "4495900"
  },
  {
    "text": "Again, this is now--\nthink about my 100 nodes. I'm going to be\nguessing all 100 nodes. I'm going to\nnondeterministically",
    "start": "4495900",
    "end": "4502170"
  },
  {
    "text": "pick a path from that node\nthat I guess is reachable. So if I guess a node,\nthere is a path.",
    "start": "4502170",
    "end": "4510510"
  },
  {
    "text": "I'm going to confirm there's\na path by nondeterministically picking it. If I don't find\nthat path, I just",
    "start": "4510510",
    "end": "4517139"
  },
  {
    "text": "reject punt on that branch. If that path that\nI found actually",
    "start": "4517140",
    "end": "4524960"
  },
  {
    "text": "led me to t, so u, that\nnode that I'm working on, is currently t, then\nI know to accept.",
    "start": "4524960",
    "end": "4532400"
  },
  {
    "text": "But otherwise, I'm just going\nto count the number of nodes that I find are reachable.",
    "start": "4532400",
    "end": "4540210"
  },
  {
    "text": "If I've guessed that\nu is not reachable, I'm just going to skip it.",
    "start": "4540210",
    "end": "4545540"
  },
  {
    "text": "At the end, I see\nwhether the number of nodes that I\nhave determined are reachable agrees with\nmy original count, c.",
    "start": "4545540",
    "end": "4553789"
  },
  {
    "text": "So does k equal c or not? If it doesn't equal,\nthey're not equal, then I didn't find all\nthe reachable nodes.",
    "start": "4553790",
    "end": "4561469"
  },
  {
    "text": "I didn't guess right. And so I punt. I say, well, bad branch\nof the nondeterminism.",
    "start": "4561470",
    "end": "4568010"
  },
  {
    "text": "I just give up. But some branch of\nthe nondeterminism is going to guess all of\nthe correct nodes which",
    "start": "4568010",
    "end": "4575739"
  },
  {
    "text": "are reachable. And then, if t hadn't been\nfound already to be one of them,",
    "start": "4575740",
    "end": "4582809"
  },
  {
    "text": "at this point, I know\nt is not reachable. And so I can output no.",
    "start": "4582810",
    "end": "4588150"
  },
  {
    "text": "OK? So that's the whole thing.",
    "start": "4588150",
    "end": "4594600"
  },
  {
    "text": "What is m? m is the-- yeah,\ngood question. m is the number of nodes of the graph. I should have said that.",
    "start": "4594600",
    "end": "4599650"
  },
  {
    "text": "So you don't want to go-- you\ndon't want to get into a loop. So you better cut off\nyour picking of a path",
    "start": "4599650",
    "end": "4607710"
  },
  {
    "text": "to some cutoff value. So you're going to\ncut it off at m, which is the number\nof nodes, which",
    "start": "4607710",
    "end": "4613320"
  },
  {
    "text": "is going to be long enough. Actually, we're going to play\nwith that in a bit later, but--",
    "start": "4613320",
    "end": "4618750"
  },
  {
    "text": " OK, let's just see.",
    "start": "4618750",
    "end": "4623900"
  },
  {
    "text": "How do I know I did not\nvisit the same node twice when counting? Because I'm just going\nto go through all",
    "start": "4623900",
    "end": "4629090"
  },
  {
    "text": "of the nodes in some order. Pick any order. The nodes appear in some\norder in the representation",
    "start": "4629090",
    "end": "4638430"
  },
  {
    "text": "of the graph on the input. So any old order-- I'm just going to go\nthrough the nodes in order.",
    "start": "4638430",
    "end": "4644620"
  },
  {
    "text": "Therefore, I'm never going\nto see the same node twice.",
    "start": "4644620",
    "end": "4651180"
  },
  {
    "text": "What does step 4 mean? ",
    "start": "4651180",
    "end": "4661010"
  },
  {
    "text": "So step 4 is--",
    "start": "4661010",
    "end": "4666150"
  },
  {
    "text": "step 4 means, for each\nnode, I'm guessing that that node either\nhas a path to it from s",
    "start": "4666150",
    "end": "4672120"
  },
  {
    "text": "or does not have a\npath to it from s. ",
    "start": "4672120",
    "end": "4677200"
  },
  {
    "text": "So kind of thinking about\nit, the original-- we're out of time. So why don't I--",
    "start": "4677200",
    "end": "4682820"
  },
  {
    "text": "I'm happy to discuss\nthis in the office hours. I'm just going to skip\nover the rest of the slides",
    "start": "4682820",
    "end": "4688360"
  },
  {
    "text": "here and review. We have a missing check-in.",
    "start": "4688360",
    "end": "4693970"
  },
  {
    "start": "4693970",
    "end": "4698980"
  },
  {
    "text": "Let's just-- I want to\nmake sure everybody's got all their check-ins here.",
    "start": "4698980",
    "end": "4705620"
  },
  {
    "text": "So why don't we just-- if we know NL is equal\nto coNL, we also-- we",
    "start": "4705620",
    "end": "4714460"
  },
  {
    "text": "showed 2SAT complement\nis NL complete. It also then follows that\n2SAT itself is NL complete,",
    "start": "4714460",
    "end": "4720850"
  },
  {
    "text": "because NL equals coNL. So I'm going to give\nyou the answer to this just, because I want you\nall to finish this poll.",
    "start": "4720850",
    "end": "4730373"
  },
  {
    "text": "Still, some of you\nare getting it wrong. ",
    "start": "4730373",
    "end": "4736130"
  },
  {
    "text": "OK. So please answer it quick. And then we're going to end.",
    "start": "4736130",
    "end": "4742870"
  },
  {
    "text": "Are we all done? Get your participation\npoints here.",
    "start": "4742870",
    "end": "4747980"
  },
  {
    "text": "Three seconds.  OK, ending.",
    "start": "4747980",
    "end": "4754480"
  },
  {
    "text": "OK, doesn't matter. So here, we ran over.",
    "start": "4754480",
    "end": "4759640"
  },
  {
    "text": "Sorry about that. Quick review. This is what we\ndidn't quite finish. This is part 5.",
    "start": "4759640",
    "end": "4764830"
  },
  {
    "text": "But we'll finish that next time. OK, when showing\nPATH is NL complete, we also need to list the nodes\nfor constructing the graph.",
    "start": "4764830",
    "end": "4772380"
  },
  {
    "text": "The slides only mention-- yeah, I kind of skipped that. But yeah, you can just\nwrite down all the nodes.",
    "start": "4772380",
    "end": "4777773"
  },
  {
    "text": "Again, but that's also going\nto just take log space, as you observed. Yeah, technically, when\nyou're writing down a graph,",
    "start": "4777773",
    "end": "4783240"
  },
  {
    "text": "you write down a\nlist of the nodes, and you write down\na list of the edges. I kind of skipped\nwriting down the nodes. But yeah, it's the same--",
    "start": "4783240",
    "end": "4790050"
  },
  {
    "text": "doesn't matter. So I'm going to say\ngoodbye to you all. Thank you. ",
    "start": "4790050",
    "end": "4806000"
  }
]