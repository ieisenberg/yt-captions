[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6760"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6760",
    "end": "13390"
  },
  {
    "text": "from hundreds of MIT courses\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13390",
    "end": "18570"
  },
  {
    "start": "18570",
    "end": "29770"
  },
  {
    "text": "JOHN GUTTAG: We ended\nthe last lecture looking at greedy algorithms.",
    "start": "29770",
    "end": "35199"
  },
  {
    "text": "Today I want to discuss the\npros and cons of greedy. Oh, I should mention--",
    "start": "35200",
    "end": "40239"
  },
  {
    "text": "in response to popular demand,\nI have put the PowerPoint up, so if you download the ZIP\nfile, you'll find the questions,",
    "start": "40240",
    "end": "48920"
  },
  {
    "text": "including question 1, the\nfirst question, plus the code, plus the PowerPoint.",
    "start": "48920",
    "end": "56090"
  },
  {
    "text": "We actually do read Piazza,\nand sometimes, at least, pay attention. We should pay\nattention all the time.",
    "start": "56090",
    "end": "63710"
  },
  {
    "text": "So what are the pros\nand cons of greedy? The pro-- and it's\na big pro-- is",
    "start": "63710",
    "end": "71160"
  },
  {
    "text": "that it's really easy to\nimplement, as you could see. Also enormously important--\nit's really fast.",
    "start": "71160",
    "end": "78280"
  },
  {
    "text": "We looked at the\ncomplexity last time-- it was m log n-- quite quick.",
    "start": "78280",
    "end": "83729"
  },
  {
    "text": "The downside-- and this can\nbe either a big problem or not a big problem-- is that it doesn't\nactually solve",
    "start": "83730",
    "end": "90840"
  },
  {
    "text": "the problem, in the sense\nthat we've asked ourselves to optimize something.",
    "start": "90840",
    "end": "96460"
  },
  {
    "text": "And we get a solution that\nmay or may not be optimal. Worse-- we don't even\nknow, in this case,",
    "start": "96460",
    "end": "103900"
  },
  {
    "text": "how close to optimal it is. Maybe it's almost optimal, but\nmaybe it's really far away.",
    "start": "103900",
    "end": "110830"
  },
  {
    "text": "And that's a big problem\nwith many greedy algorithms. There are some very\nsophisticated greedy algorithms",
    "start": "110830",
    "end": "118659"
  },
  {
    "text": "we won't be looking at that\ngive you a bound on how good the approximation is, but\nmost of them don't do that.",
    "start": "118660",
    "end": "127009"
  },
  {
    "text": "Last time we looked\nat an alternative to a greedy algorithm\nthat was guaranteed",
    "start": "127010",
    "end": "133310"
  },
  {
    "text": "to find the right solution. It was a brute force algorithm. The basic idea is simple--",
    "start": "133310",
    "end": "139040"
  },
  {
    "text": "that you enumerate all\npossible combinations of items, remove the combination\nwhose total units exceed",
    "start": "139040",
    "end": "145680"
  },
  {
    "text": "the allowable weight, and\nthen choose the winner from those that are remaining.",
    "start": "145680",
    "end": "152400"
  },
  {
    "text": "Now let's talk about\nhow to implement it. And the way I want to\nimplement it is using something called a search tree.",
    "start": "152400",
    "end": "159360"
  },
  {
    "text": "There are lots of different\nways to implement it. In the second half\nof today's lecture, you'll see why I\nhappen to choose",
    "start": "159360",
    "end": "165950"
  },
  {
    "text": "this particular approach. So what is a search tree?",
    "start": "165950",
    "end": "172010"
  },
  {
    "text": "A tree is, basically,\na kind of graph. And we'll hear much more\nabout graphs next week.",
    "start": "172010",
    "end": "180000"
  },
  {
    "text": "But this is a simple form\nwhere you have a root and then children of the root.",
    "start": "180000",
    "end": "186520"
  },
  {
    "text": "In this particular\nform, research C, you have two children. So we start with the root.",
    "start": "186520",
    "end": "192250"
  },
  {
    "text": " And then we look at\nour list of elements",
    "start": "192250",
    "end": "197680"
  },
  {
    "text": "to be considered\nthat we might take, and we look at the first\nelement in that list.",
    "start": "197680",
    "end": "204700"
  },
  {
    "text": "And then we draw a\nleft branch, which shows the consequence of\nchoosing to take that element,",
    "start": "204700",
    "end": "212590"
  },
  {
    "text": "and a right branch, which\nshows the consequences of not taking that element. ",
    "start": "212590",
    "end": "219980"
  },
  {
    "text": "And then we consider\nthe second element, and so on and so forth, until we\nget to the bottom of the tree.",
    "start": "219980",
    "end": "229390"
  },
  {
    "text": "So by convention, the left\nelement will mean we took it, the right direction will\nmean we didn't take it.",
    "start": "229390",
    "end": "234670"
  },
  {
    "text": " And then we apply it recursively\nto the non-leaf children.",
    "start": "234670",
    "end": "242930"
  },
  {
    "text": "The leaf means we\nget to the end, we've considered the last\nelement to be considered. Nothing else to think about.",
    "start": "242930",
    "end": "250129"
  },
  {
    "text": "When we get to the\ncode, we'll see that, in addition to the\ndescription being recursive,",
    "start": "250130",
    "end": "255140"
  },
  {
    "text": "it's convenient to write\nthe code that way, too. And then finally,\nwe'll choose the node",
    "start": "255140",
    "end": "261250"
  },
  {
    "text": "that has the highest value\nthat meets our constraints. So let's look at an example.",
    "start": "261250",
    "end": "266950"
  },
  {
    "text": "My example is I have\nmy backpack that can hold a certain number\nof calories if you will.",
    "start": "266950",
    "end": "273919"
  },
  {
    "text": "And I'm choosing between, to\nkeep it small, a beer, a pizza, and a burger--",
    "start": "273920",
    "end": "279580"
  },
  {
    "text": "three essential food groups. The first thing I explore on\nthe left is take the beer,",
    "start": "279580",
    "end": "287830"
  },
  {
    "text": "and then I have the\npizza and the burger to continue to consider.",
    "start": "287830",
    "end": "293160"
  },
  {
    "text": "I then say, all right,\nlet's take the pizza. Now I have just the burger.",
    "start": "293160",
    "end": "298169"
  },
  {
    "text": "Now I taste the burger. This traversal of this\ngeneration of the tree",
    "start": "298170",
    "end": "304500"
  },
  {
    "text": "is called left-most depth-most. So I go all the way down\nto the bottom of the tree.",
    "start": "304500",
    "end": "311900"
  },
  {
    "text": "I then back up a\nlevel and say, all right, I'm now at the bottom.",
    "start": "311900",
    "end": "317740"
  },
  {
    "text": "Let's go back and\nsee what happens",
    "start": "317740",
    "end": "324130"
  },
  {
    "text": "if I make the other choice\nat the one level up the tree.",
    "start": "324130",
    "end": "329210"
  },
  {
    "text": "So I went up and\nsaid, well, now let's see what happens if I\nmake a different decision,",
    "start": "329210",
    "end": "337000"
  },
  {
    "text": "as in we didn't take the burger. And then I work my way-- this is called backtracking--",
    "start": "337000",
    "end": "343850"
  },
  {
    "text": "up another level. I now say, suppose, I didn't\ntake the piece of pizza.",
    "start": "343850",
    "end": "349500"
  },
  {
    "text": "Now I have the beer\nonly and only the burger to think about, so\non and so forth,",
    "start": "349500",
    "end": "358110"
  },
  {
    "text": "until I've generated\nthe whole tree. You'll notice it will always be\nthe case that the leftmost leaf",
    "start": "358110",
    "end": "364050"
  },
  {
    "text": "of this tree has got all\nthe possible items in it, and the rightmost leaf none.",
    "start": "364050",
    "end": "372080"
  },
  {
    "text": "And then I just check\nwhich of these leaves meets the constraint\nand what are the values.",
    "start": "372080",
    "end": "379180"
  },
  {
    "text": "And if I compute the value\nand the calories in each one,",
    "start": "379180",
    "end": "384430"
  },
  {
    "text": "and if our constraint\nwas 750 calories, then I get to choose\nthe winner, which is--",
    "start": "384430",
    "end": "390505"
  },
  {
    "text": " I guess, it's the\npizza and the burger. Is that right?",
    "start": "390505",
    "end": "395710"
  },
  {
    "text": " The most value under 750.",
    "start": "395710",
    "end": "405810"
  },
  {
    "text": "That's the way I go through. It's quite a\nstraightforward algorithm.",
    "start": "405810",
    "end": "412710"
  },
  {
    "text": "And I don't know why we draw our\ntrees with the root at the top and the leaves at the bottom.",
    "start": "412710",
    "end": "418290"
  },
  {
    "text": "My only conjecture is\ncomputer scientists don't spend enough\ntime outdoors. ",
    "start": "418290",
    "end": "426210"
  },
  {
    "text": "Now let's think of the\ncomputational complexity of this process.",
    "start": "426210",
    "end": "433020"
  },
  {
    "text": "The time is going to be based\non the total number of nodes we generate.",
    "start": "433020",
    "end": "438100"
  },
  {
    "text": "So if we know the number of\nnodes that are in the tree, we then know the complexity\nof the algorithm,",
    "start": "438100",
    "end": "444159"
  },
  {
    "text": "the asymptotic complexity. Well, how many levels\ndo we have in the tree?",
    "start": "444160",
    "end": "451460"
  },
  {
    "text": "Just the number of items, right? Because at each\nlevel of the tree we're deciding to take\nor not to take an item.",
    "start": "451460",
    "end": "459040"
  },
  {
    "text": "And so we can only do that for\nthe number of items we have. So if we go back, for example,\nand we look at the tree--",
    "start": "459040",
    "end": "466840"
  },
  {
    "text": "not that tree, that tree-- and we count the\nnumber of levels,",
    "start": "466840",
    "end": "472590"
  },
  {
    "text": "it's going to be based upon\nthe total number of items. We know that because if you\nlook at, say, the leftmost node",
    "start": "472590",
    "end": "479150"
  },
  {
    "text": "at the bottom, we've made\nthree separate decisions.",
    "start": "479150",
    "end": "484160"
  },
  {
    "text": "So counting the\nroot, it's n plus 1. But we don't care\nabout plus 1 when we're",
    "start": "484160",
    "end": "490940"
  },
  {
    "text": "doing asymptotic complexity. So that tells us how many\nlevels we have in the tree.",
    "start": "490940",
    "end": "499310"
  },
  {
    "text": "The next question we\nneed to ask is, how many nodes are there at each level?",
    "start": "499310",
    "end": "506170"
  },
  {
    "text": "And you can look at this\nand see-- the deeper we go, the more nodes we\nhave at each level.",
    "start": "506170",
    "end": "514589"
  },
  {
    "text": "In fact, if we come\nhere, we can see that the number of\nnodes at level i--",
    "start": "514590",
    "end": "521969"
  },
  {
    "text": "depth i of the\ntree-- is 2 to the i. That makes sense if you\nremember last time we",
    "start": "521970",
    "end": "528840"
  },
  {
    "text": "looked at binary numbers. We're saying we're representing\nour choices as either 0 or 1 for what we take.",
    "start": "528840",
    "end": "535560"
  },
  {
    "text": "If we have n items\nto choose from, then the number of\npossible choices is 2 to the n, the\nsize of the powerset.",
    "start": "535560",
    "end": "543350"
  },
  {
    "text": "So that will tell us the\nnumber of nodes at each level. ",
    "start": "543350",
    "end": "549550"
  },
  {
    "text": "So if there are n items, the\nnumber of nodes in the tree is going to be the sum\nfrom 0 to n of 2 to the i",
    "start": "549550",
    "end": "558509"
  },
  {
    "text": "because we have\nthat many levels. And if you've studied\na little math,",
    "start": "558510",
    "end": "563850"
  },
  {
    "text": "you know that's exactly\n2 to the n plus 1. Or if you do what I do,\nyou look it up in Wikipedia",
    "start": "563850",
    "end": "570980"
  },
  {
    "text": "and you know it's\n2 to the n plus 1. Now, there's an\nobvious optimization.",
    "start": "570980",
    "end": "577209"
  },
  {
    "text": "We don't need to\nexplore the whole tree. If we get to a point where\nthe backpack is overstuffed,",
    "start": "577210",
    "end": "585760"
  },
  {
    "text": "there's no point in saying,\nshould we take this next item? Because we know we can't.",
    "start": "585760",
    "end": "590920"
  },
  {
    "text": "I generated a bunch\nof leaves that were useless because\nthe weight was too high.",
    "start": "590920",
    "end": "597820"
  },
  {
    "text": "So you could always\nabort early and say, oh, no point in generating the\nrest of this part of the tree",
    "start": "597820",
    "end": "605319"
  },
  {
    "text": "because we know everything\nin it will be too heavy. Adding something cannot\nreduce the weight.",
    "start": "605320",
    "end": "613460"
  },
  {
    "text": "It's a nice optimization. It's one you'll see we\nactually do in the code. But it really doesn't\nchange the complexity.",
    "start": "613460",
    "end": "620750"
  },
  {
    "text": "It's not going to change\nthe worst-cost complexity. ",
    "start": "620750",
    "end": "628830"
  },
  {
    "text": "Exponential, as we saw this,\nI think, in Eric's lecture, is a big number. You don't usually\nlike 2 to the n.",
    "start": "628830",
    "end": "636150"
  },
  {
    "text": "Does this mean that brute\nforce is never useful? Well, let's give it a try. ",
    "start": "636150",
    "end": "643675"
  },
  {
    "text": "We'll look at some code.  Here is the implementation.",
    "start": "643675",
    "end": "649770"
  },
  {
    "start": "649770",
    "end": "657850"
  },
  {
    "text": "So it's maxVal,\ntoConsider, and avail. And then we say, if toConsider\nis empty or avail is 0--",
    "start": "657850",
    "end": "668790"
  },
  {
    "text": "avail is an index, we're going\nto go through the list using that to tell us\nwhether or not we still",
    "start": "668790",
    "end": "674580"
  },
  {
    "text": "have an element to consider-- then the result will be the\ntuple 0 and the empty tuple.",
    "start": "674580",
    "end": "682610"
  },
  {
    "text": " We couldn't take anything. This is the base\nof our recursion.",
    "start": "682610",
    "end": "689529"
  },
  {
    "text": "Either there's nothing\nleft to consider or there's no available weight-- the Val, as the\namount of weight,",
    "start": "689530",
    "end": "695630"
  },
  {
    "text": "is 0 or toConsider is empty. Well, if either\nof those are true,",
    "start": "695630",
    "end": "702829"
  },
  {
    "text": "then we ask whether\nto consider * 0, the first element to look at.",
    "start": "702830",
    "end": "708459"
  },
  {
    "text": "Is that cost greater\nthan availability? ",
    "start": "708460",
    "end": "714740"
  },
  {
    "text": "If it is, we don't need to\nexplore the left branch. because it means we can't\nafford to put that thing",
    "start": "714740",
    "end": "721270"
  },
  {
    "text": "in the backpack, the knapsack. There's just no room for it. So we'll explore the\nright branch only.",
    "start": "721270",
    "end": "728529"
  },
  {
    "text": "The result will be whatever the\nmaximum value is of toConsider of the remainder of the list--\nthe list with the first element",
    "start": "728530",
    "end": "737530"
  },
  {
    "text": "sliced off-- and availability unchanged. So it's a recursive\nimplementation, saying,",
    "start": "737530",
    "end": "744480"
  },
  {
    "text": "now we only have to consider\nthe right branch of the tree because we knew we\ncouldn't take this element.",
    "start": "744480",
    "end": "749910"
  },
  {
    "text": "It just weighs too\nmuch, or costs too much, or was too fattening,\nin my case.",
    "start": "749910",
    "end": "756000"
  },
  {
    "text": "Otherwise, we now have to\nconsider both branches.",
    "start": "756000",
    "end": "761210"
  },
  {
    "text": "So we'll set next item to\ntoConsider of 0, the first one, and explore the left branch.",
    "start": "761210",
    "end": "767270"
  },
  {
    "text": " On this branch, there\nare two possibilities",
    "start": "767270",
    "end": "773980"
  },
  {
    "text": "to think about, which I'm\ncalling withVal and withToTake.",
    "start": "773980",
    "end": "781279"
  },
  {
    "text": "So I'm going to call maxVal\nof toConsider of everything except the current element and\npass in an available weight",
    "start": "781280",
    "end": "792310"
  },
  {
    "text": "of avail minus whatever-- well, let me widen this so\nwe can see the whole code.",
    "start": "792310",
    "end": "800010"
  },
  {
    "text": " This is not going to let me\nwiden this window any more.",
    "start": "800010",
    "end": "808040"
  },
  {
    "text": "Shame on it. Let me see if I can\nget rid of the console. ",
    "start": "808040",
    "end": "817060"
  },
  {
    "text": "Well, we'll have\nto do this instead. ",
    "start": "817060",
    "end": "825190"
  },
  {
    "text": "So we're going to call\nmaxVal with everything except the current\nelement and give it",
    "start": "825190",
    "end": "831300"
  },
  {
    "text": "avail minus the cost of that\nnext item of toConsider sub 0.",
    "start": "831300",
    "end": "838200"
  },
  {
    "text": "Because we know that the\navailability, available weight has to have that cost\nsubtracted from it. ",
    "start": "838200",
    "end": "849160"
  },
  {
    "text": "And then we'll add to withVal\nnext item dot getValue.",
    "start": "849160",
    "end": "858410"
  },
  {
    "text": "So that's a value\nif we do take it. Then we'll explore the\nright branch-- what",
    "start": "858410",
    "end": "863950"
  },
  {
    "text": "happens if we don't take it?  And then we'll choose\nthe better branch.",
    "start": "863950",
    "end": "869605"
  },
  {
    "text": " So it's a pretty simple\nrecursive algorithm.",
    "start": "869605",
    "end": "876910"
  },
  {
    "text": "We just go all the\nway to the bottom and make the right\nchoice at the bottom,",
    "start": "876910",
    "end": "882250"
  },
  {
    "text": "and then percolate back up, like\nso many recursive algorithms. ",
    "start": "882250",
    "end": "892680"
  },
  {
    "text": "We have a simple\nprogram to test it. ",
    "start": "892680",
    "end": "902414"
  },
  {
    "text": "I better start a console\nnow if I'm going to run it. ",
    "start": "902414",
    "end": "912190"
  },
  {
    "text": "And we'll testGreedys on foods. Well, we'll testGreedys\nand then we'll testMaxVal.",
    "start": "912190",
    "end": "918790"
  },
  {
    "text": "So I'm building\nthe same thing we did in Monday's\nlecture, the same menu.",
    "start": "918790",
    "end": "923920"
  },
  {
    "text": "And I'll run the\nsame testGreedys we looked at last time. And we'll see whether or not\nwe get something better when",
    "start": "923920",
    "end": "931030"
  },
  {
    "text": "we run the truly optimal one. ",
    "start": "931030",
    "end": "941260"
  },
  {
    "text": "Well, indeed we do. You remember that last\ntime and, fortunately, this time too, the best\nwe did was a value of 318.",
    "start": "941260",
    "end": "952150"
  },
  {
    "text": "But now we see we can\nactually get to 353 if we use the truly optimal algorithm.",
    "start": "952150",
    "end": "960600"
  },
  {
    "text": "So we see it ran pretty\nquickly and actually gave us a better answer than we\ngot from the greedy algorithm.",
    "start": "960600",
    "end": "970420"
  },
  {
    "text": "And it's often the case. If I have time at the\nend, I'll show you an optimization\nprogram you might",
    "start": "970420",
    "end": "976360"
  },
  {
    "text": "want to run that works\nperfectly fine to use this kind of brute\nforce algorithm on.",
    "start": "976360",
    "end": "984310"
  },
  {
    "text": "Let's go back to the PowerPoint. So I'm just going through\nthe code again we just ran.",
    "start": "984310",
    "end": "991560"
  },
  {
    "text": "This was the header we saw-- toConsider, as the\nitems that correspond",
    "start": "991560",
    "end": "997699"
  },
  {
    "text": "to nodes higher up the\ntree, and avail, as I said, the amount of space.",
    "start": "997700",
    "end": "1004619"
  },
  {
    "text": "And again, here's what\nthe body of the code loooked like, I took\nout the comments. ",
    "start": "1004619",
    "end": "1011363"
  },
  {
    "text": "One of the things you might\nthink about in your head when you look at this code is\nputting the comments back in.",
    "start": "1011364",
    "end": "1017190"
  },
  {
    "text": "I always find that for\nme a really good way to understand code that I didn't\nwrite is to try and comment it.",
    "start": "1017190",
    "end": "1024059"
  },
  {
    "text": "And that helps me sort of\nforce myself to think about what is it really doing.",
    "start": "1024060",
    "end": "1029069"
  },
  {
    "text": "So you'll have both versions--\nyou'll have the PowerPoint version without the\ncomments and the actual code",
    "start": "1029069",
    "end": "1035010"
  },
  {
    "text": "with the comments. You can think about\nlooking at this and then looking\nat the real code",
    "start": "1035010",
    "end": "1040709"
  },
  {
    "text": "and making sure that\nyou're understanding jibes. ",
    "start": "1040710",
    "end": "1048000"
  },
  {
    "text": "I should point out that\nthis doesn't actually build the search tree.",
    "start": "1048000",
    "end": "1053510"
  },
  {
    "text": "We've got this local variable\nresult, starting here,",
    "start": "1053510",
    "end": "1062660"
  },
  {
    "text": "that records the best\nsolution found so far.",
    "start": "1062660",
    "end": "1068050"
  },
  {
    "text": "So it's not the picture I drew\nwhere I generate all the nodes and then I inspect them.",
    "start": "1068050",
    "end": "1073090"
  },
  {
    "text": "I just keep track-- as I generate a node, I\nsay, how good is this? Is it better than the\nbest I've found so far?",
    "start": "1073090",
    "end": "1079970"
  },
  {
    "text": "If so, it becomes the new best. And I can do that because\nevery node I generate",
    "start": "1079970",
    "end": "1087000"
  },
  {
    "text": "is, in some sense, a legal\nsolution to the problem.",
    "start": "1087000",
    "end": "1092610"
  },
  {
    "text": "Probably rarely is it the\nfinal optimal solution but it's at least\na legal solution.",
    "start": "1092610",
    "end": "1099029"
  },
  {
    "text": "And so if it's\nbetter than something we saw before, we can\nmake it the new best.",
    "start": "1099030",
    "end": "1105830"
  },
  {
    "text": "This is very common. And this is, in fact, what\nmost people do with it when they use a search tree--",
    "start": "1105830",
    "end": "1111350"
  },
  {
    "text": "they don't actually\nbuild the tree in the pictorial way\nwe've looked at it",
    "start": "1111350",
    "end": "1116660"
  },
  {
    "text": "but play some trick like\nthis of just keeping track of their results. ",
    "start": "1116660",
    "end": "1124610"
  },
  {
    "text": "Any questions about this? ",
    "start": "1124610",
    "end": "1130289"
  },
  {
    "text": "All right. We did just try it on\nexample from lecture 1.",
    "start": "1130290",
    "end": "1137110"
  },
  {
    "text": "And we saw that it worked great. It gave us a better answer. It finished quickly.",
    "start": "1137110",
    "end": "1143320"
  },
  {
    "text": "But we should not take too\nmuch solace from the fact that it finished quickly\nbecause 2 to the eighth",
    "start": "1143320",
    "end": "1150160"
  },
  {
    "text": "is actually a\npretty tiny number. ",
    "start": "1150160",
    "end": "1156160"
  },
  {
    "text": "Almost any algorithm is fine\nwhen I'm working on something this small.",
    "start": "1156160",
    "end": "1161260"
  },
  {
    "text": "Let's look now at what happens\nif we have a bigger menu. ",
    "start": "1161260",
    "end": "1168870"
  },
  {
    "text": "Here is some code\nto do a bigger menu. Since, as you will discover\nif you haven't already,",
    "start": "1168870",
    "end": "1177440"
  },
  {
    "text": "I'm a pretty lazy\nperson, I didn't want to write out a menu with\na 100 items or even 50 items.",
    "start": "1177440",
    "end": "1183570"
  },
  {
    "text": "So I wrote some code\nto generate the menus. And I used randomness\nto do that.",
    "start": "1183570",
    "end": "1190350"
  },
  {
    "text": "This is a Python\nlibrary we'll be using a lot for the\nrest of the semester.",
    "start": "1190350",
    "end": "1197950"
  },
  {
    "text": "It's used any time you want\nto generate things at random",
    "start": "1197950",
    "end": "1204250"
  },
  {
    "text": "and do many other things. We'll come back to it a lot. Here we're just going to\nuse a very small part of it.",
    "start": "1204250",
    "end": "1210940"
  },
  {
    "text": " To build a large menu\nof some numItems--",
    "start": "1210940",
    "end": "1219471"
  },
  {
    "text": "and we're going to\ngive the maximum value and the maximum\ncost for each item.",
    "start": "1219472",
    "end": "1225220"
  },
  {
    "text": "We'll assume the minimum\nis, in this case, 1.",
    "start": "1225220",
    "end": "1230419"
  },
  {
    "text": "Items will start empty. And then for i in\nrange number of items,",
    "start": "1230420",
    "end": "1235630"
  },
  {
    "text": "I'm going to call this function\nrandom dot randint that",
    "start": "1235630",
    "end": "1241690"
  },
  {
    "text": "takes a range of integers from\n1 to, actually in this case,",
    "start": "1241690",
    "end": "1246779"
  },
  {
    "text": "maxVal minus 1, or 1 to\nmaxVal, actually, in this case.",
    "start": "1246780",
    "end": "1252790"
  },
  {
    "text": "And it just chooses\none of them at random. So when you run this, you don't\nknow what it's going to get.",
    "start": "1252790",
    "end": "1259049"
  },
  {
    "text": "Random dot randint might\nreturn 1, it might return 23, it might return 54.",
    "start": "1259050",
    "end": "1264779"
  },
  {
    "text": "The only thing you know\nis it will be an integer.  And then I'm going to build\nmenus ranging from 5 items",
    "start": "1264779",
    "end": "1273980"
  },
  {
    "text": "to 60 items-- ",
    "start": "1273980",
    "end": "1279760"
  },
  {
    "text": "buildLargeMenu, the number\nof items, with maxVal of 90",
    "start": "1279760",
    "end": "1289720"
  },
  {
    "text": "and a maxCost of 250,\npleasure and calories.",
    "start": "1289720",
    "end": "1295250"
  },
  {
    "text": "And then I'm going to test\nmaxVal on each of these menus. ",
    "start": "1295250",
    "end": "1303049"
  },
  {
    "text": "So building menus of\nvarious sizes at random and then just trying to find the\noptimal value for each of them.",
    "start": "1303050",
    "end": "1312220"
  },
  {
    "text": "Let's look at the code.  Let's comment this out, we\ndon't need to run that again.",
    "start": "1312220",
    "end": "1323600"
  },
  {
    "start": "1323600",
    "end": "1330432"
  },
  {
    "text": "So we'll build a\nlarge menu and then we'll try it for a bunch of\nitems and see what we get.",
    "start": "1330432",
    "end": "1336010"
  },
  {
    "start": "1336010",
    "end": "1349440"
  },
  {
    "text": "So it's going along. Trying the menu up to\n30 went pretty quickly.",
    "start": "1349440",
    "end": "1354720"
  },
  {
    "text": "So even 2 to the 30\ndidn't take too long. But you might notice it's kind\nof bogging down, we got 35.",
    "start": "1354720",
    "end": "1361530"
  },
  {
    "text": " I guess, I could ask\nthe question now--",
    "start": "1361530",
    "end": "1368120"
  },
  {
    "text": "it was one of the questions\nI was going to ask as a poll but maybe I won't bother--",
    "start": "1368120",
    "end": "1373660"
  },
  {
    "text": "how much patience do we have? When do you think we'll run\nout of patience and quit? ",
    "start": "1373660",
    "end": "1383860"
  },
  {
    "text": "If you're out of\npatience, raise your hand.  Well, some of you are way\nmore patient than I am.",
    "start": "1383860",
    "end": "1391600"
  },
  {
    "text": "So we're going to quit anyway. ",
    "start": "1391600",
    "end": "1398740"
  },
  {
    "text": "We were trying to do 40. It might have finished 40, 45. I've never waited long\nenough to get to 45.",
    "start": "1398740",
    "end": "1406480"
  },
  {
    "text": "It just is too long. ",
    "start": "1406480",
    "end": "1413100"
  },
  {
    "text": "That raises the\nquestion, is it hopeless? ",
    "start": "1413100",
    "end": "1421500"
  },
  {
    "text": "And in theory, yes. As I mentioned last time, it\nis an inherently exponential",
    "start": "1421500",
    "end": "1426840"
  },
  {
    "text": "problem. The answer is-- in practice, no. Because there's something\ncalled dynamic programming,",
    "start": "1426840",
    "end": "1434919"
  },
  {
    "text": "which was invented by a\nfellow at the RAND Corporation called Richard Bellman,\na rather remarkable",
    "start": "1434920",
    "end": "1442230"
  },
  {
    "text": "mathematician/computer\nscientist. He wrote a whole book\non it, but I'm not sure",
    "start": "1442230",
    "end": "1447720"
  },
  {
    "text": "why because it's not\nthat complicated. ",
    "start": "1447720",
    "end": "1454140"
  },
  {
    "text": "When we talk about\ndynamic programming, it's a kind of a funny\nstory, at least to me.",
    "start": "1454140",
    "end": "1460860"
  },
  {
    "text": "I learned it and I\ndidn't know anything about the history of it. And I've had all sorts\nof theories about why it",
    "start": "1460860",
    "end": "1468180"
  },
  {
    "text": "was called dynamic programming. You know how it is, how people\ntry and fit a theory to data.",
    "start": "1468180",
    "end": "1475260"
  },
  {
    "text": "And then I read a\nhistory book about it, and this was Bellman's\nown description of why he called it\ndynamic programming.",
    "start": "1475260",
    "end": "1483890"
  },
  {
    "text": "And it turned out,\nas you can see, he basically chose a word\nbecause it was the description",
    "start": "1483890",
    "end": "1488960"
  },
  {
    "text": "that didn't mean anything. Because he was doing\nmathematics, and at the time",
    "start": "1488960",
    "end": "1495330"
  },
  {
    "text": "he was being funded by a part\nof the Defense Department that didn't approve\nof mathematics.",
    "start": "1495330",
    "end": "1500790"
  },
  {
    "text": "And he wanted to\nconceal that fact. And indeed at the time, the\nhead of Defense Appropriations",
    "start": "1500790",
    "end": "1508410"
  },
  {
    "text": "in the US Congress didn't\nmuch like mathematics. And he was afraid\nthat he didn't want",
    "start": "1508410",
    "end": "1513780"
  },
  {
    "text": "to have to go and testify and\ntell people he was doing math. So he just invented\nsomething that no one",
    "start": "1513780",
    "end": "1519570"
  },
  {
    "text": "would know what it meant. And years of students\nspent time later trying to figure out what\nit actually did mean.",
    "start": "1519570",
    "end": "1527620"
  },
  {
    "text": "Anyway, what's the basic idea? To understand it I want\nto temporarily abandon",
    "start": "1527620",
    "end": "1534870"
  },
  {
    "text": "the knapsack problem and look\nat a much simpler problem-- Fibonacci numbers.",
    "start": "1534870",
    "end": "1540225"
  },
  {
    "text": " You've seen this already, with\ncute little bunnies, I think,",
    "start": "1540225",
    "end": "1546630"
  },
  {
    "text": "when you saw it. N equals 0, n\nequals 1-- return 1.",
    "start": "1546630",
    "end": "1551980"
  },
  {
    "text": "Otherwise, fib of n minus\n1 plus fib of n minus 2.",
    "start": "1551980",
    "end": "1557220"
  },
  {
    "text": "And as I think you saw\nwhen you first saw it, it takes a long time to run.",
    "start": "1557220",
    "end": "1563970"
  },
  {
    "text": "Fib of 120, for example,\nis a very big number. It's shocking how\nquickly Fibonacci grows.",
    "start": "1563970",
    "end": "1572410"
  },
  {
    "text": "So let's think about\nimplementing it.",
    "start": "1572410",
    "end": "1580890"
  },
  {
    "text": "If we run Fibonacci-- well, maybe we'll just do that. ",
    "start": "1580890",
    "end": "1597030"
  },
  {
    "text": "So here is fib of n,\nlet's just try running it. And again, we'll test\npeople's patience. ",
    "start": "1597030",
    "end": "1614140"
  },
  {
    "text": "We'll see how long\nwe're letting it run. I'm going to try for\ni in the range of 121.",
    "start": "1614140",
    "end": "1619240"
  },
  {
    "text": "We'll print fib of i. ",
    "start": "1619240",
    "end": "1629840"
  },
  {
    "text": "Comes clumping along.  It slows down pretty quickly.",
    "start": "1629840",
    "end": "1636970"
  },
  {
    "text": "And if you look at it,\nit's kind of surprising it's this slow because these\nnumbers aren't that big. ",
    "start": "1636970",
    "end": "1644090"
  },
  {
    "text": "These are not enormous numbers. Fib of 35 is not a huge number. Yet it took a long\ntime to compute.",
    "start": "1644090",
    "end": "1652120"
  },
  {
    "text": "So you have the numbers\ngrowing pretty quickly but the computation, actually,\nseems to be growing faster",
    "start": "1652120",
    "end": "1658150"
  },
  {
    "text": "than the results. We're at 37. ",
    "start": "1658150",
    "end": "1664380"
  },
  {
    "text": "It's going to gets slower and\nslower, even though our numbers are not that big.",
    "start": "1664380",
    "end": "1671650"
  },
  {
    "text": "The question is,\nwhat's going on? Why is it taking so\nlong for Fibonacci",
    "start": "1671650",
    "end": "1677440"
  },
  {
    "text": "to compute these results? Well, let's call it and\nlook at the question.",
    "start": "1677440",
    "end": "1693580"
  },
  {
    "text": "And to do that I want to\nlook at the call tree. This is for Fibonacci\nof 6, which is only 13,",
    "start": "1693580",
    "end": "1703360"
  },
  {
    "text": "which, I think, most\nof us would agree was not a very big number. And let's look\nwhat's going on here.",
    "start": "1703360",
    "end": "1710200"
  },
  {
    "text": " If you look at this,\nwhat in some sense",
    "start": "1710200",
    "end": "1715750"
  },
  {
    "text": "seems really stupid about it? What is it doing that a\nrational person would not want",
    "start": "1715750",
    "end": "1724120"
  },
  {
    "text": "to do if they could avoid it? ",
    "start": "1724120",
    "end": "1732740"
  },
  {
    "text": "It's bad enough to\ndo something once. But to do the same thing\nover and over again",
    "start": "1732740",
    "end": "1737779"
  },
  {
    "text": "is really wasteful. And if we look at this,\nwe'll see, for example,",
    "start": "1737780",
    "end": "1744020"
  },
  {
    "text": "that fib 4 is being\ncomputed here, and fib 4 is being\ncomputed here.",
    "start": "1744020",
    "end": "1751350"
  },
  {
    "text": "Fib 3 is being considered\nhere, and here, and here. ",
    "start": "1751350",
    "end": "1759190"
  },
  {
    "text": "And do you think we'll get\na different answer for fib 3 in one place when we get\nit in the other place?",
    "start": "1759190",
    "end": "1764480"
  },
  {
    "text": "You sure hope not. So you think, well, what\nshould we do about this?",
    "start": "1764480",
    "end": "1773160"
  },
  {
    "text": "How would we go about avoiding\ndoing the same work over and over again?",
    "start": "1773160",
    "end": "1778539"
  },
  {
    "text": "And there's kind of\nan obvious answer, and that answer is at the\nheart of dynamic programming.",
    "start": "1778540",
    "end": "1783600"
  },
  {
    "text": "What's the answer? AUDIENCE: [INAUDIBLE]",
    "start": "1783600",
    "end": "1790040"
  },
  {
    "text": "JOHN GUTTAG: Exactly. And I'm really happy that\nsomeone in the front row answered the question because\nI can throw it that far.",
    "start": "1790040",
    "end": "1797990"
  },
  {
    "text": "You store the answer and then\nlook it up when you need it.",
    "start": "1797990",
    "end": "1803660"
  },
  {
    "text": "Because we know that we can\nlook things up very quickly. ",
    "start": "1803660",
    "end": "1809100"
  },
  {
    "text": "Dictionary, despite what\nEric said in his lecture, almost all the time\nworks in constant time",
    "start": "1809100",
    "end": "1817510"
  },
  {
    "text": "if you make it big enough,\nand it usually is in Python. We'll see later in the\nterm how to do that trick.",
    "start": "1817510",
    "end": "1825279"
  },
  {
    "text": "So you store it and then you'd\nnever have to compute it again.",
    "start": "1825280",
    "end": "1830520"
  },
  {
    "text": "And that's the basic trick\nbehind dynamic programming. And it's something\ncalled memoization,",
    "start": "1830520",
    "end": "1841940"
  },
  {
    "text": "as in you create a memo and\nyou store it in the memo. ",
    "start": "1841940",
    "end": "1848400"
  },
  {
    "text": "So we see this here. Notice that what we're doing\nis trading time for space.",
    "start": "1848400",
    "end": "1856150"
  },
  {
    "text": "It takes some space to store\nthe old results, but negligible",
    "start": "1856150",
    "end": "1865300"
  },
  {
    "text": "related to the time we save. So here's the trick. We're going to create a table\nto record what we've done.",
    "start": "1865300",
    "end": "1873530"
  },
  {
    "text": "And then before\ncomputing fib of x, we'll check if the value\nhas already been computed.",
    "start": "1873530",
    "end": "1880370"
  },
  {
    "text": "If so, we just look\nit up and return it. Otherwise, we'll compute it-- it's the first time-- and\nstore it in the table.",
    "start": "1880370",
    "end": "1887000"
  },
  {
    "text": " Here is a fast implementation\nof Fibonacci that does that.",
    "start": "1887000",
    "end": "1896190"
  },
  {
    "text": "It looks like the\nold one, except it's got an extra argument--",
    "start": "1896190",
    "end": "1901410"
  },
  {
    "text": "memo-- which is a dictionary. The first time we call it,\nthe memo will be empty.",
    "start": "1901410",
    "end": "1907960"
  },
  {
    "text": " It tries to return\nthe value in the memo.",
    "start": "1907960",
    "end": "1917240"
  },
  {
    "text": "If it's not there, an exception\nwill get raised, we know that. And it will branch to\nhere, compute the result,",
    "start": "1917240",
    "end": "1925179"
  },
  {
    "text": "and then store it in\nthe memo and return it.",
    "start": "1925180",
    "end": "1931190"
  },
  {
    "text": "It's the same old\nrecursive thing we did before but with the memo.",
    "start": "1931190",
    "end": "1936920"
  },
  {
    "text": "Notice, by the way, that\nI'm using exceptions not as an error\nhandling mechanism,",
    "start": "1936920",
    "end": "1942350"
  },
  {
    "text": "really, but just as\na flow of control. To me, this is cleaner than\nwriting code that says,",
    "start": "1942350",
    "end": "1949510"
  },
  {
    "text": "if this is in the keys, then\ndo this, otherwise, do that. It's slightly fewer lines of\ncode, and for me, at least,",
    "start": "1949510",
    "end": "1957440"
  },
  {
    "text": "easier to read to use try-except\nfor this sort of thing. ",
    "start": "1957440",
    "end": "1964690"
  },
  {
    "text": "Let's see what happens\nif we run this one. Get rid of the slow fib\nand we'll run fastFib.",
    "start": "1964690",
    "end": "1982810"
  },
  {
    "start": "1982810",
    "end": "1997780"
  },
  {
    "text": "Wow. We're already done with fib 120.",
    "start": "1997780",
    "end": "2005960"
  },
  {
    "text": "Pretty amazing, considering last\ntime we got stuck around 40. ",
    "start": "2005960",
    "end": "2011890"
  },
  {
    "text": "It really works, this\nmemoization trick. An enormous difference.",
    "start": "2011890",
    "end": "2017440"
  },
  {
    "start": "2017440",
    "end": "2027940"
  },
  {
    "text": "When can you use it? It's not that memorization\nis a magic bullet that",
    "start": "2027940",
    "end": "2033010"
  },
  {
    "text": "will solve all problems. ",
    "start": "2033010",
    "end": "2038710"
  },
  {
    "text": "The problems it can solve,\nit can help with, really, is the right thing. And by the way, as we'll see, it\nfinds an optimal solution, not",
    "start": "2038710",
    "end": "2046780"
  },
  {
    "text": "an approximation. Problems have two things\ncalled optimal substructure,",
    "start": "2046780",
    "end": "2053919"
  },
  {
    "text": "overlapping subproblems. What are these mean?",
    "start": "2053920",
    "end": "2059350"
  },
  {
    "text": "We have optimal\nsubstructure when a globally optimal\nsolution can be found by combining optimal\nsolutions to local subproblems.",
    "start": "2059350",
    "end": "2071649"
  },
  {
    "text": "So for example, when\nx is greater than 1 we can solve fib x by solving\nfib x minus 1 and fib x minus 2",
    "start": "2071650",
    "end": "2082899"
  },
  {
    "text": "and adding those\ntwo things together. So there is optimal\nsubstructure--",
    "start": "2082900",
    "end": "2090129"
  },
  {
    "text": "you solve these two smaller\nproblems independently of each other and then combine\nthe solutions in a fast way.",
    "start": "2090130",
    "end": "2098059"
  },
  {
    "start": "2098060",
    "end": "2103750"
  },
  {
    "text": "You also have to have something\ncalled overlapping subproblems.",
    "start": "2103750",
    "end": "2109490"
  },
  {
    "text": "This is why the memo worked. Finding an optimal\nsolution has to involve",
    "start": "2109490",
    "end": "2114570"
  },
  {
    "text": "solving the same\nproblem multiple times. Even if you have\noptimal substructure,",
    "start": "2114570",
    "end": "2121089"
  },
  {
    "text": "if you don't see the same\nproblem more than once-- creating a memo. Well, it'll work, you can\nstill create the memo.",
    "start": "2121090",
    "end": "2128950"
  },
  {
    "text": "You'll just never\nfind anything in it when you look things\nup because you're solving each problem once.",
    "start": "2128950",
    "end": "2134275"
  },
  {
    "text": " So you have to be solving the\nsame problem multiple times",
    "start": "2134275",
    "end": "2141090"
  },
  {
    "text": "and you have to be able to\nsolve it by combining solutions to smaller problems. ",
    "start": "2141090",
    "end": "2148940"
  },
  {
    "text": "Now, we've seen things with\noptimal substructure before. ",
    "start": "2148940",
    "end": "2154920"
  },
  {
    "text": "In some sense, merge\nsort worked that way-- we were combining\nseparate problems.",
    "start": "2154920",
    "end": "2160770"
  },
  {
    "text": "Did merge sort have\noverlapping subproblems? ",
    "start": "2160770",
    "end": "2165930"
  },
  {
    "text": "No, because-- well,\nI guess, it might have if the list had the same\nelement many, many times.",
    "start": "2165930",
    "end": "2173550"
  },
  {
    "text": "But we would expect, mostly not. Because each time we're\nsolving a different problem,",
    "start": "2173550",
    "end": "2179940"
  },
  {
    "text": "because we have different\nlists that we're now sorting and merging. So it has half of it\nbut not the other.",
    "start": "2179940",
    "end": "2187560"
  },
  {
    "text": "Dynamic programming will\nnot help us for sorting, cannot be used to\nimprove merge sort.",
    "start": "2187560",
    "end": "2194620"
  },
  {
    "text": "Oh, well, nothing\nis a silver bullet. ",
    "start": "2194620",
    "end": "2200510"
  },
  {
    "text": "What about the knapsack problem? Does it have these\ntwo properties?",
    "start": "2200510",
    "end": "2206840"
  },
  {
    "text": " We can look at it in\nterms of these pictures.",
    "start": "2206840",
    "end": "2215210"
  },
  {
    "text": "And it's pretty clear that it\ndoes have optimal substructure because we're taking the left\nbranch and the right branch",
    "start": "2215210",
    "end": "2222320"
  },
  {
    "text": "and choosing the winner.  But what about\noverlapping subproblems?",
    "start": "2222320",
    "end": "2230490"
  },
  {
    "text": "Are we ever solving, in this\ncase, the same problem-- ",
    "start": "2230490",
    "end": "2236330"
  },
  {
    "text": "add two nodes? ",
    "start": "2236330",
    "end": "2241480"
  },
  {
    "text": "Well, do any of these\nnodes look identical? ",
    "start": "2241480",
    "end": "2248430"
  },
  {
    "text": "In this case, no. We could write a dynamic\nprogramming solution",
    "start": "2248430",
    "end": "2254250"
  },
  {
    "text": "to the knapsack problem-- and we will-- and run\nit on this example,",
    "start": "2254250",
    "end": "2260170"
  },
  {
    "text": "and we'd get the right answer. We would get zero speedup. Because at each\nnode, if you can see,",
    "start": "2260170",
    "end": "2266960"
  },
  {
    "text": "the problems are different. We have different things in the\nknapsack or different things",
    "start": "2266960",
    "end": "2273310"
  },
  {
    "text": "to consider. Never do we have the same\ncontents and the same things left to decide. ",
    "start": "2273310",
    "end": "2281770"
  },
  {
    "text": "So \"maybe\" was not a bad\nanswer if that was the answer you gave to this question. ",
    "start": "2281770",
    "end": "2288550"
  },
  {
    "text": "But let's look at\na different menu. This menu happens to\nhave two beers in it.",
    "start": "2288550",
    "end": "2295010"
  },
  {
    "text": " Now, if we look at\nwhat happens, do",
    "start": "2295010",
    "end": "2302680"
  },
  {
    "text": "we see two nodes that are\nsolving the same problem? ",
    "start": "2302680",
    "end": "2311790"
  },
  {
    "text": "The answer is what? Yes or no? ",
    "start": "2311790",
    "end": "2323200"
  },
  {
    "text": "I haven't drawn the\nwhole tree here. Well, you'll notice\nthe answer is yes.",
    "start": "2323200",
    "end": "2329440"
  },
  {
    "text": "This node and this node are\nsolving the same problem.",
    "start": "2329440",
    "end": "2336829"
  },
  {
    "text": "Why is it? Well, in this node,\nwe took this beer",
    "start": "2336830",
    "end": "2342130"
  },
  {
    "text": "and still had this\none to consider. But in this node,\nwe took that beer",
    "start": "2342130",
    "end": "2350250"
  },
  {
    "text": "but it doesn't matter\nwhich beer we took. We still have a beer in\nthe knapsack and a burger",
    "start": "2350250",
    "end": "2357750"
  },
  {
    "text": "and a slice to consider. So we got there different ways,\nby choosing different beers,",
    "start": "2357750",
    "end": "2364069"
  },
  {
    "text": "but we're in the same place. So in fact, we\nactually, in this case,",
    "start": "2364070",
    "end": "2370880"
  },
  {
    "text": "do have the same problem\nto solve more than once.",
    "start": "2370880",
    "end": "2377480"
  },
  {
    "text": "Now, here I had two\nthings that were the same.",
    "start": "2377480",
    "end": "2382940"
  },
  {
    "text": "That's not really necessary. Here's another\nvery small example.",
    "start": "2382940",
    "end": "2389430"
  },
  {
    "text": "And the point I want to\nmake here is shown by this.",
    "start": "2389430",
    "end": "2396329"
  },
  {
    "text": "So here I have again\ndrawn a search tree. And I'm showing you this\nbecause, in fact, it's exactly",
    "start": "2396330",
    "end": "2402599"
  },
  {
    "text": "this tree that will be producing\nin our dynamic programming solution to the\nknapsack problem.",
    "start": "2402600",
    "end": "2410040"
  },
  {
    "text": "Each node in the tree starts\nwith what you've taken--",
    "start": "2410040",
    "end": "2416220"
  },
  {
    "text": "initially, nothing,\nthe empty set. What's left, the total value,\nand the remaining calories.",
    "start": "2416220",
    "end": "2422430"
  },
  {
    "text": "There's some redundancy\nhere, by the way. If I know what I've taken, I\ncould already always compute the value and what's left.",
    "start": "2422430",
    "end": "2431309"
  },
  {
    "text": "But this is just so\nit's easier to see. And I've numbered the\nnodes here in the order in which they're get generated.",
    "start": "2431310",
    "end": "2437130"
  },
  {
    "text": " Now, the thing that\nI want you to notice",
    "start": "2437130",
    "end": "2444650"
  },
  {
    "text": "is, when we ask whether we're\nsolving the same problem, we don't actually\ncare what we've taken.",
    "start": "2444650",
    "end": "2456059"
  },
  {
    "text": "We don't even care\nabout the value. All we care is, how much room\nwe have left in the knapsack",
    "start": "2456060",
    "end": "2468680"
  },
  {
    "text": "and which items we\nhave left to consider. ",
    "start": "2468680",
    "end": "2474279"
  },
  {
    "text": "Because what I take next or\nwhat I take remaining really",
    "start": "2474280",
    "end": "2480490"
  },
  {
    "text": "has nothing to do with how\nmuch value I already have because I'm trying to maximize\nthe value that's left,",
    "start": "2480490",
    "end": "2487420"
  },
  {
    "text": "independent of\nprevious things done. Similarly, I don't care why\nI have a 100 calories left.",
    "start": "2487420",
    "end": "2496210"
  },
  {
    "text": "Whether I used it up on beers\nor a burger, doesn't matter. All that matters is that\nI just have 100 left.",
    "start": "2496210",
    "end": "2504570"
  },
  {
    "text": "So we see in a large complicated\nproblem it could easily",
    "start": "2504570",
    "end": "2509910"
  },
  {
    "text": "be a situation where different\nchoices of what to take and what to not take would\nleave you in a situation",
    "start": "2509910",
    "end": "2517619"
  },
  {
    "text": "where you have the same\nnumber of remaining calories. ",
    "start": "2517620",
    "end": "2522670"
  },
  {
    "text": "And therefore you are solving a\nproblem you've already solved. ",
    "start": "2522670",
    "end": "2532220"
  },
  {
    "text": "At each node, we're just\ngiven the remaining weight, maximize the value by choosing\namong the remaining items.",
    "start": "2532220",
    "end": "2539540"
  },
  {
    "text": "That's all that matters.  And so indeed, you will have\noverlapping subproblems.",
    "start": "2539540",
    "end": "2546780"
  },
  {
    "text": " As we see in this tree, for\nthe example we just saw,",
    "start": "2546780",
    "end": "2553690"
  },
  {
    "text": "the box is around a place\nwhere we're actually solving the same problem,\neven though we've",
    "start": "2553690",
    "end": "2559900"
  },
  {
    "text": "made different decisions about\nwhat to take, A versus B. And in fact, we have\ndifferent amounts of value",
    "start": "2559900",
    "end": "2566890"
  },
  {
    "text": "in the knapsack-- 6 versus 7. What matters is we still\nhave C and D to consider",
    "start": "2566890",
    "end": "2573770"
  },
  {
    "text": "and we have two units left. ",
    "start": "2573770",
    "end": "2583930"
  },
  {
    "text": "It's a small and easy step. I'm not going to walk\nyou through the code because it's kind\nof boring to do so.",
    "start": "2583930",
    "end": "2590859"
  },
  {
    "text": "How do you modify the maxVal we\nlooked at before to use a memo?",
    "start": "2590860",
    "end": "2596610"
  },
  {
    "text": "First, you have to add the third\nargument, which is initially going to be set to\nthe empty dictionary.",
    "start": "2596610",
    "end": "2603610"
  },
  {
    "text": "The key of the memo\nwill be a tuple-- the items left to be considered\nand the available weight.",
    "start": "2603610",
    "end": "2612660"
  },
  {
    "text": "Because the items left to\nbe considered are in a list, we can represent the items\nleft to be considered",
    "start": "2612660",
    "end": "2621420"
  },
  {
    "text": "by how long the list is. Because we'll start at\nthe front item and just",
    "start": "2621420",
    "end": "2627710"
  },
  {
    "text": "work our way to the end.  And then the function\nworks, essentially,",
    "start": "2627710",
    "end": "2635040"
  },
  {
    "text": "exactly the same\nway fastFib worked. ",
    "start": "2635040",
    "end": "2643796"
  },
  {
    "text": "I'm not going to run it for\nyou because we're running out of time. You might want to\nrun it yourself",
    "start": "2643796",
    "end": "2650130"
  },
  {
    "text": "because it is kind of fun to\nsee how really fast it is. But more interestingly,\nwe can look at this table.",
    "start": "2650130",
    "end": "2659570"
  },
  {
    "text": "This column is what we would\nget with the original recursive implementation where\nwe didn't use a memo.",
    "start": "2659570",
    "end": "2666320"
  },
  {
    "text": "And it was therefore 2\nto the length of items. And as you can see,\nit gets really big",
    "start": "2666320",
    "end": "2674990"
  },
  {
    "text": "or, as we say at the end, huge. ",
    "start": "2674990",
    "end": "2680769"
  },
  {
    "text": "But the number of\ncalls grows incredibly slowly for the dynamic\nprogramming solution.",
    "start": "2680770",
    "end": "2689200"
  },
  {
    "text": "In the beginning\nit's worth Oh, well. But by the time we get to\nthe last number I wrote,",
    "start": "2689200",
    "end": "2698670"
  },
  {
    "text": "we're looking at 43,000\nversus some really big number I don't know how to pronounce--",
    "start": "2698670",
    "end": "2706210"
  },
  {
    "text": "18 somethings. Incredible improvement\nin performance.",
    "start": "2706210",
    "end": "2714119"
  },
  {
    "text": "And then at the\nend, it's a number we couldn't fit on the\nslide, even in tiny font.",
    "start": "2714120",
    "end": "2721079"
  },
  {
    "text": "And yet, only 703,000 calls. How can this be?",
    "start": "2721080",
    "end": "2727380"
  },
  {
    "text": "We know the problem is\ninherently exponential. Have we overturned the\nlaws of the universe?",
    "start": "2727380",
    "end": "2734050"
  },
  {
    "text": "Is dynamic programming a\nmiracle in the liturgical sense? No.",
    "start": "2734050",
    "end": "2740850"
  },
  {
    "text": "But the thing I want\nyou to carry away is that computational complexity\ncan be a very subtle notion.",
    "start": "2740850",
    "end": "2750190"
  },
  {
    "text": "The running time\nof fastMaxVal is governed by the number\nof distinct pairs",
    "start": "2750190",
    "end": "2755619"
  },
  {
    "text": "that we might be able to\nuse as keys in the memo--",
    "start": "2755620",
    "end": "2760690"
  },
  {
    "text": "toConsider and available. The number of possible values\nof toConsider is small.",
    "start": "2760690",
    "end": "2768430"
  },
  {
    "text": "It's bounded by the\nlength of the items. If I have a 100 items,\nit's 0, 1, 2, up to a 100.",
    "start": "2768430",
    "end": "2776330"
  },
  {
    "text": "The possible values\nof available weight is harder to characterize.",
    "start": "2776330",
    "end": "2782340"
  },
  {
    "text": "But it's bounded by the number\nof distinct sums of weights you can get.",
    "start": "2782340",
    "end": "2788530"
  },
  {
    "text": "If I start with\n750 calories left,",
    "start": "2788530",
    "end": "2793590"
  },
  {
    "text": "what are the possibilities? Well, in fact, in this case,\nmaybe we can take only 750",
    "start": "2793590",
    "end": "2800330"
  },
  {
    "text": "because we're using with units. So it's small. But it's actually smaller\nthan that because it",
    "start": "2800330",
    "end": "2805940"
  },
  {
    "text": "has to do with the\ncombinations of ways I can add up the units I have.",
    "start": "2805940",
    "end": "2812040"
  },
  {
    "text": "I know this is complicated. It's not worth my going through\nthe details in the lectures. It's covered in considerable\ndetail in the assigned reading.",
    "start": "2812040",
    "end": "2821610"
  },
  {
    "text": "Quickly summarizing\nlectures 1 and 2, here's what I want\nyou to take away. Many problems of\npractical importance",
    "start": "2821610",
    "end": "2828330"
  },
  {
    "text": "can be formulated as\noptimization problems. Greedy algorithms often provide\nan adequate though often not",
    "start": "2828330",
    "end": "2836340"
  },
  {
    "text": "optimal solution. Even though finding\nan optimal solution",
    "start": "2836340",
    "end": "2841870"
  },
  {
    "text": "is, in theory,\nexponentially hard, dynamic programming really\noften yields great results.",
    "start": "2841870",
    "end": "2849759"
  },
  {
    "text": "It always gives you a correct\nresult and it's sometimes, in fact, most of the times\ngives it to you very quickly.",
    "start": "2849760",
    "end": "2857890"
  },
  {
    "text": "Finally, in the\nPowerPoint, you'll find an interesting\noptimization problem having to do with whether or\nnot you should roll over problem",
    "start": "2857890",
    "end": "2866000"
  },
  {
    "text": "that grades into a quiz. And it's simply a question\nof solving this optimization",
    "start": "2866000",
    "end": "2871900"
  },
  {
    "text": "problem. ",
    "start": "2871900",
    "end": "2883824"
  }
]