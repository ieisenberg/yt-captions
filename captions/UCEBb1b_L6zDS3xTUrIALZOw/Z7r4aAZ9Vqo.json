[
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5310"
  },
  {
    "text": "Your support will help\nMIT OpenCourseWare continue to offer high quality\neducational resources for free.",
    "start": "5310",
    "end": "11610"
  },
  {
    "text": "To make a donation or to\nview additional materials from hundreds of MIT courses,\nvisit MIT OpenCourseWare",
    "start": "11610",
    "end": "18140"
  },
  {
    "text": "at ocw.mit.edu.  PROFESSOR: Hey, everybody.",
    "start": "18140",
    "end": "24910"
  },
  {
    "text": "It's my pleasure\nonce again to welcome TB Schardl, who is the author\nof your taper compiler,",
    "start": "24910",
    "end": "35590"
  },
  {
    "text": "to talk about the\nCilk runtime system.",
    "start": "35590",
    "end": "41072"
  },
  {
    "text": "TAO SCHARDL: Thanks, Charles. Can anyone hear me in\nthe back, seem good?",
    "start": "41072",
    "end": "46110"
  },
  {
    "text": "OK. Thanks for the introduction. Today I'll be talking about\nthe Cilk runtime system.",
    "start": "46110",
    "end": "52448"
  },
  {
    "text": "This is pretty exciting for me. This is a lecture that's\nnot about compilers. I get to talk about something\na little different for once.",
    "start": "52448",
    "end": "60410"
  },
  {
    "text": "It should be a fun lecture. Recently, as I\nunderstand it, you've been looking at\nstorage allocation,",
    "start": "60410",
    "end": "67180"
  },
  {
    "text": "both in the serial case as\nwell as the parallel case. And you've already done Cilk\nprogramming for a while,",
    "start": "67180",
    "end": "75520"
  },
  {
    "text": "at this point. This lecture, honestly,\nis a bit of a non sequitur in terms of the\noverall flow of the course.",
    "start": "75520",
    "end": "85600"
  },
  {
    "text": "And it's also an advanced topic. The Cilk runtime system is\na pretty complicated piece of software.",
    "start": "85600",
    "end": "91310"
  },
  {
    "text": "But nevertheless, I believe you\nshould have enough background to at least start to\nunderstand and appreciate",
    "start": "91310",
    "end": "99070"
  },
  {
    "text": "some of the aspects of the\ndesign of the Cilk runtime system.",
    "start": "99070",
    "end": "104240"
  },
  {
    "text": "So that's why we're\ntalking about that today. Just to quickly recall\nsomething that you're all,",
    "start": "104240",
    "end": "110950"
  },
  {
    "text": "I'm sure, intimately familiar\nwith by this point, what's Cilk programming all about?",
    "start": "110950",
    "end": "116965"
  },
  {
    "text": "Well, Cilk is a parallel\nprogramming language that allows you to make\nyour software run faster",
    "start": "116965",
    "end": "122770"
  },
  {
    "text": "using parallel processors. And to use Cilk, it's\npretty straightforward.",
    "start": "122770",
    "end": "127810"
  },
  {
    "text": "You may start with\nsome serial code that runs in some running time--\nwe'll denote that as Ts",
    "start": "127810",
    "end": "133870"
  },
  {
    "text": "for certain parts\nof the lecture. If you wanted to run\nin parallel using Cilk, you just insert Cilk\nkeywords in choice locations.",
    "start": "133870",
    "end": "142390"
  },
  {
    "text": "For example, you can\nparallelize the outer loop in this matrix multiply kernel,\nand that will let your code run",
    "start": "142390",
    "end": "148870"
  },
  {
    "text": "in time Tp on P processors. And ideally, Tp should\nbe less than Ts.",
    "start": "148870",
    "end": "156580"
  },
  {
    "text": "Now, just adding\nkeywords is all you need to do to tell\nCilk to execute",
    "start": "156580",
    "end": "162370"
  },
  {
    "text": "the computation in parallel. What does Cilk do in\nlight of those keywords? At a very high level, Cilk and\nspecifically its runtime system",
    "start": "162370",
    "end": "172270"
  },
  {
    "text": "takes care of the task\nof scheduling and load balancing the computation\non the parallel processors",
    "start": "172270",
    "end": "178569"
  },
  {
    "text": "and on the multicore\nsystem in general. So after you've denoted logical\nparallel in the program using",
    "start": "178570",
    "end": "184500"
  },
  {
    "text": "spawn, Cilk spawn, Cilk\nsync, and Cilk four, the Cilk scheduler\nmaps that computation",
    "start": "184500",
    "end": "189700"
  },
  {
    "text": "onto the processors. And it does so\ndynamically at runtime, based on whatever\nprocessing resources happen",
    "start": "189700",
    "end": "195459"
  },
  {
    "text": "to be available, and still\nuses a randomized work stealing scheduler which guarantees\nthat that mapping is efficient",
    "start": "195460",
    "end": "203790"
  },
  {
    "text": "and the execution\nruns efficiently. Now you've all been using the\nCilk platform for a while.",
    "start": "203790",
    "end": "210190"
  },
  {
    "text": "In its basic usage, you write\nsome Cilk code, possibly by parallelizing\nordinary serial code,",
    "start": "210190",
    "end": "216370"
  },
  {
    "text": "you feed that to a\ncompiler, you get a binary, you run the binary the binary\nwith some particular input",
    "start": "216370",
    "end": "224240"
  },
  {
    "text": "on a multicore system. You get parallel performance. Today, we're going to look at\nhow exactly does Cilk work?",
    "start": "224240",
    "end": "231910"
  },
  {
    "text": "What's the magic\nthat goes on, hidden by the boxes on this diagram?",
    "start": "231910",
    "end": "238490"
  },
  {
    "text": "And the very first thing to\nnote is that this picture is a little bit--",
    "start": "238490",
    "end": "244860"
  },
  {
    "text": "the first simplification\nthat we're going to break is that it's not really just\nCilk source and the Cilk",
    "start": "244860",
    "end": "250900"
  },
  {
    "text": "compiler. There's also a runtime system\nlibrary, libcilkrts.so, in case",
    "start": "250900",
    "end": "257470"
  },
  {
    "text": "you've seen that\nfile or messages about that file on your system. And really it's the compiler\nand the runtime library,",
    "start": "257470",
    "end": "264280"
  },
  {
    "text": "that work together to implement\nCilk's runtime system, to do the work stealing and\ndo the efficient scheduling",
    "start": "264280",
    "end": "271180"
  },
  {
    "text": "and load balancing. Now we might suspect that if\nyou just take a look at the code",
    "start": "271180",
    "end": "279810"
  },
  {
    "text": "that you get when you\ncompile a Cilk program, that might tell you something\nabout how Cilk works.",
    "start": "279810",
    "end": "285120"
  },
  {
    "text": "Here's C pseudocode for the\nresults when you compile a simple piece of Cilk code.",
    "start": "285120",
    "end": "293570"
  },
  {
    "text": "It's a bit complicated. I think that's fair to say. There's a lot going on here. There is one function\nin the original program,",
    "start": "293570",
    "end": "299729"
  },
  {
    "text": "now there are two. There's some new\nvariables, there's some calls to functions that\nlook a little bit strange,",
    "start": "299730",
    "end": "306840"
  },
  {
    "text": "there's a lot going on\nin the compiled results. This isn't exactly easy to\ninterpret or understand,",
    "start": "306840",
    "end": "312810"
  },
  {
    "text": "and this doesn't even bring into\nthe picture the runtime system library. The runtime system library,\nyou can find the source",
    "start": "312810",
    "end": "318360"
  },
  {
    "text": "code online. It's a little less than\n20,000 lines of code. It's also kind of complicated.",
    "start": "318360",
    "end": "324090"
  },
  {
    "text": "So rather than dive\ninto the code directly, what we're going to\ndo today is an attempt",
    "start": "324090",
    "end": "330120"
  },
  {
    "text": "at a top-down approach\nto understanding how the Cilk runtime\nsystem works, and some of the\ndesign considerations.",
    "start": "330120",
    "end": "336460"
  },
  {
    "text": "So we're going to start\nby talking about some of the required functionality\nthat we need out of the Cilk",
    "start": "336460",
    "end": "341639"
  },
  {
    "text": "runtime system, as well\nas some performance considerations for how the\nruntime system should work.",
    "start": "341640",
    "end": "348030"
  },
  {
    "text": "And then we'll take a look at\nhow the worker deques in Cilk get implemented, how\nspawning actually works,",
    "start": "348030",
    "end": "354480"
  },
  {
    "text": "how stealing a\ncomputation works, and how synchronization\nworks within Cilk.",
    "start": "354480",
    "end": "361350"
  },
  {
    "text": "That all sound good? Any questions so far? This should all be\nreview, more or less.",
    "start": "361350",
    "end": "366630"
  },
  {
    "text": " OK, so let's talk a little bit\nabout required functionality.",
    "start": "366630",
    "end": "375550"
  },
  {
    "text": "You've seen this\npicture before, I hope. This picture illustrated\nthe execution model",
    "start": "375550",
    "end": "380669"
  },
  {
    "text": "of a Cilk program. Here we have everyone's favorite\nexponential time Fibonacci routine, parallelized\nusing Cilk.",
    "start": "380670",
    "end": "387370"
  },
  {
    "text": "This is not an efficient way\nto compute Fibonacci numbers, but it's a nice didactic\nexample for understanding",
    "start": "387370",
    "end": "392670"
  },
  {
    "text": "parallel computation,\nespecially the Cilk model. And as we saw many\nlectures ago, when",
    "start": "392670",
    "end": "399360"
  },
  {
    "text": "you run this program\non a given input, the execution of\nthe program can be modeled as a computation dag.",
    "start": "399360",
    "end": "407070"
  },
  {
    "text": "And this computation\ndag unfolds dynamically as the program executes.",
    "start": "407070",
    "end": "413050"
  },
  {
    "text": "But I want to stop\nand take a hard look at exactly what that dynamic\nexecution looks like when we've",
    "start": "413050",
    "end": "420390"
  },
  {
    "text": "got parallel processors and work\nstealing all coming into play.",
    "start": "420390",
    "end": "426668"
  },
  {
    "text": "So we'll stick with\nthis Fibonacci routine, and we'll imagine we've just\ngot one processor on the system, to start.",
    "start": "426668",
    "end": "432080"
  },
  {
    "text": "And we're just going\nto use this one processor to execute fib(4). And it's going to take\nsome time to do it,",
    "start": "432080",
    "end": "438420"
  },
  {
    "text": "just to make the\nstory interesting.",
    "start": "438420",
    "end": "444410"
  },
  {
    "text": "So we start executing\nthis computation, and that one processor is just\ngoing to execute the Fibonacci",
    "start": "444410",
    "end": "451760"
  },
  {
    "text": "routine from beginning up\nto the Cilk spawn statement, as if it's ordinary\nserial code, because it",
    "start": "451760",
    "end": "457849"
  },
  {
    "text": "is ordinary serial code. At this point the processor\nhits the Cilk spawn statement.",
    "start": "457850",
    "end": "463640"
  },
  {
    "text": "What happens now? Anyone remember? ",
    "start": "463640",
    "end": "470170"
  },
  {
    "text": "What happens to the dag? ",
    "start": "470170",
    "end": "485322"
  },
  {
    "text": "AUDIENCE: It branches\ndown [INAUDIBLE] TAO SCHARDL: It branches\ndownward and spawns",
    "start": "485322",
    "end": "490880"
  },
  {
    "text": "another process, more or less. The way we model that--",
    "start": "490880",
    "end": "496300"
  },
  {
    "text": "the Cilk spawn is of a\nroutine fib of n minus 1. In this case, that'll be fib(3).",
    "start": "496300",
    "end": "502330"
  },
  {
    "text": "And so, like an\nordinary function call, we're going to get a brand\nnew frame for fib(3). And that's going to\nhave some strand that's",
    "start": "502330",
    "end": "508870"
  },
  {
    "text": "available to execute. But the spawn is not your\ntypical function call. It actually allows some other\ncomputation to run in parallel.",
    "start": "508870",
    "end": "517059"
  },
  {
    "text": "And so the way we model\nthat in this picture is that we get a new\nframe for fib(3). There's a strand available\nto execute there.",
    "start": "517059",
    "end": "523780"
  },
  {
    "text": "And the continuation,\nthe green strand, is now available in\nthe frame fib(4).",
    "start": "523780",
    "end": "532540"
  },
  {
    "text": "But no one's necessarily\nexecuting it. It's just kind of\nfaded in the picture.",
    "start": "532540",
    "end": "537940"
  },
  {
    "text": "So once the spawn\nhas occurred, what's the processor going to do? The processor is actually\ngoing to dive in and start",
    "start": "537940",
    "end": "542949"
  },
  {
    "text": "executing fib(3), as if it\nwere an ordinary function call. Yes, there's a strand available\nwithin the frame of fib(4),",
    "start": "542950",
    "end": "550630"
  },
  {
    "text": "but the processor isn't going\nto worry about that strand. It's just going to say,\noh, fib(4) calls fib(3),",
    "start": "550630",
    "end": "555920"
  },
  {
    "text": "going to start\ncomputing for fib(3). Sound good?",
    "start": "555920",
    "end": "561250"
  },
  {
    "text": "And so the processor\ndives down from pink strand to pink strand.",
    "start": "561250",
    "end": "566320"
  },
  {
    "text": "The instruction pointer\nfor the processor returns to the beginning\nof the fib routine, because we're now\ncalling fib once again.",
    "start": "566320",
    "end": "574779"
  },
  {
    "text": "And this process repeats. It executes the pink strand\nup until the Cilk spawn,",
    "start": "574780",
    "end": "580570"
  },
  {
    "text": "just like ordinary serial code. The spawn occurs-- and we've\nalready seen this picture before--",
    "start": "580570",
    "end": "586600"
  },
  {
    "text": "the spawn allows another\nstrand to execute in parallel. But it also creates\na frame for fib(2). ",
    "start": "586600",
    "end": "593430"
  },
  {
    "text": "And the processor\ndives into fib(2), resetting the instruction\npointer to the beginning fib,",
    "start": "593430",
    "end": "600220"
  },
  {
    "text": "P1 executes up to the spawn. Once again, we get\nanother string to execute,",
    "start": "600220",
    "end": "605290"
  },
  {
    "text": "as well as an\ninvocation of fib(1). Processor dives even further.",
    "start": "605290",
    "end": "610880"
  },
  {
    "text": "So that's fine. This is just the processor\ndoing more or less ordinary serial execution\nof this fib routine,",
    "start": "610880",
    "end": "616810"
  },
  {
    "text": "but it's also\nallowing some strands to be executed in parallel. This is the one\nprocessor situation,",
    "start": "616810",
    "end": "623230"
  },
  {
    "text": "looks pretty good so far.  Right, and in the\nfib(1) case, it",
    "start": "623230",
    "end": "629910"
  },
  {
    "text": "doesn't make it as far\nthrough the pink strand because, in fact, we\nhit the base case. But now let's bring in\nsome more processors.",
    "start": "629910",
    "end": "636750"
  },
  {
    "text": "Suppose that another\nprocessor finally shows up, says I'm bored,\nI want to do some work,",
    "start": "636750",
    "end": "642870"
  },
  {
    "text": "and decides to steal\nsome computation. It's going to discover the green\nstrand in the frame fib(4),",
    "start": "642870",
    "end": "649500"
  },
  {
    "text": "and P2 is just going\nto jump in there and start executing that strand. And if we think really\nhard about what this means,",
    "start": "649500",
    "end": "656820"
  },
  {
    "text": "P2 is another processor\non the system. It has its own set of registers. It has its own\ninstruction pointer.",
    "start": "656820",
    "end": "662940"
  },
  {
    "text": "And so what Cilk\nsomehow allows to happen is for P2 to just jump\nright into the middle",
    "start": "662940",
    "end": "669720"
  },
  {
    "text": "of this fib(4) routine,\nwhich is already executing. It just sets the\ninstruction pointer to point at that\ngreen instruction,",
    "start": "669720",
    "end": "677370"
  },
  {
    "text": "at the call to fib of n minus 2. And it's just going to pick\nup where processor 1 left off,",
    "start": "677370",
    "end": "684240"
  },
  {
    "text": "when it executed up to this\npoint in fib(4), somehow.",
    "start": "684240",
    "end": "690270"
  },
  {
    "text": "In this case, it executes\nfib of n minus 2. That calls fib(2),\ncreates a new strand,",
    "start": "690270",
    "end": "695519"
  },
  {
    "text": "it's just an ordinary\nfunction call. It's going to descend\ninto that new frame. It's going to return to\nthe beginning of fib.",
    "start": "695520",
    "end": "702630"
  },
  {
    "text": "All that's well and good. Another processor might come\nalong and steal another piece of the computation.",
    "start": "702630",
    "end": "708780"
  },
  {
    "text": "It steals another green\nstrand, and so once again, this processor needs to jump\ninto the middle of an executing",
    "start": "708780",
    "end": "715170"
  },
  {
    "text": "function. Its instruction\npointer is just going to point at this call\nof the fib of n minus 2.",
    "start": "715170",
    "end": "721350"
  },
  {
    "text": "Somehow, it's going to have\nthe state of this executing function available, despite\nhaving independent registers.",
    "start": "721350",
    "end": "727319"
  },
  {
    "text": "And it needs to just\nstart from this location, with all the parameters\nset appropriately,",
    "start": "727320",
    "end": "733205"
  },
  {
    "text": "and start executing\nthis function as if it's an ordinary function. It calls fib(3) minus 2 is 1.",
    "start": "733205",
    "end": "741630"
  },
  {
    "text": "And now these processors might\nstart executing in parallel. P1 might return from\nits base case routine",
    "start": "741630",
    "end": "748180"
  },
  {
    "text": "up to the parent call\nof fib of n minus 2 and start executing\nits continuation, because that wasn't stolen.",
    "start": "748180",
    "end": "753209"
  },
  {
    "text": "Meanwhile, P3 descends into\nthe execution of fib(1). ",
    "start": "753210",
    "end": "759290"
  },
  {
    "text": "And then in another\nstep, P3 and P2 make some progress\nexecuting their computation. P2 encounters a Cilk\nspawn statement,",
    "start": "759290",
    "end": "766650"
  },
  {
    "text": "which creates a new frame\nand allows another strand to execute in parallel. P3 encounters the base\ncase routine and says,",
    "start": "766650",
    "end": "774520"
  },
  {
    "text": "OK, it's time to return. And all of that can\nhappen in parallel, and somehow the Cilk system\nhas to coordinate all of this.",
    "start": "774520",
    "end": "781990"
  },
  {
    "text": "But we already have one mystery. How does a processor start\nexecuting from the middle of a running function?",
    "start": "781990",
    "end": "788490"
  },
  {
    "text": "The running function and it's\nstate lived on P1 initially, and then P2 and P3\nsomehow find that state,",
    "start": "788490",
    "end": "797580"
  },
  {
    "text": "hop into the middle\nof the function, and just start running. That's kind of strange.",
    "start": "797580",
    "end": "802680"
  },
  {
    "text": "How does that happen? How does the Cilk runtime\nsystem make that happen? This is one thing to consider. ",
    "start": "802680",
    "end": "809904"
  },
  {
    "text": "Another thing to\nconsider is what happens when we hit a sync. We'll talk about how these\nissues get addressed later on,",
    "start": "809905",
    "end": "815269"
  },
  {
    "text": "but let's lay out all of\nthe considerations upfront, before we-- just see how\nbad the problem is before we",
    "start": "815270",
    "end": "821990"
  },
  {
    "text": "try to solve it bit by bit. So now, let's take this\npicture again and progress it",
    "start": "821990",
    "end": "828915"
  },
  {
    "text": "a little bit further. Let's suppose that\nprocessor three decides to execute the return.",
    "start": "828915",
    "end": "834720"
  },
  {
    "text": "It's going to return to\nan invocation of fib(3). And the return statement\nis a Cilk sync statement.",
    "start": "834720",
    "end": "845029"
  },
  {
    "text": "But processor three\ncan't execute the sync because the computation\nof fib(2) in this case--",
    "start": "845030",
    "end": "853310"
  },
  {
    "text": "that's being done\nby processor one-- that computation\nis not done yet. So the execution can\nproceed past the sync.",
    "start": "853310",
    "end": "859790"
  },
  {
    "text": "So somehow P3 needs to say,\nOK, there is a sync statement, but we can't execute\nbeyond this point",
    "start": "859790",
    "end": "866420"
  },
  {
    "text": "because, specifically, it's\nwaiting on processor one. It doesn't care what\nprocessor two is doing.",
    "start": "866420",
    "end": "871670"
  },
  {
    "text": "Processor two is having a\ndandy time executing fib(2) on the other side of the tree. Processor three shouldn't care.",
    "start": "871670",
    "end": "877748"
  },
  {
    "text": "So processor three\ncan't do something like, OK, all\nprocessors need to stop, get to this point in the\ncode, and then the execution",
    "start": "877748",
    "end": "884330"
  },
  {
    "text": "can proceed. No, no, it just needs to\nwait on processor one. Somehow the Cilk system has\nto allow that fine grain",
    "start": "884330",
    "end": "891920"
  },
  {
    "text": "synchronization to happen\nin this nested pattern. So how does a Cilk sync\nwait on only the nested sub",
    "start": "891920",
    "end": "899420"
  },
  {
    "text": "computations within the program? How does it figure\nout how to do that? How does the Cilk runtime\nsystem implement this?",
    "start": "899420",
    "end": "906717"
  },
  {
    "text": "So that's another consideration. OK, so at this point, we have\nthree top level considerations.",
    "start": "906717",
    "end": "911779"
  },
  {
    "text": "A single worker needs to be\nable to execute this program as if it's an ordinary\nserial program. Thieves have to be able to jump\ninto the middle of executing",
    "start": "911780",
    "end": "918829"
  },
  {
    "text": "functions and pick up\nfrom where they left off, from where other processors\nin the system left off.",
    "start": "918830",
    "end": "924550"
  },
  {
    "text": "Syncs have to be able to\nstall functions appropriately, based only on those functions'\nnested child sub computations.",
    "start": "924550",
    "end": "934880"
  },
  {
    "text": "So we have three\nbig considerations that we need to\npick apart so far.",
    "start": "934880",
    "end": "939950"
  },
  {
    "text": "That's not the\nwhole story, though. Any ideas what other\nfunctionality we need to worry about, for\nimplementing this Cilk system?",
    "start": "939950",
    "end": "947960"
  },
  {
    "text": "It's kind of an open ended\nquestion, but any thoughts? ",
    "start": "947960",
    "end": "967660"
  },
  {
    "text": "We have serial execution,\nspawning, stealing, and syncing",
    "start": "967660",
    "end": "973180"
  },
  {
    "text": "as top level concerns. Anyone remember some\nother features of Cilk",
    "start": "973180",
    "end": "978850"
  },
  {
    "text": "that the runtime system\nmagically makes happen, correctly?",
    "start": "978850",
    "end": "985025"
  },
  {
    "text": "It's probably been a while\nsince you've seen those. Yeah. AUDIENCE: Cilk for loops\ndivide and conquer? TAO SCHARDL: The Cilk for\nloops divide and conquer.",
    "start": "985025",
    "end": "992770"
  },
  {
    "text": "Somehow, the runtime system does\nhave to implement Cilk fours.",
    "start": "992770",
    "end": "998170"
  },
  {
    "text": "The Cilk fours end up getting\nimplemented internally, with spawns and syncs. That's courtesy of the compiler.",
    "start": "998170",
    "end": "1006089"
  },
  {
    "text": "Yeah, courtesy of the compiler. So we wont look too\nhard at Cilk fors today,",
    "start": "1006090",
    "end": "1011490"
  },
  {
    "text": "but that's definitely\none concern. Good observation. Any other thoughts, sort\nof low level system details",
    "start": "1011490",
    "end": "1020580"
  },
  {
    "text": "that Cilk needs to\nimplement correctly? ",
    "start": "1020580",
    "end": "1029380"
  },
  {
    "text": "Cache coherence--\nit actually doesn't need to worry too much\nabout cache coherence",
    "start": "1029380",
    "end": "1035470"
  },
  {
    "text": "although, given the\nlatest performance numbers I've seen from Cilk,\nmaybe it should worry more",
    "start": "1035470",
    "end": "1042010"
  },
  {
    "text": "about the cache. But it turns out\nthe hardware does a pretty good job maintaining\nthe cache coherence",
    "start": "1042010",
    "end": "1048700"
  },
  {
    "text": "protocol itself. But good guess . ",
    "start": "1048700",
    "end": "1060645"
  },
  {
    "text": "It's not really\na tough question, because it's really just calling\nback memories of old lectures.",
    "start": "1060645",
    "end": "1068080"
  },
  {
    "text": "I think you recently had\na quiz on this material, so it's probably safe to say\nthat all that material has",
    "start": "1068080",
    "end": "1073300"
  },
  {
    "text": "been paged out of your\nbrain at this point. So I'll just spoil\nthe fun for you.",
    "start": "1073300",
    "end": "1081070"
  },
  {
    "text": "Cilk has a notion\nof a cactus stack. So we talked a little\nbit about processors jumping into the middle\nof an executing function",
    "start": "1081070",
    "end": "1087730"
  },
  {
    "text": "and somehow having the state\nof that function available.",
    "start": "1087730",
    "end": "1093220"
  },
  {
    "text": "One consideration\nis registered state, but another consideration\nis the stack itself. And Cilk supports the\nC's rule for pointers,",
    "start": "1093220",
    "end": "1100809"
  },
  {
    "text": "namely that children can see\npointers into parent frames,",
    "start": "1100810",
    "end": "1105850"
  },
  {
    "text": "but parents can't see\npointers into child frames. Now each processor, each\nworker in a Cilk system,",
    "start": "1105850",
    "end": "1112030"
  },
  {
    "text": "needs to have its own\nview of the stack. But those views aren't\nnecessarily independent.",
    "start": "1112030",
    "end": "1118179"
  },
  {
    "text": "In this picture,\nall five processors share the same view of the frame\nfor Function A instantiation A,",
    "start": "1118180",
    "end": "1127900"
  },
  {
    "text": "then processors three\nthrough five all share the same view for the\ninstantiation of C.",
    "start": "1127900",
    "end": "1133120"
  },
  {
    "text": "So somehow, Cilk has to\nmake all of those views available and consistent\nbut not quite the same, sort",
    "start": "1133120",
    "end": "1141309"
  },
  {
    "text": "of consistent as we get\nwith cache coherence. Cilk somehow has to\nimplement this cactus stack.",
    "start": "1141310",
    "end": "1148630"
  },
  {
    "text": "So that's another consideration\nthat we have to worry about. And then there's one more\nkind of funny detail.",
    "start": "1148630",
    "end": "1156130"
  },
  {
    "text": "If we take another look\nat work stealing itself-- you may remember we had this\npicture from several lectures",
    "start": "1156130",
    "end": "1163299"
  },
  {
    "text": "ago where we have\nprocessors on the system, each maintains its\nown deck of frames,",
    "start": "1163300",
    "end": "1169780"
  },
  {
    "text": "and workers are allowed to\nsteal frames from each other. But if we take a look\nat how this all unfolds,",
    "start": "1169780",
    "end": "1177760"
  },
  {
    "text": "yes we may have a processor\nthat performs a call, and that'll push another\nframe for a called function",
    "start": "1177760",
    "end": "1184090"
  },
  {
    "text": "onto its deque on the bottom. It may spawn, and that'll\npush a spawn frame onto the bottom of its deck.",
    "start": "1184090",
    "end": "1190600"
  },
  {
    "text": "But if we fast\nforward a little bit and we get in up with a\nworker with nothing to do, that worker is going\nto go ahead and steal,",
    "start": "1190600",
    "end": "1196870"
  },
  {
    "text": "picking another worker\nin the system at random. And it's going to steal\nfrom the top of the deque.",
    "start": "1196870",
    "end": "1204120"
  },
  {
    "text": "But it's not just going to steal\nthe topmost item on the deque. It's actually going to steal a\nchunk of items from the deque.",
    "start": "1204120",
    "end": "1210760"
  },
  {
    "text": "In particular, if it\nselects the third processor in this picture,\nthird from the left,",
    "start": "1210760",
    "end": "1218530"
  },
  {
    "text": "this thief is going\nto steal everything",
    "start": "1218530",
    "end": "1223570"
  },
  {
    "text": "through the parent of\nthe next spawned frame. It needs to take this\nwhole stack of frames,",
    "start": "1223570",
    "end": "1229940"
  },
  {
    "text": "and it's not clear a\npriori how many frames the worker is going to\nhave to steal in this case.",
    "start": "1229940",
    "end": "1237335"
  },
  {
    "text": "But nevertheless, it needs\nto take all those frames and resume execution. After all, that bottom was a\ncall frame that it just stole.",
    "start": "1237335",
    "end": "1244080"
  },
  {
    "text": "That's where there's\na continuation with work available to\nbe done in parallel. ",
    "start": "1244080",
    "end": "1251440"
  },
  {
    "text": "And so, if we think\nabout it, there are a lot of\nquestions that arise. What's involved in\nstealing frames?",
    "start": "1251440",
    "end": "1256890"
  },
  {
    "text": "What synchronization does\nthis system have to implement? What happens to the stack?",
    "start": "1256890",
    "end": "1262100"
  },
  {
    "text": "It looks like we just shifted\nsome frames from one processor to another, but the first\nprocessor, the victim,",
    "start": "1262100",
    "end": "1267390"
  },
  {
    "text": "still needs access to\nthe data in that stack. So how does that part work, and\nhow does any of this actually",
    "start": "1267390",
    "end": "1273299"
  },
  {
    "text": "become efficient? So now we have a pretty\ndecent list of functionality",
    "start": "1273300",
    "end": "1279059"
  },
  {
    "text": "that we need out of the\nCilk runtime system. We need serial\nexecution to work. We need thieves to be able to\njump into the middle of running",
    "start": "1279060",
    "end": "1286350"
  },
  {
    "text": "functions. We need sinks to synchronize\nin this nested, fine grain way.",
    "start": "1286350",
    "end": "1292290"
  },
  {
    "text": "We need to implement a cactus\nstack for all the workers to see.",
    "start": "1292290",
    "end": "1297570"
  },
  {
    "text": "And these have to deal with\nmixtures of spawned frames and called frames\nthat may be available",
    "start": "1297570",
    "end": "1305190"
  },
  {
    "text": "when they steal a computation. So that's a bunch\nof considerations.",
    "start": "1305190",
    "end": "1310770"
  },
  {
    "text": "Is this the whole picture? Well, there's a little\nbit more to it than that. So before I give\nyou an answers, I'm",
    "start": "1310770",
    "end": "1317100"
  },
  {
    "text": "just going to keep\nraising questions. And now I want to raise\nsome questions concerning the performance of the system.",
    "start": "1317100",
    "end": "1323430"
  },
  {
    "text": "How do we want to\ndesign the system to get good parallel\nexecution times?",
    "start": "1323430",
    "end": "1332580"
  },
  {
    "text": "Well if we take a look at the\nwork stealing bounds for Cilk, the Cilk's work\nstealing scheduler achieves an expected\nrunning time of Tp,",
    "start": "1332580",
    "end": "1340830"
  },
  {
    "text": "on P processors, which is\nproportional to the work of the computation divided\nby the number of processors,",
    "start": "1340830",
    "end": "1347200"
  },
  {
    "text": "plus something on the order of\nthe span of the computation. Now if we take a look at\nthis running time bound,",
    "start": "1347200",
    "end": "1354490"
  },
  {
    "text": "we can decompose\nit into two pieces. The T1 over P part,\nthat's really the time",
    "start": "1354490",
    "end": "1360280"
  },
  {
    "text": "that the parallel workers on the\nsystem spend doing actual work. They're P of those workers,\nthey're all making progress",
    "start": "1360280",
    "end": "1368169"
  },
  {
    "text": "on the work of the computation. That comes out to\nT of one over P. The other part of the bound,\norder T infinity, that's",
    "start": "1368170",
    "end": "1375450"
  },
  {
    "text": "a time that turns out to\nbe the time that workers spend stealing computation\nfrom each other.",
    "start": "1375450",
    "end": "1381940"
  },
  {
    "text": "And ideally, what we want when\nwe paralyze a program using Cilk, is we want to see this\nprogram achieve linear speedup.",
    "start": "1381940",
    "end": "1389440"
  },
  {
    "text": "That means that if we give the\nprogram more processors to run,",
    "start": "1389440",
    "end": "1394870"
  },
  {
    "text": "if we increase P, we want\nto see the execution time decrease, linearly, with P.",
    "start": "1394870",
    "end": "1401820"
  },
  {
    "text": "And that means we want the of\nthe workers in the Cilk system to spend most of the\ntime doing useful work.",
    "start": "1401820",
    "end": "1408460"
  },
  {
    "text": "We don't want the workers\nspending a lot of time stealing from each other. ",
    "start": "1408460",
    "end": "1414659"
  },
  {
    "text": "In fact, we want\neven more than this. We don't just want work divided\nby number of processors.",
    "start": "1414660",
    "end": "1421650"
  },
  {
    "text": "We really care about how\nthe performance compares to the running time of\nthe original serial code",
    "start": "1421650",
    "end": "1427950"
  },
  {
    "text": "that we were given,\nthat we parallelized. That original serial\ncode ran in time Ts of S.",
    "start": "1427950",
    "end": "1433800"
  },
  {
    "text": "And now we paralyze it\nusing Cilk spawn, Cilk sync, or in this case, Cilk for.",
    "start": "1433800",
    "end": "1439090"
  },
  {
    "text": "And ideally, with\nsufficient parallelism, we'll guarantee that\nthe running time is going to be Ts of P proportional\nto the work of a processor, T1",
    "start": "1439090",
    "end": "1447320"
  },
  {
    "text": "divided by P. But we really\nwant to speed up compared to Ts of S. So that's our goal.",
    "start": "1447320",
    "end": "1454200"
  },
  {
    "text": "We want Tp to be proportional\nto Ts of S over P. That says that we want\nthe serial running time",
    "start": "1454200",
    "end": "1460620"
  },
  {
    "text": "to be pretty close to the work\nof the parallel computation. So the one processor running\ntime of our Cilk code, ideally,",
    "start": "1460620",
    "end": "1468120"
  },
  {
    "text": "should look pretty close\nto the running time of the original serial code. ",
    "start": "1468120",
    "end": "1475610"
  },
  {
    "text": "So just to put these\npieces together, if we were originally\ngiven a serial program that",
    "start": "1475610",
    "end": "1481179"
  },
  {
    "text": "ran on time Ts of S, and we\nparallelize it using Cilk, we end up with a parallel\nprogram with work T1",
    "start": "1481180",
    "end": "1486429"
  },
  {
    "text": "and span T infinity. We want to achieve linear\nspeed up on P processors, compared to the original\nserial running time.",
    "start": "1486430",
    "end": "1494320"
  },
  {
    "text": "In order to do that,\nwe need two things. We need ample parallelism. T1 one over T infinity should\nbe a lot bigger than P.",
    "start": "1494320",
    "end": "1501220"
  },
  {
    "text": "And we've seen why that's\nthe case in lectures past. We also want what's called\nhigh work efficiency.",
    "start": "1501220",
    "end": "1508690"
  },
  {
    "text": "We want the ratio of the\nserial running time divided by the work of the\nstill computation to be pretty close to\none, as close as possible.",
    "start": "1508690",
    "end": "1515755"
  },
  {
    "text": " Now, the Cilk runtime system\nis designed with these two",
    "start": "1515755",
    "end": "1523669"
  },
  {
    "text": "observations in mind. And in particular, the\nCilk runtime system says, suppose that we\nhave a Cilk program that",
    "start": "1523670",
    "end": "1529909"
  },
  {
    "text": "has ample parallelism. It has efficient\nparallelism to make good use of the available\nparallel processors.",
    "start": "1529910",
    "end": "1538280"
  },
  {
    "text": "Then in implementing\nthe Cilk runtime, we have a goal to maintain\nhigh work efficiency.",
    "start": "1538280",
    "end": "1544298"
  },
  {
    "text": "And to maintain high\nwork efficiency, the Cilk runtime\nsystem abides by what's called the work first\nprinciple, which",
    "start": "1544298",
    "end": "1550460"
  },
  {
    "text": "is to optimize the\nordinary serial execution of the program, even at the\nexpense of some additional cost",
    "start": "1550460",
    "end": "1557280"
  },
  {
    "text": "to steals.  Now at 30,000 feet, the way\nthat the Cilk runtime system",
    "start": "1557280",
    "end": "1566372"
  },
  {
    "text": "implements the work\nfirst principle and makes all these\ncomponents work is by dividing the job\nbetween both the compiler",
    "start": "1566372",
    "end": "1574200"
  },
  {
    "text": "and the runtime system library. The compiler uses a handful\nof small data structures,",
    "start": "1574200",
    "end": "1580990"
  },
  {
    "text": "including workers\nand stack frames, and implements\noptimized fast paths for execution of\nfunctions, which should be",
    "start": "1580990",
    "end": "1588840"
  },
  {
    "text": "executed when no steals occur. The runtime system\nlibrary handles issues",
    "start": "1588840",
    "end": "1594213"
  },
  {
    "text": "with the parallel execution. And uses larger data structures\nthat maintain parallel running time state.",
    "start": "1594213",
    "end": "1600110"
  },
  {
    "text": "And it handles slower\npaths of execution, in particular when\nseals actually occur.",
    "start": "1600110",
    "end": "1606180"
  },
  {
    "text": "So those are all\nthe considerations. We have a lot of\nfunctionality requirements and we have some\nperformance considerations.",
    "start": "1606180",
    "end": "1611760"
  },
  {
    "text": "We want to optimize\nthe work, even at the expense of some steals. Let's finally take a\nlook at how Cilk works.",
    "start": "1611760",
    "end": "1619050"
  },
  {
    "text": "How do we deal with\nall these problems? I imagine some you may have\nsome ideas as to how you might",
    "start": "1619050",
    "end": "1627150"
  },
  {
    "text": "tackle one issue or another, but\nlet's see what really happens.",
    "start": "1627150",
    "end": "1633418"
  },
  {
    "text": "Let's start from the beginning. How do we implement\na worker deque? ",
    "start": "1633418",
    "end": "1640650"
  },
  {
    "text": "Now for this\ndiscussion, we're going to use a running example\nwith just a really, really",
    "start": "1640650",
    "end": "1646050"
  },
  {
    "text": "simple, Cilk routine. It's not even as\ncomplicated as fib. We're going to have a function\nfoo that, at one point,",
    "start": "1646050",
    "end": "1653010"
  },
  {
    "text": "spawns a function bar, in\nthe continuation calls baz, performs a sync,\nand then returns.",
    "start": "1653010",
    "end": "1659670"
  },
  {
    "text": "And just to establish\nsome terminology, foo will be what we call\na spawning function,",
    "start": "1659670",
    "end": "1664980"
  },
  {
    "text": "meaning that foo is capable\nof executing a Cilk spawn statement. The function bar\nis spawned by foo.",
    "start": "1664980",
    "end": "1672720"
  },
  {
    "text": "We can see that from the\nCilk spawn in front of bar. And the call to baz occurs in\nthe continuation of that Cilk",
    "start": "1672720",
    "end": "1678870"
  },
  {
    "text": "spawn, simple picture. Everyone good so far?",
    "start": "1678870",
    "end": "1685140"
  },
  {
    "text": "Any questions about the\nfunctionality requirements, terminology, performance\nconsiderations?",
    "start": "1685140",
    "end": "1690447"
  },
  {
    "text": " OK. ",
    "start": "1690447",
    "end": "1696290"
  },
  {
    "text": "So now we're going to take a\nhard look at just one worker and we're going to\nsay, conceptually, we",
    "start": "1696290",
    "end": "1701480"
  },
  {
    "text": "have this deque-like structure\nwhich has spawned frames and called frames. Let's ignore the rest of\nthe workers on the system.",
    "start": "1701480",
    "end": "1707930"
  },
  {
    "text": "Let's not worry about-- well, we'll worry a little\nbit about how steals can work, but we're just going\nto focus on the actions",
    "start": "1707930",
    "end": "1715100"
  },
  {
    "text": "that one worker performs. How do we implement this deque? And we want the worker to\noperate on its own deck,",
    "start": "1715100",
    "end": "1721940"
  },
  {
    "text": "a lot like a stack. It's going to push and\npop frames from the bottom up the deque. Steals need to be\nable to transfer",
    "start": "1721940",
    "end": "1727820"
  },
  {
    "text": "ownership of several\nconsecutive frames from the top of the deque. And thieves need to be able\nto resume a continuation.",
    "start": "1727820",
    "end": "1734908"
  },
  {
    "text": " So the way that the\nCilk system does this,",
    "start": "1734908",
    "end": "1741510"
  },
  {
    "text": "to bring this concept\ninto an implementation, is that it's going to\nimplement the deque externally",
    "start": "1741510",
    "end": "1746950"
  },
  {
    "text": "from the actual call stack. Those frames will still\nbe in a stack somewhere and they'll be managed,\nroughly speaking,",
    "start": "1746950",
    "end": "1754690"
  },
  {
    "text": "with a standard\ncalling convention. But the worker is going to\nmaintain a separate deque data",
    "start": "1754690",
    "end": "1761799"
  },
  {
    "text": "structure, which will contain\npointers into this stack.",
    "start": "1761800",
    "end": "1767170"
  },
  {
    "text": "And the worker itself\nwill maintain the deque using head and tail pointers. ",
    "start": "1767170",
    "end": "1773840"
  },
  {
    "text": "Now in addition to this\npicture, the frames that are available\nto be stolen-- the frames that have\ncomputation that a thief can",
    "start": "1773840",
    "end": "1780710"
  },
  {
    "text": "come along and execute-- those frames will store an\nadditional local structure",
    "start": "1780710",
    "end": "1786470"
  },
  {
    "text": "that will contain information\nas necessary for stealing to occur. Does this make sense?",
    "start": "1786470",
    "end": "1792380"
  },
  {
    "text": "Questions so far? Ordinary call stack,\ndeque lives outside of it,",
    "start": "1792380",
    "end": "1797870"
  },
  {
    "text": "worker points at the deque,\npretty simple design. ",
    "start": "1797870",
    "end": "1809230"
  },
  {
    "text": "So I mentioned that the compiler\nused relatively lightweight structures.",
    "start": "1809230",
    "end": "1816050"
  },
  {
    "text": "This is essentially one of them. And if we take a look at the\nimplementation of the Cilk",
    "start": "1816050",
    "end": "1821450"
  },
  {
    "text": "runtime system, this\nis the essence of it. There are some additional\nimplementation details,",
    "start": "1821450",
    "end": "1828110"
  },
  {
    "text": "but these are the core-- this is, in a sense, the\ncore piece of the design.",
    "start": "1828110",
    "end": "1835083"
  },
  {
    "text": "So the rest is just details. The Intel Cilk\nPlus runtime system takes this design and elaborates\non it in a variety of ways.",
    "start": "1835083",
    "end": "1843620"
  },
  {
    "text": "And we're going to take a\nlook at those elaborations. First off, what\nwe'll see is that every spawned\nsubcomputation ends up",
    "start": "1843620",
    "end": "1849410"
  },
  {
    "text": "being executed within its\nown helper function, which the compiler will generate.",
    "start": "1849410",
    "end": "1854720"
  },
  {
    "text": "That's called a spawn\nhelper function. And then the runtime\nsystem is going to maintain a few basic data\nstructures as the workers",
    "start": "1854720",
    "end": "1863300"
  },
  {
    "text": "execute their work. There'll be a structure\nfor the worker, which will look similar to what we\njust saw in the previous slide.",
    "start": "1863300",
    "end": "1868610"
  },
  {
    "text": "There'll be a Cilk\nstack frame structure for each instantiation\nof a spawning function,",
    "start": "1868610",
    "end": "1874970"
  },
  {
    "text": "some function that\ncan perform and spawn. And there'll be a\nstack-frame structure for each spawn helper, each\ninstantiation that is spawned.",
    "start": "1874970",
    "end": "1885150"
  },
  {
    "text": "Now if we take another\nlook at the compiled code we had before, some of it\nstarts to make some sense.",
    "start": "1885150",
    "end": "1891180"
  },
  {
    "text": "Originally, we had our spawning\nfunction foo and a statement that spawned off, called a bar.",
    "start": "1891180",
    "end": "1898200"
  },
  {
    "text": "And in the C pseudocode\nof the compiled results, we see that we\nhave two functions.",
    "start": "1898200",
    "end": "1903399"
  },
  {
    "text": "The first function foo-- that's our spawning function--\nit's got a bunch of stuff in it, and we'll figure out\nwhat that's doing in a second.",
    "start": "1903400",
    "end": "1910578"
  },
  {
    "text": "But there's a second function,\nand that second function is the spawn helper. And that spawn helper\nactually contains",
    "start": "1910578",
    "end": "1917190"
  },
  {
    "text": "a statement which calls bar and\nultimately saves the result.",
    "start": "1917190",
    "end": "1922889"
  },
  {
    "text": "Make sense? Now we're starting to understand\nsome of the confusing C",
    "start": "1922890",
    "end": "1928880"
  },
  {
    "text": "pseudocode we saw before. ",
    "start": "1928880",
    "end": "1936470"
  },
  {
    "text": "And if we take a look at each\nof these routines we see, indeed, there is a\nstack frame structure.",
    "start": "1936470",
    "end": "1943360"
  },
  {
    "text": "And so in Intel Cilk Plus it's\ncalled a Cilk RTS stack frame, very creative name, I know.",
    "start": "1943360",
    "end": "1949179"
  },
  {
    "text": "And it's just added as\nan extra local variable in each of these functions. You got one inside of\nfoo, because that's",
    "start": "1949180",
    "end": "1954720"
  },
  {
    "text": "a spawning function, and you get\none inside of the spawn helper. ",
    "start": "1954720",
    "end": "1961120"
  },
  {
    "text": "Now if we dive into the Cilk\nstack frame structure itself, by cracking open the source\ncode for the Intel Cilk Plus",
    "start": "1961120",
    "end": "1967659"
  },
  {
    "text": "runtime, we see that there are a\nlot of fields in the structure. The main fields are as follows--\nthere is a buffer, a context",
    "start": "1967660",
    "end": "1975280"
  },
  {
    "text": "buffer, and that's going to\ncontain enough information to resume a function\nat a continuation,",
    "start": "1975280",
    "end": "1981190"
  },
  {
    "text": "particularly to mean after\na Cilk spawn or, in fact, after a Cilk sync statement. There's an additional integer\nin the stack frame called flags,",
    "start": "1981190",
    "end": "1989500"
  },
  {
    "text": "which will summarize the\nstate of the Cilk stack rate, and we'll see a little\nbit more about that later.",
    "start": "1989500",
    "end": "1994750"
  },
  {
    "text": "And there's going to be a\npointer to a parent Cilk stack frame that's somewhere above\nthis Cilk RTS stack frame,",
    "start": "1994750",
    "end": "2001980"
  },
  {
    "text": "somewhere in the call stack. So these Cilk RTS\nstack frames, these are the extra bit of state that\nthe Cilk runtime system adds",
    "start": "2001980",
    "end": "2010740"
  },
  {
    "text": "to the ordinary call stack.  So if we take a look at the\nactual worker structure,",
    "start": "2010740",
    "end": "2017240"
  },
  {
    "text": "it's a lot like\nwhat we saw before. We have a deque that's\nexternal to the call stack. The Cilk worker maintains head\nand tail pointers to the deque.",
    "start": "2017240",
    "end": "2026700"
  },
  {
    "text": "The Cilk workers are also\ngoing to maintain a pointer to the current Cilk\nRTS stack frame, which",
    "start": "2026700",
    "end": "2032150"
  },
  {
    "text": "will tend to be somewhere\nnear the bottom of the stack. ",
    "start": "2032150",
    "end": "2042880"
  },
  {
    "text": "OK, so those are the basic data\nstructures that a single worker is going to maintain. That includes the deque.",
    "start": "2042880",
    "end": "2049239"
  },
  {
    "text": "Let's see them all\nin action, shall we? Any questions about\nthat so far, before we",
    "start": "2049239",
    "end": "2055119"
  },
  {
    "text": "start watching pointers fly? Yeah. AUDIENCE: I guess with\nthe previous slide, there were arrows on\nthe workers' call stack.",
    "start": "2055120",
    "end": "2062480"
  },
  {
    "text": "What do you [INAUDIBLE]? TAO SCHARDL: What do the arrows\namong the elements on the call",
    "start": "2062480",
    "end": "2069579"
  },
  {
    "text": "stack mean? So in this picture\nof the call stack, function instantiations\nare actually in green,",
    "start": "2069580",
    "end": "2075850"
  },
  {
    "text": "and local variables--\nspecifically the Cilk RTS stack frames--",
    "start": "2075850",
    "end": "2081010"
  },
  {
    "text": "those show up in beige. So foo SF is the Cilk RTS stack\nframe inside the instantiation",
    "start": "2081010",
    "end": "2088899"
  },
  {
    "text": "of foo. It's just a local\nvariable that's also stored in the stack, right? Now, the Cilk RTS stack frame\nmaintains a parent pointer,",
    "start": "2088900",
    "end": "2098440"
  },
  {
    "text": "and it maintains a pointer\nup to some Cilk RTS stack frame above it on the stack.",
    "start": "2098440",
    "end": "2103660"
  },
  {
    "text": "It's just another local\nvariable, also stored in the stack. So when we step away and\nlook at the whole call stack",
    "start": "2103660",
    "end": "2110290"
  },
  {
    "text": "with all the function frames\nand the Cilk RTS stack frames, that's where we get the\npointers climbing up the stack.",
    "start": "2110290",
    "end": "2117714"
  },
  {
    "text": "We're good? Other questions? ",
    "start": "2117715",
    "end": "2127610"
  },
  {
    "text": "All right, let's make\nsome pointers fly. OK, this is going to\nbe kind of a letdown,",
    "start": "2127610",
    "end": "2132680"
  },
  {
    "text": "because the first thing we're\ngoing to look at is some code. So we're not going to have\npointers flying just yet.",
    "start": "2132680",
    "end": "2137947"
  },
  {
    "text": " We can take a look at the code\nfor the spawning function foo,",
    "start": "2137947",
    "end": "2143900"
  },
  {
    "text": "at this point. And there's a lot of extra\ncode in here, clearly.",
    "start": "2143900",
    "end": "2148970"
  },
  {
    "text": "I've highlighted a lot\nof stuff on this slide, and all the\nhighlighted material is",
    "start": "2148970",
    "end": "2153980"
  },
  {
    "text": "related to the execution\nof the Cilk runtime system. But basically, if we\nlook at this code,",
    "start": "2153980",
    "end": "2160140"
  },
  {
    "text": "we can understand\neach of these pieces. Each of them has some role to\nplay in making the Cilk runtime",
    "start": "2160140",
    "end": "2167160"
  },
  {
    "text": "system work. So at the very beginning,\nwe have our Cilk stack frame structure. And there's a call\nto this enter frame",
    "start": "2167160",
    "end": "2175309"
  },
  {
    "text": "function, which all\nthat really does is initialize the stack frame. That's all the\nfunction is doing.",
    "start": "2175310",
    "end": "2181610"
  },
  {
    "text": "Later on, we find that there's\nthis set jump routine-- we'll talk a lot more\nabout set jump in a bit--",
    "start": "2181610",
    "end": "2186920"
  },
  {
    "text": "that, at this point, we can\nsay the set jump prepares the function for a spawn.",
    "start": "2186920",
    "end": "2192840"
  },
  {
    "text": "And inside the\nconditional, where",
    "start": "2192840",
    "end": "2197960"
  },
  {
    "text": "the set jump occurs\nas a predicate, we have a call to spawn bar. If we remember from a\ncouple of slides ago,",
    "start": "2197960",
    "end": "2203300"
  },
  {
    "text": "spawn bar was our\nspawn helper function. So we're here, we're just\ninvoking the spawn helper.",
    "start": "2203300",
    "end": "2208520"
  },
  {
    "text": "Later on in the code,\nwe have another blob of conditionals with a Cilk\nRTS sync call, deep inside.",
    "start": "2208520",
    "end": "2215510"
  },
  {
    "text": "All that code performs a sync. We'll talk about that a bit\nnear the end of lecture.",
    "start": "2215510",
    "end": "2221150"
  },
  {
    "text": "And finally, at the end\nof the spawning function, we have a call to pop\nframe, which just cleans up",
    "start": "2221150",
    "end": "2227569"
  },
  {
    "text": "the Cilk stack frame structure\nwithin this function. And then there's a call to\nleave frame, which essentially",
    "start": "2227570",
    "end": "2234680"
  },
  {
    "text": "cleans up the deque. That's the spawning function.",
    "start": "2234680",
    "end": "2240310"
  },
  {
    "text": "This is the spawn helper. It looks somewhat similar. I've added extra whitespace\njust to make the slide",
    "start": "2240310",
    "end": "2246000"
  },
  {
    "text": "a little bit prettier. And in some ways, it's similar\nto the spawning function itself.",
    "start": "2246000",
    "end": "2251400"
  },
  {
    "text": "We have a Cilk RTS stack frame\n[INAUDIBLE] spawn helper, another call to\nenter frame, which is just a little bit different.",
    "start": "2251400",
    "end": "2257550"
  },
  {
    "text": "But essentially, it\ninitializes the stack frame. Its reason to be is\nsimilar to the enter frame",
    "start": "2257550",
    "end": "2265260"
  },
  {
    "text": "call we saw before. There's a call to\nCilk RTS detach, which performs a bunch\nof updates on the deque.",
    "start": "2265260",
    "end": "2273280"
  },
  {
    "text": "Then there is the\nactual invocation of the spawn subroutine. This is where we're calling bar.",
    "start": "2273280",
    "end": "2278653"
  },
  {
    "text": "And finally, at the\nend of the function, there is a call to pop frame,\nto clean up the stack structure, and a call to leave frame,\nwhich will clean up the deck",
    "start": "2278653",
    "end": "2286920"
  },
  {
    "text": "and possibly return. It'll try to return. We'll see more about that. ",
    "start": "2286920",
    "end": "2294510"
  },
  {
    "text": "So let's watch all\nof this in action. Question? OK, cool. ",
    "start": "2294510",
    "end": "2302390"
  },
  {
    "text": "Let's see all of this in action. We'll start off with a\npretty boring picture. All we've got on our\ncall stack is main,",
    "start": "2302390",
    "end": "2308190"
  },
  {
    "text": "and our Cilk worker has\nnothing on its deque.  But now we suppose that main\ncalls our responding function",
    "start": "2308190",
    "end": "2316099"
  },
  {
    "text": "foo, and the\nspawning function foo contains a Cilk RTS stack frame.",
    "start": "2316100",
    "end": "2321813"
  },
  {
    "text": "What we're going to do in the\nCilk worker, what that enter frame call is going to\nperform, all it's going to do",
    "start": "2321813",
    "end": "2328153"
  },
  {
    "text": "is update the\ncurrent stack frame. We now have a Cilk\nRTS stack frame, make sure the worker\npoints at it, that's all.",
    "start": "2328153",
    "end": "2336460"
  },
  {
    "text": "Fast forward a little\nbit, and foo encounters this call to Cilk spawn a bar.",
    "start": "2336460",
    "end": "2342100"
  },
  {
    "text": "And in the C pseudocode\nthat's compiled for foo, we have a set jump routine.",
    "start": "2342100",
    "end": "2347410"
  },
  {
    "text": "This set jump is kind\nof a magical function. This is the function\nthat allows thieves",
    "start": "2347410",
    "end": "2352750"
  },
  {
    "text": "to steal the continuation. And in particular, the set\njump takes, as an argument,",
    "start": "2352750",
    "end": "2359290"
  },
  {
    "text": "a buffer. In this case, it's\nthe context buffer that we have in the\nCilk RTS stack frame.",
    "start": "2359290",
    "end": "2364322"
  },
  {
    "text": "And what the set\njump will do is it will store information\nthat's necessary to resume the function at the\nlocation of the set jump.",
    "start": "2364322",
    "end": "2372849"
  },
  {
    "text": "And it stores that\ninformation into the buffer. Can anyone guess what\nthat information might be? ",
    "start": "2372850",
    "end": "2385900"
  },
  {
    "text": "AUDIENCE: The instruction\npoints at [INAUDIBLE].. TAO SCHARDL: Instruction\npointer or stock pointer,",
    "start": "2385900",
    "end": "2392869"
  },
  {
    "text": "I believe both of\nthose are in the frame. Yeah, both of those\nare in the frame. Good, what else?",
    "start": "2392870",
    "end": "2398210"
  },
  {
    "start": "2398210",
    "end": "2406421"
  },
  {
    "text": "AUDIENCE: All the\nregisters are in use. TAO SCHARDL: All the registers\nare currently in use.",
    "start": "2406421",
    "end": "2412830"
  },
  {
    "text": "Does it need all the registers? You're absolutely\non the right track, but is there any way it could\nrestrict the set of registers",
    "start": "2412830",
    "end": "2419810"
  },
  {
    "text": "it needs to save? ",
    "start": "2419810",
    "end": "2425420"
  },
  {
    "text": "AUDIENCE: The registers are\nused later in the execution. TAO SCHARDL: That's part of it.",
    "start": "2425420",
    "end": "2430610"
  },
  {
    "text": "Set jump isn't\nthat clever though, so it just stores a\npredetermined set of registers.",
    "start": "2430610",
    "end": "2437120"
  },
  {
    "text": "But there is another\nway to restrict the set. ",
    "start": "2437120",
    "end": "2446146"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] TAO SCHARDL: Only\nregisters uses parameters",
    "start": "2446146",
    "end": "2452260"
  },
  {
    "text": "in the called function,\nyeah, close enough.",
    "start": "2452260",
    "end": "2457880"
  },
  {
    "text": "Callee-saved registers. So registers that\nthe function might--",
    "start": "2457880",
    "end": "2464460"
  },
  {
    "text": "that it's the responsibility\nof foo to save, this goes all the way back to\nthat discussion in lecture,",
    "start": "2464460",
    "end": "2472289"
  },
  {
    "text": "I don't remember which\nsmall number, talking about the calling convention.",
    "start": "2472290",
    "end": "2477785"
  },
  {
    "text": "These registers\nneed to be saved, as well as the instruction\npointer and various stack pointers. Those are what gets\nsaved into the buffer.",
    "start": "2477785",
    "end": "2484829"
  },
  {
    "text": "The other registers, well,\nwe're about to call a function, it's up to that other\nfunction to save the registers appropriately.",
    "start": "2484830",
    "end": "2490680"
  },
  {
    "text": "So we don't need to\nworry about those. ",
    "start": "2490680",
    "end": "2496936"
  },
  {
    "text": "So all good? Any questions about that? ",
    "start": "2496936",
    "end": "2502820"
  },
  {
    "text": "All right, so this\nset jump routine, let's take it for\ngranted that when we call a set jump on this\ngiven buffer, it returns zero.",
    "start": "2502820",
    "end": "2511790"
  },
  {
    "text": "That's a good lie for now. We'll just run with it. So set jump returs zero. The condition\nsays, if not zero--",
    "start": "2511790",
    "end": "2518690"
  },
  {
    "text": "which turns out to be true-- and so the next\nthing that happens is this call to the\nspawn helper, spawn_bar,",
    "start": "2518690",
    "end": "2526009"
  },
  {
    "text": "in this case. When we call spawn_bar,\nwhat happens to our stack?",
    "start": "2526010",
    "end": "2531990"
  },
  {
    "text": "So this should look\npretty routine. We're doing a function\ncall, and so we push the frame for the called\nfunction onto the stack.",
    "start": "2531990",
    "end": "2540950"
  },
  {
    "text": "And that called\nfunction, spawn bar, contains a local\nvariable, which is this [INAUDIBLE] stack frame.",
    "start": "2540950",
    "end": "2546860"
  },
  {
    "text": "So that also gets\npushed onto the stack, pretty straightforward. We've seen function\ncalls many times before.",
    "start": "2546860",
    "end": "2553460"
  },
  {
    "text": "This should look\npretty familiar. Now we do this Cilk RTS\nenter frame fast routine.",
    "start": "2553460",
    "end": "2559112"
  },
  {
    "text": "And I mentioned before\nthat that's going to update the worker structure.",
    "start": "2559113",
    "end": "2564200"
  },
  {
    "text": " So what's going to happen here?",
    "start": "2564200",
    "end": "2569930"
  },
  {
    "text": "Well, we have a brand new Cilk\nRTS stack frame on the stack. Any guesses as to\nwhat change we make?",
    "start": "2569930",
    "end": "2577070"
  },
  {
    "start": "2577070",
    "end": "2582430"
  },
  {
    "text": "What would enter frame do? AUDIENCE: [INAUDIBLE]",
    "start": "2582430",
    "end": "2587686"
  },
  {
    "text": "TAO SCHARDL: Point\ncurrent stack frame to spawn in bar stack\nframe, you're right. Anything else? ",
    "start": "2587687",
    "end": "2598306"
  },
  {
    "text": "Hope I got this animation right. ",
    "start": "2598306",
    "end": "2610550"
  },
  {
    "text": "What are the various fields\nwithin the stack frame? And what did-- sorry,\nI don't know your name.",
    "start": "2610550",
    "end": "2616820"
  },
  {
    "text": "What's your name?  AUDIENCE: I'm Greg. TAO SCHARDL: Greg, what\ndid Greg ask about before,",
    "start": "2616820",
    "end": "2624370"
  },
  {
    "text": "when we saw an earlier\npicture of the call stack? ",
    "start": "2624370",
    "end": "2638292"
  },
  {
    "text": "AUDIENCE: Set a\npointer to the parent. TAO SCHARDL: Set a pointer\nto the parent, exactly.",
    "start": "2638292",
    "end": "2643803"
  },
  {
    "text": "So what we're going\nto do is we're going to take this\ncall stack, we'll do the enter frame fast routine.",
    "start": "2643803",
    "end": "2649119"
  },
  {
    "text": "That establishes this parent\npointer in our brand new stack frame. And we update the worker's\ncurrent stack frame to point",
    "start": "2649120",
    "end": "2656637"
  },
  {
    "text": "at the bottom. Yeah, question? AUDIENCE: How does enter\nframe know what the parent is?",
    "start": "2656637",
    "end": "2661869"
  },
  {
    "text": "TAO SCHARDL: How does enter\nframe know what the parent is? Good question. Enter frame knows the worker.",
    "start": "2661870",
    "end": "2669950"
  },
  {
    "text": "Or rather, enter frame can do a\ncall, which will give it access to the Cilk worker structure.",
    "start": "2669950",
    "end": "2675915"
  },
  {
    "text": "And because it can\ndo a call, it can read the current stack\nframe pointer in the worker.",
    "start": "2675915",
    "end": "2681553"
  },
  {
    "text": "AUDIENCE: So we do\n[INAUDIBLE] before we change the current [INAUDIBLE]?",
    "start": "2681553",
    "end": "2686990"
  },
  {
    "text": "TAO SCHARDL: Yeah,\nin this case we do. So we add the parent pointer,\nthen we delete and update.",
    "start": "2686990",
    "end": "2695950"
  },
  {
    "text": "So, good catch. Any other questions? ",
    "start": "2695950",
    "end": "2705560"
  },
  {
    "text": "Cool.  All right, now we encounter\nthis thing, Cilk RTS detach.",
    "start": "2705560",
    "end": "2711190"
  },
  {
    "text": "This one's kind of exciting. Finally we get to do\nsomething to the deque.",
    "start": "2711190",
    "end": "2718720"
  },
  {
    "text": "Any guesses what we do? How do we update the deque? Here's a hint.",
    "start": "2718720",
    "end": "2723870"
  },
  {
    "text": "Cilk RTS detach allows-- this is the function that allows\nsome computation to be stolen.",
    "start": "2723870",
    "end": "2731380"
  },
  {
    "text": "Once Cilk RTS detach\nis done executing, a thief could come along\nand steal the continuation",
    "start": "2731380",
    "end": "2738610"
  },
  {
    "text": "of the Cilk spawn. So what would Cilk RTS\ndetach do to our worker",
    "start": "2738610",
    "end": "2746350"
  },
  {
    "text": "and its structures? ",
    "start": "2746350",
    "end": "2752060"
  },
  {
    "text": "Yeah, in the back. AUDIENCE: Push the stack\nframe to the worker deque? TAO SCHARDL: Push the stack\nframe to the worker deque,",
    "start": "2752060",
    "end": "2758510"
  },
  {
    "text": "specifically at the tail.  Right, I gave it away by\nclicking the animation,",
    "start": "2758510",
    "end": "2765725"
  },
  {
    "text": "oh well. Now the thing that's available\nto be stolen is inside of foo.",
    "start": "2765725",
    "end": "2771920"
  },
  {
    "text": "So what ends up getting\npushed onto the deque is not the current\nstack frame, but in fact its immediate parent, so\nthe stack frame of foo.",
    "start": "2771920",
    "end": "2780589"
  },
  {
    "text": "That gets pushed onto\nthe tail of the deque. And we now push something\nonto the tail of a deque.",
    "start": "2780590",
    "end": "2787340"
  },
  {
    "text": "And so we advance\nthe tail pointer. Still good, everyone? I see some nods.",
    "start": "2787340",
    "end": "2793730"
  },
  {
    "text": "I see at least one nod. I'll take it.  But feel free to ask\nquestions, of course.",
    "start": "2793730",
    "end": "2799730"
  },
  {
    "text": " And then of course there\nis this invocation of bar.",
    "start": "2799730",
    "end": "2806540"
  },
  {
    "text": "This does what you might expect. It calls bar, no magic here. Well, no new magic here.",
    "start": "2806540",
    "end": "2814890"
  },
  {
    "text": "OK, fast forward, let's suppose\nthat bar finally returns. And now we return\nto the statement",
    "start": "2814890",
    "end": "2820280"
  },
  {
    "text": "after bar in the spawn helper. That statement is the pop frame. ",
    "start": "2820280",
    "end": "2827210"
  },
  {
    "text": "Actually, since we\njust returned from bar, we need to get rid of\nbar from the stack frame. Good, now we can\nexecute the pop frame.",
    "start": "2827210",
    "end": "2834410"
  },
  {
    "text": "What would the pop frame do? It's going to clean up\nthe stack frame structure. So what would that\nentail, any guesses?",
    "start": "2834410",
    "end": "2842369"
  },
  {
    "text": " AUDIENCE: I guess it would move\nthe current stack frame back",
    "start": "2842370",
    "end": "2849640"
  },
  {
    "text": "to the parent stack frame? TAO SCHARDL: Move the current\nstack frame back to the parent, very good.",
    "start": "2849640",
    "end": "2856029"
  },
  {
    "text": "I think that's largely it.",
    "start": "2856030",
    "end": "2863330"
  },
  {
    "text": "I guess there's one\nother thing it can do. It's kind of optional,\ngiven that it's going to garbage the memory anyway.",
    "start": "2863330",
    "end": "2871869"
  },
  {
    "text": "So it updates the current stack\nframe to point to the parent, and now it no longer\nneeds that parent pointer. So it can clean that\nup, in principle.",
    "start": "2871870",
    "end": "2880359"
  },
  {
    "text": "And then there's this call\nto Cilk RTS leave frame. This is magic-- well, not\nreally, but it's not obvious.",
    "start": "2880360",
    "end": "2887590"
  },
  {
    "text": "This is a function call\nthat may or may not return. Welcome to the Cilk\nruntime system. You end up with\ncalls to functions",
    "start": "2887590",
    "end": "2894150"
  },
  {
    "text": "that you may never return from. This happens all the time.",
    "start": "2894150",
    "end": "2899619"
  },
  {
    "text": "And the Cilk RTS leave\nframe may or may not return, based entirely\non what's on the status",
    "start": "2899620",
    "end": "2906730"
  },
  {
    "text": "of the deque, what\ncontent is currently sitting on the workers' deque.",
    "start": "2906730",
    "end": "2913870"
  },
  {
    "text": "Anyone have a guess as\nto why the leave frame routine might not return,\nin the conventional sense?",
    "start": "2913870",
    "end": "2920559"
  },
  {
    "text": " AUDIENCE: There's nothing\nelse for the worker to do, so it'll sit there spinning.",
    "start": "2920560",
    "end": "2928958"
  },
  {
    "text": "TAO SCHARDL: If there's\nnothing left to do on the deck, then it's going to--\nsorry, say again? AUDIENCE: It'll just wait until\nthere's work you can steal?",
    "start": "2928958",
    "end": "2937190"
  },
  {
    "text": "TAO SCHARDL: Right, if\nthere's nothing on the deque, then it has nowhere\nto return to.",
    "start": "2937190",
    "end": "2942540"
  },
  {
    "text": "And so naturally, as we've seen\nfrom Cilk workers in the past,",
    "start": "2942540",
    "end": "2948003"
  },
  {
    "text": "it discovers there's nothing\non the deque, there's no work to do, time to turn\nto a life of crime, and try to steal work\nfrom someone else.",
    "start": "2948003",
    "end": "2954680"
  },
  {
    "text": " So there are two\npossible scenarios. The pop could succeed and\nexecution continues as normal,",
    "start": "2954680",
    "end": "2963349"
  },
  {
    "text": "or it fails and it\nbecomes a thief. Now which of these\ntwo cases do you",
    "start": "2963350",
    "end": "2968900"
  },
  {
    "text": "think is more important for\nthe runtime system to optimize? ",
    "start": "2968900",
    "end": "2980440"
  },
  {
    "text": "Success, case one,\nexactly, so why is that? ",
    "start": "2980440",
    "end": "2990074"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] TAO SCHARDL: At least,\nwe hope so, yeah. We assume-- this hearkens all\nthe way back to that work first",
    "start": "2990074",
    "end": "2998330"
  },
  {
    "text": "principle-- we assume that in\nthe common case, workers are doing\nuseful work, they're",
    "start": "2998330",
    "end": "3003520"
  },
  {
    "text": "not just spending their time\nstealing from each other. And therefore, ideally,\nwe want to assume",
    "start": "3003520",
    "end": "3011470"
  },
  {
    "text": "that the worker will\ndo what's normal, just an ordinary\nserial execution.",
    "start": "3011470",
    "end": "3017970"
  },
  {
    "text": "In a normal serial\nexecution, there is something on the deque, the\npop succeeds, that's case one.",
    "start": "3017970",
    "end": "3025280"
  },
  {
    "text": "So what we'll see is that\nthe runtime system, in fact, does a little bit of\noptimization on case one.",
    "start": "3025280",
    "end": "3031557"
  },
  {
    "text": "Let's talk about something\na little more exciting. How about stealing computation. We like stealing\nstuff from each other.",
    "start": "3031557",
    "end": "3039059"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE]",
    "start": "3039060",
    "end": "3053803"
  },
  {
    "text": "TAO SCHARDL: Where does\nit return the results? So where does it return the\nresult in the spawn bar?",
    "start": "3053803",
    "end": "3059770"
  },
  {
    "text": "The answer you can kind of\nsee two lines above this.",
    "start": "3059770",
    "end": "3065600"
  },
  {
    "text": "So in this case, in\nthe original Cilk code, we had X equals\nCilk spawn of bar.",
    "start": "3065600",
    "end": "3071150"
  },
  {
    "text": "And here, what are the\nparameters to our spawn bar function? ",
    "start": "3071150",
    "end": "3084150"
  },
  {
    "text": "X and N. Now N is the\ninput to bar, right?",
    "start": "3084150",
    "end": "3089760"
  },
  {
    "text": "So what's X? ",
    "start": "3089760",
    "end": "3099300"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]",
    "start": "3099300",
    "end": "3105163"
  },
  {
    "text": "TAO SCHARDL: You can\nrewind a little bit and see that you are correct.",
    "start": "3105163",
    "end": "3110300"
  },
  {
    "text": "There we go. Yeah, so the original Cilk code,\nwe had X equals Cilk spawn bar.",
    "start": "3110300",
    "end": "3116190"
  },
  {
    "text": "That's the same X.\nAll that Cilk does is pass a pointer to\nthe memory allocated",
    "start": "3116190",
    "end": "3122849"
  },
  {
    "text": "for that variable down\nto the spawn helper. And now the spawn helper, when\nit calls bar and that returns,",
    "start": "3122850",
    "end": "3131550"
  },
  {
    "text": "it gets stored into that storage\nin the parent stack frame. Good catch.",
    "start": "3131550",
    "end": "3138780"
  },
  {
    "text": "Good observation. Any questions about that? Does that make sense?",
    "start": "3138780",
    "end": "3145059"
  },
  {
    "text": "Cool. ",
    "start": "3145060",
    "end": "3150520"
  },
  {
    "text": "Probably used too many\nanimations in these slides. ",
    "start": "3150520",
    "end": "3156980"
  },
  {
    "text": "All right, now let's\ntalk about stealing. How does a worker\nsteal computation?",
    "start": "3156980",
    "end": "3163190"
  },
  {
    "text": "Now the conceptual\ndiagram we had before saw this one worker, with\nnothing on its deque,",
    "start": "3163190",
    "end": "3169730"
  },
  {
    "text": "take a couple of frames\nfrom another workers deque and just slide them on over.",
    "start": "3169730",
    "end": "3175130"
  },
  {
    "text": "What does that actually look\nlike in the implementation? Well, we're still going to\ntake from the top of the deque,",
    "start": "3175130",
    "end": "3181940"
  },
  {
    "text": "but now we have a picture\nthat's a little bit more accurate in terms of the\nstructures that are really",
    "start": "3181940",
    "end": "3189050"
  },
  {
    "text": "implemented in the system. So we have the call\nstack of the victim, and the victim also has a\ndeque data structure and a Cilk",
    "start": "3189050",
    "end": "3196520"
  },
  {
    "text": "worker data structure,\nwith head and tail pointers and a current stack frame.",
    "start": "3196520",
    "end": "3201860"
  },
  {
    "text": "So what happens when a thief\ncomes along out of nowhere? It's bored, it has\nnothing on its deque.",
    "start": "3201860",
    "end": "3207530"
  },
  {
    "text": "Head and tail pointers\nboth point to the top. Current stack frame has nothing. What's the thief going to do?",
    "start": "3207530",
    "end": "3214270"
  },
  {
    "text": "Any guesses? ",
    "start": "3214270",
    "end": "3237299"
  },
  {
    "text": "How does this thief\ntake the content from the worker's deque? ",
    "start": "3237300",
    "end": "3251190"
  },
  {
    "text": "AUDIENCE: The worker sets\ntheir current stack frame to the one that [INAUDIBLE]",
    "start": "3251190",
    "end": "3262150"
  },
  {
    "text": "TAO SCHARDL:\nExactly right, yeah. Sorry, was that--",
    "start": "3262150",
    "end": "3267220"
  },
  {
    "text": "I didn't mean to interrupt. All right, cool. So the red highlighting should\ngive a little bit of a hint.",
    "start": "3267220",
    "end": "3274210"
  },
  {
    "text": "The current stack\nframe in the thief is going to end up\npointing to the stack frame",
    "start": "3274210",
    "end": "3279790"
  },
  {
    "text": "at the top of the deque, pointed\nto by the top of the deque. And the head of the deque\nneeds to be updated.",
    "start": "3279790",
    "end": "3287060"
  },
  {
    "text": "So let's just see all\nthose pointers shuffle. The thief is going to target\nthe head of the deque.",
    "start": "3287060",
    "end": "3294920"
  },
  {
    "text": "It's going to deque that item\nfrom the top of the deck. It's going to set the\ncurrent stack frame",
    "start": "3294920",
    "end": "3301570"
  },
  {
    "text": "to point to that item, and\nit will delete the pointer on the deque.",
    "start": "3301570",
    "end": "3308530"
  },
  {
    "text": "That make sense? Cool. Now the victim and the thief\nare on different processors,",
    "start": "3308530",
    "end": "3317640"
  },
  {
    "text": "and this scenario involves\nshuffling a lot of pointers around. So if we think\nabout this process,",
    "start": "3317640",
    "end": "3325050"
  },
  {
    "text": "there needs to be\nsome way to handle the concurrent accesses\nthat are going to occur",
    "start": "3325050",
    "end": "3330188"
  },
  {
    "text": "on the head of the deque.  You haven't talked\nabout synchronization",
    "start": "3330188",
    "end": "3335660"
  },
  {
    "text": "yet in this class, that's going\nto be a couple lectures down the road. I'll give you a\ncouple of spoilers",
    "start": "3335660",
    "end": "3341150"
  },
  {
    "text": "for those\nsynchronization lectures. First off, synchronization\nis expensive. And second, reasoning\nabout synchronization",
    "start": "3341150",
    "end": "3348289"
  },
  {
    "text": "is a source of\nmassive headaches. Congratulations, you now\nknow those two lectures.",
    "start": "3348290",
    "end": "3354640"
  },
  {
    "text": "No, I'm just kidding. Go to the lectures, you'll\nlearn a lot, they're great. In the Cilk runtime\nsystem, the way",
    "start": "3354640",
    "end": "3362540"
  },
  {
    "text": "that those concurrent\naccesses are handled",
    "start": "3362540",
    "end": "3367820"
  },
  {
    "text": "is by using a protocol\nknown as the THE protocol. This is pseudo code for most of\nthe logic in the THE protocol.",
    "start": "3367820",
    "end": "3377569"
  },
  {
    "text": "There's a protocol that\nthe worker, executing work normally, follows. And there is the\nprotocol for the thief.",
    "start": "3377570",
    "end": "3383905"
  },
  {
    "text": "I'm not going to walk\nthrough all the lines of code here and describe what they do. I'll just give you the very high\nlevel view of this protocol.",
    "start": "3383905",
    "end": "3392390"
  },
  {
    "text": "From the thief's\nperspective, the thief always grabs a lock on the deque\nbefore doing any operations",
    "start": "3392390",
    "end": "3398660"
  },
  {
    "text": "on the deque. Always acquire the lock first. For the worker, it's a\nlittle bit more optimized.",
    "start": "3398660",
    "end": "3408160"
  },
  {
    "text": "So what the worker will\ndo is optimistically try to pop something from\nthe bottom of the deque.",
    "start": "3408160",
    "end": "3415119"
  },
  {
    "text": "And only if it looks like\nthat pop operation fails does the worker do\nsomething more complicated.",
    "start": "3415120",
    "end": "3421119"
  },
  {
    "text": "Only then does it try to\nacquire a lock on the deque, then try to pop something\noff, see if it really",
    "start": "3421120",
    "end": "3428350"
  },
  {
    "text": "succeeds or fails, and possibly\nturn to a life of crime.",
    "start": "3428350",
    "end": "3433810"
  },
  {
    "text": "So the worker's\nprotocol looks longer, but that's just because\nthe worker implements",
    "start": "3433810",
    "end": "3439930"
  },
  {
    "text": "a special case, which is\noptimized for the common case. This is essentially where\nthe leave frame routine,",
    "start": "3439930",
    "end": "3448420"
  },
  {
    "text": "that we saw before, is optimized\nfor case one, optimized for the pop from the\ndeque succeeding.",
    "start": "3448420",
    "end": "3456730"
  },
  {
    "text": "Any questions about that? Seem clear from 30,000 feet?",
    "start": "3456730",
    "end": "3463775"
  },
  {
    "text": "Cool. OK, so that's how a\nworker steals work",
    "start": "3463775",
    "end": "3469280"
  },
  {
    "text": "from the top of\nthe victim's deque. Now, that thief needs to\nresume a continuation.",
    "start": "3469280",
    "end": "3476330"
  },
  {
    "text": "And this is that whole process\nabout jumping into the middle of an executing function.",
    "start": "3476330",
    "end": "3481549"
  },
  {
    "text": "It already has a\nframe, it already has a [INAUDIBLE]\nstate going on, and all that was established\nby a different processor.",
    "start": "3481550",
    "end": "3489339"
  },
  {
    "text": "So somehow that thief\nhas to magically come up with the right state and\nstart executing that function.",
    "start": "3489340",
    "end": "3496880"
  },
  {
    "text": "How does that happen? Well, this has to do\nwith a routine that's the complement of the set\njump routine we saw before.",
    "start": "3496880",
    "end": "3504920"
  },
  {
    "text": "The complement of set jump\nis what's called long jump. So Cilk uses, in\nparticular Cilk thieves,",
    "start": "3504920",
    "end": "3510902"
  },
  {
    "text": "use the long jump\nfunction in order to resume a stolen continuation. Previously, in our\nspawning function foo,",
    "start": "3510902",
    "end": "3516830"
  },
  {
    "text": "we had this set jump call. And that set jump saved some\nstate to a local buffer,",
    "start": "3516830",
    "end": "3524390"
  },
  {
    "text": "in particular the buffer\nin the stack frame of foo. Now the thief has just created\nthis Cilk worker structure,",
    "start": "3524390",
    "end": "3533420"
  },
  {
    "text": "where the current\nstack frame is pointing at the stack frame of foo.",
    "start": "3533420",
    "end": "3539720"
  },
  {
    "text": "And so what the thief will\ndo is it'll execute a call, it'll execute the statement,\nit will execute the long jump",
    "start": "3539720",
    "end": "3547970"
  },
  {
    "text": "function, passing that\nparticular stack frame's buffer and an additional argument,\nand that long jump",
    "start": "3547970",
    "end": "3555190"
  },
  {
    "text": "will take the registered\nstate stored in the buffer, put that registered\nstate into the worker,",
    "start": "3555190",
    "end": "3560840"
  },
  {
    "text": "and then let the worker proceed. That make sense? Any questions about that?",
    "start": "3560840",
    "end": "3566474"
  },
  {
    "text": " This is kind of a wacky routine\nbecause, if you remember,",
    "start": "3566475",
    "end": "3574660"
  },
  {
    "text": "one of the registers\nstored in that buffer is an instruction pointer.",
    "start": "3574660",
    "end": "3579970"
  },
  {
    "text": "And so it's going to read\nthe instruction pointer out of the buffer. It's also going to read a\nbunch of callee-saved registers",
    "start": "3579970",
    "end": "3585585"
  },
  {
    "text": "and stack pointers\nout of the buffer. And it is going to say,\nthat's my register state now,",
    "start": "3585585",
    "end": "3591760"
  },
  {
    "text": "that's what the thief says. It just stole that\nregister state. And it's going to set its RAP\nto be the RAP it just read.",
    "start": "3591760",
    "end": "3601030"
  },
  {
    "text": "So what does that mean for where\nthe long jump routine returns?",
    "start": "3601030",
    "end": "3607375"
  },
  {
    "start": "3607375",
    "end": "3616452"
  },
  {
    "text": "AUDIENCE: It returns\ninto the stack frame above the [INAUDIBLE]",
    "start": "3616452",
    "end": "3621789"
  },
  {
    "text": "TAO SCHARDL: Returns\nthe stack frame above the one it just stole. More or less, but\nmore specifically,",
    "start": "3621790",
    "end": "3629020"
  },
  {
    "text": "where in that function\ndoes it return? AUDIENCE: Just after the call. TAO SCHARDL: Which call?",
    "start": "3629020",
    "end": "3635396"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] TAO SCHARDL: To the\nspawn bar, here?",
    "start": "3635396",
    "end": "3643869"
  },
  {
    "text": "Almost, very, very\nclose, very, very close.",
    "start": "3643870",
    "end": "3650000"
  },
  {
    "text": "What ends up happening is\nthat the long jump effectively returns from the set\njump a second time.",
    "start": "3650000",
    "end": "3655375"
  },
  {
    "text": " This is the weird protocol\nbetween set jump and long jump.",
    "start": "3655375",
    "end": "3662260"
  },
  {
    "text": "Set jump, you pass it a buffer,\nit saves and registers state, and then it returns. And it returns immediately,\nand on its directed vocation,",
    "start": "3662260",
    "end": "3669220"
  },
  {
    "text": "that set jump call\nreturns the value zero, as we mentioned before.",
    "start": "3669220",
    "end": "3674380"
  },
  {
    "text": "Now if you invoke a long\njump using the same buffer, that causes the processor\nto effectively return",
    "start": "3674380",
    "end": "3683950"
  },
  {
    "text": "from the same set jump call. They use the same buffer.",
    "start": "3683950",
    "end": "3689320"
  },
  {
    "text": "But now it's going to return\nwith a different value, and it's going to return\nwith the value specified in the second argument.",
    "start": "3689320",
    "end": "3695200"
  },
  {
    "text": "So invoking long jump\nof buffer X returns from that set jump\nwith the value",
    "start": "3695200",
    "end": "3700900"
  },
  {
    "text": "X. So when the thief\nexecutes a long jump",
    "start": "3700900",
    "end": "3707319"
  },
  {
    "text": "with the appropriate buffer,\nand the second argument is one, what happens?",
    "start": "3707320",
    "end": "3713097"
  },
  {
    "text": "Can anyone walk me through this? Oh, it's on the slide, OK. ",
    "start": "3713097",
    "end": "3719770"
  },
  {
    "text": "So now that set jump effectively\nreturns a second time, but now it returns\nwith a value one.",
    "start": "3719770",
    "end": "3727430"
  },
  {
    "text": "And now the predicate\ngets evaluated. So if not one, which\nwould be if false,",
    "start": "3727430",
    "end": "3734200"
  },
  {
    "text": "well don't do the consequent,\nbecause the predicate was false. And that means it's going to\nskip the call to spawn bar,",
    "start": "3734200",
    "end": "3741930"
  },
  {
    "text": "and it'll just fall through\nand execute the stuff right after that conditional,\nwhich happens to be",
    "start": "3741930",
    "end": "3749950"
  },
  {
    "text": "the continuation of the spawn. That's kind of neat.",
    "start": "3749950",
    "end": "3756099"
  },
  {
    "text": "I think that's kind of\nneat, being unbiased. Anyone else think\nthat's kind of neat? ",
    "start": "3756100",
    "end": "3763270"
  },
  {
    "text": "Excellent. Anyone desperately confused\nabout this set jump, long jump nonsense? ",
    "start": "3763270",
    "end": "3772650"
  },
  {
    "text": "Any questions you\nwant to ask, or just generally confused\nabout why these things exist in modern computing?",
    "start": "3772650",
    "end": "3778950"
  },
  {
    "text": " Yeah. AUDIENCE: Is there any\nreason you couldn't just",
    "start": "3778950",
    "end": "3784386"
  },
  {
    "text": "add, like, [INAUDIBLE]\nto the instruction point and jump over the call, instead? TAO SCHARDL: Is there any\nreason you couldn't just",
    "start": "3784386",
    "end": "3791220"
  },
  {
    "text": "add some fixed offset to\nthe instruction pointer to jump over the call?",
    "start": "3791220",
    "end": "3796500"
  },
  {
    "text": "In principle, I think,\nif you can statically compute the distance\nyou need to jump,",
    "start": "3796500",
    "end": "3802800"
  },
  {
    "text": "then you can just add that\nto RIP and let the long jump do its thing.",
    "start": "3802800",
    "end": "3808200"
  },
  {
    "text": "Or rather, the thief\nwill just adopt that RIP and end up in the right place. ",
    "start": "3808200",
    "end": "3817150"
  },
  {
    "text": "What's done here is-- basically, this was the\nprotocol that the existing set",
    "start": "3817150",
    "end": "3823750"
  },
  {
    "text": "jump and long jump\nroutines implement. And I imagine it's a bit\nmore flexible of a protocol",
    "start": "3823750",
    "end": "3832119"
  },
  {
    "text": "than what you strictly\nneed for the Cilk runtime. And so, you know, it\nends up working out.",
    "start": "3832120",
    "end": "3838182"
  },
  {
    "text": "But if you can statically\ncompute that offset, there's no reason in\nprinciple you couldn't adopt a different approach.",
    "start": "3838183",
    "end": "3843950"
  },
  {
    "text": "So, good observation.  Any questions?",
    "start": "3843950",
    "end": "3849970"
  },
  {
    "text": "Any other questions? It's fine to be\ngenerally confused why their routines,\nset jump and long jump,",
    "start": "3849970",
    "end": "3855390"
  },
  {
    "text": "with this wacky behavior. Compiler writers have that\nreaction all the time.",
    "start": "3855390",
    "end": "3861090"
  },
  {
    "text": "These are a\nnightmare to compile. Anyway, OK, so we've seen how a\nthief can take some computation",
    "start": "3861090",
    "end": "3870990"
  },
  {
    "text": "off of a victim's\ndeque, and we've seen how the thief\ncan jump right",
    "start": "3870990",
    "end": "3876570"
  },
  {
    "text": "into the middle of\nan executing function with the appropriate\nregister state. Is this the end of the story?",
    "start": "3876570",
    "end": "3882450"
  },
  {
    "text": "Is there anything else\nwe need to talk about, with respect to stealing? Or, more pointedly, what else\ndo we not need to talk about",
    "start": "3882450",
    "end": "3890078"
  },
  {
    "text": "with respect to stealing? ",
    "start": "3890078",
    "end": "3902020"
  },
  {
    "text": "You're welcome to\nanswer, if you like. OK. ",
    "start": "3902020",
    "end": "3908092"
  },
  {
    "text": "Hey, remember that\nlist of concerns we had at the beginning?",
    "start": "3908092",
    "end": "3913180"
  },
  {
    "text": "List of requirements\nis what it was called. ",
    "start": "3913180",
    "end": "3921960"
  },
  {
    "text": "We will talk about\nsyncs, but not just yet. ",
    "start": "3921960",
    "end": "3928230"
  },
  {
    "text": "What other thing was brought up? Remember this slide\nfrom a previous lecture? ",
    "start": "3928230",
    "end": "3935797"
  },
  {
    "text": "Here's another hint. So the register\nstate is certainly part of the state of\nan executing function.",
    "start": "3935797",
    "end": "3941520"
  },
  {
    "text": "What else defines a state\nof an executing function? Where doe the other state\nof the function live?",
    "start": "3941520",
    "end": "3948073"
  },
  {
    "text": " It lives on the stack,\nso what is there to talk",
    "start": "3948073",
    "end": "3955280"
  },
  {
    "text": "about regarding the stack? ",
    "start": "3955280",
    "end": "3960890"
  },
  {
    "text": "AUDIENCE: Cactus stack. TAO SCHARDL: The\ncactus stack, exactly. So you mentioned\nbefore that thieves",
    "start": "3960890",
    "end": "3968380"
  },
  {
    "text": "need to implement this\ncactus stack abstraction for the Cilk runtime system.",
    "start": "3968380",
    "end": "3973840"
  },
  {
    "text": " Why exactly do we need\nthis cactus stack?",
    "start": "3973840",
    "end": "3979510"
  },
  {
    "text": "What's wrong with just having\nthe thief use the victim's stack?",
    "start": "3979510",
    "end": "3984880"
  },
  {
    "start": "3984880",
    "end": "3992640"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]",
    "start": "3992640",
    "end": "4000422"
  },
  {
    "text": "TAO SCHARDL: The victim might\njust free up a bunch of stuff and then it's no\nlonger accessible.",
    "start": "4000422",
    "end": "4005680"
  },
  {
    "text": "So it can free some amount of\nstuff, in particular everything up to the function\nfoo, but in fact",
    "start": "4005680",
    "end": "4013859"
  },
  {
    "text": "it can't return from\nthe function foo because some other-- well, assuming that the\nCilk RTS leave frame thing",
    "start": "4013860",
    "end": "4021059"
  },
  {
    "text": "is implemented-- the function foo is no\nlonger in the stack, it won't ever reach it.",
    "start": "4021060",
    "end": "4026490"
  },
  {
    "text": "So it won't return\nfrom the function foo while another worker\nis working on it.",
    "start": "4026490",
    "end": "4033180"
  },
  {
    "text": "But good observation. There is something\nelse that can go wrong if the thief just directly\nuses the victim's stack.",
    "start": "4033180",
    "end": "4040895"
  },
  {
    "start": "4040895",
    "end": "4050880"
  },
  {
    "text": "Well, let's take a hint from\nthe slide we have so far. So the example that's\ngoing to be shown is that the thief steals\nthe continuation of foo,",
    "start": "4050880",
    "end": "4058660"
  },
  {
    "text": "and then the thief is going\nto call a function baz. ",
    "start": "4058660",
    "end": "4064180"
  },
  {
    "text": "So the thief is using\nthe victim's stack, and then it calls\na function baz. What goes wrong?",
    "start": "4064180",
    "end": "4069790"
  },
  {
    "start": "4069790",
    "end": "4077020"
  },
  {
    "text": "AUDIENCE: The victim\nhas called something, but underneath, there\nis some other function",
    "start": "4077020",
    "end": "4082430"
  },
  {
    "text": "stack [INAUDIBLE] TAO SCHARDL: Exactly. The victim in this\npicture, for example,",
    "start": "4082430",
    "end": "4090109"
  },
  {
    "text": "has some other functions\non its stack below foo. So if the thief does any\nfunction calls and is using",
    "start": "4090110",
    "end": "4097729"
  },
  {
    "text": "the same stack, it's going to\nscribble all over the state of, in this case\nspawn bar, and bar,",
    "start": "4097729",
    "end": "4104000"
  },
  {
    "text": "which the victim is trying\nto use and maintain. So the thief will end up\ncorrupting the victim stack.",
    "start": "4104000",
    "end": "4111159"
  },
  {
    "text": "And if you think about it, it's\nalso possible for the victim to call the thief stack. They can't share\na stack, but they",
    "start": "4111160",
    "end": "4117949"
  },
  {
    "text": "do want to share some\namount of data on the stack. They do both care\nabout the state of foo,",
    "start": "4117950",
    "end": "4124520"
  },
  {
    "text": "and that needs to be consistent\nacross all the workers. But we at least need a separate\ncall stack for the thief.",
    "start": "4124520",
    "end": "4133370"
  },
  {
    "text": "We'd rather not do\nunnecessary work in order to initialize\nthis call stack, however.",
    "start": "4133370",
    "end": "4139399"
  },
  {
    "text": "We really need this call stack\nfor things that the thief might invoke, local variables\nthe thief might need,",
    "start": "4139399",
    "end": "4147439"
  },
  {
    "text": "or functions that the\nthief might call or spawn. OK, so how do we implement\nthe cactus stack?",
    "start": "4147439",
    "end": "4155000"
  },
  {
    "text": "We have a victim stack,\nwe have a thief stack, and we have a pretty cute\ntrick, in my opinion.",
    "start": "4155000",
    "end": "4162500"
  },
  {
    "text": "So the thief steals\nits continuation. It's going to do a little bit of\nmagic with its stack pointers.",
    "start": "4162500",
    "end": "4169100"
  },
  {
    "text": "What it's going to\ndo is it's going to use the RBP it was given,\nwhich points out the victim",
    "start": "4169100",
    "end": "4174470"
  },
  {
    "text": "stack, and it's going\nto set the stack pointer to point at its own stack.",
    "start": "4174470",
    "end": "4180259"
  },
  {
    "text": "So RBP is over there,\nand RSP, for the thief, is pointing to the beginning\nof the thief's call stack.",
    "start": "4180260",
    "end": "4188600"
  },
  {
    "text": "And that is basically fine. The thief can access all the\nstate in the function foo,",
    "start": "4188600",
    "end": "4194570"
  },
  {
    "text": "as offsets from RBP,\nbut if the thief needs to do any\nfunction calls, we",
    "start": "4194570",
    "end": "4200060"
  },
  {
    "text": "have a calling\nconvention that involves saving RBP and updating RSP\nin order to execute the call.",
    "start": "4200060",
    "end": "4208829"
  },
  {
    "text": "So in particular, the thief\ncalls the function baz, it saves its current value\nof RBP onto its own stack,",
    "start": "4208830",
    "end": "4216260"
  },
  {
    "text": "it advances RSP, it\nsays RBP equals RSP, it pushes the stack frame\nfor baz onto the stack,",
    "start": "4216260",
    "end": "4222740"
  },
  {
    "text": "and it advances RSP\na little bit further. And just like that, the thief is\nchurning away on its own stack.",
    "start": "4222740",
    "end": "4231020"
  },
  {
    "text": "So just with this magic of\nRBP pointing there and RSP pointing here, we\ngot our cactus stack.",
    "start": "4231020",
    "end": "4239575"
  },
  {
    "text": "Everyone follow that? ",
    "start": "4239575",
    "end": "4247100"
  },
  {
    "text": "Anyone desperately confused\nby this stack pointer? ",
    "start": "4247100",
    "end": "4254429"
  },
  {
    "text": "Who thinks this is\nkind of a neat trick? All right, cool.",
    "start": "4254430",
    "end": "4260656"
  },
  {
    "text": "Anyone think this is a\nreally mundane trick? Hopefully no one thinks\nit's a mundane trick.",
    "start": "4260657",
    "end": "4265810"
  },
  {
    "text": "OK, there's like half a\nhand there, that's fine. I think this is a neat\ntrick, just messing around",
    "start": "4265810",
    "end": "4272450"
  },
  {
    "text": "with the stack pointers. Are there any worries about\nusing RBP and RSP this way? Any concerns that you might\nthink of from using these two",
    "start": "4272450",
    "end": "4284210"
  },
  {
    "text": "stack pointers as described? In a past lecture,\nbriefly mentioned",
    "start": "4284210",
    "end": "4291470"
  },
  {
    "text": "was a compiler optimization\nfor dealing with stacks. Yeah. AUDIENCE: [INAUDIBLE] We\nwere offsetting [INAUDIBLE]",
    "start": "4291470",
    "end": "4305152"
  },
  {
    "text": "TAO SCHARDL: Right, there\nwas a compiler optimization that said, in certain cases\nyou don't need both the base",
    "start": "4305152",
    "end": "4311290"
  },
  {
    "text": "pointer and the stack pointer. You can do all offsets. I think it's actually\noff the stack pointer, and then the base\npointer becomes",
    "start": "4311290",
    "end": "4317545"
  },
  {
    "text": "an additional general\npurpose register. That optimization\nclearly does not",
    "start": "4317545",
    "end": "4322660"
  },
  {
    "text": "work if you need the base\npointer stack pointer to do this wacky trick.",
    "start": "4322660",
    "end": "4328510"
  },
  {
    "text": " The answer is that the\nCilk compiler specifically",
    "start": "4328510",
    "end": "4335949"
  },
  {
    "text": "says, if this function\nhas a continuation that could be stolen, don't\ndo that optimization.",
    "start": "4335950",
    "end": "4341530"
  },
  {
    "text": "It's super illegal, it's very\nbad, don't do the optimization.",
    "start": "4341530",
    "end": "4346664"
  },
  {
    "text": "So that ends up\nbeing the answer. And it costs us a\ngeneral purpose register for Cilk functions,\nnot the biggest loss",
    "start": "4346665",
    "end": "4352449"
  },
  {
    "text": "in the world, all right. There's a little\nbit of time left, so we can talk about\nsynchronizing computation.",
    "start": "4352450",
    "end": "4361897"
  },
  {
    "text": "I'll give you a brief\nversion of this. This part gets\nfairly complicated, and so I'll give you\na high level summary",
    "start": "4361897",
    "end": "4368820"
  },
  {
    "text": "of how all of this works. So just to page back\nin some context,",
    "start": "4368820",
    "end": "4374920"
  },
  {
    "text": "we have this scenario where\ndifferent processors are executing different parts\nof our computation dag,",
    "start": "4374920",
    "end": "4381150"
  },
  {
    "text": "and one processor might\nencounter a Cilk sync statement that it can't execute because\nsome other processor is busy",
    "start": "4381150",
    "end": "4387599"
  },
  {
    "text": "executing a spawn\nsubcomputation. Now, in this case,\nP3 is waiting on P1",
    "start": "4387600",
    "end": "4394500"
  },
  {
    "text": "to finish its execution\nbefore the sync can proceed. And synchronization\nneeds to happen, really,",
    "start": "4394500",
    "end": "4400770"
  },
  {
    "text": "only on the subcomputation\nthat P1 is executing. P2 shouldn't play\na role in this.",
    "start": "4400770",
    "end": "4406380"
  },
  {
    "text": " So what exactly happens\nwhen a worker reaches a Cilk",
    "start": "4406380",
    "end": "4411835"
  },
  {
    "text": "sync before all the spawned\nsubcomputations return? Well, we'd like the\nworker to become a thief.",
    "start": "4411835",
    "end": "4417750"
  },
  {
    "text": "We'd rather the worker\nnot just sit there and wait until all the spawned\nsubcomputations return.",
    "start": "4417750",
    "end": "4423030"
  },
  {
    "text": "That's a waste of a\nperfectly good worker. But we also can't let the\nworker's current function",
    "start": "4423030",
    "end": "4429900"
  },
  {
    "text": "frame disappear. There is a spawned\nsubcomputation that's using that frame. That frame is its parent.",
    "start": "4429900",
    "end": "4436110"
  },
  {
    "text": "It may be accessing\nstate in that frame, it may be trying to\nsave a return value to some location in that frame.",
    "start": "4436110",
    "end": "4443280"
  },
  {
    "text": "And so the frame\nhas to persist, even if the worker that's\nworking on the frame",
    "start": "4443280",
    "end": "4449100"
  },
  {
    "text": "goes off and becomes a thief. Moreover, in the future, that\nsubcomputation, we believe,",
    "start": "4449100",
    "end": "4455210"
  },
  {
    "text": "should return. And that worker must\nresume the frame",
    "start": "4455210",
    "end": "4460350"
  },
  {
    "text": "and actually execute\npast the Cilk sync. Finally, the Cilk\nsync should only",
    "start": "4460350",
    "end": "4466650"
  },
  {
    "text": "apply to the nested\nsubcomputations underneath its function,\nnot the program in general. And so we don't allow ourselves\nsynchronization, just among all",
    "start": "4466650",
    "end": "4476460"
  },
  {
    "text": "the workers, wholesale. We don't say, OK,\nwe've hit a sync, every worker in the\nsystem must reach",
    "start": "4476460",
    "end": "4482910"
  },
  {
    "text": "some point in the execution. We only care about this\nnested synchronization.",
    "start": "4482910",
    "end": "4489930"
  },
  {
    "text": "So if we think about\nthis, and we're talking about nested\nsynchronization for computations\nunder a function,",
    "start": "4489930",
    "end": "4496500"
  },
  {
    "text": "we have this notion\nof cactus stack, we have this notion of a\ntree of function invocations.",
    "start": "4496500",
    "end": "4503280"
  },
  {
    "text": "We may immediately\nstart to think about, well, what if we just maintain\nsome state, in a tree,",
    "start": "4503280",
    "end": "4509130"
  },
  {
    "text": "to keep track of who needs\nthis to synchronize with whom, which computations\nare waiting on which",
    "start": "4509130",
    "end": "4514590"
  },
  {
    "text": "other computations to finish? And, in fact, that's essentially\nwhat the Cilk runtime system does.",
    "start": "4514590",
    "end": "4519690"
  },
  {
    "text": "It maintains a tree of\nstates called full frames,",
    "start": "4519690",
    "end": "4524760"
  },
  {
    "text": "and those full\nframes store state for the parallel\nsubcomputations. And those full frames\nkeep track of which",
    "start": "4524760",
    "end": "4531900"
  },
  {
    "text": "subcomputations are standing and\nhow they relate to each other.",
    "start": "4531900",
    "end": "4536949"
  },
  {
    "text": "This is a high level\npicture of a full frame. There are lots of details\nhighlighted, to be honest.",
    "start": "4536950",
    "end": "4543869"
  },
  {
    "text": "But at 30,000 feet,\na full frame keeps track of a bunch of information\nfor the parallel execution--",
    "start": "4543870",
    "end": "4549929"
  },
  {
    "text": "I know, I'm giving you the\nquick version of this-- including pointers\nto parent frames",
    "start": "4549930",
    "end": "4555930"
  },
  {
    "text": "and possibly pointers to child\nframes, or at least the number of outstanding child frames.",
    "start": "4555930",
    "end": "4561967"
  },
  {
    "text": "The processors, when\nthere's a system, work on what are called\nactive full frames. In the diagram,\nthose full frames",
    "start": "4561967",
    "end": "4567750"
  },
  {
    "text": "are the rounded rectangles\nhighlighted in dark blue. Other full frames in the system\nare, what we call, suspended.",
    "start": "4567750",
    "end": "4575960"
  },
  {
    "text": "They're waiting on some\nsubcomputation to return. That's what a full frame\ntree can look like under,",
    "start": "4575960",
    "end": "4583440"
  },
  {
    "text": "some execution. Let's see how a full frame\ntree can come into being, just by working through an animation.",
    "start": "4583440",
    "end": "4591450"
  },
  {
    "text": "So suppose we have some\nworker with a bunch of spawned and called frames on its deque. No other workers have\nanything on their deques.",
    "start": "4591450",
    "end": "4599880"
  },
  {
    "text": "And finally, some\nworker wants to steal.",
    "start": "4599880",
    "end": "4605320"
  },
  {
    "text": "And I'll admit, this animation\nis crafted slightly, just",
    "start": "4605320",
    "end": "4610380"
  },
  {
    "text": "to make the pictures\na little bit nicer. It can look more\ncomplicated in practice,",
    "start": "4610380",
    "end": "4616380"
  },
  {
    "text": "don't worry, if that was\nactually a worry of yours. So what's going to\nhappen, the thief",
    "start": "4616380",
    "end": "4622500"
  },
  {
    "text": "is going to take some frames\nfrom the top of the victim's deque. And it's actually going to\nsteal not just those frames,",
    "start": "4622500",
    "end": "4629400"
  },
  {
    "text": "but the whole full frame\nstructure along with it. The full frame structure\nis just represented",
    "start": "4629400",
    "end": "4634560"
  },
  {
    "text": "with this rounded rectangle. In fact, it's a\nconstant size thing. But the thief is going to take\nthe whole full frame structure.",
    "start": "4634560",
    "end": "4642570"
  },
  {
    "text": "And it's going to give the\nvictim a brand new full frame",
    "start": "4642570",
    "end": "4647579"
  },
  {
    "text": "and establish the child to\nparent pointer in the victim's",
    "start": "4647580",
    "end": "4653700"
  },
  {
    "text": "new full frame. That's kind of weird. It's not obvious why the thief\nwould take the full frame",
    "start": "4653700",
    "end": "4660420"
  },
  {
    "text": "as it's stealing computation,\nat least not from one step.",
    "start": "4660420",
    "end": "4665520"
  },
  {
    "text": "But we can see why it helps,\njust given one more step. So let's fast forward\nthis picture a little bit,",
    "start": "4665520",
    "end": "4671000"
  },
  {
    "text": "and now we have another worker\ntry to steal some computation,",
    "start": "4671000",
    "end": "4676350"
  },
  {
    "text": "and we have a little\nbit more stuff going on. So this worker might randomly\nselect the last worker",
    "start": "4676350",
    "end": "4682170"
  },
  {
    "text": "on the right, steal computation\nfrom the top of its deque, and it's going to steal\nthe full frame along",
    "start": "4682170",
    "end": "4688920"
  },
  {
    "text": "with the deque frames.",
    "start": "4688920",
    "end": "4694350"
  },
  {
    "text": "And because it stole\nthe full frame, all pointers to that full frame\nfrom any child subcomputations",
    "start": "4694350",
    "end": "4701910"
  },
  {
    "text": "are still valid. The child's\ncomputation on the left still points to the\ncorrect full frame.",
    "start": "4701910",
    "end": "4710120"
  },
  {
    "text": "The full frame that was\nstolen has the parent context of that child, and so\nwe need to make sure",
    "start": "4710120",
    "end": "4715650"
  },
  {
    "text": "that pointer is still good. If it created a new\nfull frame for itself,",
    "start": "4715650",
    "end": "4722310"
  },
  {
    "text": "then you would have to update\nthe child pointers somehow, and that requires more\nsynchronization and a more",
    "start": "4722310",
    "end": "4728670"
  },
  {
    "text": "complicated protocol. Synchronization is expensive,\nprotocols are complicated.",
    "start": "4728670",
    "end": "4734010"
  },
  {
    "text": "This ends up saving\nsome complexity. And then it creates a\nframe for the child,",
    "start": "4734010",
    "end": "4741710"
  },
  {
    "text": "and we can see\nthis process unfold just a little bit further.",
    "start": "4741710",
    "end": "4747170"
  },
  {
    "text": "And we'll hold off for a few\nsteals, we end up with a tree. We have two children\npointing to one parent,",
    "start": "4747170",
    "end": "4754550"
  },
  {
    "text": "and one of those children\nhas its own child. Great.",
    "start": "4754550",
    "end": "4760010"
  },
  {
    "text": "Now suppose that some worker\nsays, oh, I encountered a sync, can I synchronize? In this case, the worker has an\noutstanding child computation",
    "start": "4760010",
    "end": "4767120"
  },
  {
    "text": "so it can't synchronize. And so we can't\nrecycle the full frame,",
    "start": "4767120",
    "end": "4772489"
  },
  {
    "text": "we can't recycle any of\nthe stack for this child. And so, instead, the worker\nwill suspend this full frame,",
    "start": "4772490",
    "end": "4779700"
  },
  {
    "text": "turning it from dark blue to\nlight blue in our picture, and it goes and becomes a thief. ",
    "start": "4779700",
    "end": "4788440"
  },
  {
    "text": "The program has\nample parallelism. What do we expect to typically\nhappen when the program execution reaches a Cilk sync?",
    "start": "4788440",
    "end": "4794858"
  },
  {
    "text": "We're kind of out\nof time, so I think I'm just going to spoil the\nanswer for this, unless anyone has a guess handy.",
    "start": "4794858",
    "end": "4800700"
  },
  {
    "start": "4800700",
    "end": "4806280"
  },
  {
    "text": "So what's the common\ncase for a Cilk sync? ",
    "start": "4806280",
    "end": "4817000"
  },
  {
    "text": "For the sake of\ntime, the common case is that the executing function\nhas no outstanding children.",
    "start": "4817000",
    "end": "4822443"
  },
  {
    "text": "All the workers\non the system were busy doing their\nown thing, there is no synchronization\nthat's necessary.",
    "start": "4822443",
    "end": "4829166"
  },
  {
    "text": "And so how does the\nruntime optimize this case? It ends up having\nthe full frame,",
    "start": "4829166",
    "end": "4836980"
  },
  {
    "text": "uses some bits of an\nassociated stack frame, in particular the flag field.",
    "start": "4836980",
    "end": "4843469"
  },
  {
    "text": "And that's why, when we look\nat the compiled code for a Cilk sync, we see some conditions\nthat evaluate the flags",
    "start": "4843470",
    "end": "4850170"
  },
  {
    "text": "within the local stack frame. That's just an optimization to\nsay, if you don't need a sync,",
    "start": "4850170",
    "end": "4856409"
  },
  {
    "text": "don't do any computation,\notherwise some steals really",
    "start": "4856410",
    "end": "4861960"
  },
  {
    "text": "did occur, go ahead and execute\nthe Cilk RTS sync routine.",
    "start": "4861960",
    "end": "4867237"
  },
  {
    "text": "There are a bunch of\nother runtime features. If you take a look at that\npicture for a long time, you may be dissatisfied with\nwhat that implies about some",
    "start": "4867237",
    "end": "4875130"
  },
  {
    "text": "of the protocols. And there's a lot more code\nwithin the runtime system itself, to implement a\nvariety of other features such",
    "start": "4875130",
    "end": "4881490"
  },
  {
    "text": "as support for C++ exceptions,\nreducer hyperobjects, and a form of IDs\ncalled pedigrees.",
    "start": "4881490",
    "end": "4889920"
  },
  {
    "text": "We won't talk about that today. I'm actually all out of time. Thanks for listening to all this\nabout the Cilk runtime system.",
    "start": "4889920",
    "end": "4898510"
  },
  {
    "text": "Feel free to ask any\nquestions after class. ",
    "start": "4898510",
    "end": "4906445"
  }
]