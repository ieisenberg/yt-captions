[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5988"
  },
  {
    "start": "5988",
    "end": "12980"
  },
  {
    "text": "YAEL T. KALAI: Let's start. So first homework\nassignment is out.",
    "start": "12980",
    "end": "19590"
  },
  {
    "text": "As I said, it's due right\nbefore Thanksgiving.",
    "start": "19590",
    "end": "25310"
  },
  {
    "text": "If anybody needs an\nextension, just let me know. And the instructions\nare on the site.",
    "start": "25310",
    "end": "33110"
  },
  {
    "text": "Essentially, each one should\nwrite like their own solution so make sure you understand.",
    "start": "33110",
    "end": "38640"
  },
  {
    "text": "It's OK if you talk\namong one another as long as it's fruitful. And please type it up\nin LATAC and submit it",
    "start": "38640",
    "end": "44450"
  },
  {
    "text": "through Gradescope. Questions? Yeah. AUDIENCE: Is there a\nGradescope code for this class?",
    "start": "44450",
    "end": "49789"
  },
  {
    "text": "In GradeScope, I thought you\ngo into GradeScope online to do that. YAEL T. KALAI: Oh. ",
    "start": "49790",
    "end": "58820"
  },
  {
    "text": "Why can't you-- don't you use\nGradescope for other classes? AUDIENCE: Yeah. But I'm mostly in this class.",
    "start": "58820",
    "end": "64580"
  },
  {
    "text": "YAEL T. KALAI: Oh, no, it is. It is now. When did you check? AUDIENCE: Oh. It is like a while ago.",
    "start": "64580",
    "end": "69780"
  },
  {
    "text": "YAEL T. KALAI: It's recently. Yeah. If there's issues, let me know. Yeah. This class is assigned.",
    "start": "69780",
    "end": "75470"
  },
  {
    "text": "There is a GradeScope\nsite for this. Any other questions\nbefore we start?",
    "start": "75470",
    "end": "84290"
  },
  {
    "text": "OK. So just a quick\nrecap, so last time",
    "start": "84290",
    "end": "89660"
  },
  {
    "text": "we talked about the\nKilian-Micali protocol. It's an interactive argument.",
    "start": "89660",
    "end": "94680"
  },
  {
    "text": "It's a succinct,\ninteractive argument which you can use to prove\nmembership in any NP language.",
    "start": "94680",
    "end": "102950"
  },
  {
    "text": "And if you recall,\nthe idea was we started before that was kind of\nour entrance to cryptography.",
    "start": "102950",
    "end": "108930"
  },
  {
    "text": "So we said the idea of\nthe Kilian-Micali protocol is that you take any PCP,\nwhich is very, very large",
    "start": "108930",
    "end": "115460"
  },
  {
    "text": "but very efficiently, if you\njust have RAM access to it, you can verify it\nvery efficiently.",
    "start": "115460",
    "end": "120580"
  },
  {
    "text": "And the idea is you take\nthis very, very large PCP and you shrink it to digest\nit down using cryptography",
    "start": "120580",
    "end": "131310"
  },
  {
    "text": "to this kind of succinct digest. This is done using\nhash function but, in particular,\nMerkle hash or hash",
    "start": "131310",
    "end": "138300"
  },
  {
    "text": "function that are succinct\nbut can be opened locally. So I'll recall what\nthis is in a second.",
    "start": "138300",
    "end": "144540"
  },
  {
    "text": "And once the prover sends over\na squished form of the PCP,",
    "start": "144540",
    "end": "150459"
  },
  {
    "text": "then the verifier now behaves\nlike he's a PCP verifier. He tells the prover, open\nthis PCP and the location",
    "start": "150460",
    "end": "156810"
  },
  {
    "text": "that the PCP verifier\nwould want to open. And he gets back the openings.",
    "start": "156810",
    "end": "162730"
  },
  {
    "text": "So that's what the\nKilian-Micali protocol is.",
    "start": "162730",
    "end": "168459"
  },
  {
    "text": "But in order to-- when I said it squishes\ndown and then there's",
    "start": "168460",
    "end": "174030"
  },
  {
    "text": "opening, really,\nwhat we need is, A, we want to take a hash function. So if you remember,\na hash function is--",
    "start": "174030",
    "end": "181680"
  },
  {
    "text": "consists of a key\ngeneration algorithm that generates a hash key\nand an eval algorithm that",
    "start": "181680",
    "end": "187440"
  },
  {
    "text": "take a hash key and an input\nand generates a digest, or a hash value.",
    "start": "187440",
    "end": "192959"
  },
  {
    "text": "Last time, we talked we--\nshowed how to get a hash value--",
    "start": "192960",
    "end": "199270"
  },
  {
    "text": "how to construct from\nthe discrete log-- we showed how to\nconstruct a hash function",
    "start": "199270",
    "end": "205470"
  },
  {
    "text": "from 2 lambda, 2 lambda. It takes two lambda bits. The lambda bits actually\nwas z, p to the 2 lambda",
    "start": "205470",
    "end": "213599"
  },
  {
    "text": "to zp to lambda. But anyway, one can encode it to\nhave to be 0, 1 to the 2 lambda",
    "start": "213600",
    "end": "220620"
  },
  {
    "text": "to 0, 1 to the lambda. But this is actually not enough\nfor the Kilian-Micali protocol.",
    "start": "220620",
    "end": "226750"
  },
  {
    "text": "What we actually need is\na collision-resistant hash function. First, it needs to be\nmuch bigger because we're",
    "start": "226750",
    "end": "232338"
  },
  {
    "text": "taking a gigantic PCP. We want to squish it\nway more than half. This takes-- make--",
    "start": "232338",
    "end": "239070"
  },
  {
    "text": "squishes the size-- reduces the\nsize from 2 lambda to lambda. So it squishes it\nby a factor of 2.",
    "start": "239070",
    "end": "244660"
  },
  {
    "text": "We actually want to squish\nit a much bigger factor. So we want to take eval--",
    "start": "244660",
    "end": "250329"
  },
  {
    "text": "what we use actually\nis an eval algorithm that takes strings of size\n2 to the lambda to lambda.",
    "start": "250330",
    "end": "256540"
  },
  {
    "text": "So note here the\nlambda is upstairs. It's very different\nthan 2 lambda. It's exponential difference.",
    "start": "256540",
    "end": "263820"
  },
  {
    "text": "So we take a hash\nfunction that goes-- takes gigantic\nstrings to lambda.",
    "start": "263820",
    "end": "270340"
  },
  {
    "text": "And moreover, another\nproperty that we want is we can open locally. Remember, we said the way\nthe Kilian-Micali protocol",
    "start": "270340",
    "end": "276900"
  },
  {
    "text": "works is that the verifier asks,\nyou committed a gigantic PCP.",
    "start": "276900",
    "end": "282570"
  },
  {
    "text": "Open it in location\n3, 7, and 15. Now, how do you open it?",
    "start": "282570",
    "end": "288695"
  },
  {
    "text": "So we also want a\nopening algorithm. So really, what we needed when\nwe talked about Merkle hash,",
    "start": "288695",
    "end": "295340"
  },
  {
    "text": "or hashes with local opening-- in addition to having a key\ngeneration and eval algorithm,",
    "start": "295340",
    "end": "302180"
  },
  {
    "text": "we also have a\nopen algorithm that generates a succinct\nopening and which",
    "start": "302180",
    "end": "308607"
  },
  {
    "text": "can be verified in the\nverification algorithm that verifies it. So last time, when we\nconstructed this Merkle hash--",
    "start": "308607",
    "end": "314410"
  },
  {
    "text": "I'll recall it today quickly. And we ended with how-- proving\nthat it's collision-resistant.",
    "start": "314410",
    "end": "320150"
  },
  {
    "text": "So that's where we're\ngoing to start today. We're going to just wrap up\nthe Kilian-Micali protocol",
    "start": "320150",
    "end": "326080"
  },
  {
    "text": "by explaining the\nthing that was left is to argue that this Merkle\nhash construction is, indeed,",
    "start": "326080",
    "end": "333400"
  },
  {
    "text": "collision-resistant. So that's where we're\ngoing to start today. So once we do that, once we\nargue that we have this Merkle",
    "start": "333400",
    "end": "341950"
  },
  {
    "text": "hash, we prove that it's\ncollision-resistant, then we're done with\nthe Kilian-Micali. You actually proved that it's\nsound under this assumption.",
    "start": "341950",
    "end": "351380"
  },
  {
    "text": "So where are we heading today\nafter we finish the Merkle hash? Now we actually showed a\nsuccinct argument for all of np.",
    "start": "351380",
    "end": "361300"
  },
  {
    "text": "This is great. However, it's interactive. And interactive proofs\nor arguments are really--",
    "start": "361300",
    "end": "367930"
  },
  {
    "text": "they're not very useful. And the reason they're not very\nuseful is for many reasons.",
    "start": "367930",
    "end": "374120"
  },
  {
    "text": "A, there's latency. We need to talk back,\nforth, back, forth. But another reason, perhaps\nmuch more important,",
    "start": "374120",
    "end": "380860"
  },
  {
    "text": "is that it's per verifier. So if I want to just prove\nto the world some statement,",
    "start": "380860",
    "end": "387440"
  },
  {
    "text": "I can prove it using-- I'm not going to go to\neach person in the world and give them an\ninteractive proof.",
    "start": "387440",
    "end": "393199"
  },
  {
    "text": "So it's really\nverifier-specific. Interactive proofs\nare verifier-specific. It convinces the specific\nverifier you talk with.",
    "start": "393200",
    "end": "401420"
  },
  {
    "text": "And we want a prove\nthat convinces everyone. So that's where-- the\nsegue we're taking today.",
    "start": "401420",
    "end": "409340"
  },
  {
    "text": "How do we construct,\nactually, non-interactive, one that will-- to\nreduce interaction?",
    "start": "409340",
    "end": "416470"
  },
  {
    "text": "So what we're going to show is\nhow to eliminate interaction. And this is going\nto be done using",
    "start": "416470",
    "end": "422860"
  },
  {
    "text": "a really beautiful paradigm\ncalled the Fiat-Shamir paradigm. So I'm going to\nexplain what it is. It's very, very simple.",
    "start": "422860",
    "end": "428530"
  },
  {
    "text": "And then we're going to\nintroduce the random oracle model, which is a model that\nwas invented in order to--",
    "start": "428530",
    "end": "434710"
  },
  {
    "text": "an attempt to analyze or\nto understand the security of this Fiat-Shamir paradigm.",
    "start": "434710",
    "end": "441130"
  },
  {
    "text": "It's an ideal model. We're going to\nprove the soundness of the Kilian-Micali protocol\nthat we saw last time.",
    "start": "441130",
    "end": "448550"
  },
  {
    "text": "We're going to actually\nshow that it's sound, even if you apply the\nFiat-Shamir paradigm to it, as",
    "start": "448550",
    "end": "454276"
  },
  {
    "text": "long as you rely on\nthis random oracle model and this ideal model. And then we're going to--\nprobably this we're going",
    "start": "454277",
    "end": "460630"
  },
  {
    "text": "to only get till next time. But we're going\nto try to-- we're going to talk about the\nsoundness of the Fiat-Shamir",
    "start": "460630",
    "end": "466270"
  },
  {
    "text": "and the standard model. So again, we're going to talk\nabout eliminating interaction using Fiat-Shamir, talk about\nthe random oracle model,",
    "start": "466270",
    "end": "473548"
  },
  {
    "text": "show that, actually, the random\noracle model of this paradigm works well. Often, we'll see exactly when\nit works well, when it doesn't.",
    "start": "473548",
    "end": "480690"
  },
  {
    "text": "And then we're\ngoing to talk about, if we have time maybe--\nstart talking about security",
    "start": "480690",
    "end": "485967"
  },
  {
    "text": "in the standard model because\nthe random oracle model is not a-- it's an ideal model. So is it secure?",
    "start": "485967",
    "end": "491220"
  },
  {
    "text": "Is it sound in-- when\nused in actual reality? That's the plan.",
    "start": "491220",
    "end": "496530"
  },
  {
    "text": "Questions? Yes? AUDIENCE: You shouldn't be\nable to do 2 to the lambda because your thing--",
    "start": "496530",
    "end": "501900"
  },
  {
    "text": "if you're hashing something that\nlong, you'll find a collision? YAEL T. KALAI: So of course,\nyou can find a collision.",
    "start": "501900",
    "end": "511430"
  },
  {
    "text": "So we define it-- so the question was about\nthis 2 to the lambda.",
    "start": "511430",
    "end": "518690"
  },
  {
    "text": "We'll see the construction. I'll explain. ",
    "start": "518690",
    "end": "524410"
  },
  {
    "text": "We get completeness\nfor 2 to the lambda. Now you're talking\nabout soundness. Soundness says that any poly\nadversary or t-time adversary--",
    "start": "524410",
    "end": "535490"
  },
  {
    "text": "poly lambda adversary or t--\npoly and t lambda adversary cannot find a collision.",
    "start": "535490",
    "end": "541500"
  },
  {
    "text": "Now, if this t is\n2 to the lambda, then you're not\ngoing to be secure. So the assumption will--\nso there's-- this is",
    "start": "541500",
    "end": "548390"
  },
  {
    "text": "for completeness. For soundness, the assumption\nis-- for collision-resistant, the definition is that no poly\nlambda time or poly t lambda,",
    "start": "548390",
    "end": "557630"
  },
  {
    "text": "depending on if you want\nstandard collision-resistant or t-collision-resistant,\nwhich is a slightly stronger",
    "start": "557630",
    "end": "563840"
  },
  {
    "text": "assumption, cannot\nfind collisions. Great. Thanks for the question. Any other questions?",
    "start": "563840",
    "end": "571940"
  },
  {
    "text": "I like questions-- just\nreminding you guys. Yeah? AUDIENCE: So during\nthis whole thing,",
    "start": "571940",
    "end": "577902"
  },
  {
    "text": "I'm trying to imagine how\nbig are the parameters. So n inside of the input\nis something that's--",
    "start": "577902",
    "end": "584660"
  },
  {
    "text": "normal people can\nread, or [INAUDIBLE]? YAEL T. KALAI: Exactly. So let me talk a little\nbit about the parameters.",
    "start": "584660",
    "end": "591140"
  },
  {
    "text": "That's a great question. That's a good thing\nto start with. So we want succinctness. Now, when we say succinct,\nreally, what we want is--",
    "start": "591140",
    "end": "599029"
  },
  {
    "text": "so we get some things\nby using cryptography. Once we use cryptography,\nthings grow with the security",
    "start": "599030",
    "end": "604370"
  },
  {
    "text": "of the-- that we want. So things will grow with lambda,\nwhich is the security parameter. What the security parameter\nis depends how paranoid",
    "start": "604370",
    "end": "611269"
  },
  {
    "text": "we are in the world. You can think about\nit as 256 bits. Sometimes, it's more,\ndepending on also",
    "start": "611270",
    "end": "617000"
  },
  {
    "text": "which cryptosystems you use. But that's a good-- it's\nindependent of the input. You want as succinct\nas you can get.",
    "start": "617000",
    "end": "622950"
  },
  {
    "text": "And if you want to\nuse cryptography, it's like security parameter. Now, the input-- it\nshould-- in some sense,",
    "start": "622950",
    "end": "629480"
  },
  {
    "text": "it should not\ndepend on the input. But of course, the input is\nnot going to be more than 2 to the lambda because\nyou think of lambda",
    "start": "629480",
    "end": "636560"
  },
  {
    "text": "is such that 2 to the lambda\nis more than the number of molecules in the universe.",
    "start": "636560",
    "end": "642779"
  },
  {
    "text": "So nothing is that\nbig in our world. So you think of the-- x can be bigger.",
    "start": "642780",
    "end": "648510"
  },
  {
    "text": "Actually, the input\ncan also be small. But then it's-- sometimes,\nyou don't need cryptography. It's so tiny, it's like\ncryptography is useless.",
    "start": "648510",
    "end": "654889"
  },
  {
    "text": "You can just give the witness. So usually, we think in\nour head of the input",
    "start": "654890",
    "end": "660949"
  },
  {
    "text": "as being-- can be much\nbigger than lambda. It can be poly\nlambda and maybe even be lambda to the log lambda.",
    "start": "660950",
    "end": "668180"
  },
  {
    "text": "But it's not as big\nas 2 to the lambda. That's-- doesn't exist. But it can be anything that's\nreal-world number, in the sense.",
    "start": "668180",
    "end": "677330"
  },
  {
    "text": "And so that's what\nwe should think of. ",
    "start": "677330",
    "end": "685350"
  },
  {
    "text": "AUDIENCE: So when we\ndo something like this, we're trying to reduce the\namount of-- or the size",
    "start": "685350",
    "end": "691190"
  },
  {
    "text": "of the proof from still a\nreasonable polynomial size thing, but just to\na 256 [INAUDIBLE]?",
    "start": "691190",
    "end": "697342"
  },
  {
    "text": "YAEL T. KALAI: Exactly. Exactly. So you can think of it-- you're\ntrying to-- when you do--",
    "start": "697342",
    "end": "703040"
  },
  {
    "text": "and let me just repeat\nit also for the mic. When you're trying-- when you\ndo this interactive argument,",
    "start": "703040",
    "end": "709350"
  },
  {
    "text": "you think of-- you take an\nx that's still real-world. You can think of it\npolynomial lambda.",
    "start": "709350",
    "end": "714760"
  },
  {
    "text": "But it can be more. But as long as it's\na real-world thing and you reduce it\nto 256 bits, that's",
    "start": "714760",
    "end": "720150"
  },
  {
    "text": "the practical idea\nyou should think of. And the more theoretical\nidea is to say,",
    "start": "720150",
    "end": "726600"
  },
  {
    "text": "you can take any input\nx, but not more than 2 to the lambda because\nthat's [RASPBERRY]. But something--\nanything less, and we",
    "start": "726600",
    "end": "732660"
  },
  {
    "text": "make it as small as poly lambda. Great. Any other questions?",
    "start": "732660",
    "end": "739529"
  },
  {
    "text": "Yeah? AUDIENCE: And to verify\nthat rho is the opening-- is that what it is? YAEL T. KALAI: Rho?",
    "start": "739530",
    "end": "744550"
  },
  {
    "text": "Yes, yes, yes. Sorry, yes. I'll go to it now. ",
    "start": "744550",
    "end": "751100"
  },
  {
    "text": "Good. So let me just finish-- wrap up what we-- where we left\nlast time, which is the Merkle",
    "start": "751100",
    "end": "756720"
  },
  {
    "text": "hash. So we use Merkle hash in\nthe Kilian-Micali protocol. Actually, we don't\nneed to really remember",
    "start": "756720",
    "end": "761888"
  },
  {
    "text": "the Kilian-Micali\nprotocol for today. We're not going to\nactually really use it. But let me still\nfinish the Merkle hash",
    "start": "761888",
    "end": "767582"
  },
  {
    "text": "because it's a very\nimportant primitive. It's used everywhere\nin cryptography. So it's very important to know.",
    "start": "767583",
    "end": "773332"
  },
  {
    "text": "So what is the Merkle hash? It takes any hash function,\nnot local opening, just",
    "start": "773332",
    "end": "778840"
  },
  {
    "text": "a regular hash function\nthat generates a hash key and has an eval. Algorithm evaluates,\njust generates",
    "start": "778840",
    "end": "784300"
  },
  {
    "text": "hash value, such that it takes\ntwo lambda bits to lambda bits.",
    "start": "784300",
    "end": "789398"
  },
  {
    "text": "Actually, you can make it more. It can be even 1 plus epsilon\nlambda bits to lambda. You can play with it. But let's say two\nlambda, two lambda bits.",
    "start": "789398",
    "end": "797740"
  },
  {
    "text": "And we construct from it a hash\nfunction with local opening.",
    "start": "797740",
    "end": "802760"
  },
  {
    "text": "So let me tell you exactly\nwhat this hash function with local opening--\nwhat it looks like. So the gen, the hash key, is\nexactly the same as before.",
    "start": "802760",
    "end": "811250"
  },
  {
    "text": "We take the same hash key as\nour underlying-- so first, we started with a hash. We started with\nthis hash family.",
    "start": "811250",
    "end": "819100"
  },
  {
    "text": "What is it? Last time, we saw we\ncan take-- for example, I gave an example\nwith the discrete log. But you can even-- if you don't\nremember, it doesn't matter.",
    "start": "819100",
    "end": "825900"
  },
  {
    "text": "Think of it-- someone\ngave you a hash family with this domain and range.",
    "start": "825900",
    "end": "832029"
  },
  {
    "text": "Now I'm going to do\na domain extension. I'm going to make the\ndomain much bigger and get local opening.",
    "start": "832030",
    "end": "838150"
  },
  {
    "text": "How do I do it? So this is the Merkle\nhash construction. The idea is-- so the\ngen is, as I said-- just",
    "start": "838150",
    "end": "845850"
  },
  {
    "text": "generate the same hash key as\nthe original gen, no change to the gen algorithm. The eval algorithm, on\nthe other hand, of course,",
    "start": "845850",
    "end": "852579"
  },
  {
    "text": "changes because the\ndomain is much bigger. It takes strings of size, at\nmost, 2 to the lambda bits.",
    "start": "852580",
    "end": "858730"
  },
  {
    "text": "And what does it do? So what it does\nis the following. It takes as input x. Let's suppose, for\nsimplicity, that x is exactly",
    "start": "858730",
    "end": "867180"
  },
  {
    "text": "2 to the l times lambda bits. ",
    "start": "867180",
    "end": "874244"
  },
  {
    "text": "You don't have to assume this. This is just easy to assume. And you can always\nget it with padding. Take any input and pad it\nso it will be of this form.",
    "start": "874244",
    "end": "881180"
  },
  {
    "text": "And now hash it. I'll say a word if\nit's not of this form. But if it is of this\nform, what do you do?",
    "start": "881180",
    "end": "888470"
  },
  {
    "text": "You take your input x. Just partition it to blocks,\neach of length lambda.",
    "start": "888470",
    "end": "893870"
  },
  {
    "text": "So you have 2 to the l blocks. You have an input x of length\n2 to the l times lambda.",
    "start": "893870",
    "end": "900670"
  },
  {
    "text": "You partition it to chunks,\neach of length lambda. So you have 2 to the l chunks.",
    "start": "900670",
    "end": "905959"
  },
  {
    "text": "Let's call the chunks x1, x2,\nx3, x4, and so on, up to x 2 to the lambda, each of them--",
    "start": "905960",
    "end": "912579"
  },
  {
    "text": "up to x2 to the l-- sorry,\neach of them of length lambda.",
    "start": "912580",
    "end": "917650"
  },
  {
    "text": "And now what you do-- you take two blocks-- this is two lambda bits-- and hash it using our\nbuilding block hash",
    "start": "917650",
    "end": "926350"
  },
  {
    "text": "that takes 2 lambda to lambda. You take the next two lambda. You hash. You take these two.",
    "start": "926350",
    "end": "932360"
  },
  {
    "text": "You hash. So in other words, you\ntake that 2 to the l blocks to 2 to the\nl minus 1 blocks.",
    "start": "932360",
    "end": "941900"
  },
  {
    "text": "Every pair, you hash. Every pair, you hash. Every pair, you hash. Every pair, you hash. You got 2 to the\nl minus 1 blocks.",
    "start": "941900",
    "end": "949100"
  },
  {
    "text": "Then you take these blocks. And again, every pair, you hash. Every pair, you hash. Every pair, you hash 2\nto the l minus 2 blocks,",
    "start": "949100",
    "end": "955630"
  },
  {
    "text": "and so on and so forth until you\narrive to one block at the end. What do you output?",
    "start": "955630",
    "end": "960769"
  },
  {
    "text": "You output the top, the final-- it's going to be\nsomewhere here-- block, which is\noften called a root.",
    "start": "960770",
    "end": "969130"
  },
  {
    "text": "You output the root. And you output the\ndepth of the tree. That's the output of the hash.",
    "start": "969130",
    "end": "974600"
  },
  {
    "text": "So the output is the root. The hash value here--\nit's lambda bits and d, which you also think\nof it as being lambda bits.",
    "start": "974600",
    "end": "982029"
  },
  {
    "text": "Even if it's less, just\nencode it using lambda bits. So if you're mad now at\nme because I promised you",
    "start": "982030",
    "end": "987550"
  },
  {
    "text": "lambda bits and you see here\ntwo lambda bits, apply this hash one more time, and\nyou'll get your lambda bits.",
    "start": "987550",
    "end": "994660"
  },
  {
    "text": "But having two lambda\nbits is also fine. Yeah? AUDIENCE: Why are we bounding\nthe input length to 2",
    "start": "994660",
    "end": "1001720"
  },
  {
    "text": "to the lambda instead\nof just arbitrary? YAEL T. KALAI: Good. Good. Good. Good. Good. Great. Because last time--\ngreat question. So last time, when\nI mentioned, I",
    "start": "1001720",
    "end": "1007755"
  },
  {
    "text": "said, just take\nstar here, anything. So why am I bounding\nit out to 2 the lambda?",
    "start": "1007755",
    "end": "1013970"
  },
  {
    "text": "So this construction bounds 2 to\nthe lambda because as you see,",
    "start": "1013970",
    "end": "1019189"
  },
  {
    "text": "I take every lambda I can take. That's all it gives me. So that's all I get. Now you can say, wait,\nwhat if I want more?",
    "start": "1019190",
    "end": "1025280"
  },
  {
    "text": "Maybe I want 2 to the lambda. You can actually get more\nthan 2 to the lambda. For example, you\ncan bootstrap this.",
    "start": "1025280",
    "end": "1030920"
  },
  {
    "text": "So now you can take 2\nto the lambda to lambda. You can create a Merkle\nhash of this Merkle hash.",
    "start": "1030920",
    "end": "1038812"
  },
  {
    "text": "But actually, you never-- it doesn't come up\nbecause you never need to. 2 to the lambda is--",
    "start": "1038812",
    "end": "1045145"
  },
  {
    "text": "think nothing is more\nthan 2 to the-- we choose lambda so\nthat in our world, nothing is more than\nsize 2 to the lambda.",
    "start": "1045145",
    "end": "1050630"
  },
  {
    "text": "But you can think of-- you can get-- if you-- just\nas a mathematical curiosity,",
    "start": "1050630",
    "end": "1056690"
  },
  {
    "text": "you can apply it. So once you have from 2\nto the lambda to lambda,",
    "start": "1056690",
    "end": "1062120"
  },
  {
    "text": "you can chop your things\nto 2 to the lambda and do this-- use\nthis as a building",
    "start": "1062120",
    "end": "1068980"
  },
  {
    "text": "block to a bigger Merkle hash. So you can amplify it. But we're not-- for us, 2 to the\nlambda to lambda is good enough.",
    "start": "1068980",
    "end": "1077510"
  },
  {
    "text": "Great. Great question. Any other question?",
    "start": "1077510",
    "end": "1083300"
  },
  {
    "text": "Yes? AUDIENCE: Why does\nthe depth need to be included in the output? Should it not just be a\nfunction of the length of x?",
    "start": "1083300",
    "end": "1089447"
  },
  {
    "text": "YAEL T. KALAI: Good. Great, great question. Why do I insist on including d? Is it not a function of x?",
    "start": "1089447",
    "end": "1095780"
  },
  {
    "text": "It is a function of x. It's a deterministic function\nof the length, not even of x-- of the length of x. Yes.",
    "start": "1095780",
    "end": "1100960"
  },
  {
    "text": "However, nobody knows what x is. So at the end of the day, I\nwant collision resistance.",
    "start": "1100960",
    "end": "1106970"
  },
  {
    "text": "And so the property\nwe want from this hash is that it's\ncollision resistance. What does\ncollision-resistant means?",
    "start": "1106970",
    "end": "1112700"
  },
  {
    "text": "It means that you cannot output\na hash value with two different openings.",
    "start": "1112700",
    "end": "1118720"
  },
  {
    "text": "Now, when you open a hash value,\nnobody knows what the x is. Actually, you may\nnot even know--",
    "start": "1118720",
    "end": "1124220"
  },
  {
    "text": "well, if you-- when\nyou open, you know. But when you give someone a hash\nvalue, there's no x inherently--",
    "start": "1124220",
    "end": "1133180"
  },
  {
    "text": "a part of it. If you don't include the depth-- actually, if there's an attack,\nit's not collision resistance.",
    "start": "1133180",
    "end": "1139520"
  },
  {
    "text": "It's really not. It's not just a-- why is it\nnot collision resistance? For example, just as an attack,\nlet's say I publish this root,",
    "start": "1139520",
    "end": "1146510"
  },
  {
    "text": "even-- this is my root. This is my input. My input is x1, x2, x3, x4.",
    "start": "1146510",
    "end": "1152020"
  },
  {
    "text": "And the output is root. Now let me break the\ncollision resistance. I'll give you two\ndifferent openings.",
    "start": "1152020",
    "end": "1158210"
  },
  {
    "text": "One is x1, x2, x3, x4. You do the hash? You see you're happy. It's a good opening.",
    "start": "1158210",
    "end": "1163960"
  },
  {
    "text": "Now let me give you another\nopening, just this and this. That's also a good opening.",
    "start": "1163960",
    "end": "1169630"
  },
  {
    "text": "So I open it in\ntwo different ways. That's not okay. That's a collision.",
    "start": "1169630",
    "end": "1174880"
  },
  {
    "text": "If you include d,\nhowever, then-- so that's exactly\nwhat will allow me",
    "start": "1174880",
    "end": "1180570"
  },
  {
    "text": "to argue collision resistance. It's this d. Great question. Thank you.",
    "start": "1180570",
    "end": "1186760"
  },
  {
    "text": "So this is the construction. Questions? Let's see.",
    "start": "1186760",
    "end": "1192130"
  },
  {
    "text": "How do we open? So now this is\njust so far great. We managed to go from 2\nto the lambda to lambda.",
    "start": "1192130",
    "end": "1198023"
  },
  {
    "text": "I didn't argue collision\nresistance yet. But at least we did\ndomain extension. So we extended the domain.",
    "start": "1198023",
    "end": "1204020"
  },
  {
    "text": "But I also want-- especially,\nI need it for the Kilian-Micali protocol and for many, many\nother uses in cryptography--",
    "start": "1204020",
    "end": "1209960"
  },
  {
    "text": "I want to be able\nto do local opening. So remember, what does\nlocal opening mean?",
    "start": "1209960",
    "end": "1215860"
  },
  {
    "text": "I may not want to open when-- with-- I may not want to\ngive you my entire input.",
    "start": "1215860",
    "end": "1222160"
  },
  {
    "text": "I may just want to give you-- to convince you\nthat this hash value in some location\ni of the input--",
    "start": "1222160",
    "end": "1231930"
  },
  {
    "text": "the value is a\nbig B. But I don't want to give you the entire--\nbecause the entire input is gigantic. You can't even hold it.",
    "start": "1231930",
    "end": "1238850"
  },
  {
    "text": "So I want a succinct opening. I want to convince you\nin a very succinct way",
    "start": "1238850",
    "end": "1243870"
  },
  {
    "text": "that what's sitting here\nin this bit is 0 or is 1. So how do I do it?",
    "start": "1243870",
    "end": "1250110"
  },
  {
    "text": "So this construction is\nactually really nice.",
    "start": "1250110",
    "end": "1255900"
  },
  {
    "text": "It gives you a local\nopening in a very nice way. So what's the local opening? Suppose I want to open this--",
    "start": "1255900",
    "end": "1261950"
  },
  {
    "text": "the bit here sitting here. What I'm going to do-- I'm going to actually give\nyou this entire block.",
    "start": "1261950",
    "end": "1267840"
  },
  {
    "text": "It's only lambda bits. So it's not that big. I give you this block. What do you do with it? So let me help you-- convince\nyou that this block is, indeed,",
    "start": "1267840",
    "end": "1276450"
  },
  {
    "text": "the block related to the root. Namely, it's the block that,\nindeed, sits here next to--",
    "start": "1276450",
    "end": "1283200"
  },
  {
    "text": "how do I convince you? I give you the sibling. So this block has a parent.",
    "start": "1283200",
    "end": "1289650"
  },
  {
    "text": "I give you the sibling\nand the parent. This parent has a parent.",
    "start": "1289650",
    "end": "1294810"
  },
  {
    "text": "I give you the sibling and the\nparent, and so on and so forth, until you get to the root.",
    "start": "1294810",
    "end": "1300380"
  },
  {
    "text": "I give you all these blocks. So in each layer,\nI open two blocks,",
    "start": "1300380",
    "end": "1307320"
  },
  {
    "text": "which are the two siblings. So I open two siblings. You get this. I open the two siblings. You get this. I open the two\nsiblings, and so on.",
    "start": "1307320",
    "end": "1313830"
  },
  {
    "text": "Yes? AUDIENCE: This is\na constant factor. So I don't know if it matters. But do you strictly need\nto return the ancestors?",
    "start": "1313830",
    "end": "1319980"
  },
  {
    "text": "You can only return\nthe siblings, right? YAEL T. KALAI: Good. Good. Good. Right. Right. Right. You're totally right. You're saying, well, if\nyou really want to be--",
    "start": "1319980",
    "end": "1325910"
  },
  {
    "text": "what you're saying, which\nis completely right thing-- this is wasteful\nbecause actually, all I need to give\nyou is the sibling.",
    "start": "1325910",
    "end": "1331680"
  },
  {
    "text": "So why waste communication? If I want to open this, I'll\ngive you this and this sibling.",
    "start": "1331680",
    "end": "1337840"
  },
  {
    "text": "I don't need to give you this. You can compute\nthis on your own. So compute this on your own. I'll give you this. I don't need to give you this.",
    "start": "1337840",
    "end": "1344250"
  },
  {
    "text": "You have these two. So compute this on your own. And then I'll only give you\nthis and then-- and so on.",
    "start": "1344250",
    "end": "1349980"
  },
  {
    "text": "You're 100% correct. I actually just need\nto give you one. I wrote two because\nit's just easier to say.",
    "start": "1349980",
    "end": "1357170"
  },
  {
    "text": "But yes, exactly, one is enough. And you can compute the--",
    "start": "1357170",
    "end": "1362660"
  },
  {
    "text": "fantastic. So I denote it by--",
    "start": "1362660",
    "end": "1367980"
  },
  {
    "text": "so what does the open do? For each layer, it\ngives you two blocks",
    "start": "1367980",
    "end": "1373250"
  },
  {
    "text": "for layer j denoted by zj. So zj is two blocks. And the leaves--\nit's two blocks.",
    "start": "1373250",
    "end": "1379640"
  },
  {
    "text": "j equals 0. It's in the leaf-- layer\n1, layer 2, up to layer d. It's actually just the root. So you can actually go\nto d minus 1 if you want.",
    "start": "1379640",
    "end": "1387679"
  },
  {
    "text": "But I'll just-- in my mind,\nI want to include the root.",
    "start": "1387680",
    "end": "1392750"
  },
  {
    "text": "The reason I include both in the\nroot is now when I analyze it, it's-- notation-wise,\nit's just very, very easy.",
    "start": "1392750",
    "end": "1398880"
  },
  {
    "text": "But really, it's enough, like\nyou said, to have the sibling. And the roots, of course,\nyou don't need to give.",
    "start": "1398880",
    "end": "1404930"
  },
  {
    "text": "But let's just think,\nthis is how I open. And now how do I verify? I just take each two\nsibling, compute the hash,",
    "start": "1404930",
    "end": "1413160"
  },
  {
    "text": "and make sure it corresponds\nto the relevant z's-- indeed, the parent.",
    "start": "1413160",
    "end": "1418690"
  },
  {
    "text": "So again, you gave\nme all these things. I compute these two. I check that it's consistent\nwith what you gave you,",
    "start": "1418690",
    "end": "1424957"
  },
  {
    "text": "or if you didn't give me, fine. I'll compute it on my own. I get this. I'll compute this and give in.",
    "start": "1424958",
    "end": "1431065"
  },
  {
    "text": "And then I'll check that--\nall I need to check at the end is consistency with the root. ",
    "start": "1431065",
    "end": "1438255"
  },
  {
    "text": "That's the verification. Question about the\ndesign, the algorithms?",
    "start": "1438255",
    "end": "1445336"
  },
  {
    "text": " So this is where we left\noff, actually, last time.",
    "start": "1445336",
    "end": "1451120"
  },
  {
    "text": "And what I want to do now is\ndo the collision resistance. I'm happy that,\nactually, we got a chance",
    "start": "1451120",
    "end": "1456720"
  },
  {
    "text": "to do it again because it's\na very important primitive. So it's worth having it\ningrained in your mind.",
    "start": "1456720",
    "end": "1463010"
  },
  {
    "text": " So why is it\ncollision-resistant? ",
    "start": "1463010",
    "end": "1470549"
  },
  {
    "text": "So to prove\ncollision resistance, what do we want to argue? That an adversary that's given\na hash key cannot produce a hash",
    "start": "1470550",
    "end": "1479340"
  },
  {
    "text": "value-- namely, root in d-- with two different openings.",
    "start": "1479340",
    "end": "1484820"
  },
  {
    "text": "So suppose there exists a\npoly-size adversary that does",
    "start": "1484820",
    "end": "1499019"
  },
  {
    "text": "find a collision such that\nthe probability that A--",
    "start": "1499020",
    "end": "1504180"
  },
  {
    "text": "he gets a hash key. Hash key is from gen. And\nsomehow, he manages to output",
    "start": "1504180",
    "end": "1513630"
  },
  {
    "text": "a hash value,\nwhich is root in d. That's just a hash value.",
    "start": "1513630",
    "end": "1519450"
  },
  {
    "text": "And he gives me some index i.",
    "start": "1519450",
    "end": "1524940"
  },
  {
    "text": "He managed to open it\nin two different way. He gives me an opening\nthat says i is 0.",
    "start": "1524940",
    "end": "1532000"
  },
  {
    "text": "And he gives me another opening\nthat says the i-th bit is 1",
    "start": "1532000",
    "end": "1537120"
  },
  {
    "text": "and such that for both of\nthem, such that for every B, for both 0 and 1,\nver will accept--",
    "start": "1537120",
    "end": "1547260"
  },
  {
    "text": "ver and hash key root in\nd, i, and row B outputs 1.",
    "start": "1547260",
    "end": "1556140"
  },
  {
    "text": "So suppose I have an\nalgorithm that gives me a hash value, an index, and\na valid openings, both a",
    "start": "1556140",
    "end": "1564660"
  },
  {
    "text": "0 and to 1. Valid-- I mean that the ver\nwill accept both of them. Oh, sorry-- B.",
    "start": "1564660",
    "end": "1571680"
  },
  {
    "text": "So ver takes hash key of value,\nan index i, and a B, big B,",
    "start": "1571680",
    "end": "1578010"
  },
  {
    "text": "saying whether index i is 0\nor 1, and a proof, an opening. And suppose he accepts both.",
    "start": "1578010",
    "end": "1585970"
  },
  {
    "text": "Suppose he accepts both\nwith probability at least, I don't know, epsilon.",
    "start": "1585970",
    "end": "1591350"
  },
  {
    "text": "So suppose there's this\nand exists epsilon. ",
    "start": "1591350",
    "end": "1601885"
  },
  {
    "text": "So suppose there exists\nepsilon such that for any lambda, the\nprobability that A managed to find the collision\nlike this is at least epsilon.",
    "start": "1601885",
    "end": "1610210"
  },
  {
    "text": "I'm going to argue\nthen you can find a collision in the\nunderlying h, in the small h,",
    "start": "1610210",
    "end": "1615850"
  },
  {
    "text": "with probability epsilon. So if you have an\nalgorithm like this,",
    "start": "1615850",
    "end": "1621909"
  },
  {
    "text": "then there exists an algorithm\npoly size such that B--",
    "start": "1621910",
    "end": "1638860"
  },
  {
    "text": "such that the\nprobability that B-- he gets hash key-- the\nprobability that he outputs,",
    "start": "1638860",
    "end": "1649240"
  },
  {
    "text": "I know x0, x, and x, prime such\nthat the original eval hk, x",
    "start": "1649240",
    "end": "1658240"
  },
  {
    "text": "equals eval hk, x prime,\nand x is different",
    "start": "1658240",
    "end": "1666190"
  },
  {
    "text": "than x prime, is\nat least epsilon. But we assume that this\nis collision resistance.",
    "start": "1666190",
    "end": "1673550"
  },
  {
    "text": "We started with an\nunderlying hash function that's collision-resistant. So the epsilon has\nto be negligible.",
    "start": "1673550",
    "end": "1682717"
  },
  {
    "text": "That's what we're going to show. So we're going to use\nif an adversary can",
    "start": "1682717",
    "end": "1687730"
  },
  {
    "text": "find a local opening that\ncollides for the Merkle hash,",
    "start": "1687730",
    "end": "1693830"
  },
  {
    "text": "we can use them\nto actually break the defined collision in\nthe underlying 2 lambda",
    "start": "1693830",
    "end": "1700809"
  },
  {
    "text": "to lambda hash function in\nthe little hash function.",
    "start": "1700810",
    "end": "1706150"
  },
  {
    "text": "So how does B work? What does B do? B takes a hash key. He just runs A. So let\nme-- so we claim that there",
    "start": "1706150",
    "end": "1714820"
  },
  {
    "text": "exists a B. So let see. B, an input hash\nkey, what does he do?",
    "start": "1714820",
    "end": "1721370"
  },
  {
    "text": "Just run A. So get root D, I,\nrow 0, row 1, which is just A",
    "start": "1721370",
    "end": "1734260"
  },
  {
    "text": "and hash key. Now, he got row 0 and row 1.",
    "start": "1734260",
    "end": "1740419"
  },
  {
    "text": "What are row 0, row 1? Each row is this kind of\ntwo pairs of siblings.",
    "start": "1740420",
    "end": "1747440"
  },
  {
    "text": "I'm going to assume that\nboth exist because it's just easier for me. That's why I wrote both of them. So each opening-- so row 0 is\nfor each level you have Z0,",
    "start": "1747440",
    "end": "1761000"
  },
  {
    "text": "J from 0 to D. And row 1 is--",
    "start": "1761000",
    "end": "1772540"
  },
  {
    "text": "let's call it Z1, J.",
    "start": "1772540",
    "end": "1780130"
  },
  {
    "text": "Now, what do we know? In the leaves, so we know that\nZ0, 0 is different than Z1, 0.",
    "start": "1780130",
    "end": "1790760"
  },
  {
    "text": "The two leaves are different\nbecause, in one leaf-- suppose verifier\naccepts both of them.",
    "start": "1790760",
    "end": "1797630"
  },
  {
    "text": "In the case that these\nare both accepted, I'm going to argue that\nI found collisions.",
    "start": "1797630",
    "end": "1803840"
  },
  {
    "text": "So now suppose row 0\nand row 1 are accepted. So ver accepts both of them.",
    "start": "1803840",
    "end": "1812800"
  },
  {
    "text": "Now, if ver accepts\nboth of them-- so we know that the leaves\nare different because,",
    "start": "1812800",
    "end": "1819380"
  },
  {
    "text": "in the leaves, in one\ncase, I have here a 1, in the other case,\nI have here a 0.",
    "start": "1819380",
    "end": "1824630"
  },
  {
    "text": "So they have to be different. So I know the leaves\nare different. I also know that Z0, D equals\nZ1, D. These are both a root.",
    "start": "1824630",
    "end": "1838825"
  },
  {
    "text": "Now, of course, I said, we\ndon't need to include it because-- but I'm just\nputting here because I want--",
    "start": "1838825",
    "end": "1843889"
  },
  {
    "text": "the reason I want to include\nit is just for clarity to say, look, we have D layers\nof information on each opening.",
    "start": "1843890",
    "end": "1851420"
  },
  {
    "text": "The leaves, they must\nbe different because one opens to 0, one opens to 1. The root, the left\none must be the same.",
    "start": "1851420",
    "end": "1857640"
  },
  {
    "text": "It's the root. It means that there must be\nsome kind of two adjacent layers",
    "start": "1857640",
    "end": "1863480"
  },
  {
    "text": "on which one of-- below they disagree\nand above they agree. We know here they\ndisagree, here they agree.",
    "start": "1863480",
    "end": "1870710"
  },
  {
    "text": "They disagree. Do they disagree\nhere, disagree here? At some point they're\ngoing to agree. So we say there must be a\nlayer J such that Zj0 is",
    "start": "1870710",
    "end": "1883190"
  },
  {
    "text": "different than Zj1, But Zj plus\n1, 0 is equal to Zj plus 1, 1.",
    "start": "1883190",
    "end": "1895129"
  },
  {
    "text": "Yeah? OK, they disagree here. How about one layer above? Do they agree? If they agree, great.",
    "start": "1895130",
    "end": "1900650"
  },
  {
    "text": "Then that's going\nto be our j plus 1. They disagree? Let's go up until,\nat some point, they'll agree because,\nHamiltonian, do they agree.",
    "start": "1900650",
    "end": "1907350"
  },
  {
    "text": "Yeah. AUDIENCE: So just for the video,\nshould it be 0 j [INAUDIBLE] and 0 j plus 1?",
    "start": "1907350",
    "end": "1913735"
  },
  {
    "text": "YAEL T. KALAI: Oh,\nthank you very much. Thank you. Great. Thank you. Yeah, it's not just for the\nvideo, it's also for you guys",
    "start": "1913735",
    "end": "1920525"
  },
  {
    "text": "so I won't confuse\nyou more than that. Thank you.",
    "start": "1920525",
    "end": "1926990"
  },
  {
    "text": "1, j, 1, j plus 1. Thank you.",
    "start": "1926990",
    "end": "1932480"
  },
  {
    "text": "OK, yes. Is it-- AUDIENCE: Is that [INAUDIBLE]?",
    "start": "1932480",
    "end": "1938330"
  },
  {
    "text": "Because j plus 1 is-- oh. You missed j plus 1. YAEL T. KALAI: Did I miss--",
    "start": "1938330",
    "end": "1943370"
  },
  {
    "text": "AUDIENCE: You missed j plus 1. AUDIENCE: On the bottom. YAEL T. KALAI: Yes. AUDIENCE: You need a 0. YAEL T. KALAI: Oh my God.",
    "start": "1943370",
    "end": "1949679"
  },
  {
    "text": "OK. No, the 0, 1. Ah! OK, did I get it right?",
    "start": "1949680",
    "end": "1957350"
  },
  {
    "text": "Yes. OK, so there's a layer\nj such that, in layer j",
    "start": "1957350",
    "end": "1962970"
  },
  {
    "text": "they disagree, in layer\nj plus 1 they agree. That's it. This is a collision.",
    "start": "1962970",
    "end": "1968179"
  },
  {
    "text": "Why? What is layer j plus 1? One of them is the\nfather, is the parent.",
    "start": "1968180",
    "end": "1975950"
  },
  {
    "text": "So we have two\nthat they disagree. But both of these they agree on.",
    "start": "1975950",
    "end": "1984020"
  },
  {
    "text": "In particular,\nthey agree on this. So then, so we\nfound a collision. This must mean that the\nhash eval hash key of Z0j",
    "start": "1984020",
    "end": "2001519"
  },
  {
    "text": "is equal to eval\nhash key of Z1j.",
    "start": "2001520",
    "end": "2007850"
  },
  {
    "text": "Because this value is one\nof this, and one of this",
    "start": "2007850",
    "end": "2014990"
  },
  {
    "text": "depending if it's the left or\nthe right depending on the tree, and they're both equal. So done.",
    "start": "2014990",
    "end": "2020340"
  },
  {
    "text": "I found a collision with\nthe same exact probability.",
    "start": "2020340",
    "end": "2029130"
  },
  {
    "text": "So it's-- Now, as I said, this-- I wrote here, suppose\nif this poly lambda,",
    "start": "2029130",
    "end": "2036740"
  },
  {
    "text": "I could have-- if we assumed\nthat the underlying hash function is t secure, namely\nyou can't find collisions",
    "start": "2036740",
    "end": "2043940"
  },
  {
    "text": "even if you run time\npoly t of lambda, then we get that the Merkle\nhash is poly t secure because B,",
    "start": "2043940",
    "end": "2051710"
  },
  {
    "text": "all it does really\nis just run A. It doesn't run much more than A,\nit just runs A and then it does",
    "start": "2051710",
    "end": "2057560"
  },
  {
    "text": "something very trivial. So the complexity of\nbreaking the Merkle hash is really the same as the\ncomplexity of breaking",
    "start": "2057560",
    "end": "2062929"
  },
  {
    "text": "the underlying hash. So if the underlying hash is t\nsecure, Merkle hash is t secure.",
    "start": "2062929",
    "end": "2068078"
  },
  {
    "text": " Questions?",
    "start": "2068079",
    "end": "2073620"
  },
  {
    "start": "2073620",
    "end": "2079919"
  },
  {
    "text": "OK. So where are we? So we proved the Merkle hash. As we saw, the\nMerkle hash was used",
    "start": "2079920",
    "end": "2086779"
  },
  {
    "text": "to give an interactive-- a\nsuccinct interactive argument for all of NP.",
    "start": "2086780",
    "end": "2091790"
  },
  {
    "text": "So now, if you're willing to-- you're happy with interactive\nprotocols, thank you very much.",
    "start": "2091790",
    "end": "2101460"
  },
  {
    "text": "I hope you enjoyed the\nsemester, and we're done. [LAUGHTER] If you're not though-- but,\nas I said, we're actually--",
    "start": "2101460",
    "end": "2107810"
  },
  {
    "text": "we're not happy with\ninteractive protocols. It's really\ninteresting, actually, to think of the\nevolution of this",
    "start": "2107810",
    "end": "2113240"
  },
  {
    "text": "because before all this\ninteractive proofs and arguments",
    "start": "2113240",
    "end": "2118700"
  },
  {
    "text": "and so on, we had just\nmathematical proofs, which were not interactive, but\nthey were very, very long.",
    "start": "2118700",
    "end": "2126170"
  },
  {
    "text": "And people were not happy. It's like, oh, they're so long. And then interactive\nproofs were defined.",
    "start": "2126170",
    "end": "2131520"
  },
  {
    "text": "I think they were defined only\nfor the sake of zero knowledge. They were defined just to\nget zero knowledge proofs.",
    "start": "2131520",
    "end": "2137000"
  },
  {
    "text": "I'm going to actually\nmention that-- we're going to talk about\nzero knowledge later today. And this motivated\nthe interest--",
    "start": "2137000",
    "end": "2144650"
  },
  {
    "text": "to introduce interaction. And then people are\nlike, wow, you-- oh, what a great-- forget\nabout zero knowledge.",
    "start": "2144650",
    "end": "2150240"
  },
  {
    "text": "Forget about cryptography. This is such a great model. Using interaction we\ncan prove a lot more.",
    "start": "2150240",
    "end": "2156270"
  },
  {
    "text": "And we saw the GKR protocol. You can do-- you can prove,\nactually, any circuits",
    "start": "2156270",
    "end": "2162680"
  },
  {
    "text": "that are really, really huge\nas long as they're kind of have that, you can do P\nspace or any computation that",
    "start": "2162680",
    "end": "2169440"
  },
  {
    "text": "has poly depth. Your verifier can be\nany depth D. You can-- the verifier runs\nin time D. Great.",
    "start": "2169440",
    "end": "2175539"
  },
  {
    "text": "Not-- it doesn't\nrun in the side, so it's much, much\nmore powerful. Wow. Wow. Wow. And then people are like,\nactually, with cryptography,",
    "start": "2175540",
    "end": "2181860"
  },
  {
    "text": "you can do much more. Great. Yeah! But now, but wait,\nthere was a big price. We actually don't\nwant interaction.",
    "start": "2181860",
    "end": "2188520"
  },
  {
    "text": "So where are we. Are we back at NP? NP is very-- we're back in\nthe mathematical proofs that",
    "start": "2188520",
    "end": "2195150"
  },
  {
    "text": "are way, way too long? So I said, no,\nwe're actually going",
    "start": "2195150",
    "end": "2200460"
  },
  {
    "text": "to circle back in a\nvery interesting way and get succinct\nnon-interactive proofs. ",
    "start": "2200460",
    "end": "2207600"
  },
  {
    "text": "So how do we circle back? ",
    "start": "2207600",
    "end": "2228990"
  },
  {
    "text": "So this idea of how to\ncircle back actually was put forth by\nFiat and Shamir.",
    "start": "2228990",
    "end": "2239170"
  },
  {
    "text": "This is in the mid '80s, In '86. They proposed a really,\nreally nice paradigm.",
    "start": "2239170",
    "end": "2245829"
  },
  {
    "text": "Actually, they didn't think\nabout-- this is, remember, this is '86. This is before\ninteractive proofs.",
    "start": "2245830",
    "end": "2252190"
  },
  {
    "text": "It was just when zero\nknowledge was introduced. Interactive proofs\njust came about,",
    "start": "2252190",
    "end": "2258340"
  },
  {
    "text": "but now there was no PCP,\nno interactive argument, none of that. This is in '86, Fiat and Shamir.",
    "start": "2258340",
    "end": "2265130"
  },
  {
    "start": "2265130",
    "end": "2276180"
  },
  {
    "text": "They proposed a\nmethod of actually reducing interaction-- of\nconstructing signature schemes.",
    "start": "2276180",
    "end": "2282700"
  },
  {
    "text": "Now, I stand behind what I said,\nthat this class will not require",
    "start": "2282700",
    "end": "2288000"
  },
  {
    "text": "a lot of crypto background. You don't need to know\nwhat signature schemes are. But what they did, their idea\nis, there is a primitive called",
    "start": "2288000",
    "end": "2298350"
  },
  {
    "text": "identification scheme. I want to prove to\nyou that I'm Yael. How do I prove that I'm Yael?",
    "start": "2298350",
    "end": "2303580"
  },
  {
    "text": "I have a public key\ncorresponding to my name. And I'm going to prove to you\nthat I know the secret key. Me knowing-- whoever\nknows the secret key has",
    "start": "2303580",
    "end": "2310058"
  },
  {
    "text": "my identity, essentially,\nthat's how things work in the digital world. So I'm going to prove to you\nthat I know the secret key.",
    "start": "2310058",
    "end": "2315790"
  },
  {
    "text": "This proves that I'm me. This proof is interactive. Identification protocols are\nlike three-round protocols.",
    "start": "2315790",
    "end": "2323830"
  },
  {
    "text": "I give you a message alpha,\nyou send me a question beta, I give you an answer\ngamma, you verify.",
    "start": "2323830",
    "end": "2328930"
  },
  {
    "text": "That's how it works. Now, they said, let's convert\nthis identification scheme",
    "start": "2328930",
    "end": "2334740"
  },
  {
    "text": "into a signature scheme. Instead of interacting\nto make sure it's you, every time you sign-- you\nwant to send a message,",
    "start": "2334740",
    "end": "2344720"
  },
  {
    "text": "use this message, take this\nidentification protocol together with the message and\neliminate the interaction.",
    "start": "2344720",
    "end": "2351440"
  },
  {
    "text": "I'll explain exactly\nhow they do it. But they do it in a way to\nconstruct signature scheme. That was their goal.",
    "start": "2351440",
    "end": "2357820"
  },
  {
    "text": "But now, after several years\nafter, we use it all the time to actually forget about\njust the specific application",
    "start": "2357820",
    "end": "2364900"
  },
  {
    "text": "of identification\nscheme to signature, that's one application. But actually we can show--\nwe can use it to reduce,",
    "start": "2364900",
    "end": "2371170"
  },
  {
    "text": "to eliminate interaction, not\nonly from identification scheme, but from any interactive\nprotocol that is public coin.",
    "start": "2371170",
    "end": "2379190"
  },
  {
    "text": "So let me explain. So now, take any protocol. So this is a paradigm for\neliminating interaction",
    "start": "2379190",
    "end": "2404829"
  },
  {
    "text": "from interactive protocol\nthat are public coin.",
    "start": "2404830",
    "end": "2415330"
  },
  {
    "text": "So not all protocol, but\nones that are public coin. So what is a public\ncoin protocol?",
    "start": "2415330",
    "end": "2422559"
  },
  {
    "text": "Take any protocol,\nlet's say, a proof. So I have a prover\nand a verifier.",
    "start": "2422560",
    "end": "2428770"
  },
  {
    "text": "And suppose for a second-- so suppose for simplicity\nthat it's three messages.",
    "start": "2428770",
    "end": "2434390"
  },
  {
    "text": "So the verifier-- the prover\nsends a message alpha. The verifier sends\nbeta, which is random.",
    "start": "2434390",
    "end": "2441435"
  },
  {
    "text": "Public coin means the\nmessage of the verifier is completely random. Let's say it's lambda bits.",
    "start": "2441435",
    "end": "2448720"
  },
  {
    "text": "If it's less, then just\npad it to be lambda. And if it's more,\njust call that lambda. Make that the\nsecurity parameter.",
    "start": "2448720",
    "end": "2455000"
  },
  {
    "text": "Just increase the\nsecurity parameter. Now you send gamma.",
    "start": "2455000",
    "end": "2461410"
  },
  {
    "text": "And maybe it's more round. So maybe then he sends\ndelta, let's say random bits,",
    "start": "2461410",
    "end": "2468130"
  },
  {
    "text": "and then you say epsilon,\nand you can continue. Let me stop here\nfor the sake of--",
    "start": "2468130",
    "end": "2475099"
  },
  {
    "text": "Now I'm going to\neliminate interaction. How do we eliminate interaction?",
    "start": "2475100",
    "end": "2480460"
  },
  {
    "text": "It's an interaction,\nit's very important. I mean, the entire-- if you remember the\nsumcheck in GKR--",
    "start": "2480460",
    "end": "2488140"
  },
  {
    "text": "I mean, it's tempting maybe\nto say, oh, tell the prover, compute alpha, beta,\ngamma, just compute",
    "start": "2488140",
    "end": "2494915"
  },
  {
    "text": "the transcript on your own. You simulate the verifier's\nmessages, then he'll cheat.",
    "start": "2494915",
    "end": "2500890"
  },
  {
    "text": "So how do you get rid\nof the interaction? It seems really, really hard.",
    "start": "2500890",
    "end": "2509440"
  },
  {
    "text": "Actually, it's so easy. I mean, their idea is trivial. So what is their idea? They say the following.",
    "start": "2509440",
    "end": "2517900"
  },
  {
    "text": "How does the verifier-- how\ndoes the prover get this beta? The verifier chose it.",
    "start": "2517900",
    "end": "2524180"
  },
  {
    "text": "Do you know what? Let's not have the ver-- now\nwe don't have a verifier.",
    "start": "2524180",
    "end": "2529375"
  },
  {
    "text": "It's not interactive. There is no verifier. So how do you compute this beta? Let's compute it as a\nhash function applied",
    "start": "2529375",
    "end": "2536840"
  },
  {
    "text": "to the transcript so far. So let me explain. So how-- here's\nhow you convert it",
    "start": "2536840",
    "end": "2544790"
  },
  {
    "text": "to P Fiat-Shamir,\nV Fiat-Shamir, this",
    "start": "2544790",
    "end": "2550460"
  },
  {
    "text": "is associated with\nsome hash family. There are some-- it's\nassociated with a hash family.",
    "start": "2550460",
    "end": "2556950"
  },
  {
    "text": "So the Fiat-Shamir paradigm, you\ncan take any hash family and use that to reduce interaction.",
    "start": "2556950",
    "end": "2562220"
  },
  {
    "text": "How do you use it to\nreduce interaction? Now, there are some hash key\nthat's chosen once and for all.",
    "start": "2562220",
    "end": "2570599"
  },
  {
    "text": "Everybody knows it. Either the verifier\nsends it once, or if you think about\npublic-- everybody can verify,",
    "start": "2570600",
    "end": "2576120"
  },
  {
    "text": "I don't know, the US government\npublishes this hash key, everybody uses this hash key.",
    "start": "2576120",
    "end": "2582440"
  },
  {
    "text": "There are some fixed hash\nkey, everybody uses it. Now, once we agree on a hash\nkey, what does the prover do?",
    "start": "2582440",
    "end": "2590930"
  },
  {
    "text": "He computes alpha. Let's say he wants to prove\nthat x is in some language.",
    "start": "2590930",
    "end": "2597860"
  },
  {
    "text": "So let's say he says, OK, I'm\ngoing to prove to you that x is in the language. Let me prove it to you.",
    "start": "2597860",
    "end": "2604040"
  },
  {
    "text": "OK, I compute the alpha. Now I'm waiting for a beta. But there is no verifier.",
    "start": "2604040",
    "end": "2610319"
  },
  {
    "text": "Fine. I'll tell you what the beta is. Beta is just-- has to--\nis going to be eval",
    "start": "2610320",
    "end": "2616250"
  },
  {
    "text": "of hash key and the transcript\nso far, x and alpha.",
    "start": "2616250",
    "end": "2622730"
  },
  {
    "text": "That's currently what's in\nthe transcript, the statement and the first message alpha.",
    "start": "2622730",
    "end": "2628520"
  },
  {
    "text": "Now the proof is like,\nOK, this is the beta I got from the verifier. He's interpreting this as the\nbeta he got from the verifier.",
    "start": "2628520",
    "end": "2635180"
  },
  {
    "text": "And now he computes gamma, my\nanswer, the prover's answer. Now he's waiting for a\nmessage for-- a query",
    "start": "2635180",
    "end": "2641840"
  },
  {
    "text": "from the verifier, some delta. But there is no\nverifier, so it's going to compute the delta\nas eval of the hash key using",
    "start": "2641840",
    "end": "2652970"
  },
  {
    "text": "the transcript so far. So x, alpha, beta, gamma.",
    "start": "2652970",
    "end": "2659750"
  },
  {
    "text": "Once he has delta, he's going\nto go back to being a prover and compute epsilon.",
    "start": "2659750",
    "end": "2667849"
  },
  {
    "text": "And then you can continue. Next message, he goes-- computes a hash value\nof all the transcript",
    "start": "2667850",
    "end": "2674450"
  },
  {
    "text": "so far, computes the\nnext prover's message. Here another verif-- and we\ngo-- that's how we continue.",
    "start": "2674450",
    "end": "2683090"
  },
  {
    "text": "Any questions about--\nso what did we go? We started from an\ninteractive protocol.",
    "start": "2683090",
    "end": "2689090"
  },
  {
    "text": "You can have many rounds. And now all we need is\nto agree on a hash key.",
    "start": "2689090",
    "end": "2694785"
  },
  {
    "text": "And once again, we're going to\nhash key-- the prover just gives you-- this is one message. That's it.",
    "start": "2694785",
    "end": "2701160"
  },
  {
    "text": "Yeah. AUDIENCE: Is it important to\ninclude beta in the transcript when you're hashing? YAEL T. KALAI: Good,\ngreat question. Is it important to include beta?",
    "start": "2701160",
    "end": "2706630"
  },
  {
    "text": "Actually, you don't\nneed to include beta at all because the\nverifier can compute beta. So you only need to know beta\nso you can compute gamma.",
    "start": "2706630",
    "end": "2714640"
  },
  {
    "text": "You actually don't\nneed to include it. Great question. Great, great question. ",
    "start": "2714640",
    "end": "2722220"
  },
  {
    "text": "So note, for example, if you\nthink about Kilian and Micali protocol, you may\nnot remember it,",
    "start": "2722220",
    "end": "2728140"
  },
  {
    "text": "but let me just write it here\njust to refresh your memory. Why not? You don't need to\nactually understand this, but since it's such a\nnice protocol-- and so,",
    "start": "2728140",
    "end": "2736290"
  },
  {
    "text": "how does it go? There's a prover and a verifier. The verifier sends a hash key. So he wants to prove\nthat x is in L. He",
    "start": "2736290",
    "end": "2744210"
  },
  {
    "text": "does a Merkle hash of the PC. So he computes a PCP. Pi is a PCP for x in L. And\nhe sends you the Merkle hash.",
    "start": "2744210",
    "end": "2756130"
  },
  {
    "text": "So he sends you\nroot and the depth.",
    "start": "2756130",
    "end": "2762339"
  },
  {
    "text": "That's just the--\nso he takes the PCP and he does a hash\nwith local opening.",
    "start": "2762340",
    "end": "2769595"
  },
  {
    "text": "For example, Merkle\nhash actually can do any hash with local\nopening that you want. This is the most common one.",
    "start": "2769595",
    "end": "2775950"
  },
  {
    "text": "And then he gets the randomness\nfrom the PCP verifier.",
    "start": "2775950",
    "end": "2781060"
  },
  {
    "text": "So this is r from\nr corresponding to the PCP verifier.",
    "start": "2781060",
    "end": "2786359"
  },
  {
    "text": "This determines a few\nlocations to open. So now he opens. So he gives-- so this randomness\ncorresponds to some locations,",
    "start": "2786360",
    "end": "2796320"
  },
  {
    "text": "i1 up to il, and then\nyou just open pi i1 with open 1 up to\npi il with open l.",
    "start": "2796320",
    "end": "2805230"
  },
  {
    "text": "That's the protocol. Note, this is completely random.",
    "start": "2805230",
    "end": "2810900"
  },
  {
    "text": "It's the randomness\nof the PCP verifier. So we can eliminate interaction.",
    "start": "2810900",
    "end": "2816609"
  },
  {
    "text": "This, if you think\nof it, this is just of a protocol where\nyou send a hash key,",
    "start": "2816610",
    "end": "2821820"
  },
  {
    "text": "and then you have\nalpha, beta, gamma. ",
    "start": "2821820",
    "end": "2828480"
  },
  {
    "text": "So let's eliminate interaction. So how do we\neliminate interaction? Well, there's this hash key.",
    "start": "2828480",
    "end": "2834720"
  },
  {
    "text": "We can use this hash\nkey to do Fiat-Shamir, but we can also use another hash\nkey, hash key sub Fiat-Shamir.",
    "start": "2834720",
    "end": "2841019"
  },
  {
    "text": "And now the-- well, this\ncan be-- now you give alpha.",
    "start": "2841020",
    "end": "2846970"
  },
  {
    "text": "Beta is going to be simply--\nyou don't have to include it. But it's going to\nbe, in our head, it's going to be eval of hash\nkey Fiat-Shamir of x in alpha.",
    "start": "2846970",
    "end": "2862079"
  },
  {
    "text": "And then maybe hash key is\nalso part of the transcript. And this gives beta.",
    "start": "2862080",
    "end": "2868870"
  },
  {
    "text": "Now you compute the gamma,\nwhich is the opening. ",
    "start": "2868870",
    "end": "2874290"
  },
  {
    "text": "So you can take\nany-- so now if--",
    "start": "2874290",
    "end": "2879480"
  },
  {
    "text": "what does the\nFiat-Shamir gives you? It gives us a way--\nremember, Kilian and Micali was very succinct.",
    "start": "2879480",
    "end": "2886300"
  },
  {
    "text": "You can take x any--\nlet's say NP language, N can be very large.",
    "start": "2886300",
    "end": "2891703"
  },
  {
    "text": "It can be lambda to the 1,000, I\ndon't know, it can be whatever. It can be even super\npolynomial lambda. It can be almost as\nlarge as 2 to the lambda.",
    "start": "2891703",
    "end": "2900780"
  },
  {
    "text": "And look how succinct\nthe protocol is. You just send a hash key, the\nroot, which is lambda bits,",
    "start": "2900780",
    "end": "2906510"
  },
  {
    "text": "and the opening, the PCP is all\nlambda bits, poly lambda bits, so very, very succinct.",
    "start": "2906510",
    "end": "2912880"
  },
  {
    "text": "And now you can\neven just make it-- so what is this-- you can\nall send it all one round.",
    "start": "2912880",
    "end": "2919740"
  },
  {
    "text": "So what does it give you? What does it tell us? That we can take\nany NP statement",
    "start": "2919740",
    "end": "2925170"
  },
  {
    "text": "and give a proof of\nsize poly lambda. Doesn't matter what size x is. ",
    "start": "2925170",
    "end": "2931990"
  },
  {
    "text": "That's amazing. Without cryptography, we\nneed poly [INAUDIBLE], these gigantic witnesses.",
    "start": "2931990",
    "end": "2937940"
  },
  {
    "text": "Yeah. AUDIENCE: I guess for the\ncollision resistance security property and probabilistic\nencoder hash keys,",
    "start": "2937940",
    "end": "2943000"
  },
  {
    "text": "you can imagine some\nkind of weird hash family where there exist hash\nkeys that are really bad. And so I guess here it's\nfine because the verifier",
    "start": "2943000",
    "end": "2950079"
  },
  {
    "text": "chooses the hash key. But you might imagine if the US\ngovernment publishes a hash key or anything else, what if\nit happens to be a bad one",
    "start": "2950080",
    "end": "2956230"
  },
  {
    "text": "or it was chosen\nto be a bad one? YAEL T. KALAI: OK, two things. First, you're\nsaying, who chooses this hash key of\nthe Fiat-Shamir,",
    "start": "2956230",
    "end": "2962350"
  },
  {
    "text": "how do we know that we trust it? But you know, it's\nmuch worse than that. Is it secure?",
    "start": "2962350",
    "end": "2967760"
  },
  {
    "text": "Let's say it's chosen\nrandomly from the hash family. Is this sound?",
    "start": "2967760",
    "end": "2974140"
  },
  {
    "text": "So again, what did we do here? We started with an\ninteractive protocol.",
    "start": "2974140",
    "end": "2979610"
  },
  {
    "text": "We proved it's sound. Let's say, Kilian\nand Micali is sound. We proved it. Assuming we have\ncollision-resistant hash, we proved that it's sound.",
    "start": "2979610",
    "end": "2986470"
  },
  {
    "text": "It's sound assuming the\nprover gets the messages of the verifier randomly.",
    "start": "2986470",
    "end": "2992089"
  },
  {
    "text": "That's what it sounds. We used it to prove soundness. Now, what am I saying?",
    "start": "2992090",
    "end": "2997983"
  },
  {
    "text": "What are we doing now? I'm saying, oh, forget about it. It's not random. Actually, you compute it on\nyour own from some hash key",
    "start": "2997983",
    "end": "3007890"
  },
  {
    "text": "that someone chooses\neven honestly from-- let's say we agree-- we\nall agreed on some hash family",
    "start": "3007890",
    "end": "3013200"
  },
  {
    "text": "and someone honestly\nchose a hash key. But now you know this hash key. Now you compute.",
    "start": "3013200",
    "end": "3018300"
  },
  {
    "text": "Who says it's sound? I mean, is it still sound? Maybe it's not sound. AUDIENCE: Maybe the hash\nkey always outputs 0,",
    "start": "3018300",
    "end": "3023580"
  },
  {
    "text": "but at the start-- [INTERPOSING VOICES] YAEL T. KALAI: OK. So first of all, of course,\nthere's-- one can think of--",
    "start": "3023580",
    "end": "3034089"
  },
  {
    "text": "this hash functions need\nto have some property. Collision resistance,\nat the minimum,",
    "start": "3034090",
    "end": "3039330"
  },
  {
    "text": "if you can find collisions-- for\nexample, here, you're screwed. I mean, it can't be like that.",
    "start": "3039330",
    "end": "3044400"
  },
  {
    "text": "It can't be trivial. So you need some property. Now the question is, what\nproperty do you need?",
    "start": "3044400",
    "end": "3050070"
  },
  {
    "text": "What property do you need\nfrom this hash family to argue soundness?",
    "start": "3050070",
    "end": "3055270"
  },
  {
    "text": "Yeah. AUDIENCE: I'm not sure if\nit's pseudorandomness or true randomness, but the\noutput's still random.",
    "start": "3055270",
    "end": "3061237"
  },
  {
    "text": "YAEL T. KALAI: Very, very. OK, good. So it seems like,\nwell, what do you need? It needs to be random,\nlike in that protocol.",
    "start": "3061237",
    "end": "3066940"
  },
  {
    "text": "We want to say, take any-- what is our goal? Our goal is to say, take\nany protocol that is sound,",
    "start": "3066940",
    "end": "3073380"
  },
  {
    "text": "public coin, and we want to\nconvert it to non-interactive. That's what we're trying to do.",
    "start": "3073380",
    "end": "3079740"
  },
  {
    "text": "Now, I'm saying, what\nproperty do you need? Well, look here,\nwell, our guarantee was that it's sound\nif this is random.",
    "start": "3079740",
    "end": "3086380"
  },
  {
    "text": "So we need this hash\nto be somehow random. Stands to reason.",
    "start": "3086380",
    "end": "3092520"
  },
  {
    "text": "So this is written out. But, look, hash\nfunctions are not random. It's a hash function. By the way, let me\nsay, this paradigm",
    "start": "3092520",
    "end": "3100440"
  },
  {
    "text": "is used all over the place. It's a very popular paradigm. It's used a lot in\nsignature schemes",
    "start": "3100440",
    "end": "3106599"
  },
  {
    "text": "and also in proof systems. It's used all over the place.",
    "start": "3106600",
    "end": "3112240"
  },
  {
    "text": "And which hash function is used? Some off-the-shelf\nhash function, SHA256,",
    "start": "3112240",
    "end": "3117490"
  },
  {
    "text": "like these engineer-type hash\nfunctions that are optimized.",
    "start": "3117490",
    "end": "3123369"
  },
  {
    "text": "So is it secure with SHA256? It's definitely not random.",
    "start": "3123370",
    "end": "3128580"
  },
  {
    "text": " So we actually don't know.",
    "start": "3128580",
    "end": "3133900"
  },
  {
    "text": "So let me be honest\nthat is it secure? I don't know.",
    "start": "3133900",
    "end": "3140030"
  },
  {
    "text": "Yeah. AUDIENCE: Yeah. I think the\nspecification [INAUDIBLE] is already shown that by\nlength extension [INAUDIBLE]",
    "start": "3140030",
    "end": "3146140"
  },
  {
    "text": "is definitely not now\nindistinguishable. YAEL T. KALAI: Yeah, right. Yeah. [INTERPOSING VOICES]",
    "start": "3146140",
    "end": "3152225"
  },
  {
    "text": "YAEL T. KALAI: Right. Right. Right. So actually, let me-- good. So let me just say a few things. ",
    "start": "3152225",
    "end": "3159670"
  },
  {
    "text": "OK, maybe I'll cut to the chase. I do know-- let me tell you,\nit's not necessarily secure.",
    "start": "3159670",
    "end": "3166880"
  },
  {
    "text": "Actually, unfortunately,\nwe have counterexamples. So I said this is used\nin practice all the time.",
    "start": "3166880",
    "end": "3172760"
  },
  {
    "text": "It's one of the great\ninventions of cryptography. Is it secure? No.",
    "start": "3172760",
    "end": "3178005"
  },
  {
    "text": "[LAUGHTER] So what do I mean by no? OK, let me-- is\nit always secure?",
    "start": "3178005",
    "end": "3184730"
  },
  {
    "text": "No. So let me say-- let me\ntake back my notes said. Is it always secure?",
    "start": "3184730",
    "end": "3190040"
  },
  {
    "text": "Is it always the\ncase that when you start with an\ninteractive protocol and convert a public coin, and\nyou apply Fiat-Shamir, is it",
    "start": "3190040",
    "end": "3197109"
  },
  {
    "text": "always secure? No. Moreover, let me\ntell you, we have protocols so that no\nmatter which hash family",
    "start": "3197110",
    "end": "3204820"
  },
  {
    "text": "you use, for all hash families,\nthe protocol becomes insecure.",
    "start": "3204820",
    "end": "3211990"
  },
  {
    "text": "Let me tell you\neven more than that. That will really you'll be mad.",
    "start": "3211990",
    "end": "3217650"
  },
  {
    "text": "The Kilian-Micali\nprotocol that we built up, ah, ah, ah, even\nthat's not secure.",
    "start": "3217650",
    "end": "3225559"
  },
  {
    "text": "The Fiat-Shamir\nwill be secure on n. But this, let me actually put\nan asterisk there, it's what--",
    "start": "3225560",
    "end": "3233870"
  },
  {
    "text": "OK, so let me tell\nyou what's known about the insecurity of\nthe Fiat-Shamir paradigm for this protocol.",
    "start": "3233870",
    "end": "3239450"
  },
  {
    "text": "What is known is there\nare some contrived-- so the Kilian-Micali\nprotocol says,",
    "start": "3239450",
    "end": "3245920"
  },
  {
    "text": "take any hash function\nthat's collision-resistant and take any PCP,\nwe get soundness.",
    "start": "3245920",
    "end": "3258190"
  },
  {
    "text": "There are examples of specific\nhash functions or specific PCPs",
    "start": "3258190",
    "end": "3264790"
  },
  {
    "text": "that are sound, of\ncourse, because it's-- I mean, there are examples\nof collision-resistant hash functions and PCPs such\nthat this, of course,",
    "start": "3264790",
    "end": "3272450"
  },
  {
    "text": "is sound-- it's sound for any\ncollision hash function PCP, but such that no\nmatter which hash",
    "start": "3272450",
    "end": "3278470"
  },
  {
    "text": "function you use\nfor the Fiat-Shamir, this will be\ninsecure, not sound.",
    "start": "3278470",
    "end": "3284780"
  },
  {
    "text": "No matter what you use. ",
    "start": "3284780",
    "end": "3290599"
  },
  {
    "text": "Yeah? AUDIENCE: Could you do a little\nmore in detail what breaks? YAEL T. KALAI: Yeah. I'll say a little bit\nwhat breaks in a second.",
    "start": "3290600",
    "end": "3297930"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE]\nor it's natural? YAEL T. KALAI: OK, good. Same question. So the example for\nwhy-- so why it breaks?",
    "start": "3297930",
    "end": "3306680"
  },
  {
    "text": "The example for why it breaks\nis very contrived actually. So that's why, is the message\nhere, don't use Fiat-Shamir.",
    "start": "3306680",
    "end": "3314910"
  },
  {
    "text": "We have a break. No, that's not the message. You should use Fiat-Shamir\nbecause, in practice, it works very well. I don't have a single instance\nthat people use Fiat-Shamir",
    "start": "3314910",
    "end": "3322820"
  },
  {
    "text": "in practice and it broke. So it's a great paradigm. Use it.",
    "start": "3322820",
    "end": "3328100"
  },
  {
    "text": "Can we come up with a\ngeneral proof of security? No, because we have\ncounterexamples.",
    "start": "3328100",
    "end": "3334070"
  },
  {
    "text": "So what did we learn? So maybe I'll start by saying-- I'll say very, very high\nlevel, not in detail,",
    "start": "3334070",
    "end": "3342049"
  },
  {
    "text": "but about the counterexamples. How can we build\ncounterexamples? And as opposed to going to\nthe Kilian-Micali protocol,",
    "start": "3342050",
    "end": "3349470"
  },
  {
    "text": "because there you need to work\na little harder to fit it in-- I'll say a word about how\nyou fit it in there too.",
    "start": "3349470",
    "end": "3354480"
  },
  {
    "text": "But the idea is the following. Let me try to give\nyou a proof that is--",
    "start": "3354480",
    "end": "3360240"
  },
  {
    "text": "or an interactive\nprotocol that is sound. But when you convert it to--",
    "start": "3360240",
    "end": "3366470"
  },
  {
    "text": "when you apply Fiat-Shamir,\nsoundness breaks. So the idea is the following.",
    "start": "3366470",
    "end": "3372980"
  },
  {
    "text": "It can be a very\ncontrived protocol. So what I want to do is\nconstruct a contrived protocol",
    "start": "3372980",
    "end": "3384470"
  },
  {
    "text": "that is sound. But when you apply\nFiat-Shamir, no matter which hash function\nyou use, it will break.",
    "start": "3384470",
    "end": "3391880"
  },
  {
    "text": "And intuitively, the contrived\nprotocol is the following. Take any sound protocol,\nfor example, Kilian-Micali.",
    "start": "3391880",
    "end": "3400670"
  },
  {
    "text": "Whatever-- or GKR whatever\nsound protocol you like. And I'm going to change it-- I'm going to tweak a little bit\nthat the soundness will still",
    "start": "3400670",
    "end": "3407780"
  },
  {
    "text": "remain. I'm going to tweak it so that\nthe soundness will still hold.",
    "start": "3407780",
    "end": "3413960"
  },
  {
    "text": "But on the tweaked protocol,\nwhen you apply Fiat-Shamir, it will fail. So start with PV, for example,\nGKR, for example, Kilian-Micali,",
    "start": "3413960",
    "end": "3422510"
  },
  {
    "text": "whatever you like. And I'm going to\ntweak it a little bit. How am I going to tweak it?",
    "start": "3422510",
    "end": "3428970"
  },
  {
    "text": "I'm going to say, tell the\nverifier, you know what? Accept, if you\naccept it before, but",
    "start": "3428970",
    "end": "3435710"
  },
  {
    "text": "accept also if something\nvery weird happens. But don't worry, it\nwill never happen.",
    "start": "3435710",
    "end": "3441210"
  },
  {
    "text": "When else are you\ngoing to accept? So remember the verifier, let's\nsay, he sends a random beta.",
    "start": "3441210",
    "end": "3448100"
  },
  {
    "text": "If the prover, let's say, ahead\nof time, guessed your beta,",
    "start": "3448100",
    "end": "3453510"
  },
  {
    "text": "he told you, I know how you're\ngoing to compute your beta. So if the prover,\nahead of time, send you",
    "start": "3453510",
    "end": "3461430"
  },
  {
    "text": "a message that will tell you-- say, I can predict beta, and\nwill predict beta ahead of time,",
    "start": "3461430",
    "end": "3471910"
  },
  {
    "text": "then you accept him\nbecause this is random. What's the probability\nthat you can pick my beta? If beta is random\n0, 1 to the lambda,",
    "start": "3471910",
    "end": "3479920"
  },
  {
    "text": "there's no way you\ncan predict it. So if by any chance you\npredict I'm going to-- you won the lottery,\nI'll accept you.",
    "start": "3479920",
    "end": "3487242"
  },
  {
    "text": "I don't care if x in\nthe language or not. It only adds a negligible\nprobability of--",
    "start": "3487242",
    "end": "3492300"
  },
  {
    "text": "because the probability that you\ncould predict beta is 1 over 2 to the beta. ",
    "start": "3492300",
    "end": "3500550"
  },
  {
    "text": "Now, what happens in the\nFiat-Shamir paradigm? Oh, I can tell you, oh, I\nknow, beta, I can predict it.",
    "start": "3500550",
    "end": "3506505"
  },
  {
    "text": "And I'm going to tell you\nexactly how I predict it. Beta is going to be equal\nhash key and this message.",
    "start": "3506505",
    "end": "3513289"
  },
  {
    "text": " That's the idea.",
    "start": "3513290",
    "end": "3518740"
  },
  {
    "text": "Now, to implement this\nidea, it's harder. It requires some work.",
    "start": "3518740",
    "end": "3523930"
  },
  {
    "text": "I'll tell you why this idea\nis not trivially implemented, because when we do Fiat-Shamir,\nwe say we start with a protocol.",
    "start": "3523930",
    "end": "3535470"
  },
  {
    "text": "And now the question\nis, does there exist a hash of Fiat-Shamir hash\nfamily for which it's secure?",
    "start": "3535470",
    "end": "3542520"
  },
  {
    "text": "Now, we saw with the protocol,\nthis protocol can say, OK, alpha is hash\nkey, for example.",
    "start": "3542520",
    "end": "3550650"
  },
  {
    "text": "And then you accept, if\nyou originally accepted, or if eval of hash key of\nalpha, which is also hash key,",
    "start": "3550650",
    "end": "3562500"
  },
  {
    "text": "is equal to beta. Now, this will not happen,\nbut in the Fiat-Shamir it will happen. I'm going to just send\nthe Fiat-Shamir hash key.",
    "start": "3562500",
    "end": "3568500"
  },
  {
    "text": "That's what I do. But then someone will say,\nOK, so you give me a protocol.",
    "start": "3568500",
    "end": "3574780"
  },
  {
    "text": "What is the length\nof your alpha? It's lambda bits. I'm going to use a hash function\nthat the hash key is longer.",
    "start": "3574780",
    "end": "3582220"
  },
  {
    "text": "And now you can't send\nit because here I'm like, I'll send the hash key.",
    "start": "3582220",
    "end": "3587550"
  },
  {
    "text": "So then you need to use a hash\nto squish this hash key in. It's more complicated.",
    "start": "3587550",
    "end": "3593250"
  },
  {
    "text": "But the basic idea\nis, this does not",
    "start": "3593250",
    "end": "3599070"
  },
  {
    "text": "work if somehow the verifier\naccepts you if you convinced him",
    "start": "3599070",
    "end": "3605160"
  },
  {
    "text": "that you can predict his beta. That's really-- and so we can\nconstruct contrived protocols",
    "start": "3605160",
    "end": "3616020"
  },
  {
    "text": "that achieve this. Or we can construct a very\ncontrived hash function that do this weird game\ninside the hash function,",
    "start": "3616020",
    "end": "3623597"
  },
  {
    "text": "like the hash function\nbecomes trivial if you feed it something that kind of-- so it requires more work,\nbut it's all very contrived.",
    "start": "3623597",
    "end": "3632960"
  },
  {
    "text": "So I hope I convinced you\nby-- with these examples, the counterexamples\nare so contrived. So when you say, oh, we found\nthat Fiat-Shamir is not secure,",
    "start": "3632960",
    "end": "3641470"
  },
  {
    "text": "and, you show this example, the\nreaction should be, come on. Nobody uses these protocols.",
    "start": "3641470",
    "end": "3648400"
  },
  {
    "text": "But what it does tell us, you\ncan't apply Fiat-Shamir blind. What it does tell\nus is, for all of us",
    "start": "3648400",
    "end": "3655359"
  },
  {
    "text": "who are obsessed with trying\nto prove the paradigm, there's no general proof\nbecause we have counterexamples.",
    "start": "3655360",
    "end": "3662560"
  },
  {
    "text": "At least that. Question? AUDIENCE: Do you need to\nstart with the protocol that's",
    "start": "3662560",
    "end": "3668380"
  },
  {
    "text": "negligibly sound? YAEL T. KALAI: Great. Great question. That's my next one.",
    "start": "3668380",
    "end": "3673765"
  },
  {
    "text": "Yeah.  The answer is yes, but\nI'll talk about that next.",
    "start": "3673765",
    "end": "3680240"
  },
  {
    "text": "The question was about\nnegligible soundness, but we'll get to that next. So any questions though before--",
    "start": "3680240",
    "end": "3689020"
  },
  {
    "text": "OK. So but, still, people use\nthe Fiat-Shamir paradigm. And there's a question\nof is it sound?",
    "start": "3689020",
    "end": "3697869"
  },
  {
    "text": "For natural protocols,\nis it sound? And the answer is, actually,\nit would have been nice",
    "start": "3697870",
    "end": "3703960"
  },
  {
    "text": "if we can come up\nwith nice protocols and say, at least a large class\nof protocols, and say, yeah,",
    "start": "3703960",
    "end": "3709910"
  },
  {
    "text": "if you use this hash function,\nthis specific hash function, which we know is\ncollision-resistant under discrete log or under\nsome other assumption,",
    "start": "3709910",
    "end": "3716450"
  },
  {
    "text": "then your scheme is sound. That would be very nice.  We're still not there yet,\nbut we made a lot of progress",
    "start": "3716450",
    "end": "3724540"
  },
  {
    "text": "in recent years. And I want to tell you\nabout the progress. But before that, the\nfirst kind of way",
    "start": "3724540",
    "end": "3735789"
  },
  {
    "text": "we tried to analyze-- so the\nFiat-Shamir gained popularity very quickly. And because it's so\nsimple and so efficient,",
    "start": "3735790",
    "end": "3744310"
  },
  {
    "text": "it became very, very popular. And people really wanted\nto understand its security.",
    "start": "3744310",
    "end": "3750184"
  },
  {
    "text": "Is it sound? Is it not sound? And then in '93,\nBellare and Rogaway",
    "start": "3750185",
    "end": "3756880"
  },
  {
    "text": "introduced an ideal model\ncalled the Random Oracle Model. ",
    "start": "3756880",
    "end": "3775150"
  },
  {
    "text": "And this model\nsaid, you know what? By the way, this was before\nwe had any counterexamples.",
    "start": "3775150",
    "end": "3782590"
  },
  {
    "text": "This model was introduced\nby Bellare and Rogaway in, I believe, '93.",
    "start": "3782590",
    "end": "3791590"
  },
  {
    "text": "This was before we knew\nany counterexamples for the paradigm. And they-- I mean,\nexcept for some,",
    "start": "3791590",
    "end": "3798910"
  },
  {
    "text": "which goes to your question,\nLeo, but I'm going to get to it. And they wanted to ask,\ncan we prove security",
    "start": "3798910",
    "end": "3805780"
  },
  {
    "text": "of the Fiat-Shamir-- what do we need about\nthe hash function?",
    "start": "3805780",
    "end": "3812070"
  },
  {
    "text": "What properties do we need\nabout the hash function to prove security? And the first property\nthey said, you know what?",
    "start": "3812070",
    "end": "3817230"
  },
  {
    "text": "What if the hash function\nwas completely random? So when you use\nFiat-Shamir, we use",
    "start": "3817230",
    "end": "3823040"
  },
  {
    "text": "a specific-- there's a circuit\nthat computes the hash function. It's like a Turing machine,\na polynomial time Turing",
    "start": "3823040",
    "end": "3828080"
  },
  {
    "text": "machine or a\npolynomial size circuit takes a hash key and, OK. They say, you know what? What if the hash function\nis completely random?",
    "start": "3828080",
    "end": "3835490"
  },
  {
    "text": "So the Random Oracle\nModel says, suppose",
    "start": "3835490",
    "end": "3841160"
  },
  {
    "text": "we apply Fiat-Shamir paradigm\nwith truly random function",
    "start": "3841160",
    "end": "3854869"
  },
  {
    "text": "H. So this is completely,\ncompletely random. So what do I mean by\ncompletely random?",
    "start": "3854870",
    "end": "3860660"
  },
  {
    "text": "So now, I guess, let me,\ninstead of choosing a function",
    "start": "3860660",
    "end": "3870799"
  },
  {
    "text": "from a family, we don't choose\na function, and we just say,",
    "start": "3870800",
    "end": "3877080"
  },
  {
    "text": "suppose they have\na truly random-- they have access to\na-- both of them-- to a truly, truly\nrandom function.",
    "start": "3877080",
    "end": "3884510"
  },
  {
    "text": "And they can ask. So when the prover\ncomputes alpha, he asks-- he has Oracle\naccess to this function.",
    "start": "3884510",
    "end": "3891800"
  },
  {
    "text": "And he tells the\nfunction, give me the function applied to x and\nalpha, and he gets back beta.",
    "start": "3891800",
    "end": "3898950"
  },
  {
    "text": "And every time this hash,\nthis Oracle, he gets a query, he chooses a\ncompletely random-- so",
    "start": "3898950",
    "end": "3905060"
  },
  {
    "text": "think of this as a database\nof all poly of size 2 to the lambda of all the--\njust random, random elements.",
    "start": "3905060",
    "end": "3912740"
  },
  {
    "text": "So really, really\ntruly random function. So now the question was,\nOK, if this is truly random,",
    "start": "3912740",
    "end": "3919950"
  },
  {
    "text": "now can we get security? At least, that's the minimum. And moreover, it seemed like the\nanswer should be yes because,",
    "start": "3919950",
    "end": "3927530"
  },
  {
    "text": "in some sense, what\nwas their intuition? The intuition is,\nwhat does it matter",
    "start": "3927530",
    "end": "3933860"
  },
  {
    "text": "if you're talking to a verifier\nthat gives you random queries or you're talking to,\nin terms of the prover.",
    "start": "3933860",
    "end": "3941130"
  },
  {
    "text": "So the prover is\ntrying to cheat. What does it matter if\nhe's talking to a verifier to give him random\nbetas, or he's",
    "start": "3941130",
    "end": "3947539"
  },
  {
    "text": "talking to a random function\nthat gives him random betas? Both of them give random betas.",
    "start": "3947540",
    "end": "3952710"
  },
  {
    "text": "What's the difference? So it should at least be secure\nin the Random Oracle Model.",
    "start": "3952710",
    "end": "3958500"
  },
  {
    "text": "Let's first establish that. So is it secure in the\nRandom Oracle Model.",
    "start": "3958500",
    "end": "3964055"
  },
  {
    "text": "No.  And this goes to Leo's question.",
    "start": "3964055",
    "end": "3969622"
  },
  {
    "text": "And I'm going to tell you why\nit's not secure in the Random Oracle Model. And actually, let me take a\nlittle detour and tell you--",
    "start": "3969622",
    "end": "3980270"
  },
  {
    "text": "I'll show why it's not\nsecure in the Random Oracle Model via a little protocol.",
    "start": "3980270",
    "end": "3986220"
  },
  {
    "text": "This protocol actually is going\nto be useful because, actually, later, we will show\nthat the Fiat-Shamir",
    "start": "3986220",
    "end": "3991880"
  },
  {
    "text": "is sound for this protocol. It's kind of weird. But let's-- this\nprotocol, by the way,",
    "start": "3991880",
    "end": "3997230"
  },
  {
    "text": "is very important protocol. So let me quickly do--\nlet me do a little detour.",
    "start": "3997230",
    "end": "4004579"
  },
  {
    "text": "I think it's a really\ninteresting detour. So I hope you enjoy it. It takes us a little bit into\nthe land of cryptography,",
    "start": "4004580",
    "end": "4012260"
  },
  {
    "text": "but not too bad--  a little further\nthan we went so far.",
    "start": "4012260",
    "end": "4018410"
  },
  {
    "text": "So far we just talked\nabout hash functions. So what I'm going\nto say now is going",
    "start": "4018410",
    "end": "4028240"
  },
  {
    "text": "to be a little bit\nof a high level.  So a protocol that\nI want to talk about",
    "start": "4028240",
    "end": "4038470"
  },
  {
    "text": "is actually a zero\nknowledge protocol. So, so far, we just talked about\nverification, verification,",
    "start": "4038470",
    "end": "4045170"
  },
  {
    "text": "succinctness, and efficiency. But, as I mentioned,\ninteractive protocols",
    "start": "4045170",
    "end": "4051140"
  },
  {
    "text": "were actually invented for\nthe sake of zero knowledge. So what was the goal? The goal was, forget\nabout succinctness now.",
    "start": "4051140",
    "end": "4059058"
  },
  {
    "text": "It was not at all\nabout succinctness. All we wanted is a prover\nthat has, let's say,",
    "start": "4059058",
    "end": "4064980"
  },
  {
    "text": "a witness for some-- there's some language. And let's say,\nthe language we're",
    "start": "4064980",
    "end": "4070160"
  },
  {
    "text": "going to be interested for\ntoday, just as an example, is the language of\nHamiltonian cycle.",
    "start": "4070160",
    "end": "4075640"
  },
  {
    "text": " That's just an example. So this language\nconsists of graphs.",
    "start": "4075640",
    "end": "4083630"
  },
  {
    "text": "So this is the language\nthat consists of all graphs. Graph is just consists\nof nodes and edges",
    "start": "4083630",
    "end": "4090650"
  },
  {
    "text": "such that this graph has\na Hamiltonian cycle such that G has a Hamiltonian cycle.",
    "start": "4090650",
    "end": "4103439"
  },
  {
    "text": "What this means is\njust, you can just--",
    "start": "4103439",
    "end": "4109640"
  },
  {
    "text": "there's a kind of a\ncycle of all the nodes. So it means that there's\na cycle of all the nodes.",
    "start": "4109640",
    "end": "4116640"
  },
  {
    "text": "So let's say you start with node\ni1, i2, up to i n, and then go--",
    "start": "4116640",
    "end": "4123920"
  },
  {
    "text": "up to i n so that\nthere's an edge here, edge, edge, edge, edge,\nedge, and edge all the way back.",
    "start": "4123920",
    "end": "4130220"
  },
  {
    "text": "That means, if you can-- if\nthere is some such a setting",
    "start": "4130220",
    "end": "4137028"
  },
  {
    "text": "of the nodes for which\nyou can set them in a way that there's edges\nthat complete a cycle,",
    "start": "4137029",
    "end": "4142679"
  },
  {
    "text": "then we say the graph\nhas a Hamiltonian cycle. This language is NP complete.",
    "start": "4142680",
    "end": "4149100"
  },
  {
    "text": "Now, so now going back, what\nis the zero knowledge proof? A zero knowledge\nproof is a way I",
    "start": "4149100",
    "end": "4154759"
  },
  {
    "text": "want to convince you that a\ngraph G has a Hamiltonian cycle. Now, I can give you\nthe Hamiltonian cycle.",
    "start": "4154760",
    "end": "4161240"
  },
  {
    "text": "I can give you-- see? Here's the nodes. You can look, there's\na cycle there. But I don't want to give\nyou any information.",
    "start": "4161240",
    "end": "4167278"
  },
  {
    "text": "I don't want you\nto learn anything. I don't want you to find\nthe Hamiltonian cycle. I don't want to reveal\nany information,",
    "start": "4167279",
    "end": "4173460"
  },
  {
    "text": "but I want to convince you that\nit has a Hamiltonian cycle. ",
    "start": "4173460",
    "end": "4179270"
  },
  {
    "text": "How do I do that? So this kind of-- so\nthere's a celebrated result.",
    "start": "4179270",
    "end": "4185009"
  },
  {
    "text": "It started with\nGoldwasser, Micali, and Markov in the mid '80s and\nwhere they defined this notion",
    "start": "4185010",
    "end": "4191299"
  },
  {
    "text": "of zero knowledge and\nconstructed some protocols. But later, very shortly\nlater, by Goldreich, Micali,",
    "start": "4191300",
    "end": "4200300"
  },
  {
    "text": "and Wigderson showed that,\nactually, any PNP language has a zero knowledge proof.",
    "start": "4200300",
    "end": "4207750"
  },
  {
    "text": "Let me give you one\nspecific zero knowledge proof for the Hamiltonian\ncycle language.",
    "start": "4207750",
    "end": "4213620"
  },
  {
    "text": "And this is due to Blum. So I'll show you the proof. It's very, very nice.",
    "start": "4213620",
    "end": "4219809"
  },
  {
    "text": "And it's going to be useful for\nus to show why the Random Oracle Model fails, and then\nalso to show the security",
    "start": "4219810",
    "end": "4226218"
  },
  {
    "text": "of the Fiat-Shamir. So this is actually-- we'll\nget back to this protocol. So what is this protocol?",
    "start": "4226218",
    "end": "4233460"
  },
  {
    "text": "There's a prover and a verifier. The idea is the following. The prover will-- he knows--\nhe will first-- he has a G.",
    "start": "4233460",
    "end": "4244650"
  },
  {
    "text": "The first thing he's\ngoing to permute-- completely permute the nodes.",
    "start": "4244650",
    "end": "4249909"
  },
  {
    "text": "So he's going to choose\na random permutation pi. Let's say n is\nthe number denoted",
    "start": "4249910",
    "end": "4255150"
  },
  {
    "text": "by n, the number\nof vertices in G. He's going to choose a random\npermutation of the nodes.",
    "start": "4255150",
    "end": "4266100"
  },
  {
    "text": "Now he has the permuted\ngraph in his head. So he has pi of G in his head.",
    "start": "4266100",
    "end": "4272670"
  },
  {
    "text": "Now this, it has, this pi\nof G has a Hamiltonian cycle because G has and I\njust renamed the nodes.",
    "start": "4272670",
    "end": "4278889"
  },
  {
    "text": "Now I'm going to-- I want to give you just\nthis Hamiltonian cycle.",
    "start": "4278890",
    "end": "4284860"
  },
  {
    "text": "So I want to give you the nodes\nhere that form a Hamiltonian. So I want to give you-- I would like to give\nyou the nodes that",
    "start": "4284860",
    "end": "4291660"
  },
  {
    "text": "form the Hamiltonian, just\nthe Hamiltonian cycle. But I can't give you, that\nwill reveal information.",
    "start": "4291660",
    "end": "4297900"
  },
  {
    "text": "So I don't want to do that. Instead, I'm going to give\nit to you in a safe, hidden.",
    "start": "4297900",
    "end": "4305425"
  },
  {
    "text": "This is what's called,\nin cryptography, we call this commitment scheme. So I'm going to give you a\ncommitment of the cycle C.",
    "start": "4305425",
    "end": "4316102"
  },
  {
    "text": "So think of this, for all the\npossible edges, and grid 0, 0,",
    "start": "4316102",
    "end": "4321316"
  },
  {
    "text": "0, 0, only in the cycle\nI'm going to put 1. That's what I mean here. Because, so this is--",
    "start": "4321316",
    "end": "4326760"
  },
  {
    "text": "think of it as a\nmatrix of n by n--",
    "start": "4326760",
    "end": "4332849"
  },
  {
    "text": "sorry, yeah, n by n. For any possible edge, for\nany possible nodes, i and j,",
    "start": "4332850",
    "end": "4340320"
  },
  {
    "text": "I'm going to put 0, like\nthere is no edge, only if it's in the cycle I'm\ngoing to put an edge there.",
    "start": "4340320",
    "end": "4346110"
  },
  {
    "text": "Yeah. AUDIENCE: So a cycle is on the\nlabel of the permuted graph. YAEL T. KALAI: Exactly,\non the permuted graph.",
    "start": "4346110",
    "end": "4354210"
  },
  {
    "text": "The reason I permute the graph\nis to ensure zero knowledgeness. Even though when I\nsend the commitment,",
    "start": "4354210",
    "end": "4359699"
  },
  {
    "text": "really, think of it-- we're going to later talk about\nhow to do this commitment. But for now, think of\nit, there's a safe.",
    "start": "4359700",
    "end": "4367240"
  },
  {
    "text": "I'm putting my commitment\ninside the safe. I leave the key to myself\nand I give you this box.",
    "start": "4367240",
    "end": "4372640"
  },
  {
    "text": "So you learn nothing. So here, really,\nyou learn nothing. But now-- but you're\nnot convinced either",
    "start": "4372640",
    "end": "4380220"
  },
  {
    "text": "because you just got a safe. What are you going\nto do with it? So now here's how I'm going to\nconvince you that, actually,",
    "start": "4380220",
    "end": "4385440"
  },
  {
    "text": "this graph has a Hamiltonian\ncycle without leaking any information.",
    "start": "4385440",
    "end": "4391770"
  },
  {
    "text": "So you, the verifier, you're\ngoing to give me a random bit B. This is going to\nbe random, random bit.",
    "start": "4391770",
    "end": "4403630"
  },
  {
    "text": "Now, if B is 0, I'm\njust going to open this.",
    "start": "4403630",
    "end": "4410900"
  },
  {
    "text": "So if B is 0, if B is 0, open.",
    "start": "4410900",
    "end": "4416860"
  },
  {
    "text": "I'm going to open the safe. And now you can see\nthat what's sitting there is a Hamiltonian cycle.",
    "start": "4416860",
    "end": "4424180"
  },
  {
    "text": "Now, what did you learn? Well, because I permuted,\nit's just a random cycle.",
    "start": "4424180",
    "end": "4430250"
  },
  {
    "text": "Actually, it has nothing\nto do with the graph. I can even first just choose\na random cycle, commit to it,",
    "start": "4430250",
    "end": "4437920"
  },
  {
    "text": "and then post choose\nthis permutation to align with this cycle.",
    "start": "4437920",
    "end": "4445340"
  },
  {
    "text": "So really, because I chose\na random permutation, it's just a random cycle.",
    "start": "4445340",
    "end": "4451182"
  },
  {
    "text": "So you didn't learn anything. It's just a random cycle. You and yourself can put\na random cycle in a safe.",
    "start": "4451182",
    "end": "4456580"
  },
  {
    "text": "So really, no information. What if B equals 1?",
    "start": "4456580",
    "end": "4463840"
  },
  {
    "text": "If B equals 1, I want to--\nfirst I want to give you pi.",
    "start": "4463840",
    "end": "4469179"
  },
  {
    "text": "So I give you pi. But now I can't open this. Because now, if you know\npi, and you see the cycle,",
    "start": "4469180",
    "end": "4474790"
  },
  {
    "text": "you know what my\nHamiltonian cycle is. So what I'm going\nto do, I just want to convince you that\nthis cycle only has",
    "start": "4474790",
    "end": "4487450"
  },
  {
    "text": "edges that were in this graph. So I'm going to open\nonly the non-edges.",
    "start": "4487450",
    "end": "4495170"
  },
  {
    "text": "So instead of\nopening everything, I'm going to open non-edges\nin the permuted graph.",
    "start": "4495170",
    "end": "4509590"
  },
  {
    "text": "So note, here we\nhave-- so I have here-- so there's a question,\nhow do I open?",
    "start": "4509590",
    "end": "4516770"
  },
  {
    "text": "So think of it, I commit\nto n squared bits.",
    "start": "4516770",
    "end": "4522470"
  },
  {
    "text": "For any possible ij, I have a\nbit saying, is it 0 or is it 1? Is there an edge or\nis it not an edge?",
    "start": "4522470",
    "end": "4528380"
  },
  {
    "text": "Think of it as I'm giving\nyou n squared safes. Now, if B is 0, I\nopen all the safes.",
    "start": "4528380",
    "end": "4535250"
  },
  {
    "text": "I open all the safes\nand you see, oh, there's only-- there's just a cycle. There's everything is 0\nexcept for i1 and i2 are--",
    "start": "4535250",
    "end": "4544900"
  },
  {
    "text": "there's one, and then\ni2, i3, that's it. Everything else is 0. If you send me a 1, then\nI open something else.",
    "start": "4544900",
    "end": "4553250"
  },
  {
    "text": "I don't open everything. The opposite. What I do is, I give you pi.",
    "start": "4553250",
    "end": "4559660"
  },
  {
    "text": "And for every non-edge in\npi, I open the non-edge safe",
    "start": "4559660",
    "end": "4566890"
  },
  {
    "text": "and I show you, see, there's 0. So all the safes I opened\nare just going to be 0.",
    "start": "4566890",
    "end": "4574950"
  },
  {
    "text": "So you really didn't\nlearn anything. I just opened zeros. You can simulate\nthat in your head.",
    "start": "4574950",
    "end": "4580070"
  },
  {
    "text": "What do you learn? In some sense, you know\nthat if you accept me,",
    "start": "4580070",
    "end": "4585530"
  },
  {
    "text": "I'm going to open\nto just zeros there. And the pi doesn't\nreveal anything.",
    "start": "4585530",
    "end": "4590700"
  },
  {
    "text": "It's just a random permutation. So note, you, the verifier,\ndidn't learn anything.",
    "start": "4590700",
    "end": "4599070"
  },
  {
    "text": "If you open to 0, if you send\nme 0, I just open random cycle.",
    "start": "4599070",
    "end": "4604179"
  },
  {
    "text": "Has nothing to do with\nthe graph, nothing, just random cycle. That's not helpful for you.",
    "start": "4604180",
    "end": "4610490"
  },
  {
    "text": "If you open 1, I gave you\ncompletely random permutation. You know pi G on your own,\nand I opened to zeros.",
    "start": "4610490",
    "end": "4620960"
  },
  {
    "text": "All the non-edges are open to 0. You learn nothing. Still, you are somewhat\nconvinced that this protocol--",
    "start": "4620960",
    "end": "4632240"
  },
  {
    "text": "that the graph is Hamiltonian. Why are you somewhat\nconvinced that there's a Hamiltonian cycle?",
    "start": "4632240",
    "end": "4638340"
  },
  {
    "text": "Why are you somewhat convinced? Because if there is no\nHamiltonian cycle in G,",
    "start": "4638340",
    "end": "4643790"
  },
  {
    "text": "I cannot open to both 0 and 1. Why is it the case\nthat I cannot open?",
    "start": "4643790",
    "end": "4650340"
  },
  {
    "text": "Let's see. I'm achieving-- let's\nsay the graph, is",
    "start": "4650340",
    "end": "4655670"
  },
  {
    "text": "there is no Hamiltonian cycle. Now, I sent you these\nn squared safes.",
    "start": "4655670",
    "end": "4664460"
  },
  {
    "text": "Case one, there's indeed only\na Hamiltonian cycle there. Indeed, when you open all\nthese n safes, what you see",
    "start": "4664460",
    "end": "4672050"
  },
  {
    "text": "is everything is 0 except\nfor Hamiltonian cycle. If that's not the case,\nI cannot open to 0.",
    "start": "4672050",
    "end": "4679440"
  },
  {
    "text": "If I open to 0, you catch me. Now, suppose I did\nsucceed in opening to 0.",
    "start": "4679440",
    "end": "4686400"
  },
  {
    "text": "Namely, there's just a\nHamiltonian cycle there. That's it. Then I claim there's\nno way I can open to 1.",
    "start": "4686400",
    "end": "4694639"
  },
  {
    "text": "Why? If there is a\nHamiltonian cycle there, I know the Hamiltonian cycle\nis not on the non-edges",
    "start": "4694640",
    "end": "4703280"
  },
  {
    "text": "because the non-edges are 0. If I open on one,\nthe non-edges are 0. So the Hamiltonian\ncycle is on the edges.",
    "start": "4703280",
    "end": "4710070"
  },
  {
    "text": "But there is no\nHamiltonian cycle. [LAUGHS] It can't\nbe on the edges. So either-- I'm achieving\nprover-- either I can--",
    "start": "4710070",
    "end": "4718699"
  },
  {
    "text": "I may be able to open to 0. I may be able to open to 1,\nbut I can't open to both.",
    "start": "4718700",
    "end": "4724250"
  },
  {
    "text": "So with probability\n1/2, you'll reject me. Half isn't that great,\nbut it's something.",
    "start": "4724250",
    "end": "4732233"
  },
  {
    "text": "So at least now we know,\nwith probability 1/2, I'm going to be rejected. ",
    "start": "4732233",
    "end": "4739730"
  },
  {
    "text": "You like the detour? OK, let's go back to\nthe random Oracle. But before-- yeah.",
    "start": "4739730",
    "end": "4744829"
  },
  {
    "text": "AUDIENCE: So do you have to\ncompute the whole graph, or just a cycle? YAEL T. KALAI: So what--\nno, what I commit to is,",
    "start": "4744830",
    "end": "4751350"
  },
  {
    "text": "actually, I have n\nsquared commitments. Everything is 0 except\nfor a random cycle.",
    "start": "4751350",
    "end": "4759600"
  },
  {
    "text": "I do-- I only commit to zeros. Why is it important that\nI only commit to zeros? Because when I open-- ah, OK.",
    "start": "4759600",
    "end": "4768580"
  },
  {
    "text": "I want to make sure that\nthere's a cycle here. But when I open to 1, I don't\nwant to reveal anything.",
    "start": "4768580",
    "end": "4775240"
  },
  {
    "text": "And the way I don't\nreveal anything is I show that all the\nnon-edges in pi, in pi of g,",
    "start": "4775240",
    "end": "4781570"
  },
  {
    "text": "if you open them\nhere, you'll get a 0. AUDIENCE: Oh, OK. So it's a matrix.",
    "start": "4781570",
    "end": "4787330"
  },
  {
    "text": "So it already kind\nof has everything-- with the cycle, like\noutlining the cycle.",
    "start": "4787330",
    "end": "4792392"
  },
  {
    "text": "YAEL T. KALAI: Exactly. Exactly. What I commit to is a matrix-- what I commit to\nis a matrix that",
    "start": "4792392",
    "end": "4797910"
  },
  {
    "text": "only has a Hamiltonian\ncycle and that's it. Everything else is 0.",
    "start": "4797910",
    "end": "4803640"
  },
  {
    "text": "Yeah. AUDIENCE: So in the second\ncase, the verifier cannot use",
    "start": "4803640",
    "end": "4809250"
  },
  {
    "text": "the permutation to figure\nout what edges are not in the Hamiltonian cycle\nfor the original graph.",
    "start": "4809250",
    "end": "4814920"
  },
  {
    "text": "YAEL T. KALAI: Right. So in the B equals 1 case\nyou're talking about? Yeah. In the B equals 1\ncase, the verifier--",
    "start": "4814920",
    "end": "4821517"
  },
  {
    "text": "what does he learn? He learns pi, the permutation. That's just a\nrandom permutation. And then I'm just\ntelling you, I'm",
    "start": "4821518",
    "end": "4827969"
  },
  {
    "text": "reassuring you\nthat I didn't lie. What do I mean by reassure you? I open-- everybody, you can\ncompute pi G on your own.",
    "start": "4827970",
    "end": "4833887"
  },
  {
    "text": "That's not a secret. G is given, pi is given. You can find G. You\nsee all the non-edges. That's not a-- and\nall the non-edges,",
    "start": "4833887",
    "end": "4841230"
  },
  {
    "text": "I'm going to open only the\nnon-edges and show you zeros. ",
    "start": "4841230",
    "end": "4846600"
  },
  {
    "text": "Because the point is, if I\nwas honest, what I should do, is put ones only on edges,\nand not only on edges,",
    "start": "4846600",
    "end": "4854320"
  },
  {
    "text": "only on the Hamiltonian\nand the edges that form a Hamiltonian cycle. That's what I should\ndo if I'm honest.",
    "start": "4854320",
    "end": "4860320"
  },
  {
    "text": "And what I show you,\nI don't show you that because that\nwill give information. But at least what I show you.",
    "start": "4860320",
    "end": "4865929"
  },
  {
    "text": "Then all the non-edges\nhere, I committed to 0. And that gives you\nno information.",
    "start": "4865930",
    "end": "4872849"
  },
  {
    "text": "But if, indeed, the\nnon-edges are 0,",
    "start": "4872850",
    "end": "4878260"
  },
  {
    "text": "and there's a\nHamiltonian cycle, that means the Hamiltonian\ncycle must be edges. And then it means that pi of\nG has a Hamiltonian cycle.",
    "start": "4878260",
    "end": "4886680"
  },
  {
    "text": "And that can't be. If G doesn't have a\nHamiltonian cycle, pi of G doesn't have a\nHamiltonian cycle. And that's why I can't\nsucceed in convincing you",
    "start": "4886680",
    "end": "4895860"
  },
  {
    "text": "in answering both questions. ",
    "start": "4895860",
    "end": "4901200"
  },
  {
    "text": "Yeah. AUDIENCE: Is there a\nformal way to say what it means to be zero knowledge? Like, [INAUDIBLE].",
    "start": "4901200",
    "end": "4906930"
  },
  {
    "text": "YAEL T. KALAI: Yeah, good. Good, good, good. So the question. Yeah, actually, I planned not\nto go into the definition,",
    "start": "4906930",
    "end": "4912663"
  },
  {
    "text": "but it's so\nbeautiful, so I will. Yeah. So the question was,\nwhat is the definition",
    "start": "4912663",
    "end": "4920199"
  },
  {
    "text": "actually of zero knowledge? And the definition\nof zero knowledge says that, what does it mean,\nyou don't learn anything.",
    "start": "4920200",
    "end": "4928220"
  },
  {
    "text": "So the definition says that-- so this is the definition\nof zero knowledge.",
    "start": "4928220",
    "end": "4936070"
  },
  {
    "text": "What it says is, the\nverifier-- actually, it says,",
    "start": "4936070",
    "end": "4941770"
  },
  {
    "text": "it's stronger. It says, for every verifier,\nnot just the honest verifier, even malicious verifier.",
    "start": "4941770",
    "end": "4947560"
  },
  {
    "text": "You can talk about honest\nverifier zero knowledge, the honest verifier, who\njust does what it should do",
    "start": "4947560",
    "end": "4953020"
  },
  {
    "text": "and just listens,\ndoesn't learn anything. But actually, there's a\nstronger notion of malicious.",
    "start": "4953020",
    "end": "4958160"
  },
  {
    "text": "So let's say even for\na malicious verifier,",
    "start": "4958160",
    "end": "4964150"
  },
  {
    "text": "you want to say what he learned. He could have\nsimulated on his own.",
    "start": "4964150",
    "end": "4970600"
  },
  {
    "text": "So the definition\nsays, for every-- so you-- OK, for every verifier,\nif you look at the transcript--",
    "start": "4970600",
    "end": "4977796"
  },
  {
    "text": " and for every x\nin l, for every x,",
    "start": "4977796",
    "end": "4987739"
  },
  {
    "text": "if you look at the transcript\nbetween the honest prover and the verifier, the\nprover has a witness,",
    "start": "4987740",
    "end": "4995150"
  },
  {
    "text": "but the verifier doesn't. What he learned from\nthis transcript or what the verifier maybe--",
    "start": "4995150",
    "end": "5001000"
  },
  {
    "text": "sorry, let me write\nit differently. Let me say the view of\nv star while interacting",
    "start": "5001000",
    "end": "5009449"
  },
  {
    "text": "with p and input x.",
    "start": "5009450",
    "end": "5014880"
  },
  {
    "text": "So whatever V star learned, he\ncould have simulated on his own.",
    "start": "5014880",
    "end": "5022190"
  },
  {
    "text": " So it says there\nexists a simulator.",
    "start": "5022190",
    "end": "5032610"
  },
  {
    "text": "And this is efficient,\nan efficient simulator,",
    "start": "5032610",
    "end": "5037855"
  },
  {
    "text": "such that the simulator\nefficiently can",
    "start": "5037855",
    "end": "5044610"
  },
  {
    "text": "generate this transcript on\nits own if he has V star. He needs V star\nbecause, of course,",
    "start": "5044610",
    "end": "5050970"
  },
  {
    "text": "V star depends what\nhe sends and so on. But he could generate\nit on his own.",
    "start": "5050970",
    "end": "5056610"
  },
  {
    "text": "Yeah. AUDIENCE: Can the\nstimulator depend on V star if we're\nthen using [INAUDIBLE]? So then, is it the same\nsimulator for everyone?",
    "start": "5056610",
    "end": "5063099"
  },
  {
    "text": "Or is it-- YAEL T. KALAI: Oh, my\nGod, there are so many-- OK, there's so, so many\nnotions of zero knowledge.",
    "start": "5063100",
    "end": "5068889"
  },
  {
    "text": "So for example, first of all-- I'll answer your question. The question was, is\nsimulator only gets V star",
    "start": "5068890",
    "end": "5075150"
  },
  {
    "text": "as Oracle access? Does it get an input? Is it universal? Is it for there exists a\nsimulator for every V star,",
    "start": "5075150",
    "end": "5081810"
  },
  {
    "text": "or is it for every V star\nthere is a simulator? Moreover, let me continue. Is V star all-powerful?",
    "start": "5081810",
    "end": "5087730"
  },
  {
    "text": "Is V star supposed to\nbe PPT or a poly size? ",
    "start": "5087730",
    "end": "5095850"
  },
  {
    "text": "And the answer is,\nthere's many definitions. But yeah.",
    "start": "5095850",
    "end": "5104400"
  },
  {
    "text": "So originally, all the protocols\nwe had used the verifier",
    "start": "5104400",
    "end": "5114810"
  },
  {
    "text": "as a black box. However, in 2001,\nI think was it,",
    "start": "5114810",
    "end": "5122130"
  },
  {
    "text": "Boaz Barak was the first\nto construct non-black box zero knowledge, where\nthe simulator used",
    "start": "5122130",
    "end": "5128670"
  },
  {
    "text": "verifier is a non-black box. And it was a really\nbreakthrough result because what he managed to get\nis a new zero knowledge proof",
    "start": "5128670",
    "end": "5138449"
  },
  {
    "text": "that we didn't know of before. It was kind of constant round. Now you can say, wait, this\nis also constant round.",
    "start": "5138450",
    "end": "5145930"
  },
  {
    "text": "What do you mean we\ndidn't know before? But this is only soundness half. ",
    "start": "5145930",
    "end": "5152730"
  },
  {
    "text": "Turns out, if you want\nnegligible soundness, you need to repeat this\nprotocol sequentially.",
    "start": "5152730",
    "end": "5158860"
  },
  {
    "text": "If you repeat it\nin parallel, it's not necessarily zero knowledge.",
    "start": "5158860",
    "end": "5165430"
  },
  {
    "text": "Actually, yeah, this one\nactually is not zero knowledge if you repeat it in parallel. We'll talk about that.",
    "start": "5165430",
    "end": "5171850"
  },
  {
    "text": "And so, using\nnon-black techniques, he managed to show the\nfirst kind of constant round",
    "start": "5171850",
    "end": "5178599"
  },
  {
    "text": "zero knowledge-- public\ncoin zero knowledge proof. So there's many, many\nvariants is the point.",
    "start": "5178600",
    "end": "5190139"
  },
  {
    "text": " But this is a common\nvariant to think about.",
    "start": "5190140",
    "end": "5197409"
  },
  {
    "text": "And also, so this is\nkind of poly size, or V can have auxiliary input.",
    "start": "5197410",
    "end": "5202820"
  },
  {
    "text": "So for every x in [INAUDIBLE]\nor V star is poly size. So we can have auxiliary\ninformation about the x,",
    "start": "5202820",
    "end": "5210940"
  },
  {
    "text": "even if it has auxiliary\ninformation about x, still, so V star is-- may have auxiliary\ninformation about x, still",
    "start": "5210940",
    "end": "5218860"
  },
  {
    "text": "the two are indistinguishable. Yeah.",
    "start": "5218860",
    "end": "5223870"
  },
  {
    "text": "AUDIENCE: What if the prover for\nthe commitment where he created",
    "start": "5223870",
    "end": "5230920"
  },
  {
    "text": "matrices that\nensure that there's a cycle in that matrix\nthat commits to that?",
    "start": "5230920",
    "end": "5236500"
  },
  {
    "text": "YAEL T. KALAI: Wait,\nagain, what if the prover commits to a cycle or no? AUDIENCE: He commits to a cycle,\nbut the cycle is not necessarily",
    "start": "5236500",
    "end": "5243880"
  },
  {
    "text": "with-- [INTERPOSING VOICES] YAEL T. KALAI: It has\nnothing to do with G. Just commit to any cycle. AUDIENCE: Yes.",
    "start": "5243880",
    "end": "5249010"
  },
  {
    "text": "YAEL T. KALAI: OK, good. AUDIENCE: He commits to a cycle. YAEL T. KALAI: OK. AUDIENCE: [INAUDIBLE]. And he'll be able to\n[INAUDIBLE] it's a 0, right?",
    "start": "5249010",
    "end": "5255800"
  },
  {
    "text": "YAEL T. KALAI: Yeah, he'll\nbe able to-- exactly. He'll be able to\nanswer 0, but he won't be able to answer\n1 because that cycle must",
    "start": "5255800",
    "end": "5264250"
  },
  {
    "text": "touch an edge. Because-- sorry, that cycle\nmust touch a non-edge.",
    "start": "5264250",
    "end": "5270849"
  },
  {
    "text": "Because if it only touched\nedges, there is no cycle.",
    "start": "5270850",
    "end": "5275960"
  },
  {
    "text": "So that cycle, you give your pi. Now, the prover can--\nthe cheating prover can give whatever pi he wants.",
    "start": "5275960",
    "end": "5282710"
  },
  {
    "text": "But the point is that the\ngraph, the permuted graph, doesn't have a\nHamiltonian cycle,",
    "start": "5282710",
    "end": "5289793"
  },
  {
    "text": "because if G doesn't\nhave a Hamiltonian cycle, the permuted G also doesn't\nhave a Hamiltonian cycle. So this graph doesn't have a\nHamiltonian cycle, and that",
    "start": "5289793",
    "end": "5297670"
  },
  {
    "text": "means that the\ncycle that's here, I don't care how you generate,\nwhatever the cycle was,",
    "start": "5297670",
    "end": "5302830"
  },
  {
    "text": "it must touch a non-edge. AUDIENCE: [INAUDIBLE] YAEL T. KALAI: So\nthe Hamiltonian cycle",
    "start": "5302830",
    "end": "5309490"
  },
  {
    "text": "says, there's an\nedge between i1, i2. There's an edge between i2, i3. One of them cannot be edge here.",
    "start": "5309490",
    "end": "5315860"
  },
  {
    "text": "It can't be that all of them\nare edges here because they're-- so because it doesn't\nhave a Hamiltonian cycle.",
    "start": "5315860",
    "end": "5322220"
  },
  {
    "text": "So one of them cannot\nbe an edge here. And now, what the verifier\nis asking from the prover,",
    "start": "5322220",
    "end": "5328519"
  },
  {
    "text": "he looks at all the i1\nand i-- all the i and j that do not have an edge.",
    "start": "5328520",
    "end": "5333750"
  },
  {
    "text": "And he asked them,\nopen that edge. I want to see that it's 0. I want to see that I\ngave you n squared safes.",
    "start": "5333750",
    "end": "5341040"
  },
  {
    "text": "So for every i and\nj there is a safe. And it should be 1 if there\nis an edge, and 0 otherwise--",
    "start": "5341040",
    "end": "5346860"
  },
  {
    "text": "I mean, if there is an edge\nin the Hamiltonian cycle and 0 otherwise. Now, what the verifier is asking\nthe prover, for every ij here",
    "start": "5346860",
    "end": "5355969"
  },
  {
    "text": "that does not have\nan edge, I want you to open the safe\ncorresponding to that edge, and I want to see a 0 there.",
    "start": "5355970",
    "end": "5361980"
  },
  {
    "text": "If there's a 1\nthere, I'm not happy. I'm going to reject you. Because this, there should be\n1's only on the Hamiltonian",
    "start": "5361980",
    "end": "5368510"
  },
  {
    "text": "cycle. And these are the only places\nthat have an edge in your graph. But the problem is, on\none of these ij that",
    "start": "5368510",
    "end": "5377179"
  },
  {
    "text": "don't have an edge, you'll see\nan edge because the Hamiltonian cycle is not all on edges.",
    "start": "5377180",
    "end": "5383520"
  },
  {
    "text": "And then I'm going to catch you. Yeah? Great. ",
    "start": "5383520",
    "end": "5392539"
  },
  {
    "text": "Any more questions? Yeah. AUDIENCE: I'm just curious. Is there also a notion for\na proof of knowledge about--",
    "start": "5392540",
    "end": "5399780"
  },
  {
    "text": "YAEL T. KALAI: Yeah. AUDIENCE: --just not just\nedge, so a slightly stronger that requires the prover to\nactually know the Hamiltonian",
    "start": "5399780",
    "end": "5408520"
  },
  {
    "text": "cycle? So here the proof,\nwould the second part say that, that only guarantees\nthat if it's G is not a--",
    "start": "5408520",
    "end": "5415320"
  },
  {
    "text": "doesn't have a Hamiltonian\ncycle, that the prover cheat, prover cannot compute\nthis [INAUDIBLE].",
    "start": "5415320",
    "end": "5421310"
  },
  {
    "text": "Isn't necessarily a converse,\nis it possible for the cheating prover to not know\nthe Hamiltonian cycle,",
    "start": "5421310",
    "end": "5428040"
  },
  {
    "text": "but still contains the verifier? YAEL T. KALAI: Good, no. AUDIENCE: Where the G is-- YAEL T. KALAI: Good. Great question, great question. So the question was--",
    "start": "5428040",
    "end": "5433400"
  },
  {
    "text": "or let me just\nanswer the question. The question was, wait, we\njust proved here soundness,",
    "start": "5433400",
    "end": "5441000"
  },
  {
    "text": "that if x is a NAND language, on\none of the answers you'll fail. But actually,\ndoesn't this protocol",
    "start": "5441000",
    "end": "5447349"
  },
  {
    "text": "give you something\nstronger, was the question, and the answer is yes. So what do we mean by\nsomething stronger?",
    "start": "5447350",
    "end": "5454100"
  },
  {
    "text": "Let's say G does have\na Hamiltonian cycle.",
    "start": "5454100",
    "end": "5459290"
  },
  {
    "text": "Doesn't this protocol\ntell us, not only that G has a Hamiltonian cycle.",
    "start": "5459290",
    "end": "5465300"
  },
  {
    "text": "If you succeed, let's say you\nsucceed probability 1 or more than half. This protocol tells us not only\nthat G has a Hamiltonian cycle,",
    "start": "5465300",
    "end": "5473780"
  },
  {
    "text": "it means that P\nmust know the cycle. You can actually find-- you\ncan extract the cycle from P.",
    "start": "5473780",
    "end": "5483000"
  },
  {
    "text": "And the answer is yes. You can actually--\nthis is what's called proof of knowledge. It means that P knows.",
    "start": "5483000",
    "end": "5488698"
  },
  {
    "text": "Now, you can say, what\ndoes it mean that P knows? What are we-- this is a\ntheory class, mathematics. What does know mean?",
    "start": "5488698",
    "end": "5495700"
  },
  {
    "text": "So what we mean by\nP knows, what we mean is that we can\nactually efficiently extract",
    "start": "5495700",
    "end": "5503900"
  },
  {
    "text": "the cycle from P. And how do we extract the cycle? It's actually very easy.",
    "start": "5503900",
    "end": "5509430"
  },
  {
    "text": "We ask him. He committed to something. He knows how to open both. That's an assumption.",
    "start": "5509430",
    "end": "5514900"
  },
  {
    "text": "So first we'll ask him,\nopen only the cycle. ",
    "start": "5514900",
    "end": "5522090"
  },
  {
    "text": "And then give me the pi.",
    "start": "5522090",
    "end": "5528119"
  },
  {
    "text": "Once I know the pi and\nthe cycle, I can undo-- I know what pi G and I can see--",
    "start": "5528120",
    "end": "5535050"
  },
  {
    "text": "I can actually find\nthe Hamiltonian cycle. So it's more than\njust a soundness.",
    "start": "5535050",
    "end": "5541837"
  },
  {
    "text": "It's a proof of knowledge. G must know. I can actually use him to\nextract the Hamiltonian cycle",
    "start": "5541837",
    "end": "5548250"
  },
  {
    "text": "from him.  Any other questions?",
    "start": "5548250",
    "end": "5554670"
  },
  {
    "text": "So let's take a\nfive-minute break. And then, after the\nbreak, I'm going to show you why this protocol is\nnot secure in the Random Oracle",
    "start": "5554670",
    "end": "5561750"
  },
  {
    "text": "Model. But we'll fix it. Don't worry. OK. Let's take a break.",
    "start": "5561750",
    "end": "5566390"
  }
]