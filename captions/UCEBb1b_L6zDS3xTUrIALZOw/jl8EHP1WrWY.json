[
  {
    "text": " [MUSIC PLAYING]",
    "start": "0",
    "end": "16830"
  },
  {
    "text": "PROFESSOR: Well, so far we've\ninvented enough programming to",
    "start": "16830",
    "end": "22480"
  },
  {
    "text": "do some very complicated\nthings. And you surely learned\na lot about",
    "start": "22480",
    "end": "28710"
  },
  {
    "text": "programming at this point. You've learned almost all the\nmost important tricks that usually don't get taught to\npeople until they have had a",
    "start": "28710",
    "end": "34870"
  },
  {
    "text": "lot of experience. For example, data directed\nprogramming is a major trick,",
    "start": "34870",
    "end": "40800"
  },
  {
    "text": "and yesterday you also saw\nan interpreted language.  We did this all in a computer\nlanguage, at this point, where",
    "start": "40800",
    "end": "50320"
  },
  {
    "text": "there was no assignment\nstatement. And presumably, for those of you\nwho've seen your Basic or",
    "start": "50320",
    "end": "56790"
  },
  {
    "text": "Pascal or whatever, that's\nusually considered the most important thing.",
    "start": "56790",
    "end": "62039"
  },
  {
    "text": "Well today, we're going to\ndo some thing horrible. We're going to add an assignment\nstatement.",
    "start": "62040",
    "end": "67370"
  },
  {
    "text": "And since we can do all these\nwonderful things without it, why should we add it? An important thing to understand\nis that today we're",
    "start": "67370",
    "end": "73040"
  },
  {
    "text": "going to, first of all, have a\nrule, which is going to always be obeyed, which is the only\nreason we ever add a feature",
    "start": "73040",
    "end": "79520"
  },
  {
    "text": "to our language is because\nthere is a good reason. And the good reason is going to\nboil down to the ability,",
    "start": "79520",
    "end": "87470"
  },
  {
    "text": "you now get an ability to break\na problem into pieces that are different sets of\npieces then you could have broken it down without that,\ngive you another means of",
    "start": "87470",
    "end": "95380"
  },
  {
    "text": "decomposition.  However, let's just start. Let me quick begin by reviewing\nthe kind of language",
    "start": "95380",
    "end": "103270"
  },
  {
    "text": "that we have now. We've been writing what's called\nfunctional programs.",
    "start": "103270",
    "end": "111310"
  },
  {
    "text": "And functional programs are\na kind of encoding of",
    "start": "111310",
    "end": "116770"
  },
  {
    "text": "mathematical truths. For example, when we look at the\nfactorial procedure that",
    "start": "116770",
    "end": "122420"
  },
  {
    "text": "you see on the slide here, it's\nbasically two clauses. If n is one, the result is\none, otherwise n times",
    "start": "122420",
    "end": "129530"
  },
  {
    "text": "factorial n minus one. That's factorial of n. Well, that is factorial of n.",
    "start": "129530",
    "end": "134960"
  },
  {
    "text": "And written down in some other\nobscure notation that you might have learned in calculus\nclasses, mathematical logic,",
    "start": "134960",
    "end": "142310"
  },
  {
    "text": "what you see there is if n\nequals one, for the result of",
    "start": "142310",
    "end": "148090"
  },
  {
    "text": "n factorial is one, otherwise,\ngreater than one, n factorial is n times n minus\none factorial. True statements, that's\nthe kind of",
    "start": "148090",
    "end": "155560"
  },
  {
    "text": "language we've been using. And whenever we have true\nstatements of that sort, there is a kind of, a way of\nunderstanding how they work",
    "start": "155560",
    "end": "167490"
  },
  {
    "text": "which is that such processes\ncan be involved by substitution. And so we see on the second\nslide here, that the way we",
    "start": "167490",
    "end": "176230"
  },
  {
    "text": "understand the execution implied\nby those statements in",
    "start": "176230",
    "end": "182010"
  },
  {
    "text": "arranged in that order, is\nthat you do successive substitutions of arguments for\nformal parameters in the body",
    "start": "182010",
    "end": "189370"
  },
  {
    "text": "of a procedure. This is basically a sequence\nof equalities.",
    "start": "189370",
    "end": "194709"
  },
  {
    "text": "Factorial four is four times\nfactorial three. That is four times three times\nfactorial of two and so on.",
    "start": "194710",
    "end": "201290"
  },
  {
    "text": "We're always preserving truth. ",
    "start": "201290",
    "end": "206580"
  },
  {
    "text": "Even though we're talking about\ntrue statements, there might be more than one\norganization of these true statements to describe the\ncomputation of a particular",
    "start": "206580",
    "end": "214630"
  },
  {
    "text": "function, the computation\nof the value of a particular function. So, for example, looking\nat the next one here.",
    "start": "214630",
    "end": "222460"
  },
  {
    "text": "Here is a way of looking\nat the sum of n and m.",
    "start": "222460",
    "end": "229780"
  },
  {
    "text": "And we did this one by\na recursive process. It's the increment of the sum\nof the decrement of n and m.",
    "start": "229780",
    "end": "240129"
  },
  {
    "text": "And, of course, there is some\npiece of mathematical logic here that describes that.",
    "start": "240130",
    "end": "246240"
  },
  {
    "text": "It's the increment of the sum\nof the decrement of n and m,",
    "start": "246240",
    "end": "251450"
  },
  {
    "text": "just like that. So there's nothing particularly\nmagic about that. And, of course, if we can also\nlook at an iterative process",
    "start": "251450",
    "end": "259058"
  },
  {
    "text": "for the same, a program that\nevolves an iterative process, for the same function.",
    "start": "259059",
    "end": "265310"
  },
  {
    "text": "These are two things that\ncompute the same answer. And we have equivalent\nmathematical truths that are",
    "start": "265310",
    "end": "274220"
  },
  {
    "text": "arranged there. And just the way you arrange\nthose truths determine the particular process.",
    "start": "274220",
    "end": "280430"
  },
  {
    "text": "In the way choose and arrange\nthem determines the process that's evolved. So we have the flexibility\nof talking about both the",
    "start": "280430",
    "end": "287370"
  },
  {
    "text": "function to be computed,\nand the method by which it's computed. So it's not clear\nwe need more.",
    "start": "287370",
    "end": "293580"
  },
  {
    "text": "However, today I'm going\nto this awful thing. I'm going to introduce this\nassignment operation.",
    "start": "293580",
    "end": "299070"
  },
  {
    "text": "Now, what is this? Well, first of all, there is\ngoing to be another kind of",
    "start": "299070",
    "end": "307830"
  },
  {
    "text": "kind of statement, if you\nwill, in a programming language called Set! ",
    "start": "307830",
    "end": "313800"
  },
  {
    "text": "Things that do things like\nassignment, I'm going to put exclamation points after. We'll talk about what that\nmeans in a second.",
    "start": "313800",
    "end": "320990"
  },
  {
    "text": "The exclamation point, again\nlike question mark, is an arbitrary thing we attach to the\nsymbol which is the name, has no significance\nto the system.",
    "start": "320990",
    "end": "328090"
  },
  {
    "text": "The only significance is to me\nand you to alert you that this is an assignment of some sort.",
    "start": "328090",
    "end": "335910"
  },
  {
    "text": "But we're going to set a\nvariable to a value. ",
    "start": "335910",
    "end": "343800"
  },
  {
    "text": "And what that's going to mean\nis that there is a time at which something happens. Here's a time.",
    "start": "343800",
    "end": "350100"
  },
  {
    "text": "If I have time going this\nway, it's a time access. Time progresses by walking\ndown the page.",
    "start": "350100",
    "end": "358650"
  },
  {
    "text": "Then an assignment is the\nfirst thing we have that produces the difference between\na before and an after.",
    "start": "358650",
    "end": "366670"
  },
  {
    "text": "All the other programs that\nwe've written, that have no assignments in them, the order\nin which they were evaluated",
    "start": "366670",
    "end": "372400"
  },
  {
    "text": "didn't matter. But assignment is special, it\nproduces a moment in time.",
    "start": "372400",
    "end": "377990"
  },
  {
    "text": "So there is a moment before the\nset occurs and after, such",
    "start": "377990",
    "end": "387979"
  },
  {
    "text": "that after this moment in time,\nthe variable has the",
    "start": "387980",
    "end": "399500"
  },
  {
    "text": "value, value. ",
    "start": "399500",
    "end": "409310"
  },
  {
    "text": "Independent of what value\nit had before, set! changes the value\nof the variable.",
    "start": "409310",
    "end": "417660"
  },
  {
    "text": "Until this moment, we had\nnothing that changed.",
    "start": "417660",
    "end": "423150"
  },
  {
    "text": "So, for example, one of the\nthings we can think of is that the procedures we write for\nsomething like factorial are",
    "start": "423150",
    "end": "429890"
  },
  {
    "text": "in fact pretty much identical\nto the function factorial. Factorial of four, if I write\nfact4, independent of what",
    "start": "429890",
    "end": "438120"
  },
  {
    "text": "context it's in, and independent\nof how many times I write it, I always get\nthe same answer. It's always 24.",
    "start": "438120",
    "end": "445430"
  },
  {
    "text": "It's a unique map from the\nargument to the answer. And all the programs we've\nwritten so far are like that.",
    "start": "445430",
    "end": "453580"
  },
  {
    "text": "However, once I have assignment,\nthat isn't true. So, for example, if I were to\ndefine count to be one.",
    "start": "453580",
    "end": "470069"
  },
  {
    "text": "And then I'm going to define\nalso a procedure, a simple",
    "start": "470070",
    "end": "475550"
  },
  {
    "text": "procedure called demo, which\ntakes argument x and does the",
    "start": "475550",
    "end": "482960"
  },
  {
    "text": "following operations. It first sets x to x plus one.",
    "start": "482960",
    "end": "489650"
  },
  {
    "text": "My gosh, this looks just\nlike FORTRAN, right-- in a funny syntax. ",
    "start": "489650",
    "end": "496910"
  },
  {
    "text": "And then add to x count, Oh,\nI just made a mistake.",
    "start": "496910",
    "end": "504330"
  },
  {
    "text": "I want to say, set! count\nto one plus count. ",
    "start": "504330",
    "end": "510310"
  },
  {
    "text": "It's this thing defined here.  And then plus x count.",
    "start": "510310",
    "end": "516368"
  },
  {
    "text": " Then I can try this procedure.",
    "start": "516369",
    "end": "522559"
  },
  {
    "text": "Let's run it. So, suppose I get a prompt\nand I say, demo three.",
    "start": "522559",
    "end": "528125"
  },
  {
    "text": " Well, what happens here?",
    "start": "528125",
    "end": "533540"
  },
  {
    "text": "The first thing that happens\nis count is currently one. Currently, there is a time.",
    "start": "533540",
    "end": "539130"
  },
  {
    "text": "We're talking about time. x gets three. At this moment, I say,\noh yes, count is",
    "start": "539130",
    "end": "546090"
  },
  {
    "text": "incremented, so count is two. two plus three is five. So the answer I get\nout is five.",
    "start": "546090",
    "end": "554460"
  },
  {
    "text": "Then I say, demo of\nsay, three again.",
    "start": "554460",
    "end": "563640"
  },
  {
    "text": "What do I get? Well, now count is two, it's\nnot one anymore, because I",
    "start": "563640",
    "end": "569310"
  },
  {
    "text": "have incremented it. But now I go through this\nprocess, three goes into x,",
    "start": "569310",
    "end": "575050"
  },
  {
    "text": "count becomes one plus count,\nso that's three now. The sum of those two is six,\nso the answer is six.",
    "start": "575050",
    "end": "582129"
  },
  {
    "text": "And what we see is the same\nexpression leads to two different answers, depending\nupon time.",
    "start": "582130",
    "end": "592170"
  },
  {
    "text": "So demo is not a function,\ndoes not compute a mathematical function. ",
    "start": "592170",
    "end": "600019"
  },
  {
    "text": "In fact, you could also see why\nnow, of course, this is the first place where the\nsubstitution model",
    "start": "600020",
    "end": "605649"
  },
  {
    "text": "isn't going to work. This kills the substitution\nmodel dead.",
    "start": "605650",
    "end": "611410"
  },
  {
    "text": "You know, with quotation there\nwere some little problems that a philosopher might notice\nwith the substitutions,",
    "start": "611410",
    "end": "617380"
  },
  {
    "text": "because you have to worry about\nwhat deductions you can make when you substitute into\nquotes, if you're allowed to",
    "start": "617380",
    "end": "623070"
  },
  {
    "text": "do that at all. But here the substitution\nmodel is dead, can't do",
    "start": "623070",
    "end": "628590"
  },
  {
    "text": "anything at all. Because, supposing I wanted to\nuse a substitution model to",
    "start": "628590",
    "end": "634490"
  },
  {
    "text": "consider substituting\nfor count? Well, my gosh, if I substitute\nfor here and here, they're",
    "start": "634490",
    "end": "642150"
  },
  {
    "text": "different ones. It's not the same\ncount any more. I get the wrong answer.",
    "start": "642150",
    "end": "647880"
  },
  {
    "text": "The substitution model is\na static phenomenon that describes things that are true\nand not things that change.",
    "start": "647880",
    "end": "655560"
  },
  {
    "text": "Here, we have truths\nthat change. ",
    "start": "655560",
    "end": "661860"
  },
  {
    "text": "OK, Well, before I give you\nany understanding of this, this is very bad.",
    "start": "661860",
    "end": "667870"
  },
  {
    "text": "Now, we've lost our model\nof computation. Pretty soon, I'm going to have\nto build you a new model of",
    "start": "667870",
    "end": "673420"
  },
  {
    "text": "computation. But ours plays with this, just\nnow, in an informal sense.",
    "start": "673420",
    "end": "678710"
  },
  {
    "text": "Of course, what you already\nsee is that when I have something like assignment, the\nmodel that we're going to need",
    "start": "678710",
    "end": "684600"
  },
  {
    "text": "is different from the model that\nwe had before in that the variables, those symbols like\ncount, or x are no longer",
    "start": "684600",
    "end": "691840"
  },
  {
    "text": "going to refer to the values\nthey have, but rather to some sort of place where the\nvalue restored.",
    "start": "691840",
    "end": "697810"
  },
  {
    "text": "We're going to have to think\nthat way for a while. And it's going to be a\nvery bad thing and cause a lot of trouble.",
    "start": "697810",
    "end": "704589"
  },
  {
    "text": "And so, as I said, the very fact\nthat we're inventing this bad thing, means that there had\nbetter be a good reason",
    "start": "704590",
    "end": "709750"
  },
  {
    "text": "for it, otherwise, just\na waste of time and a lot of effort. Let's just look at some\nof it just to play.",
    "start": "709750",
    "end": "716090"
  },
  {
    "text": "Supposing we write down the\nfunctional version, functional meaning in the old style,\nof factorial by",
    "start": "716090",
    "end": "722770"
  },
  {
    "text": "an iterative process. ",
    "start": "722770",
    "end": "729779"
  },
  {
    "text": "Factorial of n, we're going to\niterate of m and i, which says",
    "start": "729780",
    "end": "746810"
  },
  {
    "text": "if i is greater than n, then\nthe result is m, otherwise,",
    "start": "746810",
    "end": "760029"
  },
  {
    "text": "the result of iterating the\nproduct of i and m.",
    "start": "760030",
    "end": "766930"
  },
  {
    "text": "So m is going to be the product\nthat I'm accumulating. m is the product.",
    "start": "766930",
    "end": "772940"
  },
  {
    "start": "772940",
    "end": "778170"
  },
  {
    "text": "And the count I'm going\nto increase by one. ",
    "start": "778170",
    "end": "784810"
  },
  {
    "text": "Plus, ITER, ELSE,\nCOND, define.",
    "start": "784810",
    "end": "792060"
  },
  {
    "text": "I'm going to start this up.  And these days, you should\nhave no trouble reading",
    "start": "792060",
    "end": "798980"
  },
  {
    "text": "something like this. What I have here is a\nproduct there being accumulated and a counter.",
    "start": "798980",
    "end": "806750"
  },
  {
    "text": "I start them up both at one. I'm going to buzz the counter\nup, i goes to i plus one every",
    "start": "806750",
    "end": "812380"
  },
  {
    "text": "time around. But that's only our putting a\ntime on the process, each of",
    "start": "812380",
    "end": "818910"
  },
  {
    "text": "this is just a set of\ntruths, true rules. And m is going to get a new\nvalues of i and m, i times m",
    "start": "818910",
    "end": "827010"
  },
  {
    "text": "each time around, and eventually\ni is going to be bigger than n, in which case,\nthe answer's going to be m.",
    "start": "827010",
    "end": "832750"
  },
  {
    "text": "Now, I'm speaking to you,\nuse time in this. That's just because I know\nhow the computer works.",
    "start": "832750",
    "end": "838210"
  },
  {
    "text": "But I didn't have to. This could be a purely\nmathematical description at this point, because\nsubstitution will work for this.",
    "start": "838210",
    "end": "845279"
  },
  {
    "text": "But let's set right down a\nsimilar sort of program, using the same algorithm, but\nwith assignments.",
    "start": "845280",
    "end": "851975"
  },
  {
    "text": " So this is called the\nfunctional version. ",
    "start": "851975",
    "end": "863840"
  },
  {
    "text": "I want to write down an\nimperative version. ",
    "start": "863840",
    "end": "874150"
  },
  {
    "text": "Factorial of n. I'm going to create\nmy two variables. ",
    "start": "874150",
    "end": "880120"
  },
  {
    "text": "Let i initialize itself to one,\nand m be initialized to",
    "start": "880120",
    "end": "888230"
  },
  {
    "text": "one, similar. We'll create a loop which has\nCOND greater than i, and if i",
    "start": "888230",
    "end": "905839"
  },
  {
    "text": "is greater than n, we're done. And the result is m, the product\nI'm accumulating.",
    "start": "905840",
    "end": "910910"
  },
  {
    "text": "Otherwise, I'm going to write\ndown three things to do.",
    "start": "910910",
    "end": "919319"
  },
  {
    "text": "I'm going to set! m to the product of i and m,\nset! i to the sum of i and",
    "start": "919320",
    "end": "934610"
  },
  {
    "text": "one, and go around\nthe loop again.",
    "start": "934610",
    "end": "940610"
  },
  {
    "text": "Looks very familiar to you\nFORTRAN programmers. ELSE, COND, define, funny\nsyntax though.",
    "start": "940610",
    "end": "947760"
  },
  {
    "text": " Start the loop up, and\nthat's the program.",
    "start": "947760",
    "end": "959320"
  },
  {
    "text": "Now, this program, how\ndo we think about it? Well, let's just say what\nwe're seeing here.",
    "start": "959320",
    "end": "964690"
  },
  {
    "text": "There are two local variables,\ni and m, that have been initialized to one.",
    "start": "964690",
    "end": "970810"
  },
  {
    "text": "Every time around the loop, I\ntest to see if i is greater than n, which is the input\nargument, and if so, the",
    "start": "970810",
    "end": "976040"
  },
  {
    "text": "result is the product being\naccumulated in m. However, if it's not the end of\nthe loop, if I'm not done,",
    "start": "976040",
    "end": "983640"
  },
  {
    "text": "then what I'm going to do is\nchange the product to be the result of multiplying i times\nthe current product.",
    "start": "983640",
    "end": "989130"
  },
  {
    "text": "Which is sort of what\nwe were doing here. Except here I wasn't changing. I was making another copy,\nbecause the substitution model",
    "start": "989130",
    "end": "998220"
  },
  {
    "text": "says, you copy the body of the\nprocedure with the arguments",
    "start": "998220",
    "end": "1004410"
  },
  {
    "text": "substituted for the\nformal parameters. Here I'm not worried about\ncopying, here I've changed the",
    "start": "1004410",
    "end": "1009690"
  },
  {
    "text": "value of m. I also then change the value\nof i to i plus one, and go",
    "start": "1009690",
    "end": "1016089"
  },
  {
    "text": "buzzing around. Seems like essentially the same\nprogram, but there are",
    "start": "1016090",
    "end": "1021360"
  },
  {
    "text": "some ways of making\nerrors here that didn't exist until today. For example, if I were to do\nthe horrible thing of not",
    "start": "1021360",
    "end": "1030660"
  },
  {
    "text": "being careful in writing my\nprogram and interchange those two assignments, the\nprogram wouldn't",
    "start": "1030660",
    "end": "1037890"
  },
  {
    "text": "compute the same function. I get a timing error because\nthere's a dependency that m",
    "start": "1037890",
    "end": "1044859"
  },
  {
    "text": "depends upon having the\nlast value of i. If I try to i first, then I've\ngot the wrong value of i when",
    "start": "1044859",
    "end": "1052760"
  },
  {
    "text": "I multiply by m. It's a bug that wasn't available\nuntil this moment,",
    "start": "1052760",
    "end": "1058600"
  },
  {
    "text": "until we introduced something\nthat had time in it.  So, as I said, first we need a\nnew model of computation, and",
    "start": "1058600",
    "end": "1067650"
  },
  {
    "text": "second, we have to be damn good\nreason for doing this kind of ugly thing.",
    "start": "1067650",
    "end": "1072800"
  },
  {
    "text": "Are there any questions? ",
    "start": "1072800",
    "end": "1078800"
  },
  {
    "text": "Speak loudly, David. AUDIENCE: I'm confused about,\nwe've introduced set now, but",
    "start": "1078800",
    "end": "1084220"
  },
  {
    "text": "we had let before and\ndefine before. I'm confused about the\ndifference between the three.",
    "start": "1084220",
    "end": "1089980"
  },
  {
    "text": "Wouldn't define work in the same\nsituation as set if you introduced it a bit?",
    "start": "1089980",
    "end": "1095280"
  },
  {
    "text": "PROFESSOR: No, define is\nintended for setting something once the first time,\nfor making it. ",
    "start": "1095280",
    "end": "1102790"
  },
  {
    "text": "You've never seen me write on a\nblackboard two defines in a row whose intention was to\nchange the old value of some",
    "start": "1102790",
    "end": "1110940"
  },
  {
    "text": "variable to a new one. AUDIENCE: Is that by\nconvention or-- PROFESSOR: No, it's intention.",
    "start": "1110940",
    "end": "1118120"
  },
  {
    "text": "The answer is that, for\nexample, internal to a procedure, two defines in a row\nare illegal, two defines",
    "start": "1118120",
    "end": "1127250"
  },
  {
    "text": "in a row of the same variable. x can't be defined twice. Whether or not a system catches\nthat error is a",
    "start": "1127250",
    "end": "1134300"
  },
  {
    "text": "different question, but I\nlegislate to you that define happens once on anything.",
    "start": "1134300",
    "end": "1140840"
  },
  {
    "text": "Now, indeed, in interactive\ndebugging, we intend that you interacting with your computer\nwill redefine things, and so",
    "start": "1140840",
    "end": "1148460"
  },
  {
    "text": "there's a special\nexception made for interactive debugging. But define is intended to mean\nto set up something which will",
    "start": "1148460",
    "end": "1158480"
  },
  {
    "text": "be forever that value\nafter that point. It's as if all the defines were\ndone at the beginning.",
    "start": "1158480",
    "end": "1166490"
  },
  {
    "text": "In fact, the only legal place\nto put a define in Scheme, internal to a procedure, is\njust at the beginning of a",
    "start": "1166490",
    "end": "1172570"
  },
  {
    "text": "lambda expression,\nthe beginning of the body of a procedure.",
    "start": "1172570",
    "end": "1177855"
  },
  {
    "text": " Now, let of course does nothing\nlike either of that.",
    "start": "1177855",
    "end": "1186670"
  },
  {
    "text": "I mean, if you look at what's\nhappening with a let, this happens again exactly once.",
    "start": "1186670",
    "end": "1192220"
  },
  {
    "text": "It sets up a context where i and\nm are values one and one. That context exists throughout\nthis scope, this",
    "start": "1192220",
    "end": "1201630"
  },
  {
    "text": "region of the program.  However, you don't think of that\nlet as setting i again.",
    "start": "1201630",
    "end": "1211110"
  },
  {
    "text": "It doesn't change it. i never changes because\nof the let. i gets created because of let.",
    "start": "1211110",
    "end": "1218690"
  },
  {
    "text": "In fact, the let is a\nvery simple idea. Let does nothing more, Let a\nvariable one to have value",
    "start": "1218690",
    "end": "1230930"
  },
  {
    "text": "one; I'll write this down a\nlittle bit more neatly; Let's",
    "start": "1230930",
    "end": "1237660"
  },
  {
    "text": "write, var one have value, the\nvalue of expression e1, and",
    "start": "1237660",
    "end": "1243890"
  },
  {
    "text": "variable two, have this value\nof the expression e2, in an expression e3, is the same thing\nas a procedure of var",
    "start": "1243890",
    "end": "1260419"
  },
  {
    "text": "one and var two, the formal\nparameters, and e3 being the",
    "start": "1260420",
    "end": "1268460"
  },
  {
    "text": "body, where var one is bound\nto the value of e1, and var",
    "start": "1268460",
    "end": "1275010"
  },
  {
    "text": "two gets the value of e2.  So this is, in fact, a perfectly\nunderstandable thing",
    "start": "1275010",
    "end": "1282049"
  },
  {
    "text": "from a substitution\npoint of view. This is really the same\nexpression written in two",
    "start": "1282050",
    "end": "1287300"
  },
  {
    "text": "different ways.  In fact, the way the actual\nsystem works is this gets",
    "start": "1287300",
    "end": "1294220"
  },
  {
    "text": "translated into this before\nanything happens. AUDIENCE: OK, I'm still unclear\nas then what makes the",
    "start": "1294220",
    "end": "1299690"
  },
  {
    "text": "difference between a\nlet and a define. They could-- PROFESSOR: A define is a\nsyntactic sugar, whereby,",
    "start": "1299690",
    "end": "1305570"
  },
  {
    "text": "essentially a bunch of variables\nget created by lets and then set up once. ",
    "start": "1305570",
    "end": "1317170"
  },
  {
    "text": "OK, time for the first\nbreak, I think. Thank you. ",
    "start": "1317170",
    "end": "1323480"
  },
  {
    "text": "[MUSIC PLAYING]",
    "start": "1323480",
    "end": "1384429"
  },
  {
    "text": "Well let's see. I now have to rebuild the model\nof computation, so you",
    "start": "1384430",
    "end": "1390520"
  },
  {
    "text": "understand how some such\nmechanical mechanism could work that can do what we've\njust talked about.",
    "start": "1390520",
    "end": "1397600"
  },
  {
    "text": "I just recently destroyed\nyour substitution model.",
    "start": "1397600",
    "end": "1402730"
  },
  {
    "text": "Unfortunately, this model is\nsignificantly more complicated than the substitution model. It's called the environment\nmodel.",
    "start": "1402730",
    "end": "1409010"
  },
  {
    "text": "And I'm going to have to\nintroduce some terminology, which is very good terminology\nfor you to know anyway.",
    "start": "1409010",
    "end": "1414660"
  },
  {
    "text": "It's about names. And we're going to give names\nto the kinds of names things have and the way those\nnames are used.",
    "start": "1414660",
    "end": "1422720"
  },
  {
    "text": "So this is a meta-description,\nif you will.",
    "start": "1422720",
    "end": "1428289"
  },
  {
    "text": "Anyway, there is a pile of an\nunfortunate terminology here, but we're going to need this\nto understand what's called the environment model.",
    "start": "1428290",
    "end": "1434770"
  },
  {
    "text": "We're about to do a little bit\nof boring, dog-work here. Let's look at the first\ntransparency.",
    "start": "1434770",
    "end": "1442280"
  },
  {
    "text": "And we see a description\nof a word called bound.",
    "start": "1442280",
    "end": "1448880"
  },
  {
    "text": "And we're going to say that a\nvariable, v, is bound in an expression, e, if the meaning\nof e is unchanged by the",
    "start": "1448880",
    "end": "1456890"
  },
  {
    "text": "uniform replacement of a\nvariable w, not occurring in",
    "start": "1456890",
    "end": "1462520"
  },
  {
    "text": "e, for every occurrence\nof v in e. Now that's a long sentence, so,\nI think, I'm going to have",
    "start": "1462520",
    "end": "1468389"
  },
  {
    "text": "to say a little bit about\nthat before we even fool around at all here.",
    "start": "1468390",
    "end": "1473490"
  },
  {
    "text": "Bound variables we're\ntalking about here. ",
    "start": "1473490",
    "end": "1484030"
  },
  {
    "text": "And you've seen lots of them. You may not know that you've\nseen lots of them. Well, I suppose in your logic\nyou saw a logical variables",
    "start": "1484030",
    "end": "1491880"
  },
  {
    "text": "like, for every x there exists\na y such that p is true of x",
    "start": "1491880",
    "end": "1498210"
  },
  {
    "text": "and y from your calculus\nclass.  This variable, x, and this\nvariable, y, are bound,",
    "start": "1498210",
    "end": "1506779"
  },
  {
    "text": "because the meaning of this\nexpression does not depend upon the particular letters I\nused to describe x and y.",
    "start": "1506780",
    "end": "1516640"
  },
  {
    "text": "If I were to change the w for x,\nthen said for every w there",
    "start": "1516640",
    "end": "1521740"
  },
  {
    "text": "exists a y such that p is true\nof w and y, it would be the same sentence.",
    "start": "1521740",
    "end": "1529540"
  },
  {
    "text": "That's what it means. Or another case of this that\nyou've seen is integral say,",
    "start": "1529540",
    "end": "1535690"
  },
  {
    "text": "from 0 to one of dx over\none plus x square.",
    "start": "1535690",
    "end": "1542414"
  },
  {
    "text": " Well that's something you\nsee all the time.",
    "start": "1542415",
    "end": "1547440"
  },
  {
    "text": "And this x is a bound\nvariable. If I change that to a\nt, the expression is",
    "start": "1547440",
    "end": "1555190"
  },
  {
    "text": "still the same thing. This is a 1/4 of the arctan of\none or something like that.",
    "start": "1555190",
    "end": "1564850"
  },
  {
    "text": "Yes, that's the arctan of one. So bound variables are actually\nfairly common, for those of you who have played\na bit with mathematics.",
    "start": "1564850",
    "end": "1573690"
  },
  {
    "text": "Well, let's go into the\nprogramming world.",
    "start": "1573690",
    "end": "1579100"
  },
  {
    "text": "Instead of the quantifier being\nsomething like, for every, or there exists, or\nintegral, a quantifier is a",
    "start": "1579100",
    "end": "1585000"
  },
  {
    "text": "symbol that binds a variable. And we are going to use the\nquantifier lambda as being the",
    "start": "1585000",
    "end": "1590279"
  },
  {
    "text": "essential thing that\nbinds variables. And so we have some nice\nexamples here like that",
    "start": "1590280",
    "end": "1597730"
  },
  {
    "text": "procedure of one argument\ny which does",
    "start": "1597730",
    "end": "1603160"
  },
  {
    "text": "the following thing. It calls the procedure of one\nargument x, which multiplies x",
    "start": "1603160",
    "end": "1610300"
  },
  {
    "text": "by y, and applies\nthat to three. ",
    "start": "1610300",
    "end": "1618810"
  },
  {
    "text": "That procedure has the property\nthere of two bound variables in it, x and y.",
    "start": "1618810",
    "end": "1624790"
  },
  {
    "text": "This quantifier, lambda here,\nbinds this y, and this quantifier, lambda,\nbinds that x.",
    "start": "1624790",
    "end": "1632120"
  },
  {
    "text": "Because, if I were to take an\narbitrary symbol does not occur in this expression like w\nand replace all y's with w's",
    "start": "1632120",
    "end": "1640130"
  },
  {
    "text": "in this expression, the\nexpression is still the same, the same procedure.",
    "start": "1640130",
    "end": "1646240"
  },
  {
    "text": "And this is an important idea. The reason why we had such\nthings like that is a kind of modularity.",
    "start": "1646240",
    "end": "1651500"
  },
  {
    "text": "If two people are writing\nprograms, and they work together, it shouldn't matter\nwhat names they use internal",
    "start": "1651500",
    "end": "1658150"
  },
  {
    "text": "to their own little machines\nthat they're building. And so, what I'm really telling\nyou there, is that,",
    "start": "1658150",
    "end": "1665960"
  },
  {
    "text": "for example, this is equivalent\nto that procedure of one argument y which uses\nthat procedure of one argument",
    "start": "1665960",
    "end": "1674260"
  },
  {
    "text": "d which multiplies z by y.",
    "start": "1674260",
    "end": "1681200"
  },
  {
    "text": "Because nobody cares what\nI used in here. ",
    "start": "1681200",
    "end": "1686269"
  },
  {
    "text": "It's a nice example. On the other hand, I have some\nvariables that are not bound.",
    "start": "1686270",
    "end": "1695320"
  },
  {
    "text": "For example, that procedure\nof one argument x which",
    "start": "1695320",
    "end": "1702450"
  },
  {
    "text": "multiplies x by y. In this case, y is not bound.",
    "start": "1702450",
    "end": "1712370"
  },
  {
    "text": "Supposing y had the value three,\nand z had the value four, then this procedure\nwould be the thing that",
    "start": "1712370",
    "end": "1721419"
  },
  {
    "text": "multiplies its argument\nby three. If I were to replace every\ninstance of y with z, I would",
    "start": "1721420",
    "end": "1727793"
  },
  {
    "text": "have a different procedure\nwhich multiplies every argument that's given by four.",
    "start": "1727793",
    "end": "1733491"
  },
  {
    "text": "And, in fact, we have a name\nfor such a variable. Here, we say that a variable, v,\nis free in the expression,",
    "start": "1733491",
    "end": "1743680"
  },
  {
    "text": "e, if the meaning of the\nexpression, e, is changed by the uniform replacement of a\nvariable, w, not occurring in",
    "start": "1743680",
    "end": "1749355"
  },
  {
    "text": "e for every occurrence\nof v and e. So that's why this variable\nover here,",
    "start": "1749355",
    "end": "1760680"
  },
  {
    "text": "y, is a free variable. ",
    "start": "1760680",
    "end": "1769010"
  },
  {
    "text": "And so free variables\nin this expression-- And other examples of that is\nthat procedure of one argument",
    "start": "1769010",
    "end": "1778690"
  },
  {
    "text": "y, which is just what we had\nbefore, which uses that procedure of one argument x\nthat multiplies x by y--",
    "start": "1778690",
    "end": "1788130"
  },
  {
    "text": " use that on three. ",
    "start": "1788130",
    "end": "1796940"
  },
  {
    "text": "This procedure has\na free variable in it which is asterisk. ",
    "start": "1796940",
    "end": "1805010"
  },
  {
    "text": "See, because, if that has\na normal meaning of multiplication, then if I were\nto replace uniformly all",
    "start": "1805010",
    "end": "1811360"
  },
  {
    "text": "asterisks with pluses, then the\nmeaning of this expression would change.",
    "start": "1811360",
    "end": "1817020"
  },
  {
    "text": " That's what you mean\nby a free variable.",
    "start": "1817020",
    "end": "1822850"
  },
  {
    "text": "So, so far you've learned some\nlogician words which describe the way names are used.",
    "start": "1822850",
    "end": "1829020"
  },
  {
    "text": "Now, we have to do a little bit\nmore playing around here, a little bit more.",
    "start": "1829020",
    "end": "1835200"
  },
  {
    "text": "I want to tell you about the\nregions are over which variables are defined. ",
    "start": "1835200",
    "end": "1842270"
  },
  {
    "text": "You see, we've been very\ninformal about this up till now, and, of course, many of you\nhave probably understood",
    "start": "1842270",
    "end": "1848870"
  },
  {
    "text": "very clearly or most of you,\nthat the x that's being declared here is defined\nonly in here.",
    "start": "1848870",
    "end": "1855169"
  },
  {
    "text": " This x is the defined only in\nhere, and this y is defined",
    "start": "1855170",
    "end": "1863580"
  },
  {
    "text": "only in here.  We have a name for\nsuch an idea. It's called a scope.",
    "start": "1863580",
    "end": "1871660"
  },
  {
    "text": "And let me give you another\npiece of terminology. It's a long story. If x is a bound variable in\ne, then there is a lambda",
    "start": "1871660",
    "end": "1878850"
  },
  {
    "text": "expression where it is bound. So the only way you can get a\nbound variable ultimately is",
    "start": "1878850",
    "end": "1883956"
  },
  {
    "text": "by lambda expression. Then you may worry, does\ndefine quite an exception to this?",
    "start": "1883956",
    "end": "1889670"
  },
  {
    "text": "And it turns out, we could\nalways arrange things so you don't need any defines. And we'll see that in a while. It's a very magical thing.",
    "start": "1889670",
    "end": "1896899"
  },
  {
    "text": "So define really can go away. The really, only thing that\nmakes names is lambda .",
    "start": "1896900",
    "end": "1902650"
  },
  {
    "text": "That's its job. And what's so amazing about\na lot of things is you can compute with only lambda.",
    "start": "1902650",
    "end": "1908740"
  },
  {
    "text": "But, in any case, a lambda\nexpression has a place where",
    "start": "1908740",
    "end": "1913910"
  },
  {
    "text": "it declares a variable. We call it the formal parameter\nlist or the bound",
    "start": "1913910",
    "end": "1919970"
  },
  {
    "text": "variable list. We say that the\nlambda expression binds-- so it's a verb-- binds the variables declared in\nit's found variable list.",
    "start": "1919970",
    "end": "1928730"
  },
  {
    "text": "In addition, those parts of\nthe expression where the variable is defined, which was\ndeclared by some declaration,",
    "start": "1928730",
    "end": "1935679"
  },
  {
    "text": "is called the scope\nof that variable. So these are scopes.",
    "start": "1935680",
    "end": "1942270"
  },
  {
    "text": "This is the scope of y.  And this is the scope of x--",
    "start": "1942270",
    "end": "1948690"
  },
  {
    "text": " that sort of thing.",
    "start": "1948690",
    "end": "1954280"
  },
  {
    "start": "1954280",
    "end": "1961460"
  },
  {
    "text": "OK, well, now we have enough\nterminology to begin to",
    "start": "1961460",
    "end": "1967120"
  },
  {
    "text": "understand how to make a new\nmodel for computation, because",
    "start": "1967120",
    "end": "1972360"
  },
  {
    "text": "the key thing going on here\nis that we destroyed the substitution model, and we now\nhave to have a model that",
    "start": "1972360",
    "end": "1978820"
  },
  {
    "text": "represents the names as\nreferring to places.",
    "start": "1978820",
    "end": "1983950"
  },
  {
    "text": "Because if we are going to\nchange something, then we have a place where it's stored.",
    "start": "1983950",
    "end": "1989659"
  },
  {
    "text": "You see, if a name only refers\nto a value, and if I tried to",
    "start": "1989660",
    "end": "1994860"
  },
  {
    "text": "change the name's meaning,\nwell, that's not clear. There's nothing that is\nthe place that that",
    "start": "1994860",
    "end": "2003570"
  },
  {
    "text": "name referred to. How am I really saying it? There is nothing shared\namong all of the instances of that name.",
    "start": "2003570",
    "end": "2009840"
  },
  {
    "text": "And what we really mean,\nby a name, is that we fan something out. We've given something a name,\nand you have it, and you have",
    "start": "2009840",
    "end": "2017350"
  },
  {
    "text": "it, because I'm given you a\nreference to it, and I've given you a reference to it. And we'll see a lot\nabout that.",
    "start": "2017350",
    "end": "2023580"
  },
  {
    "text": "So let me tell you about\nenvironments. I need the overhead projection\nmachine, thank you.",
    "start": "2023580",
    "end": "2032140"
  },
  {
    "text": "And so here is a bunch of\nenvironment structures.",
    "start": "2032140",
    "end": "2041590"
  },
  {
    "text": "An environment is a way of doing\nsubstitutions virtually. It represents a place where\nsomething is stored which is",
    "start": "2041590",
    "end": "2049638"
  },
  {
    "text": "the substitutions that\nyou haven't done.  It's a place where everything\naccumulates, where the names",
    "start": "2049639",
    "end": "2057638"
  },
  {
    "text": "of the variables are associated\nwith the values they have such that when you\nsay, what dose this name mean,",
    "start": "2057639",
    "end": "2066020"
  },
  {
    "text": "you look it up in\nan environment. So an environment is a function,\nor a table, or",
    "start": "2066020",
    "end": "2072419"
  },
  {
    "text": "something like that. But it's a structured\nsort of table. It's made out of things\ncalled frames. ",
    "start": "2072420",
    "end": "2081050"
  },
  {
    "text": "Frames are pieces of\nenvironment, and they are chained together, in some nice\nways, by what's called parent",
    "start": "2081050",
    "end": "2090270"
  },
  {
    "text": "links or something like that. So here, we have an environment\nstructure",
    "start": "2090270",
    "end": "2097740"
  },
  {
    "text": "consisting of three\nenvironments, basically, a, b, and c.",
    "start": "2097740",
    "end": "2105250"
  },
  {
    "text": "d is also an environment, but\nit's the same one, they share.",
    "start": "2105250",
    "end": "2111480"
  },
  {
    "text": "And that's the essence\nof assignment. If I change a variable, a value\nof a valuable that lives",
    "start": "2111480",
    "end": "2118120"
  },
  {
    "text": "here, like that one, it should\nbe visible from all places that you're looking\nat it from.",
    "start": "2118120",
    "end": "2123750"
  },
  {
    "text": "Take this one, x. If I change the x to four, it's visible from other places.",
    "start": "2123750",
    "end": "2130340"
  },
  {
    "text": "But I'm not going to worry\nabout that right now. We're going to talk a lot about\nthat in a little while. What do we have here?",
    "start": "2130340",
    "end": "2136830"
  },
  {
    "text": "Well, these are called frames. Here is a frame, here's a frame,\nand here's a frame.",
    "start": "2136830",
    "end": "2143270"
  },
  {
    "text": "a is an environment which\nconsists of the table which is frame two, followed by the\ntable labeled frame one.",
    "start": "2143270",
    "end": "2152570"
  },
  {
    "text": "And, in this environment, in\nsay this environment, frame",
    "start": "2152570",
    "end": "2159280"
  },
  {
    "text": "two, x and y are bound. They have values.",
    "start": "2159280",
    "end": "2165920"
  },
  {
    "text": "Sorry, in frame one-- In frame two, z is bound, and\nx is bound, and y is bound,",
    "start": "2165920",
    "end": "2175340"
  },
  {
    "text": "but the value of x that we see,\nlooking from this point of view, is this x.",
    "start": "2175340",
    "end": "2180940"
  },
  {
    "text": "It's x is seven, rather than\nthis one which is three. We say that this x\nshadows this x.",
    "start": "2180940",
    "end": "2187660"
  },
  {
    "text": " From environment three--",
    "start": "2187660",
    "end": "2193320"
  },
  {
    "text": "from frame three, from\nenvironment b, which refers to frame three, we have variables\nn and y bound and also x.",
    "start": "2193320",
    "end": "2202155"
  },
  {
    "text": " This y shadow this one.",
    "start": "2202155",
    "end": "2208630"
  },
  {
    "text": "So the value, looking\nfrom this point of view, of y is two. The value for looking\nfrom this point of",
    "start": "2208630",
    "end": "2214900"
  },
  {
    "text": "view and m is one. And the value, looking\nfrom this point of view, of x is three. ",
    "start": "2214900",
    "end": "2222310"
  },
  {
    "text": "So there we have a very\nsimple environment structure made out of frames. These correspond to the\napplications of procedures.",
    "start": "2222310",
    "end": "2230990"
  },
  {
    "text": "And we'll see that\nin a second. So now I have to make you some\nother nice little structure",
    "start": "2230990",
    "end": "2236859"
  },
  {
    "text": "that we build.  Next slide, we see an object,\nwhich I'm going to draw",
    "start": "2236860",
    "end": "2245820"
  },
  {
    "text": "procedures. This is a procedure. A procedure is made\nout of two parts.",
    "start": "2245820",
    "end": "2253150"
  },
  {
    "text": "It's sort of like a cons.  However, it's the two parts.",
    "start": "2253150",
    "end": "2258460"
  },
  {
    "text": " The first part refers to some\ncode, something that can be",
    "start": "2258460",
    "end": "2266410"
  },
  {
    "text": "executed, a set of instructions,\nif you will. You can think of it that way. And the second part is\nthe environment.",
    "start": "2266410",
    "end": "2273830"
  },
  {
    "text": "The procedure is the\nwhole thing. And we're going to have to use\nthis to capture the values of",
    "start": "2273830",
    "end": "2281420"
  },
  {
    "text": "the free variables that occur\nin the procedure. If a variable occurs in the\nprocedure it's either bound in",
    "start": "2281420",
    "end": "2288760"
  },
  {
    "text": "that procedure or free. If it's bound, then the value\nwill somehow be easy to find.",
    "start": "2288760",
    "end": "2296930"
  },
  {
    "text": "It will be in some easy\nenvironment to get at. If it's free, we're going to\nhave to have something that goes with the procedure that\nsays where we'll go",
    "start": "2296930",
    "end": "2304010"
  },
  {
    "text": "look for its value. And the reasons why are not\nobvious yet, but will be soon.",
    "start": "2304010",
    "end": "2312290"
  },
  {
    "text": "So here's a procedure object. It's a composite object\nconsisting of a piece of code",
    "start": "2312290",
    "end": "2320200"
  },
  {
    "text": "and a environment structure. Now I will tell you the new\nrules, the complete new rules,",
    "start": "2320200",
    "end": "2326400"
  },
  {
    "text": "for evaluation.  The first rule is-- there's\nonly two of them.",
    "start": "2326400",
    "end": "2333250"
  },
  {
    "text": "These correspond to the\nsubstitution model rules. And the first one has to do\nwith how do you apply a",
    "start": "2333250",
    "end": "2340830"
  },
  {
    "text": "procedure to its arguments?  And a procedural object is\napplied to a set of arguments",
    "start": "2340830",
    "end": "2348890"
  },
  {
    "text": "by constructing a new frame. That frame will contain the\nmapping of the former parameters to the actual\nparameters of the arguments",
    "start": "2348890",
    "end": "2356540"
  },
  {
    "text": "that were supplied\nin the call. As you know, when we make up\na call to a procedure like",
    "start": "2356540",
    "end": "2365320"
  },
  {
    "text": "lambda x times x y, and we call\nthat with the argument three, then we're going\nto need some",
    "start": "2365320",
    "end": "2371280"
  },
  {
    "text": "mapping of x to three. It's the same thing as later\nsubstituting, if you will, the",
    "start": "2371280",
    "end": "2378490"
  },
  {
    "text": "three for the x in\nthe old model. So I'm going to build a frame\nwhich contains x equals three",
    "start": "2378490",
    "end": "2385160"
  },
  {
    "text": "as the information\nin that frame.  Now, the body of the procedure\nwill then have to be evaluated",
    "start": "2385160",
    "end": "2392640"
  },
  {
    "text": "which is this. I will be evaluated in an\nenvironment which is",
    "start": "2392640",
    "end": "2404710"
  },
  {
    "text": "constructed by adjoining the new\nframe that we just made to the environment which\nwas part of the",
    "start": "2404710",
    "end": "2410450"
  },
  {
    "text": "procedure that we applied. So I'm going to make a little\nexample of that here.",
    "start": "2410450",
    "end": "2415670"
  },
  {
    "text": " Supposing I have some\nenvironment.",
    "start": "2415670",
    "end": "2425109"
  },
  {
    "text": "Here's a frame which\nrepresents it. And some procedure-- which I'm\ngoing to draw with circles",
    "start": "2425110",
    "end": "2430190"
  },
  {
    "text": "here because it's easier\nthan little triangles-- Sorry, those are rhombuses,\nrhomboidal little pieces of",
    "start": "2430190",
    "end": "2438940"
  },
  {
    "text": "fruit jelly or something. So here's a procedure which\ntakes this environment.",
    "start": "2438940",
    "end": "2445960"
  },
  {
    "text": "And the procedure has a piece\nof code, which is a lambda expression, which binds x and\ny and then executes an",
    "start": "2445960",
    "end": "2455599"
  },
  {
    "text": "expression, e. And this is the procedure. We'll call it p.",
    "start": "2455600",
    "end": "2461470"
  },
  {
    "text": "I wish to apply that procedure\nto three and four.",
    "start": "2461470",
    "end": "2466490"
  },
  {
    "text": "So I want to do p of\nthree and four. What I'm going to do, of course,\nis make a new frame.",
    "start": "2466490",
    "end": "2473210"
  },
  {
    "text": "I build a frame which contains\nx equals three,",
    "start": "2473210",
    "end": "2478630"
  },
  {
    "text": "and y equals four. I'm going to connect that frame\nto this frame over here.",
    "start": "2478630",
    "end": "2487680"
  },
  {
    "text": "And then this environment, with\nI will call b, is the environment in which I will\nevaluate the body of e.",
    "start": "2487680",
    "end": "2494880"
  },
  {
    "start": "2494880",
    "end": "2499940"
  },
  {
    "text": "Now, e may contain references\nto x and y and other things.",
    "start": "2499940",
    "end": "2506890"
  },
  {
    "text": "x and y will have values\nright here. Other things will have\ntheir values here.",
    "start": "2506890",
    "end": "2515040"
  },
  {
    "text": "How do we get this frame? That we do by the construction\nof procedures which is the",
    "start": "2515040",
    "end": "2520109"
  },
  {
    "text": "other rule. And I think that's\nthe next slide.",
    "start": "2520110",
    "end": "2525500"
  },
  {
    "text": "Rule two, when a lambda\nexpression is evaluated, relative to a particular\nenvironment--",
    "start": "2525500",
    "end": "2531510"
  },
  {
    "text": " See, the way I get a procedure\nis by evaluating the lambda",
    "start": "2531510",
    "end": "2537470"
  },
  {
    "text": "expression. Here's a lambda expression. By evaluating it, I get\na procedure which I",
    "start": "2537470",
    "end": "2542880"
  },
  {
    "text": "can apply to three. Now this lambda expression is\nevaluated in an environment",
    "start": "2542880",
    "end": "2548710"
  },
  {
    "text": "where y is defined. And I want the body of\nthis which contains a",
    "start": "2548710",
    "end": "2553760"
  },
  {
    "text": "free version of y. y is free in here, it's bound\nover the whole thing, but it's",
    "start": "2553760",
    "end": "2561790"
  },
  {
    "text": "free over here. I want that y to be this one.",
    "start": "2561790",
    "end": "2567440"
  },
  {
    "text": "I evaluate this body of this\nprocedure in the environment",
    "start": "2567440",
    "end": "2573150"
  },
  {
    "text": "where y was created. That's this kind of thing,\nbecause that was done by application.",
    "start": "2573150",
    "end": "2579140"
  },
  {
    "text": "Now, if I ever want to look up\nthe value of y, I have to know where it is.",
    "start": "2579140",
    "end": "2584369"
  },
  {
    "text": "Therefore, this procedural was\ncreated, the creation of the procedure which is the result\nof evaluating that lambda",
    "start": "2584370",
    "end": "2589530"
  },
  {
    "text": "expression had better capture\na pointer or remember the frame in which y was bound.",
    "start": "2589530",
    "end": "2598109"
  },
  {
    "text": "So that's what this rule\nis telling us. So, for example, if I happen\nto be evaluating a lambda",
    "start": "2598110",
    "end": "2608610"
  },
  {
    "text": "expression, lambda expression in\ne, lambda of say, x and y,",
    "start": "2608610",
    "end": "2617370"
  },
  {
    "text": "let's call it g in e,\nevaluating that.",
    "start": "2617370",
    "end": "2623020"
  },
  {
    "text": "Well, all that means is I now\nconstruct a procedure object. e is some environment.",
    "start": "2623020",
    "end": "2628990"
  },
  {
    "text": "e is something which has\na pointer to it. I construct a procedure object\nthat points up to that",
    "start": "2628990",
    "end": "2636119"
  },
  {
    "text": "environment, where the code of\nthat is a lambda expression or",
    "start": "2636120",
    "end": "2641830"
  },
  {
    "text": "whatever that translates into.  And this is the procedure.",
    "start": "2641830",
    "end": "2647580"
  },
  {
    "text": " So this produces for me-- this\nobject here, this environment",
    "start": "2647580",
    "end": "2657640"
  },
  {
    "text": "pointer, captures the place\nwhere this lambda expression was evaluated, where the\ndefinition was used, where the",
    "start": "2657640",
    "end": "2665819"
  },
  {
    "text": "definition was used to make a procedure, to make the procedure.",
    "start": "2665820",
    "end": "2672950"
  },
  {
    "text": "So it picks up the environment\nfrom the place where that procedure was defined, stores\nit in the procedure itself,",
    "start": "2672950",
    "end": "2679680"
  },
  {
    "text": "and then when the procedure is\nused, the environment where it was defined is extended\nwith the new frame.",
    "start": "2679680",
    "end": "2684990"
  },
  {
    "text": " So this gives us a locus\nfor putting where a",
    "start": "2684990",
    "end": "2691170"
  },
  {
    "text": "variable has a value. And, for example, if there are\nlots of guys pointing in at that environment, then they\nshare that place.",
    "start": "2691170",
    "end": "2701430"
  },
  {
    "text": "And we'll see more\nof that shortly. Well, now you have a new model\nfor understanding the",
    "start": "2701430",
    "end": "2708940"
  },
  {
    "text": "execution of programs. I suppose\nI'll take questions now, and then we'll go on and\nuse that for something.",
    "start": "2708940",
    "end": "2714970"
  },
  {
    "text": " AUDIENCE: Is it right to say\nthen, the environment is that",
    "start": "2714970",
    "end": "2721870"
  },
  {
    "text": "linked chain of frames-- PROFESSOR: That's right. AUDIENCE: starting with-- working all the way back?",
    "start": "2721870",
    "end": "2727076"
  },
  {
    "text": "PROFESSOR: Yes, the environment\nis a sequence of frames linked together.",
    "start": "2727076",
    "end": "2732470"
  },
  {
    "text": "And the way I like to think\nabout it, it's the pointer to the first one, because\nonce you've got that",
    "start": "2732470",
    "end": "2738150"
  },
  {
    "text": "you've got them all. ",
    "start": "2738150",
    "end": "2744079"
  },
  {
    "text": "Anybody else? AUDIENCE: Is it possible to\nevaluate a procedure or to define a procedure in two\ndifferent environments such",
    "start": "2744080",
    "end": "2749300"
  },
  {
    "text": "that it will behave\ndifferently, and have pointers to both-- PROFESSOR: Oh, yes. The same procedure is not going\nto have two different",
    "start": "2749300",
    "end": "2755260"
  },
  {
    "text": "environments. The same code, the same lambda\nexpression can be evaluated in",
    "start": "2755260",
    "end": "2761895"
  },
  {
    "text": "two environments producing\ntwo different procedures.  Each procedure--",
    "start": "2761895",
    "end": "2767140"
  },
  {
    "text": "AUDIENCE: Their definition\nhas the same name. Their operation-- PROFESSOR: The definition is\nwritten the same, with the same characters.",
    "start": "2767140",
    "end": "2772570"
  },
  {
    "text": "I can evaluate that set of\ncharacters, whatever, that list structure that defines,\nthat is the textual",
    "start": "2772570",
    "end": "2779530"
  },
  {
    "text": "representation. I can evaluate that in two\ndifferent environments producing two different\nprocedures.",
    "start": "2779530",
    "end": "2785650"
  },
  {
    "text": "Each of those procedures has\nits own local sets of",
    "start": "2785650",
    "end": "2791700"
  },
  {
    "text": "variables, and we'll\nsee that right now. ",
    "start": "2791700",
    "end": "2796770"
  },
  {
    "text": "Anybody else? ",
    "start": "2796770",
    "end": "2802670"
  },
  {
    "text": "OK, thank you. Let's take a break. ",
    "start": "2802670",
    "end": "2808750"
  },
  {
    "text": "[MUSIC PLAYING]",
    "start": "2808750",
    "end": "2842870"
  },
  {
    "text": "Well, now I've done this\nterrible thing to you. I've introduced a very\ncomplicated thing, assignment,",
    "start": "2842870",
    "end": "2854599"
  },
  {
    "text": "which destroys most of the\ninteresting mathematical properties of our programs. Why\nshould I have done this?",
    "start": "2854600",
    "end": "2863270"
  },
  {
    "text": "What possible good\ncould this do? Clearly not a nice thing, so I\nbetter have a good excuse.",
    "start": "2863270",
    "end": "2872490"
  },
  {
    "text": "Well, let's do a little bit of\nplaying, first of all, with some very interesting programs\nthat have assignment.",
    "start": "2872490",
    "end": "2878869"
  },
  {
    "text": "Understand something special\nabout them that makes them somewhat valuable.",
    "start": "2878870",
    "end": "2884820"
  },
  {
    "text": "Start with a very simple program\nwhich I'm going to call make-counter.",
    "start": "2884820",
    "end": "2890670"
  },
  {
    "text": "I'm going to define make-counter\nto be a procedure",
    "start": "2890670",
    "end": "2906480"
  },
  {
    "text": "of one argument n which\nreturns as its value a procedure of no arguments--",
    "start": "2906480",
    "end": "2914390"
  },
  {
    "text": "a procedure that produces\na procedure-- which sets n to the increment\nof n and returns",
    "start": "2914390",
    "end": "2928600"
  },
  {
    "text": "that value of n. ",
    "start": "2928600",
    "end": "2935520"
  },
  {
    "text": "Now we're going to investigate\nthe behavior of this. It's a sort of interesting\nthing. In order to investigate the\nbehavior, I have to make an",
    "start": "2935520",
    "end": "2942150"
  },
  {
    "text": "environment model, because\nwe can't understand this any other way. ",
    "start": "2942150",
    "end": "2948630"
  },
  {
    "text": "So let's just do that. We start out with\nsome sort of-- let's say there is a global\nenvironment that the machine",
    "start": "2948630",
    "end": "2955269"
  },
  {
    "text": "is born with. Global we'll call it. And it's going to have in it\na bunch of initial things.",
    "start": "2955270",
    "end": "2964530"
  },
  {
    "text": "We all know what it's got. It's got things in it like\nsay, plus, and times, and",
    "start": "2964530",
    "end": "2972930"
  },
  {
    "text": "quotient, and difference,\nand CAR, and et",
    "start": "2972930",
    "end": "2979329"
  },
  {
    "text": "cetera, lots of things. I don't know what they are, some\nvarious squiggles that",
    "start": "2979330",
    "end": "2986160"
  },
  {
    "text": "are the things the machine\nis born with.",
    "start": "2986160",
    "end": "2991289"
  },
  {
    "text": "And by doing the definition\nhere, what I plan to do--",
    "start": "2991290",
    "end": "2996350"
  },
  {
    "text": "Well, what am I doing? I'm doing this relative to\nthe global environment. So here's my environment\npointer.",
    "start": "2996350",
    "end": "3003580"
  },
  {
    "text": "In order to do that I have\nto evaluate this lambda expression. That means I make a\nprocedure object.",
    "start": "3003580",
    "end": "3011490"
  },
  {
    "text": "So I'm going to make a procedure\nobject here. ",
    "start": "3011490",
    "end": "3017400"
  },
  {
    "text": "And the procedure object has, as\nthe place it's defined, the global environment.",
    "start": "3017400",
    "end": "3023819"
  },
  {
    "text": "The procedure object contains\nsome code that represents a",
    "start": "3023820",
    "end": "3029880"
  },
  {
    "text": "procedure of one argument n\nwhich returns a procedure of no arguments which\ndoes something.",
    "start": "3029880",
    "end": "3035340"
  },
  {
    "text": " And the define is a way of\nchanging this environment, so",
    "start": "3035340",
    "end": "3044580"
  },
  {
    "text": "that I now add to it a\nmake-counter, a special rule",
    "start": "3044580",
    "end": "3053230"
  },
  {
    "text": "for the special thing defined. But what that is, is\nit gives me that",
    "start": "3053230",
    "end": "3059810"
  },
  {
    "text": "pointer to that procedure. So now the global environment\ncontains make-counter as well.",
    "start": "3059810",
    "end": "3066370"
  },
  {
    "text": " Now, we're going to do\nsome operations.",
    "start": "3066370",
    "end": "3071800"
  },
  {
    "text": "I'm going to use this to\nmake some counters. We'll see what a counter is.",
    "start": "3071800",
    "end": "3077140"
  },
  {
    "text": "So let's define c1 to be a\ncounter beginning at 0.",
    "start": "3077140",
    "end": "3086700"
  },
  {
    "start": "3086700",
    "end": "3095440"
  },
  {
    "text": "Well, we know how to do this\nnow, according to the model. I have to evaluate the\nexpression make-counter in the",
    "start": "3095440",
    "end": "3103339"
  },
  {
    "text": "global environment,\nmake-counter of 0. Well, I look up make-counter and\nsee that it's a procedure.",
    "start": "3103340",
    "end": "3110785"
  },
  {
    "text": " I'm going to have to apply\nthat procedure.",
    "start": "3110785",
    "end": "3116009"
  },
  {
    "text": "The way I apply the procedure\nis by constructing a frame. ",
    "start": "3116010",
    "end": "3122400"
  },
  {
    "text": "So I construct a frame which has\na value for n in it which",
    "start": "3122400",
    "end": "3132029"
  },
  {
    "text": "is 0, and the parent environment\nis the one which is the environment of definition\nof make-counter.",
    "start": "3132030",
    "end": "3138810"
  },
  {
    "start": "3138810",
    "end": "3143890"
  },
  {
    "text": "So I've made an environment by\napplying make-counter to 0. ",
    "start": "3143890",
    "end": "3151579"
  },
  {
    "text": "Now, I have to evaluate the body\nof make-counter, which is this lambda expression,\nin that environment.",
    "start": "3151580",
    "end": "3157454"
  },
  {
    "text": " Well evaluating this body,\nthis body is a lambda",
    "start": "3157455",
    "end": "3163770"
  },
  {
    "text": "expression. Evaluate a lambda expression\nmeans make a procedure object.",
    "start": "3163770",
    "end": "3169570"
  },
  {
    "text": "So I'm going to make\na procedure object. ",
    "start": "3169570",
    "end": "3176840"
  },
  {
    "text": "And that procedure object has\nthe environment it was defined in being that, where n\nwas defined to be 0.",
    "start": "3176840",
    "end": "3187656"
  },
  {
    "text": "And it has some code, which is\nthe procedure of no arguments which does something, that sets\nsomething, and returns n.",
    "start": "3187656",
    "end": "3197622"
  },
  {
    "text": "And this thing is going to be\nthe object, which in the",
    "start": "3197622",
    "end": "3202680"
  },
  {
    "text": "global environment, will\nhave the name c1. So we construct a name here, c1,\nand say that equals that.",
    "start": "3202680",
    "end": "3212625"
  },
  {
    "text": " Now, but also make another\ncounter, c2 to be make-counter",
    "start": "3212625",
    "end": "3230790"
  },
  {
    "text": "say, starting with 10. Then I do essentially\nthe same thing.",
    "start": "3230790",
    "end": "3237270"
  },
  {
    "text": "I apply the make-counter\nprocedure, which I got from here, to make another frame\nwith n being 10.",
    "start": "3237270",
    "end": "3245690"
  },
  {
    "text": "That frame has the global\nenvironment as its parent. I then construct a procedure\nwhich has that as it's frame",
    "start": "3245690",
    "end": "3256750"
  },
  {
    "text": "of definition.  The code of it is the procedure\nof no arguments",
    "start": "3256750",
    "end": "3263240"
  },
  {
    "text": "which does something. And it does a set, and so on.",
    "start": "3263240",
    "end": "3268700"
  },
  {
    "text": "And n comes out. And c2 is this.",
    "start": "3268700",
    "end": "3276950"
  },
  {
    "text": "Well, you're already beginning\nto see something fairly interesting. There are two n's here.",
    "start": "3276950",
    "end": "3282880"
  },
  {
    "text": "They are not one n. Each time I called make-counter,\nI made another",
    "start": "3282880",
    "end": "3289310"
  },
  {
    "text": "instance of n. These are distinct and separate\nfrom each other.",
    "start": "3289310",
    "end": "3294370"
  },
  {
    "text": " Now, let's do some execution,\nuse those counters.",
    "start": "3294370",
    "end": "3300783"
  },
  {
    "text": "I'm going to use\nthose counters. ",
    "start": "3300783",
    "end": "3305990"
  },
  {
    "text": "Well, what happens if I\nsay, c1 at this point?",
    "start": "3305990",
    "end": "3315900"
  },
  {
    "text": "Well, I go over here,\nand I say, oh yes, c1 is a procedure. I'm going to call this procedure\non no arguments, but",
    "start": "3315900",
    "end": "3323490"
  },
  {
    "text": "it has no parameters. That's right. What's its body? Well, I have to look over\nhere, because I",
    "start": "3323490",
    "end": "3329776"
  },
  {
    "text": "didn't write it down. It said, set n to one plus n\nand return n, increment n.",
    "start": "3329776",
    "end": "3339049"
  },
  {
    "text": "Well, the n it sees\nis this one. So I increment that n.",
    "start": "3339050",
    "end": "3345490"
  },
  {
    "text": "That becomes one, and I\nreturn the value one. ",
    "start": "3345490",
    "end": "3353050"
  },
  {
    "text": "Supposing I then called c2.",
    "start": "3353050",
    "end": "3358220"
  },
  {
    "text": "Well, what do I do? I say c2 is this procedure which\ndoes the same thing, but",
    "start": "3358220",
    "end": "3363600"
  },
  {
    "text": "here's the n. It becomes 11.",
    "start": "3363600",
    "end": "3371140"
  },
  {
    "text": "And so I have an 11 which\nis the value. I then can say, let's\ntry c1 again.",
    "start": "3371140",
    "end": "3378130"
  },
  {
    "text": " c1 is this, that's two,\nso the answer is two.",
    "start": "3378130",
    "end": "3389660"
  },
  {
    "text": "And c2 gives me a 12 by the same\nmethod, by walking down",
    "start": "3389660",
    "end": "3396559"
  },
  {
    "text": "here looking at that and saying,\nhere's the n, I'm incrementing. ",
    "start": "3396560",
    "end": "3401630"
  },
  {
    "text": "So what I have are computational\nobjects. There are two counters,\neach with its own",
    "start": "3401630",
    "end": "3409780"
  },
  {
    "text": "independent local state. ",
    "start": "3409780",
    "end": "3415540"
  },
  {
    "text": "Let's talk about\nthis a little. This is a strange thing. ",
    "start": "3415540",
    "end": "3421270"
  },
  {
    "text": "What's an object? It's not at all obvious\nwhat an object is.",
    "start": "3421270",
    "end": "3427559"
  },
  {
    "text": "We like to think about\nobjects, because it's economical to think that way.",
    "start": "3427560",
    "end": "3434800"
  },
  {
    "text": "It's an intellectual economy. I am an object.",
    "start": "3434800",
    "end": "3441119"
  },
  {
    "text": "You are an object. We are not the same object. ",
    "start": "3441120",
    "end": "3447600"
  },
  {
    "text": "I can divide the world into\ntwo parts, me and you, and there's other things as well,\nsuch that most of the things I",
    "start": "3447600",
    "end": "3456599"
  },
  {
    "text": "might want to discuss about my\nworkings do not involve you, and most of the things I want to\ndiscuss about your workings",
    "start": "3456600",
    "end": "3463789"
  },
  {
    "text": "don't involve me. I have a blood pressure, a\ntemperature, a respiration",
    "start": "3463790",
    "end": "3470990"
  },
  {
    "text": "rate, a certain amount of\nsugar in my blood, and",
    "start": "3470990",
    "end": "3476900"
  },
  {
    "text": "numerous, thousands, of state\nvariables-- millions actually, or I don't know how many-- huge numbers of state variables\nin the physical",
    "start": "3476900",
    "end": "3483040"
  },
  {
    "text": "sense which represent the state\nof me as a particle, and",
    "start": "3483040",
    "end": "3489240"
  },
  {
    "text": "you have gazillions\nof them as well. And most of mine are uncoupled\nto most of yours.",
    "start": "3489240",
    "end": "3497290"
  },
  {
    "text": "So we can compute the properties\nof me without worrying too much about\nthe properties of you.",
    "start": "3497290",
    "end": "3503940"
  },
  {
    "text": "If we had to work about both\nof us together, than the number of states that we have to\nconsider is the product of the number of states you have\nand the number of states I",
    "start": "3503940",
    "end": "3509839"
  },
  {
    "text": "have. But this way it's\nalmost a sum. Now, indeed there are forces\nthat couple us.",
    "start": "3509840",
    "end": "3516110"
  },
  {
    "text": "I'm talking to you and\nyour state changes. I'm looking at you and\nmy state changes.",
    "start": "3516110",
    "end": "3521680"
  },
  {
    "text": "Some of my state variables, a\nvery few of them, therefore, are coupled to yours. If you were to suddenly yell\nvery loud, my blood pressure",
    "start": "3521680",
    "end": "3528470"
  },
  {
    "text": "would go up. ",
    "start": "3528470",
    "end": "3534320"
  },
  {
    "text": "However, and it may not be\nalways appropriate to think about the world as being made\nout of independent states and",
    "start": "3534320",
    "end": "3540360"
  },
  {
    "text": "independent particles. Lots of the bugs that occur in\nthings like quantum mechanics, or the bugs in our minds that\noccur when we think about",
    "start": "3540360",
    "end": "3547660"
  },
  {
    "text": "things like quantum mechanics,\nare due the fact that we are trying to think about things\nbeing broken up into independent pieces, when in\nfact there's more coupling",
    "start": "3547660",
    "end": "3555880"
  },
  {
    "text": "than we see on the surface, or\nthat we want to believe in, because we want to compute\nefficiently and effectively.",
    "start": "3555880",
    "end": "3562300"
  },
  {
    "text": "We've been trained to\nthink that way. ",
    "start": "3562300",
    "end": "3569336"
  },
  {
    "text": "Well, let's see. How would we know if we\nhad objects at all?",
    "start": "3569336",
    "end": "3575140"
  },
  {
    "text": "How can we tell if\nwe have objects? Consider some possible\noptical illusions.",
    "start": "3575140",
    "end": "3581770"
  },
  {
    "text": "This could be done. These pieces of chalk are not\nappropriately identical, but",
    "start": "3581770",
    "end": "3587970"
  },
  {
    "text": "supposing you couldn't tell\nthe difference of them by looking at them. Well, there's a possibility\nthat this all a game I'm",
    "start": "3587970",
    "end": "3594289"
  },
  {
    "text": "playing with mirrors. It's really the same piece\nof chalk, but you're",
    "start": "3594290",
    "end": "3599690"
  },
  {
    "text": "seeing two of them. How would you know if you're\nseeing one or two?",
    "start": "3599690",
    "end": "3605160"
  },
  {
    "text": "Well, there's only\none way I know. You grab one of them and change\nit and see if the other one changed.",
    "start": "3605160",
    "end": "3611360"
  },
  {
    "text": " And it didn't, so there's\ntwo of them. ",
    "start": "3611360",
    "end": "3619069"
  },
  {
    "text": "And, on the other hand, there\nis some other screwy properties of things\nlike that. Like, how do we know if\nsomething changed?",
    "start": "3619070",
    "end": "3625040"
  },
  {
    "text": "We have to look at it before\nand after the change. The change is an assignment,\nit's a moment in time.",
    "start": "3625040",
    "end": "3632200"
  },
  {
    "text": "But that means we have to know\nit was the same one that we're looking at. So some very strange, and\nunusual, and obscure, and--",
    "start": "3632200",
    "end": "3639270"
  },
  {
    "text": "I don't understand the problems\nassociated with assignment, and change,\nand objects.",
    "start": "3639270",
    "end": "3647380"
  },
  {
    "text": "These could get very,\nvery bad. For example, here I am, I am\na particular person, a",
    "start": "3647380",
    "end": "3656250"
  },
  {
    "text": "particular object. Now, I can take out my knife,\nand cut my fingernail.",
    "start": "3656250",
    "end": "3662430"
  },
  {
    "text": "A piece of my fingernail has\nfallen off onto the table. I believe I am the same person\nI was a second ago, but I'm",
    "start": "3662430",
    "end": "3671200"
  },
  {
    "text": "not physically the same\nin the slightest. I have changed. Why am I the same?",
    "start": "3671200",
    "end": "3678180"
  },
  {
    "text": "What is the identity of me? I don't know. ",
    "start": "3678180",
    "end": "3685170"
  },
  {
    "text": "Except for the fact that I have\nsome sort of identity. And so, I think by introducing\nassignment and objects, we",
    "start": "3685170",
    "end": "3694770"
  },
  {
    "text": "have opened ourselves up to all\nthe horrible questions of philosophy that have been\nplaguing philosophers for some",
    "start": "3694770",
    "end": "3700490"
  },
  {
    "text": "thousands of years about\nthis sort of thing. It's why mathematics\nis a lot cleaner.",
    "start": "3700490",
    "end": "3705880"
  },
  {
    "text": "Let's look at the best things\nI know to say about actions and identity. ",
    "start": "3705880",
    "end": "3712500"
  },
  {
    "text": "We say that an action, a, had an\neffect on an object, x, or equivalently, that x was\nchanged by a, if some",
    "start": "3712500",
    "end": "3719340"
  },
  {
    "text": "property, p, which was true\nof x before a, became false of x after a.",
    "start": "3719340",
    "end": "3725099"
  },
  {
    "text": "Let's test. It still means\nI have to have the x before and after.",
    "start": "3725100",
    "end": "3730950"
  },
  {
    "text": "Or, the other way of saying\nthis is, we say that two objects x and y are the same\nfor any action which has an effect on x has the\nsame effect on y.",
    "start": "3730950",
    "end": "3739580"
  },
  {
    "text": "However, objects are very\nuseful, as I said, for intellectual economy.",
    "start": "3739580",
    "end": "3744650"
  },
  {
    "text": "One of the things that's\nincredibly useful about them, is that the world is, we like\nto think about, made out of",
    "start": "3744650",
    "end": "3752980"
  },
  {
    "text": "independent objects with\nindependent local state. We like to think that\nway, although it isn't completely true.",
    "start": "3752980",
    "end": "3759730"
  },
  {
    "text": "When we want to make very\ncomplicated programs that deal with such a world, if we want\nthose programs to be",
    "start": "3759730",
    "end": "3765400"
  },
  {
    "text": "understandable by us and also\nto be changeable, so that if we change the world we change\nthe program only a little bit,",
    "start": "3765400",
    "end": "3771390"
  },
  {
    "text": "then we want there to be\nconnections, isomorphism, between the objects in the world\nand the objects in our mental model.",
    "start": "3771390",
    "end": "3778720"
  },
  {
    "text": "The modularity of the world can\ngive us the modularity in our programming. So we invent things called\nobject-oriented programming",
    "start": "3778720",
    "end": "3784589"
  },
  {
    "text": "and things like that to provide\nus with that power.",
    "start": "3784590",
    "end": "3789950"
  },
  {
    "text": "But it's even easier. Let's play a little game. I want to play a little game,\nshow you an even easier",
    "start": "3789950",
    "end": "3795110"
  },
  {
    "text": "example of where modularity can\nbe enhanced by using an assignment statement,\njudiciously.",
    "start": "3795110",
    "end": "3802960"
  },
  {
    "text": "One thing I want to enforce and\nimpress on you, is don't use assignment statements the\nway you use it in FORTRAN or",
    "start": "3802960",
    "end": "3808280"
  },
  {
    "text": "Basic or something or Pascal,\nto do the things you don't have to do with it. ",
    "start": "3808280",
    "end": "3814200"
  },
  {
    "text": "It's not the right way to\nthink for most things. Sometimes it's essential,\nor maybe it's essential.",
    "start": "3814200",
    "end": "3819810"
  },
  {
    "text": "We'll see more about that too. OK, let me show you\na fun game here. ",
    "start": "3819810",
    "end": "3827270"
  },
  {
    "text": "There was mathematician by\nthe name of Cesaro-- or Cesaro, Cesaro I\nsuppose it is--",
    "start": "3827270",
    "end": "3834760"
  },
  {
    "text": "who figured out a clever\nway of computing pi. It turns out that if I take to\nrandom numbers, two integers",
    "start": "3834760",
    "end": "3846320"
  },
  {
    "text": "at random, and compute the\ngreatest common divisor, their greatest common divisor is\neither one or it's not one.",
    "start": "3846320",
    "end": "3853920"
  },
  {
    "text": "If it's one, then they have\nno common divisors.  If their greatest common\ndivisor is one--",
    "start": "3853920",
    "end": "3861060"
  },
  {
    "text": "the probability that two random\nnumbers, two numbers chosen at random, has as\ngreatest common divisor one is",
    "start": "3861060",
    "end": "3866910"
  },
  {
    "text": "related to pi. In fact-- yes, it's very strange--",
    "start": "3866910",
    "end": "3873070"
  },
  {
    "text": "of course there are other ways\nof computing pi, like dropping pins on flags, and things like\nthat, and sort of the same",
    "start": "3873070",
    "end": "3878100"
  },
  {
    "text": "kind of thing. So the probability of that the\nGCD of number one and number",
    "start": "3878100",
    "end": "3888510"
  },
  {
    "text": "two, two random numbers chosen,\nis 6 over pi squared.",
    "start": "3888510",
    "end": "3895660"
  },
  {
    "text": "I'm not going to try\nto prove that. It's actually not too hard\nand sort of fun.",
    "start": "3895660",
    "end": "3901119"
  },
  {
    "text": "How would we estimate\nsuch probability? Well, the way we do that, the\nway we estimate probabilities,",
    "start": "3901120",
    "end": "3907340"
  },
  {
    "text": "is by doing lots of experiments,\nand then computing the ratios of the ones\nthat come out one way to the total number of\nexperiments we do.",
    "start": "3907340",
    "end": "3913570"
  },
  {
    "text": " It's called Monte Carlo, and\nit's useful in other contexts",
    "start": "3913570",
    "end": "3919680"
  },
  {
    "text": "for doing things like integrals\nwhere you have lots and lots of variables-- the space which is limiting the\ndimensions you are doing",
    "start": "3919680",
    "end": "3924780"
  },
  {
    "text": "you integral in. But going back to here, Let's\nlook at this slide, We can use",
    "start": "3924780",
    "end": "3934680"
  },
  {
    "text": "Cesaro's method for estimating\npi with n trials by taking the",
    "start": "3934680",
    "end": "3940520"
  },
  {
    "text": "square root of six over a Monte\nCarlo, a Monte Carlo",
    "start": "3940520",
    "end": "3945850"
  },
  {
    "text": "experiment with n trials, using\nCesaro's experiment,",
    "start": "3945850",
    "end": "3951410"
  },
  {
    "text": "where Cesaro's experiment is the\ntest of whether the GCD of",
    "start": "3951410",
    "end": "3956549"
  },
  {
    "text": "two random numbers-- And you can see that I've\nalready got some assignments in here, just by what I wrote.",
    "start": "3956550",
    "end": "3963990"
  },
  {
    "text": "The fact that this word rand,\nin parentheses, therefore, that procedure call, yields a\ndifferent value than this one,",
    "start": "3963990",
    "end": "3971530"
  },
  {
    "text": "at least that's what I'm\nassuming by writing this this way, indicates that this is not\na function, that there's",
    "start": "3971530",
    "end": "3978590"
  },
  {
    "text": "internal state in it\nwhich is changing. ",
    "start": "3978590",
    "end": "3985109"
  },
  {
    "text": "If the GCD of those two random\nnumbers is equal to one, that's the experiment.",
    "start": "3985110",
    "end": "3991530"
  },
  {
    "text": "So here I have an experimental\nmethod for estimating the value of pi.",
    "start": "3991530",
    "end": "3996560"
  },
  {
    "text": "Where, I can easily divide this\nproblem into two parts. One is the specific Monte Carlo\nexperiment of Cesaro,",
    "start": "3996560",
    "end": "4003609"
  },
  {
    "text": "which you just saw, and the\nother is the general technique of doing Monte Carlo\nexperiments.",
    "start": "4003610",
    "end": "4009320"
  },
  {
    "text": "And that's what this is. If I want to do Monte Carlo\nexperiments with n trials, a",
    "start": "4009320",
    "end": "4015930"
  },
  {
    "text": "certain number of trials, and\na particular experiment, the way I do that is I make a little\niterative procedure",
    "start": "4015930",
    "end": "4023460"
  },
  {
    "text": "which has variable the number\nof trials remaining and the number trials that have been\npassed, that I've gotten true.",
    "start": "4023460",
    "end": "4030230"
  },
  {
    "text": "And if the number remaining is\n0, then the answer is the number past divided by this\nwhole number of trials, was",
    "start": "4030230",
    "end": "4036260"
  },
  {
    "text": "the estimate of the\nprobability. And if it's not, if I have\nmore trials to do,",
    "start": "4036260",
    "end": "4042140"
  },
  {
    "text": "then let's do one. We do an experiment. We call the procedure which is\nexperiment on no arguments.",
    "start": "4042140",
    "end": "4047350"
  },
  {
    "text": "We do the experiment and then,\nif that turned out to be true, we go around the loop\ndecrementing the number of",
    "start": "4047350",
    "end": "4053830"
  },
  {
    "text": "experiments we have to do by\none and incrementing the number that were passed. And if the experiment was false,\nwe just go around the",
    "start": "4053830",
    "end": "4061880"
  },
  {
    "text": "loop decrementing the number of\nexperiments remaining and keeping the number\npassed the same.",
    "start": "4061880",
    "end": "4068910"
  },
  {
    "text": "We start this up iterating\nover the total number of trials with 0 experiments\npast. A very",
    "start": "4068910",
    "end": "4075840"
  },
  {
    "text": "elegant little program. And I don't have to just do this\nwith Cesaro's experiment, it could be lots of Monte Carlo\nexperiments I might do.",
    "start": "4075840",
    "end": "4083390"
  },
  {
    "text": "Of course, this depends upon the\nexistence of some sort of random number generator. And random number generators\ngenerally look",
    "start": "4083390",
    "end": "4089960"
  },
  {
    "text": "something like this.  There is a random number\ngenerator--",
    "start": "4089960",
    "end": "4097549"
  },
  {
    "text": "is in fact a procedure which is\ngoing to do something just",
    "start": "4097550",
    "end": "4104489"
  },
  {
    "text": "like the counter. It's going to update an x to\nthe result of applying some",
    "start": "4104490",
    "end": "4110870"
  },
  {
    "text": "function to x, where this\nfunction is some screwy kind of function that you might find\nout in Knuth's books on",
    "start": "4110870",
    "end": "4118799"
  },
  {
    "text": "the details of programming. He does these wonderful books\nthat are full of the details",
    "start": "4118800",
    "end": "4125020"
  },
  {
    "text": "of programming, because I can't\nremember how to make a random number generator, but I\ncan look it up there, and I",
    "start": "4125020",
    "end": "4130155"
  },
  {
    "text": "can find out. And then, eventually, I return\nthe value of x which is the state variable internal to the\nrandom number generator.",
    "start": "4130156",
    "end": "4138318"
  },
  {
    "text": "That state variable\nis initialized somehow, and has a value.",
    "start": "4138319",
    "end": "4143479"
  },
  {
    "text": "And this procedure is defined\nin the context where that variable is bound.",
    "start": "4143479",
    "end": "4150450"
  },
  {
    "text": "So this is a hidden piece of\nlocal state that you see here.",
    "start": "4150450",
    "end": "4155930"
  },
  {
    "text": "And this procedure is defined\nin that context.",
    "start": "4155930",
    "end": "4161720"
  },
  {
    "text": "Now, that's a very simple\nthing to do. And it's very nice. Supposing, I didn't want\nto use assignments.",
    "start": "4161720",
    "end": "4169080"
  },
  {
    "text": "Supposing, I wanted to write\nthis program without assignments. What problems would I have?",
    "start": "4169080",
    "end": "4175580"
  },
  {
    "text": "Well, let's see. I'd like to use the overhead\nmachine here, thank you.",
    "start": "4175580",
    "end": "4184540"
  },
  {
    "text": "First of all, let's look\nat the whole thing. It's a big story. Unfortunately, which tells you\nthere is something wrong.",
    "start": "4184540",
    "end": "4191720"
  },
  {
    "text": "It's at least that big,\nand it's monolithic. ",
    "start": "4191720",
    "end": "4197020"
  },
  {
    "text": "You don't have to understand\nor look at the text there right now to see that\nit's monolithic.",
    "start": "4197020",
    "end": "4202120"
  },
  {
    "text": "It isn't a thing which is\nCesaro's experiment. It's not pulled out from the\nMonte Carlo process.",
    "start": "4202120",
    "end": "4210050"
  },
  {
    "text": "It's not separated. Let's look why.  Remember, the constraint here is\nthat every procedure return",
    "start": "4210050",
    "end": "4219330"
  },
  {
    "text": "the same value for the\nsame arguments. Every procedure represents\na function.",
    "start": "4219330",
    "end": "4226800"
  },
  {
    "text": "That's a different kind\nof constraint. Because when I have assignments,\nI can change some internal state variable.",
    "start": "4226800",
    "end": "4231840"
  },
  {
    "text": "So let's see how that causes\nthings to go wrong. Well, start at the beginning.",
    "start": "4231840",
    "end": "4238510"
  },
  {
    "text": "The estimate of pi looks\nsort of the same. What I'm doing is I take the\nsquare root of six over the",
    "start": "4238510",
    "end": "4247560"
  },
  {
    "text": "random GCD test applied to n,\nwhereas that's what this is.",
    "start": "4247560",
    "end": "4252990"
  },
  {
    "text": "But here, we are beginning\nto see something funny. The random GCD test of a certain\nnumber of trials is",
    "start": "4252990",
    "end": "4258770"
  },
  {
    "text": "just like we had before, an\niteration on the number of trials remaining, the number\nof trials that have been",
    "start": "4258770",
    "end": "4266210"
  },
  {
    "text": "passed, and another\nvariable x. What's that x?",
    "start": "4266210",
    "end": "4272370"
  },
  {
    "text": "That x is the state of the\nrandom number generator. ",
    "start": "4272370",
    "end": "4278950"
  },
  {
    "text": "And it is now going\nto be used here. The same random update function\nthat I have over here is the one I would have used in\na random number generator",
    "start": "4278950",
    "end": "4285890"
  },
  {
    "text": "if I were building it the other\nway, the one I get out of Knuth's books.",
    "start": "4285890",
    "end": "4291710"
  },
  {
    "text": "x is going to get transformed\ninto x1, I need two random numbers. And x1 is going to get\ntransformed into x2, I have",
    "start": "4291710",
    "end": "4297630"
  },
  {
    "text": "two random numbers. I then have to do exactly\nwhat I did before. I take the GCD of x1 x2.",
    "start": "4297630",
    "end": "4303870"
  },
  {
    "text": "If that's one, then I go around\nthe loop with x2 being the next value of x.",
    "start": "4303870",
    "end": "4309519"
  },
  {
    "start": "4309520",
    "end": "4314850"
  },
  {
    "text": "You see what's happened here\nis that the state of the random number generator is no\nlonger confined to the insides",
    "start": "4314850",
    "end": "4320480"
  },
  {
    "text": "of the random number\ngenerator. It has leaked out. It has leaked out into my\nprocedure that does the Monte",
    "start": "4320480",
    "end": "4329240"
  },
  {
    "text": "Carlo experiment. But what's worse than that, is\nit's also, because it was contained inside my experiment\nitself, Cesaro, it leaked out",
    "start": "4329240",
    "end": "4337470"
  },
  {
    "text": "of that too. Because Cesaro called twice, has\nto have a different value each time, if I going to have\na legitimate experimental",
    "start": "4337470",
    "end": "4344780"
  },
  {
    "text": "test. So Cesaro can't be a\nfunction either, unless I pass",
    "start": "4344780",
    "end": "4351909"
  },
  {
    "text": "it the seed of the random number\ngenerator that is going to go wandering around. So unfortunately, the seed of\nrandom number generator has",
    "start": "4351910",
    "end": "4359740"
  },
  {
    "text": "leaked out into Cesaro, from the\nrandom number generator, that's leaked into the Monte\nCarlo experiment.",
    "start": "4359740",
    "end": "4365465"
  },
  {
    "text": "And, unfortunately, my Monte\nCarlo experiment here is no longer general. The Monte Carlo experiment here\nknows how many random",
    "start": "4365465",
    "end": "4372990"
  },
  {
    "text": "numbers I need to do\nthe experiment. ",
    "start": "4372990",
    "end": "4378530"
  },
  {
    "text": "That's sort of horrible. I lost an ability to decompose a\nproblem into pieces, because",
    "start": "4378530",
    "end": "4384090"
  },
  {
    "text": "I wasn't willing to accept the\nlittle loop of information,",
    "start": "4384090",
    "end": "4390719"
  },
  {
    "text": "the feedback process, that\nhappens inside the random number generator before that\nwas made by having an",
    "start": "4390720",
    "end": "4398000"
  },
  {
    "text": "assignment to a state variable\nthat was confined to the random number generator. So the fact that the random\nnumber generator is an object,",
    "start": "4398000",
    "end": "4406070"
  },
  {
    "text": "with an internal state variable,\nit's affected by nothing, but it'll give you\nsomething, and it will apply it's force to you, that was\nwhat we're missing now.",
    "start": "4406070",
    "end": "4414290"
  },
  {
    "text": " OK, well I think we've seen\nenough reason for doing this,",
    "start": "4414290",
    "end": "4422870"
  },
  {
    "text": "and it all sort of looks\nvery wonderful. Wouldn't it be nice if\nassignment was a good thing",
    "start": "4422870",
    "end": "4431840"
  },
  {
    "text": "and maybe it's worth it,\nbut I'm not sure. As Mr. Gilbert and Sullivan\nsaid, things are seldom what",
    "start": "4431840",
    "end": "4437860"
  },
  {
    "text": "they seem, skim milk masquerades\nas cream. Are there any questions?",
    "start": "4437860",
    "end": "4443655"
  },
  {
    "start": "4443655",
    "end": "4457010"
  },
  {
    "text": "Are there any philosophers\nhere? Anybody want to argue\nabout objects? ",
    "start": "4457010",
    "end": "4464590"
  },
  {
    "text": "You're just floored, right? ",
    "start": "4464590",
    "end": "4469840"
  },
  {
    "text": "And you haven't done\nyour homework yet. You haven't come up with\na good question. ",
    "start": "4469840",
    "end": "4476790"
  },
  {
    "text": "Oh, well.  Sure, thank you. Let's take the long break now.",
    "start": "4476790",
    "end": "4482370"
  },
  {
    "start": "4482370",
    "end": "4517567"
  }
]