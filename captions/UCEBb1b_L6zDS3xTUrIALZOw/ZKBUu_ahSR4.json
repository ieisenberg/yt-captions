[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6840"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6840",
    "end": "13389"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13390",
    "end": "21470"
  },
  {
    "text": "PROFESSOR: OK. I want to start where\nwe left off. You remember last time we were\nlooking at Fibonacci.",
    "start": "21470",
    "end": "30199"
  },
  {
    "text": "And so we've got it up here,\na nice little recursive implementation of it. And the thing I wanted to point\nout is, we've got this",
    "start": "30200",
    "end": "40110"
  },
  {
    "text": "global variable number\nof calls. Which is there not because\nFibonacci needs it but just",
    "start": "40110",
    "end": "47210"
  },
  {
    "text": "for pedagogical reasons, so that\nwe can keep track of how much work this thing is doing.",
    "start": "47210",
    "end": "53180"
  },
  {
    "text": "And I've turned on a print\nstatement which was off last time. So we can see what it's\ndoing is it runs.",
    "start": "53180",
    "end": "61120"
  },
  {
    "text": "So let's try it here\nwith Fib of 6.",
    "start": "61120",
    "end": "78200"
  },
  {
    "text": "So, as we would hope, Fib\nof 6 happens to be 8.",
    "start": "78200",
    "end": "85210"
  },
  {
    "text": "That right? That right, everybody?",
    "start": "85210",
    "end": "90290"
  },
  {
    "text": "Should Fib of 6 be 8? I don't think so.",
    "start": "90290",
    "end": "98270"
  },
  {
    "text": "So first thing we should do is\nscratch our heads and see what's going on here.",
    "start": "98270",
    "end": "108710"
  },
  {
    "text": "Alright, let's look at it. What's happening here?",
    "start": "108710",
    "end": "117100"
  },
  {
    "text": "This is your morning\nwake-up call.",
    "start": "117100",
    "end": "124869"
  },
  {
    "text": "What is happening?",
    "start": "124870",
    "end": "133170"
  },
  {
    "text": "Yes. STUDENT: [INAUDIBLE]",
    "start": "133170",
    "end": "142840"
  },
  {
    "text": "PROFESSOR: See if I can get it\nall the way to the back. No I can't. That's embarrassing.",
    "start": "142840",
    "end": "148270"
  },
  {
    "text": "Alright. So if n is less than or\nequal to 1, return n.",
    "start": "148270",
    "end": "154330"
  },
  {
    "text": "Well that's not right, right? What should I be doing there?",
    "start": "154330",
    "end": "164360"
  },
  {
    "text": "Because Fib of 0 is? What?",
    "start": "164360",
    "end": "169680"
  },
  {
    "text": "1. So let's fix it.",
    "start": "169680",
    "end": "192250"
  },
  {
    "text": "How about that, right? Or maybe, what would be even\nsimpler than that?",
    "start": "192250",
    "end": "200219"
  },
  {
    "text": "Maybe I should just do that. Now let's try it.",
    "start": "200220",
    "end": "211620"
  },
  {
    "text": "We feel better about this?",
    "start": "211620",
    "end": "216760"
  },
  {
    "text": "We like that answer? Yes, no?",
    "start": "216760",
    "end": "226330"
  },
  {
    "text": "What's the answer, guys? What should Fibonacci of 6 be?",
    "start": "226330",
    "end": "231849"
  },
  {
    "text": "I think that's the right\nanswer, right? OK.",
    "start": "231850",
    "end": "238520"
  },
  {
    "text": "So what do I want you to\nnotice about this? I've computed a value\nwhich is 13.",
    "start": "238520",
    "end": "247099"
  },
  {
    "text": "And it's taken me 25 calls. 25 recursive calls\nto get there.",
    "start": "247100",
    "end": "254400"
  },
  {
    "text": "Why is it taking so many? Well, what we can see here is\nthat I'm computing the same",
    "start": "254400",
    "end": "262639"
  },
  {
    "text": "value over and over again. Because if we look at the\nrecursive structure of the",
    "start": "262640",
    "end": "268560"
  },
  {
    "text": "program, what we'll see that's\ngoing on here is, I call Fib",
    "start": "268560",
    "end": "280880"
  },
  {
    "text": "of 5 and 4, but then Fib\nof 5 is also going",
    "start": "280880",
    "end": "287280"
  },
  {
    "text": "to call Fib of 4. So I'm going to be computing\nit on those branches.",
    "start": "287280",
    "end": "294210"
  },
  {
    "text": "And then it gets worse and\nworse as I go down. So if I think about computing\nFib of 0 I'm going to be",
    "start": "294210",
    "end": "302090"
  },
  {
    "text": "computing that a lot of times. Now, fortunately, Fib\nof 0 is short.",
    "start": "302090",
    "end": "307710"
  },
  {
    "text": "But the other ones\nare not so short. And so what I see is that as I\nrun this, I'm doing a lot of",
    "start": "307710",
    "end": "315930"
  },
  {
    "text": "redundant computation. Computing values whose answer\nI should already know.",
    "start": "315930",
    "end": "328140"
  },
  {
    "text": "That's, you'll remember last\ntime, I talked about the notion of overlapping\nsub-problems. And that's what",
    "start": "328140",
    "end": "336910"
  },
  {
    "text": "we have here. As with many recursive\nalgorithms, I solve a bigger",
    "start": "336910",
    "end": "345210"
  },
  {
    "text": "problem by solving a\nsmaller instance of the original problem.",
    "start": "345210",
    "end": "350940"
  },
  {
    "text": "But here there's overlap. The instant unlike binary\nsearch, where each instance",
    "start": "350940",
    "end": "356750"
  },
  {
    "text": "was separate, here the\ninstances overlap. They share something\nin common.",
    "start": "356750",
    "end": "363910"
  },
  {
    "text": "In fact, they share quite\na lot in common. That's not unusual.",
    "start": "363910",
    "end": "372030"
  },
  {
    "text": "That will lead me to use a\ntechnique I mentioned again last time, called memoization.",
    "start": "372030",
    "end": "384599"
  },
  {
    "text": "Effectively, what that says\nis, we record a value the",
    "start": "384600",
    "end": "395970"
  },
  {
    "text": "first time it's computed, then\nlook it up the subsequent",
    "start": "395970",
    "end": "410520"
  },
  {
    "text": "times we need it.",
    "start": "410520",
    "end": "416300"
  },
  {
    "text": "So it makes sense. If I know I'm going to need\nsomething over and over again, I squirrel it away somewhere\nand then get it",
    "start": "416300",
    "end": "423470"
  },
  {
    "text": "back when I need it. So let's look at an\nexample of that.",
    "start": "423470",
    "end": "445750"
  },
  {
    "text": "So I'm going to have something\ncalled fast Fib.",
    "start": "445750",
    "end": "454860"
  },
  {
    "text": "But first I'm going to have,\nlet's look at what fast Fib does and then we'll come back\nto the next question.",
    "start": "454860",
    "end": "461450"
  },
  {
    "text": "It takes the number whose\nFibonacci I want plus a memo.",
    "start": "461450",
    "end": "470610"
  },
  {
    "text": "And the memo will be a\ndictionary that maps me from a",
    "start": "470610",
    "end": "476330"
  },
  {
    "text": "number to Fib of that number.",
    "start": "476330",
    "end": "485479"
  },
  {
    "text": "So what I'm going to do, well,\nlet's get rid of this print statement for now.",
    "start": "485480",
    "end": "493020"
  },
  {
    "text": "I'm going to say, if\nn is not in memo.",
    "start": "493020",
    "end": "499259"
  },
  {
    "text": "Remember the way dictionary\nworks, this is the key. Is the key of a value.",
    "start": "499260",
    "end": "505630"
  },
  {
    "text": "Then I'll call fast Fib\nrecursively, with n minus 1 in",
    "start": "505630",
    "end": "511070"
  },
  {
    "text": "memo, and n minus 2 in memo.",
    "start": "511070",
    "end": "518409"
  },
  {
    "text": "Otherwise I'll return\nthe memo. Well, let's look at\nit for a second.",
    "start": "518410",
    "end": "524690"
  },
  {
    "text": "This is the basic idea. But do we actually believe\nthis is going to work?",
    "start": "524690",
    "end": "531290"
  },
  {
    "text": "And, again, I want you to look\nat this and think about what's going to happen here.",
    "start": "531290",
    "end": "536310"
  },
  {
    "text": "Before we do that, or as you do\nthat, let's look at Fib 1.",
    "start": "536310",
    "end": "542270"
  },
  {
    "text": "The key thing to notice about\nFib 1 is that it has the same",
    "start": "542270",
    "end": "547780"
  },
  {
    "text": "specification as Fib.",
    "start": "547780",
    "end": "552900"
  },
  {
    "text": "Because when somebody calls\nFibonacci, they shouldn't worry about memos.",
    "start": "552900",
    "end": "559050"
  },
  {
    "text": "And how I'd implemented it. That has to be under\nthe covers. So I don't want them\nto have to call",
    "start": "559050",
    "end": "565650"
  },
  {
    "text": "something with two arguments. The integer and the memo. So I'll create Fib 1, which has\nthe same arguments as Fib.",
    "start": "565650",
    "end": "577199"
  },
  {
    "text": "The first thing it does is\nit initializes the memo.",
    "start": "577200",
    "end": "583790"
  },
  {
    "text": "And initializes it by saying,\nif I get 0 I -- whoops. Aha.",
    "start": "583790",
    "end": "590410"
  },
  {
    "text": "Let's be careful here.",
    "start": "590410",
    "end": "596250"
  },
  {
    "text": "If I get 0 I return 1. I get 1, I return 1. So I put two things in\nthe memo already.",
    "start": "596250",
    "end": "606509"
  },
  {
    "text": "And then I'll call fast\nFib and it returns the result it has.",
    "start": "606510",
    "end": "615800"
  },
  {
    "text": "So you see the basic idea. I take something with the same\nparameters as the original.",
    "start": "615800",
    "end": "622450"
  },
  {
    "text": "Add this memo. Give it some initial values. And then call.",
    "start": "622450",
    "end": "630230"
  },
  {
    "text": "So now what do we think? Is this going to work?",
    "start": "630230",
    "end": "638190"
  },
  {
    "text": "Or is there an issue here? What do you think?",
    "start": "638190",
    "end": "643740"
  },
  {
    "text": "Think it through. If it's not in the memo, I'll\ncompute its value and put it",
    "start": "643740",
    "end": "651400"
  },
  {
    "text": "in the memo. And then I'll return it. OK?",
    "start": "651400",
    "end": "656990"
  },
  {
    "text": "If it was already there,\nI just look it up. That make sense to everybody?",
    "start": "656990",
    "end": "664050"
  },
  {
    "text": "Let's see what happens\nif we run it.",
    "start": "664050",
    "end": "680720"
  },
  {
    "text": "Well, actually, let's turn the\nprint statement on, since we're doing it with a\nsmall value here.",
    "start": "680720",
    "end": "692399"
  },
  {
    "text": "So what we've seen is I've\nrun it twice here.",
    "start": "692400",
    "end": "698060"
  },
  {
    "text": "When I ran it up here, with the\nold Fib, and we printed the result, and I ran it\nwith Fib 1 down here.",
    "start": "698060",
    "end": "707240"
  },
  {
    "text": "The good news is we\ngot 13 both times.",
    "start": "707240",
    "end": "712779"
  },
  {
    "text": "The even better news is that\ninstead of 25 calls, it was",
    "start": "712780",
    "end": "718470"
  },
  {
    "text": "only 11 calls.",
    "start": "718470",
    "end": "725480"
  },
  {
    "text": "So it's a big improvement. Let's see what happens, just to\nget an idea of how big the",
    "start": "725480",
    "end": "733560"
  },
  {
    "text": "improvement is. I'm going to take out the\ntwo print statements.",
    "start": "733560",
    "end": "743300"
  },
  {
    "text": "And let's try it with\na bigger number.",
    "start": "743300",
    "end": "759339"
  },
  {
    "text": "It's going to take\na little bit. Well, look at this difference.",
    "start": "759340",
    "end": "766630"
  },
  {
    "text": "It's 2,692,537 versus 59.",
    "start": "766630",
    "end": "774890"
  },
  {
    "text": "That's a pretty darn\nbig difference.",
    "start": "774890",
    "end": "780660"
  },
  {
    "text": "And I won't ask you to\ncheck whether it got the right answer. At least, not in your heads.",
    "start": "780660",
    "end": "787600"
  },
  {
    "text": "So you can see, and this is an\nimportant thing we look at, is that as we look at growth, it\ndidn't look like it mattered a",
    "start": "787600",
    "end": "794850"
  },
  {
    "text": "lot with 6. Because it was one small\nnumber to one slightly smaller number. But this thing grows\nexponentially.",
    "start": "794850",
    "end": "804140"
  },
  {
    "text": "It's a little bit complicated\nexactly how. But you can see as I go up to 30\nI get a pretty big number.",
    "start": "804140",
    "end": "811700"
  },
  {
    "text": "And 59 is a pretty\nsmall number. So we see that the memoization\nhere is buying me",
    "start": "811700",
    "end": "819550"
  },
  {
    "text": "a tremendous advantage. And this is what lies at the\nheart of this very general",
    "start": "819550",
    "end": "826880"
  },
  {
    "text": "technique called dynamic\nprogramming. And in fact, it lies at the\nheart of a lot of useful",
    "start": "826880",
    "end": "834420"
  },
  {
    "text": "computational techniques\nwhere we save results.",
    "start": "834420",
    "end": "840190"
  },
  {
    "text": "So if you think about the way\nsomething like, say, Mapquest works, and last week in\nrecitation you looked at the",
    "start": "840190",
    "end": "847709"
  },
  {
    "text": "fact that shortest path\nis exponential. Well, what it does is it\nsaves a lot of paths.",
    "start": "847710",
    "end": "856030"
  },
  {
    "text": "It kind of knows people are\ngoing to ask how do you get from Boston to New York City.",
    "start": "856030",
    "end": "861730"
  },
  {
    "text": "And it may have saved that. And if you're going from Boston\nto someplace else where",
    "start": "861730",
    "end": "866980"
  },
  {
    "text": "New York just happens to be on\nthe way, it doesn't have to recompute that part of it.",
    "start": "866980",
    "end": "872600"
  },
  {
    "text": "So it's saved a lot of things\nand squirreled them away. And that's essentially what\nwe're doing here.",
    "start": "872600",
    "end": "878560"
  },
  {
    "text": "Here we're doing it as part\nof one algorithm. There, they're just storing a\ndatabase of previously solved",
    "start": "878560",
    "end": "884400"
  },
  {
    "text": "problems. And relying on\nsomething called table lookup,",
    "start": "884400",
    "end": "891510"
  },
  {
    "text": "Of which memoization\nis a special case.",
    "start": "891510",
    "end": "897860"
  },
  {
    "text": "But table lookup\nis very common. When you do something\ncomplicated you save the answers and then you\ngo get it later.",
    "start": "897860",
    "end": "906240"
  },
  {
    "text": "I should add that in some\nsense this is a phony",
    "start": "906240",
    "end": "913330"
  },
  {
    "text": "straw-man Fibonacci. Nobody in their right mind\nactually implements a",
    "start": "913330",
    "end": "918710"
  },
  {
    "text": "recursive Fibonacci the way\nI did it originally. Because the right way to\ndo it is iteratively.",
    "start": "918710",
    "end": "924690"
  },
  {
    "text": "And the right way to do it is\nnot starting at the top, it's starting at the bottom. And so you can piece it\ntogether that way.",
    "start": "924690",
    "end": "931400"
  },
  {
    "text": "But don't worry about it, it's\nnot, I'm just using it because it's a simpler example than the\none I really want to get",
    "start": "931400",
    "end": "938339"
  },
  {
    "text": "to, which is knapsack. OK, people get this?",
    "start": "938340",
    "end": "944600"
  },
  {
    "text": "And see the basic idea and\nwhy it's wonderful?",
    "start": "944600",
    "end": "950560"
  },
  {
    "text": "Alright. Now, when we talked about\noptimization problems in",
    "start": "950560",
    "end": "955910"
  },
  {
    "text": "dynamic programming, I\nsaid there were two things to look for.",
    "start": "955910",
    "end": "962710"
  },
  {
    "text": "One was overlapping\nsub-problems. And the other one was optimal substructure.",
    "start": "962710",
    "end": "977769"
  },
  {
    "text": "The notion here is that you\ncan get a globally optimal solution from locally optimal\nsolutions to sub-problems.",
    "start": "977770",
    "end": "1016190"
  },
  {
    "text": "This is not true of all\nproblems. But as we'll see,",
    "start": "1016190",
    "end": "1024900"
  },
  {
    "text": "it's true of a lot of problems.\nAnd when you have an optimal substructure and the\nlocal solutions overlap,",
    "start": "1024900",
    "end": "1035319"
  },
  {
    "text": "that's when you can bring\ndynamic programming to bear. So when you're trying to think\nabout is this a problem that I",
    "start": "1035320",
    "end": "1041980"
  },
  {
    "text": "can solve with dynamic\nprogramming, these are the two questions you ask.",
    "start": "1041980",
    "end": "1049480"
  },
  {
    "text": "Let's now go back and\ninstantiate these ideas for the knapsack problem we\nlooked at last time.",
    "start": "1049480",
    "end": "1055870"
  },
  {
    "text": "In particular, for the\n0-1 knapsack problem.",
    "start": "1055870",
    "end": "1062940"
  },
  {
    "text": "So, we have a collection\nof objects. We'll call it a.",
    "start": "1062940",
    "end": "1070900"
  },
  {
    "text": "And for each object in\n0, we have a value. In a, we have a value.",
    "start": "1070900",
    "end": "1077850"
  },
  {
    "text": "And now we want to find the\nsubset of a that has the maximum value, subject to\nthe weight constraint.",
    "start": "1077850",
    "end": "1086290"
  },
  {
    "text": "I'm just repeating\nthe problem. Now, what we saw last\ntime is there's",
    "start": "1086290",
    "end": "1091600"
  },
  {
    "text": "a brute force solution. As you have discovered in recent\nproblem set, it is",
    "start": "1091600",
    "end": "1098610"
  },
  {
    "text": "possible to construct all\nsubsets of a set. And so you could construct all\nsubsets, check that the weight",
    "start": "1098610",
    "end": "1108530"
  },
  {
    "text": "is less than the weight of the\nknapsack, and then choose the subset with the maximum value.",
    "start": "1108530",
    "end": "1113790"
  },
  {
    "text": "Or a subset with the maximum\nvalue, there may be more than one, and you're done.",
    "start": "1113790",
    "end": "1120910"
  },
  {
    "text": "On the other hand, we've seen\nthat if the size of a is n,",
    "start": "1120910",
    "end": "1129810"
  },
  {
    "text": "that's to say, we have n\nelements to choose from, then the number of possible subsets\nis 2 to the n.",
    "start": "1129810",
    "end": "1138230"
  },
  {
    "text": "Remember, we saw that\nlast time looking at the binary numbers.",
    "start": "1138230",
    "end": "1143669"
  },
  {
    "text": "2 to the n is a big number. And maybe we don't have to\nconsider them all, because we",
    "start": "1143670",
    "end": "1149840"
  },
  {
    "text": "can say, oh this one is going\nto be way too big. It's going to weigh too much,\nwe don't need to look at it.",
    "start": "1149840",
    "end": "1155510"
  },
  {
    "text": "But it'll still be\norder 2 to the n. If n is something like 50, not a\nbig number, 2 to the 50 is a",
    "start": "1155510",
    "end": "1165220"
  },
  {
    "text": "huge number.",
    "start": "1165220",
    "end": "1171549"
  },
  {
    "text": "So let's ask, is there\nan optimal substructure to this problem.",
    "start": "1171550",
    "end": "1176960"
  },
  {
    "text": "That would let us tackle it\nwith dynamic programming.",
    "start": "1176960",
    "end": "1183159"
  },
  {
    "text": "And we're going to do this\ninitially by looking at a straightforward implementation\nbased upon what's called the",
    "start": "1183160",
    "end": "1192700"
  },
  {
    "text": "decision tree.",
    "start": "1192700",
    "end": "1201700"
  },
  {
    "text": "This is a very important\nconcept, and we'll see a lot of algorithms essentially\nimplement decision trees.",
    "start": "1201700",
    "end": "1210570"
  },
  {
    "text": "Let's look at an example. Let's assume that the weights,\nand I'll try a really small",
    "start": "1210570",
    "end": "1216470"
  },
  {
    "text": "example to start with, are 5,\n3 and 2, and the values,",
    "start": "1216470",
    "end": "1224980"
  },
  {
    "text": "corresponding values,\nare 9, 7 and 8.",
    "start": "1224980",
    "end": "1231940"
  },
  {
    "text": "And the maximum, we'll\nsay, is 5.",
    "start": "1231940",
    "end": "1239460"
  },
  {
    "text": "So what we do is, we start by\nconsidering for each item",
    "start": "1239460",
    "end": "1245440"
  },
  {
    "text": "whether to take it or not. For reasons that will become\napparent when we implement it",
    "start": "1245440",
    "end": "1250850"
  },
  {
    "text": "in code, I'm going to\nstart at the back. The last element in the list.\nAnd what I'm going to use is",
    "start": "1250850",
    "end": "1261350"
  },
  {
    "text": "the index of that element to\nkeep track of where I am. So I'm not going to worry\nwhether this item is a vase or",
    "start": "1261350",
    "end": "1268450"
  },
  {
    "text": "a watch or painting. I'm just going to say it's\nthe n'th element. Where n'th is somewhere between\n0 and 2 in this case.",
    "start": "1268450",
    "end": "1279700"
  },
  {
    "text": "And then we'll construct our\ntree as follows: each node,",
    "start": "1279700",
    "end": "1286130"
  },
  {
    "text": "well, let me put an\nexample here. The first node will be the\nto-pull 2, 5 and 0.",
    "start": "1286130",
    "end": "1300900"
  },
  {
    "text": "Standing for, let me make sure I\nget this in the right order,",
    "start": "1300900",
    "end": "1306850"
  },
  {
    "text": "well, the index which is 2, the\nlast element in this case,",
    "start": "1306850",
    "end": "1319539"
  },
  {
    "text": "so that's the index. This is the weight\nstill available.",
    "start": "1319540",
    "end": "1329120"
  },
  {
    "text": "If you see that in the shadow. And this is the value\ncurrently obtained.",
    "start": "1329120",
    "end": "1337650"
  },
  {
    "text": "So I haven't included\nanything. Means I have all\n5 pounds left.",
    "start": "1337650",
    "end": "1343560"
  },
  {
    "text": "But I don't have anything\nof value. Now, the decision tree,\nif I branch left,",
    "start": "1343560",
    "end": "1352690"
  },
  {
    "text": "it's a binary tree. This is going to\nbe don't take.",
    "start": "1352690",
    "end": "1362280"
  },
  {
    "text": "So I'm not going to take the\nitem with an index of 2.",
    "start": "1362280",
    "end": "1368790"
  },
  {
    "text": "So that means this node will\nhave an index of 1.",
    "start": "1368790",
    "end": "1378700"
  },
  {
    "text": "Next item to be considered, I\nstill have 5 pounds available.",
    "start": "1378700",
    "end": "1385220"
  },
  {
    "text": "And I have 0 value.",
    "start": "1385220",
    "end": "1394830"
  },
  {
    "text": "To be systematic, I'm going to\nbuild this tree depth-first",
    "start": "1394830",
    "end": "1405309"
  },
  {
    "text": "left-first. At each node, I'm\ngoing to go left until I can't",
    "start": "1405310",
    "end": "1416680"
  },
  {
    "text": "go any further. So we'll take another don't-take\nbranch here.",
    "start": "1416680",
    "end": "1426340"
  },
  {
    "text": "And what is this node\ngoing to look like? Pardon? STUDENT: [INAUDIBLE]",
    "start": "1426340",
    "end": "1433200"
  },
  {
    "text": "PROFESSOR: 0, 5, 0. And then we'll go one more.",
    "start": "1433200",
    "end": "1439980"
  },
  {
    "text": "And I'll just put a minus\nindicating I'm done. I can't look below that.",
    "start": "1439980",
    "end": "1447330"
  },
  {
    "text": "I still have five pounds left,\nand I still have zero value.",
    "start": "1447330",
    "end": "1453549"
  },
  {
    "text": "The next thing I'm going\nto do is backtrack.",
    "start": "1453550",
    "end": "1474290"
  },
  {
    "text": "That is to say, I'm going\nto go back to a node I've already visited. Go up the tree 1.",
    "start": "1474290",
    "end": "1483050"
  },
  {
    "text": "And now, of course, the only\nplace to go is right.",
    "start": "1483050",
    "end": "1488740"
  },
  {
    "text": "And now I get to include\nsomething. Yeah.",
    "start": "1488740",
    "end": "1494750"
  },
  {
    "text": "And what does this\nnode look like? Well, I'll give you a hint,\nit starts with a minus.",
    "start": "1494750",
    "end": "1504710"
  },
  {
    "text": "What next? STUDENT: [INAUDIBLE] PROFESSOR: Pardon.",
    "start": "1504710",
    "end": "1509730"
  },
  {
    "text": "0. And? STUDENT: [INAUDIBLE] PROFESSOR: Pardon? 5.",
    "start": "1509730",
    "end": "1517050"
  },
  {
    "text": "Alright. So far, this looks\nlike the winner.",
    "start": "1517050",
    "end": "1524430"
  },
  {
    "text": "But, we'd better keep going. We backtrack to here again. There's nothing useful to do.",
    "start": "1524430",
    "end": "1532620"
  },
  {
    "text": "We backtrack to here. And we ask, what do we\nget with this node?",
    "start": "1532620",
    "end": "1542620"
  },
  {
    "text": "0, 3. Somebody?",
    "start": "1542620",
    "end": "1547740"
  },
  {
    "text": "STUDENT: [INAUDIBLE] PROFESSOR: Louder. 2.",
    "start": "1547740",
    "end": "1554570"
  },
  {
    "text": "And then? STUDENT: [INAUDIBLE]",
    "start": "1554570",
    "end": "1561210"
  },
  {
    "text": "PROFESSOR: There's a value\nhere, what's this value? I've included item number 1,\nwhich has a value of 7.",
    "start": "1561210",
    "end": "1569679"
  },
  {
    "text": "Right?",
    "start": "1569680",
    "end": "1577010"
  },
  {
    "text": "So now this looks\nlike the winner.",
    "start": "1577010",
    "end": "1583370"
  },
  {
    "text": "Pardon? STUDENT: [INAUDIBLE] PROFESSOR: This one? STUDENT: Yeah.",
    "start": "1583370",
    "end": "1591580"
  },
  {
    "text": "[INAUDIBLE] PROFESSOR: Remember, I'm\nworking from the back. So it shouldn't be 9.",
    "start": "1591580",
    "end": "1598260"
  },
  {
    "text": "Should be what? Item 0, oh, you're right,\nitems 0 is 9. Thank you.",
    "start": "1598260",
    "end": "1605040"
  },
  {
    "text": "Right you are. Still looks like the winner.",
    "start": "1605040",
    "end": "1612670"
  },
  {
    "text": "I can't hear you. STUDENT: [INAUDIBLE]",
    "start": "1612670",
    "end": "1623049"
  },
  {
    "text": "PROFESSOR: Let's be careful\nabout this. I'm glad people are watching.",
    "start": "1623050",
    "end": "1630410"
  },
  {
    "text": "So we're here. And now we've got 5\npounds available.",
    "start": "1630410",
    "end": "1637710"
  },
  {
    "text": "That's good. And we're considering\nitem number 0. Which happens to\nweigh 5 pounds.",
    "start": "1637710",
    "end": "1646700"
  },
  {
    "text": "So that's a good thing. So, it's the last item\nto consider.",
    "start": "1646700",
    "end": "1655130"
  },
  {
    "text": "If we include it, we'll\nhave nothing left.",
    "start": "1655130",
    "end": "1660730"
  },
  {
    "text": "Because we had 5 and\nwe're using all 5. So that will be 0.",
    "start": "1660730",
    "end": "1666070"
  },
  {
    "text": "And its value is 9.",
    "start": "1666070",
    "end": "1673500"
  },
  {
    "text": "So we put one item in the\nbackpack and we've got a value of 9. Anyone have a problem\nwith that?",
    "start": "1673500",
    "end": "1681660"
  },
  {
    "text": "So far, so good?",
    "start": "1681660",
    "end": "1687740"
  },
  {
    "text": "Now we've backed up to here. We're considering item 1 and\nwe're trying to ask whether we",
    "start": "1687740",
    "end": "1693000"
  },
  {
    "text": "can put it in. Item 1 has a weight of 3. So it would fit.",
    "start": "1693000",
    "end": "1702570"
  },
  {
    "text": "And if we use it, we\nhave 2 pounds left. And item 1 has a value of 7.",
    "start": "1702570",
    "end": "1709420"
  },
  {
    "text": "So if we did this, we'd\nhave a value of 7. But we're not done yet, right?",
    "start": "1709420",
    "end": "1716730"
  },
  {
    "text": "We still have some things\nto consider. Well, we could consider\nnot putting in item 0.",
    "start": "1716730",
    "end": "1726789"
  },
  {
    "text": "That makes perfect sense. And we're back to where we're\nthere, minus 2 and 7.",
    "start": "1726790",
    "end": "1736520"
  },
  {
    "text": "And now let's ask the question\nhow, about putting in item 0.",
    "start": "1736520",
    "end": "1742390"
  },
  {
    "text": "Well, we can't. Because it would weigh 5 pounds,\nI only have 2 left.",
    "start": "1742390",
    "end": "1749200"
  },
  {
    "text": "So there is no right\nbranch to this one.",
    "start": "1749200",
    "end": "1757850"
  },
  {
    "text": "So I'm making whatever\ndecisions I can make along the way.",
    "start": "1757850",
    "end": "1764170"
  },
  {
    "text": "Let's back up to here. And now we're going to ask\nabout taking item 2.",
    "start": "1764170",
    "end": "1771429"
  },
  {
    "text": "If we take item 2, then, well,\nthe index after that will of",
    "start": "1771430",
    "end": "1777510"
  },
  {
    "text": "course be 1. And the available weight\nwill be 3.",
    "start": "1777510",
    "end": "1785990"
  },
  {
    "text": "And the value will\nbe 8, right?",
    "start": "1785990",
    "end": "1793780"
  },
  {
    "text": "Alright, now we say,\ncan I take item 1.",
    "start": "1793780",
    "end": "1799300"
  },
  {
    "text": "Yeah. I can. It only weighs 3 and I happen\nto have 3 left. So that's good.",
    "start": "1799300",
    "end": "1807299"
  },
  {
    "text": "Don't take it, right. Sorry. This is the don't take branch. So I go to 0, 3, 8.",
    "start": "1807300",
    "end": "1817080"
  },
  {
    "text": "And then I can do another\ndon't take branch. And this gets me to\nwhat, minus 3, 8.",
    "start": "1817080",
    "end": "1828870"
  },
  {
    "text": "I'll now back up. And I'll say, alright, suppose I\ndo take item 0, well I can't",
    "start": "1828870",
    "end": "1837650"
  },
  {
    "text": "take item 0, right? Weighs too much. So, don't have that branch.",
    "start": "1837650",
    "end": "1846570"
  },
  {
    "text": "Back up to here. Alright, can I take item 1?",
    "start": "1846570",
    "end": "1851840"
  },
  {
    "text": "Yes, I can. And that gives me what?",
    "start": "1851840",
    "end": "1857200"
  },
  {
    "text": "STUDENT: [INAUDIBLE]",
    "start": "1857200",
    "end": "1863539"
  },
  {
    "text": "PROFESSOR: We have a winner. So it's kind of tedious,\nbut it's important",
    "start": "1863540",
    "end": "1870770"
  },
  {
    "text": "to see that it works. It's systematic. I have a way of exploring\nthe possible solutions.",
    "start": "1870770",
    "end": "1881660"
  },
  {
    "text": "And at the end I choose\nthe winner.",
    "start": "1881660",
    "end": "1889230"
  },
  {
    "text": "What's the complexity of this\ndecision tree solution?",
    "start": "1889230",
    "end": "1894950"
  },
  {
    "text": "Well, in the worst case, we're\nenumerating every possibility of in and out.",
    "start": "1894950",
    "end": "1901610"
  },
  {
    "text": "Now I've shortened it a little\nbit by saying, ah, we've run out of weight, we're OK. But effectively it is, as we\nsaw before, exponential.",
    "start": "1901610",
    "end": "1911270"
  },
  {
    "text": "2 to the n, every value in the\nbit vector we looked at last time is either 0 or 1.",
    "start": "1911270",
    "end": "1917320"
  },
  {
    "text": "So it's a binary number\nof n bits, 2 to the n.",
    "start": "1917320",
    "end": "1924840"
  },
  {
    "text": "Let's look at a straightforward implementation of this.",
    "start": "1924840",
    "end": "1931549"
  },
  {
    "text": "I'll get rid of Fibonacci here,\nwe don't want to bother looking at that again.",
    "start": "1931550",
    "end": "1939500"
  },
  {
    "text": "Hold on a second until I\ncomment this out, yes. STUDENT: [INAUDIBLE]",
    "start": "1939500",
    "end": "1948230"
  },
  {
    "text": "PROFESSOR: Yeah. There's a branch we could finish\nhere, but since we're out of weight we sort of know\nwe're going to be done.",
    "start": "1948230",
    "end": "1955240"
  },
  {
    "text": "So we could complete it. But it's not very interesting.",
    "start": "1955240",
    "end": "1964950"
  },
  {
    "text": "But yes, we probably should\nhave done that.",
    "start": "1964950",
    "end": "1974360"
  },
  {
    "text": "So let's look at an\nimplementation here.",
    "start": "1974360",
    "end": "1985990"
  },
  {
    "text": "Whoops. You had these in the handout,\nby the way.",
    "start": "1985990",
    "end": "1996110"
  },
  {
    "text": "So here's max val. It takes four arguments.",
    "start": "1996110",
    "end": "2004289"
  },
  {
    "text": "The weight, w, and v,\nthese are the two vectors we've seen here.",
    "start": "2004290",
    "end": "2010270"
  },
  {
    "text": "Of the weights and the values. It takes i, which is in some\nsense the length of those",
    "start": "2010270",
    "end": "2019940"
  },
  {
    "text": "vectors, minus 1, because\nof the way Python works.",
    "start": "2019940",
    "end": "2025330"
  },
  {
    "text": "So that gives me my index. And the amount of weight\navailable, a w,",
    "start": "2025330",
    "end": "2031529"
  },
  {
    "text": "for available weight.",
    "start": "2031530",
    "end": "2037760"
  },
  {
    "text": "So again, I put in this num\ncalls, which you can ignore.",
    "start": "2037760",
    "end": "2043770"
  },
  {
    "text": "First line says, if i is 0, that\nmeans I'm looking at the",
    "start": "2043770",
    "end": "2049300"
  },
  {
    "text": "very last element. Then if the weight of i is\nless than the available",
    "start": "2049300",
    "end": "2056339"
  },
  {
    "text": "weight, I can return\nthe value of i.",
    "start": "2056340",
    "end": "2064580"
  },
  {
    "text": "Otherwise it's 0. I've got one element\nto look at.",
    "start": "2064580",
    "end": "2069750"
  },
  {
    "text": "I either put it in if I can. If I can't, I don't.",
    "start": "2069750",
    "end": "2074830"
  },
  {
    "text": "Alright, so if I'm at the end of\nthe chain, that's my value.",
    "start": "2074830",
    "end": "2082429"
  },
  {
    "text": "In either event, if\nI'm looking at the last element, I return. The next line says alright,\nsuppose I don't, I'm not at",
    "start": "2082430",
    "end": "2092790"
  },
  {
    "text": "the last element. Suppose I don't include it.",
    "start": "2092790",
    "end": "2098110"
  },
  {
    "text": "Then the maximum value I can\nget is the maximum value of",
    "start": "2098110",
    "end": "2104330"
  },
  {
    "text": "what I had. But with index i minus 1.",
    "start": "2104330",
    "end": "2109770"
  },
  {
    "text": "So that's the don't-take\nbranch.",
    "start": "2109770",
    "end": "2116220"
  },
  {
    "text": "As we've seen systematically in\nthe don't-takes, the only thing that gets changed\nis the index.",
    "start": "2116220",
    "end": "2128450"
  },
  {
    "text": "The next line says if the weight\nof i is greater than a",
    "start": "2128450",
    "end": "2134970"
  },
  {
    "text": "w, well then I know\nI can't put it in. So I might as well return\nthe without i",
    "start": "2134970",
    "end": "2141839"
  },
  {
    "text": "value I just computed. Otherwise, let's see\nwhat I get with i.",
    "start": "2141840",
    "end": "2151220"
  },
  {
    "text": "And so the value of with i will\nbe the value of i plus",
    "start": "2151220",
    "end": "2158140"
  },
  {
    "text": "whatever I can get using\nthe remaining items and",
    "start": "2158140",
    "end": "2165079"
  },
  {
    "text": "decrementing the weight\nby the weight of i. So that's exactly what\nwe see as we go",
    "start": "2165080",
    "end": "2170619"
  },
  {
    "text": "down the right branches. I look at the rest\nof the list, but",
    "start": "2170620",
    "end": "2177600"
  },
  {
    "text": "I've changed the value. And I've changed the\navailable weight.",
    "start": "2177600",
    "end": "2185950"
  },
  {
    "text": "And then when I get to the very\nend, I'm going to return the bigger of with\ni and without i.",
    "start": "2185950",
    "end": "2195100"
  },
  {
    "text": "I've computed the value\nif I include i. I computed the value if\nI don't include i.",
    "start": "2195100",
    "end": "2200580"
  },
  {
    "text": "And then I'm going to just\nreturn the bigger of the two.",
    "start": "2200580",
    "end": "2207170"
  },
  {
    "text": "Little bit complicated, but\nit's basically just implementing this\ndecision tree.",
    "start": "2207170",
    "end": "2218809"
  },
  {
    "text": "Let's see what happens\nif we run it. Well, what I always do in\nanything like this is, the",
    "start": "2218810",
    "end": "2225350"
  },
  {
    "text": "first thing I do is, I run it\non something where I can actually compute the\nanswer in my head.",
    "start": "2225350",
    "end": "2233130"
  },
  {
    "text": "So I get a sense of whether or\nnot I'm doing the right thing.",
    "start": "2233130",
    "end": "2238660"
  },
  {
    "text": "So here's a little example.",
    "start": "2238660",
    "end": "2246819"
  },
  {
    "text": "And I'm going to pause for a\nminute, before I run it, and ask each of you to compute in\nyour head what you think the",
    "start": "2246820",
    "end": "2253160"
  },
  {
    "text": "answer should be.",
    "start": "2253160",
    "end": "2258710"
  },
  {
    "text": "In line with what I said\nabout debugging. Always guess before you run your\nprogram what you think it's going to do. And I'm going to wait until\nsomebody raises their hand and",
    "start": "2258710",
    "end": "2270590"
  },
  {
    "text": "gives me an answer.",
    "start": "2270590",
    "end": "2279060"
  },
  {
    "text": "Yes. STUDENT: 29? PROFESSOR: So we have a\nhypothesis that the answer",
    "start": "2279060",
    "end": "2284430"
  },
  {
    "text": "should be 29.",
    "start": "2284430",
    "end": "2290050"
  },
  {
    "text": "Ooh. That's bad. So as people in the back are\nanswering these questions",
    "start": "2290050",
    "end": "2296860"
  },
  {
    "text": "because they want\nto test my arm.",
    "start": "2296860",
    "end": "2303370"
  },
  {
    "text": "The camera probably didn't\ncatch that, but it was a perfect throw.",
    "start": "2303370",
    "end": "2309450"
  },
  {
    "text": "Anyone else think it's 29? Anyone think it's not 29?",
    "start": "2309450",
    "end": "2315460"
  },
  {
    "text": "What do you think it is? Pardon STUDENT: 62? PROFESSOR: 62.",
    "start": "2315460",
    "end": "2320630"
  },
  {
    "text": "That would be impressive. 62. Alright, well, we have\na guess of 62.",
    "start": "2320630",
    "end": "2326330"
  },
  {
    "text": "Well, let's run it and see.",
    "start": "2326330",
    "end": "2334980"
  },
  {
    "text": "29 it is. And it made a total\nof 13 calls.",
    "start": "2334980",
    "end": "2342440"
  },
  {
    "text": "It didn't do this little\noptimization I did over here.",
    "start": "2342440",
    "end": "2348900"
  },
  {
    "text": "But it gives us our answer. So that's pretty good.",
    "start": "2348900",
    "end": "2356760"
  },
  {
    "text": "Let's try a slightly\nlarger example.",
    "start": "2356760",
    "end": "2363000"
  },
  {
    "text": "So here I'm going to use\nthe example we had in class last time.",
    "start": "2363000",
    "end": "2368390"
  },
  {
    "text": "This was the burglar example\nwhere they had two copies of everything.",
    "start": "2368390",
    "end": "2379610"
  },
  {
    "text": "Here, it gets a maximum value\nof 48 and 85 calls.",
    "start": "2379610",
    "end": "2387730"
  },
  {
    "text": "So we see that I've doubled\nthe size of the vector but I've much more than doubled\nthe number of calls.",
    "start": "2387730",
    "end": "2396470"
  },
  {
    "text": "This is one of these properties\nof this kind of exponential growth. Well, let's be really\nbrave here.",
    "start": "2396470",
    "end": "2405050"
  },
  {
    "text": "And let's try a really\nbig vector. So this particular vector, you\nprobably can't even see the",
    "start": "2405050",
    "end": "2417730"
  },
  {
    "text": "whole thing on your screen. Well, it's got 40 items in it.",
    "start": "2417730",
    "end": "2432950"
  },
  {
    "text": "Let's see what happens here.",
    "start": "2432950",
    "end": "2440250"
  },
  {
    "text": "Alright, who wants to tell me\nwhat the answer is while this computes away? Nobody in their right mind.",
    "start": "2440250",
    "end": "2447980"
  },
  {
    "text": "I can tell you the answer, but\nthat's because I've cheated, run the program before. Alright, this is going\nto take a while.",
    "start": "2447980",
    "end": "2456839"
  },
  {
    "text": "And why is it going\nto take a while? Actually it's not 40, I think\nthese are, alright.",
    "start": "2456840",
    "end": "2464910"
  },
  {
    "text": "So the answer is 75\nand the number of calls is 1.7 million.",
    "start": "2464910",
    "end": "2474730"
  },
  {
    "text": "Pardon? 17 million. Computers are fast,\nfortunately.",
    "start": "2474730",
    "end": "2480690"
  },
  {
    "text": "Well, that's a lot of calls.",
    "start": "2480690",
    "end": "2489930"
  },
  {
    "text": "Let's try and figure out\nwhat's going on. But let's not try and figure out\nwhat's going on with this",
    "start": "2489930",
    "end": "2495090"
  },
  {
    "text": "big, big example because\nwe'll get really tired.",
    "start": "2495090",
    "end": "2511810"
  },
  {
    "text": "Oh. Actually, before we do that,\njust for fun, what I want to do is write down for future\nreference, as we look at a",
    "start": "2511810",
    "end": "2521740"
  },
  {
    "text": "fast one, that the answer is 75\nand Eric, how many calls?",
    "start": "2521740",
    "end": "2529270"
  },
  {
    "text": "240,000.",
    "start": "2529270",
    "end": "2535100"
  },
  {
    "text": "Alright. We'll come back to\nthose numbers.",
    "start": "2535100",
    "end": "2542050"
  },
  {
    "text": "Let's look at it with\na smaller example. We'll look at our\nexample of 8.",
    "start": "2542050",
    "end": "2552040"
  },
  {
    "text": "That we looked at before. And we'll turn on this\nprint statement.",
    "start": "2552040",
    "end": "2557480"
  },
  {
    "text": "Ooh, what was that?",
    "start": "2557480",
    "end": "2571540"
  },
  {
    "text": "Notice that I'm only\nprinting i and a w. Why is that? Because w and v are constant.",
    "start": "2571540",
    "end": "2579490"
  },
  {
    "text": "I don't want you to print them\nover and over again.",
    "start": "2579490",
    "end": "2590480"
  },
  {
    "text": "No, I'd better call it. That would be a good\nthing to do, right?",
    "start": "2590480",
    "end": "2597109"
  },
  {
    "text": "So let's see.",
    "start": "2597110",
    "end": "2602810"
  },
  {
    "text": "We'll call it with this one.",
    "start": "2602810",
    "end": "2621040"
  },
  {
    "text": "So it's printing a lot. It'll print, I think,\n85 calls. And the thing you should notice\nhere is that it's doing",
    "start": "2621040",
    "end": "2629210"
  },
  {
    "text": "a lot of the same things\nover and over again. So, for example, we'll\nsee 2, 1 here.",
    "start": "2629210",
    "end": "2636340"
  },
  {
    "text": "And 2, 1 here. And 2, 1 here.",
    "start": "2636340",
    "end": "2643320"
  },
  {
    "text": "Just like Fibonacci, it's doing\nthe same work over and over again.",
    "start": "2643320",
    "end": "2651710"
  },
  {
    "text": "So what's the solution? Well, you won't be\nsurprised to hear",
    "start": "2651710",
    "end": "2657890"
  },
  {
    "text": "it's the same solution. So let's look at that code.",
    "start": "2657890",
    "end": "2666500"
  },
  {
    "text": "So I'm going to do exactly the\nsame trick we did before.",
    "start": "2666500",
    "end": "2685240"
  },
  {
    "text": "I don't want b to\nthe Fibonacci.",
    "start": "2685240",
    "end": "2696710"
  },
  {
    "text": "I'm going to introduce a max val\n0, which has exactly the same arguments as max val.",
    "start": "2696710",
    "end": "2703870"
  },
  {
    "text": "Here I'll initiate the memo to\nbe 0, or to be empty, rather,",
    "start": "2703870",
    "end": "2709240"
  },
  {
    "text": "the dictionary. And then I'll call fast max\nval passing at this extra",
    "start": "2709240",
    "end": "2714380"
  },
  {
    "text": "argument of the memo.",
    "start": "2714380",
    "end": "2720319"
  },
  {
    "text": "So the first thing I'm going to\ndo is, I'm going to try and return the value in the memo.",
    "start": "2720320",
    "end": "2728230"
  },
  {
    "text": "This is a good thing\nto do, right? If it's not already there,\nwhat will happen?",
    "start": "2728230",
    "end": "2734730"
  },
  {
    "text": "It will raise an exception. And I'll go to the\nexcept clause. So I'm using the Python try\nexcept to check whether or not",
    "start": "2734730",
    "end": "2744950"
  },
  {
    "text": "the thing is in the\nmemo or not. I try and return the value.",
    "start": "2744950",
    "end": "2750900"
  },
  {
    "text": "If it's there, I return it. If not I'll get a key error.",
    "start": "2750900",
    "end": "2757010"
  },
  {
    "text": "And what do I do if\nI get a key error? Well, now I go through code very\nmuch like what I did for",
    "start": "2757010",
    "end": "2765470"
  },
  {
    "text": "max val in the first place. I check whether it's 0,\net cetera, et cetera.",
    "start": "2765470",
    "end": "2772339"
  },
  {
    "text": "It's exactly, really, the same,\nexcept before I return",
    "start": "2772340",
    "end": "2778340"
  },
  {
    "text": "the value I would have returned\nI squirrel it away in my memo for future use.",
    "start": "2778340",
    "end": "2788690"
  },
  {
    "text": "So it's the same structure\nas before. Except, before I return\nthe value, I save it.",
    "start": "2788690",
    "end": "2796730"
  },
  {
    "text": "So the next time I need\nit, I can look it up.",
    "start": "2796730",
    "end": "2807609"
  },
  {
    "text": "Let's see if it works.",
    "start": "2807610",
    "end": "2814190"
  },
  {
    "text": "Well, let's do a small\nexample first. It's",
    "start": "2814190",
    "end": "2848135"
  },
  {
    "text": "calling the old max val. With all those print\nstatements. Sorry about that. But we'll let it run.",
    "start": "2848135",
    "end": "2855190"
  },
  {
    "text": "Well, it's a little bit better. It got 85.",
    "start": "2855190",
    "end": "2863380"
  },
  {
    "text": "Same answer, but 50 calls\ninstead of 85. But let's try the big one.",
    "start": "2863380",
    "end": "2870580"
  },
  {
    "text": "Because we're really brave.\nSo here's where we have 30",
    "start": "2870580",
    "end": "2877780"
  },
  {
    "text": "elements, and a maximum\nweight of 40.",
    "start": "2877780",
    "end": "2886280"
  },
  {
    "text": "I'm not going to call the other\nmax val here, because we know what happens\nwhen I do that. I've created my own little\nmemo over there.",
    "start": "2886280",
    "end": "2895770"
  },
  {
    "text": "And let's let it rip. Wow.",
    "start": "2895770",
    "end": "2900980"
  },
  {
    "text": "Well, I got the same answer. That's a good thing. And instead of 17 million calls,\nI have 1800 calls.",
    "start": "2900980",
    "end": "2911349"
  },
  {
    "text": "That's a huge improvement. And that's sort of the magic\nof dynamic programming.",
    "start": "2911350",
    "end": "2918609"
  },
  {
    "text": "On Thursday we'll do a more\ncareful analysis and try and understand how I could have\naccomplished this seemingly",
    "start": "2918610",
    "end": "2927630"
  },
  {
    "text": "magical task of solving\nan exponential problem so really quickly.",
    "start": "2927630",
    "end": "2934870"
  },
  {
    "start": "2934870",
    "end": "2935187"
  }
]