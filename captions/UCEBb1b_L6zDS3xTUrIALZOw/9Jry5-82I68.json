[
  {
    "start": "0",
    "end": "100000"
  },
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13320",
    "end": "22130"
  },
  {
    "text": "PROFESSOR: Today's lecture\nis about a brand new data structure that you've\nprobably seen before,",
    "start": "22130",
    "end": "29130"
  },
  {
    "text": "and we've mentioned\nearlier in double 06, called a binary search tree.",
    "start": "29130",
    "end": "34940"
  },
  {
    "text": "We've talked about\nbinary search. It's a fundamental divide\nand conquer paradigm.",
    "start": "34940",
    "end": "40730"
  },
  {
    "text": "There's a data structure\nassociated with it, called the BST, a\nbinary search tree.",
    "start": "40730",
    "end": "45880"
  },
  {
    "text": "And what I want to do is\nmotivate this data structure using a problem.",
    "start": "45880",
    "end": "51390"
  },
  {
    "text": "It's a bit of a toy problem,\nbut certainly a problem that you could imagine\nexists in all sorts",
    "start": "51390",
    "end": "61070"
  },
  {
    "text": "of scheduling problems. It's a part of a runway\nreservation system",
    "start": "61070",
    "end": "68310"
  },
  {
    "text": "that you can imagine building. And what I'll do is\ndefine this problem",
    "start": "68310",
    "end": "73910"
  },
  {
    "text": "and talk about how we could\npossibly solve it with the data structures you've already seen--\nso lists and arrays, heaps",
    "start": "73910",
    "end": "83080"
  },
  {
    "text": "as well as, which\nwe saw last time-- and hopefully motivate you into\nthe reason behind the existence",
    "start": "83080",
    "end": "92539"
  },
  {
    "text": "of binary search\ntrees, because they are kind of the\nperfect data structure for this particular problem.",
    "start": "92540",
    "end": "100080"
  },
  {
    "start": "100000",
    "end": "340000"
  },
  {
    "text": "So let's dive into what the\nrunway reservation system looks",
    "start": "100080",
    "end": "105640"
  },
  {
    "text": "like.  And it's your basic\nscheduling problem.",
    "start": "105640",
    "end": "113050"
  },
  {
    "text": "We'll assume an airport\nwith a single runway.",
    "start": "113050",
    "end": "120030"
  },
  {
    "text": " Now Logan has six runways.",
    "start": "120030",
    "end": "126180"
  },
  {
    "text": "But the moment there's any sort\nof weather you're down to one. And of course, there's lots of\nairports with a single runway.",
    "start": "126180",
    "end": "133180"
  },
  {
    "text": "And we can imagine that\nthis runway is pretty busy. There's obviously safety issues\nassociated with landing planes,",
    "start": "133180",
    "end": "139670"
  },
  {
    "text": "and planes taking off. And so there are\nconstraints associated with the system, that\nhave to be obeyed.",
    "start": "139670",
    "end": "145840"
  },
  {
    "text": "And you have to build these\nconstraints in-- and the checks for these constraints--\ninto your data structure.",
    "start": "145840",
    "end": "151780"
  },
  {
    "text": "That's sort of the\nsummary of the context. ",
    "start": "151780",
    "end": "157170"
  },
  {
    "text": "So reservations\nfor future landings",
    "start": "157170",
    "end": "163780"
  },
  {
    "text": "is really what this\nsystem is built for. There's a notion of time.",
    "start": "163780",
    "end": "170200"
  },
  {
    "text": "We'll assume that\ntime is continuous. So it could be represented\nby a real variable,",
    "start": "170200",
    "end": "178439"
  },
  {
    "text": "or a real quantity. And what we'd like to do is\nreserve requests for landings.",
    "start": "178440",
    "end": "194459"
  },
  {
    "text": "And these are going to\nspecify landing time.",
    "start": "194460",
    "end": "200340"
  },
  {
    "text": "Each of them is going to\nspecify a landing time. We call it t.",
    "start": "200340",
    "end": "206110"
  },
  {
    "text": "And in particular,\nwe're going to add t",
    "start": "206110",
    "end": "213210"
  },
  {
    "text": "to the set R of landing times if\nno other landings are scheduled",
    "start": "213210",
    "end": "232370"
  },
  {
    "text": "within k minutes. ",
    "start": "232370",
    "end": "237790"
  },
  {
    "text": "And k is a parameter\nthat could vary.",
    "start": "237790",
    "end": "243430"
  },
  {
    "text": "I mean, it could be statically\nset to 3 minutes, or maybe 4. You can imagine it\nvarying it dynamically",
    "start": "243430",
    "end": "250420"
  },
  {
    "text": "depending on weather\nconditions, things like that. ",
    "start": "250420",
    "end": "256230"
  },
  {
    "text": "For the most of the examples\nwe'll talk about today, we'll assume k is 3 minutes,\nor something like that.",
    "start": "256230",
    "end": "263130"
  },
  {
    "text": "So this is about adding\nto the data structure.",
    "start": "263130",
    "end": "268700"
  },
  {
    "text": "And so an insert\noperation, if you will, that has a constraint associated\nwith it that you need to check.",
    "start": "268700",
    "end": "274470"
  },
  {
    "text": "And so you wouldn't insert if\nthe constraint was violated. You would if the\nconstraint was satisfied.",
    "start": "274470",
    "end": "280760"
  },
  {
    "text": "And time, as I\nsaid, is something that is part of the system.",
    "start": "280760",
    "end": "287500"
  },
  {
    "text": "It needs to be modeled. You have the current\nnotion of time. And every time you have a\nplane that's already landed,",
    "start": "287500",
    "end": "297240"
  },
  {
    "text": "which means that\nyou can essentially take this particular\nlanding time away",
    "start": "297240",
    "end": "303430"
  },
  {
    "text": "from the set R. So this\nremoval, or delete-- we remove",
    "start": "303430",
    "end": "312650"
  },
  {
    "text": "from set R, which is\nthe set of landing times",
    "start": "312650",
    "end": "317729"
  },
  {
    "text": "after the plane lands. ",
    "start": "317730",
    "end": "323330"
  },
  {
    "text": "So every once in awhile,\nas time increments, you're going to be checking\nthe data structure. And you can do this, maybe,\nevery minute, every 30 seconds.",
    "start": "323330",
    "end": "331440"
  },
  {
    "text": "That isn't really important. But you have to be able\nto remove from this data structure. So fairly straightforward\ndata structure.",
    "start": "331440",
    "end": "338510"
  },
  {
    "text": "It's a set, R. We don't quite\nknow how to implement it yet. But we'd like to do all of these\noperations in order log n time,",
    "start": "338510",
    "end": "359150"
  },
  {
    "start": "340000",
    "end": "580000"
  },
  {
    "text": "where n is the size of the set. All right?",
    "start": "359150",
    "end": "364410"
  },
  {
    "text": "So any questions about that? Any questions about\nthe definition",
    "start": "364410",
    "end": "369970"
  },
  {
    "text": "of the problem\nbefore we move on? Are we good on?",
    "start": "369970",
    "end": "376440"
  },
  {
    "text": "OK. So let's look at a real\nstraightforward example,",
    "start": "376440",
    "end": "385460"
  },
  {
    "text": "and put this up here so you\nget a better sense of this.",
    "start": "385460",
    "end": "392720"
  },
  {
    "text": "Let's say that, right\nnow, we are at time 37. And the set R has\n41.2, 49, and 53 in it.",
    "start": "392720",
    "end": "405580"
  },
  {
    "text": "And that's time. Now you may get a request\nfor landing time 53.",
    "start": "405580",
    "end": "413040"
  },
  {
    "text": "And-- I'm sorry. I want to call this\n56.3-- 41.2, 49, and 56.3.",
    "start": "413040",
    "end": "421500"
  },
  {
    "text": "You may get a request\nfor landing time 53. And right now the time is 37.",
    "start": "421500",
    "end": "426740"
  },
  {
    "text": "It's in the future, and\nyou say OK because you've done the check.",
    "start": "426740",
    "end": "431760"
  },
  {
    "text": "And let's assume\nthat k equals 3. And 53 is four ahead of 49, and\n3.3 before 56.3, so you're OK.",
    "start": "431760",
    "end": "444530"
  },
  {
    "text": "44 is not allowed. ",
    "start": "444530",
    "end": "450550"
  },
  {
    "text": "It's too close to 41.2. And 20, just for\ncompleteness, is not",
    "start": "450550",
    "end": "458289"
  },
  {
    "text": "allowed because it's passed.  Can't schedule in the past.",
    "start": "458290",
    "end": "463955"
  },
  {
    "text": "I mean, it could\nbe the next day. But then you\nwouldn't call it 20. Let's assume that time is\na monotonically increasing",
    "start": "463955",
    "end": "470110"
  },
  {
    "text": "function. You have a 64-bit number. It can go to the end\nof the world, or 2012,",
    "start": "470110",
    "end": "476599"
  },
  {
    "text": "or wherever you want. So you can keep the\nnumber a bit smaller, and do a little constant\nfactor optimization, I guess.",
    "start": "476600",
    "end": "485390"
  },
  {
    "text": "So that's sort of the set up. And hopefully you get a sense\nof what the requirements.",
    "start": "485390",
    "end": "492650"
  },
  {
    "text": "And you guys know about a bunch\nof data structures already. And what I want to do is\nlist each one of them,",
    "start": "492650",
    "end": "499300"
  },
  {
    "text": "and essentially shoot\nthem down with respect to not being able to make\nthis efficiency requirement.",
    "start": "499300",
    "end": "511520"
  },
  {
    "text": "And I'd like you guys to\nhelp me shoot them down. So let's talk about\nan easy one first.",
    "start": "511520",
    "end": "519235"
  },
  {
    "text": " Let's say you have an unsorted\nlist or an array corresponding",
    "start": "519235",
    "end": "524720"
  },
  {
    "text": "to R. That's all you have. What's wrong with\nthis data structure",
    "start": "524720",
    "end": "531990"
  },
  {
    "text": "from an efficiency standpoint? Yeah. AUDIENCE: Pretty much everything\nyou want to do to it is linear.",
    "start": "531990",
    "end": "538660"
  },
  {
    "text": "PROFESSOR: That's exactly right. Pretty much everything you\nwant to do to it is linear. And so you want to check\nthe k minute check.",
    "start": "538660",
    "end": "548290"
  },
  {
    "text": "You can certainly insert\ninto it, and just add to it.",
    "start": "548290",
    "end": "554360"
  },
  {
    "text": "So that part is not linear,\nthat's constant time. But certainly,\nanything where you",
    "start": "554360",
    "end": "560250"
  },
  {
    "text": "want to go check against\nother elements of the array, it's unsorted.",
    "start": "560250",
    "end": "566329"
  },
  {
    "text": "You have no idea of where\nto find these elements. You have to scan\nthrough the entire array to check to see whether\nthere's a landing time that's",
    "start": "566330",
    "end": "573930"
  },
  {
    "text": "within k of the current time\nt that you're asking for. And that's going to\ntake order n time.",
    "start": "573930",
    "end": "582490"
  },
  {
    "start": "580000",
    "end": "805000"
  },
  {
    "text": "So you can insert in\norder 1 without a check.",
    "start": "582490",
    "end": "593740"
  },
  {
    "text": "But sadly, the check\ntakes order n time.",
    "start": "593740",
    "end": "603529"
  },
  {
    "text": "All right? ",
    "start": "603530",
    "end": "609680"
  },
  {
    "text": "Let's do something that is\na little more plausible.",
    "start": "609680",
    "end": "615460"
  },
  {
    "text": "Let's talk about a sorted array. So this is a little\nmore subtle question.",
    "start": "615460",
    "end": "622720"
  },
  {
    "text": "Let's talk about a sorted array. What happens with\na sorted array?",
    "start": "622720",
    "end": "628640"
  },
  {
    "text": "Someone? What can you do\nwith a sorted array? Yeah.",
    "start": "628640",
    "end": "633812"
  },
  {
    "text": "AUDIENCE: Do a binary search\nto find the [INAUDIBLE]. PROFESSOR: Binary search\nwould find a bad insert.",
    "start": "633812",
    "end": "640900"
  },
  {
    "text": "OK, good. So that's good. So if you have a sorted array,\nand just for argument's sake,",
    "start": "640900",
    "end": "647530"
  },
  {
    "text": "it looks like 4, 20, 32, 37, 45.",
    "start": "647530",
    "end": "654740"
  },
  {
    "text": "And it's increasing order. And if you get a particular time\nt, you can use binary search.",
    "start": "654740",
    "end": "662180"
  },
  {
    "text": "And let's say, in particular,\nthe time is, for example, 34.",
    "start": "662180",
    "end": "667300"
  },
  {
    "text": "Then what you do is you go\nto the midpoint of the array, and maybe you just look at that. And you say oh, 34\nis greater than 32.",
    "start": "667300",
    "end": "677880"
  },
  {
    "text": "So I'm going to go\ncheck and figure out if I need to move to\nthe left or the right.",
    "start": "677880",
    "end": "686200"
  },
  {
    "text": "And since it's greater I'm\ngoing to move to the right. And within logarithmic\ntime, you'll",
    "start": "686200",
    "end": "691880"
  },
  {
    "text": "find what we call the insertion\npoint of the sorted array,",
    "start": "691880",
    "end": "697206"
  },
  {
    "text": "where this 34 is\nsupposed to sit. And you don't necessarily\nget to insert there.",
    "start": "697206",
    "end": "704600"
  },
  {
    "text": "You need to look, once you've\nfound the insertion point, to your left and to your right.",
    "start": "704600",
    "end": "710440"
  },
  {
    "text": "And do the k minute check. So finish up the\nanswer to the question,",
    "start": "710440",
    "end": "717260"
  },
  {
    "text": "tell me how long it's going to\ntake me to find the insertion",
    "start": "717260",
    "end": "722370"
  },
  {
    "text": "point, how long it's going\nto take me to do the check, and how long it's going\nto take me to actually do",
    "start": "722370",
    "end": "728209"
  },
  {
    "text": "the insertion. AUDIENCE: Log n in the search-- PROFESSOR: Log n for the\nsearch, to find the point.",
    "start": "728210",
    "end": "734450"
  },
  {
    "text": "AUDIENCE: Constant\nfor the comparison? PROFESSOR: Constant\nto the comparison. And then the last step? AUDIENCE: Do the\nresearch [INAUDIBLE].",
    "start": "734450",
    "end": "740128"
  },
  {
    "text": "PROFESSOR: Sorry, little louder. Sorry. AUDIENCE: The\ninsertion is constant.",
    "start": "740128",
    "end": "745149"
  },
  {
    "text": "PROFESSOR: Insertion\nis constant? Is that right? Do you people agree with him,\nthat insertion is constant?",
    "start": "745150",
    "end": "751324"
  },
  {
    "text": "AUDIENCE: You've got a\nmaximum size up there, right? There must be a maximum. [INAUDIBLE]",
    "start": "751324",
    "end": "757100"
  },
  {
    "text": "PROFESSOR: No, the indices--\nso right now the array has indices i. And if you start with 1, it's\n1, 2, 3, 4, 5, et cetera.",
    "start": "757100",
    "end": "767830"
  },
  {
    "text": "So what do you\nmean by insertion? Someone explain to me\nwhat-- yeah, go ahead. AUDIENCE: When you\nput something in you",
    "start": "767830",
    "end": "774374"
  },
  {
    "text": "have to shift\nevery element over. PROFESSOR: That's exactly right. That's exactly right. Ok, good, that's great.",
    "start": "774374",
    "end": "780892"
  },
  {
    "text": "I guess I should give\nyou half a cushion. But I'll do the full one, right? And you get one, too.",
    "start": "780892",
    "end": "785940"
  },
  {
    "text": " So the point here is\nthis is pretty close.",
    "start": "785940",
    "end": "791420"
  },
  {
    "text": "It's almost what we want. It's almost what we want. There's a little bit\nof a glitch here.",
    "start": "791420",
    "end": "798320"
  },
  {
    "text": "We know about binary search. The binary search is\ngoing to allow us, if there's n elements\nhere, to find the place--",
    "start": "798320",
    "end": "805950"
  },
  {
    "text": "it's going to be able\nto find-- and I'm going to precise here-- the\nsmallest i such that R of i",
    "start": "805950",
    "end": "819970"
  },
  {
    "text": "is greater than or equal\nto t in order log n time. ",
    "start": "819970",
    "end": "827519"
  },
  {
    "text": "It's going to be\nable to do that. You're going to be able to\ncompare R of i and R of i",
    "start": "827520",
    "end": "840410"
  },
  {
    "text": "minus 1-- so the left\nand the right-- against t",
    "start": "840410",
    "end": "846529"
  },
  {
    "text": "in order 1 time. But sadly, the actual insertion\nis going to require shifting.",
    "start": "846530",
    "end": "864105"
  },
  {
    "start": "864105",
    "end": "869800"
  },
  {
    "text": "And that could take order n\ntime, because it's an array. ",
    "start": "869800",
    "end": "878160"
  },
  {
    "text": "So that's the problem. Now you could imagine that\nyou had a sorted list.",
    "start": "878160",
    "end": "887240"
  },
  {
    "text": "And you could say, hey\nif I have a sorted list, then the list looks\nlike this, and it's",
    "start": "887240",
    "end": "897430"
  },
  {
    "text": "got a bunch of pointers in it. And if I've found\nthe insertion point,",
    "start": "897430",
    "end": "905690"
  },
  {
    "text": "then-- the list is nice,\nbecause you can insert something",
    "start": "905690",
    "end": "913370"
  },
  {
    "text": "by moving pointers\nin constant time once you've found\nthe insertion point.",
    "start": "913370",
    "end": "918839"
  },
  {
    "text": "But what's the\nproblem with the list? Yeah. AUDIENCE: You can't do\nbinary search [INAUDIBLE].",
    "start": "918840",
    "end": "924580"
  },
  {
    "text": "PROFESSOR: Well you can't\ndo binary search on a list. There's no notion of\ngoing to the n by 2 index",
    "start": "924580",
    "end": "930800"
  },
  {
    "text": "and doing random access on\na conventional list, right?",
    "start": "930800",
    "end": "936480"
  },
  {
    "text": "So the list does\none thing right, but doesn't do the\nother thing right. The array does a\ncouple things right,",
    "start": "936480",
    "end": "943600"
  },
  {
    "text": "but doesn't do the\nshifting right. And so you see why we've\nconstructed this toy problem.",
    "start": "943600",
    "end": "949430"
  },
  {
    "text": "It's to motivate the\nbinary search tree data structure, obviously. But you're close,\nbut not quite there.",
    "start": "949430",
    "end": "959040"
  },
  {
    "text": "What about heaps?  We talked about heaps last time.",
    "start": "959040",
    "end": "966510"
  },
  {
    "text": "What's the basic problem with\nthe heap for this problem?",
    "start": "966510",
    "end": "972350"
  },
  {
    "text": "The heaps are data\narrays, but you can visualize them as trees. And obviously if we're talking\nabout min heaps and max heaps.",
    "start": "972350",
    "end": "979069"
  },
  {
    "text": "So in particular, what goes\nwrong with a min heap or a max heap for this problem?",
    "start": "979070",
    "end": "986940"
  },
  {
    "text": "What takes a long time? Yeah.  AUDIENCE: You have to scan every\nelement, which [INAUDIBLE].",
    "start": "986940",
    "end": "996371"
  },
  {
    "text": "PROFESSOR: That's right. I mean, sadly, you know when\nwe talk about min heaps or max heaps, they actually have\na fairly weak invariant.",
    "start": "996372",
    "end": "1006459"
  },
  {
    "text": "It turns out that-- I'm\npreviewing a bit here-- binary search\ntrees are obviously similar to heaps in the\nsense that you visualize",
    "start": "1006460",
    "end": "1013920"
  },
  {
    "text": "an array as a tree,\nin the case of a heap. And binary search\ntrees are trees. But the invariant in a\nmin heap or a max heap,",
    "start": "1013920",
    "end": "1022170"
  },
  {
    "text": "is this kind of\na week invariant. It essentially says,\nlook at the min element.",
    "start": "1022170",
    "end": "1032740"
  },
  {
    "text": "And the min element\nhas to be the root, so you can do that one\noperation pretty quickly.",
    "start": "1032740",
    "end": "1038189"
  },
  {
    "text": "But if you want to look\nfor a k minute check, you want to see if there's\nan element in the heap that",
    "start": "1038190",
    "end": "1050760"
  },
  {
    "text": "is less than or equal to k,\nor greater than or equal to k",
    "start": "1050760",
    "end": "1056820"
  },
  {
    "text": "from t, this is going\nto take order n time. OK?",
    "start": "1056820",
    "end": "1063251"
  },
  {
    "text": "Good.  And finally, we haven't\ntalked about dictionaries,",
    "start": "1063251",
    "end": "1069250"
  },
  {
    "text": "but we will next week. Eric will talk about hash\ntables and dictionaries.",
    "start": "1069250",
    "end": "1074530"
  },
  {
    "text": "And they have the same problem. So it's not like dictionaries\nare going to solve the problem,",
    "start": "1074530",
    "end": "1079690"
  },
  {
    "text": "for those of you who know about\nhash tables and dictionaries. But you'll hear about\nthem in some detail. They're very good\nat other things.",
    "start": "1079690",
    "end": "1086380"
  },
  {
    "text": "So I don't want to say much more\nabout that, because you're not supposed to know\nabout dictionaries.",
    "start": "1086380",
    "end": "1092340"
  },
  {
    "text": "Or at least we\ndon't want to assume you do, though we\nhave talked about them and alluded to\ndictionaries earlier.",
    "start": "1092340",
    "end": "1099190"
  },
  {
    "text": "And so that's a story here. Yeah, back there, question. AUDIENCE: Yeah, can you explain\nwhy it's [INAUDIBLE] time?",
    "start": "1099190",
    "end": "1105450"
  },
  {
    "start": "1105000",
    "end": "1255000"
  },
  {
    "text": "PROFESSOR: So what\nis a heap, right? A heap essentially-- a\nmin heap, for example, or we talked about\nmax heaps last time,",
    "start": "1105450",
    "end": "1114280"
  },
  {
    "text": "has the property that\nyou have an element k,",
    "start": "1114280",
    "end": "1119440"
  },
  {
    "text": "and you're going to look\nat, let's say it's 21.",
    "start": "1119440",
    "end": "1127419"
  },
  {
    "text": "Let's do min heaps, so this\nhas to be less than what's here, 23, and what\nthere, maybe it's",
    "start": "1127420",
    "end": "1135440"
  },
  {
    "text": "30, and so on and so forth. And you have a\nrecursive definition. ",
    "start": "1135440",
    "end": "1144220"
  },
  {
    "text": "And when you insert into a min\nheap, typically what happens is suppose you wanted to\ninsert, for argument's sake,",
    "start": "1144220",
    "end": "1151590"
  },
  {
    "text": "I want to insert 25. I want to insert 25 into this.",
    "start": "1151590",
    "end": "1159170"
  },
  {
    "text": "The insertion algorithm\nfor a min heap typically adds to the\nend of the min heap.",
    "start": "1159170",
    "end": "1165780"
  },
  {
    "text": "So what you do is you\nwould add 25 to this. And let's say that you\nhad something out here.",
    "start": "1165780",
    "end": "1173500"
  },
  {
    "text": "So you'd add to it. And you'd start flipping things. And you could work with\njust this part of the array",
    "start": "1173500",
    "end": "1183080"
  },
  {
    "text": "to insert 25 in here. And you'd be able to satisfy\nthe invariant of the min heap.",
    "start": "1183080",
    "end": "1188660"
  },
  {
    "text": "And you'd get a\nlegitimate min heap. But you'd never check the\nleft part of it, which is 23.",
    "start": "1188660",
    "end": "1196110"
  },
  {
    "text": "So it's quite possible--\nand this is a good example-- that your basic insertion\nalgorithm, which is essentially",
    "start": "1196110",
    "end": "1204420"
  },
  {
    "text": "a version of max heap\nof i, or min heap of i, would simply insert\nat the end, and keep",
    "start": "1204420",
    "end": "1209840"
  },
  {
    "text": "flipping until you get\nthe min heap property, would be unable to check\nfor the k minute check",
    "start": "1209840",
    "end": "1215110"
  },
  {
    "text": "during the insertion. But what you'd have to do\nis to go look elsewhere. That min heap of i\nwe'd never look at--",
    "start": "1215110",
    "end": "1220827"
  },
  {
    "text": "or the insert algorithm we'd\nnever look at-- and that would require order n time. All right? AUDIENCE: Thank you.",
    "start": "1220827",
    "end": "1226293"
  },
  {
    "text": " PROFESSOR: So that's the\nstory for the min heap.",
    "start": "1226293",
    "end": "1231500"
  },
  {
    "text": "Thanks for the question. And it's similar for\ndictionaries, as I said. And so we're stuck.",
    "start": "1231500",
    "end": "1237150"
  },
  {
    "text": "We have no data structure yet\nthat can do all of the things",
    "start": "1237150",
    "end": "1242960"
  },
  {
    "text": "that I put up on the board to\nthe left, in order log n time.",
    "start": "1242960",
    "end": "1248909"
  },
  {
    "text": "And as you can see, the\nsorted array got pretty close. And so if you could\njust solve this problem,",
    "start": "1248910",
    "end": "1258350"
  },
  {
    "start": "1255000",
    "end": "1290000"
  },
  {
    "text": "if you could do fast insertion--\nand by fast I mean order log n",
    "start": "1258350",
    "end": "1264100"
  },
  {
    "text": "time-- into a sorted\narray, we'd be in business.",
    "start": "1264100",
    "end": "1274480"
  },
  {
    "text": "So that's what we'd like to\ndo with binary search trees. Binary search trees\nare, as you can imagine,",
    "start": "1274480",
    "end": "1280340"
  },
  {
    "text": "enable binary search. But the sorted arrays\ndon't allow fast insertion,",
    "start": "1280340",
    "end": "1287320"
  },
  {
    "text": "but BSTs do.  So let me introduce BSTs. ",
    "start": "1287320",
    "end": "1298500"
  },
  {
    "start": "1290000",
    "end": "1415000"
  },
  {
    "text": "As with any data\nstructure, there's a nice invariant\nassociated with BSTs.",
    "start": "1298500",
    "end": "1303820"
  },
  {
    "text": "The invariant is stronger\nthan the heap invariant.",
    "start": "1303820",
    "end": "1309080"
  },
  {
    "text": "And actually, that makes them\na different data structure, not necessarily a better\ndata structure.",
    "start": "1309080",
    "end": "1314519"
  },
  {
    "text": "And I'll say why, but different. For this problem they're better. ",
    "start": "1314520",
    "end": "1322130"
  },
  {
    "text": "So one example of a binary\nsearch tree looks like this. ",
    "start": "1322130",
    "end": "1334000"
  },
  {
    "text": "And as a binary tree you have\na node, and we call it x.",
    "start": "1334000",
    "end": "1339600"
  },
  {
    "text": "Each of the nodes\nhas a key of x. So 30 is the key for this node,\n17 for that one, et cetera.",
    "start": "1339600",
    "end": "1347290"
  },
  {
    "text": "Unlike in a heap,\nyour data structure is a little more complicated. The heap is simply\nan array, and you",
    "start": "1347290",
    "end": "1353870"
  },
  {
    "text": "happen to visualize\nit as a tree. The binary search\ntree is actually a tree that has\npointers, unlike a heap.",
    "start": "1353870",
    "end": "1364039"
  },
  {
    "text": "So it's a more complicated\ndata structure. You need a few more bytes for\nevery node of the binary search",
    "start": "1364040",
    "end": "1370240"
  },
  {
    "text": "tree, as opposed\nto the heap, which is simply an array element.",
    "start": "1370240",
    "end": "1375440"
  },
  {
    "text": "And the pointers\nare parent of x. I haven't bothered\nshowing the arrows here,",
    "start": "1375440",
    "end": "1383860"
  },
  {
    "text": "because you could be going\nupwards or backwards. And you could imagine\nthat you actually",
    "start": "1383860",
    "end": "1389080"
  },
  {
    "text": "have a parent pointer\nthat goes up this way, and you have a child\npointer that goes this way.",
    "start": "1389080",
    "end": "1394600"
  },
  {
    "text": "So there's really,\npotentially, three pointers for each node, the\nparent, the left child,",
    "start": "1394600",
    "end": "1402220"
  },
  {
    "text": "and the right child. So pretty straightforward. That's the data\nstructure in terms",
    "start": "1402220",
    "end": "1408640"
  },
  {
    "text": "of what it needs to have\nso you can operate on it. And there's an\ninvariant for a BST.",
    "start": "1408640",
    "end": "1421440"
  },
  {
    "start": "1415000",
    "end": "1545000"
  },
  {
    "text": "What makes a BST\nis that you have",
    "start": "1421440",
    "end": "1428419"
  },
  {
    "text": "an ordering of the\nkey values that",
    "start": "1428420",
    "end": "1433700"
  },
  {
    "text": "satisfy the invariant that\nfor all nodes x if y is",
    "start": "1433700",
    "end": "1445620"
  },
  {
    "text": "in the left subtree\nof x, we have--",
    "start": "1445620",
    "end": "1458780"
  },
  {
    "text": "if it's in the left\nsubtree then key of y is less than or\nequal to key of x.",
    "start": "1458780",
    "end": "1467950"
  },
  {
    "text": "And if y is in the\nright subtree we",
    "start": "1467950",
    "end": "1475870"
  },
  {
    "text": "have key of y is greater\nthan or equal to key of x.",
    "start": "1475870",
    "end": "1482070"
  },
  {
    "text": "So if we're talking\nabout trees here, subtrees here,\neverything underneath--",
    "start": "1482070",
    "end": "1487110"
  },
  {
    "text": "and that's the stronger part\nof the invariant in the BST, versus in the heap we were just\ntalking about the children.",
    "start": "1487110",
    "end": "1494700"
  },
  {
    "text": "And so you look at\nthis BST, it is a BST because if I look to\nthe right, from the root",
    "start": "1494700",
    "end": "1501429"
  },
  {
    "text": "I only see values that\nare greater than 30. And if I look to the left,\nin the entire subtree,",
    "start": "1501430",
    "end": "1508150"
  },
  {
    "text": "all the way down I only see\nvalues that are less than 30.",
    "start": "1508150",
    "end": "1513890"
  },
  {
    "text": "And that has to be true for any\nintermediate node in the tree.",
    "start": "1513890",
    "end": "1520110"
  },
  {
    "text": "And the only other\nnontrivial node here is 17. And you see that 14 is less than\n17, and 20 is greater than 17.",
    "start": "1520110",
    "end": "1528830"
  },
  {
    "text": "OK? So that's the BST. That's the data structure. This is the invariant.",
    "start": "1528830",
    "end": "1534910"
  },
  {
    "text": "So let's look at why BSTs\nare a possibility for solving",
    "start": "1534910",
    "end": "1540890"
  },
  {
    "text": "our runway reservation problem. And what I'll do is\nI'll do the insert.",
    "start": "1540890",
    "end": "1550190"
  },
  {
    "start": "1545000",
    "end": "1760000"
  },
  {
    "text": " So let's start with the\nnil set of elements,",
    "start": "1550190",
    "end": "1558970"
  },
  {
    "text": "or null set of elements, R.\nAnd let's start inserting.",
    "start": "1558970",
    "end": "1564059"
  },
  {
    "text": " So I insert 49.",
    "start": "1564060",
    "end": "1573570"
  },
  {
    "text": "And all I do is make a node\nthat has a key value of 49.",
    "start": "1573570",
    "end": "1579840"
  },
  {
    "text": "This one is easy. Next insert, 79. ",
    "start": "1579840",
    "end": "1587090"
  },
  {
    "text": "And what happens here\nis I have to look at 49,",
    "start": "1587090",
    "end": "1592600"
  },
  {
    "text": "and I compare 79 to 49. And because 79 is greater\nthan 49 I go to the right",
    "start": "1592600",
    "end": "1597780"
  },
  {
    "text": "and I attach 79 to\nthe right child of 49.",
    "start": "1597780",
    "end": "1605180"
  },
  {
    "text": "Then I want to insert 46.  And when I want to\ninsert 46 I look at this,",
    "start": "1605180",
    "end": "1612190"
  },
  {
    "text": "I compare 49 and 46. 46 is less, so I go to the left\nside and I put 46 in there.",
    "start": "1612190",
    "end": "1619389"
  },
  {
    "text": "Next, let's say I\nwant to insert 41.",
    "start": "1619390",
    "end": "1624560"
  },
  {
    "text": "So far I haven't really talked\nabout the k minute checks. And you could imagine\nthat they're being done.",
    "start": "1624560",
    "end": "1631700"
  },
  {
    "text": "I'll show you exactly, or\ntalk about exactly how they're done in a second. It's not that hard.",
    "start": "1631700",
    "end": "1637410"
  },
  {
    "text": "But let me go ahead\nand do one more. For 41, 41 is less\nthan 49, so I go left.",
    "start": "1637410",
    "end": "1645940"
  },
  {
    "text": "41 is less than 46, so\nI go left and attach it to the left child.",
    "start": "1645940",
    "end": "1651154"
  },
  {
    "text": "All right? So that's what I have right now. Now let's talk about\nthe k minute check.",
    "start": "1651155",
    "end": "1656510"
  },
  {
    "text": "It's good to talk about\nthe K minute check when there's\nactually a violation.",
    "start": "1656510",
    "end": "1661750"
  },
  {
    "text": "And let's assume\nthe k equals 3 here. And so, same thing here.",
    "start": "1661750",
    "end": "1667110"
  },
  {
    "text": "You're essentially doing\nbinary search here. And you're doing the checks as\nyou're doing the binary search.",
    "start": "1667110",
    "end": "1672502"
  },
  {
    "text": "So what you're\ngoing to be doing is you're going to check that--\nyou're going to compare 42",
    "start": "1672502",
    "end": "1678580"
  },
  {
    "text": "with 49, with the\nk minute check. And you realize they're 7 apart.",
    "start": "1678580",
    "end": "1683780"
  },
  {
    "text": "So that's OK. And 42 is less than\n49, so you go left.",
    "start": "1683780",
    "end": "1689010"
  },
  {
    "text": "And then you compare 42 with 46. And again, it's less than 46,\nbut it's k away, more than 3",
    "start": "1689010",
    "end": "1696770"
  },
  {
    "text": "away from 46. So that's cool. And you go left. And then you get to 41.",
    "start": "1696770",
    "end": "1702350"
  },
  {
    "text": "And you compare 42 with 41. In this case is greater. But it's not k more than it.",
    "start": "1702350",
    "end": "1710580"
  },
  {
    "text": "And so that means that if\nyou didn't have the check, you would be putting 42 in here.",
    "start": "1710580",
    "end": "1717930"
  },
  {
    "text": "But because you have\nthe check, you fail. And you say, look,\nI mean this violates",
    "start": "1717930",
    "end": "1723580"
  },
  {
    "text": "the safety property, violates\nthe check I need to do. And therefore I'm\nnot going to insert-- I'm not going to reserve\na request for you.",
    "start": "1723580",
    "end": "1730750"
  },
  {
    "text": "All right? So what's happened here is\nit's basically a sorted array, except that you added\na bunch of pointers",
    "start": "1730750",
    "end": "1737850"
  },
  {
    "text": "associated with the tree. And so it's somewhere between a\nsorted list and a sorted array.",
    "start": "1737850",
    "end": "1743520"
  },
  {
    "text": "And it does exactly\nthe right thing with respect to\nbeing able to insert.",
    "start": "1743520",
    "end": "1749310"
  },
  {
    "text": "Once you've found\nthe place to insert, it's merely attaching\nthis particular new node",
    "start": "1749310",
    "end": "1754370"
  },
  {
    "text": "with it's appropriate\nkey to the pointer. All right? So what's happened\nhere is that if h",
    "start": "1754370",
    "end": "1768389"
  },
  {
    "start": "1760000",
    "end": "2095000"
  },
  {
    "text": "is the height of the\ntree then insertion",
    "start": "1768390",
    "end": "1777970"
  },
  {
    "text": "with or without the check\nis done in order h time.",
    "start": "1777970",
    "end": "1784510"
  },
  {
    "text": " And that's what\nBSTs are good for.",
    "start": "1784510",
    "end": "1792044"
  },
  {
    "text": "People buy that? Any questions about how they\nk minute check proceeded? Yeah, question. AUDIENCE: So, what's it called?",
    "start": "1792044",
    "end": "1797732"
  },
  {
    "text": "The what check? PROFESSOR: The k minute check. Sorry, the k was 3 minutes k.",
    "start": "1797732",
    "end": "1804409"
  },
  {
    "text": "I had this thing over\nhere, add t to the set R if no other landings are\nscheduled within k minutes.",
    "start": "1804410",
    "end": "1812110"
  },
  {
    "text": "So k was just a number. I want it to be a\nparameter because it",
    "start": "1812110",
    "end": "1817149"
  },
  {
    "text": "doesn't matter what k is. As long as you know what it is\nwhen you do the binary search,",
    "start": "1817150",
    "end": "1822870"
  },
  {
    "text": "you can add that in to an\nargument to your insert, and do the check. AUDIENCE: OK.",
    "start": "1822870",
    "end": "1828700"
  },
  {
    "text": "PROFESSOR: So in this case,\nI set k to be 3 out here. And I was doing a check\nto see that the invariant,",
    "start": "1828700",
    "end": "1835909"
  },
  {
    "text": "any elements in the BST\nalready, on any nodes that had keys that were\nwithin 3 minutes--",
    "start": "1835910",
    "end": "1845919"
  },
  {
    "text": "because I fixed k to be\n3-- to the actual time that I was trying to insert. All right?",
    "start": "1845920",
    "end": "1851090"
  },
  {
    "text": "AUDIENCE: So there's\nno way [INAUDIBLE]. PROFESSOR: I'm sorry,\nthere's no way? AUDIENCE: There's\nno way you could insert the 42 into\nthe tree then?",
    "start": "1851090",
    "end": "1857160"
  },
  {
    "text": "PROFESSOR: Well, if\nthe basic insertion method into a binary search tree\ndoesn't have any constraints.",
    "start": "1857160",
    "end": "1863535"
  },
  {
    "text": " But you can certainly\naugment the insertion method",
    "start": "1863535",
    "end": "1870650"
  },
  {
    "text": "without changing the efficiency\nof the insertion method. So let's say that\nall you wanted to do",
    "start": "1870650",
    "end": "1876710"
  },
  {
    "text": "was insert into a\nbinary search tree, and it had nothing to do\nwith the runway reservation.",
    "start": "1876710",
    "end": "1882710"
  },
  {
    "text": "Then you would just insert\nthe way I described to you. The beauty of the\nbinary search tree is that while you're\nfinding the place to insert,",
    "start": "1882710",
    "end": "1891149"
  },
  {
    "text": "you can do these checks--\nthe k minute checks. Yeah, question back there. AUDIENCE: What about 45?",
    "start": "1891150",
    "end": "1896729"
  },
  {
    "text": "PROFESSOR: What about 45? So this is after-- we\nhaven't inserted 42",
    "start": "1896729",
    "end": "1903190"
  },
  {
    "text": "because it violated the check. So when you do 45,\nthen what happens is you see that\n45 is less than 49",
    "start": "1903190",
    "end": "1911100"
  },
  {
    "text": "and you pass, because you're\nmore than 3 minutes away. We'll stick with that example.",
    "start": "1911100",
    "end": "1917230"
  },
  {
    "text": "And then you get\nhere and then you see that 45 is less than 46,\nand you'd fail right here.",
    "start": "1917230",
    "end": "1924780"
  },
  {
    "text": "You would fail right here\nif you were doing the check, because 45 is not\n3 away from 46.",
    "start": "1924780",
    "end": "1931220"
  },
  {
    "text": "All right? So that's the story.",
    "start": "1931220",
    "end": "1936580"
  },
  {
    "text": "And so if you have h being\nthe height of the tree, as you can see you're\njust following a path.",
    "start": "1936580",
    "end": "1941670"
  },
  {
    "text": "And depending on\nwhat the height is you're going to do\nthat many operations, times some constant factor.",
    "start": "1941670",
    "end": "1948320"
  },
  {
    "text": "And so you can say that\nthis is order h time. All right? Any other questions?",
    "start": "1948320",
    "end": "1955210"
  },
  {
    "text": "Yeah, question back there. AUDIENCE: In a normal\narray [INAUDIBLE]. ",
    "start": "1955210",
    "end": "1964550"
  },
  {
    "text": "PROFESSOR: Well, it's up to you. In a conventional binary search\ntree, or the vanilla binary",
    "start": "1964550",
    "end": "1970680"
  },
  {
    "text": "search tree, typically\nwhat you're doing is you're doing\neither find or insert. And so what that means\nis that you would just",
    "start": "1970680",
    "end": "1977049"
  },
  {
    "text": "return the pointer\nassociated with that element. So if you're looking for find\n46, for example, on the tree",
    "start": "1977050",
    "end": "1984710"
  },
  {
    "text": "that I have out there, typically\n46 is just the key value. And there may be a record\nassociated with it.",
    "start": "1984710",
    "end": "1990530"
  },
  {
    "text": "And you would get a\npointer to that record because it's already in there. At that point you can\nsay I want to override.",
    "start": "1990530",
    "end": "1997889"
  },
  {
    "text": "Or if you want, you could\nhave duplicate values. You could have this,\nwhat's called a multiset.",
    "start": "1997890",
    "end": "2003890"
  },
  {
    "text": "A multiset is a set that\nhas duplicate elements. In that case, you would need\na little more sophistication",
    "start": "2003890",
    "end": "2009400"
  },
  {
    "text": "to differentiate between\ntwo elements that have the same key values.",
    "start": "2009400",
    "end": "2015870"
  },
  {
    "text": "So you'd have to\ncall it 46a and 46b. And you'd have to have some\nway of differentiating.",
    "start": "2015870",
    "end": "2021880"
  },
  {
    "text": "Any other questions? Yeah. AUDIENCE: Wouldn't\nit be a problem if the tree's not balanced?",
    "start": "2021880",
    "end": "2027604"
  },
  {
    "text": "PROFESSOR: Ah, great question. Yes, stay tuned.",
    "start": "2027604",
    "end": "2035930"
  },
  {
    "text": "So I was careful, right?  I guess I kind of\nalluded to the fact",
    "start": "2035930",
    "end": "2041910"
  },
  {
    "text": "that we'd solved the\nrunway reservation system. Did I actually say that\nwe'd solved the problem? Did I say we had\nsolved the problem?",
    "start": "2041910",
    "end": "2048080"
  },
  {
    "text": "OK, so I did not lie. I did not lie. I said that the height\nof the tree was h.",
    "start": "2048080",
    "end": "2055730"
  },
  {
    "text": "And I said that this was\naccomplished in order h time, right? Which is not quite what I want,\nwhich is really your question.",
    "start": "2055730",
    "end": "2063730"
  },
  {
    "text": "So we'll get to that. So we're not quite done yet. But before we do\nthat, it turns out",
    "start": "2063730",
    "end": "2070719"
  },
  {
    "text": "that today's lecture is\nreally part one of two. You'll get a really good\nsense of BST operations",
    "start": "2070719",
    "end": "2080079"
  },
  {
    "text": "in today's lecture. But there's going to be a few\nthings that-- we can't cover all of double 6 in\nthe lecture, right?",
    "start": "2080080",
    "end": "2087090"
  },
  {
    "text": "We'd like to, and let you\noff for the entire fall, but that's not the way\nit works, all right?",
    "start": "2087090",
    "end": "2092940"
  },
  {
    "text": "So it's a great question. I'll answer it towards the end. I just wanted you\nto say a little bit",
    "start": "2092940",
    "end": "2098500"
  },
  {
    "start": "2095000",
    "end": "2340000"
  },
  {
    "text": "about other operations. There's many operations that\nyou can do on a binary search",
    "start": "2098500",
    "end": "2105109"
  },
  {
    "text": "tree, that can be\ndone in order h time,",
    "start": "2105110",
    "end": "2110330"
  },
  {
    "text": "and some even in constant time. And I'll put these in the notes. Some of these are\nfairly straightforward.",
    "start": "2110330",
    "end": "2116970"
  },
  {
    "text": "Find min can be done\nin heap, in a min heap.",
    "start": "2116970",
    "end": "2122750"
  },
  {
    "text": "If you want to find the minimum\nvalue, it's constant time. You just return the root. In the case of a binary search\ntree, how do you find the min?",
    "start": "2122750",
    "end": "2132040"
  },
  {
    "text": "Someone? Worth a cushion. Yep. AUDIENCE: Keep\ngoing to the left? PROFESSOR: Keep\ngoing to the left.",
    "start": "2132040",
    "end": "2137710"
  },
  {
    "text": "And how do you find the max? AUDIENCE: [INAUDIBLE]. PROFESSOR: Keep\ngoing to the right. All right great, thank you. And finally, what\ncomplexity is that?",
    "start": "2137710",
    "end": "2144646"
  },
  {
    "text": "I sort gave it away, but I\nwant to hear it from you. AUDIENCE: [INAUDIBLE]. PROFESSOR: Hm? AUDIENCE: It's the height PROFESSOR: It's the\nheight, order h.",
    "start": "2144646",
    "end": "2150970"
  },
  {
    "text": "All right, it's\norder h complexity. Go to the left until\nyou hit a leaf,",
    "start": "2150970",
    "end": "2157610"
  },
  {
    "text": "and until leaf\norder h complexity.",
    "start": "2157610",
    "end": "2164470"
  },
  {
    "text": "Same thing for max. And then you can do\na bunch of things. I'll put these in the notes.",
    "start": "2164470",
    "end": "2170030"
  },
  {
    "text": "You can find things\nlike next larger x, which is the next\nlargest value beyond x.",
    "start": "2170030",
    "end": "2178940"
  },
  {
    "text": "And you look at the key for\nx and you say, for example, if you put 46 in there, what's\nthe next thing that's larger",
    "start": "2178940",
    "end": "2185840"
  },
  {
    "text": "and that? In this tree here, it's 49.",
    "start": "2185840",
    "end": "2191930"
  },
  {
    "text": "But that's something which was\ntrivially done in this example. But in general you can do\nthis in order h time as well.",
    "start": "2191930",
    "end": "2200550"
  },
  {
    "text": "And you can see the pseudocode. And we'll probably cover\nthat in section tomorrow.",
    "start": "2200550",
    "end": "2206130"
  },
  {
    "text": "What I want to do today, for the\nrest of the time I have left, is actually talk about augmented\nbinary search trees, which",
    "start": "2206130",
    "end": "2213720"
  },
  {
    "text": "are things that can do more\nand have more data in them",
    "start": "2213720",
    "end": "2218869"
  },
  {
    "text": "than just these pointers. And that's actually\nsomething which",
    "start": "2218870",
    "end": "2223911"
  },
  {
    "text": "should give you a sense of the\nrichness of the binary search tree structure, this\nnotion of augmentation.",
    "start": "2223911",
    "end": "2229516"
  },
  {
    "text": "And those of you, again,\nwho have taken double 05, you know about\ndesign amendments. And so specifications\nnever stay the same.",
    "start": "2229517",
    "end": "2236540"
  },
  {
    "text": "I mean, you're\nworking for someone, and they never really\ntell you what they want. They might, but they\nchange their mind.",
    "start": "2236540",
    "end": "2244250"
  },
  {
    "text": "So in this case, we're\ngoing to change our mind. And so we've done\nthis to the extent that we can cover all of\nthese in order h time.",
    "start": "2244250",
    "end": "2252330"
  },
  {
    "text": "And let's say that now\nthe problem specification changed on us. There's an additional\nrequirement",
    "start": "2252330",
    "end": "2258570"
  },
  {
    "text": "that we're asked to solve. And so you sort of\ncommitted to BST structures.",
    "start": "2258570",
    "end": "2267060"
  },
  {
    "text": "But now we have an\nadditional requirement. And the new requirement is that\nwe be able to compute rank t.",
    "start": "2267060",
    "end": "2280099"
  },
  {
    "text": "And rank t is how\nmany planes are",
    "start": "2280100",
    "end": "2288430"
  },
  {
    "text": "scheduled to land at times\nless than or equal to t.",
    "start": "2288430",
    "end": "2302470"
  },
  {
    "text": "So perfectly\nreasonable question. It wasn't part of\nthe original spec. You now have built your\nBST data structure,",
    "start": "2302470",
    "end": "2309810"
  },
  {
    "text": "you thought you were done. Sorry, you aren't. You've got to do\nthis extra stuff.",
    "start": "2309810",
    "end": "2315730"
  },
  {
    "text": "So that's the notion\nof augmentation, which we're going to use this\nis an example of how we're",
    "start": "2315730",
    "end": "2322744"
  },
  {
    "text": "going to augment\nthe BST structure. And oh, by the way,\nI don't want you to change the\ncomplexity from order h.",
    "start": "2322744",
    "end": "2330140"
  },
  {
    "text": "And we eventually will\nget to order log n, but don't go change something\nthat was logarithmic to linear.",
    "start": "2330140",
    "end": "2336630"
  },
  {
    "text": "That would be bad.  So let's talk about\nhow you do this.",
    "start": "2336630",
    "end": "2341690"
  },
  {
    "start": "2340000",
    "end": "2735000"
  },
  {
    "text": "And I don't think we\nneed this anymore. ",
    "start": "2341690",
    "end": "2347829"
  },
  {
    "text": "So the first thing we need to\ndo is add a little bit more information to the\nnode structure.",
    "start": "2347830",
    "end": "2355790"
  },
  {
    "text": " And what we're going to do\nis augment the BST structure.",
    "start": "2355790",
    "end": "2369283"
  },
  {
    "text": " And we're going to add one\nlittle number associated",
    "start": "2369283",
    "end": "2378980"
  },
  {
    "text": "with each node, that looks at\nthe number of nodes below it.",
    "start": "2378980",
    "end": "2385670"
  },
  {
    "text": "So in particular,\nlet's say that I have 49, 46, let's just\nsay 49, 46 for now.",
    "start": "2385670",
    "end": "2399500"
  },
  {
    "text": "And over here I\nhave 79, 64, and 83.",
    "start": "2399500",
    "end": "2406700"
  },
  {
    "text": " I'm going to modify--\nI'm going to have an extra number associated\nwith each of these nodes.",
    "start": "2406700",
    "end": "2416435"
  },
  {
    "text": "And I'm just going\nto write that number on the outside of the node. And you can just imagine\nthat now the key value has",
    "start": "2416435",
    "end": "2423640"
  },
  {
    "text": "two numbers associated\nwith it-- the thing that I write inside the node,\nand what I write outside of it.",
    "start": "2423640",
    "end": "2430450"
  },
  {
    "text": "So in particular, when\nI do insert or delete",
    "start": "2430450",
    "end": "2435959"
  },
  {
    "text": "I'm going to be\nmodifying these numbers.  And these are size numbers.",
    "start": "2435959",
    "end": "2444470"
  },
  {
    "text": "And what do I mean by that? Well these numbers\ncorrespond to subtree sizes.",
    "start": "2444470",
    "end": "2451839"
  },
  {
    "start": "2451840",
    "end": "2457470"
  },
  {
    "text": "So the subtree size\nhere is 1, 1, 1. So as I'm building\nthis tree up I'm",
    "start": "2457470",
    "end": "2464099"
  },
  {
    "text": "going to create an\naugmented BST structure, and I've modified\ninsert and delete so they do some extra work.",
    "start": "2464100",
    "end": "2470364"
  },
  {
    "text": "So let's say, for\nargument's sake, that I've added this in\nsort of a bottom up fashion.",
    "start": "2470364",
    "end": "2478090"
  },
  {
    "text": "And what I have are these\nparticular subtree sizes. All of these should make sense.",
    "start": "2478090",
    "end": "2483109"
  },
  {
    "text": "This has just a single\nnode, same thing here. So this subtree sizes associated\nwith these nodes are all 1.",
    "start": "2483110",
    "end": "2491180"
  },
  {
    "text": "The subtree size\nassociated with 79 is 3, because you're\ncounting 79 and 64 and 83.",
    "start": "2491180",
    "end": "2499060"
  },
  {
    "text": "And the subtree size\nassociated with 49 is 5, because you're counting\neverything underneath it.",
    "start": "2499060",
    "end": "2504930"
  },
  {
    "text": "How did we get these numbers? Well you want to\nthink about this as you started\nwith an empty set,",
    "start": "2504930",
    "end": "2510120"
  },
  {
    "text": "and you kept inserting into it. And you were doing a sequence\nof insert and delete operations. And if I explain to you how\nan insert operation modifies",
    "start": "2510120",
    "end": "2519089"
  },
  {
    "text": "these numbers, that is\npretty much all you need. And of course, analogously,\nfor a delete operation.",
    "start": "2519090",
    "end": "2525970"
  },
  {
    "text": "So what would happen for, let's\nsay you wanted to insert 43?",
    "start": "2525970",
    "end": "2531180"
  },
  {
    "text": "You would insert\n43 at this point. And what you'd do is you\nfollow the insertion path",
    "start": "2531180",
    "end": "2539450"
  },
  {
    "text": "just like you did before. But when you're\nfollowing that path you're going to increment the\nnodes that you're seeing by 1.",
    "start": "2539450",
    "end": "2548569"
  },
  {
    "text": "So you're going\nto add 43 to this. And you'd add 5 plus\n1, because you see 49.",
    "start": "2548570",
    "end": "2560520"
  },
  {
    "text": "And then you would go\ndown and you'd see 46. And so you'd add 1 to that.",
    "start": "2560520",
    "end": "2567170"
  },
  {
    "text": "And then finally,\nyou add 43 and you assign-- since\nit's a leaf-- you'd assign to value corresponding\nto the subtree size",
    "start": "2567170",
    "end": "2574380"
  },
  {
    "text": "of this new node that you\nput in there, to be 1. It guess a little, teensy\nbit more complicated",
    "start": "2574380",
    "end": "2581200"
  },
  {
    "text": "when you want to do\nthe k minute check. But from a complexity\nstandpoint,",
    "start": "2581200",
    "end": "2586700"
  },
  {
    "text": "if you're not worried\nabout constant factors, you can just say, you know what? I'm going to first run\nthe regular insert,",
    "start": "2586700",
    "end": "2594320"
  },
  {
    "text": "ignoring the subtree sizes. And if it fails, I'm done.",
    "start": "2594320",
    "end": "2599500"
  },
  {
    "text": "Because I'm not going to\nmodify the BST, and I'm done. I'm not going to have to\nmodify the subtree sizes.",
    "start": "2599500",
    "end": "2605270"
  },
  {
    "text": "If it succeeds, then\nI'm going to go in, and I know now that I can\nincrement each of these nodes,",
    "start": "2605270",
    "end": "2611380"
  },
  {
    "text": "because I know I'm\ngoing to be successful. So that's sort of a trivial\nway of solving this problem, that from an asymptotic\ncomplexity standpoint",
    "start": "2611380",
    "end": "2618850"
  },
  {
    "text": "gives you your order\nh augmented insert. That make sense?",
    "start": "2618850",
    "end": "2624187"
  },
  {
    "text": "Now you could do something\nbetter than that. I mean, I would urge you,\nif you had wrote something",
    "start": "2624187",
    "end": "2629550"
  },
  {
    "text": "that-- we asked you to\nwrite something like this, to create a single procedure\nthat essentially uses",
    "start": "2629550",
    "end": "2635769"
  },
  {
    "text": "a recursion appropriately to\ndo the right thing in one pass through the BST.",
    "start": "2635770",
    "end": "2641590"
  },
  {
    "text": "And we'll talk about\nthings like that as we go along in sections,\nand possibly in lectures.",
    "start": "2641590",
    "end": "2648210"
  },
  {
    "text": "So that's the subtree\ninsert delete. Everyone buy that? Yeah, question back there.",
    "start": "2648210",
    "end": "2653692"
  },
  {
    "text": "AUDIENCE: If I wanted to delete\na number, like let's say 79-- PROFESSOR: Yep? AUDIENCE: --would we\nhave to take it out",
    "start": "2653693",
    "end": "2658703"
  },
  {
    "text": "and then rewrite the entire BST? PROFESSOR: What you'd have to\ndo is a bubble up pointers.",
    "start": "2658704",
    "end": "2664030"
  },
  {
    "text": "So you'd have to actually\nhave 64 connected to-- what",
    "start": "2664030",
    "end": "2670130"
  },
  {
    "text": "will happen is 83\nwould actually come up, and you would essentially\nhave some thing-- this",
    "start": "2670130",
    "end": "2676410"
  },
  {
    "text": "is not quite how it works--\nbut 83 would move up and you'd have 64 to the left. That's what would happened\nfor delete in this case.",
    "start": "2676410",
    "end": "2683309"
  },
  {
    "text": "So you would have to move\npointers in the case of delete. And we're not done with\nbinary search tree operations",
    "start": "2683310",
    "end": "2690670"
  },
  {
    "text": "from a standpoint of\nteaching you about them. We'll talk about them not\njust in today's lecture, but later as well.",
    "start": "2690670",
    "end": "2698670"
  },
  {
    "text": "So there's one\nthing missing here, though, which is I haven't\nquite figured out-- I've told you how these\nsubtree sizes work.",
    "start": "2698670",
    "end": "2705690"
  },
  {
    "text": "But it's not\ncompletely clear, this is the last thing we have\nto do, is how are you",
    "start": "2705690",
    "end": "2711339"
  },
  {
    "text": "going to compute rank t\nfrom the subtree sizes?",
    "start": "2711340",
    "end": "2717460"
  },
  {
    "text": "So everyone understand\nsubtree sizes? It's just the number of nodes\nthat are underneath you.",
    "start": "2717460",
    "end": "2723780"
  },
  {
    "text": "And you remember to count\nyourself, all right? Now what is rank t? Rank t is how many\nplanes are scheduled",
    "start": "2723780",
    "end": "2730860"
  },
  {
    "text": "to land at times less\nthan or equal to t. So now I have a BST structure\nthat looks like the one",
    "start": "2730860",
    "end": "2737460"
  },
  {
    "text": "and I just ended up with. So I've added this 43.",
    "start": "2737460",
    "end": "2742940"
  },
  {
    "text": "And so let me draw\nthat out here, and see if we can\nanswer this question.",
    "start": "2742940",
    "end": "2748160"
  },
  {
    "text": "This is a subtle question. So I got 49, and that\nsubtree size is 6.",
    "start": "2748160",
    "end": "2755830"
  },
  {
    "text": "I got 46, subtree size is 2. 43, 79, 64.",
    "start": "2755830",
    "end": "2767010"
  },
  {
    "text": "and 83.  So what I want is\nwhat lands before t?",
    "start": "2767010",
    "end": "2781640"
  },
  {
    "text": " And how do I do that?",
    "start": "2781640",
    "end": "2787420"
  },
  {
    "text": "Give me an algorithm\nthat would allow me to compute in order h time.",
    "start": "2787420",
    "end": "2795700"
  },
  {
    "text": "I want to do this\nin order h time. What lands before t? Someone?",
    "start": "2795700",
    "end": "2802759"
  },
  {
    "text": "Yeah. AUDIENCE: So first\nyou would have to find where to insert\nit, like we did before. PROFESSOR: Right, right.",
    "start": "2802759",
    "end": "2808285"
  },
  {
    "text": "AUDIENCE: And then because we\nhave the order of whatever it was before-- not\nthe order, the--",
    "start": "2808285",
    "end": "2814875"
  },
  {
    "text": "PROFESSOR: The sizes? The sizes? Yeah. AUDIENCE: And then we can\nlook what's more than it on the right, we can\nsubtract it and we get--",
    "start": "2814875",
    "end": "2822485"
  },
  {
    "text": "PROFESSOR: What is more\nthan it on the right. Do you want to say-- AUDIENCE: Because, like-- PROFESSOR: OK. AUDIENCE: --on the right-- PROFESSOR: Right.",
    "start": "2822485",
    "end": "2827768"
  },
  {
    "text": "AUDIENCE: --and then we\ncan take this minus this and we get what's left. PROFESSOR: That's\ngreat, that's excellent.",
    "start": "2827768",
    "end": "2833610"
  },
  {
    "text": "Excellent. So I'm going to do it a little\nbit differently from what you described.",
    "start": "2833610",
    "end": "2839010"
  },
  {
    "text": "I'm going to\nactually do it in a, sort of, a more positive\nway, no offense intended. What we're going to\ndo is we're going",
    "start": "2839010",
    "end": "2845095"
  },
  {
    "text": "to add up the things\nthat we want to add up. And what you have\nto do is walk--",
    "start": "2845095",
    "end": "2850520"
  },
  {
    "text": "your first step was right on. I mean, your answer is correct. I'm just going to do it\na little bit differently.",
    "start": "2850520",
    "end": "2858400"
  },
  {
    "text": "You walk down the tree\nto find the desired time. This is just your search.",
    "start": "2858400",
    "end": "2863809"
  },
  {
    "text": "We know how to do that. As you walk down you\nadd in the nodes that",
    "start": "2863810",
    "end": "2873840"
  },
  {
    "text": "is the subtree sizes-- you're\njust adding in the notes here. So if you see-- depending\non the number of nodes",
    "start": "2873840",
    "end": "2880140"
  },
  {
    "text": "that you see as you're\ngoing deeper in, you want to add in the nodes. And you're going to add\none to that, corresponding",
    "start": "2880140",
    "end": "2885619"
  },
  {
    "text": "to the nodes that are smaller. And we're going to add in the\nsubtree sizes to the left,",
    "start": "2885620",
    "end": "2892167"
  },
  {
    "text": "as opposed to subtracting. ",
    "start": "2892167",
    "end": "2899136"
  },
  {
    "text": "That may not make\na lot of sense. But I guarantee you it\nwill once we do an example. ",
    "start": "2899136",
    "end": "2914270"
  },
  {
    "text": "So what's going on here? I want to find a\nplace to insert. I'm not actually going\nto do the insert.",
    "start": "2914270",
    "end": "2920490"
  },
  {
    "text": "Think of it is doing a lookup. And along the way,\nI need to figure out",
    "start": "2920490",
    "end": "2925870"
  },
  {
    "text": "the less than operator. I want to find all\nof the things that are less than this\nvalue I'm searching for.",
    "start": "2925870",
    "end": "2931530"
  },
  {
    "text": "And so I have to do\na bit of arithmetic. So let's say that I'm\nlooking for what's",
    "start": "2931530",
    "end": "2940380"
  },
  {
    "text": "less than or equal to 79. So t equals 79.",
    "start": "2940380",
    "end": "2947720"
  },
  {
    "text": "So I'm going to look at 49. I'm going to walk down,\nI'm going to look at 49.",
    "start": "2947720",
    "end": "2953309"
  },
  {
    "text": "And because I say I'm\nlooking at 49-- and 49",
    "start": "2953310",
    "end": "2962670"
  },
  {
    "text": "is clearly less than 79. So I'm going to add 1.",
    "start": "2962670",
    "end": "2967960"
  },
  {
    "text": "And that's this check over here. I move on and what I need to\ndo now is move to the right,",
    "start": "2967960",
    "end": "2981830"
  },
  {
    "text": "because 79 is greater than 49. That's how my search would work.",
    "start": "2981830",
    "end": "2987400"
  },
  {
    "text": "But because I've\nmoved to the right, I'm going to add the subtree\nsizes that were to the left.",
    "start": "2987400",
    "end": "2995570"
  },
  {
    "text": "Because I know that all\nof the things to the left are clearly less than 79.",
    "start": "2995570",
    "end": "3001640"
  },
  {
    "text": "So I'm going to add 2,\ncorresponding to a subtree 46.",
    "start": "3001640",
    "end": "3010019"
  },
  {
    "text": "So I'm not actually\nlooking there. But I'm going to add\nall of that stuff in. I'm going to move to the right,\nand now I'm going to see 79.",
    "start": "3010020",
    "end": "3018250"
  },
  {
    "text": "At this point 79 is less\nthan or equal to 79.",
    "start": "3018250",
    "end": "3026890"
  },
  {
    "text": "So I'm going to see 79\nand I'm going to add 1.",
    "start": "3026890",
    "end": "3033289"
  },
  {
    "text": "And because I've added 79,\njust like I did with 49, I have to add the subtree\nsize to the left of 79.",
    "start": "3033290",
    "end": "3042090"
  },
  {
    "text": "So the final addition\nis I add 1 corresponding to the subtree 64.",
    "start": "3042090",
    "end": "3050760"
  },
  {
    "text": "And at this point\nI've discovered where I have to insert, I've\nessentially found the location,",
    "start": "3050760",
    "end": "3056039"
  },
  {
    "text": "it matches 79. And there was no modification\nrequired in this algorithm.",
    "start": "3056040",
    "end": "3061180"
  },
  {
    "text": "So if that was 78 you'd\nessentially do the same things. But you're done because you\nfound the value, or the place",
    "start": "3061180",
    "end": "3070670"
  },
  {
    "text": "that you want to insert. And you've done a\nbunch of additions. And you go look at add 1, add\n2, add 1, add 1, and you have 5.",
    "start": "3070670",
    "end": "3080160"
  },
  {
    "text": " And that's the\ncorrect answer, as you can see from this example.",
    "start": "3080160",
    "end": "3088440"
  },
  {
    "text": "So what's the bad news? The bad news was what\nthis lady said up",
    "start": "3088440",
    "end": "3093820"
  },
  {
    "text": "front, which was we haven't\nquite solved the problem. Because sadly, I could\neasily set things",
    "start": "3093820",
    "end": "3100589"
  },
  {
    "text": "up such that the height h is\norder n, h could be order n.",
    "start": "3100590",
    "end": "3109950"
  },
  {
    "text": "And if, for example, I\ngave you a sorted list, and I said insert into\nbinary search tree",
    "start": "3109950",
    "end": "3116650"
  },
  {
    "text": "that's originally null 43,\nand you put 43 in there. Then I say insert 46.",
    "start": "3116650",
    "end": "3122349"
  },
  {
    "text": "And then I say instead of 48. And then I say\ninsert 49, et cetera. And, you know, these\ncould be any numbers.",
    "start": "3122350",
    "end": "3129200"
  },
  {
    "text": "Then you see that what\ndoes this look like? Does it look like a tree? It looks like a list.",
    "start": "3129200",
    "end": "3136300"
  },
  {
    "text": "That's the bad news. And I'll let Eric give\nyou good news next week.",
    "start": "3136300",
    "end": "3143200"
  },
  {
    "text": "We need to have this notion of\nbalanced binary search trees. So everything I've said is true.",
    "start": "3143200",
    "end": "3148950"
  },
  {
    "text": "I did not lie. But the one extra\nthing is we need to make sure these trees are\nbalanced so h is order log n.",
    "start": "3148950",
    "end": "3155770"
  },
  {
    "text": "And then everything\nI said works. All right? See you next time.",
    "start": "3155770",
    "end": "3159950"
  }
]