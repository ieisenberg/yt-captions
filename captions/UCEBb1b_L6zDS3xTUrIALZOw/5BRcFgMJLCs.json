[
  {
    "text": "In this problem, we will examine how compilers\ntranslate high level language descriptions",
    "start": "1030",
    "end": "6519"
  },
  {
    "text": "into assembly language.\nWe will be given several code fragments and",
    "start": "6519",
    "end": "11049"
  },
  {
    "text": "asked to help the compiler in figuring out\nthe dependencies of the program so that it",
    "start": "11049",
    "end": "15759"
  },
  {
    "text": "produces valid code.\nLet's begin with the code fragment: a = b",
    "start": "15759",
    "end": "22740"
  },
  {
    "text": "+ 3*c.\nWe can assume that our variables: a, b, and",
    "start": "22740",
    "end": "27510"
  },
  {
    "text": "c are stored in memory.\nWe can also assume that registers may be used",
    "start": "27510",
    "end": "32439"
  },
  {
    "text": "to store intermediate results.\nGiven the following partially completed assembly",
    "start": "32439",
    "end": "37920"
  },
  {
    "text": "code, let's determine the missing values that\nthe compiler would have had to determine.",
    "start": "37920",
    "end": "43378"
  },
  {
    "text": "We begin with XXX which is the first instruction.\nThe first instruction is trying to put the",
    "start": "43379",
    "end": "49160"
  },
  {
    "text": "value of c into register R1.\nSince c comes from memory, that means that",
    "start": "49160",
    "end": "54130"
  },
  {
    "text": "instruction XXX must be a LD operation where\nc is the address of the variable to be loaded.",
    "start": "54130",
    "end": "62300"
  },
  {
    "text": "Note that LD(c, R1) is actually a macro instruction\nthat is equal to LD(R31, c, R1).",
    "start": "62300",
    "end": "73840"
  },
  {
    "text": "The load operation would add the constant\nc to the value of register R31, which is always",
    "start": "73840",
    "end": "79710"
  },
  {
    "text": "0, thus ending up with the address c as the\nsource address of the load operation.",
    "start": "79710",
    "end": "85110"
  },
  {
    "text": "R1 is a temporary register that will hold\nthe value of variable c.",
    "start": "85110",
    "end": "89930"
  },
  {
    "text": "Next, we need to multiply c by 3.\nMultiply operations are generally very expensive,",
    "start": "89930",
    "end": "98560"
  },
  {
    "text": "so it is the compilers job to figure out that\nthis operation could potentially be achieved",
    "start": "98560",
    "end": "103240"
  },
  {
    "text": "by 2 simpler and faster operations.\nThe comment tells us that it first tries to",
    "start": "103240",
    "end": "109159"
  },
  {
    "text": "compute 2 * c and store that result into R0.\nSince R1 = c, and the constant in this operation",
    "start": "109159",
    "end": "117390"
  },
  {
    "text": "is a 1, we need to realize that the inexpensive\noperation that the compiler would use for",
    "start": "117390",
    "end": "122869"
  },
  {
    "text": "this is a logical shift to the left by one\nposition.",
    "start": "122869",
    "end": "127549"
  },
  {
    "text": "In binary, this produces the same result as\nmultiplying a number by 2.",
    "start": "127549",
    "end": "132190"
  },
  {
    "text": "So YYY = SHLC.\nNote that we use the constant version of the",
    "start": "132190",
    "end": "141260"
  },
  {
    "text": "SHL operation since the amount to shift is\ngiven by a constant in our instruction rather",
    "start": "141260",
    "end": "146650"
  },
  {
    "text": "than being read from another register.\nThe next instruction is provided for us and",
    "start": "146650",
    "end": "152209"
  },
  {
    "text": "it adds R0 which equals 2*c to R1 which equals\nc in order to produce 3*c.",
    "start": "152209",
    "end": "161420"
  },
  {
    "text": "This intermediate result is then stored back\ninto R0.",
    "start": "161420",
    "end": "166580"
  },
  {
    "text": "Next we want to once again get the value of\na variable from memory.",
    "start": "166580",
    "end": "170680"
  },
  {
    "text": "As we saw before, XXX = LD in order to load\nthe contents of address b into register R1.",
    "start": "170680",
    "end": "179299"
  },
  {
    "text": "We are almost done, we now just need to add\nR1 = b to R0 = 3*c and then store the result",
    "start": "179299",
    "end": "187730"
  },
  {
    "text": "back into memory variable a.\nSince the store instruction is using R0 as",
    "start": "187730",
    "end": "193819"
  },
  {
    "text": "its source, that means that ZZZ must also\nbe R0 so that the correct value ends up in",
    "start": "193820",
    "end": "200360"
  },
  {
    "text": "variable a.\nNext, we will take a look at how a conditional",
    "start": "200360",
    "end": "205159"
  },
  {
    "text": "statement would be compiled into assembly\nlanguage.",
    "start": "205159",
    "end": "208980"
  },
  {
    "text": "The statement says that if a is greater than\nb then c should be assigned the value 17.",
    "start": "208980",
    "end": "216470"
  },
  {
    "text": "Once again we are given the semi-complete\ntranslation of the high level language code",
    "start": "216470",
    "end": "221090"
  },
  {
    "text": "into beta assembly.\nFor this example, we first load the values",
    "start": "221090",
    "end": "225870"
  },
  {
    "text": "of our variables a and b into temporary registers\nR0 and R1.",
    "start": "225870",
    "end": "232840"
  },
  {
    "text": "Now we want to check if a is greater than\nb and if so set c = 17.",
    "start": "232840",
    "end": "238439"
  },
  {
    "text": "We know that XXX must be some kind of beta\ncomparison operation.",
    "start": "238439",
    "end": "243459"
  },
  {
    "text": "However, the beta does not provide a compare\ngreater than operation, so instead we need",
    "start": "243459",
    "end": "249160"
  },
  {
    "text": "to make use of the compare less than (CMPLT)\nor compare less than or equal (CMPLE) operations.",
    "start": "249160",
    "end": "255250"
  },
  {
    "text": "Since we see that the store into label c is\nskipped when the code branches to label _L2,",
    "start": "255250",
    "end": "262060"
  },
  {
    "text": "we want to make sure that the branch is not\ntaken when a is greater than b.",
    "start": "262060",
    "end": "267490"
  },
  {
    "text": "This is equivalent to the branch being taken\nwhen a is less than or equal to b.",
    "start": "267490",
    "end": "272388"
  },
  {
    "text": "So if we make XXX = CMPLE of R0, which equals\na, and R1, which equals b, then the result",
    "start": "272389",
    "end": "283420"
  },
  {
    "text": "stored into R0 will be 1 if a <= b.\nWe then set YYY to R0 to ensure that we take",
    "start": "283420",
    "end": "293750"
  },
  {
    "text": "the branch when a <= b and we make the assignment\nto c when a > b.",
    "start": "293750",
    "end": "300550"
  },
  {
    "text": "Finally, if we set ZZZ = 17, then when the\nbranch is not taken, we will move 17 into",
    "start": "300550",
    "end": "309508"
  },
  {
    "text": "R0 and then store that value into the location\npointed to by address c.",
    "start": "309509",
    "end": "316250"
  },
  {
    "text": "So the complete translation of this conditional\nstatement to beta assembly is shown here.",
    "start": "316250",
    "end": "325419"
  },
  {
    "text": "For this next code segment, we are going to\ntake a look at how a compiler would convert",
    "start": "325419",
    "end": "329509"
  },
  {
    "text": "array accesses into beta code.\nOnce again we are given partially completed",
    "start": "329509",
    "end": "335250"
  },
  {
    "text": "assembly code to help us understand how the\ncompiler translates this high level code into",
    "start": "335250",
    "end": "340690"
  },
  {
    "text": "beta assembly.\nWe begin with a load of the value stored at",
    "start": "340690",
    "end": "344819"
  },
  {
    "text": "location i into register R0.\nI is the index into our array.",
    "start": "344819",
    "end": "351300"
  },
  {
    "text": "However, since the beta is byte addressed,\nbut it deals with 32 bit values, that means",
    "start": "351300",
    "end": "357039"
  },
  {
    "text": "that each array element requires 4 bytes of\nstorage.",
    "start": "357039",
    "end": "361120"
  },
  {
    "text": "So in order to point to the correct location\nin memory, we need to multiply i by 4.",
    "start": "361120",
    "end": "368710"
  },
  {
    "text": "As we saw earlier, shifting to the left by\n1 bit is equivalent to multiplying by 2, so",
    "start": "368710",
    "end": "374481"
  },
  {
    "text": "here we shift to the left by 2 bits in order\nto multiply by 4.",
    "start": "374481",
    "end": "379690"
  },
  {
    "text": "So XXX = 2.\nNow that R0 = 4 * i, in order to load a[i],",
    "start": "379690",
    "end": "391840"
  },
  {
    "text": "we would load the location a + 4*i.\nIn order to load a[i-1], we need to load the",
    "start": "391840",
    "end": "399819"
  },
  {
    "text": "location that is 4 bytes before that, so location\na + 4*i â€“ 4.",
    "start": "399819",
    "end": "407940"
  },
  {
    "text": "This means that in this load operation which\nactually wants to load a[i-1], we need to",
    "start": "407940",
    "end": "414310"
  },
  {
    "text": "set YYY = a-4.\nSo this load operation places array element",
    "start": "414310",
    "end": "423419"
  },
  {
    "text": "a[i-1] into R1.\nNow we want to store the contents of R1 into",
    "start": "423419",
    "end": "431970"
  },
  {
    "text": "array element a[i] which is located at address\na + 4*i.",
    "start": "431970",
    "end": "438110"
  },
  {
    "text": "Since R0 already equals 4*i, then adding a\nto R0 will give us the desired destination",
    "start": "438110",
    "end": "444888"
  },
  {
    "text": "address of our store.\nThis means that we just need to set ZZZ to",
    "start": "444889",
    "end": "449610"
  },
  {
    "text": "R1 since that is the value that we want to\nstore into a[i].",
    "start": "449610",
    "end": "457610"
  },
  {
    "text": "Let's take a look at one last example.\nHere we have a variable sum that is initialized",
    "start": "457610",
    "end": "463620"
  },
  {
    "text": "to 0, followed by a loop that increments the\nvalue of sum by i for every value of i between",
    "start": "463620",
    "end": "471110"
  },
  {
    "text": "0 and 9.\nOur partial mostly completed compiled code",
    "start": "471110",
    "end": "476418"
  },
  {
    "text": "is shown here.\nThe first thing that the compiler does, is",
    "start": "476419",
    "end": "480659"
  },
  {
    "text": "it initializes the two variables sum and i\nto 0.",
    "start": "480659",
    "end": "485099"
  },
  {
    "text": "This is done by storing the value of register\nR31, which is always 0 in the beta, into the",
    "start": "485099",
    "end": "491960"
  },
  {
    "text": "locations pointed to by sum and by i.\n_L7 is a label that indicates the beginning",
    "start": "491960",
    "end": "498449"
  },
  {
    "text": "of our loop.\nThe first thing that needs to happen in the",
    "start": "498449",
    "end": "501810"
  },
  {
    "text": "loop is to load the current values of sum\nand i from memory.",
    "start": "501810",
    "end": "506470"
  },
  {
    "text": "Next, sum should be incremented by i.\nSince R0 is stored back into sum, we want",
    "start": "506470",
    "end": "513890"
  },
  {
    "text": "XXX = R0 to be the destination register of\nthe ADD.",
    "start": "513890",
    "end": "519599"
  },
  {
    "text": "Now the loop index needs to be incremented.\nSince R1 = i, that means that we want to increment",
    "start": "519600",
    "end": "526269"
  },
  {
    "text": "R1 by 1,so YYY = R1.\nFinally, we need to determine whether the",
    "start": "526270",
    "end": "533210"
  },
  {
    "text": "loop needs to be repeated or we are done.\nThis is done by checking whether i is less",
    "start": "533210",
    "end": "538560"
  },
  {
    "text": "than 10.\nThe beta provides the CMPLTC operation to",
    "start": "538560",
    "end": "543430"
  },
  {
    "text": "do just that.\nSince R1 holds the latest value of i, comparing",
    "start": "543430",
    "end": "549010"
  },
  {
    "text": "R1 to the constant 10 will produce the result\nwe want in R0.",
    "start": "549010",
    "end": "553860"
  },
  {
    "text": "So ZZZ = 10.\nIf the comparison was true, then we need to",
    "start": "553860",
    "end": "560779"
  },
  {
    "text": "repeat the loop so we branch back to _L7.\nIf not, we proceed to the instruction after",
    "start": "560780",
    "end": "567460"
  },
  {
    "text": "the branch.",
    "start": "567460",
    "end": "568260"
  }
]