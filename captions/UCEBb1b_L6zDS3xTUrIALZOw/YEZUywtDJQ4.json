[
  {
    "text": "In order to understand how procedures are\nimplemented on the beta, we will take a look",
    "start": "1350",
    "end": "6029"
  },
  {
    "text": "at a mystery function and its translation\ninto beta assembly code.",
    "start": "6029",
    "end": "11770"
  },
  {
    "text": "The mystery function is shown here:\nThe function f takes an argument x as an input.",
    "start": "11770",
    "end": "18290"
  },
  {
    "text": "It then performs a logical AND operation on\nthe input x and the constant 5 to produce",
    "start": "18290",
    "end": "24090"
  },
  {
    "text": "the variable a.\nAfter that, it checks if the input x is equal",
    "start": "24090",
    "end": "28840"
  },
  {
    "text": "to 0, and if so returns the value 0, otherwise\nit returns an unknown value which we need",
    "start": "28840",
    "end": "35600"
  },
  {
    "text": "to determine.\nWe are provided with the translation of this",
    "start": "35600",
    "end": "39550"
  },
  {
    "text": "C code into beta assembly as shown here.\nWe take a closer look at the various parts",
    "start": "39550",
    "end": "45050"
  },
  {
    "text": "of this code to understand how this function\nas well as procedures in general work on the",
    "start": "45050",
    "end": "50899"
  },
  {
    "text": "beta.\nThe code that calls the procedure is responsible",
    "start": "50899",
    "end": "56010"
  },
  {
    "text": "for pushing any arguments onto the stack.\nThis is shown in pink in the code and on the",
    "start": "56010",
    "end": "61588"
  },
  {
    "text": "stack.\nIf there are multiple arguments then they",
    "start": "61589",
    "end": "65180"
  },
  {
    "text": "are pushed in reverse order so that the first\nargument is always in the same location relative",
    "start": "65180",
    "end": "71580"
  },
  {
    "text": "to the BP, or base pointer, register which\nwe will see in a moment.",
    "start": "71580",
    "end": "77280"
  },
  {
    "text": "The BR instruction branches to label f after\nstoring the return address, which is b, into",
    "start": "77280",
    "end": "83938"
  },
  {
    "text": "the LP, or linkage pointer, register.\nIn yellow, we see the entry sequence for the",
    "start": "83939",
    "end": "90960"
  },
  {
    "text": "procedure.\nThe structure of this entry sequence is identical",
    "start": "90960",
    "end": "95000"
  },
  {
    "text": "for all procedures.\nThe first thing it does is PUSH(LP) which",
    "start": "95000",
    "end": "100159"
  },
  {
    "text": "pushes the LP register onto the stack immediately\nafter the arguments that were pushed onto",
    "start": "100159",
    "end": "105670"
  },
  {
    "text": "the stack by the caller.\nNext it pushes the BP onto the stack in order",
    "start": "105670",
    "end": "111468"
  },
  {
    "text": "to save the most recent value of the BP register\nbefore updating it.",
    "start": "111469",
    "end": "116749"
  },
  {
    "text": "Now, a MOVE(SP, BP) is performed.\nSP is the stack pointer which always points",
    "start": "116749",
    "end": "124270"
  },
  {
    "text": "to the next empty location on the stack.\nAt the time that this MOVE operation is executed,",
    "start": "124270",
    "end": "130780"
  },
  {
    "text": "the SP, points to the location immediately\nfollowing the saved BP.",
    "start": "130780",
    "end": "135950"
  },
  {
    "text": "This move instruction makes the BP point to\nthe same location that the SP is currently",
    "start": "135950",
    "end": "141260"
  },
  {
    "text": "pointing to, which is the location that is\nimmediately following the saved BP.",
    "start": "141260",
    "end": "147319"
  },
  {
    "text": "Note, that once the BP register is set up,\none can always find the first argument at",
    "start": "147320",
    "end": "153360"
  },
  {
    "text": "location BP – 12 (or in other words, 3 words\nbefore the current BP register).",
    "start": "153360",
    "end": "161100"
  },
  {
    "text": "If there was a second argument, it could be\nfound in location BP – 16, and so on.",
    "start": "161100",
    "end": "168480"
  },
  {
    "text": "Next, we allocate space on the stack for any\nlocal variables.",
    "start": "168480",
    "end": "173849"
  },
  {
    "text": "This procedure allocates space for one local\nvariable.",
    "start": "173850",
    "end": "177590"
  },
  {
    "text": "Finally, we push all registers that are going\nto be modified by our procedure onto the stack.",
    "start": "177590",
    "end": "183980"
  },
  {
    "text": "Doing this makes it possible to recover the\nregisters' original values once the procedure",
    "start": "183980",
    "end": "188810"
  },
  {
    "text": "completes execution.\nIn this example, register R1 is saved onto",
    "start": "188810",
    "end": "193959"
  },
  {
    "text": "the stack.\nOnce the entry sequence is complete, the BP",
    "start": "193960",
    "end": "199090"
  },
  {
    "text": "register still points to the location immediately\nfollowing the saved BP.",
    "start": "199090",
    "end": "203430"
  },
  {
    "text": "The SP, however, now points to the location\nimmediately following the saved R1 register.",
    "start": "203430",
    "end": "211560"
  },
  {
    "text": "So for this procedure, after executing the\nentry sequence, the stack has been modified",
    "start": "211560",
    "end": "216780"
  },
  {
    "text": "as shown here.\nThe procedure return, or exit, sequence for",
    "start": "216780",
    "end": "221260"
  },
  {
    "text": "all beta procedures follows the same structure.\nIt is assumed that the return value for the",
    "start": "221260",
    "end": "227150"
  },
  {
    "text": "procedure has already been placed into register\nR0.",
    "start": "227150",
    "end": "231379"
  },
  {
    "text": "Next, all registers that were used in the\nprocedure body, are restored to their original",
    "start": "231380",
    "end": "237420"
  },
  {
    "text": "values.\nThis is followed by deallocating all of the",
    "start": "237420",
    "end": "240690"
  },
  {
    "text": "local variables from the stack.\nWe then restore the BP, followed by the LP",
    "start": "240690",
    "end": "246300"
  },
  {
    "text": "register.\nFinally, we jump to LP which contains the",
    "start": "246300",
    "end": "250560"
  },
  {
    "text": "return address of our procedure.\nIn this case, LP contains the address b which",
    "start": "250560",
    "end": "256380"
  },
  {
    "text": "is the address of the next instruction that\nshould be executed following the execution",
    "start": "256380",
    "end": "261410"
  },
  {
    "text": "of the f procedure.\nTaking a closer look at the details for our",
    "start": "261410",
    "end": "266860"
  },
  {
    "text": "example, we see that we begin our exit sequence\nwith POP(R1) in order to restore the original",
    "start": "266860",
    "end": "272879"
  },
  {
    "text": "value of register R1.\nNote that this also frees up the location",
    "start": "272880",
    "end": "277390"
  },
  {
    "text": "on the stack that was used to store the value\nof R1.",
    "start": "277390",
    "end": "281280"
  },
  {
    "text": "Next, we get rid of the local variables we\nstored on the stack.",
    "start": "281280",
    "end": "286190"
  },
  {
    "text": "This is achieved using the MOVE(BP, SP) instruction\nwhich makes the SP point to the same location",
    "start": "286190",
    "end": "293110"
  },
  {
    "text": "as the BP thus specifying that all the locations\nfollowing the updated SP are now considered",
    "start": "293110",
    "end": "300969"
  },
  {
    "text": "unused.\nNext, we restore the BP register.",
    "start": "300970",
    "end": "305010"
  },
  {
    "text": "Restoring the BP register is particularly\nimportant for nested procedure calls.",
    "start": "305010",
    "end": "310490"
  },
  {
    "text": "If we did not restore the BP register, then\nupon return to the calling procedure, the",
    "start": "310490",
    "end": "315680"
  },
  {
    "text": "calling procedure would no longer have a correct\nBP, so it would not be able to rely on the",
    "start": "315680",
    "end": "321530"
  },
  {
    "text": "fact that it's first argument is located at\nlocation BP-12, for example.",
    "start": "321530",
    "end": "327560"
  },
  {
    "text": "Finally, we restore the LP register and JMP\nto the location of the restored LP register.",
    "start": "327560",
    "end": "334550"
  },
  {
    "text": "This is the return address, so by jumping\nto LP, we return from our procedure call and",
    "start": "334550",
    "end": "340080"
  },
  {
    "text": "are now ready to execute the next instruction\nat label b.",
    "start": "340080",
    "end": "343960"
  },
  {
    "text": "Now let's get back to our original procedure\nand its translation to beta assembly.",
    "start": "343960",
    "end": "349250"
  },
  {
    "text": "We will now try to understand what this mystery\nfunction is actually doing by examining the",
    "start": "349250",
    "end": "354380"
  },
  {
    "text": "remaining sections of our assembly code highlighted\nhere.",
    "start": "354380",
    "end": "359750"
  },
  {
    "text": "Let's zoom into the highlighted code.\nThe LD instruction loads the first argument",
    "start": "359750",
    "end": "365660"
  },
  {
    "text": "into register R0.\nRecall that the first argument can always",
    "start": "365660",
    "end": "370060"
  },
  {
    "text": "be found at location BP – 12, or in other\nwords, 3 words before the current BP register.",
    "start": "370060",
    "end": "377590"
  },
  {
    "text": "This means that the value x is loaded into\nR0.",
    "start": "377590",
    "end": "382960"
  },
  {
    "text": "Next we perform a binary AND operation between\nR0 and the constant 5, and store the result",
    "start": "382960",
    "end": "389020"
  },
  {
    "text": "of that operation into register R1.\nNote that its okay to overwrite R1 because",
    "start": "389020",
    "end": "395330"
  },
  {
    "text": "the entry sequence already saved a copy of\nthe original R1 onto the stack.",
    "start": "395330",
    "end": "400580"
  },
  {
    "text": "Also, note that overwriting R0 is considered\nfine because we ultimately expect the result",
    "start": "400580",
    "end": "406789"
  },
  {
    "text": "to be returned in R0, so there is no expectation\nof maintaining the original value of R0.",
    "start": "406790",
    "end": "415540"
  },
  {
    "text": "Looking back at the c code of our function,\nwe see that the bitwise AND of x and 5 is",
    "start": "415540",
    "end": "420960"
  },
  {
    "text": "stored into a local variable named a.\nIn our entry sequence, we allocated 1 word",
    "start": "420960",
    "end": "428380"
  },
  {
    "text": "on the stack for our local variables.\nThat is where we want to store this intermediate",
    "start": "428381",
    "end": "433390"
  },
  {
    "text": "result.\nThe address of this location is equal to the",
    "start": "433390",
    "end": "436850"
  },
  {
    "text": "contents of the BP register.\nSince the destination of a store operation",
    "start": "436850",
    "end": "443330"
  },
  {
    "text": "is determined by adding the contents of the\nlast register in the instruction to the constant,",
    "start": "443330",
    "end": "449150"
  },
  {
    "text": "the destination of this store operation is\nthe value of BP + 0.",
    "start": "449150",
    "end": "454590"
  },
  {
    "text": "So as expected, variable a is stored at the\nlocation pointed to by the BP register.",
    "start": "454590",
    "end": "461800"
  },
  {
    "text": "Now we check if x equals 0 and if so we want\nto return the value 0.",
    "start": "461800",
    "end": "467360"
  },
  {
    "text": "This is achieved in beta assembly by checking\nif R0 is equal to 0 since R0 was loaded with",
    "start": "467360",
    "end": "473840"
  },
  {
    "text": "the value of x by the LD operation.\nThe BEQ operation checks whether or not this",
    "start": "473840",
    "end": "480110"
  },
  {
    "text": "condition holds and if so, it branches to\nlabel bye which is our exit sequence.",
    "start": "480110",
    "end": "486270"
  },
  {
    "text": "In that situation, we just saw that R0 = 0,\nso R0 already contains the correct return",
    "start": "486270",
    "end": "492900"
  },
  {
    "text": "value and we are ready to execute our return\nsequence.",
    "start": "492900",
    "end": "498460"
  },
  {
    "text": "If x is not equal to 0, then we perform the\ninstructions after label xx.",
    "start": "498460",
    "end": "503780"
  },
  {
    "text": "By figuring out what these instructions do,\nwe can identify the value of our mystery function",
    "start": "503780",
    "end": "510100"
  },
  {
    "text": "labeled ?????.\nWe begin by decrementing R0 by 1.",
    "start": "510100",
    "end": "516909"
  },
  {
    "text": "This means that R0 will be updated to hold\nx-1.",
    "start": "516909",
    "end": "521209"
  },
  {
    "text": "We then push this value onto the stack and\nmake a recursive call to procedure f.",
    "start": "521209",
    "end": "526199"
  },
  {
    "text": "In other words, we call f again with a new\nargument which is equal to x-1.",
    "start": "526199",
    "end": "531878"
  },
  {
    "text": "So far we know that our mystery function will\ncontain the term f(x-1).",
    "start": "531879",
    "end": "538089"
  },
  {
    "text": "We also see that LP gets updated with the\nnew return address which is yy + 4.",
    "start": "538089",
    "end": "545769"
  },
  {
    "text": "So just before our recursive call to f with\nthe new argument x-1, our stack looks like",
    "start": "545769",
    "end": "551680"
  },
  {
    "text": "this.\nAfter the procedure entry sequence is executed",
    "start": "551680",
    "end": "557850"
  },
  {
    "text": "in the first recursive call, our stack looks\nlike this.",
    "start": "557850",
    "end": "561910"
  },
  {
    "text": "Note that this time the saved LP is yy + 4\nbecause that is our return address for the",
    "start": "561910",
    "end": "567670"
  },
  {
    "text": "recursive procedure call.\nThe previous BP points to where the BP was",
    "start": "567670",
    "end": "573019"
  },
  {
    "text": "pointing to in the original call to f.\nAnother term for this group of stack elements",
    "start": "573019",
    "end": "578829"
  },
  {
    "text": "is the activation record.\nIn this example, each activation record consists",
    "start": "578829",
    "end": "583910"
  },
  {
    "text": "of 5 elements.\nThese are the argument to f, the saved LP,",
    "start": "583910",
    "end": "589199"
  },
  {
    "text": "the saved BP, the local variable, and the\nsaved R1.",
    "start": "589199",
    "end": "594339"
  },
  {
    "text": "Each time that f is called recursively another\nactivation record will be added to the stack.",
    "start": "594339",
    "end": "601230"
  },
  {
    "text": "When we finally return from all of these recursive\ncalls, we are back to a stack that looks like",
    "start": "601230",
    "end": "606019"
  },
  {
    "text": "this with a single activation record left\non the stack plus the first argument with",
    "start": "606019",
    "end": "611350"
  },
  {
    "text": "which the recursive call was made.\nThe DEALLOCATE(1) instruction then removes",
    "start": "611350",
    "end": "616550"
  },
  {
    "text": "this argument from the stack.\nSo the SP is now pointing to the location",
    "start": "616550",
    "end": "623130"
  },
  {
    "text": "where we previously pushed the argument x-1.\nR0 holds the return value from the recursive",
    "start": "623130",
    "end": "630459"
  },
  {
    "text": "call to f which is the value of f(x-1).\nNow, we execute a LD into register R1 of the",
    "start": "630459",
    "end": "638920"
  },
  {
    "text": "address that is the contents of register BP\n+ 0.",
    "start": "638920",
    "end": "643178"
  },
  {
    "text": "This value is a.\nWe then ADD R1 to R0 to produce our final",
    "start": "643179",
    "end": "648110"
  },
  {
    "text": "result in R0.\nR0 is now equal to a + f(x-1), so we have",
    "start": "648110",
    "end": "655428"
  },
  {
    "text": "discovered that our mystery function is a\n+ f(x-1).",
    "start": "655429",
    "end": "661819"
  },
  {
    "text": "Before we continue with analyzing a stack\ntrace from this problem, let's answer a few",
    "start": "661819",
    "end": "666300"
  },
  {
    "text": "simpler questions.\nThe first question is whether or not variable",
    "start": "666300",
    "end": "670399"
  },
  {
    "text": "a, from the statement a = x & 5, is stored\non the stack and if so where is it stored",
    "start": "670399",
    "end": "676779"
  },
  {
    "text": "relative to the BP register.\nEarlier we saw that our assembly program allocates",
    "start": "676779",
    "end": "682670"
  },
  {
    "text": "space for one local variable on the stack.\nIt then stores R1, which holds the result",
    "start": "682670",
    "end": "688279"
  },
  {
    "text": "of performing a binary ANDC between x and\nthe constant 5, into the location pointed",
    "start": "688279",
    "end": "694800"
  },
  {
    "text": "to by the BP register, as shown here.\nNext, we want to translate the instruction",
    "start": "694800",
    "end": "701779"
  },
  {
    "text": "at label yy into its binary representation.\nThe instruction at label yy is BR(f, LP).",
    "start": "701779",
    "end": "712559"
  },
  {
    "text": "This instruction is actually a macro that\ntranslates to a BEQ(R31, f, LP).",
    "start": "712559",
    "end": "721220"
  },
  {
    "text": "Note that because R31 always equals 0, this\nbranch is always taken.",
    "start": "721220",
    "end": "727759"
  },
  {
    "text": "The format of the binary representation for\nthis instruction is a 6-bit opcode, followed",
    "start": "727760",
    "end": "734279"
  },
  {
    "text": "by a 5 bit Rc identifier, followed by another\n5 bits which specify Ra, and then followed",
    "start": "734279",
    "end": "741378"
  },
  {
    "text": "by a 16 bit literal.\nThe opcode for BEQ is 011100.",
    "start": "741379",
    "end": "747959"
  },
  {
    "text": "Rc = LP which is register R28.\nThe 5-bit encoding of 28 is 11100.",
    "start": "747959",
    "end": "757910"
  },
  {
    "text": "Ra is R31 whose encoding is 11111.\nNow, we need to determine the value of the",
    "start": "757910",
    "end": "767079"
  },
  {
    "text": "literal in this instruction.\nThe literal in a branch instruction stores",
    "start": "767079",
    "end": "771868"
  },
  {
    "text": "the offset measured in words from the instruction\nimmediately following the branch, to the destination",
    "start": "771869",
    "end": "777959"
  },
  {
    "text": "address.\nLooking at our assembly code for this function,",
    "start": "777959",
    "end": "782259"
  },
  {
    "text": "we see that we want to count the number of\nwords from the DEALLOCATE(1) instruction back",
    "start": "782259",
    "end": "787220"
  },
  {
    "text": "to label f.\nRecall that the PUSH and POP macros are actually",
    "start": "787220",
    "end": "792589"
  },
  {
    "text": "each made of up two instructions so each of\nthose counts as 2 words.",
    "start": "792589",
    "end": "798490"
  },
  {
    "text": "Counting back, and accounting for the two\ninstructions per push and pop, we see that",
    "start": "798490",
    "end": "803339"
  },
  {
    "text": "we have to go back 16 instructions, so our\nliteral is -16 expressed as a 16 bit binary",
    "start": "803339",
    "end": "811839"
  },
  {
    "text": "number.\nPositive 16 is 0000 0000 0001 0000, so -16",
    "start": "811839",
    "end": "821850"
  },
  {
    "text": "is 1111 1111 1111 0000.\nNow, suppose that the function f is called",
    "start": "821850",
    "end": "832628"
  },
  {
    "text": "from an external main program, and the machine\nis halted when a recursive call to f is about",
    "start": "832629",
    "end": "838230"
  },
  {
    "text": "to execute the BEQ instruction tagged xx.\nThe BP register of the halted machine contains",
    "start": "838230",
    "end": "846870"
  },
  {
    "text": "0x174, and the hex contents of a region of\nmemory are shown here.",
    "start": "846870",
    "end": "854100"
  },
  {
    "text": "The values on the left of the stack are the\naddresses of each location on the stack.",
    "start": "854100",
    "end": "859360"
  },
  {
    "text": "We first want to determine the current value\nof the SP, or stack pointer, register.",
    "start": "859360",
    "end": "866199"
  },
  {
    "text": "We were told that the machine is halted when\na recursive call to f is about to execute",
    "start": "866199",
    "end": "871430"
  },
  {
    "text": "the BEQ instruction tagged xx.\nAnd that the BP register was 0x174 at that",
    "start": "871430",
    "end": "881309"
  },
  {
    "text": "point.\nWe see that after the BP was updated to be",
    "start": "881309",
    "end": "885540"
  },
  {
    "text": "equal to the SP in the MOVE operation, two\nadditional entries were made on the stack.",
    "start": "885540",
    "end": "892019"
  },
  {
    "text": "The first was an ALLOCATE instruction which\nallocated space for one local variable, thus",
    "start": "892019",
    "end": "897738"
  },
  {
    "text": "making the SP point to location 0x178, and\nthen PUSH(R1), which saves a copy of R1 on",
    "start": "897739",
    "end": "906721"
  },
  {
    "text": "the stack, thus moving the SP register one\nfurther location down to 0x17C.",
    "start": "906721",
    "end": "915739"
  },
  {
    "text": "We now want to answer some questions about\nthe stack trace itself to help us better understand",
    "start": "915739",
    "end": "921420"
  },
  {
    "text": "its structure.\nWe first want to determine the value of local",
    "start": "921420",
    "end": "925980"
  },
  {
    "text": "variable a in the current stack frame.\nWe know that a is stored at location BP +",
    "start": "925980",
    "end": "933639"
  },
  {
    "text": "0.\nSo a is the variable stored at address 0x174,",
    "start": "933639",
    "end": "939040"
  },
  {
    "text": "and that value is 5.\nFrom here, we can label all the entries in",
    "start": "939040",
    "end": "944199"
  },
  {
    "text": "the stack trace as follows.\nWe saw earlier, that each activation record",
    "start": "944199",
    "end": "949998"
  },
  {
    "text": "consists of 5 words, the argument x followed\nby the saved LP, the saved BP, the local variable,",
    "start": "949999",
    "end": "957600"
  },
  {
    "text": "and the saved register R1.\nWe can apply this structure to label our stack",
    "start": "957600",
    "end": "962829"
  },
  {
    "text": "trace.\nNow that our stack trace is fully labeled",
    "start": "962829",
    "end": "966779"
  },
  {
    "text": "we can take a closer look at the details of\nimplementing procedures on the beta.",
    "start": "966779",
    "end": "972130"
  },
  {
    "text": "We begin by looking at the multiple LP values\nthat were stored on the stack.",
    "start": "972130",
    "end": "977049"
  },
  {
    "text": "Note that the first one at address 0x144 has\na value of 0x5C whereas the following two",
    "start": "977049",
    "end": "985309"
  },
  {
    "text": "have a value of 0xA4.\nThis occurs because the LP value stored at",
    "start": "985309",
    "end": "990799"
  },
  {
    "text": "address 0x144 is the return address from the\nmain procedure that originally called procedure",
    "start": "990799",
    "end": "997759"
  },
  {
    "text": "f, whereas the following two LP values are\nthe return addresses from recursive calls",
    "start": "997759",
    "end": "1003310"
  },
  {
    "text": "to f made from within the f function itself.\nUsing this information you can now answer",
    "start": "1003310",
    "end": "1009639"
  },
  {
    "text": "the question: What is the address of the BR\ninstruction that made the original call to",
    "start": "1009639",
    "end": "1015399"
  },
  {
    "text": "f from the external main program?\nRecall that the value stored in the LP register",
    "start": "1015399",
    "end": "1021069"
  },
  {
    "text": "is actually the return address which is the\naddress of the instruction immediately following",
    "start": "1021069",
    "end": "1025839"
  },
  {
    "text": "the branch instruction.\nSo if the original LP value was 0x5C, that",
    "start": "1025839",
    "end": "1033000"
  },
  {
    "text": "means that the address of the branch instruction\nwas 0x58.",
    "start": "1033000",
    "end": "1038909"
  },
  {
    "text": "We can also answer the question, what is the\nvalue of the PC when the program is halted.",
    "start": "1038909",
    "end": "1044970"
  },
  {
    "text": "We know that the program was halted just before\nexecuting the instruction at label xx.",
    "start": "1044970",
    "end": "1050840"
  },
  {
    "text": "We also know, that the instruction at label\nyy makes a recursive call to f.",
    "start": "1050840",
    "end": "1056518"
  },
  {
    "text": "We know that the LP value from the recursive\ncalls is 0xA4.",
    "start": "1056519",
    "end": "1062690"
  },
  {
    "text": "This means that the address of the DEALLOCATE(1)\ninstruction is 0xA4.",
    "start": "1062690",
    "end": "1069230"
  },
  {
    "text": "Counting backwards by 4 bytes, and accounting\nfor the fact that a PUSH operation consists",
    "start": "1069230",
    "end": "1074539"
  },
  {
    "text": "of two instructions, we see that label xx\n= 0x90 and that is the value of the PC when",
    "start": "1074539",
    "end": "1083399"
  },
  {
    "text": "the program is halted.\nAs our last question, we want to consider",
    "start": "1083400",
    "end": "1089230"
  },
  {
    "text": "the following: Suppose that you are told that\nyou could delete 4 instructions from your",
    "start": "1089230",
    "end": "1094010"
  },
  {
    "text": "program without affecting the behavior of\nthe program.",
    "start": "1094010",
    "end": "1098299"
  },
  {
    "text": "The 4 instructions to be removed are a LD,\na ST, an ALLOCATE, and a MOVE instruction.",
    "start": "1098299",
    "end": "1105240"
  },
  {
    "text": "Removing these instructions would make our\nprogram shorter and faster.",
    "start": "1105240",
    "end": "1109010"
  },
  {
    "text": "So, our goal is to determine whether or not\nthis is possible without affecting the behavior",
    "start": "1109010",
    "end": "1114240"
  },
  {
    "text": "of the program.\nLet's first consider removing the ALLOCATE",
    "start": "1114240",
    "end": "1118309"
  },
  {
    "text": "instruction.\nIf this instruction is removed, that means",
    "start": "1118310",
    "end": "1122059"
  },
  {
    "text": "that we will not be saving space on the stack\nfor local variable a.",
    "start": "1122059",
    "end": "1125760"
  },
  {
    "text": "However, if we take a closer look at the 3\nlines of code highlighted in yellow, we see",
    "start": "1125760",
    "end": "1131960"
  },
  {
    "text": "that the actual value of a is first computed\nin R1 before storing it in local variable",
    "start": "1131960",
    "end": "1137630"
  },
  {
    "text": "a.\nSince R1 is going to be saved on the stack",
    "start": "1137630",
    "end": "1141010"
  },
  {
    "text": "during each recursive call, we could get away\nwithout saving a on the stack because we can",
    "start": "1141010",
    "end": "1146769"
  },
  {
    "text": "find its value in the stored R1 of the next\nactivation record as shown in the highlighted",
    "start": "1146769",
    "end": "1152639"
  },
  {
    "text": "pairs of a and R1 on the stack.\nThis means that we could safely remove the",
    "start": "1152639",
    "end": "1158360"
  },
  {
    "text": "ALLOCATE instruction.\nAs a result, this also means that we don't",
    "start": "1158360",
    "end": "1163908"
  },
  {
    "text": "need the ST operation that stores a on the\nstack or the LD operation that reloads a into",
    "start": "1163909",
    "end": "1169910"
  },
  {
    "text": "register R1.\nFinally, because there are no longer any local",
    "start": "1169910",
    "end": "1175289"
  },
  {
    "text": "variables stored on the stack, then the instruction\nMOVE(BP,SP) which is normally used to deallocate",
    "start": "1175289",
    "end": "1182179"
  },
  {
    "text": "all local variables, can be skipped because\nafter popping R1, the BP and SP registers",
    "start": "1182180",
    "end": "1188940"
  },
  {
    "text": "will already point to the same location.\nSo, in conclusion the 4 operations can be",
    "start": "1188940",
    "end": "1195018"
  },
  {
    "text": "removed from the program without changing\nthe behavior of the code.",
    "start": "1195019",
    "end": "1199070"
  }
]