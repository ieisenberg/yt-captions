[
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING]",
    "start": "0",
    "end": "8766"
  },
  {
    "start": "8766",
    "end": "16590"
  },
  {
    "text": "ANA BELL: All right, so\ntoday marks the last lecture on the subject of\nsorting algorithms--",
    "start": "16590",
    "end": "21860"
  },
  {
    "text": "or on the subject of complexity. And specifically,\nwe will be talking about sorting algorithms.",
    "start": "21860",
    "end": "28780"
  },
  {
    "text": "So let's remember where we left\noff at the end of last lecture. We tried to look for\nelements within a list.",
    "start": "28780",
    "end": "36750"
  },
  {
    "text": "And this is a really common\nproblem in computer science where the list is,\nbasically, a large data set",
    "start": "36750",
    "end": "43142"
  },
  {
    "text": "that you might have\ngathered on, I don't know, biology information or\nphysical-- experimental data.",
    "start": "43143",
    "end": "49140"
  },
  {
    "text": "Some big file of data. And one of the\nmost common things you might want to\ndo on such a file",
    "start": "49140",
    "end": "55050"
  },
  {
    "text": "is to search for something\nwithin that file. Basically, you'll\nread it in as a list and you'll search for something\nof interest within this list.",
    "start": "55050",
    "end": "62640"
  },
  {
    "text": "So we saw two\nalgorithms to search for an element within a list. The first was just a\nstraight up linear search.",
    "start": "62640",
    "end": "70260"
  },
  {
    "text": "That linear search we\ndid on an unsorted list, and we also did it\non a sorted list.",
    "start": "70260",
    "end": "76520"
  },
  {
    "text": "And what we saw was\nthat the worst case time complexity for\nsearching for an element within a list using linear\nsearch was theta of n.",
    "start": "76520",
    "end": "85000"
  },
  {
    "text": "That's the best\nthat we could do. Now, we saw the binary search\nalgorithm as an alternate way",
    "start": "85000",
    "end": "92510"
  },
  {
    "text": "to search for an\nelement in a list. But the caveat to using\nthe binary search algorithm was that we had to\nhave a sorted list.",
    "start": "92510",
    "end": "99570"
  },
  {
    "text": "We can't use this binary search\nalgorithm on an unsorted list because it will give\nus an incorrect answer.",
    "start": "99570",
    "end": "107130"
  },
  {
    "text": "So assuming the list is\nsorted, binary search does a much better\njob a much faster job at finding the\nelement within a list.",
    "start": "107130",
    "end": "113690"
  },
  {
    "text": "It does it in theta\nof log n time, which is faster than theta of n. The timings through\na code that we",
    "start": "113690",
    "end": "121820"
  },
  {
    "text": "did showed this, counting\nthe number of operations showed this, and then, the\ntheory also showed this.",
    "start": "121820",
    "end": "127880"
  },
  {
    "text": "All right, so clearly, it is\nbetter to use binary search",
    "start": "127880",
    "end": "132950"
  },
  {
    "text": "because it's faster. But when does it make\nsense to use binary search? So the idea is, given some\nsort of data set, some list",
    "start": "132950",
    "end": "142130"
  },
  {
    "text": "of elements, we would\nhave to first sort them in order to do binary search.",
    "start": "142130",
    "end": "147510"
  },
  {
    "text": "So the question then\nbecomes the time that it takes for us to\ndo a sort plus the time",
    "start": "147510",
    "end": "154020"
  },
  {
    "text": "that it takes for us to\nuse binary search to look for an element within that list\nshould be less than the time",
    "start": "154020",
    "end": "160500"
  },
  {
    "text": "that it takes for us\nto do linear search. In that case, it\nmakes sense for us to do a sort and binary search.",
    "start": "160500",
    "end": "166890"
  },
  {
    "text": "This implies that the time\nit takes for us to is less than the subtraction.",
    "start": "166890",
    "end": "172810"
  },
  {
    "text": "So theta of n minus\ntheta of log n. So this implies that we can\nsort a list in less than theta",
    "start": "172810",
    "end": "180720"
  },
  {
    "text": "of n time. That means we can a list\nwithout even looking at each element in the list.",
    "start": "180720",
    "end": "186850"
  },
  {
    "text": "And that's not possible, right? We have to, at least,\ngo through each element in the list one at a time\nto determine that list",
    "start": "186850",
    "end": "193440"
  },
  {
    "text": "is sorted to begin with, right? So even in the best case\nscenario, to sort a list,",
    "start": "193440",
    "end": "199739"
  },
  {
    "text": "that's going to be\ntheta of n time. So clearly, this\nwill never be true.",
    "start": "199740",
    "end": "205540"
  },
  {
    "text": "So then, the question\nbecomes, why do we bother doing binary\nsearch in the first place?",
    "start": "205540",
    "end": "210910"
  },
  {
    "text": "Well, that's\nbecause, oftentimes, if you download\na data set or you want to do some search on some\nlist or some data set that you",
    "start": "210910",
    "end": "220620"
  },
  {
    "text": "get, most of the\ntime, you're not going to want to\ndo it just once. You're going to sort\nthat list one time",
    "start": "220620",
    "end": "228330"
  },
  {
    "text": "and then do a whole\nbunch of searches for a whole bunch of different\nthings within that list.",
    "start": "228330",
    "end": "233620"
  },
  {
    "text": "So if we can somehow\namortize the cost of doing one sort over\nk different searches,",
    "start": "233620",
    "end": "240990"
  },
  {
    "text": "as k gets really, really\nbig, it makes sense to do binary search\non the sorted list",
    "start": "240990",
    "end": "247480"
  },
  {
    "text": "rather than just to look\nthrough using linear search k different times, right?",
    "start": "247480",
    "end": "253030"
  },
  {
    "text": "So then, that time to do the\nsort only once kind of gets absorbed and goes\nto 0 as the number--",
    "start": "253030",
    "end": "259088"
  },
  {
    "text": "the k number of searches goes\nto some really big number. All right, so\nclearly, we've shown",
    "start": "259089",
    "end": "264580"
  },
  {
    "text": "that if you want to do many\nsearches on a data set, it makes sense to do\nthe sort only once.",
    "start": "264580",
    "end": "272668"
  },
  {
    "text": "All right, so now\nwe're going to look at a bunch of different\nsorting algorithms. We're going to start with\nsome really bad ones.",
    "start": "272668",
    "end": "278068"
  },
  {
    "text": "And then, we're\ngoing to work our way up to what is considered one of\nthe best sorting algorithms-- the best that we can do.",
    "start": "278068",
    "end": "285169"
  },
  {
    "text": "So let's begin by showing a\nreally, really bad sorting algorithm. And there are\nactually competitions",
    "start": "285170",
    "end": "292030"
  },
  {
    "text": "where people can come up\nwith really bad sorting algorithms that sort lists in\na really weird way while being",
    "start": "292030",
    "end": "300250"
  },
  {
    "text": "really bad still making\nforward progress, and this is one of them. So this one is called bogo\nsort, coming from the bogo sort,",
    "start": "300250",
    "end": "308050"
  },
  {
    "text": "also called random\nsort or monkey sort. So the idea here-- and I'm\ngoing to use these cards",
    "start": "308050",
    "end": "313690"
  },
  {
    "text": "as we look at these\ndifferent sorting algorithms. The idea of bogo sort is that\nwe're going to use randomness",
    "start": "313690",
    "end": "319330"
  },
  {
    "text": "to help us sort the list. So if we wanted to sort a\nlist or a deck of cards,",
    "start": "319330",
    "end": "327610"
  },
  {
    "text": "for example, the\nidea of bogo sort is that we're going\nto take all our cards, we're going to throw\nthem up in the air,",
    "start": "327610",
    "end": "333280"
  },
  {
    "text": "we're going to pick\nthem up as they land, and we're going to check\nto see if they're sorted. If they are, we're done.",
    "start": "333280",
    "end": "338647"
  },
  {
    "text": "If they're not, we're going\nto repeat the process. We're going to throw\nthem up in the air, let them fall where\nthey may, and then we're",
    "start": "338647",
    "end": "343900"
  },
  {
    "text": "going to check if\nthey're sorted, OK? So the code would look\nsomething like this.",
    "start": "343900",
    "end": "350110"
  },
  {
    "text": "It takes in a list L. And it\nsays, while the list is not sorted, we're going to\ncall this shuffle function",
    "start": "350110",
    "end": "357270"
  },
  {
    "text": "from the random library. And the shuffle function\njust reshuffles or rearranges the elements in\nthe list at random.",
    "start": "357270",
    "end": "365080"
  },
  {
    "text": "So let me show you\nhow that looks like. So here is the sorted function. ",
    "start": "365080",
    "end": "378710"
  },
  {
    "text": "I'm going to run it. So it starts out with\nthis list of, obviously,",
    "start": "378710",
    "end": "385190"
  },
  {
    "text": "elements not in order. And it took about 0.2 seconds to\njust randomly keep reshuffling",
    "start": "385190",
    "end": "391550"
  },
  {
    "text": "the elements of that\nlist to give me-- for them to become\nin sorted order. So I did about 30,000 shuffles.",
    "start": "391550",
    "end": "397819"
  },
  {
    "text": "And if I run it\nagain, it'll take a completely different amount\nof time each time it's run.",
    "start": "397820",
    "end": "403020"
  },
  {
    "text": "So now it was really fast. But if I keep running it-- one time I ran it last night,\nit took about two seconds.",
    "start": "403020",
    "end": "408630"
  },
  {
    "text": "So you can see it's just random. So what's the complexity\nof this function?",
    "start": "408630",
    "end": "414850"
  },
  {
    "text": "Clearly, it's not going\nto be very good at best. So in the best case\nscenario, let's say,",
    "start": "414850",
    "end": "420130"
  },
  {
    "text": "my input list is already sorted. So in the best case\nscenario, the theta would be just theta of n, where\nn is the length of the list.",
    "start": "420130",
    "end": "427630"
  },
  {
    "text": "Because we have to look\nat each element once to make sure that it's\nin its rightful place.",
    "start": "427630",
    "end": "433510"
  },
  {
    "text": "But in the worst case scenario,\nthe theta complexity of this is unbounded. It's infinity.",
    "start": "433510",
    "end": "438850"
  },
  {
    "text": "Because at worst case, we're\ngoing to be super unlucky and we're just never\ngoing to get the elements",
    "start": "438850",
    "end": "444940"
  },
  {
    "text": "in a sorted order, OK? So clearly, not a very\ngood sorting algorithm.",
    "start": "444940",
    "end": "450639"
  },
  {
    "text": "If you go to the\nWikipedia page for this, it'll give you a whole bunch\nof other examples of algorithms similar in this spirit of\nbeing bad but making forward",
    "start": "450640",
    "end": "460960"
  },
  {
    "text": "progress towards an answer. So next, we're going to\nlook at a different sorting",
    "start": "460960",
    "end": "466530"
  },
  {
    "text": "algorithm called\nbubble sort, and it's one of the most popular\none popular sorting algorithms not\nbecause it's good,",
    "start": "466530",
    "end": "472770"
  },
  {
    "text": "but because people really\nlike to make fun of it. OK, so it's best\nto understand it.",
    "start": "472770",
    "end": "478750"
  },
  {
    "text": "So the idea of bubble\nsort is that we're going to start with an\noriginally unsorted list.",
    "start": "478750",
    "end": "486419"
  },
  {
    "text": "And like I said, I'm going\nto use this as an example. And we're going to try to\ncompare consecutive elements",
    "start": "486420",
    "end": "495100"
  },
  {
    "text": "one at a time. And as we do so,\nwe're effectively going to bubble up the largest\nelement towards the end",
    "start": "495100",
    "end": "503870"
  },
  {
    "text": "of the list, OK? So we're going to start our\nfirst pass on this clearly",
    "start": "503870",
    "end": "509570"
  },
  {
    "text": "unsorted list and we're going to\ncompare the first two elements. If the element at\nindex I is smaller",
    "start": "509570",
    "end": "517190"
  },
  {
    "text": "than the element\nat index I minus 1, then I'm going to do a swap. So here they were,\nso I did a swap.",
    "start": "517190",
    "end": "523190"
  },
  {
    "text": "Then I'm going to compare\nthe next set of elements. So these two are\nalready sorted, right? These two are not, so\nI'm going to swap them.",
    "start": "523190",
    "end": "530150"
  },
  {
    "text": "These two are not, I'm\ngoing to swap them. These two are not, I'm\ngoing to swap them. They're not, I'm\ngoing to swap them.",
    "start": "530150",
    "end": "535910"
  },
  {
    "text": "And these two are not, and\nI'm going to swap them, OK? Just move it over because\nthat table got in the way.",
    "start": "535910",
    "end": "543850"
  },
  {
    "text": "All right, so after I\nfinished my first pass, this number 11\neffectively bubbled up",
    "start": "543850",
    "end": "550000"
  },
  {
    "text": "from wherever it was towards\nthe end of the list, the place where it belongs,\nbasically, right?",
    "start": "550000",
    "end": "555448"
  },
  {
    "text": "It belongs at the\nend of the list because it's the biggest number. Since I've done at least one\nswap on that previous run,",
    "start": "555448",
    "end": "563509"
  },
  {
    "text": "I'm going to go through again. Because in the process\nof doing a swap, I might have disarranged\nsomething that",
    "start": "563510",
    "end": "569740"
  },
  {
    "text": "was already sort of in order. So now I'm going to\nstart all over again. I'm going to say, are\nthese two in sorted order?",
    "start": "569740",
    "end": "576339"
  },
  {
    "text": "They are. These two? No, so I swap. Are these two? No, so I swap. Are these two?",
    "start": "576340",
    "end": "581650"
  },
  {
    "text": "No, so I swap, I\nswap, and I swap. And now, after two passes,\nI've effectively bubbled up",
    "start": "581650",
    "end": "589420"
  },
  {
    "text": "the next biggest number. You guys can see.",
    "start": "589420",
    "end": "595250"
  },
  {
    "text": "OK, next time through,\nI'm going to have to go again because I am--",
    "start": "595250",
    "end": "604310"
  },
  {
    "text": "I did one swap last time. So again, I'm going\nto compare these two. I need to swap them. These two, I need to swap them.",
    "start": "604310",
    "end": "610010"
  },
  {
    "text": "These two, I need to swap them. Swap them, swap them,\nand these are in order and these are in order, OK?",
    "start": "610010",
    "end": "615920"
  },
  {
    "text": "Again, 5 and the 4 needs\nto swap, 5 and the 1 needs to swap, 5 and the 0\nneeds to swap, 5 and the 2",
    "start": "615920",
    "end": "621590"
  },
  {
    "text": "needs to swap. These are in order, these are\nin order, these are in order. 4 and the 1 needs to swap.",
    "start": "621590",
    "end": "626660"
  },
  {
    "text": "These two need a swap. These need a swap. Ordered, ordered,\nordered, ordered. Next, these two need to swap.",
    "start": "626660",
    "end": "632570"
  },
  {
    "text": "These are OK, these\nare OK, and so on. And now that I've not--",
    "start": "632570",
    "end": "639649"
  },
  {
    "text": "I'm going to do one final check. These are all in order, right? So now that I haven't\ndone any more swaps,",
    "start": "639650",
    "end": "645770"
  },
  {
    "text": "I can say that this list is\nnow in sorted order, right? So with each pass, I'm\nbubbling up the biggest element",
    "start": "645770",
    "end": "653899"
  },
  {
    "text": "towards the end of the list. So at the end of n passes,\nthe top-- the last n elements",
    "start": "653900",
    "end": "661910"
  },
  {
    "text": "will be in sorted order, OK? So the code looks\nsomething like this.",
    "start": "661910",
    "end": "668330"
  },
  {
    "text": "I've got a Boolean flag here. That keeps track of whether\nor not I have done a swap.",
    "start": "668330",
    "end": "675340"
  },
  {
    "text": "If I've done a swap, then I know\nI need to go through and double check that everything is still\nin order by comparing index",
    "start": "675340",
    "end": "683800"
  },
  {
    "text": "I and I minus 1. So to do that,\nwe've got a for loop that goes through from 1\nall the way up to the end",
    "start": "683800",
    "end": "691980"
  },
  {
    "text": "of the list because I'm going\nto compare element at index I with I minus 1. If I started at 0, we'd get\nan index out of bounds error.",
    "start": "691980",
    "end": "699370"
  },
  {
    "text": "So that's why I start\nwith 1 over there. And then, the inside\nof for loop just checks if the element\nat, I guess, J--",
    "start": "699370",
    "end": "705540"
  },
  {
    "text": "I use instead of J instead\nof I. J and J minus 1 are in the right order. Now, obviously, they are.",
    "start": "705540",
    "end": "710770"
  },
  {
    "text": "But when I first started this\ndemo, they were not, right? So as long as this J minus 1 and\nJ are not in order, do a swap.",
    "start": "710770",
    "end": "719010"
  },
  {
    "text": "So here, I just change-- I use this tuple\ntrick here to do",
    "start": "719010",
    "end": "724680"
  },
  {
    "text": "the swap of element\nJ minus 1 and J. And I also reset\nthe Boolean flag",
    "start": "724680",
    "end": "730820"
  },
  {
    "text": "that I did the swap to true. And this goes through until\nI don't do any more swaps.",
    "start": "730820",
    "end": "737700"
  },
  {
    "text": "And then, the code will not go\nthrough the while loop anymore. So let's print how this\nactually looks like when",
    "start": "737700",
    "end": "746300"
  },
  {
    "text": "we run it on our list. So here, I have\nmy original list.",
    "start": "746300",
    "end": "754120"
  },
  {
    "text": "Each set here delineated\nby this line break represents one loop\nof my while loop.",
    "start": "754120",
    "end": "764690"
  },
  {
    "text": "So this thing here, right? One iteration of my while loop. And each line within here\nrepresents one iteration of my",
    "start": "764690",
    "end": "774339"
  },
  {
    "text": "for loop, OK? So what we can see\nis that as we're",
    "start": "774340",
    "end": "780200"
  },
  {
    "text": "comparing the 4 and the 8, the\n8 bubbles up one step over. Then we compare the 8 and the 6.",
    "start": "780200",
    "end": "788960"
  },
  {
    "text": "The 8 bubbles itself\nover and so on and so on, until it encounters the 11. And then, the 11\nstarts to bubble itself",
    "start": "788960",
    "end": "795710"
  },
  {
    "text": "up all the way to the end. So at the end of the\nfirst while loop pass, my 11 is in its rightful\nspot at the top of the list--",
    "start": "795710",
    "end": "803420"
  },
  {
    "text": "at the end of the list. Next time through\nthe while loop, I'm effectively bubbling up\nthe 8 to the end, so over here.",
    "start": "803420",
    "end": "810730"
  },
  {
    "text": "Next time through the while\nloop is six bubbles to the end. Next time the five\nbubbles through the end. Then the four, then the two,\nthen the one, and then the",
    "start": "810730",
    "end": "818795"
  },
  {
    "text": "zero. ",
    "start": "818795",
    "end": "824240"
  },
  {
    "text": "All right, so what's\nthe-- yeah, question. AUDIENCE: Just a\nlittle question.",
    "start": "824240",
    "end": "830030"
  },
  {
    "text": "Is there any reason why\nyou need the brackets? ANA BELL: Oh, we don't\nneed the brackets. ",
    "start": "830030",
    "end": "837050"
  },
  {
    "text": "I mean, you can put them in. It won't harm. But if you don't\nput them, it's OK.",
    "start": "837050",
    "end": "842210"
  },
  {
    "text": "Python knows that it's doing\nan assignment one by one. So this one to that one\nand that one to that one.",
    "start": "842210",
    "end": "848625"
  },
  {
    "text": "Yeah.  OK, so let's look at the worst\ncase complexity analysis.",
    "start": "848625",
    "end": "855920"
  },
  {
    "text": "So the easy one we can already\nknow is this inner for loop, right? This one goes through from one\nto the length of the list, SO",
    "start": "855920",
    "end": "862730"
  },
  {
    "text": "that's theta of linked list. We have another\ncomplexity, though.",
    "start": "862730",
    "end": "867839"
  },
  {
    "text": "Because in the\nworst case scenario, our list is completely backward. And so this while loop up\nhere will repeat length",
    "start": "867840",
    "end": "877800"
  },
  {
    "text": "L times because we're\ngoing to bubble up every single one of the\nelements all the way through to the end of the list.",
    "start": "877800",
    "end": "884050"
  },
  {
    "text": "So the complexity\nof that while loop will be theta of\nlength L as well. Because thinking\nabout the worst case",
    "start": "884050",
    "end": "890310"
  },
  {
    "text": "is when our biggest\nelement is here, the second biggest element\nis here, and so on. ",
    "start": "890310",
    "end": "897810"
  },
  {
    "text": "All right, so the worst case\ncomplexity of this function is theta of length L squared.",
    "start": "897810",
    "end": "903660"
  },
  {
    "text": "Or theta of n squared where\nn is the length of the list just to be less verbose.",
    "start": "903660",
    "end": "909360"
  },
  {
    "text": "OK, clearly not a great\nsorting algorithm. It's pretty inefficient in some\nof the things it's doing, i.e.,",
    "start": "909360",
    "end": "915570"
  },
  {
    "text": "once it's reached-- sorted some of\nthe stuff up here, it keeps comparing them\nthrough to the end.",
    "start": "915570",
    "end": "921640"
  },
  {
    "text": "So it just always goes through\nto the length of the list. We can look at another sorting\nalgorithm called selection",
    "start": "921640",
    "end": "929670"
  },
  {
    "text": "sort, which is sort\nof like bubble sort, but it does things in a\nlittle bit of a smarter way.",
    "start": "929670",
    "end": "935920"
  },
  {
    "text": "So let me start again\nwith an unsorted list, OK?",
    "start": "935920",
    "end": "941639"
  },
  {
    "text": "And let's see how selection\nsort will do this.",
    "start": "941640",
    "end": "947750"
  },
  {
    "text": "OK, let's put that there. OK, so the idea of selection\nsort is that with each pass,",
    "start": "947750",
    "end": "958010"
  },
  {
    "text": "we're going to decide\nwhich one of these elements belongs at some index.",
    "start": "958010",
    "end": "964160"
  },
  {
    "text": "So with my first pass,\nI'll decide which element belongs at index 0.",
    "start": "964160",
    "end": "969440"
  },
  {
    "text": "With my second pass,\nI'll decide which element belongs at index 1. With my third, which\nelement belongs at index 2,",
    "start": "969440",
    "end": "976550"
  },
  {
    "text": "and so on, OK? So the way we're going to do\nthat is by saying, all right, I'm going to take this element,\nit's the first one in the list,",
    "start": "976550",
    "end": "984020"
  },
  {
    "text": "it's the one\ncurrently at index 0. And I'm going to compare it\nwith every single element",
    "start": "984020",
    "end": "989480"
  },
  {
    "text": "from the rest of the list. And as I find an element\nthat's smaller than the one currently there, I'm\ngoing to swap them",
    "start": "989480",
    "end": "996630"
  },
  {
    "text": "because I know that that\nsmaller one, obviously, belongs at index 0. So I'm going to compare\nthe 5 with the 8.",
    "start": "996630",
    "end": "1001960"
  },
  {
    "text": "I'm going to say, well,\nthe 5 is smaller than the 8 so it currently\nbelongs at index 0. I compare the 5 with the 1.",
    "start": "1001960",
    "end": "1008450"
  },
  {
    "text": "The one is smaller, so\nI'm going to do a swap and say the 1 belongs here. 5 with the 11, the 1 belong--",
    "start": "1008450",
    "end": "1014720"
  },
  {
    "text": "sorry, the 1 with the\n11, the 1 belongs here. 1 with the 6, the 1 belongs. 1 with the 2, the\n1 is still there.",
    "start": "1014720",
    "end": "1020330"
  },
  {
    "text": "1 with the 0, well, 0 is smaller\nthan 1, so let me swap it. 0 with the 4, we're done.",
    "start": "1020330",
    "end": "1026419"
  },
  {
    "text": "So now at the end\nof the first pass, I've decided that the 0 is\nthe smallest out of everybody",
    "start": "1026420",
    "end": "1031640"
  },
  {
    "text": "here so it belongs at index 0. Next time, my\nsecond pass, I'm not",
    "start": "1031640",
    "end": "1037810"
  },
  {
    "text": "going to worry about this one. I know it's already\nthe smallest, so I'm going to determine which\nelement belongs at index 1,",
    "start": "1037810",
    "end": "1043810"
  },
  {
    "text": "right? So the 8 is the\nfirst one there, it's the one currently at index 1. So I'm going to\nstart with it being",
    "start": "1043810",
    "end": "1049545"
  },
  {
    "text": "the one that belongs there. And I'm going to successively\ncompare it with everybody else. So the 8 with the 5.",
    "start": "1049545",
    "end": "1055770"
  },
  {
    "text": "The 5, clearly, is\nsmaller than the 8. 5 with the 11, the 5 is smaller. 5 with the 6, the 5 is smaller.",
    "start": "1055770",
    "end": "1061740"
  },
  {
    "text": "5 with the 2 needs a swap\nbecause the 2 is smaller. 2 with the 1, again, we swap.",
    "start": "1061740",
    "end": "1067050"
  },
  {
    "text": "The 1 is smaller. And then, 1 with the 4, done. So at the end of\nthe second pass,",
    "start": "1067050",
    "end": "1073010"
  },
  {
    "text": "I've decided that the 1\nbelongs at the next index. So now these two elements\nare in their correct place.",
    "start": "1073010",
    "end": "1079550"
  },
  {
    "text": "They're in sorted order. OK, third pass, we're going to\ndecide which element belongs",
    "start": "1079550",
    "end": "1084780"
  },
  {
    "text": "at the next index, index 2. So 8 with the 11 is OK. 8 with the 6, we need to swap.",
    "start": "1084780",
    "end": "1091170"
  },
  {
    "text": "6 with the 5, we need to swap. 5 with the 2, we need to swap. 2 with the 4, everything's OK.",
    "start": "1091170",
    "end": "1098340"
  },
  {
    "text": "Three passes, the first three\nelements are in sorted order. Now, we just need to figure out\nbetween these leftovers which",
    "start": "1098340",
    "end": "1105060"
  },
  {
    "text": "one belongs at the next level. So 8 with the 11, we do a swap.",
    "start": "1105060",
    "end": "1110310"
  },
  {
    "text": "8 with the 6, we do the swap. 6 with the 5, we\nbring the 5 here. 5 with the 4, we bring it here.",
    "start": "1110310",
    "end": "1118420"
  },
  {
    "text": "OK, again, 11 with the\n8, we swapped these. 8 with the 6, we swapped these.",
    "start": "1118420",
    "end": "1124930"
  },
  {
    "text": "6 with the 5, we\nswapped them, all right? So as you can see, as\nI'm making my way through",
    "start": "1124930",
    "end": "1130090"
  },
  {
    "text": "to figure out which element\nbelongs at the next index, I have fewer elements to\ndecide between which belongs",
    "start": "1130090",
    "end": "1137290"
  },
  {
    "text": "at the next index, right? So here, the 8 and\nthe 11 needs to swap.",
    "start": "1137290",
    "end": "1143440"
  },
  {
    "text": "8 with the 6 needs to swap. And then, lastly, like that.",
    "start": "1143440",
    "end": "1149240"
  },
  {
    "text": "OK, so slightly more\nefficient in that we're not comparing\na bunch of pairs",
    "start": "1149240",
    "end": "1155780"
  },
  {
    "text": "all the time all the way through\nto the length of the list. So the code looks like this. I've got one for loop that goes\nthrough the length of the list.",
    "start": "1155780",
    "end": "1164880"
  },
  {
    "text": "And one inner for loop\nthat only starts at I and goes through to the\nend of the list, right?",
    "start": "1164880",
    "end": "1171740"
  },
  {
    "text": "So unlike bubble sort,\nwhich started at 1 and went through to the end\nof the list all the time, here, I'm starting\nat I and going",
    "start": "1171740",
    "end": "1178488"
  },
  {
    "text": "through to the end of the list. Because in selection\nsort, with each pass,",
    "start": "1178488",
    "end": "1183920"
  },
  {
    "text": "I've decided which element\nbelongs at a specific index. So I no longer need to worry\nabout comparing that element",
    "start": "1183920",
    "end": "1191120"
  },
  {
    "text": "with everybody else. So when we were\nlike that, we had decided these were\nin sorted order,",
    "start": "1191120",
    "end": "1197510"
  },
  {
    "text": "I only needed to compare\nthese three amongst themselves to decide which one\nfit at the next spot.",
    "start": "1197510",
    "end": "1203180"
  },
  {
    "text": "Everybody else was\nalready sorted. So what's the complexity\nanalysis of this?",
    "start": "1203180",
    "end": "1208900"
  },
  {
    "text": "This is going to feel\nvery similar to diameter from last lecture. Because diameter also\nhad this funky thing",
    "start": "1208900",
    "end": "1214840"
  },
  {
    "text": "where we started from\nI and went through to the length of the list. Well, it's going to be theta\nof length L squared again.",
    "start": "1214840",
    "end": "1222310"
  },
  {
    "text": "So there's two ways to\nthink about this, OK? The first one is to look\nat each loop individually.",
    "start": "1222310",
    "end": "1229640"
  },
  {
    "text": "Clearly, the outer loop goes\nthrough theta of length L, right? No question about that.",
    "start": "1229640",
    "end": "1235340"
  },
  {
    "text": "That just goes through\na range of length L. The inner loop is a\nlittle bit trickier, right? Because it doesn't always\ngo from some fixed number",
    "start": "1235340",
    "end": "1243090"
  },
  {
    "text": "to the length of the list. But what we can think\nabout is on average, right?",
    "start": "1243090",
    "end": "1250010"
  },
  {
    "text": "The first time when we're\ntrying to figure out the element that belongs at\nthe first index, or index 0,",
    "start": "1250010",
    "end": "1256759"
  },
  {
    "text": "we went through to the\nlength of the list. We had to compare\nwith everybody else. The next time we have to compare\nwith the linked list minus 1,",
    "start": "1256760",
    "end": "1263809"
  },
  {
    "text": "then linked list minus 2. And then, at the end, we\nonly had one item to compare.",
    "start": "1263810",
    "end": "1268940"
  },
  {
    "text": "So on average, that inner\nloop goes through length L over two times, right?",
    "start": "1268940",
    "end": "1274340"
  },
  {
    "text": "On average, we have to\nlook through about half of the elements in the\nlist to do the comparison.",
    "start": "1274340",
    "end": "1282960"
  },
  {
    "text": "So if the inner loop here, on\naverage, is theta of length L-- is length L over 2, then\nthe theta of length L over 2",
    "start": "1282960",
    "end": "1293450"
  },
  {
    "text": "is theta of length L. There's\njust a 0.5 in front of that.",
    "start": "1293450",
    "end": "1299779"
  },
  {
    "text": "So that's the first way to\nthink about the complexity analysis of this. The other way is to\nask yourself, well,",
    "start": "1299780",
    "end": "1307610"
  },
  {
    "text": "what part of this code\nis doing the repetitions? If we were to think\nabout what we're",
    "start": "1307610",
    "end": "1313780"
  },
  {
    "text": "counting in terms of units,\nwhich part of this code repeats? Well, the stuff inside the\ninner for loop repeats, right?",
    "start": "1313780",
    "end": "1321130"
  },
  {
    "text": "So you're going to do a\nwhole bunch of comparisons. So how many actual\ncomparisons will you do?",
    "start": "1321130",
    "end": "1329100"
  },
  {
    "text": "Well, the very first time,\nfrom the outer first pass",
    "start": "1329100",
    "end": "1334289"
  },
  {
    "text": "through to the end\nof the list, you're going to do approximately\nlength L comparisons. The next time you're going to\ndo length L minus 1 comparisons,",
    "start": "1334290",
    "end": "1342270"
  },
  {
    "text": "then length L minus\n2 comparisons, and so on and so on down\nto only one comparison.",
    "start": "1342270",
    "end": "1347780"
  },
  {
    "text": "So if we do that\nsum 1 plus 2 plus 3 plus all the way up\nto length L, the sum--",
    "start": "1347780",
    "end": "1353050"
  },
  {
    "text": "that formula becomes length L\ntimes length L plus 1 over 2, so that becomes length L squared\nover 2 plus length L over 2,",
    "start": "1353050",
    "end": "1360970"
  },
  {
    "text": "and that becomes theta\nof length L squared. So just a couple\nof ways to think",
    "start": "1360970",
    "end": "1367270"
  },
  {
    "text": "about the analysis\nof this and this is a pretty common\nthing you'll see. But just because we\nstart at I doesn't",
    "start": "1367270",
    "end": "1374050"
  },
  {
    "text": "mean that it decreases the\ncomplexity of this function dramatically.",
    "start": "1374050",
    "end": "1379780"
  },
  {
    "text": "It doesn't decrease\nit by some order, it just decreases\nit by half, right? So it's still theta of length L.",
    "start": "1379780",
    "end": "1390850"
  },
  {
    "text": "OK, so we can actually do\na little variation on this.",
    "start": "1390850",
    "end": "1397429"
  },
  {
    "text": "Because you might have noticed\nit was a little inefficient to do the swap every time\nI noticed another element",
    "start": "1397430",
    "end": "1404240"
  },
  {
    "text": "that's smaller, right? I didn't have to do the switch. All I had to do was\nkind of just keep track",
    "start": "1404240",
    "end": "1412130"
  },
  {
    "text": "through a variable of\nthe smallest number that I have seen so far, and\nonly do the switch at the end",
    "start": "1412130",
    "end": "1418820"
  },
  {
    "text": "when I've determined that\nthat's the smallest number. So the variation, basically,\nif this is my list says,",
    "start": "1418820",
    "end": "1424950"
  },
  {
    "text": "hey, I'm going to look at\nthis element that belongs in this very first slot. 8 is the first one.",
    "start": "1424950",
    "end": "1430880"
  },
  {
    "text": "Then I'm going to look\nthrough the elements all the way up to\nthe end of the list and keep track of\nthe smallest one.",
    "start": "1430880",
    "end": "1436250"
  },
  {
    "text": "The 4, the 1 is currently\nsmallest, 6 is not, 5 is not, 9 is not, 2 is not, the\n0 is smaller than the 1.",
    "start": "1436250",
    "end": "1443180"
  },
  {
    "text": "So if I see the 0 is\nsmallest, then I swap it. So I only do one\nswap at the end.",
    "start": "1443180",
    "end": "1449010"
  },
  {
    "text": "Next time through, I'm\ngoing to decide which element belongs at this index. The 1 is the smallest I see, so\nI do the swap only at the end.",
    "start": "1449010",
    "end": "1456750"
  },
  {
    "text": "Then I decide which\nelement belongs here. The 2 is smallest out\nof everybody left, the 2 goes there.",
    "start": "1456750",
    "end": "1462010"
  },
  {
    "text": "So I'm doing all\nthese comparisons, but I only do the swap at the\nend when I've decided, hey,",
    "start": "1462010",
    "end": "1469210"
  },
  {
    "text": "this is the smallest element. Let me just swap it with the one\nthat's currently there, right? So it's just going to go\nthrough to the end of that.",
    "start": "1469210",
    "end": "1476085"
  },
  {
    "text": " OK, so I wrote that\nvariation here.",
    "start": "1476085",
    "end": "1484670"
  },
  {
    "text": "So this is selection\nsort, just as we saw it.",
    "start": "1484670",
    "end": "1490640"
  },
  {
    "text": "So we can see here that the\nfirst pass with the outer loop we have length L comparisons\nto make because we're always",
    "start": "1490640",
    "end": "1500889"
  },
  {
    "text": "comparing these two than\nthe one that's currently at this index and the--",
    "start": "1500890",
    "end": "1506603"
  },
  {
    "text": "one index over, the\none that's currently at this index and one\nindex over and so on. So the first pass I've\ndone length L swaps--",
    "start": "1506603",
    "end": "1514330"
  },
  {
    "text": "or sorry, length L comparisons. The next pass, I've done\nlength L minus 1 comparisons",
    "start": "1514330",
    "end": "1520390"
  },
  {
    "text": "because I don't need to\nlook at the 0 anymore. I already know that's\nin the right place. Then after that, I do length\nL minus two comparisons, then",
    "start": "1520390",
    "end": "1527649"
  },
  {
    "text": "length L minus\nthree comparisons. So you can see, as\nwe're making progress through our outer loop, we have\nfewer and fewer comparisons",
    "start": "1527650",
    "end": "1535960"
  },
  {
    "text": "to do. So you might think that\nthis is much better, but the theta complexity\nanalysis says it's not.",
    "start": "1535960",
    "end": "1543390"
  },
  {
    "text": "So that's the original\nselection sort. And the variation\non selection sort",
    "start": "1543390",
    "end": "1550770"
  },
  {
    "text": "looks a little more complicated,\nbut it's not doing a swap. So it's only doing a swap\ndown here, as you can see.",
    "start": "1550770",
    "end": "1558960"
  },
  {
    "text": "It's doing it after it\nfinishes this inner for loop. And all this inner for\nloop is doing is checking--",
    "start": "1558960",
    "end": "1566910"
  },
  {
    "text": "is doing the\ncomparisons and keeping track of the smallest number\nit sees in this variable",
    "start": "1566910",
    "end": "1572880"
  },
  {
    "text": "called smallest. And the index associated\nwith that smallest variable in smallest J.",
    "start": "1572880",
    "end": "1581419"
  },
  {
    "text": "Now, if we look at\nthe analysis for this, well, we still have\nan outer for loop",
    "start": "1581420",
    "end": "1587059"
  },
  {
    "text": "that goes through\nlength L. We still have an inner for loop that\ngoes from I to length L. All",
    "start": "1587060",
    "end": "1593180"
  },
  {
    "text": "it's doing is eliminating\nthis line here. It does it only once at\nthe end, but it's still",
    "start": "1593180",
    "end": "1599420"
  },
  {
    "text": "doing all these comparisons. It still has to look through\nall of these elements one pair",
    "start": "1599420",
    "end": "1604820"
  },
  {
    "text": "by pair to do the comparison. So actually, this\nslight speed up doesn't have a big impact\non my theta complexity.",
    "start": "1604820",
    "end": "1612860"
  },
  {
    "text": "It's still going to be\ntheta of length L squared. ",
    "start": "1612860",
    "end": "1620139"
  },
  {
    "text": "Any questions so far on\nthese sorting algorithms? ",
    "start": "1620140",
    "end": "1630950"
  },
  {
    "text": "So clearly, we're not\nreally doing a very good job about thinking of a unique\nway to do the sorting, right?",
    "start": "1630950",
    "end": "1640940"
  },
  {
    "text": "Because all of these\ndifferent variations where we're doing slight\nspeed ups here and there aren't doing a\ndrastic enough job to bring us",
    "start": "1640940",
    "end": "1649820"
  },
  {
    "text": "a whole complexity class lower. So we have to think\nabout the problem",
    "start": "1649820",
    "end": "1655220"
  },
  {
    "text": "in a completely different way. So the iterative approach\nis not working out for us,",
    "start": "1655220",
    "end": "1661460"
  },
  {
    "text": "where we basically have a loop\nthat does something and then another loop that does some\nsort of comparison, right?",
    "start": "1661460",
    "end": "1667940"
  },
  {
    "text": "That's not going to get\nus a whole complexity class speed up.",
    "start": "1667940",
    "end": "1673620"
  },
  {
    "text": "So instead, what\nwe're going to do is approach the problem from\na sort of inspired by binary--",
    "start": "1673620",
    "end": "1682220"
  },
  {
    "text": "bisection search,\nor binary search. In bisection search,\nwe weren't looking",
    "start": "1682220",
    "end": "1687860"
  },
  {
    "text": "at each element one at a time. We were taking our list and\ndividing it in half, right?",
    "start": "1687860",
    "end": "1694559"
  },
  {
    "text": "So we can try to do a\nsimilar approach here, and that's what this\nmerge sort algorithm does.",
    "start": "1694560",
    "end": "1700230"
  },
  {
    "text": "It's going to take\nan original list and it's going to divide this\nlist in half with each step.",
    "start": "1700230",
    "end": "1708190"
  },
  {
    "text": "And it's going to\ndo this recursively. It's going to be a divide\nand conquer algorithm.",
    "start": "1708190",
    "end": "1713210"
  },
  {
    "text": "So it's going to\nrecursively divide this list in half each step. And then, it's going to merge\nsorted lists in a really smart",
    "start": "1713210",
    "end": "1721720"
  },
  {
    "text": "way such that it'll give\nus the speedup that we're interested in. So let me explain to you\nhow we're going to merge it.",
    "start": "1721720",
    "end": "1728769"
  },
  {
    "text": "And then, we'll see how we can\nwrite up this whole algorithm.",
    "start": "1728770",
    "end": "1734600"
  },
  {
    "text": "So let's say that we have-- let's do this.",
    "start": "1734600",
    "end": "1739760"
  },
  {
    "text": "Let's say that we've done\nsome sort of division",
    "start": "1739760",
    "end": "1747020"
  },
  {
    "text": "of lists, right? And let's say that we've\nwritten this algorithm and it works really\nnicely in such a way",
    "start": "1747020",
    "end": "1754220"
  },
  {
    "text": "that it gives us two\nsorted lists, all right?",
    "start": "1754220",
    "end": "1761179"
  },
  {
    "text": "So if somehow my algorithm\nwhere I had one full list of all",
    "start": "1761180",
    "end": "1766730"
  },
  {
    "text": "of these eight elements\nhere divided itself, and when it came back together\nit gave me two sublists",
    "start": "1766730",
    "end": "1774860"
  },
  {
    "text": "that themselves are sorted,\nso this is a sorted list and this is a sorted\nlist by itself.",
    "start": "1774860",
    "end": "1781590"
  },
  {
    "text": "Then, there's this really smart\nmerge step that we can do.",
    "start": "1781590",
    "end": "1787500"
  },
  {
    "text": "So we can recognize that if\nthis list is sorted by itself and this list is\nsorted by itself,",
    "start": "1787500",
    "end": "1794310"
  },
  {
    "text": "to determine the element that\nis the smallest between both of these lists,\nall we have to do",
    "start": "1794310",
    "end": "1799920"
  },
  {
    "text": "is look at the first\nelement of each list-- each sublist, right? This is the smallest\nout of these guys.",
    "start": "1799920",
    "end": "1805470"
  },
  {
    "text": "This is the smallest\nout of these guys. So if I just compare\nthe 0 and the 4, I know the 0 will be\nsmallest out of everything.",
    "start": "1805470",
    "end": "1813640"
  },
  {
    "text": "Then, I'm left with this\nlist, it's still sorted. This list, it's. Still sorted I look at the first\nelement of each of these lists.",
    "start": "1813640",
    "end": "1821409"
  },
  {
    "text": "Which one of these\nis the smallest? Well, the 1 is\nsmaller than the 4. So I'm going to take\nthis one and say",
    "start": "1821410",
    "end": "1827320"
  },
  {
    "text": "this one comes next, right? So we're using the\nproperty that these two lists themselves are sorted. So all I need to do is compare\nthe first element of each list.",
    "start": "1827320",
    "end": "1836080"
  },
  {
    "text": "Then I compare th 2 and the 4. I say the 2 is\nsmaller than the 4. The 6 and the 4,\nthe 4 goes next.",
    "start": "1836080",
    "end": "1841900"
  },
  {
    "text": "The 6 and the 5,\nthe 5 goes here. 6 and the 8, 6 goes here. 8 and the 11, well, they're\nalready in sorted order",
    "start": "1841900",
    "end": "1849200"
  },
  {
    "text": "so we're done. So that really smart merge\nstep touched every element",
    "start": "1849200",
    "end": "1855040"
  },
  {
    "text": "only once to bring it into\nmy master sorted list. I didn't have to\ndo multiple passes.",
    "start": "1855040",
    "end": "1861429"
  },
  {
    "text": "I just had to look at the\nfirst element of each list. So if we can somehow\nget to this point",
    "start": "1861430",
    "end": "1869350"
  },
  {
    "text": "where we have these two\nsublists that are sorted, I can just do a little merge\nby looking at the first element",
    "start": "1869350",
    "end": "1875860"
  },
  {
    "text": "in each of these sorted lists. And that, basically, gives\nme a theta of n complexity",
    "start": "1875860",
    "end": "1881289"
  },
  {
    "text": "to do the merge from\nto smaller sorted lists into one big sorted list, right?",
    "start": "1881290",
    "end": "1887740"
  },
  {
    "text": "So here's the idea of\nthis merge sort algorithm. We're going to take an original\nbig unsorted list containing",
    "start": "1887740",
    "end": "1894160"
  },
  {
    "text": "n elements. It's unsorted. We're going to\ndivide it in half.",
    "start": "1894160",
    "end": "1899350"
  },
  {
    "text": "Of course, these two halves,\nthere's no order to them, so they are potentially\nvery unsorted.",
    "start": "1899350",
    "end": "1904840"
  },
  {
    "text": "We're going to take\neach one of those halves and divide them as well in half. More unsorted sublists.",
    "start": "1904840",
    "end": "1910580"
  },
  {
    "text": "Now, I've got four unsorted\nsublists of smaller lengths. Then I'm going to keep\ndividing them in half.",
    "start": "1910580",
    "end": "1917520"
  },
  {
    "text": "I have now maybe\njust two elements in each of these unsorted lists. There's no guarantee\nthat they're sorted.",
    "start": "1917520",
    "end": "1923630"
  },
  {
    "text": "And then, I divide\nit in half once more to have a list with\none element in each--",
    "start": "1923630",
    "end": "1931120"
  },
  {
    "text": "a list with one element. Maybe some of these\nwill be empty. So then, if I can\nget to this point",
    "start": "1931120",
    "end": "1938270"
  },
  {
    "text": "where I just have\nlists containing one element in each\nlist, those lists themselves are sorted, right?",
    "start": "1938270",
    "end": "1944179"
  },
  {
    "text": "An element with just a 1 in\nit-- a list with just a 1 in it is sorted.",
    "start": "1944180",
    "end": "1949530"
  },
  {
    "text": "So then, I can begin a\nmerge step, which says, hey, these two here that\nwere originally unsorted,",
    "start": "1949530",
    "end": "1956509"
  },
  {
    "text": "let's just merge\nthe pairs back up. And we'll do that\nsmart merge way, right?",
    "start": "1956510",
    "end": "1963919"
  },
  {
    "text": "So these two will merge\nback in to give me all of these eight sorted\nlists of length two.",
    "start": "1963920",
    "end": "1972140"
  },
  {
    "text": "And then, we're going to\nmerge these pairs back up, again, using that\nsmart merge way to give me",
    "start": "1972140",
    "end": "1981290"
  },
  {
    "text": "four sorted lists. And then, we're going to merge\nthese pairs of sorted lists",
    "start": "1981290",
    "end": "1987020"
  },
  {
    "text": "to give me bigger sorted lists. And finally, we're\ngoing to merge these two sorted lists to give\nme my final master sorted list,",
    "start": "1987020",
    "end": "1995780"
  },
  {
    "text": "OK? So let's do the process of\ndoing the sort a step at a time.",
    "start": "1995780",
    "end": "2003440"
  },
  {
    "text": "So we're going to take our\noriginal list like this.",
    "start": "2003440",
    "end": "2010620"
  },
  {
    "text": "I'm actually going\nto try to do this. I'm going to need some\nroom to move them down.",
    "start": "2010620",
    "end": "2016200"
  },
  {
    "text": "So this is my original\nunsorted list. Let's move this here.",
    "start": "2016200",
    "end": "2021410"
  },
  {
    "text": "Something like that. So what's the\nprocess going to be? Step one is to\ndivide them in half.",
    "start": "2021410",
    "end": "2029790"
  },
  {
    "text": "Step two, divide each\nof these in half. Step three, divide\neach of them in half.",
    "start": "2029790",
    "end": "2037670"
  },
  {
    "text": "So now I've got a bunch of lists\nwith only one element in it. Now, I need to\nmerge them back up.",
    "start": "2037670",
    "end": "2043890"
  },
  {
    "text": "So merging these two\ntogether to give me a list with two elements says,\nI'm just going to compare them.",
    "start": "2043890",
    "end": "2049699"
  },
  {
    "text": "The one that's\nsmaller goes first. The one that's\nbigger goes second. Again, these ones, compare them.",
    "start": "2049699",
    "end": "2055632"
  },
  {
    "text": "The one that's\nsmaller goes first. The one that's\nbigger goals second. Again, compare them.",
    "start": "2055633",
    "end": "2061219"
  },
  {
    "text": "Again, compare them. So now I've done one merge\nwhere I have four lists that are",
    "start": "2061219",
    "end": "2067790"
  },
  {
    "text": "sorted by themselves, right? So now I'm going to\nmerge these two together",
    "start": "2067790",
    "end": "2073250"
  },
  {
    "text": "and these two together. So I'm only looking at\nthe first element of each.",
    "start": "2073250",
    "end": "2078350"
  },
  {
    "text": "So I compare the 0\nand the 2, and I know the 0 is smaller than the 2. Then the 2 and the\n8, the 2 is smaller.",
    "start": "2078350",
    "end": "2086060"
  },
  {
    "text": "Then the 8 and the\n11, and then the 11. So now, this list is\nnow sorted by itself.",
    "start": "2086060",
    "end": "2093350"
  },
  {
    "text": "Same process here, compare only\nthe first element of each list. The 1 comes first then the 4\ncomes next then the 5 comes",
    "start": "2093350",
    "end": "2101390"
  },
  {
    "text": "next and then the 6, right? So now, I've reached\nthe exact same spot",
    "start": "2101390",
    "end": "2106580"
  },
  {
    "text": "I was at when I was talking\nabout the merge step, right? When I showed you that we\ncould get to that spot.",
    "start": "2106580",
    "end": "2113010"
  },
  {
    "text": "So I've got these two lists that\nare themselves sorted to merge. So all I need to do is look at\nthe first element in each list.",
    "start": "2113010",
    "end": "2119180"
  },
  {
    "text": "So there's my 0 goes first. 1 compared with the\n2, the 1 goes next. 2 compared the 4,\nthe 2 goes next.",
    "start": "2119180",
    "end": "2125750"
  },
  {
    "text": "4 compared with the\n8, the 4 goes next. 5 compared with the\n8, the 5 goes next. 6 compared with the\n8, the 6 goes next.",
    "start": "2125750",
    "end": "2132500"
  },
  {
    "text": "And I've removed all the\nelements in this list, so I know I just\nneed to grab whatever is left in here\nin whatever order",
    "start": "2132500",
    "end": "2138800"
  },
  {
    "text": "it's there because everything's\nalready sorted, OK? So that's the entire merge\nsort algorithm, right?",
    "start": "2138800",
    "end": "2147500"
  },
  {
    "text": "Now if I do this\ndemo, this is actually going to show you\nthe exact steps that the recursive\nalgorithm is doing.",
    "start": "2147500",
    "end": "2154530"
  },
  {
    "text": "And it's not going to be in the\nsame order that I showed you. It's not going to be\ndividing this in half",
    "start": "2154530",
    "end": "2161180"
  },
  {
    "text": "and then dividing\nin half and so on. Because when we're\ndoing the recursion,",
    "start": "2161180",
    "end": "2166790"
  },
  {
    "text": "first, we're going to figure out\nhow to a left sublist, right?",
    "start": "2166790",
    "end": "2172460"
  },
  {
    "text": "So if I have my original\nunsorted list here, we're going to figure out\nhow to a left sublist first.",
    "start": "2172460",
    "end": "2178840"
  },
  {
    "text": "That's a recursive\nstep that we haven't reached the base case for yet. We still have to sort this list.",
    "start": "2178840",
    "end": "2184569"
  },
  {
    "text": "So we're going to try to the\nleft sublist of this one. And then, we're going to try to\nthe left sublist of this one.",
    "start": "2184570",
    "end": "2191350"
  },
  {
    "text": "So we're going to\ndo something that feels really similar to\nthe Fibonacci sequence--",
    "start": "2191350",
    "end": "2198099"
  },
  {
    "text": "yes, Fibonacci, right? Fibonacci of n is\nFibonacci of n minus 1 plus Fibonacci of\nn minus 2, right?",
    "start": "2198100",
    "end": "2204460"
  },
  {
    "text": "In that particular\ncase, when we were trying to find Fibonacci of\n6 or something like that,",
    "start": "2204460",
    "end": "2210040"
  },
  {
    "text": "we were going and exploring\nthe left side until we reached a base case, right?",
    "start": "2210040",
    "end": "2217450"
  },
  {
    "text": "And only once we reached\nthe base case could we pop up and do the other half.",
    "start": "2217450",
    "end": "2222560"
  },
  {
    "text": "And so this algorithm is going\nto feel very similar to that. So here's my original list. I'm splitting the\nleft hand side to try",
    "start": "2222560",
    "end": "2229630"
  },
  {
    "text": "to figure out how\nto merge those all the way to those left lists.",
    "start": "2229630",
    "end": "2235190"
  },
  {
    "text": "So the 8 and the 4\nwill be compared, and the 4 goes before the 8. And then, I'm going\nto merge the-- then",
    "start": "2235190",
    "end": "2240680"
  },
  {
    "text": "I'm going to merge the 1\nand the 6 by themselves. Those are already\nsorted, as we know.",
    "start": "2240680",
    "end": "2246170"
  },
  {
    "text": "Then we're going to merge\nthe 4 and the 8 back with the 1 and the 6\nusing that merge step.",
    "start": "2246170",
    "end": "2251490"
  },
  {
    "text": "And then, we're going to do the\nsame thing to that right hand side one at a time.",
    "start": "2251490",
    "end": "2256760"
  },
  {
    "text": "We'll do another\nexample where we go step by step through this.",
    "start": "2256760",
    "end": "2261980"
  },
  {
    "text": "And now we've got our\n2, 4 elements together. So now we're just doing\nour final merge step where we decide which\none belongs next, OK?",
    "start": "2261980",
    "end": "2272730"
  },
  {
    "text": "So let's look at the merge code. And this is-- not yet, sorry.",
    "start": "2272730",
    "end": "2279119"
  },
  {
    "text": "Let's look at the\nmerge step once more. So if I have two lists\nthat I'm trying to merge,",
    "start": "2279120",
    "end": "2284760"
  },
  {
    "text": "the idea was that you look\nat the first element of each, right? So first the 1\nand the 2 compared",
    "start": "2284760",
    "end": "2289890"
  },
  {
    "text": "means the 1 is smaller,\nso it goes into my result. The 5 and the 2 gets\ncompared, the 2 is smaller,",
    "start": "2289890",
    "end": "2296039"
  },
  {
    "text": "so the 2 goes into the result. The 5 and the 3 gets\ncompared, the 3 is smaller,",
    "start": "2296040",
    "end": "2301590"
  },
  {
    "text": "so the 3 goes in the\nresult and so on and so on. So we keep doing this\nprocess where we just",
    "start": "2301590",
    "end": "2306780"
  },
  {
    "text": "keep looking at\nthe first element until we have one of the\nlists become empty, right?",
    "start": "2306780",
    "end": "2313620"
  },
  {
    "text": "So this is my left sublist,\nthis is my right sublist. When one of these\nlists becomes empty,",
    "start": "2313620",
    "end": "2318870"
  },
  {
    "text": "I no longer need to compare\n18 with nothing, right? All I need to do is\ngrab all these elements",
    "start": "2318870",
    "end": "2324900"
  },
  {
    "text": "and stick them\nthrough at the end. So let's look at the code\nfor just the merge step.",
    "start": "2324900",
    "end": "2331910"
  },
  {
    "text": "We don't need to look at the\ncode for the full algorithm yet. But the merge step\ncode is just the part",
    "start": "2331910",
    "end": "2338420"
  },
  {
    "text": "that takes us from\ntwo sorted lists into one bigger sorted list.",
    "start": "2338420",
    "end": "2344790"
  },
  {
    "text": "So it does that step in one. This is where the\nmain event happens.",
    "start": "2344790",
    "end": "2352230"
  },
  {
    "text": "So this is just going to\nuse indices to compare which element we need to grab next.",
    "start": "2352230",
    "end": "2359420"
  },
  {
    "text": "So if I have\nsomething like this-- like that, right?",
    "start": "2359420",
    "end": "2365780"
  },
  {
    "text": "Then I'm not actually going\nto make a copy of a list or do any sort of funky\nstuff with list copying",
    "start": "2365780",
    "end": "2373010"
  },
  {
    "text": "because that will\nincrease the complexity. But we are going to do\nthat trick where we take--",
    "start": "2373010",
    "end": "2378080"
  },
  {
    "text": "where we use an\ninteger index to decide where we're going\nto-- which element",
    "start": "2378080",
    "end": "2383600"
  },
  {
    "text": "we're going to grab next. So that's what this\nI and J is for. We've got I is going to be\nthe index from my left sublist",
    "start": "2383600",
    "end": "2393300"
  },
  {
    "text": "and J will be the index\nfor my right sublist. And all it does is it says,\nwhile I still have elements",
    "start": "2393300",
    "end": "2400170"
  },
  {
    "text": "in both of these lists,\njust take the pointer and say which one of the\nelements at these two pointers",
    "start": "2400170",
    "end": "2405945"
  },
  {
    "text": "I and J is smaller. So if the 0 is\nsmaller, I'm going to create a new list here that's\ngoing to have the 0 in it.",
    "start": "2405945",
    "end": "2412650"
  },
  {
    "text": "I'm not actually taking this\nelement and moving it here. All I will do next\nis say the pointer",
    "start": "2412650",
    "end": "2418285"
  },
  {
    "text": "that tells me which\nelement I should be looking at next moves over one. So this list remains unchanged.",
    "start": "2418285",
    "end": "2424560"
  },
  {
    "text": "Then I'm going to\ncompare the 2 with the 1. That 1 comes next. So I'm going to take the 1\nand put it in my list here.",
    "start": "2424560",
    "end": "2430830"
  },
  {
    "text": "And this pointer moves\nhere to the next element. So now while this\nlist stays as is,",
    "start": "2430830",
    "end": "2437280"
  },
  {
    "text": "I'm looking at the\nelement at this pointer and comparing it with the\nelement at this pointer. So then the 2 comes next and\nthis pointer increments by one,",
    "start": "2437280",
    "end": "2445830"
  },
  {
    "text": "OK? So that's what that code does. These two while loops\njust deal with the case",
    "start": "2445830",
    "end": "2452950"
  },
  {
    "text": "when we have one list\nthat has finished inserting its elements. So like in this particular\ncase here when my right sublist",
    "start": "2452950",
    "end": "2460750"
  },
  {
    "text": "became empty, we've already\nput on all the elements in it into our master list. Then all we need to do is take\neverything that's left over",
    "start": "2460750",
    "end": "2468280"
  },
  {
    "text": "and copy them into\nmy master list. And that's what these two\nwhile loops are doing.",
    "start": "2468280",
    "end": "2473724"
  },
  {
    "text": " So the complexity of\nthis merge sort-- so",
    "start": "2473725",
    "end": "2479060"
  },
  {
    "text": "that's just what it's doing. So it's just doing one pass.",
    "start": "2479060",
    "end": "2485450"
  },
  {
    "text": "It's not doing multiple passes. So we just look at\neach element once. So the complexity\nof this merge sort--",
    "start": "2485450",
    "end": "2492040"
  },
  {
    "text": "of not the sort,\njust the merge step is theta of length\nof the list, right?",
    "start": "2492040",
    "end": "2497230"
  },
  {
    "text": "Because we're just looking at\nall of these elements once. Now, what about the\nactual algorithm?",
    "start": "2497230",
    "end": "2504180"
  },
  {
    "text": "So here, I've got the merge\nfunction down here, OK? It's going to take a left\nlist and a right list",
    "start": "2504180",
    "end": "2510838"
  },
  {
    "text": "and it's going to do\nthat step that we just did where you look at the\nsmallest element in each. What about the rest of it?",
    "start": "2510838",
    "end": "2516589"
  },
  {
    "text": "Well, the rest of it\nis just recursion. My base case is when I\nhave a list that's empty",
    "start": "2516590",
    "end": "2522529"
  },
  {
    "text": "or a list with\none element in it. Then I just grab that list. That's going to be my merge.",
    "start": "2522530",
    "end": "2531190"
  },
  {
    "text": "And else, what\nwe're going to do is we're going to do the step where\nwe divide the list in half.",
    "start": "2531190",
    "end": "2536839"
  },
  {
    "text": "So we're doing integer division\nfrom the length of the list because we don't want the\nmiddle to be 7.5, for example.",
    "start": "2536840",
    "end": "2543530"
  },
  {
    "text": "So we're going to grab\nsome integer index. And then, we're going\nto say I'm going to--",
    "start": "2543530",
    "end": "2549609"
  },
  {
    "text": "again, there's a lot of\nfaith involved in recursion. I'm going to say\nthe left sublist--",
    "start": "2549610",
    "end": "2554620"
  },
  {
    "text": "so this one here-- if my algorithm\nsomehow works correctly",
    "start": "2554620",
    "end": "2559860"
  },
  {
    "text": "will now be a sorted list. ",
    "start": "2559860",
    "end": "2565910"
  },
  {
    "text": "And then, my right over here,\nright equals this thing here, will also somehow\nbe a sorted list.",
    "start": "2565910",
    "end": "2573300"
  },
  {
    "text": "So this is me putting\nfaith in my algorithm that I can get a sorted list\nfrom the index 0 all the way up",
    "start": "2573300",
    "end": "2580632"
  },
  {
    "text": "to the midpoint and the\nmidpoint all the way up to the end of the list. So if somehow I can get a left\nsublist that's sorted by itself",
    "start": "2580632",
    "end": "2587690"
  },
  {
    "text": "and a right sublist\nthat's sorted by itself, all I need to do to get\nthe final sorted list",
    "start": "2587690",
    "end": "2594290"
  },
  {
    "text": "is to merge them. So that's what the\nmerge function is doing. OK, so let's step through.",
    "start": "2594290",
    "end": "2603740"
  },
  {
    "text": "So I've got my\noriginal list here. And this is where we're going\nto be thinking about how",
    "start": "2603740",
    "end": "2609580"
  },
  {
    "text": "we step through Fibonacci. Here's my original list. The first step is to do--",
    "start": "2609580",
    "end": "2615370"
  },
  {
    "text": "is to figure out the left part. So we're going to\ndivide it in half and it says, I need to figure\nout the sorted version of 8416.",
    "start": "2615370",
    "end": "2624550"
  },
  {
    "text": "But it's not my\nbase case, so I need to figure out the sorted version\nof the left part of that,",
    "start": "2624550",
    "end": "2629619"
  },
  {
    "text": "the 8, 4. Again, it's not\nmy base case, so I need to figure out the sorted\nversion of the left, just",
    "start": "2629620",
    "end": "2634810"
  },
  {
    "text": "the 8. It's single by itself. So that's just\ngoing to be the 8. Then we can figure out the right\nhalf of it, it's 4 by itself,",
    "start": "2634810",
    "end": "2642640"
  },
  {
    "text": "and we merge them. Then we can figure out the right\nhalf of this one here, 8416.",
    "start": "2642640",
    "end": "2649680"
  },
  {
    "text": "So we need to figure out what's\nthe sorted version of 1, 6. Well, as humans, we know\nit's already sorted,",
    "start": "2649680",
    "end": "2654840"
  },
  {
    "text": "but the algorithm goes through,\nlooks at the left side, looks at the right\nside, merges them up.",
    "start": "2654840",
    "end": "2660810"
  },
  {
    "text": "Now, we merge the 4816\naccording to the merge step to give us one 1468.",
    "start": "2660810",
    "end": "2666780"
  },
  {
    "text": "And at this point,\nwe've finished just the left half of 84165920.",
    "start": "2666780",
    "end": "2672630"
  },
  {
    "text": "And now we need to\ndo the right half. So we do the whole\nprocess all over again by taking that 5920 looking\nonly at the left piece,",
    "start": "2672630",
    "end": "2681300"
  },
  {
    "text": "then the left\npiece of that, then the right piece of that base\ncase, merging them back up.",
    "start": "2681300",
    "end": "2687430"
  },
  {
    "text": "The right step, the left\npart of that right step, the right part of that right\nstep, merging them back up.",
    "start": "2687430",
    "end": "2695180"
  },
  {
    "text": "So then, we do the merge\nstep of 5, 9 and 0, 2, and then, the merge step of\nthese two lists, 1, 4, 6,",
    "start": "2695180",
    "end": "2702550"
  },
  {
    "text": "8 and 0, 2, 5, 9. So you can see it has a\nsimilar feel to exploring",
    "start": "2702550",
    "end": "2708279"
  },
  {
    "text": "one side of the branch\nfirst just like in Fibonacci for the exact same reason. Because we've got a function\ncall that's recursive,",
    "start": "2708280",
    "end": "2714280"
  },
  {
    "text": "we can't complete it until\nwe've explored all the way down to the bottom. So the overall\ncomplexity of this",
    "start": "2714280",
    "end": "2720940"
  },
  {
    "text": "is going to be the merge\nstep itself is theta of n, like we just talked about, but\nhow many levels do we have?",
    "start": "2720940",
    "end": "2728470"
  },
  {
    "text": "That is, how many times do\nwe take our original list and subdivide it until\nwe get to our base case?",
    "start": "2728470",
    "end": "2735640"
  },
  {
    "text": "And the number of times is,\naccording to this function, very much like when we\ndid bisection search.",
    "start": "2735640",
    "end": "2741190"
  },
  {
    "text": "We're going to take an\noriginal n elements in my list and I'm going to\nkeep dividing this n elements by 2 and a bunch\nof sublists I times.",
    "start": "2741190",
    "end": "2751100"
  },
  {
    "text": "So I times is how\nmany times we're going to subdivide this list\nuntil we get to a base case.",
    "start": "2751100",
    "end": "2756240"
  },
  {
    "text": "So what is I in terms of n? Well, I is equal to log of n. So at each merge step--",
    "start": "2756240",
    "end": "2765270"
  },
  {
    "text": "sorry, so at each sublevel,\nI've got a merge step. So I've got theta of log of\nn levels multiplied by theta",
    "start": "2765270",
    "end": "2774030"
  },
  {
    "text": "of n for my merge step. So the overall complexity\nof this function is theta of n log n, where\nn is the length of the list.",
    "start": "2774030",
    "end": "2781605"
  },
  {
    "text": " OK, so it turns out\nthat theta of n log n",
    "start": "2781605",
    "end": "2789290"
  },
  {
    "text": "is actually the fastest\nwe can have a sort be. You cannot do a sorting\nalgorithm that's faster than",
    "start": "2789290",
    "end": "2795200"
  },
  {
    "text": "that. You can do little tricks here\nand there based on your data. Maybe you don't divide\nthe list exactly in half.",
    "start": "2795200",
    "end": "2801710"
  },
  {
    "text": "Maybe you divide it and you\nfind some sort of pivot point that's a little bit\nsmarter about the data.",
    "start": "2801710",
    "end": "2806990"
  },
  {
    "text": "But in general, the complexity\nof this function-- of a sorting algorithm is always\ngoing to be--",
    "start": "2806990",
    "end": "2813020"
  },
  {
    "text": "the fastest it's going to\nbe is theta of n log n. ",
    "start": "2813020",
    "end": "2818950"
  },
  {
    "text": "We've seen a bunch of\ndifferent algorithms here to help us design programs.",
    "start": "2818950",
    "end": "2826480"
  },
  {
    "text": "So the reason why we do\nthis complexity analysis is to guide the\ndesign of a program.",
    "start": "2826480",
    "end": "2831859"
  },
  {
    "text": "So if you already\nhave a bunch of nested for loops in\nthe program that you're trying to consider\nwriting, you'll",
    "start": "2831860",
    "end": "2837653"
  },
  {
    "text": "already know it's going to be\npretty inefficient and slow. So you might want to rethink\nthe design to begin with, OK?",
    "start": "2837653",
    "end": "2845750"
  },
  {
    "text": "All right. ",
    "start": "2845750",
    "end": "2859000"
  }
]