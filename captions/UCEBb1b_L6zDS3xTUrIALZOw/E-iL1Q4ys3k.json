[
  {
    "start": "0",
    "end": "10630"
  },
  {
    "text": "PROFESSOR: So I'm Punya. I'm your TA. And I'm going to talk today\nabout the project, what",
    "start": "10630",
    "end": "17900"
  },
  {
    "text": "you have to do, the details of\nwhere you put stuff, et cetera, et cetera,\nsubmissions, and about",
    "start": "17900",
    "end": "24170"
  },
  {
    "text": "the first part of your\nproject, which is the scanner and the parcel. ",
    "start": "24170",
    "end": "30880"
  },
  {
    "text": "So here's general information\nabout just working with 6.035.",
    "start": "30880",
    "end": "36970"
  },
  {
    "text": "We're going to give each group\na piece of the 6.035 locker. You're going to keep all\nyour files in 6.035 groups,",
    "start": "36970",
    "end": "44618"
  },
  {
    "text": "A-something-- A01, A02. And note that we currently\ndon't have any controls on how",
    "start": "44618",
    "end": "53128"
  },
  {
    "text": "much stuff you put there. So please, be considerate if\nyou put loads of files there. You will be killing\nspace that is for others.",
    "start": "53128",
    "end": "59900"
  },
  {
    "text": "So take care. I have your sign-up sheets here. I will be allocating\ngroups for those people who",
    "start": "59900",
    "end": "66820"
  },
  {
    "text": "haven't already got groups\nat the end of this class. And I'll send out mail, and you\nknow, permissions, and so on",
    "start": "66820",
    "end": "72409"
  },
  {
    "text": "by the end of the day. The way these group lockers\nwork is you have access to them.",
    "start": "72410",
    "end": "77720"
  },
  {
    "text": "We have access to them. No one else. So for example, other groups\ncan't read or write to them,",
    "start": "77720",
    "end": "85369"
  },
  {
    "text": "which is a good thing. I think one of you wrote to me\nabout issues running Java 1.5",
    "start": "85370",
    "end": "91150"
  },
  {
    "text": "on Athena. So I-- did that fix work? OK, well.",
    "start": "91150",
    "end": "97420"
  },
  {
    "text": "And I like the version of\nAnt that comes with 170. It's recent.",
    "start": "97420",
    "end": "103000"
  },
  {
    "text": "It has a bunch of nice features. Use it if you can. And code samples are going\nto be at this location.",
    "start": "103000",
    "end": "109369"
  },
  {
    "text": "You don't need to\ntake this down. I'll put a link to this\npresentation on the website. ",
    "start": "109370",
    "end": "117040"
  },
  {
    "text": "So part one, the scanner. ",
    "start": "117040",
    "end": "124365"
  },
  {
    "text": "Does someone want\nto tell me what a scanner does, even though\nit's on the screen there?",
    "start": "124365",
    "end": "130369"
  },
  {
    "text": "No. So you have a big program. It's a bunch of bytes.",
    "start": "130370",
    "end": "137020"
  },
  {
    "text": "And you want some\nof it to make-- you want the compiler to\ncare about some parts of it and not to care\nabout some parts.",
    "start": "137020",
    "end": "142700"
  },
  {
    "text": "For example, if\nyou have a string, and there's stuff\ninside the string, the compiler doesn't really\ncare what's in the string.",
    "start": "142700",
    "end": "150727"
  },
  {
    "text": "It does want to know\nwhere the string begins and where it ends. So it can take that entire\nblock, make it into one token,",
    "start": "150727",
    "end": "159280"
  },
  {
    "text": "and then store it as such. So comments, white space all\nget thrown away at this stage.",
    "start": "159280",
    "end": "165820"
  },
  {
    "text": " Here's this.",
    "start": "165820",
    "end": "171325"
  },
  {
    "text": "This piece is also\nwhere you make the distinction between\nkeywords and identifiers. So in DECAF, for example,\nthe word class is a keyword.",
    "start": "171325",
    "end": "180460"
  },
  {
    "text": "You cannot use class as\nthe name of a variable, because the scanner recognizes\nit as something special",
    "start": "180460",
    "end": "187599"
  },
  {
    "text": "to the compiler. Anything that-- excuse me? Is there a question?",
    "start": "187600",
    "end": "193300"
  },
  {
    "text": "Sorry. Anything that is not a\nkeyword but isn't funny,",
    "start": "193300",
    "end": "200913"
  },
  {
    "text": "as in it doesn't\nhave dollar signs and dots in the middle\nof it, is waiting",
    "start": "200913",
    "end": "206890"
  },
  {
    "text": "to become an\nidentifier, which you can use as a variable, a\nfunction name, or something similar. ",
    "start": "206890",
    "end": "215540"
  },
  {
    "text": "So here's our first example of a\nscanner or what a scanner does.",
    "start": "215540",
    "end": "223310"
  },
  {
    "text": "Should be fairly\nself-explanatory. ",
    "start": "223310",
    "end": "228640"
  },
  {
    "text": "Anything? Awesome. So you will note that idens and\nstrings are annotated tokens.",
    "start": "228640",
    "end": "243790"
  },
  {
    "text": "So you have a token with some\nextra information alongside, similarly for numbers.",
    "start": "243790",
    "end": "250357"
  },
  {
    "text": "When you design your data\nstructures for these tokens-- and typically, you'll\nhave CUP do that for you--",
    "start": "250358",
    "end": "256790"
  },
  {
    "text": "it'll make all these\nvarious kinds of tokens. And you can access the\ncontents of the token.",
    "start": "256790",
    "end": "264260"
  },
  {
    "text": "So you have keywords, which\nare just free-standing. And you have things\nlike strings, numbers,",
    "start": "264260",
    "end": "270740"
  },
  {
    "text": "which have a value. I talk about how\nyou would access those values a little later.",
    "start": "270740",
    "end": "276040"
  },
  {
    "text": " So how do we write scanners?",
    "start": "276040",
    "end": "282800"
  },
  {
    "text": "Writing scanners\nby hand is not fun. Has anyone here tried\nwriting one of these by hand, maybe in high\nschool or something?",
    "start": "282800",
    "end": "289550"
  },
  {
    "text": "Like, tried to\nparse the text file? AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah, so\ndid you have fun?",
    "start": "289550",
    "end": "296118"
  },
  {
    "text": "AUDIENCE: No. PROFESSOR: No, no. Yeah, I remember writing one of\nthese for a BASIC interpreter",
    "start": "296118",
    "end": "304400"
  },
  {
    "text": "in 12th grade. And it was not fun. I mean, I did a\nlot of bad things.",
    "start": "304400",
    "end": "311720"
  },
  {
    "text": "I wrote the scanner, the\nparser, and the interpreter,",
    "start": "311720",
    "end": "316940"
  },
  {
    "text": "the actual running of the code,\nall together in one function.",
    "start": "316940",
    "end": "323053"
  },
  {
    "text": "I don't ever want to see\nthat code again in my life. ",
    "start": "323053",
    "end": "329330"
  },
  {
    "text": "Excuse me. So what we're going\nto do in this course is to use a tool\ncalled JLex, which",
    "start": "329330",
    "end": "335400"
  },
  {
    "text": "is the Java version of a\npopular tool called Lex. The way this works is you write\na .lex file, which has rules.",
    "start": "335400",
    "end": "344100"
  },
  {
    "text": "The rules look kind of\nlike the rules I have here. ",
    "start": "344100",
    "end": "351690"
  },
  {
    "text": "And JLex takes the\nrules and converts them into a series of functions,\nwhich generate tokens.",
    "start": "351690",
    "end": "360010"
  },
  {
    "text": "So in this case, for\nexample, the rules say, if you see the sequence\nof characters i-f,",
    "start": "360010",
    "end": "367830"
  },
  {
    "text": "then return the If token. ",
    "start": "367830",
    "end": "373110"
  },
  {
    "text": "There's some boilerplate\ncode here, the Talk function, that I haven't shown you. It's there in the sample code.",
    "start": "373110",
    "end": "380340"
  },
  {
    "text": "You can read it. The next line is\nmore interesting. So what's going on here? Anyone care to explain?",
    "start": "380340",
    "end": "387930"
  },
  {
    "text": "Someone else? OK. AUDIENCE: So really\nan expression that matches a sequence\nof letters and numbers,",
    "start": "387930",
    "end": "394500"
  },
  {
    "text": "start with the letter, just\nname that letter, then numbers. PROFESSOR: Thank you. So that's exactly right.",
    "start": "394500",
    "end": "401750"
  },
  {
    "text": "And as you can see,\nthis is an identifier. So these are not the rules\nwe're going to use in DECAF.",
    "start": "401750",
    "end": "407960"
  },
  {
    "text": "DECAF identifiers are\ndifferent because-- has anyone read the grammar yet?",
    "start": "407960",
    "end": "413120"
  },
  {
    "text": "Well, DECAF\nidentifiers, I think, are allowed to have lowercase\nand uppercase letters, and underscores, and stuff.",
    "start": "413120",
    "end": "419280"
  },
  {
    "text": "So you can see. But this is the basic idea.",
    "start": "419280",
    "end": "424860"
  },
  {
    "text": "Now, JLex has the school\nfeature where you can say, let me define, you know.",
    "start": "424860",
    "end": "433870"
  },
  {
    "start": "433870",
    "end": "446274"
  },
  {
    "text": "And you can do something like\nalpha plus to mean a to z plus.",
    "start": "446274",
    "end": "457289"
  },
  {
    "text": "This looks like\na useful feature, but it's not as useful\nas you might think.",
    "start": "457290",
    "end": "463920"
  },
  {
    "text": "You can never make two\nmacros of this sort that recurse on each other or one\nmacro that recurses on itself.",
    "start": "463920",
    "end": "470380"
  },
  {
    "text": "So one thing you can\nnever, ever do with JLex is balance parentheses.",
    "start": "470380",
    "end": "476130"
  },
  {
    "text": " Has anyone here taken 6.045,\n6.840, one of those classes?",
    "start": "476130",
    "end": "486525"
  },
  {
    "text": "So there are theorems\nthat state why it's impossible to use regular\nexpressions to do things",
    "start": "486525",
    "end": "493080"
  },
  {
    "text": "like this. Regular expressions always\nwork with finite memory. We're going to talk\nabout finite automata",
    "start": "493080",
    "end": "500790"
  },
  {
    "text": "and non-deterministic finite\nautomata later in class. And you'll see exactly why. ",
    "start": "500790",
    "end": "513400"
  },
  {
    "text": "So the next-- so any\nquestions about scanners? Please.",
    "start": "513400",
    "end": "518840"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. Is that the same\nthing as a scanner? PROFESSOR: Yeah.",
    "start": "518840",
    "end": "524940"
  },
  {
    "text": "Anything else? ",
    "start": "524940",
    "end": "532319"
  },
  {
    "text": "So the next phase, once we have\nour stream of tokens coming out of the scanner, is to parse it.",
    "start": "532320",
    "end": "537360"
  },
  {
    "text": "Now, what does it mean\nto parse a program? Well, parsing is a term\ntaken from linguistics.",
    "start": "537360",
    "end": "544875"
  },
  {
    "text": "When you have a\nsentence, you want to break it up into noun\nphrases, verb phrases,",
    "start": "544875",
    "end": "550040"
  },
  {
    "text": "and so on. So if I say, the\ncat that ate the rat",
    "start": "550040",
    "end": "555200"
  },
  {
    "text": "died, then the subject is\nthe cat that ate the rat. Now, the subject has\nother parts inside of it,",
    "start": "555200",
    "end": "562250"
  },
  {
    "text": "which could themselves be\nsubjects of other sentences, or verbs, or adjectives.",
    "start": "562250",
    "end": "567950"
  },
  {
    "text": "So in the end, you\ntake this string and you break it up into a tree\nof meaningful parts like so.",
    "start": "567950",
    "end": "575390"
  },
  {
    "start": "575390",
    "end": "600380"
  },
  {
    "text": "Now, parsing is interesting,\nbecause you can't just",
    "start": "600380",
    "end": "605570"
  },
  {
    "text": "take a random substring of this\nand assume that it makes sense.",
    "start": "605570",
    "end": "611540"
  },
  {
    "text": "For example, the rat died is\nnot part of the semantic content",
    "start": "611540",
    "end": "618560"
  },
  {
    "text": "of the sentence, right? When I say, the cat that ate\nthe rat died, that isn't.",
    "start": "618560",
    "end": "624230"
  },
  {
    "text": "So what's really\ngoing on here is the cat that ate the rat died.",
    "start": "624230",
    "end": "633390"
  },
  {
    "text": "So this is subject,\nobject, verb.",
    "start": "633390",
    "end": "639140"
  },
  {
    "text": "And the subject itself\nconsists of the cat that ate.",
    "start": "639140",
    "end": "644943"
  },
  {
    "text": "So within the subject,\nthere's a noun phrase",
    "start": "644943",
    "end": "650680"
  },
  {
    "text": "and there's a predicate. Anyway. So that's a parse\ntree for English.",
    "start": "650680",
    "end": "656329"
  },
  {
    "text": "So someone yesterday\ntalked about why English is a bad idea for compilers. It's because parse\ntrees for English",
    "start": "656330",
    "end": "661670"
  },
  {
    "text": "can be enormously\ncomplicated, and ambiguous, and hard to figure out with\njust a few lines of code.",
    "start": "661670",
    "end": "669050"
  },
  {
    "text": "So we're going to have parse\ntrees for compiler languages. This is easy enough.",
    "start": "669050",
    "end": "674540"
  },
  {
    "text": "If I write a assign, a\nplus 1, or a equals a plus 1, then that\nparses to an assignment,",
    "start": "674540",
    "end": "684890"
  },
  {
    "text": "you're assigning the identifier\na to the expression something plus something, where\nthe first something is",
    "start": "684890",
    "end": "692450"
  },
  {
    "text": "a and the second\nsomething is the number 1.  Is enough?",
    "start": "692450",
    "end": "698459"
  },
  {
    "text": "Yeah. When you write DECAF\nparsers, you're going to have parse\ntrees for much bigger syntactic structures.",
    "start": "698460",
    "end": "704339"
  },
  {
    "text": "You're going to have a parse\ntree for a program, for blocks,",
    "start": "704340",
    "end": "709770"
  },
  {
    "text": "for if statements, all the way\ndown to expressions, and terms, and so on.",
    "start": "709770",
    "end": "715300"
  },
  {
    "text": "So this is maybe\nwhat your parse trees will look like at the\nlowest level of granularity.",
    "start": "715300",
    "end": "722190"
  },
  {
    "text": "I have a friend who took\nthis class two years back. And he decided\nthat he'd print out",
    "start": "722190",
    "end": "727500"
  },
  {
    "text": "a parse tree of an\nentire big program. I think it took up\nthe entire wall.",
    "start": "727500",
    "end": "733480"
  },
  {
    "text": "So if any one of you is\nlooking for wallpaper ideas for their room,\nthen this is great. ",
    "start": "733480",
    "end": "743459"
  },
  {
    "text": "So just like we use JLex\nto generate scanners,",
    "start": "743460",
    "end": "754610"
  },
  {
    "text": "we're going to use CUP\nto generate parsers. ",
    "start": "754610",
    "end": "760279"
  },
  {
    "text": "CUP takes a parser\nspecification as input and gives you two files--\nparser.java and sym.java.",
    "start": "760280",
    "end": "768500"
  },
  {
    "text": "These perform\ndistinct functions. Do you remember we\nused sym.if and sym.id",
    "start": "768500",
    "end": "775400"
  },
  {
    "text": "in the lexer example? Those symbols, those static\ndefinitions of variables",
    "start": "775400",
    "end": "787790"
  },
  {
    "text": "were made by CUP. So similar Java will contain all\nthe tokens for your language.",
    "start": "787790",
    "end": "794510"
  },
  {
    "text": "Now, from CUP's point of view,\nyour tokens are terminals.",
    "start": "794510",
    "end": "799640"
  },
  {
    "text": "What a terminal mean\nmeans is a chunk of syntax",
    "start": "799640",
    "end": "804680"
  },
  {
    "text": "that you can't\ndecompose any further. As far as CUP is concerned,\nthat's one block or one token.",
    "start": "804680",
    "end": "811190"
  },
  {
    "text": "So tokens become terminals. And more complex structures\nthat you make out of tokens",
    "start": "811190",
    "end": "817970"
  },
  {
    "text": "are nonterminals. So for example, this\nnoun phrase consists",
    "start": "817970",
    "end": "827440"
  },
  {
    "text": "of an article and a noun. ",
    "start": "827440",
    "end": "838940"
  },
  {
    "text": "And in this case, the and cat\nwould be tokens or terminals,",
    "start": "838940",
    "end": "845210"
  },
  {
    "text": "while everything else\nabove that, the articles, noun phrases, subjects, et\ncetera, would be nonterminals.",
    "start": "845210",
    "end": "853910"
  },
  {
    "text": "So if you're wondering\nwhy we call them terminals or nonterminals, it's because\nonce you've parsed a terminal,",
    "start": "853910",
    "end": "860899"
  },
  {
    "text": "you can stop parsing\nat that point. You don't have to\nthink any further. But if you decide at some\npoint that oh, look, I",
    "start": "860900",
    "end": "866990"
  },
  {
    "text": "have a subject to\nparse, then you have a lot more\nwork to do at that. You have to decide what's\nsitting inside the subject.",
    "start": "866990",
    "end": "873920"
  },
  {
    "text": "Is there an NP in the beginning? Is there something else? What's going on? So terminal versus nonterminal.",
    "start": "873920",
    "end": "882140"
  },
  {
    "text": "The CUP syntax shouldn't\nbe very hard to understand.",
    "start": "882140",
    "end": "887750"
  },
  {
    "text": "We're saying that we declare\nour terminals and nonterminals. By convention, terminals\nare capitalized,",
    "start": "887750",
    "end": "893899"
  },
  {
    "text": "nonterminals aren't. And when I say start\nwith, what I mean is you can parse the\nentire chunk of text",
    "start": "893900",
    "end": "901070"
  },
  {
    "text": "that I'm going to give you into\na nonterminal with name assign. ",
    "start": "901070",
    "end": "908970"
  },
  {
    "text": "The reason that's important is\nthat a parser has state that",
    "start": "908970",
    "end": "914279"
  },
  {
    "text": "tells it what to try to parse. And this is what gives it\nthat state at the beginning.",
    "start": "914280",
    "end": "920079"
  },
  {
    "start": "920080",
    "end": "925140"
  },
  {
    "text": "There have got to be\nquestions at this point. I'm not that good.",
    "start": "925140",
    "end": "930190"
  },
  {
    "text": " Anyone? OK. So I am that good.",
    "start": "930190",
    "end": "936030"
  },
  {
    "text": "Awesome. ",
    "start": "936030",
    "end": "942470"
  },
  {
    "text": "Can someone tell me\nwhat's wrong with this? I've made a mistake. ",
    "start": "942470",
    "end": "949352"
  },
  {
    "text": "AUDIENCE: The 2 and the--",
    "start": "949352",
    "end": "954503"
  },
  {
    "text": "PROFESSOR: No, that's right. Go on. AUDIENCE: Oh, you\ndid that order. So I think the right\nfrom [INAUDIBLE]..",
    "start": "954503",
    "end": "965110"
  },
  {
    "text": "PROFESSOR: I made a\nmistake on the slide. The slide is-- AUDIENCE: The 1 should\nbe on the left there. PROFESSOR: Yeah.",
    "start": "965110",
    "end": "971120"
  },
  {
    "text": "Yeah. This slide kind of\nimplicitly assumes that plus is commutative. And we're just parsing.",
    "start": "971120",
    "end": "976210"
  },
  {
    "text": "We don't know anything\nabout what plus means. So you're right. I shouldn't have the\n1 on the right side.",
    "start": "976210",
    "end": "981358"
  },
  {
    "text": "I should have the\n1 on the left side. ",
    "start": "981358",
    "end": "987040"
  },
  {
    "text": "OK. So if you can fix\nthat in your minds, then the question\nstill remains--",
    "start": "987040",
    "end": "993149"
  },
  {
    "text": "should I parse this as the sum\nof the sum of 2, and 3, and 1",
    "start": "993150",
    "end": "999450"
  },
  {
    "text": "or the sum of the sum\nof 1, and 2, and 3? Now, we know from math that\nit doesn't matter for plus.",
    "start": "999450",
    "end": "1008300"
  },
  {
    "text": "But if I had times in\none of those places, then it would matter.",
    "start": "1008300",
    "end": "1013320"
  },
  {
    "text": "Right?  No? AUDIENCE: Yeah. [INAUDIBLE]",
    "start": "1013320",
    "end": "1019264"
  },
  {
    "text": "Yeah. PROFESSOR: Right. So if I had times,\nit would matter. If I had a minus\nsign, it would matter.",
    "start": "1019264",
    "end": "1026530"
  },
  {
    "text": "I mean, if I have\n3 minus 2 minus 1,",
    "start": "1026530",
    "end": "1032050"
  },
  {
    "text": "then it's conventional to treat\nthis as 3 minus 2 minus 1.",
    "start": "1032050",
    "end": "1042520"
  },
  {
    "text": "Right?  So we say that minus\nassociates in a certain way.",
    "start": "1042520",
    "end": "1049180"
  },
  {
    "text": " So the way we resolve these\nproblems, or one way to resolve",
    "start": "1049180",
    "end": "1057080"
  },
  {
    "text": "these problems, is to sit down\nand make separate productions, to say, well, we're going\nto have one level of grammar",
    "start": "1057080",
    "end": "1064620"
  },
  {
    "text": "for plus and another\nlevel for times, so on down to the bottom.",
    "start": "1064620",
    "end": "1069770"
  },
  {
    "text": "I could say that a minus\nexpression consists of a number followed by a minus.",
    "start": "1069770",
    "end": "1077240"
  },
  {
    "text": "I could really go very, very\ndeep down into the grammar and try to fix it, little\nbit by a little bit.",
    "start": "1077240",
    "end": "1083840"
  },
  {
    "text": "Another way you can do it that\nCUP lets you get away with is to say, minus associates\nto the left or times",
    "start": "1083840",
    "end": "1095330"
  },
  {
    "text": "binds tighter than plus. You can use these things to\nget around having to write",
    "start": "1095330",
    "end": "1101419"
  },
  {
    "text": "very complicated grammars. The flip side is\nwhen things go wrong, you'll get very\npuzzling error messages.",
    "start": "1101420",
    "end": "1107450"
  },
  {
    "text": "You'll have conflicts\nbetween things that you didn't\nwrite, because it's",
    "start": "1107450",
    "end": "1113210"
  },
  {
    "text": "making up grammar rules to make\nup for your ambiguous grammar.",
    "start": "1113210",
    "end": "1121208"
  },
  {
    "text": "Did I make it clear what\nan ambiguous grammar is? I haven't used the word before. But does it make sense why I'm\ncalling this grammar ambiguous?",
    "start": "1121208",
    "end": "1130450"
  },
  {
    "text": " Were you saying something? AUDIENCE: Pull up the\ngrammar rule for plus.",
    "start": "1130450",
    "end": "1137245"
  },
  {
    "text": "That would just [INAUDIBLE]\nthat discussion. Right now, the\nrule for plus, that would produce either\none of the other trees.",
    "start": "1137245",
    "end": "1144520"
  },
  {
    "text": "PROFESSOR: Well, my point was\nthat if we just have this rule, it could be one or the other.",
    "start": "1144520",
    "end": "1150010"
  },
  {
    "text": " I mean, we haven't told the\ncompiler which one to use.",
    "start": "1150010",
    "end": "1155830"
  },
  {
    "text": "We haven't told CUP\nwhich one to use. And in fact, it's going\nto complain and say, I don't know which one to use.",
    "start": "1155830",
    "end": "1161410"
  },
  {
    "text": "There's a conflict.  Did that answer your question?",
    "start": "1161410",
    "end": "1167500"
  },
  {
    "text": "I could-- sorry. AUDIENCE: Oh, you\nwant to keep going? Some people have those big--",
    "start": "1167500",
    "end": "1173715"
  },
  {
    "text": "you see those big\nthings of what, what operators take precedence. Each one [INAUDIBLE].",
    "start": "1173715",
    "end": "1180610"
  },
  {
    "text": "PROFESSOR: Right. So you can do that. Or what you can also\ndo is you can write it,",
    "start": "1180610",
    "end": "1187120"
  },
  {
    "text": "pretending that it'll take\ncare of itself, and in the end, say that this has\ngreater precedence.",
    "start": "1187120",
    "end": "1193510"
  },
  {
    "text": "So I can work through an example\nfor the plus and times case",
    "start": "1193510",
    "end": "1199148"
  },
  {
    "text": "to see how we can resolve this. ",
    "start": "1199148",
    "end": "1206549"
  },
  {
    "text": "Suppose I want to parse\nexpressions of the form-- ",
    "start": "1206550",
    "end": "1219680"
  },
  {
    "text": "right? So we have plus,\ntimes, and parentheses.",
    "start": "1219680",
    "end": "1228050"
  },
  {
    "text": "How many people have\nseen this before, like how to parse these? Anyone?",
    "start": "1228050",
    "end": "1233740"
  },
  {
    "text": "So you've seen them before. Good. So this is actually going\nto be useful to people. Excellent. ",
    "start": "1233740",
    "end": "1241130"
  },
  {
    "text": "The idea behind\nparsing this is you want paren to bind very tightly.",
    "start": "1241130",
    "end": "1247850"
  },
  {
    "text": "You want star to bind\nless tightly than paren, and plus to bind\nthe least tightly.",
    "start": "1247850",
    "end": "1253700"
  },
  {
    "text": "So what we're going\nto do is we're going to have three nonterminals-- expression, term, and factor.",
    "start": "1253700",
    "end": "1269320"
  },
  {
    "text": " An expression is\njust the whole thing.",
    "start": "1269320",
    "end": "1276350"
  },
  {
    "text": "A term is something\nthat you can add. So 1 is a term.",
    "start": "1276350",
    "end": "1281960"
  },
  {
    "text": "2 times 3 plus 4 is a term. 3 is a term. That make sense?",
    "start": "1281960",
    "end": "1289110"
  },
  {
    "text": "And a factor is something\nthat you multiply. So 2 is also a factor.",
    "start": "1289110",
    "end": "1294990"
  },
  {
    "text": "This parenthesized\nexpression is a factor. ",
    "start": "1294990",
    "end": "1302050"
  },
  {
    "text": "So I'd like people to\nsuggest productions. What rules should I have here?",
    "start": "1302050",
    "end": "1307870"
  },
  {
    "text": " I'll start you off. ",
    "start": "1307870",
    "end": "1316520"
  },
  {
    "text": "Just a number here. ",
    "start": "1316520",
    "end": "1328220"
  },
  {
    "text": "If you aren't sure what syntax\nto use, just say something, and I'll try to write\nit the correct way.",
    "start": "1328220",
    "end": "1335730"
  },
  {
    "text": "So don't worry about that. ",
    "start": "1335730",
    "end": "1344010"
  },
  {
    "text": "AUDIENCE: Terms are numbers too. PROFESSOR: So the\nway I was hoping to take that into account was to\nsay that factors are terms too.",
    "start": "1344010",
    "end": "1352620"
  },
  {
    "text": "Should I write that down? AUDIENCE: Yeah. ",
    "start": "1352620",
    "end": "1371700"
  },
  {
    "text": "PROFESSOR: And in\na similar vein, expressions are terms too.",
    "start": "1371700",
    "end": "1381670"
  },
  {
    "text": "Right? You could have just\na term by itself. That would be an expression. ",
    "start": "1381670",
    "end": "1390030"
  },
  {
    "text": "More ideas? So how would you like\nto take care of things",
    "start": "1390030",
    "end": "1395260"
  },
  {
    "text": "like one term followed by a\nplus followed by other stuff?",
    "start": "1395260",
    "end": "1403720"
  },
  {
    "text": "How should we represent that? ",
    "start": "1403720",
    "end": "1409380"
  },
  {
    "text": "Someone else. I'd like people to answer. ",
    "start": "1409380",
    "end": "1421150"
  },
  {
    "text": "Let's glance back at\nwhat was happening here. What we said here\nwas really simple. We said an expression can\nbe an expression followed",
    "start": "1421150",
    "end": "1428260"
  },
  {
    "text": "by a plus followed by\nanother expression. And the reason there\nwas ambiguity there",
    "start": "1428260",
    "end": "1433600"
  },
  {
    "text": "was that the expression\non the left-- I mean, the plus here\ncould have bound to--",
    "start": "1433600",
    "end": "1440020"
  },
  {
    "start": "1440020",
    "end": "1445750"
  },
  {
    "text": "the question was is it this\nplus we're talking about or is it this one? Right?",
    "start": "1445750",
    "end": "1451360"
  },
  {
    "text": "It could have been either. And we didn't say which. I'd like someone to\npropose a fix that",
    "start": "1451360",
    "end": "1458350"
  },
  {
    "text": "doesn't have this problem here. ",
    "start": "1458350",
    "end": "1471803"
  },
  {
    "text": "AUDIENCE: It's going\nto be hidden expression with a, I don't know, factor\nplus factor to [INAUDIBLE]..",
    "start": "1471803",
    "end": "1482674"
  },
  {
    "text": "PROFESSOR: So\nthat's a good idea. Let's see what happens then.",
    "start": "1482675",
    "end": "1487950"
  },
  {
    "text": "The way I intended it was\nfor expression to be term. I mean, factors are\nthings you multiply, terms are things you add.",
    "start": "1487950",
    "end": "1494220"
  },
  {
    "text": "So I think maybe you meant\nexpression is term plus term. AUDIENCE: Oh, yeah, term.",
    "start": "1494220",
    "end": "1500458"
  },
  {
    "text": "PROFESSOR: It's all good. ",
    "start": "1500458",
    "end": "1513380"
  },
  {
    "text": "So that's a good\nstart, but there's something wrong with it. Someone want to tell me\nwhat went wrong here?",
    "start": "1513380",
    "end": "1518390"
  },
  {
    "text": " I mean, how do I parse\nsomething like 1 plus 2 plus 3?",
    "start": "1518390",
    "end": "1525370"
  },
  {
    "text": "So it's going to start\noff, say, one is a term. There's a plus. AUDIENCE: Expression?",
    "start": "1525370",
    "end": "1531760"
  },
  {
    "text": "PROFESSOR: Excellent. Thank you. ",
    "start": "1531760",
    "end": "1540758"
  },
  {
    "text": "So now, you've seen\nthe expression version. What's the factor version? ",
    "start": "1540758",
    "end": "1546810"
  },
  {
    "text": "Or what should I\nwrite down for term? ",
    "start": "1546810",
    "end": "1556250"
  },
  {
    "text": "It's just like this.  Someone?",
    "start": "1556250",
    "end": "1563630"
  },
  {
    "text": "AUDIENCE: Term equals\nfactor times paren. PROFESSOR: Factor times? So if it were a factor\ntimes expression,",
    "start": "1563630",
    "end": "1570950"
  },
  {
    "text": "then think about\nwhat happens here. AUDIENCE: Factor times term.",
    "start": "1570950",
    "end": "1577400"
  },
  {
    "start": "1577400",
    "end": "1591350"
  },
  {
    "text": "PROFESSOR: Does everyone\nsee what's going on here? Raise your hand if you don't. AUDIENCE: So you said--",
    "start": "1591350",
    "end": "1596418"
  },
  {
    "text": "I think I know some\nof what you're saying. Term is something\nthat is [INAUDIBLE]..",
    "start": "1596418",
    "end": "1603448"
  },
  {
    "text": "PROFESSOR: That is added. AUDIENCE: Oh, term is added. PROFESSOR: I'm sorry. Factor, you know. AUDIENCE: Oh, OK.",
    "start": "1603448",
    "end": "1609296"
  },
  {
    "text": "Factor's still needed? PROFESSOR: Factor's what you\nmultiply, term's what you add. ",
    "start": "1609296",
    "end": "1627890"
  },
  {
    "text": "This might not be good anymore. ",
    "start": "1627890",
    "end": "1632925"
  },
  {
    "text": "So that's expression. And that's term. How are we dealing\nwith parentheses? ",
    "start": "1632925",
    "end": "1641510"
  },
  {
    "text": "Someone else? Come on. ",
    "start": "1641510",
    "end": "1657169"
  },
  {
    "text": "So here's a hint-- it's\na factor production. We already know that numbers\nby themselves are factors.",
    "start": "1657170",
    "end": "1665110"
  },
  {
    "text": "What other kind of\nfactor can you imagine? ",
    "start": "1665110",
    "end": "1680110"
  },
  {
    "text": "So let me ask you\nanother question, then. What sort of thing do you expect\nto find inside the parentheses?",
    "start": "1680110",
    "end": "1686980"
  },
  {
    "text": "Can you give me a\nnonterminal that captures what's going to\nbe inside the parentheses?",
    "start": "1686980",
    "end": "1693350"
  },
  {
    "text": "AUDIENCE: Expressions? PROFESSOR: It's an expression. Perfect. So it's LPAREN expression.",
    "start": "1693350",
    "end": "1704530"
  },
  {
    "start": "1704530",
    "end": "1717398"
  },
  {
    "text": "Raise your hand if you\ndon't know what's going on and I'm not making\nany sense at all. ",
    "start": "1717398",
    "end": "1725700"
  },
  {
    "text": "AUDIENCE: So that's\nwhat a factor can be-- PROFESSOR: Yeah. AUDIENCE: --not\nwhat necessarily-- PROFESSOR: So this\nis an exhaustive list",
    "start": "1725700",
    "end": "1734180"
  },
  {
    "text": "of what factors can be. AUDIENCE: So it's not like\nthe right-hand side replaces",
    "start": "1734180",
    "end": "1739920"
  },
  {
    "text": "the left-hand? PROFESSOR: Excuse me? AUDIENCE: Are you\ngoing in order?",
    "start": "1739920",
    "end": "1745257"
  },
  {
    "text": "PROFESSOR: The way I've\npresented it so far, there is no order. But you can tell CUP that things\nthat appear higher or lower",
    "start": "1745257",
    "end": "1752400"
  },
  {
    "text": "have higher precedence.  This grammar is unambiguous.",
    "start": "1752400",
    "end": "1758520"
  },
  {
    "text": "I mean, if I give you any\nexpression of this form, then there's always\nexactly one choice to take.",
    "start": "1758520",
    "end": "1764160"
  },
  {
    "text": " I haven't proven this.",
    "start": "1764160",
    "end": "1769443"
  },
  {
    "text": "I'm not going to prove this. But do people see intuitively\nwhy this should be the case? ",
    "start": "1769443",
    "end": "1777990"
  },
  {
    "text": "Let's try parsing this, right? So I start off here. ",
    "start": "1777990",
    "end": "1783590"
  },
  {
    "text": "And I see a 1. I want to parse an expression. So that's what I meant by\nthe start with nonterminal.",
    "start": "1783590",
    "end": "1793400"
  },
  {
    "text": "I'm starting with the intention\nof parsing an expression. Now, if I want to parse an\nexpression and I see a 1,",
    "start": "1793400",
    "end": "1804890"
  },
  {
    "text": "then an expression\ncould be a term by itself or a term\nplus expression.",
    "start": "1804890",
    "end": "1812990"
  },
  {
    "text": "This tells me that,\nin either case, I want to start\nparsing a term, right?",
    "start": "1812990",
    "end": "1820490"
  },
  {
    "text": "I mean, if I have\nany hope, if I want to have any hope of finishing\nby passing an expression,",
    "start": "1820490",
    "end": "1826640"
  },
  {
    "text": "I'd better parse the term now. OK? So now, I want to parse a term.",
    "start": "1826640",
    "end": "1832550"
  },
  {
    "text": "I see a 1. I look at the rules. I could parse a factor or\nI could parse a factor.",
    "start": "1832550",
    "end": "1840860"
  },
  {
    "text": "OK, parse a factor. And the factor rules say,\nyou either want a number",
    "start": "1840860",
    "end": "1847070"
  },
  {
    "text": "or you want something that\nstarts with an LPAREN. Do we see an LPAREN here?",
    "start": "1847070",
    "end": "1852230"
  },
  {
    "text": " No. So there's a number.",
    "start": "1852230",
    "end": "1857850"
  },
  {
    "text": "And we can parse this out to be\na factor, which is then a term.",
    "start": "1857850",
    "end": "1865870"
  },
  {
    "text": "And we are back at\nthe expression rule. And now, we see a plus sign.",
    "start": "1865870",
    "end": "1870940"
  },
  {
    "text": "So we use this rule instead of\nthe other possibility and so on.",
    "start": "1870940",
    "end": "1876750"
  },
  {
    "text": "Make sense? Now, the important\nthing to realize",
    "start": "1876750",
    "end": "1882700"
  },
  {
    "text": "is just because of\nthe precedence levels of plus, times, and paren,\nwe had to write six rules.",
    "start": "1882700",
    "end": "1892000"
  },
  {
    "text": "It would be nice if\nwe could just say, expressions are expressions\nplus expressions, or expressions\ntimes expressions,",
    "start": "1892000",
    "end": "1898330"
  },
  {
    "text": "or parenthesized expressions. Everyone hears your scheme.",
    "start": "1898330",
    "end": "1904790"
  },
  {
    "text": "Right? There's no precedence. Life is easy. You can say plus times\ngrouping and you're done,",
    "start": "1904790",
    "end": "1912820"
  },
  {
    "text": "nothing further to think about. You can. You can, in fact, get\naway with doing that, with just saying\nthat much if you're",
    "start": "1912820",
    "end": "1920380"
  },
  {
    "text": "willing to use precedence\ndirectives that tell",
    "start": "1920380",
    "end": "1927070"
  },
  {
    "text": "CUP that things\nbind to the right or that things bind more\ntightly than other things.",
    "start": "1927070",
    "end": "1932695"
  },
  {
    "text": " So that's all for parser\ngeneration and ambiguity.",
    "start": "1932695",
    "end": "1939624"
  },
  {
    "text": "AUDIENCE: I'm still kind of\nconfused on your example. was that the\naddition first, then?",
    "start": "1939624",
    "end": "1945580"
  },
  {
    "text": "So I'm not sure how the\nmultiplication would work. PROFESSOR: OK. Let's-- AUDIENCE: Sort of\nfits in the parsing.",
    "start": "1945580",
    "end": "1950913"
  },
  {
    "text": " PROFESSOR: Are we talking\nabout this example or this one? AUDIENCE: That one.",
    "start": "1950913",
    "end": "1956140"
  },
  {
    "text": "PROFESSOR: This one? AUDIENCE: No, no,\nthe one on the right. PROFESSOR: This one. AUDIENCE: I think that\nyou just went over, right? PROFESSOR: OK.",
    "start": "1956140",
    "end": "1961480"
  },
  {
    "text": "So all right. What do you think is\ngoing to go wrong?",
    "start": "1961480",
    "end": "1967360"
  },
  {
    "text": "Or is it just not clear\nwhat's going to happen? AUDIENCE: I guess it's\nlooking for an expression.",
    "start": "1967360",
    "end": "1974500"
  },
  {
    "text": "PROFESSOR: Right. So it starts out looking\nfor an expression.",
    "start": "1974500",
    "end": "1980559"
  },
  {
    "text": "AUDIENCE: So it needs to\neither get a term or a term plus expression?",
    "start": "1980560",
    "end": "1985920"
  },
  {
    "text": "PROFESSOR: Right. So it needs to start\nby getting a term. And then once it's\nfinished the term,",
    "start": "1985920",
    "end": "1992130"
  },
  {
    "text": "it can look for what to do next. Right?",
    "start": "1992130",
    "end": "1997137"
  },
  {
    "text": "I mean, there are two\nrules for expression-- either this one or this one.",
    "start": "1997137",
    "end": "2002429"
  },
  {
    "text": "Both of them have\nthis common prefix. And then at the end of\nit, you can either decide,",
    "start": "2002430",
    "end": "2009539"
  },
  {
    "text": "oh, this is the end,\nor you can decide, there's a plus trailing,\nI can go with this.",
    "start": "2009540",
    "end": "2017420"
  },
  {
    "text": "That make sense? So in this case, you\nparse one out as a term.",
    "start": "2017420",
    "end": "2024049"
  },
  {
    "text": "You see the plus. And so because you want to\nbe as greedy as possible-- I haven't mentioned this.",
    "start": "2024050",
    "end": "2029090"
  },
  {
    "text": "This has been kind of implicit\nin what I've been saying. The parser tries to be greedy. If it sees a plus, it\ntries to match the plus.",
    "start": "2029090",
    "end": "2035570"
  },
  {
    "text": "It doesn't say, oh, what-- I've seen the 1. I have an expression. I'm done. There's a plus left,\nso it grabs that.",
    "start": "2035570",
    "end": "2043320"
  },
  {
    "text": "Yeah. So it grabs the\nplus and then says, oh, now, I want to pass\nanother expression. AUDIENCE: Oh, OK.",
    "start": "2043320",
    "end": "2049129"
  },
  {
    "text": "So it parses between precursor. So it does that first there. PROFESSOR: Right, so\n1 plus expression,",
    "start": "2049130",
    "end": "2056010"
  },
  {
    "text": "which is term, which\nstarts with factor.",
    "start": "2056010",
    "end": "2061669"
  },
  {
    "text": "There's a times. So let's parse another\nfactor, which is LPAREN,",
    "start": "2061670",
    "end": "2066770"
  },
  {
    "text": "so parse expression, and so on. Am I making sense?",
    "start": "2066770",
    "end": "2074230"
  },
  {
    "text": "Have I lost 50% yet? OK. There's this measure with drugs.",
    "start": "2074230",
    "end": "2081810"
  },
  {
    "text": "My friends at\ncompanies like DuPont tell me that you\ngive them to rats. And then once 50%\ndie, that's a measure",
    "start": "2081810",
    "end": "2088825"
  },
  {
    "text": "of how lethal the drug is. And then you make cosmetics out\nof it and give them to people.",
    "start": "2088826",
    "end": "2094780"
  },
  {
    "text": "It's pretty fun, I'm told. All right. So errors-- we all\nhave errors, right?",
    "start": "2094780",
    "end": "2102370"
  },
  {
    "text": "You will learn to love\nerrors, because when I wrote my first compiler,\nthe error message-- there",
    "start": "2102370",
    "end": "2109510"
  },
  {
    "text": "was one error message. And it said error. This is really nice. You know that there's an error.",
    "start": "2109510",
    "end": "2115540"
  },
  {
    "text": "It's good. But if you have a 500-line\nprogram and no clue what",
    "start": "2115540",
    "end": "2123100"
  },
  {
    "text": "exactly went wrong or in what\nphrase, it's not helpful. So we have several\ngoals with errors.",
    "start": "2123100",
    "end": "2130430"
  },
  {
    "text": "We want to report lots of\nerrors when you're on Java, typically it reports 100\nerrors and then stops.",
    "start": "2130430",
    "end": "2137200"
  },
  {
    "text": "Have people see this? You write a huge\nprogram for 170. You're confident it works.",
    "start": "2137200",
    "end": "2142495"
  },
  {
    "text": "You missed out one semicolon. And then it gets confused\nand gives you 100 errors.",
    "start": "2142495",
    "end": "2147940"
  },
  {
    "text": "It's a lot of fun. The other thing is\nwant to be accurate. A lot of old C compilers\nreport a missing semicolon",
    "start": "2147940",
    "end": "2156309"
  },
  {
    "text": "on the next line. Have people seen this? Because it doesn't really\ncare about whitespace.",
    "start": "2156310",
    "end": "2164530"
  },
  {
    "text": "And the point at which\nthe compiler gets confused is when it sees the next token\nwithout a semicolon, which",
    "start": "2164530",
    "end": "2171940"
  },
  {
    "text": "is on the next line. So it reports the error.  And you want to have\na specific message.",
    "start": "2171940",
    "end": "2178300"
  },
  {
    "text": "If there's a problem\nwith a variable type, you don't want to\nsay syntax error.",
    "start": "2178300",
    "end": "2185829"
  },
  {
    "text": "I think QBasic used to do this,\nsyntax error for everything. ",
    "start": "2185830",
    "end": "2192570"
  },
  {
    "text": "Then again, this\nis just a class. You're not making an\nindustrial-strength compiler.",
    "start": "2192570",
    "end": "2197710"
  },
  {
    "text": "We don't really care what your\nerrors look like, but you will. When you're spending\nlate nights in November--",
    "start": "2197710",
    "end": "2204000"
  },
  {
    "text": "not that you will. I'm sure everyone will finish\nthis by 7:30 in the evening. But if you're\nspending late nights,",
    "start": "2204000",
    "end": "2210450"
  },
  {
    "text": "then it's nice to\nhave good errors. So the way to do this is I was\nshowing you some lexer rules",
    "start": "2210450",
    "end": "2220290"
  },
  {
    "text": "here. The lexer rules in this case\njust said, there's a symbol if.",
    "start": "2220290",
    "end": "2227339"
  },
  {
    "text": "And there's an ID symbol. Here's the contents. And that's it.",
    "start": "2227340",
    "end": "2232950"
  },
  {
    "text": "You also want to remember where\nyou saw it, so which line, which column. It's going to be useful later.",
    "start": "2232950",
    "end": "2238740"
  },
  {
    "text": "When you find an error,\nmaybe way down later, when you're checking\ntypes, and you find someone's doing string\nplus integer plus Boolean",
    "start": "2238740",
    "end": "2245880"
  },
  {
    "text": "and you don't know what to\ndo with that, at that point, you want to know where in\nthe code that happened.",
    "start": "2245880",
    "end": "2251160"
  },
  {
    "text": "You don't want to say,\noh, well, you know, it was somewhere\nin the syntax tree. That's not useful to whoever\nis debugging the code.",
    "start": "2251160",
    "end": "2259320"
  },
  {
    "text": "So remember to save\nline number information.",
    "start": "2259320",
    "end": "2266380"
  },
  {
    "text": "And in the parser, I\nthink we'll have more to say about this as we get to\nthe parser further in detail.",
    "start": "2266380",
    "end": "2271680"
  },
  {
    "text": "But if you can't parse\nsomething, imagine for a moment",
    "start": "2271680",
    "end": "2277770"
  },
  {
    "text": "that this was--",
    "start": "2277770",
    "end": "2282930"
  },
  {
    "start": "2282930",
    "end": "2292530"
  },
  {
    "text": "imagine that you were\ntrying to parse this. So you will start out wanting\nto parse an expression--",
    "start": "2292530",
    "end": "2298050"
  },
  {
    "text": "1 plus-- things are\ngoing well so far. You want to parse an expression.",
    "start": "2298050",
    "end": "2303600"
  },
  {
    "text": "Now, deep inside\nthe recursion, you discover, oh, wait,\nit's not an expression. Right?",
    "start": "2303600",
    "end": "2308760"
  },
  {
    "text": "You see this str\nthing, which doesn't match any of your rules. Now, one thing you could\ndo is you could bail out.",
    "start": "2308760",
    "end": "2315870"
  },
  {
    "text": "You could just say,\nwell, I'm confused now. I don't know what to do. There's a thing I don't\nknow how to deal with.",
    "start": "2315870",
    "end": "2322630"
  },
  {
    "text": "So I'll just exit, and report\none error very precisely, and leave. ",
    "start": "2322630",
    "end": "2329740"
  },
  {
    "text": "This has been done and\nit's sometimes useful. It makes you compiler\na lot less complex",
    "start": "2329740",
    "end": "2335170"
  },
  {
    "text": "and it gives you\nquick turnaround times, because you have less-- if you just say, I\nwill not get confused,",
    "start": "2335170",
    "end": "2341620"
  },
  {
    "text": "I will just stop whenever\nI see my first error, you can get quick\nturnaround time. Another approach might\nbe to say, well, now,",
    "start": "2341620",
    "end": "2350350"
  },
  {
    "text": "I'm seeing something that I\ndon't know how to deal with. That's fine. I'll take it in my stride. I'll make this\ninto an error token",
    "start": "2350350",
    "end": "2359320"
  },
  {
    "text": "and keep parsing till I can find\nsomething that I can deal with. So maybe there's a semicolon\nat the end of this.",
    "start": "2359320",
    "end": "2367750"
  },
  {
    "text": "And then there's more stuff\nthat you could make sense of.",
    "start": "2367750",
    "end": "2373900"
  },
  {
    "text": "Report an error for the\nstr and then keep going. We'll talk about\nhow you can do this. ",
    "start": "2373900",
    "end": "2382690"
  },
  {
    "text": "Now, for the actual what\nyou have to type in, I highly recommend that\nyou use and, or make,",
    "start": "2382690",
    "end": "2390700"
  },
  {
    "text": "or something like that. Has everyone taken 170 here-- 170 or a software\nengineering class?",
    "start": "2390700",
    "end": "2398380"
  },
  {
    "text": "Good. Really, please,\nyou're going to be generating files in multiple.",
    "start": "2398380",
    "end": "2404260"
  },
  {
    "text": "You're going to be\ncompiling in multiple levels because you have to\nhave one phase where you update the lexer.",
    "start": "2404260",
    "end": "2410267"
  },
  {
    "text": "And then you make\nsomething out of it. And then that goes\ninto your classes.",
    "start": "2410267",
    "end": "2415490"
  },
  {
    "text": "If you do this by hand, you\nwill be in a world of pain. Please, don't do it. ",
    "start": "2415490",
    "end": "2423380"
  },
  {
    "text": "Here's a sample and target\nto do what you want to do. Again, this is there. This is included\nin the sample code",
    "start": "2423380",
    "end": "2429620"
  },
  {
    "text": "that I was talking\nabout earlier. Here's the parser.",
    "start": "2429620",
    "end": "2436030"
  },
  {
    "text": "A little bit got cut off. Same idea. ",
    "start": "2436030",
    "end": "2443200"
  },
  {
    "text": "And that's my final message. ",
    "start": "2443200",
    "end": "2449779"
  },
  {
    "text": "Questions? ",
    "start": "2449780",
    "end": "2455668"
  },
  {
    "text": "AUDIENCE: Now, is\nthis available online? PROFESSOR: Yes, it will be soon. There's a slightly older\nversion, like two hours",
    "start": "2455668",
    "end": "2461580"
  },
  {
    "text": "older, that is up on the site. But I made some\nchanges since then. Do you have a question?",
    "start": "2461580",
    "end": "2468580"
  },
  {
    "text": "So I'm going to move\nto a terminal window and show you how I did this\nor show you actually running",
    "start": "2468580",
    "end": "2477779"
  },
  {
    "text": "this minimal lexer and parser. ",
    "start": "2477780",
    "end": "2486680"
  },
  {
    "text": "Can everyone read the text\nin the terminal windows? In back? OK, good.",
    "start": "2486680",
    "end": "2492740"
  },
  {
    "text": "So here we are. I have a copy of this\nin my own directory.",
    "start": "2492740",
    "end": "2499950"
  },
  {
    "text": "I don't want to edit stuff here. So here we are. ",
    "start": "2499950",
    "end": "2518339"
  },
  {
    "text": "It's probably a little\nhard to read because-- OK. AUDIENCE: Sorry, can you\nturn off [INAUDIBLE]?? PROFESSOR: Yeah.",
    "start": "2518340",
    "end": "2524400"
  },
  {
    "text": "I just realized. Thank you. ",
    "start": "2524400",
    "end": "2531420"
  },
  {
    "text": "So I've put all the targets\ninto one Ant build file, so a bunch of\nproperty set up here",
    "start": "2531420",
    "end": "2537420"
  },
  {
    "text": "that maybe you can use to\nkeep your directory straight. ",
    "start": "2537420",
    "end": "2569319"
  },
  {
    "text": "Here's what we're using for CUP.  This is the grammar\nI just showed you.",
    "start": "2569320",
    "end": "2576730"
  },
  {
    "text": "Can people see that? It's the same grammar. ",
    "start": "2576730",
    "end": "2582369"
  },
  {
    "text": "OK, good. So they decided to call--",
    "start": "2582370",
    "end": "2591190"
  },
  {
    "text": "yeah, so they want to\nstart with extra list. ",
    "start": "2591190",
    "end": "2600070"
  },
  {
    "text": "Notice that what's\ngoing on here is they're associating the other way. Where I had left\nassociative expressions,",
    "start": "2600070",
    "end": "2606430"
  },
  {
    "text": "so parse a factor parse\na term, parse a plus,",
    "start": "2606430",
    "end": "2613125"
  },
  {
    "text": "and then another\nexpression, what they have is parse an\nexpression, a plus, and another term.",
    "start": "2613125",
    "end": "2619060"
  },
  {
    "text": "It's recursing on\nthe right side, which is practically the same\nthing for plus, not for minus.",
    "start": "2619060",
    "end": "2627190"
  },
  {
    "text": "For minus, they're\nright, I'm wrong. Do people see why?",
    "start": "2627190",
    "end": "2632420"
  },
  {
    "text": "So imagine doing the\nsame thing for minus. What goes wrong? ",
    "start": "2632420",
    "end": "2647010"
  },
  {
    "text": "Here's one parse tree for minus. ",
    "start": "2647010",
    "end": "2667125"
  },
  {
    "text": "Which of those\ntrees are we going to get if we use a grammar\nsimilar to that one? ",
    "start": "2667125",
    "end": "2674688"
  },
  {
    "text": "How many people think that\nwe are going to get 1? ",
    "start": "2674688",
    "end": "2681490"
  },
  {
    "text": "We're going to get 1. OK, so everyone else has no\nopinion or thinks it's 2.",
    "start": "2681490",
    "end": "2687100"
  },
  {
    "text": "Safe? OK. So the reason we're\ngoing to get 1 is that we start off by\ntrying to parse an expression,",
    "start": "2687100",
    "end": "2696190"
  },
  {
    "text": "parse the tree out, see a minus,\nand want to parse the rest. So you get this,\nbut this is wrong.",
    "start": "2696190",
    "end": "2703442"
  },
  {
    "text": "You want the answer\nof this thing. You want this to evaluate\nthe 0 and not the 2.",
    "start": "2703443",
    "end": "2713130"
  },
  {
    "text": " Right? ",
    "start": "2713130",
    "end": "2719050"
  },
  {
    "text": "Which is why they have\nright recursive rules. ",
    "start": "2719050",
    "end": "2725850"
  },
  {
    "text": "So that's there. ",
    "start": "2725850",
    "end": "2743049"
  },
  {
    "text": "Do people see what's\ngoing on here? Really simple tokens. So if you see a semicolon,\nreturn the symbol semi.",
    "start": "2743050",
    "end": "2751780"
  },
  {
    "text": "We defined sym.semi, sym.plus,\nand so on in the .cup file. ",
    "start": "2751780",
    "end": "2762184"
  },
  {
    "text": "The-- sorry. ",
    "start": "2762184",
    "end": "2787250"
  },
  {
    "text": "So a warning here. The Ant that's pre-installed\nwith Athena does not support",
    "start": "2787250",
    "end": "2793160"
  },
  {
    "text": "some of the attributes\nI used here, which is why I recommend the\nnewer version in the 6.170 locker.",
    "start": "2793160",
    "end": "2798650"
  },
  {
    "start": "2798650",
    "end": "2803880"
  },
  {
    "text": "AUDIENCE: Was\nthat-- that's the-- is that an Ant? Is that a program?",
    "start": "2803880",
    "end": "2808900"
  },
  {
    "text": "PROFESSOR: Uh-huh. Did you take 170? AUDIENCE: Yeah. PROFESSOR: Did they\nuse Ant in that?",
    "start": "2808900",
    "end": "2814230"
  },
  {
    "text": "Or no, maybe they used Eclipse. AUDIENCE: Yeah, we\njust switched over. PROFESSOR: I'm sorry. So for people who\nhaven't used Ant",
    "start": "2814230",
    "end": "2822080"
  },
  {
    "text": "and want to learn how to use\nAnt, you can send me mail",
    "start": "2822080",
    "end": "2827120"
  },
  {
    "text": "and I'll maybe set up an office\nhour session or something. You could use\nEclipse to do this.",
    "start": "2827120",
    "end": "2833645"
  },
  {
    "text": " I haven't. I haven't explicitly\ntried to get it working.",
    "start": "2833645",
    "end": "2840420"
  },
  {
    "text": "But if enough people\nare interested, I could do that too. ",
    "start": "2840420",
    "end": "2848480"
  },
  {
    "text": "AUDIENCE: Isn't that pretty\nmuch the same as Make? PROFESSOR: It is, except\nI find it easier to use.",
    "start": "2848480",
    "end": "2854210"
  },
  {
    "text": "If you prefer Make, go for it.  It works.",
    "start": "2854210",
    "end": "2859215"
  },
  {
    "text": " Does everyone see the bottom\nthe actual running program?",
    "start": "2859215",
    "end": "2866910"
  },
  {
    "text": "So you know, if I type\nin expression semicolon, I get the value out. ",
    "start": "2866910",
    "end": "2888460"
  },
  {
    "text": "Excellent. So we're done for today. ",
    "start": "2888460",
    "end": "2902310"
  },
  {
    "text": "So that's what happens\nif you give it an error. ",
    "start": "2902310",
    "end": "2907000"
  }
]