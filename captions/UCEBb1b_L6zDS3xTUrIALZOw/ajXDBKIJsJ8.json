[
  {
    "start": "0",
    "end": "204000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6950"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6950",
    "end": "13500"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13500",
    "end": "18680"
  },
  {
    "start": "18680",
    "end": "29540"
  },
  {
    "text": "PROFESSOR: All right. Can everyone hear me? So I guess it's 2:35, and we\nmight as well get started.",
    "start": "29540",
    "end": "35960"
  },
  {
    "text": "So the calendar, I think, still\nsays that we have a guest lecture today but sorry to\ndisappoint you, there is no",
    "start": "35960",
    "end": "42690"
  },
  {
    "text": "guest lecture. Instead we have a quiz for\nyou on Thursday, which is so much more fun.",
    "start": "42690",
    "end": "48950"
  },
  {
    "text": "Not really. But I do realize that everybody\nhas a lot to do, even just for this class.",
    "start": "48950",
    "end": "55300"
  },
  {
    "text": "You guys have your final\nproject and so on. So hopefully this\nwill be helpful. It won't take the entire 1 and\n1/2 hours, I don't think.",
    "start": "55300",
    "end": "63340"
  },
  {
    "text": "And the remaining time will be\nup in office hours, answering questions about stuff.",
    "start": "63340",
    "end": "68880"
  },
  {
    "text": "So the first thing is I decided\nto run some stats that",
    "start": "68880",
    "end": "75020"
  },
  {
    "text": "we haven't run before\nfor this class. These are your Project 42\n4.2 final submissions.",
    "start": "75020",
    "end": "80100"
  },
  {
    "text": "And in the red are your beta\nsubmission run times. And in the blue are your\ncorresponding final",
    "start": "80100",
    "end": "86380"
  },
  {
    "text": "submission run times. I thought it was just\ninteresting to see some groups",
    "start": "86380",
    "end": "91820"
  },
  {
    "text": "did massive improvements, while\nothers didn't really change their programs much.",
    "start": "91820",
    "end": "99020"
  },
  {
    "text": "And just to give you an idea,\na 90% for your performance grade is indicated by that\ngreen line and below.",
    "start": "99020",
    "end": "108090"
  },
  {
    "text": "So the majority of the class\ndid really well. ",
    "start": "108090",
    "end": "114800"
  },
  {
    "text": "All right. So the thing that everybody's\nconcerned about. So Quiz 2 will be in lecture\non Thursday.",
    "start": "114800",
    "end": "123070"
  },
  {
    "text": "It'll be an 80 minute quiz,\nsimilar in format to the previous one. And you guys once again are\nallowed a one-page handwritten",
    "start": "123070",
    "end": "132400"
  },
  {
    "text": "crib sheet. And it covers everything that\nhas been done since Quiz 1.",
    "start": "132400",
    "end": "139730"
  },
  {
    "text": "It's not designed to be\ncumulative, but unfortunately due to the nature of the class,\nthere's going to be some things from the previous\npart of the class that you",
    "start": "139730",
    "end": "148130"
  },
  {
    "text": "would need to know or it would\nbe helpful to know. Unlike last time, we didn't\npost a practice quiz on",
    "start": "148130",
    "end": "156099"
  },
  {
    "text": "Stellar, because it turns out\nthat the material and the order of the material gets\nshuffled around quite a bit",
    "start": "156100",
    "end": "161650"
  },
  {
    "text": "every year. And we have different focuses. So posting a practice quiz would\nactually be pretty mean,",
    "start": "161650",
    "end": "166720"
  },
  {
    "text": "because it would cause\nyou guys to study the wrong things instead. Instead I try to extract the\nmost useful things from our",
    "start": "166720",
    "end": "177250"
  },
  {
    "text": "discussions of what the quiz\nis going to be this time. So hopefully all this\ninformation is helpful.",
    "start": "177250",
    "end": "183010"
  },
  {
    "text": "Feel free to interrupt\nme at any time if you have questions. ",
    "start": "183010",
    "end": "190040"
  },
  {
    "text": "So the first part, I would\nroughly call analyzing and possibly writing parallel\nprograms.",
    "start": "190040",
    "end": "196680"
  },
  {
    "text": "And to start off, is everybody\nfamiliar with what one of",
    "start": "196680",
    "end": "202790"
  },
  {
    "text": "these graphs represents? So you have work and then\neach circle is a unit amount of work.",
    "start": "202790",
    "end": "208730"
  },
  {
    "start": "204000",
    "end": "204000"
  },
  {
    "text": "And then the graph shows the\ndependencies of the things. So just to start off with a\nreally simple question, what",
    "start": "208730",
    "end": "215400"
  },
  {
    "text": "is the total amount of\nwork represented? ",
    "start": "215400",
    "end": "221778"
  },
  {
    "text": "AUDIENCE: [LAUGHTER] PROFESSOR: Uh oh. I heard 17, which is not what I\ngot when I counted this last",
    "start": "221779",
    "end": "229798"
  },
  {
    "text": "night at 2:00. AUDIENCE: 26. AUDIENCE: 24. ",
    "start": "229798",
    "end": "235050"
  },
  {
    "text": "PROFESSOR: I like 24. AUDIENCE: [LAUGHTER] PROFESSOR: And I'm going to\nassume it's 24, and not embarrass myself by trying\nto count it.",
    "start": "235050",
    "end": "242980"
  },
  {
    "text": "Now what is the span? ",
    "start": "242980",
    "end": "252284"
  },
  {
    "text": "AUDIENCE: 8. AUDIENCE: 8. AUDIENCE: 8. PROFESSOR: 8 sounds right. So the longest path-- there's\nactually a couple different",
    "start": "252285",
    "end": "259700"
  },
  {
    "text": "paths that end up being 8, but\nI think 8's the right answer. So then parallelism?",
    "start": "259700",
    "end": "265982"
  },
  {
    "text": "AUDIENCE: 3. PROFESSOR: Cool. All right. So now that we're done with\nthat, how about a little bit",
    "start": "265982",
    "end": "277470"
  },
  {
    "text": "of background on caches. So when you run programs in\nparallel, it causes some more",
    "start": "277470",
    "end": "286500"
  },
  {
    "text": "interesting things to happen in\ncache that did not happen with serial execution. One of those things\nis true sharing--",
    "start": "286500",
    "end": "295280"
  },
  {
    "text": "cache misses-- which are\ncaused when multiple processors, like multiple\nthreads, are trying to operate",
    "start": "295280",
    "end": "301919"
  },
  {
    "text": "on the same piece of\ndata in memory. So as a result, your cache would\nbe forced to synchronize",
    "start": "301920",
    "end": "309220"
  },
  {
    "text": "that cache line and\nmove it across-- copy it from the freshest\nprocessor to the other ones every time that it's\nrequested.",
    "start": "309220",
    "end": "315610"
  },
  {
    "text": "And you end up with a lot\nof overhead generated by continually doing\nthese copies.",
    "start": "315610",
    "end": "321580"
  },
  {
    "text": "So ideally you don't\nwant to do this. But it's a lot easier\nsaid than done.",
    "start": "321580",
    "end": "328380"
  },
  {
    "text": "False sharing is a little bit\ntrickier because it's not immediately apparent from\nlooking at your program that",
    "start": "328380",
    "end": "334930"
  },
  {
    "text": "you're having multiple\nthreads do the-- operate on the same data. Instead with false sharing, you\nhave multiple processors",
    "start": "334930",
    "end": "340940"
  },
  {
    "text": "that want to operate on\ndifferent locations in memory. But due to the way that your\ncomputer's cache is organized,",
    "start": "340940",
    "end": "348240"
  },
  {
    "text": "they just happen to be in\nthe same cache line. As a result, you end up with\nthe same memory, the same",
    "start": "348240",
    "end": "355080"
  },
  {
    "text": "overhead, that you would\nsee with true sharing. But when you look at the code\nitself, you don't think that",
    "start": "355080",
    "end": "360930"
  },
  {
    "text": "you're doing anything that\ninvolves multiple threads operating on the same data.",
    "start": "360930",
    "end": "367620"
  },
  {
    "text": "And so with that, here's\na piece of code.",
    "start": "367620",
    "end": "372840"
  },
  {
    "text": "And my question is this true\nsharing or false sharing?",
    "start": "372840",
    "end": "377910"
  },
  {
    "text": "Let's take a vote. How many people think\nit's true sharing? Nobody. Well, how many people think\nit's false sharing?",
    "start": "377910",
    "end": "386930"
  },
  {
    "text": "Come on. You have to vote one\nway or another.  Let's try this again.",
    "start": "386930",
    "end": "392940"
  },
  {
    "text": "True sharing? False sharing? That's better.",
    "start": "392940",
    "end": "398060"
  },
  {
    "text": "All right, so it is indeed\nfalse sharing. And can someone propose\na solution to fix it?",
    "start": "398060",
    "end": "403350"
  },
  {
    "start": "403350",
    "end": "409110"
  },
  {
    "text": "Yes? AUDIENCE: Separate A\nand B, and put them in different shelves.",
    "start": "409110",
    "end": "415259"
  },
  {
    "text": "PROFESSOR: Would that\nbe sufficient? Putting them in different\ntrucks? ",
    "start": "415260",
    "end": "420530"
  },
  {
    "text": "AUDIENCE: Then, padding\nthe trucks. PROFESSOR: Yeah. Maybe with a little\nbit of padding, depending on your system.",
    "start": "420530",
    "end": "425820"
  },
  {
    "text": "But sure, I'll accept that. ",
    "start": "425820",
    "end": "430900"
  },
  {
    "text": "But on the quiz, you might be\nasked to propose solutions to problems that you find.",
    "start": "430900",
    "end": "436710"
  },
  {
    "text": "And hopefully those\nwill be easier. Now on to a more fun topic-- synchronization. Yes?",
    "start": "436710",
    "end": "442130"
  },
  {
    "text": "AUDIENCE: I have a question\non sharing. So if two programs only access\ndata, does that still count ?",
    "start": "442130",
    "end": "448396"
  },
  {
    "text": " PROFESSOR: If you only access\nthe data and nothing in the",
    "start": "448396",
    "end": "455540"
  },
  {
    "text": "cache line is being modified,\nthen you're safe, because every processor can\nindependently read from their",
    "start": "455540",
    "end": "460690"
  },
  {
    "text": "own copy of that. AUDIENCE: So that\ndoesn't count. PROFESSOR: That doesn't\ncount, correct. But the problem is if your cache\nline is 64 kilobytes,",
    "start": "460690",
    "end": "468430"
  },
  {
    "text": "and any thread on any processor\nchanges one piece of data inside that cache,\nthen everybody",
    "start": "468430",
    "end": "474000"
  },
  {
    "text": "has to pull new copies.  So the classic example to\ndemonstrate synchronization",
    "start": "474000",
    "end": "482760"
  },
  {
    "text": "correctness is the dining\nphilosophers problem, where",
    "start": "482760",
    "end": "488680"
  },
  {
    "text": "you have n-- I believe five in this case-- philosophers, and\nfive chopsticks.",
    "start": "488680",
    "end": "496050"
  },
  {
    "text": "And each philosopher\nhas to eat. So they use mutexes to--",
    "start": "496050",
    "end": "502210"
  },
  {
    "text": "well, generally you need-- each philosopher's code would be\npick up two chopsticks and",
    "start": "502210",
    "end": "509070"
  },
  {
    "text": "then eat and then put down\ntheir two chopsticks. It's somewhat of a contrived\nexample, but it actually comes",
    "start": "509070",
    "end": "516039"
  },
  {
    "text": "up in a lot of cases. And one of the cases where it\ncomes up is in the system that",
    "start": "516039",
    "end": "521630"
  },
  {
    "text": "I use to grade your\nunit tests. So I got impatient about\nrunning 200 or so",
    "start": "521630",
    "end": "530130"
  },
  {
    "text": "unit test in series. And since I had about 200 cores\naltogether on the cloud",
    "start": "530130",
    "end": "535450"
  },
  {
    "text": "machines, I figured, why not\ndo them in parallel? But the problem is I need to\nrun-- if I have students A and",
    "start": "535450",
    "end": "540860"
  },
  {
    "text": "B, I need to run student A's\ntest against student B's implementation.",
    "start": "540860",
    "end": "545890"
  },
  {
    "text": "So the rough way that I did that\nwas I grabbed a lock on",
    "start": "545890",
    "end": "551060"
  },
  {
    "text": "student A's repository, grabbed\na lock on student B's repository, and then\nmodified-- swapped in their test files, did\nall my testing, and then",
    "start": "551060",
    "end": "559370"
  },
  {
    "text": "returned the files to the\noriginal conditions, and then let go of the locks.",
    "start": "559370",
    "end": "564390"
  },
  {
    "text": "Unfortunately, when you do that,\nyou run into much of the same problem as the dining\nphilosophers problems.",
    "start": "564390",
    "end": "569980"
  },
  {
    "text": "So the naive strategy is for\neach philosopher, you grab a",
    "start": "569980",
    "end": "576310"
  },
  {
    "start": "576000",
    "end": "576000"
  },
  {
    "text": "lock on your left chopstick. You grab a lock on your right\none, with respect to you.",
    "start": "576310",
    "end": "582370"
  },
  {
    "text": "And then you eat and then you\nunlock them in the same order.",
    "start": "582370",
    "end": "587589"
  },
  {
    "text": "So this has a bug. Can anyone point\nout what it is? ",
    "start": "587590",
    "end": "594694"
  },
  {
    "text": "AUDIENCE: You want to unlock\nin a certain order.  PROFESSOR: Actually, it doesn't\nmatter which order you",
    "start": "594694",
    "end": "600730"
  },
  {
    "text": "unlock in in in this case.  So bad things happen if\neverybody starts at",
    "start": "600730",
    "end": "609230"
  },
  {
    "text": "the exact same time. So everybody grabs their left\nchopstick. there's five people, five chopsticks,\nso that works fine.",
    "start": "609230",
    "end": "615320"
  },
  {
    "text": "Now everybody wants to\ngrab their right one, but it's not there. Because the person to the right\nalready grabbed it as",
    "start": "615320",
    "end": "621190"
  },
  {
    "text": "their left. So they wait forever for the\nright chopstick to appear and",
    "start": "621190",
    "end": "626620"
  },
  {
    "text": "it never does. So the situation is\ncalled a deadlock. And it's obvious to spot,\nbecause all of your threads",
    "start": "626620",
    "end": "633970"
  },
  {
    "text": "are going to be stuck doing\nabsolutely nothing. Your CPU is not doing\nanything. And you're just sitting there.",
    "start": "633970",
    "end": "641019"
  },
  {
    "text": "So a very common work-around\nthat people like for this is to use what's called\na try lock pattern.",
    "start": "641020",
    "end": "648360"
  },
  {
    "text": "So what you do is you grab a\nlock on one of them, like,",
    "start": "648360",
    "end": "653570"
  },
  {
    "text": "say, your left one. And then for the right one,\ninstead of directly going and trying to grab the\nlock, you ask--",
    "start": "653570",
    "end": "659589"
  },
  {
    "text": "you basically do-- if the thing is unlocked,\ngrab it. Otherwise, don't grab it. So it's a non-blocking\napproach to",
    "start": "659590",
    "end": "666780"
  },
  {
    "text": "trying to get a lock. So it either succeeds and\nyou have the lock, or it instantly fails. And if it fails, then you switch\nthe order of which--",
    "start": "666780",
    "end": "674459"
  },
  {
    "text": "you put down the chopstick that\nyou grabbed, and then you try the next one. Maybe you wait a little\nbit before then.",
    "start": "674460",
    "end": "681410"
  },
  {
    "text": "This is more or less than what\nI did for your beta test, for",
    "start": "681410",
    "end": "686509"
  },
  {
    "text": "your unit test tester. When it fails to-- if first grabs one student's\ndirectory's locks.",
    "start": "686510",
    "end": "692790"
  },
  {
    "text": "And then it tries to grab\nthe second one. If that fails, then it puts down\nboth locks, and then it",
    "start": "692790",
    "end": "697970"
  },
  {
    "text": "waits a little bit, and\nthen it tries again. So what's the problem\nwith this approach? ",
    "start": "697970",
    "end": "710290"
  },
  {
    "text": "Yes? AUDIENCE: It can\nstill hold up.  PROFESSOR: What's that? AUDIENCE: It can keep waiting\nand grabbing, and sometimes it",
    "start": "710290",
    "end": "718447"
  },
  {
    "text": "will contend. PROFESSOR: Yeah, pretty much,\nthe same problem happens. Only now you have the case where\neverybody grabs their",
    "start": "718447",
    "end": "724990"
  },
  {
    "text": "left, and now the right\none's gone. So they put down\ntheir left one. And then they all go to\ngrab the right one.",
    "start": "724990",
    "end": "730420"
  },
  {
    "text": "Now they have the right\none, and now they want the left one. But the left one not there. So in theory, they can end\nup doing this for a",
    "start": "730420",
    "end": "736730"
  },
  {
    "text": "very, very long time.  But in practice what happens\nis because of scheduling",
    "start": "736730",
    "end": "743410"
  },
  {
    "text": "overhead, and the phase of the\nmoon and whatever else affects computing, you'll end up after\na while, this become distinct",
    "start": "743410",
    "end": "750170"
  },
  {
    "text": "from this pattern and eventually\nall the locks go through, and you're OK. But in the meantime, you spent a\nlot of time spinning, trying",
    "start": "750170",
    "end": "756940"
  },
  {
    "text": "to grab locks. And so this situation is\ncalled a livelock. And it's a lot more\nannoying than a",
    "start": "756940",
    "end": "763420"
  },
  {
    "text": "deadlock because it happens-- it tends to be less\nreproducible. And it's harder to diagnose,\nbecause if you're looking at",
    "start": "763420",
    "end": "770170"
  },
  {
    "text": "top or your favorite CPU\nmonitor, you see that the program seems to be\nmaking progress. Maybe some of them actually get\nthe lock and go through.",
    "start": "770170",
    "end": "777200"
  },
  {
    "text": "But the rest of them don't. So it's hard to argue\nwhether or not there's correctness issue.",
    "start": "777200",
    "end": "782829"
  },
  {
    "text": "Now there's various classes\nof solutions to the dining philosophers problem, but you\nguys can go look that up.",
    "start": "782830",
    "end": "789700"
  },
  {
    "text": "I'm not going to go over them. So another issue with\nsynchronization is suppose you",
    "start": "789700",
    "end": "799770"
  },
  {
    "start": "799000",
    "end": "799000"
  },
  {
    "text": "have two threads. Let's say this is a Mars Rover,\nand it's on Mars.",
    "start": "799770",
    "end": "805110"
  },
  {
    "text": "And the two things that the\nprogrammer wanted to do are send back its debugging log, so\nthat the nerdier people at",
    "start": "805110",
    "end": "812980"
  },
  {
    "text": "NASA, I suppose, can read\nthem over, or whatever they do with logs. And the high priority, what\neverybody actually wants, is",
    "start": "812980",
    "end": "820060"
  },
  {
    "text": "for the Rover to send\nback pictures. Now both of these things require\naccess to the radio",
    "start": "820060",
    "end": "825420"
  },
  {
    "text": "that's supposed to transfer\nsomething. And only one thing can\ntransmit at time.",
    "start": "825420",
    "end": "830579"
  },
  {
    "text": "Otherwise, the transmission\nis garbled. So a reasonable approach might\nbe to just lock the radio in",
    "start": "830580",
    "end": "835870"
  },
  {
    "text": "each thread before you transmit,\nand then unlock after you transmit.",
    "start": "835870",
    "end": "841330"
  },
  {
    "text": "So what could be a potential\nissue with this? ",
    "start": "841330",
    "end": "850003"
  },
  {
    "text": "AUDIENCE: One might\nget all the time.  PROFESSOR: Let's say, the\nscheduler interrupts every 10",
    "start": "850004",
    "end": "859070"
  },
  {
    "text": "milliseconds, and then 1 out of\nthe 10 times, it allows 10 logs to run.",
    "start": "859070",
    "end": "864420"
  },
  {
    "text": "And then 9 out of the 10 times,\nit will allow some pictures to run. So everybody gets\ntime scheduled.",
    "start": "864420",
    "end": "872279"
  },
  {
    "text": "So I guess the easiest way to\nillustrate this is what happens if it's currently\nrunning said logs, and it",
    "start": "872280",
    "end": "882260"
  },
  {
    "text": "grabs this lock. And then while it's\ntransmitting, let's say on the second megabyte, the scheduler\nsays your time is up.",
    "start": "882260",
    "end": "888360"
  },
  {
    "text": "And then it swaps in this\nprogram, and it tries to run. So now when this program runs,\nit tries to lock the radio,",
    "start": "888360",
    "end": "895970"
  },
  {
    "text": "but the radio's already\nlocked. And the one that locked\nthe radio is the send locks thread.",
    "start": "895970",
    "end": "901140"
  },
  {
    "text": "And so it could sit there and\nspin for a while waiting for the lock to be available.",
    "start": "901140",
    "end": "906810"
  },
  {
    "text": "But that's not going\nto happen. Because the guy that's holding\nthe lock is a bug. So in general, this is called\nstarvation, where in the",
    "start": "906810",
    "end": "917160"
  },
  {
    "text": "process of having a shared\nresource, you end up unfairly depriving someone else of\na resource when you're",
    "start": "917160",
    "end": "923690"
  },
  {
    "text": "not truly using it. Well, I guess that's not the--",
    "start": "923690",
    "end": "928860"
  },
  {
    "text": "I guess you are using it, but\nyou're using it for longer than is fair for you. Like in the scheduler you wanted\n90% to one process and",
    "start": "928860",
    "end": "936380"
  },
  {
    "text": "10% to the other, but in reality\nyou end up with a completely different\nset of priorities. And this inversion of priorities\nis commonly called",
    "start": "936380",
    "end": "944980"
  },
  {
    "text": "priority inversion. Does that make sense? ",
    "start": "944980",
    "end": "951510"
  },
  {
    "text": "Cool. So on a completely\ndifferent topic.",
    "start": "951510",
    "end": "956950"
  },
  {
    "text": "So Cilk hyperobjects\nwere covered extensively in lecture. You guys had a problem set on\nit, although it was not",
    "start": "956950",
    "end": "963790"
  },
  {
    "text": "received very warmly from\nwhat I see in the problems sets write ups.",
    "start": "963790",
    "end": "968970"
  },
  {
    "text": "But I think all of the basic\nmaterial for what a Cilk",
    "start": "968970",
    "end": "974019"
  },
  {
    "text": "hyperobjects is and what it\ndoes can be found in the lecture material.",
    "start": "974020",
    "end": "979970"
  },
  {
    "text": "But more interesting, let's\nexplore what you can do with hyperobjects that aren't\nin the documentation.",
    "start": "979970",
    "end": "988440"
  },
  {
    "text": "So I'm going to define\na piece of code here. And it's C++ or Cilk++ code.",
    "start": "988440",
    "end": "997839"
  },
  {
    "text": "And the first part of it\ndefines a very simple structure called a point. And it has three members.",
    "start": "997840",
    "end": "1004960"
  },
  {
    "text": "Or actually it has two members,\nx and y, and it has three methods for setting the\nvalues of x and y and also",
    "start": "1004960",
    "end": "1011660"
  },
  {
    "text": "getting the values of x and y. Question? No? OK.",
    "start": "1011660",
    "end": "1017680"
  },
  {
    "text": "And then there's also a\nhyperpoint class which contains some extra Cilk junk.",
    "start": "1017680",
    "end": "1024650"
  },
  {
    "text": "And it also implements the\nsame three methods. Set, get x, and get y.",
    "start": "1024650",
    "end": "1031020"
  },
  {
    "text": "And if you look at the monoid\nthat it contains the point",
    "start": "1031020",
    "end": "1037589"
  },
  {
    "text": "monoid it implements a\nreduce function that",
    "start": "1037589",
    "end": "1042929"
  },
  {
    "text": "just doesn't do anything. And for the public methods, the\nsetters and getters, they",
    "start": "1042930",
    "end": "1053080"
  },
  {
    "text": "grab the point represented by\nthe local view to the reducer that it contains.",
    "start": "1053080",
    "end": "1058460"
  },
  {
    "text": "And it calls the method that\nyou called on that point.",
    "start": "1058460",
    "end": "1064730"
  },
  {
    "text": "So the question is what\ndoes this thing do, the hyperpoint object?",
    "start": "1064730",
    "end": "1070560"
  },
  {
    "start": "1070560",
    "end": "1075840"
  },
  {
    "text": "Anybody have any wild guesses\nat this point? ",
    "start": "1075840",
    "end": "1081730"
  },
  {
    "text": "That's a no. So OK. Let's try using this code. So to put the example\ninto perspective.",
    "start": "1081730",
    "end": "1088370"
  },
  {
    "text": "Suppose I have this artificially\ncontrived",
    "start": "1088370",
    "end": "1093710"
  },
  {
    "text": "function that takes an array of\n100 points, and it tries to",
    "start": "1093710",
    "end": "1099980"
  },
  {
    "text": "do an in place reversal\nof its elements. So one way that it can\ndo that is you have a",
    "start": "1099980",
    "end": "1107900"
  },
  {
    "text": "global temporary point. And you, at every step of the\niteration, first you step",
    "start": "1107900",
    "end": "1115769"
  },
  {
    "text": "through half of the list. And then at every step of the\niteration, you copy the ith",
    "start": "1115770",
    "end": "1122310"
  },
  {
    "text": "element into the temporary\nvariable. And then you set the ith from\nthe other end to the--",
    "start": "1122310",
    "end": "1134039"
  },
  {
    "text": "you swap the two. And then you-- yeah, so if it is a\nthree-variable swap, I guess",
    "start": "1134040",
    "end": "1142019"
  },
  {
    "text": "is the simplest way\nof explaining it. It's a swap using a using\na temporary variable.",
    "start": "1142020",
    "end": "1147789"
  },
  {
    "text": "Anyone not get what that code\ndoes, despite my attempts to confuse you? ",
    "start": "1147790",
    "end": "1156600"
  },
  {
    "text": "So as far as this space\ncomplexity of this procedure,",
    "start": "1156600",
    "end": "1163520"
  },
  {
    "text": "really what it needs at minimum\nis enough memory to store the temporary point, and\nthen one register to use to",
    "start": "1163520",
    "end": "1172580"
  },
  {
    "text": "put in the temporary values. You can think of a solution that\nuses only one register to",
    "start": "1172580",
    "end": "1177900"
  },
  {
    "text": "update values within your\npoint structure. And so let's suppose I want\nto do this in parallel.",
    "start": "1177900",
    "end": "1188380"
  },
  {
    "text": "And so what I do is I call it\nparallel reverse, and I replace for with Cilk for.",
    "start": "1188380",
    "end": "1196100"
  },
  {
    "text": "So am I done? What's wrong with my code?",
    "start": "1196100",
    "end": "1202246"
  },
  {
    "text": "AUDIENCE: Race. PROFESSOR: Yes. Well first it takes that much--\nit takes the same",
    "start": "1202246",
    "end": "1208419"
  },
  {
    "text": "amount of space. But there is a data race on\ntemp, because multiple threads",
    "start": "1208420",
    "end": "1213470"
  },
  {
    "text": "could be updating temp. So now what I do is I replace\nmy point with a hyperpoint.",
    "start": "1213470",
    "end": "1222100"
  },
  {
    "text": " So now what does the\nhyperpoint do?",
    "start": "1222100",
    "end": "1228720"
  },
  {
    "text": "So within each iteration of the\nCilk for loop, so if that",
    "start": "1228720",
    "end": "1238020"
  },
  {
    "text": "iteration has been-- if the\nwork of that iteration has been stolen or spawned off.",
    "start": "1238020",
    "end": "1243309"
  },
  {
    "text": "Then the hyperobject, because\nit has a reducer within it, it'll get a new local\nview which is a new",
    "start": "1243310",
    "end": "1250230"
  },
  {
    "text": "point object to use. And if it's not still in that\nit continues running in the",
    "start": "1250230",
    "end": "1256010"
  },
  {
    "text": "same thread, then it actually\njust continues using the local view that was previously\ninstantiated.",
    "start": "1256010",
    "end": "1262370"
  },
  {
    "text": "So no matter what Cilk does\nin the background, you're guaranteed to not have any data\nraces on temp, because",
    "start": "1262370",
    "end": "1271160"
  },
  {
    "text": "whenever you spawn off a new\nthread, the hyperobject will instantiate a new temp object\nfor you to use.",
    "start": "1271160",
    "end": "1279140"
  },
  {
    "text": "And this is an example of what's\ncalled thread local storage, so like a temporary\nstorage space for each thread.",
    "start": "1279140",
    "end": "1285700"
  },
  {
    "text": " Any questions? ",
    "start": "1285700",
    "end": "1292899"
  },
  {
    "text": "Cool. ",
    "start": "1292900",
    "end": "1298040"
  },
  {
    "text": "So on the quiz, you might be\nasked about various abusing of",
    "start": "1298040",
    "end": "1304020"
  },
  {
    "text": "various other novel hyperobjects\nthat don't do the typical thing, which\nis take a left and",
    "start": "1304020",
    "end": "1309310"
  },
  {
    "text": "right and reduce them. They might do something\na little bit quirky. And you might be asked to\nexplain what they do.",
    "start": "1309310",
    "end": "1317600"
  },
  {
    "text": "AUDIENCE: Maybe? PROFESSOR: Yes? Maybe. Maybe. AUDIENCE: But this is purely for\nillustrating that you can",
    "start": "1317600",
    "end": "1324924"
  },
  {
    "text": "do such a thing with\nhyperobjects. Because you can always create\na temporary variable there.",
    "start": "1324924",
    "end": "1332320"
  },
  {
    "text": "PROFESSOR: But suppose point\nwas a much larger object. Sure, this is a contrived\nexample.",
    "start": "1332320",
    "end": "1339750"
  },
  {
    "text": "But yes.  Anyone?",
    "start": "1339750",
    "end": "1346740"
  },
  {
    "text": "Everyone gets this? So, in that case, why would that\nproblem be more efficient",
    "start": "1346740",
    "end": "1353329"
  },
  {
    "text": "than creating a new copy of\nit, say another point? ",
    "start": "1353329",
    "end": "1358330"
  },
  {
    "text": "PROFESSOR: Because if you think\nabout the case where this code runs on a single\nprocessor with no work",
    "start": "1358330",
    "end": "1364430"
  },
  {
    "text": "stealing, this version does the\nexact same thing as the single threaded version.",
    "start": "1364430",
    "end": "1370940"
  },
  {
    "text": "No extra objects are\nbeing created. And if you're running on however\nmany processors and",
    "start": "1370940",
    "end": "1377070"
  },
  {
    "text": "Cilk decides what to do in the\nbackground as far as how many threads to allocate for you, and\nyour code doesn't have to",
    "start": "1377070",
    "end": "1383600"
  },
  {
    "text": "know anything about that. AUDIENCE: What's the\nmonoid again?",
    "start": "1383600",
    "end": "1389907"
  },
  {
    "text": "PROFESSOR: The monoid is the\nassociative operator that has",
    "start": "1389907",
    "end": "1395850"
  },
  {
    "text": "an identity and a reduce\noperation and some other things that I forgot.",
    "start": "1395850",
    "end": "1401820"
  },
  {
    "start": "1401820",
    "end": "1413309"
  },
  {
    "text": "Any more questions? Cool. So switching gears, and this\ntime I actually have a",
    "start": "1413310",
    "end": "1420590"
  },
  {
    "text": "placeholder slide for it, next\npart is more about like the",
    "start": "1420590",
    "end": "1428150"
  },
  {
    "text": "types of things that you might\nhave learned from doing or experience you might\nhave gained from doing your projects.",
    "start": "1428150",
    "end": "1433910"
  },
  {
    "text": "And it primarily pertains to lab\noriented, like in practice hands on things, as opposed\nto theoretical concepts.",
    "start": "1433910",
    "end": "1442460"
  },
  {
    "text": "So just as a fun warm up,\neverybody has hopefully at",
    "start": "1442460",
    "end": "1448590"
  },
  {
    "text": "this point used some\nSTL data structure. Vectors should definitely\nlook familiar.",
    "start": "1448590",
    "end": "1454650"
  },
  {
    "start": "1452000",
    "end": "1452000"
  },
  {
    "text": "So let's compare some operations\non these three. Because, as far as the API\nis concerned, both list--",
    "start": "1454650",
    "end": "1463700"
  },
  {
    "text": "all three of them support\nalmost the same set of functions, as far as Insert,\nat pushback, pop front.",
    "start": "1463700",
    "end": "1472780"
  },
  {
    "text": "All those operations are\nsupported by these things. So it's kind of-- You might ask why would you\nuse one over the other?",
    "start": "1472780",
    "end": "1480100"
  },
  {
    "text": "Well, it turns out that they\nhave slightly different performance characteristics\nthat are useful in noting.",
    "start": "1480100",
    "end": "1485510"
  },
  {
    "text": "So anyone want to compare and\ncontrast like what data structure a list corresponds\nto compared to a vector?",
    "start": "1485510",
    "end": "1492575"
  },
  {
    "start": "1492575",
    "end": "1498539"
  },
  {
    "text": "So which one would be\nlike a linked list? List, yep.",
    "start": "1498540",
    "end": "1504640"
  },
  {
    "text": "And then vector obviously is a\ndynamically growing array.",
    "start": "1504640",
    "end": "1511270"
  },
  {
    "text": "And a deque-- how many people have\nused the deque? Cool. One. How many people know what\ndeque does even if they",
    "start": "1511270",
    "end": "1518290"
  },
  {
    "text": "haven't used it? Three? Four? OK. So a deque is actually\nimplemented similar to a",
    "start": "1518290",
    "end": "1526980"
  },
  {
    "text": "vector, but it's dynamically\ngrowing on both ends. ",
    "start": "1526980",
    "end": "1539170"
  },
  {
    "text": "OK, so let's start with\nfilling in the table for the list. So inserting and removing\nat the end of a list.",
    "start": "1539170",
    "end": "1547650"
  },
  {
    "text": "Constant time? Linear time? How many people say\nconstant time?",
    "start": "1547650",
    "end": "1554160"
  },
  {
    "text": "Linear? Half and half, wow. Don't rely on your neighbor\nduring the test.",
    "start": "1554160",
    "end": "1560120"
  },
  {
    "text": " So it's actually\nconstant time.",
    "start": "1560120",
    "end": "1565179"
  },
  {
    "text": "If you think about appending to\nthe end of a linked list, it's just a matter of couple\npointer operations.",
    "start": "1565180",
    "end": "1574070"
  },
  {
    "text": "How about inserting and\nremoving at the front? Constant?",
    "start": "1574070",
    "end": "1579450"
  },
  {
    "text": "Cool. Linear? OK. I'll stop picking\non people now. ",
    "start": "1579450",
    "end": "1586760"
  },
  {
    "text": "So next is inserting and\nremoving an arbitrary offset. So what I mean by that is you\nhave an iterator to a",
    "start": "1586760",
    "end": "1594810"
  },
  {
    "text": "particular point inside\nthe list. Now I say insert this element\nfive or n elements away from",
    "start": "1594810",
    "end": "1604010"
  },
  {
    "text": "that iterator. How long does that\noperation take? ",
    "start": "1604010",
    "end": "1610659"
  },
  {
    "text": "How many people say\nconstant time? Three people. How many people say some\nsort of linear time?",
    "start": "1610660",
    "end": "1617220"
  },
  {
    "text": "I agree with you guys. It is indeed a linear\ntime thing, because you have to traverse-- you have to actually fall the\nnext pointers to the location",
    "start": "1617220",
    "end": "1624640"
  },
  {
    "text": "or the previous pointers\nto the location that you want to insert. So although list might appear\nto support randomish axis,",
    "start": "1624640",
    "end": "1633630"
  },
  {
    "text": "like you can add numbers to\nthe iterator, it doesn't actually support that operation\nefficiently in the",
    "start": "1633630",
    "end": "1640490"
  },
  {
    "text": "background. Now the next one is also\nkind of tricky. Checking the size.",
    "start": "1640490",
    "end": "1645620"
  },
  {
    "text": "Like checking how many elements\nare calling the dot size method of a\nstandard list.",
    "start": "1645620",
    "end": "1653009"
  },
  {
    "text": "How many people think\nthat's constant? Cool. About four or five.",
    "start": "1653010",
    "end": "1658110"
  },
  {
    "text": "How many people think\nthat's linear? One. How many people think it's\npossible to have a linked list",
    "start": "1658110",
    "end": "1665710"
  },
  {
    "text": "data structure that's forced\nconstant time? There we go. Well, unfortunately, the STL\nonly requires you to have a",
    "start": "1665710",
    "end": "1675506"
  },
  {
    "text": "big O of n time for this. In fact, I peeked inside the\ncode for glibc the lib",
    "start": "1675506",
    "end": "1684440"
  },
  {
    "text": "standard C++ that is used\non the cloud machines. And in fact, what they do is\nthey actually walk through everything from start to\nend, and they count up",
    "start": "1684440",
    "end": "1691250"
  },
  {
    "text": "the number of times. So in fact, it is a linear time\noperation, although I'm sure somewhere out in the\nworld, there exists a C",
    "start": "1691250",
    "end": "1697760"
  },
  {
    "text": "library, C++ library that does\nlinear time, or constant time, size look ups.",
    "start": "1697760",
    "end": "1703130"
  },
  {
    "text": "So you might want to be careful\nabout that one. On a different note, there's\nactually a dot empty method",
    "start": "1703130",
    "end": "1709380"
  },
  {
    "text": "for checking whether or not a\nlist is empty, and for any type of STL collection\nthat is guaranteed",
    "start": "1709380",
    "end": "1715510"
  },
  {
    "text": "to be constant time. So if you just want to know\nwhether something's empty, don't use dot size equals 0.",
    "start": "1715510",
    "end": "1722700"
  },
  {
    "text": "What about reversing a\nlinked list in place? Linear?",
    "start": "1722700",
    "end": "1728460"
  },
  {
    "text": "More than linear? It's not a technical term, and\nCharles is probably going to hurt me now.",
    "start": "1728460",
    "end": "1735660"
  },
  {
    "text": "Linear? Yes. Linear.",
    "start": "1735660",
    "end": "1740990"
  },
  {
    "text": "What about in place sorting\nof a linked list? How many people think\nit's N log(N)?",
    "start": "1740990",
    "end": "1746370"
  },
  {
    "text": " One or two daring souls.",
    "start": "1746370",
    "end": "1752900"
  },
  {
    "text": "Three daring souls. A well informed daring soul. How many people think it's\nmore than N log(N)? ",
    "start": "1752900",
    "end": "1762030"
  },
  {
    "text": "One. OK. So actually it is N log(N). And that's actually not\nspecified by the specs.",
    "start": "1762030",
    "end": "1768980"
  },
  {
    "text": "But it happens to be. And it turns out that there is\na variant merge sort that works on link list\nthat is N log(N).",
    "start": "1768980",
    "end": "1776220"
  },
  {
    "text": "I didn't know that,\nbut anyway. So how about let's fill this\nin for the vector.",
    "start": "1776220",
    "end": "1782850"
  },
  {
    "text": "Inserting and removing an\nelement at the end-- constant time? Linear time?",
    "start": "1782850",
    "end": "1790250"
  },
  {
    "text": "Nobody says linear time. So it's amortized constant\ntime, I guess.",
    "start": "1790250",
    "end": "1795950"
  },
  {
    "text": "I'll just call it\nconstant time. What about inserting\nor removing at",
    "start": "1795950",
    "end": "1800990"
  },
  {
    "text": "the front of a vector-- constant time? Linear time?",
    "start": "1800990",
    "end": "1808500"
  },
  {
    "text": "Come on, guys. I'm getting like three hands for\nlinear time and zero for constant time. I guess that's reasonable.",
    "start": "1808500",
    "end": "1815780"
  },
  {
    "text": "So it does, in fact,\ninsert one element. It puts the element in and then\nit grows the vector in.",
    "start": "1815780",
    "end": "1822660"
  },
  {
    "text": "It copies everything in. So don't insert at the front,\ndon't insert or remove at the",
    "start": "1822660",
    "end": "1828590"
  },
  {
    "text": "front of a vector. It's a very bad idea if\nyou do that a lot. What about inserting or removing\nat an arbitrary",
    "start": "1828590",
    "end": "1835750"
  },
  {
    "text": "location inside a vector?  Well, that one's fairly obvious\nto be some sort of",
    "start": "1835750",
    "end": "1843789"
  },
  {
    "text": "linear time too, because it\nhas to shift all of the elements after it.",
    "start": "1843790",
    "end": "1849020"
  },
  {
    "text": "Checking the size\nof the vector? ",
    "start": "1849020",
    "end": "1855720"
  },
  {
    "text": "Some people are getting\npessimistic about the STL. That's my personal opinion,\nbut I won't",
    "start": "1855720",
    "end": "1861090"
  },
  {
    "text": "transfer that onto you. So it turns out that for a\nvector, yes, it is constant time to check the size.",
    "start": "1861090",
    "end": "1867070"
  },
  {
    "text": "So that's OK. In place reversal,\nlinear time. And sorting is N log(N),\nwhich is not",
    "start": "1867070",
    "end": "1875950"
  },
  {
    "text": "surprising by any means. So a deque? Inserting or removing\nat the end--",
    "start": "1875950",
    "end": "1883000"
  },
  {
    "text": "constant? Sure, constant. And inserting or removing\nat the front?",
    "start": "1883000",
    "end": "1891210"
  },
  {
    "text": "Cool. Constant. So that's the primary\ndifference between a deque and a vector. And for everything else, it\nbehaves exactly like a vector.",
    "start": "1891210",
    "end": "1900100"
  },
  {
    "text": "Does that makes sense? Yes. AUDIENCE: So is list like\na doubly linked list?",
    "start": "1900100",
    "end": "1906990"
  },
  {
    "text": "PROFESSOR: A standard list is in\nfact a doubly linked list. So it supports both forward\nand reverse traversal.",
    "start": "1906990",
    "end": "1912520"
  },
  {
    "text": "There's a standard S list, which\nis a singly linked list, and it only supports\nforward traversal.",
    "start": "1912520",
    "end": "1918240"
  },
  {
    "text": " Any other questions?",
    "start": "1918240",
    "end": "1923550"
  },
  {
    "text": " Moving on to a slightly\ndifferent topic, can anyone",
    "start": "1923550",
    "end": "1931730"
  },
  {
    "text": "point out what is bad\nabout this code? And I mean from a performance\nstandpoint. ",
    "start": "1931730",
    "end": "1940980"
  },
  {
    "start": "1937000",
    "end": "1937000"
  },
  {
    "text": "AUDIENCE: It's O of n. ",
    "start": "1940980",
    "end": "1952870"
  },
  {
    "text": "PROFESSOR: All right. Someone said it,\nso it's O of n. So the vector that's passed in\nhere is passed in by value,",
    "start": "1952870",
    "end": "1961900"
  },
  {
    "text": "which means whenever you call\nthis function, it'll actually make a brand new copy\nof the vector and",
    "start": "1961900",
    "end": "1967780"
  },
  {
    "text": "copy all of the elements. So it's linear time with respect\nto the number of elements in the vector. ",
    "start": "1967780",
    "end": "1975020"
  },
  {
    "text": "PROFESSOR: So how\ndo you fix that? AUDIENCE: You can pass\nin a pointer. ",
    "start": "1975020",
    "end": "1985200"
  },
  {
    "text": "PROFESSOR: So there's\ntwo ways. So on the left is the original\ncode, and on the right are two",
    "start": "1985200",
    "end": "1991159"
  },
  {
    "text": "different ways to pass in just\na pointer to the same thing. So you can do a reference\npass, which is the first",
    "start": "1991160",
    "end": "1999020"
  },
  {
    "start": "1995000",
    "end": "1995000"
  },
  {
    "text": "version above. And then you can use a dot\nto access the methods. Or you can pass in by pointer\nwhich everyone is already",
    "start": "1999020",
    "end": "2006500"
  },
  {
    "text": "familiar with. And that's where you\nhave to use arrows to access the elements.",
    "start": "2006500",
    "end": "2012440"
  },
  {
    "text": "And then you also have to change\nthe way that you call the function. So oftentimes if you just catch\nsomething in code, like",
    "start": "2012440",
    "end": "2021059"
  },
  {
    "text": "say the final project where\nsomething is passed by value, where it should be passed by\nreference, oftentimes the",
    "start": "2021060",
    "end": "2027790"
  },
  {
    "text": "easiest way to modify the code\nis to just change it to use a reference rather\nthan a pointer. ",
    "start": "2027790",
    "end": "2034890"
  },
  {
    "text": "So the next thing that I want\nto cover is a question type",
    "start": "2034890",
    "end": "2043270"
  },
  {
    "text": "that will be on the final,\nwill be on the quiz. And I'll give some examples\nof problems of this form.",
    "start": "2043270",
    "end": "2051780"
  },
  {
    "text": "But most importantly, I want\neverybody to be familiar with the form of the question, the\nrules involving the question,",
    "start": "2051780",
    "end": "2057658"
  },
  {
    "text": "so nobody accidentally loses\npoints for not reading the instructions, which nobody\nseems to do on quizzes.",
    "start": "2057659",
    "end": "2065270"
  },
  {
    "text": "So you are given two versions\nof the same function written in C or C++.",
    "start": "2065270",
    "end": "2072919"
  },
  {
    "start": "2071000",
    "end": "2071000"
  },
  {
    "text": "And you are to assume\nthat your compiler--",
    "start": "2072920",
    "end": "2078629"
  },
  {
    "text": "well, the compiler, as far as\nlike what the CPU is executing is a literal interpretation\nof the code you",
    "start": "2078630",
    "end": "2084408"
  },
  {
    "text": "see before and after. By this point, everybody is\nprobably familiar with some of",
    "start": "2084409",
    "end": "2089789"
  },
  {
    "text": "the simple tricks a compiler\ndoes, like if you say int x equals 1 plus 1 there is no\ncircumstance in which the",
    "start": "2089790",
    "end": "2097279"
  },
  {
    "text": "compiler actually puts two 1s in\ntwo different registers and tells it to add it and\nthen put it in x.",
    "start": "2097280",
    "end": "2103600"
  },
  {
    "text": "So you are assuming that your\ncompiler is doing a literal translation.",
    "start": "2103600",
    "end": "2108750"
  },
  {
    "text": "And then you are asked to\ndetermine three properties about the optimization,\nso going from the",
    "start": "2108750",
    "end": "2114680"
  },
  {
    "text": "before to the after. So the first thing is\nwhether or not the",
    "start": "2114680",
    "end": "2119770"
  },
  {
    "text": "optimization is legal. And when we define legal, we\nmean that the optimized",
    "start": "2119770",
    "end": "2125760"
  },
  {
    "text": "version always has the same-- preserves the same behavior\nas the other version.",
    "start": "2125760",
    "end": "2131010"
  },
  {
    "text": "It should be relatively simple\nto infer from the code snippets that we give you, what\nthe intended purpose of a",
    "start": "2131010",
    "end": "2137520"
  },
  {
    "text": "function is. And you are to determine whether\nor not the optimized version acts like the\nunoptimized version, as far as",
    "start": "2137520",
    "end": "2144520"
  },
  {
    "text": "the correctness of the result. Second, you are asked to\ndetermine whether or not this",
    "start": "2144520",
    "end": "2151059"
  },
  {
    "text": "optimized version is faster\nthan the previous version.",
    "start": "2151060",
    "end": "2156350"
  },
  {
    "text": "And by faster, we mean faster\nin most conceivable cases. ",
    "start": "2156350",
    "end": "2164960"
  },
  {
    "text": "It's a short answer question so\nyou might want to explain what you mean. But we do expect a yes\nor no answer to",
    "start": "2164960",
    "end": "2171500"
  },
  {
    "text": "start off the question. And it should be pretty\nclear whether the answer is yes or no.",
    "start": "2171500",
    "end": "2177890"
  },
  {
    "text": "And then finally, I'm sure by\nthis point everybody knows that when you compile with gcc\n-02 or -03, the compiler does",
    "start": "2177890",
    "end": "2186430"
  },
  {
    "text": "a lot of things for you. So there's oftentimes no point\nin writing certain optimizations by hand, when\nyou know when you hit the",
    "start": "2186430",
    "end": "2192960"
  },
  {
    "text": "compile button, the compiler's\ngoing to do it in the background anyway. So this question asks whether\nor not you can reasonably",
    "start": "2192960",
    "end": "2200830"
  },
  {
    "text": "assume that the optimizing\ncompilers, like the ones that you're using for your projects,\nwould do this",
    "start": "2200830",
    "end": "2205850"
  },
  {
    "text": "optimization for you or should\nyou take the effort to actually do this optimization\nby hand.",
    "start": "2205850",
    "end": "2211800"
  },
  {
    "text": "And then, legalese, if the\noptimization is illegal, let's",
    "start": "2211800",
    "end": "2217770"
  },
  {
    "text": "not answer whether or not it's\nfaster or automatic. And if the optimization actually\nmakes things slower,",
    "start": "2217770",
    "end": "2225670"
  },
  {
    "text": "then let's not answer whether\nthe compiler does it for you. Some of us have more cynical\nviews of the",
    "start": "2225670",
    "end": "2230850"
  },
  {
    "text": "compiler than others. So we'll just disregard that.",
    "start": "2230850",
    "end": "2236310"
  },
  {
    "text": "Any question on the rules?  AUDIENCE: How are we supposed\nto know what types of things",
    "start": "2236310",
    "end": "2243906"
  },
  {
    "text": "the compiler's going to do,\ncan we just read the documentation? PROFESSOR: So there was a\nlecture that Samaan gave",
    "start": "2243906",
    "end": "2250840"
  },
  {
    "text": "called What Compilers\nCan and Cannot Do. AUDIENCE: So it's just stuff\nfrom that lecture?",
    "start": "2250840",
    "end": "2257360"
  },
  {
    "text": "PROFESSOR: I would say most\nof it is that lecture. And then other things-- we might\nthrow in a thing or two",
    "start": "2257360",
    "end": "2262829"
  },
  {
    "text": "that you guys hopefully\nlearn from. So throughout the term, we've\nbeen misguiding you on those",
    "start": "2262830",
    "end": "2269760"
  },
  {
    "text": "walk through P-sets, suggesting\nyou to do things that actually don't help.",
    "start": "2269760",
    "end": "2275619"
  },
  {
    "text": "And you guys have gotten\npretty pissed at us about that probably. But there was a method\nto the madness.",
    "start": "2275620",
    "end": "2281420"
  },
  {
    "text": "I mean, there was something to\nbe learned from that, whether or not we actually\nmeant to do it.",
    "start": "2281420",
    "end": "2288830"
  },
  {
    "text": "So hopefully some level of\nintuition would answer it, and you would get the bulk of the\npoints for just understanding",
    "start": "2288830",
    "end": "2295980"
  },
  {
    "text": "the points raised\nin the lecture. Any other questions\nabout the rules?",
    "start": "2295980",
    "end": "2302850"
  },
  {
    "text": "All right. So I have a couple of examples\nof these types of questions. So the first one is this.",
    "start": "2302850",
    "end": "2311380"
  },
  {
    "text": "So it should be fairly obvious\nwhat the code does.",
    "start": "2311380",
    "end": "2317450"
  },
  {
    "start": "2316000",
    "end": "2316000"
  },
  {
    "text": "It takes your input, and it\nwants to mod it by 256.",
    "start": "2317450",
    "end": "2323190"
  },
  {
    "text": "So first question is this\na legal optimization? ",
    "start": "2323190",
    "end": "2329640"
  },
  {
    "text": "How many people say yes? A lot of people. Anybody say no? ",
    "start": "2329640",
    "end": "2337580"
  },
  {
    "text": "Reed almost scared me\nfor a moment there. He had his hand up. ",
    "start": "2337580",
    "end": "2342990"
  },
  {
    "text": "So yes, it is indeed legal. And it's a standard bit hack\nfor doing a modulo",
    "start": "2342990",
    "end": "2350799"
  },
  {
    "text": "by a power of two. AUDIENCE: What if it's 257? ",
    "start": "2350800",
    "end": "2358130"
  },
  {
    "text": "PROFESSOR: I was fortunate\nenough to make it a uint64. So next question is given that\nit's legal, is it faster to do",
    "start": "2358130",
    "end": "2368370"
  },
  {
    "text": "the and instead of the mod? How many people say yes?",
    "start": "2368370",
    "end": "2373850"
  },
  {
    "text": "How many people say no? So a majority of the\nclass says yes, and",
    "start": "2373850",
    "end": "2379619"
  },
  {
    "text": "some people say no. So what would be a reason why\nyou think it's not faster? AUDIENCE: Well, I didn't say\nit's not faster faster.",
    "start": "2379620",
    "end": "2386156"
  },
  {
    "text": "It's probably the same time,\nbecause I assume the instruction for modding is not\nactually dividing by it.",
    "start": "2386156",
    "end": "2393476"
  },
  {
    "text": " PROFESSOR: So for the other\npeople who said no, how many",
    "start": "2393476",
    "end": "2399880"
  },
  {
    "text": "people agree with that\nline of reasoning? All right. Seems like everybody. So unfortunately,\nit is faster.",
    "start": "2399880",
    "end": "2409020"
  },
  {
    "text": "And it turns out, I compiled\ndown both of these pieces of code under-- well, actually,\nthe compiler--",
    "start": "2409020",
    "end": "2415670"
  },
  {
    "text": "but anyway, I'll get\nto that next. Not giving away any answers. But so I executed the assembly\ninstructions corresponding to",
    "start": "2415670",
    "end": "2423040"
  },
  {
    "text": "both of these operations. And it does turn out that the\ncompiler, the CPU, when you",
    "start": "2423040",
    "end": "2428400"
  },
  {
    "text": "ask it to take the mod of an\narbitrary number, usually it's an instruction called div mod.",
    "start": "2428400",
    "end": "2433779"
  },
  {
    "text": "And what that does is that it\ndoes a divided by b, and it puts the dividend in one\nregister and it puts the",
    "start": "2433780",
    "end": "2440309"
  },
  {
    "text": "modulo in another register. And we do that for, let's say,\n2 to the 63rd modulo 256,",
    "start": "2440310",
    "end": "2447480"
  },
  {
    "text": "because it actually goes through\nall the clock cycles for doing that division\nprocess. And then it dumps out the\nmodulo at the end.",
    "start": "2447480",
    "end": "2454660"
  },
  {
    "text": "So yes, this actually does\ntend to be a lot faster. Now next question is will the\ncompiler do this for you?",
    "start": "2454660",
    "end": "2463680"
  },
  {
    "text": "How many people say yes? Most of the class. Anybody say no?",
    "start": "2463680",
    "end": "2468910"
  },
  {
    "text": "Good. We all trust the compiler\nto some extent. So yeah, it turns out that gcc,\nstarting from 01, will do",
    "start": "2468910",
    "end": "2475280"
  },
  {
    "text": "this for you. ",
    "start": "2475280",
    "end": "2480500"
  },
  {
    "text": "Any questions? All right. Next question.",
    "start": "2480500",
    "end": "2488410"
  },
  {
    "text": "So you have a list. And you pushed in. You pushed at the end.",
    "start": "2488410",
    "end": "2494839"
  },
  {
    "start": "2489000",
    "end": "2489000"
  },
  {
    "text": "It's 42, twice. And then you returned the result\nof popping the front",
    "start": "2494840",
    "end": "2499960"
  },
  {
    "text": "element and then popping the\nback element, subtracted. ",
    "start": "2499960",
    "end": "2507290"
  },
  {
    "text": "So first of all, is this\na legal operation? ",
    "start": "2507290",
    "end": "2514255"
  },
  {
    "text": "Let me give everybody\na chance to think. AUDIENCE: Legal optimization\nas opposed to an operation.",
    "start": "2514255",
    "end": "2522170"
  },
  {
    "text": "PROFESSOR: Yeah.  How many people vote yes,\nthis is going legal?",
    "start": "2522170",
    "end": "2527530"
  },
  {
    "text": " Roughly half the class. How many people say no,\nthis is not legal?",
    "start": "2527530",
    "end": "2534800"
  },
  {
    "text": "Two people. OK, so why would it\nnot be legal? ",
    "start": "2534800",
    "end": "2542710"
  },
  {
    "text": "You can't do that. Yes? AUDIENCE: There happens to be\nwastefulness on some problems. ",
    "start": "2542710",
    "end": "2554460"
  },
  {
    "text": "PROFESSOR: Well, that could\ncertainly happen. But for the purpose of\nthese problems-- see this is why I'm bringing up\nthese problems-- so for the",
    "start": "2554460",
    "end": "2560890"
  },
  {
    "text": "purpose of these problems,\nassume there's no man behind the curtain doing things. For any given problem, you\ncould say that's someone",
    "start": "2560890",
    "end": "2566980"
  },
  {
    "text": "attaching a debugger to your\nprogram and changing the memory between instructions. So let's just assume\nthat's happening.",
    "start": "2566980",
    "end": "2574764"
  },
  {
    "text": "AUDIENCE: Also, who's\nlocal, right? PROFESSOR: Yeah. Yea, Foo is actually local,\nso if anybody else's doing",
    "start": "2574764",
    "end": "2581050"
  },
  {
    "text": "anything to it, they're\na very bad person. So fine.",
    "start": "2581050",
    "end": "2586090"
  },
  {
    "text": "It's a legal optimization. Now. is it faster?",
    "start": "2586090",
    "end": "2592090"
  },
  {
    "text": " How many people think that\nreturning zero is slower than",
    "start": "2592090",
    "end": "2598700"
  },
  {
    "text": "pushing two things up? AUDIENCE: [LAUGHTER] AUDIENCE: Depends upon\nhow big zero is.",
    "start": "2598700",
    "end": "2606320"
  },
  {
    "text": "PROFESSOR: That's true. ",
    "start": "2606320",
    "end": "2611670"
  },
  {
    "text": "So OK, so yes, obviously,\nit's faster to just directly return zero.",
    "start": "2611670",
    "end": "2616910"
  },
  {
    "text": "And finally, is this an\nautomatic optimization? How many people say yes?",
    "start": "2616910",
    "end": "2624340"
  },
  {
    "text": "Cool. Nobody said yes. How many people say no? ",
    "start": "2624340",
    "end": "2631310"
  },
  {
    "text": "People who say yes, if you\ncould work for compiler",
    "start": "2631310",
    "end": "2636320"
  },
  {
    "text": "companies, I would appreciate\nthat a lot. So unfortunately, the compiler\ndoes not make--",
    "start": "2636320",
    "end": "2644920"
  },
  {
    "text": "cannot reason through how an\nSTL list works, and realize that what you're doing\nis an no op.",
    "start": "2644920",
    "end": "2651920"
  },
  {
    "text": "It turns out that for a related\nset of questions, like have any of your mentors said\nanything to-- so my mentor",
    "start": "2651920",
    "end": "2658789"
  },
  {
    "text": "said this to me last year. And I was pretty interested\nwhen I tried it out. Have you ever used a for loop to\nset everything in an array",
    "start": "2658790",
    "end": "2665795"
  },
  {
    "text": "to equals 0?  Most people seem to\nhave done that.",
    "start": "2665795",
    "end": "2672000"
  },
  {
    "text": "Who has used the memset or heard\nof the memset set API call before?",
    "start": "2672000",
    "end": "2677550"
  },
  {
    "text": "A good portion of the class. OK, so some people. So a little bit of\nbackground then. Mem set instruction takes in an\narray or a pointer rather,",
    "start": "2677550",
    "end": "2685700"
  },
  {
    "text": "and a constant, and the\nsize of the array. And it sets that many elements\nof the array to that constant.",
    "start": "2685700",
    "end": "2692049"
  },
  {
    "text": "So it turns out that depending\non the machine that you're using, there is more efficient\nand less efficient ways of",
    "start": "2692050",
    "end": "2700070"
  },
  {
    "text": "setting all the elements\nof an array to 0. And functions like mem set are\nactually are several pages",
    "start": "2700070",
    "end": "2705760"
  },
  {
    "text": "long of hand optimized assembly\nto be optimal for your architecture.",
    "start": "2705760",
    "end": "2712619"
  },
  {
    "text": "So it's always tempting to take\na for loop that iterates through an array, setting\neverything to 0, and changing",
    "start": "2712620",
    "end": "2718060"
  },
  {
    "text": "it to a single mem\nset instruction. And it turns out that for both\ngcc and icc, Intel C compiler,",
    "start": "2718060",
    "end": "2727130"
  },
  {
    "text": "when you compile at sufficient\noptimization level, the compiler actually does\nthis for you. It actually looks through\nthe arrays.",
    "start": "2727130",
    "end": "2735000"
  },
  {
    "text": "It actually realizes that you're\nsetting all the members in the array to a constant, and\nit does that optimization for you by replacing it\nwith a memset call.",
    "start": "2735000",
    "end": "2743549"
  },
  {
    "text": "So just as a general question,\nwhy could it be advantageous for you to write the four loop\nas is, and have the compiler",
    "start": "2743550",
    "end": "2752340"
  },
  {
    "text": "do the optimization for you? AUDIENCE: Because you later\nmight add code in the loop. ",
    "start": "2752340",
    "end": "2758650"
  },
  {
    "text": "PROFESSOR: True. Any other reasons? PROFESSOR: I didn't\nhear question. PROFESSOR: You might want to\nadd code that changes the",
    "start": "2758650",
    "end": "2764510"
  },
  {
    "text": "behavior inside the loop. AUDIENCE: It's much more\nreadable to have a for loop",
    "start": "2764510",
    "end": "2769690"
  },
  {
    "text": "and you just read it, and I get\nthat's what he's doing. PROFESSOR: Yes, indeed. Looking over some of your code\nsubmissions, it seems to be a",
    "start": "2769690",
    "end": "2776270"
  },
  {
    "text": "non-trivial task of figuring out\nthe size of something when you call malloc or memset.",
    "start": "2776270",
    "end": "2781980"
  },
  {
    "text": "And actually, it sometimes is\na non-trivial operation to",
    "start": "2781980",
    "end": "2787050"
  },
  {
    "text": "figure out how big something\nis in bytes, especially for",
    "start": "2787050",
    "end": "2792540"
  },
  {
    "text": "structs and things like that. So it actually is easier to\nlet the compiler do the optimization for you, and you\ndon't make any embarrassing",
    "start": "2792540",
    "end": "2799330"
  },
  {
    "text": "mistakes in the process. ",
    "start": "2799330",
    "end": "2804860"
  },
  {
    "text": "So next question.  So here you have a\nhelper function.",
    "start": "2804860",
    "end": "2811660"
  },
  {
    "text": "And in the after version,\nseems to do the same thing, does it?",
    "start": "2811660",
    "end": "2817360"
  },
  {
    "text": " So who thinks this is a\nlegal optimization?",
    "start": "2817360",
    "end": "2824015"
  },
  {
    "start": "2824015",
    "end": "2834349"
  },
  {
    "text": "Half the class. Anyone think it's illegal?  So yeah, it is legal.",
    "start": "2834350",
    "end": "2841310"
  },
  {
    "text": "The only thing that I've done\nis that I've copy pasted basically the function body\nin the bottom example.",
    "start": "2841310",
    "end": "2847350"
  },
  {
    "text": "And it's relatively easy to\nprove that or infer that the",
    "start": "2847350",
    "end": "2852790"
  },
  {
    "text": "two do the same thing. So is it faster? ",
    "start": "2852790",
    "end": "2860010"
  },
  {
    "text": "How many people say yes? How many people say no?",
    "start": "2860010",
    "end": "2865580"
  },
  {
    "text": "One person said no. Why is it not faster? AUDIENCE: I mean, I've said\nthat it is the same speed,",
    "start": "2865580",
    "end": "2872378"
  },
  {
    "text": "because so the only thing that\nwould make it slower would be the-- you need to actually\ndo like a compass switch.",
    "start": "2872378",
    "end": "2878826"
  },
  {
    "text": "Because you need to call that\nfunction every time. But I think it could provide\nthe concept for you-- like",
    "start": "2878826",
    "end": "2885274"
  },
  {
    "text": "basically, it's a\nstatic function. It would inline it even though\nyou don't have to declare it. ",
    "start": "2885274",
    "end": "2894720"
  },
  {
    "text": "PROFESSOR: OK. So if you recall the rules for\nthe question, so basically we",
    "start": "2894720",
    "end": "2901570"
  },
  {
    "text": "want you to interpret the\ncode, as is, like a very literal interpretation as in--",
    "start": "2901570",
    "end": "2907100"
  },
  {
    "text": "the point was raised that for\nthis function call, what you actually want to do is assume\nthat the compiler is setting",
    "start": "2907100",
    "end": "2914680"
  },
  {
    "text": "up a function called by putting\nthe arguments in the right register and jumping\nto the address of that function above.",
    "start": "2914680",
    "end": "2920440"
  },
  {
    "text": "So for the case of this-- for\nthe matter-- for the purpose of this question, yes, it's\nmuch faster to just do a",
    "start": "2920440",
    "end": "2928040"
  },
  {
    "text": "multiply compared to setting up\na call stack and tearing it down after the function\nis done. ",
    "start": "2928040",
    "end": "2935740"
  },
  {
    "text": "Now the next question is is this\nautomatic, which was more or less answered.",
    "start": "2935740",
    "end": "2941730"
  },
  {
    "text": "And that's yes. So at a sufficient optimization\nlevel which is",
    "start": "2941730",
    "end": "2948210"
  },
  {
    "text": "-03 or -02 with dash f inline\nfunctions, the compiler will",
    "start": "2948210",
    "end": "2953530"
  },
  {
    "text": "actually use a heuristic that it\nhas for determining whether or not a function is a good\ncandidate for inlining.",
    "start": "2953530",
    "end": "2960030"
  },
  {
    "text": "And for good candidates, it'll\ndo the inlining for you. Now the specific\nheuristics vary",
    "start": "2960030",
    "end": "2965230"
  },
  {
    "text": "from compiler to compiler. But for this specific problem\nthat we gave you, it's a prime",
    "start": "2965230",
    "end": "2972510"
  },
  {
    "text": "candidate for inlining, because\nit's declared as static, which means it's\nlocal to this C file.",
    "start": "2972510",
    "end": "2980120"
  },
  {
    "text": "And it does a very simple\ntask, a one-liner, so it almost certainly will\nbe inline for you.",
    "start": "2980120",
    "end": "2986020"
  },
  {
    "text": " Any questions? ",
    "start": "2986020",
    "end": "2992800"
  },
  {
    "text": "Cool.  So this one.",
    "start": "2992800",
    "end": "2998260"
  },
  {
    "start": "2998260",
    "end": "3003510"
  },
  {
    "start": "2999000",
    "end": "2999000"
  },
  {
    "text": "Question? AUDIENCE: I don't get it. Could you explain again? I know I've asked this\nbefore, like what's",
    "start": "3003510",
    "end": "3009913"
  },
  {
    "text": "static, the static function? And it's different\nthan in Java? PROFESSOR: OK.",
    "start": "3009914",
    "end": "3016590"
  },
  {
    "text": "So the question was what's a\nstatic function in C. And so",
    "start": "3016590",
    "end": "3022320"
  },
  {
    "text": "in C, a static function means\nwhen you declare a function as static, it means that the\nfunction is local to the",
    "start": "3022320",
    "end": "3030440"
  },
  {
    "text": "current file that you're work--\nthe current module, the dot-o file, which is almost\nalways your dot-c file.",
    "start": "3030440",
    "end": "3036400"
  },
  {
    "text": "So like the function only exists\nwithin this dot-c file. A function in another\ndot-c file",
    "start": "3036400",
    "end": "3043090"
  },
  {
    "text": "cannot call this function. So it basically allows the\ncompiler to assume that there's no external effects on\nthis function that are not",
    "start": "3043090",
    "end": "3050640"
  },
  {
    "text": "within this file. Remember the compiler compiles\nobject files one by one, and then the linker is the one that\nbrings it all together.",
    "start": "3050640",
    "end": "3058284"
  },
  {
    "text": "AUDIENCE: So the important thing\nis that it knows that it can just delete helper after\nit's gotten rid of it. PROFESSOR: Right, right.",
    "start": "3058284",
    "end": "3063620"
  },
  {
    "text": "That's another good point. So in this case, after inlining,\nthe compiler actually won't bother to put in\nthe function helper inside",
    "start": "3063620",
    "end": "3071070"
  },
  {
    "text": "the actual object file. So you save on my code space. Because the compiler knows\nthat nowhere else this",
    "start": "3071070",
    "end": "3077140"
  },
  {
    "start": "3074000",
    "end": "3074000"
  },
  {
    "text": "function can be called. AUDIENCE: What about\nstatic in C++?",
    "start": "3077140",
    "end": "3084099"
  },
  {
    "text": "PROFESSOR: Static in C++ when\nused inside a class means that",
    "start": "3084100",
    "end": "3091400"
  },
  {
    "text": "the function is a static\nmember function. So it's a function that's tied\nto the class itself, rather",
    "start": "3091400",
    "end": "3098960"
  },
  {
    "text": "than an object, and instance\nof the class. AUDIENCE: Just like Java. PROFESSOR: Just like Java.",
    "start": "3098960",
    "end": "3104520"
  },
  {
    "text": " More questions?",
    "start": "3104520",
    "end": "3110570"
  },
  {
    "text": "Cool. So back to this code. ",
    "start": "3110570",
    "end": "3124830"
  },
  {
    "text": "First of all, is anyone not\nfamiliar with the syntax or wants the syntax explained?",
    "start": "3124830",
    "end": "3132140"
  },
  {
    "text": "OK, cool. So first question,\nis it legal? How may people say yes?",
    "start": "3132140",
    "end": "3138260"
  },
  {
    "text": " Half the class. How many people say no. ",
    "start": "3138260",
    "end": "3145450"
  },
  {
    "text": "Roughly half the class. Well, I and the people grading\nthe quiz will side with the",
    "start": "3145450",
    "end": "3153020"
  },
  {
    "text": "people who say no, because down\nhere when you're doing--",
    "start": "3153020",
    "end": "3158410"
  },
  {
    "text": "this is the correct version\nof the XOR swap. I'm not trying to trick\nanyone there. But it turns out--",
    "start": "3158410",
    "end": "3165460"
  },
  {
    "text": "well, I'd rather not assume\nthat t, the arbitrary type",
    "start": "3165460",
    "end": "3170550"
  },
  {
    "text": "name, has an operator XOR\ndefined for it that has all the properties that you need\nin order for it to do this.",
    "start": "3170550",
    "end": "3178110"
  },
  {
    "text": " Like the simplest example is\nif I pass in a double, this",
    "start": "3178110",
    "end": "3184710"
  },
  {
    "text": "would not work. Double does not have an operator\nXOR defined for it.",
    "start": "3184710",
    "end": "3190280"
  },
  {
    "text": " Some people look upset.",
    "start": "3190280",
    "end": "3197671"
  },
  {
    "text": "AUDIENCE: [LAUGHTER]",
    "start": "3197671",
    "end": "3202859"
  },
  {
    "text": "PROFESSOR: A list too\nwould not have an XOR defined for it. Anyone disagree with me?",
    "start": "3202860",
    "end": "3209750"
  },
  {
    "text": "That's not a challenge.  So yeah, some of these questions\nrequire you to do a",
    "start": "3209750",
    "end": "3215770"
  },
  {
    "text": "little bit of reasoning, like\nreasonable reasoning, as far as what to assume for the\npurposes of the question.",
    "start": "3215770",
    "end": "3224290"
  },
  {
    "text": "So watch out for that. So in this case, it's not legal,\nso you don't have to",
    "start": "3224290",
    "end": "3229680"
  },
  {
    "text": "answer the next two questions. So OK.",
    "start": "3229680",
    "end": "3235210"
  },
  {
    "text": "So let's fix this. And by fix it, I mean\nnot use templates. So now we're just operating\non ints.",
    "start": "3235210",
    "end": "3242099"
  },
  {
    "text": "And ints do have the proper\noperator XOR that has all the good properties that you want.",
    "start": "3242100",
    "end": "3248410"
  },
  {
    "text": "Yes? AUDIENCE: What's the and\nnotation of the variable. PROFESSOR: It's a reference.",
    "start": "3248410",
    "end": "3254030"
  },
  {
    "text": "So it's a reference to it. Because you need references,\nbecause you actually want to swap the two items that\nare being called in.",
    "start": "3254030",
    "end": "3261110"
  },
  {
    "text": "Right? AUDIENCE: Can you use\nlike pointeres? PROFESSOR: Yes, so you can also\nuse a pointer for it. Pointers and references, C\nwill treat this use of",
    "start": "3261110",
    "end": "3269210"
  },
  {
    "text": "references the same way as\nif you use pointers. So references are\nsyntactic sugar.",
    "start": "3269210",
    "end": "3276480"
  },
  {
    "text": "And what it basically allows you\nto do is write code that looks like you're operating on\nstandard intervals, standard",
    "start": "3276480",
    "end": "3282740"
  },
  {
    "text": "integers, but in fact that it's\na pointer to the value that the name of the variable\nthat's passed in here.",
    "start": "3282740",
    "end": "3290289"
  },
  {
    "text": "Otherwise this code would be\nriddled with a bunch of stars. ",
    "start": "3290290",
    "end": "3296600"
  },
  {
    "text": "Now is this legal? How many people say yes?",
    "start": "3296600",
    "end": "3302380"
  },
  {
    "text": "Most of the class. How many people say no? One person.",
    "start": "3302380",
    "end": "3307710"
  },
  {
    "text": "Yes? AUDIENCE: If A and B are\nthe same variable, you set it to zero. PROFESSOR: Yes, exactly.",
    "start": "3307710",
    "end": "3312780"
  },
  {
    "text": " The XOR law has a nasty side\neffect where you want to make",
    "start": "3312780",
    "end": "3319310"
  },
  {
    "text": "sure that A and B are not\nthe same variable. Not they don't contain the\nsame-- they can contain the same value in different\nvariables, but they can't be",
    "start": "3319310",
    "end": "3326830"
  },
  {
    "text": "the same variable or the\nsame register or the same memory location. Otherwise, when you do A equals\nAx or B, that's 0.",
    "start": "3326830",
    "end": "3334920"
  },
  {
    "text": "And now both A and\nB point to 0. And there's nothing you can do\nto get your old value back.",
    "start": "3334920",
    "end": "3341240"
  },
  {
    "text": "AUDIENCE: Can you check\nfor equivalence of recordkeeping in C++.",
    "start": "3341240",
    "end": "3346400"
  },
  {
    "text": "PROFESSOR: Indeed, you can. If you take the address of the\nreference, it gives you the address of the original value.",
    "start": "3346400",
    "end": "3353160"
  },
  {
    "start": "3352000",
    "end": "3352000"
  },
  {
    "text": "So this would be the proper\nway, I guess, of",
    "start": "3353160",
    "end": "3358660"
  },
  {
    "text": "doing an XOR swap. So now that we've gotten over\nall the trick questions, is",
    "start": "3358660",
    "end": "3366089"
  },
  {
    "text": "this actually faster? How many people say yes? ",
    "start": "3366090",
    "end": "3372940"
  },
  {
    "text": "One, two, three, four. How many people say no? ",
    "start": "3372940",
    "end": "3380730"
  },
  {
    "text": "Cool. Most of the class. So this is another example\nof a gray area question.",
    "start": "3380730",
    "end": "3386460"
  },
  {
    "text": "So in this class, we primarily\ntalk about the cloud machines, as far as the performance\nanalysis that we've done.",
    "start": "3386460",
    "end": "3393130"
  },
  {
    "text": "So on the cloud machines, and\nthis was mentioned in Charles's bit hacks lecture\nwhich was, well, the second",
    "start": "3393130",
    "end": "3398589"
  },
  {
    "text": "lecture in the course. This trick is not faster\non the cloud machines.",
    "start": "3398590",
    "end": "3403650"
  },
  {
    "text": "Because what you end up doing\nis you create a lot of dependencies between these\noperands, so that the pipeline",
    "start": "3403650",
    "end": "3409860"
  },
  {
    "text": "must execute these one\nby one serially. So you introduce a lot\nof delays by that.",
    "start": "3409860",
    "end": "3415980"
  },
  {
    "text": "And plus now that we actually\nwant you to write a correct program, you have to\ndo this check, and",
    "start": "3415980",
    "end": "3421270"
  },
  {
    "text": "that's an extra branch. And finally these XORs have to\nbe done by the ALU, and up to five execution ports.",
    "start": "3421270",
    "end": "3427599"
  },
  {
    "text": "Only three of them are ALUs. The other two can do memory\noperations just fine. So it turns out that for a\ncombination of these reasons,",
    "start": "3427600",
    "end": "3435270"
  },
  {
    "text": "this version indeed with the\ntemporary register actually does run faster. ",
    "start": "3435270",
    "end": "3442359"
  },
  {
    "text": "Any questions?  Yes. AUDIENCE: For branches, we\nassume advanced features, like",
    "start": "3442360",
    "end": "3450219"
  },
  {
    "text": "it will preload the exceptions\nand only invalidates the thing when certain branches fail.",
    "start": "3450219",
    "end": "3457210"
  },
  {
    "text": "PROFESSOR: Sure, you can assume\ncool properties about the chip, such as speculative\nexecution,",
    "start": "3457210",
    "end": "3462270"
  },
  {
    "text": "prefetching, and so on. But the problem is those tricks\nare fine when you're",
    "start": "3462270",
    "end": "3468800"
  },
  {
    "text": "doing things sparsely as in\nyou're sometimes doing work and other times not\ndoing work. But like speculative execution,\nlike when you",
    "start": "3468800",
    "end": "3477450"
  },
  {
    "text": "execute both sides of a branch,\nyou're using more or less double your execution\nor resources.",
    "start": "3477450",
    "end": "3484010"
  },
  {
    "text": "And if you have all processors\nrunning some intense piece of code that's doing swapping,\nyou don't have any extra",
    "start": "3484010",
    "end": "3489970"
  },
  {
    "text": "resources to dedicate towards\nrunning code that might not be useful. ",
    "start": "3489970",
    "end": "3497430"
  },
  {
    "text": "Any other questions?  Cool. So finally, I got tired\nof making slides.",
    "start": "3497430",
    "end": "3509029"
  },
  {
    "text": "Well, actually that's\nnot true. It's more I'd rather concentrate\nthe slides on things that I think are more\nuseful than other things, as",
    "start": "3509030",
    "end": "3517230"
  },
  {
    "text": "far as per preparation\nfor your quiz. All your time is valuable. And so there's other topics\nthat are fair game for the",
    "start": "3517230",
    "end": "3524190"
  },
  {
    "text": "quiz, because they've been\nmentioned in lectures up to this point. But I haven't prepared\nany slides on them.",
    "start": "3524190",
    "end": "3530170"
  },
  {
    "text": "And the fractal trees were\ncovered by the guest lecture by Bradley.",
    "start": "3530170",
    "end": "3535870"
  },
  {
    "text": "And the slides are up. I suggest familiarizing yourself\nwith the basic workings of how the data\nstructure that",
    "start": "3535870",
    "end": "3542450"
  },
  {
    "text": "he described works. And lock free data structures\nwere covered on your take home",
    "start": "3542450",
    "end": "3549579"
  },
  {
    "text": "P set, and also in a lecture. So be prepared to\nanswer potential questions about that.",
    "start": "3549580",
    "end": "3556170"
  },
  {
    "text": "And then finally the mechanism\nbehind the Cilk runtime, the work stealing scheduler, how\nit's implemented on the Linux",
    "start": "3556170",
    "end": "3563330"
  },
  {
    "text": "side, and also the basics of\nwhat a Cilk hyperobject is, what a Cilk hyperobject\nhas to have.",
    "start": "3563330",
    "end": "3569850"
  },
  {
    "text": "Advantages and disadvantages\nof using them and so on. Yes. AUDIENCE: Are the grades\nfor the P-set out?",
    "start": "3569850",
    "end": "3578460"
  },
  {
    "text": "PROFESSOR: No, they\nare not out yet. AUDIENCE: Are there solutions\nfor the P-set?",
    "start": "3578460",
    "end": "3585260"
  },
  {
    "text": "PROFESSOR: Not yet. But I believe we have something prepared for that, right? Somewhat?",
    "start": "3585260",
    "end": "3590590"
  },
  {
    "text": " Yeah, it's somewhat prepared. If you have any questions about\nlike questions on the",
    "start": "3590590",
    "end": "3598000"
  },
  {
    "text": "pset that you want answer to,\nfeel free to stop by office hours or email us and\nwe can help you.",
    "start": "3598000",
    "end": "3607190"
  },
  {
    "text": "Yeah, apologies for not\ngetting that P set back to you in time. Any other questions relating\nto the quiz.",
    "start": "3607190",
    "end": "3613870"
  },
  {
    "text": " It's really all the material\nI have as far as reviewing. ",
    "start": "3613870",
    "end": "3623010"
  },
  {
    "text": "Yes? AUDIENCE: Are you going to\nput these slides up? AUDIENCE: Yeah, I'll\nput these slides up right after the lecture.",
    "start": "3623010",
    "end": "3628950"
  },
  {
    "text": "So as far as a general notes,\nI guess you guys turned in your finals yesterday, and you\nguys have a design report that",
    "start": "3628950",
    "end": "3637855"
  },
  {
    "text": "you also turned in. Your POSSE members should have\ncontacted you by now, as far",
    "start": "3637855",
    "end": "3643920"
  },
  {
    "text": "as scheduling a design\nreview session. Since this project is actually\ndue on next Thursday, it might",
    "start": "3643920",
    "end": "3653960"
  },
  {
    "text": "be a good idea to get this done\nby the end of the week. Otherwise, the design\nreview won't be a very useful process.",
    "start": "3653960",
    "end": "3661710"
  },
  {
    "text": "AUDIENCE: There are a couple of\nstudents without a mentor right now here. We are fixing that. PROFESSOR: Right.",
    "start": "3661710",
    "end": "3666950"
  },
  {
    "text": "There's a couple of students\ncaught in limbo right now. Sorry about that.",
    "start": "3666950",
    "end": "3671960"
  },
  {
    "text": "PROFESSOR: If you were--\npreviously dropped on Stellar,",
    "start": "3671960",
    "end": "3678359"
  },
  {
    "text": "send us an email. ",
    "start": "3678360",
    "end": "3688369"
  },
  {
    "text": "If you haven't been to drop\nthrough this course, there are no longer drops allowed.",
    "start": "3688370",
    "end": "3693420"
  },
  {
    "text": "Yeah, AUDIENCE: So it's your\nresponsibility. I'm going to put\non my mean hat. It's your responsibility to\nschedule a meeting with your",
    "start": "3693420",
    "end": "3701350"
  },
  {
    "text": "POSSE member, and make sure\nthat it happens by the end of the week. And if it doesn't look like\nit's going to happen, or",
    "start": "3701350",
    "end": "3707525"
  },
  {
    "text": "you're having difficulties\ngetting in touch with your mentor, or you don't have one\nyet, please drop us an email",
    "start": "3707525",
    "end": "3713080"
  },
  {
    "text": "or come by office hours and\nmake sure that we know. All right. That's it.",
    "start": "3713080",
    "end": "3718640"
  },
  {
    "start": "3718640",
    "end": "3725781"
  }
]