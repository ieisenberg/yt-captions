[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "7910"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation, or view\nadditional materials from",
    "start": "7910",
    "end": "14460"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "14460",
    "end": "20290"
  },
  {
    "text": "ocw.mit.edu.  PROFESSOR: OK, I want to remind\nyou that there's a quiz",
    "start": "20290",
    "end": "28230"
  },
  {
    "text": "one week from today.  Yeah, I know it's soon.",
    "start": "28230",
    "end": "34390"
  },
  {
    "text": "Open book, open notes, no\ncomputing or communication",
    "start": "34390",
    "end": "40500"
  },
  {
    "text": "devices allowed.  Between now and then, probably\ntomorrow in fact, or at least",
    "start": "40500",
    "end": "49220"
  },
  {
    "text": "over the weekend, I'll send out\na summary of what I think we've covered so far\nand what you'll be",
    "start": "49220",
    "end": "54980"
  },
  {
    "text": "responsible for in the quiz. Roughly speaking, it's anything\ncovered in lectures,",
    "start": "54980",
    "end": "63160"
  },
  {
    "text": "problem sets, or recitations. I will also post some practice\nquestions that",
    "start": "63160",
    "end": "69280"
  },
  {
    "text": "you can work on. And I'll tell you now that we\nwill not be posting answers to",
    "start": "69280",
    "end": "75159"
  },
  {
    "text": "the practice questions. Instead, we'll be holding\nsome quiz reviews.",
    "start": "75160",
    "end": "83260"
  },
  {
    "text": "OK.  I wanted to cover two different\ntopics today.",
    "start": "83260",
    "end": "90060"
  },
  {
    "text": "The first topic is just\na tiny bit on floating point numbers in Python.",
    "start": "90060",
    "end": "97030"
  },
  {
    "text": "But in fact, what I'm going to\ntell you is true about all programming languages--",
    "start": "97030",
    "end": "102342"
  },
  {
    "text": "in fact all, computers really. And then after that we'll spend\nmost of the lecture on",
    "start": "102342",
    "end": "107655"
  },
  {
    "text": "the topic of debugging. So let me start with a quick\nreview of binary numbers.",
    "start": "107655",
    "end": "114030"
  },
  {
    "text": "Because you have to understand\nbinary numbers to understand floating point. So when you first learned about\nnumbers, you learned",
    "start": "114030",
    "end": "121200"
  },
  {
    "text": "about base 10. And you learned that a decimal\nnumber is represented by some",
    "start": "121200",
    "end": "126430"
  },
  {
    "text": "combination of the digits 0\nthrough 9, the rightmost place is the 10 to the 0 place, and\nthen it's the 10 to the 1",
    "start": "126430",
    "end": "134200"
  },
  {
    "text": "place, the 10 to the\n2 place, et cetera. So for example, the number 302\nor the digits 3-0-2 represent",
    "start": "134200",
    "end": "143790"
  },
  {
    "text": "3 times 100, plus 0 times\n10, plus 2 times 1.",
    "start": "143790",
    "end": "150530"
  },
  {
    "text": "Duh. All right, binary numbers are\nexactly the same except we",
    "start": "150530",
    "end": "156300"
  },
  {
    "text": "only have two digits\nto choose from. Typically written as 0 and 1 and\neverything is represented",
    "start": "156300",
    "end": "164489"
  },
  {
    "text": "by a sequence of those digits. The rightmost place is 2 to the\n0, the next place is 2 to",
    "start": "164490",
    "end": "173599"
  },
  {
    "text": "the 1, 2 to the 3, 2 to\nthe 4, et cetera.",
    "start": "173600",
    "end": "179160"
  },
  {
    "text": "So for example, if we look at\nthe binary number 1-0-1, we",
    "start": "179160",
    "end": "184730"
  },
  {
    "text": "see that's equal to 1 times\n4, plus 0 times 2, plus",
    "start": "184730",
    "end": "194400"
  },
  {
    "text": "1 times 1, or 5. ",
    "start": "194400",
    "end": "200349"
  },
  {
    "text": "So one of the first things we'll\nnotice is binary numbers take a lot more digits to\nrepresent them, or take more",
    "start": "200350",
    "end": "207030"
  },
  {
    "text": "digits than decimal numbers. In fact, if I give you n digits,\nn binary digits, how",
    "start": "207030",
    "end": "217379"
  },
  {
    "text": "many different binary numbers\ncan I represent with those n digits? ",
    "start": "217380",
    "end": "227653"
  },
  {
    "text": "Well, if I gave you n decimal\ndigits, how many different numbers can I represent?",
    "start": "227653",
    "end": "233580"
  },
  {
    "text": "How many different values\ncan I represent? AUDIENCE: 10 to the n. PROFESSOR: Pardon? AUDIENCE: 10 to the n.",
    "start": "233580",
    "end": "238712"
  },
  {
    "text": "PROFESSOR: 10 to the n. And so, for a binary number it's\ngoing to be 2 to the n. ",
    "start": "238712",
    "end": "246980"
  },
  {
    "text": "That's important, because we'll\nsee as we get to talking about the complexity of various\nalgorithms how long",
    "start": "246980",
    "end": "254379"
  },
  {
    "text": "they take to run, or how much\nspace they use, we'll frequently be resorting to\narguments of this sort to",
    "start": "254380",
    "end": "262930"
  },
  {
    "text": "understand them. Now the reason floating point\nnumbers cause problems for",
    "start": "262930",
    "end": "271440"
  },
  {
    "text": "programmers is that people\nhave learned to",
    "start": "271440",
    "end": "276960"
  },
  {
    "text": "think in base 10. Computers do everything in\nbase 2, and that causes a",
    "start": "276960",
    "end": "284000"
  },
  {
    "text": "cognitive dissonance\nsometimes. Where people are thinking one\nthing, and the computer is",
    "start": "284000",
    "end": "289460"
  },
  {
    "text": "doing something slightly\ndifferent. So why do people work\nin base 10?",
    "start": "289460",
    "end": "298370"
  },
  {
    "text": "I don't know. Maybe it's because we have\n10 fingers, but we also have 10 toes.",
    "start": "298370",
    "end": "303500"
  },
  {
    "text": "So why didn't we work\nin base 20? We have one head, I\ndon't know why.",
    "start": "303500",
    "end": "308669"
  },
  {
    "text": "But we do it, we work\nin base 10. I do know why computers\nwork in base 2.",
    "start": "308670",
    "end": "316360"
  },
  {
    "text": "And that's because it's easy\nto build switches in electronic hardware.",
    "start": "316360",
    "end": "321480"
  },
  {
    "text": "A switch is some physical\ndevice that has only two possible positions, on or off.",
    "start": "321480",
    "end": "329430"
  },
  {
    "text": "We can build very efficient\nswitches in hardware and so it's easy to represent a number\nas a sequence of on and",
    "start": "329430",
    "end": "339210"
  },
  {
    "text": "off bits, which is\neither on or off. Originally they were relays,\nthen they became transistors,",
    "start": "339210",
    "end": "348919"
  },
  {
    "text": "now they're something altogether\ndifferent. But, what they all had in common\nwas they were stable in",
    "start": "348920",
    "end": "355540"
  },
  {
    "text": "the off position, they were\nstable in the on position, and they never had to\nget in between.",
    "start": "355540",
    "end": "361240"
  },
  {
    "text": "Hence, we represent everything\nin computers in binary. So now let's think about why\nthat causes some confusion.",
    "start": "361240",
    "end": "371630"
  },
  {
    "text": "And it does only for\nfractional numbers.",
    "start": "371630",
    "end": "377140"
  },
  {
    "text": "So for whole numbers binary and\ndecimal it doesn't matter.",
    "start": "377140",
    "end": "382680"
  },
  {
    "text": "Ints are never confusing, they\nsort of do what God told us",
    "start": "382680",
    "end": "387690"
  },
  {
    "text": "integers should do, or whoever\ntold us integers. All right, but now let's\nlook at other things.",
    "start": "387690",
    "end": "395479"
  },
  {
    "text": "So I want to start by looking\nat the decimal number 0.125.",
    "start": "395480",
    "end": "406450"
  },
  {
    "text": "What's that as a fraction,\nby the way? Happens to be one what?",
    "start": "406450",
    "end": "412145"
  },
  {
    "text": "AUDIENCE: 1/8. PROFESSOR: 1/8, we'll see\nwhy that actually matters in a minute.",
    "start": "412145",
    "end": "418550"
  },
  {
    "text": "So, what does it mean, in\nsome sense, in decimal?",
    "start": "418550",
    "end": "423759"
  },
  {
    "text": "It's equal to 1 times 10 to the\nminus 1 plus 2 times 10 to the minus 2 plus 5 times\n10 to the minus 3. ",
    "start": "423760",
    "end": "443800"
  },
  {
    "text": "So it works exactly the same\nway that things work on the other side of, in this case,\nthe decimal point.",
    "start": "443800",
    "end": "451530"
  },
  {
    "text": "Suppose we want to represent\nit in binary. So instead of a decimal point,\nwe have a binary point.",
    "start": "451530",
    "end": "458150"
  },
  {
    "text": " What does it look like then? ",
    "start": "458150",
    "end": "467930"
  },
  {
    "text": "Well it's equal to what?",
    "start": "467930",
    "end": "476550"
  },
  {
    "text": "1 times-- if it's 1/8, what's\nit going to be? 1 times what? AUDIENCE: 1 times 10\nto the minus 3.",
    "start": "476550",
    "end": "483320"
  },
  {
    "text": "PROFESSOR: 10 to the minus 3.  Or, 0.001.",
    "start": "483320",
    "end": "494722"
  },
  {
    "text": "Right? So, so far, so good.",
    "start": "494722",
    "end": "500139"
  },
  {
    "text": "Not much difference\nbetween the two. Now let's take a different\ndecimal number.",
    "start": "500140",
    "end": "506960"
  },
  {
    "text": "What about the decimal 0.1?",
    "start": "506960",
    "end": "515490"
  },
  {
    "text": "I have to tell you that it's a\ndecimal because it could also be a binary with just\n0's and 1's.",
    "start": "515490",
    "end": "521690"
  },
  {
    "text": "Well, we know how to represent\nthat in decimal. ",
    "start": "521690",
    "end": "529430"
  },
  {
    "text": "How about in binary?  What's the equivalent?",
    "start": "529430",
    "end": "534660"
  },
  {
    "text": "Now that's 1/10, of course. What does 1/10 look\nlike in binary? ",
    "start": "534660",
    "end": "544650"
  },
  {
    "text": "Any takers? ",
    "start": "544650",
    "end": "550900"
  },
  {
    "text": "Well I'll give you a hint. It's so long, that I don't want\nto write it on the board.",
    "start": "550900",
    "end": "558078"
  },
  {
    "start": "558078",
    "end": "563540"
  },
  {
    "text": "In fact, it's worse than\nlong, it's infinite.",
    "start": "563540",
    "end": "572339"
  },
  {
    "text": "I guess that's kind of long. It's this repeating\nbinary fraction.",
    "start": "572340",
    "end": "584100"
  },
  {
    "text": "There is no finite combination\nof binary digits that",
    "start": "584100",
    "end": "589579"
  },
  {
    "text": "represent the decimal\nfraction 1/10. ",
    "start": "589580",
    "end": "595510"
  },
  {
    "text": "There's no way to do it.  And that's why things\nget a little hairy.",
    "start": "595510",
    "end": "604000"
  },
  {
    "text": "So we can stop at some finite\nnumber of bits. ",
    "start": "604000",
    "end": "609185"
  },
  {
    "text": "And in fact that's what happens\nin the internal representation in Python.",
    "start": "609185",
    "end": "616630"
  },
  {
    "text": "It ends up representing 1/10\nas something equivalent to",
    "start": "616630",
    "end": "622090"
  },
  {
    "text": "this decimal fraction. If I take the number of binary\nbits that are inside the",
    "start": "622090",
    "end": "631390"
  },
  {
    "text": "computer, and then I translate\nit back to decimal, it turns out that it's using this\napproximation for the decimal",
    "start": "631390",
    "end": "640279"
  },
  {
    "text": "fraction 1/10.  So for example, some of you in\nyour problem sets -- where you",
    "start": "640280",
    "end": "649050"
  },
  {
    "text": "were computing how much you had\nto pay on a credit card --",
    "start": "649050",
    "end": "654060"
  },
  {
    "text": "would get answers that were\neventually off by a penny or something from what we expected\nin some, and that has",
    "start": "654060",
    "end": "660290"
  },
  {
    "text": "to do with the fact that you\nwere thinking in decimal. And in fact, you were writing\nyour program in decimal, yet",
    "start": "660290",
    "end": "668449"
  },
  {
    "text": "internally things were happening\nin binary, and when you thought you were writing\n1/10 for example you were",
    "start": "668450",
    "end": "675630"
  },
  {
    "text": "actually getting something like\nthis inside the computer.",
    "start": "675630",
    "end": "680920"
  },
  {
    "text": "Pretty close to 1/10, but\nnot exactly 1/10. ",
    "start": "680920",
    "end": "689350"
  },
  {
    "text": "Now, when we print it, we get\nyet something else because the",
    "start": "689350",
    "end": "697110"
  },
  {
    "text": "print statement uses an internal\nfunction that by default rounds these things\nto 17 digits.",
    "start": "697110",
    "end": "706700"
  },
  {
    "text": "And so you end up getting\nsomething like that, or you might depending how you do it.",
    "start": "706700",
    "end": "713560"
  },
  {
    "text": "So let's look at an\nexample here. ",
    "start": "713560",
    "end": "727090"
  },
  {
    "text": "So I can do something like\nthis, and it prints that",
    "start": "727090",
    "end": "735820"
  },
  {
    "text": "because it's doing some\nrounding for me. But if I really look at what's\nunder there, and look at the",
    "start": "735820",
    "end": "745430"
  },
  {
    "text": "representation, the REPR\nfunction is convenient to get",
    "start": "745430",
    "end": "750529"
  },
  {
    "text": "a sense of what's really going\non inside, it tells me that",
    "start": "750530",
    "end": "755890"
  },
  {
    "text": "well that's a 17-digit\napproximation. And now so that's what's\nreally lurking there.",
    "start": "755890",
    "end": "763649"
  },
  {
    "text": "So a hint, If you think\nsomething is going funny because of the way arithmetic\nis working, instead of just",
    "start": "763650",
    "end": "772460"
  },
  {
    "text": "using print, you can use print\nof REPR to get a better idea",
    "start": "772460",
    "end": "780020"
  },
  {
    "text": "about what's really going on. All right, now, does\nthis matter?",
    "start": "780020",
    "end": "786840"
  },
  {
    "text": "Usually it doesn't. Most of the time it's safe just\nto pretend that floating",
    "start": "786840",
    "end": "792260"
  },
  {
    "text": "points work the way you learned\nabout arithmetic when you were in third grade, or\nprobably in kindergarten if",
    "start": "792260",
    "end": "801769"
  },
  {
    "text": "you were educated in\nEurope or Asia. But now let's look at\nan example where",
    "start": "801770",
    "end": "809160"
  },
  {
    "text": "you can get in trouble. So I've got a little\nprogram here. I initialize x to 0, then I'm\ngoing to go through a loop a",
    "start": "809160",
    "end": "818480"
  },
  {
    "text": "lot of times, where I\nincrement x by 1/10.",
    "start": "818480",
    "end": "824570"
  },
  {
    "text": "And then I'm going to print x. And because it's going to do\nautomatic rounding, it's going",
    "start": "824570",
    "end": "829920"
  },
  {
    "text": "to print 10,000-- or actually, it should\nprint 100,000, right?",
    "start": "829920",
    "end": "840470"
  },
  {
    "text": "No 10,000, because I'm only\nincrementing it by 1/10, excuse me. But then I'm going to print REPR\nof x, and then I'm going",
    "start": "840470",
    "end": "850570"
  },
  {
    "text": "to do a comparison. Now if floating point arithmetic\nworked the way",
    "start": "850570",
    "end": "856280"
  },
  {
    "text": "reals work, we would think that\n10.0 times x should equal",
    "start": "856280",
    "end": "863370"
  },
  {
    "text": "the number of iterations. Because I'm starting at 0, each\ntime I'm incrementing it",
    "start": "863370",
    "end": "869710"
  },
  {
    "text": "by 1/10, and so if I multiply\nthe result by 10 at the end, I",
    "start": "869710",
    "end": "875790"
  },
  {
    "text": "should get the same as the\nnumber of iterations. Does that make sense\nto everybody?",
    "start": "875790",
    "end": "881269"
  },
  {
    "text": "That's what you would normally\nget if you did this with",
    "start": "881270",
    "end": "887530"
  },
  {
    "text": "pencil and paper. Of course, it would take you a\nreally long time to do 100,000",
    "start": "887530",
    "end": "892550"
  },
  {
    "text": "increments. Let's give it a shot. ",
    "start": "892550",
    "end": "898089"
  },
  {
    "text": "And what we'll see is that\nif I print it, it looks OK, it's 1,000.",
    "start": "898090",
    "end": "904100"
  },
  {
    "text": "But if I print REPR of it, I\nsee it's 10,000, a bunch of",
    "start": "904100",
    "end": "910569"
  },
  {
    "text": "0's, and then 18848. And, of course, consequently\nwhen I compare it, I get",
    "start": "910570",
    "end": "919650"
  },
  {
    "text": "something that says false. And that's because if I look\nat REPR of 10.0 times x--",
    "start": "919650",
    "end": "935230"
  },
  {
    "text": "well, that's interesting,\nwhat's going on here?",
    "start": "935230",
    "end": "941420"
  },
  {
    "text": "It kind of looks like the\nsame thing, doesn't it? ",
    "start": "941420",
    "end": "947140"
  },
  {
    "text": "But it's not, because way out\nthere are some other digits we're not seeing, something\ndifferent is happening.",
    "start": "947140",
    "end": "953440"
  },
  {
    "text": " OK, what's the moral of this?",
    "start": "953440",
    "end": "960070"
  },
  {
    "text": "It's not complicated. It's not, OK write your programs\nthinking deeply about",
    "start": "960070",
    "end": "966500"
  },
  {
    "text": "what's going on in those bits\nway out there at the end. It's, don't ever test whether to\nfloating numbers are equal",
    "start": "966500",
    "end": "974380"
  },
  {
    "text": "to each other. Instead, do something\nlike this.",
    "start": "974380",
    "end": "980130"
  },
  {
    "start": "980130",
    "end": "988370"
  },
  {
    "text": "Define a function called\n'close', or whatever you want, that takes two floats\nand some epsilon.",
    "start": "988370",
    "end": "997760"
  },
  {
    "text": "And I've given here epsilon\na default value. And then just return whether the\nabsolute value of x minus",
    "start": "997760",
    "end": "1004329"
  },
  {
    "text": "y is less than epsilon. So whenever you're comparing\ntwo floating numbers, the",
    "start": "1004330",
    "end": "1009880"
  },
  {
    "text": "question shouldn't be are they\nidentical, but are they close enough for your purposes.",
    "start": "1009880",
    "end": "1016370"
  },
  {
    "text": "And if you do that, then you\ndon't get tripped up by this kind of rounding and\nthings like that.",
    "start": "1016370",
    "end": "1021779"
  },
  {
    "text": " Not a complicated story, but\nkeeping this in mind will get",
    "start": "1021780",
    "end": "1028959"
  },
  {
    "text": "you out of trouble when you're\ndoing floating point arithmetic. Let's run this, and\nsee what happens.",
    "start": "1028960",
    "end": "1035209"
  },
  {
    "text": " And indeed, they're not equal\nbut they're good enough, close",
    "start": "1035209",
    "end": "1041910"
  },
  {
    "text": "enough if you will.  OK. ",
    "start": "1041910",
    "end": "1049480"
  },
  {
    "text": "One of the dangers, the reason\nthis went wrong, is these little differences can\naccumulate if you go through a",
    "start": "1049480",
    "end": "1055770"
  },
  {
    "text": "lot of iterations. Sometimes they balance out,\nsometimes it rounds up,",
    "start": "1055770",
    "end": "1060990"
  },
  {
    "text": "sometimes it rounds down,\nbut not always. So very simple answer.",
    "start": "1060990",
    "end": "1066180"
  },
  {
    "text": "Just don't get caught up\nin this problem of floating point numbers.",
    "start": "1066180",
    "end": "1071780"
  },
  {
    "text": "All right, any questions\nabout that?  All right, Yes.",
    "start": "1071780",
    "end": "1078539"
  },
  {
    "text": "AUDIENCE: Doesn't it change\nfor Python 2.7? It's only returning 0.1\nand not 0.100000.",
    "start": "1078540",
    "end": "1085400"
  },
  {
    "text": "PROFESSOR: In 2.7? AUDIENCE: Yeah. PROFESSOR: Don't know, sorry. ",
    "start": "1085400",
    "end": "1092559"
  },
  {
    "text": "But the moral remains\nthe same. Whatever is going on, don't test\nfloating point numbers",
    "start": "1092560",
    "end": "1098110"
  },
  {
    "text": "for quality because you'll have\na high probability of",
    "start": "1098110",
    "end": "1103170"
  },
  {
    "text": "getting false, when you\nshould get true. OK. You almost never get true when\nyou should get false.",
    "start": "1103170",
    "end": "1110480"
  },
  {
    "text": "I now want to move on\nif there are no more questions to debugging. ",
    "start": "1110480",
    "end": "1117220"
  },
  {
    "text": "I never know when to give this\nlecture in the term. So what I usually do is I wait\nuntil the volume of email, and",
    "start": "1117220",
    "end": "1124920"
  },
  {
    "text": "complaints, and office hours\nbuilds, and I realized people are ready to learn more\nabout debugging.",
    "start": "1124920",
    "end": "1131590"
  },
  {
    "text": "If I do it too early, people\ndon't pay any attention because they don't realize\nit's a problem.",
    "start": "1131590",
    "end": "1137490"
  },
  {
    "text": "And if I do it too late, they\nget irritated with me because they say well why didn't you\ntell me this earlier in the",
    "start": "1137490",
    "end": "1142950"
  },
  {
    "text": "semester when it would've\ndone me some good. So, I pick a time. And right now it looks like the\nneed has built up enough",
    "start": "1142950",
    "end": "1151070"
  },
  {
    "text": "that it's worth doing. There's a very charming urban\nlegend about how the process",
    "start": "1151070",
    "end": "1158640"
  },
  {
    "text": "of fixing flaws in software came\nto be known as debugging. It's one of those stories that's\nso nice that you just",
    "start": "1158640",
    "end": "1165860"
  },
  {
    "text": "want it to be true. So let's look at this story,\nbecause it's fun. ",
    "start": "1165860",
    "end": "1185370"
  },
  {
    "text": "All right, what you see on the\nscreen now is a photo of a book now at the Smithsonian\nMuseum, of the lab book from",
    "start": "1185370",
    "end": "1194760"
  },
  {
    "text": "the group working on the Mark\nII Aiken Relay computer at Harvard University.",
    "start": "1194760",
    "end": "1202450"
  },
  {
    "text": "Pardon? Oh, I see it on my screen, now\nyou see it on your screen. Thank you.",
    "start": "1202450",
    "end": "1207960"
  },
  {
    "text": "So there it is. It was September 9, 1947, even\nbefore I was born, it",
    "start": "1207960",
    "end": "1217150"
  },
  {
    "text": "was that long ago. And so you can see that\nthey're running their computer, and they started to do\nan arctan computation, and",
    "start": "1217150",
    "end": "1227130"
  },
  {
    "text": "it's kind of interesting that\nthey started it at 8 o'clock in the morning, and\nit ran for two",
    "start": "1227130",
    "end": "1233789"
  },
  {
    "text": "hours, and then it stopped. Wow, to do an arctan.",
    "start": "1233790",
    "end": "1238960"
  },
  {
    "text": "Tells you something about how\nfast this computer was. Then it went on. Then they started the cosine\ntape, and started to do a",
    "start": "1238960",
    "end": "1249150"
  },
  {
    "text": "multiple adder, and then\nsomething bad happened. ",
    "start": "1249150",
    "end": "1257470"
  },
  {
    "text": "It stopped working.  Whoops. ",
    "start": "1257470",
    "end": "1264679"
  },
  {
    "text": "All right, hold on a second. ",
    "start": "1264680",
    "end": "1276730"
  },
  {
    "text": "And they spent a long time\ntrying to find out why it stopped working. And then they found\nout the problem.",
    "start": "1276730",
    "end": "1285039"
  },
  {
    "text": "They found a moth stuck between\none of the relays.",
    "start": "1285040",
    "end": "1290750"
  },
  {
    "text": "So it had electromechanical\nrelays for their switches, the on and off. And they were debugging, they\ndidn't call it debugging.",
    "start": "1290750",
    "end": "1299010"
  },
  {
    "text": "And they found the software\nhad failed because the hardware had failed, and the\nhardware had failed because a",
    "start": "1299010",
    "end": "1304620"
  },
  {
    "text": "bug had been stuck in\none of the relays. They debugged it, as in removed\nthe moth, and the",
    "start": "1304620",
    "end": "1311490"
  },
  {
    "text": "program ran to successful\ncompletion. And as you can see, the comment\nwas written in this",
    "start": "1311490",
    "end": "1317280"
  },
  {
    "text": "book, first actual case\nof a bug being found. Hence, we call it debugging.",
    "start": "1317280",
    "end": "1325610"
  },
  {
    "text": "This was, by the way, Grace\nMurray Hopper's lab book. She is often described as\nthe first programmer.",
    "start": "1325610",
    "end": "1335190"
  },
  {
    "text": "It's unclear if that's true. What is true, she was\nthe first female Admiral in the US Navy.",
    "start": "1335190",
    "end": "1341700"
  },
  {
    "text": "She was a Navy programmer\nwho eventually rose to the rank of Admiral. ",
    "start": "1341700",
    "end": "1347700"
  },
  {
    "text": "So it's a charming story\nthat this is why we call it debugging. Turns out it's not\nat all true.",
    "start": "1347700",
    "end": "1353720"
  },
  {
    "text": "That the phrase debugging had\nbeen used for a long time, and could easily be traced back to\nthe 1800s when people were",
    "start": "1353720",
    "end": "1362840"
  },
  {
    "text": "writing books about electronics\nand talking about debugging even in those days.",
    "start": "1362840",
    "end": "1368779"
  },
  {
    "text": "And in fact, you can go back to\nShakespeare who talks about a bugbear, meaning something\ncausing needless exercise,",
    "start": "1368780",
    "end": "1377940"
  },
  {
    "text": "needless or excessive\nfear or anxiety. Well that's a good description\nof a bug.",
    "start": "1377940",
    "end": "1384760"
  },
  {
    "text": "And he actually called it\na bug when he had Hamlet [UNINTELLIGIBLE] about to bugs and goblins\nin my life.",
    "start": "1384760",
    "end": "1392680"
  },
  {
    "text": "All right, so I want\nto start now-- oh by the way, just for fun,\nthis is what the Mark II",
    "start": "1392680",
    "end": "1401230"
  },
  {
    "text": "looked like. This was the computer the took\nan hour or so to do an arctan.",
    "start": "1401230",
    "end": "1407940"
  },
  {
    "text": "You see it filled-- made it's a little hard\nto see in this light-- but you can see it filled\nan entire room.",
    "start": "1407940",
    "end": "1413340"
  },
  {
    "text": " Quite amazing. And, here's a picture of\nAdmiral Hopper and some",
    "start": "1413340",
    "end": "1422120"
  },
  {
    "text": "unidentified mail. All right, if anyone knows who\nthis it would be good to know",
    "start": "1422120",
    "end": "1428100"
  },
  {
    "text": "so I can update my archives. All right, so now on to some",
    "start": "1428100",
    "end": "1434280"
  },
  {
    "text": "practical aspects of debugging. The first thing I want\nto do is dispel some myths about debugging.",
    "start": "1434280",
    "end": "1441660"
  },
  {
    "text": "There is this myth\nthat bugs crawl unbidden into our programs.",
    "start": "1441660",
    "end": "1447700"
  },
  {
    "text": "That we write perfect programs\nand somehow a bug just sneaks in, and ruins perfection.",
    "start": "1447700",
    "end": "1455360"
  },
  {
    "text": "That's not true. In fact, if there's\na bug in your program, you put it there.",
    "start": "1455360",
    "end": "1461260"
  },
  {
    "text": "So it would be almost better\nnot to call it a bug, which sort of sounds like it's not our\nfault, but it's a mistake,",
    "start": "1461260",
    "end": "1467889"
  },
  {
    "text": "it's a screw up. So get that through your head. Similarly bugs do not\nbreed in programs.",
    "start": "1467890",
    "end": "1475250"
  },
  {
    "text": "If there are multiple bugs in\nyour program, it's not because a couple of them got together\nand procreated, it's because",
    "start": "1475250",
    "end": "1482400"
  },
  {
    "text": "you made a lot of mistakes.  Keep that in mind.",
    "start": "1482400",
    "end": "1487779"
  },
  {
    "text": "With that in mind, we should\nthink about what the goal of debugging--",
    "start": "1487780",
    "end": "1492900"
  },
  {
    "text": "and it's not to eliminate one\nbug quickly, it is to move",
    "start": "1492900",
    "end": "1514250"
  },
  {
    "text": "towards a bug-free program. ",
    "start": "1514250",
    "end": "1521730"
  },
  {
    "text": "And I say this because they're\nnot always the same strategy",
    "start": "1521730",
    "end": "1532290"
  },
  {
    "text": "that you would follow for\nthese different goals. And I also carefully say to\nmove towards a bug-free",
    "start": "1532290",
    "end": "1540660"
  },
  {
    "text": "program because in truth be told\nwe are hardly ever sure that we have no bugs left.",
    "start": "1540660",
    "end": "1548290"
  },
  {
    "text": "Debugging is a learned skill. Don't despair. Nobody does it well\ninstinctively.",
    "start": "1548290",
    "end": "1555220"
  },
  {
    "text": "Evolution did not train\nus to be debuggers. So a large part, probably the\nlargest part in many ways, of",
    "start": "1555220",
    "end": "1562290"
  },
  {
    "text": "learning to be a\ngood programmer is learning to debug. And what that has to do is\nthinking systematically and",
    "start": "1562290",
    "end": "1571840"
  },
  {
    "text": "efficiently about how to move\ntowards a bug-free program.",
    "start": "1571840",
    "end": "1576990"
  },
  {
    "text": "The good news is that it's not\nhard to learn, and it is a largely transferable skill.",
    "start": "1576990",
    "end": "1584169"
  },
  {
    "text": "The same skills you use to debug\nsoftware, can be used to debug laboratory experiments.",
    "start": "1584170",
    "end": "1591539"
  },
  {
    "text": "I actually give lectures\nsometimes to physicians about how to debug patients.",
    "start": "1591540",
    "end": "1598230"
  },
  {
    "text": "How to use debugging techniques\nto find out what's wrong with people when\nthey're sick. It's a very good and\nuseful life skill.",
    "start": "1598230",
    "end": "1606200"
  },
  {
    "text": "Now for four decades, maybe five\ndecades, people have been",
    "start": "1606200",
    "end": "1611490"
  },
  {
    "text": "building tools called\nthe debuggers. And you'll find that built into\nIDOL there is a debugger",
    "start": "1611490",
    "end": "1620432"
  },
  {
    "text": "that are designed to help people\nfind out why their programs don't work,\nand fix them.",
    "start": "1620432",
    "end": "1628399"
  },
  {
    "text": "Personally, I almost\nnever use one. The tools are not\nthat important.",
    "start": "1628400",
    "end": "1636710"
  },
  {
    "text": "What's important is\nthe skill of the craftsman, in this case.",
    "start": "1636710",
    "end": "1642170"
  },
  {
    "text": "And in fact, most of the\nexperienced programmers I know rely on print statements.",
    "start": "1642170",
    "end": "1647365"
  },
  {
    "text": " So it's OK to use a debugger but\nI think the best debugging",
    "start": "1647365",
    "end": "1654929"
  },
  {
    "text": "tool is print. And I have to say I've\nbeen surprised--",
    "start": "1654930",
    "end": "1661550"
  },
  {
    "text": "that's a mild word here-- at how few print statements\nyou guys seem to use.",
    "start": "1661550",
    "end": "1668670"
  },
  {
    "text": "I get these emails, or the staff\ngets these emails, kind of plaintiff, why doesn't\nmy program work?",
    "start": "1668670",
    "end": "1676500"
  },
  {
    "text": "And then there's a little\npiece of code. And the answer I send back--\nwhen I reply before one of the",
    "start": "1676500",
    "end": "1682150"
  },
  {
    "text": "TA's do, and they usually\nget there first-- is usually, put in a print\nstatement here",
    "start": "1682150",
    "end": "1687380"
  },
  {
    "text": "and see what happens. And I'm just amazed that when\nthe code arrives it doesn't have these statements in it.",
    "start": "1687380",
    "end": "1695490"
  },
  {
    "text": "My favorite response, was I sent\nan email to a student, who shall go nameless, and he--\nor maybe it was a she--",
    "start": "1695490",
    "end": "1703345"
  },
  {
    "text": "and I said, insert a print\nstatement here and see what happens. And I got back to reply saying,\nno I don't need a",
    "start": "1703345",
    "end": "1710040"
  },
  {
    "text": "print statement here I know\nwhat the value of this variable is. Well, you know, my reply was\nthat if all the values were",
    "start": "1710040",
    "end": "1718549"
  },
  {
    "text": "what you thought they were,\nyou wouldn't be sending an email saying, why doesn't\nmy program work. Put the darn print statement\nand see what happens.",
    "start": "1718550",
    "end": "1726330"
  },
  {
    "text": "And then I got a gracious email\nback saying, more or less, oops, I see.",
    "start": "1726330",
    "end": "1732490"
  },
  {
    "text": "But please, when you send us\nsome code, you want some help, send us code with some print\nstatements already in it to at",
    "start": "1732490",
    "end": "1740265"
  },
  {
    "text": "least show us that\nyou've tried to find the bug yourself. All right, so what we're\nessentially doing when we",
    "start": "1740265",
    "end": "1747160"
  },
  {
    "text": "insert print statements in a\ncode is searching for the place in our program where\nthings have gone awry.",
    "start": "1747160",
    "end": "1754020"
  },
  {
    "text": " And the key to being a good\ndebugger is to be systematic",
    "start": "1754020",
    "end": "1762419"
  },
  {
    "text": "in this search. So you saw that when we looked\nat algorithms for things like",
    "start": "1762420",
    "end": "1767529"
  },
  {
    "text": "exhaustive enumeration. We said, well if we're searching\nfor an answer, we",
    "start": "1767530",
    "end": "1772620"
  },
  {
    "text": "have to search the space\ncarefully one at a time. And then we said, if we want\nto search it efficiently,",
    "start": "1772620",
    "end": "1779120"
  },
  {
    "text": "maybe instead of starting at the\nbeginning and just going to the end, we should use\nsomething like binary search.",
    "start": "1779120",
    "end": "1786260"
  },
  {
    "text": "The same techniques can\nbe used when you're searching for bugs. ",
    "start": "1786260",
    "end": "1798659"
  },
  {
    "text": "So I recommend searching for\nbugs using some approximation",
    "start": "1798660",
    "end": "1804240"
  },
  {
    "text": "to binary search. ",
    "start": "1804240",
    "end": "1811820"
  },
  {
    "text": "And we'll see an example of this\nas we go forward, but as we look at the example what I\nwant you to think about is",
    "start": "1811820",
    "end": "1821340"
  },
  {
    "text": "what are we searching for? We know our program\ndoesn't work.",
    "start": "1821340",
    "end": "1827400"
  },
  {
    "text": "So the question that I like to\nask, is not why didn't it",
    "start": "1827400",
    "end": "1835680"
  },
  {
    "text": "produce the answer\nI wanted it to? But, how could it have done\nwhat it had done?",
    "start": "1835680",
    "end": "1842029"
  },
  {
    "start": "1842030",
    "end": "1861700"
  },
  {
    "text": "This is a subtly different\nquestion. And it's usually a much easier\nquestion to answer.",
    "start": "1861700",
    "end": "1867809"
  },
  {
    "text": "Not why didn't it do\nthe right thing, but here it did something. So I already know what it did.",
    "start": "1867810",
    "end": "1873590"
  },
  {
    "text": "And I say, I didn't expect\nit to do that, so why did it do that?",
    "start": "1873590",
    "end": "1878860"
  },
  {
    "text": "Once I know why it did what it\ndid, it's usually pretty easy to think how to fix it.",
    "start": "1878860",
    "end": "1884500"
  },
  {
    "text": " So that's the first\nquestion I ask.",
    "start": "1884500",
    "end": "1889635"
  },
  {
    "text": " I then go about it using\nsomething akin to the",
    "start": "1889635",
    "end": "1897980"
  },
  {
    "text": "scientific method, which\nwe all learned about many years ago. And basically the scientific\nmethod is based upon studying",
    "start": "1897980",
    "end": "1910309"
  },
  {
    "text": "available data. ",
    "start": "1910310",
    "end": "1920690"
  },
  {
    "text": "The data you have is of course\nthe program text itself, the",
    "start": "1920690",
    "end": "1929080"
  },
  {
    "text": "test results, you ran some tests\nand got the wrong answer which is why you knew\nyou had a bug.",
    "start": "1929080",
    "end": "1938190"
  },
  {
    "text": "And then you can probe it, you\ncan change the test results by",
    "start": "1938190",
    "end": "1943240"
  },
  {
    "text": "using print statements so that\nyou have more data to study. Keep in mind that you don't\nunderstand this program,",
    "start": "1943240",
    "end": "1951840"
  },
  {
    "text": "because if you did\nit would work.  Once I study this, I form a\nhypothesis that at least I",
    "start": "1951840",
    "end": "1967640"
  },
  {
    "text": "think is consistent\nwith the data. ",
    "start": "1967640",
    "end": "1976750"
  },
  {
    "text": "And then I go and design and run\na repeatable experiment.",
    "start": "1976750",
    "end": "1988595"
  },
  {
    "text": " And I want to emphasize the\nword repeatable, here.",
    "start": "1988595",
    "end": "1995570"
  },
  {
    "start": "1995570",
    "end": "2004580"
  },
  {
    "text": "And again the key thing as with\nthe scientific method, the experiment to be useful\nmust have the potential to",
    "start": "2004580",
    "end": "2014330"
  },
  {
    "text": "refute the hypothesis. ",
    "start": "2014330",
    "end": "2026290"
  },
  {
    "text": "Why might repeatability\nto be an issue? Well, as we'll see pretty\nsoon, a lot of programs",
    "start": "2026290",
    "end": "2034650"
  },
  {
    "text": "involve randomness. Where you're doing something\nequivalent to flipping a coin,",
    "start": "2034650",
    "end": "2042620"
  },
  {
    "text": "somewhere in the program which\nmight come up heads or tails, and the program would\ndo different things.",
    "start": "2042620",
    "end": "2048109"
  },
  {
    "text": "We'll see why that's an\nimportant programming techniques soon. And once you do that, you can\nget different results with",
    "start": "2048110",
    "end": "2055960"
  },
  {
    "text": "different runs.  More subtly there can be various\nkinds of timing errors",
    "start": "2055960",
    "end": "2065138"
  },
  {
    "text": "deep down in the operating\nsystem where you have multiple activities going on\nat the same time. This is usually the reason that\nyou'll see say, Windows",
    "start": "2065139",
    "end": "2073429"
  },
  {
    "text": "crash, or Word, or PowerPoint,\nor something else. Because there's some timing\nerror that occurs sometimes.",
    "start": "2073429",
    "end": "2082579"
  },
  {
    "text": "And probably most commonly,\nbecause there's human input. Somebody typed something\nand they might",
    "start": "2082580",
    "end": "2087770"
  },
  {
    "text": "type something different. So one of the things you want\nto do when you're systematic",
    "start": "2087770",
    "end": "2095440"
  },
  {
    "text": "is make sure that you\ncan replay things. And we'll talk more about this\nwhen we get to randomness,",
    "start": "2095440",
    "end": "2102780"
  },
  {
    "text": "about how we go about\ndoing that. All right, now let's try and\nput this all together in a",
    "start": "2102780",
    "end": "2108569"
  },
  {
    "text": "little program. If you've been studying your\nhandout, as at least one of",
    "start": "2108570",
    "end": "2114600"
  },
  {
    "text": "the TA's did, you've been kind\nof mystified by the fact that",
    "start": "2114600",
    "end": "2120000"
  },
  {
    "text": "there's a pretty crummy\nlooking program in it. ",
    "start": "2120000",
    "end": "2126090"
  },
  {
    "text": "And unlike sometimes when I\nmake mistakes I don't know I've made, here I",
    "start": "2126090",
    "end": "2131310"
  },
  {
    "text": "intentionally made some mistakes. So let's look at this program.",
    "start": "2131310",
    "end": "2137380"
  },
  {
    "text": "I wrote a function called\nis_palindrome that takes in a list and is intended to return\ntrue if the list is a",
    "start": "2137380",
    "end": "2146190"
  },
  {
    "text": "palindrome and false\notherwise. Then I wrote this little program\ncalled Silly that uses",
    "start": "2146190",
    "end": "2152680"
  },
  {
    "text": "isPal, takes in a number,\nrequests that the user make",
    "start": "2152680",
    "end": "2160000"
  },
  {
    "text": "that many inputs, then calls\nisPal to find out whether or",
    "start": "2160000",
    "end": "2165910"
  },
  {
    "text": "not the resultant list\nis a palindrome.  Not too complicated.",
    "start": "2165910",
    "end": "2172900"
  },
  {
    "text": "But now let's run it. ",
    "start": "2172900",
    "end": "2182559"
  },
  {
    "text": "Do Silly of 'five'. ",
    "start": "2182560",
    "end": "2194670"
  },
  {
    "text": "And it tells me 'abcde'\nis a palindrome.  All right, I have a bug.",
    "start": "2194670",
    "end": "2202290"
  },
  {
    "text": "Now I need to go try\nand find that bug. So the first thing I need to\nthink about when I'm looking",
    "start": "2202290",
    "end": "2209390"
  },
  {
    "text": "for it is to try and find a\nsmaller piece of input that",
    "start": "2209390",
    "end": "2216589"
  },
  {
    "text": "will produce the bug. ",
    "start": "2216590",
    "end": "2228700"
  },
  {
    "text": "So I want to find small input\non which program fails. Why do I want to find\na smaller input?",
    "start": "2228700",
    "end": "2236609"
  },
  {
    "text": "Well, a in this case it's less\ntyping, b if it's a real program it's probably less\nexecution time to make it run,",
    "start": "2236610",
    "end": "2245280"
  },
  {
    "text": "but c it'll be easier to debug\nbecause there are fewer kinds of problems.",
    "start": "2245280",
    "end": "2250559"
  },
  {
    "text": "So let me try it on a\nsmall piece of input say, Silly of 1. ",
    "start": "2250560",
    "end": "2259240"
  },
  {
    "text": "Oh, it gets that right. So that's no good.",
    "start": "2259240",
    "end": "2265210"
  },
  {
    "text": "Let me try something else, let's\ntry Silly of 2, I'm sort of sneaking up. ",
    "start": "2265210",
    "end": "2272810"
  },
  {
    "text": "It gets that one wrong. All right, so I know I can\ntest it on a small input.",
    "start": "2272810",
    "end": "2279990"
  },
  {
    "text": "So that's a good thing. I now have a simple test. Now in this case the code is so\nshort, and so stupid, that",
    "start": "2279990",
    "end": "2288339"
  },
  {
    "text": "you could probably look at it\nwith your eyes and just find the bug instantly. But the point of this exercise\nis not to find the bug, but to",
    "start": "2288340",
    "end": "2295870"
  },
  {
    "text": "kind of show the process. So now I wanted to go through\nthis process of binary search",
    "start": "2295870",
    "end": "2301970"
  },
  {
    "text": "to try and find the bug. So we'll start with Silly, the\ntop level program, and I'll",
    "start": "2301970",
    "end": "2311359"
  },
  {
    "text": "look for something about halfway\nthrough, maybe here.",
    "start": "2311360",
    "end": "2317920"
  },
  {
    "text": "And try and now answer the\nquestion, that I've got a lot of code and I'm going to find a\npoint halfway through it and",
    "start": "2317920",
    "end": "2329950"
  },
  {
    "text": "try and ask is the bug above\nthis, or below this. ",
    "start": "2329950",
    "end": "2336940"
  },
  {
    "text": "So I need to find some intermediate value I can check. And at this point in the program\nthe only thing I have",
    "start": "2336940",
    "end": "2343980"
  },
  {
    "text": "done is accumulate\nthe input, right? So there's nothing\nelse to ask.",
    "start": "2343980",
    "end": "2349950"
  },
  {
    "text": "So my hypothesis is that\neverything is good and that the input will be 'ab'.",
    "start": "2349950",
    "end": "2357610"
  },
  {
    "text": "So let's try it. Let's print result here every\ntime through and see if we get",
    "start": "2357610",
    "end": "2367450"
  },
  {
    "text": "what we wanted to get. ",
    "start": "2367450",
    "end": "2385410"
  },
  {
    "text": "All right, that's not\nwhat I expected. So something is wrong.",
    "start": "2385410",
    "end": "2391830"
  },
  {
    "text": "What's wrong?  Why is result always\nthe empty list?",
    "start": "2391830",
    "end": "2400189"
  },
  {
    "text": "I can out-wait you. AUDIENCE: Because whenever it\ngoes through the for loop it",
    "start": "2400189",
    "end": "2406721"
  },
  {
    "text": "keeps coming back. PROFESSOR: Right. So every time through the for\nloop, it's reinitializing--",
    "start": "2406721",
    "end": "2412020"
  },
  {
    "text": "whoa, got you. For those of you watching on TV,\nI just hit a person that",
    "start": "2412020",
    "end": "2418599"
  },
  {
    "text": "was heads down with\na piece of candy. Fortunately it was\nnot a hard candy.",
    "start": "2418600",
    "end": "2424500"
  },
  {
    "text": "All right, so you're right. Let's get that out of there. ",
    "start": "2424500",
    "end": "2432470"
  },
  {
    "text": "Put it where it belongs.  Run it again.",
    "start": "2432470",
    "end": "2438470"
  },
  {
    "start": "2438470",
    "end": "2449109"
  },
  {
    "text": "OK, are we happy with\nthat result? ",
    "start": "2449110",
    "end": "2457180"
  },
  {
    "text": "Yeah, because I've done that\nbefore the append, right? And now just to be sure, we'll\ntake this print statement out",
    "start": "2457180",
    "end": "2463900"
  },
  {
    "text": "here and let's put it here. We're now searching elsewhere. ",
    "start": "2463900",
    "end": "2480620"
  },
  {
    "text": "Well the good news is I now have\nthe right result for the",
    "start": "2480620",
    "end": "2486110"
  },
  {
    "text": "value of the variable, but the\nwrong result for the program. It's still telling me\nit's a palindrome.",
    "start": "2486110",
    "end": "2493049"
  },
  {
    "text": "So the moral here is there is\nno such thing as the bug.",
    "start": "2493050",
    "end": "2507075"
  },
  {
    "text": " Never use the definitive\narticle.",
    "start": "2507075",
    "end": "2515190"
  },
  {
    "text": "There is a bug.  There's a story that I've heard\nrelated to this, as far",
    "start": "2515190",
    "end": "2523770"
  },
  {
    "text": "as finding a bug. You can imagine that you're at\nsomeone's house for dinner, you're sitting at the dining\nroom table, you can't see the",
    "start": "2523770",
    "end": "2530380"
  },
  {
    "text": "kitchen, and suddenly you hear\nfrom the kitchen, [BAM].",
    "start": "2530380",
    "end": "2535930"
  },
  {
    "text": "What the heck's that? Your hostess walks out and\nsays, don't worry I just killed the cockroach\non the turkey.",
    "start": "2535930",
    "end": "2543870"
  },
  {
    "text": "Well, your immediate\nreaction is the cockroach on the turkey? Where there's one, there's\nlikely to be more.",
    "start": "2543870",
    "end": "2550660"
  },
  {
    "text": "Every time you found a bug-- the more bugs you find, then\nprobably the more bugs there",
    "start": "2550660",
    "end": "2555690"
  },
  {
    "text": "are still left, because\nyou've shown that you make a lot of mistakes. All right, onward we go.",
    "start": "2555690",
    "end": "2562710"
  },
  {
    "text": "So what do we do next? Well, we now know at least that\nthings look OK to this",
    "start": "2562710",
    "end": "2569010"
  },
  {
    "text": "point, which suggests that the\nproblem must come below this",
    "start": "2569010",
    "end": "2575090"
  },
  {
    "text": "in the program. Well the only thing that's going\non below this is the call to isPal.",
    "start": "2575090",
    "end": "2581770"
  },
  {
    "text": "So now we'll say OK, we've now\nisolated the bug to isPal. That's a good thing.",
    "start": "2581770",
    "end": "2588650"
  },
  {
    "text": "Let's try and ask where things\nare going on there.",
    "start": "2588650",
    "end": "2594950"
  },
  {
    "text": "So we'll take a point halfway\nthrough isPal, and we'll print",
    "start": "2594950",
    "end": "2601680"
  },
  {
    "text": "some things here. So let's print-- ",
    "start": "2601680",
    "end": "2620020"
  },
  {
    "text": "see what we have here. But before I do that, I've\ngotten really tired of typing",
    "start": "2620020",
    "end": "2626349"
  },
  {
    "text": "'a' and 'b', so I'm going to\nuse something called a test",
    "start": "2626350",
    "end": "2633600"
  },
  {
    "text": "driver, or a test harness.  And I recommend that you do this\nkind of thing whenever",
    "start": "2633600",
    "end": "2641370"
  },
  {
    "text": "you're testing a program. Write some code that has nothing\nto do with the program",
    "start": "2641370",
    "end": "2648190"
  },
  {
    "text": "itself but makes it easier to\ntest and debug the program.",
    "start": "2648190",
    "end": "2653849"
  },
  {
    "start": "2653850",
    "end": "2663290"
  },
  {
    "text": "The pretentious word for\nthis is a test harness. ",
    "start": "2663290",
    "end": "2671900"
  },
  {
    "text": "All this is code that\nhelps testing. One of the things that you see\nin industry is about half the",
    "start": "2671900",
    "end": "2681520"
  },
  {
    "text": "code that gets written is not\nintended to be delivered as part of the final product, but\nis there merely for the",
    "start": "2681520",
    "end": "2689330"
  },
  {
    "text": "purpose of testing\nand debugging. It's a big deal. So don't feel bad that you're\nwriting code that's not part",
    "start": "2689330",
    "end": "2698210"
  },
  {
    "text": "of the solution to the problem\nset that is there only to help you make your code work.",
    "start": "2698210",
    "end": "2705080"
  },
  {
    "text": "It seems like it's extra\nwork, but in fact, it will save you work.",
    "start": "2705080",
    "end": "2710640"
  },
  {
    "text": "So let's call it.",
    "start": "2710640",
    "end": "2716029"
  },
  {
    "text": "We'll call isPal. And it's going to print\nsome things that I think it should do.",
    "start": "2716030",
    "end": "2721740"
  },
  {
    "text": "In fact, we'll look at what it\ndoes first before we look at the print statements in isPal.",
    "start": "2721740",
    "end": "2728500"
  },
  {
    "text": "So for the moment, let me\njust comment these out. ",
    "start": "2728500",
    "end": "2738980"
  },
  {
    "text": "And what we see here is it\nshould print false, and it",
    "start": "2738980",
    "end": "2748260"
  },
  {
    "text": "prints true.  Well, should it print false\nthe second time?",
    "start": "2748260",
    "end": "2757520"
  },
  {
    "text": "No, right. So it should have printed\ntrue, and it did.",
    "start": "2757520",
    "end": "2763030"
  },
  {
    "text": "So this is an important\nlesson. Make sure that when you put in\nthese debugging statements,",
    "start": "2763030",
    "end": "2769560"
  },
  {
    "text": "you write down as part of the\nprint statement what you expect it to print.",
    "start": "2769560",
    "end": "2775400"
  },
  {
    "text": "So that when you look at your\noutput you can quickly scan it and see whether the program\nis behaving as",
    "start": "2775400",
    "end": "2782330"
  },
  {
    "text": "you thought it would.  So now, works once doesn't\nwork the other time.",
    "start": "2782330",
    "end": "2789785"
  },
  {
    "start": "2789785",
    "end": "2794839"
  },
  {
    "text": "So we'll go back and turn on the\nprint statements up here",
    "start": "2794840",
    "end": "2804610"
  },
  {
    "text": "and see what we get. ",
    "start": "2804610",
    "end": "2814210"
  },
  {
    "text": "So it's printed temp as\n1-2-1 and x as 1-2-1.",
    "start": "2814210",
    "end": "2819260"
  },
  {
    "text": "So kind of OK that print\nand x are the same, we expected that.",
    "start": "2819260",
    "end": "2825320"
  },
  {
    "text": "But we thought we reversed it. We've entered 1-2-1\nand it is this.",
    "start": "2825320",
    "end": "2831770"
  },
  {
    "text": "What's going on? What's wrong? Well now what we can do, is\nlet's see where it went wrong.",
    "start": "2831770",
    "end": "2839549"
  },
  {
    "text": "We'll put in another print\nstatement here, see",
    "start": "2839550",
    "end": "2845800"
  },
  {
    "text": "what value is there. ",
    "start": "2845800",
    "end": "2851180"
  },
  {
    "text": "Well it was 1-2-1 before\nreverse, and it's 1-2-1 after reverse.",
    "start": "2851180",
    "end": "2857460"
  },
  {
    "text": "How come?  Why isn't reverse\nreversing temp?",
    "start": "2857460",
    "end": "2863300"
  },
  {
    "text": " AUDIENCE: Do you need\nparenthesis after reverse? PROFESSOR: Exactly, I need\nparenthesis after reverse.",
    "start": "2863300",
    "end": "2872220"
  },
  {
    "text": " Whoa, close.",
    "start": "2872220",
    "end": "2879059"
  },
  {
    "text": "Because without the parentheses,\nall reverse is",
    "start": "2879060",
    "end": "2884360"
  },
  {
    "text": "doing is nothing. That's just the name of the\nmethod, not an invocation of",
    "start": "2884360",
    "end": "2891500"
  },
  {
    "text": "the method, right? All right, now let's run it.",
    "start": "2891500",
    "end": "2896510"
  },
  {
    "text": " Good news and bad news.",
    "start": "2896510",
    "end": "2902470"
  },
  {
    "text": " What's the good news?",
    "start": "2902470",
    "end": "2909019"
  },
  {
    "text": "It has indeed reversed 1-2\nright, to make it 2-1 but it's",
    "start": "2909020",
    "end": "2920780"
  },
  {
    "text": "also reversed x.  So naturally, since it's\nreversed x temp and x will be",
    "start": "2920780",
    "end": "2928310"
  },
  {
    "text": "the same, and I get\nthe wrong answer. What's wrong now? ",
    "start": "2928310",
    "end": "2934589"
  },
  {
    "text": "Yeah? AUDIENCE: So, I think\nyou're aliasing. PROFESSOR: I'm aliasing? AUDIENCE: And it's reversing--",
    "start": "2934590",
    "end": "2940616"
  },
  {
    "text": "PROFESSOR: Because now remember\nhow mutation works, now temp and x both point\nto the same object.",
    "start": "2940616",
    "end": "2949099"
  },
  {
    "text": "If I reverse the object, it\ndoesn't matter whether I get to it through x or I get to\nthrough temp it will still",
    "start": "2949100",
    "end": "2955730"
  },
  {
    "text": "have been reversed. So in this case, what I'd need\nto do is this, clone it.",
    "start": "2955730",
    "end": "2966190"
  },
  {
    "text": " And now when I run my\ncode, it works.",
    "start": "2966190",
    "end": "2974690"
  },
  {
    "text": "No applause? All right, a couple more things\nabout debugging next",
    "start": "2974690",
    "end": "2980600"
  },
  {
    "text": "Tuesday, and then we'll move on\nto some pretty interesting topics in the next phase\nof the course. ",
    "start": "2980600",
    "end": "2997033"
  }
]