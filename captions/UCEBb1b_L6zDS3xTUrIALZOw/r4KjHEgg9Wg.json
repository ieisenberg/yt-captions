[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6060"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation, or to\nview additional materials",
    "start": "6060",
    "end": "12700"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12700",
    "end": "26290"
  },
  {
    "text": "PROFESSOR: This\nis very exciting. In the previous\nlecture, we learned all about buffer\noverflow attacks,",
    "start": "26290",
    "end": "32599"
  },
  {
    "text": "and today we're\ngoing to continue to discuss some techniques\nto launch these attacks. So, the basic idea of all\nthese buffer overflow attacks",
    "start": "32600",
    "end": "41210"
  },
  {
    "text": "is as follows. So, first of all, they leverage\na couple different facts.",
    "start": "41210",
    "end": "46360"
  },
  {
    "start": "46360",
    "end": "54080"
  },
  {
    "text": "So, one thing that they\nleverage is that system software is often written in C.",
    "start": "54080",
    "end": "60191"
  },
  {
    "start": "60191",
    "end": "67990"
  },
  {
    "text": "And so by system\nsoftware, I mean things like databases, compilers,\nnetwork servers, things like that.",
    "start": "67990",
    "end": "75212"
  },
  {
    "text": "And you can also think of things\nlike your favorite command shell. All of those types of things\nare typically written in C. So,",
    "start": "75212",
    "end": "81302"
  },
  {
    "text": "why are these things\ntypically written in C? Well, they're written in\nC because our community, of course, is\nobsessed with speed.",
    "start": "81302",
    "end": "88085"
  },
  {
    "text": "And so C is supposed to be\nlike high-level assembly, it takes us very close to the\nhardware, and so as a result,",
    "start": "88085",
    "end": "94010"
  },
  {
    "text": "all these very mission\ncritical systems are written in this\nvery low level language. Now, the problem with\nthings being written in C",
    "start": "94010",
    "end": "102260"
  },
  {
    "text": "is that C actually exposes\nraw memory Addresses.",
    "start": "102260",
    "end": "108705"
  },
  {
    "start": "108705",
    "end": "117360"
  },
  {
    "text": "Right? And so not only does it\nexpose raw memory addresses, but it also performs no\nbounds checking when programs",
    "start": "117360",
    "end": "124750"
  },
  {
    "text": "manipulate those raw addresses. Right? And so as you can imagine,\nthis is a recipe for disaster.",
    "start": "124750",
    "end": "129820"
  },
  {
    "text": "OK? So, once again, why doesn't\nC check these bounds? Well, one reason is because\nthe hardware doesn't do that.",
    "start": "129820",
    "end": "135830"
  },
  {
    "text": "And people who\nwrite in C typically want the max amount\nof speed possible.",
    "start": "135830",
    "end": "140870"
  },
  {
    "text": "The other reason is that in\nC, as we'll discuss later, it can actually be very\ndifficult to determine the semantics of what it\nmeans to have a pointer that's",
    "start": "140870",
    "end": "148050"
  },
  {
    "text": "actually in bounds. So, in some cases, it would\nbe very difficult for the C runtime to\nautomatically do that.",
    "start": "148050",
    "end": "153490"
  },
  {
    "text": "Now we'll discuss\nsome techniques which will actually\ntry to do that type of automatic inference. But as we'll see, none\nof these techniques",
    "start": "153490",
    "end": "159700"
  },
  {
    "text": "are fully bulletproof. And so these attacks\nalso leverage knowledge",
    "start": "159700",
    "end": "168130"
  },
  {
    "text": "of the x86 architecture. ",
    "start": "168130",
    "end": "176883"
  },
  {
    "text": "And by knowledge of\nthat architecture I mean things like what's the\ndirection that the stack grows, right?",
    "start": "176884",
    "end": "182260"
  },
  {
    "text": "What are the calling\nconventions for functions? When you invoke a C\nfunction, what is the stack going to look like?",
    "start": "182260",
    "end": "187407"
  },
  {
    "text": "And when you allocate\nan object on the heap, what are those chief allocation\nstructures going to look like? And so let's look\nat a simple example.",
    "start": "187407",
    "end": "195040"
  },
  {
    "text": "It's very similar to\nsomething that you saw in the last lecture.",
    "start": "195040",
    "end": "201250"
  },
  {
    "text": "So, we've got you're standard\nread request up here. ",
    "start": "201250",
    "end": "208610"
  },
  {
    "text": "And then you've got a buffer. That's here. ",
    "start": "208610",
    "end": "214980"
  },
  {
    "text": "And by now you've probably\ntrained your lizard brain instincts-- whenever you\nsee a buffer you're probably filled with fear-- that\nis the right attitude.",
    "start": "214980",
    "end": "221506"
  },
  {
    "text": "And so we've got\nthe buffer up here, and then we've got\nthe canonical int i.",
    "start": "221506",
    "end": "228000"
  },
  {
    "text": "And then we've got the\ninfamous \"gets\" command. ",
    "start": "228000",
    "end": "236780"
  },
  {
    "text": "And then you've got\nsome other stuff here. Right? So as we discussed\nin lecture last week,",
    "start": "236780",
    "end": "241996"
  },
  {
    "text": "this is problematic, right? Because this gets operation\nhere does not actually check the bounds on the buffer. So, what can happen is that\nif the user actually supplies",
    "start": "241996",
    "end": "251680"
  },
  {
    "text": "the buffer-- and actually put\nthat guy up here, for example--",
    "start": "251680",
    "end": "257000"
  },
  {
    "text": "if that buffer comes\nin from the user and we use this\nunsafe function here, we can actually\noverflow this buffer.",
    "start": "257000",
    "end": "263910"
  },
  {
    "text": "We can actually rewrite\nstuff that's on the stack. So, just a reminder of\nwhat that stuff looks",
    "start": "263910",
    "end": "269159"
  },
  {
    "text": "like-- let's look at a\nstack diagram here-- so",
    "start": "269160",
    "end": "276960"
  },
  {
    "text": "let's say here we've got I.\nLet's say here we've got a buf",
    "start": "276960",
    "end": "295680"
  },
  {
    "text": "Right? So, we've got the first\naddress of buffer here. We've got the last one up here. I apologize for my\nhandwriting, I'm",
    "start": "295680",
    "end": "301320"
  },
  {
    "text": "used to writing on\nthe marker board. You should pray for me. So, anyways, then up here,\nwe've got the saved value",
    "start": "301320",
    "end": "311235"
  },
  {
    "text": "of the break pointer. ",
    "start": "311235",
    "end": "318120"
  },
  {
    "text": "We've got the return address\nfor the function there.",
    "start": "318120",
    "end": "326770"
  },
  {
    "text": "And then we've got some other\nstuff from the previous frame.",
    "start": "326770",
    "end": "332089"
  },
  {
    "text": " So, don't forget, we've\ngot the stack pointer,",
    "start": "332089",
    "end": "341180"
  },
  {
    "text": "which goes there.  And then we've got the new\nbreak pointer, which goes here.",
    "start": "341180",
    "end": "352540"
  },
  {
    "start": "352540",
    "end": "362960"
  },
  {
    "text": "The entry stack\npointer goes there, and then somewhere\nup here, we've got the entry break point.",
    "start": "362960",
    "end": "369216"
  },
  {
    "start": "369216",
    "end": "374430"
  },
  {
    "text": "Right? So, just as a reminder, the way\nthat the Stack Overflow works is that basically,\nit goes this way.",
    "start": "374430",
    "end": "382031"
  },
  {
    "text": "Right? So, when the gets\noperation is called, we start writing bytes into\nbuf, and eventually it's",
    "start": "382031",
    "end": "387370"
  },
  {
    "text": "going to start overwriting these\nthings that are on the stack. And so this is\nbasically-- should all",
    "start": "387370",
    "end": "393145"
  },
  {
    "text": "look pretty familiar to you. So. What does the attacker do\nto take advantage of that?",
    "start": "393145",
    "end": "398830"
  },
  {
    "text": "Basically supplies\nthat long input. And so the key idea here is that\nthis can be attacker-supplied.",
    "start": "398830",
    "end": "405452"
  },
  {
    "text": "And so, if this return address\nis attacker-supplied, then basically the\nattacker can determine",
    "start": "405452",
    "end": "410590"
  },
  {
    "text": "where this function's\ngoing to jump to after [INAUDIBLE] execution. So, what can the attacker\ndo once it's actually",
    "start": "410590",
    "end": "417410"
  },
  {
    "text": "been able to hijack\nthat return address, and jump wherever it wants. Well, basically\nthe attacker is now",
    "start": "417410",
    "end": "422635"
  },
  {
    "text": "running code with the\nprivileges of the process that it's just\nhijacked, for example. So, if that process was\na high priority process,",
    "start": "422635",
    "end": "430438"
  },
  {
    "text": "let's say it was running\nroot, or admin, whatever they call the super-user of\nyour favorite operating system, then now, that program, which\nis controlled by the attacker,",
    "start": "430438",
    "end": "438419"
  },
  {
    "text": "can do whatever it wants\nusing the authority of that high-priority program.",
    "start": "438420",
    "end": "444110"
  },
  {
    "text": "So, it can do things, like\nit could maybe read files, it can send spam, let's say if\nyou corrupted a mail server.",
    "start": "444110",
    "end": "449490"
  },
  {
    "text": "It can even do things like\nactually defeat firewalls, right, because the\nidea of a firewall",
    "start": "449490",
    "end": "455250"
  },
  {
    "text": "is that there's going\nto be this distinction between good machines that\nare behind the firewall and bad machines that are\noutside of the firewall.",
    "start": "455250",
    "end": "460880"
  },
  {
    "text": "So, typically machines are\ninside of the firewall, they have a lot of\ntrust with each other. But if you can\nsubvert a machine that",
    "start": "460880",
    "end": "466965"
  },
  {
    "text": "is actually inside the\nfirewall, right, that's great. Because now you can just sort of\nskip past a lot of those checks",
    "start": "466965",
    "end": "472879"
  },
  {
    "text": "that those machines don't have\nbecause they think that you're a trusted individual. So, one thing you\nmight be thinking,",
    "start": "472880",
    "end": "479239"
  },
  {
    "text": "or I remember I was thinking\nthis when I was a student, was, \"OK, fine,\nso I've showed you how to do this buffer\noverflow, but why",
    "start": "479239",
    "end": "485100"
  },
  {
    "text": "didn't the OS stop this? Right? Isn't the OS supposed\nto be that thing that's sort of sitting around like\nGuardians of the Galaxy",
    "start": "485100",
    "end": "491488"
  },
  {
    "text": "and defending all this kind\nof evil stuff from happening?\" The thing to note is that the\nOS actually isn't watching you",
    "start": "491489",
    "end": "498310"
  },
  {
    "text": "all the time. Right? The hardware is\nwatching all the time. It's the thing that's actually\nfetching instructions,",
    "start": "498310",
    "end": "504025"
  },
  {
    "text": "and decoding them, and\ndoing things like that. But to a first approximation,\nwhat does the OS do?",
    "start": "504025",
    "end": "509430"
  },
  {
    "text": "It basically sets up\nsome page table stuff, and then it basically\nlets you, the application, run, and if you ask the\noperating system for services--",
    "start": "509430",
    "end": "516679"
  },
  {
    "text": "so for example, you want\nto send a network packet, or you want to do some\nIPC, or things like that, then you'll invoke\na system call,",
    "start": "516679",
    "end": "523360"
  },
  {
    "text": "and you'll actually\ntrap into OS. But other than that,\nthe operating system is not looking at each\nand every instruction",
    "start": "523360",
    "end": "529780"
  },
  {
    "text": "that your application\nis executing. So, in other words, when\nthis buffer overflowed,",
    "start": "529780",
    "end": "536070"
  },
  {
    "text": "it's not like the\noperating system was looking at each of these\nmemory axises for signs that [INAUDIBLE]. Right?",
    "start": "536070",
    "end": "541230"
  },
  {
    "text": "All of this address\nspace belongs to you, this [INAUDIBLE]\nprocess right, so you get to do with it what\nyou want to do with it, right?",
    "start": "541230",
    "end": "546430"
  },
  {
    "text": "Or at least this is the whole\nC attitude towards life, right? Life fast, die young. So. That's why the operating system\ncan't help you right there.",
    "start": "546430",
    "end": "554089"
  },
  {
    "text": "So, later in the lecture,\nwe will discuss some things that the operating system can\ndo with respect to the hardware",
    "start": "554090",
    "end": "561000"
  },
  {
    "text": "so that it can help protect\nagainst these types of attacks. Once again, it's actually\njust the hardware that's interposing on every\nlittle thing that you do.",
    "start": "561000",
    "end": "567980"
  },
  {
    "text": "So, you can actually\ntake advantage of some of that\nstuff, for example, using special types of\n[INAUDIBLE] protections and things like that, that we'll\ndiscuss a little bit later.",
    "start": "567980",
    "end": "574229"
  },
  {
    "text": " That's basically\nan overview of what the buffer overflow looks like.",
    "start": "574229",
    "end": "579500"
  },
  {
    "text": "So, how are we gonna\nfix these things? So, one fix for\navoiding buffer overflow",
    "start": "579500",
    "end": "589010"
  },
  {
    "text": "is to simply avoid\nbugs in your C code.",
    "start": "589010",
    "end": "594180"
  },
  {
    "start": "594180",
    "end": "599620"
  },
  {
    "text": "This has the nice advantage of\nbeing correct by construction, right. If you don't have any\nbugs in your program, ipso facto the attacker cannot\ntake advantage of any bugs.",
    "start": "599620",
    "end": "606949"
  },
  {
    "text": "That's on the\nprofessor, I get paid to think about something\ndeeply like that. Now, this of course, is\neasier said than done.",
    "start": "606950",
    "end": "613180"
  },
  {
    "text": "Right? There's a couple of very\nstraightforward things that programmers can do to\npractice good security hygiene. So, for example, functions\nlike this gets function, right?",
    "start": "613180",
    "end": "621300"
  },
  {
    "text": "These are kind of\nlike go-tos, these are now known to be bad ideas. Right? So, when you compile your\ncode, and you include functions",
    "start": "621300",
    "end": "627350"
  },
  {
    "text": "like this-- if you're using\na modern compiler, GCC, Visual Studio, whatever, it will\nactually complain about that.",
    "start": "627350",
    "end": "633050"
  },
  {
    "text": "It'll say, hey, you're one\nof these unsafe functions. Consider using\n[? FGADS ?], or using a version of [INAUDIBLE]\nthat actually",
    "start": "633050",
    "end": "639590"
  },
  {
    "text": "can track the bounds of things. So, that's one simple thing\nthat programmers can do. But note that a\nlot of applications",
    "start": "639590",
    "end": "645640"
  },
  {
    "text": "actually manipulate\nbuffers without necessarily calling one of these functions. Right? This is very common in network\nservers, things like that.",
    "start": "645640",
    "end": "652540"
  },
  {
    "text": "They'll define their own\ncustom parsing routines, then make sure that\nthings are extracted from the buffers in\nthe way that they want. So, just restricting yourself\nto these types of things",
    "start": "652540",
    "end": "659480"
  },
  {
    "text": "won't solve the\nproblem completely. So, another thing that makes\nthis approach difficult",
    "start": "659480",
    "end": "667339"
  },
  {
    "text": "is that it's not always obvious\nwhat is a bug in a C program. So, if you've ever worked on a\nvery large scale system that's",
    "start": "667340",
    "end": "674655"
  },
  {
    "text": "been written in C, you'll\nknow that it can be tricky if you've got some function\ndefinition that takes then",
    "start": "674655",
    "end": "680060"
  },
  {
    "text": "18 void star pointers. I mean, only Zeus knows what\nall those things mean, right? And so it's much more\ndifficult in a language like C,",
    "start": "680060",
    "end": "687490"
  },
  {
    "text": "that has weak typing\nand things like that, to actually understand\nas a programmer what it means to\nhave a bug, and what",
    "start": "687490",
    "end": "693006"
  },
  {
    "text": "it means to not have a bug. OK? So, in general, one\nof the main themes that you'll see in this\nclass is that C is probably",
    "start": "693006",
    "end": "699920"
  },
  {
    "text": "the spawn of the devil, right? And we use it\nbecause, once again, we typically want to\nbe to be fast, right?",
    "start": "699920",
    "end": "706630"
  },
  {
    "text": "But as hardware gets\nfaster and as we get more and better languages to\nwrite large-scale systems code,",
    "start": "706630",
    "end": "711779"
  },
  {
    "text": "we'll see that maybe\nit doesn't always make sense to write\nyour stuff in C. Even if you think it has to be fast.",
    "start": "711780",
    "end": "718300"
  },
  {
    "text": "So, we'll discuss some of\nthat later and later lectures. So, that's one\napproach, avoiding bugs",
    "start": "718300",
    "end": "723549"
  },
  {
    "text": "in the first place. So, another approach--\nis to build tools that",
    "start": "723549",
    "end": "735170"
  },
  {
    "text": "allow programmers to find bugs. ",
    "start": "735170",
    "end": "746670"
  },
  {
    "text": "And so an example\nof this is something that's called static analysis. Now we'll talk a little bit\nmore about static analysis",
    "start": "746670",
    "end": "753175"
  },
  {
    "text": "in later lectures,\nbut suffice it to say that static analysis is\na way of analyzing the source",
    "start": "753175",
    "end": "758399"
  },
  {
    "text": "code of your program\nbefore it even runs and looking for\npotential problems. So, imagine that you have\na function like this.",
    "start": "758400",
    "end": "766550"
  },
  {
    "text": "So, the [INAUDIBLE]\nfoo function, it takes in a pointer.",
    "start": "766550",
    "end": "772639"
  },
  {
    "text": " Let's say it declares\nan integer offset value.",
    "start": "772640",
    "end": "779570"
  },
  {
    "text": " It declares another\npointer and adds the offset",
    "start": "779570",
    "end": "790110"
  },
  {
    "text": "to that pointer. Now, even just at this\nmoment in the code, right, static\nanalysis can tell you",
    "start": "790110",
    "end": "795650"
  },
  {
    "text": "that this offset variable\nis un-initialized. Right? So, essentially you can\ndo things like saying,",
    "start": "795650",
    "end": "800700"
  },
  {
    "text": "is there any way,\nis there any control floating through this program\nby which offset could have been",
    "start": "800700",
    "end": "806150"
  },
  {
    "text": "initialized before\nit was actually used this in this calculation here. Now, in this example it is very\nsimple to see the answer is no.",
    "start": "806150",
    "end": "812540"
  },
  {
    "text": "Right? You can imagine that if there\nwere more branches, or things like this, it would be\nmore difficult to tell. But one thing that a static\nanalysis tool can tell you,",
    "start": "812540",
    "end": "819130"
  },
  {
    "text": "and in fact, one thing that\n[? popular ?] compilers will tell you, is you'll compile\nthis, and it'll say, hey buddy, this has not been initialized.",
    "start": "819130",
    "end": "825190"
  },
  {
    "text": "Are you sure, is this\nwhat you want to do? So, that's one very simple\nexample of static analysis. Another example of what you can\ndo is, let's say after this,",
    "start": "825190",
    "end": "833330"
  },
  {
    "text": "we have a branch condition here. ",
    "start": "833330",
    "end": "842260"
  },
  {
    "text": "Right? So, you say, if the offset\nis greater than eight, then we'll call some function\nbar, and passing the offset.",
    "start": "842260",
    "end": "852470"
  },
  {
    "text": "Now, one thing you\ncan note about this is that this branch condition\nhere actually tells us",
    "start": "852470",
    "end": "857620"
  },
  {
    "text": "something about what\nthe value of offset is. Right? Ignoring the fact that\nit wasn't initialized ,",
    "start": "857620",
    "end": "862646"
  },
  {
    "text": "we do know that\nonce we get here, we know the offset actually\nhas to be greater than eight. So, in some cases,\nwhat we can do",
    "start": "862646",
    "end": "868430"
  },
  {
    "text": "is actually propagate that\nconstraint, that notion that the offset must\nbe greater than eight,",
    "start": "868430",
    "end": "873830"
  },
  {
    "text": "into our analysis of bar. Right? So, when we start\nstatically analyzing bar, we know that offset can\nonly take certain values.",
    "start": "873830",
    "end": "880260"
  },
  {
    "text": "So, once again, this is a\nvery high-level introduction to static analysis,\nand we'll discuss it more in later lectures. But this is a basic\nintuition of how",
    "start": "880260",
    "end": "886860"
  },
  {
    "text": "we might be able to\ndetect some types of bugs without even\nexecuting your code. So, does that all makes sense?",
    "start": "886860",
    "end": "892430"
  },
  {
    "text": " So, another thing you\ncan think about doing too",
    "start": "892430",
    "end": "897560"
  },
  {
    "text": "is what they call\nprogram fuzzing. So, the idea behind\nprogram fuzzing",
    "start": "897560",
    "end": "904380"
  },
  {
    "text": "is that essentially you take all\nof the functions in your code, and then essentially throw\nrandom values for input",
    "start": "904380",
    "end": "910629"
  },
  {
    "text": "to those functions. And so the idea is that\nyou want to have high code coverage for all of your tests.",
    "start": "910630",
    "end": "917450"
  },
  {
    "text": "So, if you go out\nin the real world, typically when you\ncheck in unit test, you can't just do things like,\nI tried values two, four, eight,",
    "start": "917450",
    "end": "924485"
  },
  {
    "text": "and 15, because 15\nis an odd number, so I probably tested\nall the branches right. What you actually\nhave to do is you have to look at things like,\nlike I said how many branches",
    "start": "924486",
    "end": "931720"
  },
  {
    "text": "in the program overall were\nactually touched by your test code, right? Because that's typically\nwhere the bugs hide.",
    "start": "931720",
    "end": "938000"
  },
  {
    "text": "The programmers don't think\nabout the corner cases, and so as a result, they do\nhave some unit tests that pass. They even have bigger\ntests that pass.",
    "start": "938000",
    "end": "944310"
  },
  {
    "text": "But they're not actually\npinning all the corner cases in the program. So, static analysis can actually\nhelp with this fuzzing here.",
    "start": "944310",
    "end": "950200"
  },
  {
    "text": "Once again, using things like\nthis notion of constraint. So, for example, in\nthis program here, we have this branch condition\nhere that specified the offset",
    "start": "950200",
    "end": "958260"
  },
  {
    "text": "being greater than eight. So, we can know what that\noffset is statically. So, we can make sure that if\nwe're automatically generating",
    "start": "958260",
    "end": "963860"
  },
  {
    "text": "fuzzed inputs, we can ensure\nthat one of those inputs hopefully will ensure\nthat, somehow, offset is",
    "start": "963860",
    "end": "970110"
  },
  {
    "text": "less than eight, one will ensure\nthat offset's equal to eight, one will ensure that\nit's greater than eight.",
    "start": "970110",
    "end": "975290"
  },
  {
    "text": "So, does that all make sense? Cool. So, that's the basic idea behind\nthe notion of building tools",
    "start": "975290",
    "end": "982280"
  },
  {
    "text": "to help programmers find bugs. So, the nice thing is that\neven partial analysis can",
    "start": "982280",
    "end": "989029"
  },
  {
    "text": "be very, very useful,\nparticularly when you're dealing with C.\nA lot of these tools that we'll discuss, to prevent\nagainst things like buffer",
    "start": "989030",
    "end": "995350"
  },
  {
    "text": "overflow or\ninitialized variables, they can't catch\nall the problems. Right? But they can actually give us\nforward progress towards making",
    "start": "995350",
    "end": "1002040"
  },
  {
    "text": "these programs more secure. Now, of course, the\ndisadvantage of these things is that they're not complete.",
    "start": "1002040",
    "end": "1008510"
  },
  {
    "text": "Forward progress is\nnot complete progress. And so it's still\na very active area of research of how you defend\nagainst security exploits in C",
    "start": "1008510",
    "end": "1016147"
  },
  {
    "text": "and just in programs in general.  So, those were two approaches\nto deal with defending",
    "start": "1016147",
    "end": "1023649"
  },
  {
    "text": "against buffer overflow. There's actually some\nother approaches. So, a third approach you\nmight think about using",
    "start": "1023649",
    "end": "1033410"
  },
  {
    "text": "is the use [INAUDIBLE]. ",
    "start": "1033410",
    "end": "1041672"
  },
  {
    "text": "And so examples of these are\nthings like Python, Java, C#--",
    "start": "1041672",
    "end": "1056524"
  },
  {
    "text": "I'm not going to put up Pearl\nthere because people who use Pearl are bad people. So you can use a memory-safe\nlanguage like that.",
    "start": "1056524",
    "end": "1063700"
  },
  {
    "text": "And this is to a certain extent\nseems like the most obvious thing that you could do. I just told you over\nthere that basically C",
    "start": "1063700",
    "end": "1071060"
  },
  {
    "text": "is high-level assembly code,\nand it exposes raw pointers and does all these things\nthat you don't want it to do,",
    "start": "1071060",
    "end": "1076690"
  },
  {
    "text": "and it doesn't do\nthings you do want it to do, like [INAUDIBLE]. So, why not just use one of\nthese high level languages? Well, there's a couple\nreasons for that.",
    "start": "1076690",
    "end": "1083340"
  },
  {
    "text": "So, first of all, there's\nactually a lot of legacy code",
    "start": "1083340",
    "end": "1089890"
  },
  {
    "text": "that's out there.  Right?",
    "start": "1089890",
    "end": "1095080"
  },
  {
    "text": "So, it's all fine and dandy\nif you want go out and start your new project and\nyou want to write it in one of these\nreally safe languages.",
    "start": "1095080",
    "end": "1100488"
  },
  {
    "text": "But what if you've been\ngiven this big binary or this big source code\ndistribution that's been written in C, it's been\nmaintained for 10, 15 years,",
    "start": "1100488",
    "end": "1107415"
  },
  {
    "text": "it's been this\ngenerational project, I mean our children's children\nwill be working on it. You can't just say, I'm just\ngoing to write everything in C#",
    "start": "1107415",
    "end": "1113100"
  },
  {
    "text": "and change the world. Right? And this isn't just a\nproblem in C, for example. There's actually\nsystems that you",
    "start": "1113100",
    "end": "1118662"
  },
  {
    "text": "use that you should be\nafraid, because they actually use Fortran and COBOL code. What?",
    "start": "1118662",
    "end": "1124169"
  },
  {
    "text": "That's stuff from the Civil War. So, why does that happen? Once again, the\nreason why it happens",
    "start": "1124170",
    "end": "1129710"
  },
  {
    "text": "is because as engineers,\nwe kind of want to think, oh, we can just build everything\nourselves, it'll be awesome, it'll be just the\nway that I want it,",
    "start": "1129710",
    "end": "1135714"
  },
  {
    "text": "I'll call my variables\nthe things that I want. When in world, that\ndoesn't happen. Right? You show up on your job, and\nyou have this thing that exists,",
    "start": "1135714",
    "end": "1142195"
  },
  {
    "text": "and you look at the code\nbase, and you say, well, why doesn't it do this? And then you say, listen.",
    "start": "1142195",
    "end": "1147280"
  },
  {
    "text": "We'll deal with that in V2. But for now, you\ngot to make things work because the customers\nare taking away their money.",
    "start": "1147280",
    "end": "1153266"
  },
  {
    "text": "So, there's basically this\nhuge issue of legacy code here, and how do we deal with it? And as you'll see the with\nthe baggy bounds system,",
    "start": "1153266",
    "end": "1160382"
  },
  {
    "text": "One of the advantages of\nit is that it actually inter-operates quite well\nwith this legacy code.",
    "start": "1160382",
    "end": "1165484"
  },
  {
    "text": "So, anyway, this is one\nreason why you can't just necessarily make all these\nbuffer overflow problems go away by using one of these\nmemory-safe languages.",
    "start": "1165484",
    "end": "1173360"
  },
  {
    "text": "So, another challenges\nis that what if you need",
    "start": "1173360",
    "end": "1179420"
  },
  {
    "text": "low-level access to hardware? ",
    "start": "1179420",
    "end": "1188831"
  },
  {
    "text": "This might happen if you're\nwriting something like a device driver or something like that. So, in that case,\nyou really do need",
    "start": "1188832",
    "end": "1196420"
  },
  {
    "text": "that the benefits\nthat C gives you in terms of being\nable to look at registers and\nactually understand a little of [INAUDIBLE]\nand things like that.",
    "start": "1196420",
    "end": "1204350"
  },
  {
    "text": "There's another thing too,\nwhich people always bring up and which I've alluded to\nbefore, but it's performance.",
    "start": "1204350",
    "end": "1212390"
  },
  {
    "text": "Right? So, if you care\nabout performance, typically the thing\nthat you're told is you've got to\nwrite in C, otherwise",
    "start": "1212390",
    "end": "1217644"
  },
  {
    "text": "you're just going to\nbe so slow, you're going to get laughed out of\ncode academy or whatever. Now, this is increasingly\nless of an issue.",
    "start": "1217644",
    "end": "1224929"
  },
  {
    "text": "Like the perf stuff. Because people have\nactually gotten very good with doing things like\nmaking better compilers",
    "start": "1224930",
    "end": "1230389"
  },
  {
    "text": "that have all kinds of\npowerful optimizations. And also, there are\nthese things called Gits which actually\nreally reduce",
    "start": "1230390",
    "end": "1236440"
  },
  {
    "text": "the cost of using these\nmemory-safe languages. So, have you guys\nheard of Gits before? So, I'll give you a very brief\nintroduction to what it is.",
    "start": "1236440",
    "end": "1243526"
  },
  {
    "text": "The idea is that, think\nabout a language like Java, or JavaScript. It's very high level,\nit's dynamically tight,",
    "start": "1243526",
    "end": "1250360"
  },
  {
    "text": "right, it has automatic heat\nmanagement, things like that. So, typically, when these\nlanguages first came out,",
    "start": "1250360",
    "end": "1258270"
  },
  {
    "text": "they were always interpreted. Right? And by interpreted I\nmean they didn't actually execute raw x86 instructions.",
    "start": "1258270",
    "end": "1264310"
  },
  {
    "text": "Instead, these languages\nwere compiled down to some type of\nintermediate form. You may have heard of things\nlike the JVM, the Java Virtual",
    "start": "1264310",
    "end": "1271370"
  },
  {
    "text": "Machine byte code,\nthings like that. Right? You basically had a\nprogram that sat in a loop and took these byte\ncodes, and basically",
    "start": "1271370",
    "end": "1278450"
  },
  {
    "text": "executed the high\nlevel instruction that was encoded in that byte code. So, for example, some\nof the JVM byte codes",
    "start": "1278450",
    "end": "1284971"
  },
  {
    "text": "dealt with things like\npushing and popping things up on the stack. So, you have a program that\nwould go through a loop,",
    "start": "1284971",
    "end": "1291149"
  },
  {
    "text": "operate that stack, and\nsimulate those operations. OK. So, that all seemed\nfine and dandy, but once",
    "start": "1291150",
    "end": "1296786"
  },
  {
    "text": "again, all of the speed\nfreaks out there were like, what about the perf? This too slow. You've got sort of\nthat interpreter",
    "start": "1296786",
    "end": "1302490"
  },
  {
    "text": "sitting in that\nloop, and getting in the way of our bare\nmetal performance. So, what people started to do is\nactually take these high level",
    "start": "1302490",
    "end": "1310120"
  },
  {
    "text": "interpreter languages\nand dynamically generate X86 code\nfor them on the fly.",
    "start": "1310120",
    "end": "1315140"
  },
  {
    "text": "Right? So, in terms of just in\ntime compilation, that means I take your\nsnippet of JavaScript,",
    "start": "1315140",
    "end": "1320910"
  },
  {
    "text": "I take your snippet\nof Java whatever, and I actually spend a\nlittle bit of time upfront",
    "start": "1320910",
    "end": "1326269"
  },
  {
    "text": "to create actual raw\nmachine instructions. Raw x86 that will run\ndirectly on the bare metal.",
    "start": "1326270",
    "end": "1332020"
  },
  {
    "text": "So, I take that initial\nperformance hit for the Git compilation, but then after\nthat, my program actually",
    "start": "1332020",
    "end": "1337570"
  },
  {
    "text": "does run on the raw hard drive. Right? So, things like\nthe perf argument are not necessarily\nas compelling",
    "start": "1337570",
    "end": "1343842"
  },
  {
    "text": "as they used to be,\nbecause of stuff like this. There's also some crazy\nstuff out there, like ASN.js.",
    "start": "1343842",
    "end": "1349620"
  },
  {
    "text": "So, we can talk more\nabout this offline if you actually are\na JavaScript packer. But there are actually\nsome neat tricks",
    "start": "1349620",
    "end": "1354674"
  },
  {
    "text": "that you can do,\nlike compiling down JavaScript to very restricted\nsubset of the language that",
    "start": "1354674",
    "end": "1359750"
  },
  {
    "text": "only operates on arrays. Right, so what this allows\nyou to do is actually get rid of a lot of the dynamic\ntyping overhead in standard",
    "start": "1359750",
    "end": "1366950"
  },
  {
    "text": "JavaScript, and you can actually\nget JavaScript code now to run within 2x of raw C\nor C++ performance.",
    "start": "1366950",
    "end": "1374220"
  },
  {
    "text": "2x might sound like\na lot, but it used to be things like 10x or 20z. So, we're actually making a\nlot of progress on that front.",
    "start": "1374220",
    "end": "1381145"
  },
  {
    "text": " And so the other thing to\nkeep in mind with performance,",
    "start": "1381145",
    "end": "1386336"
  },
  {
    "text": "too, is that a lot of times, you\ndon't need performance as much you might think that you do. Right? So, think about it like this.",
    "start": "1386336",
    "end": "1392340"
  },
  {
    "text": "Let's say that your program\nis actually IO bound. So, it's not CPU bound. In other words, let's\nsay that your program",
    "start": "1392340",
    "end": "1398299"
  },
  {
    "text": "spends most of its time\nwaiting for network input, waiting for disk input,\nwaiting for user input, things like that.",
    "start": "1398300",
    "end": "1404550"
  },
  {
    "text": "In those types of cases,\nyou don't actually need to have blazing\nfast raw compute speed. Right?",
    "start": "1404550",
    "end": "1409990"
  },
  {
    "text": "Because your program\nactually isn't spending a lot of time\ndoing that kind of stuff. So, once again, this\nperf argument here,",
    "start": "1409990",
    "end": "1415840"
  },
  {
    "text": "you've got to take this\nstuff with a grain of salt. And I actually\nsee a lot students who struggle with this. So, for example,\nI'll ask someone",
    "start": "1415840",
    "end": "1421701"
  },
  {
    "text": "to go out and write me\na very simple program to parse a text file. So, they spend all this time\ntrying to get this to work in C",
    "start": "1421702",
    "end": "1427360"
  },
  {
    "text": "or C++ and it's super fast and\nuses the templates and all that kind of stuff. But it's like a one\nline solution in Python.",
    "start": "1427360",
    "end": "1433679"
  },
  {
    "text": "And it essentially\nruns just as fast. And you could develop\nit much, much easier. So, you just have to\ntake these perf arguments",
    "start": "1433680",
    "end": "1439300"
  },
  {
    "text": "with a grain of salt. So, anyway, we've discussed\nthe three ways you can possibly",
    "start": "1439300",
    "end": "1446290"
  },
  {
    "text": "avoid buffer overflow. So, just avoid bugs\nin the first place. LOL, that's difficult to do. Approach two, you can\nbuild tools to help",
    "start": "1446290",
    "end": "1453730"
  },
  {
    "text": "you discover those bugs. Then approach three\nis, in a certain sense, you can push those\ntools into the runtime.",
    "start": "1453730",
    "end": "1459205"
  },
  {
    "text": "You can actually hopefully\nrely on some of their language runtime features to prevent\nyou from seeing raw memory",
    "start": "1459205",
    "end": "1464741"
  },
  {
    "text": "addresses. And you can do things\nlike balance checking, and so on and so forth. Once again, as we\ndiscussed before,",
    "start": "1464741",
    "end": "1472320"
  },
  {
    "text": "there's a lot of legacy\nC and C++ code out there. So, it's difficult to apply\nsome of these techniques,",
    "start": "1472320",
    "end": "1478437"
  },
  {
    "text": "particularly number\ntwo and number three, if you've got to deal\nwith that legacy code. So, how can we do buffer\noverflow mitigation",
    "start": "1478437",
    "end": "1487000"
  },
  {
    "text": "despite all these challenges? Besides just, you know, dropping\nout of computer science classes",
    "start": "1487000",
    "end": "1493090"
  },
  {
    "text": "and becoming a painter,\nor something like that. So, what actually is going\non in a buffer overflow?",
    "start": "1493090",
    "end": "1499259"
  },
  {
    "text": "So, in a buffer overflow the\nattacker exploits two things.",
    "start": "1499260",
    "end": "1504812"
  },
  {
    "start": "1504812",
    "end": "1511020"
  },
  {
    "text": "So, the first thing that the\nattack is going to exploit is gaining control over\nthe instruction pointer.",
    "start": "1511020",
    "end": "1523059"
  },
  {
    "start": "1523060",
    "end": "1529910"
  },
  {
    "text": "Right? And by this, I mean that\nsomehow, the attacker figures out\nsomeplace in the code",
    "start": "1529910",
    "end": "1536710"
  },
  {
    "text": "that it can make the program\njump to against the program's will. Now, this is necessary but\ninsufficient for an attack",
    "start": "1536710",
    "end": "1543880"
  },
  {
    "text": "typically to happen. Because the other thing that\nthe attacker needs to do",
    "start": "1543880",
    "end": "1548990"
  },
  {
    "text": "is basically make that pointer\npoint to malicious code.",
    "start": "1548990",
    "end": "1557729"
  },
  {
    "start": "1557729",
    "end": "1568440"
  },
  {
    "text": "Right? So, how are we going to\nbasically make the hijacked IP, instruction pointer,\npoint to something",
    "start": "1568440",
    "end": "1574930"
  },
  {
    "text": "that does something\nuseful for the attacker. So, what's interesting\nis that in many cases,",
    "start": "1574930",
    "end": "1580730"
  },
  {
    "text": "it's often fairly\nstraightforward for the attacker to put some\ninteresting code in a memory.",
    "start": "1580730",
    "end": "1586659"
  },
  {
    "text": "So we looked at some of\nthose shell code attacks in the last lecture, where you\ncan actually embed that attack code in a string.",
    "start": "1586660",
    "end": "1592530"
  },
  {
    "text": "As we'll discuss a\nlittle bit today and more in the next lecture,\nyou can actually take advantage of some\nof the pre-existing code",
    "start": "1592530",
    "end": "1598700"
  },
  {
    "text": "the application has and\njump to in an unexpected way to make some evil things happen.",
    "start": "1598700",
    "end": "1603850"
  },
  {
    "text": "So, typically, figuring out what\ncode the attacker wants to run, maybe that's not as\nchallenging as actually",
    "start": "1603850",
    "end": "1609910"
  },
  {
    "text": "being able to force\nthe program to jump to that location in memory.",
    "start": "1609910",
    "end": "1616691"
  },
  {
    "text": "And the reason why\nthat's tricky is because, basically, the\nattacker has to know in some way",
    "start": "1616692",
    "end": "1623210"
  },
  {
    "text": "where it should jump to. Right? So, as we'll see in a\nsecond, and as you actually saw in the last lecture, a lot\nof these shell code attacks",
    "start": "1623210",
    "end": "1629691"
  },
  {
    "text": "actually take advantage of these\nhard-coded locations in memory where the instruction\npointer needs to get sent to.",
    "start": "1629691",
    "end": "1636004"
  },
  {
    "text": "So, some of the defenses\nthat we're about to look at can actually randomize things\nin terms of code layout, heap",
    "start": "1636004",
    "end": "1641960"
  },
  {
    "text": "layout, and make it a little\ndifficult for the attacker to figure out where\nthings are located.",
    "start": "1641960",
    "end": "1647590"
  },
  {
    "text": "So, let's look at one simple\nmitigation approach first.",
    "start": "1647590",
    "end": "1653820"
  },
  {
    "text": "So, this is the idea\nof stack canaries. ",
    "start": "1653820",
    "end": "1662920"
  },
  {
    "text": "So, the basic idea\nbehind stack canaries is that, during a\nbuffer overflow,",
    "start": "1662920",
    "end": "1668400"
  },
  {
    "text": "it's actually OK if we allow\nthe attacker to overwrite the return address\nif we can actually",
    "start": "1668400",
    "end": "1676080"
  },
  {
    "text": "catch that overwrite before\nwe actually jump to the place that the attacker\nwants us to go.",
    "start": "1676080",
    "end": "1682860"
  },
  {
    "text": "So, basically,\nhere's how it works. Let's return to\nNeal stack diagram.",
    "start": "1682860",
    "end": "1691809"
  },
  {
    "text": "Essentially we have to think\nof it as a magic value. Basically, in front\nof the return address.",
    "start": "1691810",
    "end": "1700060"
  },
  {
    "text": "Such that any\noverflow would have to hit the canary first, and\nthen hit the return address.",
    "start": "1700060",
    "end": "1705804"
  },
  {
    "text": "And if we can check\nthat canary before we return from the function,\nthen we can detect the evil. So, let's say that, once again,\nwe've got the buffer here.",
    "start": "1705804",
    "end": "1715600"
  },
  {
    "start": "1715600",
    "end": "1724760"
  },
  {
    "text": "Then we're going to\nput the canary here. ",
    "start": "1724760",
    "end": "1733960"
  },
  {
    "text": "And then this will be the save\nvalue of the break pointer.",
    "start": "1733960",
    "end": "1739513"
  },
  {
    "text": " And then this will be\nthe return address. ",
    "start": "1739514",
    "end": "1749900"
  },
  {
    "text": "So, once again, remember\nthe overflow goes this way. So the idea is that\nif the overflow wants",
    "start": "1749900",
    "end": "1756650"
  },
  {
    "text": "to get to that return\naddress, it first has to trample on this\ncanary thing here, right?",
    "start": "1756650",
    "end": "1762770"
  },
  {
    "text": "You have a question? AUDIENCE: Why does it\nhave to touch the canary? PROFESSOR: Well,\nbecause-- assuming",
    "start": "1762770",
    "end": "1769018"
  },
  {
    "text": "that the attacker\ndoesn't know how to jump around in memory\narbitrarily-- the way",
    "start": "1769018",
    "end": "1774795"
  },
  {
    "text": "that tradionally [INAUDIBLE]\noverflow attacks work is that you look in GB, figure\nout where all this stuff is.",
    "start": "1774795",
    "end": "1782190"
  },
  {
    "text": "And then, you essentially\nhave this string, [INAUDIBLE] radius\ngrows this way. Now, you're correct that\nif the attacker could just",
    "start": "1782190",
    "end": "1789050"
  },
  {
    "text": "go here directly, then\nall the bets are off. But in the very simple\noverflow approach,",
    "start": "1789050",
    "end": "1794200"
  },
  {
    "text": "everything just has to\ngrow strictly that way. So the basic idea\nbehind the canary",
    "start": "1794200",
    "end": "1800259"
  },
  {
    "text": "is that we allow the buffer\noverflow exploit to take place. But then we have\nrun time code that,",
    "start": "1800260",
    "end": "1806435"
  },
  {
    "text": "at the time of the\nreturn from the function, is going to check this\ncanary and make sure that it has the right value.",
    "start": "1806436",
    "end": "1812799"
  },
  {
    "text": "Right? So it's called the canary\nbecause back in the days, when PETA wasn't around,\nyou could use birds to test for evil things.",
    "start": "1812800",
    "end": "1818880"
  },
  {
    "text": "So that's why it's\ncalled canary. AUDIENCE: My question\nis if the attacker is",
    "start": "1818880",
    "end": "1824077"
  },
  {
    "text": "able to overwrite the return\naddress, and modify the canary,",
    "start": "1824077",
    "end": "1831750"
  },
  {
    "text": "how does he check that the\ncanary was not modified, but was going to be performed?",
    "start": "1831750",
    "end": "1837690"
  },
  {
    "text": "So the attacker overwrites\nthe return address, right? So how is the check that\nthe canary was modified--",
    "start": "1837690",
    "end": "1847444"
  },
  {
    "text": "PROFESSOR: Yeah. So basically, you have to\nhave some piece of code that will actually check this\nbefore the return takes place.",
    "start": "1847444",
    "end": "1854505"
  },
  {
    "text": "So in other words, you're right. There has to be\nthat order in there. So essentially,\nwhat you have to do",
    "start": "1854505",
    "end": "1860529"
  },
  {
    "text": "is you have to have a support\nfrom the compiler here that will actually extend\nthe calling convention,",
    "start": "1860530",
    "end": "1867090"
  },
  {
    "text": "if you will. Such that part of\nthe return sequence is before we actually\ntreat this value as valid,",
    "start": "1867090",
    "end": "1873700"
  },
  {
    "text": "make sure this guy\nhasn't been trampled. Then, and only then, can we\nthink of going somewhere else. AUDIENCE: I think I might\nbe jumping the gun here,",
    "start": "1873700",
    "end": "1880640"
  },
  {
    "text": "but doesn't this assume\nthat the attacker can't find out or guess\nwhat the canary value is? PROFESSOR: That, in fact, is the\nvery next thing my lecture is.",
    "start": "1880640",
    "end": "1887990"
  },
  {
    "text": "If I had prizes, you'd get one. I don't have any. But good for you. Gold star. That's exactly correct. So one of the next\nthings I'd like to say",
    "start": "1887990",
    "end": "1895250"
  },
  {
    "text": "is what's the problem\nwith this scheme? What if, for example,\non every program, we always put the value a?",
    "start": "1895250",
    "end": "1901890"
  },
  {
    "text": "Just like four values of a. So this is like a single\n[INAUDIBLE] at work, right? Then you'd have\nthat exact problem",
    "start": "1901890",
    "end": "1907789"
  },
  {
    "text": "that you just mentioned. Because then, the\nattacker-- this gets back to your question-- he\nor she knows how big this is.",
    "start": "1907790",
    "end": "1914990"
  },
  {
    "text": "This is deterministic\non every system. So you just make sure\nthat your buffer overflow has a bunch of a's here, and\nthen you overwrite this side.",
    "start": "1914990",
    "end": "1921440"
  },
  {
    "text": "So you're exactly\nright about that. And so there's basically\ndifferent types of values you could put between this\ncanary to try to prevent that.",
    "start": "1921440",
    "end": "1928760"
  },
  {
    "text": "One thing that\nyou can do here is you can use-- this is sort of\na very funny type of canary,",
    "start": "1928760",
    "end": "1938760"
  },
  {
    "text": "but it basically\nexploits the ways that a lot of C\nprogams and C functions",
    "start": "1938760",
    "end": "1947700"
  },
  {
    "text": "handle special characters. So imagine that you used\nthis value for the canary. So the binary value is 0,\nwhich is like the null byte,",
    "start": "1947700",
    "end": "1954990"
  },
  {
    "text": "the null character in ASCII. Carriage return line feed,\nand then the negative 1.",
    "start": "1954990",
    "end": "1961000"
  },
  {
    "text": "What's funny about this is that\na lot of the functions that you can exploit-- that manipulate\nstrings, for example--",
    "start": "1961000",
    "end": "1967090"
  },
  {
    "text": "they will stop when they\nencounter one of these words, or one of these values. So you can imagine that you're\nusing some string manipulation",
    "start": "1967090",
    "end": "1974780"
  },
  {
    "text": "function to go up this way. It's going to hit\nthat null character. Oops-- it's going\nto stop processing. Right?",
    "start": "1974780",
    "end": "1979810"
  },
  {
    "text": "Or maybe if you're using\na line-oriented function-- carriage return, line\nfeed-- that's often used as the line terminator.",
    "start": "1979810",
    "end": "1985836"
  },
  {
    "text": "So once again, you're using\nthat dangerous function that's trying to go this way. It hits that. Oops, it's going to quit.",
    "start": "1985836",
    "end": "1991870"
  },
  {
    "text": "And the negative 1 is\nanother similar magic token. So that's one way you\ncan get around that. One second.",
    "start": "1991870",
    "end": "1997500"
  },
  {
    "text": "And then another\nthing you can do is you can use a\nrandomized value.",
    "start": "1997500",
    "end": "2002628"
  },
  {
    "text": " So here, you just [INAUDIBLE]\nfrom this whole idea",
    "start": "2002628",
    "end": "2009662"
  },
  {
    "text": "of trying to figure out\nwhat exactly it is that might cause that\nattack to terminate. And you just pull\nsome random number",
    "start": "2009662",
    "end": "2015700"
  },
  {
    "text": "and either make it\ndifficult for the attacker to guess what that is. Now, of course, this\nrandom value-- its strength",
    "start": "2015700",
    "end": "2022282"
  },
  {
    "text": "is basically based on\nhow difficult it is for the attacker to guess that. So the attacker,\nfor example, can",
    "start": "2022282",
    "end": "2028970"
  },
  {
    "text": "understand that if\nthere's only, let's say, three bits of entropy in your\nsystem, then maybe the attacker",
    "start": "2028970",
    "end": "2034320"
  },
  {
    "text": "could use some type of forced\nattack, so on and so forth. So one thing to keep\nin mind, in general, is that whenever\nsomeone tells you,",
    "start": "2034320",
    "end": "2040523"
  },
  {
    "text": "here's a randomized\noffense against attack foo, if there are not a\nlot of random bits there, that attack may not\ngive you as much defense",
    "start": "2040523",
    "end": "2047800"
  },
  {
    "text": "as you think. You had a question? AUDIENCE: Usually\nwhat tends to happen",
    "start": "2047800",
    "end": "2054186"
  },
  {
    "text": "is you read from another\nbuffer and you write into that buffer on the stack. So in that situation, it seems\nlike that promiscuous canary",
    "start": "2054186",
    "end": "2062074"
  },
  {
    "text": "is kind of useless. Because if I read\nfrom the [INAUDIBLE], I know what the canary is. And I have this other\nbuffer that I control.",
    "start": "2062074",
    "end": "2068980"
  },
  {
    "text": "And I never check. And in that buffer, I can\nput as much of it as I want. I don't want the\npromiscuous canary,",
    "start": "2068980",
    "end": "2074366"
  },
  {
    "text": "so I can overwrite\nit very safely. So I don't see how\nthis really works,",
    "start": "2074366",
    "end": "2079489"
  },
  {
    "text": "and in what scenario it's--\nyou're assuming you're reading from the buffer on this stack\nand you're going to stop-- PROFESSOR: Well,\nwe're assuming--",
    "start": "2079489",
    "end": "2085384"
  },
  {
    "text": "we're writing to the buffer. So basically, the idea is that\nyou write some [? two-long ?]",
    "start": "2085384",
    "end": "2091226"
  },
  {
    "text": "string this way. And then the idea is that if you\ncan't guess what this is, then",
    "start": "2091226",
    "end": "2096750"
  },
  {
    "text": "you can't, basically, put this\nvalue inside of your overflow",
    "start": "2096750",
    "end": "2102303"
  },
  {
    "text": "string. AUDIENCE: But you said\nit's deterministic, right? 0, CR, LF, negative 1. PROFESSOR: Oh, yeah.",
    "start": "2102303",
    "end": "2107950"
  },
  {
    "text": "Right. OK. So I think I understand\nyour question now. Yes. If you use this system here,\nwith the deterministic canary,",
    "start": "2107950",
    "end": "2116660"
  },
  {
    "text": "and you essentially\nare not using one of these functions\nfrom, let's say,",
    "start": "2116660",
    "end": "2121910"
  },
  {
    "text": "the standard library that\nwould be fooled by this, then, yeah, you can defeat\nthe system that way.",
    "start": "2121910",
    "end": "2127380"
  },
  {
    "text": "AUDIENCE: But I\ncan use string CPIs and the destination\ncan be buffered. And the source can\nbe [INAUDIBLE].",
    "start": "2127380",
    "end": "2135630"
  },
  {
    "text": "And that would not\nprotect me against that. ",
    "start": "2135631",
    "end": "2140972"
  },
  {
    "text": "PROFESSOR: I'm not sure I\nunderstand the attack, so. AUDIENCE: So the string\nCPI would take home the user input for my data,\nwould overwrite canary-- oh,",
    "start": "2140972",
    "end": "2150075"
  },
  {
    "text": "and you're saying--\nhmm, actually, I understand what you're saying. PROFESSOR: Right? Because the idea is that you\ncan fill this buffer with bytes",
    "start": "2150075",
    "end": "2156665"
  },
  {
    "text": "from wherever, right? But the idea is that\nunless you can guess this, then it doesn't matter.",
    "start": "2156665",
    "end": "2162589"
  },
  {
    "text": "But you're correct. In general, anything that allows\nyou to guess this or randomly get that value correct will\nlead to the feed of the system.",
    "start": "2162590",
    "end": "2171939"
  },
  {
    "text": "AUDIENCE: In terms\nof [INAUDIBLE], can you just take something\nlike the number of seconds or milliseconds since\nthe epoch and use",
    "start": "2171939",
    "end": "2179820"
  },
  {
    "text": "that at the [INAUDIBLE]? PROFESSOR: Well,\nas it turns out,",
    "start": "2179820",
    "end": "2184974"
  },
  {
    "text": "a lot of times, calls\nthat get [INAUDIBLE] don't contain as much\nrandomness as you might think.",
    "start": "2184974",
    "end": "2190000"
  },
  {
    "text": "Because the program\nitself might somehow-- let's say, for example, have a\nlog statement or function you",
    "start": "2190000",
    "end": "2196795"
  },
  {
    "text": "could call to get the\ntime that the program was launched or things like that. But you're right. In practice, if you\ncan use something like,",
    "start": "2196795",
    "end": "2202406"
  },
  {
    "text": "let's say, the hardware system\nplot, which is often the lowest level, better system of timing\nof it-- yes, that kind of thing",
    "start": "2202406",
    "end": "2209250"
  },
  {
    "text": "might work. AUDIENCE: But even if\nyou can pull the logs, it still depends on exactly\nwhat time you refuse a request.",
    "start": "2209250",
    "end": "2216276"
  },
  {
    "text": "And so if you don't have\ncontrol over how long it takes for your requests to get from\nyour computer to the server,",
    "start": "2216276",
    "end": "2223596"
  },
  {
    "text": "then I don't think you\ncan deterministically guess exactly the right time. PROFESSOR: That's right. That's right.",
    "start": "2223596",
    "end": "2229017"
  },
  {
    "text": "The devil's in the details\nwith all this kind of stuff. In other words, if there's\nsome way for you to figure out,",
    "start": "2229017",
    "end": "2234300"
  },
  {
    "text": "for example, that type\nof timing channel, you might find out that the\namount of entropy-- the amount of randomness--\nis not, let's say,",
    "start": "2234300",
    "end": "2240359"
  },
  {
    "text": "the full size of a timestamp,\nbut maybe something that's much smaller. Because maybe the\nattacker can figure out the hour and the\nminute in which you",
    "start": "2240359",
    "end": "2246880"
  },
  {
    "text": "did this, but not the\nsecond, for example. We'll take one more\nquestion, then we'll move on.",
    "start": "2246880",
    "end": "2253326"
  },
  {
    "text": "AUDIENCE: For the record, trying\nto roll your own randomness is usually a bad idea, right? PROFESSOR: That's correct.",
    "start": "2253326",
    "end": "2258560"
  },
  {
    "text": "AUDIENCE: Usually,\nyou should just use whatever's supplied\nby your systems. PROFESSOR: Oh, yes. That's very true. It's like inventing your\nown cryptosystem, which",
    "start": "2258560",
    "end": "2264990"
  },
  {
    "text": "is another popular thing\nundergrads sometimes want to do. We're not the NSA, we're\nnot mathematicians. That typically fails.",
    "start": "2264990",
    "end": "2270302"
  },
  {
    "text": "So you're exactly\nright about that. But even if you use\nsystem-supplied randomness, you still may end up with\nfewer bits of entropy",
    "start": "2270302",
    "end": "2277309"
  },
  {
    "text": "than you expect. And I'll give you an example\nof that when we talk about address phase randomization. So that's basically how the\nstack canary approach works.",
    "start": "2277310",
    "end": "2287150"
  },
  {
    "text": "And so since we're in a security\nclass, you might be wondering, so what kinds of things will\nstack canaries not catch?",
    "start": "2287150",
    "end": "2297692"
  },
  {
    "text": "So when do canaries fail? ",
    "start": "2297692",
    "end": "2308310"
  },
  {
    "text": "One way they can fail\nis if the attacker",
    "start": "2308310",
    "end": "2315540"
  },
  {
    "text": "the things, like\nfunction pointers. ",
    "start": "2315540",
    "end": "2325430"
  },
  {
    "text": "Because if function\npointers get [INAUDIBLE], there's nothing\nthat the canary can do to prevent that type of\nexploit from taking place.",
    "start": "2325430",
    "end": "2332119"
  },
  {
    "text": "For example, let's say you have\ncode that declared a pointer.",
    "start": "2332120",
    "end": "2337890"
  },
  {
    "text": " It gets initialized in some\nway, it doesn't really matter.",
    "start": "2337890",
    "end": "2345312"
  },
  {
    "text": "Then you have a buffer here. ",
    "start": "2345312",
    "end": "2351930"
  },
  {
    "text": "Once again, the gets\nfunction rears its ugly head. ",
    "start": "2351930",
    "end": "2357710"
  },
  {
    "text": "And then, let's say, down\nhere, we assign some value 5",
    "start": "2357710",
    "end": "2365089"
  },
  {
    "text": "for the pointer. Now note that we\nhaven't actually tried to attack the return\naddress of the function that",
    "start": "2365090",
    "end": "2372780"
  },
  {
    "text": "contains this code. When we view the\nbuffer overflow, this pointer address up here\nis going to get corrupted.",
    "start": "2372780",
    "end": "2380710"
  },
  {
    "text": "And so what ends up happening\nis that if the attacker can corrupt that pointer,\nthen the attacker's",
    "start": "2380710",
    "end": "2386180"
  },
  {
    "text": "able to write 5 to some\nattacker-controlled address. Does everyone see how the\ncanary doesn't help here?",
    "start": "2386180",
    "end": "2393170"
  },
  {
    "text": "Because we're\nbasically not attacking the way that the\nfunction returns. AUDIENCE: But won't the\npointer be below the buffer?",
    "start": "2393170",
    "end": "2401026"
  },
  {
    "text": " PROFESSOR: So, yeah.",
    "start": "2401026",
    "end": "2406035"
  },
  {
    "text": "AUDIENCE: Not necessarily-- PROFESSOR: So you're worried\nabout, is it going to be here, or is it going to be here? AUDIENCE: I'm worried\nabout when you--",
    "start": "2406035",
    "end": "2411715"
  },
  {
    "text": "will you actually be able to\naccess where the pointer is when you're overturning-- PROFESSOR: Ah, yeah. So you can't necessarily--\nthat's a good question.",
    "start": "2411715",
    "end": "2417960"
  },
  {
    "text": "So I think, in a lot of\nthe previous examples, you've been assuming that\nthis guy would be here.",
    "start": "2417960",
    "end": "2423609"
  },
  {
    "text": "Like, in the [INAUDIBLE]. If the stack is going\nthis way, then the pointer would be down here. But the order of the\nparticular variables--",
    "start": "2423610",
    "end": "2430282"
  },
  {
    "text": "it depends on a bunch\nof different things. It depends on the way that\nthe compiler lays stuff out. It depends on the column\ndimension of the hardware,",
    "start": "2430282",
    "end": "2436730"
  },
  {
    "text": "so on and so forth. But you're right that\nif the-- basically,",
    "start": "2436730",
    "end": "2441820"
  },
  {
    "text": "if the buffer overflow\nwas going this way, but the pointer was in\nfront of the buffer, then it's going to work.",
    "start": "2441820",
    "end": "2448140"
  },
  {
    "text": "AUDIENCE: Why can't\nyou associate a canary with the function\ncanary, just like you did with the return address?",
    "start": "2448140",
    "end": "2453587"
  },
  {
    "text": "PROFESSOR: Ah. That's an interesting point. You could do those things. In fact, you could try\nto imagine a compiler",
    "start": "2453587",
    "end": "2459859"
  },
  {
    "text": "that, whenever it had\nany pointer whatsoever, it would always try to add\npadding for various things.",
    "start": "2459860",
    "end": "2465451"
  },
  {
    "text": "Right? As it turns out, it seems\nlike that will quickly get expensive, in terms\nof all the code that's",
    "start": "2465451",
    "end": "2472765"
  },
  {
    "text": "added, to have to check for\nall those types of things. Because then you could imagine\nthat every single time you",
    "start": "2472766",
    "end": "2478630"
  },
  {
    "text": "want to invoke any pointer,\nor recall any function, you've got to have\nthis code that's going to check whether\nthat canary is correct.",
    "start": "2478630",
    "end": "2484690"
  },
  {
    "text": "But yeah, in principle, you\ncould do something like that.  So does this make sense?",
    "start": "2484690",
    "end": "2490509"
  },
  {
    "text": "So we see that canaries don't\nhelp you on this equation. ",
    "start": "2490510",
    "end": "2496490"
  },
  {
    "text": "And so another thing, as\nwe've discussed before, is that if you can guess the\nrandomness, then, basically,",
    "start": "2496490",
    "end": "2506111"
  },
  {
    "text": "the random canaries don't work. ",
    "start": "2506112",
    "end": "2517440"
  },
  {
    "text": "Producing secure\nsources of randomness is actually a topic\nin and of itself.",
    "start": "2517440",
    "end": "2523234"
  },
  {
    "text": "That's very, very\ncomplicated, so we're not going to go into great\ndepth about that here. But suffice it to say, if\nyou can guess the randomness,",
    "start": "2523234",
    "end": "2528380"
  },
  {
    "text": "everything falls apart. AUDIENCE: So do canaries usually\nhave less bits than the return address? Because otherwise,\ncouldn't you just",
    "start": "2528380",
    "end": "2533914"
  },
  {
    "text": "memorize the return address and\ncheck that the address changed? PROFESSOR: Let's see. So you're saying if the\ncanary here is, let's say,",
    "start": "2533914",
    "end": "2543310"
  },
  {
    "text": "smaller than-- AUDIENCE: I'm saying for\nthe canary is that you know",
    "start": "2543310",
    "end": "2548459"
  },
  {
    "text": "what that value is [INAUDIBLE]. Can't you also memorize\nthe return address value",
    "start": "2548459",
    "end": "2554051"
  },
  {
    "text": "and check if that's\nbeen changed? PROFESSOR: Oh, so you're saying\ncan't the secure system--",
    "start": "2554051",
    "end": "2560505"
  },
  {
    "text": "can't it look at\nthe return address and figure out if\nthat's been changed. Yeah.",
    "start": "2560505",
    "end": "2566270"
  },
  {
    "text": "In other words, if\nthere-- well, yes and no. Note that there's\nstill this that's",
    "start": "2566270",
    "end": "2571787"
  },
  {
    "text": "going get overwritten in\nthe buffer overflow attack. So this may still\ncause problems. But in principle, if\nsomehow these things",
    "start": "2571787",
    "end": "2579720"
  },
  {
    "text": "were invariant somehow, then you\ncould do something like that. But the problem is\nthat, in many cases,",
    "start": "2579720",
    "end": "2587640"
  },
  {
    "text": "this return-- the\nbookkeeping overhead for that would be a little bit tricky. Because you can imagine\nthat particular function",
    "start": "2587640",
    "end": "2593060"
  },
  {
    "text": "may be called from places,\nand so on and so forth. Just in the interest\nof time, we're going to zoom\nforward a little bit.",
    "start": "2593060",
    "end": "2599253"
  },
  {
    "text": "But if we have time\nat the end, we'll come back to some\nof these questions. ",
    "start": "2599253",
    "end": "2605307"
  },
  {
    "text": "So those are some situations\nin which the canary can fail. There's some other places\nin which it can fail, too.",
    "start": "2605308",
    "end": "2612800"
  },
  {
    "text": "For example, one way\nthat it might fail is with malloc and free attacks.",
    "start": "2612800",
    "end": "2618650"
  },
  {
    "text": "This is a uniquely\nC-style attack.",
    "start": "2618650",
    "end": "2624445"
  },
  {
    "text": "Let's see what happens here. ",
    "start": "2624446",
    "end": "2629860"
  },
  {
    "text": "Imagine that you have two\npointers here, p and q.",
    "start": "2629860",
    "end": "2639012"
  },
  {
    "text": "And then imagine that we issue\na malloc for both of these.",
    "start": "2639012",
    "end": "2648109"
  },
  {
    "text": "We give p 1,024 bytes of memory. We also give q 1,024\nbytes of memory.",
    "start": "2648110",
    "end": "2655080"
  },
  {
    "text": " And then, let's say\nthat we do a strcpy on p",
    "start": "2655080",
    "end": "2669477"
  },
  {
    "text": "from some bug that's\ncontrolled by the attacker. So here's where the\noverflow happens.",
    "start": "2669478",
    "end": "2675300"
  },
  {
    "text": "And then let's say\nthat would be free q",
    "start": "2675300",
    "end": "2683770"
  },
  {
    "text": "and then let's say\nthat would be free p. OK. So it's fairly\nstraightforward code, right?",
    "start": "2683770",
    "end": "2690360"
  },
  {
    "text": "Two pointers-- malloc's the\nmemory for each one of them. You use one of these\non site functions,",
    "start": "2690360",
    "end": "2695945"
  },
  {
    "text": "the buffer overflow happens,\nand we free q and we free p.",
    "start": "2695945",
    "end": "2703380"
  },
  {
    "text": "Let's assume that p and\nq-- the memory that's",
    "start": "2703380",
    "end": "2712539"
  },
  {
    "text": "assigned to them-- are nearby,\nin terms of the layout in terms",
    "start": "2712540",
    "end": "2722142"
  },
  {
    "text": "of [INAUDIBLE]. So both of these objects\nline next to each other",
    "start": "2722142",
    "end": "2727520"
  },
  {
    "text": "in the memory space. There's some subtle and evil\nthings that can happen, right?",
    "start": "2727520",
    "end": "2734460"
  },
  {
    "text": "Because this third copy\nhere might actually over--",
    "start": "2734460",
    "end": "2739859"
  },
  {
    "text": "it'll fill p with\na bunch of stuff, but it might also corrupt some\nof the state that belongs to q.",
    "start": "2739860",
    "end": "2747510"
  },
  {
    "text": "OK? And this can cause problems. And some of you may\nhave done things in this unintentionally\nin your own code, when",
    "start": "2747510",
    "end": "2752635"
  },
  {
    "text": "you have some type of\nweird use of pointers. And then stuff seems\nto work, but when you call free later\non, it segfaults",
    "start": "2752635",
    "end": "2758777"
  },
  {
    "text": "or something like that. Right? What I'm going to\ntalk about here is the way that the\nattacker can take advantage of that behavior.",
    "start": "2758778",
    "end": "2764550"
  },
  {
    "text": "We're actually going to\nexplain why that happens. So imagine that inside\nthe implementation",
    "start": "2764550",
    "end": "2772520"
  },
  {
    "text": "of free and malloc, an\nallocated block looks like this. ",
    "start": "2772520",
    "end": "2781039"
  },
  {
    "text": "So let's say that there is the\napp-visible data that lives up",
    "start": "2781040",
    "end": "2789320"
  },
  {
    "text": "here. And then let's say you had\na size variable down here.",
    "start": "2789320",
    "end": "2795250"
  },
  {
    "text": "This is not something that\nthe application sees directly. This is like some\nbookkeeping info that the free or\nthe malloc systems",
    "start": "2795250",
    "end": "2803109"
  },
  {
    "text": "attract so that you know\nthe sizes of the buffer that it allocated. Let's say that free block\nhas some metadata that",
    "start": "2803110",
    "end": "2815480"
  },
  {
    "text": "looks like this. ",
    "start": "2815480",
    "end": "2823092"
  },
  {
    "text": "You've got the size of\nthe free block here. And then you've got a\nbunch of empty space here.",
    "start": "2823092",
    "end": "2829070"
  },
  {
    "text": "Then let's say-- this is\nwhere things get interesting. You've got a backwards\npointer and then",
    "start": "2829070",
    "end": "2837230"
  },
  {
    "text": "you've got a forward pointer. ",
    "start": "2837230",
    "end": "2845352"
  },
  {
    "text": "And maybe you've got\nsome size data here. Now why are we having\nthese two pointers here? It's because the\nmemory allocation",
    "start": "2845352",
    "end": "2850415"
  },
  {
    "text": "system, in this case, is\nusing a doubly-linked list to track how the free blocks\nrelated to each other.",
    "start": "2850415",
    "end": "2857950"
  },
  {
    "text": "So when you allocate\na free block, you take it off of this\ndoubly-linked list. And then when you deallocate it,\nyou do some pointer arithmetic,",
    "start": "2857950",
    "end": "2865070"
  },
  {
    "text": "and then you fix\nthese things up. Then you add it back to\nthat linked list, right? So as always, whenever you\nhear pointer arithmetic,",
    "start": "2865070",
    "end": "2871099"
  },
  {
    "text": "you should think\nit's your canary. Because that's where a lot\nof these problems come about. And so the thing to note is\nthat we had this buffer overflow",
    "start": "2871100",
    "end": "2881230"
  },
  {
    "text": "here, the p. If we assume that p and\nq are next to each other, or very close in memory, then\nwhat can end up happening",
    "start": "2881230",
    "end": "2888795"
  },
  {
    "text": "is that this buffer\noverflow can overwrite some of this size data for\nthe allocated pointer, q.",
    "start": "2888795",
    "end": "2899050"
  },
  {
    "text": "Is everybody with me so far? Because if you're with me\nso far, then basically, you can use your\nimagination at this point",
    "start": "2899050",
    "end": "2904720"
  },
  {
    "text": "and see where things go wrong. Because essentially,\nwhat's going to end up happening is that\nthese free operations-- they",
    "start": "2904720",
    "end": "2911840"
  },
  {
    "text": "look at this metadata to do all\nkinds of pointer manipulations with this kind of stuff.",
    "start": "2911840",
    "end": "2917226"
  },
  {
    "start": "2917226",
    "end": "2933220"
  },
  {
    "text": "Somewhere in the\nimplementation of free, it's going to get\nsome pointer based",
    "start": "2933220",
    "end": "2945480"
  },
  {
    "text": "on the value of size,\nwhere size is something",
    "start": "2945480",
    "end": "2951100"
  },
  {
    "text": "the attacker controls. Because the attacker\ndid the buffer overflow. Right? So then, you can\nimagine that it does",
    "start": "2951100",
    "end": "2958609"
  },
  {
    "text": "a bunch of pointer arithmetic. ",
    "start": "2958610",
    "end": "2965030"
  },
  {
    "text": "So it's going to look\nat the back in the four pointers of this block.",
    "start": "2965030",
    "end": "2973109"
  },
  {
    "text": "And then it's going\nto do something like update the back pointer. ",
    "start": "2973110",
    "end": "2981660"
  },
  {
    "text": "And also update the\nforward pointer. ",
    "start": "2981660",
    "end": "2989807"
  },
  {
    "text": "And the exact\nspecifics of this-- you don't need to worry about. This is just an example of the\ncode that takes place in there.",
    "start": "2989807",
    "end": "2995450"
  },
  {
    "text": "But the point is that note\nthat because the attacker's overwritten size,\nthe attacker now",
    "start": "2995450",
    "end": "3000570"
  },
  {
    "text": "controls this pointer that's\npassed into the free code. And because of that,\nthese two statements",
    "start": "3000570",
    "end": "3006040"
  },
  {
    "text": "here, these are actually\npointer updates. Right? This is a pointer somewhere. And because the attacker has\nbeen able to control this p,",
    "start": "3006040",
    "end": "3015080"
  },
  {
    "text": "he actually controls\nall this stuff, too. This is where the attack\ncan actually take place.",
    "start": "3015080",
    "end": "3020680"
  },
  {
    "text": "So when the free\ncode operates and it tries to do things like,\nfor example, merge these two blocks, that's\ntypically why you have",
    "start": "3020680",
    "end": "3027289"
  },
  {
    "text": "[INAUDIBLE] doubly-linked list. Because if you have two blocks\nthat are facing to each other and they're both free, you want\nto merge them to one big block.",
    "start": "3027289",
    "end": "3033650"
  },
  {
    "text": "Well, we control size. That means we control\nthis whole process here. That means if we've been clever\nin how these overflows are",
    "start": "3033650",
    "end": "3041235"
  },
  {
    "text": "working, at these points, we\ncan write to a memory in the way that we choose.",
    "start": "3041235",
    "end": "3046840"
  },
  {
    "text": "Does that make sense? And like I said,\nthis type of thing often happens in your own\ncode when you're not getting",
    "start": "3046840",
    "end": "3052974"
  },
  {
    "text": "very clever with pointer. When you make some mistake with\nthe double freeing or whatever, this is why stuff will\nsegfault sometimes.",
    "start": "3052974",
    "end": "3059507"
  },
  {
    "text": "Because you've messed\nup this metadata that lives with each one\nof these allocated blocks. And then at some\npoint, this calculation",
    "start": "3059507",
    "end": "3065950"
  },
  {
    "text": "will point to some garbage\nvalue, and then you're dead. But if you're the attacker, you\ncan actually choose that value",
    "start": "3065950",
    "end": "3071048"
  },
  {
    "text": "and use it for\nyour own advantage. ",
    "start": "3071048",
    "end": "3077280"
  },
  {
    "text": "OK. So now let's get\nto another approach",
    "start": "3077280",
    "end": "3082345"
  },
  {
    "text": "for getting rid of some of\nthese buffer overflow attacks. And that approach\nis bounds checking.",
    "start": "3082345",
    "end": "3090742"
  },
  {
    "start": "3090742",
    "end": "3098480"
  },
  {
    "text": "The goal of bounds\nchecking is to make sure",
    "start": "3098480",
    "end": "3105090"
  },
  {
    "text": "that when you use a\nparticular pointer, it only refers to something\nthat is a memory object.",
    "start": "3105090",
    "end": "3114380"
  },
  {
    "text": "And that pointer's in the valid\nbounds of that memory object. So that's the basic\nidea behind the idea.",
    "start": "3114380",
    "end": "3120759"
  },
  {
    "text": "It's actually pretty\nsimple-- at a high level. Once again, in C, though,\nit's very difficult to actually understand things.",
    "start": "3120760",
    "end": "3127010"
  },
  {
    "text": "Like, what does it\nactually mean for a pointer to be in bounds or out of\nbounds, or valid or invalid? So for example, let's\nsay that you have",
    "start": "3127010",
    "end": "3133920"
  },
  {
    "text": "two pieces of code like this. So you declare a character\narray of 1,024 bytes.",
    "start": "3133920",
    "end": "3144580"
  },
  {
    "text": "And then let's say that you\nuse something like this. You declare a pointer,\nand then you'd",
    "start": "3144580",
    "end": "3152920"
  },
  {
    "text": "get the address of one\nof the elements in x.",
    "start": "3152920",
    "end": "3158686"
  },
  {
    "text": " Does this make sense? Is this a good idea to do that?",
    "start": "3158686",
    "end": "3165240"
  },
  {
    "text": "It's hard to say. If you're treating this\nx up here as a string, maybe it makes sense for Jim\nto take a pointer like this.",
    "start": "3165240",
    "end": "3172556"
  },
  {
    "text": "Then you can increment and\ndecrement, because maybe you're looking for some special value\nof your character in there. But if this is a network\nmessage or something like that,",
    "start": "3172556",
    "end": "3180545"
  },
  {
    "text": "maybe there's actually some\nstruct that's embedded in here. So it doesn't\nactually make sense",
    "start": "3180545",
    "end": "3185670"
  },
  {
    "text": "to walk this character\nby character, right? So the challenge here\nis that, once again, we can see it allows you\nto do whatever you want.",
    "start": "3185670",
    "end": "3192109"
  },
  {
    "text": "It's hard to determine what it\nis you actually want it to do. And so, as a result,\nit's a little bit",
    "start": "3192110",
    "end": "3198280"
  },
  {
    "text": "subtle with how\nyou define things like pointer safety in C.",
    "start": "3198280",
    "end": "3203440"
  },
  {
    "text": "You can also imagine that life\ngets even more complicated if you use structs and unions.",
    "start": "3203440",
    "end": "3210599"
  },
  {
    "text": "Imagine you had a union. It would look like this. It's got some integer\nvalue in there.",
    "start": "3210600",
    "end": "3218941"
  },
  {
    "text": "And then you've got some struct. And then, it has two\nintegers inside of it.",
    "start": "3218941",
    "end": "3226396"
  },
  {
    "start": "3226396",
    "end": "3239600"
  },
  {
    "text": "Don't forget the way that the\nunions work is that, basically, the union's going to\nallocate the maximum size",
    "start": "3239600",
    "end": "3244910"
  },
  {
    "text": "for the largest element. At any given moment,\nyou typically expect that either\nthis ni will be valid",
    "start": "3244910",
    "end": "3251320"
  },
  {
    "text": "or this struct s will\nbe valid, but not both. So imagine that you had code\nthat did something like this.",
    "start": "3251320",
    "end": "3258694"
  },
  {
    "text": " You get a pointer\nto address this guy.",
    "start": "3258694",
    "end": "3266414"
  },
  {
    "start": "3266414",
    "end": "3273218"
  },
  {
    "text": "So I get an integer pointer to\nthe address of, in the union, this struct, and then k.",
    "start": "3273218",
    "end": "3280800"
  },
  {
    "text": "Well, this reference is\nstrictly speaking in bounds.",
    "start": "3280800",
    "end": "3285920"
  },
  {
    "text": "There's memory that's\nbeen allocated for this. That's not incorrect. But are you actually, this\nmoment in program of execution,",
    "start": "3285920",
    "end": "3291960"
  },
  {
    "text": "treating this union\nas one of these guys or one of these guys? It's hard to say.",
    "start": "3291960",
    "end": "3298200"
  },
  {
    "text": "So as a result of these\nambiguous pointers semantics that can arise in these\nC programs, typically,",
    "start": "3298200",
    "end": "3305730"
  },
  {
    "text": "these bound checking\napproaches can only offer a weaker notion\nof pointer correctness.",
    "start": "3305730",
    "end": "3312540"
  },
  {
    "text": "And so that notion\nis as follows. ",
    "start": "3312540",
    "end": "3323995"
  },
  {
    "text": "If you have a pointer\np prime that's",
    "start": "3323995",
    "end": "3332860"
  },
  {
    "text": "derived from the base\npointer p, then p prime",
    "start": "3332860",
    "end": "3350530"
  },
  {
    "text": "should only be used to\ndeference memory that belongs",
    "start": "3350530",
    "end": "3367604"
  },
  {
    "text": "to the original base pointer. ",
    "start": "3367604",
    "end": "3377620"
  },
  {
    "text": "So for a derived\npointer p prime that's derived from some\noriginal p, then",
    "start": "3377620",
    "end": "3383200"
  },
  {
    "text": "p prime should only be used\nto deference memory that belongs to p. Know that this is a weaker\ngoal than enforcing completely",
    "start": "3383200",
    "end": "3391880"
  },
  {
    "text": "correct pointer semantics. Because for example,\nyou could still have weird issues like with\nthis union here, for example.",
    "start": "3391880",
    "end": "3401244"
  },
  {
    "text": "Maybe at this particular\npoint in the program, it wasn't correct\nfor the program to be able to reference that\nparticular value in the union.",
    "start": "3401244",
    "end": "3409150"
  },
  {
    "text": "But at least this pointer\nreference is imbalanced. So maybe-- like this example\nup here-- maybe this creation",
    "start": "3409150",
    "end": "3419490"
  },
  {
    "text": "of this pointer here\nviolated the semantics of the network\nmessage embedded in x.",
    "start": "3419490",
    "end": "3424599"
  },
  {
    "text": "But at least you're not\ntrampling on arbitrary memory. You're only trampling on the\nmemory that belongs to you.",
    "start": "3424600",
    "end": "3431221"
  },
  {
    "text": "And so, in the world of C,\nthis is considered success. ",
    "start": "3431221",
    "end": "3436949"
  },
  {
    "text": "So that's the basic idea. Now, the challenge\nwith enforcing these types of semantics\nhere is that, in many cases,",
    "start": "3436949",
    "end": "3444103"
  },
  {
    "text": "you need help from the compiler. So you need help\nfrom the compiler. You typically need\nto recompile programs",
    "start": "3444103",
    "end": "3450640"
  },
  {
    "text": "to enforce these semantics. That can be a drag for\nbackwards compatibility. But this is the basic\nnotion of bounds checking.",
    "start": "3450640",
    "end": "3458520"
  },
  {
    "text": "What are some ways that you\ncan implement bounds checking? ",
    "start": "3458520",
    "end": "3469000"
  },
  {
    "text": "One very simple way is this\nnotion called electric fencing.",
    "start": "3469000",
    "end": "3475498"
  },
  {
    "start": "3475498",
    "end": "3481870"
  },
  {
    "text": "The notion here is that, for\nevery object that you allocate on the heap, you allocate\na guard page that's",
    "start": "3481870",
    "end": "3493930"
  },
  {
    "text": "immediately next to it. And you set the page\nprotection on that page, such that if anybody tries to touch\nthat, you get a hard fault.",
    "start": "3493930",
    "end": "3502104"
  },
  {
    "text": "The hard rules say\nthat's out of bounds, and then the program\nwill stop right there. And so this is a very simple\nthing that you can do.",
    "start": "3502104",
    "end": "3509195"
  },
  {
    "text": "And what's nice about\nthis approach actually, is that whenever you have\nan invalid memory reference,",
    "start": "3509195",
    "end": "3514559"
  },
  {
    "text": "this causes a fault\nimmediately, right. If you've ever debugged\nthe Base C or C++ program, one of the big problems is that\na lot of times when you corrupt",
    "start": "3514560",
    "end": "3521854"
  },
  {
    "text": "memory, that memory is corrupted\nsilently, and for a while, and it isn't until later that\nsomething crashes and then only",
    "start": "3521854",
    "end": "3529130"
  },
  {
    "text": "then you realize\nsomething happened. But you don't know\nwhat that something is. You simply do what they\ncall heisenbugs, right.",
    "start": "3529130",
    "end": "3534390"
  },
  {
    "text": "Things that have this notion\nof uncertainty in them. So what's nice about\nthis is that as soon as the pointer hits here,\nboom, it's a guard page,",
    "start": "3534390",
    "end": "3540760"
  },
  {
    "text": "everything blows up. Now can you think\nof a disadvantage with this approach?",
    "start": "3540760",
    "end": "3546936"
  },
  {
    "text": "AUDIENCE: It takes\nlonger [INAUDIBLE]. PROFESSOR: Yeah exactly. So imagine that this\nlittle-- this key thing here",
    "start": "3546937",
    "end": "3552090"
  },
  {
    "text": "was super, super small, then\nI've allocated a whole page just to make sure that my little\ntiny thing here didn't get--",
    "start": "3552090",
    "end": "3559240"
  },
  {
    "text": "didn't have one of\nthese pointer attacks. So this is very space intensive. And so-- but people don't\nreally deploy something",
    "start": "3559240",
    "end": "3565905"
  },
  {
    "text": "like this in production. This could be useful\nfor the bugging thing, but you would never do\nthis for a real program.",
    "start": "3565905",
    "end": "3572859"
  },
  {
    "text": "So that make sense? So these electrical fences\nare actually pretty-- pretty simple to understand.",
    "start": "3572859",
    "end": "3579222"
  },
  {
    "text": "AUDIENCE: Why does that have\nto be so large, necessarily? PROFESSOR: Ah, so the reason is\nbecause this guard page here,",
    "start": "3579222",
    "end": "3586930"
  },
  {
    "text": "you're typically relying on\nthe hardware, like page level protections to deal with\nthose types of things.",
    "start": "3586930",
    "end": "3592100"
  },
  {
    "text": "And so there's like\ncertain memory size you can set to the size\nof the page, according to [? Hollis ?]. But typically that page\nis 4k, for example.",
    "start": "3592100",
    "end": "3598886"
  },
  {
    "text": "So getting back\nto your question, this is some like\nsuper small value here, then yeah [INAUDIBLE]\n2 bytes where",
    "start": "3598886",
    "end": "3605099"
  },
  {
    "text": "you got 4k here protecting it. AUDIENCE: In protecting\n[INAUDIBLE] individual",
    "start": "3605100",
    "end": "3611638"
  },
  {
    "text": "[INAUDIBLE]. PROFESSOR: Oh sorry\nyeah, yeah so by heap I mean like heap object. AUDIENCE: [INAUDIBLE].",
    "start": "3611638",
    "end": "3616960"
  },
  {
    "text": "PROFESSOR: Yeah thank\nyou for-- yeah exactly. So imagine like for\neach malloc you do, you can have one of these--\nand set the guard page for it.",
    "start": "3616960",
    "end": "3622920"
  },
  {
    "text": "AUDIENCE: And you do\nit for log and above? Or just above? PROFESSOR: You can do either. AUDIENCE: [INAUDIBLE]",
    "start": "3622920",
    "end": "3628210"
  },
  {
    "text": " PROFESSOR: That's right. AUDIENCE: [INAUDIBLE]. PROFESSOR: That's right,\nwell you could do either.",
    "start": "3628210",
    "end": "3633480"
  },
  {
    "text": "The ones we have\ndepending on this-- on the size of the object. I mean now you got to declare\ntwo guard fences, right.",
    "start": "3633480",
    "end": "3640010"
  },
  {
    "text": "So now this quickly\ngets out of control. Which yeah, you could have\na booking [INAUDIBLE].",
    "start": "3640010",
    "end": "3646615"
  },
  {
    "text": "So that's the basic\nidea behind that. ",
    "start": "3646615",
    "end": "3658351"
  },
  {
    "text": "And then another\napproach you can look at is what they call fat pointers.",
    "start": "3658351",
    "end": "3667028"
  },
  {
    "text": " And so the idea\nhere is we actually",
    "start": "3667028",
    "end": "3673490"
  },
  {
    "text": "want to modify the pointer\nrepresentation itself to include bounds\ninformation in it. So if you look at your regular\n32-bit pointer what's it",
    "start": "3673490",
    "end": "3687289"
  },
  {
    "text": "look like? Well the answer is, 32-bits. And then you got [INAUDIBLE].",
    "start": "3687290",
    "end": "3692842"
  },
  {
    "text": "Right? If you look at a\nfat pointer then one",
    "start": "3692842",
    "end": "3701116"
  },
  {
    "text": "way you can think\nabout looking at this is you got a 4 byte base.",
    "start": "3701116",
    "end": "3706710"
  },
  {
    "text": " And then you have a 4 byte end.",
    "start": "3706710",
    "end": "3717143"
  },
  {
    "text": "So in other words, this is\nwhere it would allocate out that it starts,\nthat's where it ends and then you've got\na 4 byte cur address.",
    "start": "3717143",
    "end": "3729125"
  },
  {
    "text": " So this is where\nthe pointer actually",
    "start": "3729125",
    "end": "3734220"
  },
  {
    "text": "is, within that bounds, right. So basically what happens is\nthat the compiler will generate",
    "start": "3734220",
    "end": "3740550"
  },
  {
    "text": "code, such that when you access\nthese fat pointers this gets updated, but then it'll\nalso check these two things",
    "start": "3740550",
    "end": "3746655"
  },
  {
    "text": "to make sure that\nnothing bad has happened during that upgrade. So for example you can imagine\nthat if I had code like this.",
    "start": "3746655",
    "end": "3753740"
  },
  {
    "start": "3753740",
    "end": "3762240"
  },
  {
    "text": "So I have an end pointer\nand then I allocate 8 bytes.",
    "start": "3762240",
    "end": "3767780"
  },
  {
    "text": "So assuming that we're\non a 32-bit architecture to point to 2 [INAUDIBLE].",
    "start": "3767780",
    "end": "3773480"
  },
  {
    "text": "And then I have some\nwhile loop that it",
    "start": "3773480",
    "end": "3779277"
  },
  {
    "text": "is going to just assign some\nvalue to the pointer and then",
    "start": "3779277",
    "end": "3785138"
  },
  {
    "text": "increment the pointer--\nwhat you'll see",
    "start": "3785138",
    "end": "3791520"
  },
  {
    "text": "is that the current\naddress for this pointer, like at this point in code,\nwill point to the base, right.",
    "start": "3791520",
    "end": "3798700"
  },
  {
    "text": "And then every time we\niterate through here, we can see that we're\neither checking a bound,",
    "start": "3798700",
    "end": "3804067"
  },
  {
    "text": "or incrementing a bound. So at this point we\nwant to dereference it.",
    "start": "3804067",
    "end": "3809099"
  },
  {
    "text": "We can actually check and\nsee, is the current address at that pointer, in this ring.",
    "start": "3809100",
    "end": "3814748"
  },
  {
    "text": "And if it's not you\nthrow in an exception here and so on and so forth. So once again, where\nis this taking place?",
    "start": "3814748",
    "end": "3821765"
  },
  {
    "text": "This Is taking place in new code\nthat the compiler generated. So one question that came up\non the online discussion group,",
    "start": "3821765",
    "end": "3828019"
  },
  {
    "text": "some people were\nsaying, well what if it's instrumented code,\nwhat does that mean, right? So when I say that the--\nthat the compiler generates",
    "start": "3828019",
    "end": "3834359"
  },
  {
    "text": "new code, imagine\nthat there-- this is what you see as a programmer. But before this operation\nactually takes place,",
    "start": "3834359",
    "end": "3842010"
  },
  {
    "text": "imagine the compiler\ninserted some new C code here that basically looks at\nthese base bounds here.",
    "start": "3842010",
    "end": "3847835"
  },
  {
    "text": "And then if there was\nsomething out of bounds it would then do an exit, or an\nabort, or something like that. So that's what it\nmeans to say that there",
    "start": "3847835",
    "end": "3854493"
  },
  {
    "text": "is instrumented code. It's that you take the source\ncode, use the program of C, add some new C source\ncode and then compile",
    "start": "3854493",
    "end": "3860424"
  },
  {
    "text": "that video program. So the basic idea I think\nbehind the fat pointer is pretty simple.",
    "start": "3860424",
    "end": "3866860"
  },
  {
    "text": "There's some\ndisadvantages to this. The biggest\ndisadvantage is that, oh",
    "start": "3866860",
    "end": "3872465"
  },
  {
    "text": "my goodness look how big\nthe pointers are now, right. And so what this means\nis that you can't just take a fat pointer and\npass it to an unmodified,",
    "start": "3872465",
    "end": "3880140"
  },
  {
    "text": "off the shell library. Because it may have\ncertain expectations that pointers are a certain\nsize and we give you this thing,",
    "start": "3880140",
    "end": "3886220"
  },
  {
    "text": "it's just going to--\nit's going to blow up. We also have trouble\nif you want to include these types of pointers and\nstructs, or things like that.",
    "start": "3886220",
    "end": "3892840"
  },
  {
    "text": "Because that can actually change\nthe size of the struct, right. So a very popular\nthing in C code to do",
    "start": "3892840",
    "end": "3898109"
  },
  {
    "text": "is to take like the\nsize of the struct and then like do something\nas a result of that. Like reserve some disc space\nfor a struct of that size,",
    "start": "3898110",
    "end": "3904557"
  },
  {
    "text": "and so on and so forth. So this causes all that\nstuff to blow up, right. Because once again, the pointers\nhave gotten very, very big.",
    "start": "3904557",
    "end": "3911740"
  },
  {
    "text": "And another thing\nwhich is a bit subtle, but it's that these\nfat pointers typically",
    "start": "3911740",
    "end": "3917810"
  },
  {
    "text": "will not be able to be updated\nin an atomic fashion, right. So on 32-bit\narchitectures typically,",
    "start": "3917810",
    "end": "3924630"
  },
  {
    "text": "if you do like a write\nto a 32-bit variable, that write is atomic, right. But now, these pointers are\nthese three integer sized",
    "start": "3924630",
    "end": "3933270"
  },
  {
    "text": "things, right. So if you have any code that\ntakes advantage of the fact that it expects pointer\nwrites to be atomic,",
    "start": "3933270",
    "end": "3939780"
  },
  {
    "text": "then you may get\nin trouble, right. Because you can imagine that\nto do some of these checks,",
    "start": "3939780",
    "end": "3945460"
  },
  {
    "text": "you have to look at the current\naddress and then look at this and then you might\nhave to increment that, and so on and so forth.",
    "start": "3945460",
    "end": "3951570"
  },
  {
    "text": "So this can cause very\nsubtle concurrency bugs if you have code that depends\non that atomacy of fail [INAUDIBLE].",
    "start": "3951570",
    "end": "3958180"
  },
  {
    "text": "So does that all make sense? So that's one\napproach you can do. But kind of like\nelectric fences, this",
    "start": "3958180",
    "end": "3965506"
  },
  {
    "text": "has some nasty side effects\nthat means the people don't typically use that in practice.",
    "start": "3965506",
    "end": "3970980"
  },
  {
    "text": " So now we can start talking\nabout bounds checking,",
    "start": "3970980",
    "end": "3979470"
  },
  {
    "text": "with respect to the shadow\nof the infrastructure that I mentioned in\nthe baggy bounds paper.",
    "start": "3979470",
    "end": "3985890"
  },
  {
    "text": "So the basic idea for\nthe shadow base structure",
    "start": "3985890",
    "end": "3997200"
  },
  {
    "text": "is for each object\nthat you allocate,",
    "start": "3997200",
    "end": "4003670"
  },
  {
    "text": "you want to store how\nbig the object is. ",
    "start": "4003670",
    "end": "4013650"
  },
  {
    "text": "Right, so for example,\nif you have some pointer",
    "start": "4013650",
    "end": "4018859"
  },
  {
    "text": "that you call\nmalloc on right, you need to store that size\nof that object there,",
    "start": "4018860",
    "end": "4027460"
  },
  {
    "text": "and then note that if you\nhave some thing that's like a static variable\nlike this, right,",
    "start": "4027460",
    "end": "4035984"
  },
  {
    "text": "the compiler can\nautomatically figure out what the bounds\nare for that thing there, statically speaking.",
    "start": "4035984",
    "end": "4041839"
  },
  {
    "text": "So for each one\nof these pointers you need to interpose\nsomehow on two operations.",
    "start": "4041840",
    "end": "4051415"
  },
  {
    "text": " Basically you do arithmetic.",
    "start": "4051415",
    "end": "4056635"
  },
  {
    "text": " So this is things like q\nequals p plus 7, or whatever.",
    "start": "4056635",
    "end": "4069930"
  },
  {
    "text": "And then you want to\ninterpose on dereferencing.",
    "start": "4069930",
    "end": "4075550"
  },
  {
    "text": "So this is something\nlike q equals",
    "start": "4075550",
    "end": "4082399"
  },
  {
    "text": "a or something like that.  So what's interesting\nis that you might think,",
    "start": "4082399",
    "end": "4089730"
  },
  {
    "text": "well why can't we just\nrely on the reference when interposing stuff?",
    "start": "4089730",
    "end": "4096089"
  },
  {
    "text": "Why do we have to look at\nthis point arithmetic here? But similarly you might\nwonder the other thing.",
    "start": "4096090",
    "end": "4102170"
  },
  {
    "text": "Like why can't you\njust deal with one of these non [INAUDIBLE]\ninterpose [INAUDIBLE]? So you can't just\nsignal an error",
    "start": "4102170",
    "end": "4109684"
  },
  {
    "text": "if you see the arithmetic going\nout of bounds because in c that may or may not be there.",
    "start": "4109684",
    "end": "4117040"
  },
  {
    "text": "So in other words, a very common\nmedium is C and C++ is you might have a pointer that\npoints to one pass the valid end",
    "start": "4117040",
    "end": "4124694"
  },
  {
    "text": "of an object right, and then you\nuse that as a stop condition, right. So you iterate to the\nobject and once you",
    "start": "4124695",
    "end": "4129909"
  },
  {
    "text": "hit that end pointer, that's\nwhen you actually stop the loop or whatever. So if we just\ninterpose on arithmetic",
    "start": "4129910",
    "end": "4136908"
  },
  {
    "text": "and we always\ncause a hard fault, when we see a pointer\ngo out of bounds, that may actually break a lot of\nlegitimate applications, right.",
    "start": "4136908",
    "end": "4144060"
  },
  {
    "text": "So we can't just\ninterpose on that. And so you might say, well\nwhy can't you just interpose",
    "start": "4144060",
    "end": "4149465"
  },
  {
    "text": "on the reference thing, and\nyou just-- when we notice that you've cut\nsomething out of bounds, we'll just read there and there.",
    "start": "4149466",
    "end": "4155845"
  },
  {
    "text": "Well the challenge\nthere is that how do you know it's out of bounds? Right, it's the-- it's the\narithmetic in our positioning",
    "start": "4155845",
    "end": "4161278"
  },
  {
    "text": "that officially allows\nus to tell whether or not this thing's going to\nbe legal here, right. Because it's the\ninterpositioning",
    "start": "4161279",
    "end": "4167339"
  },
  {
    "text": "on the arithmetic that\nallows us to track where the pointer\nis with respect to it's original baseline.",
    "start": "4167340",
    "end": "4174120"
  },
  {
    "text": "So that's the basic idea there. ",
    "start": "4174120",
    "end": "4181740"
  },
  {
    "text": "And so the next question\nis how do we actually implement the bounds checking? ",
    "start": "4181740",
    "end": "4189549"
  },
  {
    "text": "Because basically we need some\nway to map a particular pointer",
    "start": "4189550",
    "end": "4195719"
  },
  {
    "text": "address to some type of bounds\ninformation for that pointer. And so a lot of your\nprevious solutions",
    "start": "4195720",
    "end": "4202420"
  },
  {
    "text": "use things like, for example,\nlike a hash table, or a tree, right that will allow\nyou to do lookups right, and stay the gray.",
    "start": "4202420",
    "end": "4208620"
  },
  {
    "text": "So given a pointer\naddress, I do some lookup in this data structure, figure\nout what the bounds are.",
    "start": "4208620",
    "end": "4214190"
  },
  {
    "text": "Given those bounds I\ncan then figure out if I want to allow the\naction to take place or not. Now the problem with that\nis that it's a slow lookup,",
    "start": "4214190",
    "end": "4221917"
  },
  {
    "text": "right because these data\nstructures you're thinking it's a tree, or you're going\nthrough a bunch of branches before you can actually\nhit the value potentially.",
    "start": "4221917",
    "end": "4229408"
  },
  {
    "text": "And even if it's a hash\ntable where there's an overflow in the bucket\nyou got to follow chains, or do you're code,\nor things like that.",
    "start": "4229409",
    "end": "4236739"
  },
  {
    "text": "So the baggy bounds\npaper that we are about to look at\nactually figured out",
    "start": "4236740",
    "end": "4242585"
  },
  {
    "text": "a very efficient data structure\nthat tracked to these bounds, to make that bound\nchecking very fat.",
    "start": "4242585",
    "end": "4249480"
  },
  {
    "text": "So let's just step\ninto that right now. But before we go into\nthat let me very briefly talk about how buddy\nallocation works.",
    "start": "4249480",
    "end": "4255110"
  },
  {
    "text": "Because that's one of\nthe things that came up in a lot of the questions. So one thing you will see for\nthese papers is that a lot",
    "start": "4255110",
    "end": "4260830"
  },
  {
    "text": "of times they are not\nself-contained, right. So they will mention things that\nthey will assume that you know, but you may not know them.",
    "start": "4260830",
    "end": "4267135"
  },
  {
    "text": "Don't get discouraged by that. That happens to\nme too sometimes. These papers are\nwritten in a way they assume a lot\nof prior knowledge,",
    "start": "4267135",
    "end": "4272991"
  },
  {
    "text": "so don't get\ndiscouraged by that. Luckily we actually\naccess to the internet we can look up\nsome of that stuff. Can you imagine what\nhappened in our parents time?",
    "start": "4272991",
    "end": "4278989"
  },
  {
    "text": "They just didn't\nunderstand stuff they just had to go home, right. So don't be afraid to look\nstuff up to get to Wikipedia",
    "start": "4278990",
    "end": "4285915"
  },
  {
    "text": "it's mostly correct.  So how does-- how does the\nbuddy allocation system work?",
    "start": "4285915",
    "end": "4297600"
  },
  {
    "text": "So basically what\nit does at first it treats unallocated\nmemory as one big block.",
    "start": "4297600",
    "end": "4304196"
  },
  {
    "text": "OK. And then when you\nrequest a smaller block for dynamic allocation, it\ntries to split that address",
    "start": "4304196",
    "end": "4311662"
  },
  {
    "text": "base using powers of 2\nuntil it finds a block that is just big enough to work.",
    "start": "4311662",
    "end": "4317603"
  },
  {
    "text": "So let's say a request\ncame in and say A is going to equal to malloc 28.",
    "start": "4317603",
    "end": "4326835"
  },
  {
    "text": "28 bytes. And let's just say\nthis toy example is only 128 bytes of memory total. So the buddy allocator\nis going to look at this",
    "start": "4326835",
    "end": "4333603"
  },
  {
    "text": "and say, well I have\n128 bytes of memory, but it's too wasteful to\nallocate this whole thing to this 28 byte request.",
    "start": "4333603",
    "end": "4338710"
  },
  {
    "text": "So I'm going to split\nthis request in two and then see if I have smaller\nblock that's just big enough.",
    "start": "4338710",
    "end": "4344869"
  },
  {
    "text": "So it's going to say, OK put\nthis to 0 to 64 and 64 to 128. Ah OK, but this block here\nis still too big, right.",
    "start": "4344870",
    "end": "4351932"
  },
  {
    "text": "Basically what the buddy\nalgorithm wants to do is find a block such\nthat the allocated data in the real\nobject, 28 bytes,",
    "start": "4351932",
    "end": "4358996"
  },
  {
    "text": "is at least half the\nsize of that block. So buddy allocator says,\nOK this thing over here",
    "start": "4358996",
    "end": "4364470"
  },
  {
    "text": "is still too big. So what it's going to do is\nit's going to split the memory space again, right.",
    "start": "4364470",
    "end": "4371940"
  },
  {
    "text": "So from 0 to 32 and\nthen it's going to say,",
    "start": "4371940",
    "end": "4378050"
  },
  {
    "text": "ah OK 28 bytes that is more\nthan half the size of this block here. So now this block is going\nto be allocated to A. OK,",
    "start": "4378050",
    "end": "4388726"
  },
  {
    "text": "and so it gets\nthis address here. Now let's say that we have\nanother question comes in for B",
    "start": "4388726",
    "end": "4397910"
  },
  {
    "text": "and let's say we want\nto malloc 50 right.",
    "start": "4397910",
    "end": "4403030"
  },
  {
    "text": "So what's going to happen is\nthat the buddy allocator will say, ah OK I actually\nhave a block here",
    "start": "4403030",
    "end": "4409409"
  },
  {
    "text": "that's big enough, right. 50 Is greater than half\nthe size of this thing so I'll just allocate\nthat right there.",
    "start": "4409410",
    "end": "4415240"
  },
  {
    "text": "So we have this system, or\nsetup, where we have A here,",
    "start": "4415240",
    "end": "4421740"
  },
  {
    "text": "and then we have\nB here, and then let's say we had another request\nthat came in for 20 bytes.",
    "start": "4421740",
    "end": "4431635"
  },
  {
    "text": " This is actually\npretty straightforward because we can put\nthat right here, right.",
    "start": "4431635",
    "end": "4437910"
  },
  {
    "text": "So then you have something\nthat looks like this.",
    "start": "4437910",
    "end": "4443496"
  },
  {
    "text": "Then what's interesting is that\nwhen you deallocate memory, if you have to\ndeallocate a block that",
    "start": "4443496",
    "end": "4449776"
  },
  {
    "text": "are next to each other\nand are the same size, the buddy allocator\nwill merge them into a block that's\ntwice as big, right.",
    "start": "4449776",
    "end": "4455700"
  },
  {
    "text": "So if we had free let's say C\nthen we go to this situation,",
    "start": "4455700",
    "end": "4469720"
  },
  {
    "text": "we can't do any merging, because\nthis is the only possible block that this one could\nhave been merged with.",
    "start": "4469720",
    "end": "4475110"
  },
  {
    "text": "It's the same size, but\nthis things still occupied. So then if we do a\nfree on A, then we",
    "start": "4475110",
    "end": "4489830"
  },
  {
    "text": "have this situation here. Right, where these\ntwo 32 byte blocks",
    "start": "4489830",
    "end": "4496120"
  },
  {
    "text": "were merged into one size 64,\nand that this one, a size 64 is still out there.",
    "start": "4496120",
    "end": "4501405"
  },
  {
    "text": "Right, so it's called the buddy\nsystem because once again, whenever you have two\nadjacent blocks that",
    "start": "4501405",
    "end": "4506560"
  },
  {
    "text": "are of the same\nsize and that could be merged to form\nan aligned block,",
    "start": "4506560",
    "end": "4511960"
  },
  {
    "text": "then the system will merge that\nbuddy with this other buddy and then create that new\nblock that's twice as big.",
    "start": "4511960",
    "end": "4518253"
  },
  {
    "text": "So the thing that's\nnice about this system is that it's very simple to\nfigure out where buddy's are.",
    "start": "4518253",
    "end": "4526322"
  },
  {
    "text": "Because you can do\nvery cutesy arithmetic, like the buddy bounds system--\nbaggy bounds system works. But anyway I'm not\ngoing into details.",
    "start": "4526322",
    "end": "4532870"
  },
  {
    "text": "This is basically how\nbuddy allocation works. Does that make sense? Right, and one\nquestion that came up",
    "start": "4532870",
    "end": "4539210"
  },
  {
    "text": "a lot in all my discussions,\nisn't this wasteful? Right, so for example, imagine\nthat up here at the beginning",
    "start": "4539210",
    "end": "4547510"
  },
  {
    "text": "I had a request for\nsize 65 bytes, right. So if I have a\nrequest for 65 bytes,",
    "start": "4547510",
    "end": "4554889"
  },
  {
    "text": "I would allocate this whole\nstructure up here and then there's-- actually you're out of\ndynamic memory and can't do any",
    "start": "4554890",
    "end": "4560034"
  },
  {
    "text": "more allocations. And the answer is\nyes, that is wasteful. But once again, it's\na trade off, right. Because it's very easy to do\nthese calculations on how to do",
    "start": "4560034",
    "end": "4567060"
  },
  {
    "text": "merging and stuff like that. So if you want finer\ngrain allocation, there are other\nvalid ones for that. It's outside the scope\nof the lecture so,",
    "start": "4567060",
    "end": "4573728"
  },
  {
    "text": "we can buffer that\noffline if you want. That's basically how the buddy--\nsorry the, the buddy allocator",
    "start": "4573728",
    "end": "4579190"
  },
  {
    "text": "works. So what is the baggy\nbounds system going to do?",
    "start": "4579190",
    "end": "4586126"
  },
  {
    "text": "Well, it is going through\na y, on couple of tricks. ",
    "start": "4586126",
    "end": "4601400"
  },
  {
    "text": "So the first idea is you\nround up each allocation",
    "start": "4601400",
    "end": "4612830"
  },
  {
    "text": "to a power of 2, and you align\nthe request to that power of 2.",
    "start": "4612830",
    "end": "4626245"
  },
  {
    "start": "4626245",
    "end": "4633129"
  },
  {
    "text": "Right, so essentially the\nbuddy allocators very nice because it handles a lot\nof that for you, right. It naturally will do\nthat kind of thing.",
    "start": "4633129",
    "end": "4638880"
  },
  {
    "text": "Because that's just the way that\nit allocates and deallocates to memory.",
    "start": "4638880",
    "end": "4643930"
  },
  {
    "text": "And so the second thing\nthat's going to happen, baggy bounds system, is you\nexpress each bound as log base",
    "start": "4643930",
    "end": "4661530"
  },
  {
    "text": "2 of the allocation size. ",
    "start": "4661530",
    "end": "4668289"
  },
  {
    "text": "Right, and so what this means--\nand so why can we do this? Well once again all of\nour allocation sizes",
    "start": "4668290",
    "end": "4673950"
  },
  {
    "text": "are powers of 2, right. So we don't need very\nmany bits to represent",
    "start": "4673950",
    "end": "4679511"
  },
  {
    "text": "how big a particular\nallocation size is. So for example, if your\nallocation size is 16,",
    "start": "4679512",
    "end": "4690602"
  },
  {
    "text": "then you just need\nfour-- the log rhythm of that, 4 bits of the\nallocation size, right.",
    "start": "4690602",
    "end": "4697420"
  },
  {
    "text": "Does that make sense? Right, this another\npopular question here. This is why you only\nneed small number of bits",
    "start": "4697420",
    "end": "4703770"
  },
  {
    "text": "here, because we're\nbasically forcing the allocation sizes hit this\nquantized way that you grow.",
    "start": "4703770",
    "end": "4710043"
  },
  {
    "text": "Like if you could\nonly have something, let's say 16 bytes or 32 bytes. You can't have for\nexample, 33 bytes.",
    "start": "4710043",
    "end": "4716135"
  },
  {
    "text": " And then the third thing that\nbaggy bounds is going to do",
    "start": "4716136",
    "end": "4721730"
  },
  {
    "text": "is store the limit info in a\nlinear array 1 byte per entry",
    "start": "4721730",
    "end": "4744818"
  },
  {
    "text": "but we're going\nto allocate memory",
    "start": "4744818",
    "end": "4752258"
  },
  {
    "text": "at the granularity of a slot.  Which in the paper they used\n16 bytes as the slot width.",
    "start": "4752258",
    "end": "4764530"
  },
  {
    "text": "So for example,\nnow this next one, this is 1 bit that wasn't\nactually specifically said in the paper which\nif you don't grasp",
    "start": "4764530",
    "end": "4771030"
  },
  {
    "text": "it'll make the paper very\ntricky to understand, right. So now you can have a slot\nsize which is equal to 16,",
    "start": "4771030",
    "end": "4780190"
  },
  {
    "text": "so if you do p equals malloc\n16 so what's going to happen?",
    "start": "4780190",
    "end": "4788350"
  },
  {
    "text": "So in this bounds\ntable you're going to say take that pointer\nplot it by plot size it's",
    "start": "4788350",
    "end": "4802600"
  },
  {
    "text": "going to equal 4, right. So in that bounds\ntable we're going to put the logarithm of the\nallocation size in the table.",
    "start": "4802600",
    "end": "4811829"
  },
  {
    "text": "Does that make sense? OK, now what the\ntricky thing is, let's say that you have\nsomething like this. ",
    "start": "4811830",
    "end": "4822570"
  },
  {
    "text": "Right, so let's say\nthat you out 32 bytes. What is the bounds table\ngoing to look like there?",
    "start": "4822570",
    "end": "4829050"
  },
  {
    "text": "So here we actually have\nto update the bounds table to abbreviate your p, or\nsorry t for the size you need.",
    "start": "4829050",
    "end": "4837920"
  },
  {
    "text": "But that fit the\nbounds table twice. ",
    "start": "4837920",
    "end": "4844969"
  },
  {
    "text": "Right, once for the\nfirst slot memory that this allocation takes up. And then a second time for that\nsecond slot that it takes up.",
    "start": "4844970",
    "end": "4856645"
  },
  {
    "text": " Right, so once again 32\nis the allocation size.",
    "start": "4856645",
    "end": "4863740"
  },
  {
    "text": "This is the log of\nthat allocation size. So for the two slots that\nthis memory takes up,",
    "start": "4863740",
    "end": "4869250"
  },
  {
    "text": "we're going to update\nthe bounds table twice. Does that makes sense? Right, and this\nis really the key",
    "start": "4869250",
    "end": "4875190"
  },
  {
    "text": "that I think for a\nlot of people that's going to make the paper make\nsense or not make sense, right. Because that bounds table\nmultiple times if any",
    "start": "4875190",
    "end": "4881667"
  },
  {
    "text": "outside the allocation. AUDIENCE: Can you repeat\nthat for me again? PROFESSOR: Excuse me? AUDIENCE: Can you\nrepeat that again? PROFESSOR: Oh yeah,\nyeah, sure, sure. So basically what\nthe idea is that I",
    "start": "4881667",
    "end": "4887826"
  },
  {
    "text": "mean you've got this\nbounds table here and it's got a bunch of entries.",
    "start": "4887826",
    "end": "4894230"
  },
  {
    "text": "But it basically\nneeds entries to cover all of p size, all\nthe allocation size.",
    "start": "4894230",
    "end": "4901167"
  },
  {
    "text": "OK, so in this case it was very\nsimple because basically this is just one slot,\ndue to the size.",
    "start": "4901167",
    "end": "4906744"
  },
  {
    "text": "Here it's multiple\nslot sizes, right. So what's going to happen\nis that imagine then that we had a pointer that's\nmoving in the range of p.",
    "start": "4906744",
    "end": "4913570"
  },
  {
    "text": "You have to have some\nof the back end table slot for each one of those\nplaces where p [INAUDIBLE],",
    "start": "4913570",
    "end": "4918910"
  },
  {
    "text": "right. And so it's this\nsecond piece that makes the paper a little\nbit confusing I think. But it doesn't really go\ninto depth about that,",
    "start": "4918910",
    "end": "4926140"
  },
  {
    "text": "but this is how that works.  OK so armed with\nthe bounds table",
    "start": "4926140",
    "end": "4940357"
  },
  {
    "text": "stuff what happens if we have\na C code that looks like this?",
    "start": "4940357",
    "end": "4950806"
  },
  {
    "text": "So you have a pointer,\np-prime, you derive it from p,",
    "start": "4950806",
    "end": "4956870"
  },
  {
    "text": "we would add some variable i. So how do you get the size of\nthe allocation belonging to p?",
    "start": "4956870",
    "end": "4967340"
  },
  {
    "text": "Well you look in the table\nusing this lookup here.",
    "start": "4967340",
    "end": "4976619"
  },
  {
    "start": "4976620",
    "end": "4985910"
  },
  {
    "text": "Right, so the size of the data\nthat's been allocated to p is going to be equal to\n1 and then when you Left",
    "start": "4985910",
    "end": "4991910"
  },
  {
    "text": "Shift that by\nlooking at the table, taking that pointer value,\nand then Right Shifting that",
    "start": "4991910",
    "end": "4997475"
  },
  {
    "text": "by the log of the table size. Right, if the\narithmetic works out because of the way\nthat we're binding",
    "start": "4997475",
    "end": "5004385"
  },
  {
    "text": "pointers to the\ntable bounds, right. So this will get us-- this\nthing right here, will get us",
    "start": "5004385",
    "end": "5012620"
  },
  {
    "text": "the log of the sides. And then this thing\nover here basically expands that into like\nthe regular value, right.",
    "start": "5012620",
    "end": "5019280"
  },
  {
    "text": "So for example, if the\nsize of this pointer were 32, in terms of bytes\nwe've allocated, right.",
    "start": "5019280",
    "end": "5026890"
  },
  {
    "text": "This is going to get us five\nwhen we look at the table, then when we Left\nShift it this way, Left",
    "start": "5026890",
    "end": "5032660"
  },
  {
    "text": "Shift the one this\nway, then we're going to get 32 back\nagain from here.",
    "start": "5032660",
    "end": "5037810"
  },
  {
    "text": "OK. And then we want to find\nthe base of that pointer.",
    "start": "5037810",
    "end": "5046738"
  },
  {
    "text": "Take a pointer\nitself and then we're",
    "start": "5046738",
    "end": "5054929"
  },
  {
    "text": "going to and that\nwith the side minus 1.",
    "start": "5054930",
    "end": "5064549"
  },
  {
    "text": "Now what this is going to\ndo is, this is actually going to give us a mass,\nthat you can think of it.",
    "start": "5064549",
    "end": "5069699"
  },
  {
    "text": "And that mass is going to allow\nus to recover the base here. So imagine that\nyour size equals 16.",
    "start": "5069700",
    "end": "5080099"
  },
  {
    "text": "So 16 equals this in binary.",
    "start": "5080100",
    "end": "5089768"
  },
  {
    "text": "Right, there's a bunch\nof zeros off this way. So we've got a 1 here, we've\ngot some zeros over here.",
    "start": "5089768",
    "end": "5095300"
  },
  {
    "text": "So if we look at the bit-wide\ninverse of 16 minus 1,",
    "start": "5095300",
    "end": "5107394"
  },
  {
    "text": "then-- actually sorry. So if we look at 16 minus 1, so\nwhat's that going to look like?",
    "start": "5107394",
    "end": "5112449"
  },
  {
    "text": "60 minus 1 we're going to\nlook like right, something",
    "start": "5112450",
    "end": "5119620"
  },
  {
    "text": "like this. OK. And if we take the\ninverse of that",
    "start": "5119620",
    "end": "5126193"
  },
  {
    "text": "what is that going to give us? ",
    "start": "5126193",
    "end": "5132535"
  },
  {
    "text": "Right, in binary. So basically this thing here\nallows us to basically clear the bit that essentially\nwould be offset",
    "start": "5132536",
    "end": "5140860"
  },
  {
    "text": "from that valid pointer\nand just give us the base of that pointer. OK.",
    "start": "5140860",
    "end": "5146260"
  },
  {
    "text": "And so once we've\ngot this, then it's very simple to check whether\nthis pointer's in bounds, right.",
    "start": "5146260",
    "end": "5151310"
  },
  {
    "text": "So we can basically just\ncheck whether p-prime is greater than or equal\nto base and whether p-prime",
    "start": "5151310",
    "end": "5164989"
  },
  {
    "text": "minus the base is\nless than size.",
    "start": "5164990",
    "end": "5173422"
  },
  {
    "text": "This is just a straightforward\nthing you do, right. Just seeing whether\nthat derived pointer exists within the bounds\nof this [INAUDIBLE].",
    "start": "5173422",
    "end": "5179664"
  },
  {
    "text": "Right, so at this point things\nare pretty straightforward. Now they have like a\noptimized check in the paper, I'm not going to go\ninto that detail.",
    "start": "5179664",
    "end": "5185690"
  },
  {
    "text": "But suffice it to say that\nall the binary arithmetic, it resolves down\nto the same thing. There's just some\nclever tricks there",
    "start": "5185690",
    "end": "5191380"
  },
  {
    "text": "to avoid some of the explicit\ncalculations we do here. That's the basic idea.",
    "start": "5191380",
    "end": "5196690"
  },
  {
    "text": "And so the fifth trick that\nthe baggy bounds system uses",
    "start": "5196690",
    "end": "5209140"
  },
  {
    "text": "is that it uses the virtual\nmemory system to prevent out",
    "start": "5209140",
    "end": "5219915"
  },
  {
    "text": "of bounds [INAUDIBLE] right. So the idea here is\nthat-- how much time",
    "start": "5219915",
    "end": "5227266"
  },
  {
    "text": "do we have by the way? Probably like zero? So the basic idea\nhere is that if we",
    "start": "5227266",
    "end": "5232489"
  },
  {
    "text": "have a pointer [INAUDIBLE]\nhere, that we detect is out of bounds, what we can do\nis actually set the high order",
    "start": "5232490",
    "end": "5239145"
  },
  {
    "text": "bit on a pointer, right. And by doing that we guarantee\nthat pointer is dereferenced,",
    "start": "5239145",
    "end": "5246349"
  },
  {
    "text": "then the caging hardware's\ngoing to be [INAUDIBLE], we're going to throw\na hard error, right. Now in and of\nitself, just setting",
    "start": "5246350",
    "end": "5251626"
  },
  {
    "text": "that bit does not\ncause a problem. It's only when you\ndereference that pointer that you get into problems.",
    "start": "5251626",
    "end": "5257540"
  },
  {
    "text": "OK?",
    "start": "5257540",
    "end": "5259090"
  }
]