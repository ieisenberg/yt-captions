[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "The syntax tree is a useful intermediate representation\n(IR) that is independent of both the source",
    "start": "1000",
    "end": "7060"
  },
  {
    "text": "language and the target ISA.\nIt contains information about the sequencing",
    "start": "7060",
    "end": "12200"
  },
  {
    "text": "and grouping of operations that isn't apparent\nin individual machine language instructions.",
    "start": "12200",
    "end": "18020"
  },
  {
    "text": "And it allows frontends for different source\nlanguages to share a common backend targeting",
    "start": "18020",
    "end": "22730"
  },
  {
    "text": "a specific ISA.\nAs we'll see, the backend processing can be",
    "start": "22730",
    "end": "27619"
  },
  {
    "text": "split into two sub-phases.\nThe first performs machine-independent optimizations",
    "start": "27619",
    "end": "33730"
  },
  {
    "text": "on the IR.\nThe optimized IR is then translated by the",
    "start": "33730",
    "end": "40370"
  },
  {
    "text": "code generation phase into sequences of instructions\nfor the target ISA.",
    "start": "40370",
    "end": "46379"
  },
  {
    "start": "46000",
    "end": "46000"
  },
  {
    "text": "A common IR is to reorganize the syntax tree\ninto what's called a control flow graph (CFG).",
    "start": "46380",
    "end": "53510"
  },
  {
    "text": "Each node in the graph is a sequence of assignment\nand expression evaluations that ends with",
    "start": "53510",
    "end": "58809"
  },
  {
    "text": "a branch.\nThe nodes are called \"basic blocks\" and represent",
    "start": "58809",
    "end": "62989"
  },
  {
    "text": "sequences of operations that are executed\nas a unit.",
    "start": "62989",
    "end": "66869"
  },
  {
    "text": "Once the first operation in a basic block\nis performed, the remaining operations will",
    "start": "66870",
    "end": "71470"
  },
  {
    "text": "also be performed without any other intervening\noperations.",
    "start": "71470",
    "end": "76000"
  },
  {
    "text": "This knowledge lets us consider many optimizations,\ne.g., temporarily storing variable values",
    "start": "76000",
    "end": "81670"
  },
  {
    "text": "in registers, that would be complicated if\nthere was the possibility that other operations",
    "start": "81670",
    "end": "87240"
  },
  {
    "text": "outside the block might also need to access\nthe variable values while we were in the middle",
    "start": "87240",
    "end": "91939"
  },
  {
    "text": "of this block.\nThe edges of the graph indicate the branches",
    "start": "91940",
    "end": "96869"
  },
  {
    "text": "that take us to another basic block.\nFor example, here's the CFG for GCD.",
    "start": "96869",
    "end": "104170"
  },
  {
    "start": "100000",
    "end": "100000"
  },
  {
    "text": "If a basic block ends with a conditional branch,\nthere are two edges, labeled \"T\" and \"F\" leaving",
    "start": "104170",
    "end": "109548"
  },
  {
    "text": "the block that indicate the next block to\nexecute depending on the outcome of the test.",
    "start": "109549",
    "end": "115159"
  },
  {
    "text": "Other blocks have only a single departing\narrow, indicating that the block always transfers",
    "start": "115159",
    "end": "120360"
  },
  {
    "text": "control to the block indicated by the arrow.\nNote that if we can arrive at a block from",
    "start": "120360",
    "end": "126350"
  },
  {
    "text": "only a single predecessor block, then any\nknowledge we have about operations and variables",
    "start": "126350",
    "end": "131610"
  },
  {
    "text": "from the predecessor block can be carried\nover to the destination block.",
    "start": "131610",
    "end": "136820"
  },
  {
    "text": "For example, if the \"if (x > y)\" block has\ngenerated code to load the values of x and",
    "start": "136820",
    "end": "143489"
  },
  {
    "text": "y into registers, both destination blocks\ncan use that information and use the appropriate",
    "start": "143489",
    "end": "149700"
  },
  {
    "text": "registers without having to generate their\nown LDs.",
    "start": "149700",
    "end": "153510"
  },
  {
    "text": "But if a block has multiple predecessors,\nsuch optimizations are more constrained.",
    "start": "153510",
    "end": "158950"
  },
  {
    "text": "We can only use knowledge that is common to\n*all* the predecessor blocks.",
    "start": "158950",
    "end": "163680"
  },
  {
    "text": "The CFG looks a lot like the state transition\ndiagram for a high-level FSM!",
    "start": "163680",
    "end": "169329"
  },
  {
    "text": "We'll optimize the IR by performing multiple\npasses over the CFG.",
    "start": "169330",
    "end": "176269"
  },
  {
    "text": "Each pass performs a specific, simple optimization.\nWe'll repeatedly apply the simple optimizations",
    "start": "176269",
    "end": "183120"
  },
  {
    "text": "in multiple passes, until we can't find any\nfurther optimizations to perform.",
    "start": "183120",
    "end": "188849"
  },
  {
    "text": "Collectively, the simple optimizations can\ncombine to achieve very complex optimizations.",
    "start": "188849",
    "end": "195340"
  },
  {
    "text": "Here are some example optimizations:\nWe can eliminate assignments to variables",
    "start": "195340",
    "end": "199940"
  },
  {
    "text": "that are never used and basic blocks that\nare never reached.",
    "start": "199940",
    "end": "203230"
  },
  {
    "text": "This is called \"dead code elimination\".\nIn constant propagation, we identify variables",
    "start": "203230",
    "end": "210280"
  },
  {
    "text": "that have a constant value and substitute\nthat constant in place of references to the",
    "start": "210280",
    "end": "214810"
  },
  {
    "text": "variable.\nWe can compute the value of expressions that",
    "start": "214810",
    "end": "217989"
  },
  {
    "text": "have constant operands.\nThis is called \"constant folding\".",
    "start": "217989",
    "end": "223269"
  },
  {
    "start": "222000",
    "end": "222000"
  },
  {
    "text": "To illustrate how these optimizations work,\nconsider this slightly silly source program",
    "start": "223269",
    "end": "228260"
  },
  {
    "text": "and its CFG.\nNote that we've broken down complicated expressions",
    "start": "228260",
    "end": "232409"
  },
  {
    "text": "into simple binary operations, using temporary\nvariable names (e.g, \"_t1\") to name the intermediate",
    "start": "232409",
    "end": "240150"
  },
  {
    "text": "results.\nLet's get started!",
    "start": "240150",
    "end": "242989"
  },
  {
    "text": "The dead code elimination pass can remove\nthe assignment to Z in the first basic block",
    "start": "242989",
    "end": "247879"
  },
  {
    "text": "since Z is reassigned in subsequent blocks\nand the intervening code makes no reference",
    "start": "247879",
    "end": "253000"
  },
  {
    "text": "to Z.\nNext we look for variables with constant values.",
    "start": "253000",
    "end": "258280"
  },
  {
    "text": "Here we find that X is assigned the value\nof 3 and is never re-assigned, so we can replace",
    "start": "258280",
    "end": "263940"
  },
  {
    "text": "all references to X with the constant 3.\nNow perform constant folding [CLICK], evaluating",
    "start": "263940",
    "end": "270460"
  },
  {
    "text": "any constant expressions.\nHere's the updated CFG, ready for another",
    "start": "270460",
    "end": "276680"
  },
  {
    "text": "round of optimizations.\nFirst dead code elimination.",
    "start": "276680",
    "end": "281600"
  },
  {
    "text": "Then constant propagation.\nAnd, finally, constant folding.",
    "start": "281600",
    "end": "287970"
  },
  {
    "text": "So after two rounds of these simple operations,\nwe've thinned out a number of assignments.",
    "start": "287970",
    "end": "293190"
  },
  {
    "text": "On to round three!\nDead code elimination.",
    "start": "293190",
    "end": "296580"
  },
  {
    "text": "And here we can determine the outcome of a\nconditional branch, eliminating entire basic",
    "start": "296580",
    "end": "301400"
  },
  {
    "text": "blocks from the IR, either because they're\nnow empty or because they can no longer be",
    "start": "301400",
    "end": "307280"
  },
  {
    "text": "reached.\nWow, the IR is now considerably smaller.",
    "start": "307280",
    "end": "313970"
  },
  {
    "text": "Next is another application of constant propagation.\nAnd then constant folding.",
    "start": "313970",
    "end": "320570"
  },
  {
    "text": "Followed by more dead code elimination.\nThe passes continue until we discover there",
    "start": "320570",
    "end": "326380"
  },
  {
    "text": "are no further optimizations to perform, so\nwe're done!",
    "start": "326380",
    "end": "331200"
  },
  {
    "text": "Repeated applications of these simple transformations\nhave transformed the original program into",
    "start": "331200",
    "end": "335700"
  },
  {
    "text": "an equivalent program that computes the same\nfinal value for Z.",
    "start": "335700",
    "end": "340919"
  },
  {
    "text": "We can do more optimizations by adding passes:\neliminating redundant computation of common",
    "start": "340919",
    "end": "346669"
  },
  {
    "text": "subexpressions, moving loop-independent calculations\nout of loops,",
    "start": "346669",
    "end": "351320"
  },
  {
    "text": "unrolling short loops to perform the effect\nof, say, two iterations in a single loop execution,",
    "start": "351320",
    "end": "357100"
  },
  {
    "text": "saving some of the cost of increment and test\ninstructions.",
    "start": "357100",
    "end": "361449"
  },
  {
    "text": "Optimizing compilers have a sophisticated\nset of optimizations they employ to make smaller",
    "start": "361449",
    "end": "366770"
  },
  {
    "text": "and more efficient code.\nOkay, we're done with optimizations.",
    "start": "366770",
    "end": "371370"
  },
  {
    "start": "369000",
    "end": "369000"
  },
  {
    "text": "Now it's time to generate instructions for\nthe target ISA.",
    "start": "371370",
    "end": "375169"
  },
  {
    "text": "First the code generator assigns each variable\na dedicated register.",
    "start": "375170",
    "end": "379650"
  },
  {
    "text": "If we have more variables than registers,\nsome variables are stored in memory and we'll",
    "start": "379650",
    "end": "383810"
  },
  {
    "text": "use LD and ST to access them as needed.\nBut frequently-used variables will almost",
    "start": "383810",
    "end": "389389"
  },
  {
    "text": "certainly live as much as possible in registers.\nUse our templates from before to translate",
    "start": "389389",
    "end": "395139"
  },
  {
    "text": "each assignment and operation into one or\nmore instructions.",
    "start": "395139",
    "end": "399569"
  },
  {
    "text": "The emit the code for each block, adding the\nappropriate labels and branches.",
    "start": "399569",
    "end": "404789"
  },
  {
    "text": "Reorder the basic block code to eliminate\nunconditional branches wherever possible.",
    "start": "404789",
    "end": "410039"
  },
  {
    "text": "And finally perform any target-specific peephole\noptimizations.",
    "start": "410039",
    "end": "415710"
  },
  {
    "start": "415000",
    "end": "415000"
  },
  {
    "text": "Here's the original CFG for the GCD code,\nalong with the slightly optimized CFG.",
    "start": "415710",
    "end": "422300"
  },
  {
    "text": "GCD isn't as trivial as the previous example,\nso we've only been able to do a bit of constant",
    "start": "422300",
    "end": "427360"
  },
  {
    "text": "propagation and constant folding.\nNote that we can't propagate knowledge about",
    "start": "427360",
    "end": "432240"
  },
  {
    "text": "variable values from the top basic block to\nthe following \"if\" block since the \"if\" block",
    "start": "432240",
    "end": "437690"
  },
  {
    "text": "has multiple predecessors.\nHere's how the code generator will process",
    "start": "437690",
    "end": "442690"
  },
  {
    "text": "the optimized CFG.\nFirst, it dedicates registers to hold the",
    "start": "442690",
    "end": "447380"
  },
  {
    "text": "values for x and y.\nThen, it emits the code for each of the basic",
    "start": "447380",
    "end": "452080"
  },
  {
    "text": "blocks.\nNext, reorganize the order of the basic blocks",
    "start": "452080",
    "end": "455520"
  },
  {
    "text": "to eliminate unconditional branches wherever\npossible.",
    "start": "455520",
    "end": "459580"
  },
  {
    "text": "The resulting code is pretty good.\nThere no obvious changes that a human programmer",
    "start": "459580",
    "end": "464319"
  },
  {
    "text": "might make to make the code faster or smaller.\nGood job, compiler!",
    "start": "464320",
    "end": "470490"
  },
  {
    "start": "470000",
    "end": "470000"
  },
  {
    "text": "Here are all the compilation steps shown in\norder, along with their input and output data",
    "start": "470490",
    "end": "475430"
  },
  {
    "text": "structures.\nCollectively they transform the original source",
    "start": "475430",
    "end": "479039"
  },
  {
    "text": "code into high-quality assembly code.\nThe patient application of optimization passes",
    "start": "479039",
    "end": "485280"
  },
  {
    "text": "often produces code that's more efficient\nthan writing assembly language by hand.",
    "start": "485280",
    "end": "491330"
  },
  {
    "text": "Nowadays, programmers are able to focus on\ngetting the source code to achieve the desired",
    "start": "491330",
    "end": "496349"
  },
  {
    "text": "functionality and leave the details of translation\nto instructions in the hands of the compiler.",
    "start": "496350",
    "end": "502039"
  }
]