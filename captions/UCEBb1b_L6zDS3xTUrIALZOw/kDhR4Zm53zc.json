[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": " The following\ncontent is provided under a creative\ncommons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6250"
  },
  {
    "text": "continue to offer high-quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6250",
    "end": "13230"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13230",
    "end": "21520"
  },
  {
    "start": "21000",
    "end": "167000"
  },
  {
    "text": "PROFESSOR: Last time we were\ntalking about binary search and I sort of left a promise\nto you which I need to pick up.",
    "start": "21520",
    "end": "29369"
  },
  {
    "text": "I want to remind\nyou, we were talking about search, which is a very\nfundamental thing that we do",
    "start": "29370",
    "end": "35999"
  },
  {
    "text": "in a whole lot of applications. We want to go find\nthings in some data set. And I'll remind you that we sort\nof a separated out two cases.",
    "start": "35999",
    "end": "42650"
  },
  {
    "text": "We said if we had\nan ordered list,",
    "start": "42650",
    "end": "48090"
  },
  {
    "text": "we could use binary search. And we said that was log\nrhythmic, took log n time where",
    "start": "48090",
    "end": "54659"
  },
  {
    "text": "n is the size of the list. If it was an unordered\nlist, we were basically",
    "start": "54660",
    "end": "61140"
  },
  {
    "text": "stuck with linear search. Got to walk through\nthe whole list to see if the thing is there.",
    "start": "61140",
    "end": "66198"
  },
  {
    "text": "So that was of order in. And then one of the\nthings that I suggested was that if we could figure\nout some way to order it,",
    "start": "66198",
    "end": "73650"
  },
  {
    "text": "and in particular, if we could\norder it in n log n time,",
    "start": "73650",
    "end": "82392"
  },
  {
    "text": "and we still haven't\ndone that, but if we could do that, then we\nsaid the complexity changed a little bit.",
    "start": "82392",
    "end": "87880"
  },
  {
    "text": "But it changed in a way\nthat I want to remind you. And the change was,\nthat in this case, if I'm doing a single\nsearch, I've got a choice.",
    "start": "87880",
    "end": "96720"
  },
  {
    "text": "I could still do the linear\ncase, which is order n or I could say, look, take\nthe list, let's sort it",
    "start": "96720",
    "end": "104170"
  },
  {
    "text": "and then search it. But in that case,\nwe said well to sort it was going to take n log n\ntime, assuming I can do that.",
    "start": "104170",
    "end": "112710"
  },
  {
    "text": "Once I have it sorted I can\nsearch it in log n time,",
    "start": "112710",
    "end": "119610"
  },
  {
    "text": "but that's still isn't\nas good as just doing n. And this led to this\nidea of amortization,",
    "start": "119610",
    "end": "128220"
  },
  {
    "text": "which is I need to not\nonly factor in the cost, but how am I going to use it? And typically, I'm not going\nto just search once in a list,",
    "start": "128220",
    "end": "134520"
  },
  {
    "text": "I'm going to search\nmultiple times. So if I have to do k searches,\nthen in the linear case,",
    "start": "134520",
    "end": "141650"
  },
  {
    "text": "I got to do order\nn things k times. It's order k n. Whereas in the ordered case,\nI need to get them sorted,",
    "start": "141650",
    "end": "150390"
  },
  {
    "text": "which is still n log n, but\nthen the search is only log n. I need to do k of those.",
    "start": "150390",
    "end": "158879"
  },
  {
    "text": "And we suggested well\nthis is better than that.",
    "start": "158880",
    "end": "164600"
  },
  {
    "text": "This is certainly\nbetter than that. m plus k all times log n\nis in general going to be",
    "start": "164600",
    "end": "170270"
  },
  {
    "start": "167000",
    "end": "312000"
  },
  {
    "text": "much better than k times n. It depends on n\nand k but obviously as n gets big, that one\nis going to be better.",
    "start": "170270",
    "end": "176580"
  },
  {
    "text": "And that's just a\nway of reminding you that we want to think\ncarefully, but what are the things we're\ntrying to measure when",
    "start": "176580",
    "end": "182750"
  },
  {
    "text": "we talk about complexity here? It's both the size of\nthe thing and how often are we going to use it? And there are some\ntrade offs, but I still",
    "start": "182750",
    "end": "190131"
  },
  {
    "text": "haven't said how I'm\ngoing to get an n log n sorting algorithm, and\nthat's what I want to do today. One of the two things\nI want to do today.",
    "start": "190131",
    "end": "197030"
  },
  {
    "text": "To set the stage for\nthis, let's go back just for a second to binary search.",
    "start": "197030",
    "end": "202600"
  },
  {
    "text": "At the end of the lecture\nI said binary search was an example of a divide\nand conquer algorithm.",
    "start": "202600",
    "end": "219660"
  },
  {
    "text": "Sort of an Attila the\nHun kind of approach to doing things if you like. So let me say -- boy, I\ncould have made a really bad",
    "start": "219660",
    "end": "226140"
  },
  {
    "text": "political joke there,\nwhich I will forego, right. Let's say what this actually\nmeans, divide and conquer. Divide and conquer says\nbasically do the following:",
    "start": "226140",
    "end": "233340"
  },
  {
    "text": "split the problem into several\nsub-problems of the same type.",
    "start": "233340",
    "end": "254254"
  },
  {
    "text": "I'll come back in\na second to help binary searches matches\nin that, but that's what we're going to do. For each of those\nsub-problems we're",
    "start": "254254",
    "end": "261920"
  },
  {
    "text": "going to solve\nthem independently, and then we're going to\ncombine those solutions.",
    "start": "261920",
    "end": "274124"
  },
  {
    "text": "And it's called divide and\nconquer for the obvious reason. I'm going to divide it up into\nsub-problems with the hope",
    "start": "274124",
    "end": "279670"
  },
  {
    "text": "that those sub-problems\nget easier. It's going to be easier\nto conquer if you like, and then I'm going\nto merge them back.",
    "start": "279670",
    "end": "285150"
  },
  {
    "text": "Now, in the binary search\ncase, in some sense, this is a little bit trivial.",
    "start": "285150",
    "end": "291139"
  },
  {
    "text": "What was the divide? The divide was breaking a big\nsearch up into half a search.",
    "start": "291140",
    "end": "296715"
  },
  {
    "text": "We actually threw\nhalf of the list away and we kept dividing it\ndown, until ultimately we got something of\nsize one to search.",
    "start": "296715",
    "end": "303000"
  },
  {
    "text": "That's really easy. The combination was also\nsort of trivial in this case because the solution\nto the sub-problem",
    "start": "303000",
    "end": "309930"
  },
  {
    "text": "was, in fact, the solution\nto the larger problem. But there's the idea\nof divide and conquer.",
    "start": "309930",
    "end": "315940"
  },
  {
    "start": "312000",
    "end": "587000"
  },
  {
    "text": "I'm going to use exactly that\nsame ideas to tackle sort. Again, I've got an unordered\nlist of n elements. I want to sort it into a\nobviously a sorted list.",
    "start": "315940",
    "end": "324010"
  },
  {
    "text": "And that particular\nalgorithm is actually a really nice algorithm\ncalled merge sort.",
    "start": "324010",
    "end": "329949"
  },
  {
    "text": "And it's actually a\nfairly old algorithm.",
    "start": "329950",
    "end": "337800"
  },
  {
    "text": "It was invented in 1945 by John\nvon Neumann one of the pioneers",
    "start": "337800",
    "end": "343720"
  },
  {
    "text": "of computer science. And here's the idea\nbehind merge sort,",
    "start": "343720",
    "end": "350050"
  },
  {
    "text": "actually I'm going to back\ninto it in a funny way. Let's assume that I could\nsomehow get to the stage",
    "start": "350050",
    "end": "356340"
  },
  {
    "text": "where I've got two sorted lists. How much work do I have to do\nto actually merge them together?",
    "start": "356340",
    "end": "364171"
  },
  {
    "text": "So let me give you an example. Suppose I want to merge two\nlists, and they're sorted.",
    "start": "364171",
    "end": "373610"
  },
  {
    "text": "Just to give you an\nexample, here's one list,",
    "start": "373610",
    "end": "379189"
  },
  {
    "text": "3121724 Here's\nanother list, 12430.",
    "start": "379190",
    "end": "385830"
  },
  {
    "text": "I haven't said how I'm going\nto get those sorted lists, but imagine I had two\nsorted lists like that.",
    "start": "385830",
    "end": "391789"
  },
  {
    "text": "How hard is it to merge them? Well it's pretty easy, right? I start at the\nbeginning of each list,",
    "start": "391790",
    "end": "397540"
  },
  {
    "text": "and I say is one\nless than three? Sure. So that says one should be the\nfirst element in my merge list.",
    "start": "397540",
    "end": "405470"
  },
  {
    "text": "Now, compare the first element\nin each of these lists. Two is less than\nthree, so two ought",
    "start": "405470",
    "end": "412810"
  },
  {
    "text": "to be the next\nelement of the list. And you get the idea. What am I going to do next? I'm going to compare\nthree against four.",
    "start": "412810",
    "end": "420020"
  },
  {
    "text": "Three is the\nsmallest one, and I'm going to compare\nfour games twelve,",
    "start": "420020",
    "end": "425260"
  },
  {
    "text": "which is going to give me four. And then what do? I have to do twelve against\nthirty, twelve is smaller,",
    "start": "425260",
    "end": "433860"
  },
  {
    "text": "take that out. Seventeen against thirty,\ntwenty-four against thirty",
    "start": "433860",
    "end": "442250"
  },
  {
    "text": "And by this stage I've got\nnothing left in this element, so I just add the\nrest of that list in.",
    "start": "442250",
    "end": "451010"
  },
  {
    "text": "Wow I can sort two lists,\nso I can merge two lists. I said it poorly. What's the point?",
    "start": "451010",
    "end": "457110"
  },
  {
    "text": "How many operations did\nit take me to do this? Seven comparisons, right? I've got eight elements.",
    "start": "457110",
    "end": "462150"
  },
  {
    "text": "It took me seven\ncomparisons, because I",
    "start": "462150",
    "end": "467290"
  },
  {
    "text": "can take advantage\nof the fact I know I only ever have to look at the\nfirst element of each sub-list.",
    "start": "467290",
    "end": "472626"
  },
  {
    "text": "Those are the only\nthings I need to compare, and when I run out of one list,\nI just add the rest of the list in.",
    "start": "472627",
    "end": "478139"
  },
  {
    "text": "What's the order of\ncomplexity of merging? I heard it somewhere\nvery quietly.",
    "start": "478140",
    "end": "483889"
  },
  {
    "text": "STUDENT: n. PROFESSOR: Sorry, and thank you. Linear, absolutely right? And what's n by the way here?",
    "start": "483890",
    "end": "490517"
  },
  {
    "text": "What's it measuring? STUDENT: [UNINTELLIGIBLE] PROFESSOR: In both lists, right. So this is linear, order n and\nn is this sum of the element,",
    "start": "490517",
    "end": "501230"
  },
  {
    "text": "or sorry, the number of\nelements in each list.",
    "start": "501230",
    "end": "510590"
  },
  {
    "text": "I said I was going to\nback my way into this. That gives me a way\nto merge things.",
    "start": "510590",
    "end": "517409"
  },
  {
    "text": "So here's what\nmerge sort would do. Merge sort takes this idea\nof divide and conquer,",
    "start": "517410",
    "end": "527150"
  },
  {
    "text": "and it does the\nfollowing: it says let's divide the list in half.",
    "start": "527150",
    "end": "538440"
  },
  {
    "text": "There's the divide and conquer. And let's keep dividing\neach of those lists in half",
    "start": "538440",
    "end": "544884"
  },
  {
    "text": "until we get down to something\nthat's really easy to sort. What's the simplest\nthing to sort? A list of size one, right?",
    "start": "544884",
    "end": "552220"
  },
  {
    "text": "So continue until we\nhave singleton lists.",
    "start": "552220",
    "end": "566819"
  },
  {
    "text": "Once I got a list\nof size one they're sorted, and then combine them. Combine them by doing\nemerge the sub-lists.",
    "start": "566820",
    "end": "576060"
  },
  {
    "text": "And again, you see that flavor.",
    "start": "576060",
    "end": "582540"
  },
  {
    "text": "I'm going to just\nkeep dividing it up until I get something\nreally easy, and then I'm going to combine. And this is different\nthan binary search now,",
    "start": "582540",
    "end": "589069"
  },
  {
    "start": "587000",
    "end": "921000"
  },
  {
    "text": "the combine is going to\nhave to do some work. So, I'm giving you a piece\nof code that does this,",
    "start": "589070",
    "end": "594352"
  },
  {
    "text": "and I'm going to come\nback to it in the second, but it's up there. But what I'd like\nto do is to try you sort sort of a\nlittle simulation of how",
    "start": "594352",
    "end": "601434"
  },
  {
    "text": "this would work. And I was going to originally\nmake the TAs come up here and do it, but I don't\nhave enough t a's to do a full merge sort.",
    "start": "601434",
    "end": "606830"
  },
  {
    "text": "So I'm hoping, so I also have\nthese really high-tech props. I spent tons and tons\nof department money",
    "start": "606830",
    "end": "612242"
  },
  {
    "text": "on them as you can see. I hope you can see this\nbecause I'm going to try and simulate what\na merge sort does. I've got eight things\nI want to sort here,",
    "start": "612242",
    "end": "618950"
  },
  {
    "text": "and those initially start\nout here at top level. The first step is\ndivide them in half. All right?",
    "start": "618950",
    "end": "627440"
  },
  {
    "text": "I'm not sure how\nto mark it here, remember I need to\ncome back there. I'm not yet done.",
    "start": "627440",
    "end": "633188"
  },
  {
    "text": "What do I do? Divide them in half again.",
    "start": "633189",
    "end": "640805"
  },
  {
    "text": "You know, if I had\nlike shells and peas here I could make\nsome more money. What do I do? I divide them in\nhalf one more time.",
    "start": "640805",
    "end": "650980"
  },
  {
    "text": "Let me cluster them\nbecause really what I have, sorry, separate them out.",
    "start": "650980",
    "end": "656240"
  },
  {
    "text": "I've gone from one\nproblem size eight down to eight problems of size one. At this stage I'm at\nmy singleton case.",
    "start": "656240",
    "end": "663540"
  },
  {
    "text": "So this is easy. What do I do? I merge. And the merge is,\nput them in order.",
    "start": "663540",
    "end": "677180"
  },
  {
    "text": "What do I do next? Obvious thing, I merge these. And that as we saw was\na nice linear operation.",
    "start": "677180",
    "end": "682800"
  },
  {
    "text": "It's fun to do it upside\ndown, and then one more merge",
    "start": "682800",
    "end": "690899"
  },
  {
    "text": "which is I take the smallest\nelements of each one until I get to where I want.",
    "start": "690900",
    "end": "700350"
  },
  {
    "text": "Wow aren't you impressed. No, don't please don't\nclap, not for that one.",
    "start": "700350",
    "end": "705610"
  },
  {
    "text": "Now let me do it a second\ntime to show you that -- I'm saying this poorly. Let me say it again.",
    "start": "705610",
    "end": "710790"
  },
  {
    "text": "That's the general idea. What should you see out of that? I just kept sub-dividing\ndown until I got really easy problems,\nand then I combine them back.",
    "start": "710790",
    "end": "719210"
  },
  {
    "text": "I actually misled you\nslightly there or maybe a lot, because I did it in parallel. In fact, let me just shuffle\nthese up a little bit.",
    "start": "719210",
    "end": "726180"
  },
  {
    "text": "Really what's going to\nhappen here, because this is a sequential\ncomputer, is that we're going to start off up\nhere, at top level,",
    "start": "726180",
    "end": "733940"
  },
  {
    "text": "we're going to divide\ninto half, then",
    "start": "733940",
    "end": "739530"
  },
  {
    "text": "we're going to do the\ncomplete subdivision and merge here before we ever\ncome back and do this one. We're going to do a division\nhere and then a division there.",
    "start": "739530",
    "end": "750029"
  },
  {
    "text": "At that stage we can merge\nthese, and then take this down, do the division merge\nand bring them back up.",
    "start": "750030",
    "end": "755149"
  },
  {
    "text": "Let me show you an\nexample by running that.",
    "start": "755150",
    "end": "761880"
  },
  {
    "text": "I've got a little list\nI've made here called test. Let's run merge sort on it, and\nthen we'll look at the code.",
    "start": "761880",
    "end": "773360"
  },
  {
    "text": "OK, what I would like you to\nsee is I've been printing out, as I went along, actually\nlet's back up slightly",
    "start": "773360",
    "end": "779420"
  },
  {
    "text": "and look at the code. There's merge sort. Takes in a list. What does it say to do?",
    "start": "779420",
    "end": "785098"
  },
  {
    "text": "It says check to see if\nI'm in that base case. It's the list of\nlength less than two. Is it one basically?",
    "start": "785098",
    "end": "791740"
  },
  {
    "text": "In which case, just\nreturn a copy the list. That's the simple case.",
    "start": "791740",
    "end": "797279"
  },
  {
    "text": "Otherwise, notice\nwhat it says to do. It's says find the mid-point\nand split the list in half.",
    "start": "797279",
    "end": "804640"
  },
  {
    "text": "Copy of the back end, sorry,\ncopy of the left side, copy of the right side. Run merge sort on those.",
    "start": "804640",
    "end": "810690"
  },
  {
    "text": "By induction, if it\ndoes the right thing, I'm going to get back\ntwo lists, and I'm going to then merge\nthem together.",
    "start": "810690",
    "end": "816813"
  },
  {
    "text": "Notice what I'm going to do. I'm going to print here\nthe list if we go into it, and print of the when we're\ndone and then just return that.",
    "start": "816814",
    "end": "824310"
  },
  {
    "text": "Merge up here. There's a little\nmore code there. I'll let you just\ngrok it but you can see it's basically\ndoing what I did over there.",
    "start": "824310",
    "end": "831200"
  },
  {
    "text": "Setting up two indices\nfor the two sub-list, it's just walking down,\nfinding the smallest element,",
    "start": "831200",
    "end": "836459"
  },
  {
    "text": "putting it into a new list. When it gets to the end\nof one of the lists, it skips to the next part, and\nonly one of these two pieces",
    "start": "836460",
    "end": "843339"
  },
  {
    "text": "will get called because\nonly one of them is going to have\nthings leftovers. It's going to add\nthe other pieces in.",
    "start": "843339",
    "end": "848502"
  },
  {
    "text": "OK, if you look at\nthat then, let's look at what happened\nwhen we ran this. We started off with a\ncall with that list.",
    "start": "848502",
    "end": "856480"
  },
  {
    "text": "Ah ha, split it in half. It's going down the\nleft side of this. That got split in half,\nand that got split in half",
    "start": "856480",
    "end": "863700"
  },
  {
    "text": "until I got to a list of one. Here's the first\nlist of size one. There's the second\nlist of size one.",
    "start": "863700",
    "end": "870120"
  },
  {
    "text": "So I merged them. It's now in the right order, and\nthat's coming from right there.",
    "start": "870120",
    "end": "875560"
  },
  {
    "text": "Having done that,\nit goes back up and picks the second sub-list,\nwhich came from there.",
    "start": "875560",
    "end": "882210"
  },
  {
    "text": "It's a down to base\ncase, merges it. When these two merges\nare done, we're basically at a\nstage in that branch",
    "start": "882210",
    "end": "888690"
  },
  {
    "text": "where we can now merge those two\ntogether, which gives us that, and it goes through\nthe rest of it.",
    "start": "888690",
    "end": "896329"
  },
  {
    "text": "A really nice algorithm. As I said, an example\nof divide and conquer.",
    "start": "896330",
    "end": "903210"
  },
  {
    "text": "Notice here that it's different\nthan the binary search case. We're certainly dividing\ndown, but the combination now",
    "start": "903210",
    "end": "910240"
  },
  {
    "text": "actually takes some work. I'll have to actually figure out\nhow to put them back together. And that's a general\nthing you want",
    "start": "910240",
    "end": "916540"
  },
  {
    "text": "to keep in mind\nwhen you're thinking about designing a divide and\nconquer kind of algorithm. You really want to get the\npower of dividing things up,",
    "start": "916540",
    "end": "923450"
  },
  {
    "start": "921000",
    "end": "1166000"
  },
  {
    "text": "but if you end up doing a ton of\nwork at the combination stage, you may not have\ngained anything. So you really want to\nthink about that trade off.",
    "start": "923450",
    "end": "931290"
  },
  {
    "text": "All right, having said that,\nwhat's the complexity here?",
    "start": "931290",
    "end": "937682"
  },
  {
    "text": "Boy, there's a dumb question,\nbecause I've been telling you for the last two lectures\nthe complexity is n log n, but let's see if it really is.",
    "start": "937682",
    "end": "943790"
  },
  {
    "text": "What's the complexity here? If we think about it, we start\noff with the problem of size n.",
    "start": "943790",
    "end": "961727"
  },
  {
    "text": "What do we do? We split it into two\nproblems of size n over 2. Those get split each into two\nproblems of size n over 4,",
    "start": "961727",
    "end": "968340"
  },
  {
    "text": "and we keep doing that\nuntil we get down to a level",
    "start": "968340",
    "end": "974790"
  },
  {
    "text": "in this tree where we have\nonly singletons left over.",
    "start": "974790",
    "end": "980269"
  },
  {
    "text": "Once we're there, we\nhave to do the merge. Notice what happens here. We said each of the merge\noperations was of order n.",
    "start": "980270",
    "end": "990420"
  },
  {
    "text": "But n is different. Right? Down here, I've just\ngot two things to merge, and then I've got\nthings of size two to merge and then things\nof size four to merge.",
    "start": "990420",
    "end": "997530"
  },
  {
    "text": "But notice a trade off. I have n operations if you\nlike down there of size one.",
    "start": "997530",
    "end": "1003960"
  },
  {
    "text": "Up here I have n over two\noperations of size two. Up here I've got n over four\noperations of size four.",
    "start": "1003960",
    "end": "1010680"
  },
  {
    "text": "So I always have to do\na merge of n elements. How much time does that take?",
    "start": "1010680",
    "end": "1017480"
  },
  {
    "text": "Well, we said it, right? Where did I put it?",
    "start": "1017480",
    "end": "1022950"
  },
  {
    "text": "Right there, order n. So I have order n operations\nat each level in the tree.",
    "start": "1022950",
    "end": "1036402"
  },
  {
    "text": "And then how many\nlevels deep am I? Well, that's the divide, right? So how many levels do I have?",
    "start": "1036402",
    "end": "1046480"
  },
  {
    "text": "Log n, because at each stage\nI'm cutting the problem in half. So I start off\nwith n then it's n",
    "start": "1046480",
    "end": "1051570"
  },
  {
    "text": "over two n over\nfour n over eight. So I have n operations log n\ntimes, there we go, n log n.",
    "start": "1051570",
    "end": "1060805"
  },
  {
    "text": "Took us a long\ntime to get there, but it's a nice\nalgorithm to have. Let me generalize this slightly.",
    "start": "1060806",
    "end": "1071669"
  },
  {
    "text": "When we get a problem,\na standard tool to try and attack\nit with is to say,",
    "start": "1071670",
    "end": "1076900"
  },
  {
    "text": "is there some way to break\nthis problem down into simpler, I shouldn't say simpler, smaller\nversions of the same problem.",
    "start": "1076900",
    "end": "1085820"
  },
  {
    "text": "If I can do that,\nit's a good candidate for divide and conquer. And then the things I have to\nask is how much of a division",
    "start": "1085820",
    "end": "1090928"
  },
  {
    "text": "do I want to do? The obvious one is\nto divide it in half, but there may be cases where\nthere are different divisions",
    "start": "1090928",
    "end": "1096366"
  },
  {
    "text": "you want to have take place. The second question I want to\nask is what's the base case?",
    "start": "1096366",
    "end": "1101632"
  },
  {
    "text": "When do I get down\nto a problem that's small enough that it's\nbasically trivial to solve?",
    "start": "1101632",
    "end": "1106740"
  },
  {
    "text": "Here it was lists of size one. I could have stopped at\nlists of size two right. That's an easy comparison. Do one comparison and return one\nof two possible orders on it,",
    "start": "1106740",
    "end": "1114850"
  },
  {
    "text": "but I need to decide that. And the third thing I need to\ndecide is how do I combine?",
    "start": "1114850",
    "end": "1119930"
  },
  {
    "text": "You know, point out to you\nin the binary search case, combination was trivial. The answer to the final\nsearch was just the answer",
    "start": "1119930",
    "end": "1126120"
  },
  {
    "text": "all the way up. Here, a little more\nwork, and that's why I'll come back to that idea. If I'm basically\njust squeezing jello,",
    "start": "1126120",
    "end": "1133080"
  },
  {
    "text": "that is, I'm trying to\nmake the problem simpler, but the combination turns\nout to be really complex, I've not gained anything.",
    "start": "1133081",
    "end": "1139050"
  },
  {
    "text": "So things that are good\ncandidates for divide and conquer are\nproblems where it's",
    "start": "1139050",
    "end": "1144280"
  },
  {
    "text": "easy to figure out\nhow to divide down, and the combination is\nof little complexity.",
    "start": "1144280",
    "end": "1149880"
  },
  {
    "text": "It would be nice if it\nwas less than linear, but linear is nice\nbecause then I'm going to get that n log\nin kind of behavior.",
    "start": "1149880",
    "end": "1155950"
  },
  {
    "text": "And if you ask the TAs\nin recitation tomorrow, they'll tell you that you see\na lot of n log n algorithms in computer science.",
    "start": "1155950",
    "end": "1161350"
  },
  {
    "text": "It's a very common\nclass of algorithms, and it's very\nuseful one to have.",
    "start": "1161350",
    "end": "1168210"
  },
  {
    "start": "1166000",
    "end": "1536000"
  },
  {
    "text": "Now, one of the questions\nwe could still ask is, right, we've got\nbinary search, which",
    "start": "1168210",
    "end": "1174660"
  },
  {
    "text": "has got this nice log behavior. If we can sort things, you know,\nwe get this n log n behavior,",
    "start": "1174660",
    "end": "1181130"
  },
  {
    "text": "and we got a n log\nn behavior overall. But can we actually do\nbetter in terms of searching.",
    "start": "1181130",
    "end": "1187412"
  },
  {
    "text": "I'm going to show you\none last technique. And in fact, we're going to put\nquotes around the word better,",
    "start": "1187412",
    "end": "1193470"
  },
  {
    "text": "but it does better than even\nthis kind of binary search,",
    "start": "1193470",
    "end": "1198580"
  },
  {
    "text": "and that's a method\ncalled hashing.",
    "start": "1198580",
    "end": "1204090"
  },
  {
    "text": "You've actually seen hashing,\nyou just don't know it. Hashing is the the\ntechnique that's",
    "start": "1204090",
    "end": "1209860"
  },
  {
    "text": "used in Python to\nrepresent dictionaries. Hashing is used\nwhen you actually come in to Logan Airport\nand Immigration or Homeland",
    "start": "1209860",
    "end": "1217460"
  },
  {
    "text": "Security checks your\npicture against a database. Hashing is used every time you\nenter a password into a system.",
    "start": "1217460",
    "end": "1224880"
  },
  {
    "text": "So what in the world is hashing? Well, let me start with\na simple little example. Suppose I want to represent\na collection of integers.",
    "start": "1224880",
    "end": "1235850"
  },
  {
    "text": "This is an easy little example. And I promise you that\nthe integers are never",
    "start": "1235850",
    "end": "1241080"
  },
  {
    "text": "going to be anything other\nthan between the range of zero to nine. OK, so it might be the\ncollection of one and five.",
    "start": "1241080",
    "end": "1247690"
  },
  {
    "text": "It might be two,\nthree, four, eight. I mean some collection\nof integers, but I guarantee you it's\nbetween zero and nine.",
    "start": "1247690",
    "end": "1252980"
  },
  {
    "text": "Here's the trick I can play. I can build -- I can't count --\nI could build a list with spots",
    "start": "1252980",
    "end": "1271840"
  },
  {
    "text": "for all of those elements, zero,\none, two, three, four, five, six, seven, eight, nine. And then when I want\nto create my set,",
    "start": "1271840",
    "end": "1278750"
  },
  {
    "text": "I could simply put\na one everywhere",
    "start": "1278750",
    "end": "1284230"
  },
  {
    "text": "that that integer falls. So if I wanted to\nrepresent, for example, this is the set\ntwo, six and eight,",
    "start": "1284230",
    "end": "1292360"
  },
  {
    "text": "I put a one in those slots. This seems a little weird,\nbut bear with me for second,",
    "start": "1292360",
    "end": "1297570"
  },
  {
    "text": "in fact, I've given you a\nlittle piece a code to do it, which is the next piece\nof code on the hand out.",
    "start": "1297570",
    "end": "1305889"
  },
  {
    "text": "So let's take a look\nat it for second. This little set of code here\nfrom create insert and number.",
    "start": "1305890",
    "end": "1313140"
  },
  {
    "text": "What's create do? It says, given a low\nand a high range, in this case it would\nbe zero to nine. I'm going to build a list.",
    "start": "1313140",
    "end": "1320197"
  },
  {
    "text": "Right, you can see that little\nloop going through there. What am I doing? I'm creating a list with just\nthat special symbol none in it.",
    "start": "1320197",
    "end": "1327079"
  },
  {
    "text": "So I'm building the list. I'm returning that as my set. And then to create\nthe object, I'll simply do a set of inserts.",
    "start": "1327079",
    "end": "1333050"
  },
  {
    "text": "If I want the values two,\nsix and eight in there, I would do an insert of two\ninto that set, an insert of six",
    "start": "1333050",
    "end": "1338520"
  },
  {
    "text": "into that set, and an insert\nof eight into the set. And what does it do? It marks a one in\neach of those spots.",
    "start": "1338520",
    "end": "1344945"
  },
  {
    "text": "Now, what did I want to do? I wanted to check membership. I want to do search. Well that's simple.",
    "start": "1344945",
    "end": "1350429"
  },
  {
    "text": "Given that representation\nand some value, I just say gee is it there?",
    "start": "1350430",
    "end": "1356300"
  },
  {
    "text": "What's the order\ncomplexity here?",
    "start": "1356300",
    "end": "1363500"
  },
  {
    "text": "I know I drive you\nnuts asking questions? What's the order\ncomplexity here?",
    "start": "1363500",
    "end": "1368530"
  },
  {
    "text": "Quadratic, linear,\nlog, constant?",
    "start": "1368530",
    "end": "1377870"
  },
  {
    "text": "Any takers? I know I have the wrong glasses\non the see hands up too, but... STUDENT: [UNINTELLIGIBLE]",
    "start": "1377870",
    "end": "1384320"
  },
  {
    "text": "PROFESSOR: Who said it? STUDENT: Constant. PROFESSOR: Constant, why? STUDENT: [UNINTELLIGIBLE]",
    "start": "1384320",
    "end": "1389600"
  },
  {
    "text": "PROFESSOR: Yes, thank you. All right, it is constant. You keep sitting back there\nwhere I can't get to you. Thank you very much.",
    "start": "1389600",
    "end": "1395690"
  },
  {
    "text": "It has a constant. Remember we said\nwe design lists so that the access, no matter\nwhere it was on the list",
    "start": "1395690",
    "end": "1402850"
  },
  {
    "text": "was of constant time. That is another way of saying\nthat looking up this thing here",
    "start": "1402850",
    "end": "1408810"
  },
  {
    "text": "is constant. So this is constant\ntime, order one.",
    "start": "1408810",
    "end": "1415008"
  },
  {
    "text": "Come on, you know,\nrepresenting sets of integers, this is pretty dumb. Suppose I want to have\na set of characters.",
    "start": "1415009",
    "end": "1421557"
  },
  {
    "text": "How could I do that? Well the idea of\na hash, in fact, what's called a hash function\nis to have some way of mapping",
    "start": "1421557",
    "end": "1427880"
  },
  {
    "text": "any kind of data into integers. So let's look at the second\nexample, all right, --",
    "start": "1427880",
    "end": "1435260"
  },
  {
    "text": "I keep doing that -- this piece\nof code from here to here gives",
    "start": "1435260",
    "end": "1441700"
  },
  {
    "text": "me a way of now creating\na hash table of size 256.",
    "start": "1441700",
    "end": "1446860"
  },
  {
    "text": "Ord as a built in\npython representation. There is lots of them around\nthat takes any character and gives you back an integer.",
    "start": "1446860",
    "end": "1453600"
  },
  {
    "text": "In fact, just to show that\nto you, if I go down here and I type ord, sorry,\nI did that wrong.",
    "start": "1453600",
    "end": "1472250"
  },
  {
    "text": "Let me try again. We'll get to\nexceptions in a second.",
    "start": "1472250",
    "end": "1478889"
  },
  {
    "text": "I give it some character. It gives me back an\ninteger representing. It looks weird. Why is three come back\nto some other thing?",
    "start": "1478889",
    "end": "1484870"
  },
  {
    "text": "That's the internal\nrepresentation that python uses for this. If I give it some\nother character, yeah,",
    "start": "1484870",
    "end": "1491080"
  },
  {
    "text": "it would help if I could type,\ngive it some other character. It gives me back\na representation.",
    "start": "1491080",
    "end": "1497460"
  },
  {
    "text": "So now here's the idea. I build a list\n256 elements long,",
    "start": "1497460",
    "end": "1503280"
  },
  {
    "text": "and I fill it up with those\nspecial characters none. That's what create is\ngoing to do right here.",
    "start": "1503280",
    "end": "1509880"
  },
  {
    "text": "And then hash character takes\nin any string or character, single character,\ngives me back a number.",
    "start": "1509880",
    "end": "1516270"
  },
  {
    "text": "Notice what I do. If I want to create\na set or a sequence representing these things, I\nsimply insert into that list.",
    "start": "1516270",
    "end": "1524429"
  },
  {
    "text": "It goes through and puts\nones in the right place. And then, if I want to find\nout if something's there,",
    "start": "1524430",
    "end": "1529587"
  },
  {
    "text": "I do the same thing. But notice now, hash\nis converting the input into an integer.",
    "start": "1529587",
    "end": "1538060"
  },
  {
    "start": "1536000",
    "end": "1761000"
  },
  {
    "text": "So, what's the idea? If I know what my\nhash function does, it maps, in this case\ncharacters into a range zero",
    "start": "1538060",
    "end": "1546850"
  },
  {
    "text": "to 256, which is zero to 255,\nI create a list that long, and I simply mark things.",
    "start": "1546850",
    "end": "1552350"
  },
  {
    "text": "And my look up is\nstill constant. Characters are simple. Suppose you want to\nrepresent sets of strings,",
    "start": "1552350",
    "end": "1558789"
  },
  {
    "text": "well you basically just\ngeneralize the hash function. I think one of the\nclassic ones for strings is called the\nRabin-Karp algorithm.",
    "start": "1558790",
    "end": "1566080"
  },
  {
    "text": "And it's simply the\nsame idea that you have a mapping from your\nimport into a set of integers.",
    "start": "1566080",
    "end": "1573809"
  },
  {
    "text": "Wow, OK, maybe not so wow,\nbut this is now constant. This is constant time access.",
    "start": "1573810",
    "end": "1579920"
  },
  {
    "text": "So I can do searching in\nconstant time which is great. Where's the penalty?",
    "start": "1579920",
    "end": "1586070"
  },
  {
    "text": "What did I trade off here? Well I'm going to\nsuggest that what I did was I really traded\nspace for time.",
    "start": "1586070",
    "end": "1600080"
  },
  {
    "text": "It makes me sound like an\nastro physicist somehow right? What do I mean by that?",
    "start": "1600080",
    "end": "1605860"
  },
  {
    "text": "I have constant time\naccess which is great, but I paid a price, which is\nI had to use up some space.",
    "start": "1605860",
    "end": "1612660"
  },
  {
    "text": "In the case of\nintegers it was easy. In the case of characters, so I\nhave to give up a list of 256,",
    "start": "1612660",
    "end": "1618060"
  },
  {
    "text": "no big deal. Imagine now you\nwant to do faces. You've got a picture\nof somebody's face,",
    "start": "1618060",
    "end": "1623190"
  },
  {
    "text": "it's a million pixels. Each pixel has a range of\nvalues from zero to 256. I want to hash a face with\nsome function into an integer.",
    "start": "1623190",
    "end": "1631477"
  },
  {
    "text": "I may not want to do\nthe full range of this, but I may decide I have to use\na lot of gigabytes of space",
    "start": "1631477",
    "end": "1636550"
  },
  {
    "text": "in order to do a trade off. The reason I'm\nshowing you this is it that this is a gain, a common\ntrade off in computer science.",
    "start": "1636550",
    "end": "1642880"
  },
  {
    "text": "That in many cases,\nI can gain efficiency if I'm willing to give up space.",
    "start": "1642880",
    "end": "1648220"
  },
  {
    "text": "Having said that though,\nthere may still be a problem, or there ought to be a problem\nthat may be bugging you slightly, which is\nhow do I guarantee",
    "start": "1648220",
    "end": "1656320"
  },
  {
    "text": "that my hash function takes\nany input into exactly one spot in the storage space?",
    "start": "1656320",
    "end": "1663600"
  },
  {
    "text": "The answer is I can't. OK, in the simple\ncase of integers I can, but in the case\nof something more complex",
    "start": "1663600",
    "end": "1669480"
  },
  {
    "text": "like faces or fingerprints\nor passwords for that matter, it's hard to design\na hash function that",
    "start": "1669480",
    "end": "1674850"
  },
  {
    "text": "has completely even\ndistribution, meaning that it takes any input into\nexactly one output spot.",
    "start": "1674850",
    "end": "1680950"
  },
  {
    "text": "So what you typically do\nand a hash case is you design your code\nto deal with that. You try to design -- actually\nI'm going to come back to that",
    "start": "1680950",
    "end": "1687230"
  },
  {
    "text": "in a second. It's like you're trying to use\na hash function that spread things out pretty evenly. But the places you store\ninto in those lists",
    "start": "1687230",
    "end": "1693280"
  },
  {
    "text": "may have to themselves\nhave a small list in there, and when you go to\ncheck something, you may have to do a linear\nsearch through the elements",
    "start": "1693280",
    "end": "1699831"
  },
  {
    "text": "in that list. The good news is the\nelements in any one spot in a hash table are likely to\nbe a small number, three, four,",
    "start": "1699831",
    "end": "1706090"
  },
  {
    "text": "five. So the search is really easy. You're not searching\na million things. You're searching\nthree or four things, but nonetheless, you have\nto do that trade off.",
    "start": "1706090",
    "end": "1714090"
  },
  {
    "text": "The last thing I want\nto say about hashes are that they're actually\nreally hard to create.",
    "start": "1714090",
    "end": "1726057"
  },
  {
    "text": "There's been a lot of work\ndone on these over the years, but in fact, it's pretty hard\nto invent a good hash function.",
    "start": "1726057",
    "end": "1731720"
  },
  {
    "text": "So my advice to\nyou is, if you want to use something was a\nhash, go to a library. Look up a good hash function.",
    "start": "1731720",
    "end": "1737580"
  },
  {
    "text": "For strings, there's\na classic set of them that work pretty well. For integers, there are\nsome real simple ones.",
    "start": "1737580",
    "end": "1742930"
  },
  {
    "text": "If there's something\nmore complex, find a good hash function, but\ndesigning a really good hash function takes a lot of\neffort because you want it",
    "start": "1742930",
    "end": "1750070"
  },
  {
    "text": "to have that even distribution. You'd like it to have\nas few duplicates",
    "start": "1750070",
    "end": "1755290"
  },
  {
    "text": "if you like in each spot in\nthe hash table for each one of the things that you use.",
    "start": "1755290",
    "end": "1762799"
  },
  {
    "start": "1761000",
    "end": "1906000"
  },
  {
    "text": "Let me pull back\nfor a second then. What have we done over the\nlast three or four lectures?",
    "start": "1762800",
    "end": "1768640"
  },
  {
    "text": "We've started introducing\nyou to classes of algorithms. Things that I'd like\nyou to be able to see",
    "start": "1768640",
    "end": "1774100"
  },
  {
    "text": "are how to do some simple\ncomplexity analysis. Perhaps more importantly, how\nto recognize a kind of algorithm",
    "start": "1774100",
    "end": "1780670"
  },
  {
    "text": "based on its properties and\nknow what class it belongs to. This is a hint. If you like, leaning\ntowards the next quiz,",
    "start": "1780670",
    "end": "1786560"
  },
  {
    "text": "that you oughta be\nable to say that looks like a\nlogarithmic algorithm because it's got a\nparticular property.",
    "start": "1786560",
    "end": "1791780"
  },
  {
    "text": "That looks like an\nn log n algorithm because it has a\nparticular property. And the third\nthing we've done is we've given you now a set of\nsort of standard algorithms",
    "start": "1791780",
    "end": "1800190"
  },
  {
    "text": "if you like. Brute force, just walk\nthrough every possible case.",
    "start": "1800190",
    "end": "1805270"
  },
  {
    "text": "It works well if the\nproblem sizes are small. We've had, there are a number\nof variants of guess and check",
    "start": "1805270",
    "end": "1811090"
  },
  {
    "text": "or hypothesize and test, where\nyou try to guess the solution and then check it and use\nthat to refine your search.",
    "start": "1811090",
    "end": "1817270"
  },
  {
    "text": "Successive approximation,\nNewton-Raphson was one nice\nexample, but there's a whole class of things that\nget closer and closer, reducing",
    "start": "1817270",
    "end": "1824200"
  },
  {
    "text": "your errors as you go along. Divide and conquer\nand actually I",
    "start": "1824200",
    "end": "1829807"
  },
  {
    "text": "guess in between there\nbi-section, which is really just a very difficult of\nsuccessive approximation,",
    "start": "1829807",
    "end": "1834820"
  },
  {
    "text": "but divide and conquer\nis a class of algorithm. These are tools that you\nwant in your tool box. These are the kinds\nof algorithms that you",
    "start": "1834820",
    "end": "1841370"
  },
  {
    "text": "should be able to recognize. And what I'd like you to begin\nto do is to look at a problem and say, gee, which\nkind of algorithm",
    "start": "1841370",
    "end": "1848690"
  },
  {
    "text": "is most likely to be\nsuccessful on this problem, and map it into that case.",
    "start": "1848690",
    "end": "1854340"
  },
  {
    "text": "OK, starting next -- don't\nworry I'm not going to quit 36 minutes after -- I got\none more topic for today. But jumping ahead, I'm\ngoing to skip in a second",
    "start": "1854340",
    "end": "1861780"
  },
  {
    "text": "now to talk about one last\nlinguistic thing from Python, but I want to preface Professor\nGuttag is going to pick up",
    "start": "1861780",
    "end": "1867410"
  },
  {
    "text": "next week, and what we're going\nto start doing then is taking these classes of algorithms\nand start looking at much more",
    "start": "1867410",
    "end": "1872960"
  },
  {
    "text": "complex algorithms. Things you're more likely\nto use in problems. Things like knapsack\nproblems as we move ahead.",
    "start": "1872960",
    "end": "1879779"
  },
  {
    "text": "But the tools you've\nseen so far are really the things that\nwere going to see as we build those algorithms.",
    "start": "1879780",
    "end": "1884860"
  },
  {
    "text": "OK, I want to spend\nthe last portion of this lecture doing one last\npiece of linguistics stuff. One last little thing\nfrom Python, and that's",
    "start": "1884860",
    "end": "1892640"
  },
  {
    "text": "to talk about exceptions.",
    "start": "1892640",
    "end": "1904760"
  },
  {
    "text": "OK, you've actually\nseen exceptions a lot, you just didn't know that's what\nthey were, because exceptions",
    "start": "1904760",
    "end": "1911180"
  },
  {
    "start": "1906000",
    "end": "2024000"
  },
  {
    "text": "show up everywhere in Python. Let me give you a\ncouple of examples. I'm going to clear\nsome space here.",
    "start": "1911180",
    "end": "1918480"
  },
  {
    "text": "Before I type in\nthat expression, I get an error, right? So it's not defined. But in fact, what this did\nwas it threw an exception.",
    "start": "1918480",
    "end": "1926190"
  },
  {
    "text": "An exception is called\na name error exception. It says you gave me something\nI didn't know how to deal.",
    "start": "1926190",
    "end": "1933820"
  },
  {
    "text": "I'm going to throw\nit, or raise it, to use the right\nterm to somebody in case they can\nhandle it, but it's a particular kind of exception.",
    "start": "1933820",
    "end": "1941430"
  },
  {
    "text": "I might do something like,\nremind you I have test. If I do this, try and get the\n10th element of a list that's",
    "start": "1941430",
    "end": "1951834"
  },
  {
    "text": "only eight long. I get what looks like an\nerror, but it's actually throwing an exception. The exception is right there.",
    "start": "1951834",
    "end": "1957080"
  },
  {
    "text": "It's an index\nerror, that is it's trying to do something going\nbeyond the range of what",
    "start": "1957080",
    "end": "1962720"
  },
  {
    "text": "this thing could deal with. OK, you say, come on, I've\nseen these all the time. Every time I type\nsomething into my program,",
    "start": "1962720",
    "end": "1969013"
  },
  {
    "text": "it does one of\nthese things, right? When we're just interacting\nwith idol, with the interactive",
    "start": "1969013",
    "end": "1974450"
  },
  {
    "text": "editor or sorry, interactive\nenvironment if you like, that's what you expect. What's happening is\nthat we're typing",
    "start": "1974450",
    "end": "1980130"
  },
  {
    "text": "in something, an expression\nit doesn't know how to deal. It's raising the exception,\nbut is this simply bubbling up at the top level\nsaying you've got a problem.",
    "start": "1980130",
    "end": "1987600"
  },
  {
    "text": "Suppose instead\nyou're in the middle of some deep piece of code and\nyou get one of these cases.",
    "start": "1987600",
    "end": "1995830"
  },
  {
    "text": "It's kind of annoying if\nit throws it all the way back up to top level\nfor you to fix.",
    "start": "1995830",
    "end": "2001450"
  },
  {
    "text": "If it's truly a bug, that's\nthe right thing to do. You want to catch it. But in many cases exceptions\nor things that, in fact,",
    "start": "2001450",
    "end": "2007690"
  },
  {
    "text": "you as a program designer\ncould have handled. So I'm going to\ndistinguish in fact between un-handled\nexceptions, which",
    "start": "2007690",
    "end": "2016160"
  },
  {
    "text": "are the things that we saw\nthere, and handled exceptions.",
    "start": "2016160",
    "end": "2023442"
  },
  {
    "text": "I'm going to show you in a\nsecond how to handle them, but let's look at an example. What do I mean by a\nhandled exception?",
    "start": "2023442",
    "end": "2030200"
  },
  {
    "start": "2024000",
    "end": "2143000"
  },
  {
    "text": "Well let's look at the\nnext piece of code. OK, it's right here.",
    "start": "2030200",
    "end": "2035210"
  },
  {
    "text": "It's called read float. We'll look at it in a second. Let me sort of set the\nstage up for this -- suppose I want to input --\nI'm sorry I want you as a user",
    "start": "2035210",
    "end": "2043210"
  },
  {
    "text": "to input a floating\npoint number. We talked about\nthings you could do to try make sure that happens.",
    "start": "2043210",
    "end": "2049320"
  },
  {
    "text": "You could run\nthrough a little loop to say keep trying\nuntil you get one. But one of the ways I could deal\nwith it is what's shown here.",
    "start": "2049320",
    "end": "2055649"
  },
  {
    "text": "And what's this\nlittle loop say to do? This little loop says\nI'm going to write a function or procedures\nthat takes in two messages.",
    "start": "2055650",
    "end": "2063483"
  },
  {
    "text": "I'm going to run\nthrough a loop, and I'm going to request some\ninput, which I'm going to read in with raw input. I'm going to store\nthat into val.",
    "start": "2063484",
    "end": "2070039"
  },
  {
    "text": "And as you might\nexpect, I'm going to then try and see if I can\nconvert that into a float.",
    "start": "2070040",
    "end": "2075522"
  },
  {
    "text": "Oh wait a minute, that's a\nlittle different than what we did last time, right? Last time we checked\nthe type and said",
    "start": "2075522",
    "end": "2080681"
  },
  {
    "text": "if it is a float you're okay. If not, carry on. In this case what would happen? Well float is going to\ntry and do the cohersion.",
    "start": "2080682",
    "end": "2086800"
  },
  {
    "text": "It's going to try and turn it\ninto a floating point number. If it does, I'm great, right.",
    "start": "2086800",
    "end": "2092990"
  },
  {
    "text": "And I like just to return val. If it doesn't, floats\ngoing to throw or raise,",
    "start": "2092990",
    "end": "2098700"
  },
  {
    "text": "to use the right\nterm, an exception. It's going to say something\nlike a type error. In fact, let's try it over here.",
    "start": "2098700",
    "end": "2104650"
  },
  {
    "text": "I if I go over here, and\nI say float of three, it's going to do the conversion.",
    "start": "2104650",
    "end": "2110510"
  },
  {
    "text": "But if I say turn\nthis into a float, ah it throws a value\nerror exception.",
    "start": "2110510",
    "end": "2116790"
  },
  {
    "text": "It says it's a wrong kind\nof value that I've got. So I'm going to write a\nlittle piece of code that",
    "start": "2116790",
    "end": "2121880"
  },
  {
    "text": "says if it gives me a\nfloat, I'm set, But if not, I'd like to have the code\nhandle the exception.",
    "start": "2121880",
    "end": "2129130"
  },
  {
    "text": "And that's what this funky\ntry/except thing does. This is a try/except block\nand here's the flow of control",
    "start": "2129130",
    "end": "2143570"
  },
  {
    "text": "that takes place in there. When I hit a try-block. It's going to literally do that. It's going to try and\nexecute the instructions.",
    "start": "2143570",
    "end": "2151090"
  },
  {
    "text": "If it can successfully\nexecute the instructions, it's going to skip\npast the except block",
    "start": "2151090",
    "end": "2156870"
  },
  {
    "text": "and just carry on with\nthe rest of the code. If, however, it raises an\nexception, that exception,",
    "start": "2156870",
    "end": "2163920"
  },
  {
    "text": "at least in this case where\nit's a pure accept with no tags on it, is going to get,\nbe like thrown directly",
    "start": "2163920",
    "end": "2170140"
  },
  {
    "text": "to the except block, and it's\ngoing to try and execute that. So notice what's going\nto happen here, then. If I give it something that\ncan be turned into a float,",
    "start": "2170140",
    "end": "2176960"
  },
  {
    "text": "I come in here,\nI read the input, if it can be turned\ninto a float, I'm going to just return\nthe value and I'm set.",
    "start": "2176960",
    "end": "2182600"
  },
  {
    "text": "If not, it's basically\ngoing to throw it to this point, in which case\nI'm going to print out an error message and oh yeah, I'm\nstill in that while loop,",
    "start": "2182600",
    "end": "2190240"
  },
  {
    "text": "so it's going to go around. So in fact, if I\ngo here and, let me",
    "start": "2190240",
    "end": "2195320"
  },
  {
    "text": "un-comment this\nand run the code. It says enter a float.",
    "start": "2195320",
    "end": "2201950"
  },
  {
    "text": "And if I give it something that\ncan be -- sorry, I've got, yes,",
    "start": "2201950",
    "end": "2208940"
  },
  {
    "text": "never mind the grades crap. Where did I have that?",
    "start": "2208940",
    "end": "2214190"
  },
  {
    "text": "Let me comment that out. Somehow it's appropriate\nin the middle of my lecture",
    "start": "2214190",
    "end": "2220180"
  },
  {
    "text": "for it to say whoops at me but\nthat wasn't what I intended. And we will try this again.",
    "start": "2220180",
    "end": "2228959"
  },
  {
    "text": "OK, says it says enter a float. I give it something that can\nbe converted into a float, it says fine. I'm going to go back\nand run it again though.",
    "start": "2228959",
    "end": "2235360"
  },
  {
    "text": "If I run it again, it\nsays enter a float.",
    "start": "2235360",
    "end": "2241290"
  },
  {
    "text": "Ah ha, it goes into that accept\nportion, prints out a message, and goes back around the\nwhile loop to say try again.",
    "start": "2241290",
    "end": "2247026"
  },
  {
    "text": "And it's going to\nkeep doing this until I give it something\nthat does serve as a float.",
    "start": "2247026",
    "end": "2253359"
  },
  {
    "text": "Right, so an exception\nthen has this format that I can control\nas a programmer.",
    "start": "2253360",
    "end": "2259172"
  },
  {
    "text": "Why would I want to use this? Well some things I can\nactually expect may happen and I want to handle them.",
    "start": "2259172",
    "end": "2265424"
  },
  {
    "text": "The float example\nis a simple one. I'm going to\ngeneralize in a second. Here's a better example. I'm writing a piece of code\nthat wants to input a file.",
    "start": "2265424",
    "end": "2272135"
  },
  {
    "text": "I can certainly\nimagine something that says give me\nthe file name, I'm going to do something with it. I can't guarantee that the\nfile may exist under that name,",
    "start": "2272135",
    "end": "2279270"
  },
  {
    "text": "but I know that's\nsomething that might occur. So a nice way to handle\nit is to write it as an exception\nthat says, here's",
    "start": "2279270",
    "end": "2284810"
  },
  {
    "text": "what I want to do\nif I get the file. But just in case the\nfile name is not there, here's what I want to do\nin that case to handle it.",
    "start": "2284810",
    "end": "2291600"
  },
  {
    "text": "Let me specify what the\nexception should do. In the example I\njust wrote here,",
    "start": "2291600",
    "end": "2296650"
  },
  {
    "text": "this is pretty trivial, right. OK, I'm trying to input floats. I could generalize\nthis pretty nicely. Imagine the same\nkind of idea where",
    "start": "2296650",
    "end": "2303210"
  },
  {
    "text": "I want to simply say I want\nto take input of anything and try and see how to make sure\nI get the right kind of thing. I want to make it polymorphic.",
    "start": "2303210",
    "end": "2315240"
  },
  {
    "text": "Well that's pretty easy to do. That is basically the\nnext example, right here.",
    "start": "2315240",
    "end": "2323410"
  },
  {
    "text": "In fact, let me\ncomment this one out.",
    "start": "2323410",
    "end": "2329109"
  },
  {
    "text": "I can do exactly the\nsame kind of thing. Now what I'm going to try and\ndo is read in a set of values,",
    "start": "2329110",
    "end": "2335269"
  },
  {
    "text": "but I'm going to give a type of\nvalue as well as the messages. The format is the same. I'm going to ask for\nsome input, and then I",
    "start": "2335270",
    "end": "2342290"
  },
  {
    "text": "am going to use that\nprocedure to check, is this the right type of value.",
    "start": "2342290",
    "end": "2347810"
  },
  {
    "text": "And I'm trying to use that to\ndo the coercion if you like. Same thing if it works, I'm\ngoing to skip that, if it not,",
    "start": "2347810",
    "end": "2352880"
  },
  {
    "text": "it's going to throw\nthe exception. Why is this much nice? Well, that's a\nhandy piece of code.",
    "start": "2352880",
    "end": "2358119"
  },
  {
    "text": "Because imagine\nI've got that now, and I can now store that away in\nsome file name, input dot p y,",
    "start": "2358119",
    "end": "2363960"
  },
  {
    "text": "and import into every one\nof my procedure functions, pardon me, my files\nof procedures,",
    "start": "2363960",
    "end": "2369240"
  },
  {
    "text": "because it's a standard way\nof now giving me the input. OK, so far though, I've\njust shown you what",
    "start": "2369240",
    "end": "2375059"
  },
  {
    "text": "happens inside a peace a code. It raises an exception. It goes to that accept clause. We don't have to use it\njust inside of one place.",
    "start": "2375060",
    "end": "2382140"
  },
  {
    "text": "We can actually use\nit more generally. And that gets me to the last\nexample I wanted to show you.",
    "start": "2382140",
    "end": "2387480"
  },
  {
    "text": "Let me uncomment this.",
    "start": "2387480",
    "end": "2395519"
  },
  {
    "text": "Let's take a look at this code. This looks like a\nhandy piece of code to have given what we\njust recently did to you.",
    "start": "2395519",
    "end": "2402740"
  },
  {
    "text": "All right, get grades. It's a little function that's\ngoing to say give me a file name, and I'm going to\ngo off and open that up",
    "start": "2402740",
    "end": "2409570"
  },
  {
    "text": "and bind it to a local variable. And if it's successful,\nthen I'd just like to go off and do some\nthings like turn it into a list",
    "start": "2409570",
    "end": "2416160"
  },
  {
    "text": "so I can compute average score\nor distributions or something else. I don't really care\nwhat's going on here.",
    "start": "2416160",
    "end": "2421700"
  },
  {
    "text": "Notice though what I've done. Open, it doesn't\nsucceed is going",
    "start": "2421700",
    "end": "2427300"
  },
  {
    "text": "to raise a particular kind of\nexception called I O error. And so I've done a little\nbit different things here",
    "start": "2427300",
    "end": "2433830"
  },
  {
    "text": "which is I put the accept part\nof the block with I O error.",
    "start": "2433830",
    "end": "2439519"
  },
  {
    "text": "What does that say? It says if in the code up here\nI get an exception of that sort, I'm going to go to this\nplace to handle it.",
    "start": "2439519",
    "end": "2446920"
  },
  {
    "text": "On the other hand, if\nI'm inside this procedure and some other\nexception is raised, it's not tagged\nby that one, it's",
    "start": "2446920",
    "end": "2453200"
  },
  {
    "text": "going to raise it up the chain. If that procedure was called\nby some other procedure it's going to say is there an\nexception block in there",
    "start": "2453200",
    "end": "2460040"
  },
  {
    "text": "that can handle that. If not, I am going to\nkeep going up the chain until eventually I\nget to the top level. And you can see that down here.",
    "start": "2460040",
    "end": "2466220"
  },
  {
    "text": "I'm going to run\nthis in a second. This is just a\npiece of code where I'm going to say, gee,\nif I can get the grades, do something, if not carry on.",
    "start": "2466220",
    "end": "2475020"
  },
  {
    "text": "And if I go ahead and run this\n-- now it's going to say woops, at me. What happened?",
    "start": "2475020",
    "end": "2485760"
  },
  {
    "text": "I'm down here and\ntry, I'm trying do get grades, which is a call\nto that function, which is not bound in my computer.",
    "start": "2485760",
    "end": "2493932"
  },
  {
    "text": "That says it's in here. It's in this try-block. It raised an exception, but\nit wasn't and I O error.",
    "start": "2493932",
    "end": "2501349"
  },
  {
    "text": "So it passes it back, past this\nexception, up to this level, which gets to that exception.",
    "start": "2501350",
    "end": "2508910"
  },
  {
    "text": "Let me say this a\nlittle bit better then. I can write exceptions\ninside a piece of code.",
    "start": "2508910",
    "end": "2514240"
  },
  {
    "text": "Try this, if it\ndoesn't work I can have an exception that catches\nany error at that level. Or I can say catch only these\nkinds of errors at that level,",
    "start": "2514240",
    "end": "2522360"
  },
  {
    "text": "otherwise pass\nthem up the chain. And that exception will\nkeep getting passed up the chain of calls\nuntil it either",
    "start": "2522360",
    "end": "2528680"
  },
  {
    "text": "gets to the top\nlevel, in which case it looks like what\nyou see all the time. It looks like an error, but it\ntells you what the error came",
    "start": "2528680",
    "end": "2534330"
  },
  {
    "text": "from, or it gets an exception\n, it can deal with it. OK, so the last thing\nto say about this",
    "start": "2534330",
    "end": "2540580"
  },
  {
    "text": "is what's the difference between\nan exception and an assert?",
    "start": "2540580",
    "end": "2557940"
  },
  {
    "text": "We introduced\nasserts earlier on. You've actually seen them\nin some pieces of code, so what's the difference\nbetween the two of them?",
    "start": "2557940",
    "end": "2567150"
  },
  {
    "start": "2558000",
    "end": "2614000"
  },
  {
    "text": "Well here's my way\nof describing it. The goal of an assert,\nor an assert statement,",
    "start": "2567150",
    "end": "2573089"
  },
  {
    "text": "is basically to say,\nlook, you can make sure that my function is going\nto give this kind of result",
    "start": "2573090",
    "end": "2579150"
  },
  {
    "text": "if you give me inputs\nof a particular type. Sorry, wrong way of saying it. If you give me\ninputs that satisfy",
    "start": "2579150",
    "end": "2585220"
  },
  {
    "text": "some particular constraints. That was the kind\nof thing you saw. Asserts said here are\nsome conditions to test.",
    "start": "2585220",
    "end": "2591260"
  },
  {
    "text": "If they're true, I'm going to\nlet the rest of the code run. If not, I'm going\nto throw an error.",
    "start": "2591260",
    "end": "2596840"
  },
  {
    "text": "So the assertion\nis basically saying we got some\npre-conditions, those",
    "start": "2596840",
    "end": "2604750"
  },
  {
    "text": "are the clauses inside the\nassert that have to be true, and there's a post\ncondition. and in essence,",
    "start": "2604750",
    "end": "2614120"
  },
  {
    "text": "what the assert is saying is, or\nrather the programmer is saying using the assert is, if you\ngive me input that satisfies",
    "start": "2614120",
    "end": "2620370"
  },
  {
    "text": "the preconditions,\nI'm guaranteeing to you that my code is\ngoing to give you something that meets the post condition. It's going to do\nthe right thing.",
    "start": "2620370",
    "end": "2626737"
  },
  {
    "text": "And as a consequence, as\nyou saw with the asserts, if the preconditions aren't\ntrue, it throws an error.",
    "start": "2626737",
    "end": "2632560"
  },
  {
    "text": "It goes back up the top\nlevel saying stop operation immediately and goes\nback up the top level.",
    "start": "2632560",
    "end": "2639100"
  },
  {
    "text": "Asserts in fact are\nnice in the sense that they let you\ncheck conditions at debugging time\nor testing time. So you can actually use them to\nsee where your code is going.",
    "start": "2639100",
    "end": "2647609"
  },
  {
    "text": "An exception, when you use\nan exception, basically what you're saying is, look,\nyou can do anything you want with my\nfunction, and you",
    "start": "2647610",
    "end": "2653447"
  },
  {
    "text": "can be sure that I'm\ngoing to tell you if something is going wrong. And in many cases I'm\ngoing to handle it myself.",
    "start": "2653447",
    "end": "2659840"
  },
  {
    "text": "So as much as possible,\nthe exceptions are going to try to\nhandle unexpected things,",
    "start": "2659840",
    "end": "2666296"
  },
  {
    "text": "actually wrong term,\nyou expected them, but not what the user did. It's going to try\nto handle conditions other than the\nnormal ones itself.",
    "start": "2666296",
    "end": "2673760"
  },
  {
    "text": "So you can use the\nthing in anyway. If it can't, it's going to try\nand throw it to somebody else",
    "start": "2673760",
    "end": "2679290"
  },
  {
    "text": "to handle, and only\nif there is no handler for that unexpected condition,\nwill it come up to top level.",
    "start": "2679290",
    "end": "2685270"
  },
  {
    "text": "So, summarizing\nbetter, assert is something you put in\nto say to the user, make sure you're giving\nme input of this type,",
    "start": "2685270",
    "end": "2691790"
  },
  {
    "text": "but I'm going to guarantee\nyou the rest of the code works correctly. Exceptions and exception\nhandlers are saying,",
    "start": "2691790",
    "end": "2696880"
  },
  {
    "text": "here are the odd\ncases that I might see and here's what I'd like\nto do in those cases in order to try and be\nable to deal with them.",
    "start": "2696880",
    "end": "2704950"
  },
  {
    "text": "Last thing to say is why would\nyou want to have exceptions?",
    "start": "2704950",
    "end": "2710970"
  },
  {
    "text": "Well, let's go back to\nthat case of inputting a simple little floating point.",
    "start": "2710970",
    "end": "2716569"
  },
  {
    "text": "If I'm expecting\nmostly numbers in, I can certainly try\nand do the coercion. I could have done that\njust doing the coercion.",
    "start": "2716570",
    "end": "2722910"
  },
  {
    "text": "The problem is, I want\nto know if, in fact, I've got something that's not\nof the form I expect.",
    "start": "2722910",
    "end": "2728020"
  },
  {
    "text": "I'm much better having\nan exception get handled at the time of input\nthan to let that prop --",
    "start": "2728020",
    "end": "2733525"
  },
  {
    "text": "that value rather propagate\nthrough a whole bunch of code until eventually it hits\nan error 17 calls later,",
    "start": "2733525",
    "end": "2738960"
  },
  {
    "text": "and you have no clue\nwhere it came from. So the exceptions\nare useful when you want to have\nthe ability to say,",
    "start": "2738960",
    "end": "2745420"
  },
  {
    "text": "I expect in general\nthis kind of behavior, but I do know there are some\nother things that might happen",
    "start": "2745420",
    "end": "2750490"
  },
  {
    "text": "and here's what I'd like to\ndo in each one of those cases. But I do want to make sure that\nI don't let a value that I'm",
    "start": "2750490",
    "end": "2756100"
  },
  {
    "text": "not expecting pass through. That goes back to that idea\nof sort of discipline coding.",
    "start": "2756100",
    "end": "2761480"
  },
  {
    "text": "It's easy to have\nassumptions about what you think are going to come into\nthe program when you writ it.",
    "start": "2761480",
    "end": "2766730"
  },
  {
    "text": "If you really know what\nthey are use them as search, but if you think there's\ngoing to be some flexibility, you want to prevent the user\ngetting trapped in a bad spot,",
    "start": "2766730",
    "end": "2774540"
  },
  {
    "text": "and exceptions as a consequence\nare a good thing to use. ",
    "start": "2774540",
    "end": "2778445"
  }
]