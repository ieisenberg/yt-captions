[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING] ",
    "start": "0",
    "end": "12302"
  },
  {
    "text": "JASON KU: Hi, everyone. Welcome to the 11th\nlecture of 6.006, our first lecture on\nweighted shortest paths.",
    "start": "12302",
    "end": "21110"
  },
  {
    "text": "Until now, we've only been\ntalking about graphs that-- where we measure distance in\nterms of the number of edges",
    "start": "21110",
    "end": "29720"
  },
  {
    "text": "in a path. Today, we're going to\ngeneralize that notion. But I just want to go\nover what we've talked",
    "start": "29720",
    "end": "35240"
  },
  {
    "text": "about in the last two lectures. In the last two lectures, we've\ntalked about two algorithms,",
    "start": "35240",
    "end": "40820"
  },
  {
    "text": "breadth-first search\nand depth-first search to solve a range of problems. Here's some of the problems\nthat we've been solving.",
    "start": "40820",
    "end": "47570"
  },
  {
    "text": "Single-source shortest paths,\nwhere distances are measured in number of edges in a path.",
    "start": "47570",
    "end": "54720"
  },
  {
    "text": "And we used BFS to\nsolve this problem, starting from a\nsingle source, usually",
    "start": "54720",
    "end": "61590"
  },
  {
    "text": "a vertex s that we call. And we solve that\nin linear time. And we solve that\nin order v plus e.",
    "start": "61590",
    "end": "73490"
  },
  {
    "text": "That's what we called\nlinear time for a graph. For the special case of\nsingle-source reachability,",
    "start": "73490",
    "end": "79820"
  },
  {
    "text": "here we had to return a shortest\npath distance for every vertex.",
    "start": "79820",
    "end": "85420"
  },
  {
    "text": "And there was, at most, E\nthings reachable from a vertex. So this is the bound we got.",
    "start": "85420",
    "end": "93210"
  },
  {
    "text": "But in the special case for\nsingle-source reachability, when our output only has\nto list the vertices that",
    "start": "93210",
    "end": "98310"
  },
  {
    "text": "are reachable from\nme, the number of things reachable in\nbasically a spanning tree",
    "start": "98310",
    "end": "105660"
  },
  {
    "text": "of the connected\ncomponent of my source can almost be of order E. And\nso for all the little singleton",
    "start": "105660",
    "end": "112799"
  },
  {
    "text": "vertices in my graph,\nI don't really care. So I can get this in\norder E, but that's",
    "start": "112800",
    "end": "119070"
  },
  {
    "text": "kind of a little optimization. The next thing we\ndid was we talked",
    "start": "119070",
    "end": "125729"
  },
  {
    "text": "about connected components. And we didn't just reduce\nto using a search algorithm",
    "start": "125730",
    "end": "131160"
  },
  {
    "text": "like a single-source\nreachability algorithm like BFS or DFS. We put a for loop around that\nto explore the entire graph",
    "start": "131160",
    "end": "140100"
  },
  {
    "text": "by basically saying,\nif I've explored one connected\ncomponent, then I can",
    "start": "140100",
    "end": "146810"
  },
  {
    "text": "look at any other\nvertex I haven't seen and explore the next one. And so that actually with some--",
    "start": "146810",
    "end": "153830"
  },
  {
    "text": "a little analysis,\nalso got linear time, because I'm at most traversing\nany component of my graph once.",
    "start": "153830",
    "end": "161060"
  },
  {
    "text": "That's kind of the idea. And we can use that\nusing BFS or DFS really,",
    "start": "161060",
    "end": "167660"
  },
  {
    "text": "because we're just trying\nto get a thing that searches an entire connected component.",
    "start": "167660",
    "end": "173150"
  },
  {
    "text": "And then this\ntopological sort we did at the end of the last lecture. We used full DFS\nto give an ordering",
    "start": "173150",
    "end": "180470"
  },
  {
    "text": "of the vertices in a DAG-- maybe I'll specify clearly\nthat this is only for a DAG--",
    "start": "180470",
    "end": "189960"
  },
  {
    "text": "where we have an\nordering of the vertices so all the edges go forward\nin that order, for example.",
    "start": "189960",
    "end": "198960"
  },
  {
    "text": "And that we also\ndid in linear time. ",
    "start": "198960",
    "end": "205710"
  },
  {
    "text": "All right, in this lecture,\nand in actually the next four lectures, what\nwe're going to do is",
    "start": "205710",
    "end": "213480"
  },
  {
    "text": "instead of measuring distance\nin terms of the number of edges in a path-- so previously, distance\nequaled number of edges--",
    "start": "213480",
    "end": "225810"
  },
  {
    "text": "we're going to\ngeneralize that notion. So instead counting\nan edge, we're going to count an integer\nassociated with that edge.",
    "start": "225810",
    "end": "234240"
  },
  {
    "text": "It's going to be\ncalled a weight. So here's an example\nof a weighted graph G.",
    "start": "234240",
    "end": "241140"
  },
  {
    "text": "And I've labeled,\nin red, weights for each of these edges. This is a directed\ngraph on eight vertices.",
    "start": "241140",
    "end": "247850"
  },
  {
    "text": "And I've got an integer\nassociated with each edge. You'll notice, some of them\nare positive, some of them are negative.",
    "start": "247850",
    "end": "253372"
  },
  {
    "text": "It's OK to be zero as well. It's just any integer\nedge weight here.",
    "start": "253372",
    "end": "258648"
  },
  {
    "text": "So generally we're going to\nbe-- along with our graph G, we're going to be given\na weight function that maps",
    "start": "258649",
    "end": "269770"
  },
  {
    "text": "the edges of G to, we're going\nto say, integers, in this class",
    "start": "269770",
    "end": "278030"
  },
  {
    "text": "anyway. In other contexts,\nin mathematics, you might have these\nbe real numbers.",
    "start": "278030",
    "end": "283380"
  },
  {
    "text": "But in this class, we're\ngoing to deal with integers. So each edge, if\nyou have an edge,",
    "start": "283380",
    "end": "288890"
  },
  {
    "text": "we're going to say this\nis the edge weight--",
    "start": "288890",
    "end": "293930"
  },
  {
    "text": "the weight of this\nedge e, from e. Sometimes, if this\nedge e is u, v, we",
    "start": "293930",
    "end": "304910"
  },
  {
    "text": "might sometimes say\nthe weight from u to v, since we have a simple\ngraph that's unambiguous.",
    "start": "304910",
    "end": "314060"
  },
  {
    "text": "All right, so but this is just\ntalking about our notation. So in general, for example,\nthe weight from vertex b",
    "start": "314060",
    "end": "321949"
  },
  {
    "text": "to f in this graph is what? Can someone tell me? AUDIENCE: Minus 4. JASON KU: Minus 4, right?",
    "start": "321950",
    "end": "328030"
  },
  {
    "text": "It's right here. And I'll be consistent\nwith my coloring, because I've got\ncolored chalk today.",
    "start": "328030",
    "end": "336340"
  },
  {
    "text": "Minus 4. Happiness. All right, so why do we\ncare about adding weights",
    "start": "336340",
    "end": "341889"
  },
  {
    "text": "to our graph? Well, this comes up a\nlot in many applications.",
    "start": "341890",
    "end": "346900"
  },
  {
    "text": "For example, distances\nin a road network. if I have a road from here--",
    "start": "346900",
    "end": "354159"
  },
  {
    "text": "so from Mass Ave, front\nof MIT, to Central Square,",
    "start": "354160",
    "end": "360910"
  },
  {
    "text": "we might think of\nthat as one road. Maybe you've got each\nroad is a connection",
    "start": "360910",
    "end": "366699"
  },
  {
    "text": "between two intersections\nin my road network. But an edge, it takes\nlonger to go from,",
    "start": "366700",
    "end": "374389"
  },
  {
    "text": "say, Vassar Street to Amherst. That takes a shorter\namount of time than it does to go from\nMemorial Drive across the river",
    "start": "374390",
    "end": "382810"
  },
  {
    "text": "to Beacon Street. So we might want to associate\na larger distance or a weight",
    "start": "382810",
    "end": "388570"
  },
  {
    "text": "associated with that edge. Latency in a\nnetwork, for example.",
    "start": "388570",
    "end": "395590"
  },
  {
    "text": "Maybe strength of relationships\nin a social network. And you could imagine that\nit's possible maybe you're",
    "start": "395590",
    "end": "402610"
  },
  {
    "text": "\"frenemies\" with someone,\nyou don't like them, and so maybe you have a\nnegative weight associated",
    "start": "402610",
    "end": "408370"
  },
  {
    "text": "with an edge in\na social network. I'm not sure. Maybe not. But there are lots of\napplications where you might",
    "start": "408370",
    "end": "415210"
  },
  {
    "text": "want weights on your edges. So that comes to the\nnext question of,",
    "start": "415210",
    "end": "422449"
  },
  {
    "text": "how do I represent-- how do I give the\nuser, or the algorithm,",
    "start": "422450",
    "end": "428120"
  },
  {
    "text": "these weights in my graph? We had a representation\nfor a graph.",
    "start": "428120",
    "end": "435349"
  },
  {
    "text": "Our common way to\nrepresent a graph was store a set data structure\non the vertices mapping",
    "start": "435350",
    "end": "441800"
  },
  {
    "text": "to the adjacencies\nof each vertex, which we stored in what we called an\nadjacency list, which really",
    "start": "441800",
    "end": "448250"
  },
  {
    "text": "could be any data structure. Commonly, it's just an\narray of the adjacencies.",
    "start": "448250",
    "end": "455870"
  },
  {
    "text": "But you could also have that\nbe a set data structure,",
    "start": "455870",
    "end": "460880"
  },
  {
    "text": "where you can query in\nconstant time what-- if a particular adjacency\nexists in that graph.",
    "start": "460880",
    "end": "468000"
  },
  {
    "text": "So there are two common\nways to store these weights.",
    "start": "468000",
    "end": "473990"
  },
  {
    "text": "One is just, with\nevery adjacency, I'm going to store its weight. Maybe just in a tuple.",
    "start": "473990",
    "end": "482030"
  },
  {
    "text": "With each adjacency, also\nstore weight of the edge",
    "start": "482030",
    "end": "496190"
  },
  {
    "text": "that it corresponds\nto, just in any way. A second way, instead of trying\nto modify our graph structure",
    "start": "496190",
    "end": "505580"
  },
  {
    "text": "that we gave you\nbefore, let's just have a dictionary of all the\nedges mapping to their weights.",
    "start": "505580",
    "end": "511280"
  },
  {
    "text": "And we already know\nhow to do that. Just any set data structure--\nany separate set data structure",
    "start": "511280",
    "end": "523370"
  },
  {
    "text": "mapping edges to their,\nI guess, weights.",
    "start": "523370",
    "end": "531380"
  },
  {
    "text": "Bad notation, but\nyou get the idea.  And it doesn't really\nmatter how we're doing this.",
    "start": "531380",
    "end": "538880"
  },
  {
    "text": "The assumption that we're\ngoing to rely on here is that, given an edge,\ngiven this vertex pair,",
    "start": "538880",
    "end": "547130"
  },
  {
    "text": "I can query what the weight of\nthat edge is in constant time. And so if I'm\ngoing to do that, I",
    "start": "547130",
    "end": "553280"
  },
  {
    "text": "can either store it with maybe\na hash table of hash tables-- a hash table mapping the set of\nvertices to their adjacencies,",
    "start": "553280",
    "end": "562650"
  },
  {
    "text": "and then each adjacency\nlist stores its adjacencies in a hash table.",
    "start": "562650",
    "end": "567740"
  },
  {
    "text": "And that way, in\nconstant time, I can check what the\nweight is there. Or here, I'm just--",
    "start": "567740",
    "end": "573829"
  },
  {
    "text": "I could even have\njust a single hash table mapping the pair, the\nedge, the tuple, constant size,",
    "start": "573830",
    "end": "582960"
  },
  {
    "text": "to its weight. So either way is fine. We're just going to\nassume that we can query",
    "start": "582960",
    "end": "589050"
  },
  {
    "text": "an edge in constant time-- the weight of an edge\nin constant time. OK, so this is\nthat graph example.",
    "start": "589050",
    "end": "598139"
  },
  {
    "text": "It's a little busy here. I'm probably going to erase\nthat in just a second. But we're going to move on to\nwhat giving these edges weights",
    "start": "598140",
    "end": "607680"
  },
  {
    "text": "implies for these problems\nthat we've defined",
    "start": "607680",
    "end": "613710"
  },
  {
    "text": "in terms of unweighted graphs. In particular, we are\ngoing to be concentrating on single-source shortest\npaths, again, at least",
    "start": "613710",
    "end": "622143"
  },
  {
    "text": "for the next three lectures. We'll generalize that even\nstill in the next lecture--",
    "start": "622143",
    "end": "628529"
  },
  {
    "text": "I mean, in the fourth-- in three lectures from now.",
    "start": "628530",
    "end": "633710"
  },
  {
    "text": "But what we had here was\nthat the distance before in an unweighted graph was the\nnumber of edges in the path.",
    "start": "633710",
    "end": "639920"
  },
  {
    "text": "Here, we're going to generalize\nthat notion kind of obviously",
    "start": "639920",
    "end": "646399"
  },
  {
    "text": "to weighted paths. ",
    "start": "646400",
    "end": "652190"
  },
  {
    "text": "And the weight of a path,\nI'm going call it pi.",
    "start": "652190",
    "end": "659330"
  },
  {
    "text": "So some weight of\npath pi is just",
    "start": "659330",
    "end": "668090"
  },
  {
    "text": "going to be the\nsum of the weights in the edges in the path. So edge in the path, I'm\ngoing to sum their weights.",
    "start": "668090",
    "end": "680510"
  },
  {
    "text": "So that's all the\nweight of a path means. It's just I'm going to sum\nall the weights in a path. So if I took a look at the--",
    "start": "680510",
    "end": "687019"
  },
  {
    "text": "maybe there's a\nparticular path here. The path from a to b to f\nto g is going to be minus 5,",
    "start": "687020",
    "end": "695930"
  },
  {
    "text": "minus 4, 2. It's going to be minus\n9 plus 2 is minus 7.",
    "start": "695930",
    "end": "703250"
  },
  {
    "text": "So just as an example. ",
    "start": "703250",
    "end": "708769"
  },
  {
    "text": "So then what is the\nshortest path then? Well, kind of obviously\namong all paths between two",
    "start": "708770",
    "end": "715790"
  },
  {
    "text": "vertices, it's going to be\none with the minimum weight. Yeah, question.",
    "start": "715790",
    "end": "720920"
  },
  {
    "text": "AUDIENCE: Can I use the\nsame edge more than once? JASON KU: Can I use the\nsame edge more than once?",
    "start": "720920",
    "end": "726709"
  },
  {
    "text": "Right now, you're asking about\nthe distinction in our class",
    "start": "726710",
    "end": "732980"
  },
  {
    "text": "which we have between\npaths and simple paths. So here, a weighted\npath doesn't really",
    "start": "732980",
    "end": "738560"
  },
  {
    "text": "care if we visit an\nedge more than once. So if an edge appears\nmore than once in pi,",
    "start": "738560",
    "end": "744920"
  },
  {
    "text": "we have to count that more\nthan once in the edge weight-- in the weight of the path.",
    "start": "744920",
    "end": "750110"
  },
  {
    "text": "OK, great question. But what we're going to see\nlater on is shortest paths",
    "start": "750110",
    "end": "759120"
  },
  {
    "text": "cannot repeat an edge more\nthan once in certain contexts.",
    "start": "759120",
    "end": "767320"
  },
  {
    "text": "So we're going to get\nto the problem there a little later in this lecture. And we're going to solve\nthat in tomorrow's lecture.",
    "start": "767320",
    "end": "774410"
  },
  {
    "text": "But if you have-- we're getting a little\nahead of ourselves. But when we have negative\nweights in a graph,",
    "start": "774410",
    "end": "781330"
  },
  {
    "text": "it's possible that\nthings go wrong. We're going to get there\nin about five lines. OK, great.",
    "start": "781330",
    "end": "786850"
  },
  {
    "text": "So a shortest path-- ",
    "start": "786850",
    "end": "797189"
  },
  {
    "text": "and in this case, I'm\ngoing to clarify that this is the weighted shortest path-- ",
    "start": "797190",
    "end": "803850"
  },
  {
    "text": "is a minimum-- min-i-mum--",
    "start": "803850",
    "end": "809149"
  },
  {
    "text": " sure-- is a minimum\nweight path from s to t.",
    "start": "809150",
    "end": "827140"
  },
  {
    "text": "Nothing too interesting\nhere, but there's actually some subtleties we\nhave to deal with here. ",
    "start": "827140",
    "end": "834790"
  },
  {
    "text": "We're going to call-- just like we did with\nbreadth-first search when we talked about\nshortest paths,",
    "start": "834790",
    "end": "840430"
  },
  {
    "text": "we're going to define\nan expression for what",
    "start": "840430",
    "end": "845620"
  },
  {
    "text": "the distance or the\nshortest path weight",
    "start": "845620",
    "end": "850690"
  },
  {
    "text": "is between two vertices. And I'm going to\nrepresent that by a delta. A delta from a vertex\ns to t is going to be--",
    "start": "850690",
    "end": "863230"
  },
  {
    "text": "let's-- I'm going to do\nthe wrong thing first-- the minimum over the weight\nof all paths for all paths pi",
    "start": "863230",
    "end": "876959"
  },
  {
    "text": "from s to t.",
    "start": "876960",
    "end": "883030"
  },
  {
    "text": "OK, so there's a couple\nthings that go wrong here. First thing that goes wrong is\nthe same thing that went wrong",
    "start": "883030",
    "end": "890410"
  },
  {
    "text": "with breadth-first search. Anyone remember what could go\nwrong with breadth-first search",
    "start": "890410",
    "end": "896079"
  },
  {
    "text": "for this delta definition? AUDIENCE: Maybe there's no path. JASON KU: Maybe\nthere's no path, right.",
    "start": "896080",
    "end": "901450"
  },
  {
    "text": "So except if no path. ",
    "start": "901450",
    "end": "907990"
  },
  {
    "text": "Just by convention,\nwe're setting delta s, t, to equal infinity.",
    "start": "907990",
    "end": "915580"
  },
  {
    "text": "But there's one\nadditional problem with weighted shortest paths,\nand it's a little subtle.",
    "start": "915580",
    "end": "926320"
  },
  {
    "text": "It's possible that\na finite shortest-- finite length shortest\npath doesn't exist.",
    "start": "926320",
    "end": "933460"
  },
  {
    "text": "And what do I mean by that? It means I could keep going\nthrough edges in my graph",
    "start": "933460",
    "end": "941630"
  },
  {
    "text": "and continually\ngetting a shorter path.",
    "start": "941630",
    "end": "946660"
  },
  {
    "text": "So if the shortest-- the\nminimum weight of a path from s",
    "start": "946660",
    "end": "951670"
  },
  {
    "text": "to t actually goes through\nan infinite number of edges, then this isn't\nreally well-defined.",
    "start": "951670",
    "end": "957550"
  },
  {
    "text": "So I'm going to change\nthis minimum here to-- in mathematics we would,\njust to be specific,",
    "start": "957550",
    "end": "967870"
  },
  {
    "text": "we call it an infimum. So if in the case where the\nweight of a shortest path",
    "start": "967870",
    "end": "976430"
  },
  {
    "text": "can approach arbitrarily\nsmall, then we'll call this thing minus infinity.",
    "start": "976430",
    "end": "984140"
  },
  {
    "text": "So when does that occur? ",
    "start": "984140",
    "end": "991290"
  },
  {
    "text": "When does that occur? When could we have\nour shortest path",
    "start": "991290",
    "end": "996690"
  },
  {
    "text": "go through lots and\nlots of vertices? Well, let's actually take a\nlook at this example here. Can someone tell me\nwhat the shortest path",
    "start": "996690",
    "end": "1003490"
  },
  {
    "text": "is from a to actually\nany vertex in this graph?",
    "start": "1003490",
    "end": "1010470"
  },
  {
    "text": " AUDIENCE: b, f, g, c.",
    "start": "1010470",
    "end": "1017310"
  },
  {
    "text": "JASON KU: Ah, OK. So well, we could look\nat this path I have to b.",
    "start": "1017310",
    "end": "1023680"
  },
  {
    "text": "Let's just take a look at b. I have a path going from\na to b that is minus 5. OK, that's pretty good.",
    "start": "1023680",
    "end": "1029380"
  },
  {
    "text": "That's pretty small. And it seems that if I go around\nthis graph through another way,",
    "start": "1029380",
    "end": "1037329"
  },
  {
    "text": "it might be bigger. So I go 7 plus 3\nplus 8-- that's 15--",
    "start": "1037329",
    "end": "1044020"
  },
  {
    "text": "minus 1-- that's 14. That's much bigger than minus\n5, so it seems like minus 5",
    "start": "1044020",
    "end": "1050590"
  },
  {
    "text": "should be good, right? Anyone have a problem with\nthis path or a problem with this being\nthe shortest path?",
    "start": "1050590",
    "end": "1057680"
  },
  {
    "text": "And what your\ncolleague just informed me was that there is something\ninteresting happening here",
    "start": "1057680",
    "end": "1063790"
  },
  {
    "text": "in this graph in particular. We have a cycle from\nb to f to g to c",
    "start": "1063790",
    "end": "1072620"
  },
  {
    "text": "that has negative\ntotal weight back to b. This has minus 4 plus\n2 plus 1 minus 1.",
    "start": "1072620",
    "end": "1083070"
  },
  {
    "text": "So that total cycle has a\ncycle weight of minus 2,",
    "start": "1083070",
    "end": "1089419"
  },
  {
    "text": "this negative weight cycle. So if I want to get\nto b, I could go there",
    "start": "1089420",
    "end": "1096740"
  },
  {
    "text": "via this minus 5 weight edge. But every time I circled around\nthis cycle, I incur minus 2",
    "start": "1096740",
    "end": "1107190"
  },
  {
    "text": "to my path weight. So I just keep going around\nthis cycle over and over",
    "start": "1107190",
    "end": "1112740"
  },
  {
    "text": "and over and over and\nover and over again, and I don't have any finite\nlength minimum weight path.",
    "start": "1112740",
    "end": "1121290"
  },
  {
    "text": "And in such cases, we just say\nthat delta is minus infinity.",
    "start": "1121290",
    "end": "1126720"
  },
  {
    "text": "So the problem here is that\nwe could have negative weight cycles--",
    "start": "1126720",
    "end": "1132075"
  },
  {
    "text": " deserves a capital letter--",
    "start": "1132075",
    "end": "1137340"
  },
  {
    "text": "Negative weight cycles.",
    "start": "1137340",
    "end": "1143115"
  },
  {
    "text": " It's a problem.",
    "start": "1143115",
    "end": "1148270"
  },
  {
    "text": " In particular, if there\nexists a path from s",
    "start": "1148270",
    "end": "1165230"
  },
  {
    "text": "to some vertex v that\ngoes through a vertex",
    "start": "1165230",
    "end": "1183630"
  },
  {
    "text": "on a negative\nweight cycle, then I",
    "start": "1183630",
    "end": "1196840"
  },
  {
    "text": "can take that path to\nthat vertex, circle around the negative weight\ncycle, and then proceed to v,",
    "start": "1196840",
    "end": "1204280"
  },
  {
    "text": "and I can take that cycle\nas many times as I want. Then this delta s,v we're\ngoing to set to minus infinity.",
    "start": "1204280",
    "end": "1214360"
  },
  {
    "text": "And in such cases, in our\nshortest paths algorithm, we don't really care about\nwhat the shortest path is.",
    "start": "1214360",
    "end": "1223040"
  },
  {
    "text": "We're not even going to\ndeal with parent pointers here, because there is no\nfinite length shortest path.",
    "start": "1223040",
    "end": "1230675"
  },
  {
    "text": "So I'm just going to kind of\nthrow up my hands in the air and say, you know what, I can't\nreturn you a shortest path,",
    "start": "1230675",
    "end": "1235900"
  },
  {
    "text": "but I might want to return to\nyou a negative weight cycle.",
    "start": "1235900",
    "end": "1241230"
  },
  {
    "text": "If you told me that this\nthing has bad weight, maybe I want you to\ntell me what a path is",
    "start": "1241230",
    "end": "1247650"
  },
  {
    "text": "that goes through a negative\nweight cycle to get back to s. So that's what we're going\nto talk about next lecture.",
    "start": "1247650",
    "end": "1254340"
  },
  {
    "text": "This lecture, we are not\ngoing to talk about that. We are going to talk about\nweighted shortest paths,",
    "start": "1254340",
    "end": "1259500"
  },
  {
    "text": "though. That's what the remainder\nof this unit on graphs",
    "start": "1259500",
    "end": "1266520"
  },
  {
    "text": "is really about is\nweighted shortest paths. OK, so in weighted\nshortest paths,",
    "start": "1266520",
    "end": "1271890"
  },
  {
    "text": "we actually know an\nalgorithm already to solve a subset of weighted\nshortest parts, namely BFS,",
    "start": "1271890",
    "end": "1281640"
  },
  {
    "text": "right? Now, you're like\nwait, Jason, BFS",
    "start": "1281640",
    "end": "1287390"
  },
  {
    "text": "doesn't solve weighted\nshortest paths. We didn't even know about\nweighted graphs then. How does that solve\nweighted shortest paths?",
    "start": "1287390",
    "end": "1293840"
  },
  {
    "text": "Well, there's a\ncouple cases where we might be able to reduce to\nsolving shortest paths using",
    "start": "1293840",
    "end": "1301850"
  },
  {
    "text": "BFS. Can anyone think\nof such a scenario? ",
    "start": "1301850",
    "end": "1310110"
  },
  {
    "text": "So let's say, I mean, kind\nof what we did before was we",
    "start": "1310110",
    "end": "1315150"
  },
  {
    "text": "counted the number of edges. So if we gave a weight of 1\nto every edge in my graph,",
    "start": "1315150",
    "end": "1323680"
  },
  {
    "text": "then just that graph,\nthat weighted graph, corresponds to an unweighted\ngraph using the other distance",
    "start": "1323680",
    "end": "1332320"
  },
  {
    "text": "metric. So in that case, BFS\njust solves our problem.",
    "start": "1332320",
    "end": "1337559"
  },
  {
    "text": "And in fact, we can\ngeneralize further. What if all of our weights were\npositive, but the same value?",
    "start": "1337560",
    "end": "1347340"
  },
  {
    "text": "If it was all positive\nand the same value, then we could just\ndivide by that value.",
    "start": "1347340",
    "end": "1355679"
  },
  {
    "text": "Now we have an unweighted graph\nwhich we can run BFS, and then",
    "start": "1355680",
    "end": "1360870"
  },
  {
    "text": "multiply shortest path distances\nby that value later on. And in fact, there's one further\ngeneralization we can make,",
    "start": "1360870",
    "end": "1368430"
  },
  {
    "text": "which is a little bit of a\ntricky graph transformation problem.",
    "start": "1368430",
    "end": "1373460"
  },
  {
    "text": "But we can also get this\nlinear time algorithm for weighted single-source\nshortest paths",
    "start": "1373460",
    "end": "1380480"
  },
  {
    "text": "in contexts where the\nweights aren't that large.",
    "start": "1380480",
    "end": "1386570"
  },
  {
    "text": "So if I have positive\nedge weights-- if I have a positive\nedge weight, let's say--",
    "start": "1386570",
    "end": "1393380"
  },
  {
    "text": " using my weight color here--",
    "start": "1393380",
    "end": "1400170"
  },
  {
    "text": "that's, like,\nweight of 4, that's",
    "start": "1400170",
    "end": "1405720"
  },
  {
    "text": "kind of problematic, because\nI don't know how to simulate that using an unweighted graph.",
    "start": "1405720",
    "end": "1410820"
  },
  {
    "text": "Or do I? Anyone have an\nidea of how I could simulate an edge of weight\n4 with an unweighted graph?",
    "start": "1410820",
    "end": "1421140"
  },
  {
    "text": "Yeah. AUDIENCE: Have four\nedges of weight 1. JASON KU: Yeah, I can\njust put four edges of weight 1 in parallel here--",
    "start": "1421140",
    "end": "1428960"
  },
  {
    "text": "I'm sorry, in series,\nthe opposite of parallel. I can just convert this\nhere into 1, 2, 3, 4 edges.",
    "start": "1428960",
    "end": "1442880"
  },
  {
    "text": "And if I do that for\nevery edge in my graph and we have positive\nedge weights,",
    "start": "1442880",
    "end": "1448340"
  },
  {
    "text": "then that\ntransformation can hold. Now, that's not necessarily a\ngood transformation to make. Why?",
    "start": "1448340",
    "end": "1454886"
  },
  {
    "text": "AUDIENCE: The weight\nmight be very big. JASON KU: Yeah, the\nweights might be very big compared to the number of\nvertices and edges in my graph.",
    "start": "1454886",
    "end": "1462860"
  },
  {
    "text": "However, if the sum of\nall weights in my graph is asymptotically\nless than v plus e,",
    "start": "1462860",
    "end": "1472400"
  },
  {
    "text": "we can get a linear\ntime algorithm again by reducing to BFS. OK, so that's great. ",
    "start": "1472400",
    "end": "1480650"
  },
  {
    "text": "But in general, that gives\nus a linear time algorithm in these very special cases.",
    "start": "1480650",
    "end": "1486530"
  },
  {
    "text": "And in general, it's\nan open problem. We don't know\nwhether we can solve",
    "start": "1486530",
    "end": "1492170"
  },
  {
    "text": "the single-source\nshortest paths problem in the weighted context for\ngeneral graphs in linear time.",
    "start": "1492170",
    "end": "1500960"
  },
  {
    "text": "We don't know how to do it. But what we do know are some\nalgorithms that do pretty well.",
    "start": "1500960",
    "end": "1508559"
  },
  {
    "text": "And that's what we\nuse all the time. But one more special case\nwe're going to go over today",
    "start": "1508560",
    "end": "1515240"
  },
  {
    "text": "is when we have this\nreally nice structure where we have a DAG, a\nDirected Acyclic",
    "start": "1515240",
    "end": "1522350"
  },
  {
    "text": "Graph, like we were talking\nabout in the last lecture.",
    "start": "1522350",
    "end": "1528030"
  },
  {
    "text": "For any set of edge weights-- remember, with BFS, we needed\nto restrict our edge weights",
    "start": "1528030",
    "end": "1533580"
  },
  {
    "text": "to be positive and maybe bounded\nto get this good running time?",
    "start": "1533580",
    "end": "1539710"
  },
  {
    "text": "For any set of edge weights,\nif our graph structure is DAG-- it really has nothing\nto do with the weights--",
    "start": "1539710",
    "end": "1545110"
  },
  {
    "text": "if the graph structure\nis a DAG, then we can actually solve this\nsingle-source shortest paths",
    "start": "1545110",
    "end": "1551320"
  },
  {
    "text": "problem in linear time,\nwhich is pretty awesome.",
    "start": "1551320",
    "end": "1556630"
  },
  {
    "text": "Now, for general graphs, we're\ngoing to show you in the next",
    "start": "1556630",
    "end": "1562720"
  },
  {
    "text": "lecture how to, for any\ngraph-- even with cycles, even with negative\nweight cycles--",
    "start": "1562720",
    "end": "1568780"
  },
  {
    "text": "we're going to show\nyou how to solve this single-source\nshortest paths problem in something like a\nquadratic running time bound.",
    "start": "1568780",
    "end": "1574909"
  },
  {
    "text": "Now, this isn't the\nbest known, but it's a really practical algorithm\nand people use it all the time.",
    "start": "1574910",
    "end": "1581390"
  },
  {
    "text": "And we are going to\nshow Bellman-Ford in the context of\nthe DAG algorithm",
    "start": "1581390",
    "end": "1588940"
  },
  {
    "text": "we're going to solve today. So that's the very\ngeneral case in terms",
    "start": "1588940",
    "end": "1595030"
  },
  {
    "text": "of restrictions on our graph. But in reality, most problems\nthat come up in applications",
    "start": "1595030",
    "end": "1603070"
  },
  {
    "text": "occur with graphs that\nhave positive edge weights. You can think of a road network.",
    "start": "1603070",
    "end": "1608379"
  },
  {
    "text": "You've got-- or\nnon-negative ones anyway. You're traveling along,\nand it's not ever",
    "start": "1608380",
    "end": "1616000"
  },
  {
    "text": "useful to go back to\nwhere you came from, because you want to make\nprogress to where you're going.",
    "start": "1616000",
    "end": "1623470"
  },
  {
    "text": "So in the context where you\ndon't have negative weights, you don't have this problem\nwhere you have negative weight",
    "start": "1623470",
    "end": "1629290"
  },
  {
    "text": "cycles. We can actually do a lot better\nby exploiting that property.",
    "start": "1629290",
    "end": "1635320"
  },
  {
    "text": "And we get a bound that's\na little bit-- that looks a little bit more like n log n.",
    "start": "1635320",
    "end": "1641050"
  },
  {
    "text": "It's pretty close to linear. You're losing a log factor\non the number of vertices.",
    "start": "1641050",
    "end": "1647740"
  },
  {
    "text": "But it's pretty good. This is called\nDijkstra, and we'll get to that in two lectures. OK, so that's the\nroadmap of what",
    "start": "1647740",
    "end": "1655360"
  },
  {
    "text": "we're going to do for at\nleast the next three lectures. But before we go\non to showing you",
    "start": "1655360",
    "end": "1661929"
  },
  {
    "text": "how to solve single-source\nshortest paths in a DAG using this algorithm that I'm\ncalling DAG relaxation here,",
    "start": "1661930",
    "end": "1672800"
  },
  {
    "text": "I'm going to go back to\na thing that we talked about in breadth-first\nsearch, where",
    "start": "1672800",
    "end": "1677908"
  },
  {
    "text": "in breadth-first search when we\nsolved single-source shortest paths, we output two things.",
    "start": "1677908",
    "end": "1684049"
  },
  {
    "text": "We output single-source\nshortest paths, these deltas, for the other definition\nof distance, the weights--",
    "start": "1684050",
    "end": "1693139"
  },
  {
    "text": "I mean, not the weights,\nthe distances, the shortest distances.",
    "start": "1693140",
    "end": "1698600"
  },
  {
    "text": "But we also returned\nparent pointers. We return parent\npointers back along paths",
    "start": "1698600",
    "end": "1704990"
  },
  {
    "text": "to the source along\nshortest paths. We call this the\nshortest paths tree. So I'm going to revisit this\ntopic of shortest paths tree--",
    "start": "1704990",
    "end": "1713450"
  },
  {
    "text": "shortest path trees--\nshortest path trees.",
    "start": "1713450",
    "end": "1722750"
  },
  {
    "text": " And in particular,\nit's kind of going to be annoying to talk about\nboth of these quantities--",
    "start": "1722750",
    "end": "1731930"
  },
  {
    "text": "distances and parent pointers--\nas we go through all three of these algorithms.",
    "start": "1731930",
    "end": "1737450"
  },
  {
    "text": "It's basically going\nto be bookkeeping to-- distances are actually\nsufficient for us",
    "start": "1737450",
    "end": "1744110"
  },
  {
    "text": "to reconstruct parent pointers\nif we need them later. So what I'm going to show\nfor you-- prove to you now",
    "start": "1744110",
    "end": "1750110"
  },
  {
    "text": "is that, if I give\nyou the shortest path distances for the subset of\nthe graph reachable from s",
    "start": "1750110",
    "end": "1759490"
  },
  {
    "text": "that doesn't go through\nnegative weight cycles, if I'm giving you\nthose distances,",
    "start": "1759490",
    "end": "1765340"
  },
  {
    "text": "I can reconstruct parent\npointers along shortest paths in linear time for any\ngraph I might give you",
    "start": "1765340",
    "end": "1775130"
  },
  {
    "text": "if I give you those\nshortest path distances. OK, so that's what I'm going\nto try to show to you now.",
    "start": "1775130",
    "end": "1780200"
  },
  {
    "text": " So here's the algorithm.",
    "start": "1780200",
    "end": "1789290"
  },
  {
    "text": "For weighted-- there's\nthe caveat here I'm going to write down. For weighted shortest paths,\nonly need parent pointers",
    "start": "1789290",
    "end": "1803000"
  },
  {
    "text": "for v with finite\nshortest path distance--",
    "start": "1803000",
    "end": "1814710"
  },
  {
    "text": " only finite shortest\npath distance. We don't care about\nthe infinite ones",
    "start": "1814710",
    "end": "1821550"
  },
  {
    "text": "or the minus infinite\nones, just the finite ones. OK, so here's the algorithm.",
    "start": "1821550",
    "end": "1827100"
  },
  {
    "text": "I can initialize\nall Pv to equal--",
    "start": "1827100",
    "end": "1836760"
  },
  {
    "text": "sorry, oh, getting\nahead of myself.",
    "start": "1836760",
    "end": "1842730"
  },
  {
    "text": "I'm writing down DAG. ",
    "start": "1842730",
    "end": "1848910"
  },
  {
    "text": "Init parent pointer data\nstructure to be empty.",
    "start": "1848910",
    "end": "1854150"
  },
  {
    "text": " At first, I'm not going to\nsort any parent pointers.",
    "start": "1854150",
    "end": "1860620"
  },
  {
    "text": "But at the beginning, I'm\ngoing to set the parent pointer of the source to be none.",
    "start": "1860620",
    "end": "1867820"
  },
  {
    "text": "So that's what we kind of did\nin breadth-first search as well.",
    "start": "1867820",
    "end": "1873389"
  },
  {
    "text": "Now, what I've given you is-- I'm trying to show that,\ngiven all the shortest path",
    "start": "1873390",
    "end": "1878970"
  },
  {
    "text": "distances, I can construct\nthese parent pointers correctly. So what I'm going to do is,\nfor each vertex u in my graph,",
    "start": "1878970",
    "end": "1894110"
  },
  {
    "text": "where my delta s of u is\nfinite, what am I going to do?",
    "start": "1894110",
    "end": "1907640"
  },
  {
    "text": "I'm going to say,\nwell, let's take a look at all my outgoing neighbors.",
    "start": "1907640",
    "end": "1914380"
  },
  {
    "text": "This is kind of what we do\nin every graph algorithm. For each v in the adjacency,\nthe outgoing adjacencies of u,",
    "start": "1914380",
    "end": "1930410"
  },
  {
    "text": "if there is no parent\npointer assigned to this v,",
    "start": "1930410",
    "end": "1938000"
  },
  {
    "text": "there's the potential\nthat i-- u-- [CHUCKLES] I, you-- this u, this\nvertex u, is the parent of v.",
    "start": "1938000",
    "end": "1944870"
  },
  {
    "text": "It's possible. It's some incoming edge to v.",
    "start": "1944870",
    "end": "1949940"
  },
  {
    "text": "When will it be an\nincoming edge to v? If v not in P--",
    "start": "1949940",
    "end": "1960860"
  },
  {
    "text": "I haven't assigned\nit a parent pointer-- and-- so this means\nit could be my parent.",
    "start": "1960860",
    "end": "1971070"
  },
  {
    "text": "When is it my parent\nalong the shortest path?",
    "start": "1971070",
    "end": "1977269"
  },
  {
    "text": "Sure. AUDIENCE: Sum the\ndistance along the edge to the distance of the other. JASON KU: Yeah, so we\nhave some edge from u",
    "start": "1977270",
    "end": "1984635"
  },
  {
    "text": "to v. It has some weight. If I already know the\nshortest path distance to u,",
    "start": "1984635",
    "end": "1991400"
  },
  {
    "text": "and I know the shortest\npath distance to v, if the shortest path\ndistance from s to u--",
    "start": "1991400",
    "end": "2000919"
  },
  {
    "text": "let's draw a picture here. We've got s, we've got\nsome path here to u, and we know we've\ngot an edge from u",
    "start": "2000920",
    "end": "2008720"
  },
  {
    "text": "to v. If this shortest path\ndistance plus this edge weight",
    "start": "2008720",
    "end": "2017510"
  },
  {
    "text": "is equal to the shortest\npath distance from s to v,",
    "start": "2017510",
    "end": "2023570"
  },
  {
    "text": "then it better-- I mean, there may be more\nthan one shortest path, but this is certainly\na shortest path,",
    "start": "2023570",
    "end": "2028640"
  },
  {
    "text": "so we can assign a\nparent pointer back to u. So let's write that\ncondition down.",
    "start": "2028640",
    "end": "2034100"
  },
  {
    "text": "If the shortest path\ndistance from s to v equals the shortest path\ndistance from s to u,",
    "start": "2034100",
    "end": "2042620"
  },
  {
    "text": "and then traversing\nthe edge from u to v,",
    "start": "2042620",
    "end": "2049530"
  },
  {
    "text": "then exists shortest\npath that uses edge u, v,",
    "start": "2049530",
    "end": "2066239"
  },
  {
    "text": "in particular this one.  So set the parent of u--",
    "start": "2066239",
    "end": "2077043"
  },
  {
    "text": "of v to u. OK, so this is the algorithm.",
    "start": "2077043",
    "end": "2082899"
  },
  {
    "text": "I'm not going to prove to\nyou that this is correct. But it kind of intuitively\nmakes sense, right?",
    "start": "2082900",
    "end": "2088590"
  },
  {
    "text": "If I have these\nshortest path distances, you can prove by induction\nthat not only does this parent",
    "start": "2088590",
    "end": "2095699"
  },
  {
    "text": "pointer point to the right place\nalong some shortest path here,",
    "start": "2095699",
    "end": "2100830"
  },
  {
    "text": "but it also does\nso in linear time, because I'm looping\nover all the vertices and looping over its\noutgoing adjacencies once.",
    "start": "2100830",
    "end": "2107760"
  },
  {
    "text": "Same analysis as we had for\nboth BFS and DFS, essentially.",
    "start": "2107760",
    "end": "2114310"
  },
  {
    "text": "And then, since we can do this,\nsince we can compute parent pointers from these\ndistances, we're",
    "start": "2114310",
    "end": "2120990"
  },
  {
    "text": "going to ignore computing these\nparent pointers from now on. We're just going to concentrate\non computing the distances,",
    "start": "2120990",
    "end": "2128280"
  },
  {
    "text": "because we're going to have\nto take linear time anyway at least.",
    "start": "2128280",
    "end": "2134040"
  },
  {
    "text": "And all these other\nthings take more time. So we can compute the\ndistances in more time,",
    "start": "2134040",
    "end": "2139080"
  },
  {
    "text": "and then compute\nthe parents after. OK, so that's what\nwe're going to do. ",
    "start": "2139080",
    "end": "2147090"
  },
  {
    "text": "So now, with all that buildup,\nlet's show an algorithm. [CHUCKLES] How do we compute\nsingle-source shortest paths",
    "start": "2147090",
    "end": "2156480"
  },
  {
    "text": "in a DAG in linear time? Well, a DAG-- I mean,\nthis is actually",
    "start": "2156480",
    "end": "2162859"
  },
  {
    "text": "a super useful, convenient\nthing in algorithms in general. DAGs are just nice things.",
    "start": "2162860",
    "end": "2170210"
  },
  {
    "text": "They're kind of\nordered in a way. There's this\ntopological sort order that we were talking\nabout before.",
    "start": "2170210",
    "end": "2175520"
  },
  {
    "text": "This is going to\nplay a key role. There's a really nice structure\nto DAGs not having cycles,",
    "start": "2175520",
    "end": "2181490"
  },
  {
    "text": "not having to deal with this\nnegative weight cycle problem. You can only go in one\ndirection along this graph.",
    "start": "2181490",
    "end": "2190820"
  },
  {
    "text": "It's a very nice\nstructure to exploit. And so we're going\nto exploit it. And here's the idea.",
    "start": "2190820",
    "end": "2197920"
  },
  {
    "text": "DAG relaxation, what\nit's going to do",
    "start": "2197920",
    "end": "2207210"
  },
  {
    "text": "is it's going to start out\nwith some estimates of what these distances should be.",
    "start": "2207210",
    "end": "2213180"
  },
  {
    "text": "So maintain distance estimates.",
    "start": "2213180",
    "end": "2221740"
  },
  {
    "text": " And now I'm going to\ntry to be careful here",
    "start": "2221740",
    "end": "2228870"
  },
  {
    "text": "about how I draw my Ds. ",
    "start": "2228870",
    "end": "2234510"
  },
  {
    "text": "This is a d, this is a delta.",
    "start": "2234510",
    "end": "2240290"
  },
  {
    "text": "This is shortest paths. This is a distance estimate. So that's what I'm\ngoing to be using",
    "start": "2240290",
    "end": "2246470"
  },
  {
    "text": "for the rest of this time. So we're going to maintain these\nestimates of distance d, which",
    "start": "2246470",
    "end": "2255890"
  },
  {
    "text": "are going to start at\ninitially infinite.",
    "start": "2255890",
    "end": "2264430"
  },
  {
    "text": "I don't know what they are. I don't know what the\nshortest paths are, but they better be less than\ninfinite or else I don't care.",
    "start": "2264430",
    "end": "2272040"
  },
  {
    "text": "So that's the worst\ncase scenario. It can't be worse than this-- for every vertex.",
    "start": "2272040",
    "end": "2279130"
  },
  {
    "text": "And we're going to\nmaintain the property that estimates upper bound--",
    "start": "2279130",
    "end": "2288839"
  },
  {
    "start": "2288840",
    "end": "2295100"
  },
  {
    "text": "that should probably\nbe two words-- upper bound delta s, v--",
    "start": "2295100",
    "end": "2300950"
  },
  {
    "text": " we're going to maintain that\nthey upper-bound this thing",
    "start": "2300950",
    "end": "2307670"
  },
  {
    "text": "and gradually lower\nuntil they're equal.",
    "start": "2307670",
    "end": "2317099"
  },
  {
    "text": " So this is the idea. We start from an over-estimate,\nan upper bound on the distance",
    "start": "2317100",
    "end": "2324770"
  },
  {
    "text": "estimate. And then we're repeatedly\ngoing to lower that value as we gain more information\nabout the graph,",
    "start": "2324770",
    "end": "2333070"
  },
  {
    "text": "maintaining that we're always\nupper-bounding the distance. And we're going to keep\ndoing it, keep doing it,",
    "start": "2333070",
    "end": "2338680"
  },
  {
    "text": "keep doing it, until, as we\nwill try to prove to you, these estimates reach, actually\nreach down, all the way",
    "start": "2338680",
    "end": "2346240"
  },
  {
    "text": "to our shortest path distances. So when do we\nlower these things? ",
    "start": "2346240",
    "end": "2353809"
  },
  {
    "text": "When do we lower these things? We are going to lower these\ndistance estimates whenever",
    "start": "2353810",
    "end": "2359210"
  },
  {
    "text": "the distance\nestimates violate what we're going to call the\ntriangle inequality. OK, what is the\ntriangle inequality?",
    "start": "2359210",
    "end": "2366038"
  },
  {
    "start": "2366038",
    "end": "2377000"
  },
  {
    "text": "Triangle inequality is actually\na pretty intuitive notion. ",
    "start": "2377000",
    "end": "2382130"
  },
  {
    "text": "It's basically saying,\nif I have three points-- thus, triangle-- maybe bigger\nso I can write a letter in them.",
    "start": "2382130",
    "end": "2389410"
  },
  {
    "text": " It's basically saying that if\nI have a vertex u, a vertex v,",
    "start": "2389410",
    "end": "2398210"
  },
  {
    "text": "vertex x, for example, the\nshortest path distance--",
    "start": "2398210",
    "end": "2404460"
  },
  {
    "text": " the shortest path\ndistance delta of u, v--",
    "start": "2404460",
    "end": "2412310"
  },
  {
    "text": "that's the shortest\ndistance from u to v-- it can't be bigger then a\nshortest path from u to v",
    "start": "2412310",
    "end": "2420810"
  },
  {
    "text": "that also goes through x.  Of my paths, I'm now\nrestricting the paths",
    "start": "2420810",
    "end": "2428670"
  },
  {
    "text": "I have to the ones\nthat go through x. ",
    "start": "2428670",
    "end": "2436030"
  },
  {
    "text": "The shortest path\ndistance from u to v can't be bigger than restricting\npaths that go through",
    "start": "2436030",
    "end": "2441340"
  },
  {
    "text": "x and taking that\nshortest distance, getting the shortest\npath distance from here and adding it to the\nshortest path distance here--",
    "start": "2441340",
    "end": "2449110"
  },
  {
    "text": "delta u, x, delta x, v.\nThat's just a statement of,",
    "start": "2449110",
    "end": "2461020"
  },
  {
    "text": "I'm restricting to a\nsubset of the paths. I can't decrease my\nminimum distance.",
    "start": "2461020",
    "end": "2467560"
  },
  {
    "text": "So this is the statement\nof the triangle inequality, that the shortest path\ndistance from u to v",
    "start": "2467560",
    "end": "2474530"
  },
  {
    "text": "can't be bigger than the\nshortest path distance from u",
    "start": "2474530",
    "end": "2480560"
  },
  {
    "text": "to x plus the shortest\npath distance from x to v for any x in my\ngraph that's not u and v.",
    "start": "2480560",
    "end": "2489410"
  },
  {
    "text": "So that's the\ntriangle inequality. Pretty intuitive notion, right? Why is this useful?",
    "start": "2489410",
    "end": "2496100"
  },
  {
    "text": "OK, well, if I find--  if I find an edge in my graph,\nif there's an edge u, v,",
    "start": "2496100",
    "end": "2506580"
  },
  {
    "text": "in my graph such that\nthis condition is violated",
    "start": "2506580",
    "end": "2519560"
  },
  {
    "text": "for the estimates that I have-- it obviously can't be violated\non my shortest path distances,",
    "start": "2519560",
    "end": "2525050"
  },
  {
    "text": "but if it violates\nit on the estimates-- u, v, is bigger than u, x--",
    "start": "2525050",
    "end": "2533960"
  },
  {
    "text": "sorry, u-- how am\nI going to do this? I want this to be s.",
    "start": "2533960",
    "end": "2540670"
  },
  {
    "text": "I'm calculating shortest\npath distances from s",
    "start": "2540670",
    "end": "2545849"
  },
  {
    "text": "and shortest path\ndistances from s to some incoming vertex u\nplus the edge weight from u",
    "start": "2545850",
    "end": "2555329"
  },
  {
    "text": "to v. All right, so\nwhat is this doing? I have some edge\nu, v in my graph.",
    "start": "2555330",
    "end": "2564539"
  },
  {
    "text": "Basically, what I've said\nis that I have some distance estimate to u, but\ngoing through--",
    "start": "2564540",
    "end": "2572240"
  },
  {
    "text": "making a path to v\nby going through u, and then the edge\nfrom u to v is better",
    "start": "2572240",
    "end": "2579380"
  },
  {
    "text": "than my current estimate,\nmy shortest path estimate to v.\nThat's bad, right?",
    "start": "2579380",
    "end": "2588222"
  },
  {
    "text": "That's violating the\ntriangle inequality. These cannot be\nthe right weights. These cannot be the\nright distances.",
    "start": "2588222",
    "end": "2594670"
  },
  {
    "text": "So how we're going\nto do that is lower-- this is what we said, repeatedly\nlower these distance estimates.",
    "start": "2594670",
    "end": "2601570"
  },
  {
    "text": "I'm going to lower this guy\ndown to equal this thing. In a sense, this\nconstraint was violated.",
    "start": "2601570",
    "end": "2608109"
  },
  {
    "text": "But now we're relaxing\nthat constraint so that this is no\nlonger violated.",
    "start": "2608110",
    "end": "2614140"
  },
  {
    "text": "So relax is a little\nweird word here. We're using it for\nhistorical reasons.",
    "start": "2614140",
    "end": "2620350"
  },
  {
    "text": "But that's what we mean\nby when we say relax. This thing is a\nviolated constraint.",
    "start": "2620350",
    "end": "2625390"
  },
  {
    "text": "It's got some pressure\nto be resolved. And so what we're doing\nis, to resolve it,",
    "start": "2625390",
    "end": "2630700"
  },
  {
    "text": "we're just setting\nthis guy equal to this, so it at least resolves,\nlocally, that constraint.",
    "start": "2630700",
    "end": "2635785"
  },
  {
    "text": "Now, it may violate the triangle\ninequality other places now that we've done this change.",
    "start": "2635785",
    "end": "2641650"
  },
  {
    "text": "But at least this constraint\nis now relaxed and satisfied. OK, so relax edge by lowering\nd of s, v, to this thing.",
    "start": "2641650",
    "end": "2665040"
  },
  {
    "text": "That's what we're going to\nmean by relaxing an edge. And relaxing an edge\nis what I'll call safe.",
    "start": "2665040",
    "end": "2675500"
  },
  {
    "text": "It's safe to do. What do I mean by\nrelaxation is safe?",
    "start": "2675500",
    "end": "2680819"
  },
  {
    "text": "It means that as I am computing\nthese shortest path distances,",
    "start": "2680820",
    "end": "2687210"
  },
  {
    "text": "I'm going to maintain this\nproperty that each one of these",
    "start": "2687210",
    "end": "2692300"
  },
  {
    "text": "estimates-- sorry,\nthese estimates here-- has the property\nthat it's either infinite or it is the\nweight of some path to v. So",
    "start": "2692300",
    "end": "2705799"
  },
  {
    "text": "that's the thing the-- relaxation is safe. ",
    "start": "2705800",
    "end": "2717940"
  },
  {
    "text": "OK, so each distance\nestimate, s, v,",
    "start": "2717940",
    "end": "2727960"
  },
  {
    "text": "is weight of some path\nfrom s to v or infinite.",
    "start": "2727960",
    "end": "2744820"
  },
  {
    "text": "And this is a pretty\neasy thing to prove. If I had the\ninvariant that these",
    "start": "2744820",
    "end": "2752410"
  },
  {
    "text": "were all weights\nof shortest paths, let's try to relax an edge. And we need to show that\nthis property is maintained.",
    "start": "2752410",
    "end": "2760450"
  },
  {
    "text": "Relax edge u, v, OK? Now, if I relax edge\nu, v, what do I do?",
    "start": "2760450",
    "end": "2768960"
  },
  {
    "text": "I set this thing-- or, sorry, I set this thing,\nmy shortest path distance",
    "start": "2768960",
    "end": "2776540"
  },
  {
    "text": "to v, to be this\nthing plus this thing. There's a weight of\nan edge from u to v.",
    "start": "2776540",
    "end": "2783110"
  },
  {
    "text": "Now, by my assumption\nthat we're maintaining that this is the weight\nof some path in my graph,",
    "start": "2783110",
    "end": "2793590"
  },
  {
    "text": "if this thing is\nbigger, I'm setting it to the weight of some\npath on my graph to u, plus an edge from u to v,\nand so this checks out.",
    "start": "2793590",
    "end": "2802970"
  },
  {
    "text": "So assign d of s, v,\nto weight of some path.",
    "start": "2802970",
    "end": "2820365"
  },
  {
    "text": " I'm not going to write down\nall the argument that I just",
    "start": "2820365",
    "end": "2827140"
  },
  {
    "text": "had here. But basically, since\nthis distance estimate was by supposition before the\nweight of some path to v--",
    "start": "2827140",
    "end": "2835520"
  },
  {
    "text": "to u, then this is, again,\nthe weight of some path to v. OK, great.",
    "start": "2835520",
    "end": "2841210"
  },
  {
    "text": "So now we're ready to actually\ngo through this algorithm. ",
    "start": "2841210",
    "end": "2848950"
  },
  {
    "text": "So DAG relaxation,\nfrom over there,",
    "start": "2848950",
    "end": "2855260"
  },
  {
    "text": "initializes all of our distance\nestimates to equal infinity,",
    "start": "2855260",
    "end": "2862730"
  },
  {
    "text": "just like we did in BFS.  Then, set my distance\nestimate to myself to be 0.",
    "start": "2862730",
    "end": "2877340"
  },
  {
    "text": "Now, it's possible that\nthis might be minus infinity or negative at some point.",
    "start": "2877340",
    "end": "2883480"
  },
  {
    "text": "But right now, I'm\njust setting it to 0. And either way, 0 is going to\nupper-bound the distance to s.",
    "start": "2883480",
    "end": "2891900"
  },
  {
    "text": "So in particular,\nat initialization,",
    "start": "2891900",
    "end": "2898339"
  },
  {
    "text": "anything not reachable\nfrom s is set correctly.",
    "start": "2898340",
    "end": "2904580"
  },
  {
    "text": "And s itself is set as an upper\nbound to the shortest path distance.",
    "start": "2904580",
    "end": "2910430"
  },
  {
    "text": "Now we're going to process each\nvertex u in a topological sort",
    "start": "2910430",
    "end": "2928730"
  },
  {
    "text": "order. So remember, our input to\nDAG relaxation is a DAG.",
    "start": "2928730",
    "end": "2934250"
  },
  {
    "text": "So this thing has a\ntopological sort order. We're going to process these\nvertices in that order.",
    "start": "2934250",
    "end": "2940700"
  },
  {
    "text": "You can imagine we're\nstarting at the top, and all my vertices are-- all my edges are\npointed away from me.",
    "start": "2940700",
    "end": "2947060"
  },
  {
    "text": "And I'm just\nprocessing each vertex down this topological sort line.",
    "start": "2947060",
    "end": "2953390"
  },
  {
    "text": "And then for each\nof these vertices, what am I going to do? I'm going to look at all\nthe outgoing neighbors.",
    "start": "2953390",
    "end": "2960180"
  },
  {
    "text": "And if the triangle\ninequality is violated, I'm going to relax that edge.",
    "start": "2960180",
    "end": "2966110"
  },
  {
    "text": "The algorithm is\nas simple as that. For each outgoing\nneighbor of v--",
    "start": "2966110",
    "end": "2978590"
  },
  {
    "text": "sorry, of u-- I always get u and\nv mixed up here. ",
    "start": "2978590",
    "end": "2987780"
  },
  {
    "text": "If my shortest\npath estimate to v",
    "start": "2987780",
    "end": "2993970"
  },
  {
    "text": "violates the triangle\ninequality for an edge,",
    "start": "2993970",
    "end": "3003000"
  },
  {
    "text": "for an incoming edge,\nthen I'm going to set-- relax u, v, i.e.",
    "start": "3003000",
    "end": "3013620"
  },
  {
    "text": "set d, s,v, equal to\nd, s,u, plus w, u,v.",
    "start": "3013620",
    "end": "3025540"
  },
  {
    "text": "So that's the algorithm. So if I were to take a look at\nthis example graph over here,",
    "start": "3025540",
    "end": "3034990"
  },
  {
    "text": "maybe a is my start vertex. I initialize it to--",
    "start": "3034990",
    "end": "3040000"
  },
  {
    "text": "AUDIENCE: DAG. JASON KU: This is not a DAG. Thank you. Let's make it a DAG. ",
    "start": "3040000",
    "end": "3049710"
  },
  {
    "text": "I claim to you\nnow this is a DAG.",
    "start": "3049710",
    "end": "3055740"
  },
  {
    "text": "In particular, a\ntopological sort order is when there's a path\nthrough all the vertices,",
    "start": "3055740",
    "end": "3061870"
  },
  {
    "text": "then there's a unique\ntopological sort order-- a, b, e, f, g, h, d, c.",
    "start": "3061870",
    "end": "3069990"
  },
  {
    "text": "This is a topological order. You can check all the edges. So I'm going to start\nby setting the--",
    "start": "3069990",
    "end": "3082300"
  },
  {
    "text": "actually, let's use e. Let's use shortest paths from e. Why not?",
    "start": "3082300",
    "end": "3088660"
  },
  {
    "text": "Shortest paths from e.  Vertex a actually comes before\ne in the topological order.",
    "start": "3088660",
    "end": "3098050"
  },
  {
    "text": "So it has no-- I mean, its shortest path\ndistance, when I initialize, I'm going to\ninitialize this to 0.",
    "start": "3098050",
    "end": "3104380"
  },
  {
    "text": "I'm going to initialize this to\ninfinite, infinite, infinite, infinite, all these\nthings to infinite.",
    "start": "3104380",
    "end": "3112360"
  },
  {
    "text": "These are my estimates. These are not quite the\nshortest paths yet-- distances.",
    "start": "3112360",
    "end": "3118900"
  },
  {
    "text": "But when I get here,\nclearly I can't be-- ",
    "start": "3118900",
    "end": "3127880"
  },
  {
    "text": "distance to me being\ninfinite can never violate the triangle inequality\nwith something infinite",
    "start": "3127880",
    "end": "3134150"
  },
  {
    "text": "or finite. It doesn't matter, right? So I don't do anything to a.",
    "start": "3134150",
    "end": "3139760"
  },
  {
    "text": "Anything before my source\nvertex in the topological order can't be visited,\nbecause it's before",
    "start": "3139760",
    "end": "3145928"
  },
  {
    "text": "in the topological order. That's kind of the point. There's no path from\nmy source vertex to anything before it in\nthe topological order.",
    "start": "3145928",
    "end": "3155300"
  },
  {
    "text": "So same with b. b is before a in the\ntopological order.",
    "start": "3155300",
    "end": "3161640"
  },
  {
    "text": "Now, I'm at e, and it's possible\nwe are violating triangle",
    "start": "3161640",
    "end": "3168150"
  },
  {
    "text": "inequality, in particular here. I think the shortest path\ndistance to f is infinite.",
    "start": "3168150",
    "end": "3175440"
  },
  {
    "text": "But actually, if I go to e\nthrough this edge with a weight",
    "start": "3175440",
    "end": "3182760"
  },
  {
    "text": "3, I know that this is\nviolating triangle inequality. So actually, this\nthing is wrong,",
    "start": "3182760",
    "end": "3191259"
  },
  {
    "text": "and I can set it equal to 3. Now, that might not be the\nshortest path distance.",
    "start": "3191260",
    "end": "3200050"
  },
  {
    "text": "But right now it's a better\nestimate, so we've set it. Now, I'm moving on.",
    "start": "3200050",
    "end": "3206730"
  },
  {
    "text": "I'm done with this guy. I move to the next vertex\nin my topological order. And again, I relax\nedges out of f.",
    "start": "3206730",
    "end": "3214450"
  },
  {
    "text": "OK, so here, looking\nat 8, 3 plus 8 is better than infinite, so\nwe'll say that that's 11.",
    "start": "3214450",
    "end": "3221550"
  },
  {
    "text": " And 3 plus 2 is better\nthan infinite, so that's 5.",
    "start": "3221550",
    "end": "3230460"
  },
  {
    "text": "Now, I keep going\nin the topological order. g is the next. 5 plus 1 is 6.",
    "start": "3230460",
    "end": "3235860"
  },
  {
    "text": "OK, so we found a\nbetter estimate here. So this 11 is not as good.",
    "start": "3235860",
    "end": "3240930"
  },
  {
    "text": "6 is better, so we replace it. Here, we haven't visited before.",
    "start": "3240930",
    "end": "3246690"
  },
  {
    "text": "It's still infinite. So 5 plus minus 2 is 3. ",
    "start": "3246690",
    "end": "3253109"
  },
  {
    "text": "This is the next in\nthe topological order. 3 plus 9 is bigger than 6,\nso that's not a shorter path.",
    "start": "3253110",
    "end": "3260610"
  },
  {
    "text": "3 plus 4 is certainly\nsmaller than infinite, so set that equal to 7.",
    "start": "3260610",
    "end": "3265740"
  },
  {
    "text": "Then, 7 plus 5 is\nalso bigger than 6. And actually, you can confirm\nthat these are all the shortest",
    "start": "3265740",
    "end": "3273089"
  },
  {
    "text": "path distances from e. So this algorithm seems to work.",
    "start": "3273090",
    "end": "3279830"
  },
  {
    "text": "Does it actually work? Let's take a look.",
    "start": "3279830",
    "end": "3285140"
  },
  {
    "text": "The claim to you is that\nat the end of relaxation,",
    "start": "3285140",
    "end": "3292970"
  },
  {
    "text": "this algorithm, we've set-- ",
    "start": "3292970",
    "end": "3298220"
  },
  {
    "text": "claim at end, all the estimates\nequal shortest path distances.",
    "start": "3298220",
    "end": "3312530"
  },
  {
    "text": " The basic idea here\nis that if I take",
    "start": "3312530",
    "end": "3322120"
  },
  {
    "text": "the k-th vertex in\nthe topological order, assuming that these\ndistances are all",
    "start": "3322120",
    "end": "3329170"
  },
  {
    "text": "equal for the ones before\nme in the topological order, I can prove by induction.",
    "start": "3329170",
    "end": "3335320"
  },
  {
    "text": "We can consider a shortest path\nfrom s to v, the k-th vertex,",
    "start": "3335320",
    "end": "3341730"
  },
  {
    "text": "and look at the vertex preceding\nme along the shortest path. That vertex better be before\nme in the topological order",
    "start": "3341730",
    "end": "3352340"
  },
  {
    "text": "or we're not a DAG. And we've already set its\nshortest path distance to be equal to the correct\nthing by induction.",
    "start": "3352340",
    "end": "3363040"
  },
  {
    "text": "So then when we processed u-- ",
    "start": "3363040",
    "end": "3368160"
  },
  {
    "text": "s to u to v-- when we processed\nu in DAG relaxation",
    "start": "3368160",
    "end": "3376680"
  },
  {
    "text": "here, processed the\nvertex and looked at all its outgoing\nadjacencies, we would",
    "start": "3376680",
    "end": "3381960"
  },
  {
    "text": "have relaxed this edge to be no\ngreater than that shortest path",
    "start": "3381960",
    "end": "3387055"
  },
  {
    "text": "distance. ",
    "start": "3387055",
    "end": "3392319"
  },
  {
    "text": "So this is correct. You can also think of\nit as the DAG relaxation",
    "start": "3392320",
    "end": "3398420"
  },
  {
    "text": "algorithm for each vertex looks\nall at its incoming neighbors,",
    "start": "3398420",
    "end": "3405359"
  },
  {
    "text": "assuming that their\nshortest path distances are computed correctly already. Any shortest path\ndistance to me needs",
    "start": "3405360",
    "end": "3411898"
  },
  {
    "text": "to be composed of a shortest\npath distance to one of my incoming neighbors\nthrough an edge to me,",
    "start": "3411898",
    "end": "3418800"
  },
  {
    "text": "so I can just check all of them. That's what DAG relaxation does. And again, we're looping\nover every vertex",
    "start": "3418800",
    "end": "3426340"
  },
  {
    "text": "and looking at its adjacencies\ndoing constant work. This, again, takes linear time. OK, so that's shortest\npaths and a DAG.",
    "start": "3426340",
    "end": "3435990"
  },
  {
    "text": "Next time, we'll look\nat, for general graphs, how we can use kind of the\nsame technique in an algorithm",
    "start": "3435990",
    "end": "3443730"
  },
  {
    "text": "we call Bellman-Ford. OK, that's it for today. ",
    "start": "3443730",
    "end": "3452000"
  }
]