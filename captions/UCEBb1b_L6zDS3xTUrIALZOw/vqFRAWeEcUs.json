[
  {
    "text": "okay welcome everybody so we are um here today lecture number 21 uh coming",
    "start": "25119",
    "end": "32238"
  },
  {
    "text": "into the home stretch of the course uh i'd say probably um this last quarter of the class of the",
    "start": "32239",
    "end": "39680"
  },
  {
    "text": "course is a bit more technical uh perhaps so a little bit more abstract some of the theorems are going to be more difficult um so",
    "start": "39680",
    "end": "46399"
  },
  {
    "text": "i'll i'll try to work through them slowly and answer your questions but uh um",
    "start": "46399",
    "end": "52320"
  },
  {
    "text": "you know it's i think you can expect them to find the material a bit more challenging as we started uh",
    "start": "52320",
    "end": "59520"
  },
  {
    "text": "um [Music] uh as we started um",
    "start": "59520",
    "end": "65920"
  },
  {
    "text": "um you know with uh this theorem last time uh",
    "start": "65920",
    "end": "71680"
  },
  {
    "text": "uh uh non-deterministic log space being closed under complement so nl equals colonel",
    "start": "71680",
    "end": "79200"
  },
  {
    "text": "we kind of only got about part maybe a third of the way through that so i'm going to start over with that and",
    "start": "79200",
    "end": "85840"
  },
  {
    "text": "spend kind of the first half of the lecture today talking about that and then we're going to talk about the",
    "start": "85840",
    "end": "92159"
  },
  {
    "text": "hierarchy theorems which are very important um uh aspect of the complexity landscape",
    "start": "92159",
    "end": "98400"
  },
  {
    "text": "basically they tell you that if you allow",
    "start": "98400",
    "end": "103439"
  },
  {
    "text": "you know your favorite model let's say turing machines to have more resources then they can do more things",
    "start": "103439",
    "end": "110240"
  },
  {
    "text": "um but we'll get to that in due course okay so let us",
    "start": "110240",
    "end": "115360"
  },
  {
    "text": "uh go back to oops reminder to myself",
    "start": "115360",
    "end": "121040"
  },
  {
    "text": "um go back to the immerman celeb cheney",
    "start": "121040",
    "end": "127840"
  },
  {
    "text": "uh which is that nl is equal to co nl um",
    "start": "127840",
    "end": "133280"
  },
  {
    "text": "so as i mentioned these are going to be the same slides as last time uh and i'll",
    "start": "133280",
    "end": "138319"
  },
  {
    "text": "just try to walk through them slowly um i hope hope i hope you i hope you uh",
    "start": "138319",
    "end": "144160"
  },
  {
    "text": "get it but if you don't you know uh ask me at the ta's questions",
    "start": "144160",
    "end": "149440"
  },
  {
    "text": "so we're gonna first i mean the the the the i the thing we're gonna show is that the",
    "start": "149440",
    "end": "156560"
  },
  {
    "text": "complement of path is solvable in non-deterministic log space we already know that path",
    "start": "156560",
    "end": "164160"
  },
  {
    "text": "is solvable in nl that's easy to do you basically just start at the start node",
    "start": "164160",
    "end": "170560"
  },
  {
    "text": "and you guess the sequence of nodes storing only the current node in your log space working memory",
    "start": "170560",
    "end": "176800"
  },
  {
    "text": "on the on your in your logs based work tape you guess the sequence of nodes",
    "start": "176800",
    "end": "182640"
  },
  {
    "text": "on the different branches of the non-determinism and if you ever get to the target node t then you can accept um",
    "start": "182640",
    "end": "189519"
  },
  {
    "text": "but how can a non-deterministic log space machine know or accept the complement of path so it",
    "start": "189519",
    "end": "196400"
  },
  {
    "text": "would have to accept when there's no path um and that uh is",
    "start": "196400",
    "end": "201840"
  },
  {
    "text": "a lot harder but it's a big surprise to the complexity community that it is it is",
    "start": "201840",
    "end": "208080"
  },
  {
    "text": "true um so as we uh discussed last time we're",
    "start": "208080",
    "end": "214000"
  },
  {
    "text": "going to talk about computing functions with a non-deterministic machine and that turns",
    "start": "214000",
    "end": "219840"
  },
  {
    "text": "out to be a convenient way of looking at this so we're going to have non-deterministic",
    "start": "219840",
    "end": "225840"
  },
  {
    "text": "machines that have different branches of their non-determinism you know on some input and they're supposed to compute some",
    "start": "225840",
    "end": "232000"
  },
  {
    "text": "function value you know remaining on the tape but because of the non-determinism you",
    "start": "232000",
    "end": "237040"
  },
  {
    "text": "can't imagine that different branches might have different function outputs well that's not allowed",
    "start": "237040",
    "end": "242879"
  },
  {
    "text": "all branches must either report the value of the function",
    "start": "242879",
    "end": "248879"
  },
  {
    "text": "um that we're trying to compute or they can punt basically they can reject",
    "start": "248879",
    "end": "255200"
  },
  {
    "text": "and say well you know uh i i you know it's a basically i i don't",
    "start": "255200",
    "end": "260400"
  },
  {
    "text": "know so all branches can must either report the correct answer or they can say i",
    "start": "260400",
    "end": "265919"
  },
  {
    "text": "don't know and some branch must at least one branch must report an answer",
    "start": "265919",
    "end": "271199"
  },
  {
    "text": "must report the answer um for and that's what it means to be computing a function",
    "start": "271199",
    "end": "278160"
  },
  {
    "text": "with a non-deterministic machine and we're going to show that certain functions can be computed with",
    "start": "278160",
    "end": "284400"
  },
  {
    "text": "non-deterministic log space machines um",
    "start": "284400",
    "end": "289680"
  },
  {
    "text": "in particular this path function which sort of incorporates both the positive and",
    "start": "289680",
    "end": "295520"
  },
  {
    "text": "negative of the pair both when there is a path and when there is an is not a path",
    "start": "295520",
    "end": "300800"
  },
  {
    "text": "into into the function because the function has to answer yes when there is a path from s to t and no when there is",
    "start": "300800",
    "end": "307840"
  },
  {
    "text": "no path from s to t okay so",
    "start": "307840",
    "end": "313120"
  },
  {
    "text": "if you could do this you're done because um you can make a non-deterministic you",
    "start": "313120",
    "end": "320240"
  },
  {
    "text": "could make an nl machine so if you could compute the path function you could make an nl machine",
    "start": "320240",
    "end": "327039"
  },
  {
    "text": "which would accept whenever the function says no",
    "start": "327039",
    "end": "331680"
  },
  {
    "text": "um and the other cases you know and if",
    "start": "332080",
    "end": "337280"
  },
  {
    "text": "the um machine that's computing the function uh rejects you can then you'll reject as",
    "start": "337280",
    "end": "343039"
  },
  {
    "text": "well but you accept if the function says no and so therefore you're going to be making a an nl machine which does the",
    "start": "343039",
    "end": "350000"
  },
  {
    "text": "complement of the path problem so it's uh you know",
    "start": "350000",
    "end": "355520"
  },
  {
    "text": "if you can compute the path function that would be great so that's what we would like to be able",
    "start": "355759",
    "end": "361360"
  },
  {
    "text": "to do so as i mentioned we're going to have",
    "start": "361360",
    "end": "366639"
  },
  {
    "text": "two other values that that are going to be relevant to computing the path function which is what we're ultimately",
    "start": "366639",
    "end": "372400"
  },
  {
    "text": "going to do and that's going to be the number of nodes that you can reach from the start",
    "start": "372400",
    "end": "378240"
  },
  {
    "text": "uh from the the start node in your graph and the and then",
    "start": "378240",
    "end": "384720"
  },
  {
    "text": "for r is is the collection of nodes and c is the number of reachable nodes",
    "start": "384720",
    "end": "391039"
  },
  {
    "text": "um so shown on this picture and here i'm if it's helpful to you to see it in a more form",
    "start": "391039",
    "end": "397600"
  },
  {
    "text": "is you can think of r as a function of the graph and the start node of course but",
    "start": "397600",
    "end": "404160"
  },
  {
    "text": "sometimes we'll just call it r you know when it's clear which graph and start node we're talking about",
    "start": "404160",
    "end": "411120"
  },
  {
    "text": "r is the set of reachable nodes so it's the collection u",
    "start": "412560",
    "end": "418080"
  },
  {
    "text": "such that the answer is yes and c",
    "start": "418080",
    "end": "423680"
  },
  {
    "text": "is the size of r okay",
    "start": "423680",
    "end": "428960"
  },
  {
    "text": "so the way we're going to start is kind of an easy",
    "start": "430240",
    "end": "435840"
  },
  {
    "text": "theorem though this is still going to be relevant kind of at the end um but for",
    "start": "435840",
    "end": "441759"
  },
  {
    "text": "now it's really more a practice with the concept that we have come up you know",
    "start": "441759",
    "end": "446880"
  },
  {
    "text": "this function concept that we've just introduced so i want to say that",
    "start": "446880",
    "end": "452240"
  },
  {
    "text": "the path function with an nl machine then i can compute the count",
    "start": "452240",
    "end": "458319"
  },
  {
    "text": "uh with an nl machine okay so understand what computing the path function means",
    "start": "458319",
    "end": "465199"
  },
  {
    "text": "that you have your nl machine and um",
    "start": "465199",
    "end": "470240"
  },
  {
    "text": "every branch has to either say i don't know which is reject or it has to have",
    "start": "470240",
    "end": "475759"
  },
  {
    "text": "the answer which in it's going to be yes if there is a path and know if there is no path",
    "start": "475759",
    "end": "482560"
  },
  {
    "text": "and if i can do be able to count the number of nodes",
    "start": "483840",
    "end": "489599"
  },
  {
    "text": "that do have a path the number of notes for which the answer is yes",
    "start": "489599",
    "end": "495360"
  },
  {
    "text": "and this i think if you're comfortable with the definition this is",
    "start": "497199",
    "end": "502580"
  },
  {
    "text": "[Music] more or less obvious because what you would do",
    "start": "502580",
    "end": "507919"
  },
  {
    "text": "is you would go through the nodes of g one by one and test uh",
    "start": "507919",
    "end": "513680"
  },
  {
    "text": "using your path function uh what the answer is",
    "start": "513680",
    "end": "519760"
  },
  {
    "text": "yes or no and every time it's a yes you add one to the count until you've gone through all",
    "start": "519760",
    "end": "525519"
  },
  {
    "text": "of the nodes and then um you have your answer which is nodes",
    "start": "525519",
    "end": "530959"
  },
  {
    "text": "that's c now if the machine that's",
    "start": "530959",
    "end": "536880"
  },
  {
    "text": "trying to compute the path function on the non-determinism rejects that that's",
    "start": "536880",
    "end": "542000"
  },
  {
    "text": "okay you'll computing c that branch will reject also but when you're um some branch",
    "start": "542000",
    "end": "549920"
  },
  {
    "text": "has to get the right answer on the on uh you know for it has to get the right",
    "start": "549920",
    "end": "554959"
  },
  {
    "text": "answer um and so then you get the you know",
    "start": "554959",
    "end": "561120"
  },
  {
    "text": "you know what's happening with that node and so you then um can either increment the count or you",
    "start": "561120",
    "end": "567680"
  },
  {
    "text": "move on to the next node i think i'm uh trying to say i'm not sure if i'm making any clear by",
    "start": "567680",
    "end": "574160"
  },
  {
    "text": "kind of repeating myself but okay here so you're going to start out with the you're given the",
    "start": "574160",
    "end": "579360"
  },
  {
    "text": "the graph and the start node we're trying to compute this value c which is the number rechargeable from",
    "start": "579360",
    "end": "585360"
  },
  {
    "text": "the start node you start out with you you have a counter which you're going to set initially to zero and you go through",
    "start": "585360",
    "end": "591279"
  },
  {
    "text": "every node of the graph and if uh",
    "start": "591279",
    "end": "596560"
  },
  {
    "text": "the path function computation says yes you can reach you then you add one to",
    "start": "596560",
    "end": "601600"
  },
  {
    "text": "the count it says no you cannot reach you then you just continue um",
    "start": "601600",
    "end": "607360"
  },
  {
    "text": "and uh maybe i should add another line here if if the you know if the if the the thing that's",
    "start": "607360",
    "end": "614320"
  },
  {
    "text": "computing uh rejects then you also reject um and then at the end you output",
    "start": "614320",
    "end": "622480"
  },
  {
    "text": "um so what we're going to prove is the other direction if i give you the count",
    "start": "623360",
    "end": "628880"
  },
  {
    "text": "then i can answer the question for each node whether it's reachable or not and this is the thing",
    "start": "628880",
    "end": "635600"
  },
  {
    "text": "because what it's saying that is i can give you the count i'm done",
    "start": "635600",
    "end": "640640"
  },
  {
    "text": "if we can get that count that's going to be enough",
    "start": "640640",
    "end": "645800"
  },
  {
    "text": "um okay so maybe even before the check-in maybe we should just answer any questions because",
    "start": "646000",
    "end": "652000"
  },
  {
    "text": "you know if if you're stuck here then you then you're doomed um so i think it's you it makes sense to",
    "start": "652000",
    "end": "659600"
  },
  {
    "text": "try to understand what's going on at this at this um because i think the real the real",
    "start": "659600",
    "end": "665760"
  },
  {
    "text": "guts of this proof is coming on the next slide um they're kind of the main idea so i'm happy to",
    "start": "665760",
    "end": "672720"
  },
  {
    "text": "take if there's any questions about this",
    "start": "672720",
    "end": "677360"
  },
  {
    "text": "i'll just wait for a second to see if you're typing away",
    "start": "681680",
    "end": "686000"
  },
  {
    "text": "there well why don't we go to the check-in maybe that'll help um not a very difficult check-in",
    "start": "686839",
    "end": "694160"
  },
  {
    "text": "um it'll come up",
    "start": "694160",
    "end": "700839"
  },
  {
    "text": "okay just a little practice with the concept so i'm getting going to give you some graph",
    "start": "700839",
    "end": "707519"
  },
  {
    "text": "it has nine nodes um and i want to know the value of the count",
    "start": "707519",
    "end": "712560"
  },
  {
    "text": "um so we'll we'll assume that s the start node here is reachable from",
    "start": "712560",
    "end": "719120"
  },
  {
    "text": "itself and now what's the value of c",
    "start": "719120",
    "end": "723680"
  },
  {
    "text": "okay are we good gonna shut this down give you",
    "start": "726079",
    "end": "731200"
  },
  {
    "text": "another two seconds please get your answer in okay",
    "start": "731200",
    "end": "736399"
  },
  {
    "text": "uh ready set end",
    "start": "736399",
    "end": "740160"
  },
  {
    "text": "yeah the right answer is in fact uh e which is six there are six reachable nodes in this graph and that's",
    "start": "742399",
    "end": "749519"
  },
  {
    "text": "what the value c is supposed to tell you is how many nodes can i get to from s okay and what i'm saying is that if i",
    "start": "749519",
    "end": "756720"
  },
  {
    "text": "can calculate that in this sort of non-deterministic function sense so if it's so some",
    "start": "756720",
    "end": "762880"
  },
  {
    "text": "branches can get that answer um then i can use that to",
    "start": "762880",
    "end": "770720"
  },
  {
    "text": "test for each node whether it's reachable or not which is kind of a little bit of a miracle",
    "start": "770720",
    "end": "776320"
  },
  {
    "text": "right that's kind of surprising just knowing how many nodes are reachable will allow me to test whether each",
    "start": "776320",
    "end": "781519"
  },
  {
    "text": "individual node is reachable um because that's there's no obvious reason why that would be",
    "start": "781519",
    "end": "788079"
  },
  {
    "text": "so there's uh going to be a procedure for doing that which is on the next slide and here it is",
    "start": "788079",
    "end": "793360"
  },
  {
    "text": "um okay so this is the key idea that we're going to repeat",
    "start": "793360",
    "end": "798839"
  },
  {
    "text": "um uh later but so it's good to understand um",
    "start": "798839",
    "end": "805519"
  },
  {
    "text": "this is this is the slide you really need to understand uh",
    "start": "805519",
    "end": "810560"
  },
  {
    "text": "okay so i'm given the graph let's assume the graph has m nodes um",
    "start": "810560",
    "end": "816480"
  },
  {
    "text": "now as i said okay so let's just say what what are we doing here given that count we can compute path",
    "start": "816480",
    "end": "825680"
  },
  {
    "text": "so we'll get the answer for every node in the graph if i just know",
    "start": "825680",
    "end": "830800"
  },
  {
    "text": "how many you know so i'll know i can get the answer for which whether a node is reachable or not",
    "start": "830800",
    "end": "836639"
  },
  {
    "text": "if i just have if i just know how many reachable nodes there are um so what i'm going to do is get get",
    "start": "836639",
    "end": "844160"
  },
  {
    "text": "that count of how many are reachable now i'm going to go through um",
    "start": "844160",
    "end": "850240"
  },
  {
    "text": "i'm going to because let's see what's the idea here uh before we even jump into the algorithm",
    "start": "850240",
    "end": "857440"
  },
  {
    "text": "the idea is let's say i know how many nodes are",
    "start": "857440",
    "end": "863120"
  },
  {
    "text": "reachable like 100 nodes are reachable now what i'm going to do what the",
    "start": "863120",
    "end": "868240"
  },
  {
    "text": "algorithm is going to do is find all hundred reachable nodes it's got one by one but it doesn't",
    "start": "868240",
    "end": "874720"
  },
  {
    "text": "matter sort of conceptually it's going to find all reachable all reachable nodes",
    "start": "874720",
    "end": "880480"
  },
  {
    "text": "and non-deterministically guessing them so it's not sure in advance which ones they are but it's going to guess",
    "start": "880480",
    "end": "885760"
  },
  {
    "text": "basically a hundred no it's going to guess some of the nodes as being reachable confirm that the ones that guest are",
    "start": "885760",
    "end": "891920"
  },
  {
    "text": "reachable are reachable and then check to see that that number equals 100.",
    "start": "891920",
    "end": "897519"
  },
  {
    "text": "on some branch of the non-determinism you will guess right and you'll end up with exactly the right set of 100",
    "start": "897519",
    "end": "905279"
  },
  {
    "text": "reachable nodes and then you'll see is t one of those reachable ones um in which",
    "start": "905279",
    "end": "911680"
  },
  {
    "text": "case you say yes or is t not one what is not one of those hundred nodes",
    "start": "911680",
    "end": "917440"
  },
  {
    "text": "and then um you know the answer is no because if you've guessed a hundred nodes and you know they're all reachable",
    "start": "917440",
    "end": "924959"
  },
  {
    "text": "and you know there are exactly 100 reachable nodes then every other node is not reachable",
    "start": "924959",
    "end": "931199"
  },
  {
    "text": "so that's kind of that's the spirit of this and that's i'm just going to write that down here on in the algorithm",
    "start": "932240",
    "end": "940320"
  },
  {
    "text": "can you guys hear me still somebody said my audio is like blipping out",
    "start": "940320",
    "end": "945440"
  },
  {
    "text": "i am getting a sign or two of unstable internet so you know uh if if you need",
    "start": "945440",
    "end": "951519"
  },
  {
    "text": "me to repeat anything just just send me a note good thank you",
    "start": "951519",
    "end": "956560"
  },
  {
    "text": "okay um all right so well uh oh maybe i should",
    "start": "956560",
    "end": "964000"
  },
  {
    "text": "speak slowly if it's not coming through too well okay um",
    "start": "964000",
    "end": "970320"
  },
  {
    "text": "so so what we're going to do is go through",
    "start": "970320",
    "end": "975839"
  },
  {
    "text": "eat all the nodes of the graph one by one",
    "start": "975839",
    "end": "980639"
  },
  {
    "text": "and guess whether it's a reachable node or not a reachable node if we guess it is reachable",
    "start": "980880",
    "end": "987600"
  },
  {
    "text": "i'm going to also guess the path which shows that it's reachable",
    "start": "987600",
    "end": "993680"
  },
  {
    "text": "and then i'm gonna and i'm gonna keep a count of how many reachable nodes i found",
    "start": "994320",
    "end": "1001120"
  },
  {
    "text": "if that count agrees with the value c um i started with",
    "start": "1001920",
    "end": "1008160"
  },
  {
    "text": "then i know i found them all and if t is not one of them",
    "start": "1008160",
    "end": "1014320"
  },
  {
    "text": "then i know t is not reachable that's the idea",
    "start": "1014320",
    "end": "1019759"
  },
  {
    "text": "okay so here's my this is going to be a count of the number of nodes that i have found",
    "start": "1019759",
    "end": "1026240"
  },
  {
    "text": "which are reachable um that's k now here i'm going i'm going to",
    "start": "1026240",
    "end": "1032120"
  },
  {
    "text": "non-deterministically choose is it a reachable node or not i've just called it",
    "start": "1032120",
    "end": "1037438"
  },
  {
    "text": "two branches of the algorithm the p branch or the n branch p means there's a path",
    "start": "1037439",
    "end": "1042558"
  },
  {
    "text": "and n means there's no path so if i guessed p at this point for this",
    "start": "1042559",
    "end": "1049600"
  },
  {
    "text": "node u so i'm going through each of the nodes one by one each and u is the current node",
    "start": "1049600",
    "end": "1054640"
  },
  {
    "text": "if i've guessed that it's it is it does have a path from s",
    "start": "1054640",
    "end": "1059679"
  },
  {
    "text": "then i'm going to uh guess that path to make sure that it really is a reachable note",
    "start": "1059679",
    "end": "1066720"
  },
  {
    "text": "um",
    "start": "1066720",
    "end": "1069120"
  },
  {
    "text": "if i fail to find a path then this is one of the branches of the non-determinism",
    "start": "1072160",
    "end": "1077919"
  },
  {
    "text": "that is going to fail it's going to punt it's going to say i don't know under this branch um",
    "start": "1077919",
    "end": "1084559"
  },
  {
    "text": "because either you guessed wrong and this node was not reachable",
    "start": "1084559",
    "end": "1090240"
  },
  {
    "text": "or if it was reachable you guessed you you failed to find a path which shows",
    "start": "1090240",
    "end": "1095600"
  },
  {
    "text": "you that it's reachable there was some path but you didn't guess the right one um either way you made a bad choice",
    "start": "1095600",
    "end": "1103039"
  },
  {
    "text": "you're gonna you're just gonna punt now",
    "start": "1103039",
    "end": "1108559"
  },
  {
    "text": "if you have determined that t is uh um that node that you've just shown is",
    "start": "1108559",
    "end": "1114559"
  },
  {
    "text": "reachable because at this stage you did not fail so you succeeded in showing a",
    "start": "1114559",
    "end": "1119840"
  },
  {
    "text": "path to um then um",
    "start": "1119840",
    "end": "1126720"
  },
  {
    "text": "uh and u equals t then you know t is reachable that so there is a path from s",
    "start": "1126720",
    "end": "1132400"
  },
  {
    "text": "to t and you're finished that you know you've got the answer you're looking for and so now you can",
    "start": "1132400",
    "end": "1138799"
  },
  {
    "text": "say yes otherwise if t is some if you is some other node then you can just increase",
    "start": "1138799",
    "end": "1145039"
  },
  {
    "text": "your count of the number of reachable nodes that you found",
    "start": "1145039",
    "end": "1150080"
  },
  {
    "text": "okay so you've found a reachable node if it's t you're great you're done if it's not you just include that as your",
    "start": "1150080",
    "end": "1156559"
  },
  {
    "text": "in your account of reachable nodes um now if you've guessed that the node is not reachable okay then you just proceed",
    "start": "1156559",
    "end": "1163520"
  },
  {
    "text": "you know you you're not gonna you're just gonna move on to the next note because you're looking for a",
    "start": "1163520",
    "end": "1170000"
  },
  {
    "text": "collection of reachable notes um",
    "start": "1170000",
    "end": "1175120"
  },
  {
    "text": "okay uh i'm getting some questions here but let me let me wait till the end here um now",
    "start": "1177360",
    "end": "1184160"
  },
  {
    "text": "after i finished going through all of the nodes so i'm finished with this uh um this",
    "start": "1184160",
    "end": "1190480"
  },
  {
    "text": "loop here of going through all the nodes um now i see did i find",
    "start": "1190480",
    "end": "1197600"
  },
  {
    "text": "c reachable nodes because k is the count of the nodes that i've found to be reachable if that",
    "start": "1197919",
    "end": "1204400"
  },
  {
    "text": "agrees with c then i know i found them all if it differs from c then something has gone wrong",
    "start": "1204400",
    "end": "1210720"
  },
  {
    "text": "because i am told there are c reachable nodes and i did not find c reachable nodes",
    "start": "1210720",
    "end": "1215840"
  },
  {
    "text": "so i made some bad guess along the way i guess some node which really is reachable i guess it was not reachable so i didn't",
    "start": "1215840",
    "end": "1222159"
  },
  {
    "text": "find them all i'm gonna punt um but if i found them all",
    "start": "1222159",
    "end": "1228159"
  },
  {
    "text": "and so and and i didn't end up accepting it it didn't say yes at this stage so t was not one of the ones i found a",
    "start": "1228159",
    "end": "1234320"
  },
  {
    "text": "reachable then i then i uh i'm convinced that t is not one of those that are reachable that was not",
    "start": "1234320",
    "end": "1240960"
  },
  {
    "text": "one of those c nodes that i found which are reachable and now i can say no okay so let me let me take",
    "start": "1240960",
    "end": "1248960"
  },
  {
    "text": "questions here uh because i think we're yeah that's the end of this slide this is this is the kind of",
    "start": "1248960",
    "end": "1255760"
  },
  {
    "text": "an important uh piece to understand we can spend a couple of minutes trying",
    "start": "1255760",
    "end": "1261600"
  },
  {
    "text": "to work through this uh so somebody's asking how does",
    "start": "1261600",
    "end": "1267760"
  },
  {
    "text": "non-deterministically pick a path fail it if you fail um",
    "start": "1267760",
    "end": "1273280"
  },
  {
    "text": "what i mean is pick a path from s to u so you have to go from s to whatever",
    "start": "1273280",
    "end": "1278960"
  },
  {
    "text": "your current node u is so you're going to pick some path to u",
    "start": "1278960",
    "end": "1284559"
  },
  {
    "text": "you guessed u is reachable now you have to demonstrate it's reachable by picking a path from s to you if you don't end up",
    "start": "1284559",
    "end": "1290559"
  },
  {
    "text": "at u um and the pair you don't want to go forever on any branch so you're going to",
    "start": "1290559",
    "end": "1296640"
  },
  {
    "text": "limit it to m steps your path has to be of length m at most so after m",
    "start": "1296640",
    "end": "1303039"
  },
  {
    "text": "steps if you have not reached you by that point you've picked a bad path",
    "start": "1303039",
    "end": "1308880"
  },
  {
    "text": "and you're going to reject um",
    "start": "1308880",
    "end": "1315279"
  },
  {
    "text": "okay uh",
    "start": "1316000",
    "end": "1319559"
  },
  {
    "text": "okay so what's the difference between know and reject that's a good question um",
    "start": "1325280",
    "end": "1332159"
  },
  {
    "text": "reject in this case is an i don't know the algorithm uh could not make a determination based",
    "start": "1332159",
    "end": "1339440"
  },
  {
    "text": "on the guesses that it's made in this non-deterministic branch of the algorithm it made bad choices which",
    "start": "1339440",
    "end": "1346880"
  },
  {
    "text": "doesn't allow it to reach a conclusion one way or the other",
    "start": "1346880",
    "end": "1352400"
  },
  {
    "text": "okay remember this algorithm here is computing a function now it's not a now it cannot deterministic",
    "start": "1352640",
    "end": "1359280"
  },
  {
    "text": "algorithm in the language recognition sense this is a function computer and so it has to get the answer to the path",
    "start": "1359280",
    "end": "1366080"
  },
  {
    "text": "function which is a yes or no or i don't know on some branches or some branches",
    "start": "1366080",
    "end": "1371440"
  },
  {
    "text": "that's allowed to do that too so no and reject are totally different",
    "start": "1371440",
    "end": "1377120"
  },
  {
    "text": "um okay",
    "start": "1377120",
    "end": "1382720"
  },
  {
    "text": "okay this is the same thing we talked about last time why do we need two branches for p and n um",
    "start": "1383360",
    "end": "1389039"
  },
  {
    "text": "if we're only going to have proposal just to have the p branch well but some nodes are not reachable",
    "start": "1389039",
    "end": "1397120"
  },
  {
    "text": "if you're gonna look for if you're gonna you know if you have a an unreachable node",
    "start": "1397120",
    "end": "1403360"
  },
  {
    "text": "so it's not an r you can't get to that node from s you have to skip over that note",
    "start": "1403360",
    "end": "1409600"
  },
  {
    "text": "because you're trying to find a subset of the reachable nodes so you're trying to pick that subset",
    "start": "1409600",
    "end": "1415039"
  },
  {
    "text": "here um one note at a time",
    "start": "1415039",
    "end": "1419840"
  },
  {
    "text": "so if you're only going to allow things you're going to require everything in this subset there are going to be some nodes which are not reachable and you're",
    "start": "1420320",
    "end": "1426720"
  },
  {
    "text": "not going to find a path because they're not reachable and you're going to end up projecting all the time you know on that node so you're going to",
    "start": "1426720",
    "end": "1432480"
  },
  {
    "text": "be this the algorithm will will it will not will not work um",
    "start": "1432480",
    "end": "1438799"
  },
  {
    "text": "okay so i'm not sure i understand this question here but somebody says if t is reachable we output yes on that branch",
    "start": "1438799",
    "end": "1445760"
  },
  {
    "text": "but don't we also output no on some other branch",
    "start": "1445760",
    "end": "1451360"
  },
  {
    "text": "let's that's that's a good cool let's see what happens if it's if t is actually reachable",
    "start": "1451440",
    "end": "1459440"
  },
  {
    "text": "um how can we up so if t is reachable there's some branch that's going to output yes we all agree with that",
    "start": "1459440",
    "end": "1466240"
  },
  {
    "text": "at least if you're following we agree but how could some other branch output no",
    "start": "1466240",
    "end": "1473760"
  },
  {
    "text": "if t actually is reachable because that's a great question",
    "start": "1473760",
    "end": "1480480"
  },
  {
    "text": "um and no that's not going to happen uh",
    "start": "1480480",
    "end": "1486640"
  },
  {
    "text": "if t is actually reachable how could a branch output no um [Music]",
    "start": "1486640",
    "end": "1492480"
  },
  {
    "text": "that must mean that it does not guess t as one of the reachable nodes because",
    "start": "1492480",
    "end": "1498640"
  },
  {
    "text": "it's going through all of the nodes here um you know it's going to all the nodes",
    "start": "1498640",
    "end": "1504000"
  },
  {
    "text": "and it's picking them as reachable or not if it pick t is one of the reachable",
    "start": "1504000",
    "end": "1509760"
  },
  {
    "text": "ones then it's going to output yes because it will find you know it'll either output yes or if it doesn't find",
    "start": "1509760",
    "end": "1516480"
  },
  {
    "text": "the right doesn't guess the right path it'll end up rejecting on that uh on that path but some path will will end up",
    "start": "1516480",
    "end": "1523520"
  },
  {
    "text": "saying yes so if t is reachable and uh if you guess if you know t is",
    "start": "1523520",
    "end": "1529279"
  },
  {
    "text": "reachable and you guess t you know you guess u is reachable one at the point when u equals t you will end",
    "start": "1529279",
    "end": "1535760"
  },
  {
    "text": "up outputting s the only way you could not not output yes is if you guess that node is",
    "start": "1535760",
    "end": "1543919"
  },
  {
    "text": "unreachable but then your count is not going to add",
    "start": "1543919",
    "end": "1549440"
  },
  {
    "text": "up right because you you wouldn't you did not find all the reachable nodes if t is one",
    "start": "1549440",
    "end": "1556720"
  },
  {
    "text": "of the reachable nodes and you know there are 100 reachable nodes and you skipped over t as one of the",
    "start": "1556720",
    "end": "1562480"
  },
  {
    "text": "ones that you say is unreachable you at best can only find 99 reachable nodes and and you're not going to end up",
    "start": "1562480",
    "end": "1570240"
  },
  {
    "text": "saying no you're going to end up projecting so it's a very good question but you",
    "start": "1570240",
    "end": "1576080"
  },
  {
    "text": "have to think through what's going to happen here that's this c here is kind of a check",
    "start": "1576080",
    "end": "1581840"
  },
  {
    "text": "it's almost like you know um uh well in",
    "start": "1581840",
    "end": "1588640"
  },
  {
    "text": "it's like a checksum if you know what it is it's so it makes sure that everything that you if you got to see",
    "start": "1588640",
    "end": "1594640"
  },
  {
    "text": "if you got the if if k equals c at this point that means you actually found all the reachable",
    "start": "1594640",
    "end": "1600080"
  },
  {
    "text": "nodes so c is kind of a check that you found all the reachable nodes",
    "start": "1600080",
    "end": "1605840"
  },
  {
    "text": "um right so if k equals c at this point you have",
    "start": "1605840",
    "end": "1612799"
  },
  {
    "text": "found every reachable node and if t was one of the ones that are",
    "start": "1612799",
    "end": "1618159"
  },
  {
    "text": "reachable you found t uh",
    "start": "1618159",
    "end": "1624480"
  },
  {
    "text": "okay let's see um is the reason we do this with c",
    "start": "1624480",
    "end": "1630480"
  },
  {
    "text": "essentially so that we know and we can stop guessing and correctly identify if it's impossible to reach t",
    "start": "1630480",
    "end": "1636000"
  },
  {
    "text": "well it's not a matter of it it's not a matter of stopping guessing it's it's it's a",
    "start": "1636000",
    "end": "1641440"
  },
  {
    "text": "it's a check that we found everything because we're going to go through and do all the guessing for every node",
    "start": "1641440",
    "end": "1648880"
  },
  {
    "text": "no matter what so we're not going to stop anything early unless we find that t is reachable",
    "start": "1648880",
    "end": "1655279"
  },
  {
    "text": "then then we can stop early but if to show that t is not reachable we have to go through the whole process",
    "start": "1655279",
    "end": "1662240"
  },
  {
    "text": "um how can we intuitively see that we don't",
    "start": "1662240",
    "end": "1668320"
  },
  {
    "text": "have contradictory branches that's sort of i was trying to say that just now i don't know i i hope that got through",
    "start": "1668320",
    "end": "1674720"
  },
  {
    "text": "you can't have contradictory branches because if you got to this stage here you have found all the reachable",
    "start": "1674720",
    "end": "1681679"
  },
  {
    "text": "nodes so you've at this stage if you got to six you have made all correct guesses",
    "start": "1681679",
    "end": "1689440"
  },
  {
    "text": "you have found all the reachable nodes you have convinced yourself that they're all reachable um by",
    "start": "1690000",
    "end": "1697200"
  },
  {
    "text": "guessing the pairs to them and you've checked that you have the right number of reachable nodes because it equals c",
    "start": "1697200",
    "end": "1704320"
  },
  {
    "text": "so you must have found them all so you cannot have a contradictory answer because either t was one of the",
    "start": "1704320",
    "end": "1710320"
  },
  {
    "text": "ones you found in which case you would have already said yes or otherwise you found them all and t",
    "start": "1710320",
    "end": "1716159"
  },
  {
    "text": "was not one of them and so you're going to say no you can't have both both things cannot happen okay let's move on",
    "start": "1716159",
    "end": "1724080"
  },
  {
    "text": "so the next thing we're going to do is the next slide is exactly the same as this slide",
    "start": "1724080",
    "end": "1730320"
  },
  {
    "text": "except instead of saying is um is t reachable i want to know is it",
    "start": "1730320",
    "end": "1736720"
  },
  {
    "text": "reachable within d but within distance d",
    "start": "1736720",
    "end": "1742080"
  },
  {
    "text": "okay so um which is going to mean exactly the same procedure can i get",
    "start": "1744880",
    "end": "1750640"
  },
  {
    "text": "uh instead of asking can i get um",
    "start": "1750640",
    "end": "1756000"
  },
  {
    "text": "um uh from s to t with a path of any length of course it's",
    "start": "1756000",
    "end": "1762640"
  },
  {
    "text": "going to be most length m now i want to know can i get to it from s to t by a path of most length d",
    "start": "1762640",
    "end": "1769279"
  },
  {
    "text": "these are number of edges in the path say um and uh",
    "start": "1769279",
    "end": "1775520"
  },
  {
    "text": "that's the same procedure because instead of i'm just going to cut things off at",
    "start": "1775520",
    "end": "1780640"
  },
  {
    "text": "a d but if i if i if i know in advance how many nodes are reachable within d",
    "start": "1780640",
    "end": "1787200"
  },
  {
    "text": "um i'm going to find all the nodes that are reachable within d and c was t one of",
    "start": "1787200",
    "end": "1792559"
  },
  {
    "text": "the ones reachable within d it's the same exact idea so here here is the next slide which kind of shows that",
    "start": "1792559",
    "end": "1799200"
  },
  {
    "text": "uh so here here's the definitions path sub d means reachable",
    "start": "1799200",
    "end": "1805200"
  },
  {
    "text": "by a path of length of most d okay so um",
    "start": "1805200",
    "end": "1812559"
  },
  {
    "text": "r sub d is all of the ones that are reachable by a path of that length",
    "start": "1812559",
    "end": "1819360"
  },
  {
    "text": "and c sub d is the count it's a number that are reachable uh within d",
    "start": "1819360",
    "end": "1825840"
  },
  {
    "text": "um so if you understood the last slide hopefully this slide will seem kind of obvious to you i'm gonna just highlight",
    "start": "1825840",
    "end": "1832960"
  },
  {
    "text": "all the changes so if i can now calculate",
    "start": "1832960",
    "end": "1838880"
  },
  {
    "text": "c sub d which is the number reachable by a path at most of length d",
    "start": "1838960",
    "end": "1844480"
  },
  {
    "text": "then i can test whether or not nodes are reachable by a path without length",
    "start": "1844480",
    "end": "1850320"
  },
  {
    "text": "first i calculate c sub d i go i pick every node as being reachable within d or not",
    "start": "1850320",
    "end": "1857279"
  },
  {
    "text": "now i just have to check that my path that i'm guessing has a length of most d",
    "start": "1857279",
    "end": "1862320"
  },
  {
    "text": "instead of length at most m which is what i had before keep a count of the ones that i found if",
    "start": "1862320",
    "end": "1869200"
  },
  {
    "text": "that count equals c sub d then i know i found them all if it's not equal to c sub d",
    "start": "1869200",
    "end": "1874880"
  },
  {
    "text": "then uh i've made some bad choice along the way and i can just punt and say i don't know",
    "start": "1874880",
    "end": "1880240"
  },
  {
    "text": "um and if t was not one of the ones that i've shown to be reachable within d",
    "start": "1880240",
    "end": "1885600"
  },
  {
    "text": "then i know it's not reachable within d and so um",
    "start": "1885600",
    "end": "1890960"
  },
  {
    "text": "uh i can say no okay so i don't know if this merits any",
    "start": "1890960",
    "end": "1897919"
  },
  {
    "text": "additional questions um but this is really the same it's just a repeat of the previous slide",
    "start": "1897919",
    "end": "1903919"
  },
  {
    "text": "what's kind of amazing is now the last slide is",
    "start": "1903919",
    "end": "1908960"
  },
  {
    "text": "going to be again a repeat uh let me just let me just force out of where we're going but feel free to ask a",
    "start": "1908960",
    "end": "1914720"
  },
  {
    "text": "question on this or on the first slide if you didn't on the previous slide if you didn't get that um also we can try",
    "start": "1914720",
    "end": "1920159"
  },
  {
    "text": "to help you out with that um the next slide what i'm going to do",
    "start": "1920159",
    "end": "1926960"
  },
  {
    "text": "is show how to compute all these c values",
    "start": "1926960",
    "end": "1932720"
  },
  {
    "text": "and i should mention um the value c which is the total number reachable is going to be the same as c",
    "start": "1932720",
    "end": "1939039"
  },
  {
    "text": "sub m reachable with an m the number of nodes of the graph so if i can get up to c sub m i'm done",
    "start": "1939039",
    "end": "1946320"
  },
  {
    "text": "um and what i'm gonna show you is that uh",
    "start": "1946320",
    "end": "1953120"
  },
  {
    "text": "knowing c sub i i can compute c sub i plus one or c sub d i can compute c sub",
    "start": "1953120",
    "end": "1958159"
  },
  {
    "text": "d plus one since i'm using d as my index here basically",
    "start": "1958159",
    "end": "1963919"
  },
  {
    "text": "so c sub zero we know is just s well r you know it's just one because you can",
    "start": "1963919",
    "end": "1969039"
  },
  {
    "text": "read just start with s that's the only thing reachable with zero and then once i",
    "start": "1969039",
    "end": "1976960"
  },
  {
    "text": "know that i can fi figure out c sub 1 c sub 2 c sub 3 and so on and then i get",
    "start": "1976960",
    "end": "1982480"
  },
  {
    "text": "the c sub n and then i have the count of the total number reachable and then i can test the path function",
    "start": "1982480",
    "end": "1990360"
  },
  {
    "text": "um okay so the trick now is being able to",
    "start": "1990559",
    "end": "1995760"
  },
  {
    "text": "count uh given c sub d i would like to figure out",
    "start": "1995760",
    "end": "2001039"
  },
  {
    "text": "what is c sub d plus one now how am i going to do that what i'm",
    "start": "2001039",
    "end": "2007279"
  },
  {
    "text": "going to do is that's my goal what i'm going to do is something in between",
    "start": "2007279",
    "end": "2012640"
  },
  {
    "text": "i'm going to do a theorem just like this but instead of given c sub d instead of computing paths",
    "start": "2012640",
    "end": "2019120"
  },
  {
    "text": "of d i'm going to compute paths of d plus 1. so knowing",
    "start": "2019120",
    "end": "2025360"
  },
  {
    "text": "how many are reachable from d i'm going to give a test for whether things are reachable within d plus one",
    "start": "2025360",
    "end": "2032799"
  },
  {
    "text": "and the fact is that's easy because this thing already tells me how to compute whether i'm reachable within",
    "start": "2032799",
    "end": "2039279"
  },
  {
    "text": "d and being able to be reachable from within d plus one means i have an edge",
    "start": "2039279",
    "end": "2045279"
  },
  {
    "text": "from something that's reachable within d so if i can figure out which are reachable within d",
    "start": "2045279",
    "end": "2051599"
  },
  {
    "text": "well and i just want to say do i have an edge you know uh",
    "start": "2051599",
    "end": "2056960"
  },
  {
    "text": "do i have an edge from from one of the nodes that are reachable within d then i'm reachable within d plus one",
    "start": "2056960",
    "end": "2064799"
  },
  {
    "text": "then if i can test whether individual nodes are reachable within d plus one i can count",
    "start": "2065440",
    "end": "2070960"
  },
  {
    "text": "how many nodes are reachable within d plus one that was that very first easy theorem that i showed",
    "start": "2070960",
    "end": "2076240"
  },
  {
    "text": "so i know there's a lot of pieces here that you have to put together but in the end each p each individual piece is not",
    "start": "2076240",
    "end": "2082240"
  },
  {
    "text": "that bad um okay i don't know how many of you have followed me oh no this is not supposed",
    "start": "2082240",
    "end": "2089118"
  },
  {
    "text": "to be here uh there we go so here is the last part",
    "start": "2089119",
    "end": "2095200"
  },
  {
    "text": "which again is just a simple modification of what what the previous slide had so",
    "start": "2095200",
    "end": "2100560"
  },
  {
    "text": "i'm going to show how to compute the path d plus 1 function so testing if",
    "start": "2100560",
    "end": "2106320"
  },
  {
    "text": "there's a path of length d plus 1 from s to some node t",
    "start": "2106320",
    "end": "2111440"
  },
  {
    "text": "but only knowing how many nodes are reachable within d",
    "start": "2111440",
    "end": "2116920"
  },
  {
    "text": "so i'm going to find all nodes that are reachable within d just like i did before but see if any",
    "start": "2117680",
    "end": "2124560"
  },
  {
    "text": "one of those nodes has an edge to t not necessarily that one is equal to t",
    "start": "2124560",
    "end": "2131040"
  },
  {
    "text": "because that says that t is reachable within d but i want to know does it have an edge to t that means t is reachable",
    "start": "2131040",
    "end": "2137839"
  },
  {
    "text": "within d plus one so if i find all the nodes that are reachable within d",
    "start": "2137839",
    "end": "2143599"
  },
  {
    "text": "and t turns out to be reachable from one of those with it by an edge",
    "start": "2143599",
    "end": "2148720"
  },
  {
    "text": "then t is reachable within d uh d plus one and if d is not reachable from any of",
    "start": "2148720",
    "end": "2154960"
  },
  {
    "text": "those nodes with an edge then t is not reachable when d plus one i hope you're following me i'm not sure",
    "start": "2154960",
    "end": "2160400"
  },
  {
    "text": "you are uh so anyway that's the that's the algorithm here and",
    "start": "2160400",
    "end": "2166320"
  },
  {
    "text": "uh uh the corollary is that you can compute c sub d plus one from c sub d because if",
    "start": "2166320",
    "end": "2172000"
  },
  {
    "text": "you can count the path you if you can test for each node if it's reachable as i mentioned before you go through all",
    "start": "2172000",
    "end": "2177440"
  },
  {
    "text": "the nodes see whether the reachable and d plus d plus one and then",
    "start": "2177440",
    "end": "2182480"
  },
  {
    "text": "count them up now i have c sub d plus one and now i'm done because",
    "start": "2182480",
    "end": "2187920"
  },
  {
    "text": "uh uh i'm gonna",
    "start": "2187920",
    "end": "2193280"
  },
  {
    "text": "compute each d plus one from the from the value d that i previously computed",
    "start": "2193280",
    "end": "2199520"
  },
  {
    "text": "i'm going to do that from for all these should say zero here actually um",
    "start": "2199520",
    "end": "2206880"
  },
  {
    "text": "and except uh if the path says if this if the path function now says there's no that the",
    "start": "2206880",
    "end": "2213359"
  },
  {
    "text": "answer is no because i'm trying to do you know the complement of the path language",
    "start": "2213359",
    "end": "2219359"
  },
  {
    "text": "and reject of the path uh thing for m says yes and that's my non-deterministic",
    "start": "2219359",
    "end": "2225599"
  },
  {
    "text": "algorithm for the path complement uh problem",
    "start": "2225599",
    "end": "2231520"
  },
  {
    "text": "anyway maybe you need to look at a little bit offline um it's presented in a little bit different",
    "start": "2231520",
    "end": "2237839"
  },
  {
    "text": "way in the book uh i don't know if that will be more or less clear to you but i kind of i think this has been a little",
    "start": "2237839",
    "end": "2243920"
  },
  {
    "text": "bit more unpacked for the purposes of the lecture um",
    "start": "2243920",
    "end": "2249760"
  },
  {
    "text": "so let's just see do we i'm not getting any questions which probably means uh",
    "start": "2249760",
    "end": "2255119"
  },
  {
    "text": "uh i've lost a huge chunk of you um but uh the good news is we're gonna move on",
    "start": "2255119",
    "end": "2260720"
  },
  {
    "text": "to a different topic so um",
    "start": "2260720",
    "end": "2265839"
  },
  {
    "text": "but feel free to ask a question on this if you want or we're going to shift gears now to talking about the hierarchy theorems",
    "start": "2266480",
    "end": "2273760"
  },
  {
    "text": "which is going to be the second half of the lecture also not so easy i have to say",
    "start": "2273760",
    "end": "2279440"
  },
  {
    "text": "probably a little less technical than this one is but it's also this are going to be",
    "start": "2279440",
    "end": "2284800"
  },
  {
    "text": "um spending time on just mainly just one theorem but anyway so looking ahead to what",
    "start": "2284800",
    "end": "2291200"
  },
  {
    "text": "where we're going and then we'll have a break um",
    "start": "2291200",
    "end": "2296480"
  },
  {
    "text": "we uh well what we've shown so far these are the major complexity classes",
    "start": "2296480",
    "end": "2303040"
  },
  {
    "text": "i'm not not including let's say the the complementary classes the co-np uh type classes um",
    "start": "2303040",
    "end": "2309440"
  },
  {
    "text": "these are the major complex classes we've seen so far and as we've seen they form a hierarchy",
    "start": "2309440",
    "end": "2316480"
  },
  {
    "text": "of containments some of those containments trivial and",
    "start": "2316480",
    "end": "2322800"
  },
  {
    "text": "some slightly less trivial but we have not shown whether any of these classes are different",
    "start": "2322800",
    "end": "2329680"
  },
  {
    "text": "you know we've pointed out that there are some unsolved problems here but do we know any of these classes differ from",
    "start": "2329680",
    "end": "2335200"
  },
  {
    "text": "each other or could it all collapse down to l and the answer to that is",
    "start": "2335200",
    "end": "2341119"
  },
  {
    "text": "we do know that p space and l are actually different",
    "start": "2341119",
    "end": "2346160"
  },
  {
    "text": "that we can prove and it's a um",
    "start": "2346160",
    "end": "2351760"
  },
  {
    "text": "it relies on the theorem that says if you give a",
    "start": "2351760",
    "end": "2356880"
  },
  {
    "text": "turing machine more space then you can do more things",
    "start": "2356880",
    "end": "2362400"
  },
  {
    "text": "so because p space is much is a bigger bound than log space",
    "start": "2362400",
    "end": "2368079"
  },
  {
    "text": "we know we can do more things in fact because",
    "start": "2368079",
    "end": "2373440"
  },
  {
    "text": "n l is contained within log squared space deterministically and",
    "start": "2373440",
    "end": "2378640"
  },
  {
    "text": "p space is bigger than that we actually can separate p space and nm so we're going to prove that today",
    "start": "2378640",
    "end": "2384880"
  },
  {
    "text": "um so the basically the idea of the theorem says that if you give a turing machine",
    "start": "2384880",
    "end": "2390560"
  },
  {
    "text": "a bit more time or a bit more space then it can do more though you have there are some conditions on that that we have to uh",
    "start": "2390560",
    "end": "2396560"
  },
  {
    "text": "we'll get into one of the conclusions that we'll show",
    "start": "2396560",
    "end": "2401920"
  },
  {
    "text": "is that um time n squared if you compare with time it's you know the time com the things",
    "start": "2401920",
    "end": "2408480"
  },
  {
    "text": "you can do in n squared time uh versus the things you can do in cube time there are more things you can do in n-cube",
    "start": "2408480",
    "end": "2414640"
  },
  {
    "text": "time then you can what you can do with n-square time i mean that's what you would expect",
    "start": "2414640",
    "end": "2419839"
  },
  {
    "text": "um but it's not the case that everything we expect in uh complexity theory we can",
    "start": "2419839",
    "end": "2425599"
  },
  {
    "text": "prove this is one of the things we can prove so as you add more time you can do more things so this is a proper subset here",
    "start": "2425599",
    "end": "2432400"
  },
  {
    "text": "so there's there are some things in time n cubed that are not in time n squared and ditto for space",
    "start": "2432400",
    "end": "2438640"
  },
  {
    "text": "okay um so that's going to be that brings us to our",
    "start": "2438640",
    "end": "2444560"
  },
  {
    "text": "coffee break and so feel free to shoot me any questions about",
    "start": "2444560",
    "end": "2451119"
  },
  {
    "text": "what we've done so far or anything else and otherwise we will um",
    "start": "2451599",
    "end": "2457440"
  },
  {
    "text": "launch our timer and i'll see you in five minutes okay so i get getting some good questions here could we also make a",
    "start": "2457440",
    "end": "2464319"
  },
  {
    "text": "solution this is getting back to that um um uh",
    "start": "2464319",
    "end": "2470160"
  },
  {
    "text": "um the logs the nl equals coin l somebody's saying could we just",
    "start": "2470160",
    "end": "2475760"
  },
  {
    "text": "um make another selection just by non-deterministically choosing c vertices",
    "start": "2475760",
    "end": "2481920"
  },
  {
    "text": "and then not and then checking that they're all reachable that's effectively what we're doing",
    "start": "2481920",
    "end": "2488319"
  },
  {
    "text": "but be careful that we because we cannot store c vertices",
    "start": "2488319",
    "end": "2495200"
  },
  {
    "text": "so that's why we're doing them one at a time we can't guess all c vertices up front",
    "start": "2495200",
    "end": "2500480"
  },
  {
    "text": "because where you're going to store all that we only have log space okay another so maybe somebody's asking",
    "start": "2500480",
    "end": "2508160"
  },
  {
    "text": "how much working space do we need for storing the intermediate steps i'm not sure what intermediate steps you mean but if it's all the ci values",
    "start": "2508160",
    "end": "2515520"
  },
  {
    "text": "you know see going from c0 to c1 to c2 to c3 we don't store those",
    "start": "2515520",
    "end": "2521280"
  },
  {
    "text": "we all you need you need c sub d to calculate c sub d plus one and then",
    "start": "2521280",
    "end": "2527280"
  },
  {
    "text": "you forget c sub d you couldn't store all the c values but you don't need them all you only need the most recent one to",
    "start": "2527280",
    "end": "2532560"
  },
  {
    "text": "go to the next one okay somebody's asking can i go over why the complement of path in nl",
    "start": "2532560",
    "end": "2538640"
  },
  {
    "text": "implies nl equal coin l because the complement of path is",
    "start": "2538640",
    "end": "2544160"
  },
  {
    "text": "uh essentially it's co n l complete i mean l it is um",
    "start": "2544160",
    "end": "2549280"
  },
  {
    "text": "so everything in nl is reducible to path the",
    "start": "2549280",
    "end": "2555280"
  },
  {
    "text": "everything in cohen l is reducible to the complement of path by the same reduction",
    "start": "2555280",
    "end": "2561760"
  },
  {
    "text": "um and so if you can do the complement of path in any uh class you can do all",
    "start": "2561760",
    "end": "2567280"
  },
  {
    "text": "of the complements of nl languages in any class and so you can do the complement of path in nl you can do all",
    "start": "2567280",
    "end": "2573359"
  },
  {
    "text": "the connell problems in out in nl and so then nl equals comma now",
    "start": "2573359",
    "end": "2580480"
  },
  {
    "text": "you have to you have to just think through the logic of it this is not that that part is not hard um",
    "start": "2580480",
    "end": "2585760"
  },
  {
    "text": "why it's enough to solve the path complement problem in nl that does everything else because it's a good so",
    "start": "2585760",
    "end": "2592240"
  },
  {
    "text": "the same completeness phenomenon that we've been seeing okay somebody's asking about the the two",
    "start": "2592240",
    "end": "2598079"
  },
  {
    "text": "sat problem that we talked about last time um and is it um",
    "start": "2598079",
    "end": "2603359"
  },
  {
    "text": "and you know i i pointed out that that's in nl the you know the the two side problem",
    "start": "2603359",
    "end": "2608960"
  },
  {
    "text": "well the complement of the two set problem uh you know the unsatisfiable two set",
    "start": "2608960",
    "end": "2615359"
  },
  {
    "text": "formulas that that's an nl language because you can basically look for a contradiction uh non-deterministically",
    "start": "2615359",
    "end": "2622800"
  },
  {
    "text": "in log space um that's i think i probably won't be able to",
    "start": "2622800",
    "end": "2628160"
  },
  {
    "text": "explain that in a minute but maybe we'll have our recitation instructors cover that in recitation",
    "start": "2628160",
    "end": "2634240"
  },
  {
    "text": "um it's a nice proof not very hard but it's it's an it's a nice proof it's it's it's it's it's you know it's",
    "start": "2634240",
    "end": "2640640"
  },
  {
    "text": "not it's something you have to do you have to think about you you have to argue but it's still it's not super hard um",
    "start": "2640640",
    "end": "2648079"
  },
  {
    "text": "understanding the two sad problem and you know the complement of two set we showed is in nl",
    "start": "2648079",
    "end": "2654319"
  },
  {
    "text": "and because nl equals coin l also the two sat problem itself without complementation is in nl",
    "start": "2654319",
    "end": "2661520"
  },
  {
    "text": "and in fact is nl complete okay um i think we're going to have to move on",
    "start": "2661520",
    "end": "2669119"
  },
  {
    "text": "uh i'll stick around after lecture in cases any questions that i can answer quickly at that point",
    "start": "2669680",
    "end": "2675839"
  },
  {
    "text": "sorry if i couldn't get to your question just now all right",
    "start": "2675839",
    "end": "2682400"
  },
  {
    "text": "continuing on here okay",
    "start": "2682560",
    "end": "2688160"
  },
  {
    "text": "shifting gears the space hierarchy theorem so",
    "start": "2688160",
    "end": "2695119"
  },
  {
    "text": "um so as i mentioned i think um uh maybe it's good to just go back",
    "start": "2695440",
    "end": "2703119"
  },
  {
    "text": "to this slide here um we're going to do the time and space hierarchy theorems which show that if",
    "start": "2703119",
    "end": "2708640"
  },
  {
    "text": "you can do a little bit more if you give a little bit more time or a little bit more space you can do more things",
    "start": "2708640",
    "end": "2714240"
  },
  {
    "text": "we're going to do the space case first because that actually tends to be slightly",
    "start": "2714240",
    "end": "2720240"
  },
  {
    "text": "for certain technical reasons slightly easier so",
    "start": "2720240",
    "end": "2725280"
  },
  {
    "text": "uh space hierarchy theorem so here is the statement of the theorem and",
    "start": "2725280",
    "end": "2734079"
  },
  {
    "text": "it says for any bound think of s is going to be some",
    "start": "2737040",
    "end": "2742240"
  },
  {
    "text": "you know space bound and again f has to satisfy some technical",
    "start": "2742240",
    "end": "2749119"
  },
  {
    "text": "condition in yellow remember that it's yellow because that's going to be relevant later um",
    "start": "2749119",
    "end": "2754880"
  },
  {
    "text": "uh so there's going to be some technical condition um for no matter what function you you have",
    "start": "2754880",
    "end": "2762560"
  },
  {
    "text": "whatever space bound you have as long as it satisfies this condition which is a mild condition but you need it uh",
    "start": "2762560",
    "end": "2768560"
  },
  {
    "text": "whatever space bound you have um you can find a language a",
    "start": "2768560",
    "end": "2774560"
  },
  {
    "text": "which requires exactly that much space so if f is like n cubed we're going to",
    "start": "2774560",
    "end": "2781599"
  },
  {
    "text": "find a language a that requires n cubed space if it's n to the hundredth we can find the language that requires into the",
    "start": "2781599",
    "end": "2787359"
  },
  {
    "text": "100th space and cannot be done within 1999 space whatever it is",
    "start": "2787359",
    "end": "2793839"
  },
  {
    "text": "you can find a language that requires exactly that much space and if you like it a little bit more formally so that",
    "start": "2793839",
    "end": "2800640"
  },
  {
    "text": "means that it can be decided in that much space but it cannot be decided in less space",
    "start": "2800640",
    "end": "2807520"
  },
  {
    "text": "okay framing it in a slightly different way in terms of our space classes",
    "start": "2808079",
    "end": "2813280"
  },
  {
    "text": "um i'm going to define a notion which is you know kind of it's not",
    "start": "2813280",
    "end": "2818480"
  },
  {
    "text": "it's not said this way in the book but maybe it's a helpful way to write it down",
    "start": "2818480",
    "end": "2823599"
  },
  {
    "text": "it's space little o of f of n so those are all the things that you can do by a function that's little o of f of",
    "start": "2823599",
    "end": "2829920"
  },
  {
    "text": "n in space so space little o of f n is properly",
    "start": "2829920",
    "end": "2835680"
  },
  {
    "text": "contained within space f of n in other words there's something here which is not in there",
    "start": "2835680",
    "end": "2843359"
  },
  {
    "text": "okay picture pictorially i'm going to exhibit some language some explicit language a",
    "start": "2843599",
    "end": "2850720"
  },
  {
    "text": "which i can do in this much space but not in any less now you know you can sort of think of",
    "start": "2850720",
    "end": "2856079"
  },
  {
    "text": "this as a little bit like the situation for context-free languages and regular languages where we exhibited a",
    "start": "2856079",
    "end": "2861760"
  },
  {
    "text": "particular language that differentiated that was it context-free but not regular and we're going to kind of do the same",
    "start": "2861760",
    "end": "2868240"
  },
  {
    "text": "thing now but the one key difference is that in the case of separating the context free",
    "start": "2868240",
    "end": "2874240"
  },
  {
    "text": "and the regular we could give a nice language like 0 to the k1 to the k",
    "start": "2874240",
    "end": "2879599"
  },
  {
    "text": "here the language is not going to be so nice to describe it's going to be the language that some",
    "start": "2879599",
    "end": "2884880"
  },
  {
    "text": "turing machine we're going to give decides but you're not going to be able to get a nice simple understanding of a it's",
    "start": "2884880",
    "end": "2891440"
  },
  {
    "text": "going to be whatever that turing machine does and so in that sense it's not a very natural language um that's easy to",
    "start": "2891440",
    "end": "2898319"
  },
  {
    "text": "sort of get your mind around um so the i outline and really you don't",
    "start": "2898319",
    "end": "2904559"
  },
  {
    "text": "have to worry about this but maybe it helps it's really going to be a kind of a",
    "start": "2904559",
    "end": "2909920"
  },
  {
    "text": "diagonalization proof um the way this machine d",
    "start": "2909920",
    "end": "2915760"
  },
  {
    "text": "um is going to operate so d is going to give you my language a um",
    "start": "2915760",
    "end": "2922079"
  },
  {
    "text": "so d is going to be designed and i'm going to show you d on the next slide uh d is going to run within my target",
    "start": "2922079",
    "end": "2929040"
  },
  {
    "text": "space bound f of n and here's the key here's the kicker",
    "start": "2929040",
    "end": "2934480"
  },
  {
    "text": "d is going to be designed to make sure that its language cannot be done in less",
    "start": "2934480",
    "end": "2939839"
  },
  {
    "text": "space and the way it does that is it makes sure that its language is",
    "start": "2939839",
    "end": "2946640"
  },
  {
    "text": "different from any language that that is um",
    "start": "2946640",
    "end": "2952319"
  },
  {
    "text": "decidable by a turing machine in in less space and it's going to be different in",
    "start": "2952319",
    "end": "2957440"
  },
  {
    "text": "at least one place so any",
    "start": "2957440",
    "end": "2963200"
  },
  {
    "text": "d is going to guarantee that its language cannot be done in little o of f of n space because it's going to be",
    "start": "2963200",
    "end": "2969760"
  },
  {
    "text": "different from every language that's doable in little o of f of n space somewhere",
    "start": "2969760",
    "end": "2976559"
  },
  {
    "text": "okay that's the point and then the language a is going to be the language of this",
    "start": "2976559",
    "end": "2982079"
  },
  {
    "text": "uh turing machine d okay so it looks like a tall order the d",
    "start": "2982079",
    "end": "2989440"
  },
  {
    "text": "has to make sure that each you know that that for every machine",
    "start": "2989440",
    "end": "2994559"
  },
  {
    "text": "its language differs uh from that machine's language if that machine is running in little of f event",
    "start": "2994559",
    "end": "3000240"
  },
  {
    "text": "space but it's basically going to be a diagonalization so for all of the different possible inputs",
    "start": "3000240",
    "end": "3007040"
  },
  {
    "text": "to d that input is going to actually code up a machine",
    "start": "3007040",
    "end": "3012400"
  },
  {
    "text": "uh on which we're going to make sure that we're different from that machine if it's a small space machine",
    "start": "3012400",
    "end": "3018880"
  },
  {
    "text": "okay let's see so i can take a couple of questions here does f have to be computable so that's",
    "start": "3018880",
    "end": "3025280"
  },
  {
    "text": "going to be one of the conditions um that we're going to have to guarantee where f satisfies the technical",
    "start": "3025280",
    "end": "3030480"
  },
  {
    "text": "condition yeah it's going to end up being half it's going to be computable but that's not enough",
    "start": "3030480",
    "end": "3036319"
  },
  {
    "text": "um good question though",
    "start": "3036640",
    "end": "3041760"
  },
  {
    "text": "uh okay so let's let's let's move on from there okay now",
    "start": "3041760",
    "end": "3049280"
  },
  {
    "text": "so here is now what's what my job is to give you this turing machine d",
    "start": "3049280",
    "end": "3054400"
  },
  {
    "text": "so d these language is going to be my my language a which i can which requires f",
    "start": "3054400",
    "end": "3060240"
  },
  {
    "text": "of n space cannot be done unless okay oops i need to",
    "start": "3060240",
    "end": "3067280"
  },
  {
    "text": "i need the full slide here so i have to take myself out um [Music]",
    "start": "3067280",
    "end": "3074109"
  },
  {
    "text": "all right uh now this is my goal i want to exhibit this language a which i can do in this much",
    "start": "3075839",
    "end": "3082720"
  },
  {
    "text": "space but not in any less",
    "start": "3082720",
    "end": "3086480"
  },
  {
    "text": "and so i'm going to give this machine d as i mentioned where a is d's language",
    "start": "3089200",
    "end": "3095760"
  },
  {
    "text": "d runs in order f event space and that sort of that achieves this part and d it makes sure that its language",
    "start": "3095760",
    "end": "3104079"
  },
  {
    "text": "cannot be done in any less space so that achieves this part",
    "start": "3104079",
    "end": "3110640"
  },
  {
    "text": "so it's different from the language of any machine that runs in little o event f of n space",
    "start": "3110640",
    "end": "3117440"
  },
  {
    "text": "okay um [Music] so uh",
    "start": "3117599",
    "end": "3125520"
  },
  {
    "text": "this is how d is gonna work okay i'm gonna try to give you a little picture uh to help help see the to",
    "start": "3125520",
    "end": "3132079"
  },
  {
    "text": "accompany the description uh so d gets its input w which is of length n",
    "start": "3132079",
    "end": "3140319"
  },
  {
    "text": "the very first thing d does is it marks off f of n's space",
    "start": "3140319",
    "end": "3147359"
  },
  {
    "text": "because it's only allowed to use we're only going to allow d to use f of n space because otherwise we're in",
    "start": "3147359",
    "end": "3154000"
  },
  {
    "text": "danger of d not of a not being in in space f of n so d",
    "start": "3154000",
    "end": "3160240"
  },
  {
    "text": "is going to guarantee that by making sure it's going to mark off f of n space",
    "start": "3160240",
    "end": "3166720"
  },
  {
    "text": "and if it ever tries to use more than that it just rejects and but",
    "start": "3166720",
    "end": "3173040"
  },
  {
    "text": "by virtue of that we're sure that these language is in space f of n because d is an f of n space turing machine and it's",
    "start": "3173040",
    "end": "3180160"
  },
  {
    "text": "going to be the side okay so this part",
    "start": "3180160",
    "end": "3185839"
  },
  {
    "text": "so far is not too hard okay now we're going to start getting into the meat here",
    "start": "3185839",
    "end": "3191839"
  },
  {
    "text": "so if w um",
    "start": "3191839",
    "end": "3198400"
  },
  {
    "text": "now what we want to think of w as a description of a machine that we're",
    "start": "3198400",
    "end": "3203440"
  },
  {
    "text": "going to feed that's that's going to run on w so this is going to a little bit",
    "start": "3203440",
    "end": "3209760"
  },
  {
    "text": "you know back to an earlier when we talked about diagonalization so don't get",
    "start": "3209760",
    "end": "3214880"
  },
  {
    "text": "thrown off by this um we if we're going to think of w not only as",
    "start": "3214880",
    "end": "3220640"
  },
  {
    "text": "the input to d but it's also going to be the description of a machine",
    "start": "3220640",
    "end": "3226240"
  },
  {
    "text": "and if it turns out that w is doesn't describe anything it's just a jump w then we're not not interested we're",
    "start": "3226240",
    "end": "3232000"
  },
  {
    "text": "gonna we're just gonna reject on that w we're only interested in the w's that do",
    "start": "3232000",
    "end": "3237280"
  },
  {
    "text": "describe some machine m okay",
    "start": "3237280",
    "end": "3243200"
  },
  {
    "text": "so if m if w uh describes some machine m then we're gonna run m on w",
    "start": "3243200",
    "end": "3252240"
  },
  {
    "text": "and we're going to do the do the opposite of what uh what m does that's the whole idea",
    "start": "3252880",
    "end": "3259359"
  },
  {
    "text": "we're just going to uh make sure that what we're doing is not the same as what emma's doing",
    "start": "3259359",
    "end": "3266720"
  },
  {
    "text": "so at a high level the the basic idea for this",
    "start": "3268240",
    "end": "3273599"
  },
  {
    "text": "is is not hard um so we're going to simulate m on w",
    "start": "3273599",
    "end": "3280240"
  },
  {
    "text": "if m x rejects then we'll accept and if m accepts then we'll reject we're just going to do the opposite",
    "start": "3280240",
    "end": "3287680"
  },
  {
    "text": "um and i think that is so we have to be careful when we do the",
    "start": "3290559",
    "end": "3296799"
  },
  {
    "text": "simulation this is a little bit of a detail but you know this is a proof where you need to pay",
    "start": "3296799",
    "end": "3301920"
  },
  {
    "text": "attention to some details um the cost of simulating",
    "start": "3301920",
    "end": "3307920"
  },
  {
    "text": "m on d is only a constant factor um because if m uses a certain amount of",
    "start": "3307920",
    "end": "3315520"
  },
  {
    "text": "space when d is simulating m you know m may",
    "start": "3315520",
    "end": "3320799"
  },
  {
    "text": "have a larger tape alphabet than d does but these can then encode um m's tape by",
    "start": "3320799",
    "end": "3327599"
  },
  {
    "text": "using several cells for each of m's cells but it's only going to be a constant factor and that's important",
    "start": "3327599",
    "end": "3333440"
  },
  {
    "text": "here because um we have to make sure that",
    "start": "3333440",
    "end": "3338640"
  },
  {
    "text": "you know if this was a big blow up um d would not be able to run m",
    "start": "3338640",
    "end": "3343760"
  },
  {
    "text": "um i i think i'm sort of arguing the details without making sure we understand the fundamental concept um so",
    "start": "3343760",
    "end": "3353040"
  },
  {
    "text": "let me back up the point is that d is doing something",
    "start": "3353040",
    "end": "3359359"
  },
  {
    "text": "the opposite of m now uh d can't be different from every m",
    "start": "3359359",
    "end": "3365520"
  },
  {
    "text": "because d itself is a turing machine of course but but the thing is is that d is only running within f of n tape",
    "start": "3365520",
    "end": "3372559"
  },
  {
    "text": "cells so it has to be able to do that simulation of m within that amount of tape if m is using a lot of tape then d",
    "start": "3372559",
    "end": "3379200"
  },
  {
    "text": "is going to use a lot of tape and it's just going to reject so this is only going to really come",
    "start": "3379200",
    "end": "3385680"
  },
  {
    "text": "into play getting being able to simulate m if m is using a small amount of using a small",
    "start": "3385680",
    "end": "3392000"
  },
  {
    "text": "amount of space so that d can do the simulation okay so let's just see maybe",
    "start": "3392000",
    "end": "3397520"
  },
  {
    "text": "uh so they're going to be some issues here but before i get to that let's just see what uh what your questions are",
    "start": "3397520",
    "end": "3403280"
  },
  {
    "text": "how can a turing machine know if w is encoding some other turing machine no that's simple",
    "start": "3403280",
    "end": "3409359"
  },
  {
    "text": "you know what what is a coding of a turing machine it's just you know the standard we have a standard coding um",
    "start": "3409359",
    "end": "3416160"
  },
  {
    "text": "it's just you know coding the rules of the machine so it has to have states transition function blah blah blah so it",
    "start": "3416160",
    "end": "3422960"
  },
  {
    "text": "just has to be some you know whatever our encoding for the turing machine is we can always test whether",
    "start": "3422960",
    "end": "3430319"
  },
  {
    "text": "a string is a legitimate encoding of a turing machine so that that shouldn't be bad um",
    "start": "3430319",
    "end": "3435760"
  },
  {
    "text": "somebody says why do we reject if we use more than f n cells isn't it okay to use order f of n",
    "start": "3435760",
    "end": "3442480"
  },
  {
    "text": "yes it could be but we have to cut it off somewhere you know it might be it's okay we could use two f",
    "start": "3442480",
    "end": "3448240"
  },
  {
    "text": "of n we could use 10 f of n but we have to have some constant for d",
    "start": "3448240",
    "end": "3453520"
  },
  {
    "text": "and let's just kind of simply constant one so d has to run within f of n cells",
    "start": "3453520",
    "end": "3458799"
  },
  {
    "text": "um and that's going to guaran that's going to be good enough for us okay do we have to make sure that m runs a little of f of n so we can't really",
    "start": "3458799",
    "end": "3466160"
  },
  {
    "text": "tell whether m is running in little o of f of n or we can tell us whether we can finish",
    "start": "3466160",
    "end": "3471599"
  },
  {
    "text": "the simulation so that's actually going to be maybe you can just hold off on that",
    "start": "3471599",
    "end": "3476640"
  },
  {
    "text": "question because there is a point that we have to follow up on in that which is um",
    "start": "3476640",
    "end": "3482799"
  },
  {
    "text": "uh just because you know we may or may not be able to finish simulating m",
    "start": "3482799",
    "end": "3488799"
  },
  {
    "text": "on this w doesn't necessarily tell us what the asymptotic behavior of m is but we'll have to look at that in a bit okay so",
    "start": "3488799",
    "end": "3495680"
  },
  {
    "text": "somebody's saying what happens if m loops on w that's going to be one of our issues we have to deal with that's a good question there step two alone can",
    "start": "3495680",
    "end": "3502960"
  },
  {
    "text": "use them more than f of n cells yeah step two alone can use more than f of n cells if it does we're just going",
    "start": "3502960",
    "end": "3508880"
  },
  {
    "text": "to end up projecting okay so we're getting good questions here some of them we're going to which i'm going to address anyway so why don't",
    "start": "3508880",
    "end": "3514400"
  },
  {
    "text": "we just move on um okay",
    "start": "3514400",
    "end": "3520559"
  },
  {
    "text": "so here is sort of a question i think this is one of the questions that that related to one of the ones that got",
    "start": "3520720",
    "end": "3526880"
  },
  {
    "text": "asked what happens if it runs in little of f of n space so we we remember what",
    "start": "3526880",
    "end": "3531920"
  },
  {
    "text": "we're trying to do is be different from every small space you know little o of f of n space machine",
    "start": "3531920",
    "end": "3538640"
  },
  {
    "text": "so what if m runs a little o of f of n space but has a big constant so what i",
    "start": "3538640",
    "end": "3544400"
  },
  {
    "text": "mean by that concretely is suppose d is an n cubed space so suppose we're trying",
    "start": "3544400",
    "end": "3550240"
  },
  {
    "text": "to get a in in cubed space but show what's not in n squared space",
    "start": "3550240",
    "end": "3558079"
  },
  {
    "text": "d is going to run an n cubed and what and we have to make sure that",
    "start": "3558079",
    "end": "3563520"
  },
  {
    "text": "any machine that's running in n squared space cannot do the same language um so we're going to be different from",
    "start": "3563520",
    "end": "3569520"
  },
  {
    "text": "that but the problem is that uh in",
    "start": "3569520",
    "end": "3574559"
  },
  {
    "text": "uh the machine m might be running in",
    "start": "3574559",
    "end": "3581119"
  },
  {
    "text": "n squared space but with a huge constant so it might be running in a million n squared so that's still a machine that's",
    "start": "3581119",
    "end": "3587599"
  },
  {
    "text": "running in a little o of n cubed and we have to be different from it but for the particular w we're",
    "start": "3587599",
    "end": "3594480"
  },
  {
    "text": "working on we might not have enough space to run m because of the huge constant it that con",
    "start": "3594480",
    "end": "3601040"
  },
  {
    "text": "the asymptotic behavior is only going to be relevant well for large w for smaller b we may not see that we may not have",
    "start": "3601040",
    "end": "3607040"
  },
  {
    "text": "enough space to run m so um what are we going to do to fix that",
    "start": "3607040",
    "end": "3612480"
  },
  {
    "text": "we're going to run that m on infinitely many different w so it's going to be infinitely many different w's",
    "start": "3612480",
    "end": "3618799"
  },
  {
    "text": "that are all going to encode the same m and the way i'm going to do that",
    "start": "3618799",
    "end": "3623839"
  },
  {
    "text": "is by uh thinking of w as representing m",
    "start": "3623839",
    "end": "3630799"
  },
  {
    "text": "but having an unbounded number of trailing zeros after that",
    "start": "3630799",
    "end": "3636960"
  },
  {
    "text": "so i'm going to strip off the very first thing i'm going to do with w is i'm going to strip off the trailing zeros up",
    "start": "3636960",
    "end": "3643040"
  },
  {
    "text": "into the final one i'm going to remove those and then take the rest and as the description of the machine",
    "start": "3643040",
    "end": "3650160"
  },
  {
    "text": "so now i'm going to have potentially w's that have an enormous number of zeros at the end",
    "start": "3650160",
    "end": "3657599"
  },
  {
    "text": "big enough so that i can see the asymptotic behavior of m and that if m is really running in",
    "start": "3657599",
    "end": "3663440"
  },
  {
    "text": "little o of f of n space i'll have enough space to run m to completion on w",
    "start": "3663440",
    "end": "3668960"
  },
  {
    "text": "and so then i'll be able to be different from it okay um so i'm kind of showing that over here so",
    "start": "3668960",
    "end": "3676160"
  },
  {
    "text": "here's a very large w i'm going to strip off the trailing zeros",
    "start": "3676160",
    "end": "3682079"
  },
  {
    "text": "the rest of it is just going to be m and i'm going to run this m on the whole w",
    "start": "3682079",
    "end": "3687920"
  },
  {
    "text": "the entire w without the zero stripped off so now m is going to be running on a very large input",
    "start": "3687920",
    "end": "3694000"
  },
  {
    "text": "um big enough so that d uh d which has",
    "start": "3694000",
    "end": "3699040"
  },
  {
    "text": "asymptotically more space than m does will have enough space to run empty",
    "start": "3699040",
    "end": "3704079"
  },
  {
    "text": "completion um now another question that got asked what happens if m loops",
    "start": "3704079",
    "end": "3709760"
  },
  {
    "text": "that's going to be a problem because d always has to hold and if it just blindly simulates m",
    "start": "3709760",
    "end": "3715599"
  },
  {
    "text": "then d might be looping on m none of m is going to use a lot of space by the way",
    "start": "3715599",
    "end": "3720799"
  },
  {
    "text": "because then d is going to catch it in step one but if m uses",
    "start": "3720799",
    "end": "3726400"
  },
  {
    "text": "his loops on a small amount of space then uh d",
    "start": "3726400",
    "end": "3732000"
  },
  {
    "text": "might end up looping as presently constructed so what i'm going to do is i'm going to put a counter which",
    "start": "3732079",
    "end": "3738960"
  },
  {
    "text": "makes it stop if it runs for 2 to the f of n space so basically",
    "start": "3738960",
    "end": "3744799"
  },
  {
    "text": "because that's how long d could possibly run without looping anyway",
    "start": "3744799",
    "end": "3750720"
  },
  {
    "text": "m could be running without looping anyway and so we're going to run it for this amount of",
    "start": "3750720",
    "end": "3755839"
  },
  {
    "text": "this number of steps and uh i'm going to reject if it hasn't yet halted as well as uh that because it has",
    "start": "3755839",
    "end": "3763760"
  },
  {
    "text": "to be looping at that point anyway um and so it's not interesting for us it doesn't matter what we're going to do",
    "start": "3763760",
    "end": "3769760"
  },
  {
    "text": "if it hasn't halted because m is not a decider",
    "start": "3769760",
    "end": "3775039"
  },
  {
    "text": "and the last thing is how to compute f um so i'll try to address some questions",
    "start": "3775039",
    "end": "3780799"
  },
  {
    "text": "here in in our remaining time uh how to compute f so to mark off f of n cells we also have",
    "start": "3780799",
    "end": "3788400"
  },
  {
    "text": "to compute f i didn't think anybody any of you guys asked that question except maybe sort of the very beginning about f",
    "start": "3788400",
    "end": "3794240"
  },
  {
    "text": "being a computable function certainly f is going to have to be computable but not only does it have to",
    "start": "3794240",
    "end": "3800079"
  },
  {
    "text": "be computable it has to be computable within the space bound and that's just going to be a condition",
    "start": "3800079",
    "end": "3805440"
  },
  {
    "text": "we're going to impose on f it's so called space constructable namely that you can compute it within its own space",
    "start": "3805440",
    "end": "3811680"
  },
  {
    "text": "bound and all nice functions that we care about are going to be space",
    "start": "3811680",
    "end": "3817760"
  },
  {
    "text": "constructable so it's not doesn't turn out to be",
    "start": "3817760",
    "end": "3823760"
  },
  {
    "text": "an obstacle to applying uh the hierarchy theorem but it is a condition that we need it actually is",
    "start": "3823760",
    "end": "3829839"
  },
  {
    "text": "not true without that condition um okay let's let's just oh this i have a",
    "start": "3829839",
    "end": "3836079"
  },
  {
    "text": "check in here maybe we can take a couple of questions first",
    "start": "3836079",
    "end": "3840720"
  },
  {
    "text": "some of you are anticipating my check-in actually which is good um",
    "start": "3842960",
    "end": "3849039"
  },
  {
    "text": "so let me hold off on those sorry a bit confused about what is m",
    "start": "3849039",
    "end": "3854240"
  },
  {
    "text": "can we say d as input m and simulate m on yeah so uh somebody's saying",
    "start": "3854240",
    "end": "3860720"
  },
  {
    "text": "can we say that d has input m and simulates m on itself yes that's",
    "start": "3860720",
    "end": "3866480"
  },
  {
    "text": "exactly what's happening the reason why we're doing that is because we have to cover all possible m's",
    "start": "3866480",
    "end": "3873359"
  },
  {
    "text": "so as we get all possible inputs w they're going to range over all possible",
    "start": "3873359",
    "end": "3878880"
  },
  {
    "text": "ends and so every possible m is going to get addressed to see if we can run it um",
    "start": "3878880",
    "end": "3885760"
  },
  {
    "text": "within the space bound and be different from it d's job is to be different from each of",
    "start": "3885760",
    "end": "3891599"
  },
  {
    "text": "those ends but it's not you know again there were some details here that got raised in",
    "start": "3891599",
    "end": "3896720"
  },
  {
    "text": "these issues um but in a sense this is just kind of",
    "start": "3896720",
    "end": "3902160"
  },
  {
    "text": "more technical i would focus on understanding what i originally wrote down because that's the",
    "start": "3902160",
    "end": "3907440"
  },
  {
    "text": "main idea the rest of it is just kind of implementation details",
    "start": "3907440",
    "end": "3912640"
  },
  {
    "text": "okay so why don't i can i give an example of a non-space constructable function yes",
    "start": "3912640",
    "end": "3919359"
  },
  {
    "text": "log log log n space you cannot compute log log log n space within log log log n",
    "start": "3919359",
    "end": "3926160"
  },
  {
    "text": "space and in fact it's known that there's nothing new between constant space which is just",
    "start": "3926160",
    "end": "3933440"
  },
  {
    "text": "regular and log log log n space anything you can do in log log log n space is a",
    "start": "3933440",
    "end": "3938799"
  },
  {
    "text": "regular language so the the hierarchy theorem doesn't doesn't won't apply there because well",
    "start": "3938799",
    "end": "3946079"
  },
  {
    "text": "it applies but that's not a it doesn't well you know it's not it's not space constructible",
    "start": "3946079",
    "end": "3952480"
  },
  {
    "text": "to find higher level um you know large um",
    "start": "3952480",
    "end": "3958000"
  },
  {
    "text": "non-space constructable functions you can do it but they're you know you you",
    "start": "3958000",
    "end": "3964319"
  },
  {
    "text": "they're not easy to describe okay let's do our check in here what happens when we run dion itself i",
    "start": "3964319",
    "end": "3970400"
  },
  {
    "text": "got a couple of people asking me about that so that's a this is just a good lead into our check-in and this a little",
    "start": "3970400",
    "end": "3976319"
  },
  {
    "text": "you really have to understand what's going on to see what does d do when if you feed in itself maybe with",
    "start": "3976319",
    "end": "3984000"
  },
  {
    "text": "some trailing zeros because remember the algorithm strips off trailing zero so what is what does it do in that case um",
    "start": "3984000",
    "end": "3991119"
  },
  {
    "text": "so here are my options there you can get to pick which ones which one",
    "start": "3991119",
    "end": "3996880"
  },
  {
    "text": "you uh you think is the answer so i'll give you another 30 seconds on this because this requires a little bit of",
    "start": "3996880",
    "end": "4002400"
  },
  {
    "text": "thinking if you want to invest in it all right",
    "start": "4002400",
    "end": "4007838"
  },
  {
    "text": "i'm wrapping this up guys five seconds to go",
    "start": "4010160",
    "end": "4018680"
  },
  {
    "text": "okay i'm gonna end it so get your participation points in",
    "start": "4020799",
    "end": "4027920"
  },
  {
    "text": "a bunch of you have not uh said anything come on um i can see the count here and it's",
    "start": "4027920",
    "end": "4033520"
  },
  {
    "text": "there's a three or four of you are not not answered well you're going to lose out",
    "start": "4033520",
    "end": "4038880"
  },
  {
    "text": "closing all right so the right answer is in fact c it does reject let's just understand",
    "start": "4038880",
    "end": "4044960"
  },
  {
    "text": "what happened is definitely we don't get a contradiction i mean this is an algorithm i just described it's going to do something",
    "start": "4044960",
    "end": "4051280"
  },
  {
    "text": "um uh i'm assuming the people who picked e are",
    "start": "4051280",
    "end": "4058400"
  },
  {
    "text": "having fun as i did when i came up with the check-in but um",
    "start": "4058400",
    "end": "4064640"
  },
  {
    "text": "uh not a question answer a doesn't is not going to be good either because d has to be a decider so it can't loop on",
    "start": "4065119",
    "end": "4071440"
  },
  {
    "text": "anything so the only sort of reasonable answers are accept or reject",
    "start": "4071440",
    "end": "4076720"
  },
  {
    "text": "when you run d on itself uh what's it going to try to do",
    "start": "4076720",
    "end": "4083280"
  },
  {
    "text": "it's going to the very first thing it's going to you know mark off f of n tape cells",
    "start": "4083280",
    "end": "4088319"
  },
  {
    "text": "and then it's going to get its input which is itself tries to simulate itself on the same",
    "start": "4088319",
    "end": "4093440"
  },
  {
    "text": "input that uh simulated d is also going to try to mark off f of n tape cells",
    "start": "4093440",
    "end": "4099600"
  },
  {
    "text": "but um due to some simulation you know there's going to be some cost to doing the stimulation when the simulated d is",
    "start": "4099600",
    "end": "4106719"
  },
  {
    "text": "going to try to mark off f of n tape cells it's going to blow the original d",
    "start": "4106719",
    "end": "4112400"
  },
  {
    "text": "space bound and exceed the bound and so d is going to reject up right in step",
    "start": "4112400",
    "end": "4118238"
  },
  {
    "text": "one when it tries to get an input of its of itself",
    "start": "4118239",
    "end": "4123278"
  },
  {
    "text": "so that's um it's very clear what's gonna happen in this it's just gonna reject",
    "start": "4123279",
    "end": "4129359"
  },
  {
    "text": "because of the for this reject this reject in particular and notice this would you know yeah",
    "start": "4129359",
    "end": "4136880"
  },
  {
    "text": "you know okay let me not try to confuse it um okay so that's that's that's all i want",
    "start": "4136960",
    "end": "4142960"
  },
  {
    "text": "to say about this um let's now move in our remaining seven minutes to the time",
    "start": "4142960",
    "end": "4150080"
  },
  {
    "text": "hierarchy theorem which is very has the same proof um but some of the technical details are slightly different",
    "start": "4150080",
    "end": "4158079"
  },
  {
    "text": "okay um so now if i give you a time bound again",
    "start": "4159279",
    "end": "4164400"
  },
  {
    "text": "we you have gonna have a face with the same notion that you have to be able to compute f within f's amount of time",
    "start": "4164400",
    "end": "4171040"
  },
  {
    "text": "so it has to be a time constructable i'm not gonna define that um so there's a language a which requires",
    "start": "4171040",
    "end": "4178000"
  },
  {
    "text": "that much time um so it has to be decidable within that much time but there's a slight",
    "start": "4178000",
    "end": "4183199"
  },
  {
    "text": "difference here and there's and this is an artifact of the proof of the theorem not because it's an absolute truth as",
    "start": "4183199",
    "end": "4189278"
  },
  {
    "text": "far as we know uh it's not that it's not decidable little o of f n you actually you can",
    "start": "4189279",
    "end": "4195520"
  },
  {
    "text": "only prove something slightly weaker when you have one tape turing machines that it's little decidable little o over",
    "start": "4195520",
    "end": "4202960"
  },
  {
    "text": "there's there's a slight um uh gap in what you can prove so it's not",
    "start": "4202960",
    "end": "4210800"
  },
  {
    "text": "only that you can't prove you it requires little o but little o of",
    "start": "4210800",
    "end": "4215840"
  },
  {
    "text": "little of f of n over log f of n is uh what you can prove that the you",
    "start": "4215840",
    "end": "4221280"
  },
  {
    "text": "get from this uh time hierarchy theorem but let's not get caught up on that for now um",
    "start": "4221280",
    "end": "4227199"
  },
  {
    "text": "uh okay so the proof outline is the same outline",
    "start": "4227199",
    "end": "4233199"
  },
  {
    "text": "as we had before um uh we're going to give a d that runs in",
    "start": "4233199",
    "end": "4238239"
  },
  {
    "text": "order f of n time so it's ensures that the language is in that uh",
    "start": "4238239",
    "end": "4245360"
  },
  {
    "text": "time complexity class time f of n and it makes sure it's different from every machine that runs faster",
    "start": "4245360",
    "end": "4252480"
  },
  {
    "text": "by some significant love by a log factor faster",
    "start": "4252480",
    "end": "4258040"
  },
  {
    "text": "okay and so um why don't i uh show how that goes",
    "start": "4258960",
    "end": "4265280"
  },
  {
    "text": "um the proof is in some ways almost exactly the same",
    "start": "4265280",
    "end": "4270800"
  },
  {
    "text": "um i'm going to give a d which runs this much time",
    "start": "4270800",
    "end": "4276400"
  },
  {
    "text": "and it shows it's different from every m that runs in",
    "start": "4276400",
    "end": "4282000"
  },
  {
    "text": "a lot less time here is the algorithm for d now it computes f n but it does",
    "start": "4282800",
    "end": "4289600"
  },
  {
    "text": "something a little different with f of n remember in the space hierarchy theorem",
    "start": "4289600",
    "end": "4294880"
  },
  {
    "text": "we marked off f of n space now this f event is going to be used for",
    "start": "4294880",
    "end": "4300800"
  },
  {
    "text": "a different purpose it's going to be a clock and you have to shut m down",
    "start": "4300800",
    "end": "4306880"
  },
  {
    "text": "if it runs for more than f of n steps not if it uses more than f of n space",
    "start": "4306880",
    "end": "4314440"
  },
  {
    "text": "because we're only interested in m's that use significantly less than f of n time",
    "start": "4314560",
    "end": "4320960"
  },
  {
    "text": "so we're going to run an m you know for f for some number of steps",
    "start": "4320960",
    "end": "4326320"
  },
  {
    "text": "whatever m says we're going to do the opposite and only if we can actually finish that simulation we'll be be able",
    "start": "4326320",
    "end": "4332480"
  },
  {
    "text": "to be sure that we're different from what m is doing um so this is the whole algorithm here",
    "start": "4332480",
    "end": "4338080"
  },
  {
    "text": "we don't have to do any further modifications and where's that login factor coming from",
    "start": "4338080",
    "end": "4344880"
  },
  {
    "text": "it's actually coming from a funny place um",
    "start": "4344880",
    "end": "4350000"
  },
  {
    "text": "and and you know you have to get into the little bit of the guts of this when you're simulating m on w",
    "start": "4350000",
    "end": "4357840"
  },
  {
    "text": "remember that m itself was described by w so you're going to have to write down a",
    "start": "4357840",
    "end": "4363280"
  },
  {
    "text": "copy of m which is you know just as described by w",
    "start": "4363280",
    "end": "4369360"
  },
  {
    "text": "and then so you're gonna and then you're gonna have the tape that am is working on",
    "start": "4369360",
    "end": "4375199"
  },
  {
    "text": "which is starting out with w on it um and uh",
    "start": "4375199",
    "end": "4381440"
  },
  {
    "text": "you have to be now you have to be a little careful how you manage that because if your description of m is just",
    "start": "4381440",
    "end": "4388000"
  },
  {
    "text": "sitting at the beginning of the tape as you're simulating m",
    "start": "4388000",
    "end": "4393520"
  },
  {
    "text": "every time you do one step and modifying the tape you don't want to have to go back",
    "start": "4393520",
    "end": "4399679"
  },
  {
    "text": "to the beginning of the tape to look up the next step of m so you actually have to carry m along",
    "start": "4399679",
    "end": "4406000"
  },
  {
    "text": "with you as you're doing the simulation and you can do that by expanding the",
    "start": "4406000",
    "end": "4411760"
  },
  {
    "text": "tape alphabet of the tape so that you can effectively have two symbols",
    "start": "4411760",
    "end": "4417280"
  },
  {
    "text": "on one cell one is going to be for describing m and the other one is going to be for just the for m's",
    "start": "4417280",
    "end": "4424880"
  },
  {
    "text": "for the simulation tape and you'll be carrying m along with you uh wherever your head is",
    "start": "4424880",
    "end": "4430880"
  },
  {
    "text": "so you don't have to go very far to look up m and so that's all possible because that's",
    "start": "4430880",
    "end": "4437679"
  },
  {
    "text": "going to add only a constant factor because m is fixed in size doesn't depend on",
    "start": "4437679",
    "end": "4443920"
  },
  {
    "text": "you know you know for large inputs to m m is fixed",
    "start": "4443920",
    "end": "4450239"
  },
  {
    "text": "but the tricky thing here is the counter to make sure we're not using too much time",
    "start": "4450239",
    "end": "4456080"
  },
  {
    "text": "um [Music] the counter has size log f of n because that's how big it has to count up to so",
    "start": "4456080",
    "end": "4462560"
  },
  {
    "text": "you should you can shut it down if it's going to exceed the f of n steps um",
    "start": "4462560",
    "end": "4468640"
  },
  {
    "text": "and because you know you have to run for a certain amount of time",
    "start": "4468640",
    "end": "4473920"
  },
  {
    "text": "and carrying the keeping the counter nearby has the counter now could be pretty big",
    "start": "4473920",
    "end": "4480560"
  },
  {
    "text": "and so that's going to cost you a log factor of um of simulation cost",
    "start": "4480560",
    "end": "4486560"
  },
  {
    "text": "to move that counter around all the time and so that's why you have to",
    "start": "4486560",
    "end": "4494000"
  },
  {
    "text": "run for only a log factor less so that you can actually finish within f",
    "start": "4494000",
    "end": "4499360"
  },
  {
    "text": "of n time as you're as you're required to do okay i realize that that's a mouthful there and you may not have all",
    "start": "4499360",
    "end": "4505520"
  },
  {
    "text": "understood that it doesn't matter it's not that critical i think what i'm really more concerned is you understand the the main idea of",
    "start": "4505520",
    "end": "4512800"
  },
  {
    "text": "the um the hierarchy theorem some of these implementation details you know you",
    "start": "4512800",
    "end": "4519360"
  },
  {
    "text": "if you don't get them i wouldn't worry about it i i feel i have to include them for completeness",
    "start": "4519360",
    "end": "4524880"
  },
  {
    "text": "sake and to be honest with you about the proof but if you didn't follow everything that's okay i do want to",
    "start": "4524880",
    "end": "4529920"
  },
  {
    "text": "understand the main idea though of the algorithm making sure that what it's doing is",
    "start": "4529920",
    "end": "4536480"
  },
  {
    "text": "different from what every machine is doing if that machine runs in little o of f of n space or or a small amount of",
    "start": "4536480",
    "end": "4543760"
  },
  {
    "text": "time you know little o of f n over log f of n time okay so and i think we're gonna uh",
    "start": "4543760",
    "end": "4551120"
  },
  {
    "text": "we're gonna end here so come pretty much out of time uh i'm gonna stick around for a little bit",
    "start": "4551120",
    "end": "4557280"
  },
  {
    "text": "um in case there's any questions here oh wait there's one let's check in though",
    "start": "4557280",
    "end": "4562320"
  },
  {
    "text": "um let's let's look at this this is kind of an interesting sort of follow-on to the hierarchy theorem um if you look at the",
    "start": "4562320",
    "end": "4569840"
  },
  {
    "text": "two questions does l equal p and does p equal p space",
    "start": "4569840",
    "end": "4575199"
  },
  {
    "text": "these are both unsolved problems does the what if anything does the hierarchy theorem tell us about those",
    "start": "4575199",
    "end": "4581760"
  },
  {
    "text": "questions and it's kind of interesting that there actually does well i'll leave it to you",
    "start": "4581760",
    "end": "4587760"
  },
  {
    "text": "to uh tell me if you can see what what it might actually be telling you closing",
    "start": "4587760",
    "end": "4595360"
  },
  {
    "text": "get your answer in okay one two three",
    "start": "4595360",
    "end": "4602719"
  },
  {
    "text": "i feel like i'm running an auction house here i should have a gavel",
    "start": "4602719",
    "end": "4609480"
  },
  {
    "text": "okay yes in fact we know that you know these are separated so it's not even though we",
    "start": "4612480",
    "end": "4618800"
  },
  {
    "text": "don't know if l equals p or p equals p space they can't both be equal because then um l would equal p space",
    "start": "4618800",
    "end": "4626320"
  },
  {
    "text": "and we know that's false um so at least one of these has the answer no",
    "start": "4626320",
    "end": "4631440"
  },
  {
    "text": "okay so with that let's wrap up today's lecture you know we prove these hierarchy",
    "start": "4631440",
    "end": "4636719"
  },
  {
    "text": "theorems and why don't we just uh um i'm going to",
    "start": "4636719",
    "end": "4643120"
  },
  {
    "text": "uh shut us down here but but before well",
    "start": "4643120",
    "end": "4648320"
  },
  {
    "text": "we're over so you can feel free to go um but i'll stick around in case anybody's any questions for a few minutes anyway",
    "start": "4648320",
    "end": "4654320"
  },
  {
    "text": "um and then uh we'll call it a day since we just showed space and is a",
    "start": "4654320",
    "end": "4660080"
  },
  {
    "text": "proper subset of space n to the k for any k why can't we also say space n is a proper subset of p space",
    "start": "4660080",
    "end": "4666320"
  },
  {
    "text": "yes space n is a proper subset of p space yeah so somebody just asked we just",
    "start": "4666320",
    "end": "4672560"
  },
  {
    "text": "showed that space n is a proper subset of space n to the k does that also say that space n is a",
    "start": "4672560",
    "end": "4679600"
  },
  {
    "text": "proper subset of p space definitely any um",
    "start": "4679600",
    "end": "4686239"
  },
  {
    "text": "space n to the k is a proper subset of space n to the k plus one",
    "start": "4686239",
    "end": "4691440"
  },
  {
    "text": "which is a subset of p space so any fixed polynomial is going to be a subset",
    "start": "4691440",
    "end": "4696800"
  },
  {
    "text": "of p space because p space includes all the polynomials which of the two unsolved problems",
    "start": "4696800",
    "end": "4702719"
  },
  {
    "text": "uh whoops do i think is more likely likely to be true",
    "start": "4702719",
    "end": "4708320"
  },
  {
    "text": "well i think most i mean i would bet that both of these",
    "start": "4708320",
    "end": "4714400"
  },
  {
    "text": "are not equal so both of these have answered no um",
    "start": "4714400",
    "end": "4719520"
  },
  {
    "text": "uh it would be weird you know i mean you think l equals p",
    "start": "4719520",
    "end": "4724719"
  },
  {
    "text": "that anything you can do in polynomial time you end with log space log space is incredibly weak and and p space is incredibly strong",
    "start": "4724719",
    "end": "4732080"
  },
  {
    "text": "um i would be shocked if either of these were equal so we just",
    "start": "4732080",
    "end": "4737520"
  },
  {
    "text": "the problem is that we don't have a method for proving um problems",
    "start": "4737520",
    "end": "4743440"
  },
  {
    "text": "are are actually have high complexity of of any sort we don't know how to show things outside of",
    "start": "4743440",
    "end": "4749520"
  },
  {
    "text": "l don't know how to show things outside of p except by using the hierarchy theorem",
    "start": "4749520",
    "end": "4755360"
  },
  {
    "text": "diagonalization is the only method that we have for showing things or outside of classes",
    "start": "4755360",
    "end": "4760560"
  },
  {
    "text": "and there's reason to believe that as we'll this will get to i think next lecture in fact there's kind of reasons to believe that",
    "start": "4760560",
    "end": "4768080"
  },
  {
    "text": "the hierarchy theorem type argument which is diagonalization is not going to",
    "start": "4768080",
    "end": "4774000"
  },
  {
    "text": "answer those kinds of questions um so we need a different method and diagonalization is all we got",
    "start": "4774000",
    "end": "4782159"
  },
  {
    "text": "good question though if i didn't get to answer your question you have a question for me ask it again because it's got buried",
    "start": "4783199",
    "end": "4791040"
  },
  {
    "text": "so it means we are very far from disproving p versus np is that right",
    "start": "4791280",
    "end": "4797520"
  },
  {
    "text": "it could happen tomorrow you know how do you how do you how can",
    "start": "4797920",
    "end": "4803040"
  },
  {
    "text": "you tell it doesn't you know it it seems clear that the present state of mathematics as",
    "start": "4803040",
    "end": "4809280"
  },
  {
    "text": "of right now is you know we don't have a clue how to answer those kinds of questions",
    "start": "4809280",
    "end": "4815760"
  },
  {
    "text": "and it's not obvious that we've even made any progress um but",
    "start": "4815760",
    "end": "4821199"
  },
  {
    "text": "you know that's the nature of the game that's the nature of the beast you know somebody gets a good idea and",
    "start": "4821199",
    "end": "4827199"
  },
  {
    "text": "all of a sudden lots of things uh can change and that can happen and then in any point maybe one of you guys",
    "start": "4827199",
    "end": "4833840"
  },
  {
    "text": "when were these results first this is the the stuff okay the hierarchy",
    "start": "4833840",
    "end": "4839199"
  },
  {
    "text": "theorem is old that goes back to the very when time when time classes were first defined i",
    "start": "4839199",
    "end": "4846400"
  },
  {
    "text": "think is one of the first results to show the hierarchy and",
    "start": "4846400",
    "end": "4852719"
  },
  {
    "text": "that's late 60s",
    "start": "4852719",
    "end": "4856719"
  },
  {
    "text": "the nl equal coen l i think i mentioned was like mid 1980s",
    "start": "4858480",
    "end": "4863679"
  },
  {
    "text": "much later i mean from your points of view it was a bit it was back in the",
    "start": "4863679",
    "end": "4870239"
  },
  {
    "text": "cave cave age uh either way but uh yeah but",
    "start": "4870239",
    "end": "4875360"
  },
  {
    "text": "but the the hierarchy team that that's actually pre predates uh my coming into the field but but the but",
    "start": "4875360",
    "end": "4882480"
  },
  {
    "text": "the nl equal conel that was something that i was i personally experienced how surprised people were",
    "start": "4882480",
    "end": "4889840"
  },
  {
    "text": "okay i think i'm gonna send you off all off on your way good good having you here and i have a good",
    "start": "4890480",
    "end": "4897199"
  },
  {
    "text": "weekend everybody and um i will see you on tuesday",
    "start": "4897199",
    "end": "4903199"
  },
  {
    "text": "bye",
    "start": "4903199",
    "end": "4906199"
  },
  {
    "text": "you",
    "start": "4916239",
    "end": "4918320"
  }
]