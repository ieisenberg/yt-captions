[
  {
    "text": "[CREAKING] [CLICKING]\n[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "7760"
  },
  {
    "text": " JUSTIN SOLOMON: We\njust started a new unit",
    "start": "7760",
    "end": "13870"
  },
  {
    "text": "on graph theory,\nwhich is going to be sort of our focus for the next\ncouple of lectures in 6006.",
    "start": "13870",
    "end": "20343"
  },
  {
    "text": "And so I thought we'd give\nit a little bit of review at the beginning the\nlecture because, as usual, I've muddled together\na lot of notions",
    "start": "20343",
    "end": "26470"
  },
  {
    "text": "in our previous lecture, and\nthen start with some new ideas. So basically, in our\nprevious lecture,",
    "start": "26470",
    "end": "31910"
  },
  {
    "text": "we talked about an algorithm\ncalled breadth-first search. And then almost always\nyou see that paired",
    "start": "31910",
    "end": "37120"
  },
  {
    "text": "with a second algorithm\ncalled depth-first search. And following tradition,\nand basically logic,",
    "start": "37120",
    "end": "42220"
  },
  {
    "text": "we'll do the same\nthing in 006 today. But in any event,\nfor today we'll",
    "start": "42220",
    "end": "48100"
  },
  {
    "text": "stick to the technical material. So as a little bit of\nreview, I guess actually, the one thing I didn't\ndo on this slide",
    "start": "48100",
    "end": "53827"
  },
  {
    "text": "was actually draw a graph. So we should probably\nstart with that. So if you recall, graph is a\ncollection of nodes or vertices",
    "start": "53827",
    "end": "63010"
  },
  {
    "text": "depending-- I don't know, is it like\na European American thing or something-- and edges.",
    "start": "63010",
    "end": "68780"
  },
  {
    "text": "So here's an example,\nwhich as usual, I'm not managing to draw\nparticularly clearly. So this graph is\nkind of like a cycle.",
    "start": "68780",
    "end": "75900"
  },
  {
    "text": "So I have directed edges\nhere, here, here, and here. And of course, there are\nmany kind of variations",
    "start": "75900",
    "end": "81760"
  },
  {
    "text": "on the theme, right? So our basic sort of\ndefinition of a graph is that we have\nsome set V, which",
    "start": "81760",
    "end": "87808"
  },
  {
    "text": "is like the set of vertices.  And then we have a set\nE, which is set of edges.",
    "start": "87808",
    "end": "95245"
  },
  {
    "text": " And this was a\nsubset of V cross V.",
    "start": "95245",
    "end": "101490"
  },
  {
    "text": "And this is nothing more than\nfancy notation for saying that an edge is a pair\nof vertices, like a from",
    "start": "101490",
    "end": "107520"
  },
  {
    "text": "and a to vertex. Of course, there are many\nvariations on this theme. You could have a directed\nversus an undirected graph.",
    "start": "107520",
    "end": "114220"
  },
  {
    "text": "So this one is directed, meaning\nthe edges look like arrows. If they didn't have arrowheads,\nthey'd be undirected.",
    "start": "114220",
    "end": "120240"
  },
  {
    "text": "We define something called a\nsimple graph where you have essentially no repeated edges. So for instance, you\ncan't do something",
    "start": "120240",
    "end": "126510"
  },
  {
    "text": "like this where you have\nthe same edge twice. And then there are a couple\nof different definitions",
    "start": "126510",
    "end": "132120"
  },
  {
    "text": "that were kind of useful. So in particular-- I'm going\nto erase this, whoops--",
    "start": "132120",
    "end": "137550"
  },
  {
    "text": "useless edge here.  Maybe make my graph\nslightly more interesting.",
    "start": "137550",
    "end": "143970"
  },
  {
    "text": "So add another edge going\nin the reverse direction. So maybe I have--",
    "start": "143970",
    "end": "149940"
  },
  {
    "text": "I'm going to give my vertices\nlabels. x, y, z, and w.",
    "start": "149940",
    "end": "156500"
  },
  {
    "text": "Then we talked\nabout the neighbors of a given vertex, which\nare the vertices that you",
    "start": "156500",
    "end": "162110"
  },
  {
    "text": "can reach by following edges\nin or out of your vertex. So in particular, the\noutgoing neighbors,",
    "start": "162110",
    "end": "168349"
  },
  {
    "text": "which we sort of implicitly\ndefined in our previous lecture but didn't call it out, we're\ngoing to notate with Adj+.",
    "start": "168350",
    "end": "177423"
  },
  {
    "text": "And these are all of\nthe things that you can reach by going out of\na vertex into the next one. So for example, Adj+ of\nw is going to be the set",
    "start": "177423",
    "end": "187100"
  },
  {
    "text": "of vertices. We'll notice I can get from\nw to y and also from w to z.",
    "start": "187100",
    "end": "192270"
  },
  {
    "text": "Yeah. So. Nope, nope. y comma z.",
    "start": "192270",
    "end": "199120"
  },
  {
    "text": "OK. So to continue just our tiny\namount of review for the day,",
    "start": "199120",
    "end": "204382"
  },
  {
    "text": "remember that a graph--\nthere are many different ways to represent a graph. The sort of brain\ndead one would be just",
    "start": "204382",
    "end": "209680"
  },
  {
    "text": "like a big long list of edges. But of course,\nfor our algorithms it's not a particularly\nefficient way to check things like, does\nthis edge exist in my graph.",
    "start": "209680",
    "end": "218239"
  },
  {
    "text": "So the basic\nrepresentation that I think we're mostly working\nfrom in this course is to think of a graph like a\nset of vertices, each of which",
    "start": "218240",
    "end": "226300"
  },
  {
    "text": "maps to another set of vertices. So roughly every vertex\nmaybe stores its outgoing set",
    "start": "226300",
    "end": "231790"
  },
  {
    "text": "of edges. And so this is kind of\nnice because, of course, very quickly we can\nanswer questions like,",
    "start": "231790",
    "end": "237980"
  },
  {
    "text": "is this edge inside\nof our graph? Or we can iterate\nover the neighbors of a vertex and so on, which\nare the kind of typical things",
    "start": "237980",
    "end": "243967"
  },
  {
    "text": "that we do in a lot\nof graph algorithms. And then finally, in\nour previous lecture,",
    "start": "243968",
    "end": "249410"
  },
  {
    "text": "we started talking about paths. So a path is like\na chain of vertices that can get me from one vertex\nto the other only following",
    "start": "249410",
    "end": "256630"
  },
  {
    "text": "edges of my graph. There is a term that\nI think I forgot to define last time\nbecause it didn't really",
    "start": "256630",
    "end": "262088"
  },
  {
    "text": "matter a ton, which is a\nsimple path, which is just a path that doesn't have the\nsame vertex more than once.",
    "start": "262089",
    "end": "268588"
  },
  {
    "text": "And then, of course, there\nare many different questions you could ask about a\ngraph that are basically",
    "start": "268588",
    "end": "273670"
  },
  {
    "text": "different problems\ninvolving computing paths. So for instance, the shortest\npath between two vertices is sort of our canonical\none in graph theory.",
    "start": "273670",
    "end": "281110"
  },
  {
    "text": "Or you could ask questions\nabout reachability and so on. So there's our basic review\nfrom our previous lecture.",
    "start": "281110",
    "end": "288820"
  },
  {
    "text": "Does our course staff have any\nquestions about things so far? Excellent.",
    "start": "288820",
    "end": "293940"
  },
  {
    "text": "OK. And there's one additional\npiece of terminology that I fudged a little\nbit last time-- or rather,",
    "start": "293940",
    "end": "299450"
  },
  {
    "text": "my co-instructor suggested a\nbit of an attitude adjustment. So I thought I'd better\nclarify really quick.",
    "start": "299450",
    "end": "305190"
  },
  {
    "text": "There's this interesting\nphrase, linear time, which we all know and love\nin computer science theory.",
    "start": "305190",
    "end": "310639"
  },
  {
    "text": "And this sort of implicit thing,\nespecially in this course, is that when we\nsay linear time, we mean in the size of the input.",
    "start": "310640",
    "end": "316680"
  },
  {
    "text": "Right? And so if we have a linear\ntime graph algorithm, well, how much space does it\ntake to store a graph?",
    "start": "316680",
    "end": "322712"
  },
  {
    "text": "Well, we need a list of\nvertices and a list of edges, if nothing else. So a reasonable way to interpret\nthis phrase linear time",
    "start": "322712",
    "end": "329453"
  },
  {
    "text": "is that it's an algorithm\nthat looks like what we've shown on the screen. The times proportional\nto maybe the sum",
    "start": "329453",
    "end": "335060"
  },
  {
    "text": "of the number of vertices\nand the number of edges. If that makes you uncomfortable\nlike it does for me because one",
    "start": "335060",
    "end": "340130"
  },
  {
    "text": "of these can kind of\nscale on the other, I think it's always\nfine to add more detail. Right? So if you want to\nsay, linear in the sum",
    "start": "340130",
    "end": "346310"
  },
  {
    "text": "of the number of vertices and\nedges, that's perfectly fine. But if you see\nthis phrase, that's how you should interpret it.",
    "start": "346310",
    "end": "352610"
  },
  {
    "text": "Hopefully that's a\nfair way to put it. Excellent. OK.",
    "start": "352610",
    "end": "357770"
  },
  {
    "text": "So last time, we talked about an\nalgorithm called breadth-first search-- BFS, for those in the know.",
    "start": "357770",
    "end": "364159"
  },
  {
    "text": "Breadth-first search\nis an algorithm. And the reason we\nuse the word breadth is because it's kind of,\nremember, we talked about level",
    "start": "364160",
    "end": "370910"
  },
  {
    "text": "sets last time because we talked\nabout breadth-first search in the context of\ncomputing shortest paths.",
    "start": "370910",
    "end": "376640"
  },
  {
    "text": "And in particular, we have\nour source node all the way on the left-hand side. And then breadth-first search\nconstructed all the nodes",
    "start": "376640",
    "end": "383750"
  },
  {
    "text": "that were distance 1 away. Right. That's the first level set, and\nthen all the distance 2 away, and then all the distance\n3 away, and so on.",
    "start": "383750",
    "end": "390890"
  },
  {
    "text": "So in particular,\nthe level set L3 isn't visited until\nwe're completely done with level set L2.",
    "start": "390890",
    "end": "397670"
  },
  {
    "text": "Today, we're going to define\nanother algorithm, which is called depth-first search,\nwhich doesn't do that,",
    "start": "397670",
    "end": "403220"
  },
  {
    "text": "but rather, starts with\nits first vertex and just starts walking all the way out\nuntil it can't do that anymore. And then it kind of backtracks.",
    "start": "403220",
    "end": "409232"
  },
  {
    "text": "That's one way to\nthink about it. And so somehow, in\nbreadth-first search, we're like, drawing\nconcentric circles.",
    "start": "409232",
    "end": "415319"
  },
  {
    "text": "In depth-first search,\nwe're doing the opposite. We're like, shooting\noutward until we reach the outer boundary,\nand then exploring",
    "start": "415320",
    "end": "420409"
  },
  {
    "text": "the graph that way. OK. And these are sort\nof the two extremes in terms of graph search kind\nof techniques that are typically",
    "start": "420410",
    "end": "428060"
  },
  {
    "text": "used under the basic building\nblocks for algorithms in graph theory. So in order to motivate and\nthink about depth-first search,",
    "start": "428060",
    "end": "434570"
  },
  {
    "text": "we're going to define\na second problem, which is closely related to shortest\npath, but not exactly the same.",
    "start": "434570",
    "end": "440070"
  },
  {
    "text": "And that's the\nreachability problem. So here I have the world's\nsimplest directed graph.",
    "start": "440070",
    "end": "446310"
  },
  {
    "text": "So the black things\nare the edges. And the circles are the\nnodes or the vertices.",
    "start": "446310",
    "end": "451940"
  },
  {
    "text": "And I've marked one\nspecial node in blue. And his name is the source node.",
    "start": "451940",
    "end": "457070"
  },
  {
    "text": "And now the question\nI want to ask is, what are all of the\nother nodes in my graph that I can reach by\nfollowing edges--",
    "start": "457070",
    "end": "464120"
  },
  {
    "text": "directed edges--\nstarting with the source? So obviously, I\ncan get to the node in the lower right, no problem.",
    "start": "464120",
    "end": "470680"
  },
  {
    "text": "And of course once\nI get there, I can traverse and\nedge upward to get to that second green vertex.",
    "start": "470680",
    "end": "477169"
  },
  {
    "text": "Notice that I was\nreally sneaky and evil, and I drew edges in this\ngraph that might make you think that the red\nnode is reachable.",
    "start": "477170",
    "end": "484010"
  },
  {
    "text": "The red one being\non the upper left. I'm realizing now that\nfor colorblind people, this isn't a great slide.",
    "start": "484010",
    "end": "489350"
  },
  {
    "text": "But of course,\nbecause all the edges from the red vertex on\nthe left here point out,",
    "start": "489350",
    "end": "494840"
  },
  {
    "text": "I can't actually reach it\nfrom the blue source node. So the reachability\nproblem is just",
    "start": "494840",
    "end": "500030"
  },
  {
    "text": "asking, which nodes can I\nreach from a given source? Pretty straightforward, I think.",
    "start": "500030",
    "end": "505500"
  },
  {
    "text": "Of course, there are\nmany ways to solve this. Right? In fact, one way we\ncould do it would",
    "start": "505500",
    "end": "510860"
  },
  {
    "text": "be to use our previous lecture. We could compute the shortest\npath distance from the source to all the other nodes.",
    "start": "510860",
    "end": "515992"
  },
  {
    "text": "And then what would the\nlength of the shortest path from the source to\nan unreachable node be? Any thoughts from\nour audience here?",
    "start": "515992",
    "end": "522890"
  },
  {
    "text": "Infinity. Thank you, Professor Demaine. Right. So in addition to this, of\ncourse, a totally reasonable",
    "start": "522890",
    "end": "531260"
  },
  {
    "text": "question, thinking back to\nour shortest path lecture, there are sort of two\nqueries we might make. Right?",
    "start": "531260",
    "end": "536350"
  },
  {
    "text": "One is just what is the\nlength of the shortest path? The other is like, what is\nthe actual shortest path from the source\nto a given vertex?",
    "start": "536350",
    "end": "543770"
  },
  {
    "text": "We can ask a very similar\nthing here, which is like, OK. You tell me that the green\nguy is reachable, but how?",
    "start": "543770",
    "end": "549440"
  },
  {
    "text": "Give me a path as evidence\nor a certificate, if you want to be fancy about it.",
    "start": "549440",
    "end": "554520"
  },
  {
    "text": "So in order to do that, just\nlike last time, remember, we defined a particular\ndata structure that",
    "start": "554520",
    "end": "559550"
  },
  {
    "text": "was the shortest path tree. We can do something\nvery similar here. In particular, this is like the\nextent of my PowerPoint skills",
    "start": "559550",
    "end": "566270"
  },
  {
    "text": "here. If I have a\nreachability problem,",
    "start": "566270",
    "end": "572270"
  },
  {
    "text": "I can additionally store-- I can decorate every\nnode in my graph with one other piece\nof information,",
    "start": "572270",
    "end": "577680"
  },
  {
    "text": "which is the previous\nnode along some path from my source to that thing.",
    "start": "577680",
    "end": "583770"
  },
  {
    "text": "Right? And just like last\ntime, if I want to get an actual path from the\nsource to w, what could I do?",
    "start": "583770",
    "end": "590430"
  },
  {
    "text": "I can start with w\nand then just keep following those\nparent relationships until I get back to the source.",
    "start": "590430",
    "end": "595660"
  },
  {
    "text": "Then if I flip the order\nof that list of vertices, I get a path from the source\nto the target that's valid.",
    "start": "595660",
    "end": "602590"
  },
  {
    "text": "So this object is\ncalled a path tree, just like we talked-- or a\nparent tree, rather. Just like we talked about\nin our last lecture,",
    "start": "602590",
    "end": "608963"
  },
  {
    "text": "there's no reason why this thing\nshould ever have a cycle in it. It's certainly a tree.",
    "start": "608963",
    "end": "614640"
  },
  {
    "text": "Right. So that's the basic\nreachability problem. And in addition to that, we\ncan compute this object P,",
    "start": "614640",
    "end": "620780"
  },
  {
    "text": "which is going to give me\nsort of information about how any given node was reachable. There's a slight difference\nbetween the parent",
    "start": "620780",
    "end": "626779"
  },
  {
    "text": "tree that I've defined here and\nthe shortest path tree, which I defined last time, which\nis, I'm not going to require",
    "start": "626780",
    "end": "633139"
  },
  {
    "text": "that the shortest path I\nget-- oh, man-- the path I get when I backtrack along\nmy tree P is the shortest path,",
    "start": "633140",
    "end": "640490"
  },
  {
    "text": "it's just a path because for\nthe reachability problem, I actually don't care.",
    "start": "640490",
    "end": "645560"
  },
  {
    "text": "Like, I could have a weird,\ncircuitous, crazy long path. And it still tells me\nthat a node is reachable.",
    "start": "645560",
    "end": "652260"
  },
  {
    "text": "Right. So that's our basic set\nup and our data structure. And now we can introduce a\nproblem to solve reachability.",
    "start": "652260",
    "end": "659042"
  },
  {
    "text": "Again, we already\nhave an algorithm for doing that, which is\nto compute shortest paths. And remember that our\nshortest path algorithm",
    "start": "659042",
    "end": "665389"
  },
  {
    "text": "from previous lecture\ntook linear time and the size of the input. It took v plus e time.",
    "start": "665390",
    "end": "671330"
  },
  {
    "text": "Now the question is, can\nwe do a little better? The answer, obviously, is\nyes, because I just asked it, and I gave you this problem.",
    "start": "671330",
    "end": "676880"
  },
  {
    "text": "OK. And here's a technique for doing\nthat, which unsurprisingly,",
    "start": "676880",
    "end": "682010"
  },
  {
    "text": "is a recursive algorithm. I'm going to swap my notes\nfor my handwritten notes.",
    "start": "682010",
    "end": "687830"
  },
  {
    "text": "And this algorithm is\ncalled depth-first search. And here's the basic strategy.",
    "start": "687830",
    "end": "693514"
  },
  {
    "text": "I'm going to choose\na source node and label that Node 1 here. I suppose it actually would\nhave made sense for me",
    "start": "693515",
    "end": "698900"
  },
  {
    "text": "to actually 0 index this. Maybe in the slides\nI'll fix it later. But in any event, I'm going\nto mark my source node.",
    "start": "698900",
    "end": "706910"
  },
  {
    "text": "And now I'm going to look at\nevery node, every edge coming out of that node, and I'm\ngoing to visit it recursively.",
    "start": "706910",
    "end": "713300"
  },
  {
    "text": "So that's our sort of for loop\ninside of this function visit. And then for each\nneighboring node,",
    "start": "713300",
    "end": "719240"
  },
  {
    "text": "if I haven't visited it\nbefore, in other words, I currently haven't\ngiven it a parent. That's our if statement here.",
    "start": "719240",
    "end": "725108"
  },
  {
    "text": "Then I'm going to say, well,\nnow they do have a parent. And that parent is me. And I'm going to recurse.",
    "start": "725108",
    "end": "730477"
  },
  {
    "text": "You guys see what this is doing? It's kind of crawling\noutward inside of our graph. So let's do the\nexample on the screen.",
    "start": "730477",
    "end": "737600"
  },
  {
    "text": "And I purposefully designed this\nexperiment-- or this example-- to look a little bit different\nfrom breadth-first search,",
    "start": "737600",
    "end": "743480"
  },
  {
    "text": "at least if you choose to\ndo the ordering that I did. So here's our graph. 1, 2, 5, 3, 4.",
    "start": "743480",
    "end": "754290"
  },
  {
    "text": "OK. And let's think about\nthe traversal order that the depth-first\nsearch is going to do. Right.",
    "start": "754290",
    "end": "759459"
  },
  {
    "text": "So here's our source.  And now what does the source do?",
    "start": "759460",
    "end": "764860"
  },
  {
    "text": "It rec-- so let's think\nabout our recursion tree. So we have the source\nall the way up in here.",
    "start": "764860",
    "end": "770360"
  },
  {
    "text": "And now he's going to\nstart calling the visit function recursively. So.",
    "start": "770360",
    "end": "776500"
  },
  {
    "text": "And I'll go ahead and\nnumber these the same as on the screen. ",
    "start": "776500",
    "end": "782699"
  },
  {
    "text": "Well, he has one\noutgoing neighbor, and it hasn't been visited yet. So of course, the very first\nrecursive call that I'll make",
    "start": "782700",
    "end": "788550"
  },
  {
    "text": "is to that neighbor 2. Now the neighbor\n2 also recurses.",
    "start": "788550",
    "end": "794393"
  },
  {
    "text": "Hopefully this kind\nof schematic picture makes some sense, what\nI'm trying to draw here. And well now, the 2 has\ntwo neighbors, a 3 and a 5.",
    "start": "794393",
    "end": "802540"
  },
  {
    "text": "So let's say that\nwe choose 3 first.  Well, the 3 now\nrecurses and calls 4.",
    "start": "802540",
    "end": "809277"
  },
  {
    "text": "And then the recursion\ntree is kind of done. So now it goes back out. And then finally,\nwell, now, the 3--",
    "start": "809277",
    "end": "816480"
  },
  {
    "text": "or, oh, boy. Yeah. The 2 looks at his next\nneighbor, which is the 5",
    "start": "816480",
    "end": "821940"
  },
  {
    "text": "and visits that recursively. Notice that this is not\nfollowing the level sets. Right?",
    "start": "821940",
    "end": "827460"
  },
  {
    "text": "The depth-first search\nalgorithm got all the way to the end of my tree\nin the recursive calls",
    "start": "827460",
    "end": "832740"
  },
  {
    "text": "and then kind of backed\nits way out to the 2 before calling the 5. These are not the\nsame technique. One goes all the way to the end\nand then kind of backtracks.",
    "start": "832740",
    "end": "841084"
  },
  {
    "text": "When I say backtrack,\nwhat I mean is the recursion is\nkind of unraveling. Whereas in breadth-first search,\nI visit everything in one level",
    "start": "841085",
    "end": "847470"
  },
  {
    "text": "set before I work my way out. That distinction make sense? OK.",
    "start": "847470",
    "end": "852590"
  },
  {
    "text": "So of course, we need to\nprove that this algorithm does something useful. So let's do that now. So in particular, we\nneed a correctness proof.",
    "start": "852590",
    "end": "861170"
  },
  {
    "text": "So our claim is\ngoing to be that--",
    "start": "861170",
    "end": "866990"
  },
  {
    "text": "let's see here-- the depth-first\nsearch algorithm visits all,",
    "start": "866990",
    "end": "876740"
  },
  {
    "text": "I guess reachable v,\nand that it correctly",
    "start": "876740",
    "end": "885740"
  },
  {
    "text": "sets the parent in the process. ",
    "start": "885740",
    "end": "896650"
  },
  {
    "text": "OK. So in order to prove\nthis, of course, as with almost everything\nin this course,",
    "start": "896650",
    "end": "902570"
  },
  {
    "text": "we're going to use induction. And in particular,\nwhat we're going to do is do induction on the\ndistance from the source.",
    "start": "902570",
    "end": "910095"
  },
  {
    "text": "So we're going to\nsay that, like, for all vertices in\ndistance k from the source,",
    "start": "910095",
    "end": "916509"
  },
  {
    "text": "this statement is true. And then we're going to\nprove this inductively on k. OK? So we want to do\ninduction on k, which",
    "start": "916510",
    "end": "926770"
  },
  {
    "text": "is the distance to\nthe source vertex.",
    "start": "926770",
    "end": "933020"
  },
  {
    "text": "So as with all of\nour inductive proofs, we have to do our base case\nand then our inductive step.",
    "start": "933020",
    "end": "938569"
  },
  {
    "text": "So in the base case, k equals 0. This is a hella\neasy case because,",
    "start": "938570",
    "end": "944140"
  },
  {
    "text": "of course, what\nis the thing that is distance 0 from the source?",
    "start": "944140",
    "end": "949970"
  },
  {
    "text": "It's the source! Yeah. And take a look at our\nstrategy all the way at the top of the slide.",
    "start": "949970",
    "end": "955010"
  },
  {
    "text": "We explicitly set the correct\nparent for the source, and in some sense, visit it\nbecause the very first thing",
    "start": "955010",
    "end": "960680"
  },
  {
    "text": "we do is call visit of s. So there's kind of\nnothing to say here. Yeah? Or there's plenty to say if\nyou write it on your homework.",
    "start": "960680",
    "end": "966470"
  },
  {
    "text": "But your lazy\ninstructor is going to write a check mark here. OK.",
    "start": "966470",
    "end": "972630"
  },
  {
    "text": "So now we have to do\nour inductive step. ",
    "start": "972630",
    "end": "980350"
  },
  {
    "text": "So what does that mean? We're going to assume\nthat our statement is true for all nodes\nwithin a distance k.",
    "start": "980350",
    "end": "987203"
  },
  {
    "text": "And then we're going to\nprove that the same thing is true for all nodes within\na distance k plus 1.",
    "start": "987203",
    "end": "992220"
  },
  {
    "text": "OK. So let's do that. Let's consider a vertex v\nthat's distance k plus 1 away.",
    "start": "992220",
    "end": "1003390"
  },
  {
    "text": "So in other words, the\ndistance from the source to v is equal to k plus 1.",
    "start": "1003390",
    "end": "1008750"
  },
  {
    "text": "And what's our goal? Our goal is to show that the\nparent of v is set correctly. Yeah? ",
    "start": "1008750",
    "end": "1015740"
  },
  {
    "text": "What was that? AUDIENCE: [INAUDIBLE]. JUSTIN SOLOMON: Oh, sorry. I forgot that the distances\nin this class are in order.",
    "start": "1015740",
    "end": "1022339"
  },
  {
    "text": "Yeah. That's absolutely right. So it should be the\ndistance from s to v. Yeah. Sorry.",
    "start": "1022340",
    "end": "1027574"
  },
  {
    "text": "I'm really not used to\nthinking about directed graphs. But that's a good fix.",
    "start": "1027575",
    "end": "1032730"
  },
  {
    "text": "OK. So now what can we do? Well, there's this\nnumber is distance here.",
    "start": "1032730",
    "end": "1039369"
  },
  {
    "text": "So in particular, the\nshortest path from s to v. So remember our argument\nlast time that essentially,",
    "start": "1039369",
    "end": "1045602"
  },
  {
    "text": "when we look at shortest path\nand we kind of truncate by 1, it's still shortest path? That property doesn't\nmatter so much here.",
    "start": "1045602",
    "end": "1051630"
  },
  {
    "text": "But at least we\nknow that there's another vertex on the path,\nwhich is 1 distance from one",
    "start": "1051630",
    "end": "1057090"
  },
  {
    "text": "less away. So let's take u, which\nis also a vertex,",
    "start": "1057090",
    "end": "1065910"
  },
  {
    "text": "to be the previous node on\nthe shortest path from s",
    "start": "1065910",
    "end": "1074820"
  },
  {
    "text": "to v. Right. And so in particular, we know\nthat the distance from s to u",
    "start": "1074820",
    "end": "1081790"
  },
  {
    "text": "is equal to k. And conveniently, of course,\nby our inductive hypothesis here, we know that our\nproperty is true for this guy.",
    "start": "1081790",
    "end": "1089780"
  },
  {
    "text": "OK. So now our algorithm,\nwhat do we know? Well, because our\nproperty is true,",
    "start": "1089780",
    "end": "1095840"
  },
  {
    "text": "the visit function at\nsome point in its life is called on this vertex u. That's sort of what\nour induction assumes.",
    "start": "1095840",
    "end": "1102650"
  },
  {
    "text": "So we have two cases. Right. So when we visit u, we know\nthat when we call this visit",
    "start": "1102650",
    "end": "1115519"
  },
  {
    "text": "function, well, remember that\nv kind of by definition is in Adj+ of u.",
    "start": "1115520",
    "end": "1121399"
  },
  {
    "text": "Right. So in particular, DGS\nis going to consider v",
    "start": "1121400",
    "end": "1131450"
  },
  {
    "text": "when it gets called. OK. And now there's two cases.",
    "start": "1131450",
    "end": "1136710"
  },
  {
    "text": "Right? So either when this happens,\nP of v does not equal None.",
    "start": "1136710",
    "end": "1147400"
  },
  {
    "text": "Right. Well, what does that mean? Well, it means that we already\nkind of found a suitable parent for v. And we're in good shape.",
    "start": "1147400",
    "end": "1155960"
  },
  {
    "text": "Otherwise, p of v\ndoes equal None.",
    "start": "1155960",
    "end": "1161720"
  },
  {
    "text": "Well, in this case, the\nvery next line of code correctly sets the parent. And we're all set.",
    "start": "1161720",
    "end": "1167030"
  },
  {
    "text": "So in both of these two cases,\nwe show that the parent of u was set correctly either\nby that line of code",
    "start": "1167030",
    "end": "1173690"
  },
  {
    "text": "right here or just previously. And so in either case,\nour induction is done.",
    "start": "1173690",
    "end": "1180090"
  },
  {
    "text": "All right. I guess given the\nfeedback I received from our previous lecture, we\nnow can end our LaTeX suitably.",
    "start": "1180090",
    "end": "1187919"
  },
  {
    "text": "OK. So what did we just show? We showed that the depth-first\nsearch algorithm can dig around",
    "start": "1187920",
    "end": "1192990"
  },
  {
    "text": "in a graph and tell me\nall of the things that are searchable, or rather, are\nreachable from a given source,",
    "start": "1192990",
    "end": "1198900"
  },
  {
    "text": "just basically by calling\nvisit on that source and then expanding\noutward recursively.",
    "start": "1198900",
    "end": "1204010"
  },
  {
    "text": "OK. So I think this is\ncertainly straightforward from an intuitive perspective. It's easy to get\nlost when you write",
    "start": "1204010",
    "end": "1210290"
  },
  {
    "text": "these kind of formal\ninduction proofs because they always feel\na tiny bit like tautology. So you should go home and\nkind of convince yourself",
    "start": "1210290",
    "end": "1217005"
  },
  {
    "text": "that it's not. OK. So of course, what do\nwe do in this class? We always follow the same\nkind of boring pattern.",
    "start": "1217005",
    "end": "1222470"
  },
  {
    "text": "The first thing we do,\ndefine an algorithm. Second thing we do, make sure\nthat it's the right algorithm. What's the third\nthing we need to do?",
    "start": "1222470",
    "end": "1228702"
  },
  {
    "text": "AUDIENCE: Analyze it. JUSTIN SOLOMON: Analyze it. That's right. In particular, make sure that\nit finishes before the heat",
    "start": "1228702",
    "end": "1234110"
  },
  {
    "text": "death of the universe. And indeed, depth-first\nresearch doesn't really take all that long,\nwhich is a good thing.",
    "start": "1234110",
    "end": "1241080"
  },
  {
    "text": "So let's think about this a bit. So what's going to\nend up happening",
    "start": "1241080",
    "end": "1246159"
  },
  {
    "text": "in depth-first\nsearch, well, we're going to visit every vertex\nat most once, kind of",
    "start": "1246160",
    "end": "1252250"
  },
  {
    "text": "by definition here. And in each case, we're going\nto just visit its neighboring edges.",
    "start": "1252250",
    "end": "1258070"
  },
  {
    "text": "Can we ever traverse an\nedge more than one time? No. Right. Because the visit\nfunction only ever gets",
    "start": "1258070",
    "end": "1263910"
  },
  {
    "text": "called one time per vertex. And our edges are directed. Right. So kind think about the from\nof every edge, the from vertex",
    "start": "1263910",
    "end": "1272220"
  },
  {
    "text": "is only ever visited one time. And hence, every edge is\nonly visited one time.",
    "start": "1272220",
    "end": "1277289"
  },
  {
    "text": "Do we ever visit-- ah, yes. AUDIENCE: Does DFS work\nfor an undirected graph? JUSTIN SOLOMON: An\nundirected graph.",
    "start": "1277290",
    "end": "1282530"
  },
  {
    "text": "Absolutely. So there's sort of different\nways to think about it. One is to think of\nan undirected graph like a directed\ngraph with two edges",
    "start": "1282530",
    "end": "1289085"
  },
  {
    "text": "pointed either\nway, which I think is in this class how we\nactually kind of notated it in the previous lecture. ",
    "start": "1289085",
    "end": "1296100"
  },
  {
    "text": "Yeah. Actually, that's probably a\nreasonable way to reduce it. So let's stick with that. Right.",
    "start": "1296100",
    "end": "1301790"
  },
  {
    "text": "Now, does DFS ever\nvisit a vertex that is not reachable\nfrom the source? ",
    "start": "1301790",
    "end": "1308720"
  },
  {
    "text": "Well, the answer is no\nbecause all I ever do is recursively call\non my neighbors. And so kind of by definition,\nif I'm not reachable,",
    "start": "1308720",
    "end": "1315470"
  },
  {
    "text": "DFS will never see it. So if I think about\nmy runtime carefully, it's not quite the same\nas breadth-first search.",
    "start": "1315470",
    "end": "1321980"
  },
  {
    "text": "Remember that breadth-first\nsearch took v plus e time. In depth-first search, it\njust takes order e time",
    "start": "1321980",
    "end": "1329140"
  },
  {
    "text": "because I'm expanding outward\nfrom the source vertex, hitting every edge\nadjacent to every vertex",
    "start": "1329140",
    "end": "1334930"
  },
  {
    "text": "that I've seen so far. But I never reach a\nvertex that I haven't-- that isn't reachable.",
    "start": "1334930",
    "end": "1340270"
  },
  {
    "text": "Right? And so because this only ever\ntouches every edge one time, we're in good shape.",
    "start": "1340270",
    "end": "1345837"
  },
  {
    "text": "And I see a question here. Yeah. AUDIENCE: Does\nBFS reach vertices that are not reachable?",
    "start": "1345837",
    "end": "1351550"
  },
  {
    "text": "JUSTIN SOLOMON: Does\nBFS reach vertices that are not reachable? I guess not, now\nthat you mention it.",
    "start": "1351550",
    "end": "1358090"
  },
  {
    "text": "But at least in my\nboring proof of order v time last time, our\nvery first step of BFS,",
    "start": "1358090",
    "end": "1363900"
  },
  {
    "text": "reserve space\nproportional to v, which is enough to already make\nthat runtime correct.",
    "start": "1363900",
    "end": "1369777"
  },
  {
    "text": "Good question. Yeah. So I guess the way that\nwe've talked about it where you can stretch one little\nset after a time, if you think of that as\nreachability, then no.",
    "start": "1369777",
    "end": "1376639"
  },
  {
    "text": "It doesn't reach\nit in the for loop. But just by construction,\nwhen we started we already took the time that\nwe're talking about here.",
    "start": "1376640",
    "end": "1384267"
  },
  {
    "text": "So notice these run times\naren't exactly the same. So for example, if my\ngraph has no edges,",
    "start": "1384267",
    "end": "1389429"
  },
  {
    "text": "BFS still is going to\ntake time because it still has to take order\nv time, at least",
    "start": "1389430",
    "end": "1397068"
  },
  {
    "text": "in the sort of brain-dead\nway that we've implemented it last time. Obviously, in that\ncase, we could probably do something better.",
    "start": "1397068",
    "end": "1403020"
  },
  {
    "text": "Whereas the way that we've\ndefined the DFS algorithm, it only takes edge time.",
    "start": "1403020",
    "end": "1408510"
  },
  {
    "text": "I see confusion on\nmy instructor's face. No? OK. Good.",
    "start": "1408510",
    "end": "1413538"
  },
  {
    "text": "The one thing to\nnotice is that these are algorithms for slightly\ndifferent tasks in some sense. The way that we wrote down\nbreadth-first search last time,",
    "start": "1413538",
    "end": "1420660"
  },
  {
    "text": "conveniently, it gives\nus the shortest path. There are breadth-first search\nalgorithms that doesn't. I think in this class we kind of\nthink of breadth-first search--",
    "start": "1420660",
    "end": "1428610"
  },
  {
    "text": "we motivate it in terms of\nthe shortest path problem. But it's just kind of a\nstrategy of working outwards from a vertex.",
    "start": "1428610",
    "end": "1435900"
  },
  {
    "text": "Whereas here, the way\nwe've written down depth-first search, there's no\nreason why the path that we get should be the shortest.",
    "start": "1435900",
    "end": "1441330"
  },
  {
    "text": "Right? So to think of a\nreally extreme example, let's say that I\nhave a cycle graph.",
    "start": "1441330",
    "end": "1447029"
  },
  {
    "text": " So I get a big loop like this.",
    "start": "1447030",
    "end": "1454150"
  },
  {
    "text": "Let's say that I do\ndepth-first search starting from this vertex. Well, what will happen?",
    "start": "1454150",
    "end": "1459930"
  },
  {
    "text": "Well, this guy will call\nits neighbor recursively, who will then call its\nneighbor recursively,",
    "start": "1459930",
    "end": "1465690"
  },
  {
    "text": "who will then call his neighbor\nrecursively, and so on. So of course, when I do\ndepth-first search, when",
    "start": "1465690",
    "end": "1472440"
  },
  {
    "text": "I get to this vertex,\nthere's a chain of 1, 2, 3, 4 vertices behind it.",
    "start": "1472440",
    "end": "1477450"
  },
  {
    "text": "Is that the shortest path from\nthe source to the target here? Well, clearly not. Right?",
    "start": "1477450",
    "end": "1482610"
  },
  {
    "text": "I could have\ntraversed that edge. I just chose not to. OK.",
    "start": "1482610",
    "end": "1487798"
  },
  {
    "text": "So that's the depth-first\nsearch algorithm. It's just essentially\na recursive strategy where I traverse\nall my neighbors,",
    "start": "1487798",
    "end": "1494570"
  },
  {
    "text": "and each of my neighbors\ntraverses their neighbors, and so on. OK. So why might we want\nto use this algorithm?",
    "start": "1494570",
    "end": "1501162"
  },
  {
    "text": "Well, we've already solved\nthe reachability problem. So let's solve a few more things\nusing the same basic strategy",
    "start": "1501162",
    "end": "1507440"
  },
  {
    "text": "here. So there's some notions\nthat we've sort of-- actually, in some sense, already\nused in the lecture here.",
    "start": "1507440",
    "end": "1514470"
  },
  {
    "text": "But we might as\nwell call them out for what they are, which is\nthis idea of connectivity. So a graph is\nconnected if there's",
    "start": "1514470",
    "end": "1521429"
  },
  {
    "text": "a path getting from every\nvertex to every other vertex. Right. Now connectivity\nin a directed graph",
    "start": "1521430",
    "end": "1528060"
  },
  {
    "text": "is kind of a weird object. Like, for instance,\nthink of a directed graph with just two edges.",
    "start": "1528060",
    "end": "1533790"
  },
  {
    "text": "And one edge goes from u to\nv. Then I can get from v to u, but not vise versa.",
    "start": "1533790",
    "end": "1539789"
  },
  {
    "text": "That's kind of a weird notion. So here in 6006 we'll mostly\nworry about connectivity only",
    "start": "1539790",
    "end": "1546480"
  },
  {
    "text": "for undirected graphs\nbecause they're-- the vertices just basically come\nin like, big connected clumps.",
    "start": "1546480",
    "end": "1552210"
  },
  {
    "text": "Or the more technical term\nfor a big connected clump is a connected component. Yeah? So let's see an example.",
    "start": "1552210",
    "end": "1558740"
  },
  {
    "text": "So let's say that I\nhave a graph, which has an edge and then a triangle.",
    "start": "1558740",
    "end": "1568120"
  },
  {
    "text": "This is one graph. Do you see that? There's a collection\nof vertices, and there's a\ncollection of edges.",
    "start": "1568120",
    "end": "1573730"
  },
  {
    "text": "But it has two\nconnected components-- the guy on the right\nand the guy on the left,",
    "start": "1573730",
    "end": "1579559"
  },
  {
    "text": "meaning that each\nvertex here is reachable from every other vertex here. Each vertex here is reachable\nfrom every vertex here.",
    "start": "1579560",
    "end": "1585790"
  },
  {
    "text": "But there's no edge that\ngoes from the triangle to the line segment. Yeah? And so in the connected\ncomponents problem,",
    "start": "1585790",
    "end": "1592730"
  },
  {
    "text": "we're given a graph\nlike this guy. And initially, we\ndon't, you know-- OK. When I draw it like\nthis, it's pretty clear",
    "start": "1592730",
    "end": "1599372"
  },
  {
    "text": "that my graph has two\nconnected components. Maybe my graph-embedding\nalgorithm failed",
    "start": "1599372",
    "end": "1605080"
  },
  {
    "text": "and it drew an edge like that. Well, then maybe-- I don't know-- it's still\npretty obvious that there's two connected components.",
    "start": "1605080",
    "end": "1610772"
  },
  {
    "text": "But you can imagine\na universe where you don't know that a priori. And the problem\nyou're trying to solve",
    "start": "1610772",
    "end": "1616150"
  },
  {
    "text": "is just to enumerate all\nthese clumps of vertices that are reachable from one\nanother in an undirected graph.",
    "start": "1616150",
    "end": "1622270"
  },
  {
    "text": "And conveniently, we can\nuse depth-first search to solve this problem\npretty easily.",
    "start": "1622270",
    "end": "1627789"
  },
  {
    "text": "Right? So how could we do it? Well, in some sense how can we\nfind one connected component?",
    "start": "1627790",
    "end": "1634750"
  },
  {
    "text": "So let's say that I just\nchoose a vertex in my graph. Well, what do I know\nabout everything",
    "start": "1634750",
    "end": "1640380"
  },
  {
    "text": "in its connected component? Well, it's reachable\nfrom that vertex. Remember, we just solved the\nreachability problem, which",
    "start": "1640380",
    "end": "1647380"
  },
  {
    "text": "says, if I have a\nvertex, I can now tell you all the\nother vertices that are reachable from this guy.",
    "start": "1647380",
    "end": "1653539"
  },
  {
    "text": "So I could call DFS on, well,\nany vertex of this cycle here. Call the reachability thing.",
    "start": "1653540",
    "end": "1659440"
  },
  {
    "text": "And I know that for every vertex\nthere's one of two things. Either the vertex has a\nparent in that object P,",
    "start": "1659440",
    "end": "1666730"
  },
  {
    "text": "or it's the source. So I can very easily find\nthe connected component corresponding to that vertex.",
    "start": "1666730",
    "end": "1671980"
  },
  {
    "text": "Does that makes sense? Have I found all the\nconnected components? No. I found one.",
    "start": "1671980",
    "end": "1677630"
  },
  {
    "text": "I found the one corresponding\nto the arbitrary vertex that I just chose. So how could I fix this?",
    "start": "1677630",
    "end": "1684529"
  },
  {
    "text": "Well, it's super simple. I could put a for loop on\nthe outside, which just loops over all the vertices, maybe.",
    "start": "1684530",
    "end": "1690390"
  },
  {
    "text": "And if that vertex is not part\nof a connected component yet, then I need to make a new one.",
    "start": "1690390",
    "end": "1695500"
  },
  {
    "text": "So then I call DFS\non that vertex. I collect all the\nvertices that I got. And I iterate. So this is the algorithm\nthat in this class",
    "start": "1695500",
    "end": "1702780"
  },
  {
    "text": "we're going to call full DFS. By the way, you could\ndo the same thing with full breadth-first search.",
    "start": "1702780",
    "end": "1707882"
  },
  {
    "text": "That's perfectly fine. Just kind of by analogy here. Right. So what is full D--",
    "start": "1707882",
    "end": "1716340"
  },
  {
    "text": "oh, this chalk is easier. Well, I'm going to iterate\nover all my vertices.",
    "start": "1716340",
    "end": "1722960"
  },
  {
    "text": "Where I stands for for loop. Of-- right.",
    "start": "1722960",
    "end": "1728510"
  },
  {
    "text": "So if v is unvisited,\nthen I'm going",
    "start": "1728510",
    "end": "1735650"
  },
  {
    "text": "to do to DFS starting at v. I\nguess we used visit to refer",
    "start": "1735650",
    "end": "1741020"
  },
  {
    "text": "to this in the previous slide. And that's going\nto kind of flood fill that whole\nconnected component.",
    "start": "1741020",
    "end": "1746159"
  },
  {
    "text": "And then I can collect\nthat connected component and continue. We have to be a little bit\ncareful because, of course,",
    "start": "1746160",
    "end": "1751320"
  },
  {
    "text": "we don't want like,\nchecking things-- something to be visited to\nsomehow take a bunch of time and make my algorithm\nslower than it needs to be.",
    "start": "1751320",
    "end": "1757948"
  },
  {
    "text": "But of course, we have\na set data structure that we know can do that\nand order one time at least in expectation.",
    "start": "1757948",
    "end": "1765240"
  },
  {
    "text": "OK. So this is the\nfull DFS algorithm. It's really simple.",
    "start": "1765240",
    "end": "1770510"
  },
  {
    "text": "Of DFS because I called\nDGS on every vertex. And it's full because I\nlooped over all the vertices.",
    "start": "1770510",
    "end": "1776790"
  },
  {
    "text": "Right. And so if we think about it, how\nmuch time does this algorithm take?",
    "start": "1776790",
    "end": "1781870"
  },
  {
    "text": "It's little bit sneaky\nbecause somehow I have a for loop over\nall the vertices.",
    "start": "1781870",
    "end": "1787027"
  },
  {
    "text": "Then I could imagine a\nuniverse where I get, like, vertices times some other number\nbecause there's a for loop, and then there's\nsomething inside of it.",
    "start": "1787027",
    "end": "1793610"
  },
  {
    "text": "I think that's how\nwe're used to thinking about runtime of for loops. But in this case,\nthat actually doesn't",
    "start": "1793610",
    "end": "1799970"
  },
  {
    "text": "happen because there's never\na case where an edge gets traversed more than one time. Because if I'm in one connected\ncomponent, then by definition,",
    "start": "1799970",
    "end": "1807320"
  },
  {
    "text": "I can't be in another\nconnected component. Right? And so what happens\nis, in some sense,",
    "start": "1807320",
    "end": "1812510"
  },
  {
    "text": "this innocent\nlooking call to DFS-- I suppose if you were like\na LISP or a programmer, you somehow wouldn't like this.",
    "start": "1812510",
    "end": "1818662"
  },
  {
    "text": "It has a side effect,\nwhich is that I marked all the vertices in that\nconnected component as \"don't touch me again.\"",
    "start": "1818662",
    "end": "1824480"
  },
  {
    "text": "Right. And so implicitly I kind of\nremoved edges in this process. So if you think\nthrough it carefully,",
    "start": "1824480",
    "end": "1830840"
  },
  {
    "text": "the runtime of this\nfull DFS algorithm is v plus e time\nbecause every edge is",
    "start": "1830840",
    "end": "1837710"
  },
  {
    "text": "touched no more than one time. Kind of amortized over all the\ndifferent calls to DGS here.",
    "start": "1837710",
    "end": "1844343"
  },
  {
    "text": "And there's this for\nloop over vertices. So there's clearly an\norder v that you need here. Does that argument make sense?",
    "start": "1844343",
    "end": "1851240"
  },
  {
    "text": "So again, we call that linear\nin the size of the input. I'm going to say it as many\ntimes to get it in my own head",
    "start": "1851240",
    "end": "1857270"
  },
  {
    "text": "correctly. OK. Right. So this is the basic problem. This comes up all\nthe time, by the way.",
    "start": "1857270",
    "end": "1863810"
  },
  {
    "text": "Like, it seems like somehow\na totally brain dead weird algorithm. Like, somehow, why would\nyou want an algorithm that",
    "start": "1863810",
    "end": "1869990"
  },
  {
    "text": "finds connected components. Like, why would you even have\na graph that's disconnected or something? But of course, that\ncan happen a lot.",
    "start": "1869990",
    "end": "1875538"
  },
  {
    "text": "So for instance, maybe you\nwork at a social media company, and people have friends. But like, Eric\nand I are friends.",
    "start": "1875538",
    "end": "1881793"
  },
  {
    "text": "And we're not friends\nwith anybody else. We have a-- there's like,\na blood oath kind of thing. Then that might be not so\neasy to find in the graph",
    "start": "1881793",
    "end": "1890029"
  },
  {
    "text": "because, of course, we're just\ntwo among a sea of students in this classroom,\nall of which have",
    "start": "1890030",
    "end": "1895970"
  },
  {
    "text": "different interconnections\nthat are just enumerated based on the list of edges. And so even though\nlike, pictorially, it's",
    "start": "1895970",
    "end": "1903050"
  },
  {
    "text": "kind of hard to draw a\nconnecting component algorithm in a way that doesn't\nmake it sound kind",
    "start": "1903050",
    "end": "1908660"
  },
  {
    "text": "of like a useless\ntechnique from the start, because it's very clear there\nare two connected components there.",
    "start": "1908660",
    "end": "1913970"
  },
  {
    "text": "Of course, we still have\nto be able to write code to solve this sort of thing. OK.",
    "start": "1913970",
    "end": "1919400"
  },
  {
    "text": "So for once, I think I'm almost\non time in lecture today. So we have one\nadditional application",
    "start": "1919400",
    "end": "1927020"
  },
  {
    "text": "of depth-first search\nin our class today, which is sort of on the\nopposite end of the spectrum.",
    "start": "1927020",
    "end": "1934360"
  },
  {
    "text": "So we just talked about\ngraphs that are undirected and thinking about cycles.",
    "start": "1934360",
    "end": "1940190"
  },
  {
    "text": "Now, on the opposite end\nwe might think of a DAG. So a DAG is a Directed\nAcyclic Graph.",
    "start": "1940190",
    "end": "1948690"
  },
  {
    "text": "Can anyone think of a\nspecial case of a DAG? I suppose I should\ndefine it first. And then we'll come back to\nthat question, which means",
    "start": "1948690",
    "end": "1954913"
  },
  {
    "text": "exactly what it sounds like. So it's a graph that\nhas directed edges now and doesn't have\nany cycles in it.",
    "start": "1954913",
    "end": "1960550"
  },
  {
    "text": "So actually, the\ngraph I gave you all the way at the beginning\nof lecture I think secretly",
    "start": "1960550",
    "end": "1966720"
  },
  {
    "text": "was an example of one of these. So let's say that I\nhave directed edges.",
    "start": "1966720",
    "end": "1971996"
  },
  {
    "text": "Maybe if I make the\nhead a triangle, it's a little easier to see. ",
    "start": "1971996",
    "end": "1977510"
  },
  {
    "text": "I'm not so sure. In any event, so I'm going to\nhave an edge up and an edge to the right, and\nsimilarly, an edge down",
    "start": "1977510",
    "end": "1983620"
  },
  {
    "text": "and an edge to the right.  This graph looks like a cycle.",
    "start": "1983620",
    "end": "1989929"
  },
  {
    "text": "But it's not because the only\ndirection that I can move is from the left-hand side\nto the right-hand side.",
    "start": "1989930",
    "end": "1996120"
  },
  {
    "text": "So this is a directed graph. And it doesn't\ncontain any cycles, meaning there's no\npath that it can take from a vertex that\ngets back to itself",
    "start": "1996120",
    "end": "2003399"
  },
  {
    "text": "along the directed edges. OK. And DAGs show up all the time. Now that I've defined\nwhat a DAG is,",
    "start": "2003400",
    "end": "2008950"
  },
  {
    "text": "can somebody give me\nan example of a DAG that we've already seen in 6006?",
    "start": "2008950",
    "end": "2015862"
  },
  {
    "text": "AUDIENCE: A tree. JUSTIN SOLOMON: A tree. At least if we orient all all\nthe edges kind of pointing downward in the tree. Yeah.",
    "start": "2015862",
    "end": "2022210"
  },
  {
    "text": "Otherwise, it gets\nkind of debatable over whether it's a DAG or not. If there's no direction\nto the edges, then somehow",
    "start": "2022210",
    "end": "2028929"
  },
  {
    "text": "the definition\njust doesn't apply. OK. So in processing\ndirected acyclic graphs,",
    "start": "2028930",
    "end": "2036587"
  },
  {
    "text": "there's a really\nuseful thing that you can do that's going to show\nup in this class apparently quite a bit, which is\nkind of interesting to me,",
    "start": "2036587",
    "end": "2042620"
  },
  {
    "text": "I'm curious to see\nwhat that looks like, which is to compute a\ntopological order on the graph.",
    "start": "2042620",
    "end": "2049637"
  },
  {
    "text": "We're at topologies here. So as a geometry professor in\nmy day job, I get all excited. But in this case,\na topological order",
    "start": "2049637",
    "end": "2056230"
  },
  {
    "text": "is a fairly\nstraightforward thing. Actually, it's\ndefined on the screen, and I have bad\nhandwriting anyway.",
    "start": "2056230",
    "end": "2061277"
  },
  {
    "text": "So let's just stick with that. So topological ordering. So we think of f as a function\nthat assigns maybe every node",
    "start": "2061277",
    "end": "2067750"
  },
  {
    "text": "an index in array. I guess I shouldn't use\nthe word array here. But just like an\nindex, an ordering. So like, this is\nthe first vertex.",
    "start": "2067750",
    "end": "2074549"
  },
  {
    "text": "And this is the second vertex. And so on. Then a topological\norder is one that",
    "start": "2074550",
    "end": "2079570"
  },
  {
    "text": "has the properties\nshown here, which is that if I have a directed\nedge from u to v, then f of u",
    "start": "2079570",
    "end": "2086770"
  },
  {
    "text": "is less than f of v.\nSo in other words, if I look at the ordering that\nI get on my topological order,",
    "start": "2086770",
    "end": "2094719"
  },
  {
    "text": "u has to appear before v. Yeah? Let's look at our example again. So let's give our nodes names.",
    "start": "2094719",
    "end": "2101820"
  },
  {
    "text": "So here's A, B, C,\nD. Well, what clearly",
    "start": "2101820",
    "end": "2108470"
  },
  {
    "text": "has to be the first node\nin my topological order? A. Right. It goes all the way\nto the left-hand side.",
    "start": "2108470",
    "end": "2113990"
  },
  {
    "text": "Yeah. Well, after that it's\na bit of a toss-up. What do we know? We know that B and C have to\nappear before D. So maybe just",
    "start": "2113990",
    "end": "2122620"
  },
  {
    "text": "to be annoying, I do A, C,\nB-- that's a B-- and then D.",
    "start": "2122620",
    "end": "2128160"
  },
  {
    "text": "So it's a topological order. Notice that things\nthat are on the left appear in my graph before\nthings that are on the right,",
    "start": "2128160",
    "end": "2134370"
  },
  {
    "text": "where the word\n\"before\" here means that there's an edge that\npoints from one to the other.",
    "start": "2134370",
    "end": "2139530"
  },
  {
    "text": "OK. By the way, are topological\norderings unique?",
    "start": "2139530",
    "end": "2145110"
  },
  {
    "text": "No. So if we look at our\ngraph example here, ABCD is also a\ntopological order.",
    "start": "2145110",
    "end": "2153610"
  },
  {
    "text": "And what that means is\nsomehow very liberating. It means that when we\ndesign an algorithm for finding a topological\norder, so there's some design",
    "start": "2153610",
    "end": "2160480"
  },
  {
    "text": "decisions that we can make. And we just have to\nfind one among many. But in any event, we're going\nto define a slightly different",
    "start": "2160480",
    "end": "2169000"
  },
  {
    "text": "notion of order. And then we're going to\nshow that they're closely linked to each other. And that is the finishing order.",
    "start": "2169000",
    "end": "2175097"
  },
  {
    "text": "So in the finishing\norder, we're going to call full DFS on our graph. Remember, that means we\niterate over all our nodes.",
    "start": "2175097",
    "end": "2181310"
  },
  {
    "text": "And if we haven't seen that\nnode yet, we call DFS on it. And now we're going to\nmake an order in which",
    "start": "2181310",
    "end": "2188410"
  },
  {
    "text": "as soon as the call to a\nnode in that visit function is complete,\nmeaning I've already",
    "start": "2188410",
    "end": "2193600"
  },
  {
    "text": "iterated over all\nmy neighbors, then I add my node to the ordering.",
    "start": "2193600",
    "end": "2199412"
  },
  {
    "text": "That make sense? It's like a little\nbit backward from what we're used to thinking about. So it's the order\nin which full DFS",
    "start": "2199413",
    "end": "2204960"
  },
  {
    "text": "finishes visiting each vertex. Yeah? And now here's the\nclaim, is that if we",
    "start": "2204960",
    "end": "2213240"
  },
  {
    "text": "have a reverse\nfinishing order, meaning that we take the finishing order\nand then we flip it backward. That's exactly going to give\nus a topological ordering",
    "start": "2213240",
    "end": "2221220"
  },
  {
    "text": "of the vertices in our graph. Right. So let's do that really quickly.",
    "start": "2221220",
    "end": "2227922"
  },
  {
    "text": "So in other words,\nour claim here--  I think, yeah, let's\nsee-- is that if I",
    "start": "2227922",
    "end": "2235030"
  },
  {
    "text": "have a directed graph.  So G is a DAG.",
    "start": "2235030",
    "end": "2242670"
  },
  {
    "text": "Then let's see here.",
    "start": "2242670",
    "end": "2247740"
  },
  {
    "text": "Then the-- oops. My notes are backwards. So I should switch to my--",
    "start": "2247740",
    "end": "2252945"
  },
  {
    "text": "Jason's notes, which\nof course, are correct. ",
    "start": "2252945",
    "end": "2261220"
  },
  {
    "text": "Right. So if I have a\ngraph that's a DAG, then the reverse of\nthe finishing order",
    "start": "2261220",
    "end": "2274790"
  },
  {
    "text": "is a topological order. ",
    "start": "2274790",
    "end": "2281920"
  },
  {
    "text": "By the way, we're not going to\nprove the converse that if I have a topological order,\nthat somehow that thing is",
    "start": "2281920",
    "end": "2288190"
  },
  {
    "text": "the reverse of DFS, at least\nthe way that maybe I coded it.",
    "start": "2288190",
    "end": "2293348"
  },
  {
    "text": "There's a slightly different\nstatement, which is, does there exist a DFS\nthat has that ordering?",
    "start": "2293348",
    "end": "2298750"
  },
  {
    "text": "But that's one that we'll\nworry about another time around piazza or whatever. OK.",
    "start": "2298750",
    "end": "2303760"
  },
  {
    "text": "So let's see here. So we need to prove this thing.",
    "start": "2303760",
    "end": "2308950"
  },
  {
    "text": "So what are we going to do? Well, what do we need to\ncheck is the topological order is that if I look at\nany edge of my graph,",
    "start": "2308950",
    "end": "2314730"
  },
  {
    "text": "it obeys the relationship that\nI have on the screen here. So in particularly,\nwe're going to take",
    "start": "2314730",
    "end": "2320490"
  },
  {
    "text": "uv inside of my set of edges. And then what I\nneed is that u is",
    "start": "2320490",
    "end": "2331070"
  },
  {
    "text": "ordered before v using the\nreverse of the finishing order",
    "start": "2331070",
    "end": "2339140"
  },
  {
    "text": "that we've defined here. OK. So let's think back to our\ncall to the DFS algorithm,",
    "start": "2339140",
    "end": "2346790"
  },
  {
    "text": "where call this visit function. Right. So we have two cases. Either u is visited\nbefore v. Or it ain't.",
    "start": "2346790",
    "end": "2355430"
  },
  {
    "text": "Yeah. So let's do those two cases. ",
    "start": "2355430",
    "end": "2362080"
  },
  {
    "text": "So case Number 1 is, u\nis visited before v. OK.",
    "start": "2362080",
    "end": "2373520"
  },
  {
    "start": "2373520",
    "end": "2380780"
  },
  {
    "text": "All right. So what does that mean? Well, remember that\nthere's an edge. Like, pictorially,\nwhat's going on?",
    "start": "2380780",
    "end": "2385940"
  },
  {
    "text": "Well, there's all kinds\nof graph stuff going on. And then there's u. And we know that there's\na directed edge from u",
    "start": "2385940",
    "end": "2391490"
  },
  {
    "text": "to v. That's our picture. Right? And maybe there's other\nstuff going on outside of us.",
    "start": "2391490",
    "end": "2397820"
  },
  {
    "text": "So in particular,\nwell, just by the way that we've defined that visit\nfunction, what do we know?",
    "start": "2397820",
    "end": "2403380"
  },
  {
    "text": "We know that when we\ncall visit on u, well,",
    "start": "2403380",
    "end": "2410450"
  },
  {
    "text": "v is one of its\noutgoing neighbors. So in particular,\na visit on u is going to call visit v. And\nwe know that because well, u",
    "start": "2410450",
    "end": "2422930"
  },
  {
    "text": "is visited before v. So currently, v's\nparent is l when",
    "start": "2422930",
    "end": "2428240"
  },
  {
    "text": "I get to you That make sense? Now, here's where\nreverse ordering,",
    "start": "2428240",
    "end": "2434940"
  },
  {
    "text": "we're going have to keep\nit in our head because now, well, visit of u calls visit\nof v. So notice that visit of v",
    "start": "2434940",
    "end": "2442580"
  },
  {
    "text": "has to complete\nbefore visit of u. Right? ",
    "start": "2442580",
    "end": "2452020"
  },
  {
    "text": "V completes before visit of u.",
    "start": "2452020",
    "end": "2460470"
  },
  {
    "text": "Well. So in reverse, sorting-- in reverse finishing order\nhere, what does that mean?",
    "start": "2460470",
    "end": "2468200"
  },
  {
    "text": "Well, if this completes before\nthe other guy, then they get flipped backward\nin the list, which is exactly what I want because\nthere's an edge from u to v.",
    "start": "2468200",
    "end": "2476950"
  },
  {
    "text": "OK. So Case 1 is done. Now we have Case 2, which is\nthat v is visited before u.",
    "start": "2476950",
    "end": "2486490"
  },
  {
    "start": "2486490",
    "end": "2493570"
  },
  {
    "text": "OK. So now I'm going to make\none additional observation.",
    "start": "2493570",
    "end": "2498740"
  },
  {
    "text": "OK. So now I'm going to go\nback to my other notes because I like my\nschematic better. ",
    "start": "2498740",
    "end": "2505740"
  },
  {
    "text": "Right. So what's our\nbasic picture here? Oh, no.",
    "start": "2505740",
    "end": "2510940"
  },
  {
    "text": "I-- Oh, you know what it was? I printed out\nanother copy of this. That's OK. I can do it off\nthe top of my head.",
    "start": "2510940",
    "end": "2516020"
  },
  {
    "text": "OK. So here's my source vertex. His name is S. Now, there's a\nbunch of edges and whatever.",
    "start": "2516020",
    "end": "2523550"
  },
  {
    "text": "There's a long path. And now eventually,\nwhat happens?",
    "start": "2523550",
    "end": "2528630"
  },
  {
    "text": "Well. I have a node v. And\nsomewhere out there",
    "start": "2528630",
    "end": "2533720"
  },
  {
    "text": "in the universe\nis another node u. And what do I know? I know that by\nassumption, I know",
    "start": "2533720",
    "end": "2539980"
  },
  {
    "text": "that there's an edge from\nu to v. That make sense? So that's our sort\nof picture so far.",
    "start": "2539980",
    "end": "2545900"
  },
  {
    "text": "OK. So what do we know? We know that our\ngraph is acyclic. Yeah?",
    "start": "2545900",
    "end": "2551530"
  },
  {
    "text": "Kind of by definition,\nthat's our assumption. So can we reach u from v?",
    "start": "2551530",
    "end": "2558570"
  },
  {
    "text": "In other words, does there\nexist a path from v to u? So that would look like this.",
    "start": "2558570",
    "end": "2564200"
  },
  {
    "text": " No because our graph is acyclic,\nand I just drew a cycle.",
    "start": "2564200",
    "end": "2572720"
  },
  {
    "text": "So this is a big X.\nThere's a frowny face here. Can't do it. He has hair, unlike\nyour instructor.",
    "start": "2572720",
    "end": "2579930"
  },
  {
    "text": "OK. So right. So what does this mean? Well, OK. So by this picture, I suppose,\nwe know that u cannot be",
    "start": "2579930",
    "end": "2590330"
  },
  {
    "text": "reached from v. ",
    "start": "2590330",
    "end": "2600160"
  },
  {
    "text": "Yeah. So what does that mean? Well, it means\nthat the visit to v",
    "start": "2600160",
    "end": "2605710"
  },
  {
    "text": "is going to complete\nand never see u because remember, the visit to\nv only ever call things that",
    "start": "2605710",
    "end": "2611410"
  },
  {
    "text": "are kind of descendants of v.\nSo in other words, visit of v",
    "start": "2611410",
    "end": "2619210"
  },
  {
    "text": "completes without seeing u.",
    "start": "2619210",
    "end": "2625130"
  },
  {
    "start": "2625130",
    "end": "2630411"
  },
  {
    "text": "Well, that's exactly\nthe same thing that we showed in\nour first case. Right? So by the same reasoning,\nwhat does that mean?",
    "start": "2630412",
    "end": "2636580"
  },
  {
    "text": "In our reverse finishing\norder, the ordering from u to v is preserved.",
    "start": "2636580",
    "end": "2642530"
  },
  {
    "text": "OK. So that sort of\ncompletes our proof here that reverse\nfinishing order gives me",
    "start": "2642530",
    "end": "2647769"
  },
  {
    "text": "a topological order,\nwhich is kind of nice. And so this is a\nnice convenient way of taking all of the nodes\nin a directed acyclic graph",
    "start": "2647770",
    "end": "2656740"
  },
  {
    "text": "and ordering them in\na way that respects the topology or the\nconnectivity of that graph.",
    "start": "2656740",
    "end": "2662089"
  },
  {
    "text": "So we're going to conclude\nwith one final problem, which I don't have a slide on. But that's OK.",
    "start": "2662090",
    "end": "2667540"
  },
  {
    "text": "And that's cycle detection. So there's a bit of an exercise\nleft to the reader here.",
    "start": "2667540",
    "end": "2676089"
  },
  {
    "text": "So the problem that\nwe're looking for now",
    "start": "2676090",
    "end": "2684040"
  },
  {
    "text": "is that we're given\na directed graph. ",
    "start": "2684040",
    "end": "2692440"
  },
  {
    "text": "There's a G in graph, in\ncase you're wondering. But now, we don't know\nif it's a DAG or not.",
    "start": "2692440",
    "end": "2698600"
  },
  {
    "text": "And so the question that\nwe're trying to ask is, does there exist a cycle in\nour directed acyclic graph?",
    "start": "2698600",
    "end": "2708704"
  },
  {
    "text": "So we're just given our\ngraph, and we want to know, can we do this? Let's think through the\nlogic of this a bit.",
    "start": "2708705",
    "end": "2715628"
  },
  {
    "text": "So what do we know? We know that if our\ngraph were a DAG, then",
    "start": "2715628",
    "end": "2722140"
  },
  {
    "text": "I could call DGS,\nget the ordering out, and then I guess flip\nits ordering backwards.",
    "start": "2722140",
    "end": "2727240"
  },
  {
    "text": "So I could compute the\nreverse finishing order. And it would give me a\ntopological order of my graph.",
    "start": "2727240",
    "end": "2734190"
  },
  {
    "text": "So if I were a DAG, I would\nget a topological order when I call DFS.",
    "start": "2734190",
    "end": "2740424"
  },
  {
    "text": "So let's say that I ran DFS. I got whatever ordering I got.",
    "start": "2740425",
    "end": "2746093"
  },
  {
    "text": "And now I found an edge the\npoints in the wrong direction. I can just double\ncheck my list of edges, and I find one that does not\nrespect the relationship that I",
    "start": "2746093",
    "end": "2754470"
  },
  {
    "text": "see in the second\nbullet point here. Can my graph be a DAG?",
    "start": "2754470",
    "end": "2760350"
  },
  {
    "text": "No. Because if my graph were a\nDAG, the algorithm would work. I just proved it to you. Right? So if my graph\nwere a DAG, then I",
    "start": "2760350",
    "end": "2768200"
  },
  {
    "text": "could do reverse\nfinishing order. And what I would get back\nis a topological order. So if I found a certificate that\nmy order wasn't topological,",
    "start": "2768200",
    "end": "2774970"
  },
  {
    "text": "something went wrong, and the\nonly thing that could go wrong is that my graph isn't a DAG. Yeah.",
    "start": "2774970",
    "end": "2780170"
  },
  {
    "text": "Isn't a DAG. In fact, sort of an exercise\nleft to the reader and/or to your section-- do\nwe still have section?",
    "start": "2780170",
    "end": "2786530"
  },
  {
    "text": "I think we do, as of now-- is that this is an if\nand only if, meaning",
    "start": "2786530",
    "end": "2792275"
  },
  {
    "text": "that the only time that you\neven have a topological ordering in your graph is if\nyour graph is a DAG.",
    "start": "2792275",
    "end": "2799400"
  },
  {
    "text": "This is a really easy fact\nto sanity check, by the way. This is not like, a particularly\nchallenging problem. But you should think through\nit because it's a good exercise",
    "start": "2799400",
    "end": "2806130"
  },
  {
    "text": "to make sure you understand\nthe definitions, which is to say that if you\nhave a topological order, your graph is a DAG.",
    "start": "2806130",
    "end": "2812120"
  },
  {
    "text": "If you don't have a topological\norder, your graph isn't a DAG. So in other words,\nwe secretly gave you",
    "start": "2812120",
    "end": "2817400"
  },
  {
    "text": "an algorithm for checking\nif a graph is a DAG at all. Right? What could I do? I could compute reverse\nfinishing order.",
    "start": "2817400",
    "end": "2824359"
  },
  {
    "text": "Check if it obeys\nthe relationship on the second bullet\npoint here for every edge. And if it does, then\nwe're in good shape.",
    "start": "2824360",
    "end": "2830130"
  },
  {
    "text": "My graph is a DAG. If it doesn't,\nsomething went wrong. And the only thing that\ncould have gone wrong is not being a DAG.",
    "start": "2830130",
    "end": "2836590"
  },
  {
    "text": "OK. So in other words,\nsecretly we just solved-- well, I guess the way\nthat I've written it here,",
    "start": "2836590",
    "end": "2843050"
  },
  {
    "text": "we've solved the cycle\ndetection problem here, which is to say that,\nwell, I have a cycle if",
    "start": "2843050",
    "end": "2849560"
  },
  {
    "text": "and only if I'm\nnot a DAG, which I can check using this technique. Of course, the word\n\"detection\" here probably means",
    "start": "2849560",
    "end": "2855980"
  },
  {
    "text": "that I actually want\nto find that cycle, and I haven't told you\nhow to do that yet. All we know how to do so\nfar is say, like, somewhere",
    "start": "2855980",
    "end": "2862400"
  },
  {
    "text": "in this graph there's a cycle. And that's not so good. So we can do one additional\npiece of information",
    "start": "2862400",
    "end": "2867890"
  },
  {
    "text": "in the two minutes we have\nremaining to sort of complete our story here, which is to\nmodify our algorithm ever so",
    "start": "2867890",
    "end": "2874099"
  },
  {
    "text": "slightly to not only say thumbs\nup, thumbs down, is there a cycle in this graph, but also\nto actually return the vertices",
    "start": "2874100",
    "end": "2879800"
  },
  {
    "text": "as a cycle. And here's the\nproperty that we're going to do that,\nwhich is following,",
    "start": "2879800",
    "end": "2886980"
  },
  {
    "text": "which is that if G contains\na cycle, right, then",
    "start": "2886980",
    "end": "2900369"
  },
  {
    "text": "full DFS will traverse\nan edge from a vertex v",
    "start": "2900370",
    "end": "2911580"
  },
  {
    "text": "to some ancestor of v. I guess\nwe haven't carefully defined",
    "start": "2911580",
    "end": "2918990"
  },
  {
    "text": "the term \"ancestor\" here. Essentially, if you think of the\nsort of the running of the DFS",
    "start": "2918990",
    "end": "2925995"
  },
  {
    "text": "algorithm, then an\nancestor is like something that appears in the recursive\ncall tree before I got to v.",
    "start": "2925995",
    "end": "2932050"
  },
  {
    "text": "OK. So how could we prove that? Well, let's take a cycle.",
    "start": "2932050",
    "end": "2938705"
  },
  {
    "text": " And we'll give it a name.",
    "start": "2938705",
    "end": "2944450"
  },
  {
    "text": "In particular, we'll say that\nit's a cycle from v0 v1 to vk.",
    "start": "2944450",
    "end": "2950270"
  },
  {
    "text": "And then it's a cycle,\nso it goes back to v0. OK. And I can order this\ncycle any way I want.",
    "start": "2950270",
    "end": "2956940"
  },
  {
    "text": "Notice that if I\npermute the vertices in this list in a\ncyclical way, meaning that I take the last few\nof them and stick them",
    "start": "2956940",
    "end": "2962990"
  },
  {
    "text": "at the beginning of the\nlist, it's still a cycle. That's the nice\nthing about cycles. So in particular, without\nloss of generality,",
    "start": "2962990",
    "end": "2973280"
  },
  {
    "text": "we're going to assume that v0\nis the first vertex visited",
    "start": "2973280",
    "end": "2981530"
  },
  {
    "text": "by DFS. ",
    "start": "2981530",
    "end": "2992157"
  },
  {
    "text": "What does that mean? That means, like, when I\ndo my DFS algorithm making all these recursive calls,\nthe very first vertex",
    "start": "2992157",
    "end": "2997680"
  },
  {
    "text": "to be touched by\nthis technique is v0. OK. Well, now what's going\nto end up happening?",
    "start": "2997680",
    "end": "3004400"
  },
  {
    "text": "Well, think about the recursive\ncall tree starting at v0. ",
    "start": "3004400",
    "end": "3010260"
  },
  {
    "text": "By the time that\ncompletes, anything that's reachable from v0 is\nalso going to be complete.",
    "start": "3010260",
    "end": "3016620"
  },
  {
    "text": "Do you see that? So for instance, v0 somewhere\nin its call tree might call v2.",
    "start": "3016620",
    "end": "3022520"
  },
  {
    "text": "And notice that v2 was\nnot already visited. So in fact, it will. For v1 I got to\ncall v2 and so on.",
    "start": "3022520",
    "end": "3028790"
  },
  {
    "text": "And in particular, we're going\nto get all the way to vertex k.",
    "start": "3028790",
    "end": "3034760"
  },
  {
    "text": "Right? So in other words, we're\ngoing to visit a vertex vk.",
    "start": "3034760",
    "end": "3043150"
  },
  {
    "text": " And notice what's\ngoing to happen. So remember our algorithm.",
    "start": "3043150",
    "end": "3049147"
  },
  {
    "text": "In fact, we should probably\njust put it up on the screen would be easier than\ntalking about it a bunch.",
    "start": "3049147",
    "end": "3054300"
  },
  {
    "text": "Well, vk is now\ngoing to iterate over every one of the\nneighbors of vk.",
    "start": "3054300",
    "end": "3060660"
  },
  {
    "text": "And in particular, it's\ngoing to see vertex v0. Right?",
    "start": "3060660",
    "end": "3066330"
  },
  {
    "text": "So we're going to\nsee the edge from vk",
    "start": "3066330",
    "end": "3072560"
  },
  {
    "text": "to v0, which is an edge\nkind of by definition because we took this\nto be a cycle here.",
    "start": "3072560",
    "end": "3079516"
  },
  {
    "text": "But notice that's exactly the\nthing we set out to prove, namely that full DFS traverses\nan edge from a vertex",
    "start": "3079517",
    "end": "3086140"
  },
  {
    "text": "to one of its ancestors. Here's a vertex k. Here's the ancestor v0. Why do we know that\nit's an ancestor?",
    "start": "3086140",
    "end": "3092230"
  },
  {
    "text": "Well, because v0 was\ncalled in our call tree before any of these other guys. Right?",
    "start": "3092230",
    "end": "3098350"
  },
  {
    "text": "So we wanted an algorithm that\nnot only did cycle detection, but also actually\ngave me the cycle. What could I do?",
    "start": "3098350",
    "end": "3103910"
  },
  {
    "text": "Well, it's essentially\na small modification of what we already have. Right. So-- whoops. Right.",
    "start": "3103910",
    "end": "3109240"
  },
  {
    "text": "If I want to compute\ntopological order or whatever, I can just do DFS. And that'll tell me like, yay or\nnay, does there exist a cycle.",
    "start": "3109240",
    "end": "3115930"
  },
  {
    "text": "If I want to actually find\nthat cycle, all I have to do is check that topological\norder property at the same time",
    "start": "3115930",
    "end": "3123040"
  },
  {
    "text": "that it traversed\nthe graph during DFS. And the second that I find an\nedge that loops back, I'm done.",
    "start": "3123040",
    "end": "3130250"
  },
  {
    "text": "And so that's our\nbasic algorithm here. And this is a technique\nfor actually just finding the cycle in a graph\nusing the DFS algorithm.",
    "start": "3130250",
    "end": "3138270"
  },
  {
    "start": "3138270",
    "end": "3143000"
  }
]