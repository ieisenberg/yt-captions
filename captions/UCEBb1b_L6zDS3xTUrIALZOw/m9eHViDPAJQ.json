[
  {
    "start": "0",
    "end": "188000"
  },
  {
    "text": "okay why don't we begin hi everybody",
    "start": "24880",
    "end": "30400"
  },
  {
    "text": "see how many we got here uh most of you um",
    "start": "30400",
    "end": "35760"
  },
  {
    "text": "i'm sure the others will show up hopefully uh soon enough so",
    "start": "35760",
    "end": "40800"
  },
  {
    "text": "welcome back um we have today's lecture four",
    "start": "40800",
    "end": "45840"
  },
  {
    "text": "and um let's just remember what we've been doing um",
    "start": "45840",
    "end": "51440"
  },
  {
    "text": "in the last few lectures we were exploring uh the regular languages as described by",
    "start": "51440",
    "end": "59840"
  },
  {
    "text": "finite automata and regular expressions we showed how to convert them back and",
    "start": "59840",
    "end": "64878"
  },
  {
    "text": "forth those two models to one another and we also showed how to prove",
    "start": "64879",
    "end": "70640"
  },
  {
    "text": "certain languages are not regular now remember finite automata are a very",
    "start": "70640",
    "end": "76320"
  },
  {
    "text": "um weak model of computation they only have a limited memory a finite memory um",
    "start": "76320",
    "end": "82640"
  },
  {
    "text": "and uh they still aren't able to do certain things with their finite memory",
    "start": "82640",
    "end": "87920"
  },
  {
    "text": "but um they are you know um",
    "start": "87920",
    "end": "93759"
  },
  {
    "text": "if you compare them with a general-purpose computer at least the way we think about it",
    "start": "93759",
    "end": "99840"
  },
  {
    "text": "is their uh you know their capabilities are just extremely limited and so",
    "start": "99840",
    "end": "107200"
  },
  {
    "text": "we're going to over the next uh few lectures explore uh some more powerful models we started doing that last time",
    "start": "107200",
    "end": "114000"
  },
  {
    "text": "uh the context-free grammars and as we'll see there are certain things that you can do i think we saw that last time",
    "start": "114000",
    "end": "119280"
  },
  {
    "text": "as well those are some things you can do with context-free grammars that you cannot do with finite automata",
    "start": "119280",
    "end": "124640"
  },
  {
    "text": "and uh but they still have their limitations as we'll see um so um",
    "start": "124640",
    "end": "131760"
  },
  {
    "text": "today what we're going to do we're going to continue that discussion uh by",
    "start": "131760",
    "end": "136800"
  },
  {
    "text": "looking at the definition of context-free grammars in a more formal way uh one of the uh things that we do in",
    "start": "136800",
    "end": "142879"
  },
  {
    "text": "this course is develop practice with formalism and um so that that's going to be in the",
    "start": "142879",
    "end": "149040"
  },
  {
    "text": "spirit of that we also are going to look at their associated languages called the context",
    "start": "149040",
    "end": "154239"
  },
  {
    "text": "free languages so they're going to be the counterpart for context-free grammars of what the regular languages",
    "start": "154239",
    "end": "159920"
  },
  {
    "text": "are for the finite automata of regular expressions and then we're going to look at a an",
    "start": "159920",
    "end": "165519"
  },
  {
    "text": "automaton based model which is the counterpart",
    "start": "165519",
    "end": "170720"
  },
  {
    "text": "to the grammars called the push down automata and we'll see that those are",
    "start": "170720",
    "end": "176160"
  },
  {
    "text": "equivalent in power and finally um well and as part of that we will show how to",
    "start": "176160",
    "end": "181599"
  },
  {
    "text": "convert the context free grammars to the push-down automata and that's what that's what that's what",
    "start": "181599",
    "end": "186720"
  },
  {
    "text": "we're going to do today so we're going to move on then and uh return to uh our",
    "start": "186720",
    "end": "191840"
  },
  {
    "start": "188000",
    "end": "453000"
  },
  {
    "text": "topic of context-free grammars that we began last time and just to refresh your memory um so here was that example of a",
    "start": "191840",
    "end": "199440"
  },
  {
    "text": "context free grammar that we gave last time and it has",
    "start": "199440",
    "end": "206239"
  },
  {
    "text": "the way we're going to be writing context-free grammars is using a bit of a shorthand uh which looks like this",
    "start": "206239",
    "end": "212560"
  },
  {
    "text": "when you have multiple rules that have the same variable on this on the left",
    "start": "212560",
    "end": "218480"
  },
  {
    "text": "hand side you can combine them into one line so these two rules over here",
    "start": "218480",
    "end": "224959"
  },
  {
    "text": "s goes to 0 s1 and s goes to r can be written in one line as a little bit more compact",
    "start": "224959",
    "end": "230959"
  },
  {
    "text": "way this is standard as s goes to 0 s 1 or r that's where you",
    "start": "230959",
    "end": "236319"
  },
  {
    "text": "would read this this is really two rules but written on one line",
    "start": "236319",
    "end": "241840"
  },
  {
    "text": "okay so uh as you recall uh from last time a context-free grammar has terminals",
    "start": "241840",
    "end": "248319"
  },
  {
    "text": "variables and rules uh those are the parts that we speak of as well as one of the variables",
    "start": "248319",
    "end": "254480"
  },
  {
    "text": "being designate designated as a starting variable which gets the whole thing going so i'll talk remind you about how",
    "start": "254480",
    "end": "260400"
  },
  {
    "text": "that computation goes but um so the variables are the symbols that",
    "start": "260400",
    "end": "265759"
  },
  {
    "text": "appear on the left-hand side of the rules the terminals are the other symbols",
    "start": "265759",
    "end": "271360"
  },
  {
    "text": "that appear in the grammar and",
    "start": "271360",
    "end": "276240"
  },
  {
    "text": "the we take the grammar and we use it to",
    "start": "276880",
    "end": "283520"
  },
  {
    "text": "generate strings according to a certain system and the system is that you start",
    "start": "283520",
    "end": "289600"
  },
  {
    "text": "out by writing down the uh starting variable and then once you've written down that",
    "start": "289600",
    "end": "296320"
  },
  {
    "text": "variable or whatever variables you have written down you're allowed to substitute them according to the rules",
    "start": "296320",
    "end": "302479"
  },
  {
    "text": "of the substitution rules that are in the grammar so you can keep on replacing the variables that you have with the",
    "start": "302479",
    "end": "308800"
  },
  {
    "text": "corresponding right hand sides and then you do that over and over again until",
    "start": "308800",
    "end": "314560"
  },
  {
    "text": "you don't have any variables left only terminal symbols remain and at that point you have generated a",
    "start": "314560",
    "end": "321440"
  },
  {
    "text": "string that's in the language of the grammar all right",
    "start": "321440",
    "end": "326639"
  },
  {
    "text": "so the grammar's language is going to be",
    "start": "326639",
    "end": "332479"
  },
  {
    "text": "a language over strings whose alphabet are the terminal symbols",
    "start": "332479",
    "end": "338160"
  },
  {
    "text": "so the terminal symbols in a certain sense play the same role as the input alphabet say for the finite",
    "start": "338160",
    "end": "345199"
  },
  {
    "text": "automata okay the the the variables are kind of internal working um symbols for the",
    "start": "345199",
    "end": "352479"
  },
  {
    "text": "grammar the terminals are sort of are are the symbols over which the language is is",
    "start": "352479",
    "end": "358400"
  },
  {
    "text": "written okay we'll make that more precise in a minute where when i give the formal definition",
    "start": "358400",
    "end": "363520"
  },
  {
    "text": "so the result is the generated string and the language of the grammar is the language of all generated strings that",
    "start": "363520",
    "end": "369280"
  },
  {
    "text": "you can get using that grammar so um and the important thing is that we call that language a context free",
    "start": "369280",
    "end": "377360"
  },
  {
    "text": "language okay so the that's like what we get from that that's the analogous thing to the",
    "start": "377360",
    "end": "384080"
  },
  {
    "text": "regular languages but here we call them context-free languages uh the things that you can get from a context-free",
    "start": "384080",
    "end": "389520"
  },
  {
    "text": "grammar again just a quick recap of that example we did last time",
    "start": "389520",
    "end": "394880"
  },
  {
    "text": "so you start out by writing the start variable and then i'm going to give you kind of",
    "start": "394880",
    "end": "401680"
  },
  {
    "text": "two views of that either in terms of the tree of substitutions which we call the parse tree or in terms of the resulting",
    "start": "401680",
    "end": "407919"
  },
  {
    "text": "string as you do the substitutions so here is the uh parse tree here is the",
    "start": "407919",
    "end": "413039"
  },
  {
    "text": "resulting strings here are the substitutions that you make um and now we have r",
    "start": "413039",
    "end": "419039"
  },
  {
    "text": "um coming from s and we have zero zero r one one and now we have uh",
    "start": "419039",
    "end": "425120"
  },
  {
    "text": "r in turn becomes an empty string and then uh the string that",
    "start": "425120",
    "end": "430319"
  },
  {
    "text": "we generated is zero zero one one that's in the language of the grammar",
    "start": "430319",
    "end": "436479"
  },
  {
    "text": "and now uh if you play with this a little bit you'll see that the language of the grammar is all",
    "start": "436479",
    "end": "442479"
  },
  {
    "text": "strings that look like runs of zeros followed by runs of ones",
    "start": "442479",
    "end": "448720"
  },
  {
    "text": "all right so uh is that clear um i think we're gonna have a",
    "start": "448720",
    "end": "454160"
  },
  {
    "start": "453000",
    "end": "869000"
  },
  {
    "text": "um i think the next uh slide is gonna have a check in and so hopefully that'll uh",
    "start": "454160",
    "end": "461840"
  },
  {
    "text": "get us all together on the same page with this anyway um so here's our formal",
    "start": "461840",
    "end": "467199"
  },
  {
    "text": "definition anyway uh we have a context-free grammar is a four-tuple there are four parts of",
    "start": "467199",
    "end": "474319"
  },
  {
    "text": "context for grammar these are the parts we've already been discussing uh the variables the terminal symbols the rules",
    "start": "474319",
    "end": "482160"
  },
  {
    "text": "um the rules are always of the form a variable uh followed by you know with an arrow to",
    "start": "482160",
    "end": "489039"
  },
  {
    "text": "a string of variables and terminals that's the way we write just write that down so this is the form of the rule",
    "start": "489039",
    "end": "495599"
  },
  {
    "text": "and then we have the special start variable and we all wrap that up into a package this four tuple that's what the",
    "start": "495599",
    "end": "501919"
  },
  {
    "text": "context free grammar is um now we have here uh",
    "start": "501919",
    "end": "509520"
  },
  {
    "text": "and now maybe a little bit overkill but let's talk about what formally speaking what",
    "start": "509520",
    "end": "515839"
  },
  {
    "text": "the the way the grammar actually processes um and produces strings",
    "start": "515839",
    "end": "522000"
  },
  {
    "text": "um so we're going to write uh the the standard notation for this is that if you have",
    "start": "522000",
    "end": "528560"
  },
  {
    "text": "two strings of variables and terminals so imagine you have an intermediate",
    "start": "528560",
    "end": "534800"
  },
  {
    "text": "string that you've generated in the grammar so far um",
    "start": "534800",
    "end": "539920"
  },
  {
    "text": "you know which might be like 0 0 s 1 1 from the previous line so that's an",
    "start": "539920",
    "end": "544959"
  },
  {
    "text": "intermediate string that is so far what you've generated you're going to say um",
    "start": "544959",
    "end": "550240"
  },
  {
    "text": "maybe that's you and v might be the next line down uh so that means we're going to write u",
    "start": "550240",
    "end": "557519"
  },
  {
    "text": "arrow v and that arrow is the the word we're going to use is",
    "start": "557519",
    "end": "562880"
  },
  {
    "text": "yields we'll say u yields v um if it can go from u to v just with",
    "start": "562880",
    "end": "568880"
  },
  {
    "text": "one substitution step um and then we'll write",
    "start": "568880",
    "end": "574640"
  },
  {
    "text": "u yields v in some number of steps or actually we say u derives v",
    "start": "574640",
    "end": "580480"
  },
  {
    "text": "if it can go to u to v with some number of substitutions instead of just one and that's used with the um the yields arrow",
    "start": "580480",
    "end": "587360"
  },
  {
    "text": "with the star above it to mean some number of um another way of writing that is you",
    "start": "587360",
    "end": "593680"
  },
  {
    "text": "can say u goes to v if there are a bunch of one step moves that you can make which take",
    "start": "593680",
    "end": "599760"
  },
  {
    "text": "you from u to v and that whole sequence is called a derivation",
    "start": "599760",
    "end": "605040"
  },
  {
    "text": "of v from u that's a sequence of steps that you go",
    "start": "605040",
    "end": "610160"
  },
  {
    "text": "through doing these substitutions one by one to take you from u to v according to the",
    "start": "610160",
    "end": "616160"
  },
  {
    "text": "rules of the grammar and lastly if u is a starting variable",
    "start": "616160",
    "end": "622000"
  },
  {
    "text": "then we call that sequence just the derivation of v it could be the derivation from the start variable but",
    "start": "622000",
    "end": "629040"
  },
  {
    "text": "that's kind of the assumed if you don't say it's a derivation from anything the derivation of v in the grammar is the",
    "start": "629040",
    "end": "635360"
  },
  {
    "text": "derivation of v from the start variable it's just the sequence of substitutions that you make kind of the you know what",
    "start": "635360",
    "end": "641040"
  },
  {
    "text": "you is what i think you would expect now the language of the grammar is the",
    "start": "641040",
    "end": "647440"
  },
  {
    "text": "set of all strings that um of terminal symbols",
    "start": "647440",
    "end": "653920"
  },
  {
    "text": "that you can get from uh starting at the starting variable of the grammar",
    "start": "653920",
    "end": "660720"
  },
  {
    "text": "okay and that's called a context-free language as i mentioned before so it's a context of free language it's the",
    "start": "660720",
    "end": "666160"
  },
  {
    "text": "language of of the grammar for some grammar okay so let's have a little check in",
    "start": "666160",
    "end": "671680"
  },
  {
    "text": "here again nothing too hard nothing to get worried about anyway we're not counting correctness uh here so um",
    "start": "671680",
    "end": "678640"
  },
  {
    "text": "let's just see um i'm gonna give you two uh things that look like grammars",
    "start": "678640",
    "end": "685920"
  },
  {
    "text": "which of them are actually grammars and let me just pull that poll up uh here",
    "start": "685920",
    "end": "692399"
  },
  {
    "text": "okay so which of these are valid grammars here are they both",
    "start": "692399",
    "end": "697600"
  },
  {
    "text": "neither i mean you can kind of make an argument either you know either way for both of",
    "start": "697600",
    "end": "704079"
  },
  {
    "text": "them but both of them are kind of a little have their own a bit of weirdness to them uh in a way if you if you if you",
    "start": "704079",
    "end": "710720"
  },
  {
    "text": "study them for a second um okay that's pretty much converged um",
    "start": "710720",
    "end": "719839"
  },
  {
    "text": "share the results um",
    "start": "719839",
    "end": "723600"
  },
  {
    "text": "okay so um so in fact the correct answer is b",
    "start": "725680",
    "end": "731680"
  },
  {
    "text": "um [Music] and uh why is only c2",
    "start": "731680",
    "end": "739200"
  },
  {
    "text": "first of all you know well what's wrong with c1 c1 the problem with c1 is that the rules",
    "start": "739200",
    "end": "745760"
  },
  {
    "text": "have things besides a single variable on the left hand side",
    "start": "745760",
    "end": "751360"
  },
  {
    "text": "so having a b1 on the left-hand side is not legal in a context-free grammar",
    "start": "751360",
    "end": "757120"
  },
  {
    "text": "in fact there are other kinds of grammars there's a kind of grammar called a context sensitive grammar the term",
    "start": "757120",
    "end": "763440"
  },
  {
    "text": "context free means you can replace the variable independent of its context in the",
    "start": "763440",
    "end": "769440"
  },
  {
    "text": "intermediate string so independent of what's around it but here the this substitution is going to you can replace",
    "start": "769440",
    "end": "775760"
  },
  {
    "text": "b but it depends on there being a one next to it um",
    "start": "775760",
    "end": "780800"
  },
  {
    "text": "this is called a context sentence set of grammar but it's not the kind of character we're going to be using which are only context free grammar so c1 is",
    "start": "780800",
    "end": "787519"
  },
  {
    "text": "out that's not a legit context-free grammar",
    "start": "787519",
    "end": "792880"
  },
  {
    "text": "c2 the thing that's a little weird about c2 is if you try to generate a string in c2",
    "start": "792880",
    "end": "799360"
  },
  {
    "text": "you'll see that um there's no way to get rid of the variables you're always going to be",
    "start": "799360",
    "end": "805519"
  },
  {
    "text": "stuck with the variable um now that doesn't violate the definition of a context-free grammar",
    "start": "805519",
    "end": "811760"
  },
  {
    "text": "so this is a context-free grammar but but it's not going to be able to generate any strings of only terminals",
    "start": "811760",
    "end": "819120"
  },
  {
    "text": "so this is a context-free grammar whose language happens to be the empty language but that's totally okay",
    "start": "819120",
    "end": "827040"
  },
  {
    "text": "so the correct answer here is b that only c2 here is a valid",
    "start": "827040",
    "end": "832480"
  },
  {
    "text": "context-free grammar okay um",
    "start": "832480",
    "end": "838160"
  },
  {
    "text": "common let's just see common question does a string u derive itself",
    "start": "838160",
    "end": "843440"
  },
  {
    "text": "yes a string u derives itself uh that's a little bit of a little bit of an esoteric question there for us right",
    "start": "843440",
    "end": "849920"
  },
  {
    "text": "now but yes um a string u in in this definition here u arrow stars you is legit is illegal",
    "start": "849920",
    "end": "858240"
  },
  {
    "text": "maybe it isn't uh according to the way i've written it down here but it is it is uh a legal",
    "start": "858240",
    "end": "864720"
  },
  {
    "text": "thing it's not going to really matter for you anyway but but it is illegal okay let's continue um",
    "start": "864720",
    "end": "871040"
  },
  {
    "start": "869000",
    "end": "957000"
  },
  {
    "text": "let's do another somewhat interesting example of a context-free grammar um",
    "start": "871040",
    "end": "876079"
  },
  {
    "text": "this is a grammar that is um can generate arithmetical expressions",
    "start": "876079",
    "end": "882560"
  },
  {
    "text": "involving pluses and times so here it is it has",
    "start": "882560",
    "end": "888320"
  },
  {
    "text": "how many rules well there are six rules here each line represents two rules so e",
    "start": "888320",
    "end": "893360"
  },
  {
    "text": "goes to e plus t or t t goes to t times f or f and f goes to",
    "start": "893360",
    "end": "898639"
  },
  {
    "text": "uh parenthesis e parenthesis or a um now so the",
    "start": "898639",
    "end": "904480"
  },
  {
    "text": "variables are going to be the symbols that appear on the left hand side et and f the terminal symbols which are going",
    "start": "904480",
    "end": "909920"
  },
  {
    "text": "to be the symbols of the language that you're going to be generating um is going to be the plus the time symbols",
    "start": "909920",
    "end": "916720"
  },
  {
    "text": "the parentheses are just terminal symbols here so they're nothing not playing any special role besides that",
    "start": "916720",
    "end": "922959"
  },
  {
    "text": "and then you have the a which is representing kind of the um operand on which those operators uh",
    "start": "922959",
    "end": "930480"
  },
  {
    "text": "would be working if there was actually an expression you would use but they're just symbols from the perspective of the",
    "start": "930480",
    "end": "936000"
  },
  {
    "text": "of the grammar and lastly the start variable is going to be as normally",
    "start": "936000",
    "end": "941839"
  },
  {
    "text": "appears on the upper left hand side of the grammar in terms of the way you write it",
    "start": "941839",
    "end": "948160"
  },
  {
    "text": "down so sometimes you might specify a different start variable but",
    "start": "948160",
    "end": "953600"
  },
  {
    "text": "otherwise if not specified it's that it's the one in this corner here okay so let's just see uh some examples",
    "start": "953600",
    "end": "960240"
  },
  {
    "start": "957000",
    "end": "1381000"
  },
  {
    "text": "of uh using the grammar to generate uh",
    "start": "960240",
    "end": "965440"
  },
  {
    "text": "a string so here is a string in the language a plus a times a and and this example will kind of reveal some other",
    "start": "965440",
    "end": "972160"
  },
  {
    "text": "interesting features of the grammar but let's just see it in operation first",
    "start": "972160",
    "end": "977199"
  },
  {
    "text": "so again i'll try to write it to you in both ways in terms of the parse tree and the resulting string as you're doing the",
    "start": "977199",
    "end": "982720"
  },
  {
    "text": "substitutions so um the uh so first we start with the e",
    "start": "982720",
    "end": "989839"
  },
  {
    "text": "then we substitute e plus t and we see the resulting string z plus t but now we as we're doing additional",
    "start": "989839",
    "end": "996079"
  },
  {
    "text": "substitutions the resulting string that you get is going to evolve um accordingly",
    "start": "996079",
    "end": "1001920"
  },
  {
    "text": "and um so i hope it comes across that this tree here picture on the left",
    "start": "1001920",
    "end": "1009279"
  },
  {
    "text": "shows you the structure of the various substitutions whereas on the right it just shows you the strings that you get",
    "start": "1009279",
    "end": "1015440"
  },
  {
    "text": "as a result of those substitutions [Music] so now you can",
    "start": "1015440",
    "end": "1022240"
  },
  {
    "text": "generate this particular string which is now in the language of this grammar you could generate all sorts of other",
    "start": "1022240",
    "end": "1027760"
  },
  {
    "text": "strings as well uh such as you know parenthesis a plus a parenthesis times a and so on",
    "start": "1027760",
    "end": "1034798"
  },
  {
    "text": "and in fact um this might be a piece of a programming language that you're",
    "start": "1034799",
    "end": "1041520"
  },
  {
    "text": "trying to describe um and one application of",
    "start": "1041520",
    "end": "1047038"
  },
  {
    "text": "context-free grammars is to describe the syntax of programming languages you know",
    "start": "1047039",
    "end": "1052720"
  },
  {
    "text": "what are the legal programs that you can write with in that programming language",
    "start": "1052720",
    "end": "1059039"
  },
  {
    "text": "and not only that the grammar can be used to automatically",
    "start": "1059039",
    "end": "1064960"
  },
  {
    "text": "generate the part of the compiler uh for that programming language which will",
    "start": "1064960",
    "end": "1070799"
  },
  {
    "text": "interpret the um which would uh interpret the structure of the input you",
    "start": "1070799",
    "end": "1078000"
  },
  {
    "text": "know the so-called parser which will figure out the meaning of the uh input to the compiler so that the",
    "start": "1078000",
    "end": "1085760"
  },
  {
    "text": "compiler then can generate the code or if it's an interpreter it could interpret the uh the resulting um code",
    "start": "1085760",
    "end": "1092720"
  },
  {
    "text": "that you've given it um but the very first step in both of those is to figure out the meaning and the meaning is",
    "start": "1092720",
    "end": "1100640"
  },
  {
    "text": "um embedded within the structure of the parse tree now in the in the case of this",
    "start": "1100640",
    "end": "1106000"
  },
  {
    "text": "particular tree just to give you some sense of what meaning i have in mind",
    "start": "1106000",
    "end": "1111120"
  },
  {
    "text": "this parse tree due to the structure of this grammar has the precedence for",
    "start": "1111120",
    "end": "1116400"
  },
  {
    "text": "times over plus so normally when we write down a plus a times a you you assume you're going to",
    "start": "1116400",
    "end": "1123120"
  },
  {
    "text": "do the multiplication before you do the addition even though it appears second that's just the way we tend to write",
    "start": "1123120",
    "end": "1128320"
  },
  {
    "text": "things and and this grammar has grouped it that way for you it groups the times",
    "start": "1128320",
    "end": "1134400"
  },
  {
    "text": "lower down in the tree than the plus so the the times is going to be done",
    "start": "1134400",
    "end": "1139520"
  },
  {
    "text": "before the plus if you imagine doing this in terms of the way the tree is guiding you so the tree as you can see",
    "start": "1139520",
    "end": "1145760"
  },
  {
    "text": "has a certain amount of meaning built into it now we're not actually going to be using that in this course but i just",
    "start": "1145760",
    "end": "1151280"
  },
  {
    "text": "want to you describe that as a an illustration of how this material can get applied um",
    "start": "1151280",
    "end": "1160000"
  },
  {
    "text": "now so you know here is what i'm saying that the tree contains additional information",
    "start": "1160000",
    "end": "1165360"
  },
  {
    "text": "now that's also relevant um if you happen to have a grammar which might",
    "start": "1165360",
    "end": "1172480"
  },
  {
    "text": "allow multiple parse trees for the same string",
    "start": "1172480",
    "end": "1178160"
  },
  {
    "text": "okay that can happen um this particular grammar does not allow that",
    "start": "1178160",
    "end": "1184880"
  },
  {
    "text": "but you might write other grammars that as we'll see in a minute that could generate the same string in multiple",
    "start": "1184880",
    "end": "1190320"
  },
  {
    "text": "ways with multiple different parse trees now that might be undesirable",
    "start": "1190320",
    "end": "1195919"
  },
  {
    "text": "when you have a programming language because typically you want it to be only a single meaning",
    "start": "1195919",
    "end": "1201679"
  },
  {
    "text": "for your code you don't want it to be ambiguous and have multiple meanings but",
    "start": "1201679",
    "end": "1207440"
  },
  {
    "text": "um uh ambiguity is it does occur and it's not",
    "start": "1207440",
    "end": "1214039"
  },
  {
    "text": "necessarily something we're always going to uh see is a bad thing um so you know",
    "start": "1214039",
    "end": "1219919"
  },
  {
    "text": "i think as i mentioned last time a lot of this subject originated with linguistics um and that's where the",
    "start": "1219919",
    "end": "1226559"
  },
  {
    "text": "terminology comes from grammar and um uh",
    "start": "1226559",
    "end": "1231919"
  },
  {
    "text": "languages and so on the terminology for the subject really comes out of linguistics in fact one of the key",
    "start": "1231919",
    "end": "1238400"
  },
  {
    "text": "players for that is an emeritus faculty member at mit noam chomsky he was instrumental in setting a lot of this",
    "start": "1238400",
    "end": "1243760"
  },
  {
    "text": "stuff up um but the um",
    "start": "1243760",
    "end": "1249760"
  },
  {
    "text": "uh you you can think of grammars as applying to natural human languages as",
    "start": "1249760",
    "end": "1254960"
  },
  {
    "text": "well so let me give you a little example as a pop-up this is not directly uh pop-up a",
    "start": "1254960",
    "end": "1260799"
  },
  {
    "text": "check-in not directly relevant uh to the material i just presented but just sort of a curiosity um",
    "start": "1260799",
    "end": "1267760"
  },
  {
    "text": "if you take the english sentence the boy saw the girl with the mirror",
    "start": "1267760",
    "end": "1272960"
  },
  {
    "text": "um you know does that is there only one",
    "start": "1272960",
    "end": "1278080"
  },
  {
    "text": "natural uh interpretation for that sentence or are there perhaps other natural interpretations for that sentence so let",
    "start": "1278080",
    "end": "1284960"
  },
  {
    "text": "me pose that to you as another uh poll here um and uh",
    "start": "1284960",
    "end": "1292799"
  },
  {
    "text": "so i ask you to think about how many different meanings you might find for",
    "start": "1292799",
    "end": "1299039"
  },
  {
    "text": "uh reasonable different meanings i mean you can you know if you're going to go wild you can think of",
    "start": "1299039",
    "end": "1304400"
  },
  {
    "text": "zillions of meetings but i think in terms of reasonable meanings how many meetings might you get for the sentence uh",
    "start": "1304400",
    "end": "1309840"
  },
  {
    "text": "people are seeing more meetings than i'm seeing but that's okay um",
    "start": "1309840",
    "end": "1315200"
  },
  {
    "text": "so this is a quick why don't we just give this another uh",
    "start": "1315200",
    "end": "1321360"
  },
  {
    "text": "10 seconds here um and then um",
    "start": "1322000",
    "end": "1328240"
  },
  {
    "text": "most of you are in agreement with me um uh i can see here",
    "start": "1328240",
    "end": "1334240"
  },
  {
    "text": "that uh uh you are uh seeing that there were two meanings",
    "start": "1334240",
    "end": "1341039"
  },
  {
    "text": "the two meanings that i see here for this sentence are um when you say the boys or the girl with",
    "start": "1341039",
    "end": "1346320"
  },
  {
    "text": "the mirror is who has the mirror is it the boy seeing the girl through the mirror",
    "start": "1346320",
    "end": "1352000"
  },
  {
    "text": "or is it the girl that has the mirror and the boy just happens to see her so two very different meanings for the same",
    "start": "1352000",
    "end": "1358240"
  },
  {
    "text": "sentence and that's the nature of english it's just uh the the way um uh it's it's an it's it's an ambiguous",
    "start": "1358240",
    "end": "1365520"
  },
  {
    "text": "um structure there and often we resolve that ambiguity in english with other information that we might have um but um",
    "start": "1365520",
    "end": "1373200"
  },
  {
    "text": "typically you don't want there to be ambiguity when you have this a grammar say describing a programming like",
    "start": "1373200",
    "end": "1378480"
  },
  {
    "text": "programming language okay um so let's continue on that um",
    "start": "1378480",
    "end": "1386240"
  },
  {
    "start": "1381000",
    "end": "1549000"
  },
  {
    "text": "so talking a little bit more about ambiguity i was promised you an example where you might have an ambiguous",
    "start": "1386240",
    "end": "1391360"
  },
  {
    "text": "grammar um so uh if you take these two grammars g2 and g3 the g2 from the last slide and g3",
    "start": "1391360",
    "end": "1398720"
  },
  {
    "text": "is a similar grammar in fact has it's the grammar that has the very same language",
    "start": "1398720",
    "end": "1405600"
  },
  {
    "text": "um that gives you the very same language so l of g2 equals l of g3 both of them are describing these arithmetical",
    "start": "1405919",
    "end": "1412480"
  },
  {
    "text": "expressions um but whereas g2 has a unique parse tree",
    "start": "1412480",
    "end": "1418080"
  },
  {
    "text": "for every string that you generate g3 can have multiple parse trees for the same string",
    "start": "1418080",
    "end": "1423679"
  },
  {
    "text": "okay so i'm just going to illustrate that here so here is the same string that we generated last time a plus a",
    "start": "1423679",
    "end": "1429520"
  },
  {
    "text": "times a in g3 the parse tree is actually even simpler",
    "start": "1429520",
    "end": "1434880"
  },
  {
    "text": "here um so here i'm showing you the uh there's just the two substitutions that you",
    "start": "1434880",
    "end": "1440640"
  },
  {
    "text": "uh need to make starting from e and then to to get the string a plus a times a",
    "start": "1440640",
    "end": "1446880"
  },
  {
    "text": "it's a it's a it's a simpler grammar in a sense um but you there's another parse tree that'll give you the same",
    "start": "1446880",
    "end": "1453279"
  },
  {
    "text": "uh result and i've written that down below here upside down",
    "start": "1453279",
    "end": "1458559"
  },
  {
    "text": "um so uh the upper parse tree groups the times before the plus",
    "start": "1458559",
    "end": "1464640"
  },
  {
    "text": "or more in more inside uh than the plus but the lower parse tree",
    "start": "1464640",
    "end": "1470000"
  },
  {
    "text": "doesn't have that precedence built into it and can alternatively interpret the plus as being of higher precedence than",
    "start": "1470000",
    "end": "1476720"
  },
  {
    "text": "times and so in that sense we have here um a grammar which is um has two",
    "start": "1476720",
    "end": "1483200"
  },
  {
    "text": "interpretations for this um same string and we call that whoops we",
    "start": "1483200",
    "end": "1488880"
  },
  {
    "text": "call that an an ambiguous uh derivation ambiguously derived string",
    "start": "1488880",
    "end": "1496640"
  },
  {
    "text": "and the grammar itself is called an ambiguous grammar um",
    "start": "1496640",
    "end": "1502799"
  },
  {
    "text": "uh okay so let us continue on from that",
    "start": "1503360",
    "end": "1508720"
  },
  {
    "text": "by the way there's a question here that came in uh uh like for example a plus a is that",
    "start": "1508720",
    "end": "1515520"
  },
  {
    "text": "ambiguous in g2 no uh if you if you try to uh apply it",
    "start": "1515520",
    "end": "1521120"
  },
  {
    "text": "you'll see the way that g2 can produce a plus a to a plus a plus a",
    "start": "1521120",
    "end": "1527520"
  },
  {
    "text": "is going to group the first two and then the and then the the second one then the last one you can't you can't derive",
    "start": "1527520",
    "end": "1533279"
  },
  {
    "text": "things in multiple ways um i mean addition is associative but the grammar",
    "start": "1533279",
    "end": "1538480"
  },
  {
    "text": "doesn't it doesn't the grammar for the grammar um",
    "start": "1538480",
    "end": "1543520"
  },
  {
    "text": "it's going to have a prescribed order for the way things get interpreted there",
    "start": "1543520",
    "end": "1548640"
  },
  {
    "text": "okay um so that's ambiguity um so let's uh introduce push down automata um which",
    "start": "1548640",
    "end": "1556000"
  },
  {
    "text": "is going to be our automata counterpart for context-free languages",
    "start": "1556000",
    "end": "1563520"
  },
  {
    "text": "all right um so the way i'm going to introduce push-down automata uh sort of shifting gears here and now um",
    "start": "1563679",
    "end": "1570960"
  },
  {
    "text": "is by first uh giving a new view of finite automata",
    "start": "1570960",
    "end": "1578880"
  },
  {
    "text": "remember before when we presented a finite automaton we gave it in terms of a state diagram which i've kind of shown",
    "start": "1578880",
    "end": "1585200"
  },
  {
    "text": "here in miniature form on the picture um uh",
    "start": "1585200",
    "end": "1590960"
  },
  {
    "text": "we could do that for pushdown automata but the picture tends to be very complicated so i'm going to take a bit",
    "start": "1590960",
    "end": "1597360"
  },
  {
    "text": "of a higher level um uh description for pushdown automata",
    "start": "1597360",
    "end": "1602640"
  },
  {
    "text": "which is i'm calling a schematic view or a schematic diagram and there i'm really not going to be",
    "start": "1602640",
    "end": "1608240"
  },
  {
    "text": "showing you the individual states but i'm going to be showing you the individual components of the machine at",
    "start": "1608240",
    "end": "1613919"
  },
  {
    "text": "a sort of more of an abstract and from a more abstract perspective and so from that perspective um",
    "start": "1613919",
    "end": "1621150"
  },
  {
    "text": "[Music] a finite automaton has here what i'm going to call the finite control so i'm",
    "start": "1621150",
    "end": "1628000"
  },
  {
    "text": "going to be suppressing the details of the states in this pic in this picture i'm going to represent uh that those states as the",
    "start": "1628000",
    "end": "1635279"
  },
  {
    "text": "control of the um of the dfa or the nfa they're really going to be the same",
    "start": "1635279",
    "end": "1641039"
  },
  {
    "text": "from this pictorial point of view um the input is going to be appear on",
    "start": "1641039",
    "end": "1646960"
  },
  {
    "start": "1644000",
    "end": "1724000"
  },
  {
    "text": "as a string that's written down on what we're calling a tape again this is somewhat of an",
    "start": "1646960",
    "end": "1652840"
  },
  {
    "text": "anachronistic terminology back in my days people actually did feed their inputs",
    "start": "1652840",
    "end": "1658960"
  },
  {
    "text": "into computers on a tape sometimes we don't do that so much anymore but",
    "start": "1658960",
    "end": "1664159"
  },
  {
    "text": "that terminology has stuck and it's going to be a persisting um uh later on in the course too so you",
    "start": "1664159",
    "end": "1670640"
  },
  {
    "text": "might as well get used to it um so the input is going to appear on a tape or sometimes called an input tape um and",
    "start": "1670640",
    "end": "1677360"
  },
  {
    "text": "the way the machine actually will read that input whoops uh is going to have a head",
    "start": "1677360",
    "end": "1684799"
  },
  {
    "text": "which is going to be um starting at the left side and moving from left to right reading the symbols",
    "start": "1684799",
    "end": "1691120"
  },
  {
    "text": "on the that appear on the input tape one by one okay so this is our picture of a an",
    "start": "1691120",
    "end": "1697760"
  },
  {
    "text": "a finite automaton just redone from uh last time just a different way",
    "start": "1697760",
    "end": "1703360"
  },
  {
    "text": "of picturing it now that's going to be setting the stage for the picture of a",
    "start": "1703360",
    "end": "1708559"
  },
  {
    "text": "push down automaton because the push-on automaton is like a finite automaton but it has an extra feature has an extra",
    "start": "1708559",
    "end": "1716320"
  },
  {
    "text": "device attached to it and that's called a stack okay so here's a schematic diagram for",
    "start": "1716320",
    "end": "1722880"
  },
  {
    "text": "push down automaton and that's going to be a stack which is going to be",
    "start": "1722880",
    "end": "1729679"
  },
  {
    "start": "1724000",
    "end": "1839000"
  },
  {
    "text": "basically a form of auxiliary storage",
    "start": "1729679",
    "end": "1735520"
  },
  {
    "text": "now remember part of the limitation for a finite automaton was that we had a",
    "start": "1735520",
    "end": "1742000"
  },
  {
    "text": "limited amount of memory um so",
    "start": "1742000",
    "end": "1747279"
  },
  {
    "text": "we were not able to do some very simple things like counting because we had a limited memory",
    "start": "1747279",
    "end": "1752480"
  },
  {
    "text": "so the push-on automaton is going to be able to use its stack as a kind of unbounded memory",
    "start": "1752480",
    "end": "1758880"
  },
  {
    "text": "but a memory that's very restricted in the way it can be used so it's unlimited",
    "start": "1758880",
    "end": "1764240"
  },
  {
    "text": "but still restricted as we'll see so uh the way the push down automaton uses",
    "start": "1764240",
    "end": "1772240"
  },
  {
    "text": "um this extra memory on on what we're calling the stack or push down stack",
    "start": "1772240",
    "end": "1778720"
  },
  {
    "text": "is that you can write symbols um instead of only reading symbols but",
    "start": "1778720",
    "end": "1784880"
  },
  {
    "text": "those symbols can only be read at the very written or read at the very top",
    "start": "1784880",
    "end": "1791760"
  },
  {
    "text": "of this list of symbols and every time you add a new symbol the other symbols that are already there get",
    "start": "1791760",
    "end": "1798320"
  },
  {
    "text": "pushed down hence the name people also often refer to it as a stack of plates",
    "start": "1798320",
    "end": "1804320"
  },
  {
    "text": "uh in a cafeteria if you've ever seen those things or you can remember back to the days when we went to cafeteria uh",
    "start": "1804320",
    "end": "1810880"
  },
  {
    "text": "which getting further and further away but um uh if you have a cafeteria you had a",
    "start": "1810880",
    "end": "1816640"
  },
  {
    "text": "stack of plates and you know you as you removed plates from them they were on a spring and they kept coming up or if you",
    "start": "1816640",
    "end": "1822720"
  },
  {
    "text": "add more they would go down and it's the same idea imagine these symbols here are sort of on a um on a spring and the more",
    "start": "1822720",
    "end": "1829919"
  },
  {
    "text": "symbols you add them the more they go down uh or if you remove them by read and read them and remove them then they",
    "start": "1829919",
    "end": "1836159"
  },
  {
    "text": "move back up okay so a push out of tabaton operates like a",
    "start": "1836159",
    "end": "1842559"
  },
  {
    "start": "1839000",
    "end": "2562000"
  },
  {
    "text": "finite like a non-deterministic finite diameter as we'll see push down automata",
    "start": "1842559",
    "end": "1847679"
  },
  {
    "text": "for out for us are always going to be allowed to be non-deterministic so we're not going to be studying the",
    "start": "1847679",
    "end": "1854399"
  },
  {
    "text": "push on automata that are restricted to be only deterministic um uh i'll say more about that in a second",
    "start": "1854399",
    "end": "1860399"
  },
  {
    "text": "but like they operate like an nfa except they can write uh or",
    "start": "1860399",
    "end": "1866559"
  },
  {
    "text": "read symbols from the top of the stack and when they write they're adding the symbol on pushing down that stack and",
    "start": "1866559",
    "end": "1874320"
  },
  {
    "text": "when they're reading they're removing symbols from the stack and thereby lifting up the stack",
    "start": "1874320",
    "end": "1880559"
  },
  {
    "text": "okay we give them special names so those of you who have seen stacks already this is you know i'm sure old hat for you",
    "start": "1880559",
    "end": "1887760"
  },
  {
    "text": "uh but i'm sure now everyone has have seen stacks before so uh the special name for",
    "start": "1887760",
    "end": "1894799"
  },
  {
    "text": "writing onto a stack is called a push operation so that you're pushing a new symbol down on the top of the stack and",
    "start": "1894799",
    "end": "1901360"
  },
  {
    "text": "it pushes everything down whereas when you're reading a symbol and removing it from the top of the stack",
    "start": "1901360",
    "end": "1906799"
  },
  {
    "text": "that's called a pop so that's reading and removing we we always think of those as going",
    "start": "1906799",
    "end": "1912159"
  },
  {
    "text": "together writing and editing and reading and removing are combined i mean you might wonder why can't i just",
    "start": "1912159",
    "end": "1918640"
  },
  {
    "text": "read it and leave it alone and not just have remove it you uh no",
    "start": "1918640",
    "end": "1924000"
  },
  {
    "text": "you can get that effect by reading it and then uh which removes it and then putting it back if you really want it to",
    "start": "1924000",
    "end": "1929360"
  },
  {
    "text": "stay there but the way we're setting it up is that reading comes with removing writing",
    "start": "1929360",
    "end": "1935840"
  },
  {
    "text": "comes with adding okay and they're called pushing and popping",
    "start": "1935840",
    "end": "1941200"
  },
  {
    "text": "okay so let's do an example um so we have here a push down automaton",
    "start": "1941200",
    "end": "1947440"
  },
  {
    "text": "for a language we'll call d it's a we've seen that language before it's this uh it was um actually we use",
    "start": "1947440",
    "end": "1955200"
  },
  {
    "text": "the same uh letter for it the strings of zeros followed by ones where the numbers",
    "start": "1955200",
    "end": "1960320"
  },
  {
    "text": "are the same of the two so zero to the k one to the k we couldn't do that with a finite",
    "start": "1960320",
    "end": "1965440"
  },
  {
    "text": "automaton we will be able to do that with a push down automaton um",
    "start": "1965440",
    "end": "1971600"
  },
  {
    "text": "and here i uh um i thought i wrote down the input here",
    "start": "1971600",
    "end": "1978000"
  },
  {
    "text": "but okay so the basic idea is i'm going to give you a",
    "start": "1978000",
    "end": "1983039"
  },
  {
    "text": "uh an input now and the pushdown of the tombiton is supposed to test",
    "start": "1983039",
    "end": "1988720"
  },
  {
    "text": "whether that input is in the language whether it's of this form um",
    "start": "1988720",
    "end": "1994720"
  },
  {
    "text": "now it has the ability to use the stack because you know it's going to have to",
    "start": "1994720",
    "end": "1999919"
  },
  {
    "text": "count how many zeros it has and so the way it's going to do it is you know i have a bunch of zeros hopefully and then",
    "start": "1999919",
    "end": "2005519"
  },
  {
    "text": "a bunch of ones and you want to see that they're uh of the same number it's going to take the zeros and store them on the",
    "start": "2005519",
    "end": "2011600"
  },
  {
    "text": "stack until it sees a one and then one's going to start to read the ones and it's going to remove the",
    "start": "2011600",
    "end": "2017760"
  },
  {
    "text": "zeros matching them off one to one with the ones that it's seen okay",
    "start": "2017760",
    "end": "2023679"
  },
  {
    "text": "so um you initially first read the zeros and push them onto",
    "start": "2023679",
    "end": "2028799"
  },
  {
    "text": "the stack until you read a one and then you read the ones uh while popping zeros",
    "start": "2028799",
    "end": "2033840"
  },
  {
    "text": "from the stack and you enter the accept state if the stack is empty",
    "start": "2033840",
    "end": "2039120"
  },
  {
    "text": "just like with a finite automaton the except entering the accept state only counts when you're at the end of the",
    "start": "2039279",
    "end": "2045600"
  },
  {
    "text": "input okay so um without me needing to say",
    "start": "2045600",
    "end": "2052560"
  },
  {
    "text": "anything it's really saying you enter the accept state if the stack is empty at the end of the input string but",
    "start": "2052560",
    "end": "2058320"
  },
  {
    "text": "that's kind of implicit because it only takes effect at the end of the input string if you enter an accept",
    "start": "2058320",
    "end": "2063760"
  },
  {
    "text": "state alone in the middle somewhere it doesn't matter it doesn't affect anything um",
    "start": "2063760",
    "end": "2070079"
  },
  {
    "text": "okay uh with that we're going to take a little break and then we'll be back uh shortly",
    "start": "2070079",
    "end": "2076398"
  },
  {
    "text": "to look at push down automata again in a more uh with a more formal definition",
    "start": "2076399",
    "end": "2082320"
  },
  {
    "text": "um let me put that's going to be five minutes so if i can figure out how to get my timer screen up here yes",
    "start": "2082320",
    "end": "2089440"
  },
  {
    "text": "and we will uh the camera when the candle burns down to",
    "start": "2089440",
    "end": "2094960"
  },
  {
    "text": "nothing we will return and continue",
    "start": "2094960",
    "end": "2102119"
  },
  {
    "text": "okay our candle has burned down and has gone out i think i",
    "start": "2107440",
    "end": "2113359"
  },
  {
    "text": "never actually watched to see what would happen at the end uh so um we're good to go let's continue",
    "start": "2113359",
    "end": "2120880"
  },
  {
    "text": "um uh good and let me put myself back in there",
    "start": "2120880",
    "end": "2128800"
  },
  {
    "text": "all righty um [Music] so we were doing push down automata and",
    "start": "2129040",
    "end": "2134320"
  },
  {
    "text": "we just did that example of zero to the k1 to the k now that you have a stack",
    "start": "2134320",
    "end": "2140240"
  },
  {
    "text": "we can do uh all sorts of fancy things that fina tamara could not do",
    "start": "2140240",
    "end": "2145920"
  },
  {
    "text": "just with their limited memory okay so let's take a look at how we define",
    "start": "2145920",
    "end": "2152400"
  },
  {
    "text": "push down automata um [Music]",
    "start": "2152400",
    "end": "2157599"
  },
  {
    "text": "so now uh push down automata is actually going to be a six tuple so it's a little bit got some",
    "start": "2157599",
    "end": "2163680"
  },
  {
    "text": "fancier stuff here to deal with not too much but a little bit um",
    "start": "2163680",
    "end": "2169440"
  },
  {
    "text": "and uh so it has uh let's look at these a little bit more carefully since there's some novelty here",
    "start": "2169440",
    "end": "2176400"
  },
  {
    "text": "we have the uh input alphabet just as we had before uh sigma",
    "start": "2176400",
    "end": "2182000"
  },
  {
    "text": "but we also have gamma which is the alphabet for uh using the stack",
    "start": "2182000",
    "end": "2188640"
  },
  {
    "text": "now um you might ask why don't we just use the same alphabet well it's really a matter of convenience um",
    "start": "2188640",
    "end": "2195119"
  },
  {
    "text": "that we would like to be able to have other symbols that uh could include the",
    "start": "2195119",
    "end": "2202079"
  },
  {
    "text": "input alphabet but could include other things as well so it just gives you more flexibility in terms of what you're",
    "start": "2202079",
    "end": "2207119"
  },
  {
    "text": "going to be writing on the stack um okay the transition function more",
    "start": "2207119",
    "end": "2213760"
  },
  {
    "text": "complicated uh so i think i don't know if i'm going to even say what the other things are but you know these are the accepting states this is the starting",
    "start": "2213760",
    "end": "2220240"
  },
  {
    "text": "state so that's um the same as before but the transition function is is a much",
    "start": "2220240",
    "end": "2226839"
  },
  {
    "text": "different animal here in a push-down automaton so let's just try to uh unpack",
    "start": "2226839",
    "end": "2232320"
  },
  {
    "text": "that and understand what it's saying the transition function tells us how the",
    "start": "2232320",
    "end": "2238000"
  },
  {
    "text": "machine operates how it goes from state to state how it's going to read the input how it",
    "start": "2238000",
    "end": "2243440"
  },
  {
    "text": "reads from the stack and what it might write on the stack too because that's going to all happen under program",
    "start": "2243440",
    "end": "2248880"
  },
  {
    "text": "control so um what this means here",
    "start": "2248880",
    "end": "2255119"
  },
  {
    "text": "is that you know when the machine is in a particular state",
    "start": "2255119",
    "end": "2261119"
  },
  {
    "text": "um reading a particular input symbol let's ignore the empty string uh",
    "start": "2261520",
    "end": "2266880"
  },
  {
    "text": "subscript for the monument so it's in a particular state reading a particular input symbol and",
    "start": "2266880",
    "end": "2273280"
  },
  {
    "text": "with a certain stack symbol appearing at the top of the stack",
    "start": "2273280",
    "end": "2278960"
  },
  {
    "text": "so that's all information that's available to the controller of this",
    "start": "2278960",
    "end": "2284400"
  },
  {
    "text": "pushdown automaton the transition function",
    "start": "2284400",
    "end": "2289599"
  },
  {
    "text": "the current state the next input symbol and the symbol at the top of the stack",
    "start": "2289599",
    "end": "2294960"
  },
  {
    "text": "and once we have that we know what new state we can go into",
    "start": "2294960",
    "end": "2300400"
  },
  {
    "text": "and what new symbol we can write on the top of the stack",
    "start": "2300400",
    "end": "2306560"
  },
  {
    "text": "okay so that's what the uh um right-hand side of this function",
    "start": "2306800",
    "end": "2312240"
  },
  {
    "text": "specification means so this is where uh kind of the input to the function this is going to be the output of the",
    "start": "2312240",
    "end": "2318160"
  },
  {
    "text": "function state entry and a new symbol to appear on the stack so this is the",
    "start": "2318160",
    "end": "2323280"
  },
  {
    "text": "popping symbol this is the pushing symbol so now there are two things that bear",
    "start": "2323280",
    "end": "2328400"
  },
  {
    "text": "explanation here first of all now this is this is a power set",
    "start": "2328400",
    "end": "2333680"
  },
  {
    "text": "so this is going to be representing as we did before um a non-deterministic machine",
    "start": "2333680",
    "end": "2340400"
  },
  {
    "text": "we may have several possibilities and we're going to represent that as a set of possibilities",
    "start": "2340400",
    "end": "2346720"
  },
  {
    "text": "for the machine that it could go to at any point",
    "start": "2346720",
    "end": "2351680"
  },
  {
    "text": "i will give an example of how a push down automaton uses its non-determinism in a minute",
    "start": "2352000",
    "end": "2358560"
  },
  {
    "text": "the other thing is is these epsilons so we have to understand why they are there and we remember we had them for the nfas",
    "start": "2358560",
    "end": "2366240"
  },
  {
    "text": "corresponding to when the nfa had an epsilon transition",
    "start": "2366240",
    "end": "2371359"
  },
  {
    "text": "an empty transition so it could go along that transition without reading any input",
    "start": "2371359",
    "end": "2377359"
  },
  {
    "text": "so this is going to play the same role here so if you have um instead of an input",
    "start": "2377359",
    "end": "2383839"
  },
  {
    "text": "symbol from sigma appearing in this um uh",
    "start": "2383839",
    "end": "2388960"
  },
  {
    "text": "part of the you know uh for the for the transition function instead you have an",
    "start": "2388960",
    "end": "2394800"
  },
  {
    "text": "you have an epsilon appearing that means that the transition that that",
    "start": "2394800",
    "end": "2400240"
  },
  {
    "text": "move of the machine can happen without reading any input symbol",
    "start": "2400240",
    "end": "2405920"
  },
  {
    "text": "just like for the nfa's or if you have an epsilon appearing for",
    "start": "2406240",
    "end": "2412000"
  },
  {
    "text": "the stack symbol that means you can make that transition without reading any stack symbol so any whatever's sitting on the top of",
    "start": "2412000",
    "end": "2418480"
  },
  {
    "text": "the stack it doesn't matter the machine can make that move",
    "start": "2418480",
    "end": "2423760"
  },
  {
    "text": "and it won't read anything either we're not going to pop anything it's just going to uh be proceeding without",
    "start": "2423760",
    "end": "2429119"
  },
  {
    "text": "looking at the stack at all or it might have both of them which case it's going to go from one state to",
    "start": "2429119",
    "end": "2434560"
  },
  {
    "text": "another state without looking at the input or at the top of the stack so um",
    "start": "2434560",
    "end": "2440560"
  },
  {
    "text": "that's what the possibility of epsilon means for the um",
    "start": "2440560",
    "end": "2447040"
  },
  {
    "text": "for the transition function in the in those places the epsilon appearing over here means",
    "start": "2447040",
    "end": "2452480"
  },
  {
    "text": "something a little different but very similar what that means is that um [Music]",
    "start": "2452480",
    "end": "2459200"
  },
  {
    "text": "we won't write anything on the top of the stack that's going to be we will go to a new state but without",
    "start": "2459200",
    "end": "2465920"
  },
  {
    "text": "doing any writing so we'll leave the stack alone um so here means we're not going to read",
    "start": "2465920",
    "end": "2472000"
  },
  {
    "text": "anything if it's in this position in this position means we're not going to write anything",
    "start": "2472000",
    "end": "2478720"
  },
  {
    "text": "okay so all of those things are valid and legal from the perspective of you",
    "start": "2478800",
    "end": "2484000"
  },
  {
    "text": "know constructing a push-down automaton and i've kind of illustrated here you know just with a little bit of an",
    "start": "2484000",
    "end": "2490000"
  },
  {
    "text": "example if you have delta that applies to some state q",
    "start": "2490000",
    "end": "2495839"
  },
  {
    "text": "reading an input symbol a and popping a c from the top of the stack",
    "start": "2495839",
    "end": "2501359"
  },
  {
    "text": "then you might have let's say in this case two possibilities that you might end up going to you might end up going",
    "start": "2501359",
    "end": "2506800"
  },
  {
    "text": "to states r1 or to states r2 and in the former case you'll end up",
    "start": "2506800",
    "end": "2511920"
  },
  {
    "text": "writing a d pushing a d onto this top of the stack and in the latter case you would be pushing an e onto the top of",
    "start": "2511920",
    "end": "2518560"
  },
  {
    "text": "the stack okay so this is i'm trying to help you",
    "start": "2518560",
    "end": "2523680"
  },
  {
    "text": "look at this notation you can you know you know i hope this is clear to you um",
    "start": "2523680",
    "end": "2529839"
  },
  {
    "text": "i'm sure for some of you it's too slow but others of you i'm trying to help along but if you're really struggling",
    "start": "2529839",
    "end": "2536640"
  },
  {
    "text": "with this notation at this point you know you really have to going to have to dig in and make sure you follow it",
    "start": "2536640",
    "end": "2541839"
  },
  {
    "text": "because it's only going to get harder from there i'm going to stop being uh going over these these kinds of points",
    "start": "2541839",
    "end": "2547839"
  },
  {
    "text": "and if you're still struggling you can't get it this is not the right class for you i'll just i'll be honest",
    "start": "2547839",
    "end": "2553599"
  },
  {
    "text": "um because we're just gonna be taking off like you know we're gonna",
    "start": "2553599",
    "end": "2559680"
  },
  {
    "text": "start to accelerate fairly quickly okay so it's a non-deterministic machine",
    "start": "2559680",
    "end": "2565599"
  },
  {
    "start": "2562000",
    "end": "2650000"
  },
  {
    "text": "um we accept uh like we did before uh there might be several different threads",
    "start": "2565599",
    "end": "2571200"
  },
  {
    "text": "of the computation you're going to end up accepting um if some of the threads",
    "start": "2571200",
    "end": "2576880"
  },
  {
    "text": "or what at least one of the threads end up ends up in an accept state at the end of the input string",
    "start": "2576880",
    "end": "2583040"
  },
  {
    "text": "okay that's when we machine overall accepts it's just the way we normally think of non-determinism",
    "start": "2583280",
    "end": "2590000"
  },
  {
    "text": "again you can use the models that we had before in terms of guessing or parallelism whatever works for you and",
    "start": "2590000",
    "end": "2595920"
  },
  {
    "text": "sometimes different things work in different different different occasions uh but that's how non-determinism works",
    "start": "2595920",
    "end": "2601359"
  },
  {
    "text": "we'll do an example now okay here is a push on automaton for a different",
    "start": "2601359",
    "end": "2606880"
  },
  {
    "text": "language we haven't seen before i don't think well maybe we have um which is",
    "start": "2606880",
    "end": "2613119"
  },
  {
    "text": "um going to be using its non-determinism in an essential way this is a",
    "start": "2613119",
    "end": "2619760"
  },
  {
    "text": "language that is going to where non-determinism is going to be critical um without it you can't uh a deterministic",
    "start": "2619760",
    "end": "2626720"
  },
  {
    "text": "push on automaton which is something by the way that people study um and there's a section of my book about that section",
    "start": "2626720",
    "end": "2633040"
  },
  {
    "text": "2.4 because it has relevance to applications we're not going to address that in this course so you can just skip",
    "start": "2633040",
    "end": "2638960"
  },
  {
    "text": "section 2.4 it's pretty technical uh i'll have to say um but still quite interesting and beautiful if",
    "start": "2638960",
    "end": "2645119"
  },
  {
    "text": "you're if you like that stuff but it's technical we won't do it um",
    "start": "2645119",
    "end": "2650400"
  },
  {
    "start": "2650000",
    "end": "3078000"
  },
  {
    "text": "so here is um this input string w w reverse",
    "start": "2650400",
    "end": "2657040"
  },
  {
    "text": "for all possible w's over our alphabet zero one and what w reverse by the way",
    "start": "2657040",
    "end": "2662400"
  },
  {
    "text": "means is writing w backwards uh so this is all strings followed by",
    "start": "2662400",
    "end": "2667599"
  },
  {
    "text": "a reversal of the same string okay the string written backwards um",
    "start": "2667599",
    "end": "2673839"
  },
  {
    "text": "really you can think of these as uh um you know so these are strings that um",
    "start": "2673839",
    "end": "2680000"
  },
  {
    "text": "well here's an example like 0 1 1 1 1 0 the string written backwards so",
    "start": "2680000",
    "end": "2685680"
  },
  {
    "text": "this is a string in the language appearing on a tape as i as i described",
    "start": "2685680",
    "end": "2691200"
  },
  {
    "text": "okay so how is the machine going to um recognize this language it's kind of pretty similar somewhat similar to",
    "start": "2691200",
    "end": "2697119"
  },
  {
    "text": "before but with one important difference um and if you imagine i think again i",
    "start": "2697119",
    "end": "2704000"
  },
  {
    "text": "like to use this kind of and anthropomorphizing these things putting yourself in the place of the machine",
    "start": "2704000",
    "end": "2710480"
  },
  {
    "text": "and thinking how you would do it um so if you imagine getting these symbols",
    "start": "2710480",
    "end": "2715839"
  },
  {
    "text": "one by one zero one one you don't know what's coming next as you're getting the symbols",
    "start": "2715839",
    "end": "2720960"
  },
  {
    "text": "you have to figure out how to match off the second half with the first half so you're gonna put the first half on the",
    "start": "2720960",
    "end": "2726960"
  },
  {
    "text": "stack and then you're gonna remove the first half and match it off with the with the",
    "start": "2726960",
    "end": "2734160"
  },
  {
    "text": "with the second half con conveniently the first half comes out backwards the stack is a first in",
    "start": "2734160",
    "end": "2740800"
  },
  {
    "text": "last out kind of thing so um it comes out in reverse order so that's",
    "start": "2740800",
    "end": "2746560"
  },
  {
    "text": "perfect for matching off with the second half uh but the tricky part",
    "start": "2746560",
    "end": "2752880"
  },
  {
    "text": "with this language is how do you know when you're at the when you're at the middle because you",
    "start": "2752880",
    "end": "2758560"
  },
  {
    "text": "don't get to see um the rest you only get to see what you've seen so",
    "start": "2758560",
    "end": "2763839"
  },
  {
    "text": "far you don't know what's coming so you know uh",
    "start": "2763839",
    "end": "2770079"
  },
  {
    "text": "when you read that second one at this point you read zero one one now you're reading that second one you don't know",
    "start": "2770079",
    "end": "2777359"
  },
  {
    "text": "that perhaps there's just going to be a zero following that and it's going to be all so maybe you should be deciding to that",
    "start": "2777359",
    "end": "2784480"
  },
  {
    "text": "this point here that i've marked um uh is the",
    "start": "2784480",
    "end": "2790560"
  },
  {
    "text": "midpoint and you you put zero one on the tape and then start",
    "start": "2790560",
    "end": "2795599"
  },
  {
    "text": "popping the second the the second one and matching it off with the first one um that might that would",
    "start": "2795599",
    "end": "2801920"
  },
  {
    "text": "be a tempting thing to do but you just don't know um and that's where the non-determinism",
    "start": "2801920",
    "end": "2807599"
  },
  {
    "text": "is going to be essential so let me let me write down more of this so what you're going to do is you're going to read and push input symbols but not",
    "start": "2807599",
    "end": "2814000"
  },
  {
    "text": "deterministically guessing that you're at the middle so you're going to now deterministically either repeat that and",
    "start": "2814000",
    "end": "2819200"
  },
  {
    "text": "continue to read and push symbols onto the stack or you're going to go to two deciding that",
    "start": "2819200",
    "end": "2825839"
  },
  {
    "text": "or guessing that you're at the midpoint and now it's time to start reading and",
    "start": "2825839",
    "end": "2831200"
  },
  {
    "text": "popping instead of reading and pushing so you're going to read input symbols and popping that popping the stack",
    "start": "2831200",
    "end": "2836880"
  },
  {
    "text": "symbols comparing the the two the the symbols that you're reading with the top the symbols you're",
    "start": "2836880",
    "end": "2842960"
  },
  {
    "text": "removing from the stack if they ever disagree then this thread of the non-determinism",
    "start": "2842960",
    "end": "2848160"
  },
  {
    "text": "rejects because either the input is not in the language or at least you've made a wrong choice",
    "start": "2848160",
    "end": "2855119"
  },
  {
    "text": "as to where the midpoint is um",
    "start": "2855119",
    "end": "2860160"
  },
  {
    "text": "and then you're going to enter the accept state if the stack is empty and ignore this part for the moment of",
    "start": "2860160",
    "end": "2866480"
  },
  {
    "text": "this software reference uh let's just um i'll speak to that in a second but um i just want to make sure",
    "start": "2866480",
    "end": "2874000"
  },
  {
    "text": "we understand that at an intuitive level how this machine is using its non-determinism",
    "start": "2874000",
    "end": "2880400"
  },
  {
    "text": "to uh recognize this language because the non-determinism is critical and it's",
    "start": "2880400",
    "end": "2885599"
  },
  {
    "text": "important that you understand it um so let me just make some side comments and then we'll come back to this",
    "start": "2885599",
    "end": "2890960"
  },
  {
    "text": "software remark so first of all one question that comes up a lot",
    "start": "2890960",
    "end": "2898559"
  },
  {
    "text": "well um not paying attention to the chat here sorry so if you're not getting answer from me try the tas but um one of",
    "start": "2899599",
    "end": "2906240"
  },
  {
    "text": "the uh one of the um questions that comes up a",
    "start": "2906240",
    "end": "2911839"
  },
  {
    "text": "lot when they're thinking about non-determinism for push down automata is what happens to the stack",
    "start": "2911839",
    "end": "2918319"
  },
  {
    "text": "the stack gets replicated in the non-determinism every time the",
    "start": "2918319",
    "end": "2923520"
  },
  {
    "text": "machine forks just like everything else gets replicated so an entire every time there's a fork in the non-determinism",
    "start": "2923520",
    "end": "2930400"
  },
  {
    "text": "and the machine branches into multiple possibilities the entire machine",
    "start": "2930400",
    "end": "2935839"
  },
  {
    "text": "replicates the current state the current position of the head the what's the",
    "start": "2935839",
    "end": "2940880"
  },
  {
    "text": "stack and its contents all of that gets replicated um and the two",
    "start": "2940880",
    "end": "2946079"
  },
  {
    "text": "um sides of the the two branches or the two sides of the fork each go on",
    "start": "2946079",
    "end": "2952240"
  },
  {
    "text": "independently in their merry way okay doing their own thing independently and then if any one of them accepts",
    "start": "2952240",
    "end": "2958640"
  },
  {
    "text": "that's the only way there's sort of a kind of a communication because the one that accepts raises the flag and then uh",
    "start": "2958640",
    "end": "2964880"
  },
  {
    "text": "the overall machine is set to accept okay so the non-deterministic forks replicate the stack of saying it uh just",
    "start": "2964880",
    "end": "2972000"
  },
  {
    "text": "want to make sure you've got that um and then this language requires non-determinism that that i said earlier",
    "start": "2972000",
    "end": "2978319"
  },
  {
    "text": "um so our pda push down time model is going to be non-deterministic i mean you might have examples which are",
    "start": "2978319",
    "end": "2983680"
  },
  {
    "text": "deterministic but the model is going to always allow non-determinism okay what's this bit about the software",
    "start": "2983680",
    "end": "2990400"
  },
  {
    "text": "so if you look at this formal definition here it doesn't have anywhere in it the",
    "start": "2990400",
    "end": "2995599"
  },
  {
    "text": "ability to test if the stack is empty that's not part of the hardware specification at least as we are",
    "start": "2995599",
    "end": "3002480"
  },
  {
    "text": "describing it for a push-down automaton you can might imagine someone somebody else describes push on the tama in some",
    "start": "3002480",
    "end": "3008319"
  },
  {
    "text": "other way which gives that as a primitive but we're not going to do that why because we don't need a primitive for that you can get the effect",
    "start": "3008319",
    "end": "3016559"
  },
  {
    "text": "of testing if there's an empty stack even if you don't have that as a primitive for the machine",
    "start": "3016559",
    "end": "3023280"
  },
  {
    "text": "because uh what you could do is you can start the machine off when it very at the very",
    "start": "3023280",
    "end": "3029040"
  },
  {
    "text": "first thing it does is it writes a special symbol to mark um the bottom you",
    "start": "3029040",
    "end": "3034480"
  },
  {
    "text": "know what's going to eventually be the bottom of the stack there's going to be some special symbol maybe a dollar sign symbol",
    "start": "3034480",
    "end": "3039839"
  },
  {
    "text": "that's the very first thing that the machine does and then it proceeds as before if ever sees that dollar sign",
    "start": "3039839",
    "end": "3044960"
  },
  {
    "text": "symbol again it knows the stack is effectively empty",
    "start": "3044960",
    "end": "3050078"
  },
  {
    "text": "okay so you can get the effect of testing for the stack being empty even if you don't have a primitive for that",
    "start": "3050240",
    "end": "3056160"
  },
  {
    "text": "and we're not going to actually fuss about some details like that um so you",
    "start": "3056160",
    "end": "3061599"
  },
  {
    "text": "can use when you're writing your homework sets you can just use the assumption that you can test for empty",
    "start": "3061599",
    "end": "3066960"
  },
  {
    "text": "stack which is what i'm going to do myself okay um",
    "start": "3066960",
    "end": "3073440"
  },
  {
    "text": "so uh let's continue on um all right so",
    "start": "3073440",
    "end": "3079119"
  },
  {
    "start": "3078000",
    "end": "3111000"
  },
  {
    "text": "yeah so now what we're going to do we're going to prove our one so far we really haven't proved anything",
    "start": "3079119",
    "end": "3084319"
  },
  {
    "text": "we've just given some definitions and some examples today was going to now we're going to come to our big theorem",
    "start": "3084319",
    "end": "3090800"
  },
  {
    "text": "which actually is um important and has some meat to it um and that is",
    "start": "3090800",
    "end": "3096640"
  },
  {
    "text": "how do we convert you know i claim that to put context-free grammars and push down automata are equivalent",
    "start": "3096640",
    "end": "3102800"
  },
  {
    "text": "well we're going to prove that equivalence in one direction converting the grammars to push down automata",
    "start": "3102800",
    "end": "3109200"
  },
  {
    "text": "okay so um let me show you how that goes in some ways",
    "start": "3109200",
    "end": "3115200"
  },
  {
    "text": "um it's a nice proof not super complicated but it has some meat to it",
    "start": "3115200",
    "end": "3120960"
  },
  {
    "text": "uh so if i give you a grammar here what i'm going to tell you how to do is",
    "start": "3120960",
    "end": "3126400"
  },
  {
    "text": "convert that grammar into push down automaton which does the same language",
    "start": "3126400",
    "end": "3132319"
  },
  {
    "text": "okay so if you're checked out for a minute please come back because we're sort of starting this",
    "start": "3132319",
    "end": "3138079"
  },
  {
    "text": "topic now that you can think a bit about this good good uh re-entry point if you're",
    "start": "3138079",
    "end": "3143280"
  },
  {
    "text": "sort of uh been doing something else which i can't tell good thing uh",
    "start": "3143280",
    "end": "3149040"
  },
  {
    "text": "so all right so converting a given grammar to a push down automaton how is",
    "start": "3149040",
    "end": "3154480"
  },
  {
    "text": "that going to work so the idea is okay",
    "start": "3154480",
    "end": "3160240"
  },
  {
    "text": "actually before i tell you the idea let's just think about it together again i like to think about the push",
    "start": "3160240",
    "end": "3166640"
  },
  {
    "text": "down automaton building a push on automaton the way you would do it so",
    "start": "3166640",
    "end": "3172079"
  },
  {
    "text": "a grammar is a generation device it generates strings a push down automaton",
    "start": "3172079",
    "end": "3177599"
  },
  {
    "text": "or thinking about it as you you're a recognizer you're given an input and you want to know is it in the language so",
    "start": "3177599",
    "end": "3183760"
  },
  {
    "text": "you want to know is it possible for that grammar to generate that input you're",
    "start": "3183760",
    "end": "3188960"
  },
  {
    "text": "given so how are you going how are you going to how are you going to do that um and",
    "start": "3188960",
    "end": "3194960"
  },
  {
    "text": "uh are you going how are you going to um test if the",
    "start": "3194960",
    "end": "3201359"
  },
  {
    "text": "input is in the language of the grammar well the thing that you would naturally",
    "start": "3201359",
    "end": "3206720"
  },
  {
    "text": "do is you say well can i derive that string using the rules of the grammar let me start with the start string",
    "start": "3206720",
    "end": "3213359"
  },
  {
    "text": "and try to do substitutions and see if i get the string i'm given",
    "start": "3213359",
    "end": "3219359"
  },
  {
    "text": "and if i can get it then i know it's in the language right that's a natural thing to do",
    "start": "3219359",
    "end": "3224720"
  },
  {
    "text": "you're just going to try try to do so you know try to do the substitutions even get to the string now the thing is",
    "start": "3224720",
    "end": "3230160"
  },
  {
    "text": "there are many there might be many different substitutions that you could make and you know that seems like a really",
    "start": "3230160",
    "end": "3235839"
  },
  {
    "text": "challenging uh hard thing to figure out which substitutions to use among the many possibilities that's where",
    "start": "3235839",
    "end": "3240880"
  },
  {
    "text": "non-determinism is going to come in because you can think of yourself as guessing which substitutions to make and",
    "start": "3240880",
    "end": "3246720"
  },
  {
    "text": "you're always going to make the right guess so the choices of which substitutions to make that's not going to be a",
    "start": "3246720",
    "end": "3253520"
  },
  {
    "text": "problem for you that's going to be managed by the non-determinist so imagine you're always going to make the right substitution but now the challenge",
    "start": "3253520",
    "end": "3260400"
  },
  {
    "text": "is how do you keep track of the intermediate results as you're doing those substitutions",
    "start": "3260400",
    "end": "3268079"
  },
  {
    "text": "um and that's where the stack is going to come",
    "start": "3268240",
    "end": "3273359"
  },
  {
    "text": "in the machine is going to write down those intermediate results on the stack",
    "start": "3273359",
    "end": "3279359"
  },
  {
    "text": "but even there there's a subtlety that's an important subtlety that you have to",
    "start": "3279359",
    "end": "3284480"
  },
  {
    "text": "look at so let's try pulling that together so far before i get to that subtlety",
    "start": "3284480",
    "end": "3290160"
  },
  {
    "text": "uh okay so as i mentioned um uh",
    "start": "3290160",
    "end": "3295760"
  },
  {
    "text": "the push down automaton is is going to start out with the starting variable and is going to guess to be guessing the substitutions to make it's going to keep",
    "start": "3295760",
    "end": "3302640"
  },
  {
    "text": "the intermediate results on the stack when it's done doing all the substitutions and it has only terminal",
    "start": "3302640",
    "end": "3308880"
  },
  {
    "text": "strings on the stack it can compare with the input and see if it got the right thing so if it made it all the right guesses",
    "start": "3308880",
    "end": "3315040"
  },
  {
    "text": "so you think of it as guessing doing the right guesses but in the end you have to check to make sure that you've got the",
    "start": "3315040",
    "end": "3320799"
  },
  {
    "text": "right the you that you did all the right thing and you accept when when things um have matched up you know you and you",
    "start": "3320799",
    "end": "3326960"
  },
  {
    "text": "made all the right guesses so you have to in the end you have to check that you actually got that input uh",
    "start": "3326960",
    "end": "3333359"
  },
  {
    "text": "from doing those substitutions okay so let's let's let's try to see",
    "start": "3333359",
    "end": "3339359"
  },
  {
    "start": "3335000",
    "end": "3599000"
  },
  {
    "text": "this operating in action and then you'll see the subtlety the the delicacy the the",
    "start": "3339359",
    "end": "3345920"
  },
  {
    "text": "the the the a problem that's going to arise hopefully you're following at least in",
    "start": "3345920",
    "end": "3351680"
  },
  {
    "text": "part what i'm just saying so far okay so here is the input we do know that that's an input in the",
    "start": "3351680",
    "end": "3358400"
  },
  {
    "text": "language of the we we've been seeing this example multiple times so here's the input appearing on the input tape a",
    "start": "3358400",
    "end": "3363920"
  },
  {
    "text": "plus a times a now the push on automaton is supposed to be accepting that input because it's in",
    "start": "3363920",
    "end": "3371119"
  },
  {
    "text": "the language of the ground okay so it's going to operate by first",
    "start": "3371119",
    "end": "3376559"
  },
  {
    "text": "writing to start off the starting variable on the stack",
    "start": "3376559",
    "end": "3382559"
  },
  {
    "text": "and then doing the substitutions as we're going along okay so um",
    "start": "3382559",
    "end": "3388720"
  },
  {
    "text": "we're going to substitute we we we uh e goes to e plus t so we do that first substitution",
    "start": "3388720",
    "end": "3395200"
  },
  {
    "text": "um and then we do the next substitution here the e",
    "start": "3395200",
    "end": "3400319"
  },
  {
    "text": "so i'm i'm if you're looking at this tree here that means this is the right tree for that uh",
    "start": "3400319",
    "end": "3407200"
  },
  {
    "text": "for that input so we we substitute e by t uh so far so good the automaton can do",
    "start": "3407200",
    "end": "3413760"
  },
  {
    "text": "to make that substitution then the next substitution is going to be a little uh so we're where e plus t",
    "start": "3413760",
    "end": "3421040"
  },
  {
    "text": "we did we substitute here we got t plus t and now we're going to substitute the t times f which is this t over here we",
    "start": "3421040",
    "end": "3428720"
  },
  {
    "text": "want to substitute that and that appears as t times f now on the stack",
    "start": "3428720",
    "end": "3435039"
  },
  {
    "text": "now if you're following me you should be suddenly getting nervous",
    "start": "3435200",
    "end": "3440799"
  },
  {
    "text": "because we just cheated it's okay",
    "start": "3440799",
    "end": "3447280"
  },
  {
    "text": "um doing substitution doing these replacements at the very top of the stack because the push down automaton",
    "start": "3447280",
    "end": "3453440"
  },
  {
    "text": "has access to the top that's how stacks work but it does not have access deep down",
    "start": "3453440",
    "end": "3459680"
  },
  {
    "text": "within the stack that is uh not house style that is not how",
    "start": "3459680",
    "end": "3464960"
  },
  {
    "text": "stacks work so that's cheating but ignoring the cheating for the minute if",
    "start": "3464960",
    "end": "3470559"
  },
  {
    "text": "you could replace those um do those substitutions deep down within",
    "start": "3470559",
    "end": "3476160"
  },
  {
    "text": "the stack this would all work we would be good you would do the substitutions uh one after another until you ended up",
    "start": "3476160",
    "end": "3483200"
  },
  {
    "text": "with no uh variables and then you have the string here and you're going to match it off and compare it with the",
    "start": "3483200",
    "end": "3489200"
  },
  {
    "text": "input it's all done in the right way so that the things are in the right order so the you know the",
    "start": "3489200",
    "end": "3495440"
  },
  {
    "text": "after all the substitutions you'd have a plus a times a sitting here on the stack you match you compare that with the input it's going to match up and you'll",
    "start": "3495440",
    "end": "3502079"
  },
  {
    "text": "end up accepting all good so how do we deal with that problem here problem access below the",
    "start": "3502079",
    "end": "3508079"
  },
  {
    "text": "stack of step top of stack is cheating what are we going to do instead",
    "start": "3508079",
    "end": "3513280"
  },
  {
    "text": "so the idea is actually pretty simple well if you've understood what i've said so far the you know fixing that is",
    "start": "3513280",
    "end": "3519440"
  },
  {
    "text": "actually not too bad um uh uh",
    "start": "3519440",
    "end": "3524799"
  },
  {
    "text": "sort of fading out here uh put some more light on the on my image",
    "start": "3524799",
    "end": "3530720"
  },
  {
    "text": "um so how do we do that uh how do we get the effect of the access",
    "start": "3530720",
    "end": "3537440"
  },
  {
    "text": "below the top of the stack and the way we're going to do that is um",
    "start": "3537440",
    "end": "3543040"
  },
  {
    "text": "by making the obs what we're going to do we're only going to do substitutions that we can make at the top of the stack",
    "start": "3543040",
    "end": "3548960"
  },
  {
    "text": "so whenever there's a variable at the top of the stack we're going to do the substitution because we the top we can",
    "start": "3548960",
    "end": "3554480"
  },
  {
    "text": "access now what happens if we have a terminal symbol sitting at the top blocking our",
    "start": "3554480",
    "end": "3559839"
  },
  {
    "text": "way from accessing variable variables below well actually that's an easy case to handle",
    "start": "3559839",
    "end": "3566400"
  },
  {
    "text": "because we have terminal symbols sitting on the top they're never going to change anyway so you might as well match them",
    "start": "3566400",
    "end": "3572319"
  },
  {
    "text": "with the input at that time so when you have a terminal",
    "start": "3572319",
    "end": "3578880"
  },
  {
    "text": "sitting at the top we'll just read another input symbol and do it and match it off there",
    "start": "3578880",
    "end": "3584960"
  },
  {
    "text": "and we just keep reading the terminal symbols off until we have a variable sitting on the top then we do a substitution",
    "start": "3584960",
    "end": "3592558"
  },
  {
    "text": "um and we keep substituting variables until we have a terminal then we read it then we compare it with the input",
    "start": "3593040",
    "end": "3598160"
  },
  {
    "text": "and in so doing um we will end up getting the same effect that i described before without ever needing to dig down",
    "start": "3598160",
    "end": "3605440"
  },
  {
    "text": "into the into the interior of the stack and doing substitutions there they're all going to rise up to the top uh and",
    "start": "3605440",
    "end": "3612640"
  },
  {
    "text": "we can always do them at the top okay um so anyway uh you know i forgot",
    "start": "3612640",
    "end": "3618640"
  },
  {
    "text": "to do that here so instead only substitute variables when they're at the top of the stack uh if a terminal",
    "start": "3618640",
    "end": "3624559"
  },
  {
    "text": "is on the top pop it and compare with the input and reject if they're not equal so if you ever have something",
    "start": "3624559",
    "end": "3629760"
  },
  {
    "text": "which is not matching the way it's supposed to do that i mean that thread is just gonna fail you know then it was not",
    "start": "3629760",
    "end": "3636079"
  },
  {
    "text": "a bad uh non-deterministic choice was made or maybe the input was not in the language",
    "start": "3636079",
    "end": "3641200"
  },
  {
    "text": "anyway and there are no no good choices um so here my animation broke here so let",
    "start": "3641200",
    "end": "3647200"
  },
  {
    "text": "me just put the whole thing up in front of you so here is the actual construction",
    "start": "3647200",
    "end": "3652640"
  },
  {
    "text": "um push the start symbol on the stack if the top of the stack uh is a variable",
    "start": "3652640",
    "end": "3659440"
  },
  {
    "text": "replace it with a corresponding right-hand side doing a non-deterministic choice among the various possibilities",
    "start": "3659440",
    "end": "3665839"
  },
  {
    "text": "if it's a terminal you pop it and match it with the next input symbol and if the stack is empty you accept",
    "start": "3665839",
    "end": "3671359"
  },
  {
    "text": "so here is how the stack would actually look for this particular input you know it would start off the same",
    "start": "3671359",
    "end": "3677599"
  },
  {
    "text": "you'd have e and then substitute with e plus t and then we're going to always substitute do the",
    "start": "3677599",
    "end": "3683680"
  },
  {
    "text": "substitutions at the top so e gets substituted by f oh is that right",
    "start": "3683680",
    "end": "3689680"
  },
  {
    "text": "no this slide i messed up i apologize so e gets substituted by t which gets substituted",
    "start": "3689680",
    "end": "3696000"
  },
  {
    "text": "by f um and the point is that when you get to an a sitting at the top uh forgive the",
    "start": "3696000",
    "end": "3702559"
  },
  {
    "text": "typos here now we have a terminal symbol and that's going to get matched off with the next",
    "start": "3702559",
    "end": "3708319"
  },
  {
    "text": "input symbol and get removed and now we have just the plus and the t left",
    "start": "3708319",
    "end": "3714480"
  },
  {
    "text": "and then the plus is also a terminal symbol that's going to get matched over the next thing we just have a t sitting",
    "start": "3714480",
    "end": "3719520"
  },
  {
    "text": "on the top and now we can do a substitution okay so that's how uh it works",
    "start": "3719520",
    "end": "3725440"
  },
  {
    "text": "okay i that's all i wanted to say i think um oh yeah there's one just remarked so this is not we're not going",
    "start": "3725440",
    "end": "3731599"
  },
  {
    "text": "to prove this but i think it's uh i i do need to say this that actually you can do the conversion in the other direction",
    "start": "3731599",
    "end": "3739599"
  },
  {
    "text": "too you can convert a um",
    "start": "3739599",
    "end": "3744400"
  },
  {
    "text": "so a is a context-free language if and only if some push-down automaton recognizes a",
    "start": "3744960",
    "end": "3752400"
  },
  {
    "text": "and um if you haven't seen if and only if it's a it's an expression i'm going to use",
    "start": "3752400",
    "end": "3758799"
  },
  {
    "text": "uh uh again over and over so you should get used to it it stands for if and only if",
    "start": "3758799",
    "end": "3764799"
  },
  {
    "text": "and which just means the implication goes both ways so a is an uh context-free",
    "start": "3764799",
    "end": "3769920"
  },
  {
    "text": "context-free language implies that some push on time time recognizes a and vice",
    "start": "3769920",
    "end": "3774960"
  },
  {
    "text": "versa um so there's really two things you need to prove whenever you have an if and only if you have to prove both",
    "start": "3774960",
    "end": "3781200"
  },
  {
    "text": "directions um so uh thinking about that way splitting them in half um the the forward",
    "start": "3781200",
    "end": "3788319"
  },
  {
    "text": "direction we've already proved converting a push context uh free grammar to a push down on",
    "start": "3788319",
    "end": "3795200"
  },
  {
    "text": "automaton the reverse direction we're not going to prove it's in the book if you're curious",
    "start": "3795200",
    "end": "3800480"
  },
  {
    "text": "and you're responsible knowing that the fact is true but you don't have to know the proof uh which is a somewhat comp a little bit",
    "start": "3800480",
    "end": "3806880"
  },
  {
    "text": "complicated and you know i think it would take us too long to go through it so you're not responsible for it",
    "start": "3806880",
    "end": "3812799"
  },
  {
    "text": "um so there's a last check in here that i have for you which is just a question uh",
    "start": "3812799",
    "end": "3820000"
  },
  {
    "text": "uh which you can answer based on the material that we presented so far is every regular language also a",
    "start": "3820000",
    "end": "3826480"
  },
  {
    "text": "context-free language just yes no or you're not sure",
    "start": "3826480",
    "end": "3832079"
  },
  {
    "text": "so let me launch that as a poll here okay about to close",
    "start": "3832079",
    "end": "3838400"
  },
  {
    "text": "um [Music] ending polling and sharing results",
    "start": "3838400",
    "end": "3845920"
  },
  {
    "text": "this one i think you you pretty much uh most of you got some of you uh",
    "start": "3846400",
    "end": "3851599"
  },
  {
    "text": "are not sure um every language is in fact a context-free",
    "start": "3851599",
    "end": "3856880"
  },
  {
    "text": "language um and the way to see that is that every regular language can be done by a dfa or",
    "start": "3856880",
    "end": "3864480"
  },
  {
    "text": "an nfa as we already showed and um dfa or an nfa is really just a push-on",
    "start": "3864480",
    "end": "3871599"
  },
  {
    "text": "automaton that never uses its stack so you can always think of a dfa as a push",
    "start": "3871599",
    "end": "3879119"
  },
  {
    "text": "down automaton and we already argued that pushdown automata are equivalent to context-free grammars",
    "start": "3879119",
    "end": "3884960"
  },
  {
    "text": "and so they do the context-free languages so anything that you can do with a dfa",
    "start": "3884960",
    "end": "3890160"
  },
  {
    "text": "you can also do with a push-down automaton and so is therefore uh um",
    "start": "3890160",
    "end": "3895680"
  },
  {
    "text": "all the regular languages are also context-free languages okay so with that let's just uh kind of",
    "start": "3895680",
    "end": "3901920"
  },
  {
    "text": "pull things together um a little quick recap as to what we've been doing so far in the class we have",
    "start": "3901920",
    "end": "3907920"
  },
  {
    "text": "the regular languages and the context-free languages we had the two forms of sort of getting",
    "start": "3907920",
    "end": "3912960"
  },
  {
    "text": "at them the recognizer form which is like the automata based perspective like either a dfa or an nfa in the case",
    "start": "3912960",
    "end": "3919520"
  },
  {
    "text": "of the regular languages push down automaton for the context-free languages and for the generators we had the",
    "start": "3919520",
    "end": "3926240"
  },
  {
    "text": "regular expression uh for the regular languages and the context-free grammars for the for the",
    "start": "3926240",
    "end": "3932480"
  },
  {
    "text": "contextual languages okay um and as we just pointed out in our most in our last check-in the regular",
    "start": "3932480",
    "end": "3940000"
  },
  {
    "text": "languages form a subset and in fact a proper subset of the context-free languages uh as shown in this venn",
    "start": "3940000",
    "end": "3947119"
  },
  {
    "text": "diagram because we have already exhibited languages that are context-free but not regular",
    "start": "3947119",
    "end": "3953599"
  },
  {
    "text": "all right so quick review we've defined the context-free grammars and their",
    "start": "3953599",
    "end": "3958880"
  },
  {
    "text": "associated languages the context-free languages we define push-down automata and we showed how to convert context",
    "start": "3958880",
    "end": "3965440"
  },
  {
    "text": "free grammars to push down automatic um and that's all i have for you today",
    "start": "3965440",
    "end": "3971599"
  },
  {
    "text": "okay here's a question i'll answer to everybody why do we strict ourselves to a stack why don't we use random access memory we will use random access memory",
    "start": "3971599",
    "end": "3979520"
  },
  {
    "text": "um for the next model called the turing machine and we're going to introduce that i think next to the next lecture so",
    "start": "3979520",
    "end": "3986240"
  },
  {
    "text": "that's going to be the model that we're going to stick with throughout the term but we have not uh we were kind of using",
    "start": "3986240",
    "end": "3994640"
  },
  {
    "text": "introducing weaker models uh as a kind of a prelude uh to the more general purpose uh computational model",
    "start": "3994640",
    "end": "4002240"
  },
  {
    "text": "um uh really to get ourselves warmed up",
    "start": "4002240",
    "end": "4007680"
  },
  {
    "text": "and also um because um for the weaker models you can fully",
    "start": "4007680",
    "end": "4013760"
  },
  {
    "text": "analyze them um in a way that you cannot return machines you you will be able to as you",
    "start": "4013760",
    "end": "4020720"
  },
  {
    "text": "will see you can determine properties of languages for",
    "start": "4020720",
    "end": "4027839"
  },
  {
    "text": "the weaker models that you cannot for the more general models and so",
    "start": "4027839",
    "end": "4033680"
  },
  {
    "text": "i think that's helpful to have that perspective that you know for some cases you can get get",
    "start": "4033680",
    "end": "4039520"
  },
  {
    "text": "a full analysis and some other cases you cannot um but anyway um",
    "start": "4039520",
    "end": "4044960"
  },
  {
    "text": "that's the reason why we're stricter restricted to the stack besides the fact that these models have applications um",
    "start": "4044960",
    "end": "4050960"
  },
  {
    "text": "that i think are worth you people seeing um",
    "start": "4050960",
    "end": "4056240"
  },
  {
    "text": "why yeah some reason we chose a stack well why did we choose a stack and not",
    "start": "4056240",
    "end": "4061520"
  },
  {
    "text": "some other data structure for our uh temporary for our our extra storage",
    "start": "4061520",
    "end": "4067599"
  },
  {
    "text": "and the reason for a stack for one thing the stack is what is exactly what you need to get to",
    "start": "4067599",
    "end": "4072799"
  },
  {
    "text": "the correspondence with context-free grammars um if you use some other",
    "start": "4072799",
    "end": "4080640"
  },
  {
    "text": "storage like the queue for example instead of a stack in fact you get a very different outcome and",
    "start": "4081760",
    "end": "4088960"
  },
  {
    "text": "it's an actually interesting exercise to see what happens what do you get if you use a queue as an external storage",
    "start": "4088960",
    "end": "4094799"
  },
  {
    "text": "instead of as a stack uh it's a good homework problem maybe i'll assign it um",
    "start": "4094799",
    "end": "4100640"
  },
  {
    "text": "uh let's see um nfa",
    "start": "4100640",
    "end": "4106719"
  },
  {
    "text": "okay uh we showed so um we",
    "start": "4106719",
    "end": "4112318"
  },
  {
    "text": "we showed that non-determinism can be eliminated for finite automata so nfas",
    "start": "4112319",
    "end": "4117359"
  },
  {
    "text": "and dfas are equivalent uh what about for for pushdown automata uh the answer is no they're not",
    "start": "4117359",
    "end": "4123520"
  },
  {
    "text": "equivalent i think i mentioned that earlier but i don't mind repeating it there are certain languages that can be",
    "start": "4123520",
    "end": "4129278"
  },
  {
    "text": "done only with non-deterministic push down automata and cannot be done with deterministic push down automata for",
    "start": "4129279",
    "end": "4135838"
  },
  {
    "text": "example that language w w reverse that requires the non-determinism in",
    "start": "4135839",
    "end": "4140960"
  },
  {
    "text": "order for the machine to be able to guess where the middle is so um okay i'm gonna head off uh thank",
    "start": "4140960",
    "end": "4147120"
  },
  {
    "text": "you guys see you on tuesday",
    "start": "4147120",
    "end": "4151799"
  },
  {
    "text": "you",
    "start": "4162159",
    "end": "4164239"
  }
]