[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "A fully-associative (FA) cache has a tag comparator\nfor each cache line.",
    "start": "930",
    "end": "5180"
  },
  {
    "text": "So the tag field of *every* cache line in\na FA cache is compared with the tag field",
    "start": "5180",
    "end": "9980"
  },
  {
    "text": "of the incoming address.",
    "start": "9980",
    "end": "12740"
  },
  {
    "text": "Since all cache lines are searched, a particular\nmemory location can be held in any cache line,",
    "start": "12740",
    "end": "18290"
  },
  {
    "text": "which eliminates the problems of address conflicts\ncausing conflict misses.",
    "start": "18290",
    "end": "24660"
  },
  {
    "text": "The cache shown here can hold 4 different\n4-word blocks, regardless of their address.",
    "start": "24660",
    "end": "31119"
  },
  {
    "text": "The example from the end of the previous segment\nrequired a cache that could hold two 3-word",
    "start": "31119",
    "end": "35850"
  },
  {
    "text": "blocks, one for the instructions in the loop,\nand one for the data words.",
    "start": "35850",
    "end": "40640"
  },
  {
    "text": "This FA cache would use two of its cache lines\nto perform that task and achieve a 100% hit",
    "start": "40640",
    "end": "47510"
  },
  {
    "text": "ratio regardless of the addresses of the instruction\nand data blocks.",
    "start": "47510",
    "end": "53109"
  },
  {
    "text": "FA caches are very flexible and have high\nhit ratios for most applications.",
    "start": "53110",
    "end": "59840"
  },
  {
    "text": "Their only downside is cost.",
    "start": "59840",
    "end": "63020"
  },
  {
    "text": "The inclusion of a tag comparator for each\ncache line to implement the parallel search",
    "start": "63020",
    "end": "67710"
  },
  {
    "text": "for a tag match adds substantially the amount\nof circuitry required when there are many",
    "start": "67710",
    "end": "73500"
  },
  {
    "text": "cache lines.",
    "start": "73500",
    "end": "75680"
  },
  {
    "text": "Even the use of hybrid storage/comparison\ncircuitry, called a content-addressable memory,",
    "start": "75680",
    "end": "81560"
  },
  {
    "text": "doesn't make a big dent in the overall cost\nof a FA cache.",
    "start": "81560",
    "end": "87159"
  },
  {
    "text": "DM caches searched only a single cache line.",
    "start": "87160",
    "end": "91310"
  },
  {
    "text": "FA caches search all cache lines.",
    "start": "91310",
    "end": "94770"
  },
  {
    "text": "Is there a happy middle ground where some\nsmall number of cache lines are searched in",
    "start": "94770",
    "end": "99229"
  },
  {
    "text": "parallel?",
    "start": "99230",
    "end": "100230"
  },
  {
    "text": "Yes!",
    "start": "100230",
    "end": "101230"
  },
  {
    "text": "If you look closely at the diagram of the\nFA cache shown here, you'll see it looks like",
    "start": "101230",
    "end": "106799"
  },
  {
    "text": "four 1-line DM caches operating in parallel.",
    "start": "106799",
    "end": "112189"
  },
  {
    "text": "What would happen if we designed a cache with\nfour multi-line DM caches operating in parallel?",
    "start": "112189",
    "end": "118810"
  },
  {
    "text": "The result would be what we call an 4-way\nset-associative (SA) cache.",
    "start": "118810",
    "end": "123590"
  },
  {
    "start": "119000",
    "end": "119000"
  },
  {
    "text": "An N-way SA cache is really just N DM caches\n(let's call them sub-caches) operating in",
    "start": "123590",
    "end": "130289"
  },
  {
    "text": "parallel.",
    "start": "130289",
    "end": "131939"
  },
  {
    "text": "Each of the N sub-caches compares the tag\nfield of the incoming address with the tag",
    "start": "131939",
    "end": "136889"
  },
  {
    "text": "field of the cache line selected by the index\nbits of the incoming address.",
    "start": "136889",
    "end": "142629"
  },
  {
    "text": "The N cache lines searched on a particular\nrequest form a search \"set\" and the desired",
    "start": "142629",
    "end": "148769"
  },
  {
    "text": "location might be held in any member of the\nset.",
    "start": "148769",
    "end": "153129"
  },
  {
    "text": "The 4-way SA cache shown here has 8 cache\nlines in each sub-cache, so each set contains",
    "start": "153129",
    "end": "159950"
  },
  {
    "text": "4 cache lines (one from each sub-cache) and\nthere are a total of 8 sets (one for each",
    "start": "159950",
    "end": "165849"
  },
  {
    "text": "line of the sub-caches).",
    "start": "165849",
    "end": "170040"
  },
  {
    "text": "An N-way SA cache can accommodate up to N\nblocks whose addresses map to the same cache",
    "start": "170040",
    "end": "175569"
  },
  {
    "text": "index.",
    "start": "175569",
    "end": "177709"
  },
  {
    "text": "So access to up to N blocks with conflicting\naddresses can still be accommodated in this",
    "start": "177709",
    "end": "183089"
  },
  {
    "text": "cache without misses.",
    "start": "183089",
    "end": "185760"
  },
  {
    "text": "This a big improvement over a DM cache where\nan address conflict will cause the current",
    "start": "185760",
    "end": "191370"
  },
  {
    "text": "resident of a cache line to be evicted in\nfavor of the new request.",
    "start": "191370",
    "end": "196930"
  },
  {
    "text": "And an N-way SA cache can have a very large\nnumber of cache lines but still only have",
    "start": "196930",
    "end": "202639"
  },
  {
    "text": "to pay the cost of N tag comparators.",
    "start": "202639",
    "end": "206540"
  },
  {
    "text": "This is a big improvement over a FA cache\nwhere a large number of cache lines would",
    "start": "206540",
    "end": "211808"
  },
  {
    "text": "require a large number of comparators.",
    "start": "211809",
    "end": "215349"
  },
  {
    "text": "So N-way SA caches are a good compromise between\na conflict-prone DM cache and the flexible",
    "start": "215349",
    "end": "223019"
  },
  {
    "text": "but very expensive FA cache.",
    "start": "223019",
    "end": "227089"
  },
  {
    "text": "Here's a slightly more detailed diagram, in\nthis case of a 3-way 8-set cache.",
    "start": "227089",
    "end": "233159"
  },
  {
    "text": "Note that there's no constraint that the number\nof ways be a power of two since we aren't",
    "start": "233159",
    "end": "237299"
  },
  {
    "text": "using any address bits to select a particular\nway.",
    "start": "237299",
    "end": "241249"
  },
  {
    "text": "This means the cache designer can fine tune\nthe cache capacity to fit her space budget.",
    "start": "241249",
    "end": "247569"
  },
  {
    "text": "Just to review the terminology: the N cache\nlines that will be searched for a particular",
    "start": "247569",
    "end": "252309"
  },
  {
    "text": "cache index are called a set.",
    "start": "252309",
    "end": "254459"
  },
  {
    "text": "And each of N sub-caches is called a way.",
    "start": "254459",
    "end": "259829"
  },
  {
    "text": "The hit logic in each \"way\" operates in parallel\nwith the logic in other ways.",
    "start": "259829",
    "end": "264840"
  },
  {
    "text": "Is it possible for a particular address to\nbe matched by more than one way?",
    "start": "264840",
    "end": "270160"
  },
  {
    "text": "That possibility isn't ruled out by the hardware,\nbut the SA cache is managed so that doesn't",
    "start": "270160",
    "end": "276300"
  },
  {
    "text": "happen.",
    "start": "276300",
    "end": "277530"
  },
  {
    "text": "Assuming we write the data fetched from DRAM\nduring a cache miss into a single sub-cache",
    "start": "277530",
    "end": "282590"
  },
  {
    "text": "- we'll talk about how to choose that way\nin a minute -",
    "start": "282590",
    "end": "286439"
  },
  {
    "text": "there's no possibility that more than one\nsub-cache will ever match an incoming address.",
    "start": "286439",
    "end": "292710"
  },
  {
    "text": "How many ways to do we need?",
    "start": "292710",
    "end": "294680"
  },
  {
    "start": "293000",
    "end": "293000"
  },
  {
    "text": "We'd like enough ways to avoid the cache line\nconflicts we experienced with the DM cache.",
    "start": "294680",
    "end": "300780"
  },
  {
    "text": "Looking at the graph we saw earlier of memory\naccesses vs. time, we see that in any time",
    "start": "300780",
    "end": "306349"
  },
  {
    "text": "interval there are only so many potential\naddress conflicts that we need to worry about.",
    "start": "306349",
    "end": "312110"
  },
  {
    "text": "The mapping from addresses to cache lines\nis designed to avoid conflicts between neighboring",
    "start": "312110",
    "end": "316780"
  },
  {
    "text": "locations.",
    "start": "316780",
    "end": "318460"
  },
  {
    "text": "So we only need to worry about conflicts between\nthe different regions: code, stack and data.",
    "start": "318460",
    "end": "325150"
  },
  {
    "text": "In the examples shown here there are three\nsuch regions, maybe 4 if you need two data",
    "start": "325150",
    "end": "329949"
  },
  {
    "text": "regions to support copying from one data region\nto another.",
    "start": "329949",
    "end": "333470"
  },
  {
    "text": "If the time interval is particularly large,\nwe might need double that number to avoid",
    "start": "333470",
    "end": "337729"
  },
  {
    "text": "conflicts between accesses early in the time\ninterval and accesses late in the time interval.",
    "start": "337729",
    "end": "343460"
  },
  {
    "text": "The point is that a small number of ways should\nbe sufficient to avoid most cache line conflicts",
    "start": "343460",
    "end": "348969"
  },
  {
    "text": "in the cache.",
    "start": "348969",
    "end": "351490"
  },
  {
    "start": "351000",
    "end": "351000"
  },
  {
    "text": "As with block size, it's possible to have\ntoo much of a good thing: there's an optimum",
    "start": "351490",
    "end": "356380"
  },
  {
    "text": "number of ways that minimizes the AMAT.",
    "start": "356380",
    "end": "361069"
  },
  {
    "text": "Beyond that point, the additional circuity\nneeded to combine the hit signals from a large",
    "start": "361069",
    "end": "365020"
  },
  {
    "text": "number of ways will start have a significant\npropagation delay of its own, adding directly",
    "start": "365020",
    "end": "370819"
  },
  {
    "text": "to the cache hit time and the AMAT.",
    "start": "370819",
    "end": "375009"
  },
  {
    "text": "More to the point, the chart on the left shows\nthat there's little additional impact on the",
    "start": "375009",
    "end": "378939"
  },
  {
    "text": "miss ratio beyond 4 to 8 ways.",
    "start": "378939",
    "end": "382270"
  },
  {
    "text": "For most programs, an 8-way set-associative\ncache with a large number of sets will perform",
    "start": "382270",
    "end": "387530"
  },
  {
    "text": "on a par with the much more-expensive FA cache\nof equivalent capacity.",
    "start": "387530",
    "end": "394880"
  },
  {
    "start": "394000",
    "end": "394000"
  },
  {
    "text": "There's one final issue to resolve with SA\nand FA caches.",
    "start": "394880",
    "end": "400180"
  },
  {
    "text": "When there's a cache miss, which cache line\nshould be chosen to hold the data that will",
    "start": "400180",
    "end": "404550"
  },
  {
    "text": "be fetched from main memory?",
    "start": "404550",
    "end": "407840"
  },
  {
    "text": "That's not an issue with DM caches, since\neach data block can only be held in one particular",
    "start": "407840",
    "end": "413120"
  },
  {
    "text": "cache line, determined by its address.",
    "start": "413120",
    "end": "416510"
  },
  {
    "text": "But in N-way SA caches, there are N possible\ncache lines to choose from, one in each of",
    "start": "416510",
    "end": "422340"
  },
  {
    "text": "the ways.",
    "start": "422340",
    "end": "423680"
  },
  {
    "text": "And in a FA cache, any of the cache lines\ncan be chosen.",
    "start": "423680",
    "end": "428310"
  },
  {
    "text": "So, how to choose?",
    "start": "428310",
    "end": "430120"
  },
  {
    "text": "Our goal is to choose to replace the contents\nof the cache line which will minimize the",
    "start": "430120",
    "end": "435240"
  },
  {
    "text": "impact on the hit ratio in the future.",
    "start": "435240",
    "end": "438930"
  },
  {
    "text": "The optimal choice is to replace the block\nthat is accessed furthest in the future (or",
    "start": "438930",
    "end": "444120"
  },
  {
    "start": "439000",
    "end": "439000"
  },
  {
    "text": "perhaps is never accessed again).",
    "start": "444120",
    "end": "446080"
  },
  {
    "text": "But that requires knowing the future…",
    "start": "446080",
    "end": "449758"
  },
  {
    "text": "Here's an idea: let's predict future accesses\nby looking a recent accesses and applying",
    "start": "449759",
    "end": "455009"
  },
  {
    "text": "the principle of locality.",
    "start": "455009",
    "end": "456629"
  },
  {
    "text": "d7.36 If a block has not been recently accessed,\nit's less likely to be accessed in the near",
    "start": "456629",
    "end": "461919"
  },
  {
    "text": "future.",
    "start": "461919",
    "end": "464039"
  },
  {
    "text": "That suggests the least-recently-used replacement\nstrategy, usually referred to as LRU: replace",
    "start": "464039",
    "end": "470650"
  },
  {
    "text": "the block that was accessed furthest in the\npast.",
    "start": "470650",
    "end": "474090"
  },
  {
    "text": "LRU works well in practice, but requires us\nto keep a list ordered by last use for each",
    "start": "474090",
    "end": "480720"
  },
  {
    "text": "set of cache lines, which would need to be\nupdated on each cache access.",
    "start": "480720",
    "end": "486729"
  },
  {
    "text": "When we needed to choose which member of a\nset to replace, we'd choose the last cache",
    "start": "486729",
    "end": "490979"
  },
  {
    "text": "line on this list.",
    "start": "490979",
    "end": "493300"
  },
  {
    "text": "For an 8-way SA cache there are 8! possible\norderings, so we'd need log2(8!) = 16 state",
    "start": "493300",
    "end": "501330"
  },
  {
    "text": "bits to encode the current ordering.",
    "start": "501330",
    "end": "504689"
  },
  {
    "text": "The logic to update these state bits on each\naccess isn't cheap.",
    "start": "504689",
    "end": "508550"
  },
  {
    "text": "Basically you need a lookup table to map the\ncurrent 16-bit value to the next 16-bit value.",
    "start": "508550",
    "end": "514800"
  },
  {
    "text": "So most caches implement an approximation\nto LRU where the update function is much simpler",
    "start": "514800",
    "end": "519610"
  },
  {
    "text": "to compute.",
    "start": "519610",
    "end": "522539"
  },
  {
    "text": "There are other possible replacement policies:\nFirst-in, first-out, where the oldest cache",
    "start": "522539",
    "end": "527660"
  },
  {
    "text": "line is replaced regardless of when it was\nlast accessed.",
    "start": "527660",
    "end": "530459"
  },
  {
    "text": "And Random, where some sort of pseudo-random\nnumber generator is used to select the replacement.",
    "start": "530460",
    "end": "537670"
  },
  {
    "text": "All replacement strategies except for random\ncan be defeated.",
    "start": "537670",
    "end": "541519"
  },
  {
    "text": "If you know a cache's replacement strategy\nyou can design a program that will have an",
    "start": "541520",
    "end": "545330"
  },
  {
    "text": "abysmal hit rate by accessing addresses you\nknow the cache just replaced.",
    "start": "545330",
    "end": "550760"
  },
  {
    "text": "I'm not sure I care about how well a program\ndesigned to get bad performance runs on my",
    "start": "550760",
    "end": "556090"
  },
  {
    "text": "system, but the point is that most replacement\nstrategies will occasionally cause a particular",
    "start": "556090",
    "end": "561430"
  },
  {
    "text": "program to execute much more slowly than expected.",
    "start": "561430",
    "end": "565949"
  },
  {
    "text": "When all is said and done, an LRU replacement\nstrategy or a close approximation is a reasonable",
    "start": "565949",
    "end": "571060"
  },
  {
    "text": "choice.",
    "start": "571060",
    "end": "571490"
  }
]