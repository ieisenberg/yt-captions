[
  {
    "text": "Now let's turn our attention to the second\nclass of instructions: load (LD) and store",
    "start": "1520",
    "end": "6080"
  },
  {
    "text": "(ST), which allow the CPU to access values\nin memory.",
    "start": "6080",
    "end": "9880"
  },
  {
    "text": "Note that since the Beta is a load-store architecture\nthese instructions are the *only* mechanism",
    "start": "9880",
    "end": "15770"
  },
  {
    "text": "for accessing memory values.",
    "start": "15770",
    "end": "18530"
  },
  {
    "text": "The LD and ST instructions use the same instruction\ntemplate as the ALU-with-constant instructions.",
    "start": "18530",
    "end": "24610"
  },
  {
    "text": "To access memory, we'll need a memory address,\nwhich is computed by adding the value of the",
    "start": "24610",
    "end": "29680"
  },
  {
    "text": "\"ra\" register to the sign-extended 16-bit\nconstant from the low-order 16 bits of the",
    "start": "29680",
    "end": "35550"
  },
  {
    "text": "instruction.",
    "start": "35550",
    "end": "37190"
  },
  {
    "text": "This computation is exactly the one performed\nby the ADDC instruction - so we'll reuse that",
    "start": "37190",
    "end": "41829"
  },
  {
    "text": "hardware - and the sum is sent to main memory\nas the byte address of the location to be",
    "start": "41829",
    "end": "47789"
  },
  {
    "text": "accessed.",
    "start": "47790",
    "end": "48790"
  },
  {
    "text": "For the LD instruction, the data returned\nby main memory is written to the \"rc\" register.",
    "start": "48790",
    "end": "54540"
  },
  {
    "text": "The store instruction (ST) performs the same\naddress calculation as LD, then reads the",
    "start": "54540",
    "end": "59130"
  },
  {
    "text": "data value from the \"rc\" register and sends\nboth to main memory.",
    "start": "59130",
    "end": "64780"
  },
  {
    "text": "The ST instruction is special in several ways:\nit's the only instruction that needs to read",
    "start": "64780",
    "end": "69679"
  },
  {
    "text": "the value of the \"rc\" register, so we'll need\nto adjust the datapath hardware slightly to",
    "start": "69679",
    "end": "74060"
  },
  {
    "text": "accommodate that need.",
    "start": "74060",
    "end": "75250"
  },
  {
    "text": "And since \"rc\" is serving as a source operand,\nit appears as the first operand in the symbolic",
    "start": "75250",
    "end": "81060"
  },
  {
    "text": "form of the instruction, followed by \"const\"\nand \"ra\" which are specifying the destination",
    "start": "81060",
    "end": "86249"
  },
  {
    "text": "address.",
    "start": "86249",
    "end": "87249"
  },
  {
    "text": "ST is the only instruction that does *not*\nwrite a result into the register file at end",
    "start": "87249",
    "end": "92349"
  },
  {
    "text": "of the instruction.",
    "start": "92349",
    "end": "94590"
  },
  {
    "text": "Here's the example we saw earlier, where we\nneeded to load the value of the variable x",
    "start": "94590",
    "end": "99069"
  },
  {
    "text": "from memory, multiply it by 37 and write the\nresult back to the memory location that holds",
    "start": "99069",
    "end": "104509"
  },
  {
    "text": "the value of the variable y.",
    "start": "104509",
    "end": "107229"
  },
  {
    "text": "Now that we have actual Beta instructions,\nwe've expressed the computation as a sequence",
    "start": "107229",
    "end": "111529"
  },
  {
    "text": "of three instructions.",
    "start": "111529",
    "end": "113310"
  },
  {
    "text": "To access the value of variable x, the LD\ninstruction adds the contents of R31 to the",
    "start": "113310",
    "end": "118648"
  },
  {
    "text": "constant 0x1008, which sums to 0x1008, the\naddress we need to access.",
    "start": "118649",
    "end": "125020"
  },
  {
    "text": "The ST instruction specifies a similar address\ncalculation to write into the location for",
    "start": "125020",
    "end": "129500"
  },
  {
    "text": "the variable y.",
    "start": "129500",
    "end": "132580"
  },
  {
    "text": "The address calculation performed by LD and\nST works well when the locations we need to",
    "start": "132580",
    "end": "136810"
  },
  {
    "text": "access have addresses that fit into the 16-bit\nconstant field.",
    "start": "136810",
    "end": "141920"
  },
  {
    "text": "What happens when we need to access locations\nat addresses higher than 0x7FFF?",
    "start": "141920",
    "end": "148170"
  },
  {
    "text": "Then we need to treat those addresses as we\nwould any large constant, and store those",
    "start": "148170",
    "end": "152380"
  },
  {
    "text": "large addresses in main memory so they can\nbe loaded into a register to be used by LD",
    "start": "152380",
    "end": "156890"
  },
  {
    "text": "and ST.",
    "start": "156890",
    "end": "158160"
  },
  {
    "text": "Okay, but what if the number of large constants\nwe need to store is greater than will fit",
    "start": "158160",
    "end": "163250"
  },
  {
    "text": "in low memory, i.e., the addresses we can\naccess directly?",
    "start": "163250",
    "end": "168060"
  },
  {
    "text": "To solve this problem, the Beta includes a\n\"load relative\" (LDR) instruction, which we'll",
    "start": "168060",
    "end": "173390"
  },
  {
    "text": "see in the lecture on the Beta implementation.",
    "start": "173390",
    "end": "175660"
  }
]