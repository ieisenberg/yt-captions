[
  {
    "start": "0",
    "end": "46000"
  },
  {
    "start": "4610",
    "end": "4610"
  },
  {
    "text": "In CART, the value\nof minbucket can",
    "start": "4610",
    "end": "7040"
  },
  {
    "text": "affect the model's\nout-of-sample accuracy.",
    "start": "7040",
    "end": "10370"
  },
  {
    "text": "As we discussed\nearlier in the lecture,",
    "start": "10370",
    "end": "13070"
  },
  {
    "text": "if minbucket is too small,\nover-fitting might occur.",
    "start": "13070",
    "end": "17200"
  },
  {
    "text": "But if minbucket is too large,\nthe model might be too simple.",
    "start": "17200",
    "end": "21480"
  },
  {
    "text": "So how should we set\nthis parameter value?",
    "start": "21480",
    "end": "24830"
  },
  {
    "text": "We could select the value that\ngives the best testing set",
    "start": "24830",
    "end": "28390"
  },
  {
    "text": "accuracy, but this isn't right.",
    "start": "28390",
    "end": "31380"
  },
  {
    "text": "The idea of the testing set is\nto measure model performance",
    "start": "31380",
    "end": "35050"
  },
  {
    "text": "on data the model has\nnever seen before.",
    "start": "35050",
    "end": "38210"
  },
  {
    "text": "By picking the\nvalue of minbucket",
    "start": "38210",
    "end": "40160"
  },
  {
    "text": "to get the best test\nset performance,",
    "start": "40160",
    "end": "42790"
  },
  {
    "text": "the testing set was implicitly\nused to generate the model.",
    "start": "42790",
    "end": "47820"
  },
  {
    "start": "46000",
    "end": "118000"
  },
  {
    "text": "Instead, we'll use a method\ncalled K-fold Cross Validation,",
    "start": "47820",
    "end": "52140"
  },
  {
    "text": "which is one way to properly\nselect the parameter value.",
    "start": "52140",
    "end": "56180"
  },
  {
    "text": "This method works by going\nthrough the following steps.",
    "start": "56180",
    "end": "60020"
  },
  {
    "text": "First, we split the\ntraining set into k",
    "start": "60020",
    "end": "62960"
  },
  {
    "text": "equally sized subsets, or folds.",
    "start": "62960",
    "end": "66190"
  },
  {
    "text": "In this example, k equals 5.",
    "start": "66190",
    "end": "69500"
  },
  {
    "text": "Then we select k - 1, or four\nfolds, to estimate the model,",
    "start": "69500",
    "end": "75370"
  },
  {
    "text": "and compute predictions on\nthe remaining one fold, which",
    "start": "75370",
    "end": "78760"
  },
  {
    "text": "is often referred to\nas the validation set.",
    "start": "78760",
    "end": "82080"
  },
  {
    "text": "We build a model\nand make predictions",
    "start": "82080",
    "end": "84300"
  },
  {
    "text": "for each possible parameter\nvalue we're considering.",
    "start": "84300",
    "end": "88770"
  },
  {
    "text": "Then we repeat this for\neach of the other folds,",
    "start": "88770",
    "end": "92200"
  },
  {
    "text": "or pieces of our training set.",
    "start": "92200",
    "end": "94479"
  },
  {
    "text": "So we would build a model\nusing folds 1, 2, 3,",
    "start": "94479",
    "end": "97719"
  },
  {
    "text": "and 5 to make\npredictions on fold 4,",
    "start": "97720",
    "end": "101780"
  },
  {
    "text": "and then we would build a\nmodel using folds 1, 2, 4,",
    "start": "101780",
    "end": "106229"
  },
  {
    "text": "and 5 to make predictions\non fold 3, etc.",
    "start": "106229",
    "end": "111320"
  },
  {
    "text": "So ultimately, cross\nvalidation builds",
    "start": "111320",
    "end": "113830"
  },
  {
    "text": "many models, one for each fold\nand possible parameter value.",
    "start": "113830",
    "end": "120360"
  },
  {
    "start": "118000",
    "end": "185000"
  },
  {
    "text": "Then, for each candidate\nparameter value,",
    "start": "120360",
    "end": "123170"
  },
  {
    "text": "and for each fold,\nwe can compute",
    "start": "123170",
    "end": "125490"
  },
  {
    "text": "the accuracy of the model.",
    "start": "125490",
    "end": "127780"
  },
  {
    "text": "This plot shows the possible\nparameter values on the x-axis,",
    "start": "127780",
    "end": "132410"
  },
  {
    "text": "and the accuracy of the\nmodel on the y-axis.",
    "start": "132410",
    "end": "136120"
  },
  {
    "text": "This line shows the accuracy\nof our model on fold 1.",
    "start": "136120",
    "end": "140390"
  },
  {
    "text": "We can also compute the\naccuracy of the model using",
    "start": "140390",
    "end": "143790"
  },
  {
    "text": "each of the other folds\nas the validation sets.",
    "start": "143790",
    "end": "147299"
  },
  {
    "text": "We then average the\naccuracy over the k",
    "start": "147300",
    "end": "150410"
  },
  {
    "text": "folds to determine\nthe final parameter",
    "start": "150410",
    "end": "153370"
  },
  {
    "text": "value that we want to use.",
    "start": "153370",
    "end": "155900"
  },
  {
    "text": "Typically, the behavior\nlooks like this--",
    "start": "155900",
    "end": "158849"
  },
  {
    "text": "if the parameter\nvalue is too small,",
    "start": "158850",
    "end": "161400"
  },
  {
    "text": "then the accuracy is lower,\nbecause the model is probably",
    "start": "161400",
    "end": "164590"
  },
  {
    "text": "over-fit to the training set.",
    "start": "164590",
    "end": "166940"
  },
  {
    "text": "But if the parameter\nvalue is too large,",
    "start": "166940",
    "end": "170110"
  },
  {
    "text": "then the accuracy is also\nlower, because the model",
    "start": "170110",
    "end": "172980"
  },
  {
    "text": "is too simple.",
    "start": "172980",
    "end": "175079"
  },
  {
    "text": "In this case, we would pick\na parameter value around six,",
    "start": "175079",
    "end": "179340"
  },
  {
    "text": "because it leads to the\nmaximum average accuracy",
    "start": "179340",
    "end": "182769"
  },
  {
    "text": "over all parameter values.",
    "start": "182770",
    "end": "184330"
  },
  {
    "start": "185000",
    "end": "233000"
  },
  {
    "text": "So far, we've used the\nparameter minbucket",
    "start": "186970",
    "end": "190010"
  },
  {
    "text": "to limit our tree in R. When\nwe use cross validation in R,",
    "start": "190010",
    "end": "194580"
  },
  {
    "text": "we'll use a parameter\ncalled cp instead.",
    "start": "194580",
    "end": "198329"
  },
  {
    "text": "This is the\ncomplexity parameter.",
    "start": "198329",
    "end": "201010"
  },
  {
    "text": "It's like Adjusted R-squared\nfor linear regression,",
    "start": "201010",
    "end": "204269"
  },
  {
    "text": "and AIC for logistic\nregression, in that it measures",
    "start": "204270",
    "end": "208110"
  },
  {
    "text": "the trade-off between model\ncomplexity and accuracy",
    "start": "208110",
    "end": "211850"
  },
  {
    "text": "on the training set.",
    "start": "211850",
    "end": "213790"
  },
  {
    "text": "A smaller cp value\nleads to a bigger tree,",
    "start": "213790",
    "end": "217170"
  },
  {
    "text": "so a smaller cp value\nmight over-fit the model",
    "start": "217170",
    "end": "220310"
  },
  {
    "text": "to the training set.",
    "start": "220310",
    "end": "221910"
  },
  {
    "text": "But a cp value that's\ntoo large might",
    "start": "221910",
    "end": "224720"
  },
  {
    "text": "build a model that's too simple.",
    "start": "224720",
    "end": "227200"
  },
  {
    "text": "Let's go to R, and\nuse cross validation",
    "start": "227200",
    "end": "229879"
  },
  {
    "text": "to select the value of\ncp for our CART tree.",
    "start": "229880",
    "end": "233850"
  },
  {
    "text": "In our R console, let's\ntry cross validation",
    "start": "233850",
    "end": "237050"
  },
  {
    "text": "for our CART model.",
    "start": "237050",
    "end": "238810"
  },
  {
    "text": "To do this, we need to install\nand load two new packages.",
    "start": "238810",
    "end": "243590"
  },
  {
    "text": "First, we'll install\nthe package \"caret\".",
    "start": "243590",
    "end": "248450"
  },
  {
    "text": "You should see some lines\nrun in your R console,",
    "start": "253060",
    "end": "256250"
  },
  {
    "text": "and then when you're back\nto the blinking cursor,",
    "start": "256250",
    "end": "258930"
  },
  {
    "text": "load the package\nwith library(caret).",
    "start": "258930",
    "end": "261328"
  },
  {
    "text": "Now, let's install\nthe package \"e1071\".",
    "start": "265260",
    "end": "270020"
  },
  {
    "text": "So again,\ninstall.packages(\"e1071\").",
    "start": "270020",
    "end": "279280"
  },
  {
    "text": "Again, you should see some\nlines run in your R console,",
    "start": "279280",
    "end": "282730"
  },
  {
    "text": "and when you're\nback to the cursor,",
    "start": "282730",
    "end": "284680"
  },
  {
    "text": "load the package\nwith library(e1071).",
    "start": "284680",
    "end": "291340"
  },
  {
    "text": "Now, we'll define our cross\nvalidation experiment.",
    "start": "291340",
    "end": "295590"
  },
  {
    "text": "First, we need to define\nhow many folds we want.",
    "start": "295590",
    "end": "299220"
  },
  {
    "text": "We can do this using the\ntrainControl function.",
    "start": "299220",
    "end": "303560"
  },
  {
    "text": "So we'll say numFolds\n= trainControl,",
    "start": "303560",
    "end": "313060"
  },
  {
    "text": "and then in parentheses,\nmethod = \"cv\",",
    "start": "313060",
    "end": "318419"
  },
  {
    "text": "for cross validation, and then\nnumber = 10, for 10 folds.",
    "start": "318420",
    "end": "325690"
  },
  {
    "text": "Then we need to pick the\npossible values for our cp",
    "start": "325690",
    "end": "328920"
  },
  {
    "text": "parameter, using the\nexpand.grid function.",
    "start": "328920",
    "end": "333340"
  },
  {
    "text": "So we'll call it cpGrid,\nand then use expand.grid,",
    "start": "333340",
    "end": "342770"
  },
  {
    "text": "where the only argument is\n.cp = seq(0.01,0.5,0.01).",
    "start": "342770",
    "end": "357240"
  },
  {
    "text": "This will define\nour cp parameters",
    "start": "357240",
    "end": "359400"
  },
  {
    "text": "to test as numbers from 0.01\nto 0.5, in increments of 0.01.",
    "start": "359400",
    "end": "367800"
  },
  {
    "text": "Now, we're ready to\nperform cross validation.",
    "start": "367800",
    "end": "371340"
  },
  {
    "text": "We'll do this using the\ntrain function, where",
    "start": "371340",
    "end": "374600"
  },
  {
    "text": "the first argument\nis similar to that",
    "start": "374600",
    "end": "377170"
  },
  {
    "text": "when we're building models.",
    "start": "377170",
    "end": "378720"
  },
  {
    "text": "It's the dependent\nvariable, Reverse,",
    "start": "378720",
    "end": "382100"
  },
  {
    "text": "followed by a tilde symbol, and\nthen the independent variables",
    "start": "382100",
    "end": "386490"
  },
  {
    "text": "separated by plus signs--\nCircuit + Issue + Petitioner +",
    "start": "386490",
    "end": "396990"
  },
  {
    "text": "Respondent +\nLowerCourt + Unconst.",
    "start": "396990",
    "end": "410819"
  },
  {
    "text": "Our data set here is\nTrain, with a capital T,",
    "start": "410820",
    "end": "415750"
  },
  {
    "text": "and then we need to add the\narguments method = \"rpart\",",
    "start": "415750",
    "end": "422510"
  },
  {
    "text": "since we want to cross\nvalidate a CART model,",
    "start": "422510",
    "end": "425840"
  },
  {
    "text": "and then trControl =\nnumFolds, the output",
    "start": "425840",
    "end": "432430"
  },
  {
    "text": "of our trainControl function,\nand then tuneGrid = cpGrid,",
    "start": "432430",
    "end": "440750"
  },
  {
    "text": "the output of the\nexpand.grid function.",
    "start": "440750",
    "end": "444990"
  },
  {
    "text": "If you hit Enter, it\nmight take a little while,",
    "start": "444990",
    "end": "448210"
  },
  {
    "text": "but after a few\nseconds, you should",
    "start": "448210",
    "end": "450039"
  },
  {
    "text": "get a table describing\nthe cross validation",
    "start": "450040",
    "end": "452630"
  },
  {
    "text": "accuracy for different\ncp parameters.",
    "start": "452630",
    "end": "457060"
  },
  {
    "text": "The first column gives the\ncp parameter that was tested,",
    "start": "457060",
    "end": "461440"
  },
  {
    "text": "and the second column\ngives the cross validation",
    "start": "461440",
    "end": "463950"
  },
  {
    "text": "accuracy for that cp value.",
    "start": "463950",
    "end": "466920"
  },
  {
    "text": "The accuracy starts\nlower, and then increases,",
    "start": "466920",
    "end": "471390"
  },
  {
    "text": "and then will start decreasing\nagain, as we saw in the slides.",
    "start": "471390",
    "end": "476420"
  },
  {
    "text": "At the bottom of\nthe output, it says,",
    "start": "476420",
    "end": "479920"
  },
  {
    "text": "\"Accuracy was used to select the\noptimal model using the largest",
    "start": "479920",
    "end": "484370"
  },
  {
    "text": "value.",
    "start": "484370",
    "end": "485510"
  },
  {
    "text": "The final value used for\nthe model was cp = 0.18.\"",
    "start": "485510",
    "end": "491170"
  },
  {
    "text": "This is the cp value we want\nto use in our CART model.",
    "start": "491170",
    "end": "495820"
  },
  {
    "text": "So now let's create a new CART\nmodel with this value of cp,",
    "start": "495820",
    "end": "499640"
  },
  {
    "text": "instead of the\nminbucket parameter.",
    "start": "499640",
    "end": "502700"
  },
  {
    "text": "We'll call this\nmodel StevensTreeCV,",
    "start": "502700",
    "end": "508650"
  },
  {
    "text": "and we'll use the rpart\nfunction, like we did earlier,",
    "start": "508650",
    "end": "512750"
  },
  {
    "text": "to predict Reverse using all\nof our independent variables:",
    "start": "512750",
    "end": "519219"
  },
  {
    "text": "Circuit, Issue,\nPetitioner, Respondent,",
    "start": "519220",
    "end": "530759"
  },
  {
    "text": "LowerCourt, and Unconst.",
    "start": "530760",
    "end": "536520"
  },
  {
    "text": "Our data set here is Train, and\nthen we want method = \"class\",",
    "start": "536520",
    "end": "545160"
  },
  {
    "text": "since we're building a\nclassification tree, and cp",
    "start": "545160",
    "end": "548980"
  },
  {
    "text": "= 0.18.",
    "start": "548980",
    "end": "553709"
  },
  {
    "text": "Now, let's make predictions on\nour test set using this model.",
    "start": "553710",
    "end": "557830"
  },
  {
    "text": "We'll call our\npredictions PredictCV,",
    "start": "557830",
    "end": "562620"
  },
  {
    "text": "and we'll use the\npredict function",
    "start": "562620",
    "end": "564720"
  },
  {
    "text": "to make predictions using\nthe model StevensTreeCV,",
    "start": "564720",
    "end": "570879"
  },
  {
    "text": "the newdata set Test, and we\nwant to add type = \"class\",",
    "start": "570880",
    "end": "578750"
  },
  {
    "text": "so that we get\nclass predictions.",
    "start": "578750",
    "end": "581930"
  },
  {
    "text": "Now let's create our\nconfusion matrix,",
    "start": "581930",
    "end": "584240"
  },
  {
    "text": "using the table function, where\nwe first give the true outcome,",
    "start": "584240",
    "end": "588800"
  },
  {
    "text": "Test$Reverse, and then our\npredictions, PredictCV.",
    "start": "588800",
    "end": "595110"
  },
  {
    "text": "So the accuracy of\nthis model is 59 + 64,",
    "start": "595110",
    "end": "601459"
  },
  {
    "text": "divided by the total number\nin this table, 59 + 18 + 29 +",
    "start": "601460",
    "end": "608620"
  },
  {
    "text": "64, the total number of\nobservations in our test set.",
    "start": "608620",
    "end": "613500"
  },
  {
    "text": "So the accuracy of\nthis model is 0.724.",
    "start": "613500",
    "end": "617980"
  },
  {
    "text": "Remember that the accuracy\nof our previous CART model",
    "start": "617980",
    "end": "621459"
  },
  {
    "text": "was 0.659.",
    "start": "621460",
    "end": "624470"
  },
  {
    "text": "Cross validation helps\nus make sure we're",
    "start": "624470",
    "end": "626819"
  },
  {
    "text": "selecting a good\nparameter value,",
    "start": "626820",
    "end": "629360"
  },
  {
    "text": "and often this\nwill significantly",
    "start": "629360",
    "end": "631339"
  },
  {
    "text": "increase the accuracy.",
    "start": "631340",
    "end": "633530"
  },
  {
    "text": "If we had already happened to\nselect a good parameter value,",
    "start": "633530",
    "end": "637090"
  },
  {
    "text": "then the accuracy might\nnot of increased that much.",
    "start": "637090",
    "end": "640190"
  },
  {
    "text": "But by using cross\nvalidation, we",
    "start": "640190",
    "end": "642580"
  },
  {
    "text": "can be sure that we're selecting\na smart parameter value.",
    "start": "642580",
    "end": "647020"
  }
]