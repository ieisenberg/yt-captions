[
  {
    "start": "0",
    "end": "127000"
  },
  {
    "text": "When a user-mode program wants to read a typed\ncharacter it executes a ReadKey() SVC.",
    "start": "1120",
    "end": "7688"
  },
  {
    "text": "The binary representation of the SVC has an\nillegal value in the opcode field, so the",
    "start": "7689",
    "end": "14370"
  },
  {
    "text": "CPU hardware causes an exception, which starts\nexecuting the illegal opcode handler in the",
    "start": "14370",
    "end": "19690"
  },
  {
    "text": "OS.",
    "start": "19690",
    "end": "21390"
  },
  {
    "text": "The OS handler recognizes the illegal opcode\nvalue as being an SVC and uses the low-order",
    "start": "21390",
    "end": "27220"
  },
  {
    "text": "bits of the SVC instruction to determine which\nsub-handler to call.",
    "start": "27220",
    "end": "33420"
  },
  {
    "text": "Here's our first draft for the ReadKey sub-handler,\nthis time written in C.",
    "start": "33420",
    "end": "38218"
  },
  {
    "text": "The handler starts by looking at the process\ntable entry for the current process to determine",
    "start": "38219",
    "end": "43440"
  },
  {
    "text": "which keyboard buffer holds the characters\nfor the process.",
    "start": "43440",
    "end": "47920"
  },
  {
    "text": "Let's assume for the moment the buffer is\n*not* empty and skip to the last line,",
    "start": "47920",
    "end": "52399"
  },
  {
    "text": "which reads the character from the buffer\nand uses it to replace the saved value for",
    "start": "52399",
    "end": "56980"
  },
  {
    "text": "the user's R0 in the array holding the saved\nregister values.",
    "start": "56980",
    "end": "62230"
  },
  {
    "text": "When the handler exits, the OS will reload\nthe saved registers and resume execution of",
    "start": "62230",
    "end": "68080"
  },
  {
    "text": "the user-mode program with the just-read character\nin R0.",
    "start": "68080",
    "end": "73690"
  },
  {
    "text": "Now let's figure what to do when the keyboard\nbuffer is empty.",
    "start": "73690",
    "end": "77680"
  },
  {
    "text": "The code shown here simply loops until the\nbuffer is no longer empty.",
    "start": "77680",
    "end": "82530"
  },
  {
    "text": "The theory is that eventually the user will\ntype a character, causing an interrupt,",
    "start": "82530",
    "end": "87460"
  },
  {
    "text": "which will run the keyboard interrupt handler\ndiscussed in the previous section, which will",
    "start": "87460",
    "end": "91890"
  },
  {
    "text": "store a new character into the buffer.",
    "start": "91890",
    "end": "95490"
  },
  {
    "text": "This all sounds good until we remember that\nthe SVC handler is running with the supervisor",
    "start": "95490",
    "end": "100850"
  },
  {
    "text": "bit (PC[31]) set to 1, disabling interrupts.",
    "start": "100850",
    "end": "106200"
  },
  {
    "text": "Oops!",
    "start": "106200",
    "end": "107729"
  },
  {
    "text": "Since the keyboard interrupt will never happen,\nthe while loop shown here is actually an infinite",
    "start": "107730",
    "end": "113090"
  },
  {
    "text": "loop.",
    "start": "113090",
    "end": "114130"
  },
  {
    "text": "So if the user-mode program tries to read\na character from an empty buffer, the system",
    "start": "114130",
    "end": "119000"
  },
  {
    "text": "will appear to hang, not responding to any\nexternal inputs since interrupts are disabled.",
    "start": "119000",
    "end": "125830"
  },
  {
    "text": "Time to reach for the power switch :)\nWe'll fix the looping problem by adding code",
    "start": "125830",
    "end": "130310"
  },
  {
    "start": "127000",
    "end": "242000"
  },
  {
    "text": "to subtract 4 from the saved value of the\nXP register before returning.",
    "start": "130310",
    "end": "135410"
  },
  {
    "text": "How does this fix the problem?",
    "start": "135410",
    "end": "137930"
  },
  {
    "text": "Recall that when the SVC illegal instruction\nexception happened, the CPU stored the PC+4",
    "start": "137930",
    "end": "145060"
  },
  {
    "text": "value of the illegal instruction in the user's\nXP register.",
    "start": "145060",
    "end": "149439"
  },
  {
    "text": "When the handler exits, the OS will resume\nexecution of the user-mode program by reloading",
    "start": "149439",
    "end": "154620"
  },
  {
    "text": "the registers and then executing a JMP(XP),\nwhich would normally then execute the instruction",
    "start": "154620",
    "end": "160680"
  },
  {
    "text": "*following* the SVC instruction.",
    "start": "160680",
    "end": "163799"
  },
  {
    "text": "By subtracting 4 from the saved XP value,\nit will be the SVC itself that gets re-executed.",
    "start": "163800",
    "end": "169790"
  },
  {
    "text": "That, of course, means we'll go through the\nsame set of steps again, repeating the cycle",
    "start": "169790",
    "end": "176400"
  },
  {
    "text": "until the keyboard buffer is no longer empty.",
    "start": "176400",
    "end": "179749"
  },
  {
    "text": "It's just a more complicated loop!",
    "start": "179749",
    "end": "182969"
  },
  {
    "text": "But with a crucial difference: one of the\ninstructions - the ReadKey() SVC - is executed",
    "start": "182969",
    "end": "188519"
  },
  {
    "text": "in user-mode with PC[31] = 0.",
    "start": "188519",
    "end": "192019"
  },
  {
    "text": "So during that cycle, if there's a pending\ninterrupt from the keyboard, the device interrupt",
    "start": "192019",
    "end": "197310"
  },
  {
    "text": "will supersede the execution of the ReadKey()\nand the keyboard buffer will be filled.",
    "start": "197310",
    "end": "203060"
  },
  {
    "text": "When the keyboard interrupt handler finishes,\nthe ReadKey() SVC will be executed again,",
    "start": "203060",
    "end": "209060"
  },
  {
    "text": "this time finding that the buffer is no longer\nempty.",
    "start": "209060",
    "end": "213060"
  },
  {
    "text": "Yah!",
    "start": "213060",
    "end": "214650"
  },
  {
    "text": "So this version of the handler actually works,\nwith one small caveat.",
    "start": "214650",
    "end": "219709"
  },
  {
    "text": "If the buffer is empty, the user-mode program\nwill continually re-execute the complicated",
    "start": "219709",
    "end": "225580"
  },
  {
    "text": "user-mode/kernel-mode loop until the timer\ninterrupt eventually transfers control to",
    "start": "225580",
    "end": "230510"
  },
  {
    "text": "the next process.",
    "start": "230510",
    "end": "232790"
  },
  {
    "text": "This seems pretty inefficient.",
    "start": "232790",
    "end": "235079"
  },
  {
    "text": "Once we've checked and found the buffer empty,\nit would be better to give other processes",
    "start": "235080",
    "end": "239599"
  },
  {
    "text": "a chance to run before we try again.",
    "start": "239599",
    "end": "242810"
  },
  {
    "start": "242000",
    "end": "392000"
  },
  {
    "text": "This problem is easy to fix!",
    "start": "242810",
    "end": "244459"
  },
  {
    "text": "We'll just add a call to Scheduler() right\nafter arranging for the ReadKey() SVC to be",
    "start": "244459",
    "end": "250150"
  },
  {
    "text": "re-executed.",
    "start": "250150",
    "end": "252168"
  },
  {
    "text": "The call to Scheduler() suspends execution\nof the current process and arranges for the",
    "start": "252169",
    "end": "256810"
  },
  {
    "text": "next process to run when the handler exits.",
    "start": "256810",
    "end": "261030"
  },
  {
    "text": "Eventually the round-robin scheduling will\ncome back to the current process and the ReadKey()",
    "start": "261030",
    "end": "265569"
  },
  {
    "text": "SVC will try again.",
    "start": "265569",
    "end": "268440"
  },
  {
    "text": "With this simple one-line fix the system will\nspend much less time wasting cycles checking",
    "start": "268440",
    "end": "273910"
  },
  {
    "text": "the empty buffer and instead use those cycles\nto run other, hopefully more productive, processes.",
    "start": "273910",
    "end": "280770"
  },
  {
    "text": "The cost is a small delay in restarting the\nprogram after a character is typed,",
    "start": "280770",
    "end": "285620"
  },
  {
    "text": "but typically the time slices for each process\nare small enough that one round of process",
    "start": "285620",
    "end": "291180"
  },
  {
    "text": "execution happens more quickly than the time\nbetween two typed characters, so the extra",
    "start": "291180",
    "end": "296460"
  },
  {
    "text": "delay isn't noticeable.",
    "start": "296460",
    "end": "298699"
  },
  {
    "text": "So now we have some insights into one of the\ntraditional arguments against timesharing.",
    "start": "298699",
    "end": "305020"
  },
  {
    "text": "The argument goes as follows.",
    "start": "305020",
    "end": "307180"
  },
  {
    "text": "Suppose we have 10 processes, each of which\ntakes 1 second to complete its computation.",
    "start": "307180",
    "end": "313820"
  },
  {
    "text": "Without timesharing, the first process would\nbe done after 1 second, the second after 2",
    "start": "313820",
    "end": "318849"
  },
  {
    "text": "seconds, and so on.",
    "start": "318849",
    "end": "321730"
  },
  {
    "text": "With timesharing using, say, a 1/10 second\ntime slice, all the processes will complete",
    "start": "321730",
    "end": "327650"
  },
  {
    "text": "sometime after 10 seconds\nsince there's a little extra time needed for",
    "start": "327650",
    "end": "331870"
  },
  {
    "text": "the hundred or so process switches that would\nhappen before completion.",
    "start": "331870",
    "end": "336740"
  },
  {
    "text": "So in a timesharing system the time-to-completion\nfor *all* processes is as long the worst-case",
    "start": "336740",
    "end": "342699"
  },
  {
    "text": "completion time without time sharing!",
    "start": "342699",
    "end": "346060"
  },
  {
    "text": "So why bother with timesharing?",
    "start": "346060",
    "end": "348770"
  },
  {
    "text": "We saw one answer to this question earlier\nin this slide.",
    "start": "348770",
    "end": "351979"
  },
  {
    "text": "If a process can't make productive use of\nits time slice, it can donate those cycles",
    "start": "351980",
    "end": "357439"
  },
  {
    "text": "to completion of some other task.",
    "start": "357439",
    "end": "360169"
  },
  {
    "text": "So in a system where most processes are waiting\nfor some sort of I/O, timesharing is actually",
    "start": "360169",
    "end": "365380"
  },
  {
    "text": "a great way of spending cycles where they'll\ndo the most good.",
    "start": "365380",
    "end": "369090"
  },
  {
    "text": "If you open the Task Manager or Activity Monitor\non the system you're using now, you'll see",
    "start": "369090",
    "end": "375490"
  },
  {
    "text": "there are hundreds of processes, almost all\nof which are in some sort of I/O wait.",
    "start": "375490",
    "end": "381220"
  },
  {
    "text": "So timesharing does extract a cost when running\ncompute-intensive computations, but in an",
    "start": "381220",
    "end": "386590"
  },
  {
    "text": "actual system where there's a mix of I/O and\ncompute tasks, time sharing is the way to",
    "start": "386590",
    "end": "392240"
  },
  {
    "start": "392000",
    "end": "532000"
  },
  {
    "text": "go.",
    "start": "392240",
    "end": "393240"
  },
  {
    "text": "We can actually go one step further to ensure\nwe don't run processes waiting for an I/O",
    "start": "393240",
    "end": "398129"
  },
  {
    "text": "event that hasn't yet happened.",
    "start": "398129",
    "end": "400300"
  },
  {
    "text": "We'll add a status field to the process state\nindicating whether the process is ACTIVE (e.g.,",
    "start": "400300",
    "end": "406800"
  },
  {
    "text": "status is 0) or WAITING (e.g., status is non-zero).",
    "start": "406800",
    "end": "411599"
  },
  {
    "text": "We'll use different non-zero values to indicate\nwhat event the process is waiting for.",
    "start": "411599",
    "end": "417729"
  },
  {
    "text": "Then we'll change the Scheduler() to only\nrun ACTIVE processes.",
    "start": "417729",
    "end": "421900"
  },
  {
    "text": "To see how this works, it's easiest to use\na concrete example.",
    "start": "421900",
    "end": "425639"
  },
  {
    "text": "The UNIX OS has two kernel subroutines, sleep()\nand wakeup(), both of which require a non-zero",
    "start": "425639",
    "end": "432940"
  },
  {
    "text": "argument.",
    "start": "432940",
    "end": "434099"
  },
  {
    "text": "The argument will be used as the value of\nthe status field.",
    "start": "434099",
    "end": "438169"
  },
  {
    "text": "Let's see this in action.",
    "start": "438169",
    "end": "439940"
  },
  {
    "text": "When the ReadKey() SVC detects the buffer\nis empty, it calls sleep() with an argument",
    "start": "439940",
    "end": "445250"
  },
  {
    "text": "that uniquely identifies the I/O event it's\nwaiting for, in this case the arrival of a",
    "start": "445250",
    "end": "450469"
  },
  {
    "text": "character in a particular buffer.",
    "start": "450469",
    "end": "452300"
  },
  {
    "text": "sleep() sets the process status to this unique\nidentifier, then calls Scheduler().",
    "start": "452300",
    "end": "457879"
  },
  {
    "text": "Scheduler() has been modified to skip over\nprocesses with a non-zero status, not giving",
    "start": "457879",
    "end": "464509"
  },
  {
    "text": "them a chance to run.",
    "start": "464509",
    "end": "466090"
  },
  {
    "text": "Meanwhile, a keyboard interrupt will cause\nthe interrupt handler to add a character to",
    "start": "466090",
    "end": "471300"
  },
  {
    "text": "the keyboard buffer and call wakeup() to signal\nany process waiting on that buffer.",
    "start": "471300",
    "end": "477599"
  },
  {
    "text": "Watch what happens when the kbdnum in the\ninterrupt handler matches the kbdnum in the",
    "start": "477600",
    "end": "482449"
  },
  {
    "text": "ReadKey() handler.",
    "start": "482449",
    "end": "484470"
  },
  {
    "text": "wakeup() loops through all processes, looking\nfor ones that are waiting for this particular",
    "start": "484470",
    "end": "489800"
  },
  {
    "text": "I/O event.",
    "start": "489800",
    "end": "491138"
  },
  {
    "text": "When it finds one, it sets the status for\nthe process to zero, marking it as ACTIVE.",
    "start": "491139",
    "end": "497690"
  },
  {
    "text": "The zero status will cause the process to\nrun again next time the Scheduler() reaches",
    "start": "497690",
    "end": "502200"
  },
  {
    "text": "it in its round-robin search for things to\ndo.",
    "start": "502200",
    "end": "505250"
  },
  {
    "text": "The effect is that once a process goes to\nsleep() WAITING for an event, it's not considered",
    "start": "505250",
    "end": "511340"
  },
  {
    "text": "for execution again until the event occurs\nand wakeup() marks the process as ACTIVE.",
    "start": "511340",
    "end": "517760"
  },
  {
    "text": "Pretty neat!",
    "start": "517760",
    "end": "519380"
  },
  {
    "text": "Another elegant fix to ensure that no CPU\ncycles are wasted on useless activity.",
    "start": "519380",
    "end": "525029"
  },
  {
    "text": "I can remember how impressed I was when I\nfirst saw this many years ago in a (very)",
    "start": "525029",
    "end": "530540"
  },
  {
    "text": "early version of the UNIX code :)",
    "start": "530540",
    "end": "531819"
  }
]