[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6318"
  },
  {
    "start": "6318",
    "end": "12275"
  },
  {
    "text": "JASON KU: Good\nmorning, everyone. Welcome to the 13th\nlecture of 6.006.",
    "start": "12275",
    "end": "18189"
  },
  {
    "text": "Just to recap from\nlast time, we've been talking about shortest--",
    "start": "18190",
    "end": "24940"
  },
  {
    "text": "single source shortest\npaths on weighted graphs for the past two lectures.",
    "start": "24940",
    "end": "31330"
  },
  {
    "text": "Previously we were only talking\nabout unweighted graphs. And so far, up until today,\nwe've talked about three ways",
    "start": "31330",
    "end": "40000"
  },
  {
    "text": "to solve single source shortest\npaths on weighted graphs. Namely the first one used BFS.",
    "start": "40000",
    "end": "47590"
  },
  {
    "text": "If you can kind of\ntransform your graph into a linear-sized graph that's\nunweighted that corresponds",
    "start": "47590",
    "end": "55219"
  },
  {
    "text": "to your weighted\nproblem, essentially replacing each weighted\nedge with of weight",
    "start": "55220",
    "end": "62390"
  },
  {
    "text": "w with w single edges. Now that's only good for\npositive weight things",
    "start": "62390",
    "end": "69410"
  },
  {
    "text": "and if the sum of your\nweights are small. But if the sum of\nyour weights is",
    "start": "69410",
    "end": "75829"
  },
  {
    "text": "linear in the combinatorial\nsize of your graph, V plus E, then we can get\na linear time algorithm",
    "start": "75830",
    "end": "82340"
  },
  {
    "text": "to solve weighted shortest paths\nusing breadth-first search.",
    "start": "82340",
    "end": "88039"
  },
  {
    "text": "Then we talked\nabout how we could-- if we-- the problem with\nweighted shortest paths",
    "start": "88040",
    "end": "95630"
  },
  {
    "text": "is if our weights were negative\nand there could exist cycles, then we could have\nnegative weight cycles",
    "start": "95630",
    "end": "101540"
  },
  {
    "text": "and that would be more\ndifficult to handle, because then you have\nvertices where you have",
    "start": "101540",
    "end": "107180"
  },
  {
    "text": "an unbounded number\nof edges you might have to go through\nfor a shortest path. There might not be a finite\nlength shortest path.",
    "start": "107180",
    "end": "115310"
  },
  {
    "text": "But in the condition\nwhere we didn't have cycles in the graph-- of course, we couldn't\nhave negative weight ones,",
    "start": "115310",
    "end": "121490"
  },
  {
    "text": "so we were also able to\ndo that in linear time by exploiting the fact\nthat our vertices could",
    "start": "121490",
    "end": "128210"
  },
  {
    "text": "be ordered in a\ntopological order, and then we could kind of\npush shortest path information",
    "start": "128210",
    "end": "135650"
  },
  {
    "text": "from the furthest one\nback to the ones forward. By relaxing edges forward.",
    "start": "135650",
    "end": "141800"
  },
  {
    "text": "By maintaining this invariant\nthat we had shortest paths as",
    "start": "141800",
    "end": "147140"
  },
  {
    "text": "we were processing these\nthings in topological order. Then last time, we were talking\nabout general graphs, graphs",
    "start": "147140",
    "end": "155159"
  },
  {
    "text": "that could contain cycles,\nand this is our most general algorithm, because if there\nare negative weight cycles,",
    "start": "155160",
    "end": "161440"
  },
  {
    "text": "Bellman-Ford, which we\ntalked about last time, can detect them. And in particular,\nfor any vertex",
    "start": "161440",
    "end": "168719"
  },
  {
    "text": "that had a finite\nweight shortest paths-- path, we could compute\nthat shortest path for it,",
    "start": "168720",
    "end": "177460"
  },
  {
    "text": "compute its distance. And for any one\nthat is reachable from a negative weight\ncycle, not only could we",
    "start": "177460",
    "end": "183550"
  },
  {
    "text": "mark it as minus\ninfinity distance, but we could also find\na negative weight cycle",
    "start": "183550",
    "end": "190750"
  },
  {
    "text": "essentially by duplicating\nour graph to make it a DAG and being able to follow\npointers back in this expanded",
    "start": "190750",
    "end": "198940"
  },
  {
    "text": "DAG that had multiple layers. So that's what we've\ndone up until now.",
    "start": "198940",
    "end": "204440"
  },
  {
    "text": "We've gotten linear for\nsome types of graphs. And we've gotten kind\nof quadratic V times",
    "start": "204440",
    "end": "211790"
  },
  {
    "text": "E for general graphs, ones that\ncould contain negative cycles.",
    "start": "211790",
    "end": "216879"
  },
  {
    "text": "Now how bad is this? Well, if the graph is sparse,\nif the number of edges",
    "start": "216880",
    "end": "225970"
  },
  {
    "text": "in our graph is\non the order of V, then this is quadratic\ntime and V, V squared.",
    "start": "225970",
    "end": "232930"
  },
  {
    "text": "But if the graph is dense\nwhere we have quadratic--",
    "start": "232930",
    "end": "238480"
  },
  {
    "text": "like the complete graph\nwhere every edge is present, then we have quadratically\nmany edges in our graph in V.",
    "start": "238480",
    "end": "246010"
  },
  {
    "text": "And so this running\ntime is V cubed. V cube's not great in\nterms of its running time.",
    "start": "246010",
    "end": "251080"
  },
  {
    "text": "We would like something\ncloser to linear. And so that's what\nwe're going to do today.",
    "start": "251080",
    "end": "258639"
  },
  {
    "text": "If we have this\nrestriction where we have non-negative\nweights, we can",
    "start": "258640",
    "end": "264190"
  },
  {
    "text": "have negative weight cycles. And this is a restriction that\ncomes up a lot for many graphs",
    "start": "264190",
    "end": "271990"
  },
  {
    "text": "you might encounter. A lot of times you don't have\nboth positive and negative",
    "start": "271990",
    "end": "278140"
  },
  {
    "text": "weight. I don't have a negative\ndistance to my house. ",
    "start": "278140",
    "end": "283389"
  },
  {
    "text": "In any metric we have\nnon-negative weights. So these things come up a\nlot, and we can actually",
    "start": "283390",
    "end": "291430"
  },
  {
    "text": "do quite a bit better, since\nthere are no negative weight cycles, we can\nget almost linear.",
    "start": "291430",
    "end": "298630"
  },
  {
    "text": "It's not going to be quite\nV plus E as you see up here",
    "start": "298630",
    "end": "303910"
  },
  {
    "text": "on the slide. We're going to get\nsomething very close. It's V plus the E,\nbut on the V term,",
    "start": "303910",
    "end": "310720"
  },
  {
    "text": "we have this\nlogarithmic factor in V. Which remember for all\nintents and purposes, this log of that\nthing in real life",
    "start": "310720",
    "end": "318820"
  },
  {
    "text": "is not going to be bigger\nthan like a factor of 30 or something like that.",
    "start": "318820",
    "end": "324550"
  },
  {
    "text": "Maybe 60. But it's a small number. And so this is actually\npretty good performance.",
    "start": "324550",
    "end": "330890"
  },
  {
    "text": "It's almost linear-- that's what\nI'm saying almost linear here, and that's what we're\ngoing to try to do today.",
    "start": "330890",
    "end": "337310"
  },
  {
    "text": "So, how do we do this? Well, I'm going to make two\nobservations here, first off.",
    "start": "337310",
    "end": "344280"
  },
  {
    "text": "Our idea is going to be to\ngeneralize the notion of BFS.",
    "start": "344280",
    "end": "350500"
  },
  {
    "text": "When we had BFS, we\nsplit up our graph-- to solve unweighted-- solve\nweighted shortest paths in BFS,",
    "start": "350500",
    "end": "359139"
  },
  {
    "text": "we could take our\npositive edge weights, break them up into\nindividual edges.",
    "start": "359140",
    "end": "366560"
  },
  {
    "text": "But if the total weight\nof our edges was large, then we'd have a problem,\nbecause now we've",
    "start": "366560",
    "end": "373370"
  },
  {
    "text": "expanded the size of our graph. This is the same issue that we\nhad with something like radix sort where we don't\nwant our algorithm",
    "start": "373370",
    "end": "381349"
  },
  {
    "text": "to run in the size of\nthe numbers in our input, we want our algorithm to\nrun in the number of numbers",
    "start": "381350",
    "end": "388610"
  },
  {
    "text": "in our input. This is the difference\nbetween N and U",
    "start": "388610",
    "end": "394150"
  },
  {
    "text": "back when we were talking\nabout data structures. Here, if the size of our weights\nare large compared to V and E,",
    "start": "394150",
    "end": "403000"
  },
  {
    "text": "then doing this expansion\nis going to be difficult. But if we had, say, some graph--",
    "start": "403000",
    "end": "411970"
  },
  {
    "text": "this is my graph G, and\nwe had a source vertex s, the idea here\nis going to still",
    "start": "411970",
    "end": "419650"
  },
  {
    "text": "be to try to grow a\nfrontier of increasing",
    "start": "419650",
    "end": "424960"
  },
  {
    "text": "distance from my source and try\nto maintain all of the things",
    "start": "424960",
    "end": "432919"
  },
  {
    "text": "within a certain\ndistance from my source. So that's the idea, grow a\nsphere centered at my source,",
    "start": "432920",
    "end": "439240"
  },
  {
    "text": "repeatedly explore\ncloser vertices before I get to further ones.",
    "start": "439240",
    "end": "445120"
  },
  {
    "text": "But how can I explore\ncloser vertices if I don't know the\ndistances beforehand?",
    "start": "445120",
    "end": "452920"
  },
  {
    "text": "This is kind of-- seems\nlike a circular logic. I'm going to use the\ndistance to my things",
    "start": "452920",
    "end": "458680"
  },
  {
    "text": "to compute the\ndistances to my things. That doesn't work so well.",
    "start": "458680",
    "end": "463780"
  },
  {
    "text": "So how do we do this? Well, the idea here is\nto gradually compute",
    "start": "463780",
    "end": "469450"
  },
  {
    "text": "the distances-- compute\nthe distances as we go so that we maintain this property.",
    "start": "469450",
    "end": "474520"
  },
  {
    "text": "Now this property, this idea\nwouldn't work necessarily",
    "start": "474520",
    "end": "479680"
  },
  {
    "text": "in the context of\nnegative edge weights. Here, we have this\ngrowing frontier,",
    "start": "479680",
    "end": "486460"
  },
  {
    "text": "this ball around my source. And as I grow my\nthing, these things are",
    "start": "486460",
    "end": "493419"
  },
  {
    "text": "at further and further distance,\nbecause any edge from something",
    "start": "493420",
    "end": "499480"
  },
  {
    "text": "back here as I'm growing\nmy ball a certain distance, these things are\noutside that distance.",
    "start": "499480",
    "end": "504940"
  },
  {
    "text": "We're kind of using a\nkey observation here. Here's my observation 1.",
    "start": "504940",
    "end": "510069"
  },
  {
    "start": "510070",
    "end": "515099"
  },
  {
    "text": "If weights greater\nthan or equal to 0,",
    "start": "515100",
    "end": "523219"
  },
  {
    "text": "then distances increase\nalong shortest paths.",
    "start": "523220",
    "end": "536985"
  },
  {
    "text": " Maybe weakly\nmonotonically increase",
    "start": "536985",
    "end": "544328"
  },
  {
    "text": "if there are zero-weight edges. But in general, if I had a\npath going from s to some v,",
    "start": "544328",
    "end": "558940"
  },
  {
    "text": "and it's going\nthrough some vertex u, I have some shortest path.",
    "start": "558940",
    "end": "564460"
  },
  {
    "text": "This is the shortest\npath from s to v, and it goes through some\npoint u, some vertex u.",
    "start": "564460",
    "end": "571330"
  },
  {
    "text": "Then this monotonicity more\nspecifically means that the shortest path from s to u\nand the shortest path from s",
    "start": "571330",
    "end": "582550"
  },
  {
    "text": "to v, which is this\nwhole thing, how",
    "start": "582550",
    "end": "591140"
  },
  {
    "text": "do these relate to each other? If this is along\nthat path, then this",
    "start": "591140",
    "end": "597690"
  },
  {
    "text": "has to be at least as\nlarge as the subpath. Because all of these--",
    "start": "597690",
    "end": "603810"
  },
  {
    "text": "the weight of this path\ncannot be negative. So that's the thing that\nDijkstra's going to exploit.",
    "start": "603810",
    "end": "610050"
  },
  {
    "text": "It essentially\nmeans that when I'm expanding this frontier\nof distance away from x,",
    "start": "610050",
    "end": "618130"
  },
  {
    "text": "it's possible if I had negative\nweight, that this line--",
    "start": "618130",
    "end": "624680"
  },
  {
    "text": "if I had some very negative\nweight going from a vertex here to a vertex\nhere, this vertex",
    "start": "624680",
    "end": "633570"
  },
  {
    "text": "could be within this boundary. Maybe if this distance is x,\nthis guy could be within x.",
    "start": "633570",
    "end": "642998"
  },
  {
    "text": "The things that are\nwithin distance x of s might not be all contained.",
    "start": "642999",
    "end": "649880"
  },
  {
    "text": "There could be a path from\nhere to this other vertex width distance x.",
    "start": "649880",
    "end": "656360"
  },
  {
    "text": "It doesn't have this property\nbecause I could decrease in distance along the path. So that's the first observation.",
    "start": "656360",
    "end": "663390"
  },
  {
    "text": "Second observation,\nwell, let's see",
    "start": "663390",
    "end": "669000"
  },
  {
    "text": "if we can piggyback\non DAG relaxation.",
    "start": "669000",
    "end": "675590"
  },
  {
    "text": "I claim to you that we can solve\nsingle source shortest paths",
    "start": "675590",
    "end": "682520"
  },
  {
    "text": "faster if we're given\nan order of vertices",
    "start": "682520",
    "end": "698110"
  },
  {
    "text": "in increasing\ndistance beforehand.",
    "start": "698110",
    "end": "706329"
  },
  {
    "text": "Distance from s. So here's the idea. I'm not going to give\nyou the distances to all these vertices.",
    "start": "706330",
    "end": "712165"
  },
  {
    "text": " Instead I'm going to\ngive you the order",
    "start": "712165",
    "end": "717530"
  },
  {
    "text": "of the vertices in some\nincreasing distance from s.",
    "start": "717530",
    "end": "722780"
  },
  {
    "text": "So basically I'm saying, if\nI had some, I don't know, here's a graph.",
    "start": "722780",
    "end": "729698"
  },
  {
    "text": "Let's see if I can remember. ",
    "start": "729698",
    "end": "738380"
  },
  {
    "text": "OK, and I'm going to\nput some edges on here. ",
    "start": "738380",
    "end": "756060"
  },
  {
    "text": "OK. And I'm going to call these\nvertices 0, 1, 2, 3, and 4.",
    "start": "756060",
    "end": "762930"
  },
  {
    "text": "OK. So here's a graph.  Maybe I put some\nedge weights on here.",
    "start": "762930",
    "end": "769890"
  },
  {
    "text": "I'm going to say this one is 3,\nthis one is 2, this one is 3,",
    "start": "769890",
    "end": "777990"
  },
  {
    "text": "this is 1, this is 1,\nthis is 0, and this is 0.",
    "start": "777990",
    "end": "784950"
  },
  {
    "text": "So from vertex 1 to\n2, that was the 2",
    "start": "784950",
    "end": "790560"
  },
  {
    "text": "for the labeling of that vertex. That edge is zero-weight. OK. So here's a weighted graph\nAnd I don't necessarily know--",
    "start": "790560",
    "end": "801000"
  },
  {
    "text": "I could use Bellman-Ford to find\nshortest paths from this vertex 0, but the idea here is\nI'm not going to give you",
    "start": "801000",
    "end": "811820"
  },
  {
    "text": "shortest paths, I'm going to\ntry to compute shortest paths, but I'm going to give you\nsome additional information. I'm going to give you the order\nof their shortest path distance",
    "start": "811820",
    "end": "823640"
  },
  {
    "text": "from the source. And I can just-- I'm going to eyeball\nthis and say--",
    "start": "823640",
    "end": "832580"
  },
  {
    "text": "I'm going to change\nthis slightly to make it a little\nbit more interesting. I'm going to say\nthis is distance 4.",
    "start": "832580",
    "end": "840250"
  },
  {
    "text": "OK. All right, so now what we have\nis the shortest path distance--",
    "start": "840250",
    "end": "846490"
  },
  {
    "text": "I'm just eyeballing this. The shortest distance to-- ",
    "start": "846490",
    "end": "856279"
  },
  {
    "text": "bad example. All right. So, these are the weights.",
    "start": "856280",
    "end": "861950"
  },
  {
    "text": "Shortest-path distance\nto 3 is going to be 2, I'm going to say, through there.",
    "start": "861950",
    "end": "868670"
  },
  {
    "text": "Shortest-path distance\nhere is 2 also. Shortest-path distance\nhere is also 2",
    "start": "868670",
    "end": "875589"
  },
  {
    "text": "because I can go through both\nof these 0's and it's not a problem. And then the\nshortest-path distance",
    "start": "875590",
    "end": "881490"
  },
  {
    "text": "here is 2 to here\nand a 1/3 to there. So these are listed\nin increasing distance",
    "start": "881490",
    "end": "890930"
  },
  {
    "text": "from my source. I had to compute those\ndeltas to convince you",
    "start": "890930",
    "end": "898820"
  },
  {
    "text": "that this was the\nright ordering, but this is a right\nordering of these things. Now it's not the\nonly right ordering,",
    "start": "898820",
    "end": "906620"
  },
  {
    "text": "but it is a right ordering. OK, so I'm told-- I'm arguing to you that I could\nsolve a single source shortest",
    "start": "906620",
    "end": "912470"
  },
  {
    "text": "paths in linear time\nif I were to give you the vertices in\nincreasing distance?",
    "start": "912470",
    "end": "918740"
  },
  {
    "text": "How could I do that? Well, because of this\nfirst observation,",
    "start": "918740",
    "end": "927430"
  },
  {
    "text": "I know that if these are\nincreasing in distance, any edge going backwards\nwith respect to this ordering",
    "start": "927430",
    "end": "935589"
  },
  {
    "text": "can't participate in shortest\npaths with one exception.",
    "start": "935590",
    "end": "940640"
  },
  {
    "text": "Anyone know what\nthat exception is? No edge can go backwards\nin this ordering",
    "start": "940640",
    "end": "947570"
  },
  {
    "text": "based on this observation\nexcept under what condition? Yeah? AUDIENCE: If the weight is 0?",
    "start": "947570",
    "end": "953698"
  },
  {
    "text": "JASON KU: If the\nweight to 0, yeah. So if the weight to 0, just\nlike this situation here,",
    "start": "953698",
    "end": "960600"
  },
  {
    "text": "then I could go backwards\nin the ordering. See, it's problematic. The idea is I'm going to\nwant to construct a DAG",
    "start": "960600",
    "end": "969300"
  },
  {
    "text": "so that I can run\nDAG relaxation. Well, if I have a component\nhere that has 0 weights,",
    "start": "969300",
    "end": "982120"
  },
  {
    "text": "I can coalesce this thing down-- I can deal with this\ncomponent separately.",
    "start": "982120",
    "end": "991420"
  },
  {
    "text": "Let's worry about\nthat separately. If we do, we can collapse this\nedge down into a single vertex",
    "start": "991420",
    "end": "1000279"
  },
  {
    "text": "and transform this graph so\nit does respect the ordering. So I'm going to transform\nthis graph into a new graph.",
    "start": "1000280",
    "end": "1010680"
  },
  {
    "text": "This is a graph-- contains vertex 2 and vertex\n0, vertex 1 and 3 here,",
    "start": "1010680",
    "end": "1020220"
  },
  {
    "text": "and vertex 4. OK, now we have--",
    "start": "1020220",
    "end": "1025689"
  },
  {
    "text": "and I'm only going to keep\nedges going forward in the-- ",
    "start": "1025690",
    "end": "1035329"
  },
  {
    "text": "I'm going to need to collapse\nthis entire section down",
    "start": "1035329",
    "end": "1043970"
  },
  {
    "text": "into one vertex. This doesn't quite work. OK. Let's ignore zero-weight\nedges for now.",
    "start": "1043970",
    "end": "1051679"
  },
  {
    "text": "Let's assume these are-- ",
    "start": "1051680",
    "end": "1061132"
  },
  {
    "text": "all right, there's\nsomething broken here. If I have a cycle here-- ",
    "start": "1061132",
    "end": "1068350"
  },
  {
    "text": "right now I don't have\na cycle of zero-weight. So what I could do is I\ncould take this vertex",
    "start": "1068350",
    "end": "1074810"
  },
  {
    "text": "and put it after both\nof these vertices. And now I would-- or I could rearrange the\norder of these three vertices",
    "start": "1074810",
    "end": "1082179"
  },
  {
    "text": "where there's a path of length\n0 and get a new ordering that still satisfies the property.",
    "start": "1082180",
    "end": "1089620"
  },
  {
    "text": "And that's always the case\nbecause paths can't increase--",
    "start": "1089620",
    "end": "1097240"
  },
  {
    "text": "paths can't decrease in weight. I can rearrange the\nordering of these things",
    "start": "1097240",
    "end": "1102470"
  },
  {
    "text": "so that 3 comes\nfirst, 1 comes second, and 2 comes third of\nthose three vertices.",
    "start": "1102470",
    "end": "1109645"
  },
  {
    "text": " Yeah. So for every set of 0 edges, I\ncan just flip the relationship",
    "start": "1109645",
    "end": "1123380"
  },
  {
    "text": "if they have the same distance. In my input, I'm given vertices\nthat have the same distance",
    "start": "1123380",
    "end": "1130550"
  },
  {
    "text": "from the source. And so if those are the same\ndistance from the source and they're connected\nby a zero-weight edge,",
    "start": "1130550",
    "end": "1136040"
  },
  {
    "text": "it doesn't hurt me to\nflip their ordering. So I'm going to do that. So let's convert\nthat into a graph",
    "start": "1136040",
    "end": "1142456"
  },
  {
    "text": "with a different ordering. ",
    "start": "1142457",
    "end": "1153030"
  },
  {
    "text": "0 3 now, 1 2.",
    "start": "1153030",
    "end": "1158720"
  },
  {
    "text": "OK and I have this distance,\nthis edge, this edge, this edge, this edge.",
    "start": "1158720",
    "end": "1164735"
  },
  {
    "text": " This edge. ",
    "start": "1164735",
    "end": "1171980"
  },
  {
    "text": "What am I missing? 2 to 3. And here.",
    "start": "1171980",
    "end": "1178529"
  },
  {
    "text": "I think I have all\nof those edges. Yeah?",
    "start": "1178530",
    "end": "1183550"
  },
  {
    "text": "OK. Now I have the property\nthat every edge that could participate\nin the shortest path",
    "start": "1183550",
    "end": "1190360"
  },
  {
    "text": "are going forward in the\nordering, because all of these",
    "start": "1190360",
    "end": "1197270"
  },
  {
    "text": "are zero-weight. So we flip those\naround so they're going correct with\nrespect to the ordering.",
    "start": "1197270",
    "end": "1204250"
  },
  {
    "text": "And any edge going\nbackwards that is positive weight\ncertainly can't",
    "start": "1204250",
    "end": "1210400"
  },
  {
    "text": "be used in any shortest path. So I'm just going\nto get rid of them. ",
    "start": "1210400",
    "end": "1217790"
  },
  {
    "text": "Yeah? What do I do if there's\na zero-weight cycle? JASON KU: If there's\na zero-weight cycle, I can just coalesce\nthem all together down",
    "start": "1217790",
    "end": "1225409"
  },
  {
    "text": "to a single vertex, because\nif I reach one of them, I can reach all of them.",
    "start": "1225410",
    "end": "1230990"
  },
  {
    "text": "AUDIENCE: You're getting a\ntopological ordering of-- JASON KU: Exactly. I'm computing-- so\nthe idea here is we're",
    "start": "1230990",
    "end": "1237470"
  },
  {
    "text": "trying to construct a DAG. I can construct this\nDAG in linear time.",
    "start": "1237470",
    "end": "1243020"
  },
  {
    "text": "And then I can\nrun DAG relaxation on this graph in linear\ntime to get shortest paths.",
    "start": "1243020",
    "end": "1250070"
  },
  {
    "text": "So that's an approach. If I knew the ordering\nof the vertices in increasing distance, then\nI could use DAG relaxation.",
    "start": "1250070",
    "end": "1259020"
  },
  {
    "text": "So we're going to use both\nof these observations. That's how we're going to solve\nthis single source shortage",
    "start": "1259020",
    "end": "1264710"
  },
  {
    "text": "problem with non-negative\nweights using Dijkstra. So that's finally now\nwhere we're coming to.",
    "start": "1264710",
    "end": "1272600"
  },
  {
    "text": "Sorry, I missed a case here\nwhen I was writing up my notes, and I tried to fix it live and\nhopefully you guys followed me.",
    "start": "1272600",
    "end": "1280610"
  },
  {
    "text": "OK.  Dijkstra's algorithm.",
    "start": "1280610",
    "end": "1288200"
  },
  {
    "text": " Did I spell that right?",
    "start": "1288200",
    "end": "1293659"
  },
  {
    "text": "Kind of. OK. What? Dijkstra. ",
    "start": "1293660",
    "end": "1302480"
  },
  {
    "text": "OK. Now Dijkstra was this\nDutch computer scientist.",
    "start": "1302480",
    "end": "1309260"
  },
  {
    "text": "This is him. Pretty famous, he\nwrote a monograph on why programming\nlanguages should",
    "start": "1309260",
    "end": "1316970"
  },
  {
    "text": "start with 0 indexing as opposed\nto 1 indexing, so I like him.",
    "start": "1316970",
    "end": "1322280"
  },
  {
    "text": "But in particular, he designed\nthis very nice generalization of BFS for weighted graphs.",
    "start": "1322280",
    "end": "1330559"
  },
  {
    "text": "But maybe I didn't\nspell this right because when he writes\nhis name, he writes it with a Y with a dash over it.",
    "start": "1330560",
    "end": "1337730"
  },
  {
    "text": "So in reality on a\nDutch typewriter,",
    "start": "1337730",
    "end": "1345440"
  },
  {
    "text": "you might have a character\nthat looks like this, Y with a umlaut on top of it.",
    "start": "1345440",
    "end": "1351960"
  },
  {
    "text": "But on modern-- on\nan English keyboard,",
    "start": "1351960",
    "end": "1357600"
  },
  {
    "text": "this looks pretty\nsimilar to an IJ.",
    "start": "1357600",
    "end": "1362919"
  },
  {
    "text": "So in a lot of manuscripts,\nwe write it as D-I--",
    "start": "1362920",
    "end": "1370120"
  },
  {
    "text": "there's no J sound in Dijkstra. It's coming from this is Y here.",
    "start": "1370120",
    "end": "1375460"
  },
  {
    "text": "That's an interesting way to\nremember how to spell Dijkstra. But the basic idea behind\nDijkstra is the following idea.",
    "start": "1375460",
    "end": "1384759"
  },
  {
    "start": "1384760",
    "end": "1389830"
  },
  {
    "text": "Relaxed edges from vertices\nin increasing distance",
    "start": "1389830",
    "end": "1408880"
  },
  {
    "text": "from source. OK. This is the same\nkind of difficulty",
    "start": "1408880",
    "end": "1414230"
  },
  {
    "text": "we had before when we were\ntrying to generalize BFS.",
    "start": "1414230",
    "end": "1420440"
  },
  {
    "text": "So how do we know what\nthe next vertex is with increasing distance to s?",
    "start": "1420440",
    "end": "1427570"
  },
  {
    "text": "Well, the second idea is find\nthe next vertex efficiently",
    "start": "1427570",
    "end": "1443399"
  },
  {
    "text": "using a data structure. ",
    "start": "1443400",
    "end": "1448440"
  },
  {
    "text": "And the data structure\nwe're going to use is something I like to call\na changeable priority queue.",
    "start": "1448440",
    "end": "1454020"
  },
  {
    "start": "1454020",
    "end": "1462940"
  },
  {
    "text": "So this is a little different\nthan a normal priority queue that we had at the end of\nour data structures unit.",
    "start": "1462940",
    "end": "1476010"
  },
  {
    "text": "This changeable priority\nqueue has three operations. We're going to say it's a queue.",
    "start": "1476010",
    "end": "1482970"
  },
  {
    "text": "We can build it on an\niterable set of items.",
    "start": "1482970",
    "end": "1489330"
  },
  {
    "text": "Just stick x-- like\nn items in there.",
    "start": "1489330",
    "end": "1494700"
  },
  {
    "text": "We can delete min\nfrom the queue.",
    "start": "1494700",
    "end": "1503850"
  },
  {
    "text": "OK, this is the same now\nas the priority queue. It's this third operation\nthat's going to be different.",
    "start": "1503850",
    "end": "1509190"
  },
  {
    "text": " Decrease the key of an\nitem that has id, id.",
    "start": "1509190",
    "end": "1522420"
  },
  {
    "text": "OK, so this is a little strange. What the heck is this id?",
    "start": "1522420",
    "end": "1527640"
  },
  {
    "text": "All right, with a change\nof priority queue, each of our items has two\nvalues instead of one value.",
    "start": "1527640",
    "end": "1534060"
  },
  {
    "text": "It has a key, but it also-- on which the priority queue\nis leading the min item",
    "start": "1534060",
    "end": "1542760"
  },
  {
    "text": "with the minimum key. But also, each item\nhas an ID associated",
    "start": "1542760",
    "end": "1548010"
  },
  {
    "text": "with it, a unique integer. So that when we\nperform this operation,",
    "start": "1548010",
    "end": "1554970"
  },
  {
    "text": "decrease_key, it can find some\nitem in our data structure",
    "start": "1554970",
    "end": "1561690"
  },
  {
    "text": "with the given ID. And if it's\ncontained there, it's going to change its key\nto some smaller value k.",
    "start": "1561690",
    "end": "1572400"
  },
  {
    "text": "And don't worry about\nthe edge cases here. We're always going to\nmake sure this k is",
    "start": "1572400",
    "end": "1578070"
  },
  {
    "text": "going to be smaller\nthen whatever that key was to begin with.",
    "start": "1578070",
    "end": "1583090"
  },
  {
    "text": "So this is really a kind\nof a funky operation. ",
    "start": "1583090",
    "end": "1588460"
  },
  {
    "text": "If I had a priority queue, not\na changeable priority queue, but I had a priority\nqueue and I wanted",
    "start": "1588460",
    "end": "1595210"
  },
  {
    "text": "to implement a change\nof priority queue, how could I do it? ",
    "start": "1595210",
    "end": "1603980"
  },
  {
    "text": "Well, a regular priority\nqueue is already going to get me\nthese two operations.",
    "start": "1603980",
    "end": "1609680"
  },
  {
    "text": "It's just this one. I essentially need to\nfind something by an ID",
    "start": "1609680",
    "end": "1615540"
  },
  {
    "text": "and then update its key. So the idea how\nto implement this",
    "start": "1615540",
    "end": "1625990"
  },
  {
    "text": "is going to be to use a\nregular priority queue. ",
    "start": "1625990",
    "end": "1635290"
  },
  {
    "text": "I'm going to call it Q prime. And I'm going to cross-link\nit with a dictionary D.",
    "start": "1635290",
    "end": "1650630"
  },
  {
    "text": "So these are just regular\npriority queue on my items that has the key\nas defined above.",
    "start": "1650630",
    "end": "1658640"
  },
  {
    "text": "But I'm going to cross-link it\nwith a dictionary, a dictionary that maps IDs to their\nlocation in the priority queue.",
    "start": "1658640",
    "end": "1666860"
  },
  {
    "text": "We've done this many times in\nthe data structures section. We're trying to cross\nlink to data structures",
    "start": "1666860",
    "end": "1673820"
  },
  {
    "text": "to make a query on a\ndifferent type of key to find its place in\nanother data structure.",
    "start": "1673820",
    "end": "1681870"
  },
  {
    "text": "So, if we had a\npriority a dictionary,",
    "start": "1681870",
    "end": "1686980"
  },
  {
    "text": "we could do this\nstuff pretty fast. ",
    "start": "1686980",
    "end": "1692150"
  },
  {
    "text": "In particular, I'm\ngoing to assume that our IDs of our vertices\nare the integers between 0",
    "start": "1692150",
    "end": "1698360"
  },
  {
    "text": "and v minus 1. And so for my dictionary,\nI could get constant time",
    "start": "1698360",
    "end": "1704000"
  },
  {
    "text": "looking up of that ID by\nusing what data structure?",
    "start": "1704000",
    "end": "1710438"
  },
  {
    "text": "AUDIENCE: Hash table. JASON KU: We could get-- OK, so we could get\nexpected constant time",
    "start": "1710438",
    "end": "1717520"
  },
  {
    "text": "if we used a hash table. But if we knew that\nour vertex IDs were",
    "start": "1717520",
    "end": "1725040"
  },
  {
    "text": "just the numbers\nfrom 0 to v minus 1, we could get rid of\nthat expected time",
    "start": "1725040",
    "end": "1731190"
  },
  {
    "text": "by using a direct access array. Great. OK, so that's the assumption.",
    "start": "1731190",
    "end": "1737900"
  },
  {
    "text": "And so really, the\nname of the game here is to choose a\npriority queue here",
    "start": "1737900",
    "end": "1744730"
  },
  {
    "text": "that's going to make\nthese things fast when we start to look at Dijkstra. OK, so we're going to\nuse this data structure",
    "start": "1744730",
    "end": "1752530"
  },
  {
    "text": "to keep track of our\ndistance estimates",
    "start": "1752530",
    "end": "1758470"
  },
  {
    "text": "to all of the\nvertices away from s. OK, so this is\nDijkstra's algorithm.",
    "start": "1758470",
    "end": "1765220"
  },
  {
    "text": "OK. Set-- so same\ninitialization step.",
    "start": "1765220",
    "end": "1771430"
  },
  {
    "text": "We're going to set-- this is a distance\nestimate d, not delta.",
    "start": "1771430",
    "end": "1777430"
  },
  {
    "text": "We're going to want\nthe d's be our delta is at the end of the algorithm. That's what we're\ngoing to have to prove.",
    "start": "1777430",
    "end": "1783430"
  },
  {
    "text": "So we first set all of them to\ninfinity, and then set d of s,",
    "start": "1783430",
    "end": "1792335"
  },
  {
    "text": "s equal to 0. And here, we're never\ngoing to update it again,",
    "start": "1792335",
    "end": "1798620"
  },
  {
    "text": "because our shortest\ndistance is in a graph with non-negative edge weights\ncertainly can't go below 0.",
    "start": "1798620",
    "end": "1806539"
  },
  {
    "text": " All right. Now we build our--",
    "start": "1806540",
    "end": "1814130"
  },
  {
    "text": "build our changeable\npriority queue-- queue-- with an item--",
    "start": "1814130",
    "end": "1828620"
  },
  {
    "text": "I'm going to say an item is--",
    "start": "1828620",
    "end": "1834890"
  },
  {
    "text": "x is represented by\na tuple of its ID, and then its key just\nfor brevity here.",
    "start": "1834890",
    "end": "1843410"
  },
  {
    "text": "With an item v, d of s, v.",
    "start": "1843410",
    "end": "1849020"
  },
  {
    "text": "So I'm going to be storing in\nmy changeable priority queue the vertex label and its\nshortest-path distance estimate",
    "start": "1849020",
    "end": "1858259"
  },
  {
    "text": "d. And that's going to be the\nkey, the minimum that I'm trying going to be querying\non for each the v and V.",
    "start": "1858260",
    "end": "1871820"
  },
  {
    "text": "So I'm going to\nbuild that thing. It's going to then have all\nof my vertices in my graph.",
    "start": "1871820",
    "end": "1878180"
  },
  {
    "text": "Then while my changeable\npriority queue still",
    "start": "1878180",
    "end": "1885710"
  },
  {
    "text": "has items, not empty, I'm\ngoing to delete some u, d s, u.",
    "start": "1885710",
    "end": "1904850"
  },
  {
    "text": "So some item such\nthat its distance is minimized from Q that\nhas minimum distance.",
    "start": "1904850",
    "end": "1921860"
  },
  {
    "text": " OK. So I'm going to\nI'm going to look",
    "start": "1921860",
    "end": "1927720"
  },
  {
    "text": "at all the things in\nmy priority queue. At the start it's\njust going to be s, because everything as\nshortest-path distance",
    "start": "1927720",
    "end": "1934500"
  },
  {
    "text": "estimate infinite except for s. And so that's\nclearly the smallest. OK, so I'm going to\nremove that from my queue,",
    "start": "1934500",
    "end": "1941549"
  },
  {
    "text": "and then I'm going\nto process it. How am I going to process it? It's the exact same kind\nof thing as DAG relaxation.",
    "start": "1941550",
    "end": "1948600"
  },
  {
    "text": "I'm going to relax all\nits outgoing edges. So just for completeness for\nv in the outgoing adjacencies",
    "start": "1948600",
    "end": "1960100"
  },
  {
    "text": "of u, I'm going to relax--",
    "start": "1960100",
    "end": "1970070"
  },
  {
    "text": "sorry. We have to check\nwhether we can relax it.",
    "start": "1970070",
    "end": "1978799"
  },
  {
    "text": "Basically if the shortest-path\ndistance estimate to v",
    "start": "1978800",
    "end": "1989710"
  },
  {
    "text": "is greater than going to u first\nand then crossing that edge,",
    "start": "1989710",
    "end": "2002760"
  },
  {
    "text": "if going through\nthat is better, this is violating our\ntriangle inequality. And so we relax edge u, v, and\nby that we mean set this thing",
    "start": "2002760",
    "end": "2019220"
  },
  {
    "text": "to be equal to that thing. That's what we meant by relax.",
    "start": "2019220",
    "end": "2024370"
  },
  {
    "text": "And then we have one\nother thing to do. We have changed these\ndistance estimates",
    "start": "2024370",
    "end": "2033559"
  },
  {
    "text": "but our Q doesn't know that\nwe change these things. We added these items in here. ",
    "start": "2033560",
    "end": "2041170"
  },
  {
    "text": "But it doesn't know that\nmy distances have changed. So we to tell the Q to remember\nto change its key value",
    "start": "2041170",
    "end": "2052000"
  },
  {
    "text": "associated with the item v. So decrease-- what is it?",
    "start": "2052000",
    "end": "2062320"
  },
  {
    "text": "Decrease key vertex\nv in Q to the new d",
    "start": "2062320",
    "end": "2073810"
  },
  {
    "text": "s, v, the one that I\njust decreased here. And I know that I decreased\nit because I said it",
    "start": "2073810",
    "end": "2079989"
  },
  {
    "text": "to a smaller value. That makes sense. All right, so that's Dijkstra.",
    "start": "2079989",
    "end": "2085929"
  },
  {
    "text": "Let's run it on an example. So here's an example.",
    "start": "2085929",
    "end": "2093830"
  },
  {
    "text": "I have a directed graph. It does contain cycles. In particular, here\nare some cycles.",
    "start": "2093830",
    "end": "2101650"
  },
  {
    "text": "I think those are the main ones. There are definitely\ncycles in this graph.",
    "start": "2101650",
    "end": "2106740"
  },
  {
    "text": " But as you see,\nall of the weights",
    "start": "2106740",
    "end": "2112320"
  },
  {
    "text": "are non-negative, in\nparticular-- they're positive, actually. It's going to be just helpful\nin writing out this example.",
    "start": "2112320",
    "end": "2121420"
  },
  {
    "text": "So let's run Dijkstra\non this graph. First we initialize and we set\nthe shortest-path distance.",
    "start": "2121420",
    "end": "2128400"
  },
  {
    "text": "I'm going to label it in white\nhere to all of the things. Then I'm going to,\nas I update it,",
    "start": "2128400",
    "end": "2134340"
  },
  {
    "text": "I'm just going to cross them\nout and write a new number. So that's what it\nis at the start.",
    "start": "2134340",
    "end": "2140750"
  },
  {
    "text": "That's initialization,\nthat's after step 1. And then I stick things\ninto my Q. What's in my Q?",
    "start": "2140750",
    "end": "2146700"
  },
  {
    "text": "Here's my Q. It's everything.",
    "start": "2146700",
    "end": "2152099"
  },
  {
    "text": "It's vertices s, a, b, c, d.",
    "start": "2152100",
    "end": "2158520"
  },
  {
    "text": "I got five items\nin my Q. Really, it's the item pair with its\nshortest distance estimate,",
    "start": "2158520",
    "end": "2165740"
  },
  {
    "text": "I'm just not going\nto rewrite that here. So the idea here is-- the while loop, OK.",
    "start": "2165740",
    "end": "2171670"
  },
  {
    "text": "Q is not empty, great. We're going to delete the one\nwith the smallest distance",
    "start": "2171670",
    "end": "2177590"
  },
  {
    "text": "estimate, which\nis s, right, yeah. So I remove that, and then\nI relax edges out of s.",
    "start": "2177590",
    "end": "2186980"
  },
  {
    "text": "So I relax edge here to a. That's better than the\ndistance estimate--",
    "start": "2186980",
    "end": "2192890"
  },
  {
    "text": "10 is better than the\ndistance estimate infinite, so I'm going to\nchange this to 10.",
    "start": "2192890",
    "end": "2199730"
  },
  {
    "text": "And then here's\nanother outgoing edge. 3 is better than\ninfinite, so I'm",
    "start": "2199730",
    "end": "2206390"
  },
  {
    "text": "going to change its delta to 3. OK. So now I go back in here and I\nchange the distance estimates",
    "start": "2206390",
    "end": "2214580"
  },
  {
    "text": "associated with my Q. Now, next step of the\nalgorithm, s is done.",
    "start": "2214580",
    "end": "2221859"
  },
  {
    "text": "I've processed everything\ndistance 0 away. But I'm now going to\nuse my priority queue",
    "start": "2221860",
    "end": "2228320"
  },
  {
    "text": "to say which of my vertices\nhas the shortest distance estimate now.",
    "start": "2228320",
    "end": "2234589"
  },
  {
    "text": "So which one is it? a, b, or c, or d? ",
    "start": "2234590",
    "end": "2240859"
  },
  {
    "text": "Yeah, it's 3 and c. 3 is smaller than 10. So Q is going to\nmagically delete c for me,",
    "start": "2240860",
    "end": "2248360"
  },
  {
    "text": "tell me what that is, and now\nI'm going to process that. Now I've changed my\nboundary to this.",
    "start": "2248360",
    "end": "2256040"
  },
  {
    "text": "And now I relax edges out of c. So here's an edge\nat a c, that's a 4.",
    "start": "2256040",
    "end": "2263450"
  },
  {
    "text": "A 4 plus the 3 is smaller\nthan 10, so I update it.",
    "start": "2263450",
    "end": "2269540"
  },
  {
    "text": "3 plus 8 is 11, that's smaller\nthan infinite, so I update it, I relax.",
    "start": "2269540",
    "end": "2276540"
  },
  {
    "text": "3 plus 2 is smaller\nthan infinite, so I relax that as well. ",
    "start": "2276540",
    "end": "2283170"
  },
  {
    "text": "Now of the things\nstill left in my Q, I'm actually going to\nremove it from my Q",
    "start": "2283170",
    "end": "2288940"
  },
  {
    "text": "instead of crossing it\nout, maybe that's better.  Of the vertices still left in my\nQ, which has smallest distance?",
    "start": "2288940",
    "end": "2298920"
  },
  {
    "text": "Yeah. d. d has 5, 7, or 11. 5 is the smallest.",
    "start": "2298920",
    "end": "2304480"
  },
  {
    "text": "So I remove d from my cue\nand I relax edges from it. And now my boundary looks\nsomething like this.",
    "start": "2304480",
    "end": "2313559"
  },
  {
    "text": "I relax edges out of it. 5 plus 5, that's 10. 10 is smaller than\n11, so that's a 10.",
    "start": "2313560",
    "end": "2322470"
  },
  {
    "text": "And that's the only\noutgoing edge from d. so I'm done.",
    "start": "2322470",
    "end": "2327990"
  },
  {
    "text": "And then the last, 7\nis smaller than 10,",
    "start": "2327990",
    "end": "2333690"
  },
  {
    "text": "I relax edges out of a.  a to b, 7 plus 2\nis smaller than 10.",
    "start": "2333690",
    "end": "2343340"
  },
  {
    "start": "2343340",
    "end": "2349660"
  },
  {
    "text": "And now I'm done. So what I did every\ntime I removed s-- or I removed a vertex, I said\nits shortest-path distance",
    "start": "2349660",
    "end": "2357810"
  },
  {
    "text": "to the small-- the last value I assigned to it. So this was then 3, and\nthen a was 7, b was 9,",
    "start": "2357810",
    "end": "2369670"
  },
  {
    "text": "and then d was 5. So that's Dijkstra in action.",
    "start": "2369670",
    "end": "2375430"
  },
  {
    "text": "It seems like these are the\nshortest-path distances, but how do we prove that?",
    "start": "2375430",
    "end": "2380800"
  },
  {
    "text": "Did it do the right thing? Well, let's find out. So that's what we're going to\nspend some time on right now,",
    "start": "2380800",
    "end": "2389100"
  },
  {
    "text": "just talking about the\ncorrectness of Dijkstra's algorithm. ",
    "start": "2389100",
    "end": "2397690"
  },
  {
    "text": "OK. Correctness follows from\ntwo main observations.",
    "start": "2397690",
    "end": "2406550"
  },
  {
    "text": "So the claim here that we're\ntrying to prove is that d of s",
    "start": "2406550",
    "end": "2414290"
  },
  {
    "text": "equals the delta s--\nso the estimates equal",
    "start": "2414290",
    "end": "2420860"
  },
  {
    "text": "the shortest-path distance is\nat the end of Dijkstra for all v",
    "start": "2420860",
    "end": "2430680"
  },
  {
    "text": "and V at end. ",
    "start": "2430680",
    "end": "2437570"
  },
  {
    "text": "And this is going to follow\nfrom two observations. So the proof here,\nfirst, if ever relaxation",
    "start": "2437570",
    "end": "2453230"
  },
  {
    "text": "sets d of s of v-- it sets the estimate equal to\nthe shortest-path distance,",
    "start": "2453230",
    "end": "2461170"
  },
  {
    "text": "if it ever does that, I argue\nto you that still true at end.",
    "start": "2461170",
    "end": "2473125"
  },
  {
    "text": " OK, that's not a very\nstrong statement.",
    "start": "2473125",
    "end": "2478915"
  },
  {
    "text": "This is saying if I ever\nset the distance estimate to the true distance,\nI'm never going to set it",
    "start": "2478915",
    "end": "2486059"
  },
  {
    "text": "to a different value later on. And why is that? ",
    "start": "2486060",
    "end": "2492140"
  },
  {
    "text": "Well, relaxation only ever\ndecreases the distance. ",
    "start": "2492140",
    "end": "2499580"
  },
  {
    "text": "Relaxation only\ndecreases d s, v.",
    "start": "2499580",
    "end": "2511840"
  },
  {
    "text": "But we proved in lecture\n11-- so two lectures ago that relaxation is safe.",
    "start": "2511840",
    "end": "2517645"
  },
  {
    "text": " And what does safe mean?",
    "start": "2517645",
    "end": "2523960"
  },
  {
    "text": "Safe means that relaxation-- that relaxation will only ever\nchange these distant estimates",
    "start": "2523960",
    "end": "2533630"
  },
  {
    "text": "to be either infinite-- it was never-- there was\nnever a path to my vertex.",
    "start": "2533630",
    "end": "2544000"
  },
  {
    "text": "Or it was the length of some\npath to v. Length of some path.",
    "start": "2544000",
    "end": "2558750"
  },
  {
    "text": "OK. So what does that mean? It only decreases,\nbut it's always",
    "start": "2558750",
    "end": "2566070"
  },
  {
    "text": "the length of some\npath to v. So if this is the length of\nthe shortest path to v, I could never set\nit to a smaller length,",
    "start": "2566070",
    "end": "2574230"
  },
  {
    "text": "because there are no paths\nwith shorter distance. That's the whole point. OK. So with this\nobservation, I'm going",
    "start": "2574230",
    "end": "2582840"
  },
  {
    "text": "to argue this final claim. It suffices to show that my\nestimate equals the shortest",
    "start": "2582840",
    "end": "2599660"
  },
  {
    "text": "distance when v is\nremoved from the Q.",
    "start": "2599660",
    "end": "2614730"
  },
  {
    "text": "And since I removed every vertex\nfrom the Q in this while loop,",
    "start": "2614730",
    "end": "2621770"
  },
  {
    "text": "I will eventually said to\nall of the distance estimates to the real distance\nand we'll be golden.",
    "start": "2621770",
    "end": "2629810"
  },
  {
    "text": "Happy days. All right. So we'll be done if we\ncan prove that statement. All right.",
    "start": "2629810",
    "end": "2635270"
  },
  {
    "text": "So we're going to prove\nthis by induction obviously.",
    "start": "2635270",
    "end": "2641360"
  },
  {
    "text": "Induction on first k\nvertices removed from the Q.",
    "start": "2641360",
    "end": "2661950"
  },
  {
    "text": "So the Q, we're popping vertices\nfrom this Q in some order.",
    "start": "2661950",
    "end": "2668190"
  },
  {
    "text": "So I'm going to just\nargue that this claim is true for the first k.",
    "start": "2668190",
    "end": "2674880"
  },
  {
    "text": "Clearly that's true\nfor k equals 1. Base case, k equals 1.",
    "start": "2674880",
    "end": "2684710"
  },
  {
    "text": "What is k equals 1? That means the first\nword vertex that I pop has this property,\nwhich is definitely true,",
    "start": "2684710",
    "end": "2690980"
  },
  {
    "text": "because we set the shortest\ndistance to s to be 0. That's all good. ",
    "start": "2690980",
    "end": "2698150"
  },
  {
    "text": "Now we have our inductive step. ",
    "start": "2698150",
    "end": "2709279"
  },
  {
    "text": "Assume it's true for k prime--",
    "start": "2709280",
    "end": "2717920"
  },
  {
    "text": "sorry, k less than k prime. And let's let v prime be\nk prime vertex popped.",
    "start": "2717920",
    "end": "2730780"
  },
  {
    "text": " v prime. OK.",
    "start": "2730780",
    "end": "2736579"
  },
  {
    "text": "And now let's look at\nsome shortest path from s",
    "start": "2736580",
    "end": "2746830"
  },
  {
    "text": "to v prime. So we got the shortest\npath from s to v prime.",
    "start": "2746830",
    "end": "2753250"
  },
  {
    "text": "It exists. v prime is accessible. Let's say we pruned\nour graph to be",
    "start": "2753250",
    "end": "2758770"
  },
  {
    "text": "only the things\naccessible from s so that, yeah, there exists\nthe shortest path to v prime.",
    "start": "2758770",
    "end": "2767610"
  },
  {
    "text": "And now let's think\nabout these vertices. Some of them were removed\nfrom the Q and some of them",
    "start": "2767610",
    "end": "2776400"
  },
  {
    "text": "were not. s was definitely\nremoved from the Q. But some of these other\nvertices might not be.",
    "start": "2776400",
    "end": "2785250"
  },
  {
    "text": "I want to be able to\ninduct on this path, in particular, the\nvertex before me",
    "start": "2785250",
    "end": "2790410"
  },
  {
    "text": "so that I can say\nthat when I removed it and I relax the edge to v\nprime, then we're all golden.",
    "start": "2790410",
    "end": "2799300"
  },
  {
    "text": "But that might not be the case. There could be a vertex,\nthe vertex preceding me in the graph in this\nshortest path that was not",
    "start": "2799300",
    "end": "2807930"
  },
  {
    "text": "popped from Q. I need\nto argue that it was or some other thing. So let's consider the first\nvertex in this path from s",
    "start": "2807930",
    "end": "2821850"
  },
  {
    "text": "to v. I'm going to\ncall it y, I think. Yeah. ",
    "start": "2821850",
    "end": "2829660"
  },
  {
    "text": "A vertex y that is\nnot in Q. After I",
    "start": "2829660",
    "end": "2836430"
  },
  {
    "text": "pop v prime, this is the\nfirst-- or before I pop v prime,",
    "start": "2836430",
    "end": "2841740"
  },
  {
    "text": "y is not in the Q. Now these\nmight be the same vertex if all of the preceding ones\non this path were in the Q.",
    "start": "2841740",
    "end": "2851830"
  },
  {
    "text": "But in particular, we're\ngoing to look at this guy. And say its predecessor's\nx in the path.",
    "start": "2851830",
    "end": "2859130"
  },
  {
    "text": "Well what do I know? I know that x is in the queue.",
    "start": "2859130",
    "end": "2865470"
  },
  {
    "text": "Everything here was\npopped from the Q--",
    "start": "2865470",
    "end": "2871609"
  },
  {
    "text": "not in.  Which means that by induction,\nthe shortest-path distance",
    "start": "2871610",
    "end": "2879800"
  },
  {
    "text": "was set here correctly. So that the distance\nestimate at y",
    "start": "2879800",
    "end": "2887990"
  },
  {
    "text": "can't be bigger than the\nshortest path to x plus w x, y.",
    "start": "2887990",
    "end": "2896432"
  },
  {
    "text": " But this is on the\nshortest path to y,",
    "start": "2896432",
    "end": "2903280"
  },
  {
    "text": "because the subpaths of shortest\npaths or shortest paths. So this has to equal d\ns, y, the distance to y.",
    "start": "2903280",
    "end": "2912640"
  },
  {
    "text": "So actually, y is all good here. And so if v prime\nwere y, we'd be done.",
    "start": "2912640",
    "end": "2919030"
  },
  {
    "text": "That's the same argument\nis DAG relaxation. But we need to prove\nsomething about v prime.",
    "start": "2919030",
    "end": "2926040"
  },
  {
    "text": "Well, because we have\nnon-negative weights, the distance to v prime\nhas to be at least as big",
    "start": "2926040",
    "end": "2933890"
  },
  {
    "text": "as this distance,\nbecause it's a subpath. So this has to be less than\nor equal to the true distance",
    "start": "2933890",
    "end": "2941450"
  },
  {
    "text": "to v prime.  Because of negative--\nnon-negative weights,",
    "start": "2941450",
    "end": "2951100"
  },
  {
    "text": "because the weights\nare non-negative. But because\nrelaxation is safe, we",
    "start": "2951100",
    "end": "2958420"
  },
  {
    "text": "know that our distance\nestimate for v prime has to be at least the\nshortest-path distance. ",
    "start": "2958420",
    "end": "2968320"
  },
  {
    "text": "This is because it's safe. This is-- weights are\ngreater than or equal to 0.",
    "start": "2968320",
    "end": "2976760"
  },
  {
    "text": " The last step here\nis that because we're",
    "start": "2976760",
    "end": "2983870"
  },
  {
    "text": "popping the minimum\nfrom our priority queue, the thing\nwith the smallest",
    "start": "2983870",
    "end": "2989660"
  },
  {
    "text": "shortest-path distance,\nthis has to be less than or equal to the shortest-path\ndistance estimate to y.",
    "start": "2989660",
    "end": "2999440"
  },
  {
    "text": "Because this is the smallest\namong all such vertices in my Q.",
    "start": "2999440",
    "end": "3005700"
  },
  {
    "text": "But these are the same value. So everything between\nhere is the same value. In particular, the\nestimate here is",
    "start": "3005700",
    "end": "3014369"
  },
  {
    "text": "equal to my true\nshortest-path distance, which is exactly what\nwe're trying to prove. OK, so that's why\nDijkstra's correct.",
    "start": "3014370",
    "end": "3021430"
  },
  {
    "text": "I'm going to spend the last\nfive minutes on the running time of Dijkstra. ",
    "start": "3021430",
    "end": "3028580"
  },
  {
    "text": "We set this up so\nthat we did everything",
    "start": "3028580",
    "end": "3035810"
  },
  {
    "text": "in terms of these Q operations. Right so we have\nthese Q operations,",
    "start": "3035810",
    "end": "3042170"
  },
  {
    "text": "we have three of them. I'm going to say if I\nhave a build operation,",
    "start": "3042170",
    "end": "3048660"
  },
  {
    "text": "let's say it takes\nB time; to lead min, I'm going to say it takes M\ntime; and this decreased key,",
    "start": "3048660",
    "end": "3054330"
  },
  {
    "text": "I'm going to say\nit takes D time. So what is the running\ntime of Dijkstra? If I take a look at that\nalgorithm over there--",
    "start": "3054330",
    "end": "3063400"
  },
  {
    "text": "well I guess let's switch\nthese back up again.",
    "start": "3063400",
    "end": "3069990"
  },
  {
    "text": "OK, so what does this do? We build once. ",
    "start": "3069990",
    "end": "3075329"
  },
  {
    "text": "Then we delete the minimum\nfrom the Q how many times?",
    "start": "3075330",
    "end": "3081080"
  },
  {
    "text": "v times. We remove every\nvertex from our Q.",
    "start": "3081080",
    "end": "3086212"
  },
  {
    "text": "Then for every\npossible edge, we may need to relax and decrease\nthe key in our queue",
    "start": "3086212",
    "end": "3095410"
  },
  {
    "text": "once for every outgoing edge.  So the running time is B plus\nV times M plus E times D. OK.",
    "start": "3095410",
    "end": "3115640"
  },
  {
    "text": "So how could we implement\nthis priority queue? Well, if we use the stupidest\npriority queue in the world,",
    "start": "3115640",
    "end": "3124270"
  },
  {
    "text": "here's a list of\ndifferent implementations we could have for\nour priority queues. And when I say priority queue,\nI mean this priority queue.",
    "start": "3124270",
    "end": "3132820"
  },
  {
    "text": "We're already implementing\nthe changeable priority queue by linking it with a\ndictionary that's efficient",
    "start": "3132820",
    "end": "3138800"
  },
  {
    "text": "If I just use an array, I can\nfind the min in linear time, sure.",
    "start": "3138800",
    "end": "3143950"
  },
  {
    "text": "And I don't have to update\nthat array in any way. ",
    "start": "3143950",
    "end": "3149350"
  },
  {
    "text": "I mean, I can just\nkeep the distances in my direct access array.",
    "start": "3149350",
    "end": "3154579"
  },
  {
    "text": "I don't have to store a\nseparate data structure. I just store the distances\nin my direct access array D,",
    "start": "3154580",
    "end": "3160400"
  },
  {
    "text": "and so I can find\nit in constant time and I can update the\nvalues stored there. And then whenever\nI want the minimum,",
    "start": "3160400",
    "end": "3166750"
  },
  {
    "text": "I can just loop through\nthe whole thing. So that gives me a\nreally fast decrease key,",
    "start": "3166750",
    "end": "3171940"
  },
  {
    "text": "but slow delete min. But if we take a look at\nthe running time bound here,",
    "start": "3171940",
    "end": "3178920"
  },
  {
    "text": "we get something, if\nwe replace n with v, we get a quadratic\ntime algorithm",
    "start": "3178920",
    "end": "3185250"
  },
  {
    "text": "in the number of vertices,\nwhich for a dense graph,",
    "start": "3185250",
    "end": "3190410"
  },
  {
    "text": "this is in linear time. That's actually pretty good. Dense meaning that I have\nat least a quadratic number of vertices.",
    "start": "3190410",
    "end": "3195705"
  },
  {
    "text": " So that's actually\nreally good, and it's the stupidest possible\ndata structure",
    "start": "3195705",
    "end": "3203180"
  },
  {
    "text": "we could use for\nthis priority queue. Now we can do a little better,\nactually, for not dense--",
    "start": "3203180",
    "end": "3209480"
  },
  {
    "text": "I mean, for sparse graphs\nwhere the number of edges is at most v, then this is\npretty bad, it's quadratic.",
    "start": "3209480",
    "end": "3220133"
  },
  {
    "text": "We want to do something\na little better. Now if we're sparse,\na binary heap",
    "start": "3220133",
    "end": "3225340"
  },
  {
    "text": "can delete min in\nlogarithmic time, but it can actually, if I know\nwhere I am in the heap and I",
    "start": "3225340",
    "end": "3233500"
  },
  {
    "text": "decrease the key and\nI'm in a min heap,",
    "start": "3233500",
    "end": "3239150"
  },
  {
    "text": "I can just swap with\nmy parent upwards in the tree in log n time\nand rebalance the-- refix",
    "start": "3239150",
    "end": "3245900"
  },
  {
    "text": "the binary heap property. And so I can do that\nin logarithmic time.",
    "start": "3245900",
    "end": "3251240"
  },
  {
    "text": "And if I do that and I\nput it into this formula, I actually get n--",
    "start": "3251240",
    "end": "3256789"
  },
  {
    "text": "or V plus V times log\nV plus E times log V.",
    "start": "3256790",
    "end": "3264830"
  },
  {
    "text": "And so that's going to give me\nE log V if I'm assuming that I'm first pruning out all of the\nthings not connected to me,",
    "start": "3264830",
    "end": "3274190"
  },
  {
    "text": "then E asymptotically\nupper bounds V, and I get this E log V running\ntime, which is pretty good.",
    "start": "3274190",
    "end": "3282440"
  },
  {
    "text": "That's just an extra\nlog factor on linear. ",
    "start": "3282440",
    "end": "3288400"
  },
  {
    "text": "Now there's an even better-- well, better is hard to say.",
    "start": "3288400",
    "end": "3294910"
  },
  {
    "text": "Really, there's a\ndifferent data structure that achieves both bounds\nfor sparse and dense graphs",
    "start": "3294910",
    "end": "3303940"
  },
  {
    "text": "and everything in between. It gives us an E plus V\nlog V running time bound.",
    "start": "3303940",
    "end": "3310120"
  },
  {
    "text": "This data structure is\ncalled the Fibonacci heap. We're not going to\ntalk about it in 6.006.",
    "start": "3310120",
    "end": "3315760"
  },
  {
    "text": "They talk about it-- and you\ncan look at chapter 19 in CLRS or you can look at-- I think they talk\nabout it in 6.854",
    "start": "3315760",
    "end": "3323559"
  },
  {
    "text": "if you're interested in\nlearning about Fibonacci heaps. But these are almost never-- I mean, they get good\ntheoretical bounds.",
    "start": "3323560",
    "end": "3330720"
  },
  {
    "text": "So what you want to say\nis, whenever we give you a theory problem where you\nmight want to use Dijkstra,",
    "start": "3330720",
    "end": "3336970"
  },
  {
    "text": "you want to use this\ntheoretical running time bound",
    "start": "3336970",
    "end": "3343690"
  },
  {
    "text": "for your problem E plus\nV log V. But if you",
    "start": "3343690",
    "end": "3348849"
  },
  {
    "text": "happen to know that your graph\nis sparse or dense, just using",
    "start": "3348850",
    "end": "3355000"
  },
  {
    "text": "an array or a heap is\ngoing to get you just as good of a running time. Very close to linear.",
    "start": "3355000",
    "end": "3362200"
  },
  {
    "text": "And so in practice, most people,\nwhen they are implementing a graph search\nalgorithm, they know",
    "start": "3362200",
    "end": "3368710"
  },
  {
    "text": "if their graph is\nsparse or dense, and so they never bother\nimplementing a Fibonacci heap, which is a little complicated.",
    "start": "3368710",
    "end": "3376180"
  },
  {
    "text": "So they're usually either in\none of these first two cases where V squared is linear\nwhen your graph is dense,",
    "start": "3376180",
    "end": "3383350"
  },
  {
    "text": "or we're very close to linear,\nE times log V, which is V log",
    "start": "3383350",
    "end": "3389072"
  },
  {
    "text": "V if your graph is sparse. So that's the running\ntime of Dijkstra.",
    "start": "3389072",
    "end": "3395185"
  },
  {
    "text": " So so far, we've gotten\nall of these nice bounds.",
    "start": "3395185",
    "end": "3405820"
  },
  {
    "text": "Some special cases where we're-- I mean, special cases\nwhere we're linear.",
    "start": "3405820",
    "end": "3411130"
  },
  {
    "text": "Dijkstra where we're\nclose to linear. And Bellman-Ford, if we throw\nour hands up in the air,",
    "start": "3411130",
    "end": "3419140"
  },
  {
    "text": "there might be negative\ncycles in our graph, we gotta spend that\nquadratic running time bound. Now there are faster\nalgorithms, but this",
    "start": "3419140",
    "end": "3425290"
  },
  {
    "text": "is the fastest we're going\nto teach you in this class. Now and in the\nnext lecture we're going to be talking about\nall pair shortest paths,",
    "start": "3425290",
    "end": "3433030"
  },
  {
    "text": "and we'll pick it up next time. ",
    "start": "3433030",
    "end": "3441196"
  }
]