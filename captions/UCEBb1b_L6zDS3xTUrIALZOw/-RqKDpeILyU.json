[
  {
    "start": "0",
    "end": "500"
  },
  {
    "text": "For this problem,\nassume that you",
    "start": "500",
    "end": "2890"
  },
  {
    "text": "have discovered a\nroom full of discarded",
    "start": "2890",
    "end": "5310"
  },
  {
    "text": "5-stage pipelined betas.",
    "start": "5310",
    "end": "7460"
  },
  {
    "text": "These betas fall\ninto four categories.",
    "start": "7460",
    "end": "10320"
  },
  {
    "text": "The first is completely\nfunctional 5-stage Betas",
    "start": "10320",
    "end": "13460"
  },
  {
    "text": "with full bypass\nand annulment logic.",
    "start": "13460",
    "end": "16490"
  },
  {
    "text": "The second are betas\nwith a bad register file.",
    "start": "16490",
    "end": "19960"
  },
  {
    "text": "In these betas, all data read\ndirectly from the register file",
    "start": "19960",
    "end": "23560"
  },
  {
    "text": "is zero.",
    "start": "23560",
    "end": "24960"
  },
  {
    "text": "Note that if the data is\nread from a bypass path,",
    "start": "24960",
    "end": "27840"
  },
  {
    "text": "then the correct\nvalue will be read.",
    "start": "27840",
    "end": "30730"
  },
  {
    "text": "The third set are betas\nwithout bypass paths.",
    "start": "30730",
    "end": "34400"
  },
  {
    "text": "And finally, the fourth\nare betas without annulment",
    "start": "34400",
    "end": "37260"
  },
  {
    "text": "of branch delay slots.",
    "start": "37260",
    "end": "39329"
  },
  {
    "text": "The problem is that the\nbetas are not labeled,",
    "start": "39330",
    "end": "41710"
  },
  {
    "text": "so we do not know which\nfalls into which category.",
    "start": "41710",
    "end": "46449"
  },
  {
    "text": "You come up with the\ntest program shown here.",
    "start": "46450",
    "end": "49140"
  },
  {
    "text": "Your plan is to single\nstep through the program",
    "start": "49140",
    "end": "51760"
  },
  {
    "text": "using each Beta chip,\ncarefully noting",
    "start": "51760",
    "end": "54570"
  },
  {
    "text": "the address that the final\nJMP loads into the PC.",
    "start": "54570",
    "end": "58340"
  },
  {
    "text": "Your goal is to determine\nwhich of the four classes",
    "start": "58340",
    "end": "61090"
  },
  {
    "text": "each chip falls into\nvia this JMP address.",
    "start": "61090",
    "end": "65080"
  },
  {
    "text": "Notice that on a\nfully functional beta,",
    "start": "65080",
    "end": "67610"
  },
  {
    "text": "this code would execute the\ninstructions sequentially",
    "start": "67610",
    "end": "71060"
  },
  {
    "text": "skipping the MULC instruction.",
    "start": "71060",
    "end": "72670"
  },
  {
    "start": "72670",
    "end": "75560"
  },
  {
    "text": "Here we see a pipeline\ndiagram showing",
    "start": "75560",
    "end": "77880"
  },
  {
    "text": "execution of this program\non a fully functional beta",
    "start": "77880",
    "end": "81040"
  },
  {
    "text": "from category C1.",
    "start": "81040",
    "end": "83610"
  },
  {
    "text": "It shows that the although the\nMULC instruction is fetched",
    "start": "83610",
    "end": "86620"
  },
  {
    "text": "in cycle 2, it gets annulled\nwhen the BEQ is in the RF stage",
    "start": "86620",
    "end": "91730"
  },
  {
    "text": "and it determines that the\nbranch to label X, or the SUBC",
    "start": "91730",
    "end": "95280"
  },
  {
    "text": "instruction, will be taken.",
    "start": "95280",
    "end": "97869"
  },
  {
    "text": "The MULC is annulled by\ninserting a NOP in its place.",
    "start": "97870",
    "end": "103280"
  },
  {
    "text": "The ADDC and BEQ\ninstructions read R31",
    "start": "103280",
    "end": "105500"
  },
  {
    "text": "from the register file.",
    "start": "105500",
    "end": "108440"
  },
  {
    "text": "The SUBC, however,\ngets the value",
    "start": "108440",
    "end": "110840"
  },
  {
    "text": "of R2 via the bypass path\nfrom the BEQ instruction",
    "start": "110840",
    "end": "114549"
  },
  {
    "text": "which is in the MEM stage.",
    "start": "114550",
    "end": "117120"
  },
  {
    "text": "The ADD then reads R0 and R2.",
    "start": "117120",
    "end": "120840"
  },
  {
    "text": "R0 has already made it\nback to the register file",
    "start": "120840",
    "end": "123390"
  },
  {
    "text": "because the ADDC\ninstruction completed",
    "start": "123390",
    "end": "125690"
  },
  {
    "text": "by the end of cycle 4.",
    "start": "125690",
    "end": "127980"
  },
  {
    "text": "R2, however, is read\nvia the bypass path",
    "start": "127980",
    "end": "130910"
  },
  {
    "text": "from the SUBC instruction\nwhich is in the ALU stage.",
    "start": "130910",
    "end": "135290"
  },
  {
    "text": "Finally, the JMP,\nreads the value",
    "start": "135290",
    "end": "137459"
  },
  {
    "text": "of R3 via the bypass path\nfrom the ADD instruction",
    "start": "137460",
    "end": "141400"
  },
  {
    "text": "which is in the ALU\nstage in cycle 6.",
    "start": "141400",
    "end": "145540"
  },
  {
    "text": "When run on a fully functional\nbeta with bypass paths",
    "start": "145540",
    "end": "149040"
  },
  {
    "text": "and annulment of\nbranch delay slots,",
    "start": "149040",
    "end": "151200"
  },
  {
    "text": "the code behaves as follows:",
    "start": "151200",
    "end": "154379"
  },
  {
    "text": "The ADDC sets R0 = 4.",
    "start": "154380",
    "end": "157530"
  },
  {
    "text": "The BEQ stores PC + 4 into R2.",
    "start": "157530",
    "end": "160610"
  },
  {
    "text": "Since the ADDC is at address\n0, the BEQ is at address 4,",
    "start": "160610",
    "end": "166220"
  },
  {
    "text": "so PC + 4 = 8 is stored into\nR2, and the program branches",
    "start": "166220",
    "end": "171520"
  },
  {
    "text": "to label X.",
    "start": "171520",
    "end": "173430"
  },
  {
    "text": "Next, the SUBC subtracts 4\nfrom the latest value of R2",
    "start": "173430",
    "end": "177390"
  },
  {
    "text": "and stores the result\nwhich is 4 back into R2.",
    "start": "177390",
    "end": "180940"
  },
  {
    "text": "The ADD adds R0 and R2, or 4\nand 4, and stores the result",
    "start": "180940",
    "end": "188240"
  },
  {
    "text": "which is 8 into R3.",
    "start": "188240",
    "end": "189560"
  },
  {
    "text": "The JMP jumps to the\naddress in R3 which is 8.",
    "start": "189560",
    "end": "197230"
  },
  {
    "text": "When run on C2 which has\na bad register file that",
    "start": "197230",
    "end": "200390"
  },
  {
    "text": "always outputs a zero, the\nbehavior of the program",
    "start": "200390",
    "end": "203740"
  },
  {
    "text": "changes a bit.",
    "start": "203740",
    "end": "206430"
  },
  {
    "text": "The ADDC and BEQ\ninstructions which",
    "start": "206430",
    "end": "207939"
  },
  {
    "text": "use R31 which is 0 anyways\nbehave in the same way",
    "start": "207940",
    "end": "212040"
  },
  {
    "text": "as before.",
    "start": "212040",
    "end": "213810"
  },
  {
    "text": "The SUBC, which gets the value\nof R2 from the bypass path,",
    "start": "213810",
    "end": "217989"
  },
  {
    "text": "reads the correct value\nfor R2 which is 8.",
    "start": "217990",
    "end": "221790"
  },
  {
    "text": "Recall that only reads directly\nfrom the register file return",
    "start": "221790",
    "end": "225129"
  },
  {
    "text": "a zero, whereas if the data is\ncoming from a bypass path, then",
    "start": "225130",
    "end": "229160"
  },
  {
    "text": "you get the correct value.",
    "start": "229160",
    "end": "230960"
  },
  {
    "text": "So the SUBC produces a 4.",
    "start": "230960",
    "end": "232700"
  },
  {
    "text": "The ADD reads R0 from\nthe register file",
    "start": "232700",
    "end": "236940"
  },
  {
    "text": "and R2 from the bypass path.",
    "start": "236940",
    "end": "239600"
  },
  {
    "text": "The result is that\nthe value of R0",
    "start": "239600",
    "end": "241810"
  },
  {
    "text": "is read as if it was 0 while\nthat of R2 is correct and is 4.",
    "start": "241810",
    "end": "247690"
  },
  {
    "text": "So R3 gets the value\n4 assigned to it,",
    "start": "247690",
    "end": "250930"
  },
  {
    "text": "and that is the address that\nthe JMP instruction jumps",
    "start": "250930",
    "end": "253829"
  },
  {
    "text": "to because it too reads its\nregister from a bypass path.",
    "start": "253830",
    "end": "260190"
  },
  {
    "text": "When run on C3 which does\nnot have any bypass paths,",
    "start": "260190",
    "end": "264300"
  },
  {
    "text": "some of the instructions\nwill read stale values",
    "start": "264300",
    "end": "267099"
  },
  {
    "text": "of their source operands.",
    "start": "267100",
    "end": "269030"
  },
  {
    "text": "Letâ€™s go through the\nexample in detail.",
    "start": "269030",
    "end": "271670"
  },
  {
    "text": "The ADDC and BEQ\ninstructions read",
    "start": "271670",
    "end": "275400"
  },
  {
    "text": "R31 which is 0 from the register\nfile so what they ultimately",
    "start": "275400",
    "end": "279810"
  },
  {
    "text": "produce does not change.",
    "start": "279810",
    "end": "281820"
  },
  {
    "text": "However, you must keep\nin mind that the updated",
    "start": "281820",
    "end": "284760"
  },
  {
    "text": "value of the\ndestination register",
    "start": "284760",
    "end": "287000"
  },
  {
    "text": "will not get updated until\nafter that instruction completes",
    "start": "287000",
    "end": "291100"
  },
  {
    "text": "the WB stage of the pipeline.",
    "start": "291100",
    "end": "294430"
  },
  {
    "text": "When the SUBC reads R2, it\ngets a stale value of R2",
    "start": "294430",
    "end": "298470"
  },
  {
    "text": "because the BEQ instruction\nhas not yet completed,",
    "start": "298470",
    "end": "302030"
  },
  {
    "text": "so it assumes that R2 = 0.",
    "start": "302030",
    "end": "305080"
  },
  {
    "text": "It then subtracts 4 from that\nand tries to write -4 into R2.",
    "start": "305080",
    "end": "310830"
  },
  {
    "text": "Next the ADD runs.",
    "start": "310830",
    "end": "312979"
  },
  {
    "text": "Recall that the\nADD would normally",
    "start": "312980",
    "end": "314920"
  },
  {
    "text": "read R0 from the register\nfile because by the time",
    "start": "314920",
    "end": "318200"
  },
  {
    "text": "the ADD is in the RF stage,\nthe ADDC which writes to R0",
    "start": "318200",
    "end": "321990"
  },
  {
    "text": "has completed all\nthe pipeline stages.",
    "start": "321990",
    "end": "325160"
  },
  {
    "text": "The ADD also normally read\nR2 from the bypass path.",
    "start": "325160",
    "end": "329510"
  },
  {
    "text": "However, since C3 does\nnot have bypass paths,",
    "start": "329510",
    "end": "333200"
  },
  {
    "text": "it reads a stale value of\nR2 from the register file.",
    "start": "333200",
    "end": "336920"
  },
  {
    "text": "To determine which\nstale value it reads,",
    "start": "336920",
    "end": "339440"
  },
  {
    "text": "we need to examine\nthe pipeline diagram",
    "start": "339440",
    "end": "342210"
  },
  {
    "text": "to see if either the BEQ or the\nSUBC operations, both of which",
    "start": "342210",
    "end": "346880"
  },
  {
    "text": "eventually update\nR2, have completed",
    "start": "346880",
    "end": "349590"
  },
  {
    "text": "by the time the ADD reads\nits source operands.",
    "start": "349590",
    "end": "352090"
  },
  {
    "start": "352090",
    "end": "355130"
  },
  {
    "text": "Looking at our\npipeline diagram, we",
    "start": "355130",
    "end": "357500"
  },
  {
    "text": "see that when the ADD\nis in the RF stage,",
    "start": "357500",
    "end": "360210"
  },
  {
    "text": "neither the BEQ nor the\nSUBC have completed,",
    "start": "360210",
    "end": "363770"
  },
  {
    "text": "thus the value read for R2 is\nthe initial value of R2 which",
    "start": "363770",
    "end": "368210"
  },
  {
    "text": "is 0.",
    "start": "368210",
    "end": "368710"
  },
  {
    "text": "We can now determine the\nbehavior of the ADD instruction",
    "start": "368710",
    "end": "373669"
  },
  {
    "text": "which is that it assumes\nR0 = 4 and R2 = 0",
    "start": "373670",
    "end": "377510"
  },
  {
    "text": "and will eventually\nwrite a 4 into R3.",
    "start": "377510",
    "end": "382220"
  },
  {
    "text": "Finally, the JMP\ninstruction wants",
    "start": "382220",
    "end": "384310"
  },
  {
    "text": "to read the result\nof the ADD, however,",
    "start": "384310",
    "end": "386780"
  },
  {
    "text": "since there are no\nbypass paths, it",
    "start": "386780",
    "end": "388820"
  },
  {
    "text": "reads the original\nvalue of R3 which was 0",
    "start": "388820",
    "end": "391940"
  },
  {
    "text": "and jumps to address 0.",
    "start": "391940",
    "end": "394440"
  },
  {
    "text": "Of course, had we looked at\nour code a little more closely,",
    "start": "394440",
    "end": "397530"
  },
  {
    "text": "we could have determined\nthis without all",
    "start": "397530",
    "end": "399450"
  },
  {
    "text": "the intermediate steps because\nthe ADD is the only instruction",
    "start": "399450",
    "end": "403180"
  },
  {
    "text": "that tries to update\nR3, and you know",
    "start": "403180",
    "end": "405850"
  },
  {
    "text": "that the JMP would normally get\nR3 from the bypass path which",
    "start": "405850",
    "end": "409400"
  },
  {
    "text": "is not available, therefore it\nmust read the original value",
    "start": "409400",
    "end": "413199"
  },
  {
    "text": "of R3 which is 0.",
    "start": "413200",
    "end": "417520"
  },
  {
    "text": "In category C4, the betas do\nnot annul instructions that were",
    "start": "417520",
    "end": "421550"
  },
  {
    "text": "fetched after a branch\ninstruction but arenâ€™t supposed",
    "start": "421550",
    "end": "424430"
  },
  {
    "text": "to get executed.",
    "start": "424430",
    "end": "425990"
  },
  {
    "text": "This means that\nthe MULC which is",
    "start": "425990",
    "end": "427910"
  },
  {
    "text": "fetched after the\nBEQ is actually",
    "start": "427910",
    "end": "430640"
  },
  {
    "text": "executed in the pipeline\nand affects the value of R2.",
    "start": "430640",
    "end": "434850"
  },
  {
    "text": "Letâ€™s take a close look at what\nhappens in each instruction.",
    "start": "434850",
    "end": "439230"
  },
  {
    "text": "Once again we begin with\nthe ADDC setting R0 to 4",
    "start": "439230",
    "end": "442570"
  },
  {
    "text": "and the BEQ setting R2 to 8.",
    "start": "442570",
    "end": "445870"
  },
  {
    "text": "Since our bypass\npaths are now working,",
    "start": "445870",
    "end": "448130"
  },
  {
    "text": "we can assume that\nwe can immediately",
    "start": "448130",
    "end": "449990"
  },
  {
    "text": "get the updated value.",
    "start": "449990",
    "end": "452259"
  },
  {
    "text": "Next, we execute the MULC which\ntakes the latest value of R2",
    "start": "452260",
    "end": "456170"
  },
  {
    "text": "from the bypass path\nand multiplies it by 2.",
    "start": "456170",
    "end": "460070"
  },
  {
    "text": "So it sets R2 = 16.",
    "start": "460070",
    "end": "462300"
  },
  {
    "text": "The SUBC now uses this value\nfor R2 from which it subtracts 4",
    "start": "462300",
    "end": "468440"
  },
  {
    "text": "to produce R2 = 12.",
    "start": "468440",
    "end": "472060"
  },
  {
    "text": "The ADD then reads R0 =\n4 and adds to it R2 = 12",
    "start": "472060",
    "end": "476740"
  },
  {
    "text": "to produce R3 = 16.",
    "start": "476740",
    "end": "482300"
  },
  {
    "text": "Finally, the JMP\njumps to address 16.",
    "start": "482300",
    "end": "484750"
  },
  {
    "text": "Since each of the\nfour categories",
    "start": "484750",
    "end": "488480"
  },
  {
    "text": "produces a unique jump\naddress, this program",
    "start": "488480",
    "end": "491790"
  },
  {
    "text": "can be used to sort out all the\nbetas into the four categories.",
    "start": "491790",
    "end": "496630"
  }
]