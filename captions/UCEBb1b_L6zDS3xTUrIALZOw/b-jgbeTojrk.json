[
  {
    "start": "0",
    "end": "30000"
  },
  {
    "text": "In order to better understand the role of\neach of the beta control signals, we will",
    "start": "780",
    "end": "5500"
  },
  {
    "text": "work through an example problem that provides\nus with a partially filled control table for",
    "start": "5500",
    "end": "10519"
  },
  {
    "text": "5 different instructions.",
    "start": "10519",
    "end": "12570"
  },
  {
    "text": "Two of these instructions are existing beta\ninstructions that we must infer from the provided",
    "start": "12570",
    "end": "17340"
  },
  {
    "text": "control signals.",
    "start": "17340",
    "end": "19160"
  },
  {
    "text": "The other three are three new instructions\nthat we are adding to our beta by modifying",
    "start": "19160",
    "end": "24110"
  },
  {
    "text": "the necessary control signals to produce the\ndesired behavior of each of the operations.",
    "start": "24110",
    "end": "29760"
  },
  {
    "text": "The first instruction that we want to add\nto our beta is an LDX instruction which is",
    "start": "29760",
    "end": "34780"
  },
  {
    "start": "30000",
    "end": "30000"
  },
  {
    "text": "a load that is double indexed.",
    "start": "34780",
    "end": "37468"
  },
  {
    "text": "What this means is that in order to produce\nthe effective address of the load, instead",
    "start": "37469",
    "end": "41929"
  },
  {
    "text": "of adding the contents of a register to a\nconstant as is done in the LD instruction,",
    "start": "41929",
    "end": "47109"
  },
  {
    "text": "we add the contents of two different registers.",
    "start": "47109",
    "end": "50390"
  },
  {
    "text": "So the address for this load operation is\nthe result of adding together the contents",
    "start": "50390",
    "end": "54659"
  },
  {
    "text": "of registers Ra and Rb.",
    "start": "54659",
    "end": "57069"
  },
  {
    "text": "The contents of the memory location pointed\nto by this effective address are loaded into",
    "start": "57069",
    "end": "62229"
  },
  {
    "text": "register Rc.",
    "start": "62229",
    "end": "63960"
  },
  {
    "text": "Finally, the PC is incremented by 4 to point\nto the next instruction.",
    "start": "63960",
    "end": "69659"
  },
  {
    "text": "The second instruction that we want to add\nto our beta is a MVZC instruction which is",
    "start": "69659",
    "end": "74950"
  },
  {
    "start": "70000",
    "end": "70000"
  },
  {
    "text": "a move constant if zero instruction.",
    "start": "74950",
    "end": "78189"
  },
  {
    "text": "The way this instruction works is that if\nthe contents of register Ra equal zero, then",
    "start": "78190",
    "end": "83970"
  },
  {
    "text": "the sign extended version of the literal constant\nwill be loaded into register Rc.",
    "start": "83970",
    "end": "90890"
  },
  {
    "text": "This is followed by incrementing the PC to\npoint to the next instruction.",
    "start": "90890",
    "end": "96938"
  },
  {
    "start": "96000",
    "end": "96000"
  },
  {
    "text": "The third instruction that we want to add\nto our beta is a STR instruction which is",
    "start": "96939",
    "end": "102110"
  },
  {
    "text": "a store relative instruction.",
    "start": "102110",
    "end": "104659"
  },
  {
    "text": "For this instruction, the effective address\nis computed by sign extending the constant",
    "start": "104659",
    "end": "109460"
  },
  {
    "text": "C, multiplying it by 4 and adding it to PC\n+ 4.",
    "start": "109460",
    "end": "115219"
  },
  {
    "text": "The contents of register Rc are then stored\nat the memory location pointed to by the effective",
    "start": "115219",
    "end": "120890"
  },
  {
    "text": "address that was just computed.",
    "start": "120890",
    "end": "124399"
  },
  {
    "text": "As a final step, the PC is incremented by\n4 to point to the next instruction.",
    "start": "124399",
    "end": "130759"
  },
  {
    "text": "We are given the partially filled control\nROM shown here.",
    "start": "130759",
    "end": "134069"
  },
  {
    "start": "131000",
    "end": "131000"
  },
  {
    "text": "It is our job to fill in all the yellow boxes\nlabeled with a ?.",
    "start": "134069",
    "end": "139780"
  },
  {
    "text": "Let's begin by looking at the top row of this\ntable.",
    "start": "139780",
    "end": "142690"
  },
  {
    "text": "The value that stands out as a bit different\nin this row is the PCSEL value which is equal",
    "start": "142690",
    "end": "148810"
  },
  {
    "text": "to 2.",
    "start": "148810",
    "end": "149930"
  },
  {
    "text": "For most instructions PCSEL equals 0, for\nbranch instructions it equals 1, and for JMP",
    "start": "149930",
    "end": "157409"
  },
  {
    "text": "instructions it equals 2.",
    "start": "157410",
    "end": "159360"
  },
  {
    "text": "This means that the instruction described\nin this row must be a JMP instruction.",
    "start": "159360",
    "end": "164620"
  },
  {
    "text": "Zooming in on the PCSEL control logic from\nthe beta diagram, we see that normally PCSEL",
    "start": "164620",
    "end": "170909"
  },
  {
    "start": "165000",
    "end": "165000"
  },
  {
    "text": "= 0 to go to the next instruction.",
    "start": "170909",
    "end": "173810"
  },
  {
    "text": "PCSEL = 1 in order to perform a branch operation,\nand PCSEL = 2 in order to perform a jump operation",
    "start": "173810",
    "end": "182939"
  },
  {
    "text": "where the target of the jump is specified\nby JT, or the jump target.",
    "start": "182939",
    "end": "188760"
  },
  {
    "text": "This means that the instruction described\nin this row must be a JMP instruction.",
    "start": "188760",
    "end": "193750"
  },
  {
    "text": "The behavior of a JMP instruction is shown\nhere.",
    "start": "193750",
    "end": "197480"
  },
  {
    "start": "194000",
    "end": "194000"
  },
  {
    "text": "The effective address is calculated by taking\nthe contents of RA and clearing the bottom",
    "start": "197480",
    "end": "203310"
  },
  {
    "text": "2 bits so that the value becomes word aligned.",
    "start": "203310",
    "end": "206690"
  },
  {
    "text": "The address of the next instruction, which\nis PC + 4, is stored in register Rc in case",
    "start": "206690",
    "end": "212849"
  },
  {
    "text": "we need to return to the next instruction\nin the program.",
    "start": "212849",
    "end": "217040"
  },
  {
    "text": "The PC is then updated with the new effective\naddress in order to actually continue execution",
    "start": "217040",
    "end": "223040"
  },
  {
    "text": "at the destination of the JMP instruction.",
    "start": "223040",
    "end": "226569"
  },
  {
    "text": "This dataflow diagram highlights the required\ndataflow through the beta in order to properly",
    "start": "226569",
    "end": "231620"
  },
  {
    "start": "227000",
    "end": "227000"
  },
  {
    "text": "implement the JMP instruction.",
    "start": "231620",
    "end": "234110"
  },
  {
    "text": "Note that no red lines pass through the ALU\nor memory because the ALU and memory are not",
    "start": "234110",
    "end": "239409"
  },
  {
    "text": "used for this instruction.",
    "start": "239409",
    "end": "241860"
  },
  {
    "text": "The control signals that must be set in order\nto follow this path in the beta are as follows:",
    "start": "241860",
    "end": "247939"
  },
  {
    "text": "WDSEL, or write data select, must be set to\n0 in order to pass the value of PC + 4 through",
    "start": "247939",
    "end": "256048"
  },
  {
    "text": "the WDSEL mux.",
    "start": "256049",
    "end": "258730"
  },
  {
    "text": "WERF, or write enable register file, must\nbe set to 1 in order to enable writing to",
    "start": "258730",
    "end": "265310"
  },
  {
    "text": "the register file.",
    "start": "265310",
    "end": "267419"
  },
  {
    "text": "WASEL, or write address select, must be set\nto 0 in order to write to the Rc register",
    "start": "267419",
    "end": "274550"
  },
  {
    "text": "and not to the XP register.",
    "start": "274550",
    "end": "277020"
  },
  {
    "text": "ASEL, BSEL, and ALUFN, are all don't cares\nfor the JMP instruction.",
    "start": "277020",
    "end": "283520"
  },
  {
    "text": "In addition MOE, which stands for memory output\nenable, is also a don't care because this",
    "start": "283520",
    "end": "289690"
  },
  {
    "text": "instruction does not use the memory data.",
    "start": "289690",
    "end": "293250"
  },
  {
    "text": "The one control signal related to the memory\nthat we do need to worry about is the MWR,",
    "start": "293250",
    "end": "298990"
  },
  {
    "text": "or memory write read, signal which must be\nset to 0 so that no value will be written",
    "start": "298990",
    "end": "304440"
  },
  {
    "text": "to memory.",
    "start": "304440",
    "end": "306180"
  },
  {
    "text": "Going back to our control ROM and filling\nin the value of WERF, we see that the control",
    "start": "306180",
    "end": "311780"
  },
  {
    "text": "signals for the JMP instruction correspond\nto the dataflow diagram of the beta that we",
    "start": "311780",
    "end": "316560"
  },
  {
    "text": "just looked at.",
    "start": "316560",
    "end": "318759"
  },
  {
    "text": "Moving on to row two of our control ROM, we\nsee that now we have PCSEL = Z in this row.",
    "start": "318759",
    "end": "326300"
  },
  {
    "text": "This suggests that the instruction corresponding\nto this row is some kind of a branch instruction.",
    "start": "326300",
    "end": "332470"
  },
  {
    "text": "Of our two branch instructions, the one that\nbranches when Z = 1 is BEQ.",
    "start": "332470",
    "end": "338310"
  },
  {
    "text": "This means that this row corresponds to a\nBEQ operation.",
    "start": "338310",
    "end": "342870"
  },
  {
    "text": "The rest of the control signals for the BEQ\noperation look just like the ones for the",
    "start": "342870",
    "end": "347780"
  },
  {
    "text": "JMP because here too, the ALU and memory are\nnot used so the only ALU and memory related",
    "start": "347780",
    "end": "354160"
  },
  {
    "text": "signal that must be set is MWR so we don't\nwrite to memory.",
    "start": "354160",
    "end": "359960"
  },
  {
    "text": "Furthermore, like the JMP instruction, the\nbranch instructions also store the return",
    "start": "359960",
    "end": "365160"
  },
  {
    "text": "address in register Rc, so the behavior of\nthe control signals related to the register",
    "start": "365160",
    "end": "371220"
  },
  {
    "text": "file are all the same.",
    "start": "371220",
    "end": "375319"
  },
  {
    "text": "We now take a look at the third row of the\ncontrol ROM.",
    "start": "375319",
    "end": "378900"
  },
  {
    "text": "In this row, we are actually told that the\ncorresponding instruction is the newly added",
    "start": "378900",
    "end": "383669"
  },
  {
    "text": "LDX instruction.",
    "start": "383669",
    "end": "385680"
  },
  {
    "text": "So it is our job to determine how to set the\nmissing control signals in order to get the",
    "start": "385680",
    "end": "390550"
  },
  {
    "text": "desired behavior for this operation.",
    "start": "390550",
    "end": "393888"
  },
  {
    "text": "Recall that the expected behavior of this\ninstruction is that the contents of register",
    "start": "393889",
    "end": "398970"
  },
  {
    "start": "394000",
    "end": "394000"
  },
  {
    "text": "Ra and Rb will be added together in order\nto produce the effective address of the load.",
    "start": "398970",
    "end": "405190"
  },
  {
    "text": "This means that we need to perform an ADD\nas our ALUFN.",
    "start": "405190",
    "end": "409599"
  },
  {
    "text": "We also need ASEL and BSEL equal to zero in\norder to pass the values of registers Ra and",
    "start": "409599",
    "end": "416039"
  },
  {
    "text": "Rb to the ALU.",
    "start": "416039",
    "end": "419670"
  },
  {
    "start": "419000",
    "end": "419000"
  },
  {
    "text": "The complete dataflow through the register\nfile, ALU, and memory is shown here.",
    "start": "419670",
    "end": "425040"
  },
  {
    "text": "In order to read register Rb rather than Rc,\nRA2SEL must be set to 0.",
    "start": "425040",
    "end": "432300"
  },
  {
    "text": "As we just mentioned, ASEL and BSEL are set\nto 0 and ALUFN is set to ADD.",
    "start": "432300",
    "end": "439000"
  },
  {
    "text": "The result of adding registers Ra and Rb is\nused as the address of the load.",
    "start": "439000",
    "end": "444750"
  },
  {
    "text": "This is called MA, or memory address in the\nbeta diagram.",
    "start": "444750",
    "end": "450110"
  },
  {
    "text": "In order to enable reading from memory, we\nset MWR to 0 and MOE to 1.",
    "start": "450110",
    "end": "457280"
  },
  {
    "text": "This sets the read/write functionality to\nread, and enables an output to be read from",
    "start": "457280",
    "end": "462190"
  },
  {
    "text": "the read port of the memory.",
    "start": "462190",
    "end": "464330"
  },
  {
    "text": "On the beta diagram, the read data is labeled\nMRD, or memory read data.",
    "start": "464330",
    "end": "469629"
  },
  {
    "text": "The data that is read from the memory is then\npassed along to the register file by setting",
    "start": "469629",
    "end": "474300"
  },
  {
    "text": "WDSEL = 2.",
    "start": "474300",
    "end": "476349"
  },
  {
    "text": "In order to write this result to register\nRc, WERF = 1, and WASEL = 0.",
    "start": "476349",
    "end": "486259"
  },
  {
    "text": "So the completed control ROM for the LDX operation\nis shown here.",
    "start": "486259",
    "end": "492879"
  },
  {
    "text": "We now move on to the fourth instruction.",
    "start": "492879",
    "end": "495770"
  },
  {
    "text": "Here we see that the ALUFN just passes operand\nB through the register file.",
    "start": "495770",
    "end": "501379"
  },
  {
    "text": "We also see that WERF is dependent on the\nvalue of Z.",
    "start": "501380",
    "end": "505610"
  },
  {
    "text": "This means that the instruction that corresponds\nto this row is MVZC which moves a constant",
    "start": "505610",
    "end": "512200"
  },
  {
    "text": "into register Rc if the contents of register\nRa = 0.",
    "start": "512200",
    "end": "518380"
  },
  {
    "start": "518000",
    "end": "518000"
  },
  {
    "text": "The way this instruction works is that BSEL\n= 1 in order to pass the constant through",
    "start": "518380",
    "end": "524150"
  },
  {
    "text": "as the B operand, and ALUFN = B to pass that\nconstant through the ALU.",
    "start": "524150",
    "end": "530940"
  },
  {
    "text": "WDSEL = 1 so that the output of the ALU is\nfed back as the write value for the register",
    "start": "530940",
    "end": "537960"
  },
  {
    "text": "file.",
    "start": "537960",
    "end": "539610"
  },
  {
    "text": "Because WDSEL = 1 and not 2, we know that\nthe data coming out of the memory will be",
    "start": "539610",
    "end": "544970"
  },
  {
    "text": "ignored so MOE can be a don't care.",
    "start": "544970",
    "end": "548279"
  },
  {
    "text": "Of course, MWR still must be set to 0 in order\nto ensure that we don't write any random values",
    "start": "548280",
    "end": "554980"
  },
  {
    "text": "into our memory.",
    "start": "554980",
    "end": "556820"
  },
  {
    "text": "RA2SEL is also a don't care because we don't\ncare whether Register Rb or Register Rc are",
    "start": "556820",
    "end": "563901"
  },
  {
    "text": "passed through as the second read argument\nof the register file, RD2.",
    "start": "563901",
    "end": "569280"
  },
  {
    "text": "The reason we don't care is because the BSEL\n= 1 will ignore the RD2 value and pass through",
    "start": "569280",
    "end": "576310"
  },
  {
    "text": "the constant that comes directly from the\ninstruction after sign extending it.",
    "start": "576310",
    "end": "581840"
  },
  {
    "text": "ASEL is also a don't care because the ALU\nwill ignore the A input when ALUFN = B.",
    "start": "581840",
    "end": "590460"
  },
  {
    "text": "WASEL must be 0 so that the result of the\noperation is written into register Rc.",
    "start": "590460",
    "end": "597740"
  },
  {
    "text": "Finally, PCSEL = 0 to load PC + 4 into the\nPC register so that the next instruction will",
    "start": "597740",
    "end": "606290"
  },
  {
    "text": "get fetched after this one.",
    "start": "606290",
    "end": "609779"
  },
  {
    "text": "We are now on the last row of our control\nROM.",
    "start": "609780",
    "end": "612880"
  },
  {
    "text": "We know that this row must correspond to our\nthird added instruction which is STR, or store",
    "start": "612880",
    "end": "618810"
  },
  {
    "text": "relative.",
    "start": "618810",
    "end": "620370"
  },
  {
    "start": "620000",
    "end": "620000"
  },
  {
    "text": "Recall that this instruction writes the contents\nof register Rc into memory at the address",
    "start": "620370",
    "end": "626210"
  },
  {
    "text": "that is computed by the effective address\nline.",
    "start": "626210",
    "end": "628950"
  },
  {
    "text": "The effective address for this instruction\nis PC + 4 + 4 * SEXT(C).",
    "start": "628950",
    "end": "634580"
  },
  {
    "text": "The extra adder, just under the instruction\nmemory, is used to calculate PC + 4 + 4 * SEXT(C).",
    "start": "634580",
    "end": "647980"
  },
  {
    "start": "637000",
    "end": "637000"
  },
  {
    "text": "This value is then fed to the ALU via the\nA operand by setting ASEL = 1.",
    "start": "647980",
    "end": "656089"
  },
  {
    "text": "Setting ALUFN = A passes this value as the\noutput of the ALU in order to be used as the",
    "start": "656090",
    "end": "662710"
  },
  {
    "text": "memory address.",
    "start": "662710",
    "end": "664300"
  },
  {
    "text": "This is the address that the store will write\nto in memory.",
    "start": "664300",
    "end": "668010"
  },
  {
    "text": "The value that will be written to this address\nin memory is the contents of register Rc.",
    "start": "668010",
    "end": "673510"
  },
  {
    "text": "Register Rc is fed through the register file\nby setting RA2SEL = 1.",
    "start": "673510",
    "end": "680870"
  },
  {
    "text": "This makes RD2 have the contents of register\nRc.",
    "start": "680870",
    "end": "685240"
  },
  {
    "text": "This value then becomes the MWD, or memory\nwrite data which is the data that will be",
    "start": "685240",
    "end": "691060"
  },
  {
    "text": "stored in the memory address that was produced\nby the ALU.",
    "start": "691060",
    "end": "695630"
  },
  {
    "text": "In order to enable writing to the memory,\nMWR must be set to 1.",
    "start": "695630",
    "end": "701600"
  },
  {
    "text": "Since WERF = 0, nothing can be written to\nthe register file.",
    "start": "701600",
    "end": "705819"
  },
  {
    "text": "This means that the value of WDSEL and WASEL\nare don't cares since the register file won't",
    "start": "705820",
    "end": "712120"
  },
  {
    "text": "be affected regardless of their values.",
    "start": "712120",
    "end": "715060"
  },
  {
    "text": "Finally, the PC is incremented by 4 to fetch\nthe next instruction.",
    "start": "715060",
    "end": "721680"
  },
  {
    "text": "So our completed Control ROM for the STR operation\nis shown here.",
    "start": "721680",
    "end": "726710"
  }
]