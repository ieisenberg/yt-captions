[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6820"
  },
  {
    "text": "continue to offer high-quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6820",
    "end": "13480"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13480",
    "end": "22948"
  },
  {
    "text": "TADGE DRYJA: Today,\nI'm going to talk about signatures and all\nsorts of different signature",
    "start": "22948",
    "end": "29770"
  },
  {
    "text": "kind of things. In the problem set, you're\nworking with signatures, but you're working with\nhash-based signatures, which",
    "start": "29770",
    "end": "35510"
  },
  {
    "text": "are not actually used\nin bitcoin at all. But we'll talk about those. OK. So if you've gotten\nthrough the homework,",
    "start": "35510",
    "end": "43630"
  },
  {
    "text": "there's lamport\nsignatures, right? These are hash-based signatures.",
    "start": "43630",
    "end": "49040"
  },
  {
    "text": "And they use hash functions. So it's fairly straightforward. You can understand them.",
    "start": "49040",
    "end": "54940"
  },
  {
    "text": "There's nothing\nsuper crazy going on. The code is fairly compact. So that's cool. What are some disadvantages\nof these lamport signatures?",
    "start": "54940",
    "end": "63340"
  },
  {
    "text": "Does anyone-- yeah? AUDIENCE: You can\nonly use it once. TADGE DRYJA: Yeah. OK. So plus.",
    "start": "63340",
    "end": "69045"
  },
  {
    "text": "This is hashes. That's cool. One-time use. Other possible disadvantages of\nthem relative to other systems,",
    "start": "69045",
    "end": "78830"
  },
  {
    "text": "if you're aware. Another is they're kind of\nhuge, kind of big, right?",
    "start": "78830",
    "end": "86420"
  },
  {
    "text": "You can deal with it. But if you were\nlooking in the forge, or that file with\nthe signatures,",
    "start": "86420",
    "end": "93259"
  },
  {
    "text": "it's like, what, 8K\nfor a signature-- 8 kilobytes-- kind of big.",
    "start": "93260",
    "end": "100520"
  },
  {
    "text": "Keys are 16 kilobytes-- kind of annoying. Private keys are\nalso 16 kilobytes.",
    "start": "100520",
    "end": "106790"
  },
  {
    "text": "So yes, sig 8K,\n16K priv/pub key.",
    "start": "106790",
    "end": "115080"
  },
  {
    "text": "So that's some disadvantages. So since I don't\nhave slides, I'm",
    "start": "115080",
    "end": "120820"
  },
  {
    "text": "gonna make this more\nfun and interactive. What are some solutions\nfor these problems?",
    "start": "120820",
    "end": "127930"
  },
  {
    "text": "So we can actually\nmitigate/solve both of these things to\na pretty good extent.",
    "start": "127930",
    "end": "135280"
  },
  {
    "text": "So how about the first\none, one-time use? What would be a\nfairly obvious way to mitigate the\none-time use problem?",
    "start": "135280",
    "end": "143090"
  },
  {
    "text": "And don't think the\nanswer is too stupid. It may be a fairly stupid\nanswer, and it might work.",
    "start": "143090",
    "end": "149070"
  },
  {
    "text": "So yeah? AUDIENCE: Not actually revealing\npieces of your private key? Instead, reveal something else.",
    "start": "149070",
    "end": "157303"
  },
  {
    "text": "TADGE DRYJA: There's\nprobably some clever way. But that might be too clever. Something really simple for,\nOK, I can only use a key once.",
    "start": "157303",
    "end": "167200"
  },
  {
    "text": "How can I use a \"key,\" quote\nunquote, more than once? Yeah? AUDIENCE: Make another one. TADGE DRYJA: Yeah. You can make another key.",
    "start": "167200",
    "end": "172540"
  },
  {
    "text": "So you could say, well, I've\ngot this 16 kilobyte public key. Well, I'm going to make\na 32 kilobyte public key.",
    "start": "172540",
    "end": "180050"
  },
  {
    "text": "And it's just two public\nkeys stuck together. ",
    "start": "180050",
    "end": "186549"
  },
  {
    "text": "And now, when I\nmake a signature, I just put an extra\nbit in the front. And I say, well, this\nsignature is using key 0",
    "start": "186550",
    "end": "193870"
  },
  {
    "text": "or this signature\nis using key 1, and it's got the\nwhole signature after. And then you look through\nthis 32 kilobyte public key,",
    "start": "193870",
    "end": "201280"
  },
  {
    "text": "and you say, OK, well,\nit starts with a zero, so that means it's using the\nfirst key, the first subkey",
    "start": "201280",
    "end": "208090"
  },
  {
    "text": "in this 32 byte\npublic key block. And in this case,\nit's using one, so that means it's\nusing the latter subkey.",
    "start": "208090",
    "end": "215928"
  },
  {
    "text": "So that would work. That would let you use\nyour public key twice,",
    "start": "215928",
    "end": "221020"
  },
  {
    "text": "at the cost of doubling\nyour public key size, which is not really great, right?",
    "start": "221020",
    "end": "228043"
  },
  {
    "text": "And it's not very efficient. But it does sort of work. OK. Any clever ways to do\nit more efficiently?",
    "start": "228043",
    "end": "238700"
  },
  {
    "text": "Or wait. So OK, also, I'll give\nyou sort of a hint.",
    "start": "238700",
    "end": "244330"
  },
  {
    "text": "In this case, let's say this is\npub sub 0 and pub sub 1, right?",
    "start": "244330",
    "end": "250210"
  },
  {
    "text": "And then, your 32 byte\npubkey is just them concatenated together, right--",
    "start": "250210",
    "end": "255730"
  },
  {
    "text": "pub0, pub1.  What would happen to the private\nkeys in this case, right?",
    "start": "255730",
    "end": "267270"
  },
  {
    "text": "How would private\nkeys work here? Same expansion of size, I guess.",
    "start": "267270",
    "end": "274650"
  },
  {
    "text": "Can anyone think of a way to\nmitigate the expansion of size",
    "start": "274650",
    "end": "280199"
  },
  {
    "text": "of private keys in this case? So the private keys are\nthe preimages here, right?",
    "start": "280200",
    "end": "285540"
  },
  {
    "text": "They lead into these\npublic key blocks. So you could just\nsay, OK, well, I have twice the size private\nkey leading into twice the size",
    "start": "285540",
    "end": "294000"
  },
  {
    "text": "public key. Could you do that\nmore efficiently? Yeah? AUDIENCE: Could you just\nhash the private key",
    "start": "294000",
    "end": "299069"
  },
  {
    "text": "so that you have two\nhashes instead of one? TADGE DRYJA: Yes.",
    "start": "299070",
    "end": "304400"
  },
  {
    "text": "So let's say you\nhave this 16k block, and you want this to\nturn into two public key.",
    "start": "304400",
    "end": "312240"
  },
  {
    "text": "So that's the basic\ngood way to do it. And it sort of\nturns in like that.",
    "start": "312240",
    "end": "317729"
  },
  {
    "text": "How exactly-- what's\nthe way you do that? AUDIENCE: You can keep the\nsame private key as before",
    "start": "317730",
    "end": "323639"
  },
  {
    "text": "and just add something like\nzero or one to indicate-- TADGE DRYJA: Yeah. So this is a hash\nfunction, right?",
    "start": "323640",
    "end": "329690"
  },
  {
    "text": "And so before, we just said,\nOK, hash of this is block 0, this is block 1,\nthis is block 2.",
    "start": "329690",
    "end": "336570"
  },
  {
    "text": "So the idea of pub-- let's see. Is this visible?",
    "start": "336570",
    "end": "342460"
  },
  {
    "text": "This might be too small, right? AUDIENCE: Yes. TADGE DRYJA: Yes, OK. Let me make this bigger.",
    "start": "342460",
    "end": "347480"
  },
  {
    "text": " Sorry. OK.",
    "start": "347480",
    "end": "352960"
  },
  {
    "text": "So in these diagrams, you've\ngot your private key right now.",
    "start": "352960",
    "end": "360680"
  },
  {
    "text": "And it's in these big blocks. And there's 256 of them,\nbut let's keep it small.",
    "start": "360680",
    "end": "365940"
  },
  {
    "text": "And the idea is these are 32\nbyte blocks with random numbers in it. And then you hash it\nto get your public key.",
    "start": "365940",
    "end": "372110"
  },
  {
    "text": " So we say, OK, pub2--",
    "start": "372110",
    "end": "377832"
  },
  {
    "text": "and this is public, this\nis private, and, let's say, secret--",
    "start": "377832",
    "end": "383410"
  },
  {
    "text": "pub2 is just the hash\nof secret2, right?",
    "start": "383410",
    "end": "390050"
  },
  {
    "text": "But yeah. What we could do is we could\nsort of have two different hash functions. And then a real\nsimple way to make",
    "start": "390050",
    "end": "396760"
  },
  {
    "text": "a whole bunch of\ndifferent hash functions is we define, OK,\nwell hash0 is defined",
    "start": "396760",
    "end": "403180"
  },
  {
    "text": "as the hash function of whatever\nyour input x is concatenated",
    "start": "403180",
    "end": "408310"
  },
  {
    "text": "with the number 0. And then hash1, we define\nas just x comma 1 and so on.",
    "start": "408310",
    "end": "416260"
  },
  {
    "text": "And this is actually secure. You could do this. Any questions or\npossible objections?",
    "start": "416260",
    "end": "422345"
  },
  {
    "text": "AUDIENCE: I was thinking that if\nsomeone knew the hash function you're using, wouldn't\nthey only define x because they know that it\nwon't help with [INAUDIBLE] x.",
    "start": "422345",
    "end": "429180"
  },
  {
    "text": "[INAUDIBLE] TADGE DRYJA: Yes. Yes. So there's no real entropy\nor secrets in this 0 and 1.",
    "start": "429180",
    "end": "439139"
  },
  {
    "text": "But it's purely\nriding on x, right? But the idea is,\nwell, if I do this,",
    "start": "439140",
    "end": "446140"
  },
  {
    "text": "and I say, OK, well\npub2 is the hash of secret2 concatenated with\n0, yeah, if you know secret2,",
    "start": "446140",
    "end": "454890"
  },
  {
    "text": "you can go back. Because 0 is obvious. But the idea is if you don't\nknow secret2, the fact that you",
    "start": "454890",
    "end": "460210"
  },
  {
    "text": "know the last byte of the hash\ninput doesn't really help you. Because there's all this\ndata that you don't know.",
    "start": "460210",
    "end": "468400"
  },
  {
    "text": "And so you're not going to\nbe able to find a preimage. You're like, OK, I\nknow the preimage to public2 ends with a 0 byte.",
    "start": "468400",
    "end": "475540"
  },
  {
    "text": "What are the other 32 bytes\nthat come before that? You still can't go back\nto make a preimage.",
    "start": "475540",
    "end": "481404"
  },
  {
    "text": "AUDIENCE: But it feels\nlike there's some sort of-- what's the word-- you'd make a\nsimilar statement saying, oh,",
    "start": "481404",
    "end": "488470"
  },
  {
    "text": "if the last byte\nis not important, then the second-to-last byte is\nnot important, either, right?",
    "start": "488470",
    "end": "493599"
  },
  {
    "text": " TADGE DRYJA: So the\nattack is I've got pub2,",
    "start": "493600",
    "end": "500620"
  },
  {
    "text": "which is a 32 byte hash output. I want to find\nwhat this thing is.",
    "start": "500620",
    "end": "507820"
  },
  {
    "text": "Now, I do know what the\nlast byte is, right? It's going to be,\nlet's say, 33 bytes, and the last byte is a 0.",
    "start": "507820",
    "end": "514780"
  },
  {
    "text": "And this is going to\nbe some random numbers all the way back. So I have some insight\ninto what the preimage is.",
    "start": "514780",
    "end": "523539"
  },
  {
    "text": "I know the last byte is a 0. But that doesn't\nhelp because I don't know all the bytes before that.",
    "start": "523539",
    "end": "531160"
  },
  {
    "text": "So I can't really do-- I can't sign because I\nneed to be able to reveal",
    "start": "531160",
    "end": "536770"
  },
  {
    "text": "all these things. And the way the hash\nfunctions, if it's a good hash function, the fact that you\nknow some part of the preimage",
    "start": "536770",
    "end": "543722"
  },
  {
    "text": "shouldn't give you insight\ninto the other parts of the preimage. Because it looks really random.",
    "start": "543722",
    "end": "548930"
  },
  {
    "text": "And adding stuff to the end\nhere shouldn't reveal anything.",
    "start": "548930",
    "end": "554380"
  },
  {
    "text": "There are hash functions\nwhere this can be dangerous, and you can consider those like\nbroken hash functions, where",
    "start": "554380",
    "end": "559839"
  },
  {
    "text": "if I concatenate a lot\nof known data at the end, it might give me properties of\nthe public key that I can find.",
    "start": "559840",
    "end": "567110"
  },
  {
    "text": "[INAUDIBLE],, as far as\nwe know, it works fine. Most of the hash functions\nwork fine this way.",
    "start": "567110",
    "end": "572440"
  },
  {
    "text": "So yeah, you can do this. And then you can\nsay, OK, well, I'm going to use hash function\n0 to make pubkey 0, right?",
    "start": "572440",
    "end": "582710"
  },
  {
    "text": "This is pubkey 0. And if I use hash function\n1, I make pubkey 1.",
    "start": "582710",
    "end": "590470"
  },
  {
    "text": "Now I have a 16 kilobyte--\nlet me erase this--",
    "start": "590470",
    "end": "595910"
  },
  {
    "text": " so now what I can do\nis I can say, OK, well, I have a 16 kilobyte\nsecret key, private key,",
    "start": "595910",
    "end": "603990"
  },
  {
    "text": "but I have a 32\nkilobyte public key",
    "start": "603990",
    "end": "610050"
  },
  {
    "text": "that I can use twice\nthat has two subkeys so I don't have to store as\nmuch of my private key data. So that's cool.",
    "start": "610050",
    "end": "615250"
  },
  {
    "text": "That makes it quite\na bit more efficient. Does anyone have an idea of how\nto get it even more efficient",
    "start": "615250",
    "end": "620770"
  },
  {
    "text": "for private key storage?  You can actually get\nit very efficient",
    "start": "620770",
    "end": "627480"
  },
  {
    "text": "using this kind of idea. Any ideas? ",
    "start": "627480",
    "end": "635644"
  },
  {
    "text": "Yeah. Well, you--  So some hints.",
    "start": "635644",
    "end": "642379"
  },
  {
    "text": "This is pretty useful, right? The idea is, well,\neven if you know what the sort of suffix\nof all these things",
    "start": "642380",
    "end": "649550"
  },
  {
    "text": "are, if you don't\nknow x, you're not going to be able to find\nthe preimage, right?",
    "start": "649550",
    "end": "654740"
  },
  {
    "text": "So maybe add some\nmore stuff here. Any idea? ",
    "start": "654740",
    "end": "661639"
  },
  {
    "text": "Oh, yeah? AUDIENCE: Could\nyou hash the index? TADGE DRYJA: Right. Right. So instead of just\nsaying 0 and 1,",
    "start": "661640",
    "end": "670209"
  },
  {
    "text": "we can say here, well, why\nnot just have one chunk? And there's one chunk, and\nit's got random number x.",
    "start": "670210",
    "end": "685510"
  },
  {
    "text": "Well, this is hash x comma 0. This is hash x comma 1.",
    "start": "685510",
    "end": "691840"
  },
  {
    "text": "This is hash x comma 2. OK. So yeah. So what you can do is you can--",
    "start": "691840",
    "end": "700600"
  },
  {
    "text": "this was before, right,\nwhere I said, OK, yeah, but this is basically how to\ndo a 32 byte private key where",
    "start": "700600",
    "end": "708700"
  },
  {
    "text": "your private key is\nactually quite small, and you just derive\nall of the public keys",
    "start": "708700",
    "end": "715329"
  },
  {
    "text": "by adding numbers at the\nend, concatenating them into your hash. And now you're like, OK, cool.",
    "start": "715330",
    "end": "721240"
  },
  {
    "text": "I have a 32 byte\nprivate key, and I can make enormous\npublic keys from them,",
    "start": "721240",
    "end": "726639"
  },
  {
    "text": "and it's still secure, right? Because I can add whatever\nnumber I want here. And I can do this\na million times,",
    "start": "726640",
    "end": "733488"
  },
  {
    "text": "and no one will be able to find\nthe preimage, even though I'm giving you all these\nrelated hashes, right?",
    "start": "733488",
    "end": "738580"
  },
  {
    "text": "It's x comma 0, x comma\n1, x comma a million. I can give you millions of them. And each time I do it,\nit doesn't give you",
    "start": "738580",
    "end": "745390"
  },
  {
    "text": "any insight into how\nto find what x is-- if it's a good hash function. So that's really powerful.",
    "start": "745390",
    "end": "750680"
  },
  {
    "text": "And now I can say, OK, the\nprivate key problem is solved. I have 0 of 1 growth\nin my private key.",
    "start": "750680",
    "end": "757420"
  },
  {
    "text": "I can make as many public\nkeys as I want, never gets any bigger. Cool. Still have this problem with\nthe public keys, though.",
    "start": "757420",
    "end": "764320"
  },
  {
    "text": "Let's say I want\nto sign four times. OK. Well, I make a 64\nkilobyte pubkey.",
    "start": "764320",
    "end": "770957"
  },
  {
    "text": " Now I can sign four times.",
    "start": "770957",
    "end": "776270"
  },
  {
    "text": "Great. But my public key size expands\nwith the number of signatures I ever want to do.",
    "start": "776270",
    "end": "784100"
  },
  {
    "text": "Any ideas on how you\ncould mitigate that or how you could still\nmake a usable system,",
    "start": "784100",
    "end": "790130"
  },
  {
    "text": "despite this fact?  There's a couple\ndifferent techniques.",
    "start": "790130",
    "end": "798269"
  },
  {
    "text": "Any ideas?  OK. So one would be\nevery time I sign,",
    "start": "798270",
    "end": "805180"
  },
  {
    "text": "I also sign my next pubkey. You can do that.",
    "start": "805180",
    "end": "811540"
  },
  {
    "text": "It's got some downsides, right? So the idea is I first publish\none 16 kilobyte pubkey.",
    "start": "811540",
    "end": "817540"
  },
  {
    "text": "And then I say, OK, when I sign,\nI'm going to sign my message. And concatenated to that\nmessage will be my next pubkey.",
    "start": "817540",
    "end": "825610"
  },
  {
    "text": "And so I'm signing something\nand also indicating what my next public key\nwill be that I sign with.",
    "start": "825610",
    "end": "831190"
  },
  {
    "text": "Then I can still maintain\na small private key and then keep signing. The problem is, in order\nfor someone to verify,",
    "start": "831190",
    "end": "838690"
  },
  {
    "text": "they're going to need to look at\nall of my previous signatures, right? So if I'm saying, hey,\nhere's my 500th public key",
    "start": "838690",
    "end": "845430"
  },
  {
    "text": "that I'm signing with,\nhere's the message, you're going to have to go back\nand look at my entire history of signing, which is not great.",
    "start": "845430",
    "end": "854000"
  },
  {
    "text": "OK. So other ideas of how to\ndeal with large pubkeys?",
    "start": "854000",
    "end": "859418"
  },
  {
    "text": "What's a way you could do this?  So hints.",
    "start": "859418",
    "end": "865570"
  },
  {
    "text": "Is there any kind\nof data function we've seen here where it takes\nan arbitrary sized amount",
    "start": "865570",
    "end": "871570"
  },
  {
    "text": "of data and outputs\na fixed size? [LAUGHING]",
    "start": "871570",
    "end": "876610"
  },
  {
    "text": "In fact, it's the\nonly thing we've been talking about so far. So what would you do to make\nyour public keys smaller?",
    "start": "876610",
    "end": "883867"
  },
  {
    "text": "AUDIENCE: Hash. TADGE DRYJA: Hash them. Right. OK. So you say, well,\nyeah, 32 byte pubkey.",
    "start": "883867",
    "end": "889620"
  },
  {
    "text": "Well, you just\ncommit to the pubkey with the hash of the\nwhole thing, right? And I say, well, I've got\nmy 16 kilobyte by pubkey.",
    "start": "889620",
    "end": "902040"
  },
  {
    "text": "I just hash it, right? And now I have a\n32 byte public key.",
    "start": "902040",
    "end": "909600"
  },
  {
    "text": "And I've committed. That works, right? I've committed to my public key. However, when I sign, I need\nto provide the whole public key",
    "start": "909600",
    "end": "919990"
  },
  {
    "text": "in order for you to verify. I need to provide this\nwhole 16 original pubkey,",
    "start": "919990",
    "end": "925150"
  },
  {
    "text": "original version pubkey,\nafter when I sign. So now my signature goes\nfrom 8K to, what, 24K.",
    "start": "925150",
    "end": "934880"
  },
  {
    "text": "So I haven't really made\nit more efficient, right, in that the total thing with\npublic keys and signatures",
    "start": "934880",
    "end": "942840"
  },
  {
    "text": "stays the same size-- actually, slightly larger. But this is kind of a game.",
    "start": "942840",
    "end": "948220"
  },
  {
    "text": "Because the public\nkey, it might be",
    "start": "948220",
    "end": "953259"
  },
  {
    "text": "like I'm showing it\nto you beforehand, and we're\nspace-constrained there. And then, when I'm\ndoing the signature,",
    "start": "953260",
    "end": "959320"
  },
  {
    "text": "I have more space or time\nor something like that. So this is actually useful. And actually, this\ntechnique is used",
    "start": "959320",
    "end": "965020"
  },
  {
    "text": "in Bitcoin and all\ndifferent cryptocurrencies, where you can call\nthis a pubkey hash--",
    "start": "965020",
    "end": "972220"
  },
  {
    "start": "972220",
    "end": "977660"
  },
  {
    "text": "pubkey hash, or they say PKH. And the main benefit\nis size, right?",
    "start": "977660",
    "end": "983562"
  },
  {
    "text": "You could say, well, if I've\ngot a really big pubkey, I can commit to it by sending\nto the hash of the pubkey.",
    "start": "983562",
    "end": "989040"
  },
  {
    "text": "And then, when I\nlater want to sign, I reveal the actual pubkey. You can do it that way.",
    "start": "989040",
    "end": "995020"
  },
  {
    "text": "OK. So then this is\npretty cool, right? We've now taken our system,\nwhich had fairly large--",
    "start": "995020",
    "end": "1002839"
  },
  {
    "text": "16 kilobyte-- private\nkeys, turned them into 32 byte private keys. Great. And also, this is 0\nof 1-- never expands.",
    "start": "1002840",
    "end": "1010970"
  },
  {
    "text": "Awesome. We've taken a system with\nlarge, potentially huge-- 32 kilobyte, 64\nkilobyte-- public keys.",
    "start": "1010970",
    "end": "1019130"
  },
  {
    "text": "We've got it down to 32 bytes. Awesome. OK. We've now made this thing\nmuch more efficient, much more",
    "start": "1019130",
    "end": "1025579"
  },
  {
    "text": "useful. The problem-- the\nsignatures are still big. They actually got\na little bit bigger",
    "start": "1025579",
    "end": "1031250"
  },
  {
    "text": "because they include the full\npublic key in the signature. And let's say we had\none of these things,",
    "start": "1031250",
    "end": "1037939"
  },
  {
    "text": "where we make a\nbunch of public keys and commit to them\nat the outset. So you say, OK, I've got\na 64 kilobyte pubkey.",
    "start": "1037940",
    "end": "1045890"
  },
  {
    "text": "I can commit to the whole\nthing by hashing it. However, then, when I reveal and\nwant to give you a signature,",
    "start": "1045890",
    "end": "1052460"
  },
  {
    "text": "my signature is now\nwhatever it'll be-- 72, right?",
    "start": "1052460",
    "end": "1058600"
  },
  {
    "text": "The signature would\nbe 72 kilobytes-- kind of huge.",
    "start": "1058600",
    "end": "1065090"
  },
  {
    "text": "So I can add a bunch\nof keys, but I'm just sort of pushing the\nproblem somewhere else--",
    "start": "1065090",
    "end": "1070700"
  },
  {
    "text": "into the signature, right? There's a better way to\ncommit to many public keys.",
    "start": "1070700",
    "end": "1075920"
  },
  {
    "text": "It's maybe not super obvious\nunless you've seen it before. But if you have,\ndo you know what",
    "start": "1075920",
    "end": "1081990"
  },
  {
    "text": "the better way to commit\nto many public keys is? Or you could come up\nwith it on the spot,",
    "start": "1081990",
    "end": "1087390"
  },
  {
    "text": "and it'd be like, wow,\nyou should have gotten this stuff named after you.",
    "start": "1087390",
    "end": "1092610"
  },
  {
    "text": "Any idea? OK. So what you can do-- it's a little non-obvious--",
    "start": "1092610",
    "end": "1099000"
  },
  {
    "text": "you can make a tree, right? So the idea is instead\nof just saying, oh, I'm going to take all\nfour of my big pubkeys,",
    "start": "1099000",
    "end": "1108090"
  },
  {
    "text": "stick them all in a row, take\nthe hash of that whole thing and publish that\nas my public hash,",
    "start": "1108090",
    "end": "1113610"
  },
  {
    "text": "I'm going to have a little\nbit more complex design. And that design\nis a binary tree.",
    "start": "1113610",
    "end": "1120860"
  },
  {
    "text": "OK. So the idea is here are my four\npublic keys that take up 64K",
    "start": "1120860",
    "end": "1126220"
  },
  {
    "text": "each. I can make these\nintermediate hashes. So I make a binary tree\nwhere I say, OK, this",
    "start": "1126220",
    "end": "1132310"
  },
  {
    "text": "is the hash of the first\ntwo keys stuck together. This is the hash of the second\ntwo keys stuck together.",
    "start": "1132310",
    "end": "1140820"
  },
  {
    "text": "The top is the hash of these\ntwo intermediate hashes stuck together.",
    "start": "1140820",
    "end": "1146790"
  },
  {
    "text": "And then, this top\nis my root, which is equivalent to my pubkey hash.",
    "start": "1146790",
    "end": "1152760"
  },
  {
    "text": "And so I can publish this,\nand it commits me to all four of my public keys.",
    "start": "1152760",
    "end": "1160019"
  },
  {
    "text": "So it might not be obvious. Do you see any\nadvantages that this",
    "start": "1160020",
    "end": "1166409"
  },
  {
    "text": "could have over just\nconcatenating all four of the keys and hashing it? Yes? AUDIENCE: I'm confused.",
    "start": "1166410",
    "end": "1171998"
  },
  {
    "text": "Where is your\nprivate key in this? TADGE DRYJA: The private\nkey is down here, right? The private key is not shown.",
    "start": "1171998",
    "end": "1178059"
  },
  {
    "text": "But I have a private key. It turns into these pubkeys. And we can use the\ntechnique here,",
    "start": "1178060",
    "end": "1183540"
  },
  {
    "text": "where we just have, really,\none 32 byte private key and create all the different\nchunks of all the public keys",
    "start": "1183540",
    "end": "1191310"
  },
  {
    "text": "by concatenating\ndifferent indices. Yes? AUDIENCE: You can do [INAUDIBLE]\nsystems and log-in time instead",
    "start": "1191310",
    "end": "1197880"
  },
  {
    "text": "of linear time. TADGE DRYJA: Yeah, exactly. I can prove that, hey,\nthis is public key 0, which",
    "start": "1197880",
    "end": "1204880"
  },
  {
    "text": "is in here, this root hash, and\nI don't have to reveal all four",
    "start": "1204880",
    "end": "1210910"
  },
  {
    "text": "in order to do it. So yeah. Did someone else have,\nprobably, the same idea? Yeah, OK.",
    "start": "1210910",
    "end": "1216500"
  },
  {
    "text": "OK. So how are we going to do that? ",
    "start": "1216500",
    "end": "1222210"
  },
  {
    "text": "You obviously know. Anyone else? Yeah. AUDIENCE: So assuming you\nwanted the public key 0,",
    "start": "1222210",
    "end": "1227440"
  },
  {
    "text": "you would publish that and\n1, and also hash of 2, 3. TADGE DRYJA: Right, yeah.",
    "start": "1227440",
    "end": "1233150"
  },
  {
    "text": "And then you can\nprove up to the top. So I have little colors. So the idea is the verifier\nwho's verifying the signature,",
    "start": "1233150",
    "end": "1243740"
  },
  {
    "text": "he already knows\nthe root, right? Because you've pre-published\nthat as your public key,",
    "start": "1243740",
    "end": "1249130"
  },
  {
    "text": "as your public key root\nand your public key hash. And then that\nverifier is provided",
    "start": "1249130",
    "end": "1254299"
  },
  {
    "text": "with public key 0 saying,\nhey, here's a signature. Here's the message. Here is public key 0.",
    "start": "1254300",
    "end": "1260870"
  },
  {
    "text": "So you've got both\nof these things. Now, the prover needs to\nprove that public key 0 is",
    "start": "1260870",
    "end": "1267649"
  },
  {
    "text": "contained within the root. And to do that, the only two\nthings the prover needs to add",
    "start": "1267650",
    "end": "1273860"
  },
  {
    "text": "is pub1-- OK, so the prover says,\nhere's public key 1.",
    "start": "1273860",
    "end": "1281510"
  },
  {
    "text": "That allows the verifier\nto compute this. And then the prover\nsays, hey, here's",
    "start": "1281510",
    "end": "1287510"
  },
  {
    "text": "hash 2, 3, which allows the\nverifier to compute the root and then check that it's equal.",
    "start": "1287510",
    "end": "1293799"
  },
  {
    "text": "So yeah, you only need two extra\nhashes instead of all four. So saves some space.",
    "start": "1293800",
    "end": "1299127"
  },
  {
    "text": "It doesn't save that much\nspace when you only have four. It saves a lot of space\nwhen you have 1,000, right?",
    "start": "1299127",
    "end": "1305539"
  },
  {
    "text": "So you can add 0 of n elements. And the root stays\nthe same size.",
    "start": "1305540",
    "end": "1311330"
  },
  {
    "text": "The root stays 32\nbytes, regardless of how many leaf nodes you have. And you can prove an\nelement with log n--",
    "start": "1311330",
    "end": "1318110"
  },
  {
    "text": "oh, those parentheses\nare wrong-- 0 log n intermediate hashes. So if you have 1,000 keys,\nyour root stays 32 bytes,",
    "start": "1318110",
    "end": "1326510"
  },
  {
    "text": "and your proofs are going to\nbe not too, too big, right-- 320 bytes of overhead,\nwhich is a bunch smaller",
    "start": "1326510",
    "end": "1335000"
  },
  {
    "text": "than a signature, right? So this is really cool. And you can use this\nmuch more practically",
    "start": "1335000",
    "end": "1341450"
  },
  {
    "text": "than the raw lamport\nsignatures that were in the first problem set. Because those, if\nyou're just doing",
    "start": "1341450",
    "end": "1349760"
  },
  {
    "text": "one key and one signature,\nit's about the same size. But this actually lets\nyou use it multiple times,",
    "start": "1349760",
    "end": "1354920"
  },
  {
    "text": "lets you store a much\nsmaller private key, commit to much\nsmaller public keys. It's a more usable system.",
    "start": "1354920",
    "end": "1360740"
  },
  {
    "text": "The signatures, though, still\nare kind of huge, right?",
    "start": "1360740",
    "end": "1366072"
  },
  {
    "text": "Your signatures are going\nto be a little over 8 kilobytes, which is OK, right? Computers can deal\nwith 8 kilobytes.",
    "start": "1366072",
    "end": "1371690"
  },
  {
    "text": "That's called a Merkle\ntree made by Ralph Merkle in '76 or something.",
    "start": "1371690",
    "end": "1378679"
  },
  {
    "text": "And it was originally made\nfor exactly that purpose. Anyway, so these are\ncalled Merkle trees.",
    "start": "1378680",
    "end": "1384899"
  },
  {
    "text": "Ralph Merkle. He doesn't really\nwork on crypto now. He works on biotech\nstuff now, I think.",
    "start": "1384900",
    "end": "1391590"
  },
  {
    "text": "Anyway. But he's cool. And he gets, like,\neverything named after him. So you will see the\nword Merkle everywhere.",
    "start": "1391590",
    "end": "1398190"
  },
  {
    "text": "And it's, you know, he\ninvented something cool. Awesome. This is one of the\nkind of things,",
    "start": "1398190",
    "end": "1403290"
  },
  {
    "text": "though, where it\nseems like, yeah, I might have been able\nto think of that, right? It's sort of a binary\ntree and hash functions. It's nothing that crazy.",
    "start": "1403290",
    "end": "1410560"
  },
  {
    "text": "But so there's all\nsorts of Merkle trees. You can make a different thing. It's used in Bitcoin.",
    "start": "1410560",
    "end": "1416330"
  },
  {
    "text": "It's used in a bunch of\ndifferent cryptocurrencies. Oh, cool. It's a very powerful way\nto take a whole bunch",
    "start": "1416330",
    "end": "1426060"
  },
  {
    "text": "of different things and commit\nto them in one small thing. OK. So this is very cool. But we can do better.",
    "start": "1426060",
    "end": "1432360"
  },
  {
    "text": "And so the next things are\nthings that I definitely would never have thought\nof because it's much more",
    "start": "1432360",
    "end": "1438179"
  },
  {
    "text": "complex than just, like,\nhey, let's use a binary tree with hashes. And I will mention\nRSA and then go",
    "start": "1438180",
    "end": "1445260"
  },
  {
    "text": "into ECDSA and elliptic curve\n[INAUDIBLE] signatures, which",
    "start": "1445260",
    "end": "1450510"
  },
  {
    "text": "do different things and are not\nbased on just hash functions. So I'll talk about\nRSA for a few minutes,",
    "start": "1450510",
    "end": "1456720"
  },
  {
    "text": "and then we'll have a little\nbreak, like intermission. And then we'll go into\nelliptic curve stuff. OK. So RSA was invented by locals.",
    "start": "1456720",
    "end": "1463260"
  },
  {
    "text": "The R is Ron-- no, I think the R\nstands for Rivest, but Ron Rivest is at\nCSAIL, and he's still",
    "start": "1463260",
    "end": "1469870"
  },
  {
    "text": "working on cool crypto stuff. It's not used in Bitcoin\nor any currency, actually--",
    "start": "1469870",
    "end": "1474960"
  },
  {
    "text": "well, any currently\noperating cryptocurrency. Because the signatures\nand keys are",
    "start": "1474960",
    "end": "1482880"
  },
  {
    "text": "a bit larger than the\nlater systems we'll see-- smaller than the hash-based\nthings, but still a bit larger.",
    "start": "1482880",
    "end": "1490500"
  },
  {
    "text": "Was used in chaumian\nblinded cash. Because you can do blinded\nsignatures, where you say, OK, I'm going to have you\nsign something for me,",
    "start": "1490500",
    "end": "1498272"
  },
  {
    "text": "and then after you\ngive me the signature, I can pull apart the signature.",
    "start": "1498272",
    "end": "1504000"
  },
  {
    "text": "Because I'll have\nyou sign something that you don't know what\nyou're signing, right? I'm going to mask this\nmessage and blind it",
    "start": "1504000",
    "end": "1510630"
  },
  {
    "text": "so that you sign the\nmessage, and then I can get your signature\non the real message without you knowing\nwhat you signed.",
    "start": "1510630",
    "end": "1517080"
  },
  {
    "text": "So basically, the idea\nis, well, I actually have message prime equals\nmessage plus randomness.",
    "start": "1517080",
    "end": "1526230"
  },
  {
    "text": "And I say, hey, can\nyou sign m prime? And you say, OK. I produce a signature on m\nprime with my private key.",
    "start": "1526230",
    "end": "1533970"
  },
  {
    "text": "And we'll call that s prime. And then what I can do\nis I can s equals s prime",
    "start": "1533970",
    "end": "1541420"
  },
  {
    "text": "minus the randomness,\nor, really, some function of that randomness.",
    "start": "1541420",
    "end": "1546520"
  },
  {
    "text": "And now I have a signature. And this is a valid\nsignature on m.",
    "start": "1546520",
    "end": "1551530"
  },
  {
    "text": "So that's kind of cool. It's like, hey, can you\nsign this message for me? And we're not going to tell\nyou what you're signing.",
    "start": "1551530",
    "end": "1557670"
  },
  {
    "text": "It seems sort of\nuseless, like why would I sign something I have no\nidea what I'm signing? But it can be used in that\nchaumian blinded cash.",
    "start": "1557670",
    "end": "1565180"
  },
  {
    "text": "Because I then have a proof\nthat, well, this bank didn't know what they were signing,\nbut they signed this,",
    "start": "1565180",
    "end": "1570550"
  },
  {
    "text": "and this is their signature,\nand they gave it to me. And I can use that as a\nthing to represent money.",
    "start": "1570550",
    "end": "1577090"
  },
  {
    "text": "There's all sorts of cool\nthings you can do with this. The basic setup of RSA is make\ntwo prime numbers, p and q.",
    "start": "1577090",
    "end": "1584890"
  },
  {
    "text": "And then compute n, which\nis the product p times q. So this seems fairly\nstraightforward, right?",
    "start": "1584890",
    "end": "1591400"
  },
  {
    "text": "It's not too hard. Everyone knows what\nprime numbers are. Now you have this composite\nnumber, p times q.",
    "start": "1591400",
    "end": "1596500"
  },
  {
    "text": " How do I make a leading\nquestion for the next slide?",
    "start": "1596500",
    "end": "1603039"
  },
  {
    "text": "Does this have any relation to\nthings that we've looked at? This doesn't look at all\nlike a hash function, right?",
    "start": "1603040",
    "end": "1608740"
  },
  {
    "text": "But are there any properties\nsimilar to a hash function here? ",
    "start": "1608740",
    "end": "1614230"
  },
  {
    "text": "Yeah? AUDIENCE: It's hard\nto route the image. It's hard to [INAUDIBLE]. TADGE DRYJA: Yeah.",
    "start": "1614230",
    "end": "1619700"
  },
  {
    "text": "It's a one-way function\nin that if I know p and q, I can compute n, right? But given n, I can't\nnecessarily find p and q, right?",
    "start": "1619700",
    "end": "1628809"
  },
  {
    "text": "If they're small,\nsure, I just check. And there's all sorts of\nalgorithms to find factors.",
    "start": "1628810",
    "end": "1634150"
  },
  {
    "text": "But if p and q are pretty big,\nlike hundreds of bits long or thousands of\nbits long, finding n",
    "start": "1634150",
    "end": "1640690"
  },
  {
    "text": "may be impractical, whereas\nif p and q are really long, finding the product of both of\nthem will be very practical.",
    "start": "1640690",
    "end": "1647170"
  },
  {
    "text": "Even if huge, multiplying\ntwo integers is really easy. So this is a one-way function\nbut not a hash function.",
    "start": "1647170",
    "end": "1654880"
  },
  {
    "text": "And so a lot of these signature\nsystems use one-way functions, but trickier one-way functions\nthat aren't hash functions,",
    "start": "1654880",
    "end": "1661810"
  },
  {
    "text": "and still have cool\nthings that you can do. So I'm not going to go\ninto RSA in super detail.",
    "start": "1661810",
    "end": "1669760"
  },
  {
    "text": "I'm going to run\nthrough it really quick, and you'll be like,\nhuh, how does that work? But if you think it's\ninteresting, you can look it up",
    "start": "1669760",
    "end": "1676230"
  },
  {
    "text": "and then maybe you go\nto CSAIL and ask Ron how it works, although maybe\ntry to look it up first. He's probably explained\nit a lot of times.",
    "start": "1676230",
    "end": "1682100"
  },
  {
    "text": " But it has different properties. So you could say, I'm\ngoing to use this p times",
    "start": "1682100",
    "end": "1689049"
  },
  {
    "text": "q equals n as a hash function\nand make a lamport signature out of it where my private key\nis a whole bunch of p and q",
    "start": "1689050",
    "end": "1696850"
  },
  {
    "text": "pairs, and my public key is\na whole bunch of n's, and I reveal them and stuff. You could do that.",
    "start": "1696850",
    "end": "1702460"
  },
  {
    "text": "That would work. But you can do much\nmore powerful things because of the mathematical\nproperties of these things.",
    "start": "1702460",
    "end": "1709360"
  },
  {
    "text": "So yeah, I'm just going to\ngo through it really fast. But if you know anything,\nthis is kind of cool.",
    "start": "1709360",
    "end": "1715480"
  },
  {
    "text": "The idea is you can do a\nbunch of multiplication",
    "start": "1715480",
    "end": "1720730"
  },
  {
    "text": "and exponential modulo n. And so because n\nis almost prime,",
    "start": "1720730",
    "end": "1727809"
  },
  {
    "text": "there's some\ninteresting properties, where if you know\nthe factors of n,",
    "start": "1727810",
    "end": "1733180"
  },
  {
    "text": "you have these\nshortcuts you can do. And someone who doesn't\nknow the factors of n can't do these shortcuts.",
    "start": "1733180",
    "end": "1738289"
  },
  {
    "text": "So you publish e, which is\na constant-- this is sort of a parameter system.",
    "start": "1738290",
    "end": "1744490"
  },
  {
    "text": "So RSA is used today\nall over the place. If your computer\nis open and you've been using the web in\nthe last five seconds,",
    "start": "1744490",
    "end": "1750670"
  },
  {
    "text": "your computer has\nperformed RSA calculations. Every time you connect to a\nwebsite, you're doing RSA.",
    "start": "1750670",
    "end": "1758380"
  },
  {
    "text": "So generally, it's 65537. They just make this up. You could also use\nthree-- some small number.",
    "start": "1758380",
    "end": "1765800"
  },
  {
    "text": "And then d is a number\nthat you can compute if you know what p and q are. So this is sort of the\nprivate key, right?",
    "start": "1765800",
    "end": "1774040"
  },
  {
    "text": "p and q itself can be\nseen as the private key. But you can actually\ncompute this d number",
    "start": "1774040",
    "end": "1779080"
  },
  {
    "text": "and then discard p and q. And so this is how you\ncompute d or whatever.",
    "start": "1779080",
    "end": "1785320"
  },
  {
    "text": "But the idea is n is your public\nkey, and d is your private key. e is always the same, and p and\nq, you can discard afterwards.",
    "start": "1785320",
    "end": "1792429"
  },
  {
    "text": "And then what you can do-- and not going to get into\nit-- but you can say, OK,",
    "start": "1792430",
    "end": "1798020"
  },
  {
    "text": "my signature s is\nmessage, right-- I can take the hash\nand make a message m--",
    "start": "1798020",
    "end": "1803065"
  },
  {
    "text": "message to the d power modulo n. And if I verify, if I take that\nsignature to the e power modulo",
    "start": "1803065",
    "end": "1810940"
  },
  {
    "text": "n, it should equal\nm again, which is crazy and kind of awesome.",
    "start": "1810940",
    "end": "1816760"
  },
  {
    "text": "Because the idea\nis to sign, OK, I just raised to\nthe d power mod n. It's going to be some number\non the same size as n, right?",
    "start": "1816760",
    "end": "1824620"
  },
  {
    "text": "And then I give that to someone. They take that signature\nto the 65537 power modulo",
    "start": "1824620",
    "end": "1832750"
  },
  {
    "text": "m again and see if m-- the message-- comes back out. And if it does,\nthey know I signed,",
    "start": "1832750",
    "end": "1839260"
  },
  {
    "text": "and I have the private\nkey that corresponds to n. Now, the cool thing is I can\nuse this any number of times.",
    "start": "1839260",
    "end": "1847240"
  },
  {
    "text": "I can use the same\nthing a bazillion times with different m's, and\nthat doesn't give any help",
    "start": "1847240",
    "end": "1854890"
  },
  {
    "text": "on how to factor n\nor how to compute d. So this was late 70s, also,\nRSA, and one of the first,",
    "start": "1854890",
    "end": "1864320"
  },
  {
    "text": "hey, we can do better\nthan hash functions. It was developed at\naround the same time",
    "start": "1864320",
    "end": "1871060"
  },
  {
    "text": "as hash-based signatures. All of these things were sort\nof coming out at the same time. You can do lots of cool\nstuff because there's",
    "start": "1871060",
    "end": "1878649"
  },
  {
    "text": "these properties where we\ncan make m prime plus m",
    "start": "1878650",
    "end": "1885100"
  },
  {
    "text": "and take the exponentiation of\nall that, and it still works. OK. So that's really cool.",
    "start": "1885100",
    "end": "1890487"
  },
  {
    "text": "You can do lots of cool stuff. But this is also\nnot used in Bitcoin.",
    "start": "1890487",
    "end": "1896440"
  },
  {
    "text": "One of the things is the size. So key sizes are smaller\nthan with lamport signatures.",
    "start": "1896440",
    "end": "1902799"
  },
  {
    "text": "And they're often about\n2 kilobits, or 256 bytes,",
    "start": "1902800",
    "end": "1908277"
  },
  {
    "text": "which is fine. And that's the same\nsize as signatures. So if you use your web browser--",
    "start": "1908277",
    "end": "1913435"
  },
  {
    "text": " secure-- well, how secure?",
    "start": "1913435",
    "end": "1919720"
  },
  {
    "text": "Certificate, valid. Oh, this browser\nmight not show me. OK, never mind.",
    "start": "1919720",
    "end": "1925263"
  },
  {
    "text": "AUDIENCE: In\nFirefox, it'll do it. TADGE DRYJA: In Firefox,\nit tells you more. OK. Well, anyway, anyway, anyway.",
    "start": "1925263",
    "end": "1931030"
  },
  {
    "text": "But yeah, there's RSA keys in,\nbasically, every certificate",
    "start": "1931030",
    "end": "1936250"
  },
  {
    "text": "for web browsers and websites. And they're generally\n2,048 bits long. That's seen as pretty secure.",
    "start": "1936250",
    "end": "1943840"
  },
  {
    "text": "Even 1,024 bits has\nnot been hacked. But people think\nit probably could",
    "start": "1943840",
    "end": "1949000"
  },
  {
    "text": "be by a very motivated actor. So this is decent size.",
    "start": "1949000",
    "end": "1954549"
  },
  {
    "text": "One thing about RSA is that it's\na little tricky to implement, right? There's a whole bunch\nof weird math there. It's not like the\nlamport signatures,",
    "start": "1954550",
    "end": "1961539"
  },
  {
    "text": "where it's like, OK, I have a\nhash function, use it, right? It's kind of hard\nto shoot yourself in the foot with the\nlamport signature scheme.",
    "start": "1961540",
    "end": "1969070"
  },
  {
    "text": "You can, right, but\nit's sort of obvious if you do, so if you're\ndoing the homework and it just doesn't work\nat all, and you're like,",
    "start": "1969070",
    "end": "1974322"
  },
  {
    "text": "oh, I was hashing twice, or,\noh, I was reversing the order, or it just didn't work.",
    "start": "1974322",
    "end": "1982300"
  },
  {
    "text": "But there's no subtle ways\nwhere, oh, I was off by one, and now it reveals\nall my private keys. That's hard to do, whereas in\nRSA, it's actually quite easy.",
    "start": "1982300",
    "end": "1991269"
  },
  {
    "text": "If your p and q\nvalues, for example-- what's a really crazy gotcha--",
    "start": "1991270",
    "end": "1996520"
  },
  {
    "text": "if p or q minus 1-- so if\np minus 1 or q minus 1-- is smooth-- essentially, a\nnumber that's highly composite",
    "start": "1996520",
    "end": "2004320"
  },
  {
    "text": "has many small factors-- you can find\nsomeone's private key. You can factor it.",
    "start": "2004320",
    "end": "2009590"
  },
  {
    "text": "So it's not just that p\nand q have to be prime. P minus 1 and q minus 1\nhave to be not too unprime.",
    "start": "2009590",
    "end": "2017700"
  },
  {
    "text": "It can't be a power\nof two or something. Otherwise, you can\nlose your privacy. So there's all sorts of crazy\nthings that happen with RSA.",
    "start": "2017700",
    "end": "2026700"
  },
  {
    "text": "Bitcoin and other coins use\nelliptic curve signatures, which I'll talk about next,\nthat are sort of displacing RSA,",
    "start": "2026700",
    "end": "2035760"
  },
  {
    "text": "in many cases. So it hasn't really taken\noff for web certificates",
    "start": "2035760",
    "end": "2044370"
  },
  {
    "text": "but a lot of other types of\nencryption, signing, things like that. Cryptocurrencies are also one of\nthe big uses of elliptic curve",
    "start": "2044370",
    "end": "2051149"
  },
  {
    "text": "signatures because\nthey're somewhat more powerful and somewhat\nsmaller and really cool.",
    "start": "2051150",
    "end": "2056669"
  },
  {
    "text": "And we will talk about\nthose in three minutes. So intermission, three minutes.",
    "start": "2056670",
    "end": "2062699"
  },
  {
    "text": "Stretch. Ask random questions. Talk to the neighbors. OK.",
    "start": "2062699",
    "end": "2068040"
  },
  {
    "text": "So they're using\nthese elliptic curves, which are curves of\nthe form y squared",
    "start": "2068040",
    "end": "2074790"
  },
  {
    "text": "plus x cubed plus some\ncoefficient x squared plus some constant.",
    "start": "2074790",
    "end": "2081239"
  },
  {
    "text": "And in the case of\nBitcoin, it's very simple. It's y squared equals\nx cubed plus 7.",
    "start": "2081239",
    "end": "2086960"
  },
  {
    "text": "And that's the\ncurve Bitcoin uses. And this is what it looks\nlike if you plot it.",
    "start": "2086960",
    "end": "2092300"
  },
  {
    "text": "And that seems really simple. We can totally understand that. But it gets a little weird.",
    "start": "2092300",
    "end": "2098220"
  },
  {
    "text": "With elliptic curves, you have\nthese points on the curves, right? And another property is if\nyou draw a straight line that",
    "start": "2098220",
    "end": "2106530"
  },
  {
    "text": "intersects this curve-- you could also draw\na line which doesn't intersect at all, fine-- but if you draw a line\nthat intersects the curve,",
    "start": "2106530",
    "end": "2113260"
  },
  {
    "text": "it will intersect\nin three places. So if I draw a line here, it\nintersects these three dots.",
    "start": "2113260",
    "end": "2118950"
  },
  {
    "text": "If I draw a line here,\nit intersects here, here, and then it'll intersect\nsomewhere down here. It'll intersect in three\nplaces unless I take a tangent.",
    "start": "2118950",
    "end": "2126690"
  },
  {
    "text": "If I draw, and I try\nto be like, oh, I'm going only intersect\nin two, well, I can take a tangent\nhere, and it'll",
    "start": "2126690",
    "end": "2132480"
  },
  {
    "text": "intersect in one more place. What we can do, though,\nis we can say, well, if you intersect at a\ntangent, that's kind",
    "start": "2132480",
    "end": "2138180"
  },
  {
    "text": "of like intersecting twice. We can deal with that. AUDIENCE: What if you\ndraw a vertical line?",
    "start": "2138180",
    "end": "2143637"
  },
  {
    "text": "TADGE DRYJA: If you draw a\nvertical-- oh, yeah, vertical line, then there's\na point at infinity, which shouldn't happen.",
    "start": "2143637",
    "end": "2149498"
  },
  {
    "text": "AUDIENCE: But\ninfinity is included-- TADGE DRYJA: Yeah. AUDIENCE: --in the set\nof points on the curve? So it's like there's\nthree points, anyway.",
    "start": "2149498",
    "end": "2155130"
  },
  {
    "text": "TADGE DRYJA: Yeah. There's a point up there-- sort of. ",
    "start": "2155130",
    "end": "2161150"
  },
  {
    "text": "In the practice of\nsigning and stuff, you probably shouldn't hit it. Yeah.",
    "start": "2161150",
    "end": "2168289"
  },
  {
    "text": "But so what we do is we say,\nOK, well, three points in a line equals zero.",
    "start": "2168290",
    "end": "2174630"
  },
  {
    "text": "And so if we take this\npoint plus this point plus this point, that's zero.",
    "start": "2174630",
    "end": "2180570"
  },
  {
    "text": "Another way to say that is\nP plus Q minus R equals 0, or P plus Q equals negative\nR. And another property is",
    "start": "2180570",
    "end": "2190500"
  },
  {
    "text": "the negation of a point\nis just that same point with the y-coordinate flipped.",
    "start": "2190500",
    "end": "2197160"
  },
  {
    "text": "So if this is\nnegative R, we just go down to the\nbottom side of this,",
    "start": "2197160",
    "end": "2202380"
  },
  {
    "text": "and this is positive\nR. Similarly, minus P would be here. Minus Q would be here. And if you had a point Z here,\nnegative Z would be up here.",
    "start": "2202380",
    "end": "2211830"
  },
  {
    "text": "This is how it's constructed. However, we don't actually\nuse these nice curves.",
    "start": "2211830",
    "end": "2218460"
  },
  {
    "text": "We chop them up in\nmodulo something. Yeah? AUDIENCE: You have P plus Q\nequals negative R. Should it",
    "start": "2218460",
    "end": "2223680"
  },
  {
    "text": "be positive R?  TADGE DRYJA: No.",
    "start": "2223680",
    "end": "2230420"
  },
  {
    "text": "In this case, R is up here. Right. In this case-- P. Wait, hold on.",
    "start": "2230420",
    "end": "2237470"
  },
  {
    "text": "[INTERPOSING VOICES] TADGE DRYJA: Oh, shoot. Sorry. P plus Q equals R. Right. Sorry.",
    "start": "2237470",
    "end": "2243840"
  },
  {
    "text": "OK. Never mind. Yeah. The picture is correct.",
    "start": "2243840",
    "end": "2249490"
  },
  {
    "text": "But so basically,\nP plus Q equals R",
    "start": "2249490",
    "end": "2255002"
  },
  {
    "text": "because R is down here. Sorry. Yeah, that's why. OK. This is R. This is\nnegative R. So yeah,",
    "start": "2255002",
    "end": "2260550"
  },
  {
    "text": "P plus Q equals R,\nnot negative R. Sorry.",
    "start": "2260550",
    "end": "2267720"
  },
  {
    "text": "When you want to multiply\na point, you can. Because you can take\na tangent, right? So you can add\nthese points, right?",
    "start": "2267720",
    "end": "2274170"
  },
  {
    "text": "You can say, OK, I want\nthe sum of P and Q, which will be down here-- R. I want 2P, for example.",
    "start": "2274170",
    "end": "2283320"
  },
  {
    "text": "Well, with 2P, I\ncan take a tangent and then find\nwhere it intersects and then go down\nbelow the curve.",
    "start": "2283320",
    "end": "2289450"
  },
  {
    "text": "So for example, if this\nis G, I say OK, well, G starts here, take the tangent,\nfind where it intersects",
    "start": "2289450",
    "end": "2296400"
  },
  {
    "text": "and then drop down. And this is 2G. So it's a simple\nway to say, well,",
    "start": "2296400",
    "end": "2302865"
  },
  {
    "text": "I'm not really multiplying. I'm just adding it\nto itself, which is sort of what multiplication is. And I can do this\nagain and again.",
    "start": "2302865",
    "end": "2309030"
  },
  {
    "text": "So I say, oh, I want 4G. I take the tangent at 2G,\nfind the intersection here, drop down.",
    "start": "2309030",
    "end": "2314369"
  },
  {
    "text": "OK. Here's 4G. Take the tangent\nhere, it'll go-- I can keep doing that\nand get 2G, 4G, 8G.",
    "start": "2314370",
    "end": "2321630"
  },
  {
    "text": "And if I want intermediate\nthings, like, well, I want 3G, well, I draw a line between G\nand 2G, find the intersection,",
    "start": "2321630",
    "end": "2331670"
  },
  {
    "text": "and find the sum. So yeah? Yes? AUDIENCE: When you find\nthe intersection of that",
    "start": "2331670",
    "end": "2337369"
  },
  {
    "text": "[INAUDIBLE] the intersection\nof the modulo of something, does it just-- TADGE DRYJA: Yeah, yeah. So the pictures look\nnice, in this case, right?",
    "start": "2337370",
    "end": "2345162"
  },
  {
    "text": "It's like, hey,\nthere's this curve. And it looks so simple. And we can graphically\ndo it on graph paper.",
    "start": "2345162",
    "end": "2350970"
  },
  {
    "text": "But when you're actually\ndoing it on the computer, it looks more like this. Everything is modulo\nsome giant prime number.",
    "start": "2350970",
    "end": "2358890"
  },
  {
    "text": "You could still draw lines. It's just that the curve is now\nall these crazy-looking dots.",
    "start": "2358890",
    "end": "2364560"
  },
  {
    "text": "And you still have that\nsymmetry from the y-axis. But the way the computer does\nit is all modulo a number.",
    "start": "2364560",
    "end": "2372060"
  },
  {
    "text": "So it doesn't actually\nmap to a nice curve.",
    "start": "2372060",
    "end": "2377770"
  },
  {
    "text": "So the fun thing about\nwhen you're doing modulo is all the properties\nstay the same, right?",
    "start": "2377770",
    "end": "2383892"
  },
  {
    "text": "With regular numbers,\nyou can still do addition,\nmultiplication, division all modulo some number, and\nit still all works, right?",
    "start": "2383892",
    "end": "2391500"
  },
  {
    "text": "So same with this. You still have the same\ndraw a line between P and Q,",
    "start": "2391500",
    "end": "2397800"
  },
  {
    "text": "and you get to here. And then you flip over the\ny-axis, and now this is R.",
    "start": "2397800",
    "end": "2405240"
  },
  {
    "text": "Similarly, you can\ntake a tangent-- although a tangent is harder\nto visually see because there's",
    "start": "2405240",
    "end": "2410609"
  },
  {
    "text": "no obvious curve here-- but the equations work the same. OK. So you don't need to know\nexactly why these things work",
    "start": "2410610",
    "end": "2420860"
  },
  {
    "text": "or curves. But we're going to go through\nwhat you can do with these and what properties you have. OK.",
    "start": "2420860",
    "end": "2426320"
  },
  {
    "text": "So we've defined these\npoints on a curve and how this curve works.",
    "start": "2426320",
    "end": "2431859"
  },
  {
    "text": "And then we also have\nregular old numbers, right? So what we'll do from now\non is say, like a and b,",
    "start": "2431860",
    "end": "2439520"
  },
  {
    "text": "our lowercase numbers,\nthese are scalars. Scalars just means\nregular old numbers.",
    "start": "2439520",
    "end": "2444880"
  },
  {
    "text": "The uppercase A and B will refer\nto points on the curve, OK? So from now on, lowercase\nis regular number,",
    "start": "2444880",
    "end": "2452080"
  },
  {
    "text": "uppercase is point\non this curve, or point on this mashed-up thing\nthat we still call a curve.",
    "start": "2452080",
    "end": "2458678"
  },
  {
    "text": "OK. So I'll go through what\noperations we can do, and then we can see\nwhat use those have.",
    "start": "2458678",
    "end": "2465089"
  },
  {
    "text": "So first, scalars. You can add, subtract,\nmultiply, divide. You can do whatever\nyou want, right?",
    "start": "2465090",
    "end": "2470490"
  },
  {
    "text": "These are just regular\nnumbers, like five or 17 or 22. Everything's OK, right?",
    "start": "2470490",
    "end": "2477090"
  },
  {
    "text": "Easy. Everything here is integers. We're doing modulo\nsome big prime number, so there's no decimal points.",
    "start": "2477090",
    "end": "2484598"
  },
  {
    "text": "I think in this class,\nwe'll probably never have to use floating\npoint, which is great, because floating point\nalways scares me.",
    "start": "2484598",
    "end": "2492359"
  },
  {
    "text": "It's also uint. These are like\nunsigned integers. You can do it with signed. But since you're\nmodulo some big number,",
    "start": "2492360",
    "end": "2499470"
  },
  {
    "text": "it's like unsigned\nnumbers that loop around. So it's really\nnice for computers. Computers deal very\nwell with these things.",
    "start": "2499470",
    "end": "2505410"
  },
  {
    "text": "Computers are good at\nfloating point, as well. But the thing is,\nin cryptography, a lot of times floating point\nends up with error, right,",
    "start": "2505410",
    "end": "2511520"
  },
  {
    "text": "where you're pretty\nclose, but you've got some fixed amount of\ndecimal places you can store.",
    "start": "2511520",
    "end": "2518670"
  },
  {
    "text": "Your floating point goes\nout to some precision. And then error can accumulate. And in a lot of cryptography,\nyou want zero error, right?",
    "start": "2518670",
    "end": "2526470"
  },
  {
    "text": "Like in a hash function,\nit's pretty exact. So a lot of times,\nthe cryptography,",
    "start": "2526470",
    "end": "2532140"
  },
  {
    "text": "you use integers instead of\nfloating point or rational numbers. OK. So with scalars, these\nare just regular integers,",
    "start": "2532140",
    "end": "2540600"
  },
  {
    "text": "natural numbers even. You can do these. All the operations,\nyou're familiar with.",
    "start": "2540600",
    "end": "2545940"
  },
  {
    "text": "That's fairly straightforward. With points. So you can add and\nsubtract the points, right?",
    "start": "2545940",
    "end": "2552960"
  },
  {
    "text": "We showed how you\ndo that visually. And then the equations\nfor it, the computer",
    "start": "2552960",
    "end": "2558030"
  },
  {
    "text": "can do that pretty quick. However, this is not defined. Multiplication and division\nwith two points is undefined.",
    "start": "2558030",
    "end": "2566319"
  },
  {
    "text": "It's just not clear\nhow you do it. It's not something in\nthis system, right? It's a group.",
    "start": "2566320",
    "end": "2571400"
  },
  {
    "text": "You've got one operation. You don't have this other one. So you can add and\nsubtract points,",
    "start": "2571400",
    "end": "2576510"
  },
  {
    "text": "but you can't multiply them. Any questions about this? This is pretty important.",
    "start": "2576510",
    "end": "2583010"
  },
  {
    "text": "Make sense? Yes? AUDIENCE: In the previous case,\nwhen you were adding points,",
    "start": "2583010",
    "end": "2588100"
  },
  {
    "text": "what is defined as addition? Are you adding only\nthe y components? TADGE DRYJA: You use both\nthe x and y-coordinates",
    "start": "2588100",
    "end": "2594839"
  },
  {
    "text": "to add, right?  So when you're doing\nit in the computer, you're saying,\nOK, well, what are",
    "start": "2594840",
    "end": "2601135"
  },
  {
    "text": "the x- and y-coordinates of P? What are the x- and\ny-coordinates of Q? ",
    "start": "2601135",
    "end": "2607980"
  },
  {
    "text": "Find the slope here and\nwhere it intersects the axis. And then see where it'll\nintersect the curve",
    "start": "2607980",
    "end": "2613560"
  },
  {
    "text": "at another point. AUDIENCE: Addition Is literally\ndefined as compute that point. It is not a function of adding\nthe x- and y-coordinates.",
    "start": "2613560",
    "end": "2621400"
  },
  {
    "text": "AUDIENCE: Gotcha. TADGE DRYJA: Yeah. Well, I mean-- yeah. But the equation would be--",
    "start": "2621400",
    "end": "2627900"
  },
  {
    "text": "since the computer doesn't\nactually look at the curve, you just say, OK. Find the Px- and y-coordinate. Find the Qx- and y-coordinate.",
    "start": "2627900",
    "end": "2634200"
  },
  {
    "text": "Find the slope, and then\nfind where it intersects, and then compute for that for R.",
    "start": "2634200",
    "end": "2643799"
  },
  {
    "text": "OK. So yeah. You can add and subtract. You cannot multiply and\ndivide these points.",
    "start": "2643800",
    "end": "2649760"
  },
  {
    "text": "Sounds good? Any other questions? Yes? AUDIENCE: How\nwould you subtract? TADGE DRYJA: Ah.",
    "start": "2649760",
    "end": "2654990"
  },
  {
    "text": "You just go down, right? So if I want P minus Q, I\nshould say P plus negative Q.",
    "start": "2654990",
    "end": "2662880"
  },
  {
    "text": "And negative Q is just right\nhere, right down on the axis. So I say, OK, I want\nP minus Q. I go here.",
    "start": "2662880",
    "end": "2667980"
  },
  {
    "text": "Find it. It's going to be\nup there somewhere. So yeah. You just add the\nnegative of the number.",
    "start": "2667980",
    "end": "2677049"
  },
  {
    "text": "I guess that's another thing. Minus B-- negative B-- is\nalso an operation I can do.",
    "start": "2677050",
    "end": "2683320"
  },
  {
    "text": "I can negate something,\nwhich lets me do subtraction. AUDIENCE: For those of\nyou with math backgrounds,",
    "start": "2683320",
    "end": "2689650"
  },
  {
    "text": "this is defining\na group operation on the field of natural\nnumbers, modulo-- TADGE DRYJA: Which is a big one.",
    "start": "2689650",
    "end": "2695670"
  },
  {
    "text": "AUDIENCE: --and using\nthis elliptic curve. So this is A. And the\nonly thing that's defined is addition and subtraction\nand not multiplication.",
    "start": "2695670",
    "end": "2701640"
  },
  {
    "text": "TADGE DRYJA: Right. You can do the same\ngroup operations without using elliptic curves. And so you can just\ndo exponential modulo",
    "start": "2701640",
    "end": "2708910"
  },
  {
    "text": "big prime number. I'm going to use\ncurves because it's what is used in all\nthe actual systems.",
    "start": "2708910",
    "end": "2715599"
  },
  {
    "text": "But you can sort of forget about\nthe curve after this, right? You can say, well, look, we just\nhave these uppercase variables",
    "start": "2715600",
    "end": "2725140"
  },
  {
    "text": "and these lowercase variables. And the fact that it's on a\ncurve, we can sort of abstract away and just know that we\nhave these different types,",
    "start": "2725140",
    "end": "2731650"
  },
  {
    "text": "essentially. And when you're in the\ncomputer, you're just like, yeah, that's a point. That's a scalar. Here are the\noperations I can do,",
    "start": "2731650",
    "end": "2737670"
  },
  {
    "text": "and I just run the functions. OK. So the next part, when you\nmix scalars and points,",
    "start": "2737670",
    "end": "2746080"
  },
  {
    "text": "so mixed operations. You cannot add a point and an\ninteger or subtract a point",
    "start": "2746080",
    "end": "2754480"
  },
  {
    "text": "and an integer. That's not defined, right? You say, OK, here's\nthis point p minus 7.",
    "start": "2754480",
    "end": "2760300"
  },
  {
    "text": "Well, does that mean\nmove the x-axis? Does that mean move the y? It's not defined.",
    "start": "2760300",
    "end": "2765320"
  },
  {
    "text": "However, you can do this, right? You can multiply and divide. So you can say, well,\nA times 2, well,",
    "start": "2765320",
    "end": "2773530"
  },
  {
    "text": "you take the tangent, right? It's just A plus A. Or A times\n7, is we just break it down as",
    "start": "2773530",
    "end": "2779079"
  },
  {
    "text": "A plus A plus A plus A 17 times. We can also divide,\nwhich is a little weird because we have to\nfind the inverse of B",
    "start": "2779080",
    "end": "2787600"
  },
  {
    "text": "and then multiply by that-- the multiplicative inverse\nof B modulo the order.",
    "start": "2787600",
    "end": "2793825"
  },
  {
    "text": "But anyway, you can do these. This is a little\ntrickier because you have to compute what, like,\nB to the negative 1 is",
    "start": "2793825",
    "end": "2799810"
  },
  {
    "text": "and multiply by that. You can do it. So you can do these things where\nyou have points times scalars.",
    "start": "2799810",
    "end": "2805468"
  },
  {
    "text": "But you cannot add. Yeah? AUDIENCE: So 2A is\nbasically joining the tangent to A,\n[INAUDIBLE] beginning.",
    "start": "2805468",
    "end": "2810480"
  },
  {
    "text": "TADGE DRYJA: Yep. So that was here. If this is G, this is 2G.",
    "start": "2810480",
    "end": "2815800"
  },
  {
    "text": "Find the tangent, find the\nintersection, and then negate. OK. So you can do that.",
    "start": "2815800",
    "end": "2823260"
  },
  {
    "text": "That's cool. You cannot do that. OK. So roster of\noperations we can do.",
    "start": "2823260",
    "end": "2830540"
  },
  {
    "text": "This is it. And this is sort of,\nif you think of that, you can do all\nthese cool things. It's sort of amazing,\nall the crazy things",
    "start": "2830540",
    "end": "2837260"
  },
  {
    "text": "you can do with just\nthese operations, right? With regular numbers, you\ncan do whatever you want. That's obvious.",
    "start": "2837260",
    "end": "2843380"
  },
  {
    "text": "And with these points, you\ncan add and subtract them. And when you mix, you\ncan multiply and divide.",
    "start": "2843380",
    "end": "2849380"
  },
  {
    "text": "And that's it. OK. Any questions so far? You don't have to worry too\nmuch about the curves and all",
    "start": "2849380",
    "end": "2857275"
  },
  {
    "text": "of the math and stuff. But you just sort of say,\nOK, here's my toolbox. Here's what I can do. ",
    "start": "2857275",
    "end": "2864950"
  },
  {
    "text": "OK. Any questions? Good? So now what we can do is we\ncan define a one-way function",
    "start": "2864950",
    "end": "2872750"
  },
  {
    "text": "sort of like a hash function,\nsort of like multiplying p times q to get n.",
    "start": "2872750",
    "end": "2879260"
  },
  {
    "text": "What we will need,\nin addition to this, is everyone pick some point on\nthe curve, and we call it G.",
    "start": "2879260",
    "end": "2885170"
  },
  {
    "text": "And it's random. And we want it to be\nsomewhat verifiably random. We just all have to\nagree on a point.",
    "start": "2885170",
    "end": "2892220"
  },
  {
    "text": "And we'll call this\nthe generator point. Another property is that, since\nit's all modulo, this number,",
    "start": "2892220",
    "end": "2900290"
  },
  {
    "text": "if B is too big, you'll\nwrap around, right, because it's all modulo, this n.",
    "start": "2900290",
    "end": "2906380"
  },
  {
    "text": "So it's called a\ngenerator point because-- and every point on\nthe curve can be one-- if you keep, say,\n2G, 3G, 4G, 5G,",
    "start": "2906380",
    "end": "2913790"
  },
  {
    "text": "eventually, you'll\nget back to G, right? It's all finite.",
    "start": "2913790",
    "end": "2920840"
  },
  {
    "text": "OK so does anyone\nhave an idea, OK, how would we make some\ncool one-way function",
    "start": "2920840",
    "end": "2928070"
  },
  {
    "text": "given these operations\nand the fact that we have an\nagreed-upon point?",
    "start": "2928070",
    "end": "2933250"
  },
  {
    "text": "It's not super obvious,\nbut it's actually fairly straightforward. Once you see it,\nyou're like, oh.",
    "start": "2933250",
    "end": "2938302"
  },
  {
    "text": " Any ideas? Yeah. AUDIENCE: So you\ntake your point G, and you multiply\nit by some scalar,",
    "start": "2938302",
    "end": "2945934"
  },
  {
    "text": "and you publish where the\npoint is [INAUDIBLE] scalars. TADGE DRYJA: Yep, yep.",
    "start": "2945935",
    "end": "2951260"
  },
  {
    "text": "OK. So your private key-- let's say private\nkey, lowercase a, it's just some 256 bit\nrandom number, scalar,",
    "start": "2951260",
    "end": "2958930"
  },
  {
    "text": "exactly the same as 32 bytes\nlike in a lamport signature. And your public key\nis just a times G.",
    "start": "2958930",
    "end": "2966340"
  },
  {
    "text": "And your public key is\nnow a point on a curve. We're going to call\nit uppercase A.",
    "start": "2966340",
    "end": "2972280"
  },
  {
    "text": "And you have a 32 byte\nx-coordinate, right-- because the x\ndimension is 256 bits--",
    "start": "2972280",
    "end": "2978540"
  },
  {
    "text": "32 byte y-coordinate. So it's 64 bytes-- pretty small. Anyone have another\nquick optimization",
    "start": "2978540",
    "end": "2985420"
  },
  {
    "text": "on how you could reduce this? So there's a lot of\noptimization going on",
    "start": "2985420",
    "end": "2990430"
  },
  {
    "text": "in all these different\ncryptocurrency systems. Because they don't\nscale too well. But any idea of how\nto get that down?",
    "start": "2990430",
    "end": "2998591"
  },
  {
    "text": "AUDIENCE: Can you hash it? TADGE DRYJA: You could. So you could hash it. You'd make it into 32 bytes.",
    "start": "2998592",
    "end": "3005460"
  },
  {
    "text": "There's a more useful way. But if you hash it, you still\nhave to reveal it later, right?",
    "start": "3005460",
    "end": "3011430"
  },
  {
    "text": "So it helps, making\na pubkey hash. And that's what\nBitcoin did initially",
    "start": "3011430",
    "end": "3016640"
  },
  {
    "text": "is you'd have the\n64 byte public keys. And then you'd send\nto the hash of them.",
    "start": "3016640",
    "end": "3022320"
  },
  {
    "text": "There's a nicer way. Any ideas? OK. So the thing is it's\nsymmetric, right?",
    "start": "3022320",
    "end": "3031770"
  },
  {
    "text": "So the curve is symmetric\nabout the x-axis. ",
    "start": "3031770",
    "end": "3039490"
  },
  {
    "text": "Any ideas? yes. AUDIENCE: Could you just code\none of the x- or y-coordinates and say which side?",
    "start": "3039490",
    "end": "3044948"
  },
  {
    "text": "TADGE DRYJA: Right. So you take the x-coordinate\nand encode that. And then just that one bit--",
    "start": "3044948",
    "end": "3050810"
  },
  {
    "text": "4-- it's on the top. It's on the bottom. And then let them figure out\nexactly where it is, right?",
    "start": "3050810",
    "end": "3056210"
  },
  {
    "text": "So you can encode the\nx-coordinate only and 1 bit for y, and then you're\ndown to 33 bytes.",
    "start": "3056210",
    "end": "3061370"
  },
  {
    "text": "It's a little annoying\nbecause the 33 bytes, well, one of those bytes\nis going to be empty. It's just going to have one\nbit in it for up or down.",
    "start": "3061370",
    "end": "3068780"
  },
  {
    "text": "But whatever. So you can do that, and\nthat's also really cool. OK.",
    "start": "3068780",
    "end": "3074060"
  },
  {
    "text": "Any questions so far? AUDIENCE: Could you encode\na [INAUDIBLE] and same",
    "start": "3074060",
    "end": "3081310"
  },
  {
    "text": "up and down? Could you just encode\nan [INAUDIBLE]?? TADGE DRYJA: Huh. Probably.",
    "start": "3081310",
    "end": "3086720"
  },
  {
    "text": "But I don't think\nit would be smaller. I think you'd have to\nprobably have the same size",
    "start": "3086720",
    "end": "3091910"
  },
  {
    "text": "if you use some other\ncoordinate system.  Hm.",
    "start": "3091910",
    "end": "3097790"
  },
  {
    "text": "Yeah, you could encode a slope-- AUDIENCE: Yeah, the [INAUDIBLE]. TADGE DRYJA: And you\nsay it intersects,",
    "start": "3097790",
    "end": "3102865"
  },
  {
    "text": "and it's at the slope, and\nwhich side of the axis? AUDIENCE: Yeah, and if it\ncrosses multiple times, which one of the-- TADGE DRYJA: You probably could.",
    "start": "3102865",
    "end": "3108349"
  },
  {
    "text": "I think you would\nend up the same size. But yeah. But it might be faster\nfor some things. There's all sorts of\ndifferent encodings.",
    "start": "3108350",
    "end": "3114710"
  },
  {
    "text": "AUDIENCE: I guarantee that you\nhave an integer in the end. TADGE DRYJA: Yeah. So you might not\nbe on the curve.",
    "start": "3114710",
    "end": "3120170"
  },
  {
    "text": "But there's a\nsimilar problem here where it might not\nbe on the curve. You can encode a point\nthat's also off the curve.",
    "start": "3120170",
    "end": "3126360"
  },
  {
    "text": "And so when you actually\nget a public key, like over the wire\nin these systems,",
    "start": "3126360",
    "end": "3131515"
  },
  {
    "text": "the first thing\nyou usually do is make sure this is\na valid public key, and it's actually on the curve. Because there's a lot\nof points that aren't.",
    "start": "3131515",
    "end": "3138050"
  },
  {
    "text": "And sometimes you can screw\naround with the code that way. Yeah? AUDIENCE: Can you define the\nscalar multiplication again?",
    "start": "3138050",
    "end": "3143240"
  },
  {
    "text": "how does it go? TADGE DRYJA: OK. So scalar multiplication--\na times G is, basically,",
    "start": "3143240",
    "end": "3149120"
  },
  {
    "text": "break it out as G plus G\nplus G plus G plus G a times. And G plus G is find\nthe tangent of G",
    "start": "3149120",
    "end": "3156890"
  },
  {
    "text": "and then find the\nintersection, right? So this is G. This is 2G,\nright-- tangent, intersect,",
    "start": "3156890",
    "end": "3164869"
  },
  {
    "text": "and then the negation. And so you just do\nthat a bazillion times.",
    "start": "3164870",
    "end": "3170810"
  },
  {
    "text": "However, since you can\nfind 2G and then you can double 2G to get 4G\nand double 4G to get 8G,",
    "start": "3170810",
    "end": "3177319"
  },
  {
    "text": "you can come up with\npowers of 2 of G and then add those\npowers of 2 to do a much more efficient addition\nso that you can practically",
    "start": "3177320",
    "end": "3186650"
  },
  {
    "text": "make-- because little a is going to\nbe some huge decimal 50-digit",
    "start": "3186650",
    "end": "3192890"
  },
  {
    "text": "number or whatever. So you're going to have\nto do this two, four, six, eight binary expansion\nand then add them all up.",
    "start": "3192890",
    "end": "3200820"
  },
  {
    "text": "OK. Yeah? AUDIENCE: You're chucking\neverything into some grain size",
    "start": "3200820",
    "end": "3209860"
  },
  {
    "text": "to get these. You're [INAUDIBLE]\na continuous curve. TADGE DRYJA: Yes. AUDIENCE: It feels like if you\nhave 306 bits in the original,",
    "start": "3209860",
    "end": "3217630"
  },
  {
    "text": "you shouldn't be able to get all\nthe way down to 32 bits, right? Because you just want\nto make sure that you--",
    "start": "3217630",
    "end": "3222830"
  },
  {
    "text": "TADGE DRYJA: This? AUDIENCE: Yeah.  If you removed a\nbyte of precision,",
    "start": "3222830",
    "end": "3229150"
  },
  {
    "text": "would you actually\nbe losing any power? TADGE DRYJA: What you can do\na little-- what you can do",
    "start": "3229150",
    "end": "3235579"
  },
  {
    "text": "is you can just\nsay, look, I'm only going to allow public keys\nthat are on the top, positive y",
    "start": "3235580",
    "end": "3246140"
  },
  {
    "text": "component. And everything\nelse is disallowed. You could have that as\na rule of your system,",
    "start": "3246140",
    "end": "3251420"
  },
  {
    "text": "and then you can get\nrid of the y bit. But the thing is\nthe y-coordinate",
    "start": "3251420",
    "end": "3259430"
  },
  {
    "text": "does affect some of the\nthings like signatures, things that you'll later use. So you can just say, OK, look,\nimplicitly y bit is positive.",
    "start": "3259430",
    "end": "3268580"
  },
  {
    "text": "And you lose 1 bit of security. Because there is a\ndifference between",
    "start": "3268580",
    "end": "3274250"
  },
  {
    "text": "the positive and negative\nthing if you're doing signing. But yeah. And so some systems do do that.",
    "start": "3274250",
    "end": "3280950"
  },
  {
    "text": "And it makes things easier. There's some signing\nsystems that do that. OK. I'm going to go\nto the next part.",
    "start": "3280950",
    "end": "3286990"
  },
  {
    "text": " ECDSA is used in bitcoin.",
    "start": "3286990",
    "end": "3292609"
  },
  {
    "text": "I'm actually not\ngoing to explain it. It's a worse signature system.",
    "start": "3292610",
    "end": "3298400"
  },
  {
    "text": "So the reason why this was\nused was the better system was patented.",
    "start": "3298400",
    "end": "3304490"
  },
  {
    "text": "And so there's a clearer, more\nobvious, cleaner, more powerful",
    "start": "3304490",
    "end": "3311180"
  },
  {
    "text": "signature system that was\npatented by this German guy, Claus Schnorr. And so no one used it, or\nmaybe a few people used it.",
    "start": "3311180",
    "end": "3317660"
  },
  {
    "text": "But in general, with open\nsource things and web standards, patents are really\nhard to work with.",
    "start": "3317660",
    "end": "3325590"
  },
  {
    "text": "And so all the\ncryptographers said, well, we'll make\nthis other system that's different enough that it\ndoesn't infringe on the patent.",
    "start": "3325590",
    "end": "3332540"
  },
  {
    "text": "And it's kind of ugly. It does work as a\nsignature scheme.",
    "start": "3332540",
    "end": "3338720"
  },
  {
    "text": "But actually, I'm\ngoing to explain the Schnorr signatures,\nwhich make a lot more sense,",
    "start": "3338720",
    "end": "3346100"
  },
  {
    "text": "are easier to understand\nand manipulate, and the patent has expired,\nso we can all use it. And it will probably\nbe going into Bitcoin.",
    "start": "3346100",
    "end": "3353780"
  },
  {
    "text": "And some cryptocurrencies\nuse Schnorr signatures. I think Monero uses a\nSchnorr-like signature.",
    "start": "3353780",
    "end": "3362180"
  },
  {
    "text": "But Bitcoin will\nprobably be putting it into Bitcoin in the\nnext year or so.",
    "start": "3362180",
    "end": "3368130"
  },
  {
    "text": "So all these things will\nbe much more applicable, and you can use them. And there's code out. You can use them now.",
    "start": "3368130",
    "end": "3373620"
  },
  {
    "text": "OK. Yeah. Sorry. Patent has expired--\nfree to use the better algo that must not be named. So yeah.",
    "start": "3373620",
    "end": "3380352"
  },
  {
    "text": "People don't call it\nSchnorr signature as much. Because it's like, well, this\nis the guy who prevented us from using this for 20 years.",
    "start": "3380352",
    "end": "3388900"
  },
  {
    "text": "And there's modifications to it. OK. So the elliptic curve signature,\nfor lack of a better name.",
    "start": "3388900",
    "end": "3396350"
  },
  {
    "text": "This is something\nof a simplification. And there's reading\nabout how you can really do it the right way.",
    "start": "3396350",
    "end": "3401907"
  },
  {
    "text": "But this does give\nyou the right idea. And for a single signer,\nthis is secure, and it works.",
    "start": "3401907",
    "end": "3408170"
  },
  {
    "text": "But later things, you might want\nto actually add other stuff. So the idea is you've got\nyour message m, right?",
    "start": "3408170",
    "end": "3414360"
  },
  {
    "text": "Same as in lamport,\nsame as in RSA, you've got a message m and a\nprivate key lowercase a.",
    "start": "3414360",
    "end": "3419620"
  },
  {
    "text": "And your public key is\na times G, like we said. And then, when you want\nto sign, you actually",
    "start": "3419620",
    "end": "3425630"
  },
  {
    "text": "make a one-time use key\npair for the signature only. And they usually call that k.",
    "start": "3425630",
    "end": "3432530"
  },
  {
    "text": "And k is a new random number. It's the private key. And you're going to\nmultiply it by G.",
    "start": "3432530",
    "end": "3440307"
  },
  {
    "text": "And they call this R.\nI don't know why they use these letters, but anyway.",
    "start": "3440308",
    "end": "3445460"
  },
  {
    "text": "K times G is R. R is the other\npublic key you're using just",
    "start": "3445460",
    "end": "3450680"
  },
  {
    "text": "for this signature. And then the signature itself\nis quite straightforward.",
    "start": "3450680",
    "end": "3457170"
  },
  {
    "text": "As the signer, you\ncompute s, which is k-- this new private key\nyou just made up--",
    "start": "3457170",
    "end": "3462750"
  },
  {
    "text": "minus the hash of your\nmessage concatenated with R, this public key-- so you encode\nthe public key in 33 bytes,",
    "start": "3462750",
    "end": "3469990"
  },
  {
    "text": "stick it in there-- multiplied by a, your\nnormal private key.",
    "start": "3469990",
    "end": "3475650"
  },
  {
    "text": "And then your\nsignature is the pair-- the R point and the s scalar.",
    "start": "3475650",
    "end": "3480990"
  },
  {
    "text": "This is a little bit\nof a bunch to process. But it's actually\nnot too bad, right?",
    "start": "3480990",
    "end": "3486150"
  },
  {
    "text": "This is a scalar-- 32 bytes-- that you made up. The hash, this is a message,\nalso going to be however long.",
    "start": "3486150",
    "end": "3494400"
  },
  {
    "text": "This is 33 bytes. You concatenate them\ntogether-- hash. You end up with\nanother 32 byte scalar.",
    "start": "3494400",
    "end": "3500549"
  },
  {
    "text": "You multiply those two scalars. So actually, the only\nelliptic curve operation",
    "start": "3500550",
    "end": "3506760"
  },
  {
    "text": "here is calculating what R is. When you're actually\ncalculating s, this is all just scalar,\nso it's very fast.",
    "start": "3506760",
    "end": "3513840"
  },
  {
    "text": "So in terms of practical\ncomputer stuff, doing these operations is a\nlittle bit on the slow side.",
    "start": "3513840",
    "end": "3519720"
  },
  {
    "text": "Because you're doing those\npoint additions quite a number of times. So a decent code,\na decent CPU, can",
    "start": "3519720",
    "end": "3527430"
  },
  {
    "text": "do on the order of thousands\nof these types of operations",
    "start": "3527430",
    "end": "3533099"
  },
  {
    "text": "per second, which is decent. You can do a decent amount,\nbut it is kind of slow.",
    "start": "3533100",
    "end": "3539190"
  },
  {
    "text": "And it's considerably\nslower than hash functions. You can do a million iterations\nof a hash function per second",
    "start": "3539190",
    "end": "3544770"
  },
  {
    "text": "on a core, or you can\ndo, maybe, 1,000 or 2,000 of this kind of thing, so\nstill pretty fast but slower.",
    "start": "3544770",
    "end": "3551980"
  },
  {
    "text": "And so this signing procedure,\nthis takes a bit of time. This takes, actually,\nvery little time.",
    "start": "3551980",
    "end": "3558210"
  },
  {
    "text": "Because you're just subtracting\nand multiplying 32 byte scalar integers, which is much faster.",
    "start": "3558210",
    "end": "3565810"
  },
  {
    "text": "OK. So does this make sense? We'll go a little bit of\nhow you can't forge this.",
    "start": "3565810",
    "end": "3571750"
  },
  {
    "text": "OK. Sorry. So first verification. Sorry. So how would you, if\nanyone knows or can think,",
    "start": "3571750",
    "end": "3579140"
  },
  {
    "text": "how would you\nverify this, right? I know their public key--",
    "start": "3579140",
    "end": "3584460"
  },
  {
    "text": "capital A, which is\nlittle a times G-- and then they're\ngiving me a message m, and they're giving me a\nsignature, which is R and s.",
    "start": "3584460",
    "end": "3591800"
  },
  {
    "text": "And they've computed\nit this way. I can't verify this\nequation myself",
    "start": "3591800",
    "end": "3597020"
  },
  {
    "text": "because I don't know what k is. I don't know what\nlittle a is, right? I'm just given R, s, m, and big\nA. So how would I verify this?",
    "start": "3597020",
    "end": "3609470"
  },
  {
    "text": "AUDIENCE: Can I, for example,\ntake the hash of the message, use R, and then try\nrandom a's and that--",
    "start": "3609470",
    "end": "3621124"
  },
  {
    "text": "on, sorry. TADGE DRYJA: Yeah. Do you have one? AUDIENCE: So trying random is\nprobably [INAUDIBLE] because--",
    "start": "3621124",
    "end": "3626850"
  },
  {
    "text": "TADGE DRYJA:\nThere's a lot, yeah. AUDIENCE: --there's too many. The old one that\nyou don't know it. But I think one more thing\nyou could do is take little s",
    "start": "3626850",
    "end": "3633910"
  },
  {
    "text": "and multiply it by big G. TADGE DRYJA: Yes. AUDIENCE: And then do some-- TADGE DRYJA: Yeah. So the basic idea--\nyeah, you're right.",
    "start": "3633910",
    "end": "3641319"
  },
  {
    "text": "Multiply this side\nby G. Then you also have to multiply the\nother side by G, right?",
    "start": "3641320",
    "end": "3646329"
  },
  {
    "text": "So you say, OK, well,\nas the verifier-- I've got R, I've got s--",
    "start": "3646330",
    "end": "3651732"
  },
  {
    "text": "I multiply s by\nG, and now I have to multiply this side by G.\nAnd what'll that look like?",
    "start": "3651732",
    "end": "3657800"
  },
  {
    "text": "Well, what's k times G? AUDIENCE: R. TADGE DRYJA: R. What's\nlittle a times G?",
    "start": "3657800",
    "end": "3663490"
  },
  {
    "text": "Big A. So yeah. I want to verify.",
    "start": "3663490",
    "end": "3669089"
  },
  {
    "text": "I want to verify that\nthis equation was used, right-- s equals k minus\nthis hash times little a.",
    "start": "3669090",
    "end": "3675119"
  },
  {
    "text": "Multiply both sides\nby G, I get s times G equals k times G minus the\nhash thing times little a times",
    "start": "3675120",
    "end": "3681660"
  },
  {
    "text": "G. This is big A. This is R. Hey, now I know everything\nhere as the verifier, right?",
    "start": "3681660",
    "end": "3689490"
  },
  {
    "text": "I know what s time G is. I know what R is. I know what big A is. I know what's going\ninto this hash function.",
    "start": "3689490",
    "end": "3695593"
  },
  {
    "text": "And so I just say, OK. Well, I rearrange it a little,\nand I say, is R equal to this?",
    "start": "3695593",
    "end": "3704130"
  },
  {
    "text": "And if it is, that's\na good signature. If it's not, it's\nnot a good signature.",
    "start": "3704130",
    "end": "3710620"
  },
  {
    "text": "Any questions about this? Does this makes sense, mostly?",
    "start": "3710620",
    "end": "3716849"
  },
  {
    "text": " So for the verification, it's\na bit more CPU-intense, right?",
    "start": "3716850",
    "end": "3724620"
  },
  {
    "text": "You're given a scalar. You multiply by G. You\nalso have to multiply A--",
    "start": "3724620",
    "end": "3733270"
  },
  {
    "text": "this is actually more costly-- you have to multiply\nA by this hash. The reason that's\nmore costly-- it's",
    "start": "3733270",
    "end": "3738370"
  },
  {
    "text": "still a scalar times a point. The thing is, since G is\nused for multiplying a lot,",
    "start": "3738370",
    "end": "3745059"
  },
  {
    "text": "you precompute all sorts\nof coefficients times G, and you store them in RAM\nor in your CPU somewhere.",
    "start": "3745060",
    "end": "3754589"
  },
  {
    "text": "So multiplying by G\nis a little bit faster because you do it a lot,\nyou can precompute a lot, whereas multiplying by A is\ndifferent each time for all",
    "start": "3754590",
    "end": "3761170"
  },
  {
    "text": "the different signatures. So this is a little\nbit slower, in general. So it takes a little\nbit more CPU time",
    "start": "3761170",
    "end": "3768190"
  },
  {
    "text": "to verify a signature\nthan to create one, something like twice as much.",
    "start": "3768190",
    "end": "3773660"
  },
  {
    "text": "But still, you can\ndo this pretty fast. On a modern computer, you can\ndo thousands of these a second.",
    "start": "3773660",
    "end": "3779000"
  },
  {
    "text": "OK. Any questions so far? I'll go a little bit into why\nthis is not forgible, right?",
    "start": "3779000",
    "end": "3785800"
  },
  {
    "text": "So I want to forge a signature. Well, I don't know little a.",
    "start": "3785800",
    "end": "3794980"
  },
  {
    "text": "But why don't I make up\na k and compute s and R? But I need a, right?",
    "start": "3794980",
    "end": "3800470"
  },
  {
    "text": "So I'm going to say, OK,\nthis is the equation I want. I'll just make up my own\nk and make up my own k, s,",
    "start": "3800470",
    "end": "3808119"
  },
  {
    "text": "that'll satisfy this. Without a, I really can't\nmake a valid s, right?",
    "start": "3808120",
    "end": "3813670"
  },
  {
    "text": "I can make something up here.  But I can't compute it because\nI don't know here, right?",
    "start": "3813670",
    "end": "3822400"
  },
  {
    "text": "I can try to grind through hash\nfunctions, but it won't work. The basic problem\nis if I make up an s",
    "start": "3822400",
    "end": "3828040"
  },
  {
    "text": "and solve for R, right-- I can say, well,\nI know what R is-- but the thing is R is in\nthe hash function, as well.",
    "start": "3828040",
    "end": "3836413"
  },
  {
    "text": "It's the one-wayness of\nthe hash function that actually breaks this, right? So I could say, well,\nlet me solve for R. Well,",
    "start": "3836413",
    "end": "3843100"
  },
  {
    "text": "R is the hash of m and R\ntimes a plus s times G.",
    "start": "3843100",
    "end": "3850710"
  },
  {
    "text": "If I can come up with a\nvalid R here, I can do this. The problem is R is defined\nby the hash of R in this case.",
    "start": "3850710",
    "end": "3859650"
  },
  {
    "text": "I can't compute this, and I\ncan't cancel this out, right? So you can see just like, OK,\nI need to solve for R. Well,",
    "start": "3859650",
    "end": "3865920"
  },
  {
    "text": "but it's already in here. I'm stuck. If I don't know k, I can't come\nup with a signature, either.",
    "start": "3865920",
    "end": "3872480"
  },
  {
    "text": " OK.",
    "start": "3872480",
    "end": "3877610"
  },
  {
    "text": "There is one footgun\nwith EC signatures. If you use the same R value\nfor different signatures",
    "start": "3877610",
    "end": "3886160"
  },
  {
    "text": "with the same pubkey, you\nreveal your private key. So k has to be random\nand new every time.",
    "start": "3886160",
    "end": "3893420"
  },
  {
    "text": " If you look through\nthe equation, you'll see how you can solve--",
    "start": "3893420",
    "end": "3899704"
  },
  {
    "text": "if you have two of the same\nk's with different s's--",
    "start": "3899705",
    "end": "3905150"
  },
  {
    "text": "you can solve for k. And then, once you\nsolve for k given",
    "start": "3905150",
    "end": "3911910"
  },
  {
    "text": "this, if you know\nwhat k is, you can find what little a is,\nright, as a verifier.",
    "start": "3911910",
    "end": "3917400"
  },
  {
    "text": "You can say, well,\nyou gave me s. That's part of the signature. I know this whole coefficient.",
    "start": "3917400",
    "end": "3923760"
  },
  {
    "text": "If I know k, I can solve for\nlittle a by dividing this out. So always use a new k value.",
    "start": "3923760",
    "end": "3929220"
  },
  {
    "text": "There have been many\ncases where people don't. Probably the most famous one\nis PlayStation 3 used ECDSA.",
    "start": "3929220",
    "end": "3937020"
  },
  {
    "text": "And they used a fixed k value\nfor signing all their code. And that allowed people to\ncalculate their private keys",
    "start": "3937020",
    "end": "3943320"
  },
  {
    "text": "and then run pirated games. That was actually\nthe first time I learned about elliptic\ncurve signatures,",
    "start": "3943320",
    "end": "3949594"
  },
  {
    "text": "in 2010 or something. So actually, there's\ninteresting tutorials",
    "start": "3949594",
    "end": "3955799"
  },
  {
    "text": "written by the hackers who\nbroke Playstation 3 about how this works. And that's when I\nfirst read about it.",
    "start": "3955800",
    "end": "3962500"
  },
  {
    "text": "OK. We're almost out of time. Any questions about\nthis stuff so far?",
    "start": "3962500",
    "end": "3970090"
  },
  {
    "text": "OK. So this is a\nsignature algorithm.",
    "start": "3970090",
    "end": "3975787"
  },
  {
    "text": "It's like, OK, fine. This works. I can sign, same as lamport\nsignatures, same as RSA. What's really nice about\nthe elliptic curve stuff",
    "start": "3975787",
    "end": "3982530"
  },
  {
    "text": "is you can do more\nthan just signatures. There's all sorts of\nfun things you can do.",
    "start": "3982530",
    "end": "3988890"
  },
  {
    "text": "And it seems like a\nfairly unexplored area in that I've found\nfun things that you",
    "start": "3988890",
    "end": "3994440"
  },
  {
    "text": "can do that I guess are novel. And I'm not an expert\non this at all. It's just that it's a\nfairly new area of research",
    "start": "3994440",
    "end": "4000800"
  },
  {
    "text": "in how to do cool\nbitcoiny cryptocurrency things with these curves\nand points and stuff.",
    "start": "4000800",
    "end": "4006290"
  },
  {
    "text": "So I'll go through a couple\nfun things you can do.",
    "start": "4006290",
    "end": "4011900"
  },
  {
    "text": "Fun with points. OK. So I'm not using an asterisk. Just b times G.\nSo let's say Alice",
    "start": "4011900",
    "end": "4019880"
  },
  {
    "text": "has a public key A. Bob\nhas a public key B, right, which is little a times G\nor little b times G. Well,",
    "start": "4019880",
    "end": "4029300"
  },
  {
    "text": "this is weird. Little a times big B-- Alice's private key multiplied\nby Bob's public key--",
    "start": "4029300",
    "end": "4036290"
  },
  {
    "text": "you can do that, right?-- is equal to Bob's private\nkey times Alice's public",
    "start": "4036290",
    "end": "4041850"
  },
  {
    "text": "key, right? It's commutative. The multiplication\nis commutative. That's weird, right?",
    "start": "4041850",
    "end": "4047030"
  },
  {
    "text": "It's just a times G times\nb, which is the same-- or it doesn't matter\nthe order-- it's the same as b times G times a,\nwhich is the same as a times",
    "start": "4047030",
    "end": "4056360"
  },
  {
    "text": "b times G. And let's\ncall that C. C-- this is called a Diffie-Hellman\nkey exchange point.",
    "start": "4056360",
    "end": "4062950"
  },
  {
    "text": "Diffie and Hellman are two also\nlate-'70s PhD students who came up with all this cool stuff.",
    "start": "4062950",
    "end": "4069470"
  },
  {
    "text": "No, wait. Diffie was a PhD student. Hellman was his advisor? I don't remember. Anyway, they came\nup with this idea.",
    "start": "4069470",
    "end": "4077540"
  },
  {
    "text": "And this is a shared point. What would this be useful for? It's actually super useful.",
    "start": "4077540",
    "end": "4084070"
  },
  {
    "text": "Can you think of like, oh, OK. We can do this. We can compute C. Why\nwould we want to do that?",
    "start": "4084070",
    "end": "4089170"
  },
  {
    "text": "Any applications\nyou can think of? Yeah? AUDIENCE: Trying to share\nkeys with people without both",
    "start": "4089170",
    "end": "4095270"
  },
  {
    "text": "of them knowing who\nthey are and evaluating the other set of keys. TADGE DRYJA: Yeah. It's really cool to share keys.",
    "start": "4095270",
    "end": "4101979"
  },
  {
    "text": "So this is also done if\nyou have a web browser. I think it's all elliptic curve\nDiffie-Hellman now, mostly.",
    "start": "4101979",
    "end": "4108460"
  },
  {
    "text": "But if you have a web browser\nand you go to a website, this is happening, basically,\nfor every HTTPS request.",
    "start": "4108460",
    "end": "4115299"
  },
  {
    "text": "Because you can\nuse C as a sort of shared key and encrypt\nthings with it.",
    "start": "4115300",
    "end": "4121750"
  },
  {
    "text": "The idea is big A can be public. Big B can be public.",
    "start": "4121750",
    "end": "4128528"
  },
  {
    "text": "Point C will not be public. The only way to\ncompute it is to know either Alice's private\nkey-- little a--",
    "start": "4128529",
    "end": "4134979"
  },
  {
    "text": "or Bob's private key, little b. Even though you can\nsee the public keys,",
    "start": "4134979",
    "end": "4142270"
  },
  {
    "text": "you can't compute C from\njust the public keys, right? Because big A times big\nB, that's not defined.",
    "start": "4142270",
    "end": "4152229"
  },
  {
    "text": "You can't multiply the points. You have to multiply\nthe point by a scalar. And since you don't\nknow the scalars",
    "start": "4152229",
    "end": "4158259"
  },
  {
    "text": "from viewing this\nexchange, you can't compute C. But Alice and\nBob can both compute C.",
    "start": "4158260",
    "end": "4163810"
  },
  {
    "text": "So this is really useful. You can compute C. You\ncan use it for encryption.",
    "start": "4163810",
    "end": "4170229"
  },
  {
    "text": "You can use it to prove you\nare who you say you are. You can use it as an\ninteractive verification",
    "start": "4170229",
    "end": "4176199"
  },
  {
    "text": "where you say, OK, I'm Bob. I'm going to make random point.",
    "start": "4176200",
    "end": "4181679"
  },
  {
    "text": "I'm going to give that to you. Prove you know your\nprivate key-- little a-- by telling me what C is, right?",
    "start": "4181680",
    "end": "4190439"
  },
  {
    "text": "So I can make a random\nkey here, give it to you. You return C. I verify that\nthat's the right C. And I say,",
    "start": "4190439",
    "end": "4198340"
  },
  {
    "text": "OK, well you must know little a. You haven't shown me\na little a, but you've proven that you know it,\nso proof of knowledge",
    "start": "4198340",
    "end": "4205260"
  },
  {
    "text": "of the private key. So you can use that for\nlogins instead of passwords.",
    "start": "4205260",
    "end": "4211000"
  },
  {
    "text": "And it's much simpler\nthan a signature. So that's really cool.",
    "start": "4211000",
    "end": "4216179"
  },
  {
    "text": "All sorts of things\nyou can do with that. The last part, you can\nhave fun with points. And I use this in my software.",
    "start": "4216180",
    "end": "4222690"
  },
  {
    "text": "So you say, OK, well,\nthere's a public key A. There's a public\nkey B. And we'll define D as the sum of\nthese two public keys.",
    "start": "4222690",
    "end": "4232590"
  },
  {
    "text": "The thing is if you're\nsumming these two public keys, it's commutative,\nand it is the same as saying the sum of the two\nprivate keys times G, right?",
    "start": "4232590",
    "end": "4241889"
  },
  {
    "text": "a times G plus b times\nG is the same as a plus b times G, which is another\nreally cool property.",
    "start": "4241890",
    "end": "4250650"
  },
  {
    "text": "So what if I compute\nthis public key D, and I say I want a\nsignature from public key D?",
    "start": "4250650",
    "end": "4259410"
  },
  {
    "text": "You can. And you so the\nprivate key, little d, which can sign for this, is\njust little a plus little b.",
    "start": "4259410",
    "end": "4267060"
  },
  {
    "text": "So you can make a combined key. And then either party-- Alice has little a,\nBob has a little b--",
    "start": "4267060",
    "end": "4274260"
  },
  {
    "text": "and they could reveal\nit to each other and allow the other person to\nmake a signature with D later.",
    "start": "4274260",
    "end": "4279750"
  },
  {
    "text": " I use this in the lightning\nnetwork software I've had,",
    "start": "4279750",
    "end": "4287010"
  },
  {
    "text": "where, basically, you say,\nlook, we'll compute D, and I can give you the\nprivate key, right?",
    "start": "4287010",
    "end": "4296150"
  },
  {
    "text": "I'm Bob. And I say, OK, here's point b. Here's point a. We add them together.",
    "start": "4296150",
    "end": "4301700"
  },
  {
    "text": "And then, Alice, if I give\nyou my private key, now you can sign, but\nI can't, right?",
    "start": "4301700",
    "end": "4307550"
  },
  {
    "text": "So I'll give you\nthe private key to D from some information I have. Or you could give me\nthe private key to D",
    "start": "4307550",
    "end": "4314030"
  },
  {
    "text": "by sharing little a with me. So this is another\nuseful thing where you can have something\nwhere both parties know",
    "start": "4314030",
    "end": "4320150"
  },
  {
    "text": "that neither party can\nsign unless they give them something. And you can use that for bitcoin\naddresses, things like that.",
    "start": "4320150",
    "end": "4329449"
  },
  {
    "text": "Before you even\nget to signatures, you can share keys and stuff. There's all sorts\nof super fun things",
    "start": "4329450",
    "end": "4335390"
  },
  {
    "text": "you can do with these points\nand curves and systems. Multisignatures-- I put\na link to a PDF file",
    "start": "4335390",
    "end": "4342860"
  },
  {
    "text": "that's very recent and kind\nof overkill and over my head, as well.",
    "start": "4342860",
    "end": "4348530"
  },
  {
    "text": "But you can do signatures where\nyou aggregate the signatures. But There's ways to\nsay, OK, well, I'm",
    "start": "4348530",
    "end": "4354333"
  },
  {
    "text": "going to add all these\nR points, and I'm going to add all these s points. And I can have\nsignatures that are",
    "start": "4354333",
    "end": "4359900"
  },
  {
    "text": "from a bunch of\ndifferent people that collapse into the same\nsize as a single signature.",
    "start": "4359900",
    "end": "4364940"
  },
  {
    "text": "And I can verify that they're\nall signing the same thing or, possibly, that they're\nall signing different things. So I have 10\ndifferent signatures",
    "start": "4364940",
    "end": "4372409"
  },
  {
    "text": "from different people\nsigning different messages. But I can add up\nall the s values. I have to keep the R values.",
    "start": "4372410",
    "end": "4378440"
  },
  {
    "text": "But now these 10 signatures,\ninstead of being 64 bytes each are more like\n32 bites each.",
    "start": "4378440",
    "end": "4383840"
  },
  {
    "text": "And there's one extra 32\nbyte value for all of them. So there's a lot\nof really cool ways",
    "start": "4383840",
    "end": "4388969"
  },
  {
    "text": "you can combine things,\nmake things smaller, make things really versatile,\nwhere we can share keys,",
    "start": "4388970",
    "end": "4394920"
  },
  {
    "text": "things like that,\nwhich you can't do with hash-based\nsignatures, hash functions.",
    "start": "4394920",
    "end": "4400670"
  },
  {
    "text": "And so it's really fun. One worry is that if\nquantum computers ever become really a thing, all\nthis stuff stops working.",
    "start": "4400670",
    "end": "4406850"
  },
  {
    "text": "All the elliptic curve\nstuff doesn't work anymore. You can figure out what\npeople's private keys are,",
    "start": "4406850",
    "end": "4411949"
  },
  {
    "text": "whereas hash stuff, hash\nthings like lamport signatures, still work. So there's some talk\nof hey, we should",
    "start": "4411950",
    "end": "4418460"
  },
  {
    "text": "prepare for if that ever happens\nand make efficient, effective hash-based signatures\nand use them",
    "start": "4418460",
    "end": "4424520"
  },
  {
    "text": "in something like\nBitcoin or Ethereum. People haven't yet because\nthe overhead is really high. It's really big.",
    "start": "4424520",
    "end": "4430940"
  },
  {
    "text": "The real thing is\nall these fun things might disappear in\nthe next 10, 20 years. Who knows? But there's lots of cool stuff.",
    "start": "4430940",
    "end": "4436880"
  },
  {
    "text": "What do we do with this? So we're not going\nto do anything yet in terms of problem sets. It's a little hard to\nprogram it directly.",
    "start": "4436880",
    "end": "4443540"
  },
  {
    "text": "But there's libraries. And the libraries\nhave fairly easy use, where it's multiply\nby G is a function,",
    "start": "4443540",
    "end": "4448980"
  },
  {
    "text": "and multiply by this\npoint is a function. So this is groundwork for\ncool stuff you can do. And it's really nice\nbecause it's a new area.",
    "start": "4448980",
    "end": "4455420"
  },
  {
    "text": "And I'm not an expert on this,\nbut I've come up with stuff that people have cited me on.",
    "start": "4455420",
    "end": "4460639"
  },
  {
    "text": "And they're like, yeah, I guess\nno one thought of that before. There's a lot of things. There's one very\nrecent one called",
    "start": "4460640",
    "end": "4466760"
  },
  {
    "text": "Taproot, where it's one line. You're like, oh, yeah. That works. And it's just these sort of\nelliptic curve operations.",
    "start": "4466760",
    "end": "4473930"
  },
  {
    "text": "It's like, yeah, that works. That's really useful. How did no one think of that? It's one line. Wow.",
    "start": "4473930",
    "end": "4479180"
  },
  {
    "text": "So there's just\nnot a ton of people working on this kind of stuff. And so it's kind of fun.",
    "start": "4479180",
    "end": "4483489"
  }
]