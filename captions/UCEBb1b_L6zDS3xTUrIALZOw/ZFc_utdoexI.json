[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "7410"
  },
  {
    "text": "offer high quality, educational resources for free. To make a donation or view\nadditional materials from",
    "start": "7410",
    "end": "13960"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13960",
    "end": "19790"
  },
  {
    "text": "ocw.mit.edu.  PROFESSOR: There's so many\nthings that we're going to start with today, one,\nis we're going",
    "start": "19790",
    "end": "26570"
  },
  {
    "text": "to review the quiz. And we'll be real\nquick on that. Then, we're going to talk\nabout object oriented programming, which is something\nthat you'll probably",
    "start": "26570",
    "end": "33235"
  },
  {
    "text": "be more interested in for\nyour problem set. So just going down problem (1):\nit's false, true, false,",
    "start": "33235",
    "end": "42530"
  },
  {
    "text": "false, false. Does anyone have any\nquestions on this?",
    "start": "42530",
    "end": "47928"
  },
  {
    "text": "No. Everyone good with that? Anyone wonder why if\nsomething's true? Or why something's false?",
    "start": "47928",
    "end": "53360"
  },
  {
    "text": "AUDIENCE: Why is the\nsecond one false? PROFESSOR: Why is it false? AUDIENCE: Why? PROFESSOR: It's true. Because, and this is an English\nthing, so, or language",
    "start": "53360",
    "end": "63040"
  },
  {
    "text": "thing, so it can kind\nof trip people up. But it's basically saying that\nthere are some problems that",
    "start": "63040",
    "end": "70240"
  },
  {
    "text": "you need to use recursion\nor iteration to solve. AUDIENCE: Why do you always\nhave to use [INAUDIBLE]?",
    "start": "70240",
    "end": "75510"
  },
  {
    "text": " PROFESSOR: Well, if you have a\nlarge number of inputs or the",
    "start": "75510",
    "end": "82470"
  },
  {
    "text": "inputs are variable, the point\nis that there are certain",
    "start": "82470",
    "end": "88690"
  },
  {
    "text": "problems that you would need to\nuse recursion or iteration to solve them.",
    "start": "88690",
    "end": "93720"
  },
  {
    "text": "There are some that you don't. But this is just asking if there\nare problems that exist.",
    "start": "93720",
    "end": "98930"
  },
  {
    "text": "AUDIENCE: Can you\nuse brute force? PROFESSOR: Well, brute force\nusually involves some sort of iteration.",
    "start": "98930",
    "end": "104410"
  },
  {
    "text": "Because you have to iterate\nthrough all the possible solutions. ",
    "start": "104410",
    "end": "110120"
  },
  {
    "text": "Any other questions? OK. So the next one, this is just\nan exercise in code reading.",
    "start": "110120",
    "end": "117460"
  },
  {
    "text": "And we can actually just\nlook at how it runs. ",
    "start": "117460",
    "end": "128259"
  },
  {
    "text": "If I run like that. Also, if you don't have your\nquiz, I have them up here, if you want to pick it up.",
    "start": "128259",
    "end": "134230"
  },
  {
    "text": "But that's just the output\nof that code. Does anyone not see\nhow that works?",
    "start": "134230",
    "end": "139319"
  },
  {
    "text": "Or want me to step through it? ",
    "start": "139320",
    "end": "152570"
  },
  {
    "text": "Question (3) was the double\nrecurring question. ",
    "start": "152570",
    "end": "160740"
  },
  {
    "text": "And those are the two answers\nwe're were looking for. Does anyone not see\nhow that works?",
    "start": "160740",
    "end": "168140"
  },
  {
    "text": "Or want to try and\nwalk through it? ",
    "start": "168140",
    "end": "173480"
  },
  {
    "text": "The way to tackle this problem\nis walk through in your head.",
    "start": "173480",
    "end": "180680"
  },
  {
    "text": "Let's take the first\nset of input. ",
    "start": "180680",
    "end": "187120"
  },
  {
    "text": "At the top, that's your\ninitial call. Now, the string, s, here, is\nnot less than 1, right.",
    "start": "187120",
    "end": "197879"
  },
  {
    "text": "You're going to go to this\ndouble recursive call here. So that means you're going\nto get as you return.",
    "start": "197880",
    "end": "213960"
  },
  {
    "text": "And the way I got this at\nis, I'm just taking s from one to the end. ",
    "start": "213960",
    "end": "221860"
  },
  {
    "text": "What this means is\nthat this part is going to execute first. And it's the same thing.",
    "start": "221860",
    "end": "227340"
  },
  {
    "text": "Go into the function. This is now s. This is obviously not only\none character long.",
    "start": "227340",
    "end": "232769"
  },
  {
    "text": "So we're going to have, again,\nanother double recursive call. And it's going to\nlook like this.",
    "start": "232770",
    "end": "238323"
  },
  {
    "start": "238323",
    "end": "248069"
  },
  {
    "text": "Now, I've got this call\nto contend with. This string is one\ncharacter long. So what does it do?",
    "start": "248070",
    "end": "254800"
  },
  {
    "text": "It just returns the input. So, this function call is\njust going to return t.",
    "start": "254800",
    "end": "262560"
  },
  {
    "text": "And, then, this function\nis going to get called with t, again. And we already know what happens\nwhen you can pass a t.",
    "start": "262560",
    "end": "268730"
  },
  {
    "text": "That means that this whole\nfunction here, results in t.",
    "start": "268730",
    "end": "275230"
  },
  {
    "text": "Then, we tack on the a. That means this function call,\n'at', returns 'ta'.",
    "start": "275230",
    "end": "283870"
  },
  {
    "text": "And then we pass it into this\nouter function here. And we can already guess what\nthis is going to return",
    "start": "283870",
    "end": "290480"
  },
  {
    "text": "because for this input it just\nreversed the characters. It just flipped them. For 'ta', it's going\nto flip them again.",
    "start": "290480",
    "end": "297690"
  },
  {
    "text": "The entire function call\nhere, results in 'at'. ",
    "start": "297690",
    "end": "305060"
  },
  {
    "text": "And then we just append\n'm' to it. The entire return for\nthis one is 'atm'. ",
    "start": "305060",
    "end": "316820"
  },
  {
    "text": "It's tricky, but you've just got\nto step through the code and step through the functions\nand look at each step, what",
    "start": "316820",
    "end": "323960"
  },
  {
    "text": "the function is getting\nas input. This was the coding question. Most of the questions up until\nnow has been, can you read",
    "start": "323960",
    "end": "330110"
  },
  {
    "text": "code and understand\nwhat it's doing. This one asked you to actually\nimplement a function. ",
    "start": "330110",
    "end": "336080"
  },
  {
    "text": "When you start with these\nquestions you should always start from the specification. ",
    "start": "336080",
    "end": "342230"
  },
  {
    "text": "So, this function is assuming\nthat we have a list of words in lowercase. lStr is a string of\nlowercase letters.",
    "start": "342230",
    "end": "349205"
  },
  {
    "text": " All the letters in\nlStr are unique.",
    "start": "349205",
    "end": "355960"
  },
  {
    "text": "And that the return of the\nfunction are going to be all the words in word list that\nhave a one to one mapping",
    "start": "355960",
    "end": "364610"
  },
  {
    "text": "between the letters in\nthe word and lStr. ",
    "start": "364610",
    "end": "370510"
  },
  {
    "text": "In English, let's say that\nmy lStr is raft. ",
    "start": "370510",
    "end": "380030"
  },
  {
    "text": "Ok. Assuming that I have a fairly\ncomplete word list, I'm going to have two words that are going\nto meet that criteria.",
    "start": "380030",
    "end": "391169"
  },
  {
    "text": "I can say there's\nan r, a, f, t. That's pretty obvious.",
    "start": "391170",
    "end": "397680"
  },
  {
    "text": "And then we have a t, f, a, r. That's what we're looking at.",
    "start": "397680",
    "end": "405310"
  },
  {
    "text": "A lot of you did something where\nyou iterated through all the words and then you had\nanother loop inside that tried",
    "start": "405310",
    "end": "415110"
  },
  {
    "text": "to find this correspondence. The way that we solved it--\nand there are multiple",
    "start": "415110",
    "end": "421449"
  },
  {
    "text": "solutions to this. So if your solution worked,\nyou got full credit. But the solution that we came up\nwith is first, we're going",
    "start": "421450",
    "end": "428550"
  },
  {
    "text": "to take the letters in lStr and\nwe're going to sort them. So we're going to\nhave a, f, r, t.",
    "start": "428550",
    "end": "436720"
  },
  {
    "text": "Alphabetically. And then for each word in word\nlist, we're going to do the",
    "start": "436720",
    "end": "442520"
  },
  {
    "text": "same thing.  Raft becomes a, f, r, t.",
    "start": "442520",
    "end": "447530"
  },
  {
    "text": "Fart becomes a, f,\nr, t, as well. Then it becomes just a simple\nstring comparison. ",
    "start": "447530",
    "end": "457900"
  },
  {
    "text": "And all you have to do is\niterate through the word list. ",
    "start": "457900",
    "end": "463050"
  },
  {
    "text": "Does that make sense\nto everyone?  Our solution has a trick.",
    "start": "463050",
    "end": "469380"
  },
  {
    "text": "You don't need to\nuse this trick. A lot of people didn't and\nthey got full credit. But this is one way\nof doing it. ",
    "start": "469380",
    "end": "479790"
  },
  {
    "text": "Question (5). This was the one where we asked\nyou to find the problem",
    "start": "479790",
    "end": "486070"
  },
  {
    "text": "with this code. Or, rather we asked does this\ncode meet the specification. ",
    "start": "486070",
    "end": "493740"
  },
  {
    "text": "When you get a question like\nthat, first thing you should do is actually look at\nthe specification.",
    "start": "493740",
    "end": "499479"
  },
  {
    "text": "Then, you should look for what\nthis code needs to do. Because the specification is\ngoing to tell you what the",
    "start": "499480",
    "end": "506229"
  },
  {
    "text": "function needs to do. If it doesn't say you need to do\nsomething then, that means it's undefined. ",
    "start": "506230",
    "end": "513429"
  },
  {
    "text": "Right? So In those cases, you can do\nwhatever, as long as you meet the specification.",
    "start": "513429",
    "end": "520529"
  },
  {
    "text": "The first requirement is it\nreturns a list of the pointwise sum of the elements.",
    "start": "520530",
    "end": "525570"
  },
  {
    "text": "That's the first requirement\nof the specification. And then it gives you 2\nimplicit requirements.",
    "start": "525570",
    "end": "532740"
  },
  {
    "text": "One is this example, where it\nsays if I'm given two vectors,",
    "start": "532740",
    "end": "538070"
  },
  {
    "text": "this is what I expect\nthe return to be. In this case, the vectors are\ntwo different lengths.",
    "start": "538070",
    "end": "543860"
  },
  {
    "text": "It's also saying that your\nvectors are not always going to be the same length.",
    "start": "543860",
    "end": "548940"
  },
  {
    "text": "In that case, you take the\npointwise sum up to the shorter of the two lists and\njust tack on the remainder",
    "start": "548940",
    "end": "558880"
  },
  {
    "text": "from a longer list. So that's the second\nrequirement. The third requirement is, if\nyou have two empty lists",
    "start": "558880",
    "end": "565710"
  },
  {
    "text": "you're going to return\nan empty list. And, finally, your fourth\nrequirement is, does not",
    "start": "565710",
    "end": "571660"
  },
  {
    "text": "modify input. Now, you know the four\nrequirements from the specification. ",
    "start": "571660",
    "end": "577770"
  },
  {
    "text": "And. now, you need to look in\nthe code and see if this code matches all those\nrequirements.",
    "start": "577770",
    "end": "583700"
  },
  {
    "text": "The first one. Does it return a list containing\nthe pointwise some of the elements. Well, this is the portion of\nthe code that does that.",
    "start": "583700",
    "end": "591220"
  },
  {
    "text": " It looks like it meets\nthat specification.",
    "start": "591220",
    "end": "597280"
  },
  {
    "text": " Result is going to be the longer\nof the two vectors.",
    "start": "597280",
    "end": "606860"
  },
  {
    "text": "In this case if v1\nlonger than v2. We set result to v1\nand other to v2. That's the shorter.",
    "start": "606860",
    "end": "613500"
  },
  {
    "text": "Then, if we choose the longer,\nwe set result to v2. And other to the shorter\nof the two vectors.",
    "start": "613500",
    "end": "621320"
  },
  {
    "text": "Does everyone see that?  We iterate through and we\nget the pointwise sum.",
    "start": "621320",
    "end": "627320"
  },
  {
    "text": "We meet the first requirement. The second requirement is that\nif we're given two vectors",
    "start": "627320",
    "end": "634760"
  },
  {
    "text": "that are different lengths then,\nwe're going to sum up the furthest that we can, up to\nthe length of the shortest",
    "start": "634760",
    "end": "641150"
  },
  {
    "text": "one an tack on the remainder. Well, again, this for loop here,\nthat does a pointwise",
    "start": "641150",
    "end": "647570"
  },
  {
    "text": "sum, it only goes up to the\nlength of the shorter list. ",
    "start": "647570",
    "end": "653180"
  },
  {
    "text": "Second requirement met. Third requirement. Two empty vectors returns\nan empty vector.",
    "start": "653180",
    "end": "658600"
  },
  {
    "text": " Well, if I have an empty\nvector here, this is going to be 0.",
    "start": "658600",
    "end": "663980"
  },
  {
    "text": "This FOR loop is never\ngoing to execute. And my result is going\nto be empty. ",
    "start": "663980",
    "end": "671870"
  },
  {
    "text": "And, then, finally that leaves a\nfourth requirement, does not modify the input. ",
    "start": "671870",
    "end": "678680"
  },
  {
    "text": "What's result? Result is what we're ultimately\nreturning. And that's the only thing\nthat we really",
    "start": "678680",
    "end": "684510"
  },
  {
    "text": "modify in this function. ",
    "start": "684510",
    "end": "690069"
  },
  {
    "text": "Result in this case,\nis v1 or v2. But they're aliased.",
    "start": "690070",
    "end": "695810"
  },
  {
    "text": "So it's modifying the inputs\nand that's a violation. So the answer to this problem is\na total of six characters.",
    "start": "695810",
    "end": "702415"
  },
  {
    "text": " Some of you wrote entire\nredefinitions of the function",
    "start": "702415",
    "end": "711220"
  },
  {
    "text": "or, copied Ryan's code\nfrom the reviews. Perfectly acceptable, but\nway too much work.",
    "start": "711220",
    "end": "718300"
  },
  {
    "text": "Remember, programmers\nare lazy. That's all we were\nlooking for.",
    "start": "718300",
    "end": "723390"
  },
  {
    "text": " If you used the code from Ryan\nor, you had a different",
    "start": "723390",
    "end": "729070"
  },
  {
    "text": "implementation that met the\nspecifications, but was completely different you\ngot full credit.",
    "start": "729070",
    "end": "735060"
  },
  {
    "text": "You have a question? AUDIENCE: [INAUDIBLE] ",
    "start": "735060",
    "end": "744376"
  },
  {
    "text": ". I'm just trying to figure out\nwhat the distinction is [INAUDIBLE] do a dot copy. Why one is better\nthan the other.",
    "start": "744376",
    "end": "751831"
  },
  {
    "text": "PROFESSOR: Dot copy applies\nonly to dictionaries. AUDIENCE: Oh. PROFESSOR: So if we try and\ndo a dot copy on a list.",
    "start": "751831",
    "end": "767908"
  },
  {
    "text": "AUDIENCE: Oh, OK. PROFESSOR: Got it. I think we took one point\nfor that or something. We knew what your intent was but\nyou didn't have your IDE",
    "start": "767908",
    "end": "778440"
  },
  {
    "text": "there with you. ",
    "start": "778440",
    "end": "784200"
  },
  {
    "text": "Question (6) was another\nexercise in code reading.  The way that I would attack this\none is to figure out what",
    "start": "784200",
    "end": "793529"
  },
  {
    "text": "the two functions do first. Let's take the easier\nof the two, addUp.",
    "start": "793530",
    "end": "800330"
  },
  {
    "text": "Takes a dictionaries input and\nit has a variable result that it initially sets to 0.",
    "start": "800330",
    "end": "806610"
  },
  {
    "text": "And then it iterates through all\nthe keys in the dictionary and adds them to result.",
    "start": "806610",
    "end": "812310"
  },
  {
    "text": "Basically, its assuming that the\nvalues in the dictionary are some sort of number, and\nit's summing them up, and",
    "start": "812310",
    "end": "819660"
  },
  {
    "text": "returning the total. ",
    "start": "819660",
    "end": "825150"
  },
  {
    "text": "And, then, this f\nfunction here --",
    "start": "825150",
    "end": "830580"
  },
  {
    "text": "takes the dictionary it\nzeroes out any of the keys it might have.",
    "start": "830580",
    "end": "836620"
  },
  {
    "text": "And then it iterates through\nall the characters in s. If the character is already in\nthe dictionary then, it's",
    "start": "836620",
    "end": "843320"
  },
  {
    "text": "going to add 1 to it. So it's going to increment it. And if the character isn't in\nthe dictionary, then, it's",
    "start": "843320",
    "end": "848570"
  },
  {
    "text": "going to set up to 0. Then, it's going to return\nthe result in dictionary.",
    "start": "848570",
    "end": "855320"
  },
  {
    "text": "Knowing that, the function\nbecomes pretty easy. f of abbc for d1, which is\nan empty dictionary.",
    "start": "855320",
    "end": "864910"
  },
  {
    "text": "Just walking through it,\nstarting from this point, if",
    "start": "864910",
    "end": "871690"
  },
  {
    "text": "we iterate a, it's not going\nto be in the dictionary.",
    "start": "871690",
    "end": "877320"
  },
  {
    "text": "So we're going to\nset d of a to 0. Then, we move on to the\nnext character, b.",
    "start": "877320",
    "end": "884150"
  },
  {
    "text": "b is not in the dictionary. So d of b becomes 0. Now, we get one of\nthe second b.",
    "start": "884150",
    "end": "890152"
  },
  {
    "text": "b Is now in the dictionary. So we increment b. Now, d of b is 1.",
    "start": "890152",
    "end": "898019"
  },
  {
    "text": "Then, we move on to the final\ncharacter, c, again not the dictionary. So we set d of c to 0.",
    "start": "898020",
    "end": "903790"
  },
  {
    "text": "Then, we return the\ndictionary.  That means that in my\ndictionary, I have three keys",
    "start": "903790",
    "end": "911389"
  },
  {
    "text": "a, b, and c. And they have values 0,\n1, and 0 Respectively. ",
    "start": "911390",
    "end": "918840"
  },
  {
    "text": "So add up is going\nto return 1.",
    "start": "918840",
    "end": "924130"
  },
  {
    "text": "And same process for\nall of these. Question I have here is what\nhappens when Python",
    "start": "924130",
    "end": "929199"
  },
  {
    "text": "gets to that line?  Anyone. ",
    "start": "929200",
    "end": "936160"
  },
  {
    "text": "It's going to be an error. Why?  AUDIENCE: Result is\na local variable.",
    "start": "936160",
    "end": "941350"
  },
  {
    "text": "PROFESSOR: Right. Result is a local variable\nto addUP. ",
    "start": "941350",
    "end": "949779"
  },
  {
    "text": "There you go. ",
    "start": "949780",
    "end": "975080"
  },
  {
    "text": "So, again, the approach to this\nproblem is to figure out which each of the functions\ndo, and then right walk",
    "start": "975080",
    "end": "982290"
  },
  {
    "text": "through the code. Did anyone have trouble with\nthis or want me to actually step through it?",
    "start": "982290",
    "end": "988220"
  },
  {
    "start": "988220",
    "end": "994819"
  },
  {
    "text": "First, when f gets an integer,\nit just prints out the integer in binary.",
    "start": "994820",
    "end": "1001460"
  },
  {
    "text": " And then, this loop here,\nprints out the binary",
    "start": "1001460",
    "end": "1009899"
  },
  {
    "text": "representations from 0, 1, 2. ",
    "start": "1009900",
    "end": "1017760"
  },
  {
    "text": "Why is the first output\nnone in this case? ",
    "start": "1017760",
    "end": "1027189"
  },
  {
    "text": "Because in that first\niteration i is 0.",
    "start": "1027190",
    "end": "1034199"
  },
  {
    "text": "When f is called, n,\nis going to be 0. It's just going to\nreturn nothing. So it gives you nothing.",
    "start": "1034200",
    "end": "1039810"
  },
  {
    "text": " Now, the next question was under\nthe assumption that the",
    "start": "1039810",
    "end": "1055940"
  },
  {
    "text": "log base 2 is o of n, what is\nthe order of the function, f? ",
    "start": "1055940",
    "end": "1063180"
  },
  {
    "text": "And to figure this out, you know\nthat this function here",
    "start": "1063180",
    "end": "1069710"
  },
  {
    "text": "is o of n, because\nwe told you.  We know that that's one\nof the first things",
    "start": "1069710",
    "end": "1075590"
  },
  {
    "text": "that's called in f. So automatically, a run\ntime is o of n. ",
    "start": "1075590",
    "end": "1084299"
  },
  {
    "text": "Now, this loop here, iterates\nhow many times?",
    "start": "1084300",
    "end": "1092340"
  },
  {
    "text": "Log n. ",
    "start": "1092340",
    "end": "1097510"
  },
  {
    "text": "Well, log base 2n,\nto be explicit. For this function, which is\nthe dominating term here?",
    "start": "1097510",
    "end": "1105250"
  },
  {
    "text": " When we want to see o of n, it's\njust going to be that.",
    "start": "1105250",
    "end": "1112365"
  },
  {
    "text": " If you had o of n plus log n,\nI think we took a point.",
    "start": "1112365",
    "end": "1122670"
  },
  {
    "text": "Just because when we talk about\nworst case scenario, we're looking for what the\ndominating portion of this",
    "start": "1122670",
    "end": "1129140"
  },
  {
    "text": "function is. ",
    "start": "1129140",
    "end": "1135780"
  },
  {
    "text": "How does it do it? You want to walk through\nthe code now?",
    "start": "1135780",
    "end": "1142059"
  },
  {
    "text": "Alright. First thing it does, is it gets\nsomething it's calling",
    "start": "1142060",
    "end": "1147250"
  },
  {
    "text": "curve digit. All that is, is you take the log\nbase 2 of a number you're going to get the number of\nbinary digits in it.",
    "start": "1147250",
    "end": "1155190"
  },
  {
    "text": "Think of it as like if I have\nthree which binary is 1, 1. ",
    "start": "1155190",
    "end": "1163060"
  },
  {
    "text": "If I take log base2 of this,\nthen my curve digit is going to be 1.",
    "start": "1163060",
    "end": "1168320"
  },
  {
    "start": "1168320",
    "end": "1181899"
  },
  {
    "text": "I'm not sure, Python's\nbeen around too long. ",
    "start": "1181900",
    "end": "1194160"
  },
  {
    "text": "Well, 1.5 but if we truncate\nit to an int it's going to be 1. ",
    "start": "1194160",
    "end": "1200149"
  },
  {
    "text": "That's kind of like our\nposition marker in the binary number. Now, we're going to iterate\nwhile the current digit is",
    "start": "1200150",
    "end": "1206710"
  },
  {
    "text": "greater than or equal to 0. We're basically going to start\nhere and move down the line in",
    "start": "1206710",
    "end": "1214270"
  },
  {
    "text": "this direction.  All it does is says if my n mod\n2 -- so I'm checking to",
    "start": "1214270",
    "end": "1224930"
  },
  {
    "text": "see if it's odd or even -- if it's going to be 1 or 0. In this case, it's going to be\n1 to the power of the current",
    "start": "1224930",
    "end": "1230790"
  },
  {
    "text": "digit, which in this\ncase is 1. I'm sorry, misspoke.",
    "start": "1230790",
    "end": "1235930"
  },
  {
    "text": "n is 3, The remainder\nis going to be 1. In this case 1 to the power\nof 1 is going to be 1.",
    "start": "1235930",
    "end": "1246750"
  },
  {
    "text": "That's less than\nn, which it is. Then, my ans is going\nto be ans plus 1.",
    "start": "1246750",
    "end": "1252680"
  },
  {
    "text": "I'm going to add 1 to the\nstring and construct it. Then, I'm going to subtract\nwhatever this part is.",
    "start": "1252680",
    "end": "1262549"
  },
  {
    "text": "So 2 to the current digit,\nin this case to the 1.",
    "start": "1262550",
    "end": "1269910"
  },
  {
    "text": "It's just going to subtract\nthis off. Then, curve digit is going to be\ndecremented and moved here.",
    "start": "1269910",
    "end": "1276720"
  },
  {
    "text": " Then, in this iteration, curve\ndigit is going to be 0 and n",
    "start": "1276720",
    "end": "1285650"
  },
  {
    "text": "is going to be 1. So 1 mod 2 is going to be 1. ",
    "start": "1285650",
    "end": "1292500"
  },
  {
    "text": "Curve digit is 0. So that's going to\nbe 1 less than 1. ",
    "start": "1292500",
    "end": "1300190"
  },
  {
    "text": "It should print it out. I was not prepared for that. ",
    "start": "1300190",
    "end": "1311210"
  },
  {
    "text": "All right. So. the final question -- number (8). ",
    "start": "1311210",
    "end": "1319560"
  },
  {
    "text": "Big O notation, if we match\nit up, does anyone know what it is? AUDIENCE: Upper bound.",
    "start": "1319560",
    "end": "1325549"
  },
  {
    "text": "PROFESSOR: Yeah. A lot of you put the expected\nrunning time.",
    "start": "1325550",
    "end": "1331660"
  },
  {
    "text": "And the letters are messed\nup on this but-- a lot of you put the expected\nrunning time, but when we are talking about Big\nO, we're talking",
    "start": "1331660",
    "end": "1338500"
  },
  {
    "text": "about worst case scenario. So, that's the upper bound. There is an expected bound.",
    "start": "1338500",
    "end": "1345130"
  },
  {
    "text": "If you decide to do any more\nalgorithm analysis, you have Big O, expected, and little o.",
    "start": "1345130",
    "end": "1353013"
  },
  {
    "text": " If I plot the run time of\na given function, my",
    "start": "1353013",
    "end": "1359860"
  },
  {
    "text": "Big O might be this. The worst time, my expected,\nmight be like that. And my absolute best case\nmight be like that.",
    "start": "1359860",
    "end": "1369370"
  },
  {
    "text": "When we say they go that's\nwhat we're looking for. ",
    "start": "1369370",
    "end": "1374830"
  },
  {
    "text": "Alright Newton's method. What is that an example of? AUDIENCE: [INAUDIBLE]",
    "start": "1374830",
    "end": "1381470"
  },
  {
    "text": "AUDIENCE: Yeah. These don't look right. ",
    "start": "1381470",
    "end": "1388020"
  },
  {
    "text": "You know what, I'm sorry. This is a different version\nof the quiz. ",
    "start": "1388020",
    "end": "1395040"
  },
  {
    "text": "Newton's method, that's\nan approximation. Then the last one was recursion\non your test.",
    "start": "1395040",
    "end": "1401170"
  },
  {
    "text": "The answer we were looking\nfor was induction. ",
    "start": "1401170",
    "end": "1407610"
  },
  {
    "text": "That's that.  Anyone have any actual\nquestions.",
    "start": "1407610",
    "end": "1412690"
  },
  {
    "text": " AUDIENCE: Go back\nto number (4).",
    "start": "1412690",
    "end": "1417980"
  },
  {
    "text": "PROFESSOR: Number (4). AUDIENCE: Yeah. [INAUDIBLE] ",
    "start": "1417980",
    "end": "1432820"
  },
  {
    "text": "PROFESSOR: What was the part\nthat you did not understand with number (4)? AUDIENCE: I thought it was\nconfusing how to join the",
    "start": "1432820",
    "end": "1441146"
  },
  {
    "text": "[INAUDIBLE] together or how to\ngo through them to see if you",
    "start": "1441146",
    "end": "1447346"
  },
  {
    "text": "know exactly [INAUDIBLE].  PROFESSOR: Well, that's kind\nof the trick we have here.",
    "start": "1447346",
    "end": "1455880"
  },
  {
    "text": "We know we have a list of words\nso to iterate through the words is just a FOR loop. So that's what that for\nword in wordList does.",
    "start": "1455880",
    "end": "1464720"
  },
  {
    "text": "To do the thing where you match\nthe letters one to one,",
    "start": "1464720",
    "end": "1469980"
  },
  {
    "text": "what we implemented here is, we\nfirst take lStr and we sort it, sort the characters\nin lStr.",
    "start": "1469980",
    "end": "1478309"
  },
  {
    "text": "Then, what we do for wordList is\nfor each word, we sort the",
    "start": "1478310",
    "end": "1486210"
  },
  {
    "text": "characters in that word. And what that does is, it allows\nus to just directly compare the two strings.",
    "start": "1486210",
    "end": "1492700"
  },
  {
    "text": "And if they're equal, then we've\nmet the criteria for adding it into the wordList,\nOr the return wordList.",
    "start": "1492700",
    "end": "1499015"
  },
  {
    "start": "1499015",
    "end": "1505700"
  },
  {
    "text": "That's the quiz. If you don't have it, you\ncan come pick it up. AUDIENCE: Sorry, I was just\ngoing to ask really quick.",
    "start": "1505700",
    "end": "1513389"
  },
  {
    "text": "If you're getting a [INAUDIBLE]\nstring, you're concatenating [INAUDIBLE]\nstrings, the empty string, why",
    "start": "1513389",
    "end": "1521326"
  },
  {
    "text": "can't you just set it equal\nto the [INAUDIBLE] string? Is there something about the\nway that operates that you couldn't do it?",
    "start": "1521326",
    "end": "1526659"
  },
  {
    "text": "PROFESSOR: Yeah, so if I say my\nstring is 'abcdef,' and I just say sorted(s), this\nreturns a list.",
    "start": "1526660",
    "end": "1537420"
  },
  {
    "text": "What I'm doing with join\nis I'm just converting",
    "start": "1537420",
    "end": "1545440"
  },
  {
    "text": "it back to a string. Got it? ",
    "start": "1545440",
    "end": "1554830"
  },
  {
    "text": "OK, so on to object oriented\nprogramming.",
    "start": "1554830",
    "end": "1560120"
  },
  {
    "text": "So what can someone tell\nme about classes?",
    "start": "1560120",
    "end": "1565755"
  },
  {
    "text": " What do they allow you to do? ",
    "start": "1565755",
    "end": "1573341"
  },
  {
    "text": "AUDIENCE: Allow you to\ndefine a custom type. PROFESSOR: Yes. So one thing they allow you to\ndo is to define a custom type.",
    "start": "1573341",
    "end": "1579380"
  },
  {
    "start": "1579380",
    "end": "1593000"
  },
  {
    "text": "Now, when you define a class,\nyou can group your methods and",
    "start": "1593000",
    "end": "1603110"
  },
  {
    "text": "data together with something\ncalled encapsulation. So first stuff, we've actually\nalready been using classes.",
    "start": "1603110",
    "end": "1614200"
  },
  {
    "text": "We just didn't tell\nyou, right? So ints, floats, dicts,\net cetera, these are",
    "start": "1614200",
    "end": "1623440"
  },
  {
    "text": "all types of classes.  And each of these, we've\nalready seen them, have",
    "start": "1623440",
    "end": "1632809"
  },
  {
    "text": "something called methods\nassociated with them, right? Methods are basically functions\nthat are associated",
    "start": "1632810",
    "end": "1640220"
  },
  {
    "text": "with a given class. So for example, if I have the\nstr class, which everyone's",
    "start": "1640220",
    "end": "1647840"
  },
  {
    "text": "seen, then it has, say,\na method, dot lower.",
    "start": "1647840",
    "end": "1653590"
  },
  {
    "text": "So if I have s equal-- well, let me write it\nup here on the code.",
    "start": "1653590",
    "end": "1659889"
  },
  {
    "text": "If I say something like s equal\n'abcdef,' I can call the",
    "start": "1659890",
    "end": "1666160"
  },
  {
    "text": "method, lower. So we've actually already been\ndoing object oriented programming. You just didn't know it.",
    "start": "1666160",
    "end": "1671510"
  },
  {
    "text": " Along with that, classes\nhave methods.",
    "start": "1671510",
    "end": "1677659"
  },
  {
    "text": "And they also have\nsomething else.  Someone help me?",
    "start": "1677660",
    "end": "1684660"
  },
  {
    "text": "What? AUDIENCE: Parameters? Variables? PROFESSOR: I'm looking\nfor something--",
    "start": "1684660",
    "end": "1690550"
  },
  {
    "text": "terminology-wise, attributes. So they're a way of grouping\nmethods and attributes.",
    "start": "1690550",
    "end": "1695873"
  },
  {
    "text": " So when we talk about\nattributes, we're talking",
    "start": "1695873",
    "end": "1704250"
  },
  {
    "text": "about things that pertain to a\nspecific instance of a class. So let's say that I have\na real world example.",
    "start": "1704250",
    "end": "1717100"
  },
  {
    "text": "I have a person class. We've already kind\nof seen this guy. ",
    "start": "1717100",
    "end": "1724809"
  },
  {
    "text": "A person has multiple\ninstances. So there's an instance\nof Mitch.",
    "start": "1724810",
    "end": "1732390"
  },
  {
    "text": "There's an instance of Garthi. ",
    "start": "1732390",
    "end": "1739130"
  },
  {
    "text": "There's an instance\nof Phillipe.",
    "start": "1739130",
    "end": "1744260"
  },
  {
    "text": "We're all people,\nmostly human. And we all have attributes.",
    "start": "1744260",
    "end": "1750390"
  },
  {
    "text": "So we all have an age,\nwhen we were born.",
    "start": "1750390",
    "end": "1755780"
  },
  {
    "text": "We all have a name. Some of us have hair and other\nattributes, right?",
    "start": "1755780",
    "end": "1762570"
  },
  {
    "text": " We also have actions\nthat we can take. So I can talk.",
    "start": "1762570",
    "end": "1768830"
  },
  {
    "text": "And I could walk. I can talk to you, you, you,\nyou, you, and you.",
    "start": "1768830",
    "end": "1774340"
  },
  {
    "text": "So a method that I could define\nfor a person might be talk to someone.",
    "start": "1774340",
    "end": "1780350"
  },
  {
    "text": "So that's one way of thinking\nabout objects. So object-oriented programming\nalso gives us something called",
    "start": "1780350",
    "end": "1790260"
  },
  {
    "text": "inheritance, right? So I could think of-- if I'm going along with\nmy person analogy--",
    "start": "1790260",
    "end": "1796900"
  },
  {
    "text": "I could think of sub-classing\nperson if I'm willing to draw",
    "start": "1796900",
    "end": "1807200"
  },
  {
    "text": "hard binary on the genders.  You have males and you\nhave females, right?",
    "start": "1807200",
    "end": "1815270"
  },
  {
    "text": "And in this column, I\nmight have Tracy.  I'm just picking on people\nwho come to office hours.",
    "start": "1815270",
    "end": "1822190"
  },
  {
    "text": " And then, Garthi, et cetera.",
    "start": "1822190",
    "end": "1831000"
  },
  {
    "text": "Now, the inheritance portion\nof it is important because",
    "start": "1831000",
    "end": "1837080"
  },
  {
    "text": "I've already said that one of\nmy methods on a person is I can talk to people. I can talk to other people.",
    "start": "1837080",
    "end": "1843040"
  },
  {
    "text": "It shouldn't matter if I'm\ntalking to Garthi, as a male, versus Tracy, as a female. I talk to people basically\nthe same.",
    "start": "1843040",
    "end": "1850000"
  },
  {
    "text": "So that gets into something\ncalled polymorphism, which is we treat objects with a common\nsuper class the same as their",
    "start": "1850000",
    "end": "1861150"
  },
  {
    "text": "sub-classes. So as another example, let's\nsay that I have dogs and--",
    "start": "1861150",
    "end": "1874260"
  },
  {
    "text": "what's another canine, foxes? I'm not going to necessarily\ntalk to canines the way that I",
    "start": "1874260",
    "end": "1880440"
  },
  {
    "text": "talk to a person. So they would exist with a\ndifferent super-class. And then, we could\nall be animals.",
    "start": "1880440",
    "end": "1886790"
  },
  {
    "text": " So really, what object-oriented\nprogramming",
    "start": "1886790",
    "end": "1893130"
  },
  {
    "text": "gives you is a different way of\nthinking about how you're modeling your world.",
    "start": "1893130",
    "end": "1898400"
  },
  {
    "text": "And what I want to do is now,\ninstead of just talking about these abstract things,\nwalk through",
    "start": "1898400",
    "end": "1905530"
  },
  {
    "text": "some concrete examples.  So the first thing that I want\nto illustrate is let's say",
    "start": "1905530",
    "end": "1912029"
  },
  {
    "text": "that we want to create\na person. But we don't want to use object\noriented programming. Or, we don't want\nto use classes.",
    "start": "1912030",
    "end": "1919080"
  },
  {
    "text": "Professor Guttag will get angry\nat me if I say we're not using object oriented\nprogramming. So let's say I have a function,\nmakePerson.",
    "start": "1919080",
    "end": "1928480"
  },
  {
    "text": "And I'm going to represent a\nperson as a dictionary that has name, age, height,\nweight as keys.",
    "start": "1928480",
    "end": "1937590"
  },
  {
    "text": " All makePerson does is it\ntakes these things as",
    "start": "1937590",
    "end": "1943779"
  },
  {
    "text": "parameters, makes a dictionary\nwith them as values, and then returns a dictionary.",
    "start": "1943780",
    "end": "1949800"
  },
  {
    "text": "Then, I have a bunch of\nhelper functions, like get_name of person. All that does is\nit just returns",
    "start": "1949800",
    "end": "1955820"
  },
  {
    "text": "whatever's in the name key. I can also set the name in case\na person decides they",
    "start": "1955820",
    "end": "1962130"
  },
  {
    "text": "don't want to be\nknown as Mitch. They want to be known\nas Mitchell or something like that.",
    "start": "1962130",
    "end": "1967560"
  },
  {
    "text": " So I have a bunch of these\ngetter and setter function. These are called accessor and\nmutator functions, whatever",
    "start": "1967560",
    "end": "1976600"
  },
  {
    "text": "terminology you want to use.  I can also define another\nfunction that will do",
    "start": "1976600",
    "end": "1984130"
  },
  {
    "text": "something like print\nout the person. So in this case, I'm just going\nto print out name, age,",
    "start": "1984130",
    "end": "1990450"
  },
  {
    "text": "height, and weight. And to see this in action, I'm\ngoing to make a person, Mitch,",
    "start": "1990450",
    "end": "1996860"
  },
  {
    "text": "32 70, 200. And then, Serena, 25, 65, 130. I don't know if these are\nactually correct.",
    "start": "1996860",
    "end": "2004060"
  },
  {
    "text": "So don't quote me on it.  I have a syntax error.",
    "start": "2004060",
    "end": "2009730"
  },
  {
    "start": "2009730",
    "end": "2014919"
  },
  {
    "text": "So if I run this, then all it's\ngoing to do is just print out what I'd expect\nit to print out.",
    "start": "2014920",
    "end": "2020870"
  },
  {
    "text": " I can also set my age.",
    "start": "2020870",
    "end": "2027370"
  },
  {
    "text": "So I can go back in time to\n25, which is a great age.",
    "start": "2027370",
    "end": "2033860"
  },
  {
    "text": "And now, I'm 25.  Now, this is fine if you just\nwant to do simple things.",
    "start": "2033860",
    "end": "2043250"
  },
  {
    "text": "But the reason why we kind\nof like object oriented programming is because we\nrun into difficulties.",
    "start": "2043250",
    "end": "2052669"
  },
  {
    "text": "So let's say that I print\nout the type of Mitch. It says I'm a dict.",
    "start": "2052670",
    "end": "2058750"
  },
  {
    "text": " But it doesn't give me\nany more information.",
    "start": "2058750",
    "end": "2065899"
  },
  {
    "text": "So that means that I could\ndefine any random old dict and pass it to some of my functions\nthat I've defined to",
    "start": "2065900",
    "end": "2073129"
  },
  {
    "text": "work on people. And it will probably\ngive me an error. ",
    "start": "2073130",
    "end": "2080230"
  },
  {
    "text": "It also makes other operations\nkind of non-intuitive.",
    "start": "2080230",
    "end": "2086080"
  },
  {
    "text": "So let's say that I want\nto figure out if two people are equal.",
    "start": "2086080",
    "end": "2091408"
  },
  {
    "text": "Well, I could do that by\ndefining a function, people_equal, or equal_people,\nand passing in it a person1",
    "start": "2091409",
    "end": "2099990"
  },
  {
    "text": "and person2. And for our intents and\npurposes, it's just going to",
    "start": "2099990",
    "end": "2106500"
  },
  {
    "text": "be if they have the same name,\nthey're the same person. So this is going to, of course,\ndo what we expect it",
    "start": "2106500",
    "end": "2112922"
  },
  {
    "text": "to do and return false, right? Because Serena and Mitch\naren't the same person. ",
    "start": "2112922",
    "end": "2119500"
  },
  {
    "text": "But it's kind of awkward. And if we do things using\nclasses, it becomes a little",
    "start": "2119500",
    "end": "2128310"
  },
  {
    "text": "bit more elegant. And you get a lot more power.",
    "start": "2128310",
    "end": "2133710"
  },
  {
    "text": "So let's say I do the exact\nsame thing with a class. ",
    "start": "2133710",
    "end": "2141010"
  },
  {
    "text": "So I have the class keyword. I have the name of my object,\nor my class, my new type.",
    "start": "2141010",
    "end": "2147460"
  },
  {
    "text": "And then, I have this\nthing called init. All init does is it says, when\nI get a new person object,",
    "start": "2147460",
    "end": "2157599"
  },
  {
    "text": "Python automatically calls init\nwith whatever parameters are specified and tells the\nobject to make attributes or",
    "start": "2157600",
    "end": "2167580"
  },
  {
    "text": "to set itself up. So in this case-- ",
    "start": "2167580",
    "end": "2178000"
  },
  {
    "text": "need a bigger screen-- I'm making a Mitch person,\nall right?",
    "start": "2178000",
    "end": "2184130"
  },
  {
    "text": "And the way that you make a new\nobject, or an instance of person, is you have\nthe class name.",
    "start": "2184130",
    "end": "2189789"
  },
  {
    "text": "And then, you pass it whatever\nparameters are specified in init. ",
    "start": "2189790",
    "end": "2196490"
  },
  {
    "text": "Now, behind the scenes, Python\nwill create a chunk of memory.",
    "start": "2196490",
    "end": "2203280"
  },
  {
    "text": "And then, it'll call\nthis init function. And it'll pass a reference\nto that chunk of memory.",
    "start": "2203280",
    "end": "2211220"
  },
  {
    "text": "So visually, let's say this\nis your magical memory.",
    "start": "2211220",
    "end": "2243960"
  },
  {
    "text": "Python sees us call\nperson, goes in, grabs a chunk of memory--",
    "start": "2243960",
    "end": "2249180"
  },
  {
    "text": "this marker sucks--  grabs a chunk of memory and\nsays, this chunk of memory is",
    "start": "2249180",
    "end": "2257190"
  },
  {
    "text": "of type person. ",
    "start": "2257190",
    "end": "2262700"
  },
  {
    "text": "Then, it calls init. init says, basically, Mitch\nis a reference to",
    "start": "2262700",
    "end": "2280950"
  },
  {
    "text": "this chunk of memory. This is a self parameter. And then, it has the\nother parameters.",
    "start": "2280950",
    "end": "2286290"
  },
  {
    "start": "2286290",
    "end": "2297350"
  },
  {
    "text": "And then, in the init method,\nall we're doing is we're creating new attributes on\nthis chunk of memory.",
    "start": "2297350",
    "end": "2306670"
  },
  {
    "text": "So we're going to have\nan attribute name. We're going to have an attribute\nage, height, weight.",
    "start": "2306670",
    "end": "2314560"
  },
  {
    "start": "2314560",
    "end": "2325350"
  },
  {
    "text": "And then, we have a bunch of\naccessors or getters, mutators or setters.",
    "start": "2325350",
    "end": "2331370"
  },
  {
    "text": "Same exact thing as the\nfunctions that I showed, that we had when we were trying to\ndo this without classes. ",
    "start": "2331370",
    "end": "2339850"
  },
  {
    "text": "The difference is\nthat these are lexically scoped to person. They are methods for an instance\nof type person.",
    "start": "2339850",
    "end": "2350730"
  },
  {
    "text": "Whereas before, they were just\nfunctions that worked on something we called a person.",
    "start": "2350730",
    "end": "2356640"
  },
  {
    "text": "But a person was actually\na dict. ",
    "start": "2356640",
    "end": "2363079"
  },
  {
    "text": "So let me just run this.",
    "start": "2363080",
    "end": "2369070"
  },
  {
    "text": "So if I run this, I'm just going\nto create a person, a Mitch person and a\nSarina person.",
    "start": "2369070",
    "end": "2375244"
  },
  {
    "text": "I'm going to print out Mitch. It's the same thing that\nI had before, right?",
    "start": "2375245",
    "end": "2381280"
  },
  {
    "text": "Except I'm using a class. ",
    "start": "2381280",
    "end": "2387090"
  },
  {
    "text": "Now, if I want to use one of\nthe accessors, so I want to get younger again, I can just\ntake my object, Mitch, and I",
    "start": "2387090",
    "end": "2397750"
  },
  {
    "text": "can call the set_age method\nand pass it in my new age. ",
    "start": "2397750",
    "end": "2405279"
  },
  {
    "text": "And I've lost seven years.  All right, now so far, this is\njust a different way of doing",
    "start": "2405280",
    "end": "2416370"
  },
  {
    "text": "the same thing, right? But if we look at the type\nof Mitch, I'm a person.",
    "start": "2416370",
    "end": "2423250"
  },
  {
    "text": " So there's now some extra\ninformation that we didn't",
    "start": "2423250",
    "end": "2431500"
  },
  {
    "text": "have before when we were using\na dict to represent a person. Before, it could've\nbeen any dict.",
    "start": "2431500",
    "end": "2438260"
  },
  {
    "text": "We didn't know that it\nrepresented a person. The only reason that it\nrepresented a person before we",
    "start": "2438260",
    "end": "2443530"
  },
  {
    "text": "used a class was because we\nhad set certain keys to",
    "start": "2443530",
    "end": "2449850"
  },
  {
    "text": "certain values. But other than that,\nit was just a dict. Here, this is marked\nas being a person.",
    "start": "2449850",
    "end": "2458770"
  },
  {
    "text": "And that also gives us some\nadditional kind of power, which we'll see in\na little bit.",
    "start": "2458770",
    "end": "2465430"
  },
  {
    "text": "So now, I've done something\nsneaky.",
    "start": "2465430",
    "end": "2470670"
  },
  {
    "text": "And I've created a way of\ncomparing Mitch and Sarina.",
    "start": "2470670",
    "end": "2476780"
  },
  {
    "text": "Before I had that function,\npeople_equal. Now, I can use the double\nequal operator, which is",
    "start": "2476780",
    "end": "2482730"
  },
  {
    "text": "something that we're used to. We use it with all\nthe other types. Why don't we use\nit with people? ",
    "start": "2482730",
    "end": "2490109"
  },
  {
    "text": "The way that we define that is\nthat on this person class, I",
    "start": "2490110",
    "end": "2496880"
  },
  {
    "text": "have to find this function\nunderbar, underbar, EQ, underbar, underbar, right?",
    "start": "2496880",
    "end": "2505089"
  },
  {
    "text": "The underbar methods-- and underbar, underbar,\ninit is one of them-- have a special significance\nin Python.",
    "start": "2505090",
    "end": "2513630"
  },
  {
    "text": "So in this case, the underbar,\nunderbar, EQ, underbar, underbar says that if I have an\nobject niche, and I have a",
    "start": "2513630",
    "end": "2526599"
  },
  {
    "text": "double equal, and I have another\nobject, Serena, it's going to look in the\nMitch object.",
    "start": "2526600",
    "end": "2532840"
  },
  {
    "text": "And it's going to say, does\nit have an EQ method?",
    "start": "2532840",
    "end": "2538310"
  },
  {
    "text": "Does it have this method name? In this case, it does. So it says, OK, this object is\ncapable of comparing itself to",
    "start": "2538310",
    "end": "2547490"
  },
  {
    "text": "another object for equality. And so it calls this method. And self, in this case, is the\nMitch object, is this guy.",
    "start": "2547490",
    "end": "2557780"
  },
  {
    "text": "And the other is the\nSerena object. Sorry? AUDIENCE: So when it looks for\nthe EQ, does it look for EQ,",
    "start": "2557780",
    "end": "2566726"
  },
  {
    "text": "or does it look for something\nthat has a double equal sign, and then go off from there?",
    "start": "2566726",
    "end": "2572630"
  },
  {
    "text": "Is the underbar, underbar,\nEQ, underbar, underbar -- is it defined for all?",
    "start": "2572630",
    "end": "2578800"
  },
  {
    "text": "PROFESSOR: It's defined\nfor all persons. AUDIENCE: All persons. PROFESSOR: Yeah. ",
    "start": "2578800",
    "end": "2584350"
  },
  {
    "text": "OK, I see what you're saying. Is it defined for objects\nother than persons, like all objects? AUDIENCE: Yeah. PROFESSOR: Well, we can\ncheck that out.",
    "start": "2584350",
    "end": "2591025"
  },
  {
    "text": " You notice that person\ninherits from object.",
    "start": "2591025",
    "end": "2598230"
  },
  {
    "text": "This is where all classes\nthat you define should inherit from. And so object, like any other\ntype-- remember I showed the",
    "start": "2598230",
    "end": "2605950"
  },
  {
    "text": "dir command before? If you do this, you can\nsee everything that's",
    "start": "2605950",
    "end": "2611060"
  },
  {
    "text": "inherent to an object. So in this case, it\ndoesn't have the",
    "start": "2611060",
    "end": "2616099"
  },
  {
    "text": "underbar, underbar, EQ. So it might be something special\nthat Python does.",
    "start": "2616100",
    "end": "2625640"
  },
  {
    "text": "So this is where I'd actually\nhave to look it up to answer your question. So I'm going to punt on that.",
    "start": "2625640",
    "end": "2633580"
  },
  {
    "text": "AUDIENCE: So it knows somehow\nto look for EQ specifically? PROFESSOR: Yeah. When it sees the double equals\nsign, it knows to look for EQ.",
    "start": "2633580",
    "end": "2643280"
  },
  {
    "text": "The double underbars\nsignify a magical operator or magical method.",
    "start": "2643280",
    "end": "2649862"
  },
  {
    "text": "AUDIENCE: So when you're\ncalling EQ, you're not formally giving it two formal\nparameters in the parentheses.",
    "start": "2649862",
    "end": "2658010"
  },
  {
    "text": "So it's presumably taking the\nfirst name before the equals and the second name before\nthe equals-- PROFESSOR: We'll\nget into that. ",
    "start": "2658010",
    "end": "2665160"
  },
  {
    "text": "So the question is, are we\nactually explicitly passing two formal parameters to it?",
    "start": "2665160",
    "end": "2671300"
  },
  {
    "text": "And the answer is yes and no. This is a bit of syntactic sugar\nfor Python, which means",
    "start": "2671300",
    "end": "2680620"
  },
  {
    "text": "that it's a nicer way\nof writing things. But we could do something\nlike this.",
    "start": "2680620",
    "end": "2685660"
  },
  {
    "start": "2685660",
    "end": "2697960"
  },
  {
    "text": "Which is totally awkward, but\nin actuality, this is what Python does in the background.",
    "start": "2697960",
    "end": "2704800"
  },
  {
    "text": "It does this sort of mangling. And I was actually going to\nshow that with something a",
    "start": "2704800",
    "end": "2710400"
  },
  {
    "text": "little bit easier\nto comprehend. So I have a method called\nget_age, an accessor, right?",
    "start": "2710400",
    "end": "2717430"
  },
  {
    "text": "And usually, you call a method\nby having a reference to the object, dot, and then whatever\nmethod name--",
    "start": "2717430",
    "end": "2726400"
  },
  {
    "text": "in this case, get_age. You can also write it like this,\nwhich is, if you think",
    "start": "2726400",
    "end": "2732040"
  },
  {
    "text": "about it, exactly what happened\nwith the double equal operator, right? Python took your nice,\nintuitive syntax--",
    "start": "2732040",
    "end": "2739200"
  },
  {
    "text": "Mitch double equal Sarina-- and totally mangled it and made\nit something that was",
    "start": "2739200",
    "end": "2745380"
  },
  {
    "text": "completely ugly. And this is how Python would\nactually see it.",
    "start": "2745380",
    "end": "2750400"
  },
  {
    "text": "So that's why, when you\nwrite these methods, you have a self parameter.",
    "start": "2750400",
    "end": "2755600"
  },
  {
    "text": "This self parameter\nis like this guy.",
    "start": "2755600",
    "end": "2760610"
  },
  {
    "text": "Python says, ooh, I have\nan object reference. And they're calling\na method, get_age? Do I have a get_age method?",
    "start": "2760610",
    "end": "2766910"
  },
  {
    "text": "Yes, I do. Here it is. OK, now I'm going to take this\nand make it look ugly.",
    "start": "2766910",
    "end": "2772650"
  },
  {
    "text": "It's a person object. So I'm going to call\nperson.get_age, and I'm going to pass it Mitch, the reference\nto the object.",
    "start": "2772650",
    "end": "2779859"
  },
  {
    "text": "And that becomes a\nself parameter. So that's where the self\nparameter comes from. ",
    "start": "2779860",
    "end": "2786109"
  },
  {
    "text": "There's a little bit of\nmangling that goes on. And it's partially\nhidden from you. In other languages, it's\ncompletely hidden from you.",
    "start": "2786110",
    "end": "2792770"
  },
  {
    "text": "But in Python, you see\nsome of the ugliness. AUDIENCE: So in this case, how\ndid it know I was talking",
    "start": "2792770",
    "end": "2799689"
  },
  {
    "text": "about Mitch self and not--",
    "start": "2799689",
    "end": "2804696"
  },
  {
    "text": "PROFESSOR: Serena? AUDIENCE: Yeah. PROFESSOR: So the question was\nhow did Python know that the parameter was Mitch.",
    "start": "2804696",
    "end": "2811970"
  },
  {
    "text": "Because-- let me comment this out\nso we explicitly what I'm talking about.",
    "start": "2811970",
    "end": "2817900"
  },
  {
    "text": "So Mitch is a reference to a\nperson that represents me on a",
    "start": "2817900",
    "end": "2825680"
  },
  {
    "text": "computer, right? Python knows that this object\nis of type person because it",
    "start": "2825680",
    "end": "2832690"
  },
  {
    "text": "chunked that memory and made\nit of type person. So when it sees this reference\nand it knows it's of type",
    "start": "2832690",
    "end": "2838350"
  },
  {
    "text": "person and it sees this dot\nand get_age, what that automatically tells Python is,\nhey, this instance of person",
    "start": "2838350",
    "end": "2848200"
  },
  {
    "text": "is trying to call a method. Does this class have\na method, get_age?",
    "start": "2848200",
    "end": "2853420"
  },
  {
    "text": "In this case, it does. So python says, oh, it does. So I'm going to call this\nmethod, person.get_age, and",
    "start": "2853420",
    "end": "2864690"
  },
  {
    "text": "pass it Mitch as a\nself parameter. ",
    "start": "2864690",
    "end": "2874420"
  },
  {
    "text": "Does it make sense\nin some way? AUDIENCE: So it basically allows\nyou to put in the name",
    "start": "2874420",
    "end": "2882490"
  },
  {
    "text": "of the person instead of\nthe attribute, instead of using the type? PROFESSOR: Yeah, so\nyou could do this.",
    "start": "2882490",
    "end": "2889165"
  },
  {
    "text": " I don't recommend that\nyou do this.",
    "start": "2889165",
    "end": "2895300"
  },
  {
    "text": "I'm trying to illustrate\nwhere the self parameter is coming from. ",
    "start": "2895300",
    "end": "2902140"
  },
  {
    "text": "It's much cleaner to write-- ",
    "start": "2902140",
    "end": "2909490"
  },
  {
    "text": "than it is to write this. Fewer keystrokes, too. Remember, programmers\nare lazy.",
    "start": "2909490",
    "end": "2915350"
  },
  {
    "text": " But it'll do the same\nexact thing. ",
    "start": "2915350",
    "end": "2923359"
  },
  {
    "text": "So can I move on? ",
    "start": "2923360",
    "end": "2928390"
  },
  {
    "text": "Wow, we've only got three\nminutes left.  I don't think I'm going to be\nable to get through this.",
    "start": "2928390",
    "end": "2936300"
  },
  {
    "text": "So my intent with this code was\nto show inheritance with shapes, because that's\nthe classic.",
    "start": "2936300",
    "end": "2944380"
  },
  {
    "text": "I'm going to define a base\nclass called shape. And I'm going to give it some\nmethods, area, perimeter, EQ,",
    "start": "2944380",
    "end": "2951630"
  },
  {
    "text": "and less than. For my purposes, shapes are\nequal if they have the same area, and they're less than\nif the area's less than.",
    "start": "2951630",
    "end": "2961250"
  },
  {
    "text": "So when we're doing logical\ncomparisons, we're comparing areas.",
    "start": "2961250",
    "end": "2966530"
  },
  {
    "text": "So now, I'm going to define\na class, rectangle. It inherits from shape.",
    "start": "2966530",
    "end": "2972210"
  },
  {
    "text": "It's got two sides, or the\nlengths of two sides. So the area's pretty easy,\njust a multiplication.",
    "start": "2972210",
    "end": "2980440"
  },
  {
    "text": "And the parameter is just the\nsum of the four sides. ",
    "start": "2980440",
    "end": "2985650"
  },
  {
    "text": "And then, I'm going to define\nanother shape, circle. ",
    "start": "2985650",
    "end": "2990869"
  },
  {
    "text": "It's got a radius. And it does the area and the\nperimeter in the way that you expect a circle to do the\narea and the perimeter.",
    "start": "2990870",
    "end": "2997520"
  },
  {
    "text": " And then, I've got square,\nwhich is a sub-class of",
    "start": "2997520",
    "end": "3003160"
  },
  {
    "text": "rectangle, because a square is\njust a special case, right?",
    "start": "3003160",
    "end": "3009210"
  },
  {
    "text": "And all I'm going to do is when\nI initialize my square, I'm just going to call the\nrectangle's init method, and",
    "start": "3009210",
    "end": "3019310"
  },
  {
    "text": "give it the same size twice. ",
    "start": "3019310",
    "end": "3025539"
  },
  {
    "text": "So what this gives us is some\ninheritance, some nice",
    "start": "3025540",
    "end": "3031480"
  },
  {
    "text": "properties. So first off, when Python\ngets to this line, what's going to happen?",
    "start": "3031480",
    "end": "3036730"
  },
  {
    "text": " s is of type shape, right?",
    "start": "3036730",
    "end": "3042300"
  },
  {
    "text": "So what is the method\nfor shape? ",
    "start": "3042300",
    "end": "3049246"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: What's that? AUDIENCE: What is the\nmethod for shape?",
    "start": "3049246",
    "end": "3055320"
  },
  {
    "text": "PROFESSOR: What does the area\nmethod for shape do? Because that's what\nI'm calling here. AUDIENCE: It's going\nto throw an error.",
    "start": "3055320",
    "end": "3061526"
  },
  {
    "text": "PROFESSOR: So yeah, voila. And the reason is that we\nhaven't implemented it here.",
    "start": "3061526",
    "end": "3067780"
  },
  {
    "text": "This method is a placeholder. It's saying that if I have\na shape, it should have an area method.",
    "start": "3067780",
    "end": "3075320"
  },
  {
    "text": "And this is something that you\nshould see on your problem set when you're doing PS5\nwith trigger.",
    "start": "3075320",
    "end": "3083109"
  },
  {
    "text": "AUDIENCE: So it doesn't do\nanything on its own. You can ignore it and\njust put [INAUDIBLE]",
    "start": "3083110",
    "end": "3089970"
  },
  {
    "text": "for a circle. PROFESSOR: Yeah. AUDIENCE: It just reminds you? PROFESSOR: It reminds\nyou, yeah.",
    "start": "3089970",
    "end": "3095910"
  },
  {
    "text": "AUDIENCE: It's like\ncommenting. PROFESSOR: What's that? AUDIENCE: So it's kind\nof like commenting? PROFESSOR: It's like commenting,\nexcept that you",
    "start": "3095910",
    "end": "3101119"
  },
  {
    "text": "get a little bit nicer\nerror checking. So it is a way of explicitly\nsaying that if I have",
    "start": "3101120",
    "end": "3110200"
  },
  {
    "text": "something that is sub-classed\nfrom shape, then I can be guaranteed that there\nis an area method. ",
    "start": "3110200",
    "end": "3119160"
  },
  {
    "text": "But if I sub-class off it-- so rectangle, square, and\ncircle-- they all have concrete implementation\nfor areas.",
    "start": "3119160",
    "end": "3125880"
  },
  {
    "text": "So this is all going\nto run fine. And then, I have my equality\noperator and",
    "start": "3125880",
    "end": "3132690"
  },
  {
    "text": "my less than operator. Those will run fine.  So let me--",
    "start": "3132690",
    "end": "3140664"
  },
  {
    "start": "3140665",
    "end": "3148910"
  },
  {
    "text": "all right. The reason why this is useful,\nand the big idea, is if I have",
    "start": "3148910",
    "end": "3156880"
  },
  {
    "text": "a list of shapes-- circle, square, and\na rectangle-- ",
    "start": "3156880",
    "end": "3164820"
  },
  {
    "text": "then I can treat them all\nexactly the same because they all have an area method, which\nis defined on a shape.",
    "start": "3164820",
    "end": "3170640"
  },
  {
    "text": "They all sub-class from shape. So it'll print all\nthose areas.",
    "start": "3170640",
    "end": "3179960"
  },
  {
    "text": "And then, if I wanted\nto, I could even-- because I have a list, I can\ncall the sort method.",
    "start": "3179960",
    "end": "3187335"
  },
  {
    "text": "And because I've defined the\nless than operator, it'll sort the shapes in descending\norder by area.",
    "start": "3187335",
    "end": "3194820"
  },
  {
    "text": "And that's what this last bit of\ncode does unless I comment",
    "start": "3194820",
    "end": "3203750"
  },
  {
    "text": "out my assignment. There we go. So I know I rushed\nthrough the shape",
    "start": "3203750",
    "end": "3210660"
  },
  {
    "text": "implementation, and I'm sorry. But I'm actually out of time. ",
    "start": "3210660",
    "end": "3217898"
  }
]