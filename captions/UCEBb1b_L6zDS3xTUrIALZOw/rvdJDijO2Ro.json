[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6850"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6850",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13320",
    "end": "22300"
  },
  {
    "text": "PROFESSOR: One more\nexacting lecture on hashing. And a couple reminders.",
    "start": "22300",
    "end": "29010"
  },
  {
    "text": "I don't want to start out\nsaying unpopular things, but we do have a quiz coming\nup next week on Tuesday.",
    "start": "29010",
    "end": "37410"
  },
  {
    "text": "There will not be a\nlecture next Tuesday, but there will be a quiz.",
    "start": "37410",
    "end": "43110"
  },
  {
    "text": "7:30 to 9:30 Tuesday evening. I will send announcement.",
    "start": "43110",
    "end": "49140"
  },
  {
    "text": "There's going to\nbe a couple rooms. Some of you will\nbe in this room. Some of you will have to\ngo to a different room,",
    "start": "49140",
    "end": "54929"
  },
  {
    "text": "since this room\nreally can't hold 180 students taking a quiz.",
    "start": "54929",
    "end": "60070"
  },
  {
    "text": "All right? So hashing. I'm pretty excited\nabout this lecture,",
    "start": "60070",
    "end": "65630"
  },
  {
    "text": "because I think as I was\ntalking with Victor just before this, if there's one\nthing you want to remember",
    "start": "65630",
    "end": "72659"
  },
  {
    "text": "about hashing and you want\nto go implement a hash table, it's open addressing.",
    "start": "72660",
    "end": "78409"
  },
  {
    "text": "It's the simplest way\nthat you can possibly implement a hash table. You can implement a hash\ntable using an array.",
    "start": "78410",
    "end": "86030"
  },
  {
    "text": "We've obviously talked\nabout link lists and chaining to implement hash\ntables in previous lectures,",
    "start": "86030",
    "end": "95360"
  },
  {
    "text": "but we're going to actually get\nrid of pointers and link lists, and implement a hash table using\na single array data structure,",
    "start": "95360",
    "end": "102890"
  },
  {
    "text": "and that's the notion\nof open addressing. Now in order to get\nopen addressing to work,",
    "start": "102890",
    "end": "109360"
  },
  {
    "text": "there's no free lunch, right? So you have a simple\nimplementation. It turns out that in order to\nmake open addressing efficient,",
    "start": "109360",
    "end": "116240"
  },
  {
    "text": "you have to be a little\nmore careful than if you're using the hash\ntables with chaining.",
    "start": "116240",
    "end": "122390"
  },
  {
    "text": "And we're going to have\nto make an assumption about uniform hashing. I'll say a little\nbit more about that.",
    "start": "122390",
    "end": "128289"
  },
  {
    "text": "But it's a different assumption\nfrom simple uniform hashing that Eric talked about.",
    "start": "128289",
    "end": "133480"
  },
  {
    "text": "And we'll state this\nuniform hashing assumption. And we look at what the\nperformance is of open",
    "start": "133480",
    "end": "140990"
  },
  {
    "text": "addressing under\nthis assumption. And this is assumption\nis going to give us",
    "start": "140990",
    "end": "146330"
  },
  {
    "text": "a sense of what good\nhash functions are for open addressing applications\nor for open addressing",
    "start": "146330",
    "end": "153350"
  },
  {
    "text": "hash tables. And finally we'll talk\nabout cryptographic hashing.",
    "start": "153350",
    "end": "159330"
  },
  {
    "text": "This is not really\n6006 material, but it's kind of cool material. It has a lot of applications\nin computer security",
    "start": "159330",
    "end": "167890"
  },
  {
    "text": "and cryptography. And so as we'll describe the\nnotion of a cryptographic hash,",
    "start": "167890",
    "end": "173710"
  },
  {
    "text": "and we'll talk about a couple\nof real simple and pervasive applications like\npassword storage",
    "start": "173710",
    "end": "180560"
  },
  {
    "text": "and file corruption detectors\nthat you can implement using cryptographic\nhash functions, which",
    "start": "180560",
    "end": "187450"
  },
  {
    "text": "are quite different from\nthe regular hash functions that we're using in hash tables.",
    "start": "187450",
    "end": "193060"
  },
  {
    "text": "Be it chaining hash tables or\nopen addressing hash tables.",
    "start": "193060",
    "end": "198459"
  },
  {
    "text": "All right? So let's get started and\ntalk about open addressing. ",
    "start": "198460",
    "end": "210080"
  },
  {
    "text": "This is another approach\nto dealing with collisions. If you didn't have\ncollisions, obviously an array",
    "start": "210080",
    "end": "215950"
  },
  {
    "text": "would work, right? If you could somehow guarantee\nthat there were no collisions. When you have\ncollisions, you have",
    "start": "215950",
    "end": "221150"
  },
  {
    "text": "to worry about the\nchaining and ensuring that you can still find\nthe keys even though you",
    "start": "221150",
    "end": "226690"
  },
  {
    "text": "had two keys that collided\ninto the same slot. And we don't want\nto use chaining.",
    "start": "226690",
    "end": "234090"
  },
  {
    "text": " The simplest data structure that\nwe can possibly use are arrays.",
    "start": "234090",
    "end": "239910"
  },
  {
    "text": "Back when I was a grad student,\nI went through and got a PhD writing programs in C, never\nusing any other structure",
    "start": "239910",
    "end": "248939"
  },
  {
    "text": "than arrays, because I\ndidn't like pointers. And so open addressing\nis a way that you",
    "start": "248940",
    "end": "255530"
  },
  {
    "text": "can implement hash tables\ndoing exactly this. And in particular,\nwhat we're going to do",
    "start": "255530",
    "end": "262300"
  },
  {
    "text": "is assume an array\nstructure with items. ",
    "start": "262300",
    "end": "271810"
  },
  {
    "text": "And we're going to assume\nthat this one item-- at most",
    "start": "271810",
    "end": "277389"
  },
  {
    "text": "one item per slot.  So m has to be greater\nthan or equal to n, right?",
    "start": "277390",
    "end": "284970"
  },
  {
    "text": "So this is important because\nwe don't have link lists. We can't arbitrarily\nincrease the storage",
    "start": "284970",
    "end": "291960"
  },
  {
    "text": "of a slot using\na chain, and have n, which is the\nnumber of elements,",
    "start": "291960",
    "end": "299060"
  },
  {
    "text": "be greater than m, right? Which you could in the link\nlist table with chaining.",
    "start": "299060",
    "end": "306290"
  },
  {
    "text": "But here you only have\nthese area locations, these indices that you\ncan put items into.",
    "start": "306290",
    "end": "311510"
  },
  {
    "text": "So it's pretty much guaranteed\nthat if you want a working open",
    "start": "311510",
    "end": "316620"
  },
  {
    "text": "addressing hash table that m,\nwhich is the number of slots",
    "start": "316620",
    "end": "323990"
  },
  {
    "text": "in the table, should be greater\nthan or equal to the number",
    "start": "323990",
    "end": "329080"
  },
  {
    "text": "of elements, all right? That's important.",
    "start": "329080",
    "end": "334580"
  },
  {
    "text": "Now how does this work. Well, we're going to have\nthis notion of probing. ",
    "start": "334580",
    "end": "344250"
  },
  {
    "text": "And the notion of\nprobing is that we're going to try to see if\nwe can insert something",
    "start": "344250",
    "end": "353160"
  },
  {
    "text": "into this hash table,\nand if you fail we're actually\ngoing to recompute a slightly different\nhash for the key",
    "start": "353160",
    "end": "360410"
  },
  {
    "text": "that we're trying to\ninsert, the key value pair that we're\ntrying to insert. All right? So this is an iterative\nprocess, and we're",
    "start": "360410",
    "end": "365960"
  },
  {
    "text": "going to continually probe\nuntil we find an empty slot into which we can insert\nthis key value pair.",
    "start": "365960",
    "end": "373560"
  },
  {
    "text": "The key should index into it. So you do have\ndifferent hashes that",
    "start": "373560",
    "end": "379570"
  },
  {
    "text": "are going to be computed\nbased on this probing notion for a given key. All right?",
    "start": "379570",
    "end": "387050"
  },
  {
    "text": "And so what we need\nnow is a hash function that's different from the\nstandard hash functions",
    "start": "387050",
    "end": "395370"
  },
  {
    "text": "that we've talked about\nso far, which specifies",
    "start": "395370",
    "end": "402470"
  },
  {
    "text": "the order of slots to\nprobe, which is basically",
    "start": "402470",
    "end": "411210"
  },
  {
    "text": "to try for a key. ",
    "start": "411210",
    "end": "418570"
  },
  {
    "text": "And this is going to be true\nfor insert, search, and delete,",
    "start": "418570",
    "end": "426080"
  },
  {
    "text": "which are three\nbasic operations. And they're a little bit\ndifferent, all right? Just like they were different\nfor the chaining hash table,",
    "start": "426080",
    "end": "434224"
  },
  {
    "text": "they're different here, but\nthey're kind of more different here. And you'll see what I mean\nwhen we go through this.",
    "start": "434224",
    "end": "439620"
  },
  {
    "text": " And this is not\njust for one slot.",
    "start": "439620",
    "end": "445270"
  },
  {
    "text": "It's going to specify\nan order of slots. And so our hash\nfunction h is going",
    "start": "445270",
    "end": "452180"
  },
  {
    "text": "to take the universe\nof keys and also take",
    "start": "452180",
    "end": "469889"
  },
  {
    "text": "what we're going to\ncall the trial count. So if you're lucky-- well, you\nget lucky in your first trial.",
    "start": "469890",
    "end": "477660"
  },
  {
    "text": "And if you're not, you hope to\nget lucky in your second trial, and so on and so forth.",
    "start": "477660",
    "end": "482710"
  },
  {
    "text": "But the hash function is\ngoing to take two arguments.",
    "start": "482710",
    "end": "488090"
  },
  {
    "text": "It's going to take the\nkey as an argument, and it's going to take a trial,\nwhich is an integer between 0",
    "start": "488090",
    "end": "497110"
  },
  {
    "text": "to n minus 1, all right? And it's going to produce-- just\nlike the chaining hash function",
    "start": "497110",
    "end": "503960"
  },
  {
    "text": "it's going to produce a number\nbetween 0 and m minus 1, right?",
    "start": "503960",
    "end": "511660"
  },
  {
    "text": "Where m is the number\nof slots in the table. All right. So that's the story.",
    "start": "511660",
    "end": "519150"
  },
  {
    "text": "In order to ensure that you\nare using the hash table",
    "start": "519150",
    "end": "528360"
  },
  {
    "text": "corresponding to open addressing\nproperly, what you want",
    "start": "528360",
    "end": "534769"
  },
  {
    "text": "is-- and this is an important\nproperty-- that h k 1,",
    "start": "534770",
    "end": "541680"
  },
  {
    "text": "so that's a key\nthat you're given. And this could be an\narbitrary key, mind you.",
    "start": "541680",
    "end": "548360"
  },
  {
    "text": "So arbitrary key k.",
    "start": "548360",
    "end": "557769"
  },
  {
    "text": "And what you have in\nterms of the slots that are being computed is\nthis, h k 1, h k 2,",
    "start": "557770",
    "end": "567880"
  },
  {
    "text": "and so on and so forth\nto h k n minus 1.",
    "start": "567880",
    "end": "573520"
  },
  {
    "text": "And what you want\nis for this vector",
    "start": "573520",
    "end": "580990"
  },
  {
    "text": "to be a permutation of 0\n1 and so on to n minus 1.",
    "start": "580990",
    "end": "594510"
  },
  {
    "text": "And the reason for this\nhopefully is clear. It's because you want\nto be able to use",
    "start": "594510",
    "end": "601900"
  },
  {
    "text": "the entirety of your hash table. You don't want particular\nslots to go unused.",
    "start": "601900",
    "end": "607810"
  },
  {
    "text": "And when you get to the point\nwhere the number of elements n",
    "start": "607810",
    "end": "613920"
  },
  {
    "text": "is pretty close to m, and maybe\nthere's just one slot left, OK?",
    "start": "613920",
    "end": "620029"
  },
  {
    "text": "And you want to fill up this\nlast slot with this key k",
    "start": "620030",
    "end": "625280"
  },
  {
    "text": "that you want to put\nin there, and what you want to be able to say is\nthat for this arbitrary key k",
    "start": "625280",
    "end": "630459"
  },
  {
    "text": "that you want to put in there\nthat the one slot that's free-- and it could be that first slot.",
    "start": "630460",
    "end": "635730"
  },
  {
    "text": "It could be the 17th slot. Whatever-- That eventually\nthe sequence of probes is going to be able to allow\nyou to insert into that slot.",
    "start": "635730",
    "end": "643920"
  },
  {
    "text": "All right? And we generalize\nthis notion into the uniform hashing\nassumption in a few minutes,",
    "start": "643920",
    "end": "651180"
  },
  {
    "text": "but hopefully this makes\nsense from a standpoint of really load\nbalancing the table",
    "start": "651180",
    "end": "657150"
  },
  {
    "text": "and ensuring that all\nslots in the table are sort of equal\nopportunity slots.",
    "start": "657150",
    "end": "662600"
  },
  {
    "text": "That you're going to be able to\nput keys in them as long as you",
    "start": "662600",
    "end": "668269"
  },
  {
    "text": "probe long enough that you're\ngoing to be able to get there. Now of course the\nfact that you're",
    "start": "668270",
    "end": "674149"
  },
  {
    "text": "using one particular slot\nfor one particular key depends on the order\nof keys that you're inserting into this table.",
    "start": "674150",
    "end": "680300"
  },
  {
    "text": "Again, you'll see that as we go\nthrough an example, all right? So that's the set up. That's the open\naddressing notion.",
    "start": "680300",
    "end": "687800"
  },
  {
    "text": "And that as you\ncan see, we're just going to go through\na sequence of probes",
    "start": "687800",
    "end": "694079"
  },
  {
    "text": "and our hash function\nis going to tell us what the sequences is, and\nso we don't need any pointers or anything like that.",
    "start": "694080",
    "end": "701350"
  },
  {
    "text": "So let's take a look at how\nthis might work in practice.",
    "start": "701350",
    "end": "710339"
  },
  {
    "text": "So maybe the easiest thing to\ndo is to run through an example,",
    "start": "710340",
    "end": "715890"
  },
  {
    "text": "and then I'll show\nyou some pseudocode. But let's say that\nI have a table here,",
    "start": "715890",
    "end": "721800"
  },
  {
    "text": "and I'm going to concentrate\non the insert operation.",
    "start": "721800",
    "end": "727060"
  },
  {
    "text": "And I'm going to start inserting\nthings into this table. ",
    "start": "727060",
    "end": "737130"
  },
  {
    "text": "And right here I have\nseven slots up there. So let's say that I want to\ninsert 586 into the table,",
    "start": "737130",
    "end": "747840"
  },
  {
    "text": "and I compute h of 586 comma\n1, and that gives me 1.",
    "start": "747840",
    "end": "755020"
  },
  {
    "text": "OK? This is the first insert. So I'm going to go ahead and\nstick 586 in here, all right?",
    "start": "755020",
    "end": "762649"
  },
  {
    "text": "And then I insert, for\nargument's sake, 133.",
    "start": "762650",
    "end": "767730"
  },
  {
    "text": "I insert 204 out here. And these are all things\nbecause the hash table is empty.",
    "start": "767730",
    "end": "774490"
  },
  {
    "text": "481 out here and so on. And because the\nhash table is empty,",
    "start": "774490",
    "end": "779800"
  },
  {
    "text": "my very first trial is\nsuccessful, all right? So h of 481-- I'm not going to\nwrite this all out, but h 481 1",
    "start": "779800",
    "end": "791190"
  },
  {
    "text": "happens to be 6 and so on. All right? Now I get to the point\nwhere I want to insert 496.",
    "start": "791190",
    "end": "804910"
  },
  {
    "text": "And when I try to insert\n496, I have h 496 1.",
    "start": "804910",
    "end": "820699"
  },
  {
    "text": "It happens to be 4. OK? So the first thing that\nhappens is I go in here,",
    "start": "820700",
    "end": "828230"
  },
  {
    "text": "and I say oops. This slot is occupied,\nbecause this-- I'm",
    "start": "828230",
    "end": "834990"
  },
  {
    "text": "going to have a special flag\nassociated with an empty slot,",
    "start": "834990",
    "end": "840470"
  },
  {
    "text": "and we can say it's none. And if it's not none,\nthen it's occupied.",
    "start": "840470",
    "end": "846020"
  },
  {
    "text": "And 204 is not equal to none. So I look at this, and I say\nthe first probe actually failed.",
    "start": "846020",
    "end": "854510"
  },
  {
    "text": "OK? And so h 496 1 equals 4 fails,\nso I need to go do h 496 2.",
    "start": "854510",
    "end": "870149"
  },
  {
    "text": "And h 496 2 may also fail.",
    "start": "870150",
    "end": "876180"
  },
  {
    "text": "You might be in a situation\nwhere h 496 2 gives you 586.",
    "start": "876180",
    "end": "885910"
  },
  {
    "text": "So this was h 496 1 h\n496 2 might give you 586.",
    "start": "885910",
    "end": "896850"
  },
  {
    "text": "And finally it may be that h 496\n3, which is your third attempt,",
    "start": "896850",
    "end": "903649"
  },
  {
    "text": "equals 3. So you go in, and you say great. I can insert 496.",
    "start": "903650",
    "end": "910210"
  },
  {
    "text": "And let me write\nthat in bold here.  Out there.",
    "start": "910210",
    "end": "916190"
  },
  {
    "text": "All right? So pretty straightforward. In this case, you've gone\nthrough three trials in order",
    "start": "916190",
    "end": "923620"
  },
  {
    "text": "to find an empty slot. And so the big\nquestion really here is other than taking care of\nsearch and delete, how long is",
    "start": "923620",
    "end": "932580"
  },
  {
    "text": "this process going to take? All right? And I'm talking about\nthat in a few minutes,",
    "start": "932580",
    "end": "937800"
  },
  {
    "text": "but let me explain,\nnow that you've seen insert, how search\nwould work, right?",
    "start": "937800",
    "end": "945819"
  },
  {
    "text": "Or maybe I get one of\nyou guys to explain to me once you have insert,\nhow would search work?",
    "start": "945820",
    "end": "955230"
  },
  {
    "text": "Someone?  Someone from the back? ",
    "start": "955230",
    "end": "963290"
  },
  {
    "text": "No one. You guys are always\nanswering questions.",
    "start": "963290",
    "end": "968450"
  },
  {
    "text": "Yeah, all the way in the back. AUDIENCE: Would you\njust do the same kind of probing [INAUDIBLE] where you\nfind it or you don't find it?",
    "start": "968450",
    "end": "978022"
  },
  {
    "text": "PROFESSOR: Right. So you do exactly. It's very similar to insert. ",
    "start": "978022",
    "end": "983810"
  },
  {
    "text": "You have a situation\nwhere you're going to none would\nindicate an empty slot.",
    "start": "983810",
    "end": "993840"
  },
  {
    "text": "And you can think of\nthis as being a flag. And in the case of insert,\nwhat you did was you--",
    "start": "993840",
    "end": "1005449"
  },
  {
    "text": "insert k v would\nsay keep probing.",
    "start": "1005450",
    "end": "1013120"
  },
  {
    "text": "I'm not going to write\nthe pseudocode for it. Keep probing until an\nempty slot is found.",
    "start": "1013120",
    "end": "1023980"
  },
  {
    "text": " And then when it's\nfound, insert item. ",
    "start": "1023980",
    "end": "1036559"
  },
  {
    "text": "And as long as you have\nthe permutation property that we have up there, and\ngiven that m is greater than",
    "start": "1036560",
    "end": "1043150"
  },
  {
    "text": "or equal to n, you're\nguaranteed that insert is going to find a slot. OK?",
    "start": "1043150",
    "end": "1048560"
  },
  {
    "text": "That's the good news. Now it might take\nawhile, and so we have a talk about performance\na bit later, but it'll work.",
    "start": "1048560",
    "end": "1055970"
  },
  {
    "text": "OK? Now search is a\nlittle bit different. ",
    "start": "1055970",
    "end": "1062490"
  },
  {
    "text": "You're searching for a\nkey k, and you essentially",
    "start": "1062490",
    "end": "1070705"
  },
  {
    "text": "say you're going\nto keep probing. And you say as long as\nthe slots encountered",
    "start": "1070706",
    "end": "1084289"
  },
  {
    "text": "are occupied by\nkeys not equal to k.",
    "start": "1084290",
    "end": "1094160"
  },
  {
    "text": "So every time you\nprobe, you go in there and you say I got a key. I found a hash for it.",
    "start": "1094160",
    "end": "1100830"
  },
  {
    "text": "I go to this particular slot. I look inside of it,\nand I check to see whether the key that's\nstored inside of it",
    "start": "1100830",
    "end": "1108000"
  },
  {
    "text": "is the same as the\nkey I'm searching for. If not, I go to the next trial.",
    "start": "1108000",
    "end": "1114990"
  },
  {
    "text": "If it is, then I return it. Right? So that's pretty much it.",
    "start": "1114990",
    "end": "1121440"
  },
  {
    "text": "And we keep probing until you\neither encounter k or find",
    "start": "1121440",
    "end": "1140690"
  },
  {
    "text": "an empty slot.  And this is the key.",
    "start": "1140690",
    "end": "1145920"
  },
  {
    "text": " No pun intended. ",
    "start": "1145920",
    "end": "1152230"
  },
  {
    "text": "A notion which is that when\nyou find an empty slot, it means that you have\nfailed to discover this key.",
    "start": "1152230",
    "end": "1161840"
  },
  {
    "text": "You fail to-- yeah,\nquestion back there? AUDIENCE: What happens if you\nwere to delete a key though?",
    "start": "1161840",
    "end": "1167169"
  },
  {
    "text": "PROFESSOR: I'll make you answer\nthat question for a cushion. ",
    "start": "1167170",
    "end": "1172200"
  },
  {
    "text": "So we'll get to\ndelete in a minute. But I want to make\nsure you're all on board with insert and search.",
    "start": "1172200",
    "end": "1179170"
  },
  {
    "text": "OK? So these are actually fairly\nstraightforward in comparison to delete. It's not like delete is\nmuch more complicated,",
    "start": "1179170",
    "end": "1185850"
  },
  {
    "text": "but there is a subtlety there. And so that's kind\nof neat, right? I mean this actually works.",
    "start": "1185850",
    "end": "1192630"
  },
  {
    "text": "So if you had a situation where\nyou were just accumulating",
    "start": "1192630",
    "end": "1198700"
  },
  {
    "text": "keys, and you're looking for\nthe number of distinct elements in the stream of data\nthat was coming in,",
    "start": "1198700",
    "end": "1205360"
  },
  {
    "text": "and that was pretty much it\nwith respect to your program, you'd never have to delete\nkeys, and this would be all",
    "start": "1205360",
    "end": "1211940"
  },
  {
    "text": "that you'd have to implement. Right? But let's talk about delete.",
    "start": "1211940",
    "end": "1217690"
  },
  {
    "text": "Every once in awhile we'd\nwant to delete a key? Yeah, you had a question? AUDIENCE: I have a\nquestion about search. Why do you stop searching\nonce you find an empty slot?",
    "start": "1217690",
    "end": "1225350"
  },
  {
    "text": "PROFESSOR: Because\nyou're searching. So what that means\nis that you're looking to see if this key\nwere already in the table.",
    "start": "1225350",
    "end": "1234120"
  },
  {
    "text": "And if key were\nalready in the table, you want to return the value\nassociated with that key.",
    "start": "1234120",
    "end": "1239870"
  },
  {
    "text": "If you find an empty\nslot, since you're using the same deterministic\nsequence of probes",
    "start": "1239870",
    "end": "1247540"
  },
  {
    "text": "that you would have if\nyou had inserted it, then-- that make sense? Good.",
    "start": "1247540",
    "end": "1253320"
  },
  {
    "text": "All right. So so far so good? That's what works for\ninsert and search.",
    "start": "1253320",
    "end": "1260550"
  },
  {
    "text": "Let's talk delete. So back there. How does delete work? ",
    "start": "1260550",
    "end": "1269070"
  },
  {
    "text": "AUDIENCE: Well\n[INAUDIBLE] if you search until you find\nthe none and assume",
    "start": "1269070",
    "end": "1276412"
  },
  {
    "text": "that the key you're searching\nfor was not put in there. But let's say you had one\nthat was in that slot before",
    "start": "1276412",
    "end": "1285210"
  },
  {
    "text": "and it got put back\nin, but then you delete the one that\nwas in the slot before. PROFESSOR: Great, great. You haven't told me\nhow to fix it yet,",
    "start": "1285210",
    "end": "1291330"
  },
  {
    "text": "but do you have\nthe guts for this? No.",
    "start": "1291330",
    "end": "1297039"
  },
  {
    "text": "OK, I think this\nveers to the right. I always wanted to do this\nto somebody in the back. All right.",
    "start": "1297040",
    "end": "1304236"
  },
  {
    "text": "Whoa. All right, good catch. All right. OK.",
    "start": "1304236",
    "end": "1309820"
  },
  {
    "text": "So you pointed out\nthe problem, and I'm going to ask somebody\nelse for a solution. All right?",
    "start": "1309820",
    "end": "1315800"
  },
  {
    "text": "But here's the problem. Here's the problem,\nand we can look at it from a standpoint of\nthat example right there.",
    "start": "1315800",
    "end": "1324559"
  },
  {
    "text": "Let's say for argument's\nsake that I'm searching-- now I've done all of the inserts\nthat I have up there, OK?",
    "start": "1324560",
    "end": "1331840"
  },
  {
    "text": "So I've inserted 496. All right? Then I delete 586\nfrom the table, OK?",
    "start": "1331840",
    "end": "1341840"
  },
  {
    "text": "I delete 586 from the table. So let's just say\nthat what I end up",
    "start": "1341840",
    "end": "1350080"
  },
  {
    "text": "doing-- I have 586,\n133, 496, and then",
    "start": "1350080",
    "end": "1358909"
  },
  {
    "text": "I have 204, and then a 481. And this is 0, 1, 2, et cetera.",
    "start": "1358910",
    "end": "1367770"
  },
  {
    "text": "So I'm deleting 586, and let's\nsay I replace it with none. OK?",
    "start": "1367770",
    "end": "1373300"
  },
  {
    "text": "Let's just say I\nreplace it with none. Now what happens is that when\nI search for 496, according",
    "start": "1373300",
    "end": "1383670"
  },
  {
    "text": "to this search algorithm\nwhat am I going to get?",
    "start": "1383670",
    "end": "1389940"
  },
  {
    "text": "AUDIENCE: None. PROFESSOR: Well the first slot\nI'm going to look at is 1,",
    "start": "1389940",
    "end": "1395690"
  },
  {
    "text": "and according to this\nsearch algorithm, I find an empty slot, right?",
    "start": "1395690",
    "end": "1401029"
  },
  {
    "text": "And when I find\nan empty slot, I'm going to say I\nfailed in the search.",
    "start": "1401030",
    "end": "1406700"
  },
  {
    "text": "If you encounter k, you succeed\nand return the key value pair,",
    "start": "1406700",
    "end": "1413820"
  },
  {
    "text": "right? Success means you\nreturn the value. And if you encounter\nan empty slot, it means that you've\ndecided that this key is not",
    "start": "1413820",
    "end": "1421690"
  },
  {
    "text": "in the table. And you say couldn't\nfind it, right? That make sense?",
    "start": "1421690",
    "end": "1427980"
  },
  {
    "text": "So this is obviously\nwrong, right? Because I just inserted\n496 into the table.",
    "start": "1427980",
    "end": "1434200"
  },
  {
    "text": "So this would fail incorrectly. ",
    "start": "1434200",
    "end": "1440560"
  },
  {
    "text": "So failed to find\nthe key, which is OK. I mean failure is OK\nif the key isn't there. But you don't want\nto fail incorrectly.",
    "start": "1440560",
    "end": "1447151"
  },
  {
    "text": "Right? Everyone buy that? Everyone buy that? Good. All right. So how do I fix it.",
    "start": "1447151",
    "end": "1454170"
  },
  {
    "text": "Someone else? How do I fix this? Someone who doesn't\nhave a cushion. All right, you.",
    "start": "1454170",
    "end": "1460686"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] you can\nmark that spot by a, and when",
    "start": "1460686",
    "end": "1470110"
  },
  {
    "text": "search comes across a,\nyou just [INAUDIBLE]. PROFESSOR: Right, great answer.",
    "start": "1470110",
    "end": "1478019"
  },
  {
    "text": "We're now going to have to do\na couple of different things for insert and search, OK? It's going to be\nsubtly different,",
    "start": "1478020",
    "end": "1484018"
  },
  {
    "text": "but the first thing\nwe're going to do is we're going to\nhave this flag, and I'll just call\nit delete me flag. OK?",
    "start": "1484019",
    "end": "1490620"
  },
  {
    "text": "And we're going to say that\nwhen I delete something,",
    "start": "1490620",
    "end": "1500350"
  },
  {
    "text": "replace deleted item\nwith not the non flag,",
    "start": "1500350",
    "end": "1509960"
  },
  {
    "text": "but a different flag that\nwe'll call delete me.",
    "start": "1509960",
    "end": "1515200"
  },
  {
    "text": "Is different from none. ",
    "start": "1515200",
    "end": "1524230"
  },
  {
    "text": "And that's going\nto be important, because now that you\nhave a different flag, and you replace\n586 with delete me,",
    "start": "1524230",
    "end": "1535530"
  },
  {
    "text": "you can now do different things\nin insert versus search, right?",
    "start": "1535530",
    "end": "1540900"
  },
  {
    "text": "So in particular,\nwhat you would do is you'd have to\nmodify this slightly,",
    "start": "1540900",
    "end": "1551122"
  },
  {
    "text": "because the notion\nof an empty slot means that you're\nlooking for none, right? And all it means is that--\nwell actually in some sense,",
    "start": "1551122",
    "end": "1560650"
  },
  {
    "text": "the pseudo code\ndoesn't really change because if you say\nyou either encounter k",
    "start": "1560650",
    "end": "1568160"
  },
  {
    "text": "or you would-- even if\nyou encounter a delete me,",
    "start": "1568160",
    "end": "1574510"
  },
  {
    "text": "you keep going. All right? That's the important thing. So I guess it does\nchange, because I assume",
    "start": "1574510",
    "end": "1580570"
  },
  {
    "text": "that you have only\ntwo cases here, but what you really have\nnow are three cases.",
    "start": "1580570",
    "end": "1586075"
  },
  {
    "text": "The three cases are\nwhen you're doing the search is that you\nencounter the key, which is the easy case.",
    "start": "1586075",
    "end": "1591960"
  },
  {
    "text": "You return it. You return the value. Or you can encounter a\ndelete me flag, in which case",
    "start": "1591960",
    "end": "1598529"
  },
  {
    "text": "you keep going. OK? And if you encounter\nan empty slot, which",
    "start": "1598530",
    "end": "1604930"
  },
  {
    "text": "corresponds to none,\nat that point you know you failed and the key\ndoesn't exist in the table. All right?",
    "start": "1604930",
    "end": "1610570"
  },
  {
    "text": "So let me just write that out. Insert treats delete\nme the same as none.",
    "start": "1610570",
    "end": "1623040"
  },
  {
    "text": " But search keeps going\nand treats it differently.",
    "start": "1623040",
    "end": "1641070"
  },
  {
    "start": "1641070",
    "end": "1652117"
  },
  {
    "text": "And that's pretty much it. So what would happen\nin our example? Well, going through\nexactly the same example,",
    "start": "1652117",
    "end": "1659840"
  },
  {
    "text": "we started from here, and\nthen we decided to delete 586. And so if we replaced 586 not\nwith none, but with delete me,",
    "start": "1659840",
    "end": "1671580"
  },
  {
    "text": "and the next time around\nwhen you search for 496, you're searching for 496.",
    "start": "1671580",
    "end": "1677360"
  },
  {
    "text": "And what would\nhappen is that you would go look at 586-- the\nslot that contained 586,",
    "start": "1677360",
    "end": "1684010"
  },
  {
    "text": "and you see that there's\na delete me flag in there. And so you go to the next trial. And then in the next trial, you\ndiscover that, in this case,",
    "start": "1684010",
    "end": "1694800"
  },
  {
    "text": "you have-- I'm sorry. I had 204 first as\nthe first trial,",
    "start": "1694800",
    "end": "1702330"
  },
  {
    "text": "and then in the second\ntrial I had 586. And I would continue\nbeyond the second trial",
    "start": "1702330",
    "end": "1708790"
  },
  {
    "text": "and get to third trial, and in\nfact return 496 in this case.",
    "start": "1708790",
    "end": "1716080"
  },
  {
    "text": "I would get to returning\n496 in my third trial, which is exactly what I want. ",
    "start": "1716080",
    "end": "1723779"
  },
  {
    "text": "The interesting thing here is\nthat you can reuse storage. I mean the whole\npoint of deleting",
    "start": "1723780",
    "end": "1728850"
  },
  {
    "text": "is that you can take the storage\nand insert other keys in there.",
    "start": "1728850",
    "end": "1733880"
  },
  {
    "text": "Once you've freed\nup the storage. And you can do that by\nmaking insert treat delete me",
    "start": "1733880",
    "end": "1741780"
  },
  {
    "text": "the same as the none. So the next time you\nwant to insert you could-- if you happen to index\ninto the index corresponding",
    "start": "1741780",
    "end": "1749620"
  },
  {
    "text": "to 586, you can override that. The delete me flag goes\naway, and some other key--",
    "start": "1749620",
    "end": "1755920"
  },
  {
    "text": "call it 999 or something--\nwould get in there. And you're all set with that.",
    "start": "1755920",
    "end": "1763700"
  },
  {
    "text": "OK? Any questions? This all makes sense? So you could imagine coding\nthis up with an array structure",
    "start": "1763700",
    "end": "1773050"
  },
  {
    "text": "is fairly straightforward. What remains here\nto be discussed",
    "start": "1773050",
    "end": "1778890"
  },
  {
    "text": "is how well does\nthis work, right? You have this extra requirement\non the hash function",
    "start": "1778890",
    "end": "1786270"
  },
  {
    "text": "corresponding to creating\nan extra argument as an input to it, which\nis this trial count.",
    "start": "1786270",
    "end": "1793950"
  },
  {
    "text": "And you'd like to have this\nnice property of corresponding to a permutation. Can we actually design\nhash functions like this?",
    "start": "1793950",
    "end": "1801150"
  },
  {
    "text": "And we'll take a look\nat a bad hash function, and then at a better one. So let's talk about\nprobing strategies, which",
    "start": "1801150",
    "end": "1808260"
  },
  {
    "text": "is essentially the same\nas taking a hash function",
    "start": "1808260",
    "end": "1815910"
  },
  {
    "text": "and changing it\nso it is actually applicable to open addressing.",
    "start": "1815910",
    "end": "1821240"
  },
  {
    "text": "So the notion of\nlinear probing is",
    "start": "1821240",
    "end": "1830480"
  },
  {
    "text": "that you do h k i\nequals h prime k, which",
    "start": "1830480",
    "end": "1840919"
  },
  {
    "text": "is some hash function\nthat you've chosen, plus i mod m, where this is\nan ordinary hash function.",
    "start": "1840920",
    "end": "1849585"
  },
  {
    "start": "1849585",
    "end": "1854620"
  },
  {
    "text": "OK? So that looks pretty\nstraightforward. ",
    "start": "1854620",
    "end": "1861280"
  },
  {
    "text": "What happens here? Does this satisfy the\npermutation argument? ",
    "start": "1861280",
    "end": "1868784"
  },
  {
    "text": "Before I forget. Does it satisfy the\npermutation property that I want h k 1, h k 2, h k\nm minus 1 to be a permutation?",
    "start": "1868785",
    "end": "1879800"
  },
  {
    "text": "That make sense? Yep, yep. Because I then I start adding. The mod is precisely kind\nof this round robin cycle,",
    "start": "1879800",
    "end": "1886780"
  },
  {
    "text": "so it's going to\nsatisfy the permutation. That's good. ",
    "start": "1886780",
    "end": "1894120"
  },
  {
    "text": "What's wrong with this? What's wrong with this?",
    "start": "1894120",
    "end": "1899620"
  },
  {
    "text": "Someone?  AUDIENCE: The fact that\n[INAUDIBLE] keys, which they're",
    "start": "1899620",
    "end": "1907620"
  },
  {
    "text": "all filled, then if you hit\nanywhere in here [INAUDIBLE] list of consecutive keys. AUDIENCE: Right.",
    "start": "1907620",
    "end": "1912640"
  },
  {
    "text": "That's excellent. Excellent, excellent answer. So this notion of\nclustering is basically",
    "start": "1912640",
    "end": "1919390"
  },
  {
    "text": "what's wrong with\nthis probing strategy. And in fact, I'm not going to\ndo this particular analysis,",
    "start": "1919390",
    "end": "1925430"
  },
  {
    "text": "but I'll give you a sense of why\nthe statement I'm going to make",
    "start": "1925430",
    "end": "1930820"
  },
  {
    "text": "is true. But the notion of\nclustering is that you start getting consecutive\ngroups of occupied slots, OK?",
    "start": "1930820",
    "end": "1938529"
  },
  {
    "start": "1938530",
    "end": "1947850"
  },
  {
    "text": "Which keep growing.  And so these clusters\nget longer and longer.",
    "start": "1947850",
    "end": "1956779"
  },
  {
    "text": "And if you have a\nbig cluster, it's more likely to\ngrow bigger, right? Which is bad.",
    "start": "1956780",
    "end": "1961840"
  },
  {
    "text": "This is exactly the wrong thing\nfor load balancing, right? And clustering is the reverse\nof load balancing, right?",
    "start": "1961840",
    "end": "1967170"
  },
  {
    "text": "If you have a bunch\nof clumps and you have a bunch of empty space\nin your table, that's bad. Right?",
    "start": "1967170",
    "end": "1972600"
  },
  {
    "text": "The problem with\nlinear probing is that once you start getting a\ncluster, given the, let's say,",
    "start": "1972600",
    "end": "1977940"
  },
  {
    "text": "the randomness in the hash\nfunction, and h prime k is a pretty good hash function\nand can randomly go anywhere.",
    "start": "1977940",
    "end": "1983470"
  },
  {
    "text": "Well, if you have 100 slots and\nyou have a cluster of size 4, well there's a for 4/100\nchance, which is obviously",
    "start": "1983470",
    "end": "1990900"
  },
  {
    "text": "four times greater than\n1/100, even I can do that, to go into those four slots.",
    "start": "1990900",
    "end": "1997760"
  },
  {
    "text": "And if you going\ninto those four slots you're going to keep\ngoing down to the bottom, and you're going to make that\na cluster of size five, right?",
    "start": "1997760",
    "end": "2007500"
  },
  {
    "text": "So that's the problem\nthe linear probing, and you can essentially\nargue through making",
    "start": "2007500",
    "end": "2014290"
  },
  {
    "text": "some probabilistic assumptions\nthat if, in fact, you",
    "start": "2014290",
    "end": "2020250"
  },
  {
    "text": "use linear probing that you\nlose your average constant time",
    "start": "2020250",
    "end": "2027040"
  },
  {
    "text": "look up in your hash table\nfor most load factors. So what's happening out\nhere pictorially really",
    "start": "2027040",
    "end": "2034900"
  },
  {
    "text": "is that you have a table and\nlet's say you have a cluster. ",
    "start": "2034900",
    "end": "2042059"
  },
  {
    "text": "And this is your cluster.  So if your h k 1--\nit doesn't really",
    "start": "2042060",
    "end": "2050440"
  },
  {
    "text": "matter what it is-- but h\nk i maps to this cluster,",
    "start": "2050440",
    "end": "2055679"
  },
  {
    "text": "then you're going\nto-- linear probing says that the next thing\nyou're going to try",
    "start": "2055679",
    "end": "2061239"
  },
  {
    "text": "is if you map to\n42 in the cluster, the next thing\nyou're going to try is 43, 44, until you get maybe\nto this slot here, which is 57,",
    "start": "2061239",
    "end": "2072369"
  },
  {
    "text": "for argument's sake. Right? So you're going to\nkeep going, and you're going to try 15 times in\nthis relatively dumb fashion",
    "start": "2072370",
    "end": "2081300"
  },
  {
    "text": "to go down to get to the\nopen slot, which is 57. And oh, by the way,\nat the end of this you",
    "start": "2081300",
    "end": "2087840"
  },
  {
    "text": "just increased your\ncluster length by one. All right? So it doesn't really work.",
    "start": "2087840",
    "end": "2093820"
  },
  {
    "text": "And in fact, under reasonable\nprobabilistic assumptions in terms of what your\nhash functions are,",
    "start": "2093820",
    "end": "2101780"
  },
  {
    "text": "you can say that when you have\nalpha, which is essentially",
    "start": "2101780",
    "end": "2107850"
  },
  {
    "text": "your load factor, which is\nn over m less than 0.99,",
    "start": "2107850",
    "end": "2115613"
  },
  {
    "text": "you see clusters\nof size log n, OK?",
    "start": "2115613",
    "end": "2124840"
  },
  {
    "text": "Right. So this is a\nprobabilistic argument, and you're assuming that you\nhave a hash function that's",
    "start": "2124840",
    "end": "2130879"
  },
  {
    "text": "a pretty good hash function. So h prime k can be this perfect\nhash function, all right?",
    "start": "2130879",
    "end": "2136680"
  },
  {
    "text": "So there's a problem here\nbeyond the choice of h prime k, which is this hash\nfunction that worked really",
    "start": "2136680",
    "end": "2142010"
  },
  {
    "text": "well for chaining. All right? And the problem here is the\nlinear probing aspect of it.",
    "start": "2142010",
    "end": "2149410"
  },
  {
    "text": "So what does that mean? If you have clusters\nof theta log n, then your search and\nyour insert are not",
    "start": "2149410",
    "end": "2156830"
  },
  {
    "text": "going to be constant\ntime anymore. Right? Which is bad in a\nprobabilistic sense.",
    "start": "2156830",
    "end": "2162180"
  },
  {
    "text": "OK? So how do we fix that? Well, one strategy that\nworks reasonably well",
    "start": "2162180",
    "end": "2174590"
  },
  {
    "text": "is called double hashing.  And it literally\nmeans what it says.",
    "start": "2174590",
    "end": "2183120"
  },
  {
    "text": "You have to run a\ncouple of hashes. And so the notion of double\nhashing is that you have h k i",
    "start": "2183120",
    "end": "2197270"
  },
  {
    "text": "equals h1 k plus i h2 k mod m.",
    "start": "2197270",
    "end": "2207910"
  },
  {
    "text": "And h1 and h2 are just\nordinary hash functions. OK?",
    "start": "2207910",
    "end": "2213140"
  },
  {
    "text": "Now the first thing\nthat we need to do is figure out how we can\nguarantee a permutation, right?",
    "start": "2213140",
    "end": "2221886"
  },
  {
    "text": "Because we still have\nthat requirement, and it was OK for the\nlinear probing part, but you still have\nthis requirement",
    "start": "2221886",
    "end": "2227270"
  },
  {
    "text": "that you need a permutation. And so those of you who\nare into number theory,",
    "start": "2227270",
    "end": "2235770"
  },
  {
    "text": "can you tell me what property,\nwhat neat property of h2 and m",
    "start": "2235770",
    "end": "2244560"
  },
  {
    "text": "can we ask for to\nguarantee a permutation? Do you have a question?",
    "start": "2244560",
    "end": "2250124"
  },
  {
    "text": "You already do. Do you have a question? AUDIENCE: [INAUDIBLE].",
    "start": "2250124",
    "end": "2255980"
  },
  {
    "text": "PROFESSOR: [INAUDIBLE]\nrelatively prime. OK, good. So I figured some of\nyou knew the answer, but I've seen you before.",
    "start": "2255980",
    "end": "2262010"
  },
  {
    "text": "Right. Exactly right. Relatively prime. Just hand it to Victor.",
    "start": "2262010",
    "end": "2267950"
  },
  {
    "text": "So h2 k and m being\nrelatively prime, if that implies a permutation.",
    "start": "2267950",
    "end": "2285715"
  },
  {
    "text": " It's similar to\nwhat we had before. You're multiplying this\nby i. i keeps increasing,",
    "start": "2285715",
    "end": "2293217"
  },
  {
    "text": "and you're going to roll around. All right? I mean you could\ndo a proof of it, but I'm not going to bother.",
    "start": "2293217",
    "end": "2298220"
  },
  {
    "text": "The important thing\nhere is that you can now do something as simple as\nm equals 2 raised to r,",
    "start": "2298220",
    "end": "2304760"
  },
  {
    "text": "and h2 k for all k is odd,\nand now you're in great shape.",
    "start": "2304760",
    "end": "2313620"
  },
  {
    "text": "You can have your\narray to be 2 raised to something, which is\nwhat you really want.",
    "start": "2313620",
    "end": "2319090"
  },
  {
    "text": "And you just use h2 k. You could even take a\nregular hash function and truncate it to\nmake sure it's odd.",
    "start": "2319090",
    "end": "2328799"
  },
  {
    "text": "You can do a bunch of things. There's hash functions\nthat produce odd values, and you can use that.",
    "start": "2328800",
    "end": "2334380"
  },
  {
    "text": "All right? And so double hashing works\nfairly well in practice. It's a good way of getting\nopen addressing to work.",
    "start": "2334380",
    "end": "2345290"
  },
  {
    "text": "And in order to prove that\nopen addressing actually works to the level at\nwhich chaining works,",
    "start": "2345290",
    "end": "2354200"
  },
  {
    "text": "we have to make an\nassumption corresponding to uniform hashing.",
    "start": "2354200",
    "end": "2360960"
  },
  {
    "text": "And I'm not going to\nactually do a proof, but it'll be in the notes.",
    "start": "2360960",
    "end": "2367319"
  },
  {
    "text": "But I do want to talk about\nthe theorem and the result",
    "start": "2367320",
    "end": "2373720"
  },
  {
    "text": "that the theorem\nimplies, assuming you have the uniform\nhashing assumption.",
    "start": "2373720",
    "end": "2380700"
  },
  {
    "text": "And let me first\nsay that this is not the same as simple\nuniform happening, which",
    "start": "2380700",
    "end": "2389920"
  },
  {
    "text": "talks about the independence of\nkeys in terms of their mapping to slots.",
    "start": "2389920",
    "end": "2395650"
  },
  {
    "text": "The uniform hashing\nassumption says that each key is\nequally likely to have",
    "start": "2395650",
    "end": "2411230"
  },
  {
    "text": "any one of the m\nfactorial permutations--",
    "start": "2411230",
    "end": "2419250"
  },
  {
    "text": "so we're talking about\nrandom permutations here-- as its probe sequence.",
    "start": "2419250",
    "end": "2424780"
  },
  {
    "start": "2424780",
    "end": "2431080"
  },
  {
    "text": "All right? This is very hard\nto get in practice. You can get pretty close\nusing double hashing.",
    "start": "2431080",
    "end": "2438109"
  },
  {
    "text": "But nobody's discovered\na perfect hash function, deterministic hash function\nthat satisfies this property.",
    "start": "2438110",
    "end": "2444572"
  },
  {
    "text": "At least not that I know off.  So what does this imply? Assuming that you have\nthis and double hatching",
    "start": "2444572",
    "end": "2453339"
  },
  {
    "text": "gives you this property, to a\nlarge extent what this means is",
    "start": "2453340",
    "end": "2459180"
  },
  {
    "text": "that if alpha is\nn over m, you can show that the cost of operations\nsuch as search, insert, delete,",
    "start": "2459180",
    "end": "2478280"
  },
  {
    "text": "et cetera. And in particular\nwe talk about insert is less than or equal to 1\ndivided by 1 minus alpha.",
    "start": "2478280",
    "end": "2487210"
  },
  {
    "text": "OK? So obviously this goes\nas alpha tends to 1.",
    "start": "2487210",
    "end": "2493650"
  },
  {
    "text": "As alpha tends to 1, the load\nfactor in the table gets large,",
    "start": "2493650",
    "end": "2500990"
  },
  {
    "text": "and the number of\nexpected probes that you need to do when\nyou get an insert grows.",
    "start": "2500990",
    "end": "2507920"
  },
  {
    "text": "And if alpha is 0.99,\nyou're going, on average, require 100 probes.",
    "start": "2507920",
    "end": "2514200"
  },
  {
    "text": "It's a constant number, but\nit's a pretty bad constant. Right? So you really want alpha\nto be fairly small.",
    "start": "2514200",
    "end": "2521050"
  },
  {
    "text": "And in practice it\nturns out that you have to re-size you're\nopen addressing table when alpha gets beyond\nabout 0.5, 0.6 or so,",
    "start": "2521050",
    "end": "2530190"
  },
  {
    "text": "because by then you're\nreally in trouble. Remember this is an average\ncase we're talking about.",
    "start": "2530190",
    "end": "2535340"
  },
  {
    "text": "All of this is using a\nprobabilistic assumption. But as you get to\nhigh alphas, suddenly",
    "start": "2535340",
    "end": "2541780"
  },
  {
    "text": "by the time you get to\n0.7, open addressing doesn't work well in relation\nto an equivalent table",
    "start": "2541780",
    "end": "2548930"
  },
  {
    "text": "with the overall\nnumber of slots that correspond to a\nchanging table, OK?",
    "start": "2548930",
    "end": "2555190"
  },
  {
    "text": "So open addressing\nis easy to implement. It uses less memory because\nyou don't need pointers.",
    "start": "2555190",
    "end": "2562170"
  },
  {
    "text": "But you better be careful that\nyour alpha stays around 0.5",
    "start": "2562170",
    "end": "2567369"
  },
  {
    "text": "and no more. So all that means is\nyou can still use it. You just have to\nre-size your table.",
    "start": "2567370",
    "end": "2572547"
  },
  {
    "text": "You have slightly\ndifferent strategies for resizing your\ntable when you use open addressing as opposed\nto chaining hash tables.",
    "start": "2572547",
    "end": "2583579"
  },
  {
    "text": "All right? So that's a summary\nof open addressing. I want to spend some time\non cryptographic hashes",
    "start": "2583580",
    "end": "2589391"
  },
  {
    "text": "in the time that I have left. I guess I have a\nfew minutes left. But any questions\nabout open addressing?",
    "start": "2589392",
    "end": "2595940"
  },
  {
    "text": "Yep? AUDIENCE: On this\ndelete part, what's going to happen if, say, you\nfill the table up and then",
    "start": "2595940",
    "end": "2601570"
  },
  {
    "text": "delete everything, and\nthen you start searching. Isn't that going to\nbe bad because it's going to search\nthrough everything?",
    "start": "2601570",
    "end": "2607601"
  },
  {
    "text": "PROFESSOR: So that's right. The bad thing about\nopen addressing is that delete isn't\ninstantaneous, right?",
    "start": "2607601",
    "end": "2614990"
  },
  {
    "text": "In the sense that if you deleted\nsomething from the link list in your chaining\ntable, then even",
    "start": "2614990",
    "end": "2620000"
  },
  {
    "text": "if you went to that same\nthing, the chain got smaller, and that helps you, because\nyour table now has lower load.",
    "start": "2620000",
    "end": "2626849"
  },
  {
    "text": "But there's a delay\nassociated with load when you have the\ndelete me flag.",
    "start": "2626850",
    "end": "2632130"
  },
  {
    "text": "OK? So in some sense the alpha\nthat you want to think about, you should be careful as\nto how you define alpha.",
    "start": "2632130",
    "end": "2639816"
  },
  {
    "text": "And that's one of\nthe reasons why when you get alpha\nbeing 0.5, 0.6 you get into trouble, because\nif you have all these delete",
    "start": "2639816",
    "end": "2646290"
  },
  {
    "text": "me flags, they're\nstill hurting you. AUDIENCE: And when\nyou resize do those delete me flags get deleted?",
    "start": "2646290",
    "end": "2652669"
  },
  {
    "text": "PROFESSOR: When you\ncompletely resize and you redo the\nwhole thing, then you can clean up the delete me's\nand turn them into nones",
    "start": "2652669",
    "end": "2657928"
  },
  {
    "text": "because you're rehashing it. All right. So yeah, back there.",
    "start": "2657928",
    "end": "2664340"
  },
  {
    "text": "Question? AUDIENCE: Yes, can you explain\nhow you got the equation that the cost of operation\ninsert is less than or equal to 1 over [INAUDIBLE].",
    "start": "2664340",
    "end": "2670994"
  },
  {
    "text": "PROFESSOR: That's\na longish proof, but let me explain to\nyou how that comes out.",
    "start": "2670994",
    "end": "2676630"
  },
  {
    "text": "Basically the intuition\nbehind the proof is that we're going to\nassume some probability p.",
    "start": "2676630",
    "end": "2685080"
  },
  {
    "text": "And initially you're\ngoing to say something like if the table, your p--\nI'll just write this out here--",
    "start": "2685080",
    "end": "2698079"
  },
  {
    "text": "is m minus n divided by m. So what is that?",
    "start": "2698080",
    "end": "2703350"
  },
  {
    "text": "Right now I have n\nelements in the table, and I have m slots, OK?",
    "start": "2703350",
    "end": "2712390"
  },
  {
    "text": "So the probability that my very\nfirst trial is going to succeed",
    "start": "2712390",
    "end": "2717529"
  },
  {
    "text": "is going to be m minus n\ndivided by m, because these are the number of empty slots.",
    "start": "2717530",
    "end": "2724250"
  },
  {
    "text": "And assuming my\npermutation argument, I could go into one of them. And so that's what I have here.",
    "start": "2724250",
    "end": "2730260"
  },
  {
    "text": "And if you look at what this\nis, this is 1 minus alpha, OK?",
    "start": "2730260",
    "end": "2736010"
  },
  {
    "text": "And so then you run\noff and you remember 6041 or the high school\nprobability course",
    "start": "2736010",
    "end": "2741165"
  },
  {
    "text": "that you take, and you\nsay generally speaking, you're going to be no worse\nthan p for every trial.",
    "start": "2741165",
    "end": "2747470"
  },
  {
    "text": "And so if you assume\nthe worst and say every trial has a\nprobability of success of p, the expected number\nof trials is 1/p, OK?",
    "start": "2747470",
    "end": "2756039"
  },
  {
    "text": "And that's how you got\nthe 1 over 1 minus alpha. So you'll see that written\nin gory detail in the notes.",
    "start": "2756040",
    "end": "2764030"
  },
  {
    "text": "All right? OK. Expected to have\na little more time in terms of talking about\ncryptographic hashes,",
    "start": "2764030",
    "end": "2771380"
  },
  {
    "text": "but cryptographic hashes are\nnot going to be on the quiz. This is purely material FYI.",
    "start": "2771380",
    "end": "2779920"
  },
  {
    "text": "For your interest only. And again I have\nsome notes on it, but I want to give you a sense\nof the other kinds of hashes",
    "start": "2779920",
    "end": "2788390"
  },
  {
    "text": "that exist in the\nworld, I guess.",
    "start": "2788390",
    "end": "2794369"
  },
  {
    "text": "And hashes that are used for\nmany different applications.",
    "start": "2794370",
    "end": "2799850"
  },
  {
    "text": "So maybe the best way\nof motivating this is through an example. So let's talk about\nan example that",
    "start": "2799850",
    "end": "2806880"
  },
  {
    "text": "is near and dear to every\nsecurity person's heart and probably to people who\naren't interested in security",
    "start": "2806880",
    "end": "2815050"
  },
  {
    "text": "as well, which is\npassword storage. So think about how,\nlet's say, Unix systems",
    "start": "2815050",
    "end": "2821750"
  },
  {
    "text": "work when you type\nin your password. You're typing in your\npassword [INAUDIBLE], and this is true for\nother systems as well,",
    "start": "2821750",
    "end": "2829460"
  },
  {
    "text": "but you have a password. And my password is a permutation\nof my first daughters",
    "start": "2829460",
    "end": "2836470"
  },
  {
    "text": "first name. [LAUGHTER] Yeah, but haven't\ngiven it away, right?",
    "start": "2836470",
    "end": "2844880"
  },
  {
    "text": "Haven't given it away. And so this password\nis something that I'm typing in\nevery day, right?",
    "start": "2844880",
    "end": "2853430"
  },
  {
    "text": "Now the sum check\nthat needs to happen to ensure that I'm typing\nin the right password.",
    "start": "2853430",
    "end": "2860660"
  },
  {
    "text": "So what is a dumb\nway of doing things. What's a dumb way\nof building systems?",
    "start": "2860660",
    "end": "2866210"
  },
  {
    "text": "AUDIENCE: Storing [INAUDIBLE]. PROFESSOR: This is\nkind of a freebie.",
    "start": "2866210",
    "end": "2872522"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: In situ hashing. That's better.",
    "start": "2872522",
    "end": "2878710"
  },
  {
    "text": "So you'd store it. I offered the dumb way. So there's a perfectly\nvalid answer. So you could clearly store\nthis in plain text in some file",
    "start": "2878710",
    "end": "2886450"
  },
  {
    "text": "and you could call it\nslash etc slaw password. And you could make it\nread for the work, right?",
    "start": "2886450",
    "end": "2894200"
  },
  {
    "text": "And that'd be great, and\npeople do that, right? But what you would\nrather do is you",
    "start": "2894200",
    "end": "2899770"
  },
  {
    "text": "want to make sure that even\nthe sysadmin doesn't know my password or your\npassword, right?",
    "start": "2899770",
    "end": "2907630"
  },
  {
    "text": "So how do you do that? Well you do that using a\ncryptographic hash that has this interesting\nproperty that is one way, OK?",
    "start": "2907630",
    "end": "2916400"
  },
  {
    "text": "And what that means is\nthat given h of x-- OK,",
    "start": "2916400",
    "end": "2922369"
  },
  {
    "text": "this is the value\nof the hash-- it is very hard to find the\nx such that x basically",
    "start": "2922370",
    "end": "2935619"
  },
  {
    "text": "hashes to this value. So if h of x equals\nlet's call it q,",
    "start": "2935620",
    "end": "2942380"
  },
  {
    "text": "then you're only given h of x.",
    "start": "2942380",
    "end": "2948910"
  },
  {
    "text": "And so what do you do now? Well, it's beautiful. Assuming you have this one way\nhash, this cryptographic hash,",
    "start": "2948910",
    "end": "2956710"
  },
  {
    "text": "in your etc slash\npassword file, you",
    "start": "2956710",
    "end": "2963109"
  },
  {
    "text": "have something like\nlogin name, [INAUDIBLE],",
    "start": "2963110",
    "end": "2971780"
  },
  {
    "text": "which happens to be the hash\nof my daughter's first name, or something. But this is what's stored\nin there and the same thing",
    "start": "2971780",
    "end": "2981000"
  },
  {
    "text": "for a bunch of\ndifferent users, right? So when I log in and I type\nin the actual password,",
    "start": "2981000",
    "end": "2986970"
  },
  {
    "text": "what does the system do? What does the system do? It hashes it.",
    "start": "2986970",
    "end": "2992130"
  },
  {
    "text": "It takes x prime, which is\nthe typed in password, which",
    "start": "2992130",
    "end": "3000299"
  },
  {
    "text": "may or may not be\nequal to my password, because somebody else might\nbe trying to break in,",
    "start": "3000300",
    "end": "3006390"
  },
  {
    "text": "or I just mistyped, or forgot\nmy daughter's first name,",
    "start": "3006390",
    "end": "3011519"
  },
  {
    "text": "which would be bad. And it will just check to see--\nit doesn't need x, because it's",
    "start": "3011520",
    "end": "3018700"
  },
  {
    "text": "stored h of x in the system,\nso it doesn't need x. So if we just compare\nagainst what I typed in,",
    "start": "3018700",
    "end": "3027299"
  },
  {
    "text": "it would compute the hash again. And then would let me in\nassuming that these things",
    "start": "3027300",
    "end": "3033700"
  },
  {
    "text": "matched and would not\nlet me in if it didn't. So now we can talk about-- and\nI don't have time for this,",
    "start": "3033700",
    "end": "3039060"
  },
  {
    "text": "but you can certainly\nread up on it on Wikipedia and a bunch in the notes. You can talk about\nwhat properties",
    "start": "3039060",
    "end": "3044760"
  },
  {
    "text": "should this hash function\nhave, namely one way collision resistance, in order\nto solve these problems",
    "start": "3044760",
    "end": "3050950"
  },
  {
    "text": "and other problems. I'm happy to stick around\nand answer questions.",
    "start": "3050950",
    "end": "3054770"
  }
]