[
  {
    "start": "0",
    "end": "10170"
  },
  {
    "text": "PROFESSOR: So today\nwe are going to talk about register allocation. And what I'm-- I'll first\njust describe why you're doing",
    "start": "10170",
    "end": "19619"
  },
  {
    "text": "register allocation and\ngo to multiple steps, first creating webs.",
    "start": "19620",
    "end": "24810"
  },
  {
    "text": "That means you need that get a\nsingle register allocated, then interference graphs,\nand reduce the coloring",
    "start": "24810",
    "end": "31890"
  },
  {
    "text": "to make sure that there are\nenough registers and registers doesn't interfere\nwith each other. And at that point, you\ncan-- and spilling.",
    "start": "31890",
    "end": "38442"
  },
  {
    "text": "And at that point,\nyou can actually do a basic register allocated. Then I will talk about\na little bit more optimization, about splitting,\nlibrary and splitting,",
    "start": "38442",
    "end": "46920"
  },
  {
    "text": "and other optimizations to\nimprove register allocation. So why are we doing this?",
    "start": "46920",
    "end": "55440"
  },
  {
    "text": "We basically want to store value\nbetween a definition and a use. So what happens is\nprogram compute values.",
    "start": "55440",
    "end": "62460"
  },
  {
    "text": "And at the value\ndefinition point, we are-- something get assigned\nto a left-hand side.",
    "start": "62460",
    "end": "68130"
  },
  {
    "text": "And then some uses of the values\nlater that reads those values. And we had two choices\nbetween different definitions.",
    "start": "68130",
    "end": "77610"
  },
  {
    "text": "The first choice is to\nstore everything in memory. That's what you guys\nare doing right now and retrieved from\nmemory for each use.",
    "start": "77610",
    "end": "85710"
  },
  {
    "text": "If you are doing a\nrisk architecture, this is a pain because there\nis not a single operation. You can do any\noperations on memory.",
    "start": "85710",
    "end": "92259"
  },
  {
    "text": "So we actually load it into a\nregister operator and store. It's x86, so it's not that\nmuch of a pain because you",
    "start": "92260",
    "end": "98100"
  },
  {
    "text": "can do some operations basically\ndirectly from memory, load, do some operations. But operations are limited.",
    "start": "98100",
    "end": "104250"
  },
  {
    "text": "You can't load two from\ndifferent memory locations, operate, and store. So-- whereas register, you\ncan do a little bit more.",
    "start": "104250",
    "end": "110460"
  },
  {
    "text": "So second option is store\nthe values on registers and operate on the\nvalue from registers.",
    "start": "110460",
    "end": "117450"
  },
  {
    "text": "So why is this very important?  Because registered locations\nhave a very direct impact",
    "start": "117450",
    "end": "125240"
  },
  {
    "text": "on performance. More than any optimization\nyou guys did, probably this probably had\nthe highest impact because it affects almost\nevery statement of the program",
    "start": "125240",
    "end": "133292"
  },
  {
    "text": "because every statement,\nyou are dealing with values. You are taking some values,\ndoing some operations, storing values.",
    "start": "133292",
    "end": "138439"
  },
  {
    "text": "And the thing about\nthat is, what happens is if things are\nin registers, it",
    "start": "138440",
    "end": "144290"
  },
  {
    "text": "eliminates some very\nexpensive memory operations. Memory have two issues. One is there's a latency.",
    "start": "144290",
    "end": "150560"
  },
  {
    "text": "That means you have to\nactually go, go to the cache, actually get the thing. And if it's not in the\ncache, get from memory.",
    "start": "150560",
    "end": "156260"
  },
  {
    "text": "It's multiple cycles to get it. Second, as a bandwidth issue\nbecause something like x86-64,",
    "start": "156260",
    "end": "163250"
  },
  {
    "text": "you can have multiple\noperations in flight. Multiple operations can\nhappen in the same cycle. There are many ports or\naccesses to the register file.",
    "start": "163250",
    "end": "171740"
  },
  {
    "text": "You can get, I think, about\nsix, seven items or more probably out of the register\nfile in a given cycle,",
    "start": "171740",
    "end": "177675"
  },
  {
    "text": "whereas in the memory, normally\nyou have about two ports. You can only get two items or\nwrite two items in the memory.",
    "start": "177675",
    "end": "183052"
  },
  {
    "text": "So because of that, if you have\ntoo many memory operations, you're actually\nreally slowing down because you don't have enough\nbandwidth to keep doing that.",
    "start": "183052",
    "end": "191666"
  },
  {
    "text": "And also, the other\nthing is, there are only a limited number of\nmemory-to-memory [INAUDIBLE]",
    "start": "191666",
    "end": "198830"
  },
  {
    "text": "operations. You can do two memory in\nthe [INAUDIBLE] register to memory of memory\nregister type operations.",
    "start": "198830",
    "end": "205940"
  },
  {
    "text": "So because of that, sometimes\nif you want to add two items, add one value in memory\nto another value,",
    "start": "205940",
    "end": "212690"
  },
  {
    "text": "you're probably-- you load it\nto register and then add it to that, that value. So you have-- whereas\nif it's in register,",
    "start": "212690",
    "end": "218483"
  },
  {
    "text": "I can just do it\nin one operation. So there are\nlimitations in there. And I think because\nof that, they probably",
    "start": "218483",
    "end": "223970"
  },
  {
    "text": "give you the best,\nbiggest bang for the buck in any optimizations you do.",
    "start": "223970",
    "end": "229240"
  },
  {
    "text": "So what can you\nput on a register? So any computer-generated\ntemporaries. This is why we said,\nkeep it as a temporary,",
    "start": "229240",
    "end": "235180"
  },
  {
    "text": "compile it temporary,\nkeep it separate so we can just figure\nout in register location how to put it there. There are a lot of\nlanguage-level values also",
    "start": "235180",
    "end": "241600"
  },
  {
    "text": "we can put. So there are some\nlocal scalar variables.",
    "start": "241600",
    "end": "246610"
  },
  {
    "text": "Any constant sometimes\ncan put into register. If you keep reusing the\nconstants again and again, there might be\nopportunity to do that.",
    "start": "246610",
    "end": "255160"
  },
  {
    "text": "Value stored on elements. If you have elements in some\nkind of array or structure, you can store it in register.",
    "start": "255160",
    "end": "261430"
  },
  {
    "text": "There you had a\nlittle bit careful whether you can take it out\nof memory, whether aliasing-- I don't think you have\nto worry about that much.",
    "start": "261430",
    "end": "267850"
  },
  {
    "text": "But it's not as simple\nas just simple scalar because now we have\ntwo locations in there",
    "start": "267850",
    "end": "273250"
  },
  {
    "text": "because in a scalar-- like, for example,\ncomputer-generated temporary,",
    "start": "273250",
    "end": "278920"
  },
  {
    "text": "there's no assigned\nlocation for that. But the minute you start\nactually having objects, there's a memory location.",
    "start": "278920",
    "end": "284830"
  },
  {
    "text": "And now we have\nthings in two places. And we got to make sure\nthat it stays consistent.",
    "start": "284830",
    "end": "292210"
  },
  {
    "text": "Other thing that,\nin a normal machine you have to worry about,\nhere is not that much of-- you don't have to worry\nabout is different data types",
    "start": "292210",
    "end": "299770"
  },
  {
    "text": "have different registers. So for example, floating\npoint has its own registers. Integers have its own registers.",
    "start": "299770",
    "end": "306400"
  },
  {
    "text": "The modern machines, if you do\nthis CMD-type small operations, they have their own\nset of registers.",
    "start": "306400",
    "end": "311750"
  },
  {
    "text": "So whereas memory is\none gigantic big blob, whereas registers you\nhave different groups. So it's not like you can assign\na floating point to integer",
    "start": "311750",
    "end": "319389"
  },
  {
    "text": "registers and use that directly. So you had to know which\nregisters you go into. ",
    "start": "319390",
    "end": "328139"
  },
  {
    "text": "So I think one of the\nbenefits I mentioned",
    "start": "328140",
    "end": "333560"
  },
  {
    "text": "is fewer instructions in there,\nand registers are faster. And I mentioned these two facts.",
    "start": "333560",
    "end": "339979"
  },
  {
    "text": "But the key thing is there's\nonly small amount of registers. Memory is basically,\nfor anything, you can say it's unlimited.",
    "start": "339980",
    "end": "346285"
  },
  {
    "text": "As far as compile is\nconcerned, memory's unlimited. We just try to--\ngigantic memory, and let hardware deal with--\nif there's not enough memory,",
    "start": "346285",
    "end": "352700"
  },
  {
    "text": "it will swap it out, whatever. Whereas registers, there's a\nvery limited set of registers.",
    "start": "352700",
    "end": "358250"
  },
  {
    "text": "Actually, in x86-64\nand x86, it's even harder because normally,\nthese days, a lot of machines",
    "start": "358250",
    "end": "363948"
  },
  {
    "text": "have large number of registers. But x86 normally has a very\nsmall amount of registers,",
    "start": "363948",
    "end": "370014"
  },
  {
    "text": "whereas something like--\nif you go to [INAUDIBLE],, there are 128 registers.",
    "start": "370015",
    "end": "375050"
  },
  {
    "text": "So-- and also the worst\nthing, some of those registers already have\npre-assigned meanings. So you can't just keep using\nstack point or frame point.",
    "start": "375050",
    "end": "383660"
  },
  {
    "text": "We have to reassign meanings. So what you have to play with\nis even a smaller number. And sometimes, some\nof those registers",
    "start": "383660",
    "end": "389870"
  },
  {
    "text": "have some very specific values. For example, if you\nare doing divide, the data has to be in\na certain register.",
    "start": "389870",
    "end": "396140"
  },
  {
    "text": "And at that point, you make\nsure that those constraints are satisfied.",
    "start": "396140",
    "end": "401580"
  },
  {
    "text": "So since x86 is a\nsys architecture, there are a lot of\nthese weird conditions",
    "start": "401580",
    "end": "407720"
  },
  {
    "text": "that you have to deal with\nwhen dealing with registers. So that just set the base\nfor what we are trying to do.",
    "start": "407720",
    "end": "415680"
  },
  {
    "text": "And now let's go on\nand start looking into how to register location.",
    "start": "415680",
    "end": "421140"
  },
  {
    "text": "So the first thing, first\nconcept I want talk about is webs. So what we're\ndoing in this class",
    "start": "421140",
    "end": "427290"
  },
  {
    "text": "is web-based\nregister allocation. So what we do in\nregister allocation,",
    "start": "427290",
    "end": "432730"
  },
  {
    "text": "the entire steps is\nfirst we determine live ranges for each value. So what that means is each\nvalue has to get in there.",
    "start": "432730",
    "end": "440860"
  },
  {
    "text": "And what's the range\nthat value has to be? And which accesses can\nbe grouped together, what we call a web?",
    "start": "440860",
    "end": "447760"
  },
  {
    "text": "And then if you have\nmultiple webs, we figure out, what are the overlapping waves?",
    "start": "447760",
    "end": "452949"
  },
  {
    "text": "So if two ranges\nactivate the same time, they are overlapping, and they\ncan go into the same register.",
    "start": "452950",
    "end": "458650"
  },
  {
    "text": "So you had to look\nat that interference. And then at some point, if you\ndon't have enough registers,",
    "start": "458650",
    "end": "464050"
  },
  {
    "text": "you deal with things\nlike spill cost. You have to figure out, OK, I\ndon't have enough registers.",
    "start": "464050",
    "end": "470750"
  },
  {
    "text": "Have to spill\nsomething into memory. And what's the\nright one to spill? And there's a lot of\nheuristics around this thing.",
    "start": "470750",
    "end": "477000"
  },
  {
    "text": "And then finally, say, decide\nwhich webs to get a register. So you are to allocate. And then you can do a\nbunch of optimizations",
    "start": "477000",
    "end": "485130"
  },
  {
    "text": "if you had spills. And through spilling,\ncan I split the web and do some interesting\nthings to actually make--",
    "start": "485130",
    "end": "492770"
  },
  {
    "text": "still allocate registers? Then everything gets spilled. And finally, you assign\nto hard registers.",
    "start": "492770",
    "end": "498169"
  },
  {
    "text": "So you know, OK, so I know\nthese things get registers. But which registers? And you can do it intelligently.",
    "start": "498170",
    "end": "503960"
  },
  {
    "text": "And then you had to\ngenerate split code. And that's basically about the\nprocess you had to go through.",
    "start": "503960",
    "end": "509150"
  },
  {
    "text": "This split webs is optional. You don't really\nhave to do that.",
    "start": "509150",
    "end": "514440"
  },
  {
    "text": "But the rest basically\nhad to follow through. So webs-- so the starting point\nof a web is a def-use chain.",
    "start": "514440",
    "end": "525710"
  },
  {
    "text": "So did you do-- I guess you guys\nbuild def-use chains for data for optimization.",
    "start": "525710",
    "end": "532118"
  },
  {
    "text": "Did you figure out?  AUDIENCE: [INAUDIBLE] PROFESSOR: Do you\nknow data flow to do--",
    "start": "532118",
    "end": "538010"
  },
  {
    "text": "find this def-use,\nbasically given issues, figure out where all the\ndefinitions are and vice versa.",
    "start": "538010",
    "end": "543800"
  },
  {
    "text": "Use different def-use chain. So what it does is\nconnects definitions to all reachable users.",
    "start": "543800",
    "end": "551160"
  },
  {
    "text": "So what you want to do is,\nentire thing in diffuse, put into a single web. You can probably formulate this\nas a nice data flow problem.",
    "start": "551160",
    "end": "558345"
  },
  {
    "text": "I think this is a good\nway to go and do that. So what that means is defs\nfor all reachable users must",
    "start": "558345",
    "end": "563959"
  },
  {
    "text": "be in the same web. So if you have a\ndefinition, all the value-- all the places that\nthat definition is used",
    "start": "563960",
    "end": "569570"
  },
  {
    "text": "have to be in the same web. Same way if you have use. All the def that reach this\nuse has to be in the same web",
    "start": "569570",
    "end": "577310"
  },
  {
    "text": "because that is the thing that\nI get a register allocated. And you can use a simple\nunion-find type algorithm",
    "start": "577310",
    "end": "584449"
  },
  {
    "text": "to go and do that. And you can get the algorithms,\nwill find union type algorithm, and that will nicely\nhelp you do that.",
    "start": "584450",
    "end": "590550"
  },
  {
    "text": "So here's a simple example. So what are my webs in here?",
    "start": "590550",
    "end": "598310"
  },
  {
    "start": "598310",
    "end": "605990"
  },
  {
    "text": "Anyone tell me what's a web? ",
    "start": "605990",
    "end": "614660"
  },
  {
    "text": "AUDIENCE: The\nsmallest one is the-- PROFESSOR: This one-- AUDIENCE: [INAUDIBLE] PROFESSOR: --you could\nsay how a def, that",
    "start": "614660",
    "end": "619790"
  },
  {
    "text": "might have a use, these two. This is not in the web because\nthis is the def actually going to get rid.",
    "start": "619790",
    "end": "625070"
  },
  {
    "text": "So this-- these\ntwo are in the web. But I have def,\nand I have use y.",
    "start": "625070",
    "end": "632139"
  },
  {
    "text": "Is this in that web? No, because this def\ndoesn't reach there. And these two are in there.",
    "start": "632140",
    "end": "638255"
  },
  {
    "text": "OK, those two are very clear. There's def, and that's use. And that's [INAUDIBLE].",
    "start": "638255",
    "end": "643940"
  },
  {
    "text": "How about here? ",
    "start": "643940",
    "end": "649060"
  },
  {
    "text": "I do a def y, and I do use y. This is in a web.",
    "start": "649060",
    "end": "655113"
  },
  {
    "text": "What happened to these four?  AUDIENCE: They're\nall [INAUDIBLE]..",
    "start": "655113",
    "end": "663460"
  },
  {
    "text": "PROFESSOR: Why? AUDIENCE: Because\nthe left [INAUDIBLE] can reach either use,\nand the right use",
    "start": "663460",
    "end": "668949"
  },
  {
    "text": "can be reached by either now. PROFESSOR: Yeah,\nso basically what happens is you can use this\ndef, reaches these two users.",
    "start": "668950",
    "end": "675579"
  },
  {
    "text": "And this def reaches this use. So basically, your final\nmodel will basically tell us, this entire thing is in one web.",
    "start": "675580",
    "end": "683270"
  },
  {
    "text": "So in this program, I\nhave basically four webs that comes out.",
    "start": "683270",
    "end": "688850"
  },
  {
    "text": "So the first thing is\nto get each function, figure out all\nthe webs in there. ",
    "start": "688850",
    "end": "696760"
  },
  {
    "text": "So basically, web is basically\ngoing to register location. So if you allocate, you\nallocate register for that web.",
    "start": "696760",
    "end": "702073"
  },
  {
    "text": "And then the entire\noperations within that web take that register. And so web can get\neither register,",
    "start": "702073",
    "end": "709060"
  },
  {
    "text": "or web can reallocate to memory. So if it's very\nbusy in the memory, all the operations\nhappen from memory.",
    "start": "709060",
    "end": "715190"
  },
  {
    "text": "However, you probably will\nhave to keep probably one scratch register because assume\nI am doing operation with two",
    "start": "715190",
    "end": "721930"
  },
  {
    "text": "things that's already-- two webs that's in the memory. And you can't do that\ndirect cooperation directly. So you need to have\na scratch register",
    "start": "721930",
    "end": "728290"
  },
  {
    "text": "to bring that value to\nthe operation and save. So with one scratch\nregister, you still will probably do that. So you need to\nkeep that in there.",
    "start": "728290",
    "end": "734547"
  },
  {
    "text": " So the next thing\nis, I will describe",
    "start": "734547",
    "end": "741460"
  },
  {
    "text": "two different, very\nsimple concepts. One is called convex set.",
    "start": "741460",
    "end": "746950"
  },
  {
    "text": "Convex set means if you have\nall the instructions in there-- a convex set of\ninstructions is if A--",
    "start": "746950",
    "end": "754839"
  },
  {
    "text": " if A and B instructions\nare in the convex set, C--",
    "start": "754840",
    "end": "764370"
  },
  {
    "text": "instruction C is\nalso a connection if there is a path from A to\nB, execution path that actually",
    "start": "764370",
    "end": "769610"
  },
  {
    "text": "has C in it. So while you are running\nfrom A to B, If you execute, C also has to be\nin the convex set.",
    "start": "769610",
    "end": "776450"
  },
  {
    "text": "So what that means is\nyou can't have places-- holes in the execution path. So from-- if you get A and\nB, everything in that path,",
    "start": "776450",
    "end": "783470"
  },
  {
    "text": "if it's reachable, has\nto be in the convex set. Does that make sense on a convex\nset is, a set of instructions?",
    "start": "783470",
    "end": "790355"
  },
  {
    "text": " And so minimal convex\nset of instructions,",
    "start": "790355",
    "end": "796779"
  },
  {
    "text": "that include all\nthe defs and uses, is basically the live range.",
    "start": "796780",
    "end": "802920"
  },
  {
    "text": "What that means is\nbasically all the definition and uses has to be in the\nlive range, instructions that do definitions\nand uses of that web.",
    "start": "802920",
    "end": "810180"
  },
  {
    "text": "And then any instruction in the\nmiddle that passes through also has to be in the library because\nat that-- the [INAUDIBLE] is",
    "start": "810180",
    "end": "817110"
  },
  {
    "text": "a very simple concept because\nall the instructions, all the places of where\nyou're executing,",
    "start": "817110",
    "end": "822449"
  },
  {
    "text": "you'll know that instruction\nmight not use the register. That register-- that value has\nto be live through that point",
    "start": "822450",
    "end": "828300"
  },
  {
    "text": "because that's a\ndefinition, that's a use. And after-- when you start\nexecuting from definition to use, everywhere you go,\nthat value has to be kept live.",
    "start": "828300",
    "end": "835230"
  },
  {
    "text": "At that point, you\nmark all the points that that plan has to be\nlive using this convex set.",
    "start": "835230",
    "end": "841084"
  },
  {
    "text": "So that defines here all the\npoints that thing has to live. ",
    "start": "841084",
    "end": "851210"
  },
  {
    "text": "So the next interesting\nconcept is interference. If there are two\nwaves, they interfere",
    "start": "851210",
    "end": "856850"
  },
  {
    "text": "if the live ranges overlap. So what that means is there's--",
    "start": "856850",
    "end": "863682"
  },
  {
    "text": "there's a place\nsomewhere that when you try to execute\nthat instruction, both the value in the first web\nand the value in the second web",
    "start": "863682",
    "end": "871680"
  },
  {
    "text": "has to be there because\neither they use it, or somebody later\nuses it because that has-- both values had\nto be carried through.",
    "start": "871680",
    "end": "878410"
  },
  {
    "text": "So what that means is\nthose two webs interfere. And since I had to\nkeep both values,",
    "start": "878410",
    "end": "884970"
  },
  {
    "text": "I can't keep both of them\nin the same register. I can only keep one value. So here's a plane that\nyou have still done.",
    "start": "884970",
    "end": "890730"
  },
  {
    "text": "I had to keep both. I need at least two registers.  OK, so let's look\nat in this one.",
    "start": "890730",
    "end": "897709"
  },
  {
    "text": "So where are the places\nwhere there's interference? Which webs interfere? ",
    "start": "897710",
    "end": "905450"
  },
  {
    "text": "AUDIENCE: s1 and s2. PROFESSOR: s1 and\ns2 to interfere. Yes, because at-- so\nthe convex set of s1",
    "start": "905450",
    "end": "916600"
  },
  {
    "text": "has this instruction, this\ninstruction, this instruction, this instruction, OK?",
    "start": "916600",
    "end": "922110"
  },
  {
    "text": "Come next set of s2 has this\ninstruction, this instruction, this instruction,\nthis, this and this.",
    "start": "922111",
    "end": "930650"
  },
  {
    "text": "So at least this\ninstruction is in the corner set of both s1 and s2, and\nthis also is in both s1 and s2.",
    "start": "930650",
    "end": "938550"
  },
  {
    "text": "So because of these\ntwo instructions, I basically have\ninterference in here. Actually, this is a good one.",
    "start": "938550",
    "end": "943580"
  },
  {
    "text": "So this instruction,\nso less interference. And also same here, s3 and\ns2, so there's interference.",
    "start": "943580",
    "end": "949850"
  },
  {
    "text": "So these two webs interfere.",
    "start": "949850",
    "end": "955100"
  },
  {
    "text": "OK. So again, we try to\nabstract and have",
    "start": "955100",
    "end": "960270"
  },
  {
    "text": "a nice representation of that. It's called interference graph. So what that means is\neach web get a node.",
    "start": "960270",
    "end": "965820"
  },
  {
    "text": "And each edge\ndescribes interference. So in here, what's my edges?",
    "start": "965820",
    "end": "972420"
  },
  {
    "text": " AUDIENCE: s1, s2.",
    "start": "972420",
    "end": "977879"
  },
  {
    "text": "PROFESSOR: s1 to s2. AUDIENCE: s2 to s3. PROFESSOR: s2 to s3. I had those two edges,\nbasically with no interference.",
    "start": "977880",
    "end": "985410"
  },
  {
    "text": "So here's, again, so now we\nhave an elegant representation. And now the need for registers\ncan be elegantly matched",
    "start": "985410",
    "end": "994950"
  },
  {
    "text": "into a very nice\ntheoretical problem, which is graph-coloring problem.",
    "start": "994950",
    "end": "1000000"
  },
  {
    "text": "So register allocation\nusing graph coloring says each web is\nallocated a register.",
    "start": "1000000",
    "end": "1006230"
  },
  {
    "text": "Each register is a color. We assume we have four. Registers have four color. So when each node gets a\nregister, it get a color.",
    "start": "1006230",
    "end": "1013970"
  },
  {
    "text": "However, if two\nwebs interfere, they can't have the same register.",
    "start": "1013970",
    "end": "1019279"
  },
  {
    "text": "What that means is if I have\nan edge between two nodes, they can't have the same color.",
    "start": "1019280",
    "end": "1026162"
  },
  {
    "text": "OK, so this is a graph\ncarrying problem. So I just map this\nvery complex problem to very nice\ntheoretical problem. Now, basically, I\nhave to go solve",
    "start": "1026162",
    "end": "1032920"
  },
  {
    "text": "this graph-coloring problem. OK, so what-- basically\nnow I had to do",
    "start": "1032920",
    "end": "1038560"
  },
  {
    "text": "is I build this graph,\ninterference graph. Now, I need to assign colors\nto each node of the graph.",
    "start": "1038560",
    "end": "1044439"
  },
  {
    "text": "And if two nodes have the edge,\nI can't have the same color. And this is a very\nsimple problem.",
    "start": "1044440",
    "end": "1050295"
  },
  {
    "text": "We map through the problem, but\nthe problem is not that simple. It's an NP complete problem. But we have good heuristics.",
    "start": "1050295",
    "end": "1055990"
  },
  {
    "text": "So we can actually get\na really good solution. So can we always come\nup with a solution?",
    "start": "1055990",
    "end": "1063929"
  },
  {
    "text": "AUDIENCE: You have\nfive or more colors.  PROFESSOR: No, because I might\nhave a graph that will have--",
    "start": "1063930",
    "end": "1071380"
  },
  {
    "text": "because that's-- five or more\ncolors is assume a planar graph-- AUDIENCE: Right. PROFESSOR: --OK? And this is-- there's\nno planar graph.",
    "start": "1071380",
    "end": "1077258"
  },
  {
    "text": "You can have huge\namount of edges in here. So if you have non-planar\ngraph, I mean, it depends on-- it depends, basically.",
    "start": "1077258",
    "end": "1083410"
  },
  {
    "text": "I mean, this is-- you can't always tell. And you can't even always tell\nbecause it's a concrete problem",
    "start": "1083410",
    "end": "1089259"
  },
  {
    "text": "to actually go even tell. So one color, you see?",
    "start": "1089260",
    "end": "1095095"
  },
  {
    "text": "You see there's no\ninterference edges in here, OK? ",
    "start": "1095095",
    "end": "1101080"
  },
  {
    "text": "Two-- OK. AUDIENCE: [INAUDIBLE]",
    "start": "1101080",
    "end": "1107030"
  },
  {
    "text": "PROFESSOR: OK, so\nhave you taken-- we actually learned in\n[INAUDIBLE] OK, so OK,",
    "start": "1107030",
    "end": "1115970"
  },
  {
    "text": "we're now taking six over six. So you're learning to the-- so what that means is most\nproblems have a linear time",
    "start": "1115970",
    "end": "1124730"
  },
  {
    "text": "solution or a\npolynomial solution.",
    "start": "1124730",
    "end": "1131150"
  },
  {
    "text": "That means you can say the\ntime to take the solution has a polynomial equation.",
    "start": "1131150",
    "end": "1137220"
  },
  {
    "text": "So it's n squared,\nn cubed, n whatever. And p completes means\nit's exponential. That means you add one\nmore thing to the problem.",
    "start": "1137220",
    "end": "1144290"
  },
  {
    "text": "The size keep doubling. And so it's something\nin the computer science basically says, this is kind\nof the limit of complexity.",
    "start": "1144290",
    "end": "1151503"
  },
  {
    "text": "After that, it becomes\nharder to compute because every time you just\nincrease a problem by 1, time it takes doubles.",
    "start": "1151503",
    "end": "1157220"
  },
  {
    "text": "And at some point it\nbecomes very unwieldy. So most of the time, I\nthink at least classically",
    "start": "1157220",
    "end": "1165440"
  },
  {
    "text": "polynomial problems\nare something that you go brute forces. We know we actually\nhave n squared, and you can solve that.",
    "start": "1165440",
    "end": "1170818"
  },
  {
    "text": "People don't try to come\nup with easy solutions. But the minute we start\nhitting exponential problems,",
    "start": "1170818",
    "end": "1176660"
  },
  {
    "text": "people just said,\nOK, that can be done. So we had come up with\napproximate solutions.",
    "start": "1176660",
    "end": "1182856"
  },
  {
    "text": "In compilers, you got to\nbe still careful, though, because today's computers\nare so darn fast.",
    "start": "1182857",
    "end": "1188659"
  },
  {
    "text": "Even for NP complete-- even\nfor exponential solutions, if the number of-- if n is small\nenough, you can probably do it.",
    "start": "1188660",
    "end": "1196260"
  },
  {
    "text": "So just by saying\nit's exponential, you have to be thinking,\nOK, expression on what? n,",
    "start": "1196260",
    "end": "1201350"
  },
  {
    "text": "n is 10, 100, or 10,000? If n and 100, probably\nwe can still do s today",
    "start": "1201350",
    "end": "1207140"
  },
  {
    "text": "if it is really important. So because computers\nare fast enough-- there was a time\nwhere a minute you'd",
    "start": "1207140",
    "end": "1212870"
  },
  {
    "text": "say it's empty completely. You say, OK, throw\nyour hands and say-- let me do something different. But today it's becoming\na little bit more murky.",
    "start": "1212870",
    "end": "1220360"
  },
  {
    "text": "So here we throw our\nhands and say, OK, so let me say-- so it's two colors. How many colors here? ",
    "start": "1220360",
    "end": "1228377"
  },
  {
    "text": "AUDIENCE: Two. AUDIENCE: Two. AUDIENCE: Two. PROFESSOR: Two, can see the two. OK.",
    "start": "1228377",
    "end": "1233610"
  },
  {
    "text": "AUDIENCE: But you can't\nreally see the lines. PROFESSOR: Oops. Oh, darn. Sorry. AUDIENCE: [INAUDIBLE]",
    "start": "1233610",
    "end": "1239440"
  },
  {
    "text": "PROFESSOR: OK, can\nwe get the light? That's OK. I should have made the--",
    "start": "1239440",
    "end": "1244670"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Oh, yeah, yeah. Yeah.",
    "start": "1244670",
    "end": "1249910"
  },
  {
    "text": "Oh, OK. ",
    "start": "1249910",
    "end": "1255147"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: No, no,\nthis is good because I can see the lines very nicely.",
    "start": "1255147",
    "end": "1260390"
  },
  {
    "text": "OK. AUDIENCE: Oh, OK. PROFESSOR: Oops, that\ndidn't help that I went--",
    "start": "1260390",
    "end": "1266030"
  },
  {
    "text": "OK, now how much? How many colors? AUDIENCE: Three.",
    "start": "1266030",
    "end": "1271700"
  },
  {
    "text": "AUDIENCE: Three. AUDIENCE: Yeah. [LAUGHTER] PROFESSOR: OK, OK, so you\nhave time to do a quick--",
    "start": "1271700",
    "end": "1281664"
  },
  {
    "text": "ah-ha, this one\nactually is readable. OK, good. So-- OK.",
    "start": "1281664",
    "end": "1289600"
  },
  {
    "text": "So since it's NP\ncomplete, we come up with a heuristic solution.",
    "start": "1289600",
    "end": "1295490"
  },
  {
    "text": "So what you want to\ndo is color graph in colors, number of registers. So if the degree--",
    "start": "1295490",
    "end": "1301390"
  },
  {
    "text": "that means if you\nlook at a node, if it has less than\nN edges going out,",
    "start": "1301390",
    "end": "1309490"
  },
  {
    "text": "you can color the graph. So if every node has less\nthan N, just going no. You can color the graph\nperfectly because that means--",
    "start": "1309490",
    "end": "1316240"
  },
  {
    "text": "what happens is if all the\nneighboring edges have already have colors, there might\nbe N minus 1 colors.",
    "start": "1316240",
    "end": "1321952"
  },
  {
    "text": "I already have one,\nat least I have one color left to color myself. So I can never\nrun out of colors.",
    "start": "1321952",
    "end": "1327633"
  },
  {
    "text": "So at that point,\nyou have a graph that's probably colorable,\nso if there's less than N. And so if there's\ngreater or equal to N,",
    "start": "1327633",
    "end": "1337330"
  },
  {
    "text": "and there are some edges\nwith-- some nodes with more than n edges, maybe colorable.",
    "start": "1337330",
    "end": "1342600"
  },
  {
    "text": "I'm not sure. OK, this is where the NP\ncomplete must come about. So there might be color, but\nwe come up with a strategy",
    "start": "1342600",
    "end": "1349840"
  },
  {
    "text": "that we can actually find that. So what we do is we come up\nwith a very simple algorithm.",
    "start": "1349840",
    "end": "1356750"
  },
  {
    "text": "The algorithm-- see,\nmost of the time, what I try to do in\nmy presentations is, instead of giving you this\nvery algorithms and say,",
    "start": "1356750",
    "end": "1364152"
  },
  {
    "text": "here's algorithm, I\nwant to actually give example to kind of\ngive you intuition because algorithms are\ngreat, but I don't think",
    "start": "1364152",
    "end": "1369280"
  },
  {
    "text": "you'll remember the algorithm. But if we at least give the\nintuition what's going on, it's better.",
    "start": "1369280",
    "end": "1374500"
  },
  {
    "text": "So what you do is if it is-- we look at all the\nnodes less than n. See, I know I can color that.",
    "start": "1374500",
    "end": "1379960"
  },
  {
    "text": "I will push them into a speck. And as I put some\nnode into a stack,",
    "start": "1379960",
    "end": "1385990"
  },
  {
    "text": "I eliminate the edges\nbecause that node-- when a node goes, they just go. So at some point,\nyou might get stuck",
    "start": "1385990",
    "end": "1393070"
  },
  {
    "text": "because you put all\nthe nodes into edges, but all the nodes that\nare left, everybody has more than N edges in there.",
    "start": "1393070",
    "end": "1401183"
  },
  {
    "text": "So at that point, we\nhave to do is done. I can't color that\nsome component. Then I have to start\nremoving nodes and say,",
    "start": "1401183",
    "end": "1406600"
  },
  {
    "text": "this node is not colorable. That means I have\nto spill that node. Until you find a graph,\nat least until you",
    "start": "1406600",
    "end": "1412390"
  },
  {
    "text": "find some more nodes that\nare less than N edges and you start doing that, until\nyou run out of all the nodes.",
    "start": "1412390",
    "end": "1417670"
  },
  {
    "text": " So when you run out\nof all the notes,",
    "start": "1417670",
    "end": "1423370"
  },
  {
    "text": "you basically start popping\nthings out of that stack. And every time\nyou pop something, there should be\na color available",
    "start": "1423370",
    "end": "1430240"
  },
  {
    "text": "that you can color that. And then you keep popping\nthings out of the stack, keep coloring. Note that this can\nhappen in a graph that",
    "start": "1430240",
    "end": "1436960"
  },
  {
    "text": "has, at the\nbeginning, has a bunch of nodes that has\ngreater than N edges, OK?",
    "start": "1436960",
    "end": "1442870"
  },
  {
    "text": "But the way, if you keep popping\nthe nodes at some point-- because the minute I remove\nthe node, edge also go away--",
    "start": "1442870",
    "end": "1449605"
  },
  {
    "text": "I might be able to put\nall the nodes back in. So it's not that I'm just\ncoloring a graph that has-- where all nodes are\nless than n edges.",
    "start": "1449605",
    "end": "1456590"
  },
  {
    "text": "Some nodes might have\ngreater than N edges. I'm going to still do that. But still, there might be\ncases that it might not.",
    "start": "1456590",
    "end": "1462710"
  },
  {
    "text": "So here's a graph because\nyou can see that thing. So I want to do a\nthree color, this one.",
    "start": "1462710",
    "end": "1468070"
  },
  {
    "text": "So is it obvious? I mean, can I just do\nthree color this one? I mean, there are--",
    "start": "1468070",
    "end": "1473620"
  },
  {
    "text": "I mean, the simple theorem is if\nevery node is less than three,",
    "start": "1473620",
    "end": "1480080"
  },
  {
    "text": "I can. But here, there are three\nnodes that-- actually, four nodes that has three edges. So I can't really\n[INAUDIBLE] three color.",
    "start": "1480080",
    "end": "1485920"
  },
  {
    "text": "But if you go about\ndoing the [INAUDIBLE],, we will color this. So what you do is first\nyou find this node and say,",
    "start": "1485920",
    "end": "1491990"
  },
  {
    "text": "ah-ha, this node has\nless than three too. So I can put that in there.",
    "start": "1491990",
    "end": "1497800"
  },
  {
    "text": "That will eliminate that node. And as soon as I\neliminate that node, I found actually\ntwo more nodes that actually have less than three.",
    "start": "1497800",
    "end": "1504520"
  },
  {
    "text": "I can keep eliminating that. And now I have all three nodes\nthat have less than three, and I can keep pushing\nthose nodes into the graph.",
    "start": "1504520",
    "end": "1510040"
  },
  {
    "text": " Go ahead. So I should put a\nzero, but I didn't.",
    "start": "1510040",
    "end": "1517140"
  },
  {
    "text": "But what that means\nis at the beginning, I had a graph that\nis not colorable. But this heuristics let\nme color that graph.",
    "start": "1517140",
    "end": "1522400"
  },
  {
    "text": "So now what I'll do is\nI pick my first node and say, OK, pick a\ncolor, put it there, and bring another node.",
    "start": "1522400",
    "end": "1528090"
  },
  {
    "text": "I should have a color\nthat I should color it. Get a color in here. Bring another node. Next node I should\nhave color in my color.",
    "start": "1528090",
    "end": "1534540"
  },
  {
    "text": "I have a third color. What color goes here? ",
    "start": "1534540",
    "end": "1540010"
  },
  {
    "text": "We go here. And what color goes here? AUDIENCE: Blue.",
    "start": "1540010",
    "end": "1545809"
  },
  {
    "text": "PROFESSOR: Blue or brown. So I can go there. So now I actually\nfind a color, so it's a very simple algorithm.",
    "start": "1545810",
    "end": "1551350"
  },
  {
    "text": "It can go. And it's, in fact, easy\nto find for most cases.",
    "start": "1551350",
    "end": "1558519"
  },
  {
    "text": "This one, on the other\nhand, can give you problems. So there, what happens is\nnow I put this first one.",
    "start": "1558520",
    "end": "1565930"
  },
  {
    "text": "I still don't have any nodes-- every node has more than,\ngreater than equal to edges.",
    "start": "1565930",
    "end": "1574300"
  },
  {
    "text": "So I can't take anything out. At that point, I\nhave-- now I have decided how to spill\nbecause my algorithm now",
    "start": "1574300",
    "end": "1579460"
  },
  {
    "text": "run out of options in here. And this is actually-- in fact,\nit's not tolerable this graph, even.",
    "start": "1579460",
    "end": "1585070"
  },
  {
    "text": "So now I had to\nfigure out the edge. And I said this edge,\nI'm going to spill. And now I'm going to\nput the rest of it",
    "start": "1585070",
    "end": "1591190"
  },
  {
    "text": "and then keep coloring,\nand I can basically keep coloring that. ",
    "start": "1591190",
    "end": "1598299"
  },
  {
    "text": "OK, so now what happens\nis you came to a situation where you can basically--",
    "start": "1598300",
    "end": "1606520"
  },
  {
    "text": "between spilling,\ndoing spilling, you can actually come up with\na register allocation somehow.",
    "start": "1606520",
    "end": "1613270"
  },
  {
    "text": "So what's next? So now we have this thing.",
    "start": "1613270",
    "end": "1623242"
  },
  {
    "text": "Now, what do we do\nwith the spilled webs? What do you do with that? We can do option one,\nwhich is pick a web,",
    "start": "1623242",
    "end": "1628370"
  },
  {
    "text": "and pick-- and allocate\nvalues in memory. So you can say, darn, now I\ncan, that I took that node,",
    "start": "1628370",
    "end": "1633840"
  },
  {
    "text": "that there and say this one, I'm\ngoing to just put it in memory. That means all defs\nto go to memory, all users go to\ncome from memory.",
    "start": "1633840",
    "end": "1641090"
  },
  {
    "text": "And you might, in fact, have\nto increase instructions because if you are\ndoing operations",
    "start": "1641090",
    "end": "1646713"
  },
  {
    "text": "with two websites in\nmemory, you actually have to add instructions in here. Option two is not [INAUDIBLE]\nand try to do other things,",
    "start": "1646713",
    "end": "1653810"
  },
  {
    "text": "like splitting web into\nmultiple webs and stuff like that, to basically\ntrying to make the graph",
    "start": "1653810",
    "end": "1659780"
  },
  {
    "text": "colorable again. So can I do things to\nmake the graph colorable? ",
    "start": "1659780",
    "end": "1666865"
  },
  {
    "text": "And in either case,\nwe had a recolor. So at some point it's\nI'm spilling this, or I will chain the graph,\nand I'll create more webs.",
    "start": "1666865",
    "end": "1672800"
  },
  {
    "text": "I will do some other\ntransformations and try to recolor it. ",
    "start": "1672800",
    "end": "1678259"
  },
  {
    "text": "So the key thing is\nwhich web to pick. Now I have a bunch of choices. So at least you are to\npick something that has",
    "start": "1678260",
    "end": "1685280"
  },
  {
    "text": "greater or equal to N edges. That's obvious. But what we want\nis we want to pick",
    "start": "1685280",
    "end": "1693493"
  },
  {
    "text": "something that has\na minimal spill cost if you want to spill that. And what that means\nis if you place",
    "start": "1693493",
    "end": "1700700"
  },
  {
    "text": "that variable in memory, OK,\nwhat's your cost of doing that? And cost can come in\nmany different things",
    "start": "1700700",
    "end": "1707760"
  },
  {
    "text": "because you might have\nadditional instructions, or you might have more expensive\ninstructions every time I use that.",
    "start": "1707760",
    "end": "1714570"
  },
  {
    "text": "And the extra load store\ninstructions and even",
    "start": "1714570",
    "end": "1721350"
  },
  {
    "text": "the chains, you had to come\nup with a more expensive instruction. So ideal spill cost is\ntrying to figure out",
    "start": "1721350",
    "end": "1727560"
  },
  {
    "text": "the dynamic execution of both\nspilled versus unspilled. And OK, now if I\ndynamically execute",
    "start": "1727560",
    "end": "1733200"
  },
  {
    "text": "with this in register versus\nspill, what's my cost? But this, you can't\ndo because there",
    "start": "1733200",
    "end": "1739260"
  },
  {
    "text": "are many things like\nbranches you don't know, loops, how many times you\nexecute you don't know. There's a lot of things. You can't dynamically\nget the exact number.",
    "start": "1739260",
    "end": "1745720"
  },
  {
    "text": "So what you need\nto do is come up with some kind of approximation. The solution is some kind\nof static approximations.",
    "start": "1745720",
    "end": "1751140"
  },
  {
    "text": "You can say, if you are-- have a real compiler\nwith profile information,",
    "start": "1751140",
    "end": "1756897"
  },
  {
    "text": "you can use that and\nsay I know this branch, it's why how much cost. But otherwise you\ncan actually come up with a very poor man's\nestimation of the cost.",
    "start": "1756897",
    "end": "1763900"
  },
  {
    "text": "So the poor man's estimations\nof the cost basically is every--",
    "start": "1763900",
    "end": "1769020"
  },
  {
    "text": "so here's a very\nsimple estimation. Every forward branch, 50-50.",
    "start": "1769020",
    "end": "1774650"
  },
  {
    "text": "You have no idea it's going. Every backward branch,\nwhich is looped, 10, 9-- 10, 9, till 101.",
    "start": "1774650",
    "end": "1782110"
  },
  {
    "text": "Going back. Loose means you keep\naround loops a lot. So backward branches\ngo down a lot. But if the branches\nboth are going forward,",
    "start": "1782110",
    "end": "1788860"
  },
  {
    "text": "then it's just some kind of\ncondition, something like that, just you can figure out.",
    "start": "1788860",
    "end": "1795210"
  },
  {
    "text": "So you can say loops take\n10 to 100 times in there. And the spill cost\nis basically, you",
    "start": "1795210",
    "end": "1800450"
  },
  {
    "text": "can look at the\nsum of doing that. I mean, the other way to do that\nis so, if you have unstructured",
    "start": "1800450",
    "end": "1806720"
  },
  {
    "text": "graph, you can use those\nkind of computation and calculate to reach\neach point, what's the probability with that.",
    "start": "1806720",
    "end": "1813470"
  },
  {
    "text": "If you have a\nstructured graph, you know every time you have\na loop, you say, OK, ah-ha, that gets 100 times\nexecuted than something",
    "start": "1813470",
    "end": "1821120"
  },
  {
    "text": "outside the loop. So if you know the\nloop structure, you can actually get a\nmuch better estimate. So it's up to you\nwhen to do that.",
    "start": "1821120",
    "end": "1827467"
  },
  {
    "text": "I mean, after you map,\njust bring the graph down",
    "start": "1827467",
    "end": "1832700"
  },
  {
    "text": "and flatten it. You can do it that\nlevel, or when you have the loop information,\nyou can calculate, annotate,",
    "start": "1832700",
    "end": "1838040"
  },
  {
    "text": "and bring it down. So, up to you. And basically, now\nwhat you want to do",
    "start": "1838040",
    "end": "1843630"
  },
  {
    "text": "is choose the web with\nthe lowest spill cost to basically do that. So in here, I know\nthe loop structure.",
    "start": "1843630",
    "end": "1850113"
  },
  {
    "text": "And what happens is\nspill cost for x is-- the store cost and load cost\nfor x, spill cost for y in here",
    "start": "1850113",
    "end": "1859980"
  },
  {
    "text": "is 9 times that because\nthat is inside the loop. That happens many, many times. So the moral of the story is\nif you're inside the loop,",
    "start": "1859980",
    "end": "1866940"
  },
  {
    "text": "you should not try\nto spill things that you access within the loop. And so that's simple spill.",
    "start": "1866940",
    "end": "1873650"
  },
  {
    "text": "Simple spill means [INAUDIBLE]\nselect one for spilling. And now I go figure\nout a web hopefully",
    "start": "1873650",
    "end": "1880550"
  },
  {
    "text": "that doesn't have accesses\nin the innermost loop. And that's a good web to spill--",
    "start": "1880550",
    "end": "1887091"
  },
  {
    "text": "OK, if you know\nthe loop structure. That's a nice thing to do. So there's another\nthings you can do. The other thing you\ncan do is splitting.",
    "start": "1887092",
    "end": "1894460"
  },
  {
    "text": "So the splitting\nmeans you have a web, and the reason you\nhave this live range is the entire lifetime of the\nweb, you have to keep a value.",
    "start": "1894460",
    "end": "1902809"
  },
  {
    "text": "How about if you split the web? And that means I divided that--",
    "start": "1902810",
    "end": "1909280"
  },
  {
    "text": "node is now two nodes. And by doing that, I\nmight be able to get to a graph that actually become\nuncolorable because now there",
    "start": "1909280",
    "end": "1916990"
  },
  {
    "text": "was a node that has many,\nmany edges coming in. Now you split it. And hopefully, each\nwill have less amount",
    "start": "1916990",
    "end": "1922990"
  },
  {
    "text": "of edges coming into it\nbecause they interfere with different live ranges. So that's a nice thing to do.",
    "start": "1922990",
    "end": "1930110"
  },
  {
    "text": "So here's a simple example. I have a loop in here. And I have three\ndifferent live ranges.",
    "start": "1930110",
    "end": "1936430"
  },
  {
    "text": "And x and y are only\nwithin that inner body.",
    "start": "1936430",
    "end": "1942880"
  },
  {
    "text": "And z goes all the way. And the interesting\nthing about z is its use and def\nat the beginning. And within the loop,\nnobody uses it.",
    "start": "1942880",
    "end": "1949180"
  },
  {
    "text": "And they only use\nthis at the end. That's the best case scenario. And now if you want to do--",
    "start": "1949180",
    "end": "1954980"
  },
  {
    "text": "so it's my interference graph. Everybody interferes\nwith everybody else. So it's just a full\ninterference graph. So you want to do two--\nhere, two register.",
    "start": "1954980",
    "end": "1961450"
  },
  {
    "text": "There's not two colorable. And so you have to do something. So what can you do?",
    "start": "1961450",
    "end": "1967210"
  },
  {
    "text": "One thing you can do is\nsplit the web and say--",
    "start": "1967210",
    "end": "1972640"
  },
  {
    "text": "so what that means is I\nkeep within that region. So instead of saying-- one thing you can do\nis say every uses of c,",
    "start": "1972640",
    "end": "1979817"
  },
  {
    "text": "and I'm just going\nto use from memory. I'm not doing it. In here I said, OK,\nwithin that first region, I will keep it in register.",
    "start": "1979817",
    "end": "1988300"
  },
  {
    "text": "So all the users\nactually get register. At the end of the region,\nI put it into memory.",
    "start": "1988300",
    "end": "1993445"
  },
  {
    "text": "And again, at the\nbottom, next region I will get it out of the memory\nand keep it in the registry. In here it's not-- the bottom\nis not that much of issue",
    "start": "1993445",
    "end": "1999280"
  },
  {
    "text": "because only one use. But if there are multiple users,\nI use this from a registry instead of again and\nagain getting from memory.",
    "start": "1999280",
    "end": "2005039"
  },
  {
    "text": "So because of that, I can\nminimize that memory access, basically. So here, what\nhappens is the minute",
    "start": "2005040",
    "end": "2011280"
  },
  {
    "text": "you do that, now we\nhave two different that got split into two, basically.",
    "start": "2011280",
    "end": "2018090"
  },
  {
    "text": "z got split into two on c1\nand c2, and that's now that. And now I can\ntwo-color this one.",
    "start": "2018090",
    "end": "2024150"
  },
  {
    "text": "So I can have, basically-- in here, so what\nhappens is [INAUDIBLE]",
    "start": "2024150",
    "end": "2030120"
  },
  {
    "text": "get saved into memory. So what that means is split-- web that gets split actually\nhas a register located",
    "start": "2030120",
    "end": "2037559"
  },
  {
    "text": "in each of them and also has\na memory location now because that web now actually has to\nbe in memory at some point.",
    "start": "2037560",
    "end": "2042670"
  },
  {
    "text": "So what that means is when\nyou go from r1 to r2-- because when you go inside,\nstart going in the loop,",
    "start": "2042670",
    "end": "2048508"
  },
  {
    "text": "you actually had to put\nit in the memory location and then run, get use\nfor something else, and come out of it.",
    "start": "2048508",
    "end": "2055087"
  },
  {
    "text": "OK, so you have to do this\nstore and loading here, store and load.",
    "start": "2055088",
    "end": "2060610"
  },
  {
    "text": "So what are the good\nplaces to split? ",
    "start": "2060610",
    "end": "2065819"
  },
  {
    "text": "So you need to basically find\na place in the graph it's not colorable, point in the graph\nthat has more than-- so that--",
    "start": "2065820",
    "end": "2077849"
  },
  {
    "text": "and then what you\nneed to do is need to pick a web saying that for\nthe largest region, that's",
    "start": "2077850",
    "end": "2084419"
  },
  {
    "text": "not been used. And then at that point,\nyou will split that web and then redo the\ninterference graph",
    "start": "2084420",
    "end": "2092520"
  },
  {
    "text": "and try to recolor this thing.  So the cost of splitting\na node is every time",
    "start": "2092520",
    "end": "2102120"
  },
  {
    "text": "you cross that, the\nsplit point, we actually had to do a save and\nstore from memory. So you're adding saves and\nstores from that thing,",
    "start": "2102120",
    "end": "2109170"
  },
  {
    "text": "and it probably can be\nestimated by loop nesting if you had a split\ninside the loop,",
    "start": "2109170",
    "end": "2114660"
  },
  {
    "text": "every time the loop iterations,\nyou had to go do that. The benefit is increase the\ncolorability of a graph,",
    "start": "2114660",
    "end": "2120690"
  },
  {
    "text": "splitting the web\ninterface there. And this can be measured by the\ndegree of interference graph.",
    "start": "2120690",
    "end": "2130480"
  },
  {
    "text": "So basically, you\nbetter pick a web that actually is\ndegree large than n",
    "start": "2130480",
    "end": "2136230"
  },
  {
    "text": "because otherwise\nit doesn't help. You want to split that. m And the benefit is--",
    "start": "2136230",
    "end": "2143910"
  },
  {
    "text": "and also, there's a cost. It depends on how many accesses\nwithin the innermost loop",
    "start": "2143910",
    "end": "2149820"
  },
  {
    "text": "of place you want to split\nthat actually this has. So you want to do nice things.",
    "start": "2149820",
    "end": "2156000"
  },
  {
    "text": "You want to find-- if you have innermost loop\nsomewhere that has interference that you have to\nspill, you need to see",
    "start": "2156000",
    "end": "2162090"
  },
  {
    "text": "whether you can find some\nwebs where there's no access. It's just data going\nacross that loop.",
    "start": "2162090",
    "end": "2167700"
  },
  {
    "text": "And at that point, that's\na good place to do that. And you can do a\nvery simple, here, heuristic to do\nthat, just basically.",
    "start": "2167700",
    "end": "2174300"
  },
  {
    "text": "If you have a loop structure,\nyou can just go do that. And if we talked about\nfilm optimizations--",
    "start": "2174300",
    "end": "2180440"
  },
  {
    "text": "so form optimization, I want\nto talk about this register coalescing, register\ntargeting of pre-coloring,",
    "start": "2180440",
    "end": "2188030"
  },
  {
    "text": "pre-splitting the\nwebs, and finally kind of current research topics\nlike interprocedural register",
    "start": "2188030",
    "end": "2194869"
  },
  {
    "text": "location. So I assume I have a\nstatement like that. It's the equal SI.",
    "start": "2194870",
    "end": "2201040"
  },
  {
    "text": "Just simple assignment. And what happens is a stain SI\nmight have two different waves.",
    "start": "2201040",
    "end": "2206700"
  },
  {
    "text": "We'll have two different\nwaves because one is a use and one is a def, but since\nthey are in a statement,",
    "start": "2206700",
    "end": "2213869"
  },
  {
    "text": "they are not matched together. And the week in the compile\nregion read a lot of code",
    "start": "2213870",
    "end": "2219510"
  },
  {
    "text": "like that. And they might have\ntwo different verbs that, in fact, doesn't interfere\nat all because the last use",
    "start": "2219510",
    "end": "2224670"
  },
  {
    "text": "of SGA and the first-- last use of SI is there and\nthe first difference of SGA.",
    "start": "2224670",
    "end": "2229750"
  },
  {
    "text": "So if we are\n[INAUDIBLE] of web, you can basically say just\ncombine those webs together.",
    "start": "2229750",
    "end": "2236060"
  },
  {
    "text": "OK, instead of having a bunch\nof very small, small webs, you can combine these web. So the process, now we have--",
    "start": "2236060",
    "end": "2241359"
  },
  {
    "text": "basically, it's simple\ncopy propagation in here. So copy propagation might have\ngotten it, but you can do that.",
    "start": "2241360",
    "end": "2247140"
  },
  {
    "text": "And it basically use the\nnumber of instructions. You just got rid of\nthat copy instruction because it's already\nin the register.",
    "start": "2247140",
    "end": "2252200"
  },
  {
    "text": "Cons is, you might increase\na degree by combining. So here's the interesting thing.",
    "start": "2252200",
    "end": "2257610"
  },
  {
    "text": "So before you run\ncopy propagation, you might have to have\nsome notion about what happens because if you do\ngood enough copy propagation,",
    "start": "2257610",
    "end": "2264200"
  },
  {
    "text": "you might end up-- ending up combining\ntoo many things, make a colorable non-colorable\nbecause now we have",
    "start": "2264200",
    "end": "2270050"
  },
  {
    "text": "much more overlapping webs. So this is where\nall those things-- I mean, if you want to\nwrite a real good compile,",
    "start": "2270050",
    "end": "2276020"
  },
  {
    "text": "all those things had\nto come together. You say, OK, copy\npropagation is great. But hey, if you do too\nmuch copy propagation, I might run into problems.",
    "start": "2276020",
    "end": "2284140"
  },
  {
    "text": "So these are good optimization,\nbut it's not always readable. So you have be careful in there.",
    "start": "2284140",
    "end": "2291380"
  },
  {
    "text": "So other thing is\nregister targeting. So here's the case where there\nare many variables that gas",
    "start": "2291380",
    "end": "2299990"
  },
  {
    "text": "pre-assigned registers. So if you are doing a call,\nif you're doing a full calling convention, there are a\nbunch of-- first arguments",
    "start": "2299990",
    "end": "2305900"
  },
  {
    "text": "has to go into a bunch of\nvery specific registers. Return value has to go\ninto a certain register. And there are a lot\nof these things.",
    "start": "2305900",
    "end": "2311450"
  },
  {
    "text": "In the final one, are you\nusing your calling convention or are we using the native? AUDIENCE: Native. Native. PROFESSOR: OK, so\nwe're using native.",
    "start": "2311450",
    "end": "2317360"
  },
  {
    "text": "Is it six? AUDIENCE: Six. PROFESSOR: Six, so\nthere are very-- for six arguments, I should\ngo to some registers.",
    "start": "2317360",
    "end": "2322730"
  },
  {
    "text": "So if you know that, if\nyou don't deal with-- if you deal with just generally,\nit might get into a different",
    "start": "2322730",
    "end": "2329119"
  },
  {
    "text": "register, and then at the-- before you call,\nyou haf to copy. So you might as well say,\nOK, I know this variable has",
    "start": "2329120",
    "end": "2334520"
  },
  {
    "text": "to be in register rx. I will start it there. I'll just pre-allocate\nthat register because it",
    "start": "2334520",
    "end": "2339605"
  },
  {
    "text": "has to be at the end of it. And I can eliminate the copy. And this can actually reduce a\nbunch of copying that needed.",
    "start": "2339605",
    "end": "2346990"
  },
  {
    "text": "So, to get a look at\nthe registers in there. OK, so the pre-splitting\nthe web is basically also--",
    "start": "2346990",
    "end": "2356060"
  },
  {
    "text": "one thing you can do\nis higher level path. Before you go all the way\ndown to unstructured graph,",
    "start": "2356060",
    "end": "2364550"
  },
  {
    "text": "in your structured\ngraph, you can look at variables that are\nlive across loops but unused.",
    "start": "2364550",
    "end": "2372900"
  },
  {
    "text": "You can basically look-- marketing, it split\nthese things because I know I have these very\nlarge debt regions.",
    "start": "2372900",
    "end": "2381412"
  },
  {
    "text": "And I can start\nsaying, OK, I know splitting this is better\nthan anything else.",
    "start": "2381412",
    "end": "2387880"
  },
  {
    "text": "And most of the times, breaking\nup will pay a very small cost, one save. But on hand, you\ncan make a graph",
    "start": "2387880",
    "end": "2394950"
  },
  {
    "text": "that's much easier to color. So you can find\nvery strategic place to break up, things\nlike a call site.",
    "start": "2394950",
    "end": "2401416"
  },
  {
    "text": "For a call site you\nhave to spill anyways. So you might as well break\nthe graph and not have--",
    "start": "2401416",
    "end": "2407692"
  },
  {
    "text": "because what happens,\nyou are in the register. You spill it to memory,\nand we bring it-- you bring it back to\nthe same register.",
    "start": "2407693",
    "end": "2413240"
  },
  {
    "text": "And you're paying the cost of\nhaving this live range by-- you're already doing\na save and restore. Anyways, so you might say--\nif you're doing calls,",
    "start": "2413240",
    "end": "2419869"
  },
  {
    "text": "you might as well\nbreak up in there. Around large loop nest, you\nmight say, OK, around large-- there's a large loop nest\nhere, and if we are not",
    "start": "2419870",
    "end": "2426920"
  },
  {
    "text": "using that value, I'm going\nto break up the thing. So you can start the question\nby saying I'm creating--",
    "start": "2426920",
    "end": "2433244"
  },
  {
    "text": "so basically, you\ncan set up something, I will never create webs\naround function calls, things like that.",
    "start": "2433245",
    "end": "2438900"
  },
  {
    "text": "So that can make it easier. And then if you get few\nof those things right, then at the end of the\nthing, as a safety value,",
    "start": "2438900",
    "end": "2445730"
  },
  {
    "text": "you will just spill\nthings that are not tolerable call because\nyou'll get into a situation",
    "start": "2445730",
    "end": "2450964"
  },
  {
    "text": "that you'll have-- very rarely\nhad non-colorable graphs, and they can spill anyways\nand if you actually",
    "start": "2450965",
    "end": "2457039"
  },
  {
    "text": "do some pre-splitting. So then you don't have to-- you don't have to get into\na situation where you end up",
    "start": "2457040",
    "end": "2462890"
  },
  {
    "text": "in a non-colorable graph, and at\nthat point, trying to go figure out where to split.",
    "start": "2462890",
    "end": "2468530"
  },
  {
    "text": "You can just start\nwith some pre-splitting and actually go do\nregister location.",
    "start": "2468530",
    "end": "2474628"
  },
  {
    "text": "And if you find its\ngraph is not colorable, just spill instead\nof trying to split. So you can come up\nwith some strategies",
    "start": "2474628",
    "end": "2479990"
  },
  {
    "text": "in doing [INAUDIBLE]. The final thing I\nwant to talk to you about is interprocedural\nregister allocation.",
    "start": "2479990",
    "end": "2486365"
  },
  {
    "text": "This is not something\nany of you guys will ever do for this project. It'll be crazy to do that. And what that means is, because\na lot of times what happens",
    "start": "2486365",
    "end": "2494450"
  },
  {
    "text": "is these calling conventions\nhas a certain number of callers. Say, when certain numbers\nof callings have registers,",
    "start": "2494450",
    "end": "2500210"
  },
  {
    "text": "certain number of things\nget passed as arguments. OK, if you're not\ncareful, what happens",
    "start": "2500210",
    "end": "2506660"
  },
  {
    "text": "is there will be a lot\nof excess spilling, especially if you have a\nbunch of small leaf functions",
    "start": "2506660",
    "end": "2511930"
  },
  {
    "text": "that use two or three\nregisters or one register or something like that. Since I have to\ncall, I'll say I'll",
    "start": "2511930",
    "end": "2517329"
  },
  {
    "text": "be spilling all those things,\ncoming back, restoring, whereas that function\nnever used them. Why do I spill?",
    "start": "2517330",
    "end": "2523080"
  },
  {
    "text": "So what that means is,\nbecause the calling convention is too general.",
    "start": "2523080",
    "end": "2528547"
  },
  {
    "text": "So one thing you can do is you\ncan say, ah, that function only use one register. On the other hand, I am\nusing all the registers now.",
    "start": "2528547",
    "end": "2534700"
  },
  {
    "text": "And I only need to\nspill one register to go there because I'm not\ngoing to spill the rest of it because I know it\nonly need that.",
    "start": "2534700",
    "end": "2540220"
  },
  {
    "text": "So I can do customized calling\nconvention on each function and basically get some reduced--\nbunch of reduced [INAUDIBLE]",
    "start": "2540220",
    "end": "2547915"
  },
  {
    "text": "communication. So you can do things like that. So they are interesting. So the other thing is,\nassume both functions have",
    "start": "2547915",
    "end": "2555940"
  },
  {
    "text": "too many things and all your\narguments were in memory. And I assume since I had\na past six arguments,",
    "start": "2555940",
    "end": "2563170"
  },
  {
    "text": "I just take six argument\nregisters, pass it back, and immediately\nput it back into memory.",
    "start": "2563170",
    "end": "2568690"
  },
  {
    "text": "OK, why? Another person--\nif I know that I'm doing that, I can just say, OK,\nlook, I will know the memory. I will tell you where it is.",
    "start": "2568690",
    "end": "2574660"
  },
  {
    "text": "I don't have to give\nit in the register just to put it back in memory. Things like that you can\ndo, but they are much more",
    "start": "2574660",
    "end": "2580060"
  },
  {
    "text": "hairy optimizations\nbecause what that means is you have to make sure that\nyou have a custom copy that works for me.",
    "start": "2580060",
    "end": "2585620"
  },
  {
    "text": "And if there's somebody\nelse call that function, they had to get\na different copy. It's too many complications. So I don't expect\nyou to do that.",
    "start": "2585620",
    "end": "2591619"
  },
  {
    "text": "The simple thing is,\nif you're in line, you'll get all those benefits. So you indent the code. And if you're doing\ncustom copy, you're",
    "start": "2591620",
    "end": "2597580"
  },
  {
    "text": "already paying the\ncost of duplication. In line actually get you\nboth register location and instruction scheduling\nand everything there.",
    "start": "2597580",
    "end": "2604480"
  },
  {
    "text": "So it's probably better. So actually, you're finishing\na little bit faster.",
    "start": "2604480",
    "end": "2610580"
  },
  {
    "text": "So in summary, so\nthis is something we want you guys to\ndo in the project.",
    "start": "2610580",
    "end": "2615970"
  },
  {
    "text": "Register location\nbasically stores values in registers\nbetween def and use. And we'll reduce a\nmemory bandwidth.",
    "start": "2615970",
    "end": "2621850"
  },
  {
    "text": "And this can have a big\nimpact on performance. x86-64 will have some impact.",
    "start": "2621850",
    "end": "2627910"
  },
  {
    "text": "On the other hand, if you\ngo to architectures where-- risk type architecture\nwill have huge impact because they are-- most of the\narithmetic operations happen",
    "start": "2627910",
    "end": "2634780"
  },
  {
    "text": "is both the cost of\nmemory operations as well as the reduction\nof instructions.",
    "start": "2634780",
    "end": "2640780"
  },
  {
    "text": "The way-- the key concept really\n[INAUDIBLE] webs to basically identify regions, and we look\nat interference graphs to figure",
    "start": "2640780",
    "end": "2647890"
  },
  {
    "text": "out what are the things that\ncannot be allocated in the same registers. Look at colorability to\nfigure out how to do that.",
    "start": "2647890",
    "end": "2653840"
  },
  {
    "text": "And we talked about splitting. And this is basically\nthe main thing. And I think for\nyour project, you",
    "start": "2653840",
    "end": "2659170"
  },
  {
    "text": "can probably get away with just\ndoing webs, interference graph, and colorability, and then\nnot worry about splitting",
    "start": "2659170",
    "end": "2664270"
  },
  {
    "text": "and just spilling in there. Just keep-- probably you'd keep\none register for temporaries.",
    "start": "2664270",
    "end": "2672250"
  },
  {
    "text": "You want to probably\ndo pre-allocation. And if you are\nreally gung-ho, you",
    "start": "2672250",
    "end": "2678910"
  },
  {
    "text": "might be able to do\nsome pre-splitting. And by doing that, I\nthink you are pretty much",
    "start": "2678910",
    "end": "2684640"
  },
  {
    "text": "set to do the project. One thing you have to\nbe careful, though, is now that you--",
    "start": "2684640",
    "end": "2692930"
  },
  {
    "text": "you might have to change\nyour instruction mix too. So for example, if\nthings are in registers,",
    "start": "2692930",
    "end": "2705369"
  },
  {
    "text": "OK, you can do a lot of\noperation register-register operations in there. So if you have A\nequals A plus B,",
    "start": "2705370",
    "end": "2713740"
  },
  {
    "text": "it's one instruction if\nboth are in registers. If one is in-- one is in register A equals\nA plus B, so one instruction.",
    "start": "2713740",
    "end": "2722290"
  },
  {
    "text": "But if both A and\nB are in memory, then it's two instructions.",
    "start": "2722290",
    "end": "2727950"
  },
  {
    "text": "So you have to make\nsure that the way you generate instructions\nactually accommodate to that, accommodate that, basically.",
    "start": "2727950",
    "end": "2735880"
  },
  {
    "text": "So there might be-- so here's where people\noptimizations come into play. So what you do is we just\nkeep generating this.",
    "start": "2735880",
    "end": "2742015"
  },
  {
    "text": "You don't worry about that. You will get--\nbecause right now it's inefficient anyways because\neverything is load to register, do operation, and the\nstore type in structure.",
    "start": "2742015",
    "end": "2749320"
  },
  {
    "text": "And then you create\nsome patterns and say if I find\nthis pattern, I will combine it to\nthe instructions. You come up with this\npattern-matching people",
    "start": "2749320",
    "end": "2755125"
  },
  {
    "text": "optimization, then trying\nto do anything and go change everything. So if we say-- if I find\ntwo things that is basically",
    "start": "2755125",
    "end": "2761740"
  },
  {
    "text": "register, do a copy to another\nregister, and operating on it, and say OK, it can\nbe combined together.",
    "start": "2761740",
    "end": "2767130"
  },
  {
    "text": "So by doing things\nlike that, you can actually-- that's the\nbest way to actually get rid of those kind\nof inefficiencies.",
    "start": "2767130",
    "end": "2773230"
  },
  {
    "text": "And what I would say is this\nprobably a good time for most of the codes, try it a\nSQL or run it through GCC,",
    "start": "2773230",
    "end": "2779290"
  },
  {
    "text": "old optimization turned\non, and see what it does. And see-- and then\nlook at your code",
    "start": "2779290",
    "end": "2784890"
  },
  {
    "text": "and say, why it's\nnot doing that? And some of it would be\nhard because some of it",
    "start": "2784890",
    "end": "2793950"
  },
  {
    "text": "is doing crazy,\noutrageous things. You don't have time to do that. But some of it, you'll\nfind things to do.",
    "start": "2793950",
    "end": "2800435"
  },
  {
    "text": "And if you feel even\nmore adventurous, you can play with different\nGCC optimization levels",
    "start": "2800435",
    "end": "2805470"
  },
  {
    "text": "and see at what level\nthat you can do and turn on optimizations that you\ncan do in GCC because it's",
    "start": "2805470",
    "end": "2812250"
  },
  {
    "text": "all controllable in GCC\nand see what you get and then see whether\nit's valuable.",
    "start": "2812250",
    "end": "2818220"
  },
  {
    "text": "And then most of the\ntime, run it, time it. Always put-- if you\nhave a piece of code,",
    "start": "2818220",
    "end": "2824204"
  },
  {
    "text": "put it through a\nvery large loop, run it 4,000 times so you\ndon't have variability because most of the programs\nyou have is run so fast.",
    "start": "2824205",
    "end": "2830790"
  },
  {
    "text": "If you just time\nit, it's not useful. So run it 4,000\ntimes or 10,000 times so you will get time in the run,\nsomething for like 10 seconds",
    "start": "2830790",
    "end": "2841573"
  },
  {
    "text": "because everybody's\nin the same machine. If you run the same thing for\na large group and run for hour, it doesn't help you.",
    "start": "2841573",
    "end": "2847510"
  },
  {
    "text": "I mean, if you get a timing\naround 10 seconds of a program, that gives-- that's probably\nlevel enough you probably",
    "start": "2847510",
    "end": "2853380"
  },
  {
    "text": "got rid of all the noise. And also, since there\nare multiple groups using same machine, if you're timing,\njust do a tarp or something",
    "start": "2853380",
    "end": "2860620"
  },
  {
    "text": "and see who's running. And if everybody's trying\nto time at the same time, you might get different types.",
    "start": "2860620",
    "end": "2866730"
  },
  {
    "text": "So what I would do is I would\nput a loop around the things you are testing. Make sure that run\nfor about 10 seconds.",
    "start": "2866730",
    "end": "2873070"
  },
  {
    "text": "Run it about two or three times,\nand make sure it's repeatable. So if it is not repeatable, that\nmeans something is going on.",
    "start": "2873070",
    "end": "2878413"
  },
  {
    "text": "Some other people are\nusing the machine. Look at the load. You can send people\nmessages trying to-- if we run into\nissues of everybody's",
    "start": "2878413",
    "end": "2885060"
  },
  {
    "text": "having a hard time\ngetting timing, we can come up with some way of\nallocating a few minutes here",
    "start": "2885060",
    "end": "2890310"
  },
  {
    "text": "and there so people\nget the machine. But is that a-- it's not\na two-processor, isn't it?",
    "start": "2890310",
    "end": "2896890"
  },
  {
    "text": "What is it? It's a one-processor,\ntwo-thread machine, isn't it? AUDIENCE: I'm not sure. PROFESSOR: I think\nit's a one-processer.",
    "start": "2896890",
    "end": "2903260"
  },
  {
    "text": "So-- I can't remember the\norder [INAUDIBLE] on that. But I think-- I think-- for most of the time, you guys\nare not running large programs.",
    "start": "2903260",
    "end": "2909730"
  },
  {
    "text": "But here's the time\nnow we can actually time it, get feedback,\nand then figure out what right thing to do. So what we are doing for the\nproject is we are leaving the--",
    "start": "2909730",
    "end": "2916779"
  },
  {
    "text": "we are giving only\none thing, mandatory for register location. And the rest, [INAUDIBLE] is\ngoing to give you some loops.",
    "start": "2916780",
    "end": "2924380"
  },
  {
    "text": "And you guys figure\nout what best to do. And this seems like\nan easy thing to say,",
    "start": "2924380",
    "end": "2930530"
  },
  {
    "text": "but it's much harder thing to\ndo because x86, a lot of times, intuition is hard to--",
    "start": "2930530",
    "end": "2936740"
  },
  {
    "text": "hard to come by because it's\na very complex architecture. So things you think, oh, this\nshould give good performance,",
    "start": "2936740",
    "end": "2942350"
  },
  {
    "text": "probably hardware\nalready does something. You won't get it. So the-- mm-hmm. AUDIENCE: It's a dual core,\nit's a dual core processor.",
    "start": "2942350",
    "end": "2950369"
  },
  {
    "text": "PROFESSOR: It's a dual core,\ndual core, one processor, OK, yeah. So that means two\npeople can run.",
    "start": "2950370",
    "end": "2956340"
  },
  {
    "text": "You won't get interference\nat the same time. But it's always good to check\nwho's out there, who's running,",
    "start": "2956340",
    "end": "2961560"
  },
  {
    "text": "or send a message to the entire\npeople locked in the machine and say, next five minutes,\nI'm doing some tests.",
    "start": "2961560",
    "end": "2968380"
  },
  {
    "text": "So just-- because we had to-- don't run into each\nother and then get mad. But I think with\nthese few groups,",
    "start": "2968380",
    "end": "2977732"
  },
  {
    "text": "you should be able\nto do it for me. It's not like you are\nbenchmarking for hours. So use the same machine.",
    "start": "2977732",
    "end": "2984170"
  },
  {
    "text": "Good. So one more lecture,\nand then [INAUDIBLE].. That's all that's left,\nand one more project.",
    "start": "2984170",
    "end": "2991215"
  },
  {
    "text": "It's almost there, almost there. Oh, there's a quiz too, yeah.",
    "start": "2991216",
    "end": "2997610"
  },
  {
    "text": "Small detail. ",
    "start": "2997610",
    "end": "3002480"
  }
]