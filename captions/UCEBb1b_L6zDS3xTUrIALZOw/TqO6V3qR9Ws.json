[
  {
    "start": "0",
    "end": "5580"
  },
  {
    "text": "[MUSIC PLAYING]",
    "start": "5580",
    "end": "20180"
  },
  {
    "text": "PROFESSOR: Last time, we took\na look at an explicit control evaluator for Lisp,\nand that bridged",
    "start": "20180",
    "end": "26310"
  },
  {
    "text": "the gap between all these\nhigh-level languages like Lisp and the query language\nand all of that stuff,",
    "start": "26310",
    "end": "32460"
  },
  {
    "text": "bridged the gap between that\nand a conventional register machine. And in fact, you can think of\nthe explicit control evaluator",
    "start": "32460",
    "end": "40140"
  },
  {
    "text": "either as, say, the code\nfor a Lisp interpreter if you wanted to implement\nit in the assembly",
    "start": "40140",
    "end": "47020"
  },
  {
    "text": "language of some conventional\nregister transfer machine, or, if you like,\nyou can think of it as the microcode of\nsome machine that's",
    "start": "47020",
    "end": "52940"
  },
  {
    "text": "going to be specially\ndesigned to run Lisp. In either case,\nwhat we're doing is we're taking a machine that\nspeaks some low-level language,",
    "start": "52940",
    "end": "61390"
  },
  {
    "text": "and we're raising the machine to\na high-level language like Lisp by writing an interpreter.",
    "start": "61390",
    "end": "68230"
  },
  {
    "text": "So for instance,\nhere, conceptually,",
    "start": "68230",
    "end": "78960"
  },
  {
    "text": "is a special purpose machine\nfor computing factorials. It takes in five\nand puts out 120.",
    "start": "78960",
    "end": "89000"
  },
  {
    "text": "And what this special\npurpose machine is is actually a Lisp\ninterpreter that's configured itself\nto run factorials,",
    "start": "89000",
    "end": "98278"
  },
  {
    "text": "because you fit into\nit a description of the factorial machine. So that's what an\ninterpreter is.",
    "start": "98278",
    "end": "103610"
  },
  {
    "text": "It configures itself to emulate\na machine whose description you",
    "start": "103610",
    "end": "108730"
  },
  {
    "text": "read in. Now, inside the Lisp\ninterpreter, what's that? Well, that might be your general\nregister language interpreter",
    "start": "108730",
    "end": "117090"
  },
  {
    "text": "that configures itself to\nbehave like a Lisp interpreter, because you put in a whole\nbunch of instructions",
    "start": "117090",
    "end": "122140"
  },
  {
    "text": "in register language. This is the explicit\ncontrol evaluator. And then it also has\nsome sort of library,",
    "start": "122140",
    "end": "128729"
  },
  {
    "text": "a library of primitive\noperators and Lisp operations and all sorts of\nthings like that. That's the general\nstrategy of interpretation.",
    "start": "128729",
    "end": "137243"
  },
  {
    "text": "And the point is,\nwhat we're doing is we're writing an\ninterpreter to raise",
    "start": "137243",
    "end": "142805"
  },
  {
    "text": "the machine to the level of the\nprograms that we want to write. Well, there's another\nstrategy, a different one,",
    "start": "142805",
    "end": "147849"
  },
  {
    "text": "which is compilation. Compilation's a\nlittle bit different. Here--here we might have\nproduced a special purpose",
    "start": "147850",
    "end": "157720"
  },
  {
    "text": "machine for, for\ncomputing factorials,",
    "start": "157720",
    "end": "163538"
  },
  {
    "text": "starting with some sort of\nmachine that speaks register language, except we're going\nto do a different strategy. We take our factorial program.",
    "start": "163538",
    "end": "171680"
  },
  {
    "text": "We use that as the source\ncode into a compiler. What the compiler\nwill do is translate that factorial program into\nsome register machine language.",
    "start": "171680",
    "end": "179926"
  },
  {
    "text": "And this will now be not the\nexplicit control evaluator for Lisp, this will be\nsome register language for computing factorials.",
    "start": "179926",
    "end": "186760"
  },
  {
    "text": "So this is the\ntranslation of that. That will go into\nsome sort of loader",
    "start": "186760",
    "end": "193420"
  },
  {
    "text": "which will combine this\ncode with code selected from the library to do things\nlike primitive multiplication.",
    "start": "193420",
    "end": "199970"
  },
  {
    "text": "And then we'll\nproduce a load module which configures the\nregister language machine to be a special\npurpose factorial machine.",
    "start": "199970",
    "end": "208196"
  },
  {
    "text": "So that's a, that's\na different strategy. In interpretation, we're\nraising the machine to the level",
    "start": "208197",
    "end": "214090"
  },
  {
    "text": "of our language, like Lisp. In compilation, we're\ntaking our program and lowering it to the language\nthat's spoken by the machine.",
    "start": "214090",
    "end": "222040"
  },
  {
    "text": "Well, how do these two\nstrategies compare? The compiler can\nproduce code that",
    "start": "222040",
    "end": "227910"
  },
  {
    "text": "will execute more efficiently.  The essential reason\nfor that is that if you",
    "start": "227910",
    "end": "235470"
  },
  {
    "text": "think about the register\noperations that are running,",
    "start": "235470",
    "end": "241560"
  },
  {
    "text": "the interpreter has to produce\nregister operations which, in principle, are going\nto be general enough",
    "start": "241560",
    "end": "247280"
  },
  {
    "text": "to execute any Lisp procedure. Whereas the compiler\nonly has to worry about producing a\nspecial bunch of",
    "start": "247280",
    "end": "253700"
  },
  {
    "text": "register operations for, for\ndoing the particular Lisp procedure that you've compiled.",
    "start": "253700",
    "end": "260208"
  },
  {
    "text": "Or another way to say that\nis that the interpreter is a general purpose simulator,\nthat when you read in a Lisp",
    "start": "260209",
    "end": "266940"
  },
  {
    "text": "procedure, then those\ncan simulate the program described by that,\nby that procedure. So the interpreter is worrying\nabout making a general purpose",
    "start": "266940",
    "end": "273702"
  },
  {
    "text": "simulator, whereas the\ncompiler, in effect, is configuring the\nthing to be the machine that the interpreter would\nhave been simulating.",
    "start": "273702",
    "end": "280000"
  },
  {
    "text": "So the compiler can be faster. ",
    "start": "280000",
    "end": "292830"
  },
  {
    "text": "On the other hand,\nthe interpreter is a nicer environment\nfor debugging.",
    "start": "292830",
    "end": "299340"
  },
  {
    "text": "And the reason for that is\nthat we've got the source code actually there. We're interpreting it. That's what we're working with.",
    "start": "299340",
    "end": "306010"
  },
  {
    "text": "And we also have\nthe library around. See, the interpreter--the\nlibrary sitting there is part of the interpreter.",
    "start": "306010",
    "end": "311139"
  },
  {
    "text": "The compiler only pulls\nout from the library what it needs to run the program. So if you're in the\nmiddle of debugging,",
    "start": "311140",
    "end": "318000"
  },
  {
    "text": "and you might like to write a\nlittle extra program to examine some run time data structure\nor to produce some computation",
    "start": "318000",
    "end": "323798"
  },
  {
    "text": "that you didn't think of\nwhen you wrote the program, the interpreter can do\nthat perfectly well, whereas the compiler can't.",
    "start": "323798",
    "end": "329669"
  },
  {
    "text": "So there are sort of\ndual, dual advantages. The compiler will produce\ncode that executes faster.",
    "start": "329670",
    "end": "334720"
  },
  {
    "text": "The interpreter is a better\nenvironment for debugging. And most Lisp systems end\nup having both, end up",
    "start": "334720",
    "end": "343290"
  },
  {
    "text": "being configured so you have an\ninterpreter that you use when you're developing your code. Then you can speed\nit up by compiling.",
    "start": "343290",
    "end": "349060"
  },
  {
    "text": "And very often, you can\narrange that compiled code and interpreted\ncode can call each other.",
    "start": "349060",
    "end": "354658"
  },
  {
    "text": "We'll see how to do that. That's not hard. ",
    "start": "354658",
    "end": "360370"
  },
  {
    "text": "In fact, the way we'll--  in the compiler\nwe're going to make,",
    "start": "360370",
    "end": "365750"
  },
  {
    "text": "the way we'll arrange\nfor compiled coding and interpreted code to\ncall, to call each other, is that we'll have the compiler\nuse exactly the same register",
    "start": "365750",
    "end": "372979"
  },
  {
    "text": "conventions as the interpreter. ",
    "start": "372980",
    "end": "378680"
  },
  {
    "text": "Well, the idea of a compiler\nis very much like the idea",
    "start": "378680",
    "end": "383800"
  },
  {
    "text": "of an interpreter or evaluator. It's the same thing. See, the evaluator\nwalks over the code",
    "start": "383800",
    "end": "389700"
  },
  {
    "text": "and performs some\nregister operations. That's what we did yesterday.",
    "start": "389700",
    "end": "397040"
  },
  {
    "text": "Well, the compiler\nessentially would like to walk over the code and\nproduce the register operations",
    "start": "397040",
    "end": "403050"
  },
  {
    "text": "that the evaluator\nwould have done were it evaluating the thing.",
    "start": "403050",
    "end": "408890"
  },
  {
    "text": "And that gives us\na model for how to implement a zeroth-order\ncompiler, a very bad compiler",
    "start": "408890",
    "end": "416360"
  },
  {
    "text": "but essentially a compiler. A model for doing that is\nyou just take the evaluator, you run it over the\ncode, but instead",
    "start": "416360",
    "end": "423300"
  },
  {
    "text": "of executing the\nactual operations, you just save them away. And that's your compiled code.",
    "start": "423300",
    "end": "428819"
  },
  {
    "text": "So let me give you\nan example of that.  Suppose we're going to\ncompile--suppose we want",
    "start": "428820",
    "end": "435620"
  },
  {
    "text": "to compile the\nexpression f of x. ",
    "start": "435620",
    "end": "445100"
  },
  {
    "text": "So let's assume that\nwe've got f of x in the x register and something\nin the environment register. And now imagine starting\nup the evaluator.",
    "start": "445100",
    "end": "451745"
  },
  {
    "text": " Well, it looks at\nthe expression and it sees that it's an application.",
    "start": "451745",
    "end": "458000"
  },
  {
    "text": "And it branches to a place\nin the evaluator code we saw",
    "start": "458000",
    "end": "463163"
  },
  {
    "text": "called ev-application.  And then it begins.",
    "start": "463163",
    "end": "468190"
  },
  {
    "text": "It stores away the\noperands and unev, and then it's going to\nput the operator in exp, and it's going to go\nrecursively evaluate it.",
    "start": "468190",
    "end": "474409"
  },
  {
    "text": "That's the process\nthat we walk through. And if you start\nlooking at the code, you start seeing some\nregister operations.",
    "start": "474410",
    "end": "480200"
  },
  {
    "text": "You see assign to\nunev the operands, assign to exp the operator,\nsave the environment, generate that, and so on.",
    "start": "480200",
    "end": "486560"
  },
  {
    "text": " Well, if we look on the\noverhead here, we can see,",
    "start": "486560",
    "end": "496110"
  },
  {
    "text": "we can see those operations\nstarting to be produced. Here's sort of the\nfirst real operation",
    "start": "496110",
    "end": "502599"
  },
  {
    "text": "that the evaluator\nwould have done. It pulls the operands\nout of the exp register and assigns it to unev.",
    "start": "502600",
    "end": "509875"
  },
  {
    "text": "And then it assigns something\nto the expression register, and it saves continue,\nand it saves env. And all I'm doing here is\nwriting down the register",
    "start": "509875",
    "end": "518049"
  },
  {
    "text": "assignments that the\nevaluator would have done in executing that code. And can zoom out a little bit.",
    "start": "518049",
    "end": "524280"
  },
  {
    "text": "Altogether, there are\nabout 19 operations there.",
    "start": "524280",
    "end": "529430"
  },
  {
    "text": "And this is the--this will\nbe the piece of code up until the point where the evaluator\nbranches off to apply-dispatch.",
    "start": "529430",
    "end": "537750"
  },
  {
    "text": "And in fact, in\nthis compiler, we're not going to worry about\napply-dispatch at all. We're going to have\neverything--we're going to have",
    "start": "537750",
    "end": "543575"
  },
  {
    "text": "both interpreted code\nand compiled code. Always evaluate procedures,\nalways apply procedures by going to apply-dispatch.",
    "start": "543575",
    "end": "550240"
  },
  {
    "text": "That will easily allow\ninterpreted code and compiled code to call each other. ",
    "start": "550240",
    "end": "558330"
  },
  {
    "text": "Well, in principle,\nthat's all we need to do. You just run the evaluator. So the compiler's a\nlot like the evaluator.",
    "start": "558330",
    "end": "564320"
  },
  {
    "text": "You run it, except it stashes\naway these operations instead of actually executing them.",
    "start": "564320",
    "end": "569480"
  },
  {
    "text": "Well, that's not,\nthat's not quite true. There's only one\nlittle lie in that.",
    "start": "569480",
    "end": "576370"
  },
  {
    "text": "What you have to worry about\nis if you have a, a predicate. If you have some kind of test\nyou want to do, obviously,",
    "start": "576370",
    "end": "584110"
  },
  {
    "text": "at the point when\nyou're compiling it, you don't know which branch of\nthese--of a conditional like",
    "start": "584110",
    "end": "589220"
  },
  {
    "text": "this you're going to do. So you can't say which one\nthe evaluator would have done.",
    "start": "589220",
    "end": "595010"
  },
  {
    "text": "So all you do there\nis very simple. You compile both branches. So you compile a structure\nthat looks like this.",
    "start": "595010",
    "end": "602050"
  },
  {
    "text": "That'll compile into\nsomething that says, the code, the code for P.\nAnd it puts its results",
    "start": "602050",
    "end": "614840"
  },
  {
    "text": "in, say, the val register. So you walk the interpreter\nover the predicate",
    "start": "614840",
    "end": "621400"
  },
  {
    "text": "and make sure that the result\nwould go into the val register. And then you compile\nan instruction",
    "start": "621400",
    "end": "626840"
  },
  {
    "text": "that says, branch if, if\nval is true, to a place",
    "start": "626840",
    "end": "637610"
  },
  {
    "text": "we'll call label one. ",
    "start": "637610",
    "end": "644950"
  },
  {
    "text": "Then we, we will put\nthe code for B to walk the interpreter--walk\nthe interpreter over B.",
    "start": "644950",
    "end": "653660"
  },
  {
    "text": "And then go to put in an\ninstruction that says, go to the next thing, whatever,\nwhatever was supposed to happen",
    "start": "653660",
    "end": "663430"
  },
  {
    "text": "after this thing was done. You put in that instruction. And here you put label one. ",
    "start": "663430",
    "end": "671521"
  },
  {
    "text": "And here you put the code for\nA. And you put go to next thing.",
    "start": "671521",
    "end": "685870"
  },
  {
    "start": "685870",
    "end": "691420"
  },
  {
    "text": "So that's how you\ntreat a conditional. You generate a little\nblock like that. And other than that, this\nzeroth-order compiler",
    "start": "691420",
    "end": "700145"
  },
  {
    "text": "is the same as the evaluator. It's just stashing\naway the instructions instead of executing them.",
    "start": "700145",
    "end": "706380"
  },
  {
    "text": "That seems pretty simple, but\nwe've gained something by that. See, already that's\ngoing to be more efficient than the evaluator.",
    "start": "706380",
    "end": "713630"
  },
  {
    "text": "Because, if you watch\nthe evaluator run, it's not only generating\nthe register operations",
    "start": "713630",
    "end": "720410"
  },
  {
    "text": "we wrote down, it's\nalso doing things to decide which\nones to generate. So the very first thing it\ndoes, say, here for instance,",
    "start": "720410",
    "end": "728480"
  },
  {
    "text": "is go do some tests and decide\nthat this is an application, and then branch off to\nthe place that, that",
    "start": "728480",
    "end": "735589"
  },
  {
    "text": "handles applications. In other words, what\nthe evaluator's doing is simultaneously analyzing\nthe code to see what to do,",
    "start": "735590",
    "end": "743550"
  },
  {
    "text": "and running these operations. And when you-- if you run the\nevaluator a million times, that analysis phase\nhappens a million times,",
    "start": "743550",
    "end": "750502"
  },
  {
    "text": "whereas in the compiler,\nit's happened once, and then you just have the register\noperations themselves. ",
    "start": "750502",
    "end": "759730"
  },
  {
    "text": "Ok, that's a, a\nzeroth-order compiler, but it is a wretched,\nwretched compiler. It's really dumb.",
    "start": "759730",
    "end": "767200"
  },
  {
    "text": "Let's--let's go back and,\nand look at this overhead. So look at look at some of the\noperations this thing is doing.",
    "start": "767200",
    "end": "776019"
  },
  {
    "text": "We're supposedly looking\nat the operations and interpreting f of x.",
    "start": "776020",
    "end": "783710"
  },
  {
    "text": "Now, look here what it's doing. For example, here it\nassigns to exp the operator",
    "start": "783710",
    "end": "791110"
  },
  {
    "text": "in fetch of exp. But see, there's no reason\nto do that, because this is--",
    "start": "791110",
    "end": "796290"
  },
  {
    "text": "the compiler knows that\nthe operator, fetch of exp, is f right here.",
    "start": "796290",
    "end": "803310"
  },
  {
    "text": "So there's no reason why this\ninstruction should say that. It should say, we'll\nassign to exp, f.",
    "start": "803310",
    "end": "809579"
  },
  {
    "text": "Or in fact, you don't\nneed exp at all. There's no reason it\nshould have exp at all. What, what did exp get used for?",
    "start": "809580",
    "end": "815170"
  },
  {
    "text": "Well, if we come down here,\nwe're going to assign to val,",
    "start": "815170",
    "end": "823190"
  },
  {
    "text": "look up the stuff in\nexp in the environment.",
    "start": "823190",
    "end": "828383"
  },
  {
    "text": "So what we really should do\nis get rid of the exp register altogether, and just change\nthis instruction to say, assign to val, look up the\nvariable value of the symbol",
    "start": "828383",
    "end": "837060"
  },
  {
    "text": "f in the environment.  Similarly, back up here,\nwe don't need unev at all,",
    "start": "837060",
    "end": "844800"
  },
  {
    "text": "because we know what the\noperands of fetch of exp are for this piece of code. It's the, it's the list x.",
    "start": "844800",
    "end": "850630"
  },
  {
    "text": " So in some sense, you don't\nwant unev and exp at all.",
    "start": "850630",
    "end": "859393"
  },
  {
    "text": "See, what they really\nare in some sense, those aren't registers\nof the actual machine that's supposed to run.",
    "start": "859393",
    "end": "865230"
  },
  {
    "text": "Those are registers\nthat have to do with arranging the thing that\ncan simulate that machine.",
    "start": "865230",
    "end": "870760"
  },
  {
    "text": "So they're always going\nto hold expressions which, from the compiler's\npoint of view,",
    "start": "870760",
    "end": "875980"
  },
  {
    "text": "are just constants, so can\nbe put right into the code. So you can forget about\nall the operations worrying",
    "start": "875980",
    "end": "881630"
  },
  {
    "text": "about exp and unev and\njust use those constants. Similarly, again, if we\ngo, go back and look here,",
    "start": "881630",
    "end": "888050"
  },
  {
    "text": "there are things like assign\nto continue eval-args. ",
    "start": "888050",
    "end": "893690"
  },
  {
    "text": "Now, that has nothing\nto do with anything. That was just the\nevaluator keeping track",
    "start": "893690",
    "end": "898780"
  },
  {
    "text": "of where it should go next, to\nevaluate the arguments in some,",
    "start": "898780",
    "end": "905016"
  },
  {
    "text": "in some application. But of course, that's irrelevant\nto the compiler, because you--",
    "start": "905016",
    "end": "911470"
  },
  {
    "text": "the analysis phase will\nhave already done that. So this is completely\nirrelevant.",
    "start": "911470",
    "end": "917680"
  },
  {
    "text": "So a lot of these,\nthese assignments to continue have not to do where\nthe running machine is supposed",
    "start": "917680",
    "end": "923880"
  },
  {
    "text": "to continue in keeping\ntrack of its state. It has to, to do with where\nthe evaluator analysis should continue, and those are\ncompletely irrelevant.",
    "start": "923880",
    "end": "930080"
  },
  {
    "text": "So we can get rid of them. ",
    "start": "930080",
    "end": "944330"
  },
  {
    "text": "Ok, well, if we, if\nwe simply do that, make those kinds\nof optimizations, get rid, get rid of\nworrying about exp and unev,",
    "start": "944330",
    "end": "951760"
  },
  {
    "text": "and get rid of these\nirrelevant register assignments to continue, then\nwe can take this literal code,",
    "start": "951760",
    "end": "961400"
  },
  {
    "text": "these sort of 19\ninstructions that the, that the evaluator would have\ndone, and then replace them.",
    "start": "961400",
    "end": "968532"
  },
  {
    "text": "Let's look at the, at the slide.  Replace them by--we get\nrid of about half of them.",
    "start": "968532",
    "end": "975180"
  },
  {
    "text": " And again, this is\njust sort of filtering",
    "start": "975180",
    "end": "981140"
  },
  {
    "text": "what the evaluator would\nhave done by getting rid of the irrelevant stuff. And you see, for instance, here\nthe--where the evaluator said,",
    "start": "981140",
    "end": "989700"
  },
  {
    "text": "assign val, look up variable\nvalue, fetch of exp, here we have put\nin the constant f.",
    "start": "989700",
    "end": "995470"
  },
  {
    "text": "Here we've put in\nthe constant x.  So there's a, there's a\nlittle better compiler.",
    "start": "995470",
    "end": "1003860"
  },
  {
    "text": "It's still pretty dumb. It's still doing a\nlot of dumb things.",
    "start": "1003860",
    "end": "1010560"
  },
  {
    "text": "Again, if we go look\nat the slide again, look at the very beginning here,\nwe see a save the environment,",
    "start": "1010560",
    "end": "1019430"
  },
  {
    "text": "assign something to\nthe val register, and restore the environment. Where'd that come from?",
    "start": "1019430",
    "end": "1025030"
  },
  {
    "text": "That came from the\nevaluator back here saying, oh, I'm in the middle of\nevaluating an application.",
    "start": "1025030",
    "end": "1031160"
  },
  {
    "text": "So I'm going to recursively\ncall eval dispatch. So I'd better save the thing\nI'm going to need later,",
    "start": "1031160",
    "end": "1038000"
  },
  {
    "text": "which is the environment. This was the result\nof recursively calling eval dispatch.",
    "start": "1038000",
    "end": "1043520"
  },
  {
    "text": "It was evaluating the\nsymbol f in that case. Then it came back\nfrom eval dispatch, restored the environment.",
    "start": "1043520",
    "end": "1051380"
  },
  {
    "text": "But in fact, the actual\nthing it ended up doing in the\nevaluation is not going",
    "start": "1051380",
    "end": "1056559"
  },
  {
    "text": "to hurt the environment at all. So there's no reason to\nbe saving the environment and restoring the\nenvironment here.",
    "start": "1056560",
    "end": "1062298"
  },
  {
    "text": " Similarly, here I'm\nsaving the argument list.",
    "start": "1062298",
    "end": "1073180"
  },
  {
    "text": "That's a piece of the\nargument evaluation loop, saving the argument list,\nand here you restore it. But the actual thing\nthat you ended up doing",
    "start": "1073180",
    "end": "1080890"
  },
  {
    "text": "didn't trash the argument list. So there was no\nreason to save it. ",
    "start": "1080890",
    "end": "1088690"
  },
  {
    "text": "So another way to say,\nanother way to say that",
    "start": "1088690",
    "end": "1093799"
  },
  {
    "text": "is that the, the evaluator has\nto be maximally pessimistic,",
    "start": "1093800",
    "end": "1099588"
  },
  {
    "text": "because as far from\nits point of view it's just going off\nto evaluate something. So it better save what\nit's going to need later.",
    "start": "1099588",
    "end": "1106200"
  },
  {
    "text": "But once you've\ndone the analysis, the compiler is in a\nposition to say, well, what actually did I need to save?",
    "start": "1106200",
    "end": "1112140"
  },
  {
    "text": "And doesn't need to\ndo any-- it doesn't need to be as careful\nas the evaluator,",
    "start": "1112140",
    "end": "1117320"
  },
  {
    "text": "because it knows what\nit actually needs. Well, in any case, if\nwe do that and eliminate",
    "start": "1117320",
    "end": "1123490"
  },
  {
    "text": "all those redundant\nsaves and restores, then we can get it down to this.",
    "start": "1123490",
    "end": "1129400"
  },
  {
    "text": "And you see there are actually\nonly three instructions that we actually need, down from\nthe initial 11 or so,",
    "start": "1129400",
    "end": "1135990"
  },
  {
    "text": "or the initial 20 or\nso in the original one. And that's just saying, of\nthose register operations,",
    "start": "1135990",
    "end": "1143259"
  },
  {
    "text": "which ones did we actually need? ",
    "start": "1143260",
    "end": "1149490"
  },
  {
    "text": "Let me just sort of summarize\nthat in another way, just to show you in a\nlittle better picture. ",
    "start": "1149490",
    "end": "1156010"
  },
  {
    "text": "Here's a picture of starting-- This is looking at all\nthe saves and restores. ",
    "start": "1156010",
    "end": "1163770"
  },
  {
    "text": "So here's the expression,\nf of x, and then this traces through,\non the bottom here, the various\nplaces in the evaluator",
    "start": "1163770",
    "end": "1174930"
  },
  {
    "text": "that were passed when\nthe evaluation happened. And then here, here\nyou see arrows.",
    "start": "1174930",
    "end": "1180250"
  },
  {
    "text": "Arrow down means register saved. So the first thing that happened\nis the environment got saved.",
    "start": "1180250",
    "end": "1186471"
  },
  {
    "text": "And over here, the\nenvironment got restored. ",
    "start": "1186472",
    "end": "1192380"
  },
  {
    "text": "And these-- so there are all\nthe pairs of stack operations. Now, if you go\nahead and say, well,",
    "start": "1192380",
    "end": "1198289"
  },
  {
    "text": "let's remember that we\ndon't--that unev, for instance, is a completely\nuseless register. ",
    "start": "1198290",
    "end": "1207508"
  },
  {
    "text": "And if we use the constant\nstructure of the code, well, we don't need, we\ndon't need to save unev. We don't need unev at all.",
    "start": "1207508",
    "end": "1212553"
  },
  {
    "text": " And then, depending on how\nwe set up the discipline",
    "start": "1212553",
    "end": "1218669"
  },
  {
    "text": "of the--of calling\nother things that apply, we may or may not\nneed to save continue. ",
    "start": "1218670",
    "end": "1227360"
  },
  {
    "text": "That's the first step I did. And then we can look\nand see what's actually, what's actually needed.",
    "start": "1227360",
    "end": "1232960"
  },
  {
    "text": "See, we don't-- didn't\nreally need to save env or cross-evaluating f, because\nit wouldn't, it wouldn't trash",
    "start": "1232960",
    "end": "1239539"
  },
  {
    "text": "it. So if we take advantage of that,\nand see the evaluation of f",
    "start": "1239540",
    "end": "1247030"
  },
  {
    "text": "here, doesn't really need to\nworry about, about hurting env.",
    "start": "1247030",
    "end": "1252485"
  },
  {
    "text": "And similarly, the\nevaluation of x here, when the evaluator\ndid that it said,",
    "start": "1252485",
    "end": "1258830"
  },
  {
    "text": "oh, I'd better preserve the\nfunction register around that, because I might need it later. And I better preserve\nthe argument list.",
    "start": "1258830",
    "end": "1266956"
  },
  {
    "text": "Whereas the compiler is\nnow in a position to know, well, we didn't\nreally need to save-- to do those saves and restores.",
    "start": "1266957",
    "end": "1272730"
  },
  {
    "text": "So in fact, all of\nthe stack operations done by the evaluator\nturned out to be unnecessary",
    "start": "1272730",
    "end": "1278409"
  },
  {
    "text": "or overly pessimistic. And the compiler is in\na position to know that. ",
    "start": "1278410",
    "end": "1287470"
  },
  {
    "text": "Well that's the basic idea. We take the evaluator,\nwe eliminate the things that you don't need,\nthat in some sense",
    "start": "1287470",
    "end": "1293600"
  },
  {
    "text": "have nothing to do with\nthe compiler at all, just the evaluator, and then you\nsee which stack operations are",
    "start": "1293600",
    "end": "1299679"
  },
  {
    "text": "unnecessary. That's the basic\nstructure of the compiler that's described in the book.",
    "start": "1299680",
    "end": "1305130"
  },
  {
    "text": "Let me just show you\nhow that examples a little bit too simple.",
    "start": "1305130",
    "end": "1311279"
  },
  {
    "text": "To see how you, how you\nactually save a lot, let's look at a little bit more\ncomplicated expression. ",
    "start": "1311280",
    "end": "1318330"
  },
  {
    "text": "F of G of X and 1.",
    "start": "1318330",
    "end": "1323542"
  },
  {
    "text": "And I'm not going to go\nthrough all the code. There's a, there's\na fair pile of it.",
    "start": "1323542",
    "end": "1329717"
  },
  {
    "text": "I think there are,\nthere are something like 16 pairs of register\nsaves and restores as the evaluator\nwalks through that.",
    "start": "1329717",
    "end": "1337269"
  },
  {
    "text": "Here's a diagram of them. Let's see. You see what's going on.",
    "start": "1337270",
    "end": "1343442"
  },
  {
    "text": "You start out by--the\nevaluator says, oh, I'm about to do an application. I'll preserve the environment. I'll restore it here.",
    "start": "1343442",
    "end": "1350261"
  },
  {
    "text": "Then I'm about to do\nthe first operand. ",
    "start": "1350261",
    "end": "1356790"
  },
  {
    "text": "Here it recursively\ngoes to the evaluator. The evaluator says, oh,\nthis is an application, I'll save the environment,\ndo the operator",
    "start": "1356790",
    "end": "1363025"
  },
  {
    "text": "of that combination,\nrestore it here. This save--this restore\nmatches that save.",
    "start": "1363025",
    "end": "1369980"
  },
  {
    "text": "And so on. There's unev here,\nwhich turns out to be completely\nunnecessary, continues",
    "start": "1369980",
    "end": "1375480"
  },
  {
    "text": "getting bumped around here. The function\nregister is getting, getting saved across the first\noperands, across the operands.",
    "start": "1375480",
    "end": "1385305"
  },
  {
    "text": "All sorts of things\nare going on. But if you say,\nwell, what of those really were the business\nof the compiler as",
    "start": "1385305",
    "end": "1390460"
  },
  {
    "text": "opposed to the evaluator,\nyou get rid of a whole bunch. And then on top of that,\nif you say things like,",
    "start": "1390460",
    "end": "1399014"
  },
  {
    "text": "the evaluation of F doesn't\nhurt the environment register, or simply looking\nup the symbol X,",
    "start": "1399015",
    "end": "1409370"
  },
  {
    "text": "you don't have to protect the\nfunction register against that.",
    "start": "1409370",
    "end": "1414570"
  },
  {
    "text": "So you come down to just a\ncouple of, a couple of pairs here. ",
    "start": "1414570",
    "end": "1420280"
  },
  {
    "text": "And still, you can\ndo a little better. Look what's going on here\nwith the environment register. The environment register\ncomes along and says,",
    "start": "1420280",
    "end": "1427060"
  },
  {
    "text": "oh, here's a combination. ",
    "start": "1427060",
    "end": "1434280"
  },
  {
    "text": "This evaluator, by the way,\ndoesn't know anything about G. So here it says, so it says,\nI'd better save the environment",
    "start": "1434280",
    "end": "1442870"
  },
  {
    "text": "register, because evaluating\nG might be some arbitrary piece of code that\nwould trash it, and I'm going to need it\nlater, after this argument,",
    "start": "1442870",
    "end": "1452220"
  },
  {
    "text": "for doing the second argument. So that's why this\none didn't go away,",
    "start": "1452220",
    "end": "1459110"
  },
  {
    "text": "because the compiler made\nno assumptions about what G would do. On the other hand, if you look\nat what the second argument is,",
    "start": "1459110",
    "end": "1466585"
  },
  {
    "text": "that's just looking up one. That doesn't need this\nenvironment register. So there's no reason to save it.",
    "start": "1466585",
    "end": "1472070"
  },
  {
    "text": "So in fact, you can get\nrid of that one, too. And from this whole pile\nof, of register operations,",
    "start": "1472070",
    "end": "1477720"
  },
  {
    "text": "if you simply do a\nlittle bit of reasoning like that, you get down\nto, I think, just two pairs of saves and restores.",
    "start": "1477720",
    "end": "1484764"
  },
  {
    "text": "And those, in fact, could\ngo away further if you, if you knew something about G.",
    "start": "1484764",
    "end": "1496650"
  },
  {
    "text": "So again, the general\nidea is that the reason the compiler can be better is\nthat the interpreter doesn't know what it's\nabout to encounter.",
    "start": "1496650",
    "end": "1503309"
  },
  {
    "text": "It has to be maximally\npessimistic in saving things to protect itself. The compiler only\nhas to deal with what",
    "start": "1503310",
    "end": "1510820"
  },
  {
    "text": "actually had to be saved. And there are two reasons\nthat something might not",
    "start": "1510820",
    "end": "1516370"
  },
  {
    "text": "have to be saved. One is that what you're\nprotecting it against, in fact, didn't trash the\nregister, like it was just",
    "start": "1516370",
    "end": "1522659"
  },
  {
    "text": "a variable look-up. And the other one\nis, that the thing that you were saving\nit for might turn out",
    "start": "1522660",
    "end": "1528960"
  },
  {
    "text": "not to actually need it. So those are the two\nbasic pieces of knowledge",
    "start": "1528960",
    "end": "1534210"
  },
  {
    "text": "that the compiler can take\nadvantage of in making the code more efficient. ",
    "start": "1534210",
    "end": "1544242"
  },
  {
    "text": "Let's break for questions. ",
    "start": "1544242",
    "end": "1551279"
  },
  {
    "text": "AUDIENCE: You kept saying\nthat the uneval register, unev register didn't\nneed to be used at all. Does that mean\nthat you could just",
    "start": "1551280",
    "end": "1557390"
  },
  {
    "text": "map a six-register machine? Or is that, in this particular\nexample, it didn't need to be used? PROFESSOR: For the compiler,\nyou could generate code",
    "start": "1557390",
    "end": "1565390"
  },
  {
    "text": "for the six-register,\nfive, right? Because that exp goes away also. ",
    "start": "1565390",
    "end": "1571750"
  },
  {
    "text": "Assuming--yeah, you can get\nrid of both exp and unev, because, see, those are data\nstructures of the evaluator.",
    "start": "1571750",
    "end": "1577380"
  },
  {
    "text": "Those are all\nthings that would be constants from the point\nof view of the compiler. The only thing is this\nparticular compiler",
    "start": "1577380",
    "end": "1583860"
  },
  {
    "text": "is set up so that interpreted\ncode and compiled code can coexist.",
    "start": "1583860",
    "end": "1589330"
  },
  {
    "text": "So the way to think\nabout it is, is maybe you build a chip which\nis the evaluator,",
    "start": "1589330",
    "end": "1595940"
  },
  {
    "text": "and what the compiler might do\nis generate code for that chip. It just wouldn't use\ntwo of the registers.",
    "start": "1595940",
    "end": "1601550"
  },
  {
    "start": "1601550",
    "end": "1611158"
  },
  {
    "text": "All right, let's take a break. [MUSIC PLAYING]",
    "start": "1611158",
    "end": "1648576"
  },
  {
    "text": "We just looked at what the\ncompiler is supposed to do. Now let's very\nbriefly look at how,",
    "start": "1648576",
    "end": "1656230"
  },
  {
    "text": "how this gets accomplished. And I'm going to\ngive no details. There's, there's a giant\npile of code in the book that",
    "start": "1656230",
    "end": "1662390"
  },
  {
    "text": "gives all the details. But what I want to do\nis just show you the, the essential idea here.",
    "start": "1662390",
    "end": "1669590"
  },
  {
    "text": "Worry about the details\nsome other time. Let's imagine that we're\ncompiling an expression that",
    "start": "1669590",
    "end": "1675419"
  },
  {
    "text": "looks like there's\nsome operator, and there are two arguments. ",
    "start": "1675420",
    "end": "1683659"
  },
  {
    "text": "Now, the-- what's the code that\nthe compiler should generate?",
    "start": "1683660",
    "end": "1688940"
  },
  {
    "text": "Well, first of all, it\nshould recursively go off and compile the operator.",
    "start": "1688940",
    "end": "1694192"
  },
  {
    "text": "So it says, I'll\ncompile the operator. ",
    "start": "1694192",
    "end": "1701250"
  },
  {
    "text": "And where I'm going\nto need that is to be in the function\nregister, eventually.",
    "start": "1701250",
    "end": "1708395"
  },
  {
    "text": "So I'll compile\nsome instructions that will compile the\noperator and end up with the result in\nthe function register.",
    "start": "1708395",
    "end": "1718600"
  },
  {
    "start": "1718600",
    "end": "1725419"
  },
  {
    "text": "The next thing it's going to\ndo, another piece is to say, well, I have to compile\nthe first argument.",
    "start": "1725420",
    "end": "1735140"
  },
  {
    "text": "So it calls itself recursively. And let's say the\nresult will go into val.",
    "start": "1735140",
    "end": "1743010"
  },
  {
    "start": "1743010",
    "end": "1749047"
  },
  {
    "text": "And then what it's\ngoing to need to do is start setting up\nthe argument list. So it'll say, assign\nto argl cons of fetch--",
    "start": "1749047",
    "end": "1765370"
  },
  {
    "text": "so it generates this\nliteral instruction-- fetch of val onto empty list.",
    "start": "1765370",
    "end": "1772380"
  },
  {
    "text": " However, it might have to work-- ",
    "start": "1772380",
    "end": "1779590"
  },
  {
    "text": "when it gets here, it's going\nto need the environment. It's going to need whatever\nenvironment was here",
    "start": "1779590",
    "end": "1785370"
  },
  {
    "text": "in order to do this evaluation\nof the first argument. So it has to ensure that\nthe compilation of this",
    "start": "1785370",
    "end": "1793010"
  },
  {
    "text": "operand, or it has to\nprotect the function register against\nwhatever might happen",
    "start": "1793010",
    "end": "1799440"
  },
  {
    "text": "in the compilation\nof this operand. So it puts a note here\nand says, oh, this piece",
    "start": "1799440",
    "end": "1804490"
  },
  {
    "text": "should be done preserving\nthe environment register.",
    "start": "1804490",
    "end": "1812650"
  },
  {
    "text": " Similarly, here,\nafter it gets done",
    "start": "1812650",
    "end": "1821799"
  },
  {
    "text": "compiling the\nfirst operand, it's going to say, I better compile-- I'm going to need to\nknow the environment",
    "start": "1821800",
    "end": "1826818"
  },
  {
    "text": "for the second operand. So it puts a little note\nhere, saying, yeah, this is also done preserving env.",
    "start": "1826818",
    "end": "1835910"
  },
  {
    "text": " Now it goes on and says,\nwell, the next chunk of code",
    "start": "1835910",
    "end": "1843370"
  },
  {
    "text": "is the one that's going to\ncompile the second argument.",
    "start": "1843370",
    "end": "1850760"
  },
  {
    "text": "And let's say it'll compile it\nwith a targeted to val, as they",
    "start": "1850760",
    "end": "1858860"
  },
  {
    "text": "say. ",
    "start": "1858860",
    "end": "1863940"
  },
  {
    "text": "And then it'll generate\nthe literal instruction, building up the argument list.",
    "start": "1863940",
    "end": "1869250"
  },
  {
    "text": "So it'll say, assign to\nargl cons of the new value",
    "start": "1869250",
    "end": "1882050"
  },
  {
    "text": "it just got onto the\nold argument list.",
    "start": "1882050",
    "end": "1888845"
  },
  {
    "start": "1888845",
    "end": "1894059"
  },
  {
    "text": "However, in order to have\nthe old argument list, it better have arranged\nthat the argument",
    "start": "1894060",
    "end": "1899840"
  },
  {
    "text": "list didn't get trashed by\nwhatever happened in here. So it puts a little note\nhere and says, oh, this",
    "start": "1899840",
    "end": "1905990"
  },
  {
    "text": "has to be done preserving argl.",
    "start": "1905990",
    "end": "1911400"
  },
  {
    "text": " Now it's got the\nargument list set up.",
    "start": "1911400",
    "end": "1918090"
  },
  {
    "text": "And it's all ready to\ngo to apply dispatch. ",
    "start": "1918090",
    "end": "1926450"
  },
  {
    "text": "It generates this\nliteral instruction. ",
    "start": "1926450",
    "end": "1934990"
  },
  {
    "text": "Because now it's got\nthe arguments in argl and the operator\nin fun, but wait,",
    "start": "1934990",
    "end": "1941020"
  },
  {
    "text": "it's only got the\noperator in fun if it had ensured that\nthis block of code",
    "start": "1941020",
    "end": "1947230"
  },
  {
    "text": "didn't trash what was in\nthe function register. So it puts a little\nnote here and says, oh, yes, all this\nstuff here had better",
    "start": "1947230",
    "end": "1955279"
  },
  {
    "text": "be done preserving\nthe function register.",
    "start": "1955280",
    "end": "1960370"
  },
  {
    "text": " So that's the little--so when\nit starts ticking--so basically,",
    "start": "1960370",
    "end": "1966650"
  },
  {
    "text": "what the compiler does is\nappend a whole bunch of code",
    "start": "1966650",
    "end": "1971850"
  },
  {
    "text": "sequences. See, what it's got in it\nis little primitive pieces",
    "start": "1971850",
    "end": "1978480"
  },
  {
    "text": "of things, like how\nto look up a symbol, how to do a conditional. Those are all little\npieces of things.",
    "start": "1978480",
    "end": "1985445"
  },
  {
    "text": "And then it appends\nthem together in this sort of discipline. So the basic means\nof combining things",
    "start": "1985445",
    "end": "1990940"
  },
  {
    "text": "is to append two code sequences. ",
    "start": "1990940",
    "end": "2001610"
  },
  {
    "text": "That's what's going on here.  And it's a little bit tricky.",
    "start": "2001610",
    "end": "2007590"
  },
  {
    "text": "The idea is that it appends\ntwo code sequences, taking care to preserve a register.",
    "start": "2007590",
    "end": "2015670"
  },
  {
    "text": "So the actual append\noperation looks like this. What it wants to do is say, if--",
    "start": "2015670",
    "end": "2021230"
  },
  {
    "text": "here's what it means to\nappend two code sequences. So if sequence one\nneeds register--",
    "start": "2021230",
    "end": "2033684"
  },
  {
    "text": "I should change this. Append sequence one to sequence\ntwo, preserving some register.",
    "start": "2033685",
    "end": "2043815"
  },
  {
    "text": " Let me say, and.",
    "start": "2043815",
    "end": "2051080"
  },
  {
    "text": "So it's clear that\nsequence one comes first. So if sequence two needs\nthe register and sequence",
    "start": "2051080",
    "end": "2064830"
  },
  {
    "text": "one modifies the register,\nthen the instructions",
    "start": "2064830",
    "end": "2075020"
  },
  {
    "text": "that the compiler spits\nout are, save the register.",
    "start": "2075020",
    "end": "2083379"
  },
  {
    "text": "Here's the code. You generate this code. Save the register,\nand then you put out",
    "start": "2083380",
    "end": "2089310"
  },
  {
    "text": "the recursively compiled\nstuff for sequence one. And then you restore\nthe register.",
    "start": "2089310",
    "end": "2094544"
  },
  {
    "start": "2094545",
    "end": "2100440"
  },
  {
    "text": "And then you put out\nthe recursively compiled stuff for sequence two.",
    "start": "2100440",
    "end": "2107330"
  },
  {
    "text": "That's in the case\nwhere you need to do it. Sequence two actually\nneeds the register, and sequence one\nactually clobbers it.",
    "start": "2107330",
    "end": "2115430"
  },
  {
    "text": "So that's sort of if. Otherwise, all you spit\nout is sequence one",
    "start": "2115430",
    "end": "2125380"
  },
  {
    "text": "followed by sequence two. So that's the basic operation\nfor sticking together",
    "start": "2125380",
    "end": "2131460"
  },
  {
    "text": "these bits of code fragments,\nthese bits of instructions into a sequence.",
    "start": "2131460",
    "end": "2136948"
  },
  {
    "text": "And you see, from\nthis point of view, the difference between\nthe interpreter",
    "start": "2136948",
    "end": "2144480"
  },
  {
    "text": "and the compiler,\nin some sense, is that where the compiler\nhas these preserving notes,",
    "start": "2144480",
    "end": "2150010"
  },
  {
    "text": "and says, maybe I'll actually\ngenerate the saves and restores and maybe I won't,\nthe interpreter being",
    "start": "2150010",
    "end": "2156220"
  },
  {
    "text": "maximally pessimistic always\nhas a save and restore here. That's the essential difference.",
    "start": "2156220",
    "end": "2164140"
  },
  {
    "text": "Well, in order to\ndo this, of course, the compiler needs some theory\nof what code sequences need",
    "start": "2164140",
    "end": "2170762"
  },
  {
    "text": "and modifier registers.  So the tiny little\nfragments that you put in,",
    "start": "2170762",
    "end": "2176930"
  },
  {
    "text": "like the basic primitive\ncode fragments, say,",
    "start": "2176930",
    "end": "2182940"
  },
  {
    "text": "what are the operations that you\ndo when you look up a variable? What are the sequence of things\nthat you do when you compile",
    "start": "2182940",
    "end": "2190060"
  },
  {
    "text": "a constant or apply a function? Those have little notations\nin there about what they need",
    "start": "2190060",
    "end": "2195500"
  },
  {
    "text": "and what they modify.  So the bottom-level\ndata structures--",
    "start": "2195500",
    "end": "2202750"
  },
  {
    "text": "Well, I'll say this. A code sequence to the\ncompiler looks like this.",
    "start": "2202750",
    "end": "2208070"
  },
  {
    "text": "It has the actual\nsequence of instructions. ",
    "start": "2208070",
    "end": "2215780"
  },
  {
    "text": "And then, along with it, there's\nthe set of registers modified.",
    "start": "2215780",
    "end": "2222195"
  },
  {
    "start": "2222195",
    "end": "2230460"
  },
  {
    "text": "And then there's the\nset of registers needed. ",
    "start": "2230460",
    "end": "2239910"
  },
  {
    "text": "So that's the\ninformation the compiler has that it draws on in order\nto be able to do this operation.",
    "start": "2239910",
    "end": "2245965"
  },
  {
    "text": " And where do those come from? Well, those come from,\nyou might expect,",
    "start": "2245965",
    "end": "2254213"
  },
  {
    "text": "for the very\nprimitive ones, we're going to put them in by hand. And then, when we\ncombine two sequences, we'll figure out what\nthese things should be.",
    "start": "2254213",
    "end": "2262080"
  },
  {
    "text": "So for example, a very\nprimitive one, let's see.",
    "start": "2262080",
    "end": "2268460"
  },
  {
    "text": "How about doing a\nregister assignment. So a primitive sequence might\nsay, oh, it's code fragment.",
    "start": "2268460",
    "end": "2276040"
  },
  {
    "text": "Its code instruction is\nassigned to R1, fetch of R2.",
    "start": "2276040",
    "end": "2283050"
  },
  {
    "text": "So this is an example. That might be an example of\na sequence of instructions.",
    "start": "2283050",
    "end": "2288510"
  },
  {
    "text": "And along with\nthat, it'll say, oh, what I need to remember\nis that that modifies R1,",
    "start": "2288510",
    "end": "2298700"
  },
  {
    "text": "and then it needs R2. ",
    "start": "2298700",
    "end": "2304630"
  },
  {
    "text": "So when you're first\nbuilding this compiler, you put in little fragments\nof stuff like that.",
    "start": "2304630",
    "end": "2311030"
  },
  {
    "text": "And now, when it\ncombines two sequences,",
    "start": "2311030",
    "end": "2316930"
  },
  {
    "text": "if I'm going to combine,\nlet's say, sequence one, that",
    "start": "2316930",
    "end": "2324460"
  },
  {
    "text": "modifies a bunch\nof registers M1, and needs a bunch\nof registers N1.",
    "start": "2324460",
    "end": "2330950"
  },
  {
    "text": " And I'm going to combine\nthat with sequence two.",
    "start": "2330950",
    "end": "2340800"
  },
  {
    "text": "That modifies a bunch\nof registers M2,",
    "start": "2340800",
    "end": "2347200"
  },
  {
    "text": "and needs a bunch\nof registers N2. ",
    "start": "2347200",
    "end": "2352590"
  },
  {
    "text": "Then, well, we\ncan reason it out. The new code fragment,\nsequence one, and--",
    "start": "2352590",
    "end": "2360230"
  },
  {
    "text": "followed by sequence two, well,\nwhat's it going to modify?",
    "start": "2360230",
    "end": "2367325"
  },
  {
    "text": "The things that it will\nmodify are the things that are modified either by\nsequence one or sequence two.",
    "start": "2367325",
    "end": "2373990"
  },
  {
    "text": "So the union of\nthese two sets are what the new thing modifies.",
    "start": "2373990",
    "end": "2380530"
  },
  {
    "text": "And then you say, well, what\nis this--what registers is it",
    "start": "2380530",
    "end": "2385620"
  },
  {
    "text": "going to need? It's going to need the\nthings that are, first of all, needed by sequence one.",
    "start": "2385620",
    "end": "2392790"
  },
  {
    "text": "So what it needs\nis sequence one. And then, well, not quite\nall of the ones that",
    "start": "2392790",
    "end": "2398400"
  },
  {
    "text": "are needed by sequence one. What it needs are\nthe ones that are needed by sequence\ntwo that have not",
    "start": "2398400",
    "end": "2404589"
  },
  {
    "text": "been set up by sequence one. So it's sort of the\nunion of the things",
    "start": "2404590",
    "end": "2412110"
  },
  {
    "text": "that sequence two\nneeds minus the ones that sequence one modifies.",
    "start": "2412110",
    "end": "2419202"
  },
  {
    "text": "Because it worries\nabout setting them up. ",
    "start": "2419202",
    "end": "2424230"
  },
  {
    "text": "So there's the basic\nstructure of the compiler. The way you do register\noptimizations is you",
    "start": "2424230",
    "end": "2430250"
  },
  {
    "text": "have some strategies for\nwhat needs to be preserved. That depends on\na data structure.",
    "start": "2430250",
    "end": "2435450"
  },
  {
    "text": "Well, it depends\non the operation of what it means to\nput things together. Preserving something,\nthat depends",
    "start": "2435450",
    "end": "2440710"
  },
  {
    "text": "on knowing what registers\nare needed and modified",
    "start": "2440710",
    "end": "2446200"
  },
  {
    "text": "by these code fragments. That depends on having\nlittle data structures, which",
    "start": "2446200",
    "end": "2451640"
  },
  {
    "text": "say, a code sequence is\nthe actual instructions, what they modify\nand what they need.",
    "start": "2451640",
    "end": "2457293"
  },
  {
    "text": "That comes from, at the\nprimitive level, building it in. At the primitive\nlevel, it's going to be completely obvious what\nsomething needs and modifies.",
    "start": "2457293",
    "end": "2464850"
  },
  {
    "text": "Plus, this particular way\nthat says, when I build up bigger ones, here's\nhow I generate",
    "start": "2464850",
    "end": "2470230"
  },
  {
    "text": "the new set of\nregisters modified and the new set of\nregisters needed. And that's the whole--",
    "start": "2470230",
    "end": "2475935"
  },
  {
    "text": "well, I shouldn't say\nthat's the whole thing. That's the whole thing\nexcept for about 30 pages of details in the book.",
    "start": "2475935",
    "end": "2481860"
  },
  {
    "text": "But it is a perfectly\nusable rudimentary compiler.",
    "start": "2481860",
    "end": "2488880"
  },
  {
    "text": "Let me kind of show\nyou what it does. Suppose we start out\nwith recursive factorial.",
    "start": "2488880",
    "end": "2496256"
  },
  {
    "text": "And these slides are going\nto be much too small to read. I just want to flash\nthrough the code and show you about\nhow much it is. ",
    "start": "2496257",
    "end": "2503968"
  },
  {
    "text": "That starts out with--here's\na first block of it, where it compiles a procedure\nentry and does a bunch of assignments. And this thing is basically\nup through the part",
    "start": "2503968",
    "end": "2511190"
  },
  {
    "text": "where it sets up\nto do the predicate and test whether the\npredicate's true.",
    "start": "2511190",
    "end": "2516829"
  },
  {
    "text": "The second part is\nwhat results from-- in the recursive call\nto fact of n minus one.",
    "start": "2516830",
    "end": "2524210"
  },
  {
    "text": "And this last part is\ncoming back from that and then taking care\nof the constant case.",
    "start": "2524210",
    "end": "2529890"
  },
  {
    "text": "So that's about how much code\nit would produce for factorial. We could make this compiler\nmuch, much better, of course.",
    "start": "2529890",
    "end": "2538380"
  },
  {
    "text": "The main way we\ncould make it better is to allow the compiler to\nmake any assumptions at all",
    "start": "2538380",
    "end": "2544290"
  },
  {
    "text": "about what happens when\nyou call a procedure. So this compiler, for\ninstance, doesn't even",
    "start": "2544290",
    "end": "2549630"
  },
  {
    "text": "know, say, that\nmultiplication is something",
    "start": "2549630",
    "end": "2554862"
  },
  {
    "text": "that could be coded in line. Instead, it sets up\nthis whole mechanism. It goes to apply-dispatch. ",
    "start": "2554863",
    "end": "2561430"
  },
  {
    "text": "That's a tremendous\nwaste, because what you do every time you\ngo to apply-dispatch is you have to concept this\nargument list, because it's",
    "start": "2561430",
    "end": "2567628"
  },
  {
    "text": "a very general thing\nyou're going to. In any real compiler,\nof course, you're going to have registers\nfor holding arguments.",
    "start": "2567628",
    "end": "2573830"
  },
  {
    "text": "And you're going to start\npreserving and saving the way you use those registers\nsimilar to the same strategy",
    "start": "2573830",
    "end": "2581200"
  },
  {
    "text": "here. So that's probably\nthe very main way that this particular compiler\nin the book could be fixed.",
    "start": "2581200",
    "end": "2588920"
  },
  {
    "text": "There are other things like\nlooking up variable values and making more efficient\nprimitive operations and all sorts of things.",
    "start": "2588920",
    "end": "2594490"
  },
  {
    "text": "Essentially, a\ngood Lisp compiler can absorb an arbitrary\namount of effort.",
    "start": "2594490",
    "end": "2599779"
  },
  {
    "text": "And probably one of the reasons\nthat Lisp is slow with compared to languages like FORTRAN is\nthat, if you look over history",
    "start": "2599780",
    "end": "2608099"
  },
  {
    "text": "at the amount of effort\nthat's gone into building Lisp compilers, it's nowhere\nnear the amount of effort that's gone into\nFORTRAN compilers.",
    "start": "2608100",
    "end": "2614520"
  },
  {
    "text": "And maybe that's something\nthat will change over the next couple of years. OK, let's break. ",
    "start": "2614520",
    "end": "2623860"
  },
  {
    "text": "Questions?  AUDIENCE: One of the\nvery first classes--",
    "start": "2623860",
    "end": "2629590"
  },
  {
    "text": "I don't know if it was\nduring class or after class- you showed me the, say,\naddition has a primitive",
    "start": "2629590",
    "end": "2636590"
  },
  {
    "text": "that we don't see, ampersand\nadd or something like that. Is that because, if\nyou're doing inline code",
    "start": "2636590",
    "end": "2642640"
  },
  {
    "text": "you'd want to just do it\nfor two operators, operands?",
    "start": "2642640",
    "end": "2648539"
  },
  {
    "text": "But if you had more\noperands, you'd want to do something special? PROFESSOR: Yeah, you're\nlooking in the actual scheme",
    "start": "2648540",
    "end": "2655290"
  },
  {
    "text": "implementation. There's a plus, and a\nplus is some operator. And then if you go look\ninside the code for plus,",
    "start": "2655290",
    "end": "2660357"
  },
  {
    "text": "you see something called-- I forget-- ampersand plus\nor something like that. And what's going on there\nis that particular kind",
    "start": "2660357",
    "end": "2666930"
  },
  {
    "text": "of optimization. Because, see, general plus\ntakes an arbitrary number of arguments. ",
    "start": "2666930",
    "end": "2674750"
  },
  {
    "text": "So the most general plus says,\noh, if I have an argument list, I'd better cons\nit up in some list",
    "start": "2674750",
    "end": "2681483"
  },
  {
    "text": "and then figure\nout how many there were or something like that. That's terribly\ninefficient, especially",
    "start": "2681483",
    "end": "2686783"
  },
  {
    "text": "since most of the time you're\nprobably adding two numbers. You don't want to really have\nto cons this argument list.",
    "start": "2686783",
    "end": "2692030"
  },
  {
    "text": "So what you'd like to do\nis build the code for plus with a bunch of entries.",
    "start": "2692030",
    "end": "2698170"
  },
  {
    "text": "So most of what it's\ndoing is the same. However, there might\nbe a special entry that you'd go to if you knew\nthere were only two arguments.",
    "start": "2698170",
    "end": "2704493"
  },
  {
    "text": "And those you'll\nput in registers. They won't be in\nan argument list and you won't have to cons. That's how a lot of\nthese things work.",
    "start": "2704493",
    "end": "2712570"
  },
  {
    "text": "OK, let's take a break. [MUSIC PLAYING] ",
    "start": "2712570",
    "end": "2742911"
  }
]