[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "If the necessary synchronization requires\nacquiring more than one lock, there are some",
    "start": "280",
    "end": "5320"
  },
  {
    "text": "special considerations that need to be taken\ninto account.",
    "start": "5320",
    "end": "9349"
  },
  {
    "text": "For example, the code below implements the\ntransfer of funds from one bank account to",
    "start": "9349",
    "end": "14190"
  },
  {
    "text": "another.",
    "start": "14190",
    "end": "15610"
  },
  {
    "text": "The code assumes there is a separate semaphore\nlock for each account and since it needs to",
    "start": "15610",
    "end": "20130"
  },
  {
    "text": "adjust the balance of two accounts, it acquires\nthe lock for each account.",
    "start": "20130",
    "end": "26000"
  },
  {
    "text": "Consider what happens if two customers try\nsimultaneous transfers between their two accounts.",
    "start": "26000",
    "end": "31410"
  },
  {
    "text": "The top customer will try to acquire the locks\nfor accounts 6005 and 6004.",
    "start": "31410",
    "end": "36030"
  },
  {
    "text": "The bottom customer tries to acquire the same\nlocks, but in the opposite order.",
    "start": "36030",
    "end": "43050"
  },
  {
    "text": "Once a customer has acquired both locks, the\ntransfer code will complete, releasing the",
    "start": "43050",
    "end": "48370"
  },
  {
    "text": "locks.",
    "start": "48370",
    "end": "49370"
  },
  {
    "text": "But what happens if the top customer acquires\nhis first lock (for account 6005) and the",
    "start": "49370",
    "end": "55288"
  },
  {
    "text": "bottom customer simultaneously acquires his\nfirst lock (for account 6004).",
    "start": "55289",
    "end": "60269"
  },
  {
    "text": "So far, so good, but now each customer will\nbe not be successful in acquiring their second",
    "start": "60269",
    "end": "66920"
  },
  {
    "text": "lock, since those locks are already held by\nthe other customer!",
    "start": "66920",
    "end": "72040"
  },
  {
    "text": "This situation is called a \"deadlock\" or \"deadly\nembrace\" because there is no way execution",
    "start": "72040",
    "end": "77500"
  },
  {
    "text": "for either process will resume.",
    "start": "77500",
    "end": "79950"
  },
  {
    "text": "Both will wait indefinitely to acquire a lock\nthat will never be available.",
    "start": "79950",
    "end": "85360"
  },
  {
    "text": "Obviously, synchronization involving multiple\nresources requires a bit more thought.",
    "start": "85360",
    "end": "90960"
  },
  {
    "start": "90000",
    "end": "268000"
  },
  {
    "text": "The problem of deadlock is elegantly illustrated\nby the Dining Philosophers problem.",
    "start": "90960",
    "end": "96070"
  },
  {
    "text": "Here there are, say, 5 philosophers waiting\nto eat.",
    "start": "96070",
    "end": "99859"
  },
  {
    "text": "Each requires two chopsticks in order to proceed,\nand there are 5 chopsticks on the table.",
    "start": "99859",
    "end": "105590"
  },
  {
    "text": "The philosophers follow a simple algorithm.",
    "start": "105590",
    "end": "109000"
  },
  {
    "text": "First they pick up the chopstick on their\nleft, then the chopstick on their right.",
    "start": "109000",
    "end": "113750"
  },
  {
    "text": "When they have both chopsticks they eat until\nthey're done, at which point they return both",
    "start": "113750",
    "end": "117890"
  },
  {
    "text": "chopsticks to the table, perhaps enabling\none of their neighbors to pick them up and",
    "start": "117890",
    "end": "121969"
  },
  {
    "text": "begin eating.",
    "start": "121969",
    "end": "123210"
  },
  {
    "text": "Again, we see the basic setup of needing two\n(or more) resources before the task can complete.",
    "start": "123210",
    "end": "130489"
  },
  {
    "text": "Hopefully you can see the problem that may\narise",
    "start": "130489",
    "end": "133220"
  },
  {
    "text": "If all philosophers pick up the chopstick\non their left, then all the chopsticks have",
    "start": "133220",
    "end": "137780"
  },
  {
    "text": "been acquired, and none of the philosophers\nwill be able to acquire their second chopstick",
    "start": "137780",
    "end": "142629"
  },
  {
    "text": "and eat.",
    "start": "142629",
    "end": "144050"
  },
  {
    "text": "Another deadlock!",
    "start": "144050",
    "end": "145640"
  },
  {
    "text": "Here are the conditions required for a deadlock:\n1.",
    "start": "145640",
    "end": "149170"
  },
  {
    "text": "Mutual exclusion, where a particular resource\ncan only be acquired by one process at a time.",
    "start": "149170",
    "end": "154410"
  },
  {
    "text": "2.",
    "start": "154410",
    "end": "155410"
  },
  {
    "text": "Hold-and-wait, where a process holds allocated\nresources while waiting to acquire the next",
    "start": "155410",
    "end": "160790"
  },
  {
    "text": "resource.",
    "start": "160790",
    "end": "161860"
  },
  {
    "text": "3.",
    "start": "161860",
    "end": "162940"
  },
  {
    "text": "No preemption, where a resource cannot be\nremoved from the process which acquired it.",
    "start": "162940",
    "end": "168500"
  },
  {
    "text": "Resources are only released after the process\nhas completed its transaction.",
    "start": "168500",
    "end": "172909"
  },
  {
    "text": "4.",
    "start": "172909",
    "end": "174260"
  },
  {
    "text": "Circular wait, where resources needed by one\nprocess are held by another, and vice versa.",
    "start": "174260",
    "end": "180069"
  },
  {
    "text": "How can we solve the problem of deadlocks\nwhen acquiring multiple resources?",
    "start": "180069",
    "end": "184680"
  },
  {
    "text": "Either we avoid the problem to begin with,\nor we detect that deadlock has occurred and",
    "start": "184680",
    "end": "189459"
  },
  {
    "text": "implement a recovery strategy.",
    "start": "189460",
    "end": "191800"
  },
  {
    "text": "Both techniques are used in practice.",
    "start": "191800",
    "end": "194330"
  },
  {
    "text": "In the Dining Philosophers problem, deadlock\ncan be avoided with a small modification to",
    "start": "194330",
    "end": "198960"
  },
  {
    "text": "the algorithm.",
    "start": "198960",
    "end": "200540"
  },
  {
    "text": "We start by assigning a unique number to each\nchopstick to establish a global ordering of",
    "start": "200540",
    "end": "205700"
  },
  {
    "text": "all the resources,\nthen rewrite the code to acquire resources",
    "start": "205700",
    "end": "209580"
  },
  {
    "text": "using the global ordering to determine which\nresource to acquire first, which second, and",
    "start": "209580",
    "end": "214599"
  },
  {
    "text": "so on.",
    "start": "214599",
    "end": "216470"
  },
  {
    "text": "With the chopsticks numbered, the philosophers\npick up the lowest-numbered chopstick from",
    "start": "216470",
    "end": "220720"
  },
  {
    "text": "either their left or right.",
    "start": "220720",
    "end": "222939"
  },
  {
    "text": "Then they pick up the other, higher-numbered\nchopstick, eat, and then return the chopsticks",
    "start": "222939",
    "end": "227840"
  },
  {
    "text": "to the table.",
    "start": "227840",
    "end": "229530"
  },
  {
    "text": "How does this avoid deadlock?",
    "start": "229530",
    "end": "232120"
  },
  {
    "text": "Deadlock happens when all the chopsticks have\nbeen picked up but no philosopher can eat.",
    "start": "232120",
    "end": "237590"
  },
  {
    "text": "If all the chopsticks have been been picked\nup, that means some philosopher has picked",
    "start": "237590",
    "end": "241650"
  },
  {
    "text": "up the highest-numbered chopstick and so must\nhave earlier picked up the lower-numbered",
    "start": "241650",
    "end": "246430"
  },
  {
    "text": "chopstick on his other side.",
    "start": "246430",
    "end": "249069"
  },
  {
    "text": "So that philosopher can eat then return both\nchopsticks to the table, breaking the hold-and-wait",
    "start": "249069",
    "end": "255190"
  },
  {
    "text": "cycle.",
    "start": "255190",
    "end": "256940"
  },
  {
    "text": "So if all the processes in the system can\nagree upon a global ordering for the resources",
    "start": "256940",
    "end": "261500"
  },
  {
    "text": "they require, then acquire them in order,\nthere will be no possibility of a deadlock",
    "start": "261500",
    "end": "266650"
  },
  {
    "text": "caused by a hold-and-wait cycle.",
    "start": "266650",
    "end": "269250"
  },
  {
    "start": "268000",
    "end": "384000"
  },
  {
    "text": "A global ordering is easy to arrange in our\nbanking code for the transfer transaction.",
    "start": "269250",
    "end": "273940"
  },
  {
    "text": "We'll modify the code to first acquire the\nlock for the lower-numbered account, then",
    "start": "273940",
    "end": "279031"
  },
  {
    "text": "acquire the lock for the higher-numbered account.",
    "start": "279031",
    "end": "282169"
  },
  {
    "text": "Now, both customers will first try to acquire\nthe lock for the 6004 account.",
    "start": "282169",
    "end": "288260"
  },
  {
    "text": "The customer that succeeds then can acquire\nthe lock for the 6005 account and complete",
    "start": "288260",
    "end": "293030"
  },
  {
    "text": "the transaction.",
    "start": "293030",
    "end": "295180"
  },
  {
    "text": "The key to deadlock avoidance was that customers\ncontented for the lock for the *first* resource",
    "start": "295180",
    "end": "301419"
  },
  {
    "text": "they both needed.",
    "start": "301419",
    "end": "303310"
  },
  {
    "text": "Acquiring that lock ensured they would be\nable to acquire the remainder of the shared",
    "start": "303310",
    "end": "307310"
  },
  {
    "text": "resources without fear that they would already\nbe allocated to another process in a way that",
    "start": "307310",
    "end": "312639"
  },
  {
    "text": "could cause a hold-and-wait cycle.",
    "start": "312639",
    "end": "315750"
  },
  {
    "text": "Establishing and using a global order for\nshared resources is possible when we can modify",
    "start": "315750",
    "end": "320960"
  },
  {
    "text": "all processes to cooperate.",
    "start": "320960",
    "end": "323150"
  },
  {
    "text": "Avoiding deadlock without changing the processes\nis a harder problem.",
    "start": "323150",
    "end": "328090"
  },
  {
    "text": "For example, at the operating system level,\nit would be possible to modify the WAIT SVC",
    "start": "328090",
    "end": "332271"
  },
  {
    "text": "to detect circular wait and terminate one\nof the WAITing processes, releasing its resources",
    "start": "332271",
    "end": "339100"
  },
  {
    "text": "and breaking the deadlock.",
    "start": "339100",
    "end": "342319"
  },
  {
    "text": "The other strategy we mentioned was detection\nand recovery.",
    "start": "342319",
    "end": "346810"
  },
  {
    "text": "Database systems detect when there's been\nan external access to the shared data used",
    "start": "346810",
    "end": "351169"
  },
  {
    "text": "by a particular transaction, which causes\nthe database to abort the transaction.",
    "start": "351169",
    "end": "357250"
  },
  {
    "text": "When issuing a transaction to a database,\nthe programmer specifies what should happen",
    "start": "357250",
    "end": "362340"
  },
  {
    "text": "if the transaction is aborted, e.g., she can\nspecify that the transaction be retried.",
    "start": "362340",
    "end": "369479"
  },
  {
    "text": "The database remembers all the changes to\nshared data that happen during a transaction",
    "start": "369479",
    "end": "373960"
  },
  {
    "text": "and only changes the master copy of the shared\ndata when it is sure that the transaction",
    "start": "373960",
    "end": "378990"
  },
  {
    "text": "will not be aborted,\nat which point the changes are committed to",
    "start": "378990",
    "end": "382979"
  },
  {
    "text": "the database.",
    "start": "382979",
    "end": "384990"
  },
  {
    "start": "384000",
    "end": "456000"
  },
  {
    "text": "In summary, we saw that organizing an application\nas communicating processes is often a convenient",
    "start": "384990",
    "end": "390199"
  },
  {
    "text": "way to go.",
    "start": "390200",
    "end": "391770"
  },
  {
    "text": "We used semaphores to synchronize the execution\nof the different processes, providing guarantees",
    "start": "391770",
    "end": "397300"
  },
  {
    "text": "that certain precedence constraints would\nbe met, even between statements in different",
    "start": "397300",
    "end": "402620"
  },
  {
    "text": "processes.",
    "start": "402620",
    "end": "403620"
  },
  {
    "text": "We also introduced the notion of critical\ncode sections and mutual exclusion constraints",
    "start": "403620",
    "end": "408800"
  },
  {
    "text": "that guaranteed that a code sequence would\nbe executed without interruption by another",
    "start": "408800",
    "end": "413370"
  },
  {
    "text": "process.",
    "start": "413370",
    "end": "415110"
  },
  {
    "text": "We saw that semaphores could also be used\nto implement those mutual exclusion constraints.",
    "start": "415110",
    "end": "421550"
  },
  {
    "text": "Finally we discussed the problem of deadlock\nthat can occur when multiple processes must",
    "start": "421550",
    "end": "426210"
  },
  {
    "text": "acquire multiple shared resources,\nand we proposed several solutions based on",
    "start": "426210",
    "end": "431199"
  },
  {
    "text": "a global ordering of resources or the ability\nto restart a transaction.",
    "start": "431199",
    "end": "437260"
  },
  {
    "text": "Synchronization primitives play a key role\nin the world of \"big data\" where there are",
    "start": "437260",
    "end": "441220"
  },
  {
    "text": "vast amounts of shared data, or when trying\nto coordinate the execution of thousands of",
    "start": "441220",
    "end": "446319"
  },
  {
    "text": "processes in the cloud.",
    "start": "446319",
    "end": "449090"
  },
  {
    "text": "Understanding synchronization issues and their\nsolutions is a key skill when writing most",
    "start": "449090",
    "end": "454250"
  },
  {
    "text": "modern applications.",
    "start": "454250",
    "end": "455539"
  }
]