[
  {
    "text": " Let's go ahead and get started.",
    "start": "0",
    "end": "7520"
  },
  {
    "text": "OK, so today we have one topic\nto finish up very briefly",
    "start": "7520",
    "end": "12940"
  },
  {
    "text": "from last time. So if you remember, when\nwe finished off last time,",
    "start": "12940",
    "end": "18660"
  },
  {
    "text": "we were talking about the\nexample of a multithreaded Web server. ",
    "start": "18660",
    "end": "25080"
  },
  {
    "text": "So the example that\nwe were talking about, and this is an\nexample that I'm going to use throughout the lecture\ntoday consisted of a Web server",
    "start": "25080",
    "end": "34720"
  },
  {
    "text": "with, this example\nconsists of a Web server",
    "start": "34720",
    "end": "40440"
  },
  {
    "text": "with three main modules\nor main components. So it consists, the three\nmodules are a networking",
    "start": "40440",
    "end": "46990"
  },
  {
    "text": "module, a Web server module -- ",
    "start": "46990",
    "end": "54879"
  },
  {
    "text": "-- which is in charge of\ngenerating, for example,",
    "start": "54880",
    "end": "61770"
  },
  {
    "text": "HTML pages, and then a disk\nmodule which is in charge of reading data off a disk.",
    "start": "61770",
    "end": "68280"
  },
  {
    "text": "OK, so this thing is\ngoing to be communicating with the disk, which I've\ndrawn as a cylinder here.",
    "start": "68280",
    "end": "75330"
  },
  {
    "text": "So what happens is\nthat client requests come in to this Web server. They come in to\nthe network module.",
    "start": "75330",
    "end": "81359"
  },
  {
    "text": "The network module\nforwards those requests on to the Web server. The Web server is in\ncharge of generating,",
    "start": "81360",
    "end": "87530"
  },
  {
    "text": "say, the HTML page that\ncorresponds to the request. And in order to do that, it\nmay need to read some data off",
    "start": "87530",
    "end": "92870"
  },
  {
    "text": "of the disk. So it forwards this request\nonto the disk module, which goes and actually gets\nthe page from the disk",
    "start": "92870",
    "end": "99439"
  },
  {
    "text": "and at some point later,\nthe disk returns the page to the Web server. The Web server returns the\npage to the network module,",
    "start": "99440",
    "end": "105920"
  },
  {
    "text": "and then the network module\nsends the answer back over the network to the user.",
    "start": "105920",
    "end": "111310"
  },
  {
    "text": "So this is a very simple\nexample of a Web server. It should be sort\nof familiar to you since you have just spent a\nwhile studying the Flash Web",
    "start": "111310",
    "end": "119130"
  },
  {
    "text": "server. So you can see that this is\nsort of a simplified description of what a Web server does.",
    "start": "119130",
    "end": "125320"
  },
  {
    "text": "So if you think about\nhow you actually go about designing a Web\nserver like this, of course",
    "start": "125320",
    "end": "131300"
  },
  {
    "text": "it's not the case that there\nis only one request that is moving between these modules\nat any one point in time.",
    "start": "131300",
    "end": "136810"
  },
  {
    "text": "So, in fact, there may be\nmultiple client requests that come in to the network module.",
    "start": "136810",
    "end": "142295"
  },
  {
    "text": "And the network module\nmay want to have multiple outstanding pages\nthat it's asking the Web",
    "start": "142295",
    "end": "147300"
  },
  {
    "text": "server to generate. And the Web server itself might\nbe requesting multiple items",
    "start": "147300",
    "end": "152400"
  },
  {
    "text": "from the disk. And so, in turn, that means\nthat at any point in time there could be sort\nof multiple results.",
    "start": "152400",
    "end": "159180"
  },
  {
    "text": "There could be results streaming\nback in from the disk which are going into the\nWeb server, which",
    "start": "159180",
    "end": "165470"
  },
  {
    "text": "is sort of chewing on\nresults and producing pages to the network module. And so it's possible\nfor there to be",
    "start": "165470",
    "end": "171560"
  },
  {
    "text": "sort of queues that are building\nup between these modules both on the send and receive. So, I'm going to\ndraw a queue, I'll",
    "start": "171560",
    "end": "178440"
  },
  {
    "text": "draw a queue just sort as a\nbox with these vertical arrows through it. So there is some\nbuffering that's happening between the\nsort of incoming requests",
    "start": "178440",
    "end": "185099"
  },
  {
    "text": "and the outgoing requests\non these modules. ",
    "start": "185100",
    "end": "191170"
  },
  {
    "text": "OK, and this buffering\nis a good thing. And we're going to\ntalk more about this throughout the lecture today\nbecause what it allows us to do",
    "start": "191170",
    "end": "197150"
  },
  {
    "text": "is it allows us to\ndecouple the operations of these different modules. So, for example, the disk module\ncan be reading a page from disk",
    "start": "197150",
    "end": "203020"
  },
  {
    "text": "while the HTML page, while the\nHTML server is, for example simultaneously generating\nan HTML page that",
    "start": "203020",
    "end": "208601"
  },
  {
    "text": "wants to return to the client.  But in this\narchitecture, you can",
    "start": "208601",
    "end": "214000"
  },
  {
    "text": "see that, for example,\nwhen the Web server wants to produce a result, it can\nonly produce a result when",
    "start": "214000",
    "end": "220430"
  },
  {
    "text": "the disk pages that it needs\nare actually available. So the Web server is dependent\non some result from the disk",
    "start": "220430",
    "end": "227000"
  },
  {
    "text": "module being available. So if we were to look\nat just this Web server, I'm going to call this the\nHTML thread here and the disk",
    "start": "227000",
    "end": "234550"
  },
  {
    "text": "thread, so these\ntwo threads that are on the right side of this\ndiagram that I've drawn here,",
    "start": "234550",
    "end": "241160"
  },
  {
    "text": "If you were to look\nat the code that was running in these things,\nand we saw this last time, the code might look\nsomething like this.",
    "start": "241160",
    "end": "247530"
  },
  {
    "text": "So the HTML thread is just going\nto sit in a loop continually trying to de-queue information\nfrom this queue that is shared",
    "start": "247530",
    "end": "253830"
  },
  {
    "text": "between it and the disk thread. And then, the disk thread\nis going to be in a loop where it continually\nreads blocks off the disk,",
    "start": "253830",
    "end": "259120"
  },
  {
    "text": "and then enqueues\nthem onto this queue. So this design at first\nseems like it might be fine.",
    "start": "259120",
    "end": "265080"
  },
  {
    "text": "But then if you start thinking\nabout what's really going on here, there could be a problem. So, suppose for example that\nthe queue is of a finite length.",
    "start": "265080",
    "end": "272210"
  },
  {
    "text": "It only has a certain\nnumber of elements in it. Now when we keep calling enqueue\nover and over and over again,",
    "start": "272210",
    "end": "277690"
  },
  {
    "text": "it's possible that if the\nHTML thread isn't consuming these pages off the queue fast\nenough, that the queue could",
    "start": "277690",
    "end": "282720"
  },
  {
    "text": "fill up, and it could\noverflow, right? So that might be\na problem that we want to sort of make a condition\nthat we would explicitly",
    "start": "282720",
    "end": "289550"
  },
  {
    "text": "check for in the code. And so we could\ndo that by adding a set of conditions like this. So what you see here is that\nI have just augmented the code",
    "start": "289550",
    "end": "299390"
  },
  {
    "text": "with these two additional\nvariables, used and free, where used indicates the number blocks\nthat are in the queue that",
    "start": "299390",
    "end": "304530"
  },
  {
    "text": "are currently in use. And free indicates\nthe number of blocks that are in the code,\nthe number of blocks",
    "start": "304530",
    "end": "310764"
  },
  {
    "text": "that are in the queue\nthat are currently free. So what this loop does\nis that the disk thread says it only wants to enqueue\nsomething onto the queue",
    "start": "310764",
    "end": "318910"
  },
  {
    "text": "when there are some free blocks. So, it has a while loop\nthat just loops forever",
    "start": "318910",
    "end": "324420"
  },
  {
    "text": "and ever and ever while\nthey're waiting when there are no free blocks, OK? And similarly, the\nHTML thread is just",
    "start": "324420",
    "end": "330830"
  },
  {
    "text": "going to wait forever when\nthere are no used blocks, OK? And then, when the disk\nthread enqueues a block",
    "start": "330830",
    "end": "338600"
  },
  {
    "text": "onto the queue, it's going\nto decrement the free count because it's reduced\nthe number of things that are in the queue.",
    "start": "338600",
    "end": "344080"
  },
  {
    "text": "And it's going to increment the\nused count because now there is one additional thing that's\navailable in the queue, OK? So this is a simple\nway in which now we've",
    "start": "344080",
    "end": "350870"
  },
  {
    "text": "made it so these things\nare waiting for each other. They are coordinating\nwith each other by use of these two shared\nvariables used in free.",
    "start": "350870",
    "end": "358370"
  },
  {
    "text": "OK, so these two threads\nshare these variables. So that's fine.",
    "start": "358370",
    "end": "364449"
  },
  {
    "text": "But if you think about this\nfrom a scheduling point of view, there still is a little bit of\na problem with this approach.",
    "start": "364450",
    "end": "370040"
  },
  {
    "text": "So in particular, what's\ngoing on here is that, oops,",
    "start": "370040",
    "end": "382140"
  },
  {
    "text": "when one of these threads enters\ninto one of these while loops, it's just going to\nsit there checking this condition over and over\nand over and over again, right?",
    "start": "382140",
    "end": "389289"
  },
  {
    "text": "So then the thread scheduler\nschedules that thread. It's going to repeatedly\ncheck this condition. And that's maybe\nnot so desirable.",
    "start": "389290",
    "end": "395449"
  },
  {
    "text": "So suppose, for example,\nthat the HTML thread enters into this loop and\nstarts looping because there's no data available.",
    "start": "395450",
    "end": "401336"
  },
  {
    "text": "Now, what really we\nwould like to have happen is for the disk thread to be\nallowed to get a chance to run, so maybe it can produce some\ndata so that the HTML thread",
    "start": "401336",
    "end": "408451"
  },
  {
    "text": "can then go ahead and operate. But, with this while loop\nthere, we can't quite do that.",
    "start": "408451",
    "end": "413700"
  },
  {
    "text": "We just sort of waste\nthe CPU during the time we are in this while loop. So, instead what\nwe are going to do is introduce the set of what\nwe call sequence coordination",
    "start": "413700",
    "end": "421001"
  },
  {
    "text": "operators. ",
    "start": "421001",
    "end": "429550"
  },
  {
    "text": "So in order to\nintroduce this, we're going to add something,\na new kind of data type that we call an eventcount.",
    "start": "429550",
    "end": "435465"
  },
  {
    "text": " An eventcount, you\ncan just think of it as an integer that indicates\nthe number of times",
    "start": "435465",
    "end": "446009"
  },
  {
    "text": "that something has occurred. It's just some sort of\nrunning counter variable. ",
    "start": "446010",
    "end": "453050"
  },
  {
    "text": "And we're going to\nintroduce two new routines. So these two routines are\ncalled wait and notify.",
    "start": "453050",
    "end": "460780"
  },
  {
    "text": " OK, so wait takes two arguments.",
    "start": "460780",
    "end": "466504"
  },
  {
    "text": "It takes one of these\neventcount variables. ",
    "start": "466504",
    "end": "472410"
  },
  {
    "text": "And it takes a value. OK, so what wait says\nis check the value",
    "start": "472410",
    "end": "482870"
  },
  {
    "text": "of this eventcount thing, and\nsee whether when we check it,",
    "start": "482870",
    "end": "488729"
  },
  {
    "text": "the value of this eventcount\nis less than or equal to value.",
    "start": "488730",
    "end": "493750"
  },
  {
    "text": "If eventcount is less than or\nequal to value, then it waits.",
    "start": "493750",
    "end": "500110"
  },
  {
    "text": "And what it means\nfor it to wait is that it tells the\nthread scheduler that it no longer wants to be\nscheduled until somebody later",
    "start": "500110",
    "end": "508880"
  },
  {
    "text": "calls this notify routine on\nthis same eventcount variable.",
    "start": "508880",
    "end": "514270"
  },
  {
    "text": "OK, so wait says wait, if\nthis condition is true, and then notify says,\nwake up everybody",
    "start": "514270",
    "end": "519809"
  },
  {
    "text": "who's waiting on this variable. ",
    "start": "519809",
    "end": "526140"
  },
  {
    "text": "So we can use these routines in\nthe following way in this code. And it's really very\nstraightforward. We simply change our iteration\nthrough our while loops",
    "start": "526140",
    "end": "536150"
  },
  {
    "text": "into wait statements. So what we're going\nto do is we're going to have the HTML thread\nwait until the value of used",
    "start": "536150",
    "end": "542720"
  },
  {
    "text": "becomes greater than zero. And we're going to have\nour disk thread wait until the value of free\nbecomes greater than zero.",
    "start": "542720",
    "end": "549019"
  },
  {
    "text": "And then the only other thing\nthat we have to add to this is simply a call to notify. So what notify does\nis it indicates",
    "start": "549020",
    "end": "557560"
  },
  {
    "text": "to any other thread\nthat is waiting on a particular variable\nthat that thread can run.",
    "start": "557560",
    "end": "562870"
  },
  {
    "text": "So the HTML thread\nwill notify free, which will tell the disk\nthread that it can now",
    "start": "562870",
    "end": "568250"
  },
  {
    "text": "begin running if it had been\nwaiting on the variable free. ",
    "start": "568250",
    "end": "573890"
  },
  {
    "text": "OK, so this emulates the\nbehavior of the while loop that we had before except that\nthe thread scheduler, rather",
    "start": "573890",
    "end": "580326"
  },
  {
    "text": "than sitting in an\ninfinite while loop simply doesn't schedule the HTML\nthread or the disk thread while it's waiting in one\nof these wait statements.",
    "start": "580326",
    "end": "588330"
  },
  {
    "text": "OK, so what we're going\nto talk about for the rest",
    "start": "588330",
    "end": "593550"
  },
  {
    "text": "of the lecture today\nis related to this, and I think you will see why\nas we get through the talk.",
    "start": "593550",
    "end": "599510"
  },
  {
    "text": "The topic for today\nis performance. ",
    "start": "599510",
    "end": "606970"
  },
  {
    "text": "So performance, what we've\nlooked at so far in this class are these various ways of\nstructuring complex programs,",
    "start": "606970",
    "end": "614190"
  },
  {
    "text": "how to break them up\ninto several modules, the client/server\nparadigm, how threads work,",
    "start": "614190",
    "end": "620380"
  },
  {
    "text": "how a thread scheduler works,\nall of these sort of big topics about how you design a system. But we haven't said anything\nabout how you take a system",
    "start": "620380",
    "end": "627050"
  },
  {
    "text": "design and in an ordered,\nregular, systematic way, think about making that\nsystem run efficiently.",
    "start": "627050",
    "end": "633320"
  },
  {
    "text": "So that's what we're going\nto try and get at today. We're going to look\nat a set of techniques that we can use to make a\ncomputer system more efficient.",
    "start": "633320",
    "end": "641460"
  },
  {
    "text": "And so, these techniques,\nthere are really three techniques that we're\ngoing to look at today.",
    "start": "641460",
    "end": "647350"
  },
  {
    "text": "The first one is a technique\ncalled concurrency. And concurrency is really\nabout allowing the system",
    "start": "647350",
    "end": "654080"
  },
  {
    "text": "to perform multiple\noperations simultaneously. So, for example, in\nour sample Web server,",
    "start": "654080",
    "end": "660110"
  },
  {
    "text": "it may be the case that\nwe have this disc that we can sort of read pages\nfrom at the same time",
    "start": "660110",
    "end": "666120"
  },
  {
    "text": "that, for example, the\nCPU generates some Web pages that it's going\nto output to the client.",
    "start": "666120",
    "end": "671449"
  },
  {
    "text": "OK, so that's what\nconcurrency is about. We are also going to look at\na technique called caching, which you guys should\nhave all seen before.",
    "start": "671450",
    "end": "678050"
  },
  {
    "text": "Caching is really\njust about saving off some previous work, some\nprevious computation that we've already done,\nor our previous disk page",
    "start": "678050",
    "end": "684780"
  },
  {
    "text": "that we've already read in. We want to save it off so\nthat we can reuse it again at a later time. And then finally,\nwe are going to look",
    "start": "684780",
    "end": "690470"
  },
  {
    "text": "at something called scheduling. So scheduling is about when\nwe have multiple requests",
    "start": "690470",
    "end": "696990"
  },
  {
    "text": "to process, we might\nbe able to order those requests in a certain\nway or group the requests together in a certain\nway so that we can",
    "start": "696990",
    "end": "703790"
  },
  {
    "text": "make the system more efficient. So it's really about sort of\nchoosing the order in which we do things in order to make the\nsystem run more efficiently.",
    "start": "703790",
    "end": "713200"
  },
  {
    "text": "And throughout the\ncourse of this, I'm going to use this\nexample of this Web server that we've been talking\nabout to sort of motivate",
    "start": "713200",
    "end": "718971"
  },
  {
    "text": "each of the applications,\nor each of these performance techniques that we're\ngoing to talk about.",
    "start": "718971",
    "end": "727090"
  },
  {
    "text": "So in order to get\nto the point where we can understand how these\nperformance techniques work, we need to talk a\nlittle bit about what",
    "start": "727090",
    "end": "732835"
  },
  {
    "text": "we mean by performance. How do we measure the\nperformance of the system, and how do we understand where\nthe bottlenecks in performance",
    "start": "732835",
    "end": "738770"
  },
  {
    "text": "in a system might be? So one thing we might want to,\nthe first thing we need to do",
    "start": "738770",
    "end": "748330"
  },
  {
    "text": "is to define a set of\nperformance metrics. These are just a set of\nterms and definitions",
    "start": "748330",
    "end": "753842"
  },
  {
    "text": "that we can use so\nthat we can talk about what the performance\nof the system is. So the first metric we\nmight be interested in",
    "start": "753842",
    "end": "759280"
  },
  {
    "text": "is the capacity of the system.",
    "start": "759280",
    "end": "764790"
  },
  {
    "text": "And capacity is\nsimply some measure of the amount of\nresource in a system.",
    "start": "764790",
    "end": "774175"
  },
  {
    "text": "So this sounds kind of abstract,\nbut what we mean by a resource is some sort of thing\nthat we can compete with. It's a disk, or a\nCPU, or a network,",
    "start": "774175",
    "end": "781350"
  },
  {
    "text": "so we might, for example, talk\nabout the capacity of a disk",
    "start": "781350",
    "end": "789800"
  },
  {
    "text": "might be the size in gigabytes\nor the capacity of a processor might be the number\nof instructions",
    "start": "789800",
    "end": "797920"
  },
  {
    "text": "it can execute per second.  OK, so once we have\ncapacity, now we",
    "start": "797920",
    "end": "804250"
  },
  {
    "text": "can start talking about\nhow much of the system we are actually using. So we talk about\nthe utilization. ",
    "start": "804250",
    "end": "812170"
  },
  {
    "text": "So utilization is simply\nthe percentage of capacity",
    "start": "812170",
    "end": "818540"
  },
  {
    "text": "we're using. So we might have used up\n80% of the disk blocks on our computer. ",
    "start": "818540",
    "end": "825950"
  },
  {
    "text": "So now there are two sort of\nproperties, or two metrics that are very commonly used\nin computer systems",
    "start": "825950",
    "end": "833160"
  },
  {
    "text": "in order to classify or sort of\ntalk about what the performance of the system is. So, the first metric is latency.",
    "start": "833160",
    "end": "841190"
  },
  {
    "text": "So, latency is simply the time\nfor a request to complete.",
    "start": "841190",
    "end": "850290"
  },
  {
    "text": "The REQ is request,\nOK, and we can also",
    "start": "850290",
    "end": "858410"
  },
  {
    "text": "talk about sort of\nthe inverse of this, what at first will seem\nlike the inverse of this,",
    "start": "858410",
    "end": "863620"
  },
  {
    "text": "which is throughput. ",
    "start": "863620",
    "end": "869420"
  },
  {
    "text": "That's simply the number\nof requests per second that we can process. So when you think about\nlatency and throughput,",
    "start": "869420",
    "end": "876339"
  },
  {
    "text": "when you first see\nthis definition, it's tempting to think\nthat simply throughput is the inverse of latency, right?",
    "start": "876340",
    "end": "882579"
  },
  {
    "text": "If it takes 10 ms for\na request to complete, well, then I must\nbe able to complete 100 requests per second, right?",
    "start": "882580",
    "end": "888860"
  },
  {
    "text": "And, that's true\nin the simple case",
    "start": "888860",
    "end": "895380"
  },
  {
    "text": "where in the very\nsimple example where I have a single module, for\nexample, that can process one request at a time, so a\nsingle computational resource,",
    "start": "895380",
    "end": "906180"
  },
  {
    "text": "for example, that can only\ndo one thing at a time, if this thing has some\ninfinite set of inputs in it,",
    "start": "906180",
    "end": "915270"
  },
  {
    "text": "it takes 10 ms to\nprocess each input, we'll see, say, 100 results\nper second coming out, OK?",
    "start": "915270",
    "end": "923710"
  },
  {
    "text": "So if something\ntakes 10 ms to do, you can be 100 of\nthem per second. So we could say the\nthroughput of this system",
    "start": "923710",
    "end": "930660"
  },
  {
    "text": "is 100 per second, and\nthe latency is 10 ms. What we're going to see\nthroughout this talk is",
    "start": "930660",
    "end": "935780"
  },
  {
    "text": "that in fact a strict\nrelationship between latency and throughput\ndoesn't hold I mean,",
    "start": "935780",
    "end": "942090"
  },
  {
    "text": "you guys have\nprobably already seen the notion of pipelining\nbefore in 6.004, and you understand\nthat pipelining",
    "start": "942090",
    "end": "947180"
  },
  {
    "text": "is a way in which we can improve\nthe throughput of the system without necessarily\nchanging the latency. And we'll talk about that more\ncarefully as this talk goes on.",
    "start": "947180",
    "end": "956380"
  },
  {
    "text": "OK, so given these metrics,\nnow what we need to do is think a little bit about, OK,\nso suppose I have some system,",
    "start": "956380",
    "end": "964750"
  },
  {
    "text": "and suppose I have some sort\nof set of goals for that system like I want the system\nto be able to process a certain number of\nrequests per second,",
    "start": "964750",
    "end": "971150"
  },
  {
    "text": "or I want the latency of this\nsystem to be under some amount. So then the question is, so you\nare given this computer system",
    "start": "971150",
    "end": "978640"
  },
  {
    "text": "and you sit down and\nyou want to measure it. And so you're going\nto measure the system. And what do you expect to find?",
    "start": "978640",
    "end": "987399"
  },
  {
    "text": "So, in the design\nof computer systems, it turns out that there is some\nsort of well-known performance",
    "start": "987400",
    "end": "994870"
  },
  {
    "text": "pitfalls, or so-called\nperformance bottlenecks. ",
    "start": "994870",
    "end": "1004900"
  },
  {
    "text": "And the goal of sort of\ndoing performance analysis of a system is to\nlook at the system and figure out where\nthe bottlenecks are.",
    "start": "1004900",
    "end": "1010899"
  },
  {
    "text": "So, this typically in the\ndesign of the big computer system, what we're\nworried about is which of the little individual\nmodules within the system",
    "start": "1010900",
    "end": "1019149"
  },
  {
    "text": "is most responsible for\nslowing down my computer. And what should\nI do in order to, sort of, and then once you've\nidentified that module, picking",
    "start": "1019150",
    "end": "1025791"
  },
  {
    "text": "about how to make a particular\nmodule that slow run faster. So that's really what finding\nperformance bottlenecks is about.",
    "start": "1025791",
    "end": "1033130"
  },
  {
    "text": "And there's a classic bottleneck\nthat occurs in computer systems that you guys all\nneed to know about.",
    "start": "1033130",
    "end": "1038636"
  },
  {
    "text": "It's this so-called\nI/O bottleneck.  OK, so what the\nI/O bottleneck says",
    "start": "1038637",
    "end": "1046390"
  },
  {
    "text": "it's really fairly\nstraightforward. If you think about\na computer system,",
    "start": "1046390",
    "end": "1052560"
  },
  {
    "text": "it has a hierarchy of\nmemory devices in it, OK? And these memory devices\nstart, or storage devices.",
    "start": "1052560",
    "end": "1059559"
  },
  {
    "text": "So these storage devices\nfirst start with the CPU. So the CPU has some\nset of registers on it,",
    "start": "1059560",
    "end": "1065080"
  },
  {
    "text": "a small number of them,\nsay for example, 32. And you can access those\nregisters very, very fast,",
    "start": "1065080",
    "end": "1070790"
  },
  {
    "text": "say once per instruction, once\nper cycle on the computer. So, for example, if your\nCPU is one gigahertz,",
    "start": "1070790",
    "end": "1078880"
  },
  {
    "text": "you may be able to access\none of these registers in 1 nanosecond. OK, and so typically at the\ntallest level, of this pyramid,",
    "start": "1078880",
    "end": "1089669"
  },
  {
    "text": "we have a small storage\nthat is fast, OK? As we go down this\npyramid adding new layers,",
    "start": "1089670",
    "end": "1097049"
  },
  {
    "text": "and looking at this\nstorage hierarchy, we're going to see that\nthings get bigger and slower. So, just below the CPU, we may\nhave some processor cache, OK,",
    "start": "1097050",
    "end": "1106140"
  },
  {
    "text": "and this might be,\nfor example, 512 kB.",
    "start": "1106140",
    "end": "1111750"
  },
  {
    "text": "And it might take 20 ns\nto access a single, say, block of this memory.",
    "start": "1111750",
    "end": "1118162"
  },
  {
    "text": "And then we're going to have\nthe RAM, the main memory of the device, which on a\nmodern machine might be 1 GB.",
    "start": "1118162",
    "end": "1124290"
  },
  {
    "text": "And it might take\n100 ns to access. And then below that, you take\na big step down or big step up",
    "start": "1124290",
    "end": "1130900"
  },
  {
    "text": "in size and big step\ndown and performance. You typically have a disk. So a disk might be as\nbig as 100 GB, right?",
    "start": "1130900",
    "end": "1137440"
  },
  {
    "text": "But, performance is very slow. So it's a mechanical\nthing that has to spin, and it only spins so fast.",
    "start": "1137440",
    "end": "1144270"
  },
  {
    "text": "So a typical access time\nfor a block of the disk might be as high as\n10 ms or even higher.",
    "start": "1144270",
    "end": "1150280"
  },
  {
    "text": "And then sometimes\npeople will talk in this hierarchy the network\nis actually a level below that.",
    "start": "1150280",
    "end": "1155576"
  },
  {
    "text": "So if something isn't available\non the local disk, for example, on our Web server,\nwe might actually have to go out into the\nnetwork and fetch it.",
    "start": "1155576",
    "end": "1161799"
  },
  {
    "text": "And if this network\nis the Internet, right, the Internet has\na huge amount of data. I mean, who knows\nhow much it is.",
    "start": "1161800",
    "end": "1167115"
  },
  {
    "text": "It's certainly\norders of terabytes. And it could take a long time\nto get a page of the Internet.",
    "start": "1167115",
    "end": "1172710"
  },
  {
    "text": "So it might take 100 ms\nto reach some remote site on the Internet.",
    "start": "1172710",
    "end": "1178090"
  },
  {
    "text": "All right, so the point\nabout this I/O bottleneck is that this is going to\nbe a very common, sort",
    "start": "1178090",
    "end": "1184710"
  },
  {
    "text": "of the disparity\nin the performance of these different\nlevels of the system is going to be a very\ncommon source of performance",
    "start": "1184710",
    "end": "1190909"
  },
  {
    "text": "problems in our computers. So in particular, if you look\nat the access time, here's 1 ns.",
    "start": "1190910",
    "end": "1197420"
  },
  {
    "text": "The access time\ndown here is 100 ms. This is a ten to the\neighth difference, right, which is equal to\n100 million times",
    "start": "1197420",
    "end": "1204780"
  },
  {
    "text": "difference in the performance\nof the fastest to the slowest thing here. So, if the CPU has\nto wait for something",
    "start": "1204780",
    "end": "1210130"
  },
  {
    "text": "to come over the network, you're\nwaiting for a very long time in terms of the amount of time\nthe CPU takes to, say, read",
    "start": "1210130",
    "end": "1215770"
  },
  {
    "text": "a single word of memory. So when we look at the\nperformance of a computer",
    "start": "1215770",
    "end": "1222490"
  },
  {
    "text": "system, we're going\nto see that often this sort of I/O bottleneck is\nthe problem with that system.",
    "start": "1222490",
    "end": "1227679"
  },
  {
    "text": "So if we look, for\nexample, at our Web server, with its three stages, where\nthis stage is the one that",
    "start": "1227680",
    "end": "1238830"
  },
  {
    "text": "goes to disk, this is the HTML\nstage, which maybe can just be computed in memory.",
    "start": "1238830",
    "end": "1245020"
  },
  {
    "text": "And this is the network stage. We might be talking about 10\nms latency for the disk stage.",
    "start": "1245020",
    "end": "1251980"
  },
  {
    "text": "We might be talking about\njust 1 ms for the HTML page, because all it has to do is\ndo some computation in memory.",
    "start": "1251980",
    "end": "1257850"
  },
  {
    "text": "And we might be talking about\n100 ms for the network stage to run because it has\nto send some data out to some remote site.",
    "start": "1257850",
    "end": "1264019"
  },
  {
    "text": "So if you, in order to\nprocess a single request, have to go through each of\nthese steps in sequence,",
    "start": "1264020",
    "end": "1269280"
  },
  {
    "text": "then the total\nperformance of the system, the time to process a single\nrequest is going to be,",
    "start": "1269280",
    "end": "1275410"
  },
  {
    "text": "say for example, 111 ms, the\nsum of these three things, OK?",
    "start": "1275410",
    "end": "1281540"
  },
  {
    "text": "And so if you look at the\nsystem and you say, OK, what's the performance\nbottleneck in this system?",
    "start": "1281540",
    "end": "1287989"
  },
  {
    "text": "So the performance\nbottleneck, right, is clearly this network stage\nbecause it takes the longest to run.",
    "start": "1287989",
    "end": "1293800"
  },
  {
    "text": "And so if we want to answer a\nquestion about where we should be optimizing the\nsystem, one place we might think to optimize\nis within this network stage.",
    "start": "1293800",
    "end": "1301750"
  },
  {
    "text": "And we'll see later an\nexample of a simple kind of optimization\nthat we can apply based on this notion\nof concurrency",
    "start": "1301750",
    "end": "1308346"
  },
  {
    "text": "to improve the performance\nof the networking stage. ",
    "start": "1308346",
    "end": "1315190"
  },
  {
    "text": "So as I just said, the\nnotion of concurrency is going to be the\nway that we are really going to get at sort of\neliminating these I/O",
    "start": "1315190",
    "end": "1321870"
  },
  {
    "text": "bottlenecks. So -- And the idea is going\nto be that we want to overlap",
    "start": "1321870",
    "end": "1332160"
  },
  {
    "text": "the use of some other resource\nduring the time that we are",
    "start": "1332160",
    "end": "1338290"
  },
  {
    "text": "waiting for one of these\nslow I/O devices to complete. And, we are going to look\nat two types of concurrency.",
    "start": "1338290",
    "end": "1344270"
  },
  {
    "text": "We're going to look at\nconcurrency between modules -- -- and within a module, OK?",
    "start": "1344270",
    "end": "1353000"
  },
  {
    "text": " So we may have modules that\nare composed, for example,",
    "start": "1353000",
    "end": "1359730"
  },
  {
    "text": "our networking module\nmay be composed of multiple threads,\neach of which can be accessing the network.",
    "start": "1359730",
    "end": "1364898"
  },
  {
    "text": "So that's an example of\nconcurrency within a module. And, we're going\nto look at the case of between module concurrency\nwhere, for example, the HTML",
    "start": "1364898",
    "end": "1373180"
  },
  {
    "text": "module can be processing and\nbe generating an HTML page, while the disk module is reading\na request for another client",
    "start": "1373180",
    "end": "1381159"
  },
  {
    "text": "at the same time. OK, and so the idea\nbehind concurrency",
    "start": "1381160",
    "end": "1386810"
  },
  {
    "text": "is really going to be\nthat by using concurrency, we can hide the latency of\none of these slow I/O stages.",
    "start": "1386810",
    "end": "1394169"
  },
  {
    "start": "1394170",
    "end": "1402130"
  },
  {
    "text": "OK, so the first\nkind of concurrency we're going to talk about is\nconcurrency between modules.",
    "start": "1402130",
    "end": "1407660"
  },
  {
    "text": " And the primary technique we use\nfor doing this is pipelining.",
    "start": "1407660",
    "end": "1414890"
  },
  {
    "text": "So the idea with\npipelining is as follows. Suppose we have our\nWeb server again.",
    "start": "1414890",
    "end": "1422080"
  },
  {
    "text": "And this time let's\ndraw it as I drew it at first with queues between\neach of the modules, OK?",
    "start": "1422080",
    "end": "1430870"
  },
  {
    "text": "So, we have our Web server\nwhich has our three stages. And suppose that\nwhat we are doing is we have some set\nof requests, sort",
    "start": "1430870",
    "end": "1439150"
  },
  {
    "text": "of an infinite queue of requests\nthat is sort of queued up at the disk thread,\nand the disk thread is producing these things.",
    "start": "1439150",
    "end": "1445030"
  },
  {
    "text": "And we're sending them through. Well, we want to look at\nhow many pages come out",
    "start": "1445030",
    "end": "1450690"
  },
  {
    "text": "here per second, and what\nthe latency of each page is. So, if we have some\nlist of requests,",
    "start": "1450690",
    "end": "1457590"
  },
  {
    "text": "suppose these requests are\nnumbered R1 through Rn, OK?",
    "start": "1457590",
    "end": "1462890"
  },
  {
    "text": "So what's going to happen\nis that the first request is going to start being processed\nby the disk server, right?",
    "start": "1462890",
    "end": "1470410"
  },
  {
    "text": "So, it's going to\nstart processing R1. Now, in a pipelining system,\nwhat we're going to want to do",
    "start": "1470410",
    "end": "1475620"
  },
  {
    "text": "is to have each one of these\nthreads sort of working on a different request, each\none of these modules working",
    "start": "1475620",
    "end": "1480970"
  },
  {
    "text": "on a different request\nat each point in time. And because the disk is\nan independent resource",
    "start": "1480970",
    "end": "1486269"
  },
  {
    "text": "from the CPU, is an independent\nresource from the network, this is going to be OK. These three modules\naren't actually",
    "start": "1486270",
    "end": "1491620"
  },
  {
    "text": "going to contend with\neach other too much. So what's going to happen\nis this guy's going to start processing R1, right?",
    "start": "1491620",
    "end": "1497720"
  },
  {
    "text": "And then after 10 ms, he's\ngoing to pass R1 up to here,",
    "start": "1497720",
    "end": "1503280"
  },
  {
    "text": "and start working on R2, OK? And now, 1 ms after\nthat, this guy",
    "start": "1503280",
    "end": "1508440"
  },
  {
    "text": "is going to finish R1\nand send it to here. And then, 9 ms after that,\nR2 is going to come up here.",
    "start": "1508440",
    "end": "1515730"
  },
  {
    "text": "And this guy can\nstart processing R3. OK, so does everybody\nsort of see where those numbers are coming from?",
    "start": "1515730",
    "end": "1520820"
  },
  {
    "text": " OK. [LAUGHTER] Good.",
    "start": "1520820",
    "end": "1526659"
  },
  {
    "text": "So now, what we're going to do\nis if we look at time starting",
    "start": "1526660",
    "end": "1534890"
  },
  {
    "text": "with this equal to time zero, in\nterms of the requests that come in and out of this\nlast network thread,",
    "start": "1534890",
    "end": "1541899"
  },
  {
    "text": "we can sort of get\na sense of how fast this thing is processing. So the first R1 enters into\nthis system after 11 ms, right?",
    "start": "1541900",
    "end": "1552880"
  },
  {
    "text": "It takes 10 ms to get\nthrough here and 1 ms to get through here. And, it starts processing\nR1 at this time.",
    "start": "1552880",
    "end": "1558910"
  },
  {
    "text": "So, I'm going to write\nplus R1 to suggest that we start processing it here. The next time that this\nmodule can do anything",
    "start": "1558910",
    "end": "1566570"
  },
  {
    "text": "is 100 ms after it first\nstarted processing,",
    "start": "1566570",
    "end": "1572669"
  },
  {
    "text": "the next time this module does\nanything is 100 ms after it started processing R1. So, at time 111 ms,\nit can output R1,",
    "start": "1572670",
    "end": "1582860"
  },
  {
    "text": "or it's done processing R1. And then, of course, by\nthat time, R2 and R3,",
    "start": "1582860",
    "end": "1591490"
  },
  {
    "text": "some set of requests\nhave already queued up in this queue waiting for it. So it can immediately begin\nprocessing R2 at this time, OK?",
    "start": "1591490",
    "end": "1601480"
  },
  {
    "text": "So then, clearly what's going\nto happen is after 211 ms, it's going to\noutput R2, and it's",
    "start": "1601480",
    "end": "1609030"
  },
  {
    "text": "going to begin\nprocessing R3, OK? So, there should be a plus\nthere and a plus there.",
    "start": "1609030",
    "end": "1615000"
  },
  {
    "text": "So, and similarly,\nat 311 we're going to move on to the next one. So, if you look\nnow at the system,",
    "start": "1615000",
    "end": "1621750"
  },
  {
    "text": "we've done something\npretty interesting, which is that it\nstill took us, sort of the time for this request to\ntravel through this whole thing",
    "start": "1621750",
    "end": "1631070"
  },
  {
    "text": "was 110 ms. But if you look at the\nenter - arrival time between each of these\nsuccessive outputs of R1,",
    "start": "1631070",
    "end": "1638850"
  },
  {
    "text": "they are only 100 ms, right? So we are only\nwaiting as long as it takes R1 to process\na result in order",
    "start": "1638850",
    "end": "1646600"
  },
  {
    "text": "to produce these results,\nin order to produce answers. So by pipelining the\nsystem in this way and having the Web server\nthread and the disk thread",
    "start": "1646600",
    "end": "1654940"
  },
  {
    "text": "do their processing\non later requests while R1 is processing\nits request, we can increase the\nthroughput of the system.",
    "start": "1654940",
    "end": "1662230"
  },
  {
    "text": "So in this case, we get\nan arrival every 100 ms. So the throughput is now equal\nto one result every 100 ms,",
    "start": "1662230",
    "end": "1673649"
  },
  {
    "text": "or ten results per second, OK? So, even though the\nlatency is still 111 ms,",
    "start": "1673650",
    "end": "1680350"
  },
  {
    "text": "the throughput is no\nlonger one over the latency because we have separated them\nin this way by pipelining them.",
    "start": "1680350",
    "end": "1686919"
  },
  {
    "text": "OK, so that was good. That was nice. We improve the performance\nof the system a little bit. But we didn't really\nimprove it very much, right?",
    "start": "1686920",
    "end": "1692219"
  },
  {
    "text": "We increased the throughput\nof this thing a little bit. But we haven't really addressed\nwhat we identified earlier as",
    "start": "1692219",
    "end": "1699420"
  },
  {
    "text": "being a bottleneck, which the\nfact that this R1 stage is taking 100 ms to process.",
    "start": "1699420",
    "end": "1705640"
  },
  {
    "text": "And in general, when we have\na pipeline system like this, we can say that the\nthroughput of the system",
    "start": "1705640",
    "end": "1711720"
  },
  {
    "text": "is bottlenecked by the\nslowest stage of the system. So anytime you have a pipeline,\nthe throughput of the system",
    "start": "1711720",
    "end": "1718370"
  },
  {
    "text": "is going to be the throughput\nof the slowest stage. So in this case, the throughput\nis 10 results per second.",
    "start": "1718370",
    "end": "1725110"
  },
  {
    "text": "And that's the throughput\nof the whole system. So if we want to improve\nthe throughput anymore than this, what we're\ngoing to have to do",
    "start": "1725110",
    "end": "1731070"
  },
  {
    "text": "is to somehow improve the\nperformance of this module here. And the way that\nwe're going to do that",
    "start": "1731070",
    "end": "1736950"
  },
  {
    "text": "is also by exploiting\nconcurrency. ",
    "start": "1736950",
    "end": "1745920"
  },
  {
    "text": "This is going to be this\nwithin a module concurrency.",
    "start": "1745920",
    "end": "1751760"
  },
  {
    "text": " So if you think about\nhow a Web server works,",
    "start": "1751760",
    "end": "1759840"
  },
  {
    "text": "or how a network\nworks, typically when we are sending these\nrequests to a client,",
    "start": "1759840",
    "end": "1767790"
  },
  {
    "text": "it's not that we are using up\nall of the available bandwidth of the network when we\nare sending these requests to a client, right?",
    "start": "1767790",
    "end": "1773140"
  },
  {
    "text": "You may be able to send\n100 MB per second out over your network. Or if you're connected\nto a machine here,",
    "start": "1773140",
    "end": "1778770"
  },
  {
    "text": "you may be able to send 10 MB\na second across the country to some other university.",
    "start": "1778770",
    "end": "1784840"
  },
  {
    "text": "The issue is that it takes\na relatively long time for that request to\npropagate, especially when that request is propagating\nout over the Internet.",
    "start": "1784840",
    "end": "1792300"
  },
  {
    "text": "The latency can be quite high. But you may not be\nusing all the bandwidth when you are, say, for\nexample, sending an HTML page.",
    "start": "1792300",
    "end": "1798600"
  },
  {
    "text": "So in particular it is the case\nthat multiple applications,",
    "start": "1798600",
    "end": "1804340"
  },
  {
    "text": "multiple threads, can be\nsimultaneously sending data out over the network. And if that doesn't make\nsense to you right now,",
    "start": "1804340",
    "end": "1810746"
  },
  {
    "text": "we're going to spend the whole\nnext four lectures talking about network performance. And it should make\nsense for you.",
    "start": "1810746",
    "end": "1815980"
  },
  {
    "text": "So just take my\nword for it that one of the properties\nof the network is so that the latency of the\nnetwork may be relatively high.",
    "start": "1815980",
    "end": "1823570"
  },
  {
    "text": "But in this case\nwe are not actually going to be using all\nthe bandwidth that's available to us. So that suggests that\nthere is an idle resource.",
    "start": "1823570",
    "end": "1830570"
  },
  {
    "text": "It means that we sort\nof have some network bandwidth that we could be\nusing that we are not using. So we'd like to take\nadvantage of that",
    "start": "1830570",
    "end": "1836510"
  },
  {
    "text": "in the design of our system. So we can do this in a\nrelatively simple way, which",
    "start": "1836510",
    "end": "1844130"
  },
  {
    "text": "is simply to say, let's,\nwithin our networking module, rather than only having one\nthread sending out requests",
    "start": "1844130",
    "end": "1850260"
  },
  {
    "text": "at one time, let's\nhave multiple threads. Let's, for example have,\nsay we have 10 threads.",
    "start": "1850260",
    "end": "1856710"
  },
  {
    "text": "So we have thread one,\nthread two, thread ten, OK? And we're going to\nallow these all to be",
    "start": "1856710",
    "end": "1862809"
  },
  {
    "text": "using the network at once. And they are all\ngoing to be talking to the same queue that's\nconnected to the same HTML",
    "start": "1862810",
    "end": "1872070"
  },
  {
    "text": "module that's connected\nto the same disk module. And there's a queue\nbetween these as well. ",
    "start": "1872070",
    "end": "1879610"
  },
  {
    "text": "OK, so now when we think\nabout the performance of this,",
    "start": "1879610",
    "end": "1885610"
  },
  {
    "text": "now let's see what happens\nwhen we start running requests through this pipeline. And let's see how frequently\nwe get requests coming out",
    "start": "1885610",
    "end": "1892601"
  },
  {
    "text": "of the other end. ",
    "start": "1892602",
    "end": "1897620"
  },
  {
    "text": "We draw our timeline again. You can see that R1 is\ngoing to come in here, and then after 10 ms it's\ngoing to move to here.",
    "start": "1897620",
    "end": "1905170"
  },
  {
    "text": "And then after 11 ms\nit'll arrive here. We'll start processing\nrequest one.",
    "start": "1905170",
    "end": "1910960"
  },
  {
    "text": "Now the second request,\nR2, is going to be here. And, we're going to have 9 ms\nof processing left to do on it.",
    "start": "1910960",
    "end": "1919000"
  },
  {
    "text": "After R1, it gets sent\non to the next thread. So, R2 is going to\nbe in here for 9 ms.",
    "start": "1919000",
    "end": "1926740"
  },
  {
    "text": "It will be in here for 1 ms. So, 10 ms after R1 arrives here,\nR2 is going to arrive here.",
    "start": "1926740",
    "end": "1932860"
  },
  {
    "text": "So, what we have\nis we have 11 ms. We have R1. Now, 10 ms later, we have R2.",
    "start": "1932860",
    "end": "1941240"
  },
  {
    "text": "OK, so now you can\nsee that suddenly this module, this system is able\nto process multiple requests,",
    "start": "1941240",
    "end": "1946950"
  },
  {
    "text": "so it has multiple requests that\nprocessing at the same time. And so 10 ms after that, R3 is\ngoing to start being processed,",
    "start": "1946950",
    "end": "1957320"
  },
  {
    "text": "and then, so what that means\nis that after some passage of time, we're going\nto have R10 in here.",
    "start": "1957320",
    "end": "1965900"
  },
  {
    "text": "And, that's going to go\nin after 101 ms, right? So, we're going to get R10. OK, and now we are ready\nto start processing.",
    "start": "1965900",
    "end": "1971990"
  },
  {
    "text": "Now we've sort of pushed\nall these through. And now, suppose we\nstart processing R11.",
    "start": "1971990",
    "end": "1977090"
  },
  {
    "text": "OK, so R11 is going to\nflow through this pipeline. And then, it's at\ntime 111, R11 is going",
    "start": "1977090",
    "end": "1986690"
  },
  {
    "text": "to be ready to be processed. But notice that at\ntime 111, we are finished processing R1, right?",
    "start": "1986690",
    "end": "1994990"
  },
  {
    "text": "So, at this time, we can\nadd R11 to the system, and we can output R1.",
    "start": "1994990",
    "end": "2001350"
  },
  {
    "text": "OK, so now every\n10 ms after this, another result is\ngoing to arrive,",
    "start": "2001350",
    "end": "2006850"
  },
  {
    "text": "and we're going to be able\nto output the next one. OK, and this is just\ngoing to continue. So now, you see\nwhat we've managed",
    "start": "2006850",
    "end": "2012786"
  },
  {
    "text": "to do is we've made this\nsystem so that every 10 ms after this sort of\nstartup time of 111 ms,",
    "start": "2012786",
    "end": "2020240"
  },
  {
    "text": "after every 10 ms, we are\nproducing a result, right? So we are going to get,\nactually, 100 per second.",
    "start": "2020240",
    "end": "2027920"
  },
  {
    "text": "This is going to be the\nthroughput of this system now. OK, so that was kind of neat.",
    "start": "2027920",
    "end": "2033819"
  },
  {
    "text": "How did we do that? What have we done here? Well, effectively\nwhat we've done is we've made it so\nthat this module here",
    "start": "2033819",
    "end": "2040690"
  },
  {
    "text": "can process sort of 10\ntimes as many requests as it could before. So this module itself now\nhas 10 times the throughput",
    "start": "2040690",
    "end": "2049320"
  },
  {
    "text": "that it had before. And we said before that the\nbottleneck in the system",
    "start": "2049320",
    "end": "2054560"
  },
  {
    "text": "is, the throughput of the\nsystem is the throughput of the slowest stage.",
    "start": "2054560",
    "end": "2061609"
  },
  {
    "text": "So what we've managed to do\nis decrease the throughput of the slowest stage. And so now the system is\nrunning 10 times as fast.",
    "start": "2061610",
    "end": "2067760"
  },
  {
    "text": "Notice now that the disk\nthread and the network threads both take 10 ms, sort of the\nthroughput of each of them",
    "start": "2067760",
    "end": "2074969"
  },
  {
    "text": "is 100 per second. And so, now we have sort of two\nstages that have been equalized",
    "start": "2074969",
    "end": "2081280"
  },
  {
    "text": "in their throughput. And so if we wanted\nto further increase the performance\nof the system, we would have to increase\nthe performance",
    "start": "2081280",
    "end": "2087732"
  },
  {
    "text": "of both of these stages,\nnot just one of them. OK, so that was a\nnice result, right?",
    "start": "2087733",
    "end": "2096629"
  },
  {
    "text": "It seems like we've\ndone something sort of, we've shown that we can use\nthis notion of concurrency",
    "start": "2096630",
    "end": "2101900"
  },
  {
    "text": "to increase the\nperformance of a system. But, we've introduced a\nlittle bit of a problem.",
    "start": "2101900",
    "end": "2111319"
  },
  {
    "text": "In particular, the problem\nwe've introduced is as follows. So, remember, we said we\nhad this set of threads,",
    "start": "2111320",
    "end": "2123530"
  },
  {
    "text": "one through, say for example,\nten, that our processing, they're all sharing\nthis queue data",
    "start": "2123530",
    "end": "2130160"
  },
  {
    "text": "structure that is connected\nup to our HTML thread.",
    "start": "2130160",
    "end": "2136349"
  },
  {
    "text": " So, the problem with this\nis that what we've done",
    "start": "2136350",
    "end": "2142870"
  },
  {
    "text": "is to introduce what's called\na race condition on this queue. And I'll show you\nwhat I mean by that. ",
    "start": "2142870",
    "end": "2151730"
  },
  {
    "text": "So if we look at\nour code snippet up here, for example for what's\nhappening in our HTML thread,",
    "start": "2151730",
    "end": "2157230"
  },
  {
    "text": "we see that what it does\nis it calls dequeue, right? So the problem\nthat we can have is",
    "start": "2157230",
    "end": "2162790"
  },
  {
    "text": "that we may have multiple\nof these modules that are simultaneously\nexecuting at the same time.",
    "start": "2162790",
    "end": "2168290"
  },
  {
    "text": "And they may simultaneously\nboth call dequeue, right? So depending on how\ndequeue is implemented,",
    "start": "2168290",
    "end": "2174260"
  },
  {
    "text": "we can get some weird results. So, let me give\nyou a sort of very simple possible\nimplementation of dequeue.",
    "start": "2174260",
    "end": "2180789"
  },
  {
    "text": "Suppose that what\ndequeue does is it reads, so, given this queue here, let's\nsay the queue is managed by,",
    "start": "2180790",
    "end": "2190570"
  },
  {
    "text": "there's two variables that\nkeep track of the current state of this queue. There is a variable\ncalled first, which points to the\nhead of the queue,",
    "start": "2190570",
    "end": "2197180"
  },
  {
    "text": "and there's a variable\ncalled last, which -- first points to the first\nused element in this queue,",
    "start": "2197180",
    "end": "2202890"
  },
  {
    "text": "and last points to\nthe last used element. So, the elements that are in\nuse in the queue at any one time",
    "start": "2202890",
    "end": "2209780"
  },
  {
    "text": "are between first and last, OK? And, what's going to\nhappen is when we dequeue,",
    "start": "2209780",
    "end": "2214849"
  },
  {
    "text": "we're going to sort of\nmove first over one, right? So, when we dequeue something,\nwe'll free up this cell.",
    "start": "2214850",
    "end": "2223130"
  },
  {
    "text": "And when we enqueue,\nwe'll move last down one. And then, when last\nreaches the end,",
    "start": "2223130",
    "end": "2230229"
  },
  {
    "text": "we are going to wrap it around. So this is a fairly standard\nimplementation of a queue. It's called the circular buffer.",
    "start": "2230229",
    "end": "2236450"
  },
  {
    "text": "And if first is equal\nto last, then we know that the queue is full. So that's the condition\nthat we can check.",
    "start": "2236450",
    "end": "2243160"
  },
  {
    "text": "So we are not going to\ngo into too many details about how this thing is\nactually implemented. But let's look at a very\nsimple example of how dequeue",
    "start": "2243160",
    "end": "2251549"
  },
  {
    "text": "might work. So remember we have these\ntwo shared variables first and last that are\nshared between these,",
    "start": "2251550",
    "end": "2257810"
  },
  {
    "text": "say, all these threads that\nare accessing this thing. And what dequeue might do is to\nsay it's going to read a block,",
    "start": "2257810",
    "end": "2264430"
  },
  {
    "text": "read a page from this\nqueue, so read the next HTML page to output, and\nit's going to read that",
    "start": "2264430",
    "end": "2271119"
  },
  {
    "text": "into a local\nvariable called page. Let's call this\nqueue buf, B-U-F,",
    "start": "2271120",
    "end": "2276550"
  },
  {
    "text": "I mean we'll use a array\nnotation for accessing it. So it's going to read\nbuf sub first, OK,",
    "start": "2276550",
    "end": "2284680"
  },
  {
    "text": "and then it's going\nto increment first. ",
    "start": "2284680",
    "end": "2289730"
  },
  {
    "text": "First gets first plus one, and\nthen it's going to return page. ",
    "start": "2289730",
    "end": "2297789"
  },
  {
    "text": "OK, that seems like a\nstraightforward implementation of dequeue.",
    "start": "2297790",
    "end": "2303010"
  },
  {
    "text": "And so we have one\nthread that's doing this. Now, suppose we have\nanother thread that's doing exactly the same\nthing at the same time.",
    "start": "2303010",
    "end": "2310520"
  },
  {
    "text": "So it runs exactly\nthe same code. And remember that these\ntwo threads are sharing",
    "start": "2310520",
    "end": "2315830"
  },
  {
    "text": "the variables buf and first. ",
    "start": "2315830",
    "end": "2326650"
  },
  {
    "text": "OK, so if you think about this\nif you think about these two things running two\nthreads at the same time,",
    "start": "2326650",
    "end": "2332040"
  },
  {
    "text": "there is sort of an interesting\nproblem that can arise. So one thing that might happen\nwhen we are running these two",
    "start": "2332040",
    "end": "2339814"
  },
  {
    "text": "things at the same time is\nthat the thread scheduler might first start running thread one. And it might run the first\ninstruction of thread one.",
    "start": "2339814",
    "end": "2346446"
  },
  {
    "text": "And then it might run\nthe second instruction. And then it might run\nthis return thing. And then it might\ncome over here,",
    "start": "2346446",
    "end": "2352450"
  },
  {
    "text": "and it might start running T2. So, it might, then, stop\nrunning T1 and start running T2,",
    "start": "2352450",
    "end": "2360720"
  },
  {
    "text": "and execute its\nthree instructions. So if the thread scheduler does\nthis, there's nothing wrong.",
    "start": "2360720",
    "end": "2367247"
  },
  {
    "text": "It's not a problem, right? The thread scheduler,\neach of these things read its value from the\nqueue and incremented it.",
    "start": "2367247",
    "end": "2374050"
  },
  {
    "text": "T1 read one thing\nfrom the queue, and then T2 read the next\nthing from the queue. So clearly some of the time\nthis is going to work fine.",
    "start": "2374050",
    "end": "2380770"
  },
  {
    "text": "So let's make a list\nof possible outcomes. Sometimes we'll be OK. The first possible\noutcome was OK.",
    "start": "2380770",
    "end": "2388150"
  },
  {
    "text": "But let's look at a\ndifferent situation. Suppose what happens is that\nthe first thing the thread",
    "start": "2388150",
    "end": "2397530"
  },
  {
    "text": "scheduler does is schedule T1. And T1 executes this\nfirst instruction, and then just after that\nthe thread scheduler",
    "start": "2397530",
    "end": "2404060"
  },
  {
    "text": "decides to pre-empt T1, and\nallow T2 to start running. So it in particular\nallows T2 to execute",
    "start": "2404060",
    "end": "2411880"
  },
  {
    "text": "this dequeue\ninstruction to its end, and then it comes over\nhere and it runs T1.",
    "start": "2411880",
    "end": "2417690"
  },
  {
    "text": "OK, so what's the problem now? ",
    "start": "2417690",
    "end": "2429309"
  },
  {
    "text": "Yeah?  Right, OK, so they've both\nread in the same page variable.",
    "start": "2429310",
    "end": "2438680"
  },
  {
    "text": "So now both of these threads\nhave dequeued the same page. So the value first, for\nT1, it was pointing here.",
    "start": "2438680",
    "end": "2448109"
  },
  {
    "text": "And then we switched. And it was still\npointing here, right? And now, so both of these\nguys have read the same page.",
    "start": "2448110",
    "end": "2453410"
  },
  {
    "text": "And now they are both at some\npoint going to increment first. So you're going to\nincrement it once.",
    "start": "2453410",
    "end": "2458420"
  },
  {
    "text": "Then you're going to\nincrement it again. So this second element here\nin the queue has been skipped. OK, so this is a problem.",
    "start": "2458420",
    "end": "2463460"
  },
  {
    "text": "We don't want this to happen. Because the system is not\noutputting all the pages that it was supposed to output.",
    "start": "2463460",
    "end": "2470010"
  },
  {
    "text": "So what can we do to fix this? ",
    "start": "2470010",
    "end": "2480956"
  },
  {
    "text": "So the way that we fixed this\nis by introducing something we call isolation primitives. ",
    "start": "2480956",
    "end": "2492049"
  },
  {
    "text": "And the basic idea\nis that we want to introduce an operation\nthat will make it so that any time that\nthe page variable gets",
    "start": "2492050",
    "end": "2500850"
  },
  {
    "text": "read out of the queue, that\nwe also at the same time",
    "start": "2500850",
    "end": "2506870"
  },
  {
    "text": "increment first without any\nother sort of threads' accesses to this queue being\ninterleaved with our accesses",
    "start": "2506870",
    "end": "2512700"
  },
  {
    "text": "to this queue, or our\ndequeues from the queue. So in sort of technical\nterms, what we say is",
    "start": "2512700",
    "end": "2518079"
  },
  {
    "text": "we want these two things,\nthe reading of page and the incrementing of\nfirst to be so-called atomic.",
    "start": "2518080",
    "end": "2526160"
  },
  {
    "text": "OK, and the way that we're going\nto make these things atomic is by isolating them\nfrom each other, that",
    "start": "2526160",
    "end": "2534520"
  },
  {
    "text": "by isolating these two\nthreads from each other when they are executing the\nenqueue and dequeue things. So, these two terms we're\ngoing to come back to",
    "start": "2534520",
    "end": "2541180"
  },
  {
    "text": "in a few months in the class\ntowards the end of the class. But all you need\nto understand here",
    "start": "2541180",
    "end": "2546800"
  },
  {
    "text": "is that there is\nthis race condition, and we want some\nway to prevent it. And the way that\nwe're going to prevent it is by using these isolation\nroutines also sometimes",
    "start": "2546800",
    "end": "2555790"
  },
  {
    "text": "called locks. So in this case, the\nisolation schemes are going to be called locks.",
    "start": "2555790",
    "end": "2561680"
  },
  {
    "text": "So the idea is that a lock\nis simply a variable, which can be in one of two states.",
    "start": "2561680",
    "end": "2568100"
  },
  {
    "text": "It can either be set or unset. And we have two operations\nthat we can apply on a lock.",
    "start": "2568100",
    "end": "2575990"
  },
  {
    "text": "We can acquire it,\nand we can release it. ",
    "start": "2575990",
    "end": "2582030"
  },
  {
    "text": "OK, and acquire and release\nhave the following behavior. What acquire says is check\nthe state of the lock,",
    "start": "2582030",
    "end": "2590609"
  },
  {
    "text": "and if the lock is unset,\nthen change the state to set.",
    "start": "2590610",
    "end": "2596500"
  },
  {
    "text": "But if the lock\nis set, then wait until the lock becomes unset.",
    "start": "2596500",
    "end": "2603990"
  },
  {
    "text": "What a release says is\nit simply says change the state of the lock from unset\nto set, or from set to unset,",
    "start": "2603990",
    "end": "2609910"
  },
  {
    "text": "excuse me. So let's see how we can use\nthese two routines in our code.",
    "start": "2609910",
    "end": "2615559"
  },
  {
    "text": "So let's go back to our\nexample of enqueue and dequeue. Let's introduce a lock variable. We'll call it TL\nfor thread lock.",
    "start": "2615560",
    "end": "2622580"
  },
  {
    "text": "And, what we're going to do\nis simply around these two operations to access the\nqueue, to modify this page",
    "start": "2622580",
    "end": "2633660"
  },
  {
    "text": "and first, to read the\npage and modify first, we're going to put in an\nacquire and a release. ",
    "start": "2633660",
    "end": "2661620"
  },
  {
    "text": "OK so we have ACQ\non this thread lock, and we have release\non this thread lock.",
    "start": "2661620",
    "end": "2667220"
  },
  {
    "text": "OK, so let's look,\nso this seems fine. It looks like we've done this. But it's sort of positing\nthe existence of this acquire",
    "start": "2667220",
    "end": "2676300"
  },
  {
    "text": "procedure that just sort\nof does the right thing. If you think about\nthis for a minute, it seems like we can have\nthe same race condition",
    "start": "2676300",
    "end": "2682620"
  },
  {
    "text": "problem in the acquire module\nas well, right, or the acquire function as well. With two guys both try\nand acquire the lock",
    "start": "2682620",
    "end": "2688470"
  },
  {
    "text": "at the same time? How are we going to\navoid this problem? And there's a\ncouple of ways that are sort of well\nunderstood for avoiding",
    "start": "2688470",
    "end": "2694770"
  },
  {
    "text": "this problem in\npractice, and they're talked about in the book. I'm just going to introduce\nthe simplest of them",
    "start": "2694770",
    "end": "2700242"
  },
  {
    "text": "now, which is that we're going\nto add a special instruction to the microprocessor\nthat allows us to do this,",
    "start": "2700242",
    "end": "2706910"
  },
  {
    "text": "acquire efficiently. It turns out that most\nmodern microprocessors have an equivalent instruction.",
    "start": "2706910",
    "end": "2712336"
  },
  {
    "text": "So we're going to\ncall this instruction RSL for read-set- lock.",
    "start": "2712336",
    "end": "2718690"
  },
  {
    "text": "OK, so the idea with\nRSL is as follows.",
    "start": "2718690",
    "end": "2724415"
  },
  {
    "text": " We can basically,\nthe implementation",
    "start": "2724415",
    "end": "2732520"
  },
  {
    "text": "of the acquire module is\ngoing to be like this.",
    "start": "2732520",
    "end": "2739165"
  },
  {
    "text": "What it's going to\ndo, remember we want to wait until we want to loop. We don't have the lock. If we don't have\nthe lock, we want",
    "start": "2739165",
    "end": "2745480"
  },
  {
    "text": "to loop until\nwe've had the lock. So the implementation\nrequire may look as follows. We'll have a local\nvariable called held.",
    "start": "2745480",
    "end": "2750770"
  },
  {
    "text": "We'll initially set it\nto false in a while loop while we don't hold the lock.",
    "start": "2750770",
    "end": "2757710"
  },
  {
    "text": "We're going to use\nthis RSL instruction. ",
    "start": "2757710",
    "end": "2767190"
  },
  {
    "text": "So, what this says is\nheld equals RSL of TL, OK? So, what the RSL\ninstruction does",
    "start": "2767190",
    "end": "2772270"
  },
  {
    "text": "is it looks at the state of the\nlock, and if the lock is unset, then it sets it.",
    "start": "2772270",
    "end": "2778350"
  },
  {
    "text": "And if the lock is set, then\nit sets it and it returns true. And if the lock is set,\nthen it returns false.",
    "start": "2778350",
    "end": "2785520"
  },
  {
    "text": "So it has the property\nthat it can both read and set the lock within a\nsingle instruction, right?",
    "start": "2785520",
    "end": "2791940"
  },
  {
    "text": "And we're going to use this read\nand set lock sort of primitive,",
    "start": "2791940",
    "end": "2796980"
  },
  {
    "text": "this basic thing,\nas a way to build up this sort of more complicated\nacquire function, which",
    "start": "2796980",
    "end": "2802900"
  },
  {
    "text": "we can then use to\nbuild up these locks. OK, so anytime you're designing\na multithreaded system",
    "start": "2802900",
    "end": "2811490"
  },
  {
    "text": "in this way, or a system\nwith lots of concurrency, you should be worrying\nabout whether you have race conditions.",
    "start": "2811490",
    "end": "2817440"
  },
  {
    "text": "And if you have\nrace conditions, you need to think about how to\nuse locks in order to prevent those race conditions.",
    "start": "2817440",
    "end": "2823750"
  },
  {
    "text": "Alright, so there are a\ncouple of other topics related",
    "start": "2823750",
    "end": "2829350"
  },
  {
    "text": "to performance that\nappear in the text. ",
    "start": "2829350",
    "end": "2834630"
  },
  {
    "text": "And one of those\ntopics is caching. And I just want to spend one\nvery brief minute on caching.",
    "start": "2834630",
    "end": "2839810"
  },
  {
    "text": "So you guys have already\nseen catching presumably in the context of 6.004\nwith processor caches.",
    "start": "2839810",
    "end": "2846700"
  },
  {
    "text": "And what we would\nwant to do, so you might want to sit\ndown and think through as an example of how\nyou would use a cache",
    "start": "2846700",
    "end": "2853180"
  },
  {
    "text": "to improve the performance\nof our Web server. So one thing that\nyou might do in order",
    "start": "2853180",
    "end": "2858950"
  },
  {
    "text": "to improve the performnence\nof the Web server",
    "start": "2858950",
    "end": "2864960"
  },
  {
    "text": "is to put a cace\nin the disk thread that you use instead of going to\ndisk in order to sort of reduce",
    "start": "2864960",
    "end": "2873230"
  },
  {
    "text": "the latency of a disk access. And I'll at the beginning\nof class next time take you through a\nvery simple example",
    "start": "2873230",
    "end": "2879300"
  },
  {
    "text": "of how we can actually use\nthe disk thread in order to do that. But you guys should think about\nthis a little bit on your own.",
    "start": "2879300",
    "end": "2884910"
  },
  {
    "text": "So barring that\nlittle digression that we'll have next\ntime, this takes us to the end of our discussion\nof sort of modularity,",
    "start": "2884910",
    "end": "2892770"
  },
  {
    "text": "abstraction, and performance. And what we're going\nto start talking about next time is\nnetworking, and how networks",
    "start": "2892770",
    "end": "2898470"
  },
  {
    "text": "But I want you guys\nto make sure you keep in mind all these\ntopics that we've talked about because\nthese are going to be the sort of\nfundamental tools",
    "start": "2898470",
    "end": "2904319"
  },
  {
    "text": "that we are going to\nuse throughout the class in the design of\ncomputer systems. So because we've\nfinished this module, it doesn't mean that\nit's sort of OK to stop",
    "start": "2904320",
    "end": "2910930"
  },
  {
    "text": "thinking about this stuff. You need to keep all of this\nin mind at the same time. So we'll see you\nall on Wednesday.",
    "start": "2910930",
    "end": "2916480"
  },
  {
    "start": "2916480",
    "end": "2924529"
  }
]