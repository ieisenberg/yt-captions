[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "20554"
  },
  {
    "text": "SRINIVAS DEVADAS: All right. Good morning, everyone. Let's get started. A new module today--\nwe're going to spend a few",
    "start": "20554",
    "end": "29930"
  },
  {
    "text": "lectures on\nrandomized algorithms. And so not only will we look\nat slightly different ways",
    "start": "29930",
    "end": "39739"
  },
  {
    "text": "of solving old problems\nlike sorting, we'll also look at how we can analyze\nthis new kind of algorithm that",
    "start": "39740",
    "end": "48110"
  },
  {
    "text": "generates random numbers\nin order to actually make decisions as it's executing\nand that we'll end up obviously",
    "start": "48110",
    "end": "57010"
  },
  {
    "text": "with the analysis that\ngives us the expected run",
    "start": "57010",
    "end": "62230"
  },
  {
    "text": "time of the algorithm--\nfor example, whether the algorithm is going\nto produce a correct result",
    "start": "62230",
    "end": "68260"
  },
  {
    "text": "or not, with what probability\nwill this algorithm produce a correct result.",
    "start": "68260",
    "end": "73660"
  },
  {
    "text": "So I'll talk a\nlittle bit about why we're interested in\nrandomized algorithms",
    "start": "73660",
    "end": "78700"
  },
  {
    "text": "in a couple of minutes,\nbut let me define what a randomized algorithm,\nor a probabilistic algorithm,",
    "start": "78700",
    "end": "86539"
  },
  {
    "text": "is to start things off. ",
    "start": "86540",
    "end": "98000"
  },
  {
    "text": "And so randomized\nalgorithm is something that generates a random number.",
    "start": "98000",
    "end": "107040"
  },
  {
    "start": "107040",
    "end": "112250"
  },
  {
    "text": "Now, this would be a coinage\nflip, but more often than not,",
    "start": "112250",
    "end": "117290"
  },
  {
    "text": "you're generating a real number\nthat comes from a sudden range.",
    "start": "117290",
    "end": "124510"
  },
  {
    "text": "Sometimes you're\ngenerating a vector. You'll see a couple\nof different examples",
    "start": "124510",
    "end": "129570"
  },
  {
    "text": "here in today's\nlecture and in section.",
    "start": "129570",
    "end": "135620"
  },
  {
    "text": "And it's going to make\ndecisions based on this value,",
    "start": "135620",
    "end": "143730"
  },
  {
    "text": "based on r's actual value. ",
    "start": "143730",
    "end": "150920"
  },
  {
    "text": "Now, you can imagine that an\nalgorithm would be recursive, and at every level\nof recursion, it's going to generate a random r.",
    "start": "150920",
    "end": "157700"
  },
  {
    "text": "So when you're executing at a\nparticular level of recursion, you may be doing different\nthings based on r.",
    "start": "157700",
    "end": "165580"
  },
  {
    "text": "And not only that, if you\nre-run the algorithm again on the same input, the\nexecution will be different",
    "start": "165580",
    "end": "172990"
  },
  {
    "text": "because you're resuming\na true random number generator as opposed\nto a pseudo random one.",
    "start": "172990",
    "end": "179670"
  },
  {
    "text": "And the r's that\nyou're going to get at different levels of recursion\nor through the execution of the algorithm are going to\nbe different from the first time",
    "start": "179670",
    "end": "187610"
  },
  {
    "text": "to the second time. So on the same input on\ndifferent executions,",
    "start": "187610",
    "end": "202820"
  },
  {
    "text": "two things might happen.  The algorithm may run for a\ndifferent number of steps.",
    "start": "202820",
    "end": "210530"
  },
  {
    "start": "210530",
    "end": "215540"
  },
  {
    "text": "So you might get lucky\non the first execution, and the algorithm finishes,\nlet's say at 100 time units.",
    "start": "215540",
    "end": "221860"
  },
  {
    "text": "The second time around,\nit takes a long time. It takes 700 time units.",
    "start": "221860",
    "end": "226940"
  },
  {
    "text": "Our goal here is\nto try and analyze what this probabilistic\nruntime would",
    "start": "226940",
    "end": "233370"
  },
  {
    "text": "be to ask for an expectation,\nto be able to compute",
    "start": "233370",
    "end": "239319"
  },
  {
    "text": "an expectation for the\nruntime, or-- if you're talking about a\ndifferent scenario",
    "start": "239320",
    "end": "247129"
  },
  {
    "text": "where different executions--\nI could actually produce different outputs. ",
    "start": "247130",
    "end": "258838"
  },
  {
    "text": "And in this case, it's\npossible that one or more of these outputs are incorrect.",
    "start": "258839",
    "end": "265320"
  },
  {
    "text": "You actually get\nthe wrong answer. And obviously, that's\ngoing to happen",
    "start": "265320",
    "end": "270979"
  },
  {
    "text": "with a certain probability. You're going to have\nto decide or analyze",
    "start": "270980",
    "end": "277940"
  },
  {
    "text": "what that probability is. And generally speaking,\nwe won't be happy",
    "start": "277940",
    "end": "284520"
  },
  {
    "text": "with a high probability of\nerror, as you can imagine. And we'd like to set\nup an algorithm such",
    "start": "284520",
    "end": "291289"
  },
  {
    "text": "that you can reduce that\nprobability of incorrect output",
    "start": "291290",
    "end": "296450"
  },
  {
    "text": "to be something\nreally, really small. And it might take\nyou longer to get",
    "start": "296450",
    "end": "303630"
  },
  {
    "text": "to that low level\nof incorrect output",
    "start": "303630",
    "end": "310620"
  },
  {
    "text": "in one case for a certain set\nof inputs versus another case. So that's this set up here\nin terms of randomized.",
    "start": "310620",
    "end": "320780"
  },
  {
    "text": "You're going to have\nalgorithms that-- you can think of them as probably correct.",
    "start": "320780",
    "end": "327670"
  },
  {
    "text": "So these are\nalgorithms-- you want to think of them as\nprobably correct, and they do have a name.",
    "start": "327670",
    "end": "333750"
  },
  {
    "text": "They're called Monte\nCarlo algorithms. And then you have algorithms\nthat are probably fast.",
    "start": "333750",
    "end": "340425"
  },
  {
    "text": " So-- indicates a\nprobably correct--",
    "start": "340425",
    "end": "350080"
  },
  {
    "text": "you could have a constant\nprobability that they're going to give you the\ncorrect answer, 99%.",
    "start": "350080",
    "end": "357150"
  },
  {
    "text": "And you could obviously\ntry and parametrize that. In the case of\nprobably fast, you",
    "start": "357150",
    "end": "362440"
  },
  {
    "text": "say things like, it runs an\nexpected polynomial time. And really what that\nmeans is that you may have",
    "start": "362440",
    "end": "370120"
  },
  {
    "text": "to run it for more information. So rather than taking 100\niterations or 100 steps",
    "start": "370120",
    "end": "376830"
  },
  {
    "text": "to sort something, it\nmight take you 110. But in the case\nof probably fast,",
    "start": "376830",
    "end": "382230"
  },
  {
    "text": "you do get the sorted\nresult at the end. And when the algorithm\nhas finished execution,",
    "start": "382230",
    "end": "387330"
  },
  {
    "text": "you do get that sorted\nresult at the end. So it's correct and probably\nfast or probably correct",
    "start": "387330",
    "end": "395090"
  },
  {
    "text": "and deterministically fast. OK. And this is Las Vegas.",
    "start": "395090",
    "end": "401060"
  },
  {
    "text": "So you have Monte Carlo\nversus Las Vegas here. So yesterday, it\noccurred to me--",
    "start": "401060",
    "end": "407746"
  },
  {
    "text": "and I've taught this\nclass a bunch of times-- but it occurred to\nme for the first time last night that there\nshould be algorithms",
    "start": "407746",
    "end": "412880"
  },
  {
    "text": "that are probably correct\nand probably fast, which means that\nthey're incorrect and slow some of the time.",
    "start": "412880",
    "end": "419560"
  },
  {
    "text": "Right? So what do you think those\nalgorithms are called? Sorry. What?",
    "start": "419560",
    "end": "425222"
  },
  {
    "text": "AUDIENCE: T? SRINIVAS DEVADAS: The T? Oh. Oh! That deserves a Frisbee. Oh my goodness!",
    "start": "425222",
    "end": "430700"
  },
  {
    "text": "[LAUGHS] All right. There you go. There you go. All right. Now, they're not called\nthe T. So we should write",
    "start": "430700",
    "end": "438030"
  },
  {
    "text": "that down so everyone knows. Probably correct\nand probably fast,",
    "start": "438030",
    "end": "448310"
  },
  {
    "text": "which is I guess they\ndon't get you anywhere. I don't know what that\nmeans-- incorrect and so",
    "start": "448310",
    "end": "454160"
  },
  {
    "text": "in the case of the T. So the MB/TA. ",
    "start": "454160",
    "end": "462539"
  },
  {
    "text": "Any guesses? I mean, think about what we\nhave for Monte Carlo, Las Vegas.",
    "start": "462540",
    "end": "468820"
  },
  {
    "text": "Extrapolate. These are the kinds\nof questions you're going to get on your quiz. ",
    "start": "468820",
    "end": "478680"
  },
  {
    "text": "I guess you guys\ndon't gamble you. Go ahead. AUDIENCE: Atlantic City. SRINIVAS DEVADAS: Atlantic City. That deserves a Frisbee.",
    "start": "478680",
    "end": "483930"
  },
  {
    "text": "Yeah. Absolutely right. That It turns out\nAtlantic City isn't",
    "start": "483930",
    "end": "490110"
  },
  {
    "text": "a name that's really\ncaught on, but it was in terms of being\nused in this context.",
    "start": "490110",
    "end": "500540"
  },
  {
    "text": "Most of the time, if you do\nhave a probably correct probably fast algorithm,\nyou can convert it into a Monte Carlo algorithm\nor a Las Vegas algorithm.",
    "start": "500540",
    "end": "508400"
  },
  {
    "text": "There are some prime\ntesting algorithms to test whether a particular\nnumber is a prime or not",
    "start": "508400",
    "end": "515340"
  },
  {
    "text": "that run in probabilistic\npolynomial time, and they may incorrectly tell\nyou that the number is a prime.",
    "start": "515340",
    "end": "522330"
  },
  {
    "text": "So that's an example of an\nAtlantic City algorithm. We won't actually\ndo Atlantic City.",
    "start": "522330",
    "end": "529170"
  },
  {
    "text": "What we'll do is\nwe'll take a look at a couple of different\nalgorithms, and both of these",
    "start": "529170",
    "end": "534870"
  },
  {
    "text": "will motivate why randomized\nalgorithms are interesting. The Monte Carlo example is\nchecking matrix multiply.",
    "start": "534870",
    "end": "544440"
  },
  {
    "text": "So you've gotten a couple\nof square matrices. Both of them are\nn by n matrices,",
    "start": "544440",
    "end": "550580"
  },
  {
    "text": "and you multiply them out--\nA times B, and you produce C. And so you got the C matrix.",
    "start": "550580",
    "end": "556720"
  },
  {
    "text": "And rather than re-multiplying\nand checking the result, you'd like to do\nsomething better.",
    "start": "556720",
    "end": "563610"
  },
  {
    "text": "You'd like to verify\nwith some probability that you can parametrize\nthat the output",
    "start": "563610",
    "end": "570000"
  },
  {
    "text": "matrix is in fact the product\nof the two input matrices. And so that's a\nrandomized algorithm",
    "start": "570000",
    "end": "575500"
  },
  {
    "text": "that's a Monte Carlo because\nyou're not guaranteeing that that output matrix\nis in fact the product",
    "start": "575500",
    "end": "582620"
  },
  {
    "text": "of the first two matrices\nor the operand matrices, but you're getting a good\nsense of how likely that is.",
    "start": "582620",
    "end": "591230"
  },
  {
    "text": "And you can kind of squish\nthat probability of error down to however low you want\nit to be except you have to run",
    "start": "591230",
    "end": "600300"
  },
  {
    "text": "the algorithm for longer. So that's an example\nof Monte Carlo. Now, quicksort.",
    "start": "600300",
    "end": "605830"
  },
  {
    "text": "It doesn't make sense to\nsay-- I guess you could-- but it doesn't\nmake too much sense to say that you have\nan almost sorted array.",
    "start": "605830",
    "end": "614089"
  },
  {
    "text": "What does that mean exactly? You have to categorize that. So quicksort is an\nexample where you're",
    "start": "614090",
    "end": "619459"
  },
  {
    "text": "guaranteed to get a sorted\narray at the end of it. So it's correct. You will get a sorted ray.",
    "start": "619460",
    "end": "625231"
  },
  {
    "text": "That's what you wanted--\ndescending order, ascending order. But it might not run\nin order n log n time.",
    "start": "625231",
    "end": "634630"
  },
  {
    "text": "That's expected time. Order n log n is expected time. And so that's what probably\nfast would correspond to.",
    "start": "634630",
    "end": "642070"
  },
  {
    "text": "All right? So that's the set up. You can kind of see why these\nare interesting because you",
    "start": "642070",
    "end": "648370"
  },
  {
    "text": "could imagine that in\npractical scenarios, you might want to\ndo some checking",
    "start": "648370",
    "end": "653779"
  },
  {
    "text": "in a probabilistic way. And you want to do that without\nhaving to redo all the work.",
    "start": "653780",
    "end": "663540"
  },
  {
    "text": "Obviously you don't want your\nchecker for matrix multiply to be as slow as\nmultiplying two matrices.",
    "start": "663540",
    "end": "669149"
  },
  {
    "text": "Otherwise it makes no sense. So let's dive into\nmatrix product",
    "start": "669150",
    "end": "675610"
  },
  {
    "text": "and our first example of a\nprobably correct algorithm,",
    "start": "675610",
    "end": "682089"
  },
  {
    "text": "or Monte Carlo algorithm. So what I want to do\nhere is C equals A times B. And the simple\nalgorithm-- I guess,",
    "start": "682090",
    "end": "694640"
  },
  {
    "text": "those of us who\nwent to high school, myself included, did my four\nyears-- know of an n cube",
    "start": "694640",
    "end": "708160"
  },
  {
    "text": "algorithm-- or\nlearned it back then. It simply corresponds to\ntaking rows and columns,",
    "start": "708160",
    "end": "717639"
  },
  {
    "text": "and you get an entry. You have n square\nentries that you",
    "start": "717640",
    "end": "722670"
  },
  {
    "text": "need to compute corresponding\nto the output matrix C. And you're going to do order n\nmultiplications and additions,",
    "start": "722670",
    "end": "731790"
  },
  {
    "text": "but we're really going to\nconsider multiplications here. When I talk about\nn here, it's not",
    "start": "731790",
    "end": "737000"
  },
  {
    "text": "the total number of operations. It's the number of\nmultiplications. And the reason\nfor that is-- this",
    "start": "737000",
    "end": "742890"
  },
  {
    "text": "may have gone away a little bit,\nbut it's still probably true-- that multiplication,\nin computers, it",
    "start": "742890",
    "end": "749540"
  },
  {
    "text": "takes longer to multiply\ntwo numbers, integers are floating point numbers,\nthan adding numbers.",
    "start": "749540",
    "end": "755860"
  },
  {
    "text": "It used to be much\nmore dramatic, the differences\nbetween multiplying and add in computers.",
    "start": "755860",
    "end": "764300"
  },
  {
    "text": "But thanks to pipelining\nand lots of optimizations, multiplies are\nactually very fast.",
    "start": "764300",
    "end": "769940"
  },
  {
    "text": "But they are, obviously, a\nmore sophisticated operation than addition.",
    "start": "769940",
    "end": "775110"
  },
  {
    "text": "So we'll be counting multiplies. So when you've seen\nKaratsuba divide and conquer",
    "start": "775110",
    "end": "781450"
  },
  {
    "text": "for multiply, back end in 006. Remember that we were\ncounting multiplications,",
    "start": "781450",
    "end": "786680"
  },
  {
    "text": "and we were actually trading off\nmultiplications for additions. We were trying to shrink\nthat number associated",
    "start": "786680",
    "end": "792360"
  },
  {
    "text": "with the complexity\nof the algorithm when counting the\nnumber of multiplies. And we actually\ncounted the number",
    "start": "792360",
    "end": "798570"
  },
  {
    "text": "of additions that\nwere going up-- at least from a constant\nfactor standpoint,",
    "start": "798570",
    "end": "803840"
  },
  {
    "text": "not necessarily from an\nasymptotic complexity standpoint. And so that's simple algorithm.",
    "start": "803840",
    "end": "809940"
  },
  {
    "text": "You probably heard of Strassen. Some of you might have seen it. Essentially what\nhappens with Strassen",
    "start": "809940",
    "end": "815900"
  },
  {
    "text": "is you multiply two two\nby two matrices using",
    "start": "815900",
    "end": "825080"
  },
  {
    "text": "seven multiplications\nas opposed to eight. ",
    "start": "825080",
    "end": "832765"
  },
  {
    "text": "Now, if you do that-- and this\nis similar to the Karatsuba analysis-- you can\ndo this in n raised",
    "start": "832765",
    "end": "841050"
  },
  {
    "text": "to log 2 7 time,\nwhich is essentially n raised to 2.81 time.",
    "start": "841050",
    "end": "848650"
  },
  {
    "text": "And so rather than n cubed, you\ncan go down to n raised 2.81.",
    "start": "848650",
    "end": "853740"
  },
  {
    "text": "Now it turns out people\nhave obviously not stopped with this. You can go to n raised to 2.70\nby doing something of the order",
    "start": "853740",
    "end": "863910"
  },
  {
    "text": "of 143,000 multiplications\nfor 70 by 70 matrices.",
    "start": "863910",
    "end": "869660"
  },
  {
    "text": "So you can play around. Just like you had Toom-Cook. I don't know if you remember\nthat or it got covered-- but Karatsuba could get\ngeneralized into this thing",
    "start": "869660",
    "end": "876709"
  },
  {
    "text": "called Toom-Cook. And the same thing, Strassen--\nyou could go off and divide",
    "start": "876710",
    "end": "884950"
  },
  {
    "text": "and conquer whose base case is\nnot two by two, but 70 by 70,",
    "start": "884950",
    "end": "890890"
  },
  {
    "text": "and that improves things. But it turns out there's other\narithmetic series summation",
    "start": "890890",
    "end": "896560"
  },
  {
    "text": "ways. And so a famous algorithm\nthat's up until 2010",
    "start": "896560",
    "end": "903029"
  },
  {
    "text": "was the best complexity\nalgorithm known. It's Coppersmith-Winograd,\nwhich is 2.376.",
    "start": "903030",
    "end": "912660"
  },
  {
    "text": "And then at some point, we\nhad a faculty candidate here who either shrunk this\nfrom 2.376 to 2.373.",
    "start": "912660",
    "end": "926060"
  },
  {
    "text": "And it turns out that there were\ntwo different researchers who came up with a 2.373, but\nthis particular candidate",
    "start": "926060",
    "end": "934639"
  },
  {
    "text": "in the sixth decimal place won. So she had an eight. Person had a nine or something.",
    "start": "934640",
    "end": "940550"
  },
  {
    "text": "But anyway, all of\nthese are impractical. OK. You don't want to use them. The constant factors\nassociated with these things",
    "start": "940550",
    "end": "948389"
  },
  {
    "text": "are much larger than\nwhat you have here. The constant factors here,\nI guess it's one, right?",
    "start": "948390",
    "end": "957200"
  },
  {
    "text": "Makes sense that it\nwould be one, forgetting the additions of course.",
    "start": "957200",
    "end": "962760"
  },
  {
    "text": "So if you have large\nconstant factors, then you need a billion by\nbillion matrix in order to win.",
    "start": "962760",
    "end": "968520"
  },
  {
    "text": "And if you have billion by\nbillion matrices that you want to multiply, do something else.",
    "start": "968520",
    "end": "975010"
  },
  {
    "text": "OK. You don't want to go there.  Even in the day of the internet,\nit's not going to work.",
    "start": "975010",
    "end": "983759"
  },
  {
    "text": "So what we'd like to do\nnow is do something better. So we will try-- given that\ntheoretical computer science",
    "start": "983760",
    "end": "993420"
  },
  {
    "text": "class, it makes sense to say\nthat our verification algorithm",
    "start": "993420",
    "end": "999360"
  },
  {
    "text": "should be better than n raised\nto 2.376 or 2.3-whatever.",
    "start": "999360",
    "end": "1005329"
  },
  {
    "text": "Right? Otherwise, it doesn't feel good. So what we'd like to\ndo-- and we can do this--",
    "start": "1005330",
    "end": "1012670"
  },
  {
    "text": "is try and get an order n\nsquare algorithm-- that's this.",
    "start": "1012670",
    "end": "1025910"
  },
  {
    "text": "So it's probably correct\nMonte Carlo algorithm where if you have\nA times B equals C,",
    "start": "1025910",
    "end": "1034699"
  },
  {
    "text": "then the probability of\nthe output equals yes is 1.",
    "start": "1034700",
    "end": "1042929"
  },
  {
    "text": "So in fact, if you got it\nright, then the verifier is going to not give\nyou a false negative.",
    "start": "1042930",
    "end": "1051590"
  },
  {
    "text": "It's not going to say--\nno, you got it wrong-- when you got it right. But it could give you up a false\npositive with some probability",
    "start": "1051590",
    "end": "1062860"
  },
  {
    "text": "where you have the probability\nof output equals yes,",
    "start": "1062860",
    "end": "1072450"
  },
  {
    "text": "and that's a false positive. But you can bound that\nto be less than half. OK.",
    "start": "1072450",
    "end": "1078050"
  },
  {
    "text": "So it's going to say, yes. So obviously, if the verifier\nkept saying yes all the time,",
    "start": "1078050",
    "end": "1084632"
  },
  {
    "text": "you wouldn't have this. It wouldn't be very interesting. I would be constant time, but\nit wouldn't be very interesting.",
    "start": "1084632",
    "end": "1092000"
  },
  {
    "text": "What is interesting here is\nthat when they're not equal, you're going to get an incorrect\nresult with some operand",
    "start": "1092000",
    "end": "1100460"
  },
  {
    "text": "on the probability. So you say, about one half\nseems kind of high-- 50%",
    "start": "1100460",
    "end": "1107540"
  },
  {
    "text": "flipping a coin. The good news is that\nthese algorithms,",
    "start": "1107540",
    "end": "1114120"
  },
  {
    "text": "you can run them over and over. You can run this\nchecker over and over. And as long as executions\nare independent,",
    "start": "1114120",
    "end": "1121600"
  },
  {
    "text": "and you can certainly\nensure that they're independent by ensuring\nthat the randomness from one",
    "start": "1121600",
    "end": "1127790"
  },
  {
    "text": "execution to another-- the\nflipping of the coins-- are independent. OK. And so that's\nrelatively easy to do,",
    "start": "1127790",
    "end": "1134170"
  },
  {
    "text": "in certainly all of the\nscenarios we'll be looking at. In 046, it's\nrelatively easy to do. You can now drive\nthis probability down",
    "start": "1134170",
    "end": "1141299"
  },
  {
    "text": "to one quarter\nwith two executions because you'll just\ncheck different things.",
    "start": "1141300",
    "end": "1147250"
  },
  {
    "text": "And then one eighth with\nthree and so on and so forth. So that's what's cool about it. And now, if you can\nlook at the runtime,",
    "start": "1147250",
    "end": "1154020"
  },
  {
    "text": "you say, well, runtime\nstill order n square. That's the beauty of\nthis because I'm just putting an extra constant\nfactor here where",
    "start": "1154020",
    "end": "1161060"
  },
  {
    "text": "I have k n square,\nwhere k is a constant. And effectively, I have\nthis nice relationship",
    "start": "1161060",
    "end": "1168360"
  },
  {
    "text": "in terms of the\nprobability of error going down to 1 divided\nby 2 raised to k.",
    "start": "1168360",
    "end": "1177480"
  },
  {
    "text": "And what I have here\nis a k n square. So that's what's cool about it.",
    "start": "1177480",
    "end": "1183310"
  },
  {
    "text": "And obviously, k n square\nis 2 order n square in a polynomial time, and but\nthe probably correct aspect",
    "start": "1183310",
    "end": "1189809"
  },
  {
    "text": "of it gets better and better. OK. Any questions so far? ",
    "start": "1189810",
    "end": "1198380"
  },
  {
    "text": "All right. Good.  So what we're going to do\nis this algorithm actually",
    "start": "1198380",
    "end": "1204910"
  },
  {
    "text": "works for arbitrary matrices--\nthe structure at least.",
    "start": "1204910",
    "end": "1211890"
  },
  {
    "text": " We're going to assume that the\nmatrix entries are Boolean.",
    "start": "1211890",
    "end": "1218750"
  },
  {
    "text": "They're going to work in\nthe finite field mod 2. And it's just is\nan easier proof.",
    "start": "1218750",
    "end": "1225290"
  },
  {
    "text": "It's easier to see. So the complexities\nare all the same. You're still\nmultiplying numbers.",
    "start": "1225290",
    "end": "1230850"
  },
  {
    "text": "They happen to be small. And multiplication\ncost you one operation. And you need to do n cubed\nmultiplies to actually get",
    "start": "1230850",
    "end": "1236840"
  },
  {
    "text": "the C matrix, and you have to\nverify it order n square time.",
    "start": "1236840",
    "end": "1242760"
  },
  {
    "text": "And so the number of\nmultiplies, again, that you want to use in\nyour verification algorithm",
    "start": "1242760",
    "end": "1247940"
  },
  {
    "text": "has to be order n square. We're ignoring the additions. ",
    "start": "1247940",
    "end": "1254110"
  },
  {
    "text": "So that's what we'd like out\nof our matrix product checker,",
    "start": "1254110",
    "end": "1260230"
  },
  {
    "text": "and the algorithm\nwe're going to look at is called Freivald's algorithm,\ncute little algorithm, that",
    "start": "1260230",
    "end": "1270470"
  },
  {
    "text": "does the following. So the algorithm itself\nis very straightforward, in couple of lines, a\nminute or so to describe,",
    "start": "1270470",
    "end": "1277800"
  },
  {
    "text": "and the interesting aspect of\nit is the analysis-- the fact",
    "start": "1277800",
    "end": "1283180"
  },
  {
    "text": "that you can show this. That's the cool part. If you couldn't\nshow that, there's",
    "start": "1283180",
    "end": "1288890"
  },
  {
    "text": "nothing cool about\nthis algorithm. So we're going to choose\na random binary vector.",
    "start": "1288890",
    "end": "1298990"
  },
  {
    "text": "So there you go. Here's your randomness. And this binary vector,\nevery time you run it,",
    "start": "1298990",
    "end": "1305750"
  },
  {
    "text": "as the k increases here,\nthe random binary vector is different from\none to another.",
    "start": "1305750",
    "end": "1311380"
  },
  {
    "text": "That's important. You can't run the\nsame thing again and then expect a different\nresult. That's called insanity.",
    "start": "1311380",
    "end": "1318690"
  },
  {
    "text": "But you are going\nto assume that given",
    "start": "1318690",
    "end": "1326730"
  },
  {
    "text": "that we are working\nin the binary space and this is a binary\nvector, you're",
    "start": "1326730",
    "end": "1338000"
  },
  {
    "text": "going to assume that r i equals\n1 is half independently for i",
    "start": "1338000",
    "end": "1343990"
  },
  {
    "text": "equals 1 through n. And the algorithm\nessentially is this--",
    "start": "1343990",
    "end": "1351299"
  },
  {
    "text": "we're going to do a bunch\nof matrix vector multiplies. ",
    "start": "1351300",
    "end": "1357660"
  },
  {
    "text": "An n by n matrix multiplied\nby an n by n matrix",
    "start": "1357660",
    "end": "1363430"
  },
  {
    "text": "gives you an n by n matrix,\nand that's your n cubed. So these are all--\nI think I said this,",
    "start": "1363430",
    "end": "1369320"
  },
  {
    "text": "but I should've\nwritten this down-- these are all square\nmatrices that are n by n.",
    "start": "1369320",
    "end": "1375730"
  },
  {
    "text": "And that's where\nyou get your n cube. A matrix vector\nwould be something",
    "start": "1375730",
    "end": "1381899"
  },
  {
    "text": "where you have-- typically\nwe'd have a column vector here. You're going to get\nsomething like that,",
    "start": "1381900",
    "end": "1388160"
  },
  {
    "text": "and you have n square\nmultiplications here. ",
    "start": "1388160",
    "end": "1393810"
  },
  {
    "text": "You're going to\ngrab one of these and then multiply it by\nthat and get an entry here.",
    "start": "1393810",
    "end": "1399950"
  },
  {
    "text": "And that obviously\nis n multiplications, but you only have n elements\nto produce here in this vector.",
    "start": "1399950",
    "end": "1407280"
  },
  {
    "text": "So you only got n square. That make sense? And so what we're going to do\nis, we're going to take this r,",
    "start": "1407280",
    "end": "1415510"
  },
  {
    "text": "and we're going to\ncompute A times B r. And so the brackets are\nimportant because it",
    "start": "1415510",
    "end": "1422153"
  },
  {
    "text": "says that you're going\nto compute what's inside the brackets first. Otherwise, it would be\na problem because you'd",
    "start": "1422154",
    "end": "1428820"
  },
  {
    "text": "be multiplying A times B. And\nobviously, that's order n cube. Right? You don't want that.",
    "start": "1428820",
    "end": "1434669"
  },
  {
    "text": "So A times Br equals Cr. OK. So r, remember, is\na column vector.",
    "start": "1434670",
    "end": "1442560"
  },
  {
    "text": "And C is an n by\nn matrix as our A and B. We're going\nto output yes.",
    "start": "1442560",
    "end": "1449635"
  },
  {
    "start": "1449635",
    "end": "1456670"
  },
  {
    "text": "Else-- if these\ntwo are not equal, you're going to output no.",
    "start": "1456670",
    "end": "1465040"
  },
  {
    "text": "OK? And so that's it. That's one run of the\nalgorithm, generator random r",
    "start": "1465040",
    "end": "1473110"
  },
  {
    "text": "and do the multiplication\nas you see here. So let's be clear\nabout complexity,",
    "start": "1473110",
    "end": "1482390"
  },
  {
    "text": "and let's make sure we\nunderstand the simpler",
    "start": "1482390",
    "end": "1488040"
  },
  {
    "text": "aspects of the\nalgorithm before we get into the analysis\nassociated with bounding",
    "start": "1488040",
    "end": "1493070"
  },
  {
    "text": "the false positive probability. The hard part is\ngoing to be bounding",
    "start": "1493070",
    "end": "1498800"
  },
  {
    "text": "the false positive probability.  But the easy part is\nfirst, the complexity.",
    "start": "1498800",
    "end": "1508070"
  },
  {
    "text": "So how many matrix vector\nproducts am I doing here?",
    "start": "1508070",
    "end": "1515850"
  },
  {
    "text": "How many matrix\nvector products am I doing here in this check on\none iteration of algorithm?",
    "start": "1515850",
    "end": "1523010"
  },
  {
    "text": "Yeah. AUDIENCE: Three. SRINIVAS DEVADAS: Three. All right. All right. You need to stand up.",
    "start": "1523010",
    "end": "1529210"
  },
  {
    "text": "This is fun. This is the hardest throw\nI've had to make in 6046.",
    "start": "1529210",
    "end": "1535070"
  },
  {
    "text": "I got to put this down. Warm up a little bit. It's kind of cold.",
    "start": "1535070",
    "end": "1542010"
  },
  {
    "text": "Whoa. Terrible! All right. The person who gets up\nand gets that owns it,",
    "start": "1542010",
    "end": "1547540"
  },
  {
    "text": "and we're going\nto do this again. All right. Let's see how long this takes. AUDIENCE: Is this\npart of my trial?  SRINIVAS DEVADAS: Yes.",
    "start": "1547540",
    "end": "1553540"
  },
  {
    "text": "Well, the first one failed. False whatever, right? ",
    "start": "1553540",
    "end": "1559475"
  },
  {
    "text": "[LAUGHTER] I got a few more. [LAUGHS]  All right. Let me see.",
    "start": "1559475",
    "end": "1565159"
  },
  {
    "text": "I think I need to go here. This is good. And I need to be-- all right.",
    "start": "1565160",
    "end": "1572450"
  },
  {
    "text": "Number three. Thank you. Thank you. [CLAPPING] ",
    "start": "1572450",
    "end": "1578380"
  },
  {
    "text": "So it was three. Three. Perfect.",
    "start": "1578380",
    "end": "1583670"
  },
  {
    "text": "Three matrix vector products\nbecause I got to do this. That's the matrix\nvector product. Remember I'm getting a column\nvector out of this, which",
    "start": "1583671",
    "end": "1589980"
  },
  {
    "text": "is important, and then\nI'm going to multiply this matrix with a column\nvector, matrix vector",
    "start": "1589980",
    "end": "1595800"
  },
  {
    "text": "product number two. And then there's a matrix\nvector product over here. So then at that\npoint-- do you remember",
    "start": "1595800",
    "end": "1601970"
  },
  {
    "text": "I have a vector and a vector. And checking the\nequivalence of two vectors",
    "start": "1601970",
    "end": "1607310"
  },
  {
    "text": "is simply checking the\nequivalence of each element in the vector 1 by one. So first one, same\nas the first one.",
    "start": "1607310",
    "end": "1613630"
  },
  {
    "text": "Second one, same\nas the second one. Et cetera. And so this is order\nn square, but three",
    "start": "1613630",
    "end": "1622080"
  },
  {
    "text": "is something that is worth\nthinking about simply because every once\nin a while, we're interested in constant factors.",
    "start": "1622080",
    "end": "1627370"
  },
  {
    "text": "And the other thing that's\ninteresting about this-- make sure I write this--\nlet me write this over",
    "start": "1627370",
    "end": "1634809"
  },
  {
    "text": "here-- that you are going\nto-- if A B equals C,",
    "start": "1634810",
    "end": "1648090"
  },
  {
    "text": "then there's no issue\nassociated with error here.",
    "start": "1648090",
    "end": "1654080"
  },
  {
    "text": "So there's no notion\nof a false negative because if AB equals C,\nthen you know, thanks",
    "start": "1654080",
    "end": "1662300"
  },
  {
    "text": "to the associativity of\nmatrix multiplication--",
    "start": "1662300",
    "end": "1669190"
  },
  {
    "text": "be it whether they're n\nby n matrices or columns--",
    "start": "1669190",
    "end": "1677500"
  },
  {
    "text": "you have this relationship here. And I hope you can\nread it at the back. Essentially what I have\nhere is if AB equals C.",
    "start": "1677500",
    "end": "1685030"
  },
  {
    "text": "So if in fact, the matrix\nmultiply happened correctly, I'm in a situation where it is\nclear that A Br equals this,",
    "start": "1685030",
    "end": "1695440"
  },
  {
    "text": "thanks to this associativity\nof matrix multiply. And that of course, is\nexactly the same as Cr.",
    "start": "1695440",
    "end": "1702240"
  },
  {
    "text": "So that should convince\nyou, thanks to associativity of matrix multiply that you\ndon't have any false negatives",
    "start": "1702240",
    "end": "1709870"
  },
  {
    "text": "in this algorithm. Make sense? So we're all good. All we have to do, given what\nwe have with respect to Frievald",
    "start": "1709870",
    "end": "1719656"
  },
  {
    "text": "is to do this part\nhere, which is going to take a little bit of doing. And the challenge always\nwith simple algorithm",
    "start": "1719656",
    "end": "1726590"
  },
  {
    "text": "is you don't quite\nknow why they work. And then of course, you have\nsophisticated algorithms,",
    "start": "1726590",
    "end": "1731965"
  },
  {
    "text": "and you don't quite\nknow why they work. ",
    "start": "1731965",
    "end": "1740580"
  },
  {
    "text": "So this will take a few minutes. It's not super complicated,\nand there's a little insight,",
    "start": "1740580",
    "end": "1745770"
  },
  {
    "text": "as always, with\nthese things that are not immediately obvious. But we'll have to look\nat the number of r's.",
    "start": "1745770",
    "end": "1755750"
  },
  {
    "text": "So you have an r vector that\nyou've generated randomly, and it may be a bad vector.",
    "start": "1755750",
    "end": "1761170"
  },
  {
    "text": "It may be a vector that doesn't\nshow you that the product",
    "start": "1761170",
    "end": "1768070"
  },
  {
    "text": "matrix has an incorrect entry. Remember there's n square\nentries in this matrix.",
    "start": "1768070",
    "end": "1773760"
  },
  {
    "text": "Exactly one of them may be\nwrong, and you need to find it. Right? So there may be a lot of\nentries which are all correct,",
    "start": "1773760",
    "end": "1781030"
  },
  {
    "text": "but you've got to find that\none entry that's incorrect. And so you could miss it. A given r vector might\nmiss it, and of course,",
    "start": "1781030",
    "end": "1789000"
  },
  {
    "text": "if you keep generating\nthe r's, you'd like to find it and declare that\nthe matrices weren't multiplied",
    "start": "1789000",
    "end": "1796200"
  },
  {
    "text": "correctly and that probability\nis what we have to compute. So we want to get this\nresult where we are analyzing",
    "start": "1796200",
    "end": "1805370"
  },
  {
    "text": "the correctness in the case. You've already analyzed\nthe correctness",
    "start": "1805370",
    "end": "1810400"
  },
  {
    "text": "in the case where AB\nequals C, but now we",
    "start": "1810400",
    "end": "1816509"
  },
  {
    "text": "have to analyze the\ncorrectness in the case where AB is not\nequal to C. Right? ",
    "start": "1816509",
    "end": "1821890"
  },
  {
    "text": "And so the claim is that\nif AB is not equal to C,",
    "start": "1821890",
    "end": "1831690"
  },
  {
    "text": "then the probability\nof ABr not equal to Cr",
    "start": "1831690",
    "end": "1839610"
  },
  {
    "text": "is greater than\nor equal to half. So this is greater\nthan or equal to. Over there, I'm just talking\nabout the false negative",
    "start": "1839610",
    "end": "1845860"
  },
  {
    "text": "probability where I'm actually\ngetting an incorrect yes when you have the matrices\nbeing multiplied wrongly,",
    "start": "1845860",
    "end": "1854890"
  },
  {
    "text": "incorrectly. And so that's why I get--\nthis is what I want. I want there to be a greater\nthan one half probability for r",
    "start": "1854890",
    "end": "1865340"
  },
  {
    "text": "to have discovered that, for\nr to have discovered that.",
    "start": "1865340",
    "end": "1871809"
  },
  {
    "text": "OK? I'll stop for\nquestions in a second,",
    "start": "1871810",
    "end": "1877220"
  },
  {
    "text": "but let me do a little bit more. I'm going to compute\nthe difference matrix,",
    "start": "1877220",
    "end": "1883059"
  },
  {
    "text": "and I'm not computing this\nbecause obviously this would take a while to compute. It's just for the\npurpose of analysis.",
    "start": "1883059",
    "end": "1888610"
  },
  {
    "text": "I'm going to look at the\ndifference matrix D equals AB minus C because\nyou want D to be 0.",
    "start": "1888610",
    "end": "1894570"
  },
  {
    "text": "And that we're going to\ndo some analysis that says-- we are going\nto try and find these non-zero entries\nin D because, clearly,",
    "start": "1894570",
    "end": "1901370"
  },
  {
    "text": "the non-zero entries\nin D tell you if there's non-zero entry in\nD, you got a problem here.",
    "start": "1901370",
    "end": "1907650"
  },
  {
    "text": "The matrices weren't\nmultiplied properly. So that's why we have D here. Don't think of it as we're\nactually computing that.",
    "start": "1907650",
    "end": "1914140"
  },
  {
    "text": " So what we'd like\nis to, as I said,",
    "start": "1914140",
    "end": "1925480"
  },
  {
    "text": "discover these entries\nwhere our hypothesis now is that D is not equal\nto 0 because that's",
    "start": "1925480",
    "end": "1930620"
  },
  {
    "text": "the case we're considering. We know that D is not equal to 0\nif the matrices were multiplied",
    "start": "1930620",
    "end": "1936070"
  },
  {
    "text": "incorrectly. And when I say D\nis not equal to 0, it means that there are n square\nentries in D, and one of them",
    "start": "1936070",
    "end": "1943240"
  },
  {
    "text": "is not 0. They all have to\nbe identically 0. That's all it means. D not equal to 0 means one\nentry at least is not 0.",
    "start": "1943240",
    "end": "1951289"
  },
  {
    "text": " So now what we need to do is\nwe need to show that there are",
    "start": "1951290",
    "end": "1963320"
  },
  {
    "text": "many r-- it's a binary\nvector of length n,",
    "start": "1963320",
    "end": "1970710"
  },
  {
    "text": "and you can obviously\nthink about two ways to n possibilities with respect to r.",
    "start": "1970710",
    "end": "1976059"
  },
  {
    "text": "And what we really\nwant to show is that there's a large\nfraction-- more than half of the r's are going to actually\ndiscover that the matrices were",
    "start": "1976060",
    "end": "1988410"
  },
  {
    "text": "multiplied incorrectly. OK. So we want to show that\nthere are many r's such",
    "start": "1988410",
    "end": "1995390"
  },
  {
    "text": "that Dr is not equal to 0. ",
    "start": "1995390",
    "end": "2002230"
  },
  {
    "text": "And because if Dr\nis not equal to 0, then you're obviously\ngoing to discover that ABr is not equal to Cr.",
    "start": "2002230",
    "end": "2010350"
  },
  {
    "text": "So if ABr is not\nequal to Cr, that's identical to saying the\nDr is not equal to 0.",
    "start": "2010350",
    "end": "2015440"
  },
  {
    "text": "That make sense? So specifically, if\nyou look at the claim",
    "start": "2015440",
    "end": "2024830"
  },
  {
    "text": "and writing it in\nterms of Dr, you want to say that the\nprobability of Dr not equal to 0",
    "start": "2024830",
    "end": "2033740"
  },
  {
    "text": "is greater than or equal to\nhalf for a randomly chosen r. ",
    "start": "2033740",
    "end": "2050440"
  },
  {
    "text": "And so that's it. That's the setup\nthat we have to show. We have to do a counting\nargument corresponding",
    "start": "2050440",
    "end": "2056899"
  },
  {
    "text": "to these r vectors that are\nbeing generated randomly. So let's do that. ",
    "start": "2056900",
    "end": "2074669"
  },
  {
    "text": "So the general argument\nwe're going to make here is simply that we're going\nto-- roughly speaking--",
    "start": "2074670",
    "end": "2081530"
  },
  {
    "text": "if you're going to look at\na bad r-- what's a bad r? And bad r is something\nthat doesn't discover",
    "start": "2081530",
    "end": "2090020"
  },
  {
    "text": "the incorrect multiplication. That's what a bad r is. So you're D is not equal\nto 0, but Dr equals 0.",
    "start": "2090020",
    "end": "2102160"
  },
  {
    "text": "OK. That's a bad r, right? It's quite possible that\nthat would be the case.",
    "start": "2102160",
    "end": "2108370"
  },
  {
    "text": "And so you want to\ntry and figure out",
    "start": "2108370",
    "end": "2113410"
  },
  {
    "text": "how many of these\nbad r are there because those are\nthe ones that are causing the false negatives.",
    "start": "2113410",
    "end": "2122550"
  },
  {
    "text": "Right? So that counting argument is the\ncrux of the proof of the claim.",
    "start": "2122550",
    "end": "2130920"
  },
  {
    "text": "So let's look at that. And what we're going to do is,\nwe're going to pick a bad r, and we're going\nto say I there are",
    "start": "2130920",
    "end": "2137130"
  },
  {
    "text": "these good r's that are\nassociated with this bad r. And for every bad\nr, there's a good r.",
    "start": "2137130",
    "end": "2144499"
  },
  {
    "text": "And a good r is something\nthat actually discovers the incorrect multiply. And given that for every\nbad r there's a good r,",
    "start": "2144499",
    "end": "2152630"
  },
  {
    "text": "half of the arts are good r. That's it. So I'll write it down.",
    "start": "2152630",
    "end": "2157890"
  },
  {
    "text": "That's the essence\nof the argument. And I'm go a little more slowly\nso hopefully you'll get that.",
    "start": "2157890",
    "end": "2164480"
  },
  {
    "text": "So let's look at the case where\nDr equals 0 case because that's the interesting case.",
    "start": "2164480",
    "end": "2170290"
  },
  {
    "text": "That's the case\nwhere the r is bad even though we had an\nincorrect multiply, and you get this-- I should have\nsaid you get a false positive.",
    "start": "2170290",
    "end": "2182499"
  },
  {
    "text": "So I'm sorry. I think just before,\nI said false negative, but I meant false positive.",
    "start": "2182499",
    "end": "2187990"
  },
  {
    "text": "So you have a false\npositive in this case, and D equals AB minus\nC not equal to 0",
    "start": "2187990",
    "end": "2198099"
  },
  {
    "text": "implies there exists\nan i and j such that Dij is not equal to 0.",
    "start": "2198100",
    "end": "2205780"
  },
  {
    "text": "OK? And there's just one\nentry at least-- if you say the matrix is\nnot equal to 0,",
    "start": "2205780",
    "end": "2211940"
  },
  {
    "text": "there's got to be an entry\nthat's not equal to 0. So let's take a\nlook at that entry, and let's just draw it out.",
    "start": "2211940",
    "end": "2218670"
  },
  {
    "text": "That's my D matrix. And there's going\nto be an i and a j.",
    "start": "2218670",
    "end": "2227220"
  },
  {
    "text": "So that's my ith row\nand my jth column. And there you go. I have an entry here which is\nDij, and I'm just picking that.",
    "start": "2227220",
    "end": "2238609"
  },
  {
    "text": "I don't care what i\nand j are, but there's got to be an entry\nthat's not equal to 0. Now I'm going to\ncreate a vector, v. So",
    "start": "2238610",
    "end": "2249320"
  },
  {
    "text": "this vector is not r. It's a vector v that is\nchosen deterministically given",
    "start": "2249320",
    "end": "2256100"
  },
  {
    "text": "the Dij where it's got 0's\neverywhere except it at vj.",
    "start": "2256100",
    "end": "2265430"
  },
  {
    "text": "So if this the jth\nentry column-wise, everywhere else you got 0.",
    "start": "2265430",
    "end": "2272500"
  },
  {
    "text": " And you just got\nthe one associated",
    "start": "2272500",
    "end": "2278050"
  },
  {
    "text": "with the-- going\ndownward-- the jth entry.",
    "start": "2278050",
    "end": "2284270"
  },
  {
    "text": "OK? So it's a one one-hot\nvector, if you will. It's got one, one. So now, if you multiply\nthese two things out,",
    "start": "2284270",
    "end": "2291567"
  },
  {
    "text": "you know that you're\ngoing to get something, and we're going to\ncan call this Dv.",
    "start": "2291567",
    "end": "2297520"
  },
  {
    "text": "So you take D and\nyou multiply it by v-- matrix\nmultiplied by a vector.",
    "start": "2297520",
    "end": "2304160"
  },
  {
    "text": "You're guaranteed, given\nthat all of these are 0, when I do my this\ntimes that plus this",
    "start": "2304160",
    "end": "2310019"
  },
  {
    "text": "times this plus this\ntimes this, all of these are going to produce 0. This times 1 is going to produce\nsomething that's non-zero,",
    "start": "2310020",
    "end": "2317410"
  },
  {
    "text": "and then all of the other\nones are going to produce 0. So I'm just adding a bunch of\n0's to this non-zero multiplied",
    "start": "2317410",
    "end": "2323540"
  },
  {
    "text": "by one. So I'm going to get\nsomething that's non-zero. Right? All make sense?",
    "start": "2323540",
    "end": "2330790"
  },
  {
    "text": "So I'm going to\nsee something here, which is the jth entry\nthat's not equal 0.",
    "start": "2330790",
    "end": "2337590"
  },
  {
    "text": "And so that implies that\nDv is not equal to 0. And in particular, what\nI'm saying is Dv of j--",
    "start": "2337590",
    "end": "2346450"
  },
  {
    "text": "so if I just look at that\nentry that is identically Dij, which is not equal to 0.",
    "start": "2346450",
    "end": "2354100"
  },
  {
    "text": "Because I'm multiplying it by\n1 and I'm adding a bunch of 0's to it. That's it. OK.",
    "start": "2354100",
    "end": "2359700"
  },
  {
    "text": "Yeah. A question. AUDIENCE: Is it Dv of j or of i? SRINIVAS DEVADAS: So\nI picked the j here.",
    "start": "2359700",
    "end": "2365930"
  },
  {
    "text": "So I think I'm\ngoing j, j, right? That make sense?",
    "start": "2365930",
    "end": "2371560"
  },
  {
    "text": " If j was 7 and this\nis 7 down, then it",
    "start": "2371560",
    "end": "2377440"
  },
  {
    "text": "would be the seventh\n[INAUDIBLE] because this is going to turn into that.",
    "start": "2377440",
    "end": "2383991"
  },
  {
    "text": "OK?  Now, either way, if I\npicked it in the middle,",
    "start": "2383991",
    "end": "2390610"
  },
  {
    "text": "it doesn't really matter. The point is there's\ngoing to be one entry. So hang in there. There's going to be one\nentry that's nonzero",
    "start": "2390610",
    "end": "2396472"
  },
  {
    "text": "if you didn't quite get that.  So Dij is not 0. And this is one more\nobservation we're",
    "start": "2396472",
    "end": "2403240"
  },
  {
    "text": "going to make in order to do\nthe counting of these bad r's because this is a bad\nr that we're looking",
    "start": "2403240",
    "end": "2410099"
  },
  {
    "text": "at if you say that Dr equals 0. You've created a v that\nhas nothing to do with r,",
    "start": "2410100",
    "end": "2417790"
  },
  {
    "text": "but we're going\nto use the v to go from a bad r, which is our\nexample here, to a good one.",
    "start": "2417790",
    "end": "2425320"
  },
  {
    "text": "That's pretty much it. That's the last step here. So what we're going\nto do, is we're",
    "start": "2425320",
    "end": "2430570"
  },
  {
    "text": "going to take any r that can\nbe chosen by our algorithm",
    "start": "2430570",
    "end": "2445230"
  },
  {
    "text": "such that Dr equals\n0 because that's the case that we're looking at. And we're going to compute\nr prime, which is r plus v.",
    "start": "2445230",
    "end": "2459720"
  },
  {
    "text": "And just remember this\nis mod 2 arithmetic. You're only going\nto get 0's and 1's. So if you have 1 plus\n1, it gives you 0.",
    "start": "2459720",
    "end": "2466204"
  },
  {
    "text": "Obviously 0 plus 0 gives you 0. And the other cases are clear.",
    "start": "2466204",
    "end": "2471260"
  },
  {
    "text": "And this plus here,\nremember, is also-- the other thing that's important\nis this is not only mod 2.",
    "start": "2471260",
    "end": "2478099"
  },
  {
    "text": "These are all vectors. So r is a vector, and you can\nthink of it as a column vector.",
    "start": "2478100",
    "end": "2484510"
  },
  {
    "text": "That's how I drew it. You're adding up a\ncolumn vector with a v. That's the column vector\nthe way I drew that.",
    "start": "2484510",
    "end": "2491890"
  },
  {
    "text": "You could do it with rows if you\nlike, but it's just notation. And you're going to\ncompute an r prime here.",
    "start": "2491890",
    "end": "2500100"
  },
  {
    "text": "What can you say about Dr prime?",
    "start": "2500100",
    "end": "2507560"
  },
  {
    "text": "Someone? Yeah. Go ahead. AUDIENCE: It's not 0. SRINIVAS DEVADAS: It's not 0.",
    "start": "2507560",
    "end": "2513190"
  },
  {
    "text": "And I'll give you a\nFrisbee, but then you can explain-- can you\nstand up a little?",
    "start": "2513190",
    "end": "2518228"
  },
  {
    "text": "I don't want to take\nthis lady's head off. So can you explain why?",
    "start": "2518228",
    "end": "2524100"
  },
  {
    "text": "AUDIENCE: Because\nr prime is r plus v and Dr gives you Dr\nplus DB is not 0.",
    "start": "2524100",
    "end": "2529682"
  },
  {
    "text": "SRINIVAS DEVADAS:\nAbsolutely right. So essentially what\nwe have is this is simply Dr plus v. 0\nplus Dv, not equal to 0.",
    "start": "2529682",
    "end": "2546576"
  },
  {
    "text": "Do we like yellow\nor do we like white? Yellow's fine.",
    "start": "2546576",
    "end": "2553240"
  },
  {
    "text": "So that's pretty much it. So what's cool about\nthis- is this final step,",
    "start": "2553240",
    "end": "2558579"
  },
  {
    "text": "which I think you've gotten,\nbut I'm just going to say it out loud now, which is that r to r\nprime is 1 to 1 for any given r",
    "start": "2558579",
    "end": "2575560"
  },
  {
    "text": "such that Dr equals 0, given\nthe situation where capital D is",
    "start": "2575560",
    "end": "2580720"
  },
  {
    "text": "not equal to 0, and\nthere's some Dij-- and there could be many Dij's. I just need one.",
    "start": "2580720",
    "end": "2585960"
  },
  {
    "text": "I've constructed, based on\nthat Dij, this v vector which has the jth entry corresponding\nto the v vector being a 1",
    "start": "2585960",
    "end": "2593990"
  },
  {
    "text": "with all of the other\nentries being a 0. But I can now create an r to\nr that is 1 to 1 in the sense",
    "start": "2593990",
    "end": "2601339"
  },
  {
    "text": "that if r prime equals\nr plus v and that equals",
    "start": "2601340",
    "end": "2611290"
  },
  {
    "text": "r double prime plus v-- so if\nI ever have a situation where",
    "start": "2611290",
    "end": "2618330"
  },
  {
    "text": "in order to show\nthere's one-to-one, I want to say that it's not too\nmany-to-one or even two-to-one.",
    "start": "2618330",
    "end": "2624350"
  },
  {
    "text": "So if I have an r prime\nthat equals r plus v and you tell me that r prime\nalso equals r double prime plus",
    "start": "2624350",
    "end": "2632829"
  },
  {
    "text": "v, I can make the argument\nthat r and r double prime are exactly the same.",
    "start": "2632830",
    "end": "2639920"
  },
  {
    "text": "So then r equals r double prime.",
    "start": "2639920",
    "end": "2645490"
  },
  {
    "text": "So what am I saying there? I'm just saying that for any\ngiven r that has Dr equals 0,",
    "start": "2645490",
    "end": "2655770"
  },
  {
    "text": "I can twiddle the jth element of\nthat r and go from 0 to 1 or 1",
    "start": "2655770",
    "end": "2662220"
  },
  {
    "text": "to 0. If you tell me that there's a\nDij somewhere in that matrix",
    "start": "2662220",
    "end": "2667810"
  },
  {
    "text": "that is nonzero and I do that\nlittle twiddle-- remembers it's all 0's and 1's Boolean\nmatrices-- so if I do",
    "start": "2667810",
    "end": "2673710"
  },
  {
    "text": "one twiddle, it's one-to-one. If I do two twiddles and I go\n1 to 0, I'm back to 1 again.",
    "start": "2673710",
    "end": "2682730"
  },
  {
    "text": "And that's all this says. Because you have mod 2. That's all that says.",
    "start": "2682730",
    "end": "2687910"
  },
  {
    "text": "So one little\ntweak-- and I'm going to be able to take a bad r\nand turn it into a good r",
    "start": "2687910",
    "end": "2695000"
  },
  {
    "text": "because the good r, the\nr prime in this case, had Dr prime not equal to 0.",
    "start": "2695000",
    "end": "2703119"
  },
  {
    "text": "And that's it. That's my counting argument,\nand all that remains is to essentially close\nthis by sayiny-- just",
    "start": "2703120",
    "end": "2711970"
  },
  {
    "text": "to write this out to\nget to the final claim",
    "start": "2711970",
    "end": "2717230"
  },
  {
    "text": "and get the one half--\nthe one-to-one essentially gives you the one half. At least half of these things\nare going to be good r's.",
    "start": "2717230",
    "end": "2724630"
  },
  {
    "start": "2724630",
    "end": "2733109"
  },
  {
    "text": "If you had I Dr that's\nnot equal to 0-- and that's the case that\nyou have here-- then we're",
    "start": "2733110",
    "end": "2740180"
  },
  {
    "text": "going to discover\nan r prime such",
    "start": "2740180",
    "end": "2746050"
  },
  {
    "text": "that the Dr prime is not\nequal to 0 and r to r",
    "start": "2746050",
    "end": "2752010"
  },
  {
    "text": "prime is a one-to-one mapping. ",
    "start": "2752010",
    "end": "2760170"
  },
  {
    "text": "So the number of\nr prime for which",
    "start": "2760170",
    "end": "2769339"
  },
  {
    "text": "Dr prime is not equal\nto 0 is greater than or equal to the number of\nr for which Dr equals zero.",
    "start": "2769340",
    "end": "2784570"
  },
  {
    "text": "And so that implies that\nthe probability of Dr",
    "start": "2784570",
    "end": "2790430"
  },
  {
    "text": "not equal to zero-- so\nif you just choose an r, this is now a randomly chosen r.",
    "start": "2790430",
    "end": "2797560"
  },
  {
    "text": "Not that others weren't,\nbut I'm treating it a little bit differently here. This was a specific r for\nwhich Dr was equal to 0.",
    "start": "2797560",
    "end": "2806210"
  },
  {
    "text": "I made an argument\nthat you can always get this r prime one-to-one\nsuch that Dr prime is not",
    "start": "2806210",
    "end": "2811480"
  },
  {
    "text": "equal to 0. And now going back to what\nI had initially with respect to the claim here where the r\nhere was a randomly chosen r,",
    "start": "2811480",
    "end": "2820869"
  },
  {
    "text": "I'm saying, thanks to this\nlittle argument-- this line up top-- I'm going to be able\nto say this is greater than",
    "start": "2820870",
    "end": "2827400"
  },
  {
    "text": "or equal to one half. OK? Cool. Any questions? Yeah.",
    "start": "2827400",
    "end": "2832994"
  },
  {
    "text": "AUDIENCE: I think\nthe Dr squared times column equal column\non the board. SRINIVAS DEVADAS: Yeah.",
    "start": "2832994",
    "end": "2838728"
  },
  {
    "text": "AUDIENCE: On the last column,\nit should be i, not j. SRINIVAS DEVADAS:\nThis should be i? AUDIENCE: Yes. ",
    "start": "2838728",
    "end": "2846402"
  },
  {
    "text": "SRINIVAS DEVADAS:\nPeople agree with that? Majority vote. All right. I'm good.",
    "start": "2846402",
    "end": "2852589"
  },
  {
    "text": "Let's make that an i. AUDIENCE: The iteration\nof that as well, Dv sub j. SRINIVAS DEVADAS: Oh, yeah. Of course.",
    "start": "2852590",
    "end": "2858650"
  },
  {
    "text": "Yeah. Once you do that, you\nhave to have an i there. Good.",
    "start": "2858650",
    "end": "2864960"
  },
  {
    "text": "So you're looking at\na particular entry--",
    "start": "2864960",
    "end": "2870180"
  },
  {
    "text": "it makes a difference whether\nyou used a column or a row. If I'd done-- now that I\nremember-- if you turn this",
    "start": "2870180",
    "end": "2879369"
  },
  {
    "text": "into a row matrix and\nthis becomes a row matrix, you'll essentially get the Dvj.",
    "start": "2879370",
    "end": "2885470"
  },
  {
    "text": "So it depends on which way\nyou look at it, but thanks for pointing that out. ",
    "start": "2885470",
    "end": "2891000"
  },
  {
    "text": "The specifics of i and\nj weren't particularly important to the proof itself.",
    "start": "2891000",
    "end": "2899030"
  },
  {
    "text": "The key thing is you zoom in on\na particular entry that is not equal to 0, and then you\ntweak that entry corresponding",
    "start": "2899030",
    "end": "2909529"
  },
  {
    "text": "to the r. So once you tweak that--\nyou make that 0 or 1 or 1 to 0-- you can get this result.",
    "start": "2909530",
    "end": "2918829"
  },
  {
    "text": "I'm sorry. I'm pointing to the wrong spot. This result-- and\nthen get your claim.",
    "start": "2918830",
    "end": "2924970"
  },
  {
    "text": "OK? So summarize-- we have a bound. We run it over and over,\nand we get it to the point",
    "start": "2924970",
    "end": "2933700"
  },
  {
    "text": "where we can have a\n0.0001 probability that,",
    "start": "2933700",
    "end": "2939089"
  },
  {
    "text": "if the matrices were\nmultiplied incorrectly, that you wouldn't discover\nthat because you ran it",
    "start": "2939090",
    "end": "2947780"
  },
  {
    "text": "for enough hours\nindependently chosen that that probability\nbecomes as low as possible.",
    "start": "2947780",
    "end": "2953130"
  },
  {
    "text": "OK? So that was Monte Carlo.",
    "start": "2953130",
    "end": "2958240"
  },
  {
    "text": "Let's do a Las Vegas algorithm. And you guys are probably\nthinking, my goodness. Another sorting algorithm\nafter, I don't know,",
    "start": "2958240",
    "end": "2967000"
  },
  {
    "text": "17 different sorting algorithms.  This all sorting algorithms\nthat you've ever learned so far.",
    "start": "2967000",
    "end": "2974231"
  },
  {
    "text": "Right? So merge sort doesn't\nwork, and the reason it doesn't work in\npractice-- if you're really",
    "start": "2974231",
    "end": "2981230"
  },
  {
    "text": "into performance-- is because\nof the auxiliary space that",
    "start": "2981230",
    "end": "2988240"
  },
  {
    "text": "merge sort requires. So if you recall there's the\nnotion of in-place sorting.",
    "start": "2988240",
    "end": "2994800"
  },
  {
    "text": "So let's move onto\nthe next thing here, which is quicksort, which\nis a new sorting algorithm.",
    "start": "2994800",
    "end": "3003039"
  },
  {
    "text": "And I want to motivate it\nfor just a couple of minutes. ",
    "start": "3003039",
    "end": "3008990"
  },
  {
    "text": "And the primary\nmotivation really is practical performance,\nnot asymptotic complexity.",
    "start": "3008990",
    "end": "3016619"
  },
  {
    "text": "So I'll be upfront about that. It's all about\npractical performance",
    "start": "3016620",
    "end": "3022150"
  },
  {
    "text": "corresponding to quicksort. And quicksort is a divide\nand conquer randomized",
    "start": "3022150",
    "end": "3029360"
  },
  {
    "text": "algorithm invented in '62. Unlike merge sort, it's got\ntwo interesting properties.",
    "start": "3029360",
    "end": "3038980"
  },
  {
    "text": "The first is that it's in\nplace, like I just said. So no auxiliary space.",
    "start": "3038980",
    "end": "3044555"
  },
  {
    "text": "In Mozart, you can try\nand get around this.",
    "start": "3044555",
    "end": "3051569"
  },
  {
    "text": "I should say order\nn auxiliary space. You need a little\ntemporary variable",
    "start": "3051570",
    "end": "3058200"
  },
  {
    "text": "in order to do a swapping. But you don't have the\norder n auxiliary space.",
    "start": "3058200",
    "end": "3065170"
  },
  {
    "text": "So you don't have to\nconstantly allocate. And remember, n could be large. It could be in the\nbillions or trillions.",
    "start": "3065170",
    "end": "3070340"
  },
  {
    "text": "So, from that\nstandpoint, quicksort ends up winning simply because\nof relatively mundane things",
    "start": "3070340",
    "end": "3077130"
  },
  {
    "text": "like memory allocation\nin your computer.",
    "start": "3077130",
    "end": "3082450"
  },
  {
    "text": "And the other interesting thing\nabout quicksort in relation to merge sort is that all the\nwork is in the divide step.",
    "start": "3082450",
    "end": "3093010"
  },
  {
    "start": "3093010",
    "end": "3099180"
  },
  {
    "text": "So in merge sort, remember we\njust split, and we recurse. And what happens\nwhen you come back",
    "start": "3099180",
    "end": "3106050"
  },
  {
    "text": "is you have to do\nthe finger emerging algorithm by looking at\nthe two sorted arrays",
    "start": "3106050",
    "end": "3114800"
  },
  {
    "text": "and looking at what the new\nmerger is going to look like.",
    "start": "3114800",
    "end": "3119820"
  },
  {
    "text": "So the work is in the merge. But in quicksort, the work\nis going to be in the divide",
    "start": "3119820",
    "end": "3124990"
  },
  {
    "text": "because we're going to have to\ndo a bunch of work associated with figuring out how to keep\nthe partitions balanced--",
    "start": "3124990",
    "end": "3135070"
  },
  {
    "text": "a little bit like we had to do\nwhen we did median finding back",
    "start": "3135070",
    "end": "3140090"
  },
  {
    "text": "a couple of weeks ago. I'm going to talk about\nthree different variants of quicksort.",
    "start": "3140090",
    "end": "3146109"
  },
  {
    "text": "The. variant that we're going\nto spend the most time on is the Las Vegas\nquicksort where we'd",
    "start": "3146110",
    "end": "3152810"
  },
  {
    "text": "like to show that\nit's probably fast and make a statement about\nthe expected runtime.",
    "start": "3152810",
    "end": "3160589"
  },
  {
    "text": "But we'll get to that by\ntalking about a couple of other interesting\nvariants, and this'll",
    "start": "3160590",
    "end": "3167110"
  },
  {
    "text": "be elaborated on to some\nextent in section tomorrow.",
    "start": "3167110",
    "end": "3173310"
  },
  {
    "text": "So before we get to\nvariants of course, let's try and set up the\nstructure corresponding",
    "start": "3173310",
    "end": "3178840"
  },
  {
    "text": "to quicksort. And as always, we have\nan n element array A.",
    "start": "3178840",
    "end": "3189150"
  },
  {
    "text": "You have divide that corresponds\nto picking a pivot element, x",
    "start": "3189150",
    "end": "3202210"
  },
  {
    "text": "in A. And then we're\ngoing to partition",
    "start": "3202210",
    "end": "3210780"
  },
  {
    "text": "the array into sub-arrays. ",
    "start": "3210780",
    "end": "3219240"
  },
  {
    "text": "And what we have here--\nthis little picture should make things clearer.",
    "start": "3219240",
    "end": "3226080"
  },
  {
    "text": "And you kind of saw this\nin the median finding, but here we go again. Let's assume all the\narray elements are unique.",
    "start": "3226080",
    "end": "3233410"
  },
  {
    "text": "We have L, E, and\nG. L is less than.",
    "start": "3233410",
    "end": "3238839"
  },
  {
    "text": "G is greater than. And so your pivot element is\ngoing to break this array up into L and G, where you\ngot all the elements that",
    "start": "3238840",
    "end": "3246609"
  },
  {
    "text": "are less on the left and\nall the elements that are greater on the right. And you're going to\nrecurs on the L and G.",
    "start": "3246610",
    "end": "3255040"
  },
  {
    "text": "So recursively sort sub-arrays\nL and G. Combine is trivial--",
    "start": "3255040",
    "end": "3270950"
  },
  {
    "text": "or merge is trivial-- because\nyou've already broken things up thanks to the pivoting. And you just concatenate\nthose arrays.",
    "start": "3270950",
    "end": "3277650"
  },
  {
    "text": "And that's why you\ncan do this in place. There's no issues. You're really recursively\nsorting sub-arrays.",
    "start": "3277650",
    "end": "3284890"
  },
  {
    "text": "You are moving things\naround a little bit when you do the partition. Obviously, the initial array\nmay have all the elements.",
    "start": "3284890",
    "end": "3291460"
  },
  {
    "text": "You may pick the pivot\nsuch that the pivot is all the way on the\nright-hand side in the sense that it's a very large element.",
    "start": "3291460",
    "end": "3297760"
  },
  {
    "text": "That is not necessarily\na good thing. I will talk about that. But if you pick an interesting\npivot or a good pivot,",
    "start": "3297760",
    "end": "3305290"
  },
  {
    "text": "you're going to have to move\nthe elements in the array to the left of the pivot if\nthey're less than the pivot,",
    "start": "3305290",
    "end": "3311610"
  },
  {
    "text": "and you got to move the\nelements to the right if they're to the\nright of the pivot. Nontrivial piece\nof code, not super",
    "start": "3311610",
    "end": "3318470"
  },
  {
    "text": "complicated, but you can\nlook at the CLRS page 171",
    "start": "3318470",
    "end": "3324440"
  },
  {
    "text": "to look at in-place\npartitioning where you don't have to use\nanother order n space to move",
    "start": "3324440",
    "end": "3333660"
  },
  {
    "text": "these elements around such that\nthey look like that picture that I have up there, starting\nfrom some random starting",
    "start": "3333660",
    "end": "3340710"
  },
  {
    "text": "point. So you want to have the\npicture that you have here, and you need to go from-- the\nvery same array, it needs to--",
    "start": "3340710",
    "end": "3350800"
  },
  {
    "text": "and x is somewhere here, and you\ngot x plus 1 here and x minus 1",
    "start": "3350800",
    "end": "3355950"
  },
  {
    "text": "here, for example. And you need to move\nthose things around so they look like L, E,\nand G, and that's something",
    "start": "3355950",
    "end": "3364340"
  },
  {
    "text": "that you can do in place. And you can look at the\ncode for that in the CLRS. I won't cover that here.",
    "start": "3364340",
    "end": "3371076"
  },
  {
    "text": "So let's look at a bunch of\ndifferent variants responding to quicksort. And there's some\nreal simple ones.",
    "start": "3371076",
    "end": "3378030"
  },
  {
    "text": "Each of these, we can knock\noff with respect to complexity",
    "start": "3378030",
    "end": "3383880"
  },
  {
    "text": "and runtime fairly easily\nwith the one exception that we'll spend\nsome time on, which",
    "start": "3383880",
    "end": "3390079"
  },
  {
    "text": "is the Las Vegas quicksort. But we'll call these\ndifferent names.",
    "start": "3390080",
    "end": "3395950"
  },
  {
    "text": "Let's talk about\nthe basic quicksort, which is also a useful algorithm\nthat people use in practice.",
    "start": "3395950",
    "end": "3404220"
  },
  {
    "text": "And amazingly, this algorithm\nis simply something that says,",
    "start": "3404220",
    "end": "3410099"
  },
  {
    "text": "I'm just going to constantly\npivot on either the first entry or the last entry.",
    "start": "3410100",
    "end": "3415960"
  },
  {
    "text": "So I'm going to pick\nmy pivot to be A1. And when I pick\nmy pivot to be A1,",
    "start": "3415960",
    "end": "3421059"
  },
  {
    "text": "it's a value that I'm\ntalking about here. X is a value. It's not an index.",
    "start": "3421060",
    "end": "3426090"
  },
  {
    "text": "The A1 value-- maybe that's 75. Then I'm going to create\nmy L matrix corresponding",
    "start": "3426090",
    "end": "3432110"
  },
  {
    "text": "to this pivot where all\nthe entries are strictly less than 75, and G would\nbe strictly greater than 75.",
    "start": "3432110",
    "end": "3440450"
  },
  {
    "text": "And I could do that for A1. I could do that for An. So remember that the\npivot is a value. ",
    "start": "3440450",
    "end": "3448140"
  },
  {
    "text": "Now, if I look at\nthis, I'm going to do the partition, given\nx, just like you saw there.",
    "start": "3448140",
    "end": "3459180"
  },
  {
    "text": "And this is going to be\ndone in order n time. It makes sense that you're\ngoing to look at every element,",
    "start": "3459180",
    "end": "3464890"
  },
  {
    "text": "and you're going to move it\nto an appropriate location to the left of x, which is\nthe e array, or to the right.",
    "start": "3464890",
    "end": "3472019"
  },
  {
    "text": "And you'll do that. That takes order n time. And, as I mentioned,\nyou can look at this",
    "start": "3472020",
    "end": "3478250"
  },
  {
    "text": "to see how this\nis done in place.",
    "start": "3478250",
    "end": "3484280"
  },
  {
    "text": "So let's take a look at the\nanalysis of basic quicksort,",
    "start": "3484280",
    "end": "3490020"
  },
  {
    "text": "and what I'm interested in,\nof course, is the worst case analysis. And I asked this\nquestion, I think,",
    "start": "3490020",
    "end": "3496900"
  },
  {
    "text": "before when we were\ndoing median finding, but what is the\nworst case complexity",
    "start": "3496900",
    "end": "3504930"
  },
  {
    "text": "of the basic quicksort algorithm\nthat chooses the pivot as A1?",
    "start": "3504930",
    "end": "3510800"
  },
  {
    "text": "What is the complexity? [INTERPOSING VOICES] Order n square. It's order n square.",
    "start": "3510800",
    "end": "3516700"
  },
  {
    "text": "And the reason for\nthat is that you may have an array that is\nsorted or reverse sorted--",
    "start": "3516700",
    "end": "3526680"
  },
  {
    "text": "depending on whether\nyou're picking A1 or An. You can have a worst\ncase situation where",
    "start": "3526680",
    "end": "3533510"
  },
  {
    "text": "one side, L or G, has\nn minus 1 elements,",
    "start": "3533510",
    "end": "3542710"
  },
  {
    "text": "and the other has 0 elements. And so if you look at\nour recurrence associated",
    "start": "3542710",
    "end": "3550240"
  },
  {
    "text": "with this, you could have\nTn, which is T0, plus T n minus 1 plus theta n.",
    "start": "3550240",
    "end": "3558040"
  },
  {
    "text": "And why do I have\na theta n here? Well, remember that I still\nhave to do this divide step or this partition\nstep in order to compute",
    "start": "3558040",
    "end": "3566610"
  },
  {
    "text": "this up unbalanced array. So I do have to look at\neach of these elements and do the comparison.",
    "start": "3566610",
    "end": "3573190"
  },
  {
    "text": "And maybe I don't actually\nhave to move them, but I have to do the\ncomparison with the A1, which",
    "start": "3573190",
    "end": "3579140"
  },
  {
    "text": "is the x pivot.  And in some cases, if I'm doing\nthe wrong thing reverse sorted,",
    "start": "3579140",
    "end": "3586009"
  },
  {
    "text": "I also have to do the move. Either way, I have a theta\nn complexity associated with the divide step.",
    "start": "3586010",
    "end": "3593040"
  },
  {
    "text": "And so if you go off and you\nlook at what happens with this, well, you've got Tn\nequals Tn minus 1",
    "start": "3593040",
    "end": "3602849"
  },
  {
    "text": "plus theta n, which ends up\nwith theta n square complexity.",
    "start": "3602850",
    "end": "3609300"
  },
  {
    "text": "So a hand waved a\nlittle bit two weeks ago for a similar analysis,\nbut you can kind of",
    "start": "3609300",
    "end": "3615869"
  },
  {
    "text": "look at it a little\nmore precisely here by writing the\nactual recurrence out.",
    "start": "3615870",
    "end": "3621630"
  },
  {
    "text": "And you see that you get the\nrecurrence Tn equals Tn minus 1 plus theta n, which\nis an n square result,",
    "start": "3621630",
    "end": "3629520"
  },
  {
    "text": "or the solutions is n square. OK? So basic quicksort look bad.",
    "start": "3629520",
    "end": "3636100"
  },
  {
    "text": "It's got a worst case\ncomplexity of theta n square. It works well on random\ninputs and practice.",
    "start": "3636100",
    "end": "3641130"
  },
  {
    "text": "And it turns out that it's\na fashion of algorithm, partly because it's in\nplace and it's easy to code,",
    "start": "3641130",
    "end": "3648000"
  },
  {
    "text": "that what people do is\nthey take their inputs, and they shuffle them.",
    "start": "3648000",
    "end": "3655700"
  },
  {
    "text": "You might get a bad input, and\nit might take you a long time to run. But if you take an\ninput and you shuffle",
    "start": "3655700",
    "end": "3661460"
  },
  {
    "text": "it and you do that\nin theta n time, you just move things around\nand randomize the input.",
    "start": "3661460",
    "end": "3667000"
  },
  {
    "text": "Then effectively, you\nhave a random input, and this thing works\npretty well in practice.",
    "start": "3667000",
    "end": "3672240"
  },
  {
    "text": "Now, what is pretty well? Well, we're going to\ndo an analysis that is going to not be exactly\nthe analysis that you'd",
    "start": "3672240",
    "end": "3679990"
  },
  {
    "text": "have to do on basic\nquicksort on random inputs, but essentially, you can\nsay that basic quicksort",
    "start": "3679990",
    "end": "3687400"
  },
  {
    "text": "on random inputs is going to run\nin expected theta m log n time.",
    "start": "3687400",
    "end": "3693059"
  },
  {
    "text": "OK? It's something that you'll\nsee a little bit of how",
    "start": "3693060",
    "end": "3699670"
  },
  {
    "text": "to do that today and in section,\nperhaps for median finding in section tomorrow.",
    "start": "3699670",
    "end": "3705140"
  },
  {
    "text": "But that's all I wanted to\nsay about basic quicksort. It's a practical algorithm.",
    "start": "3705140",
    "end": "3711200"
  },
  {
    "text": "It does require a little bit of\nshuffling up at the beginning, and then you can simply\nuse the pivot A1.",
    "start": "3711200",
    "end": "3717610"
  },
  {
    "text": "And because you've\ndone the shuffle, generally you get\nbalance partitions. The L and G's look balanced,\nand you don't end up",
    "start": "3717610",
    "end": "3725109"
  },
  {
    "text": "with theta n square. If you have any sort of\nbalance associated with the two partitions L and G, you're\ngoing to get a nice divide",
    "start": "3725110",
    "end": "3732660"
  },
  {
    "text": "and conquer, which is going to\ngive you your theta n log n. OK? So that's basic quicksort.",
    "start": "3732660",
    "end": "3740050"
  },
  {
    "text": "There's another way to\ndo this, and so this is a question for you guys.",
    "start": "3740050",
    "end": "3745060"
  },
  {
    "text": "Suppose I wanted to use\nthe quicksort strategy and get a worst case theta n log\nn through an intelligent pivot",
    "start": "3745060",
    "end": "3755420"
  },
  {
    "text": "selection. So I want to do a pivot\nselection intelligently.",
    "start": "3755420",
    "end": "3761370"
  },
  {
    "start": "3761370",
    "end": "3767280"
  },
  {
    "text": "So how would I get under\nthe structure of quicksort that you see up there\non the left there?",
    "start": "3767280",
    "end": "3775680"
  },
  {
    "text": "How would I select a pivot such\nthat I get worse case theta",
    "start": "3775680",
    "end": "3780910"
  },
  {
    "text": "n log n complexity? ",
    "start": "3780910",
    "end": "3786574"
  },
  {
    "text": "Go ahead. AUDIENCE: Linear median finding. SRINIVAS DEVADAS:\nLinear medium finding. Perfect. That's exactly right.",
    "start": "3786574",
    "end": "3792120"
  },
  {
    "text": " There's a gentleman at the\nback who'd raised his hand,",
    "start": "3792120",
    "end": "3797375"
  },
  {
    "text": "and I decided I'd chicken out.  I think one time to the back of\nthe room is enough for a day.",
    "start": "3797375",
    "end": "3805669"
  },
  {
    "text": "I'll have a Frisbee left. Hopefully you can get one. So the intelligence\npivots selection algorithm",
    "start": "3805669",
    "end": "3813690"
  },
  {
    "text": "is the median finding\nalgorithm because that's going to guarantee\nme that I'm going",
    "start": "3813690",
    "end": "3818890"
  },
  {
    "text": "to get balanced partitions. If you tell me that\nA1-- and remember, we're talking\nmedians of values--",
    "start": "3818890",
    "end": "3825080"
  },
  {
    "text": "so don't get confused\nwith indices. When I say something\nis a median, I'm talking about the\nvalue, that given its value,",
    "start": "3825080",
    "end": "3832859"
  },
  {
    "text": "there are all these other n\nover 2 values that are less than it, roughly speaking\nand n over 2 values that",
    "start": "3832860",
    "end": "3839290"
  },
  {
    "text": "are greater than it. And so A1, I have no idea\nwhether it's large or small.",
    "start": "3839290",
    "end": "3846740"
  },
  {
    "text": "So I couldn't say much about it. But if I want to\nbe worst case and I want to guarantee that I\nhave balanced partitions,",
    "start": "3846740",
    "end": "3854150"
  },
  {
    "text": "I can choose the median. And if I choose the\nmedian every time, I'm going to get perfectly\nbalanced partitions.",
    "start": "3854150",
    "end": "3859797"
  },
  {
    "text": "They're going to half on the\nleft and half on the right.  And we do know a way of\ngetting balanced partitions.",
    "start": "3859797",
    "end": "3869180"
  },
  {
    "text": "We can guarantee that balanced\nL and G using median selection",
    "start": "3869180",
    "end": "3884470"
  },
  {
    "text": "that runs in theta n time. And we showed that a\ncouple of weeks ago. ",
    "start": "3884470",
    "end": "3891570"
  },
  {
    "text": "Now, that median selection\nalgorithm was nontrivial. OK? It had this weird thing\nwhere you broke things up",
    "start": "3891570",
    "end": "3898609"
  },
  {
    "text": "into five sub-arrays\nof size 5, and you",
    "start": "3898610",
    "end": "3903750"
  },
  {
    "text": "found a median of medians\net cetera, et cetera. But we argued that the\nwhole thing ran in theta n time, which is important.",
    "start": "3903750",
    "end": "3910859"
  },
  {
    "text": "And so now, if you look at\nwhat happens with quicksort and if I write the\nrecurrence for quicksort,",
    "start": "3910860",
    "end": "3917330"
  },
  {
    "text": "thanks to selecting a\nmedian, I effectively have balanced partitions. So I have 2T n over 2.",
    "start": "3917330",
    "end": "3923700"
  },
  {
    "text": "This is thanks to the\nmedian based pivoting.",
    "start": "3923700",
    "end": "3933859"
  },
  {
    "text": "That's important. Otherwise it won't work. And then, just to be very clear\nhere, I got two theta n terms.",
    "start": "3933860",
    "end": "3946460"
  },
  {
    "text": "OK? The first theta n term is the\nrecursive median selection.",
    "start": "3946460",
    "end": "3953485"
  },
  {
    "start": "3953485",
    "end": "3959440"
  },
  {
    "text": "And then the second\ntheta n term is of course the divide, or partition. ",
    "start": "3959440",
    "end": "3966860"
  },
  {
    "text": "But it's important to\nrealize that now I have a lot of work in the divide.",
    "start": "3966860",
    "end": "3972390"
  },
  {
    "text": "A lot of work. I have to do an\nintelligent selection using this recursive median\nfinding algorithm. And I also have to do the moves\ncomparing and then generate",
    "start": "3972390",
    "end": "3980759"
  },
  {
    "text": "and the G arrays. OK? So those are the two theta n's. They're obviously theta n,\nbut I wanted to make it clear",
    "start": "3980760",
    "end": "3986769"
  },
  {
    "text": "that there's two\nthings going on here. And we all know that that\nis theta n log n worst case.",
    "start": "3986770",
    "end": "3991820"
  },
  {
    "text": "All right? So there is a way of using the\nquicksort structure template",
    "start": "3991820",
    "end": "3997060"
  },
  {
    "text": "and getting a theta n log n\nworst case algorithm, which doesn't work in practice because\nit's just too complicated.",
    "start": "3997060",
    "end": "4005309"
  },
  {
    "text": "What's going on here is at\nevery level of recursion,",
    "start": "4005310",
    "end": "4010400"
  },
  {
    "text": "you're calling another recursive\nalgorithm to find the median.",
    "start": "4010400",
    "end": "4015630"
  },
  {
    "text": "So if you go code\nthis up, it loses to merge sort in practice. You can do all of this\nin place, but because",
    "start": "4015630",
    "end": "4022450"
  },
  {
    "text": "of all these recursive calls, it\ndoesn't work well in practice. But it's good to know.",
    "start": "4022450",
    "end": "4027750"
  },
  {
    "text": "And so this is a\ngood example I think, which we don't do\na lot of in 046,",
    "start": "4027750",
    "end": "4033010"
  },
  {
    "text": "but you get a sense of the\ndifference between asymptotic complexity and performance.",
    "start": "4033010",
    "end": "4039640"
  },
  {
    "text": "So while the median finding\nalgorithm has better asymptotic complexity worst case, it\nreally loses in practice",
    "start": "4039640",
    "end": "4048360"
  },
  {
    "text": "to the basic quicksort,\nwhich essentially is a bit of a hack,\nwhere you take an input",
    "start": "4048360",
    "end": "4053720"
  },
  {
    "text": "and you randomize\nthe input and you run it with A1 as the\npivot or An at the pivot.",
    "start": "4053720",
    "end": "4059830"
  },
  {
    "text": " Is there a different way\nthat you can actually",
    "start": "4059830",
    "end": "4067830"
  },
  {
    "text": "get to a Las Vegas algorithm? And it turns out\nrandomized quicksort",
    "start": "4067830",
    "end": "4073290"
  },
  {
    "text": "is something that you\ncan build and use, which is a bit different\nfrom basic quicksort",
    "start": "4073290",
    "end": "4079710"
  },
  {
    "text": "and certainly different\nfrom median finding. But it kind of has a little\nbit in common with them,",
    "start": "4079710",
    "end": "4084910"
  },
  {
    "text": "and it's our example\nof a Vegas algorithm. So what happens at\nrandomized quicksort?",
    "start": "4084910",
    "end": "4091510"
  },
  {
    "text": "An x is chosen at random\nfrom the array, A.",
    "start": "4091510",
    "end": "4098220"
  },
  {
    "text": "So you're not choosing A1 or An. You might just flip-- well,\neffectively an n-sided",
    "start": "4098220",
    "end": "4105290"
  },
  {
    "text": "die-- and pick a\nparticular index, and then go grab the\npivot corresponding",
    "start": "4105290",
    "end": "4111560"
  },
  {
    "text": "to the value at that index. You're not going to\nrandomize over values.",
    "start": "4111560",
    "end": "4117100"
  },
  {
    "text": "You don't know what\nthese values are, but you can pick a\nrandom index and then",
    "start": "4117100",
    "end": "4122380"
  },
  {
    "text": "grab the pivot based on\nthe value at that index. And so at each recursion,\na random choice is made.",
    "start": "4122380",
    "end": "4128920"
  },
  {
    "text": "And the expected\ntime-- so now we're saying something different. We're making a stronger\ntheoretical statement",
    "start": "4128920",
    "end": "4136739"
  },
  {
    "text": "that the expected time, when\nyou do this, for all inputs",
    "start": "4136740",
    "end": "4143509"
  },
  {
    "text": "arrays A is order n log n. And so now, this is\nnot worst case time.",
    "start": "4143510",
    "end": "4149990"
  },
  {
    "text": "It's expected time. So this is going\nto be our analysis in the last few\nminutes here to analyze",
    "start": "4149990",
    "end": "4159430"
  },
  {
    "text": "not randomized quicksort,\nbut a slight variant of randomized quicksort\nthat is going to show you",
    "start": "4159430",
    "end": "4167210"
  },
  {
    "text": "that you can run randomize\nquicksort and this variant in order n log n time.",
    "start": "4167210",
    "end": "4173640"
  },
  {
    "text": "So not quite sure what's going\nto happen in section tomorrow, but the full analysis\nis in the book.",
    "start": "4173640",
    "end": "4181580"
  },
  {
    "text": "You should read it. As you can see, it's\na couple of pages",
    "start": "4181580",
    "end": "4187520"
  },
  {
    "text": "that includes the\ndescription of a quicksort that I have already. But what we're going to do here\nis analyze a variant quicksort,",
    "start": "4187520",
    "end": "4197564"
  },
  {
    "text": "which is a little bit\neasier to analyze, and it gives you\nthe sense of why in fact the randomized\nquicksort is",
    "start": "4197564",
    "end": "4204900"
  },
  {
    "text": "going to run in expected time. And this analysis is easy\nto do it in a few minutes. So we'll do that.",
    "start": "4204900",
    "end": "4212290"
  },
  {
    "text": "And tomorrow, you'll see either\na median finding analysis that's similar to that\nanalysis in CLRS or precisely",
    "start": "4212290",
    "end": "4221070"
  },
  {
    "text": "that analysis, depending on\nwhat your TAs want to do.",
    "start": "4221070",
    "end": "4226079"
  },
  {
    "text": "So this particular\nvariant, we're going to call\nparanoid quicksort.",
    "start": "4226080",
    "end": "4231739"
  },
  {
    "text": "And so this quicksort\nis paranoid in the sense that it's going to be afraid of\ngetting unbalanced partitions,",
    "start": "4231740",
    "end": "4242660"
  },
  {
    "text": "and it's going to keep trying\nto get balanced partitions. So it's going to try to\nget a balanced partition.",
    "start": "4242660",
    "end": "4249690"
  },
  {
    "text": "It's going to check,\nand then if it fails, it's going to try again. And so at the end of\nit, there's obviously",
    "start": "4249690",
    "end": "4256000"
  },
  {
    "text": "an expectation associated\nwith the number of tries that you need in order to\nget a balanced partition.",
    "start": "4256000",
    "end": "4262990"
  },
  {
    "text": "But it just sort of flips the\nproblem on its head and says, you know what? I'm just going to guarantee\na balanced partition",
    "start": "4262990",
    "end": "4269890"
  },
  {
    "text": "from a probabilistic\nstandpoint and it might take me a little\nbit longer to get there. But that's what Las Vegas\nalgorithms are all about.",
    "start": "4269890",
    "end": "4277750"
  },
  {
    "text": "They're probably fast. And once I get a balanced\npartition, I'm in good shape because I can go do my\nrecursion, and I get my divide",
    "start": "4277750",
    "end": "4286160"
  },
  {
    "text": "and conquer working properly. So what is paranoid quicksort? Absolutely straightforward.",
    "start": "4286160",
    "end": "4292300"
  },
  {
    "text": "You could probably guess\ngiven my description. Let's just choose a pivot\nto be a random element",
    "start": "4292300",
    "end": "4305940"
  },
  {
    "text": "of A. Perform the partition,\nand then values will repeat.",
    "start": "4305940",
    "end": "4318050"
  },
  {
    "text": "So we're going to go off, and\nwe say until the resulting",
    "start": "4318050",
    "end": "4324550"
  },
  {
    "text": "partition is such that\nthe cardinality of L",
    "start": "4324550",
    "end": "4331770"
  },
  {
    "text": "less than or equal to\n3/4 of cardinality of A.",
    "start": "4331770",
    "end": "4338415"
  },
  {
    "text": "And the cardinality of G is\nless than or equal to 3/4 the cardinality of A.",
    "start": "4338415",
    "end": "4344570"
  },
  {
    "text": "So I'm allowing you a\ncertain amount of imbalance, but not a lot.",
    "start": "4344570",
    "end": "4349600"
  },
  {
    "text": "Right? And that's it. That's paranoid quicksort.",
    "start": "4349600",
    "end": "4357600"
  },
  {
    "text": "You obviously are doing that\nin each level of the recursion. And at each level\nof the recursion,",
    "start": "4357600",
    "end": "4363085"
  },
  {
    "text": "your L and G are going to be, at\nmost, a factor of three apart.",
    "start": "4363085",
    "end": "4368360"
  },
  {
    "text": "So you might get 1/4 and 3/4. If you're lucky,\nyou'll get 1/2 and 1/2. But the worst case,\ngiven that you're",
    "start": "4368360",
    "end": "4376020"
  },
  {
    "text": "going to be exiting out of\nthis loop, is 1/4 and 3/4. OK?",
    "start": "4376020",
    "end": "4381270"
  },
  {
    "text": "So, as always, you have\na simple algorithm, and it's not\ncompletely clear how",
    "start": "4381270",
    "end": "4390720"
  },
  {
    "text": "you're going to get to\nexpected n log n time. But it's not difficult.",
    "start": "4390720",
    "end": "4398000"
  },
  {
    "text": "Basically, what we had to do is\nwe have to try and figure out what the probability\nof a good call is, over here, a\ngood pivot choice,",
    "start": "4398000",
    "end": "4407160"
  },
  {
    "text": "and what the probability\nof a bad pivot choice is. And we have to obviously--\ngiven the potential imbalance,",
    "start": "4407160",
    "end": "4416990"
  },
  {
    "text": "we have to write the recurrence\nassociated with that, but let's take a look\nat the pivots here.",
    "start": "4416990",
    "end": "4424400"
  },
  {
    "text": "And what can we say about\nthe size as of L and G",
    "start": "4424400",
    "end": "4431110"
  },
  {
    "text": "if you just did a random pivot? Well, a bad call is when\nyou get something in L or G",
    "start": "4431110",
    "end": "4443320"
  },
  {
    "text": "that is less than 1/4. And a good call is when you get\nsomewhere between 1/2-- well,",
    "start": "4443320",
    "end": "4454500"
  },
  {
    "text": "roughly, if you look at\nthe choice of the pivot. So what I have up here, is\nthe choice of the pivot.",
    "start": "4454500",
    "end": "4461320"
  },
  {
    "text": "If my pivot is out here,\nI have a very small L, and all of the\nthing on the right",
    "start": "4461320",
    "end": "4468380"
  },
  {
    "text": "is G. If the pivot is here,\nI have a relatively small L and a large G. The pivot\nis over here, I'm good.",
    "start": "4468380",
    "end": "4476100"
  },
  {
    "text": "I got 1/4 and 3/4. If the pivot is over\nhere, I got 1/2 and 1/2",
    "start": "4476100",
    "end": "4481969"
  },
  {
    "text": "and so on and so forth. And so this part is\nbad, this part is bad, and the middle part is good.",
    "start": "4481970",
    "end": "4488470"
  },
  {
    "text": "So that's all that\nthis picture shows. So a call is good\nwith what probability?",
    "start": "4488470",
    "end": "4499520"
  },
  {
    "text": "Given that picture, a call is\ngood with what probability? It's greater than\nor equal to 1/2.",
    "start": "4499520",
    "end": "4505180"
  },
  {
    "start": "4505180",
    "end": "4510350"
  },
  {
    "text": "And so what you can now\nwrite simply is if Tn is",
    "start": "4510350",
    "end": "4518480"
  },
  {
    "text": "the time required to sort the\narray, essentially you can say",
    "start": "4518480",
    "end": "4524980"
  },
  {
    "text": "Tn is T of n divided by 4\nplus T of 3n divided by 4",
    "start": "4524980",
    "end": "4535010"
  },
  {
    "text": "plus expected\nnumber of iterations",
    "start": "4535010",
    "end": "4542800"
  },
  {
    "text": "in terms of getting a good\npartition times C times n.",
    "start": "4542800",
    "end": "4548769"
  },
  {
    "text": "And there is a reason\nwhy I'm putting C in here as opposed to theta. That will become clear\nin just a second.",
    "start": "4548769",
    "end": "4553940"
  },
  {
    "text": "Because I can't really\napply the master theorem to this given\nwhat I have with respect to Tn over 4 and 3n over 4.",
    "start": "4553940",
    "end": "4561612"
  },
  {
    "text": "So what I have here is,\nI'm looking at the case where I could get an\nimbalanced partition,",
    "start": "4561612",
    "end": "4568550"
  },
  {
    "text": "but the imbalance is bounded. So I'd have n over 4 on\none side and 3n over 4",
    "start": "4568550",
    "end": "4574150"
  },
  {
    "text": "on the other side. But I'm not going to have\nn over 5 and 4n over 5 or what have you.",
    "start": "4574150",
    "end": "4580190"
  },
  {
    "text": "And so that's the\ntwo recursive calls. So that's hopefully easy to see. The part that is new here\nis simply the complexity",
    "start": "4580190",
    "end": "4589770"
  },
  {
    "text": "of this code that you see\nhere, which is obviously the randomized algorithm.",
    "start": "4589770",
    "end": "4595710"
  },
  {
    "text": "That's exactly where\nthe randomness comes in because you're picking a random\npivot, and you're checking it.",
    "start": "4595710",
    "end": "4601530"
  },
  {
    "text": "And so this is going to run\na certain number of times. And we can figure out\nwhat the expectation",
    "start": "4601530",
    "end": "4607560"
  },
  {
    "text": "is in just a minute. But I have C times n because\nthis is constant time",
    "start": "4607560",
    "end": "4613240"
  },
  {
    "text": "to choose a random number. We'll assume that\nperforming the partition is C times n or theta n,\nand that's why I have this",
    "start": "4613240",
    "end": "4622020"
  },
  {
    "text": "up there. So this, we're going\nto call this Cn. And so expected\nnumber of iterations",
    "start": "4622020",
    "end": "4629349"
  },
  {
    "text": "given what I have--\nwhat can I say about the expected\nnumber of iterations using simple probability rules?",
    "start": "4629350",
    "end": "4636980"
  },
  {
    "text": "What is that? 2, right? 1 over p. All of them are independent.",
    "start": "4636980",
    "end": "4642880"
  },
  {
    "text": "So this is 2. So what I have here is something\nthat I think you might have",
    "start": "4642880",
    "end": "4652330"
  },
  {
    "text": "seen this before, but it's worth\ndrawing the tree out and seeing it one more time in case\nit didn't fully registered",
    "start": "4652330",
    "end": "4663210"
  },
  {
    "text": "the first time or you didn't\nactually see it in 006 or recitation.",
    "start": "4663210",
    "end": "4669480"
  },
  {
    "text": "But what I now have is T of n. I want to solve T of\nn equals T of n over 4",
    "start": "4669480",
    "end": "4677030"
  },
  {
    "text": "plus T of 3 n over\n4 plus 2 times Cn.",
    "start": "4677030",
    "end": "4684020"
  },
  {
    "text": "And, again, like I said, I\ndidn't put theta n in here because, as you'll see,\nwhen I draw this tree out--",
    "start": "4684020",
    "end": "4690840"
  },
  {
    "text": "because it's not a massive\ntheorem invocation-- it's worth looking at it from a\nconstant factor standpoint",
    "start": "4690840",
    "end": "4698199"
  },
  {
    "text": "to really get the sense of\nhow all of this works out. And so if I draw that\ntree of execution",
    "start": "4698200",
    "end": "4704780"
  },
  {
    "text": "and I start counting,\nbasically what I have is 2Cn up at the top. I have 1 over 4\ntimes 2Cn over here.",
    "start": "4704780",
    "end": "4712570"
  },
  {
    "text": "I have 3 over 4\ntimes 2Cn over here. And then this 1 over 4 might go\n1 over 16 times 2Cn over here.",
    "start": "4712570",
    "end": "4722389"
  },
  {
    "text": "And this might go 3 over\n16 times 2Cn over here. And this would go, I guess it\nwould be 3 over 16 times 2Cn.",
    "start": "4722390",
    "end": "4733650"
  },
  {
    "text": "And then 9 over 16\ntimes 2Cn et cetera.",
    "start": "4733650",
    "end": "4738840"
  },
  {
    "text": "So this is an unbalanced\ntree because you have an unbalanced\npartition up on top,",
    "start": "4738840",
    "end": "4746059"
  },
  {
    "text": "and now you want to count up all\nthe work that this tree does.",
    "start": "4746060",
    "end": "4752370"
  },
  {
    "text": "If you collect up all\nof the operations, then that's going to\ntell you what T of n is because that's\nall the work that you",
    "start": "4752370",
    "end": "4758430"
  },
  {
    "text": "have to do in order to finish\nup the top level of recursion. And what you can say is, if\nyou look at this side here are",
    "start": "4758430",
    "end": "4766850"
  },
  {
    "text": "all the way to the\nright-hand side, you're going to have log to the\nbase 4 over 3 times 2Cn levels.",
    "start": "4766850",
    "end": "4777949"
  },
  {
    "text": "So that's just simply every time\nyou're multiplying by 3 over 4, when you get down to the number\n1, and that's log of 4 over 3.",
    "start": "4777950",
    "end": "4787670"
  },
  {
    "text": "And then over here,\nit's a little bit easier to think about because\nit's a power of 2. You're going to have log of 4\nto the base 4 times 2Cn levels.",
    "start": "4787670",
    "end": "4798530"
  },
  {
    "text": "And really, it doesn't\nreally matter honestly when we go to asymptotics. But is worth seeing,\nI think, just",
    "start": "4798530",
    "end": "4804830"
  },
  {
    "text": "to get a sense of why it\nall works out, regardless of whether it's n over 4 or\na different constant here",
    "start": "4804830",
    "end": "4813960"
  },
  {
    "text": "or whether it's\nbalanced or unbalanced. The tree looks a\nlittle bit different. It's sort of weird.",
    "start": "4813960",
    "end": "4819239"
  },
  {
    "text": "It's got fewer levels here\nand more levels there.",
    "start": "4819240",
    "end": "4824550"
  },
  {
    "text": "So it's sort of tilted this way. But eventually, you get down to\ntheta 1 constants down below.",
    "start": "4824550",
    "end": "4833870"
  },
  {
    "text": "And basically what you can\nsee-- if you just add it up-- is 1 over 4 plus 3 over 4 is 1.",
    "start": "4833870",
    "end": "4842120"
  },
  {
    "text": "1 over 16. 3 over 16. Obviously, those\nall end up being 1.",
    "start": "4842120",
    "end": "4848100"
  },
  {
    "text": "So you have 2Cn\nwork at each level.",
    "start": "4848100",
    "end": "4857190"
  },
  {
    "text": "And if you just go ahead\nand be pessimistic about it, there's a maximum of log\n4 over 3 times 2Cn levels.",
    "start": "4857190",
    "end": "4869744"
  },
  {
    "text": " And that's pretty much it.",
    "start": "4869745",
    "end": "4875760"
  },
  {
    "text": "Obviously, now you can start\nignoring the constants. You just keep the log here. You don't care what the base is.",
    "start": "4875760",
    "end": "4881320"
  },
  {
    "text": "You got an n here. So drop the 2C. Drop the 4 over 3. Drop the 2C. And you get your n log n.",
    "start": "4881320",
    "end": "4887260"
  },
  {
    "text": "OK? So that's pretty much it. I'll stick around\nhere for questions.",
    "start": "4887260",
    "end": "4894090"
  },
  {
    "text": "But you got an example of\na Monte Carlo algorithm. You got an example of\na Las Vegas algorithm.",
    "start": "4894090",
    "end": "4900400"
  },
  {
    "text": "And tomorrow in section, you'll\nsee a slightly more involved analysis for something\nthat looks a lot closer",
    "start": "4900400",
    "end": "4906500"
  },
  {
    "text": "to the randomized quicksort. So see you next time. ",
    "start": "4906500",
    "end": "4911716"
  }
]