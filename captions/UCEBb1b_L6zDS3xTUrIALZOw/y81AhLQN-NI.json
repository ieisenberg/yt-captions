[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": "OPERATOR: The following content\nis provided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6840"
  },
  {
    "text": "offer high quality educational\nresources for free, To make a donation or view additional\nmaterials from hundreds of MIT",
    "start": "6840",
    "end": "14379"
  },
  {
    "text": "courses, visit MIT\nOpenCourseWare at ocw.mit.edu.",
    "start": "14380",
    "end": "19930"
  },
  {
    "text": "PROFESSOR: Last time, Professor\nGuttag introduced the idea of objects and classes\nand this wonderful",
    "start": "19930",
    "end": "28690"
  },
  {
    "start": "21000",
    "end": "281000"
  },
  {
    "text": "phrase called object-oriented\nprogramming. And it's a topic I want to pick\nup on today, we're going to do for the next few lectures,\nand it's a topic I",
    "start": "28690",
    "end": "36170"
  },
  {
    "text": "want to spend some time on\nbecause this idea of capturing",
    "start": "36170",
    "end": "41239"
  },
  {
    "text": "data and methods, the term we're\ngoing to use for it, but data and functions that belong\nto that data, things that can",
    "start": "41240",
    "end": "46770"
  },
  {
    "text": "be used to manipulate them,\nis a really powerful one. What we're really getting at is\nthe idea of saying I want",
    "start": "46770",
    "end": "53290"
  },
  {
    "text": "to have a way of grouping\ntogether information into units that make sense.",
    "start": "53290",
    "end": "58990"
  },
  {
    "text": "So I can go back to one of those\ntopics we had at the beginning, which is the idea\nof abstraction, that I can create one of those units as a\nsimple entity, bury away the",
    "start": "58990",
    "end": "67040"
  },
  {
    "text": "details and write really\nmodular code. And so we're going to\ntalk about that a lot as we go along.",
    "start": "67040",
    "end": "73640"
  },
  {
    "text": "What we're really doing, or\nI shouldn't say what we're really doing, a basic piece of\nwhat we're doing, when we talk about classes or objects, is\nwe're doing something that",
    "start": "73640",
    "end": "81649"
  },
  {
    "text": "Professor Guttag mentioned,\nwe're defining an abstract data type. Now what in the world\ndoes that mean?",
    "start": "81650",
    "end": "88189"
  },
  {
    "text": "Well basically what we're\ndoing is we're giving ourselves the ability to create\ndata types the same way that we have some built-ins,\nso we have things like int,",
    "start": "88190",
    "end": "95690"
  },
  {
    "text": "float, string, these are\nbuilt-in data types. And if you think about it,\nassociated with each one of",
    "start": "95690",
    "end": "101770"
  },
  {
    "text": "those data types is a set\nof functions it's intended to apply to. Sometimes the functions --\nsometimes a function can be",
    "start": "101770",
    "end": "109329"
  },
  {
    "text": "used on multiple data types,\nplus, for example, we saw could add strings, or could\nadd ints, but each one of",
    "start": "109330",
    "end": "115580"
  },
  {
    "text": "those data types has associated\nwith it a set of functions that are geared\nto handling them. We want to do the same thing,\nbut with our data types.",
    "start": "115580",
    "end": "123290"
  },
  {
    "text": "We want to create data types and\nfunctions, or we're going to call them methods, that\nare specifically aimed at",
    "start": "123290",
    "end": "129240"
  },
  {
    "text": "manipulating those\nkinds of objects. And our goal is then to\nbasically see how we can build",
    "start": "129240",
    "end": "134430"
  },
  {
    "text": "systems that take advantage\nof that modularity. Right, so the fundamental idea\nthen, is, I want to glue",
    "start": "134430",
    "end": "140590"
  },
  {
    "text": "together information, I want\nto take pieces of data that naturally belong together, glue\nthem together, and attach",
    "start": "140590",
    "end": "145950"
  },
  {
    "text": "some methods to it. And that's, you know, saying\na lot of words, let's do an example because it's probably\neasiest to see this by looking",
    "start": "145950",
    "end": "152590"
  },
  {
    "text": "at a specific example. So here's the example I'm\ngoing to start with.",
    "start": "152590",
    "end": "158640"
  },
  {
    "text": "Suppose I want to do little\npiece of code that's going to",
    "start": "158640",
    "end": "165050"
  },
  {
    "text": "do planar geometry, points\nin the plane. All right, so I want to have\nsome way of gluing those",
    "start": "165050",
    "end": "170800"
  },
  {
    "text": "things together. Well you know what a point is,\nit's got an x- and a y- coordinate, it's natural to\nthink about those two things",
    "start": "170800",
    "end": "175870"
  },
  {
    "text": "as belonging as a\nsingle entity. So an easy way to do this would\nbe to say, let's just represent them as a list.\nJust as a 2-list,",
    "start": "175870",
    "end": "186920"
  },
  {
    "text": "or a list of 2 elements. It's easy to think of a point as\njust a list of an x- and a y- coordinate.",
    "start": "186920",
    "end": "192530"
  },
  {
    "text": "OK, for example, I might say\npoint p1 is that list, x is 1,",
    "start": "192530",
    "end": "203592"
  },
  {
    "text": "y is 2. in fact, if I draw\na little simple -- it's",
    "start": "203592",
    "end": "213120"
  },
  {
    "text": "basically pointing to that point\nin the plane, right, x is 1, y is 2. OK, fine, there's another way\nto represent points on the",
    "start": "213120",
    "end": "221819"
  },
  {
    "text": "plane now, and that's in\npolar form, so this, if you like, is Cartesian.",
    "start": "221820",
    "end": "228690"
  },
  {
    "text": "Another way to represent a point\nin a plane is I've got a radius and I've got an angle\nfrom the x-axis, right, and",
    "start": "228690",
    "end": "233750"
  },
  {
    "text": "that's a standard thing\nyou might do. So I might define, for example,\nin polar form p 2,",
    "start": "233750",
    "end": "240040"
  },
  {
    "text": "and let me see, which example\ndid I do here, we'll make this",
    "start": "240040",
    "end": "248010"
  },
  {
    "text": "the point of radius 2 and at\nangle pi by 2, I'm going to make it easy because pi by 2\nis up along this axis, and",
    "start": "248010",
    "end": "254015"
  },
  {
    "text": "that's basically that point. Ok, just fine, it's\nno big deal.",
    "start": "254015",
    "end": "262040"
  },
  {
    "text": "But here now becomes\nthe problem. I've glued things together but\njust using a list. Suppose I",
    "start": "262040",
    "end": "267340"
  },
  {
    "text": "hand you one of these lists. How do you know which\nkind it is? How do you know whether\nit's in Cartesian",
    "start": "267340",
    "end": "273780"
  },
  {
    "text": "form or in polar form? You have nothing that identifies\nthat there, you have no way of saying what this\ngrouping actually means.",
    "start": "273780",
    "end": "281620"
  },
  {
    "start": "281000",
    "end": "422000"
  },
  {
    "text": "Right, and just to get a sense\nof this, let's look at a simple little example, so on\nyour hand-out, you'll see I've",
    "start": "281620",
    "end": "287410"
  },
  {
    "text": "got a little piece of code that\nsays assuming I've got one of these points, I want to\ndo things with it, for example I might want to add\nthem together.",
    "start": "287410",
    "end": "293730"
  },
  {
    "text": "So this first little piece of\ncode right here says, ok you give me 2 points, I'll create\nanother 1 of these lists and",
    "start": "293730",
    "end": "301610"
  },
  {
    "text": "I'll simply take the x, sorry\nI shouldn't say x, I'm going to assume it's the x, the\nx-values are the two points, add them together, just right\nthere, the y-values, add them",
    "start": "301610",
    "end": "309460"
  },
  {
    "text": "together and return that list.\nAnd if I actually run this, which I'm going to do -- excuse\nme, do it again --",
    "start": "309460",
    "end": "319830"
  },
  {
    "text": "OK, you can see that I've\nadded together and I've printed out the value of r, and\nI'll just show you that in fact that's what I've got. This looks fine, right, I'm\ndoing the right thing.",
    "start": "319830",
    "end": "329409"
  },
  {
    "text": "Another way of saying it is,\nI've actually said, what did I use there, (1,2) and (3,1), It's\nbasically saying there is",
    "start": "329410",
    "end": "341030"
  },
  {
    "text": "the first point, there's the\nsecond point, add them together and I get that point. OK, that sounds fine.",
    "start": "341030",
    "end": "349080"
  },
  {
    "text": "Now, suppose in fact these\nweren't x and y glued together, these were radius\nand angle glued together.",
    "start": "349080",
    "end": "355680"
  },
  {
    "text": "In that case point p 1 doesn't\ncorrespond to this point, it",
    "start": "355680",
    "end": "362570"
  },
  {
    "text": "actually corresponds to the\npoint of radius 2 and angle 1, which is about here.",
    "start": "362570",
    "end": "367710"
  },
  {
    "text": "I think I wrote this down\ncarefully so I would make sure I did it right.",
    "start": "367710",
    "end": "373940"
  },
  {
    "text": "Sorry, said that wrong, radius\n1 and angle 2, 2 radians is a little bit more than pi half.",
    "start": "373940",
    "end": "379860"
  },
  {
    "text": "And the second point is of\nradius 3 and angle 1, which is",
    "start": "379860",
    "end": "385349"
  },
  {
    "text": "up about there. So what point, sorry, bad\npun, what point am I",
    "start": "385350",
    "end": "392889"
  },
  {
    "text": "trying to make here? Different understandings of what\nthat piece means gives",
    "start": "392890",
    "end": "398630"
  },
  {
    "text": "you different values, and that's\na bit of a problem. The second problem is, suppose\nactually I had p 1 and p 2",
    "start": "398630",
    "end": "405960"
  },
  {
    "text": "were in polar form, and I\nran add points on them. This little piece of code\nhere that I did.",
    "start": "405960",
    "end": "412710"
  },
  {
    "text": "Does that even make any sense? Course not, right? You know when you add 2 polar\nforms, you add the radii",
    "start": "412710",
    "end": "418360"
  },
  {
    "text": "together, you don't add the\nangles together, you need to do it in Cartesian form. So what I'm leading up to here\nis that we've got a problem.",
    "start": "418360",
    "end": "426900"
  },
  {
    "start": "422000",
    "end": "517000"
  },
  {
    "text": "And the problem is, that we want\nto build this abstract data type, but we'd like to\nbasically know what kind of",
    "start": "426900",
    "end": "432940"
  },
  {
    "text": "object is it, and what functions\nactually belong to it, how do we use them? And so I'm going to go back to\nthis idea of a class, and",
    "start": "432940",
    "end": "439995"
  },
  {
    "text": "let's build the first of these,\nand that is shown right here on this piece\nof your handout.",
    "start": "439995",
    "end": "445350"
  },
  {
    "text": "I'm going to define a class,\nand in particular, what I'm going to do, is walk through\nwhat that says.",
    "start": "445350",
    "end": "453210"
  },
  {
    "text": "So I'm going to now build\nan object, it's going to represent a point.",
    "start": "453210",
    "end": "463110"
  },
  {
    "text": "So what does that thing\nsay up there? It's got this funky looking\nform, right, it says, I've got something that I'm going to\ncall a class, got that key",
    "start": "463110",
    "end": "472030"
  },
  {
    "text": "word class right here. And I'm going to give it a name,\nand right now I'm just",
    "start": "472030",
    "end": "478790"
  },
  {
    "text": "building a simple piece of it --\nbut first of all, what does a class do? Think of this as, this is\na template for creating",
    "start": "478790",
    "end": "491610"
  },
  {
    "text": "instances of an object.",
    "start": "491610",
    "end": "499699"
  },
  {
    "text": "At the moment, it's a really\ndumb template. I'm going to add to it in\na second, but I want to build up to this. Right now it's got that second\nkey word there called pass,",
    "start": "499700",
    "end": "507270"
  },
  {
    "text": "which is just Python's way\nof saying there's an empty body in here. Right,, we're going to add to\nit in a second, but the idea",
    "start": "507270",
    "end": "513000"
  },
  {
    "text": "is class is going\nto be a template for creating instances. How do I use it?",
    "start": "513000",
    "end": "519180"
  },
  {
    "start": "517000",
    "end": "574000"
  },
  {
    "text": "Well, I call class just like\na function, and you can see that below. Having created this thing called\nCartesian point, I'm",
    "start": "519180",
    "end": "525440"
  },
  {
    "text": "going to create two instances\nof it. c p 1 and c p 2. Notice the form of it, it's\njust the name of the class",
    "start": "525440",
    "end": "531670"
  },
  {
    "text": "followed by open paren,\nclose paren, treating it like a function. What that does, is that it\ncreates, c p 1 and c p 2 are",
    "start": "531670",
    "end": "543130"
  },
  {
    "text": "both instances of this\ntype, specific",
    "start": "543130",
    "end": "552970"
  },
  {
    "text": "versions of this type. For now the way to think about\nthis is, when I call that class definition, it goes off\nand allocates a specific spot",
    "start": "552970",
    "end": "562350"
  },
  {
    "text": "in memory that corresponds\nto that instance. Right now it's empty, actually\nit's not quite empty, it has a pointer back to the class.",
    "start": "562350",
    "end": "568980"
  },
  {
    "text": "And I can give a name to that,\nso c p 1 and c p 2 are both going to point to that.",
    "start": "568980",
    "end": "574200"
  },
  {
    "start": "574000",
    "end": "733000"
  },
  {
    "text": "Once I've got that, I can now\nstart giving some variable names, sorry not, rephrase\nthat, I can give some",
    "start": "574200",
    "end": "579855"
  },
  {
    "text": "attributes, I can give some characteristics to these classes. So each instance has some\ninternal, or will have some",
    "start": "579855",
    "end": "590149"
  },
  {
    "text": "internal attributes.",
    "start": "590150",
    "end": "598580"
  },
  {
    "text": "Notice how I did\nthat up there. Having created c p 1 and\nc p 2, I had this weird",
    "start": "598580",
    "end": "605220"
  },
  {
    "text": "looking form here. Not so weird, you've actually\nseen it before. In which I said c p 1\ndot x equals 1.0.",
    "start": "605220",
    "end": "615810"
  },
  {
    "text": "What's this doing? c p 1 points\nto an instance, it points to a particular version\nof this class.",
    "start": "615810",
    "end": "623500"
  },
  {
    "text": "And I have now given an internal\nvariable name x and a value associated with that.",
    "start": "623500",
    "end": "629360"
  },
  {
    "text": "So I've just given\nit an x variable. All right, c p 1 dot y, I've\nsaid assign that to",
    "start": "629360",
    "end": "634860"
  },
  {
    "text": "the value 2, 2,0. So now c p 1 has inside of\nit an x and y value.",
    "start": "634860",
    "end": "642269"
  },
  {
    "text": "Did the same thing with\nc p 2, give it a different x and y value. Again, remind you, c p 2\nis a different instance",
    "start": "642270",
    "end": "649899"
  },
  {
    "text": "of this data type. All right, when I call the class\ndefinition it goes off and finds another spot in\nmemory, says that the spot I'm",
    "start": "649900",
    "end": "656070"
  },
  {
    "text": "going to give you a pointer back\nto that, give it the name c p 2, and then by running these\n2 little assignments",
    "start": "656070",
    "end": "662310"
  },
  {
    "text": "statements here, I've given it\nan x and a y value for c p 2.",
    "start": "662310",
    "end": "668720"
  },
  {
    "text": "So you see why I say it's\na template, right? Right now it's a simple\ntemplate, but it's a template for creating what a class looks\nlike, and I now have an",
    "start": "668720",
    "end": "674800"
  },
  {
    "text": "x- and y- value associated with\neach instance of this. OK, and if I wanted to look at\nit, we can come back over",
    "start": "674800",
    "end": "680250"
  },
  {
    "text": "here, and we can see what does\nc p 1 look like, interesting.",
    "start": "680250",
    "end": "688860"
  },
  {
    "text": "It says some funky stuff,\nand says it's a kind of Cartesian point. And that's going to be valuable\nto me when I want to",
    "start": "688860",
    "end": "695420"
  },
  {
    "text": "get back to using these\nthings, right? You see that little thing says\ndot Cartesian point in there. If I want to get out right now\nthe versions of these things,",
    "start": "695420",
    "end": "702430"
  },
  {
    "text": "I can ask what's the value\nof c p 1 x, and it returns it back out.",
    "start": "702430",
    "end": "708240"
  },
  {
    "text": "I could say c p 2 dot x, that\nwas a bad one to use because they use the same valuable\nin both places, didn't I?",
    "start": "708240",
    "end": "714090"
  },
  {
    "text": "So let's do c p 1 dot\ny, c p 2 dot y.",
    "start": "714090",
    "end": "721970"
  },
  {
    "text": "OK, so I've just created local\nversions of variables with each one of these objects. I can get at them just like I\nwould before, I can assign",
    "start": "721970",
    "end": "728660"
  },
  {
    "text": "them in as I might\nhave done before. OK, now that I've got that, we\ncould think about what would I",
    "start": "728660",
    "end": "736730"
  },
  {
    "start": "733000",
    "end": "872000"
  },
  {
    "text": "want to do with these points? Well one thing I might want to\ndo is say, is this the same point or not?",
    "start": "736730",
    "end": "742450"
  },
  {
    "text": "So the next little piece of code\nI've written here, just move down to it slightly.",
    "start": "742450",
    "end": "750740"
  },
  {
    "text": "I've got a little piece of\ncode called same point. And you can look at it. What does it say to do?",
    "start": "750740",
    "end": "756500"
  },
  {
    "text": "It says, if you give me two of\nthese data objects, I'm going to call them p 1 and p 2.",
    "start": "756500",
    "end": "762070"
  },
  {
    "text": "I'm going to say, gee, is the\nx value the same in both of them, and if it is, and the y\nvalue's the same, then this is",
    "start": "762070",
    "end": "770350"
  },
  {
    "text": "the same point, I'm going\nto return true. Notice the form. This is saying, that's a class,\nor sorry, an instance",
    "start": "770350",
    "end": "778170"
  },
  {
    "text": "of a class, and I'm going\nto get the x value associated with it. I going to come back in a second\nto how it actually does",
    "start": "778170",
    "end": "784240"
  },
  {
    "text": "that, but it basically says, get\nme x value for p 1, get me the x value for p 2,\ncompare them, just as you would normally.",
    "start": "784240",
    "end": "790490"
  },
  {
    "text": "I've got another little thing\nhere that I'm going to use a little later on that just prints\nout values of things.",
    "start": "790490",
    "end": "796440"
  },
  {
    "text": "OK, let's see what happens\nif I do this. Let me show you simple\nlittle example.",
    "start": "796440",
    "end": "802850"
  },
  {
    "text": "I'm going to go over here, and\nlet me define a couple of",
    "start": "802850",
    "end": "809889"
  },
  {
    "text": "these things. I'm going to say p 1, try it\nagain, p 1 is a Cartesian, it",
    "start": "809890",
    "end": "822760"
  },
  {
    "text": "would help if I could type,\nCartesian point, and I'm going",
    "start": "822760",
    "end": "829870"
  },
  {
    "text": "to say p 1 of x is 3, p 1 of y\nis 4, and I'm going to make p",
    "start": "829870",
    "end": "836120"
  },
  {
    "text": "2 another Cartesian point.",
    "start": "836120",
    "end": "843660"
  },
  {
    "text": "And I'll give it an x value\nof 3 and a y value of 4.",
    "start": "843660",
    "end": "852120"
  },
  {
    "text": "OK, now I want to say,\nare these the same? Thing I've got a little\nprocedure that could do that,",
    "start": "852120",
    "end": "858300"
  },
  {
    "text": "but you know the simplest thing\nI could do is to say well, gee, wait a minute, why\ndon't I just check to see if these are the same thing?",
    "start": "858300",
    "end": "863420"
  },
  {
    "text": "So I can say is p 1 the same\nas p 2, using Scheme's",
    "start": "863420",
    "end": "869209"
  },
  {
    "text": "built-in is comparator. Say -- sorry? PROFESSOR 2: Part of Python? PROFESSOR: Part of Scheme, whoa,\nthere's a Freudian slip,",
    "start": "869210",
    "end": "875529"
  },
  {
    "start": "872000",
    "end": "992000"
  },
  {
    "text": "thank you, John. I'm showing my age, and my\nhistory here, is p 1 and p 2 the same thing?",
    "start": "875530",
    "end": "881170"
  },
  {
    "text": "Hey, there's a bad English\nsentence even worse, now I'm really thrown off. I'm using Python's is comparator\nto say is it the same thing?",
    "start": "881170",
    "end": "886440"
  },
  {
    "text": "It says no. But if I say, are p 1 and p 2\nthe same point, it says yes.",
    "start": "886440",
    "end": "900569"
  },
  {
    "text": "And this is a point I\nwant to stress here. So what's going on in this case\nis, I want to distinguish between shallow equality\nand deep equality.",
    "start": "900570",
    "end": "918530"
  },
  {
    "text": "The first thing is testing\nshallow equality.",
    "start": "918530",
    "end": "923580"
  },
  {
    "text": "What it is doing, that's another\nbad English sentence, but what it is doing? Is is essentially saying, given\n2 things, do they point",
    "start": "923580",
    "end": "932540"
  },
  {
    "text": "to exactly the same referent? Or another way of thinking about\nit, is remember I said when I call that class\ndefinition it creates an",
    "start": "932540",
    "end": "939560"
  },
  {
    "text": "instance, that's a pointer to\nsome spot in memory that's got some local information\naround it. Is is saying, do these things\npoint to exactly the same spot",
    "start": "939560",
    "end": "946680"
  },
  {
    "text": "in memory, the same instance. Deep equality, we get to define,\nthat's what I did by",
    "start": "946680",
    "end": "956250"
  },
  {
    "text": "writing same point. OK, as I said, I want equality\nin the case of points to be, are the x- and y- coordinates\nthe same?",
    "start": "956250",
    "end": "962870"
  },
  {
    "text": "And I'm actually going to change\nit. just to show you this point. If I do the following, and\nI say, I'm going to",
    "start": "962870",
    "end": "972180"
  },
  {
    "text": "assign p 1 to be p 2. What's that doing? It's taking the name p 1 and\nit's changing its value to",
    "start": "972180",
    "end": "978250"
  },
  {
    "text": "point to exactly what\np 2 points to. And then I say, are they\nthe same thing?",
    "start": "978250",
    "end": "985670"
  },
  {
    "text": "Answer's yes, because now they\nare pointing to exactly the same spot in memory. The same instance.",
    "start": "985670",
    "end": "992430"
  },
  {
    "start": "992000",
    "end": "1304000"
  },
  {
    "text": "OK, the reason I'm saying this\nis, we have one class definition, is a cookie cutter,\nit's a template that's going to let us build versions\nof these things.",
    "start": "992430",
    "end": "998810"
  },
  {
    "text": "Every time I use it, I'm\ncreating a new instance, that's a different thing\ninside of memory. And I want to have that because\nI want to have lots of",
    "start": "998810",
    "end": "1005300"
  },
  {
    "text": "versions of points. OK, now, let's go back\nto where I was.",
    "start": "1005300",
    "end": "1014240"
  },
  {
    "text": "I said one of the things I want\nto do is, I want to have different versions of points. So I've got now things that\nare Cartesian points.",
    "start": "1014240",
    "end": "1020699"
  },
  {
    "text": "I could do the same thing, I\ncould build polar point. I wanted to show\nit to you here. I've got a class called polar\npoint, which is right there,",
    "start": "1020700",
    "end": "1027569"
  },
  {
    "text": "and same kind of thing, I can\ncreate instances of it, and then assign to them things like\na radius and an angle,",
    "start": "1027570",
    "end": "1033350"
  },
  {
    "text": "make instances of those. OK, John? PROFESSOR 2: I just want to\nmaybe mention that in some of",
    "start": "1033350",
    "end": "1041209"
  },
  {
    "text": "the reading, you'll see terms\nlike object equality and value equality, instead of shallow\nequality and deep equality. PROFESSOR: Right, so, this\nobject, this is,",
    "start": "1041210",
    "end": "1053850"
  },
  {
    "text": "right, value quality. Right. And you will see both\nterms used. Some people like to use shallow\nand deep, object and",
    "start": "1053850",
    "end": "1059720"
  },
  {
    "text": "value, but they're talking about\nthe same thing, which is it the same object or is it the\nsame, in this case, set of",
    "start": "1059720",
    "end": "1064960"
  },
  {
    "text": "values, depending on what you\nwant to define as you use it.",
    "start": "1064960",
    "end": "1069970"
  },
  {
    "text": "OK, so as I said, now I can go\noff and I could create a",
    "start": "1069970",
    "end": "1077150"
  },
  {
    "text": "different class. I've got Cartesian points, I\ncould create a polar points. And I'm going to run it in a\nsec, but you can see, the same kind of idea.",
    "start": "1077150",
    "end": "1082560"
  },
  {
    "text": "I define a class call polar\npoint, I create a couple of them, and I give them a\nradius and an angle. And then I could do things like\nagain, say, okay having",
    "start": "1082560",
    "end": "1090029"
  },
  {
    "text": "done, that let me just run it\nhere, run that, so I've now",
    "start": "1090030",
    "end": "1097430"
  },
  {
    "text": "got polar point 1, and\npolar point 2. I can say is polar point 1 the\nsame as polar point 2, and the",
    "start": "1097430",
    "end": "1103970"
  },
  {
    "text": "answer should be no. And then I could say well, gee,\nare they the same point?",
    "start": "1103970",
    "end": "1110860"
  },
  {
    "text": "Oops.",
    "start": "1110860",
    "end": "1118370"
  },
  {
    "text": "What happened? Well it bombed out. Because, what was I\nexpecting to do?",
    "start": "1118370",
    "end": "1123410"
  },
  {
    "text": "I was expecting to compare\nx- and y- values, not radius and angle. And so this doesn't know how\nto do it, it doesn't have a",
    "start": "1123410",
    "end": "1129710"
  },
  {
    "text": "method to deal with it,\nso it complains. So what's my problem here, and\nthis is what I want to now lead up to.",
    "start": "1129710",
    "end": "1135420"
  },
  {
    "text": "I could imagine writing another\nfunction for same point, and I have to give it a\nname like same point polar,",
    "start": "1135420",
    "end": "1141590"
  },
  {
    "text": "and same point Cartesian. A different function to compare\npolar versions of these points.",
    "start": "1141590",
    "end": "1147039"
  },
  {
    "text": "But that's starting to\nget to be a nuisance. What I'd really like to do is to\nhave 1 representation for a",
    "start": "1147040",
    "end": "1153280"
  },
  {
    "text": "point that supports different\nways of getting information out, but has gathered within it,\na method or a function for",
    "start": "1153280",
    "end": "1160680"
  },
  {
    "text": "dealing with things like how\ndo I know if it's the same point or not. So I want to take this idea\nclasses now, and I want to",
    "start": "1160680",
    "end": "1166200"
  },
  {
    "text": "generalize it. Right, and that is going to\nlead us then to this funky",
    "start": "1166200",
    "end": "1172550"
  },
  {
    "text": "looking thing. Right there, and I'd\nlike you to look at that in your handout.",
    "start": "1172550",
    "end": "1178680"
  },
  {
    "text": "OK, I'm going to go back\nand rebuild the class.",
    "start": "1178680",
    "end": "1184060"
  },
  {
    "text": "Ok, and again, I'm going\nto remind you, the class is this template.",
    "start": "1184060",
    "end": "1190669"
  },
  {
    "text": "But now I'm going to change\nit, so what is that new version of class say. I'm going to call it\nc point just to make it a little shorter.",
    "start": "1190670",
    "end": "1196430"
  },
  {
    "text": "You can see inside of it, it's\ngot a set of definitions for things like functions.",
    "start": "1196430",
    "end": "1201540"
  },
  {
    "text": "And that first one is this kind\nof interesting thing, it's two underbars, init,\nand two underbars.",
    "start": "1201540",
    "end": "1209800"
  },
  {
    "text": "Underscores, I guess\nis the right way to say it, not underbars. Right that's a specific name,\nand what it basically says is,",
    "start": "1209800",
    "end": "1217660"
  },
  {
    "text": "when I call the class\ninstance. That's a bad mistake. When I call the class\ndefinition, that is I call c",
    "start": "1217660",
    "end": "1225835"
  },
  {
    "text": "point, I'm going to\ncall it with a specific set of arguments.",
    "start": "1225835",
    "end": "1231179"
  },
  {
    "text": "And what is it going to\nhappen is that init is going to then apply.",
    "start": "1231180",
    "end": "1236740"
  },
  {
    "text": "It's going to apply to\nthose arguments. So let me in fact show\nyou an example. I've got a definition of\nCartesian point, I've got a",
    "start": "1236740",
    "end": "1243740"
  },
  {
    "text": "definition of polar point. Let me just run these to\nget them in there.",
    "start": "1243740",
    "end": "1251470"
  },
  {
    "text": "Now let's do the following. Let's let p be Cartesian point,\nand we'll give it a",
    "start": "1251470",
    "end": "1261390"
  },
  {
    "text": "couple of values. OK? So what happened?",
    "start": "1261390",
    "end": "1266840"
  },
  {
    "text": "Notice in the class definition\nhere, is there, this is the first thing that's got called,\nand I just called with the",
    "start": "1266840",
    "end": "1272940"
  },
  {
    "text": "value for x and the value for\ny, and it went off and did something for me.",
    "start": "1272940",
    "end": "1278659"
  },
  {
    "text": "Does that look right?",
    "start": "1278660",
    "end": "1285290"
  },
  {
    "text": "This is where you all hate it, I\nget no eye contact anywhere. Anything look odd about that?",
    "start": "1285290",
    "end": "1290520"
  },
  {
    "text": "I said. When I call this class\ndefinition, it calls init, and I give it an x and a y value.",
    "start": "1290520",
    "end": "1298250"
  },
  {
    "text": "How many arguments\ndoes init take? Three. How many arguments\ndid I give it?",
    "start": "1298250",
    "end": "1303720"
  },
  {
    "text": "Two. What in the world's going on? Well, this is a piece of\nobject-oriented coding that we",
    "start": "1303720",
    "end": "1309480"
  },
  {
    "start": "1304000",
    "end": "1548000"
  },
  {
    "text": "get to talk about\na little bit. There's this weird extra\nvariable in there called self. So what is self?",
    "start": "1309480",
    "end": "1317220"
  },
  {
    "text": "And I have to admit, I did the\nstandard thing you do every time you run across something\nyou don't know about, you go",
    "start": "1317220",
    "end": "1323210"
  },
  {
    "text": "to Wikipedia. So I went and looked up self\nin Wikipedia, and I have to read it out.",
    "start": "1323210",
    "end": "1328250"
  },
  {
    "text": "Wikipedia informs us that the\nself is the idea of a unified being, which is the source\nof an idiosyncratic",
    "start": "1328250",
    "end": "1334340"
  },
  {
    "text": "consciousness. Moreover, this self is the\nagent responsible for the thoughts and actions\nof an individual to",
    "start": "1334340",
    "end": "1340030"
  },
  {
    "text": "which they are ascribed. It is a substance which\ntherefore endures through time, thus thoughts and actions\nat different moments",
    "start": "1340030",
    "end": "1346080"
  },
  {
    "text": "of time may pertain\nto the same self. OK, how do we code that up?",
    "start": "1346080",
    "end": "1351529"
  },
  {
    "text": "Sounds like an AI problem,\nI guess right? But there's actually hidden in\nthere an important element,",
    "start": "1351530",
    "end": "1358220"
  },
  {
    "text": "and that is, when I create an\ninstance, I have to be able to get access to the things that\ncharacterize that instance.",
    "start": "1358220",
    "end": "1365350"
  },
  {
    "text": "I won't say that they're\nthoughts and emotions or things, but what characterizes\nan instance here, it's the internal parameters that specify\nwhat is going on.",
    "start": "1365350",
    "end": "1374890"
  },
  {
    "text": "So in fact what happens inside\nof an object-oriented system, and particularly in Python's\nobject-oriented system, is the following.",
    "start": "1374890",
    "end": "1382920"
  },
  {
    "text": "When we call init, it's going\nto create the instance, all",
    "start": "1382920",
    "end": "1394080"
  },
  {
    "text": "right, just as we said before. But in particular, it's\ngoing to use self to",
    "start": "1394080",
    "end": "1409810"
  },
  {
    "text": "refer to that instance. Right, so let me say this\na little differently.",
    "start": "1409810",
    "end": "1416290"
  },
  {
    "text": "I have a class definition. It's actually an object\nsomewhere. It has inside of it all those\ninternal definitions.",
    "start": "1416290",
    "end": "1422740"
  },
  {
    "text": "When I call that class\ndefinition, it calls init. Init creates a pointer\nto the instance.",
    "start": "1422740",
    "end": "1428840"
  },
  {
    "text": "And then it needs to have access\nto that, so it calls it, passing in self as the\npointer to the instance.",
    "start": "1428840",
    "end": "1436330"
  },
  {
    "text": "That is, it says it has access\nto that piece in memory, and now inside of that piece of\nmemory, I can do things like,",
    "start": "1436330",
    "end": "1442809"
  },
  {
    "text": "as you see here, define self\ndot x to be the value passed in for x.",
    "start": "1442810",
    "end": "1449220"
  },
  {
    "text": "What's that doing? It's saying where's\nself pointing to? Inside of that structure, create\na variable name x, and",
    "start": "1449220",
    "end": "1455030"
  },
  {
    "text": "a value associated with it. Notice what I also do here, I\ncreate self dot y, give it a value, and then, oh cool, I\ncan also set up what's the",
    "start": "1455030",
    "end": "1462809"
  },
  {
    "text": "radius and angle for this point,\nby just doing a little bit of work.",
    "start": "1462810",
    "end": "1469020"
  },
  {
    "text": "OK, in fact if you look at what\nit does there, just put the pointer over here, it says,\nget the value of x that",
    "start": "1469020",
    "end": "1476095"
  },
  {
    "text": "I just stored away, square it,\nadd it to the value of y squared that I just stored away,\nand then take square",
    "start": "1476095",
    "end": "1481900"
  },
  {
    "text": "root, pass it back out. So I just computed the radius\nof that particular thing. Right? Compute the angle the same\nway, just using the",
    "start": "1481900",
    "end": "1487780"
  },
  {
    "text": "appropriate things. So the idea is that self\nwill always point to",
    "start": "1487780",
    "end": "1494220"
  },
  {
    "text": "the particular instance. Now you might say, why? Why do it this way?",
    "start": "1494220",
    "end": "1500710"
  },
  {
    "text": "Well, basically because it was\na design choice when the creators of Python decided to\ncreate the language, they basically said, we're always\ngoing to have an explicit",
    "start": "1500710",
    "end": "1507890"
  },
  {
    "text": "pointer to the instance. Some other object-oriented\nprogramming languages do not provide that pointer.",
    "start": "1507890",
    "end": "1513940"
  },
  {
    "text": "This is kind of nice in my view,\nI don't know if John, you'd agree, but this\nis explicit. It actually lets you see how to\nget access to that pointer",
    "start": "1513940",
    "end": "1519590"
  },
  {
    "text": "so you know what you're\nreferring to. But it's simply design choice. So another way saying it again\nis, when I call the class",
    "start": "1519590",
    "end": "1526260"
  },
  {
    "text": "definition, by default I'm going\nto look to see is there an init method there, and if\nthere is, I'm going to use it.",
    "start": "1526260",
    "end": "1531640"
  },
  {
    "text": "First argument by convention is\nalways self, because it has to point to the instance, and\nthen I pass, in this case,",
    "start": "1531640",
    "end": "1537200"
  },
  {
    "text": "another couple of\narguments in. OK, now, if I actually do this,\nand I'm going to show",
    "start": "1537200",
    "end": "1543550"
  },
  {
    "text": "you the example, I just, what\ndid I type over there, I got p was a c point.",
    "start": "1543550",
    "end": "1548740"
  },
  {
    "start": "1548000",
    "end": "1630000"
  },
  {
    "text": "If I want to get values back\nout, I could in fact simply send to that instance a message,\nin this case I could",
    "start": "1548740",
    "end": "1555639"
  },
  {
    "text": "say p dot x. In fact let's do it. If I do that over here -- aha --\nit gets me back the value.",
    "start": "1555640",
    "end": "1568060"
  },
  {
    "text": "Now let me spend just a second\nto say, what was this actually doing? p is an instance.",
    "start": "1568060",
    "end": "1573770"
  },
  {
    "text": "It knows, or has stored away,\nand in fact let's look at it, if we look at what p does,\np says -- it says reading",
    "start": "1573770",
    "end": "1582070"
  },
  {
    "text": "through a little bit of this\nstuff here, it says -- it's a kind of Cartesian point, it's an\ninstance, there's actually",
    "start": "1582070",
    "end": "1588929"
  },
  {
    "text": "the memory location that it's\nat, that's why I say this idea of it's an instant at\na specific spot.",
    "start": "1588930",
    "end": "1594559"
  },
  {
    "text": "It knows that it came from\nthis class, c point. So when I type, I'm sorry, I\nshouldn't say type, when I",
    "start": "1594560",
    "end": "1601580"
  },
  {
    "text": "write, although I would have\ntyped it, p dot x, here's what basically happens. p is an\ninstance, it's being sent a",
    "start": "1601580",
    "end": "1608210"
  },
  {
    "text": "message, in this case the\nmessage x, it says I want the x-value back out. p knows that\nit is a kind of Cartesian",
    "start": "1608210",
    "end": "1615750"
  },
  {
    "text": "point, it actually goes and\ngets, if you like, the class definition up here.",
    "start": "1615750",
    "end": "1624310"
  },
  {
    "text": "And is able to then say,\ninside of that class definition, find\nthe value of x. All right, now, that's one of\nthe ways we could get things",
    "start": "1624310",
    "end": "1633350"
  },
  {
    "text": "out, but in fact it's really\nnot a good way. A better way to do this would\nbe the following.",
    "start": "1633350",
    "end": "1640290"
  },
  {
    "text": "If I could type.",
    "start": "1640290",
    "end": "1647080"
  },
  {
    "text": "What did I just do there? One of the things that I\ndefined inside my class definition here was an\ninternal method.",
    "start": "1647080",
    "end": "1656850"
  },
  {
    "text": "That method has a name,\nobviously, and what does it do? It's going to go off and get the\nvalues of x and y attached",
    "start": "1656850",
    "end": "1662490"
  },
  {
    "text": "to this thing and return\nthem to me. And that's one of the\nthings I want. I would like my classes\nto have methods.",
    "start": "1662490",
    "end": "1677110"
  },
  {
    "text": "So you can access the values\nof the specific instance.",
    "start": "1677110",
    "end": "1689700"
  },
  {
    "text": "Now, this is still a nuance, why\nwould I like to do this? Well this is leading up to why\nI want to gather things together in classes\nto start with.",
    "start": "1689700",
    "end": "1696470"
  },
  {
    "text": "It's perfectly legal in Python\nto type that in and get the value back out.",
    "start": "1696470",
    "end": "1701550"
  },
  {
    "text": "As I said, I would prefer to\ndo something that uses an accessor that I just wrote.",
    "start": "1701550",
    "end": "1708740"
  },
  {
    "text": "So p dot Cartesian is a kind\nof accessor, it's getting",
    "start": "1708740",
    "end": "1715460"
  },
  {
    "text": "access to the data. And here's why I'd\nlike to have it.",
    "start": "1715460",
    "end": "1722190"
  },
  {
    "text": "Right now, I still have the\nproblem that those classes, those instances of classes,\nare exposed.",
    "start": "1722190",
    "end": "1727730"
  },
  {
    "text": "What do I mean by that? Here's something I could do.",
    "start": "1727730",
    "end": "1737980"
  },
  {
    "text": "Let's do it in fact.",
    "start": "1737980",
    "end": "1747480"
  },
  {
    "text": "OK. What point in the plane\ndoes p now point to?",
    "start": "1747480",
    "end": "1753960"
  },
  {
    "text": "X-axis is foobar y-axis\nought to be foobass something else, right? I know it looks like a simple\nand silly little example, but",
    "start": "1753960",
    "end": "1761660"
  },
  {
    "text": "at the moment, I still have\nthe ability to go in and change the values of the\nparameters by that little",
    "start": "1761660",
    "end": "1767650"
  },
  {
    "text": "definition. And this makes no sense. And this is because I don't have\nsomething I would really",
    "start": "1767650",
    "end": "1772670"
  },
  {
    "text": "like to have, which\nis data hiding.",
    "start": "1772670",
    "end": "1780520"
  },
  {
    "text": "So you'll see lots of\ndefinitions of this. I think of data hiding as\nbasically saying, one can only",
    "start": "1780520",
    "end": "1789160"
  },
  {
    "text": "access instance values, or,\nwe'll call them that, instance",
    "start": "1789160",
    "end": "1794650"
  },
  {
    "text": "values through defined\nmethods.",
    "start": "1794650",
    "end": "1806520"
  },
  {
    "text": "And that's a wonderful thing to\nhave because it gives you that modularity, that\nencapsulation that basically says, when I create a point, the\nonly way I can get at the",
    "start": "1806520",
    "end": "1814100"
  },
  {
    "text": "values, is by using one of the\ndefined methods, in this case it could be Cartesian, and get\nall the pieces of that.",
    "start": "1814100",
    "end": "1820049"
  },
  {
    "text": "Unfortunately, Python\ndoesn't do this.",
    "start": "1820050",
    "end": "1828810"
  },
  {
    "text": "Which is really a shame. Or another way of saying it\nis, please don't do that.",
    "start": "1828810",
    "end": "1834860"
  },
  {
    "text": "Don't go in and change the\nvalues of things by using the direct access. Have the computational hygiene,\nif you like, to only",
    "start": "1834860",
    "end": "1841720"
  },
  {
    "text": "go through accessors, only go\nthrough methods that are actually provided to\nyou as you do this.",
    "start": "1841720",
    "end": "1846910"
  },
  {
    "text": "I actually don't remember,\nJohn, C++ does have data hiding, I think, right?",
    "start": "1846910",
    "end": "1852000"
  },
  {
    "text": "PROFESSOR 2: And not only\nshouldn't you change it, you",
    "start": "1852000",
    "end": "1857420"
  },
  {
    "text": "shouldn't even read it. PROFESSOR: Exactly. What you're going to see in a\nsecond I violated in some of my code, which Professor Guttag\nis going to yell at me",
    "start": "1857420",
    "end": "1862740"
  },
  {
    "text": "shortly because I should have\ndone it through accessors, but, he's exactly right. A good, hygienic way of doing\nthis is, not only do I not go",
    "start": "1862740",
    "end": "1869210"
  },
  {
    "text": "in and change things except\nthrough a pre-defined method, I shouldn't read it other than\nthrough a pre-defined method. I should use Cartesian\nor polar to pull out",
    "start": "1869210",
    "end": "1876440"
  },
  {
    "text": "those pieces of it.",
    "start": "1876440",
    "end": "1883169"
  },
  {
    "text": "Once I've got that, you notice\nI can now define a polar point, same way.",
    "start": "1883170",
    "end": "1890830"
  },
  {
    "text": "Notice I've now solved one of my\nproblems, which is, in each one of these cases here, I'm\ncreating both x y and radius",
    "start": "1890830",
    "end": "1898090"
  },
  {
    "text": "angle values inside of there. If it's in polar form I passed\nin a radius and angle and I'll",
    "start": "1898090",
    "end": "1903309"
  },
  {
    "text": "compute what the x-\nand y- value is. If its in Cartesian form I'll\npass in an x and y and compute",
    "start": "1903310",
    "end": "1908550"
  },
  {
    "text": "what a radius and angle is. But it now says that in any, in\nno matter what kind of form",
    "start": "1908550",
    "end": "1913700"
  },
  {
    "text": "I made it from, I can get out\nthat kind of information. So for example I defined p,\nremember back over here, as a",
    "start": "1913700",
    "end": "1920110"
  },
  {
    "text": "Cartesian point, but\nI can actually ask for its polar form.",
    "start": "1920110",
    "end": "1927770"
  },
  {
    "text": "It's there accessible to me. OK, this is great. Just to drive home one more\nreason why I don't want to",
    "start": "1927770",
    "end": "1934360"
  },
  {
    "text": "have changes to the\nvalues other than through pre-defined things. Notice what happens if\nI do the following.",
    "start": "1934360",
    "end": "1943169"
  },
  {
    "text": "I could say I want to\nchange the radius of this particular thing.",
    "start": "1943170",
    "end": "1948669"
  },
  {
    "text": "OK, perfectly reasonable\nthing to do. And if I go look at the polar\nform of this, OK, good, looks",
    "start": "1948670",
    "end": "1959110"
  },
  {
    "text": "right, right? It's now got a different radius,\nsame angle, so I just changed the radius of it.",
    "start": "1959110",
    "end": "1964730"
  },
  {
    "text": "Oh, but what happened to\nthe Cartesian form. I should have done this\nearlier by typing the Cartesian form earlier, so let\nme go back to where I was,",
    "start": "1964730",
    "end": "1970480"
  },
  {
    "text": "sorry for that, let me go\nmake this a 1 again.",
    "start": "1970480",
    "end": "1978020"
  },
  {
    "text": "If I look at the Cartesian, oh,\nI did have the Cartesian form, don't mind me while I\nmutter to myself here quietly.",
    "start": "1978020",
    "end": "1985030"
  },
  {
    "text": "Yeah, that's right, I did\nscrew that up badly. All right, we try one more time,\nhere we go, let's try",
    "start": "1985030",
    "end": "1990630"
  },
  {
    "text": "one more time. We'll make p a new point, ok?",
    "start": "1990630",
    "end": "2003169"
  },
  {
    "text": "There's the Cartesian\nrepresentation of it, which is right, (1,2). Here's the polar representation\nof it, some",
    "start": "2003170",
    "end": "2010690"
  },
  {
    "text": "random set of numbers\nwhich makes sense. If I now say, I'm going to go\nahead and change the radius of",
    "start": "2010690",
    "end": "2017090"
  },
  {
    "text": "this, something, my polar form\ndid it right, but what",
    "start": "2017090",
    "end": "2027750"
  },
  {
    "text": "happened to the Cartesian\nform?",
    "start": "2027750",
    "end": "2033420"
  },
  {
    "text": "Ah yes, didn't change. Which makes sense if you\nthink of my code.",
    "start": "2033420",
    "end": "2038540"
  },
  {
    "text": "I didn't have anything in there\nthat says, if you change one of these values, other\nvalues depend on it, and I want to make that\nchange to it.",
    "start": "2038540",
    "end": "2045000"
  },
  {
    "text": "So this is one more example of\nstressing why I only want to come access to the instances\nthrough defined methods.",
    "start": "2045000",
    "end": "2052220"
  },
  {
    "text": "Because I could've built that\nin, it says if you change the value of this thing, by the\nway you need to change recompute those other values in\norder to make this hold up.",
    "start": "2052220",
    "end": "2059829"
  },
  {
    "start": "2059000",
    "end": "2265000"
  },
  {
    "text": "OK, so what else do I have\nthen in my little class definitions here?",
    "start": "2059830",
    "end": "2065210"
  },
  {
    "text": "So, I've got an init\nin both cases. I don't have to put an init in,\nbut it's again, usually a",
    "start": "2065210",
    "end": "2071319"
  },
  {
    "text": "good idea to put that\nin originally. I've got and init that says,\nwhen you create an instance, here's what you do. Notice that that typically also\ndefines for me what the",
    "start": "2071320",
    "end": "2079940"
  },
  {
    "text": "internal variables are, what the\ninternal characteristics of the class are going to be. Again, I could have some other\nfunctions to compute things,",
    "start": "2079940",
    "end": "2086510"
  },
  {
    "text": "but this is typically\nthe place where I'm going to put them in. So this is giving me now that\ntemplate, better way of saying it, all right, a template\nnow, for a point is",
    "start": "2086510",
    "end": "2093349"
  },
  {
    "text": "x, y, radius, angle. And I can see that in\nthose pieces there. And then I've got some things\nthat get me back out",
    "start": "2093350",
    "end": "2100560"
  },
  {
    "text": "information about them. But I got a couple of other of\nthese strange looking things in there with underbars\nto them.",
    "start": "2100560",
    "end": "2105990"
  },
  {
    "text": "So let's look at what some of\nthe traditional methods for classes are in Python.",
    "start": "2105990",
    "end": "2111230"
  },
  {
    "text": "I have init. This is what's actually going\nto create the instance,",
    "start": "2111230",
    "end": "2122320"
  },
  {
    "text": "instantiate it, create what\nthe set of variable values are for it. OK, I have another\none in there,",
    "start": "2122320",
    "end": "2127630"
  },
  {
    "text": "underbar, underbar, str. Anybody have a sense of\nwhat that's doing?",
    "start": "2127630",
    "end": "2138480"
  },
  {
    "text": "What's s -- sorry, I heard\nsomething, sorry go ahead. STUDENT: Display what I have.",
    "start": "2138480",
    "end": "2144410"
  },
  {
    "text": "PROFESSOR: Displaying what\nI have. Thank you. Yeah, I was going to say, think\nabout what does str do, in general? It converts things into\na string type.",
    "start": "2144410",
    "end": "2150720"
  },
  {
    "text": "How do we typically\nprint things, we convert them to strings. So str is basically telling\nus how we want to",
    "start": "2150720",
    "end": "2159080"
  },
  {
    "text": "have it printed out.",
    "start": "2159080",
    "end": "2168070"
  },
  {
    "text": "OK, in fact if we look at this,\nif I say, print of p, it",
    "start": "2168070",
    "end": "2175950"
  },
  {
    "text": "prints it out in that form. Now this is actually a poor\nway to do it, because you might say, well, it's just the\nlist. But remember, it wasn't a list. What does it do?",
    "start": "2175950",
    "end": "2181090"
  },
  {
    "text": "It says, if I want to print\nout something I built in Cartesian form up here, says,\nagain, I'm going to pass it in",
    "start": "2181090",
    "end": "2188240"
  },
  {
    "text": "a pointer to the instance, that\nself thing, and then I'm going to return a string that\nI combine together with an",
    "start": "2188240",
    "end": "2194670"
  },
  {
    "text": "open and close paren, a comma in\nthe middle, and getting the x-value and the y-value and\nconverting them into strings",
    "start": "2194670",
    "end": "2201319"
  },
  {
    "text": "before I put the whole\nthing together. So it gives me basically my\nprinted representation.",
    "start": "2201320",
    "end": "2206430"
  },
  {
    "text": "OK. What else do I have in here? Well, I have cmp.",
    "start": "2206430",
    "end": "2214099"
  },
  {
    "text": "My handout's wrong, which I\ndiscovered this morning after I printed them all out. So the version I'd like you to\nhave uses, that, greater than",
    "start": "2214100",
    "end": "2227529"
  },
  {
    "text": "rather than equals that\nI had in my handout. What's cmp doing as a method?",
    "start": "2227530",
    "end": "2234190"
  },
  {
    "text": "Yeah? STUDENT: Comparing values? PROFESSOR: Yeah, comparing\nvalues, right? And again, it's similar\nto what cmp would do",
    "start": "2234190",
    "end": "2240160"
  },
  {
    "text": "generically in Python. It's a way of doing\ncomparisons. So this is doing comparisons.",
    "start": "2240160",
    "end": "2249570"
  },
  {
    "text": "Now, I put a version up there,\nI have no idea if this is the right way to do comparisons\nor not. I said both the x- and y-\ncoordinates are bigger, then",
    "start": "2249570",
    "end": "2255589"
  },
  {
    "text": "I'm going to return\nsomething to it. And I think in the polar one I\nsaid, if, what did I do there,",
    "start": "2255590",
    "end": "2260760"
  },
  {
    "text": "I said, yeah, again if the x\nand y are greater than the other one, I'm going to\nreturn them to it. The version in the handout, what\nwas that actually doing?",
    "start": "2260760",
    "end": "2270400"
  },
  {
    "start": "2265000",
    "end": "2587000"
  },
  {
    "text": "You could look at the handout.",
    "start": "2270400",
    "end": "2276900"
  },
  {
    "text": "Well I think it was comparing,\nare they the same? So that would actually be\nanother method I could put in.",
    "start": "2276900",
    "end": "2288619"
  },
  {
    "text": "Underbar underbar eq,\nunderbar underbar. Would be a default or generic\nway of doing, are",
    "start": "2288620",
    "end": "2294109"
  },
  {
    "text": "these things the same? OK, in each case, what these\nthings are doing, is they're",
    "start": "2294110",
    "end": "2303050"
  },
  {
    "text": "doing, what sometimes gets\nreferred to as operator",
    "start": "2303050",
    "end": "2312090"
  },
  {
    "text": "overloading. I know you don't remember that\nfar back, but in about the second lecture I made a joke of\nProfessor Guttag which, you",
    "start": "2312090",
    "end": "2318690"
  },
  {
    "text": "know, you didn't laugh at, he\ndidn't laugh at, that's okay. In which I said, you know, I\ndidn't like the fact that things like plus are overloaded,\nbecause you can",
    "start": "2318690",
    "end": "2325789"
  },
  {
    "text": "use plus to add strings, you can\nuse plus to add numbers, you can use plus\nto add floats. And he quite correctly, because\nhe's more senior than",
    "start": "2325790",
    "end": "2332430"
  },
  {
    "text": "I am, more experienced\nthan I am, said it's actually a good thing. And he's right.",
    "start": "2332430",
    "end": "2337440"
  },
  {
    "text": "Most of the time. The reason I say that is, by\nhaving operator overloading I can use 1 generic interface\nto all of the objects",
    "start": "2337440",
    "end": "2346150"
  },
  {
    "text": "that I want to use. So it makes sense to be able to\nsay, look for many methods I do want to have a way of doing\ncomparison, and I don't",
    "start": "2346150",
    "end": "2352869"
  },
  {
    "text": "have to remember, at top level,\nwhat the name of the comparison method was. I can simply use the built-in\nSc -- about to say Scheme",
    "start": "2352870",
    "end": "2360780"
  },
  {
    "text": "again -- the built-in Python\ncomparison operation. Say, are these 2 things\nthe same?",
    "start": "2360780",
    "end": "2365790"
  },
  {
    "text": "Same thing with cmp, that's just\nsaying greater than, and greater than now can apply to\nstrings, it can apply to floats, it could apply to\npoints, it could add other",
    "start": "2365790",
    "end": "2372760"
  },
  {
    "text": "pieces into it. So there are some downsides, in\nmy view, to doing operator overloading, but there's\nsome real pluses.",
    "start": "2372760",
    "end": "2378010"
  },
  {
    "text": "And the main one is, I get to\njust decide, how do I want to use this, and call it. Yes, ma'am?",
    "start": "2378010",
    "end": "2383049"
  },
  {
    "text": "STUDENT: [INAUDIBLE] PROFESSOR: Right, cmp other,\nso how would I call this?",
    "start": "2383050",
    "end": "2392260"
  },
  {
    "text": "A good question. Here's the way I\nwould call it. Let me give you, I'm going to\ncreate, a polar point, I'm",
    "start": "2392260",
    "end": "2399400"
  },
  {
    "text": "going to call it q, and we'll\ngive it some random values. OK, and now I want to know,\nis p greater than q?",
    "start": "2399400",
    "end": "2409630"
  },
  {
    "text": "Now happens to return true here,\nbut the question is, where's the other come from? P is a particular object type.",
    "start": "2409630",
    "end": "2416200"
  },
  {
    "text": "When I try and evaluate that\nexpression of greater than, is going to go into the class\nto say greater",
    "start": "2416200",
    "end": "2422770"
  },
  {
    "text": "than is a comp method. So let me say it very\ncarefully here. When I evaluate, yeah, when\nI evaluate this, p is an",
    "start": "2422770",
    "end": "2432960"
  },
  {
    "text": "instance of a point, in this\ncase it was actually a Cartesian point, it sends a\nmessage to the instance, which",
    "start": "2432960",
    "end": "2440580"
  },
  {
    "text": "sends a message to the\nclass, to get the cmp method from the class.",
    "start": "2440580",
    "end": "2446880"
  },
  {
    "text": "And that then gets applied to\nitself, just p, and one other",
    "start": "2446880",
    "end": "2451930"
  },
  {
    "text": "argument, which is the second\npiece there, so other points to the second argument\nthat was present.",
    "start": "2451930",
    "end": "2457890"
  },
  {
    "text": "OK. John? PROFESSOR 2: -- other,\nit could have said who or zort or --",
    "start": "2457890",
    "end": "2463480"
  },
  {
    "text": "PROFESSOR: Yeah, sorry, that\nwas part of the question, I could have a picked foobar could\nput anything in here. It's simply, notice the form of\nit here is, it's going to",
    "start": "2463480",
    "end": "2471119"
  },
  {
    "text": "take two arguments, and\nyou're right, self is the original instance. This says, I need a second\nargument to it, and that",
    "start": "2471120",
    "end": "2476299"
  },
  {
    "text": "second argument better be\na point so I can do the comparison. Yes ma'am? STUDENT: [INAUDIBLE]",
    "start": "2476300",
    "end": "2483270"
  },
  {
    "text": "PROFESSOR: What do you\nthink happens?",
    "start": "2483270",
    "end": "2488290"
  },
  {
    "text": "Sorry, the question was, what\nhappens if I said p is less than q? Got it, yes?",
    "start": "2488290",
    "end": "2494180"
  },
  {
    "text": "Seems pretty obvious, right?",
    "start": "2494180",
    "end": "2500329"
  },
  {
    "text": "Next time I bring the\nright glasses.",
    "start": "2500330",
    "end": "2508810"
  },
  {
    "text": "It's still calling cmp, but it's\nknowing that cmp is just reversing the order\nof the arguments. Ok, which makes sense.",
    "start": "2508810",
    "end": "2514740"
  },
  {
    "text": "If greater than takes, expects,\narguments in order x y, less than simply takes\ngreater than, but with the",
    "start": "2514740",
    "end": "2521510"
  },
  {
    "text": "arguments reversed. OK, so I don't have to, it's a\ngreat question, I don't have to create a second\none for cmp. Cmp is just saying, is this\nbigger than, and if I want to",
    "start": "2521510",
    "end": "2528859"
  },
  {
    "text": "reverse it, it goes\nthe other way. Question? STUDENT: [INAUDIBLE] PROFESSOR: Or equal equal?",
    "start": "2528860",
    "end": "2537610"
  },
  {
    "text": "Let's try equal equal because\nI didn't define it here.",
    "start": "2537610",
    "end": "2545310"
  },
  {
    "text": "It says they're not the same,\nand boy, I need help on this one, John, it's not, there's\nno pre-defined eq in there.",
    "start": "2545310",
    "end": "2552500"
  },
  {
    "text": "PROFESSOR 2: So, what cmp does,\nand maybe this isn't exactly the right way to write\nis, is cmp actually returns 1",
    "start": "2552500",
    "end": "2560599"
  },
  {
    "text": "of 3 values. A 0, minus a positive value,\nzero or a negative value,",
    "start": "2560600",
    "end": "2568759"
  },
  {
    "text": "depending upon whether\nit's less than, equal, or greater than. PROFESSOR: Right. PROFESSOR2: So it's not really\na Boolean-valued function.",
    "start": "2568760",
    "end": "2576150"
  },
  {
    "text": "It has 3 possible values\nit could return. PROFESSOR: And so in this case,\nit's using the same",
    "start": "2576150",
    "end": "2581840"
  },
  {
    "text": "piece, but it's returning that\nmiddle value that says they're actually the same.",
    "start": "2581840",
    "end": "2587020"
  },
  {
    "text": "Right, one the things you can\nsee now is, we start building up classes, we get\nthese methods. So you can actually say, how\ndo I know which methods are",
    "start": "2587020",
    "end": "2593120"
  },
  {
    "text": "associated with the class? For that, we can call dir.",
    "start": "2593120",
    "end": "2600020"
  },
  {
    "text": "And what it does, is it gives\nme back a listing of all the",
    "start": "2600020",
    "end": "2605220"
  },
  {
    "text": "things, all the methods, that\nare associated with it. Some of which I built:\ncmp, init, str.",
    "start": "2605220",
    "end": "2612740"
  },
  {
    "text": "And there, notice, are the\ninternal definitions and there are the internal variables. And in fact I should've\nsaid, we often call",
    "start": "2612740",
    "end": "2618850"
  },
  {
    "text": "those things fields. So inside of an instance,\nassociated with an instance,",
    "start": "2618850",
    "end": "2625880"
  },
  {
    "text": "we have both methods\nand fields.",
    "start": "2625880",
    "end": "2631630"
  },
  {
    "text": "These are both altogether\ncalled attributes of the instance.",
    "start": "2631630",
    "end": "2636710"
  },
  {
    "text": "And then there were a couple of\nother ones in there that I hadn't actually dealt with. The reason I want to point this\nout to you is, if we go",
    "start": "2636710",
    "end": "2642809"
  },
  {
    "text": "back up to the kinds of data\nobjects we started with, floats, ints, strings, they\nactually behave the same way.",
    "start": "2642810",
    "end": "2649890"
  },
  {
    "text": "They are instances of a class,\nand associated with that class is a set of methods. So for example, I can say,\nwhat are all the methods",
    "start": "2649890",
    "end": "2659990"
  },
  {
    "text": "associated with the number,\nor the integer 1? And you probably recognize some\nof them in there, right,",
    "start": "2659990",
    "end": "2666500"
  },
  {
    "text": "absolute value, add, comp, cors,\nwell we didn't do cors, we did a bunch of\nother things.",
    "start": "2666500",
    "end": "2672880"
  },
  {
    "text": "It could also say, what are the\nmethods associated with",
    "start": "2672880",
    "end": "2678339"
  },
  {
    "text": "the string, 1. I'm sure you can quickly\ngraph it, but notice",
    "start": "2678340",
    "end": "2684220"
  },
  {
    "text": "they aren't the same. That makes sense. We have some set of things we\nwant to do with strings, and",
    "start": "2684220",
    "end": "2690120"
  },
  {
    "text": "different set of things we\nwant to do with numbers. But underlying Python\nis the same idea. These are instances of a class,\nand associated with",
    "start": "2690120",
    "end": "2697960"
  },
  {
    "text": "that class are a set\nof methods, things that I can deal with. So this is a handy way of being\nable to see, what are in",
    "start": "2697960",
    "end": "2703640"
  },
  {
    "text": "fact the methods that are\navailable if I don't happen to remember them, and want\nto go back to them.",
    "start": "2703640",
    "end": "2708890"
  },
  {
    "text": "OK, I want to spend the last few\nminutes just showing you a couple of other things that\nwe can do in here.",
    "start": "2708890",
    "end": "2715710"
  },
  {
    "text": "Let me see where I want\nto go with this. So let's add one more\npiece to this.",
    "start": "2715710",
    "end": "2723070"
  },
  {
    "text": "OK, now that I've got points,\nI might want to do something with points. So an easy thing to do in planar\ngeometry is I want to",
    "start": "2723070",
    "end": "2729700"
  },
  {
    "text": "make a line segment. It's got a start point,\nit's got an end point. Right, if you want to think\nof it back over here.",
    "start": "2729700",
    "end": "2740190"
  },
  {
    "text": "There's a line segment, it's\ngot a starting point and ending point. Well, I can do the same thing.",
    "start": "2740190",
    "end": "2745830"
  },
  {
    "text": "And the reason I want to use\nthis as an example is, here's my little definition\nof segment.",
    "start": "2745830",
    "end": "2751020"
  },
  {
    "text": "Again, it's got an initializer,\nor an instance creator, right there.",
    "start": "2751020",
    "end": "2756290"
  },
  {
    "text": "Takes a start and an end point,\njust going to bind local variable names start\nand end to those pieces.",
    "start": "2756290",
    "end": "2761930"
  },
  {
    "text": "But notice now, those aren't\njust simple things like numbers, those are\nactually points.",
    "start": "2761930",
    "end": "2768190"
  },
  {
    "text": "And that's where the modularity\ncomes in. Now I have the ability to say,\nI've got a new class, I can create instances of a line\nsegment, and it's elements are",
    "start": "2768190",
    "end": "2775720"
  },
  {
    "text": "themselves instances of points. OK? And then what might I want\nto do with the segment?",
    "start": "2775720",
    "end": "2781910"
  },
  {
    "text": "I might want to get the\nlength of the segment. And I know it's kind of, you can\nsee it on your handout, it has the rest of the\npieces over here.",
    "start": "2781910",
    "end": "2788310"
  },
  {
    "text": "Ok, what's the geometry say? The length of a line segment? Well, it's Pythagoras, right? I take the difference in the\nx-values, squared, the",
    "start": "2788310",
    "end": "2794770"
  },
  {
    "text": "difference in the y-values,\nsquared, add them up, take the square root of that. Notice what this says to do.",
    "start": "2794770",
    "end": "2801020"
  },
  {
    "text": "It says if I want to get the\nlength of a segment, going to pass in that instance, it says\nfrom that instance, get the",
    "start": "2801020",
    "end": "2809140"
  },
  {
    "text": "start point, that's the\nthing I just found. And then from that start\npoint, get the x-value.",
    "start": "2809140",
    "end": "2816869"
  },
  {
    "text": "Same thing, from that instance,\nget the endpoint, from that end point get\nthe x-value, square.",
    "start": "2816870",
    "end": "2822859"
  },
  {
    "text": "Add the same thing to the\ny-values, squared, take the square root. Yes, ma'am?",
    "start": "2822860",
    "end": "2827940"
  },
  {
    "text": "STUDENT: So are you entering a\ntuple in for start and end?",
    "start": "2827940",
    "end": "2833869"
  },
  {
    "text": "PROFESSOR: No. I'm entering -- well,\nlet's look at the example right down here. In fact, let me uncomment\nit so we can look at it.",
    "start": "2833870",
    "end": "2840950"
  },
  {
    "text": "All right. I'm going to uncomment that. So notice what I'm\ngoing to do. I'm going to build, this case,\na Cartesian point, I'm going",
    "start": "2840950",
    "end": "2848804"
  },
  {
    "text": "to build a second Cartesian\npoint, and my segment passes in those class instances.",
    "start": "2848804",
    "end": "2855080"
  },
  {
    "text": "All right, they're not tuples,\nthey're simply an instance with some structuring. And in fact if I go off and\nrun this, OK, what I was",
    "start": "2855080",
    "end": "2862830"
  },
  {
    "text": "printing here was s 1 dot\nlength, and that's --",
    "start": "2862830",
    "end": "2868700"
  },
  {
    "text": "What is it doing? S 1 is a segment. It has inside of it\npointers to 2 points which are instances.",
    "start": "2868700",
    "end": "2875470"
  },
  {
    "text": "And when I call length on this,\nit takes that starting point, sends it the message\nsaying give me your",
    "start": "2875470",
    "end": "2881590"
  },
  {
    "text": "x-coordinate, takes the\nendpoint, says give me your x-coordinate, and add\nthem together.",
    "start": "2881590",
    "end": "2886920"
  },
  {
    "text": "Now, I prefaced this a few\nminutes ago about saying Professor Guttag wasn't\ngoing to like me. He doesn't like me generally,\nbut that's between he and I.",
    "start": "2886920",
    "end": "2892299"
  },
  {
    "text": "He beats me regularly at\ntennis, which is why I don't like him. Sorry, John. This is being taped, which\nis really good, isn't it?",
    "start": "2892300",
    "end": "2898760"
  },
  {
    "text": "So why am I saying that? I said that if I was really\nhygienic, and you can now",
    "start": "2898760",
    "end": "2903950"
  },
  {
    "text": "wonder about how often\ndo I shower? If I was really hygienic. I would only ever access the\nvalues through a method.",
    "start": "2903950",
    "end": "2912880"
  },
  {
    "text": "And I'm cheating here, right,\nbecause what am I doing? I'm taking advantage of the fact\nthat start is going to be",
    "start": "2912880",
    "end": "2919079"
  },
  {
    "text": "a point, and I'm just directly\nsaying, give me your x-value. So I don't know don't, John, I\nwould argue if I'd written",
    "start": "2919080",
    "end": "2924880"
  },
  {
    "text": "this better, I would have had a\nmethod that returned the x- and the y- value, and it\nwould be cleaner to go after it that way.",
    "start": "2924880",
    "end": "2930920"
  },
  {
    "text": "This is nice shorthand, all\nright, but it's something that in fact I probably would\nwant to do differently.",
    "start": "2930920",
    "end": "2937490"
  },
  {
    "text": "Why would I want to\ndo it differently? Imagine that I've written\ncode like this, written a bunch of code.",
    "start": "2937490",
    "end": "2944119"
  },
  {
    "text": "And I originally decided I was\ngoing to have as points, it's going to have internal values\nof an x and a y.",
    "start": "2944120",
    "end": "2949740"
  },
  {
    "text": "And then somewhere along the\nline, I decide to store things in a different representation. If I had had a clean interface,\nthat I had a",
    "start": "2949740",
    "end": "2957580"
  },
  {
    "text": "specific method to get those\nvalues out, I wouldn't have to change anything. Other than that interface.",
    "start": "2957580",
    "end": "2964500"
  },
  {
    "text": "But here, if I decide I'm going\nto store things not in x and y, but with some other set\nof names, for example, I've",
    "start": "2964500",
    "end": "2970060"
  },
  {
    "text": "gotta go back into these pieces\nof code that use the points, and change them. So I've lost modularity.",
    "start": "2970060",
    "end": "2975530"
  },
  {
    "text": "I'd really like to have that\nmodularity that says, I'm only going to get access to the\nvalues, not by calling their",
    "start": "2975530",
    "end": "2981860"
  },
  {
    "text": "names, but by calling some\nspecific method to get access to their names. You could argue, well, x is\nin some sense inherently a",
    "start": "2981860",
    "end": "2988694"
  },
  {
    "text": "method, but it's not nearly as\nclean as what I would like. And the last piece I want you to\nsee here, and then I'll let",
    "start": "2988695",
    "end": "2994220"
  },
  {
    "text": "you go is, notice now how that\nencapsulation, that binding",
    "start": "2994220",
    "end": "2999349"
  },
  {
    "text": "things together has\nreally helped me. Given the abstraction, the\nnotion of a point as an instance with some\nvalues, I can now",
    "start": "2999350",
    "end": "3005599"
  },
  {
    "text": "start building segments. And I could now extend that. I could have, you know,\npolygonal figures, that are a sequence of segments.",
    "start": "3005600",
    "end": "3011690"
  },
  {
    "text": "And I would be able to simply\nbury away the details of how those other instances are\ncreated from how I want to use",
    "start": "3011690",
    "end": "3017220"
  },
  {
    "text": "them by simply calling methods\non the classes. We'll come back to\nthis next time.",
    "start": "3017220",
    "end": "3023119"
  },
  {
    "start": "3023120",
    "end": "3024158"
  }
]