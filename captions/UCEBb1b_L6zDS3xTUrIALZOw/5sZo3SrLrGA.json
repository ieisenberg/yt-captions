[
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5310"
  },
  {
    "text": "Your support will help\nMIT OpenCourseWare continue to offer high quality\neducational resources for free.",
    "start": "5310",
    "end": "11610"
  },
  {
    "text": "To make a donation or to\nview additional materials from hundreds of MIT courses,\nvisit MIT OpenCourseWare",
    "start": "11610",
    "end": "19026"
  },
  {
    "text": "at ocw.mit.edu. CHARLES LEISERSON:\nHey, everybody.",
    "start": "19026",
    "end": "24410"
  },
  {
    "text": "Let's get started here. ",
    "start": "24410",
    "end": "31000"
  },
  {
    "text": "So last time we had the\nskull and crossbones, this time we're going to have\ndouble skull and crossbones.",
    "start": "31000",
    "end": "38280"
  },
  {
    "text": "This stuff is really\nhard and really fun. And we're going to talk about\nsynchronization without locks.",
    "start": "38280",
    "end": "44700"
  },
  {
    "text": " And to start out, I want to\ntalk about memory models.",
    "start": "44700",
    "end": "52080"
  },
  {
    "text": "And in particular, the\nmost important memory model from a theoretical point of\nview, which is sequential",
    "start": "52080",
    "end": "58410"
  },
  {
    "text": "consistency.  And to introduce it, I\nwant to use an example",
    "start": "58410",
    "end": "67470"
  },
  {
    "text": "to introduce the notion\nof a memory model. So suppose you have\ntwo variables, a",
    "start": "67470",
    "end": "73080"
  },
  {
    "text": "and b, which are initially\n0, and those variables are stored in memory.",
    "start": "73080",
    "end": "79509"
  },
  {
    "text": "And processor 0 moves\na 1 into a, then it moves the contents\nof ebx into b.",
    "start": "79510",
    "end": "89622"
  },
  {
    "text": "And meanwhile processor\n1 moves a 1 into b, and moves the contents\nof a into eax.",
    "start": "89622",
    "end": "102840"
  },
  {
    "text": "I just chose different\nregisters just so we can distinguish the two things.",
    "start": "102840",
    "end": "107910"
  },
  {
    "text": "Now let's think about this code. We have these two\nthings going on. Is it possible that processor\n0's ebx and processor",
    "start": "107910",
    "end": "119280"
  },
  {
    "text": "1's eax both contain the value\n0 after the processors have both",
    "start": "119280",
    "end": "127170"
  },
  {
    "text": "executed their code? They're executing in parallel. So think about a little bit.",
    "start": "127170",
    "end": "132750"
  },
  {
    "text": "This is a good lecture to think\nabout because, well, you'll",
    "start": "132750",
    "end": "142650"
  },
  {
    "text": "see in a minute. So can they both\nhave the value of 0?",
    "start": "142650",
    "end": "149490"
  },
  {
    "start": "149490",
    "end": "160116"
  },
  {
    "text": "So you're shaking your head. Explain why? STUDENT: So if ebx is\ngreater than [INAUDIBLE]",
    "start": "160116",
    "end": "173361"
  },
  {
    "text": "then it's [INAUDIBLE]. CHARLES LEISERSON: OK, good.",
    "start": "173361",
    "end": "178990"
  },
  {
    "text": "And that's a correct\nargument, but you're making a huge assumption.",
    "start": "178990",
    "end": "185090"
  },
  {
    "text": " Yeah, so the idea is that, well,\nif you're moving a 1 into it,",
    "start": "185090",
    "end": "192310"
  },
  {
    "text": "you're not looking at it. It may be that one of them\ngets 0, and the other gets 1,",
    "start": "192310",
    "end": "197620"
  },
  {
    "text": "but it actually turns\nout to depend on what's called the memory model.",
    "start": "197620",
    "end": "203500"
  },
  {
    "text": "And it took a long time before\npeople realized that there was actually an issue here.",
    "start": "203500",
    "end": "210190"
  },
  {
    "text": "So this depends upon\nthe memory model. And what you were\nreasoning about was what's called\nsequential consistency.",
    "start": "210190",
    "end": "217930"
  },
  {
    "text": "You were doing happens\nbefore types of relationships and saying, if this\nhappened before that, then.",
    "start": "217930",
    "end": "225580"
  },
  {
    "text": "And so you had some\nglobal notion of time that you were using to say what\norder these things happened in.",
    "start": "225580",
    "end": "234850"
  },
  {
    "text": "So let's take a look at the\nmodel that you were assuming. It's interesting, because\nwhenever I do this,",
    "start": "234850",
    "end": "241810"
  },
  {
    "text": "somebody always has\nthe right answer, and they always assume that\nit's sequentially consistent.",
    "start": "241810",
    "end": "246970"
  },
  {
    "text": "It's the most standard one. So sequential\nconsistency was defined by Leslie Lamport who won the\nTuring Award, a few years ago.",
    "start": "246970",
    "end": "255170"
  },
  {
    "text": "And this is part of\nthe reason he won it. So what he said is, the\nresult of any execution",
    "start": "255170",
    "end": "260799"
  },
  {
    "text": "is the same as if the\noperations of all the processors were executed in some\nsequential order.",
    "start": "260800",
    "end": "268479"
  },
  {
    "text": "And the operations of\neach individual processor appear in this sequence in the\norder specified by the program.",
    "start": "268480",
    "end": "274555"
  },
  {
    "text": " So let's just break\nthat apart, because it's",
    "start": "274555",
    "end": "281710"
  },
  {
    "text": "a mouthful to understand. So the sequence of instructions\nas defined by a processor's",
    "start": "281710",
    "end": "288820"
  },
  {
    "text": "program are interleaved with the\ncorresponding sequences defined by the other\nprocessors' programs",
    "start": "288820",
    "end": "295720"
  },
  {
    "text": "to produce a global linear\norder of all instructions. So you take this\nprocessor, this processor,",
    "start": "295720",
    "end": "301270"
  },
  {
    "text": "and there's some way of\ninterleaving them for us to understand what happened. That's the first part\nof what he's saying.",
    "start": "301270",
    "end": "306849"
  },
  {
    "text": " Then after you've done\nthis interleaving,",
    "start": "306850",
    "end": "313400"
  },
  {
    "text": "a load instruction is going\nto get the value stored",
    "start": "313400",
    "end": "319100"
  },
  {
    "text": "to the address of the load.  That is, the value\nof the most recent",
    "start": "319100",
    "end": "325760"
  },
  {
    "text": "stored to that same location\nin that linear order. So by most recent, I mean most\nrecent in that linear order.",
    "start": "325760",
    "end": "332810"
  },
  {
    "text": "I'm going to give an\nexample in just a second. So it doesn't fetch\none from way back,",
    "start": "332810",
    "end": "338660"
  },
  {
    "text": "it fetches the most\nrecent one, the last write that occurred to that location\nin that interleaved order",
    "start": "338660",
    "end": "344900"
  },
  {
    "text": "that you have picked. Now there could be many\ndifferent interleaved orders,",
    "start": "344900",
    "end": "350210"
  },
  {
    "text": "you can get many\ndifferent behaviors. After all, here we're talking\nabout programs with races,",
    "start": "350210",
    "end": "355380"
  },
  {
    "text": "right?  We're reading stuff that\nother things are writing.",
    "start": "355380",
    "end": "363080"
  },
  {
    "text": "And so basically, the hardware\ncan do whatever it wants. But for the execution to be\nsequentially as consistent,",
    "start": "363080",
    "end": "371480"
  },
  {
    "text": "it must appear as if the\nloads and stores obeyed some global linear order.",
    "start": "371480",
    "end": "379460"
  },
  {
    "text": "So there could be many different\npossible execution paths, depending upon how\nthings get interleaved.",
    "start": "379460",
    "end": "386900"
  },
  {
    "text": "But if you say, here's the\nresult of the computation, it better be that\nthere exists one",
    "start": "386900",
    "end": "392810"
  },
  {
    "text": "of those in which\nevery read occurred",
    "start": "392810",
    "end": "400550"
  },
  {
    "text": "to the most recent write\naccording to some linear order. Does that makes sense?",
    "start": "400550",
    "end": "406000"
  },
  {
    "text": "So let's do it for this example. So here we have our setup again.",
    "start": "406000",
    "end": "415550"
  },
  {
    "text": "How many interleavings\nof four things are there? Turns out there's\nsix interleavings.",
    "start": "415550",
    "end": "421639"
  },
  {
    "text": "So those who've taken 6.042\nwill know that, right? 4 choose 2. ",
    "start": "421640",
    "end": "430270"
  },
  {
    "text": "So the interleavings,\nyou can do them in the order 1, 2, 3, 4,\n1, 3, 2, 4, 1, 3, 4, 2,",
    "start": "430270",
    "end": "439330"
  },
  {
    "text": "et cetera, et cetera. But notice that in every\none of these orders, 1 always comes before 2,\nand 3 always comes before 4.",
    "start": "439330",
    "end": "450669"
  },
  {
    "text": "So you have to respect\nthe processor order. The processor order,\nyou have to respect it.",
    "start": "450670",
    "end": "458980"
  },
  {
    "text": "So if I execute in the first\ncolumn, if that's the order,",
    "start": "458980",
    "end": "464210"
  },
  {
    "text": "what's the value that I end\nup with for eax and ebx? ",
    "start": "464210",
    "end": "485914"
  },
  {
    "text": "STUDENT: 1 and 0. CHARLES LEISERSON: 1 and 0. Yep.",
    "start": "485914",
    "end": "491349"
  },
  {
    "text": "So it basically moves a 1 into\na, then it moves b into ebx. b is currently 0, so\nit's got a 0 in ebx.",
    "start": "491350",
    "end": "499720"
  },
  {
    "text": "Then processor 1 moves 1 into b. And then it moves a into eax.",
    "start": "499720",
    "end": "506200"
  },
  {
    "text": "And a at that point\nhas the value 1. ",
    "start": "506200",
    "end": "512167"
  },
  {
    "text": "What about the second one? ",
    "start": "512167",
    "end": "522830"
  },
  {
    "text": "STUDENT: 1, 1. CHARLES LEISERSON: 1, 1. Good. Because they basically are both\nmoving 1 into their registers,",
    "start": "522830",
    "end": "530720"
  },
  {
    "text": "then they're both storing. What about the third one? ",
    "start": "530720",
    "end": "537840"
  },
  {
    "text": "Yeah? STUDENT: Same. CHARLES LEISERSON: Same. OK, fourth one? ",
    "start": "537840",
    "end": "546850"
  },
  {
    "text": "We'll try to get\neverybody [INAUDIBLE].. STUDENT: Same. CHARLES LEISERSON: Same?",
    "start": "546850",
    "end": "552670"
  },
  {
    "text": "Yep. Fifth one? ",
    "start": "552670",
    "end": "559640"
  },
  {
    "text": "Same. Last one? STUDENT: 0, 1.",
    "start": "559640",
    "end": "565674"
  },
  {
    "text": "CHARLES LEISERSON: Yeah, 0, 1. Good.  So this is the\ntotal number of ways",
    "start": "565674",
    "end": "571520"
  },
  {
    "text": "we could interleave things. We don't know which\none of these might occur because, after\nall, the output is going to be non-deterministic\nupon, which it is.",
    "start": "571520",
    "end": "579019"
  },
  {
    "text": "But one thing that we\ncan say for certain is that if you have\nsequential consistency, there's no execution\nthat ends with them both",
    "start": "579020",
    "end": "586910"
  },
  {
    "text": "being 0, which is exactly\nyour intuition and correct rationalization.",
    "start": "586910",
    "end": "592329"
  },
  {
    "text": " But it turns out interestingly\nthat of modern computers, none",
    "start": "592330",
    "end": "602540"
  },
  {
    "text": "implement sequential\nconsistency. Why? Because life would\nbe too easy then.",
    "start": "602540",
    "end": "611390"
  },
  {
    "text": "None of them do that. So we'll get there, we'll talk\nabout what modern machines do.",
    "start": "611390",
    "end": "617450"
  },
  {
    "text": "So let's reason about\nsequential consistency.",
    "start": "617450",
    "end": "622760"
  },
  {
    "text": "So the way that you can\nformally reason about this, to make an argument as\nyou might have for example",
    "start": "622760",
    "end": "631190"
  },
  {
    "text": "on a quiz, if we had\na quiz coming up,",
    "start": "631190",
    "end": "636440"
  },
  {
    "text": "would be to understand\nthat an execution induces",
    "start": "636440",
    "end": "642290"
  },
  {
    "text": "a happens before a\nrelationship that we will denote as a right arrow.",
    "start": "642290",
    "end": "649940"
  },
  {
    "text": "And the right arrow\nrelation is linear, meaning that for\nany two instructions either one happens before\nthe other or the other",
    "start": "649940",
    "end": "657080"
  },
  {
    "text": "happens before the one for any\ntwo different instructions. This is the notion\nof a linear order. ",
    "start": "657080",
    "end": "665340"
  },
  {
    "text": "The arrow relation\nhas to respect. The happens before relation\nhas to respect processor order.",
    "start": "665340",
    "end": "673140"
  },
  {
    "text": "In other words, that within\nthe instructions executed by a processor the\nglobal order has",
    "start": "673140",
    "end": "680660"
  },
  {
    "text": "to have those same\nsequence of instructions of whatever that processor\nthought that it was doing.",
    "start": "680660",
    "end": "686630"
  },
  {
    "text": "And then a load from\na location in memory reads the value\nwritten by the most recent store to that location\naccording to happens before.",
    "start": "686630",
    "end": "695730"
  },
  {
    "text": "And for the memory\nresulting from an execution to be sequentially\nconsistent, there must be a linear order that\nyields that memory state.",
    "start": "695730",
    "end": "704000"
  },
  {
    "start": "704000",
    "end": "712870"
  },
  {
    "text": "If you're going to write\ncode without locks, it's really important to be\nable to reason about what",
    "start": "712870",
    "end": "719560"
  },
  {
    "text": "happened before what. And with sequential\nconsistency, you just have to understand what are\nall the possible interleavings.",
    "start": "719560",
    "end": "728019"
  },
  {
    "text": "So if you have n instructions\nhere and m instructions there, you only have to worry about n\ntimes m possible interleavings.",
    "start": "728020",
    "end": "736232"
  },
  {
    "text": " Actually, is it n times m? No, you've got more than that.",
    "start": "736232",
    "end": "743560"
  },
  {
    "text": "Sorry. I used to have good math. ",
    "start": "743560",
    "end": "749980"
  },
  {
    "text": "So one of the celebrated results\nearly in concurrency theory",
    "start": "749980",
    "end": "756040"
  },
  {
    "text": "was that fact that you could do\nmutual exclusion without locks,",
    "start": "756040",
    "end": "763120"
  },
  {
    "text": "or test and set, or\ncompare and swap, or any of these\nspecial instructions.",
    "start": "763120",
    "end": "768760"
  },
  {
    "text": "Really remarkable\nresult. And so I'd like to show you that\nbecause it involves thinking",
    "start": "768760",
    "end": "777339"
  },
  {
    "text": "about sequential consistency. So let's recall, we talked\nabout mutual exclusion last time",
    "start": "777340",
    "end": "783550"
  },
  {
    "text": "and how locks could\nsolve that problem. But of course locks\nintroduced a lot of other things like\ndeadlock, convoying,",
    "start": "783550",
    "end": "791920"
  },
  {
    "text": "and a variety of\nthings, some of which I didn't even get a\nchance to talk about, but they're in\nthe lecture notes.",
    "start": "791920",
    "end": "797800"
  },
  {
    "text": "So let's recall that a critical\nsection is a piece of code that accesses a shared data\nstructure that you",
    "start": "797800",
    "end": "804700"
  },
  {
    "text": "don't want two separate\nthreads to be executing at the same time. You want it to be\nmutually exclusive.",
    "start": "804700",
    "end": "811420"
  },
  {
    "text": "Most implementations use one\nof these special instructions, such as the xchg, the exchange\ninstructions we talked about",
    "start": "811420",
    "end": "819850"
  },
  {
    "text": "to implement locks last time. Or they may use test and\nset, compare and swap,",
    "start": "819850",
    "end": "825190"
  },
  {
    "text": "load linked store conditional. Are any of these\nfamiliar to people?",
    "start": "825190",
    "end": "831089"
  },
  {
    "text": "Or is this new stuff? Who's this new for? Just want to make sure. OK, great.",
    "start": "831090",
    "end": "836890"
  },
  {
    "text": "So there are these\nspecial instructions in the machine that do things\nlike an atomic exchange,",
    "start": "836890",
    "end": "846730"
  },
  {
    "text": "or a test and set. I can set a bit and test\nwhat the prior value was",
    "start": "846730",
    "end": "852220"
  },
  {
    "text": "of that bit as an\natomic operation. It's not two sections\nwhere I set it,",
    "start": "852220",
    "end": "859300"
  },
  {
    "text": "and then the value\nchanged in between. Or compare and swap, we'll talk\nmore about compare and swap.",
    "start": "859300",
    "end": "865930"
  },
  {
    "text": "And load linked store\nconditional, which is even a more sophisticated one.",
    "start": "865930",
    "end": "871300"
  },
  {
    "text": "So in the early days of\ncomputing back in the 1960s, this problem of mutual\nexclusion came up.",
    "start": "871300",
    "end": "880750"
  },
  {
    "text": "And the question was,\ncan mutual exclusion be implemented with only\nthe loads and stores",
    "start": "880750",
    "end": "887470"
  },
  {
    "text": "as the only memory operations. Or do you need one\nof these heavy duty instructions that does two\nthings and calls it atomic?",
    "start": "887470",
    "end": "895405"
  },
  {
    "text": " Oops, yep, so I\nforgot to animate",
    "start": "895405",
    "end": "900640"
  },
  {
    "text": "the appearance of Edsgar. So two fellows, Dekker and\nDijkstra, showed that it can,",
    "start": "900640",
    "end": "909970"
  },
  {
    "text": "as long as the computer system\nis sequentially consistent. And so I'm not going to\ngive their algorithm, which",
    "start": "909970",
    "end": "917410"
  },
  {
    "text": "is a little bit complicated. I'm going to give I what\nI think is boiled down to the most simple and\nelegant version of that",
    "start": "917410",
    "end": "925480"
  },
  {
    "text": "uses their idea, and\nit's due to Peterson. And for the life\nof me, I have not been able to find a\npicture of Peterson.",
    "start": "925480",
    "end": "932378"
  },
  {
    "text": "Otherwise, I'd show you\nwhat Peterson looks like. ",
    "start": "932378",
    "end": "937389"
  },
  {
    "text": "So here's Peterson's algorithm. And I'm going to model\nit with Alice and Bob.",
    "start": "937390",
    "end": "942790"
  },
  {
    "text": "They have a shared widget. And what Alice wants to do\nto the widget is to frob it.",
    "start": "942790",
    "end": "950800"
  },
  {
    "text": "And Bob wants to borf it. So they're going to\nfrob and borf it. But we don't want them to\nbe frobbing and borfing",
    "start": "950800",
    "end": "959320"
  },
  {
    "text": "at the same time, naturally. You don't frob and borf\nwidgets at the same time.",
    "start": "959320",
    "end": "964960"
  },
  {
    "text": " So they're mutually exclusive.",
    "start": "964960",
    "end": "970850"
  },
  {
    "text": "So here's Peterson's algorithm.",
    "start": "970850",
    "end": "976810"
  },
  {
    "text": "So we have widget x. So I'm just going to read\nthrough the code here.",
    "start": "976810",
    "end": "982540"
  },
  {
    "text": "And I have a Boolean\nvariable called wants. ",
    "start": "982540",
    "end": "989180"
  },
  {
    "text": "I have an A_wants and a B_wants. A means Alice wants\nto frob the widget.",
    "start": "989180",
    "end": "996899"
  },
  {
    "text": "B_wants means that Bob\nwants to borf the widget.",
    "start": "996900",
    "end": "1002700"
  },
  {
    "text": "And we're also going to have a\nvariable that has two values, A or B, for whose turn it is.",
    "start": "1002700",
    "end": "1010980"
  },
  {
    "text": "And so we start\nout with that code, and then we fork the two\nAlice and Bob branches",
    "start": "1010980",
    "end": "1019020"
  },
  {
    "text": "of our program to\nexecute concurrently. And what Alice does is\nshe says, I want it.",
    "start": "1019020",
    "end": "1026194"
  },
  {
    "text": "She sets A_wants to true. And I set the turn\nto be Bob's turn.",
    "start": "1026195",
    "end": "1031920"
  },
  {
    "start": "1031920",
    "end": "1039010"
  },
  {
    "text": "And then the next loop\nhas an empty body, notice. It's just a while\nwith a semicolon. That's an empty body.",
    "start": "1039010",
    "end": "1044985"
  },
  {
    "text": "It's just going to\nsit there spinning. It's going to say, while\nB wants it, Bob wants it,",
    "start": "1044986",
    "end": "1052120"
  },
  {
    "text": "and it's Bob's turn,\nI'm going to just wait. ",
    "start": "1052120",
    "end": "1057789"
  },
  {
    "text": "And if it turns out that\neither Bob does not want it",
    "start": "1057790",
    "end": "1064410"
  },
  {
    "text": "or it's not Bob's\nturn, then that's going to free Alice to go into\nthe critical section and frob",
    "start": "1064410",
    "end": "1073650"
  },
  {
    "text": "x. And then when she's done she\nsays, I don't want it anymore.",
    "start": "1073650",
    "end": "1081490"
  },
  {
    "text": "And if you look at Bob's code,\nit's exactly the same thing. And when we're done\nwith this code,",
    "start": "1081490",
    "end": "1089950"
  },
  {
    "text": "we're going to then loop to\ndo it again, because they just want to keep\nfrobbing and borfing",
    "start": "1089950",
    "end": "1095590"
  },
  {
    "text": "until their eyes turn blue or\nred, whatever color eyes they have there. ",
    "start": "1095590",
    "end": "1102644"
  },
  {
    "text": "Yeah, question?  I didn't explain\nwhy this works yet.",
    "start": "1102645",
    "end": "1107763"
  },
  {
    "text": "I'm going to explain\nwhy it works. STUDENT: OK. CHARLES LEISERSON: You're\ngoing to ask why it works? STUDENT: I was going to\nask why those aren't locks.",
    "start": "1107763",
    "end": "1115961"
  },
  {
    "text": "CHARLES LEISERSON: Why\nare they not locks? STUDENT: [INAUDIBLE] CHARLES LEISERSON:\nWell, a lock says",
    "start": "1115962",
    "end": "1122390"
  },
  {
    "text": "that if you can acquire it,\nthen you stop the other person from acquiring it.",
    "start": "1122390",
    "end": "1127682"
  },
  {
    "text": "There's no locking here,\nthere's no waiting. ",
    "start": "1127682",
    "end": "1133250"
  },
  {
    "text": "We're implementing a\nmutual exclusion region. But a lock has a\nparticular span--",
    "start": "1133250",
    "end": "1138380"
  },
  {
    "text": "it's got an acquire\nand a release. So when you say A\nwants to be true,",
    "start": "1138380",
    "end": "1144169"
  },
  {
    "text": "I haven't acquired the\nlock at that point, have I? Or if I set the turn to\nbe the other character,",
    "start": "1144170",
    "end": "1150890"
  },
  {
    "text": "I haven't acquired a lock. Indeed, I then do some testing\nand so forth and hopefully",
    "start": "1150890",
    "end": "1158649"
  },
  {
    "text": "end up with mutual exclusion,\nwhich is effectively what locking does. But this is a different\nway of getting you there.",
    "start": "1158650",
    "end": "1165820"
  },
  {
    "text": "It's only using\nloads and stores. With a lock, there's an atomic-- I got the lock.",
    "start": "1165820",
    "end": "1171970"
  },
  {
    "text": "And if it wasn't available,\nI didn't get the lock. Then I wait. ",
    "start": "1171970",
    "end": "1181240"
  },
  {
    "text": "So let's discuss, let's\nfigure out what's going on. And I'm going to do it two ways. First, I'm going to\ndo the intuition,",
    "start": "1181240",
    "end": "1187420"
  },
  {
    "text": "and then I'm going to show\nyou how you reason through it with a happens before relation. Question?",
    "start": "1187420",
    "end": "1193660"
  },
  {
    "text": "STUDENT: No. CHARLES LEISERSON: No, OK. Good. Not good that\nthere's no questions.",
    "start": "1193660",
    "end": "1199450"
  },
  {
    "text": "It's good if there\nare questions. But good we'll move on. So here's the idea.",
    "start": "1199450",
    "end": "1207260"
  },
  {
    "text": "Suppose Alice and Bob\ndropped both tried to enter the critical section. ",
    "start": "1207260",
    "end": "1214270"
  },
  {
    "text": "And we have sequential\nconsistency. So we can talk about who\ndid things in what order.",
    "start": "1214270",
    "end": "1219520"
  },
  {
    "text": "So whoever is the last one to\nwrite to the variable turn,",
    "start": "1219520",
    "end": "1232450"
  },
  {
    "text": "that one's not going to enter. And the other one will enter.",
    "start": "1232450",
    "end": "1237560"
  },
  {
    "text": " And then if Alice tries\nto enter the section,",
    "start": "1237560",
    "end": "1243490"
  },
  {
    "text": "then she progresses\nbecause at that point she knows that B_wants is false.",
    "start": "1243490",
    "end": "1249530"
  },
  {
    "text": "And if only Bob\ntries to enter it, then he's going to\ngo because he's going to see that A_wants is false.",
    "start": "1249530",
    "end": "1254965"
  },
  {
    "text": " Does that makes sense? So only one of them is going\nto be in there at a time.",
    "start": "1254965",
    "end": "1262120"
  },
  {
    "text": "It's also the case that you\nwant to verify that if you want to enter, you can enter.",
    "start": "1262120",
    "end": "1269950"
  },
  {
    "text": "Because otherwise, a\nvery simple protocol would be not to bother looking\nat things but just take turns. It's Alice's turn, it's Bob's\nturn, it's Alice's turn,",
    "start": "1269950",
    "end": "1277130"
  },
  {
    "text": "it's Bob turn. And we don't want a\nsolution like that because if Bob doesn't want\na turn, Alice can't go.",
    "start": "1277130",
    "end": "1284240"
  },
  {
    "text": "She can go once, and\nthen she's stuck.  Whereas we want to be\nable to have somebody,",
    "start": "1284240",
    "end": "1291345"
  },
  {
    "text": "if they're the\nonly one who wants to go to execute the\ncritical section, Alice can frob, frob,\nfrob, frob, frob.",
    "start": "1291345",
    "end": "1297850"
  },
  {
    "text": "Or Bob can borf, borf,\nborf, borf, borf. We don't want to force them to\ngo if they don't need to go.",
    "start": "1297850",
    "end": "1304210"
  },
  {
    "text": " So the intuition is\nthat only one of them",
    "start": "1304210",
    "end": "1310630"
  },
  {
    "text": "is going to get in\nthere because you need the other one either\nto say you want to go in,",
    "start": "1310630",
    "end": "1317650"
  },
  {
    "text": "or else their value for\nwants is going to be 0. And it's going to\nbe false and you're",
    "start": "1317650",
    "end": "1323740"
  },
  {
    "text": "going to go through anyway. But this is not a good argument,\nbecause this is handwaving.",
    "start": "1323740",
    "end": "1333700"
  },
  {
    "text": "We're at MIT, right,\nso we can do proofs. ",
    "start": "1333700",
    "end": "1339490"
  },
  {
    "text": "And this proof isn't so hard. But I want to show\nit to you because it may be different from other\nproofs that you've seen.",
    "start": "1339490",
    "end": "1345880"
  },
  {
    "text": " So here's the theorem. Peterson's algorithm\nachieves mutual exclusion",
    "start": "1345880",
    "end": "1352570"
  },
  {
    "text": "on the critical section. The setup for the\nproof is, assume",
    "start": "1352570",
    "end": "1357760"
  },
  {
    "text": "for the purposes\nof contradiction that both Alice and\nBob find themselves in the critical\nsection together.",
    "start": "1357760",
    "end": "1363640"
  },
  {
    "text": "And now we're going to look\nat the series of instructions that got us there,\nand then argue there must be a contradiction.",
    "start": "1363640",
    "end": "1371230"
  },
  {
    "text": "That's the idea. And so let's consider the most\nrecent time that each of them",
    "start": "1371230",
    "end": "1377440"
  },
  {
    "text": "executed the code before\nentering the critical section. So we're not interested\nin what happened long ago. What's the very,\nvery last pieces",
    "start": "1377440",
    "end": "1384190"
  },
  {
    "text": "of code as they entered\nthe critical section? And we'll derive\na contradiction. ",
    "start": "1384190",
    "end": "1391360"
  },
  {
    "text": "So here we go. So without loss of generality,\nlet's assume that Bob-- we have some linear order.",
    "start": "1391360",
    "end": "1398770"
  },
  {
    "text": "And to execute, noticed a B\nin the critical section, Alice and Bob both had to\nset the variable turn.",
    "start": "1398770",
    "end": "1405580"
  },
  {
    "text": "So one of them had\nto do it first. I'm going assume without\nloss of generality that it was Bob because I\ncan otherwise make exactly",
    "start": "1405580",
    "end": "1412240"
  },
  {
    "text": "the same argument for Alice. So let's assume that Bob is\nthe last one to write to turn.",
    "start": "1412240",
    "end": "1417790"
  },
  {
    "text": "So therefore, if Bob\nwas the last one, that means that Alice\nwriting to turn,",
    "start": "1417790",
    "end": "1424600"
  },
  {
    "text": "so she got in there\nso she wrote to turn. So her writing B to turn\npreceded Bob writing A to turn.",
    "start": "1424600",
    "end": "1433530"
  },
  {
    "text": " So we have that happens\nbefore relationship.",
    "start": "1433530",
    "end": "1439659"
  },
  {
    "text": "Everybody with me? Do you understand the\nnotation I'm using and the happens\nbefore relationship?",
    "start": "1439660",
    "end": "1446289"
  },
  {
    "text": " Now Alice's program order\nsays that true to A_wants",
    "start": "1446290",
    "end": "1459250"
  },
  {
    "text": "comes before her\nwriting turn equals",
    "start": "1459250",
    "end": "1464860"
  },
  {
    "text": "B. That's just program order. So we have that.",
    "start": "1464860",
    "end": "1470450"
  },
  {
    "text": "And similarly, we have\nBob's program order. And Bob's program order says,\nwell, I wrote turn to A.",
    "start": "1470450",
    "end": "1482080"
  },
  {
    "text": "So Bob wrote, turn\nequals A. And then Bob, in this case I'm going\nto do Bob read A_wants.",
    "start": "1482080",
    "end": "1490570"
  },
  {
    "text": "And then he reads turn.",
    "start": "1490570",
    "end": "1497080"
  },
  {
    "text": "So the second instruction\nhere, up here,",
    "start": "1497080",
    "end": "1503919"
  },
  {
    "text": "so this is a conditional and. So we basically are doing this.",
    "start": "1503920",
    "end": "1509169"
  },
  {
    "text": "And then if that's\ntrue, then we do this. So this turn equals\nequals A. That's",
    "start": "1509170",
    "end": "1516130"
  },
  {
    "text": "reading turn and checking if\nit's A happens after A_wants. So that's why I get these\nthree things in order.",
    "start": "1516130",
    "end": "1523960"
  },
  {
    "text": "Does that makes sense? Any question about that? ",
    "start": "1523960",
    "end": "1534570"
  },
  {
    "text": "Is that good? So I've established\nthese two chains. ",
    "start": "1534570",
    "end": "1540080"
  },
  {
    "text": "So I actually have\nthree chains here that I'm now going to combine. ",
    "start": "1540080",
    "end": "1550710"
  },
  {
    "text": "Let's see. So what's happening\nis let me look to see what's the order of\neverything that happens.",
    "start": "1550710",
    "end": "1557850"
  },
  {
    "text": "So the earliest\nthing that happens is that Alice wants\nto be true because--",
    "start": "1557850",
    "end": "1565140"
  },
  {
    "text": "where's that? So Alice wants is true\nis, yes, is coming before.",
    "start": "1565140",
    "end": "1575420"
  },
  {
    "text": "That's the earliest thing\nthat's happening here. So that instruction\nis basically this--",
    "start": "1575420",
    "end": "1580940"
  },
  {
    "text": "Alice wants is true, it comes\nbefore the A turn equals B. That comes before\nthe A turn equals B.",
    "start": "1580940",
    "end": "1587343"
  },
  {
    "text": "So it comes before\nthe write turn equals A, write B turn equals A.\nAnd then B turn equals A.",
    "start": "1587343",
    "end": "1592580"
  },
  {
    "text": "So do you see the chain\nwe've established? ",
    "start": "1592580",
    "end": "1597940"
  },
  {
    "text": "You see the chain? Yeah, yeah. ",
    "start": "1597940",
    "end": "1603460"
  },
  {
    "text": "OK, good. | So it says A_wants is first.",
    "start": "1603460",
    "end": "1609760"
  },
  {
    "text": "A_wants equals true is first. Then we have the turn equals B.\nThat's all from the second line",
    "start": "1609760",
    "end": "1617890"
  },
  {
    "text": "here. That's from this line here. ",
    "start": "1617890",
    "end": "1626710"
  },
  {
    "text": "What's next?  Which instruction is next?",
    "start": "1626710",
    "end": "1633870"
  },
  {
    "text": "So turn equals A. That comes\nfrom the top line there.",
    "start": "1633870",
    "end": "1639750"
  },
  {
    "text": "What's next?  STUDENT: B [INAUDIBLE].",
    "start": "1639750",
    "end": "1648545"
  },
  {
    "text": "CHARLES LEISERSON: So I\nread B. Bob reads A_wants.",
    "start": "1648545",
    "end": "1656100"
  },
  {
    "text": "And then finally,\nBob reads turn at A.",
    "start": "1656100",
    "end": "1665799"
  },
  {
    "text": "So this is all based on just\nthe interleaving and the fact that if you saw that we\nhave the program order",
    "start": "1665800",
    "end": "1672560"
  },
  {
    "text": "and that Bob was\nthe last to write. That's all we're using.",
    "start": "1672560",
    "end": "1677950"
  },
  {
    "text": "And so why is that\na contradiction? ",
    "start": "1677950",
    "end": "1683600"
  },
  {
    "text": "Well, we know what\nthe linear order is. We know that when Bob\nread, what did Bob read?",
    "start": "1683600",
    "end": "1695720"
  },
  {
    "text": "What did Bob read when he\nread A_wants in step 4?",
    "start": "1695720",
    "end": "1704549"
  },
  {
    "text": "He read the last\nvalue in that chain, the most recent value In that\nchain where it was stored to.",
    "start": "1704550",
    "end": "1713320"
  },
  {
    "text": "And what was stored there? True. Good.",
    "start": "1713320",
    "end": "1719460"
  },
  {
    "text": "And then Bob read turn.",
    "start": "1719460",
    "end": "1725679"
  },
  {
    "text": "And what was the\nmost recent value stored to turn in that chain? STUDENT: [INAUDIBLE] A.",
    "start": "1725680",
    "end": "1734454"
  },
  {
    "text": "CHARLES LEISERSON: So then what? STUDENT: Bob gets stuck.",
    "start": "1734454",
    "end": "1740360"
  },
  {
    "text": "CHARLES LEISERSON: Bob,\nif that were in fact what he read in the\nwhile loop line, what",
    "start": "1740360",
    "end": "1748180"
  },
  {
    "text": "should be happening now? ",
    "start": "1748180",
    "end": "1754100"
  },
  {
    "text": "He should be spinning there. He shouldn't be in the loop.",
    "start": "1754100",
    "end": "1760110"
  },
  {
    "text": "Bob didn't obey. His code did not obey\nthe logic of the code.",
    "start": "1760110",
    "end": "1766470"
  },
  {
    "text": "Bob should be spinning. That's the contradiction. Because we said Bob\nwas in the loop.",
    "start": "1766470",
    "end": "1772840"
  },
  {
    "text": "Does that makes sense? ",
    "start": "1772840",
    "end": "1781550"
  },
  {
    "text": "Is that good? So when you're confronted with\nsynchronizing through memory,",
    "start": "1781550",
    "end": "1789130"
  },
  {
    "text": "as this is called,\nyou really got to write down the\nhappens before things",
    "start": "1789130",
    "end": "1795190"
  },
  {
    "text": "in order to be careful\nabout reviewing things. I have seen in many,\nmany cases engineers",
    "start": "1795190",
    "end": "1801670"
  },
  {
    "text": "think they got it right\nby an informal argument. And in fact, for those\npeople who have studied",
    "start": "1801670",
    "end": "1810430"
  },
  {
    "text": "model checking-- anybody\nhave any interaction with model checking? ",
    "start": "1810430",
    "end": "1817210"
  },
  {
    "text": "What was the context? STUDENT: 6.822. CHARLES LEISERSON:\nWell, and were you",
    "start": "1817210",
    "end": "1822790"
  },
  {
    "text": "studying protocols and so forth? STUDENT: Yeah. CHARLES LEISERSON: So in\n6.822, what class is that?",
    "start": "1822790",
    "end": "1829015"
  },
  {
    "text": "STUDENT: Formal programming. CHARLES LEISERSON:\nFormal programing. Good. So for things like network\nprotocols and security",
    "start": "1829015",
    "end": "1837130"
  },
  {
    "text": "protocols and for cache\nprotocols in order",
    "start": "1837130",
    "end": "1842950"
  },
  {
    "text": "to implement things like MSI\nand MESI protocols and so forth,",
    "start": "1842950",
    "end": "1848260"
  },
  {
    "text": "these days they can't\ndo it in their heads. They have programs that look\nat all the possible ways",
    "start": "1848260",
    "end": "1854860"
  },
  {
    "text": "of executing what's\ncalled model checking. And it's a great\ntechnology because it",
    "start": "1854860",
    "end": "1863139"
  },
  {
    "text": "helps you figure out where the\nbugs are and essentially reason",
    "start": "1863140",
    "end": "1868358"
  },
  {
    "text": "through this. For simple things, you\ncan reason it through. For larger things, you\nuse the same kind of happens before analysis\nin those contexts in order",
    "start": "1868358",
    "end": "1877090"
  },
  {
    "text": "to try to prove that\nyour program is correct, that those protocols\nare correct.",
    "start": "1877090",
    "end": "1882910"
  },
  {
    "text": "So for example, in\nall the computers you have in this room,\nevery one of them, there was a model\nchecker checking",
    "start": "1882910",
    "end": "1889000"
  },
  {
    "text": "to make sure the cache\nanalysis was done. And many of the\nsecurity protocols",
    "start": "1889000",
    "end": "1894730"
  },
  {
    "text": "that you're using as\nyou access the web have all been through\nmodel checking. ",
    "start": "1894730",
    "end": "1903670"
  },
  {
    "text": "Good. The other thing is it turns\nout that Peterson's algorithm",
    "start": "1903670",
    "end": "1910390"
  },
  {
    "text": "guarantees starvation freedom. So while Bob wants to\nexecute her critical session,",
    "start": "1910390",
    "end": "1916570"
  },
  {
    "text": "Bob cannot execute his critical\nsection twice in a row, and vise versa.",
    "start": "1916570",
    "end": "1923110"
  },
  {
    "text": "So it's got the property that\none of the things that you might worry about\nis Alice wants to go",
    "start": "1923110",
    "end": "1931750"
  },
  {
    "text": "and then Bob goes\na gazillion times, and Alice never gets to go.",
    "start": "1931750",
    "end": "1937090"
  },
  {
    "text": "Now that doesn't\nhappen, as you can see, from the code because\nevery time you",
    "start": "1937090",
    "end": "1942700"
  },
  {
    "text": "go you set the turn\nto the other person. So if they do want to go,\nthey get to go through.",
    "start": "1942700",
    "end": "1949480"
  },
  {
    "text": "But proving that\nis a nice exercise. And it will warm you up\nto this kind of analysis,",
    "start": "1949480",
    "end": "1958060"
  },
  {
    "text": "how you go about it. Yeah? STUDENT: Does it work\nwith another [INAUDIBLE]??",
    "start": "1958060",
    "end": "1963100"
  },
  {
    "text": "CHARLES LEISERSON:\nThis one does not. And there has been\nwonderful studies of what does it take to get\nn things to work together.",
    "start": "1963100",
    "end": "1973059"
  },
  {
    "text": "And this is one place where\nthe locks have a big advantage because you can\nuse a single lock",
    "start": "1973060",
    "end": "1981309"
  },
  {
    "text": "to get the mutual\nexclusion among n things, so constant storage. Whereas if you just use\natomic read and atomic write,",
    "start": "1981310",
    "end": "1989440"
  },
  {
    "text": "it turns out the storage grows. And there's been\nwonderful studies.",
    "start": "1989440",
    "end": "1994600"
  },
  {
    "text": "Also, wonderful studies\nof these other operations, like compare and\nswap and so forth.",
    "start": "1994600",
    "end": "2000580"
  },
  {
    "text": "And we'll do a\nlittle bit of that. We'll do a little bit of that. So often, in order\nto get performance,",
    "start": "2000580",
    "end": "2007380"
  },
  {
    "text": "you want to synchronize\nthrough memory. Not often, but\noccasionally you want to synchronize through\nmemory to get performance.",
    "start": "2007380",
    "end": "2016860"
  },
  {
    "text": "But then you have to be\nable to reason about it. And so the happens before\nsequential consistency,",
    "start": "2016860",
    "end": "2024690"
  },
  {
    "text": "great tools for doing it. The only problem with\nsequential consistency is what? ",
    "start": "2024690",
    "end": "2034160"
  },
  {
    "text": "Who is listening? Yeah? STUDENT: It's not real. CHARLES LEISERSON:\nIt's not real.",
    "start": "2034160",
    "end": "2040220"
  },
  {
    "text": "No, we have had\nmachines historically that implemented\nsequential consistency. Today, no machines support\nsequential consistency,",
    "start": "2040220",
    "end": "2048859"
  },
  {
    "text": "at least that I'm aware of. Instead they report what's\ncalled relaxed memory",
    "start": "2048860",
    "end": "2054530"
  },
  {
    "text": "consistency. And let's take a look at\nwhat the motivation is for why you would want to make\nit a nightmare for programmers",
    "start": "2054530",
    "end": "2062750"
  },
  {
    "text": "to synchronize through memory. This has also led\nsoftware people to say, never synchronize\nthrough memory.",
    "start": "2062750",
    "end": "2070469"
  },
  {
    "text": "Why? Because it is so hard\nto get it correct. Because you don't even\nhave sequential consistency",
    "start": "2070469",
    "end": "2076580"
  },
  {
    "text": "at your back. So today, no modern\nday processor implements sequential\nconsistency.",
    "start": "2076580",
    "end": "2084020"
  },
  {
    "text": "They all implement some\nform of relaxed consistency. And in this context, hardware\nactively reorders instructions,",
    "start": "2084020",
    "end": "2093469"
  },
  {
    "text": "and compilers may\nreorder instructions too. And that leads you not\nto have the property",
    "start": "2093469",
    "end": "2100970"
  },
  {
    "text": "that the order of instructions\nthat you specify in a processor is the same as the order\nthat they get executed in.",
    "start": "2100970",
    "end": "2109490"
  },
  {
    "text": "So you say do A and then B.\nThe computer does B and then A.",
    "start": "2109490",
    "end": "2115790"
  },
  {
    "text": "So let's see\ninstruction reordering.",
    "start": "2115790",
    "end": "2121200"
  },
  {
    "text": "So I have on the left the order\nthat the programmer specified,",
    "start": "2121200",
    "end": "2127339"
  },
  {
    "text": "and the order on the right\nwhat the hardware did. Or it may have been that\nthe compiler reordered them.",
    "start": "2127340",
    "end": "2133640"
  },
  {
    "text": "Now if you look, why might\nthe hardware or compiler decide to reorder\nthese instructions?",
    "start": "2133640",
    "end": "2140990"
  },
  {
    "text": " What's going on in\nthese instructions? You have to understand what\nthese instructions are doing.",
    "start": "2140990",
    "end": "2148210"
  },
  {
    "text": "So in the first case, I'm\ndoing a store and then a load.",
    "start": "2148210",
    "end": "2157030"
  },
  {
    "text": "And in the second case,\nI have reversed the order to do the load first. Now if you think\nabout it, if you only",
    "start": "2157030",
    "end": "2164020"
  },
  {
    "text": "had one thing going\non, what's the impact here of this reordering?",
    "start": "2164020",
    "end": "2169990"
  },
  {
    "text": "Is there any reason the\ncompiler or somebody couldn't reorder these?",
    "start": "2169990",
    "end": "2177268"
  },
  {
    "text": "STUDENT: I think we reorder\nthem is the reason that it affects the pipeline. If you have to store first,\nthe write [INAUDIBLE]",
    "start": "2177268",
    "end": "2185520"
  },
  {
    "text": "you have to [INAUDIBLE]. CHARLES LEISERSON:\nYeah, in what way does it affect the pipeline? STUDENT: That basically the\nload doesn't do anything",
    "start": "2185520",
    "end": "2192920"
  },
  {
    "text": "in the [INAUDIBLE],,\nwhereas the store does. ",
    "start": "2192920",
    "end": "2199930"
  },
  {
    "text": "CHARLES LEISERSON: I think\nyou're on the right track. There's a higher level\nreason why you might want",
    "start": "2199930",
    "end": "2206470"
  },
  {
    "text": "to put loads before stores. Why might you want to put loads? These are two instructions\nthat normally if I only",
    "start": "2206470",
    "end": "2212680"
  },
  {
    "text": "had one thread, reordering\nthem would be perfectly fine. ",
    "start": "2212680",
    "end": "2220690"
  },
  {
    "text": "Well, it's not necessarily\nperfectly fine. ",
    "start": "2220690",
    "end": "2226240"
  },
  {
    "text": "When might there be an issue?  It's almost perfectly fine.",
    "start": "2226240",
    "end": "2231725"
  },
  {
    "text": "STUDENT: [INAUDIBLE] CHARLES LEISERSON:\nIf A was equal to B.",
    "start": "2231725",
    "end": "2238340"
  },
  {
    "text": "But if A and B are\ndifferent, than reordering them is just fine. If A and B are the same, if\nthat's the same location,",
    "start": "2238340",
    "end": "2245930"
  },
  {
    "text": "uh-oh, I can't reorder them\nbecause one is using the other. ",
    "start": "2245930",
    "end": "2254160"
  },
  {
    "text": "So why might the hardware\nprefer to put the load earlier?",
    "start": "2254160",
    "end": "2260530"
  },
  {
    "text": "Yeah? STUDENT: There might be a later\ninstruction which depends on B. CHARLES LEISERSON: There might\nbe a later instruction that",
    "start": "2260530",
    "end": "2265770"
  },
  {
    "text": "depends on B. And so why\nwould it put the load earlier? STUDENT: So by doing\nthe load earlier, the pipeline\n[INAUDIBLE] happens.",
    "start": "2265770",
    "end": "2273000"
  },
  {
    "text": "Earlier on, [INAUDIBLE]. CHARLES LEISERSON: Yeah, you're\nbasically covering over latency in a load.",
    "start": "2273000",
    "end": "2278010"
  },
  {
    "text": "When I do a load, I have\nto wait for the result before I can use it. When I do a store, I don't\nhave to wait for the result",
    "start": "2278010",
    "end": "2287640"
  },
  {
    "text": "because it's not being\nused, I'm storing it. And so therefore if\nI do loads earlier,",
    "start": "2287640",
    "end": "2294750"
  },
  {
    "text": "If I have other work to do\nsuch as doing the store, then the instruction\nthat needs the value of B",
    "start": "2294750",
    "end": "2308852"
  },
  {
    "text": "doesn't have to\nnecessarily wait as long. I've covered over\nsome of the latency. And so the hardware\nwill execute faster.",
    "start": "2308852",
    "end": "2315960"
  },
  {
    "text": "So we've got higher performance\nby covering load latency. Does that makes sense?",
    "start": "2315960",
    "end": "2322793"
  },
  {
    "text": "It's helpful to know what's\ngoing on in the hardware here to reason\nabout the software. This is a really great\nexample of that lesson",
    "start": "2322793",
    "end": "2329910"
  },
  {
    "text": "is what the compiler\nis doing there that it chooses to reorder.",
    "start": "2329910",
    "end": "2334980"
  },
  {
    "text": "And frankly, in\nthe era before 2004 when we were in the\nera of what's called",
    "start": "2334980",
    "end": "2343410"
  },
  {
    "text": "Dennard scaling,\nand we didn't worry. All our computers just had one\nprocessor, it didn't matter.",
    "start": "2343410",
    "end": "2352680"
  },
  {
    "text": "Didn't have to worry\nabout these issues. These issues only come\nup for when you have",
    "start": "2352680",
    "end": "2357839"
  },
  {
    "text": "more than one thing going on. Because if you're sharing\nthese values, oops,",
    "start": "2357840",
    "end": "2363690"
  },
  {
    "text": "I changed the order. So let's see, so when is\nit safe in this context",
    "start": "2363690",
    "end": "2371820"
  },
  {
    "text": "for the hardware\ncompiler to perform this particular reordering?",
    "start": "2371820",
    "end": "2377340"
  },
  {
    "text": "When can I do that?  So there's actually\ntwo answers here.",
    "start": "2377340",
    "end": "2382930"
  },
  {
    "text": " Or there's a combined answer. So we've already talked\nabout one of them.",
    "start": "2382930",
    "end": "2390840"
  },
  {
    "text": "Yeah? STUDENT: When A is not B. CHARLES LEISERSON: Yeah, when A\nis not B. If A and B are equal,",
    "start": "2390840",
    "end": "2397839"
  },
  {
    "text": "it's not safe to do. And what's the second\nconstraint where it's safe to this reordering?",
    "start": "2397840",
    "end": "2403799"
  },
  {
    "text": "Yeah, go ahead. STUDENT: If A\nequals B, but if you have already one [INAUDIBLE].",
    "start": "2403800",
    "end": "2410170"
  },
  {
    "text": "CHARLES LEISERSON: Ooh,\nthat's a nasty one. Yeah, I guess that's true.",
    "start": "2410170",
    "end": "2415280"
  },
  {
    "text": "I guess that's true. But more generally\nwhen is it safe?",
    "start": "2415280",
    "end": "2421220"
  },
  {
    "text": "That's a benign race\nin some sense, right? Yeah? ",
    "start": "2421220",
    "end": "2427549"
  },
  {
    "text": "Good. Good, that's a good one.",
    "start": "2427550",
    "end": "2432980"
  },
  {
    "text": "What's the other case\nthat this is safe to do? ",
    "start": "2432980",
    "end": "2438349"
  },
  {
    "text": "Or what's the case\nwhere it's not safe? Same question.",
    "start": "2438350",
    "end": "2443797"
  },
  {
    "text": " I just told you.",
    "start": "2443797",
    "end": "2449380"
  },
  {
    "start": "2449380",
    "end": "2461660"
  },
  {
    "text": "When might this be safe?  When is it safe to\nthis reordering?",
    "start": "2461660",
    "end": "2467230"
  },
  {
    "text": "I can't do it if\nA is equal to B. And also shouldn't do it when?",
    "start": "2467230",
    "end": "2474200"
  },
  {
    "text": "Yeah? STUDENT: [INAUDIBLE] value of A. CHARLES LEISERSON: Yeah, but.",
    "start": "2474200",
    "end": "2482890"
  },
  {
    "text": "Yeah? STUDENT: [INAUDIBLE]\nif you have like when a processor is operating. CHARLES LEISERSON: Yeah,\nif there's no concurrency.",
    "start": "2482890",
    "end": "2490680"
  },
  {
    "text": "If there's no\nconcurrency, it's fine. The problem is when\nthere's concurrency.",
    "start": "2490680",
    "end": "2496190"
  },
  {
    "text": " So let's take a look at how\nthe hardware does reordering",
    "start": "2496190",
    "end": "2503520"
  },
  {
    "text": "so that we can understand\nwhat's going on. Because in a modern\nprocessor, there's concurrency all the time.",
    "start": "2503520",
    "end": "2510430"
  },
  {
    "text": "And yet the compiler\nstill wants to be able to cover overload\nlatency, because usually it doesn't matter.",
    "start": "2510430",
    "end": "2515619"
  },
  {
    "text": " So you can view\nhardware as follows.",
    "start": "2515620",
    "end": "2521950"
  },
  {
    "text": "So you have a processor\non the left edge here, and you have a network\nthat connects it",
    "start": "2521950",
    "end": "2527860"
  },
  {
    "text": "to the memory system, a\nmemory bus of some kind.",
    "start": "2527860",
    "end": "2532900"
  },
  {
    "text": "Now it turns out\nthat the processor can issue stores faster than\nthe network can handle them.",
    "start": "2532900",
    "end": "2541119"
  },
  {
    "text": "So the processor can go store,\nstore, store, store, store. But getting things\ninto the memory system,",
    "start": "2541120",
    "end": "2546730"
  },
  {
    "text": "that can take a while. Memory system is\nbig and it's slow.",
    "start": "2546730",
    "end": "2553690"
  },
  {
    "text": "But the hardware is usually\nnot doing store on every cycle. It's doing some other\nthings, so there are bubbles",
    "start": "2553690",
    "end": "2560020"
  },
  {
    "text": "in that instruction stream. And so what it does\nis it says, well, I'm",
    "start": "2560020",
    "end": "2565270"
  },
  {
    "text": "going to let you\nissue it because I don't want to hold you up. So rather than\nbeing held up, let's",
    "start": "2565270",
    "end": "2571690"
  },
  {
    "text": "just put them into a buffer. And as long as there's\nroom in the buffer, I can issue them as\nfast as I need to.",
    "start": "2571690",
    "end": "2579200"
  },
  {
    "text": "And then the memory system can\nsuck them out of the buffer as it's going along.",
    "start": "2579200",
    "end": "2586180"
  },
  {
    "text": "And so in critical places where\nthere's a bunch of stores, it stores them in the buffer if\nthe memory system can't handle.",
    "start": "2586180",
    "end": "2593710"
  },
  {
    "text": "On average, of\ncourse, it's going to go at whatever the bottleneck\nis on the left or the right.",
    "start": "2593710",
    "end": "2598900"
  },
  {
    "text": "You can't go faster\nthan whichever is the bottleneck--\nusually the memory system.",
    "start": "2598900",
    "end": "2604990"
  },
  {
    "text": "But we'd like to\nachieve that, and we don't want to have to stall\nevery time we try to do two",
    "start": "2604990",
    "end": "2610900"
  },
  {
    "text": "stores in a row, for example. By putting a little\nbit of a buffer, we can make it go faster.",
    "start": "2610900",
    "end": "2618220"
  },
  {
    "text": "Now if I try to do a load,\nthat can stall the processor",
    "start": "2618220",
    "end": "2628230"
  },
  {
    "text": "until it's satisfied. So whenever you do a load, if\nthere's no more instructions to execute it, if the next\ninstruction to execute",
    "start": "2628230",
    "end": "2635400"
  },
  {
    "text": "requires the value\nthat's being loaded, the processor has to stall\nuntil it gets that value.",
    "start": "2635400",
    "end": "2642280"
  },
  {
    "text": "So they don't want the loads\nto go through the store buffer. I mean, one solution would\nbe just put everything",
    "start": "2642280",
    "end": "2649170"
  },
  {
    "text": "into the store buffer. In some sense you'd\nbe OK, but now I haven't covered over\nmy load latency.",
    "start": "2649170",
    "end": "2655920"
  },
  {
    "text": "So instead what they do is they\ndo what's called a load bypass. They go directly to the\nmemory system for the load,",
    "start": "2655920",
    "end": "2662760"
  },
  {
    "text": "bypassing all the writes that\nyou've done up to that point and fetch it so that you\nget it to the memory system",
    "start": "2662760",
    "end": "2668760"
  },
  {
    "text": "and the load bypass takes\npriority over the store buffer. ",
    "start": "2668760",
    "end": "2675330"
  },
  {
    "text": "But there's one problem\nwith that hack, if you will. What's the problem\nwith that hack?",
    "start": "2675330",
    "end": "2681360"
  },
  {
    "text": "If I bypass the load, where\ncould I run into trouble in terms of correctness?",
    "start": "2681360",
    "end": "2687810"
  },
  {
    "text": "Yeah? STUDENT: If one your\nstores is the thing you're trying to load. CHARLES LEISERSON: If one\nof your stores is the thing you're trying to load.",
    "start": "2687810",
    "end": "2693869"
  },
  {
    "text": "Exactly. And so what happens is, as\nthe load bypass is going by,",
    "start": "2693870",
    "end": "2700470"
  },
  {
    "text": "it does an associative\ncheck in the hardware. Is the value that I'm fetching\none of the values that",
    "start": "2700470",
    "end": "2706110"
  },
  {
    "text": "is in the store buffer? And if so, it responds\nout of the store buffer directly rather than going\ninto the memory system.",
    "start": "2706110",
    "end": "2714210"
  },
  {
    "text": "Makes sense? So that's how the reordering\nhappens within the machine.",
    "start": "2714210",
    "end": "2724380"
  },
  {
    "text": "But by this token, a\nload can bypass a store to a different address.",
    "start": "2724380",
    "end": "2729904"
  },
  {
    "text": " So this is how the hardware\nends up reordering it,",
    "start": "2729905",
    "end": "2734910"
  },
  {
    "text": "because the appearance\nis that the load occurred before the store occurred\nif you are looking",
    "start": "2734910",
    "end": "2741480"
  },
  {
    "text": "at the memory from the\npoint of view of the memory, and in particular\nthe point of view of another processor that's\naccessing that memory.",
    "start": "2741480",
    "end": "2750260"
  },
  {
    "text": "So over here I said, store load. Over here it looks like\nhe did, load store.",
    "start": "2750260",
    "end": "2756555"
  },
  {
    "text": " And so that's why it doesn't\nsatisfy sequential consistency.",
    "start": "2756555",
    "end": "2764900"
  },
  {
    "text": " Yeah, question? STUDENT: So that\nstore bumper would",
    "start": "2764900",
    "end": "2771745"
  },
  {
    "text": "be one for each processor? CHARLES LEISERSON: Yeah,\nthere's one for each processor.",
    "start": "2771746",
    "end": "2778910"
  },
  {
    "text": "It's the way it gets things\ninto the memory, right? So I'll tell you,\ncomputing would be so easy if we didn't worry\nabout performance.",
    "start": "2778910",
    "end": "2785300"
  },
  {
    "text": "Because if those guys didn't\nworry about performance, they'd do the correct thing.",
    "start": "2785300",
    "end": "2791150"
  },
  {
    "text": "They'd just put them\nin in the right order. It's because we care about\nperformance that we make",
    "start": "2791150",
    "end": "2797750"
  },
  {
    "text": "our lives hard for ourselves. And then we have these\nkludges to fix them up. ",
    "start": "2797750",
    "end": "2805370"
  },
  {
    "text": "So that's what's going on\nin the hardware, that's why things get reordered.",
    "start": "2805370",
    "end": "2810570"
  },
  {
    "text": "Makes sense?  But it's not as if\nall bets are off.",
    "start": "2810570",
    "end": "2818410"
  },
  {
    "text": "And in fact, x86 has a\nmemory consistency model they call total store order.",
    "start": "2818410",
    "end": "2827590"
  },
  {
    "text": "And here's the rules.  So it's a weaker model.",
    "start": "2827590",
    "end": "2835030"
  },
  {
    "text": "And some of it is kind of\nsequentially consistent type of thing. You're talking about\nwhat can be ordered.",
    "start": "2835030",
    "end": "2840710"
  },
  {
    "text": "So first of all, loads are\nnever reordered with loads. ",
    "start": "2840710",
    "end": "2847720"
  },
  {
    "text": "Let me see here. Yeah, so you never\nreorder loads with loads.",
    "start": "2847720",
    "end": "2853359"
  },
  {
    "text": "That's not OK.  Always, you can\ncount on loads being",
    "start": "2853360",
    "end": "2861400"
  },
  {
    "text": "seen by any external\nprocessor in the same order that you issued the loads\nwithin a given processor.",
    "start": "2861400",
    "end": "2869090"
  },
  {
    "text": "So there is some rationale here. Likewise, stores are not\nreordered with stores.",
    "start": "2869090",
    "end": "2879403"
  },
  {
    "text": "That never happens. ",
    "start": "2879403",
    "end": "2884410"
  },
  {
    "text": "And then stores are not\nreordered with prior loads.",
    "start": "2884410",
    "end": "2890650"
  },
  {
    "text": "So you never move a store\nearlier past a load.",
    "start": "2890650",
    "end": "2897309"
  },
  {
    "text": "You wouldn't want to do\nthat because generally it's the other direction you're\ncovering over latency.",
    "start": "2897310",
    "end": "2902890"
  },
  {
    "text": "But in fact, they guarantee\nit doesn't happen. So you never move a\nstore before a load.",
    "start": "2902890",
    "end": "2910390"
  },
  {
    "text": "It's always move a\nload before a store. ",
    "start": "2910390",
    "end": "2917620"
  },
  {
    "text": "And then in general, a load may\nbe reordered with a prior store",
    "start": "2917620",
    "end": "2927550"
  },
  {
    "text": "to a different location,\nbut not with a prior load to the same location. So this is what were\njust talking about,",
    "start": "2927550",
    "end": "2934329"
  },
  {
    "text": "that A has to be not\nequal to B in order for it to be reordered. And at the point that\nyou're executing this,",
    "start": "2934330",
    "end": "2940720"
  },
  {
    "text": "the hardware knows\nwhat the addresses are that are being loaded\nand stored and can tell,",
    "start": "2940720",
    "end": "2952510"
  },
  {
    "text": "are they the same\nlocation or not. And so it knows whether or\nnot it's able to do that.",
    "start": "2952510",
    "end": "2957640"
  },
  {
    "text": "So the loads basically,\nyou can move loads upwards.",
    "start": "2957640",
    "end": "2965170"
  },
  {
    "text": "But you don't reorder them. And you only move\nit past a store",
    "start": "2965170",
    "end": "2971890"
  },
  {
    "text": "if it's a store to\na different address.  And so here we have\na bunch of things.",
    "start": "2971890",
    "end": "2979990"
  },
  {
    "text": "So this is basically weaker\nthan sequential consistency. There are a bunch\nof other things.",
    "start": "2979990",
    "end": "2985680"
  },
  {
    "text": "So for example, if I just\ngo back here for a second. ",
    "start": "2985680",
    "end": "2991940"
  },
  {
    "text": "The lock instructions\nrespect a total order.",
    "start": "2991940",
    "end": "2997605"
  },
  {
    "text": "The stores respect\na total order. The lock instructions\nand memory ordering",
    "start": "2997605",
    "end": "3002730"
  },
  {
    "text": "preserves what they call\ntransitive visibility. In other words, causality,\nwhich is basically the happens--",
    "start": "3002730",
    "end": "3008340"
  },
  {
    "text": "says that the happens\nbefore a relation, you can treat as if\nit's a linear order.",
    "start": "3008340",
    "end": "3015000"
  },
  {
    "text": "It's transitive as\na binary relation. So the main important ones\nare the ones at the beginning.",
    "start": "3015000",
    "end": "3023920"
  },
  {
    "text": "But it's helpful to\nknow that locks are not going to get reordered.",
    "start": "3023920",
    "end": "3030990"
  },
  {
    "text": "If you have a lock\ninstruction, they're never going to move it before things.",
    "start": "3030990",
    "end": "3036330"
  },
  {
    "text": "So here's the\nimpact of reordering on Peterson's algorithm. Sorry, no, this is not\nPeterson's algorithm yet.",
    "start": "3036330",
    "end": "3043630"
  },
  {
    "text": "This impact of\nreordering on this is that I may have written\nthings in this order,",
    "start": "3043630",
    "end": "3056810"
  },
  {
    "text": "but in fact they execute in\nsomething like this order.",
    "start": "3056810",
    "end": "3061910"
  },
  {
    "text": "And therefore, the\nordering, in this case, 2, 4, 1, 3 is going to\nproduce the value 0,",
    "start": "3061910",
    "end": "3071120"
  },
  {
    "text": "0, which was exactly\nthe value that you said couldn't possibly appear.",
    "start": "3071120",
    "end": "3076310"
  },
  {
    "text": "Well, on these\nmachines it can appear. ",
    "start": "3076310",
    "end": "3086330"
  },
  {
    "text": "And also let me say, so\ninstruction reordering violates this sequential consistency.",
    "start": "3086330",
    "end": "3094250"
  },
  {
    "text": "And by the way, this can happen. Not just in the hardware, this\ncan happen in the compiler as well.",
    "start": "3094250",
    "end": "3099500"
  },
  {
    "text": "The compiler can decide\nto reorder instructions. It's like, oh my god,\nhow can we be writing",
    "start": "3099500",
    "end": "3107930"
  },
  {
    "text": "correct code at all right. But you've written some\ncorrect parallel code, and you didn't have\nto worry about this.",
    "start": "3107930",
    "end": "3113520"
  },
  {
    "text": "So we'll talk about\nhow we get there. Yeah? STUDENT: Is the hardware geared\nto even reorder [INAUDIBLE]??",
    "start": "3113520",
    "end": "3120110"
  },
  {
    "text": "Or [INAUDIBLE] it might happen? CHARLES LEISERSON:\nIt might happen. No, there's no requirement\nthat it move things earlier.",
    "start": "3120110",
    "end": "3126059"
  },
  {
    "text": "STUDENT: Why is it not\nalways [INAUDIBLE]?? CHARLES LEISERSON:\nIt may be that there",
    "start": "3126060",
    "end": "3132470"
  },
  {
    "text": "isn't enough register space. Because as you move\nthings earlier,",
    "start": "3132470",
    "end": "3138680"
  },
  {
    "text": "you're going to have to\nhold the values longer before you're using them. ",
    "start": "3138680",
    "end": "3144789"
  },
  {
    "text": "Yeah? STUDENT: In the previous slide,\n[INAUDIBLE] load 3 [INAUDIBLE] also.",
    "start": "3144790",
    "end": "3150084"
  },
  {
    "text": "CHARLES LEISERSON: That\nload 3 in the previous--",
    "start": "3150084",
    "end": "3156832"
  },
  {
    "text": "I'm sorry, I'm not following. STUDENT: In the previous slide. CHARLES LEISERSON: Oh, the\nprevious slide, not this slide.",
    "start": "3156832",
    "end": "3163760"
  },
  {
    "text": "This one? STUDENT: Yeah. CHARLES LEISERSON: OK. STUDENT: So [INAUDIBLE]\nload 3 [INAUDIBLE]..",
    "start": "3163760",
    "end": "3171352"
  },
  {
    "text": "CHARLES LEISERSON:\nWell, I had said there's some things that I\nsaid we're no good, right?",
    "start": "3171352",
    "end": "3176680"
  },
  {
    "text": "So here it was, what did I do? I moved the loads\nearlier in that example.",
    "start": "3176680",
    "end": "3183105"
  },
  {
    "text": "But there were\nsome earlier ones. Are you talking about\neven earlier than that? STUDENT: Yeah, this one. CHARLES LEISERSON:\nOh, this one, OK.",
    "start": "3183105",
    "end": "3188830"
  },
  {
    "text": " STUDENT: So, load 3 can come\nbefore store [INAUDIBLE]..",
    "start": "3188830",
    "end": "3195792"
  },
  {
    "start": "3195792",
    "end": "3201680"
  },
  {
    "text": "CHARLES LEISERSON: So let's see. So this is the original thing. Store 3 is before store\n4, and load 3 and load 4",
    "start": "3201680",
    "end": "3209000"
  },
  {
    "text": "are afterwards, right? So the stores have to\nbe in the same order and the loads have to\nbe in the same order.",
    "start": "3209000",
    "end": "3216260"
  },
  {
    "text": "But the loads can\ngo before the stores if they're to a\ndifferent address. ",
    "start": "3216260",
    "end": "3222740"
  },
  {
    "text": "So in this case, we\nmoved load 3 up two, and we moved load 4 up one.",
    "start": "3222740",
    "end": "3228110"
  },
  {
    "text": "We could have maybe move\nload 4 up before store 3, but maybe they were\nto the same address.",
    "start": "3228110",
    "end": "3234153"
  },
  {
    "text": "STUDENT: OK, so load 3's store\ndoesn't mean that they're from the same address? CHARLES LEISERSON: No,\nno, this is abstract.",
    "start": "3234154",
    "end": "3243319"
  },
  {
    "text": " You got it? OK.",
    "start": "3243320",
    "end": "3248530"
  },
  {
    "text": " So this is why things\ncan get reordering.",
    "start": "3248530",
    "end": "3253830"
  },
  {
    "text": "And in that case, we can end up\nwith a reordering that gives us something that we\ndon't expect when we're",
    "start": "3253830",
    "end": "3259740"
  },
  {
    "text": "synchronizing through memory. Never write\nnon-deterministic code,",
    "start": "3259740",
    "end": "3267310"
  },
  {
    "text": "because you deal\nwith this stuff-- unless you have to. ",
    "start": "3267310",
    "end": "3274770"
  },
  {
    "text": "Unfortunately, sometimes, it's\nnot fast enough otherwise.",
    "start": "3274770",
    "end": "3280470"
  },
  {
    "text": "Now let's go back and look\nat Peterson's algorithm and what can go wrong\nwith Peterson's algorithm.",
    "start": "3280470",
    "end": "3287400"
  },
  {
    "text": "So what reordering might happen\nhere that would completely",
    "start": "3287400",
    "end": "3292410"
  },
  {
    "text": "screw up Peterson's algorithm? ",
    "start": "3292410",
    "end": "3303550"
  },
  {
    "text": "A hint, we're looking\nfor a load that might happen before a store. What load would be really\nbad to happen before a store?",
    "start": "3303550",
    "end": "3310470"
  },
  {
    "start": "3310470",
    "end": "3317940"
  },
  {
    "text": "Yeah? STUDENT: If you load turn to\n[INAUDIBLE] before the store",
    "start": "3317940",
    "end": "3323280"
  },
  {
    "text": "turn [INAUDIBLE]. CHARLES LEISERSON:\nYou load turn earlier.",
    "start": "3323280",
    "end": "3330599"
  },
  {
    "text": "Maybe. Let me think, that's\nnot the one I chose, but maybe that could be right.",
    "start": "3330600",
    "end": "3338420"
  },
  {
    "text": "Well, you can't move it\nbefore the store to turn.",
    "start": "3338420",
    "end": "3343745"
  },
  {
    "text": "STUDENT: All right. CHARLES LEISERSON: OK, yeah? STUDENT: Maybe Alice\nloads B_wants to early?",
    "start": "3343746",
    "end": "3350763"
  },
  {
    "text": "CHARLES LEISERSON: Yeah, if\nAlice loads B_wants to early, and if they both do, then\nthey could be reordered",
    "start": "3350763",
    "end": "3360460"
  },
  {
    "text": "before the store of\nA_wants and B_wants,",
    "start": "3360460",
    "end": "3367839"
  },
  {
    "text": "because that's a load\nand B_wants-- well,",
    "start": "3367840",
    "end": "3373180"
  },
  {
    "text": "Alice isn't touching\nB_wants so why can't it just move it earlier. Those are not the\nsame locations.",
    "start": "3373180",
    "end": "3379550"
  },
  {
    "text": "So suppose it reorders\nthose, now what happens? ",
    "start": "3379550",
    "end": "3385602"
  },
  {
    "text": "STUDENT: So [INAUDIBLE]\nB_wants [INAUDIBLE] too early?",
    "start": "3385602",
    "end": "3394422"
  },
  {
    "text": "CHARLES LEISERSON: Yeah, it\nwould be false too early, right? STUDENT: And the\nsame with A_wants. CHARLES LEISERSON:\nAnd the same with A.",
    "start": "3394422",
    "end": "3399865"
  },
  {
    "text": "And now they discover they're in\nthis critical section together.",
    "start": "3399865",
    "end": "3405140"
  },
  {
    "text": "And if there's one thing,\nwe don't want Alice and Bob in the same critical section. ",
    "start": "3405140",
    "end": "3412838"
  },
  {
    "text": "Does that makes sense? So you've got this problem.",
    "start": "3412839",
    "end": "3418660"
  },
  {
    "text": "There's reordering going on. And, yikes, how\ncould you possibly",
    "start": "3418660",
    "end": "3426150"
  },
  {
    "text": "write any parallel code\nand any concurrent code? Well, they say, well,\nwe'll put in a kludge.",
    "start": "3426150",
    "end": "3434538"
  },
  {
    "text": "They introduce some\nnew instructions. And this instruction is\ncalled a memory fence. ",
    "start": "3434538",
    "end": "3441360"
  },
  {
    "text": "So don't get me wrong. They need to do stuff like this.",
    "start": "3441360",
    "end": "3446819"
  },
  {
    "text": "There is an argument to say\nthey should still build machines with sequential\nconsistency because it's",
    "start": "3446820",
    "end": "3452400"
  },
  {
    "text": "been done in the past. It is hard work for the\nhardware designers to do that.",
    "start": "3452400",
    "end": "3458020"
  },
  {
    "text": "And so as long as\nthe software people say, well, we can handle\nweak consistency models,",
    "start": "3458020",
    "end": "3464010"
  },
  {
    "text": "[INAUDIBLE] says,\nOK, your problem. ",
    "start": "3464010",
    "end": "3469710"
  },
  {
    "text": "So Mark Hill, who's a professor\nat University of Wisconsin, has some wonderful\nessays saying why",
    "start": "3469710",
    "end": "3479790"
  },
  {
    "text": "he thinks that parallel\nmachines should support sequential consistency, and that\nthe complaints of people not",
    "start": "3479790",
    "end": "3488730"
  },
  {
    "text": "having it supported, that those\npeople they could support it if they really wanted to.",
    "start": "3488730",
    "end": "3494640"
  },
  {
    "text": "And I tend to be\npersuaded by him. He's a very good\nthinker, in my opinion.",
    "start": "3494640",
    "end": "3501016"
  },
  {
    "text": "But in any case, so what\nwe have-- yeah, question? STUDENT: How much\nof a difference does it make to sacrifice?",
    "start": "3501017",
    "end": "3510829"
  },
  {
    "text": "CHARLES LEISERSON: So\nhe talks about this and what he thinks\nthe differences is, but it's apples and oranges. Because sometimes\npart of it is what's",
    "start": "3510830",
    "end": "3517700"
  },
  {
    "text": "the price of having\nbugs in your code. ",
    "start": "3517700",
    "end": "3523009"
  },
  {
    "text": "Because that's what\nhappens is programmers can't deal with this. And so we end up with\nbugs in our code.",
    "start": "3523010",
    "end": "3530029"
  },
  {
    "text": "But they can reason about\nsequential consistency. It's hard, but they\ncan reason about it. When you start having relaxed\nmemory consistency, very",
    "start": "3530030",
    "end": "3537590"
  },
  {
    "text": "tricky. So let's talk about\nwhat the solutions are. And his argument is\nthat the performance",
    "start": "3537590",
    "end": "3544339"
  },
  {
    "text": "doesn't have to be that bad. There was a series\nof machines made by a company called Silicon\nGraphics, which were all",
    "start": "3544340",
    "end": "3554710"
  },
  {
    "text": "sequentially consistent. Parallel machines, all\nsequentially consistent. And they were fine.",
    "start": "3554710",
    "end": "3560150"
  },
  {
    "text": "But they got killed\nin the market because they couldn't implement\nprocessors as well as Intel",
    "start": "3560150",
    "end": "3565790"
  },
  {
    "text": "does. And so they ended up\ngetting killed in the market and getting bought\nout, and so forth.",
    "start": "3565790",
    "end": "3573583"
  },
  {
    "text": "And now their\npeople are all over, and the people who were at\nSilicon Graphics, many of them really understand\nparallel computing well,",
    "start": "3573583",
    "end": "3580520"
  },
  {
    "text": "the hardware aspects of it. So a memory fence\nis a hardware action",
    "start": "3580520",
    "end": "3586160"
  },
  {
    "text": "that forces an\nordering constraint between the instructions\nbefore and after the fence. So the idea is, you can put a\nmemory fence in there and now",
    "start": "3586160",
    "end": "3595760"
  },
  {
    "text": "that memory fence\ncan't be reordered with things around it. It maintains its relative\nordering site to other things.",
    "start": "3595760",
    "end": "3603110"
  },
  {
    "text": "And that way you can prevent. So one way you could make any\ncode be sequentially consistent",
    "start": "3603110",
    "end": "3610490"
  },
  {
    "text": "is to put a memory fence\nbetween every instruction.",
    "start": "3610490",
    "end": "3615560"
  },
  {
    "text": "Not very practical, but\nthere's a subset of those that actually would matter. So the idea is to put\nin just the run one.",
    "start": "3615560",
    "end": "3622490"
  },
  {
    "text": "You can issue them\nexplicitly as an instruction. In the x86, it's called\nthe mfence instruction.",
    "start": "3622490",
    "end": "3628849"
  },
  {
    "text": " Or it can be\nperformed implicitly, so there are other things like\nlocking, exchanging, and other",
    "start": "3628850",
    "end": "3636859"
  },
  {
    "text": "synchronizing instructions. They implicitly\nhave a memory fence. Now the compiler\nthat we're using",
    "start": "3636860",
    "end": "3643640"
  },
  {
    "text": "implements a memory\nfence via the function atomic_thread_fence, which is\ndefined in the C header file",
    "start": "3643640",
    "end": "3651710"
  },
  {
    "text": "stdatomic.h. And you can take a look\nat the reference material",
    "start": "3651710",
    "end": "3657230"
  },
  {
    "text": "on that to understand a\nlittle bit more about that. The typical cost\non most machines",
    "start": "3657230",
    "end": "3662270"
  },
  {
    "text": "is comparable to that\nof an L2 cache access. Now one of the things that\nis nice to see is happening",
    "start": "3662270",
    "end": "3670910"
  },
  {
    "text": "is they are bringing that down. They're making that cheaper. But it's interesting that\nIntel had one processor where",
    "start": "3670910",
    "end": "3682730"
  },
  {
    "text": "the memory fence\nwas actually slower than the lock instruction. ",
    "start": "3682730",
    "end": "3689940"
  },
  {
    "text": "And you say, wait a minute,\nthe lock instruction has an implicit\nmemory fence in it.",
    "start": "3689940",
    "end": "3695150"
  },
  {
    "text": " I mean, you've got a memory\nfence in the lock instruction.",
    "start": "3695150",
    "end": "3700330"
  },
  {
    "text": "How could the memory\nfence be slower? So I don't know exactly how this\nhappens, but here's my theory.",
    "start": "3700330",
    "end": "3708830"
  },
  {
    "text": "So you've got these\nengineering teams",
    "start": "3708830",
    "end": "3714020"
  },
  {
    "text": "that are designing\nthe next processor. ",
    "start": "3714020",
    "end": "3720950"
  },
  {
    "text": "And they of course\nwant it to go fast. So how do they know whether\nit's going to go fast? They have a bunch\nof benchmark codes",
    "start": "3720950",
    "end": "3728240"
  },
  {
    "text": "and that they discover,\nwell, now that we're getting the age of parallelism,\nall these parallel codes,",
    "start": "3728240",
    "end": "3733970"
  },
  {
    "text": "they're using locking. So they look and\nthey say, OK, we're",
    "start": "3733970",
    "end": "3739160"
  },
  {
    "text": "going to put our best engineer\non making locks go fast. And then they see\nthat, well, there's",
    "start": "3739160",
    "end": "3745220"
  },
  {
    "text": "some other codes that maybe\ngo slow because they've got fences. But there aren't too\nmany codes that just need fences, explicit fences.",
    "start": "3745220",
    "end": "3753225"
  },
  {
    "text": "In fact, most of\nthem use [INAUDIBLE].. So they put their junior\nengineer on the fence code,",
    "start": "3753225",
    "end": "3759620"
  },
  {
    "text": "not recognizing that, hey, the\nleft hand and the right hand",
    "start": "3759620",
    "end": "3765410"
  },
  {
    "text": "should know what\neach other is doing. And so anyway,\nyou get an anomaly like that where it turned out\nthat it was actually fastest--",
    "start": "3765410",
    "end": "3774920"
  },
  {
    "text": "we discovered as we're\nimplementing the silk runtime-- to do a fence by just\ndoing a lock on a location",
    "start": "3774920",
    "end": "3782492"
  },
  {
    "text": "that we didn't care\nabout the lock. We just did a lock instruction. And that actually went faster\nthan the fence instruction.",
    "start": "3782492",
    "end": "3788510"
  },
  {
    "text": "Weird. But these systems are\nall built by humans.",
    "start": "3788510",
    "end": "3795560"
  },
  {
    "text": "So if we have this code and we\nwant to restore consistency,",
    "start": "3795560",
    "end": "3800750"
  },
  {
    "text": "where might we put\na memory fence? ",
    "start": "3800750",
    "end": "3809880"
  },
  {
    "text": "Yeah? STUDENT: After setting the turn? CHARLES LEISERSON:\nAfter setting turn. You mean like that? STUDENT: Yeah.",
    "start": "3809880",
    "end": "3815023"
  },
  {
    "text": "CHARLES LEISERSON: Yeah. OK, so that you can't\nend up loading it",
    "start": "3815023",
    "end": "3821400"
  },
  {
    "text": "before it's stored too. And that kind of works, sort of.",
    "start": "3821400",
    "end": "3830486"
  },
  {
    "text": "You also have to make sure that\nthe compiler doesn't screw you over. ",
    "start": "3830487",
    "end": "3836220"
  },
  {
    "text": "And the reason\nthe compiler might screw you over is that it\nlooks at B_wants and turn B,",
    "start": "3836220",
    "end": "3843450"
  },
  {
    "text": "it says, oh, I'm in a loop here. So let me load the value and\nkeep using the value over. And I don't see anybody\nusing this value.",
    "start": "3843450",
    "end": "3850050"
  },
  {
    "text": " Right, so it loads the value. And now it just keeps\nchecking the value.",
    "start": "3850050",
    "end": "3859349"
  },
  {
    "text": "The value has changed\non the outside, but it's stored\nthat in a register so that that loop\nwill go really fast.",
    "start": "3859350",
    "end": "3866730"
  },
  {
    "text": "And so it goes really\nfast, and you're spinning and you're dead in the water. So in addition to\nthe memory fence,",
    "start": "3866730",
    "end": "3873960"
  },
  {
    "text": "you must declare\nvariables as volatile to prevent the compiler\nfrom optimizing them away.",
    "start": "3873960",
    "end": "3879869"
  },
  {
    "text": "When you declare\nsomething as volatile, you say, even if you read\nit, if the compiler reads it.",
    "start": "3879870",
    "end": "3885539"
  },
  {
    "text": "When it reads it a\nsecond time, it's still got to read it a\nsecond time from memory.",
    "start": "3885540",
    "end": "3891390"
  },
  {
    "text": "It cannot assume that the\nvalue is going to be stable. You're saying it\nmay change outside.",
    "start": "3891390",
    "end": "3897869"
  },
  {
    "text": "And then you also, it turns\nout, may need compiler fences around frob and borf to\nprevent them reordering",
    "start": "3897870",
    "end": "3907380"
  },
  {
    "text": "some of frob and borf because\nthat stuff can also sometimes get moved outside the loop, the\nactual code in frob and borf,",
    "start": "3907380",
    "end": "3915690"
  },
  {
    "text": "because it wants\nto, it says, oh. It doesn't realize always that\nthere's no what's going on.",
    "start": "3915690",
    "end": "3925630"
  },
  {
    "text": "So the C11 language standard\ndefines its own weak memory model.",
    "start": "3925630",
    "end": "3931170"
  },
  {
    "text": "And you can declare\nthings as atomic, and there are a bunch\nof things there. And here's a reference\nwhere you can",
    "start": "3931170",
    "end": "3936510"
  },
  {
    "text": "take a look at the\natomic stuff that's available if you want to do\nthis dangerous programming.",
    "start": "3936510",
    "end": "3943800"
  },
  {
    "text": " In general for implementing\ngeneral mutexes,",
    "start": "3943800",
    "end": "3953850"
  },
  {
    "text": "if you're going to use\nonly load and store, there's a very nice theorem\nby Burns and Lynch--",
    "start": "3953850",
    "end": "3961200"
  },
  {
    "text": "this is Nancy Lynch who's\non the faculty here-- that says any n-thread\ndeadlock-free mutual exclusion",
    "start": "3961200",
    "end": "3967560"
  },
  {
    "text": "algorithm using only load and\nstore requires order n space--",
    "start": "3967560",
    "end": "3972840"
  },
  {
    "text": "the space is linear. So this answers the question\nthat I had answered orally before.",
    "start": "3972840",
    "end": "3978330"
  },
  {
    "text": "And then it turns\nout that if you want an n-thread deadlock-free\nmutual exclusion algorithm,",
    "start": "3978330",
    "end": "3988710"
  },
  {
    "text": "you actually have to use some\nkind of expensive operation, such as a memory fence or\nan atomic compare-and-swap.",
    "start": "3988710",
    "end": "3994350"
  },
  {
    "text": "So in some sense,\nhardware designers are justified when they\nimplement special operations",
    "start": "3994350",
    "end": "3999990"
  },
  {
    "text": "to support animosity,\nas opposed to just doing using these clever algorithms.",
    "start": "3999990",
    "end": "4005029"
  },
  {
    "text": "Those algorithms are\nreally at some level of theoretical interest.",
    "start": "4005030",
    "end": "4010940"
  },
  {
    "text": " So let's take a look at one\nof these special instructions.",
    "start": "4010940",
    "end": "4017000"
  },
  {
    "text": "And the one I picked\nis compare-and-swap because it's the one that's\nprobably most available.",
    "start": "4017000",
    "end": "4022130"
  },
  {
    "text": "There are others like\ntest-and-set, and so forth. And so when you do\nlock-free algorithms,",
    "start": "4022130",
    "end": "4032162"
  },
  {
    "text": "when you want to build\nalgorithms that are lock free, and we'll talk\nabout why you might want to do lock-free algorithms,\nthere's loads and store,",
    "start": "4032162",
    "end": "4039920"
  },
  {
    "text": "and then there's this CAS\ninstruction, Compare-and-Swap. ",
    "start": "4039920",
    "end": "4046790"
  },
  {
    "text": "In stdatomic.h, it is called\natomic_compare_exchange_strong.",
    "start": "4046790",
    "end": "4053670"
  },
  {
    "text": "And it can operate on\nvarious integer types. It cannot compare and swap\nfloating point numbers.",
    "start": "4053670",
    "end": "4060570"
  },
  {
    "text": "It can only compare\nand swap integers, and sometimes that's a pain.",
    "start": "4060570",
    "end": "4066320"
  },
  {
    "text": "And so here's the definition\nof the CAS instruction. Basically, what it does\nis it has an address.",
    "start": "4066320",
    "end": "4075500"
  },
  {
    "text": "And then it has two values, the\nold value and the new value.",
    "start": "4075500",
    "end": "4080720"
  },
  {
    "text": "And what it does is\nit checks to see, is the value that is\nin that memory location",
    "start": "4080720",
    "end": "4086810"
  },
  {
    "text": "the same as the old value. And if it is, it sets it\nto the new value and says,",
    "start": "4086810",
    "end": "4092240"
  },
  {
    "text": "I succeeded. And otherwise, it says I failed. So it swaps it if the value\nthat I'm holding, the old value,",
    "start": "4092240",
    "end": "4100818"
  },
  {
    "text": "is the same as what's in there. So I can read the\nvalue, if I want,",
    "start": "4100819",
    "end": "4107899"
  },
  {
    "text": "then do whatever I want to do. And then before I\nupdate it, I can say,",
    "start": "4107899",
    "end": "4113639"
  },
  {
    "text": "update it only if the\nvalue hasn't changed. And that's what the\ncompare and swap does.",
    "start": "4113640",
    "end": "4120100"
  },
  {
    "text": "Does that makes sense? And it does that\nall atomically,. And there's an\nimplicit fence in there",
    "start": "4120100",
    "end": "4126830"
  },
  {
    "text": "so things don't get\nreordered around it. It's all done as one.",
    "start": "4126830",
    "end": "4132850"
  },
  {
    "text": "The hardware ensures that\nnothing can interfere in the middle of this.",
    "start": "4132850",
    "end": "4138818"
  },
  {
    "text": "It's actually comparing the\nold value to what's in there,",
    "start": "4138819",
    "end": "4145028"
  },
  {
    "text": "and swapping in the new,\nall as one operation. Or it says, nope, the\nvalue changed, therefore",
    "start": "4145029",
    "end": "4151450"
  },
  {
    "text": "it just returned false, and\nthe value didn't get updated. ",
    "start": "4151450",
    "end": "4157568"
  },
  {
    "text": "So it turns out that you can\ndo an n-thread deadlock-free",
    "start": "4157569",
    "end": "4162929"
  },
  {
    "text": "mutual exclusion algorithm\nwith compare-and-swap using only constant space.",
    "start": "4162930",
    "end": "4168880"
  },
  {
    "text": "And here's the way you do it. And this is basically just the\nspace for the new text itself.",
    "start": "4168880",
    "end": "4176409"
  },
  {
    "text": "So you take a look at the\nlock instruction, and what you do is you spin, which is\nto say you block, until you",
    "start": "4176410",
    "end": "4189589"
  },
  {
    "text": "finally get the value true. So you're trying\nto swap in true. So true says that\nsomebody holds the lock.",
    "start": "4189590",
    "end": "4197960"
  },
  {
    "text": "I say the old value was false. If it's true, then the\nswap doesn't succeed",
    "start": "4197960",
    "end": "4206270"
  },
  {
    "text": "and you just keep spinning. And then otherwise,\nyou swap in the value",
    "start": "4206270",
    "end": "4211920"
  },
  {
    "text": "and now you're ready to go. And to unlock it, you just\nhave to set it to false.",
    "start": "4211920",
    "end": "4219120"
  },
  {
    "text": "Question? STUDENT: Why does\nit de-reference the pointer in the lock? CHARLES LEISERSON: Why does\nit de-reference the pointer?",
    "start": "4219120",
    "end": "4225590"
  },
  {
    "text": "Because you're saying,\nwhat memory location are you pointing to.",
    "start": "4225590",
    "end": "4230960"
  },
  {
    "text": "You're interested in\ncomparing with the value in that location.",
    "start": "4230960",
    "end": "4237090"
  },
  {
    "text": "So it is a memory operation. So I'm naming the\nmemory location.",
    "start": "4237090",
    "end": "4243080"
  },
  {
    "text": "I'm saying, if the value\nis false, swap in the value",
    "start": "4243080",
    "end": "4248810"
  },
  {
    "text": "true and return true. And if it's true, then don't\ndo anything and tell me",
    "start": "4248810",
    "end": "4260520"
  },
  {
    "text": "that you didn't succeed,\nin which case in this loop it'll just keep trying\nagain and again and again.",
    "start": "4260520",
    "end": "4265980"
  },
  {
    "text": "It's a spinning lock. Question? STUDENT: [INAUDIBLE]\nwhen you saying",
    "start": "4265980",
    "end": "4271700"
  },
  {
    "text": "that you're [INAUDIBLE]\nthe value at that address before passing it into CAS.",
    "start": "4271700",
    "end": "4279000"
  },
  {
    "text": "Yeah, there shouldn't be a\npointer de-reference after [INAUDIBLE]. CHARLES LEISERSON:\nOh, you're right.",
    "start": "4279000",
    "end": "4284190"
  },
  {
    "text": " A bug.",
    "start": "4284190",
    "end": "4290230"
  },
  {
    "text": "Gotcha, yep,\ngotcha, I'll fix it. ",
    "start": "4290230",
    "end": "4300870"
  },
  {
    "text": "So let's take a look at a way\nthat you might want to use CAS.",
    "start": "4300870",
    "end": "4306570"
  },
  {
    "text": "So here's a summing problem. So suppose I want to compute\non some variable of type x.",
    "start": "4306570",
    "end": "4320610"
  },
  {
    "text": "And I've got an array that's-- what is that-- that's a\nmillion elements long.",
    "start": "4320610",
    "end": "4327280"
  },
  {
    "text": "And what I'm going\nto do is basically run through my array in\nparallel and accumulate things",
    "start": "4327280",
    "end": "4333810"
  },
  {
    "text": "into the result. And so this is actually\nincorrect code.",
    "start": "4333810",
    "end": "4341190"
  },
  {
    "text": "Why is this incorrect code? ",
    "start": "4341190",
    "end": "4350722"
  },
  {
    "text": "Yeah? STUDENT: Extra like a floating\npoint taken [INAUDIBLE]",
    "start": "4350722",
    "end": "4356480"
  },
  {
    "text": "and so forth? CHARLES LEISERSON: Maybe,\nlet's assume we have fast math. ",
    "start": "4356480",
    "end": "4366720"
  },
  {
    "text": "Yeah? STUDENT: You have multiple\ntransfer and updated results at the same time? CHARLES LEISERSON:\nWhich means what? STUDENT: Which means\nyou have a race.",
    "start": "4366720",
    "end": "4372870"
  },
  {
    "text": "CHARLES LEISERSON:\nYou have a race. You have a race. Everybody is trying\nto update result. You've got a gazillion\nstrands in parallel all trying",
    "start": "4372870",
    "end": "4381120"
  },
  {
    "text": "to pound on updating result.",
    "start": "4381120",
    "end": "4386460"
  },
  {
    "text": "So one way you could solve\nthis is with mutual exclusion.",
    "start": "4386460",
    "end": "4392730"
  },
  {
    "text": "So I introduce a mutex L.\nAnd I lock before I update",
    "start": "4392730",
    "end": "4399600"
  },
  {
    "text": "the result, and then I unlock. Why did I put the\ncomputation on my array of i?",
    "start": "4399600",
    "end": "4407400"
  },
  {
    "text": "Why did I put that\noutside the lock? ",
    "start": "4407400",
    "end": "4412856"
  },
  {
    "text": "STUDENT: It's [INAUDIBLE]\nfunction is very expensive. That way, you're\nonly locking the--",
    "start": "4412856",
    "end": "4417927"
  },
  {
    "text": "CHARLES LEISERSON:\nYeah, whenever you lock, you want to lock for the\nminimum time possible. Because otherwise you're\nlocking everybody else",
    "start": "4417928",
    "end": "4424730"
  },
  {
    "text": "out from doing anything. ",
    "start": "4424730",
    "end": "4429739"
  },
  {
    "text": "So that was a smart thing\nin that particular code. ",
    "start": "4429740",
    "end": "4435139"
  },
  {
    "text": "So that's the typical\nlocking solution. But look at what might happen. What if the operating\nsystem decides",
    "start": "4435140",
    "end": "4441200"
  },
  {
    "text": "to swap out a loop iteration\njust after it acquires mutext? As you go down, it says lock.",
    "start": "4441200",
    "end": "4447290"
  },
  {
    "text": "You get the lock, and now\nthe operating says, oops, your time quantum is up. Somebody else comes in\nand starts to compute.",
    "start": "4447290",
    "end": "4454580"
  },
  {
    "text": "What's going to happen now? ",
    "start": "4454580",
    "end": "4463690"
  },
  {
    "text": "What's the problem\nthat you might observe? Yeah? STUDENT: [INAUDIBLE] if\nthey're [INAUDIBLE] computation",
    "start": "4463690",
    "end": "4472718"
  },
  {
    "text": "[INAUDIBLE] have to [INAUDIBLE]. CHARLES LEISERSON:\nYeah, everybody's going to basically\njust sit there waiting",
    "start": "4472718",
    "end": "4478590"
  },
  {
    "text": "to acquire the lock because\nthe strand that has the lock",
    "start": "4478590",
    "end": "4484889"
  },
  {
    "text": "is not making progress, because\nit's sitting on the side. It's been these scheduled. That's bad, generally.",
    "start": "4484890",
    "end": "4492270"
  },
  {
    "text": "You'd like to think that\neverybody who's running could continue to run. Yeah?",
    "start": "4492270",
    "end": "4497420"
  },
  {
    "text": " STUDENT: Well, I guess\nunder what circumstances",
    "start": "4497420",
    "end": "4504020"
  },
  {
    "text": "might be useful for\na processor to have this running on multi-threads\ninstead of multiple processors",
    "start": "4504020",
    "end": "4515290"
  },
  {
    "text": "simultaneously? CHARLES LEISERSON: No, so\nthis the multiple threads are running on multiple\nprocessors, right?",
    "start": "4515290",
    "end": "4522217"
  },
  {
    "text": "STUDENT: What do you\nmean by the time quantum? CHARLES LEISERSON:\nSo one of these guys says, so I'm running a thread,\nand that thread's time quantum",
    "start": "4522217",
    "end": "4531615"
  },
  {
    "text": "expires. STUDENT: Oh, that\nprocessor's multiple threads. CHARLES LEISERSON: Right. STUDENT: OK. CHARLES LEISERSON: So I've got\na whole bunch of processors",
    "start": "4531615",
    "end": "4539840"
  },
  {
    "text": "with a thread on\neach, let's say. And I've got a bunch of threads. The operating system\nhas several threads",
    "start": "4539840",
    "end": "4545000"
  },
  {
    "text": "that are standing by\nwaiting for their turn. And one of them grabs the\nlock and then the scheduler",
    "start": "4545000",
    "end": "4552085"
  },
  {
    "text": "comes in and says, oops,\nI'm going to take you off, put somebody else in. But meanwhile, everybody else is\nthere trying to make progress.",
    "start": "4552085",
    "end": "4559340"
  },
  {
    "text": "And this guy is holding\nthe key to going forward. You thought you were\nonly grabbing the lock",
    "start": "4559340",
    "end": "4564470"
  },
  {
    "text": "for a short period of time. But instead, the\noperating system came in and made you\ntake a long time.",
    "start": "4564470",
    "end": "4573080"
  },
  {
    "text": "So this is the kind\nof system issue that you get into when you\nstart using things like locks.",
    "start": "4573080",
    "end": "4579440"
  },
  {
    "text": "So all the other loop\niterations have to wait. So it doesn't matter if--",
    "start": "4579440",
    "end": "4585220"
  },
  {
    "text": "yeah, question? STUDENT: How does the\n[INAUDIBLE] reducer have [INAUDIBLE]?",
    "start": "4585220",
    "end": "4591450"
  },
  {
    "text": "CHARLES LEISERSON: So that's\none solution to this, yep. STUDENT: How does it do it? CHARLES LEISERSON:\nHow does it do it?",
    "start": "4591450",
    "end": "4598000"
  },
  {
    "text": "We have the paper online. I had the things for\nexplaining how reducers work.",
    "start": "4598000",
    "end": "4605500"
  },
  {
    "text": "And there's too much stuff. I always have way more stuff\nto talk about than I ever",
    "start": "4605500",
    "end": "4612310"
  },
  {
    "text": "get a chance to talk about. So that was one where\nI said, OK, yeah.",
    "start": "4612310",
    "end": "4619349"
  },
  {
    "text": "STUDENT: OK. CHARLES LEISERSON: OK.  So all we want to\ndo is atomically",
    "start": "4619350",
    "end": "4626230"
  },
  {
    "text": "execute a load of x\nfollowed by a store of x. So instead of doing\nit with locks,",
    "start": "4626230",
    "end": "4631940"
  },
  {
    "text": "I can use CAS to\ndo the same thing, and I'll get much\nbetter properties. So here's the CAS solution.",
    "start": "4631940",
    "end": "4638719"
  },
  {
    "text": "So what I do is I\nalso compute a temp, and then I have these\nvariables old and new.",
    "start": "4638720",
    "end": "4644179"
  },
  {
    "text": "I store the old result. And\nthen I add the temporary result",
    "start": "4644180",
    "end": "4651370"
  },
  {
    "text": "that I've computed to the\nold to get the new value. And if it turns out that the old\nvalue is exactly the same as it",
    "start": "4651370",
    "end": "4664570"
  },
  {
    "text": "used to be, then I can\nswap in the new value,",
    "start": "4664570",
    "end": "4671000"
  },
  {
    "text": "which includes that increment. ",
    "start": "4671000",
    "end": "4677060"
  },
  {
    "text": "And if not, then I go\nback and I do it again. I once again load, add,\nand try to swap in again.",
    "start": "4677060",
    "end": "4683390"
  },
  {
    "text": " And so now what happens if\nthe operating system swaps out",
    "start": "4683390",
    "end": "4690650"
  },
  {
    "text": "a loop iteration? ",
    "start": "4690650",
    "end": "4696219"
  },
  {
    "text": "Yeah? STUDENT: It's OK because\nwhenever this is put back on,",
    "start": "4696220",
    "end": "4701698"
  },
  {
    "text": "then you know\nit'll be different. CHARLES LEISERSON: It'll be\nnew values, it'll ignore it, and all the other guys\ncan just keep going.",
    "start": "4701698",
    "end": "4708510"
  },
  {
    "text": "So that's one of\nthe great advantages of lock-free algorithms. And I have in here several\nother lock-free algorithms.",
    "start": "4708510",
    "end": "4717780"
  },
  {
    "text": "The thing you should\npay attention in here is to what's called\nthe ABA problem, which",
    "start": "4717780",
    "end": "4724440"
  },
  {
    "text": "is an anomaly with\ncompare-and-swap that you can get into. This is a situation\nwhere you think",
    "start": "4724440",
    "end": "4731940"
  },
  {
    "text": "you're using compare-and-swap,\nyou say is it the old value. It turns out that the\nvalue is the same,",
    "start": "4731940",
    "end": "4737100"
  },
  {
    "text": "but other people have come in\nand done stuff but happened to restore the same value. But you assume it's\nthe same situation,",
    "start": "4737100",
    "end": "4744330"
  },
  {
    "text": "even though the\nsituation has changed but the value is the same. That's called the ABA problem.",
    "start": "4744330",
    "end": "4750090"
  },
  {
    "text": "So you can take a\nlook at it in here. So the main thing\nfor all this stuff",
    "start": "4750090",
    "end": "4755730"
  },
  {
    "text": "is, this is really\ninteresting stuff. Professor Nir Shavit\nteaches a class where",
    "start": "4755730",
    "end": "4761940"
  },
  {
    "text": "this is the content of\nthe class for the semester is all these really\ndangerous algorithms.",
    "start": "4761940",
    "end": "4772190"
  },
  {
    "text": "And so I encourage you, if\nyou're interested in that. The world needs more\npeople who understand these kinds of algorithms.",
    "start": "4772190",
    "end": "4778410"
  },
  {
    "text": "And it needs to find ways\nto help people program fast where people don't have\nto know this stuff,",
    "start": "4778410",
    "end": "4785200"
  },
  {
    "text": "because this is\nreally tricky stuff. So we need both-- both to make it so\nthat we have people",
    "start": "4785200",
    "end": "4792930"
  },
  {
    "text": "who are talented in\nthis way, and also that we don't need\ntheir talents.",
    "start": "4792930",
    "end": "4798200"
  },
  {
    "text": "OK, thanks, everybody. ",
    "start": "4798200",
    "end": "4809943"
  }
]