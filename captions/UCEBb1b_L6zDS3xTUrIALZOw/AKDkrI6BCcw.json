[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "7410"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "7410",
    "end": "13960"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13960",
    "end": "19790"
  },
  {
    "text": "ocw.mit.edu.  PROFESSOR: So we'll start off\nby going over the Quiz Two",
    "start": "19790",
    "end": "26860"
  },
  {
    "text": "practice questions. So, (1.1). In Python a subclass could\noverride methods of its",
    "start": "26860",
    "end": "32390"
  },
  {
    "text": "superclass. What say you all? True? All right. There are some repeat people\nfrom last night, so they know",
    "start": "32390",
    "end": "39670"
  },
  {
    "text": "these already. Standard deviation, coefficient\nof variation are different names for\nthe same thing.",
    "start": "39670",
    "end": "45230"
  },
  {
    "text": "True or false? AUDIENCE: False. PROFESSOR: False. All right. (1.3.)",
    "start": "45230",
    "end": "52430"
  },
  {
    "text": "AUDIENCE: Can you go over\nwhat the coefficient of variation is? PROFESSOR: So, coefficient\nof variation.",
    "start": "52430",
    "end": "58600"
  },
  {
    "text": "It is-- ",
    "start": "58600",
    "end": "64430"
  },
  {
    "text": "I have to write big\nfor the camera. ",
    "start": "64430",
    "end": "72890"
  },
  {
    "text": "Is that right? People who haven't\nasked a question. ",
    "start": "72890",
    "end": "79820"
  },
  {
    "text": "It's the other way\naround, right? Coefficient of variation is the\nstandard deviation divided",
    "start": "79820",
    "end": "88150"
  },
  {
    "text": "by the mean. What does this tell you?",
    "start": "88150",
    "end": "93200"
  },
  {
    "text": "Like, what sort of information\ndoes the coefficient of variation tell you? ",
    "start": "93200",
    "end": "100100"
  },
  {
    "text": "Anyone?  So, it's another way of telling\nif your distribution",
    "start": "100100",
    "end": "107400"
  },
  {
    "text": "is very widely spread. So, what it's getting at is--",
    "start": "107400",
    "end": "114829"
  },
  {
    "text": "it's trying to help you\ncompare your standard deviation against your mean. Because, let's say that I have a\ndistribution and its mean is",
    "start": "114830",
    "end": "124780"
  },
  {
    "text": "all the way out at 1.  Let's pick a very\nlarge number.",
    "start": "124780",
    "end": "133670"
  },
  {
    "text": "So it's got a really big\nmean, but say its standard deviation is--",
    "start": "133670",
    "end": "139980"
  },
  {
    "text": "I don't know-- 100. Would you say that that's\nwidely spread out? It's pretty tight.",
    "start": "139980",
    "end": "145080"
  },
  {
    "text": "If you're taking-- if this were like, I don't know,\nan observatory taking",
    "start": "145080",
    "end": "151109"
  },
  {
    "text": "measurements of deep space and\nyou've got a fluctuation of 100 for each standard deviation,\nyou'd probably say that was pretty good.",
    "start": "151110",
    "end": "156730"
  },
  {
    "text": "And you wouldn't be too\nconcerned about it, because you've got a planet out there\nthat's billions of light years away or something.",
    "start": "156730",
    "end": "164080"
  },
  {
    "text": "So on the other hand, let's\nsay that I have another measurement, and its mean is\nsomewhere around, say, 50.",
    "start": "164080",
    "end": "172800"
  },
  {
    "text": "And its standard deviation\nis 100. So it's a lot fatter.",
    "start": "172800",
    "end": "178100"
  },
  {
    "text": " You would say that this has a\nmuch wider spread, right?",
    "start": "178100",
    "end": "184650"
  },
  {
    "text": "So it's a way of relating\nthe standard deviation to the mean. And, rule of thumb is if this\nis less than or equal to 1,",
    "start": "184650",
    "end": "193480"
  },
  {
    "text": "we're going to say that it's\nnot too widespread, there's not a lot of variation.",
    "start": "193480",
    "end": "199220"
  },
  {
    "text": "That's a standard that\nProfessor Guttag has. Depending on your purposes\nmaybe that's too large or",
    "start": "199220",
    "end": "205170"
  },
  {
    "text": "whatever, so but that's what\ncoefficient of variation is. Everyone clear on it?",
    "start": "205170",
    "end": "211247"
  },
  {
    "text": "AUDIENCE: What's the difference\nbetween variance and standard deviation?",
    "start": "211247",
    "end": "216739"
  },
  {
    "text": "PROFESSOR: The difference\nbetween variance and standard deviation? Standard deviation is the\nsquare root of variance. ",
    "start": "216740",
    "end": "225350"
  },
  {
    "text": "All right. Unit testing is useful\nfor debugging.",
    "start": "225350",
    "end": "231220"
  },
  {
    "text": "What does the audience say? AUDIENCE: True. AUDIENCE: True. ",
    "start": "231220",
    "end": "237810"
  },
  {
    "text": "PROFESSOR: OK. You know what unit testing\nis, can you define it? AUDIENCE: Well, unit testing is\nwhen you use other code to",
    "start": "237810",
    "end": "244315"
  },
  {
    "text": "test your code. PROFESSOR: Right. So say you've broken your code\nup into nice little functions",
    "start": "244315",
    "end": "251030"
  },
  {
    "text": "like a good programmer. And you want to make sure that\nthose functions are giving you the right values.",
    "start": "251030",
    "end": "256329"
  },
  {
    "text": "What you're doing with unit\ntesting is, you're writing a bunch of other code. Or a little bit of code. Sometimes a lot, it depends on\nhow thorough you want to be in",
    "start": "256329",
    "end": "263300"
  },
  {
    "text": "your testing. And what you have is known\ninput and known output.",
    "start": "263300",
    "end": "269970"
  },
  {
    "text": "And you're going to feed your\ninput to the functions you're testing, and you're going to\nmake sure that they give you the output that you're\nexpecting.",
    "start": "269970",
    "end": "275650"
  },
  {
    "text": "And if they don't give you the\noutput that you're expecting, that indicates that there's\nprobably a bug. Which also kind of supports the\nidea that unit testing is",
    "start": "275650",
    "end": "283490"
  },
  {
    "text": "good for debugging. And if you are very\nconscientious about your code",
    "start": "283490",
    "end": "289360"
  },
  {
    "text": "and doing unit testing, you're\ngoing to run your unit tests every time you either run your\ncode or make a change.",
    "start": "289360",
    "end": "295850"
  },
  {
    "text": "Because you might have\ninadvertently introduced a bug into the code that\nyou're modifying. So it's a way of verifying, it's\na way of detecting bugs,",
    "start": "295850",
    "end": "304780"
  },
  {
    "text": "and also verifying that any\nchanges you make in the process of writing more\nfunctions for your program or",
    "start": "304780",
    "end": "311820"
  },
  {
    "text": "modifying functionality in your\nprogram don't introduce other bugs. ",
    "start": "311820",
    "end": "318430"
  },
  {
    "text": "So in Python, functions cannot\nbe used as actual parameters. ",
    "start": "318430",
    "end": "325319"
  },
  {
    "text": "False. Why?  AUDIENCE: [INAUDIBLE]",
    "start": "325320",
    "end": "331380"
  },
  {
    "text": "PROFESSOR: Well, you could just\nrephrase the question. But a better answer\nis that functions",
    "start": "331380",
    "end": "338250"
  },
  {
    "text": "are first class citizens. So they are objects in and of\nthemselves, and so you can pass them around to a function\nand functions",
    "start": "338250",
    "end": "344870"
  },
  {
    "text": "can make use of them. So we might see an example of\nthat later on if you want.",
    "start": "344870",
    "end": "353370"
  },
  {
    "text": "All right. 1.5. Increasing the size of a hash\ntable typically increases the amount of time needed to\nlocate a variable or",
    "start": "353370",
    "end": "359960"
  },
  {
    "text": "value in the table. False. Why?",
    "start": "359960",
    "end": "365844"
  },
  {
    "text": "AUDIENCE: It is Constant type. PROFESSOR: Right. The hashing function is\ngenerally constant. ",
    "start": "365844",
    "end": "376230"
  },
  {
    "text": "OK. ",
    "start": "376230",
    "end": "381740"
  },
  {
    "text": "So, what does this code print? AUDIENCE: [INAUDIBLE]",
    "start": "381740",
    "end": "387370"
  },
  {
    "text": "PROFESSOR: Six? AUDIENCE: 11. PROFESSOR: It's 11. ",
    "start": "387370",
    "end": "394158"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: So what is the\nstring x actually?",
    "start": "394158",
    "end": "399360"
  },
  {
    "text": " AUDIENCE: Binary? PROFESSOR: It's the binary\nrepresentation of an integer.",
    "start": "399360",
    "end": "405449"
  },
  {
    "text": "And all this code is\ndoing is, it's just converting it to a decimal.",
    "start": "405450",
    "end": "410550"
  },
  {
    "text": "And because I came prepared\ntonight-- ",
    "start": "410550",
    "end": "416710"
  },
  {
    "text": "sorta kind of-- I have the code here.",
    "start": "416710",
    "end": "422620"
  },
  {
    "text": "And we can verify it. Any burning questions\non that problem?",
    "start": "422620",
    "end": "428720"
  },
  {
    "text": "Moving on. ",
    "start": "428720",
    "end": "438710"
  },
  {
    "text": "What is the expected\nvalue of g1? ",
    "start": "438710",
    "end": "445565"
  },
  {
    "text": "Anyone? ",
    "start": "445565",
    "end": "457445"
  },
  {
    "text": "Well, look at what\nthe code's doing. ",
    "start": "457445",
    "end": "463470"
  },
  {
    "text": "Did someone--  AUDIENCE: What's \"gauze,\"\nthat function?",
    "start": "463470",
    "end": "468479"
  },
  {
    "text": "We haven't used that one. PROFESSOR: Gauss is-- AUDIENCE: Oh, Gauss. PROFESSOR: --a method on the\nrandom object that draws a",
    "start": "468480",
    "end": "475170"
  },
  {
    "text": "random value from a Gaussian\ndistribution that has a mean at-- well, in this case, mean--",
    "start": "475170",
    "end": "481460"
  },
  {
    "text": "and a standard deviation\nof s-t-d-dev, whatever you put in there. So maybe for this example, if\nI wanted to draw a random",
    "start": "481460",
    "end": "490840"
  },
  {
    "text": "value from this distribution,\nwhich I said had a mean of 50 and a standard deviation\nof 100, I would say",
    "start": "490840",
    "end": "496850"
  },
  {
    "text": "random.Gauss 50, 100.",
    "start": "496850",
    "end": "505160"
  },
  {
    "text": "So, in answering the question\n(3.1), what do people think?",
    "start": "505160",
    "end": "510480"
  },
  {
    "text": "What about (3.2)? 100,000. So they're both the same.",
    "start": "510480",
    "end": "515969"
  },
  {
    "text": "But they both have a different\nstandard deviation. So what this is getting\nat is, it's getting",
    "start": "515970",
    "end": "524650"
  },
  {
    "text": "you to look at this. ",
    "start": "524650",
    "end": "533030"
  },
  {
    "text": "So this code is straight\nfrom the question. And all I'm going to do is, I'm\ngoing to plot a histogram",
    "start": "533030",
    "end": "542180"
  },
  {
    "text": "of what this function\nproduces. And also I'm going to run it a\nnumber of times and verify",
    "start": "542180",
    "end": "548950"
  },
  {
    "text": "that I am getting 100,000\nin general. ",
    "start": "548950",
    "end": "559720"
  },
  {
    "text": "Python. There we go. So it's not exactly 100,000,\nbut it's close enough.",
    "start": "559720",
    "end": "565350"
  },
  {
    "text": "I mean, we're not going\nto be too upset. So this picture here shows the\nactual values that were drawn",
    "start": "565350",
    "end": "575880"
  },
  {
    "text": "when I repeated the experiment\na number of times. So I don't know if you can see\non the screen but there's this",
    "start": "575880",
    "end": "583680"
  },
  {
    "text": "big, really thin, vertical\nline here. Those are the results from\nthe Gaussian with",
    "start": "583680",
    "end": "590070"
  },
  {
    "text": "a 0 standard deviation. So everything was\n100,000 exactly.",
    "start": "590070",
    "end": "595160"
  },
  {
    "text": "And then these red blocks\nhere, this is with the standard deviation of 20. ",
    "start": "595160",
    "end": "604829"
  },
  {
    "text": "Any questions on this? Yeah? AUDIENCE: What's the difference\nbetween a normal",
    "start": "604830",
    "end": "610063"
  },
  {
    "text": "distribution and a Gaussian\ndistribution? PROFESSOR: The name. The question was, what's the\ndifference between a normal",
    "start": "610064",
    "end": "615354"
  },
  {
    "text": "distribution and a Gaussian\ndistribution. And it's just, it's\na different name.",
    "start": "615354",
    "end": "621472"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: How I\ncame across it?",
    "start": "621472",
    "end": "626980"
  },
  {
    "text": "AUDIENCE: Yeah. How are we supposed to see\nthat in this problem, [UNINTELLIGIBLE]? PROFESSOR: Well, if you look\nat the plots, which I",
    "start": "626980",
    "end": "638950"
  },
  {
    "text": "apparently killed-- so let me pull them up again-- ",
    "start": "638950",
    "end": "654810"
  },
  {
    "text": "All right. So the thing that you want\nto know about Gaussian",
    "start": "654810",
    "end": "663970"
  },
  {
    "text": "distributions is that, at the\nmean, is the value that's the",
    "start": "663970",
    "end": "669819"
  },
  {
    "text": "most probable. So its peak is at the mean. And so if you're taking a\n1000 numbers from this",
    "start": "669820",
    "end": "678750"
  },
  {
    "text": "distribution, then if you know\nwhich number you're expecting",
    "start": "678750",
    "end": "683900"
  },
  {
    "text": "to see with the highest\nprobability-- I'm not sure if this sentence\nis grammatical any more--",
    "start": "683900",
    "end": "690480"
  },
  {
    "text": "AUDIENCE: Yeah. So really standard deviation\ndoesn't really have anything to do with it. PROFESSOR: What it's going\nto affect is, it's",
    "start": "690481",
    "end": "697270"
  },
  {
    "text": "going to tell you that-- like, if you have a standard\ndeviation of 10 versus 20,",
    "start": "697270",
    "end": "703360"
  },
  {
    "text": "it's just going to tell\nyou what the spread of the curve is. But it's not going to change\nthe expected value. So, why don't I actually\ndemonstrate that?",
    "start": "703360",
    "end": "710360"
  },
  {
    "text": "Because I'm a fan of visuals\nand not necessarily good at English tonight. ",
    "start": "710360",
    "end": "724100"
  },
  {
    "text": "All right. So all I did in the code was,\nI just changed the standard deviation of the first\ndistribution to",
    "start": "724100",
    "end": "730040"
  },
  {
    "text": "be 10 versus 20. And what you can see from the\nplots are that the value with",
    "start": "730040",
    "end": "739390"
  },
  {
    "text": "the highest probability is still\ncentered at 100,000.",
    "start": "739390",
    "end": "746010"
  },
  {
    "text": "But the first plot, as opposed\nto the first time we ran this with a 0 standard deviation,\nis a little",
    "start": "746010",
    "end": "752070"
  },
  {
    "text": "bit more spread out. And the plot with 20, for the\nstandard deviation, is even",
    "start": "752070",
    "end": "757180"
  },
  {
    "text": "more spread out, than it. But they both have the highest\nprobability at 100,000 or centered at 100,000.",
    "start": "757180",
    "end": "763586"
  },
  {
    "text": "AUDIENCE: So it's like, if you\nhave a mean for g1 of 100, or",
    "start": "763586",
    "end": "769382"
  },
  {
    "text": "g2 of 200, then you would\nexpect 200,000 for g2? PROFESSOR: Yeah. So if instead you had a mean\nof, say, 200 for the second",
    "start": "769382",
    "end": "781720"
  },
  {
    "text": "distribution, versus 100,\nyou'd expect them in two",
    "start": "781720",
    "end": "787100"
  },
  {
    "text": "completely separate places. And you'd get an expected\nvalue that's 100,000 versus 200,000.",
    "start": "787100",
    "end": "794840"
  },
  {
    "text": "So here close to 100,000, close\nto 200,000 and then see",
    "start": "794840",
    "end": "800770"
  },
  {
    "text": "what my distribution is. ",
    "start": "800770",
    "end": "806430"
  },
  {
    "text": "All right. We good on this? ",
    "start": "806430",
    "end": "811850"
  },
  {
    "text": "So moving on. Question (4). What is the probability of the\nfinal value of num6 being 0?",
    "start": "811850",
    "end": "819525"
  },
  {
    "text": " AUDIENCE: 9/10 to the 10.",
    "start": "819525",
    "end": "825608"
  },
  {
    "text": "PROFESSOR: 9 over 10,\nthe whole thing to the 10th power, right? OK. So does anyone not see\nwhy that's the case?",
    "start": "825608",
    "end": "835155"
  },
  {
    "text": " So I'm going to explain\nthat anyway.",
    "start": "835155",
    "end": "842310"
  },
  {
    "text": "So what this code is doing is,\nfor 10 times its drawing an",
    "start": "842310",
    "end": "847760"
  },
  {
    "text": "integer from 0 to 9. A random integer. It's a uniform distribution.",
    "start": "847760",
    "end": "853240"
  },
  {
    "text": "And it's counting the number\nof times that the integer drawn is 6.",
    "start": "853240",
    "end": "859589"
  },
  {
    "text": "And it's incrementing\na counter. So the question can be rephrased\nas, what's the",
    "start": "859590",
    "end": "866950"
  },
  {
    "text": "probability that no 6's were\ndrawn 10 times out of a pool",
    "start": "866950",
    "end": "873060"
  },
  {
    "text": "of 10 integers? And the way you can figure it\nout is on one pool where, say",
    "start": "873060",
    "end": "885280"
  },
  {
    "text": "I had a 10 sided dice. On one roll, what's\nthe probability of",
    "start": "885280",
    "end": "890510"
  },
  {
    "text": "not getting a 6? It's going to be 9\nover 10, right? And if you do that 10 times. 9 over 10 times 9 over 10 times\n9 over 10, that gives",
    "start": "890510",
    "end": "898000"
  },
  {
    "text": "you 9 over 10 to\nthe 10th power. And because this is a code\nclass, we have a",
    "start": "898000",
    "end": "910319"
  },
  {
    "text": "demonstration. So here's the answer that\nwe hand-jammed or that we just discussed.",
    "start": "910320",
    "end": "918040"
  },
  {
    "text": "And now here is a function\ncount of 6. And it's the code that you\nsee in problem (4).",
    "start": "918040",
    "end": "927690"
  },
  {
    "text": "And all I'm going to\ndo is, I'm going to run a number of trials. And I'm going to count the\nnumber of trials that come up 0, and increment a\ncount numzero's.",
    "start": "927690",
    "end": "935490"
  },
  {
    "text": "And then I'm going to say,\nthis is what I think the probability of getting a 0 is. And then we'll compare\nthe two numbers.",
    "start": "935490",
    "end": "942760"
  },
  {
    "text": "OK so that's the probability\nthat we count 9/10 to the 10th power. And then this is the estimated\nprobability that we got from",
    "start": "942760",
    "end": "951410"
  },
  {
    "text": "running this function\n100,000 times. So we good on this problem?",
    "start": "951410",
    "end": "959462"
  },
  {
    "text": "AUDIENCE: Instead of solving\nit the way that you guys solved it, can you solve\nit by saying that the problem's also--",
    "start": "959462",
    "end": "965604"
  },
  {
    "text": "that it's 1 minus the\nprobability that 6 will always be picked? ",
    "start": "965604",
    "end": "971940"
  },
  {
    "text": "PROFESSOR: That you will\nsee at least one 6? 1 minus the probability that\nyou'll see at least one 6?",
    "start": "971940",
    "end": "980280"
  },
  {
    "text": " AUDIENCE: No, never mind.",
    "start": "980280",
    "end": "987660"
  },
  {
    "text": "PROFESSOR: You can solve\nit in different ways. It's just this way is-- I think, probably, this way of\nthinking about it is probably",
    "start": "987660",
    "end": "995090"
  },
  {
    "text": "more intuitive. AUDIENCE: When would you want to\nsolve this kind of problem with [INAUDIBLE], instead\nof when it says it's not",
    "start": "995090",
    "end": "1004818"
  },
  {
    "text": "something, to use 1 minus\nthe probability? That it is [UNINTELLIGIBLE] ",
    "start": "1004818",
    "end": "1012690"
  },
  {
    "text": "PROFESSOR: Well, my answer\nwould be when it makes sense to you. ",
    "start": "1012690",
    "end": "1020460"
  },
  {
    "text": "Some problems are easier viewed\nin the negative light, which is what you're saying\nas 1 minus whatever.",
    "start": "1020460",
    "end": "1026349"
  },
  {
    "text": "And some problems are\nbetter solved in a straightforward fashion. So it's whatever tool\ngets the job done.",
    "start": "1026349",
    "end": "1034105"
  },
  {
    "text": "I don't have a general rule\nof thumb for you. Maybe there's a course\n18 person who does.",
    "start": "1034105",
    "end": "1043301"
  },
  {
    "text": "AUDIENCE: So this problem, would\nwe possibly be asked,",
    "start": "1043301",
    "end": "1050700"
  },
  {
    "text": "what is the probability that\nit'll end up being 1? Or does it necessarily matter\nwhich of those 10 came up 6?",
    "start": "1050700",
    "end": "1060355"
  },
  {
    "text": "And how would you show that, if\nwe were going to be asked that question? PROFESSOR: Well. One, I haven't seen the quiz.",
    "start": "1060355",
    "end": "1066890"
  },
  {
    "text": "So I can't give you\na definite. But you could be asked,\ninstead of using",
    "start": "1066890",
    "end": "1072630"
  },
  {
    "text": "6, maybe say, 1. Is that going to really\nchange anything? AUDIENCE: No.",
    "start": "1072630",
    "end": "1077976"
  },
  {
    "text": "I guess I meant that one\nof those 10 outcomes",
    "start": "1077976",
    "end": "1083344"
  },
  {
    "text": "ends up being a 6. PROFESSOR: Right. AUDIENCE: I can do it if, they\nsay the fifth trial is a 6.",
    "start": "1083344",
    "end": "1089909"
  },
  {
    "text": " But just 1 of those 10 trials\nbeing a 6, I don't know how to",
    "start": "1089910",
    "end": "1097000"
  },
  {
    "text": "write properly? PROFESSOR: So what's the\nprobability that you get 1 of the trials as exactly 6?",
    "start": "1097000",
    "end": "1103004"
  },
  {
    "text": "Or exactly 1 of the trials\ncomes up as 6? AUDIENCE: Yeah. PROFESSOR: Well, one way of\nthinking of it is-- so we",
    "start": "1103004",
    "end": "1113600"
  },
  {
    "text": "calculated 9/10. That's the probability that\n6 doesn't come up, right? So what's the probability\nthat 6 will come up?",
    "start": "1113600",
    "end": "1121330"
  },
  {
    "text": "1/10. So instead of doing 9/10 to the\n10th power, it would be 9/10 to the 9th power\ntimes 1/10, right?",
    "start": "1121330",
    "end": "1130150"
  },
  {
    "text": " AUDIENCE: OK, that'll\naccount for. Thanks",
    "start": "1130150",
    "end": "1138330"
  },
  {
    "text": "PROFESSOR: And because I'm never\nvery comfortable with this stuff, why don't\nwe do a simulation?",
    "start": "1138330",
    "end": "1147196"
  },
  {
    "start": "1147196",
    "end": "1157680"
  },
  {
    "text": "So this is what we're saying. Exactly one 6 comes up. ",
    "start": "1157680",
    "end": "1166610"
  },
  {
    "text": "And I'm going to\nset this to 1. AUDIENCE: Isn't that saying that\nit's less likely that one",
    "start": "1166610",
    "end": "1172919"
  },
  {
    "text": "6 comes up than zero\n6s come up? Is it?",
    "start": "1172920",
    "end": "1180325"
  },
  {
    "text": "That's true? PROFESSOR: Yeah. Because you're looking\nfor exactly-- you're looking for a sequence\nof 10 events where exactly 1",
    "start": "1180325",
    "end": "1189100"
  },
  {
    "text": "of those of events is a 6. Which seems more unlikely than,\nsay, getting everything",
    "start": "1189100",
    "end": "1194626"
  },
  {
    "text": "that's not a 6. So I want to verify this.",
    "start": "1194626",
    "end": "1202794"
  },
  {
    "text": "AUDIENCE: Why is it 9/10\nto the 9th [INAUDIBLE] PROFESSOR: Because we're\nasking, if I roll this",
    "start": "1202794",
    "end": "1210600"
  },
  {
    "text": "10-sided dice 10 times, what's\nthe probability that exactly",
    "start": "1210600",
    "end": "1215740"
  },
  {
    "text": "one of those rolls is going\nto come up with 6? And so what we're asking is,\nwhat is the probability that I",
    "start": "1215740",
    "end": "1222330"
  },
  {
    "text": "roll the dice 9 times and it\ndoesn't come up with 6? And then what's the probability\nthat on the",
    "start": "1222330",
    "end": "1230210"
  },
  {
    "text": "remaining roll, that\nit comes up as 6? Which is 1/10.",
    "start": "1230210",
    "end": "1236610"
  },
  {
    "text": "So let's see if I'm\nin the ballpark. ",
    "start": "1236610",
    "end": "1247710"
  },
  {
    "text": "Did I make a mistake? AUDIENCE: [INAUDIBLE] ",
    "start": "1247710",
    "end": "1253563"
  },
  {
    "text": "where if there's ten different\nways-- so it would be like-- PROFESSOR: Oh, yeah. So yeah, you're right.",
    "start": "1253563",
    "end": "1260335"
  },
  {
    "text": "That's why I don't\nlike that stuff.  So yeah, it's a little bit more\ncomplicated than that.",
    "start": "1260335",
    "end": "1268000"
  },
  {
    "text": "AUDIENCE: You only counted\none case of getting-- PROFESSOR: That's right. So in this, I'm only\ncounting one case.",
    "start": "1268000",
    "end": "1274910"
  },
  {
    "text": "There's multiple ways that\nexactly one dice could come up 6.",
    "start": "1274910",
    "end": "1279945"
  },
  {
    "text": "So the answer is more\ncomplicated. AUDIENCE: So would you\njust multiply by 10? Because there's 10\ndifferent places? ",
    "start": "1279946",
    "end": "1287520"
  },
  {
    "text": "PROFESSOR: Yeah. So actually, that's\nwhat we got, so-- ",
    "start": "1287520",
    "end": "1294049"
  },
  {
    "text": "we'll just do this. ",
    "start": "1294050",
    "end": "1300330"
  },
  {
    "text": "Well, of course that's\ngoing to come up. But the simulation gives us the\nsame answer as what we've just come up with discussing.",
    "start": "1300330",
    "end": "1307340"
  },
  {
    "text": "OK, problem solved. Did that work?",
    "start": "1307340",
    "end": "1312658"
  },
  {
    "text": "AUDIENCE: Yeah.  PROFESSOR: Probability\ncan be tricky.",
    "start": "1312658",
    "end": "1319174"
  },
  {
    "text": " AUDIENCE: So essentially,\nyou could just take the",
    "start": "1319175",
    "end": "1325630"
  },
  {
    "text": "probability that 9 of\nthe rolls aren't 6, and leave it at that? Because you multiply it\nby 10 [INAUDIBLE].",
    "start": "1325630",
    "end": "1333256"
  },
  {
    "text": "PROFESSOR: Yeah. You can also do it that way. So again, there's\nmultiple ways to",
    "start": "1333256",
    "end": "1340190"
  },
  {
    "text": "think about the problem. So she was saying, instead\nof multiplying by 10, we just say that--",
    "start": "1340190",
    "end": "1346050"
  },
  {
    "text": "we take the probability that we\nhave 9 rolls that aren't 6. And that works too.",
    "start": "1346050",
    "end": "1353540"
  },
  {
    "text": "That's what she just\npointed out. So these parts cancel\neach other out.",
    "start": "1353540",
    "end": "1359259"
  },
  {
    "text": " It's basically-- it is the same thing as this.",
    "start": "1359260",
    "end": "1365080"
  },
  {
    "text": " Yay. ",
    "start": "1365080",
    "end": "1371480"
  },
  {
    "text": "All right. Are we good on this question? ",
    "start": "1371480",
    "end": "1379280"
  },
  {
    "text": "All right. Problem (5). It was matching plots. So you have three\nfunctions here.",
    "start": "1379280",
    "end": "1385480"
  },
  {
    "text": "You have a polynomial,\nor two polynomials. One's a cubic, one's\na quintic.",
    "start": "1385480",
    "end": "1393460"
  },
  {
    "text": "And one's an exponential.  There are a couple ways that\nyou could go about",
    "start": "1393460",
    "end": "1399700"
  },
  {
    "text": "solving this one. One is to plug values\nin and kind of match them up with the plots.",
    "start": "1399700",
    "end": "1404730"
  },
  {
    "text": "Another is to look at the\naxis of the plots. So this exponential function\nhere, if we were to have it on",
    "start": "1404730",
    "end": "1414380"
  },
  {
    "text": "two linear axes, the x-axis\nand the y-axis for both linear, you'd see the expected\ncurve upward sharply.",
    "start": "1414380",
    "end": "1421780"
  },
  {
    "text": "But if you notice, a couple\nof the plots are in a semi-log y-axis.",
    "start": "1421780",
    "end": "1427010"
  },
  {
    "text": "So if you put an exponential\nwith a linear x-axis and a logarithmic y-axis, what\nwould you expect the",
    "start": "1427010",
    "end": "1433910"
  },
  {
    "text": "plot to look like? It would be a straight\nline, right. So what that tells us is that if\nwe look at the bottom plot,",
    "start": "1433910",
    "end": "1443050"
  },
  {
    "text": "we have something with\na straight line. So, bottom plot is the\nthird function.",
    "start": "1443050",
    "end": "1449490"
  },
  {
    "text": "So, exponential. And then for the remaining two\nfunctions, there are a couple",
    "start": "1449490",
    "end": "1456679"
  },
  {
    "text": "methods that you would use,\nor you could use. One is to plug values in and see\nwhere the points wind up",
    "start": "1456680",
    "end": "1464169"
  },
  {
    "text": "and compare them\nwith the plots. Another way to think about it is\nthat one of the plots is on",
    "start": "1464170",
    "end": "1469480"
  },
  {
    "text": "a semi-log and another plot is\non just both linear axes.",
    "start": "1469480",
    "end": "1474990"
  },
  {
    "text": "And if you plot a polynomial\nthat's not exponential on a",
    "start": "1474990",
    "end": "1486290"
  },
  {
    "text": "logarithmic y-axis, what\nwould you expect the curve to look like? ",
    "start": "1486290",
    "end": "1492710"
  },
  {
    "text": "It should look somewhat similar\nto a logarithm. So with that in mind,\nyou could then start",
    "start": "1492710",
    "end": "1504720"
  },
  {
    "text": "plugging points in. And what you would come up\nwith is that the second function is this\ntop plot here.",
    "start": "1504720",
    "end": "1512860"
  },
  {
    "text": "And the middle plot here\nis the first function.",
    "start": "1512860",
    "end": "1518877"
  },
  {
    "text": "Is there anyone who's\nlost on that? Uh-oh. AUDIENCE: Wait, why?",
    "start": "1518878",
    "end": "1525110"
  },
  {
    "start": "1525110",
    "end": "1530242"
  },
  {
    "text": "So you have two quadratic\nfunctions, right? One and two are quadratic?",
    "start": "1530242",
    "end": "1535698"
  },
  {
    "text": "PROFESSOR: They're\npolynomials. They're not exponential. AUDIENCE: OK. And then the third one's\nexponential. And the reason why the third\none's linear is because when",
    "start": "1535698",
    "end": "1545618"
  },
  {
    "text": "you plot an exponential-- PROFESSOR: If you plot an\nexponential with a linear",
    "start": "1545618",
    "end": "1552160"
  },
  {
    "text": "x-axis and a logarithmic\ny-axis, it should be a straight line. Right? Or a straightish line.",
    "start": "1552160",
    "end": "1558341"
  },
  {
    "text": "AUDIENCE: Why? PROFESSOR: It's the way\nthe math works out.",
    "start": "1558342",
    "end": "1564829"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "1564829",
    "end": "1570320"
  },
  {
    "text": "PROFESSOR: Any other\nquestions? All right, we'll move\nonto the next one.",
    "start": "1570320",
    "end": "1577850"
  },
  {
    "text": "What does the following\ncode print? ",
    "start": "1577850",
    "end": "1585702"
  },
  {
    "text": "AUDIENCE: 16. And then square root\nof [INAUDIBLE]",
    "start": "1585702",
    "end": "1593660"
  },
  {
    "text": "PROFESSOR: Close. So I don't actually\nhave the answer.",
    "start": "1593660",
    "end": "1599340"
  },
  {
    "text": "Well, not written down. But I have the code, so I'm just\ngoing to run the code.",
    "start": "1599340",
    "end": "1604571"
  },
  {
    "text": " So you're close.",
    "start": "1604572",
    "end": "1610160"
  },
  {
    "text": " Shall we spend some time\nstepping through this code, understanding it?",
    "start": "1610160",
    "end": "1615870"
  },
  {
    "text": "All right. So, what question (6) does is,\nit creates a class hierarchy.",
    "start": "1615870",
    "end": "1623820"
  },
  {
    "text": "And at the top of it, it\nhas the shape class. Which has just two methods,\ndouble underbar EQ and double",
    "start": "1623820",
    "end": "1633130"
  },
  {
    "text": "underbar GE. That was just defined as\nequals operator and the",
    "start": "1633130",
    "end": "1639370"
  },
  {
    "text": "greater than or equal\noperator for shapes. In terms of their area.",
    "start": "1639370",
    "end": "1645760"
  },
  {
    "text": "So what this is saying is that\ntwo shapes are equal if their areas are equal, and a shape S1\nis going to be larger than",
    "start": "1645760",
    "end": "1658870"
  },
  {
    "text": "another shape if its area is\nlarger than the other shape. So if I had--",
    "start": "1658870",
    "end": "1664460"
  },
  {
    "text": " well let's go down and\nwe'll get to that.",
    "start": "1664460",
    "end": "1672990"
  },
  {
    "text": "Square, subclass of shape. It is what it says it is. It's a square.",
    "start": "1672990",
    "end": "1678630"
  },
  {
    "text": "And it has a side. And its area is what\nyou'd expect it to",
    "start": "1678630",
    "end": "1684809"
  },
  {
    "text": "be, the side squared. And circle is just defined--",
    "start": "1684810",
    "end": "1690590"
  },
  {
    "text": "it just has a radius, and its\narea is what you would",
    "start": "1690590",
    "end": "1695620"
  },
  {
    "text": "expect it to be.  There is a function here, f.",
    "start": "1695620",
    "end": "1702150"
  },
  {
    "text": "And it takes a parameter, l. And I --",
    "start": "1702150",
    "end": "1708470"
  },
  {
    "text": "if you look at the code here and\nyou kind of walk through it -- l would have to\nbe either a list",
    "start": "1708470",
    "end": "1714100"
  },
  {
    "text": "or a tuple of elements.",
    "start": "1714100",
    "end": "1719150"
  },
  {
    "text": "Doesn't have to necessarily\nbe shapes. But this first line is just\ngoing to return none if the",
    "start": "1719150",
    "end": "1726230"
  },
  {
    "text": "list is empty. And then these next lines are\ngoing to, one it's going to",
    "start": "1726230",
    "end": "1732840"
  },
  {
    "text": "set the first element equal to\nx, and then iterate through each element in l.",
    "start": "1732840",
    "end": "1738410"
  },
  {
    "text": "And then if the element it's\nlooking at is larger than x it's going to set x\nto the element.",
    "start": "1738410",
    "end": "1744590"
  },
  {
    "text": "So what this function is doing\nis finding the largest element in the list.",
    "start": "1744590",
    "end": "1750220"
  },
  {
    "text": " Everyone follow that? ",
    "start": "1750220",
    "end": "1757420"
  },
  {
    "text": "So, this should be pretty\nstraightforward.",
    "start": "1757420",
    "end": "1762680"
  },
  {
    "text": "As should this. This part my trip\nsome people up.",
    "start": "1762680",
    "end": "1768190"
  },
  {
    "text": "So, this obviously creates\nan empty list. What this does is, it creates\na dictionary of class names.",
    "start": "1768190",
    "end": "1778630"
  },
  {
    "text": "And what it's saying is\nthat for a key of 0, the class is circle.",
    "start": "1778630",
    "end": "1784860"
  },
  {
    "text": "And for a key of one the\nclass is square. Everyone see that?",
    "start": "1784860",
    "end": "1789900"
  },
  {
    "text": " This loop here iterates\nfor 10 times.",
    "start": "1789900",
    "end": "1796990"
  },
  {
    "text": "And it appends 10 elements. And then each of those elements\nare defined by this",
    "start": "1796990",
    "end": "1805110"
  },
  {
    "text": "shapes dictionary.  On each iteration, it's going to\ntake the modulus of i, the",
    "start": "1805110",
    "end": "1815560"
  },
  {
    "text": "index, or the number. And if it's a 0, it's going to\nconstruct whatever class the",
    "start": "1815560",
    "end": "1823580"
  },
  {
    "text": "dictionary of shapes returns. So if it's an even number,\nit's going to be circle.",
    "start": "1823580",
    "end": "1829110"
  },
  {
    "text": "And if it's an odd number\nis going to be a square. ",
    "start": "1829110",
    "end": "1834370"
  },
  {
    "text": "Everyone follow that? Does no-one follow that?",
    "start": "1834370",
    "end": "1840700"
  },
  {
    "text": "OK. Or does anyone not\nfollow that? Got my logic messed up. All right.",
    "start": "1840700",
    "end": "1846040"
  },
  {
    "text": "So now what we have here\nis a list of shapes.  And then all this does is it's\ngoing to print which shape.",
    "start": "1846040",
    "end": "1854890"
  },
  {
    "text": "Is it going to be the fourth\nor the fifth shape? Fifth, right? Because we've started\nindexing it at 0.",
    "start": "1854890",
    "end": "1860720"
  },
  {
    "text": " So this number is\nobviously even.",
    "start": "1860720",
    "end": "1868090"
  },
  {
    "text": "So this should be a circle\nshape, or a circle class.",
    "start": "1868090",
    "end": "1873320"
  },
  {
    "text": "And what should its radius be?  AUDIENCE: [INAUDIBLE]",
    "start": "1873320",
    "end": "1878506"
  },
  {
    "text": "PROFESSOR: Right. And then this line here is just\ngoing call the function",
    "start": "1878506",
    "end": "1884059"
  },
  {
    "text": "f, which is going to find\nthe larger shape. Which is determined\nby its area.",
    "start": "1884060",
    "end": "1891960"
  },
  {
    "text": "And in this particular instance,\nit's going to be a circle with radius eight. ",
    "start": "1891960",
    "end": "1898549"
  },
  {
    "text": "Once you figure out what f does,\nthis is actually not such a hard problem.",
    "start": "1898550",
    "end": "1903600"
  },
  {
    "text": "So the key to understanding this\none is figuring out what f is actually doing. And you'll probably see a\nproblem or two on the exam",
    "start": "1903600",
    "end": "1912410"
  },
  {
    "text": "that's written like this, where\nthe function has been",
    "start": "1912410",
    "end": "1918380"
  },
  {
    "text": "obfuscated. So it doesn't have nice\nlittle variable names.",
    "start": "1918380",
    "end": "1926710"
  },
  {
    "text": "If we were writing this\nfor real, it would be something like that.",
    "start": "1926710",
    "end": "1932370"
  },
  {
    "text": "AUDIENCE: Wait, what was\nthe radius on L? It was-- PROFESSOR: Radius on L?",
    "start": "1932370",
    "end": "1937385"
  },
  {
    "text": "AUDIENCE: Or not radius. Like, L4 was circled.",
    "start": "1937385",
    "end": "1942390"
  },
  {
    "text": "And was that all it was,\nit was just a circle? PROFESSOR: With radius 4.",
    "start": "1942390",
    "end": "1948090"
  },
  {
    "text": "AUDIENCE: With radius 4? OK, that's what I thought. PROFESSOR: All right.",
    "start": "1948090",
    "end": "1955392"
  },
  {
    "text": "AUDIENCE: How many of those\nspecial underbar functions have we seen? Have we seen anything besides\nedit string and [INAUDIBLE]?",
    "start": "1955392",
    "end": "1964250"
  },
  {
    "text": "PROFESSOR: So, how many\nof the double underbar functions have you seen? That's a good question.",
    "start": "1964250",
    "end": "1969390"
  },
  {
    "text": "You've seen a lot, right? The ones that I would be\nfamiliar with definitely INIT",
    "start": "1969390",
    "end": "1978340"
  },
  {
    "text": "definitely EQ, GE and\ndefinitely STR.",
    "start": "1978340",
    "end": "1984980"
  },
  {
    "text": "You might want to be familiar\nwith this, LE.",
    "start": "1984980",
    "end": "1991640"
  },
  {
    "text": "So what is LE? What do you think that does? Less than or equal to.",
    "start": "1991640",
    "end": "1996790"
  },
  {
    "text": "Less than. So it's this the opposite\nof GE, right?",
    "start": "1996790",
    "end": "2003070"
  },
  {
    "text": "I think there's also an\nLT, so less than.",
    "start": "2003070",
    "end": "2009205"
  },
  {
    "text": "And GT.  It's fairly logical.",
    "start": "2009205",
    "end": "2016169"
  },
  {
    "text": "And historically you don't need\nto have these memorized.",
    "start": "2016170",
    "end": "2026330"
  },
  {
    "text": "I've never seen a question where\nyou've actually had to produce code that uses double\nunderbar on the quiz.",
    "start": "2026330",
    "end": "2034280"
  },
  {
    "text": "You just have to understand\nwhat it's doing if you can see it. Like, in a code reading\nexercise. ",
    "start": "2034280",
    "end": "2041559"
  },
  {
    "text": "And the conventions are fairly\nstraightforward to understand.",
    "start": "2041560",
    "end": "2047260"
  },
  {
    "text": " Can I move on?",
    "start": "2047260",
    "end": "2052480"
  },
  {
    "text": " AUDIENCE: Can you scroll\ndown a little bit? Where it says print L4,\nor I guess print FL.",
    "start": "2052480",
    "end": "2064084"
  },
  {
    "text": "Does it automatically just print\nthe string function? PROFESSOR: Yes.",
    "start": "2064084",
    "end": "2070110"
  },
  {
    "text": "So you're asking why\nI don't have this.",
    "start": "2070110",
    "end": "2076794"
  },
  {
    "text": "AUDIENCE: Right. PROFESSOR: So in this flavor\nof Python, and if you don't",
    "start": "2076794",
    "end": "2084899"
  },
  {
    "text": "have an explicit conversion to\nstring, Python will look for",
    "start": "2084900",
    "end": "2090690"
  },
  {
    "text": "the underbar STR function\nif it exists. If it doesn't exist then you get\nthat weird object at blah,",
    "start": "2090690",
    "end": "2098470"
  },
  {
    "text": "blah, blah. AUDIENCE: Right. PROFESSOR: Any other\nquestions?",
    "start": "2098470",
    "end": "2104900"
  },
  {
    "text": "AUDIENCE: What list are\nyou reading up on top? ",
    "start": "2104900",
    "end": "2111830"
  },
  {
    "text": "PROFESSOR: Are you confused\nbecause it's the same name? AUDIENCE: Maybe. I don't know. So the third thing\nthat [INAUDIBLE].",
    "start": "2111830",
    "end": "2118760"
  },
  {
    "text": "I understand the second thing,\ncircle with radius 4. But how do you get that\ncircle of radius 8?",
    "start": "2118760",
    "end": "2126190"
  },
  {
    "text": "PROFESSOR: Well, the way we\nget that is, f of l-- f is the function, right?",
    "start": "2126190",
    "end": "2132089"
  },
  {
    "text": "AUDIENCE: Right, and it produces\nthe largest element of the list. And the list, L, contains\n0 to 9?",
    "start": "2132089",
    "end": "2139410"
  },
  {
    "text": "PROFESSOR: Yes. So we could actually print\nout what L contains. AUDIENCE: Why isn't it square? Isn't 9 [INAUDIBLE]?",
    "start": "2139410",
    "end": "2145653"
  },
  {
    "text": "PROFESSOR: Why don't we do it? ",
    "start": "2145653",
    "end": "2165900"
  },
  {
    "text": "All right. So all it's going to do is, it's\ngoing to print out all the shapes in the list\nand their areas.",
    "start": "2165900",
    "end": "2171859"
  },
  {
    "text": "I've got stuff at the top. ",
    "start": "2171860",
    "end": "2184140"
  },
  {
    "text": "So this is the first shape. And then, as we move down the\nlist, we have square with side",
    "start": "2184140",
    "end": "2194450"
  },
  {
    "text": "1, circle with radius 2, 3, et\ncetera, et cetera, et cetera. And then, this is the area of\nthe circle with radius 8",
    "start": "2194450",
    "end": "2205480"
  },
  {
    "text": "versus the area of a\nsquare with side 9.",
    "start": "2205480",
    "end": "2211060"
  },
  {
    "text": " So, and it depends on--",
    "start": "2211060",
    "end": "2220270"
  },
  {
    "text": "the reason why it works this\nway is that this is greater than or equal to operator is\ndefined in terms of the area",
    "start": "2220270",
    "end": "2228160"
  },
  {
    "text": "method of the shapes.  Does that--",
    "start": "2228160",
    "end": "2233879"
  },
  {
    "text": "AUDIENCE: So wait. What is this doing then? L is a list of areas?",
    "start": "2233879",
    "end": "2239559"
  },
  {
    "text": "PROFESSOR: No, L is\na list of shapes.  It's a list of subclasses\nof shapes.",
    "start": "2239560",
    "end": "2247004"
  },
  {
    "start": "2247004",
    "end": "2253452"
  },
  {
    "text": "AUDIENCE: So you're feeding\nf this list of shapes. ",
    "start": "2253452",
    "end": "2258908"
  },
  {
    "text": "Oh, and to compare if S and\nL [? into that list ?] is greater. And for equal to x, do you have\nto use the greater than",
    "start": "2258908",
    "end": "2266292"
  },
  {
    "text": "or equal to-- PROFESSOR: Operator, right. AUDIENCE: --method, the\nclass of shapes which compares areas?",
    "start": "2266292",
    "end": "2271704"
  },
  {
    "text": "PROFESSOR: Mm-hm. Now, I might regret this.",
    "start": "2271704",
    "end": "2277040"
  },
  {
    "start": "2277040",
    "end": "2289110"
  },
  {
    "text": "I think this'll work. Yep. It works. ",
    "start": "2289110",
    "end": "2295560"
  },
  {
    "text": "So, you see this weirdness\nI have here? It's showing pretty explicitly\nthat I'm",
    "start": "2295560",
    "end": "2301269"
  },
  {
    "text": "calling this a GE operator. It's just so--",
    "start": "2301270",
    "end": "2307180"
  },
  {
    "text": "this is really just shorthand\nfor that. Syntactic sugar. It's easier to look at.",
    "start": "2307180",
    "end": "2313290"
  },
  {
    "text": "Easier to understand. And to even drive that\npoint further home--",
    "start": "2313290",
    "end": "2319580"
  },
  {
    "start": "2319580",
    "end": "2328870"
  },
  {
    "text": "whenever that GE, whenever that\ncomparison is done, it's going to print out I'm here.",
    "start": "2328870",
    "end": "2335619"
  },
  {
    "text": "So it is actually getting\ncalled and not just blowing smoke. ",
    "start": "2335620",
    "end": "2342570"
  },
  {
    "text": "Have we beaten this\nproblem to death?  Last problem.",
    "start": "2342570",
    "end": "2348720"
  },
  {
    "text": " So, I'm actually not a huge\nfan of this problem.",
    "start": "2348720",
    "end": "2357480"
  },
  {
    "text": "But the way I think of it\nis, it's the number guessing game, right?",
    "start": "2357480",
    "end": "2362930"
  },
  {
    "text": "So I say to you, I'm thinking of\na number between 0 and 100. Or in this case, maxVal.",
    "start": "2362930",
    "end": "2369079"
  },
  {
    "text": "And your job is to guess, as\nquickly as possible, what number I'm thinking of. The only thing I can tell you\nis that you give me a guess",
    "start": "2369080",
    "end": "2376350"
  },
  {
    "text": "and I'll tell you if it's higher\nor lower, or if it is the answer. So if I'm thinking of a\nnumber between 0 and",
    "start": "2376350",
    "end": "2383420"
  },
  {
    "text": "100, what's the strategy? AUDIENCE: [UNINTELLIGIBLE]",
    "start": "2383420",
    "end": "2389030"
  },
  {
    "text": "PROFESSOR: Binary search. AUDIENCE: Binary search, yeah. PROFESSOR: Binary\nsearch, right? So you're going to start\nin the middle.",
    "start": "2389030",
    "end": "2394559"
  },
  {
    "text": "You're going to start at 50, and\nyou're going to say-- and I'm going to say, well,\nno, the number I'm",
    "start": "2394560",
    "end": "2400300"
  },
  {
    "text": "thinking of is lower. So now you're going to guess\nbetween 0 and 50, 25.",
    "start": "2400300",
    "end": "2405970"
  },
  {
    "text": "And I'm going to say\nit's higher. Now you're going to guess\nbetween 25 and 50.",
    "start": "2405970",
    "end": "2411562"
  },
  {
    "text": "I don't know, I didn't actually\nthink of a number. But you get the idea, right? So this problem is asking you to\nimplement a binary search.",
    "start": "2411562",
    "end": "2418785"
  },
  {
    "text": " And comp.guess here\nis functioning",
    "start": "2418785",
    "end": "2425880"
  },
  {
    "text": "as me in this problem. It knows a number and you write\na program that's going",
    "start": "2425880",
    "end": "2434670"
  },
  {
    "text": "to guess it, which\nis find.number. So, there are multiple ways\nto do this problem.",
    "start": "2434670",
    "end": "2445200"
  },
  {
    "text": "Here is my solution. ",
    "start": "2445200",
    "end": "2453070"
  },
  {
    "text": "This is just an implementation\nof comp guess. At the beginning, set a maximum\nvalue of 100,000.",
    "start": "2453070",
    "end": "2459069"
  },
  {
    "text": "And I'm going to guess the magic\nnumber, or I'm going to choose a random number\nfrom between-- yeah?",
    "start": "2459070",
    "end": "2465028"
  },
  {
    "text": "AUDIENCE: When you say binary\nsearch, is that the same thing as bisection search?",
    "start": "2465028",
    "end": "2470319"
  },
  {
    "text": "PROFESSOR: It's the same idea. But the way that I differentiate\nbinary search from bisection search is that\nyou do a binary search on a",
    "start": "2470320",
    "end": "2476610"
  },
  {
    "text": "finite list of elements,\nof sorted elements. So I might have a list of names\nin alphabetical order,",
    "start": "2476610",
    "end": "2486600"
  },
  {
    "text": "or a list of numbers\nin ascending order. And I would do a binary\nsearch on that list.",
    "start": "2486600",
    "end": "2493150"
  },
  {
    "text": "With bisection search, it's not\nnecessarily a finite list of numbers or elements\nthat I'm looking at.",
    "start": "2493150",
    "end": "2500830"
  },
  {
    "text": "It's, I know that the answer\nexists within a lower and an upper bound, and I'm going to\ndivide that search space in",
    "start": "2500830",
    "end": "2510230"
  },
  {
    "text": "half successively or iteratively\nto find that actual value.",
    "start": "2510230",
    "end": "2515950"
  },
  {
    "text": "But it's not necessarily a\nfinite list of elements between those bounds. ",
    "start": "2515950",
    "end": "2522330"
  },
  {
    "text": "That's good? AUDIENCE: Yes. PROFESSOR: So this is\none implementation.",
    "start": "2522330",
    "end": "2528410"
  },
  {
    "text": "You can do it any\nnumber of ways.",
    "start": "2528410",
    "end": "2533890"
  },
  {
    "text": "This numSteps thing, you\nwouldn't need to have.",
    "start": "2533890",
    "end": "2539059"
  },
  {
    "text": "It's just for me to illustrate\nsome stuff. So I'm going to start\nat 0, and I'm",
    "start": "2539060",
    "end": "2545240"
  },
  {
    "text": "going to start at maxVal. And then I'm going to\nkeep iterating. While I don't have,\nor while I haven't",
    "start": "2545240",
    "end": "2552200"
  },
  {
    "text": "reached the answer, basically. So, I'm going to make my\nguess in the middle.",
    "start": "2552200",
    "end": "2558880"
  },
  {
    "text": "And then if comp.guess tells me\nthat it's higher, or that",
    "start": "2558880",
    "end": "2568329"
  },
  {
    "text": "my guess is too low, basically,\nthen I'm going to set my upper--",
    "start": "2568330",
    "end": "2574890"
  },
  {
    "text": "sorry, if my guess is too high,\nthen I'm going to set my upper bound to my guess.",
    "start": "2574890",
    "end": "2579950"
  },
  {
    "text": "And then I'm going to search\nin the middle from there. And then if it tells me that my\nguess is too high, then I'm going to search in\nthe upper region.",
    "start": "2579950",
    "end": "2588400"
  },
  {
    "text": "Otherwise, that means I've\nmade the correct guess and I'm done.",
    "start": "2588400",
    "end": "2595810"
  },
  {
    "text": "So, very simple.",
    "start": "2595810",
    "end": "2603480"
  },
  {
    "text": " The key part of this problem\nthat tells you that you should",
    "start": "2603480",
    "end": "2611640"
  },
  {
    "text": "use binary search, though, is\nthat it stipulates you need to have a log maxVal algorithm.",
    "start": "2611640",
    "end": "2617440"
  },
  {
    "text": "And binary search is\na log N algorithm. I mean, you could do find number\nin a linear search, but",
    "start": "2617440",
    "end": "2627180"
  },
  {
    "text": "it would be fairly\ninefficient.  All right?",
    "start": "2627180",
    "end": "2632600"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE] just guess\none number, then go-- PROFESSOR: Yeah, start at 0--",
    "start": "2632600",
    "end": "2638040"
  },
  {
    "text": "AUDIENCE: [UNINTELLIGIBLE]\nguess 1, you guess 2, then guess 3. PROFESSOR: Yep. So you just keep incrementing\nby one.",
    "start": "2638040",
    "end": "2644404"
  },
  {
    "start": "2644404",
    "end": "2650212"
  },
  {
    "text": "AUDIENCE: If it didn't specify,\noh, it should run log [UNINTELLIGIBLE], would it be\nOK if we had used the word",
    "start": "2650212",
    "end": "2657472"
  },
  {
    "text": "[UNINTELLIGIBLE]? PROFESSOR: If it didn't specify\nthe complexity, then yeah, you could use whatever\nsearch you deemed appropriate.",
    "start": "2657472",
    "end": "2663990"
  },
  {
    "text": "But because it said it\nneeds to be log N -- AUDIENCE: Yeah, yeah. OK.",
    "start": "2663990",
    "end": "2671289"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: What's that? AUDIENCE: Are you going\nto [UNINTELLIGIBLE]?",
    "start": "2671290",
    "end": "2676625"
  },
  {
    "text": " PROFESSOR: Not in this\nparticular case. ",
    "start": "2676625",
    "end": "2685000"
  },
  {
    "text": "Because we're dealing with\nintegers anyway. So all these operations\nare going to",
    "start": "2685000",
    "end": "2693197"
  },
  {
    "text": "result in integer results. AUDIENCE: Are you going to ever\nbe able to get to the highest number?",
    "start": "2693197",
    "end": "2699130"
  },
  {
    "text": "PROFESSOR: So if it were,\nlike, 99,000? Is that what you're asking?",
    "start": "2699130",
    "end": "2705820"
  },
  {
    "text": "AUDIENCE: If the number\nwere maxVal. PROFESSOR: Well, we'll see. I might have it wrong in my",
    "start": "2705820",
    "end": "2711072"
  },
  {
    "text": "implementation, always possible. If I do, I'd probably take\none point off me.",
    "start": "2711072",
    "end": "2716561"
  },
  {
    "start": "2716561",
    "end": "2727880"
  },
  {
    "text": "Yeah, so I have a bug. So I am actually--",
    "start": "2727880",
    "end": "2733380"
  },
  {
    "text": "AUDIENCE: When it divides, it\nrounds it down [INAUDIBLE]. PROFESSOR: Yeah. So I have a bug.",
    "start": "2733380",
    "end": "2738980"
  },
  {
    "text": "And I'm not going to try and\nfix it right now, but yeah.",
    "start": "2738980",
    "end": "2744300"
  },
  {
    "text": "If I were grading this and this\nwere my solution, I'd dock me a point or two.",
    "start": "2744300",
    "end": "2749330"
  },
  {
    "text": "AUDIENCE: What's your error? PROFESSOR: My error is that\nbecause of this the way that I",
    "start": "2749330",
    "end": "2758300"
  },
  {
    "text": "get my guess here, I'm never\ngoing to get to max val.",
    "start": "2758300",
    "end": "2765000"
  },
  {
    "text": "If the computer chose maxVal as\nits guess, then I'd never get to that.",
    "start": "2765000",
    "end": "2770496"
  },
  {
    "text": " So yeah, you caught me.",
    "start": "2770496",
    "end": "2777936"
  },
  {
    "text": "AUDIENCE: A friend of mine\nlooked at this and was like, oh, you should define another\nfunction to solve it.",
    "start": "2777936",
    "end": "2784782"
  },
  {
    "text": "Is that kind of thing actually\nallowed on the exam at all, or no? PROFESSOR: Well, why did your\nfriend think you need to find",
    "start": "2784782",
    "end": "2791369"
  },
  {
    "text": "another function? AUDIENCE: I'm not\nexactly sure. It was supposed to be\n[UNINTELLIGIBLE]",
    "start": "2791370",
    "end": "2800370"
  },
  {
    "text": "PROFESSOR: Did they say define\na recursive function? AUDIENCE: I think that's what\nI was trying to do.",
    "start": "2800370",
    "end": "2806360"
  },
  {
    "text": "PROFESSOR: So I'm solving\nit iteratively. You really can write a\nrecursive function. And in this case, because\nwe've given you the",
    "start": "2806360",
    "end": "2814029"
  },
  {
    "text": "specification for find number,\nyou'd probably write something like find number helper, and\nhave whatever additional",
    "start": "2814030",
    "end": "2820632"
  },
  {
    "text": "parameters you needed in order\nto support the recursion. AUDIENCE: So you can\ndo that or no?",
    "start": "2820632",
    "end": "2825668"
  },
  {
    "text": "PROFESSOR: Yeah. We'd be fine with that. The point is that you write a\nfunction that runs in log",
    "start": "2825668",
    "end": "2831091"
  },
  {
    "text": "maxVal time.  AUDIENCE: Because at the top it\nsays that the magic number",
    "start": "2831091",
    "end": "2837622"
  },
  {
    "text": "is in range maxVal, doesn't\nthat mean that the number would not ever be maxVal?",
    "start": "2837623",
    "end": "2845881"
  },
  {
    "text": "PROFESSOR: Let me see. Actually, yeah. Because it would be 0 to 999--",
    "start": "2845881",
    "end": "2852783"
  },
  {
    "text": "or 999,999. Well, I'm not sure\nif this actually",
    "start": "2852783",
    "end": "2860070"
  },
  {
    "text": "constitutes a bug or not. So I'd have to do\nunit testing. I don't have any test cases.",
    "start": "2860070",
    "end": "2866804"
  },
  {
    "text": "Which is, again, back\nto unit testing. ",
    "start": "2866804",
    "end": "2872460"
  },
  {
    "text": "You have a question or--? AUDIENCE: Yeah. Could you do this by saying\nyour guess equals choose a",
    "start": "2872460",
    "end": "2880480"
  },
  {
    "text": "random number between\nhigh and low?  PROFESSOR: You could.",
    "start": "2880480",
    "end": "2887700"
  },
  {
    "text": "But it would have-- the analyzing complexity would\nbe problematic, I would think.",
    "start": "2887700",
    "end": "2896857"
  },
  {
    "text": "Doing it this way, by guessing\nright in the middle, you know it's going to be log\nmaxVal complexity.",
    "start": "2896857",
    "end": "2905590"
  },
  {
    "text": "If you were to choose a random\nnumber between low and high, I'm not sure what that would\ndo to the complexity.",
    "start": "2905590",
    "end": "2911390"
  },
  {
    "text": "It would make the analysis a\nlittle bit more intricate. ",
    "start": "2911390",
    "end": "2917963"
  },
  {
    "text": "And if this were the actual quiz\nand you put that as your",
    "start": "2917964",
    "end": "2923780"
  },
  {
    "text": "answer we'd probably take\na fair number of points off for it. ",
    "start": "2923780",
    "end": "2930530"
  },
  {
    "text": "There are people who\ndo study algorithms that do that, though. They use random numbers in\norder to [UNINTELLIGIBLE]",
    "start": "2930530",
    "end": "2936016"
  },
  {
    "text": "the values.  So we're done with the quiz.",
    "start": "2936016",
    "end": "2944100"
  },
  {
    "text": "And now we've got a list\nof topics to go over. ",
    "start": "2944100",
    "end": "2949380"
  },
  {
    "text": "So, let's start at the top. The first subject that was\nlisted-- so all you got the",
    "start": "2949380",
    "end": "2956980"
  },
  {
    "text": "list of quiz topics for the\nquiz, I'm assuming? Did all of you look at it?",
    "start": "2956980",
    "end": "2963560"
  },
  {
    "text": "The first topic is algorithms. And I have big-O notation,\nexhaustive enumeration, guess and check, successive\napproximation, divide and",
    "start": "2963560",
    "end": "2970059"
  },
  {
    "text": "conquer, binary search, merge\nsort, hashing, orders of growth, and amortized\nanalysis.",
    "start": "2970060",
    "end": "2975860"
  },
  {
    "text": "So, first come, first serve. What do people want to see?",
    "start": "2975860",
    "end": "2981057"
  },
  {
    "text": "AUDIENCE: Hashing. AUDIENCE: Yeah. Hashing and amortized\nanalysis. PROFESSOR: Hashing and\namortized analysis.",
    "start": "2981057",
    "end": "2987730"
  },
  {
    "text": "OK. So why don't I start with\nhashing, because that's pretty easy.",
    "start": "2987730",
    "end": "2993940"
  },
  {
    "text": "The idea behind hashing is that\nyou have a function, and",
    "start": "2993940",
    "end": "3000619"
  },
  {
    "text": "it's going to take some input. And it's going to compute\nan address of some sort.",
    "start": "3000620",
    "end": "3008000"
  },
  {
    "text": "And let's imagine that I have\na data structure that has a",
    "start": "3008000",
    "end": "3013690"
  },
  {
    "text": "number of buckets arranged\none after the other. ",
    "start": "3013690",
    "end": "3023700"
  },
  {
    "text": "What hashing does is, it says I\nhave this input s, or a key,",
    "start": "3023700",
    "end": "3031770"
  },
  {
    "text": "if you will. And I'm going to compute\nan address like a number of some sort.",
    "start": "3031770",
    "end": "3037540"
  },
  {
    "text": "And it's going to, say,\nwind up here.  And this relates to Python\nbecause this is how",
    "start": "3037540",
    "end": "3046430"
  },
  {
    "text": "dictionaries are implemented. So this s here is going to be\nthe key that you give the",
    "start": "3046430",
    "end": "3051890"
  },
  {
    "text": "dictionary. And then it'll compute a\nlocation for this bucket where",
    "start": "3051890",
    "end": "3057530"
  },
  {
    "text": "it's going to put the value. ",
    "start": "3057530",
    "end": "3063740"
  },
  {
    "text": "So, the idea-- what makes these hashing\nfunctions valuable, especially",
    "start": "3063740",
    "end": "3072890"
  },
  {
    "text": "with respect to dictionaries, is\nthat you can check for the presence of a key or a value\nin constant time.",
    "start": "3072890",
    "end": "3080270"
  },
  {
    "text": "Because the hashing function\nis more or less constant. And once you have an address\ninto the data structure, it's",
    "start": "3080270",
    "end": "3087680"
  },
  {
    "text": "very easy to compute the\nlocation where you're going to put something. So, I'm not sure--",
    "start": "3087680",
    "end": "3097160"
  },
  {
    "text": "does that kind of help you? You don't need to know hashing\nin great detail.",
    "start": "3097160",
    "end": "3107520"
  },
  {
    "text": "You're not going to need to know\nthe hashing function for like a string, or the hashing\nfunction for a tuple or",
    "start": "3107520",
    "end": "3114560"
  },
  {
    "text": "something like that. The main points that you need to\nget from hashing is that it",
    "start": "3114560",
    "end": "3121130"
  },
  {
    "text": "computes an address into\nthis data structure. It's a constant time thing.",
    "start": "3121130",
    "end": "3126620"
  },
  {
    "text": "And that's about it, actually. If you have those two\nconcepts down--",
    "start": "3126620",
    "end": "3132990"
  },
  {
    "text": "well, also, three that that's\nhow dictionaries are implemented-- if you have those in your mind\nfor hashing, you'll be good.",
    "start": "3132990",
    "end": "3141860"
  },
  {
    "text": "Anyone have any other questions\nfor hashing? AUDIENCE: So we never have to\nlike write a hashing function.",
    "start": "3141860",
    "end": "3147250"
  },
  {
    "text": "It's more like [INAUDIBLE]  PROFESSOR: This is so that you\nknow what it is, and when you",
    "start": "3147250",
    "end": "3152770"
  },
  {
    "text": "see it in the future, if you see\nit in the future, you're not totally lost. You have an idea of\nwhat it's doing.",
    "start": "3152770",
    "end": "3160720"
  },
  {
    "text": "You can define your own hash\nfunctions, but we're not going to require that of you\nin this course.",
    "start": "3160720",
    "end": "3167250"
  },
  {
    "start": "3167250",
    "end": "3173940"
  },
  {
    "text": "So that's hashing, basically. And all you need to\nknow for the quiz.",
    "start": "3173940",
    "end": "3179620"
  },
  {
    "text": "So for amortized analysis, the\nidea behind amortized analysis",
    "start": "3179620",
    "end": "3188010"
  },
  {
    "text": "is that you have-- maybe you have a known sequence\nof operations.",
    "start": "3188010",
    "end": "3194769"
  },
  {
    "text": "And you're trying to find what\nthe worst case runtime for",
    "start": "3194770",
    "end": "3201320"
  },
  {
    "text": "that sequence of\noperations is. And you might have a bunch of\noperations that are really,",
    "start": "3201320",
    "end": "3206740"
  },
  {
    "text": "really low cost, or\nlow complexity. And one really expensive one.",
    "start": "3206740",
    "end": "3211870"
  },
  {
    "text": "And for our purposes, we're\ntrying to find this--",
    "start": "3211870",
    "end": "3219140"
  },
  {
    "text": "find which of these operations\nis the dominating factor for the complexity. So the example I would use is,\nlet's say that I have the task",
    "start": "3219140",
    "end": "3228330"
  },
  {
    "text": "of searching for an element\nin a big list of elements.",
    "start": "3228330",
    "end": "3235490"
  },
  {
    "text": "So we know two basic search\nalgorithms for this, right? We know a linear search, where\nwe go one at a time through",
    "start": "3235490",
    "end": "3242990"
  },
  {
    "text": "each of the elements. And what's the complexity\nof that? AUDIENCE: [INAUDIBLE]",
    "start": "3242990",
    "end": "3248850"
  },
  {
    "text": "PROFESSOR: What's that? AUDIENCE: Just the length\nof [INAUDIBLE]. PROFESSOR: It's going to be\nlinear in terms of the number of elements in the list.",
    "start": "3248850",
    "end": "3255010"
  },
  {
    "text": "We also know binary search. What's the complexity\nof binary search?",
    "start": "3255010",
    "end": "3262160"
  },
  {
    "text": "AUDIENCE: Log N. PROFESSOR: Log N. Now, there's\na problem with binary search. It has a requirement.",
    "start": "3262160",
    "end": "3267580"
  },
  {
    "text": "Will binary search work on a\nlist that is not sorted? No.",
    "start": "3267580",
    "end": "3273650"
  },
  {
    "text": "You require it to be sorted. So, we've talked about\nsorting in class.",
    "start": "3273650",
    "end": "3281609"
  },
  {
    "text": "He covered it during\nthe lecture.  For basic sorting that we've\nseen, the lower bound, the",
    "start": "3281610",
    "end": "3294510"
  },
  {
    "text": "complexity of the sorting\nalgorithms is N log N. So merge sort will be an\nN log N algorithm.",
    "start": "3294510",
    "end": "3300880"
  },
  {
    "text": "So, when-- let's say that we just need\nto do one search, right?",
    "start": "3300880",
    "end": "3310360"
  },
  {
    "text": "Do I really want to\nuse binary search?",
    "start": "3310360",
    "end": "3316590"
  },
  {
    "text": "Why? AUDIENCE: [INAUDIBLE] PROFESSOR: Because I have\nto sort it first.",
    "start": "3316590",
    "end": "3322995"
  },
  {
    "text": "And if I just do--",
    "start": "3322995",
    "end": "3328470"
  },
  {
    "text": "if I do I have to sort\nand then search, and",
    "start": "3328470",
    "end": "3344060"
  },
  {
    "text": "this is going to be-- ",
    "start": "3344060",
    "end": "3354040"
  },
  {
    "text": "whereas if I do a linear search,\nI just have search.",
    "start": "3354040",
    "end": "3364250"
  },
  {
    "start": "3364250",
    "end": "3371460"
  },
  {
    "text": "And for just a single search,\nfor binary search, this is",
    "start": "3371460",
    "end": "3377720"
  },
  {
    "text": "going to dominate\nmy complexity. But, let's say that I'm going\nto do a million searches. ",
    "start": "3377720",
    "end": "3385400"
  },
  {
    "text": "Now, it might behoove me to\nactually sort this first. Because I only have to\nsort the list once.",
    "start": "3385400",
    "end": "3393980"
  },
  {
    "text": "And then I can do as many\nsearches as I want. So, in the grand scheme of\nthings, if I'm doing a million",
    "start": "3393980",
    "end": "3402490"
  },
  {
    "text": "searches, then linear search\nis a really poor choice.",
    "start": "3402490",
    "end": "3408140"
  },
  {
    "text": "And binary search would\nbe my best option. And this is about as deep\nas we want to go",
    "start": "3408140",
    "end": "3415520"
  },
  {
    "text": "with amortized analysis. It's this idea that there's a\ncertain point at which one",
    "start": "3415520",
    "end": "3421089"
  },
  {
    "text": "algorithm becomes more important\nthan another algorithm, because the\ncomposition of its operations",
    "start": "3421090",
    "end": "3426920"
  },
  {
    "text": "kind of determines, it changes\nas you increase the number of elements you're working with\nthe number of times you're",
    "start": "3426920",
    "end": "3432340"
  },
  {
    "text": "going to do the operation.  That's kind of what you\nneed to understand",
    "start": "3432340",
    "end": "3438530"
  },
  {
    "text": "for amortized analysis. And it can be used in other\ntypes of analyses, but we're",
    "start": "3438530",
    "end": "3446180"
  },
  {
    "text": "not going to get into that. ",
    "start": "3446180",
    "end": "3454270"
  },
  {
    "text": "All right. What other topics do we want\nto go over for algorithms?",
    "start": "3454270",
    "end": "3459930"
  },
  {
    "text": "We've got big-O notation,\nexhaustive enumeration, divide",
    "start": "3459930",
    "end": "3465950"
  },
  {
    "text": "and conquer. Successive approximation,\nmerge sort, and orders of growth. ",
    "start": "3465950",
    "end": "3474352"
  },
  {
    "text": "AUDIENCE: Can we go\nover merge sort? PROFESSOR: You want to\ngo over merge sort? OK.",
    "start": "3474352",
    "end": "3480630"
  },
  {
    "text": "So-- and today actually,\nI have my code. ",
    "start": "3480630",
    "end": "3486640"
  },
  {
    "text": "So merge sort is a divide\nand conquer algorithm.",
    "start": "3486640",
    "end": "3491700"
  },
  {
    "text": "And the idea is that\nI am going to",
    "start": "3491700",
    "end": "3497500"
  },
  {
    "text": "take a list of elements. ",
    "start": "3497500",
    "end": "3502839"
  },
  {
    "text": "And I'm going to divide\nthe list in half.",
    "start": "3502840",
    "end": "3511750"
  },
  {
    "text": "So I'm going to get a left list\nand a right list, and they're unsorted. And then I'm going to call\nmerge.sort on them.",
    "start": "3511750",
    "end": "3517590"
  },
  {
    "text": " And I'm going to keep\nrecursively calling merge sort",
    "start": "3517590",
    "end": "3525110"
  },
  {
    "text": "until I have one element or\nno elements in the list. And then I'm going to\nreturn the list.",
    "start": "3525110",
    "end": "3531065"
  },
  {
    "text": " After I do a merge sort on the\nleft and right halves, I'm",
    "start": "3531065",
    "end": "3538850"
  },
  {
    "text": "going to merge them. And the merge operation is just\ngoing to start at the",
    "start": "3538850",
    "end": "3546760"
  },
  {
    "text": "beginning of the left and right\nhalves of the list, and it's going to append the\nsmaller element at the",
    "start": "3546760",
    "end": "3553890"
  },
  {
    "text": "beginning of each of the lists\nto result until it gets to the end of the lists. So I'll try a blackboard\ndemonstration in a second.",
    "start": "3553890",
    "end": "3564650"
  },
  {
    "text": "Or explanation in a second. So, this before parameter,\nall this is doing is it's",
    "start": "3564650",
    "end": "3575809"
  },
  {
    "text": "determining the order\nof the elements. So it's saying that left should\ncome before right.",
    "start": "3575810",
    "end": "3585599"
  },
  {
    "text": "It'll return true if left should\ncome before right, and false if right should\ncome before left.",
    "start": "3585600",
    "end": "3591300"
  },
  {
    "text": " So, intuitively, because I don't\nthink that was a very",
    "start": "3591300",
    "end": "3604910"
  },
  {
    "text": "good explanation,\nlet's say that I have a list of elements. ",
    "start": "3604910",
    "end": "3616740"
  },
  {
    "text": "And they're unsorted. ",
    "start": "3616740",
    "end": "3628360"
  },
  {
    "text": "All right. So it's an unsorted\nlist of elements. When merge.sort first starts,\nit's going to divide this list",
    "start": "3628360",
    "end": "3635880"
  },
  {
    "text": "into left and right halves. So basically it's going to\ntake the middle here. ",
    "start": "3635880",
    "end": "3642820"
  },
  {
    "text": "And then it's going to call\nitself, on this left half and",
    "start": "3642820",
    "end": "3653360"
  },
  {
    "text": "then on this right half. ",
    "start": "3653360",
    "end": "3661760"
  },
  {
    "text": "And it's going to\nkeep doing this. It's going to divide this\nhalf into say --",
    "start": "3661760",
    "end": "3668120"
  },
  {
    "text": "5, 2, 1. ",
    "start": "3668120",
    "end": "3690380"
  },
  {
    "text": "Now, when it gets to these\nlittle single elements, it's going to do something\ninteresting. ",
    "start": "3690380",
    "end": "3700460"
  },
  {
    "text": "It's going to merge these two. So when it gets down to these\nsingle elements, it's just",
    "start": "3700460",
    "end": "3705559"
  },
  {
    "text": "going to return the list as\nis, it's not going to do anything to them.",
    "start": "3705560",
    "end": "3711310"
  },
  {
    "text": "And then the code after\nthis, division, is",
    "start": "3711310",
    "end": "3730110"
  },
  {
    "text": "going to merge them. And the way it merges them is,\nit's going to start at the beginning of these two lists.",
    "start": "3730110",
    "end": "3735430"
  },
  {
    "text": "And it's going to say, is this\nelement larger or smaller than this element? Or is it going to come\nbefore this element?",
    "start": "3735430",
    "end": "3742990"
  },
  {
    "text": "And it's going to construct\na merged list. ",
    "start": "3742990",
    "end": "3748420"
  },
  {
    "text": "And then return that\nas its result. So this is going to come down.",
    "start": "3748420",
    "end": "3754369"
  },
  {
    "text": "So now at this point it's\npopping back up the stack. It's going to return this. It's going to merge\nthese two lists.",
    "start": "3754370",
    "end": "3761920"
  },
  {
    "text": "Starts at the beginning\nof both lists. One comes before two.",
    "start": "3761920",
    "end": "3767780"
  },
  {
    "text": "And then this list is done,\nso now it only has this list to do. ",
    "start": "3767780",
    "end": "3775170"
  },
  {
    "text": "After each merge step, these\nlists are going to be sorted. So now where are we at?",
    "start": "3775170",
    "end": "3782240"
  },
  {
    "text": "So now let's do this guy. So this guy gets merged\ninto 6 and 9. ",
    "start": "3782240",
    "end": "3790549"
  },
  {
    "text": "And then this guy, I\ndidn't divide up. So, bad on me. ",
    "start": "3790550",
    "end": "3820770"
  },
  {
    "text": "So we're going to merge those\ntwo single element lists. ",
    "start": "3820770",
    "end": "3832220"
  },
  {
    "text": "Now these get merged. ",
    "start": "3832220",
    "end": "3852420"
  },
  {
    "text": "So these guys are going\nto get merged. So, this is going to become, I\nthink my tree got messed up a",
    "start": "3852420",
    "end": "3858170"
  },
  {
    "text": "little bit. ",
    "start": "3858170",
    "end": "3865780"
  },
  {
    "text": "Now we're going to merge\nthese lists. So we're going to start\nat the beginning. 1 comes before 3.",
    "start": "3865780",
    "end": "3871829"
  },
  {
    "text": "First element is 1. 2 comes before 3. ",
    "start": "3871830",
    "end": "3877780"
  },
  {
    "text": "Now we're here in this list. We're still at the beginning\nof this list. 3 comes before 5. ",
    "start": "3877780",
    "end": "3884692"
  },
  {
    "text": "5 comes before 7.  And we're here.",
    "start": "3884692",
    "end": "3890700"
  },
  {
    "text": "6 comes before 7. Then we have 7. And then 9 comes before 10.",
    "start": "3890700",
    "end": "3899240"
  },
  {
    "text": "Now we're done with this list. So now we have 10, 13. And at the end of the last\nmerge the list is sorted.",
    "start": "3899240",
    "end": "3909059"
  },
  {
    "text": "So, I'm not sure how\nclear that was.",
    "start": "3909060",
    "end": "3914288"
  },
  {
    "text": "AUDIENCE: What happens if\nthere's [UNINTELLIGIBLE] to begin with? Like all of your split equally\ninto [UNINTELLIGIBLE]?",
    "start": "3914288",
    "end": "3919928"
  },
  {
    "text": "What if there's one more\nelement at the top, [UNINTELLIGIBLE]? Do you know what I mean, like,\nthere'd be one left over?",
    "start": "3919928",
    "end": "3925369"
  },
  {
    "text": "PROFESSOR: What do you mean? So there's an odd number of\nelements in the list?",
    "start": "3925370",
    "end": "3932400"
  },
  {
    "text": "So you would just get\nan uneven split. So your left sub-list might\nhave 6 elements.",
    "start": "3932400",
    "end": "3938130"
  },
  {
    "text": "Say you have 11 elements\nin the list. Left element would have 6,\nor left list would have 6",
    "start": "3938130",
    "end": "3943220"
  },
  {
    "text": "elements and then the right\nlist would have 5. AUDIENCE: [UNINTELLIGIBLE]\nthen that would split with 3 and 2. And then the 2 would split to\n1 and 1, the 3 would split",
    "start": "3943220",
    "end": "3950683"
  },
  {
    "text": "into 1 and 2, and then the\n2 would split again? PROFESSOR: And then the 1 would\nactually make a call,",
    "start": "3950683",
    "end": "3956400"
  },
  {
    "text": "but it would be an empty list. It would split, but one of them\nwould be an empty list.",
    "start": "3956400",
    "end": "3962280"
  },
  {
    "text": "AUDIENCE: Oh. So and then it would\njust get-- PROFESSOR: And that's kind of\nwhat happened with my tree.",
    "start": "3962280",
    "end": "3968190"
  },
  {
    "text": "I didn't go all the way\ndown on some of the branches of my tree. ",
    "start": "3968190",
    "end": "3974849"
  },
  {
    "text": "I mean, the main idea behind\nmerge.sort is that you split the list in half, whatever\nsize it this.",
    "start": "3974850",
    "end": "3980349"
  },
  {
    "text": "And then you merge sort\nthose separate halves. And merge sort is going to do\nthe same thing with those",
    "start": "3980350",
    "end": "3986650"
  },
  {
    "text": "separate halves. It's going to split\nthem in half. And sort those halves until it\ngets to the smallest case, which is an empty list or\njust a single element.",
    "start": "3986650",
    "end": "3994000"
  },
  {
    "text": "And then it's just going to\nstart merging these lists. AUDIENCE: Right, I was just\nwondering what happened [UNINTELLIGIBLE]",
    "start": "3994000",
    "end": "4000140"
  },
  {
    "text": "PROFESSOR: Yeah, you'd split it\ninto 2 and 1, and then that merge sort would be\nlike 1 and 1. And then this 1 would split it\ninto a list of 1 and nothing.",
    "start": "4000140",
    "end": "4009596"
  },
  {
    "text": "That's all. And then the merge between\nthat's obvious, right? ",
    "start": "4009596",
    "end": "4016270"
  },
  {
    "text": "AUDIENCE: So in the merge sort\nlecture notes, at one point, lambda is used.",
    "start": "4016270",
    "end": "4022000"
  },
  {
    "text": "Can you explain a bit\nhow this works? PROFESSOR: Does he actually\nuse a lambda? AUDIENCE: Yeah. Why is it useful?",
    "start": "4022000",
    "end": "4028502"
  },
  {
    "text": "I guess [UNINTELLIGIBLE]. PROFESSOR: Ah. He used lambda.",
    "start": "4028502",
    "end": "4035990"
  },
  {
    "text": "OK, Python has these functions\ncalled lambda functions. And what they are essentially\nare like one-liner bits of",
    "start": "4035990",
    "end": "4045570"
  },
  {
    "text": "code that return a value. So let's see. ",
    "start": "4045570",
    "end": "4060980"
  },
  {
    "text": "I can't believe he\nused lambda. ",
    "start": "4060980",
    "end": "4067450"
  },
  {
    "text": "I'm trying to think of where\nI would actually use them. Like, an example. And I don't have one off\nthe top of my head.",
    "start": "4067450",
    "end": "4074710"
  },
  {
    "text": "You're not going to see\na lambda on the quiz. The syntax is not\ntoo difficult.",
    "start": "4074710",
    "end": "4082350"
  },
  {
    "text": "It's basically, so,\nlike lambda x.",
    "start": "4082350",
    "end": "4088840"
  },
  {
    "text": "And then it's going to return,\nlike, x-squared. This is going to create\na function. And it can be something like, I\nassign this lambda function",
    "start": "4088840",
    "end": "4102068"
  },
  {
    "text": "to a variable square. And I'm going to pull\nup a separate--",
    "start": "4102069",
    "end": "4109470"
  },
  {
    "text": "So I'm creating a\nfunction square. But instead of writing something\nlike this, I write",
    "start": "4109470",
    "end": "4125660"
  },
  {
    "text": "it as this. And ... ",
    "start": "4125660",
    "end": "4135432"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: What's that? AUDIENCE: Do you have to save it\nbefore it lets you run it?",
    "start": "4135432",
    "end": "4142398"
  },
  {
    "text": "PROFESSOR: Yeah. That's, again, what I'm doing. I'm just trying to think\nof a witty name. ",
    "start": "4142398",
    "end": "4153691"
  },
  {
    "text": "I'm actually stunned that he\nwhipped lambda out in lecture. ",
    "start": "4153691",
    "end": "4159359"
  },
  {
    "text": "So really it's a\nway of defining these one-liner functions.",
    "start": "4159359",
    "end": "4165200"
  },
  {
    "text": "Python's lambda functions are\nkind of broken, at least in",
    "start": "4165200",
    "end": "4171250"
  },
  {
    "text": "the 2.5, 2.6, 2.7,\n2.x versions. 3.0, 3.x versions of Python, I\nthink, actually do away with",
    "start": "4171250",
    "end": "4179560"
  },
  {
    "text": "lambda because they\nwere broken. You find lambda functions in\na lot of other programming",
    "start": "4179560",
    "end": "4186180"
  },
  {
    "text": "languages like Lisp or Scheme. ",
    "start": "4186180",
    "end": "4191220"
  },
  {
    "text": "And you're never going to\nsee this on a quiz.",
    "start": "4191220",
    "end": "4196630"
  },
  {
    "text": "But if you want to learn\nmore about them you can look it up online. ",
    "start": "4196630",
    "end": "4203020"
  },
  {
    "text": "AUDIENCE: While you're running\nthe function, what is the [INAUDIBLE] The same thing?",
    "start": "4203020",
    "end": "4210153"
  },
  {
    "text": "Oh, OK. PROFESSOR: Yeah. I had it there as an\nillustration that the",
    "start": "4210153",
    "end": "4215835"
  },
  {
    "text": "functions are-- they're\nfunctionally equivalent.",
    "start": "4215835",
    "end": "4221219"
  },
  {
    "text": "And it actually serves to\nillustrate another point, that",
    "start": "4221220",
    "end": "4227290"
  },
  {
    "text": "functions are objects and you\ncan sign them and pass them around and stuff.",
    "start": "4227290",
    "end": "4233010"
  },
  {
    "text": "But lambda functions on their\nown, you're not going to need to know that piece of linguistic\nPython, Pythonese.",
    "start": "4233010",
    "end": "4244885"
  },
  {
    "text": "Bad sentence. You're not going to\nneed to know it. Does that work?",
    "start": "4244885",
    "end": "4250330"
  },
  {
    "text": "OK.  I'm going to have to ask him\nabout that, because I can't",
    "start": "4250330",
    "end": "4257383"
  },
  {
    "text": "believe he used lambda\nin lecture. ",
    "start": "4257383",
    "end": "4263770"
  },
  {
    "text": "AUDIENCE: In one of the\nlecture notes, he used something called x-range. PROFESSOR: x-range.",
    "start": "4263770",
    "end": "4268940"
  },
  {
    "text": "AUDIENCE: What does that do? PROFESSOR: Did he talk about\ngenerator objects or iterate? Or yield?",
    "start": "4268940",
    "end": "4274715"
  },
  {
    "text": "You haven't seen those? OK. ",
    "start": "4274715",
    "end": "4283410"
  },
  {
    "text": "So what you're asking is,\nsomething like that.",
    "start": "4283410",
    "end": "4290720"
  },
  {
    "text": "He used something like that.  The difference between range\nand x-range is that range",
    "start": "4290720",
    "end": "4298830"
  },
  {
    "text": "returns a list of integers,\nand x-range returns in generator object.",
    "start": "4298830",
    "end": "4304730"
  },
  {
    "text": " And I know that really meant\na whole lot to you.",
    "start": "4304730",
    "end": "4311150"
  },
  {
    "text": "So let's say that I assign ... ",
    "start": "4311150",
    "end": "4316470"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: Yeah. that's what\nI'm going to show.",
    "start": "4316470",
    "end": "4322960"
  },
  {
    "text": "So if I do print list of\nintegers, or list of numbers, it's actually going to print\nthe list of numbers.",
    "start": "4322960",
    "end": "4329170"
  },
  {
    "text": " Someone fall back there?",
    "start": "4329170",
    "end": "4334949"
  },
  {
    "text": " So it's actually going\nto print that list.",
    "start": "4334950",
    "end": "4341849"
  },
  {
    "text": "Now, if I do something like-- ",
    "start": "4341850",
    "end": "4356270"
  },
  {
    "text": "pretty sure this is not\ngoing to print the...  The reason is that if you look\nat the type of the object",
    "start": "4356270",
    "end": "4364880"
  },
  {
    "text": "that's returned, it's--",
    "start": "4364880",
    "end": "4374550"
  },
  {
    "text": "well, x-range doesn't really\nhelp much either. ",
    "start": "4374550",
    "end": "4379840"
  },
  {
    "text": "Why does he do this to me? ",
    "start": "4379840",
    "end": "4386690"
  },
  {
    "text": "It's a way of-- so let's say\nthat you have a list of a billion elements, or numbers,\nor things that you need to",
    "start": "4386690",
    "end": "4393550"
  },
  {
    "text": "iterate over in a for loop. It's probably not a good idea\nto bring all of those into",
    "start": "4393550",
    "end": "4399300"
  },
  {
    "text": "memory at once. So, or to necessarily keep\nthem all around.",
    "start": "4399300",
    "end": "4406020"
  },
  {
    "text": "You want-- that's where things like\nx-range come in. So, let's do this.",
    "start": "4406020",
    "end": "4415251"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] for i\nin x-range 10 [INAUDIBLE] PROFESSOR: Yeah.",
    "start": "4415251",
    "end": "4420608"
  },
  {
    "text": "So if I do this, it's going\nto be the same as if",
    "start": "4420608",
    "end": "4435050"
  },
  {
    "text": "I were to do this. ",
    "start": "4435050",
    "end": "4445599"
  },
  {
    "text": "It's going to have the same\nfunctional effect, but the difference comes in-- let's\nsay that I were to do",
    "start": "4445600",
    "end": "4452409"
  },
  {
    "text": "something like this. ",
    "start": "4452410",
    "end": "4459790"
  },
  {
    "text": "Lot of numbers, right? I'm hoping Python crashes\non this, because this is my whole point.",
    "start": "4459790",
    "end": "4465430"
  },
  {
    "text": "Yeah, so there's\ntoo many items. But let's see if I do\nit with x-range.",
    "start": "4465430",
    "end": "4471280"
  },
  {
    "start": "4471280",
    "end": "4479000"
  },
  {
    "text": "I should probably comment\nthis out. ",
    "start": "4479000",
    "end": "4489940"
  },
  {
    "text": "I chose a really too large\nnumber, didn't I? ",
    "start": "4489940",
    "end": "4506260"
  },
  {
    "text": "I'm going to find a number\nthat has too many list elements, but Python can still\nfeel comfortable constructing",
    "start": "4506260",
    "end": "4512570"
  },
  {
    "text": "an x-range out of... The point is that there's\na certain",
    "start": "4512570",
    "end": "4517730"
  },
  {
    "text": "point, a certain number. ",
    "start": "4517730",
    "end": "4525870"
  },
  {
    "text": "I don't know if it's going\nto do that comfortably. ",
    "start": "4525870",
    "end": "4538200"
  },
  {
    "text": "So you see this little delay\nthat's occurring? Actually, this kind\nof a long delay?",
    "start": "4538200",
    "end": "4543410"
  },
  {
    "text": "It's actually hanging up\non this range command. Because it's actually\nconstructing this list object",
    "start": "4543410",
    "end": "4549220"
  },
  {
    "text": "with all these integers in it. So, let's say I do this.",
    "start": "4549220",
    "end": "4555295"
  },
  {
    "start": "4555295",
    "end": "4561040"
  },
  {
    "text": "Are you going to need to know\nthe exact difference? No. Is there a difference?",
    "start": "4561040",
    "end": "4566570"
  },
  {
    "text": "Yes. Am I prepared to explain\nit exactly, right now? Not really.",
    "start": "4566570",
    "end": "4573510"
  },
  {
    "text": "Previous iterations of this\nclass have covered the yield statement in Python, which\nallows you to create functions",
    "start": "4573510",
    "end": "4582750"
  },
  {
    "text": "that create generator\nobjects that... You did yield?",
    "start": "4582750",
    "end": "4588390"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: All right, then you\nshould know about this.",
    "start": "4588391",
    "end": "4595770"
  },
  {
    "text": "So range is going to give\nyou a list of integers. x-range is going to give you a\ngenerator object that uses",
    "start": "4595770",
    "end": "4601699"
  },
  {
    "text": "yields to produce\nthese integers. So let me see if can\nrescue my machine.",
    "start": "4601700",
    "end": "4610205"
  },
  {
    "text": " All right. ",
    "start": "4610205",
    "end": "4645330"
  },
  {
    "text": "So, he covered something\nlike that with yield? So if I were to, say,\ndo i in my x-range--",
    "start": "4645330",
    "end": "4655710"
  },
  {
    "start": "4655710",
    "end": "4662239"
  },
  {
    "text": "back to where I was.  My x-range does the exact same\nthing that x-range does.",
    "start": "4662240",
    "end": "4672030"
  },
  {
    "text": "Now, as I said before, if I do\na list, or if I do range,",
    "start": "4672030",
    "end": "4689050"
  },
  {
    "text": "that's going to be\na list, right? If I assign this to ... ",
    "start": "4689050",
    "end": "4707239"
  },
  {
    "text": "see that? That's what the yield statement\ndoes for you. It produces that generator and\nthat's how x-range functions.",
    "start": "4707240",
    "end": "4715300"
  },
  {
    "text": "So, basically it allows you to\ndo some interesting things.",
    "start": "4715300",
    "end": "4720579"
  },
  {
    "text": "Like, in this case, it's not too\ninteresting because it's just returning one integer\nafter the other.",
    "start": "4720580",
    "end": "4727620"
  },
  {
    "text": "But let's say that\nI wanted to do -- ",
    "start": "4727620",
    "end": "4733329"
  },
  {
    "text": "def my_squares. ",
    "start": "4733330",
    "end": "4756920"
  },
  {
    "text": "All that's going to do is return\nthese squares of all the numbers between 0 and max N.\nSo if I were to do this, it",
    "start": "4756920",
    "end": "4778240"
  },
  {
    "text": "should print out all\nthe squares-- or the square root of all the\nnumbers between 0 and 9. ",
    "start": "4778240",
    "end": "4786380"
  },
  {
    "text": "Make sense? So that's what yield gets you.",
    "start": "4786380",
    "end": "4791860"
  },
  {
    "text": "Those are generator objects. And that's how x-range works. That's how it's different\nthan range.",
    "start": "4791860",
    "end": "4797990"
  },
  {
    "text": " Does that make sense\nto everyone?",
    "start": "4797990",
    "end": "4805780"
  },
  {
    "text": "OK. I don't need to beat that\nto death any longer? ",
    "start": "4805780",
    "end": "4811180"
  },
  {
    "text": "I was not expecting\nthat question. OK. What should we go over next?",
    "start": "4811180",
    "end": "4817265"
  },
  {
    "text": "Is everyone comfortable\nwith orders of growth? ",
    "start": "4817265",
    "end": "4824820"
  },
  {
    "text": "All right. The next major topic area I\nhave is linguistic issues. So, this covers stuff like\nexceptions, polymorphism,",
    "start": "4824820",
    "end": "4832250"
  },
  {
    "text": "classes and objects. So people want to\ngo over classes?",
    "start": "4832250",
    "end": "4837330"
  },
  {
    "text": "Objects? Polymorphism? OK. AUDIENCE: What's polymorphism?",
    "start": "4837330",
    "end": "4842410"
  },
  {
    "text": "PROFESSOR: Yeah, we'll\nget to that. ",
    "start": "4842410",
    "end": "4849780"
  },
  {
    "text": "So before my computer\ncrashed-- ",
    "start": "4849780",
    "end": "4856380"
  },
  {
    "text": "all right. So here are some class\ndefinitions.",
    "start": "4856380",
    "end": "4863199"
  },
  {
    "text": "So I have a shape object, and\nI've defined two methods, area",
    "start": "4863200",
    "end": "4868220"
  },
  {
    "text": "and perimeter. They currently do nothing\nexcept for raise not",
    "start": "4868220",
    "end": "4873790"
  },
  {
    "text": "implemented errors. And now I have to find\na class hierarchy. I have a rectangle class that\ninherits from shape.",
    "start": "4873790",
    "end": "4881610"
  },
  {
    "text": "So shape is a superclass\nof rectangle. Rectangle is a subclass\nof shape.",
    "start": "4881610",
    "end": "4887250"
  },
  {
    "text": "This also says-- well, let me ask the question,\nis shape a rectangle?",
    "start": "4887250",
    "end": "4893370"
  },
  {
    "start": "4893370",
    "end": "4899130"
  },
  {
    "text": "It's not rhetorical. AUDIENCE: [INAUDIBLE] PROFESSOR: Not necessarily.",
    "start": "4899130",
    "end": "4904543"
  },
  {
    "text": "Is rectangle a shape? AUDIENCE: Yes. PROFESSOR: OK. It's an easy question. It's not a trick question.",
    "start": "4904543",
    "end": "4912500"
  },
  {
    "text": "In the rectangle class,\nI have an INIT method. It just takes the length\nand the width.",
    "start": "4912500",
    "end": "4917740"
  },
  {
    "text": "So computing the area\nis really easy. And then computing the perimeter\nis also very easy.",
    "start": "4917740",
    "end": "4923810"
  },
  {
    "text": "And now I have a string\nrepresentation which is just rectangle with the\nlength and width.",
    "start": "4923810",
    "end": "4930300"
  },
  {
    "text": "Ellipse inherits from shape\nand it has one radius--",
    "start": "4930300",
    "end": "4935570"
  },
  {
    "text": "or one, the long axis\nand the short axis.",
    "start": "4935570",
    "end": "4942960"
  },
  {
    "text": "And computing the area for\nthat is pretty easy. Computing the perimeter, on the\nother hand, I had to look",
    "start": "4942960",
    "end": "4949860"
  },
  {
    "text": "it up online. So if you're interested in the\nformula I used go take a look at this website.",
    "start": "4949860",
    "end": "4956695"
  },
  {
    "start": "4956695",
    "end": "4962050"
  },
  {
    "text": "Again, I have a string method. And then now we have a square\nwhich inherits from rectangle.",
    "start": "4962050",
    "end": "4968030"
  },
  {
    "text": "Because square is just a special\ncase of a rectangle. And so I'm going to reuse it.",
    "start": "4968030",
    "end": "4974270"
  },
  {
    "text": "I'm just going to make both\nlengths the same.",
    "start": "4974270",
    "end": "4980210"
  },
  {
    "text": "That make sense to everyone? And I don't need to override the\narea and perimeter because",
    "start": "4980210",
    "end": "4985880"
  },
  {
    "text": "they're pretty easy\nto understand. Or they're the same. And then circle.",
    "start": "4985880",
    "end": "4991850"
  },
  {
    "text": "It just inherits from ellipse,\nand same thing. I'm just going to reuse the\nstuff that I have in ellipse. ",
    "start": "4991850",
    "end": "5001750"
  },
  {
    "text": "All right. I've defined a bag\nof shapes here. Circles, squares, rectangles.",
    "start": "5001750",
    "end": "5008690"
  },
  {
    "text": "Rectangles. Lots of stuff. Now, to answer your question,\nwhat polymorphism allows me to",
    "start": "5008690",
    "end": "5016170"
  },
  {
    "text": "do is, it allows me to treat\nsubclasses that share a",
    "start": "5016170",
    "end": "5024870"
  },
  {
    "text": "particular superclass, or a\nparent class, the same. So I've defined an area method\non the shape class.",
    "start": "5024870",
    "end": "5036100"
  },
  {
    "text": "And all of my subclasses,\nrectangle, ellipse, circle and square, inherit from\nthis superclass.",
    "start": "5036100",
    "end": "5043640"
  },
  {
    "text": "And some of them override area,\nsome of them don't. It doesn't really\nmatter to me.",
    "start": "5043640",
    "end": "5049750"
  },
  {
    "text": "What matters to me is that if I\nhave a bag of these shapes, I know that I have\nan area method.",
    "start": "5049750",
    "end": "5056030"
  },
  {
    "text": "And I don't need to know the\nparticular or the type of the object that I'm calling\nthe area method on.",
    "start": "5056030",
    "end": "5065739"
  },
  {
    "text": "Right? Python is going to take\ncare of that for me. I can just iterate through this\nbag of shapes, call the",
    "start": "5065740",
    "end": "5074200"
  },
  {
    "text": "area method, and I can get\na sum of the areas. ",
    "start": "5074200",
    "end": "5079320"
  },
  {
    "text": "That's what polymorphism gives\nto me, is it allows me to treat objects uniformly.",
    "start": "5079320",
    "end": "5084820"
  },
  {
    "text": "It allows the objects to change\ntheir behavior based on the particular type of object\nthat I'm using.",
    "start": "5084820",
    "end": "5091510"
  },
  {
    "text": "But I don't need to know\nthe particular details. So it's pretty powerful. So it's like, if I were to\ncreate a racing game and I",
    "start": "5091510",
    "end": "5101489"
  },
  {
    "text": "wanted to drive a car, I could\nhave different models of car. But my game engine wouldn't need\nto know to drive method",
    "start": "5101490",
    "end": "5109850"
  },
  {
    "text": "to call for. Like, a Ford car versus a\nChevrolet, all that stuff.",
    "start": "5109850",
    "end": "5116320"
  },
  {
    "text": " That kind of answer\nyour question?",
    "start": "5116320",
    "end": "5122400"
  },
  {
    "text": "AUDIENCE: Yeah.  AUDIENCE: So if there's not an\narea function that overrides",
    "start": "5122400",
    "end": "5132690"
  },
  {
    "text": "it, what is it going to sum\nif it just raises a non-implemented error? ",
    "start": "5132690",
    "end": "5139770"
  },
  {
    "text": "Yeah, if you haven't\nredefined. PROFESSOR: In this example, I'm\nusing all what are known",
    "start": "5139770",
    "end": "5146190"
  },
  {
    "text": "as concrete classes. So they're not abstract. They all have implementations\nof area.",
    "start": "5146190",
    "end": "5153220"
  },
  {
    "text": "But if I were to say, for some\nreason I decided that I wanted to make something amorphous.",
    "start": "5153220",
    "end": "5160765"
  },
  {
    "text": " This should raise\nan error, right?",
    "start": "5160765",
    "end": "5165800"
  },
  {
    "text": " Unless I have invalid syntax. ",
    "start": "5165800",
    "end": "5178660"
  },
  {
    "text": "So when it gets to\nthere, yeah. ",
    "start": "5178660",
    "end": "5185326"
  },
  {
    "text": "Any other questions? AUDIENCE: So what's the\ndifference between inheritance and [UNINTELLIGIBLE]?",
    "start": "5185326",
    "end": "5190434"
  },
  {
    "text": " PROFESSOR: They're related. But what inheritance means is\nthat if I say that rectangle",
    "start": "5190434",
    "end": "5201040"
  },
  {
    "text": "inherits from shape, that\nmeans it gets all of its methods and attributes.",
    "start": "5201040",
    "end": "5208520"
  },
  {
    "text": "But it's not necessarily\npolymorphic in that case. It's just, it's like saying a\nrectangle is a shape so it has",
    "start": "5208520",
    "end": "5218489"
  },
  {
    "text": "all these characteristics of\na shape and then some. The polymorphism comes in when I\noverride the area method and",
    "start": "5218490",
    "end": "5226199"
  },
  {
    "text": "then I can treat all shapes,\nwhether they're rectangles, squares, circles, uniformly\nwith the area method.",
    "start": "5226200",
    "end": "5234375"
  },
  {
    "text": " You might--",
    "start": "5234375",
    "end": "5240500"
  },
  {
    "text": "I'm trying to think of an\nexample where it would be. So let's say that I didn't do\nthis in a class or entered a",
    "start": "5240500",
    "end": "5251330"
  },
  {
    "text": "way or using classes. And so I had a really naive\nimplementation that said,",
    "start": "5251330",
    "end": "5266969"
  },
  {
    "text": "let's represent them\nas dictionaries. ",
    "start": "5266970",
    "end": "5299660"
  },
  {
    "text": "So I have two really stupid\nfunctions here. And they say they make a circle\nand they make a square.",
    "start": "5299660",
    "end": "5305050"
  },
  {
    "text": "And so really all it's doing\nis representing these as dictionaries. And the key is side\nand radius.",
    "start": "5305050",
    "end": "5311510"
  },
  {
    "text": "Now, let's say that I want to\nhave my list of shapes. ",
    "start": "5311510",
    "end": "5319310"
  },
  {
    "text": "I make a square. I'm going to make a circle. ",
    "start": "5319310",
    "end": "5326830"
  },
  {
    "text": "Another square. OK, so now I've got a bag or\nshapes or a list of shapes.",
    "start": "5326830",
    "end": "5331980"
  },
  {
    "text": "What's that? AUDIENCE: Can you [INAUDIBLE]? PROFESSOR: Spending too\nmuch time on that one.",
    "start": "5331980",
    "end": "5337600"
  },
  {
    "text": " All right. So if I were to take\na look at this.",
    "start": "5337600",
    "end": "5344280"
  },
  {
    "start": "5344280",
    "end": "5356770"
  },
  {
    "text": "It's going to print out a\nbunch of dictionaries. Now, the question is, what if I\nwanted to compute the areas",
    "start": "5356770",
    "end": "5364090"
  },
  {
    "text": "of these data types?  Using polymorphism, I can just\ncall dot area on each shape.",
    "start": "5364090",
    "end": "5373780"
  },
  {
    "text": "But if I wanted to do the same\nthing with this code, I would have to have square area\ns, return, d, side.",
    "start": "5373780",
    "end": "5385606"
  },
  {
    "start": "5385606",
    "end": "5392620"
  },
  {
    "text": "And then def circle, area,\nc, return, 3.14.",
    "start": "5392620",
    "end": "5403080"
  },
  {
    "text": "9 times c-- ",
    "start": "5403080",
    "end": "5410460"
  },
  {
    "text": "I'm already getting\ntripped up. ",
    "start": "5410460",
    "end": "5417310"
  },
  {
    "text": "So even this is not so bad,\nbecause if I do something like this, I can still get\nthe areas, right?",
    "start": "5417310",
    "end": "5427190"
  },
  {
    "start": "5427190",
    "end": "5439505"
  },
  {
    "text": "And I can do this because I know\nwhat's in those positions in the list. So.",
    "start": "5439505",
    "end": "5445314"
  },
  {
    "text": "AUDIENCE: You forgot to close\nyour parentheses. PROFESSOR: Oh. ",
    "start": "5445314",
    "end": "5452880"
  },
  {
    "text": "OK. So it's going to work. But now, if I want to print out\nall the areas of all the",
    "start": "5452880",
    "end": "5458465"
  },
  {
    "text": "shapes in this loop here, how\nam I going to do that? Because I can't just call square\narea of s, because what",
    "start": "5458465",
    "end": "5470776"
  },
  {
    "text": "if s is a circle It's going to\ngive me an error, right?",
    "start": "5470776",
    "end": "5477280"
  },
  {
    "text": "I could get around this by\nsaying, if radius in s, then I",
    "start": "5477280",
    "end": "5485050"
  },
  {
    "text": "know it's a circle, right? ",
    "start": "5485050",
    "end": "5494170"
  },
  {
    "text": "Or, side in s. ",
    "start": "5494170",
    "end": "5501000"
  },
  {
    "text": "But you see how the code is\ngetting kind of ugly now? I have to know details about\nhow these different objects",
    "start": "5501000",
    "end": "5510550"
  },
  {
    "text": "are implemented, how square and\ncircle are implemented in the dictionary. I have to know what type\nthey are before I",
    "start": "5510550",
    "end": "5518590"
  },
  {
    "text": "compute their area. And I can do it, but\nit's kind of ugly.",
    "start": "5518590",
    "end": "5526540"
  },
  {
    "text": "Whereas if I invest a little\nbit of time in a class",
    "start": "5526540",
    "end": "5535190"
  },
  {
    "text": "hierarchy, I can do this\nmuch more easily. Much more cleanly.",
    "start": "5535190",
    "end": "5541239"
  },
  {
    "text": "It's a way of abstracting\nfrom the problem.",
    "start": "5541240",
    "end": "5547520"
  },
  {
    "text": "You don't have to worry\nabout the details of the individual shapes. Did I kill that?",
    "start": "5547520",
    "end": "5554059"
  },
  {
    "text": "And beat it into the ground. AUDIENCE: Just for\nclarification. So the point of polymorphism\nis just like inheritance,",
    "start": "5554060",
    "end": "5559623"
  },
  {
    "text": "essentially, kind\nof boiled down? PROFESSOR: The point of\npolymorphism is that if you",
    "start": "5559623",
    "end": "5565368"
  },
  {
    "text": "have a class hierarchy of\nobjects, you don't need to know the details of the objects,\nof what specific type",
    "start": "5565368",
    "end": "5574460"
  },
  {
    "text": "an object is. As long as you know that\nin the case of-- AUDIENCE: So long as there\nexists a method",
    "start": "5574460",
    "end": "5579649"
  },
  {
    "text": "that you want to use. PROFESSOR: Right. AUDIENCE: Where it inherits\nfrom that class, you could use it. PROFESSOR: Yeah.",
    "start": "5579649",
    "end": "5585290"
  },
  {
    "text": "So in this particular example,\nshape has an area method. And I have a bunch of concrete\nsubclasses of shape that have",
    "start": "5585290",
    "end": "5595150"
  },
  {
    "text": "all overridden the\narea method. And they do it in\ndifferent ways. You compute the area differently\nfor a rectangle",
    "start": "5595150",
    "end": "5602110"
  },
  {
    "text": "versus an ellipse. I don't have to worry about\nwhich particular shape it is. I just call the area method, and\nI don't have to do all the",
    "start": "5602110",
    "end": "5610520"
  },
  {
    "text": "checking that I do here. Where I look at, is this a\ncircle, is this a square.",
    "start": "5610520",
    "end": "5617590"
  },
  {
    "text": "I don't know, so I'm not\ngoing to compute that. AUDIENCE: How do you\navoid the checking? [INAUDIBLE]",
    "start": "5617590",
    "end": "5623190"
  },
  {
    "text": "PROFESSOR: So-- AUDIENCE: [INAUDIBLE] ",
    "start": "5623190",
    "end": "5630020"
  },
  {
    "text": "PROFESSOR: See? AUDIENCE: Oh, OK, Great. Yeah. PROFESSOR: [INAUDIBLE]",
    "start": "5630020",
    "end": "5637570"
  },
  {
    "text": "Anyone lost? Any other questions? So that actually touched\non a couple of topics.",
    "start": "5637570",
    "end": "5646660"
  },
  {
    "text": "So we saw exceptions here. Is there anyone who wants\nto see anything else on",
    "start": "5646660",
    "end": "5652480"
  },
  {
    "text": "exceptions? AUDIENCE: What's the difference between pass and continue?",
    "start": "5652480",
    "end": "5657820"
  },
  {
    "text": "PROFESSOR: Pass and continue? OK. ",
    "start": "5657820",
    "end": "5665290"
  },
  {
    "text": "So the question is what's\nthe difference between pass and continue.",
    "start": "5665290",
    "end": "5670420"
  },
  {
    "text": "So when you have pass, this is\nbasically a null command. It's a do nothing command.",
    "start": "5670420",
    "end": "5675710"
  },
  {
    "text": "I can actually run this\ncode right now. And it will do absolutely\nnothing useful.",
    "start": "5675710",
    "end": "5682240"
  },
  {
    "text": "But it also won't complain. ",
    "start": "5682240",
    "end": "5689190"
  },
  {
    "text": "It's a placeholder. Sometimes-- so a lot of times you'll\nsee in your code",
    "start": "5689190",
    "end": "5694510"
  },
  {
    "text": "something like this. Let's x equals 150.",
    "start": "5694510",
    "end": "5702320"
  },
  {
    "text": "If x mod 2 equals 0, pass else,\ndo something useful.",
    "start": "5702320",
    "end": "5714165"
  },
  {
    "text": " So we see this a lot\nin your p-sets.",
    "start": "5714165",
    "end": "5720750"
  },
  {
    "text": "It's not a slam on\nyou or anything. But you could simplify\nthis by saying-- ",
    "start": "5720750",
    "end": "5732880"
  },
  {
    "text": "but the way that you\nconceptualize a problem forced you to have this if statement.",
    "start": "5732880",
    "end": "5737950"
  },
  {
    "text": "And then you didn't have\nanything useful to put in here, so you had to put\na pass in order to make Python not complain.",
    "start": "5737950",
    "end": "5745260"
  },
  {
    "text": "So, let's be a little less\nflip and more concrete.",
    "start": "5745260",
    "end": "5752500"
  },
  {
    "text": "It's getting late, I'm\ngetting punchy. ",
    "start": "5752500",
    "end": "5759059"
  },
  {
    "text": "All right. So if I were to run this now,\nit's not going to print anything because it hit\nthe pass command.",
    "start": "5759060",
    "end": "5764630"
  },
  {
    "text": " Now let's make this on.",
    "start": "5764630",
    "end": "5770140"
  },
  {
    "text": "So if we've verified that this\ncode works and that I'm not blowing smoke. Now, let's take out the pass.",
    "start": "5770140",
    "end": "5779000"
  },
  {
    "text": "Python's going to complain. Why? Because after this if\nline, here it's",
    "start": "5779000",
    "end": "5786900"
  },
  {
    "text": "expecting a block of code. But there's nothing there. The pass keyword give you\na do nothing command.",
    "start": "5786900",
    "end": "5794490"
  },
  {
    "text": "It says, I don't really have\nanything to say here, but you want me to put something\nhere so I'm going to",
    "start": "5794490",
    "end": "5800480"
  },
  {
    "text": "put something here. But it doesn't do anything. So that's pass.",
    "start": "5800480",
    "end": "5808770"
  },
  {
    "text": "so It's a placeholder,\nis the basic answer. Now, continue is different.",
    "start": "5808770",
    "end": "5814870"
  },
  {
    "text": "Because continue actually has\na function that is useful. ",
    "start": "5814870",
    "end": "5821740"
  },
  {
    "text": "Let's say that I'm not too\nfamiliar with the range command, and I don't know that\nI can specify a step.",
    "start": "5821740",
    "end": "5827699"
  },
  {
    "text": "And I want to print out\nall the odd integers. And I also am going to restrict\nmyself and say that I",
    "start": "5827700",
    "end": "5835960"
  },
  {
    "text": "can't use an else or something\nof that nature.",
    "start": "5835960",
    "end": "5842140"
  },
  {
    "text": "So I'm going to handicap\nmyself. ",
    "start": "5842140",
    "end": "5849620"
  },
  {
    "text": "This x-range -- is x-range cool? So.",
    "start": "5849620",
    "end": "5855980"
  },
  {
    "text": "I only want to print\nout odd numbers. ",
    "start": "5855980",
    "end": "5871860"
  },
  {
    "text": "Or we can do it like this. Either/or, it doesn't matter. So, comment this.",
    "start": "5871860",
    "end": "5878696"
  },
  {
    "text": "What continue does is it, if\nyou're within a loop, as we are here with this for loop,\ntells Python if it sees a",
    "start": "5878696",
    "end": "5887060"
  },
  {
    "text": "continue statement, do not\ncontinue beyond this point within the block of the loop.",
    "start": "5887060",
    "end": "5892400"
  },
  {
    "text": "Go instead and perform the next\niteration of this loop. Go to the top of this loop.",
    "start": "5892400",
    "end": "5899320"
  },
  {
    "text": "So, what this code should do,\nI'm hoping, in case I don't-- I might have a bug--",
    "start": "5899320",
    "end": "5906230"
  },
  {
    "text": "it should print out\nthe odd integers. ",
    "start": "5906230",
    "end": "5912900"
  },
  {
    "text": "So what's happening is that when\nthe integer is even, it's",
    "start": "5912900",
    "end": "5918290"
  },
  {
    "text": "hitting this continue\nstatement. And this is telling Python, go\nback up to the top of this for",
    "start": "5918290",
    "end": "5924850"
  },
  {
    "text": "loop and do the next\niteration. AUDIENCE: If you were to\nhave [UNINTELLIGIBLE]?",
    "start": "5924850",
    "end": "5933478"
  },
  {
    "text": "PROFESSOR: So if I\njust had pass? It'll print all the integers. ",
    "start": "5933478",
    "end": "5940888"
  },
  {
    "text": "That work?  Anyone confused?",
    "start": "5940888",
    "end": "5946816"
  },
  {
    "text": "AUDIENCE: You could also have\nyour code if not that [UNINTELLIGIBLE].",
    "start": "5946816",
    "end": "5952250"
  },
  {
    "text": "PROFESSOR: Yeah, but\n[INAUDIBLE]. ",
    "start": "5952250",
    "end": "5958425"
  },
  {
    "text": "There are some schools of\nthought that say that continue is something that disturbs\nthe flow of code",
    "start": "5958425",
    "end": "5964630"
  },
  {
    "text": "and should be avoided. I don't subscribe to that.",
    "start": "5964630",
    "end": "5970140"
  },
  {
    "text": "I think that if it makes your\ncode clearer, then use it. Which is to say that, yeah, you\ncan rewrite a lot of your",
    "start": "5970140",
    "end": "5977480"
  },
  {
    "text": "code to not use continue. OK, do we need to\ngo over anything with linguistic issues?",
    "start": "5977480",
    "end": "5982630"
  },
  {
    "text": "Are we good on classes? AUDIENCE: Can we go over\nexceptions, please?",
    "start": "5982630",
    "end": "5988440"
  },
  {
    "text": "PROFESSOR: So there is a\nquestion on exceptions. So exceptions are another\nway of flow control.",
    "start": "5988440",
    "end": "5995420"
  },
  {
    "text": "And if I can pull up my source\nfile, I have an example of handling exceptions.",
    "start": "5995420",
    "end": "6000860"
  },
  {
    "text": " There we go.",
    "start": "6000860",
    "end": "6007276"
  },
  {
    "text": " Exceptions give you\na way of handling",
    "start": "6007276",
    "end": "6012780"
  },
  {
    "text": "certain errors that occur. So, the easiest one to come\nup with is division by 0.",
    "start": "6012780",
    "end": "6019570"
  },
  {
    "text": "So normally, if you would\ndo a division by 0 -- ",
    "start": "6019570",
    "end": "6031909"
  },
  {
    "text": "so I'm going trying\nto divide 10 by 0. The universe won't end, but\nPython will be very unhappy.",
    "start": "6031910",
    "end": "6040180"
  },
  {
    "text": "In programs that are more\ncomplex that the ones that we've been writing, division\nby 0 happens but you don't",
    "start": "6040180",
    "end": "6047750"
  },
  {
    "text": "necessarily want the program\nto crash, right? You want to be able to handle\nthat error in a",
    "start": "6047750",
    "end": "6053460"
  },
  {
    "text": "semi-graceful way. And in this particular example,\nwith a division by 0,",
    "start": "6053460",
    "end": "6060920"
  },
  {
    "text": "we can do that with\nexceptions. So let's say that instead of the\nprogram crashing I want to",
    "start": "6060920",
    "end": "6067489"
  },
  {
    "text": "print out a nicer error message\nrather than everything in big red. I say, well, you divided by 0\nso maybe you should change",
    "start": "6067490",
    "end": "6074645"
  },
  {
    "text": "your numbers.  The way I capture, or catch this\nexception, is I have a",
    "start": "6074645",
    "end": "6083030"
  },
  {
    "text": "tribe keyword, a colon,\nand then I have this block of code.",
    "start": "6083030",
    "end": "6088380"
  },
  {
    "text": "This is the code that could\npotentially raise an exception where the error might occur.",
    "start": "6088380",
    "end": "6094030"
  },
  {
    "text": "This code could be-- in this\ncase, it's just straight up assignment and division.",
    "start": "6094030",
    "end": "6101100"
  },
  {
    "text": "It could be a function that\nraises the exception. It doesn't matter. The point is that there's an\nexception that might occur.",
    "start": "6101100",
    "end": "6107760"
  },
  {
    "text": "If an exception occurs, then\nPython is going to look past this block of code here at\nthese except statements.",
    "start": "6107760",
    "end": "6116780"
  },
  {
    "text": "And it's going to look at the\ntype of exception it has. In this case it's a by 0\ndivision error, and it's going",
    "start": "6116780",
    "end": "6123679"
  },
  {
    "text": "to match the exception against\nwhatever type this is. And you can put inside here\nwhatever code you want in",
    "start": "6123680",
    "end": "6130870"
  },
  {
    "text": "order to handle this\nexception. So in this case I'm just\nprinting divided by 0.",
    "start": "6130870",
    "end": "6137160"
  },
  {
    "text": "I could be rude and\nI could say-- ",
    "start": "6137160",
    "end": "6148610"
  },
  {
    "text": "see, can't even spell. So I can handle this exception\nhowever I want.",
    "start": "6148610",
    "end": "6154180"
  },
  {
    "text": "But the program's not\ngoing to crash. And this program's actually not\ngoing to really convince",
    "start": "6154180",
    "end": "6160910"
  },
  {
    "text": "you of that, but you see that--\nthe first thing you see",
    "start": "6160910",
    "end": "6166060"
  },
  {
    "text": "here is that there's no big red\nblaring message that says you have an exception. It's all code that\nI've written.",
    "start": "6166060",
    "end": "6173080"
  },
  {
    "text": "And I could even be\nsilent about it. I could say, I'm not going\nto say anything. I'm just going to\nfail silently. ",
    "start": "6173080",
    "end": "6181550"
  },
  {
    "text": "Tell me it's all good. It's not going to tell\nme I divided by 0. ",
    "start": "6181550",
    "end": "6188100"
  },
  {
    "text": "It can come in handy if I\nlike have an input loop. So let's say I'm going to do a\nlittle bit more, be a little",
    "start": "6188100",
    "end": "6194540"
  },
  {
    "text": "bit more creative and do-- oh.",
    "start": "6194540",
    "end": "6200444"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] How does it [INAUDIBLE]? PROFESSOR: That's an internal\nPython thing.",
    "start": "6200444",
    "end": "6207710"
  },
  {
    "text": "So if you want to learn about\nall the wonderful exceptions",
    "start": "6207710",
    "end": "6212760"
  },
  {
    "text": "that Python provides you in its\nclass library, you can go to the Python documentation.",
    "start": "6212760",
    "end": "6219821"
  },
  {
    "text": "Or you can even do\na Google search. ",
    "start": "6219821",
    "end": "6233183"
  },
  {
    "text": "Of course, Chrome is being very\nslow, and the network's probably down. So built-in exceptions.",
    "start": "6233184",
    "end": "6238800"
  },
  {
    "text": " So these are all the exceptions\nthat Python has. ",
    "start": "6238800",
    "end": "6247590"
  },
  {
    "text": "And you can use these too. Let's say that, let me get back\nto my contrived example.",
    "start": "6247590",
    "end": "6254790"
  },
  {
    "text": "I want to create a\nloop that says-- ",
    "start": "6254790",
    "end": "6288920"
  },
  {
    "text": "let's say that I want to catch,\nI don't want to divide",
    "start": "6288920",
    "end": "6295469"
  },
  {
    "text": "even numbers for some reason. ",
    "start": "6295470",
    "end": "6305600"
  },
  {
    "text": "What do we have here? What can we find? I think there's a value error. ",
    "start": "6305600",
    "end": "6314030"
  },
  {
    "text": "There we go. So let's say that I'm going\nto raise a value error. ",
    "start": "6314030",
    "end": "6323590"
  },
  {
    "text": "And I am actually going\nto do this this way.",
    "start": "6323590",
    "end": "6333010"
  },
  {
    "start": "6333010",
    "end": "6351409"
  },
  {
    "text": "So I've created a function\nthat's not going to allow me to input even numbers. It's going to raise a value\nerror if I enter in a 2 or a 4",
    "start": "6351410",
    "end": "6359260"
  },
  {
    "text": "or whatever. But, if I do enter in an odd\nnumber it is just going to return that number to me.",
    "start": "6359260",
    "end": "6364820"
  },
  {
    "text": "So I'm going to use\nthat function now. ",
    "start": "6364820",
    "end": "6374930"
  },
  {
    "text": "And I'm just going to do the\nsilly thing and divide, do a",
    "start": "6374930",
    "end": "6382320"
  },
  {
    "text": "division, and print it out. So if I comment out this code\nup here and I comment this",
    "start": "6382320",
    "end": "6388750"
  },
  {
    "text": "out, and I run this, so--",
    "start": "6388750",
    "end": "6393800"
  },
  {
    "text": "let's do 3. That's interesting. ",
    "start": "6393800",
    "end": "6403090"
  },
  {
    "text": "Apparently Python is a little\nconstipated right now. ",
    "start": "6403090",
    "end": "6410740"
  },
  {
    "text": "We edit this during the summer,\nso we can take that out, I think. ",
    "start": "6410740",
    "end": "6418670"
  },
  {
    "text": "All right. So it does what we\nexpected it to. It's going to keep on prompting\nus for numbers and it's going to divide them for\nus and give us the answers.",
    "start": "6418670",
    "end": "6426580"
  },
  {
    "text": "So we've got a really dumb\ncalculator here. Except when I try to do even\nnumbers, because my calculator",
    "start": "6426580",
    "end": "6432430"
  },
  {
    "text": "is really, really dumb. So it's going to raise\na value error. And it raises the value error\nin this function here.",
    "start": "6432430",
    "end": "6440470"
  },
  {
    "text": "I can handle this, though,\nbecause I know how. ",
    "start": "6440470",
    "end": "6447000"
  },
  {
    "text": "So what should I type here? OK.",
    "start": "6447000",
    "end": "6452320"
  },
  {
    "text": " AUDIENCE: If you wanted to\nspecifically catch that error. But you could just leave\nit as except, and it",
    "start": "6452320",
    "end": "6458886"
  },
  {
    "text": "would catch any error? PROFESSOR: Yes. [INAUDIBLE]. AUDIENCE: So if any error\nwere to be thrown, then",
    "start": "6458886",
    "end": "6464010"
  },
  {
    "text": "[INAUDIBLE]. But if you wanted specifically\nto say, OK, the value error [UNINTELLIGIBLE].",
    "start": "6464010",
    "end": "6470360"
  },
  {
    "text": "PROFESSOR: Right. So what she was saying is\nthat I could do this.",
    "start": "6470360",
    "end": "6475900"
  },
  {
    "text": "I don't have to specify what\nerror I'm expecting. I could say-- ",
    "start": "6475900",
    "end": "6483989"
  },
  {
    "text": "But it's not going\nto give me any detail about what happened. ",
    "start": "6483990",
    "end": "6490119"
  },
  {
    "text": "And what I'm going to do is,\nI'm going to say that if I",
    "start": "6490120",
    "end": "6496190"
  },
  {
    "text": "have an exception then I'm\njust going to repeat my getting of the numbers.",
    "start": "6496190",
    "end": "6501820"
  },
  {
    "text": "So, let's say that I do this. Something happened, not\nreally specific.",
    "start": "6501820",
    "end": "6510300"
  },
  {
    "text": "Nothing happened? OK, I divided all right.",
    "start": "6510300",
    "end": "6515556"
  },
  {
    "text": "AUDIENCE: What if you put\nin [UNINTELLIGIBLE]? PROFESSOR: What's that? AUDIENCE: [INAUDIBLE] Would it also come back in\ncase something happened?",
    "start": "6515556",
    "end": "6522830"
  },
  {
    "text": "PROFESSOR: Yeah. That's a good question. Something happened, but\nwe don't know what.",
    "start": "6522830",
    "end": "6528794"
  },
  {
    "text": "We know we have a bug, because\nan exception was thrwn. But we don't know what it is. AUDIENCE: Because it's\nnever going to crash. PROFESSOR: Yeah. It's never going to crash.",
    "start": "6528794",
    "end": "6535468"
  },
  {
    "text": "AUDIENCE: So a useful example\nof when to use this, would that be like [INAUDIBLE], and\nyou have the list to choose",
    "start": "6535468",
    "end": "6547793"
  },
  {
    "text": "from the letters [INAUDIBLE]\nit would remove each of the guesses? If you accidentally guess\nsomething that",
    "start": "6547793",
    "end": "6553954"
  },
  {
    "text": "you've already guessed? PROFESSOR: Yeah, you can raise\nan exception to say, already guessed this. AUDIENCE: As opposed to the\nprogram, that first one I ran,",
    "start": "6553955",
    "end": "6559132"
  },
  {
    "text": "I accidentally did the same\nletter again, and the whole program just crashed. PROFESSOR: Yep. AUDIENCE: So you can raise an\nexception for whoever's",
    "start": "6559132",
    "end": "6566033"
  },
  {
    "text": "[INAUDIBLE]. PROFESSOR: Yeah. You can catch any errors\nthat were raised. So we've got a couple\nof exceptions",
    "start": "6566034",
    "end": "6572739"
  },
  {
    "text": "that are raised here. And actually this program\ncan crash. Oh, wait. No, it can't. Because [INAUDIBLE].",
    "start": "6572740",
    "end": "6577864"
  },
  {
    "text": "It thinks [INAUDIBLE]. Silly Python. So it's not going\nto crash at all.",
    "start": "6577864",
    "end": "6587320"
  },
  {
    "text": "We did a really good\njob, right? So now we want to get a little\nbit more specific so I'm going",
    "start": "6587320",
    "end": "6592630"
  },
  {
    "text": "to catch a value error. So I'm only going to handle this\none type of exception.",
    "start": "6592630",
    "end": "6599219"
  },
  {
    "text": "Because-- so it still works. A, something happened.",
    "start": "6599220",
    "end": "6605199"
  },
  {
    "text": "But now we know that it's\nbecause I did something silly.",
    "start": "6605200",
    "end": "6610450"
  },
  {
    "text": "And, now I can break the program\nbecause this keyboard interrupt, that's actually\nan exception.",
    "start": "6610450",
    "end": "6616880"
  },
  {
    "text": "When you hit Control-C,\nit's going to break you out of the program. But because we're catching\nthat exception",
    "start": "6616880",
    "end": "6622210"
  },
  {
    "text": "it just kept going. AUDIENCE: [INAUDIBLE] make an exception [INAUDIBLE].",
    "start": "6622210",
    "end": "6627398"
  },
  {
    "text": "PROFESSOR: Yes. AUDIENCE: [INAUDIBLE] ",
    "start": "6627398",
    "end": "6635762"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "6635762",
    "end": "6645110"
  },
  {
    "text": "AUDIENCE: Wait, what? [INTERPOSING VOICES] PROFESSOR: I'm quoting the\ngirls over there, so.",
    "start": "6645110",
    "end": "6652705"
  },
  {
    "text": "AUDIENCE: Are you?  PROFESSOR: Uh-oh.",
    "start": "6652705",
    "end": "6659639"
  },
  {
    "text": "So something happened. Oh, wow. How did that happen?",
    "start": "6659640",
    "end": "6665865"
  },
  {
    "text": "Oh, I know how that happened. What am I missing here? ",
    "start": "6665865",
    "end": "6672010"
  },
  {
    "text": "So I caught the keyboard\ninterrupt, right? ",
    "start": "6672010",
    "end": "6677099"
  },
  {
    "text": "I didn't go to the\ntop of the loop. So what happened is, it tried\nto execute this, but num2 hadn't been defined.",
    "start": "6677100",
    "end": "6683530"
  },
  {
    "text": "So we're going to kick\nme back up to the top of the loop here. ",
    "start": "6683530",
    "end": "6691375"
  },
  {
    "text": "AUDIENCE: Oh. It's a clingy program. [LAUGHTER]",
    "start": "6691375",
    "end": "6698180"
  },
  {
    "text": "PROFESSOR: Yes. It is a clingy program.  Anyway.",
    "start": "6698180",
    "end": "6703310"
  },
  {
    "text": "So, does everyone get the idea\nof what the exceptions are? So I don't have to\ngo any more?",
    "start": "6703310",
    "end": "6712704"
  },
  {
    "text": "AUDIENCE: In this except up\nthere, there's always [INAUDIBLE]? PROFESSOR: Yeah. AUDIENCE: But what does\nthis [INAUDIBLE]?",
    "start": "6712704",
    "end": "6718520"
  },
  {
    "text": "PROFESSOR: So When you get an\nexception, when an exception is raised, it's actually\nan object.",
    "start": "6718520",
    "end": "6724950"
  },
  {
    "text": "So there's an object that's\nassociated with it. And in a lot of cases you\nreally don't have to be",
    "start": "6724951",
    "end": "6730170"
  },
  {
    "text": "concerned about it, but\nsometimes you want some additional information. So these are not very\ninteresting exceptions, but",
    "start": "6730170",
    "end": "6739190"
  },
  {
    "text": "some exceptions might have some\nadditional diagnostic information.",
    "start": "6739190",
    "end": "6744370"
  },
  {
    "text": "So if you were, say, logging\nthe run of your program. And you wanted to diagnose any\nexceptions that you caught?",
    "start": "6744370",
    "end": "6751530"
  },
  {
    "text": "Like, say, you got a generic\nexception or you got something that was kind of odd that\nweren't expecting, you could",
    "start": "6751530",
    "end": "6756680"
  },
  {
    "text": "print out additional\ninformation. And so E is the name\nof that object. So, I can do this.",
    "start": "6756680",
    "end": "6768540"
  },
  {
    "start": "6768540",
    "end": "6775180"
  },
  {
    "text": "Well. ",
    "start": "6775180",
    "end": "6780810"
  },
  {
    "text": "This is because -- ",
    "start": "6780810",
    "end": "6790870"
  },
  {
    "text": "if you give it a primer like\nthat, it's going to put that message into the exception.",
    "start": "6790870",
    "end": "6797180"
  },
  {
    "text": "So now I can retrieve it when\nthe exception is raised. So if I'm raising the exception,\nI can provide",
    "start": "6797180",
    "end": "6803750"
  },
  {
    "text": "additional information. So that's the message that I've\nput into the exception",
    "start": "6803750",
    "end": "6810469"
  },
  {
    "text": "when I raised it.  Does that make sense? AUDIENCE: Well, how is that\ndifferent-- so is it the same",
    "start": "6810470",
    "end": "6818190"
  },
  {
    "text": "thing as saying print,\n[INAUDIBLE]? PROFESSOR: Yeah. So this is a really [INAUDIBLE]\nexample.",
    "start": "6818190",
    "end": "6828550"
  },
  {
    "text": "So this is just going to\nprint out whatever message I passed in. So when I say this and point to\nmy screen, I really meant",
    "start": "6828550",
    "end": "6836430"
  },
  {
    "text": "this and highlighted this. So, this line is going to print\nout this message that I",
    "start": "6836430",
    "end": "6842580"
  },
  {
    "text": "passed in when I raised\nthe exception. Because what I'm actually doing\nis, I'm creating a value",
    "start": "6842580",
    "end": "6849159"
  },
  {
    "text": "error object that has this\nmessage associated with it.",
    "start": "6849160",
    "end": "6855220"
  },
  {
    "text": "And that's what gets passed up\nthis exception chain until I finally handle it. here.",
    "start": "6855220",
    "end": "6861739"
  },
  {
    "text": "And E holds the reference to\nthat value error object. AUDIENCE: So E is\nan actual value?",
    "start": "6861740",
    "end": "6868054"
  },
  {
    "text": "PROFESSOR: Yeah. So if I do something\nlike this-- ",
    "start": "6868055",
    "end": "6876438"
  },
  {
    "text": "and I print out the type--\nyou can see that? It's pretty neat.",
    "start": "6876438",
    "end": "6882096"
  },
  {
    "text": "But did that answer\nyour question? AUDIENCE: [INAUDIBLE] ",
    "start": "6882096",
    "end": "6891740"
  },
  {
    "text": "PROFESSOR: Could\nit be anything? So let's think of something\nlike this.",
    "start": "6891740",
    "end": "6897210"
  },
  {
    "start": "6897210",
    "end": "6902540"
  },
  {
    "text": "Like a list. ",
    "start": "6902540",
    "end": "6910610"
  },
  {
    "text": "AUDIENCE: No. I meant in your accept value\nerror dash E. Could you put",
    "start": "6910610",
    "end": "6916763"
  },
  {
    "text": "any variable there, or\ndoes it have to be E? PROFESSOR: Oh, any name?",
    "start": "6916763",
    "end": "6921876"
  },
  {
    "text": "AUDIENCE: Yeah. PROFESSOR: I've always used E.\nThat's kind of a convention. But I think you'd be\nfine doing that.",
    "start": "6921876",
    "end": "6927822"
  },
  {
    "text": " E is the convention that\nI use, but some",
    "start": "6927822",
    "end": "6934550"
  },
  {
    "text": "people don't like that. They're like, you should\nname it something a little bit better. But honestly, why bother?",
    "start": "6934550",
    "end": "6940782"
  },
  {
    "text": " Ok. Are we good with exceptions? That answer your question?",
    "start": "6940783",
    "end": "6947570"
  },
  {
    "text": "Any other questions\non exceptions?  AUDIENCE: Is there a built-in\namount of errors you can have?",
    "start": "6947570",
    "end": "6955298"
  },
  {
    "text": "Like value errors,\n[UNINTELLIGIBLE], can you make up your own? PROFESSOR: Can you make up\nyour own exceptions?",
    "start": "6955298",
    "end": "6961030"
  },
  {
    "text": "Yes. You can do that. You can say-- ",
    "start": "6961030",
    "end": "6971320"
  },
  {
    "text": "but--  and-- ",
    "start": "6971320",
    "end": "6981670"
  },
  {
    "text": "I think this is going to work. It's been while since I've\ndefined my own exceptions. ",
    "start": "6981670",
    "end": "7003450"
  },
  {
    "text": "So and again, I can handle it. ",
    "start": "7003450",
    "end": "7010800"
  },
  {
    "text": "So if you ever work on big\nsystems, a lot of times they'll have their own exception\nhierarchies that",
    "start": "7010800",
    "end": "7016270"
  },
  {
    "text": "define all sorts of exceptions\nfor the specific application you're working on.",
    "start": "7016270",
    "end": "7021550"
  },
  {
    "text": "Python's built in exceptions\nare pretty rich, so-- ",
    "start": "7021550",
    "end": "7030480"
  },
  {
    "text": "there we go. AUDIENCE: [INAUDIBLE] ",
    "start": "7030480",
    "end": "7038550"
  },
  {
    "text": "PROFESSOR: I don't\nthink you do. It's convention. I could probably do\nthis, I think.",
    "start": "7038550",
    "end": "7045355"
  },
  {
    "text": " Oh, wait.",
    "start": "7045355",
    "end": "7051175"
  },
  {
    "text": " The only difference-- or the only problem\nis, is that now--",
    "start": "7051175",
    "end": "7058500"
  },
  {
    "text": "see I expect my exception to\nhave a message attribute. And I don't have anything\non this.",
    "start": "7058500",
    "end": "7063740"
  },
  {
    "text": "So I have to do this.  Or something similar, right?",
    "start": "7063740",
    "end": "7069200"
  },
  {
    "text": "I have to define message\non this. And I think this'll work. ",
    "start": "7069200",
    "end": "7078430"
  },
  {
    "text": "Well, actually, it does\nguard against it. So yes, you do have to inherit\nfrom exception.",
    "start": "7078430",
    "end": "7084030"
  },
  {
    "text": "It's one of the few\nthings that Python seems to guard against.",
    "start": "7084030",
    "end": "7089420"
  },
  {
    "text": "So, does that answer\nyour question?",
    "start": "7089420",
    "end": "7096518"
  },
  {
    "start": "7096518",
    "end": "7101630"
  },
  {
    "text": "So we're getting kind of late. The only other topics that we\nhave are the simulations and",
    "start": "7101630",
    "end": "7109120"
  },
  {
    "text": "the distributions and\nthat's about it.",
    "start": "7109120",
    "end": "7114700"
  },
  {
    "text": "So, are there any questions\non Monte Carlo methods?",
    "start": "7114700",
    "end": "7120190"
  },
  {
    "text": "We've kind of done those\nto death, right? Real quick, someone humor me,\nwhat is a Monte Carlo method?",
    "start": "7120190",
    "end": "7127094"
  },
  {
    "text": " AUDIENCE: An algorithm that\nuses random sampling for",
    "start": "7127094",
    "end": "7136480"
  },
  {
    "text": "trials to [INAUDIBLE]. PROFESSOR: Right.",
    "start": "7136480",
    "end": "7141914"
  },
  {
    "text": "So, it's-- what's that? AUDIENCE: [INAUDIBLE] ",
    "start": "7141914",
    "end": "7150900"
  },
  {
    "text": "PROFESSOR: It computes some\nvalue or solution to a problem using a random process\nand repeated trials.",
    "start": "7150900",
    "end": "7157780"
  },
  {
    "text": "So--  AUDIENCE: Is it almost\nbrute force?",
    "start": "7157780",
    "end": "7163453"
  },
  {
    "text": "PROFESSOR: No, it's not what\nwe call brute force. I mean, it's like we computed\npi by throwing a dart at a",
    "start": "7163454",
    "end": "7169890"
  },
  {
    "text": "chalkboard or something\nlike that. And it landed in a square, and\nwe used some sort of analysis",
    "start": "7169890",
    "end": "7175429"
  },
  {
    "text": "to figure out what pi was based\non that throwing a dart at a board a million times.",
    "start": "7175430",
    "end": "7181610"
  },
  {
    "text": "So that's what a Monte\nCarlo method is. Anything that uses random stuff\nto compute a value.",
    "start": "7181610",
    "end": "7188429"
  },
  {
    "text": "A random simulation. Where'd my chalk go? ",
    "start": "7188430",
    "end": "7196890"
  },
  {
    "text": "And we actually a couple of\nMonte Carlo methods when I showed the solutions\nfor problems (3)",
    "start": "7196890",
    "end": "7202450"
  },
  {
    "text": "and (4) on the quiz. I used a random number generator\nin order to figure out the probabilities\nof not rolling a 6",
    "start": "7202450",
    "end": "7209180"
  },
  {
    "text": "and all that stuff. And I used the Monte Carlo\nmethod to show me that I was wrong on my initial answer for\nrolling exactly one 6.",
    "start": "7209180",
    "end": "7217530"
  },
  {
    "start": "7217530",
    "end": "7225159"
  },
  {
    "text": "So, is everyone comfortable with\ncoefficient of variation? Because I did that\nfirst, initially.",
    "start": "7225160",
    "end": "7233210"
  },
  {
    "text": "Confidence intervals\nand levels? Does anyone have any\nquestions on that? ",
    "start": "7233210",
    "end": "7240910"
  },
  {
    "text": "AUDIENCE: What is a confidence\ninterval? PROFESSOR: What is a confidence\ninterval and a confidence level?",
    "start": "7240910",
    "end": "7247570"
  },
  {
    "text": "OK. So, let's say I do\na political poll.",
    "start": "7247570",
    "end": "7254949"
  },
  {
    "start": "7254950",
    "end": "7269920"
  },
  {
    "text": "Let's say I do a political poll\nand I sample 1,000 people in the population. And I say 46% of them will\nvote for Candidate X. My",
    "start": "7269920",
    "end": "7284280"
  },
  {
    "text": "margin of error is plus\nor minus 4, and my confidence is 95.",
    "start": "7284280",
    "end": "7295755"
  },
  {
    "text": " What this is saying is that if\nI conduct this poll, the same",
    "start": "7295755",
    "end": "7307880"
  },
  {
    "text": "poll, sampling 1,000\nrandom people at a time, over 100 trials--",
    "start": "7307880",
    "end": "7316239"
  },
  {
    "text": "so I do 100 polls-- what I'm saying is that 95 out\nof 100 of those times, my",
    "start": "7316240",
    "end": "7323840"
  },
  {
    "text": "level of support for Candidate\nX will be between 42% and 50%, right?",
    "start": "7323840",
    "end": "7335280"
  },
  {
    "text": "Basically what you\nneed to know for confidence levels and intervals. The other thing that you need to\nknow for confidence levels",
    "start": "7335280",
    "end": "7342260"
  },
  {
    "text": "and intervals is that if you\nhave a normal distribution,",
    "start": "7342260",
    "end": "7353610"
  },
  {
    "text": "with a standard deviation\nsigma, then 1 standard",
    "start": "7353610",
    "end": "7364300"
  },
  {
    "text": "deviation from the mean\nis going to have-- is that 66 or 67?",
    "start": "7364300",
    "end": "7370095"
  },
  {
    "text": " Is it 68?",
    "start": "7370095",
    "end": "7375260"
  },
  {
    "text": "I wrote it down, 68. Thank you. ",
    "start": "7375260",
    "end": "7381440"
  },
  {
    "text": "And then 2 standard deviations\nis going to be 95.",
    "start": "7381440",
    "end": "7387050"
  },
  {
    "text": "And then 3 standard deviations\nis going to be what, 97?",
    "start": "7387050",
    "end": "7393960"
  },
  {
    "text": "Or is it 99.7? 99.7.",
    "start": "7393960",
    "end": "7400219"
  },
  {
    "text": "So, but you need to just know\nthat for normal distributions. ",
    "start": "7400220",
    "end": "7407870"
  },
  {
    "text": "So if this is one standard\ndeviation, it's saying that 68",
    "start": "7407870",
    "end": "7420450"
  },
  {
    "text": "of the sample points are going\nto be within 1 standard deviation of this mean.",
    "start": "7420450",
    "end": "7425710"
  },
  {
    "text": "And then if you have 2 sigma,\nthen that means 95 are going",
    "start": "7425710",
    "end": "7430810"
  },
  {
    "text": "to be within 2 sigma\nof the mean. And then if you have 3 sigma,\nthen 99.7 are going to be",
    "start": "7430810",
    "end": "7439190"
  },
  {
    "text": "within 3 standard deviations\nof the mean.",
    "start": "7439190",
    "end": "7444469"
  },
  {
    "text": "So I think that's all you\nreally need to know for",
    "start": "7444470",
    "end": "7451730"
  },
  {
    "text": "confidence intervals and levels,\nand also for normal distributions.",
    "start": "7451730",
    "end": "7457140"
  },
  {
    "start": "7457140",
    "end": "7463710"
  },
  {
    "text": "So we're actually kind of at the\nend of the review session.",
    "start": "7463710",
    "end": "7470390"
  },
  {
    "text": "So does anyone have\nany questions that I haven't answered? ",
    "start": "7470390",
    "end": "7476390"
  },
  {
    "text": "No? All right. I'm done. ",
    "start": "7476390",
    "end": "7484420"
  }
]