[
  {
    "text": " [MUSIC-- \"JESU, JOY OF\nMAN'S DESIRING\" BY",
    "start": "0",
    "end": "5285"
  },
  {
    "text": "JOHANN SEBASTIAN BACH] ",
    "start": "5285",
    "end": "18910"
  },
  {
    "text": "PROFESSOR: Well, there's one bit\nof mystery left, which I'd like to get rid of right now.",
    "start": "18910",
    "end": "24439"
  },
  {
    "text": "And that's that we've been\nblithely doing things like cons assuming there's\nalways another one.",
    "start": "24440",
    "end": "33660"
  },
  {
    "text": "That we've been doing these\nthings like car-ing and cdr-ing and assuming that\nwe had some idea",
    "start": "33660",
    "end": "38750"
  },
  {
    "text": "how this can be done. Now indeed we said that that's\nequivalent to having",
    "start": "38750",
    "end": "43800"
  },
  {
    "text": "procedures. But that doesn't really solve\nthe problem, because the procedure need all sorts of\ncomplicated mechanisms like",
    "start": "43800",
    "end": "50470"
  },
  {
    "text": "environment structures and\nthings like that to work. And those were ultimately made\nout of conses in the model",
    "start": "50470",
    "end": "55769"
  },
  {
    "text": "that we had, so that really\ndoesn't solve the problem. Now the problem here is\nthe glue the data",
    "start": "55770",
    "end": "62860"
  },
  {
    "text": "structure's made out of. What kind of possible\nthing could it be? We've been showing you things\nlike a machine, a computer",
    "start": "62860",
    "end": "71060"
  },
  {
    "text": "that has a controller, and some registers, and maybe a stack.",
    "start": "71060",
    "end": "76979"
  },
  {
    "text": "And we haven't said anything\nabout, for example, larger memory. And I think that's what we have\nto worry about right now.",
    "start": "76980",
    "end": "83740"
  },
  {
    "text": "But just to make it perfectly\nclear that this is an inessential, purely\nimplementational thing, I'd",
    "start": "83740",
    "end": "91320"
  },
  {
    "text": "like to show you, for example,\nhow you can do it all with the numbers. That's an easy one.",
    "start": "91320",
    "end": "97590"
  },
  {
    "text": "Famous fellow by the name of\nGodel, a logician at the end",
    "start": "97590",
    "end": "105020"
  },
  {
    "text": "of the 1930s, invented a very\nclever way of encoding the",
    "start": "105020",
    "end": "111049"
  },
  {
    "text": "complicated expressions\nas numbers. For example-- I'm not saying exactly what\nGodel's scheme is, because he",
    "start": "111050",
    "end": "118250"
  },
  {
    "text": "didn't use words like cons. He had other kinds of ways of\ncombining to make expressions. But he said, I'm going to\nassign a number to every",
    "start": "118250",
    "end": "125859"
  },
  {
    "text": "algebraic expression. And the way I'm going to\nmanufacture these numbers is by combining the numbers\nof the parts.",
    "start": "125860",
    "end": "132470"
  },
  {
    "text": "So for example, what we were\ndoing our world, we could say that if objects are represented\nby numbers, then",
    "start": "132470",
    "end": "154130"
  },
  {
    "text": "cons of x and y could be\nrepresented by 2 to the x",
    "start": "154130",
    "end": "162660"
  },
  {
    "text": "times 2 to the y. Because then we could\nextract the parts.",
    "start": "162660",
    "end": "169560"
  },
  {
    "text": "We could say, for example, that\nthen car of, say, x is",
    "start": "169560",
    "end": "177500"
  },
  {
    "text": "the number of factors\nof 2 in x.",
    "start": "177500",
    "end": "186690"
  },
  {
    "text": "And of course cdr is\nthe same thing. It's the number of factors\nof 3 in x.",
    "start": "186690",
    "end": "196510"
  },
  {
    "text": "Now this is a perfectly\nreasonable scheme, except for the fact that the numbers\nrapidly get to be much larger",
    "start": "196510",
    "end": "202870"
  },
  {
    "text": "in number of digits\nthan the number of protons in the universe.",
    "start": "202870",
    "end": "207950"
  },
  {
    "text": "So there's no easy way to use\nthis scheme other than the theoretical one.",
    "start": "207950",
    "end": "213430"
  },
  {
    "text": "On the other hand, there are\nother ways of representing these things.",
    "start": "213430",
    "end": "218450"
  },
  {
    "text": "We have been thinking in\nterms of little boxes.",
    "start": "218450",
    "end": "224010"
  },
  {
    "text": "We've been thinking about our\ncons structures as looking sort of like this.",
    "start": "224010",
    "end": "230280"
  },
  {
    "text": "They're little pigeon holes\nwith things in them. And of course we arrange\nthem in little trees.",
    "start": "230280",
    "end": "237210"
  },
  {
    "text": "I wish that the semiconductor\nmanufacturers would supply me with something appropriate for\nthis, but actually what they",
    "start": "237210",
    "end": "244280"
  },
  {
    "text": "do supply me with is\na linear memory.",
    "start": "244280",
    "end": "249380"
  },
  {
    "text": "Memory is sort of a big\npile of pigeonholes,",
    "start": "249380",
    "end": "255170"
  },
  {
    "text": "pigeonholes like this. Each of which can hold a certain\nsized object, a fixed",
    "start": "255170",
    "end": "261470"
  },
  {
    "text": "size object. So, for example, a complicated\nlist with 25 elements won't fit in one of these.",
    "start": "261470",
    "end": "268550"
  },
  {
    "text": "However, each of these is\nindexed by an address. ",
    "start": "268550",
    "end": "273970"
  },
  {
    "text": "So the address might be zero\nhere, one here, two here, three here, and so on. That we write these down as\nnumbers is unimportant.",
    "start": "273970",
    "end": "280400"
  },
  {
    "text": "What matters is that they're\ndistinct as a way to get to the next one. And inside of each of these,\nwe can stuff something into",
    "start": "280400",
    "end": "288300"
  },
  {
    "text": "these pigeonholes. That's what memory is like, for\nthose of you who haven't built a computer.",
    "start": "288300",
    "end": "293550"
  },
  {
    "text": " Now the problem is how are we\ngoing to impose on this type",
    "start": "293550",
    "end": "299280"
  },
  {
    "text": "of structure, this nice\ntree structure. Well it's not very hard, and\nthere have been numerous",
    "start": "299280",
    "end": "305480"
  },
  {
    "text": "schemes involved in this. The most important one is to\nsay, well assuming that the semiconductor manufacturer\nallows me to arrange my memory",
    "start": "305480",
    "end": "313919"
  },
  {
    "text": "so that one of these pigeonholes\nis big enough to hold the address of another\nI haven't made.",
    "start": "313920",
    "end": "321706"
  },
  {
    "text": "Now it actually has to be a\nlittle bit bigger because I have to also install or store\nsome information as to a tag",
    "start": "321706",
    "end": "328215"
  },
  {
    "text": "which describes the kind\nof thing that's there. And we'll see that\nin a second. And of course if the\nsemiconductor manufacturer",
    "start": "328215",
    "end": "334560"
  },
  {
    "text": "doesn't arrange it so I can do\nthat, then of course I can, with some cleverness, arrange\ncombinations of these to fit",
    "start": "334560",
    "end": "340910"
  },
  {
    "text": "together in that way. So we're going to have to\nimagine imposing this",
    "start": "340910",
    "end": "348509"
  },
  {
    "text": "complicated tree structure on\nour nice linear memory. If we look at the first still\nstore, we see a classic scheme",
    "start": "348510",
    "end": "357539"
  },
  {
    "text": "for doing that. It's a standard way of\nrepresenting Lisp structures",
    "start": "357540",
    "end": "363910"
  },
  {
    "text": "in a linear memory. What we do is we divide this\nmemory into two parts.",
    "start": "363910",
    "end": "372030"
  },
  {
    "text": "An array called the cars, and\nan array called the cdrs.",
    "start": "372030",
    "end": "377580"
  },
  {
    "text": "Now whether those happen to\nbe sequential addresses or whatever, it's not important. That's somebody's implementation\ndetails.",
    "start": "377580",
    "end": "385800"
  },
  {
    "text": "But there are two arrays here. Linear arrays indexed by\nsequential indices like this.",
    "start": "385800",
    "end": "394840"
  },
  {
    "text": "What is stored in each of these pigeonholes is a typed object.",
    "start": "394840",
    "end": "401430"
  },
  {
    "text": "And what we have here are types\nwhich begin with letters like p, standing for a pair.",
    "start": "401430",
    "end": "407790"
  },
  {
    "text": "Or n, standing for a number. Or e, standing for an empty\nlist. The end of the list. And",
    "start": "407790",
    "end": "417290"
  },
  {
    "text": "so if we wish to represent an\nobject like this, the list beginning with 1, 2 and then\nhaving a 3 and a 4 as its",
    "start": "417290",
    "end": "424310"
  },
  {
    "text": "second and third elements. A list containing a list as its\nfirst part and then two",
    "start": "424310",
    "end": "430220"
  },
  {
    "text": "numbers as a second\nand third parts. Then of course we draw it sort\nof like this these days, in",
    "start": "430220",
    "end": "435250"
  },
  {
    "text": "box-and-pointer notation. And you see, these are the three\ncells that have as their",
    "start": "435250",
    "end": "441190"
  },
  {
    "text": "car pointer the object which\nis either 1, 2 or 3 or 4.",
    "start": "441190",
    "end": "448390"
  },
  {
    "text": "And then of course the 1, 2,\nthe car of this entire structure, is itself a\nsubstructure which contains a",
    "start": "448390",
    "end": "453870"
  },
  {
    "text": "sublist like that. What I'm about to do is put\ndown places which are--",
    "start": "453870",
    "end": "459970"
  },
  {
    "text": "I'm going to assign indices. Like this 1, over here,\nrepresents the",
    "start": "459970",
    "end": "465530"
  },
  {
    "text": "index of this cell.  But that pointer that we see\nhere is a reference to the",
    "start": "465530",
    "end": "475540"
  },
  {
    "text": "pair of pigeonholes in the cars\nand the cdrs that are labeled by 1 in my linear\nmemory down here.",
    "start": "475540",
    "end": "482000"
  },
  {
    "text": "So if I wish to impose this\nstructure on my linear memory, what I do is I say, oh yes,\nwhy don't we drop",
    "start": "482000",
    "end": "488780"
  },
  {
    "text": "this into cell 1? I pick one. There's 1.",
    "start": "488780",
    "end": "494270"
  },
  {
    "text": "And that says that its\ncar, I'm going to assign it to be a pair. It's a pair, which\nis in index 5.",
    "start": "494270",
    "end": "502590"
  },
  {
    "text": "And the cdr, which is this one\nover here, is a pair which I'm going to stick into place 2.",
    "start": "502590",
    "end": "508340"
  },
  {
    "text": "p2. And take a look at p2. Oh yes, well p2 is a thing whose\ncar is the number 3, so",
    "start": "508340",
    "end": "517550"
  },
  {
    "text": "as you see, an n3. And whose cdr, over here, is a\npair, which lives in place 4.",
    "start": "517550",
    "end": "526640"
  },
  {
    "text": "So that's what this p4 is. p4 is a number whose value is 4\nin its car and whose cdr is",
    "start": "526640",
    "end": "536200"
  },
  {
    "text": "an empty list right there. And that ends it. So this is the traditional way\nof representing this kind of",
    "start": "536200",
    "end": "545750"
  },
  {
    "text": "binary tree in a\nlinear memory.",
    "start": "545750",
    "end": "551620"
  },
  {
    "text": "Now the next question, of\ncourse, that we might want to worry about is just a little\nbit of implementation.",
    "start": "551620",
    "end": "558440"
  },
  {
    "text": "That means that when I write\nprocedures of the form assigned a, [UNINTELLIGIBLE]\nprocedures--",
    "start": "558440",
    "end": "564600"
  },
  {
    "text": "lines of register machine code\nof the form assigned a, the car of [UNINTELLIGIBLE]",
    "start": "564600",
    "end": "570140"
  },
  {
    "text": "b, what I really mean is\naddressing these elements.",
    "start": "570140",
    "end": "578740"
  },
  {
    "text": "And so we're going to think of\nthat as a abbreviation for it.",
    "start": "578740",
    "end": "584470"
  },
  {
    "text": "Now of course in order to write\nthat down I'm going to introduce some sort of a\nstructure called a vector. ",
    "start": "584470",
    "end": "592120"
  },
  {
    "text": "And we're going to have\nsomething which will reference a vector, just so we\ncan write it down.",
    "start": "592120",
    "end": "598709"
  },
  {
    "text": "Which takes the name of\nthe vector, or the-- I don't think that name\nis the right word.",
    "start": "598710",
    "end": "603970"
  },
  {
    "text": "Which takes the vector and the\nindex, and I have to have a",
    "start": "603970",
    "end": "612009"
  },
  {
    "text": "way of setting one of those with\nsomething called a vector set, I don't really care. But let's look, for example,\nat then that kind of",
    "start": "612010",
    "end": "619520"
  },
  {
    "text": "implementation of car and cdr.",
    "start": "619520",
    "end": "626470"
  },
  {
    "text": "So for example if I happen to\nhave a register b, which contains the type index of a\npair, and therefore it is the",
    "start": "626470",
    "end": "637579"
  },
  {
    "text": "pointer to a pair, then I could\ntake the car of that and if I-- write this down--",
    "start": "637580",
    "end": "642760"
  },
  {
    "text": "I might put that\nin register a. What that really is is a\nrepresentation of the assign",
    "start": "642760",
    "end": "649399"
  },
  {
    "text": "to a, the value of\nvector reffing-- or array indexing,\nif you will-- or",
    "start": "649400",
    "end": "654700"
  },
  {
    "text": "something, the cars object-- whatever that is--",
    "start": "654700",
    "end": "659990"
  },
  {
    "text": "with the index, b. And similarly for cdr. And we\ncan do the same thing for",
    "start": "659990",
    "end": "666330"
  },
  {
    "text": "assignment to data structures,\nif we need to do that sort of thing at all.",
    "start": "666330",
    "end": "671839"
  },
  {
    "text": "It's not too hard\nto build that. Well now the next question\nis how are we going to do allocation.",
    "start": "671840",
    "end": "678010"
  },
  {
    "text": "And every so often I\nsay I want a cons. Now conses don't\ngrow on trees.",
    "start": "678010",
    "end": "683790"
  },
  {
    "text": "Or maybe they should. But I have to have some way\nof getting the next one.",
    "start": "683790",
    "end": "689980"
  },
  {
    "text": "I have to have some idea of if\ntheir memory is unused that I might want to allocate from.",
    "start": "689980",
    "end": "695630"
  },
  {
    "text": "And there are many schemes\nfor doing this. And the particular thing\nI'm showing you right now is not essential.",
    "start": "695630",
    "end": "702100"
  },
  {
    "text": "However it's convenient and\nhas been done many times. One scheme's was called the free\nlist allocation scheme.",
    "start": "702100",
    "end": "707660"
  },
  {
    "text": "What that means is that all of\nthe free memory that there is in the world is linked together\nin a linked list,",
    "start": "707660",
    "end": "714700"
  },
  {
    "text": "just like all the other stuff. And whenever you need a free\ncell to make a new cons, you",
    "start": "714700",
    "end": "721230"
  },
  {
    "text": "grab the first, one make the\nfree list be the cdr of it, and then allocate that. And so what that looks like\nis something like this.",
    "start": "721230",
    "end": "729530"
  },
  {
    "text": "Here we have the free\nlist starting in 6.",
    "start": "729530",
    "end": "738510"
  },
  {
    "text": "And what that is is a\npointer-off to say 8.",
    "start": "738510",
    "end": "744860"
  },
  {
    "text": "So what it says is, this\none is free and the next one is an 8. This one is free and the next\none is in 3, the next one",
    "start": "744860",
    "end": "752880"
  },
  {
    "text": "that's free. That one's free and the\nnext one is in 0. That one's free and the\nnext one's in 15.",
    "start": "752880",
    "end": "760940"
  },
  {
    "text": "Something like that. We can imagine having\nsuch a structure.",
    "start": "760940",
    "end": "766400"
  },
  {
    "text": "Given that we have something\nlike that, then it's possible to just get one when\nyou need it.",
    "start": "766400",
    "end": "773940"
  },
  {
    "text": "And so a program for doing\ncons, this is what cons might turn into.",
    "start": "773940",
    "end": "779320"
  },
  {
    "text": "To assign to a register A the\nresult of cons-ing, a B onto",
    "start": "779320",
    "end": "785410"
  },
  {
    "text": "C, the value in this containing\nB and the value containing C, what we have\nto do is get the current",
    "start": "785410",
    "end": "791240"
  },
  {
    "text": "[? type ?] ahead of the\nfreelist, make the free list be its cdr. Then we have to\nchange the cars to be the",
    "start": "791240",
    "end": "799840"
  },
  {
    "text": "thing we're making up to be in A\nto be the B, the thing in B.",
    "start": "799840",
    "end": "805680"
  },
  {
    "text": "And we have to make change the\ncdrs of the thing that's in A",
    "start": "805680",
    "end": "810880"
  },
  {
    "text": "to be C. And then what we have\nin A is the right new frob,",
    "start": "810880",
    "end": "816020"
  },
  {
    "text": "whatever it is. The object that we want. Now there's a little bit of a\ncheat here that I haven't told",
    "start": "816020",
    "end": "823490"
  },
  {
    "text": "you about, which is somewhere\naround here I haven't set that I've the type of the thing that\nI'm cons-ing up to be a",
    "start": "823490",
    "end": "831540"
  },
  {
    "text": "pair, and I ought to. So there should be some sort\nof bits here are being set,",
    "start": "831540",
    "end": "836570"
  },
  {
    "text": "and I just haven't written\nthat down. We could have arranged it, of\ncourse, for the free lift to be made out of pairs.",
    "start": "836570",
    "end": "843100"
  },
  {
    "text": "And so then there's no\nproblem with that. But that sort of-- again, an\ninessential detail in a way",
    "start": "843100",
    "end": "850160"
  },
  {
    "text": "some particular programmer or\narchitect or whatever might manufacture his machine\nor Lisp system.",
    "start": "850160",
    "end": "857540"
  },
  {
    "text": "So for example, just looking\nat this, to allocate given",
    "start": "857540",
    "end": "863930"
  },
  {
    "text": "that I had already the structure\nthat you saw before, supposing I wanted to allocate\na new cell, which is going to",
    "start": "863930",
    "end": "871900"
  },
  {
    "text": "be representation of list one,\none, two, where already one",
    "start": "871900",
    "end": "878680"
  },
  {
    "text": "two was the car of the list we\nwere playing with before. Well that's not so hard.",
    "start": "878680",
    "end": "884779"
  },
  {
    "text": "I stored that one and one,\nso p1 one is the representation of this. This is p5.",
    "start": "884780",
    "end": "891690"
  },
  {
    "text": "That's going to be\nthe cdr of this. Now we're going to pull\nsomething off the free list, but remember the free\nlist started at six.",
    "start": "891690",
    "end": "897779"
  },
  {
    "text": "The new free list after this\nallocation is eight, a free list beginning at eight.",
    "start": "897780",
    "end": "902889"
  },
  {
    "text": "And of course in six now we have\na number one, which is what we wanted, with its cdr\nbeing the pair starting in",
    "start": "902890",
    "end": "910540"
  },
  {
    "text": "location five. And that's no big deal.",
    "start": "910540",
    "end": "916810"
  },
  {
    "text": "So the only problem really\nremaining here is, well, I don't have an infinitely\nlarge memory.",
    "start": "916810",
    "end": "925079"
  },
  {
    "text": "If I do this for a little\nwhile, say, for example, supposing it takes me a\nmicrosecond to do a cons, and",
    "start": "925080",
    "end": "930745"
  },
  {
    "text": "I have a million cons memory\nthen I'm only going to run out in a second, and that's\npretty bad.",
    "start": "930745",
    "end": "938000"
  },
  {
    "text": "So what we do to prevent that\ndisaster, that ecological disaster, talk about right\nafter questions.",
    "start": "938000",
    "end": "944300"
  },
  {
    "text": "Are there any questions? ",
    "start": "944300",
    "end": "951500"
  },
  {
    "text": "Yes. AUDIENCE: In the environment\ndiagrams that we were drawing we would use the body of\nprocedures, and you would",
    "start": "951500",
    "end": "958630"
  },
  {
    "text": "eventually wind up with things\nthat were no longer useful in that structure.",
    "start": "958630",
    "end": "964930"
  },
  {
    "text": "How is that represented? PROFESSOR: There's two\nproblems here. One you were asking is that\nmaterial becomes useless.",
    "start": "964930",
    "end": "973870"
  },
  {
    "text": "We'll talk about that\nin a second. That has to do with how to\nprevent ecological disasters. If I make a lot of garbage I\nhave to somehow be able to",
    "start": "973870",
    "end": "980190"
  },
  {
    "text": "clean up after myself. And we'll talk about\nthat in a second. The other question you're asking\nis how you represent",
    "start": "980190",
    "end": "985370"
  },
  {
    "text": "the environments, I think. AUDIENCE: Yes. PROFESSOR: OK. And the environment structures\ncan be represented in arbitrary ways.",
    "start": "985370",
    "end": "990860"
  },
  {
    "text": "There are lots of them. I mean, here I'm just telling\nyou about list cells. Of course every real system\nhas vectors of arbitrary",
    "start": "990860",
    "end": "996400"
  },
  {
    "text": "length as well as the vectors\nof length, too, which represent list cells. And the environment structures\nthat one uses in a",
    "start": "996400",
    "end": "1005460"
  },
  {
    "text": "professionally written Lisp\nsystem tend to be vectors which contain a number of\nelements approximately equal",
    "start": "1005460",
    "end": "1012350"
  },
  {
    "text": "to the number of arguments-- a\nlittle bit more because you need certain glue.",
    "start": "1012350",
    "end": "1018290"
  },
  {
    "text": "So remember, the environment\n[UNINTELLIGIBLE] frames. The frames are constructed\nby applying a procedure.",
    "start": "1018290",
    "end": "1023980"
  },
  {
    "text": "In doing so, an allocation is\nmade of a place which is the number of arguments long\nplus [? unglue ?]",
    "start": "1023980",
    "end": "1031270"
  },
  {
    "text": "that gets linked into a chain. It's just like algol\nat that level. ",
    "start": "1031270",
    "end": "1039810"
  },
  {
    "text": "There any other questions?  OK. Thank you, and let's\ntake a short break.",
    "start": "1039810",
    "end": "1046105"
  },
  {
    "text": "[MUSIC-- \"JESU, JOY OF\nMAN'S DESIRING\" BY JOHANN SEBASTIAN BACH] ",
    "start": "1046106",
    "end": "1092270"
  },
  {
    "text": "PROFESSOR: Well, as I just\nsaid, computer memories supplied by the semiconductor\nmanufacturers are finite.",
    "start": "1092270",
    "end": "1099419"
  },
  {
    "text": "And that's quite a pity. It might not always\nbe that way. Just for a quick calculation,\nyou can see that it's possible",
    "start": "1099420",
    "end": "1107990"
  },
  {
    "text": "that if [? memory ?] prices keep going at the rate\nthey're going that if you still took a microsecond second\nto do a cons, then--",
    "start": "1107990",
    "end": "1114950"
  },
  {
    "text": "first of all, everybody should\nknow that there's about pi times ten to the seventh\nseconds in a year. And so that would be ten to the\nseventh plus ten to the",
    "start": "1114950",
    "end": "1122639"
  },
  {
    "text": "sixth is ten to the\nthirteenth. So there's maybe ten to the\nfourteenth conses in the life of a machine. If there was ten to the\nfourteenth words of memory on",
    "start": "1122640",
    "end": "1129900"
  },
  {
    "text": "your machine, you'd\nnever run out. And that's not completely\nunreasonable.",
    "start": "1129900",
    "end": "1136310"
  },
  {
    "text": "Ten to the fourteenth is not\na very large number. ",
    "start": "1136310",
    "end": "1143860"
  },
  {
    "text": "I don't think it is. But then again I like to\nplay with astronomy. It's at least ten to the\neighteenth centimeters between",
    "start": "1143860",
    "end": "1151380"
  },
  {
    "text": "us and the nearest star. But the thing I'm about to worry\nabout is, at least in",
    "start": "1151380",
    "end": "1159620"
  },
  {
    "text": "the current economic state of\naffairs, ten to the fourteenth pieces of memory is expensive. And so I suppose what we\nhave to do is make",
    "start": "1159620",
    "end": "1167279"
  },
  {
    "text": "do with much smaller. Memories Now in general we want to have\nan illusion of infinity.",
    "start": "1167280",
    "end": "1175800"
  },
  {
    "text": "All we need to do is arrange it\nso that whenever you look, the thing is there. ",
    "start": "1175800",
    "end": "1182669"
  },
  {
    "text": "That's really an\nimportant idea. ",
    "start": "1182670",
    "end": "1189540"
  },
  {
    "text": "A person or a computer lives\nonly a finite amount of time and can only take a finite\nnumber of looks at something.",
    "start": "1189540",
    "end": "1195280"
  },
  {
    "text": "And so you really only need\na finite amount of stuff. But you have to arrange it so\nno matter how much there is,",
    "start": "1195280",
    "end": "1201730"
  },
  {
    "text": "how much you really claim\nthere is, there's always enough stuff so that when you\ntake a look, it's there.",
    "start": "1201730",
    "end": "1206900"
  },
  {
    "text": "And so you only need\na finite amount. But let's see. One problem is, as was brought\nup, that there are possible",
    "start": "1206900",
    "end": "1214980"
  },
  {
    "text": "ways that there is lots of stuff\nthat we make that we don't need. And we could recycle\nthe material out",
    "start": "1214980",
    "end": "1220895"
  },
  {
    "text": "of which its made. An example is the fact that\nwe're building environment",
    "start": "1220895",
    "end": "1227820"
  },
  {
    "text": "structures, and we do so every\ntime we call a procedure. We have built in it a\nenvironment frame. That environment frame\ndoesn't necessarily",
    "start": "1227820",
    "end": "1234840"
  },
  {
    "text": "have a very long lifetime. Its lifetime, meaning its\nusefulness, may exist only",
    "start": "1234840",
    "end": "1240330"
  },
  {
    "text": "over the invocation\nof the procedure. Or if the procedure exports\nanother procedure by returning",
    "start": "1240330",
    "end": "1245860"
  },
  {
    "text": "it as a value and that procedure\nis defined inside of it, well then the lifetime\nof the frame of the outer",
    "start": "1245860",
    "end": "1252210"
  },
  {
    "text": "procedure still is only the\nlifetime of the procedure which was exported.",
    "start": "1252210",
    "end": "1258529"
  },
  {
    "text": "And so ultimately, a lot\nof that is garbage. There are other ways of\nproducing garbage as well.",
    "start": "1258530",
    "end": "1265370"
  },
  {
    "text": "Users produce garbage. An example of user garbage\nis something like this.",
    "start": "1265370",
    "end": "1270929"
  },
  {
    "text": "If we write a program to, for\nexample, append two lists together, well one way to do\nit is to reverse the first",
    "start": "1270930",
    "end": "1279890"
  },
  {
    "text": "list onto the empty list and\nreverse that onto the second list. Now that's not terribly\nbad way of doing it.",
    "start": "1279890",
    "end": "1288159"
  },
  {
    "text": "And however, the intermediate\nresult, which is the reversal of the first list as done by\nthis program, is never going",
    "start": "1288160",
    "end": "1297299"
  },
  {
    "text": "to be accessed ever again after\nit's copied back on to the second. It's an intermediate result.",
    "start": "1297300",
    "end": "1303580"
  },
  {
    "text": "It's going to be hard to ever\nsee how anybody would ever be able to access it.",
    "start": "1303580",
    "end": "1308600"
  },
  {
    "text": "In fact, it will go away. Now if we make a lot of garbage\nlike that, and we should be allowed to, then\nthere's got to be some way to",
    "start": "1308600",
    "end": "1316210"
  },
  {
    "text": "reclaim that garbage. Well, what I'd like to tell you\nabout now is a very clever",
    "start": "1316210",
    "end": "1323050"
  },
  {
    "text": "technique whereby a Lisp system\ncan prove a small",
    "start": "1323050",
    "end": "1329820"
  },
  {
    "text": "theorem every so often on the\n[? forum, ?] the following piece of junk will never\nbe accessed again.",
    "start": "1329820",
    "end": "1337410"
  },
  {
    "text": "It can have no affect on the\nfuture of the computation. It's actually based on\na very simple idea.",
    "start": "1337410",
    "end": "1344920"
  },
  {
    "text": "We've designed our computers\nto look sort of like this. There's some data path, which\ncontains the registers.",
    "start": "1344920",
    "end": "1355279"
  },
  {
    "text": "There are things like x, and\nenv, and val, and so on.",
    "start": "1355280",
    "end": "1362610"
  },
  {
    "text": "And there's one here called\nstack, some sort which points off to a structure somewhere,\nwhich is the stack.",
    "start": "1362610",
    "end": "1370240"
  },
  {
    "text": "And we'll worry about\nthat in a second. There's some finite controller,\nfinite state",
    "start": "1370240",
    "end": "1375390"
  },
  {
    "text": "machine controller. And there's some control signals\nthat go this way and predicate results that\ncome this way, not",
    "start": "1375390",
    "end": "1382270"
  },
  {
    "text": "the interesting part. There's some sort of structured\nmemory, which I just told you how to make, which\nmay contain a stack.",
    "start": "1382270",
    "end": "1390460"
  },
  {
    "text": "I didn't tell you how to make\nthings of arbitrary shape, only pairs. But in fact with what I've told\nyou can simulate a stack",
    "start": "1390460",
    "end": "1396279"
  },
  {
    "text": "by a big list. I don't plan\nto do that, it's not a nice way to do it. But we could have something\nlike that.",
    "start": "1396280",
    "end": "1402990"
  },
  {
    "text": "We have all sorts of little data\nstructures in here that are hooked together\nin funny ways. ",
    "start": "1402990",
    "end": "1410115"
  },
  {
    "text": "They connect to other things. And so on. And ultimately things up there\nare pointers to these.",
    "start": "1410115",
    "end": "1417190"
  },
  {
    "text": "The things that are in the\nregisters are pointers off to the data structures that live in\nthis Lisp structure memory.",
    "start": "1417190",
    "end": "1424910"
  },
  {
    "text": "Now the truth of the matter is\nthat the entire consciousness",
    "start": "1424910",
    "end": "1432660"
  },
  {
    "text": "of this machine is in\nthese registers. There is no possible way that\nthe machine, if done",
    "start": "1432660",
    "end": "1439380"
  },
  {
    "text": "correctly, if built correctly,\ncan access anything in this Lisp structure memory unless\nthe thing in that Lisp",
    "start": "1439380",
    "end": "1445580"
  },
  {
    "text": "structure memory is connected\nby a sequence of data structures to the registers.",
    "start": "1445580",
    "end": "1455070"
  },
  {
    "text": "If it's accessible by legitimate\ndata structure selectors from the\npointers that are",
    "start": "1455070",
    "end": "1460100"
  },
  {
    "text": "stored in these registers. Things like array references,\nperhaps. Or cons cell references,\ncars and cdrs.",
    "start": "1460100",
    "end": "1468789"
  },
  {
    "text": "But I can't just talk about a\nrandom place in this memory, because I can't get to it. These are being arbitrary\nnames I'm not allowed to",
    "start": "1468790",
    "end": "1474665"
  },
  {
    "text": "count, at least as I'm\nevaluating expressions. ",
    "start": "1474665",
    "end": "1481620"
  },
  {
    "text": "If that's the case then there's\na very simple theorem to be proved.",
    "start": "1481620",
    "end": "1487160"
  },
  {
    "text": "Which is, if I start with all\nlead pointers that are in all these registers and recursively\nchase out, marking",
    "start": "1487160",
    "end": "1493570"
  },
  {
    "text": "all the places I can get to by\nselectors, then eventually I mark everything they\ncan be gotten to.",
    "start": "1493570",
    "end": "1500750"
  },
  {
    "text": "Anything which is\nnot so marked is garbage and can be recycled. Very simple.",
    "start": "1500750",
    "end": "1507200"
  },
  {
    "text": "Cannot affect the future\nof the computation. So let me show you that in\na particular example.",
    "start": "1507200",
    "end": "1516616"
  },
  {
    "text": "Now that means I'm going\nto have to append to my description of the list\nstructure a mark.",
    "start": "1516616",
    "end": "1523640"
  },
  {
    "text": "And so here, for example, is\na Lisp structured memory.",
    "start": "1523640",
    "end": "1529080"
  },
  {
    "text": "And in this Lisp structured\nmemory is a Lisp structure beginning in a place\nI'm going to call-- ",
    "start": "1529080",
    "end": "1535640"
  },
  {
    "text": "this is the root. Now it doesn't really\nhave to have a root. It could be a bunch of them,\nlike all the registers.",
    "start": "1535640",
    "end": "1542670"
  },
  {
    "text": "But I could cleverly arrange it\nso all the registers, all the things that are in old\nregisters are also at the right moment put into this root\nstructure, and then we've",
    "start": "1542670",
    "end": "1550769"
  },
  {
    "text": "got one pointer to it. I don't really care. So the idea is we're going to\ncons up stuff until our free",
    "start": "1550770",
    "end": "1557289"
  },
  {
    "text": "list is empty. We've run out of things. Now we're going to do this\nprocess of proving the theorem",
    "start": "1557290",
    "end": "1564559"
  },
  {
    "text": "that a certain percentage of the\nmemory has got crap in it. And then we're going to recycle\nthat to grow new",
    "start": "1564560",
    "end": "1570320"
  },
  {
    "text": "trees, a standard use\nof such garbage. ",
    "start": "1570320",
    "end": "1577090"
  },
  {
    "text": "So in any case, what\ndo we have here? Well we have some data structure\nwhich starts out over here one.",
    "start": "1577090",
    "end": "1587502"
  },
  {
    "text": "And in fact it has a car in\nfive, and its cdr is in two.",
    "start": "1587502",
    "end": "1593980"
  },
  {
    "text": "And all the marks start\nout at zero. Well let's start marking,\njust to play this game.",
    "start": "1593980",
    "end": "1599919"
  },
  {
    "text": "OK. So for example, since I can\naccess one from the root I",
    "start": "1599920",
    "end": "1607090"
  },
  {
    "text": "will mark that. Let me mark it. Bang.",
    "start": "1607090",
    "end": "1612429"
  },
  {
    "text": "That's marked. Now since I have a five here I\ncan go to five and see, well",
    "start": "1612430",
    "end": "1620020"
  },
  {
    "text": "I'll mark that. Bang. That's useful stuff. But five references as a number\nin its car, I'm not",
    "start": "1620020",
    "end": "1625410"
  },
  {
    "text": "interested in marking numbers\nbut its cdr is seven. So I can mark that.",
    "start": "1625410",
    "end": "1630450"
  },
  {
    "text": "Bang. Seven is the empty list, the\nonly thing that references,",
    "start": "1630450",
    "end": "1636000"
  },
  {
    "text": "and it's got a number\nin its car. Not interesting. Well now let's go back here. I forgot about something.",
    "start": "1636000",
    "end": "1641650"
  },
  {
    "text": "Two. See in other words, if I'm\nlooking at cell one, cell one contains a two right\nover here.",
    "start": "1641650",
    "end": "1650370"
  },
  {
    "text": "A reference to two. That means I should\ngo mark two.",
    "start": "1650370",
    "end": "1655700"
  },
  {
    "text": "Bang. Two contains a reference\nto four. It's got a number in its car,\nI'm not interested in that, so",
    "start": "1655700",
    "end": "1661593"
  },
  {
    "text": "I'm going to go mark that. Four refers to seven through its\ncar, and is empty in its",
    "start": "1661593",
    "end": "1667840"
  },
  {
    "text": "cdr, but I've already marked\nthat one so I don't have to mark it again. This is all the accessible\nstructure from that place.",
    "start": "1667840",
    "end": "1675000"
  },
  {
    "text": "Simple recursive\nmark algorithm. Now there are some unhappinesses\nabout that",
    "start": "1675000",
    "end": "1681159"
  },
  {
    "text": "algorithm, and we can worry\nabout that a second. But basically you'll see that\nall the things that have not",
    "start": "1681160",
    "end": "1687280"
  },
  {
    "text": "been marked are places that are\nfree, and I could recycle.",
    "start": "1687280",
    "end": "1694220"
  },
  {
    "text": "So the next stage after that is\ngoing to be to scan through all of my memory, looking for\nthings that are not marked.",
    "start": "1694220",
    "end": "1701179"
  },
  {
    "text": "Every time I come across a\nmarked thing I unmark it, and every time I come across an\nunmarked thing I'm going to",
    "start": "1701180",
    "end": "1706390"
  },
  {
    "text": "link it together in\nmy free list. Classic, very simple algorithm.",
    "start": "1706390",
    "end": "1712120"
  },
  {
    "text": "So let's see. Is that very simple? Yes it is. I'm not going to go through the\ncode in any detail, but I",
    "start": "1712120",
    "end": "1718340"
  },
  {
    "text": "just want to show you about\nhow long it is. Let's look at the mark phase. Here's the first part\nof the mark phase.",
    "start": "1718340",
    "end": "1725059"
  },
  {
    "text": "We pick up the root. We're going to use that as a\nrecursive procedure call.",
    "start": "1725060",
    "end": "1732380"
  },
  {
    "text": "We're going to sweep from there,\nafter when we're done with marking. And then we're going to do a\nlittle couple of instructions",
    "start": "1732380",
    "end": "1739840"
  },
  {
    "text": "that do this checking out on\nthe marks and changing the marks and things like that,\naccording to the algorithm I've just shown you.",
    "start": "1739840",
    "end": "1745500"
  },
  {
    "text": "It comes out here. You have to mark the cars of\nthings and you also have to be able to mark the\ncdrs of things.",
    "start": "1745500",
    "end": "1750660"
  },
  {
    "text": "That's the entire mark phase. I'll just tell you a little\nstory about this.",
    "start": "1750660",
    "end": "1756590"
  },
  {
    "text": "The old DEC PDP-6 computer,\nthis was the way that the",
    "start": "1756590",
    "end": "1762950"
  },
  {
    "text": "mark-sweep garbage collection,\nas it was, was written. The program was so small that\nwith the data that it needed,",
    "start": "1762950",
    "end": "1771940"
  },
  {
    "text": "with the registers that it\nneeded to manipulate the memory, it fit into the fast\nregisters of the machine,",
    "start": "1771940",
    "end": "1778070"
  },
  {
    "text": "which were 16. The whole program. And you could execute instructions in the fast registers.",
    "start": "1778070",
    "end": "1783169"
  },
  {
    "text": "So it's an extremely small\nprogram, and it could run very fast.",
    "start": "1783170",
    "end": "1788870"
  },
  {
    "text": "Now unfortunately, of course,\nthis program, because the fact that it's recursive in the way\nthat you do something first",
    "start": "1788870",
    "end": "1797630"
  },
  {
    "text": "and then you do something after\nthat, you have to work on the cars and then the cdrs,\nit requires auxiliary memory.",
    "start": "1797630",
    "end": "1803409"
  },
  {
    "text": "So Lisp systems-- those requires a stack\nfor marking. Lisp systems that are built this\nway have a limit to the",
    "start": "1803410",
    "end": "1812440"
  },
  {
    "text": "depth of recursion you can have\nin data structures in either the car or the cdr, and\nthat doesn't work very nicely.",
    "start": "1812440",
    "end": "1819930"
  },
  {
    "text": "On the other hand, you never\nnotice it if it's big enough. And that's certainly been the\ncase for most Maclisp, for",
    "start": "1819930",
    "end": "1827650"
  },
  {
    "text": "example, which ran Macsyma\nwhere you could deal with expressions of thousands\nof elements long.",
    "start": "1827650",
    "end": "1833560"
  },
  {
    "text": "These are algebraic expressions\nwith thousand of terms. And there's no\nproblem with that.",
    "start": "1833560",
    "end": "1839490"
  },
  {
    "text": "Such, the garbage collector\ndoes work. On the other hand, there's a\nvery clever modification to",
    "start": "1839490",
    "end": "1844750"
  },
  {
    "text": "this algorithm, which I will not\ndescribe, by Peter Deutsch and Schorr and Waite--",
    "start": "1844750",
    "end": "1850720"
  },
  {
    "text": "Herb Schorr from IBM and Waite,\nwho I don't know. That algorithm allows you to\nbuild-- you do can do this",
    "start": "1850720",
    "end": "1858470"
  },
  {
    "text": "without auxiliary memory, by\nremembering as you walk the data structures where you came\nfrom by reversing the pointers",
    "start": "1858470",
    "end": "1864760"
  },
  {
    "text": "as you go down and crawling\nup the reverse pointers as you go up. It's a rather tricky\nalgorithm. The first time you write it--\nor in fact, the first three",
    "start": "1864760",
    "end": "1871230"
  },
  {
    "text": "times you write it it has\na terrible bug in it. And it's also rather slow,\nbecause it's complicated.",
    "start": "1871230",
    "end": "1878110"
  },
  {
    "text": "It takes about six times as many\nmemory references to do the sorts of things that\nwe're talking about.",
    "start": "1878110",
    "end": "1884580"
  },
  {
    "text": "Well now once I've done this\nmarking phase, and I get into a position where things look\nlike this, let's look--",
    "start": "1884580",
    "end": "1890920"
  },
  {
    "text": "yes. Here we have the mark done,\njust as I did it. Now we have to perform\nthe sweep phase.",
    "start": "1890920",
    "end": "1897330"
  },
  {
    "text": "And I described to you what\nthis sweep is like. I'm going to walk down from\none end of memory or the other, I don't care where,\nscanning every cell that's in",
    "start": "1897330",
    "end": "1905690"
  },
  {
    "text": "the memory. And as I scan these cells, I'm\ngoing to link them together,",
    "start": "1905690",
    "end": "1911000"
  },
  {
    "text": "if they are free, into the free\nlist. And if they're not free, I'm going to unmark them\nso the marks become zero.",
    "start": "1911000",
    "end": "1917500"
  },
  {
    "text": "And in fact what I get-- well\nthe program is not very complicated. It looks sort of like this--\nit's a little longer.",
    "start": "1917500",
    "end": "1922779"
  },
  {
    "text": "Here's the first piece of it. This one's coming down from\nthe top of memory. I don't want you to try to\nunderstand this at this point.",
    "start": "1922780",
    "end": "1929580"
  },
  {
    "text": "It's rather simple. It's a very simple algorithm,\nbut there's pieces of it that just sort of look like this.",
    "start": "1929580",
    "end": "1935970"
  },
  {
    "text": "They're all sort of obvious. And after we've done the sweep,\nwe get an answer that",
    "start": "1935970",
    "end": "1941059"
  },
  {
    "text": "looks like that.  Now there are some disadvantages\nwith mark-sweep",
    "start": "1941060",
    "end": "1947149"
  },
  {
    "text": "algorithms of this sort. Serious ones. One important disadvantage is\nthat your memories get larger",
    "start": "1947150",
    "end": "1954250"
  },
  {
    "text": "and larger. As you say, address spaces get\nlarger and larger, you're willing to represent more and\nmore stuff, then it gets very",
    "start": "1954250",
    "end": "1963080"
  },
  {
    "text": "costly to scan all of memory. What you'd really like to do\nis only scan useful stuff.",
    "start": "1963080",
    "end": "1970490"
  },
  {
    "text": "It would even be better if you\nrealized that some stuff was",
    "start": "1970490",
    "end": "1976120"
  },
  {
    "text": "known to be good and useful, and\nyou don't have to look at it more than once or twice. Or very rarely.",
    "start": "1976120",
    "end": "1981550"
  },
  {
    "text": "Whereas other stuff that you're\nnot so sure about, you can look at more detail every\ntime you want to do this, want",
    "start": "1981550",
    "end": "1990110"
  },
  {
    "text": "to garbage collect. Well there are algorithms that\nare organized in this way.",
    "start": "1990110",
    "end": "1995660"
  },
  {
    "text": "Let me tell you about a famous\nold algorithm which allows you only look at the part\nof memory which is known to be useful.",
    "start": "1995660",
    "end": "2002800"
  },
  {
    "text": "And which happens to be the\nfastest known garbage collector algorithm. This is the\nMinsky-Feinchel-Yochelson",
    "start": "2002800",
    "end": "2008170"
  },
  {
    "text": "garbage collector algorithm. It was invented by Minsky in\n1961 or '60 or something, for",
    "start": "2008170",
    "end": "2016660"
  },
  {
    "text": "the RLE PDP-1 Lisp, which had\n4,096 words of list memory,",
    "start": "2016660",
    "end": "2025870"
  },
  {
    "text": "and a drum. And the whole idea was\nto garbage collect",
    "start": "2025870",
    "end": "2030890"
  },
  {
    "text": "this terrible memory. What Minsky realized was the\neasiest way to do this is to",
    "start": "2030890",
    "end": "2036510"
  },
  {
    "text": "scan the memory in the same\nsense, walking the good structure, copying it out into\nthe drum, compacted.",
    "start": "2036510",
    "end": "2046350"
  },
  {
    "text": "And then when we were done\ncopying it all out, then you swap that back into\nyour memory.",
    "start": "2046350",
    "end": "2052300"
  },
  {
    "text": "Now whether or you not use a\ndrum, or another piece of memory, or something like\nthat isn't important. In fact, I don't think\npeople use",
    "start": "2052300",
    "end": "2058260"
  },
  {
    "text": "drums anymore for anything. But this algorithm basically\ndepends upon having about",
    "start": "2058260",
    "end": "2065919"
  },
  {
    "text": "twice as much address space\nas you're actually using. And so what you have is some,\ninitially, some mixture of",
    "start": "2065920",
    "end": "2075370"
  },
  {
    "text": "useful data and garbage. So this is called fromspace. ",
    "start": "2075370",
    "end": "2085179"
  },
  {
    "text": "And this is a mixture of crud. Some of it's important\nand some of it isn't.",
    "start": "2085179",
    "end": "2092000"
  },
  {
    "text": "Now there's another place which\nis hopefully big enough, if we recall, tospace, which\nis where we're copying to.",
    "start": "2092000",
    "end": "2098240"
  },
  {
    "text": " And what happens is-- and\nI'm not going to go",
    "start": "2098240",
    "end": "2103260"
  },
  {
    "text": "through this detail. It's in our book quite\nexplicitly. There's a root point where\nyou start from.",
    "start": "2103260",
    "end": "2111030"
  },
  {
    "text": "And the idea is that you\nstart with the root. You copy the first thing you\nsee, the first thing that the",
    "start": "2111030",
    "end": "2118610"
  },
  {
    "text": "root points at, to the\nbeginning of tospace. The first thing is a\npair or something",
    "start": "2118610",
    "end": "2124790"
  },
  {
    "text": "like, a data structure. You then also leave behind a\nbroken heart saying, I moved",
    "start": "2124790",
    "end": "2132330"
  },
  {
    "text": "this object from here to\nhere, giving the place where it moved to.",
    "start": "2132330",
    "end": "2137800"
  },
  {
    "text": "This is called a broken heart\nbecause a friend of mine who implemented one of these in\n1966 was a very romantic",
    "start": "2137800",
    "end": "2144760"
  },
  {
    "text": "character and called\nit a broken heart.  But in any case, the next thing\nyou do is now you have a",
    "start": "2144760",
    "end": "2153570"
  },
  {
    "text": "new free pointer which is here,\nand you start scanning. You scan this data structure\nyou just copied.",
    "start": "2153570",
    "end": "2160235"
  },
  {
    "text": "And every time you encounter a\npointer in it, you treat it as if it was the root\npointer here. Oh, I'm sorry. The other thing you do\nis you now move the",
    "start": "2160235",
    "end": "2166329"
  },
  {
    "text": "root pointer to there. So now you scan this, and\neverything you see you treat as it were the root pointer.",
    "start": "2166330",
    "end": "2174110"
  },
  {
    "text": "So if you see something,\nwell it points up into there somewhere. Is it pointing at a thing which\nyou've not copied yet?",
    "start": "2174110",
    "end": "2181780"
  },
  {
    "text": "Is there a broken heart there? If there's a broken heart there\nand it's something you have copied, you've just\nreplaced this pointer with the",
    "start": "2181780",
    "end": "2187640"
  },
  {
    "text": "thing a broken heart\npoints at. If this thing has not been\ncopied, you copy it to the",
    "start": "2187640",
    "end": "2193030"
  },
  {
    "text": "next place over here. Move your free pointer over\nhere, and then leave a broken",
    "start": "2193030",
    "end": "2199859"
  },
  {
    "text": "heart behind and scan. And eventually when the scant\npointer hits the free pointer,",
    "start": "2199860",
    "end": "2206839"
  },
  {
    "text": "everything in memory\nhas been copied. And then there's a whole bunch\nof empty space up here, which",
    "start": "2206840",
    "end": "2212170"
  },
  {
    "text": "you could either make into a\nfree list, if that's what you want to do. But generally you don't in\nthis kind of system. In this system you sequentially",
    "start": "2212170",
    "end": "2217470"
  },
  {
    "text": "allocate your memory. That is a very, very nice\nalgorithm, and sort of the one",
    "start": "2217470",
    "end": "2223819"
  },
  {
    "text": "we use in the scheme that\nyou've been using. And it's expected--",
    "start": "2223820",
    "end": "2229490"
  },
  {
    "text": "I believe no one has found a\nfaster algorithm than that. There are very simple\nmodifications to this algorithm invented by Henry\nBaker which allow one to run",
    "start": "2229490",
    "end": "2239059"
  },
  {
    "text": "this algorithm in real time,\nmeaning you don't have to stop to garbage collect. But you could interleave the\nconsing that the machine does",
    "start": "2239060",
    "end": "2245410"
  },
  {
    "text": "when its running with steps\nof the garbage collection process, so that the garbage\ncollector's distributed, and",
    "start": "2245410",
    "end": "2251370"
  },
  {
    "text": "the machine doesn't have\nto stop, and garbage collecting can start. Of course in the case of\nmachines with virtual memory",
    "start": "2251370",
    "end": "2257519"
  },
  {
    "text": "where a lot of it is in\ninaccessible places, this becomes a very expensive\nprocess.",
    "start": "2257520",
    "end": "2264460"
  },
  {
    "text": "And there have been numerous\nattempts to make this much better. There is a nice paper, for\nthose of you who are",
    "start": "2264460",
    "end": "2272079"
  },
  {
    "text": "interested, by Moon and other\npeople which describes a modification to the\nincremental",
    "start": "2272080",
    "end": "2277940"
  },
  {
    "text": "Minsky-Feinchel-Yochelson\nalgorithm, and modification the Baker algorithm which is\nmore efficient for virtual",
    "start": "2277940",
    "end": "2285980"
  },
  {
    "text": "memory systems. Well I think now the mystery\nto this is sort of gone.",
    "start": "2285980",
    "end": "2292840"
  },
  {
    "text": "And I'd like to see if there\nare any questions. ",
    "start": "2292840",
    "end": "2299780"
  },
  {
    "text": "Yes. AUDIENCE: I saw one of you run\nthe garbage collector on the systems upstairs, and it seemed\nto me to run extremely",
    "start": "2299780",
    "end": "2307640"
  },
  {
    "text": "fast. Did the whole\nthing take-- does it sweep through\nall of memory? PROFESSOR: No. It swept through exactly\nwhat was needed to",
    "start": "2307640",
    "end": "2314480"
  },
  {
    "text": "copy the useful structure. It's a copying collector.",
    "start": "2314480",
    "end": "2320030"
  },
  {
    "text": "And it is very fast. On the\nwhole, I suppose to copy--",
    "start": "2320030",
    "end": "2325090"
  },
  {
    "text": "in a Bobcat-- to copy, I think, a three\nmegabyte thing or something is",
    "start": "2325090",
    "end": "2332450"
  },
  {
    "text": "less than a second, real time. Really, these are very small\nprograms. One thing you should",
    "start": "2332450",
    "end": "2339200"
  },
  {
    "text": "realise is that garbage\ncollectors have to be small.",
    "start": "2339200",
    "end": "2345400"
  },
  {
    "text": "Not because they have to be\nfast, but because no one can debug a complicated\ngarbage collector.",
    "start": "2345400",
    "end": "2351340"
  },
  {
    "text": "A garbage collector, if it\ndoesn't work, will trash your memory in such a way that you\ncannot figure out what the",
    "start": "2351340",
    "end": "2356940"
  },
  {
    "text": "hell happened. You need an audit trail. Because it rearranges\neverything, and how do you",
    "start": "2356940",
    "end": "2362460"
  },
  {
    "text": "know what happened there? So this is the only kind of\nprogram that it really,",
    "start": "2362460",
    "end": "2367480"
  },
  {
    "text": "seriously matters if you stare\nat it long enough so you believe that it works. And sort of prove\nit to yourself.",
    "start": "2367480",
    "end": "2375099"
  },
  {
    "text": "So there's no way to debug it. And that takes it being small\nenough so you can hold it in your head.",
    "start": "2375100",
    "end": "2381690"
  },
  {
    "text": "Garbage collectors are\nspecial in this way. So every reasonable garbage\ncollector has gotten small,",
    "start": "2381690",
    "end": "2387130"
  },
  {
    "text": "and generally small programs\nare fast. Yes.",
    "start": "2387130",
    "end": "2392430"
  },
  {
    "text": "AUDIENCE: Can you repeat\nthe name of this technique once again? PROFESSOR: That's the\nMinsky-Feinchel-Yochelson garbage collector.",
    "start": "2392430",
    "end": "2398420"
  },
  {
    "text": "AUDIENCE: You got that? PROFESSOR: Minsky invented it\nin '61 for the RLE PDP-1. A version of it was developed\nand elaborated to be used in",
    "start": "2398420",
    "end": "2407410"
  },
  {
    "text": "Multics Maclisp by Feinchel\nand Yochelson in somewhere around 1968 or '69.",
    "start": "2407410",
    "end": "2419569"
  },
  {
    "text": "OK. Let's take a break. [MUSIC: \"JESU, JOY OF\nMAN'S DESIRING\" BY JOHANN SEBASTIAN BACH] ",
    "start": "2419570",
    "end": "2477310"
  },
  {
    "text": "PROFESSOR: Well we've come to\nthe end of this subject, and we've already shown you a\nuniversal machine which is",
    "start": "2477310",
    "end": "2484860"
  },
  {
    "text": "down to evaluator. It's down to the level of detail\nyou could imagine you could make one.",
    "start": "2484860",
    "end": "2490420"
  },
  {
    "text": "This is a particular\nimplementation of Lisp, built on one of those scheme chips\nthat was talked about",
    "start": "2490420",
    "end": "2497529"
  },
  {
    "text": "yesterday, sitting over here. This is mostly interface to\nsomebody's memory with a",
    "start": "2497530",
    "end": "2502990"
  },
  {
    "text": "little bit of timing and\nother such stuff. But this fellow actually ran\nLisp at a fairly reasonable",
    "start": "2502990",
    "end": "2508760"
  },
  {
    "text": "rate, as interpretive. It ran Lisp as fast as a DEC\nPDP-10 back in 1979.",
    "start": "2508760",
    "end": "2516500"
  },
  {
    "text": "And so it's gotten\npretty hardware. Pretty concrete.",
    "start": "2516500",
    "end": "2522470"
  },
  {
    "text": "We've also downed you\na bit with the things you can compute. But is it the case that there\nare things we can't compute?",
    "start": "2522470",
    "end": "2531850"
  },
  {
    "text": "And so I'd like to end this with\nshowing you some things that you'd like be able to\ncompute that you can't.",
    "start": "2531850",
    "end": "2538190"
  },
  {
    "text": "The answer is yes, there are\nthings you can't compute. For example, something you'd\nreally like is--",
    "start": "2538190",
    "end": "2548200"
  },
  {
    "text": "if you're writing\n[UNINTELLIGIBLE], you'd like a program that would check\nthat the thing you're going to do will work.",
    "start": "2548200",
    "end": "2554630"
  },
  {
    "text": "Wouldn't that be nice? You'd like something that would\ncatch infinite loops, for example, in programs that\nwere written by users.",
    "start": "2554630",
    "end": "2563190"
  },
  {
    "text": "But in general you can't write\nsuch a program that will read any program and determine\nwhether or not it's an",
    "start": "2563190",
    "end": "2568760"
  },
  {
    "text": "infinite loop. Let me show you that. It's a little bit of a\nminor mathematics. ",
    "start": "2568760",
    "end": "2578780"
  },
  {
    "text": "Let's imagine that we just\nhad a mathematical function before we start. And there is one, called s,\nwhich takes a procedure and",
    "start": "2578780",
    "end": "2592980"
  },
  {
    "text": "its argument, a. ",
    "start": "2592980",
    "end": "2599320"
  },
  {
    "text": "And what s does is it determines\nwhether or not it's safe to run p on a.",
    "start": "2599320",
    "end": "2606632"
  },
  {
    "text": "And what I mean by that is this:\nit's true if p applied",
    "start": "2606632",
    "end": "2614500"
  },
  {
    "text": "to a will converge to a value\nwithout an error.",
    "start": "2614500",
    "end": "2625330"
  },
  {
    "start": "2625330",
    "end": "2632365"
  },
  {
    "text": "And it's false if p of a loops\nforever or makes an error.",
    "start": "2632365",
    "end": "2646890"
  },
  {
    "start": "2646890",
    "end": "2655000"
  },
  {
    "text": "Now that's surely a function. There is some for every\nprocedure and for every",
    "start": "2655000",
    "end": "2661830"
  },
  {
    "text": "argument you could give it that\nis either true or false that it converges without\nmaking an error.",
    "start": "2661830",
    "end": "2668440"
  },
  {
    "text": "And you could make a giant\ntable of them. But the question is, can you\nwrite a procedure that compute",
    "start": "2668440",
    "end": "2674710"
  },
  {
    "text": "the values of this function? Well let's assume that we can.",
    "start": "2674710",
    "end": "2679720"
  },
  {
    "text": "Suppose that we have a procedure\ncalled \"safe\" that",
    "start": "2679720",
    "end": "2698740"
  },
  {
    "text": "computes the value of s. ",
    "start": "2698740",
    "end": "2712170"
  },
  {
    "text": "Now I'm going to show you\nby several methods that",
    "start": "2712170",
    "end": "2717619"
  },
  {
    "text": "you can't do this. The easiest one, or the first\none, let's define a procedure called diag1.",
    "start": "2717620",
    "end": "2723810"
  },
  {
    "text": "Given that we have safe, we\ncan define diag1 to be the",
    "start": "2723810",
    "end": "2738250"
  },
  {
    "text": "procedure of one argument, p,\nwhich has the following",
    "start": "2738250",
    "end": "2743430"
  },
  {
    "text": "properties. If if it's safe to apply p to\nitself, then I wish to have an",
    "start": "2743430",
    "end": "2754620"
  },
  {
    "text": "infinite loop.  Otherwise I'm going\nto return 3.",
    "start": "2754620",
    "end": "2760715"
  },
  {
    "text": " Remember it was 42. What's the answer to\nthe big question?",
    "start": "2760715",
    "end": "2767060"
  },
  {
    "text": "Where of course we know what\nan infinite loop is.  Infinite loop, to be a procedure\nof no arguments,",
    "start": "2767060",
    "end": "2776130"
  },
  {
    "text": "which is that nice lambda\ncalculus loop. Lambda of x, x of x, applied\nto lambda of x, x of x.",
    "start": "2776130",
    "end": "2784680"
  },
  {
    "text": "So there's nothing left to\nthe imagination here. ",
    "start": "2784680",
    "end": "2789830"
  },
  {
    "text": "Well let's see what\nthe story is. I'm supposing it's the case\nthat we worry about the",
    "start": "2789830",
    "end": "2798100"
  },
  {
    "text": "procedure called diag1\napplied to diag1.",
    "start": "2798100",
    "end": "2803180"
  },
  {
    "text": " Well what could it\npossibly be?",
    "start": "2803180",
    "end": "2809970"
  },
  {
    "text": "Well I don't know. We're going to substitute diag1\nfor p in the body here.",
    "start": "2809970",
    "end": "2817309"
  },
  {
    "text": "Well is it safe to compute\ndiag1 of diag1? I don't know. There are two possibilities.",
    "start": "2817310",
    "end": "2823400"
  },
  {
    "text": "If it's safe to compute diag1\nof diag1 that means it shouldn't loop.",
    "start": "2823400",
    "end": "2828490"
  },
  {
    "text": "That means I go to\nhere, but then I produce an infinite loop. So it can't be safe. But if it's not safe to compute\ndiag1 of diag1 then",
    "start": "2828490",
    "end": "2835055"
  },
  {
    "text": "the answer to this is 3. But that's diag1 of diag1,\nso it had to be safe.",
    "start": "2835055",
    "end": "2840530"
  },
  {
    "text": "So therefore by contradiction\nyou cannot produce safe.",
    "start": "2840530",
    "end": "2847470"
  },
  {
    "text": "For those of you who were\nboggled by that one I'm going to say it again, in\na different way.",
    "start": "2847470",
    "end": "2852819"
  },
  {
    "text": "Listen to one more\nalternative. Let's define diag2. ",
    "start": "2852820",
    "end": "2859840"
  },
  {
    "text": "These are named diag because of\nCantor's diagonal argument.",
    "start": "2859840",
    "end": "2865260"
  },
  {
    "text": "These are instances of a famous\nargument which was originally used by Cantor in\nthe late part of the last",
    "start": "2865260",
    "end": "2872069"
  },
  {
    "text": "century to prove that the real\nnumbers were not countable, that there are too many\nreal numbers to",
    "start": "2872070",
    "end": "2878160"
  },
  {
    "text": "be counted by integers. That there are more points on\na line, for example, than there are counting numbers.",
    "start": "2878160",
    "end": "2885260"
  },
  {
    "text": "It may or may not be obvious,\nand I don't want to get into that now. ",
    "start": "2885260",
    "end": "2890900"
  },
  {
    "text": "But diag2 is again a procedure\nof one argument p. It's almost the same as the\nprevious one, which is, if",
    "start": "2890900",
    "end": "2899220"
  },
  {
    "text": "it's safe to compute p on p,\nthen I'm going to produce--",
    "start": "2899220",
    "end": "2906445"
  },
  {
    "text": " then I want to compute\nsome other things",
    "start": "2906445",
    "end": "2914010"
  },
  {
    "text": "other than p of p. Otherwise I'm going\nto put out false.",
    "start": "2914010",
    "end": "2920210"
  },
  {
    "text": " Where other then it says,\nwhatever p of p, I'm going to",
    "start": "2920210",
    "end": "2926510"
  },
  {
    "text": "put out something else. I can give you an example of a\ndefinition of other than which",
    "start": "2926510",
    "end": "2931859"
  },
  {
    "text": "I think works. Let's see. Yes. Where other than be a procedure\nof one argument x",
    "start": "2931860",
    "end": "2946580"
  },
  {
    "text": "which says, if its eq x to, say,\nquote a, then the answer",
    "start": "2946580",
    "end": "2954090"
  },
  {
    "text": "is quote b. Otherwise it's quote a. ",
    "start": "2954090",
    "end": "2960090"
  },
  {
    "text": "That always produces something\nwhich is not what its argument is.",
    "start": "2960090",
    "end": "2965350"
  },
  {
    "text": "That's all it is. That's all I wanted. Well now let's consider this\none, diag2 of diag2.",
    "start": "2965350",
    "end": "2970640"
  },
  {
    "start": "2970640",
    "end": "2978220"
  },
  {
    "text": "Well look. This only does something\ndangerous, like calling p of p, if it's safe to do so.",
    "start": "2978220",
    "end": "2987470"
  },
  {
    "text": "So if safe defined at all,\nif you can define such a procedure, safe, then this\nprocedure is always defined",
    "start": "2987470",
    "end": "2995680"
  },
  {
    "text": "and therefore safe\non any inputs. ",
    "start": "2995680",
    "end": "3001540"
  },
  {
    "text": "So diag2 of diag2 must reduce to\nother than diag2 of diag2.",
    "start": "3001540",
    "end": "3011770"
  },
  {
    "text": " And that doesn't make sense,\nso we have a contradiction,",
    "start": "3011770",
    "end": "3020020"
  },
  {
    "text": "and therefore we can't\ndefine safe. I just waned to do that twice,\nslightly differently, so you",
    "start": "3020020",
    "end": "3027210"
  },
  {
    "text": "wouldn't feel that the first\none was a trick.",
    "start": "3027210",
    "end": "3032260"
  },
  {
    "text": "They may be both tricks,\nbut they're at least slightly different.",
    "start": "3032260",
    "end": "3037299"
  },
  {
    "text": "So I suppose that pretty\nmuch wraps it up. I've just proved what we call\nthe halting theorem, and I",
    "start": "3037300",
    "end": "3043540"
  },
  {
    "text": "suppose with that we're\ngoing to halt. I hope you have a good time. ",
    "start": "3043540",
    "end": "3050900"
  },
  {
    "text": "Are there any questions? Yes. AUDIENCE: What is the\nvalue of s of diag1?",
    "start": "3050900",
    "end": "3056940"
  },
  {
    "text": "PROFESSOR: Of what? AUDIENCE: S of diag1. If you said s is a function\nand we can",
    "start": "3056940",
    "end": "3062340"
  },
  {
    "text": "[INTERPOSING VOICES] PROFESSOR: Oh, I don't know. I don't know. It's a function, but I don't\nknow how to compute it. I can't do it.",
    "start": "3062340",
    "end": "3068610"
  },
  {
    "text": "I'm just a machine, too. Right? There's no machine that\nin principle--",
    "start": "3068610",
    "end": "3074670"
  },
  {
    "text": "it might be that in that\nparticular case you just asked, with some thinking\nI could figure it out. But in general I can't compute\nthe value of s any better than",
    "start": "3074670",
    "end": "3081670"
  },
  {
    "text": "any other machine can. There is such a function, it's\njust that no machine can be",
    "start": "3081670",
    "end": "3087210"
  },
  {
    "text": "built to compute it. Now there's a way of saying\nthat that should not be",
    "start": "3087210",
    "end": "3092980"
  },
  {
    "text": "surprising. Going through this-- I mean, I don't have time to do\nthis here, but the number",
    "start": "3092980",
    "end": "3101019"
  },
  {
    "text": "of functions is very large. If there's a certain number of\nanswers possible and a certain",
    "start": "3101020",
    "end": "3108210"
  },
  {
    "text": "number of inputs possible,\nthen it's the number of answers raised to the number\ninputs is the number of possible functions.",
    "start": "3108210",
    "end": "3114720"
  },
  {
    "text": "On one variable.  Now that's always bigger than\nthe thing you're raising to,",
    "start": "3114720",
    "end": "3123690"
  },
  {
    "text": "the exponent. The number of functions is\nlarger than the number of",
    "start": "3123690",
    "end": "3132150"
  },
  {
    "text": "programs that one\ncan write, by an infinity counting argument.",
    "start": "3132150",
    "end": "3137840"
  },
  {
    "text": "And it's much larger. So there must be a lot of\nfunctions that can't be computed by programs.",
    "start": "3137840",
    "end": "3146280"
  },
  {
    "text": "AUDIENCE: A few moments ago\nyou were talking about specifications and automatic\ngeneration of solutions. Do you see any steps between\nspecifications and solutions?",
    "start": "3146280",
    "end": "3153359"
  },
  {
    "text": " PROFESSOR: Steps between.",
    "start": "3153360",
    "end": "3158720"
  },
  {
    "text": "You mean, you're saying, how\nyou go about constructing devices given that have\nspecifications for the device?",
    "start": "3158720",
    "end": "3165205"
  },
  {
    "text": "Sure. AUDIENCE: There's a lot of\nsoftware engineering that goes through specifications through\nmany layers of design and then",
    "start": "3165205",
    "end": "3171703"
  },
  {
    "text": "implementation. PROFESSOR: Yes? AUDIENCE: I was curious if you\nthink that's realistic. PROFESSOR: Well I think that\nsome of it's realistic and",
    "start": "3171703",
    "end": "3177210"
  },
  {
    "text": "some of it isn't. I mean, surely if I want to\nbuild an electrical filter and I have a rather interesting\npossibility.",
    "start": "3177210",
    "end": "3187160"
  },
  {
    "text": "Supposing I want to build a\nthing that matches some power",
    "start": "3187160",
    "end": "3192180"
  },
  {
    "text": "output to the radio transmitter,\nto some antenna.",
    "start": "3192180",
    "end": "3199906"
  },
  {
    "text": "And I'm really out\nof this power-- it's output tube out here. And the problem is that they\nhave different impedances.",
    "start": "3199906",
    "end": "3205920"
  },
  {
    "text": "I want them to match\nthe impedances. I also want to make a filter in\nthere which is going to get rid of some harmonic\nradiation.",
    "start": "3205920",
    "end": "3212780"
  },
  {
    "text": "Well one old-fashioned technique\nfor doing this is called image impedances,\nor something like that.",
    "start": "3212780",
    "end": "3218860"
  },
  {
    "text": "And what you do is you\nsay you have a basic module called an L-section. Looks like this.",
    "start": "3218860",
    "end": "3224550"
  },
  {
    "text": " If I happen to connect this to\nsome resistance, r, and if I",
    "start": "3224550",
    "end": "3230470"
  },
  {
    "text": "make this impedance x, xl, and\nif it happens to be q times r, then this produces a low pass\nfilter with a q square plus",
    "start": "3230470",
    "end": "3239710"
  },
  {
    "text": "one impedance match. Just what I need. Because now I can take two\nof these, hook them together like this.",
    "start": "3239710",
    "end": "3246510"
  },
  {
    "start": "3246510",
    "end": "3251660"
  },
  {
    "text": "OK, and I take another one\nand I'll hook them together like that.",
    "start": "3251660",
    "end": "3258290"
  },
  {
    "text": "And I have two L-sections\nhooked together. And this will step the impedance\ndown to one that I know, and this will step\nit up to one I know.",
    "start": "3258290",
    "end": "3265530"
  },
  {
    "text": "Each of these is a\nlow pass filter getting rid of some harmonics. It's good filter, it's called\na pie-section filter. Great.",
    "start": "3265530",
    "end": "3271700"
  },
  {
    "text": "Except for the fact that in\ndoing what I just did, I've made a terrible inefficiency\nin this system.",
    "start": "3271700",
    "end": "3278620"
  },
  {
    "text": "I've made two coils where\nI should have made one. And the problem with most\nsoftware engineering art is",
    "start": "3278620",
    "end": "3285200"
  },
  {
    "text": "that there's no mechanism,\nother than peephole optimization and compilers,\nfor getting rid of the",
    "start": "3285200",
    "end": "3290280"
  },
  {
    "text": "redundant parts that are\nconstructed when doing top down design.",
    "start": "3290280",
    "end": "3295350"
  },
  {
    "text": "It's even worse, there are\nlots of very important structures that you can't\nconstruct at all this way.",
    "start": "3295350",
    "end": "3301109"
  },
  {
    "text": "So I think that the standard\ntop down design is a rather shallow business. Doesn't really capture what\npeople want to do in design.",
    "start": "3301110",
    "end": "3308315"
  },
  {
    "text": "I'll give you another\nelectrical example. Electrical examples are\nso much clearer than computational examples, because\ncomputation examples",
    "start": "3308315",
    "end": "3314440"
  },
  {
    "text": "require a certain degree of\ncomplexity to explain them. But one of my favorite examples\nin the electrical",
    "start": "3314440",
    "end": "3319650"
  },
  {
    "text": "world is how would I ever come\nup with the output stage of this inter-stage connection\nin an IF amplifier.",
    "start": "3319650",
    "end": "3327530"
  },
  {
    "text": "It's a little transistor\nhere, and let's see. Well I'm going to have a tank,\nand I'm going to hook this up",
    "start": "3327530",
    "end": "3337559"
  },
  {
    "text": "to, say, I'm going to\nlink-couple that to the input",
    "start": "3337560",
    "end": "3343040"
  },
  {
    "text": "of the next stage. Here's a perfectly\nplausible plan--",
    "start": "3343040",
    "end": "3348580"
  },
  {
    "text": "well except for the fact that\nsince I put that going up I should make that\ngoing that way. Here's a perfectly plausible\nplan for a--",
    "start": "3348580",
    "end": "3356049"
  },
  {
    "text": "no I shouldn't. I'm dumb. Excuse me. Doesn't matter. The point is [UNINTELLIGIBLE]",
    "start": "3356050",
    "end": "3361540"
  },
  {
    "text": "plan for a couple\n[UNINTELLIGIBLE] stages together. Now what the problem is is\nwhat's this hierarchically?",
    "start": "3361540",
    "end": "3367620"
  },
  {
    "text": "It's not one thing. Hierarchically it doesn't\nmake any sense at all. It's the inductance of a tuned\ncircuit, it's the primary of a",
    "start": "3367620",
    "end": "3377230"
  },
  {
    "text": "transformer, and it's also\nthe DC path by which bias",
    "start": "3377230",
    "end": "3382350"
  },
  {
    "text": "conditions get to the collector\nof that transistor. And there's no simple top-down\ndesign that's going to produce",
    "start": "3382350",
    "end": "3389170"
  },
  {
    "text": "a structure like that with so\nmany overlapping uses for a particular thing.",
    "start": "3389170",
    "end": "3394529"
  },
  {
    "text": "Playing Scrabble, where you have\nto do triple word scores, or whatever, is not so easy in\ntop-down design strategy.",
    "start": "3394530",
    "end": "3404950"
  },
  {
    "text": "Yet most of real engineering is\nbased on getting the most oomph for effort.",
    "start": "3404950",
    "end": "3412140"
  },
  {
    "text": "And that's what you're\nseeing here. Yeah? AUDIENCE: Is this the\nlast question? ",
    "start": "3412140",
    "end": "3420282"
  },
  {
    "text": "[LAUGHTER]",
    "start": "3420282",
    "end": "3438640"
  },
  {
    "text": "PROFESSOR: Apparently so.  Thank you.",
    "start": "3438640",
    "end": "3446092"
  },
  {
    "text": "[APPLAUSE]",
    "start": "3446092",
    "end": "3459040"
  },
  {
    "text": "[MUSIC-- \"JESU, JOY OF\nMAN'S DESIRING\" BY JOHANN SEBASTIAN BACH] ",
    "start": "3459040",
    "end": "3533546"
  }
]