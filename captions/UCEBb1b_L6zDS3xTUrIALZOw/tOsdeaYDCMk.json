[
  {
    "start": "0",
    "end": "1364"
  },
  {
    "text": "PROFESSOR: Now,\nthe standard thing",
    "start": "1364",
    "end": "2780"
  },
  {
    "text": "you do with a recursive\ndata type in programming",
    "start": "2780",
    "end": "5770"
  },
  {
    "text": "is you define recursive\nprocedures on them,",
    "start": "5770",
    "end": "8500"
  },
  {
    "text": "so let's look at how that works.",
    "start": "8500",
    "end": "12670"
  },
  {
    "text": "I'm going to define a function\nf on a recursively defined data",
    "start": "12670",
    "end": "17130"
  },
  {
    "text": "type R, and the\nway I'm going to do",
    "start": "17130",
    "end": "19240"
  },
  {
    "text": "it is I'm going to define f\nof b explicitly in terms of b",
    "start": "19240",
    "end": "24420"
  },
  {
    "text": "and operations that are already\nunderstood for all of the base",
    "start": "24420",
    "end": "28900"
  },
  {
    "text": "cases of b in R.\nAnd then I'm going",
    "start": "28900",
    "end": "34559"
  },
  {
    "text": "to define f of a\nconstructor applied",
    "start": "34560",
    "end": "37350"
  },
  {
    "text": "to x in terms of x and f of x.",
    "start": "37350",
    "end": "43089"
  },
  {
    "text": "And if I keep to\nthat structure, that",
    "start": "43090",
    "end": "44910"
  },
  {
    "text": "gives me a recursive\ndefinition of the function",
    "start": "44910",
    "end": "48020"
  },
  {
    "text": "f on the recursively\ndefined data set R.",
    "start": "48020",
    "end": "51920"
  },
  {
    "text": "Let's look at an example\nto make this recipe",
    "start": "51920",
    "end": "54539"
  },
  {
    "text": "explicit and clearer.",
    "start": "54540",
    "end": "56840"
  },
  {
    "text": "Let's think about a\nrecursive function",
    "start": "56840",
    "end": "58510"
  },
  {
    "text": "on a set of matched brackets.",
    "start": "58510",
    "end": "60980"
  },
  {
    "text": "This is a somewhat\ninteresting one.",
    "start": "60980",
    "end": "63900"
  },
  {
    "text": "Let's define the depth\nof a string as follows,",
    "start": "63900",
    "end": "67250"
  },
  {
    "text": "and the idea is it's how deeply\nnested are the successive pairs",
    "start": "67250",
    "end": "72050"
  },
  {
    "text": "of left and right brackets.",
    "start": "72050",
    "end": "74100"
  },
  {
    "text": "Well, the depth of\nthe empty string is 0.",
    "start": "74100",
    "end": "77280"
  },
  {
    "text": "You got to start somewhere,\nand it's got no brackets,",
    "start": "77280",
    "end": "81220"
  },
  {
    "text": "we'll call it depth 0.",
    "start": "81220",
    "end": "83780"
  },
  {
    "text": "Now, what about the depth of\nthe constructor putting brackets",
    "start": "83780",
    "end": "88690"
  },
  {
    "text": "around s and then\nfollowing it by t?",
    "start": "88690",
    "end": "91690"
  },
  {
    "text": "Well, putting brackets\naround s gives you",
    "start": "91690",
    "end": "95140"
  },
  {
    "text": "a string that's 1\ndeeper than s is,",
    "start": "95140",
    "end": "98409"
  },
  {
    "text": "and then you follow it by\nt, and it's as deep as t is.",
    "start": "98410",
    "end": "102130"
  },
  {
    "text": "So the result is that the\ndepth of the constructor",
    "start": "102130",
    "end": "105600"
  },
  {
    "text": "is a string which\nis a number which",
    "start": "105600",
    "end": "110060"
  },
  {
    "text": "is equal to 1 plus the depth\nof s and the depth of t,",
    "start": "110060",
    "end": "115479"
  },
  {
    "text": "whichever is larger.",
    "start": "115480",
    "end": "116610"
  },
  {
    "text": "The max of 1 plus depth of\ns and depth of t, and that's",
    "start": "116610",
    "end": "120890"
  },
  {
    "text": "our recursive\ndefinition of depth.",
    "start": "120890",
    "end": "125160"
  },
  {
    "text": "Let's look at maybe another\neven more familiar example",
    "start": "125161",
    "end": "127410"
  },
  {
    "text": "of recursive definition.",
    "start": "127410",
    "end": "128429"
  },
  {
    "text": "Let's define the nth power of\nan integer or real number k.",
    "start": "128430",
    "end": "135310"
  },
  {
    "text": "The zeroth power k\nis defined to be 1,",
    "start": "135310",
    "end": "138610"
  },
  {
    "text": "and the n plus\nfirst power of k is",
    "start": "138610",
    "end": "140960"
  },
  {
    "text": "defined to be k times\nthe nth power of k,",
    "start": "140960",
    "end": "146260"
  },
  {
    "text": "and this would be an\nexecutable definition",
    "start": "146260",
    "end": "149110"
  },
  {
    "text": "of the exponentiation function\nin a lot of programming",
    "start": "149110",
    "end": "152680"
  },
  {
    "text": "languages.",
    "start": "152680",
    "end": "155079"
  },
  {
    "text": "And my point here is that\nthis familiar definition,",
    "start": "155080",
    "end": "159130"
  },
  {
    "text": "recursive definition on\na nonnegative integer n,",
    "start": "159130",
    "end": "161780"
  },
  {
    "text": "is in fact a structural\ninduction using the fact",
    "start": "161780",
    "end": "165730"
  },
  {
    "text": "that the nonnegative integers\ncan be defined recursively",
    "start": "165730",
    "end": "171530"
  },
  {
    "text": "as follows.",
    "start": "171530",
    "end": "172760"
  },
  {
    "text": "0 is a nonnegative integer, and\nif n is a nonnegative integer,",
    "start": "172760",
    "end": "177700"
  },
  {
    "text": "then n plus 1 is a\nnonnegative integer.",
    "start": "177700",
    "end": "182099"
  },
  {
    "text": "So to summarize, the recipe for\na recursive function definition",
    "start": "182100",
    "end": "185650"
  },
  {
    "text": "is you define f going from\nthe recursive data type",
    "start": "185650",
    "end": "190110"
  },
  {
    "text": "to values-- whatever\nkind of values",
    "start": "190110",
    "end": "191730"
  },
  {
    "text": "you want to assign to\nthese recursive data--",
    "start": "191730",
    "end": "194830"
  },
  {
    "text": "f of b is defined directly\nfor the base case b,",
    "start": "194830",
    "end": "197920"
  },
  {
    "text": "of base cases b, and f\nof the constructor of x",
    "start": "197920",
    "end": "201010"
  },
  {
    "text": "is defined using f of x and x.",
    "start": "201010",
    "end": "206330"
  },
  {
    "text": "Now, once you've gotten a\nfunction defined recursively,",
    "start": "206330",
    "end": "211210"
  },
  {
    "text": "you can start proving\nthings about it",
    "start": "211210",
    "end": "213640"
  },
  {
    "text": "by structural induction\nor by induction",
    "start": "213640",
    "end": "216670"
  },
  {
    "text": "on its own definition, its\nown recursive definition.",
    "start": "216670",
    "end": "221000"
  },
  {
    "text": "So let's look at\nan example of that.",
    "start": "221000",
    "end": "223930"
  },
  {
    "text": "I want to prove the\nfollowing property",
    "start": "223930",
    "end": "226049"
  },
  {
    "text": "of the depth of\nstrings in M, namely",
    "start": "226050",
    "end": "231430"
  },
  {
    "text": "that if I look at the length\nof a string r plus 2--",
    "start": "231430",
    "end": "236739"
  },
  {
    "text": "so the vertical bars around\nr mean the number of brackets",
    "start": "236740",
    "end": "243450"
  },
  {
    "text": "in the string r plus 2 is\nless than or equal to 2",
    "start": "243450",
    "end": "248030"
  },
  {
    "text": "to the power of depth\nplus 1-- twice the 2 to",
    "start": "248030",
    "end": "250970"
  },
  {
    "text": "of the depth of the string.",
    "start": "250970",
    "end": "254330"
  },
  {
    "text": "And I want to prove that\nthis holds for all strings",
    "start": "254330",
    "end": "257370"
  },
  {
    "text": "r of matched brackets,\nand I'm going to prove it",
    "start": "257370",
    "end": "260139"
  },
  {
    "text": "by structural induction.",
    "start": "260140",
    "end": "262109"
  },
  {
    "text": "And just as a\nwalk-through, here's",
    "start": "262110",
    "end": "263659"
  },
  {
    "text": "how the proof is going to go.",
    "start": "263660",
    "end": "265230"
  },
  {
    "text": "Let's suppose that\nr is the base case.",
    "start": "265230",
    "end": "268080"
  },
  {
    "text": "Is it the case that\nthis inequality",
    "start": "268080",
    "end": "270699"
  },
  {
    "text": "holds for the empty string?",
    "start": "270700",
    "end": "272460"
  },
  {
    "text": "Well, the length of r is 0, so\nlength of r plus 2 is 0 plus 2,",
    "start": "272460",
    "end": "279360"
  },
  {
    "text": "or 2, which is the\nsame as 2 to the 0",
    "start": "279360",
    "end": "281759"
  },
  {
    "text": "plus 1, which is in fact\nequal to 2 to the depth",
    "start": "281760",
    "end": "285380"
  },
  {
    "text": "of the empty string plus 1.",
    "start": "285380",
    "end": "287050"
  },
  {
    "text": "So this inequality\nactually holds",
    "start": "287050",
    "end": "288789"
  },
  {
    "text": "as an equality in the base\ncase, and we're good there.",
    "start": "288790",
    "end": "293866"
  },
  {
    "text": "What we next need to show\nis that this inequality",
    "start": "293866",
    "end": "297200"
  },
  {
    "text": "holds in the constructor case.",
    "start": "297200",
    "end": "298860"
  },
  {
    "text": "So we're looking at\nan arbitrary string",
    "start": "298860",
    "end": "302270"
  },
  {
    "text": "r that's built out of s and\nt, and r is left bracket,",
    "start": "302270",
    "end": "307810"
  },
  {
    "text": "s right bracket, t, and\nI want to show that r",
    "start": "307810",
    "end": "312970"
  },
  {
    "text": "satisfies this inequality.",
    "start": "312970",
    "end": "315070"
  },
  {
    "text": "Well, by induction\nhypothesis, I can",
    "start": "315070",
    "end": "316920"
  },
  {
    "text": "assume that s and t\nsatisfy the inequality.",
    "start": "316920",
    "end": "319450"
  },
  {
    "text": "So I have that the length\nof s plus 2 is at most 2",
    "start": "319450",
    "end": "322690"
  },
  {
    "text": "to the depth of s plus 1 and the\nlength of t plus 2 is at most 2",
    "start": "322690",
    "end": "326365"
  },
  {
    "text": "to the depth of t\nplus 1, and let's just",
    "start": "326365",
    "end": "329440"
  },
  {
    "text": "walk through the proof.",
    "start": "329440",
    "end": "331870"
  },
  {
    "text": "You can slow this down\nand replay it if need be,",
    "start": "331870",
    "end": "333889"
  },
  {
    "text": "so I'm just going to\ngo through it quickly.",
    "start": "333890",
    "end": "336700"
  },
  {
    "text": "The length of r plus 2--\nr is, after all, brackets",
    "start": "336700",
    "end": "340960"
  },
  {
    "text": "s, t, so it's simply the\nlength of that string plus 2",
    "start": "340960",
    "end": "343990"
  },
  {
    "text": "by the definition of r.",
    "start": "343990",
    "end": "346180"
  },
  {
    "text": "The length of brackets\ns, t is the length of t",
    "start": "346180",
    "end": "350380"
  },
  {
    "text": "plus the length of s plus\nthe 2 for the 2 brackets",
    "start": "350380",
    "end": "353850"
  },
  {
    "text": "that we've added, and\nso we're plugging that",
    "start": "353850",
    "end": "356410"
  },
  {
    "text": "into the previous term\nand getting that plus 2.",
    "start": "356410",
    "end": "360420"
  },
  {
    "text": "Then just rearrange the terms.",
    "start": "360420",
    "end": "362050"
  },
  {
    "text": "It's the same as\nthe size of s plus 2",
    "start": "362050",
    "end": "364690"
  },
  {
    "text": "plus the size of t plus 2.",
    "start": "364690",
    "end": "366270"
  },
  {
    "text": "And I arranged it that\nway because by induction",
    "start": "366270",
    "end": "368979"
  },
  {
    "text": "hypothesis, I know that the\nsize of s plus 2 is less than",
    "start": "368980",
    "end": "373220"
  },
  {
    "text": "or equal to 2 to the depth of\ns plus 1, and likewise for t.",
    "start": "373220",
    "end": "378030"
  },
  {
    "text": "Now I just play a nice\ntrick to get these 2",
    "start": "378030",
    "end": "380880"
  },
  {
    "text": "exponents to look alike.",
    "start": "380880",
    "end": "383750"
  },
  {
    "text": "I say that the depth\nof s is less than",
    "start": "383750",
    "end": "387930"
  },
  {
    "text": "or equal to the max of the\ndepth of s and the depth of t,",
    "start": "387930",
    "end": "390660"
  },
  {
    "text": "and likewise for the depth of t.",
    "start": "390660",
    "end": "392560"
  },
  {
    "text": "So in both of those terms here,\nI can replace the exponent",
    "start": "392560",
    "end": "398100"
  },
  {
    "text": "or replace the depth of s\nby the max of depth s and t,",
    "start": "398100",
    "end": "402780"
  },
  {
    "text": "and likewise here.",
    "start": "402780",
    "end": "404160"
  },
  {
    "text": "Now I've got the\nsame term twice,",
    "start": "404160",
    "end": "406930"
  },
  {
    "text": "so I can say that it's\nsimply twice the max depth.",
    "start": "406930",
    "end": "413580"
  },
  {
    "text": "And of course, that is\nequal to, by definition",
    "start": "413580",
    "end": "418210"
  },
  {
    "text": "of the depth of r, twice\n2 to the depth of r,",
    "start": "418210",
    "end": "421090"
  },
  {
    "text": "which is of course 2 to\nthe depth of r plus 1.",
    "start": "421090",
    "end": "424180"
  },
  {
    "text": "And I have by more or less\nautomatically plugging",
    "start": "424180",
    "end": "428070"
  },
  {
    "text": "into the definitions and\na structural induction,",
    "start": "428070",
    "end": "432000"
  },
  {
    "text": "I've proved that\nthis inequality holds",
    "start": "432000",
    "end": "434460"
  },
  {
    "text": "for the recursively defined\ndepth function, and we're done.",
    "start": "434460",
    "end": "442069"
  },
  {
    "text": "Let's look at one\nmore familiar example.",
    "start": "442070",
    "end": "444310"
  },
  {
    "text": "I want to give [? the ?]\nrecursive definition",
    "start": "444310",
    "end": "446360"
  },
  {
    "text": "of the positive powers of 2.",
    "start": "446360",
    "end": "449349"
  },
  {
    "text": "So the base case is the 2\nis a positive power of 2,",
    "start": "449350",
    "end": "454010"
  },
  {
    "text": "and the constructor is\njust one constructor",
    "start": "454010",
    "end": "457330"
  },
  {
    "text": "I'm going to use-- that if x\nand y are positive powers of 2,",
    "start": "457330",
    "end": "460509"
  },
  {
    "text": "then their product is\na positive power of 2.",
    "start": "460510",
    "end": "463950"
  },
  {
    "text": "So let's look at some examples.",
    "start": "463950",
    "end": "466140"
  },
  {
    "text": "I can start with 2 and\nthen the only thing",
    "start": "466140",
    "end": "468050"
  },
  {
    "text": "I can do as a constructor\nis multiply 2 by 2 to get 4.",
    "start": "468050",
    "end": "471500"
  },
  {
    "text": "Once I got 4, I can\ndo 4 times 2 to get 8,",
    "start": "471500",
    "end": "475115"
  },
  {
    "text": "and I can do 4\ntimes 4 to get 16,",
    "start": "475115",
    "end": "477479"
  },
  {
    "text": "and I can do 4 times 8 to\nget 32, and all of these",
    "start": "477480",
    "end": "482690"
  },
  {
    "text": "are positive powers of 2.",
    "start": "482690",
    "end": "484570"
  },
  {
    "start": "484570",
    "end": "487600"
  },
  {
    "text": "Now let's define the log to the\nbase 2 of a positive power of 2",
    "start": "487600",
    "end": "492890"
  },
  {
    "text": "recursively.",
    "start": "492890",
    "end": "494150"
  },
  {
    "text": "Well, the log to the\nbase 2 of 2 is 1.",
    "start": "494150",
    "end": "497720"
  },
  {
    "text": "I'd have to define log to\nthe base 2 in the base case,",
    "start": "497720",
    "end": "501200"
  },
  {
    "text": "and that's easy to do.",
    "start": "501200",
    "end": "502770"
  },
  {
    "text": "What about in the\nconstructor case?",
    "start": "502770",
    "end": "504729"
  },
  {
    "text": "Well, the log to the base 2\nof x, y is equal to the log",
    "start": "504730",
    "end": "508760"
  },
  {
    "text": "to the base 2 of x plus\nthe log to the base",
    "start": "508760",
    "end": "511660"
  },
  {
    "text": "2 of y for all the x, y's\nthat are positive powers of 2,",
    "start": "511660",
    "end": "516260"
  },
  {
    "text": "and so I have defined a\nlog of the constructor x,",
    "start": "516260",
    "end": "520229"
  },
  {
    "text": "y in terms of the function\nlog of x and the function log",
    "start": "520230",
    "end": "525410"
  },
  {
    "text": "applied to y.",
    "start": "525410",
    "end": "526319"
  },
  {
    "text": "It conforms to the\nstandard definition",
    "start": "526320",
    "end": "529950"
  },
  {
    "text": "of a recursive function on\na recursively defined data",
    "start": "529950",
    "end": "534150"
  },
  {
    "text": "type, [INAUDIBLE]\npositive powers of 2.",
    "start": "534150",
    "end": "536840"
  },
  {
    "text": "Now, this looks OK.",
    "start": "536840",
    "end": "538185"
  },
  {
    "text": "Well, let's just check it out.",
    "start": "538185",
    "end": "539920"
  },
  {
    "text": "So log of 4 is log\nof 2 times 2, which",
    "start": "539920",
    "end": "544360"
  },
  {
    "text": "is by the definition of the\nlog of 2 plus the log of 2,",
    "start": "544360",
    "end": "552190"
  },
  {
    "text": "which is 1 plus 1, which is\nequal to 2, and guess what?",
    "start": "552190",
    "end": "555460"
  },
  {
    "text": "That's correct.",
    "start": "555460",
    "end": "556640"
  },
  {
    "text": "The log of 8--\nwell, 8 is 2 times",
    "start": "556640",
    "end": "558890"
  },
  {
    "text": "4, so by the recursive\ndefinition, that's the log of 2",
    "start": "558890",
    "end": "563990"
  },
  {
    "text": "plus the log of 4, which we\npreviously figured out log of 4",
    "start": "563990",
    "end": "568589"
  },
  {
    "text": "was 2, so we get 3 and the\nanswer comes out right.",
    "start": "568590",
    "end": "571670"
  },
  {
    "text": "Now, remember, you're not\nsupposed to in this reasoning",
    "start": "571670",
    "end": "575110"
  },
  {
    "text": "use the properties that you\nknow that log to the base 2",
    "start": "575110",
    "end": "578040"
  },
  {
    "text": "has because we're defining\nthis function which we're",
    "start": "578040",
    "end": "582310"
  },
  {
    "text": "calling log to the base\n2 and implicitly claiming",
    "start": "582310",
    "end": "585010"
  },
  {
    "text": "that it's right.",
    "start": "585010",
    "end": "586050"
  },
  {
    "text": "But in order to prove\nthat it's right,",
    "start": "586050",
    "end": "588649"
  },
  {
    "text": "we need to be using just see\nthe structural definition of log",
    "start": "588650",
    "end": "592870"
  },
  {
    "text": "to the base 2 to\nprove its properties.",
    "start": "592870",
    "end": "594950"
  },
  {
    "text": "So that was what\nI was illustrating",
    "start": "594950",
    "end": "596630"
  },
  {
    "text": "with this reasoning, that just\nplugging in the constructor",
    "start": "596630",
    "end": "601780"
  },
  {
    "text": "case of log of x, y is\nlog of x plus log of y,",
    "start": "601780",
    "end": "604700"
  },
  {
    "text": "I can get these numbers out.",
    "start": "604700",
    "end": "607300"
  },
  {
    "text": "So the point of this is just to\nmake the following definition",
    "start": "607300",
    "end": "610399"
  },
  {
    "text": "look reasonable.",
    "start": "610400",
    "end": "611200"
  },
  {
    "text": "I'm going to define\na new function which",
    "start": "611200",
    "end": "612710"
  },
  {
    "text": "I'm going to call\nthe log e function,",
    "start": "612710",
    "end": "614251"
  },
  {
    "text": "and it's another function\non the positive powers of 2,",
    "start": "614251",
    "end": "617339"
  },
  {
    "text": "and here's the definition\nof the log e function.",
    "start": "617340",
    "end": "620060"
  },
  {
    "text": "The log e of 2 is going to\nbe 1, just as the log is,",
    "start": "620060",
    "end": "623980"
  },
  {
    "text": "but the log e of x, y is\ngoing to be x plus the log",
    "start": "623980",
    "end": "628060"
  },
  {
    "text": "e of y for all x, y and\npositive powers of 2.",
    "start": "628060",
    "end": "633110"
  },
  {
    "text": "Well, let's try that definition.",
    "start": "633110",
    "end": "635920"
  },
  {
    "text": "Log e of 4 is log e\nof 2 times 2, which",
    "start": "635920",
    "end": "640490"
  },
  {
    "text": "according to the recursive\ndefinition is 2 plus the log",
    "start": "640490",
    "end": "646529"
  },
  {
    "text": "e of 2, which is\n1-- namely, it's 3.",
    "start": "646530",
    "end": "651200"
  },
  {
    "text": "Log e of 8-- well, 8 is 2\ntimes 4, so the log e of 8",
    "start": "651200",
    "end": "656940"
  },
  {
    "text": "is 2 plus the log e of 4.",
    "start": "656940",
    "end": "659420"
  },
  {
    "text": "We just figured out that\nthe log e of 4 was 3,",
    "start": "659420",
    "end": "661620"
  },
  {
    "text": "so it's 2 plus 3 is 5.",
    "start": "661620",
    "end": "663480"
  },
  {
    "text": "Log e of 8 is 5.",
    "start": "663480",
    "end": "666620"
  },
  {
    "text": "And finally, log e of 16--\nwell, 16 is 8 times 2,",
    "start": "666620",
    "end": "671830"
  },
  {
    "text": "so the log e of 8 times\n2 is 8 plus the log",
    "start": "671830",
    "end": "675000"
  },
  {
    "text": "e of 2, which we know is 1.",
    "start": "675000",
    "end": "676230"
  },
  {
    "text": "It's 9.",
    "start": "676230",
    "end": "676740"
  },
  {
    "start": "676740",
    "end": "679899"
  },
  {
    "text": "So we've just figured out the\nlog e of 16 is 9, but now comes",
    "start": "679900",
    "end": "683940"
  },
  {
    "text": "the problem.",
    "start": "683940",
    "end": "686600"
  },
  {
    "text": "16, of course, is not only 8\ntimes 2, but it's 2 times 8,",
    "start": "686600",
    "end": "690959"
  },
  {
    "text": "and so the log e of 2 times\n8 is 2 plus the log e of 8.",
    "start": "690960",
    "end": "695410"
  },
  {
    "text": "Log e of 8 we previously figured\nout was 5, so the log e of 16",
    "start": "695410",
    "end": "699149"
  },
  {
    "text": "is 7, and now I have\nan inconsistency.",
    "start": "699150",
    "end": "703220"
  },
  {
    "text": "I have used this recursive\ndefinition of log",
    "start": "703220",
    "end": "706180"
  },
  {
    "text": "e to conclude that the log\ne of 16 is both 9 and 7,",
    "start": "706180",
    "end": "710620"
  },
  {
    "text": "and we got a problem.",
    "start": "710620",
    "end": "712190"
  },
  {
    "text": "It's not a good\ndefinition of a function.",
    "start": "712190",
    "end": "714690"
  },
  {
    "text": "The problem is a simple\none called ambiguity.",
    "start": "714690",
    "end": "718090"
  },
  {
    "text": "There's more than\none way to construct",
    "start": "718090",
    "end": "719900"
  },
  {
    "text": "the elements of PP2, of\npositive powers of 2,",
    "start": "719900",
    "end": "723110"
  },
  {
    "text": "from the constructor x times y.",
    "start": "723110",
    "end": "727050"
  },
  {
    "text": "16 was 8 times 2, but\nit's also 2 times 8,",
    "start": "727050",
    "end": "731180"
  },
  {
    "text": "and of course, it's\nalso 4 times 4.",
    "start": "731180",
    "end": "733589"
  },
  {
    "text": "And depending on\nwhich constructor",
    "start": "733590",
    "end": "737460"
  },
  {
    "text": "you use to construct\n16, you're going",
    "start": "737460",
    "end": "739960"
  },
  {
    "text": "to get out different values\nassigned to the log e function.",
    "start": "739960",
    "end": "744755"
  },
  {
    "start": "744755",
    "end": "747690"
  },
  {
    "text": "So when you have an ambiguously\ndefined recursive data",
    "start": "747690",
    "end": "752240"
  },
  {
    "text": "structure-- for example\nF18 is very ambiguous--",
    "start": "752240",
    "end": "756810"
  },
  {
    "text": "then defining recursive\nfunctions on that definition",
    "start": "756810",
    "end": "762670"
  },
  {
    "text": "is not going to\nwork well, and you",
    "start": "762670",
    "end": "764709"
  },
  {
    "text": "have to very carefully prove\nthat a recursive definition",
    "start": "764710",
    "end": "769150"
  },
  {
    "text": "actually works in\na single value.",
    "start": "769150",
    "end": "770950"
  },
  {
    "text": "So for example, log to\nthe base 2 does work,",
    "start": "770950",
    "end": "774070"
  },
  {
    "text": "but that would require\nproof it doesn't follow on",
    "start": "774070",
    "end": "776280"
  },
  {
    "text": "general principles [INAUDIBLE]\nyou define a recursive function",
    "start": "776280",
    "end": "780620"
  },
  {
    "text": "on an ambiguous data type.",
    "start": "780620",
    "end": "783755"
  },
  {
    "text": "On the other hand,\nthe reason why",
    "start": "783755",
    "end": "785130"
  },
  {
    "text": "we chose that somewhat\nunexpected single constructor",
    "start": "785130",
    "end": "790160"
  },
  {
    "text": "for the balanced strings M,\nthe balanced bracket strings,",
    "start": "790160",
    "end": "795629"
  },
  {
    "text": "was that it turns out\nto be unambiguous.",
    "start": "795630",
    "end": "798190"
  },
  {
    "text": "And so that definition of\ndepth is a good definition,",
    "start": "798190",
    "end": "801980"
  },
  {
    "text": "as is any definition based\non the recursive definition",
    "start": "801980",
    "end": "807709"
  },
  {
    "text": "of the set M.",
    "start": "807710",
    "end": "809140"
  },
  {
    "text": "So the general problem we\nhave to watch out for--",
    "start": "809140",
    "end": "811540"
  },
  {
    "text": "[AUDIO OUT]",
    "start": "811540",
    "end": "814360"
  },
  {
    "start": "814360",
    "end": "818589"
  },
  {
    "text": "Constructor created the datum e.",
    "start": "818590",
    "end": "821530"
  },
  {
    "text": "If there's more than\none way to construct e,",
    "start": "821530",
    "end": "824330"
  },
  {
    "text": "then you're not\nquite sure which case",
    "start": "824330",
    "end": "829070"
  },
  {
    "text": "to use to define the\nfunction f, and that's",
    "start": "829070",
    "end": "833130"
  },
  {
    "text": "why this issue of whether or not\nthe data structure's ambiguous",
    "start": "833130",
    "end": "837430"
  },
  {
    "text": "is critical to getting\ngood definitions",
    "start": "837430",
    "end": "840270"
  },
  {
    "text": "of recursive functions.",
    "start": "840270",
    "end": "842640"
  },
  {
    "start": "842640",
    "end": "843162"
  }
]