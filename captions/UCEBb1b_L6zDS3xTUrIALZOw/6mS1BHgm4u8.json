[
  {
    "text": "For this problem, assume that you have a fully\nfunctioning 5-stage pipelined beta with full",
    "start": "1709",
    "end": "7740"
  },
  {
    "text": "bypassing and annulment of branch delay slots\nas presented in lecture.",
    "start": "7740",
    "end": "13500"
  },
  {
    "text": "This beta has been running the program shown\nhere for a while.",
    "start": "13500",
    "end": "17500"
  },
  {
    "text": "The actual functionality of this program is\nnot so important for this problem, but lets",
    "start": "17500",
    "end": "22539"
  },
  {
    "text": "just review it quickly.",
    "start": "22539",
    "end": "24949"
  },
  {
    "text": "This program begins by initializing R1 to\n0 before entering the loop.",
    "start": "24949",
    "end": "30380"
  },
  {
    "text": "R1 represents the index of the array element\ncurrently being accessed.",
    "start": "30380",
    "end": "35370"
  },
  {
    "text": "Within the loop, the value of that array element\nis loaded into R0.",
    "start": "35370",
    "end": "40770"
  },
  {
    "text": "R1 is then incremented by 4 in order to point\nto the next element in the array.",
    "start": "40770",
    "end": "47170"
  },
  {
    "text": "We then compare the array element that was\njust loaded into R0 with the updated index",
    "start": "47170",
    "end": "52489"
  },
  {
    "text": "in R1 and if they are equal, then we repeat\nthe loop.",
    "start": "52489",
    "end": "57010"
  },
  {
    "text": "If they are not equal, then we store the current\nvalue of R1 into a memory location called",
    "start": "57010",
    "end": "62908"
  },
  {
    "text": "index to remember which index value satisfied\nthe compare instruction.",
    "start": "62909",
    "end": "69050"
  },
  {
    "text": "We want to understand how this program would\nrun on our beta.",
    "start": "69050",
    "end": "73070"
  },
  {
    "text": "In order to do this, we will create a pipeline\ndiagram showing the execution of this program.",
    "start": "73070",
    "end": "79910"
  },
  {
    "text": "A pipeline diagram demonstrates which instruction\nis currently being executed in each of the",
    "start": "79910",
    "end": "86600"
  },
  {
    "text": "5 pipeline stages.",
    "start": "86600",
    "end": "89078"
  },
  {
    "text": "Our rows indicate the pipeline stage that\nthe instruction is in.",
    "start": "89079",
    "end": "93590"
  },
  {
    "text": "There are five pipeline stages.",
    "start": "93590",
    "end": "96030"
  },
  {
    "text": "The first is IF, or instruction fetch, which\nfetches the next instruction from memory.",
    "start": "96030",
    "end": "102780"
  },
  {
    "text": "The second is RF, or register file stage which\nreads the source operands of the instruction.",
    "start": "102780",
    "end": "111340"
  },
  {
    "text": "Next comes the ALU stage where all required\narithmetic and logic unit operations are executed.",
    "start": "111340",
    "end": "119189"
  },
  {
    "text": "The fourth stage is the MEM stage where we\ncan begin accessing memory for a load or store",
    "start": "119190",
    "end": "124070"
  },
  {
    "text": "operation because the address of the memory\nlocation was computed in the ALU stage.",
    "start": "124070",
    "end": "130050"
  },
  {
    "text": "Finally, the last stage is WB, or the write\nback stage where the results are written back",
    "start": "130050",
    "end": "137230"
  },
  {
    "text": "into the register file.",
    "start": "137230",
    "end": "139860"
  },
  {
    "text": "The columns in a pipeline diagram represent\nthe execution cycles.",
    "start": "139860",
    "end": "145850"
  },
  {
    "text": "Our loop begins with a LD operation, so we\nsee our LD instruction in the IF stage in",
    "start": "145850",
    "end": "152490"
  },
  {
    "text": "cycle 1001.",
    "start": "152490",
    "end": "154220"
  },
  {
    "text": "The LD operation then proceeds down the 5\nstages of the pipelined beta.",
    "start": "154220",
    "end": "162690"
  },
  {
    "text": "Next comes the ADDC instruction.",
    "start": "162690",
    "end": "165510"
  },
  {
    "text": "Since there is no dependency between the LD\nand the ADDC instruction, the ADDC instruction",
    "start": "165510",
    "end": "171140"
  },
  {
    "text": "begins in cycle 1002 and proceeds through\nall the 5 stages of the beta pipeline as well.",
    "start": "171140",
    "end": "180060"
  },
  {
    "text": "Next comes the CMPEQ instruction.",
    "start": "180060",
    "end": "182980"
  },
  {
    "text": "When we reach the CMPEQ instruction, we are\nmet with our first data hazard caused by the",
    "start": "182980",
    "end": "188200"
  },
  {
    "text": "fact that the LD is updating R0, and the CMPEQ\nwants to read this new value of R0.",
    "start": "188200",
    "end": "195349"
  },
  {
    "text": "Recall, that a LD does not produce its value\nuntil the WB stage of the pipeline.",
    "start": "195350",
    "end": "202120"
  },
  {
    "text": "This means that even with full bypassing logic,\nthe CMPEQ instruction cannot read register",
    "start": "202120",
    "end": "208310"
  },
  {
    "text": "R0 until the LD is in the WB stage.",
    "start": "208310",
    "end": "212690"
  },
  {
    "text": "So we must initiate a stall of the pipeline\nin cycle 1004.",
    "start": "212690",
    "end": "219380"
  },
  {
    "text": "The stall can be seen in our pipeline diagram\nin cycle 1005 where the CMPEQ has remained",
    "start": "219380",
    "end": "226270"
  },
  {
    "text": "in the RF stage and we have inserted a NOP\nin place of the CMPEQ that was coming down",
    "start": "226270",
    "end": "232510"
  },
  {
    "text": "the pipe one cycle earlier.",
    "start": "232510",
    "end": "234970"
  },
  {
    "text": "The instruction that follows the CMPEQ is\nthe BNE.",
    "start": "234970",
    "end": "239590"
  },
  {
    "text": "Notice that it entered the IF stage in cycle\n1004, but it too was stalled by the CMPEQ,",
    "start": "239590",
    "end": "246690"
  },
  {
    "text": "so the BNE remains in the IF stage while the\nCMPEQ is stuck in the RF stage.",
    "start": "246690",
    "end": "255020"
  },
  {
    "text": "In cycle 1005, the CMPEQ is able to complete\nthe read of its operands by using the bypass",
    "start": "255020",
    "end": "261939"
  },
  {
    "text": "path from the WB stage to read the updated\nvalue of R0, and by using the bypass path",
    "start": "261939",
    "end": "268710"
  },
  {
    "text": "from the MEM stage to read the updated value\nof R1 produced by the ADDC instruction.",
    "start": "268710",
    "end": "277099"
  },
  {
    "text": "In cycle 1006, the CMPEQ instruction moves\non to the ALU stage and the BNE can move on",
    "start": "277099",
    "end": "285620"
  },
  {
    "text": "to the RF stage.",
    "start": "285620",
    "end": "287800"
  },
  {
    "text": "Since the CMPEQ is going to update the value\nof R2 which is the register that the BNE is",
    "start": "287800",
    "end": "293668"
  },
  {
    "text": "trying to read, we need to make use of the\nbypass path from the ALU stage to the RF stage",
    "start": "293669",
    "end": "300509"
  },
  {
    "text": "in order to provide the BNE with the result\nof the CMPEQ instruction in cycle 1006.",
    "start": "300509",
    "end": "308360"
  },
  {
    "text": "The RF stage is also the stage when Z is generated.",
    "start": "308360",
    "end": "312610"
  },
  {
    "text": "The Z signal tells the beta whether or not\na register is equal to zero.",
    "start": "312610",
    "end": "317819"
  },
  {
    "text": "This means that by the end of the RF stage\nin cycle 1006, the BNE will know whether it",
    "start": "317819",
    "end": "324270"
  },
  {
    "text": "is repeating the loop or not.",
    "start": "324270",
    "end": "326789"
  },
  {
    "text": "We now illustrate what happens to the pipeline\ndiagram if the loop is repeated.",
    "start": "326789",
    "end": "332150"
  },
  {
    "text": "In cycle 1006, the ST instruction enters the\nIF stage of the pipeline because until we",
    "start": "332150",
    "end": "338860"
  },
  {
    "text": "resolve whether a branch is taken or not,\nwe assume that we should continue fetching",
    "start": "338860",
    "end": "343990"
  },
  {
    "text": "the next instruction.",
    "start": "343990",
    "end": "346199"
  },
  {
    "text": "If the BNE determines that it should branch\nback to LOOP, then this ST instruction which",
    "start": "346199",
    "end": "351300"
  },
  {
    "text": "was just fetched must be annulled by inserting\na NOP in its place.",
    "start": "351300",
    "end": "357520"
  },
  {
    "text": "The annulment is initiated in cycle 1006 and\nshows up as a NOP in the RF stage in cycle",
    "start": "357520",
    "end": "365020"
  },
  {
    "text": "1007.",
    "start": "365020",
    "end": "367220"
  },
  {
    "text": "In cycle 1007, we also see that we now fetch\nthe first instruction of the loop which is",
    "start": "367220",
    "end": "373860"
  },
  {
    "text": "the LD instruction so that we can repeat the\nloop.",
    "start": "373860",
    "end": "380610"
  },
  {
    "text": "Here is a complete pipeline diagram showing\nrepeated execution of the loop in our sample",
    "start": "380610",
    "end": "385620"
  },
  {
    "text": "code together with the bypass paths being\nused as well as the initiation of stalls and",
    "start": "385620",
    "end": "391260"
  },
  {
    "text": "annulment of branch delay slots.",
    "start": "391260",
    "end": "394069"
  },
  {
    "text": "We are now ready to answer a few questions\nabout the execution of this loop on our beta.",
    "start": "394069",
    "end": "401840"
  },
  {
    "text": "The first question we want to consider is\nwhich of the registers R0, R1, and/or R2 were",
    "start": "401840",
    "end": "409169"
  },
  {
    "text": "read at least once directly from the register\nfile rather than through a bypass path?",
    "start": "409169",
    "end": "414370"
  },
  {
    "text": "Looking back at our completed pipeline diagram,\nwe see that the LD and ADDC instructions did",
    "start": "414370",
    "end": "420759"
  },
  {
    "text": "not get their operands through bypass paths.",
    "start": "420759",
    "end": "424270"
  },
  {
    "text": "Since both of those instructions read R1,\nthat means that register R1 was read at least",
    "start": "424270",
    "end": "429909"
  },
  {
    "text": "once directly from the register file.",
    "start": "429909",
    "end": "432849"
  },
  {
    "text": "R0 which is only read by the CMPEQ always\ncomes from a bypass path.",
    "start": "432849",
    "end": "438900"
  },
  {
    "text": "Similarly, R2, which is only read by the BNE,\nalways comes from a bypass path as well.",
    "start": "438900",
    "end": "445509"
  },
  {
    "text": "Next, we want to identify the cycle in which\nstall was set to 1 in the pipelined beta hardware.",
    "start": "445509",
    "end": "452759"
  },
  {
    "text": "This occurs in the cycle where the stall is\ninitiated which was in cycle 1004.",
    "start": "452759",
    "end": "458639"
  },
  {
    "text": "At the end of that cycle the instructions\nthat are currently in the IF and RF stage",
    "start": "458639",
    "end": "463520"
  },
  {
    "text": "are stalled by not allowing a load of a new\nvalue into the instruction registers of that",
    "start": "463520",
    "end": "469800"
  },
  {
    "text": "pipeline stage.",
    "start": "469800",
    "end": "471400"
  },
  {
    "text": "Next, we want to determine in which cycle\nwas ANNUL_IF != 0?",
    "start": "471400",
    "end": "478340"
  },
  {
    "text": "Recall that the ANNUL_STAGE control signals\nspecify when an annulment is initiated in",
    "start": "478340",
    "end": "485550"
  },
  {
    "text": "that particular stage.",
    "start": "485550",
    "end": "487819"
  },
  {
    "text": "In order to initiate an annulment, then the\ninstruction that is currently in the IF stage",
    "start": "487819",
    "end": "493419"
  },
  {
    "text": "is replaced with a NOP.",
    "start": "493419",
    "end": "495550"
  },
  {
    "text": "This occurs in the IF stage when we need to\nannul a branch delay slot.",
    "start": "495550",
    "end": "501228"
  },
  {
    "text": "In our example this occurs in cycle 1006.",
    "start": "501229",
    "end": "506020"
  },
  {
    "text": "In which cycle was ANNUL_RF != 0?",
    "start": "506020",
    "end": "510740"
  },
  {
    "text": "This question is asking when an annulment\nwas initiated in the RF stage.",
    "start": "510740",
    "end": "516589"
  },
  {
    "text": "This occurred when the CMPEQ instruction needed\nto be stalled in the RF stage.",
    "start": "516590",
    "end": "522039"
  },
  {
    "text": "In order to fill the pipeline bubbles, a NOP\nis inserted into the pipeline in place of",
    "start": "522040",
    "end": "527459"
  },
  {
    "text": "the CMPEQ instruction that was in the RF stage\nin cycle 1004.",
    "start": "527460",
    "end": "534130"
  },
  {
    "text": "The stall and thus the setting of ANNUL_RF\n!= 0 occurs in cycle 1004.",
    "start": "534130",
    "end": "543660"
  },
  {
    "text": "In which cycle was ANNUL_ALU != 0?",
    "start": "543660",
    "end": "547149"
  },
  {
    "text": "In other words, in which cycle did we initiate\nthe replacement of an instruction in the ALU",
    "start": "547150",
    "end": "552430"
  },
  {
    "text": "stage with a NOP?",
    "start": "552430",
    "end": "555180"
  },
  {
    "text": "This does not occur in our example.",
    "start": "555180",
    "end": "558440"
  },
  {
    "text": "Next, we want to consider our bypass paths.",
    "start": "558440",
    "end": "564010"
  },
  {
    "text": "In which cycle was either bypass coming from\nthe ALU stage?",
    "start": "564010",
    "end": "570790"
  },
  {
    "text": "In cycle 1006, the BNE reads the result of\nthe CMPEQ instruction from the ALU stage.",
    "start": "570790",
    "end": "581209"
  },
  {
    "text": "In which cycle was either bypass coming from\nthe MEM stage?",
    "start": "581210",
    "end": "586720"
  },
  {
    "text": "In cycle 1005, the CMPEQ reads the result\nof the ADDC instruction from the MEM stage.",
    "start": "586720",
    "end": "594720"
  },
  {
    "text": "Finally, in which cycle was either bypass\ncoming from the WB stage?",
    "start": "594720",
    "end": "601569"
  },
  {
    "text": "In cycle 1005, the CMPEQ reads the result\nof the LD instruction from the WB stage.",
    "start": "601570",
    "end": "608750"
  }
]