[
  {
    "text": "The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "80",
    "end": "6060"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation, or to\nview additional materials",
    "start": "6060",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "12690",
    "end": "17310"
  },
  {
    "text": "PROFESSOR: All right,\nlet's get started. So welcome to the next\nlecture about exploiting",
    "start": "25998",
    "end": "33090"
  },
  {
    "text": "buffer overflow. So today, what we're\ngoing to do is, we're going to finish up our\ndiscussion about baggy bounds",
    "start": "33090",
    "end": "38809"
  },
  {
    "text": "and then we're going\nto move on to a couple of other different techniques\nfor protecting its buffer",
    "start": "38810",
    "end": "44400"
  },
  {
    "text": "overflows. Then we're going to talk\nabout the paper for today, which is the blind return\noriented programming.",
    "start": "44400",
    "end": "51032"
  },
  {
    "text": "So if you were like me when\nyou first read that paper you kind of felt like you were\nwatching like a Christopher Nolan movie at the beginning.",
    "start": "51032",
    "end": "56664"
  },
  {
    "text": "It was kind of like\nmind blowing right. So what we're going\nto do is we're going to actually step through\nhow some of these gadgets work right.",
    "start": "56665",
    "end": "62090"
  },
  {
    "text": "And so hopefully\nby the end, you'll be able to understand all this\nsort of high tech chicanery that they're doing in the paper.",
    "start": "62090",
    "end": "68110"
  },
  {
    "text": "So first of all,\nlike I said, let's just close up with the\nbaggy bounds discussions.",
    "start": "68110",
    "end": "73210"
  },
  {
    "text": "Let's go through a very\nsimple example here.",
    "start": "73210",
    "end": "78479"
  },
  {
    "text": "So let's say that we're going\nto define a pointer called P.",
    "start": "78480",
    "end": "86280"
  },
  {
    "text": "And let's say that\nwe're going to give it allocation size of 44. Let's also assume that the\nslot size equals 16 bytes OK.",
    "start": "86280",
    "end": "97960"
  },
  {
    "text": "So what's going to happen when\nwe do this malloc up here? So as you know, the\nbaggy bounds system is going to pad that allocation\nout to the next power of two,",
    "start": "97960",
    "end": "106401"
  },
  {
    "text": "right. So even though we've only\nallocated 44 bytes here, we're actually going to allocate\n64 bytes for this pointer",
    "start": "106401",
    "end": "114130"
  },
  {
    "text": "up here. And so also note too, this\nis the slot size is 16.",
    "start": "114130",
    "end": "119671"
  },
  {
    "text": "How many bounds tables entries\nare we going to create? Well we're going to create\nthe allocation size, which",
    "start": "119671",
    "end": "124960"
  },
  {
    "text": "in this case 64, divided by\nthe slot size, which is 16. So in this case we'll create\nfour different bounds table",
    "start": "124960",
    "end": "132280"
  },
  {
    "text": "entries for this\nthing right here. Each one of those\nentries is going to be set to the log of\nthe allocation size, which",
    "start": "132280",
    "end": "138631"
  },
  {
    "text": "in this case is\ngoing to be 6 right. Because the allocation\nsize is 64, OK? So, so far so good.",
    "start": "138631",
    "end": "144070"
  },
  {
    "text": "Then we're going to define\nanother pointer called q",
    "start": "144070",
    "end": "151180"
  },
  {
    "text": "and we're going to set\nit equal to p plus 60.",
    "start": "151180",
    "end": "156769"
  },
  {
    "text": "So what happens when we do this? Well note that\nstrictly speaking, this access is out\nof bounds, right.",
    "start": "156770",
    "end": "163070"
  },
  {
    "text": "Because this was only\nallocated 44 bytes of memory, but of course the way\nthat baggy bounds works is that it will actually allow\naxises that are out of bounds,",
    "start": "163070",
    "end": "170300"
  },
  {
    "text": "if they stay within\nthat baggy bounds. So even though\nstrictly speaking, the programmer probably\nshouldn't have done this,",
    "start": "170300",
    "end": "175920"
  },
  {
    "text": "this is actually\ngoing to be OK, right. We're not going to raise any\nflags or anything like that.",
    "start": "175920",
    "end": "181170"
  },
  {
    "text": "Now let's say that\nthe next thing we do is we need to find another\npointer, which is going to be",
    "start": "181170",
    "end": "189430"
  },
  {
    "text": "set equal to q plus 16 right. Now this is actually going\nto cause an error, right.",
    "start": "189430",
    "end": "201290"
  },
  {
    "text": "Because now q is at an offset\nof 60 plus 16, which equals 76.",
    "start": "201290",
    "end": "211659"
  },
  {
    "text": "So this is actually 12\nbytes away from the end of that baggy bounds. OK?",
    "start": "211660",
    "end": "216980"
  },
  {
    "text": "And that's actually greater\nthan half a slot away. All right, so if you remember\nthe baggy bounds system will",
    "start": "216980",
    "end": "222380"
  },
  {
    "text": "actually throw a hard\nsynchronous error if you get beyond 1/2 a slot from\nthe edge of that baggy bounds.",
    "start": "222380",
    "end": "227630"
  },
  {
    "text": "So this will actually\ncause the program to fail. This will actually make it stop. Now let's imagine that we\ndidn't have this line of code",
    "start": "227630",
    "end": "234020"
  },
  {
    "text": "in the program, OK. So we had these two, but\nwe don't have this one. So what if we instead\nof doing this line,",
    "start": "234020",
    "end": "240290"
  },
  {
    "text": "did something that\nlooks like this. We declare another\npointer, let's call it s,",
    "start": "240290",
    "end": "246790"
  },
  {
    "text": "and we set it equal to q plus 8. Now in this case,\nthe pointer is going",
    "start": "246790",
    "end": "254580"
  },
  {
    "text": "to be at 60 plus 8, which equals\n68 bytes away from p, right.",
    "start": "254580",
    "end": "262480"
  },
  {
    "text": "So this is only four bytes\nbeyond that baggy bound. So this will not\nactually cause an error.",
    "start": "262480",
    "end": "268280"
  },
  {
    "text": "Even though it is strictly\nspeaking, out of bounds. What we will do here though,\nis set that high order bit on the pointer, right.",
    "start": "268280",
    "end": "274950"
  },
  {
    "text": "So that if anyone\nsubsequently tries to dereference this\nthing, it's going to cause a hard\nfault at that point.",
    "start": "274950",
    "end": "281770"
  },
  {
    "text": "And then let's say, the\nfinal thing that we do is we declare another\npointer t, which",
    "start": "281770",
    "end": "291250"
  },
  {
    "text": "is going to equal s minus 32.",
    "start": "291250",
    "end": "296599"
  },
  {
    "text": "So what happens here\nis that essentially we brought this pointer t, it\nis now back in bounds, right.",
    "start": "296599",
    "end": "302280"
  },
  {
    "text": "So what that means is that\neven though this guy was out of bounds, now we sort of going\nback to the original allocated",
    "start": "302280",
    "end": "309210"
  },
  {
    "text": "region, that we originally\ncreated up here. So as a result, t will not\nhave that high order bit step",
    "start": "309210",
    "end": "314946"
  },
  {
    "text": "and so you can dereference T\nand everything will be fine. So does this all make sense? This should be fairly\nstraightforward.",
    "start": "314946",
    "end": "320073"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nthe difference between r and s, how\nwould you know that r is--",
    "start": "320073",
    "end": "325920"
  },
  {
    "text": "or how does the program know\nthat r is 1/2 the [INAUDIBLE].",
    "start": "325920",
    "end": "331365"
  },
  {
    "text": "PROFESSOR: So note\nthat, like up here, when we create r you\ncan basically interpose,",
    "start": "331365",
    "end": "339307"
  },
  {
    "text": "we get an instrumented\ncode that's going to be working at all\nof these pointer operations.",
    "start": "339308",
    "end": "344570"
  },
  {
    "text": "So basically we can tell is that\nwe know where P is going to be. I'm sorry, we know\nwhere q is going to be.",
    "start": "344570",
    "end": "351276"
  },
  {
    "text": "And we know that q is\nwithin those baggy bounds.",
    "start": "351276",
    "end": "357935"
  },
  {
    "text": "And so when we do\nthis operation here, the instrumentation\nof baggy bounds adds and we're able\nto say, aha, well I",
    "start": "357935",
    "end": "363528"
  },
  {
    "text": "know where that source\nformula is coming from. And then if you look\nat this offset here, you determine it's more than a\n1/2 slot away from slot side.",
    "start": "363528",
    "end": "371273"
  },
  {
    "text": "So basically what\nyou think about is that as we're doing\nthese pointer operations, and looking and saying is how\nare you going out of bounds,",
    "start": "371273",
    "end": "376317"
  },
  {
    "text": "have you gone out of\nbounds, yes or no. At some point you're going\nto have some operation that's going to involve a pointer\nthat is either in bounds",
    "start": "376317",
    "end": "383342"
  },
  {
    "text": "within the baggy bounds and\nthen some thing over here that makes it go out of bounds. So at that moment,\nright when that happens,",
    "start": "383342",
    "end": "389366"
  },
  {
    "text": "that's how we know that\nsomething chicanerous has arisen.",
    "start": "389366",
    "end": "391260"
  },
  {
    "text": "All right so, hopefully\nthat should all make sense. And so this is very\nbriefly a review of the homework question.",
    "start": "396760",
    "end": "404311"
  },
  {
    "text": "So hopefully you can understand\nthis and our homework question should be pretty\neasy to understand. So we have a character pointer\nthe malloc had 256 bytes to it,",
    "start": "404311",
    "end": "416740"
  },
  {
    "text": "Then we declare a\ncharacter pointer q, that is equal to\nthat pointer plus 256",
    "start": "416740",
    "end": "426420"
  },
  {
    "text": "and then we essentially try\nto dereference this pointer. So what's going to happen?",
    "start": "426420",
    "end": "432669"
  },
  {
    "text": "Well note that this is an\nexact power too, right. So there's not actually any\nbagginess in the bounds, right.",
    "start": "432670",
    "end": "438790"
  },
  {
    "text": "So when we do this right here,\nthis makes q point to one pass the end of\nthose baggy bounds.",
    "start": "438790",
    "end": "446070"
  },
  {
    "text": "So just like in this\nexample up here, this line is actually fine,\nbut it will cause the high bit to be set in q, right.",
    "start": "446070",
    "end": "452216"
  },
  {
    "text": "So when you come down\nhere and reference it, then everything\nblows up and it's time to call in your\ninsurance agent.",
    "start": "452217",
    "end": "457669"
  },
  {
    "text": "So pretty straightforward? OK so, that's\nbasically two examples",
    "start": "457670",
    "end": "464390"
  },
  {
    "text": "that you can flavor for\nhow baggy bounds works. As I mentioned in\nthe last lecture,",
    "start": "464390",
    "end": "469465"
  },
  {
    "text": "you don't actually have to\ninstrument every pointer operation, if you can use static\ncode analysis to figure out",
    "start": "469465",
    "end": "475860"
  },
  {
    "text": "the particular set of\npointer operations is safe. I'll defer further\ndiscussion of some of the static\nanalysis [INAUDIBLE],",
    "start": "475860",
    "end": "481600"
  },
  {
    "text": "but suffice it to say\nthat you don't always have to have all this bit\nwise arithmetic that you",
    "start": "481600",
    "end": "488656"
  },
  {
    "text": "have in some of the cases\nthat we've examined before.",
    "start": "488657",
    "end": "492086"
  },
  {
    "text": "And so another question\nthat came up a lot in Piazza was, how does baggy bounds\nensure compatibility",
    "start": "495870",
    "end": "501230"
  },
  {
    "text": "with these preexisting,\nnon-instrumented libraries, right.",
    "start": "501230",
    "end": "506509"
  },
  {
    "text": "And so the Piazza idea behind\nhow baggy bounds does that is, that when baggy bounds\ninitializes the bounds tables,",
    "start": "506510",
    "end": "513200"
  },
  {
    "text": "they set all the entries\nto be that bound of 31. So when we read\nthe bounds table, each entry represents\n2 to the power",
    "start": "513200",
    "end": "520510"
  },
  {
    "text": "of that entry, the size of\nthat particular pointer. So by initializing\nall those bounds",
    "start": "520510",
    "end": "525739"
  },
  {
    "text": "of 31, what this allows\nus to do is automatically assume that each pointer\nfrom [INAUDIBLE] the code",
    "start": "525739",
    "end": "532670"
  },
  {
    "text": "is going to have the\nlargest bound possible, 2 raised to the 31. So let me just give you a\nvery simple example here",
    "start": "532670",
    "end": "538811"
  },
  {
    "text": "that will hopefully make\nthis a little clearer. So let's say that this\nover here is the memory",
    "start": "538812",
    "end": "545060"
  },
  {
    "text": "space that we lose for heap.",
    "start": "545060",
    "end": "549370"
  },
  {
    "text": "This is simple example,\nlet's suppose that basically what this memory space\n[INAUDIBLE] two components.",
    "start": "552220",
    "end": "558785"
  },
  {
    "text": "This is the heap, that is out\nby the unistrumented code.",
    "start": "558785",
    "end": "566430"
  },
  {
    "text": "And then let's suppose\nthat down here we have the heat that is allocated\nby the instrumented code.",
    "start": "571042",
    "end": "580563"
  },
  {
    "text": "So what's baggy\nbounds going to do? So remember, baggy bounds has\nthis notion of a slot size,",
    "start": "584892",
    "end": "591040"
  },
  {
    "text": "right. So basically the\nslot size is 16, you only have entry\nfor every sort of slot of size 16 over here.",
    "start": "591041",
    "end": "597618"
  },
  {
    "text": "So basically the bounds\ntable in this case, you can think of being\nset up into three",
    "start": "597619",
    "end": "603910"
  },
  {
    "text": "places, sorry two places. So initially all of the\nbounds table, all the entries",
    "start": "603910",
    "end": "612190"
  },
  {
    "text": "are initialized to 2 to the\n30-- or sorry, to the 31. But then eventually\nas the instrument code",
    "start": "612190",
    "end": "619600"
  },
  {
    "text": "runs it's actually going\nto use the baggy bounds algorithm to set these\nvalues for whatever",
    "start": "619600",
    "end": "628959"
  },
  {
    "text": "should be appropriate for that\nparticular [INAUDIBLE], right. So what ends happening\nis that if you",
    "start": "628960",
    "end": "635252"
  },
  {
    "text": "did-- if instrumented code gets\na pointer that comes from here, then those baggy bounds\nwith each particular pointer",
    "start": "635252",
    "end": "642009"
  },
  {
    "text": "will always be set to the\nlargest possible value, 231. 2 to the 31, right. Which means that\nit's going to be",
    "start": "642010",
    "end": "647320"
  },
  {
    "text": "impossible for baggy\nbounds, entry of the code, to think that you've done\nan out of bound operation with that pointer that's\ncoming from this uninstrumented",
    "start": "647320",
    "end": "655130"
  },
  {
    "text": "library. So does that make sense? So the idea is that\nin instrumented code",
    "start": "655130",
    "end": "660930"
  },
  {
    "text": "we're always going to be\ndoing these comparisons with the pointers, but if\nwe always set the bounds",
    "start": "660930",
    "end": "666720"
  },
  {
    "text": "entries for uninstrumented\npointer code 2 to the 31, you can never have\na dereference error.",
    "start": "666720",
    "end": "673000"
  },
  {
    "text": "OK so that's basically how we\nhave this nice interoperability between the entry of the\nbaggy bounds code in between",
    "start": "673000",
    "end": "680542"
  },
  {
    "text": "a noninstrumented off the\nshelf legacy library's. So putting it all together,\nwhat does this all mean?",
    "start": "680542",
    "end": "687010"
  },
  {
    "text": "So, we have this\nsystem here which is nice because it doesn't make\nthe uninstrumented libraries blow up, but one problem\nis that we can't detect out",
    "start": "687010",
    "end": "694828"
  },
  {
    "text": "of bounds pointers\nthat were generated in the uninstrumented\ncode, right.",
    "start": "694828",
    "end": "699830"
  },
  {
    "text": "Because we're never going to\nset that high bit for example, if that [INAUDIBLE]\npointer gets too big, or gets too small or\nanything like that.",
    "start": "699830",
    "end": "706589"
  },
  {
    "text": "So we actually can't\nprovide memory safety for operations that take\nplace in uninstrumented code.",
    "start": "706590",
    "end": "711730"
  },
  {
    "text": "You also can't detect when\nwe pass an out of bounds pointer from instrumented\ncode to uninstrumented code.",
    "start": "711730",
    "end": "718300"
  },
  {
    "text": "Something insane\ncould happen, right. Because remember if you\nhad this out of bounds pulled it from the\ninstrumented code",
    "start": "718300",
    "end": "723370"
  },
  {
    "text": "it has that high\nbit set to 1, right. So it looks like\nit's super ginormous. Now we know if we just kept\nthat code in instrumented code,",
    "start": "723370",
    "end": "729924"
  },
  {
    "text": "we might clear that\nflag at some point if it comes back in bounds. But if we just pass\nthis ginormous address",
    "start": "729924",
    "end": "735391"
  },
  {
    "text": "to uninstrumented\ncode, then who knows, it may try to dereference it,\nit may do something crazy. It may even bring that\npointer back in bounds,",
    "start": "735391",
    "end": "742297"
  },
  {
    "text": "but we would never\nhave an opportunity to clear that high bit, right. So you can come up--\nyou still may come up",
    "start": "742297",
    "end": "747854"
  },
  {
    "text": "with some inter-op\nissues there, even if we use this scheme over here.",
    "start": "747854",
    "end": "754190"
  },
  {
    "text": "OK, so that's essentially how\nbaggy bounds works on a 32-- you got a question?",
    "start": "754190",
    "end": "759702"
  },
  {
    "text": "AUDIENCE: Yeah, so if you\nhave a instrumented coding meets like allocated\nmemory, is it using the same malloc that the\nattributing code is using, or?",
    "start": "759702",
    "end": "766460"
  },
  {
    "text": "PROFESSOR: Yeah so\nit's a bit subtle. So like in this case\nhere, it's like very stark what's going on, because there's\njust two regions, one of which",
    "start": "766460",
    "end": "773300"
  },
  {
    "text": "is used by each set of things. So it actually depends on\nthe if they use [INAUDIBLE] and stuff like that.",
    "start": "773300",
    "end": "778617"
  },
  {
    "text": "You can also imagine that like\nin C++ [INAUDIBLE] for example, you can define your\nown allocator, right.",
    "start": "778617",
    "end": "783760"
  },
  {
    "text": "So it kind of\ndepends [INAUDIBLE]. AUDIENCE: [INAUDIBLE]\ninput the same,",
    "start": "783760",
    "end": "790732"
  },
  {
    "text": "how does the allocator\nknow whether or not to set 31 or [INAUDIBLE]. PROFESSOR: Yeah so at the\nlower level, typically the way",
    "start": "790732",
    "end": "797960"
  },
  {
    "text": "that these allocation\nalgorithms work, is that you call unknown\nsystem [INAUDIBLE] or something",
    "start": "797960",
    "end": "803139"
  },
  {
    "text": "like that, sort of\nmove a pointer up. So you can imagine if you have\nmultiple allocators, all trying to allocate memory,\nthey each have",
    "start": "803139",
    "end": "809290"
  },
  {
    "text": "their own chunk of memory\nthey reserve for themselves basically, right. So in real life it may be\nmore fragmented than this,",
    "start": "809290",
    "end": "816251"
  },
  {
    "text": "that's essentially on a\nhigh level, how it works. OK so this was a baggy\nbounds on a 32-bit system.",
    "start": "816251",
    "end": "823130"
  },
  {
    "text": "So as you all know 64-bit\nsystems are the bees knees these days, so\nhow does baggy bounds work on those systems?",
    "start": "823130",
    "end": "830276"
  },
  {
    "text": "Well, in those systems\nyou can actually get rid of the bounds table,\nbecause we can actually store some information about\nthe bounds, from the pointer",
    "start": "830276",
    "end": "838871"
  },
  {
    "text": "itself. So imagine we're going to\nlook at a regular pointer",
    "start": "838871",
    "end": "846514"
  },
  {
    "text": "in a baggy bounds system. So we can use it, like this.",
    "start": "846514",
    "end": "851638"
  },
  {
    "text": "So we can-- if the\npointer's in bounds, we can basically just set\nthe first 21 bits to 0.",
    "start": "855110",
    "end": "861690"
  },
  {
    "text": "We can put the size\nin these 5 bits here. And once again this is\nrepresenting the log base 2",
    "start": "861690",
    "end": "867610"
  },
  {
    "text": "at the size here. And then we have here,\nin the remaining 38 bits, just the regular address bits.",
    "start": "867610",
    "end": "873662"
  },
  {
    "text": "Now the reason why\nthis doesn't massively curtail the address size\nof the program you use, is that a lot of\nthese high order bits,",
    "start": "873662",
    "end": "879959"
  },
  {
    "text": "the operating system\nand-or the hardware, doesn't let a application use,\nfor various reasons, right.",
    "start": "879960",
    "end": "885317"
  },
  {
    "text": "So as it turns out,\nwe're not dramatically shrinking the amount of\n[INAUDIBLE] application you use in the system.",
    "start": "885317",
    "end": "891062"
  },
  {
    "text": "This is what a regular\npointer looks like. Now what happens\nwhen we only have one of these out\nof bounds pointers? Well, in a 32-bit system\nall we can do basically",
    "start": "891062",
    "end": "897290"
  },
  {
    "text": "is just set that high\norder bit and you just hope that thing never got\nbeyond a 1/2 a slot away",
    "start": "897290",
    "end": "902990"
  },
  {
    "text": "from it's base. But now that we have all this\nextra address space here,",
    "start": "902990",
    "end": "908053"
  },
  {
    "text": "you can actually put the out\nof bounds offset directly",
    "start": "908053",
    "end": "913759"
  },
  {
    "text": "in this pointer. So we can do\nsomething like this.",
    "start": "913760",
    "end": "920075"
  },
  {
    "text": "So we can have 13 bits\nhere for the offset, right, the out of bound offset.",
    "start": "925230",
    "end": "930459"
  },
  {
    "text": "How far away is this out of\nbounds pointer, from the place where it should be? And then once again you\ncan put the actual size",
    "start": "930460",
    "end": "939279"
  },
  {
    "text": "of the referred object here. This will be 0 once again. And this will be the\nreal address base here.",
    "start": "939280",
    "end": "948740"
  },
  {
    "text": "And so this may be\nreminiscent to you of some type of fact\npointer representation, but there's a\ncouple of advantages",
    "start": "948740",
    "end": "955190"
  },
  {
    "text": "here, now that we're\nmoving in the 64-bit world. So first of all, you'll note\nthat these tag pointers,",
    "start": "955190",
    "end": "960870"
  },
  {
    "text": "these are the regular size\nof a regular pointer, right. Pointer's are still just 64-bits\nwide in both of these setups.",
    "start": "960870",
    "end": "967860"
  },
  {
    "text": "So that's nice because\nthat means for example, that means and rights to\nthat pointer are time.",
    "start": "967860",
    "end": "973279"
  },
  {
    "text": "Unlike in traditional\nfat finger world, where you actually have\nto use multiple words represent that fat pointer. So that's nice.",
    "start": "973280",
    "end": "979125"
  },
  {
    "text": "And also note that we can\ntrivially ask these things, uninstrumented\ncode, because they",
    "start": "979125",
    "end": "984300"
  },
  {
    "text": "work and are the same\nsize as regular pointers. We can put these things\nin structs for example, and the size of those\nstructs won't change.",
    "start": "984300",
    "end": "992080"
  },
  {
    "text": "So this is very nice if we\ncan work in that 64-bit world. So does that all make sense?",
    "start": "992080",
    "end": "999165"
  },
  {
    "text": "AUDIENCE: So why are there\neight 0-bits [INAUDIBLE] pointer there? Where like the 5 size\nbits previously weren't.",
    "start": "999166",
    "end": "1007550"
  },
  {
    "text": "PROFESSOR: So you're\ntalking about down here? AUDIENCE: Yeah,\nis there a reason why we can't just\nstore a [INAUDIBLE]",
    "start": "1007550",
    "end": "1013320"
  },
  {
    "text": "if we're like six\n0-bits there and had more bits for the offset,\nlike why is the number 8? PROFESSOR: So I think\nso in some cases",
    "start": "1013320",
    "end": "1020475"
  },
  {
    "text": "there are certain line issues\nthat we have to work with. The [INAUDIBLE] issue is to deal\nwith if the bits are higher.",
    "start": "1020475",
    "end": "1025824"
  },
  {
    "text": "I don't think, in\nprinciple, there's any reason why you\ncouldn't read some of these things [INAUDIBLE]. Well there may be\nsome hard versions",
    "start": "1025825",
    "end": "1031589"
  },
  {
    "text": "that I'm not thinking\nof right now, but [INAUDIBLE] some of\nthese would have to 0 or otherwise the hardware's\ngoing to cause a problem.",
    "start": "1031589",
    "end": "1037930"
  },
  {
    "text": "Any other questions? OK so, next thing\nare you wondering",
    "start": "1041079",
    "end": "1046380"
  },
  {
    "text": "is, can you still\nlaunch a buffer overflows in the\nbaggy bounds system, obviously because I gave\nyou another paper to read,",
    "start": "1046380",
    "end": "1052480"
  },
  {
    "text": "so clearly this thing, this\ndoesn't solve all the problems, right? So one problem\nyou might run into is that if you have\nuninstrumented code once again,",
    "start": "1052480",
    "end": "1058735"
  },
  {
    "text": "we can't detect any problems\nin uninstrumented code. You could also encounter\nmemory vulnerabilities",
    "start": "1058735",
    "end": "1064550"
  },
  {
    "text": "that come about from the dynamic\nmemory allocation system. So if you can remember\nin the lecture we looked at this weird\nfree malloc weird pointer",
    "start": "1064550",
    "end": "1072990"
  },
  {
    "text": "thing that took place. Baggy bounds won't\nnecessarily prevent you from some of that stuff. We also discussed\nlast lecture, where",
    "start": "1072990",
    "end": "1080130"
  },
  {
    "text": "the fact that code\npointers do not have bounds associated with them, right. So now you have struct that\nhas a buffer at the bottom,",
    "start": "1080130",
    "end": "1087240"
  },
  {
    "text": "it has a function\npointer up top, if you have a buffer overflow\nin to that function pointer, right.",
    "start": "1087240",
    "end": "1092550"
  },
  {
    "text": "Let's say that buffer\noverflow is still within the baggy bounds. So you've overridden\nthat function pointer.",
    "start": "1092550",
    "end": "1097910"
  },
  {
    "text": "We would try to execute\nthat function pointer, it could be pointed\nat something for, attack a control\npiece of memory.",
    "start": "1097910",
    "end": "1103840"
  },
  {
    "text": "OK, and bounds won't\nhelp with that, because there's no bounds\nassociate with function pointers.",
    "start": "1103840",
    "end": "1107313"
  },
  {
    "text": "And so in general, what are\nthe cost's of baggy bounds?",
    "start": "1110076",
    "end": "1116562"
  },
  {
    "text": "So there are essentially four. So the first cost\nis space, right.",
    "start": "1116562",
    "end": "1123120"
  },
  {
    "text": "So if you're using\na fat pointer, obviously you've got to\nmake pointers bigger. But if you're using the baggy\nbounds system that we just",
    "start": "1123120",
    "end": "1129821"
  },
  {
    "text": "discussed, you've got to\nstore the bounds table, right. And so the bounds table\nhas that slot size",
    "start": "1129821",
    "end": "1135600"
  },
  {
    "text": "which allows you to control\nhow big that bounds table is, but still you may end up using\n[INAUDIBLE] memory for that.",
    "start": "1135600",
    "end": "1142140"
  },
  {
    "text": "You've also got the CPU overhead\nof doing all of the pointer",
    "start": "1142140",
    "end": "1148370"
  },
  {
    "text": "instrumentation, right. So for every, or close to every\npointer thing that you do,",
    "start": "1148370",
    "end": "1153420"
  },
  {
    "text": "you got to check these bounds\nusing those shift operations and things like that. So that's going to\nslow your program down.",
    "start": "1153420",
    "end": "1161140"
  },
  {
    "text": "There's also this problem\nwith false alarms, right.",
    "start": "1161140",
    "end": "1166890"
  },
  {
    "text": "So as we discussed,\nit may be the case that a program generates\nout of bound pointers but never tries to\ndereference it, right.",
    "start": "1166890",
    "end": "1173360"
  },
  {
    "text": "Strictly speaking\nthat's not an issue. The baggy bounds will\nflag the creation of those out of bounds\npointers, if they",
    "start": "1173360",
    "end": "1179250"
  },
  {
    "text": "get beyond a 1/2 a slot size,\nat least in the 32-bit solution, right. And so what you'll see with\na lot of security tools,",
    "start": "1179250",
    "end": "1185460"
  },
  {
    "text": "is that false alarms really\nreduce the likelihood that people are going to\nuse your tools, right. Because in practice\nwe would all hope",
    "start": "1185460",
    "end": "1192330"
  },
  {
    "text": "that we care about\nsecurity, but actually what do people care about? They want to be able to upload\ntheir silly Facebook photos",
    "start": "1192330",
    "end": "1197720"
  },
  {
    "text": "and life things,\nand they want to be able to make things go\nfast and stuff like that. So you really want\nyour security tools",
    "start": "1197720",
    "end": "1203160"
  },
  {
    "text": "to probably have less\ncoverage of finding bugs, but actually have\n0 false alarms.",
    "start": "1203160",
    "end": "1209520"
  },
  {
    "text": "As opposed to catching all types\nof security vulnerabilities, but then maybe having\nsome false alarms that are going to irritate\ndevelopers, or irritate users.",
    "start": "1209520",
    "end": "1216790"
  },
  {
    "text": "And the other costs that you\nhave for this is finally, is that you need\ncompiler support, right.",
    "start": "1216790",
    "end": "1225770"
  },
  {
    "text": "Which can actually end\nup being nontrivial, because you have\nto go in there, you have to add all the\ninstrumentation, crawl the pointer checks,\nand so on ans so forth.",
    "start": "1225770",
    "end": "1232610"
  },
  {
    "text": "So those are basically the\ncost of these bounds checking approaches. So that concludes the\ndiscussion of baggy bounds.",
    "start": "1232610",
    "end": "1242120"
  },
  {
    "text": "And so now we can actually think\nabout a two other mitigation strategies for buffer overflows. They're actually much simpler\nto explain and understand.",
    "start": "1242120",
    "end": "1249600"
  },
  {
    "text": "So one of these approaches is\ncalled a non-executable memory.",
    "start": "1249600",
    "end": "1255090"
  },
  {
    "text": "And the basic idea is\nthat the paging hardware is going to specify\n3-bits for each page",
    "start": "1260570",
    "end": "1268830"
  },
  {
    "text": "that you have in memory, read,\nwrite and execute, right. Can the program read\nthat memory, write to it,",
    "start": "1268830",
    "end": "1273980"
  },
  {
    "text": "execute it. The first 2-bits\nare old, they've been around for a while,\nthat last bit is actually a fairly new construction.",
    "start": "1273980",
    "end": "1279763"
  },
  {
    "text": "And so the idea is\nthat you can actually make the stack\nnon-executable, right.",
    "start": "1279764",
    "end": "1284790"
  },
  {
    "text": "So if you make the\nstack non-executable that means that the\nadversary can't run code just by pointing-- by\ncreating that shell code",
    "start": "1284790",
    "end": "1291440"
  },
  {
    "text": "and then sort of jumping to\nsomeplace in that buffer. And so what a lot of systems\ndo, is they actually specify",
    "start": "1291440",
    "end": "1299470"
  },
  {
    "text": "a policy like this. So right exclusive or x,\nwhich means that if you have",
    "start": "1299470",
    "end": "1306690"
  },
  {
    "text": "a particular page, you\ncan either write to it, or you can treat it\nas executable code,",
    "start": "1306690",
    "end": "1312070"
  },
  {
    "text": "but you cannot do both. OK and so that once\nagain, is going to prevent the\nattacker from just putting executable\ncode in the stack",
    "start": "1312070",
    "end": "1318250"
  },
  {
    "text": "and then going straight to it. So this is-- should be pretty\nstraightforward, right. So we've removed, at the\nhardware level, this attack",
    "start": "1318250",
    "end": "1326850"
  },
  {
    "text": "vector of the attacker putting\nexecutable code in the stack. So what's nice about this? Well potentially this\nworks without any changes",
    "start": "1326850",
    "end": "1334669"
  },
  {
    "text": "to the application, right. This is all taken place\nat the hardware level and at the OS level,\nwith the OS just",
    "start": "1334670",
    "end": "1340660"
  },
  {
    "text": "making sure the pages are\nprotected with these bits, OK. So that's very,\nvery nuts, right. Because you don;t have to worry\nabout this compiler support",
    "start": "1340660",
    "end": "1347183"
  },
  {
    "text": "issue we had over here. The other nice thing\nis that, as I mentioned in the last lecture,\nthe hardware's",
    "start": "1347183",
    "end": "1352210"
  },
  {
    "text": "always watching you, even\nthough the OS is not, right. So these bits being\nsaid over here,",
    "start": "1352210",
    "end": "1357519"
  },
  {
    "text": "you know they're\nlooked at and verified for correctness at\nevery memory reference that you make by the code.",
    "start": "1357520",
    "end": "1363850"
  },
  {
    "text": "That's a very nice\naspect of this too. Now one disadvantage\nof this system",
    "start": "1363850",
    "end": "1369460"
  },
  {
    "text": "though, is that it makes it\nharder for an application to dynamically generate code,\nin benign or benevolent cases.",
    "start": "1369460",
    "end": "1376990"
  },
  {
    "text": "And the best example of\nthat is, the just-in-time compilers that we discussed\nfrom last lecture, right.",
    "start": "1376990",
    "end": "1382480"
  },
  {
    "text": "So how is it that\nyou can go to a web page and your JavaScript\ncode executes fast. It downloads that\nJavaScript source,",
    "start": "1382480",
    "end": "1387650"
  },
  {
    "text": "it initially probably\nstarts just interpreting it, but then at some\npoint it's going to find some hot\npath, some hot loop",
    "start": "1387650",
    "end": "1392998"
  },
  {
    "text": "and then it's going to\ndynamically generate x86 machine code and execute\nthat directly, right. But to get that to work you have\nto be able to dynamically write",
    "start": "1392999",
    "end": "1400550"
  },
  {
    "text": "code to a page. So there's some ways you can\nget around this for example,",
    "start": "1400550",
    "end": "1405990"
  },
  {
    "text": "you could imagine that the\njust-in-time compiler initially sets the write bit and then\nit removes the write bit,",
    "start": "1405990",
    "end": "1411580"
  },
  {
    "text": "then it sets the execute bits. There are some ways that\nyou can get around that, but it can be a little\nbit tricky sometimes.",
    "start": "1411580",
    "end": "1416603"
  },
  {
    "text": "On a higher level, that's how\nnon-executable memory works, pretty easy to understand. AUDIENCE: What is the\ndefinition of like executable",
    "start": "1416603",
    "end": "1424158"
  },
  {
    "text": "instructions? So if you change the\nattenuator [INAUDIBLE] it's not considered a\nexecutable instruction. PROFESSOR: Well basically no.",
    "start": "1424158",
    "end": "1429410"
  },
  {
    "text": "Can you set like the instruction\npointer register to that value. In other words, can you-- if you\nhave a bunch of memory pages,",
    "start": "1429410",
    "end": "1436240"
  },
  {
    "text": "can you actually set EIP\nthere and actually start executing code from that page. AUDIENCE: Ah.",
    "start": "1436240",
    "end": "1440520"
  },
  {
    "text": "PROFESSOR: OK, so that\nis nonexecutable memory. And so another\ntechnique you might",
    "start": "1443520",
    "end": "1449710"
  },
  {
    "text": "imagine for protecting\nagainst a buffer overflows is using a randomized\naddresses or address spaces.",
    "start": "1449710",
    "end": "1459845"
  },
  {
    "text": "And so the observation\nhere is, that a lot of the attacks that\nwe've discussed so far",
    "start": "1466410",
    "end": "1475080"
  },
  {
    "text": "use hard coded addresses, right. And so if you think about\na lot of the attacks",
    "start": "1475080",
    "end": "1482140"
  },
  {
    "text": "you've been working on in\nyour lab, how does that work? You open up the program\nin GDB, you find out the location of some things,\nyou may create some shell code",
    "start": "1482140",
    "end": "1489840"
  },
  {
    "text": "that actually has some hard\ncoded addresses in there, right. So the idea behind the\nrandomized address base",
    "start": "1489840",
    "end": "1495389"
  },
  {
    "text": "is simple. Basically you want to make\nit difficult for the attacker",
    "start": "1495390",
    "end": "1503160"
  },
  {
    "text": "to guess addresses. So there's a couple\ndifferent ways",
    "start": "1503160",
    "end": "1509500"
  },
  {
    "text": "you could think about\ndoing this, right. So one idea is that\nyou can imagine having stack randomization, right.",
    "start": "1509500",
    "end": "1515260"
  },
  {
    "text": "So imagine that\nfrom here to here, this is the entire virtual\nmemory space of the program,",
    "start": "1515260",
    "end": "1520370"
  },
  {
    "text": "right. As we described this\nstuff to you so far, basically the\nstack always starts with this particular place\nup here, always goes down,",
    "start": "1520370",
    "end": "1527269"
  },
  {
    "text": "right, and the program codes\ndown here and the heap always goes up here. And all these seg-- all of these\nsegments, the stack, the heap,",
    "start": "1527270",
    "end": "1535030"
  },
  {
    "text": "and the program code, they all\nstart at a well known location. So imagine for example, like\nif my lecture notes here",
    "start": "1535030",
    "end": "1540950"
  },
  {
    "text": "are the stack. You can imagine instead of\nthe stack always starting here at this known location,\nmaybe you start it here,",
    "start": "1540950",
    "end": "1546779"
  },
  {
    "text": "maybe you start it here. Somewhere else like that, right. Similarly you can imagine that\nmaybe the program code which",
    "start": "1546780",
    "end": "1551900"
  },
  {
    "text": "used to always start\ndown here, maybe we start it up here, or down here,\nor something like that, right. So the idea now is that\nif you, the attacker,",
    "start": "1551900",
    "end": "1558490"
  },
  {
    "text": "control one of these\nbinary's, you can look in GDB and figure out where\nall these offsets are, but they're not actually\ngoing to help you figure out",
    "start": "1558490",
    "end": "1565075"
  },
  {
    "text": "where those offsets are\nin the real code that's running on the server, right. So that's the basic idea behind\nthese randomized address spaces",
    "start": "1565075",
    "end": "1572320"
  },
  {
    "text": "there. And so this takes\nadvantage of the fact that a lot of the code\nthat you generate, doesn't have to be loaded into\na specific place in memory,",
    "start": "1572320",
    "end": "1579740"
  },
  {
    "text": "right. So unless you're writing like\na device driver, or something like, that maybe is interacting\nwith some hardware that",
    "start": "1579740",
    "end": "1585350"
  },
  {
    "text": "requires this\nparticular address to be belong in this particular buffer\nso it can copy information in.",
    "start": "1585350",
    "end": "1592370"
  },
  {
    "text": "If you're not doing stuff\nlike that then typically your codes going\nto be relocatable. So this approach will work very\nnicely with that kind of stuff.",
    "start": "1592370",
    "end": "1600000"
  },
  {
    "text": "So once again the question\nis, can you exploit this? Obviously the\nanswer is still yes.",
    "start": "1600000",
    "end": "1605196"
  },
  {
    "text": "There's a couple different\nways you can do it as we'll discuss later today\nin the [INAUDIBLE] paper,",
    "start": "1605196",
    "end": "1610460"
  },
  {
    "text": "the attacker can actually\nextract randomness, right. And so in general that's\nhow you defeat all",
    "start": "1610460",
    "end": "1615570"
  },
  {
    "text": "these randomized approaches. You make them unrandom,\nby either finding out the random seed that\nthe attacker was doing,",
    "start": "1615570",
    "end": "1620690"
  },
  {
    "text": "or by somehow leveraging the\nfact that the attacker leaks information about the randomized\nlocations of these things.",
    "start": "1620690",
    "end": "1627040"
  },
  {
    "text": "And another thing\nthat's interesting is that for a lot of the\nattacks we've discussed so far, we've basically been using these\nsort of hard coded addresses,",
    "start": "1630520",
    "end": "1638060"
  },
  {
    "text": "but note that the attacker\nmay not necessarily care about jumping to\na specific address.",
    "start": "1638060",
    "end": "1643740"
  },
  {
    "text": "Or there's this attack\ncalled a heap attack, which is actually pretty hilarious if\nyou're a bad person, I suppose.",
    "start": "1643740",
    "end": "1649260"
  },
  {
    "text": "So the way that this\nheap attack works is, that the\nattacker essentially just starts dynamically\nallocating a ton of shell code",
    "start": "1649260",
    "end": "1657280"
  },
  {
    "text": "and just stuffs it\nrandomly in memory, right. This is particularly\neffective if you're using like a dynamically high\nlevel language like JavaScript",
    "start": "1657280",
    "end": "1664870"
  },
  {
    "text": "let's say. So the tag reader is\nsitting in a tight loop and just generate a bunch of\nshell code strings, right. And you just fill the heap\nwith all these shell code",
    "start": "1664870",
    "end": "1671750"
  },
  {
    "text": "strings, right. Now the attacker maybe cannot\nfigure out where the exact location is of each of\nthe shell code strings,",
    "start": "1671750",
    "end": "1678340"
  },
  {
    "text": "but if you've allocated 10s of\nmegabytes of shell code strings and then just do a\nrandom jump, right.",
    "start": "1678340",
    "end": "1684159"
  },
  {
    "text": "If you could somehow control\none of these ret pointers, then hey, maybe you'll\nland in shell code, right.",
    "start": "1684160",
    "end": "1689914"
  },
  {
    "text": "And one trick you\ncan actually use is this thing called NOP sleds,\nwhich is also pretty hilarious. So imagine that if you have\na shell code string, then",
    "start": "1689914",
    "end": "1698590"
  },
  {
    "text": "it may not work out if\nyou jump to a random place in that shell code\nstring, because it may not set the attack up correctly.",
    "start": "1698590",
    "end": "1704330"
  },
  {
    "text": "But maybe this stuff that\nyour spewing to the heap, is basically just a ton of NOPs\nand then at the very, very end",
    "start": "1704330",
    "end": "1710876"
  },
  {
    "text": "you have the shell code, right. This is actually\nquite clever right, because this means that now\nyou can actually goof up",
    "start": "1710876",
    "end": "1716690"
  },
  {
    "text": "the exact place where you jump. If you jump into\nanother one of these NOP things just go boom, boom, boom,\nboom, boom, boom, boom, then",
    "start": "1716690",
    "end": "1722431"
  },
  {
    "text": "you hit the shell code, right. So it's like these are the\npeople that you probably see on the team. They're inventing these\ntypes of things, right.",
    "start": "1722431",
    "end": "1729048"
  },
  {
    "text": "This is a problem. So that's another way\nto get around some of this randomization\nstuff, just by making your codes\nrandomization resilient,",
    "start": "1729048",
    "end": "1735850"
  },
  {
    "text": "if that makes sense. OK so that's basically\na discussion of some",
    "start": "1735850",
    "end": "1741493"
  },
  {
    "text": "of the types of\nrandomness you can use. There's also some wacky ideas\nthat people have had too. So now you know\nthat when you want to make a system\ncall for example,",
    "start": "1741493",
    "end": "1748020"
  },
  {
    "text": "you use this syscall\nlibc function and you basically pass\nany unique number that",
    "start": "1748020",
    "end": "1753157"
  },
  {
    "text": "represents the system call\nthat you want to make, right. So maybe four is seven and maybe\nsleep is eight, or something",
    "start": "1753157",
    "end": "1759150"
  },
  {
    "text": "like that, right. So what that means is that\nif the attacker can somehow figure out the address of\nthat syscall instruction",
    "start": "1759150",
    "end": "1766730"
  },
  {
    "text": "and jump to it somehow, he or\nshe can actually just supply the system call number that they\nwant to invoke directly, right.",
    "start": "1766730",
    "end": "1772972"
  },
  {
    "text": "So you could imagine that\neach time the program runs, you actually create a dynamic\nassignment of syscall numbers",
    "start": "1772972",
    "end": "1779290"
  },
  {
    "text": "to actual syscalls, right. To make it harder for the\nattacker to get stuff. There's even some very\navant garde proposals",
    "start": "1779290",
    "end": "1785250"
  },
  {
    "text": "to change the hardware such\nthat the hardware actually contains an xor key, that\nis used to dynamically xor",
    "start": "1785250",
    "end": "1791870"
  },
  {
    "text": "instructions, right. Imagine every time you\ncompile the program, all of the instruction codes that's\nthe xor of some key, right.",
    "start": "1791870",
    "end": "1798570"
  },
  {
    "text": "That key is put into\nthat hardware register when you initially\nload the program and then whenever you\nexecute an instruction,",
    "start": "1798570",
    "end": "1804450"
  },
  {
    "text": "the hardware\nautomatically xor's it, before you continue executing\nthat instruction, right. So what's nice about\nthat is, that now even",
    "start": "1804450",
    "end": "1810771"
  },
  {
    "text": "if the attacker can\ngenerate the shell code, the attacker doesn't\nknow that key, right. So it's very difficult\nfor the attacker",
    "start": "1810771",
    "end": "1816074"
  },
  {
    "text": "to figure out what exactly\nto put into memory. AUDIENCE: But if\nhe can get the code and he also instructions\nhe can xor it back",
    "start": "1816074",
    "end": "1823219"
  },
  {
    "text": "to the instruction [INAUDIBLE]. PROFESSOR;Oh yeah. This is always a\ncanonical problem, right. So it's like what if\nsomeone does this?",
    "start": "1823219",
    "end": "1828360"
  },
  {
    "text": "So that's exactly right. So this is somewhat similar to\nwhat happens in the BROP attack where, essentially we've sort of\nrandomized where locations are,",
    "start": "1828360",
    "end": "1835289"
  },
  {
    "text": "but the attacker can\ndo probes, right. And figure out what's going on. So you can imagine too that for\nexample, if the attacker knows",
    "start": "1835290",
    "end": "1841610"
  },
  {
    "text": "some sub-sequence of\ncode that he's expects to be in the binary,\nyou could imagine just sort of trying to xor the\nbinary with that known code,",
    "start": "1841610",
    "end": "1849047"
  },
  {
    "text": "trying to extract the key. And there's a lot\nevil in the world, so you're exactly\ncorrect about that. OK so that's essentially\nthe discussion",
    "start": "1849047",
    "end": "1855720"
  },
  {
    "text": "of all the randomization attacks\nthat I want to discuss today. So one thing to\ntalk about before we",
    "start": "1855720",
    "end": "1862150"
  },
  {
    "text": "get to some of the return\noriented programming stuff, is you might wonder which\nones of these defenses are actually used in practice.",
    "start": "1862150",
    "end": "1868440"
  },
  {
    "text": "And so as it turns out,\nboth GCC and Visual Studio, they both enable stack\ncanaries by default, right.",
    "start": "1868440",
    "end": "1875640"
  },
  {
    "text": "So that's very popular, that's\na very well known community. If you look Linux\nand Windows they",
    "start": "1875640",
    "end": "1881820"
  },
  {
    "text": "can also do things like\nnon-executable memory. They can also do things like\nrandomize the address space, so that's also [INAUDIBLE].",
    "start": "1881820",
    "end": "1887950"
  },
  {
    "text": "The baggy bounds stuff\nhowever, is not as popular. And that's because of\nsome of these costs that we talked about\nover here, in terms",
    "start": "1887950",
    "end": "1893621"
  },
  {
    "text": "of memory overhead, CPU, the\nfalse alarms, and so on ans so forth. So that's basically a survey\nof the state of the art,",
    "start": "1893621",
    "end": "1901810"
  },
  {
    "text": "in trying to prevent\nthese buffer overflows. So now we're going to talk about\nthis return oriented programing",
    "start": "1901810",
    "end": "1910310"
  },
  {
    "text": "stuff. So what I'm described to\nyou so far today in terms",
    "start": "1910311",
    "end": "1916050"
  },
  {
    "text": "of the address space\nrandomization and the data execution prevention,\nthat's the-- the",
    "start": "1916050",
    "end": "1921264"
  },
  {
    "text": "read, write and execute\nthat I just described. Those things are actually\nvery, very powerful, right. Because the randomization\nprevents the attacker",
    "start": "1921264",
    "end": "1927620"
  },
  {
    "text": "from actually understanding\nwhere our hard coded addresses are. And the data\nexecution prevention says, even if you can put\nshell code into the stack,",
    "start": "1927620",
    "end": "1935198"
  },
  {
    "text": "then the attacker\ncan't just jump to it and execute it, right. So at its space,\nthat seems like, man you've really\nmade a lot of progress",
    "start": "1935198",
    "end": "1941226"
  },
  {
    "text": "for stopping these attackers,\nbut of course there are these hackers out there who\nspend all their time thinking",
    "start": "1941226",
    "end": "1948010"
  },
  {
    "text": "about how to ruin our lives. So what's the insight behind\nreturn oriented programming?",
    "start": "1948010",
    "end": "1953030"
  },
  {
    "text": "The insight is that, what\nif instead of the attacker being able to generate just\nnew code at attack time, what",
    "start": "1953030",
    "end": "1959659"
  },
  {
    "text": "if the attacker could\nstring together preexisting pieces of code and then string\nthem together in deviant ways,",
    "start": "1959660",
    "end": "1967050"
  },
  {
    "text": "right? And we know that the program\ncontains a ton of code already, right. So hopefully, or unhopefully,\ndepending on which side of this",
    "start": "1967050",
    "end": "1973508"
  },
  {
    "text": "you're on. If you can find enough\ninteresting code snippets, you can string them\ntogether to basically form",
    "start": "1973508",
    "end": "1979800"
  },
  {
    "text": "like this Turing\ncomplete language, where the attacker can essentially\ndo whatever the attacker wants to do. So that's the insight behind\nreturn oriented programming.",
    "start": "1979800",
    "end": "1987240"
  },
  {
    "text": "So understand how this works. Let's look at a very simple\nexample that will initially start off very familiar, right.",
    "start": "1987240",
    "end": "1994799"
  },
  {
    "text": "But then it's very quickly\ngoing to descend into madness. So let's say that we have\nthe following program.",
    "start": "1994800",
    "end": "2003559"
  },
  {
    "text": "So we have some program-- sorry,\nsome function and conveniently",
    "start": "2003560",
    "end": "2009810"
  },
  {
    "text": "for the attacker, it has this\nnice function here called run shell.",
    "start": "2009810",
    "end": "2016300"
  },
  {
    "text": "So this is just\ngoing to call system, it's going to execute bin\nslash bash and then be done.",
    "start": "2016300",
    "end": "2025830"
  },
  {
    "text": "And then we've got the canonical\nbuffer overflow process",
    "start": "2025830",
    "end": "2031279"
  },
  {
    "text": "or sorry, function down\nhere, basically this thing is going to declare a\nbuffer, and then it's",
    "start": "2031280",
    "end": "2041940"
  },
  {
    "text": "going to use one of\nthese unsafe functions",
    "start": "2041940",
    "end": "2047370"
  },
  {
    "text": "to fill in bytes in the buffer.",
    "start": "2047370",
    "end": "2052870"
  },
  {
    "text": "OK so, we know that this\ncan be overflowing OK, this is old news.",
    "start": "2052870",
    "end": "2058510"
  },
  {
    "text": "Now what's interesting is that\nwe have this function up here, run shell, but it\ndoesn't quite seem",
    "start": "2058510",
    "end": "2066110"
  },
  {
    "text": "to be accessed in some direct\nway based on this buffer overflow. So how can the attacker invoke\nthis run shell command here?",
    "start": "2066110",
    "end": "2075539"
  },
  {
    "text": "Well the attack may\ndo a couple things. So first of all, the attacker\ncan disassemble the program,",
    "start": "2075540",
    "end": "2082919"
  },
  {
    "text": "run GDB, find out the address\nof this thing in the executable, right. So you all should be very\nfamiliar with doing those kinds",
    "start": "2082920",
    "end": "2088899"
  },
  {
    "text": "of things through the lab. That's the first thing\nthe attacker can do. And then during the\nbuffer overflow,",
    "start": "2088900",
    "end": "2094480"
  },
  {
    "text": "the attacker can essentially\ntake that address, put it in the buffer\noverflow that's generated",
    "start": "2094480",
    "end": "2100359"
  },
  {
    "text": "and make sure that the\nfunction returns to run shell. So just to make that clear,\nlet's draw that over here.",
    "start": "2100360",
    "end": "2109369"
  },
  {
    "text": "So, you have a setup\nthat looks something like this at the bottom,\nwe have the buffer,",
    "start": "2109370",
    "end": "2120541"
  },
  {
    "text": "that's being overflowed.",
    "start": "2120541",
    "end": "2121540"
  },
  {
    "text": "And then up here, we have\nthe save the break pointer,",
    "start": "2126340",
    "end": "2136590"
  },
  {
    "text": "up here we have the return\naddress, for process message.",
    "start": "2136590",
    "end": "2144395"
  },
  {
    "text": "So remember that the new stack\npointer will be here initially,",
    "start": "2148990",
    "end": "2154850"
  },
  {
    "text": "when we start\nexecuting the function. This is the new\nbreak pointer, this",
    "start": "2154850",
    "end": "2167710"
  },
  {
    "text": "is what the stack\npointer used to be.",
    "start": "2167710",
    "end": "2170740"
  },
  {
    "text": "And then we've got some\nbreak pointer up here,",
    "start": "2173980",
    "end": "2179390"
  },
  {
    "text": "for the previous frame.",
    "start": "2179390",
    "end": "2180430"
  },
  {
    "text": "OK, so this should\nlook pretty familiar. So basically, in the\nattack, like I said, we've used GDB to\nfigure out what",
    "start": "2185390",
    "end": "2191830"
  },
  {
    "text": "the address is of run shell. So in the buffer overflow,\nwe can essentially just",
    "start": "2191830",
    "end": "2197359"
  },
  {
    "text": "put the address of run\nshell right here, right.",
    "start": "2197360",
    "end": "2204140"
  },
  {
    "text": "So this is a actually pretty\nstraightforward extension of what we already\nknow how to do, right. So basically it's saying,\nif we conveniently",
    "start": "2204140",
    "end": "2210270"
  },
  {
    "text": "have a command\nthat runs a shell, if we can disassemble\nthe binary, figure out where that address is, we can\njust put that in this overflow",
    "start": "2210270",
    "end": "2217010"
  },
  {
    "text": "array that we have here. So that should be\npretty straightforward. Does that make sense?",
    "start": "2217010",
    "end": "2222700"
  },
  {
    "text": "OK. So, this was a very\nchildish example, because the programmer\nfor some crazy reason",
    "start": "2222700",
    "end": "2229690"
  },
  {
    "text": "has put this low\nhanging fruit here. So as an attacker this is like\nChristmas coming early, right. Now it may not be the case\nthat you have something",
    "start": "2229690",
    "end": "2237619"
  },
  {
    "text": "as delightful as this. So what you could have instead,\nis something like this.",
    "start": "2237620",
    "end": "2245400"
  },
  {
    "text": "So let's say that instead\nof this thing being called run shell, we call it\nrun boring and then",
    "start": "2245400",
    "end": "2253810"
  },
  {
    "text": "maybe this thing just executes\nbin slash OS let's say.",
    "start": "2253810",
    "end": "2261880"
  },
  {
    "text": "But let's say that everything\nis not completely lost,",
    "start": "2261880",
    "end": "2267480"
  },
  {
    "text": "because we actually\nhave a string up here that conveniently gives\nus the path of that.",
    "start": "2267480",
    "end": "2276365"
  },
  {
    "text": "So what's interesting about\nthis is, that we can disassemble the program, find the\nlocation of run boring,",
    "start": "2284700",
    "end": "2291570"
  },
  {
    "text": "but as an attacker,\nwho wants to run an OS? Right, that's no fun\nBut we do actually have a string in memory that\npoints to the path of the shell",
    "start": "2291570",
    "end": "2301910"
  },
  {
    "text": "and actually we also know\nsomething interesting too. Which is that even though the\nprogram isn't calling system",
    "start": "2301910",
    "end": "2307440"
  },
  {
    "text": "with the argument that we want,\nit is calling system somehow. So we know that\nsystem must be getting",
    "start": "2307440",
    "end": "2312700"
  },
  {
    "text": "linked into this\nprogram somehow, right. So we can actually\nleverage those two things,",
    "start": "2312700",
    "end": "2318630"
  },
  {
    "text": "to actually call system\nwith this argument here. So the first thing that we\ndo, is we can go into GDB",
    "start": "2318630",
    "end": "2325609"
  },
  {
    "text": "and we can actually\nfigure out where this thing is located in the\nprocess binary image, right.",
    "start": "2325610",
    "end": "2332634"
  },
  {
    "text": "So you just go to GDB, just\ntype in basically print system and I'll give you\nsome information about the offset of that OK. So that's pretty\nstraightforward.",
    "start": "2332634",
    "end": "2338710"
  },
  {
    "text": "You can also do the same\nthing with bash path. Right, you just use\nGDB to figure out where this thing lives. It's statically\ndeclared string, right.",
    "start": "2338710",
    "end": "2345125"
  },
  {
    "text": "So you'd be able to find\nout where that lives. And so once you've\ndone that, now you got to do something a\nlittle bit different, right.",
    "start": "2345125",
    "end": "2351440"
  },
  {
    "text": "Because now we actually\nhave to figure out somehow, how to invoke system with\nan argument of our choosing,",
    "start": "2351440",
    "end": "2358160"
  },
  {
    "text": "right. And so the way that we do\nthat is by essentially faking a calling frame for system.",
    "start": "2358160",
    "end": "2364730"
  },
  {
    "text": "OK, so remember that\na frame is the thing that the compiler\nand the hardware work together to use to\nimplement the call stack,",
    "start": "2364730",
    "end": "2371361"
  },
  {
    "text": "right. So here's basically\nwhat we want to do.",
    "start": "2371361",
    "end": "2375450"
  },
  {
    "text": "We want to set up something\nlike this on the stack, right.",
    "start": "2378630",
    "end": "2390710"
  },
  {
    "text": "So basically we're\ngoing to fake what system would expect\nto be on the stack,",
    "start": "2390710",
    "end": "2398700"
  },
  {
    "text": "but right before it\nactually executes its code.",
    "start": "2398700",
    "end": "2401480"
  },
  {
    "text": "So up here we had the\nargument of the system, this is the string that we\nactually want to execute. And then down here, this is\nwhere system should return to,",
    "start": "2405800",
    "end": "2419160"
  },
  {
    "text": "when it's done. Right, so this is what system\nexpects the stack to look like,",
    "start": "2419160",
    "end": "2427690"
  },
  {
    "text": "right before it\nstarts execution. It's going to say this is where\nI should go when I'm finished, this is the thing I should\nconsume as my argument, right.",
    "start": "2427690",
    "end": "2434180"
  },
  {
    "text": "In the past we've been\nassuming that there were no arguments when\nyou pass the functions, but now this is a little\nbit different, right. So basically we\njust have to ensure",
    "start": "2434180",
    "end": "2439878"
  },
  {
    "text": "that this thing is in that\noverflow code that we create, right. We just have to make\nsure this fake calling",
    "start": "2439878",
    "end": "2447280"
  },
  {
    "text": "frame is in that array. So basically the\nway this will work",
    "start": "2447280",
    "end": "2453640"
  },
  {
    "text": "is, we will do the following.",
    "start": "2453640",
    "end": "2455615"
  },
  {
    "text": "So once again remember\nthe overflow goes up here. So first, we're going to put\nthe address of system here.",
    "start": "2459810",
    "end": "2468589"
  },
  {
    "text": "And then here, we're going\nto put just some junk return",
    "start": "2475370",
    "end": "2480781"
  },
  {
    "text": "address. Right, this is\nwhere system's going",
    "start": "2480781",
    "end": "2486080"
  },
  {
    "text": "to return after it's finished. For the purposes\nof the discussion now, we don't care\nwhat this does, we'll just make this be just\nsome random set of bytes.",
    "start": "2486080",
    "end": "2493020"
  },
  {
    "text": "And then up here,\nwe're actually going to put the address\nof bash path, right.",
    "start": "2493020",
    "end": "2506674"
  },
  {
    "text": "So what's going\nto happen now when we do this buffer in overflow? So what's going to happen is\nthat, process message is going",
    "start": "2506674",
    "end": "2512690"
  },
  {
    "text": "to finish, it's\ngoing to say, OK hey, here's where I should\nreturn to, right. And then it's going to\npop the stack, right,",
    "start": "2512690",
    "end": "2520070"
  },
  {
    "text": "and now the system code\nis executing, right. The system code now sees\nthat fake call frame",
    "start": "2520070",
    "end": "2526609"
  },
  {
    "text": "that we created, right. As far as system is\nconcerned, nothing chicanerous has taken place, right.",
    "start": "2526610",
    "end": "2531750"
  },
  {
    "text": "System will say, aha\nhere's the argument that I want to execute,\nit's bin slash bash,",
    "start": "2531750",
    "end": "2536950"
  },
  {
    "text": "it's going to execute it\nand voila, the attacker has a shell, right.",
    "start": "2536950",
    "end": "2542550"
  },
  {
    "text": "So does this make sense? So basically what we've\ndone is, we've now taken advantage of knowledge\nof the calling convention,",
    "start": "2542550",
    "end": "2547610"
  },
  {
    "text": "for the platform to\ncreate fake stack frames, or fake calling\nframes I should say. And using those\nfake calling frames,",
    "start": "2547610",
    "end": "2554680"
  },
  {
    "text": "we can actually execute any\nfunction that is already linked and defined in the application.",
    "start": "2554680",
    "end": "2562329"
  },
  {
    "text": "Does that make sense? OK so, another question\nyou might have is,",
    "start": "2562330",
    "end": "2572049"
  },
  {
    "text": "what if this string wasn't\nactually in the program?",
    "start": "2572050",
    "end": "2577111"
  },
  {
    "text": "Now to be clear, this\nstring is almost certainly in the program. So that's one funny\nthing about security, there's just all kinds of fun\nstrings that are laying around,",
    "start": "2577111",
    "end": "2584285"
  },
  {
    "text": "you can just go to\ntown all day long. Well let's suppose we\nlive in bizarro world and like this string\nis not in the program.",
    "start": "2584285",
    "end": "2589550"
  },
  {
    "text": "So does anyone have\nany ideas about what we could do to get that\nstring to be in the program? AUDIENCE: We can put the\nstring on the [INAUDIBLE].",
    "start": "2589550",
    "end": "2595511"
  },
  {
    "text": "PROFESSOR; Yes exactly,\ndon't trust that man. That's what you can do, exactly. So, what you can do\nis actually for here,",
    "start": "2595511",
    "end": "2603060"
  },
  {
    "text": "have the address of bash path,\nactually point here, right.",
    "start": "2603060",
    "end": "2609990"
  },
  {
    "text": "And then you'd put-- up here\nyou would put slash B-I-N",
    "start": "2609990",
    "end": "2615890"
  },
  {
    "text": "slash P-A-T slash 0.",
    "start": "2615890",
    "end": "2621859"
  },
  {
    "text": "So that's how you\ncan get around-- I think I got that math right,\nbecause each one of these is 4 bytes.",
    "start": "2621860",
    "end": "2628359"
  },
  {
    "text": "But anyway, so you have the\npointer go up here and then boom, you're done. So now you can actually\nconjure up arguments",
    "start": "2628360",
    "end": "2635890"
  },
  {
    "text": "just by putting them\nin the shell code. Pretty horrifying.",
    "start": "2635890",
    "end": "2642369"
  },
  {
    "text": "So this is all building up\ntowards the full BROP attack, right.",
    "start": "2642370",
    "end": "2647800"
  },
  {
    "text": "But before you can mention\nthe full BROP attack, you've got to\nunderstand how you just chain together these\npreexisting things in the code.",
    "start": "2647800",
    "end": "2653559"
  },
  {
    "text": "So one thing to note is that\nwhen I'm setting up this return address here, I just said,\neh just put some junk here,",
    "start": "2656950",
    "end": "2663170"
  },
  {
    "text": "it doesn't really matter,\nwe just want to get a shell. But if you're the attacker,\nyou could actually",
    "start": "2663170",
    "end": "2668770"
  },
  {
    "text": "set this return\naddress to something that's actually useful, right. And if you did that, you\ncould actually string together",
    "start": "2668770",
    "end": "2675970"
  },
  {
    "text": "several functions, several\nfunction indications in a row, right. That's actually very,\nvery powerful, right.",
    "start": "2675970",
    "end": "2682590"
  },
  {
    "text": "Because in particular,\nif we literally just set this return\naddress to jump, I mean it may be that\nwhen we ret from it,",
    "start": "2682590",
    "end": "2689030"
  },
  {
    "text": "like the program crashes on\nit, maybe we don't want that, right. So can actually start\nchaining some of these things to do interesting stuff.",
    "start": "2689030",
    "end": "2695980"
  },
  {
    "text": "So let's say that our goal is\nthat we want to call system",
    "start": "2695980",
    "end": "2701369"
  },
  {
    "text": "an arbitrary number of times. We don't just want\nto do it one time, we're going to it a\narbitrary number of times.",
    "start": "2701370",
    "end": "2706766"
  },
  {
    "text": "So how can we do that? Well, we're going to use\ntwo pieces of information that we already know\nhow to get, right. We already know how to get\nthe address of system, right.",
    "start": "2706766",
    "end": "2713820"
  },
  {
    "text": "We just look in GDB and find it. We also know how to find\nthe address of that string,",
    "start": "2713820",
    "end": "2720180"
  },
  {
    "text": "bin flash bash. Now to actually make this\nattack work using multiple calls",
    "start": "2720180",
    "end": "2725490"
  },
  {
    "text": "to system, we're going to\nhave to use gadgets, right. This is getting us\ncloser to what's taking place in the BROP paper.",
    "start": "2725490",
    "end": "2731470"
  },
  {
    "text": "So what we need to do\nnow, is find the address of these two Op codes.",
    "start": "2734210",
    "end": "2741670"
  },
  {
    "text": "Right, so what is this, so this\nis pop in EAX, so what does this do? This just takes the\ntop of the stack",
    "start": "2748070",
    "end": "2758050"
  },
  {
    "text": "and then it puts it\ninto the EAX register. And what is the ret\ninstruction going to do?",
    "start": "2758050",
    "end": "2763910"
  },
  {
    "text": "It just pops the\ntop of the stack and then puts it into\nEIP, instruction pointer.",
    "start": "2763910",
    "end": "2775340"
  },
  {
    "text": "OK, so this is what's\nknown as a gadget, right. This is like a small set\nof assembly instructions",
    "start": "2775340",
    "end": "2781030"
  },
  {
    "text": "that the attacker can use\nto build these larger more grandiose attacks. OK, So how can we find\nthis gadget, right.",
    "start": "2781030",
    "end": "2790410"
  },
  {
    "text": "There's actually like\nsome off the shelf tools that hackers use to\nfind these things, it's not hard to get\nthe binary, right.",
    "start": "2790410",
    "end": "2796776"
  },
  {
    "text": "Essentially just\ndo a [INAUDIBLE] for these types\nof things, right. So it's just as easy to\nfind one of these gadgets,",
    "start": "2796776",
    "end": "2803070"
  },
  {
    "text": "assuming that you've\ngot a copy of the binary and we're not worried\nabout randomization yet. It's very easy to\nfind these things.",
    "start": "2803070",
    "end": "2808599"
  },
  {
    "text": "Just like it's very easy to find\nthe address of system and stuff like that. So if we've got one\nof these gadgets,",
    "start": "2808600",
    "end": "2814220"
  },
  {
    "text": "what can we use\nthis gadget to do? Well of course the\nanswer is evil. So, what we can do\nis the following.",
    "start": "2814220",
    "end": "2822925"
  },
  {
    "text": "Let's say that we\nchanged the stack so that it looks like this.",
    "start": "2825480",
    "end": "2831660"
  },
  {
    "text": "So the exploit goes this way. And so let's say, we do this.",
    "start": "2839500",
    "end": "2846359"
  },
  {
    "text": "So the first thing\nwe're going to put here is the address of system.",
    "start": "2846360",
    "end": "2850190"
  },
  {
    "text": "And the thing we're\ngoing to put up here, is the address of\nthe pop ret gadget.",
    "start": "2852960",
    "end": "2861160"
  },
  {
    "text": "Then up here, we're going to\nput the address of bash path",
    "start": "2865750",
    "end": "2878180"
  },
  {
    "text": "and then we're going\nto repeat this pattern. So we're going to put\nthe address of system,",
    "start": "2878180",
    "end": "2890620"
  },
  {
    "text": "the address of the\npop ret gadget,",
    "start": "2890620",
    "end": "2899890"
  },
  {
    "text": "and then the address\nof bash path.",
    "start": "2899890",
    "end": "2904289"
  },
  {
    "text": "OK, so what's going\nto happen here now? Now this is going\nto be a bit tricky, and these lecture\nnotes are going",
    "start": "2909880",
    "end": "2915120"
  },
  {
    "text": "to be up on the\nweb, so you may just want to listen to\nwhat's happening, but this-- when I first\nunderstood this, this",
    "start": "2915120",
    "end": "2920310"
  },
  {
    "text": "was like understanding that\nSanta Claus wasn't real right. So what will happen\nis-- and by the way, Santa Claus isn't real, I hope\nI didn't ruin it for everyone.",
    "start": "2920310",
    "end": "2927411"
  },
  {
    "text": "So what's going to happen? So [INAUDIBLE] is what\nputs this in memory. So we're going to\nstart here, OK.",
    "start": "2927411",
    "end": "2932837"
  },
  {
    "text": "So what's going to happen? We're going to return to\nsystem, the ret instruction is going to pop an\nentry off the stack, now",
    "start": "2932837",
    "end": "2939530"
  },
  {
    "text": "the top of the\nstack pointers here. OK, so system is going to\nfind its argument here,",
    "start": "2939530",
    "end": "2946509"
  },
  {
    "text": "it's going to execute the shell. Then it's going to finish\nand return to whatever's here, which is the pop gadget.",
    "start": "2946510",
    "end": "2953070"
  },
  {
    "text": "In executing that\nreturn, we change the top of the stack\npointer to be here. OK, now we are in\nthe pop ret gadget.",
    "start": "2953070",
    "end": "2960770"
  },
  {
    "text": "OK, so what is that pop\nret gadget going to do? It's going to pop what's on\nthe stack, which is this, OK.",
    "start": "2960770",
    "end": "2966700"
  },
  {
    "text": "So now the top of\nthe stack is here. Then we're now in\nthe ret instruction from the pop ret gadget.",
    "start": "2966700",
    "end": "2972730"
  },
  {
    "text": "What's this going to do? Aha, it's going to call\nsystem again, right. So once again the ret is going\nto pop this off this stack,",
    "start": "2972730",
    "end": "2981400"
  },
  {
    "text": "we are now in system. Top of the stack\nis here, system is going-- this will trigger\ncalling frame, the system.",
    "start": "2981400",
    "end": "2986810"
  },
  {
    "text": "System takes the bash\npath argument here. OK, and then it is\ngoing to ret, right.",
    "start": "2986810",
    "end": "2992681"
  },
  {
    "text": "Where's it going to ret to? The pop ret gadget again. So the ret pops\nthe stack, we are",
    "start": "2992681",
    "end": "2997977"
  },
  {
    "text": "now in the pop ret gadget,\nthe ret gadget-- sorry, the pop ret gadget is going to\npop this, so on and so forth.",
    "start": "2997977",
    "end": "3005460"
  },
  {
    "text": "OK? So clearly we can\nchain this sequence to execute an arbitrary\nnumber of things, right.",
    "start": "3005460",
    "end": "3012350"
  },
  {
    "text": "And so this in\nessence is starting to get to the core of what\nreturn oriented programming is.",
    "start": "3012350",
    "end": "3018420"
  },
  {
    "text": "Note that we have not executed\nanything in the stack, right. This is what has allowed us to\nget beyond those data execution",
    "start": "3018420",
    "end": "3026890"
  },
  {
    "text": "prevention bits, right. Nothing's been executed here. We're just sort of jumping\nto things in unexpected ways",
    "start": "3026890",
    "end": "3033150"
  },
  {
    "text": "to do what we want to do. OK so this is actually\nvery, very, very, clever.",
    "start": "3033150",
    "end": "3039350"
  },
  {
    "text": "And so what's interesting\nis that at a high level you can think about us, we've\nnow defined this new model",
    "start": "3039350",
    "end": "3044990"
  },
  {
    "text": "for computation, right. So in a traditional,\nnon-malicious program, you have the\ninstruction pointer that",
    "start": "3044990",
    "end": "3050072"
  },
  {
    "text": "points to some linear\nsequence of instructions. And you increment the\ninstruction pointer to figure out what's\nthe next thing to do.",
    "start": "3050072",
    "end": "3056030"
  },
  {
    "text": "In essence, what return\noriented programing does is, it uses the stack pointer\nas the instruction pointer.",
    "start": "3056030",
    "end": "3062720"
  },
  {
    "text": "Right, so as we move\nthe stack pointer, we're pointing to like\nother blocks of code",
    "start": "3062720",
    "end": "3069230"
  },
  {
    "text": "that we're going to execute. And then at the\nend of the gadget, you return back to\nthe stack pointer which is then going to tell\nus the next block of code",
    "start": "3069230",
    "end": "3076218"
  },
  {
    "text": "to execute. OK so that does that make sense?",
    "start": "3076218",
    "end": "3079340"
  },
  {
    "text": "So that's basically how you\ncan avoid the data execution prevention stuff. That's how you can\nget around having",
    "start": "3086220",
    "end": "3092190"
  },
  {
    "text": "this no execute bit on pages. So the next thing that\nwe might want to do",
    "start": "3092190",
    "end": "3098119"
  },
  {
    "text": "is defeat stack canaries. So if you remember, this\ncanary was this value that we were going to\nplace on the stack, right.",
    "start": "3098120",
    "end": "3105510"
  },
  {
    "text": "So you can imagine\nthe canary would go right here for\nexample, or right here,",
    "start": "3105510",
    "end": "3110640"
  },
  {
    "text": "and it would prevent someone\nfrom overriding the return address, without also\noverwriting the canary.",
    "start": "3110640",
    "end": "3116370"
  },
  {
    "text": "With the intuition being that\nbefore the system actually jumps to the ret\naddress, it can check",
    "start": "3116370",
    "end": "3122330"
  },
  {
    "text": "to see if the canary\nhas been changed in a way that's incorrect.",
    "start": "3122330",
    "end": "3127380"
  },
  {
    "text": "So that's how the\ncanary works, but can we get around the canary? Can we guess the canary somehow?",
    "start": "3127380",
    "end": "3133250"
  },
  {
    "text": "Well we can actually, if\nwe make a few assumptions about how the system works.",
    "start": "3133250",
    "end": "3142109"
  },
  {
    "text": "So, how do we defeat\nthose canaries?",
    "start": "3142110",
    "end": "3151650"
  },
  {
    "text": "So the first thing that we want\nto assume is, that the server,",
    "start": "3156160",
    "end": "3166730"
  },
  {
    "text": "it has to have a buffer\noverflow vulnerability.",
    "start": "3166730",
    "end": "3168720"
  },
  {
    "text": "The second thing that\nwe're going to assume, is that the server is going\nto crash and respond, just",
    "start": "3173420",
    "end": "3187299"
  },
  {
    "text": "restart, if we set the\ncanary value to a bad one.",
    "start": "3187300",
    "end": "3193355"
  },
  {
    "text": "And the third thing that\nwe're going to assume is that, after the restart,\nthat the canary and any address",
    "start": "3199600",
    "end": "3217600"
  },
  {
    "text": "space randomization that you're\ndoing, is not rerandomized.",
    "start": "3217600",
    "end": "3222695"
  },
  {
    "text": "Right, so what that\nmeans is that, we're going to assume that if we can\nsomehow crash the server, then when the server restarts,\nit's going to have",
    "start": "3229184",
    "end": "3235520"
  },
  {
    "text": "the same value for the canary. And it's going to have the same\nlocations for all the quote unquote \"randomized\" stack,\nheap and code information",
    "start": "3235520",
    "end": "3244030"
  },
  {
    "text": "that it has. So you might wonder why\nwould this be the case? Why would it be that when\nthe server comes back",
    "start": "3244030",
    "end": "3250580"
  },
  {
    "text": "it doesn't have new\nlocations for things? The reason is because\na lot of servers are written to use fork,\nto create new processes.",
    "start": "3250580",
    "end": "3257950"
  },
  {
    "text": "And if you remember,\nfork actually inherits-- the child\ninherits the address",
    "start": "3257950",
    "end": "3263580"
  },
  {
    "text": "space of the address space\nlayout right of the parent, right. This is copy on write pages\nthat change stuff as the child",
    "start": "3263580",
    "end": "3270890"
  },
  {
    "text": "updates things, but\nif you use fork here, instead of execing\na whole new process, any time that parent server\nprocess forms new children,",
    "start": "3270890",
    "end": "3279680"
  },
  {
    "text": "those children will have the\nsame values of the canary in the address base, OK. So these are the\nassumptions that we're",
    "start": "3279680",
    "end": "3284995"
  },
  {
    "text": "going to make to try to\ndefeat these canaries here. So how can we defeat the canary?",
    "start": "3284995",
    "end": "3291490"
  },
  {
    "text": "Well the attack is actually\nfairly straightforward. So imagine that the stack\nis going up this way, right.",
    "start": "3291490",
    "end": "3298270"
  },
  {
    "text": "Imagine you got the\nbuffer overflow here, then imagine that the\ncanary is up here, right. And the canary actually\nhas multiple bytes, right.",
    "start": "3298270",
    "end": "3305859"
  },
  {
    "text": "So what you can\nactually do is, you can probe those bytes one by\none and start guessing values",
    "start": "3305860",
    "end": "3312280"
  },
  {
    "text": "of what those bytes are, right. So let's say that-- so the\ncanary looks like this.",
    "start": "3312280",
    "end": "3320940"
  },
  {
    "text": "Here's the overflowing\nbuffer, and you want to guess what these bytes are.",
    "start": "3320940",
    "end": "3326200"
  },
  {
    "text": "So the first thing\nthat you guess is you take your overflow,\njust to this first byte of the canary and you\nsay, hey, is that byte 0?",
    "start": "3326200",
    "end": "3334910"
  },
  {
    "text": "You write a 0 there,\nwith your overflow. You're either correct\nor you're incorrect. If you are incorrect, then the\nserver's going to crash, right.",
    "start": "3334910",
    "end": "3343000"
  },
  {
    "text": "If you are correct you\nsay, aha I actually know the first byte of\nthe canary now, right.",
    "start": "3343000",
    "end": "3348020"
  },
  {
    "text": "Then you start guessing here. You say, are you 0? Probably not, it's\ngoing to crash.",
    "start": "3348020",
    "end": "3353300"
  },
  {
    "text": "Are you one? And maybe not, it's\ngoing to crash. Are you two? Aha, it doesn't crash, right.",
    "start": "3353300",
    "end": "3358930"
  },
  {
    "text": "So now you've actually found\nthe value of that second canary byte, right. As you can imagine,\nyou step up this way,",
    "start": "3358930",
    "end": "3364770"
  },
  {
    "text": "and you eventually find all\nthe values for the canary. So once again we're taking\nadvantage of the fact,",
    "start": "3364770",
    "end": "3369890"
  },
  {
    "text": "that crashes are a signal\nto you, the attacker, that you've actually done\nsomething wrong, right.",
    "start": "3369890",
    "end": "3375935"
  },
  {
    "text": "And the server is staying\nup, in other words, that socket connection's\nstaying open, is a signal to you, the\nattacker, that you've",
    "start": "3375935",
    "end": "3381579"
  },
  {
    "text": "done something right. AUDIENCE: Maybe I mentioned\nsomething basic here like why do you-- if you\nknow how long the canary is,",
    "start": "3381579",
    "end": "3387609"
  },
  {
    "text": "can you just infect directly? Skip that buffer\nand overflow those-- the one path there the canary?",
    "start": "3387610",
    "end": "3393508"
  },
  {
    "text": "So like [INAUDIBLE] say you can\nlike [INAUDIBLE] the canary-- PROFESSOR: Yeah, yeah you\ncan't-- so that's right",
    "start": "3393508",
    "end": "3399619"
  },
  {
    "text": "if you-- so if you in fact\nknow the exact location of the canary, right. That can sometimes\nallow you to skip some of these attacks totally.",
    "start": "3399620",
    "end": "3405420"
  },
  {
    "text": "Because then you\ncan just directly write to the return\naddress, let's say, as opposed to doing some of\nthis buffer overflow nonsense.",
    "start": "3405420",
    "end": "3411180"
  },
  {
    "text": "But in general, if there's\nsome level of randomization here, if you don't quite know\nwhere the stack is for example, then it's tricky\nto do that, right.",
    "start": "3411180",
    "end": "3417810"
  },
  {
    "text": "So basically the way\nthat the attack proceeds is that you don't quite\nknow what's happening, and so you just very slowly\ncreep your way up memory,",
    "start": "3417810",
    "end": "3426710"
  },
  {
    "text": "down the stack, to figure\nout where these things are. AUDIENCE: Can the\nserver instead of crashing when it\nfinds strong canaries,",
    "start": "3426710",
    "end": "3433522"
  },
  {
    "text": "keep the socket open and\n[INAUDIBLE] deprocess and [INAUDIBLE]? PROFESSOR: Yeah, so we'll\ndiscuss at the end of lecture",
    "start": "3433522",
    "end": "3440440"
  },
  {
    "text": "some of the defenses you\ncan have against this, but one very, abstractly\nspeaking civil defense,",
    "start": "3440440",
    "end": "3445789"
  },
  {
    "text": "is that when the\nprogram crashes, you catch the segfault\nusing a signal handler, do not deduce you're\nown code by the way.",
    "start": "3445790",
    "end": "3451930"
  },
  {
    "text": "But you can do this, right. You catch that segfault\nand then the signal handler just keeps that\nprocess alive for a bit",
    "start": "3451930",
    "end": "3457247"
  },
  {
    "text": "and that will trick the\nattack into thinking that, oh I won't get that signal\nback, in other words.",
    "start": "3457247",
    "end": "3465570"
  },
  {
    "text": "OK so that's\nbasically how you can guess the value for the canary. And note that you can\nactually use this attack",
    "start": "3465570",
    "end": "3471700"
  },
  {
    "text": "to sort of figure out\narbitrary values that are low in the stack, right. Just by iteratively guessing\nfor each byte what it is,",
    "start": "3471700",
    "end": "3478790"
  },
  {
    "text": "and then using that\ncrash indication as a signal of whether you're\nguess was correct or not.",
    "start": "3478790",
    "end": "3484960"
  },
  {
    "text": "So that's basically\nhow you can defeat these randomized\ncanaries, assuming that after the server restarts,\nthose things are not changed.",
    "start": "3484960",
    "end": "3494000"
  },
  {
    "text": "And so we've also\nshown how you can use the gadgets\nto string together these more elaborate attacks.",
    "start": "3494000",
    "end": "3499460"
  },
  {
    "text": "So what we're going\nto look at next is a way that you can use all\nthese techniques to defeat",
    "start": "3499460",
    "end": "3505770"
  },
  {
    "text": "data execution prevention,\naddress-based randomization and canaries on a\nproduction system.",
    "start": "3505770",
    "end": "3512674"
  },
  {
    "text": "Now what we're\ngoing to do now is, we're actually going\nto start looking at 64-bit architectures instead\nof 32-bit architectures.",
    "start": "3512674",
    "end": "3518870"
  },
  {
    "text": "As it turns out for\nrandomization purposes, 64-bit architectures\nactually give you a lot more randomness to protect\nyourself against the attacker.",
    "start": "3518870",
    "end": "3527280"
  },
  {
    "text": "So looking at attacks\nis much more interesting on those systems. So that's also the type\nof architecture that's",
    "start": "3527280",
    "end": "3532800"
  },
  {
    "text": "discussed in the BROP paper. They talk about 64-bit machines. So from now on,\nassume that we're going to talk about the\n64-bit architectures.",
    "start": "3532800",
    "end": "3539950"
  },
  {
    "text": "For the purposes\nof this discussion, the only difference\nbetween a 32-bit machine and a 64-bit machine, is\nthat on a 32-bit machine,",
    "start": "3539950",
    "end": "3547360"
  },
  {
    "text": "the arguments are passed\non the stack, right. So here for example, this\nis like a 32-bit machine",
    "start": "3547360",
    "end": "3554620"
  },
  {
    "text": "we were assuming, so\nfor example, bash path will pass on the stack. On a 64-bit machine,\nthe arguments",
    "start": "3554620",
    "end": "3559810"
  },
  {
    "text": "are passed in registers instead. OK so like when a\nfunction starts execution, it's going to look\nin certain registers",
    "start": "3559810",
    "end": "3566195"
  },
  {
    "text": "to find where the arguments are. OK, make sense? All right. So start up here.",
    "start": "3566195",
    "end": "3573950"
  },
  {
    "text": "All right, so now we get to\nthe point of today's paper. Which is the blind return\noriented programming.",
    "start": "3581400",
    "end": "3588200"
  },
  {
    "text": "So what's the first\nthing you want to do, if you want to engage in\nBROP for fun or profit?",
    "start": "3588200",
    "end": "3594970"
  },
  {
    "text": "So the first thing\nyou have to do is, you have to find what\nthey call a stop gadget.",
    "start": "3594970",
    "end": "3601170"
  },
  {
    "text": "Now a stop gadget-- and remember\nthat when we say gadget, we essentially mean,\nreturn addresses, right.",
    "start": "3606970",
    "end": "3613510"
  },
  {
    "text": "A gadget is identified\nby the return address, by the start address of that\nsequence of instructions that we want to jump to, right.",
    "start": "3613510",
    "end": "3619660"
  },
  {
    "text": "So what is a stop gadget? So a stop gadget is\nessentially a return address to someplace in the code,\nbut if you jump to it,",
    "start": "3619660",
    "end": "3627580"
  },
  {
    "text": "you're going to\npause the program, but you're not\ngoing to crash it. OK, so that's why it's\ncalled a stop gadget.",
    "start": "3627580",
    "end": "3635069"
  },
  {
    "text": "Now what might that\nstop gadget be? You might jump to someplace\nin the code that then calls",
    "start": "3635070",
    "end": "3640660"
  },
  {
    "text": "via the sleep system call\nfor example, or does pause, or something like that. Or maybe somehow the program\ngets stuck in an infinite loop",
    "start": "3640660",
    "end": "3646997"
  },
  {
    "text": "if you jump to that place. Doesn't really matter\nwhy the stop's happening, but you could imagine\nseveral scenarios which would",
    "start": "3646997",
    "end": "3652185"
  },
  {
    "text": "cause that stop to take place. So why is this useful? Well once the\nattacker has managed",
    "start": "3652185",
    "end": "3657554"
  },
  {
    "text": "to defeat the canaries using\nthat iterative guessing technique I showed\nyou, he can start to overwrite this return\naddress and start probing",
    "start": "3657554",
    "end": "3665850"
  },
  {
    "text": "for these stop gadgets, right. And so note that\nmost of the random addresses you might\nput there, they'll",
    "start": "3665850",
    "end": "3672109"
  },
  {
    "text": "probably crash\nthe server, right. Once again, that's the\nmessage to you, the attacker, that's an indication that what\nyou found is not a stop gadget,",
    "start": "3672110",
    "end": "3678601"
  },
  {
    "text": "right. Because when the server\ncrashes your sockets-- your socket\nconnection is closed. You as an attacker\nknow, OK that must not",
    "start": "3678601",
    "end": "3683652"
  },
  {
    "text": "have been a stop gadget. Where if you guess something\nand then you-- that socket still stays open for\nawhile, you think,",
    "start": "3683653",
    "end": "3688720"
  },
  {
    "text": "aha I found that stop gadget. So that's the basic\nidea behind step one.",
    "start": "3688720",
    "end": "3693890"
  },
  {
    "text": "You got to find\nthat stop gadget. Now step two, is\nthat you want to find",
    "start": "3693890",
    "end": "3702590"
  },
  {
    "text": "gadgets that pop stack entries.",
    "start": "3702590",
    "end": "3706560"
  },
  {
    "text": "And so you basically have to\nuse this sequence of carefully crafted instructions\nto figure out",
    "start": "3717500",
    "end": "3723910"
  },
  {
    "text": "when we've got one of\nthese stack gadgets. So this sequence\nis going to consist",
    "start": "3723910",
    "end": "3730530"
  },
  {
    "text": "of a probe address, a stop\naddress, and a crash address.",
    "start": "3730530",
    "end": "3738450"
  },
  {
    "text": "So the probe\naddress is the thing that we're going to\nput in the stack. This is going to be the address\nof a potential stack popping",
    "start": "3738450",
    "end": "3752036"
  },
  {
    "text": "gadget. This stop gadget is going to\nbe what we found in step one.",
    "start": "3752036",
    "end": "3761410"
  },
  {
    "text": "So this is an address\nof the stop gadget.",
    "start": "3761410",
    "end": "3766876"
  },
  {
    "text": "And then the crash\ngadget is just going to be the address\nof nonexecutable code.",
    "start": "3769550",
    "end": "3776683"
  },
  {
    "text": "So for example, you\ncould just set this to, just the\naddress zero, right. If you do a ret to this and\nthen try to execute code there,",
    "start": "3782295",
    "end": "3789415"
  },
  {
    "text": "this is going to\ncrash your program. So we can basically use\nthese types of addresses",
    "start": "3789415",
    "end": "3794830"
  },
  {
    "text": "to find out where these\nstack popping gadgets are. So here's a simple example.",
    "start": "3794830",
    "end": "3800870"
  },
  {
    "text": "So let's write this over here. So let's say we have these two\ndifferent examples of a probe,",
    "start": "3800870",
    "end": "3811730"
  },
  {
    "text": "a trap, and then a stop, right. So let's assume that\nwe have down here,",
    "start": "3811730",
    "end": "3820290"
  },
  {
    "text": "we're going to probe\nat some address, doesn't really matter,\nstarts with a four,",
    "start": "3820290",
    "end": "3826130"
  },
  {
    "text": "ends with an eight. That doesn't matter. Over here, let's say that\nwe look at the address that, let's say starts\nin a four ends in a C.",
    "start": "3826130",
    "end": "3834220"
  },
  {
    "text": "So we're saying,\nwe're hypothesizing, that maybe one of\nthese two addresses",
    "start": "3834220",
    "end": "3839270"
  },
  {
    "text": "is going to be one of these\nstack popping gadgets. And then let's say\nthat the trap up here,",
    "start": "3839270",
    "end": "3845099"
  },
  {
    "text": "like I said this is just\ngoing to be address zero,",
    "start": "3845100",
    "end": "3850790"
  },
  {
    "text": "and then let's assume that we\nfound some preexisting stop gadget, some addresses start\nthe [INAUDIBLE] doesn't really",
    "start": "3850790",
    "end": "3859380"
  },
  {
    "text": "matter. And remember this stop gadget,\nlike maybe this address,",
    "start": "3859380",
    "end": "3864720"
  },
  {
    "text": "points to code that does\nsomething like sleep 10, or something like that, right.",
    "start": "3864720",
    "end": "3871369"
  },
  {
    "text": "So when I say that we're\ngoing to test these sequences, this is the stuff that we're\ngoing to push onto the stack, right.",
    "start": "3871370",
    "end": "3876460"
  },
  {
    "text": "So similar to over there, when\nwe were pushing these gadgets onto the stack,\nthis is the stuff",
    "start": "3876460",
    "end": "3881760"
  },
  {
    "text": "that we're going to\npush onto the stack, and we're going to see\nwhat happens, right. Now let's say that,\nthis code here, points",
    "start": "3881760",
    "end": "3891799"
  },
  {
    "text": "to the following sequence. We're going to pop some\nregister, let's say racks,",
    "start": "3891800",
    "end": "3898880"
  },
  {
    "text": "and then we're going to return. So what's going to happen here?",
    "start": "3898880",
    "end": "3905210"
  },
  {
    "text": "Well so when the system\njumps this address,",
    "start": "3905210",
    "end": "3910560"
  },
  {
    "text": "the stack pointer's\ngoing to move here, OK. Now we're in the middle\nof this gadget, right. What's the gadget going to do?",
    "start": "3910560",
    "end": "3916630"
  },
  {
    "text": "It's going to pop racks, OK. Top of stack pointer's\nnow here, and it's going to return to whatever's\nthe top of the stack which",
    "start": "3916630",
    "end": "3922915"
  },
  {
    "text": "is the stop gap, right. So in this case this\ngadget gets us to here,",
    "start": "3922915",
    "end": "3929240"
  },
  {
    "text": "and the attacker\ncan tell that this is-- this probe address belong\nto one of these pop stacking",
    "start": "3929240",
    "end": "3934720"
  },
  {
    "text": "things, right. Because the client\nconnection stays open. Now let's say that\nthis gadget here,",
    "start": "3934720",
    "end": "3941400"
  },
  {
    "text": "pointed to something\nlike the following.",
    "start": "3941400",
    "end": "3948579"
  },
  {
    "text": "Maybe it just does like\nan xor, for example. So it's just going to xor\nsome registers and then it's",
    "start": "3948580",
    "end": "3958000"
  },
  {
    "text": "going to ret. So what happens if we try\nto jump to this gadget? Right, note that this does not\npop anything off the stack, OK.",
    "start": "3958000",
    "end": "3966170"
  },
  {
    "text": "It just changes the\ncontents of registers. So what's going to happen? So we're going to\nbe here, we're going",
    "start": "3966170",
    "end": "3971690"
  },
  {
    "text": "to jump to the address\nof this gadget, stack pointer goes here, OK. We're going to xor\nthese two things, right.",
    "start": "3971690",
    "end": "3978210"
  },
  {
    "text": "Stack pointer's not\ngoing to change. Then we're going to return to\nwhatever the top of the stack is, which is 0, 0.",
    "start": "3978210",
    "end": "3983549"
  },
  {
    "text": "This is going to crash. OK, the client connection to\nthe server is going to close, and as a result, the attacker\nknows that this is not",
    "start": "3983550",
    "end": "3991244"
  },
  {
    "text": "a stack popping gadget. So does that all make sense? And so you can also\nimagine that you can--",
    "start": "3991245",
    "end": "3998850"
  },
  {
    "text": "by coming with more\nbaroque series of traps and stop gadgets\nand stuff like that,",
    "start": "3998850",
    "end": "4004150"
  },
  {
    "text": "you can find things that\nfor example, pop two things off the stack, right. You can just put another one\nof these trap instructions",
    "start": "4004150",
    "end": "4010170"
  },
  {
    "text": "there, right. And so then unless\nthe-- unless this gadget pops two things\noff, you're going to end up in one of these\ntraps and your code execution",
    "start": "4010170",
    "end": "4016831"
  },
  {
    "text": "is going to blow up, right. And so in the paper they discuss\nlike this thing called the BROP",
    "start": "4016831",
    "end": "4022090"
  },
  {
    "text": "gadget, which is sort\nof like hilariously complex if you're not used\nto returning to programming. What I'll show you today\nis you can actually",
    "start": "4022090",
    "end": "4028297"
  },
  {
    "text": "just use these very\nsimple pop gadgets to launch the same attack. Then hopefully after\nyou understand this, the BROP gadget will\nmake more sense.",
    "start": "4028297",
    "end": "4034696"
  },
  {
    "text": "But does everyone\nunderstand how we can probe for these little gadgets here? OK.",
    "start": "4034696",
    "end": "4040119"
  },
  {
    "text": "So, once you've got these\ngadgets, what do you know?",
    "start": "4040120",
    "end": "4046220"
  },
  {
    "text": "Well you found the location\nof code snippets that allow you to pop stuff up,\none thing off the stack. Precisely one thing\noff the stack,",
    "start": "4046220",
    "end": "4052820"
  },
  {
    "text": "but you don't actually\nknow into what register they're popping it into.",
    "start": "4052820",
    "end": "4057990"
  },
  {
    "text": "You just know that they're\ngetting popped off, right. And you actually\nneed to know what register these gadgets\nare popping stuff",
    "start": "4057990",
    "end": "4064060"
  },
  {
    "text": "into, because remember,\non a 64-bit architecture, the registers control where the\narguments are to this function",
    "start": "4064060",
    "end": "4070840"
  },
  {
    "text": "that you want to invoke, right. So the ultimate goal\nto keep in mind, is that we want to be able\nto create some gadgets that",
    "start": "4070840",
    "end": "4076419"
  },
  {
    "text": "allow us to pop values\nthat we put on the stack into certain registers,\nand eventually we're going to call a system\ncall that's going to allow",
    "start": "4076419",
    "end": "4082794"
  },
  {
    "text": "us to do something evil. OK, so the next thing\nthat we need to do is determine which\nregisters-- so determine which",
    "start": "4082794",
    "end": "4094670"
  },
  {
    "text": "registers the pop gadgets use.",
    "start": "4094670",
    "end": "4099025"
  },
  {
    "text": "So how are we going to do that? Well basically we can take\nadvantage of the pause system",
    "start": "4106319",
    "end": "4112160"
  },
  {
    "text": "call. OK, so the pause system call,\nit takes no arguments, right.",
    "start": "4112160",
    "end": "4117580"
  },
  {
    "text": "And that means that it ignores\neverything in the registers. OK. And essentially, to find\nthe pause instruction what",
    "start": "4117580",
    "end": "4125129"
  },
  {
    "text": "we can do is, we can chain\nall of these pop gadgets in such a way, that we put\nall of them on the stack,",
    "start": "4125129",
    "end": "4132489"
  },
  {
    "text": "in between each one of them\nwe put the syscall number for pause, and then we\nsee if we can actually",
    "start": "4132490",
    "end": "4137738"
  },
  {
    "text": "get the program to hang. Let me give you a\nconcrete example of that. So we'll do something like this.",
    "start": "4137739",
    "end": "4145050"
  },
  {
    "text": "So here for the return address,\nwe'll put the following.",
    "start": "4149390",
    "end": "4153850"
  },
  {
    "text": "So let's say we have one\ngadget that pops RDI register, then does a ret.",
    "start": "4164290",
    "end": "4170899"
  },
  {
    "text": "And then up here we'll put\nthe syscall number for pause.",
    "start": "4170899",
    "end": "4180089"
  },
  {
    "text": "And then let's say that we have\nanother gadget that we found,",
    "start": "4180090",
    "end": "4185810"
  },
  {
    "text": "that does a pop into a different\nregister, let's say RSI.",
    "start": "4185810",
    "end": "4190600"
  },
  {
    "text": "And then we'll put the\nsystem call number for pause up here again.",
    "start": "4193960",
    "end": "4199460"
  },
  {
    "text": "And we do this for all the\ngadgets that we've found and then eventually we put\nthe guest address for pause,",
    "start": "4202124",
    "end": "4215947"
  },
  {
    "text": "or sorry for syscall, excuse me.",
    "start": "4215947",
    "end": "4217280"
  },
  {
    "text": "Once again, remember how you\ninvoke these system calls. So you basically have to put\nthe number of the system call",
    "start": "4225370",
    "end": "4232989"
  },
  {
    "text": "into the RAX register, then\nyou invoke this libc function syscall which is then going to\nexecute the requested system",
    "start": "4232990",
    "end": "4239855"
  },
  {
    "text": "call, OK. So what's going to happen\nwhen we execute this code? Right, so we're\ngoing to come here,",
    "start": "4239855",
    "end": "4246120"
  },
  {
    "text": "we're going to jump to the\naddress of this gadget, and note that as an\nattacker, all that we know is that this gadget here\npops something off the stack.",
    "start": "4246120",
    "end": "4253610"
  },
  {
    "text": "We don't know what the\nregister is yet, right. Put it here just to\nmake the [INAUDIBLE], but the attacker\ndoesn't know yet, right.",
    "start": "4253610",
    "end": "4258788"
  },
  {
    "text": "So if you jump-- or\nsorry the-- we jump to the gadget, the\nstack corners now here, what's it going to do?",
    "start": "4258788",
    "end": "4264580"
  },
  {
    "text": "It's going to pop this\nsyscall number for pause, into some register the\nattacker doesn't know,",
    "start": "4264580",
    "end": "4269870"
  },
  {
    "text": "and then we're going to continue\nto go up this chain and so on and so forth. And what you'll see is that\neach one of these gadgets, one",
    "start": "4269870",
    "end": "4277470"
  },
  {
    "text": "of them hopefully will\npop the system call number into the\nappropriate RAX register.",
    "start": "4277470",
    "end": "4283500"
  },
  {
    "text": "So that by the time\nwe get up to here, I mean we basically\npolluted all the registers, with the system call number,\nbut hopefully just one of them",
    "start": "4283500",
    "end": "4291090"
  },
  {
    "text": "has to be correct, right. Because if one of our gadgets\ndoes this, then by the time we ret to here,\nwe'll get a pause.",
    "start": "4291090",
    "end": "4297610"
  },
  {
    "text": "Once again, that pause acts as\na signal to the attacker, OK. Because if this guest\naddress was wrong,",
    "start": "4297610",
    "end": "4304980"
  },
  {
    "text": "then probably the program's\ngoing to crash, right. So what does this phase\nof the attack let us do?",
    "start": "4304980",
    "end": "4311540"
  },
  {
    "text": "Well we still don't\nknow which gadgets pop into which registers,\nbut we know that one of them",
    "start": "4311540",
    "end": "4316860"
  },
  {
    "text": "is popped into RAX, which is\nthe one we want to control. And for sure we know the\naddress of syscall, right.",
    "start": "4316860",
    "end": "4323690"
  },
  {
    "text": "Because we were able to\ninduce the pause, right. So once we've done that, right.",
    "start": "4323690",
    "end": "4329330"
  },
  {
    "text": "Once we know for sure\nwhere this thing is, the address for syscall,\nthen we can actually just try the gadgets\none by one, right.",
    "start": "4329330",
    "end": "4336299"
  },
  {
    "text": "And see which one of\nthem is actually going to induce the pause, right. So in other words, cut all\nthe middleman here, let's",
    "start": "4336299",
    "end": "4341640"
  },
  {
    "text": "have a stack it looks like this,\nand then you just immediately jump to syscall. Did that cause the\npause or did it crash?",
    "start": "4341640",
    "end": "4347790"
  },
  {
    "text": "If it crashed, OK\nwe know this gadget, it pops to RDI for example. OK, get rid of that one, right. Try the next gadget, right.",
    "start": "4347790",
    "end": "4354769"
  },
  {
    "text": "Put the guest address-- put the,\nwell it's not guest anymore, put the real address\nfor syscall up here. Were we able to\npause the program?",
    "start": "4354769",
    "end": "4361011"
  },
  {
    "text": "Yes? Aha, so we know that pop\ngadget must pop into RAX.",
    "start": "4361011",
    "end": "4367420"
  },
  {
    "text": "So does that make sense? AUDIENCE: So the way to guess\nthe address for system call",
    "start": "4367420",
    "end": "4373280"
  },
  {
    "text": "is just blind transfer? PROFESSOR: Yeah, so\nthere-- so in the paper, they go into some\noptimizations about how",
    "start": "4373280",
    "end": "4378929"
  },
  {
    "text": "you can work in a PLT and\nall that kind of stuff. Like I said, I think it's easier\nto ignore that for a second, and just look toward\nthe simpler thing",
    "start": "4378929",
    "end": "4384690"
  },
  {
    "text": "first, but yeah in a simple\nattack that I'm describing, yeah you just put\nsome address up here and you just see if you pause.",
    "start": "4384690",
    "end": "4391272"
  },
  {
    "text": "So does that all make sense? OK so at the end of\nthis we actually know",
    "start": "4394070",
    "end": "4402369"
  },
  {
    "text": "the location of syscall. We know the location\nof the instruction",
    "start": "4402370",
    "end": "4407460"
  },
  {
    "text": "that does the pop into RAX. Now you can imagine that we\nalso need gadgets that pop into some other registers too.",
    "start": "4407460",
    "end": "4414300"
  },
  {
    "text": "Suffice to say, you can\ndo similar tests, right. So instead of like pushing a\nsystem call number for pause,",
    "start": "4414300",
    "end": "4419780"
  },
  {
    "text": "push it for some\nother command that now takes in all arguments in\nRAX and RDI for example, right.",
    "start": "4419780",
    "end": "4426889"
  },
  {
    "text": "Do the same type of test, right. So basically you can\nleverage the fact that for any particular\nset of registers",
    "start": "4426890",
    "end": "4432080"
  },
  {
    "text": "that you want to\nbe able to control, there's some system\ncall that will give you a signal as an attacker,\nthat allow you to figure out",
    "start": "4432080",
    "end": "4439070"
  },
  {
    "text": "whether you successfully\nbroke it or not. Right, so at the\nend of this phase, you basically have\nthe address of syscall",
    "start": "4439070",
    "end": "4445580"
  },
  {
    "text": "and the address of\na bunch of gadgets which allow you to pop\ninto arbitrary registers.",
    "start": "4445580",
    "end": "4451130"
  },
  {
    "text": "OK and so now let's\nsee so, step 4",
    "start": "4451130",
    "end": "4456900"
  },
  {
    "text": "is going to be to invoke write.",
    "start": "4456900",
    "end": "4459895"
  },
  {
    "text": "Step 4 is invoke the\nwrite system call.",
    "start": "4468970",
    "end": "4475924"
  },
  {
    "text": "So to invoke write, we need\nto have the following gadgets.",
    "start": "4478710",
    "end": "4484200"
  },
  {
    "text": "You need to be able to pop RDI. We need to be able to pop RSI.",
    "start": "4484200",
    "end": "4491400"
  },
  {
    "text": "We need to be able to pop RDX,\npop racks, and then invoke",
    "start": "4494310",
    "end": "4506490"
  },
  {
    "text": "syscall, right. So as it turns out,\nwhat are these registers being used for by system call?",
    "start": "4506490",
    "end": "4512950"
  },
  {
    "text": "So this is the socket, or more\ngenerally, the file descriptor that you're going\nto pass into write.",
    "start": "4512950",
    "end": "4520650"
  },
  {
    "text": "This is the buffer. This is the length\nof that buffer.",
    "start": "4520650",
    "end": "4525080"
  },
  {
    "text": "This is the syscall number.",
    "start": "4527680",
    "end": "4530150"
  },
  {
    "text": "And it is called syscall. Right, so if we found\nall these gadgets,",
    "start": "4533970",
    "end": "4539150"
  },
  {
    "text": "then we can actually\nnow control the values that are put into\nthose arguments, that",
    "start": "4539150",
    "end": "4544310"
  },
  {
    "text": "put in those registers,\nbecause we just pushed them on the stack, right. And so for example, what's\nthe socket going to be?",
    "start": "4544310",
    "end": "4549670"
  },
  {
    "text": "For once you're going to have\nto do a little guessing here, right. can take advantage of the\nfact that Linux restricts the number of simultaneous\nopen file connections,",
    "start": "4549670",
    "end": "4556960"
  },
  {
    "text": "for a file that's\ngoing to be 2024. And also it's supposed to\nbe the lowest one available. So we do a little bit of\nguessing here and figure out",
    "start": "4556960",
    "end": "4563858"
  },
  {
    "text": "what that socket\nis, put it in there. Now interestingly,\nwhat are we going to pass into the buff pointer?",
    "start": "4563858",
    "end": "4568920"
  },
  {
    "text": "Right, we're actually\ngoing to use the text segment of the program. We're actually going to pass in\nthat the pointer to somewhere",
    "start": "4568920",
    "end": "4575800"
  },
  {
    "text": "in the code of the program. So what's that going\nto allow us to do? That's going to allows us to\nread the binary, out of memory,",
    "start": "4575800",
    "end": "4583170"
  },
  {
    "text": "using the right call\nto the client socket. So that the attacker can\nthen take that binary,",
    "start": "4583170",
    "end": "4589740"
  },
  {
    "text": "analyze it offline, right. Just use GDB, or\nwhatever, to figure out where everything is located.",
    "start": "4589740",
    "end": "4595080"
  },
  {
    "text": "The attacker knows that now,\nevery time the server crashes, it's going to have the same\nrandomized set of things in it.",
    "start": "4595080",
    "end": "4601300"
  },
  {
    "text": "So now, once the attacker can\nfind out addresses and offsets for stuff, now the\nattacker can directly",
    "start": "4601300",
    "end": "4606350"
  },
  {
    "text": "attack those gadgets, right. Directly attack other\nvulnerabilities, figure out how to open up a\nshell, so on and so forth.",
    "start": "4606350",
    "end": "4612330"
  },
  {
    "text": "So in other words,\nat the point you exfiltrated the binary to the\nattacker, you basically lost.",
    "start": "4612330",
    "end": "4617880"
  },
  {
    "text": "Right, so this is essentially\nhow the BROP attack works. Like I said, in\nthe paper, there's",
    "start": "4617880",
    "end": "4623870"
  },
  {
    "text": "a bunch of optimization,\nbut really you need to understand this\nstuff, the basic stuff, before that optimization\nwill start to make sense.",
    "start": "4623870",
    "end": "4630020"
  },
  {
    "text": "And so we can talk about the\noptimization with me offline if you want, or after class. But to suffice it\nto say, this is the basics of how you\nlaunch that BROP attack.",
    "start": "4630020",
    "end": "4637270"
  },
  {
    "text": "You've got to find\nthe stop gadget, find those gadgets\nthat pop stack entries.",
    "start": "4637270",
    "end": "4643230"
  },
  {
    "text": "Figure out which\nof those registers those gadgets pop\ninto, and find out how to figure out where\nsyscall is, and then invoke",
    "start": "4643230",
    "end": "4650330"
  },
  {
    "text": "write by accumulating\nall that knowledge. So very quickly, how do\nyou defend against BROP?",
    "start": "4650330",
    "end": "4655729"
  },
  {
    "text": "Well the most obvious\nthing is you've got to rerandomize, right. So the fact that\ncrashed servers do not",
    "start": "4655729",
    "end": "4661810"
  },
  {
    "text": "respawn, rerandomize\nversions of themselves, that allows the crash to\nact as a signal that let's",
    "start": "4661810",
    "end": "4668000"
  },
  {
    "text": "the attacker test\nvarious hypotheses about how the programs working. So one simple defense\nis to make sure",
    "start": "4668000",
    "end": "4674989"
  },
  {
    "text": "that you do exec when you spawn\nyour process, instead of fork, right. Because when you exec the\nprocess, you create totally new",
    "start": "4674990",
    "end": "4681990"
  },
  {
    "text": "randomized layout space,\nat least on Linux, right. So on Linux, when you compile\nwith this PIE, the Position",
    "start": "4681990",
    "end": "4687050"
  },
  {
    "text": "Independent Executable\nflag, you only get that randomized\naddress space",
    "start": "4687050",
    "end": "4692420"
  },
  {
    "text": "that's new if you use exec. So another event you can\nuse is just use Windows,",
    "start": "4692420",
    "end": "4697730"
  },
  {
    "text": "because Windows\nbasically does not have a fork equivalent, right. So hooray for us.",
    "start": "4697730",
    "end": "4703890"
  },
  {
    "text": "So that means that\non Windows, whenever you spawn that new\nserver, it's always going to have a new\nrandomized address space.",
    "start": "4703890",
    "end": "4711949"
  },
  {
    "text": "I think someone over here\nmentioned something like, what would happen\nif for example, when the server crashed,\nit didn't actually",
    "start": "4711950",
    "end": "4718340"
  },
  {
    "text": "close the connection? Right, so you can\nimagine one thing that when a crash takes place,\nwe somehow catch that fault",
    "start": "4718340",
    "end": "4725360"
  },
  {
    "text": "and then we keep that connection\nopen for a little while to confuse the attacker\nand remove that signal,",
    "start": "4725360",
    "end": "4731309"
  },
  {
    "text": "that something's gone amiss. So that's something\nyou definitely do. What's hilarious about that\nis, that now your BROP attack",
    "start": "4731310",
    "end": "4737719"
  },
  {
    "text": "turns into a denial\nof service attack. Because now you just got\nall the potential zombie",
    "start": "4737720",
    "end": "4743280"
  },
  {
    "text": "processes that are sitting\naround, they segfaulted. They're useless in\nsociety, but you can't let them go, because\notherwise you're going",
    "start": "4743280",
    "end": "4749421"
  },
  {
    "text": "to delete this information. Another thing you\nmight think about to, is you could do bounds\nchecking, right. We just talked a bunch\nabout that, right.",
    "start": "4749421",
    "end": "4756039"
  },
  {
    "text": "But in the paper, they\ncasually dismiss this as saying it has\nup to 2x overhead, so nobody's going to do that,\nbut you could in fact do that.",
    "start": "4756040",
    "end": "4764870"
  },
  {
    "text": "So that's basically\nhow BROP works. As for the homework\nquestion, the homework questions a bit subtle, because\nthe homework question says,",
    "start": "4764870",
    "end": "4772140"
  },
  {
    "text": "what if you use a hash of\nthe current time, right? Get time of day when you\nrestarted the program.",
    "start": "4772140",
    "end": "4779060"
  },
  {
    "text": "Is that sufficient to\nprevent this type of attack? Well note that, hashing\ndoes not magically",
    "start": "4779060",
    "end": "4786780"
  },
  {
    "text": "provide you bits of entropy\nif the input to the hash is easily guessable, right.",
    "start": "4786780",
    "end": "4791889"
  },
  {
    "text": "If I know that you're only\ngoing to hash one or two things, it doesn't matter if I have\nlike some a jillion bit hash.",
    "start": "4791890",
    "end": "4798159"
  },
  {
    "text": "Doesn't matter. So I can just guess one of those\ntwo values and see what is. So the thing to note is\nthat get time of day,",
    "start": "4798160",
    "end": "4803580"
  },
  {
    "text": "actually has much less\nentropy than you might think. Particularly because the\nattacker can actually",
    "start": "4803580",
    "end": "4809070"
  },
  {
    "text": "check what time he or she is\nlaunching the attack, right. So that's going to actually\nremove a bunch of entropy",
    "start": "4809070",
    "end": "4815150"
  },
  {
    "text": "from that calculation, right. So there's some\nsubtleties there. What's the server skew in\nterms of clock or the client",
    "start": "4815150",
    "end": "4821860"
  },
  {
    "text": "and so on and so forth. The long story short, using\na guessable base value, even with guessable\njust inside of a range,",
    "start": "4821860",
    "end": "4828830"
  },
  {
    "text": "is super useful for\nthe attacker, right. Particularly\nbecause the attack-- we can start subverting a\nbunch of servers in parallel",
    "start": "4828830",
    "end": "4835680"
  },
  {
    "text": "and know that all\nof them should have fairly similar values, right. This is a high order\nof bits, right.",
    "start": "4835680",
    "end": "4841440"
  },
  {
    "text": "So long story\nshort, the answer is that, it's literally better\nthan nothing to randomize,",
    "start": "4841440",
    "end": "4847730"
  },
  {
    "text": "if you use get time of day, but\nit doesn't actually provide you as much security as you think. And the other lesson too\nis, that just because you",
    "start": "4847730",
    "end": "4853953"
  },
  {
    "text": "hash something\nright, that doesn't matter if you're not actually\nusing that hash in a smart way.",
    "start": "4853953",
    "end": "4859052"
  },
  {
    "text": "You have a question? AUDIENCE: Oh, still when I\ndid the calculations that some [INAUDIBLE] it seems\nlike maybe to be",
    "start": "4859052",
    "end": "4869604"
  },
  {
    "text": "able to get the offset\nthat the [INAUDIBLE] your [INAUDIBLE]\nstart the process",
    "start": "4869604",
    "end": "4877615"
  },
  {
    "text": "to within like 48 milliseconds? PROFESSOR: Yes and\ngetting the timing right depends on a bunch of\ndifferent things, right.",
    "start": "4877616",
    "end": "4882780"
  },
  {
    "text": "But you could take\nadvantage of the fact that the attacker can open\nup a bunch of connections in parallel, and\nleverage the fact that even if the initial\nguess a little bit off,",
    "start": "4882780",
    "end": "4889640"
  },
  {
    "text": "you can still launch\nmultiple guesses on what should be very\nsimilar canary values, and do that attack in parallel.",
    "start": "4889640",
    "end": "4895500"
  },
  {
    "text": "But you're right, there's\ntricky time and issues.",
    "start": "4895500",
    "end": "4897650"
  }
]