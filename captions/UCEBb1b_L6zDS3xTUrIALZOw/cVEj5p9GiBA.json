[
  {
    "text": "If the symbols we are trying to encode occur\nwith equal probability (or if we have no a",
    "start": "1060",
    "end": "6060"
  },
  {
    "text": "priori reason to believe otherwise), then\nwe'll use a fixed-length encoding, where all",
    "start": "6060",
    "end": "11391"
  },
  {
    "text": "leaves in the encoding's binary tree are the\nsame distance from the root.",
    "start": "11391",
    "end": "17258"
  },
  {
    "text": "Fixed-length encodings have the advantage\nof supporting random access, where we can",
    "start": "17259",
    "end": "20810"
  },
  {
    "text": "figure out the Nth symbol of the message by\nsimply skipping over the required number of",
    "start": "20810",
    "end": "25749"
  },
  {
    "text": "bits.",
    "start": "25749",
    "end": "26890"
  },
  {
    "text": "For example, in a message encoded using the\nfixed-length code shown here, if we wanted",
    "start": "26890",
    "end": "32150"
  },
  {
    "text": "to determine the third symbol in the encoded\nmessage, we would skip the 4 bits used to",
    "start": "32150",
    "end": "36840"
  },
  {
    "text": "encode the first two symbols and start decoding\nwith the 5th bit of message.",
    "start": "36840",
    "end": "43170"
  },
  {
    "text": "Mr. Blue is telling us about the entropy for\nrandom variables that have N equally-probable",
    "start": "43170",
    "end": "48649"
  },
  {
    "text": "outcomes.",
    "start": "48650",
    "end": "49990"
  },
  {
    "text": "In this case, each element of the sum in the\nentropy formula is simply (1/N)*log2(N), and,",
    "start": "49990",
    "end": "57610"
  },
  {
    "text": "since there are N elements in the sequence,\nthe resulting entropy is just log2(N).",
    "start": "57610",
    "end": "63830"
  },
  {
    "text": "Let's look at some simple examples.",
    "start": "63830",
    "end": "66040"
  },
  {
    "text": "In binary-coded decimal, each digit of a decimal\nnumber is encoded separately.",
    "start": "66040",
    "end": "71420"
  },
  {
    "text": "Since there are 10 different decimal digits,\nwe'll need to use a 4-bit code to represent",
    "start": "71420",
    "end": "76100"
  },
  {
    "text": "the 10 possible choices.",
    "start": "76100",
    "end": "78479"
  },
  {
    "text": "The associated entropy is log2(10), which\nis 3.322 bits.",
    "start": "78479",
    "end": "84890"
  },
  {
    "text": "We can see that our chosen encoding is inefficient\nin the sense that we'd use more than the minimum",
    "start": "84890",
    "end": "90020"
  },
  {
    "text": "number of bits necessary to encode, say, a\nnumber with 1000 decimal digits: our encoding",
    "start": "90020",
    "end": "95640"
  },
  {
    "text": "would use 4000 bits, although the entropy\nsuggests we *might* be able to find a shorter",
    "start": "95640",
    "end": "100749"
  },
  {
    "text": "encoding, say, 3400 bits, for messages of\nlength 1000.",
    "start": "100749",
    "end": "106959"
  },
  {
    "text": "Another common encoding is ASCII, the code\nused to represent English text in computing",
    "start": "106959",
    "end": "111860"
  },
  {
    "text": "and communication.",
    "start": "111860",
    "end": "113340"
  },
  {
    "text": "ASCII has 94 printing characters, so the associated\nentropy is log2(94) or 6.555 bits, so we would",
    "start": "113340",
    "end": "122798"
  },
  {
    "text": "use 7 bits in our fixed-length encoding for\neach character.",
    "start": "122799",
    "end": "128350"
  },
  {
    "text": "One of the most important encodings is the\none we use to represent numbers.",
    "start": "128350",
    "end": "132590"
  },
  {
    "text": "Let's start by thinking about a representation\nfor unsigned integers, numbers starting at",
    "start": "132590",
    "end": "137260"
  },
  {
    "text": "0 and counting up from there.",
    "start": "137260",
    "end": "139780"
  },
  {
    "text": "Drawing on our experience with representing\ndecimal numbers, i.e., representing numbers",
    "start": "139780",
    "end": "144410"
  },
  {
    "text": "in \"base 10\" using the 10 decimal digits,\nour binary representation of numbers will",
    "start": "144410",
    "end": "149180"
  },
  {
    "text": "use a \"base 2\" representation using the two\nbinary digits.",
    "start": "149180",
    "end": "154329"
  },
  {
    "text": "The formula for converting an N-bit binary\nrepresentation of a numeric value into the",
    "start": "154329",
    "end": "158780"
  },
  {
    "text": "corresponding integer is shown below – just\nmultiply each binary digit by its corresponding",
    "start": "158780",
    "end": "164450"
  },
  {
    "text": "weight in the base-2 representation.",
    "start": "164450",
    "end": "167280"
  },
  {
    "text": "For example, here's a 12-bit binary number,\nwith the weight of each binary digit shown",
    "start": "167280",
    "end": "172390"
  },
  {
    "text": "above.",
    "start": "172390",
    "end": "173450"
  },
  {
    "text": "We can compute its value as 0*2^11 plus 1*2^10\nplus 1*2^9, and so on.",
    "start": "173450",
    "end": "182790"
  },
  {
    "text": "Keeping only the non-zero terms and expanding\nthe powers-of-two gives us the sum 1024 +",
    "start": "182790",
    "end": "188870"
  },
  {
    "text": "512 + 256 + 128 + 64 + 16 which, expressed\nin base-10, sums to the number 2000.",
    "start": "188870",
    "end": "202150"
  },
  {
    "text": "With this N-bit representation, the smallest\nnumber that can be represented is 0 (when",
    "start": "202150",
    "end": "207140"
  },
  {
    "text": "all the binary digits are 0) and the largest\nnumber is 2^N – 1 (when all the binary digits",
    "start": "207140",
    "end": "214090"
  },
  {
    "text": "are 1).",
    "start": "214090",
    "end": "216099"
  },
  {
    "text": "Many digital systems are designed to support\noperations on binary-encoded numbers of some",
    "start": "216099",
    "end": "221000"
  },
  {
    "text": "fixed size, e.g., choosing a 32-bit or a 64-bit\nrepresentation, which means that they would",
    "start": "221000",
    "end": "227379"
  },
  {
    "text": "need multiple operations when dealing with\nnumbers too large to be represented as a single",
    "start": "227379",
    "end": "232469"
  },
  {
    "text": "32-bit or 64-bit binary string.",
    "start": "232469",
    "end": "236180"
  },
  {
    "text": "Long strings of binary digits are tedious\nand error-prone to transcribe, so let's find",
    "start": "236180",
    "end": "241019"
  },
  {
    "text": "a more convenient notation, ideally one where\nit will be easy to recover the original bit",
    "start": "241019",
    "end": "246090"
  },
  {
    "text": "string without too many calculations.",
    "start": "246090",
    "end": "248079"
  },
  {
    "text": "A good choice is to use a representation based\non a radix that's some higher power of 2,",
    "start": "248079",
    "end": "254420"
  },
  {
    "text": "so each digit in our representation corresponds\nto some short contiguous string of binary",
    "start": "254420",
    "end": "259470"
  },
  {
    "text": "bits.",
    "start": "259470",
    "end": "260590"
  },
  {
    "text": "A popular choice these days is a radix-16\nrepresentation, called hexadecimal or \"hex\"",
    "start": "260590",
    "end": "266250"
  },
  {
    "text": "for short, where each group of 4 binary digits\nis represented using a single hex digit.",
    "start": "266250",
    "end": "272259"
  },
  {
    "text": "Since there are 16 possible combinations of\n4 binary bits, we'll need 16 hexadecimal \"digits\":",
    "start": "272259",
    "end": "279600"
  },
  {
    "text": "we'll borrow the ten digits \"0\" through \"9\"\nfrom the decimal representation, and then",
    "start": "279600",
    "end": "284330"
  },
  {
    "text": "simply use the first six letters of the alphabet,\n\"A\" through \"F\", for the remaining digits.",
    "start": "284330",
    "end": "290340"
  },
  {
    "text": "The translation between 4-bit binary and hexadecimal\nis shown in the table to the left below.",
    "start": "290340",
    "end": "297150"
  },
  {
    "text": "To convert a binary number to \"hex\", group\nthe binary digits into sets of 4, starting",
    "start": "297150",
    "end": "302840"
  },
  {
    "text": "with the least-significant bit (that's the\nbit with weight 2^0).",
    "start": "302840",
    "end": "307830"
  },
  {
    "text": "Then use the table to convert each 4-bit pattern\ninto the corresponding hex digit: \"0000\" is",
    "start": "307830",
    "end": "314280"
  },
  {
    "text": "the hex digit \"0\", \"1101\" is the hex digit\n\"D\", and \"0111\" is the hex digit \"7\".",
    "start": "314280",
    "end": "322430"
  },
  {
    "text": "The resulting hex representation is \"7D0\".",
    "start": "322430",
    "end": "326840"
  },
  {
    "text": "To prevent any confusion, we'll use a special\nprefix \"0x\" to indicate when a number is being",
    "start": "326840",
    "end": "332169"
  },
  {
    "text": "shown in hex, so we'd write \"0x7D0\" as the\nhex representation for the binary number \"0111",
    "start": "332170",
    "end": "341380"
  },
  {
    "text": "1101 0000\".",
    "start": "341380",
    "end": "345160"
  },
  {
    "text": "This notation convention is used by many programming\nlanguages for entering binary bit strings.",
    "start": "345160",
    "end": "350320"
  }
]