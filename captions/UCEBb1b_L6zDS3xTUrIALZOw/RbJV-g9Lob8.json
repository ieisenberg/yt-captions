[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Our final challenge is figuring out how to\nrepresent signed integers, for example, what",
    "start": "830",
    "end": "4770"
  },
  {
    "text": "should be our representation for the number\n-2000?",
    "start": "4770",
    "end": "8800"
  },
  {
    "text": "In decimal notation, the convention is to\nprecede the number with a \"+\" or \"-\" to indicate",
    "start": "8800",
    "end": "14040"
  },
  {
    "text": "whether it's positive or negative, usually\nomitting the \"+\" to simplify the notation",
    "start": "14040",
    "end": "18400"
  },
  {
    "text": "for positive numbers.\nWe could adopt a similar notation -- called",
    "start": "18400",
    "end": "22580"
  },
  {
    "text": "\"signed magnitude\" -- in binary, by allocating\na separate bit at the front of the binary",
    "start": "22580",
    "end": "28430"
  },
  {
    "text": "string to indicate the sign, say \"0\" for positive\nnumbers and \"1\" for negative numbers.",
    "start": "28430",
    "end": "33830"
  },
  {
    "text": "So the signed-magnitude representation for\n-2000 would be an initial \"1\" to indicate",
    "start": "33830",
    "end": "39010"
  },
  {
    "text": "a negative number, followed by the representation\nfor 2000 (as described on the previous two",
    "start": "39010",
    "end": "43570"
  },
  {
    "text": "slides).\nHowever there are some complications in using",
    "start": "43570",
    "end": "47540"
  },
  {
    "text": "a signed-magnitude representation.\nThere are two possible binary representations",
    "start": "47540",
    "end": "51980"
  },
  {
    "text": "for zero: \"+0\" and \"-0\".\nThis makes the encoding slightly inefficient",
    "start": "51980",
    "end": "57140"
  },
  {
    "text": "but, more importantly, the circuitry for doing\naddition of signed-magnitude numbers is different",
    "start": "57140",
    "end": "62300"
  },
  {
    "text": "than the circuitry for doing subtraction.\nOf course, we're used to that – in elementary",
    "start": "62300",
    "end": "67220"
  },
  {
    "text": "school we learned one technique for addition\nand another for subtraction.",
    "start": "67220",
    "end": "72330"
  },
  {
    "text": "To keep the circuitry simple, most modern\ndigital systems use the two's complement binary",
    "start": "72330",
    "end": "77580"
  },
  {
    "start": "73000",
    "end": "73000"
  },
  {
    "text": "representation for signed numbers.\nIn this representation, the high-order bit",
    "start": "77580",
    "end": "82390"
  },
  {
    "text": "of an N-bit two's complement number has a\nnegative weight, as shown in the figure.",
    "start": "82390",
    "end": "87370"
  },
  {
    "text": "Thus all negative numbers have a 1 in the\nhigh-order bit and, in that sense, the high-order",
    "start": "87370",
    "end": "92100"
  },
  {
    "text": "bit is serving as the \"sign bit\" – if it's\n1, the represented number is negative.",
    "start": "92100",
    "end": "97640"
  },
  {
    "text": "The most negative N-bit number has a 1-bit\nin the high-order position, representing the",
    "start": "97640",
    "end": "101820"
  },
  {
    "text": "value -2^(N-1).\nThe most positive N-bit number has a 0 in",
    "start": "101820",
    "end": "108120"
  },
  {
    "text": "the negative-weight high-order bit and 1's\nfor all the positive-weight bits, representing",
    "start": "108120",
    "end": "112940"
  },
  {
    "text": "the value 2^(N-1)-1.\nThis gives us the range of possible values",
    "start": "112940",
    "end": "120030"
  },
  {
    "text": "– for example, in an 8-bit two's complement\nrepresentation, the most negative number is",
    "start": "120030",
    "end": "127220"
  },
  {
    "text": "-2^7 = -128 and the most positive number is\n2^7 – 1 = 127.",
    "start": "127220",
    "end": "136220"
  },
  {
    "text": "If all N bits are 1, think of that as the\nsum of the most negative number with the most",
    "start": "136220",
    "end": "140700"
  },
  {
    "text": "positive number, i.e., -2^(N-1) + 2^(N-1)-1,\nwhich equals -1.",
    "start": "140700",
    "end": "151120"
  },
  {
    "text": "And, of course, if all N bits are 0, that's\nthe unique representation of 0.",
    "start": "151120",
    "end": "158030"
  },
  {
    "text": "Let's see what happens when we add the N-bit\nvalues for -1 and 1, keeping an N-bit answer.",
    "start": "158030",
    "end": "164390"
  },
  {
    "start": "159000",
    "end": "159000"
  },
  {
    "text": "In the rightmost column, 1 plus 1 is 0, carry\nthe 1.",
    "start": "164390",
    "end": "169280"
  },
  {
    "text": "In the second column, the carry of 1 plus\n1 plus 0 is 0, carry the 1.",
    "start": "169280",
    "end": "174280"
  },
  {
    "text": "And so on – the result is all zero's, the\nrepresentation for 0… perfect!",
    "start": "174280",
    "end": "180400"
  },
  {
    "text": "Notice that we just used ordinary binary addition,\neven when one or both of the operands are",
    "start": "180400",
    "end": "186319"
  },
  {
    "text": "negative.\nTwo's complement is perfect for N-bit arithmetic!",
    "start": "186320",
    "end": "191960"
  },
  {
    "text": "To compute B - A, we can just use addition\nand compute B + (-A).",
    "start": "191960",
    "end": "197710"
  },
  {
    "text": "So now we just need to figure out the two's\ncomplement representation for –A, given",
    "start": "197710",
    "end": "202239"
  },
  {
    "text": "the two's complement representation for A.\nWell, we know that A + (-A) = 0 and using",
    "start": "202239",
    "end": "209849"
  },
  {
    "text": "the example above, we can rewrite 0 as 1 +\n(-1).",
    "start": "209849",
    "end": "214870"
  },
  {
    "text": "Reorganizing terms, we see that –A equals\n1 plus the quantity (-1) – A.",
    "start": "214870",
    "end": "221650"
  },
  {
    "text": "As we saw above, the two's complement representation\nfor -1 is all 1-bits, so we can write that",
    "start": "221650",
    "end": "227379"
  },
  {
    "text": "subtraction as all 1's minus the individual\nbits of A: A_0, A_1, … up to A_N-1.",
    "start": "227380",
    "end": "235660"
  },
  {
    "text": "If a particular bit A_i is 0, then 1-A_i = 1\nand if A_i is 1, then 1-A_i = 0.",
    "start": "235660",
    "end": "245290"
  },
  {
    "text": "So in each column, the result is the bitwise\ncomplement of A_i, which we'll write using",
    "start": "245290",
    "end": "250849"
  },
  {
    "text": "the C-language bitwise complement operator\ntilde.",
    "start": "250850",
    "end": "254730"
  },
  {
    "text": "So we see that –A equals the bitwise complement\nof A plus 1.",
    "start": "254730",
    "end": "259958"
  },
  {
    "text": "Ta-dah!\nTo practice your skill with two's complement,",
    "start": "259959",
    "end": "263779"
  },
  {
    "text": "try your hand at the following exercises.\nAll you need to remember is how to do binary",
    "start": "263779",
    "end": "268419"
  },
  {
    "text": "addition and two's complement negation (which\nis \"bitwise complement and add 1\").",
    "start": "268420",
    "end": "273480"
  }
]