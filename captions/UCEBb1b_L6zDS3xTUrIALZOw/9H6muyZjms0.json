[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "7029"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation, or\nview additional materials",
    "start": "7030",
    "end": "13990"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu",
    "start": "13990",
    "end": "31279"
  },
  {
    "text": "PROFESSOR: All right, everyone. Good afternoon. Let's get started. So today's lecture will be on\ntesting, debugging, and then",
    "start": "31279",
    "end": "38160"
  },
  {
    "text": "exceptions and assertions. So before we begin, let's start\nwith an analogy to sort of come",
    "start": "38160",
    "end": "44100"
  },
  {
    "text": "back to real life for a second. So I've made soup before. Perhaps you've made soup before.",
    "start": "44100",
    "end": "50670"
  },
  {
    "text": "Let's say you're making\nsoup in this big pot here. And it turns out that bugs\nkeep falling into your soup",
    "start": "50670",
    "end": "57690"
  },
  {
    "text": "from the ceiling. All right. Quick question to the audience. What do you do if you\nencountered this issue?",
    "start": "57690",
    "end": "64122"
  },
  {
    "text": "AUDIENCE: [INTERPOSING VOICES] PROFESSOR: All right. Hands up. One one at a time.",
    "start": "64122",
    "end": "70496"
  },
  {
    "text": "Anyone have any idea? Yeah. AUDIENCE: Eat it. PROFESSOR: Eat it. You want to eat it Anyway OK. All right.",
    "start": "70496",
    "end": "75690"
  },
  {
    "text": "We're going for an analogy\nhere with computer programming. I don't know what you'd do\nif you have a buggy program, I guess you just release\nit to the customer",
    "start": "75690",
    "end": "82379"
  },
  {
    "text": "and they'd complain, but. OK. What else? Yeah. AUDIENCE: [INAUDIBLE]\nCover the soup? PROFESSOR: Cover the soup.",
    "start": "82379",
    "end": "87900"
  },
  {
    "text": "That's a good suggestion. Yeah. So you can cover the\nsoup, so put a lid on it.",
    "start": "87900",
    "end": "93119"
  },
  {
    "text": "Sometimes you'd have to\nopen up, take the lid off, right, to check to\nmake sure it's done. To taste it, add things.",
    "start": "93120",
    "end": "99149"
  },
  {
    "text": "So bugs might fall\nin in between there. But covering the\nsoup is a good idea. What else. Yeah. AUDIENCE: Debug it.",
    "start": "99150",
    "end": "104967"
  },
  {
    "text": "PROFESSOR: Debug it.  I wish I had something\nfor that answer.",
    "start": "104967",
    "end": "110909"
  },
  {
    "text": "All right. That's a good answer. Yeah. AUDIENCE: Take all the\nfood out of your house so there's no-- nothing\nfor the bugs to eat.",
    "start": "110910",
    "end": "116654"
  },
  {
    "text": "PROFESSOR: So take all\nthe food out of your house so there's nothing\nfor the bugs to eat. That's sort of the\nequivalent of cleaning,",
    "start": "116654",
    "end": "124530"
  },
  {
    "text": "like doing a mass cleaning\nof your entire house. That's a good,\nthat's a good one. That's sort of eliminating\nthe source of the bugs, right?",
    "start": "124530",
    "end": "132810"
  },
  {
    "text": "What else?  Yeah, John. AUDIENCE: Decide\nit's high protein",
    "start": "132810",
    "end": "138176"
  },
  {
    "text": "and declare it a feature. PROFESSOR: Decide\nit's high protein and declare it a feature.",
    "start": "138176",
    "end": "143330"
  },
  {
    "text": "That's probably what a lot\nof people would do, right? All right. Cool. So I wish computer debugging\nwas as fun as taking bugs out",
    "start": "143330",
    "end": "154340"
  },
  {
    "text": "of your soup. So what did we decide? Well we could check\nthe soup for bugs. Keep the lid closed, that\nwas a good suggestion.",
    "start": "154340",
    "end": "160610"
  },
  {
    "text": "And cleaning your kitchen,\nwhich someone suggested. The equivalent of\ncleaning their kitchen was to just throw\nout all the food.",
    "start": "160610",
    "end": "166730"
  },
  {
    "text": "I would take a mop\nand clean the floor, but yeah, that works too. So we can draw some\nparallels for this analogy",
    "start": "166730",
    "end": "177267"
  },
  {
    "text": "with computer programming. So checking the soup is really\nequivalent to testing, right? You have a soup you\nthink has bugs in it.",
    "start": "177267",
    "end": "184980"
  },
  {
    "text": "Test it. Make sure there's no bugs. Continue on. Keeping the lid closed. It's sort of this idea\nof defensive programming.",
    "start": "184980",
    "end": "191820"
  },
  {
    "text": "So make sure that bugs don't\nfall in in the first place. Sometimes you have\nto open the lid to make sure that the soup\nis tastes good or whatever.",
    "start": "191820",
    "end": "200254"
  },
  {
    "text": "So that's equivalent to\ndefensive programming. So try not to have bugs\nin the first place, but they might show up anyway.",
    "start": "200254",
    "end": "205984"
  },
  {
    "text": "Cleaning the kitchen is\neliminating the source of the bugs in the first place. This is actually really\nhard to do in programming.",
    "start": "205984",
    "end": "213049"
  },
  {
    "text": "But you can still try to do it. OK. So let's talk a little\nbit about programming",
    "start": "213050",
    "end": "220010"
  },
  {
    "text": "so far in 60001 600. So you expect, really,\nthat you write a program,",
    "start": "220010",
    "end": "226349"
  },
  {
    "text": "you maybe do a little debugging,\nand you run the program and it's perfect. Right?",
    "start": "226350",
    "end": "231920"
  },
  {
    "text": "You just nailed it. But in reality you write this\nreally complex piece of code and you go to run\nit and it crashes.",
    "start": "231920",
    "end": "241470"
  },
  {
    "text": "Right? It's happened to me many times. It's happened to you many times.",
    "start": "241470",
    "end": "246920"
  },
  {
    "text": "That's the reality. OK. So today's lecture will go\nover some tips and tricks",
    "start": "246920",
    "end": "252579"
  },
  {
    "text": "and debugging and how you can\nhelp make your life easier when you're writing\nprograms so you don't end up",
    "start": "252580",
    "end": "258515"
  },
  {
    "text": "like this little girl here. Disappointed beyond belief. All right. So at the heart of\nit all is really",
    "start": "258515",
    "end": "265500"
  },
  {
    "text": "starting with a defensive\nprogramming attitude. OK. And this comes back to\nthe idea of decomposition",
    "start": "265500",
    "end": "271860"
  },
  {
    "text": "and abstraction that we talked\nabout when we started-- when we did the lecture on functions.",
    "start": "271860",
    "end": "277350"
  },
  {
    "text": "Right? So try to start out with two\nmodularize your code, right? If you write your code\nin different blocks,",
    "start": "277350",
    "end": "284370"
  },
  {
    "text": "documenting each\ndifferent block, you're more likely to understand\nwhat's happening in your code",
    "start": "284370",
    "end": "289380"
  },
  {
    "text": "later on and you'll be\nable to test it and debug it a lot easier. Speaking of testing\nand debugging,",
    "start": "289380",
    "end": "296210"
  },
  {
    "text": "once you've written a\nprogram that's modular, you still have to test it.",
    "start": "296210",
    "end": "303690"
  },
  {
    "text": "And the process of\ntesting is really just coming up with inputs.",
    "start": "303690",
    "end": "308759"
  },
  {
    "text": "Figuring out what\noutputs you expect. And then running your program. Does the output that the program\ngive match what you expected?",
    "start": "308760",
    "end": "317610"
  },
  {
    "text": "If it does, great, you're done. But if it doesn't, you have\nto go to this debugging step.",
    "start": "317610",
    "end": "322949"
  },
  {
    "text": "And the debugging step\nis the hardest part. And it's really just figuring\nout why the program crashed,",
    "start": "322950",
    "end": "328471"
  },
  {
    "text": "or why the program didn't\ngive you the answer that you expected it to give.",
    "start": "328471",
    "end": "333860"
  },
  {
    "text": "So as I mentioned, the\nmost important thing is to do defensive\nprogramming and to that end, you want to set yourself up\nfor easy testing and debugging.",
    "start": "333860",
    "end": "342200"
  },
  {
    "text": "Which really comes\ndown to making sure that the code you\nwrite is modular. So write as many\nfunctions as you can.",
    "start": "342200",
    "end": "349330"
  },
  {
    "text": "Document what the functions do. Document their constraints. And it'll make your life a\nlittle bit easier later on",
    "start": "349330",
    "end": "356080"
  },
  {
    "text": "when you have to debug it. When do you want\nto start testing? Well first you have to make\nsure your program runs.",
    "start": "356080",
    "end": "363430"
  },
  {
    "text": "So eliminate syntax errors\nand static semantic errors which, by the way, Python\ncan easily catch for you.",
    "start": "363430",
    "end": "370969"
  },
  {
    "text": "Once you've ensured that\na piece of code runs, then you want to come\nup with some test cases.",
    "start": "370970",
    "end": "375980"
  },
  {
    "text": "So this is pairs\nof input and output for what you expect\nthe program to do.",
    "start": "375980",
    "end": "383220"
  },
  {
    "text": "Once you have your test cases\nand a piece of code that runs, you can start doing tests.",
    "start": "383220",
    "end": "389419"
  },
  {
    "text": "So there's three general classes\nof tests that you can do. The first is called\nunit testing.",
    "start": "389420",
    "end": "395120"
  },
  {
    "text": "And if you've written functions,\nunit testings-- testing just makes sure that, for example,\neach function runs according",
    "start": "395120",
    "end": "401210"
  },
  {
    "text": "to the specifications. So you do this multiple times. As you're testing each\nfunction, you might find a bug.",
    "start": "401210",
    "end": "409500"
  },
  {
    "text": "At that point, you do\nregression testing. Come up with a test case\nthat found that bug.",
    "start": "409500",
    "end": "416350"
  },
  {
    "text": "And run all of the different\npieces of your code again to make sure that\nwhen you fix the bug,",
    "start": "416350",
    "end": "422290"
  },
  {
    "text": "you don't re-introduce new bugs\ninto pieces of the code that had already run.",
    "start": "422290",
    "end": "428610"
  },
  {
    "text": "So you do this a bunch of times. You do a little bit\nof unit testing, a little bit of regression\ntesting, and keep doing that.",
    "start": "428610",
    "end": "433880"
  },
  {
    "text": "At some point, you're ready\nto do integration testing. Which means, test your\nprogram as a whole. Does the overall program work?",
    "start": "433880",
    "end": "440564"
  },
  {
    "text": "So this is the\npart where you take all of the individual\npieces, put them together. And integration testing\ntests to make sure",
    "start": "440564",
    "end": "446960"
  },
  {
    "text": "that the interactions between\nall of the different pieces works as expected.",
    "start": "446960",
    "end": "453740"
  },
  {
    "text": "If it does, great, you're done. But if it doesn't,\nthen you'll have to go back to unit testing, and\nregression testing, and so on.",
    "start": "453740",
    "end": "458819"
  },
  {
    "text": "So it's really a\ncycle of testing. ",
    "start": "458820",
    "end": "465050"
  },
  {
    "text": "So what are some\ntesting approaches? The first, and this is probably\nmost common with programs",
    "start": "465050",
    "end": "470689"
  },
  {
    "text": "that involve numbers,\nis figuring out some natural boundaries for\nthe numbers-- for the program, sorry.",
    "start": "470689",
    "end": "477180"
  },
  {
    "text": "So for example, if I have\na function is_bigger, and it compares if\nx is bigger than y,",
    "start": "477180",
    "end": "484380"
  },
  {
    "text": "then some natural boundary,\ngiven the specification, is if x is less than\ny, x is greater than y,",
    "start": "484380",
    "end": "489810"
  },
  {
    "text": "x is equal to y. Maybe throw in less than\nor equal to or greater or equal to, and so on.",
    "start": "489810",
    "end": "495430"
  },
  {
    "text": "So that's just sort of an\nintuition about the problem. It's possible you have some\nproblems for which there",
    "start": "495430",
    "end": "502220"
  },
  {
    "text": "are no natural partitions. In which case, you might\ndo some random testing, and then the more\nrandom testing you",
    "start": "502220",
    "end": "508130"
  },
  {
    "text": "do, the greater the likelihood\nthat your program is correct. But there's actually two more\nrigorous ways to do testing.",
    "start": "508130",
    "end": "516174"
  },
  {
    "text": "And one is black box\ntesting and the other one is glass box testing.",
    "start": "516174",
    "end": "521659"
  },
  {
    "text": "In black box testing,\nyou're assuming you have the specifications\nto a function. So that's the docstring.",
    "start": "521659",
    "end": "528599"
  },
  {
    "text": "All you're looking at is\nthe docstring and coming up with some test\ncases based on that. In glass box testing,\nyou have the code",
    "start": "528599",
    "end": "535529"
  },
  {
    "text": "itself and you're\ntrying to come up with some test cases that hit\nupon all of the possible paths",
    "start": "535530",
    "end": "541320"
  },
  {
    "text": "through the code. All right. Let's look at an example\nfor black box testing.",
    "start": "541320",
    "end": "547509"
  },
  {
    "text": "I'm finding the square root of\nx to some close enough value",
    "start": "547510",
    "end": "553470"
  },
  {
    "text": "given by this epsilon. And the idea here,\nnotice I don't actually give you how this\nfunction's implemented.",
    "start": "553470",
    "end": "560350"
  },
  {
    "text": "The idea is that you're\njust figuring out test cases based on the specification.",
    "start": "560350",
    "end": "566760"
  },
  {
    "text": "And the great thing\nabout black box testing is that whoever implements\nthis function can implement it in whatever way they wish, they\ncan use approximation method,",
    "start": "566760",
    "end": "574540"
  },
  {
    "text": "that can use bisection\nmethod, it doesn't matter. The test cases that you come\nup with for this function",
    "start": "574540",
    "end": "579820"
  },
  {
    "text": "are going to be\nexactly the same. Right? No matter what the\nimplementation.",
    "start": "579820",
    "end": "585560"
  },
  {
    "text": "So for this particular\nfunction, here's a sample set. We check the boundary,\nwe check perfect squares,",
    "start": "585560",
    "end": "593029"
  },
  {
    "text": "we can check some number\nthat's less than 1, we can check maybe irrationals,\nand then you do extreme tests.",
    "start": "593030",
    "end": "600040"
  },
  {
    "text": "So when either epsilon is\nreally large or epsilon is really small, or x is really\nlarge or x is really small,",
    "start": "600040",
    "end": "607149"
  },
  {
    "text": "and all the possible\ncombinations of those.  So the important thing\nabout black box testing",
    "start": "607150",
    "end": "613720"
  },
  {
    "text": "is that you are doing you are\ncreating the test cases based on the specifications only.",
    "start": "613720",
    "end": "620399"
  },
  {
    "text": "Glass box testing, you're\nusing the code itself to guide your test cases.",
    "start": "620400",
    "end": "627560"
  },
  {
    "text": "So if you have a piece\nof code and you come up with a test case that goes\nthrough every single possible",
    "start": "627560",
    "end": "632980"
  },
  {
    "text": "combination of input-- of\nevery single possible path",
    "start": "632980",
    "end": "638949"
  },
  {
    "text": "through the code, then that test\nset is called path complete. The problem with this is\nwhen you encounter loops,",
    "start": "638950",
    "end": "646190"
  },
  {
    "text": "for example. Every single possible\npath through a loop is maybe the code not going\nthrough the loop at all,",
    "start": "646190",
    "end": "652694"
  },
  {
    "text": "going through once,\ngoing through twice, going through three times, four\ntimes, five times, and so on. Right?",
    "start": "652694",
    "end": "657899"
  },
  {
    "text": "Which could be a\nvery, very big test. So instead there are\nactually some guidelines for when you're dealing with\nloops and things like that.",
    "start": "657900",
    "end": "665260"
  },
  {
    "text": "So for branches, when you're\ndoing glass box testing, it's important-- you\nshould just exercise",
    "start": "665260",
    "end": "670890"
  },
  {
    "text": "all of the parts\nof the conditional. So make sure you\nhave a test case that goes through each part\nof the conditional.",
    "start": "670890",
    "end": "676800"
  },
  {
    "text": "For for loops, make sure\nyou have a test case where the loop is not entered at all,\nwhere the loop is entered one time, and when the loop is\nentered just some number more",
    "start": "676800",
    "end": "683463"
  },
  {
    "text": "than once. For while loops,\nsimilar to for loops, except that make sure\nyou have test cases that",
    "start": "683463",
    "end": "689990"
  },
  {
    "text": "cover all of the possible ways\nto break out of the while loop. So if the while loop condition\nbecomes false, or if maybe",
    "start": "689990",
    "end": "697700"
  },
  {
    "text": "there's a break inside\nthe while loop, and so on.",
    "start": "697700",
    "end": "704480"
  },
  {
    "text": "So in this example, we have\nthe absolute value of x. This is its specification and\nthis is the implementation",
    "start": "704480",
    "end": "710300"
  },
  {
    "text": "that someone decided to\ndo for this function. ",
    "start": "710300",
    "end": "717890"
  },
  {
    "text": "So a path complete\ntest set means that you want to\nhave a test that goes through each one\nof these branches.",
    "start": "717890",
    "end": "724060"
  },
  {
    "text": "So if x is less than\nminus 1, well, minus 2 is less than minus 1. So that's good.",
    "start": "724060",
    "end": "729690"
  },
  {
    "text": "And otherwise, which means pick\na number greater than minus 1.",
    "start": "729690",
    "end": "735815"
  },
  {
    "text": "So 2. So 2 and minus 2\nare path complete.",
    "start": "735815",
    "end": "742290"
  },
  {
    "text": "Yield path complete-- yields\na path complete test suite. But notice that while we've\nhit upon every possible path",
    "start": "742290",
    "end": "749819"
  },
  {
    "text": "through this code, we've\nactually missed a test case. Minus 1. So this code incorrectly\nclassifies minus 1",
    "start": "749820",
    "end": "757620"
  },
  {
    "text": "as returning minus\n1, which is wrong. So for glass box\ntesting, in addition to",
    "start": "757620",
    "end": "764959"
  },
  {
    "text": "making sure you're going\nthrough all the possible paths through the code,\nyou also want to make sure you hit upon any\nboundary condition.",
    "start": "764959",
    "end": "772150"
  },
  {
    "text": "So in this case, for\nbranches, minus 1 is a boundary condition.",
    "start": "772150",
    "end": "777510"
  },
  {
    "text": "So you've created a test suite,\nyou've tested your program, chances are you found a bug.",
    "start": "777510",
    "end": "783950"
  },
  {
    "text": "What do you do now? All right. Quick sort of detour into\na little bit of history.",
    "start": "783950",
    "end": "791600"
  },
  {
    "text": "The history of debugging. So 1947, this\ncomputer was built.",
    "start": "791600",
    "end": "798760"
  },
  {
    "text": "And it was a computer that was\nvery impressive for its day. It could do things like\naddition in 0.1 seconds.",
    "start": "798760",
    "end": "807000"
  },
  {
    "text": "Things like multiplication\nin 0.7 seconds. And take the log of\nsomething in five seconds.",
    "start": "807000",
    "end": "816450"
  },
  {
    "text": "So faster than a\nhuman, possibly. But pretty slow for\ntoday's standards.",
    "start": "816450",
    "end": "822810"
  },
  {
    "text": "And a group of\nengineers were working on running a\nprogram that found-- that was supposed to find\nthe trigonometric function.",
    "start": "822810",
    "end": "832050"
  },
  {
    "text": "And among them being this-- one\nof the first female scientists, Grace Hopper.",
    "start": "832050",
    "end": "837702"
  },
  {
    "text": "And they found that\ntheir program was not working correctly. So they went through all of the\npanels and all of the relays",
    "start": "837702",
    "end": "846339"
  },
  {
    "text": "in the computer, and\nthey isolated a program in panel F relay 70, where\nthey found this moth.",
    "start": "846340",
    "end": "855830"
  },
  {
    "text": "Just sitting in there. I think it was dead,\nprobably electrocuted. But it was a moth that was\nimpeding the calculation.",
    "start": "855830",
    "end": "863120"
  },
  {
    "text": "And I don't know if you can read\nthis, but this part right here. They made a note\nin their logbook",
    "start": "863120",
    "end": "869240"
  },
  {
    "text": "that says, first actual\ncase of bug being found. Which I think is really cute.",
    "start": "869240",
    "end": "874560"
  },
  {
    "text": "So they were literally doing\ndebugging in this computer. Right.",
    "start": "874560",
    "end": "880351"
  },
  {
    "text": "All right. So you won't be doing\nthat sort of debugging. You'll be doing a virtual kind\nof debugging in your programs.",
    "start": "880351",
    "end": "885560"
  },
  {
    "text": "Which, again, is not that fun. But you still have to do it. So debugging, as you might have\nnoticed so far in your problem",
    "start": "885560",
    "end": "892580"
  },
  {
    "text": "sets, has a bit of a\nsteep learning curve. And obviously your goal is\nto have a bug free program,",
    "start": "892580",
    "end": "899870"
  },
  {
    "text": "and in order to achieve that,\nyou have to do the debugging. There are some tools which\nsome of you have been using.",
    "start": "899870",
    "end": "907420"
  },
  {
    "text": "There are some tools\nbuilt into Anaconda, or whatever ID you've been\nusing to do debugging.",
    "start": "907420",
    "end": "914274"
  },
  {
    "text": "I know some of you have been\nusing the Python tutor, which is awesome. The print statement can also\nbe a good debugging tool.",
    "start": "914274",
    "end": "923640"
  },
  {
    "text": "But over above\neverything else, it's really important to\njust be systematic as you're trying to\ndebug your program.",
    "start": "923640",
    "end": "931287"
  },
  {
    "text": "I want to talk a little\nbit about print statements and how you can use them\nto debug, because I think--",
    "start": "931287",
    "end": "937120"
  },
  {
    "text": "Python tutor, if you\ndon't have the internet, you might not be able to use it. If you don't know how\nto use the debugger,",
    "start": "937120",
    "end": "943529"
  },
  {
    "text": "you don't need to learn. But print statements,\nyou'll always have them, and you can always put\nthem in your program. And they're really good\nways to test hypotheses.",
    "start": "943530",
    "end": "950042"
  },
  {
    "text": " So good places to\nput print statements",
    "start": "950042",
    "end": "955230"
  },
  {
    "text": "are inside functions. Inside loops, for example,\nwhat are the loop parameters, what are the loop values,\nwhat function-- what",
    "start": "955230",
    "end": "963510"
  },
  {
    "text": "functions return what values. So you can make sure that\nvalues are being passed--",
    "start": "963510",
    "end": "969480"
  },
  {
    "text": "the correct values\nare being passed between parts of your code. ",
    "start": "969480",
    "end": "975240"
  },
  {
    "text": "I will mention that you\ncan use the bisection method when you're debugging. Which is interesting.",
    "start": "975240",
    "end": "982640"
  },
  {
    "text": "So if you take a\nprint statement, find approximately the\nhalfway point in your code.",
    "start": "982640",
    "end": "987920"
  },
  {
    "text": "Print out what values you--\nprint out some relevant values. All of the possible--\nprint out some",
    "start": "987920",
    "end": "994220"
  },
  {
    "text": "values at that\npoint in your code.  If everything is\nas you expect it",
    "start": "994220",
    "end": "1000606"
  },
  {
    "text": "to be at that point in your\ncode, then you're good. That means the code\nso far is bug free.",
    "start": "1000606",
    "end": "1006690"
  },
  {
    "text": "That means that-- however, that\nmeans that the code beyond it has a bug, right?",
    "start": "1006690",
    "end": "1012270"
  },
  {
    "text": "So since you've put a print\nstatement halfway in your code and you think that\ngave good results,",
    "start": "1012270",
    "end": "1017730"
  },
  {
    "text": "then put a print statement\n3/4 of the way in the code. And see if the values are\nas you expect at that point.",
    "start": "1017730",
    "end": "1023131"
  },
  {
    "text": "And if they are, great. Then put a print\nstatement further down.",
    "start": "1023131",
    "end": "1028229"
  },
  {
    "text": "So in this way you could\nuse the bisection method to pinpoint a line, or a set\nof lines, or maybe a function",
    "start": "1028229",
    "end": "1035339"
  },
  {
    "text": "that that's giving\nyou the bad results. ",
    "start": "1035339",
    "end": "1041279"
  },
  {
    "text": "So the general debugging steps\nis to study the program code.",
    "start": "1041280",
    "end": "1047181"
  },
  {
    "text": "Don't ask what is wrong,\nbecause that's actually part of the testing. So your test cases would have\nfigured out what's wrong.",
    "start": "1047181",
    "end": "1052645"
  },
  {
    "text": " The debugging process\nis figuring out",
    "start": "1052645",
    "end": "1057690"
  },
  {
    "text": "how the result took place. And since programming is--\nprogramming and debugging",
    "start": "1057690",
    "end": "1063820"
  },
  {
    "text": "is, sort of, is a science, you\ncan use the scientific method as well. So look at all the data,\nthat's your test cases.",
    "start": "1063820",
    "end": "1071440"
  },
  {
    "text": "Figure out a hypothesis. Maybe say, oh, maybe I'm\nindexing from 1 instead of 0",
    "start": "1071440",
    "end": "1076450"
  },
  {
    "text": "in lists, for example. Come up with an experiment\nthat you can repeat.",
    "start": "1076450",
    "end": "1081570"
  },
  {
    "text": "And then pick a\nsimple test case then you can test your\nhypothesis with. ",
    "start": "1081570",
    "end": "1087870"
  },
  {
    "text": "So as you're debugging, you\nwill encounter error messages. And these error\nmessages are actually",
    "start": "1087870",
    "end": "1093900"
  },
  {
    "text": "pretty easy to figure out. And they're really easy\nto fix in your code.",
    "start": "1093900",
    "end": "1099210"
  },
  {
    "text": "So for example, accessing things\nbeyond the limits of the lists give you index errors.",
    "start": "1099210",
    "end": "1104610"
  },
  {
    "text": "Trying to convert, in this\ncase, a list to an integer gives you type errors. Accessing variables that\nyou haven't created before",
    "start": "1104610",
    "end": "1113190"
  },
  {
    "text": "gives you name errors. And so on and so on. And syntax errors are\nthings, for things like,",
    "start": "1113190",
    "end": "1118320"
  },
  {
    "text": "if you forget a parentheses,\nor forget a colon, or something like that.",
    "start": "1118320",
    "end": "1124260"
  },
  {
    "text": "So error messages are\nreally easy to spot. The Python interpreter\nspits these out for you",
    "start": "1124260",
    "end": "1130170"
  },
  {
    "text": "and then you can\npinpoint the exact line. Logic errors are\nactually the hard part. And logic errors are\nthe ones that you will",
    "start": "1130170",
    "end": "1138120"
  },
  {
    "text": "be spending the most time on. For which I would recommend\nalways trying to take a break.",
    "start": "1138120",
    "end": "1144000"
  },
  {
    "text": "Take a nap, go eat. Something. Sometimes you'd have\nto start all over, so",
    "start": "1144000",
    "end": "1150240"
  },
  {
    "text": "throughout the code\nyou have and just sit down with a piece of\npaper, try to figure out how you want to solve the problem.",
    "start": "1150240",
    "end": "1156090"
  },
  {
    "text": "And if you look up the term\nrubber ducky-- a lot of heads",
    "start": "1156090",
    "end": "1161179"
  },
  {
    "text": "went up on that one--\nrubber ducky debugging. That is an actual\nterm in Wikipedia.",
    "start": "1161180",
    "end": "1168270"
  },
  {
    "text": "And it's when a programmer\nexplains their code to a rubber ducky. That's me on the left explaining\ncode to my rubber ducky.",
    "start": "1168270",
    "end": "1174480"
  },
  {
    "text": "You should always--\nyou should go buy one. Or code to anyone else,\npreferably someone",
    "start": "1174480",
    "end": "1180600"
  },
  {
    "text": "who doesn't really\nunderstand anything. Because that'll force you to\nexplain everything really, really closely.",
    "start": "1180600",
    "end": "1187346"
  },
  {
    "text": "And as you're doing that,\nyou'll figure out your problem. And I figured out my problem\nin both of these cases. ",
    "start": "1187346",
    "end": "1194640"
  },
  {
    "text": "So just go back to the basics. ",
    "start": "1194640",
    "end": "1200030"
  },
  {
    "text": "Quick summary of dos and don'ts\nof debugging and testing. So don't write the\nentire program,",
    "start": "1200030",
    "end": "1206151"
  },
  {
    "text": "test the entire program, and\ndebug the entire program. I know this is really\ntempting to do, and I do it all the time.",
    "start": "1206151",
    "end": "1212480"
  },
  {
    "text": "But don't do it. Because you're\ngoing to introduce a lot of bugs and\nit's going to be",
    "start": "1212480",
    "end": "1218240"
  },
  {
    "text": "hard to isolate which bugs\nare affecting other ones. And it'll lead to a lot\nmore stress than you need.",
    "start": "1218240",
    "end": "1224870"
  },
  {
    "text": "Instead do unit testing. So write one function, test the\nfunction, debug the function,",
    "start": "1224870",
    "end": "1232155"
  },
  {
    "text": "make sure it works,\nwrite the other function, and so on and so on. Do a little regression\ntesting, a little more unit",
    "start": "1232155",
    "end": "1237230"
  },
  {
    "text": "testing, a little\nintegration testing, and it's a lot more systematic\nway to write the program.",
    "start": "1237230",
    "end": "1244179"
  },
  {
    "text": "And it'll cut down on your\ndebugging time immensely. If you're changing your\ncode, and inevitably you'll",
    "start": "1244180",
    "end": "1250190"
  },
  {
    "text": "be changing your code as\nyou're doing your problem sets, remember to back up your code.",
    "start": "1250190",
    "end": "1256920"
  },
  {
    "text": "So if you have a version\nthat almost works, don't just modify that\nand maybe save a copy. [INAUDIBLE] you've got terabytes\nof memory on your computer,",
    "start": "1256920",
    "end": "1264409"
  },
  {
    "text": "it won't hurt to just\nmake a quick copy of it. Document maybe what worked\nand what didn't in that copy.",
    "start": "1264410",
    "end": "1271250"
  },
  {
    "text": "And then make another copy, and\nthen you can modify your code.",
    "start": "1271250",
    "end": "1278300"
  },
  {
    "start": "1278300",
    "end": "1284360"
  },
  {
    "text": "So that's sort of a\nhigh level introduction to testing and debugging. The rest of the class will\nbe on the error messages,",
    "start": "1284360",
    "end": "1292850"
  },
  {
    "text": "or on errors that you\nwill get in your programs. So when your functions--\nwhen you run functions,",
    "start": "1292850",
    "end": "1301740"
  },
  {
    "text": "or when you run your\nprogram, at some point, the program execution\nis going to stop.",
    "start": "1301740",
    "end": "1307410"
  },
  {
    "text": "Maybe it encountered\nan error because of some unexpected condition.",
    "start": "1307410",
    "end": "1312660"
  },
  {
    "text": "And when that happens\nyou get an exception. So the error is\ncalled an exception. And it's called an exception\nbecause it was an exception",
    "start": "1312660",
    "end": "1318783"
  },
  {
    "text": "to what was expected. To what the program expected. So all of these errors\nthat I've talked",
    "start": "1318783",
    "end": "1325440"
  },
  {
    "text": "about in the previous\nslides are actually examples of exceptions. ",
    "start": "1325440",
    "end": "1332836"
  },
  {
    "text": "And there are actually\nmany other types of exceptions, which you'll\nsee as you go on in this course",
    "start": "1332836",
    "end": "1338419"
  },
  {
    "text": "and also in 60002. So how do we deal\nwith these exceptions?",
    "start": "1338420",
    "end": "1347150"
  },
  {
    "text": "In Python, you can actually\nhave handlers for exceptions.",
    "start": "1347150",
    "end": "1353700"
  },
  {
    "text": "So if you know that a piece of\ncode might give you an error.",
    "start": "1353700",
    "end": "1358860"
  },
  {
    "text": "For example, here I'm dealing\nwith inputs from users.",
    "start": "1358860",
    "end": "1364870"
  },
  {
    "text": "And users are really\nunpredictable. You tell them to\ngive you a number, they might give you their name.",
    "start": "1364870",
    "end": "1370141"
  },
  {
    "text": " Nothing you can do about that. Or is there? Yes there is.",
    "start": "1370141",
    "end": "1375530"
  },
  {
    "text": "So in your program you can\nactually put any lines of code",
    "start": "1375530",
    "end": "1381790"
  },
  {
    "text": "that you think might\nbe problematic, that might give you an error an\nexception, in this try block.",
    "start": "1381790",
    "end": "1387610"
  },
  {
    "text": "So you say try colon, and\nyou put in any lines of code that you think might\ngive you an error. ",
    "start": "1387610",
    "end": "1397230"
  },
  {
    "text": "If none of these lines of code\nactually produce an error, then great.",
    "start": "1397230",
    "end": "1402960"
  },
  {
    "text": "Python doesn't do anything else. It treats them as just\npart-- as just if they were part of a regular program.",
    "start": "1402960",
    "end": "1409440"
  },
  {
    "text": "But if an error does\ncome up-- for example, if someone doesn't\nput in a number but puts their name\nin-- that's going",
    "start": "1409440",
    "end": "1417220"
  },
  {
    "text": "to raise an error,\nspecifically a value error. And at that point,\nPython's going to say,",
    "start": "1417220",
    "end": "1423530"
  },
  {
    "text": "is there an accept statement? And if so, this except statement\nis going to handle the error.",
    "start": "1423530",
    "end": "1431830"
  },
  {
    "text": " And it's going say,\nOK, an error came up,",
    "start": "1431830",
    "end": "1436860"
  },
  {
    "text": "but I know how to handle it. I'm going to print out\nthis message to the user.",
    "start": "1436860",
    "end": "1443590"
  },
  {
    "text": "So if we look at code--\nthis is the same code as in the slides-- and there's\nno try except block around it.",
    "start": "1443590",
    "end": "1451520"
  },
  {
    "text": "So if I run it and I\nsay, three and four, it's going to run fine.",
    "start": "1451520",
    "end": "1457860"
  },
  {
    "text": "But if I run it and\nI say, [INAUDIBLE] a, it's going to give\na value error. ",
    "start": "1457860",
    "end": "1466210"
  },
  {
    "text": "Now if I run the same\npiece of code with try-- with a try except block.",
    "start": "1466210",
    "end": "1472164"
  },
  {
    "text": " I run it, if I give it\nregular numbers, it's fine.",
    "start": "1472165",
    "end": "1479980"
  },
  {
    "text": "But if I'm being a cheeky\nuser, and I say three,",
    "start": "1479980",
    "end": "1488220"
  },
  {
    "text": "automatically this would\nhave raised the value error in the previous\nversion of the program.",
    "start": "1488220",
    "end": "1495060"
  },
  {
    "text": "But in this version\nof the program, the programmer\nhandled the exception or caught the\nexception, and printed",
    "start": "1495060",
    "end": "1501390"
  },
  {
    "text": "out this nicer looking message. So bug in user input is nicer\nthan this whole lot here.",
    "start": "1501390",
    "end": "1510090"
  },
  {
    "text": " A lot easier to read.",
    "start": "1510090",
    "end": "1515985"
  },
  {
    "text": " So any problematic\nlines of code,",
    "start": "1515985",
    "end": "1523210"
  },
  {
    "text": "you can put in a\ntry block, and then handle whatever errors might\ncome up in this except block.",
    "start": "1523210",
    "end": "1529910"
  },
  {
    "text": "This except block is going to\ncatch any error that comes up. And you can actually get\na little bit more specific",
    "start": "1529910",
    "end": "1536860"
  },
  {
    "text": "and catch specific\ntypes of errors. In this case, I'm saying,\nif a value error comes up--",
    "start": "1536860",
    "end": "1544190"
  },
  {
    "text": "for example, if the user\ninputs a string instead of an integer-- do this, which\nis going to print this message.",
    "start": "1544190",
    "end": "1553330"
  },
  {
    "text": "If the user inputs a\nnumber for B such that",
    "start": "1553330",
    "end": "1558590"
  },
  {
    "text": "we're doing a divided by b, so\nthat would give a 0 division error. In that case we're going to\ncatch this other error here,",
    "start": "1558590",
    "end": "1566400"
  },
  {
    "text": "the 0 division error,\nand we're going to print this other\nmessage, can't divide by 0. ",
    "start": "1566400",
    "end": "1574309"
  },
  {
    "text": "So each-- so you can think of\nthese different except blocks as sort of if else\nif statements,",
    "start": "1574310",
    "end": "1582380"
  },
  {
    "text": "except for exceptions. So we're going to try this. But if there's a\nvalue error do this.",
    "start": "1582380",
    "end": "1589170"
  },
  {
    "text": "Otherwise, if there's a\ndivision error, do this. And otherwise do this. So this last except\nis actually going",
    "start": "1589170",
    "end": "1595370"
  },
  {
    "text": "to be for any other\nerror that comes up. So if it's not a value error,\nnor a division error, then",
    "start": "1595370",
    "end": "1600409"
  },
  {
    "text": "we're going to print,\nsomething went very wrong. I couldn't even try to\ncreate-- I couldn't even try to make the program\ncome up with any other error",
    "start": "1600410",
    "end": "1608960"
  },
  {
    "text": "besides those two. ",
    "start": "1608960",
    "end": "1615669"
  },
  {
    "text": "So a lot of the time you're just\ngoing to use try except blocks. But there's other blocks that\nyou can add to exceptions.",
    "start": "1615670",
    "end": "1622120"
  },
  {
    "text": "And these are more\nrarely used, but I'll talk about them anyway. So you could have an else block.",
    "start": "1622120",
    "end": "1627990"
  },
  {
    "text": " And an else block is\ngoing to get executed",
    "start": "1627990",
    "end": "1633170"
  },
  {
    "text": "when the code in the\ntry block finished without raising an error.",
    "start": "1633170",
    "end": "1639632"
  },
  {
    "text": "And you can also\nhave a finally block, which is always executed.",
    "start": "1639632",
    "end": "1645800"
  },
  {
    "text": "If the code in the try block\nfinished without an error, if you raised an\nexception, if you raised",
    "start": "1645800",
    "end": "1651860"
  },
  {
    "text": "a different kind of exception,\nif you went through the else, in any of these cases,\nwhatever's in the finally block",
    "start": "1651860",
    "end": "1658550"
  },
  {
    "text": "is always going to get executed. And it's usually used\nto clean up code.",
    "start": "1658550",
    "end": "1667834"
  },
  {
    "text": "Like if you want to print,\noh, the program finished, or if you want to close a\nfile, or something like that.",
    "start": "1667834",
    "end": "1673761"
  },
  {
    "text": "So. We've encountered errors. We've caught them.",
    "start": "1673761",
    "end": "1678930"
  },
  {
    "text": "What else can we do with\nerrors-- with exceptions. ",
    "start": "1678930",
    "end": "1684259"
  },
  {
    "text": "Three other things. So one is if we've\ncaught an error,",
    "start": "1684259",
    "end": "1690400"
  },
  {
    "text": "we can just fail silently. What this means is,\nyou've caught an error,",
    "start": "1690400",
    "end": "1696250"
  },
  {
    "text": "and you just substitute whatever\nerroneous value the user gave you for some other value.",
    "start": "1696250",
    "end": "1703329"
  },
  {
    "text": "That's not actually\na very good idea. That's a bad idea. Because suddenly the user thinks\nthat they entered something,",
    "start": "1703329",
    "end": "1709789"
  },
  {
    "text": "and they think everything's\ngreat, your program accepts it, but then they get\nsome weird value as an output, which is far\nfrom what they expected.",
    "start": "1709790",
    "end": "1717080"
  },
  {
    "text": "So it's not really a\ngood idea to just replace user's values with anything. ",
    "start": "1717080",
    "end": "1723929"
  },
  {
    "text": "In the context-- so this is\nin the context of a function. In the context of a function,\nwhat else can we do? Well, if you have a\nfunction that fails,",
    "start": "1723930",
    "end": "1734810"
  },
  {
    "text": "for example, let's say\nyou're trying to do you're trying to get the square\nroot of an even number.",
    "start": "1734810",
    "end": "1743780"
  },
  {
    "text": "And let's say the user\ngives you a-- sorry, you're trying to find the square\nroot of a positive number.",
    "start": "1743780",
    "end": "1748960"
  },
  {
    "text": "And let's say the user\ngives you a negative number. ",
    "start": "1748960",
    "end": "1754490"
  },
  {
    "text": "Well, if the user gives\nyou a negative number, your function could return\nan error value, which",
    "start": "1754490",
    "end": "1759790"
  },
  {
    "text": "means, well if the number\ninputted is less than 0, then return 0. Or minus 1.",
    "start": "1759790",
    "end": "1765700"
  },
  {
    "text": "Or minus 100. Just pick any value\nto return which represents some error value.",
    "start": "1765700",
    "end": "1772139"
  },
  {
    "text": "This is actually not a good\nidea either, because later on in your program, if\nyou're using this function, now you have to do a check.",
    "start": "1772140",
    "end": "1779130"
  },
  {
    "text": "And the check is, well if\nthe return from this function is minus 1 or\nminus 100, do this.",
    "start": "1779130",
    "end": "1784210"
  },
  {
    "text": "Otherwise, do this. So you you're\ncomplicating your code because now you always have to\nhave this check for this error",
    "start": "1784210",
    "end": "1791790"
  },
  {
    "text": "value. Which makes the\ncode really messy. The other thing we can do is we\ncan signal an error condition.",
    "start": "1791790",
    "end": "1799799"
  },
  {
    "text": "So this is how you create\ncontrol flow in your programs",
    "start": "1799800",
    "end": "1807480"
  },
  {
    "text": "with exceptions. So in Python, signaling\nan error condition means raising your\nown exception.",
    "start": "1807480",
    "end": "1814590"
  },
  {
    "text": "So so far we've just seen\nthe programs crashing, which means they\nraise an exception",
    "start": "1814590",
    "end": "1820900"
  },
  {
    "text": "and then you deal with them. But in this last case, you're\nraising your own exception.",
    "start": "1820900",
    "end": "1826240"
  },
  {
    "text": "As a way to use that exception\nlater on in the code.",
    "start": "1826240",
    "end": "1831630"
  },
  {
    "text": "So in Python, you raise\nyour own exception using this raise keyword\nand then an exception. And then some sort\nof description,",
    "start": "1831630",
    "end": "1838240"
  },
  {
    "text": "like \"user entered a negative\nnumber\" or something like that. ",
    "start": "1838240",
    "end": "1848000"
  },
  {
    "text": "A lot of the time we're\ngoing to raise a value error. So if the number is less than\n0, then raise a value error,",
    "start": "1848000",
    "end": "1857520"
  },
  {
    "text": "something is wrong. The key word, the name\nof the error, and then some sort of descriptive string.",
    "start": "1857520",
    "end": "1863360"
  },
  {
    "text": " So let's see an example of\nhow we raise an exception.",
    "start": "1863360",
    "end": "1872269"
  },
  {
    "text": "I have this function\nhere called get ratios. It takes in two\nlists, L1 and L2.",
    "start": "1872270",
    "end": "1878620"
  },
  {
    "text": "And it's going to\ncreate a new list that's going to contain the\nratio of each element",
    "start": "1878620",
    "end": "1884860"
  },
  {
    "text": "in L1 divided by\neach element in L2. So I have a for loop here.",
    "start": "1884860",
    "end": "1891990"
  },
  {
    "text": "For index in range length L1. So I'm going through every\nsingle element in L1.",
    "start": "1891990",
    "end": "1897840"
  },
  {
    "text": "I'm going to try here.",
    "start": "1897840",
    "end": "1903330"
  },
  {
    "text": "I'm going to try\nto do this line. So I think that this line\nmight give me an error. So I'm going to put\nit in a try block.",
    "start": "1903330",
    "end": "1909809"
  },
  {
    "text": "The error I think\nI'm going to get is a 0 division error,\nbecause what happens when an element and L2 is 0?",
    "start": "1909810",
    "end": "1916169"
  },
  {
    "text": " And when an element\nin L2 is 0 I'm",
    "start": "1916170",
    "end": "1921950"
  },
  {
    "text": "going to append this\nnot a number as a float. So NAN, as a string, you\ncan convert it to a float,",
    "start": "1921950",
    "end": "1930310"
  },
  {
    "text": "and it stands for not a number.  So then I can continue\npopulating the list",
    "start": "1930310",
    "end": "1938290"
  },
  {
    "text": "with these not a numbers. If an element and L2 is 0.",
    "start": "1938290",
    "end": "1943460"
  },
  {
    "text": "And otherwise, if there's\nno 0 division error, but there's another\nkind of error,",
    "start": "1943460",
    "end": "1949180"
  },
  {
    "text": "then I'm going to\nraise my own error. And say, for any\nother kind of error, just raise a value error.",
    "start": "1949180",
    "end": "1955590"
  },
  {
    "text": "Which says, \"get ratios was\ncalled with a bad argument.\"",
    "start": "1955590",
    "end": "1961029"
  },
  {
    "text": "So here I'm sort of\nconsolidating all errors into my one value error. So later on in my program,\nI can catch this value error",
    "start": "1961030",
    "end": "1967840"
  },
  {
    "text": "and do something with it. ",
    "start": "1967840",
    "end": "1973030"
  },
  {
    "text": "Here's another\nexample of exceptions. So let's say we're were\ngiven a class list.",
    "start": "1973030",
    "end": "1979570"
  },
  {
    "text": "We have a list of lists. Where we have the\nname of a student,",
    "start": "1979570",
    "end": "1985620"
  },
  {
    "text": "first name and last name, and\ntheir grades in the class. So we currently\nhave two students.",
    "start": "1985620",
    "end": "1991920"
  },
  {
    "text": "And what I want to do\nis create a new list which is the same things,\nthe same inputs here.",
    "start": "1991920",
    "end": "2000139"
  },
  {
    "text": "But I'm adding an extra--\nI'm appending an extra value at the end of the list\nfor each student, which",
    "start": "2000140",
    "end": "2006590"
  },
  {
    "text": "is the average of\nall of their grades. Or all of their-- yeah,\nall of their grades. ",
    "start": "2006590",
    "end": "2014130"
  },
  {
    "text": "So let's look at the code.  This is the function that\ntakes the class list, which",
    "start": "2014130",
    "end": "2022080"
  },
  {
    "text": "is this whole list here.  I'm creating a new list\ninside it, initially empty.",
    "start": "2022080",
    "end": "2033230"
  },
  {
    "text": "And then I'm going for every\nelement in the class list. I'm appending element\nat 0, which is going",
    "start": "2033230",
    "end": "2041240"
  },
  {
    "text": "to be this first list here. So it's going to be the\nfirst name and the last name. Element at 1, which\nis the grades.",
    "start": "2041240",
    "end": "2050638"
  },
  {
    "text": "And then the last thing I'm\nappending is a function call.",
    "start": "2050639",
    "end": "2056339"
  },
  {
    "text": "The function call being\ncalled with element 1, which is all of the grades, and\nthis is my function call.",
    "start": "2056340",
    "end": "2062908"
  },
  {
    "text": "We're going to see three\ndifferent function calls. This is the first one. It simply takes the\nsum of the grades",
    "start": "2062909",
    "end": "2069539"
  },
  {
    "text": "and divides it by the\nlength of the grades. ",
    "start": "2069539",
    "end": "2075719"
  },
  {
    "text": "If these students\nare responsible, and they've taken all of the\ntests, then there's no problem.",
    "start": "2075719",
    "end": "2084347"
  },
  {
    "text": "Because length of grades\nis going to be something greater than 0.",
    "start": "2084348",
    "end": "2089579"
  },
  {
    "text": "But what if we have a\nstudent in the class who didn't show up for any tests? ",
    "start": "2089580",
    "end": "2097740"
  },
  {
    "text": "Then we have no record\nof any of their tests. No record of grades\nor anything like that.",
    "start": "2097740",
    "end": "2104160"
  },
  {
    "text": "So they're going to\nhave an empty list. So if we run this function,\naverages, on their data,",
    "start": "2104160",
    "end": "2110849"
  },
  {
    "text": "we're actually going to get a\n0 division error, because we're trying to divide by length of\ngrades, which is going to be 0.",
    "start": "2110849",
    "end": "2117230"
  },
  {
    "text": " So what can we do? Two things, two options here.",
    "start": "2117230",
    "end": "2124980"
  },
  {
    "text": "One is we can just flag the\nerror and print the message. So here there's a new average\nfunction, an improved one,",
    "start": "2124980",
    "end": "2134490"
  },
  {
    "text": "that's going to try to\ndo the exact same line as the previous one. And it's going to catch\nthe 0 division error.",
    "start": "2134490",
    "end": "2142920"
  },
  {
    "text": " And when it catches it, it's\ngoing to print this warning.",
    "start": "2142920",
    "end": "2149369"
  },
  {
    "text": "And when we run it, we're\ngoing to get, \"warning, no grades data,\" which is fine.",
    "start": "2149369",
    "end": "2154830"
  },
  {
    "text": "And we're going to get this\n\"none\" here, for the grades.",
    "start": "2154831",
    "end": "2163990"
  },
  {
    "text": "So everyone else's grades\nwas calculated correctly, and for this last\none, we got a none.",
    "start": "2163990",
    "end": "2169560"
  },
  {
    "text": "That's because, when we\nentered this except statement, if this is a function, remember\nfunctions return something.",
    "start": "2169560",
    "end": "2177329"
  },
  {
    "text": "This function in this\nparticular except statement didn't return anything. So it returns a none.",
    "start": "2177330",
    "end": "2183440"
  },
  {
    "text": "So for the averages for\nthis particular function, the average is going to be\na \"none\" for this person who",
    "start": "2183440",
    "end": "2190400"
  },
  {
    "text": "didn't have any grades\nassociated with them. ",
    "start": "2190400",
    "end": "2197450"
  },
  {
    "text": "And yeah, so that's\nbasically what I said.",
    "start": "2197450",
    "end": "2203349"
  },
  {
    "text": "So that's our first option,\nis to just flag the error and print a message. The other option is to\nactually change the policy.",
    "start": "2203350",
    "end": "2210080"
  },
  {
    "text": "So this is where you replace the\ndata with some sort of default value. And if you do\nsomething like this,",
    "start": "2210080",
    "end": "2216400"
  },
  {
    "text": "then this should be documented\ninside the function. So when you write the\ndocstring for the function, you would say if the list is\nempty, then it'll will a 0.",
    "start": "2216400",
    "end": "2235359"
  },
  {
    "text": "So this is the exact\nsame thing as before. We have a try and an except\nfor the 0 division error.",
    "start": "2235360",
    "end": "2241510"
  },
  {
    "text": "We also print a\nwarning, no grades data. And then we return the 0. ",
    "start": "2241510",
    "end": "2248800"
  },
  {
    "text": "So we still flag the error,\nand now instead of a \"none,\" we get a 0, because we've\nreturned 0.0 here, as opposed",
    "start": "2248800",
    "end": "2256150"
  },
  {
    "text": "to just leaving it blank. ",
    "start": "2256150",
    "end": "2263410"
  },
  {
    "text": "All right. So those are exceptions. Last thing we're going\nto talk about today",
    "start": "2263410",
    "end": "2268799"
  },
  {
    "text": "are these things\ncalled assertions. And assertions are good example\nof defensive programming.",
    "start": "2268800",
    "end": "2282010"
  },
  {
    "text": "In that, you have\nassert statements at the beginning of\nfunctions, typically.",
    "start": "2282010",
    "end": "2288530"
  },
  {
    "text": "Or at the end of functions. And assert statements\nare used to make sure",
    "start": "2288530",
    "end": "2294020"
  },
  {
    "text": "that the assumptions\non computations are exactly what the\nfunction expects them to be.",
    "start": "2294020",
    "end": "2301880"
  },
  {
    "text": "So if we have a\nfunction that says it's supposed to take in\nan integer greater than 0,",
    "start": "2301880",
    "end": "2307580"
  },
  {
    "text": "then the assert\nstatement will assert that the function takes in an\ninteger that's greater than 0.",
    "start": "2307580",
    "end": "2315760"
  },
  {
    "text": "Here's an example. This is the same average\nfunction we've seen before.",
    "start": "2315760",
    "end": "2321750"
  },
  {
    "text": "Here, instead of\nusing exceptions, we're going to use\nan assert statement. And the assert statement we're\nputting right at the front.",
    "start": "2321750",
    "end": "2329640"
  },
  {
    "text": "At the beginning of\nthe function, sorry. And the key word is assert. ",
    "start": "2329640",
    "end": "2336819"
  },
  {
    "text": "The next part of the assert\nis what the function expects. So we expect that the length\nof grades is not equal to 0.",
    "start": "2336820",
    "end": "2345970"
  },
  {
    "text": "So has to be greater than 0.  And then we have a\nstring here, which",
    "start": "2345970",
    "end": "2351770"
  },
  {
    "text": "represents what do you print out\nif the assertion does not hold.",
    "start": "2351770",
    "end": "2357320"
  },
  {
    "text": "So if you run the\nfunction, and you give it a list that is empty,\nthis becomes false,",
    "start": "2357320",
    "end": "2367360"
  },
  {
    "text": "so the assert is\nfalse, and we're going to print out an assertion\nerror, no grades data.",
    "start": "2367360",
    "end": "2372520"
  },
  {
    "text": " If the assert is false, the\nfunction does not continue.",
    "start": "2372520",
    "end": "2379050"
  },
  {
    "text": "It stops right there. Why does it behave this way? Well, assertions are\ngreat to make sure",
    "start": "2379050",
    "end": "2387570"
  },
  {
    "text": "that preconditions and\npost-conditions on functions are exactly as you expect.",
    "start": "2387570",
    "end": "2394380"
  },
  {
    "text": "So as soon as an\nassert becomes false, the function's going to\nimmediately terminate.",
    "start": "2394380",
    "end": "2400970"
  },
  {
    "text": "This is useful because\nit'll prevent the program",
    "start": "2400970",
    "end": "2406740"
  },
  {
    "text": "from propagating bad values. So as soon as a precondition\nisn't true, for example,",
    "start": "2406740",
    "end": "2412380"
  },
  {
    "text": "as you enter a function,\nthen that means something went wrong in your program. And the program is going\nto stop right there.",
    "start": "2412380",
    "end": "2419100"
  },
  {
    "text": "So instead of\npropagating a bad value throughout the\nprogram, and then you getting an output that\nyou didn't expect,",
    "start": "2419100",
    "end": "2424710"
  },
  {
    "text": "and then you having to trace\nback to the function that gave this bad value, you'll get\nthis bad value, you'll get this",
    "start": "2424710",
    "end": "2432150"
  },
  {
    "text": "assert being false\na lot earlier. So it'll be a lot\neasier to figure out",
    "start": "2432150",
    "end": "2439200"
  },
  {
    "text": "where the bug came from. And you won't have to\ntrace back so many steps. ",
    "start": "2439200",
    "end": "2446410"
  },
  {
    "text": "So this is basically\nwhat I said, you really want to spot the bugs\nas soon as they're introduced.",
    "start": "2446410",
    "end": "2452650"
  },
  {
    "text": "And exceptions are good\nif you want to raise them when the user supplies\nbad data input,",
    "start": "2452650",
    "end": "2458800"
  },
  {
    "text": "but assertions are\nused to make sure that the types and other-- the\ntypes of inputs to functions,",
    "start": "2458800",
    "end": "2467160"
  },
  {
    "text": "maybe other conditions\non inputs to functions, are being held as the\nvalues are being passed in.",
    "start": "2467160",
    "end": "2475864"
  },
  {
    "text": "So the keyword\nhere is making sure that the invariants on\ndata structures are meant.",
    "start": "2475864",
    "end": "2481700"
  },
  {
    "text": "And that's it. Great. Thanks. ",
    "start": "2481700",
    "end": "2491918"
  }
]