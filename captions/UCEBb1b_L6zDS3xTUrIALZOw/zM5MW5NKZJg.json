[
  {
    "start": "0",
    "end": "21000"
  },
  {
    "text": "The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13339"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13340",
    "end": "21280"
  },
  {
    "start": "21000",
    "end": "72000"
  },
  {
    "text": "AMARTYA SHANKHA\nBISWAS: So today, we're going to look at approximation\nalgorithms for the traveling salesman problem.",
    "start": "21280",
    "end": "27670"
  },
  {
    "text": "So I hope everyone knows\nwhat the traveling salesman problem is. You have a graph, you're\ntrying to visit every vertex.",
    "start": "27670",
    "end": "34947"
  },
  {
    "text": "So you start at your vertex,\nyou visit every single one, and you end at the\nstarting vertex. And you want to do that in\nthe shortest possible time,",
    "start": "34947",
    "end": "41760"
  },
  {
    "text": "or distance, or\nwhatever the metric is. So, unfortunately,\nthis is NP-hard.",
    "start": "41760",
    "end": "46840"
  },
  {
    "text": "Also, the approximation\nalgorithms for any constant approximation\nis also known to be NP-hard. So you should have gone over\napproximation algorithms",
    "start": "46840",
    "end": "53520"
  },
  {
    "text": "in lectures. So, basically, let's say\nthe optimal solution has some value of e, and if\nyou want to guarantee",
    "start": "53520",
    "end": "60746"
  },
  {
    "text": "that your algorithm will\nend up with a value which is within a constant factor\nof v, so less than cv,",
    "start": "60747",
    "end": "65990"
  },
  {
    "text": "that is an\napproximation algorithm. But for the traveling\nsalesman problem, the constant approximation\nalgorithms are also NP-hard.",
    "start": "65990",
    "end": "73189"
  },
  {
    "start": "72000",
    "end": "355000"
  },
  {
    "text": "So instead, we\nmodify it slightly. So, on the traveling\nsalesman problem, we impose something\ncalled a metric.",
    "start": "73190",
    "end": "79680"
  },
  {
    "text": "So the important relation\nhere is this one. So, first of all,\nlet's go through this. So you have a\ndistance metric for--",
    "start": "79680",
    "end": "86710"
  },
  {
    "text": "so xy are vertices. Your distance is always greater\nthan 0, which is reasonable. You're undirected,\nwhich is this relation.",
    "start": "86710",
    "end": "93568"
  },
  {
    "text": "And you have the\ntriangle inequality, which means that if\nyou have 3 vertices,",
    "start": "93568",
    "end": "99350"
  },
  {
    "text": "and you have distance like\nthis, this distance is always smaller than the sum of\nthese two distances, which",
    "start": "99350",
    "end": "106210"
  },
  {
    "text": "is like real world-ish things\nthat make sense, right? If this distance was\nlonger, it would just take this path instead.",
    "start": "106210",
    "end": "112370"
  },
  {
    "text": "So the distance by\ntaking other node is always greater than or\nequal to the direct distance.",
    "start": "112370",
    "end": "118790"
  },
  {
    "text": "So, turns out, the Metric\nTSP problem is also NP-hard. So nothing very\ngreat there, but you",
    "start": "118790",
    "end": "127420"
  },
  {
    "text": "can do a constant\napproximation here. And you'll go through\ntwo approximations today. The first, the simpler\none, is a 2 approximation,",
    "start": "127420",
    "end": "137720"
  },
  {
    "text": "and then, we'll\nimprove this to 3/2. So let's start\nwith the first one.",
    "start": "137720",
    "end": "144460"
  },
  {
    "text": "So before we begin, let's\ndefine a couple of terms. Let's define c of\nS. So what is S?",
    "start": "144460",
    "end": "154579"
  },
  {
    "text": "Let X be a path. Or, rather, let's say\nS is a set of edges.",
    "start": "154580",
    "end": "161250"
  },
  {
    "start": "161250",
    "end": "167240"
  },
  {
    "text": "So if you have your graph,\nhere, your set of edges",
    "start": "167240",
    "end": "173770"
  },
  {
    "text": "could be something like\nthis, this, this, this. So that's set of edges. And c of S is defined as the\nsum of the weights of all",
    "start": "173770",
    "end": "183140"
  },
  {
    "text": "the edges. And this, actually,\nshould be a multiset, because you can count\nthe same edge twice.",
    "start": "183140",
    "end": "188640"
  },
  {
    "text": "So you can count this\nedge three times, or how ever many times you want. So that's the definition. So, now, we want to\nfind a cycle which",
    "start": "188640",
    "end": "199030"
  },
  {
    "text": "goes through all\nthe vertices, and we want to minimize the\ncost of that cycle. So let's say your optimal--",
    "start": "199030",
    "end": "204545"
  },
  {
    "text": "this should remind you of the\nHamiltonian Cycle problem. So this is, essentially,\nfinding a Hamiltonian cycle in the graph of minimum weight.",
    "start": "204545",
    "end": "211490"
  },
  {
    "text": "So this is worse than the\nHamiltonian cycle problem. This is find the minimum\nweight Hamiltonian cycle.",
    "start": "211490",
    "end": "217370"
  },
  {
    "text": "So let's say there exists this\nbeautiful Hamiltonian cycle. You know of minimum weight.",
    "start": "217370",
    "end": "224000"
  },
  {
    "text": "Let's call that\nH star G. So it's the best Hamiltonian\ncycle on this graph, and that's the shortest path\nthat your traveling salesman",
    "start": "224000",
    "end": "230875"
  },
  {
    "text": "can take. And so the cost of that is\ngiven by C if H star S G.",
    "start": "230875",
    "end": "237030"
  },
  {
    "text": "So how do we go about trying\nto approximate this problem? So think about what\nalgorithms you've",
    "start": "237030",
    "end": "243720"
  },
  {
    "text": "seen that sort of connect\nall the vertices of a graph, and minimize costs of edges.",
    "start": "243720",
    "end": "251650"
  },
  {
    "text": "Does it remind you of\nanything polynomial that you've seen in the class,\nthat connects all the vertices?",
    "start": "251650",
    "end": "257040"
  },
  {
    "text": " Expands all the vertices?",
    "start": "257040",
    "end": "263340"
  },
  {
    "text": "Exactly. So Kruskal, minimum\nspanning tree. This minimum spanning\ntree is polynomial time, and it connects all the vertex.",
    "start": "263340",
    "end": "268642"
  },
  {
    "text": "So let's take some graph. Let's just go with this one. So you have some vertices,\nand you make a minimum",
    "start": "268642",
    "end": "277550"
  },
  {
    "text": "spanning tree out of them. Now, clearly, this\nis not a cycle yet.",
    "start": "277550",
    "end": "282950"
  },
  {
    "text": "But let's try to\nconstruct a path out of this minimum spanning tree.",
    "start": "282950",
    "end": "288289"
  },
  {
    "text": "So, first, let's root it. So let's say we are rooted\nminimum spanning tree.",
    "start": "288290",
    "end": "294490"
  },
  {
    "text": "Let's say this is the root. So you have three things\ngoing out of there.",
    "start": "294490",
    "end": "300660"
  },
  {
    "text": "I think that's it. So let's give these labels. ",
    "start": "300660",
    "end": "311150"
  },
  {
    "text": "So, now, what we're\ngoing to do is, the way we're going to\ntraverse all the vertices, let's just do a DFS.",
    "start": "311150",
    "end": "316723"
  },
  {
    "text": "So, in DFS traversal,\nyou'll first see 1, then you'll\ngo down and see 2,",
    "start": "316723",
    "end": "321932"
  },
  {
    "text": "then you'll go down and see\n3, then you'll go back up, see 2 again.",
    "start": "321932",
    "end": "327260"
  },
  {
    "text": "Go back down, see 4. Go back up, see 2. 1, 5, 1, 6.",
    "start": "327260",
    "end": "334630"
  },
  {
    "text": "So, basically, you're ignoring\nthe rest of the graph. You find your minimum\nspanning tree, and you follow all the paths.",
    "start": "334630",
    "end": "340530"
  },
  {
    "text": "Follow them back up, and\njust do a DFS traversal. And then, you go\nreach back to 1.",
    "start": "340530",
    "end": "346280"
  },
  {
    "text": "And then, you have this-- well, it visits\nall the vertices. It visits some of\nthem more than once, which is a problem, which\nwe'll deal with shortly.",
    "start": "346280",
    "end": "352180"
  },
  {
    "text": "But it visits all the\nvertices, and it's a cycle. So, now, the problem is,\nthe traveling salesman",
    "start": "352180",
    "end": "357390"
  },
  {
    "text": "problem does not allow you to\nvisit vertices more than once. Because, if you did not\nhave this restriction,",
    "start": "357390",
    "end": "363290"
  },
  {
    "text": "you could shorten\nyour bat length by going to a separate\nvertex and coming back, or something like that. So let's make that\nmore concrete.",
    "start": "363290",
    "end": "370430"
  },
  {
    "text": "So, at least in this case,\ngiven this triangle inequality, I claim that you can just\ndelete the duplicate vertices.",
    "start": "370430",
    "end": "377320"
  },
  {
    "text": "So let's look at\nthe duplicate ones. You have 1, 2, 3, this repeats. So you delete that.",
    "start": "377320",
    "end": "382420"
  },
  {
    "text": "Repeats, repeats, repeats,\nand that's cycling back. So how do you delete things?",
    "start": "382420",
    "end": "388670"
  },
  {
    "text": "So, in this case, you\nhad a path, right? You were going 1 to 2, and\n2 to 3, to 2, and so on.",
    "start": "388670",
    "end": "397780"
  },
  {
    "text": "Let's write the 4 in. So this is [INAUDIBLE]\nonly at tree edges. So how would you delete this?",
    "start": "397780",
    "end": "403740"
  },
  {
    "text": "So, let's say, you find\nthe first duplicate vertex, and you don't want that. That's not allowed. So all you do is, simply,\nyou follow the path,",
    "start": "403740",
    "end": "409190"
  },
  {
    "text": "and you bypass it. And by the triangle inequality,\nyou know that bypassing it will never increase your cost.",
    "start": "409190",
    "end": "415860"
  },
  {
    "text": "It'll decrease it, or it\nwill keep it the same. So you can remove the\nduplicate vertex in this path",
    "start": "415860",
    "end": "421045"
  },
  {
    "text": "just by bypassing it. But, also, remember that\nthis is a complete graph. So the metric is defined\non all pairs of vertices.",
    "start": "421045",
    "end": "426319"
  },
  {
    "text": "So every edge exists\nwith some value. So that also follows with\nthe triangle inequality. So if an edge does not exist,\njust make it the sum of the--",
    "start": "426320",
    "end": "434280"
  },
  {
    "text": "so if xz is not an edge, just\nmake it the sum of xy plus yz. So in any case, you construct\nthe initial path just",
    "start": "434280",
    "end": "443270"
  },
  {
    "text": "by going down the tree and\ndoing a naive DFS traversal. And, then, you correct\nthat path by skipping",
    "start": "443270",
    "end": "450139"
  },
  {
    "text": "over the duplicates. So, finally, we'll end\nup with [INAUDIBLE] skipping all the duplicates\nwe'll get a 1, 2, 3, 4, 5, 6,",
    "start": "450140",
    "end": "456515"
  },
  {
    "text": "1. And that's a valid cycle. So let's call this\nminimum spanning tree",
    "start": "456515",
    "end": "462510"
  },
  {
    "text": "T. So that's your MST. ",
    "start": "462510",
    "end": "467759"
  },
  {
    "text": "And you are removing duplicate\nedges, and getting a cycle, C.",
    "start": "467760",
    "end": "474370"
  },
  {
    "text": "So now, actually, let's\ntake another step back.",
    "start": "474370",
    "end": "480600"
  },
  {
    "text": "OK, let's define\nour cycle, first.",
    "start": "480600",
    "end": "487110"
  },
  {
    "text": "So let's call this\ncycle, this guy is C. And then,\nyou're going from C,",
    "start": "487110",
    "end": "496870"
  },
  {
    "text": "and you're deleting\nthe duplicates, and you're getting C dash. So now what you have\nis cost of C dash.",
    "start": "496870",
    "end": "507240"
  },
  {
    "text": "That's a [INAUDIBLE],,\nbut anyway. The cost of C dash is less\nthan equal to cost of C.",
    "start": "507240",
    "end": "513589"
  },
  {
    "text": "And what is the cost of C? If you know the weight of\nyour minimum spanning tree,",
    "start": "513590",
    "end": "518929"
  },
  {
    "text": "what is the cost of C? C is just doing a DFS traversal. So what is the cost\nof C, if you know",
    "start": "518929",
    "end": "526550"
  },
  {
    "text": "your minimum spanning tree? STUDENT: [INAUDIBLE] AMARTYA SHANKHA BISWAS: No.",
    "start": "526550",
    "end": "531790"
  },
  {
    "text": "So you're traversing every edge\nin the minimum spanning tree twice. So you're doing a\nDFS traversal, right? So you're going down, and\nyou're coming back up.",
    "start": "531790",
    "end": "538040"
  },
  {
    "text": "So you're going down, coming\nback up, backtracking, coming back down. So every edge is\ntraversed, right? So it's exactly twice T.",
    "start": "538040",
    "end": "544290"
  },
  {
    "start": "544000",
    "end": "710000"
  },
  {
    "text": "So let's bring up\na different board.  So you know that\ncost of C is twice",
    "start": "544290",
    "end": "553800"
  },
  {
    "text": "the cost of T. Does\nthat make sense, why the traversal implies\nthat you have every edge being",
    "start": "553800",
    "end": "560130"
  },
  {
    "text": "visited twice, right? OK. So, now, our claim is that the C\ndash cycle is a 2 approximation",
    "start": "560130",
    "end": "569579"
  },
  {
    "text": "of the actual cycle. So why is that? So we've already proves, so this\nalso implies that C of C dash",
    "start": "569580",
    "end": "577210"
  },
  {
    "text": "is less than equal\nto 2 of C T. Realize that this is not a valid cycle,\nbut this is a valid cycle.",
    "start": "577210",
    "end": "586310"
  },
  {
    "text": "So, now, we need to show\nthat this is somehow bounded by a star G.\nSo how do you do that?",
    "start": "586310",
    "end": "592982"
  },
  {
    "text": "Well, look at H star\nG. What is H star G? H star G is just a cycle, which\ngoes through the optimal cycle, which goes through\nall the vertices",
    "start": "592982",
    "end": "599320"
  },
  {
    "text": "and comes back to\nthe parent vertex. So this is H star of G.\nThis is the optimal thing.",
    "start": "599320",
    "end": "607290"
  },
  {
    "text": "Now, you can take an edge,\ne, here, and delete it. And then you'll get\na spanning tree,",
    "start": "607290",
    "end": "614449"
  },
  {
    "text": "because this is\nyour optimal cycle. Remove one edge, and\nyou get a spanning tree. So let's call that T dash.",
    "start": "614450",
    "end": "621710"
  },
  {
    "start": "621710",
    "end": "628167"
  },
  {
    "text": "Does that make sense, why\nthat is a spanning tree? Because you had a cycle,\nand you remove one edge, so it touches all the\nvertices, and it's a tree.",
    "start": "628167",
    "end": "635298"
  },
  {
    "text": "So it's a spanning\ntree, but it's not the minimum spanning tree. So you know that H star G,\nthe cost of H star of G,",
    "start": "635298",
    "end": "647110"
  },
  {
    "text": "is greater than equal\nto the cost of H star of G minus the\nedge we removed,",
    "start": "647110",
    "end": "655720"
  },
  {
    "text": "is greater than equal to\nthe cost of T. Make sense?",
    "start": "655720",
    "end": "661120"
  },
  {
    "text": "So you remove one\nedge, and then that is still greater than the\nminimum spanning tree.",
    "start": "661120",
    "end": "667110"
  },
  {
    "text": "So, now, combining\nthis guy and this guy,",
    "start": "667110",
    "end": "673010"
  },
  {
    "text": "you get cost of C dash is less\nthan equal to 2 [INAUDIBLE].. We know that cost of C is\nless than cost of H of G, so you get a 2-approximation.",
    "start": "673010",
    "end": "678958"
  },
  {
    "start": "678958",
    "end": "692088"
  },
  {
    "text": "So does that make sense? ",
    "start": "692088",
    "end": "697945"
  },
  {
    "text": "So that was a 2-approximation. That was pretty\nstraightforward, We just constructed a spanning tree. You did a DFS traversal\nand removed duplicates,",
    "start": "697945",
    "end": "704480"
  },
  {
    "text": "and you have a nice path. OK, let's just keep it down.",
    "start": "704480",
    "end": "709736"
  },
  {
    "text": "But here's the thing. It seems kind of wasteful\nto go through all the edges when you don't need to. So you're traveling down the\ntree, you're going back up,",
    "start": "709736",
    "end": "717620"
  },
  {
    "text": "and you're traversing\nevery edge twice. So it seems kind of\nridiculous that you would be doing every edge twice.",
    "start": "717620",
    "end": "723220"
  },
  {
    "text": "So what could you do better? Well, before we introduce that,\nlet's prove a couple of lemmas.",
    "start": "723220",
    "end": "731130"
  },
  {
    "text": "So, first, we started with this.",
    "start": "731130",
    "end": "736230"
  },
  {
    "text": "So let's say S is a subset\nof V. So you have a graph,",
    "start": "736230",
    "end": "742320"
  },
  {
    "text": "and you make a subgraph. So you pick out some vertices.",
    "start": "742320",
    "end": "747631"
  },
  {
    "text": "So you pick out this one,\nand this one, and this one, and this one, and\nthat is your S.",
    "start": "747632",
    "end": "752940"
  },
  {
    "text": "And, so, you get\na new graph which contains just those vertices.",
    "start": "752940",
    "end": "758310"
  },
  {
    "text": "And, whatever, I\njust connect them. So the claim is\nthat that graph also",
    "start": "758310",
    "end": "764339"
  },
  {
    "text": "has a Hamiltonian cycle,\nthe minimum cost Hamiltonian cycle, which is also the\ntraveling salesman solution.",
    "start": "764340",
    "end": "770380"
  },
  {
    "text": "So let's call that H star of\nS. So it's some cycle, which",
    "start": "770380",
    "end": "777160"
  },
  {
    "text": "looks like this, I guess, here. So H star of S. Now, the claim\nis that the cost of H star of S",
    "start": "777160",
    "end": "786590"
  },
  {
    "text": "is less than equal to\nthe cost of H star of G. That should make\nintuitive sense,",
    "start": "786590",
    "end": "792850"
  },
  {
    "text": "because you're taking\nonly some of the vertices and trying to traverse\nthem, and, in this case, you'll try to traverse\nall the vertices.",
    "start": "792850",
    "end": "799404"
  },
  {
    "text": "However, this is only true\nbecause of the triangle inequality, and let's\nsee why that is the case.",
    "start": "799405",
    "end": "804800"
  },
  {
    "text": "So, proof by contradiction. Say cost of H star of\nS is actually greater",
    "start": "804800",
    "end": "816740"
  },
  {
    "text": "than cost of H star of G.\nOK, so, look at H star of G.",
    "start": "816740",
    "end": "824890"
  },
  {
    "text": "It's a cycle, right? So you have something.  Your cycle.",
    "start": "824890",
    "end": "830889"
  },
  {
    "text": "And, in this cycle, you\nhave all the vertices of S. So pick them out. ",
    "start": "830890",
    "end": "839810"
  },
  {
    "text": "And, now, you have\na cycle which has cost less than the\noptimal cycle in S,",
    "start": "839810",
    "end": "845310"
  },
  {
    "text": "but it contains all the vertices\nin S. So what you can do is, now you can use the\nskipping lemma from before.",
    "start": "845310",
    "end": "851477"
  },
  {
    "text": "So, last time, we didn't\nmove duplicate vertices. But, this time, what you'll\ndo is, instead, you'll just skip over this vertex.",
    "start": "851478",
    "end": "859220"
  },
  {
    "text": "We'll skip over this vertex. And so, every vertex that's\nnot an S, skip over it. And that can only\ndecrease the cost.",
    "start": "859220",
    "end": "866259"
  },
  {
    "text": "So, now, you've constructed\nanother cycle, which contains only the\nvertices of S. So it's a Hamiltonian cycle for S, but\nit has cost less than equal",
    "start": "866260",
    "end": "873480"
  },
  {
    "text": "to H star of G, which means\nthat this can never be true. So the important fact\nis, there, that if you",
    "start": "873480",
    "end": "880750"
  },
  {
    "text": "have a subset of vertices\nmaking the restricted graph,",
    "start": "880750",
    "end": "887390"
  },
  {
    "text": "the cost of the minimum\nHamiltonian cycle is always less than equal to\nthe one in the original graph. So, intuitively, that\nshould make sense.",
    "start": "887390",
    "end": "895190"
  },
  {
    "text": "OK, next thing is\nsomething which might seem unfamiliar right\nnow, perfect matchings.",
    "start": "895190",
    "end": "902260"
  },
  {
    "start": "896000",
    "end": "969000"
  },
  {
    "start": "902260",
    "end": "910360"
  },
  {
    "text": "So you've seen perfect\nmatchings in the content of bipartite graphs, right? So you find the minimum\ncost perfect matching.",
    "start": "910360",
    "end": "916560"
  },
  {
    "text": "You do this flow thing,\nyou send all the flow in, and then you connect the\nvertices with the capacities, and whatever.",
    "start": "916560",
    "end": "922400"
  },
  {
    "text": "So, it turns out,\nin a complete graph, you can still do\nperfect matching.",
    "start": "922400",
    "end": "927770"
  },
  {
    "text": "So perfect matching is,\nyou have a bunch of-- so, let's say, you need to have\nan even number of vertices, right, until we have\nperfect matching.",
    "start": "927770",
    "end": "932860"
  },
  {
    "text": "So, let's say, you\nhave these varieties. So this is a perfect matching.",
    "start": "932860",
    "end": "937880"
  },
  {
    "text": "So every vertex has one edge\ncoming out of it, exactly one edge coming out of it. And it needs to be even,\nbecause, otherwise, that",
    "start": "937880",
    "end": "943748"
  },
  {
    "text": "doesn't work out. So that's perfect matching,\nand the minimum cost perfect matching is the\nminimum among all such things.",
    "start": "943748",
    "end": "948912"
  },
  {
    "text": "And you did this for\nbivariate graphs. It's finite\n[INAUDIBLE] networks. So I'm not going to go into\nthe algorithm for this.",
    "start": "948912",
    "end": "954650"
  },
  {
    "text": "It's kind of complicated, but\nit uses linear programming, and you can find this\nfor a complete graph,",
    "start": "954650",
    "end": "959779"
  },
  {
    "text": "and it's polynomial,\nso that's good. So, given a complete graph, you\ncan find the perfect matching.",
    "start": "959780",
    "end": "966520"
  },
  {
    "text": "[INAUDIBLE] for now. OK, one last thing we want to\nintroduce is Euler circuits.",
    "start": "966520",
    "end": "976960"
  },
  {
    "start": "969000",
    "end": "1160000"
  },
  {
    "text": "So who has heard of\nEuler circuits before? Anyone? Sort of? OK.",
    "start": "976960",
    "end": "982002"
  },
  {
    "start": "982002",
    "end": "994150"
  },
  {
    "text": "So the reason we are-- so, OK, let's go back\nto what we did before. We had a tree, and the best\nway we found to traverse it",
    "start": "994150",
    "end": "1002769"
  },
  {
    "text": "was just going down, and\ngoing back up, and going down, and terribly messy. So what we would,\nrather, want to do,",
    "start": "1002770",
    "end": "1008460"
  },
  {
    "text": "is sort of traverse the thing\nwithout repeating edges. So, I don't know,\nyou've probably",
    "start": "1008460",
    "end": "1014270"
  },
  {
    "text": "seen this puzzle before. So you have this\ngraph given to you, and the task is to draw\nthis graph without lifting",
    "start": "1014270",
    "end": "1022380"
  },
  {
    "text": "your pen off the paper. So first, for example,\nin this graph, you could start here,\ngo here, go here,",
    "start": "1022380",
    "end": "1029269"
  },
  {
    "text": "and come back, and\nsomething, and there you got. So you can do that.",
    "start": "1029269",
    "end": "1035390"
  },
  {
    "text": "But if you add on another\nlobe, here, then you can't make a circuit.",
    "start": "1035390",
    "end": "1041007"
  },
  {
    "text": "You can still make\na path, I believe. If you add another one,\nyou can't even make a path. So how does this work?",
    "start": "1041008",
    "end": "1047339"
  },
  {
    "text": "Let's see. So, let's say, forget\nabout the graph, for now.",
    "start": "1047339",
    "end": "1053980"
  },
  {
    "text": "Let's say you're just drawing. So you start somewhere. You go to a vertex. You go to another vertex.",
    "start": "1053980",
    "end": "1059530"
  },
  {
    "text": "Come back, go to this\nvertex, leave it. And so, observe that, whenever\nyou're making this drawing,",
    "start": "1059530",
    "end": "1066960"
  },
  {
    "text": "you go to a vertex,\nand you leave it. Every time you hit a\nvertex, you leave it.",
    "start": "1066960",
    "end": "1072340"
  },
  {
    "text": "Since there's the circuit,\nyou just loop around, and every time you\nenter a vertex, you'll have to leave it.",
    "start": "1072340",
    "end": "1077480"
  },
  {
    "text": "What that means is that,\neven though this is not directed, if you drew out the\nactual path, you would see,",
    "start": "1077480",
    "end": "1083419"
  },
  {
    "text": "the number of edges\ngoing into a vertex is equal the number\nof ones leaving, which means that every\ndegree has to be even.",
    "start": "1083420",
    "end": "1091280"
  },
  {
    "text": "So if you go and look at this\ngraph, which is that of lobes, this degree is not even.",
    "start": "1091280",
    "end": "1096520"
  },
  {
    "text": "Neither is this, neither\nis this, neither is this. They're all 5, I think, yeah. They're all 5, which\nmeans that this can never",
    "start": "1096520",
    "end": "1102610"
  },
  {
    "text": "have an Euler circuit. So a graph can only\nhave an Euler circuit if it has even degrees\nfor every vertex.",
    "start": "1102610",
    "end": "1110460"
  },
  {
    "text": "And the other way is also true. If a graph has even\ndegrees on every vertex, then it must have\nan Euler circuit. That's not hard to\nprove, but there's",
    "start": "1110460",
    "end": "1116779"
  },
  {
    "text": "a constructive\nalgorithm you can use. So, let's say, you're given\nthis graph, for instance. You would simply\ngo to the graph,",
    "start": "1116780",
    "end": "1123529"
  },
  {
    "text": "just start at some random\nnode, and then go through, and keep following\nedges until you",
    "start": "1123530",
    "end": "1128900"
  },
  {
    "text": "can no longer following edges. So, let's say, you stop here. Then, you pick another\nedge, and start, and so on.",
    "start": "1128900",
    "end": "1134450"
  },
  {
    "text": "And, then, you can splice these\ncycles together at some point. So it's kind of a\n[INAUDIBLE] argument, but it should be\nsort of intuitive",
    "start": "1134450",
    "end": "1141540"
  },
  {
    "text": "why you can construct another\npath, given an even degree. You just perform searches. You just create cycles, and\nyou splice them together.",
    "start": "1141540",
    "end": "1149140"
  },
  {
    "text": "But, for now, just\ntake it as fact that a graph is\nan Euler circuit, as in you can draw it\nwithout lifting your pen off,",
    "start": "1149140",
    "end": "1156059"
  },
  {
    "text": "if, and only if, every\nvertex has even degree, so why is that interesting? So, let's say, we could\nadd some edges to our tree",
    "start": "1156060",
    "end": "1163910"
  },
  {
    "start": "1160000",
    "end": "1392000"
  },
  {
    "text": "and turn it into one\nof those nice graphs. Right now, this is not, right? This is degree 1, degree 1,\ndegree 3, degree 1, degree 1,",
    "start": "1163910",
    "end": "1171150"
  },
  {
    "text": "degree 3. All of them are odd,\nso that's not good. But, let's say, you could\nadd some edges in, turn it",
    "start": "1171150",
    "end": "1176639"
  },
  {
    "text": "into an Euler\ncircuit, and then you could do a nice reversal off it,\nand, maybe, that will give you",
    "start": "1176640",
    "end": "1181700"
  },
  {
    "text": "a better approximation. So with that hope, let's\nlook at the algorithm.",
    "start": "1181700",
    "end": "1187240"
  },
  {
    "text": "So what you do is, you\ngo back to your tree. ",
    "start": "1187240",
    "end": "1198090"
  },
  {
    "text": "Let's just leave it at that. So, now, let's see.",
    "start": "1198090",
    "end": "1203559"
  },
  {
    "text": "So this is degree\n2, that's good. This is degree 3,\nthat's not good. Degree 1, this is fine.",
    "start": "1203560",
    "end": "1209860"
  },
  {
    "text": "This is degree 1. This also is degree 1. This is degree 3.",
    "start": "1209860",
    "end": "1215017"
  },
  {
    "text": "Actually, let's get rid of this,\nso it does not have degree 3. That's a lot of vertices. OK, there we go.",
    "start": "1215017",
    "end": "1221390"
  },
  {
    "text": "So, in this graph,\nyou see that you have 1, 2, 3, 4, 5 vertices\nwhich have degree odd.",
    "start": "1221390",
    "end": "1227710"
  },
  {
    "text": "So, now, we would like to\nadd some edges to turn this",
    "start": "1227710",
    "end": "1232880"
  },
  {
    "text": "into an Euler circuitable graph. So how do we do that? So let's call the set of odd\nedges S. Odd vertices, sorry.",
    "start": "1232880",
    "end": "1248940"
  },
  {
    "start": "1248940",
    "end": "1256009"
  },
  {
    "text": "So you take the set of\nodd-degree vertices. Now, go back to\nperfect matchings.",
    "start": "1256010",
    "end": "1263100"
  },
  {
    "text": "So what does a\nperfect matching do? It adds edges to that\ngraph so that everything",
    "start": "1263100",
    "end": "1268470"
  },
  {
    "text": "gets degree increased by one. So if you increase the degree\nof all the odd vertices by 1,",
    "start": "1268470",
    "end": "1274340"
  },
  {
    "text": "everything turns even, right? So you take the set\nof odd vertices.",
    "start": "1274340",
    "end": "1280740"
  },
  {
    "text": "OK, another thing to observe. Realize that, how many\nodd vertices can you have? Can you have an odd\nnumber of odd vertices?",
    "start": "1280740",
    "end": "1286860"
  },
  {
    "text": "Because that would screw\nup the whole thing where we needed an even number of things. ",
    "start": "1286860",
    "end": "1296070"
  },
  {
    "text": "So why is that not possible? Why can you not have an\nodd number of odd vertices? ",
    "start": "1296070",
    "end": "1302490"
  },
  {
    "text": "So the thing is, that, let's\nsay, you have some graph,",
    "start": "1302490",
    "end": "1308030"
  },
  {
    "text": "and what is the sum of\nthe degrees of the graph? Let's move to a\ndifferent board for this.",
    "start": "1308030",
    "end": "1313550"
  },
  {
    "text": " So you have a graph, G, and\nyou want sum of degrees.",
    "start": "1313550",
    "end": "1320640"
  },
  {
    "text": "So di is the degree, for all\nV. So what is this equal to? So, let's say, you\nhave this graph.",
    "start": "1320640",
    "end": "1326180"
  },
  {
    "start": "1326180",
    "end": "1332990"
  },
  {
    "text": "So, now, if you count the\ndegrees of every vertex, you're basically counting the\nnumber of edges coming out,",
    "start": "1332990",
    "end": "1339490"
  },
  {
    "text": "which means that every\nedge is counted twice, once for this end point and\nonce for this end point. So this edge is counted\ntwice, for here and here.",
    "start": "1339490",
    "end": "1346107"
  },
  {
    "text": "This edge is also counted twice. So, basically, the\nsum of the degrees is nothing but 2 times mod\nof E. Does that make sense?",
    "start": "1346107",
    "end": "1353789"
  },
  {
    "text": " So this is even.",
    "start": "1353790",
    "end": "1360230"
  },
  {
    "text": "Now, let's say you take\nonly the odd vertices out. So the even vertices are good.",
    "start": "1360230",
    "end": "1365510"
  },
  {
    "text": "This is good. This is good. This is not good. This is also not good. So these are the odd vertices.",
    "start": "1365510",
    "end": "1373670"
  },
  {
    "text": "So the sum of the degrees\nof the even vertices are, by definition, even. So, if you remove them,\nthe sum of the odd vertices",
    "start": "1373670",
    "end": "1381100"
  },
  {
    "text": "should also remain even. And so, you have the sum of\nodd degrees becoming even,",
    "start": "1381100",
    "end": "1387426"
  },
  {
    "text": "which means that you'll need\nto have an even number of them. Make sense? So, going back to this, so\nthere's a lot of branching off,",
    "start": "1387426",
    "end": "1396140"
  },
  {
    "start": "1392000",
    "end": "1918000"
  },
  {
    "text": "here. But going back to\nthe main point, here, is that you have an\neven number of odd vertices.",
    "start": "1396140",
    "end": "1402300"
  },
  {
    "text": "So consider the restriction\nof the original graph, G to this set, S.\nSo, now, we're going",
    "start": "1402300",
    "end": "1409035"
  },
  {
    "text": "to the first thing\nwe did, there, where we considered a\nrestriction of the graph to a certain set of vertices.",
    "start": "1409035",
    "end": "1414340"
  },
  {
    "text": "So we take the set,\nso 1, 2, 3, 4, 5. So you take these five vertices. ",
    "start": "1414340",
    "end": "1422670"
  },
  {
    "text": "And you consider the graph that\nis restricted to these five vertices. Oh, sorry, there should be six.",
    "start": "1422670",
    "end": "1429010"
  },
  {
    "text": "Oh, that's interesting. Oh, there we go. That's the other one. ",
    "start": "1429010",
    "end": "1436200"
  },
  {
    "text": "So those are the six vertices\nwhich have odd degrees. Now, you find the\nperfect matching",
    "start": "1436200",
    "end": "1441310"
  },
  {
    "text": "with your polynomial-time\nalgorithm, and you get something.",
    "start": "1441310",
    "end": "1446679"
  },
  {
    "text": "So you can now add those\nedges back in here. So these are your new\nedges, and, let's say,",
    "start": "1446680",
    "end": "1454955"
  },
  {
    "text": "something, this one. OK, so you get three new edges.",
    "start": "1454955",
    "end": "1460370"
  },
  {
    "text": "And, now, realize that all\nthe degrees are now even, so now you can do\nyour Euler circuit. Also, let's call this matching\nM. So this is a set of edges,",
    "start": "1460370",
    "end": "1468690"
  },
  {
    "text": "M. Let's call the\noriginal tree T, and the new thing that\nis formed, is T union M.",
    "start": "1468690",
    "end": "1477997"
  },
  {
    "text": "So you're taking all\nthe edges from T, and you're adding\nall the edges from M. So, realize that you\ncan have multiple edges,",
    "start": "1477997",
    "end": "1483370"
  },
  {
    "text": "but that's fine, because\nEuler circuits allow you to have multiple edges. So, now, you take\nthis graph, and you",
    "start": "1483370",
    "end": "1488909"
  },
  {
    "text": "find this Euler circuit. So that is basically this thing.",
    "start": "1488910",
    "end": "1494679"
  },
  {
    "text": "So this set of edges in some\norder, and that order exists. So the cost of the\nEuler circuit--",
    "start": "1494680",
    "end": "1501890"
  },
  {
    "text": "let's call it C-- is equal to the cost of T\nplus the cost of M, right?",
    "start": "1501890",
    "end": "1507400"
  },
  {
    "text": "Because you're traversing\nall the edges in your graph. So that is the cost\nfor the Euler circuit.",
    "start": "1507400",
    "end": "1512640"
  },
  {
    "text": "Now, my claim is that-- so this is the difference\nbetween all the nodes in the graph. And, remember, you can do the\nwhole duplication argument,",
    "start": "1512640",
    "end": "1520640"
  },
  {
    "text": "from before. So, where's that? Oh, there. So you can do a\nduplication argument,",
    "start": "1520640",
    "end": "1526890"
  },
  {
    "text": "so you're visiting all\nthe edges in the graph, all the vertices in the graph. You remove the duplicates,\nand you have a valid path.",
    "start": "1526890",
    "end": "1533679"
  },
  {
    "text": "Now, let's see if this\nvalid path is actually a better approximation. ",
    "start": "1533680",
    "end": "1542900"
  },
  {
    "text": "So, again, you will go\nfrom C. So this C, you will go to C dash.",
    "start": "1542900",
    "end": "1549046"
  },
  {
    "text": "And this will give you,\nas before, cost of C dash",
    "start": "1549046",
    "end": "1554290"
  },
  {
    "text": "is less than equal\nto the cost of C, So, now, you're only\ninterested in cost of C. So what are we doing there?",
    "start": "1554290",
    "end": "1559795"
  },
  {
    "text": "So we know that the cost\nof C is equal to cost",
    "start": "1559795",
    "end": "1565170"
  },
  {
    "text": "of T plus the cost of M. So,\nfrom the previous problem,",
    "start": "1565170",
    "end": "1572070"
  },
  {
    "text": "we know that the cost of T is\nless than equal to the cost of H star of G, right?",
    "start": "1572070",
    "end": "1578700"
  },
  {
    "text": "So this is less than\nequal to cost of H star G.",
    "start": "1578700",
    "end": "1587769"
  },
  {
    "text": "So this guy is less than the\noptimal Hamiltonian path. What about this guy?",
    "start": "1587770",
    "end": "1593190"
  },
  {
    "text": " So let's look at the\nactual H star G, again.",
    "start": "1593190",
    "end": "1599020"
  },
  {
    "start": "1599020",
    "end": "1605980"
  },
  {
    "text": "So, actually, let's\nlook at H star S. So remember that S is\nthe set of odd vertices,",
    "start": "1605980",
    "end": "1613370"
  },
  {
    "text": "and that is where\nthis matching is done. So H star S is nothing but\nthe optimal Hamiltonian cycle on that restricted graph.",
    "start": "1613370",
    "end": "1622029"
  },
  {
    "text": "From our previous lemma,\nwhich is down here, we know that H star of S\nis less than H star of G.",
    "start": "1622030",
    "end": "1630080"
  },
  {
    "text": "So we know that cost of is less\nthan equal to cost of whatever,",
    "start": "1630080",
    "end": "1640370"
  },
  {
    "text": "G. So, now, let's just\nlook at H star of S. Now,",
    "start": "1640370",
    "end": "1645630"
  },
  {
    "text": "we construct a matching. We take every other edge. We take this one, and we take\nthis one, and we take this one.",
    "start": "1645630",
    "end": "1653409"
  },
  {
    "text": "And look at the\nalternate set, also. So take this one, and\nthis one, and this one.",
    "start": "1653410",
    "end": "1659190"
  },
  {
    "text": "So look at the blue\nset and the red set. Since it's part of\na Hamiltonian cycle, they're both matchings, right?",
    "start": "1659190",
    "end": "1666990"
  },
  {
    "text": "So let's call the red one\nM1, and the blue one M2.",
    "start": "1666990",
    "end": "1672667"
  },
  {
    "text": "So I'm not saying they're\nperfect matchings. They're not the\nminimum matchings, but they're definitely\nperfect matchings.",
    "start": "1672667",
    "end": "1678740"
  },
  {
    "text": "And because we know the\nperfect matching is M, or the minimum matching\nis M. Cost of M",
    "start": "1678740",
    "end": "1686270"
  },
  {
    "text": "is less than equal to cost of\nM1, and, also, the cost of M",
    "start": "1686270",
    "end": "1696190"
  },
  {
    "text": "is less than equal\nto the cost of M2. That make sense?",
    "start": "1696190",
    "end": "1702450"
  },
  {
    "text": "Because M was the\nminimum cost matching, you have cost of M is less\nthan any other matching, which is constructed from this.",
    "start": "1702450",
    "end": "1709270"
  },
  {
    "text": "Again, so this implies\nthat the cost of M",
    "start": "1709270",
    "end": "1714950"
  },
  {
    "text": "is less than equal\nto half cost of--",
    "start": "1714950",
    "end": "1723674"
  },
  {
    "text": "OK, let's not write this here.  Let's get a different board.",
    "start": "1723675",
    "end": "1729029"
  },
  {
    "start": "1729030",
    "end": "1736150"
  },
  {
    "text": "So cost of n is less than\nequal to half cost of M1",
    "start": "1736150",
    "end": "1744786"
  },
  {
    "text": "plus cost of M2. Since both of these guys\nare larger than this,",
    "start": "1744786",
    "end": "1750740"
  },
  {
    "text": "their average is also\nlarger than this, right? But what is cost\nof M1 cost of M2?",
    "start": "1750740",
    "end": "1755805"
  },
  {
    "text": "This is nothing but half\ncost of H star of S, right?",
    "start": "1755805",
    "end": "1762650"
  },
  {
    "text": "Because the Hamiltonian cycle\nis constructed from M1 and M2. ",
    "start": "1762650",
    "end": "1770636"
  },
  {
    "text": "And by our lemma,\nthis is less than equal to half cost\nof H star of G.",
    "start": "1770636",
    "end": "1779690"
  },
  {
    "text": "So, now, we have all we need. This is less than equal to\nhalf cost of H star of G.",
    "start": "1779690",
    "end": "1790130"
  },
  {
    "text": "And then, add them together,\nyou get cost of C dash",
    "start": "1790130",
    "end": "1795630"
  },
  {
    "text": "is less than equal to\ncost of C, is less than equal to the sum, which is equal\nto 3/2 cost of H star of G.",
    "start": "1795630",
    "end": "1809227"
  },
  {
    "text": "So that's the proof. So there's a lot of\nthings going on, here. Let's try to go back\nand see what we did.",
    "start": "1809227",
    "end": "1814580"
  },
  {
    "text": "So we took a minimum\nspanning tree,",
    "start": "1814580",
    "end": "1819830"
  },
  {
    "text": "and then we tried to remove\nall the odd degree vertices. So we took all the\nodd degree vertices, and made a perfect matching, the\nminimum cost perfect matching.",
    "start": "1819830",
    "end": "1827960"
  },
  {
    "text": "So we added edges just to\nmake everything even degree. Then, we took the Euler\ncircuit on that graph,",
    "start": "1827960",
    "end": "1836769"
  },
  {
    "text": "and we removed duplicates. So that's fine,\nthat's the easy part. But you do [INAUDIBLE]\ncircuit on that graph,",
    "start": "1836770",
    "end": "1842660"
  },
  {
    "text": "then you argued that, because\nall the circuits in that graph is just the sum of the\nedges in the spanning tree",
    "start": "1842660",
    "end": "1848809"
  },
  {
    "text": "plus the sum of the edges\nin the matching, which you added later. So the spanning tree\nhad already bounded, in the previous argument.",
    "start": "1848810",
    "end": "1855220"
  },
  {
    "text": "The matching was bounded by\ntaking the optimal Hamiltonian cycle, decomposing it\ninto two matchings,",
    "start": "1855220",
    "end": "1862690"
  },
  {
    "text": "arguing that those two matchings\nare not the optimal matchings-- not necessarily the\noptimal matchings, but they're less than\nequal to the optimal.",
    "start": "1862690",
    "end": "1870120"
  },
  {
    "text": "So they're even, there. And, so, the cost of\nthe optimal matching, which you were using in\nour constructive path,",
    "start": "1870120",
    "end": "1876640"
  },
  {
    "text": "constructive\nHamiltonian cycle, is less than equal to\nboth of these matching. You add them up, you get\nthat bound, and it works.",
    "start": "1876640",
    "end": "1883350"
  },
  {
    "text": "So questions on\nany of the steps? This is a lot of branching off\nand then coming back together.",
    "start": "1883350",
    "end": "1888802"
  },
  {
    "text": "Yeah. STUDENT: The last\none's 3/2, right? AMARTYA SHANKHA BISWAS: Yes. That is not 3 over 3.",
    "start": "1888802",
    "end": "1893963"
  },
  {
    "text": "That would be p equal to np.  Anything else?",
    "start": "1893963",
    "end": "1899480"
  },
  {
    "start": "1899480",
    "end": "1905919"
  },
  {
    "text": "You're free to go, or ask\nquestions, or whatever. ",
    "start": "1905920",
    "end": "1918756"
  }
]