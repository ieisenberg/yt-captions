[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5819"
  },
  {
    "start": "5820",
    "end": "12620"
  },
  {
    "text": "JUSTIN SOLOMON: Well, welcome\nto problem session 5 of 6.006. It's a pleasure to see all\nyour smiling faces here today.",
    "start": "12620",
    "end": "20195"
  },
  {
    "text": "This week, we're going\nto cover some problems in graph theory related\nto depth-first search and breadth-first search, which\nwere roughly the topics that I",
    "start": "20195",
    "end": "27530"
  },
  {
    "text": "guess we've covered in\nthe last couple lectures and what's going to\nbe on your homework. And I believe this is\nbasically the homework",
    "start": "27530",
    "end": "32752"
  },
  {
    "text": "from last year with\na few revisions, based on some typos we caught.",
    "start": "32753",
    "end": "38281"
  },
  {
    "text": "Oh, and I caught\na spelling mistake that I'll bother our\ninstructor about later. OK. So without further\nado, let's get started.",
    "start": "38282",
    "end": "44913"
  },
  {
    "text": "I guess we'll just do them in\norder for lack of creativity here. The very first problem has\nto do with some measurements",
    "start": "44913",
    "end": "50360"
  },
  {
    "text": "on a graph, which is actually\na really interesting one to me. So it turns out that in\na lot of research in--",
    "start": "50360",
    "end": "56378"
  },
  {
    "text": "for some reason, in\ncomputer science, there's graph theory\nresearch, and then there's networks research. And these are two\ndifferent communities",
    "start": "56378",
    "end": "63170"
  },
  {
    "text": "for weird historical\nreasons that I don't totally understand. But people in the network\nscience literature",
    "start": "63170",
    "end": "69140"
  },
  {
    "text": "often measure things\nlike the radius of the graph and some\nother kind of measures that are trying to tell\nyou something about, like,",
    "start": "69140",
    "end": "75020"
  },
  {
    "text": "is a graph a long,\nspread-out thing, like a line graph, or something\nsuper compact, like a star?",
    "start": "75020",
    "end": "80510"
  },
  {
    "text": "And so on. And so this problem\nis kind of digging into the algorithmic\naspects of how we might compute one\nof the measurements",
    "start": "80510",
    "end": "86540"
  },
  {
    "text": "that I believe is fairly\ncommon in that community.",
    "start": "86540",
    "end": "92520"
  },
  {
    "text": "So let's kind of go\nthrough these problems. As usual, in 6.006, we\nlike to take actually",
    "start": "92520",
    "end": "97717"
  },
  {
    "text": "relatively straightforward\ncomputational problems and then dress them up\nwith a lot of language to make it annoying\nfor you guys to parse.",
    "start": "97718",
    "end": "103840"
  },
  {
    "text": "And indeed, this problem\nis no exception to that. So in this problem, we're\ngiven an undirected graph.",
    "start": "103840",
    "end": "110560"
  },
  {
    "start": "110560",
    "end": "116049"
  },
  {
    "text": "And as usual, we\nwill call him G. And we define a\nparticular number",
    "start": "116050",
    "end": "122960"
  },
  {
    "text": "that we're trying to measure\nin this problem, right? So in particular, if\nwe're given a vertex v,",
    "start": "122960",
    "end": "132140"
  },
  {
    "text": "then we can define something\ncalled the eccentricity of v, which is the distance to\nthe farthest-away thing.",
    "start": "132140",
    "end": "139470"
  },
  {
    "text": "So in particular,\nwe can define-- ",
    "start": "139470",
    "end": "147290"
  },
  {
    "text": "it's going to be given by\nthe following, which is the max over all the possible--",
    "start": "147290",
    "end": "155540"
  },
  {
    "text": "I'll try to make\nsure my notation-- oops, I've already--\nwell, that's OK-- ",
    "start": "155540",
    "end": "162989"
  },
  {
    "text": "over all the other vertices\nof the distance from v to w.",
    "start": "162990",
    "end": "170070"
  },
  {
    "text": "So I'm standing at\na point on a graph. And now I like\nmake a loud noise. And the last person to hear\nme, the distance to him",
    "start": "170070",
    "end": "176849"
  },
  {
    "text": "would be the eccentricity\nof that vertex. And so this is some kind of\nnotion of radius or diameter,",
    "start": "176850",
    "end": "186000"
  },
  {
    "text": "but sort of planted at a point. And then if we want to learn\na property not of a vertex, but of the entire graph,\none thing we can do",
    "start": "186000",
    "end": "193230"
  },
  {
    "text": "is define the radius.  And that is given by R\nof G is the min over all",
    "start": "193230",
    "end": "205390"
  },
  {
    "text": "of the different vertices,\nu, of the eccentricity of u.",
    "start": "205390",
    "end": "211390"
  },
  {
    "text": "OK, so I think this is one\nof these definitions that's really annoying to\nparse and think about. So we should draw a\nlittle bit of a schematic",
    "start": "211390",
    "end": "217300"
  },
  {
    "text": "and see what's going\non here, because especially as a geometry\nprofessor, this one's kind of nice, because it\ntranslates directly to what you",
    "start": "217300",
    "end": "224710"
  },
  {
    "text": "might do in metric geometry. So let's say that I\nhave a circle here.",
    "start": "224710",
    "end": "229780"
  },
  {
    "text": "And I want the world's\nmost complicated way of defining its radius. So for any given point--",
    "start": "229780",
    "end": "236890"
  },
  {
    "text": "there's a point in a circle. That's a circle, in\ncase you were wondering. You know those\ninternet contests where they have people that\njust walk up to the board,",
    "start": "236890",
    "end": "243160"
  },
  {
    "text": "and draw perfect\ncircles, and then leave? I unfortunately am not\nan expert at this matter.",
    "start": "243160",
    "end": "249280"
  },
  {
    "text": "But anyway, so if we\nthink of a point-- like a circle as some\nanalog of our graph, and then I draw a\npoint, which might",
    "start": "249280",
    "end": "255730"
  },
  {
    "text": "be the analog of a vertex,\nthen what is the eccentricity? Well, it's the distance to the\nfarthest-away point, right?",
    "start": "255730",
    "end": "263349"
  },
  {
    "text": "So for this guy, it might\nbe the length of this line,",
    "start": "263350",
    "end": "268450"
  },
  {
    "text": "roughly, because\nthat's the distance to the farthest-away thing. So for every different\npoint that I draw,",
    "start": "268450",
    "end": "276280"
  },
  {
    "text": "each point has its own\nfarthest-away point in the circle. So there's some\npositive number that's",
    "start": "276280",
    "end": "281440"
  },
  {
    "text": "assigned to every single\npoint in this domain. And if I take the minimum\nof that positive number,",
    "start": "281440",
    "end": "286870"
  },
  {
    "text": "where do you think I end up? AUDIENCE: Center of the circle. JUSTIN SOLOMON:\nThat's right, Jason. I end up in the\ncenter of the circle,",
    "start": "286870",
    "end": "293050"
  },
  {
    "text": "because if I think\nabout it, the distance to the farthest-away point\nin this domain, one thing you",
    "start": "293050",
    "end": "298750"
  },
  {
    "text": "can convince yourself\nis that that's sort of as small as possible. So this is what we might\ncall a min-max problem",
    "start": "298750",
    "end": "304240"
  },
  {
    "text": "in optimization, because\nwe are minimizing the maximum distance, yeah?",
    "start": "304240",
    "end": "309820"
  },
  {
    "text": "This also shows\nup in game theory, all kinds of different\nplaces that solve this stuff. But thankfully, in this\nparticular problem,",
    "start": "309820",
    "end": "315492"
  },
  {
    "text": "we're not going\nto need all that. OK, so right. So this homework\nproblem has two parts.",
    "start": "315492",
    "end": "322100"
  },
  {
    "text": "The first is to give an\nalgorithm for computing the radius of a graph.",
    "start": "322100",
    "end": "327152"
  },
  {
    "text": "And then the second one\nis to give an algorithm for approximating the\nradius of the graph really quickly, or more\nquickly than the first part.",
    "start": "327152",
    "end": "335032"
  },
  {
    "text": "I actually don't know if\nthere's a lower bound there. But come back to that later.",
    "start": "335032",
    "end": "340060"
  },
  {
    "text": "OK, so in part a, we're\ngiven G. And moreover, we're",
    "start": "340060",
    "end": "347430"
  },
  {
    "text": "given one additional piece of\ninformation, which we actually do need in this problem. I think it's one of those words\nthat kind of slips past us when",
    "start": "347430",
    "end": "353590"
  },
  {
    "text": "we read a graph theory problem. But it's important to\npay attention, of course. And that is, we're given\nG. And it's connected.",
    "start": "353590",
    "end": "362427"
  },
  {
    "text": "I suppose, really, it\nshould be given connected G. But that's OK. Now what we want is to compute\nthe radius of G in time that",
    "start": "362427",
    "end": "374860"
  },
  {
    "text": "looks like the product\nof the vertices, the number of vertices-- oops--",
    "start": "374860",
    "end": "380320"
  },
  {
    "text": "times the number of edges,\nor the number of times the number of vertices.",
    "start": "380320",
    "end": "385530"
  },
  {
    "text": "Your instructor struggles\nto speak and write at the same time. But it's a skill\nthat I'm working on. And frankly, handwriting is much\neasier with this little chalk.",
    "start": "385530",
    "end": "393750"
  },
  {
    "text": "OK. So essentially-- I used to have\na math professor in college that used this phrase all\nthe time that was just",
    "start": "393750",
    "end": "400900"
  },
  {
    "text": "like, it's important\nnot to think here. The problem asks you to\ncompute the radius of a graph.",
    "start": "400900",
    "end": "408129"
  },
  {
    "text": "And in some sense,\nthere's an algorithm that just writes itself for\ncomputing the radius, right? Because the radius is the\nmin over all the vertices,",
    "start": "408130",
    "end": "415900"
  },
  {
    "text": "of the eccentricity. The eccentricity is\nthe max distance. So what would be the\nsimplest thing to do here?",
    "start": "415900",
    "end": "421780"
  },
  {
    "text": "Well, in some sense, it would be\nto loop over all the vertices, compute their distance to\nall the other vertices,",
    "start": "421780",
    "end": "427570"
  },
  {
    "text": "and take the max for\neach one of those and then the min over all of\nthe guys in the outer loop.",
    "start": "427570",
    "end": "434710"
  },
  {
    "text": "Since I just said a sentence\nthat I'm realizing doesn't parse particularly well, let's\nsort of write down what I mean,",
    "start": "434710",
    "end": "440860"
  },
  {
    "text": "which is to say, we're going to\nthink of there being an outer-- that's why we don't use this\nchalk-- an outer for loop,",
    "start": "440860",
    "end": "447170"
  },
  {
    "text": "which is computing this min. So-- right?",
    "start": "447170",
    "end": "453070"
  },
  {
    "text": "Well, what are we going to do? We can compute the\nshortest path distance",
    "start": "453070",
    "end": "465390"
  },
  {
    "text": "to all of the other w in my\ngraph, take the max of w--",
    "start": "465390",
    "end": "481450"
  },
  {
    "text": "of distance from v\nto all the other w's. Obviously, we can kind of do\nthese two at the same time.",
    "start": "481450",
    "end": "488009"
  },
  {
    "text": "And then, if this number is\nbigger than my current max, keep it. Oh, yikes.",
    "start": "488010",
    "end": "493470"
  },
  {
    "text": "If it's smaller than the current\nestimate I have of the radius, then I keep it.",
    "start": "493470",
    "end": "498960"
  },
  {
    "text": "And if it's not, then\nI throw it away, right? So maybe I initialize\nmy radius at infinity.",
    "start": "498960",
    "end": "505479"
  },
  {
    "text": "And now let's call this\nnumber, I don't know, little r. If little r is less\nthan big R, then just",
    "start": "505480",
    "end": "514409"
  },
  {
    "text": "keep it around, right? And so if we think\nabout it, I don't think it's terribly hard to\nprove that this algorithm is",
    "start": "514409",
    "end": "520669"
  },
  {
    "text": "correct, because it's\nsort of just taking our definition of what\nthe radius of a graph is and translating it into\na braindead algorithm.",
    "start": "520669",
    "end": "529440"
  },
  {
    "text": "So I think really,\nthe challenge here is proving the runtime in\nthis particular algorithm.",
    "start": "529440",
    "end": "537420"
  },
  {
    "text": "So what does our\nruntime look like? So we have a loop over vertices.",
    "start": "537420",
    "end": "543800"
  },
  {
    "text": "So I kind of incur a\nfactor of mod v here. And then, well, our\ngraph is unweighted.",
    "start": "543800",
    "end": "551030"
  },
  {
    "text": "So one strategy for computing\nthe shortest path distance would be breadth-first search.",
    "start": "551030",
    "end": "556783"
  },
  {
    "text": "I think that's\nwhat's in my notes. Yep. And in general,\nbreadth-first search, if you recall from lecture,\ntakes mod v plus mod E time.",
    "start": "556783",
    "end": "568380"
  },
  {
    "text": "So the question is, OK, so if I\nmultiply these things together, what do I get? I get O of v times v\nplus E, like that, time.",
    "start": "568380",
    "end": "583400"
  },
  {
    "text": "But like, uh-oh. That's not the time that my\nhomework problem wanted, right? Because the homework\nproblem asks",
    "start": "583400",
    "end": "589070"
  },
  {
    "text": "you to solve this in\njust mod v times E time. And somehow we've\nincurred an extra factor.",
    "start": "589070",
    "end": "596330"
  },
  {
    "text": "And now we have to figure\nout why this is actually OK, or we have to fix our algorithm. But in this case, it turns\nout that this runtime",
    "start": "596330",
    "end": "603170"
  },
  {
    "text": "is just inaccurate, OK? What's our intuition here?",
    "start": "603170",
    "end": "608589"
  },
  {
    "text": "Well, I kind of underlined\nit for you here. Our graph is connected. And in particular,\nthere's going to be",
    "start": "608590",
    "end": "615420"
  },
  {
    "text": "a nice property of\nconnected graphs, which is that the number of edges\ndwarfs the number of vertices",
    "start": "615420",
    "end": "621209"
  },
  {
    "text": "here. So really, if we have v\nplus E, in some sense, this is going to look like\na constant factor times E",
    "start": "621210",
    "end": "627480"
  },
  {
    "text": "plus another E here. So this whole thing is going\nto be v times E time, yeah? So let's make that argument\na tiny bit more formal here.",
    "start": "627480",
    "end": "636310"
  },
  {
    "text": "So in particular, we\nknow that G is connected. ",
    "start": "636310",
    "end": "646050"
  },
  {
    "text": "And every vertex--\nso in particular, what can happen here is--",
    "start": "646050",
    "end": "651269"
  },
  {
    "text": "OK, unless my graph consists\nof one vertex, which is a case you could dispose of\npretty quickly, what I can't",
    "start": "651270",
    "end": "657387"
  },
  {
    "text": "have is a graph that looks like\nthis, like one vertex and then an edge floating around there. Everything has to be\nconnected together--",
    "start": "657387",
    "end": "665790"
  },
  {
    "text": "connected together. OK, so in particular,\nwhat this means is that every vertex is adjacent\nto at least one edge, again,",
    "start": "665790",
    "end": "682770"
  },
  {
    "text": "except, I guess, technically,\nthe one vertex case. But I think we can\nconvince ourselves that for any graph\nof constant size,",
    "start": "682770",
    "end": "688110"
  },
  {
    "text": "we're not terribly\nworried about it, right? It's just the asymptotics\nthat matter in this problem. OK, so if every vertex\nis adjacent to one",
    "start": "688110",
    "end": "695700"
  },
  {
    "text": "edge, well-- and remember\nthat every edge, kind of by definition of an edge,\nis adjacent to two vertices.",
    "start": "695700",
    "end": "702070"
  },
  {
    "text": "Then what we can conclude is\nthat the number of vertices is less than or equal to the\nnumber of edges divided by 2.",
    "start": "702070",
    "end": "708480"
  },
  {
    "text": "This is a conservative estimate. And so in particular,\nwhat does that mean?",
    "start": "708480",
    "end": "713680"
  },
  {
    "text": "It means that v is\nbig O of E. This",
    "start": "713680",
    "end": "719477"
  },
  {
    "text": "is a case where we have to\nbe quite careful about big O being an upper bound, right? In this case, typically,\nv is much less than E--",
    "start": "719478",
    "end": "727710"
  },
  {
    "text": "well, depends how\nmany edges, like if you have a really\ndense graph or not.",
    "start": "727710",
    "end": "732759"
  },
  {
    "text": "But in this case,\nwhat does that mean? That means that mod v plus mod\nE is really just big O of mod E,",
    "start": "732760",
    "end": "742030"
  },
  {
    "text": "right? Because this is big O of\nmod E plus big O of mod E. And that means that our problem\nreally runs in v times E time,",
    "start": "742030",
    "end": "755839"
  },
  {
    "text": "which is what we\nwanted in our problem. Are there any questions from\nour audience on part a here?",
    "start": "755840",
    "end": "764340"
  },
  {
    "text": "Cool. AUDIENCE: I don't\nquite understand why-- where you went from\nthe first statement",
    "start": "764340",
    "end": "769570"
  },
  {
    "text": "to the second statement there. At least one edge implies v is\nless than or equal to E over 2.",
    "start": "769570",
    "end": "775318"
  },
  {
    "text": "JUSTIN SOLOMON: Oh, yeah. So I guess there's sort of two\nthings that matter here, right? Every vertex is adjacent\nto one edge at most.",
    "start": "775318",
    "end": "782800"
  },
  {
    "text": "And every edge-- yikes.",
    "start": "782800",
    "end": "788680"
  },
  {
    "text": "Every edge is adjacent\nto two vertices.",
    "start": "788680",
    "end": "796593"
  },
  {
    "text": "I guess, actually, it's the\nsecond one that matters. So you can never have a vertex\njust floating by itself.",
    "start": "796593",
    "end": "802070"
  },
  {
    "text": "So one way that I can\ncount my number of vertices is by looking at\nthe number of edges and saying that, well, every\nedge can touch exactly two",
    "start": "802070",
    "end": "810250"
  },
  {
    "text": "vertices. Every vertex has\nto touch exactly-- well, at least one edge. So if you put\nthose together, you",
    "start": "810250",
    "end": "816100"
  },
  {
    "text": "can convince yourself that\nthis bound has to be 2. If you want to be\nconservative about it, you can just get rid of the\ndivided by 2 here, I guess.",
    "start": "816100",
    "end": "822760"
  },
  {
    "text": "It doesn't really matter. Any other questions\nfrom our audience? Cool.",
    "start": "822760",
    "end": "828330"
  },
  {
    "text": "All right, so now, let's\ntake a look at part b. So in part b here, they ask us\nto basically do some version",
    "start": "828330",
    "end": "837248"
  },
  {
    "text": "of the same thing, right? They want us to now\napproximate the radius. But we're given a\nsmaller budget of time.",
    "start": "837248",
    "end": "843850"
  },
  {
    "text": "So now what we want\nin number b here is, compute an R\nstar such that--",
    "start": "843850",
    "end": "857730"
  },
  {
    "text": "I got yelled at in my\ntextbook that st should always be \"subject to.\"",
    "start": "857730",
    "end": "862829"
  },
  {
    "text": "I got an angry review\nof the textbook I wrote because of that,\nwhich was puzzling to me. But amazon.com is not a\ngreat source of useful data.",
    "start": "862830",
    "end": "872310"
  },
  {
    "text": "But in any event, we\nwant R star, which is sandwiched between\nthe radius of G",
    "start": "872310",
    "end": "880000"
  },
  {
    "text": "and 2 times the radius\nof G, like that.",
    "start": "880000",
    "end": "885740"
  },
  {
    "text": "Now, notice-- so in\nother words, we want to-- the first thing to notice\nis we want to upper bound the radius of our graph.",
    "start": "885740",
    "end": "893060"
  },
  {
    "text": "And already, this\nshould suggest to us how we might solve this problem,\nbecause if we take a look back",
    "start": "893060",
    "end": "898520"
  },
  {
    "text": "at our definition\nof radius over here, notice that the radius\nis a min, right? So what's going to\nhappen if I returned",
    "start": "898520",
    "end": "906230"
  },
  {
    "text": "epsilon of some other vertex? Well, it's lower\nbounded by the radius, because the radius is the\nsmallest possible epsilon",
    "start": "906230",
    "end": "912740"
  },
  {
    "text": "over any vertex. That make sense? Now, when I was\ndoing this problem,",
    "start": "912740",
    "end": "918319"
  },
  {
    "text": "because, you know, I'm the\ndumb instructor of the three, I said, well, OK,\nbut maybe I need",
    "start": "918320",
    "end": "925699"
  },
  {
    "text": "to be somehow judicious\nabout what vertex I choose. Like, well, in some\nsense, what this suggests",
    "start": "925700",
    "end": "932612"
  },
  {
    "text": "is that maybe I choose\nsome other vertex, and compute its\nradius, and return that as our approximation.",
    "start": "932612",
    "end": "938900"
  },
  {
    "text": "But of course, the problem\nwants me to sandwich it between two values here. So in addition to\nupper bounding R,",
    "start": "938900",
    "end": "946498"
  },
  {
    "text": "I want to be less than 2\ntimes R. In other words, my approximation is\nwithin a constant factor.",
    "start": "946498",
    "end": "951860"
  },
  {
    "text": "I tried some weird stuff, like\nfarthest point sampling and so on. Then I realized that you\nactually don't really",
    "start": "951860",
    "end": "957139"
  },
  {
    "text": "need to do any of that. One thing you can do is\nliterally choose any vertex,",
    "start": "957140",
    "end": "962750"
  },
  {
    "text": "return its eccentricity. And that's actually good enough.",
    "start": "962750",
    "end": "968330"
  },
  {
    "text": "So here's our algorithm. Let me go back to my notes here.",
    "start": "968330",
    "end": "974287"
  },
  {
    "text": "I don't know why I'm\nfollowing my notes, actually. I could do this off\nthe top of my head. But they make me feel\nbetter if I'm looking",
    "start": "974287",
    "end": "979399"
  },
  {
    "text": "at them at the same time. So in particular, what I'm going\nto do is choose u and v. Let me",
    "start": "979400",
    "end": "991829"
  },
  {
    "text": "be clear here-- any u and v. So if I'm\nusing some data structure",
    "start": "991830",
    "end": "996959"
  },
  {
    "text": "to store all my vertices, I just\ntake the first one, whatever. And two, I'm going to return R\nstar is equal to epsilon of u.",
    "start": "996960",
    "end": "1013012"
  },
  {
    "text": "Now, of course, this\nisn't really an algorithm. If you do this on your\nhomework, you'll lose points. And the reason is that\nI haven't told you",
    "start": "1013012",
    "end": "1018478"
  },
  {
    "text": "how to compute this value here. So if you were to write out\nyour answer for this problem, of course, you\nshould tell us that,",
    "start": "1018478",
    "end": "1024809"
  },
  {
    "text": "like, really, to compute\nepsilon, what do I do? I use breadth-first\nsearch to compute the shortest path from u\nto all the other vertices.",
    "start": "1024810",
    "end": "1031709"
  },
  {
    "text": "And then I guess I take\nthe max value here. OK, so I think you guys\ncan fill in the details",
    "start": "1031710",
    "end": "1037199"
  },
  {
    "text": "of the algorithm. The bigger challenge\nis going to be to prove that this is\nactually a good bound, right?",
    "start": "1037200",
    "end": "1044400"
  },
  {
    "text": "And so, in other words,\nwhat we need to prove here-- I don't know. Like, there's a claim.",
    "start": "1044400",
    "end": "1049980"
  },
  {
    "text": "There's a proposition. There's a theorem,\nsomewhere on that axis. I'm going to call\nthis one a claim. I'm going to downgrade it.",
    "start": "1049980",
    "end": "1057600"
  },
  {
    "text": "And that is that the\nradius of my graph",
    "start": "1057600",
    "end": "1062820"
  },
  {
    "text": "is less than or equal to\nR star, which is less than or equal to 2 times\nthe radius of my graph.",
    "start": "1062820",
    "end": "1073140"
  },
  {
    "text": "OK, so let's prove this thing. I'm managing to use all of my\nboards on one problem here.",
    "start": "1073140",
    "end": "1082240"
  },
  {
    "text": "OK, so in particular,\nto prove this claim, I need to prove\ntwo inequalities. This is like two\nhomework problems in one.",
    "start": "1082240",
    "end": "1089679"
  },
  {
    "text": "So let's number those off. There's 1. There's 2. OK, so let's do inequality 1.",
    "start": "1089680",
    "end": "1099080"
  },
  {
    "text": "I think we can squeeze him\ninto a relatively small space. So remember, what is\nthe radius of my graph?",
    "start": "1099080",
    "end": "1108000"
  },
  {
    "text": "Well, just by\ndefinition, we know that it's the min over all\npossible u of epsilon of u.",
    "start": "1108000",
    "end": "1119270"
  },
  {
    "text": "So in particular, what's-- the nice property about\nthe minimum of something is that it's less than\neverything else or equal.",
    "start": "1119270",
    "end": "1126050"
  },
  {
    "text": "So this-- maybe\nlet's call this u0, just to distinguish between\nthat and the notation I",
    "start": "1126050",
    "end": "1132500"
  },
  {
    "text": "have on the left-hand side. This is less than or\nequal to epsilon of u,",
    "start": "1132500",
    "end": "1138210"
  },
  {
    "text": "because, I don't know,\nbecause min, yeah? So that actually already--",
    "start": "1138210",
    "end": "1145200"
  },
  {
    "text": "and of course, this is exactly\nwhat we chose to be our R star. So our first part of\nour proof is done here.",
    "start": "1145200",
    "end": "1152340"
  },
  {
    "text": "So this is the easy part. And sometimes,\nlike, this is sort of what inspired our algorithm.",
    "start": "1152340",
    "end": "1157510"
  },
  {
    "text": "So we expect this bound to\nbe kind of straightforward. OK, but the other\nhalf of the problem",
    "start": "1157510",
    "end": "1163680"
  },
  {
    "text": "is a little more tricky. And actually, there's a\nsolution in the notes. And then I decided, just to make\nit a little more inaccurate,",
    "start": "1163680",
    "end": "1170549"
  },
  {
    "text": "to write up my own.  But actually, I have I have\nan ulterior motive, which",
    "start": "1170550",
    "end": "1176752"
  },
  {
    "text": "is I notice in\nthis class we don't tend to use a tiny piece\nof notation that I like. So for my convenience in\nfuture problems sessions,",
    "start": "1176753",
    "end": "1183060"
  },
  {
    "text": "I thought I'd introduce it now. So we're solving a\nminimization problem.",
    "start": "1183060",
    "end": "1189040"
  },
  {
    "text": "The nice thing is that\nin this class, everything we do is finite. If you take my\ngraduate course, that's not going to be the case.",
    "start": "1189040",
    "end": "1195100"
  },
  {
    "text": "In fact, actually,\nin lecture 2, we're going to do like\nvariational calculus. But in this course,\nwhat does that mean?",
    "start": "1195100",
    "end": "1201400"
  },
  {
    "text": "That means if I\nminimize a function, there is actually a\nvertex in my graph that achieves that\nminimum, right?",
    "start": "1201400",
    "end": "1209160"
  },
  {
    "text": "This is different than\nlike, for example, if I-- then I'll shut up. But if I wanted to minimize--\nhere's f of x equals 1 over x,",
    "start": "1209160",
    "end": "1217950"
  },
  {
    "text": "and I ask you for\nthe minimum value. Well, it's over all x\ngreater than or equal to 0.",
    "start": "1217950",
    "end": "1223770"
  },
  {
    "text": "Well, the minimum value is 0\nif I take x off to infinity. But it never quite crosses 0.",
    "start": "1223770",
    "end": "1229110"
  },
  {
    "text": "So you're kind of in\nthis weird universe. If you remember Jason's lecture,\nhe talked about infs and sups as opposed to mins and maxes.",
    "start": "1229110",
    "end": "1235769"
  },
  {
    "text": "But this can't happen\nin our problem, because when we compute\na min, there's actually a vertex that achieves it.",
    "start": "1235770",
    "end": "1242400"
  },
  {
    "text": "And that vertex,\nwe call arg min. And so this arg here\nstands for argument.",
    "start": "1242400",
    "end": "1248980"
  },
  {
    "text": "So one thing that I\ncan do is say, OK. So remember that my\nradius is the min, the min",
    "start": "1248980",
    "end": "1259190"
  },
  {
    "text": "over all u of epsilon of u. Then I'm going to define a\nvertex, u0, to be the arg",
    "start": "1259190",
    "end": "1269045"
  },
  {
    "text": "min over u of epsilon of u.",
    "start": "1269045",
    "end": "1274620"
  },
  {
    "text": "And this is just fancy\nnotation for saying, give me the actual vertex that\nmakes this value as",
    "start": "1274620",
    "end": "1279780"
  },
  {
    "text": "small as possible, yeah? The nice thing\nabout this problem is that we're not worried yet\nabout how we make runtime.",
    "start": "1279780",
    "end": "1287268"
  },
  {
    "text": "So I can construct\nthis kind of thing and not worry about how I\nactually found it, right? OK, so let's say\nthat we did that.",
    "start": "1287268",
    "end": "1293980"
  },
  {
    "text": "So this is, find me the\nvertex that actually gives me the radius, right?",
    "start": "1293980",
    "end": "1299940"
  },
  {
    "text": "So in other words,\nI find that vertex. And then I find his or\nher farthest-away vertex",
    "start": "1299940",
    "end": "1305110"
  },
  {
    "text": "and measure the distance. And that distance is the\nradius of my graph, OK?",
    "start": "1305110",
    "end": "1310517"
  },
  {
    "text": "So let's actually do that. So in particular, then I can\ndefine a second vertex, v0.",
    "start": "1310517",
    "end": "1316710"
  },
  {
    "text": "Well, how does the\nradius algorithm work? I find the central\nguy, and then I find the one that's\nfarthest away.",
    "start": "1316710",
    "end": "1322510"
  },
  {
    "text": "So we're going to\nmake him the arg max over all v in my graph\nof the distance starting",
    "start": "1322510",
    "end": "1331290"
  },
  {
    "text": "at u to any v. So if I think about my circle--",
    "start": "1331290",
    "end": "1337380"
  },
  {
    "text": "that's a circle. Then u0 is like that\ncenter of my circle.",
    "start": "1337380",
    "end": "1342570"
  },
  {
    "text": "And then v0 is like\nthat far-away point. This is a schematic, right?",
    "start": "1342570",
    "end": "1348630"
  },
  {
    "text": "My circle is really a\ngraph in this problem. But I think the\nanalogy actually works. OK.",
    "start": "1348630",
    "end": "1353910"
  },
  {
    "text": "But in reality, my\nalgorithm was braindead. I didn't actually compute u0. I just randomly drew--",
    "start": "1353910",
    "end": "1359315"
  },
  {
    "text": "sorry, I shouldn't\nuse that word. I arbitrarily drew a\nvertex, u, and then computed",
    "start": "1359315",
    "end": "1364649"
  },
  {
    "text": "the farthest-away\ndistance from that guy. And of course, what\nwe have to check is that that thing is within a\nfactor of 2 of what I wanted.",
    "start": "1364650",
    "end": "1371940"
  },
  {
    "text": "So OK. If I have u, then\nI'm additionally going to define one more\nthing called v. And that--",
    "start": "1371940",
    "end": "1378780"
  },
  {
    "start": "1378780",
    "end": "1389810"
  },
  {
    "text": "oh boy. OK, so I'm noticing\nI'm saying one thing, and I'm writing another. u0 is the center of my graph.",
    "start": "1389810",
    "end": "1396860"
  },
  {
    "text": "I think I said it. I just forgot to write it. And then this v is the\nfarthest-away guy from him. So basically, the\nsubscript 0 here means--",
    "start": "1396860",
    "end": "1404300"
  },
  {
    "text": "is the platonic ideal of\nwhat I wanted in my problem. And no subscript is going\nto mean the other one.",
    "start": "1404300",
    "end": "1409730"
  },
  {
    "text": "So now I compute the\nfarthest-away thing from the u that I actually chose\nin my algorithm.",
    "start": "1409730",
    "end": "1415340"
  },
  {
    "text": "That's some v bar. So again, remember, my\nalgorithm just says, OK, I'm going to choose\nsome other point, v,",
    "start": "1415340",
    "end": "1422419"
  },
  {
    "text": "and then return v's distance\nto some farthest-away point--",
    "start": "1422420",
    "end": "1427590"
  },
  {
    "text": "oh, sorry, choose another-- oh boy. Choose a point, u, and\nreturn his distance",
    "start": "1427590",
    "end": "1433090"
  },
  {
    "text": "to some far-away\npoint, v. I think I've managed to lose\neverybody, knotting together u's and v's here.",
    "start": "1433090",
    "end": "1439580"
  },
  {
    "text": "OK, so why'd I introduce\nall of this notation? Because this is what's going\non in this problem, right? To actually compute\nthe radius, I",
    "start": "1439580",
    "end": "1445570"
  },
  {
    "text": "want to find the most central\npoint, u0, and its distance its farthest-away thing, v0. In reality, I arbitrarily\nchose the point u.",
    "start": "1445570",
    "end": "1453340"
  },
  {
    "text": "And I returned u's\ndistance to some point, v. And I want to show\nthat those two things are within a factor of\n2 of each other.",
    "start": "1453340",
    "end": "1459940"
  },
  {
    "text": "OK, that summary\nmakes sense even, if I talked in circles\nfor a little while. OK, so let's actually do that.",
    "start": "1459940",
    "end": "1465890"
  },
  {
    "text": "So remember that the thing that\nI'm going to actually return is R star. And that is equal to the\ndistance from u to v now,",
    "start": "1465890",
    "end": "1475210"
  },
  {
    "text": "because I just made\nall these definitions. And now I get to use\nmy favorite inequality.",
    "start": "1475210",
    "end": "1483637"
  },
  {
    "text": "In fact, this is sort\nof the only inequality we know in this class\nso far, I think, which is the triangle\ninequality, which",
    "start": "1483637",
    "end": "1489840"
  },
  {
    "text": "says that, of\ncourse, this is less than or equal to\nthe distance from u",
    "start": "1489840",
    "end": "1496260"
  },
  {
    "text": "to u0 plus the\ndistance from u0 to v.",
    "start": "1496260",
    "end": "1502193"
  },
  {
    "text": "So in other words,\nthis is saying, the shortest path\nfrom u to v is always upper bounded from the\nlength of the shortest",
    "start": "1502193",
    "end": "1508110"
  },
  {
    "text": "path from u to u0 and\nthen u0 to v, right? This is drawing a triangle.",
    "start": "1508110",
    "end": "1513559"
  },
  {
    "text": "Aha! But take a look. What is the actual\nradius of my graph?",
    "start": "1513560",
    "end": "1520409"
  },
  {
    "text": "Well, in my notation,\nthe radius of my graph is exactly the\ndistance from u0 to v0.",
    "start": "1520410",
    "end": "1530250"
  },
  {
    "text": "And this thing is bigger\nthan the distance from u0 to anything else, by\ndefinition, for all v, right?",
    "start": "1530250",
    "end": "1543430"
  },
  {
    "text": "So if I flip this inequality\nbackward, well, take a look. This is the distance\nfrom u0 to something.",
    "start": "1543430",
    "end": "1549250"
  },
  {
    "text": "This is the distance\nfrom u0 to something. So I incur two\nfactors of the radius. ",
    "start": "1549250",
    "end": "1556269"
  },
  {
    "text": "And I get the bound\nthat I wanted, yeah? And so this is a slightly\nmore formal little proof",
    "start": "1556270",
    "end": "1561340"
  },
  {
    "text": "of exactly the same thing\nthat's in the homework notes. OK, so the one thing\nthat's remaining is to actually show\nthat our algorithm runs",
    "start": "1561340",
    "end": "1568248"
  },
  {
    "text": "in a reasonable amount of time. So I think they give us\na budget of order E time.",
    "start": "1568248",
    "end": "1573970"
  },
  {
    "text": "But notice, that argument\nis precisely the argument that we just made right here,\njust minus the v factor.",
    "start": "1573970",
    "end": "1580690"
  },
  {
    "text": "And the v factor just\ncame from looping over all the vertices in part a.",
    "start": "1580690",
    "end": "1585740"
  },
  {
    "text": "So now I think we're\ndone with problem 1. As usual, I've wasted too\nmuch time on the easy problem.",
    "start": "1585740",
    "end": "1591820"
  },
  {
    "text": "All right, any questions\nabout this one? Excellent. Well, now that I've written too\nmuch, let's do the rest of it.",
    "start": "1591820",
    "end": "1599582"
  },
  {
    "text": "I spent time on this\nproblem because I like it. It looks like a\ngeometry problem. OK. ",
    "start": "1599582",
    "end": "1606290"
  },
  {
    "text": "So now, let's see. In problem 2, which I\nnoticed that this homework is kind of full of\nprototypical 6.006",
    "start": "1606290",
    "end": "1616010"
  },
  {
    "text": "slash graph theory\nproblems in general. Like, they just go down the list\nof things that people typically do in graph theory that\nare useful tricks to know.",
    "start": "1616010",
    "end": "1624470"
  },
  {
    "text": "So I would suggest to the\nstudents in this class, even if it's pass-fail, look\nvery closely at this homework",
    "start": "1624470",
    "end": "1630230"
  },
  {
    "text": "before doing the current one. I think the ordering works\nout that they can do that,",
    "start": "1630230",
    "end": "1636740"
  },
  {
    "text": "because I think you'll get some\ngood hints for how to solve all the current homework.",
    "start": "1636740",
    "end": "1642320"
  },
  {
    "text": "So you heard it\nhere first, guys. OK. So in problem 2, we're talking\nabout internet investigation.",
    "start": "1642320",
    "end": "1651679"
  },
  {
    "text": "So in particular, at MIT has\na bunch of different routers that are connected by\ncables to one another.",
    "start": "1651680",
    "end": "1659730"
  },
  {
    "text": "And essentially,\nwhat are we given? We're given a bunch\nof different routers. And we're given the length\nof the cable in between them.",
    "start": "1659730",
    "end": "1666860"
  },
  {
    "text": "And the latency,\nunsurprisingly, is proportional to the\nlength of the cable. That, in my abstract\nunderstanding",
    "start": "1666860",
    "end": "1672260"
  },
  {
    "text": "of how computers work,\nkind of makes sense to me. I'm not sure that's\nactually true. But that's sort of\nimmaterial for 6.006.",
    "start": "1672260",
    "end": "1681049"
  },
  {
    "text": "I assume our department\nhas a networks class if you're interested\nin that kind of thing.",
    "start": "1681050",
    "end": "1686360"
  },
  {
    "text": "And essentially, what\nwe're trying to do is sum up the latency\nover all of the routers.",
    "start": "1686360",
    "end": "1691909"
  },
  {
    "text": "So let's break down a\nlittle bit of notation here while I continue to\ndance all over the room here.",
    "start": "1691910",
    "end": "1698246"
  },
  {
    "text": "I keep losing my chalk. ",
    "start": "1698246",
    "end": "1707050"
  },
  {
    "text": "I need like a holster. I feel like that would be\nuseful for the chalk bucket. OK.",
    "start": "1707050",
    "end": "1713289"
  },
  {
    "text": "So now we're going\nto do problem 2 here. So we're given r routers.",
    "start": "1713290",
    "end": "1718539"
  },
  {
    "text": " And some of them are\nmarked as entry points.",
    "start": "1718540",
    "end": "1728360"
  },
  {
    "start": "1728360",
    "end": "1733730"
  },
  {
    "text": "And now we have a bunch of\nbidirectional wires, wi,",
    "start": "1733730",
    "end": "1746840"
  },
  {
    "text": "each of which has length li.",
    "start": "1746840",
    "end": "1752350"
  },
  {
    "text": "And that's a positive\ninteger value here.",
    "start": "1752350",
    "end": "1757360"
  },
  {
    "text": "And actually, because of this-- so technically, I think a\nlot of students in this class have encountered\nweighted graphs before.",
    "start": "1757360",
    "end": "1762897"
  },
  {
    "text": "But if you think about the\nnarrative of this course, I think, for the version\nof this homework, we haven't really encountered\nweighted graphs yet.",
    "start": "1762897",
    "end": "1769750"
  },
  {
    "text": "But a better way of putting\nit, rather than psychologically diagnosing your instructors, is\nthat what we're going to find",
    "start": "1769750",
    "end": "1775603"
  },
  {
    "text": "is that there are often problems\nthat look like they're weighted graph problems, but\nthey really aren't. And this is a nice example\nwhere that's the case.",
    "start": "1775603",
    "end": "1783490"
  },
  {
    "text": "OK, so we define\nlatency as follows,",
    "start": "1783490",
    "end": "1788770"
  },
  {
    "text": "that it's at least\nproportional to the shortest path to an entry point. ",
    "start": "1788770",
    "end": "1801740"
  },
  {
    "text": "And now we have two additional\nassumptions that we need, right? One is that the total latency,\nor at least the latency",
    "start": "1801740",
    "end": "1809690"
  },
  {
    "text": "of every vertex, which is\nthe same thing-- latency--",
    "start": "1809690",
    "end": "1815470"
  },
  {
    "text": "is less than infinity. What is this really\nsaying, by the way? Like, when would the\nlatency be infinity?",
    "start": "1815470",
    "end": "1821860"
  },
  {
    "text": "It would only be infinity if I\nlike took a pair of scissors, and cut a wire,\nand just connected for the rest of the network.",
    "start": "1821860",
    "end": "1827440"
  },
  {
    "text": "Yes? AUDIENCE: Every router is\nconnected to some entry point. JUSTIN SOLOMON: Yes, exactly. Like, there's some path from\nevery router to some entry",
    "start": "1827440",
    "end": "1834820"
  },
  {
    "text": "point. Doesn't necessarily mean the\nentire graph is connected, I guess. But at least you can always\nget to an entry point.",
    "start": "1834820",
    "end": "1841900"
  },
  {
    "text": "And then, moreover,\nand this one's the real kicker\nhere, that there's",
    "start": "1841900",
    "end": "1846940"
  },
  {
    "text": "at most 100r feet of wire. ",
    "start": "1846940",
    "end": "1855920"
  },
  {
    "text": "Incidentally, r\nstands for routers. I had the previous\nproblem in my head and was thinking\nradius a long time.",
    "start": "1855920",
    "end": "1862110"
  },
  {
    "text": "So don't be like\nyour instructor. And actually read the entire\nproblem before getting hung up on it.",
    "start": "1862110",
    "end": "1867330"
  },
  {
    "text": "But in any event, the thing\nthat you're trying to do is to compute the sum\nover all of the routers--",
    "start": "1867330",
    "end": "1880549"
  },
  {
    "text": "I don't know, r, whatever--\nof the latency of that router.",
    "start": "1880550",
    "end": "1885990"
  },
  {
    "text": "OK, so that's our problem here. Incidentally, this\nlittle goofy exercise I just did of taking\nthis paragraph problem",
    "start": "1885990",
    "end": "1891707"
  },
  {
    "text": "and kind of writing it in bullet\npoints, I find helps me a lot when I'm trying to solve\nthese algorithms problems, because I think it's really\neasy to just get like thrown off",
    "start": "1891707",
    "end": "1898830"
  },
  {
    "text": "by a wall of text here. OK, so this problem is\nscreaming out graph theory.",
    "start": "1898830",
    "end": "1904940"
  },
  {
    "text": "Like, we're practically\nusing the terms here. We are using the terms, right? Like, we've got nodes that\nare kind of like routers.",
    "start": "1904940",
    "end": "1911660"
  },
  {
    "text": "And maybe edges are\nkind of like wires. But there's a bit of a catch,\nwhich is that your runtime--",
    "start": "1911660",
    "end": "1918409"
  },
  {
    "text": "at the end of the day, I think\nyou want order r runtime.",
    "start": "1918410",
    "end": "1924650"
  },
  {
    "text": "That's where things get\na little funky initially. And so we have to\nthink a little bit carefully about how to do it.",
    "start": "1924650",
    "end": "1931100"
  },
  {
    "text": "And here's going\nto be the trick. So this is starting to look\nlike a shortest path problem. But what would you\nmaybe not want to do?",
    "start": "1931100",
    "end": "1938480"
  },
  {
    "text": "Would be to iterate over\nevery single router, or every single vertex\nand every single router,",
    "start": "1938480",
    "end": "1943610"
  },
  {
    "text": "and compute the shortest path\nbetween every single pair, because if you did\nthat-- oh boy, I'm confusing my terminology.",
    "start": "1943610",
    "end": "1950120"
  },
  {
    "text": "There are entry points, which\nis the thing that I need to compute the distance to. And I need to iterate\nover every single router",
    "start": "1950120",
    "end": "1956535"
  },
  {
    "text": "and compute its distance,\nmaybe, to all the entry points, and then take the min,\nor something like that. But if I had a double\nfor loop, then I'm",
    "start": "1956535",
    "end": "1962990"
  },
  {
    "text": "probably not going to\nget order r time, right? Because somehow, you expect it\nto look like something squared, or like the product\nof two terms.",
    "start": "1962990",
    "end": "1969309"
  },
  {
    "text": "So we have to be a little\nmore sneaky than that. And we're going to use sort\nof a canonical trick in graph",
    "start": "1969310",
    "end": "1974810"
  },
  {
    "text": "theory. OK, so let's follow the\nToucan Sam approach here.",
    "start": "1974810",
    "end": "1980050"
  },
  {
    "text": "We're going to follow our\nnose and say that, OK, there's basically a graph that's staring\nus in the face in this problem.",
    "start": "1980050",
    "end": "1986768"
  },
  {
    "text": "But then we're going to have to\nmake a little bit of an edit, because we'd like to use the\nkind of linear-looking time",
    "start": "1986768",
    "end": "1993180"
  },
  {
    "text": "search that BFS affords us. But it looks like we have\nedge weights in our graph,",
    "start": "1993180",
    "end": "1998620"
  },
  {
    "text": "because the wires are\nassociated to lengths, right? Different wires have\ndifferent sizes.",
    "start": "1998620",
    "end": "2004490"
  },
  {
    "text": "But we have this\nnice fun fact, which is that the total amount of\nwire in our whole universe is less than 100r.",
    "start": "2004490",
    "end": "2011758"
  },
  {
    "text": "I guess the units of this\n100 are kind of weird, right? It's like feet per router\nor something, but whatever.",
    "start": "2011758",
    "end": "2018220"
  },
  {
    "text": "OK, so in particular,\nI'm going to make a graph",
    "start": "2018220",
    "end": "2026190"
  },
  {
    "text": "with the node per router.",
    "start": "2026190",
    "end": "2031200"
  },
  {
    "text": "So like, maybe here's a router. There's another router. There's router 1 and router 2.",
    "start": "2031200",
    "end": "2038200"
  },
  {
    "text": "But since I want to use\nthe sort of linear time advantages of\nbreadth-first search when I'm computing distances,\nI can be a little bit sneaky",
    "start": "2038200",
    "end": "2046389"
  },
  {
    "text": "about this, which\nis to say, instead of having like 10 feet\nof wires, I'm going to have 10 1-foot wires, yeah?",
    "start": "2046390",
    "end": "2054369"
  },
  {
    "text": "Except now I'm additionally\ngoing to have little chains. So here, maybe the length l\n1, 2 is equal to 3, right?",
    "start": "2054370",
    "end": "2064888"
  },
  {
    "text": "So I'm going to put\nthree edges in between. So in other words--",
    "start": "2064889",
    "end": "2070040"
  },
  {
    "text": "and I'm going to\nconnect them with chains",
    "start": "2070040",
    "end": "2078219"
  },
  {
    "text": "of li edges for each wire.",
    "start": "2078219",
    "end": "2085510"
  },
  {
    "text": " Does that make sense? So essentially, I'm going to\ntake my weighted graph problem",
    "start": "2085510",
    "end": "2092548"
  },
  {
    "text": "and make it unweighted by just\nlike repeating a bunch-- well, not really repeating,\nbut chaining together a bunch of edges so that the\ntotal length of this thing",
    "start": "2092548",
    "end": "2100880"
  },
  {
    "text": "is equal to the distance\nfrom one router to another. OK.",
    "start": "2100880",
    "end": "2105890"
  },
  {
    "text": "One thing we might\nas well do is bound the number of vertices and edges\nin our graph when we do that.",
    "start": "2105890",
    "end": "2110940"
  },
  {
    "text": "So first of all, let's think\nabout the number of vertices.",
    "start": "2110940",
    "end": "2118180"
  },
  {
    "text": "And we can be totally lazy\nand upper bound this stuff. It doesn't matter. Well, for one thing, I\nhave one node per router.",
    "start": "2118180",
    "end": "2124210"
  },
  {
    "text": "So we incur one\nfactor of r there. And now, notice that we're\nkind of laying down cable",
    "start": "2124210",
    "end": "2131220"
  },
  {
    "text": "one little piece at a\ntime here in our chains. And now I always tend to have\na fencepost-style headache",
    "start": "2131220",
    "end": "2139050"
  },
  {
    "text": "about exactly what the\nconstant factor is here. But if we're\nconservative about it, we incur at most a factor of\n100r kind of additional edges,",
    "start": "2139050",
    "end": "2148009"
  },
  {
    "text": "because those are all\nthe different pieces that we could lay together. I think it's actually less than\nthat because of the endpoints,",
    "start": "2148010",
    "end": "2153243"
  },
  {
    "text": "but whatever, because r\nplus 100 r is big O of r.",
    "start": "2153243",
    "end": "2158280"
  },
  {
    "text": "So the number of vertices in\nmy graph here is big O of r. Similarly, what's\nthe number of edges?",
    "start": "2158280",
    "end": "2163785"
  },
  {
    "text": " Well, this is exactly the\namount of cable that's inside",
    "start": "2163785",
    "end": "2170950"
  },
  {
    "text": "of my network, I believe. Yep. So this is exactly 100r. ",
    "start": "2170950",
    "end": "2177600"
  },
  {
    "text": "Well, I guess the way\nthe problem is written, it's upper bounded by\n100r, but whatever.",
    "start": "2177600",
    "end": "2183690"
  },
  {
    "text": "So this, again, is big O of r. This is kind of convenient. So now we have one\nnumber that rules them",
    "start": "2183690",
    "end": "2189898"
  },
  {
    "text": "all, which is r, which tells\nyou both the number of vertices and the number of edges, up\nto a constant factor, right?",
    "start": "2189898",
    "end": "2195420"
  },
  {
    "text": "So one thing I can\nconvince myself is if I do BFS on my\ngraph, that's sort of OK. Remember, that's\nvertices plus edges time.",
    "start": "2195420",
    "end": "2203020"
  },
  {
    "text": "But in this case,\nthose are the same. OK, so right.",
    "start": "2203020",
    "end": "2208702"
  },
  {
    "text": "So remember, at\nthe end of the day, I'm trying to\ncompute the latency. This is like the length of\nthe shortest path to the entry",
    "start": "2208702",
    "end": "2216240"
  },
  {
    "text": "point nodes. So here would be a\nbraindead algorithm, which is to say, for all\nrouters, for all entry points,",
    "start": "2216240",
    "end": "2232990"
  },
  {
    "text": "compute--  I don't know. Let's call the router\non i, the entry point j.",
    "start": "2232990",
    "end": "2240770"
  },
  {
    "text": "I compute distance ij like\nusing breadth-first search or something. And then I take the\nmin of these values",
    "start": "2240770",
    "end": "2252850"
  },
  {
    "text": "and add them all\ntogether, right? So I compute-- for every router,\nI look at every possible entry",
    "start": "2252850",
    "end": "2258890"
  },
  {
    "text": "point. I compute its distance\nto the entry point. I take the min over\nall these things. And now I add that\nto my running sum.",
    "start": "2258890",
    "end": "2266655"
  },
  {
    "text": "There's a problem\nhere, which is, I haven't told you the\nrelative number of entry points to the total number of routers.",
    "start": "2266655",
    "end": "2272610"
  },
  {
    "text": "So at least the way that I've\nwritten this algorithm here, how much time would this take?",
    "start": "2272610",
    "end": "2278290"
  },
  {
    "text": "Well, there's two\ndifferent for loops. And in the worst\npossible case, at least in my braindead\nalgorithm, I don't",
    "start": "2278290",
    "end": "2283869"
  },
  {
    "text": "notice that if I\nam an entry point, then I don't need to\ncompute distances.",
    "start": "2283870",
    "end": "2290569"
  },
  {
    "text": "Well, this would take\norder r squared-- whoa, r squared time, right?",
    "start": "2290570",
    "end": "2297890"
  },
  {
    "text": "At least, right? Actually, I shouldn't even\nwrite big O. I should write-- what's lower bound? Oh god, I'm a terrible\nalgorithms professor.",
    "start": "2297890",
    "end": "2304760"
  },
  {
    "text": "Omega of r squared time,\nbecause I haven't even accounted for the amount\nof time that it takes",
    "start": "2304760",
    "end": "2310490"
  },
  {
    "text": "to compute the distance, right? And this is a\nproblem, because I've only given you a budget of\nlinear time for your algorithm,",
    "start": "2310490",
    "end": "2317030"
  },
  {
    "text": "right? So this is frowny face. I tried drawing the\nturd emoji on my notes.",
    "start": "2317030",
    "end": "2322070"
  },
  {
    "text": "And it really-- it didn't work. OK, so we need a better trick.",
    "start": "2322070",
    "end": "2327440"
  },
  {
    "text": "And this is actually one of\nthese prototypical tricks, which is to do the following.",
    "start": "2327440",
    "end": "2333750"
  },
  {
    "text": "So let's construct a graph. I'm going to draw my\ngraph in a particular way. But notice that there's\nnothing about my algorithm",
    "start": "2333750",
    "end": "2339843"
  },
  {
    "text": "that cares about the\nway that I drew it. This is just to\nmake my life easier, which is, I'm going\nto put all the entry points on the left\nand all the remaining",
    "start": "2339843",
    "end": "2348050"
  },
  {
    "text": "non-entry-point routers on\nthe right, because I can. And so this is what\nmy graph looks like.",
    "start": "2348050",
    "end": "2353100"
  },
  {
    "text": "So these are like\nmy entry points.  Here are my other routers. ",
    "start": "2353100",
    "end": "2361205"
  },
  {
    "text": "My graph doesn't\nhave to be bipartite. Like, it could be that\nmy routers are connected to each other, whatever.",
    "start": "2361206",
    "end": "2367670"
  },
  {
    "text": "And then there are some edges\nthat go from my entry points to the routers in the graph.",
    "start": "2367670",
    "end": "2373070"
  },
  {
    "text": "I'm trying to make sure\nthat my graph is connected. OK. And so essentially, what this\nproblem is asking you to do",
    "start": "2373070",
    "end": "2379490"
  },
  {
    "text": "is to say, OK, for every\nsingle node in my graph, I need to compute the distance\nto the closest entry point",
    "start": "2379490",
    "end": "2386869"
  },
  {
    "text": "and then sum all those\nthings together, right? That's just the schematic\nwe could have in mind.",
    "start": "2386870",
    "end": "2392980"
  },
  {
    "text": "So in some sense,\nwhat we want to do is think about the\nset of entry points",
    "start": "2392980",
    "end": "2398869"
  },
  {
    "text": "as like one giant node,\nbecause it doesn't matter which of these guys I choose\nfor my shortest path to an entry",
    "start": "2398870",
    "end": "2406540"
  },
  {
    "text": "point. I just need to find one, yeah? And so here's the basic trick. And this is one that appears\nall over graph theory, which",
    "start": "2406540",
    "end": "2412580"
  },
  {
    "text": "is I'm going to introduce one\nadditional node to my graph. And I'm going to put him\non the left-hand side.",
    "start": "2412580",
    "end": "2418140"
  },
  {
    "text": "He's really big, because\nhe is a supernode, which",
    "start": "2418140",
    "end": "2423539"
  },
  {
    "text": "is a term of art. This term shows up a lot. And I'm going to connect\nit to every entry",
    "start": "2423540",
    "end": "2431860"
  },
  {
    "text": "point in my network of routers. Does that makes sense, class?",
    "start": "2431860",
    "end": "2438670"
  },
  {
    "text": "OK. So here's the kind\nof cool thing. So first of all, for\nevery entry point,",
    "start": "2438670",
    "end": "2444790"
  },
  {
    "text": "what's the shortest\npath from the entry point to the supernode? Well, obviously, it\nhas length 1, right?",
    "start": "2444790",
    "end": "2449994"
  },
  {
    "text": "I drew it for you here. Now, here's the thing. Let's take the shortest\npath from the supernode",
    "start": "2449995",
    "end": "2456099"
  },
  {
    "text": "to any of the routers\non the right-hand side. What do I know? Well, clearly-- like maybe\nI choose this guy here.",
    "start": "2456100",
    "end": "2464378"
  },
  {
    "text": "Well, what is my shortest path? It goes here and then there. There's one property\nthat matters",
    "start": "2464378",
    "end": "2470140"
  },
  {
    "text": "here, which is that it has to\npass through one of these entry nodes.",
    "start": "2470140",
    "end": "2476420"
  },
  {
    "text": "Which one does it\nhave to pass through? Shrug. For shame.",
    "start": "2476420",
    "end": "2481890"
  },
  {
    "text": "Well, remember, Justin's\nfavorite inequality is the triangle inequality. And what does it say?",
    "start": "2481890",
    "end": "2487260"
  },
  {
    "text": "It says that if I\ncompute the shortest path from the supernode\nto any node in my graph,",
    "start": "2487260",
    "end": "2493560"
  },
  {
    "text": "then every sort of sub-piece\nof that shortest path is also a shortest path.",
    "start": "2493560",
    "end": "2498750"
  },
  {
    "text": "That sentence was hard to parse. Let's try that again. So in particular,\nif I have a graph from the supernode to\nsome router over here,",
    "start": "2498750",
    "end": "2505793"
  },
  {
    "text": "well, we've convinced\nourselves it has to pass through\none of the entry nodes. Which one does that\nhave to pass through?",
    "start": "2505793",
    "end": "2511820"
  },
  {
    "text": "Is it ever something that is\nfarther than the closest entry node?",
    "start": "2511820",
    "end": "2517230"
  },
  {
    "text": "Well, no, because I\ncould compute a shorter path in that case by\nchoosing the closest entry node and then going\nto the supernode.",
    "start": "2517230",
    "end": "2524740"
  },
  {
    "text": "So this is a complicated way\nof saying that essentially, what we really want is for\nevery router, the distance",
    "start": "2524740",
    "end": "2538910"
  },
  {
    "text": "from that router, let's call\nit i, to the supernode, s.",
    "start": "2538910",
    "end": "2546309"
  },
  {
    "text": "Is that quite right? Is that the distance to\nthe closest entry point? AUDIENCE: You went\none more inch too far.",
    "start": "2546310",
    "end": "2552840"
  },
  {
    "text": "JUSTIN SOLOMON: I went\none inch too far, right? Because I went to the\nclosest entry point. And then I took an\nadditional edge. So we want to do minus 1.",
    "start": "2552840",
    "end": "2560500"
  },
  {
    "text": "OK. So what does this mean? Well, that means\nthat I don't actually have to have this inner for\nloop over all the possible entry",
    "start": "2560500",
    "end": "2568180"
  },
  {
    "text": "points. I just need to construct this\nnew special graph with one additional node-- notice\nthat's not going to affect",
    "start": "2568180",
    "end": "2573815"
  },
  {
    "text": "my runtime-- and compute the shortest\ndistance from the supernode to every other node\nin my graph, and then",
    "start": "2573815",
    "end": "2580190"
  },
  {
    "text": "use that as my output, yeah? So in other words, what is my\nalgorithm going to look like?",
    "start": "2580190",
    "end": "2587810"
  },
  {
    "text": "Well, first, I'm going to\nconstruct my graph, right?",
    "start": "2587810",
    "end": "2593560"
  },
  {
    "text": "So what do I need to do? If I were to write this\nout in my homework, I would have to\ntalk about how I've",
    "start": "2593560",
    "end": "2598570"
  },
  {
    "text": "got these chains of edges\nbetween different pairs of routers. In addition to that,\nI'm going to make one additional supernode\nand insert an edge",
    "start": "2598570",
    "end": "2606130"
  },
  {
    "text": "from that to every entry point. Notice that adding the entry\npoint here just adds a 1",
    "start": "2606130",
    "end": "2613750"
  },
  {
    "text": "to the number of\nvertices, and at most, I guess, an r to the\nnumber of edges, which doesn't affect\nasymptotically",
    "start": "2613750",
    "end": "2620740"
  },
  {
    "text": "the size of either\nof these two sets. So that's a good thing. Now I'm going to do--",
    "start": "2620740",
    "end": "2627819"
  },
  {
    "text": "I'm going to use BFS to do a\nsingle-source shortest path",
    "start": "2627820",
    "end": "2636620"
  },
  {
    "text": "from my supernode to\nall other vertices.",
    "start": "2636620",
    "end": "2642260"
  },
  {
    "text": " And how much time\ndoes this take?",
    "start": "2642260",
    "end": "2648510"
  },
  {
    "text": "Well, remember that in general,\nBFS takes v plus E time. In this case, v\nplus E are both--",
    "start": "2648510",
    "end": "2654450"
  },
  {
    "text": "look like r. So this is order r time. OK.",
    "start": "2654450",
    "end": "2659760"
  },
  {
    "text": "And then finally, I'm\ngoing to sum over routers",
    "start": "2659760",
    "end": "2671010"
  },
  {
    "text": "i the value of the distance from\nthe supernode to the router i,",
    "start": "2671010",
    "end": "2677790"
  },
  {
    "text": "minus 1 to account for that\nadditional edge that I added. OK, and that's the\nsolution to our problem.",
    "start": "2677790",
    "end": "2684390"
  },
  {
    "text": "OK, any questions\nabout number 2 here? Excellent. Go team.",
    "start": "2684390",
    "end": "2690220"
  },
  {
    "text": "OK. So now let's move\non to problem 3. Am I-- yeah, we're\nabout halfway.",
    "start": "2690220",
    "end": "2695910"
  },
  {
    "text": "OK, so in problem 3-- right. So we're doing Potry Harter\nand three wizard friends.",
    "start": "2695910",
    "end": "2706715"
  },
  {
    "text": "The number three\nhere, I believe, is actually irrelevant,\nalthough like any time you see a specific\nnumber in a problem,",
    "start": "2706715",
    "end": "2712470"
  },
  {
    "text": "you should cache that in your\nbag of things to remember. And in this case, that\nwas a red herring.",
    "start": "2712470",
    "end": "2718890"
  },
  {
    "text": "Potry Harter and her\nthree wizard friends",
    "start": "2718890",
    "end": "2724200"
  },
  {
    "text": "are tasked with searching\naround a labyrinth, yeah? And in particular,\nthere's some nice things",
    "start": "2724200",
    "end": "2730619"
  },
  {
    "text": "to know about the labyrinth\nand Potry Harter world-- this is really throwing\noff my dyslexia here--",
    "start": "2730620",
    "end": "2739150"
  },
  {
    "text": "which is the following.  Right, so what do we know?",
    "start": "2739150",
    "end": "2745819"
  },
  {
    "text": "We know that there are\nn rooms in my labyrinth",
    "start": "2745820",
    "end": "2754880"
  },
  {
    "text": "and that each of my rooms\nhas at most four doors.",
    "start": "2754880",
    "end": "2762109"
  },
  {
    "text": " So in other words, if I\nthink of building a graph out",
    "start": "2762110",
    "end": "2769080"
  },
  {
    "text": "of my rooms, which is\nlike, I don't think I'm giving much away\nabout this problem by jumping to the\nsolution a little bit,",
    "start": "2769080",
    "end": "2775559"
  },
  {
    "text": "what do we know about\nthe degree of any vertex, assuming my vertices are\nrooms in the labyrinth?",
    "start": "2775560",
    "end": "2781620"
  },
  {
    "text": "It's at most four. So that's kind of nice. OK, right.",
    "start": "2781620",
    "end": "2786630"
  },
  {
    "text": "And all the doors start closed.  So that seems like a\nuseful piece of information",
    "start": "2786630",
    "end": "2793750"
  },
  {
    "text": "to remember. But we have this kind\nof weird thing, which is that some doors are enchanted.",
    "start": "2793750",
    "end": "2804454"
  },
  {
    "text": " And apparently, Potry\nHarter can open up",
    "start": "2804454",
    "end": "2814320"
  },
  {
    "text": "certain doors for free, which\nare not the intended doors. And then other ones,\nthey have to do the blessing, and\nthe holy water,",
    "start": "2814320",
    "end": "2820859"
  },
  {
    "text": "and whatever it is that\nhappens in this universe, and then opens up that door.",
    "start": "2820860",
    "end": "2826200"
  },
  {
    "text": "But that costs them materials\nand heartache, right? And so we want to minimize that.",
    "start": "2826200",
    "end": "2832110"
  },
  {
    "text": "And so what they're\ngiven is basically a map.",
    "start": "2832110",
    "end": "2837580"
  },
  {
    "text": "And this includes all\nof the different rooms, how they're connected to one\nanother, and which of the doors are enchanted.",
    "start": "2837580",
    "end": "2843790"
  },
  {
    "text": "And what I want is the\nminimum number of doors",
    "start": "2843790",
    "end": "2851740"
  },
  {
    "text": "that they have to disenchant. ",
    "start": "2851740",
    "end": "2859630"
  },
  {
    "text": "Now, this problem is\nlike kind of sneaky. And the reason why is that\nthere's like the network that's",
    "start": "2859630",
    "end": "2866860"
  },
  {
    "text": "obvious to build. And that turns out to be\nnot quite the right one. And then you can start\nthinking about adding weights",
    "start": "2866860",
    "end": "2873220"
  },
  {
    "text": "on your graph and\ngoing crazy with that. But that turns out not to\nbe the right direction. And in fact, in\nPotry Harter world,",
    "start": "2873220",
    "end": "2879932"
  },
  {
    "text": "apparently, we're not worried\nabout their physical fitness. In other words, shortest\npaths are actually",
    "start": "2879932",
    "end": "2885035"
  },
  {
    "text": "irrelevant in this problem. Do you see that? Because let's say that I have\na really complicated, annoying",
    "start": "2885035",
    "end": "2893710"
  },
  {
    "text": "problem. So like, maybe I have-- here's my labyrinth.",
    "start": "2893710",
    "end": "2900309"
  },
  {
    "text": "And we don't even talk\nabout the entry point, like where they actually go in.",
    "start": "2900310",
    "end": "2906130"
  },
  {
    "text": "But just for fiction\npurposes, let's say that they enter my\nlabyrinth here and that, just to be annoying, the two\ndoors that are enchanted--",
    "start": "2906130",
    "end": "2914638"
  },
  {
    "text": "remember, we could\nmake a graph where all the vertices are rooms,\nand the edges are doors-- are like at these two endpoints\nof the T. So I have a giant T.",
    "start": "2914638",
    "end": "2922090"
  },
  {
    "text": "And I enter right in the middle. Now, what is Potry\nHarter to do here?",
    "start": "2922090",
    "end": "2928339"
  },
  {
    "text": "Well, obviously, there's--\nsince this graph is a tree, there's only so much\nthey can do, right? Maybe they enter here.",
    "start": "2928340",
    "end": "2934760"
  },
  {
    "text": "They walk over all\nthe way to the end to disenchant the\ndoor over here. And then they turn around\nand walk to the other end.",
    "start": "2934760",
    "end": "2942680"
  },
  {
    "text": "They disenchant that guy, yeah? And now they can\nreach other rooms.",
    "start": "2942680",
    "end": "2948140"
  },
  {
    "text": " Yeah, because that's their\ngoal, is to visit every room. Sorry, I think I\nskipped that step.",
    "start": "2948140",
    "end": "2955842"
  },
  {
    "text": "Now, there's a few\nthings to notice about this example,\nwhich make it a little bit different\nfrom the typical graph",
    "start": "2955842",
    "end": "2960870"
  },
  {
    "text": "theory thing, which is, once\nthey disenchant this door, like they walk over here, and\nthey open it, well, now they",
    "start": "2960870",
    "end": "2968600"
  },
  {
    "text": "walk over to this\nother room, just to-- you know those gym\nexercises where you run to the other side of\nthe room, you touch the floor,",
    "start": "2968600",
    "end": "2974630"
  },
  {
    "text": "and then you run back? That's kind of what\nthey did here, right? They ran to this room. They tapped that vertex. And now they want to turn around\nand walk to the other side.",
    "start": "2974630",
    "end": "2981740"
  },
  {
    "text": "They don't pay money again\non their way out, right? So once they open that\ndoor, it stays open.",
    "start": "2981740",
    "end": "2988960"
  },
  {
    "text": "And that's actually quite\nimportant, because what it does is it makes this problem not\nlook like a traveling salesman",
    "start": "2988960",
    "end": "2994510"
  },
  {
    "text": "problem, which\nwouldn't be so great. OK, so right. And moreover, does the\nfact that they're-- like,",
    "start": "2994510",
    "end": "3002140"
  },
  {
    "text": "maybe I subdivide these edges. I have a bunch of edges here\nthat are all not enchanted. Does that matter, like if I had\nlike five billion edges here?",
    "start": "3002140",
    "end": "3012700"
  },
  {
    "text": "No, right? Because they only\nask in this problem for the minimum number of doors\nthat you have to disenchant,",
    "start": "3012700",
    "end": "3020180"
  },
  {
    "text": "yeah? So it might be the Harry\nHarter walks really far along my graph.",
    "start": "3020180",
    "end": "3026194"
  },
  {
    "text": "But as long as they don't walk\nthrough an enchanted door, it costs them nothing. So what does that mean?",
    "start": "3026195",
    "end": "3032030"
  },
  {
    "text": "Well, that means that in some\nsense, the second that I enter a room, I might as well\nwalk to every other room",
    "start": "3032030",
    "end": "3037710"
  },
  {
    "text": "that it's connected to\nthrough unenchanted doors. And that doesn't\ncost me anything.",
    "start": "3037710",
    "end": "3043210"
  },
  {
    "text": "So sort of as a policy,\nI should do that, right? I enter a room. And then I kind of\njust search around",
    "start": "3043210",
    "end": "3048930"
  },
  {
    "text": "and enter every\npossible door that I can that doesn't cost me an\nenchantment, because those",
    "start": "3048930",
    "end": "3054180"
  },
  {
    "text": "are free. And my goal is to\nvisit every room, yeah? OK, so here's going to\nbe the sneaky trick.",
    "start": "3054180",
    "end": "3060870"
  },
  {
    "text": "Like, what is that\nstarting to smell like? I open a door, and now I want\nto explore all the other rooms",
    "start": "3060870",
    "end": "3066300"
  },
  {
    "text": "that are connected to that one. AUDIENCE: Maybe a\nconnected component. JUSTIN SOLOMON: Yeah, maybe\na connected component.",
    "start": "3066300",
    "end": "3072070"
  },
  {
    "text": "There's a problem. Is it connected\ncomponent in this graph? Well, no. Like, this whole graph is one\ngiant connected component.",
    "start": "3072070",
    "end": "3077978"
  },
  {
    "text": "So the sneaky trick is\nwe're actually going to remove the enchanted doors.",
    "start": "3077978",
    "end": "3083100"
  },
  {
    "text": "That was supposed to erase,\nand it didn't happen. But the point is that if we\nremove the connected doors,",
    "start": "3083100",
    "end": "3089140"
  },
  {
    "text": "these are like the\nchunks of my map that I can visit without\nincurring any cost.",
    "start": "3089140",
    "end": "3094539"
  },
  {
    "text": "So if I think of my\ngraph, maybe there's a bunch of vertices over here. And then there's\nan enchanted door.",
    "start": "3094540",
    "end": "3099720"
  },
  {
    "text": "And there's a bunch\nof vertices over here, and then like two more\nenchanted doors like that. And like, what goes on\nin here, like if this",
    "start": "3099720",
    "end": "3106230"
  },
  {
    "text": "is like a giant\ntriangle or something, is actually irrelevant, because\nonce I touch any one of these, I can now touch all\nthe rest of them.",
    "start": "3106230",
    "end": "3113740"
  },
  {
    "text": "So let's suggest an algorithm. So our first step is that\nwe construct a graph, G,",
    "start": "3113740",
    "end": "3123740"
  },
  {
    "text": "where the nodes are the rooms-- ",
    "start": "3123740",
    "end": "3129440"
  },
  {
    "text": "are the rooms.  And what should the edges be?",
    "start": "3129440",
    "end": "3135650"
  },
  {
    "text": "Well, if I'm just trying to find\nthese little clumps of rooms that I can visit for free\nif I get to any one of them,",
    "start": "3135650",
    "end": "3142640"
  },
  {
    "text": "then the edges are the\nnon-enchanted doors.",
    "start": "3142640",
    "end": "3149099"
  },
  {
    "start": "3149100",
    "end": "3156300"
  },
  {
    "text": "OK? And so now, in\nstep two, I'm going",
    "start": "3156300",
    "end": "3161640"
  },
  {
    "text": "to compute my connected\ncomponents, which we covered in lecture--",
    "start": "3161640",
    "end": "3169030"
  },
  {
    "text": "the connected\ncomponents of my graph, G. How much time does that take?",
    "start": "3169030",
    "end": "3174410"
  },
  {
    "text": "Well, remember that there\nare two different algorithms we mentioned that can do this. This is full BFS or DFS.",
    "start": "3174410",
    "end": "3184910"
  },
  {
    "text": "And both of them are going to\ntake the same amount of time. What is that time? AUDIENCE: Linear in\nthe size of the graph.",
    "start": "3184910",
    "end": "3191000"
  },
  {
    "text": "JUSTIN SOLOMON: Linear\nin the size of the graph. So initially, that\ncould be problematic,",
    "start": "3191000",
    "end": "3196040"
  },
  {
    "text": "because I want order n. Remember, there\nare n rooms here. But thanks to our\ndegree bound, thanks",
    "start": "3196040",
    "end": "3203420"
  },
  {
    "text": "to knowing that every room\nhas at most four doors, you can convince yourself that\nboth the number of vertices and the number of edges\nare order n, which",
    "start": "3203420",
    "end": "3210460"
  },
  {
    "text": "I should probably rush\nthrough, because as usual, I'm going slowly. OK. So now, what do I have?",
    "start": "3210460",
    "end": "3216815"
  },
  {
    "text": "I have a list of all\nthe connected components in my graph. And each one is\npotentially connected",
    "start": "3216815",
    "end": "3223340"
  },
  {
    "text": "to some other ones\nby enchanted doors. So in some sense, I\ncould think about--",
    "start": "3223340",
    "end": "3229473"
  },
  {
    "text": "it's not to say this is the\nsolution to the problem. But I could think about\nmodeling my problem as making some new graph,\nwhere I put a giant vertex",
    "start": "3229473",
    "end": "3237009"
  },
  {
    "text": "in every connected component. And maybe I connect\nthem by enchanted doors. And I want a path that touches\nevery one of these rooms.",
    "start": "3237010",
    "end": "3246490"
  },
  {
    "text": "But that's not quite\nthe right way to go. And this is what catches you\nby surprise, because this",
    "start": "3246490",
    "end": "3252160"
  },
  {
    "text": "starts something scary, right? If you've heard of the\ntraveling salesman problem, it kind of smells like that. But that's not actually\ncorrect here for two reasons.",
    "start": "3252160",
    "end": "3260160"
  },
  {
    "text": "One is that once I\nopen an enchanted door, I can go back through it. Like, I can like\nhopscotch back and forth",
    "start": "3260160",
    "end": "3265780"
  },
  {
    "text": "through that door as\nmany times as I want, and it doesn't cost me anything. It only costs me something the\nfirst time I open it, yeah?",
    "start": "3265780",
    "end": "3273380"
  },
  {
    "text": "And moreover, I didn't\nask you to actually compute me that path.",
    "start": "3273380",
    "end": "3278643"
  },
  {
    "text": "If you read the problem\nclosely, it just asks for the minimum number\nof doors you have to open.",
    "start": "3278643",
    "end": "3283890"
  },
  {
    "text": "So this is a really\nsneaky problem, because it turns out there's\nan additional one line of code",
    "start": "3283890",
    "end": "3290690"
  },
  {
    "text": "that solves this problem. That's step three,\nwhich I'm going to write before steps one and\ntwo, just to keep you confused.",
    "start": "3290690",
    "end": "3296600"
  },
  {
    "text": "And that is to return this\nnumber of connected components",
    "start": "3296600",
    "end": "3304180"
  },
  {
    "text": "minus 1.  That seems sneaky. Why is that?",
    "start": "3304180",
    "end": "3309579"
  },
  {
    "text": "Well, what's going on\nhere is the following, which is that let's say\nthat I walk along-- remember",
    "start": "3309580",
    "end": "3316390"
  },
  {
    "text": "that my graph is connected. So what I know is\nthat I can always get from any one connected\ncomponent to any other.",
    "start": "3316390",
    "end": "3323079"
  },
  {
    "text": "And so let's just\ntake whatever order-- notice that the\nproblem hasn't actually asked me how to return\nan efficient path.",
    "start": "3323080",
    "end": "3331720"
  },
  {
    "text": "It just asked me for the minimum\nnumber of doors I have to open. So all I have to do\nis convince myself there exists a path with this\nmany doors I have to open.",
    "start": "3331720",
    "end": "3338849"
  },
  {
    "text": "I don't have to\nactually return it. If I did, it would be mildly\nmore annoying to think about.",
    "start": "3338850",
    "end": "3344069"
  },
  {
    "text": "OK. So my graph is connected. So one thing that I could\ndo is make the world's--",
    "start": "3344070",
    "end": "3349375"
  },
  {
    "text": " well, how do I want to do this?",
    "start": "3349375",
    "end": "3354490"
  },
  {
    "text": " Well, let's see here. I guess I could come up\nwith an ordering that",
    "start": "3354490",
    "end": "3361690"
  },
  {
    "text": "looks like depth-first\nsearch of my graph. That should do it. OK. So maybe I start at this guy.",
    "start": "3361690",
    "end": "3367720"
  },
  {
    "text": "I just start at some\narbitrary vertex. And then I'm going to\ndo depth-first search,",
    "start": "3367720",
    "end": "3372760"
  },
  {
    "text": "but rather than\non the full graph, on this kind of\nmeta graph, where I've clumped together rooms\nthat I can get to with no cost.",
    "start": "3372760",
    "end": "3379398"
  },
  {
    "text": "So what am I going to do? I'm going to start\nwalking outward toward this guy and then\na depth-first search, backtracking, and\nthen going back down.",
    "start": "3379398",
    "end": "3386740"
  },
  {
    "text": "And if you think\nabout it, remember that in depth-first search,\nI have this property, I never need to revisit a clump\nwhich I've got to it once.",
    "start": "3386740",
    "end": "3394390"
  },
  {
    "text": "Well, the total number of\ndoors that I'm going to open is exactly the number of\nconnected components minus 1, because as soon as I've done\nthat, my depth-first search is",
    "start": "3394390",
    "end": "3401380"
  },
  {
    "text": "done here, yeah? In other words, that's the\nnumber of nodes in my graph.",
    "start": "3401380",
    "end": "3406680"
  },
  {
    "text": "So if I took-- what would be a better way to--",
    "start": "3406680",
    "end": "3411930"
  },
  {
    "text": "I'm noticing that in my\nhead, this was easier to articulate than in words. ",
    "start": "3411930",
    "end": "3418315"
  },
  {
    "text": "Here would be a way\nto do it, would be-- AUDIENCE: Maybe add some more\nenchanted doors to the graph?",
    "start": "3418315",
    "end": "3426059"
  },
  {
    "text": "JUSTIN SOLOMON: Maybe add\nsome more enchanted doors. Ah, that's true. Actually, my problem's\na little too easy.",
    "start": "3426060",
    "end": "3431070"
  },
  {
    "text": "So as long as my depth-first\nsearch backtracks along the paths\nit's already found, then I'm sort of reaching\nout into this tentacle,",
    "start": "3431070",
    "end": "3437280"
  },
  {
    "text": "and then reaching back, and\nthen reaching to a new place. I'll never traverse\nan enchanted door that I don't need to, because\nI've already seen the location.",
    "start": "3437280",
    "end": "3446318"
  },
  {
    "text": "AUDIENCE: So you're\ntraversing a tree, basically? JUSTIN SOLOMON: Yeah. So I've got a shortest path\ntree that's going on here.",
    "start": "3446318",
    "end": "3451993"
  },
  {
    "text": "Actually, I guess a\nbreadth-first search would be a better example. ",
    "start": "3451993",
    "end": "3457638"
  },
  {
    "text": "In fact, here's-- OK,\nlet's be concrete about it. I'm sorry. I should have thought\nabout this more carefully than I did at home yesterday.",
    "start": "3457638",
    "end": "3463687"
  },
  {
    "text": "One thing I could do would\nbe to compute a shortest path tree from one vertex in this\ngraph to all the other ones.",
    "start": "3463687",
    "end": "3469790"
  },
  {
    "text": "In particular, that gives\nme the shortest path. And I could traverse\nthat tree to one node,",
    "start": "3469790",
    "end": "3475490"
  },
  {
    "text": "and then traverse\nit all the way back, and then reverse\nit to a new node, and then traverse it all\nthe way back, and so on.",
    "start": "3475490",
    "end": "3481040"
  },
  {
    "text": "This is not an efficient path\nfrom a walking perspective. But from a door\nopening perspective, it's extremely efficient,\nbecause it's a tree, right?",
    "start": "3481040",
    "end": "3488690"
  },
  {
    "text": "And remember that\nthe number of edges in a spanning tree of\nmy graph is exactly the number of vertices\nin my graph minus 1,",
    "start": "3488690",
    "end": "3498480"
  },
  {
    "text": "which is exactly the\nproperty we have here. Whoo, sweating for\na second there. OK.",
    "start": "3498480",
    "end": "3504570"
  },
  {
    "text": "So now, in our remaining\n30 minutes here, we've got two more problems, which\nis more than enough time,",
    "start": "3504570",
    "end": "3511210"
  },
  {
    "text": "especially because\nthe last problem is largely combinatorial\nand less algorithmic. So I think it's OK to focus--",
    "start": "3511210",
    "end": "3517890"
  },
  {
    "text": "maybe talk about that at a\nhigh level and show a fun plot. OK, so for problem 4, we have\nan airline, Purity Atlantic.",
    "start": "3517890",
    "end": "3527140"
  },
  {
    "text": "That's cute, Jason, really. And it's owned by\nBrichard Ranson.",
    "start": "3527140",
    "end": "3533430"
  },
  {
    "text": "Did I get that right? And Purity Atlantic\nhas a cute sale--",
    "start": "3533430",
    "end": "3540876"
  },
  {
    "text": "this is not like a\ncute angle, I suppose-- which is essentially\nthe following,",
    "start": "3540876",
    "end": "3546880"
  },
  {
    "text": "which is that you can\nbook an itinerary where you have your home city. And then you choose, I\nbelieve, three other cities",
    "start": "3546880",
    "end": "3554160"
  },
  {
    "text": "that you want to visit. And then Purity Atlantic-- maybe you're on your\nhoneymoon, and you're",
    "start": "3554160",
    "end": "3560310"
  },
  {
    "text": "not concerned with price, but\nrather, just the efficiency, because you don't want to spend\nyour whole time in an airplane.",
    "start": "3560310",
    "end": "3565650"
  },
  {
    "text": "That's particularly\ntrue this month. Then what do you want to do? You want to minimize your total\nnumber of connections, right?",
    "start": "3565650",
    "end": "3573089"
  },
  {
    "text": "Because as we all\nknow, in spring 2020, we don't want to spend very\nmuch time in airports, yeah?",
    "start": "3573090",
    "end": "3581190"
  },
  {
    "text": "So, right. So how do we do that? Well, we make a\nwebsite, where you",
    "start": "3581190",
    "end": "3587460"
  },
  {
    "text": "tell Purity Atlantic\nthe cities that you want to visit and your home city. And they give you back\nan efficient itinerary",
    "start": "3587460",
    "end": "3593430"
  },
  {
    "text": "that minimizes the\nnumber of connections. OK. And the question is, how do\nyou actually do that, right?",
    "start": "3593430",
    "end": "3600140"
  },
  {
    "text": "How do you compute\nthe best itinerary that minimizes the number\nof flights you have to take?",
    "start": "3600140",
    "end": "3605837"
  },
  {
    "text": "So what are our variables? And sometimes it feels\nlike the variables are all the different\npermutations of the cities you could visit, right?",
    "start": "3605837",
    "end": "3610990"
  },
  {
    "text": "I could go to, I don't know,\nCambridge, Boston, and then Cambridge in the UK.",
    "start": "3610990",
    "end": "3616760"
  },
  {
    "text": "Maybe you're doing like\na University thing, and then, I don't know,\nBudapest and some other place. Or I could do those\nin any other order.",
    "start": "3616760",
    "end": "3623330"
  },
  {
    "text": "And that feels like it\nshould be factorial, which would be bad news.",
    "start": "3623330",
    "end": "3628819"
  },
  {
    "text": "But this is one of\nthese problems which I suppose a computer\nscience theorist might",
    "start": "3628820",
    "end": "3635750"
  },
  {
    "text": "call fixed parameter tractable. But that's sort of an\noverkill term here. But essentially, as\nlong as you ignore",
    "start": "3635750",
    "end": "3641690"
  },
  {
    "text": "all the factors that make this\nproblem hard, then it's easy. A different way to\nput it is that, OK,",
    "start": "3641690",
    "end": "3648289"
  },
  {
    "text": "if I'm only visiting\nthree cities, what's the total number of possible\norderings of my three cities?",
    "start": "3648290",
    "end": "3656650"
  },
  {
    "text": "Class? So I have city A, B, C. I could\ndo B, C, A. I could do B, A, C.",
    "start": "3656650",
    "end": "3664960"
  },
  {
    "text": "AUDIENCE: List them out. JUSTIN SOLOMON:\nYeah, fine, Jason. I'll do that.",
    "start": "3664960",
    "end": "3670870"
  },
  {
    "text": "So this is what we call\ndirect proof mathematically, which are other possible\nways to visit three cities.",
    "start": "3670870",
    "end": "3681050"
  },
  {
    "start": "3681050",
    "end": "3688810"
  },
  {
    "text": "And now, by my direct proof, I\nclaim there are no other ways to visit three cities.",
    "start": "3688810",
    "end": "3694359"
  },
  {
    "text": "And in particular,\nthere are 1, 2, 3, 4, 5, 6 different orderings of\nthe cities that I can visit.",
    "start": "3694360",
    "end": "3701470"
  },
  {
    "text": "Notice that this is a\nconstant in my problem. I am not asking you\nto make a website that takes like the\ntotal set of cities",
    "start": "3701470",
    "end": "3708747"
  },
  {
    "text": "that you want to visit as\na couple and order them. It's specifically three. You might also notice that 6 is\n3 factorial, which is perhaps",
    "start": "3708747",
    "end": "3717730"
  },
  {
    "text": "a more efficient way to\nget to that same bound. OK. So, right.",
    "start": "3717730",
    "end": "3722740"
  },
  {
    "text": "So there's six different\norderings of the cities. And in each case, what\nam I going to have to do?",
    "start": "3722740",
    "end": "3729090"
  },
  {
    "text": "I'm going to have to compute\nthe sum of going from my source city to the first one, from the\nfirst one to the second one,",
    "start": "3729090",
    "end": "3736498"
  },
  {
    "text": "from the second one\nto the third one, from the third one back\nto the first one, OK? So what do I need?",
    "start": "3736498",
    "end": "3744140"
  },
  {
    "text": "Well, I need-- in\nsome sense, I want to be conservative\nabout it, just the cost of flying from every\ncity to every other city.",
    "start": "3744140",
    "end": "3750849"
  },
  {
    "text": "But that's not quite right. I only need the cost of\nflying from every city that you have specified\nas a city you're",
    "start": "3750850",
    "end": "3757270"
  },
  {
    "text": "interested in to\nevery other city that you've specified that\nyou're interested in, yeah? OK.",
    "start": "3757270",
    "end": "3762790"
  },
  {
    "text": "So in particular,\nI go to my new one. So in this problem, we have\nc cities and f flights.",
    "start": "3762790",
    "end": "3772299"
  },
  {
    "text": " OK. And initially, it\nmight seem that we",
    "start": "3772300",
    "end": "3778910"
  },
  {
    "text": "have to compute a ton\nof shortest paths. But like, if I want\nto go from Boston, to Budapest, to London, to--",
    "start": "3778910",
    "end": "3786365"
  },
  {
    "text": "I'm running out of cities-- Paris, and back to Boston, or\nwhatever ordering I prefer, do I need to worry about the\nshortest path from Nebraska",
    "start": "3786365",
    "end": "3796070"
  },
  {
    "text": "to California? Potentially not. Like, that could be irrelevant. The only ones that I care\nabout are those four cities",
    "start": "3796070",
    "end": "3802039"
  },
  {
    "text": "that I've identified, OK? So there's 3 factorial\npossible permutations.",
    "start": "3802040",
    "end": "3809620"
  },
  {
    "text": "And at the end of the day, well,\nthere's 2 times 4 choose 2.",
    "start": "3809620",
    "end": "3816700"
  },
  {
    "text": "If you're wondering, this is 12,\nor big O of 1 pairs of cities,",
    "start": "3816700",
    "end": "3825480"
  },
  {
    "text": "meaning that, like--  for itinerary\npurposes-- itinerary--",
    "start": "3825480",
    "end": "3833930"
  },
  {
    "text": " meaning that if I always enter\nan airport in one of city A, B,",
    "start": "3833930",
    "end": "3842685"
  },
  {
    "text": "C, or my hometown, and I always\nexit through another one, so then there's four\npossible cities.",
    "start": "3842685",
    "end": "3848820"
  },
  {
    "text": "I choose them two at a time. Notice that flights\nmight not be ordered. Like, I might be able to get\nfrom one city to another.",
    "start": "3848820",
    "end": "3855680"
  },
  {
    "text": "But then maybe the airplane\nhas a connection or something. So going back is\na different cost. But totally, there's 2 times\n4 choose 2 different pairs",
    "start": "3855680",
    "end": "3864140"
  },
  {
    "text": "of cities that I could\nenter or exit from. OK. So now, what am I going to do?",
    "start": "3864140",
    "end": "3871020"
  },
  {
    "text": "Well, so I can compute the\n12 different shortest paths",
    "start": "3871020",
    "end": "3876790"
  },
  {
    "text": "that matter in my graph. So when I say shortest\npath, what do I mean? Well, I'm going to\nconstruct a graph, G,",
    "start": "3876790",
    "end": "3889849"
  },
  {
    "text": "with one vertex per city\nand one edge per flight.",
    "start": "3889850",
    "end": "3902660"
  },
  {
    "text": " And notice the\nnumber of connections",
    "start": "3902660",
    "end": "3908130"
  },
  {
    "text": "that I need to make,\nthe minimum number between any city\nthan any other city, is equal to the shortest path--",
    "start": "3908130",
    "end": "3914760"
  },
  {
    "text": "the length of the shortest\npath minus 1, right? So like, maybe I have-- like, here's Boston.",
    "start": "3914760",
    "end": "3920430"
  },
  {
    "text": "Here's London. Here's Paris, B, L, P for short.",
    "start": "3920430",
    "end": "3928450"
  },
  {
    "text": "Then the length of my\nshortest path is 2. And the number of\nconnections I have to make",
    "start": "3928450",
    "end": "3933810"
  },
  {
    "text": "is 1, because I stop\nthrough London, yeah? So what am I going to do? Well, for every pair\nof cities in this--",
    "start": "3933810",
    "end": "3946623"
  },
  {
    "text": "oops-- no, that's OK-- ",
    "start": "3946623",
    "end": "3953230"
  },
  {
    "text": "in the set of the source\ncity and the three cities you want to visit, I'm going\nto compute the shortest--",
    "start": "3953230",
    "end": "3964280"
  },
  {
    "text": "the length of the shortest path. So this is the minimum\nnumber of connections I need to get from\nany one of these",
    "start": "3964280",
    "end": "3969548"
  },
  {
    "text": "to any other one in my graph, G.",
    "start": "3969548",
    "end": "3974600"
  },
  {
    "text": "Well, how much time\ndoes this take? Well, there's 12 such pairs. We already argued that.",
    "start": "3974600",
    "end": "3979740"
  },
  {
    "text": "And how much time does it take\nto actually do shortest path,",
    "start": "3979740",
    "end": "3985890"
  },
  {
    "text": "so using breadth-first search? AUDIENCE: Linear time\nthe size of the graph. JUSTIN SOLOMON: Linear\ntime the size of the graph.",
    "start": "3985890",
    "end": "3991733"
  },
  {
    "text": "I think Jason actually has\na t-shirt that says that. Well, in this case,\nremember, that's big O of the number of edges\nplus the number of vertices.",
    "start": "3991733",
    "end": "3999370"
  },
  {
    "text": "But just to make your life\na little more annoying, the number of vertices\nis the number of cities.",
    "start": "3999370",
    "end": "4004647"
  },
  {
    "text": "And the number of edges is\nthe number of flights, right? So this takes 12 times O of c\nplus f time, which, of course,",
    "start": "4004647",
    "end": "4012700"
  },
  {
    "text": "is just O of c plus f time. Notice, this is\none of these things",
    "start": "4012700",
    "end": "4018930"
  },
  {
    "text": "where we're being sneaky. We told you that\nyou specifically visit three places.",
    "start": "4018930",
    "end": "4024030"
  },
  {
    "text": "And that's where this\nnumber 12 came from. If we'd said that you\nwanted to visit m cities,",
    "start": "4024030",
    "end": "4029400"
  },
  {
    "text": "then this would be a very\ndifferent homework problem. This is one of those\nthings you got to remember, where we've given\nyou a few constants,",
    "start": "4029400",
    "end": "4035400"
  },
  {
    "text": "and you should use them. OK. So now, what can I do?",
    "start": "4035400",
    "end": "4041680"
  },
  {
    "text": "I can iterate over every\npermutation of A, B, C, right?",
    "start": "4041680",
    "end": "4059400"
  },
  {
    "text": "So this is like saying I go from\nmy source to city 1, to city 2,",
    "start": "4059400",
    "end": "4065670"
  },
  {
    "text": "to city 3, back to my source. I add together and compute the\ncost, the cost of that trip.",
    "start": "4065670",
    "end": "4081170"
  },
  {
    "text": "And remember, cost\nin this case is equal to the minimum\nnumber of connections. And then I return the minimizer.",
    "start": "4081170",
    "end": "4087500"
  },
  {
    "text": " So I say, like, is\nit cheaper for me",
    "start": "4087500",
    "end": "4092539"
  },
  {
    "text": "to go Boston, Budapest,\nParis, Boston, Paris, Budapest, and so on. So a for loop over\npermutations, which",
    "start": "4092540",
    "end": "4099080"
  },
  {
    "text": "generally is frowned upon. But in this case,\nbecause we told you you're visiting\nprecisely three places,",
    "start": "4099080",
    "end": "4106089"
  },
  {
    "text": "how many steps are going\nto happen in that for loop? Well, we actually wrote them\nall out over here on our board.",
    "start": "4106090",
    "end": "4112390"
  },
  {
    "text": "It's exactly 3 factorial,\nor 6 steps, right? 3 times 2 times 1, which is 6.",
    "start": "4112390",
    "end": "4119200"
  },
  {
    "text": "OK. So, right. So at the end of the\nday, this for loop",
    "start": "4119200",
    "end": "4124299"
  },
  {
    "text": "is going to take, well, order 6\ntime, which, of course, is just",
    "start": "4124300",
    "end": "4132859"
  },
  {
    "text": "order 1. So it doesn't really contribute\nto our runtime at all. And our entire algorithm\nruns in c plus f time.",
    "start": "4132859",
    "end": "4141560"
  },
  {
    "text": "OK, so right. So this is one of\nthese problems where you're really taking\nadvantage of the constants that we gave you.",
    "start": "4141560",
    "end": "4146918"
  },
  {
    "text": "We said you're\nvisiting three cities. So use it. Incidentally, as a\ncomputer science theorist,",
    "start": "4146918",
    "end": "4152720"
  },
  {
    "text": "if I said you're visiting\nexactly 17 cities, well, what would\nbe our numbers now?",
    "start": "4152720",
    "end": "4157799"
  },
  {
    "text": "I mean, it would be 17 factorial\nand then like 17 choose 2. Those are big numbers.",
    "start": "4157800",
    "end": "4162960"
  },
  {
    "text": "But they're still constants. So for purposes of this\nclass, that would be OK. But the second that I\ngive it a name, like m,",
    "start": "4162960",
    "end": "4169939"
  },
  {
    "text": "then I got to think about those\nfactorial things a little more carefully. All right.",
    "start": "4169939",
    "end": "4176439"
  },
  {
    "text": "So that's this problem. So the basic trick\nhere was that, like, yeah, it looks like\nall pairs shortest path.",
    "start": "4176439",
    "end": "4182799"
  },
  {
    "text": "But it's not quite. It's all pairs of things\nthat you're actually going to travel\nbetween shortest path.",
    "start": "4182800",
    "end": "4187850"
  },
  {
    "text": "And since that number of pairs\nis finite-- it's just 12-- that's an OK thing to do.",
    "start": "4187850",
    "end": "4193210"
  },
  {
    "text": "OK. How we doing? Ah, 15 minutes. Perfect.",
    "start": "4193210",
    "end": "4199468"
  },
  {
    "text": "I didn't want to do\nthe last problem. And I think I've\nmanaged to get myself in exactly that position.",
    "start": "4199468",
    "end": "4205389"
  },
  {
    "text": "OK. So the very last problem\non this homework, which, again, this\nhomework really follows the prototypical\n6.006 breadth-first search,",
    "start": "4205390",
    "end": "4212260"
  },
  {
    "text": "depth-first search homework. I feel like they all fall\ninto a similar pattern. Again, all these resources\nare available to you guys.",
    "start": "4212260",
    "end": "4218680"
  },
  {
    "text": "You should look at them. We're not trying\nto hide anything. This problem involves\nsolving a pocket",
    "start": "4218680",
    "end": "4224920"
  },
  {
    "text": "cube, which is like a\nlittle mini Rubik's cube, which is 2 by 2. And it looks like this.",
    "start": "4224920",
    "end": "4233340"
  },
  {
    "text": "Ah, there's chalk. Actually, there we go.",
    "start": "4233340",
    "end": "4238750"
  },
  {
    "text": "So here's my Rubik's cube.  Looks like a cube, which I'm\nhaving some trouble drawing.",
    "start": "4238750",
    "end": "4247789"
  },
  {
    "text": "And in particular,\nit's 2 by 2, which makes it a little easier than\nyour typical Rubik's cube.",
    "start": "4247790",
    "end": "4256870"
  },
  {
    "text": "And in particular, we're\ngoing to mark some faces. Sneakily, they used a\nlittle geometry term here,",
    "start": "4256870",
    "end": "4262340"
  },
  {
    "text": "which is cute. So here's face f0. I'm sorry you can't\nquite see that. But the top face is f0, in\ncase you were wondering.",
    "start": "4262340",
    "end": "4271360"
  },
  {
    "text": "The left face is f1. And the front-facing\nface here, f2.",
    "start": "4271360",
    "end": "4280323"
  },
  {
    "text": "Notice that we've\nidentified these by like vectors that point\n90 degrees out from the face. These are called normal vectors.",
    "start": "4280323",
    "end": "4286625"
  },
  {
    "text": "If you want to define\nthose rigorously, you can take my\ngrad level class. But for a Rubik's cube,\nit's not terribly difficult.",
    "start": "4286625",
    "end": "4293960"
  },
  {
    "text": "But in any event, I can talk\nabout flipping this Rubik's cube in a pretty easy\nway, which is that I like,",
    "start": "4293960",
    "end": "4300080"
  },
  {
    "text": "I'm going to fix one\ncorner of my cube. So this is like the corner that\nI'm holding onto with my hand.",
    "start": "4300080",
    "end": "4305110"
  },
  {
    "text": "And now I can grab, what? The top, the side, or\nthe front of my cube.",
    "start": "4305110",
    "end": "4310329"
  },
  {
    "text": "And I can rotate it clockwise\nor counterclockwise. And you can convince yourself\nthose are all the possible ways",
    "start": "4310330",
    "end": "4315760"
  },
  {
    "text": "that I could sort of mess\nwith the state of my cube after fixing one corner.",
    "start": "4315760",
    "end": "4321099"
  },
  {
    "text": "OK, right. And so this problem\nbasically is involving sort of a very typical trick.",
    "start": "4321100",
    "end": "4326800"
  },
  {
    "text": "In fact, a lot of the history\nof these different search algorithms-- breadth-first\nsearch, depth-first search, A*,",
    "start": "4326800",
    "end": "4333070"
  },
  {
    "text": "which I guess we won't\nreally cover here-- date back to, what,\n20 or 30 years ago,",
    "start": "4333070",
    "end": "4339770"
  },
  {
    "text": "we would have called\nartificial intelligence. These days, that has a\nvery different meaning.",
    "start": "4339770",
    "end": "4345220"
  },
  {
    "text": "But back in the day, AI was\nall about solving board games, and Rubik's cubes, and\nall these kinds of things,",
    "start": "4345220",
    "end": "4351910"
  },
  {
    "text": "using algorithms. And the way that\nthey would do that is by searching the different\nspaces of configurations.",
    "start": "4351910",
    "end": "4357910"
  },
  {
    "text": "And so now, if we think\nof every face of this cube as painted with a color, there\nare different configurations",
    "start": "4357910",
    "end": "4365080"
  },
  {
    "text": "of my graph that I get by\nflipping the three sides. So if we think of there\nbeing a vertex for each state",
    "start": "4365080",
    "end": "4379610"
  },
  {
    "text": "of my cube, where\nstate here means like the coloring of every\nface on my Rubik's cube,",
    "start": "4379610",
    "end": "4387020"
  },
  {
    "text": "then there's an\nedge for every move.",
    "start": "4387020",
    "end": "4394610"
  },
  {
    "text": "And in this problem, we\nencoded a move as a pair, j comma s, where\nit's saying that I'm",
    "start": "4394610",
    "end": "4400280"
  },
  {
    "text": "going to rotate face fj, where\nj is between, I guess, 0, 1, 2,",
    "start": "4400280",
    "end": "4408710"
  },
  {
    "text": "in direction s. And we can just index that as\nlike plus or minus 1 to kind",
    "start": "4408710",
    "end": "4415940"
  },
  {
    "text": "of say counterclockwise\nor clockwise. So this is kind of\na cute thing, where your graph has a\nbunch of vertices,",
    "start": "4415940",
    "end": "4423310"
  },
  {
    "text": "which are all Rubik's cubes. That's a cube. And then there are edges if\nI can get from one to another",
    "start": "4423310",
    "end": "4430900"
  },
  {
    "text": "by doing one of these moves. And this is a nice\nabstraction, because if I want to solve a Rubik's cube\nin the most efficient way",
    "start": "4430900",
    "end": "4438298"
  },
  {
    "text": "possible, one way to do that\nis to compute the shortest path from my current\nconfiguration",
    "start": "4438298",
    "end": "4443920"
  },
  {
    "text": "to the Platonic\nRubik's cube, where all the colors are constant on\nthe different faces of my cube.",
    "start": "4443920",
    "end": "4451719"
  },
  {
    "text": "And so that's like a sort\nof basic identification that happens all over the\nplace in search strategies,",
    "start": "4451720",
    "end": "4458650"
  },
  {
    "text": "where I'm going to think\nof every vertex of my graph as being the state of\nsome system and every edge",
    "start": "4458650",
    "end": "4464289"
  },
  {
    "text": "as being a transition\nfrom one to another. And then paths in this thing\nare kind of like different ways",
    "start": "4464290",
    "end": "4469693"
  },
  {
    "text": "of solving my puzzle, right? So like a different one\nwould be, I don't know, every vertex is a chess board\nwith the chess pieces scattered",
    "start": "4469693",
    "end": "4478210"
  },
  {
    "text": "on the chess board. And every edge is one chess\nmove by one player or the other. In that case, you'd have to be\na little careful, because you",
    "start": "4478210",
    "end": "4485200"
  },
  {
    "text": "want player 1 or player 2 to go\nback and forth from each other. But I'll let you think\nabout the reduction there. OK, so right.",
    "start": "4485200",
    "end": "4492010"
  },
  {
    "text": "This problem, I think\nlargely, is mostly just fun combinatorics\nrather than algorithms.",
    "start": "4492010",
    "end": "4497120"
  },
  {
    "text": "But there's a little bit of\nalgorithms hiding in here. So they want you to\nargue that the number",
    "start": "4497120",
    "end": "4502240"
  },
  {
    "text": "of distinct configurations\nof this Rubik's cube, this 2-by-2 guy,\nis less than 12 million.",
    "start": "4502240",
    "end": "4508062"
  },
  {
    "text": "This is nice, because 12 million\nis a number that computers can actually cope with. And so there's a pretty\nstraightforward argument there.",
    "start": "4508062",
    "end": "4514990"
  },
  {
    "text": " Right.",
    "start": "4514990",
    "end": "4520790"
  },
  {
    "text": "So in particular, here's a cube.",
    "start": "4520790",
    "end": "4527490"
  },
  {
    "text": "How many quarters are in a cube? AUDIENCE: Eight. JUSTIN SOLOMON: Eight, thanks. I hid one back here, in\ncase you were wondering.",
    "start": "4527490",
    "end": "4535650"
  },
  {
    "text": "So let's say that I fix\na corner of the cube, like we've done that.",
    "start": "4535650",
    "end": "4540900"
  },
  {
    "text": "Then every time that I rotate\none of the faces of my cube clockwise or\ncounterclockwise, I'm",
    "start": "4540900",
    "end": "4546150"
  },
  {
    "text": "essentially like taking\none corner of my cube and like sticking it in\nanother place, right? So in all, seven corners\nof my cube can move.",
    "start": "4546150",
    "end": "4556835"
  },
  {
    "text": " And if I'm not\nworried about, like--",
    "start": "4556835",
    "end": "4562605"
  },
  {
    "text": "it could be that some\nof these permutations are not actually achievable\nby a set of steps. Like, maybe I'd have to\nbreak my Rubik's cube",
    "start": "4562605",
    "end": "4568530"
  },
  {
    "text": "and glue it back together. But if I'm being\nconservative about it, there's of course less\nthan or equal to 7",
    "start": "4568530",
    "end": "4575430"
  },
  {
    "text": "factorial different\nconfigurations of the corners. ",
    "start": "4575430",
    "end": "4584520"
  },
  {
    "text": "So in other words, every\ntime I rotate my face, one of the corners ends\nup in a different place. So there's 7 factorial different\nways that could have happened.",
    "start": "4584520",
    "end": "4591325"
  },
  {
    "text": " OK, so that's part of my bound. Remember that I'm trying\nto bound the total number",
    "start": "4591325",
    "end": "4598040"
  },
  {
    "text": "of configurations here. And essentially, what I've\ndone so far is I've said, OK, well, there's\na bunch of cubes",
    "start": "4598040",
    "end": "4606180"
  },
  {
    "text": "in my 2-by-2 Rubik's cube. So I'm going to like\nunglue this entire cube, take just this corner,\nand stick it up here.",
    "start": "4606180",
    "end": "4613568"
  },
  {
    "text": "And there's like 7\nfactorial different ways that I could do that. But I still have to\naccount for the fact",
    "start": "4613568",
    "end": "4619540"
  },
  {
    "text": "that I pull this piece off. I stick it in the top. But I have to figure\nout its orientation. I can still rotate\nit about this corner.",
    "start": "4619540",
    "end": "4627340"
  },
  {
    "text": "And in fact, there are\nthree different ways that I could rotate it, right? You can kind of see it, right? 1, 2, 3, yeah?",
    "start": "4627340",
    "end": "4635300"
  },
  {
    "text": "So in all, so each corner\ncan rotate three ways.",
    "start": "4635300",
    "end": "4647750"
  },
  {
    "text": "So that means that I\nhave 3 times 7 factorial different configurations\nas an upper bound.",
    "start": "4647750",
    "end": "4656280"
  },
  {
    "text": "And this number is,\nwait for it, 11,022,480.",
    "start": "4656280",
    "end": "4665520"
  },
  {
    "text": "The problem asks you to argue\nthat your upper bound is upper bounded by 12 million.",
    "start": "4665520",
    "end": "4670840"
  },
  {
    "text": "And indeed, it is less than\nor equal to 12 million. AUDIENCE: Is that 3\ntimes 7 factorial or--",
    "start": "4670840",
    "end": "4679480"
  },
  {
    "text": "JUSTIN SOLOMON: Oh, I'm sorry. Right, because there are\nseven corners, each of which can rotate three different ways.",
    "start": "4679480",
    "end": "4684580"
  },
  {
    "text": "It's actually 3 to the 7th\npower times 7 factorial. Thank you, student.",
    "start": "4684580",
    "end": "4690550"
  },
  {
    "text": "OK, right. So let's see here. Really quickly moving here,\nthe next problem says,",
    "start": "4690550",
    "end": "4697030"
  },
  {
    "text": "state the maximum\nand minimum degree of any vertex in my graph.",
    "start": "4697030",
    "end": "4702350"
  },
  {
    "text": "First of all, do\nI expect vertices to have different degrees? This is kind of a goofy problem.",
    "start": "4702350",
    "end": "4708320"
  },
  {
    "text": "Like, what would it mean to have\na vertex that somehow has lower",
    "start": "4708320",
    "end": "4715449"
  },
  {
    "text": "degree than another vertex? It would mean that\nthere's some configuration of this cube for which\nthere are fewer moves that I",
    "start": "4715450",
    "end": "4720950"
  },
  {
    "text": "could do to change it than\na different configuration of this cube. And that's obviously\nnot the case, right?",
    "start": "4720950",
    "end": "4727290"
  },
  {
    "text": "Because when I flip one of the\nfaces of my cube, all I'm doing is I'm moving the colors around.",
    "start": "4727290",
    "end": "4733230"
  },
  {
    "text": "I haven't somehow changed\nthe physics of how a Rubik's cube works, right? And so I think this\nwas just intended to be",
    "start": "4733230",
    "end": "4742140"
  },
  {
    "text": "annoying by your instructors. The min degree is equal\nto the max degree.",
    "start": "4742140",
    "end": "4753780"
  },
  {
    "text": "And in fact, the degree\nof every node in my graph is constant here.",
    "start": "4753780",
    "end": "4760180"
  },
  {
    "text": "The one thing that's\nworth noting here-- what I haven't argued-- it turns out, I\nthink, to be true. But what I have argued is\nthat I couldn't rotate a face",
    "start": "4760180",
    "end": "4767980"
  },
  {
    "text": "and actually end up in\nthe same configuration. Like, maybe, for some\nreason, I had red all the way around the outside. And so when I rotate\nit, nothing changed.",
    "start": "4767980",
    "end": "4775357"
  },
  {
    "text": "That obviously isn't true. But I haven't\nargued it carefully. But as long as I don't worry\nabout my graph being simple, like I'm OK with self-loops,\nthen the degree is certainly",
    "start": "4775357",
    "end": "4783880"
  },
  {
    "text": "constant, yeah? OK. And in fact, I don't think that\ncan happen in a typical Rubik's",
    "start": "4783880",
    "end": "4790770"
  },
  {
    "text": "cube. AUDIENCE: Well,\nI think the point is to say what the degree was. JUSTIN SOLOMON:\nOh, yeah, indeed.",
    "start": "4790770",
    "end": "4796960"
  },
  {
    "text": "So we haven't\ncomputed the degree. But we've argued that\nthey're equal to one another. OK, so now we have to\ncompute what that degree is.",
    "start": "4796960",
    "end": "4804280"
  },
  {
    "text": "And here's how to do it. So of course--\nwell, this, I think, is actually even easier\nthan the first part.",
    "start": "4804280",
    "end": "4811119"
  },
  {
    "text": "Essentially, remember, we\nhave three different options for faces that I can rotate. I can rotate the top, the\nfront, or the side here.",
    "start": "4811120",
    "end": "4819820"
  },
  {
    "text": "So there's three faces\nthat we could rotate.",
    "start": "4819820",
    "end": "4824949"
  },
  {
    "text": " OK, and how many different\nways can rotate them? I can rotate them\ncounterclockwise or clockwise.",
    "start": "4824950",
    "end": "4832869"
  },
  {
    "text": "So there's two directions. So in all, there's degree\n6 for every vertex, right? There's sis different ways\nin or out of a vertex here.",
    "start": "4832870",
    "end": "4843030"
  },
  {
    "text": "OK, so the next\npart of the problem gives you a piece of code and\nthen does breadth-first search",
    "start": "4843030",
    "end": "4848429"
  },
  {
    "text": "on this graph. And it's super,\nsuper slow to give me the distance to all the\nother configurations.",
    "start": "4848430",
    "end": "4855690"
  },
  {
    "text": "And Jason conveniently has\nrun it on his laptop here. I don't-- I'm nervous\nto touch your laptop.",
    "start": "4855690",
    "end": "4862579"
  },
  {
    "text": "I don't care so\nmuch, but I don't-- you know, I don't\nwant to infect your-- yeah. ",
    "start": "4862580",
    "end": "4869460"
  },
  {
    "text": "Right. So we have a piece\nof code that explores the graph of all the\nconfigurations of our cube",
    "start": "4869460",
    "end": "4875320"
  },
  {
    "text": "by breadth-first search and then\nsort of gives me the shortest path, I think from\nthe base cube,",
    "start": "4875320",
    "end": "4880885"
  },
  {
    "text": "where all the faces\nare constant to all the other configurations\nthat are reachable, and generates a plot.",
    "start": "4880885",
    "end": "4888400"
  },
  {
    "text": "Right. And so what they\nask is to figure out the total number\nof configurations",
    "start": "4888400",
    "end": "4893760"
  },
  {
    "text": "that it explores. One thing that you'll find out-- ",
    "start": "4893760",
    "end": "4899330"
  },
  {
    "text": "center down-- is that it\nexplores pretty much a third--",
    "start": "4899330",
    "end": "4905030"
  },
  {
    "text": "in fact, exactly a third of\nall the possible configurations of my cube. I think we can see that here.",
    "start": "4905030",
    "end": "4912449"
  },
  {
    "text": "So I guess it runs\nthis whole thing. You saw them all together. Right. Oops.",
    "start": "4912450",
    "end": "4917920"
  },
  {
    "text": " That's OK.",
    "start": "4917920",
    "end": "4923449"
  },
  {
    "text": "And so in fact, the kind of fun\nfact that you can learn about the 2-by-2-by-2 Rubik's cube\nis that there's actually three",
    "start": "4923450",
    "end": "4930710"
  },
  {
    "text": "connected components\nin this graph. So in other words,\nthere's sort of like three different Rubik's cubes you can\nmake, modulo all the different",
    "start": "4930710",
    "end": "4938150"
  },
  {
    "text": "flips that you can\ndo to the faces. And those correspond to\nthere corner rotations of one",
    "start": "4938150",
    "end": "4943550"
  },
  {
    "text": "of the corners of the thing. OK, so right.",
    "start": "4943550",
    "end": "4950570"
  },
  {
    "text": "So then the next\npart of the problem asks you to state the maximum\nnumber of moves needed to solve any Rubik's cube.",
    "start": "4950570",
    "end": "4957067"
  },
  {
    "text": "And you can see it in this plot. So what this plot is\nshowing you is the size of the level set\nof this distance",
    "start": "4957067",
    "end": "4963010"
  },
  {
    "text": "function for every distance. So I think technically,\nit looks like 0. But there's actually,\nthis is at a 1",
    "start": "4963010",
    "end": "4969580"
  },
  {
    "text": "here, which is to say there's\none vertex at distance 0, which is the source. And as we move farther\nand farther out,",
    "start": "4969580",
    "end": "4976360"
  },
  {
    "text": "our tree is expanding. And we're seeing more\nand more vertices. And apparently, most vertices\nare approximately distance--",
    "start": "4976360",
    "end": "4982240"
  },
  {
    "text": "is that 11 or 12? 11 away from the original. Then eventually I explore the\nentire graph, and I'm done.",
    "start": "4982240",
    "end": "4989140"
  },
  {
    "text": "And you can see that the\nfarthest-away vertex is 14 away, meaning that the most\nannoying Rubik's cube to solve",
    "start": "4989140",
    "end": "4996940"
  },
  {
    "text": "can be solved in 14 steps for\nthe 2-by-2-by-2 pocket cube.",
    "start": "4996940",
    "end": "5002400"
  },
  {
    "text": "I'm sure that Jason probably\nknows the equivalent of this number for the 3-by-3-by-3. But I have no idea what it is.",
    "start": "5002400",
    "end": "5009148"
  },
  {
    "text": "I'm impressed if he can\ncalculate it in his head, like he looked like\nhe was about to try. But I digress.",
    "start": "5009148",
    "end": "5015489"
  },
  {
    "text": "Right. So in other words, this is\nactually a fancy term for-- we talked about the\nradius of your graph",
    "start": "5015490",
    "end": "5021990"
  },
  {
    "text": "in the first problem. Now we've got the\ndiameter, which is, well, not necessarily 2\ntimes the radius,",
    "start": "5021990",
    "end": "5027400"
  },
  {
    "text": "the way that we've defined it\nhere, but actually, almost-- I think within some\nconstant of that.",
    "start": "5027400",
    "end": "5035150"
  },
  {
    "text": "OK, so right. So notice that the vertical\naxis here is really big.",
    "start": "5035150",
    "end": "5041610"
  },
  {
    "text": "And this is explaining why this\nBFS code is so slow, right? Because these are all the\ndifferent configurations it has to hit.",
    "start": "5041610",
    "end": "5047670"
  },
  {
    "text": "Or more accurately, if\nI take the y-position of each one of these vertices\nand sum up its height,",
    "start": "5047670",
    "end": "5053610"
  },
  {
    "text": "those are all the configurations\nthat are reachable. And those are all the steps\nthat BFS needs before it's done.",
    "start": "5053610",
    "end": "5059040"
  },
  {
    "text": "And so that number is in the-- it's certainly in\nthe millions, yeah.",
    "start": "5059040",
    "end": "5065760"
  },
  {
    "text": "OK, so then the last\npart of this problem, which it conveniently looks\nlike I'm low on time to solve,",
    "start": "5065760",
    "end": "5071160"
  },
  {
    "text": "but I'll refer you to\nthe solution anyway, is asking how we\nmight do this faster.",
    "start": "5071160",
    "end": "5077519"
  },
  {
    "text": "And so in particular,\nwhat it says is, let's say that I have a total of\nn configurations for my Rubik's",
    "start": "5077520",
    "end": "5084850"
  },
  {
    "text": "cube. In this case, it\nturns out that that's like roughly three\nmillion, I think. OK.",
    "start": "5084850",
    "end": "5090510"
  },
  {
    "text": "And now I want an\nalgorithm that gives me the shortest sequence of moves\nto solve any pocket cube.",
    "start": "5090510",
    "end": "5100409"
  },
  {
    "text": "Man, I'm really ravaging\nthe chalk today. And I want to solve any\ncube in a number of steps",
    "start": "5100410",
    "end": "5108660"
  },
  {
    "text": "that looks like 2N to the\nceiling of w over 2, where--",
    "start": "5108660",
    "end": "5117950"
  },
  {
    "start": "5117950",
    "end": "5123660"
  },
  {
    "text": "let's see here. The code provided--\nsorry, this problem changed on me this afternoon. [LAUGHS] Right.",
    "start": "5123660",
    "end": "5130530"
  },
  {
    "text": "So where N sub i is equal to\nthe number of configurations",
    "start": "5130530",
    "end": "5136710"
  },
  {
    "text": "reachable within i moves. Oh, good. I see what we did here. ",
    "start": "5136710",
    "end": "5146840"
  },
  {
    "text": "So if this is my base cube,\nthen we've got like maybe, I guess, six different--",
    "start": "5146840",
    "end": "5152250"
  },
  {
    "text": "1, 2, 3, 4, 5, 6 different cubes\nthat I can reach from those. And then there's 6 cubes I\ncan reach from all of those.",
    "start": "5152250",
    "end": "5158680"
  },
  {
    "text": "But of course, some of\nthose might be pointing backward or to each other. But this is the number of things\nthat are reachable in i moves.",
    "start": "5158680",
    "end": "5166020"
  },
  {
    "text": "And they ask for an algorithm\nthat finds the shortest path in this amount of time. By the way, big N typically\nexponentiates in that subscript",
    "start": "5166020",
    "end": "5173880"
  },
  {
    "text": "there. This looks innocent,\nbut it's not. The basic trick here is to do--",
    "start": "5173880",
    "end": "5180413"
  },
  {
    "text": "I'm not going to\nbother writing it down. We'll just talk about it for a\nsecond and call it for the day. Well, I'll draw a picture.",
    "start": "5180413",
    "end": "5186620"
  },
  {
    "text": "So the breadth-first\nsearch algorithm that we've thought about\nso far chooses a vertex and then computes level sets\noutward from that vertex",
    "start": "5186620",
    "end": "5195790"
  },
  {
    "text": "until it maybe reaches\nthe destination that you want to hit.",
    "start": "5195790",
    "end": "5201602"
  },
  {
    "text": "That doesn't quite work here. And the-- well, I\nmean, it does work. But it's going to be\nquite slow, because like, let's say I had bad luck, and\nnow we're in that 14 vertex,",
    "start": "5201602",
    "end": "5209390"
  },
  {
    "text": "right? Then, somewhere in\nthere, I'm going to hit this big height,\nwhich is sitting over the 11,",
    "start": "5209390",
    "end": "5215410"
  },
  {
    "text": "before I can get to vertex 14. So the trick here\nis it turns out",
    "start": "5215410",
    "end": "5221110"
  },
  {
    "text": "that I can do it by\nonly ever getting to 7. And the way that I'm going\nto do that is instead,",
    "start": "5221110",
    "end": "5228469"
  },
  {
    "text": "I'm going to run BFS sort\nof in parallel for two different vertices, right? The source and the target. So in this case, my\ncurrent cube and the cube",
    "start": "5228470",
    "end": "5235850"
  },
  {
    "text": "I would like it to be, like\nthe solution to the problem. I'm first going to compute\nthe level set 1 of that cube,",
    "start": "5235850",
    "end": "5241690"
  },
  {
    "text": "then level set 1 of the\nnext cube, then level set 2, level set 2, 3, 4.",
    "start": "5241690",
    "end": "5246949"
  },
  {
    "text": "And notice that\neventually, they're going to intersect, pretty\nmuch right at the midpoint.",
    "start": "5246950",
    "end": "5252320"
  },
  {
    "text": "And so the size\nof the level set-- I never need to compute\na level set that's bigger than a half of\nthe shortest path length.",
    "start": "5252320",
    "end": "5258850"
  },
  {
    "text": "I have to round up to be\nconservative about that. And that's where I\nget this factor here. So that's just a\nnice little trick",
    "start": "5258850",
    "end": "5264620"
  },
  {
    "text": "for reducing the search size. This is another kind\nof standard trick if you look at some\nof the code people use",
    "start": "5264620",
    "end": "5270530"
  },
  {
    "text": "for solving board games\nalgorithmically and so on. I think they typically sort\nof search from the beginning",
    "start": "5270530",
    "end": "5275690"
  },
  {
    "text": "and end state outward and\ntry and meet in the middle for exactly this\nreason, which is that exponential\ngrowth, as we all know,",
    "start": "5275690",
    "end": "5283470"
  },
  {
    "text": "can be quite problematic. All right, folks. So I think we're just\nabout out of time. And I've certainly\nworn myself out.",
    "start": "5283470",
    "end": "5290150"
  },
  {
    "text": "So with that, hopefully\nwe'll see you next week. And yeah, I hope\neverybody is doing well.",
    "start": "5290150",
    "end": "5295900"
  },
  {
    "start": "5295900",
    "end": "5301000"
  }
]