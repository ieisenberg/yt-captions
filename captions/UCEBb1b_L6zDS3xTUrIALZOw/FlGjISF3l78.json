[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "7029"
  },
  {
    "text": "continue to offer high-quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "7030",
    "end": "13990"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13990",
    "end": "31789"
  },
  {
    "text": "ANA BELL: All right,\neveryone, let's get started. ",
    "start": "31789",
    "end": "37670"
  },
  {
    "text": "So today is going to\nbe the second lecture on object-oriented programming. So just a quick recap of\nlast time-- on Monday,",
    "start": "37670",
    "end": "44930"
  },
  {
    "text": "we saw-- we were\nintroduced to this idea of object-oriented\nprogramming, and we saw these things called\nabstract data types.",
    "start": "44930",
    "end": "52230"
  },
  {
    "text": "And these abstract data\ntypes we implemented through Python classes. And they allowed us to\ncreate our own data types",
    "start": "52230",
    "end": "61399"
  },
  {
    "text": "that sort of abstracted a\ngeneral object of our choosing, right?",
    "start": "61400",
    "end": "66500"
  },
  {
    "text": "So we've used lists\nbefore, for example. But with abstract\ndata types, we were able to create objects\nthat were of our own types.",
    "start": "66500",
    "end": "75110"
  },
  {
    "text": "We saw the coordinate example. And then at the\nend of the class, we saw the fraction example. So today we're going to\ntalk a little bit more",
    "start": "75110",
    "end": "81020"
  },
  {
    "text": "about object-oriented\nprogramming and classes. We're going to see\na few more examples. And we're going to talk about\na few other nuances of classes,",
    "start": "81020",
    "end": "92000"
  },
  {
    "text": "talk about information\nhiding and class variables. And in the second\nhalf of the lecture, we're going to talk about\nthe idea of inheritance.",
    "start": "92000",
    "end": "99480"
  },
  {
    "text": "So we're going to use\nobject-oriented programming to simulate how real life works.",
    "start": "99480",
    "end": "104877"
  },
  {
    "text": "So in real life, you\nhave inheritance. And in object-oriented\nprogramming, you can also simulate that.",
    "start": "104877",
    "end": "112480"
  },
  {
    "text": "OK, so the first\nfew slides are going to be a little bit of recap just\nto make sure that everyone's on the same page\nbefore I introduce",
    "start": "112480",
    "end": "118920"
  },
  {
    "text": "a couple of new concepts\nrelated to classes. So recall that when--\nin the last lecture,",
    "start": "118920",
    "end": "125009"
  },
  {
    "text": "we talked about\nwriting code from two different perspectives, right? The first was from someone who\nwanted to implement a class.",
    "start": "125010",
    "end": "132450"
  },
  {
    "text": "So implementing the class meant\ndefining your own object type.",
    "start": "132450",
    "end": "137810"
  },
  {
    "text": "So you defined the object type\nwhen you defined the class. And then you decided what\ndata attributes you wanted",
    "start": "137810",
    "end": "144680"
  },
  {
    "text": "to define in your object. So what data makes\nup the object? What is the object, OK?",
    "start": "144680",
    "end": "152739"
  },
  {
    "text": "In addition to data\nattributes, we also saw these things called methods.",
    "start": "152740",
    "end": "157800"
  },
  {
    "text": "And methods were\nways to tell someone how to use your data type. So what are ways that someone\ncan interact with the data",
    "start": "157800",
    "end": "164159"
  },
  {
    "text": "type, OK? So that's from the\npoint of view of someone who wants to write\ntheir own object type.",
    "start": "164160",
    "end": "169650"
  },
  {
    "text": "So you're implementing a class. And the other perspective\nwas to write code",
    "start": "169650",
    "end": "176536"
  },
  {
    "text": "from the point of\nview of someone who wanted to use a class\nthat was already written, OK? So this involved creating\ninstances of objects.",
    "start": "176536",
    "end": "184690"
  },
  {
    "text": "So you're using the object type. Once you created\ninstances of objects, you were able to do\noperations on them.",
    "start": "184690",
    "end": "191320"
  },
  {
    "text": "So you were able to see\nwhat methods whoever implemented the class added. And then, you can\nuse those methods",
    "start": "191320",
    "end": "197160"
  },
  {
    "text": "in order to do operations\nwith your instances.",
    "start": "197160",
    "end": "204450"
  },
  {
    "text": "So just looking at the\ncoordinate example we saw last time, a little\nbit more in detail about what that meant--\nso we had a class",
    "start": "204450",
    "end": "212590"
  },
  {
    "text": "definition of an object\ntype, which included deciding what the class name was.",
    "start": "212590",
    "end": "218950"
  },
  {
    "text": "And the class name\nbasically told Python what type of an\nobject this was, OK? In this case, we\ndecided we wanted",
    "start": "218950",
    "end": "225610"
  },
  {
    "text": "to name a coordinate-- we wanted\nto create a Coordinate object. And the type of this\nobject was therefore",
    "start": "225610",
    "end": "231459"
  },
  {
    "text": "going to be a coordinate. We defined the class in the\nsort of general way, OK?",
    "start": "231460",
    "end": "237220"
  },
  {
    "text": "So we needed a way to\nbe able to access data attributes of any instance.",
    "start": "237220",
    "end": "242950"
  },
  {
    "text": "So we use this\nself variable, OK? And the self variable\nwe used to refer",
    "start": "242950",
    "end": "249910"
  },
  {
    "text": "to any instance-- to the data\nattributes of any instance",
    "start": "249910",
    "end": "255180"
  },
  {
    "text": "in a general way\nwithout actually having a particular\ninstance in mind, OK? So whenever we access\ndata attributes,",
    "start": "255180",
    "end": "261959"
  },
  {
    "text": "we would say something like self\ndot to access a data attribute. You'd access the attribute\ndirectly with self.x.",
    "start": "261959",
    "end": "269160"
  },
  {
    "text": "Or if you wanted\nto access a method, you would say self, dot,\nand then the method name-- for example, distance. ",
    "start": "269160",
    "end": "277350"
  },
  {
    "text": "And really, the bottom line\nof the class definition is that your class defines\nall of the data-- so data",
    "start": "277350",
    "end": "282912"
  },
  {
    "text": "attributes-- and\nall of the methods that are going to be common\nacross all of the instances. So any instance that you create\nof a particular object type,",
    "start": "282912",
    "end": "292410"
  },
  {
    "text": "that instance is going to have\nthis exact same structure, OK?",
    "start": "292410",
    "end": "298490"
  },
  {
    "text": "The difference is that\nevery instance's values are going to be different.",
    "start": "298490",
    "end": "305270"
  },
  {
    "text": "So when you're creating\ninstances of classes, you can create more than one\ninstance of the same class.",
    "start": "305270",
    "end": "311770"
  },
  {
    "text": "So we can create a\nCoordinate object here using this syntax right here.",
    "start": "311770",
    "end": "317650"
  },
  {
    "text": "So you say the type, and then,\nwhatever values it takes in. And you can create more\nthan one Coordinate object.",
    "start": "317650",
    "end": "324380"
  },
  {
    "text": " Each Coordinate object is\ngoing to have different data",
    "start": "324380",
    "end": "330150"
  },
  {
    "text": "attributes. Sorry, it's going to have\ndifferent data attribute values, OK?",
    "start": "330150",
    "end": "336740"
  },
  {
    "text": "Every Coordinate object is\ngoing to have an x value and a y value. But the x and y values\namong different instances",
    "start": "336740",
    "end": "345280"
  },
  {
    "text": "are going to vary, OK? So that's the difference\nbetween defining a class and looking at a particular\ninstance of a class.",
    "start": "345280",
    "end": "352240"
  },
  {
    "text": "So instances have the\nstructure of the class. So for a coordinate,\nall instances have an x value and a y value.",
    "start": "352240",
    "end": "359740"
  },
  {
    "text": "But the actual values\nare going to vary between the different instances. OK, so ultimately,\nwhy do we want",
    "start": "359740",
    "end": "366580"
  },
  {
    "text": "to use object-oriented\nprogramming? So, so far, the\nexamples that we've seen",
    "start": "366580",
    "end": "372440"
  },
  {
    "text": "were numerical, right--\na coordinate, a fraction. But using object-oriented\nprogramming,",
    "start": "372440",
    "end": "379639"
  },
  {
    "text": "you can create objects\nthat mimic real life.",
    "start": "379640",
    "end": "384730"
  },
  {
    "text": "So if I wanted to create\nobjects of-- an object that defined a cat and an object\nthat defined a rabbit,",
    "start": "384730",
    "end": "392229"
  },
  {
    "text": "I could do that with\nobject-oriented programming. I would just have to decide,\nas a programmer, what",
    "start": "392230",
    "end": "398139"
  },
  {
    "text": "data and what methods\nI'd want to assign to these groups of objects, OK?",
    "start": "398140",
    "end": "405210"
  },
  {
    "text": "So using object-oriented\nprogramming, each one of these is considered a\ndifferent object.",
    "start": "405210",
    "end": "411270"
  },
  {
    "text": "And as a different\nobject, I can decide that a cat is going to have\na name, an age, and maybe",
    "start": "411270",
    "end": "416280"
  },
  {
    "text": "a color associated with it.  And these three\nhere, on the right,",
    "start": "416280",
    "end": "422330"
  },
  {
    "text": "each one of these rabbits\nis also an object. And I'm going to\ndecide that I'm going to represent a rabbit by\njust an age and a color, OK?",
    "start": "422330",
    "end": "431710"
  },
  {
    "text": "And with object-oriented\nprogramming, using these\nattributes, I can group",
    "start": "431710",
    "end": "441599"
  },
  {
    "text": "these three objects together and\nthese three objects together, OK? ",
    "start": "441600",
    "end": "449500"
  },
  {
    "text": "So I'm grouping\nsets of objects that are going to have the\nsame attributes together.",
    "start": "449500",
    "end": "457190"
  },
  {
    "text": "And attributes-- this is also\na recap of last time-- come in two forms, right,\ndata attributes and procedural attributes.",
    "start": "457190",
    "end": "464900"
  },
  {
    "text": "So the data attributes\nare basically things that define\nwhat the object is.",
    "start": "464900",
    "end": "472760"
  },
  {
    "text": "So how do you represent\na cat as an object? And it's up to you,\nas the programmer,",
    "start": "472760",
    "end": "477890"
  },
  {
    "text": "to decide how you\nwant to do that. For a coordinate, it was\npretty straightforward.",
    "start": "477890",
    "end": "483950"
  },
  {
    "text": "You had an x and a y value. If we're representing something\nmore abstract like an animal,",
    "start": "483950",
    "end": "489069"
  },
  {
    "text": "then maybe I would\nsay, well, I'm going to represent an animal\nby an age and a name, OK? So it's really up\nto you to decide",
    "start": "489070",
    "end": "494259"
  },
  {
    "text": "how you want to represent--\nwhat data attributes you want",
    "start": "494260",
    "end": "500980"
  },
  {
    "text": "to represent your object with. Procedural attributes were\nalso known as methods.",
    "start": "500980",
    "end": "508690"
  },
  {
    "text": "And the methods are\nessentially asking, what can your object do, OK?",
    "start": "508690",
    "end": "515210"
  },
  {
    "text": "So how can someone who wants\nto use your object-- how can someone interact with it? So for a coordinate,\nwe saw that you",
    "start": "515210",
    "end": "521659"
  },
  {
    "text": "could find the distance\nbetween two coordinates. Maybe for our abstract\nAnimal object,",
    "start": "521659",
    "end": "527180"
  },
  {
    "text": "you might have it\nmake a sound, OK, by maybe printing to the\nscreen or something like that.",
    "start": "527180",
    "end": "533920"
  },
  {
    "text": "OK, this slide's also a recap\nof how to create a class just to make sure everyone's on\nthe same page before we go on.",
    "start": "533920",
    "end": "541709"
  },
  {
    "text": "So we defined a class\nusing this class keyword. And we said, class,\nthe name of the class. So now we're going to create\na more abstract Animal class.",
    "start": "541710",
    "end": "549677"
  },
  {
    "text": "We're going to see,\nin the second half of the lecture, what it\nmeans to put something else in the parentheses. But for now, we say that an\nanimal is an object in Python.",
    "start": "549677",
    "end": "563620"
  },
  {
    "text": "So that means it's going to\nhave all of the properties that any other\nobject in Python has.",
    "start": "563620",
    "end": "569740"
  },
  {
    "text": "And as we're\ncreating this animal, we're going to\ndefine how to create an instance of this class.",
    "start": "569740",
    "end": "576310"
  },
  {
    "text": "So we say def. And this __init__ was the\nspecial method that told Python how to create an object.",
    "start": "576310",
    "end": "583496"
  },
  {
    "text": "Inside the\nparentheses, remember, we have the self,\nwhich is a variable that we use to refer to any\ninstance of the class, OK?",
    "start": "583496",
    "end": "589967"
  },
  {
    "text": "We don't have a particular\ninstance in mind, we just want to be able to\nrefer to any instance, OK?",
    "start": "589967",
    "end": "595190"
  },
  {
    "text": "So we use this self variable. And then, the second\nparameter here is going to represent\nwhat other data we use",
    "start": "595190",
    "end": "603650"
  },
  {
    "text": "to initialize our object with. So in this case,\nI'm going to say, I'm going to initialize an\nAnimal object with an age, OK?",
    "start": "603650",
    "end": "609110"
  },
  {
    "text": "So when I create an animal,\nI need to give it an age. Inside the __init__ are any\ninitializations that I want",
    "start": "609110",
    "end": "615440"
  },
  {
    "text": "to make. So the first thing is, I'm\ngoing to assign an instance variable, age-- so this is\ngoing to be the data attribute",
    "start": "615440",
    "end": "622700"
  },
  {
    "text": "age-- to be whatever\nis passed in. And then, I'm also making\nanother assignment here, where I'm assigning\nthe data attribute",
    "start": "622700",
    "end": "629180"
  },
  {
    "text": "name to be None originally. Later on in the code, when\nI want to create an Animal",
    "start": "629180",
    "end": "635740"
  },
  {
    "text": "object, I say the class name. And then I pass it in\nwhatever parameters",
    "start": "635740",
    "end": "641080"
  },
  {
    "text": "it takes-- in this\ncase, the age. And I'm assigning it to\nthis instance here, OK?",
    "start": "641080",
    "end": "650760"
  },
  {
    "text": "All right, so now we\nhave this class, Animal. We've done the first\npart here, which is",
    "start": "650760",
    "end": "657810"
  },
  {
    "text": "to initialize the class, right? So we've told Python how to\ncreate an object of this type.",
    "start": "657810",
    "end": "666570"
  },
  {
    "text": "There's a few other methods\nhere that I've implemented. Next two we call\ngetters, and the two",
    "start": "666570",
    "end": "674400"
  },
  {
    "text": "after that we call setters, OK? And getters and setters\nare very commonly",
    "start": "674400",
    "end": "679920"
  },
  {
    "text": "used when implementing a class.",
    "start": "679920",
    "end": "688060"
  },
  {
    "text": "So getters essentially\nreturn the values of any of the data attributes, OK?",
    "start": "688060",
    "end": "695600"
  },
  {
    "text": "So if you look carefully,\nget_age() is just returning self.age, and get_name()\njust returns self.name.",
    "start": "695600",
    "end": "704639"
  },
  {
    "text": "So they're very simple methods. Similarly, set_age()\nand set_name()-- we're going to see what this\nfunny equal sign is doing here",
    "start": "704640",
    "end": "713370"
  },
  {
    "text": "in the next couple of slides. But setters do a\nvery similar thing where they're going to\nset the data attributes",
    "start": "713370",
    "end": "718436"
  },
  {
    "text": "to whatever is passed in, OK? ",
    "start": "718436",
    "end": "724600"
  },
  {
    "text": "So those are\ngetters and setters. And then, the last thing down\nhere is this __str__ method. And this __str__ method is used\nto tell Python how to print",
    "start": "724600",
    "end": "733529"
  },
  {
    "text": "an object of this type Animal. So if you didn't have\nthis __str__ method, if you remember\nfrom last lecture,",
    "start": "733530",
    "end": "739230"
  },
  {
    "text": "what ends up happening is you're\ngoing to get some message when you print your object that\nsays, this is an object of type",
    "start": "739230",
    "end": "747420"
  },
  {
    "text": "Animal at this memory location,\nwhich is very uninformative, right? So you implement\nthis method here,",
    "start": "747420",
    "end": "753300"
  },
  {
    "text": "which tells Python how to print\nan object of this type, OK?",
    "start": "753300",
    "end": "760319"
  },
  {
    "text": "So the big point\nof this slide is that you should be using\ngetters and setters-- you",
    "start": "760319",
    "end": "765490"
  },
  {
    "text": "should be implementing getters\nand setters for your classes. And we're going to see, in\nthe next couple of slides,",
    "start": "765490",
    "end": "772440"
  },
  {
    "text": "why exactly. But basically, they're\ngoing to prevent bugs",
    "start": "772440",
    "end": "777660"
  },
  {
    "text": "from coming into play\nlater on if someone decides to change implementation.",
    "start": "777660",
    "end": "784149"
  },
  {
    "text": "So we saw how to-- so\nthe previous slide, this slide here, shows the\nimplementation of the Animal class.",
    "start": "784150",
    "end": "789790"
  },
  {
    "text": "And here we can see\nhow we can create an instance of this object.",
    "start": "789790",
    "end": "794830"
  },
  {
    "text": "So we can say a = Animal(3). So this is going to create a new\nAnimal object with an age of 3.",
    "start": "794830",
    "end": "800800"
  },
  {
    "text": "And we can access the object\nthrough the variable a. Dot notation, recall,\nis a way for you",
    "start": "800800",
    "end": "807250"
  },
  {
    "text": "to access data attributes\nand methods of a class, OK? So you can say a.age\nlater on in your program,",
    "start": "807250",
    "end": "814660"
  },
  {
    "text": "and that is allowed. It'll try to access\nthe age data attribute of this particular\ninstance of the class, a.",
    "start": "814660",
    "end": "821440"
  },
  {
    "text": "So this is going to give you 3. However, it's actually\nnot recommended to access",
    "start": "821440",
    "end": "827580"
  },
  {
    "text": "data attributes directly. So this is the\nreason-- so you're going to see in the next slide,\nthe reason-- why we're going",
    "start": "827580",
    "end": "832780"
  },
  {
    "text": "to use getters and setters. Instead, you should use the\nget_age() getter method to get",
    "start": "832780",
    "end": "839710"
  },
  {
    "text": "the age of the animal. So this is going\nto return, also, 3. So these are going\nto do the same thing.",
    "start": "839710",
    "end": "846070"
  },
  {
    "text": " And the reason why you'd want\nto use getters and setters",
    "start": "846070",
    "end": "852720"
  },
  {
    "text": "is this idea of\ninformation hiding, OK? So the whole reason\nwhy we're using classes in object-oriented\nprogramming is",
    "start": "852720",
    "end": "859589"
  },
  {
    "text": "so that you can abstract\ncertain data from the user, OK?",
    "start": "859590",
    "end": "864690"
  },
  {
    "text": "One of the things you\nshould be abstracting is these data attributes. So users shouldn't\nreally need to know",
    "start": "864690",
    "end": "871170"
  },
  {
    "text": "how a class is implemented. They should just know\nhow to use the class, OK?",
    "start": "871170",
    "end": "876450"
  },
  {
    "text": "So consider the following case. Let's say whoever wrote\nthe Animal class wants to change the implementation.",
    "start": "876450",
    "end": "883662"
  },
  {
    "text": "And they've decided\nthey don't want to call the data attribute\n\"age\" anymore, they want to call it \"years,\" OK?",
    "start": "883662",
    "end": "888900"
  },
  {
    "text": "So when they\ninitialize an animal they say self.years = age.",
    "start": "888900",
    "end": "893970"
  },
  {
    "text": "So an animal still gets\ninitialized by its age. And the age gets passed into a\ndata attribute named \"years,\"",
    "start": "893970",
    "end": "903070"
  },
  {
    "text": "OK? Since I'm implementing\nthis class, I want to have a getter, which\nis going to return self.years.",
    "start": "903070",
    "end": "908930"
  },
  {
    "text": "So I'm not returning\nself.age anymore, because age is no longer the\ndata attribute I'm using.",
    "start": "908930",
    "end": "915990"
  },
  {
    "text": "So with this new\nimplementation, if someone was using this implementation\nand was accessing age directly",
    "start": "915990",
    "end": "923820"
  },
  {
    "text": "as-- was accessing the data\nattribute age directly-- with this new\nimplementation, they'd",
    "start": "923820",
    "end": "929440"
  },
  {
    "text": "actually get an error, right? Because this animal\nthat they created using my old\nimplementation no longer",
    "start": "929440",
    "end": "935560"
  },
  {
    "text": "has an attribute named \"age.\" And so Python's\ngoing to spit out an error saying no attribute\nfound or something like that,",
    "start": "935560",
    "end": "942384"
  },
  {
    "text": "OK? If they were using the\ngetter a.get_age()-- the person who implemented the\nclass re-implemented get_age()",
    "start": "942385",
    "end": "949060"
  },
  {
    "text": "to work correctly, right,\nwith their new data attribute,",
    "start": "949060",
    "end": "955480"
  },
  {
    "text": "years, as opposed to age--\nso if I was using the getter get_age(), I wouldn't\nhave run into the bug, OK?",
    "start": "955480",
    "end": "963670"
  },
  {
    "text": "So things to remember--\nwrite getters and setters",
    "start": "963670",
    "end": "969060"
  },
  {
    "text": "for your classes. And later on in your code,\nuse getters and setters to prevent bugs and to\npromote easy to maintain code.",
    "start": "969060",
    "end": "979750"
  },
  {
    "text": "OK, so information\nhiding is great.",
    "start": "979750",
    "end": "985009"
  },
  {
    "text": "But having said that,\nPython's actually not very great at\ninformation hiding, OK? Python allows you\nto do certain things",
    "start": "985009",
    "end": "991060"
  },
  {
    "text": "that you should never be doing. OK. So the first, we've just seen.",
    "start": "991060",
    "end": "997180"
  },
  {
    "text": "The first is to\naccess data attributes from outside of the class, OK?",
    "start": "997180",
    "end": "1002490"
  },
  {
    "text": "So if I were to\nsay a.age, Python allows me to do that without\nusing a getter and setter.",
    "start": "1002490",
    "end": "1009700"
  },
  {
    "text": "Python also allows you to\nwrite to data attributes from outside the class.",
    "start": "1009700",
    "end": "1016250"
  },
  {
    "text": "So if I implemented\nthe class Animal assuming that age was\na number, an integer,",
    "start": "1016250",
    "end": "1022110"
  },
  {
    "text": "and all of my methods work\nas long as age is an integer, but someone decided to be smart\nand, outside of the class,",
    "start": "1022110",
    "end": "1029260"
  },
  {
    "text": "set age to be infinite\nas a string, that might cause the code to crash, OK?",
    "start": "1029260",
    "end": "1037020"
  },
  {
    "text": "Python allows you to do that. But now you're breaking\nthe fact that age",
    "start": "1037020",
    "end": "1042750"
  },
  {
    "text": "has to be an integer, right? So now the methods\nshould probably be checking the fact that age\nis an integer all the time.",
    "start": "1042750",
    "end": "1048154"
  },
  {
    "text": " The other thing that\nyou're allowed to do is to create data attributes\noutside of the class",
    "start": "1048154",
    "end": "1055890"
  },
  {
    "text": "definition, OK? So if I wanted to create a new\ndata attribute called \"size\" for this particular\ninstance, Python also",
    "start": "1055890",
    "end": "1062370"
  },
  {
    "text": "allows me to do that. And I can set it to\nwhatever I want, OK? So Python allows you\nto do all these things,",
    "start": "1062370",
    "end": "1068380"
  },
  {
    "text": "but it's actually not good\nstyle to do any of them. So just don't do it.",
    "start": "1068380",
    "end": "1076220"
  },
  {
    "text": "All right. So the last thing I want\nto mention-- the last thing about classes before we\ngo on to inheritance--",
    "start": "1076220",
    "end": "1082840"
  },
  {
    "text": "is this idea called\ndefault arguments. And default arguments\nare passed into methods.",
    "start": "1082840",
    "end": "1089011"
  },
  {
    "text": "And since methods\nare functions, you can also pass in different\narguments to functions.",
    "start": "1089011",
    "end": "1094590"
  },
  {
    "text": "So for example, this\nset_name() method had self. And then, this new name is equal\nto this empty string here, OK?",
    "start": "1094590",
    "end": "1102720"
  },
  {
    "text": "We haven't seen this before. But this is called\na default argument.",
    "start": "1102720",
    "end": "1107735"
  },
  {
    "text": " And you can use the\nfunction in one of two ways.",
    "start": "1107735",
    "end": "1113615"
  },
  {
    "text": " The first way is\nso we can create",
    "start": "1113615",
    "end": "1118940"
  },
  {
    "text": "a new instance of an Animal\ntype object with this line here, a = Animal(3).",
    "start": "1118940",
    "end": "1126360"
  },
  {
    "text": "And then we can\nsay a.set_name(). So this calls the setter\nmethod to set the name.",
    "start": "1126360",
    "end": "1132360"
  },
  {
    "text": "And notice, we've\nalways said that you have to put in parameters for\neverything other than self, OK?",
    "start": "1132360",
    "end": "1140270"
  },
  {
    "text": "But here we have no\nparameters passed in. But that's OK, because\nnewname actually",
    "start": "1140270",
    "end": "1147890"
  },
  {
    "text": "has a default argument, OK? So that tells Python, if no\nparameter is passed in for this",
    "start": "1147890",
    "end": "1155490"
  },
  {
    "text": "particular formal parameter,\nthen use whatever is up here by default. So if I haven't\npassed in the parameter",
    "start": "1155490",
    "end": "1163159"
  },
  {
    "text": "a.get_na-- a.set_name(), sorry--\na.sett_name() is going to be setting the name to\nthe empty string,",
    "start": "1163160",
    "end": "1169290"
  },
  {
    "text": "because that's what the\ndefault parameter is. So in the next line, when\nI print a.get_name(), this is just going to\nprint the empty string, OK?",
    "start": "1169290",
    "end": "1176380"
  },
  {
    "text": " If you do want to\npass in a parameter, you can do so as normal.",
    "start": "1176380",
    "end": "1183720"
  },
  {
    "text": "So you can say a =\nAnimal(3), a.set_name(), and then pass in\na parameter here. And then, newname is going to be\nassigned to whatever parameter",
    "start": "1183720",
    "end": "1192195"
  },
  {
    "text": "is passed in like that. Whatever you pass in overrides\nthe default argument,",
    "start": "1192195",
    "end": "1199010"
  },
  {
    "text": "and everything is good. So when I print a.get_name(),\nthis is going to print out the name that you've passed in.",
    "start": "1199010",
    "end": "1205010"
  },
  {
    "text": " Questions about default?",
    "start": "1205010",
    "end": "1210177"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] ",
    "start": "1210177",
    "end": "1216055"
  },
  {
    "text": "ANA BELL: What if you don't\nprovide a default value for-- AUDIENCE: For newname? ANA BELL: For newname? ",
    "start": "1216055",
    "end": "1222560"
  },
  {
    "text": "If you don't provide a\ndefault argument for newname and you do this case\nhere, then that's",
    "start": "1222560",
    "end": "1227600"
  },
  {
    "text": "going to give you an error. So Python's going to\nsay something like, expected one argument, got\nzero, or something like that.",
    "start": "1227600",
    "end": "1233325"
  },
  {
    "text": "Great question.  OK.",
    "start": "1233325",
    "end": "1239900"
  },
  {
    "text": "All right, so let's move on to\nthis idea of hierarchies, OK? So the great thing about\nobject-oriented programming",
    "start": "1239900",
    "end": "1245000"
  },
  {
    "text": "is that it allows us to\nadd layers of abstraction to our code, all right? So we don't need to know how\nvery, very low-level things are",
    "start": "1245000",
    "end": "1252140"
  },
  {
    "text": "implemented in\norder to use them. And we can build up our code\nto be more and more complex",
    "start": "1252140",
    "end": "1259490"
  },
  {
    "text": "as we use up these\ndifferent abstractions. So consider every one of these\nthings on this slide as being",
    "start": "1259490",
    "end": "1268700"
  },
  {
    "text": "a separate object, all right? Every one of these things can be\nconsidered to be an animal, OK?",
    "start": "1268700",
    "end": "1275992"
  },
  {
    "text": " According to our\nimplementation of an animal,",
    "start": "1275993",
    "end": "1281759"
  },
  {
    "text": "the one thing that an\nanimal has is an age, OK? And that's probably true, right? Every one of these\nthings has an age.",
    "start": "1281760",
    "end": "1288860"
  },
  {
    "text": "But now I want to\nbuild up on this and create separate\ngroups, right? And each one of\nthese separate groups",
    "start": "1288860",
    "end": "1295350"
  },
  {
    "text": "that I create on\ntop of Animal is going to have its own\nfunctionality, right? They're going to be a little\nbit more specific, a little more",
    "start": "1295350",
    "end": "1302640"
  },
  {
    "text": "specialized. So I can create these three\ngroups now, a cat, a rabbit, and a person group.",
    "start": "1302640",
    "end": "1310360"
  },
  {
    "text": "And for example-- so\nthey're all animals, right? They all have an age.",
    "start": "1310360",
    "end": "1315750"
  },
  {
    "text": "But for example,\nmaybe a person's going to have a list of friends\nwhereas a cat and a rabbit do not.",
    "start": "1315750",
    "end": "1322660"
  },
  {
    "text": "Maybe a cat has a data attribute\nfor the number of lives they have left, right, whereas a\nperson and a rabbit do not, OK?",
    "start": "1322660",
    "end": "1331690"
  },
  {
    "text": "So you can think of adding\nthese more specialized-- adding functionality to each one\nof these subgroups, OK?",
    "start": "1331690",
    "end": "1339339"
  },
  {
    "text": "So they're going to be\nmore and more specialized, but all of them retaining the\nfact that they are animals. So they all have an\nage, for example.",
    "start": "1339339",
    "end": "1348160"
  },
  {
    "text": "So on top of these, we\ncan add another layer and say that a student is a\nperson and is an animal, OK?",
    "start": "1348160",
    "end": "1356590"
  },
  {
    "text": "But in addition to having an\nage and maybe also having a list of friends, a student\nmight also have a major",
    "start": "1356590",
    "end": "1362430"
  },
  {
    "text": "or-- they're pretty, so\nmaybe-- their favorite subject in school. ",
    "start": "1362430",
    "end": "1372289"
  },
  {
    "text": "So that's the general\nidea of hierarchies, OK? So we can sort of abstract the\nprevious slide into this one",
    "start": "1372290",
    "end": "1382000"
  },
  {
    "text": "and say that we have parent\nclasses and child classes, OK? The Animal class is\nlike our parent class.",
    "start": "1382000",
    "end": "1387889"
  },
  {
    "text": "It's the highest-level class. ",
    "start": "1387890",
    "end": "1393480"
  },
  {
    "text": "Inheriting from\nthe Animal class, we have these child\nclasses or subclasses, OK?",
    "start": "1393480",
    "end": "1399380"
  },
  {
    "text": "Whatever an animal can\ndo, a person can do. Whatever an animal\ncan do, a cat can do. And whatever an animal can do,\na rabbit can do, OK-- that is,",
    "start": "1399380",
    "end": "1406429"
  },
  {
    "text": "have an age and maybe some\nreally basic functionality, OK?",
    "start": "1406430",
    "end": "1411530"
  },
  {
    "text": "But between person,\ncat, and rabbit, they're going to\nbe varying wildly as to the kinds of things\nthat they can do, right?",
    "start": "1411530",
    "end": "1416973"
  },
  {
    "text": "But they can all do\nwhatever Animal can do. So child classes inherit\nall of the data attributes",
    "start": "1416973",
    "end": "1423009"
  },
  {
    "text": "and all of the\nmethods, or behaviors, that their parent's\nclasses have, OK?",
    "start": "1423010",
    "end": "1428610"
  },
  {
    "text": "But child classes can\nadd more information. Like for example, a person\ncan have a list of friends whereas a general\nanimal will not.",
    "start": "1428610",
    "end": "1435030"
  },
  {
    "text": " It can add more behavior.",
    "start": "1435030",
    "end": "1440140"
  },
  {
    "text": "Like, maybe a cat can\nclimb trees whereas people and rabbits cannot.",
    "start": "1440140",
    "end": "1445820"
  },
  {
    "text": "Or you can also\noverride behavior. So in the previous one, we\nhad animal, person, student.",
    "start": "1445820",
    "end": "1451429"
  },
  {
    "text": "So maybe we have, an animal\ndoesn't speak at all, but a person can speak. So that's added\nfunctionality to the person.",
    "start": "1451430",
    "end": "1458420"
  },
  {
    "text": "And maybe a person\ncan only say hello. But then, when we\ntalk to a student, we can override the fact--\noverride the speak() method",
    "start": "1458420",
    "end": "1465590"
  },
  {
    "text": "of a person and say that a\nstudent can say, you know, I have homework, or I need\nsleep, or something like that,",
    "start": "1465590",
    "end": "1471550"
  },
  {
    "text": "OK? So we have the same speak()\nmethod for both person and student, because\nthey can both speak.",
    "start": "1471550",
    "end": "1476870"
  },
  {
    "text": "But student will\noverride the fact that they say hello\nwith something else. ",
    "start": "1476870",
    "end": "1482789"
  },
  {
    "text": "OK, so let's look at some code\nto put this into perspective. So we have this Animal class,\nwhich we've seen before.",
    "start": "1482790",
    "end": "1492290"
  },
  {
    "text": "This is the parent class, OK? It inherits from object,\nwhich means that everything",
    "start": "1492290",
    "end": "1498130"
  },
  {
    "text": "that a basic object can do\nin Python, an animal can do, which is things like\nbinding variables,",
    "start": "1498130",
    "end": "1504000"
  },
  {
    "text": "you know, very\nlow-level things, OK? We've seen the __init__. We've seen the two getters, the\nsetters, and the string method",
    "start": "1504000",
    "end": "1511820"
  },
  {
    "text": "to print an object\nof type Animal. All right, now, let's\ncreate a subclass of Animal.",
    "start": "1511820",
    "end": "1518330"
  },
  {
    "text": "We'll call it Cat, OK? We create a class named Cat.",
    "start": "1518330",
    "end": "1525696"
  },
  {
    "text": "In parentheses, instead\nof putting \"object,\" we now put \"Animal.\" And this tells Python that\nCat's parent class is Animal.",
    "start": "1525697",
    "end": "1534870"
  },
  {
    "text": "So everything that an\nanimal can do, a cat can do. So that includes all of\nthe attributes, which",
    "start": "1534870",
    "end": "1540120"
  },
  {
    "text": "was age and name, and\nall of the methods. So all the getters, the setters,\nthe __str__, the __init__,",
    "start": "1540120",
    "end": "1545490"
  },
  {
    "text": "everything that the animal\nhad, now the cat has-- the Cat class has.",
    "start": "1545490",
    "end": "1551700"
  },
  {
    "text": "In the Cat class, we're going\nto add two more methods though. The first is speak().",
    "start": "1551700",
    "end": "1559190"
  },
  {
    "text": "So speak() is going to be a\nmethod that's going to just",
    "start": "1559190",
    "end": "1564980"
  },
  {
    "text": "take in the self, OK--\nno other parameters. And all it's doing is printing\n\"meow\" to the screen-- very",
    "start": "1564980",
    "end": "1571710"
  },
  {
    "text": "simple, OK? So through this speak(),\nwe've added new functionality to the class.",
    "start": "1571710",
    "end": "1577080"
  },
  {
    "text": "So an animal couldn't speak,\nwhereas a cat says \"meow.\"",
    "start": "1577080",
    "end": "1582690"
  },
  {
    "text": "Additionally, through\nthis __str__ method here, we're overriding the\nanimal __str__, OK?",
    "start": "1582690",
    "end": "1588240"
  },
  {
    "text": "So if we go back to\nthe previous slide, we can see that the\nanimal's __str__ had animal,",
    "start": "1588240",
    "end": "1594210"
  },
  {
    "text": "plus the name, plus the age here\nwhereas the cat's __str__ now",
    "start": "1594210",
    "end": "1600899"
  },
  {
    "text": "says \"cat,\" name,\nand the age, OK? So this is just how I chose\nto implement this, OK?",
    "start": "1600900",
    "end": "1608270"
  },
  {
    "text": "So here I've overridden the\n__str__ method of the Animal class.",
    "start": "1608270",
    "end": "1613690"
  },
  {
    "text": "Notice that this class\ndoesn't have an __init__, and that's OK. Because Python's actually\ngoing to say, well,",
    "start": "1613690",
    "end": "1621070"
  },
  {
    "text": "if there's no __init__ in this\nparticular method-- sorry, in this particular class-- then\nlook to my parents and say,",
    "start": "1621070",
    "end": "1629770"
  },
  {
    "text": "do my parents have\nan __init__, OK? And if so, use that __init__.",
    "start": "1629770",
    "end": "1635540"
  },
  {
    "text": "So that's actually true\nfor any other methods. ",
    "start": "1635540",
    "end": "1640769"
  },
  {
    "text": "So the idea here is, when\nyou have hierarchies, you have a parent class,\nyou have a child class,",
    "start": "1640770",
    "end": "1646799"
  },
  {
    "text": "you could have a child\nclass to that child class, and so on and so on. So you can have multiple\nlevels of inheritance.",
    "start": "1646799",
    "end": "1653930"
  },
  {
    "text": "What happens when you\ncreate an object that is of type something that's\nbeen-- of a type that's",
    "start": "1653930",
    "end": "1660000"
  },
  {
    "text": "the child class of a child\nclass of a child class, right? What happens when you call\na method on that object?",
    "start": "1660000",
    "end": "1667899"
  },
  {
    "text": "Well, Python's are going\nto say, does a method with that name exist in my\ncurrent class definition?",
    "start": "1667900",
    "end": "1673120"
  },
  {
    "text": "And if so, use that. But if not, then,\nlook to my parents. Do my parents know\nhow to do that, right?",
    "start": "1673120",
    "end": "1679060"
  },
  {
    "text": "Do my parents have a method\nfor whatever I want to do? If so, use that.",
    "start": "1679060",
    "end": "1684820"
  },
  {
    "text": "If not, look to their\nparents, and so on and so on. So you're sort of tracing\nback up your ancestry",
    "start": "1684820",
    "end": "1689950"
  },
  {
    "text": "to figure out if you can\ndo this method or not. So let's look at a slightly\nmore complicated example.",
    "start": "1689950",
    "end": "1698270"
  },
  {
    "text": "We have a class named Person. It's going to\ninherit from Animal. ",
    "start": "1698270",
    "end": "1704680"
  },
  {
    "text": "Inside this person, I'm\ngoing to create my own-- I'm going to create\nan __init__ method. And the __init__ method is going\nto do something different than",
    "start": "1704680",
    "end": "1712134"
  },
  {
    "text": "what the animal's\n__init__ method is doing. It's going to take\nin self, as usual. And it's going to take in\ntwo parameters as opposed",
    "start": "1712134",
    "end": "1718294"
  },
  {
    "text": "to one, a name and an age. First thing the __init__\nmethod's doing is it's calling",
    "start": "1718294",
    "end": "1723600"
  },
  {
    "text": "the animal's __init__ method. Why am I doing that? Well, I could theoretically\ninitialize the name",
    "start": "1723600",
    "end": "1733040"
  },
  {
    "text": "and the age data\nattributes that Animal initializes in this method.",
    "start": "1733040",
    "end": "1738570"
  },
  {
    "text": "But I'm using the\nfact that I've already written code that initializes\nthose two data attributes. So why not just use it, OK?",
    "start": "1738570",
    "end": "1745790"
  },
  {
    "text": "So here, this says, I'm going\nto call the class Animal. I'm going to call\nits __init__ method.",
    "start": "1745790",
    "end": "1750800"
  },
  {
    "text": "And I'm going to leave it up to\nyou to-- not you as the class, but I'm talking as the\nprograms is running--",
    "start": "1750800",
    "end": "1758645"
  },
  {
    "text": "I'm going to leave it\nup to you to figure out how to initialize an animal\nwith this particular age",
    "start": "1758645",
    "end": "1764840"
  },
  {
    "text": "and what to name it.  So Python says, yep,\nI know how to do this,",
    "start": "1764840",
    "end": "1771110"
  },
  {
    "text": "so I'm going to go ahead\nand do that for you. So now it says\nperson is an animal. And I've initialized the\nage and the name for you.",
    "start": "1771110",
    "end": "1778760"
  },
  {
    "text": "The next thing I'm doing in the\n__init__ is I'm going to set the name to whatever\nname was passed in, OK?",
    "start": "1778760",
    "end": "1784752"
  },
  {
    "text": "So in the __init__, notice,\nI can do whatever I want, including calling methods.",
    "start": "1784752",
    "end": "1790804"
  },
  {
    "text": "And then, the last\nthing I'm doing here is I'm going to create a new\ndata attribute for Person, which is a list of friends, OK?",
    "start": "1790805",
    "end": "1797899"
  },
  {
    "text": "So an animal didn't\nhave a list of friends, but a person is going to. ",
    "start": "1797899",
    "end": "1804549"
  },
  {
    "text": "The next four methods here\nare-- this one's a getter, so it's going to return\nthe list of friends.",
    "start": "1804550",
    "end": "1809560"
  },
  {
    "text": "This is going to append a\nfriend to the end of my list.",
    "start": "1809560",
    "end": "1814750"
  },
  {
    "text": "I want to make a note that I\nactually didn't write a method to remove friends. So once you get a friend,\nthey're friends for life.",
    "start": "1814750",
    "end": "1821290"
  },
  {
    "text": "But that's OK. The next method here is speak(),\nwhich is going to print \"hello\"",
    "start": "1821290",
    "end": "1827590"
  },
  {
    "text": "to the screen. And the last method\nhere is going to get the age difference\nbetween two people.",
    "start": "1827590",
    "end": "1833180"
  },
  {
    "text": "So that just basically\nsubtracts their age and says it's a five-year age\ndifference, or whatever it is.",
    "start": "1833180",
    "end": "1838730"
  },
  {
    "text": "And down here, I have\nan __str__ method, which I've overridden\nfrom the Animal, which, instead of \"animal: name,\" it's\ngoing to say \"person: name :",
    "start": "1838730",
    "end": "1846630"
  },
  {
    "text": "age,\" OK? ",
    "start": "1846630",
    "end": "1852820"
  },
  {
    "text": "So we can run this code. So that's down here. I have an animal person here.",
    "start": "1852820",
    "end": "1863670"
  },
  {
    "text": " So I'm going to run this code.",
    "start": "1863670",
    "end": "1870850"
  },
  {
    "text": "And what did I do? I created a new person. I gave it a name and an age.",
    "start": "1870850",
    "end": "1876210"
  },
  {
    "text": "I created another person,\na name and an age. And here I've just run\nsome methods on it, which was get_name(),\nget_age(), get_name(),",
    "start": "1876210",
    "end": "1882540"
  },
  {
    "text": "and get_age() for each\nof the two people. So that printed, Jack\nis 30, Jill is 25.",
    "start": "1882540",
    "end": "1889490"
  },
  {
    "text": "If I print p1, this is going\nto use the __str__ method of Person. So it's to print \"person:\",\ntheir name, and then,",
    "start": "1889490",
    "end": "1894830"
  },
  {
    "text": "their age. p1.speak() just says \"hello.\" And then, the age difference\nbetween p1 and p2 is just 5.",
    "start": "1894830",
    "end": "1901940"
  },
  {
    "text": "So that's just subtracting\nand then printing that out to the screen. ",
    "start": "1901940",
    "end": "1909408"
  },
  {
    "text": "OK, so that's my person.  Let's add another class.",
    "start": "1909408",
    "end": "1917040"
  },
  {
    "text": "This class is going\nto be a student, and it's going to be\na subclass of Person.",
    "start": "1917040",
    "end": "1922850"
  },
  {
    "text": "Since it's a subclass\nof Person, it's going to-- a student\nis going inherit all the attributes of a\nperson, and therefore, all the",
    "start": "1922850",
    "end": "1931360"
  },
  {
    "text": "attributes of an animal. The __init__ method of a\nstudent is going to be a little",
    "start": "1931360",
    "end": "1937270"
  },
  {
    "text": "different from\nthe one of Person. We're going to give it a\nname, an age, and a major.",
    "start": "1937270",
    "end": "1942540"
  },
  {
    "text": "Notice we're using\ndefault arguments here. So if I create a student\nwithout giving it a major,",
    "start": "1942540",
    "end": "1947965"
  },
  {
    "text": "the major is going to be\nset to None originally.",
    "start": "1947965",
    "end": "1952990"
  },
  {
    "text": "Once again, this line here,\nPerson. init (self, name, age), tells Python, hey,\nyou already know",
    "start": "1952990",
    "end": "1960429"
  },
  {
    "text": "how to initialize a person for\nme with this name and this age. So can you just do that?",
    "start": "1960430",
    "end": "1966370"
  },
  {
    "text": "And Python says, yes,\nI can do that for you. And so that saves you, maybe,\nlike five lines of code just",
    "start": "1966370",
    "end": "1971844"
  },
  {
    "text": "by calling the __init__ method\nthat you've already written through Person, OK?",
    "start": "1971844",
    "end": "1976870"
  },
  {
    "text": "So Student has been\ninitialized to be a person. And additionally, we're going\nto set another data attribute",
    "start": "1976870",
    "end": "1983140"
  },
  {
    "text": "for the student to be the major. And we're going to set\nthe major to be None.",
    "start": "1983140",
    "end": "1988860"
  },
  {
    "text": "The student is going to get\nthis setter here, this setter method, which is going to\nchange the major to whatever",
    "start": "1988860",
    "end": "1995460"
  },
  {
    "text": "else they want if they\nwant to change it. And then, I'm going to\noverride the speak() method.",
    "start": "1995460",
    "end": "2004910"
  },
  {
    "text": "So the speak method\nfor the person, recall, just said \"hello.\" A student is going to be\na little bit more complex.",
    "start": "2004910",
    "end": "2011179"
  },
  {
    "text": "I'm going to use the\nfact that someone created this random class, OK?",
    "start": "2011180",
    "end": "2016300"
  },
  {
    "text": "So this is where we can\nwrite more interesting code by reusing code that\nother people have written.",
    "start": "2016300",
    "end": "2021580"
  },
  {
    "text": "So someone wrote a\nrandom class that can do cool things\nwith random numbers.",
    "start": "2021580",
    "end": "2027429"
  },
  {
    "text": "So if I want to use\nrandom numbers in my code, I'm going to put this \"import\nrandom\" at the top of my code, which essentially brings in all\nof the methods from the Random",
    "start": "2027430",
    "end": "2034953"
  },
  {
    "text": "class, one of the methods\nbeing this random() method. So random() is a random()\nmethod from the Random class.",
    "start": "2034953",
    "end": "2044840"
  },
  {
    "text": "And this essentially gives\nme a number between 0 and 1, including 0 but not\nincluding 1, OK?",
    "start": "2044840",
    "end": "2051440"
  },
  {
    "text": "So this random number I get\nhere is going to help me write my method for speak(), where\nit's going to-- with 25%",
    "start": "2051440",
    "end": "2058844"
  },
  {
    "text": "probability, it's either going\nto say, \"I have homework,\" \"I need sleep,\" \"I should\neat,\" or \"I'm watching TV,\" OK?",
    "start": "2058844",
    "end": "2064399"
  },
  {
    "text": "So a student is going to say\none of those four things. And the last thing I'm doing\ndown here is overwriting the __str__ method.",
    "start": "2064400",
    "end": "2071449"
  },
  {
    "text": "So let's look at the code. I'm going to comment this part\nout, and uncomment the student,",
    "start": "2071449",
    "end": "2081619"
  },
  {
    "text": "and see what we get.  OK, so here, I am\ncreating the student.",
    "start": "2081620",
    "end": "2089270"
  },
  {
    "text": "I'm creating one student whose\nmajor is CS, name is Alice, and age is 20. s2 is going to be\nanother student-- name--",
    "start": "2089270",
    "end": "2096770"
  },
  {
    "text": "Beth, age-- 18. And the major is going\nto be None, because I didn't pass in any major here.",
    "start": "2096770",
    "end": "2102090"
  },
  {
    "text": "So by default, using\nthe default argument, it's going to be None. If I print s1, s2, that's going\nto print out these two things",
    "start": "2102090",
    "end": "2108590"
  },
  {
    "text": "over here just by whatever\n__str__ method does. ",
    "start": "2108590",
    "end": "2114780"
  },
  {
    "text": "And then I'm going to get\nthe students to speak. And if I run it\nmultiple times, you",
    "start": "2114780",
    "end": "2120780"
  },
  {
    "text": "can see that it's going to print\ndifferent things each time. ",
    "start": "2120780",
    "end": "2126670"
  },
  {
    "text": "So \"I need sleep,\" \"I have\nhomework,\" \"I need sleep,\" \"I have homework,\" yeah. So every time, it's going to\nprint something different.",
    "start": "2126670",
    "end": "2133904"
  },
  {
    "text": " OK, questions about\ninheritance in this example?",
    "start": "2133904",
    "end": "2143180"
  },
  {
    "text": " OK. Last thing we're going to\ntalk about in this class",
    "start": "2143180",
    "end": "2149920"
  },
  {
    "text": "is an idea of-- or\nin this lecture, is the idea of-- a\nclass variable, OK?",
    "start": "2149920",
    "end": "2155320"
  },
  {
    "text": "So to illustrate this, I'm going\nto create yet another subclass of my animal called a rabbit.",
    "start": "2155320",
    "end": "2160350"
  },
  {
    "text": " So class variables-- so so\nfar, we've seen-- sorry,",
    "start": "2160350",
    "end": "2168530"
  },
  {
    "text": "let me back up. So so far, we've seen\ninstance variables, right? So things like self.name,\nself.age, those",
    "start": "2168530",
    "end": "2175776"
  },
  {
    "text": "are all instance variables. So they're variables\nthat are specif-- they are common across all of\nthe instances of the class,",
    "start": "2175776",
    "end": "2182190"
  },
  {
    "text": "right? Every instance of the class\nhas this particular variable. But the value of the\nvariable is going",
    "start": "2182190",
    "end": "2187890"
  },
  {
    "text": "to be different between all\nof the different instances. So class variables are\ngoing to be variables",
    "start": "2187890",
    "end": "2196560"
  },
  {
    "text": "whose values are\nshared between all of the instances in the class. So if one instance of the class\nmodifies this class variable,",
    "start": "2196560",
    "end": "2206434"
  },
  {
    "text": "then, any other\ninstance of the class is going to see\nthe modified value. So it's sort of shared among\nall of the different instances.",
    "start": "2206435",
    "end": "2215020"
  },
  {
    "text": "So we're going to\nuse class variables to keep track of rabbits. ",
    "start": "2215020",
    "end": "2220940"
  },
  {
    "text": "OK, so we're creating\nthis class, Rabbit. tag = 1. We haven't seen something\nlike this before.",
    "start": "2220940",
    "end": "2228970"
  },
  {
    "text": "So tag is our class variable. Class variables are typically\ndefined inside the class",
    "start": "2228970",
    "end": "2235380"
  },
  {
    "text": "definition but outside\nof the __init__.",
    "start": "2235380",
    "end": "2241000"
  },
  {
    "text": "So tag is going to\nbe a class variable, and I'm initializing it to 1.",
    "start": "2241000",
    "end": "2246420"
  },
  {
    "text": "Inside the __init__, this\ntells us how to create a Rabbit object. So I'm going to give it self\nas usual, an age, and then",
    "start": "2246420",
    "end": "2252990"
  },
  {
    "text": "two parents. Don't worry about the\ntwo parents for now.",
    "start": "2252990",
    "end": "2258000"
  },
  {
    "text": "Inside the __init__--\nsorry, inside the __init__-- I'm going to call the __init__\nof the animal just to do less",
    "start": "2258000",
    "end": "2265440"
  },
  {
    "text": "work. Python already knows how to\ninitialize an animal for me, so let's do that.",
    "start": "2265440",
    "end": "2270859"
  },
  {
    "text": "So that's going to set the two\ndata attributes, name and age. I'm going to set\nthe data attributes",
    "start": "2270860",
    "end": "2276420"
  },
  {
    "text": "for parent1,\nparent2 for a rabbit to be whatever's passed in. And then, this is\nwhere I'm going",
    "start": "2276420",
    "end": "2281520"
  },
  {
    "text": "to use this class variable. So I'm creating\nthis data attribute",
    "start": "2281520",
    "end": "2289090"
  },
  {
    "text": "instance variable particular\nto a specific instance called rid, OK?",
    "start": "2289090",
    "end": "2295730"
  },
  {
    "text": "And I'm assigning this instance\nvariable to the class variable.",
    "start": "2295730",
    "end": "2300890"
  },
  {
    "text": "And I access class\nvariables using not self, but the class name-- so\nin this case, rabbit.tag.",
    "start": "2300890",
    "end": "2306755"
  },
  {
    "text": " So initially, tag\nis going to be 1.",
    "start": "2306755",
    "end": "2312290"
  },
  {
    "text": "And then, the __init__ is going\nto increment the tag by 1 here, OK?",
    "start": "2312290",
    "end": "2317960"
  },
  {
    "text": "So that means that,\nfrom now on, if I create any other instances,\nthe other instances are going to be accessing the\nupdated value of tag instead",
    "start": "2317960",
    "end": "2325069"
  },
  {
    "text": "of being 1. So let's do a quick drawing\nto show you what I mean. So let's say I have\nRabbit.tag here, OK?",
    "start": "2325070",
    "end": "2337224"
  },
  {
    "text": " So initially, tag is\ngoing to be 1, OK?",
    "start": "2337224",
    "end": "2345620"
  },
  {
    "text": "And then I'm going to\ncreate a new Rabbit object. So this is as I'm\ncalling the code, OK? So let's say this is a rabbit\nobject-- oh boy, OK-- r1.",
    "start": "2345620",
    "end": "2355290"
  },
  {
    "text": " You know, I actually googled\nhow to draw a rabbit, but that didn't help at all.",
    "start": "2355290",
    "end": "2361090"
  },
  {
    "text": "OK, so r1 is going to be a\nnew rabbit that we create.",
    "start": "2361090",
    "end": "2368620"
  },
  {
    "text": "Initially, what happens is, when\nI first create this new rabbit, it's going to access the\nclass variable, which,",
    "start": "2368620",
    "end": "2378770"
  },
  {
    "text": "it's current value is 1. So when I create the\nrabbit ID-- the rabbit ID,",
    "start": "2378770",
    "end": "2385339"
  },
  {
    "text": "r1.rid-- this is going\nto get the value 1.",
    "start": "2385340",
    "end": "2390345"
  },
  {
    "text": " And according to\nthe code, after I",
    "start": "2390345",
    "end": "2395390"
  },
  {
    "text": "set the rabbit ID\nto whatever tag is, I'm going to increment the tag. So this is going to say,\nOK, now that I've said it,",
    "start": "2395390",
    "end": "2402230"
  },
  {
    "text": "I'm going to go back up here\nand increment the tag to be 2. OK.",
    "start": "2402230",
    "end": "2407970"
  },
  {
    "text": "So let's say I create\nanother Rabbit object, OK? All right, there--\nthat's a sad rabbit, r2.",
    "start": "2407970",
    "end": "2418180"
  },
  {
    "text": "The ID of r2 is\ngoing to be what?",
    "start": "2418180",
    "end": "2424430"
  },
  {
    "text": "Well, according to the way\nwe create a new Rabbit object is it's going to access\nwhatever the value of tag",
    "start": "2424430",
    "end": "2430910"
  },
  {
    "text": "is, which is a class variable. It was changed by the previous\ncreation of my rabbit,",
    "start": "2430910",
    "end": "2436400"
  },
  {
    "text": "so now I'm going to\naccess that, right? So the value is going to be 2. ",
    "start": "2436400",
    "end": "2443322"
  },
  {
    "text": "And according to the\ncode, the next thing I do after I create\nthe instance rid",
    "start": "2443322",
    "end": "2448630"
  },
  {
    "text": "is I'm going to increment tag. So I'm incrementing the\nclass variable to be 3, OK?",
    "start": "2448630",
    "end": "2456560"
  },
  {
    "text": "So notice that all\nof my instances are accessing this\nshared resource,",
    "start": "2456560",
    "end": "2462790"
  },
  {
    "text": "this shared variable called tag. So as I'm creating\nmore and more rabbits, they're all going to be\nincrementing the value of tag,",
    "start": "2462790",
    "end": "2469870"
  },
  {
    "text": "because it's shared among\nall of the instances. And so this value, this\ntag class variable,",
    "start": "2469870",
    "end": "2477470"
  },
  {
    "text": "keeps track of how many\ndifferent instances of a rab-- of how many different\ninstances of rabbits",
    "start": "2477470",
    "end": "2483110"
  },
  {
    "text": "I've created throughout\nmy entire program, OK? So the big idea here is that\nclass variables are shared",
    "start": "2483110",
    "end": "2490260"
  },
  {
    "text": "across all the instances. So they can all modify them. But these rids, right,\nthese instance variables,",
    "start": "2490260",
    "end": "2500850"
  },
  {
    "text": "are only for that\nparticular instance. So r2 can't have access to r1's\nID value, nor could change it.",
    "start": "2500850",
    "end": "2509849"
  },
  {
    "text": "But it won't change it across\nall of the different instances, OK?",
    "start": "2509850",
    "end": "2515202"
  },
  {
    "start": "2515202",
    "end": "2520839"
  },
  {
    "text": "So that's how the __init__\nmethod works of Rabbit, OK?",
    "start": "2520840",
    "end": "2527060"
  },
  {
    "text": "So we have these tags that\nkeep track of how many rabbits we've created. We have a couple of getter--\nwe have some getters here",
    "start": "2527060",
    "end": "2534597"
  },
  {
    "text": "to get all the parents. So now let's add a somewhat\nmore interesting function.",
    "start": "2534597",
    "end": "2540020"
  },
  {
    "text": "Oh, I just want to mention,\nwhen I'm getting the rid, I'm actually using this\ncool zfill() function here,",
    "start": "2540020",
    "end": "2546520"
  },
  {
    "text": "or method, which actually pads\nthe beginning of any number with however many zeros in order\nto get to that number here.",
    "start": "2546520",
    "end": "2554180"
  },
  {
    "text": "So the number 1\nbecomes 001 and so on. So it ensures that I have\nthis nice-looking ID type",
    "start": "2554180",
    "end": "2560510"
  },
  {
    "text": "thing that's always\nthree digits long.  So let's try to work\nwith this Rabbit object.",
    "start": "2560510",
    "end": "2567119"
  },
  {
    "text": "Let's define what happens when\nyou add two rabbits together, OK-- in this class,\nnot in the real world.",
    "start": "2567120",
    "end": "2573730"
  },
  {
    "text": "OK. So if I want to use the plus\noperator between two rabbit",
    "start": "2573730",
    "end": "2579760"
  },
  {
    "text": "instances, I have to implement\nthis __add__ method, OK?",
    "start": "2579760",
    "end": "2587750"
  },
  {
    "text": "So all I'm doing here is I'm\nreturning a new Rabbit object, OK? Whoops, sorry about that.",
    "start": "2587750",
    "end": "2594289"
  },
  {
    "text": "And let's recall the __init__\nmethod of the rabbit, OK? So when I'm returning\na new Rabbit object,",
    "start": "2594290",
    "end": "2600394"
  },
  {
    "text": "I'm returning a new\nRabbit object that's going to have an age of 0. Self-- so the Rabbit object\nI'm calling this method on",
    "start": "2600394",
    "end": "2608180"
  },
  {
    "text": "is going to be the\nparent of the new rabbit. And other is going to be the\nother parent of the new rabbit,",
    "start": "2608180",
    "end": "2616066"
  },
  {
    "text": "OK? So if we look at the\ncode, and I run it,",
    "start": "2616066",
    "end": "2638950"
  },
  {
    "text": "this part here, I'm creating\nthree rabbits, r1, r2, and r3.",
    "start": "2638950",
    "end": "2644710"
  },
  {
    "text": "Notice this class\nvariable is working as expected, because the\nIDs of each of my rabbits",
    "start": "2644710",
    "end": "2650680"
  },
  {
    "text": "increments as I\ncreate more rabbits. So we have 001, 002, 003.",
    "start": "2650680",
    "end": "2657710"
  },
  {
    "text": "If I print r1, and\nr2, and r3-- that was these three lines over\nhere-- the parents of r1 and r2",
    "start": "2657710",
    "end": "2663800"
  },
  {
    "text": "are None, because that's just\nthe default-- yes, the default",
    "start": "2663800",
    "end": "2669260"
  },
  {
    "text": "arguments for creating a rabbit. To add two rabbits together,\nI use the plus operator",
    "start": "2669260",
    "end": "2674300"
  },
  {
    "text": "between two Rabbit objects. And on the right here, I'm\ntesting rabbit addition.",
    "start": "2674300",
    "end": "2680640"
  },
  {
    "text": "And I can print out the\nIDs of all my rabbits. And notice that, when I've\ncreated this new rabbit,",
    "start": "2680640",
    "end": "2686940"
  },
  {
    "text": "r4, the ID of it still\nkept incrementing. So now, the ID of the\nfourth rabbit is 004.",
    "start": "2686940",
    "end": "2695670"
  },
  {
    "text": "And then, when I\nget r4's parents, they are as we want them\nto be, so r1 and r2. ",
    "start": "2695670",
    "end": "2705530"
  },
  {
    "text": "The other thing I want to do\nis to compare two rabbits. So if I want to\ncompare two rabbits,",
    "start": "2705530",
    "end": "2710750"
  },
  {
    "text": "I want to make sure that\ntheir parents are the same. So I can compare the first\nparent of the first rabbit",
    "start": "2710750",
    "end": "2717421"
  },
  {
    "text": "with the first parent\nof the second rabbit and the second parent\nof the first rabbit to the second parent\nof second rabbit",
    "start": "2717421",
    "end": "2723829"
  },
  {
    "text": "or getting the\ncombinations of those two. So that's what these\ntwo Booleans are doing.",
    "start": "2723830",
    "end": "2729470"
  },
  {
    "text": "So these are going\nto tell me-- these are going to be Boolean\nvalues, either True or False.",
    "start": "2729470",
    "end": "2734480"
  },
  {
    "text": "And I'm going to\nreturn either they have the same\nparents of that type or the same parents\ncriss-crossed, OK?",
    "start": "2734480",
    "end": "2741956"
  },
  {
    "text": "So here, notice\nthat I'm actually comparing the IDs of the\nrabbits as opposed to the Rabbit objects directly, OK?",
    "start": "2741956",
    "end": "2749220"
  },
  {
    "text": "So if, instead of\ncomparing the IDs in here, I was comparing the parents\nthemselves, directly,",
    "start": "2749220",
    "end": "2756490"
  },
  {
    "text": "what would end up happening\nis this function, this method, eq(), would get called\nover and over again.",
    "start": "2756490",
    "end": "2762770"
  },
  {
    "text": "Because here, we have\nparents that are rabbits. And at some point, the parents\nof the very, very first rabbits",
    "start": "2762770",
    "end": "2768890"
  },
  {
    "text": "ever created by this\nprogram are None. And so when I try\nto call-- when I",
    "start": "2768890",
    "end": "2774410"
  },
  {
    "text": "try to call the parent one of\nNone, that's going to give me an error, OK, something\nlike an attribute error",
    "start": "2774410",
    "end": "2781730"
  },
  {
    "text": "where None doesn't have\nthis parent attribute, OK? So that's why I'm\ncomparing IDs here, OK?",
    "start": "2781730",
    "end": "2788240"
  },
  {
    "text": "And the code in the\nlecture here shows you some tests about whether\nrabbits have the same parents.",
    "start": "2788240",
    "end": "2796910"
  },
  {
    "text": "And I've created\nnew rabbits here, r3 and r4, the\naddition of those two.",
    "start": "2796910",
    "end": "2803490"
  },
  {
    "text": "And r5 and r6 are going to have\nthe same parents down here-- True-- but r4 and r6 don't, OK?",
    "start": "2803490",
    "end": "2811710"
  },
  {
    "text": "So just to wrap it up,\nobject-oriented programming is the idea of creating\nyour own collections of data",
    "start": "2811710",
    "end": "2817000"
  },
  {
    "text": "where you can organize\nthe information in a very consistent manner. So every single type\nof object that you create of this particular\ntype that you create-- sorry,",
    "start": "2817000",
    "end": "2825270"
  },
  {
    "text": "every object instance\nof a particular type is going to have the\nexact same data attributes and the exact same methods, OK?",
    "start": "2825270",
    "end": "2831870"
  },
  {
    "text": "So this really comes back\nto the idea of decomposition and abstraction in programming.",
    "start": "2831870",
    "end": "2836880"
  },
  {
    "text": "All right, thanks, everyone. ",
    "start": "2836880",
    "end": "2847137"
  }
]