[
  {
    "start": "0",
    "end": "185000"
  },
  {
    "start": "0",
    "end": "15840"
  },
  {
    "text": "PROFESSOR: Well, I hope you\nappreciate that we have inducted you into some real\nmagic, the magic of building",
    "start": "15840",
    "end": "26690"
  },
  {
    "text": "languages, really building\nnew languages. What have we looked at? We've looked at an Escher\npicture language: this",
    "start": "26690",
    "end": "39390"
  },
  {
    "text": "language invented by\nPeter Henderson. We looked at digital\nlogic language.",
    "start": "39390",
    "end": "46260"
  },
  {
    "start": "46260",
    "end": "53260"
  },
  {
    "text": "Let's see. We've looked at the\nquery language. ",
    "start": "53260",
    "end": "59700"
  },
  {
    "text": "And the thing you should realize\nis, even though these were toy examples, they really\nare the kernels of really",
    "start": "59700",
    "end": "66760"
  },
  {
    "text": "useful things. So, for instance, the Escher\npicture language was taken by",
    "start": "66760",
    "end": "72520"
  },
  {
    "text": "Henry Wu, who's a student at\nMIT, and developed into a real language for laying out PC\nboards based just on extending",
    "start": "72520",
    "end": "81840"
  },
  {
    "text": "those structures. And the digital logic language,\nJerry mentioned when he showed it to you, was really\nextended to be used as",
    "start": "81840",
    "end": "88550"
  },
  {
    "text": "the basis for a simulator\nthat was used to design a real computer. And the query language,\nof course, is kind",
    "start": "88550",
    "end": "94900"
  },
  {
    "text": "of the germ of prologue. So we built all of these\nlanguages, they're all based on LISP.",
    "start": "94900",
    "end": "101080"
  },
  {
    "text": " A lot of people ask what\nparticular problems is LISP",
    "start": "101080",
    "end": "108009"
  },
  {
    "text": "good for solving for? The answer is LISP is not good\nfor solving any particular problems. What LISP is good for\nis constructing within it",
    "start": "108010",
    "end": "116340"
  },
  {
    "text": "the right language to solve\nthe problems you want to solve, and that's how you\nshould think about it.",
    "start": "116340",
    "end": "121470"
  },
  {
    "text": "So all of these languages\nwere based on LISP. Now, what's LISP based on?",
    "start": "121470",
    "end": "127270"
  },
  {
    "text": "Where's that come from? Well, we looked at that too. ",
    "start": "127270",
    "end": "132739"
  },
  {
    "text": "We looked at the meta-circular\nevaluator and said well, LISP",
    "start": "132740",
    "end": "143760"
  },
  {
    "text": "is based on LISP. And when we start looking at\nthat, we've got to do some",
    "start": "143760",
    "end": "148910"
  },
  {
    "text": "real magic, right? So what does that mean, right? Why operators, and fixed points,\nand the idea that what",
    "start": "148910",
    "end": "157730"
  },
  {
    "text": "this means is that LISP is\nsomehow the fixed-point equation for this funny set of\nthings which are defined in",
    "start": "157730",
    "end": "164600"
  },
  {
    "text": "terms of themselves. Now, it's real magic. Well, today, for a final piece\nof magic, we're going to make",
    "start": "164600",
    "end": "173000"
  },
  {
    "text": "all the magic go away. ",
    "start": "173000",
    "end": "186430"
  },
  {
    "start": "185000",
    "end": "226000"
  },
  {
    "text": "We already know how\nto do that. The idea is, we're going to\ntake the register machine",
    "start": "186430",
    "end": "191970"
  },
  {
    "text": "architecture and show\nhow to implement LISP on terms of that. And, remember, the idea of the\nregister machine is that",
    "start": "191970",
    "end": "202640"
  },
  {
    "text": "there's a fixed and finite\npart of the machine. There's a finite-state\ncontroller, which does some particular thing with a\nparticular amount of hardware.",
    "start": "202640",
    "end": "210510"
  },
  {
    "text": "There are particular data\npaths: the operation the machine does. And then, in order to implement\nrecursion and",
    "start": "210510",
    "end": "215780"
  },
  {
    "text": "sustain the illusion of\ninfinity, there's some large amount of memory, which\nis the stack.",
    "start": "215780",
    "end": "222060"
  },
  {
    "text": "So, if we implement LISP in\nterms of a register machine,",
    "start": "222060",
    "end": "227280"
  },
  {
    "text": "then everything ought to\nbecome, at this point, completely concrete. All the magic should go away. And, by the end of this talk,\nI want you get the feeling",
    "start": "227280",
    "end": "235140"
  },
  {
    "text": "that, as opposed to this very\nmysterious meta-circular evaluator, that a LISP evaluator\nreally is something",
    "start": "235140",
    "end": "241629"
  },
  {
    "text": "that's concrete enough that\nyou can hold in the palm of your hand. You should be able to\nimagine holding a",
    "start": "241630",
    "end": "246950"
  },
  {
    "text": "LISP interpreter there. All right, how are we\ngoing to do this? We already have all\nthe ingredients.",
    "start": "246950",
    "end": "253959"
  },
  {
    "text": "See, what you learned last time\nfrom Jerry is how to take any particular couple of LISP\nprocedures and hand-translate",
    "start": "253960",
    "end": "263979"
  },
  {
    "text": "them into something that runs\non a register machine. So, to implement all of LISP on\na register machine, all we",
    "start": "263980",
    "end": "270900"
  },
  {
    "text": "have to do is take the\nparticular procedures that are the meta-circular evaluator and\nhand-translate them for a",
    "start": "270900",
    "end": "277450"
  },
  {
    "text": "register machine. And that does all\nof LISP, right? So, in principle, we already\nknow how to do this.",
    "start": "277450",
    "end": "285380"
  },
  {
    "text": "And, indeed, it's going to be\nno different, in kind, from",
    "start": "285380",
    "end": "291640"
  },
  {
    "text": "translating, say, recursive\nfactorial or recursive Fibonacci. It's just bigger and\nthere's more of it.",
    "start": "291640",
    "end": "296840"
  },
  {
    "text": "So it'd just be more details,\nbut nothing really conceptually new. All right, also, when we've done\nthat, and the thing is",
    "start": "296840",
    "end": "303600"
  },
  {
    "text": "completely explicit, and we see\nhow to implement LISP in terms of the actual sequential\nregister operations, that's",
    "start": "303600",
    "end": "310509"
  },
  {
    "text": "going to be our final most\nexplicit model of LISP in this course. And, remember, that's\na progression",
    "start": "310510",
    "end": "316410"
  },
  {
    "text": "through this course. We started out with\nsubstitution, which is sort of like algebra. And then we went to the\nenvironment model, which",
    "start": "316410",
    "end": "322070"
  },
  {
    "text": "talked about the actual\nframes and how they got linked together. And then we made that\nmore concrete in the",
    "start": "322070",
    "end": "328100"
  },
  {
    "text": "meta-circular evaluator. There are things the\nmeta-circular evaluator",
    "start": "328100",
    "end": "333120"
  },
  {
    "text": "doesn't tell us. You should realize that. For instance, it left unanswered\nthe question of how",
    "start": "333120",
    "end": "340419"
  },
  {
    "text": "a procedure, like recursive\nfactorial here , somehow takes",
    "start": "340420",
    "end": "346100"
  },
  {
    "text": "space that grows. On the other hand, a procedure\nwhich also looks syntactically",
    "start": "346100",
    "end": "351160"
  },
  {
    "text": "recursive, called fact-iter,\nsomehow doesn't take space.",
    "start": "351160",
    "end": "356760"
  },
  {
    "text": "We justify that it doesn't need\nto take space by showing the substitution model.",
    "start": "356760",
    "end": "361960"
  },
  {
    "text": "But we didn't really say how\nit happens that the machine manages to do that, that that\nhas to do with the details of",
    "start": "361960",
    "end": "369210"
  },
  {
    "text": "how arguments are passed\nto procedures. And that's the thing we didn't\nsee in the meta-circular",
    "start": "369210",
    "end": "374710"
  },
  {
    "text": "evaluator precisely because the\nway arguments got passed to procedures in this LISP\ndepended on the way arguments",
    "start": "374710",
    "end": "381840"
  },
  {
    "text": "got passed to procedures\nin this LISP.  But, now, that's going to become\nextremely explicit.",
    "start": "381840",
    "end": "390740"
  },
  {
    "start": "390000",
    "end": "592000"
  },
  {
    "text": "OK. Well, before going on to the\nevaluator, let me just give you a sense of what a whole LISP\nsystem looks like so you",
    "start": "390740",
    "end": "397940"
  },
  {
    "text": "can see the parts we're going\nto talk about and the parts we're not going to talk about.",
    "start": "397940",
    "end": "403250"
  },
  {
    "text": "Let's see, over here is a happy\nLISP user, and the LISP",
    "start": "403250",
    "end": "409240"
  },
  {
    "text": "user is talking to something\ncalled the reader. ",
    "start": "409240",
    "end": "420360"
  },
  {
    "text": "The reader's job in life is to\ntake characters from the user",
    "start": "420360",
    "end": "434169"
  },
  {
    "text": "and turn them into data\nstructures in something called a list structure memory.",
    "start": "434170",
    "end": "439210"
  },
  {
    "start": "439210",
    "end": "449783"
  },
  {
    "text": "All right, so the reader is\ngoing to take symbols, parentheses, and A's and B's,\nand ones and threes that you",
    "start": "449783",
    "end": "456599"
  },
  {
    "text": "type in, and turn these into\nactual list structure: pairs, and pointers, and things.",
    "start": "456600",
    "end": "462340"
  },
  {
    "text": "And so, by the time evaluator\nis going, there are no characters in the world. And, of course, in more modern\nlist systems, there's sort of",
    "start": "462340",
    "end": "469480"
  },
  {
    "text": "a big morass here that might sit\nbetween the user and the reader: Windows systems, and top\nlevels, and mice, and all",
    "start": "469480",
    "end": "475389"
  },
  {
    "text": "kinds of things. But conceptually, characters\nare coming in. All right, the reader transforms\nthese into pointers",
    "start": "475390",
    "end": "486240"
  },
  {
    "text": "to stuff in this memory,\nand that's what the evaluator sees, OK?",
    "start": "486240",
    "end": "497090"
  },
  {
    "text": "The evaluator has a\nbunch of helpers. It has all possible primitive\noperators you might want.",
    "start": "497090",
    "end": "503080"
  },
  {
    "text": "So there's a completely separate\nbox, a floating point",
    "start": "503080",
    "end": "509610"
  },
  {
    "text": "unit, or all sorts of\nthings, which do the primitive operators.",
    "start": "509610",
    "end": "515960"
  },
  {
    "text": "And, if you want more special\nprimitives, you build more primitive operators,\nbut they're separate from the evaluator.",
    "start": "515960",
    "end": "522080"
  },
  {
    "text": "The evaluator finally gets an\nanswer and communicates that to the printer.",
    "start": "522080",
    "end": "527400"
  },
  {
    "text": " And now, the printer's job in\nlife is to take this list",
    "start": "527400",
    "end": "532980"
  },
  {
    "text": "structure coming from the\nevaluator, and turn it back into characters, and communicate\nthem to the user",
    "start": "532980",
    "end": "543630"
  },
  {
    "text": "through whatever interface\nthere is.  OK.",
    "start": "543630",
    "end": "548810"
  },
  {
    "text": "Well, today, what we're\ngoing to talk about is this evaluator. The primitive operators have\nnothing particular to do with",
    "start": "548810",
    "end": "554899"
  },
  {
    "text": "LISP, they're however you like\nto implement primitive operations. The reader and printer are\nactually complicated, but",
    "start": "554900",
    "end": "562370"
  },
  {
    "text": "we're not going to\ntalk about them. They sort of have to do with\ndetails of how you might build",
    "start": "562370",
    "end": "567410"
  },
  {
    "text": "up list structure\nfrom characters. So that is a long story,\nbut we're not going to talk about it.",
    "start": "567410",
    "end": "572490"
  },
  {
    "text": "The list structure memory, we'll\ntalk about next time. So, pretty much, except for\nthe details of reading and",
    "start": "572490",
    "end": "579170"
  },
  {
    "text": "printing, the only mystery\nthat's going to be left after you see the evaluator is how\nyou build list structure on",
    "start": "579170",
    "end": "584950"
  },
  {
    "text": "conventional memories. But we'll worry about\nthat next time too.",
    "start": "584950",
    "end": "590579"
  },
  {
    "text": "OK.  Well, let's start talking\nabout the evaluator.",
    "start": "590580",
    "end": "596110"
  },
  {
    "start": "592000",
    "end": "854000"
  },
  {
    "text": "The one that we're going to show\nyou, of course, is not, I think, nothing special\nabout it.",
    "start": "596110",
    "end": "601120"
  },
  {
    "text": "It's just a particular register machine that runs LISP. And it has seven registers,\nand here",
    "start": "601120",
    "end": "608279"
  },
  {
    "text": "are the seven registers. There's a register, called EXP,\nand its job is to hold",
    "start": "608280",
    "end": "616430"
  },
  {
    "text": "the expression to\nbe evaluated. And by that, I mean it's going\nto hold a pointer to someplace",
    "start": "616430",
    "end": "622660"
  },
  {
    "text": "in list structure memory\nthat holds the expression to be evaluated. There's a register, called\nENV, which holds the",
    "start": "622660",
    "end": "629490"
  },
  {
    "text": "environment in which this\nexpression is to be evaluated. And, again, I made a pointer.",
    "start": "629490",
    "end": "634940"
  },
  {
    "text": "The environment is some\ndata structure. There's a register, called\nFUN, which will hold the",
    "start": "634940",
    "end": "641390"
  },
  {
    "text": "procedure to be applied when you\ngo to apply a procedure. A register, called ARGL,\nwhich wants the list",
    "start": "641390",
    "end": "648210"
  },
  {
    "text": "of evaluated arguments. What you can start seeing\nhere is the basic structure of the evaluator. Remember how evaluators work.",
    "start": "648210",
    "end": "654490"
  },
  {
    "text": "There's a piece that takes\nexpressions and environments, and there's a piece that\ntakes functions, or",
    "start": "654490",
    "end": "659880"
  },
  {
    "text": "procedures and arguments. And going back and forth\naround here is",
    "start": "659880",
    "end": "665360"
  },
  {
    "text": "the eval/apply loop. So those are the basic pieces\nof the eval and apply. Then there's some other things,\nthere's continue.",
    "start": "665360",
    "end": "671610"
  },
  {
    "text": "You just saw before how the\ncontinue register is used to implement recursion and\nstack discipline.",
    "start": "671610",
    "end": "679000"
  },
  {
    "text": "There's a register that's going\nto hold the result of some evaluation.",
    "start": "679000",
    "end": "684190"
  },
  {
    "text": "And then, besides that,\nthere's one temporary register, called UNEV, which\ntypically, in the evaluator,",
    "start": "684190",
    "end": "689280"
  },
  {
    "text": "is going to be used to hold\ntemporary pieces of the expression you're working on,\nwhich you haven't gotten",
    "start": "689280",
    "end": "694690"
  },
  {
    "text": "around to evaluate yet, right? So there's my machine: a\nseven-register machine.",
    "start": "694690",
    "end": "700646"
  },
  {
    "text": "And, of course, you might want\nto make a machine with a lot more registers to get better\nperformance, but this is just",
    "start": "700646",
    "end": "706040"
  },
  {
    "text": "a tiny, minimal one. Well, how about the\ndata paths? This machine has a lot of\nspecial operations for LISP.",
    "start": "706040",
    "end": "715100"
  },
  {
    "text": "So, here are some typical\ndata paths.",
    "start": "715100",
    "end": "720120"
  },
  {
    "text": "A typical one might be, oh,\nassign to the VAL register the contents of the EXP register.",
    "start": "720120",
    "end": "726709"
  },
  {
    "text": "In terms of those diagrams you\nsaw, that's a little button on some arrow.",
    "start": "726710",
    "end": "731900"
  },
  {
    "text": "Here's a more complicated one. It says branch, if the thing in\nthe expression register is",
    "start": "731900",
    "end": "738810"
  },
  {
    "text": "a conditional to some label\nhere, called the ev-conditional.",
    "start": "738810",
    "end": "743850"
  },
  {
    "text": "And you can imagine this\nimplemented in a lot of different ways. You might imagine this\nconditional test as a special",
    "start": "743850",
    "end": "748949"
  },
  {
    "text": "purpose sub-routine, and\nconditional might be represented as some data\nabstraction that you don't",
    "start": "748950",
    "end": "754399"
  },
  {
    "text": "care about at this\nlevel of detail. So that might be done\nas a sub-routine. This might be a machine with\nhardware-types, and",
    "start": "754400",
    "end": "761199"
  },
  {
    "text": "conditional might be testing\nsome bits for a particular code. There are all sorts of ways\nthat's beneath the level of",
    "start": "761200",
    "end": "767279"
  },
  {
    "text": "abstraction we're looking at. Another kind of operation, and\nthere are a lot of different",
    "start": "767280",
    "end": "772610"
  },
  {
    "text": "operations assigned to\nEXP, the first clause of what's in EXP. This might be part of processing\na conditional.",
    "start": "772610",
    "end": "779260"
  },
  {
    "text": "And, again, first clause is some\nselector whose details we don't care about.",
    "start": "779260",
    "end": "784470"
  },
  {
    "text": "And you can, again, imagine that\nas a sub-routine which'll do some list operations, or\nyou can imagine that as something that's built directly\ninto hardware.",
    "start": "784470",
    "end": "792170"
  },
  {
    "text": "The reason I keep saying you can\nimagine it built directly into hardware is even though\nthere are a lot of operations,",
    "start": "792170",
    "end": "798360"
  },
  {
    "text": "there are still a fixed\nnumber of them. I forget how many, maybe 150. So, it's plausible to think\nof building these",
    "start": "798360",
    "end": "804360"
  },
  {
    "text": "directly into hardware. Here's a more complicated one. You can see this has to\ndo with looking up",
    "start": "804360",
    "end": "809940"
  },
  {
    "text": "the values of variables. It says assign to the VAL\nregister the result of looking up the variable value of some\nparticular expression, which,",
    "start": "809940",
    "end": "819310"
  },
  {
    "text": "in this case, is supposed\nto be a variable in some environment. And this'll be some operation\nthat searches through the",
    "start": "819310",
    "end": "826649"
  },
  {
    "text": "environment structure, however\nit is represented, and goes and looks up that variable.",
    "start": "826650",
    "end": "832240"
  },
  {
    "text": "And, again, that's below the\nlevel of detail that we're thinking about. This has to do with the details\nof the data structures",
    "start": "832240",
    "end": "838350"
  },
  {
    "text": "for representing environments. But, anyway, there is this fixed\nand finite number of",
    "start": "838350",
    "end": "844410"
  },
  {
    "text": "operations in the register\nmachine.  Well, what's its overall\nstructure?",
    "start": "844410",
    "end": "851720"
  },
  {
    "text": "Those are some typical\noperations. Remember what we have to\ndo, we have to take the",
    "start": "851720",
    "end": "857060"
  },
  {
    "start": "854000",
    "end": "1187000"
  },
  {
    "text": "meta-circular evaluator-- and here's a piece of the\nmeta-circular evaluator.",
    "start": "857060",
    "end": "862890"
  },
  {
    "text": "This is the one using abstract\nsyntax that's in the book.",
    "start": "862890",
    "end": "868310"
  },
  {
    "text": "It's a little bit different\nfrom the one that Jerry shows you.",
    "start": "868310",
    "end": "873500"
  },
  {
    "text": "And the main thing to remember\nabout the evaluator is that it's doing some sort of case\nanalysis on the kinds of",
    "start": "873500",
    "end": "880310"
  },
  {
    "text": "expressions: so if it's either\nself-evaluated, or quoted, or",
    "start": "880310",
    "end": "886120"
  },
  {
    "text": "whatever else. And then, in the general case\nwhere the expression it's",
    "start": "886120",
    "end": "891620"
  },
  {
    "text": "looking at is an application,\nthere's some tricky recursions going on. First of all, eval has to call\nitself both to evaluate the",
    "start": "891620",
    "end": "900730"
  },
  {
    "text": "operator and to evaluate\nall the operands.",
    "start": "900730",
    "end": "905880"
  },
  {
    "text": "So there's this sort of red\nrecursion of values walking down the tree that's really\nthe easy recursion.",
    "start": "905880",
    "end": "912269"
  },
  {
    "text": "That's just a val walking down\nthis tree of expressions. Then, in the evaluator, there's\na hard recursion. There's the red to green.",
    "start": "912270",
    "end": "918199"
  },
  {
    "text": "Eval calls apply.  That's the case where evaluating\na procedure or",
    "start": "918200",
    "end": "926131"
  },
  {
    "text": "argument reduces to applying\nthe procedure to the list of arguments. And then, apply comes\nover here.",
    "start": "926132",
    "end": "931700"
  },
  {
    "text": " Apply takes a procedure and\narguments and, in the general",
    "start": "931700",
    "end": "939270"
  },
  {
    "text": "case where there's a compound\nprocedure, apply goes around and green calls red.",
    "start": "939270",
    "end": "944560"
  },
  {
    "text": "Apply comes around and\ncalls eval again. Eval's the body of the procedure\nin the result of",
    "start": "944560",
    "end": "951329"
  },
  {
    "text": "extending the environment with\nthe parameters of the procedure by binding\nthe arguments.",
    "start": "951330",
    "end": "956605"
  },
  {
    "text": " Except in the primitive case,\nwhere it just calls something else primitive-apply, which\nis not really the",
    "start": "956605",
    "end": "963550"
  },
  {
    "text": "business of the evaluator. So this sort of red to green,\nto red to green, that's the",
    "start": "963550",
    "end": "971630"
  },
  {
    "text": "eval/apply loop, and that's the\nthing that we're going to want to see in the evaluator.",
    "start": "971630",
    "end": "977186"
  },
  {
    "text": " All right. Well, it won't surprise you at\nall that the two big pieces of",
    "start": "977186",
    "end": "982569"
  },
  {
    "text": "this evaluator correspond\nto eval and apply. There's a piece called\neval-dispatch, and a piece",
    "start": "982570",
    "end": "990069"
  },
  {
    "text": "called apply-dispatch. And, before we get into the\ndetails of the code, the way to understand this is to think,\nagain, in terms of",
    "start": "990070",
    "end": "997760"
  },
  {
    "text": "these pieces of the evaluator\nhaving contracts with the rest of the world. What do they do from the outside\nbefore getting into",
    "start": "997760",
    "end": "1004320"
  },
  {
    "text": "the grungy details? Well, the contract for\neval-dispatch--",
    "start": "1004320",
    "end": "1010080"
  },
  {
    "text": "remember, it corresponds\nto eval. It's got to evaluate an\nexpression in an environment. So, in particular, what this\none is going to do,",
    "start": "1010080",
    "end": "1016839"
  },
  {
    "text": "eval-dispatch will assume that,\nwhen you call it, that the expression you\nwant to evaluate is in the EXP register.",
    "start": "1016840",
    "end": "1023640"
  },
  {
    "text": "The environment in which you\nwant the evaluation to take place is in the ENV register.",
    "start": "1023640",
    "end": "1029569"
  },
  {
    "text": "And continue tells you the place\nwhere the machine should go next when the evaluation\nis done. ",
    "start": "1029569",
    "end": "1037439"
  },
  {
    "text": "Eval-dispatch's contract is that\nit'll actually perform that evaluation, and, at the end\nof which, it'll end up at",
    "start": "1037440",
    "end": "1043929"
  },
  {
    "text": "the place specified\nby continue. The result of the evaluation\nwill be in the VAL register.",
    "start": "1043930",
    "end": "1049950"
  },
  {
    "text": "And it just warns you, it makes\nno promises about what happens to the registers.",
    "start": "1049950",
    "end": "1055230"
  },
  {
    "text": "All other registers might\nbe destroyed. So, there's one piece, OK?",
    "start": "1055230",
    "end": "1061790"
  },
  {
    "text": "Together, the pieces,\napply-dispatch that corresponds to apply, it's got\nto apply a procedure to some",
    "start": "1061790",
    "end": "1067650"
  },
  {
    "text": "arguments, so it assumes that\nthis register, ARGL, contains a list of the evaluated\narguments.",
    "start": "1067650",
    "end": "1074540"
  },
  {
    "text": "FUN contains the procedure. Those correspond to the\narguments to the apply procedure in the meta-circular\nevaluator.",
    "start": "1074540",
    "end": "1081055"
  },
  {
    "text": " And apply, in this particular\nevaluator, we're going to use",
    "start": "1081055",
    "end": "1086520"
  },
  {
    "text": "a discipline which says the\nplace the machine should go to next when apply is done is, at\nthe moment apply-dispatch is",
    "start": "1086520",
    "end": "1094480"
  },
  {
    "text": "called at the top of the stack,\nthat's just discipline for the way this particular\nmachine's organized.",
    "start": "1094480",
    "end": "1101840"
  },
  {
    "text": "And now apply's contract\nis given all that. It'll perform the application. The result of that application\nwill end up in VAL.",
    "start": "1101840",
    "end": "1108890"
  },
  {
    "text": "The stack will be popped. And, again, the contents of all\nthe other registers may be destroyed, all right?",
    "start": "1108890",
    "end": "1115110"
  },
  {
    "text": "So that's the basic organization\nof this machine. Let's break for a little bit\nand see if there are any",
    "start": "1115110",
    "end": "1121110"
  },
  {
    "text": "questions, and then we'll\ndo a real example. ",
    "start": "1121110",
    "end": "1187850"
  },
  {
    "start": "1187000",
    "end": "1443000"
  },
  {
    "text": "Well, let's take the register\nmachine now, and actually step through, and really, in real\ndetail, so you see completely",
    "start": "1187850",
    "end": "1197950"
  },
  {
    "text": "concrete how some expressions\nare evaluated, all right?",
    "start": "1197950",
    "end": "1203399"
  },
  {
    "text": "So, let's start with a very\nsimple expression. ",
    "start": "1203400",
    "end": "1209620"
  },
  {
    "text": "Let's evaluate the\nexpression 1. ",
    "start": "1209620",
    "end": "1218880"
  },
  {
    "text": "And we need an environment, so\nlet's imagine that somewhere there's an environment,\nwe'll call it E,0. ",
    "start": "1218880",
    "end": "1230260"
  },
  {
    "text": "And just, since we'll use these\nlater, we obviously",
    "start": "1230260",
    "end": "1236230"
  },
  {
    "text": "don't really need anything\nto evaluate 1. But, just for reference later,\nlet's assume that E,0 has in it an X that's bound to 3 and\na Y that's bound to 4, OK?",
    "start": "1236230",
    "end": "1249140"
  },
  {
    "text": "And now what we're going to do\nis we're going to evaluate 1 in this environment, and so the\nENV register has a pointer",
    "start": "1249140",
    "end": "1259649"
  },
  {
    "text": "to this environment,\nE,0, all right? So let's watch that thing go.",
    "start": "1259650",
    "end": "1265650"
  },
  {
    "text": "What I'm going to do is\nstep through the code. And, let's see, I'll\nbe the controller. And now what I need, since this\ngets rather complicated,",
    "start": "1265650",
    "end": "1272980"
  },
  {
    "text": "is a very little\nexecution unit. So here's the execution\nunit, OK?",
    "start": "1272980",
    "end": "1282623"
  },
  {
    "text": "OK.  OK.",
    "start": "1282624",
    "end": "1288590"
  },
  {
    "text": "All right, now we're\ngoing to start. We're going to start\nthe machine at eval-dispatch, right?",
    "start": "1288590",
    "end": "1293659"
  },
  {
    "text": "That's the beginning of this. Eval-dispatch is going to look\nat the expression in dispatch,",
    "start": "1293660",
    "end": "1299320"
  },
  {
    "text": "just like eval where we look\nat the very first thing. We branch on whether or\nnot this expression is",
    "start": "1299320",
    "end": "1306990"
  },
  {
    "text": "self-evaluating. Self-evaluating is some\nabstraction we put into the machine--",
    "start": "1306990",
    "end": "1312550"
  },
  {
    "text": "it's going to be true\nfor numbers-- to a place called ev-self-eval,\nright? So me, being the controller,\nlooks at ev-self-eval, so",
    "start": "1312550",
    "end": "1320260"
  },
  {
    "text": "we'll go over to there. Ev-self-eval says fine, assign\nto val whatever is in the",
    "start": "1320260",
    "end": "1329050"
  },
  {
    "text": "expression unit, OK?",
    "start": "1329050",
    "end": "1335220"
  },
  {
    "text": "And I have a bug because what I\ndidn't do when I initialized this machine is also say what's\nsupposed to happen when",
    "start": "1335220",
    "end": "1343610"
  },
  {
    "text": "it's done, so I should have\nstarted out the machine with done being in the continue\nregister, OK?",
    "start": "1343610",
    "end": "1352050"
  },
  {
    "text": "So we assign to VAL. And now go to fetch\nof continue, and [? the value changed. ?]",
    "start": "1352050",
    "end": "1358000"
  },
  {
    "text": "OK. OK, let's try something\nharder. Let's reset the machine here,\nand we'll put in the",
    "start": "1358000",
    "end": "1367900"
  },
  {
    "text": "expression register, X, OK?",
    "start": "1367900",
    "end": "1376710"
  },
  {
    "text": "Start again at eval-dispatch. Check, is it self-evaluating? No.",
    "start": "1376710",
    "end": "1382649"
  },
  {
    "text": "Is it a variable? Yes. We go off to ev-variable.",
    "start": "1382650",
    "end": "1388380"
  },
  {
    "text": "It says assign to VAL, look up\nthe variable value in the",
    "start": "1388380",
    "end": "1394700"
  },
  {
    "text": "expression register, OK?",
    "start": "1394700",
    "end": "1401620"
  },
  {
    "text": "Go to fetch of continue. PROFESSOR: Done. ",
    "start": "1401620",
    "end": "1407252"
  },
  {
    "text": "PROFESSOR: OK. All right. Well, that's the basic idea. That's a simple operation\nof the machine.",
    "start": "1407252",
    "end": "1412919"
  },
  {
    "text": "Now, let's actually do something\na little bit more interesting. Let's look at the expression\nthe sum of x and y.",
    "start": "1412920",
    "end": "1429678"
  },
  {
    "text": "OK. And now we'll see how you\nstart unrolling these expression trees, OK?",
    "start": "1429678",
    "end": "1437100"
  },
  {
    "text": "Well, start again at\neval-dispatch, all right? ",
    "start": "1437100",
    "end": "1444610"
  },
  {
    "start": "1443000",
    "end": "1548000"
  },
  {
    "text": "Self-evaluating? No. Variable? No. All the other special forms\nwhich I didn't write down,",
    "start": "1444610",
    "end": "1450270"
  },
  {
    "text": "like quote, and lambda,\nand set, and whatever, it's none of those. It turns out to be an\napplication, so we go off to",
    "start": "1450270",
    "end": "1456520"
  },
  {
    "text": "ev-application, OK? Ev-application, remember what\nit's going to do overall.",
    "start": "1456520",
    "end": "1465580"
  },
  {
    "text": "It is going to evaluate\nthe operator. It's going to evaluate the\narguments, and then it's going",
    "start": "1465580",
    "end": "1472950"
  },
  {
    "text": "to go apply them. So, before we start, since we're\nbeing very literal, we'd",
    "start": "1472950",
    "end": "1478140"
  },
  {
    "text": "better remember that, somewhere\nin this environment, it's linked to another\nenvironment in which plus is",
    "start": "1478140",
    "end": "1486010"
  },
  {
    "text": "bound to the primitive procedure\nplus before we get",
    "start": "1486010",
    "end": "1492380"
  },
  {
    "text": "an unknown variable\nin our machine. OK, so we're at ev-application. ",
    "start": "1492380",
    "end": "1499850"
  },
  {
    "text": "OK, assign to UNEV the operands\nof what's in the",
    "start": "1499850",
    "end": "1505919"
  },
  {
    "text": "expression register, OK? Those are the operands. UNEV's a temporary register\nwhere we're",
    "start": "1505920",
    "end": "1511919"
  },
  {
    "text": "going to save them. PROFESSOR: I'm assigning. PROFESSOR: Assign to\nx the operator.",
    "start": "1511920",
    "end": "1518070"
  },
  {
    "text": "Now, notice we've destroyed that\nexpression in x, but the piece that we need is\nnow in UNEV. OK.",
    "start": "1518070",
    "end": "1525820"
  },
  {
    "text": "Now, we're going to get\nset up to recursively evaluate the operator. Save the continue register\non the stack.",
    "start": "1525820",
    "end": "1531565"
  },
  {
    "text": " Save the environment. ",
    "start": "1531565",
    "end": "1540520"
  },
  {
    "text": "Save UNEV. OK, assign\nto continue a",
    "start": "1540520",
    "end": "1553210"
  },
  {
    "start": "1548000",
    "end": "1711000"
  },
  {
    "text": "label called eval-args. ",
    "start": "1553210",
    "end": "1561399"
  },
  {
    "text": "Now, what have we done? We've set up for a\nrecursive call. We're about to go to\neval-dispatch. We've set up for a recursive\ncall to eval-dispatch.",
    "start": "1561400",
    "end": "1570230"
  },
  {
    "text": "What did we do? We took the things we're going\nto need later, those operands",
    "start": "1570230",
    "end": "1575240"
  },
  {
    "text": "that were in UNEV; the\nenvironment in which we're going to eventually have to,\nmaybe, evaluate those operands; the place we\neventually want to go to,",
    "start": "1575240",
    "end": "1583910"
  },
  {
    "text": "which, in this case, was done;\nwe've saved them on the stack. The reason we saved them\non the stack is because",
    "start": "1583910",
    "end": "1589120"
  },
  {
    "text": "eval-dispatch makes no promises\nabout what registers it may destroy. So all that stuff is\nsaved on the stack.",
    "start": "1589120",
    "end": "1595020"
  },
  {
    "text": "Now, we've set up\neval-dispatch's contract. There's a new expression, which\nis the operator plus; a",
    "start": "1595020",
    "end": "1601220"
  },
  {
    "text": "new environment, although, in\nthis case, it's the same one; and a new place to\ngo to when you're done, which is eval-args.",
    "start": "1601220",
    "end": "1607600"
  },
  {
    "text": "So that's set up. Now, we're going to go\noff to eval-dispatch. Here we are back at\neval-dispatch.",
    "start": "1607600",
    "end": "1613090"
  },
  {
    "text": "It's not self-evaluating. Oh, it's a variable, so\nwe'd better go off to ev-variable, right?",
    "start": "1613090",
    "end": "1620260"
  },
  {
    "text": "Ev-variable is assigned\nto VAL. Look up the variable value\nof the expression, OK?",
    "start": "1620260",
    "end": "1628770"
  },
  {
    "text": "So VAL is the primitive\nprocedure plus, OK? And go to fetch of continue.",
    "start": "1628770",
    "end": "1635020"
  },
  {
    "text": "PROFESSOR: Eval-args. PROFESSOR: Right, which is\nnow eval-args not done. So we come back here at\neval-args, and what do we do?",
    "start": "1635020",
    "end": "1643210"
  },
  {
    "text": "We're going to restore the stuff\nthat we saved, so we restore UNEV. And notice, there,\nit wasn't necessary,",
    "start": "1643210",
    "end": "1651710"
  },
  {
    "text": "although, in general,\nit would be. It might be some arbitrary\nevaluation that happened. We restore ENV. OK, we assign\nto FUN fetch of VAL.",
    "start": "1651710",
    "end": "1671900"
  },
  {
    "start": "1671900",
    "end": "1678620"
  },
  {
    "text": "OK, now, we're going\nto go off and start evaluating some arguments.",
    "start": "1678620",
    "end": "1684340"
  },
  {
    "text": "Well, first thing we'd better\ndo is save FUN because some arbitrary stuff might happen\nin that evaluation.",
    "start": "1684340",
    "end": "1690164"
  },
  {
    "start": "1690165",
    "end": "1695330"
  },
  {
    "text": "We initialize the argument list.\nAssign to argl an empty argument list, and go to\neval-arg-loop, OK?",
    "start": "1695330",
    "end": "1705460"
  },
  {
    "text": "At eval-arg-loop, the idea\nof this is we're going to evaluate the pieces of the\nexpressions that are in UNEV,",
    "start": "1705460",
    "end": "1712620"
  },
  {
    "start": "1711000",
    "end": "1875000"
  },
  {
    "text": "one by one, and move them from\nunevaluated in UNEV to evaluated in the arg list, OK?",
    "start": "1712620",
    "end": "1718090"
  },
  {
    "text": "So we save argl. ",
    "start": "1718090",
    "end": "1723950"
  },
  {
    "text": "We assign to x the first operand\nof the stuff in UNEV.",
    "start": "1723950",
    "end": "1733960"
  },
  {
    "text": "Now, we check and see if that\nwas the last operand. In this case, it is\nnot, all right?",
    "start": "1733960",
    "end": "1739190"
  },
  {
    "text": "So we save the environment. ",
    "start": "1739190",
    "end": "1749170"
  },
  {
    "text": "We save UNEV because those\nare all things we might need later. We're going to need the\nenvironment to do some more",
    "start": "1749170",
    "end": "1754860"
  },
  {
    "text": "evaluations. We're going to need UNEV to look\nat what the rest of those arguments were.",
    "start": "1754860",
    "end": "1760340"
  },
  {
    "text": "We're going to assign continue\na place called accumulate-args, or\naccumulate-arg. ",
    "start": "1760340",
    "end": "1770898"
  },
  {
    "text": "OK, now, we've set up\nfor another call to eval-dispatch, OK?",
    "start": "1770898",
    "end": "1776810"
  },
  {
    "text": "All right, now, let me\nshort-circuit this so we don't go through the details\nof eval-dispatch. Eval-dispatch's contract says\nI'm going to end up, the world",
    "start": "1776810",
    "end": "1785549"
  },
  {
    "text": "will end up, with the value of\nevaluating this expression in this environment in\nthe VAL register, and I'll end up there.",
    "start": "1785550",
    "end": "1791320"
  },
  {
    "text": "So we short-circuit all of this,\nand a 3 ends up in VAL.",
    "start": "1791320",
    "end": "1798009"
  },
  {
    "text": "And, when we return from\neval-dispatch, we're going to return to accumulate-arg. PROFESSOR: Accumulate-arg.",
    "start": "1798010",
    "end": "1803554"
  },
  {
    "text": "PROFESSOR: With 3 in the\nVAL register, OK?",
    "start": "1803555",
    "end": "1808720"
  },
  {
    "text": "So that short-circuited\nthat evaluation. Now, what do we do? We're going to go back and\nlook at the rest of the arguments, so we restore\nUNEV. We restore",
    "start": "1808720",
    "end": "1818580"
  },
  {
    "text": "ENV. We restore argl.",
    "start": "1818580",
    "end": "1828649"
  },
  {
    "text": "One thing. PROFESSOR: Oops! Parity error. [LAUGHTER] PROFESSOR: Restore argl.",
    "start": "1828650",
    "end": "1834904"
  },
  {
    "start": "1834905",
    "end": "1841650"
  },
  {
    "text": "PROFESSOR: OK.  OK, we assign to argl consing on\nfetch of the value register",
    "start": "1841650",
    "end": "1851880"
  },
  {
    "text": "to what's in argl. ",
    "start": "1851880",
    "end": "1858985"
  },
  {
    "text": "OK, we assign to UNEV the rest\nof the operands in fetch of",
    "start": "1858985",
    "end": "1864049"
  },
  {
    "text": "UNEV, and we go back\nto eval-arg-loop.",
    "start": "1864050",
    "end": "1871516"
  },
  {
    "text": "PROFESSOR: Eval-arg-loop. PROFESSOR: OK.  Now, we're about to do the next\nargument, so the first",
    "start": "1871516",
    "end": "1878090"
  },
  {
    "start": "1875000",
    "end": "1910000"
  },
  {
    "text": "thing we do is save argl. ",
    "start": "1878090",
    "end": "1885400"
  },
  {
    "text": "OK, we assign to x the first\noperand of fetch of UNEV. OK,",
    "start": "1885400",
    "end": "1895060"
  },
  {
    "text": "we test and see if that's\nthe last operand. In this case, it is, so we're\ngoing to go to a special place",
    "start": "1895060",
    "end": "1900320"
  },
  {
    "text": "that says evaluate the last\nargument because, notice, after evaluating the argument,\nwe don't need the",
    "start": "1900320",
    "end": "1905600"
  },
  {
    "text": "environment any more. That's going to be\nthe difference. So here, at eval-last-arg,\nwhich is assigned to",
    "start": "1905600",
    "end": "1913090"
  },
  {
    "start": "1910000",
    "end": "1945000"
  },
  {
    "text": "accumulate-last-arg, now,\nwe're set up again for",
    "start": "1913090",
    "end": "1926220"
  },
  {
    "text": "eval-dispatch. We've got a place to go\nto when we're done. We've got an expression. We've got an environment.",
    "start": "1926220",
    "end": "1931330"
  },
  {
    "text": "OK, so we'll short-circuit the\ncall to eval-dispatch. And what'll happen is there's\na y there, it's 4 in that",
    "start": "1931330",
    "end": "1938090"
  },
  {
    "text": "environment, so VAL will\nend up with 4 in it. And, then, we're going to end up\nat accumulate-last-arg, OK?",
    "start": "1938090",
    "end": "1945450"
  },
  {
    "start": "1945000",
    "end": "2013000"
  },
  {
    "text": "So, at accumulate-last-arg,\nwe restore argl. ",
    "start": "1945450",
    "end": "1961490"
  },
  {
    "text": "We assign to argl cons of fetch\nof the new value onto it, so we cons a 4 onto that.",
    "start": "1961490",
    "end": "1969850"
  },
  {
    "text": "We restore what was saved in\nthe function register. And notice, in this case, it had\nnot been destroyed, but,",
    "start": "1969850",
    "end": "1976590"
  },
  {
    "text": "in general, it will be. And now, we're ready to go off\nto apply-dispatch, all right?",
    "start": "1976590",
    "end": "1982850"
  },
  {
    "text": "So we've just gone\nthrough the eval. We evaluated the argument, the\noperator, and the arguments,",
    "start": "1982850",
    "end": "1987980"
  },
  {
    "text": "and now, we're about\nto apply them. So we come off to apply-dispatch\nhere, OK?",
    "start": "1987980",
    "end": "1997481"
  },
  {
    "text": "We come off to apply-dispatch,\nand we're going to check whether it's a primitive or\na compound procedure.",
    "start": "1997481",
    "end": "2003450"
  },
  {
    "text": "PROFESSOR: Yes. PROFESSOR: All right. So, in this case, it's a\nprimitive procedure, and we go off to primitive-apply.",
    "start": "2003450",
    "end": "2009790"
  },
  {
    "text": "So we go off to primitive-apply,\nand it says assign to VAL the result of\napplying primitive procedure",
    "start": "2009790",
    "end": "2018360"
  },
  {
    "start": "2013000",
    "end": "2320000"
  },
  {
    "text": "of the function to the\nargument list. PROFESSOR: I don't\nknow how to add. I'm just an execution unit.",
    "start": "2018360",
    "end": "2023995"
  },
  {
    "text": "PROFESSOR: Well, I don't\nknow how to add either. I'm just the evaluator, so we\nneed a primitive operator. Let's see, so the primitive\noperator, what's the",
    "start": "2023995",
    "end": "2031290"
  },
  {
    "text": "sum of 3 and 4? AUDIENCE: 7. PROFESSOR: OK, 7. PROFESSOR: Thank you. ",
    "start": "2031290",
    "end": "2038837"
  },
  {
    "text": "PROFESSOR: Now, we restore\ncontinue, and we go to fetch",
    "start": "2038837",
    "end": "2052330"
  },
  {
    "text": "of continue. PROFESSOR: Done. PROFESSOR: OK. Well, that was in as much detail\nas you will ever see.",
    "start": "2052330",
    "end": "2058658"
  },
  {
    "text": "We'll never do it in as\nmuch detail again. One very important thing to\nnotice is that we just",
    "start": "2058659",
    "end": "2065780"
  },
  {
    "text": "executed a recursive\nprocedure, right? This whole thing, we used\na stack and the",
    "start": "2065780",
    "end": "2071500"
  },
  {
    "text": "evaluator was recursive. A lot of people think the reason\nthat you need a stack and recursion in an evaluator\nis because you might be",
    "start": "2071500",
    "end": "2079090"
  },
  {
    "text": "evaluating recursive\nprocedures like factorial or Fibonacci. It's not true. So you notice we did recursion\nhere, and all we evaluated was",
    "start": "2079090",
    "end": "2086109"
  },
  {
    "text": "plus X, Y, all right? The reason that you need\nrecursion in the evaluator is",
    "start": "2086110",
    "end": "2091219"
  },
  {
    "text": "because the evaluation\nprocess, itself, is recursive, all right? It's not because the procedure\nthat you might be evaluating",
    "start": "2091219",
    "end": "2097760"
  },
  {
    "text": "in LISP is a recursive\nprocedure. So that's an important\nthing that people get confused about a lot.",
    "start": "2097760",
    "end": "2103009"
  },
  {
    "text": "The other thing to notice is\nthat, when we're done here, we're really done. Not only are we at done, but\nthere's no accumulated stuff",
    "start": "2103010",
    "end": "2112600"
  },
  {
    "text": "on the stack, right? The machine is back to its\ninitial state, all right? So that's part of what\nit means to be done.",
    "start": "2112600",
    "end": "2119829"
  },
  {
    "text": "Another way to say that is the\nevaluation process has reduced",
    "start": "2119830",
    "end": "2126410"
  },
  {
    "text": "the expression, plus X, Y,\nto the value here, 7.",
    "start": "2126410",
    "end": "2133460"
  },
  {
    "text": "And by reduced, I mean a\nvery particular thing. It means that there's nothing\nleft on the stack. The machine is now in the same\nstate, except there's",
    "start": "2133460",
    "end": "2141480"
  },
  {
    "text": "something in the\nvalue register. It's not part of a sub-problem\nof anything. There's nothing to go back to. OK. Let's break.",
    "start": "2141480",
    "end": "2147690"
  },
  {
    "text": " Question? AUDIENCE: The question here, in\nthe stack, is because the",
    "start": "2147690",
    "end": "2154800"
  },
  {
    "text": "data may be recursive. You may have embedded\nexpressions, for instance. PROFESSOR: Yes, because you\nmight have embedded",
    "start": "2154800",
    "end": "2161490"
  },
  {
    "text": "expressions. But, again, don't confuse that\nwith what people sometimes mean by the data may be\nrecursive, which is to say you",
    "start": "2161490",
    "end": "2168660"
  },
  {
    "text": "have these list-structured,\nrecursive data list operations. That has nothing\nto do with it.",
    "start": "2168660",
    "end": "2173980"
  },
  {
    "text": "It's simply that the\nexpressions contain sub-expressions. Yeah?",
    "start": "2173980",
    "end": "2179618"
  },
  {
    "text": "AUDIENCE: Why is it that the\norder of the arguments in the arg list got reversed? PROFESSOR: Ah! Yes, I should've\nmentioned that.",
    "start": "2179618",
    "end": "2187260"
  },
  {
    "text": "Here, the reason the\norder is reversed-- ",
    "start": "2187260",
    "end": "2192506"
  },
  {
    "text": "it's a question of what\nyou mean by reversed. I believe it was Newton.",
    "start": "2192507",
    "end": "2200624"
  },
  {
    "text": "In the very early part of\noptics, people realized that, when you look through the lens\nof your eye, the image was",
    "start": "2200624",
    "end": "2206100"
  },
  {
    "text": "up-side down. And there was a lot of argument\nabout why that didn't mean you saw things\nup-side down.",
    "start": "2206100",
    "end": "2211279"
  },
  {
    "text": "So it's sort of the\nsame issue. Reversed from what? So we just need some\nconvention.",
    "start": "2211280",
    "end": "2217940"
  },
  {
    "text": "The reason that they're coming\nat 4, 3 is because we're taking UNEV and consing\nthe result onto argl.",
    "start": "2217940",
    "end": "2224520"
  },
  {
    "text": "So you have to realize you've\nmade that convention. The place that you have\nto realize that--",
    "start": "2224520",
    "end": "2230099"
  },
  {
    "text": "well, there's actually\ntwo places. One is in\napply-primitive-operator, which has to realize that the\narguments to primitives go in,",
    "start": "2230100",
    "end": "2236609"
  },
  {
    "text": "in the opposite order from the\nway you're writing them down. And the other one is, we'll see\nlater when you actually go",
    "start": "2236610",
    "end": "2241760"
  },
  {
    "text": "to bind a function's parameters,\nyou should realize the arguments are going to\ncome in from the opposite order of the variables to which\nyou're binding them.",
    "start": "2241760",
    "end": "2248869"
  },
  {
    "text": "So, if you just keep track of\nthat, there's no problem. Also, this is completely\narbitrary because, if we'd",
    "start": "2248870",
    "end": "2254560"
  },
  {
    "text": "done, say, an iteration through\na vector assigning them, they might come out\nin the other order, OK?",
    "start": "2254560",
    "end": "2260730"
  },
  {
    "text": "So it's just a convention of\nthe way this particular evaluator works. All right, let's take a break.",
    "start": "2260730",
    "end": "2266335"
  },
  {
    "start": "2266335",
    "end": "2321839"
  },
  {
    "start": "2320000",
    "end": "2341000"
  },
  {
    "text": "We just saw evaluating an\nexpression and, of course, that was very simple one.",
    "start": "2321840",
    "end": "2326950"
  },
  {
    "text": "But, in essence, it would be\nno different if it was some big nested expression, so there\nwould just be deeper",
    "start": "2326950",
    "end": "2333370"
  },
  {
    "text": "recursion on the stack. But what I want to do now is\nshow you the last piece. I want to walk you around this\neval and apply loop, right?",
    "start": "2333370",
    "end": "2341299"
  },
  {
    "start": "2341000",
    "end": "2501000"
  },
  {
    "text": "That's the thing we haven't\nseen, really. We haven't seen any compound\nprocedures where applying a",
    "start": "2341300",
    "end": "2349070"
  },
  {
    "text": "procedure reduces to evaluating\nthe body of the procedure, so let's just\nsuppose we had this.",
    "start": "2349070",
    "end": "2355810"
  },
  {
    "text": "Suppose we were looking at the\nprocedure define F of A and B",
    "start": "2355810",
    "end": "2369340"
  },
  {
    "text": "to be the sum of A and B. So, as\nwe typed in that procedure",
    "start": "2369340",
    "end": "2376520"
  },
  {
    "text": "previously, and now we're going\nto evaluate F of X and Y, again, in this environment,\nE,0, where X is bound to 3 and",
    "start": "2376520",
    "end": "2386030"
  },
  {
    "text": "Y is bound to 4.  When the defined is executed,\nremember, there's a lambda",
    "start": "2386030",
    "end": "2393120"
  },
  {
    "text": "here, and lambdas create\nprocedures. And, basically, what will happen\nis, in E,0, we'll end",
    "start": "2393120",
    "end": "2401430"
  },
  {
    "text": "up with a binding for F, which\nwill say F is a procedure, and",
    "start": "2401430",
    "end": "2407440"
  },
  {
    "text": "its args are A and B, and\nits body is plus a,b.",
    "start": "2407440",
    "end": "2418180"
  },
  {
    "text": "So that's what the environment\nwould have looked like had we made that definition.",
    "start": "2418180",
    "end": "2424400"
  },
  {
    "text": "Then, when we go to evaluate F\nof X and Y, we'll go through exactly the same process\nthat we did before.",
    "start": "2424400",
    "end": "2431809"
  },
  {
    "text": "It's even the same expression. The only difference is that F,\ninstead of having primitive plus in it, will have\nthis thing.",
    "start": "2431810",
    "end": "2441040"
  },
  {
    "text": "And so we'll go through exactly\nthe same process, except this time, when we end\nup at apply-dispatch, the",
    "start": "2441040",
    "end": "2448130"
  },
  {
    "text": "function register, instead of\nhaving primitive plus, will have a thing that will represent\nit saying procedure,",
    "start": "2448130",
    "end": "2454300"
  },
  {
    "text": "where the args are A and B,\nand the body is plus A, B.",
    "start": "2454300",
    "end": "2468040"
  },
  {
    "text": "And, again, what I mean, by\nits ENV, I mean there's a pointer to it, so don't worry\nthat I'm writing a lot of stuff there.",
    "start": "2468040",
    "end": "2473280"
  },
  {
    "text": "There's a pointer to this\nprocedure data structure. OK, so, we're in exactly\nthe same situation.",
    "start": "2473280",
    "end": "2480960"
  },
  {
    "text": "We get to apply-dispatch,\nso, here, we come to apply-dispatch.",
    "start": "2480960",
    "end": "2486480"
  },
  {
    "text": "Last time, we branched off\nto a primitive procedure. Here, it says oh, we now have a\ncompound procedure, so we're",
    "start": "2486480",
    "end": "2494900"
  },
  {
    "text": "going to go off to\ncompound-apply.  Now, what's compound-apply?",
    "start": "2494900",
    "end": "2499910"
  },
  {
    "text": " Well, remember what the\nmeta-circular evaluator did?",
    "start": "2499910",
    "end": "2505090"
  },
  {
    "start": "2501000",
    "end": "3168000"
  },
  {
    "text": "Compound-apply said we're going\nto evaluate the body of",
    "start": "2505090",
    "end": "2510790"
  },
  {
    "text": "the procedure in some\nnew environment. Where does that new environment\ncome from?",
    "start": "2510790",
    "end": "2516730"
  },
  {
    "text": "We take the environment that\nwas packaged with the procedure, we bind the\nparameters of the procedure to",
    "start": "2516730",
    "end": "2526080"
  },
  {
    "text": "the arguments that we're passing\nin, and use that as a new frame to extend the\nprocedure environment.",
    "start": "2526080",
    "end": "2534990"
  },
  {
    "text": "And that's the environment\nin which we evaluate the procedure body, right?",
    "start": "2534990",
    "end": "2541630"
  },
  {
    "text": "That's going around the\napply/eval loop. That's apply coming back to\ncall eval, all right?",
    "start": "2541630",
    "end": "2547988"
  },
  {
    "text": " OK. So, now, that's all we have\nto do in compound-apply.",
    "start": "2547988",
    "end": "2556950"
  },
  {
    "text": "What are we going to do? We're going to manufacture\na new environment. ",
    "start": "2556950",
    "end": "2563720"
  },
  {
    "text": "And we're going to manufacture\na new environment, let's see, that we'll call E,1. ",
    "start": "2563720",
    "end": "2573100"
  },
  {
    "text": "E,1 is going to be some\nenvironment where the parameters of the procedure,\nwhere A is bound to 3 and B is",
    "start": "2573100",
    "end": "2582460"
  },
  {
    "text": "bound to 4, and it's linked\nto E,0 because that's where f is defined.",
    "start": "2582460",
    "end": "2589270"
  },
  {
    "text": "And, in this environment, we're\ngoing to evaluate the body of the procedure. So let's look at that,\nall right? ",
    "start": "2589270",
    "end": "2596730"
  },
  {
    "text": "All right, here we are at\ncompound-apply, which says assign to the expression\nregister the body of the",
    "start": "2596730",
    "end": "2605560"
  },
  {
    "text": "procedure that's in the\nfunction register. So I assign to the expression\nregister the",
    "start": "2605560",
    "end": "2611470"
  },
  {
    "text": "procedure body, OK?",
    "start": "2611470",
    "end": "2622710"
  },
  {
    "text": "That's going to be evaluated\nin an environment which is formed by making some bindings\nusing information determined",
    "start": "2622710",
    "end": "2633040"
  },
  {
    "text": "by the procedure-- that's what's in FUN-- and the argument list. And let's not worry about\nexactly what that does, but",
    "start": "2633040",
    "end": "2640230"
  },
  {
    "text": "you can see the information's\nthere. So make bindings will say oh,\nthe procedure, itself, had an",
    "start": "2640230",
    "end": "2646420"
  },
  {
    "text": "environment attached to it. I didn't write that\nquite here. I should've said in environment\nbecause every",
    "start": "2646420",
    "end": "2651810"
  },
  {
    "text": "procedure gets built with\nan environment. So, from that environment, it\nknows what the procedure's",
    "start": "2651810",
    "end": "2657400"
  },
  {
    "text": "definition environment is. It knows what the\narguments are. It looks at argl, and\nthen you see a",
    "start": "2657400",
    "end": "2663060"
  },
  {
    "text": "reversal convention here. It just has to know that argl\nis reversed, and it builds this frame, E,1.",
    "start": "2663060",
    "end": "2669990"
  },
  {
    "text": "All right, so, let's assume that\nthat's what make bindings returns, so it assigns to\nENV this thing, E,1.",
    "start": "2669990",
    "end": "2675779"
  },
  {
    "start": "2675780",
    "end": "2681490"
  },
  {
    "text": "All right, the next thing it\nsays is restore continue.",
    "start": "2681490",
    "end": "2686890"
  },
  {
    "text": "Remember what continue\nwas here? It got put up in the\nlast segment.",
    "start": "2686890",
    "end": "2692240"
  },
  {
    "text": "Continue got stored. That was the original done,\nwhich said what are you going to do after you're done with\nthis particular application?",
    "start": "2692240",
    "end": "2699920"
  },
  {
    "text": "It was one of the very first\nthings that happened when we evaluated the application. And now, finally, we're going\nto restore continue.",
    "start": "2699920",
    "end": "2706859"
  },
  {
    "text": "Remember apply-dispatch's\ncontract. It assumes that where it should\ngo to next was on the stack, and there it\nwas on the stack.",
    "start": "2706860",
    "end": "2713590"
  },
  {
    "text": "Continue has done, and now\nwe're going to go back to",
    "start": "2713590",
    "end": "2719310"
  },
  {
    "text": "eval-dispatch. We're set up again. We have an expression,\nan environment, and a place to go to.",
    "start": "2719310",
    "end": "2725511"
  },
  {
    "text": "We're not going to go through\nthat because it's sort of the same expression. ",
    "start": "2725511",
    "end": "2735167"
  },
  {
    "text": "OK, but the thing, again, to\nnotice is, at this point, we have reduced the original\nexpression, F,X,Y, right?",
    "start": "2735167",
    "end": "2744830"
  },
  {
    "text": "We've reduced evaluating F,X,Y\nin environment E,0 to evaluate",
    "start": "2744830",
    "end": "2750150"
  },
  {
    "text": "plus A, B in E,1. And notice, nothing's\non the stack, right?",
    "start": "2750150",
    "end": "2755720"
  },
  {
    "text": "It's a reduction. At this point, the machine does\nnot contain, as part of its state, the fact that it's\nin the middle of evaluating",
    "start": "2755720",
    "end": "2763790"
  },
  {
    "text": "some procedure called f,\nthat's gone, right? There's no accumulated\nstate, OK?",
    "start": "2763790",
    "end": "2773072"
  },
  {
    "text": "Again, that's a very\nimportant idea. That's the meaning of, when\nwe used to write in the substitution model, this\nexpression reduces to that",
    "start": "2773072",
    "end": "2780430"
  },
  {
    "text": "expression. And you don't have to\nremember anything. And here, you see the meaning\nof reduction. At this point, there is\nnothing on the stack.",
    "start": "2780430",
    "end": "2786160"
  },
  {
    "start": "2786160",
    "end": "2791589"
  },
  {
    "text": "See, that has very important\nconsequences. Let's go back and look\nat iterative",
    "start": "2791590",
    "end": "2797180"
  },
  {
    "text": "factorial, all right? Remember, this was some sort\nof loop and doing iter.",
    "start": "2797180",
    "end": "2805130"
  },
  {
    "text": "And we kept saying that's an\niterative procedure, right? ",
    "start": "2805130",
    "end": "2812569"
  },
  {
    "text": "And what we wrote, remember,\nare things like, we said,",
    "start": "2812570",
    "end": "2824660"
  },
  {
    "text": "fact-iter of 5.",
    "start": "2824660",
    "end": "2832359"
  },
  {
    "text": "We wrote things like reduces\nto iter of 1, and 1, and 5,",
    "start": "2832360",
    "end": "2839030"
  },
  {
    "text": "which reduces to iter of 1, and\n2, and 5, and so on, and",
    "start": "2839030",
    "end": "2846550"
  },
  {
    "text": "so on, and so on. And we kept saying well, look,\nyou don't have to build up any storage to do that.",
    "start": "2846550",
    "end": "2851720"
  },
  {
    "text": "And we waved our hands, and said\nin principle, there's no storage needed. Now, you see no storage\nneeded. Each of these is a real\nreduction, right?",
    "start": "2851720",
    "end": "2859089"
  },
  {
    "start": "2859090",
    "end": "2869280"
  },
  {
    "text": "As you walk through these\nexpressions, what you'll see are these expressions on the\nstack in some particular",
    "start": "2869280",
    "end": "2874810"
  },
  {
    "text": "environment, and then these\nexpressions in the EXP",
    "start": "2874810",
    "end": "2880045"
  },
  {
    "text": "register in some particular\nenvironment. And, at each point, there'll be\nno accumulated stuff on the stack because each one's\na real reduction, OK?",
    "start": "2880045",
    "end": "2889135"
  },
  {
    "text": "All right, so, for example,\njust to go through it in a little bit more care, if I start\nout with an expression",
    "start": "2889135",
    "end": "2895510"
  },
  {
    "text": "that says something like, oh,\nsay, fact-iter of 5 in some",
    "start": "2895510",
    "end": "2913520"
  },
  {
    "text": "environment that will, at some\npoint, create an environment",
    "start": "2913520",
    "end": "2926810"
  },
  {
    "text": "in which n is down to 5.  Let's call that--",
    "start": "2926810",
    "end": "2932590"
  },
  {
    "text": " And, at some point, the machine\nwill reduce this whole",
    "start": "2932590",
    "end": "2942120"
  },
  {
    "text": "thing to a thing that says\nthat's really iter of 1, and",
    "start": "2942120",
    "end": "2948780"
  },
  {
    "text": "1, and n, evaluated in this\nenvironment, E,1 with nothing",
    "start": "2948780",
    "end": "2956550"
  },
  {
    "text": "on the stack. See, at this moment, the machine\nis not remembering that evaluating this\nexpression, iter--",
    "start": "2956550",
    "end": "2962500"
  },
  {
    "text": " which is the loop-- is\npart of this thing called iterative factorial.",
    "start": "2962500",
    "end": "2969366"
  },
  {
    "text": "It's not remembering that. It's just reducing the\nexpression to that, right? If we look again at the body of\niterative factorial, this",
    "start": "2969366",
    "end": "2978390"
  },
  {
    "text": "expression has reduced\nto that expression. Oh, I shouldn't have\nthe n there.",
    "start": "2978390",
    "end": "2984060"
  },
  {
    "text": " It's a slightly different\nconvention from the slide to the program, OK?",
    "start": "2984060",
    "end": "2993340"
  },
  {
    "text": "And, then, what's the\nbody of iter? Well, iter's going to be an it,\nand I won't go through the",
    "start": "2993340",
    "end": "2999460"
  },
  {
    "text": "details of if. It'll evaluate the predicate. In this case, it'll be false. And this iter will now reduce\nto the expression iter of",
    "start": "2999460",
    "end": "3014490"
  },
  {
    "text": "whatever it says, star,\ncounter product, and--",
    "start": "3014490",
    "end": "3021619"
  },
  {
    "text": "what does it say-- plus counter 1 in some other\nenvironment, by this time,",
    "start": "3021620",
    "end": "3030819"
  },
  {
    "text": "E,2, where E,2 will be set up\nhaving bindings for product",
    "start": "3030820",
    "end": "3038840"
  },
  {
    "text": "and counter, right? And it'll reduce\nto that, right?",
    "start": "3038840",
    "end": "3045140"
  },
  {
    "text": "It won't be remembering that\nit's part of something that it has to return to. And when iter calls iter again,\nit'll reduce to another",
    "start": "3045140",
    "end": "3051500"
  },
  {
    "text": "thing that looks like this in\nsome environment, E,3, which has new bindings for product\nand counter.",
    "start": "3051500",
    "end": "3059160"
  },
  {
    "text": "So, if you're wondering, see,\nif you've always been queasy",
    "start": "3059160",
    "end": "3068450"
  },
  {
    "text": "about how it is we've been\nsaying those procedures, that look syntactically recursive,\nare, in fact, iterative, run",
    "start": "3068450",
    "end": "3076095"
  },
  {
    "text": "in constant space, well, I don't\nknow if this makes you less queasy, but at least it\nshows you what's happening.",
    "start": "3076095",
    "end": "3081230"
  },
  {
    "text": "There really isn't any\nbuildup there.  Now, you might ask well, is\nthere buildup in principle in",
    "start": "3081230",
    "end": "3088829"
  },
  {
    "text": "these environment frames? And the answer is yeah, you\nhave to make these new environment frames, but you\ndon't have to hang onto them",
    "start": "3088830",
    "end": "3095560"
  },
  {
    "text": "when you're done. They can be garbage collected,\nor the space can be reused automatically.",
    "start": "3095560",
    "end": "3100720"
  },
  {
    "text": "But you see the control\nstructure of the evaluator is really using this idea that you\nactually have a reduction,",
    "start": "3100720",
    "end": "3107020"
  },
  {
    "text": "so these procedures really\nare iterative procedures. All right, let's stop\nfor questions. ",
    "start": "3107020",
    "end": "3122288"
  },
  {
    "text": "All right, let's break. ",
    "start": "3122288",
    "end": "3168770"
  },
  {
    "text": "Let me contrast the iterative\nprocedure just so you'll see where space does build up with\na recursive procedure, so you",
    "start": "3168770",
    "end": "3176480"
  },
  {
    "text": "can see the difference. Let's look at the evaluation\nof recursive factorial, all right?",
    "start": "3176480",
    "end": "3182880"
  },
  {
    "text": "So, here's fact-recursive, or\nstandard factorial definition. We said this one is still a\nrecursive procedure, but this",
    "start": "3182880",
    "end": "3190359"
  },
  {
    "start": "3183000",
    "end": "3402000"
  },
  {
    "text": "is actually a recursive\nprocess. And then, just to link it back\nto the way we started, we said",
    "start": "3190360",
    "end": "3197210"
  },
  {
    "text": "oh, you can see that it's going\nto be recursive process by the substitution model\nbecause, if I say recursive",
    "start": "3197210",
    "end": "3204520"
  },
  {
    "text": "factorial of 5, that turns\ninto 5 times--",
    "start": "3204520",
    "end": "3216000"
  },
  {
    "text": "what is it, fact-rec,\nor record fact-- ",
    "start": "3216000",
    "end": "3222620"
  },
  {
    "text": "5 times recursive factorial of\n4, which turns into 5 times 4",
    "start": "3222620",
    "end": "3234230"
  },
  {
    "text": "times fact-rec of 3, which\nreturns into 5 times 4 times 3",
    "start": "3234230",
    "end": "3248090"
  },
  {
    "text": "times, and so on, right?",
    "start": "3248090",
    "end": "3255240"
  },
  {
    "text": "The idea is there was this chain\nof stuff building up, which justified, in the\nsubstitution model, the fact",
    "start": "3255240",
    "end": "3260540"
  },
  {
    "text": "that it's recursive. And now, let's actually see that\nchain of stuff build up and where it is in\nthe machine, OK?",
    "start": "3260540",
    "end": "3267464"
  },
  {
    "text": "All right, well, let's\nimagine we're going to start out again. We'll tell it to evaluate\nrecursive factorial of 5 in",
    "start": "3267465",
    "end": "3281690"
  },
  {
    "text": "some environment, again, E,0\nwhere recursive factorial is defined, OK?",
    "start": "3281690",
    "end": "3289580"
  },
  {
    "text": "Well, now we know what's\neventually going to happen. This is going to come along,\nit'll evaluate those things,",
    "start": "3289580",
    "end": "3295670"
  },
  {
    "text": "figure out it's a procedure,\nbuild somewhere over here an environment, E,1, which has n\nbound to 5, which hangs off of",
    "start": "3295670",
    "end": "3305860"
  },
  {
    "text": "E,0, which would be, presumably,\nthe definition environment of recursive\nfactorial, OK?",
    "start": "3305860",
    "end": "3314610"
  },
  {
    "text": "And, in this environment,\nit's going to go off and evaluate the body.",
    "start": "3314610",
    "end": "3319670"
  },
  {
    "text": "So, again, the evaluation here\nwill reduce to evaluating the",
    "start": "3319670",
    "end": "3327859"
  },
  {
    "text": "body in E,1. That's going to look at an if,\nand I won't go through the",
    "start": "3327860",
    "end": "3332880"
  },
  {
    "text": "details of if. It'll look at the predicate. It'll decide it eventually has\nto evaluate the alternative. So this whole thing, again, will\nreduce to the alternative",
    "start": "3332880",
    "end": "3343122"
  },
  {
    "text": "of recursive factorial, the\nalternative clause, which says that this whole thing reduces\nto times n of recursive",
    "start": "3343122",
    "end": "3356040"
  },
  {
    "text": "factorial of n minus 1 in\nthe environment E,1, OK?",
    "start": "3356040",
    "end": "3368720"
  },
  {
    "text": "So the original expression,\nnow, is going to reduce to evaluating that expression,\nall right?",
    "start": "3368720",
    "end": "3374130"
  },
  {
    "text": "Now we have an application. We did an application before. Remember what happens\nin an application?",
    "start": "3374130",
    "end": "3380390"
  },
  {
    "text": "The first thing you do is you go\noff and you save the value of the continue register\non the stack. So the stack here is going\nto have done in it.",
    "start": "3380390",
    "end": "3387365"
  },
  {
    "text": " And then you're going to\nset up to evaluate the sub-parts, OK?",
    "start": "3387365",
    "end": "3395130"
  },
  {
    "text": "So here we go off to evaluate\nthe sub-parts.  First thing we're going to do\nis evaluate the operator.",
    "start": "3395130",
    "end": "3401045"
  },
  {
    "text": " What happens when we evaluate\nan operator?",
    "start": "3401045",
    "end": "3407250"
  },
  {
    "start": "3402000",
    "end": "3599000"
  },
  {
    "text": "Well, we arrange things so that\nthe operator ends up in the expression register. The environments in the ENV\nregister continue someplace",
    "start": "3407250",
    "end": "3414630"
  },
  {
    "text": "where we're going to go evaluate\nthe arguments. And, on the stack, we've saved\nthe original continue, which is where we wanted to be\nwhen we're all done.",
    "start": "3414630",
    "end": "3421720"
  },
  {
    "text": "And then the things we needed\nwhen we're going to get done evaluating the operator, the\nthings we'll need to evaluate",
    "start": "3421720",
    "end": "3427190"
  },
  {
    "text": "the arguments, namely, the\nenvironment and those arguments, those unevaluated\narguments, so there they are",
    "start": "3427190",
    "end": "3434790"
  },
  {
    "text": "sitting on the stack. And we're about to go off to\nevaluate the operator. ",
    "start": "3434790",
    "end": "3443130"
  },
  {
    "text": "Well, when we return from\nthis particular call-- so we're about to call\neval-dispatch here--",
    "start": "3443130",
    "end": "3449380"
  },
  {
    "text": "when we return from this call,\nthe value of that operator, which, in this case, is going to\nbe the primitive multiplier",
    "start": "3449380",
    "end": "3454890"
  },
  {
    "text": "procedure, will end up in the\nFUN register, all right?",
    "start": "3454890",
    "end": "3463079"
  },
  {
    "text": "We're going to evaluate\nsome arguments. They will evaluate in here. That'll give us 5,\nin this case.",
    "start": "3463080",
    "end": "3470250"
  },
  {
    "text": "We're going to put that in the\nargl register, and then we'll go off to evaluate the\nsecond operand.",
    "start": "3470250",
    "end": "3477460"
  },
  {
    "text": "So, at the point where we go\noff to evaluate the second operand-- and I'll skip details\nlike computing, and minus 1, and all of that--\nbut, when we go off to",
    "start": "3477460",
    "end": "3484510"
  },
  {
    "text": "evaluate the second operand,\nthat will eventually reduce to another call to fact-recursive. ",
    "start": "3484510",
    "end": "3492060"
  },
  {
    "text": "And, what we've got on the stack\nhere is the operator",
    "start": "3492060",
    "end": "3497520"
  },
  {
    "text": "from that combination that we're\ngoing to use it in and the other argument, OK?",
    "start": "3497520",
    "end": "3503790"
  },
  {
    "text": "So, now, we're set up\nfor another call to recursive factorial.",
    "start": "3503790",
    "end": "3510200"
  },
  {
    "text": "And, when we're done with this\none, we're going to go to accumulate the last arg. And remember what that'll do? That'll say oh, whatever the\nresult of this has to get",
    "start": "3510200",
    "end": "3518290"
  },
  {
    "text": "combined with that, and we're\ngoing to multiply them. But, notice now, we're at\nanother recursive factorial.",
    "start": "3518290",
    "end": "3525720"
  },
  {
    "text": "We're about to call\neval-dispatch again, except we haven't really reduced it\nbecause there's stuff",
    "start": "3525720",
    "end": "3531250"
  },
  {
    "text": "on the stack now. The stuff on the stack says oh,\nwhen you get back, you'd better multiply it by the\n5 you had hanging there.",
    "start": "3531250",
    "end": "3538430"
  },
  {
    "text": "So, when we go off to make\nanother call, we",
    "start": "3538430",
    "end": "3547430"
  },
  {
    "text": "evaluate the n minus 1. That gives us another\nenvironment in which the new n's going to be down to 4.",
    "start": "3547430",
    "end": "3554600"
  },
  {
    "text": "And we're about to call\neval-dispatch again, right? We get another call.",
    "start": "3554600",
    "end": "3561349"
  },
  {
    "text": "That 4 is going to end up\nin the same situation. We'll end up with another call\nto fact-recursive n.",
    "start": "3561350",
    "end": "3570020"
  },
  {
    "text": "And sitting on the stack will be\nthe stuff from the original one and, now, the subsidiary\none we're doing.",
    "start": "3570020",
    "end": "3575360"
  },
  {
    "text": "And both of them are waiting\nfor the same thing. They're going to go to\naccumulate a last argument.",
    "start": "3575360",
    "end": "3580599"
  },
  {
    "text": "And then, of course, when we\ngo to the fourth call, the same thing happens, right?",
    "start": "3580600",
    "end": "3585640"
  },
  {
    "text": "And this goes on,\nand on, and on. And what you see here on the\nstack, exactly what's sitting",
    "start": "3585640",
    "end": "3591430"
  },
  {
    "text": "here on the stack, the thing\nthat says times and 5. And what you're going to do with\nthat is accumulate that",
    "start": "3591430",
    "end": "3597490"
  },
  {
    "text": "into a last argument. That's exactly this, right?",
    "start": "3597490",
    "end": "3602760"
  },
  {
    "text": "This is exactly where that\nstuff is hanging. Effectively, the operator you're\ngoing to apply, the",
    "start": "3602760",
    "end": "3612650"
  },
  {
    "text": "other argument that it's got to\nbe multiplied by when you get back and the parentheses,\nwhich says yeah, what you wanted to do was accumulate\nthem.",
    "start": "3612650",
    "end": "3619620"
  },
  {
    "text": "So, you see, the substitution\nmodel is not such a lie. That really is, in some\nsense, what's sitting right on the stack.",
    "start": "3619620",
    "end": "3627198"
  },
  {
    "text": "OK. All right, so that, in some\nsense, should explain for you,",
    "start": "3627198",
    "end": "3633260"
  },
  {
    "text": "or at least convince you, that,\nsomehow, this evaluator is managing to take these\nprocedures and execute some of",
    "start": "3633260",
    "end": "3641870"
  },
  {
    "text": "them iteratively and some of\nthem recursively, even though, as syntactically, they look\nlike recursive procedures.",
    "start": "3641870",
    "end": "3649430"
  },
  {
    "text": "How's it managing to do that? Well, the basic reason it's\nmanaging to do that is the evaluator is set up to save\nonly what it needs later.",
    "start": "3649430",
    "end": "3661090"
  },
  {
    "text": "So, for example, at the point\nwhere you've reduced evaluating an expression and an\nenvironment to applying a",
    "start": "3661090",
    "end": "3668579"
  },
  {
    "text": "procedure to some arguments, it\ndoesn't need that original environment anymore because any\nenvironment stuff will be",
    "start": "3668580",
    "end": "3675109"
  },
  {
    "text": "packaged inside the procedures\nwhere the application's going to happen.",
    "start": "3675110",
    "end": "3680160"
  },
  {
    "text": "All right, similarly, when\nyou're going along evaluating an argument list, when you've\nfinished evaluating the list,",
    "start": "3680160",
    "end": "3685910"
  },
  {
    "text": "when you're finished evaluating\nthe last argument, you don't need that argument\nlist any more, right?",
    "start": "3685910",
    "end": "3691500"
  },
  {
    "text": "And you don't need the\nenvironment where those arguments would be\nevaluated, OK?",
    "start": "3691500",
    "end": "3696690"
  },
  {
    "text": "So the basic reason that this\ninterpreter is being so smart is that it's not being smart\nat all, it's being stupid.",
    "start": "3696690",
    "end": "3703049"
  },
  {
    "text": "It's just saying I'm\nonly going to save what I really need. ",
    "start": "3703050",
    "end": "3708700"
  },
  {
    "text": "Well, let me show you here. ",
    "start": "3708700",
    "end": "3714880"
  },
  {
    "text": "Here's the actual thing that's\nmaking a tail recursive. Remember, it's the restore\nof continue.",
    "start": "3714880",
    "end": "3720135"
  },
  {
    "text": "It's saying when I go off to\nevaluate the procedure body, I",
    "start": "3720135",
    "end": "3729090"
  },
  {
    "text": "should tell eval to come back\nto the place where that original evaluation was supposed\nto come back to.",
    "start": "3729090",
    "end": "3735170"
  },
  {
    "text": "So, in some sense, you want to\nsay what's the actual line that makes a tail recursive? It's that one. If I wanted to build a non-tail\nrecursive evaluator,",
    "start": "3735170",
    "end": "3743680"
  },
  {
    "text": "for some strange reason, all I\nwould need to do is, instead of restoring continue at this\npoint, I'd set up a label down",
    "start": "3743680",
    "end": "3751299"
  },
  {
    "text": "here called, \"Where to come\nback after you've finished applying the procedure.\"\nInstead, I'd",
    "start": "3751300",
    "end": "3758560"
  },
  {
    "text": "set continue to that. I'd go to eval-dispatch,\nand then eval-dispatch would come back here.",
    "start": "3758560",
    "end": "3763790"
  },
  {
    "text": "At that point, I would restore\ncontinue and go to the original one. So here, the only consequence\nof that would be to make it",
    "start": "3763790",
    "end": "3771790"
  },
  {
    "text": "non-tail recursive. It would give you exactly the\nsame answers, except, if you did that iterative factorial\nand all those iterative",
    "start": "3771790",
    "end": "3777800"
  },
  {
    "text": "procedures, it would execute\nrecursively. ",
    "start": "3777800",
    "end": "3783080"
  },
  {
    "text": "Well, I lied to you a little\nbit, but just a little bit, because I showed you a slightly\nover-simplified evaluator where it assumes that\neach procedure body has",
    "start": "3783080",
    "end": "3792510"
  },
  {
    "text": "only one expression. Remember, in general, a\nprocedure has a sequence of expressions in it.",
    "start": "3792510",
    "end": "3797870"
  },
  {
    "text": "So there's nothing really\nconceptually new. Let me just show you the actual\nevaluator that handles",
    "start": "3797870",
    "end": "3803480"
  },
  {
    "text": "sequences of expressions.  This is compound-apply now, and\nthe only difference from",
    "start": "3803480",
    "end": "3810650"
  },
  {
    "text": "the old one is that, instead of\ngoing off to eval directly,",
    "start": "3810650",
    "end": "3815980"
  },
  {
    "text": "it takes the whole body of the\nprocedure, which, in this case, is a sequence of\nexpressions, and goes off to eval-sequence.",
    "start": "3815980",
    "end": "3822670"
  },
  {
    "text": "And eval-sequence is a little\nloop that, basically, does",
    "start": "3822670",
    "end": "3828380"
  },
  {
    "text": "these evaluations\none at a time.  So it does an evaluation.",
    "start": "3828380",
    "end": "3833900"
  },
  {
    "text": "Says oh, when I come back, I'd\nbetter come back here to do the next one. And, when I'm all done, when\nI want to get the last",
    "start": "3833900",
    "end": "3840410"
  },
  {
    "text": "expression, I just restore\nmy continue and go off to eval-dispatch.",
    "start": "3840410",
    "end": "3846410"
  },
  {
    "text": "And, again, if you wanted for\nsome reason to break tail recursion in this evaluator,\nall you need to do is not",
    "start": "3846410",
    "end": "3851690"
  },
  {
    "text": "handle the last expression,\nespecially. Just say, after you've done the\nlast expression, come back",
    "start": "3851690",
    "end": "3857819"
  },
  {
    "text": "to some other place after which\nyou restore continue. And, for some reason, a lot\nof LISP evaluators tended",
    "start": "3857820",
    "end": "3864920"
  },
  {
    "text": "to work that way. And the only consequence of\nthat is that iterative procedures built up stack.",
    "start": "3864920",
    "end": "3871614"
  },
  {
    "text": "And it's not clear why\nthat happened. All right. Well, let me just sort of\nsummarize, since this is a lot",
    "start": "3871614",
    "end": "3878990"
  },
  {
    "text": "of details in a big program. But the main point is that\nit's no different,",
    "start": "3878990",
    "end": "3884040"
  },
  {
    "text": "conceptually, from translating\nany other program. And the main idea is that we\nhave this universal evaluator",
    "start": "3884040",
    "end": "3889760"
  },
  {
    "text": "program, the meta-circular\nevaluator. If we translate that\ninto LISP, then we have all of LISP. And that's all we did, OK?",
    "start": "3889760",
    "end": "3897980"
  },
  {
    "text": "The second point is that\nthe magic's gone away. There should be no more magic\nin this whole system, right? ",
    "start": "3897980",
    "end": "3904820"
  },
  {
    "text": "In principle, it should all be\nvery clear except, maybe, for how list structured\nmemory works, and",
    "start": "3904820",
    "end": "3910940"
  },
  {
    "text": "we'll see that later. But that's not very hard. The third point is that all this\ntail recursion came from",
    "start": "3910940",
    "end": "3918720"
  },
  {
    "text": "the discipline of eval being\nvery careful to save only what it needs next time.",
    "start": "3918720",
    "end": "3925870"
  },
  {
    "text": "It's not some arbitrary thing\nwhere we're saying well, whenever we call a sub-routine,\nwe'll save all the registers in the world\nand come back, right?",
    "start": "3925870",
    "end": "3933940"
  },
  {
    "text": "See, sometimes it pays to really\nworry about efficiency. And, when you're down in the\nguts of your evaluator",
    "start": "3933940",
    "end": "3939400"
  },
  {
    "text": "machine, it really pays to think\nabout things like that because it makes big\nconsequences.",
    "start": "3939400",
    "end": "3945230"
  },
  {
    "text": "Well, I hope what this has\ndone is really made the evaluator seem concrete,\nright?",
    "start": "3945230",
    "end": "3952559"
  },
  {
    "text": "I hope you really believe that\nsomebody could hold a LISP evaluator in the palm\nof their hand.",
    "start": "3952560",
    "end": "3959390"
  },
  {
    "text": "Maybe to help you believe that,\nhere's a LISP evaluator that I'm holding the palm\nof my hand, right?",
    "start": "3959390",
    "end": "3966160"
  },
  {
    "text": "And this is a chip which is\nactually quite a bit more",
    "start": "3966160",
    "end": "3971750"
  },
  {
    "text": "complicated than the evaluator\nI showed you. ",
    "start": "3971750",
    "end": "3977815"
  },
  {
    "text": "Maybe, here's a better\npicture of it.  What there is, is you can see\nthe same overall structure.",
    "start": "3977815",
    "end": "3984730"
  },
  {
    "text": "This is a register array. These are the data paths. Here's a finite state\ncontroller.",
    "start": "3984730",
    "end": "3989799"
  },
  {
    "text": "And again, finite state,\nthat's all there is. And somewhere there's\nexternal memory that'll worry about things.",
    "start": "3989800",
    "end": "3995750"
  },
  {
    "text": "And this particular one is very\ncomplicated because it's trying to run LISP fast. And\nit has some very, very fast",
    "start": "3995750",
    "end": "4001450"
  },
  {
    "text": "parallel operations in there\nlike, if you want to index into an array, simultaneously\ncheck that the index is an",
    "start": "4001450",
    "end": "4010040"
  },
  {
    "text": "integer, check that it doesn't\nexceed the array bands, and go off and do the memory access,\nand do all those things",
    "start": "4010040",
    "end": "4015810"
  },
  {
    "text": "simultaneously. And then, later, if they're\nall OK, actually get the value there. So there are a lot of\ncomplicated operations in",
    "start": "4015810",
    "end": "4022520"
  },
  {
    "text": "these data paths for making\nLISP run in parallel. It's a completely non-risk\nphilosophy of evaluating LISP.",
    "start": "4022520",
    "end": "4030640"
  },
  {
    "text": "And then, this microcode\nis pretty complicated. Let's see, there's what?",
    "start": "4030640",
    "end": "4037740"
  },
  {
    "text": "There's about 389 instructions\nof 220-bit microcode sitting",
    "start": "4037740",
    "end": "4043600"
  },
  {
    "text": "here because these are very\ncomplicated data paths. And the whole thing has about\n89,000 transistors, OK?",
    "start": "4043600",
    "end": "4053579"
  },
  {
    "text": "OK. Well, I hope that that takes\naway a lot of the mystery. Maybe somebody wants\nto look at this.",
    "start": "4053580",
    "end": "4059240"
  },
  {
    "text": " Yeah. ",
    "start": "4059240",
    "end": "4066260"
  },
  {
    "text": "OK. Let's stop. ",
    "start": "4066260",
    "end": "4075890"
  },
  {
    "text": "Questions? AUDIENCE: OK, now, it sounds\nlike what you're saying is that, with the restore continue\nput in the proper",
    "start": "4075890",
    "end": "4083069"
  },
  {
    "text": "place, that procedures that\nwould invoke a recursive",
    "start": "4083070",
    "end": "4088830"
  },
  {
    "text": "process now invoke an integer\nprocess just by the way that the eval signature is?",
    "start": "4088830",
    "end": "4095165"
  },
  {
    "text": "PROFESSOR: I think the way I'd\nprefer to put it is that, with restore continue put in the\nwrong place, you can cause any",
    "start": "4095165",
    "end": "4102540"
  },
  {
    "text": "syntactically-looking recursive\nprocedure, in fact, to build up stack as it runs.",
    "start": "4102540",
    "end": "4108028"
  },
  {
    "text": "But there's no reason for that,\nso you might want to",
    "start": "4108029",
    "end": "4114349"
  },
  {
    "text": "play around with it. You can just switch around two\nor three instructions in the way compound-apply comes back,\nand you'll get something which",
    "start": "4114350",
    "end": "4122259"
  },
  {
    "text": "isn't tail recursive. But the thing I wanted to\nemphasize is there's no magic.",
    "start": "4122260",
    "end": "4127670"
  },
  {
    "text": "It's not as if there's some\nvery clever pre-processing program that's looking at this\nprocedure, factorial iter, and",
    "start": "4127670",
    "end": "4135540"
  },
  {
    "text": "say oh, gee, I really notice\nthat I don't have to push stack in order to do this.",
    "start": "4135540",
    "end": "4141060"
  },
  {
    "text": "Some people think that that's\nwhat's going on. It's something much, much more\ndumb than that, it's this one place you're putting the\nrestore instruction.",
    "start": "4141060",
    "end": "4148880"
  },
  {
    "text": "It's just automatic. AUDIENCE: OK. ",
    "start": "4148880",
    "end": "4154216"
  },
  {
    "text": "AUDIENCE: But that's not\naffecting the time complexity is it? PROFESSOR: No. AUDIENCE: It's just that it's\nhandling it recursively",
    "start": "4154217",
    "end": "4161810"
  },
  {
    "text": "instead of iteratively. But, in terms of the order of\ntime it takes to finish the",
    "start": "4161810",
    "end": "4166960"
  },
  {
    "text": "operation, it's the same one\nway or the other, right? PROFESSOR: Yes. Tail recursion is not going to\nchange the time complexity of",
    "start": "4166960",
    "end": "4172609"
  },
  {
    "text": "anything because, in some sense,\nit's the same algorithm that's going on. What it's doing is really making\nthis thing run as an",
    "start": "4172609",
    "end": "4178790"
  },
  {
    "text": "iteration, right? Not going to run out of memory\ncounting up to a giant number",
    "start": "4178790",
    "end": "4184750"
  },
  {
    "text": "simply because the stack\nwould get pushed. See, the thing you really\nhave to believe is",
    "start": "4184750",
    "end": "4189970"
  },
  {
    "text": "that, when we write-- see, we've been writing all\nthese things called iterations, infinite loops,\ndefine loop to be called loop.",
    "start": "4189970",
    "end": "4197990"
  },
  {
    "text": " That's is as much an iteration\nas if we wrote do forever",
    "start": "4197990",
    "end": "4205390"
  },
  {
    "text": "loop, right? It's just syntactic sugar\nas the difference. These things are real, honest\nto god, iterations, right?",
    "start": "4205390",
    "end": "4214730"
  },
  {
    "text": "They don't change the time\ncomplexity, but they turn them into real iterations. ",
    "start": "4214730",
    "end": "4221686"
  },
  {
    "text": "All right, thank you. ",
    "start": "4221686",
    "end": "4242633"
  }
]