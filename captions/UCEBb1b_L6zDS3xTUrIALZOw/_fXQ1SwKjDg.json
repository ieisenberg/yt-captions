[
  {
    "start": "0",
    "end": "155000"
  },
  {
    "start": "0",
    "end": "24460"
  },
  {
    "text": "PROFESSOR: Well, yesterday we\nlearned a bit about symbolic manipulation, and we wrote a\nrather stylized program to",
    "start": "24460",
    "end": "35140"
  },
  {
    "text": "implement a pile of calculus\nrule from the calculus book.",
    "start": "35140",
    "end": "40620"
  },
  {
    "text": "Here on the transparencies, we\nsee a bunch of calculus rules",
    "start": "40620",
    "end": "47790"
  },
  {
    "text": "from such a book. And, of course, what we did is\nsort of translate these rules",
    "start": "47790",
    "end": "53030"
  },
  {
    "text": "into the language\nof the computer. But, of course, that's a\nsort of funny strategy.",
    "start": "53030",
    "end": "59340"
  },
  {
    "text": "Why should we have to translate\nthese rules into the language of the computer?",
    "start": "59340",
    "end": "64989"
  },
  {
    "text": "And what do I really\nmean by that? These are--the program we wrote yesterday was very stylized.",
    "start": "64989",
    "end": "71240"
  },
  {
    "text": "It was a conditional, a dispatch\non the type of the expression as observed\nby the rules.",
    "start": "71240",
    "end": "79659"
  },
  {
    "text": "What we see here are rules that\nsay if the object being the derivative is being taken\nof, if that expression is a",
    "start": "79660",
    "end": "86850"
  },
  {
    "text": "constant, then do one thing. If it's a variable,\ndo another thing. If it's a product of a constant\ntimes a variable, do",
    "start": "86850",
    "end": "94039"
  },
  {
    "text": "something and so on. There's sort of a dispatch\nthere on a type. ",
    "start": "94040",
    "end": "101750"
  },
  {
    "text": "Well, since it has such a\nstylized behavior and structure, is there some other\nway of writing this program",
    "start": "101750",
    "end": "108110"
  },
  {
    "text": "that's more clear? Well, what's a rule,\nfirst of all? What are these rules?",
    "start": "108110",
    "end": "113530"
  },
  {
    "text": " Let's think about that. Rules have parts.",
    "start": "113530",
    "end": "118909"
  },
  {
    "text": "If you look at these rules in\ndetail, what you see, for",
    "start": "118910",
    "end": "124400"
  },
  {
    "text": "example, is the rule has\na left-hand side and a right-hand side.",
    "start": "124400",
    "end": "130940"
  },
  {
    "text": "Each of these rules has a\nleft-hand side and the right-hand side. The left-hand side is somehow\ncompared with the expression",
    "start": "130940",
    "end": "138640"
  },
  {
    "text": "you're trying to take\nthe derivative of. The right-hand side is the\nreplacement for that",
    "start": "138640",
    "end": "144440"
  },
  {
    "text": "expression.  So all rules on this page\nare something like this.",
    "start": "144440",
    "end": "153070"
  },
  {
    "text": " I have patterns, and somehow,\nI have to produce, given a",
    "start": "153070",
    "end": "165989"
  },
  {
    "start": "155000",
    "end": "230000"
  },
  {
    "text": "pattern, a skeleton. ",
    "start": "165990",
    "end": "171700"
  },
  {
    "text": "This is a rule.  A pattern is something that\nmatches, and a skeleton is",
    "start": "171700",
    "end": "178650"
  },
  {
    "text": "something you substitute into\nin order to get a new expression.",
    "start": "178650",
    "end": "183720"
  },
  {
    "text": " So what that means is that the\npattern is matched against the",
    "start": "183720",
    "end": "192960"
  },
  {
    "text": "expression, which is the\nsource expression. ",
    "start": "192960",
    "end": "203730"
  },
  {
    "text": "And the result of the\napplication of the rule is to produce a new expression, which\nI'll call a target, by",
    "start": "203730",
    "end": "218069"
  },
  {
    "text": "instantiation of a skeleton. That's called instantiation. ",
    "start": "218070",
    "end": "230580"
  },
  {
    "start": "230000",
    "end": "319000"
  },
  {
    "text": "So that is the process by which these rules are described.",
    "start": "230580",
    "end": "235780"
  },
  {
    "text": "What I'd like to do today is\nbuild a language and a means",
    "start": "235780",
    "end": "242680"
  },
  {
    "text": "of interpreting that language,\na means of executing that language, where that language\nallows us to directly express",
    "start": "242680",
    "end": "247770"
  },
  {
    "text": "these rules. And what we're going to do is\ninstead of bringing the rules",
    "start": "247770",
    "end": "254150"
  },
  {
    "text": "to the level of the computer by\nwriting a program that is those rules in the computer's\nlanguage--",
    "start": "254150",
    "end": "260278"
  },
  {
    "text": "at the moment, in a Lisp-- we're going to bring the\ncomputer to the level of us by",
    "start": "260279",
    "end": "265740"
  },
  {
    "text": "writing a way by which the\ncomputer can understand rules of this sort. This is slightly emphasizing the\nidea that we had last time",
    "start": "265740",
    "end": "275210"
  },
  {
    "text": "that we're trying to make\na solution to a class of problems rather than\na particular one. The problem is if I want to\nwrite rules for a different",
    "start": "275210",
    "end": "285740"
  },
  {
    "text": "piece of mathematics, say,\nto simple algebraic simplification or something like\nthat, or manipulation of",
    "start": "285740",
    "end": "294050"
  },
  {
    "text": "trigonometric functions,\nI would have to write a different program in using\nyesterday's method.",
    "start": "294050",
    "end": "301130"
  },
  {
    "text": "Whereas I would like to\nencapsulate all of the things that are common to both of those\nprograms, meaning the",
    "start": "301130",
    "end": "306770"
  },
  {
    "text": "idea of matching, instantiation,\nthe control structure, which turns out to be\nvery complicated for such a",
    "start": "306770",
    "end": "312090"
  },
  {
    "text": "thing, I'd like to encapsulate\nthat separately from the rules",
    "start": "312090",
    "end": "317419"
  },
  {
    "text": "themselves. So let's look at, first of\nall, a representation.",
    "start": "317420",
    "end": "322730"
  },
  {
    "start": "319000",
    "end": "471000"
  },
  {
    "text": "I'd like to use the\noverhead here. I'd like-- there it is. I'd like to look at a\nrepresentation of the rules of",
    "start": "322730",
    "end": "329440"
  },
  {
    "text": "calculus for derivatives in a\nsort of simple language that",
    "start": "329440",
    "end": "336010"
  },
  {
    "text": "I'm writing right here. Now, I'm going to avoid--I'm\ngoing to avoid",
    "start": "336010",
    "end": "341420"
  },
  {
    "text": "worrying about syntax. We can easily pretty this, and\nI'm not interested in making--",
    "start": "341420",
    "end": "348340"
  },
  {
    "text": "this is indeed ugly. This doesn't look like the\nbeautiful text set dx by dt or",
    "start": "348340",
    "end": "354810"
  },
  {
    "text": "something that I'd\nlike to write, but that's not essential. That's sort of an accidental\nphenomenon.",
    "start": "354810",
    "end": "360479"
  },
  {
    "text": "Here, we're just worrying\nabout the fact that the structure of the rules is that\nthere is a left-hand side",
    "start": "360480",
    "end": "367060"
  },
  {
    "text": "here, represents the thing I\nwant to match against the derivative expression. This is the representation\nI'm going to say for the",
    "start": "367060",
    "end": "374140"
  },
  {
    "text": "derivative of a constant, which\nwe will call c with respect to the variable we will\ncall v. And what we will",
    "start": "374140",
    "end": "383730"
  },
  {
    "text": "get on the right-hand\nside is 0. So this represents a rule.",
    "start": "383730",
    "end": "389620"
  },
  {
    "text": "The next rule will be the\nderivative of a variable, which we will call v with\nrespect to the same variable",
    "start": "389620",
    "end": "396010"
  },
  {
    "text": "v, and we get a 1. However, if we have the\nderivative of a variable",
    "start": "396010",
    "end": "401360"
  },
  {
    "text": "called u with respect to\na different variables v, we will get 0.",
    "start": "401360",
    "end": "407789"
  },
  {
    "text": "I just want you look at these\nrules a little bit and see how they fit together. For example, over here, we're\ngoing to have the derivative",
    "start": "407790",
    "end": "416310"
  },
  {
    "text": "of the sum of an expression\ncalled x1 and an expression called x2.",
    "start": "416310",
    "end": "421789"
  },
  {
    "text": "These things that begin with\nquestion marks are called pattern variables in the\nlanguage that we're inventing,",
    "start": "421790",
    "end": "428910"
  },
  {
    "text": "and you see we're just making\nit up, so pattern variables for matching.",
    "start": "428910",
    "end": "434960"
  },
  {
    "text": "And so in this-- here we have the derivative of\nthe sum of the expression which we will call x1.",
    "start": "434960",
    "end": "440380"
  },
  {
    "text": "And the expression we will call\nx2 with respect to the variable we call v will be--\nhere is the right-hand side:",
    "start": "440380",
    "end": "446500"
  },
  {
    "text": "the sum of the derivative of\nthat expression x1 with respect to v-- the right-hand\nside is the skeleton--",
    "start": "446500",
    "end": "453910"
  },
  {
    "text": "and the derivative of x2 with\nrespect to v. Colons here will",
    "start": "453910",
    "end": "458950"
  },
  {
    "text": "stand for substitution\nobjects. ",
    "start": "458950",
    "end": "464690"
  },
  {
    "text": "They're--we'll call them\nskeleton evaluations. So let me put up here on the\nblackboard for a second some",
    "start": "464690",
    "end": "472420"
  },
  {
    "start": "471000",
    "end": "630000"
  },
  {
    "text": "syntax so we'll know\nwhat's going on for this rule language. First of all, we're going to\nhave to worry about the",
    "start": "472420",
    "end": "478729"
  },
  {
    "text": "pattern matching. ",
    "start": "478730",
    "end": "485790"
  },
  {
    "text": "We're going to have things like\na symbol like foo matches",
    "start": "485790",
    "end": "491950"
  },
  {
    "text": "exactly itself. ",
    "start": "491950",
    "end": "503170"
  },
  {
    "text": "The expression f of a and b will\nbe used to match any list",
    "start": "503170",
    "end": "515919"
  },
  {
    "text": "whose first element is f, whose\nsecond element is a, and",
    "start": "515919",
    "end": "531130"
  },
  {
    "text": "whose third element is b.",
    "start": "531130",
    "end": "538550"
  },
  {
    "text": "Also, another thing we might\nhave in a pattern is that-- a question mark with some\nvariable like x.",
    "start": "538550",
    "end": "548150"
  },
  {
    "text": "And what that means, it says\nmatches anything, which we",
    "start": "548150",
    "end": "557965"
  },
  {
    "text": "will call x. ",
    "start": "557965",
    "end": "565610"
  },
  {
    "text": "Question mark c x will\nmatch only constants.",
    "start": "565610",
    "end": "570922"
  },
  {
    "text": "So this is something which\nmatches a constant colon x.",
    "start": "570922",
    "end": "581140"
  },
  {
    "text": " And question mark v x will\nmatch a variable,",
    "start": "581140",
    "end": "595920"
  },
  {
    "text": "which we call x. ",
    "start": "595920",
    "end": "601690"
  },
  {
    "text": "This is sort of the language\nwe're making up now. If I match two things against\neach other, then they are",
    "start": "601690",
    "end": "607240"
  },
  {
    "text": "compared element by element. But elements in the pattern may\ncontain these syntactic",
    "start": "607240",
    "end": "613630"
  },
  {
    "text": "variables, pattern variables,\nwhich will be used to match",
    "start": "613630",
    "end": "619310"
  },
  {
    "text": "arbitrary objects. And we'll get that object as the\nvalue in the name x here,",
    "start": "619310",
    "end": "628480"
  },
  {
    "text": "for example. Now, when we make skeletons\nfor instantiation.",
    "start": "628480",
    "end": "639290"
  },
  {
    "start": "630000",
    "end": "725000"
  },
  {
    "text": "Well, then we have\nthings like this. foo, a symbol, instantiates\nto itself.",
    "start": "639290",
    "end": "646160"
  },
  {
    "start": "646160",
    "end": "655019"
  },
  {
    "text": "Something which is a list\nlike f of a and b, instantiates to--",
    "start": "655020",
    "end": "666350"
  },
  {
    "text": "well, f instantiates to a\n3-list, a list of three",
    "start": "666350",
    "end": "674269"
  },
  {
    "text": "elements, okay, which are the\nresults of instantiating each",
    "start": "674270",
    "end": "687420"
  },
  {
    "text": "of f, a, and b.",
    "start": "687420",
    "end": "693320"
  },
  {
    "text": " And x well--we instantiate to\nthe value of x as in the",
    "start": "693320",
    "end": "713470"
  },
  {
    "text": "matched pattern. ",
    "start": "713470",
    "end": "722959"
  },
  {
    "text": "So going back to the overhead\nhere, we see--we see that all",
    "start": "722960",
    "end": "728630"
  },
  {
    "text": "of those kinds of objects, we\nsee here a pattern variable",
    "start": "728630",
    "end": "734040"
  },
  {
    "text": "which matches a constant, a\npattern variable which matches a variable, a pattern variable\nwhich will match anything.",
    "start": "734040",
    "end": "742660"
  },
  {
    "text": "And if we have two instances of\nthe same name, like this is the derivative of the expression\nwhich is a variable",
    "start": "742660",
    "end": "749840"
  },
  {
    "text": "only whose name will be v with\nrespect to some arbitrary expression which we will call v,\nsince this v appears twice,",
    "start": "749840",
    "end": "758560"
  },
  {
    "text": "we're going to want that to mean\nthey have to be the same. The only consistent match is\nthat those are the same.",
    "start": "758560",
    "end": "765630"
  },
  {
    "text": "So here, we're making\nup a language. And in fact, that's a very\nnice thing to be doing. It's so much fun to make\nup a language.",
    "start": "765630",
    "end": "772555"
  },
  {
    "text": "And you do this all the time. And the really most powerful\ndesign things you ever do are sort of making up a language to\nsolve problems like this.",
    "start": "772555",
    "end": "782050"
  },
  {
    "text": "Now, here we go back here and\nlook at some of these rules. Well, there's a whole\nset of them.",
    "start": "782050",
    "end": "787070"
  },
  {
    "text": "I mean, there's one for\naddition and one for multiplication, just\nlike we had before.",
    "start": "787070",
    "end": "792389"
  },
  {
    "text": "The derivative of the product of\nx1 and x2 with respect to v is the sum of the product of x1\nand the derivative x2 with",
    "start": "792390",
    "end": "802660"
  },
  {
    "text": "respect to v and the\nproduct of the derivative of x1 and x2. And here we have\nexponentiation.",
    "start": "802660",
    "end": "809180"
  },
  {
    "text": "And, of course, we run off\nthe end down here. We get as many as we like. But the whole thing over here,\nI'm giving this--this list of",
    "start": "809180",
    "end": "816269"
  },
  {
    "text": "rules the name \"derivative\nrules.\" What would we do with such\na thing once we have it?",
    "start": "816270",
    "end": "825240"
  },
  {
    "text": "Well, one of the nicest ideas,\nfirst of all, is I'm going to write for you, and we're going\nto play with it all day.",
    "start": "825240",
    "end": "832230"
  },
  {
    "text": "What I'm going to write for\nyou is a program called simplifier, the general-purpose\nsimplifier.",
    "start": "832230",
    "end": "840149"
  },
  {
    "text": "And we're going to say something\nlike define dsimp to",
    "start": "840150",
    "end": "849150"
  },
  {
    "text": "be a simplifier of the\nderivative rules.",
    "start": "849150",
    "end": "857260"
  },
  {
    "start": "857260",
    "end": "863740"
  },
  {
    "text": "And what simplifier is going\nto do is, given a set of rules, it will produce for\nme a procedure which will",
    "start": "863740",
    "end": "869670"
  },
  {
    "text": "simplify expressions containing\nthe things that are referred to by these rules.",
    "start": "869670",
    "end": "874680"
  },
  {
    "text": " So here will be a procedure\nconstructed for your purposes",
    "start": "874680",
    "end": "882110"
  },
  {
    "text": "to simplify things with\nderivatives in them such that, after that, if we're typing at\nsome list system, and we get a",
    "start": "882110",
    "end": "889050"
  },
  {
    "text": "prompt, and we say dsimp, for\nexample, of the derivative of",
    "start": "889050",
    "end": "898029"
  },
  {
    "text": "the sum of x and y with\nrespect to x--",
    "start": "898030",
    "end": "903885"
  },
  {
    "text": " note the quote here because\nI'm talking about the expression which is\nthe derivative--",
    "start": "903885",
    "end": "910660"
  },
  {
    "text": " then I will get back as\na result plus 1 0.",
    "start": "910660",
    "end": "919970"
  },
  {
    "text": "Because the derivative of x plus\ny is the derivative of x plus derivative y. The derivative of x with\nrespect to x is 1.",
    "start": "919970",
    "end": "926300"
  },
  {
    "text": "The derivative of y with\nrespect to x is 0. It's not what we're\ngoing to get. I haven't put any simplification\nat that level--",
    "start": "926300",
    "end": "933279"
  },
  {
    "text": "algebraic simplification-- yet. Of course, once we have such a\nthing, then we can--then we",
    "start": "933280",
    "end": "939702"
  },
  {
    "start": "935000",
    "end": "1082000"
  },
  {
    "text": "can look at other rules. So, for example, we can, if\nwe go to the slide, OK?",
    "start": "939702",
    "end": "949310"
  },
  {
    "text": "Here, for example, are other\nrules that we might have, algebraic manipulation rules,\nones that would be used for",
    "start": "949310",
    "end": "956779"
  },
  {
    "text": "simplifying algebraic\nexpressions. For example, just looking at\nsome of these, the left-hand",
    "start": "956780",
    "end": "964470"
  },
  {
    "text": "side says any operator applied\nto a constant e1 and a constant e2 is the result of\nevaluating that operator on",
    "start": "964470",
    "end": "972310"
  },
  {
    "text": "the constants e1 and e2. Or an operator, applied to e1,\nany expression e1 and a",
    "start": "972310",
    "end": "980660"
  },
  {
    "text": "constant e2, is going to move\nthe constant forward. So that'll turn into\nthe operator with",
    "start": "980660",
    "end": "985980"
  },
  {
    "text": "e2 followed by e1. Why I did that, I don't know. It wouldn't work if I had\ndivision, for example.",
    "start": "985980",
    "end": "993560"
  },
  {
    "text": "So there's a bug in the\nrules, if you like. So the sum of 0 and e is e.",
    "start": "993560",
    "end": "1002120"
  },
  {
    "text": "The product of 1 and any\nexpression e is e. The product of 0 and any\nexpression e is 0.",
    "start": "1002120",
    "end": "1009519"
  },
  {
    "text": "Just looking at some more of\nthese rules, we could have arbitrarily complicated ones. We could have things like the\nproduct of the constant e1 and",
    "start": "1009520",
    "end": "1019050"
  },
  {
    "text": "any constant e2 with e3 is the\nresult of multiplying the",
    "start": "1019050",
    "end": "1024230"
  },
  {
    "text": "result of--multiplying now the\nconstants e1 and e2 together",
    "start": "1024230",
    "end": "1030309"
  },
  {
    "text": "and putting e3 there. So it says combine the constants\nthat I had, which",
    "start": "1030310",
    "end": "1036760"
  },
  {
    "text": "was if I had a product of e1 and\ne2 and e3 just multiply--I mean and e1 and e2 are both\nconstants, multiply them.",
    "start": "1036760",
    "end": "1043799"
  },
  {
    "text": "And you can make up the\nrules as you like. There are lots of them here. There are things as complicated,\nfor example, as--",
    "start": "1043800",
    "end": "1051300"
  },
  {
    "text": "oh, I suppose down here some\ndistributive law, you see. The product of any object c and\nthe sum of d and e gives",
    "start": "1051300",
    "end": "1059150"
  },
  {
    "text": "the result as the same as the\nsum of the product of c and d and the product of c and e.",
    "start": "1059150",
    "end": "1065320"
  },
  {
    "text": "Now, what exactly these\nrules are doesn't very much interest me. We're going to be writing the\nlanguage that will allow us to",
    "start": "1065320",
    "end": "1071970"
  },
  {
    "text": "interpret these rules so that\nwe can, in fact, make up whatever rules we like, another\nwhole language of",
    "start": "1071970",
    "end": "1079429"
  },
  {
    "text": "programming.  Well, let's see.",
    "start": "1079430",
    "end": "1085130"
  },
  {
    "start": "1082000",
    "end": "1254000"
  },
  {
    "text": "I haven't told you how we're\ngoing to do this. And, of course, for a while,\nwe're going to work on that.",
    "start": "1085130",
    "end": "1090760"
  },
  {
    "text": "But there's a real question of\nwhat is--what am I going to do at all at a large scale?",
    "start": "1090760",
    "end": "1096940"
  },
  {
    "text": "How do these rules work? How is the simplifier program\ngoing to manipulate these rules with your expression to\nproduce a reasonable answer?",
    "start": "1096940",
    "end": "1106190"
  },
  {
    "text": "Well, first, I'd like to think\nabout these rules as being some sort of deck of them.",
    "start": "1106190",
    "end": "1112100"
  },
  {
    "text": "So here I have a whole bunch\nof rules, right?",
    "start": "1112100",
    "end": "1122030"
  },
  {
    "text": "Each rule-- here's a rule-- has a pattern and a skeleton.",
    "start": "1122030",
    "end": "1129720"
  },
  {
    "text": "I'm trying to make up a control\nstructure for this. Now, what I have is a matcher,\nand I have something which is",
    "start": "1129720",
    "end": "1142720"
  },
  {
    "text": "an instantiater. ",
    "start": "1142720",
    "end": "1149120"
  },
  {
    "text": "And I'm going to pass from the\nmatcher to the instantiater some set of meaning for the\npattern variables, a",
    "start": "1149120",
    "end": "1158200"
  },
  {
    "text": "dictionary, I'll call it. A dictionary, which will say\nx was matched against the",
    "start": "1158200",
    "end": "1166740"
  },
  {
    "text": "following subexpression and y\nwas matched against another following subexpression.",
    "start": "1166740",
    "end": "1172170"
  },
  {
    "text": "And from the instantiater, I\nwill be making expressions, and they will go into\nthe matcher. They will be expressions.",
    "start": "1172170",
    "end": "1178380"
  },
  {
    "start": "1178380",
    "end": "1184960"
  },
  {
    "text": "And the patterns of the rules\nwill be fed into the matcher, and the skeletons from the same\nrule will be fed into the",
    "start": "1184960",
    "end": "1193600"
  },
  {
    "text": "instantiater. Now, this is a little\ncomplicated because when you have something like an algebraic\nexpression, where",
    "start": "1193600",
    "end": "1200965"
  },
  {
    "text": "someth--the rules are intended\nto be able to allow you to substitute equal for equal. These are equal transformation\nrules.",
    "start": "1200965",
    "end": "1206860"
  },
  {
    "text": "So all subexpressions\nof the expression should be looked at. You give it an expression,\nthis thing, and the rules",
    "start": "1206860",
    "end": "1214440"
  },
  {
    "text": "should be cycled around. First of all, for every\nsubexpression of the expression you feed in, all\nof the rules must be",
    "start": "1214440",
    "end": "1221340"
  },
  {
    "text": "tried and looked at. And if any rule matches, then\nthis process occurs.",
    "start": "1221340",
    "end": "1227200"
  },
  {
    "text": "The dictionary--the dictionary\nis to have some values in it. The instantiater makes a new\nexpression, which is basically",
    "start": "1227200",
    "end": "1234800"
  },
  {
    "text": "replaces that part of the\nexpression that was matched in your original expression.",
    "start": "1234800",
    "end": "1240800"
  },
  {
    "text": "And then, then, of course, we're\ngoing to recheck that, going to go around these rules\nagain, seeing if that could be",
    "start": "1240800",
    "end": "1247169"
  },
  {
    "text": "simplified further. And then, then we're going\nto do that for every subexpression until the thing\nno longer changes.",
    "start": "1247170",
    "end": "1254940"
  },
  {
    "start": "1254000",
    "end": "1467000"
  },
  {
    "text": "You can think of this as sort\nof an organic process. You've got some sort\nof stew, right?",
    "start": "1254940",
    "end": "1260190"
  },
  {
    "text": "You've got bacteria or\nsomething, or enzymes in some, in some gooey mess.",
    "start": "1260190",
    "end": "1265590"
  },
  {
    "text": "And there's these--and these\nenzymes change things. They attach to your expression,\nchange it, and",
    "start": "1265590",
    "end": "1273320"
  },
  {
    "text": "then they go away. And they have to match. The key-in-lock phenomenon. They match, they change\nit, they go away.",
    "start": "1273320",
    "end": "1279660"
  },
  {
    "text": "You can imagine it as a parallel\nprocess of some sort. So you stick an expression into\nthis mess, and after a",
    "start": "1279660",
    "end": "1286250"
  },
  {
    "text": "while, you take it out, and\nit's been simplified. And it just keeps changing\nuntil it no",
    "start": "1286250",
    "end": "1291659"
  },
  {
    "text": "longer can be changed. But these enzymes can attach\nto any part of the, of the",
    "start": "1291660",
    "end": "1297840"
  },
  {
    "text": "expression. OK, at this point, I'd like to\nstop and ask for questions.",
    "start": "1297840",
    "end": "1304990"
  },
  {
    "text": "Yes. AUDIENCE: This implies that the\nmatching program and the instantiation program\nare separate",
    "start": "1304990",
    "end": "1310460"
  },
  {
    "text": "programs; is that right? Or is that-- they are. PROFESSOR: They're separate\nlittle pieces. They fit together in\na larger structure.",
    "start": "1310460",
    "end": "1317169"
  },
  {
    "text": "AUDIENCE: So I'm going through\nand matching and passing the information about what I matched\nto an instantiater,",
    "start": "1317170",
    "end": "1323520"
  },
  {
    "text": "which makes the changes. And then I pass that back\nto the matcher? PROFESSOR: It won't\nmake a change. It will make a new expression,\nwhich has, which has",
    "start": "1323520",
    "end": "1331540"
  },
  {
    "text": "substituted the values of the\npattern variable that were matched on the left-hand side\nfor the variables that are",
    "start": "1331540",
    "end": "1337860"
  },
  {
    "text": "mentioned, the skeleton\nvariables or evaluation variables or whatever I called\nthem, on the right-hand side.",
    "start": "1337860",
    "end": "1345169"
  },
  {
    "text": "AUDIENCE: And then that's passed\nback into the matcher? PROFESSOR: Then this is going\nto go around again. This is going to go through\nthis mess until",
    "start": "1345170",
    "end": "1351330"
  },
  {
    "text": "it no longer changes. AUDIENCE: And it seems that\nthere would be a danger of getting into a recursive loop.",
    "start": "1351330",
    "end": "1357169"
  },
  {
    "text": "PROFESSOR: Yes. Yes, if you do not write your\nrules nicely, you are-- indeed, in any programming\nlanguage you invent, if it's",
    "start": "1357170",
    "end": "1363870"
  },
  {
    "text": "sufficiently powerful to do\nanything, you can write programs that will go\ninto infinite loops.",
    "start": "1363870",
    "end": "1369279"
  },
  {
    "text": "And indeed, writing a program\nfor doing algebraic manipulation for long will\nproduce infinite loops.",
    "start": "1369280",
    "end": "1375010"
  },
  {
    "start": "1375010",
    "end": "1380722"
  },
  {
    "text": "Go ahead. AUDIENCE: Some language\ndesigners feel that this feature is so important that it\nshould become part of the",
    "start": "1380722",
    "end": "1387850"
  },
  {
    "text": "basic language, for example,\nscheme in this case. What are your thoughts on--",
    "start": "1387850",
    "end": "1393960"
  },
  {
    "text": "PROFESSOR: Which language\nfeature? AUDIENCE: The pairs matching. It's all application of\nsuch rules should be--",
    "start": "1393960",
    "end": "1401840"
  },
  {
    "text": "PROFESSOR: Oh, you\nmean like Prolog? AUDIENCE: Like Prolog, but it\nbecomes a more general-- PROFESSOR: It's possible.",
    "start": "1401840",
    "end": "1408470"
  },
  {
    "text": "OK, I think my feeling about\nthat is that I would like to",
    "start": "1408470",
    "end": "1413740"
  },
  {
    "text": "teach you how to do it so you\ndon't depend upon some language designer. AUDIENCE: OK.",
    "start": "1413740",
    "end": "1420870"
  },
  {
    "text": "PROFESSOR: You make\nit yourself. You can roll your own. Thank you.",
    "start": "1420870",
    "end": "1425890"
  },
  {
    "start": "1425890",
    "end": "1454120"
  },
  {
    "text": "Well, let's see. Now we have to tell\nyou how it works. ",
    "start": "1454120",
    "end": "1461586"
  },
  {
    "text": "It conveniently breaks up\ninto various pieces. I'd like to look now\nat the matcher.",
    "start": "1461586",
    "end": "1468679"
  },
  {
    "start": "1467000",
    "end": "1615000"
  },
  {
    "text": "The matcher has the following\nbasic structure. It's a box that takes as its\ninput an expression and a",
    "start": "1468680",
    "end": "1484500"
  },
  {
    "text": "pattern, and it turns\nout a dictionary.",
    "start": "1484500",
    "end": "1493570"
  },
  {
    "start": "1493570",
    "end": "1501529"
  },
  {
    "text": "A dictionary, remember, is a\nmapping of pattern variables to the values that were found\nby matching, and it puts out",
    "start": "1501530",
    "end": "1509990"
  },
  {
    "text": "another dictionary, which is the\nresult of augmenting this",
    "start": "1509990",
    "end": "1520370"
  },
  {
    "text": "dictionary by what was found\nin matching this expression against this pattern.",
    "start": "1520370",
    "end": "1525600"
  },
  {
    "text": " So that's the matcher. ",
    "start": "1525600",
    "end": "1533900"
  },
  {
    "text": "Now, this is a rather\ncomplicated program, and we can look at it on the overhead\nover here and see, ha, ha,",
    "start": "1533900",
    "end": "1542530"
  },
  {
    "text": "it's very complicated. I just want you to look\nat the shape of it. It's too complicated to look\nat except in pieces.",
    "start": "1542530",
    "end": "1551670"
  },
  {
    "text": "However, it's a fairly large,\ncomplicated program with a lot",
    "start": "1551670",
    "end": "1556720"
  },
  {
    "text": "of sort of indented structure. At the largest scale--",
    "start": "1556720",
    "end": "1562090"
  },
  {
    "text": "you don't try to read those\ncharacters, but at the largest scale, you see that there is a\ncase analysis, which is all",
    "start": "1562090",
    "end": "1569130"
  },
  {
    "text": "these cases lined up. What we're now going to do is\nlook at this in a bit more",
    "start": "1569130",
    "end": "1575400"
  },
  {
    "text": "detail, attempting to understand\nhow it works. Let's go now to the first slide,\nshowing some of the",
    "start": "1575400",
    "end": "1584809"
  },
  {
    "text": "structure of the matcher\nat a large scale. And we see that the matcher, the\nmatcher takes as its input",
    "start": "1584810",
    "end": "1593440"
  },
  {
    "text": "a pattern, an expression,\nand a dictionary. ",
    "start": "1593440",
    "end": "1598580"
  },
  {
    "text": "And there is a case analysis\nhere, which is made out of several cases, some of which\nhave been left out over here,",
    "start": "1598580",
    "end": "1606630"
  },
  {
    "text": "and the general case, which\nI'd like you to see. Let's consider this\ngeneral case.",
    "start": "1606630",
    "end": "1611920"
  },
  {
    "text": "It's a very important pattern.  The problem is that we have\nto examine two trees",
    "start": "1611920",
    "end": "1620650"
  },
  {
    "text": "simultaneously. One of the trees is the tree\nof the expression, and the",
    "start": "1620650",
    "end": "1626230"
  },
  {
    "text": "other is the tree\nof the pattern. We have to compare them with\neach other so that the",
    "start": "1626230",
    "end": "1632540"
  },
  {
    "text": "subexpressions of the expression\nare matched against subexpressions of the pattern.",
    "start": "1632540",
    "end": "1638380"
  },
  {
    "text": "Looking at that in a bit more\ndetail, suppose I had a pattern, a pattern, which was\nthe sum of the product of a",
    "start": "1638380",
    "end": "1649820"
  },
  {
    "text": "thing which we will call x and\na thing which we will call y,",
    "start": "1649820",
    "end": "1658130"
  },
  {
    "text": "and the sum of that, and the\nsame thing we call y. ",
    "start": "1658130",
    "end": "1665070"
  },
  {
    "text": "So we're looking for a sum of a\nproduct whose second--whose second argument is the\nsame as the second",
    "start": "1665070",
    "end": "1673789"
  },
  {
    "text": "argument of the sum. That's a thing you might\nbe looking for.",
    "start": "1673790",
    "end": "1679649"
  },
  {
    "text": "Well, that, as a pattern,\nlooks like this. There is a tree, which consists\nof a sum, and a",
    "start": "1679650",
    "end": "1689660"
  },
  {
    "text": "product with a pattern variable\nquestion mark x and",
    "start": "1689660",
    "end": "1696640"
  },
  {
    "text": "question mark y, the other\npattern variable, and question",
    "start": "1696640",
    "end": "1701960"
  },
  {
    "text": "mark y, just looking at the\nsame, just writing down the list structure in\na different way.",
    "start": "1701960",
    "end": "1708760"
  },
  {
    "text": "Now, suppose we were matching\nthat against an expression which matches it, the sum of,\nsay, the product of 3 and x",
    "start": "1708760",
    "end": "1718990"
  },
  {
    "text": "and, say, x. That's another tree.",
    "start": "1718990",
    "end": "1724380"
  },
  {
    "text": "It's the sum of the product\nof 3 and x and of x.",
    "start": "1724380",
    "end": "1736250"
  },
  {
    "text": " So what I want to do is traverse\nthese two trees",
    "start": "1736250",
    "end": "1742029"
  },
  {
    "text": "simultaneously. And what I'd like to do is\nwalk them like this.",
    "start": "1742030",
    "end": "1748670"
  },
  {
    "text": "I'm going to say are\nthese the same? This is a complicated object.",
    "start": "1748670",
    "end": "1755200"
  },
  {
    "text": "Let's look at the\nleft branches. Well, that could be the car. How does that look? Oh yes, the plus looks\njust fine.",
    "start": "1755200",
    "end": "1761880"
  },
  {
    "text": "But the next thing here is\na complicated thing. Let's look at that. Oh yes, that's pretty\nfine, too. They're both asterisks.",
    "start": "1761880",
    "end": "1768560"
  },
  {
    "text": "Now, whoops! My pattern variable, it\nmatches against the 3.",
    "start": "1768560",
    "end": "1774300"
  },
  {
    "text": "Remember, x equals 3 now. That's in my dictionary, and\nthe dictionary's going to follow along with me:\nx equals three.",
    "start": "1774300",
    "end": "1781490"
  },
  {
    "text": "Ah yes, x equals 3 and y\nequals x, different x.",
    "start": "1781490",
    "end": "1786800"
  },
  {
    "text": "The pattern x is the expression\nx, the pattern y. ",
    "start": "1786800",
    "end": "1793630"
  },
  {
    "text": "Oh yes, the pattern variable\ny, I've already got a value for it. It's x. Is this an x?",
    "start": "1793630",
    "end": "1799050"
  },
  {
    "text": "Oh yeah, sure it is. That's fine. Yep, done. I now have a dictionary,\nwhich I've accumulated",
    "start": "1799050",
    "end": "1807070"
  },
  {
    "text": "by making this walk.  Well, now let's look at this\ngeneral case here and see how",
    "start": "1807070",
    "end": "1814080"
  },
  {
    "text": "that works. Here we have it. I take in a pattern variable--a\npattern, an",
    "start": "1814080",
    "end": "1820520"
  },
  {
    "text": "expression, and a dictionary. And now I'm going to do a\ncomplicated thing here, which",
    "start": "1820520",
    "end": "1826650"
  },
  {
    "text": "is the general case. The expression is made out of\ntwo parts: a left and a right",
    "start": "1826650",
    "end": "1833480"
  },
  {
    "text": "half, in general. Anything that's complicated is\nmade out of two pieces in a Lisp system.",
    "start": "1833480",
    "end": "1839950"
  },
  {
    "text": "Well, now what do\nwe have here? I'm going to match the car's of\nthe two expressions against",
    "start": "1839950",
    "end": "1845840"
  },
  {
    "text": "each other with respect to the\ndictionary I already have, producing a dictionary as its\nvalue, which I will then use",
    "start": "1845840",
    "end": "1855620"
  },
  {
    "text": "for matching the cdr's\nagainst each other. So that's how the dictionary\ntravels, threads the entire structure.",
    "start": "1855620",
    "end": "1863580"
  },
  {
    "text": "And then the result of that is\nthe dictionary for the match of the car and the cdr, and\nthat's what's going to be",
    "start": "1863580",
    "end": "1871230"
  },
  {
    "start": "1869000",
    "end": "2016000"
  },
  {
    "text": "returned as a value. Now, at any point, a\nmatch might fail.",
    "start": "1871230",
    "end": "1876670"
  },
  {
    "text": "It may be the case, for example,\nif we go back and look at an expression that\ndoesn't quite match, like",
    "start": "1876670",
    "end": "1884010"
  },
  {
    "text": "supposing this was a 4.",
    "start": "1884010",
    "end": "1889040"
  },
  {
    "text": "Well, now these two don't match\nany more, because the x that had to be-- sorry, the y\nthat had to be x here and this",
    "start": "1889040",
    "end": "1898190"
  },
  {
    "text": "y has to be 4. But x and 4 were not the same\nobject syntactically.",
    "start": "1898190",
    "end": "1904510"
  },
  {
    "text": "So this wouldn't match, and\nthat would be rejected sometimes, so matches\nmay fail.",
    "start": "1904510",
    "end": "1910220"
  },
  {
    "text": "Now, of course, because this\nmatcher takes the dictionary from the previous match as\ninput, it must be able to",
    "start": "1910220",
    "end": "1917110"
  },
  {
    "text": "propagate the failures. And so that's what the\nfirst clause of this conditional does.",
    "start": "1917110",
    "end": "1923419"
  },
  {
    "text": "It's also true that if it turned\nout that the pattern was not atomic--",
    "start": "1923420",
    "end": "1928539"
  },
  {
    "text": "see, if the pattern was atomic,\nI'd go into this stuff, which we haven't\nlooked at yet. But if the pattern is\nnot atomic and the",
    "start": "1928540",
    "end": "1936250"
  },
  {
    "text": "expression is atomic-- it's not made out of pieces-- then that must be a failure,\nand so we go over here.",
    "start": "1936250",
    "end": "1943560"
  },
  {
    "text": "If the pattern is not atomic\nand the pattern is not a pattern variable-- I have to remind myself\nof that--",
    "start": "1943560",
    "end": "1949716"
  },
  {
    "text": "then we go over here. So that way, failures\nmay occur. ",
    "start": "1949716",
    "end": "1955279"
  },
  {
    "text": "OK, so now let's look at the\ninsides of this thing. Well, the first place to look\nis what happens if I have an",
    "start": "1955280",
    "end": "1962080"
  },
  {
    "text": "atomic pattern? That's very simple. A pattern that's not made\nout of any pieces: foo. That's a nice atomic pattern.",
    "start": "1962080",
    "end": "1969200"
  },
  {
    "text": "Well, here's what we see. If the pattern is atomic, then\nif the expression is atomic,",
    "start": "1969200",
    "end": "1976750"
  },
  {
    "text": "then if they are the same thing,\nthen the dictionary I get is the same one\nas I had before.",
    "start": "1976750",
    "end": "1983120"
  },
  {
    "text": "Nothing's changed. It's just that I matched plus\nagainst plus, asterisk against",
    "start": "1983120",
    "end": "1989160"
  },
  {
    "text": "asterisk, x against x. That's all fine. However, if the pattern is\nnot the one which is the",
    "start": "1989160",
    "end": "1996110"
  },
  {
    "text": "expression, if I have two\nseparate atomic objects, then it was matching plus against\nasterisk, which case I fail.",
    "start": "1996110",
    "end": "2005810"
  },
  {
    "text": "Or if it turns out that the\npattern is atomic but the expression is complicated,\nit's not atomic,",
    "start": "2005810",
    "end": "2013310"
  },
  {
    "text": "then I get a failure.  That's very simple.",
    "start": "2013310",
    "end": "2018799"
  },
  {
    "start": "2016000",
    "end": "2133000"
  },
  {
    "text": "Now, what about the various\nkinds of pattern variables?",
    "start": "2018800",
    "end": "2024040"
  },
  {
    "text": "We had three kinds. I give them the names. They're arbitrary constants,\narbitrary variables, and",
    "start": "2024040",
    "end": "2030990"
  },
  {
    "text": "arbitrary expressions. A question mark x is an\narbitrary expression.",
    "start": "2030990",
    "end": "2041210"
  },
  {
    "text": "A question mark cx is an\narbitrary constant, and a question mark vx is an\narbitrary variable.",
    "start": "2041210",
    "end": "2048536"
  },
  {
    "text": "Well, what do we do here? Looking at this, we see that\nif I have an arbitrary",
    "start": "2048537",
    "end": "2054138"
  },
  {
    "text": "constant, if the pattern is an\narbitrary constant, then it had better be the case\nthat the expression",
    "start": "2054139",
    "end": "2059560"
  },
  {
    "text": "had better be a constant. If the expression is\nnot a constant, then that match fails. If it is a constant, however,\nthen I wish to extend the",
    "start": "2059560",
    "end": "2066780"
  },
  {
    "text": "dictionary. I wish to extend the dictionary\nwith that pattern",
    "start": "2066780",
    "end": "2072379"
  },
  {
    "text": "being remembered to be that\nexpression using the old dictionary as a starting\npoint.",
    "start": "2072380",
    "end": "2077899"
  },
  {
    "text": " So really, for arbitrary\nvariables, I have to check",
    "start": "2077900",
    "end": "2084179"
  },
  {
    "text": "first if the expression is a\nvariable by matching against. If so, it's worth extending\nthe dictionary so that the",
    "start": "2084179",
    "end": "2090750"
  },
  {
    "text": "pattern is remembered to\nbe matched against that expression, given the original\ndictionary, and this makes a",
    "start": "2090750",
    "end": "2095899"
  },
  {
    "text": "new dictionary. Now, it has to check. There's a sorts of failure\ninside extend dictionary,",
    "start": "2095900",
    "end": "2103860"
  },
  {
    "text": "which is that-- if one of these pattern\nvariables already has a value",
    "start": "2103860",
    "end": "2109200"
  },
  {
    "text": "and I'm trying to match the\nthing against something else which is not equivalent to the\none that I've already matched",
    "start": "2109200",
    "end": "2115310"
  },
  {
    "text": "it against once, then a failure\nwill come flying out of here, too. And I will see that some time.",
    "start": "2115310",
    "end": "2122890"
  },
  {
    "text": "And finally, an arbitrary\nexpression does not have to check anything syntactic about\nthe expression that's being",
    "start": "2122890",
    "end": "2129010"
  },
  {
    "text": "matched, so all it does is\nit's an extension of the dictionary.",
    "start": "2129010",
    "end": "2134355"
  },
  {
    "start": "2133000",
    "end": "2328000"
  },
  {
    "text": "So you've just seen a complete,\nvery simple matcher. Now, one of the things that's\nrather remarkable about this",
    "start": "2134355",
    "end": "2141640"
  },
  {
    "text": "is people pay an awful lot of\nmoney these days for someone to make a, quote, AI expert\nsystem that has nothing more",
    "start": "2141640",
    "end": "2149290"
  },
  {
    "text": "in it than a matcher and maybe\nan instantiater like this. But it's very easy to do, and\nnow, of course, you can start",
    "start": "2149290",
    "end": "2155780"
  },
  {
    "text": "up a little start-up company and\nmake a couple of megabucks in the next week taking some\npeople for a ride.",
    "start": "2155780",
    "end": "2161835"
  },
  {
    "text": " 20 years ago, this\nwas remarkable,",
    "start": "2161835",
    "end": "2167510"
  },
  {
    "text": "this kind of program. But now, this is sort of easy. You can teach it to freshmen.",
    "start": "2167510",
    "end": "2173660"
  },
  {
    "text": "Well, now there's an\ninstantiater as well. ",
    "start": "2173660",
    "end": "2179980"
  },
  {
    "text": "The problem is they're all\ngoing off and making more money than I do. But that's always been\ntrue of universities.",
    "start": "2179980",
    "end": "2186660"
  },
  {
    "text": "As expression, the purpose of\nthe instantiater is to make",
    "start": "2186660",
    "end": "2193140"
  },
  {
    "text": "expressions given a dictionary\nand a skeleton.",
    "start": "2193140",
    "end": "2199244"
  },
  {
    "start": "2199245",
    "end": "2204290"
  },
  {
    "text": "And that's not very\nhard at all. We'll see that very simply in\nthe next, the next slide here.",
    "start": "2204290",
    "end": "2213590"
  },
  {
    "text": "To instantiate a skeleton,\ngiven a particular dictionary-- oh, this is easy.",
    "start": "2213590",
    "end": "2219650"
  },
  {
    "text": "We're going to do a recursive\ntree walk over the skeleton. And for everything which is\na skeleton variable--",
    "start": "2219650",
    "end": "2226540"
  },
  {
    "text": "I don't know, call it a\nskeleton evaluation. That's the name and the abstract\nsyntax that I give it in this program: a skeleton\nevaluation, a thing beginning",
    "start": "2226540",
    "end": "2233610"
  },
  {
    "text": "with a colon in the rules. For anything of that case, I'm\ngoing to look up the answer in",
    "start": "2233610",
    "end": "2241849"
  },
  {
    "text": "the dictionary, and we'll worry\nabout that in a second. Let's look at this as a whole.",
    "start": "2241850",
    "end": "2247700"
  },
  {
    "text": "Here, I have-- I'm going to instantiate a\nskeleton, given a dictionary.",
    "start": "2247700",
    "end": "2252740"
  },
  {
    "text": "Well, I'm going to define some\ninternal loop right there, and",
    "start": "2252740",
    "end": "2258300"
  },
  {
    "text": "it's going to do something\nvery simple. Even if a skeleton--even if a\nskeleton is simple and atomic,",
    "start": "2258300",
    "end": "2264599"
  },
  {
    "text": "in which case it's nothing more\nthan giving the skeleton back as an answer, or in\nthe general case, it's",
    "start": "2264600",
    "end": "2271140"
  },
  {
    "text": "complicated, in which case\nI'm going to make up the",
    "start": "2271140",
    "end": "2276150"
  },
  {
    "text": "expression which is the result\nof instantiating-- calling this loop\nrecursively-- instantiating the car of the\nskeleton and the cdr.",
    "start": "2276150",
    "end": "2284870"
  },
  {
    "text": "So here is a recursive\ntree walk. However, if it turns out to be a\nskeleton evaluation, a colon",
    "start": "2284870",
    "end": "2292410"
  },
  {
    "text": "expression in the skeleton, then\nwhat I'm going to do is",
    "start": "2292410",
    "end": "2298020"
  },
  {
    "text": "find the expression that's\nin the colon-- the CADR in this case. It's a piece of abstract syntax\nhere, so I can change",
    "start": "2298020",
    "end": "2305110"
  },
  {
    "text": "my representation of rules. I'm going to evaluate that\nrelative to this dictionary,",
    "start": "2305110",
    "end": "2311330"
  },
  {
    "text": "whatever evaluation means. We'll find out a lot about\nthat sometime. And the result of that\nis my answer.",
    "start": "2311330",
    "end": "2319650"
  },
  {
    "text": "so. I start up this loop-- here's\nmy initialization-- by calling it with the whole\nskeleton, and this will just",
    "start": "2319650",
    "end": "2324900"
  },
  {
    "text": "do a recursive decomposition\ninto pieces.  Now, one more little bit\nof detail is what",
    "start": "2324900",
    "end": "2335089"
  },
  {
    "start": "2328000",
    "end": "2409000"
  },
  {
    "text": "happens inside evaluate? I can't tell you that\nin great detail. I'll tell you a little\nbit of it.",
    "start": "2335090",
    "end": "2341650"
  },
  {
    "text": "Later, we're going to see--look\ninto this in much more detail. To evaluate some form, some\nexpression with respect to a",
    "start": "2341650",
    "end": "2350119"
  },
  {
    "text": "dictionary, if the expression is\nan atomic object, well, I'm",
    "start": "2350120",
    "end": "2355355"
  },
  {
    "text": "going to go look it up. Nothing very exciting there.",
    "start": "2355355",
    "end": "2360610"
  },
  {
    "text": "Otherwise, I'm going to do\nsomething complicated here, which is I'm going to apply a\nprocedure which is the result",
    "start": "2360610",
    "end": "2366789"
  },
  {
    "text": "of looking up the operator part\nin something that we're going to find out\nabout someday.",
    "start": "2366790",
    "end": "2372150"
  },
  {
    "text": "I want you realize you're\nseeing magic now. This magic will become clear\nvery soon, but not today.",
    "start": "2372150",
    "end": "2380000"
  },
  {
    "text": "Then I'm looking at--looking\nup all the pieces, all the arguments to that in\nthe dictionary.",
    "start": "2380000",
    "end": "2388460"
  },
  {
    "text": "So I don't want you to look\nat this in detail. I want you to say that there's\nmore going on here, and we're",
    "start": "2388460",
    "end": "2394329"
  },
  {
    "text": "going to see more about this. But it's--",
    "start": "2394330",
    "end": "2399490"
  },
  {
    "text": "the magic is going to stop. This part has to do with Lisp,\nand it's the end of that.",
    "start": "2399490",
    "end": "2407140"
  },
  {
    "text": " OK, so now we know about\nmatching and instantiation.",
    "start": "2407140",
    "end": "2415040"
  },
  {
    "start": "2409000",
    "end": "2820000"
  },
  {
    "text": "Are there any questions\nfor this segment? ",
    "start": "2415040",
    "end": "2427935"
  },
  {
    "text": "AUDIENCE: I have a question. PROFESSOR: Yes. AUDIENCE: Is it possible to\nbring up a previous slide?",
    "start": "2427936",
    "end": "2433599"
  },
  {
    "text": "It's about this define\nmatch pattern. PROFESSOR: Yes. You'd like to see the overall\nslide define match pattern.",
    "start": "2433600",
    "end": "2440590"
  },
  {
    "text": "Can somebody put up the-- no, the overhead. That's the biggest scale one. What part would you\nlike to see?",
    "start": "2440590",
    "end": "2447640"
  },
  {
    "text": "AUDIENCE: Well, the\ntop would be fine. Any of the parts where you're\npassing failed.",
    "start": "2447640",
    "end": "2454540"
  },
  {
    "text": "PROFESSOR: Yes. AUDIENCE: The idea is to pass\nfailed back to the dictionary; is that right? PROFESSOR: The dictionary is the\nanswer to a match, right?",
    "start": "2454540",
    "end": "2465180"
  },
  {
    "text": "And it is either some mapping\nor there's no match.",
    "start": "2465180",
    "end": "2473150"
  },
  {
    "text": "It doesn't match. AUDIENCE: Right. PROFESSOR: So what you're seeing\nover here is, in fact, because the fact that a match\nmay have another match pass in",
    "start": "2473150",
    "end": "2481620"
  },
  {
    "text": "the dictionary, as you see in\nthe general case down here. Here's the general case where\na match passes another match",
    "start": "2481620",
    "end": "2487325"
  },
  {
    "text": "to the dictionary. When I match the cdr's, I match\nthem in the dictionary that is resulting from\nmatching the car's.",
    "start": "2487325",
    "end": "2496070"
  },
  {
    "text": "OK, that's what I have here. So because of that, if the match\nof the car's fails, then",
    "start": "2496070",
    "end": "2501430"
  },
  {
    "text": "it may be necessary that the\nmatch of the cdr's propagates that failure, and that's\nwhat the first line is.",
    "start": "2501430",
    "end": "2508570"
  },
  {
    "text": "AUDIENCE: OK, well, I'm still\nunclear what matches-- what comes out of one instance\nof the match?",
    "start": "2508570",
    "end": "2514799"
  },
  {
    "text": "PROFESSOR: One of two\npossibilities. Either the symbol failed, which\nmeans there is no match. AUDIENCE: Right.",
    "start": "2514800",
    "end": "2519840"
  },
  {
    "text": "PROFESSOR: Or some mapping,\nwhich is an abstract thing right now, and you should know\nabout the structure of it,",
    "start": "2519840",
    "end": "2526480"
  },
  {
    "text": "which relates the pattern\nvariables to their values as",
    "start": "2526480",
    "end": "2533170"
  },
  {
    "text": "picked up in the match. AUDIENCE: OK, so it is-- PROFESSOR: That's constructed\nby extend dictionary.",
    "start": "2533170",
    "end": "2538809"
  },
  {
    "text": "AUDIENCE: So the recursive\nnature brings about the fact that if ever a failed gets\npassed out of any calling of",
    "start": "2538810",
    "end": "2548290"
  },
  {
    "text": "match, then the first condition\nwill pick it up-- PROFESSOR: And just propagate\nit along without any further ado, right.",
    "start": "2548290",
    "end": "2553530"
  },
  {
    "text": "AUDIENCE: Oh, right. OK. PROFESSOR: That's just the\nfastest way to get that failure out of there. ",
    "start": "2553530",
    "end": "2563260"
  },
  {
    "text": "Yes. AUDIENCE: If I don't fail, that\nmeans that I've matched a pattern, and I run the procedure\nextend dict and then",
    "start": "2563260",
    "end": "2571230"
  },
  {
    "text": "pass in the pattern\nin the expression.  But the substitution will\nnot be made at that",
    "start": "2571230",
    "end": "2577290"
  },
  {
    "text": "point; is that right? I'm just-- PROFESSOR: No, no. There's no substitution being\nthere because there's no skeleton to be substituted in.",
    "start": "2577290",
    "end": "2582520"
  },
  {
    "text": "AUDIENCE: Right. So what-- PROFESSOR: All you've got there\nis we're making up the dictionary for later\nsubstitution.",
    "start": "2582520",
    "end": "2588270"
  },
  {
    "text": "AUDIENCE: And what would the\ndictionary look like? Is it ordered pairs?",
    "start": "2588270",
    "end": "2593540"
  },
  {
    "text": "PROFESSOR: That's--that's\nnot told to you. We're being abstract. AUDIENCE: OK. PROFESSOR: Why do you\nwant to know?",
    "start": "2593540",
    "end": "2598849"
  },
  {
    "text": "What it is, it's a function. It's a function. AUDIENCE: Well, the reason\nI want to know is-- PROFESSOR: A function\nabstractly is a set of ordered pairs.",
    "start": "2598850",
    "end": "2605130"
  },
  {
    "text": "It could be implemented as\na set of list pairs. It could be implemented as some\nfancy table mechanism.",
    "start": "2605130",
    "end": "2612590"
  },
  {
    "text": "It could be implemented\nas a function. And somehow, I'm building\nup a function.",
    "start": "2612590",
    "end": "2618500"
  },
  {
    "text": "But I'm not telling you. That's up to George, who's going\nto build that later. ",
    "start": "2618500",
    "end": "2629430"
  },
  {
    "text": "I know you really badly want\nto write concrete things. I'm not going to let\nyou do that. AUDIENCE: Well, let me at\nleast ask, what is the",
    "start": "2629430",
    "end": "2636020"
  },
  {
    "text": "important information\nthere that's being passed to extend dict? I want to pass the\npattern I found--",
    "start": "2636020",
    "end": "2641720"
  },
  {
    "text": "PROFESSOR: Yes. The pattern that's matched\nagainst the expression. You want to have the pattern,\nwhich happens to be in those",
    "start": "2641720",
    "end": "2647680"
  },
  {
    "text": "cases pattern variables,\nright? All of those three\ncases for extend dict are pattern variables.",
    "start": "2647680",
    "end": "2653220"
  },
  {
    "text": "AUDIENCE: Right. PROFESSOR: So you have a pattern\nvariable that is to be given a value in a dictionary.",
    "start": "2653220",
    "end": "2658965"
  },
  {
    "text": "AUDIENCE: Mm-hmm. PROFESSOR: The value is the\nexpression that it matched against. The dictionary is the\nset of things I've already",
    "start": "2658965",
    "end": "2667260"
  },
  {
    "text": "figured out that I have\nmemorized or learned. And I am going to make a new\ndictionary, which is extended",
    "start": "2667260",
    "end": "2673250"
  },
  {
    "text": "from the original one by having\nthat pattern variable have a value with the\nnew dictionary.",
    "start": "2673250",
    "end": "2679880"
  },
  {
    "text": "AUDIENCE: I guess what I don't\nunderstand is why can't the substitution be made right\nas soon as you find-- PROFESSOR: How do I know what\nI'm going to substitute? I don't know anything\nabout this skeleton.",
    "start": "2679880",
    "end": "2687590"
  },
  {
    "text": "This pattern, this matcher\nis an independent unit. AUDIENCE: Oh, I see. OK. PROFESSOR: Right? AUDIENCE: Yeah. PROFESSOR: I take the matcher.",
    "start": "2687590",
    "end": "2693200"
  },
  {
    "text": "I apply the matcher. If it matches, then it was worth\ndoing instantiation. AUDIENCE: OK, good.",
    "start": "2693200",
    "end": "2698515"
  },
  {
    "text": "Yeah. PROFESSOR: OK? AUDIENCE: Can you just do that\nanswer again using that example on the board?",
    "start": "2698516",
    "end": "2704940"
  },
  {
    "text": "You know, what you just passed\nback to the matcher. PROFESSOR: Oh yes. OK, yes. You're looking at\nthis example.",
    "start": "2704940",
    "end": "2710660"
  },
  {
    "text": "At this point when I'm\ntraversing this structure, I get to here: x.",
    "start": "2710660",
    "end": "2716630"
  },
  {
    "text": "I have some dictionary,\npresumably an empty dictionary at this point if this is\nthe whole expression.",
    "start": "2716630",
    "end": "2722020"
  },
  {
    "text": "So I have an empty dictionary,\nand I've matched x against 3. So now, after this point,\nthe dictionary",
    "start": "2722020",
    "end": "2728850"
  },
  {
    "text": "contains x is 3, OK? Now, I continue walking\nalong here.",
    "start": "2728850",
    "end": "2735290"
  },
  {
    "text": "I see y. Now, this is a particular\nx, a pattern x. I see y, a pattern y.",
    "start": "2735290",
    "end": "2741690"
  },
  {
    "text": "The dictionary says, oh yes, the\npattern y is the symbol x",
    "start": "2741690",
    "end": "2748940"
  },
  {
    "text": "because I've got\na match there. So the dictionary now contains\nat this point two entries.",
    "start": "2748940",
    "end": "2755380"
  },
  {
    "text": "The pattern x is 3, and the\npattern y is the expression x.",
    "start": "2755380",
    "end": "2762180"
  },
  {
    "text": "Now, I get that, I can\nwalk along further. I say, oh, pattern y\nalso wants to be 4.",
    "start": "2762180",
    "end": "2768100"
  },
  {
    "text": "But that isn't possible,\nproducing a failure. ",
    "start": "2768100",
    "end": "2774339"
  },
  {
    "text": "Thank you. Let's take a break. ",
    "start": "2774340",
    "end": "2822380"
  },
  {
    "start": "2820000",
    "end": "3163000"
  },
  {
    "text": "OK, you're seeing your first\nvery big and hairy program. Now, of course, one of the goals\nof this subsegment is to",
    "start": "2822380",
    "end": "2830380"
  },
  {
    "text": "get you to be able to read\nsomething like this and not be afraid of it. This one's only about\nfour pages of code.",
    "start": "2830380",
    "end": "2836715"
  },
  {
    "text": "By the end of the subject, I\nhope a 50-page program will not look particularly\nfrightening.",
    "start": "2836715",
    "end": "2842510"
  },
  {
    "text": "But I don't expect-- and I don't\nwant you to think that I expect you to be getting\nit as it's coming out.",
    "start": "2842510",
    "end": "2849200"
  },
  {
    "text": "You're supposed to feel the\nflavor of this, OK? And then you're supposed to\nthink about it because it is a big program.",
    "start": "2849200",
    "end": "2855220"
  },
  {
    "text": "There's a lot of stuff\ninside this program.",
    "start": "2855220",
    "end": "2860812"
  },
  {
    "text": "Now, I've told you about the\nlanguage we're implementing, the pattern match substitution\nlanguage.",
    "start": "2860812",
    "end": "2866770"
  },
  {
    "text": "I showed you some rules. And I've told you about matching\nand instantiation, which are the two halves\nof how a rule works.",
    "start": "2866770",
    "end": "2874240"
  },
  {
    "text": "Now we have to understand the\ncontrol structure by which the rules are applied to the\nexpressions so as to do",
    "start": "2874240",
    "end": "2883220"
  },
  {
    "text": "algebraic simplification.  Now, that's also a big\ncomplicated mess.",
    "start": "2883220",
    "end": "2892060"
  },
  {
    "text": "The problem is that there is\na variety of interlocking, interwoven loops, if you\nwill, involved in this.",
    "start": "2892060",
    "end": "2900140"
  },
  {
    "text": "For one thing, I\nhave to apply-- I have to examine every\nsubexpression of my expression",
    "start": "2900140",
    "end": "2905910"
  },
  {
    "text": "that I'm trying to simplify. That we know how to do. It's a car cdr recursion of some\nsort, or something like",
    "start": "2905910",
    "end": "2914089"
  },
  {
    "text": "that, and some sort\nof tree walk. And that's going to\nbe happening. Now, for every such place, every\nnode that I get to in",
    "start": "2914090",
    "end": "2923660"
  },
  {
    "text": "doing my traversal of the\nexpression I'm trying to simplify, I want to apply\nall of the rules.",
    "start": "2923660",
    "end": "2933390"
  },
  {
    "text": "Every rule is going to\nlook at every node. I'm going to rotate\nthe rules around. ",
    "start": "2933390",
    "end": "2941660"
  },
  {
    "text": "Now, either a rule will\nor will not match.",
    "start": "2941660",
    "end": "2947530"
  },
  {
    "text": "If the rule does not match,\nthen it's not very interesting. If the rule does match, then I'm\ngoing to replace that node",
    "start": "2947530",
    "end": "2956090"
  },
  {
    "text": "in the expression by an\nalternate expression. I'm actually going\nto make a new",
    "start": "2956090",
    "end": "2961360"
  },
  {
    "text": "expression, which contains-- everything contains that new\nvalue, the result of",
    "start": "2961360",
    "end": "2966560"
  },
  {
    "text": "substituting into the skeleton,\ninstantiating the skeleton for that rule\nat this level.",
    "start": "2966560",
    "end": "2972480"
  },
  {
    "text": "But no one knows whether that\nthing that I instantiated there is in simplified form.",
    "start": "2972480",
    "end": "2978180"
  },
  {
    "text": "So we're going to have to\nsimplify that, somehow to call the simplifier on the thing\nthat I just constructed.",
    "start": "2978180",
    "end": "2983369"
  },
  {
    "text": " And then when that's done, then\nI sort of can build that",
    "start": "2983370",
    "end": "2988710"
  },
  {
    "text": "into the expression I\nwant as my answer. Now, there is a basic idea\nhere, which I will call a",
    "start": "2988710",
    "end": "2995490"
  },
  {
    "text": "garbage- in, garbage-out\nsimplifier. ",
    "start": "2995490",
    "end": "3001280"
  },
  {
    "text": "It's a kind of recursive\nsimplifier. And what happens is the way you\nsimplify something is that",
    "start": "3001280",
    "end": "3006750"
  },
  {
    "text": "simple objects like variables\nare simple. Compound objects, well,\nI don't know.",
    "start": "3006750",
    "end": "3014109"
  },
  {
    "text": "What I'm going to do is I'm\ngoing to build up from simple objects, trying to make simple\nthings by assuming that the",
    "start": "3014110",
    "end": "3019940"
  },
  {
    "text": "pieces they're made\nout of are simple.  That's what's happening here.",
    "start": "3019940",
    "end": "3027830"
  },
  {
    "text": "Well, now, if we look\nat the first slide-- no, overhead, overhead. If we look at the overhead, we\nsee a very complicated program",
    "start": "3027830",
    "end": "3035780"
  },
  {
    "text": "like we saw before for the\nmatcher, so complicated that you can't read it like that.",
    "start": "3035780",
    "end": "3041260"
  },
  {
    "text": "I just want you to get the feel\nof the shape of it, and the shape of it is that this\nprogram has various",
    "start": "3041260",
    "end": "3048880"
  },
  {
    "text": "subprograms in it.  One of them--this part is the\npart for traversing the",
    "start": "3048880",
    "end": "3057080"
  },
  {
    "text": "expression, and this part is\nthe part for trying rules.",
    "start": "3057080",
    "end": "3062560"
  },
  {
    "text": "Now, of course, we can look at\nthat in some more detail. Let's look at--let's look at the\nfirst transparency, right?",
    "start": "3062560",
    "end": "3073369"
  },
  {
    "text": "The simplifier is made\nout of several parts. Now, remember at the very\nbeginning, the simplifier is",
    "start": "3073370",
    "end": "3080500"
  },
  {
    "text": "the thing which takes a rules--a\nset of rules and produces a program which will\nsimplify it relative to them.",
    "start": "3080500",
    "end": "3087190"
  },
  {
    "text": " So here we have our\nsimplifier.",
    "start": "3087190",
    "end": "3092390"
  },
  {
    "text": "It takes a rule set. And in the context where that\nrule set is defined, there are",
    "start": "3092390",
    "end": "3099440"
  },
  {
    "text": "various other definitions\nthat are done here. And then the result of this\nsimplifier procedure is, in",
    "start": "3099440",
    "end": "3106660"
  },
  {
    "text": "fact, one of the procedures\nthat was defined. Simplify x.",
    "start": "3106660",
    "end": "3112400"
  },
  {
    "text": "What I'm returning as the\nvalue of calling the simplifier on a set of rules is\na procedure, the simplify x",
    "start": "3112400",
    "end": "3121340"
  },
  {
    "text": "procedure, which is defined in\nthat context, which is a simplification procedure\nappropriate for using those",
    "start": "3121340",
    "end": "3128200"
  },
  {
    "text": "set of rules. ",
    "start": "3128200",
    "end": "3134930"
  },
  {
    "text": "That's what I have there. Now, the first two of these\nprocedures, this one and this",
    "start": "3134930",
    "end": "3141440"
  },
  {
    "text": "one, are together going to be\nthe recursive traversal of an expression.",
    "start": "3141440",
    "end": "3146950"
  },
  {
    "text": "This one is the general\nsimplification for any expression, and this is the\nthing which simplifies a list",
    "start": "3146950",
    "end": "3152619"
  },
  {
    "text": "of parts of an expression. Nothing more. For each of those, we're going\nto do something complicated,",
    "start": "3152620",
    "end": "3158770"
  },
  {
    "text": "which involves trying\nthe rules. Now, we should look at\nthe various parts. ",
    "start": "3158770",
    "end": "3165290"
  },
  {
    "start": "3163000",
    "end": "3271000"
  },
  {
    "text": "Well let's look first at the\nrecursive traversal of an expression. And this is done in a\nsort of simple way.",
    "start": "3165290",
    "end": "3174210"
  },
  {
    "text": "This is a little nest of\nrecursive procedures.",
    "start": "3174210",
    "end": "3179310"
  },
  {
    "text": "And what we have here\nare two procedures-- one for simplifying an\nexpression, and one for",
    "start": "3179310",
    "end": "3186600"
  },
  {
    "text": "simplifying parts of\nan expression. And the way this works\nis very simple.",
    "start": "3186600",
    "end": "3192130"
  },
  {
    "text": "If the expression I'm trying\nto simplify is a compound expression, I'm going to\nsimplify all the parts of it.",
    "start": "3192130",
    "end": "3199920"
  },
  {
    "text": "And that's calling--that\nprocedure, simplify parts, is going to make up a new\nexpression with all the parts",
    "start": "3199920",
    "end": "3205020"
  },
  {
    "text": "simplified, which I'm then\ngoing to try the rules on over here.",
    "start": "3205020",
    "end": "3210839"
  },
  {
    "text": "If it turns out that the\nexpression is not compound, if it's simple, like just a symbol\nor something like pi,",
    "start": "3210840",
    "end": "3217990"
  },
  {
    "text": "then in any case, I'm going to\ntry the rules on it because it might be that I want in my set\nof rules to expand pi to 3.14159265358979,\ndot, dot, dot.",
    "start": "3217990",
    "end": "3228289"
  },
  {
    "text": "But I may not. But there is no reason\nnot to do it. Now, if I want to simplify the\nparts, well, that's easy too.",
    "start": "3228290",
    "end": "3239010"
  },
  {
    "text": "Either the expression is an\nempty one, there's no more parts, in which case I have\nthe empty expression.",
    "start": "3239010",
    "end": "3245730"
  },
  {
    "text": "Otherwise, I'm going to make a\nnew expression by cons, which",
    "start": "3245730",
    "end": "3251460"
  },
  {
    "text": "is the result of simplifying\nthe first part of the expression, the car, and\nsimplifying the rest of the expression, which is the cdr.",
    "start": "3251460",
    "end": "3261060"
  },
  {
    "text": "Now, the reason why I'm showing\nyou this sort of stuff this way is because I want you\nget the feeling for the",
    "start": "3261060",
    "end": "3266740"
  },
  {
    "text": "various patterns that are very\nimportant when writing programs. And this could be\nwritten a different way.",
    "start": "3266740",
    "end": "3273970"
  },
  {
    "start": "3271000",
    "end": "3380000"
  },
  {
    "text": "There's another way to write\nsimplified expressions so there would be only\none of them. There would only be one\nlittle procedure here.",
    "start": "3273970",
    "end": "3279530"
  },
  {
    "text": "Let me just write that on the\nblackboard to give you a feeling for that. ",
    "start": "3279530",
    "end": "3289520"
  },
  {
    "text": "This in another idiom,\nif you will. ",
    "start": "3289520",
    "end": "3298449"
  },
  {
    "text": "To simplify an expression\ncalled x, what am I going to do? I'm going to try the rules on\nthe following situation.",
    "start": "3298449",
    "end": "3311099"
  },
  {
    "text": "If-- on the following expression-- compound, just like\nwe had before. ",
    "start": "3311100",
    "end": "3321060"
  },
  {
    "text": "If the expression is compound,\nwell, what am I going to do? I'm going to simplify\nall the parts. But I already have a cdr\nrecursion, a common pattern of",
    "start": "3321060",
    "end": "3330950"
  },
  {
    "text": "usage, which has been captured\nas a high-order procedure. It's called map.",
    "start": "3330950",
    "end": "3336040"
  },
  {
    "text": "So I'll just write that here. Map simplify the expression,\nall the parts of the",
    "start": "3336040",
    "end": "3347290"
  },
  {
    "text": "expression. This says apply the\nsimplification operation,",
    "start": "3347290",
    "end": "3352580"
  },
  {
    "text": "which is this one, every part\nof the expression, and then that cuts those up into a list.\nIt's every element of",
    "start": "3352580",
    "end": "3362440"
  },
  {
    "text": "the list which the expression is\nassumed to be made out of, and otherwise, I have\nthe expression.",
    "start": "3362440",
    "end": "3368910"
  },
  {
    "text": "So I don't need the helper\nprocedure, simplify parts, because that's really this.",
    "start": "3368910",
    "end": "3375369"
  },
  {
    "text": "So sometimes, you just\nwrite it this way. It doesn't matter very much.",
    "start": "3375370",
    "end": "3380829"
  },
  {
    "start": "3380000",
    "end": "3599000"
  },
  {
    "text": "Well, now let's take\na look at-- let's just look at how\nyou try rules.",
    "start": "3380830",
    "end": "3387660"
  },
  {
    "text": "If you look at this slide,\nwe see this is a complicated mess also.",
    "start": "3387660",
    "end": "3393680"
  },
  {
    "text": "I'm trying rules on\nan expression. It turns out the expression\nI'm trying it on is some subexpression now of the\nexpression I started with.",
    "start": "3393680",
    "end": "3400490"
  },
  {
    "text": "Because the thing I just\narranged allowed us to try every subexpression. ",
    "start": "3400490",
    "end": "3406050"
  },
  {
    "text": "So now here we're taking in\na subexpression of the expression we started with.",
    "start": "3406050",
    "end": "3411079"
  },
  {
    "text": "That's what this is. And what we're going to define\nhere is a procedure called scan, which is going\nto try every rule.",
    "start": "3411080",
    "end": "3418640"
  },
  {
    "text": "And we're going to start it up\non the whole set of rules. This is going to go cdr-ing down\nthe rules, if you will,",
    "start": "3418640",
    "end": "3426670"
  },
  {
    "text": "looking for a rule to apply. And when it finds one,\nit'll do the job.",
    "start": "3426670",
    "end": "3434140"
  },
  {
    "text": "Well, let's take a look at\nhow try rules works. It's very simple:\nthe scan rules.",
    "start": "3434140",
    "end": "3439720"
  },
  {
    "text": "Scan rules, the way\nof scanning. Well, is it so simple? It's a big program, of course.",
    "start": "3439720",
    "end": "3445510"
  },
  {
    "text": "We take a bunch of rules,\nwhich is a sublist of the list of rules.",
    "start": "3445510",
    "end": "3450700"
  },
  {
    "text": "We've tried some of them\nalready, and they've not been appropriate, so we\nget to some here. We get to move to\nthe next one.",
    "start": "3450700",
    "end": "3456490"
  },
  {
    "text": "If there are no more rules, well\nthen, there's nothing I can do with this expression,\nand it's simplified.",
    "start": "3456490",
    "end": "3462200"
  },
  {
    "text": "However, if it turns out that\nthere are still rules to be done, then let's match the\npattern of the first rule",
    "start": "3462200",
    "end": "3472180"
  },
  {
    "text": "against the expression using the\nempty dictionary to start with and use that as\nthe dictionary.",
    "start": "3472180",
    "end": "3480270"
  },
  {
    "text": "If that happens to\nbe a failure, try the rest of the rules. ",
    "start": "3480270",
    "end": "3486540"
  },
  {
    "text": "That's all it says here. It says discard that rule. Otherwise, well, I'm going to\nget the skeleton of the first",
    "start": "3486540",
    "end": "3494640"
  },
  {
    "text": "rule, instantiate that relative\nto the dictionary, and simplify the result, and\nthat's the expression I want.",
    "start": "3494640",
    "end": "3500940"
  },
  {
    "text": " So although that was a\ncomplicated program, every",
    "start": "3500940",
    "end": "3506380"
  },
  {
    "text": "complicated program is made out\nof a lot of simple pieces. Now, the pattern of recursions\nhere is very complicated.",
    "start": "3506380",
    "end": "3514760"
  },
  {
    "text": "And one of the most important\nthings is not to think about that. If you try to think about the\nactual pattern by which this",
    "start": "3514760",
    "end": "3521130"
  },
  {
    "text": "does something, you're going\nto get very confused. I would.",
    "start": "3521130",
    "end": "3527420"
  },
  {
    "text": "This is not a matter of you\ncan do this with practice. These patterns are hard.",
    "start": "3527420",
    "end": "3533761"
  },
  {
    "text": "But you don't have to\nthink about it. The key to this-- it's very good programming and\nvery good design-- is to know",
    "start": "3533761",
    "end": "3540120"
  },
  {
    "text": "what not to think about. The fact is, going back to this\nslide, I don't have to",
    "start": "3540120",
    "end": "3547540"
  },
  {
    "text": "think about it because I have\nspecifications in my mind for what simplify x does.",
    "start": "3547540",
    "end": "3554000"
  },
  {
    "text": "I don't have to know\nhow it does it. And it may, in fact, call scan\nsomehow through try rules,",
    "start": "3554000",
    "end": "3560720"
  },
  {
    "text": "which it does. And somehow, I've got another\nrecursion going on here. But since I know that simplify\nx is assumed by wishful",
    "start": "3560720",
    "end": "3568470"
  },
  {
    "text": "thinking to produce the\nsimplified result, then I don't have to think\nabout it anymore.",
    "start": "3568470",
    "end": "3573900"
  },
  {
    "text": "I've used it. I've used it in a\nreasonable way. I will get a reasonable\nanswer.",
    "start": "3573900",
    "end": "3579468"
  },
  {
    "text": "And you have to learn how\nto program that way-- with abandon. ",
    "start": "3579468",
    "end": "3587480"
  },
  {
    "text": "Well, there's very little\nleft of this thing. All there is left is a few\ndetails associated with what a",
    "start": "3587480",
    "end": "3593609"
  },
  {
    "text": "dictionary is. And those of you who've been\nitching to know what a dictionary is, well, I will flip\nit up and not tell you",
    "start": "3593610",
    "end": "3601130"
  },
  {
    "text": "anything about it. Dictionaries are easy. It's represented in terms of\nsomething else called an A",
    "start": "3601130",
    "end": "3609570"
  },
  {
    "text": "list, which is a particular\npattern of usage for making",
    "start": "3609570",
    "end": "3614730"
  },
  {
    "text": "tables in lists. They're easy. They're made out of pairs,\nas was asked a bit ago.",
    "start": "3614730",
    "end": "3621670"
  },
  {
    "text": "And there are special procedures\nfor dealing with such things called assq, and you\ncan find them in manuals.",
    "start": "3621670",
    "end": "3627020"
  },
  {
    "text": "I'm not terribly excited\nabout it. The only interesting thing here\nin extend dictionary is I have to extend the dictionary\nwith a pattern, a datum, and a",
    "start": "3627020",
    "end": "3636480"
  },
  {
    "text": "dictionary. This pattern is, in fact, at\nthis point a pattern variable.",
    "start": "3636480",
    "end": "3642896"
  },
  {
    "text": "And what do I want to do? I want to pull out the name of\nthat pattern variable, the",
    "start": "3642896",
    "end": "3648220"
  },
  {
    "text": "pattern variable name, and I'm\ngoing to look up in the dictionary and see if it\nalready has a value.",
    "start": "3648220",
    "end": "3653750"
  },
  {
    "text": "If not, I'm going to\nadd a new one in. If it does have one, if it has a\nvalue, then it had better be",
    "start": "3653750",
    "end": "3660730"
  },
  {
    "text": "equal to the one that was\nalready stored away. And if that's the case, the\ndictionary is what I expected it to be.",
    "start": "3660730",
    "end": "3666940"
  },
  {
    "text": "Otherwise, I fail. So that's easy, too.",
    "start": "3666940",
    "end": "3673430"
  },
  {
    "text": "If you open up any program,\nyou're going to find inside of it lots of little pieces,\nall of which are easy.",
    "start": "3673430",
    "end": "3680000"
  },
  {
    "text": "So at this point, I suppose,\nI've just told you some million-dollar valuable\ninformation.",
    "start": "3680000",
    "end": "3687995"
  },
  {
    "text": "And I suppose at this point\nwe're pretty much done with this program. I'd like to ask about\nquestions.",
    "start": "3687995",
    "end": "3694329"
  },
  {
    "text": "AUDIENCE: Yes, can you give me\nthe words that describe the specification for a simplified\nexpression? PROFESSOR: Sure.",
    "start": "3694330",
    "end": "3699474"
  },
  {
    "text": "A simplified expression takes\nan expression and produces a simplified expression.",
    "start": "3699475",
    "end": "3704838"
  },
  {
    "text": "That's it, OK? How it does it is very easy.",
    "start": "3704838",
    "end": "3711212"
  },
  {
    "text": "In compound expressions, all the\npieces are simplified, and then the rules are tried\non the result.",
    "start": "3711212",
    "end": "3716910"
  },
  {
    "text": "And for simple expressions, you\njust try all the rules. AUDIENCE: So an expression\nis simplified by virtue of the rules?",
    "start": "3716910",
    "end": "3722535"
  },
  {
    "text": "PROFESSOR: That's,\nof course, true. AUDIENCE: Right. PROFESSOR: And the way this\nworks is that simplifi expression, as you see here,\nwhat it does is it breaks the",
    "start": "3722535",
    "end": "3730000"
  },
  {
    "text": "expression down into the\nsmallest pieces, simplifies building up from the bottom\nusing the rules to be the",
    "start": "3730000",
    "end": "3736690"
  },
  {
    "text": "simplifier, to do the\nmanipulations, and constructs a new expression\nas the result.",
    "start": "3736690",
    "end": "3744400"
  },
  {
    "text": "Eventually, one of things you\nsee is that the rules themselves, the try rules, call\na simplified expression",
    "start": "3744400",
    "end": "3750880"
  },
  {
    "text": "on the results when it changes\nsomething, the results of a match. I'm sorry, the results of\ninstantiation of a skeleton",
    "start": "3750880",
    "end": "3759420"
  },
  {
    "text": "for a rule that has matched. So the spec of a simplified\nexpression is that any",
    "start": "3759420",
    "end": "3764569"
  },
  {
    "text": "expression you put into it comes\nout simplified according to those rules.",
    "start": "3764570",
    "end": "3769590"
  },
  {
    "text": "Thank you. Let's take a break. ",
    "start": "3769590",
    "end": "3787924"
  }
]