[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6050"
  },
  {
    "text": "continue to offer high-quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6050",
    "end": "12700"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12700",
    "end": "25846"
  },
  {
    "text": "PROFESSOR: All right. Today we continue our theme\nof approximation, lower bounds",
    "start": "25846",
    "end": "31300"
  },
  {
    "text": "inapproximability. Quick recap of last time. We talked about lots of\ndifferent reductions.",
    "start": "31300",
    "end": "39530"
  },
  {
    "text": "We, I guess, in particular\ntalked about P-tests, AP and L.",
    "start": "39530",
    "end": "44899"
  },
  {
    "text": "And in particular we'll be using\nL-reductions almost exclusively today, except the occasional\nstrict reduction, which",
    "start": "44900",
    "end": "51880"
  },
  {
    "text": "is even stronger, in a sense. So what's an L-reduction?",
    "start": "51880",
    "end": "57117"
  },
  {
    "text": "We're trying to go from one\nproblem A to another problem B. We're given an instance x of\nA. We convert it via function f",
    "start": "57117",
    "end": "65530"
  },
  {
    "text": "to an instance x prime of B.\nThen we imagine that somehow we",
    "start": "65530",
    "end": "70790"
  },
  {
    "text": "obtain a solution. We don't know anything about\nit. y prime to x prime.",
    "start": "70790",
    "end": "76030"
  },
  {
    "text": "That's in B space. And then, in the\nreduction, we're supposed to be able to\nmap any such solution",
    "start": "76030",
    "end": "81159"
  },
  {
    "text": "y prime to x prime via g into\nsolution y of x in A problem--",
    "start": "81160",
    "end": "88040"
  },
  {
    "text": "so that's given by the function\ng-- such that two things hold. The first one is that\nfor f, optimal solution",
    "start": "88040",
    "end": "96070"
  },
  {
    "text": "of x prime should be at\nmost some constant times the optimal solution to x.",
    "start": "96070",
    "end": "101930"
  },
  {
    "text": "So we don't blow\nup OPTs too much. And secondly the\nabsolute difference",
    "start": "101930",
    "end": "107660"
  },
  {
    "text": "between the cost of y\nversus the optimal solution for x should be within a\nconstant factor of this kind",
    "start": "107660",
    "end": "116150"
  },
  {
    "text": "of gap-- additive gap\nbetween the cost of y prime versus the optimal\nsolution to x prime,",
    "start": "116150",
    "end": "124210"
  },
  {
    "text": "meaning that if we were\ngiven a y prime that's very close to optimal\nfor x prime, then the y we produce is very\nclose to optimal for x.",
    "start": "124210",
    "end": "130948"
  },
  {
    "text": "And we want that in\nan additive sense that will imply that things are\ngood in a multiplicative sense.",
    "start": "130949",
    "end": "137069"
  },
  {
    "text": "Last time we proved\nthat for the min case, for minimization problems. If you're curious, I\nworked out the details",
    "start": "137070",
    "end": "144110"
  },
  {
    "text": "for maximization problems. It's a little bit uglier\nin terms of the arithmetic.",
    "start": "144110",
    "end": "149670"
  },
  {
    "text": "But you again get that if\nyou had a constant factor approximation over here, you\npreserve a constant factor",
    "start": "149670",
    "end": "155970"
  },
  {
    "text": "approximation over\nhere, and you only-- you lose a reasonable factor.",
    "start": "155970",
    "end": "161500"
  },
  {
    "text": " We also have that if you\ncan get a PTAS over here,",
    "start": "161500",
    "end": "167119"
  },
  {
    "text": "so you can get an arbitrarily\ngood approximation, you also get a PTAS over here. That was the PTAS reduction.",
    "start": "167119",
    "end": "172380"
  },
  {
    "text": "And it turns out the constant\nin the end is roughly epsilon over alpha beta,\nwhere alpha was this constant,",
    "start": "172380",
    "end": "179709"
  },
  {
    "text": "and beta was this constant. That's what we had before. It's a little bit different.",
    "start": "179710",
    "end": "184730"
  },
  {
    "text": "For small epsilon,\nit's about the same. But for large epsilon, it\ndoes make a difference. And this is why, in\ncase you were confused,",
    "start": "184730",
    "end": "193470"
  },
  {
    "text": "an L-reduction does not\nimply in the maximization case an AP-reduction, because\nyou have this non-linear term.",
    "start": "193470",
    "end": "201030"
  },
  {
    "text": "Here, everything was\nlinear in epsilon. With minimization, that's true.",
    "start": "201030",
    "end": "206319"
  },
  {
    "text": "The L implies AP. But for maximization\nit's not quite true. It's close.",
    "start": "206320",
    "end": "212560"
  },
  {
    "text": "So there's some funny. What I said didn't quite\nmatch this picture. That's an explanation.",
    "start": "212560",
    "end": "218920"
  },
  {
    "text": "And then we did\na few reductions. I claimed that Max\nE3SAT-E5, this was exactly",
    "start": "218920",
    "end": "227680"
  },
  {
    "text": "three distinct\nliterals per clause, exactly five occurrences\nof each variable in five",
    "start": "227680",
    "end": "234790"
  },
  {
    "text": "different clauses. I claimed that was APX-complete. We didn't prove it.",
    "start": "234790",
    "end": "240130"
  },
  {
    "text": "What we did prove is\nthat assuming Max 3SAT is APX-complete, we\nreduce that to Max 3SAT3,",
    "start": "240130",
    "end": "246940"
  },
  {
    "text": "which is at most three\noccurrences, each thing, first by using\nexpander, and then",
    "start": "246940",
    "end": "252200"
  },
  {
    "text": "splitting the constant\nsize-- constant occurrence variables-- with the cycle\nof implications trick.",
    "start": "252200",
    "end": "258190"
  },
  {
    "text": "And then we reduced from\nthat to bounded degree. I think we did\nlike max degree 4.",
    "start": "258190",
    "end": "263800"
  },
  {
    "text": "But all of these can be\ndone in max degree 3. Independent set, vertex\ncover, and dominating set.",
    "start": "263800",
    "end": "270951"
  },
  {
    "text": "Vertex cover we've seen a lot. You want to cover all the\nedges by choosing vertices. Dominating set, you want\nto cover all the vertices by choosing vertices.",
    "start": "270951",
    "end": "276630"
  },
  {
    "text": "Each vertex covers\nits neighbor set. And independent set, for general\ngraphs this is super hard.",
    "start": "276630",
    "end": "283556"
  },
  {
    "text": "But for bounded\ndegree graphs, there is a constant factor\napproximation. This was choosing vertices\nthat induced no edges.",
    "start": "283556",
    "end": "290750"
  },
  {
    "text": "So with that in mind, let's\ndo some more APX-reductions,",
    "start": "290750",
    "end": "295850"
  },
  {
    "text": "APX-hardness,\nusing L-reductions.  So the next problem we're\ngoing to do is Max 2SAT.",
    "start": "295850",
    "end": "306450"
  },
  {
    "start": "306450",
    "end": "312110"
  },
  {
    "text": "So because we're in the world\nof optimization, in some sense the distinction between 2SAT\nand 3SAT is not so important.",
    "start": "312110",
    "end": "319420"
  },
  {
    "text": "It turns out Max 2SAT\nwill be APX-complete just like Max 3SAT was. So when we didn't\nhave Max, of course",
    "start": "319420",
    "end": "325877"
  },
  {
    "text": "the complexities\nwere quite different. 3SAT was hard, 2SAT was easy. With maximization,\nthey're going to be",
    "start": "325877",
    "end": "331430"
  },
  {
    "text": "equivalent in this perspective. So I'm going to\ndo an L-reduction",
    "start": "331430",
    "end": "343150"
  },
  {
    "text": "from independent set of,\nlet's say a degree 3.",
    "start": "343150",
    "end": "352250"
  },
  {
    "text": " So it'll work with\nany constant degree, but we'll get a different\nnumber of occurrences.",
    "start": "352250",
    "end": "359259"
  },
  {
    "text": "And the reduction\nis the following. There are two types of\ngadgets for every vertex.",
    "start": "359260",
    "end": "365240"
  },
  {
    "text": "So I'm given an\nindependent set instance. For every vertex v, we're\ngoing to convert that",
    "start": "365240",
    "end": "371240"
  },
  {
    "text": "into a clause-- namely v. I\nwant v to be true, if possible.",
    "start": "371240",
    "end": "379483"
  },
  {
    "text": "It's a funny way of\nthinking when you're maximizing a number of causes,\nbecause a lot of the clauses won't be satisfied.",
    "start": "379484",
    "end": "384490"
  },
  {
    "text": "But you're going to try to\nput v in the independent set if you can. That's the meaning\nof that clause.",
    "start": "384490",
    "end": "390060"
  },
  {
    "text": "Then for every edge--\nlet's say connecting v to w-- we're going to convert\nthat into a clause which",
    "start": "390060",
    "end": "398070"
  },
  {
    "text": "is not v or not w.",
    "start": "398070",
    "end": "403220"
  },
  {
    "text": "We don't want them both to\nbe in the independent set. That's the meaning of-- yeah.",
    "start": "403220",
    "end": "408794"
  },
  {
    "text": "I'm trying to simulate\nindependent sets. So I don't want\nthese both to be in. This is a 2SAT clause.",
    "start": "408794",
    "end": "415220"
  },
  {
    "text": "So what's the claim here? Suppose you have some\nassignment to the variable.",
    "start": "415220",
    "end": "420800"
  },
  {
    "text": "So there's one variable\nper vertex over here. The idea is that variable should\nindicate whether the vertex is",
    "start": "420800",
    "end": "427900"
  },
  {
    "text": "in the independent set. And the claim is\nthat we will never",
    "start": "427900",
    "end": "433290"
  },
  {
    "text": "violate an edge constraint, or\nit's never useful to violate.",
    "start": "433290",
    "end": "438315"
  },
  {
    "text": "The claim is that there\nexists an OPT-- optimal solution-- satisfying all\nof these edge constraints.",
    "start": "438315",
    "end": "449074"
  },
  {
    "text": " So we're doing Max 2SAT. So we get a point for\nevery one of these things",
    "start": "449075",
    "end": "455610"
  },
  {
    "text": "that we satisfy. And so in particular,\nif you didn't",
    "start": "455610",
    "end": "460790"
  },
  {
    "text": "get this point-- not v or\nnot w-- the converse of this is that they are both in.",
    "start": "460790",
    "end": "468740"
  },
  {
    "text": "Then the idea is\nthat you instead take one of those vertices\nout of the independent set,",
    "start": "468740",
    "end": "474510"
  },
  {
    "text": "and that will be better for you. In general, when you put a\nvariable in an independent set,",
    "start": "474510",
    "end": "479900"
  },
  {
    "text": "it only helps you\nfor one clause. There's only one\noccurrence of positive v in all of these things.",
    "start": "479900",
    "end": "485500"
  },
  {
    "text": "You might have many edges\ncoming into a vertex, and they all prefer the\ncase that v is false.",
    "start": "485500",
    "end": "492350"
  },
  {
    "text": "So things are going to be\neasier if you set v to false. So if you discover a clause like\nthis, which is currently false,",
    "start": "492350",
    "end": "498420"
  },
  {
    "text": "meaning both v and\nw are true, you're going to gain a point\nby setting v to false.",
    "start": "498420",
    "end": "504170"
  },
  {
    "text": "You'll also lose a point, but\nyou'll only lose one point. Potentially, you\ngain many points, but you gain at least one point\nand lose at most one point",
    "start": "504170",
    "end": "511620"
  },
  {
    "text": "by switching from both v\nand w true into just one of them true.",
    "start": "511620",
    "end": "517490"
  },
  {
    "text": "So you can always convert\nwithout losing anything in OPT into a solution that satisfies\nall edge constraints.",
    "start": "517490",
    "end": "524900"
  },
  {
    "text": "And then we know we\nhave an independent set. That's what the edge\nconstraints say.",
    "start": "524900",
    "end": "530070"
  },
  {
    "text": "And therefore the\nremaining problem is to maximize the\nnumber vertices that are in the independent set.",
    "start": "530070",
    "end": "535853"
  },
  {
    "start": "535853",
    "end": "544350"
  },
  {
    "text": "So that means if we're given\nany solution y prime to this Max 2SAT instance, we can convert\nit back to an independent set.",
    "start": "544350",
    "end": "551915"
  },
  {
    "text": "Now it's not quite\nof the same value. In general, the optimal solution\nhere for the 2SAT instance",
    "start": "551915",
    "end": "560699"
  },
  {
    "text": "is going to be the\noptimal solution for the independent set instance\nplus the total number of edges,",
    "start": "560700",
    "end": "568197"
  },
  {
    "text": "because we're going to\nsatisfy all of these. That's what we just showed. So this is where we get a\nkind of additive behavior,",
    "start": "568197",
    "end": "576410"
  },
  {
    "text": "like in this L-reduction. The gap is an additive thing. But here it's a\nnice fixed thing.",
    "start": "576410",
    "end": "582310"
  },
  {
    "text": "And so these are\npretty much the same. There's just this\nadditive offset.",
    "start": "582310",
    "end": "588160"
  },
  {
    "text": "So that's going to be fine in\nterms of the second property. The additive difference between\none of these solutions and OPT",
    "start": "588160",
    "end": "594310"
  },
  {
    "text": "will be exactly the same. The beta here at this\nconstant will be 1. But we do have to worry\nabout the first condition.",
    "start": "594310",
    "end": "600100"
  },
  {
    "text": "We need to make sure OPT doesn't\nblow up too much, because we did make it bigger. So for that, all\nwe need is this is",
    "start": "600100",
    "end": "608790"
  },
  {
    "text": "omega, the number of vertices. And that's because we assumed\nour graph had bounded degree,",
    "start": "608790",
    "end": "616840"
  },
  {
    "text": "and so we can always find\nan independent set of size something like n over constant.",
    "start": "616840",
    "end": "623190"
  },
  {
    "text": "So because that's\nalready linear, we only added\nanother linear thing. Again, also this is\norder, number of vertices.",
    "start": "623190",
    "end": "632120"
  },
  {
    "text": "So we're not adding too\nmuch relative to this, because bounded degree. Cool?",
    "start": "632120",
    "end": "637899"
  },
  {
    "text": "So that's Max\n2SAT, APX-hardness. ",
    "start": "637900",
    "end": "648110"
  },
  {
    "text": "Fun fact which I won't prove.",
    "start": "648110",
    "end": "653190"
  },
  {
    "text": "Max E2SAT-E3 is\nalso APX-complete.",
    "start": "653190",
    "end": "663050"
  },
  {
    "text": "So here we got some bounded\nnumber of occurrences. I guess each variable is\ngoing to appear in one",
    "start": "663050",
    "end": "670680"
  },
  {
    "text": "plus three, four clauses. You can get that down to\nthree clauses per variable.",
    "start": "670680",
    "end": "676090"
  },
  {
    "start": "676090",
    "end": "681150"
  },
  {
    "text": "OK. ",
    "start": "681150",
    "end": "687810"
  },
  {
    "text": "Now that we have\nMax 2SAT, we can do another one, which is\nMax not all equal 3SAT.",
    "start": "687810",
    "end": "696105"
  },
  {
    "text": " So from SAT-land, we have\n3SAT, not all equal 3SAT,",
    "start": "696105",
    "end": "708060"
  },
  {
    "text": "and 1 and 3SAT. We're going to get all of those. Actually, we can\neven get 1 and 2SAT.",
    "start": "708060",
    "end": "713320"
  },
  {
    "text": "Little bit stronger. But let's do not all equal 3SAT. So here we are going\nto do, I believe,",
    "start": "713320",
    "end": "722870"
  },
  {
    "text": "a strict reduction from Max\n2SAT which we just proved,",
    "start": "722870",
    "end": "735920"
  },
  {
    "text": "APX-complete. Yeah. It's again in APX,\nbecause you can, say, take",
    "start": "735920",
    "end": "742654"
  },
  {
    "text": "your random\nassignment, and you'll satisfy some constant\nfraction of the clauses.",
    "start": "742655",
    "end": "748100"
  },
  {
    "text": "And OK. So here's the reduction. Again, very easy.",
    "start": "748100",
    "end": "754370"
  },
  {
    "text": "Suppose we're starting\nfrom Max 2SAT, so all our clauses\nlook like this. These may be negated or not.",
    "start": "754370",
    "end": "760380"
  },
  {
    "text": "And we're going to convert it\ninto not all equal of x, y,",
    "start": "760380",
    "end": "770700"
  },
  {
    "text": "and a. a is a new variable, and it\nappears in every single clause.",
    "start": "770700",
    "end": "777250"
  },
  {
    "text": "OK? So this is kind of funny.  So a appears everywhere.",
    "start": "777250",
    "end": "784880"
  },
  {
    "text": "And not all equal has\nthis nice symmetry, right? There wasn't really\na zero or one. You can think of\nthem as red, as blue.",
    "start": "784880",
    "end": "789990"
  },
  {
    "text": "Doesn't matter whether red\nis true or blue is true. So in particular, we\ncan use that symmetry",
    "start": "789990",
    "end": "795129"
  },
  {
    "text": "to make a consider it as false. So by a possible\nflipping everything,",
    "start": "795130",
    "end": "801210"
  },
  {
    "text": "we can imagine\nthat a equals zero. If not, flip all the bits, and\nyou'll still be not all equal.",
    "start": "801210",
    "end": "809242"
  },
  {
    "text": "Or all the things that were\nnot all equal before will still be not all equal. You'll preserve OPT.",
    "start": "809242",
    "end": "814350"
  },
  {
    "text": "Now once you think of a is\nfalse, then not all equal is saying that these\nare not both 0, which is",
    "start": "814350",
    "end": "821790"
  },
  {
    "text": "the same thing as saying 2SAT. Duh. OK. Again, I mean this is\nsaying OPT is preserved.",
    "start": "821790",
    "end": "829370"
  },
  {
    "text": "But if you take any\nsolution to this problem, you first possibly flip\nit so that a is zero, and then convert the xy is just\nexactly the xy's over here,",
    "start": "829370",
    "end": "837910"
  },
  {
    "text": "and you'll preserve the\nsize of the solution. You won't get any scale\nhere, and you also preserved OPT exactly.",
    "start": "837910",
    "end": "844839"
  },
  {
    "text": "So it's in particular\nan L-reduction, but it's even a\nstrict reduction. Didn't lose anything.",
    "start": "844840",
    "end": "850820"
  },
  {
    "text": "No additive slop or whatever. OK. That's nice.",
    "start": "850820",
    "end": "856430"
  },
  {
    "text": "Next is usually called Max-Cut.",
    "start": "856430",
    "end": "861625"
  },
  {
    "text": " You're given a graph. You want to split\nit into two parts",
    "start": "861625",
    "end": "867550"
  },
  {
    "text": "to maximize the number of\nedges between the two parts. But this is the same thing\nas max positive 1 and 2SAT,",
    "start": "867550",
    "end": "883100"
  },
  {
    "text": "which is simpler\nthan 1 and 3SAT. You have, I mean, in a cut,\nagain, you have two sides.",
    "start": "883100",
    "end": "891860"
  },
  {
    "text": "Call them true or false, or\nred and blue, or whatever. You would like to assign\nexactly one of these to be true.",
    "start": "891860",
    "end": "897800"
  },
  {
    "text": "Then that edge\nwill be in the cut. So it's the same problem. And you can also think of\nit as max positive XOR-SAT.",
    "start": "897800",
    "end": "910440"
  },
  {
    "text": "Maybe actually call it 2XOR-SAT.  Same thing.",
    "start": "910440",
    "end": "915890"
  },
  {
    "text": "It's just every constraint is\nof the form this x or this. You want to maximize the\nnumber of those constraints.",
    "start": "915890",
    "end": "921480"
  },
  {
    "text": "So a lot of these problems\nhave different formulations depending on whether you're\nthinking about logic, or thinking about\na graph problem.",
    "start": "921480",
    "end": "927970"
  },
  {
    "text": "So we're going to get all of\nthese four with one reduction. And it's going to be\nfrom probably this one.",
    "start": "927970",
    "end": "935010"
  },
  {
    "text": "Yes. The great chain of\nreductions here. ",
    "start": "935010",
    "end": "947320"
  },
  {
    "text": "So we're going to reduce\nfrom Max not all equal 3SAT. ",
    "start": "947320",
    "end": "954060"
  },
  {
    "text": "I should mention, all of the\nreductions we've been seeing, including this initial batch\nwhere we started from 3SAT,",
    "start": "954060",
    "end": "961260"
  },
  {
    "text": "converted into 3SAT\n3, converted it into an independent\nset, to vertex cover, to dominating set to Max\n2SAT, to Max not equal 3SAT",
    "start": "961260",
    "end": "969459"
  },
  {
    "text": "to Max-Cut, are all in this\nseminal paper by Papadimitriou and Yannakakis, 1991.",
    "start": "969460",
    "end": "975350"
  },
  {
    "text": "This is before APX\nwas really a thing. It had a different\nname at that point--",
    "start": "975350",
    "end": "980450"
  },
  {
    "text": "Max SMP-- which later is proved\nto be essentially equal to APX, or the completeness\nversion is the same.",
    "start": "980450",
    "end": "986710"
  },
  {
    "text": "You don't need to\nknow about that. It comes from a different\nworld, but all the reductions apply here.",
    "start": "986710",
    "end": "992570"
  },
  {
    "text": "So here is the\nreduction for a Max-Cut. So again we're trying\nto simulate Max",
    "start": "992570",
    "end": "999040"
  },
  {
    "text": "not all equal 3SAT. Now we actually saw in the\nplanar lecture, planar 3SAT,",
    "start": "999040",
    "end": "1004850"
  },
  {
    "text": "that you can reduce planar\nnot all equal 3SAT to planar Max-Cut, and that we use that to\nget a polynomial time algorithm",
    "start": "1004850",
    "end": "1013470"
  },
  {
    "text": "for planar not all equal 3SAT. We're just going\nto do the reverse. And if you recall, this was\nthe heart of that reduction.",
    "start": "1013470",
    "end": "1020930"
  },
  {
    "text": "The point is that\nyou can represent a not all equal clause as\na cut, as a Max-Cut problem",
    "start": "1020930",
    "end": "1028800"
  },
  {
    "text": "on a triangle. Because in a triangle,\neither they're all equal, and then there's no cut edges,\nor they're not all equal,",
    "start": "1028800",
    "end": "1034849"
  },
  {
    "text": "and then there's\nexactly two cut edges. So that's for a cause of size 3. We also need to handle the\ncase of a cause of size 2.",
    "start": "1034849",
    "end": "1042049"
  },
  {
    "text": "But that's a two-gon, I\nguess, instead of a triangle. It works the same way here. You get 1 if they're not all\nequal, and zero otherwise.",
    "start": "1042050",
    "end": "1049950"
  },
  {
    "text": "This is shown as the zero case. OK. Now the one thing we need,\nbecause not all equal 3SAT",
    "start": "1049950",
    "end": "1055910"
  },
  {
    "text": "here, we need negation. So we're going to build each\nvariable and its negation",
    "start": "1055910",
    "end": "1065480"
  },
  {
    "text": "with this gadget. This is a new gadget,\nvariable gadget. It's just a whole bunch of\nedges connecting xi and xi bar.",
    "start": "1065480",
    "end": "1072789"
  },
  {
    "text": "And you can make this. You can avoid the\nmultigraph aspect here. But let's not worry\nabout it here.",
    "start": "1072790",
    "end": "1079529"
  },
  {
    "text": "So in general, if there are k\noccurrences of this variable, then we're going to\nhave 2k parallel edges,",
    "start": "1079530",
    "end": "1087370"
  },
  {
    "text": "because the cost over here, the\npotential benefit here is 2. Again, we want to argue that\nif we take an optimal solution,",
    "start": "1087370",
    "end": "1094730"
  },
  {
    "text": "we can make it another optimal\nsolution where xi and xi bar are on opposite\nsides of the cut.",
    "start": "1094730",
    "end": "1101706"
  },
  {
    "text": "And the reason is, if\nthey're both on the same side of the cut, you're not\ngetting this benefit.",
    "start": "1101706",
    "end": "1107690"
  },
  {
    "text": "If you flip one\nof the sides, you get this huge\nbenefit, which is 2k. And you say, well,\nhow much do I lose",
    "start": "1107690",
    "end": "1113960"
  },
  {
    "text": "if I flip this from one side\nof the cut to the other. Well, it appears in at most k\ndifferent clauses, each of them",
    "start": "1113960",
    "end": "1121590"
  },
  {
    "text": "gives me at most two points. So I'm losing, at\nmost, 2k points by making these opposite.",
    "start": "1121590",
    "end": "1127330"
  },
  {
    "text": "But I gain 2k points. So it never hurts me\nto do that switch. So I can assume these two\nguys are on opposite sides,",
    "start": "1127330",
    "end": "1133559"
  },
  {
    "text": "and therefore I can assume\nit's sort of validly doing the negation part. And then it just reduces\nto not all equal 3SAT.",
    "start": "1133560",
    "end": "1141809"
  },
  {
    "text": "There's a difference between\nthis one, where we only get one point, and this\none we only get two points.",
    "start": "1141810",
    "end": "1147250"
  },
  {
    "text": "AUDIENCE: You get two points. PROFESSOR: You get\ntwo points here? Oh yeah. You get two points. That's why we doubled the edge.",
    "start": "1147250",
    "end": "1154820"
  },
  {
    "text": "So that's cool. I think you would be fine. It'd still be an L-reduction\neven if you have one edge.",
    "start": "1154820",
    "end": "1160121"
  },
  {
    "text": "But this is nicer. And yeah. That's it. Cool.",
    "start": "1160121",
    "end": "1165250"
  },
  {
    "text": "This is Max-Cut. It will be a\nbounded degree based",
    "start": "1165250",
    "end": "1172020"
  },
  {
    "text": "on the number of occurrences\nwe got, which was like four. I mean, we can use three,\nand then we'll multiply.",
    "start": "1172020",
    "end": "1177600"
  },
  {
    "text": "In general you can prove\nMax-Cut remains APX-complete for degree three graphs.",
    "start": "1177600",
    "end": "1185440"
  },
  {
    "text": "So we're not going\nto prove it here. So another kind of reduction\ntrick to reduce degrees, just",
    "start": "1185440",
    "end": "1191600"
  },
  {
    "text": "say degree 3 is possible. It's also Max Cut in degree\n3 graphs is APX-complete.",
    "start": "1191600",
    "end": "1203690"
  },
  {
    "text": "So you could call that max\npositive 1 and 2SAT, hyphen 3.",
    "start": "1203690",
    "end": "1210100"
  },
  {
    "text": "Maybe even E3.  All right. ",
    "start": "1210100",
    "end": "1216690"
  },
  {
    "text": "So this gives you a flavor. This is a fun series\nof reductions, each one building on the previous one.",
    "start": "1216690",
    "end": "1222150"
  },
  {
    "text": "But it gives you kind\nof starting point. A lot of the problems\nwe're familiar with in NP",
    "start": "1222150",
    "end": "1227309"
  },
  {
    "text": "completeness land, if you\njust add \"Max\" in front, they become hard.",
    "start": "1227310",
    "end": "1232929"
  },
  {
    "text": "I mean I guess Max-Cut\nalways had a Max in front. Max 2SAT for NP completeness,\nwe also had a Max in front.",
    "start": "1232930",
    "end": "1238850"
  },
  {
    "text": "So those are familiar,\nand they're APX-complete. All of the problems,\nI've described, at least for bounded\ndegree graphs,",
    "start": "1238850",
    "end": "1244298"
  },
  {
    "text": "have constant factor\napproximations. So this is the right level. They are APX-complete.",
    "start": "1244298",
    "end": "1249350"
  },
  {
    "text": "And that determines\ntheir approximability. Constant factor, no PTAS. ",
    "start": "1249350",
    "end": "1255890"
  },
  {
    "text": "Now it would be nice to know\nwhich problems are hard.",
    "start": "1255890",
    "end": "1263060"
  },
  {
    "text": "With NP-completeness,\nand in the SAT universe, we had Schaefer's\ndichotomy theorem that",
    "start": "1263060",
    "end": "1269170"
  },
  {
    "text": "said-- let me cheat and\nlook at my notes from, I think, lecture four--\nthat SAT is polynomial if",
    "start": "1269170",
    "end": "1277390"
  },
  {
    "text": "and only if the\nclauses that you're allowed to do-- the\noperations you're allowed to do with variables--\nare either have",
    "start": "1277390",
    "end": "1285491"
  },
  {
    "text": "the property that when you\nset all the variables true, everything's satisfied. Or you set all the variables\nfalse, everything satisfied.",
    "start": "1285491",
    "end": "1291730"
  },
  {
    "text": "Or every single clause is a\nconjunction of Horn causes.",
    "start": "1291730",
    "end": "1297080"
  },
  {
    "text": "Horn clauses were a few\nvariables, and at most one",
    "start": "1297080",
    "end": "1303200"
  },
  {
    "text": "of them is positive. Or all the causes you have\nare conjunctions of Dual-Horn,",
    "start": "1303200",
    "end": "1308519"
  },
  {
    "text": "which was, in every clause at\nmost one of them is negated,",
    "start": "1308520",
    "end": "1314300"
  },
  {
    "text": "or all of the clauses\nare conjunctions of 2CNF, only like 2SAT.",
    "start": "1314300",
    "end": "1320660"
  },
  {
    "text": "Or what I didn't give\na name at the time, but is essentially a slight\ngeneralization of XOR-SAT.",
    "start": "1320660",
    "end": "1330140"
  },
  {
    "text": "Let me give it a name here. I'm going to call it X(N)OR-SAT. ",
    "start": "1330140",
    "end": "1339350"
  },
  {
    "text": "You can also phrase them as\nlinear equations over Z2. ",
    "start": "1339350",
    "end": "1352389"
  },
  {
    "text": "So this is zero and one. And it's either X OR, meaning\nyou take the X OR of all",
    "start": "1352390",
    "end": "1358120"
  },
  {
    "text": "the things-- that's like\nthe summation of all things, or it's X(N)OR, meaning\nwhen you take that sum, it should equal zero.",
    "start": "1358120",
    "end": "1364420"
  },
  {
    "text": "And such systems\nof linear equations can be solved in polynomial\ntime using Gaussian elimination",
    "start": "1364420",
    "end": "1372250"
  },
  {
    "text": "over Z2. And all of the things\nI just mentioned are all the situations\nwhere SAT is polynomial.",
    "start": "1372250",
    "end": "1379420"
  },
  {
    "text": "Every other type of clause,\nSAT is NP-complete-- or set of classes.",
    "start": "1379420",
    "end": "1385607"
  },
  {
    "text": "Now why do I mention this? Because there is an\nanalogous theorem for it's",
    "start": "1385607",
    "end": "1391519"
  },
  {
    "text": "not quite SAT, because we\nneed something like this Max. We need to turn it into\nan optimization problem.",
    "start": "1391520",
    "end": "1397690"
  },
  {
    "text": "SAT is not normally an\noptimization problem by itself. And characterizing how\napproximal those problems are.",
    "start": "1397690",
    "end": "1405270"
  },
  {
    "text": "Now it is a complicated\ntheorem-- so complicated,",
    "start": "1405270",
    "end": "1412750"
  },
  {
    "text": "that I don't want to\nwrite it on the board, because there's a lot of cases. But the point is,\nit's exhaustive.",
    "start": "1412750",
    "end": "1419140"
  },
  {
    "text": "It will tell you if\nyou have anything of the type we\nhad with Schaefer, which was you define a\nkind of clause function.",
    "start": "1419140",
    "end": "1424515"
  },
  {
    "text": "It's either satisfied or not. It applies to some\nnumber of variables. And then, once you've\ndefined that clause type,",
    "start": "1424515",
    "end": "1431150"
  },
  {
    "text": "you can apply it\nto any combination of variables you want. That family of problems\nwith no other restrictions",
    "start": "1431150",
    "end": "1437399"
  },
  {
    "text": "is what we get. And I will just tell you\nwhat the problems are.",
    "start": "1437400",
    "end": "1443590"
  },
  {
    "text": "There's four of them. This is part of what\nmakes the theorem long, but also extremely powerful.",
    "start": "1443590",
    "end": "1448750"
  },
  {
    "text": "The first dichotomy\nis max verses min. And then the second\ndichotomy is they",
    "start": "1448750",
    "end": "1455580"
  },
  {
    "text": "call it CSP for constraint\nsatisfaction problem. So you have a bunch\nof constraints. You want to satisfy\nas many as possible.",
    "start": "1455580",
    "end": "1461970"
  },
  {
    "text": "So this would be the number\nof satisfied constraints is your objective, or\nyour cost function.",
    "start": "1461970",
    "end": "1469940"
  },
  {
    "text": " Or the other version is what's\ncalled the ones problem, or max",
    "start": "1469940",
    "end": "1477870"
  },
  {
    "text": "ones, or min ones. This is the number\nof true variables. ",
    "start": "1477870",
    "end": "1488010"
  },
  {
    "text": "So again, we have a\nSchaefer-like SAT style of set of clauses.",
    "start": "1488010",
    "end": "1493132"
  },
  {
    "text": "Either we want to maximize the\nnumber of satisfied clauses, or we want to minimize the\nnumber satisfied clauses,",
    "start": "1493132",
    "end": "1498169"
  },
  {
    "text": "or we want to maximize the\nnumber of true variables and satisfy everything.",
    "start": "1498170",
    "end": "1503980"
  },
  {
    "text": "Or we want to minimize the\nnumber of true variables and satisfy everything.",
    "start": "1503980",
    "end": "1509040"
  },
  {
    "text": "OK. Now obviously, if the\nSAT problem is hard, it's going to be\nhard to do this. But it's still interesting.",
    "start": "1509040",
    "end": "1515710"
  },
  {
    "text": "You can still think about it. And even when the SAT problem\nis easy, Max ones can be hard.",
    "start": "1515710",
    "end": "1523260"
  },
  {
    "text": "So I am going to--\nI wrote it all down, and then I realized\nhow long it was. And so I will just show you.",
    "start": "1523260",
    "end": "1529060"
  },
  {
    "text": "Imagine I just hand-wrote this. So this is the easy case.",
    "start": "1529060",
    "end": "1535309"
  },
  {
    "text": "Max CSP. So we want to maximize\nthe number of constraints that we satisfy.",
    "start": "1535310",
    "end": "1540990"
  },
  {
    "text": "And I'm going to characterize\nwhen it is polynomial. Now here, PO I haven't\ndefined, but that's",
    "start": "1540990",
    "end": "1547710"
  },
  {
    "text": "the analog of P for\noptimization problems. So it's the set of all\noptimization problems that are in P that have a\npolynomial timed algorithm",
    "start": "1547710",
    "end": "1555340"
  },
  {
    "text": "to solve them exactly. So it turns out\nin this situation you are either polynomial\nor APX-complete.",
    "start": "1555340",
    "end": "1561330"
  },
  {
    "text": "So it's only about constant\nfactor verses perfect. There's never a PTAS, unless\nthere's a polynomial time",
    "start": "1561330",
    "end": "1568309"
  },
  {
    "text": "algorithm. And the cases should\nlook familiar. It's either when you set\nall the variables true or all the variables false,\nthat satisfies everything.",
    "start": "1568310",
    "end": "1575860"
  },
  {
    "text": "In that case, Max CSP\nis, of course, easy. You can satisfy everything. Another case is if\nyou write the clauses",
    "start": "1575860",
    "end": "1583150"
  },
  {
    "text": "in disjunctive normal\nform-- this is a new type that we hadn't seen before,\nall your causes are--",
    "start": "1583150",
    "end": "1589360"
  },
  {
    "text": "when you write them in DNF,\nthey have exactly two terms. So it's the OR of two things\nthat are anded together.",
    "start": "1589360",
    "end": "1596264"
  },
  {
    "text": "Sorry. There's an \"or\" in the middle. And you have a bunch of\nthings anded together in each of my hands.",
    "start": "1596265",
    "end": "1601630"
  },
  {
    "text": "And all the ones in here and\npositive, and all the ones in here are negative. If every clause looks\nlike that, then you",
    "start": "1601630",
    "end": "1609090"
  },
  {
    "text": "can solve this in\npolynomial time. And in all other cases, this\nproblem is APX-complete.",
    "start": "1609090",
    "end": "1616180"
  },
  {
    "text": "So that's a nice, very\nclean characterization. AUDIENCE: Wait. [INAUDIBLE]\nthat we learned about earlier.",
    "start": "1616180",
    "end": "1621998"
  },
  {
    "text": "Is this the [INAUDIBLE]? PROFESSOR: Yes. This is disjunctive normal form. So it's the or of ands.",
    "start": "1621998",
    "end": "1629390"
  },
  {
    "text": "We usually, we deal\nwith CNF ands of ors. But for this\ncharacterization, every clause",
    "start": "1629390",
    "end": "1637529"
  },
  {
    "text": "can be uniquely\nconverted into a DNF, and uniquely converted into CNF. So that's a well-defined\nthing to say.",
    "start": "1637530",
    "end": "1643990"
  },
  {
    "text": " With Schaefer, we just had\nto look at the CNF form. But here we get a\nnew set of things.",
    "start": "1643990",
    "end": "1651990"
  },
  {
    "text": "All right. That was one out of four. Max Min CSP Ones.",
    "start": "1651990",
    "end": "1657240"
  },
  {
    "text": "Next one is Max Ones. This is not the\nmost complicated. ",
    "start": "1657240",
    "end": "1664540"
  },
  {
    "text": "But let's go through them. So again, we want to maximize\nthe number of true variables.",
    "start": "1664540",
    "end": "1669862"
  },
  {
    "text": "So of course, if we set\nall the variables to true, and everything is satisfied,\nyay, a polynomial, OK?",
    "start": "1669862",
    "end": "1675570"
  },
  {
    "text": "But curiously, if you settle\nthe variables to false, and that satisfies everything,\nthat's going to be here.",
    "start": "1675570",
    "end": "1682910"
  },
  {
    "text": "That's Poly-APX-complete. Poly-APX-complete, you can\ntranslate to something like n",
    "start": "1682910",
    "end": "1688049"
  },
  {
    "text": "to the 1 minus\nepsilon, approximable, and that's the best you can do. Or there's a lower bound of\nn to the 1 minus epsilon.",
    "start": "1688050",
    "end": "1695620"
  },
  {
    "text": "Upper bound might\nbe n or something. OK. So because maximizing ones, when\nsetting things all at false,",
    "start": "1695620",
    "end": "1703179"
  },
  {
    "text": "does not necessarily help you. There are some more\npositive cases. If you have a Dual-Horn set up.",
    "start": "1703180",
    "end": "1708730"
  },
  {
    "text": "So this is another one of\nthe Schaefer situations. If every clause when you write\nit in CNF every subclause",
    "start": "1708730",
    "end": "1714675"
  },
  {
    "text": "is Dual-Horn, at most,\none negated thing, that is a good situation\nfor maximizing ones,",
    "start": "1714675",
    "end": "1720070"
  },
  {
    "text": "because only one of\nthem has to be negative. But with Horn, for example,\nyou get Poly-APX-complete,",
    "start": "1720070",
    "end": "1728646"
  },
  {
    "text": "because we have an asymmetry\nhere between ones and zeros. Question? AUDIENCE: In this list,\ndo we just read down it until we hit the thing?",
    "start": "1728646",
    "end": "1734210"
  },
  {
    "text": "PROFESSOR: Yes. Good question. This is a sequential algorithm\nfor determining what you have.",
    "start": "1734210",
    "end": "1741290"
  },
  {
    "text": "If any of these says,\noh, you're in PO, then you should stop reading\nthe rest of the theorem. The way they write the theorem\nis less is probably clearer.",
    "start": "1741290",
    "end": "1749640"
  },
  {
    "text": "They write an else\nif for each one, but I wrote it backwards,\nso it's hard for me to write else if.",
    "start": "1749640",
    "end": "1754730"
  },
  {
    "text": "Yeah. Occasionally I'll mention\nthat the previous things don't apply. But you should read\nthis sequentially.",
    "start": "1754730",
    "end": "1760860"
  },
  {
    "text": " OK. So it was Dual-Horn.",
    "start": "1760860",
    "end": "1765870"
  },
  {
    "text": "Another polynomial case is\nwhat I call 2-X(N)OR-SAT,",
    "start": "1765870",
    "end": "1771300"
  },
  {
    "text": "where the N is in parentheses. So in other words, you\nhave linear equations. Each equation only has two\nterms, sort of like 2SAT.",
    "start": "1771300",
    "end": "1779299"
  },
  {
    "text": "And you have equations\nthat say equal zero or equal one on those two terms. That is also\npolynomially solvable.",
    "start": "1779300",
    "end": "1785870"
  },
  {
    "text": "This is a special case. We didn't need the\n2 for Schaefer. Here we need the 2, because if\nyou have X(N)OR-SAT in general.",
    "start": "1785870",
    "end": "1794490"
  },
  {
    "text": "And when I say this, I\nmean that all constraints fall into this category. If all constraints\nare of this form,",
    "start": "1794490",
    "end": "1800990"
  },
  {
    "text": "all clauses are of this\nform, then you're good. If all clauses are of\nthe form X(N)OR-SAT,",
    "start": "1800990",
    "end": "1806419"
  },
  {
    "text": "but they're not in this class,\nthey're not all of length 2, then the problem\nbecomes APX-complete,",
    "start": "1806420",
    "end": "1812799"
  },
  {
    "text": "by contrast to\nSchaefer, where, I mean, deciding whether you can satisfy\nall those things is easy--",
    "start": "1812800",
    "end": "1819370"
  },
  {
    "text": "maximizing the number of ones\nwhen you do it is APX-complete. So that's particularly\ninteresting.",
    "start": "1819370",
    "end": "1825950"
  },
  {
    "text": "AUDIENCE: Not all equal\n3SAT fall in that? Is that? ",
    "start": "1825950",
    "end": "1832620"
  },
  {
    "text": "PROFESSOR: Not all equal 3SAT. AUDIENCE: Those are\nX(N)OR clauses, right? PROFESSOR: No.",
    "start": "1832620",
    "end": "1838110"
  },
  {
    "text": "They should not\nbe X(N)OR clauses, because it's NP-complete. And when you have\nX(N)OR clauses, it's always polynomial to\ndecide whether you can satisfy",
    "start": "1838110",
    "end": "1845650"
  },
  {
    "text": "everything. So it's in the other case. ",
    "start": "1845650",
    "end": "1852570"
  },
  {
    "text": "But good question,\nbecause we should be getting APX-completeness. Yeah, but Max not all\nequal 3SAT is different.",
    "start": "1852570",
    "end": "1858837"
  },
  {
    "text": "Here we're trying to maximize\nthe number of clause that were satisfied. So if you have not\nall equal 3SAT,",
    "start": "1858837",
    "end": "1864309"
  },
  {
    "text": "and you want to maximize\nthe number of ones, that means first you have to satisfy\nnot all equal 3SAT, which is hard.",
    "start": "1864309",
    "end": "1869610"
  },
  {
    "text": "So that's going\nto fall into this. The bottom one is feasibility. Just finding a feasible\nsolution is NP hard.",
    "start": "1869610",
    "end": "1875930"
  },
  {
    "text": " The X(N)OR-SAT is this thing--\nlinear equations over Z2.",
    "start": "1875930",
    "end": "1884630"
  },
  {
    "text": "And it could be equal\nto 0, or equal to 1. This is what you might\ncall an X OR clause, or this is an X OR clause,\nthis is an X(N)OR clause.",
    "start": "1884630",
    "end": "1892940"
  },
  {
    "text": "So if they don't all have size\ntwo, then you're APX-complete. But you can find a solution\nby Schaefer's theorem.",
    "start": "1892940",
    "end": "1901400"
  },
  {
    "text": "OK. So as I mentioned, Horn\nclauses and 2AT clauses are actually really hard.",
    "start": "1901400",
    "end": "1906570"
  },
  {
    "text": "They're Poly-APX-complete,\nn to the 1 minus epsilon. Also these are all\nsituations where you can find feasible solutions\neasily by Schaefer, like when",
    "start": "1906570",
    "end": "1914724"
  },
  {
    "text": "you can set them all false,\nand that satisfies everything. It doesn't help you\nwhen you're trying to maximize the number of ones. It just gets you to zero.",
    "start": "1914724",
    "end": "1921916"
  },
  {
    "text": "Then you want to do better. And it's really hard to\nget any better factor. One more situation.",
    "start": "1921916",
    "end": "1928630"
  },
  {
    "text": "Sorry.  There's a slight\ndistinction here. So suppose you have\nthe feature that you",
    "start": "1928630",
    "end": "1935799"
  },
  {
    "text": "can set one variable\ntrue, and the rest false. If that satisfies all your\nconstraints, than great,",
    "start": "1935800",
    "end": "1942650"
  },
  {
    "text": "you found the value 1. And there's a big\ndifference between 0 and 1 when you're looking at\nrelative approximation,",
    "start": "1942650",
    "end": "1948216"
  },
  {
    "text": "because anything\ndivided by 0 is huge. So it's really hard\nto get a good factor. That's the situation.",
    "start": "1948216",
    "end": "1953760"
  },
  {
    "text": "Distinguishing\nbetween 0 and greater than 0, which is an infinite\nratio, it could be NP-hard.",
    "start": "1953760",
    "end": "1959150"
  },
  {
    "text": "That's when you,\nin this situation, we set all the variables false. You get zero. But finding any other solution\nis going to be NP-hard.",
    "start": "1959150",
    "end": "1966690"
  },
  {
    "text": "Here, if you can\nat least get 1, you can get an N approximation,\nwhereas here you can't get an N approximation.",
    "start": "1966690",
    "end": "1972320"
  },
  {
    "text": "Here you can get\nPoly approximation. And finally, if you have none\nof this above situations,",
    "start": "1972320",
    "end": "1977700"
  },
  {
    "text": "then testing feasibility is\nNP-hard by Schaefer's theorem. So it's like Schaefer\ntheorem, but some of the cases",
    "start": "1977700",
    "end": "1984309"
  },
  {
    "text": "split up into parts. Now, that was maximization.",
    "start": "1984310",
    "end": "1989659"
  },
  {
    "text": "Question? AUDIENCE: So, what's\nspecial about 1 here? It seems to me if you\nreplace that 1 by K",
    "start": "1989660",
    "end": "1995977"
  },
  {
    "text": "it should still be in that case. PROFESSOR: This case. AUDIENCE: Yeah. If I just replace that one\nwith a fixed K. Like 2.",
    "start": "1995977",
    "end": "2002620"
  },
  {
    "text": "PROFESSOR: Yes. So that problem will\nstill be-- so if you can set all but\nK of them true, I",
    "start": "2002620",
    "end": "2010000"
  },
  {
    "text": "think you can also set\nall but one of them true, and still satisfy. Yeah. So here's the thing.",
    "start": "2010000",
    "end": "2015309"
  },
  {
    "text": "This is all variables, right? So the idea is you\nhave tons of variables, and let's say two of\nthem are set to true.",
    "start": "2015310",
    "end": "2021856"
  },
  {
    "text": "So if you look at a\nclause, the clause might just apply to these\nguys-- all the false guys-- or it might apply to false\nguys and one of the true guys,",
    "start": "2021857",
    "end": "2029060"
  },
  {
    "text": "or it might apply to false\nguys and two of the true guys. All of those would\nhave to be satisfied",
    "start": "2029060",
    "end": "2034220"
  },
  {
    "text": "in your hypothetical situation. If that's true, that implies\nthat all the clauses are satisfied when only one\nof them is set true,",
    "start": "2034220",
    "end": "2040950"
  },
  {
    "text": "and the rest are false. So your case would fall\ninto this case as well, and you'd get\nPoly-APX-completeness again.",
    "start": "2040950",
    "end": "2047260"
  },
  {
    "text": "So it's not totally obvious\nwhen these things apply. But this is the complete\nlist of different cases.",
    "start": "2047260",
    "end": "2054256"
  },
  {
    "text": "Any questions?  OK.",
    "start": "2054256",
    "end": "2059530"
  },
  {
    "text": "Two out of four. Next one, this is the\nlongest one, is Min CSP.",
    "start": "2059530",
    "end": "2065460"
  },
  {
    "text": "Now here we don't get as\nnice a characterization, because there are some\nopen problems left.",
    "start": "2065460",
    "end": "2071158"
  },
  {
    "text": "I haven't checked whether\nall of these open problems remain open, but as of\n2001 they were open,",
    "start": "2071159",
    "end": "2076609"
  },
  {
    "text": "which was a while ago. And we can check whether\nthere's more explicit status.",
    "start": "2076610",
    "end": "2081799"
  },
  {
    "text": "But I have the status\nas of this paper here. So Min CSP.",
    "start": "2081800",
    "end": "2087149"
  },
  {
    "text": "This is, you want to minimize\nthe number of constraints that are satisfied,\nwhereas before we",
    "start": "2087150",
    "end": "2094121"
  },
  {
    "text": "looked at maximization. There are only three cases\nwhich were something like this. Again, if setting all the\nvariables false or true",
    "start": "2094122",
    "end": "2102270"
  },
  {
    "text": "satisfies all the clauses,\nthis is good, apparently.",
    "start": "2102270",
    "end": "2108810"
  },
  {
    "text": "That's less obvious\nin this case. In general,\nminimization problems behave quite differently\nfrom maximization problems",
    "start": "2108810",
    "end": "2114365"
  },
  {
    "text": "in terms of approximability. Maximization is\ngenerally easier to approximate, because your\nsolutions tend to be big,",
    "start": "2114365",
    "end": "2122130"
  },
  {
    "text": "and it's easier to\napproximate big things. Minimization-- small-- is hard.",
    "start": "2122130",
    "end": "2127830"
  },
  {
    "text": "Also we had the\nsituation from Max CSP, if when you write it\nin DNF, is exactly",
    "start": "2127830",
    "end": "2133539"
  },
  {
    "text": "two terms for every clause. One of them is all\npositive variables, and the other is all\nnegative variables. That's also easy.",
    "start": "2133540",
    "end": "2140470"
  },
  {
    "text": "And here's a new case\nof APX-completeness.",
    "start": "2140470",
    "end": "2146270"
  },
  {
    "text": "So if the problem\nyou're trying to solve is exactly this\nproblem, they call this,",
    "start": "2146270",
    "end": "2151290"
  },
  {
    "text": "I think, implication\nhitting set. So you have a clause which\nlets you say x1 implies",
    "start": "2151290",
    "end": "2157910"
  },
  {
    "text": "x2 for any two variables. And you have some set of\nclauses like this, where you",
    "start": "2157910",
    "end": "2166010"
  },
  {
    "text": "can say here's five variables. The OR of them is true. No negation here.",
    "start": "2166010",
    "end": "2173479"
  },
  {
    "text": "So this is called hitting\nset, meaning I give you a set of vertices and a graph,\nand I want at least one of them",
    "start": "2173479",
    "end": "2179370"
  },
  {
    "text": "to be hit, to be\nincluded, to be true. And we're trying to minimize\nthe number of such things",
    "start": "2179370",
    "end": "2184700"
  },
  {
    "text": "that we satisfy. So this turns out to be hard,\nbut only there's no PTAS,",
    "start": "2184700",
    "end": "2191490"
  },
  {
    "text": "but there's a constant\nfactor approximation. And then we have\nthese four cases",
    "start": "2191490",
    "end": "2198360"
  },
  {
    "text": "which show that they are\nequivalent to known studied problems. So there are these\nspecial cases.",
    "start": "2198360",
    "end": "2204720"
  },
  {
    "text": "Other than these getting\nany approximation factor of less\nthan infinity would",
    "start": "2204720",
    "end": "2209830"
  },
  {
    "text": "require you to distinguish\nbetween zeros OPT, and OPT is greater than\nzero, and it's NP-complete,",
    "start": "2209830",
    "end": "2215400"
  },
  {
    "text": "unless you have these. So there are some special\ncases like Min Uncut.",
    "start": "2215400",
    "end": "2220970"
  },
  {
    "text": "This is the reverse of Max Cut. You want to minimize the\nnumber of uncut edges. So that plus Max Cut should be\nequal to the number of edges.",
    "start": "2220970",
    "end": "2230319"
  },
  {
    "text": "But the approximability of the\ntwo sides is quite different. And here are the best\nresults of our APX-hardness,",
    "start": "2230320",
    "end": "2236480"
  },
  {
    "text": "and log and upper bound\nfor approximation. So that's a little\nbit harder maybe.",
    "start": "2236480",
    "end": "2241869"
  },
  {
    "text": "It's at least as hard as this. And that happens when you are\nin the 2x (N)OR-SAT situation,",
    "start": "2241870",
    "end": "2250480"
  },
  {
    "text": "something we saw\nfrom the last slide. So here it reduces to\nthis other problem.",
    "start": "2250480",
    "end": "2255820"
  },
  {
    "text": "Basically the same, but the\nX(N)ORs don't buy you anything new. ",
    "start": "2255820",
    "end": "2262579"
  },
  {
    "text": "In the case of 2SAT,\nyou get a problem known as Min 2CNF deletion.",
    "start": "2262580",
    "end": "2267950"
  },
  {
    "text": "And it's similar-- APX-hard,\nand best approximation is log times log log.",
    "start": "2267950",
    "end": "2274680"
  },
  {
    "text": "If in the case where you\nhave X(N)OR-SAT in general, but it's not all of the linear\nequations have only two terms--",
    "start": "2274680",
    "end": "2281329"
  },
  {
    "text": "so we have some larger ones--\nthen it turns out to be equivalent to nearest Codeword.",
    "start": "2281330",
    "end": "2287000"
  },
  {
    "text": "So it turns out you can write\nall such equations using either equations of length,\nby using equations of length 3",
    "start": "2287000",
    "end": "2293260"
  },
  {
    "text": "always. So this is linear equation. This should equal 1, or\nthis says equals zero.",
    "start": "2293260",
    "end": "2300820"
  },
  {
    "text": "And from that, you can\nconstruct all such things. This is a really hard problem. ",
    "start": "2300820",
    "end": "2307609"
  },
  {
    "text": "Poly-APX-hardness is not known. Current lower best\nlower bound is this 2 to the log to the 1\nminus epsilon, which",
    "start": "2307610",
    "end": "2313460"
  },
  {
    "text": "we saw in the table of various\ninapproximability results last time. So this is a little bit\nsmaller than n to the epsilon,",
    "start": "2313460",
    "end": "2322619"
  },
  {
    "text": "but it's kind of close-ish.  And finally, in the--\nI didn't write it.",
    "start": "2322620",
    "end": "2330299"
  },
  {
    "text": "If you're in CNF form,\nand all of the subclauses are either Horn, or all of\nthe subclauses are Dual-Horn,",
    "start": "2330300",
    "end": "2335960"
  },
  {
    "text": "then you get something\ncalled Min Horn Deletion. And this has the same\ninapproximability.",
    "start": "2335960",
    "end": "2342170"
  },
  {
    "text": " Here it's known. So up here, the\nbest approximation",
    "start": "2342170",
    "end": "2347580"
  },
  {
    "text": "is n-- nothing, basically. Put them all in.",
    "start": "2347580",
    "end": "2353110"
  },
  {
    "text": "And here there's a slightly\nbetter approximation known , I think, n to the 1 minus\nepsilon, or something.",
    "start": "2353110",
    "end": "2358990"
  },
  {
    "text": "But these are all super hard. The main point of\nthis is so that you're aware of these problems. If you ever encounter a problem\nthat looks anything like this,",
    "start": "2358990",
    "end": "2366640"
  },
  {
    "text": "or it looks like some\nkind of CSP problem, you should go to this\nlist and check it out.",
    "start": "2366640",
    "end": "2371900"
  },
  {
    "text": "So don't memorize these,\nbut look at the notes. Definitely memorize these guys. These are good to know.",
    "start": "2371900",
    "end": "2377730"
  },
  {
    "text": "But there's a few\nobscure problems here. OK. Last one is minimizing\nthe number of ones.",
    "start": "2377730",
    "end": "2387559"
  },
  {
    "text": "So this is like the\nhardest of two worlds. Minimization is kind of harder. And here you have to satisfy\neverything, but minimize",
    "start": "2387560",
    "end": "2394460"
  },
  {
    "text": "the number of true variables. ",
    "start": "2394460",
    "end": "2399529"
  },
  {
    "text": "So this is easy if you\ncan set them all false. And then you win.",
    "start": "2399530",
    "end": "2404820"
  },
  {
    "text": "This is easy in the Horn case. The Horn case is when\nat most one is positive, so most of them\ncan be set to zero.",
    "start": "2404820",
    "end": "2411900"
  },
  {
    "text": "This is easy in\nthe 2X(N)OR case. So if you have linear equations,\ntwo terms each, equal to 0",
    "start": "2411900",
    "end": "2419060"
  },
  {
    "text": "or equals 1, that's also. And you want to minimize the\nnumber of true variables.",
    "start": "2419060",
    "end": "2424100"
  },
  {
    "text": "That's good. If you're in 2CNF form,\nthere's a constant factor approximation. That's the best you can do.",
    "start": "2424100",
    "end": "2430240"
  },
  {
    "text": "APX-complete.  This is a case from\nthe last slide.",
    "start": "2430240",
    "end": "2436300"
  },
  {
    "text": "If you have the hitting set\nconstraints on constant number of constant size\nvertex sets, and you",
    "start": "2436300",
    "end": "2441830"
  },
  {
    "text": "have implication constraints,\nthen your problem is APX-complete again. ",
    "start": "2441830",
    "end": "2448380"
  },
  {
    "text": "And then we have these\nguys appearing, again nearest Codeword. N Min Horn deletion. This one we get in\nthe Dual-Horn case.",
    "start": "2448380",
    "end": "2455020"
  },
  {
    "text": "The Horn case is good. Dual-Horn, we get this\nthing, which was like log N approximal.",
    "start": "2455020",
    "end": "2460380"
  },
  {
    "text": "Or no. This was the 2 to the log\nN to the 1 minus epsilon.",
    "start": "2460380",
    "end": "2465880"
  },
  {
    "text": "And this is X(N)OR-SAT when\nthey're not all binary. Then we get nearest\nCodeword-complete.",
    "start": "2465880",
    "end": "2472869"
  },
  {
    "text": "And finally, oh, two more. The dual to this, if all\nthe variables being set true",
    "start": "2472870",
    "end": "2479450"
  },
  {
    "text": "satisfies your constraint,\nthat gives you a solution, but it's like the worst solution\npossible, because you get N.",
    "start": "2479450",
    "end": "2487780"
  },
  {
    "text": "And so in that case, you can get\nprobably a poly approximation. Not very impressive.",
    "start": "2487780",
    "end": "2494740"
  },
  {
    "text": "And that's actually the\nbest you can do, at some N to the 1 minus epsilon. And in all other cases,\nby Schaefer's theorem,",
    "start": "2494740",
    "end": "2502250"
  },
  {
    "text": "deciding whether even finding\na feasible solution is NP-hard. So, good luck approximating.",
    "start": "2502250",
    "end": "2507960"
  },
  {
    "text": "Cool? This is the Khanna, Sudan,\nTrevisan, Williamson",
    "start": "2507960",
    "end": "2514275"
  },
  {
    "text": "multichotomy theorem.  All right.",
    "start": "2514275",
    "end": "2519600"
  },
  {
    "text": " So let's do some\nmore reductions.",
    "start": "2519600",
    "end": "2531280"
  },
  {
    "start": "2531280",
    "end": "2558260"
  },
  {
    "text": "My goal on this page is\nto get to our good friend from one of the first lectures,\nedge-matching-puzzles.",
    "start": "2558260",
    "end": "2566180"
  },
  {
    "text": "You have little square\ntiles, colors on the edges. Normally we want to satisfy\nall of the edge constraints.",
    "start": "2566180",
    "end": "2572910"
  },
  {
    "text": "Only equal colors match,\nare adjacent to each other. Now the problem is going\nto be maximize the number",
    "start": "2572910",
    "end": "2580040"
  },
  {
    "text": "of satisfied edge constraints. But before I show\nyou that reduction,",
    "start": "2580040",
    "end": "2585160"
  },
  {
    "text": "I need another problem,\nwhich is APX-complete. So that problem is APX-complete.",
    "start": "2585160",
    "end": "2590330"
  },
  {
    "text": "So I need two more problems. One is Max independent set\nin 3-regular 3-edge colorable",
    "start": "2590330",
    "end": "2608996"
  },
  {
    "text": "graphs.  OK. I'm not going to prove this\none, because we already",
    "start": "2608996",
    "end": "2615415"
  },
  {
    "text": "did a version of\nindependent set, and it's just tedious\nto make it-- first, to make it exactly\ndegree three everywhere,",
    "start": "2615415",
    "end": "2622210"
  },
  {
    "text": "and secondly make\nit 3-edge colorable. With 3 regular 3-edge color\nis a nice kind of graph,",
    "start": "2622210",
    "end": "2628630"
  },
  {
    "text": "because every vertex, you've\ngot one edge of each class.",
    "start": "2628630",
    "end": "2635369"
  },
  {
    "text": "So that's kind of cool. And we can use this. This problem is\nbasically equivalent to the actual\nproblem I want, which",
    "start": "2635370",
    "end": "2643720"
  },
  {
    "text": "is a variation of\nthree-dimensional matching. So remember\nthree-dimensional matching,",
    "start": "2643720",
    "end": "2649980"
  },
  {
    "text": "you have three sets--\nA, B, and C. You",
    "start": "2649980",
    "end": "2656310"
  },
  {
    "text": "look at the triples\non A, B, and C. And you're given some set\nof interesting triples",
    "start": "2656310",
    "end": "2663140"
  },
  {
    "text": "among those. And with 3DM, what we wanted was\nto choose a set of such triples",
    "start": "2663140",
    "end": "2672349"
  },
  {
    "text": "that covers all the vertices,\nand no two of them intersect. That's the matching aspect.",
    "start": "2672350",
    "end": "2678500"
  },
  {
    "text": "In this problem, we want\nto choose as many triples as we can that don't\nintersect each other.",
    "start": "2678500",
    "end": "2683700"
  },
  {
    "text": "So the problem is choose\nmax subset S prime of S",
    "start": "2683700",
    "end": "2695530"
  },
  {
    "text": "with no duplicate\ncoordinates, I'll say. ",
    "start": "2695530",
    "end": "2703720"
  },
  {
    "text": "So let's assume A, B,\nand C are disjoint. Then I don't want any\nelement in A union B union C",
    "start": "2703720",
    "end": "2709020"
  },
  {
    "text": "to appear twice in this\nchosen set S prime. So that's the problem.",
    "start": "2709020",
    "end": "2715710"
  },
  {
    "text": "Now I'm going to prove\nthat that's hard. It is basically the same\nas Max independent set,",
    "start": "2715710",
    "end": "2724990"
  },
  {
    "text": "and three regular\n3-edge colored graphs, because what I do is\nI take such a graph,",
    "start": "2724990",
    "end": "2733760"
  },
  {
    "text": "and for each edge color class--\nthere are three of them--",
    "start": "2733760",
    "end": "2743490"
  },
  {
    "text": "those are going\nto be A, B, and C. So if I have red,\ngreen, and blue, all the red edges are\ngoing to be elements of A,",
    "start": "2743490",
    "end": "2749910"
  },
  {
    "text": "all the green edges are\ngoing to be the elements of B-- B for green. And then all the blue\nelements are elements of C.",
    "start": "2749910",
    "end": "2758090"
  },
  {
    "text": "OK. Then a vertex, as I said, has\nexactly one of each class.",
    "start": "2758090",
    "end": "2766380"
  },
  {
    "text": "So that's going to be my triple. ",
    "start": "2766380",
    "end": "2771410"
  },
  {
    "text": "And that's it. So now, if I want to solve\nthree-dimensional matching among those triples,\nthat's going",
    "start": "2771410",
    "end": "2777930"
  },
  {
    "text": "to correspond to choosing a\nset of vertices in here, no two of which share a color.",
    "start": "2777930",
    "end": "2785760"
  },
  {
    "text": "No two of which share the\nsame item of A. Let's say A is this color of edge.",
    "start": "2785760",
    "end": "2792359"
  },
  {
    "text": "So that means that\nthe vertices over here are not connected by an edge.",
    "start": "2792360",
    "end": "2797890"
  },
  {
    "text": "So the cool thing here is that\neach element of A, B, and C only appears in two\ndifferent triples.",
    "start": "2797890",
    "end": "2809000"
  },
  {
    "text": "Corresponding to the\ntwo ends of the edge. So now we have max\nthree-dimensional matching",
    "start": "2809000",
    "end": "2814540"
  },
  {
    "text": "where every element in ABC\nappears in exactly two triples. So I guess I can even\nwrite E2 if I want to.",
    "start": "2814540",
    "end": "2823188"
  },
  {
    "text": "OK. That was our sort of homework. Now we have max edge\nmatching puzzles.",
    "start": "2823188",
    "end": "2833369"
  },
  {
    "text": "Again, we're given square tiles. There's different\ncolors on the tiles.",
    "start": "2833370",
    "end": "2838870"
  },
  {
    "text": "Any number of colors. And we would like\nto lay things out.",
    "start": "2838870",
    "end": "2843950"
  },
  {
    "text": "And I'll tell you the instance\nhere is going to be 2 by N. So it's fairly narrow,\nunlike the construction",
    "start": "2843950",
    "end": "2849759"
  },
  {
    "text": "we saw in class. And we're reducing\nfrom Max 3D M2.",
    "start": "2849760",
    "end": "2856330"
  },
  {
    "text": "That's why I introduced it. And this is a four\nyears ago result.",
    "start": "2856330",
    "end": "2863090"
  },
  {
    "text": "So the idea is the triple is\nrepresented by these three tiles, and some more.",
    "start": "2863090",
    "end": "2869210"
  },
  {
    "text": "But for starters,\nthese three tiles. The u glue is unique--\nglobal unique.",
    "start": "2869210",
    "end": "2874870"
  },
  {
    "text": "So it wants to be\non the boundary. And here tiles are\nnot allowed to rotate, so it wants to be on\nthe bottom boundary.",
    "start": "2874870",
    "end": "2881490"
  },
  {
    "text": "So this ab glues only\nappear as a single pairs.",
    "start": "2881490",
    "end": "2888676"
  },
  {
    "text": "I guess they'll also\nappear over there. But not very many of them. So basically a, b, and\nc have to glue together",
    "start": "2888676",
    "end": "2893800"
  },
  {
    "text": "in sequence like that. And the percent\nsigns are going to be the same on the bottom row. So nothing else.",
    "start": "2893800",
    "end": "2899130"
  },
  {
    "text": "This is basically\nforced to do this. We'll actually have\nto do it a few times, but you have to build\nthis bottom structure.",
    "start": "2899130",
    "end": "2904920"
  },
  {
    "text": "And then the question is\nwhat do you build on top. And the idea is there are\nexactly one each of these three",
    "start": "2904920",
    "end": "2912900"
  },
  {
    "text": "tiles which just communicate\ndollar sign left to right, and have a, b, c on the bottom.",
    "start": "2912900",
    "end": "2919550"
  },
  {
    "text": "So those are cool. And if you want to put a triple\ninto your three-dimensional matching, then you\nput those in sequence.",
    "start": "2919550",
    "end": "2926950"
  },
  {
    "text": "No mismatches. This is great. You can take a whole\nbunch of these, stick them next to each\nother, everything will match.",
    "start": "2926950",
    "end": "2932028"
  },
  {
    "text": "No errors. So you're getting\nsome constant number of points for each of these.",
    "start": "2932028",
    "end": "2938230"
  },
  {
    "text": "But you will have to build\nmore-- at least two copies",
    "start": "2938230",
    "end": "2943240"
  },
  {
    "text": "of this bottom structure. And there's only one\ncopy of this top thing. So that's the annoying part.",
    "start": "2943240",
    "end": "2949110"
  },
  {
    "text": "But there are some variations\nof these tiles which look like something\nlike this-- I'll show you all of them in a\nmoment-- which have exactly one",
    "start": "2949110",
    "end": "2956930"
  },
  {
    "text": "mismatch. So you don't get\nquite as many points. You get, I don't know,\n15 instead of 16 points,",
    "start": "2956930",
    "end": "2962800"
  },
  {
    "text": "or whatever. Bottom structure looks the same. And the point of this\nis we know a appears",
    "start": "2962800",
    "end": "2971571"
  },
  {
    "text": "in two different places. So we need two\nversions of the a tile. But we only want one of them\nto be happy and give you",
    "start": "2971571",
    "end": "2979015"
  },
  {
    "text": "all the points,\nbecause you should only be able to choose\nthe a thing once.",
    "start": "2979015",
    "end": "2984400"
  },
  {
    "text": "So yet this triple\nwill still exist. adc will still be\nfloating around there. You want to still be buildable,\nbut at a cost of negative 1.",
    "start": "2984400",
    "end": "2992410"
  },
  {
    "text": "So this part's still built. Then you have these\nsort of filler tiles. Your goal is then just\nget rid of all the stuff",
    "start": "2992410",
    "end": "2999000"
  },
  {
    "text": "and pay a penalty. But you want to minimize the\nnumber of times you do this, or maximize the number\nof times you do this,",
    "start": "2999000",
    "end": "3005849"
  },
  {
    "text": "and then it will be\nsimulating Max 3DM. There'll be some\nadditive consistent cost,",
    "start": "3005850",
    "end": "3012640"
  },
  {
    "text": "which is the cost of all\nthe unpicked triples. And then this will\nbe an L-reduction.",
    "start": "3012640",
    "end": "3020525"
  },
  {
    "text": "So I have some more slides. It's a bit complicated\nto do all of the details, but this is a fully worked-out\nexample with two triples.",
    "start": "3020525",
    "end": "3028020"
  },
  {
    "text": "We have a, b, c and a, d, c. And because they\nshare a, we don't want them both to be picked.",
    "start": "3028020",
    "end": "3033430"
  },
  {
    "text": "So the same as what I showed\nyou just in the previous slide. But then there are\nall these other tiles",
    "start": "3033430",
    "end": "3038500"
  },
  {
    "text": "that are floating\naround in order to make all the combinations possible. And there's all these\ntiles to basically allow",
    "start": "3038500",
    "end": "3045730"
  },
  {
    "text": "them to get thrown away. And so that's not so clear. This is the overall\nconstruction.",
    "start": "3045730",
    "end": "3054104"
  },
  {
    "text": "For every triple, you're going\nto have exactly these three tiles that we saw.",
    "start": "3054104",
    "end": "3059310"
  },
  {
    "text": "It got rotated relative\nto the previous picture. Maybe rotations are allowed. And then for every\nvariable, here",
    "start": "3059310",
    "end": "3065890"
  },
  {
    "text": "they're called x, y,\nz instead of a, b, c. But the same thing. For every a thing we'll have\nsome constant set of tiles that",
    "start": "3065890",
    "end": "3073100"
  },
  {
    "text": "includes the really good one. Sorry. The good one has\ntwo dollar signs. This is the one you really like.",
    "start": "3073100",
    "end": "3079465"
  },
  {
    "text": "And then there's all\nthis stuff to make sure things can get consumed. And you can get\nrid of the triples",
    "start": "3079465",
    "end": "3084880"
  },
  {
    "text": "and pay exactly one\nper unpicked triple. So I don't want to go\nthrough the details, but once you have that, you get\nan L-reduction from Max 3DN2.",
    "start": "3084880",
    "end": "3094711"
  },
  {
    "text": "Questions?  All right. ",
    "start": "3094711",
    "end": "3104960"
  },
  {
    "text": "So I want to go\nup the hierarchy.",
    "start": "3104960",
    "end": "3110589"
  },
  {
    "text": "We've been focusing on constant\nfactor, approximable problems that have no PTASses.",
    "start": "3110590",
    "end": "3116269"
  },
  {
    "text": " I will mention there\nbefore we go on that there are some\nconstant factor approximable",
    "start": "3116270",
    "end": "3124050"
  },
  {
    "text": "problems that are not,\nthat have no PTAS, and yet are not APX-complete.",
    "start": "3124050",
    "end": "3130600"
  },
  {
    "text": "So APX-complete is not\nall of APX minus PTAS.",
    "start": "3130600",
    "end": "3137520"
  },
  {
    "text": "So there are APX\nminus PTAS problems that are not APX-complete.",
    "start": "3137520",
    "end": "3143619"
  },
  {
    "text": " So these are still useful\nfrom a reduction standpoint.",
    "start": "3143620",
    "end": "3149140"
  },
  {
    "text": "You can use them to show that\nyour problem has no PTAS. But you have to state\nthem differently.",
    "start": "3149140",
    "end": "3156450"
  },
  {
    "text": " And they're somewhat\nfamiliar problems.",
    "start": "3156450",
    "end": "3163190"
  },
  {
    "text": "One of them is bin packing. This is you're moving\nout of your house.",
    "start": "3163190",
    "end": "3168950"
  },
  {
    "text": "You have a bunch of objects. You live in a\none-dimensional universe. So each box is\nexactly the same size.",
    "start": "3168950",
    "end": "3175619"
  },
  {
    "text": "It's one-dimensional in size. And you have a bunch of items\nwhich are one-dimensional. And you want to pack as many\nas you can into each box--",
    "start": "3175620",
    "end": "3181211"
  },
  {
    "text": "but overall use the\nminimum number of boxes. It's a minimization problem. This has no constant\nfactor approximation.",
    "start": "3181211",
    "end": "3188770"
  },
  {
    "text": "But you can find what's called\na asymptotic PTAS, where",
    "start": "3188770",
    "end": "3194740"
  },
  {
    "text": "you can get a PTAS-style\nresult-- 1 plus epsilon times OPT plus 1.",
    "start": "3194740",
    "end": "3201822"
  },
  {
    "text": "So an additive error. And so in particular,\ndistinguishing between two bins and three\nbins is weakly NP-complete.",
    "start": "3201822",
    "end": "3209930"
  },
  {
    "text": "That's like partition,\nright, between two bins",
    "start": "3209930",
    "end": "3216325"
  },
  {
    "text": "and three bins. So you need this\nsort of additive one. You can't get a PTAS\nwithout the additive one.",
    "start": "3216325",
    "end": "3222060"
  },
  {
    "text": "So it's not as hard as all\nconstant factor inapproximable problems, but\nsomewhere in between.",
    "start": "3222060",
    "end": "3229300"
  },
  {
    "text": "APX-intermediate is\nthe technical term. Some other ones are minimum.",
    "start": "3229300",
    "end": "3236501"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Oh, this is all\nassuming P does not equal NP. Yes. If P equals NP, then I think\nall these things are equal.",
    "start": "3236501",
    "end": "3243530"
  },
  {
    "text": "So, thank you.  Another problem I've\nseen in some situations",
    "start": "3243530",
    "end": "3250670"
  },
  {
    "text": "is you want to find the\nspanning tree in a graph that minimizes the maximum degree.",
    "start": "3250670",
    "end": "3256840"
  },
  {
    "text": "This is also APX-intermediate. There's a constant\nfactor approximation. No PTAS, but not as\nhard as all of APX.",
    "start": "3256840",
    "end": "3266130"
  },
  {
    "text": "And another one is\nmin edge coloring, which is quite a bit easier\nthan vertex coloring.",
    "start": "3266130",
    "end": "3273119"
  },
  {
    "text": "So these are problems\nto watch out for. They're the only ones I know\nof that are APX-intermediate. There may be more known.",
    "start": "3273120",
    "end": "3278280"
  },
  {
    "text": " OK. So unless there are\nquestions, I want to go up",
    "start": "3278280",
    "end": "3284900"
  },
  {
    "text": "to log factor approximation. ",
    "start": "3284900",
    "end": "3294180"
  },
  {
    "text": "Surprisingly, in\nthe CSP universe, we didn't get any\nlog approximation",
    "start": "3294180",
    "end": "3299970"
  },
  {
    "text": "as the right answer. But there are problems where\nlog is the right answer. ",
    "start": "3299970",
    "end": "3307774"
  },
  {
    "text": "Again, there's probably\nintermediate problems. But here are some\nproblems that are actually complete over all log\napproximable problems.",
    "start": "3307774",
    "end": "3314880"
  },
  {
    "text": "So there's a log\nlower-bound and upper-bound on their approximability. I've mentioned two of them--\nset cover and dominating set.",
    "start": "3314880",
    "end": "3325089"
  },
  {
    "text": " First thing I'd like to show\nis that these two problems",
    "start": "3325090",
    "end": "3332150"
  },
  {
    "text": "are the same. I'm not going to try to\nprove lower bounds on them-- at least for now.",
    "start": "3332150",
    "end": "3337240"
  },
  {
    "text": "But let me show that you could\nL-reduce one to the other. So the easy direction\nis L-reducing dominating",
    "start": "3337240",
    "end": "3344080"
  },
  {
    "text": "set to set cover,\nbecause dominating set says, well, if I\nchoose this vertex,",
    "start": "3344080",
    "end": "3349100"
  },
  {
    "text": "then I cover these vertices. OK. So let's call this vertex V,\nand then maybe a, b, c, d.",
    "start": "3349100",
    "end": "3357920"
  },
  {
    "text": "I can represent that by a\nset-- namely v, a, b, c, d.",
    "start": "3357920",
    "end": "3364450"
  },
  {
    "text": "If I choose that set, it\ncovers those elements, just like when I\nchoose this vertex it covers those vertices. OK.",
    "start": "3364450",
    "end": "3369950"
  },
  {
    "text": "So that's a strict\nreduction from dominating set to set cover. In some sense, the bipartite\nversion gives you more control.",
    "start": "3369950",
    "end": "3378320"
  },
  {
    "text": "OK. This is the non-bipartite\nversion of set cover. So what about the\nother reduction--",
    "start": "3378320",
    "end": "3384110"
  },
  {
    "text": "reducing set cover\nto dominating set? ",
    "start": "3384110",
    "end": "3390090"
  },
  {
    "text": "So this is a little more fun. We need to build\na graph dominating",
    "start": "3390090",
    "end": "3395710"
  },
  {
    "text": "set that somehow has two very\ndifferent types of vertices. We want to represent sets, and\nwe want to represent elements.",
    "start": "3395710",
    "end": "3402810"
  },
  {
    "text": "So here's what\nwe're going to do. We build a clique\nrepresenting the sets.",
    "start": "3402810",
    "end": "3409039"
  },
  {
    "text": "So there are nodes in this\nclique-- one for every set. And then we're going to have an\nindependent set over here that",
    "start": "3409040",
    "end": "3417240"
  },
  {
    "text": "will represent the elements. And then whenever\na set over here contains an element over\nthere, we will add an edge.",
    "start": "3417240",
    "end": "3425940"
  },
  {
    "text": "So in general, an element\nmay appear in several sets, and the set is going to\nconsist of many elements.",
    "start": "3425940",
    "end": "3432200"
  },
  {
    "text": "But over here, there's\nnot going to be any edges between these elements. These are independent.",
    "start": "3432200",
    "end": "3438390"
  },
  {
    "text": "And over here, all\nof the edges exist. So the intent is you choose\na set of these vertices",
    "start": "3438390",
    "end": "3445540"
  },
  {
    "text": "corresponding to sets in\norder to cover those vertices. And that's going to work,\nbecause these vertices",
    "start": "3445540",
    "end": "3451870"
  },
  {
    "text": "are super easy to cover\nin the dominating set. You choose any of them,\nyou cover all of them.",
    "start": "3451870",
    "end": "3456880"
  },
  {
    "text": "These guys, you never want to\nput them in a dominating set. Why would you put this\nin a dominating set, when",
    "start": "3456880",
    "end": "3462800"
  },
  {
    "text": "you could just follow\none of these edges and put this in instead? That vertex will cover this one,\nand it will cover all of these.",
    "start": "3462800",
    "end": "3469960"
  },
  {
    "text": "And the only edges from\nhere are to over here. So if you choose a set, you'll\ncover all the sets and that one",
    "start": "3469960",
    "end": "3476451"
  },
  {
    "text": "element. If you choose the\nelement, you'll cover the element\nand some of the sets. So in any optimal solution,\nif this ever appears,",
    "start": "3476451",
    "end": "3484099"
  },
  {
    "text": "you can keep it optimal\nand move over here. That is sort of arguments\nwe've been doing over and over.",
    "start": "3484100",
    "end": "3489170"
  },
  {
    "text": "So there is an optimal\nsolution where you only choose vertices on the left,\nand then that is a set cover.",
    "start": "3489170",
    "end": "3496810"
  },
  {
    "text": "Again, it's a strict reduction. No loss. Cool? So that is why these two\nproblems are equivalent.",
    "start": "3496810",
    "end": "3504424"
  },
  {
    "text": "Now we're just going to\ntake on faith for now that they are log\ninapproximable. And you've probably seen that\nthis one is log approximable.",
    "start": "3504425",
    "end": "3512044"
  },
  {
    "text": "So now you know that\nthis is log approximable. ",
    "start": "3512044",
    "end": "3519540"
  },
  {
    "text": "I would say most\nof the literature",
    "start": "3519540",
    "end": "3525170"
  },
  {
    "text": "I see for inapproximability\nis either APX hardness, or what people usually\ncall set cover hardness.",
    "start": "3525170",
    "end": "3532465"
  },
  {
    "text": " I mean, the fact that set\ncovers log APX-complete, that is complete\nfor that class--",
    "start": "3532465",
    "end": "3538814"
  },
  {
    "text": "not just a log lower-bound--\nis fairly recent. So people usually have\ncalled it set cover hardness. Now you can call it\nlog APX-hardness.",
    "start": "3538814",
    "end": "3547000"
  },
  {
    "text": "So let me show you one example. There are a lot\nof both out there, and I'm actually just showing\nyou sort of a small sampling,",
    "start": "3547000",
    "end": "3555851"
  },
  {
    "text": "because there's so much. So here's a fun problem. It's called token\nreconfiguration.",
    "start": "3555852",
    "end": "3563167"
  },
  {
    "text": "And the idea is\nyou're doing some kind of motion planning in a graph. So something like\npushing blocks,",
    "start": "3563167",
    "end": "3569380"
  },
  {
    "text": "except you have a\nbunch of robots, which here are represented--\nwell, you have a graph.",
    "start": "3569380",
    "end": "3577100"
  },
  {
    "text": "And each vertex can either\nhave a robot or not. In some, you're given\nan initial configuration",
    "start": "3577100",
    "end": "3583580"
  },
  {
    "text": "of how the robots are\nplaced, and you're given a final\nconfiguration of how you want the robots to be placed. And they have the\nsame number of robots,",
    "start": "3583580",
    "end": "3589826"
  },
  {
    "text": "because you can't eat\nrobots, or create them yet. So when robots\ncan create robots,",
    "start": "3589826",
    "end": "3595470"
  },
  {
    "text": "that will be another problem. So here you have\nrobot conservation. ",
    "start": "3595470",
    "end": "3603200"
  },
  {
    "text": "So in a configuration,\nthere are three types of vertices in that situation.",
    "start": "3603200",
    "end": "3608350"
  },
  {
    "text": "It could be you have a\nvertex that currently has a robot-- here\nthey're called tokens, to be a little more generic.",
    "start": "3608350",
    "end": "3616210"
  },
  {
    "text": "It could have a robot,\nbut not be a place that should have a robot. So in the initial\nconfiguration, it has a robot,",
    "start": "3616210",
    "end": "3622690"
  },
  {
    "text": "but in the final\nconfiguration it does not. It could be you have some\nrobots that are basically",
    "start": "3622690",
    "end": "3628750"
  },
  {
    "text": "where they want to be. They are robot and also in\nthe target configuration, there's a robot there.",
    "start": "3628750",
    "end": "3634780"
  },
  {
    "text": "Or I guess there's four\ncases, but in this case we'll only have three. Or it could be that you\nwant to have robot there,",
    "start": "3634780",
    "end": "3640260"
  },
  {
    "text": "but currently you do not. So this is an instance\nthat simulates set cover.",
    "start": "3640260",
    "end": "3646817"
  },
  {
    "text": "And this is a situation\nwhere robots are all treated identically. So you don't care\nwhich robot goes where.",
    "start": "3646817",
    "end": "3652400"
  },
  {
    "text": "So you've got these\nrobots over here, which don't want to be here. They want to be over there. I mean, if you\nmeasure this length,",
    "start": "3652400",
    "end": "3658450"
  },
  {
    "text": "it's the same as this length. And these robots\ndon't want to move,",
    "start": "3658450",
    "end": "3663539"
  },
  {
    "text": "but they're going to have to,\nbecause they're in the way. In this tripartite graph,\nthey're in the way from here",
    "start": "3663540",
    "end": "3668589"
  },
  {
    "text": "to there. I didn't tell you a\nmove in this scenario is that you can take a robot\nand follow any empty path, OK",
    "start": "3668590",
    "end": "3678220"
  },
  {
    "text": "So you can make a sequence of\nmoves all at a cost of one, as long as it doesn't\nhit any other robots.",
    "start": "3678220",
    "end": "3683609"
  },
  {
    "text": "So, a collision-free path. You follow it, then you\ncan pick up another robot, move it along a\ncollision-free path,",
    "start": "3683610",
    "end": "3689349"
  },
  {
    "text": "pick up another\nrobot, and so on. So if you want to move\nall these guys over here,",
    "start": "3689349",
    "end": "3694884"
  },
  {
    "text": "you're going to have to move\nsome of these out of the way. How many? Set cover many. Here's the set cover instance\nin this bipartite graph.",
    "start": "3694884",
    "end": "3702330"
  },
  {
    "text": "So what you can do is take this\nrobot, move it out of the way, move it to one of\nthese elements, and then for the remainder\nof this set, which",
    "start": "3702330",
    "end": "3709200"
  },
  {
    "text": "are these two nodes,\nyou can take this guy and move it there in\none step, take this guy and move it there in one step.",
    "start": "3709200",
    "end": "3714800"
  },
  {
    "text": "The length of this doesn't\nmatter, because you can follow a long path. And you just drain out\nthis thing one at a time--",
    "start": "3714800",
    "end": "3721900"
  },
  {
    "text": "except for this guy, who\nyou moved out of the way. You move one of these\nto fill his spot.",
    "start": "3721900",
    "end": "3728260"
  },
  {
    "text": "And if you can cover all\nthe elements over here with only k of\nthese guys moving,",
    "start": "3728260",
    "end": "3733640"
  },
  {
    "text": "then the number of moves\nwill be k plus A. So",
    "start": "3733640",
    "end": "3740214"
  },
  {
    "text": "that's what's written here. OPT is, this is a fixed added\nof cost plus the set cover.",
    "start": "3740215",
    "end": "3746940"
  },
  {
    "text": "And this is going to be\nan L-reduction, provided this is a linear in A, which\nis easy enough to arrange.",
    "start": "3746940",
    "end": "3756990"
  },
  {
    "text": "So that's the unlabeled case. You can also solve\nthe labeled case. Maybe you want robot one\nto go to position one,",
    "start": "3756990",
    "end": "3764170"
  },
  {
    "text": "and you want robot two\nto go to position two. Same thing, but\nhere these robots are going to have to go\nback where they started.",
    "start": "3764170",
    "end": "3770900"
  },
  {
    "text": "So you just add a little vertex\nso they can get out of the way. Everything can move\nwhere they want to. Again, choose a set\ncover, move those over,",
    "start": "3770900",
    "end": "3778710"
  },
  {
    "text": "and then move them back. So you end up paying\ntwo times the set cover. But just a constant factor loss.",
    "start": "3778710",
    "end": "3783839"
  },
  {
    "text": "Still an L-reduction. And this problem\nis motivated, it's sort of a generalization\nof the 15 puzzle.",
    "start": "3783840",
    "end": "3790290"
  },
  {
    "text": "You have a little 4 by 4 grid. You've got movable tiles. You can only move one\nat a time in that case,",
    "start": "3790290",
    "end": "3796300"
  },
  {
    "text": "because there's\nonly a single gap. This is sort of a\ngeneralized form of that, where you have various tiles.",
    "start": "3796300",
    "end": "3802769"
  },
  {
    "text": "You want to get them\ninto the right spots, but you can't have collisions\nduring that motion.",
    "start": "3802770",
    "end": "3808300"
  },
  {
    "text": "So that's where this\nproblem came from. 15 puzzle, by the way, in\nthe generalized n by n form",
    "start": "3808300",
    "end": "3814320"
  },
  {
    "text": "is NP-hard and in APX,\nbut I think it's open whether it's APX-complete. ",
    "start": "3814320",
    "end": "3820700"
  },
  {
    "text": "I would show the proof, but it's\nvery complicated, so, I won't. ",
    "start": "3820700",
    "end": "3828450"
  },
  {
    "text": "Cool. Well, in the last little\nbit, I wanted to tell you about the super high end.",
    "start": "3828450",
    "end": "3836230"
  },
  {
    "text": "So we went to log approximation.  There are other\nthings known, but not",
    "start": "3836230",
    "end": "3843720"
  },
  {
    "text": "a lot of completeness results. So we're going to\nget to other kinds of interapproximability\nnext class.",
    "start": "3843720",
    "end": "3849370"
  },
  {
    "text": "For now, I want to stick\nto something APX-complete. And the most studied\nclass above log",
    "start": "3849370",
    "end": "3855790"
  },
  {
    "text": "is poly, which is like n\nto the 1 minus epsilon. ",
    "start": "3855790",
    "end": "3874860"
  },
  {
    "text": "And my main goal here is to\ntell you about some problems that you should, if you\nthink your problem is",
    "start": "3874860",
    "end": "3880880"
  },
  {
    "text": "like Poly-APX-hard, these\nare the standard problems to start from.",
    "start": "3880880",
    "end": "3886390"
  },
  {
    "text": "There are two of them. And I've mentioned them, but\nnot quite in this context. ",
    "start": "3886390",
    "end": "3897920"
  },
  {
    "text": "They are clique and\nindependent set.",
    "start": "3897920",
    "end": "3903193"
  },
  {
    "text": "These are really\nthe same problem. One is the complement\ngraph of the other.",
    "start": "3903194",
    "end": "3908670"
  },
  {
    "text": "Both maximization problems.  And those are the standard ones.",
    "start": "3908670",
    "end": "3914480"
  },
  {
    "text": "I'll leave it at that. I'm going to keep going up. The next level most studied\nis Exp-APX-complete.",
    "start": "3914480",
    "end": "3922173"
  },
  {
    "text": " So for these problems,\nthe best approximation is n divided by log squared n.",
    "start": "3922173",
    "end": "3929960"
  },
  {
    "text": "And there's a lower bound\nof n to the 1 minus epsilon. So there is a gap in terms\nof their approximability. But what we know\nis that they are",
    "start": "3929960",
    "end": "3935775"
  },
  {
    "text": "the hardest problems that have\nany n to the ce approximation. They're all reducible to each\nother via PTAS reductions.",
    "start": "3935775",
    "end": "3944380"
  },
  {
    "text": "So, fairly preserving.  So our next class\nup is APX-complete,",
    "start": "3944380",
    "end": "3952010"
  },
  {
    "text": "things, problems approximable in\nexponential and n approximation",
    "start": "3952010",
    "end": "3959980"
  },
  {
    "text": "factors. How would that happen? This is kind of funny. And the canonical problem here\nis the basic reason is numbers.",
    "start": "3959980",
    "end": "3969349"
  },
  {
    "text": " We take the traveling\nsalesman problem.",
    "start": "3969350",
    "end": "3974410"
  },
  {
    "text": "And every edge\ncan have a weight. Let's say it's integer weights. But any integer weight that\ncan be expressible in n bits",
    "start": "3974410",
    "end": "3981960"
  },
  {
    "text": "is fair game, which means\nthe actual value of that edge is going to be exponential in n.",
    "start": "3981960",
    "end": "3988500"
  },
  {
    "text": "And from that, you can get\na very easy lower bound. And in fact, all\nproblems that are approximable in exponential APX\ncan be reduced to general TSP,",
    "start": "3988500",
    "end": "3998430"
  },
  {
    "text": "where you're just given\na bunch of distances between pairs of vertices. It doesn't satisfy\ntriangle inequality. That's the non-metric aspect.",
    "start": "3998430",
    "end": "4004930"
  },
  {
    "text": "The triangle inequality TSP,\nwhich is what normally happens, there is a constant factor. It's APX complete.",
    "start": "4004930",
    "end": "4011430"
  },
  {
    "text": "But for general waits\nbetween pairs of vertices,",
    "start": "4011430",
    "end": "4017030"
  },
  {
    "text": "non-metric, it's\nExp-APX-complete, because you can\nbasically make a graph",
    "start": "4017030",
    "end": "4023220"
  },
  {
    "text": "and solve\nHamiltonicity by saying all the edges in the graph\nhave weight one or zero,",
    "start": "4023220",
    "end": "4029050"
  },
  {
    "text": "and all of the edges-- I guess\none would be a little bit more legitimate.",
    "start": "4029050",
    "end": "4034240"
  },
  {
    "text": "And all the non-edges\nin the graph are going to give\nweight infinity. Infinity is the largest\nexpressible number which",
    "start": "4034240",
    "end": "4039920"
  },
  {
    "text": "is 1, 1, 1, 1, n bits long. And so either you use one\nof those edges or you don't. And there's an exponential\ngap between them.",
    "start": "4039920",
    "end": "4047540"
  },
  {
    "text": "So even if we disallow\nzeros being an output, then we get\nexponential separation.",
    "start": "4047540",
    "end": "4053446"
  },
  {
    "text": "That doesn't prove\ncompleteness, but it proves that you can't hope\nfor better than exponential approximation there.",
    "start": "4053446",
    "end": "4060910"
  },
  {
    "text": "OK. Two more even crazier classes.",
    "start": "4060910",
    "end": "4066619"
  },
  {
    "text": "Now we did see these\nclasses come up with the\ncharacterization theorem.",
    "start": "4066620",
    "end": "4072579"
  },
  {
    "text": "But these are probably how\nthese results were proved. ",
    "start": "4072580",
    "end": "4097750"
  },
  {
    "text": "So you might think, well,\ndouble the exponential. I don't know. What's next? Next, you could define that.",
    "start": "4097750",
    "end": "4104189"
  },
  {
    "text": "But what seems to\nappear most often is this is the ultimate class\namong all NP optimization",
    "start": "4104189",
    "end": "4113040"
  },
  {
    "text": "problems, you could\nimagine being complete against all of them. And this is with respect\nto AP-reductions,",
    "start": "4113040",
    "end": "4120270"
  },
  {
    "text": "one of the ones we saw.  And I'm going to define a very\nclosely related class, which",
    "start": "4120270",
    "end": "4127489"
  },
  {
    "text": "is NPO PB, NPO\npolynomially bounded. ",
    "start": "4127490",
    "end": "4137700"
  },
  {
    "text": "OK. So these are the hardest\nproblems to approximate. This is basically the problems\nthat have numbers in them,",
    "start": "4137700",
    "end": "4144740"
  },
  {
    "text": "and this is the problem\nthat have no numbers, or if they have numbers they\nare polynomially bounded,",
    "start": "4144740",
    "end": "4150180"
  },
  {
    "text": "like the polynomial situation. So non-metric TSP, well, it's\nnot as hard as NPO-complete,",
    "start": "4150180",
    "end": "4156160"
  },
  {
    "text": "but it's more in this category. AUDIENCE: Is there a notion\nof strongness, weakness in these kind of things?",
    "start": "4156160",
    "end": "4162450"
  },
  {
    "text": "PROFESSOR: That's funny. This is a stronger result. So there's not quite an analog. But you can do\nexponential tricks",
    "start": "4162450",
    "end": "4169568"
  },
  {
    "text": "and give yourself a\nhard time over here. And here you're just\nnot allowed to use.",
    "start": "4169569",
    "end": "4176080"
  },
  {
    "text": "Everything's polynomial. So a three-partition is sort\nof more in this universe.",
    "start": "4176080",
    "end": "4181869"
  },
  {
    "text": "But in this situation, if you\nsort of have three partitions, but with exponential numbers,\nthen you get this harder class.",
    "start": "4181870",
    "end": "4190410"
  },
  {
    "text": "So this is not the\nanalog of weak. You could maybe imagine--\nwell, in some sense,",
    "start": "4190410",
    "end": "4197724"
  },
  {
    "text": "weak is a modifier\nin the problem, where you say I want to\nrestrict all the numbers to a polynomial size. So when you do something\nlike three partition,",
    "start": "4197724",
    "end": "4205900"
  },
  {
    "text": "it's sort of a weak\nproblem, or it's a polynomially bounded problem.",
    "start": "4205900",
    "end": "4212270"
  },
  {
    "text": "Strong NP hardness means\nthat that is NP-complete. Anyway vague analog,\nbut not quite.",
    "start": "4212270",
    "end": "4219012"
  },
  {
    "text": "It's possible some of these,\nyou could add a weak modifier, and it would mean\nsomething, but I don't know.",
    "start": "4219012",
    "end": "4224590"
  },
  {
    "text": "All right. So I just want to give\nyou some sample problems on both of these sides. Maybe let's start\nwith this side, which",
    "start": "4224590",
    "end": "4231930"
  },
  {
    "text": "is a little more\ninteresting, because you get some kind of\nfamiliar problems, and they're super hard.",
    "start": "4231930",
    "end": "4237533"
  },
  {
    "text": " Minimum independent\ndominating set.",
    "start": "4237533",
    "end": "4246150"
  },
  {
    "text": "We've seen independent set. We've seen dominating set. Independent set is already\nhard to approximate.",
    "start": "4246150",
    "end": "4251389"
  },
  {
    "text": "But this problem is\nworse, because even finding an independent\ndominating set",
    "start": "4251390",
    "end": "4258080"
  },
  {
    "text": "is NP-complete, whereas\nfinding an independent set, I can choose nothing.",
    "start": "4258080",
    "end": "4264210"
  },
  {
    "text": "But if I want to simultaneously\nbe dominating an independent, that's NP. Hard to find any solution.",
    "start": "4264210",
    "end": "4269570"
  },
  {
    "text": "In general in NPO PB problems,\nNPO PB-complete problems,",
    "start": "4269570",
    "end": "4277679"
  },
  {
    "text": "it's always NP-complete to\nfind a feasible solution. But it's worse than that. So the first level would be\nto find a feasible solution.",
    "start": "4277680",
    "end": "4285210"
  },
  {
    "text": "And this is saying\non top of that you want to minimize the size. I think Max would also be hard.",
    "start": "4285210",
    "end": "4290276"
  },
  {
    "text": "But I think there's\na general theorem, that if you're hard\nin the min case, you're also hard\nin the max case.",
    "start": "4290276",
    "end": "4295570"
  },
  {
    "text": "But it depends on\nthe exact set-up. So this is sort of an\noptimization version",
    "start": "4295570",
    "end": "4301540"
  },
  {
    "text": "that makes it even\nharder than NP-complete. So I think this is NP-complete,\nand this is kind of even worse.",
    "start": "4301540",
    "end": "4309330"
  },
  {
    "text": "It's sort of stating the\nstronger thing about when you're trying to optimize\nover a space of solutions,",
    "start": "4309330",
    "end": "4315380"
  },
  {
    "text": "that it's NP-complete to decide. Notice that's still\nan NPO problem. We define that\nsolutions need to be",
    "start": "4315380",
    "end": "4321489"
  },
  {
    "text": "recognizable in polynomial time. But we didn't say that\nyou can generate one in polynomial time. So it could be NP-complete\nto find a single solution,",
    "start": "4321490",
    "end": "4329030"
  },
  {
    "text": "like here. All of these problems\nwill have that property. ",
    "start": "4329030",
    "end": "4335990"
  },
  {
    "text": "Another fun problem is\nshortest computation.",
    "start": "4335990",
    "end": "4341250"
  },
  {
    "text": "This is sort of the\nmost intuitive one at a certain level. If you know Turing\nmachines, and you have a non-deterministic\nTuring machine, which",
    "start": "4341250",
    "end": "4347396"
  },
  {
    "text": "could take\nnon-deterministic branches, you want to find the computation\nin such a machine that terminates the earliest\nusing the fewest steps.",
    "start": "4347396",
    "end": "4354719"
  },
  {
    "text": "So you might think of that\nas canonical NPO PB problem. There's no numbers in it,\nbut as you can imagine,",
    "start": "4354720",
    "end": "4361690"
  },
  {
    "text": "that's super hard to do. Here's some more\ngraph theoretic ones.",
    "start": "4361690",
    "end": "4366840"
  },
  {
    "text": "Quite natural problems,\nbut super hard. Longest induced path.",
    "start": "4366840",
    "end": "4372510"
  },
  {
    "text": "Induced means, there\nare no other edges between the chosen vertices. So this is sort of\nlongest path is one thing.",
    "start": "4372510",
    "end": "4380810"
  },
  {
    "text": "That's quite hard to\napproximate-- like, I think, n to the 1 minus epsilon. That's sort of the\nanalog of Hamiltonicity.",
    "start": "4380810",
    "end": "4387070"
  },
  {
    "text": "Along this induced\npath is worse. Even finding an induced\npath of length k,",
    "start": "4387070",
    "end": "4392190"
  },
  {
    "text": "finding a feasible solution,\nfinding an induced path is hard. ",
    "start": "4392190",
    "end": "4404310"
  },
  {
    "text": "Another fun one is longest\npath with forbidden pairs.",
    "start": "4404310",
    "end": "4413749"
  },
  {
    "text": "So there are pairs of\nedges that you're not allowed to choose together, and\nsubject to those constraints you want to find\nthe longest path.",
    "start": "4413749",
    "end": "4420000"
  },
  {
    "text": "So these are all\nNPO PB complete. No numbers in any of them. Now let me give you\nsome number problems.",
    "start": "4420000",
    "end": "4426145"
  },
  {
    "start": "4426145",
    "end": "4438930"
  },
  {
    "text": "So Ones was you want to maximize\nthe number of true variables. Now we're going to add weights.",
    "start": "4438930",
    "end": "4445710"
  },
  {
    "text": "So we want to maximize\nthe sum of the weights of the true\nvariables-- and while",
    "start": "4445710",
    "end": "4452370"
  },
  {
    "text": "satisfying a Boolean formula. So again, finding a\nfeasible solution is hard.",
    "start": "4452370",
    "end": "4457970"
  },
  {
    "text": "That's not surprising. Here, the weights can\nbe exponential in value, because we allow n\nbits for the weights.",
    "start": "4457970",
    "end": "4464500"
  },
  {
    "text": "And that pushes you\ninto NPO completeness. If you say the weights have\nto be polynomially bounded,",
    "start": "4464500",
    "end": "4471210"
  },
  {
    "text": "then this problem\nis NPO PB complete. And that's sort of\nthe starting problem that they used to prove\nall of these are hard.",
    "start": "4471210",
    "end": "4476820"
  },
  {
    "text": "So they're reductions from\nthis with polynomial weights to these guys. ",
    "start": "4476820",
    "end": "4484438"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]? PROFESSOR: 3SAT. I don't know whether you could\ngo down to 2SAT is interesting.",
    "start": "4484438",
    "end": "4494080"
  },
  {
    "text": "Here they say, I think,\nprobably 3SAT or CNFSAT. Those reductions\ndefinitely still work.",
    "start": "4494080",
    "end": "4500040"
  },
  {
    "text": "Whether you could put the\n2SAT into the Max aspect, I don't know. But this could be\nfun to look at.",
    "start": "4500040",
    "end": "4506550"
  },
  {
    "text": "There aren't a ton of papers\nabout these two classes, but there are a few\nbefore they nailed down any interesting problems.",
    "start": "4506550",
    "end": "4512860"
  },
  {
    "text": "Here's another\ninteresting problem. ",
    "start": "4512860",
    "end": "4520600"
  },
  {
    "text": "Suppose you want to do\ninteger linear programming. To keep it simple, we'll\nassume that the variables are",
    "start": "4520600",
    "end": "4528710"
  },
  {
    "text": "zero or one, and then\nthat is equally hard. Here it's a little,\nunless you know",
    "start": "4528710",
    "end": "4534910"
  },
  {
    "text": "a lot about linear programming,\nit's not so obvious that finding a feasible\nsolution here is hard. But in general, linear\nprograming-- at least",
    "start": "4534910",
    "end": "4541589"
  },
  {
    "text": "in the non-integer case--\nyou could reduce optimization to feasibility. So I think the same\nthing applies here.",
    "start": "4541589",
    "end": "4547992"
  },
  {
    "text": "If you're not familiar\nwith linear programming, it's basically a bunch of\ninequality constraints,",
    "start": "4547992",
    "end": "4553450"
  },
  {
    "text": "linear inequality constraints. And now this is a\nbunch of integers. These are both given integer\nmatrices and vectors.",
    "start": "4553450",
    "end": "4561840"
  },
  {
    "text": "And they can have\nexponential value. Question? AUDIENCE: For the\nmax/min weighted ones,",
    "start": "4561840",
    "end": "4568750"
  },
  {
    "text": "for polynomial bounded,\nis it still hard if you just do ones\nand minus ones?",
    "start": "4568750",
    "end": "4575460"
  },
  {
    "text": "PROFESSOR: I think min or\nmax ones without weights is NPO PB-complete.",
    "start": "4575460",
    "end": "4581600"
  },
  {
    "text": "I should double-check. I didn't actually mention, but\nthis characterization theorem",
    "start": "4581600",
    "end": "4587100"
  },
  {
    "text": "works for weighted\nproblems also. For every single case, they show\nthat weighted and unweighted",
    "start": "4587100",
    "end": "4593540"
  },
  {
    "text": "are the same complexity,\nexcept for this one.",
    "start": "4593540",
    "end": "4598640"
  },
  {
    "text": "In the min ones case, if all\nthe variables' true, satisfy it, you get Poly-APX-completeness\nif you're unweighted.",
    "start": "4598640",
    "end": "4605330"
  },
  {
    "text": "If you're weighted, then you\ncan't find any approximation. It's NP-hard to find any factor,\nwhich I think, this is, I",
    "start": "4605330",
    "end": "4615389"
  },
  {
    "text": "think, before the\nintroduction or popularization of these classes. So that may be distinguishing\nbetween Poly-APX-complete,",
    "start": "4615390",
    "end": "4623549"
  },
  {
    "text": "which is definitely smaller\nthan NPO PB-complete. This might be NPO\nPB-completeness. Unclear.",
    "start": "4623549",
    "end": "4628930"
  },
  {
    "text": "But it's definitely\nworse than Poly-APX. Yeah? AUDIENCE: How is it that\ndistinguished from PXP?",
    "start": "4628930",
    "end": "4635150"
  },
  {
    "text": "Because I'm just confused how\nyou would ever get anything worse than this, because,\nthat's like the biggest that you [INAUDIBLE].",
    "start": "4635150",
    "end": "4642370"
  },
  {
    "text": "PROFESSOR: So this problem\nis exponential APX-hard if you forbid zero. If you allow zero, then you\ncan't get any approximation.",
    "start": "4642370",
    "end": "4650030"
  },
  {
    "text": "Here, I think even\nwhen you allow zero, or even when you\nforbid zero, you still can't get an approximation.",
    "start": "4650030",
    "end": "4656000"
  },
  {
    "text": "I think that's the idea here. Here, these problems\ngenerally you",
    "start": "4656000",
    "end": "4662020"
  },
  {
    "text": "can get, depending\non your set-up, these problems you can all get\nlike a factor, n approximation.",
    "start": "4662020",
    "end": "4667395"
  },
  {
    "text": " Well, maybe not in\npolynomial time. This is hard to find.",
    "start": "4667395",
    "end": "4674090"
  },
  {
    "text": "Some of these you can. Longest induced path, just\nhave a path of length 1. That will be induced.",
    "start": "4674090",
    "end": "4680220"
  },
  {
    "text": "So that gives you a\nfactor n approximation. There is a lower bound\non this situation,",
    "start": "4680220",
    "end": "4685239"
  },
  {
    "text": "n to the 1 minus epsilon\ninapproximability.  I think morally it\nshould be a factor n,",
    "start": "4685239",
    "end": "4692810"
  },
  {
    "text": "but this is the\nbest result I found. So it's funny. This is only for\nnumber problems.",
    "start": "4692810",
    "end": "4699800"
  },
  {
    "text": "So I presented this\nis as in between. But this is actually\nin some sense lower than Exp-APX-completeness.",
    "start": "4699800",
    "end": "4704915"
  },
  {
    "text": " It's sort of a harder\nversion of Poly-APX. ",
    "start": "4704915",
    "end": "4712130"
  },
  {
    "text": "This is a slightly harder\nversion of Exp-APX. ",
    "start": "4712130",
    "end": "4717320"
  },
  {
    "text": "I think it's a small\ndifference, but it's good to know there\nis this difference.",
    "start": "4717320",
    "end": "4723410"
  },
  {
    "text": "Other questions? All right. So this ends what I plan to say\nabout L-reduction-style proofs,",
    "start": "4723410",
    "end": "4734460"
  },
  {
    "text": "which are all about\npreserving approximability. The next class,\nwe're going to look at a different take on\ninapproximability, which",
    "start": "4734460",
    "end": "4741980"
  },
  {
    "text": "is called gaps, and gap\npreserving reductions, where you can set up\na problem that either",
    "start": "4741980",
    "end": "4748320"
  },
  {
    "text": "it has a great solution,\nor the next solution below that is way lower. And there's a gap between the\nbest and the next to best.",
    "start": "4748320",
    "end": "4755105"
  },
  {
    "text": "And whenever you\nhave such a gap, you also have an\ninapproximability gap, because you know there's\nthis solution out there,",
    "start": "4755105",
    "end": "4760290"
  },
  {
    "text": "but finding it, if it's\nNP-complete to find this, to solve it exactly, and\nso the next level down you",
    "start": "4760290",
    "end": "4767239"
  },
  {
    "text": "lose some factor. And whatever that gap is is\nyour inapproximability bound. It doesn't give you\ncompleteness results like this",
    "start": "4767240",
    "end": "4773280"
  },
  {
    "text": "in general-- not always. But it tends to give you really\nget inapproximability bounds. Here I've completely ignored\nwhat the constant factors are.",
    "start": "4773280",
    "end": "4780190"
  },
  {
    "text": "Most of them are not so great. Like when you\nprove APX-hardness, usually you get a 1 plus 1\nover 1,000 kind of lower bound",
    "start": "4780190",
    "end": "4788770"
  },
  {
    "text": "on the possibility factor. But the best upper\nbound is like 2, or 1.5. And what we'll talk\nabout next time,",
    "start": "4788770",
    "end": "4795290"
  },
  {
    "text": "you can get much closer--\nsometimes exact bounds between upper and lower.",
    "start": "4795290",
    "end": "4800380"
  },
  {
    "text": "But that will be next week. ",
    "start": "4800380",
    "end": "4807320"
  }
]