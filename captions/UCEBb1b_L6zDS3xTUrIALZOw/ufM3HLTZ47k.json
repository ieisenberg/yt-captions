[
  {
    "text": "The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13350"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu.",
    "start": "13350",
    "end": "18400"
  },
  {
    "text": " RUSS TEDRAKE: OK. Welcome back. Well, sorry, I wasn't here.",
    "start": "18400",
    "end": "24770"
  },
  {
    "text": "It's more dramatic\nfor me, I guess, than if I had been\nhere on Tuesday. I hope John did a good\njob covering for me.",
    "start": "24770",
    "end": "33523"
  },
  {
    "text": "I'm sure he did. So you've learned\nabout walking robots.",
    "start": "33523",
    "end": "39649"
  },
  {
    "text": "You've learned about\nlots of robots. You learned a handful of\nvery powerful techniques,",
    "start": "39650",
    "end": "45080"
  },
  {
    "text": "I think, for designing\nmotions for these robots.",
    "start": "45080",
    "end": "51320"
  },
  {
    "text": "Some of my favorite these days\nare things like the dir call type methods.",
    "start": "51320",
    "end": "56400"
  },
  {
    "text": "So let's consider the problem\nof taking some robot described",
    "start": "56400",
    "end": "61670"
  },
  {
    "text": "by our standard, some\nnon-linear dynamics form,",
    "start": "61670",
    "end": "68450"
  },
  {
    "text": "and taking that robot from\nan initial condition x0",
    "start": "68450",
    "end": "75950"
  },
  {
    "text": "and getting it to\nsome final condition. I don't even care\nabout the time.",
    "start": "75950",
    "end": "81140"
  },
  {
    "text": "So you're just getting it\nto some other state, x goal.",
    "start": "81140",
    "end": "88860"
  },
  {
    "text": "So what tools have\nwe already got that could help us\ndrive this system",
    "start": "88860",
    "end": "95981"
  },
  {
    "text": "from some initial condition\nto some goal state? ",
    "start": "95982",
    "end": "101030"
  },
  {
    "text": "The answer is a lot\nof tools, right? If the state space\nis small enough,",
    "start": "101030",
    "end": "107330"
  },
  {
    "text": "you could imagine designing an\noptimal control cost function that we could do\ndynamic programming on.",
    "start": "107330",
    "end": "112880"
  },
  {
    "text": "That would get us to that goal\nif we only rewarded ourselves from being away from the goal.",
    "start": "112880",
    "end": "118370"
  },
  {
    "text": "We could do a shooting\nmethod, right? If we're using our\nSQP, our SNOPT type",
    "start": "118370",
    "end": "127933"
  },
  {
    "text": "interface to the\nshooting methods, then we could provide a\nfinal value constraint, which",
    "start": "127933",
    "end": "133490"
  },
  {
    "text": "says I want the endpoint\nof my trajectory to be exactly at the goal. And that would solve this\nproblem in some cases.",
    "start": "133490",
    "end": "141822"
  },
  {
    "text": "But both of those methods\nhave problems, right? The DP doesn't scale. The shooting methods\nscale nicely.",
    "start": "141822",
    "end": "149610"
  },
  {
    "text": "But if you ask your\nshooting method to drive you from x0\nto x goal, there's",
    "start": "149610",
    "end": "156974"
  },
  {
    "text": "some chance it's going to just\nsay, I can't do it, right? I can't satisfy that\nconstraint because it's",
    "start": "156975",
    "end": "162200"
  },
  {
    "text": "based on a local\ngradient optimization. And if there's local\nminima, SNOPT will just say,",
    "start": "162200",
    "end": "170300"
  },
  {
    "text": "I can't satisfy the constraint\nx at time final equals x goal,",
    "start": "170300",
    "end": "176240"
  },
  {
    "text": "happens a lot. If you're looking at hard\nenough, interesting enough, problems, it'll\nhappen to you, OK?",
    "start": "176240",
    "end": "181599"
  },
  {
    "text": "So what do you do? Do you just say, oh, find\na new research problem, tell my advisor I've got\nto find something else?",
    "start": "181600",
    "end": "189260"
  },
  {
    "text": "OK, there's more\nthings you can try. The methods I want\nto talk about today",
    "start": "189260",
    "end": "197900"
  },
  {
    "text": "are the feasible motion\nplanning algorithms. So motion planning\nis a very broad term.",
    "start": "197900",
    "end": "204665"
  },
  {
    "text": "It's used all the\ntime in robotics. I'd say roughly\neverything we've done to date has been a motion\nplanning algorithm.",
    "start": "204665",
    "end": "212410"
  },
  {
    "text": "It's like saying it's\na control algorithm. It's a very general term. Some people debate whether an\nalgorithm is a motion planning",
    "start": "212410",
    "end": "222260"
  },
  {
    "text": "algorithm or an optimal\ncontrol algorithm or whatever. I think that's sort\nof a waste of time. I would say they're all\nmotion planning algorithms.",
    "start": "222260",
    "end": "229850"
  },
  {
    "text": "Most of the things we've\ntalked about so far I would call optimal motion\nplanning, where we actually",
    "start": "229850",
    "end": "243769"
  },
  {
    "text": "had a cost function\nflying around to do it. ",
    "start": "243770",
    "end": "249230"
  },
  {
    "text": "Oftentimes, motion plans\ngo from a start to a goal. Oftentimes, they're open loop,\nbut that's not really defining.",
    "start": "249230",
    "end": "256380"
  },
  {
    "text": "You can do feedback\nmotion planning. Motion planing is just\na very general term saying I'm designing the\nmotions of my machine.",
    "start": "256380",
    "end": "265323"
  },
  {
    "text": "The reason I want to\nuse motion planning in the title for this\nlecture and next lecture is because there's an important\nclass of motion planning",
    "start": "265323",
    "end": "273319"
  },
  {
    "text": "algorithms that are not\ncovered by the optimal control algorithms. And that's these feasible\nmotion planning algorithms.",
    "start": "273320",
    "end": "293939"
  },
  {
    "text": "So the optimal motion\nplanning algorithms try to get me from x0 to\nx goal in some way that's good as scored by\nsome cost function.",
    "start": "293940",
    "end": "302759"
  },
  {
    "text": "Feasible motion planning\nalgorithms aspire to do less. They just say, I'll get\nany trajectory that gets me",
    "start": "302760",
    "end": "310830"
  },
  {
    "text": "from the start to the goal. Because they surface their\nclaims on optimality,",
    "start": "310830",
    "end": "316479"
  },
  {
    "text": "oftentimes these\nalgorithms will work for more complicated systems. ",
    "start": "316480",
    "end": "323099"
  },
  {
    "text": "So the message I want\nto sort of deliver today is that there are a lot of\ngood feasible motion planning",
    "start": "323100",
    "end": "329850"
  },
  {
    "text": "algorithms out\nthere in the world. We'll talk about some of the\nmost exciting ones, I think.",
    "start": "329850",
    "end": "336180"
  },
  {
    "text": "And actually, even if you\ncare about optimality, even if deep down\nin your core you say this is a cost function\nthat I must optimize for my life",
    "start": "336180",
    "end": "345270"
  },
  {
    "text": "to be complete, you still should\ncare about feasible motion planning algorithms because\nthey can do something",
    "start": "345270",
    "end": "351960"
  },
  {
    "text": "like seed a dir call\nmethod, let's say, and get it out of local minima.",
    "start": "351960",
    "end": "357520"
  },
  {
    "text": "So let's say I have an Acrobot\nthat I'm trying to swing up. And I've got a table right\nhere, so I can't swing that way.",
    "start": "357520",
    "end": "364350"
  },
  {
    "text": "And whatever my initial\nguess at the trajectory,",
    "start": "364350",
    "end": "369542"
  },
  {
    "text": "the system keeps\nbanging up against this. It can't figure out a way\nto turn around and go back",
    "start": "369542",
    "end": "374640"
  },
  {
    "text": "the opposite way\nto get to the top. Or maybe there's a table that\nyou have to go through just",
    "start": "374640",
    "end": "379710"
  },
  {
    "text": "at a certain way. I would say, if\nyou're shooting method",
    "start": "379710",
    "end": "386580"
  },
  {
    "text": "is having trouble finding\nits way to the goal, maybe you should back\noff on optimality. Just find any old trajectory\nthat gets to the goal.",
    "start": "386580",
    "end": "393870"
  },
  {
    "text": "And then take that result of\nthat motion planning algorithm, hand it to dir call,\nand let it then do the rest of the optimization.",
    "start": "393870",
    "end": "400377"
  },
  {
    "text": "We'll say more about this. I just wanted to\ngive you some context about why we want to talk about\nthis extra set of algorithms.",
    "start": "400377",
    "end": "408300"
  },
  {
    "text": "In general, we're\ngoing to expect these to scale to slightly\nhigher dimensional systems",
    "start": "408300",
    "end": "414240"
  },
  {
    "text": "than the optimal\ncontrol algorithms we've talked about\nso far and to be more global than the\nshooting methods.",
    "start": "414240",
    "end": "421650"
  },
  {
    "text": " There's a great book on\nall of this stuff called--",
    "start": "421650",
    "end": "431425"
  },
  {
    "text": "I guess it should\nbe underlined-- Planning Algorithms.",
    "start": "431425",
    "end": "436430"
  },
  {
    "text": "So I just spelled\nplanning wrong. So I'm completely\nsleep deprived.",
    "start": "436430",
    "end": "441500"
  },
  {
    "text": "If I do stupid things\nlike that, call them out. I'll fix them. ",
    "start": "441500",
    "end": "462930"
  },
  {
    "text": "Something about kid\nnumber two, the first kid stays awake while the other\nkid sleeps and vice versa. It just makes it that\nmuch more interesting.",
    "start": "462930",
    "end": "469940"
  },
  {
    "text": "Yeah. And Planning Algorithms,\nthe book by Steve LaValle is actually--",
    "start": "469940",
    "end": "474979"
  },
  {
    "text": "Steve's got it on his\nwebsite, the full version. You can download for free. So it's nice accessible\ntext that you",
    "start": "474980",
    "end": "481550"
  },
  {
    "text": "can check out if you like it.  OK. So before we get into our\nfirst feasible motion planning",
    "start": "481550",
    "end": "488203"
  },
  {
    "text": "algorithm, let me give you\njust a little sort of culture. The motion planning\nalgorithms, I think,",
    "start": "488203",
    "end": "495680"
  },
  {
    "text": "actually grew up not so much\nin the controls community, but in more the artificial\nintelligence community.",
    "start": "495680",
    "end": "503090"
  },
  {
    "text": "And there's a reason for that. There are serious\npeople out there that think the only thing\nthere is to intelligence",
    "start": "503090",
    "end": "511190"
  },
  {
    "text": "is the ability to do search. So I think that artificial\nintelligence via search,",
    "start": "511190",
    "end": "523820"
  },
  {
    "text": "to some extent,\nsounds ridiculous. But it's pretty hard to\ndisprove and some people really",
    "start": "523820",
    "end": "530060"
  },
  {
    "text": "think it. But that's the way it happened. So let me give you\nsome cultural examples",
    "start": "530060",
    "end": "535250"
  },
  {
    "text": "of where that came from. Some of the original efforts\nin artificial intelligence,",
    "start": "535250",
    "end": "541700"
  },
  {
    "text": "they thought, my\ncomputer program will be intelligent\nif it can play a game like checkers or chess.",
    "start": "541700",
    "end": "548690"
  },
  {
    "text": "And as early as the '50s, Art\nSamuel was building checker playing robots that are\nbasically doing search in order",
    "start": "548690",
    "end": "556370"
  },
  {
    "text": "to try to figure out how to\nbeat their opponent in chess-- or in checkers, sorry.",
    "start": "556370",
    "end": "561920"
  },
  {
    "start": "561920",
    "end": "568459"
  },
  {
    "text": "Checkers-- Samuel in the '50s. ",
    "start": "568460",
    "end": "576199"
  },
  {
    "text": "Chess, we can leap forward\nto IBM's Deep Blue, let's say in the last decade.",
    "start": "576200",
    "end": "584120"
  },
  {
    "text": " These are computer\nprograms that,",
    "start": "584120",
    "end": "589970"
  },
  {
    "text": "at times, can play with the\nsophistication of a trained human.",
    "start": "589970",
    "end": "595850"
  },
  {
    "text": "And they're based\non simply having the rules of the\ngame programmed, some databases of moves\nthat they've stored up,",
    "start": "595850",
    "end": "603650"
  },
  {
    "text": "a lot of them in the Deep\nBlue case, and search. Finding the way to move\nmy robot from x0 to x goal",
    "start": "603650",
    "end": "613160"
  },
  {
    "text": "you can imagine being very, very\nanalogous to taking my computer game and finding from an\ninitial board configuration",
    "start": "613160",
    "end": "620720"
  },
  {
    "text": "to a winning board\nconfiguration. They're exactly\nthe same problem.",
    "start": "620720",
    "end": "626150"
  },
  {
    "text": "So because of things\nlike computer games, the artificial\nintelligence community really started building up\nthese search algorithms.",
    "start": "626150",
    "end": "633500"
  },
  {
    "text": "And they were very fundamental. ",
    "start": "633500",
    "end": "640680"
  },
  {
    "text": "The other big push, I\nthink, from the AI community was in ideas like\ntheorem proving.",
    "start": "640680",
    "end": "646824"
  },
  {
    "start": "646825",
    "end": "653060"
  },
  {
    "text": "So an AI zealot of\n4 years ago might",
    "start": "653060",
    "end": "659067"
  },
  {
    "text": "have told you that mathematics\nwould be obsolete by now. Because all you have\nto do is program",
    "start": "659067",
    "end": "664160"
  },
  {
    "text": "the basic rules of mathematics\ninto a set of rules that your computer\nprogram could evaluate,",
    "start": "664160",
    "end": "672680"
  },
  {
    "text": "and then proving whether\nsomething was true or not was just a matter of\nfinding the right chain",
    "start": "672680",
    "end": "678200"
  },
  {
    "text": "of small logical\ndeductions to put together",
    "start": "678200",
    "end": "684200"
  },
  {
    "text": "to be able to\nprove that p equals np or something like that. OK.",
    "start": "684200",
    "end": "690050"
  },
  {
    "text": "And actually, I joke, but that's\nactually a very powerful thing that works today.",
    "start": "690050",
    "end": "695120"
  },
  {
    "text": "If you've use\nMathematica or Maple and you've asked it\nto simplify, that's",
    "start": "695120",
    "end": "700340"
  },
  {
    "text": "a result of theorem\nproving work that people did in artificial\nintelligence a long time ago.",
    "start": "700340",
    "end": "708080"
  },
  {
    "text": "And again, it's a\nmatter of designing the rules of the game, which\nis a collection, in that case, of mathematical\nprimitives, and finding",
    "start": "708080",
    "end": "714800"
  },
  {
    "text": "a path from your initial\nknowledge to some proof,",
    "start": "714800",
    "end": "720000"
  },
  {
    "text": "let's say.  But even going beyond that,\nthere's people out there that--",
    "start": "720000",
    "end": "728565"
  },
  {
    "text": "my favorite instance\nof this is there's a guy, David Lenat,\nwho's somewhere in Texas",
    "start": "728565",
    "end": "734990"
  },
  {
    "text": "right now typing-- well, he's got teams of\npeople typing random factoids",
    "start": "734990",
    "end": "740210"
  },
  {
    "text": "into computers. He's got this\nproject called Cyc. ",
    "start": "740210",
    "end": "747830"
  },
  {
    "text": "How many people\nhave heard of Cyc? Yeah? So I think this guy\nbelieves that, if I",
    "start": "747830",
    "end": "755690"
  },
  {
    "text": "can get enough people\nto type in things like, dogs chase cats and balloons\ngo up or something--",
    "start": "755690",
    "end": "762140"
  },
  {
    "text": "I don't know, enough random\nfactoids into this computer-- and he builds up an\nontology of knowledge",
    "start": "762140",
    "end": "774410"
  },
  {
    "text": "to some big collection of facts\nand a good search algorithm",
    "start": "774410",
    "end": "779509"
  },
  {
    "text": "to back it up, that his computer\nwill achieve intelligence. It'll be able to\nanswer any query.",
    "start": "779510",
    "end": "785045"
  },
  {
    "text": "It'll be completely\nindistinguishable from a human. You could ask it any query. And as long as it's got the\nright chain of factoids stored",
    "start": "785045",
    "end": "791540"
  },
  {
    "text": "away and a good search\nalgorithm behind it, then this thing is intelligent.",
    "start": "791540",
    "end": "796670"
  },
  {
    "text": "And people have\nbeen typing things in for a really long time. You can go, and you can\nget the student version",
    "start": "796670",
    "end": "803360"
  },
  {
    "text": "or whatever and\nask it questions. And you can get a research\nversion and ask it questions. And people use it.",
    "start": "803360",
    "end": "808790"
  },
  {
    "text": "And I mean, Google,\nI think, works better because it's\naccessing WordNet,",
    "start": "808790",
    "end": "814280"
  },
  {
    "text": "which is basically an\nontology of synonyms and things like this. These sound crazy, but\nthey're the backbone",
    "start": "814280",
    "end": "820945"
  },
  {
    "text": "of some of the things\nthat you use every day. ",
    "start": "820945",
    "end": "827190"
  },
  {
    "text": "OK. So for whatever reason,\nfor these kind of reasons,",
    "start": "827190",
    "end": "833060"
  },
  {
    "text": "the search algorithms, the\nmotion planning algorithms that we're going to talk\nabout, which are today",
    "start": "833060",
    "end": "838250"
  },
  {
    "text": "used a lot in robotics, grew\nup under the computer science umbrella under\nartificial intelligence.",
    "start": "838250",
    "end": "845194"
  },
  {
    "start": "845194",
    "end": "855569"
  },
  {
    "text": "So the term motion\nplanning typically",
    "start": "855570",
    "end": "862350"
  },
  {
    "text": "implies that you've got\nsome dynamical system you're shoving around, let's say, but\nit's clearly just an instance",
    "start": "862350",
    "end": "872580"
  },
  {
    "text": "of this search problem.  When people talk about\nmotion planning in robotics,",
    "start": "872580",
    "end": "880830"
  },
  {
    "text": "there are problems that\npeople care about a lot. ",
    "start": "880830",
    "end": "891630"
  },
  {
    "text": "A majority of the motion\nplanning literature in robotics is concerned with\nkinematic motion planning,",
    "start": "891630",
    "end": "908430"
  },
  {
    "text": "often with obstacles\nor something like this. ",
    "start": "908430",
    "end": "917050"
  },
  {
    "text": "So if I have a robotic arm\nwith 10 degrees of freedom and I want to reach through\nsome complicated geometry",
    "start": "917050",
    "end": "925620"
  },
  {
    "text": "to turn a doorknob or to\nreach down and pick up some part from\nassembly, then that's",
    "start": "925620",
    "end": "931230"
  },
  {
    "text": "a complicated geometric problem. ",
    "start": "931230",
    "end": "936733"
  },
  {
    "text": "Typically, you assume that the\nsystems are fully actuated. You don't worry about actually\nhandling the trajectory once you get there.",
    "start": "936733",
    "end": "942460"
  },
  {
    "text": "That's normally assumed away. And they assume that all\ntrajectories are feasible. They're just trying to find\nsome path through the obstacle",
    "start": "942460",
    "end": "950100"
  },
  {
    "text": "field. So one of the key\nproblems that you can think about in that world\nis the piano movers problem.",
    "start": "950100",
    "end": "966089"
  },
  {
    "start": "966090",
    "end": "975850"
  },
  {
    "text": "How many people know the\npiano movers problem? OK. How many people have ever\nmoved a couch into a dorm room?",
    "start": "975850",
    "end": "983010"
  },
  {
    "text": "You all know the piano\nmovers problem then, right? Basic task is you\nhave some 3D shape.",
    "start": "983010",
    "end": "989760"
  },
  {
    "text": "You have a bunch of obstacles. You have to find a position\nand orientation trajectory that",
    "start": "989760",
    "end": "997200"
  },
  {
    "text": "will maneuver your big piano\nthrough a world of obstacles. It's just like going up\nthe stairs with your couch,",
    "start": "997200",
    "end": "1007800"
  },
  {
    "text": "you know, marking the walls and\nbending your couch as you go.",
    "start": "1007800",
    "end": "1012830"
  },
  {
    "text": "And that's sort some of the\ndriving problems in the motion",
    "start": "1012830",
    "end": "1018920"
  },
  {
    "text": "planning space. So it's things like that,\nfinding a collision-free path for a complicated geometry\nthrough an obstacle based",
    "start": "1018920",
    "end": "1029569"
  },
  {
    "text": "environment, just trying to\ngive you a little culture here.",
    "start": "1029569",
    "end": "1035270"
  },
  {
    "text": "And in that world, one of\nthe most important concepts,",
    "start": "1035270",
    "end": "1040339"
  },
  {
    "text": "I think, is the configuration\nspace concept, which actually--",
    "start": "1040339",
    "end": "1055960"
  },
  {
    "text": "you know who came up with\nconfiguration spaces? He's sitting right upstairs.",
    "start": "1055960",
    "end": "1061065"
  },
  {
    "text": "It's Tomás Lozano-Pérez\nis, I think, credited with the\nconfiguration space idea.",
    "start": "1061065",
    "end": "1068090"
  },
  {
    "text": "And the idea is that these\nproblems can get a lot simpler. ",
    "start": "1068090",
    "end": "1075429"
  },
  {
    "text": "Let's say I have a\nsquare robot going",
    "start": "1075430",
    "end": "1080910"
  },
  {
    "text": "through some complicated\nobstacle field. ",
    "start": "1080910",
    "end": "1088360"
  },
  {
    "text": "And I want to find a path\nfrom some start to the goal. ",
    "start": "1088360",
    "end": "1094510"
  },
  {
    "text": "Well, instead of reasoning about\nthe geometry of this relative to the geometry of\nthis all the time,",
    "start": "1094510",
    "end": "1100390"
  },
  {
    "text": "the configuration\nspace tells you you should actually add\nthe volume of your robot",
    "start": "1100390",
    "end": "1106779"
  },
  {
    "text": "to your obstacles coming up with\nconfiguration space obstacles. ",
    "start": "1106780",
    "end": "1113560"
  },
  {
    "text": "If you actually add the\nvolume of your robot to the obstacles-- I'm doing this very\nhand-waving here.",
    "start": "1113560",
    "end": "1121060"
  },
  {
    "text": "But then you can\nturn the problem of finding a big geometry\nthrough another geometric field",
    "start": "1121060",
    "end": "1130930"
  },
  {
    "text": "to taking a point and driving\nit through the geometric field. And that's a critical,\ncritical idea",
    "start": "1130930",
    "end": "1138179"
  },
  {
    "text": "in the world of kinematic\nmotion planning. ",
    "start": "1138180",
    "end": "1144160"
  },
  {
    "text": "We don't really care about\nkinematic motion planning in this class. We've got enough troubles\nwithout obstacles.",
    "start": "1144160",
    "end": "1150340"
  },
  {
    "text": "We just care about having an\ninteresting dynamic system to move around.",
    "start": "1150340",
    "end": "1155860"
  },
  {
    "text": "So the things we're\ntalking about in this class",
    "start": "1155860",
    "end": "1161410"
  },
  {
    "text": "fall under the heading\nkinodynamic motion planning.",
    "start": "1161410",
    "end": "1168730"
  },
  {
    "start": "1168730",
    "end": "1177010"
  },
  {
    "text": "And of course, the nonholonomic\nmotion planning ideas",
    "start": "1177010",
    "end": "1186280"
  },
  {
    "text": "are very related, too. ",
    "start": "1186280",
    "end": "1196315"
  },
  {
    "text": "We care about the dynamics. We care about things\nthat are forced to follow some trajectories,\nlike nonholonomic systems are,",
    "start": "1196315",
    "end": "1203480"
  },
  {
    "text": "too. ",
    "start": "1203480",
    "end": "1209990"
  },
  {
    "text": "So if you're out there seeing\npapers and talks and everything by motion planning, I just\nwant you to sort of see",
    "start": "1209990",
    "end": "1216220"
  },
  {
    "text": "that they're certainly related\nto the optimal control things we've talked about. But sometimes they\nlet go of optimality.",
    "start": "1216220",
    "end": "1224440"
  },
  {
    "text": "They're often about\nkinematics, but there's a good subset of them\nwhich is thinking about exactly the\nproblems we care about",
    "start": "1224440",
    "end": "1230830"
  },
  {
    "text": "with this kinodynamic\nmotion planning.  Excellent. OK.",
    "start": "1230830",
    "end": "1236346"
  },
  {
    "text": "So now, let's do\nsome motion planning. Culture is there. ",
    "start": "1236347",
    "end": "1250429"
  },
  {
    "text": "When we did dynamic\nprogramming, I already sort of forced upon you the\nidea that we could potentially,",
    "start": "1250430",
    "end": "1257150"
  },
  {
    "text": "at great cost, discretize our\nsystem and state and actions",
    "start": "1257150",
    "end": "1263180"
  },
  {
    "text": "potentially. So let's do the same\nthing when we start off with motion planning and\nstart with discrete planning",
    "start": "1263180",
    "end": "1269780"
  },
  {
    "text": "algorithms. ",
    "start": "1269780",
    "end": "1289400"
  },
  {
    "text": "Let's say we've got our phase\nplot of our simple pendulum. ",
    "start": "1289400",
    "end": "1295432"
  },
  {
    "text": "For kicks right now,\nlet's just start off with the trivial\ndiscretization, let's say. We're going to bin up\nour space like this,",
    "start": "1295432",
    "end": "1307130"
  },
  {
    "text": "call each one of\nthose a state and try",
    "start": "1307130",
    "end": "1312380"
  },
  {
    "text": "to start talking about a\ngraph-based representation of the dynamics of the system\nthat tries to find a path,",
    "start": "1312380",
    "end": "1322750"
  },
  {
    "text": "let's say, from our initial\nstate to some goal state.",
    "start": "1322750",
    "end": "1331120"
  },
  {
    "text": " This isn't the only way\nto do discretization,",
    "start": "1331120",
    "end": "1337610"
  },
  {
    "text": "but it's a good way to\nstart thinking about it. So that turns the problem\ninto some graphical model,",
    "start": "1337610",
    "end": "1349610"
  },
  {
    "text": "where the control actions\ndetermine our state transitions. I like to actually call them\ns and a in the discrete world.",
    "start": "1349610",
    "end": "1357905"
  },
  {
    "start": "1357905",
    "end": "1367360"
  },
  {
    "text": "So people know a lot about\ndoing search on a graph.",
    "start": "1367360",
    "end": "1372825"
  },
  {
    "text": "I don't want to\nbore you with it, but I want you to at least\nknow the algorithms that are out there and be\nable to call upon them",
    "start": "1372825",
    "end": "1379234"
  },
  {
    "text": "if they become useful. So let's see we've butchered\nup our system like this,",
    "start": "1379234",
    "end": "1385810"
  },
  {
    "text": "and we want to find a path from\nsome starting discrete state",
    "start": "1385810",
    "end": "1391390"
  },
  {
    "text": "to some goal state with a\ndiscrete set of actions. How can we do that? ",
    "start": "1391390",
    "end": "1403814"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] search\nalgorithm, like A star. RUSS TEDRAKE: A star\nis a perfect example.",
    "start": "1403814",
    "end": "1410250"
  },
  {
    "text": "Yeah. Dynamic programming\nis on the table, too.",
    "start": "1410250",
    "end": "1415500"
  },
  {
    "text": "Dynamic programming,\nthat's actually the way I-- the reason I drew\nthat picture before is because we talked\nabout that as a way",
    "start": "1415500",
    "end": "1420797"
  },
  {
    "text": "to think about\ndynamic programming. In dynamic programming\nis incredibly efficient if what you care about\nis knowing the optimal feedback",
    "start": "1420797",
    "end": "1430770"
  },
  {
    "text": "policy, how to get to the goal\nfrom every possible initial state. ",
    "start": "1430770",
    "end": "1439264"
  },
  {
    "text": "I mean, the problem\nwith that is, if you have to look at\nevery single initial state, then it's not going to scale the\nhigh dimensions because there's",
    "start": "1439265",
    "end": "1445417"
  },
  {
    "text": "going to be a lot of states. If you have a slightly higher\ndimensional system and you want to find a start to the goal,\nbut just a single path--",
    "start": "1445417",
    "end": "1453299"
  },
  {
    "text": "you don't care about\nevery possible state-- then you can do not better\nthan dynamic programming. But you can be more selective\nwith your dynamic programming",
    "start": "1453300",
    "end": "1462030"
  },
  {
    "text": "algorithm by doing\nthese Dijkstra type and A star type algorithms.",
    "start": "1462030",
    "end": "1468840"
  },
  {
    "text": "So let me just sort\nof do that quickly, so you know that that's there. ",
    "start": "1468840",
    "end": "1502070"
  },
  {
    "text": "So dynamic programming,\nagain, it's very efficient.",
    "start": "1502070",
    "end": "1514610"
  },
  {
    "text": "It goes to a global optima. ",
    "start": "1514610",
    "end": "1524900"
  },
  {
    "text": "Typically, DP is used\nto describe the version where you're trying to solve\nfor every state simultaneously.",
    "start": "1524900",
    "end": "1543330"
  },
  {
    "text": " You can do a bit better,\nyou can be more selective,",
    "start": "1543330",
    "end": "1550430"
  },
  {
    "text": "if you just care about from a\nstart to a goal, like 0 to xg.",
    "start": "1550430",
    "end": "1556610"
  },
  {
    "text": " It's actually a\nlittle bit surprising",
    "start": "1556610",
    "end": "1562580"
  },
  {
    "text": "to say that I can actually find\nmy path from a start to a goal",
    "start": "1562580",
    "end": "1568159"
  },
  {
    "text": "and know that I'm\nat a global optima without ever expanding\nevery single node.",
    "start": "1568160",
    "end": "1573880"
  },
  {
    "start": "1573880",
    "end": "1618190"
  },
  {
    "text": "And then sometimes we don't even\ncare about optimality at all. Like I said, some\nof these algorithms are just trying to find\nany old path to the goal,",
    "start": "1618190",
    "end": "1624400"
  },
  {
    "text": "and then you can\ncertainly imagine finding your path to the\ngoal without expanding every possible node.",
    "start": "1624400",
    "end": "1630250"
  },
  {
    "start": "1630250",
    "end": "1651670"
  },
  {
    "text": "They all have a\nvery simple recipe. Basically, you keep a\nprioritized Q. How many people",
    "start": "1651670",
    "end": "1665919"
  },
  {
    "text": "know what a prioritized Q is? I should say it's often\ncalled Q, but it means queue.",
    "start": "1665920",
    "end": "1673000"
  },
  {
    "text": "It's another sleep\ndeprivation thing there.  So a prioritized queue\nis a data structure",
    "start": "1673000",
    "end": "1680200"
  },
  {
    "text": "that we use in computer science\nthat I'll describe quickly",
    "start": "1680200",
    "end": "1686059"
  },
  {
    "text": "here. So we basically\nhave a list of nodes",
    "start": "1686060",
    "end": "1691720"
  },
  {
    "text": "that we want to\nconsider expanding next stored in some\nlist, but they're",
    "start": "1691720",
    "end": "1699790"
  },
  {
    "text": "stored in that list in an\nordered fashion, ordered by how likely it is that we\nwant to check that node next.",
    "start": "1699790",
    "end": "1710620"
  },
  {
    "text": "Depending on the ways\nthat you add nodes into the prioritized\nqueue, you can do any number of the standard\nalgorithms, the breadth",
    "start": "1710620",
    "end": "1722680"
  },
  {
    "text": "first search, the\ndepth first search. ",
    "start": "1722680",
    "end": "1736480"
  },
  {
    "text": "Dijkstra's, let me make\nsure I spell it right. D-J-I, right? ",
    "start": "1736480",
    "end": "1744660"
  },
  {
    "text": "What is it? AUDIENCE: D-I-J. RUSS TEDRAKE: D-I-J? OK, good. Thanks. ",
    "start": "1744660",
    "end": "1754695"
  },
  {
    "text": "And you could do A star. There's more. There's iterative\ndeepening, things like this.",
    "start": "1754696",
    "end": "1761850"
  },
  {
    "text": "They all go basically like this. ",
    "start": "1761850",
    "end": "1767280"
  },
  {
    "text": "I have a queue of things\nI'm about to explore. I start off with\nthe starting state.",
    "start": "1767280",
    "end": "1772620"
  },
  {
    "text": "I put that in my queue. Next step of the algorithm--\ntake something out of the queue.",
    "start": "1772620",
    "end": "1778170"
  },
  {
    "text": "Consider its children.  And then take the first one out\nof my priority queue, repeat.",
    "start": "1778170",
    "end": "1787800"
  },
  {
    "text": "If I consider the\nchildren in a first in, first out kind of way,\nif I add nodes and just say,",
    "start": "1787800",
    "end": "1793350"
  },
  {
    "text": "as soon as I pick up a\nnode, I'm going to go ahead and stick those nodes into my\nqueue in a sort of a first in,",
    "start": "1793350",
    "end": "1801630"
  },
  {
    "text": "first out kind of way,\nthen what I'm going to do is I'm going to proceed to look\nfor the goal by going here, then here, then here, then here,\nthen here, right down the tree.",
    "start": "1801630",
    "end": "1810300"
  },
  {
    "text": "That's a breadth first search. If I do a prioritized queue\nwhere, when I add the children,",
    "start": "1810300",
    "end": "1816060"
  },
  {
    "text": "I just do a last in, first\nout, then I'll go here.",
    "start": "1816060",
    "end": "1822390"
  },
  {
    "text": "Then I'll go here. Then I'll go here, and I'll\ngo as deep down the tree as I could possibly\ndo before I come back and go down to the other nodes.",
    "start": "1822390",
    "end": "1831420"
  },
  {
    "text": "If I keep along,\nlet's call it, a cost",
    "start": "1831420",
    "end": "1837780"
  },
  {
    "text": "to come to differentiate\nit from the cost to go,",
    "start": "1837780",
    "end": "1846010"
  },
  {
    "text": "if I keep a record of how much\ncost I incurred for my cost function getting to\nthat node and I always",
    "start": "1846010",
    "end": "1854740"
  },
  {
    "text": "select to expand\nthe node that would be the cheapest, then that's\ncalled Dijkstra's algorithm.",
    "start": "1854740",
    "end": "1861460"
  },
  {
    "text": "It's exactly equivalent\nto dynamic programming, but it's in the forward sense.",
    "start": "1861460",
    "end": "1868240"
  },
  {
    "text": "And then A star is\nan even nicer way to do that, which\ncombines a cost",
    "start": "1868240",
    "end": "1874210"
  },
  {
    "text": "to come plus some heuristic.",
    "start": "1874210",
    "end": "1883179"
  },
  {
    "start": "1883180",
    "end": "1907120"
  },
  {
    "text": "My goal is to make sure you\nguys know these are out there. There's lots of good\neasy places to read",
    "start": "1907120",
    "end": "1912700"
  },
  {
    "text": "about these\nalgorithms, especially",
    "start": "1912700",
    "end": "1918355"
  },
  {
    "text": "Steve LaValle's book.  The only surprising thing\nreally about these algorithms",
    "start": "1918355",
    "end": "1925330"
  },
  {
    "text": "is, first of all, that you\ncan often very efficiently find your way to the goal\nwithout expanding as many nodes",
    "start": "1925330",
    "end": "1931960"
  },
  {
    "text": "as you might think. A star, in particular, if you\ncan find a good heuristic--",
    "start": "1931960",
    "end": "1938170"
  },
  {
    "text": "a heuristic, in this case, is\nan estimate of the cost to go, a guess at your value function.",
    "start": "1938170",
    "end": "1944740"
  },
  {
    "start": "1944740",
    "end": "1950980"
  },
  {
    "text": "If you can guess your value\nfunction in a way where you",
    "start": "1950980",
    "end": "1956830"
  },
  {
    "text": "always underestimate it-- again,\nI'm not going to bore you with all the details here-- then actually you can\nsometimes expand very few nodes",
    "start": "1956830",
    "end": "1964870"
  },
  {
    "text": "and find your way\nright to the goal. They're very\nefficient algorithms. ",
    "start": "1964870",
    "end": "1981100"
  },
  {
    "text": "People out here use\nA star all the time. For the Grand Challenge,\nI think half the teams",
    "start": "1981100",
    "end": "1987130"
  },
  {
    "text": "had A star planners\nrunning on their vehicle. For LittleDog, we're picking\nfootholds to get from the start",
    "start": "1987130",
    "end": "1995590"
  },
  {
    "text": "to the goal. We have an A star planner in\nthere, discrete time planners. These things are real. They're good.",
    "start": "1995590",
    "end": "2001082"
  },
  {
    "text": "They're fast. If you can find\na good heuristic, they can be very,\nvery efficient.",
    "start": "2001082",
    "end": "2006780"
  },
  {
    "text": "If you care about a continuous\ntime, a continuous state, continuous action plan\nthat gets me from the goal,",
    "start": "2006780",
    "end": "2012870"
  },
  {
    "text": "then they're not as\nsatisfying because they relied on this discretization. ",
    "start": "2012870",
    "end": "2020490"
  },
  {
    "text": "So we know, when we're\ndiscretizing this thing, we're going to\nhave some problems. I'm going to just assume that\nthere's a control action that",
    "start": "2020490",
    "end": "2026970"
  },
  {
    "text": "gets me sort of\nsquarely in the center of this next discretized\ncell and then go like this.",
    "start": "2026970",
    "end": "2034029"
  },
  {
    "text": "If I were to execute\nout my actions from my discrete\nplanning algorithm on the continuous\ntime system, I'm",
    "start": "2034030",
    "end": "2039539"
  },
  {
    "text": "going to quickly\ndeviate from my plan. But these things\nare an excellent way to start to seed something like\na direct co-location method.",
    "start": "2039540",
    "end": "2049169"
  },
  {
    "text": "Find yourself a\nfeasible optimal plan. And then stabilize it, let's\nsay, with the LTV feedback. ",
    "start": "2049170",
    "end": "2070869"
  },
  {
    "text": "Good.  So that world of planning\nalgorithms is out there.",
    "start": "2070870",
    "end": "2076388"
  },
  {
    "text": " But about, I don't\nknow, 10 years ago",
    "start": "2076389",
    "end": "2081460"
  },
  {
    "text": "now, something big happened\nin the robotic motion planning world.",
    "start": "2081460",
    "end": "2086739"
  },
  {
    "text": "People started using\nsample-based motion planning algorithms. And there was sort of a\nrevolution in people using",
    "start": "2086739",
    "end": "2095560"
  },
  {
    "text": "motion planning in robotics. ",
    "start": "2095560",
    "end": "2135859"
  },
  {
    "text": "It's also sometimes called\nrandomized motion planning. ",
    "start": "2135860",
    "end": "2151915"
  },
  {
    "text": "And these are we\nare going to dig a little deeper in because\nwe use them all the time. I think they're an important\nclass of algorithms.",
    "start": "2151915",
    "end": "2159319"
  },
  {
    "text": "So two of the most notable\nsample-based motion planning ideas are the rapidly\nexploring randomized trees",
    "start": "2159320",
    "end": "2185840"
  },
  {
    "text": "and the probabilistic roadmap. ",
    "start": "2185840",
    "end": "2199559"
  },
  {
    "text": "Another poll, how many\npeople know about RRTs? Awesome.",
    "start": "2199560",
    "end": "2204750"
  },
  {
    "text": "How many people know about PRMs? OK. ",
    "start": "2204750",
    "end": "2218880"
  },
  {
    "text": "They're pretty\nrelated to each other. Let's talk about rapidly\nexploring randomized trees first.",
    "start": "2218880",
    "end": "2224340"
  },
  {
    "text": " So both of these are\nan attempt to get away",
    "start": "2224340",
    "end": "2230830"
  },
  {
    "text": "from these very coarse\ndiscretizations like this and sort of embrace the\nfact that we're working",
    "start": "2230830",
    "end": "2238210"
  },
  {
    "text": "in a continuous state space.  Instead of discretizing\nit at some known sites,",
    "start": "2238210",
    "end": "2248660"
  },
  {
    "text": "we're going to discretize sort\nof at randomly chosen samples. ",
    "start": "2248660",
    "end": "2255190"
  },
  {
    "text": "And as we add more\nand more samples, we're going to worry less and\nless about the discretization.",
    "start": "2255190",
    "end": "2261351"
  },
  {
    "text": "And eventually,\nwe're going to have something nice to say\nabout the continuous space.",
    "start": "2261352",
    "end": "2267010"
  },
  {
    "text": "So the rapidly exploring\nrandomized trees, the RRTs, are a very simple\nalgorithm to explain. ",
    "start": "2267010",
    "end": "2293450"
  },
  {
    "text": "Let's think about it in terms of\nmoving a 2D piano through a 2D",
    "start": "2293450",
    "end": "2301130"
  },
  {
    "text": "world in configuration space. So we've got a point\nmoving through a world.",
    "start": "2301130",
    "end": "2306859"
  },
  {
    "text": "It should really\nbe 3D, actually, if there's an\norientation to the piano. But let's just look at\nthe 2D problem here.",
    "start": "2306860",
    "end": "2312789"
  },
  {
    "text": " So I've got a point,\nan official state,",
    "start": "2312790",
    "end": "2320089"
  },
  {
    "text": "an initial goal in a 2D world.  Let's call it xy.",
    "start": "2320090",
    "end": "2326750"
  },
  {
    "text": "And I've got some obstacles. ",
    "start": "2326750",
    "end": "2338427"
  },
  {
    "text": "I'd like to find a path\nfrom the start to the goal without explicitly\ndiscretizing the space.",
    "start": "2338427",
    "end": "2344200"
  },
  {
    "text": "The RRTs do it like this. Pick a point from\nrandom in the space.",
    "start": "2344200",
    "end": "2349590"
  },
  {
    "text": " Try to connect your\ncurrent tree, which in the initial state is just\nthis x0, to that new point.",
    "start": "2349590",
    "end": "2363309"
  },
  {
    "text": "Let's make it exactly\nclear that I can't do that. ",
    "start": "2363310",
    "end": "2369150"
  },
  {
    "text": "My attempt to\ndirectly connect this is going to fail because it\ngoes through an obstacle.",
    "start": "2369150",
    "end": "2374260"
  },
  {
    "text": "So I can't add that node. Sample again randomly. At some point, I'll\nget a node, like, here. ",
    "start": "2374260",
    "end": "2382630"
  },
  {
    "text": "I'm going to make\na branch of my tree that connects those two points.",
    "start": "2382630",
    "end": "2387819"
  },
  {
    "text": "Pick a new random point. Let's say you get\nsomething here. Now, you have to choose between\nthese two random points,",
    "start": "2387820",
    "end": "2394900"
  },
  {
    "text": "decide which is the closest. The closest isn't\nalways an easy thing to decide if you have\ncomplicated dynamics.",
    "start": "2394900",
    "end": "2401413"
  },
  {
    "text": "In this problem,\nit's pretty easy. We could just use something\nlike a Euclidean distance. And I'll connect\nit up like this. I get another random point.",
    "start": "2401413",
    "end": "2407589"
  },
  {
    "text": "I connect it up like this. I get some random points\nthat go whatever way. If they end up here,\nI just throw them out.",
    "start": "2407590",
    "end": "2413500"
  },
  {
    "text": "If they end up something\nthat I can't connect, I'll just throw it out. But at some point, I'll\nstart filling the space",
    "start": "2413500",
    "end": "2419950"
  },
  {
    "text": "with these trees. ",
    "start": "2419950",
    "end": "2426750"
  },
  {
    "text": "Lo and behold, if\nI do it enough, it doesn't actually\nnecessarily take that long until I get up here and\nget close in the vicinity",
    "start": "2426750",
    "end": "2435040"
  },
  {
    "text": "of that goal, very\nsimple random algorithm.",
    "start": "2435040",
    "end": "2441760"
  },
  {
    "text": "Do you understand how\nit's sort of avoiding the curse of discretization? It's just picking\npoints at random",
    "start": "2441760",
    "end": "2448420"
  },
  {
    "text": "from this continuous space. So there's no constraints,\nno explicit constraints",
    "start": "2448420",
    "end": "2455890"
  },
  {
    "text": "that it lies in the\ncenter of some bucket or something like that. Nodes could be arbitrarily\nclose to each other.",
    "start": "2455890",
    "end": "2461599"
  },
  {
    "text": "I can get arbitrarily fine\nsort of discretization.",
    "start": "2461600",
    "end": "2468010"
  },
  {
    "text": "What's really cool, what\nmakes these things tick, is that the idea is so simple.",
    "start": "2468010",
    "end": "2475180"
  },
  {
    "text": "The code is so easy to write. And they really,\nreally work fast. Let me just show you\nthat basic example.",
    "start": "2475180",
    "end": "2483640"
  },
  {
    "start": "2483640",
    "end": "2517990"
  },
  {
    "text": "This time, I'm going to do it\neven without any obstacles,",
    "start": "2517990",
    "end": "2524308"
  },
  {
    "text": "but just to show\nyou the basic growth of these kind of planners. ",
    "start": "2524308",
    "end": "2536480"
  },
  {
    "text": "Awesome. OK. So my initial condition\nis just that blue point.",
    "start": "2536480",
    "end": "2548480"
  },
  {
    "text": "And I'm going to start growing a\ntree in every random direction. There's not even a\ngoal in this problem. This is just to show you the\nbasic growth of the tree.",
    "start": "2548480",
    "end": "2554840"
  },
  {
    "start": "2554840",
    "end": "2561380"
  },
  {
    "text": "Every point I grow at\nrandom, every time I pick a point from a uniform\ndistribution covering",
    "start": "2561380",
    "end": "2567619"
  },
  {
    "text": "the space, I'm going to find the\nclosest point in the algorithm, a closest point on the tree.",
    "start": "2567620",
    "end": "2573980"
  },
  {
    "text": "And I'm going to try to grow\nmy tree towards that node.",
    "start": "2573980",
    "end": "2579660"
  },
  {
    "text": "Yeah. Sort of understand\nwhat's happening there? It's pretty faint,\nI think, but--",
    "start": "2579660",
    "end": "2586690"
  },
  {
    "text": "all right. So watch what happens\nif I just let that run. ",
    "start": "2586690",
    "end": "2599530"
  },
  {
    "text": "OK. Trivial algorithm, it\nhas what a lot of people like to call a fractal\nexpansion of the coverage area.",
    "start": "2599530",
    "end": "2607770"
  },
  {
    "start": "2607770",
    "end": "2616077"
  },
  {
    "text": "Of course, if there's\nobstacles, it'll take a little longer\nto get around there, but the algorithm\nprobabilistically",
    "start": "2616077",
    "end": "2621380"
  },
  {
    "text": "covers the state space as\nI add more and more points. ",
    "start": "2621380",
    "end": "2628280"
  },
  {
    "text": "Some people call them dense\ntrees because they do this. ",
    "start": "2628280",
    "end": "2636730"
  },
  {
    "text": "If you noticed\nsomething about them, they have sort of\nsurprisingly nice qualities.",
    "start": "2636730",
    "end": "2644799"
  },
  {
    "text": "It filled the space pretty\nuniformly pretty quickly. It didn't just go\noff in one corner",
    "start": "2644800",
    "end": "2649960"
  },
  {
    "text": "and start adding nodes on one\nside or something like that.",
    "start": "2649960",
    "end": "2656170"
  },
  {
    "text": "It actually has a property that\npeople call the Voronoi bias.",
    "start": "2656170",
    "end": "2661464"
  },
  {
    "start": "2661465",
    "end": "2696850"
  },
  {
    "text": "The Voronoi bias\nimplies that the tree has a bias for always\ngrowing into the biggest",
    "start": "2696850",
    "end": "2704470"
  },
  {
    "text": "open regions of the graph. And that just comes\nfrom sampling uniformly.",
    "start": "2704470",
    "end": "2711640"
  },
  {
    "text": "If I have some tree that\nhas a big, wide open area",
    "start": "2711640",
    "end": "2717700"
  },
  {
    "text": "for whatever region, then\nwith very high probability I'm going to pick a point that's\ninside the biggest region.",
    "start": "2717700",
    "end": "2726880"
  },
  {
    "text": "And the biggest\nregions in the space are the ones that\nhave the highest probability of being chosen.",
    "start": "2726880",
    "end": "2732550"
  },
  {
    "text": "So probabilistically, this thing\nfills the biggest open spaces",
    "start": "2732550",
    "end": "2739180"
  },
  {
    "text": "in the search tree just by the\nvirtue of sampling uniformly.",
    "start": "2739180",
    "end": "2749500"
  },
  {
    "text": "So you get these very,\nvery dense, fast trees. ",
    "start": "2749500",
    "end": "2758120"
  },
  {
    "text": "And you can imagine, if\nthere's obstacles or something like that inside there, it's\ngoing to work its way just",
    "start": "2758120",
    "end": "2763610"
  },
  {
    "text": "around the obstacles. Yeah. AUDIENCE: Does it\nslow down as you get more and more nodes in there? RUSS TEDRAKE: Good.",
    "start": "2763610",
    "end": "2769550"
  },
  {
    "text": "So what is the computation\nthat goes into it? What's the expensive part of\nthe computation would you guess?",
    "start": "2769550",
    "end": "2774675"
  },
  {
    "text": "AUDIENCE: Finding\nthe nearest neighbor. RUSS TEDRAKE: Nearest\nneighbor-- good. So, yeah, it slows down\nwith the nearest neighbor,",
    "start": "2774675",
    "end": "2781610"
  },
  {
    "text": "but not as much as you expect. Actually, there's\ntwo expensive parts. Only the nearest neighbor\none shows up here.",
    "start": "2781610",
    "end": "2787400"
  },
  {
    "text": "The other one, potentially,\nis the collision checker. And in some complicated\nsystems, checking",
    "start": "2787400",
    "end": "2792470"
  },
  {
    "text": "if you're inside a\nregion, especially if you're a big robotic\narm or something like that, can be actually the\ndominant, expensive thing.",
    "start": "2792470",
    "end": "2798557"
  },
  {
    "text": " So these things, in MATLAB,\neverything's vectorized.",
    "start": "2798557",
    "end": "2804290"
  },
  {
    "text": "It actually doesn't grow that\nbadly with the number of nodes, but certainly the nearest\nneighbor calculation gets more and more expensive.",
    "start": "2804290",
    "end": "2810410"
  },
  {
    "text": "By default, it's just\nchecking the sample point at every possible node.",
    "start": "2810410",
    "end": "2816690"
  },
  {
    "text": "AUDIENCE: You could use\na k-d tree or something. RUSS TEDRAKE: Yeah, good. Yeah. So there are different\nsort of structures",
    "start": "2816690",
    "end": "2824300"
  },
  {
    "text": "that you can use to make\nthat look-up more efficient. ",
    "start": "2824300",
    "end": "2833569"
  },
  {
    "text": "So RRTs have kind of come in\nand done things to robotics that people hadn't done before.",
    "start": "2833570",
    "end": "2840180"
  },
  {
    "text": "So this is a\ntwo-dimensional example. People would have said before,\nI can do sort of motion planning",
    "start": "2840180",
    "end": "2846920"
  },
  {
    "text": "effectively and maybe 5 or 10\ndimensions, a little bit more than I could do with just\nDP, but not a lot more.",
    "start": "2846920",
    "end": "2853250"
  },
  {
    "text": "Because I'm still doing these\nsort of random factorizations. The guys that came out and\nstarted doing these RRTs--",
    "start": "2853250",
    "end": "2858860"
  },
  {
    "text": "LaValle being one of them,\nKuffner being another one-- started showing\nexamples of robots with 32 degrees of freedom\ndoing pretty complicated plans.",
    "start": "2858860",
    "end": "2866660"
  },
  {
    "text": " See if I have that\nKuffner video there. ",
    "start": "2866660",
    "end": "2888430"
  },
  {
    "text": "It's an animated GIF.  This is H7 at the time.",
    "start": "2888430",
    "end": "2894200"
  },
  {
    "text": "This was the University of Tokyo\nhumanoid entry before everybody started giving out ASIMOs.",
    "start": "2894200",
    "end": "2900020"
  },
  {
    "text": "A little before Honda started\ngiving out ASIMOs this is. ",
    "start": "2900020",
    "end": "2905840"
  },
  {
    "text": "And it's doing things\nlike taking that 32 degree of freedom robot, finding\na plan to have it bend down",
    "start": "2905840",
    "end": "2911300"
  },
  {
    "text": "and pick up a flashlight\nunder the table. And that sort of shocked people.",
    "start": "2911300",
    "end": "2916640"
  },
  {
    "text": "Now, people have gone off\nand used RRTs to do things like protein folding. It's was a pretty hot topic in\nthe motion planning community",
    "start": "2916640",
    "end": "2924440"
  },
  {
    "text": "and these other very high\ncomplexity geometric planning problems that people\njust haven't done before.",
    "start": "2924440",
    "end": "2932390"
  },
  {
    "text": "But even this guy, even\nthough it's a robot, his feet are flat\non the ground, yeah?",
    "start": "2932390",
    "end": "2938013"
  },
  {
    "text": "And they're still\njust assuming that you can search in position\nspace and then find some controller\nthat'll stabilize it.",
    "start": "2938013",
    "end": "2944180"
  },
  {
    "text": "So they're not doing the\nunderactuated planning example. ",
    "start": "2944180",
    "end": "2953147"
  },
  {
    "text": "All right, so I wouldn't\nbe talking about it if I didn't think\nit was relevant for underactuated planning.",
    "start": "2953147",
    "end": "2958380"
  },
  {
    "text": "So let's show you\nthe basic story here. ",
    "start": "2958380",
    "end": "2967243"
  },
  {
    "text": "What happens if we do\nit on a simple pendulum? ",
    "start": "2967243",
    "end": "2983280"
  },
  {
    "text": "There we go. So you see, I'm plotting\nonly every 30 nodes or something like that.",
    "start": "2983280",
    "end": "2989310"
  },
  {
    "text": "I pick a point at random.  I start growing the tree.",
    "start": "2989310",
    "end": "2996373"
  },
  {
    "text": "The way I grew the\ntree, now, is I don't go all the\nway towards the goal because I can't necessarily go\nall the way towards the goal.",
    "start": "2996373",
    "end": "3002770"
  },
  {
    "text": "I just take a step in the\ndirection of the goal. How do I take a step in\nthe direction of the goal? I just try five random\nactions, let's say,",
    "start": "3002770",
    "end": "3010293"
  },
  {
    "text": "and pick the one that\ngot closest to the goal. So if you look closely,\nevery time it expands a node,",
    "start": "3010293",
    "end": "3015536"
  },
  {
    "text": "you'll see a bunch of\ndifferent arrows coming out. And it picked the one that got\nclosest to that random sample point.",
    "start": "3015537",
    "end": "3022000"
  },
  {
    "text": "And it's still just using\nthe Euclidean distance to try to find the\nclosest neighbor.",
    "start": "3022000",
    "end": "3028870"
  },
  {
    "text": " This one I think I wasn't\ncareful about doing",
    "start": "3028870",
    "end": "3036122"
  },
  {
    "text": "the terminal condition. But I want you to see what the\nmost important thing about this",
    "start": "3036122",
    "end": "3041130"
  },
  {
    "text": "is, what do you see in\nthat plot besides a mess as it gets adding more and more?",
    "start": "3041130",
    "end": "3047170"
  },
  {
    "text": " What I see is I see the\nfundamental structure of the pendulum.",
    "start": "3047170",
    "end": "3053280"
  },
  {
    "text": "I see these spiral trajectories.",
    "start": "3053280",
    "end": "3058450"
  },
  {
    "text": "It's amazing to me that trivial\nrandomized algorithms like this",
    "start": "3058450",
    "end": "3064660"
  },
  {
    "text": "can probe the basic dynamics\nof my underactuated system. ",
    "start": "3064660",
    "end": "3080190"
  },
  {
    "text": "All right, so if you see the\nalgorithm is, now, very simple.",
    "start": "3080190",
    "end": "3087430"
  },
  {
    "text": "So I pick a point at random. That's actually a good\nexample I just happened upon. ",
    "start": "3087430",
    "end": "3094950"
  },
  {
    "text": "Pick a point at random. The red is my\nrandom sample plane. The blue is the closest plane\nin the tree in the Euclidean",
    "start": "3094950",
    "end": "3104010"
  },
  {
    "text": "sense. It happens to be a horrible\nchoice for the closest point on the tree\nin the dynamic sense",
    "start": "3104010",
    "end": "3110280"
  },
  {
    "text": "because I know, in state\nspace, my dynamics can only go that way. So really, I'd like to have\npicked a point back there that",
    "start": "3110280",
    "end": "3118380"
  },
  {
    "text": "was farther and Euclidean\ndistance, but closer sort of in dynamic distance. And I'll actually\ntalk more next lecture",
    "start": "3118380",
    "end": "3124140"
  },
  {
    "text": "about how you could do that. But from that note, I\ntry 10 different actions,",
    "start": "3124140",
    "end": "3130290"
  },
  {
    "text": "see where it would\nhave taken me, and pick the one that ended up\nclosest in Euclidean distance, which happens to have been the\none that happened horizontally.",
    "start": "3130290",
    "end": "3138599"
  },
  {
    "text": "That's enough to let\nthis thing just sort of spread itself\nout into the world",
    "start": "3138600",
    "end": "3144120"
  },
  {
    "text": "like a disease or something,\njust covering the space and probing the\ndynamics of the system.",
    "start": "3144120",
    "end": "3150615"
  },
  {
    "text": "And you wait until you\nget close to the goal. ",
    "start": "3150615",
    "end": "3157530"
  },
  {
    "text": "RRTs are very, very\npowerful way, now, to start trying to find\nreasonable plans on a robot.",
    "start": "3157530",
    "end": "3167040"
  },
  {
    "text": "That's the vanilla\nRRT algorithm. There's a lot of ways you\ncan quickly improve them. And actually, any of the\ngraph-based search algorithms",
    "start": "3167040",
    "end": "3176880"
  },
  {
    "text": "do this. So if I wanted to do\nsome simple things to try",
    "start": "3176880",
    "end": "3182010"
  },
  {
    "text": "to speed up that algorithm,\nwhat might you suggest? ",
    "start": "3182010",
    "end": "3188573"
  },
  {
    "text": "There's a couple of reasons\nwhy it felt inefficient. One of them is\nbecause it's not doing a very nice job of chasing these\nsort of intermediate goals,",
    "start": "3188573",
    "end": "3197830"
  },
  {
    "text": "like that example showed. The other thing is it\nseems like it's not really making any effort to\ngo towards the goal.",
    "start": "3197830",
    "end": "3204750"
  },
  {
    "text": " So there's a handful\nof heuristics that people use to\nmake these things tick.",
    "start": "3204750",
    "end": "3211240"
  },
  {
    "start": "3211240",
    "end": "3224100"
  },
  {
    "text": "One of them is a goal bias. ",
    "start": "3224100",
    "end": "3241595"
  },
  {
    "text": "I mean, there's lots of\nways to implement it. The standard way to\nimplement it is with,",
    "start": "3241595",
    "end": "3246880"
  },
  {
    "text": "let's say, probability of 0.5\nor something like that, 0.05,",
    "start": "3246880",
    "end": "3257170"
  },
  {
    "text": "choose my random\nsample to be the goal. ",
    "start": "3257170",
    "end": "3264110"
  },
  {
    "text": "Otherwise, my random sample is\njust the uniform distribution.",
    "start": "3264110",
    "end": "3271364"
  },
  {
    "start": "3271364",
    "end": "3285992"
  },
  {
    "text": "That would certainly\nencourage the system to find its way to the goal\na lot more efficiently. ",
    "start": "3285992",
    "end": "3294240"
  },
  {
    "text": "What's another possible\nway to speed this up? AUDIENCE: Bidirectional. RUSS TEDRAKE:\nBidirectional, yeah.",
    "start": "3294240",
    "end": "3300030"
  },
  {
    "text": "In fact, all of the search\ntechniques, the breadth versus depth versus A star\non discrete graph searches, a lot of times one of the\nstandard things people",
    "start": "3300030",
    "end": "3306720"
  },
  {
    "text": "do is they'll do\na backward search. While you're growing out from\nthe start towards the goal,",
    "start": "3306720",
    "end": "3313980"
  },
  {
    "text": "you might as well start from\nthe goal and go backwards. ",
    "start": "3313980",
    "end": "3319535"
  },
  {
    "text": "The problem with\nthis is it feels like you're trying to find\na needle in a haystack. If you can grow a tree in\nboth directions, then at least",
    "start": "3319535",
    "end": "3326280"
  },
  {
    "text": "you got a lot of\nneedles to look for. And you just wait till the\ntrees come fairly close.",
    "start": "3326280",
    "end": "3333120"
  },
  {
    "start": "3333120",
    "end": "3342660"
  },
  {
    "text": "And even backward search\nsometimes by itself can be faster. It depends on the system.",
    "start": "3342660",
    "end": "3348360"
  },
  {
    "start": "3348360",
    "end": "3354400"
  },
  {
    "text": "AUDIENCE: Is that\nbecause, if your goal is an unstable point [INAUDIBLE],,\nit's more likely to find it?",
    "start": "3354400",
    "end": "3361470"
  },
  {
    "text": "Is that intuitively\nwhat happens? RUSS TEDRAKE: Why\nsometimes a backward search would work better?",
    "start": "3361470",
    "end": "3366700"
  },
  {
    "text": "AUDIENCE: In cases\nlike underactuated. RUSS TEDRAKE: It's a\nreally good question. AUDIENCE: Because you\nmight have trouble",
    "start": "3366700",
    "end": "3373360"
  },
  {
    "text": "going to some type of fixed\npoint, but that for sure already starts you out there. ",
    "start": "3373360",
    "end": "3382093"
  },
  {
    "text": "RUSS TEDRAKE: I won't\nput my weight behind it, but that sounds like a\npretty good explanation. ",
    "start": "3382093",
    "end": "3388882"
  },
  {
    "text": "In practice, we always\ndo bidirectional trees. AUDIENCE: Even when\nyou want to do both, you never just go backwards.",
    "start": "3388882",
    "end": "3394320"
  },
  {
    "text": "RUSS TEDRAKE: Yeah. AUDIENCE: OK. RUSS TEDRAKE: But certainly,\nin the kinematic case, you could definitely\nimagine cases where the backwards could be faster.",
    "start": "3394320",
    "end": "3400410"
  },
  {
    "text": "Let's say it's hiding\nin some little island, and you just want to get out. And that's much easier\nthan finding your way",
    "start": "3400410",
    "end": "3406360"
  },
  {
    "text": "into the island, let's say.  So certainly, we've\nnoticed sensitivities",
    "start": "3406360",
    "end": "3414400"
  },
  {
    "text": "to growing RRTs around\nvery unstable fixed points. And it might be\nexactly what you said.",
    "start": "3414400",
    "end": "3421660"
  },
  {
    "text": "It might be. Yeah. AUDIENCE: So is the Euclidean\nnorm the best measure for this?",
    "start": "3421660",
    "end": "3427538"
  },
  {
    "text": "RUSS TEDRAKE: Good. The Euclidean norm is a\nhorrible metric for this. ",
    "start": "3427538",
    "end": "3444880"
  },
  {
    "text": "What do you think would\nbe a better metric? AUDIENCE: Energy or\ntimes [INAUDIBLE].. ",
    "start": "3444880",
    "end": "3452414"
  },
  {
    "text": "RUSS TEDRAKE: Awesome.  So energy's a good candidate.",
    "start": "3452414",
    "end": "3460517"
  },
  {
    "text": "In fact, I think, depending on\nwhat we put on the problem set, we might ask you to try\nan energy metric to do it.",
    "start": "3460517",
    "end": "3469110"
  },
  {
    "text": "So almost everybody says\nthis would work better with a better distance metric. And almost nobody can tell\nyou a better distance metric",
    "start": "3469110",
    "end": "3475700"
  },
  {
    "text": "for these kind of systems. So we actually have\na couple of ideas",
    "start": "3475700",
    "end": "3483440"
  },
  {
    "text": "that we've been\nworking on in lab. Elena has been working on some\nLQR-based distance metrics,",
    "start": "3483440",
    "end": "3489779"
  },
  {
    "text": "for instance. So what did you just say? You said time to arrival.",
    "start": "3489780",
    "end": "3495529"
  },
  {
    "text": "How would you compute\na time to arrival? AUDIENCE: You have to\ndo a moment in time. RUSS TEDRAKE: Right. AUDIENCE: Muscle control.",
    "start": "3495530",
    "end": "3501770"
  },
  {
    "text": "RUSS TEDRAKE: Exactly. AUDIENCE: [INAUDIBLE] RUSS TEDRAKE: So\nyou just guessed the one that's one of\nmy favorites right now.",
    "start": "3501770",
    "end": "3508190"
  },
  {
    "text": "So one idea here,\nnot fully proven yet,",
    "start": "3508190",
    "end": "3513900"
  },
  {
    "text": "but it's still in the oven\nhere is that, every time,",
    "start": "3513900",
    "end": "3522380"
  },
  {
    "text": "I pick a random sample\npoint I'll linearize the system around that point.",
    "start": "3522380",
    "end": "3528560"
  },
  {
    "text": "Say that's a cartoon\nof a linearization. Compute a LQR\nstabilizer around this.",
    "start": "3528560",
    "end": "3537260"
  },
  {
    "text": "And then use the value function\nfor a minimum time problem. So compute a min time LQR\nactually around this point.",
    "start": "3537260",
    "end": "3549878"
  },
  {
    "text": "And then use the value function\nas the distance metric. ",
    "start": "3549878",
    "end": "3567589"
  },
  {
    "text": "So I like that idea a lot. There's a couple\nsubtleties that go into it.",
    "start": "3567590",
    "end": "3573060"
  },
  {
    "text": "So when you pick a random\npoint in state space, if it's got a velocity or-- most points you pick\nrandomly in states space",
    "start": "3573060",
    "end": "3579800"
  },
  {
    "text": "are not stabilizable. So you can't do an infinite\nhorizon minimum time LQR.",
    "start": "3579800",
    "end": "3585200"
  },
  {
    "text": "You have to do a finite horizon\nand then potentially search over horizon times, but\nyou can do that, actually,",
    "start": "3585200",
    "end": "3590960"
  },
  {
    "text": "pretty efficiently. The other issue about\nit is that it's actually",
    "start": "3590960",
    "end": "3596720"
  },
  {
    "text": "not a proper distance metric. ",
    "start": "3596720",
    "end": "3602000"
  },
  {
    "text": "Why is it not a proper\ndistance metric? Anybody? AUDIENCE: It\ndoesn't [INAUDIBLE]..",
    "start": "3602000",
    "end": "3607997"
  },
  {
    "text": "RUSS TEDRAKE: So I think-- [INTERPOSING VOICES] ",
    "start": "3607997",
    "end": "3613260"
  },
  {
    "text": "It probably doesn't follow\nthe triangle inequality. It doesn't even have symmetry. ",
    "start": "3613260",
    "end": "3620240"
  },
  {
    "text": "If I were to linearize\naround this point and compute its distance,\nlinearize around this point, there just absolutely\nno guarantees",
    "start": "3620240",
    "end": "3627020"
  },
  {
    "text": "that it would be the same.  But I don't care\nabout that actually.",
    "start": "3627020",
    "end": "3634832"
  },
  {
    "text": "I just have to put\nit in the paper. ",
    "start": "3634832",
    "end": "3640535"
  },
  {
    "text": "As long as it works, right? ",
    "start": "3640535",
    "end": "3648289"
  },
  {
    "text": "It's also more\nexpensive a little bit, but it can make a\ndramatic improvement in the way it spreads.",
    "start": "3648290",
    "end": "3657405"
  },
  {
    "text": "There's another idea. I was actually planning\nto talk about some of the more subtle\nideas next time.",
    "start": "3657405",
    "end": "3663360"
  },
  {
    "text": "But since we're at it,\nthe other way to do it is to change the\nsampling distribution. ",
    "start": "3663360",
    "end": "3683540"
  },
  {
    "text": "So Alec Shkolnik in our group\nhas got a very clever way to grow these trees, where it\nuses a sampling metric that",
    "start": "3683540",
    "end": "3697090"
  },
  {
    "text": "doesn't try to go\nwhere it can't go. Let me see if I can say\nthat more carefully. ",
    "start": "3697090",
    "end": "3713300"
  },
  {
    "text": "I told DARPA about\nit three days ago. So I just want to\nshow you the picture.",
    "start": "3713300",
    "end": "3718990"
  },
  {
    "start": "3718990",
    "end": "3746910"
  },
  {
    "text": "OK. So this is Alec's algorithm for\nbeing more clever at expanding.",
    "start": "3746910",
    "end": "3756724"
  },
  {
    "text": "He changes the bias to the point\nwhere this is the tree we just saw it, basically, right? And his new tree\nlooks like that.",
    "start": "3756725",
    "end": "3763980"
  },
  {
    "text": "So it looks pretty compelling. How did he do it? ",
    "start": "3763980",
    "end": "3769500"
  },
  {
    "text": "He does this thing he calls\nreachability guided RRTs.",
    "start": "3769500",
    "end": "3776120"
  },
  {
    "text": "Every time he expands\na node, he also expands what would happen if\nI had applied maximum torque",
    "start": "3776120",
    "end": "3783410"
  },
  {
    "text": "and minimum torque. So he expands a couple\nnodes that represent",
    "start": "3783410",
    "end": "3788600"
  },
  {
    "text": "a cone of feasibility. The algorithm turns\nout to be trivial.",
    "start": "3788600",
    "end": "3794840"
  },
  {
    "text": "So now, I take my\nEuclidean distance metric or whatever it is, pick\nmy random sample point.",
    "start": "3794840",
    "end": "3800119"
  },
  {
    "text": "If the closest point is one of\nthese boundary feasible things, that means there's\nroom to grow the tree.",
    "start": "3800120",
    "end": "3808430"
  },
  {
    "text": "If the closest\npoint, however, is one of the nodes\nin my actual graph, that means I'm not feasible.",
    "start": "3808430",
    "end": "3814527"
  },
  {
    "text": "I said that quickly. But long story short,\nthere's a trivial check here, which effectively changes\nyour sampling distribution",
    "start": "3814527",
    "end": "3822410"
  },
  {
    "text": "just by saying sample a point. If the closest point on there is\nnot one of my boundary regions,",
    "start": "3822410",
    "end": "3828980"
  },
  {
    "text": "but one of my normal\ntree elements, then I know I can't grow there. And if I get that, I just\nthrow that point away,",
    "start": "3828980",
    "end": "3835790"
  },
  {
    "text": "pick another point. What that does is it\neffectively changes the sampling distribution\nto be the green region.",
    "start": "3835790",
    "end": "3841220"
  },
  {
    "text": "It just throws out all\nthese unnecessary points that you can't get towards\nand changes your sampling",
    "start": "3841220",
    "end": "3846290"
  },
  {
    "text": "distribution, so\nit's only trying to grow in places that\nit can actually go, to where the trees got a\nchance of growing towards.",
    "start": "3846290",
    "end": "3854150"
  },
  {
    "text": "So I think the\nworld is still sort of small enough that\npeople are still finding pretty clever little\ntricks to the RRTs that",
    "start": "3854150",
    "end": "3861890"
  },
  {
    "text": "make them grow a lot better in\nconstrained systems like this. ",
    "start": "3861890",
    "end": "3867252"
  },
  {
    "text": "So that happens to be,\nI think, a very good one for our kind of problems. ",
    "start": "3867252",
    "end": "3875670"
  },
  {
    "text": "But it also points out\nwhat RRTs are bad at. ",
    "start": "3875670",
    "end": "3883300"
  },
  {
    "text": "So what kind of problems would\nyou expect an RRT to work on? And what would you not\nexpect an RRT to work on? ",
    "start": "3883300",
    "end": "3892960"
  },
  {
    "text": "The classic case of something\nyou shouldn't expect an RRT to do very well on is\nsomething that looks like this,",
    "start": "3892960",
    "end": "3900080"
  },
  {
    "text": "let's say. x start is over here. x goal is over here.",
    "start": "3900080",
    "end": "3905560"
  },
  {
    "start": "3905560",
    "end": "3910840"
  },
  {
    "text": "And my obstacles look like this. ",
    "start": "3910840",
    "end": "3916820"
  },
  {
    "text": "In general, I think\nit's fair to say RRTs",
    "start": "3916820",
    "end": "3922550"
  },
  {
    "text": "don't like tunnels and tubes. ",
    "start": "3922550",
    "end": "3933650"
  },
  {
    "text": "What's going to\nhappen if I run my RRT on this sort of a system? So you know, I got my tree here.",
    "start": "3933650",
    "end": "3940369"
  },
  {
    "text": "Pick a point here, fine. Pick a point here, I'll\nquickly cover this area. Pick a point here,\nI throw it away. Pick a point here,\nI throw it away.",
    "start": "3940370",
    "end": "3946430"
  },
  {
    "text": "Pick a point right\nhere, can't get to it. It doesn't do me any good. You know, after a very\nlong time, maybe I luck out",
    "start": "3946430",
    "end": "3953869"
  },
  {
    "text": "and I pick a point here, right? But then I have to wait,\nand I pick point here. I can't get to it.",
    "start": "3953870",
    "end": "3959839"
  },
  {
    "text": "You know, I'm just\ncompletely hopeless. If it's in\ntwo-dimensional space, then you can imagine sort\nof getting lucky enough",
    "start": "3959840",
    "end": "3967550"
  },
  {
    "text": "or designing a sampling\ndistribution that does this. But let's say it's in\nsome 14-dimensional space",
    "start": "3967550",
    "end": "3973609"
  },
  {
    "text": "that you have no idea where\nthe tunnels, the tubes, are. There are some problems\nwhere RRTs just choke.",
    "start": "3973610",
    "end": "3978740"
  },
  {
    "text": "AUDIENCE: So in general,\nwhen there's basic solutions, feasible solutions, it's small? It's that fair to say?",
    "start": "3978740",
    "end": "3986600"
  },
  {
    "text": "Because this is a very small\nset of [INAUDIBLE] space. RUSS TEDRAKE: It's a little\nhard to say that, right?",
    "start": "3986600",
    "end": "3992780"
  },
  {
    "text": "Because, I mean, lots of\ntrajectories work, right? This one works this.",
    "start": "3992780",
    "end": "3999214"
  },
  {
    "text": "This works, you know? But I think, when\nthere's narrow passages,",
    "start": "3999215",
    "end": "4006100"
  },
  {
    "text": "I think that's a more clear\nway to say it when it chokes. AUDIENCE: And so\nwhen you say chokes,",
    "start": "4006100",
    "end": "4013269"
  },
  {
    "text": "it means it's, as\ntimes goes to infinity, it'll finally find it. RUSS TEDRAKE: Yes. AUDIENCE: It is [INAUDIBLE].",
    "start": "4013270",
    "end": "4018530"
  },
  {
    "text": "RUSS TEDRAKE: Yes. AUDIENCE: OK. RUSS TEDRAKE: Good. So these algorithms, mostly\nwhat you look for in a planning",
    "start": "4018530",
    "end": "4025730"
  },
  {
    "text": "algorithm is completeness. You want to know that, as\nyou expand all the nodes,",
    "start": "4025730",
    "end": "4031520"
  },
  {
    "text": "eventually if there's\na path to the goal, you'll find the\npath to the goal. And even if there's\nnot a path, it'll",
    "start": "4031520",
    "end": "4036810"
  },
  {
    "text": "tell you there's no path, right? RRTs have probabilistic\ncompleteness guarantees.",
    "start": "4036810",
    "end": "4043370"
  },
  {
    "text": "They say, if you expand\nenough nodes, then with the probability\none, if there is a path,",
    "start": "4043370",
    "end": "4049220"
  },
  {
    "text": "you'll find it. Probabilistic completeness\ndoesn't do as much for disproving the\nexistence of a path.",
    "start": "4049220",
    "end": "4055643"
  },
  {
    "text": "It would take a very\nlong time to disprove it. ",
    "start": "4055643",
    "end": "4060650"
  },
  {
    "text": "But probabilistically,\nthese things will find a path to\nthe goal if it exists. That's good.",
    "start": "4060650",
    "end": "4066080"
  },
  {
    "text": " Maybe that'll make you\nsleep better at night. But if you have to\nwait for something",
    "start": "4066080",
    "end": "4072770"
  },
  {
    "text": "to be probabilistically\ncomplete, it's not going to be useful. The reason these things\nare used like crazy",
    "start": "4072770",
    "end": "4078289"
  },
  {
    "text": "is that, in practice,\nthey're very fast. They can be very, very fast\nfor finding good solutions.",
    "start": "4078290",
    "end": "4086190"
  },
  {
    "text": "So really, I mean, the\nGrand Challenge vehicle is using RRTs all\nthe time to consider",
    "start": "4086190",
    "end": "4091820"
  },
  {
    "text": "possible future paths\nalong the street, trying to avoid obstacles.",
    "start": "4091820",
    "end": "4097278"
  },
  {
    "text": "It's doing it fast enough sort\nof in a receding horizon way. It's always planning\na minute ahead.",
    "start": "4097279",
    "end": "4104899"
  },
  {
    "text": "I'm not sure exactly what the\nwindow is in driving time. And it's doing it every DT\nroughly, re-computing its plan.",
    "start": "4104899",
    "end": "4111553"
  },
  {
    "text": "These things can be really,\nreally fast in practice. ",
    "start": "4111553",
    "end": "4117109"
  },
  {
    "text": "To some extent, the\ndynamic constraints which we're talking\nabout on the pendulum",
    "start": "4117109",
    "end": "4123528"
  },
  {
    "text": "are exactly this problem. ",
    "start": "4123529",
    "end": "4130479"
  },
  {
    "text": "Because the pendulum, like\nwe said, it's coming here. We know what the phase portrait\nof the pendulum look like.",
    "start": "4130479",
    "end": "4136830"
  },
  {
    "text": "And we know that, if\nwe're torque limited, there's only a handful\nof places we can go. To some extent, kinodynamic\nconstraints, like this,",
    "start": "4136830",
    "end": "4145450"
  },
  {
    "text": "dynamics can look\nexactly like this. So if you take your\nvanilla RRT, you",
    "start": "4145450",
    "end": "4151630"
  },
  {
    "text": "saw how effectively it\ngrew on the pendulum. It took a lot a lot of\nnodes to find its way out.",
    "start": "4151630",
    "end": "4157270"
  },
  {
    "text": "The hope is that we know\nenough about this sort of dynamical system from some\nof our other tools, like LQR,",
    "start": "4157270",
    "end": "4162850"
  },
  {
    "text": "to do distance metric\nfrom tricks like this that we're effectively\nguiding this thing down",
    "start": "4162850",
    "end": "4168580"
  },
  {
    "text": "the differential\nconstraint tubes.  AUDIENCE: Have you\nhad any [INAUDIBLE]",
    "start": "4168580",
    "end": "4174586"
  },
  {
    "text": "with relaxing the number? Like, for example, if you have\nlike a 15-dimensional robot,",
    "start": "4174586",
    "end": "4182350"
  },
  {
    "text": "you're going to get to\n[INAUDIBLE] position. Can you relax enough\nthose dimensions and then use the\nrest [INAUDIBLE]",
    "start": "4182350",
    "end": "4189479"
  },
  {
    "text": "under control in a very\nlow dimensional space and then use that\nas a [INAUDIBLE]??",
    "start": "4189479",
    "end": "4194500"
  },
  {
    "text": "RUSS TEDRAKE: Awesome. Yes. So Alec also had--",
    "start": "4194500",
    "end": "4200329"
  },
  {
    "text": "I'll tell you what,\nmy next slide,",
    "start": "4200330",
    "end": "4205720"
  },
  {
    "text": "this is Alec's other\nthing about planning in a task space, which is\nexactly what you said I think.",
    "start": "4205720",
    "end": "4213070"
  },
  {
    "text": "There's lots of ways to do it. And I think Alec found a\nreally good way to do it. This is just an example\nof a five-link robotic arm",
    "start": "4213070",
    "end": "4221679"
  },
  {
    "text": "just in configuration space. They had to find its way from\nthat endpoint to the goal",
    "start": "4221680",
    "end": "4227650"
  },
  {
    "text": "endpoint. So you see at the top,\nthat little green arm is the resulting\nconfiguration of the robot.",
    "start": "4227650",
    "end": "4232960"
  },
  {
    "text": "The standard RRT looked\nall over the place to try to find that solution. ",
    "start": "4232960",
    "end": "4239579"
  },
  {
    "text": "It's a little subtle\nhow he had to do it. You had to basically change\nthe Voronoi bias to live",
    "start": "4239580",
    "end": "4244719"
  },
  {
    "text": "in the task space,\nbut still sample uniformly from the other space.",
    "start": "4244720",
    "end": "4251140"
  },
  {
    "text": "So that's not enough to\ntell you how to do it, but that's enough to tell you\nit's not completely trivial.",
    "start": "4251140",
    "end": "4256870"
  },
  {
    "text": "Then he found these really,\nreally elegant solutions to plan in task space.",
    "start": "4256870",
    "end": "4263710"
  },
  {
    "text": "And the result, his\nsort of killer plot, is that this is\nthe number of links",
    "start": "4263710",
    "end": "4270190"
  },
  {
    "text": "in the robotic arm versus\nthe number of nodes it took to find the goal. And the standard\nRRT went like that.",
    "start": "4270190",
    "end": "4277239"
  },
  {
    "text": "And after 10 links,\nit just was hopeless.  With n going to over\n1,000 dimensions,",
    "start": "4277240",
    "end": "4286750"
  },
  {
    "text": "he was just planning in\nconstant time basically. So, yeah, there's the\nstructure in the problems. ",
    "start": "4286750",
    "end": "4293950"
  },
  {
    "text": "We also, using the partial\nfeedback linearization task space, have tried doing it\non underactuated systems.",
    "start": "4293950",
    "end": "4301570"
  },
  {
    "text": "And that sort of works, too. Yeah. But it's not the norm, actually.",
    "start": "4301570",
    "end": "4307065"
  },
  {
    "text": "It's not the accepted\nversion of the algorithm yet. ",
    "start": "4307065",
    "end": "4314780"
  },
  {
    "text": "RRTs are beautiful\nthings, right? They just grow out, find\ntheir way to the goal.",
    "start": "4314780",
    "end": "4320660"
  },
  {
    "text": "Potentially, a complaint is,\nwhen you're done with it, you've got the sort of\nchoppy discretized path",
    "start": "4320660",
    "end": "4325969"
  },
  {
    "text": "that gets you to the goal. But then just hand it to\nyour trajectory optimizer as an initial condition and\nlet it smooth it out, still",
    "start": "4325970",
    "end": "4332870"
  },
  {
    "text": "satisfying obstacle\nconstraints, torque constraints, We know how to do that\nand smooth it out. And you've got yourself a\ngood trajectory that gets",
    "start": "4332870",
    "end": "4339200"
  },
  {
    "text": "from the start to the goal. It's a beautiful thing, I mean,\nI think to the point where",
    "start": "4339200",
    "end": "4344840"
  },
  {
    "text": "Tomás Lozano-Pérez invented\nconfiguration space, did motion planning\nfor however long.",
    "start": "4344840",
    "end": "4350780"
  },
  {
    "text": "He actually stopped\nrobotics, went off and did computational\nbiology for a while. And he says he came back to\nrobotics just a few years ago",
    "start": "4350780",
    "end": "4357590"
  },
  {
    "text": "because these kind of algorithms\nmade a difference to the point where it was worth doing\nmotion planning robotics again.",
    "start": "4357590",
    "end": "4366020"
  },
  {
    "text": "I don't a more dramatic\nthing to say than that. ",
    "start": "4366020",
    "end": "4373869"
  },
  {
    "text": "OK. So next time, I'm going\nto go a little bit more into using these planning\nalgorithms and also",
    "start": "4373870",
    "end": "4380460"
  },
  {
    "text": "feedback motion planning\napplied to our model systems, but I don't want to\ncompletely segue. That's a big idea.",
    "start": "4380460",
    "end": "4386280"
  },
  {
    "text": "These RRTs-- simple\nalgorithm, big idea. I mean, the idea that a\nrandomized algorithm can",
    "start": "4386280",
    "end": "4393690"
  },
  {
    "text": "do better than our\nexplicit algorithms, it's all these funny things. There's classes on\nrandomized algorithms here.",
    "start": "4393690",
    "end": "4399810"
  },
  {
    "text": "Every once in a while, these\nthings just really work nicely. Randomization can help. And the reason,\nroughly, may be is",
    "start": "4399810",
    "end": "4405960"
  },
  {
    "text": "that it's actually pretty\ncheap to pick a sample point. It's pretty cheap to evaluate\nif it's in a collision.",
    "start": "4405960",
    "end": "4411345"
  },
  {
    "text": " And so why not just pick a lot? Instead of trying to\nreason about the geometry",
    "start": "4411345",
    "end": "4417357"
  },
  {
    "text": "of your obstacles, building\nconfiguration spaces, that's hard compared to just saying,\nOK, what if my robot was here?",
    "start": "4417357",
    "end": "4423864"
  },
  {
    "text": "Was that a collision? Yeah, that's in collision. OK. Throw it out. And just sometimes randomized\nalgorithms are better.",
    "start": "4423865",
    "end": "4429067"
  },
  {
    "text": " OK, see you next week. ",
    "start": "4429067",
    "end": "4434244"
  }
]