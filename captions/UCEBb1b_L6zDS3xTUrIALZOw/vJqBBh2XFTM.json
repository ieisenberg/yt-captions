[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "An interesting question for computer architects\nis what capabilities must be included in the",
    "start": "580",
    "end": "5660"
  },
  {
    "text": "ISA?",
    "start": "5660",
    "end": "7189"
  },
  {
    "text": "When we studied Boolean gates in Part 1 of\nthe course, we were able to prove that NAND",
    "start": "7189",
    "end": "12880"
  },
  {
    "text": "gates were universal, i.e., that we could\nimplement any Boolean function using only",
    "start": "12880",
    "end": "17940"
  },
  {
    "text": "circuits constructed from NAND gates.",
    "start": "17940",
    "end": "21150"
  },
  {
    "text": "We can ask the corresponding question of our\nISA:",
    "start": "21150",
    "end": "24369"
  },
  {
    "text": "is it universal, i.e., can it be used to perform\nany computation?",
    "start": "24369",
    "end": "30039"
  },
  {
    "text": "What problems can we solve with a von Neumann\ncomputer?",
    "start": "30039",
    "end": "33790"
  },
  {
    "text": "Can the Beta solve any problem FSMs can solve?",
    "start": "33790",
    "end": "37810"
  },
  {
    "text": "Are there problems FSMs can't solve?",
    "start": "37810",
    "end": "40650"
  },
  {
    "text": "If so, can the Beta solve those problems?",
    "start": "40650",
    "end": "43250"
  },
  {
    "text": "Do the answers to these questions depend on\nthe particular ISA?",
    "start": "43250",
    "end": "48760"
  },
  {
    "text": "To provide some answers, we need a mathematical\nmodel of computation.",
    "start": "48760",
    "end": "53440"
  },
  {
    "text": "Reasoning about the model, we should be able\nto prove what can be computed and what can't.",
    "start": "53440",
    "end": "58870"
  },
  {
    "text": "And hopefully we can ensure that the Beta\nISA has the functionality needed to perform",
    "start": "58870",
    "end": "63800"
  },
  {
    "text": "any computation.",
    "start": "63800",
    "end": "66760"
  },
  {
    "start": "66000",
    "end": "66000"
  },
  {
    "text": "The roots of computer science stem from the\nevaluation of many alternative mathematical",
    "start": "66760",
    "end": "71940"
  },
  {
    "text": "models of computation to determine the classes\nof computation each could represent.",
    "start": "71940",
    "end": "77850"
  },
  {
    "text": "An elusive goal was to find a universal model,\ncapable of representing *all* realizable computations.",
    "start": "77850",
    "end": "86000"
  },
  {
    "text": "In other words if a computation could be described\nusing some other well-formed model, we should",
    "start": "86000",
    "end": "90610"
  },
  {
    "text": "also be able to describe the same computation\nusing the universal model.",
    "start": "90610",
    "end": "96840"
  },
  {
    "text": "One candidate model might be finite state\nmachines (FSMs), which can be built using",
    "start": "96840",
    "end": "102090"
  },
  {
    "text": "sequential logic.",
    "start": "102090",
    "end": "104140"
  },
  {
    "text": "Using Boolean logic and state transition diagrams\nwe can reason about how an FSM will operate",
    "start": "104140",
    "end": "110500"
  },
  {
    "text": "on any given input, predicting the output\nwith 100% certainty.",
    "start": "110500",
    "end": "116140"
  },
  {
    "text": "Are FSMs the universal digital computing device?",
    "start": "116140",
    "end": "119990"
  },
  {
    "text": "In other words, can we come up with FSM implementations\nthat implement all computations that can be",
    "start": "119990",
    "end": "126460"
  },
  {
    "text": "solved by any digital device?",
    "start": "126460",
    "end": "130060"
  },
  {
    "start": "130000",
    "end": "130000"
  },
  {
    "text": "Despite their usefulness and flexibility,\nthere are common problems that cannot be solved",
    "start": "130060",
    "end": "135090"
  },
  {
    "text": "by any FSM.",
    "start": "135090",
    "end": "137129"
  },
  {
    "text": "For example, can we build an FSM to determine\nif a string of parentheses (properly encoded",
    "start": "137130",
    "end": "143370"
  },
  {
    "text": "into a binary sequence) is well-formed?",
    "start": "143370",
    "end": "146769"
  },
  {
    "text": "A parenthesis string is well-formed if the\nparentheses balance, i.e., for every open",
    "start": "146770",
    "end": "152840"
  },
  {
    "text": "parenthesis there is a matching close parenthesis\nlater in the string.",
    "start": "152840",
    "end": "158129"
  },
  {
    "text": "In the example shown here, the input string\non the top is well-formed, but the input string",
    "start": "158130",
    "end": "164160"
  },
  {
    "text": "on the bottom is not.",
    "start": "164160",
    "end": "166990"
  },
  {
    "text": "After processing the input string, the FSM\nwould output a 1 if the string is well-formed,",
    "start": "166990",
    "end": "172430"
  },
  {
    "text": "0 otherwise.",
    "start": "172430",
    "end": "173950"
  },
  {
    "text": "Can this problem be solved using an FSM?",
    "start": "173950",
    "end": "177629"
  },
  {
    "text": "No, it can't.",
    "start": "177630",
    "end": "179569"
  },
  {
    "text": "The difficulty is that the FSM uses its internal\nstate to encode what it knows about the history",
    "start": "179569",
    "end": "185090"
  },
  {
    "text": "of the inputs.",
    "start": "185090",
    "end": "187010"
  },
  {
    "text": "In the paren checker, the FSM would need to\ncount the number of unbalanced open parens",
    "start": "187010",
    "end": "191720"
  },
  {
    "text": "seen so far, so it can determine if future\ninput contains the required number of close",
    "start": "191720",
    "end": "197330"
  },
  {
    "text": "parens.",
    "start": "197330",
    "end": "199090"
  },
  {
    "text": "But in a finite state machine there are only\na fixed number of states, so a particular",
    "start": "199090",
    "end": "203790"
  },
  {
    "text": "FSM has a maximum count it can reach.",
    "start": "203790",
    "end": "208610"
  },
  {
    "text": "If we feed the FSM an input with more open\nparens than it has the states to count, it",
    "start": "208610",
    "end": "214379"
  },
  {
    "text": "won't be able to check if the input string\nis well-formed.",
    "start": "214379",
    "end": "218349"
  },
  {
    "text": "The \"finite-ness\" of FSMs limits their ability\nto solve problems that require unbounded counting.",
    "start": "218349",
    "end": "226160"
  },
  {
    "text": "Hmm, what other models of computation might\nwe consider?",
    "start": "226160",
    "end": "230670"
  },
  {
    "text": "Mathematics to the rescue, in this case in\nthe form of a British mathematician named",
    "start": "230670",
    "end": "236660"
  },
  {
    "text": "Alan Turing.",
    "start": "236660",
    "end": "239540"
  },
  {
    "text": "In the early 1930's Alan Turing was one of\nmany mathematicians studying the limits of",
    "start": "239540",
    "end": "244980"
  },
  {
    "text": "proof and computation.",
    "start": "244980",
    "end": "247629"
  },
  {
    "text": "He proposed a conceptual model consisting\nof an FSM combined with a infinite digital",
    "start": "247629",
    "end": "253709"
  },
  {
    "text": "tape that could read and written under the\ncontrol of the FSM.",
    "start": "253709",
    "end": "258919"
  },
  {
    "text": "The inputs to some computation would be encoded\nas symbols on the tape, then the FSM would",
    "start": "258919",
    "end": "264180"
  },
  {
    "text": "read the tape, changing its state as it performed\nthe computation, then write the answer onto",
    "start": "264180",
    "end": "270259"
  },
  {
    "text": "the tape and finally halting.",
    "start": "270259",
    "end": "272860"
  },
  {
    "text": "Nowadays, this model is called a Turing Machine\n(TM).",
    "start": "272860",
    "end": "277228"
  },
  {
    "text": "Turing Machines, like other models of the\ntime, solved the \"finite\" problem of FSMs.",
    "start": "277229",
    "end": "284760"
  },
  {
    "start": "284000",
    "end": "284000"
  },
  {
    "text": "So how does all this relate to computation?",
    "start": "284760",
    "end": "287990"
  },
  {
    "text": "Assuming the non-blank input on the tape occupies\na finite number of adjacent cells, it can",
    "start": "287990",
    "end": "294309"
  },
  {
    "text": "be expressed as a large integer.",
    "start": "294309",
    "end": "297240"
  },
  {
    "text": "Just construct a binary number using the bit\nencoding of the symbols from the tape, alternating",
    "start": "297240",
    "end": "302979"
  },
  {
    "text": "between symbols to the left of the tape head\nand symbols to the right of the tape head.",
    "start": "302979",
    "end": "308059"
  },
  {
    "text": "Eventually all the symbols will be incorporated\ninto the (very large) integer representation.",
    "start": "308059",
    "end": "314990"
  },
  {
    "text": "So both the input and output of the TM can\nbe thought of as large integers, and the TM",
    "start": "314990",
    "end": "321379"
  },
  {
    "text": "itself as implementing an integer function\nthat maps input integers to output integers.",
    "start": "321379",
    "end": "328860"
  },
  {
    "text": "The FSM brain of the Turing Machine can be\ncharacterized by its truth table.",
    "start": "328860",
    "end": "333879"
  },
  {
    "text": "And we can systematically enumerate all the\npossible FSM truth tables, assigning an index",
    "start": "333879",
    "end": "339490"
  },
  {
    "text": "to each truth table as it appears in the enumeration.",
    "start": "339490",
    "end": "343979"
  },
  {
    "text": "Note that indices get very large very quickly\nsince they essentially incorporate all the",
    "start": "343979",
    "end": "349909"
  },
  {
    "text": "information in the truth table.",
    "start": "349909",
    "end": "352160"
  },
  {
    "text": "Fortunately we have a very large supply of\nintegers!",
    "start": "352160",
    "end": "356870"
  },
  {
    "text": "We'll use the index for a TM's FSM to identify\nthe TM as well.",
    "start": "356870",
    "end": "363240"
  },
  {
    "text": "So we can talk about TM 347 running on input\n51, producing the answer 42.",
    "start": "363240",
    "end": "370449"
  }
]