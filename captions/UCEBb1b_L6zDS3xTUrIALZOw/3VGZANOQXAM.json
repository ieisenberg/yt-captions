[
  {
    "text": "Finally, our last instruction!",
    "start": "840",
    "end": "3830"
  },
  {
    "text": "Branches conditionally transfer control to\na specific target instruction.",
    "start": "3830",
    "end": "8049"
  },
  {
    "text": "But we'll also need the ability to compute\nthe address of the target instruction - that",
    "start": "8050",
    "end": "12610"
  },
  {
    "text": "ability is provided by the JMP instruction\nwhich simply sets the program counter to value",
    "start": "12610",
    "end": "17180"
  },
  {
    "text": "from register \"ra\".",
    "start": "17180",
    "end": "19030"
  },
  {
    "text": "Like branches, JMP will write the PC+4 value\ninto to the specified destination register.",
    "start": "19030",
    "end": "26230"
  },
  {
    "text": "This capability is very useful for implementing\nprocedures in Beta code.",
    "start": "26230",
    "end": "30279"
  },
  {
    "text": "Suppose we have a procedure \"sqrt\" that computes\nthe square root of its argument, which is",
    "start": "30279",
    "end": "35140"
  },
  {
    "text": "passed in, say, R0.",
    "start": "35140",
    "end": "37850"
  },
  {
    "text": "We don't show the code for sqrt on the right,\nexcept for the last instruction, which is",
    "start": "37850",
    "end": "41730"
  },
  {
    "text": "a JMP.",
    "start": "41730",
    "end": "43390"
  },
  {
    "text": "On the left we see that the programmer wants\nto call the sqrt procedure from two different",
    "start": "43390",
    "end": "47750"
  },
  {
    "text": "places in his program.",
    "start": "47750",
    "end": "49630"
  },
  {
    "text": "Let's watch what happensâ€¦",
    "start": "49630",
    "end": "51899"
  },
  {
    "text": "The first call to the sqrt procedure is implemented\nby the unconditional branch at location 0x100",
    "start": "51899",
    "end": "57940"
  },
  {
    "text": "in main memory.",
    "start": "57940",
    "end": "59570"
  },
  {
    "text": "The branch target is the first instruction\nof the sqrt procedure, so execution continues",
    "start": "59570",
    "end": "63950"
  },
  {
    "text": "there.",
    "start": "63950",
    "end": "65299"
  },
  {
    "text": "The BEQ also writes the address of the following\ninstruction (0x104) into its destination register,",
    "start": "65299",
    "end": "73729"
  },
  {
    "text": "R28.",
    "start": "73729",
    "end": "74810"
  },
  {
    "text": "When we reach the end of first procedure call,\nthe JMP instruction loads the value in R28,",
    "start": "74810",
    "end": "80070"
  },
  {
    "text": "which is 0x104, into the PC, so execution\ncontinues with the instruction following the",
    "start": "80070",
    "end": "86229"
  },
  {
    "text": "first BEQ.",
    "start": "86229",
    "end": "88170"
  },
  {
    "text": "So we've managed to return from the procedure\nand continue execution where we left off in",
    "start": "88170",
    "end": "92920"
  },
  {
    "text": "the main program.",
    "start": "92920",
    "end": "95219"
  },
  {
    "text": "When we get to the second call to the sqrt\nprocedure, the sequence of events is the same",
    "start": "95219",
    "end": "99669"
  },
  {
    "text": "as before except that this time R28 contains\n0x67C, the address of the instruction following",
    "start": "99669",
    "end": "107438"
  },
  {
    "text": "the second BEQ.",
    "start": "107439",
    "end": "109630"
  },
  {
    "text": "So the second time we reach the end of the\nsqrt procedure, the JMP sets the PC to 0x67C",
    "start": "109630",
    "end": "115758"
  },
  {
    "text": "and execution resumes with the instruction\nfollowing the second procedure call.",
    "start": "115759",
    "end": "121079"
  },
  {
    "text": "Neat!",
    "start": "121079",
    "end": "122299"
  },
  {
    "text": "The BEQs and JMP have worked together to implement\nprocedure call and return.",
    "start": "122299",
    "end": "126439"
  },
  {
    "text": "We'll discuss the implementation of procedures\nin detail in an upcoming lecture.",
    "start": "126439",
    "end": "132349"
  },
  {
    "text": "That wraps up the design of the Beta instruction\nset architecture.",
    "start": "132349",
    "end": "135549"
  },
  {
    "text": "In summary, the Beta has 32 registers to hold\nvalues that can be used as operands for the",
    "start": "135549",
    "end": "141000"
  },
  {
    "text": "ALU.",
    "start": "141000",
    "end": "142390"
  },
  {
    "text": "All other values, along with the binary representation\nof the program itself, are stored in main",
    "start": "142390",
    "end": "147390"
  },
  {
    "text": "memory.",
    "start": "147390",
    "end": "148960"
  },
  {
    "text": "The Beta supports 32-bit memory addresses\nand can access values in 2^32 = 4 gigabytes",
    "start": "148960",
    "end": "155769"
  },
  {
    "text": "of main memory.",
    "start": "155769",
    "end": "157890"
  },
  {
    "text": "All Beta memory access refer to 32-bit words,\nso all addresses will be a multiple of 4 since",
    "start": "157890",
    "end": "163489"
  },
  {
    "text": "there are 4 bytes/word.",
    "start": "163489",
    "end": "164540"
  },
  {
    "text": "The are two instruction formats.",
    "start": "164540",
    "end": "168890"
  },
  {
    "text": "The first specifies an opcode, two source\nregisters and a destination register.",
    "start": "168890",
    "end": "173920"
  },
  {
    "text": "The second replaces the second source register\nwith a 32-bit constant, derived by sign-extending",
    "start": "173920",
    "end": "180090"
  },
  {
    "text": "a 16-bit constant stored in the instruction\nitself.",
    "start": "180090",
    "end": "184239"
  },
  {
    "text": "There are three classes of instructions:\nALU operations, LD and ST for accessing main",
    "start": "184239",
    "end": "189120"
  },
  {
    "text": "memory, and branches and JMPs that change\nthe order of execution.",
    "start": "189120",
    "end": "193840"
  },
  {
    "text": "And that's it!",
    "start": "193840",
    "end": "195099"
  },
  {
    "text": "As we'll see in the next lecture, we'll be\nable parlay this relatively simple repertoire",
    "start": "195099",
    "end": "199510"
  },
  {
    "text": "of operations into a system that can execute\nany computation we can specify.",
    "start": "199510",
    "end": "204209"
  }
]