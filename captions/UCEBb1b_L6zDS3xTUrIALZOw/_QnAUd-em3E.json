[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "7410"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "7410",
    "end": "13960"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13960",
    "end": "19790"
  },
  {
    "text": "ocw.mit.edu. ",
    "start": "19790",
    "end": "25664"
  },
  {
    "text": "PROFESSOR: You guys have been\ntalking about graphs in lecture, right? So what are graphs?",
    "start": "25664",
    "end": "31600"
  },
  {
    "start": "31600",
    "end": "41280"
  },
  {
    "text": "So graphs are a kind of\nformalism that have",
    "start": "41280",
    "end": "48290"
  },
  {
    "text": "vertices and edges. A set of vertices is-- you\ncan think of it-- it's",
    "start": "48290",
    "end": "53730"
  },
  {
    "text": "like a set of things.  And then the edges are\nthe relationships",
    "start": "53730",
    "end": "61560"
  },
  {
    "text": "between those things. So the set of all your\nfriendships and your friends'",
    "start": "61560",
    "end": "68970"
  },
  {
    "text": "friendships could be\nconsidered a graph. So if this is me and this is all\ntwo of my friends, then an",
    "start": "68970",
    "end": "79560"
  },
  {
    "text": "edge between us would indicate\na relationship of friendship. But there's no edge here,\nso there's no friendship",
    "start": "79560",
    "end": "86430"
  },
  {
    "text": "between these two.  AUDIENCE: [INAUDIBLE]",
    "start": "86430",
    "end": "92630"
  },
  {
    "text": "PROFESSOR: Yes. So you have vertices, which\nare also called nodes, and",
    "start": "92630",
    "end": "102290"
  },
  {
    "text": "then you have edges, and they\ncould also be called arcs.",
    "start": "102290",
    "end": "108390"
  },
  {
    "text": "So if you see any of these\nnames, these two are the same,",
    "start": "108390",
    "end": "114430"
  },
  {
    "text": "and these two are the same.  So what kinds of graphs\ndo we have?",
    "start": "114430",
    "end": "122876"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: So there's a directed\ngraph, and there's an",
    "start": "122876",
    "end": "128149"
  },
  {
    "text": "undirected graph. So up on the screen here, is\na directed graph, right? And so--",
    "start": "128150",
    "end": "134200"
  },
  {
    "text": " I'm not a sports fan. I think those are the Bruins,\nand I don't know what the",
    "start": "134200",
    "end": "140530"
  },
  {
    "text": "other team is. Do you know? OK. Yes, I think it's a hockey team\nsomewhere up in Montreal.",
    "start": "140530",
    "end": "149540"
  },
  {
    "text": "So this is a representation or\na graph representation of",
    "start": "149540",
    "end": "154989"
  },
  {
    "text": "cities, which are the nodes\nand vertices and then the roads that connect the cities.",
    "start": "154990",
    "end": "160840"
  },
  {
    "text": "And, obviously, it's not to\nscale or accurate, but it's an abstraction, so we're\nOK with that.",
    "start": "160840",
    "end": "168030"
  },
  {
    "text": "And the question here is what's\nthe path to get from Boston to Montreal.",
    "start": "168030",
    "end": "175080"
  },
  {
    "text": "So in this case, it's a directed\ngraph, so that means that we can only go this\ndirection from node to node,",
    "start": "175080",
    "end": "183194"
  },
  {
    "text": "in the direction of the arrow. So, really, there's only\none way to go, right?-- ",
    "start": "183195",
    "end": "190170"
  },
  {
    "text": "two hops. ",
    "start": "190170",
    "end": "195290"
  },
  {
    "text": "So that's a directed graph, and\nthen an undirected graph is basically the same thing,\nexcept we can go either",
    "start": "195290",
    "end": "201470"
  },
  {
    "text": "direction on the edges, right? So on the directed graph in the\nprevious slide, you could",
    "start": "201470",
    "end": "210990"
  },
  {
    "text": "only go in this direction, so\nyou had to make two hops in order to get to Montreal. In this undirected graph, you\ncan just make one hop to get",
    "start": "210990",
    "end": "220255"
  },
  {
    "text": "to Montreal-- so really\nconceptually very easy. AUDIENCE: Can you have a\ndirected graph in a case where",
    "start": "220255",
    "end": "228344"
  },
  {
    "text": "there's one going from Boston\nto New York and another one going from New York to Boston? PROFESSOR: Yes.",
    "start": "228344",
    "end": "233680"
  },
  {
    "text": "So-- and actually we'll see\nthat in the code. So the question was, can I have\nNew York here and then",
    "start": "233680",
    "end": "245170"
  },
  {
    "text": "Boston here? Can I have this sort\nof relationship? ",
    "start": "245170",
    "end": "252300"
  },
  {
    "text": "And the answer is yes. This is actually just\nequivalent to",
    "start": "252300",
    "end": "257323"
  },
  {
    "text": "an undirected graph. AUDIENCE: Probably you can have\na directed graph in some cases like that.",
    "start": "257323",
    "end": "262735"
  },
  {
    "text": "PROFESSOR: Yes. So you could have-- and we actually have-- actually,\nI think this might",
    "start": "262735",
    "end": "267970"
  },
  {
    "text": "have an example of\nthat, so, yes. So in this case, you have--",
    "start": "267970",
    "end": "275850"
  },
  {
    "text": "Hartford has a path to Albany\nand back in a path to New York",
    "start": "275850",
    "end": "281630"
  },
  {
    "text": "City, but there's no path\ndirectly back to Hartford. That work for you?",
    "start": "281630",
    "end": "287247"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: What's that? AUDIENCE: [INAUDIBLE] ",
    "start": "287247",
    "end": "296047"
  },
  {
    "text": "PROFESSOR: Well, then I won't\ninsult Hartford then.  I didn't do these graphs.",
    "start": "296048",
    "end": "303370"
  },
  {
    "text": " If I had done them, I certainly\nwouldn't have used",
    "start": "303370",
    "end": "309590"
  },
  {
    "text": "sports teams because I know next\nto nothing about sports. So I don't know the rationale\nbehind picking the names,",
    "start": "309590",
    "end": "316410"
  },
  {
    "text": "other than I'm supposed to say\nthat the reason why the Bruins want to go to Montreal is\nbecause they want to kick",
    "start": "316410",
    "end": "323479"
  },
  {
    "text": "Canada's butt. AUDIENCE: They did. PROFESSOR: Did they? AUDIENCE: They already have. PROFESSOR: Oh. Well, then this is a very\napropos slide then.",
    "start": "323480",
    "end": "333410"
  },
  {
    "text": "So what we have up here is\na weighted graph, right? So the undirected and directed\ngraphs have been really easy",
    "start": "333410",
    "end": "342760"
  },
  {
    "text": "so far because they're just\ndefining the fact that there is a relationship that exists\nbetween two vertices, right?",
    "start": "342760",
    "end": "351310"
  },
  {
    "text": "So what a weighted graph does,\nthough, is it says that not only is there a relationship\nbetween these two entities--",
    "start": "351310",
    "end": "357389"
  },
  {
    "text": "these vertices-- but it also has maybe a cost\nassociated with it. So if these represent the road\nnetworks, then these",
    "start": "357390",
    "end": "366350"
  },
  {
    "text": "represent, kind of,\nthe total costs-- the weights on these edges. So in saying that in order to\nget the Hartford, I need to",
    "start": "366350",
    "end": "373110"
  },
  {
    "text": "pay $1.00; and then to get to\nAlbany, I need to pay $3.00; and then to get to Montreal,\nto pay $6.00.",
    "start": "373110",
    "end": "378919"
  },
  {
    "text": "So a common question-- on weighted graphs in general--\nis what's the least",
    "start": "378920",
    "end": "384970"
  },
  {
    "text": "cost path from here to here. So can anyone tell me?",
    "start": "384970",
    "end": "391569"
  },
  {
    "text": " AUDIENCE: From Boston\nto Montreal?",
    "start": "391570",
    "end": "398665"
  },
  {
    "text": "PROFESSOR: Yes-- what the least cost is from\nBoston to Montreal. AUDIENCE: It's-- Hartford is your only choice.",
    "start": "398665",
    "end": "405526"
  },
  {
    "text": "PROFESSOR: Right. AUDIENCE: Then New York\nand then Hartford. PROFESSOR: Right. So-- and the cost for that is\n$9.00, right?-- because you",
    "start": "405526",
    "end": "413005"
  },
  {
    "text": "got $1.00, $7.00, $1.00--\nsum $9.00. There are actually\ntwo paths to get",
    "start": "413005",
    "end": "418325"
  },
  {
    "text": "from Boston to Montreal. The other path is from Boston,\nHartford, Albany, Montreal, but the cost of that\npath is $10.00.",
    "start": "418325",
    "end": "425100"
  },
  {
    "text": "So the question is how do you\nfigure out which path is",
    "start": "425100",
    "end": "432760"
  },
  {
    "text": "shortest, right? So did he talk about\nbreadth-first search and",
    "start": "432760",
    "end": "438210"
  },
  {
    "text": "depth-first search at all? AUDIENCE: He only talked\nabout depth-first. PROFESSOR: He only talked\nabout depth-first. OK. So we need to do\nbreadth-first.",
    "start": "438210",
    "end": "445370"
  },
  {
    "text": "So before we do breadth-first,\ncan someone define depth-first",
    "start": "445370",
    "end": "452710"
  },
  {
    "text": "for me and maybe walk me through\nit a little bit? So let's take this off the\nscreen, and let's assume that",
    "start": "452710",
    "end": "464110"
  },
  {
    "text": "I have a very simple graph. ",
    "start": "464110",
    "end": "469639"
  },
  {
    "text": "I'm going to start here. I want to end here. And I have--",
    "start": "469640",
    "end": "475455"
  },
  {
    "start": "475455",
    "end": "494669"
  },
  {
    "text": "So I'm starting at v0, and\nI want to get to v8. ",
    "start": "494670",
    "end": "501310"
  },
  {
    "text": "Let's call this a directed\ngraph, so you can only go one direction.",
    "start": "501310",
    "end": "506699"
  },
  {
    "text": "It also doesn't have any cycles,\nso that makes it a little easier. So if I'm starting here\nin depth-first",
    "start": "506700",
    "end": "515029"
  },
  {
    "text": "search, what do I do? AUDIENCE: Pick a daughter-- Pick a daughter?",
    "start": "515030",
    "end": "520427"
  },
  {
    "text": "PROFESSOR: So you pick one of\nyour children, so you're going to pick v1 or v4.",
    "start": "520428",
    "end": "525820"
  },
  {
    "text": "Now, you go to this node. What do you do now? AUDIENCE: Pick a daughter. PROFESSOR: Same thing again.",
    "start": "525820",
    "end": "530970"
  },
  {
    "text": "So you pick another daughter and\nbecause this is a really trivial example, we just walk\ndown the line until you find",
    "start": "530970",
    "end": "537670"
  },
  {
    "text": "the node that you're\nlooking for. Or if you don't find it,\nand you have no more-- there are no more children to\nlook at, then there's no path",
    "start": "537670",
    "end": "546580"
  },
  {
    "text": "that exists. But we can get to our goal\nnode here, right? So what do we do once\nwe find this node?",
    "start": "546580",
    "end": "554180"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: We save\nit off somewhere.",
    "start": "554180",
    "end": "559950"
  },
  {
    "text": "It becomes a path with just\nitself, and then we return",
    "start": "559950",
    "end": "565040"
  },
  {
    "text": "that to who-- And then we say, OK, well,\nwhere did I come from? Well, I came from v7.",
    "start": "565040",
    "end": "571670"
  },
  {
    "text": "So, now, I know that my shortest\npath from v7 to v8 is",
    "start": "571670",
    "end": "578110"
  },
  {
    "text": "going to be v7-v8. And then I'm back here,\nI'm going to add",
    "start": "578110",
    "end": "583740"
  },
  {
    "text": "wherever I came from here. So the idea is that I grow my\nshortest paths backwards.",
    "start": "583740",
    "end": "595380"
  },
  {
    "text": "Right?  And, actually, the shortest path\nis the top one here, so--",
    "start": "595380",
    "end": "602756"
  },
  {
    "text": "AUDIENCE: If you hit a branch\nin v7, can you go back to v7 would you jump to\nthe next branch? PROFESSOR: So, yes.",
    "start": "602756",
    "end": "608790"
  },
  {
    "text": "So if I had something\nlike this, and the",
    "start": "608790",
    "end": "614850"
  },
  {
    "text": "answer would be--  let's say that it\nloops around--",
    "start": "614850",
    "end": "621670"
  },
  {
    "text": "so now we have a cycle. So it becomes interesting. So let's say that I've reached\nmy goal here, and I know that",
    "start": "621670",
    "end": "630389"
  },
  {
    "text": "if I'm at my goal, then\nmy shortest path is just my goal, right? So now I return here and I say,\nwell, what would be my",
    "start": "630390",
    "end": "636930"
  },
  {
    "text": "shortest path in this case? ",
    "start": "636930",
    "end": "642410"
  },
  {
    "text": "Does this child have\nthe shortest path? ",
    "start": "642410",
    "end": "652440"
  },
  {
    "text": "When I get here first to v7, I\nasked the question, what's the shortest path to v8 from either\nof my two children.",
    "start": "652440",
    "end": "660150"
  },
  {
    "text": "So I'm going to look at all the\nchildren of v7, and I'm going to find what's the\nshortest path from v8--",
    "start": "660150",
    "end": "667770"
  },
  {
    "text": "or from this node to\nthe end node-- and then from this node\nto the end node. And, obviously, this one's\nthe shortest because",
    "start": "667770",
    "end": "674330"
  },
  {
    "text": "it is the end node. So now, I know that\nmy shortest path is this plus myself.",
    "start": "674330",
    "end": "684120"
  },
  {
    "text": "And so that means that the\nshortest path from v6 to the end node is going to be\nthis path, plus this.",
    "start": "684120",
    "end": "693546"
  },
  {
    "text": "And I don't know if that's\ngetting any clearer. So, really, if we start out at\nthe beginning here, we're",
    "start": "693546",
    "end": "705520"
  },
  {
    "text": "looking at this first node-- we ask the question, what's the\nshortest path from v1 to",
    "start": "705520",
    "end": "711730"
  },
  {
    "text": "the end, and what's\nthe shortest path from v4 to the end? And we choose the shortest of\nthose two paths as our answer,",
    "start": "711730",
    "end": "719380"
  },
  {
    "text": "then we just add ourselves\nto the beginning. And that's all we do for\neach of these nodes.",
    "start": "719380",
    "end": "724810"
  },
  {
    "text": "We ask, of the children at each\nof these nodes, what's the shortest path, and then we\nadd ourselves to the beginning",
    "start": "724810",
    "end": "732300"
  },
  {
    "text": "of that path and return\nthat as our answer. So if we are to look\nat that in code--",
    "start": "732300",
    "end": "738380"
  },
  {
    "text": " so you guys have all seen the\ngraph object in class with the",
    "start": "738380",
    "end": "750295"
  },
  {
    "text": "node and edges? Yes or no? OK So here is shortest\npath depth-first.",
    "start": "750295",
    "end": "760540"
  },
  {
    "text": " So there's a lot of debugging\ncode here, but--",
    "start": "760540",
    "end": "767760"
  },
  {
    "text": "and some administrative stuff--\nso all this is doing is just making sure that\nthe nodes we're looking for are in the graph.",
    "start": "767760",
    "end": "774911"
  },
  {
    "text": "And, actually, let\nme backtrack. So when we first call shortest\npath, we're going to call it with a graph object.",
    "start": "774911",
    "end": "781310"
  },
  {
    "text": "We're going to start\nin an end node. And we're also going to have\nthis parameter visited, which",
    "start": "781310",
    "end": "788120"
  },
  {
    "text": "keeps track of the nodes that\nwe've already seen. And we'll get to that\nin a second.",
    "start": "788120",
    "end": "794740"
  },
  {
    "text": "So one of the first things\nthat we do that's of any importance is, we check to make\nsure that the start and",
    "start": "794740",
    "end": "801210"
  },
  {
    "text": "end nodes are actually in the\ngraph, because you can't get from one to the other\nif they don't exist.",
    "start": "801210",
    "end": "807090"
  },
  {
    "text": " And now we're going to construct\na path or a list",
    "start": "807090",
    "end": "813560"
  },
  {
    "text": "that just contains the start\nnode as its element.",
    "start": "813560",
    "end": "818710"
  },
  {
    "text": "And then we're going\nto check to see if start is equal to end. So if we're already at our goal,\nthen the shortest path",
    "start": "818710",
    "end": "827260"
  },
  {
    "text": "is just us, right? We don't have to go anywhere. AUDIENCE: [INAUDIBLE]",
    "start": "827260",
    "end": "832510"
  },
  {
    "text": " PROFESSOR: For comparison\npurposes.",
    "start": "832510",
    "end": "839190"
  },
  {
    "text": "I mean, if you look at the\ndefinition of node, it's",
    "start": "839190",
    "end": "844870"
  },
  {
    "text": "pretty sparse-- pretty spartan. If we wanted to make it so that\nwe just added the node",
    "start": "844870",
    "end": "852190"
  },
  {
    "text": "object itself, would have to add\nan underbar equal method--",
    "start": "852190",
    "end": "857380"
  },
  {
    "text": "stuff like that-- and in this\ncase, we don't want to bother with kind of complicating\nit like that.",
    "start": "857380",
    "end": "864940"
  },
  {
    "text": "So if we're not at the end,\nthough, now, we need to figure",
    "start": "864940",
    "end": "871340"
  },
  {
    "text": "out what the shortest path is\nfrom each of our children to the goal node, right? So we have a variable that we\ncall shortest, and that's",
    "start": "871340",
    "end": "880670"
  },
  {
    "text": "going to keep track of what our\nshortest path so far is, and then we're going to iterate\nthrough all the children in this node.",
    "start": "880670",
    "end": "888160"
  },
  {
    "text": "And if the node is\nnot in visited--",
    "start": "888160",
    "end": "893589"
  },
  {
    "text": "and that's where this\nparameter comes in-- we're going to say, OK, well,\nlet's take a look at it.",
    "start": "893590",
    "end": "902450"
  },
  {
    "text": "And then we're going to say--\nwe're going to add it to visited so we know that\nwe visited this node.",
    "start": "902450",
    "end": "907495"
  },
  {
    "text": "It sounds kind of cyclic, which\nis funny because we have visited so that we\navoid cycles.",
    "start": "907495",
    "end": "912650"
  },
  {
    "text": " Because if we've already visited\na node and we figured",
    "start": "912650",
    "end": "920510"
  },
  {
    "text": "out what its shortest path\nis, why would we want to visit it again? ",
    "start": "920510",
    "end": "929550"
  },
  {
    "text": "If we're on a path,\nand we're saying--",
    "start": "929550",
    "end": "935459"
  },
  {
    "text": "let's say I have-- I'm trying to figure out the\nshortest path from v1 to v4--",
    "start": "935460",
    "end": "948610"
  },
  {
    "text": "and I'm using depth-first-- and so I decide depth-first\nfirst goes to v2, then to v3.",
    "start": "948610",
    "end": "954940"
  },
  {
    "text": "Now, it's got two choices on\nwhich nodes to get the shortest path for.",
    "start": "954940",
    "end": "960660"
  },
  {
    "text": "Let's say, for some reason,\nwhen it gets the list of children, it's going to get v1\nand v4, and if it's looking at",
    "start": "960660",
    "end": "967180"
  },
  {
    "text": "v1 before it looks at v4, then,\nif we didn't have that check in there, just\nto make sure that we are not visiting--",
    "start": "967180",
    "end": "973880"
  },
  {
    "text": "or looking at other nodes that\nwe've already visited-- then the algorithm would just\ngo here, and it would repeat",
    "start": "973880",
    "end": "979370"
  },
  {
    "text": "itself in a cycle, like that. So that's what that visited\nparameter is doing, is it's",
    "start": "979370",
    "end": "984790"
  },
  {
    "text": "preventing that cyclic check. ",
    "start": "984790",
    "end": "990959"
  },
  {
    "text": "So now we ask the question--",
    "start": "990960",
    "end": "997030"
  },
  {
    "text": "or we make a recursive call\nto shortest path, right? And the only parameter that\nchanges is the start node.",
    "start": "997030",
    "end": "1006800"
  },
  {
    "text": "And we're going to ask it,\nwhat's the shortest path from this node to the end.",
    "start": "1006800",
    "end": "1013750"
  },
  {
    "text": "And it's going to call itself\nagain and return an answer.",
    "start": "1013750",
    "end": "1019420"
  },
  {
    "text": "And if it doesn't return\nanything, then we're just going to ignore it\nand continue.",
    "start": "1019420",
    "end": "1024640"
  },
  {
    "text": "But if it returns something,\nand either we haven't found shortest path yet, or the length\nof this new path that",
    "start": "1024640",
    "end": "1033845"
  },
  {
    "text": "it's found is shorter than the\nshortest path that we've already found, then we're going\nto record it, and say",
    "start": "1033845",
    "end": "1039419"
  },
  {
    "text": "that this is our new\nshortest path here. And then we're just going to\nkeep iterating through all the",
    "start": "1039420",
    "end": "1046300"
  },
  {
    "text": "children of the node until\nwe've exhausted all possibilities.",
    "start": "1046300",
    "end": "1052300"
  },
  {
    "text": "And then once we finish going\nthrough all the children, we're going to say--",
    "start": "1052300",
    "end": "1057820"
  },
  {
    "text": "if we found the shortest\npath-- that means that there exists a\npath from one of its children",
    "start": "1057820",
    "end": "1063340"
  },
  {
    "text": "to the goal node-- then we're going to add it to\nour existing path, which is",
    "start": "1063340",
    "end": "1070830"
  },
  {
    "text": "just ourself. So we're adding ourselves to the\nbeginning of the shortest path that it found.",
    "start": "1070830",
    "end": "1077350"
  },
  {
    "text": "And then we will return it. So it's kind of growing the\nshortest path from the back to",
    "start": "1077350",
    "end": "1088310"
  },
  {
    "text": "the front, right? Breadth-first search works in\nthe opposite direction. So the way that--",
    "start": "1088310",
    "end": "1095026"
  },
  {
    "text": "well, first, is anyone confused by depth-first search?",
    "start": "1095026",
    "end": "1100398"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "1100398",
    "end": "1106794"
  },
  {
    "text": "PROFESSOR: So this line here--",
    "start": "1106794",
    "end": "1111850"
  },
  {
    "text": "this is-- well, this if statement\nfirst is checking to see that we've got--",
    "start": "1111850",
    "end": "1117150"
  },
  {
    "text": "that one of our children\nhas a shortest path. It's possible that none of our\npossible children leads to the",
    "start": "1117150",
    "end": "1125540"
  },
  {
    "text": "goal node, so let's say that\nI have another kind",
    "start": "1125540",
    "end": "1132850"
  },
  {
    "text": "of subgraph on here. ",
    "start": "1132850",
    "end": "1142179"
  },
  {
    "text": "When v2 is my start node,\nI'm still going to check these two children.",
    "start": "1142180",
    "end": "1148640"
  },
  {
    "text": "And let's say that my goal node\nis to get to v8, right? Well, I'm still going to check\nto see what the shortest path",
    "start": "1148640",
    "end": "1156260"
  },
  {
    "text": "is for both of these children. Well, once I use this is my\nstart node, there's obviously",
    "start": "1156260",
    "end": "1161490"
  },
  {
    "text": "no path to the actual goal\nnode, so the depth-first",
    "start": "1161490",
    "end": "1167580"
  },
  {
    "text": "search call, or the call to the\nshortest path, is going to return none in this case.",
    "start": "1167580",
    "end": "1172772"
  },
  {
    "text": "And we need to check that, so\nthat's what that bit of code",
    "start": "1172772",
    "end": "1179390"
  },
  {
    "text": "is doing there. It's saying if there is a\nshortest path, then we're",
    "start": "1179390",
    "end": "1187850"
  },
  {
    "text": "going to just add ourselves to\nthe front of that shortest path, and return that\nas our answer.",
    "start": "1187850",
    "end": "1193080"
  },
  {
    "text": "But if there is no\nshortest path from one of our children--",
    "start": "1193080",
    "end": "1199260"
  },
  {
    "text": "from any of the children\non the start node-- to the goal node, then we're\njust going to return none as",
    "start": "1199260",
    "end": "1205200"
  },
  {
    "text": "our answer because we can't\nget to the goal node from where we are. ",
    "start": "1205200",
    "end": "1213150"
  },
  {
    "text": "Did that work for you? ",
    "start": "1213150",
    "end": "1219720"
  },
  {
    "text": "So why don't we take a look\nat how this is working. ",
    "start": "1219720",
    "end": "1238810"
  },
  {
    "text": "So we're going to try DFS\non undirected graph. ",
    "start": "1238810",
    "end": "1244970"
  },
  {
    "text": "And the code that does this is\ncalled Test 2 here, and all it",
    "start": "1244970",
    "end": "1252950"
  },
  {
    "text": "does is, it creates a\ngraph with 10 nodes. ",
    "start": "1252950",
    "end": "1258390"
  },
  {
    "text": "And, in this case, it's going\nto be an undirected graph. And we're going to create\na bunch of edges.",
    "start": "1258390",
    "end": "1266330"
  },
  {
    "text": "So--  is that diagram you sent\nout, is that the",
    "start": "1266330",
    "end": "1274930"
  },
  {
    "text": "representation of it? AUDIENCE: This is the code\nfrom lecture, Professor [INAUDIBLE] code. So it only uses 5 nodes.",
    "start": "1274930",
    "end": "1280995"
  },
  {
    "text": "PROFESSOR: So we have this\ngraph, and what we're going to do is use depth-first search to\ncompute the shortest path",
    "start": "1280995",
    "end": "1289360"
  },
  {
    "text": "from here to here. ",
    "start": "1289360",
    "end": "1300810"
  },
  {
    "text": "So this is showing the depth\nof the recursion, right? ",
    "start": "1300810",
    "end": "1307550"
  },
  {
    "text": "So we start off on node 0, and\nthen it starts looking for the",
    "start": "1307550",
    "end": "1314480"
  },
  {
    "text": "shortest path from 1 to 4. ",
    "start": "1314480",
    "end": "1321690"
  },
  {
    "text": "And at the same depth, it's\ngoing to try and find the",
    "start": "1321690",
    "end": "1328679"
  },
  {
    "text": "shortest path from 2 to 4. So it starts out here, and\nthen it asks what's the",
    "start": "1328680",
    "end": "1337600"
  },
  {
    "text": "shortest path from 1 to 4, and\nthen what's the shortest path from 2 to 4. ",
    "start": "1337600",
    "end": "1345340"
  },
  {
    "text": "And so when it's looking at 1,\nnow it's going to ask what's the shortest path from--",
    "start": "1345340",
    "end": "1353320"
  },
  {
    "text": "I want it to do that-- ",
    "start": "1353320",
    "end": "1367071"
  },
  {
    "text": "Hey, Sarri? Is there a bug in your code? AUDIENCE: Is there? PROFESSOR: So is this\nthe lecture code?",
    "start": "1367072",
    "end": "1376710"
  },
  {
    "text": "AUDIENCE: None of\nthis is mine. I did the breadth-first\nsearch. This is the depth-first? PROFESSOR: Yes, because\nit seems like it's",
    "start": "1376710",
    "end": "1383679"
  },
  {
    "text": "checking node 0 twice.  AUDIENCE: It didn't\ndo that on mine.",
    "start": "1383680",
    "end": "1391192"
  },
  {
    "text": "PROFESSOR: So it's\ngoing from-- AUDIENCE: Oh, no-- because\nthere's a directed-- is from 1 to 0, right?",
    "start": "1391192",
    "end": "1397528"
  },
  {
    "text": "Yes. So what it's doing-- what the\ncode does is, it says--",
    "start": "1397528",
    "end": "1402750"
  },
  {
    "text": "it does a depth-first, so first,\nit looks at node 0, and then it goes for child in--",
    "start": "1402750",
    "end": "1410090"
  },
  {
    "text": "for all the children nodes. What's the first child\nof node 0? It's node 1. PROFESSOR: Oh, because 0 hasn't\nbeen added to the visited list.",
    "start": "1410090",
    "end": "1415860"
  },
  {
    "text": "AUDIENCE: Right. And then-- PROFESSOR: And then it asks,\nwhat are all the children of-- AUDIENCE: Well, no.",
    "start": "1415860",
    "end": "1421100"
  },
  {
    "text": "The print statement comes\nbefore it discovers that checking node 0 is\nan invalid path.",
    "start": "1421100",
    "end": "1428021"
  },
  {
    "text": "I forgot to add another\nprint statement. If you go to the code-- PROFESSOR: OK. ",
    "start": "1428021",
    "end": "1439950"
  },
  {
    "text": "So where are we at? AUDIENCE: Yes. So see how I have the\nvery first at",
    "start": "1439950",
    "end": "1446330"
  },
  {
    "text": "the top of the function? See how there's the\nif to print? I say that, but then there's\nthis check here",
    "start": "1446330",
    "end": "1453039"
  },
  {
    "text": "if it's not in visited. If it is in visited, there's no\nprint statement that says-- PROFESSOR: --that says that--\nyou know-- it's--",
    "start": "1453040",
    "end": "1459040"
  },
  {
    "text": "AUDIENCE: That-- yes. So, basically, what's happened\nis, when we do that second check where we end up finding\nthe second path from 0 to 4,",
    "start": "1459040",
    "end": "1466660"
  },
  {
    "text": "it ends up hitting that test\nthat says, we've already visited node 0, so we\ndon't continue that.",
    "start": "1466660",
    "end": "1472520"
  },
  {
    "text": "PROFESSOR: I got it. I got it. That was just a little-- AUDIENCE: There was no print\nstatements in the code before, and I was having a really hard\ntime figuring it out, and I",
    "start": "1472520",
    "end": "1479280"
  },
  {
    "text": "did this, and this made\nit a lot more clear-- I thought-- to try and figure\nout how the depth-first search was working.",
    "start": "1479280",
    "end": "1484385"
  },
  {
    "text": "PROFESSOR: No, I\nthink so, too. It's just maybe we should\nadd a couple extra-- AUDIENCE: Yeah, I agree.",
    "start": "1484385",
    "end": "1489680"
  },
  {
    "text": " PROFESSOR: Sorry. I was perplexed-- because\nI'm like, uh-oh.",
    "start": "1489680",
    "end": "1498360"
  },
  {
    "text": "So it's working correctly. Is there any confusion\non depth-first search, in spite of that?",
    "start": "1498360",
    "end": "1505252"
  },
  {
    "text": "OK. So let's start our breadth-first\nsearch. ",
    "start": "1505252",
    "end": "1512340"
  },
  {
    "text": "So you guys covered depth-first\nsearch in lecture,",
    "start": "1512340",
    "end": "1517720"
  },
  {
    "text": "so we need to do breadth-first\nsearch. OK. So the idea behind breadth-first\nsearch is that",
    "start": "1517720",
    "end": "1524570"
  },
  {
    "text": "instead of asking the question,\nwhat's the shortest path from v1 to v4 and adding\nourselves to the front of",
    "start": "1524570",
    "end": "1531659"
  },
  {
    "text": "that, to get the shortest path,\nwe're going to build the paths from the start outward--",
    "start": "1531660",
    "end": "1539270"
  },
  {
    "text": "or from the start forward-- so, in this case, we're building\nthe paths from the goal backward.",
    "start": "1539270",
    "end": "1545809"
  },
  {
    "text": "In this case, we're going to\nsay, I'm at v0, so my current",
    "start": "1545810",
    "end": "1554560"
  },
  {
    "text": "partial path is v0.  Then I'm going to look\nat v1 and v4.",
    "start": "1554560",
    "end": "1563899"
  },
  {
    "text": "And so I'm going to have-- ",
    "start": "1563900",
    "end": "1578380"
  },
  {
    "text": "I'm going to say, now, this\nis my list of partial paths to the goal.",
    "start": "1578380",
    "end": "1583470"
  },
  {
    "text": "And then, for v1, I'm\ngoing to say-- I'm going to ask what its\nneighbors are, and we have v2.",
    "start": "1583470",
    "end": "1591554"
  },
  {
    "text": " And then, for v4, we're going\nto ask the same question.",
    "start": "1591555",
    "end": "1597930"
  },
  {
    "text": "So now we're building\nour partial paths. ",
    "start": "1597930",
    "end": "1605520"
  },
  {
    "text": "So, conceptually, what we're\ndoing is, we're just maintaining a list of all\nthe paths that we--",
    "start": "1605520",
    "end": "1613000"
  },
  {
    "text": "or all-- the history\nof nodes-- or paths that we've been looking\nat and just kind of",
    "start": "1613000",
    "end": "1618310"
  },
  {
    "text": "going out one by one by one. So if we look at this in\ncode, shortest path--",
    "start": "1618310",
    "end": "1629500"
  },
  {
    "text": "BFS-- has a slightly different call\nsignature than the DFS method.",
    "start": "1629500",
    "end": "1636330"
  },
  {
    "text": "So we still get a graph, and\nthen we get this variable called paths. And what paths contains is the\npartial path, or list of the",
    "start": "1636330",
    "end": "1643960"
  },
  {
    "text": "partial paths of tuples. So the format of this is, each\nelement has a list of the",
    "start": "1643960",
    "end": "1653710"
  },
  {
    "text": "nodes in the path and\nthen the length of that particular path.",
    "start": "1653710",
    "end": "1663929"
  },
  {
    "text": "So we also have the goal node.",
    "start": "1663930",
    "end": "1669580"
  },
  {
    "text": "And what we do-- the first thing that happens is,\nthis pass gets shorted--",
    "start": "1669580",
    "end": "1676110"
  },
  {
    "text": "or sorted. So it's sorted by the\nlength of the path.",
    "start": "1676110",
    "end": "1682390"
  },
  {
    "text": "So is anyone puzzled by\nthis lambda here? AUDIENCE: Yes.",
    "start": "1682390",
    "end": "1687626"
  },
  {
    "text": "PROFESSOR: OK. So when you call the sorted\nfunction, you can pass it a list. You can also pass it\nthis key parameter.",
    "start": "1687626",
    "end": "1694672"
  },
  {
    "text": "And this key parameter is a\nfunction that takes an object,",
    "start": "1694672",
    "end": "1703940"
  },
  {
    "text": "and it'll return, kind\nof, the value associated with that object.",
    "start": "1703940",
    "end": "1709230"
  },
  {
    "text": "So, in this case, each of\nthese paths contain-- each of the elements and\npaths contains a tuple.",
    "start": "1709230",
    "end": "1717270"
  },
  {
    "text": "And what this key function does\nis, it says, each element in this path has got a value\nthat is equal to the",
    "start": "1717270",
    "end": "1726145"
  },
  {
    "text": "length of that path. And this length parameter--\nthat's just the second element",
    "start": "1726145",
    "end": "1732100"
  },
  {
    "text": "in the tuple, right? So when sorted does its work,\nit's going to call this key",
    "start": "1732100",
    "end": "1738040"
  },
  {
    "text": "function on each element\nin path. And what this function has\nto do is return the value",
    "start": "1738040",
    "end": "1747780"
  },
  {
    "text": "associated with that\nparticular element. AUDIENCE: Is lambda just a key\nword that generates an effect?",
    "start": "1747780",
    "end": "1755789"
  },
  {
    "text": "PROFESSOR: Lambda is\nwhat's known as an anonymous function. ",
    "start": "1755790",
    "end": "1762990"
  },
  {
    "text": "And he covered that in a\nlecture at one point. AUDIENCE: [INAUDIBLE]?",
    "start": "1762990",
    "end": "1769080"
  },
  {
    "text": "PROFESSOR: Did he\njust use lambda? AUDIENCE: He blew\npast it, so-- this is something\ncalled lambda.",
    "start": "1769080",
    "end": "1774360"
  },
  {
    "text": "Ask your TAs. PROFESSOR: Well, since I'm\nyour TA and I'm here--",
    "start": "1774360",
    "end": "1780350"
  },
  {
    "text": "so real briefly-- ",
    "start": "1780350",
    "end": "1787180"
  },
  {
    "text": "lambda is a way of, kind of,\ndoing really simple-- not really simple functions--\nbut it's a way of creating",
    "start": "1787180",
    "end": "1795250"
  },
  {
    "text": "anonymous function. So let's say that I want\nto create a function that squares a number.",
    "start": "1795250",
    "end": "1800260"
  },
  {
    "text": " This is exactly--",
    "start": "1800260",
    "end": "1807570"
  },
  {
    "text": "well, not exactly-- but, it's\nequivalent to this.  I can use g as a function just\nas easily as I can use h.",
    "start": "1807570",
    "end": "1817490"
  },
  {
    "start": "1817490",
    "end": "1829510"
  },
  {
    "text": "That's all. And it's useful for situations\nwhere you have elements that",
    "start": "1829510",
    "end": "1840260"
  },
  {
    "text": "don't have an order to find. So like, sorted needs to know a\nvalue of an element in order",
    "start": "1840260",
    "end": "1846490"
  },
  {
    "text": "to put it in order-- in order\nto do the sorting, right? So that's what this function\ndoes, is it gives each element",
    "start": "1846490",
    "end": "1852460"
  },
  {
    "text": "in that list a value so that\nthe sorting can do its job.",
    "start": "1852460",
    "end": "1857710"
  },
  {
    "text": "So the key that we want to sort\non, or the item that we",
    "start": "1857710",
    "end": "1864625"
  },
  {
    "text": "want to sort on, is the\nlength the path. And the reason why we want to\ndo that is, we're going to",
    "start": "1864625",
    "end": "1873020"
  },
  {
    "text": "take the first partial path that\nexists in our paths, and",
    "start": "1873020",
    "end": "1880570"
  },
  {
    "text": "for every node in\nthe shortest--",
    "start": "1880570",
    "end": "1886074"
  },
  {
    "text": "or for every node in the-- ",
    "start": "1886074",
    "end": "1893649"
  },
  {
    "text": "for every child of the last node\nin this path, we want to",
    "start": "1893650",
    "end": "1899060"
  },
  {
    "text": "check to see if it's the goal,\nand if it's not, then we're",
    "start": "1899060",
    "end": "1904630"
  },
  {
    "text": "going to append a new partial\npath, which is the path that",
    "start": "1904630",
    "end": "1911950"
  },
  {
    "text": "we're looking at, plus one\nof the children nodes.",
    "start": "1911950",
    "end": "1917200"
  },
  {
    "text": "And then the length of\nthe path to this value called new paths.",
    "start": "1917200",
    "end": "1924870"
  },
  {
    "text": "So it's saying--",
    "start": "1924870",
    "end": "1929920"
  },
  {
    "text": "this node that I'm\nlooking at-- ",
    "start": "1929920",
    "end": "1937080"
  },
  {
    "text": "let's say that this is\nmy partial path. ",
    "start": "1937080",
    "end": "1942710"
  },
  {
    "text": "What it's doing is, it's looking\nat this last node in this path, and it's saying\nwhat are all the children of this node?",
    "start": "1942710",
    "end": "1949160"
  },
  {
    "text": "And if none of the children are\nthe goal node, then it's",
    "start": "1949160",
    "end": "1954830"
  },
  {
    "text": "going to create a new set of\npaths that are composed of",
    "start": "1954830",
    "end": "1965880"
  },
  {
    "text": "this path, plus all\nthe children. AUDIENCE: So if v2 also went to\nv10, would the new path be",
    "start": "1965880",
    "end": "1979047"
  },
  {
    "text": "easier [INAUDIBLE]? PROFESSOR: No. ",
    "start": "1979047",
    "end": "1987287"
  },
  {
    "text": "So we should probably\nget rid of this. The reason why breadth-first\nsearch has its name, is that",
    "start": "1987287",
    "end": "1994440"
  },
  {
    "text": "it doesn't try to go towards\nthe end immediately.",
    "start": "1994440",
    "end": "2001799"
  },
  {
    "text": "It grows gradually. So if you can kind of envision\na graph like this.",
    "start": "2001800",
    "end": "2008105"
  },
  {
    "start": "2008105",
    "end": "2021020"
  },
  {
    "text": "Depth-first works by going-- by proceeding down until it\nfinds the goal node for each",
    "start": "2021020",
    "end": "2030880"
  },
  {
    "text": "of the possible paths. Right? What breadth-first search does\nis, it starts at a node, and",
    "start": "2030880",
    "end": "2038320"
  },
  {
    "text": "then it builds all the\npaths from that node.",
    "start": "2038320",
    "end": "2044909"
  },
  {
    "text": "And then for each of these,\nit builds the paths.",
    "start": "2044910",
    "end": "2051419"
  },
  {
    "text": "So that's what I'm saying when\nI say partial paths. AUDIENCE: [INAUDIBLE]",
    "start": "2051420",
    "end": "2056454"
  },
  {
    "text": " PROFESSOR: Yes. It's a new partial path, so--",
    "start": "2056454",
    "end": "2062629"
  },
  {
    "text": "AUDIENCE: So it would be v0,\nv1, v2, v4-- the next one.",
    "start": "2062630",
    "end": "2068559"
  },
  {
    "text": "And v0, v2, v [INAUDIBLE]. ",
    "start": "2068560",
    "end": "2076350"
  },
  {
    "text": "PROFESSOR: So let's say\nthis is v0, v1, v2.",
    "start": "2076351",
    "end": "2082935"
  },
  {
    "start": "2082935",
    "end": "2095110"
  },
  {
    "text": "Let's say that I have this\npartial path already. All right?",
    "start": "2095110",
    "end": "2102120"
  },
  {
    "text": "When I build a new partial--",
    "start": "2102120",
    "end": "2108280"
  },
  {
    "text": "when I'm looking at this path,\nwhich is what I'm doing when I pop it off the front of\nthe list of paths",
    "start": "2108280",
    "end": "2114050"
  },
  {
    "text": "that I already have-- I'm going to look at\nall its children. So I'm going to look at these\ntwo nodes right here.",
    "start": "2114050",
    "end": "2122780"
  },
  {
    "text": "And then I'm going to say--\nlet's say that my goal node is here, and then I'm going\nto say that these",
    "start": "2122780",
    "end": "2133570"
  },
  {
    "text": "aren't my goal nodes. So I'm going to create new\npartial paths, and one of them is going to be v0,\nv1, v2, and v4.",
    "start": "2133570",
    "end": "2141830"
  },
  {
    "text": "So I already have that. And the other partial\npath is going to be v0, v1, v2, and v5. ",
    "start": "2141830",
    "end": "2149652"
  },
  {
    "text": "AUDIENCE: You just find every\nsingle possible path to get the tuples [INAUDIBLE]. ",
    "start": "2149652",
    "end": "2156555"
  },
  {
    "text": "PROFESSOR: What's that? AUDIENCE: [INAUDIBLE]  PROFESSOR: Until you reach\nthe goal node.",
    "start": "2156555",
    "end": "2163250"
  },
  {
    "text": "So with depth-first search,\nyou do have to-- ",
    "start": "2163250",
    "end": "2169079"
  },
  {
    "text": "well, no, not even with\ndepth-first search.  There's some interesting\nproperties about the different",
    "start": "2169080",
    "end": "2175400"
  },
  {
    "text": "searches, but we just want you\nto be familiar with how they go about doing their task.",
    "start": "2175400",
    "end": "2180590"
  },
  {
    "text": "So the idea is that we start\noff with a partial path--",
    "start": "2180590",
    "end": "2185970"
  },
  {
    "text": "just this guy-- and then we find all the\nother partial paths. So it'll start off with\njust this guy",
    "start": "2185970",
    "end": "2192650"
  },
  {
    "text": "as its list of paths-- so one element-- and then it's going to pop\nthis off the front.",
    "start": "2192650",
    "end": "2200599"
  },
  {
    "text": "It's going to say, OK, I'm\nlooking at this partial path. What are the additional paths\nthat I can build off of this?",
    "start": "2200600",
    "end": "2205960"
  },
  {
    "text": "And I can build four additional\npaths off of this. So now I have a set of four\npaths that I want to look at.",
    "start": "2205960",
    "end": "2214799"
  },
  {
    "text": "And then it takes a look at,\nsay, this partial path of v0,",
    "start": "2214800",
    "end": "2220490"
  },
  {
    "text": "v1, and it says, what are the\npaths that I can build off of this, and then adds\nit to the end.",
    "start": "2220490",
    "end": "2226630"
  },
  {
    "text": "And then it says, what are\nthe paths that I can build off of this guy-- adds those to the end-- what are\nthe paths that I get from",
    "start": "2226630",
    "end": "2233110"
  },
  {
    "text": "this guy-- adds those to the\nend, and so on and so forth. AUDIENCE: So you keep track\nof all the paths that you",
    "start": "2233110",
    "end": "2240490"
  },
  {
    "text": "[INAUDIBLE]? PROFESSOR: Right. Oh, OK. Is that what you meant? AUDIENCE: You hit a node-- and\nthere's another possible",
    "start": "2240490",
    "end": "2246940"
  },
  {
    "text": "thing-- but if you don't hit a\nnode-- if there's some paths somewhere else in the graph,\nthen it doesn't ever reach into that.",
    "start": "2246940",
    "end": "2255000"
  },
  {
    "text": "It just doesn't account\nfor it. PROFESSOR: Well, I mean, it is\npossible for breadth-first",
    "start": "2255000",
    "end": "2261470"
  },
  {
    "text": "search to go find nodes that\ndon't reach the goal, but",
    "start": "2261470",
    "end": "2267330"
  },
  {
    "text": "what's going to happen\nin those cases is, they're going to-- ",
    "start": "2267330",
    "end": "2276599"
  },
  {
    "text": "so let's say that there's such\na path at the front of this paths list, and it doesn't\nhave any children.",
    "start": "2276600",
    "end": "2286599"
  },
  {
    "text": "So you can't go anywhere after\nyou've gotten to this node.",
    "start": "2286600",
    "end": "2293030"
  },
  {
    "text": "Then what's going to happen is\nthis for loop's not going to execute, right?-- because\nit has no children.",
    "start": "2293030",
    "end": "2300970"
  },
  {
    "text": "And so it's just going to be\ndiscarded as a possibility.",
    "start": "2300970",
    "end": "2306670"
  },
  {
    "text": "So I mean, the key thing is that\nyou're generating these",
    "start": "2306670",
    "end": "2314910"
  },
  {
    "text": "new partial paths for every node\nthat you're looking at. And you're adding those to a\nlist or a queue of partial",
    "start": "2314910",
    "end": "2321920"
  },
  {
    "text": "paths that you need to examine\nin the future if you don't find your goal.",
    "start": "2321920",
    "end": "2328350"
  },
  {
    "text": "If you do find a partial path\nthat has a child that is the goal, then you can just\nimmediately return that path",
    "start": "2328350",
    "end": "2336140"
  },
  {
    "text": "because you know it's going\nto be the shortest path, in this case. So--",
    "start": "2336140",
    "end": "2342330"
  },
  {
    "text": "I don't know.  AUDIENCE: So what happens when\nyou find two partial paths",
    "start": "2342330",
    "end": "2348210"
  },
  {
    "text": "that both reach? PROFESSOR: Well, then it depends\non which one appears",
    "start": "2348210",
    "end": "2353750"
  },
  {
    "text": "first in your list. So you're asking-- ",
    "start": "2353750",
    "end": "2363180"
  },
  {
    "text": "let's do something\nreally simple-- if I have-- AUDIENCE: Oh, OK.",
    "start": "2363180",
    "end": "2369032"
  },
  {
    "text": "So that makes sense. PROFESSOR: So at some point,\nyou're going to have a partial",
    "start": "2369032",
    "end": "2374670"
  },
  {
    "text": "path right here, or a list of\npartial paths that consist of",
    "start": "2374670",
    "end": "2380190"
  },
  {
    "text": "v0, v1, and then v0 and v2.",
    "start": "2380190",
    "end": "2387030"
  },
  {
    "text": "Whichever path you ultimately\nwind up returning is going to be dependent on whether or not\nthis one comes first in your",
    "start": "2387030",
    "end": "2395410"
  },
  {
    "text": "list of partial paths to check,\nor this one comes first in your list of partial\npaths to check.",
    "start": "2395410",
    "end": "2401720"
  },
  {
    "text": "Did that kind of answer it? ",
    "start": "2401720",
    "end": "2406950"
  },
  {
    "text": "So is everyone good on\nbreadth-first search, conceptually?",
    "start": "2406950",
    "end": "2412810"
  },
  {
    "text": "Is the code flummoxing anyone? ",
    "start": "2412810",
    "end": "2422391"
  },
  {
    "text": "AUDIENCE: How do you find which\none is the shortest? ",
    "start": "2422392",
    "end": "2431170"
  },
  {
    "text": "PROFESSOR: If you're building\nyour partial path-- ",
    "start": "2431170",
    "end": "2436930"
  },
  {
    "text": "so you've popped off this path\nthat you're examining-- and you look at all its\nchildren, and one of the children is a goal node, then\nyou know that you've found the",
    "start": "2436930",
    "end": "2444440"
  },
  {
    "text": "shortest path, right?-- because you've been building\nthis incrementally,",
    "start": "2444440",
    "end": "2450760"
  },
  {
    "text": "one by one by one. And then if you've found the\ngoal node, then you know to--",
    "start": "2450760",
    "end": "2457206"
  },
  {
    "text": "you know, you already built up\nthe shortest path possible. Because if the goal node had\nbeen on a shorter path before,",
    "start": "2457206",
    "end": "2465390"
  },
  {
    "text": "you would have found\nit already. AUDIENCE: That would be a\ndifferent scenario if that path were weighted.",
    "start": "2465390",
    "end": "2471700"
  },
  {
    "text": "PROFESSOR: Well, if the paths\nare weighted, then it's a little different because\nhere, we're just doing shortest path.",
    "start": "2471700",
    "end": "2478270"
  },
  {
    "text": "What you're talking about is\ndoing a least cost path, in which case the main difference\nwould be how it sorts its list",
    "start": "2478270",
    "end": "2488440"
  },
  {
    "text": "of candidate paths, right? AUDIENCE: [INAUDIBLE] PROFESSOR: Hmm?",
    "start": "2488440",
    "end": "2495890"
  },
  {
    "text": "AUDIENCE: When it does sort it,\nit would say, keep this [UNINTELLIGIBLE] path\n[UNINTELLIGIBLE PHRASE]? ",
    "start": "2495891",
    "end": "2504214"
  },
  {
    "text": "PROFESSOR: Yes. So in this case, our lambda\nfunction is saying that we're going to sort these lists\nbased on their length.",
    "start": "2504215",
    "end": "2511480"
  },
  {
    "text": "But if I wanted to say, sort\nthem based on the sum of their weights, then I would have a\nfunction that sums up the",
    "start": "2511480",
    "end": "2518210"
  },
  {
    "text": "weights on that path and uses\nthat in the sorting in order to select the next partial\npath to search.",
    "start": "2518210",
    "end": "2526385"
  },
  {
    "text": "AUDIENCE: Although, in that\ncase, you'd actually have to ennumerate every single possible\npath, to show you found the lowest cost path.",
    "start": "2526385",
    "end": "2532923"
  },
  {
    "text": " PROFESSOR: No.",
    "start": "2532924",
    "end": "2538401"
  },
  {
    "text": "AUDIENCE: Because doesn't-- I might understand this-- is\nthat you find all the paths of",
    "start": "2538402",
    "end": "2544550"
  },
  {
    "text": "length one through a certain\npoint and all the paths of length 2. PROFESSOR: Right. AUDIENCE: And so if you're\nworried about cost, it's",
    "start": "2544550",
    "end": "2550050"
  },
  {
    "text": "possible-- in principal-- that\nyour longest path is your lowest cost path. AUDIENCE: Wait. You're not sorting it\nby length then.",
    "start": "2550050",
    "end": "2556680"
  },
  {
    "text": "PROFESSOR: Right. [INTERPOSING VOICES] PROFESSOR: But what he's saying\nis that because you're",
    "start": "2556680",
    "end": "2561980"
  },
  {
    "text": "growing it by one each time,\nthen it's possible that-- let's say that I have partial\npaths of length 2, but my",
    "start": "2561980",
    "end": "2573890"
  },
  {
    "text": "least cost path is actually of\nlength 5, then even if one of these nodes reaches--",
    "start": "2573890",
    "end": "2580160"
  },
  {
    "text": "like, say that v2 reaches the\ngoal before the actual least",
    "start": "2580160",
    "end": "2585440"
  },
  {
    "text": "cost path, then you\ncan't stop. You do have to integrate\nthrough all of them.",
    "start": "2585440",
    "end": "2591589"
  },
  {
    "text": "AUDIENCE: Well, you just\nsort it by cost. I think that it's a better\nexample to say that if you have one partial path\nthat has cost 7 ...",
    "start": "2591590",
    "end": "2596970"
  },
  {
    "text": "PROFESSOR: Well,\nactually, wait. No. You're actually right. Because if you sort it by cost,\nthen your least cost",
    "start": "2596970",
    "end": "2602829"
  },
  {
    "text": "path is going to be in front\nof your queue all the time. AUDIENCE: No, I don't\nthink that's true. Because imagine this--",
    "start": "2602830",
    "end": "2608654"
  },
  {
    "text": "imagine you had a graph\nthat was like-- this is your start node. This is your end node,\nand you go like",
    "start": "2608654",
    "end": "2615910"
  },
  {
    "text": "this, this, this, this. And so you make a breadth-first,\nwhere you go to",
    "start": "2615910",
    "end": "2622250"
  },
  {
    "text": "this node and this node, and the\ncost of this is 1 and the cost of this is 8. The cost of this is 20 and\nthe cost of this is 1.",
    "start": "2622250",
    "end": "2630710"
  },
  {
    "text": "This is your shortest path, or\nthis is your cheapest path, but when you add them-- they're\nboth of length 1--",
    "start": "2630710",
    "end": "2637760"
  },
  {
    "text": "so you explore this one first\nbecause it's the cheapest at a cost of 1, but the total\ncost is 21 to",
    "start": "2637760",
    "end": "2644602"
  },
  {
    "text": "continue from this node. But the total cost is\n[UNINTELLIGIBLE] that node. So I think that he's right.",
    "start": "2644602",
    "end": "2650485"
  },
  {
    "text": "Right? I thought you had to expand all\nnodes when you're doing breadth-first. That's why you do, like,\n[UNINTELLIGIBLE]. ",
    "start": "2650485",
    "end": "2659000"
  },
  {
    "text": "But, yes. For weights you have to\nexpand all of them.",
    "start": "2659000",
    "end": "2664058"
  },
  {
    "text": "PROFESSOR: So-- AUDIENCE: [INAUDIBLE] PROFESSOR: Yes? AUDIENCE: [INAUDIBLE] PROFESSOR: Possibly, yes.",
    "start": "2664058",
    "end": "2670450"
  },
  {
    "text": "I'm blanking on the answer. ",
    "start": "2670450",
    "end": "2677569"
  },
  {
    "text": "But in this case, we don't have\nto enumerate all paths. AUDIENCE: We're just looking for\nthe shortest path-- we can",
    "start": "2677570",
    "end": "2684225"
  },
  {
    "text": "just find the shortest path. PROFESSOR: Right. But if you're incorporating\ncosts, then you would use a",
    "start": "2684226",
    "end": "2690360"
  },
  {
    "text": "different algorithm, so it'd be,\nlike, actual shortest path algorithm or something\nlike that.",
    "start": "2690360",
    "end": "2695720"
  },
  {
    "text": "So why don't we just run this. AUDIENCE: So is one better\nthan the other, when you",
    "start": "2695720",
    "end": "2702303"
  },
  {
    "text": "[INAUDIBLE]?  PROFESSOR: They have different\nrunning characteristics.",
    "start": "2702303",
    "end": "2707910"
  },
  {
    "text": "It really depends on\nyour application.  The nice thing about depth-first\nsearch is that",
    "start": "2707910",
    "end": "2718020"
  },
  {
    "text": "it's fairly memory efficient\nbecause with breadth-first search, you're storing all\nthe possible paths--",
    "start": "2718020",
    "end": "2723710"
  },
  {
    "text": "all the possible\npartial paths. With depth-first search, you\nonly have one path and memory",
    "start": "2723710",
    "end": "2730370"
  },
  {
    "text": "at a given point, right? You have the path that you've\nalready found from one of your",
    "start": "2730370",
    "end": "2737890"
  },
  {
    "text": "children to the end\nnode, plus 1. But with the breadth-first\nsearch, you're going to have a",
    "start": "2737890",
    "end": "2743450"
  },
  {
    "text": "list of all the partial\npaths that you have to search through. ",
    "start": "2743450",
    "end": "2750170"
  },
  {
    "text": "So let's see. ",
    "start": "2750170",
    "end": "2773075"
  },
  {
    "text": "This doesn't make sense. AUDIENCE: I don't think it\nmatches the picture. AUDIENCE: [0, 4] is\na path, isn't it?",
    "start": "2773075",
    "end": "2780963"
  },
  {
    "text": "From the graph? PROFESSOR: Right. Yes. No, it's not matching\nthe picture.",
    "start": "2780963",
    "end": "2786200"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: What's that? AUDIENCE: [INAUDIBLE] PROFESSOR: Is what?",
    "start": "2786200",
    "end": "2791400"
  },
  {
    "text": "AUDIENCE: It was undirected. PROFESSOR: Yes, it was an\nundirected graph-- that's why.",
    "start": "2791400",
    "end": "2796730"
  },
  {
    "text": "So if we run it directed,\nlet's see what happens.",
    "start": "2796730",
    "end": "2801755"
  },
  {
    "start": "2801755",
    "end": "2811039"
  },
  {
    "text": "AUDIENCE: 0 to 4 is still\nin the graph. PROFESSOR: Yes. ",
    "start": "2811040",
    "end": "2817910"
  },
  {
    "text": "You are absolutely right. Oh, you know what's going\non-- it's running both. It's running the depth-first\nsearch.",
    "start": "2817910",
    "end": "2823910"
  },
  {
    "text": "AUDIENCE: No, it's running\nboth the directed and the undirected. PROFESSOR: Well, it's\nalso running the depth-first search as well.",
    "start": "2823910",
    "end": "2830730"
  },
  {
    "text": "That was my question, because\nI was looking at this, and I was, like, that's not\nbreadth-first search, that's",
    "start": "2830730",
    "end": "2836650"
  },
  {
    "text": "depth-first search. This, on the other hand, is\nbreadth-first search.",
    "start": "2836650",
    "end": "2842530"
  },
  {
    "text": "So there we go.",
    "start": "2842530",
    "end": "2848390"
  },
  {
    "text": "So if we have a graph--\nand let's see-- so it starts off with node 0,\nand then it builds a new list",
    "start": "2848390",
    "end": "2857240"
  },
  {
    "text": "of partial paths with [0, 1],\n[0, 2], so it's got, in this",
    "start": "2857240",
    "end": "2864490"
  },
  {
    "text": "case, this partial path and\nthen this partial path.",
    "start": "2864490",
    "end": "2870500"
  },
  {
    "text": "And then it expands\none of them. So, in this case,\nI guess [0, 1]",
    "start": "2870500",
    "end": "2876630"
  },
  {
    "text": "was the path that was first\non the list, right? So it's going to expand the\nchildren of 1, which is just 2",
    "start": "2876630",
    "end": "2886050"
  },
  {
    "text": "and itself. But it's going to\navoid cycles. AUDIENCE: [INAUDIBLE] PROFESSOR: What's that? AUDIENCE: [INAUDIBLE]",
    "start": "2886050",
    "end": "2891609"
  },
  {
    "text": "PROFESSOR: Oh, yes. And then it's going to expand\nthis partial path-- the [0, 2]",
    "start": "2891610",
    "end": "2897974"
  },
  {
    "text": "-- because it's the shortest one,\nand it's going to add that new partial path to the end.",
    "start": "2897975",
    "end": "2904349"
  },
  {
    "text": "And then it's going to expand\nthis guy, and add the",
    "start": "2904350",
    "end": "2909770"
  },
  {
    "text": "expansion here, and then it's\ngoing to expand this guy. And it turns out that one of\nthe children of 3 is 4.",
    "start": "2909770",
    "end": "2921260"
  },
  {
    "text": "So it's found the shortest\npath from 0 to 4. ",
    "start": "2921260",
    "end": "2928500"
  },
  {
    "text": "Make sense? AUDIENCE: So, can you go\nback to [INAUDIBLE]? Then why does it say\n[0, 2, 3] then?",
    "start": "2928500",
    "end": "2937972"
  },
  {
    "text": "PROFESSOR: That's the\nrepresentation in the pass list, so each element in\nthe path's list is",
    "start": "2937972",
    "end": "2948400"
  },
  {
    "text": "represented as a tuple. The first element is the list\nof nodes on that path, and",
    "start": "2948400",
    "end": "2954240"
  },
  {
    "text": "then the second element is\nthe length of that path. And that's why we had that\nlambda function in the first",
    "start": "2954240",
    "end": "2961400"
  },
  {
    "text": "place, right? So if you read the specification\nhere, you have",
    "start": "2961400",
    "end": "2968329"
  },
  {
    "text": "path length, and then\nyou have the nodes that are on that path. ",
    "start": "2968330",
    "end": "2974820"
  },
  {
    "text": "And when we sort the path list--\nbecause we need to make",
    "start": "2974820",
    "end": "2980360"
  },
  {
    "text": "sure that we're looking\nat the shortest path-- then we use this lambda function\nin order to get that",
    "start": "2980360",
    "end": "2991030"
  },
  {
    "text": "length for each tuple. ",
    "start": "2991030",
    "end": "2997398"
  }
]