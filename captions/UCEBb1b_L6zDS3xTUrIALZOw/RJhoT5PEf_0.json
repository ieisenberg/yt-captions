[
  {
    "text": " [SQUEAKING]\n[RUSTLING] [CLICKING]",
    "start": "0",
    "end": "11270"
  },
  {
    "text": "ANA BELL: All right,\nlet's get started. Last lecture, we began talking\nabout an entirely new topic",
    "start": "11270",
    "end": "17120"
  },
  {
    "text": "in computer science. And we have begun learning\nabout how to figure out",
    "start": "17120",
    "end": "23210"
  },
  {
    "text": "the runtime of our programs. So we did-- we looked\nat how to actually time",
    "start": "23210",
    "end": "28940"
  },
  {
    "text": "the program by figuring out\nexactly how long it takes. And then, how to count\nthe number of operations",
    "start": "28940",
    "end": "34100"
  },
  {
    "text": "in the program. Today, we're going to do very\nsame thing to begin with. So for the first\nhalf of the lecture,",
    "start": "34100",
    "end": "40590"
  },
  {
    "text": "we'll time a bunch\nof programs and then we'll count the number of\noperations, just like before. But we're going to do them\nin the context of slightly",
    "start": "40590",
    "end": "47630"
  },
  {
    "text": "different, slightly more\ninteresting programs or functions involving just\npure numbers as our parameters",
    "start": "47630",
    "end": "54739"
  },
  {
    "text": "and then functions that involve\nlists as our parameters. That will be the first\nhalf of the lecture.",
    "start": "54740",
    "end": "60300"
  },
  {
    "text": "And then, from there\non, we're going to look at the idea\nof order of growth, which is kind of what\nwe're building up",
    "start": "60300",
    "end": "65600"
  },
  {
    "text": "this set of lectures to. And in the order\nof growth, there'll be a little bit of math,\na little bit of graphing,",
    "start": "65600",
    "end": "71810"
  },
  {
    "text": "but not too much. And then, we're\njust going to see how to actually evaluate the\norder of growth of functions",
    "start": "71810",
    "end": "80210"
  },
  {
    "text": "from there on out. OK, so let's begin\nby just figuring out",
    "start": "80210",
    "end": "86060"
  },
  {
    "text": "the runtime of our\nprograms, right? This was a really quick\nand easy way for us to figure out exactly how\nlong our programs take.",
    "start": "86060",
    "end": "92840"
  },
  {
    "text": "So last lecture, we\nimported this time module, and we're doing that\nagain this time. But instead of actually running\nthe time function that we",
    "start": "92840",
    "end": "103610"
  },
  {
    "text": "had seen last lecture\nhere, instead of running the time\nfunction which gave us",
    "start": "103610",
    "end": "110390"
  },
  {
    "text": "this sort of global\nabsolute time since some date\nin the past, we're",
    "start": "110390",
    "end": "116683"
  },
  {
    "text": "going to run this slightly\ndifferent function called performance counter. And this is what is typically\nused in the real world",
    "start": "116683",
    "end": "123710"
  },
  {
    "text": "to figure out how long an\nactual program or a function takes to run. The reason we're using this\nis because it's more accurate.",
    "start": "123710",
    "end": "130929"
  },
  {
    "text": "So the time dot time function\nthat we used last lecture gave us, maybe, precision to\n1 times 10 to negative 3",
    "start": "130930",
    "end": "139350"
  },
  {
    "text": "or something very,\nvery big like that. The performance\ncounter can actually give us precision to something\nthat's a lot, lot smaller.",
    "start": "139350",
    "end": "148290"
  },
  {
    "text": "So maybe 1 times 10 to the\nnegative 8 or something very small. So we'll be able to see the\ntimings of some functions that",
    "start": "148290",
    "end": "156570"
  },
  {
    "text": "were basically 0 in\nthe last lecture. OK, so just a quick review of\nhow we actually get the time",
    "start": "156570",
    "end": "163830"
  },
  {
    "text": "that a function takes to run. We run this performance\ncounter time, and this one gives us\nnot an absolute time,",
    "start": "163830",
    "end": "170730"
  },
  {
    "text": "but more of a\nshorter time frame, not from some time in the past.",
    "start": "170730",
    "end": "176099"
  },
  {
    "text": "And the performance\ncounter is very useful when we're getting these DTs, right? The difference in some times.",
    "start": "176100",
    "end": "182520"
  },
  {
    "text": "So we're running the\nperformance counter to get the quote\nunquote \"starting time.\" We run the function.",
    "start": "182520",
    "end": "188730"
  },
  {
    "text": "We run the performance\ncounter again to get the quote\nunquote \"stopping time.\" Subtract the starting\ntime to get the DT.",
    "start": "188730",
    "end": "198000"
  },
  {
    "text": "And then, we will\nprint that time to see how long the function\nactually takes to run.",
    "start": "198000",
    "end": "203549"
  },
  {
    "text": "Yeah, that's what I said. OK, so we're going to look\nat two different functions",
    "start": "203550",
    "end": "208960"
  },
  {
    "text": "than last time,\nbut they're going to have the same\noverarching themes",
    "start": "208960",
    "end": "215320"
  },
  {
    "text": "that we saw last lecture. So the first function\nwe're going to look at is called convert\nto kilometers taking",
    "start": "215320",
    "end": "221110"
  },
  {
    "text": "in some miles and returns\nthe value in kilometers. And the second function is\na function named compound.",
    "start": "221110",
    "end": "228560"
  },
  {
    "text": "So this one should\nseem very familiar. It will bring flashbacks\nto problem set one.",
    "start": "228560",
    "end": "235299"
  },
  {
    "text": "It's a function that takes\nin a monthly investment, an interest rate for the\nmonth, and some number",
    "start": "235300",
    "end": "241630"
  },
  {
    "text": "of months to invest that much. And it returns how\nmuch money you've made",
    "start": "241630",
    "end": "246909"
  },
  {
    "text": "over those number of months. So you can see here you have in\ntotal initialized, a loop that goes through that many months,\nand it updates the total based",
    "start": "246910",
    "end": "255400"
  },
  {
    "text": "on the interest rate\nand how much money you have there right\nnow plus whatever you've invested for that month.",
    "start": "255400",
    "end": "260859"
  },
  {
    "text": "OK, so the three\nquestions we're going to answer, just like we\nanswered last lecture is, how long in actual seconds does\nit take to run these functions?",
    "start": "260860",
    "end": "268750"
  },
  {
    "text": "Which input parameters does the\nfunction actually depend on? And do these two\nfunctions actually",
    "start": "268750",
    "end": "275800"
  },
  {
    "text": "run for different\namounts of time? And what is that\ndifference, right? Does one run in 12 seconds\nand the other one run in 0.5?",
    "start": "275800",
    "end": "284440"
  },
  {
    "text": "What is the actual time that\nit takes for them to run. So this is our code.",
    "start": "284440",
    "end": "289919"
  },
  {
    "text": "So these are the two functions. Before we go on,\nlet me just show you how we're creating the inputs.",
    "start": "289920",
    "end": "296340"
  },
  {
    "text": "So just like before,\nwe're creating a list of all of\nthe different inputs we're going to run\nthe function with.",
    "start": "296340",
    "end": "302370"
  },
  {
    "text": "So here, I've got this ln. That will contain the numbers\n1, 10, 100, 1,000, and so on.",
    "start": "302370",
    "end": "309030"
  },
  {
    "text": "And these are going to be the\nparameters to my function. One at a time, of course.",
    "start": "309030",
    "end": "314660"
  },
  {
    "text": "And then, I've got my loop here\nfor each one of those inputs, 1, 10, 100, 1,000.",
    "start": "314660",
    "end": "319880"
  },
  {
    "text": "I'm just going to run\nmy function, right? So here, I'm measuring\nthe time it takes. And then, I'm going to\nreport the time that it",
    "start": "319880",
    "end": "328610"
  },
  {
    "text": "took to run the program. And just for fun, I'm\nalso going to report how many times this program\ncould run in one second.",
    "start": "328610",
    "end": "337270"
  },
  {
    "text": "Because for me, it\nwas a little bit hard to read 1 times 10 to the\nnegative 8 or something",
    "start": "337270",
    "end": "343810"
  },
  {
    "text": "like that. But it was a lot\neasier for me to see this big number\nfor how many times that function could\nhave run in one second.",
    "start": "343810",
    "end": "351450"
  },
  {
    "text": "So here I've got\nconvert to kilometers.",
    "start": "351450",
    "end": "357880"
  },
  {
    "text": "So I'm going to run it. And we're going to see\nit's this right here.",
    "start": "357880",
    "end": "365509"
  },
  {
    "text": "How long the function\nactually took. So last time we\nran a program that was really simple\nlike this, all of it",
    "start": "365510",
    "end": "371540"
  },
  {
    "text": "basically said it took\nzero seconds, right? It was just so\nfast that time dot time function wasn't able\nto pick up that precise time",
    "start": "371540",
    "end": "379849"
  },
  {
    "text": "difference. But this performance counter\ncan, which is a lot nicer. So now, we see that no matter\nwhat the input it looks like,",
    "start": "379850",
    "end": "388190"
  },
  {
    "text": "the time is pretty\nmuch the same, right? 3 times 10 to the\nnegative 7 seconds no matter what the input is.",
    "start": "388190",
    "end": "395810"
  },
  {
    "text": "That was expected. Now, what about the\ncompound function?",
    "start": "395810",
    "end": "401972"
  },
  {
    "text": "This one's going to be a\nlittle bit more interesting. Because there are actually three\nparameters to this function, right?",
    "start": "401972",
    "end": "408380"
  },
  {
    "text": "What we're going to\ndo is change each one and see which one\nof those parameters actually has an\neffect on the runtime.",
    "start": "408380",
    "end": "416340"
  },
  {
    "text": "So here, this bit, is going\nto fix my interest rate",
    "start": "416340",
    "end": "422900"
  },
  {
    "text": "and fix the number of months. And I'm going to change the\namount I invest every month.",
    "start": "422900",
    "end": "428530"
  },
  {
    "text": "OK, so if I run that,\nthat was pretty fast. Again, we look at\nthe results here. And no matter how much\nI invest every month,",
    "start": "428530",
    "end": "435710"
  },
  {
    "text": "it looks like the\nprogram doesn't really change how long it\ntakes to run, right? It's always about 1 times 10 to\nthe negative 6 seconds to run.",
    "start": "435710",
    "end": "444350"
  },
  {
    "text": "All right, what if I\nchange the interest rate? So this one was a little\nbit harder to change.",
    "start": "444350",
    "end": "451000"
  },
  {
    "text": "But I settled on this as\nthe thing I'm varying.",
    "start": "451000",
    "end": "456820"
  },
  {
    "text": "Sorry, I'm varying\nit in this way. So it's going to be\n1.1 or 1.0 or 1.001.",
    "start": "456820",
    "end": "464730"
  },
  {
    "text": "That's what I'm\ngoing to invest-- the interest rate for whatever\nI'm going to invest in. And I'm going to fix $10 as my\ninvestment per month and fix",
    "start": "464730",
    "end": "473940"
  },
  {
    "text": "the 12 months, again. So if I run that, same deal.",
    "start": "473940",
    "end": "479430"
  },
  {
    "text": "It looks like changing this\ninvestment isn't really making much of a\ndifference in how long",
    "start": "479430",
    "end": "485460"
  },
  {
    "text": "it takes the program to run.  One last parameter to try.",
    "start": "485460",
    "end": "491660"
  },
  {
    "text": "So now I'm going to fix the\ninitial investment to $10 a month and I'm going\nto fix my interest",
    "start": "491660",
    "end": "497540"
  },
  {
    "text": "rate to this per month. And I'm going to vary\nhow many months I'm",
    "start": "497540",
    "end": "502669"
  },
  {
    "text": "going to invest this. So again, this n will be 1, 10,\n100, 1,000, 10,000, and so on.",
    "start": "502670",
    "end": "511289"
  },
  {
    "text": "So let's see what\nthis is going to do. Already it's doing something\ndifferent than the other two",
    "start": "511290",
    "end": "516679"
  },
  {
    "text": "because it hasn't finished\nrunning yet, right? So it's still working on\nthis last one down here.",
    "start": "516679",
    "end": "521719"
  },
  {
    "text": "But we can see that\nmore interesting things are happening now, right? So here I've got--",
    "start": "521720",
    "end": "528050"
  },
  {
    "text": "initially, it's\na little bit hard to tell for those small\nnumbers, which is fine. But luckily, we're able to\nrun it for a bunch of inputs.",
    "start": "528050",
    "end": "536930"
  },
  {
    "text": "So starting from about here\nwhen I start investing-- sorry, when I start investing my\nmoney over 1,000 months, 10,000",
    "start": "536930",
    "end": "544070"
  },
  {
    "text": "months, 100,000\nmonths, and so on, it looks like we\ncan see a pattern. Again, for 1,000\nmonths, it takes--",
    "start": "544070",
    "end": "550910"
  },
  {
    "text": "the program takes about 5\ntimes 10 to negative 5 seconds to run. If I increase the number of\nmonths by 10, it takes times 10",
    "start": "550910",
    "end": "558380"
  },
  {
    "text": "to the negative\n4 seconds to run. And then, as my input\nincreases by 10,",
    "start": "558380",
    "end": "564090"
  },
  {
    "text": "the number of months,\nmy time to run seems to increase by\n10 as well, right?",
    "start": "564090",
    "end": "569430"
  },
  {
    "text": "So 0.005, 0.05, 0.7,\n0.8, something like that.",
    "start": "569430",
    "end": "577990"
  },
  {
    "text": "OK, so this is from\na previous run. Of course, each run\nwill be different",
    "start": "577990",
    "end": "583440"
  },
  {
    "text": "because we're just\npurely grabbing the time that the program took to\nrun, so the actual time",
    "start": "583440",
    "end": "589770"
  },
  {
    "text": "will be different. But a few things to notice. So Python actually\nreported the time",
    "start": "589770",
    "end": "595470"
  },
  {
    "text": "it took the program to run\nin scientific notation, which is kind of cool. So this is 4.3 times\n10 to the negative 6.",
    "start": "595470",
    "end": "601529"
  },
  {
    "text": "So it knew how to show\nit to me like that. So it's not-- it doesn't have\na bunch of zeros in there.",
    "start": "601530",
    "end": "607770"
  },
  {
    "text": "And then, the observation\nas we might have-- as you might have guessed is--",
    "start": "607770",
    "end": "614190"
  },
  {
    "text": "for this convert to kilometers\nwas independent, right? So this is the kilometers,\nnot the compound function.",
    "start": "614190",
    "end": "621170"
  },
  {
    "text": "But then, the compound\nfunction here, this is, again,\nfrom a previous run,",
    "start": "621170",
    "end": "626400"
  },
  {
    "text": "we can make a few observations. So the first was that\nthe time only actually",
    "start": "626400",
    "end": "633629"
  },
  {
    "text": "changed with the input\nwhen we changed n months. When we changed the initial\ninvestment or the interest",
    "start": "633630",
    "end": "642900"
  },
  {
    "text": "rate, the program just basically\ntook the same amount of time to run. So it was only n\nmonths that actually",
    "start": "642900",
    "end": "648420"
  },
  {
    "text": "made a difference for us. Second observation, again,\nsomething we noticed,",
    "start": "648420",
    "end": "653800"
  },
  {
    "text": "is as we increase\nthe number of months by 10, the time it\ntakes the program",
    "start": "653800",
    "end": "658810"
  },
  {
    "text": "to run also increases by 10. Again, something\nwe've talked about. And the last\nobservation is that we",
    "start": "658810",
    "end": "670560"
  },
  {
    "text": "have this relationship very\napparent as the input is really big, right?",
    "start": "670560",
    "end": "677010"
  },
  {
    "text": "As the input is small, I think\nI mentioned this last time, if, for some reason, my\ncomputer updates or decides",
    "start": "677010",
    "end": "684480"
  },
  {
    "text": "to dedicate some\nresources to running an app in the background\nfor whatever reason",
    "start": "684480",
    "end": "690150"
  },
  {
    "text": "as it's trying to figure out the\ncompound function with an input of 1, this number could be\nchanged dramatically, right?",
    "start": "690150",
    "end": "697650"
  },
  {
    "text": "Because 2 times 10\nto the negative 6 can be affected a lot by\njust a little bit of time",
    "start": "697650",
    "end": "702930"
  },
  {
    "text": "dedicated to something else. Whereas, 4 seconds\nor 14 seconds,",
    "start": "702930",
    "end": "708450"
  },
  {
    "text": "if my computer dedicates a\nlittle bit of time to something else, that 4 or 14 won't\nbe affected as much, right?",
    "start": "708450",
    "end": "714540"
  },
  {
    "text": "So when the numbers\nare big, that's when we can see the behavior\nof our function a lot more",
    "start": "714540",
    "end": "721200"
  },
  {
    "text": "clearly. Not when the numbers are small. OK, so now I'd like to look\nat some more functions.",
    "start": "721200",
    "end": "731740"
  },
  {
    "text": "These functions\nare going to have the input being a list as\nopposed to just numbers.",
    "start": "731740",
    "end": "737667"
  },
  {
    "text": "We've seen a bunch of\nexamples with numbers. But let's see what happens\nwhen my input is a list.",
    "start": "737667",
    "end": "743120"
  },
  {
    "text": "So here's a very\nsimple function. It takes in a list\nL. And it sums",
    "start": "743120",
    "end": "749800"
  },
  {
    "text": "all of the elements\nin the list L. So we've seen this a\nbunch of times already.",
    "start": "749800",
    "end": "754870"
  },
  {
    "text": "We initialize the\ntotal to be zero, we iterate through\neach element in L, and we keep our running total\nby just adding the element",
    "start": "754870",
    "end": "763210"
  },
  {
    "text": "to that total-- pretty simple--\nand we return it. Now, how do we actually\nrun this function",
    "start": "763210",
    "end": "770520"
  },
  {
    "text": "with a whole bunch\nof different inputs? Well, that's what we're\ngoing to see next. So this bit here is\nexactly the same as before.",
    "start": "770520",
    "end": "780060"
  },
  {
    "text": "It's actually creating\nfor us the list of 1, 10, 100, 1,000,\n10,000, and so on.",
    "start": "780060",
    "end": "787660"
  },
  {
    "text": "But clearly, the number 10\ncannot be an input to this function because this\nfunction is expecting a list.",
    "start": "787660",
    "end": "797330"
  },
  {
    "text": "so L cannot be 10. It needs to be a list\nwith some things in it. So instead, what we're going\nto do out of that number,",
    "start": "797330",
    "end": "805394"
  },
  {
    "text": "1, 10, 100, 1,000,\nand so on, we're actually going to\nmake a list with just",
    "start": "805395",
    "end": "810570"
  },
  {
    "text": "some random dummy numbers in it. I don't actually care\nwhat these numbers are. So let's just make\nthem be the numbers",
    "start": "810570",
    "end": "816360"
  },
  {
    "text": "0 to 9, 0 to 99, 0 to 999. And in effect, each\none of these lists",
    "start": "816360",
    "end": "822720"
  },
  {
    "text": "will then have one element\nin it, 10 elements in it, 100 elements in it, 1,000\nelements in it, and so on.",
    "start": "822720",
    "end": "829269"
  },
  {
    "text": "All right, everyone\nOK with that? All right, so the\ninput is now different. It needs to be a list. We're just creating a bunch\nof lists of varying lengths.",
    "start": "829270",
    "end": "838269"
  },
  {
    "text": "So the relationship\nbetween these lengths are that the lists are 10 times\nas big as the previous list,",
    "start": "838270",
    "end": "844120"
  },
  {
    "text": "right? So then, now I have\nmy input list here. I do the exact same\nthing as before.",
    "start": "844120",
    "end": "851220"
  },
  {
    "text": "Not yet. I run the performance counter\nto create my starting time.",
    "start": "851220",
    "end": "856440"
  },
  {
    "text": "I run my function\nand I get the DT and I report the exact\nsame thing as before.",
    "start": "856440",
    "end": "862110"
  },
  {
    "text": "All right, so let's\nrun that down here.",
    "start": "862110",
    "end": "869240"
  },
  {
    "text": " Running, running, running.",
    "start": "869240",
    "end": "874730"
  },
  {
    "text": "Again, we have to\nwait a little bit. It looks like it's\nworking, but it's just getting slower and\nslower, which is fine.",
    "start": "874730",
    "end": "880500"
  },
  {
    "text": "So what do we notice? So when we had one\nelement in my list,",
    "start": "880500",
    "end": "885620"
  },
  {
    "text": "it took 1 times 10 to the\nnegative 5 seconds to run. When I had 10, it took 1 times\n10 negative 6 seconds to run.",
    "start": "885620",
    "end": "892200"
  },
  {
    "text": "It was actually shorter to\nhave more elements in it. See this is what I\nmean when it's very",
    "start": "892200",
    "end": "899370"
  },
  {
    "text": "unpredictable for low numbers. But as we get to lists of\nlength 1,000, 10,000, 100,000,",
    "start": "899370",
    "end": "907380"
  },
  {
    "text": "a million, and so on, we can\nstart to see the pattern. So with 10,000, it took 4 times\n10 to the negative 4 seconds",
    "start": "907380",
    "end": "914200"
  },
  {
    "text": "to run. With 100,000, it took times\n10 to the negative 3 seconds to run. And then, as the\ninput increases by 10,",
    "start": "914200",
    "end": "921269"
  },
  {
    "text": "that is the length of\nmy list increases by 10, it looks like the program\ntakes 10 times as long to run.",
    "start": "921270",
    "end": "929190"
  },
  {
    "text": "OK, a very similar\nthing as before. So the first observation that\nwe can make out of this function",
    "start": "929190",
    "end": "936480"
  },
  {
    "text": "is that the size of the\ninput, obviously, is now the length of our list, right?",
    "start": "936480",
    "end": "941910"
  },
  {
    "text": "It's not just the number\n10 or the number 1,000. It's a length of-- list of length 10 or a\nlist of length 1,000.",
    "start": "941910",
    "end": "950360"
  },
  {
    "text": "Second observation\nis that, again, just like in the previous\ncase, the average time",
    "start": "950360",
    "end": "956870"
  },
  {
    "text": "increases by 10 as the length\nof our list increases by 10.",
    "start": "956870",
    "end": "962350"
  },
  {
    "text": "Again, very good. And just like before,\nthis relationship between the size\nand time is more",
    "start": "962350",
    "end": "969490"
  },
  {
    "text": "predictable for large sizes\nthan it was for small sizes. As we just saw here,\nwhich surprised me",
    "start": "969490",
    "end": "975880"
  },
  {
    "text": "a little bit as well is if\nfor us a list that's longer, it took a shorter\namount of time to run,",
    "start": "975880",
    "end": "982867"
  },
  {
    "text": "which is counterintuitive. But again, that's probably\nbecause my computer did something here to take a\nlittle bit longer to run it.",
    "start": "982867",
    "end": "990211"
  },
  {
    "text": " And then, the last\nobservation, this",
    "start": "990211",
    "end": "996010"
  },
  {
    "text": "is compared to the\ncompound function where we change the number of months. It looks like the time that this\nprogram actually takes to run",
    "start": "996010",
    "end": "1004860"
  },
  {
    "text": "is pretty comparable-- just\nin terms of pure seconds-- is comparable to how long it\ntook for the compound to run.",
    "start": "1004860",
    "end": "1012660"
  },
  {
    "text": "So here, when my input\nwas 100 million I think? Yeah, 100 million.",
    "start": "1012660",
    "end": "1017880"
  },
  {
    "text": "It took about 8 seconds to run. And when my list had 100\nmillion elements in it,",
    "start": "1017880",
    "end": "1023160"
  },
  {
    "text": "it took about 7\nseconds to run, right? And then, 10 times\nfaster going--",
    "start": "1023160",
    "end": "1030030"
  },
  {
    "text": "when we decreased\nour input by 10, OK? So already, we're starting\nto see something that we're",
    "start": "1030030",
    "end": "1037509"
  },
  {
    "text": "going to get-- yeah, go ahead. AUDIENCE: What is\nthe sum_of function? ",
    "start": "1037510",
    "end": "1045109"
  },
  {
    "text": "ANA BELL: Oh, sum_of\nis just this function that I wrote here. Yep, that's just-- did I name it\nsomething differently in here?",
    "start": "1045109",
    "end": "1051540"
  },
  {
    "text": "No. Yeah, so already we're\nstarting to get at this idea",
    "start": "1051540",
    "end": "1057200"
  },
  {
    "text": "where I have two functions that\ndo wildly different things.",
    "start": "1057200",
    "end": "1062960"
  },
  {
    "text": "One sums the elements in a list. The other one just loops\nover some number of months and does some calculation.",
    "start": "1062960",
    "end": "1068600"
  },
  {
    "text": "But it looks like they're-- in\nterms of just algorithmically wise, they are very similar.",
    "start": "1068600",
    "end": "1074880"
  },
  {
    "text": "They take similar\namounts of time. They increase at the same rate. And basically, they just have a\nfor loop, or some sort of loop",
    "start": "1074880",
    "end": "1082490"
  },
  {
    "text": "that iterates through the\ninput and does something. So algorithmically,\nwe want to consider both of these\nfunctions the same,",
    "start": "1082490",
    "end": "1088799"
  },
  {
    "text": "even though they implement\ncompletely different things. ",
    "start": "1088800",
    "end": "1094080"
  },
  {
    "text": "Other questions before we go\non to another list function? OK, so let's look at a slightly\ndifferent problem dealing",
    "start": "1094080",
    "end": "1104820"
  },
  {
    "text": "with lists. So this function, or\nthese three functions, deal with finding an\nelement in a list.",
    "start": "1104820",
    "end": "1111300"
  },
  {
    "text": "And we're going to compare\nthe runtimes of these three functions. So the first function is going\nto be a very brute force method",
    "start": "1111300",
    "end": "1120120"
  },
  {
    "text": "to find the element in a list. Was there a question? Yeah.",
    "start": "1120120",
    "end": "1125815"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. Oh, wait. Never mind, I see it. Never mind, I got it.",
    "start": "1125816",
    "end": "1131600"
  },
  {
    "text": "ANA BELL: All right, no worries. OK, so the first function,\nwe'll do a brute force search",
    "start": "1131600",
    "end": "1137960"
  },
  {
    "text": "to find an element x right\nhere, one of my parameters, within a list of the other\none of my parameters.",
    "start": "1137960",
    "end": "1145070"
  },
  {
    "text": "Basically, given a list\nof a bunch of elements, this function will\njust painstakingly",
    "start": "1145070",
    "end": "1151700"
  },
  {
    "text": "look at each element\none at a time and ask whether that element is\nthe one that I'm looking for.",
    "start": "1151700",
    "end": "1158559"
  },
  {
    "text": "All right, so starting over\nhere, the beginning of my list, and going to the end of my list. That's what is in does.",
    "start": "1158560",
    "end": "1167010"
  },
  {
    "text": "The next one,\nbinary search, also looks for an element\nin a list making sure",
    "start": "1167010",
    "end": "1172919"
  },
  {
    "text": "that the list is ordered. But the way that\nit's going to do it is in a slightly smarter way.",
    "start": "1172920",
    "end": "1178620"
  },
  {
    "text": "So I'm actually going to\ndraw my list this way. So each one of these is going\nto be elements in my list.",
    "start": "1178620",
    "end": "1186660"
  },
  {
    "text": "So this is going to do a\nbisection search to find the element in the list. So again, we're\nlooking for element x",
    "start": "1186660",
    "end": "1193700"
  },
  {
    "text": "within this list\nL. And remember, bisection search we start\nwith a beginning endpoint",
    "start": "1193700",
    "end": "1202770"
  },
  {
    "text": "and an ending endpoint. And our first guess for\nwhere-- for the element",
    "start": "1202770",
    "end": "1209809"
  },
  {
    "text": "or whatever we're looking\nfor is to just say, what's the-- is it the middle element? So look at the element\nin the middle and ask,",
    "start": "1209810",
    "end": "1216650"
  },
  {
    "text": "are you the one I'm looking for? In this particular\ncase, you look at the element in the\nmiddle and you say, are you the x I'm\nlooking for, right?",
    "start": "1216650",
    "end": "1226299"
  },
  {
    "text": "Good. So that's this one right here. So the midpoint calculation\nis right here, right?",
    "start": "1226300",
    "end": "1234000"
  },
  {
    "text": "The reason why we're doing\n// for integer division is in the case where I have a list\nwhere I would actually look",
    "start": "1234000",
    "end": "1241890"
  },
  {
    "text": "at the midpoint here, right? Obviously, I can't\nask the I ask Python",
    "start": "1241890",
    "end": "1249180"
  },
  {
    "text": "for the element at\nindex 3.5, right? It doesn't work like that. So I'm just going to round down.",
    "start": "1249180",
    "end": "1255572"
  },
  {
    "text": "You could also round\nup if you wanted to. I just made the\nchoice to round down just so I'm actually grabbing\nthe element at an integer",
    "start": "1255572",
    "end": "1262440"
  },
  {
    "text": "index. So I've grabbed my middle\nelement and then I ask, are you the one I'm looking for?",
    "start": "1262440",
    "end": "1268809"
  },
  {
    "text": "And if not, I ask whether this\none is too low or too high.",
    "start": "1268810",
    "end": "1274330"
  },
  {
    "text": "And then, if it's\ntoo low, then I know I need to search\nthis part of my list.",
    "start": "1274330",
    "end": "1282270"
  },
  {
    "text": "And if it's too high, I need\nto search this part of my list. So that's what this little\nif else is doing, right?",
    "start": "1282270",
    "end": "1290240"
  },
  {
    "text": "And when I make my decision\nas to which side to look at, then I reset my endpoints.",
    "start": "1290240",
    "end": "1297630"
  },
  {
    "text": "And I do the process\nall over again by asking the midpoint\nthere, are you",
    "start": "1297630",
    "end": "1302639"
  },
  {
    "text": "the one I'm looking for? So on and so on. So this does a bisection search,\nalso called binary search",
    "start": "1302640",
    "end": "1308370"
  },
  {
    "text": "for the element in a list. And the last way\nfor us to search",
    "start": "1308370",
    "end": "1314290"
  },
  {
    "text": "whether an element\nis in the list is one that we've\nalready been doing. It's this little one\nliner here is x in L,",
    "start": "1314290",
    "end": "1321910"
  },
  {
    "text": "so using the keyword in. I call that the built-in\nfunction, the built-in operator",
    "start": "1321910",
    "end": "1328385"
  },
  {
    "text": "in. OK, so it would be\nunfair if we just",
    "start": "1328385",
    "end": "1339050"
  },
  {
    "text": "asked Python to figure out-- or to just pick a\nrandom number and ask",
    "start": "1339050",
    "end": "1344660"
  },
  {
    "text": "whether that element was the\none we're looking for, OK? So instead, what\nwe're going to do is to take an average for each\none of these three functions",
    "start": "1344660",
    "end": "1352700"
  },
  {
    "text": "just to make it fair. So we're going to\nsay, when we're searching for an\nelement in the list,",
    "start": "1352700",
    "end": "1358929"
  },
  {
    "text": "I'm going to say that I'm going\nto take the average of the case when the element is the\nfirst one in the list.",
    "start": "1358930",
    "end": "1365890"
  },
  {
    "text": "And I can find it maybe\nright away in this case or maybe not right\naway in this case. The average with that\nplus when the element",
    "start": "1365890",
    "end": "1373480"
  },
  {
    "text": "is the last one in\nthe list and plus when the element is the middle\none in my list, right?",
    "start": "1373480",
    "end": "1381679"
  },
  {
    "text": "So in that way, we're actually\nkind of covering all our bases, kind of best case, worst case,\nmedium case scenarios, right?",
    "start": "1381680",
    "end": "1390590"
  },
  {
    "text": "So each one of these\nthree functions will be run with that in mind.",
    "start": "1390590",
    "end": "1397409"
  },
  {
    "text": "So that's these three functions. So this is my brute force is in. This is my binary.",
    "start": "1397410",
    "end": "1403790"
  },
  {
    "text": "Search Obviously, I'm just\ngoing to type in when I run it.",
    "start": "1403790",
    "end": "1411060"
  },
  {
    "text": "So I'll just show\nyou for one of them, so we're going to uncomment\nthis entire bit here and run it.",
    "start": "1411060",
    "end": "1420760"
  },
  {
    "text": "But you can see here, so instead\nof just running the performance counter and making\none function call,",
    "start": "1420760",
    "end": "1427030"
  },
  {
    "text": "I'm actually going to run\nthree function calls iterated over this little loop\nwhere I'm looking",
    "start": "1427030",
    "end": "1433179"
  },
  {
    "text": "for the element at\nthe zeroth location, the element at the\nhalfway location,",
    "start": "1433180",
    "end": "1439029"
  },
  {
    "text": "and the element at\nthe end of my list. And I'm just averaging\nthose down here,",
    "start": "1439030",
    "end": "1445270"
  },
  {
    "text": "the time it takes\nto find those three. Does that make sense? ",
    "start": "1445270",
    "end": "1452310"
  },
  {
    "text": "All right, so this\nis a lot to look at. Luckily, I'm going to summarize\nit in the next few slides",
    "start": "1452310",
    "end": "1458750"
  },
  {
    "text": "so we don't have to stare\nat that Python screen there.",
    "start": "1458750",
    "end": "1464500"
  },
  {
    "text": "OK, so we had three\nfunctions to run. Let's first look at how each\nof these three functions",
    "start": "1464500",
    "end": "1470019"
  },
  {
    "text": "did individually. And then, we can start\ncomparing them to each other. So the first function\nwe ran was the is in.",
    "start": "1470020",
    "end": "1477160"
  },
  {
    "text": "So remember, this was\nthe brute force one. We're painstakingly going\nthrough each element and asking if it's the\none we're looking for.",
    "start": "1477160",
    "end": "1483000"
  },
  {
    "text": "So no smart way about that, just\nbrute force your way through. We notice that as the\ninput list grows by 10,",
    "start": "1483000",
    "end": "1495790"
  },
  {
    "text": "the time it takes to find\nthe element in the list, whether it's the first one,\nlast one, or in the middle,",
    "start": "1495790",
    "end": "1502180"
  },
  {
    "text": "on average also grows by 10. ",
    "start": "1502180",
    "end": "1511180"
  },
  {
    "text": "All right, next, let's look\nat the built-in function.",
    "start": "1511180",
    "end": "1517320"
  },
  {
    "text": "We'll worry about\nthe binary one later. The built-in function, so\njust using the in operator--",
    "start": "1517320",
    "end": "1523660"
  },
  {
    "text": "and you see this was down here.",
    "start": "1523660",
    "end": "1529580"
  },
  {
    "text": "So this in. So basically, the\nfunction I'm running is purely just asking\nwhether x is in L,",
    "start": "1529580",
    "end": "1535420"
  },
  {
    "text": "and that returns true or false. So I didn't need to make\na function for that. But that built-in in operator\nalso has a very similar trend,",
    "start": "1535420",
    "end": "1546410"
  },
  {
    "text": "right? As the length of my\nlist increases by 10,",
    "start": "1546410",
    "end": "1551490"
  },
  {
    "text": "the time it takes\nfor my program to run is also 10 times as long.",
    "start": "1551490",
    "end": "1556710"
  },
  {
    "text": "I went 0.05 to 0.5 and the\nnext one would be 5 and so on.",
    "start": "1556710",
    "end": "1562799"
  },
  {
    "text": " OK, so those seem to be doing\napproximately the same sort",
    "start": "1562800",
    "end": "1569600"
  },
  {
    "text": "of-- they have the\nsame performance. Now, what about the bisection\nsearch or binary search?",
    "start": "1569600",
    "end": "1578840"
  },
  {
    "text": "Well, this one is\nnot so clear, right? If we look at the\ninput, the input",
    "start": "1578840",
    "end": "1586370"
  },
  {
    "text": "clearly increases by\n10 from here to here. The time increases 9 times 10 to\nthe negative 6 to 1.1 times 10",
    "start": "1586370",
    "end": "1595663"
  },
  {
    "text": "to the negative 5. And so the factor, how\nmany more times it took,",
    "start": "1595663",
    "end": "1601900"
  },
  {
    "text": "is very unclear, right? It's not quite 1.",
    "start": "1601900",
    "end": "1607250"
  },
  {
    "text": "If it was 1, that meant\nit's independent, right? It's constant. It doesn't matter what the\ninput size is, it's always",
    "start": "1607250",
    "end": "1613100"
  },
  {
    "text": "going to give us this amount-- it's always going to run\nin this amount of time. So it's not quite 1. So it's almost\nindependent of size,",
    "start": "1613100",
    "end": "1619910"
  },
  {
    "text": "but it's not linear like the\nother two functions were, right? It's not 10 when the\ninput grows by 10.",
    "start": "1619910",
    "end": "1627610"
  },
  {
    "text": "So we're not quite sure\nwhat this function is. But clearly, it's not\nas bad as the other two,",
    "start": "1627610",
    "end": "1633150"
  },
  {
    "text": "but not as good as\nno relation, OK? ",
    "start": "1633150",
    "end": "1640419"
  },
  {
    "text": "Observation four will\nnow compare the function that we wrote, the is in, this\none here, to the binary search,",
    "start": "1640420",
    "end": "1647350"
  },
  {
    "text": "this one down here. Well, binary search\nwas orders of magnitude",
    "start": "1647350",
    "end": "1654970"
  },
  {
    "text": "faster than brute force, right? Brute force, when\nthe input was--",
    "start": "1654970",
    "end": "1661440"
  },
  {
    "text": "what is this 10\nmillion or 100 million? I'm not sure. When the input was 100 million,\nbrute force took 1.6 seconds.",
    "start": "1661440",
    "end": "1671850"
  },
  {
    "text": "But the bisection search,\nthe binary search, took 0.00001 seconds.",
    "start": "1671850",
    "end": "1678779"
  },
  {
    "text": "So it's not like we\nwent from 1.5 seconds to 1.2 seconds or 0.5 seconds.",
    "start": "1678780",
    "end": "1684480"
  },
  {
    "text": "We were orders of\nmagnitude faster, right? 10 to the negative 5, right?",
    "start": "1684480",
    "end": "1689710"
  },
  {
    "text": "So there's a really\nbig difference between this algorithm, the\none that brute forces its way",
    "start": "1689710",
    "end": "1695520"
  },
  {
    "text": "through, and between this\nalgorithm that does something smart about removing half of\nthe search space with each loop,",
    "start": "1695520",
    "end": "1702990"
  },
  {
    "text": "right? All right, so that's\nimportant to know. And lastly, just\ncomparing pure time",
    "start": "1702990",
    "end": "1710220"
  },
  {
    "text": "that it takes these\nprograms to run. Let's compare the\nfunction that we wrote, the one that loops one at\na time through this list,",
    "start": "1710220",
    "end": "1718020"
  },
  {
    "text": "and the built-in in function. The built-in in function, while\nit's still the same sort of--",
    "start": "1718020",
    "end": "1727360"
  },
  {
    "text": "has the same relationship,\nlinear, with the input size, it seems to do a lot better\nconsistently by about 10 times",
    "start": "1727360",
    "end": "1736960"
  },
  {
    "text": "as fast, right? So when our function\ntook 0.1 seconds,",
    "start": "1736960",
    "end": "1742510"
  },
  {
    "text": "the built-in one\ntook 0.05 seconds. When our function took 1\nsecond, the built in function",
    "start": "1742510",
    "end": "1748630"
  },
  {
    "text": "took 0.5 seconds. So consistently,\nit's just faster to use the built-in in\nfunction than to make our.",
    "start": "1748630",
    "end": "1754510"
  },
  {
    "text": " All right, questions about\nany of these observations?",
    "start": "1754510",
    "end": "1760770"
  },
  {
    "text": " Do they make sense?",
    "start": "1760770",
    "end": "1765845"
  },
  {
    "text": "Are they interesting? [LAUGHS] OK, so what do we see?",
    "start": "1765845",
    "end": "1772190"
  },
  {
    "text": "Just a quick recap of those\nthree functions, right? The first one we saw is linear\nin the size of the argument.",
    "start": "1772190",
    "end": "1779129"
  },
  {
    "text": "So when the input list\nsize increases by 10, the program takes 10\ntimes as long to run. But this other one is\nsomething less than linear,",
    "start": "1779130",
    "end": "1786170"
  },
  {
    "text": "but not constant. So we're not quite\nsure what it is. All right, we'll come back\nto this in a little bit.",
    "start": "1786170",
    "end": "1792470"
  },
  {
    "text": "We'll end up plotting\nsome of these runtimes. So we'll actually be able\nto see the relationship",
    "start": "1792470",
    "end": "1798470"
  },
  {
    "text": "in a few slides. The next thing I actually want\nto do is do one more function.",
    "start": "1798470",
    "end": "1807200"
  },
  {
    "text": "This one is called the diameter. And I'll explain what\nit's doing because it looks a little bit scary.",
    "start": "1807200",
    "end": "1813370"
  },
  {
    "text": "But suppose we actually have\nsome points in a 2D plane,",
    "start": "1813370",
    "end": "1819550"
  },
  {
    "text": "right? So it looks like this. Basically, what this\nfunction is going to do",
    "start": "1819550",
    "end": "1824740"
  },
  {
    "text": "is it's going to figure out the\nbiggest distance between all",
    "start": "1824740",
    "end": "1830470"
  },
  {
    "text": "of these points. So the distance between these\ntwo points is something. The distance between these\ntwo points is something else.",
    "start": "1830470",
    "end": "1838000"
  },
  {
    "text": "Which two points yield\nthe biggest distance? That's what this\nfunction aims to tell us",
    "start": "1838000",
    "end": "1843700"
  },
  {
    "text": "and what that distance is. So the way it works is\nit has nested for loops.",
    "start": "1843700",
    "end": "1850856"
  },
  {
    "text": "So this is different than\nwhat we've seen so far, right? We saw an example of\nthis last lecture. But now, we're seeing\nit in the context",
    "start": "1850857",
    "end": "1856970"
  },
  {
    "text": "of something actually useful. So in this particular\ncase, we're going to create an\ninput list, all right?",
    "start": "1856970",
    "end": "1864500"
  },
  {
    "text": "So again, our input\nlist will just have some dummy values in it.",
    "start": "1864500",
    "end": "1870399"
  },
  {
    "text": "I don't actually care\nwhat these numbers are. I just want to populate a whole\nbunch of points in a 2D plane.",
    "start": "1870400",
    "end": "1876659"
  },
  {
    "text": "So what we're going\nto do is pretty much just iterate from\nnumbers 0 to 10.",
    "start": "1876660",
    "end": "1882290"
  },
  {
    "text": "Sorry, 0 to 9, 0 to 99,\n0 to 999, and so on, just like we did before.",
    "start": "1882290",
    "end": "1887630"
  },
  {
    "text": "And to get us a little\ncoordinate in the 2D plane based on those\nnumbers, I'm just going",
    "start": "1887630",
    "end": "1893920"
  },
  {
    "text": "to take the cosine\nof that number comma the sine of that number. So that together, so like cosine\nof 1 or whatever sine of 1",
    "start": "1893920",
    "end": "1905710"
  },
  {
    "text": "will be this point here, right? Set up as a tuple. And then, this one might\nbe cosine of 5, sine of 5.",
    "start": "1905710",
    "end": "1916010"
  },
  {
    "text": "Something like that. So I'm just making a whole bunch\nof coordinates in a 2D plane ensuring that I\nhave n coordinates.",
    "start": "1916010",
    "end": "1924310"
  },
  {
    "text": "OK, now the loop-- sorry, there's going\nto be two loops.",
    "start": "1924310",
    "end": "1930130"
  },
  {
    "text": "The outer loop will\nbasically take us through each of these elements.",
    "start": "1930130",
    "end": "1937210"
  },
  {
    "text": "I have five in this\nparticular case. And the inner loop will go\nthrough every other element.",
    "start": "1937210",
    "end": "1944500"
  },
  {
    "text": "But notice it starts\nfrom i plus 1. And I'll tell you why that is\ninstead of starting from 0.",
    "start": "1944500",
    "end": "1950180"
  },
  {
    "text": "So let's just walk through. Let's say we start\nout with this element.",
    "start": "1950180",
    "end": "1955590"
  },
  {
    "text": "This little guy is our first\nelement in our outer for loop. So right now, we've grabbed\nthe first element in our outer",
    "start": "1955590",
    "end": "1964100"
  },
  {
    "text": "for loop. And what we're going to do\nis figure out the distance between it and everybody else.",
    "start": "1964100",
    "end": "1970559"
  },
  {
    "text": "So now, we're iterating\nthrough the inner for loop going through each\nelement except for myself.",
    "start": "1970560",
    "end": "1977590"
  },
  {
    "text": "So I'm going to get the distance\nbetween this one and this one. Since it's the first\none, obviously, it's the biggest one.",
    "start": "1977590",
    "end": "1983317"
  },
  {
    "text": "But then, I'm going to get\nthe distance between this one and this one, right? And I'm going to say, are\nyou bigger than this one?",
    "start": "1983317",
    "end": "1990070"
  },
  {
    "text": "It looks like no, so we're\nstill keeping this one as our longest one. Then I'm going to grab\nthe distance between this",
    "start": "1990070",
    "end": "1995330"
  },
  {
    "text": "and this one and\nthis and this one. And as I'm going through,\nthis little if statement here",
    "start": "1995330",
    "end": "2001010"
  },
  {
    "text": "keeps track of the farthest one. So the one that has the\nbiggest magnitude, right?",
    "start": "2001010",
    "end": "2006200"
  },
  {
    "text": "In this case, that's probably\nthe first one we looked at. And after I've gone through each\nelement, each other element,",
    "start": "2006200",
    "end": "2013780"
  },
  {
    "text": "I've concluded my first\niteration in my outer for loop. ",
    "start": "2013780",
    "end": "2020620"
  },
  {
    "text": "So now, the outer for loop\ngoes to the next element in the list.",
    "start": "2020620",
    "end": "2025970"
  },
  {
    "text": "Let's say it's this one. It doesn't actually matter. OK, this one, we'll look at\nthe distance between itself",
    "start": "2025970",
    "end": "2033610"
  },
  {
    "text": "and everybody else\nexcept for the one we already looked at because\nwe already know this distance.",
    "start": "2033610",
    "end": "2038710"
  },
  {
    "text": "We kept track of it already when\nwe iterated through this one. So as I'm going through\nmy outer for loop keeping",
    "start": "2038710",
    "end": "2045170"
  },
  {
    "text": "track of this point\nhere, it figures out the distance between this one,\nthis one, which is suddenly",
    "start": "2045170",
    "end": "2052280"
  },
  {
    "text": "bigger than that\none which we had kept track of, and then,\nthis one right here.",
    "start": "2052280",
    "end": "2057802"
  },
  {
    "text": "All right, good. So now we're still keeping\ntrack of the biggest distance we've seen. It's probably this one here. And I've concluded the second\niteration of my outer for loop.",
    "start": "2057802",
    "end": "2065969"
  },
  {
    "text": "And now I go to\nthe next element. Let's say, it's this one. Doesn't matter again. Now, this one is going to get\nthe distance between itself",
    "start": "2065969",
    "end": "2072780"
  },
  {
    "text": "and everybody else except for\nthe two that we've already seen, this one and\nthis one, right?",
    "start": "2072780",
    "end": "2077879"
  },
  {
    "text": "So that's why our inner\nloop starts at i plus 1. So this one will get the\ndistance between itself",
    "start": "2077880",
    "end": "2083070"
  },
  {
    "text": "and this one all the way back\nthere and this one all the way over here. And then, next iteration\nin the outer for loop",
    "start": "2083070",
    "end": "2090090"
  },
  {
    "text": "takes a look at\nthis one, let's say. And it finds the\ndistance between itself and everybody else. But you know what?",
    "start": "2090090",
    "end": "2095199"
  },
  {
    "text": "There's only one\nleft, that one there. And then, the last\ntime through this one",
    "start": "2095199",
    "end": "2101734"
  },
  {
    "text": "doesn't even get\na chance to find the distance between\nitself and anybody else because everybody else already\nfound the distance between it.",
    "start": "2101735",
    "end": "2110130"
  },
  {
    "text": "And so, in this\nway, we're basically finding all the\npossible pairs of all of these points in this\n2D plane and keeping",
    "start": "2110130",
    "end": "2116550"
  },
  {
    "text": "track of the longest-- of the biggest distance, OK? So in terms of the list-- the input list,\nthe way that looks",
    "start": "2116550",
    "end": "2123100"
  },
  {
    "text": "like, this i plus\n1 business here, the outer loop basically says,\nI'm going to start with you",
    "start": "2123100",
    "end": "2129580"
  },
  {
    "text": "and I'm going to get the\ndifference between you and the element at index\n1, the element at index 2,",
    "start": "2129580",
    "end": "2136030"
  },
  {
    "text": "and the element at index 3. This outer for loop is done.",
    "start": "2136030",
    "end": "2141330"
  },
  {
    "text": "Next, we're going to\nget the difference-- the distance between this one\nand everybody else, right? So obviously, not element\nindex 0 because we already",
    "start": "2141330",
    "end": "2148880"
  },
  {
    "text": "know that distance. So we're going to get the\ndistance between element and index 1 and index 2 and\nindex 3 and then we're done.",
    "start": "2148880",
    "end": "2156510"
  },
  {
    "text": "And then, the last loop-- outer loop gets the\ndistance between element and index 2 and index\n3 and then it's done.",
    "start": "2156510",
    "end": "2164730"
  },
  {
    "text": "So just these two nested\nloops just does all of this",
    "start": "2164730",
    "end": "2170960"
  },
  {
    "text": "until it finds all\nof these pairs. It basically pairs up\neverybody together.",
    "start": "2170960",
    "end": "2178250"
  },
  {
    "text": "OK, so if we run it,\nwhat are we going to see?",
    "start": "2178250",
    "end": "2184030"
  },
  {
    "text": "So my input for this\nparticular function, you'll notice, first of all, is\ngoing to be much, much smaller",
    "start": "2184030",
    "end": "2191560"
  },
  {
    "text": "than the inputs for everything\nwe've done so far, right? Some of the inputs we had seen\nin the past were a million,",
    "start": "2191560",
    "end": "2198100"
  },
  {
    "text": "10 million, 100 million. In this particular\ncase, I'm only going to go up to\n6,000 because it's just",
    "start": "2198100",
    "end": "2204730"
  },
  {
    "text": "going to take way\ntoo long to run if I make it go for any\nmuch-- any longer than that.",
    "start": "2204730",
    "end": "2211660"
  },
  {
    "text": "So what do we see already? We've got 100 points.",
    "start": "2211660",
    "end": "2217110"
  },
  {
    "text": "So hundreds of these, right? Finding the distance--\nfinding the maximum distance",
    "start": "2217110",
    "end": "2222390"
  },
  {
    "text": "between a bunch of these\npairs took about 0.03 seconds. If we doubled that to 200\npoints, it took 0.01 seconds.",
    "start": "2222390",
    "end": "2231570"
  },
  {
    "text": "If we doubled that\nto 400 points, it took 0.05 seconds\nand so on and so on.",
    "start": "2231570",
    "end": "2236859"
  },
  {
    "text": "So just like before, let's\ntake a look at the big numbers to see our trend.",
    "start": "2236860",
    "end": "2242520"
  },
  {
    "text": "So as the numbers increase by\n2, if my input increases by 2,",
    "start": "2242520",
    "end": "2248180"
  },
  {
    "text": "it looks like the\ntime that it takes for me to find out the biggest\ndistance increases by 4.",
    "start": "2248180",
    "end": "2255020"
  },
  {
    "text": "So my input increases by\n2, the time increases by 4. And I'm not going\nto run this, but you",
    "start": "2255020",
    "end": "2260880"
  },
  {
    "text": "can make a new list\non your own and change this to be inputs that are\nmultiples of 10, right?",
    "start": "2260880",
    "end": "2269520"
  },
  {
    "text": "Increasing by 10 each time. And you'll see a\nvery similar pattern where the time it takes\nto run that program will",
    "start": "2269520",
    "end": "2276600"
  },
  {
    "text": "be about 100 times as slow. So the relationship there is an\nn squared kind of relationship.",
    "start": "2276600",
    "end": "2286790"
  },
  {
    "text": "All, right so a few\nobservations here as well. First one I already\nmentioned is this program just takes a lot longer\nto run in general, right?",
    "start": "2286790",
    "end": "2296090"
  },
  {
    "text": "So here, we were\nable with a compound and with finding whether\nan element is in the list",
    "start": "2296090",
    "end": "2301820"
  },
  {
    "text": "and getting the sum of all\nthe elements in the list, we were able to\nrun 100 million-- a list with 100\nmillion elements and it",
    "start": "2301820",
    "end": "2309290"
  },
  {
    "text": "still took about 1\nsomething seconds. Whereas, with this\ndiameter function,",
    "start": "2309290",
    "end": "2314680"
  },
  {
    "text": "we can barely get to 6,000 and\nit's already taking 14 seconds.",
    "start": "2314680",
    "end": "2319880"
  },
  {
    "text": "So just way, way, way slower\nprogram in general, right? And then, the\nrelationship seems to be",
    "start": "2319880",
    "end": "2326650"
  },
  {
    "text": "an n squared kind of\nrelationship relating the input to how long the program takes.",
    "start": "2326650",
    "end": "2332810"
  },
  {
    "text": "So let's actually plot-- well, I already did this. But here are the\nrelationships for these three",
    "start": "2332810",
    "end": "2340180"
  },
  {
    "text": "types of algorithms\nthat we've seen so far. So this is the finding\nthe element in a list.",
    "start": "2340180",
    "end": "2347450"
  },
  {
    "text": "Those three versions--\nsorry, those two versions that we saw and this is\nthe diameter function.",
    "start": "2347450",
    "end": "2353279"
  },
  {
    "text": "So if we plot how long\nit takes the program to run when the input increase--",
    "start": "2353280",
    "end": "2360140"
  },
  {
    "text": "sorry, when the\ninput is this size, we can see that there is\na linear relationship. So the time it takes\nfor the program to run",
    "start": "2360140",
    "end": "2366950"
  },
  {
    "text": "is linear in the input. ",
    "start": "2366950",
    "end": "2373290"
  },
  {
    "text": "The diameter, we'll talk about\nthe binary search in a bit. But the diameter, we,\nagain, notice this",
    "start": "2373290",
    "end": "2379200"
  },
  {
    "text": "just by looking at\nthe pure numbers, but it's a lot easier\nto see it visually when this is on the x-axis,\nthe size of the problem.",
    "start": "2379200",
    "end": "2386440"
  },
  {
    "text": "So how many points we actually\nare finding the diameter between and how long it actually\ntakes the program to run.",
    "start": "2386440",
    "end": "2393210"
  },
  {
    "text": "Again, the relationship\nis quadratic. Now that we plot it, we clearly\nsee the quadratic relationship.",
    "start": "2393210",
    "end": "2399510"
  },
  {
    "text": "And then, this binary\nsearch, we were very unsure of what it was, right? It wasn't quite constant.",
    "start": "2399510",
    "end": "2404840"
  },
  {
    "text": "It definitely wasn't linear. But now that we've plotted\nit, so this is the input size",
    "start": "2404840",
    "end": "2409863"
  },
  {
    "text": "and this is how long it actually\ntakes the program to run, you can see it\ndrastically increases when",
    "start": "2409863",
    "end": "2414950"
  },
  {
    "text": "the input size is very small. But then, it kind\nof asymptotically",
    "start": "2414950",
    "end": "2420230"
  },
  {
    "text": "reaches some sort of value. It's actually a\nlogarithmic relationship.",
    "start": "2420230",
    "end": "2426920"
  },
  {
    "text": "All right, last thing\nI wanted to mention about timing before\nwe move on to counting is just pure running.",
    "start": "2426920",
    "end": "2434390"
  },
  {
    "text": "Just purely running\nthese functions on different computers will\njust give us different values",
    "start": "2434390",
    "end": "2439400"
  },
  {
    "text": "just right off the bat. On this newer-ish\ncomputer, how long",
    "start": "2439400",
    "end": "2445820"
  },
  {
    "text": "did it take to\nrun this compound? Well, what? It took 3 seconds or something,\n1 point something seconds.",
    "start": "2445820",
    "end": "2452000"
  },
  {
    "text": "On an older laptop,\nit took 63 seconds. On an even older desktop,\nit took 126 seconds.",
    "start": "2452000",
    "end": "2460910"
  },
  {
    "text": "You're just purely\ntiming things. The machine you're\nrunning it on is going to make a difference, OK?",
    "start": "2460910",
    "end": "2467670"
  },
  {
    "text": "And then, that's fine, right? It's important to know\nhow long it takes. But if you're just looking at\nthe relationship between input",
    "start": "2467670",
    "end": "2476970"
  },
  {
    "text": "and how long the program\ntakes to run, that's the same. So it doesn't matter what\nmachine you're running it on.",
    "start": "2476970",
    "end": "2482550"
  },
  {
    "text": "When you increase\nthe input by 10, the program will\ntake 10 times as long to run no matter\nwhether you run it",
    "start": "2482550",
    "end": "2488430"
  },
  {
    "text": "on a fast laptop, old laptop,\nor a super old desktop. ",
    "start": "2488430",
    "end": "2493930"
  },
  {
    "text": "So just timing a program\nis really important, right? You'd like to know whether\nthe program you wrote",
    "start": "2493930",
    "end": "2500290"
  },
  {
    "text": "you're going to have\nto wait a month for it to finish or a couple of\nminutes for it to finish. That's an important\nthing to know.",
    "start": "2500290",
    "end": "2506830"
  },
  {
    "text": "But what we're going to get at\ntowards the end of this lecture is something that's\ncomplimentary,",
    "start": "2506830",
    "end": "2511869"
  },
  {
    "text": "and that's this idea of\nasymptotic complexity. So kind of mathematically\nsaying, you know what?",
    "start": "2511870",
    "end": "2517330"
  },
  {
    "text": "This program is not going to\nbe that bad to run, right? You're not going to have\nto wait for it for months",
    "start": "2517330",
    "end": "2522490"
  },
  {
    "text": "to run without actually\nrunning it, of course. So you'd be able to glance\nat a program and say, this one is reasonable to run.",
    "start": "2522490",
    "end": "2529160"
  },
  {
    "text": "And so we're going\nto do that in terms of this idea of order\nof growth, which we'll get to-- at in a little bit.",
    "start": "2529160",
    "end": "2536820"
  },
  {
    "text": "OK, any questions on timing\nbefore we get to counting? Yeah. AUDIENCE: Should we assume\nthat all built-in functions",
    "start": "2536820",
    "end": "2544920"
  },
  {
    "text": "in Python are the optimal\nin terms of running time? ANA BELL: Yes. Can you assume that\nall built in functions",
    "start": "2544920",
    "end": "2551029"
  },
  {
    "text": "are optimal in terms\nof running time? Yes. Certainly better than\nwhen we write them.",
    "start": "2551030",
    "end": "2556760"
  },
  {
    "text": " Yes, in Python. And then, of course,\nin other languages,",
    "start": "2556760",
    "end": "2563210"
  },
  {
    "text": "they maybe take advantage\nof other speed ups as well like putting things\nin memory efficiently.",
    "start": "2563210",
    "end": "2568850"
  },
  {
    "text": "But yeah, generally,\nit's better to run something that's already been\nmade than to make it yourself. Yeah.",
    "start": "2568850",
    "end": "2574270"
  },
  {
    "text": " OK, so now, what\nwe're going to do",
    "start": "2574270",
    "end": "2579872"
  },
  {
    "text": "is we're going to\ncount operations, just like we did last lecture. Clearly, timing is\nnice, but it doesn't",
    "start": "2579872",
    "end": "2585860"
  },
  {
    "text": "give us a nice relationship\nbesides us spotting it, right?",
    "start": "2585860",
    "end": "2591620"
  },
  {
    "text": "There's no formula. There's no relationship that\nrelates the input to how long it takes the program\nto run, right?",
    "start": "2591620",
    "end": "2597770"
  },
  {
    "text": "Counting will get us a\nlittle bit closer to that, and we saw that last lecture. Let me remind you\nthe idea of counting.",
    "start": "2597770",
    "end": "2604230"
  },
  {
    "text": "So the idea of\ncounting is that we're going to take a bunch\nof these operations,",
    "start": "2604230",
    "end": "2611170"
  },
  {
    "text": "like mathematical operations,\ncomparisons, indexing into something, assigning\na value to a variable,",
    "start": "2611170",
    "end": "2619420"
  },
  {
    "text": "all of these things, right? When we run them,\nyes, they might run for different amounts of time.",
    "start": "2619420",
    "end": "2625480"
  },
  {
    "text": "1 times 10 negative 9\nversus times 10 negative 9, something like that.",
    "start": "2625480",
    "end": "2631800"
  },
  {
    "text": "That's not a very\nbig difference. And so what we're\ngoing to say is that every one of\nthese operations",
    "start": "2631800",
    "end": "2637480"
  },
  {
    "text": "will consider to\nbe constant, right? They will take one unit of time.",
    "start": "2637480",
    "end": "2644170"
  },
  {
    "text": "So if we say that,\nwe can actually come up with a relationship\nthat tells us according to--",
    "start": "2644170",
    "end": "2652200"
  },
  {
    "text": "that relates the input to how\nmany operations this program",
    "start": "2652200",
    "end": "2658200"
  },
  {
    "text": "will run. So here in the convert to\nkilometers, what do we have?",
    "start": "2658200",
    "end": "2664850"
  },
  {
    "text": "We have one multiplication. And just for the heck of\nit, this lecture, let's say,",
    "start": "2664850",
    "end": "2670589"
  },
  {
    "text": "the return also counts\nas an operation. So in this convert to\nkilometer function,",
    "start": "2670590",
    "end": "2675850"
  },
  {
    "text": "we have two operations. Notice that it's not really\nrelated to the input at all.",
    "start": "2675850",
    "end": "2682270"
  },
  {
    "text": "So the amount of operations\nthat this program takes to run is always two.",
    "start": "2682270",
    "end": "2687950"
  },
  {
    "text": "It matches what our\ntiming said, right? It basically didn't\nmatter what the input was. It always took approximately\nthe same amount of time to run.",
    "start": "2687950",
    "end": "2697450"
  },
  {
    "text": "The sum of function. So it takes an input\nlist and it gets the sum of all the elements.",
    "start": "2697450",
    "end": "2704410"
  },
  {
    "text": "This one will do--\nwe'll have one operation for doing this assignment. It'll have one operation for\ngrabbing an element in my list",
    "start": "2704410",
    "end": "2715180"
  },
  {
    "text": "L and assigning it to i. It'll have two operations\nfor this total plus equals i.",
    "start": "2715180",
    "end": "2722480"
  },
  {
    "text": "Remember, total plus i\non the right hand side is one operation. And total equals that\nis my second operation,",
    "start": "2722480",
    "end": "2729960"
  },
  {
    "text": "so that's two operations. And then, let's not\nforget for loop. That's kind of the important\npart of this function.",
    "start": "2729960",
    "end": "2737250"
  },
  {
    "text": "How many times will\nthese three operations repeat this 1 plus these 2? Well, it's going to repeat\nhowever many elements",
    "start": "2737250",
    "end": "2744950"
  },
  {
    "text": "I have in L. So length L times. And then, again, let's\nsay we count the return.",
    "start": "2744950",
    "end": "2752030"
  },
  {
    "text": "The return will also\nbe one operation. So the total number\nof operations for the sum of function will be\n1 for the total equals 0 plus",
    "start": "2752030",
    "end": "2760670"
  },
  {
    "text": "length of L times 3, because\nthere's three operations being done for each length of L, plus\nanother one for the return.",
    "start": "2760670",
    "end": "2766590"
  },
  {
    "text": "So that's going to\nbe 3 length L plus 2. That's a nice\nlittle formula that",
    "start": "2766590",
    "end": "2773170"
  },
  {
    "text": "relates how many\nunits of time we'll have to wait depending\non the size of the list.",
    "start": "2773170",
    "end": "2781480"
  },
  {
    "text": "That's pretty cool. So the way that\nwe're going to count the number of\noperations-- again,",
    "start": "2781480",
    "end": "2786780"
  },
  {
    "text": "I'm going to do it slightly\ndifferently in the last lecture just to show you that there\nis another way to do it. So this is our function is in.",
    "start": "2786780",
    "end": "2793680"
  },
  {
    "text": "It's going to count how\nmany operations we have. And I'm going to use something\ncalled a global variable.",
    "start": "2793680",
    "end": "2799227"
  },
  {
    "text": "I'll show you, again, the\ndifference between them. So it's just these three\nlines that I added. And you should never\never use global variables",
    "start": "2799227",
    "end": "2807470"
  },
  {
    "text": "in your programs except\nin this situation. The idea of global variables is\nthat you can define variables",
    "start": "2807470",
    "end": "2814640"
  },
  {
    "text": "just in the main program\noutside of any functions. And you can access those\nvariables within some function",
    "start": "2814640",
    "end": "2823310"
  },
  {
    "text": "purely by saying, if we\ndefine count out here, before this function definition\ncount equals 0 or whatever.",
    "start": "2823310",
    "end": "2829700"
  },
  {
    "text": "Inside of any\nfunction, we can say, hey Python, I would like\nto access this variable",
    "start": "2829700",
    "end": "2835520"
  },
  {
    "text": "that I defined outside\nof this function. You say that-- you tell\nPython using global and then",
    "start": "2835520",
    "end": "2841369"
  },
  {
    "text": "the name of that variable. And Python will grab that\nvariable that's basically quote unquote \"shared\"\nacross the entire program",
    "start": "2841370",
    "end": "2849349"
  },
  {
    "text": "and modify that variable. So in essence, we're\nbasically saying,",
    "start": "2849350",
    "end": "2855170"
  },
  {
    "text": "this is now a shared variable. If I modify it within this\ncounter, within this function,",
    "start": "2855170",
    "end": "2860610"
  },
  {
    "text": "it'll be, obviously,\nmodified for everything else. It's very tempting to\nuse global variables",
    "start": "2860610",
    "end": "2867360"
  },
  {
    "text": "because all the variables\nyou could ever want to create are going to be accessible\nby everybody, right?",
    "start": "2867360",
    "end": "2873180"
  },
  {
    "text": "No need to pass in parameters. No need to do-- but it's\nvery, very bad programming. So we won't ever do it except\nin this particular case",
    "start": "2873180",
    "end": "2879990"
  },
  {
    "text": "because we'd like to\nkeep a counter of things that are happening or for\ndebugging purposes and things like that.",
    "start": "2879990",
    "end": "2886240"
  },
  {
    "text": "So the count variable\nwill keep track of--",
    "start": "2886240",
    "end": "2891330"
  },
  {
    "text": "it'll just increment\nin key places where we have these constant\nunit of times happening.",
    "start": "2891330",
    "end": "2898060"
  },
  {
    "text": "So I've got count\nplus equals 1 here because I've got\nmy return value.",
    "start": "2898060",
    "end": "2903480"
  },
  {
    "text": "I've got count\nplus equals 2 here because I grab an element from\nL and I do the equality check",
    "start": "2903480",
    "end": "2909660"
  },
  {
    "text": "here and then that's it, OK? ",
    "start": "2909660",
    "end": "2917280"
  },
  {
    "text": "So if I run that,\nit's down here. ",
    "start": "2917280",
    "end": "2926299"
  },
  {
    "text": "What are we going to see? Well, I didn't actually\ndo how much more it ran,",
    "start": "2926300",
    "end": "2933710"
  },
  {
    "text": "but we can see the\nrelationship, right? We go 9 to 37 to 307 to\n3007 to 30,007 and so on.",
    "start": "2933710",
    "end": "2940928"
  },
  {
    "text": "So again, the same\nrelationship where we increase the input by 10. The number of operations\nwe do is 10 times as more,",
    "start": "2940928",
    "end": "2947870"
  },
  {
    "text": "exactly like the formula\nsaid it would be. What about the binary search?",
    "start": "2947870",
    "end": "2953650"
  },
  {
    "text": "So again, we're going to\nuse this global variable and we're going to have\nthe counter keep track of all of these operations.",
    "start": "2953650",
    "end": "2960010"
  },
  {
    "text": "So this count incrementing\nby 3 accounts for setting the low to zero, setting\nthe height of this thing",
    "start": "2960010",
    "end": "2966900"
  },
  {
    "text": "and grabbing this\nactual value of length. Incrementing the\ncount within this",
    "start": "2966900",
    "end": "2972760"
  },
  {
    "text": "while loop will keep\ntrack of this subtraction as one operation and the\ntest that it's greater than 1",
    "start": "2972760",
    "end": "2979690"
  },
  {
    "text": "is another operation. Counting increasing by\n3 here accounts for high",
    "start": "2979690",
    "end": "2985450"
  },
  {
    "text": "plus low, the integer division,\nand assigning that value back to mid.",
    "start": "2985450",
    "end": "2991840"
  },
  {
    "text": "Count plus 3 here\naccounts for indexing into this L, the less\nthan or equal check.",
    "start": "2991840",
    "end": "2998870"
  },
  {
    "text": "And then, either doing\nthis reassignment of low or this reassignment of high.",
    "start": "2998870",
    "end": "3004930"
  },
  {
    "text": "So that's three operations. And then, lastly,\ncount increases by 3 once more because I've\ngot these operations here.",
    "start": "3004930",
    "end": "3011390"
  },
  {
    "text": "So indexing into low,\nchecking for equality, and then doing the return.",
    "start": "3011390",
    "end": "3018580"
  },
  {
    "text": "So the actual\nnumber of operations will be kept track of in--",
    "start": "3018580",
    "end": "3023640"
  },
  {
    "text": "by the counter. So all we're doing is just kind\nof reporting how many times-- how many operations we've done.",
    "start": "3023640",
    "end": "3030220"
  },
  {
    "text": "So as we increase the input\nby 10, just like with timing, we can't quite tell what\nthe relationship is, right?",
    "start": "3030220",
    "end": "3039150"
  },
  {
    "text": "Again, it's like 1 point\nsomething right with each. ",
    "start": "3039150",
    "end": "3046680"
  },
  {
    "text": "All right, so these\nare the results. So the observation\none, as I mentioned,",
    "start": "3046680",
    "end": "3052320"
  },
  {
    "text": "when we increase the input\nby 10, this brute force-- I erased it, but the brute\nforce is in function also--",
    "start": "3052320",
    "end": "3058319"
  },
  {
    "text": "does 10 times as\nmany operations. The binary search, again, we\ndon't know what rate it is at,",
    "start": "3058320",
    "end": "3064650"
  },
  {
    "text": "but we can plot them. So here I have the\nplots, just like when I plotted the input size, versus\nhow long the program actually",
    "start": "3064650",
    "end": "3073230"
  },
  {
    "text": "took to run. I'm now plotting the input\nsize versus, actually, just the number of\noperations being done.",
    "start": "3073230",
    "end": "3080170"
  },
  {
    "text": "So the is in function,\nthat brute force way of finding whether an\nelement is in the list,",
    "start": "3080170",
    "end": "3085410"
  },
  {
    "text": "grows linearly. No surprise there. And how lucky for us? The binary search matches--",
    "start": "3085410",
    "end": "3093300"
  },
  {
    "text": "the graph matches the one\nthat we had for timing, right? So as I increase my size in\nthe binary search method,",
    "start": "3093300",
    "end": "3100950"
  },
  {
    "text": "the number of operations that\nI do is logarithmic in time, just like we saw\nin the actual time.",
    "start": "3100950",
    "end": "3109349"
  },
  {
    "text": "OK, so timing and counting\nare really nice, right?",
    "start": "3109350",
    "end": "3115470"
  },
  {
    "text": "Timing gives us pure\nnumber of seconds or months or whatever we need to wait\nfor this program to finish.",
    "start": "3115470",
    "end": "3122430"
  },
  {
    "text": "But counting gives us\na nice little formula that relates the input to\nthe number of operations",
    "start": "3122430",
    "end": "3130020"
  },
  {
    "text": "that you have to do. You might have noticed-- I briefly touched\nupon this-- that throughout this entire\nlecture and last lecture,",
    "start": "3130020",
    "end": "3137320"
  },
  {
    "text": "we basically just saw\nsomething like three different algorithms, right? We saw something\nthat's constant,",
    "start": "3137320",
    "end": "3143250"
  },
  {
    "text": "something that's linear,\nsomething that's quadratic, and something that's\nbinary, or logarithmic,",
    "start": "3143250",
    "end": "3149820"
  },
  {
    "text": "in this particular case. So that's four\ndifferent algorithms. But we saw way more\nfunctions run, right?",
    "start": "3149820",
    "end": "3157109"
  },
  {
    "text": "So what we'd like\nto do is evaluate the algorithms, not the\ndifferent implementations,",
    "start": "3157110",
    "end": "3162839"
  },
  {
    "text": "right? And what we'd like to do is\nevaluate these algorithms as the input gets\nreally, really big.",
    "start": "3162840",
    "end": "3169300"
  },
  {
    "text": "So what we're going\nto do is figure out a relationship between\nthe program's runtime",
    "start": "3169300",
    "end": "3176650"
  },
  {
    "text": "and the input. But what we're\ngoing to do is focus on the biggest terms that\ncontribute to the program's",
    "start": "3176650",
    "end": "3184330"
  },
  {
    "text": "runtime, right? So we saw these examples\nlast time, right? This my sum, which\nbasically summed",
    "start": "3184330",
    "end": "3191250"
  },
  {
    "text": "all the elements-- sorry,\nall the numbers from 0 to x. And the silly\nsquare function that",
    "start": "3191250",
    "end": "3197010"
  },
  {
    "text": "had nested loops, kind of\nlike this diameter one, right? We were able to say something\nlike when the input increases",
    "start": "3197010",
    "end": "3204750"
  },
  {
    "text": "by 10, the program is 10\ntimes as long to run, right? So the efficiency of that\nprogram was on the order of x.",
    "start": "3204750",
    "end": "3211980"
  },
  {
    "text": "When the input increased\nby x, the program took x times as long to run. The square had a similar--",
    "start": "3211980",
    "end": "3218730"
  },
  {
    "text": "we could have said it\nin a similar way, right? When the input increases\nby x, the program",
    "start": "3218730",
    "end": "3223859"
  },
  {
    "text": "took x squared as long to run. So I don't actually\ncare about all",
    "start": "3223860",
    "end": "3230190"
  },
  {
    "text": "of these differences\nin the exact timings. 1 times 10 negative 6. 1.3 times 10 to the negative 6.",
    "start": "3230190",
    "end": "3236280"
  },
  {
    "text": "I don't care. What I do care is\nthe order of growth. How does the program run in\nrelation to the input, OK?",
    "start": "3236280",
    "end": "3245530"
  },
  {
    "text": "And I care about that when the\ninput is really, really big. So what we're going to do is\nexpress the program's runtime",
    "start": "3245530",
    "end": "3253150"
  },
  {
    "text": "in an order of not exact\nkind of relationship. So while counting\nwas really nice,",
    "start": "3253150",
    "end": "3260590"
  },
  {
    "text": "it told us a nice\nrelationship between the input and the number of operations.",
    "start": "3260590",
    "end": "3267640"
  },
  {
    "text": "When the input is really,\nreally big, like 3x plus 4, when x is really,\nreally big, I don't",
    "start": "3267640",
    "end": "3274900"
  },
  {
    "text": "care that the number of\noperations is 3x plus 4. Because when x is really,\nreally big, that plus 4",
    "start": "3274900",
    "end": "3283270"
  },
  {
    "text": "might as well be plus 0. And that 3x is basically\nlike x when the input is",
    "start": "3283270",
    "end": "3289060"
  },
  {
    "text": "really, really big. So that's what we're going\nto try to do, all right?",
    "start": "3289060",
    "end": "3295039"
  },
  {
    "text": "Now, before we do\nthat, we need to decide what to measure, right? Because when we write\nfunctions, we're",
    "start": "3295040",
    "end": "3300650"
  },
  {
    "text": "going to have functions that\nhave a whole bunch of inputs, potentially, right? So the input could\nbe an integer,",
    "start": "3300650",
    "end": "3306950"
  },
  {
    "text": "like in convert to kilometers. It could be a list,\nin which case, we would be interested in maybe\nthe length of the list.",
    "start": "3306950",
    "end": "3313680"
  },
  {
    "text": "And if you have many parameters,\nyou'd have to decide, right? What is the parameter\nthat contributes",
    "start": "3313680",
    "end": "3320390"
  },
  {
    "text": "to the growth of this function? So here's an example.",
    "start": "3320390",
    "end": "3326690"
  },
  {
    "text": "This is our is in function. It looks for an element\ne in list L, right?",
    "start": "3326690",
    "end": "3332150"
  },
  {
    "text": "So there's two\nparameters to this one. We can ask, does the\nprogram take longer",
    "start": "3332150",
    "end": "3338099"
  },
  {
    "text": "to run as e increases? It's one of the parameters. Let's see what happens\nas we make e bigger.",
    "start": "3338100",
    "end": "3343170"
  },
  {
    "text": "So we can look at\na little example. If we find out whether 0 is in\nthis list containing 1, 2, 3,",
    "start": "3343170",
    "end": "3349290"
  },
  {
    "text": "or whether 1,000 is\nin the list 1, 2, 3, does the program\ntake longer to run?",
    "start": "3349290",
    "end": "3354690"
  },
  {
    "text": "No, exactly. So e is not really relevant in\nmy runtime calculation here.",
    "start": "3354690",
    "end": "3363300"
  },
  {
    "text": "Well, let's consider L now. When we say L is\ngoing to change,",
    "start": "3363300",
    "end": "3369650"
  },
  {
    "text": "it could change in\ntwo ways, right? The elements in L could have\ndifferent values or the list",
    "start": "3369650",
    "end": "3378200"
  },
  {
    "text": "length itself\ncould be different. So in this particular\nfunction, let's say",
    "start": "3378200",
    "end": "3383420"
  },
  {
    "text": "that the elements in L are small\nnumbers versus big numbers, OK?",
    "start": "3383420",
    "end": "3388700"
  },
  {
    "text": "That's certainly something\nthat could happen. And certainly, with\nsome functions, that's going to\nmake a difference.",
    "start": "3388700",
    "end": "3394109"
  },
  {
    "text": "So let's say, in this particular\nfunction, if the elements in L are big versus\nsmall, is it going",
    "start": "3394110",
    "end": "3400640"
  },
  {
    "text": "to make an impact on my runtime? Well, here's a little example. Let's say I'm looking\nfor the number 0",
    "start": "3400640",
    "end": "3405920"
  },
  {
    "text": "inside a list with 1,\n2, 3 and the number 0 inside a list with\n1,000, 2,000, and 3,000.",
    "start": "3405920",
    "end": "3411670"
  },
  {
    "text": "Is that going to\nmake a difference? No, right? So the size of the elements\nthemselves don't really matter.",
    "start": "3411670",
    "end": "3420619"
  },
  {
    "text": "And one last thing\nto ask ourselves is, what about the\nlength of the list? So if L has different\nlengths, will this",
    "start": "3420620",
    "end": "3427190"
  },
  {
    "text": "make a difference\nin our runtime? So if I'm looking for zero\nin a list with three elements",
    "start": "3427190",
    "end": "3432320"
  },
  {
    "text": "or 0 in a list with 10 elements\nwhere clearly that 0 is nowhere to be found, is that\nlinked list that's",
    "start": "3432320",
    "end": "3438110"
  },
  {
    "text": "going to have a difference? Yeah, in this case, it will. Exactly. So here, in this particular\nfunction, the input,",
    "start": "3438110",
    "end": "3444600"
  },
  {
    "text": "I'd be interested in\nreporting the runtime",
    "start": "3444600",
    "end": "3450080"
  },
  {
    "text": "from is the length of the list. Not the elements in\nthe list, not e itself,",
    "start": "3450080",
    "end": "3455839"
  },
  {
    "text": "but the length of the list, OK? So the last thing\nthat I'll mention",
    "start": "3455840",
    "end": "3461640"
  },
  {
    "text": "is, for this\nparticular class, we're going to talk about the\nworst case scenario. So you might have noticed in\nthis previous example here,",
    "start": "3461640",
    "end": "3468630"
  },
  {
    "text": "I always looked for an element\nthat wasn't even in the list. So when you're faced with a\nfunction, you ask yourself,",
    "start": "3468630",
    "end": "3476160"
  },
  {
    "text": "for this particular\nclass at least, what is the worst case scenario? And finding out whether\na function is in a list,",
    "start": "3476160",
    "end": "3482970"
  },
  {
    "text": "the worst case scenario\nfor us is, if it's not in the list at all, right?",
    "start": "3482970",
    "end": "3488240"
  },
  {
    "text": "So that's another\naspect of runtime that we don't actually--\nwe won't talk about.",
    "start": "3488240",
    "end": "3495080"
  },
  {
    "text": "Because for us, we're always\ninterested in the worst case. But there are certain\nanalyzes where",
    "start": "3495080",
    "end": "3500081"
  },
  {
    "text": "you could look at the\nbest case scenario, which is, well, the element is the\nfirst one in the list, right? In that case, you're\nalways going to find it",
    "start": "3500082",
    "end": "3506390"
  },
  {
    "text": "right away, so it's constant. Or an average case\nscenario, which is kind of what people do\nin the real world, right?",
    "start": "3506390",
    "end": "3512625"
  },
  {
    "text": "You're not always\nencountering the worst case. But for us, we're going to look\nat the worst case scenario.",
    "start": "3512625",
    "end": "3518059"
  },
  {
    "text": "So our goal is going to be to\ndescribe how the runtime grows as the size of the input\ngrows in a really general way.",
    "start": "3518060",
    "end": "3524750"
  },
  {
    "text": "So we're not going to be\ninterested in figuring out the exact number of operations. No 3x plus 2 kind of deal here.",
    "start": "3524750",
    "end": "3532160"
  },
  {
    "text": "We're just going to focus\non terms that are really-- that grow the fastest. We're going to\neliminate any sort",
    "start": "3532160",
    "end": "3538000"
  },
  {
    "text": "of additive,\nmultiplicative constants, and things like that. So we're just going\nto focus on terms",
    "start": "3538000",
    "end": "3543369"
  },
  {
    "text": "that grow the fastest\nand that will give us our order of growth. So the way we're going to\ndenote the order of growth",
    "start": "3543370",
    "end": "3550120"
  },
  {
    "text": "is using this notation\ncalled big O and big theta. OK, now, warning, we're going to\nhave some math coming our way.",
    "start": "3550120",
    "end": "3560940"
  },
  {
    "text": "It's going to be like three\nslides of just pure math, OK? You can sit back. You won't need to know it.",
    "start": "3560940",
    "end": "3567651"
  },
  {
    "text": "You won't need to\nknow the details. But it will motivate\nus to give us the idea about this\nasymptotic order of growth.",
    "start": "3567652",
    "end": "3576440"
  },
  {
    "text": "All right, so this is the\nmathematical definition of big O. So what we\nwould like to do--",
    "start": "3576440",
    "end": "3583250"
  },
  {
    "text": "there will be a\ndrawing, don't worry. So what we would like to\ndo is figure out an upper",
    "start": "3583250",
    "end": "3588559"
  },
  {
    "text": "bound for our function. So the function\nmight look like this. And I know this is just an f,\nbut we relate this to our class",
    "start": "3588560",
    "end": "3597950"
  },
  {
    "text": "by saying, you know what? If we did the order of\ncalculation-- sorry, the number of operations analysis\nfor a function,",
    "start": "3597950",
    "end": "3605420"
  },
  {
    "text": "we could basically come up with\nsomething like this, right? We came up with 3x plus 2. We could come up with\n3x squared plus 20x",
    "start": "3605420",
    "end": "3612440"
  },
  {
    "text": "plus 1 for some random\nfunction that we wrote, right? So that we consider\nthe function.",
    "start": "3612440",
    "end": "3619759"
  },
  {
    "text": "Now, the big O is going\nto be the upper bound on this function. So if I plot this\nfunction in my xy axis,",
    "start": "3619760",
    "end": "3628570"
  },
  {
    "text": "this is what it looks like. The big O will be\nsome other function",
    "start": "3628570",
    "end": "3634220"
  },
  {
    "text": "that's going to upper bound\nthis one, the blue one, OK? And it's going to upper bound\nit for all values beyond some x.",
    "start": "3634220",
    "end": "3643970"
  },
  {
    "text": "So for all values\nbeyond some x-- some number on the x-axis,\nsome crossover point,",
    "start": "3643970",
    "end": "3650660"
  },
  {
    "text": "this big O of g-- this g will always\nbe bigger than my f.",
    "start": "3650660",
    "end": "3656089"
  },
  {
    "text": "That's the idea here. So clearly, x is not going\nto upper bound it, right?",
    "start": "3656090",
    "end": "3661250"
  },
  {
    "text": "Because after this\ncrossover point, x will be below my function no\nmatter how big of a constant",
    "start": "3661250",
    "end": "3668750"
  },
  {
    "text": "I tack onto that x. I could have 1,000x. That's still not going to upper\nbound my little blue line here.",
    "start": "3668750",
    "end": "3676383"
  },
  {
    "text": "So what we're going\nto do is we're going to increase the\nexponential there. So let's take x squared.",
    "start": "3676383",
    "end": "3681860"
  },
  {
    "text": "Well, x squared\nis getting closer. It looks like they're\nboth quadratics. But this orange line is\nnot above the blue line",
    "start": "3681860",
    "end": "3690849"
  },
  {
    "text": "for some crossover 0.2. 2x, getting closer,\n3x, getting closer,",
    "start": "3690850",
    "end": "3698740"
  },
  {
    "text": "4x is an upper bound\non my g because",
    "start": "3698740",
    "end": "3706300"
  },
  {
    "text": "after this little crossover\npoint here at about 20, my orange line, the\ng, will be always",
    "start": "3706300",
    "end": "3714910"
  },
  {
    "text": "above my blue line, my f. So far so good? Just visually speaking.",
    "start": "3714910",
    "end": "3720400"
  },
  {
    "text": "Yeah. AUDIENCE: The orange one follow\nit there or does that matter? ANA BELL: Yeah, the\norange one is below it.",
    "start": "3720400",
    "end": "3727110"
  },
  {
    "text": "That's totally fine. Because what we're\ninterested in is the behavior when the input is really big.",
    "start": "3727110",
    "end": "3732480"
  },
  {
    "text": "So that's why I don't care\nabout weird stuff happening down there. All I care about is\nwhen my x is super big.",
    "start": "3732480",
    "end": "3739720"
  },
  {
    "text": "OK, so now, I've found this g. So I can say that\nafter this point, 20,",
    "start": "3739720",
    "end": "3747430"
  },
  {
    "text": "my orange line will\nalways be above my blue. So I can say that\nmy f is big O of g--",
    "start": "3747430",
    "end": "3755380"
  },
  {
    "text": "is big O of x squared, OK? Because I don't care about\nthis for so much because it's",
    "start": "3755380",
    "end": "3761950"
  },
  {
    "text": "just a multiplicative constant. Because this 4x\nis always greater",
    "start": "3761950",
    "end": "3768370"
  },
  {
    "text": "than my function for all x\ngreater than this crossover point here. ",
    "start": "3768370",
    "end": "3776200"
  },
  {
    "text": "That's it. That's the definition, right? So the g here is\nbasically this function",
    "start": "3776200",
    "end": "3782990"
  },
  {
    "text": "without the multiplicative\nconstant in front of it. OK, so I say 3x squared plus 20x\nplus 1 is big O of x squared.",
    "start": "3782990",
    "end": "3792380"
  },
  {
    "text": "So generally speaking--\nthat was just an example. Generally speaking, the big O is\nan upper bound on my function,",
    "start": "3792380",
    "end": "3799910"
  },
  {
    "text": "OK? And this is now just using\nvariables like constants and things like that.",
    "start": "3799910",
    "end": "3805119"
  },
  {
    "text": "But it's exactly\nthe same situation that we had from before, OK? So I'm going to try to map the\nblue to the blue and the orange",
    "start": "3805120",
    "end": "3811589"
  },
  {
    "text": "to the orange and the\npurple to the purple to help you match up what we\nsaw on the previous slide.",
    "start": "3811590",
    "end": "3817220"
  },
  {
    "text": "So basically, we say\nthat our function f is big O of this orange g if\nwe can find some blue constant",
    "start": "3817220",
    "end": "3826660"
  },
  {
    "text": "where this constant\nwas this 4 here where that constant\nmultiplied by g x squared",
    "start": "3826660",
    "end": "3834339"
  },
  {
    "text": "is greater than my\nfunction for all values beyond that\ncrossover point, right?",
    "start": "3834340",
    "end": "3841210"
  },
  {
    "text": "So I found my 4 because 4x\nsquared is always greater than my function beyond 21.",
    "start": "3841210",
    "end": "3846505"
  },
  {
    "text": " That's what we saw\nin the picture.",
    "start": "3846505",
    "end": "3851550"
  },
  {
    "text": "So then, we can say\nthat my function f is big O of g of x\nwhere that g is x squared,",
    "start": "3851550",
    "end": "3858970"
  },
  {
    "text": "which is matched up, all right? So in terms of the\npicture here, this",
    "start": "3858970",
    "end": "3865400"
  },
  {
    "text": "is kind of a little\nzoom in of what happens. Anything can happen down here. But beyond the\ncrossover point, which",
    "start": "3865400",
    "end": "3871069"
  },
  {
    "text": "is here in the big picture,\nthat crossover point-- beyond that crossover\npoint, my orange",
    "start": "3871070",
    "end": "3877460"
  },
  {
    "text": "is always greater than my blue. OK, so what does this mean? We're going to talk about\nthis in a few slides.",
    "start": "3877460",
    "end": "3884060"
  },
  {
    "text": "But you might have\nthought about this. I can actually pick any function\nthat grows faster than--",
    "start": "3884060",
    "end": "3891070"
  },
  {
    "text": "what is this? 3x squared, right? I can pick x factorial.",
    "start": "3891070",
    "end": "3896530"
  },
  {
    "text": "X factorial grows super fast. Or 2 to the x. That also grows super fast.",
    "start": "3896530",
    "end": "3901990"
  },
  {
    "text": "All of those functions that grow\nway faster than mine are also upper bounds on this\nfunction, right?",
    "start": "3901990",
    "end": "3911050"
  },
  {
    "text": "OK, so that's big O.\nIt's just an upper bound. Then what is theta?",
    "start": "3911050",
    "end": "3918780"
  },
  {
    "text": "For the reason I\njust stated, I said x squared-- or\nsorry, x factorial,",
    "start": "3918780",
    "end": "3924060"
  },
  {
    "text": "2 to the x, all\nof these functions that grow much faster than my\nfunction are all upper bounds.",
    "start": "3924060",
    "end": "3930210"
  },
  {
    "text": "And that's not really\nhelpful for us when we say, oh, this function is big\nO of whatever, right?",
    "start": "3930210",
    "end": "3935411"
  },
  {
    "text": "Because you can\njust pick something that's ludicrously fast--\nthat grows ludicrously fast",
    "start": "3935412",
    "end": "3940560"
  },
  {
    "text": "and say that has no meaning. So instead, what\nwe usually report is the theta, which is actually\nan upper bound and a lower",
    "start": "3940560",
    "end": "3949349"
  },
  {
    "text": "bound for our\nfunction, all right? So using the exact\nsame reasoning, we're going to find\nsome constant tacked",
    "start": "3949350",
    "end": "3957040"
  },
  {
    "text": "on to that g of x such\nthat that function grows--",
    "start": "3957040",
    "end": "3962340"
  },
  {
    "text": "is always underneath\nour function, OK? So again, I'll put\nup a lot of math.",
    "start": "3962340",
    "end": "3968859"
  },
  {
    "text": "But basically, these\nfirst two lines here, this one here there\nexists, blah, blah, blah, blah, blah, that first here, this\nis the big O definition.",
    "start": "3968860",
    "end": "3977180"
  },
  {
    "text": "So we've already\nknow what that means. All we're going to do is tack\non another condition, which",
    "start": "3977180",
    "end": "3983800"
  },
  {
    "text": "is that we can find another\nconstant for that same g where that function, beyond\nsome crossover point,",
    "start": "3983800",
    "end": "3992220"
  },
  {
    "text": "is always below my blue line. So here's an example.",
    "start": "3992220",
    "end": "3997789"
  },
  {
    "text": "4x squared, we saw\nthat it grew faster than 3x squared beyond\na crossover point.",
    "start": "3997790",
    "end": "4003460"
  },
  {
    "text": "Well, we could say 2x squared\nwill always grow slower than its own crossover point.",
    "start": "4003460",
    "end": "4009475"
  },
  {
    "text": " So the constant 4\nwas the same as we",
    "start": "4009475",
    "end": "4015640"
  },
  {
    "text": "had seen before but\nthis constant 2 now becomes a lower bound, right?",
    "start": "4015640",
    "end": "4021010"
  },
  {
    "text": "So I'm basically trying to have\nthat same g both upper bound",
    "start": "4021010",
    "end": "4026440"
  },
  {
    "text": "and lower bound my blue\nfunction, all right?",
    "start": "4026440",
    "end": "4033040"
  },
  {
    "text": "And that's the\ndefinition of theta. So now, I can no longer say that\n2 to the x an exponential both",
    "start": "4033040",
    "end": "4042130"
  },
  {
    "text": "upper bounds and lower bounds\nit because that 2 to the x will grow faster\nthan my function",
    "start": "4042130",
    "end": "4047500"
  },
  {
    "text": "no matter what constant\nI tack onto it, OK? So now, what we see is\nthat, really, the g of x",
    "start": "4047500",
    "end": "4054819"
  },
  {
    "text": "is going to be the term\nthat grows the fastest. It's just going to be\nthat term here, right?",
    "start": "4054820",
    "end": "4060490"
  },
  {
    "text": "It's going to be\nthe thing without-- the fastest growing\nterm in my function without the constant behind it.",
    "start": "4060490",
    "end": "4066950"
  },
  {
    "text": "OK, so yes, we will\nnever remember all that, but we're going to do\na bunch of exercises",
    "start": "4066950",
    "end": "4072650"
  },
  {
    "text": "and you're going to see just\nhow easy it is to figure out the order of growth, OK? But I will mention\nthis just, again,",
    "start": "4072650",
    "end": "4078440"
  },
  {
    "text": "because it's very important. So when we're talking\nabout upper bounds, you can pick any function that\ngrows faster than yours, right?",
    "start": "4078440",
    "end": "4086540"
  },
  {
    "text": "F of x, this 3x squared\nthing is O of x squared. Yes, but it's also O of\nx cubed, O of x to the 5,",
    "start": "4086540",
    "end": "4093230"
  },
  {
    "text": "O of x to the 100, 2 to\nthe x of x factorial, all of those things\nthat grow much faster.",
    "start": "4093230",
    "end": "4098630"
  },
  {
    "text": "But my f of x is only\none theta, and it's theta of x squared, right?",
    "start": "4098630",
    "end": "4104299"
  },
  {
    "text": "And that's the term that grows\nthe fastest in my function here.",
    "start": "4104300",
    "end": "4111290"
  },
  {
    "text": "So when we look at\na function, based on the number of operations\nor however you're",
    "start": "4111290",
    "end": "4117489"
  },
  {
    "text": "given the function, when we\nlook at the order of growth of the function, we just focus\non the dominant term, right?",
    "start": "4117490",
    "end": "4125470"
  },
  {
    "text": "So in the first one,\nthe input here is n. And the function is n\nsquared plus 2n plus 2.",
    "start": "4125470",
    "end": "4133420"
  },
  {
    "text": "Which one of these\nis the dominant term? You tell me. Yes, exactly, n squared.",
    "start": "4133420",
    "end": "4139710"
  },
  {
    "text": "So this function is just going\nto be theta of n squared. That's it.",
    "start": "4139710",
    "end": "4145369"
  },
  {
    "text": "How about in the next one? What's the dominant term here. ",
    "start": "4145370",
    "end": "4152009"
  },
  {
    "text": "Yeah, exactly, 3x squared. Even though 100,000x is going\nto be huge for a while and this",
    "start": "4152010",
    "end": "4157680"
  },
  {
    "text": "constant is also going\nto be huge for a while, as x gets really, really big,\nthis 3x squared and, in fact,",
    "start": "4157680",
    "end": "4164680"
  },
  {
    "text": "just x squared will kind of take\nover everything else, right? So this next one is\ntheta of x squared.",
    "start": "4164680",
    "end": "4171979"
  },
  {
    "text": "How about the next one? What's the term that\ngrows the fastest here? ",
    "start": "4171979",
    "end": "4180390"
  },
  {
    "text": "Yeah, exactly. Log is slower growth, right? So this theta of this\nfunction is just theta of a.",
    "start": "4180390",
    "end": "4188130"
  },
  {
    "text": "So notice what we're\ndoing here is just focusing on the dominant term. We're going to drop the\nmultiplicative constants,",
    "start": "4188130",
    "end": "4194278"
  },
  {
    "text": "drop every other term,\nand relate the theta in terms of the input.",
    "start": "4194279",
    "end": "4200639"
  },
  {
    "text": "Don't just use theta of\nn all the time, right? In the previous one,\nit's tempting to say, the first one is\ntheta of n squared,",
    "start": "4200640",
    "end": "4206260"
  },
  {
    "text": "the next one is\ntheta of n squared, the last one is theta of n. But n is not always the input\nto your function, right?",
    "start": "4206260",
    "end": "4211710"
  },
  {
    "text": "If it is, great. If it's not, you always\nhave to relate it according to the input of the function. Maybe its length L. Maybe\nit's something else.",
    "start": "4211710",
    "end": "4221480"
  },
  {
    "text": "OK, so let's have you\ntry a couple more. What is the theta of\nthe first one here?",
    "start": "4221480",
    "end": "4227300"
  },
  {
    "text": "What is the term that\ngrows the fastest? Yeah, theta of x.",
    "start": "4227300",
    "end": "4232510"
  },
  {
    "text": "Next one.  n cubed.",
    "start": "4232510",
    "end": "4237527"
  },
  {
    "text": "Exactly, theta of n cubed. See, I told you this\nis going to be so easy. I know that math was scary. How about the next one? ",
    "start": "4237527",
    "end": "4245045"
  },
  {
    "text": "That's the term that\ngrows the fastest, but then, it's theta of drop\nany multiplicative constants and it's just theta of y.",
    "start": "4245045",
    "end": "4251590"
  },
  {
    "text": "The last one is\ngoing to be tricky. What is the theta if\nthe variable is only b?",
    "start": "4251590",
    "end": "4258070"
  },
  {
    "text": " Yeah, 2 to the b. What about if the\nvariable is only a?",
    "start": "4258070",
    "end": "4266644"
  },
  {
    "text": "a cubed. Exactly. And if my function is both\na function of a and b? ",
    "start": "4266644",
    "end": "4276700"
  },
  {
    "text": "And a plus a cubed, right?",
    "start": "4276700",
    "end": "4281760"
  },
  {
    "text": "Because both will contribute to\nthe runtime of this function, right? Not just the b.",
    "start": "4281760",
    "end": "4287760"
  },
  {
    "text": "So if this function, whatever\nthis crazy function is that I wrote that takes so long\nto run had both inputs b and a",
    "start": "4287760",
    "end": "4295770"
  },
  {
    "text": "as its parameters, the\ntheta for that function is in terms of both\nb and a, right?",
    "start": "4295770",
    "end": "4301020"
  },
  {
    "text": "The dominant terms of each. Yeah. AUDIENCE: Don't worry about\nnegative coefficients?",
    "start": "4301020",
    "end": "4306760"
  },
  {
    "text": "ANA BELL: No. No need to worry about\nnegative coefficients. AUDIENCE: Oh wait,\n[INAUDIBLE] have a negative.",
    "start": "4306760",
    "end": "4312260"
  },
  {
    "text": "ANA BELL: Yeah. [LAUGHS] Yeah. Yeah, question.",
    "start": "4312260",
    "end": "4318525"
  },
  {
    "text": "AUDIENCE: I guess it\ncan get confusing. Let's say, they were asking\nfor big data [INAUDIBLE]..",
    "start": "4318525",
    "end": "4325409"
  },
  {
    "text": " ANA BELL: Oh, some different\nparameters-- variable",
    "start": "4325410",
    "end": "4331110"
  },
  {
    "text": "that's not even here? Yeah, if the parameter\nthe function was c, let's say, for this last one,\nbut the formula was this,",
    "start": "4331110",
    "end": "4338910"
  },
  {
    "text": "then the theta would be\njust constant theta of 1. Because it doesn't even\ndepend on these variables,",
    "start": "4338910",
    "end": "4345590"
  },
  {
    "text": "so these are just\nconsidered constant time. That's a great question. Yeah.",
    "start": "4345590",
    "end": "4350720"
  },
  {
    "text": "If the parameter was\nc or something else. OK, so now we can actually look\nat functions that we write.",
    "start": "4350720",
    "end": "4358970"
  },
  {
    "text": "And we do the exact same thing. We can first start out with just\nsaying how many operations does",
    "start": "4358970",
    "end": "4364370"
  },
  {
    "text": "this function take, come up\nwith that relationship, and just theta that, right?",
    "start": "4364370",
    "end": "4369560"
  },
  {
    "text": "Just like we did on\nthe previous slide. So here's a function that\ncalculates the factorial.",
    "start": "4369560",
    "end": "4376480"
  },
  {
    "text": "What do we have here? Well, we've got this is\nconstant here, right? We've got just one\nwhile loop where there's",
    "start": "4376480",
    "end": "4382840"
  },
  {
    "text": "five things going on here. There's the comparison,\nthere's this times equals,",
    "start": "4382840",
    "end": "4388610"
  },
  {
    "text": "which is two\noperations, this minus equals it's two operations. So this function\nis just 5n plus 2,",
    "start": "4388610",
    "end": "4394480"
  },
  {
    "text": "by the same analysis we did\na few slides ago, right? So if we say, what's the\ntheta of this function?",
    "start": "4394480",
    "end": "4401650"
  },
  {
    "text": "Well, what's the theta\nof this thing 5n plus 2? Super easy, right? It's just theta of n.",
    "start": "4401650",
    "end": "4407010"
  },
  {
    "text": "And in this case, the parameter\nto our function is truly n. ",
    "start": "4407010",
    "end": "4415420"
  },
  {
    "text": "When we have functions that\nare slightly more complex and we've got things that are\nin series, like for example,",
    "start": "4415420",
    "end": "4421480"
  },
  {
    "text": "here, I've got two for loops\none right after the other. We basically use this law of\naddition to take care of that.",
    "start": "4421480",
    "end": "4428900"
  },
  {
    "text": "So that means we figure\nout what the theta is for the first for loop, the\ntheta for the next for loop, and we just add those\ntwo thetas together, OK?",
    "start": "4428900",
    "end": "4438250"
  },
  {
    "text": "So the first for loop\nhere is theta of n because it's something that\ndepends on parameter n.",
    "start": "4438250",
    "end": "4444820"
  },
  {
    "text": "And the next for loop here\nis theta of n squared, right? ",
    "start": "4444820",
    "end": "4451900"
  },
  {
    "text": "Because the parameter\nhere is n times n. The stuff inside the\nfor loops are constant,",
    "start": "4451900",
    "end": "4457090"
  },
  {
    "text": "so they don't contribute\nanything to our theta, right? There's no more things to\nmultiply the complexity there.",
    "start": "4457090",
    "end": "4463010"
  },
  {
    "text": "So if this is my\nentire function here, the theta for this function\nis theta of n plus theta",
    "start": "4463010",
    "end": "4468130"
  },
  {
    "text": "of n squared, right? And the law of\naddition just says, theta of n plus\ntheta of n squared is just theta of\nsticking those two",
    "start": "4468130",
    "end": "4475900"
  },
  {
    "text": "inside as part of my\nfunction n plus n squared. And we know how to do that.",
    "start": "4475900",
    "end": "4481150"
  },
  {
    "text": "That just simplifies\nto the dominant term, which is n squared.",
    "start": "4481150",
    "end": "4486530"
  },
  {
    "text": "OK, so that's the\nlaw of addition. So that's when we have loops\nor things like that in series.",
    "start": "4486530",
    "end": "4492810"
  },
  {
    "text": "What about when we have\nloops that are nested, right? Then, we use the law\nof multiplication.",
    "start": "4492810",
    "end": "4500340"
  },
  {
    "text": "Because for each\none of these things, we're going to have to do\nthis that many times, right?",
    "start": "4500340",
    "end": "4506460"
  },
  {
    "text": "So in this particular case,\nwe need to be careful. The outer for loop is\ngoing to be theta of n.",
    "start": "4506460",
    "end": "4511880"
  },
  {
    "text": "And the inner for loop\nis also theta of n,",
    "start": "4511880",
    "end": "4517340"
  },
  {
    "text": "even though I'm\ndividing n by 2, right? 0.5 times n is still theta of n.",
    "start": "4517340",
    "end": "4523790"
  },
  {
    "text": "That multiplicative\nconstant in front of that n is 0.5, which is just--",
    "start": "4523790",
    "end": "4529130"
  },
  {
    "text": "it's just-- it still\nleads me to be theta of n.",
    "start": "4529130",
    "end": "4534139"
  },
  {
    "text": "The print is constant,\nso there's nothing else to multiply there. So the law of\nmultiplication just",
    "start": "4534140",
    "end": "4539570"
  },
  {
    "text": "says theta of n times\ntheta of n is theta of n squared inside there. ",
    "start": "4539570",
    "end": "4548489"
  },
  {
    "text": "OK, so let's look\nat this program. What is the theta for this?",
    "start": "4548490",
    "end": "4555700"
  },
  {
    "text": "Well, we could do it sort\nof in very great detail. We've got x as our parameter.",
    "start": "4555700",
    "end": "4561550"
  },
  {
    "text": "So we only count\nloops and things like that that are a function of x.",
    "start": "4561550",
    "end": "4566560"
  },
  {
    "text": "If I had a loop that was a\nfunction of, I don't know, n or something, that doesn't\ncount because it's not a function of my input.",
    "start": "4566560",
    "end": "4572480"
  },
  {
    "text": "So only look at things\nthat are a function of x. I've got one outer for loop\nthat goes through x times.",
    "start": "4572480",
    "end": "4580620"
  },
  {
    "text": "So that's theta of x. I've got an inner for loop that\nstarts from i and goes to x.",
    "start": "4580620",
    "end": "4588430"
  },
  {
    "text": "That's a little bit tricky. But in the end,\noverall, it's going to be theta of x\nbecause it's going",
    "start": "4588430",
    "end": "4594400"
  },
  {
    "text": "to be-- the first time it's\ngoing to go through x times. The next time it's going to\ngo x minus 1 then x minus 2",
    "start": "4594400",
    "end": "4601630"
  },
  {
    "text": "then x minus 3. So we're effectively\njust kind of adding over all of these runs x plus--\nsorry, 1 plus 2 plus 3 plus 4",
    "start": "4601630",
    "end": "4609280"
  },
  {
    "text": "plus 5 all the way up to x. And that's just\nsome function of x. It's definitely not\ngoing to be constant.",
    "start": "4609280",
    "end": "4616099"
  },
  {
    "text": "So the inner loop\nis also theta of x. Everything else is theta of 1.",
    "start": "4616100",
    "end": "4623030"
  },
  {
    "text": "There's nothing else\nthat depends on x. So this whole function\nis going to be theta",
    "start": "4623030",
    "end": "4628650"
  },
  {
    "text": "of 1 for this assignment here. Theta of x times theta of x\nfor this nested loop here.",
    "start": "4628650",
    "end": "4635370"
  },
  {
    "text": "And theta of 1 for\nthis return down here. So overall, it's just\ngoing to be theta of--",
    "start": "4635370",
    "end": "4643020"
  },
  {
    "text": "all right, so that's that. And so, overall,\nit's just going to be theta of x squared just by\nthe laws of multiplication",
    "start": "4643020",
    "end": "4650170"
  },
  {
    "text": "and addition. All right, think about this. And then, tell me\nwhat you think it is.",
    "start": "4650170",
    "end": "4656155"
  },
  {
    "start": "4656155",
    "end": "4661672"
  },
  {
    "text": "What do you guys think it is?  Yeah, theta of length\nof L. Absolutely right.",
    "start": "4661672",
    "end": "4668770"
  },
  {
    "text": "So this is constant. This stuff inside\nthe loop is constant. The return is constant. The only thing that depends on\nL is the length of the list,",
    "start": "4668770",
    "end": "4676130"
  },
  {
    "text": "right? This loop. So the answer is theta length. Perfect. How about this one?",
    "start": "4676130",
    "end": "4681300"
  },
  {
    "text": " So here we're assuming all the\ninputs are the same length.",
    "start": "4681300",
    "end": "4688780"
  },
  {
    "text": " Yeah, theta of length of\npick your favorite one.",
    "start": "4688780",
    "end": "4695270"
  },
  {
    "text": "Theta of length L is reasonable. You could also say theta\nof length L1 or theta of length L2.",
    "start": "4695270",
    "end": "4700400"
  },
  {
    "text": "Because these are two loops\nthat are in series, right? So this one just loops\nthrough the length of L.",
    "start": "4700400",
    "end": "4705710"
  },
  {
    "text": "But inside, we're\nnot doing anything that costs more than just\nconstant time, right? Here, we're just comparing\ntwo numbers like 3 and 2.",
    "start": "4705710",
    "end": "4712910"
  },
  {
    "text": "We're just assigning\nsomething to true. So nothing else really depends\non the length of the list.",
    "start": "4712910",
    "end": "4718560"
  },
  {
    "text": "So this is theta\nof length L. This is plus theta of length L. So\nthat's just theta of length L.",
    "start": "4718560",
    "end": "4726070"
  },
  {
    "text": "All right, so we saw a bunch\nof different algorithms, right? Sorry, no we didn't\nsee a bunch-- we saw a bunch of\ndifferent programs.",
    "start": "4726070",
    "end": "4733150"
  },
  {
    "text": "But we could classify them all\ninto one of these categories,",
    "start": "4733150",
    "end": "4738820"
  },
  {
    "text": "right? And this is all-- basically,\nall the different algorithms that you could ever\nwrite in general, right?",
    "start": "4738820",
    "end": "4747370"
  },
  {
    "text": "So something that's\nconstant, theta of 1. Something that's\nlogarithmic is theta log n. Something that's linear, we saw\nmany of these, is theta of n.",
    "start": "4747370",
    "end": "4755290"
  },
  {
    "text": "Something that's log linear,\nwe haven't seen any yet, but that's theta of n log n. Theta of n to some constant,\nlike n squared, n cubed,",
    "start": "4755290",
    "end": "4763390"
  },
  {
    "text": "is polynomial. And theta of some constant\nto the n, like 2 to the n, 3 to the n, is exponential.",
    "start": "4763390",
    "end": "4769990"
  },
  {
    "text": "And when we're\nwriting our programs, you can do a quick\nanalysis of the program that you just wrote.",
    "start": "4769990",
    "end": "4775750"
  },
  {
    "text": "Look at the loops. Look at to see how\nefficient you wrote it. And you could basically\nclassify your program",
    "start": "4775750",
    "end": "4780880"
  },
  {
    "text": "into one of these\ncategories, right? If you had nested loops that\nboth depend on the input, you probably wrote a\npolynomial type algorithm.",
    "start": "4780880",
    "end": "4788630"
  },
  {
    "text": "If you just had one loop\nthat depended on the input, you probably wrote a linear\ntime algorithm, right?",
    "start": "4788630",
    "end": "4794480"
  },
  {
    "text": "And when we write these\nalgorithms, at a first pass, we want to be somewhere up here. You don't want to do anything\nthat's polynomial or definitely",
    "start": "4794480",
    "end": "4802790"
  },
  {
    "text": "not exponential because\nthings get slow really quickly with those numbers, right?",
    "start": "4802790",
    "end": "4809180"
  },
  {
    "text": "And so we never ever want\nto be in that situation, although sometimes\nit's unavoidable. All right, so\nthat's all I've got.",
    "start": "4809180",
    "end": "4815470"
  },
  {
    "text": "Next lecture, we will\nbe going through a bunch of those different\ncomplexity classes and looking at\ndifferent programs",
    "start": "4815470",
    "end": "4822100"
  },
  {
    "text": "that land in those classes,\nespecially the logarithmic and the log linears. All right.",
    "start": "4822100",
    "end": "4828360"
  },
  {
    "start": "4828360",
    "end": "4835000"
  }
]