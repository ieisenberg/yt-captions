[
  {
    "start": "0",
    "end": "0"
  },
  {
    "start": "0",
    "end": "500"
  },
  {
    "text": "In the last chapter we\ndeveloped sequential logic,",
    "start": "500",
    "end": "3440"
  },
  {
    "text": "which contains both\ncombinational logic and memory",
    "start": "3440",
    "end": "6170"
  },
  {
    "text": "components.",
    "start": "6170",
    "end": "8090"
  },
  {
    "text": "The combinational logic\ncloud is an acyclic graph",
    "start": "8090",
    "end": "10750"
  },
  {
    "text": "of components that obeys\nthe static discipline.",
    "start": "10750",
    "end": "13940"
  },
  {
    "text": "The static discipline guarantees\nif we supply valid and stable",
    "start": "13940",
    "end": "17289"
  },
  {
    "text": "digital inputs, then we\nwill get valid and stable",
    "start": "17290",
    "end": "19900"
  },
  {
    "text": "digital outputs\nby some specified",
    "start": "19900",
    "end": "22029"
  },
  {
    "text": "interval after the\nlast input transition.",
    "start": "22030",
    "end": "25490"
  },
  {
    "text": "There’s also a functional\nspecification that tells us",
    "start": "25490",
    "end": "27940"
  },
  {
    "text": "the output values for every\npossible combination of input",
    "start": "27940",
    "end": "30840"
  },
  {
    "text": "values.",
    "start": "30840",
    "end": "32258"
  },
  {
    "text": "In this diagram, there are\nk+m inputs and k+n outputs,",
    "start": "32259",
    "end": "37800"
  },
  {
    "text": "so the truth table for the\ncombinational logic will have",
    "start": "37800",
    "end": "41239"
  },
  {
    "text": "2^(k+m) rows and\nk+n output columns.",
    "start": "41240",
    "end": "47390"
  },
  {
    "text": "The job of the\nstate registers is",
    "start": "47390",
    "end": "49059"
  },
  {
    "text": "to remember the current state\nof the sequential logic.",
    "start": "49060",
    "end": "52490"
  },
  {
    "text": "The state is encoded as\nsome number k of bits,",
    "start": "52490",
    "end": "55330"
  },
  {
    "text": "which will allow us to\nrepresent 2^k unique states.",
    "start": "55330",
    "end": "59650"
  },
  {
    "text": "Recall that the state\nis used to capture,",
    "start": "59650",
    "end": "62000"
  },
  {
    "text": "in some appropriate way, the\nrelevant history of the input",
    "start": "62000",
    "end": "65250"
  },
  {
    "text": "sequence.",
    "start": "65250",
    "end": "66300"
  },
  {
    "text": "To the extent that previous\ninput values influence",
    "start": "66300",
    "end": "68960"
  },
  {
    "text": "the operation of the\nsequential logic,",
    "start": "68960",
    "end": "70930"
  },
  {
    "text": "that happens through\nthe stored state bits.",
    "start": "70930",
    "end": "74460"
  },
  {
    "text": "Typically the LOAD input\nof the state registers",
    "start": "74460",
    "end": "76740"
  },
  {
    "text": "is triggered by the rising edge\nof a periodic signal, which",
    "start": "76740",
    "end": "80310"
  },
  {
    "text": "updates the stored state\nwith the new state calculated",
    "start": "80310",
    "end": "83060"
  },
  {
    "text": "by the combinational logic.",
    "start": "83060",
    "end": "86720"
  },
  {
    "text": "As designers we\nhave several tasks:",
    "start": "86720",
    "end": "89730"
  },
  {
    "text": "first we must decide\nwhat output sequences",
    "start": "89730",
    "end": "92350"
  },
  {
    "text": "need to be generated in\nresponse to the expected input",
    "start": "92350",
    "end": "95330"
  },
  {
    "text": "sequences.",
    "start": "95330",
    "end": "97190"
  },
  {
    "text": "A particular input may, in\nfact, generate a long sequence",
    "start": "97190",
    "end": "101140"
  },
  {
    "text": "of output values.",
    "start": "101140",
    "end": "103370"
  },
  {
    "text": "Or the output may\nremain unchanged",
    "start": "103370",
    "end": "105360"
  },
  {
    "text": "while the input sequence\nis processed, step-by-step,",
    "start": "105360",
    "end": "108250"
  },
  {
    "text": "where the FSM is remembering\nthe relevant information",
    "start": "108250",
    "end": "111070"
  },
  {
    "text": "by updating its internal state.",
    "start": "111070",
    "end": "114400"
  },
  {
    "text": "Then we have to develop the\nfunctional specification",
    "start": "114400",
    "end": "116790"
  },
  {
    "text": "for the logic so it\ncalculates the correct output",
    "start": "116790",
    "end": "119700"
  },
  {
    "text": "and next state values.",
    "start": "119700",
    "end": "121630"
  },
  {
    "text": "Finally, we need to come up\nwith an actual circuit diagram",
    "start": "121630",
    "end": "125140"
  },
  {
    "text": "for sequential logic system.",
    "start": "125140",
    "end": "127638"
  },
  {
    "text": "All the tasks are\npretty interesting,",
    "start": "127638",
    "end": "129179"
  },
  {
    "text": "so let’s get started!",
    "start": "129180",
    "end": "131469"
  },
  {
    "start": "131000",
    "end": "131000"
  },
  {
    "text": "As an example sequential system,\nlet’s make a combination lock.",
    "start": "131470",
    "end": "135760"
  },
  {
    "text": "The lock has a\n1-bit input signal,",
    "start": "135760",
    "end": "138280"
  },
  {
    "text": "where the user enters\nthe combination",
    "start": "138280",
    "end": "140110"
  },
  {
    "text": "as a sequence of bits.",
    "start": "140110",
    "end": "142430"
  },
  {
    "text": "There’s one output\nsignal, UNLOCK,",
    "start": "142430",
    "end": "144780"
  },
  {
    "text": "which is 1 if and only if the\ncorrect combination has been",
    "start": "144780",
    "end": "147959"
  },
  {
    "text": "entered.",
    "start": "147960",
    "end": "149490"
  },
  {
    "text": "In this example, we want\nto assert UNLOCK, i.e.,",
    "start": "149490",
    "end": "152750"
  },
  {
    "text": "set UNLOCK to 1, when the\nlast four input values are",
    "start": "152750",
    "end": "156510"
  },
  {
    "text": "the sequence 0-1-1-0.",
    "start": "156510",
    "end": "158610"
  },
  {
    "text": "Mr. Blue is asking\na good question:",
    "start": "158610",
    "end": "161830"
  },
  {
    "text": "how many state bits do we need?",
    "start": "161830",
    "end": "164670"
  },
  {
    "text": "Do we have to remember\nthe last four input bits?",
    "start": "164670",
    "end": "168040"
  },
  {
    "text": "In which case, we’d\nneed four state bits.",
    "start": "168040",
    "end": "170599"
  },
  {
    "text": "Or can we remember\nless information",
    "start": "170600",
    "end": "172870"
  },
  {
    "text": "and still do our job?",
    "start": "172870",
    "end": "174720"
  },
  {
    "text": "Aha!",
    "start": "174720",
    "end": "175440"
  },
  {
    "text": "We don’t need the complete\nhistory of the last four",
    "start": "175440",
    "end": "178140"
  },
  {
    "text": "inputs, we only need to know\nif the most recent entries",
    "start": "178140",
    "end": "181090"
  },
  {
    "text": "represent some part of a\npartially-entered correct",
    "start": "181090",
    "end": "183800"
  },
  {
    "text": "combination.",
    "start": "183800",
    "end": "185380"
  },
  {
    "text": "In other words if the input\nsequence doesn’t represent",
    "start": "185380",
    "end": "188290"
  },
  {
    "text": "a correct combination, we don’t\nneed to keep track of exactly",
    "start": "188290",
    "end": "191819"
  },
  {
    "text": "how it’s incorrect, we only\nneed to know that is incorrect.",
    "start": "191820",
    "end": "196850"
  },
  {
    "text": "With that observation in\nmind, let’s figure out how",
    "start": "196850",
    "end": "199560"
  },
  {
    "text": "to represent the desired\nbehavior of our digital system.",
    "start": "199560",
    "end": "203440"
  },
  {
    "text": "We can characterize the behavior\nof a sequential system using",
    "start": "203440",
    "end": "206750"
  },
  {
    "start": "204000",
    "end": "204000"
  },
  {
    "text": "a new abstraction called\na finite state machine,",
    "start": "206750",
    "end": "209520"
  },
  {
    "text": "or FSM for short.",
    "start": "209520",
    "end": "211760"
  },
  {
    "text": "The goal of the\nFSM abstraction is",
    "start": "211760",
    "end": "213769"
  },
  {
    "text": "to describe the\ninput/output behavior",
    "start": "213770",
    "end": "215890"
  },
  {
    "text": "of the sequential\nlogic, independent",
    "start": "215890",
    "end": "218030"
  },
  {
    "text": "of its actual implementation.",
    "start": "218030",
    "end": "221020"
  },
  {
    "text": "A finite state machine has\na periodic CLOCK input.",
    "start": "221020",
    "end": "224420"
  },
  {
    "text": "A rising clock edge will\ntrigger the transition",
    "start": "224420",
    "end": "226849"
  },
  {
    "text": "from the current state\nto the next state.",
    "start": "226850",
    "end": "229360"
  },
  {
    "text": "The FSM has a some\nfixed number of states,",
    "start": "229360",
    "end": "231700"
  },
  {
    "text": "with a particular\nstate designated",
    "start": "231700",
    "end": "233550"
  },
  {
    "text": "as the initial or\nstarting state when",
    "start": "233550",
    "end": "235890"
  },
  {
    "text": "the FSM is first turned on.",
    "start": "235890",
    "end": "238970"
  },
  {
    "text": "One of the interesting\nchallenges in designing an FSM",
    "start": "238970",
    "end": "241780"
  },
  {
    "text": "is to determine the required\nnumber of states since there’s",
    "start": "241780",
    "end": "244870"
  },
  {
    "text": "often a tradeoff between\nthe number of state bits",
    "start": "244870",
    "end": "247690"
  },
  {
    "text": "and the complexity of the\ninternal combinational logic",
    "start": "247690",
    "end": "250790"
  },
  {
    "text": "required to compute the\nnext state and outputs.",
    "start": "250790",
    "end": "253780"
  },
  {
    "text": "There are some number\nof inputs, used",
    "start": "253780",
    "end": "255709"
  },
  {
    "text": "to convey all the\nexternal information",
    "start": "255710",
    "end": "258000"
  },
  {
    "text": "necessary for the\nFSM to do its job.",
    "start": "258000",
    "end": "261370"
  },
  {
    "text": "Again, there are interesting\ndesign tradeoffs.",
    "start": "261370",
    "end": "264430"
  },
  {
    "text": "Suppose the FSM required\n100 bits of input.",
    "start": "264430",
    "end": "268080"
  },
  {
    "text": "Should we have 100 inputs\nand deliver the information",
    "start": "268080",
    "end": "271319"
  },
  {
    "text": "all at once?",
    "start": "271320",
    "end": "272980"
  },
  {
    "text": "Or should we have a single input\nand deliver the information",
    "start": "272980",
    "end": "276260"
  },
  {
    "text": "as a 100-cycle sequence?",
    "start": "276260",
    "end": "279370"
  },
  {
    "text": "In many real world situations\nwhere the sequential logic is",
    "start": "279370",
    "end": "282650"
  },
  {
    "text": "*much* faster than whatever\nphysical process we’re trying",
    "start": "282650",
    "end": "285479"
  },
  {
    "text": "to control,",
    "start": "285480",
    "end": "286510"
  },
  {
    "text": "we’ll often see the use\nof bit-serial inputs where",
    "start": "286510",
    "end": "289510"
  },
  {
    "text": "the information arrives as a\nsequence, one bit at a time.",
    "start": "289510",
    "end": "293050"
  },
  {
    "text": "That will allow us to use\nmuch less signaling hardware,",
    "start": "293050",
    "end": "296240"
  },
  {
    "text": "at the cost of the time\nrequired to transmit",
    "start": "296240",
    "end": "298720"
  },
  {
    "text": "the information sequentially.",
    "start": "298720",
    "end": "301690"
  },
  {
    "text": "The FSM has some number\noutputs to convey the results",
    "start": "301690",
    "end": "304760"
  },
  {
    "text": "of the sequential\nlogic’s computations.",
    "start": "304760",
    "end": "308250"
  },
  {
    "text": "The comment before about\nserial vs. parallel inputs",
    "start": "308250",
    "end": "311580"
  },
  {
    "text": "applies equally to choosing\nhow information should",
    "start": "311580",
    "end": "313930"
  },
  {
    "text": "be encoded on the outputs.",
    "start": "313930",
    "end": "317180"
  },
  {
    "text": "There are a set of\ntransition rules,",
    "start": "317180",
    "end": "318880"
  },
  {
    "text": "specifying how the\nnext state S-prime is",
    "start": "318880",
    "end": "321540"
  },
  {
    "text": "determined from the current\nstate S and the inputs I.",
    "start": "321540",
    "end": "324970"
  },
  {
    "text": "The specification\nmust be complete,",
    "start": "324970",
    "end": "327110"
  },
  {
    "text": "enumerating S-prime for\nevery possible combination",
    "start": "327110",
    "end": "330620"
  },
  {
    "text": "of S and I.",
    "start": "330620",
    "end": "332210"
  },
  {
    "text": "And, finally, there’s\nthe specification for how",
    "start": "332210",
    "end": "334460"
  },
  {
    "text": "the output values\nshould be determined.",
    "start": "334460",
    "end": "337560"
  },
  {
    "text": "The FSM design is\noften a bit simpler",
    "start": "337560",
    "end": "339910"
  },
  {
    "text": "if the outputs are strictly a\nfunction of the current state",
    "start": "339910",
    "end": "342480"
  },
  {
    "text": "S, but, in general,\nthe outputs can",
    "start": "342480",
    "end": "345590"
  },
  {
    "text": "be a function of both S\nand the current inputs.",
    "start": "345590",
    "end": "349960"
  },
  {
    "text": "Now that we have our\nabstraction in place,",
    "start": "349960",
    "end": "352050"
  },
  {
    "text": "let’s see how to use it to\ndesign our combinational lock.",
    "start": "352050",
    "end": "356580"
  }
]