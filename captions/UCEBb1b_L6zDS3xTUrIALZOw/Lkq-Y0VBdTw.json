[
  {
    "start": "0",
    "end": "10220"
  },
  {
    "text": "PROFESSOR: OK, so\nlet's get started. So we are up to our\nsegment, I guess.",
    "start": "10220",
    "end": "21695"
  },
  {
    "text": "Three isn't it? It's not four. Anyways-- because first\ntwo were together. You had a question?",
    "start": "21695",
    "end": "26800"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Two things what?",
    "start": "26800",
    "end": "32890"
  },
  {
    "text": "AUDIENCE: She said\nit's two things. PROFESSOR: Did I-- AUDIENCE: [INAUDIBLE]",
    "start": "32890",
    "end": "38230"
  },
  {
    "text": "PROFESSOR: Yeah, OK. I think that's\nprobably the other bug. I thought I fixed it.",
    "start": "38230",
    "end": "43300"
  },
  {
    "text": "The closed [INAUDIBLE] it was\nstill [INAUDIBLE],, isn't it?",
    "start": "43300",
    "end": "48875"
  },
  {
    "text": "I thought I fixed it. Nevermind. OK, so good.",
    "start": "48875",
    "end": "54670"
  },
  {
    "text": "That's one nice thing\nabout having PowerPoint. You can fix it immediately. OK, so key thing is treat\nthis as a serious deadline",
    "start": "54670",
    "end": "66990"
  },
  {
    "text": "because this actually matters. And then I hand this in because\nI know up to this point,",
    "start": "66990",
    "end": "72990"
  },
  {
    "text": "everybody is doing well. They're actually getting\nall those things done. But this is a very hard segment.",
    "start": "72990",
    "end": "78780"
  },
  {
    "text": "You had a lot of things\nyou need to be doing here. So instead of giving\nyou one deadline, we try to give\nyou two deadlines.",
    "start": "78780",
    "end": "86640"
  },
  {
    "text": "And this list is like\n31st is the due date.",
    "start": "86640",
    "end": "92130"
  },
  {
    "text": "And so we have paper discussions\n17th the next Monday with me",
    "start": "92130",
    "end": "97229"
  },
  {
    "text": "and 21st with Martin. And we are going to make\nthe paper available probably",
    "start": "97230",
    "end": "102729"
  },
  {
    "text": "today or tomorrow on the\nwebsite so you can just download from the class\nwebsite and read it. And again, if you talked with me\nlast time, sign up with Martin",
    "start": "102730",
    "end": "111330"
  },
  {
    "text": "and vise versa.  OK, so today, I'm going to do\na little bit of introduction",
    "start": "111330",
    "end": "118250"
  },
  {
    "text": "of what we're trying\nto do in this segment-- talk about machine language.",
    "start": "118250",
    "end": "123950"
  },
  {
    "text": "Or we will form modern\nmicroprocessors. A lot of you probably this is\nprobably nothing new in there.",
    "start": "123950",
    "end": "130340"
  },
  {
    "text": "Talk a little bit about\nthe memory layout that matters to us, procedure\nabstraction, procedure linkage,",
    "start": "130340",
    "end": "135980"
  },
  {
    "text": "and end up with some guidelines\nof creating a code generator. So an intro, so this\nis basically our flow",
    "start": "135980",
    "end": "144590"
  },
  {
    "text": "we have been working on. It's program, tokens, tokens\n[INAUDIBLE] repositories, and that's where are.",
    "start": "144590",
    "end": "150920"
  },
  {
    "text": "Sorry, we actually did\na semantic analysis. [INAUDIBLE] a representation. We go to some type of\nintermediate representation.",
    "start": "150920",
    "end": "156860"
  },
  {
    "text": "And normally in\nthe compiler flow is you do code optimization\nand then do code generation",
    "start": "156860",
    "end": "162617"
  },
  {
    "text": "because intermediate\nrepresentation is where a lot of optimizations happen. But we want to short circuit,\nand we won't directly",
    "start": "162617",
    "end": "168470"
  },
  {
    "text": "go to code generation\nbecause at that point, we have end to end system. And then we'll get back to\noptimization in the next two",
    "start": "168470",
    "end": "174530"
  },
  {
    "text": "segments. So what we want to\ndo is go through",
    "start": "174530",
    "end": "179990"
  },
  {
    "text": "this with this high level\nIR and lower to low level intermediate representation\nand directly do",
    "start": "179990",
    "end": "185720"
  },
  {
    "text": "the code generation. And if you look at\ncode generation, what",
    "start": "185720",
    "end": "191470"
  },
  {
    "text": "do you worry about\ncode generation? That means every\npart of the program, we have to actually map into\nsome place in the architecture.",
    "start": "191470",
    "end": "198898"
  },
  {
    "text": "So what are the\nparts of the program? you have to worry about? There's code, things like\nprocedures in the code. That's control flow in the code,\nstatements, and accessing data.",
    "start": "198898",
    "end": "207360"
  },
  {
    "text": "You had to worry\nabout those things, and then we had to come up\nwith some stylistic ways of doing all those things. And there's a lot of data\nwe have to deal with.",
    "start": "207360",
    "end": "213997"
  },
  {
    "text": "We have global static variable. We don't have that global\ndynamic variables in decaf",
    "start": "213998",
    "end": "219600"
  },
  {
    "text": "because we didn't do\nclasses, and we are not doing stuff like this. So this doesn't\nmatter that much, but I just put it in there.",
    "start": "219600",
    "end": "225870"
  },
  {
    "text": "We have local variables. You have temporaries\nthat at some point when you deal with things\nlike statements,",
    "start": "225870",
    "end": "232140"
  },
  {
    "text": "we'll figure out where\nwe need to allocate them. We need to do parameter parsing. We need to do cold\ncall parameter parsing,",
    "start": "232140",
    "end": "238620"
  },
  {
    "text": "and we had to deal\nwith read-only data. So what I'm going to\ndo today is go ahead and deal with each of these\ncategories where it arise",
    "start": "238620",
    "end": "246150"
  },
  {
    "text": "and how to deal within\nthe code generator. So the matching code\ngenerator basically",
    "start": "246150",
    "end": "251550"
  },
  {
    "text": "should translate\nall the instruction from intermediate representation\nto assembly you're doing. And you need to allocate\nspace for variables and arrays",
    "start": "251550",
    "end": "260130"
  },
  {
    "text": "in there. AUDIENCE: [INAUDIBLE] PROFESSOR: Oh, OK. Yeah, more handouts.",
    "start": "260130",
    "end": "265850"
  },
  {
    "text": "Turi. AUDIENCE: Yep. PROFESSOR: [INAUDIBLE] AUDIENCE: Yep. PROFESSOR: OK, so I guess we\ncan pick it up at the end.",
    "start": "265850",
    "end": "272490"
  },
  {
    "text": "And we need to create the\nnecessary symbolic information in there, and we're allowed\nto [INAUDIBLE] convention.",
    "start": "272490",
    "end": "279445"
  },
  {
    "text": "These are the kind\nof main things we need to do in a new\nmachine code generation.",
    "start": "279445",
    "end": "284850"
  },
  {
    "text": "So what are you\ngoing to generate to? So we have intermediate\nrepresentation. So we are ending up\nin a machine language.",
    "start": "284850",
    "end": "291180"
  },
  {
    "text": "So machines basically\nunderstand bits. So at the end of the day,\nmachine wants a bunch of bits,",
    "start": "291180",
    "end": "297792"
  },
  {
    "text": "and it's going to\nlook at the bits, and it's going to execute. That's what we want at the end. However we are not going to\ngenerate bits we are actually",
    "start": "297792",
    "end": "304760"
  },
  {
    "text": "going to generate\nassembly instruction that has almost one to\none correspondence between these bits.",
    "start": "304760",
    "end": "310699"
  },
  {
    "text": "OK, and so that's\nwhat we aimed at. So if you actually think about\nit, we came with this notion",
    "start": "310700",
    "end": "317157"
  },
  {
    "text": "that in this class, you are\ngoing to go all the way down to metal, and you\nwill do everything that the machine wants.",
    "start": "317157",
    "end": "323592"
  },
  {
    "text": "It was a little bit of a lie. We just fudged it a little bit. Actually, what you're\ngenerating in assembly code-- and you're not going to\nwrite assembly [INAUDIBLE]",
    "start": "323592",
    "end": "329480"
  },
  {
    "text": "linker which actually\ngenerates the binary. So we are using that,\nbut this is close enough.",
    "start": "329480",
    "end": "334652"
  },
  {
    "text": "After you learn\nwhat we do, I mean, assembling a linker would be\nalmost a very simple subset of what a compiler is about.",
    "start": "334652",
    "end": "340340"
  },
  {
    "text": "So I think this is close enough. So why are you doing\nassembly language? What are the advantages of doing\nthat, using assembly language?",
    "start": "340340",
    "end": "348530"
  },
  {
    "text": "It simplifies code\ngeneration like crazy. You don't have to worry\nabout generating bits",
    "start": "348530",
    "end": "354110"
  },
  {
    "text": "and then trying to figure\nout and trying to debug. It would be a big pain.",
    "start": "354110",
    "end": "359389"
  },
  {
    "text": "And also, having symbolic\nnames and symbolic instructions make it much easier to read\nand easier to generate.",
    "start": "359390",
    "end": "365372"
  },
  {
    "text": "You don't have to figure\nout exact location and stuff like that. There's a nice logical\nabstraction layer",
    "start": "365372",
    "end": "370978"
  },
  {
    "text": "because what we are trying to\ndo is build abstraction layers. Assembly language is a nice\nlogical abstraction layer in there because for example,\nmany different small changes",
    "start": "370978",
    "end": "382100"
  },
  {
    "text": "in architecture can be\nabstracted out to one IAS, one assembly language. And also, sometimes\nbetween some architectures,",
    "start": "382100",
    "end": "391289"
  },
  {
    "text": "you actually change macros\nin the assembly and deal with that. X86 is kind of hard because\nx86 has so much weird lower",
    "start": "391290",
    "end": "399860"
  },
  {
    "text": "things all kind of exposed. This abstraction\nis not that nice. In risk architecture,\nsometimes we",
    "start": "399860",
    "end": "405199"
  },
  {
    "text": "have this same abstraction that\nyou can hide some architecture details in there.",
    "start": "405200",
    "end": "410910"
  },
  {
    "text": "And there are disadvantages. A lot of times, there could\nbe some additional [INAUDIBLE]",
    "start": "410910",
    "end": "416330"
  },
  {
    "text": "in assembling and linking. Again, this is more of\na risk issue than x86 because risk tries to create\nsome nice abstractions",
    "start": "416330",
    "end": "423770"
  },
  {
    "text": "so that [INAUDIBLE] assembler\ntry to hide some low level details too. In x86, there's no\nnice abstraction.",
    "start": "423770",
    "end": "430010"
  },
  {
    "text": "So everything kind\nof gets exposed up. And assembler can add overhead\nbasically doing things.",
    "start": "430010",
    "end": "440539"
  },
  {
    "text": "So there are two types of\nthings you can generate. One is what we call\nrelocatable machine language.",
    "start": "440540",
    "end": "446810"
  },
  {
    "text": "So what that means\nis all addresses in there are represented\nwith some kind of symbols.",
    "start": "446810",
    "end": "454060"
  },
  {
    "text": "There are some\nrelocation information available to the\nlink loader that when",
    "start": "454060",
    "end": "460510"
  },
  {
    "text": "[INAUDIBLE] especially\nwhen you load, you can actually move that\npiece of code anywhere in memory",
    "start": "460510",
    "end": "467259"
  },
  {
    "text": "and relocate that. And what it gives you, so\nit gives you flexibility in compilation because if you\nare compiling multiple files,",
    "start": "467260",
    "end": "474368"
  },
  {
    "text": "if everybody thinks I\nwant to be in address 100 and if you have two\ndifferent factions competing, then you are in trouble.",
    "start": "474368",
    "end": "480290"
  },
  {
    "text": "So relocation says that you\nhave-- everything is relative. So if two different functions\nget recompiled separately,",
    "start": "480290",
    "end": "488200"
  },
  {
    "text": "they can kind of find its\nown space and go in there. So it's a multiple level first\nin the linker level, when",
    "start": "488200",
    "end": "495500"
  },
  {
    "text": "you're combining things\nand then lower the level because the two different\nlibraries get loaded, and they might have to\nput in different spaces.",
    "start": "495500",
    "end": "504010"
  },
  {
    "text": "And then you can do\nabsolute machine language. Especially there are some\nareas in memory, especially",
    "start": "504010",
    "end": "510310"
  },
  {
    "text": "things like kernel,\nwhere you have to be an absolute address there. The addresses mean something. And at that point, we actually\nhard code the addresses",
    "start": "510310",
    "end": "516690"
  },
  {
    "text": "and say the addresses do that. But when you're doing things\nlike interrupts and device drivers, we have to do that.",
    "start": "516690",
    "end": "522549"
  },
  {
    "text": "We actually had hard code these. Addresses mean things. Whereas in this class,\nin what we're generating,",
    "start": "522549",
    "end": "527740"
  },
  {
    "text": "we actually do\nrelocatable stuff.  So this is a little bit\nof a primer for assembly.",
    "start": "527740",
    "end": "535370"
  },
  {
    "text": "I mean, all of you guys probably\nunderstand assembly, do you? OK, I don't have to spend\nthat much time going",
    "start": "535370",
    "end": "541160"
  },
  {
    "text": "through assembly. x86 assembly is weird.",
    "start": "541160",
    "end": "548089"
  },
  {
    "text": "It's a very complex\nlanguage, and the key thing what we're trying to do is even\nthough we are using x86, don't",
    "start": "548090",
    "end": "554750"
  },
  {
    "text": "go crazy on it because in x86,\nanything and everything has instruction available\nin the architecture,",
    "start": "554750",
    "end": "560510"
  },
  {
    "text": "but don't use them because\nright now it might be fun, but when you go to\noptimization, you will suffer the pain dealing\nwith all those things,",
    "start": "560510",
    "end": "567649"
  },
  {
    "text": "different weird cases. So just stay with focus. Stay with the simple\nthings we are giving So I think that's the key thing.",
    "start": "567650",
    "end": "575350"
  },
  {
    "text": "I mean, what I would say\nis go through this segment and the next one probably\nnext to also staying in there",
    "start": "575350",
    "end": "584300"
  },
  {
    "text": "and probably the last segment. And when you go to\nthe compiler derby, you just can just\ngo crazy, I mean,",
    "start": "584300",
    "end": "589759"
  },
  {
    "text": "if you want to just go\ncrazy and try to do-- if you want to do a\nstring copy, that's one instruction that will\ncopy a string from one",
    "start": "589760",
    "end": "596120"
  },
  {
    "text": "to another instead of\nhaving 15 instructions. You can do all those\ncrazy things but not now.",
    "start": "596120",
    "end": "602569"
  },
  {
    "text": "Just work with the\nsimple subset we give. So what happens\nin this assembly?",
    "start": "602570",
    "end": "609370"
  },
  {
    "text": "At some point, get mapped\ninto some file, object file. We're not really going. You're not training to look\ninto object file that much.",
    "start": "609370",
    "end": "615960"
  },
  {
    "text": "But it's good to know\nwhat's in the object file. We are using files that are\nin called ELF format files.",
    "start": "615960",
    "end": "622430"
  },
  {
    "text": "And the object files\nare many things. They have multiple segments\nbecause different parts of the code go into\ndifferent segments.",
    "start": "622430",
    "end": "627925"
  },
  {
    "text": "So if you look at this right\nhand side defined by section, it defines a segment, what\nsegment that part goes into.",
    "start": "627925",
    "end": "633769"
  },
  {
    "text": "And it has other information\nlike symbolic information that's needed for debugging\nrelocation information that's",
    "start": "633770",
    "end": "639320"
  },
  {
    "text": "needed to relocate things, also\nprocedure linkage information. So it knows when you\nare calling a procedure.",
    "start": "639320",
    "end": "646220"
  },
  {
    "text": "We had to call, and\nwe had to link things. And so there are\nmultiple segments. Here, for example,\nthere's a thing",
    "start": "646220",
    "end": "651597"
  },
  {
    "text": "called global offset table. What it gives is all the\nexported function and variable. It tells you in your\nobject where they",
    "start": "651597",
    "end": "658730"
  },
  {
    "text": "are offset to the location. So what you can\ndo is then if you",
    "start": "658730",
    "end": "663860"
  },
  {
    "text": "have a variable visible\noutside for some other object, it wants to look at\nthis in another library,",
    "start": "663860",
    "end": "670610"
  },
  {
    "text": "you know where to find it. So [INAUDIBLE] and the same\nthing in procedure linkage. And text segment has the code.",
    "start": "670610",
    "end": "677232"
  },
  {
    "text": "There's a data segment\nthat is read/write data, and then there's a read\nonly data segment too. So this segment table has\na lot of other segments",
    "start": "677232",
    "end": "684860"
  },
  {
    "text": "that are very complicated in\ndebug information, da da da da da. But we are only right now\nconcentrating on text segment.",
    "start": "684860",
    "end": "691639"
  },
  {
    "text": "We don't want to-- because\nwe want to simplify the life. So at the end of the\nday, we are trying",
    "start": "691640",
    "end": "698350"
  },
  {
    "text": "to map from this high level\nlanguage into a machine.",
    "start": "698350",
    "end": "705040"
  },
  {
    "text": "So it's always good\nto go and review what a machine is, what\nare the things in there.",
    "start": "705040",
    "end": "710920"
  },
  {
    "text": "And I'm especially doing\nthis with respect to x86, 64.",
    "start": "710920",
    "end": "718040"
  },
  {
    "text": "We are actually going\nthrough a switch. Last couple of years, we\ngenerated code for MIPS,",
    "start": "718040",
    "end": "724209"
  },
  {
    "text": "MIPS machines. They are very nice\nrisk architectures. Except MIPS, it seemed\nto be a dying breed.",
    "start": "724210",
    "end": "730670"
  },
  {
    "text": "And so we had a lot of thought\nwhat [INAUDIBLE] could generate code, and then there's one that\ncan still generate MIPS and run",
    "start": "730670",
    "end": "738519"
  },
  {
    "text": "on a simulator. And I was very adamant\nthat at the end of the day, it would be nice for you\nguys to run on a real machine",
    "start": "738520",
    "end": "744019"
  },
  {
    "text": "so you know actually how\nit works on a real metal than on some kind of simulator. So we chose x86, 64\nfor a few reasons.",
    "start": "744020",
    "end": "752302"
  },
  {
    "text": "Seemed to be a\nprevalent architect. It seems like everybody\nhas [INAUDIBLE] x86. And we didn't use x86 because\nx86 has very little registers.",
    "start": "752302",
    "end": "761620"
  },
  {
    "text": "So at some point, doing\nthings like register location is it's a very\ncomplicated thing in x86.",
    "start": "761620",
    "end": "767140"
  },
  {
    "text": "So x86, 64 seemed to\nhave more registers. So that's one big\nreason, and it seemed to be a little bit\nmore uniform in there.",
    "start": "767140",
    "end": "773769"
  },
  {
    "text": "So the key thing is x86,\n64, even though it's uniform and [INAUDIBLE]\n86 almost superseded,",
    "start": "773770",
    "end": "780260"
  },
  {
    "text": "has the entire\nbaggage in x86 too. So the key thing is kind\nof ignore those things and kind of focus on a simple\narchitecture and going forward.",
    "start": "780260",
    "end": "789050"
  },
  {
    "text": "So I won't have a\nquestion from you guys. So this is new. The machine just arrived\nabout three days ago.",
    "start": "789050",
    "end": "795370"
  },
  {
    "text": "We just managed to just\nget the thing working. Did Punya give you\naccount information yet?",
    "start": "795370",
    "end": "801800"
  },
  {
    "text": "No. So what we'll trying to do is\nwe just got x86, 64 machine. And it's actually running Linux.",
    "start": "801800",
    "end": "808280"
  },
  {
    "text": "And we will give\neach group account-- we just created the account, and\nhe just sent me the passwords.",
    "start": "808280",
    "end": "814149"
  },
  {
    "text": "Contact Punya-- I\nthink he's off today-- tomorrow and try to get\nthe accounts in there. The other thing in that machine\nis since the machine just",
    "start": "814150",
    "end": "821800"
  },
  {
    "text": "came out, we want to make\nsure the machine is stable. Actually, Sunday, it went\ndown because of some mounting",
    "start": "821800",
    "end": "827620"
  },
  {
    "text": "problems. So if you have\nproblems, you need to contact either me\nor Punya immediately.",
    "start": "827620",
    "end": "833890"
  },
  {
    "text": "I will give you the\ncontact information so we can actually go and\nget the machine rebooted and stuff like that. So I don't want you guys to\nget frustrated with that.",
    "start": "833890",
    "end": "842260"
  },
  {
    "text": "The question I have\nfor you guys is so did I make the right decision.",
    "start": "842260",
    "end": "847540"
  },
  {
    "text": "I mean, are you guys happy\nwith dealing with x86, 64, or should we have\nstayed with MIPS?",
    "start": "847540",
    "end": "854070"
  },
  {
    "text": "How many people\nthink we should-- this is good decision, or\nhow many people would have preferred to stay with MIPS?",
    "start": "854070",
    "end": "859576"
  },
  {
    "text": "Not that we have a choice. I don't want people\ndo different things. But I want to at least\nget some feedback.",
    "start": "859577",
    "end": "864821"
  },
  {
    "text": "AUDIENCE: Only thing\nI'm worried about is it might take a\nwhile between the time",
    "start": "864821",
    "end": "869860"
  },
  {
    "text": "that my compiler outputs\nsomething to the time that I'm able to test it. PROFESSOR: I think\nright now, we need",
    "start": "869860",
    "end": "877270"
  },
  {
    "text": "to get the account on tomorrow. You should be able to test it. And the way we\nwere going to do is",
    "start": "877270",
    "end": "883037"
  },
  {
    "text": "to do all the Java stuff in\n[INAUDIBLE] and do a CPN, copy the file, DCC, run,\nand we get the output.",
    "start": "883037",
    "end": "891260"
  },
  {
    "text": "So we have a login thing. And there's only a few groups. So one machine is probably\ngood enough for doing that.",
    "start": "891260",
    "end": "896770"
  },
  {
    "text": "We are not doing timing tests. So I think you should be\nable to-- because it's always",
    "start": "896770",
    "end": "901900"
  },
  {
    "text": "intuitive to actually\nrun snippets of code and see what happens\nand stuff like that in the real architecture. You don't want to\ngo and generate",
    "start": "901900",
    "end": "907775"
  },
  {
    "text": "huge amount of\nassembly to realize the kind of assembly generator\nactually doesn't work.",
    "start": "907775",
    "end": "913180"
  },
  {
    "text": "There are bugs in it\nand stuff like that. So you want to actually test. I mean, a lot of times,\none nice way of testing,",
    "start": "913180",
    "end": "918712"
  },
  {
    "text": "what I like to do\nis-- and before I start writing something to\ngenerate that, I will handwrite the kind of assembly it\nmight generate and run it",
    "start": "918712",
    "end": "926649"
  },
  {
    "text": "and see will hits thing\nactually work because sometimes, a lot of times I did\nthat, I realized, Dan, it didn't work because\nof some reason.",
    "start": "926650",
    "end": "932560"
  },
  {
    "text": "And [INAUDIBLE] you have\nthis exception condition that that was not allowed. And then before you actually\nrewrite the entire compiler,",
    "start": "932560",
    "end": "940060"
  },
  {
    "text": "regenerate that, you want\nto make sure that it works. So it's always good\nto get to the machine first and try out these small\npieces of handwritten assembly",
    "start": "940060",
    "end": "947245"
  },
  {
    "text": "because a lot of\ntimes you're not generating complicated things. Simple expression, OK? My expression will map here.",
    "start": "947245",
    "end": "952720"
  },
  {
    "text": "Hand map-- will it work? OK, good. It works. Now I will go write that\n[INAUDIBLE] compiler to generate that sequence.",
    "start": "952720",
    "end": "958660"
  },
  {
    "text": "I think that's a good way\nof going and debugging that. Any other comments on this?",
    "start": "958660",
    "end": "967470"
  },
  {
    "text": "So it's new. It's a brand new architecture. I think it's a fun architect,\ninteresting architecture. So let's see how this goes.",
    "start": "967470",
    "end": "974160"
  },
  {
    "text": "One other comment I\nwant to get probably at the end of the year is\none thing I was thinking",
    "start": "974160",
    "end": "979470"
  },
  {
    "text": "is whether we should generate\nit for the beta architecture. I didn't do it this time because\nI couldn't get done because you",
    "start": "979470",
    "end": "985470"
  },
  {
    "text": "guys have done with beta 004,\nand I want to get your feedback saying in the next year whether\nshould I go and rework it",
    "start": "985470",
    "end": "993720"
  },
  {
    "text": "for beta. So if you [INAUDIBLE] a machine,\nI think there are four things",
    "start": "993720",
    "end": "1000240"
  },
  {
    "text": "we have to worry about-- memory, registers\nALU, and the control.",
    "start": "1000240",
    "end": "1006839"
  },
  {
    "text": "So ALU is where most of\nthe operations happened. And in x86, 64, the\noperations are in this form.",
    "start": "1006840",
    "end": "1021200"
  },
  {
    "text": "There are two things. Normal risk is what we\ncall a 3 address fault. So it takes one register.",
    "start": "1021200",
    "end": "1027526"
  },
  {
    "text": "Another register operates\n[INAUDIBLE] put it in the third register. x86 is a little bit different.",
    "start": "1027526",
    "end": "1032660"
  },
  {
    "text": "What it do is it\nhas two operands. It takes one operand\nand a second operand,",
    "start": "1032660",
    "end": "1038569"
  },
  {
    "text": "modify it, and put it\nonto the second operand. Another interesting\nthing about x86 is that these\noperands [INAUDIBLE]",
    "start": "1038569",
    "end": "1047343"
  },
  {
    "text": "arithmetic doesn't\nhave to be registers. In risk machines, everything\nhas to be registered. So you bring things\ninto registers using explicit load\nand store instructions.",
    "start": "1047343",
    "end": "1054482"
  },
  {
    "text": "And then all the virtual\nwork happening in registers. In x86, you can directly\nwork inside memory because you don't have that many\nregisters so that's the idea.",
    "start": "1054482",
    "end": "1061560"
  },
  {
    "text": "So you directly\nwork with memory. You don't have to\ndeal with registers. And then there are also\n[INAUDIBLE] operations like increment, decrement\nthat you do one operand.",
    "start": "1061560",
    "end": "1070390"
  },
  {
    "text": "And operands could be immediate. So you can give immediate\ninteger to operand.",
    "start": "1070390",
    "end": "1076780"
  },
  {
    "text": "It can be registered\nimmediately. It could be integer,\naddress, whatever if you have an immediate address. I don't think you guys will\nhave hard code address.",
    "start": "1076780",
    "end": "1083470"
  },
  {
    "text": "But if you can hard\ncode address in there-- or register or memory. So memory is you can either\ngive direct hard code",
    "start": "1083470",
    "end": "1090550"
  },
  {
    "text": "memory addresses, which\nyou probably won't do. It's mainly off some register\nthat keeps the memory address.",
    "start": "1090550",
    "end": "1096220"
  },
  {
    "text": "And you can actually go offset. So you can actually\noffset from that. And it's negative\nor positive offset.",
    "start": "1096220",
    "end": "1104140"
  },
  {
    "text": "And operations are you can\ndo arithmetic operation, adds an integer multiply\nlogic operations.",
    "start": "1104140",
    "end": "1110390"
  },
  {
    "text": "And also, there are things\nlike unit operations, like increment, decrement\nthat you can use.",
    "start": "1110390",
    "end": "1115480"
  },
  {
    "text": " One thing is you'd always\nthink about what can happen.",
    "start": "1115480",
    "end": "1125260"
  },
  {
    "text": "Most of these\narithmetic operations actually can cause exceptions. So we are not dealing\nwith exceptions, but in debugging\nkind of situations,",
    "start": "1125260",
    "end": "1131920"
  },
  {
    "text": "if suddenly you realize control\nis completely going somewhere, you think, OK, I did\nsomething bad that actually caused this exception?",
    "start": "1131920",
    "end": "1139020"
  },
  {
    "text": "And also, there are\ndifferent data types. So in x86, with all the baggage,\nit can do 8, 16, and 32 bits.",
    "start": "1139020",
    "end": "1146640"
  },
  {
    "text": "And in fact, in this class,\nwe will concentrate everything on 64-bit because\nthen you don't have to deal with all the conversion\nissues and stuff like that.",
    "start": "1146640",
    "end": "1153600"
  },
  {
    "text": "Everything is 64-bit\nand no questions asked. So no [INAUDIBLE]\nbecause the nice thing is addresses, data, everything\nworks in there nicely.",
    "start": "1153600",
    "end": "1160770"
  },
  {
    "text": "So you can actually do\neverything, every instruction, by adding the last letter\nQ, saying quad [INAUDIBLE]..",
    "start": "1160770",
    "end": "1167190"
  },
  {
    "text": "So add q, mq, or\nstuff like that. Or if you actually give\nthe right argument,",
    "start": "1167190",
    "end": "1172680"
  },
  {
    "text": "it will figure it out itself. So if you want to be safe,\nyou need to generate down, just generate add, you\ncan generate add q.",
    "start": "1172680",
    "end": "1177919"
  },
  {
    "text": "So you know that because\nif your arguments, if you do something\nwrong, if you",
    "start": "1177920",
    "end": "1184110"
  },
  {
    "text": "think it's a 32-bit and\nactually [INAUDIBLE].. Otherwise it will\nbe hard to debug.",
    "start": "1184110",
    "end": "1190170"
  },
  {
    "text": "You all know that. But if you do add q, it\nwill complain and say, look, I couldn't do that. So that's much easier.",
    "start": "1190170",
    "end": "1196184"
  },
  {
    "text": "And things like there are signed\nand unsigned arithmetic, which we don't [INAUDIBLE] guys\nworry about, the entire class",
    "start": "1196185",
    "end": "1201510"
  },
  {
    "text": "of floating point, separate\nvalues, separate registers, which we are not worrying\nabout in this class. But it's always good\nto know that you",
    "start": "1201510",
    "end": "1207790"
  },
  {
    "text": "have all those things in there. Control-- handle\ninstruction sequencing.",
    "start": "1207790",
    "end": "1214260"
  },
  {
    "text": "The simple thing is easy. [INAUDIBLE] numerical\ninstructions come from memory.",
    "start": "1214260",
    "end": "1219450"
  },
  {
    "text": "Keep fetch and executing. There's a program counter\nthat does that, this thing. And the simple control is\neasy, but the interesting thing",
    "start": "1219450",
    "end": "1228965"
  },
  {
    "text": "is actually, if\nyou want, instead of going to execute an\nextended instruction, the next instruction, if you\nwant to go do change control--",
    "start": "1228965",
    "end": "1236190"
  },
  {
    "text": "and there are\nunconditional branches, things like fetch\nnext instruction from a different location.",
    "start": "1236190",
    "end": "1241290"
  },
  {
    "text": "And in x86, the main thing\nis the jump instruction.",
    "start": "1241290",
    "end": "1247440"
  },
  {
    "text": "You can a jump to label. Or you can jump to\naddress in a register.",
    "start": "1247440",
    "end": "1253710"
  },
  {
    "text": "So you have to [INAUDIBLE]. It's a calculated address\nin the second one. And then there are\nspecial instructions",
    "start": "1253710",
    "end": "1259530"
  },
  {
    "text": "to handle procedure call. So in some times, what you\nhave is in risk architecture, you actually had to set up\nall those things yourself.",
    "start": "1259530",
    "end": "1265710"
  },
  {
    "text": "Here, [INAUDIBLE]\none instruction will deal everything, push the\nreturn address into the stack,",
    "start": "1265710",
    "end": "1271290"
  },
  {
    "text": "and go there. So you either can\ndo with the label,",
    "start": "1271290",
    "end": "1276300"
  },
  {
    "text": "or you can actually go with\nthe address and register.",
    "start": "1276300",
    "end": "1281710"
  },
  {
    "text": "And other thing is\nconditioner branches. Conditioner branches is in\nx86 [INAUDIBLE] a little bit",
    "start": "1281710",
    "end": "1290450"
  },
  {
    "text": "different from risk. Risk architecture\nhas an operation that gives you both\nregisters to do",
    "start": "1290450",
    "end": "1297200"
  },
  {
    "text": "the condition and the target. So it says grant greater than\nor equal to two registers.",
    "start": "1297200",
    "end": "1305120"
  },
  {
    "text": "You do the comparison. And then if the branch is\ntrue, go to the target. So it's a single instruction.",
    "start": "1305120",
    "end": "1311270"
  },
  {
    "text": "In x86, you have to\nseparate the two things. What happens is every\narithmetic operation",
    "start": "1311270",
    "end": "1318380"
  },
  {
    "text": "creates some side effects\ninto this condition code. So every operation, if it\nis overflow, underflow,",
    "start": "1318380",
    "end": "1326090"
  },
  {
    "text": "or if the value is 0, whatever,\nthese condition codes get updated.",
    "start": "1326090",
    "end": "1331610"
  },
  {
    "text": "And also, there's an\nexplicit instruction, compare instruction, that\nwill do the comparison and update the condition code.",
    "start": "1331610",
    "end": "1337940"
  },
  {
    "text": "So the last one, the last\nprevious arithmetic operation of compare instruction,\nupdate these condition codes.",
    "start": "1337940",
    "end": "1344300"
  },
  {
    "text": "And then you do\nconditional jumps depending on what's\nin the condition code. And it's the\ninstruction is something",
    "start": "1344300",
    "end": "1350840"
  },
  {
    "text": "like JS something something,\neither for a label or register, so what the something\nsomething, this huge list,",
    "start": "1350840",
    "end": "1357140"
  },
  {
    "text": "you can [INAUDIBLE]\noverflow, [INAUDIBLE] carry. If it is equal, the\nanswer is 0, if it is not",
    "start": "1357140",
    "end": "1362937"
  },
  {
    "text": "equal-- there are\nall these things you can go look at manual and\nfigure out what it is. Again, I would caution you to go\ncrazy on all the possibilities",
    "start": "1362937",
    "end": "1371823"
  },
  {
    "text": "because what you realize is\nif you come up with all the 20 possibilities and\ngenerate the instructions,",
    "start": "1371823",
    "end": "1376850"
  },
  {
    "text": "when you start\ndoing optimization, you need to understand all\nthose 20 possibilities, and you all go crazy\nand say, Dan, I'm",
    "start": "1376850",
    "end": "1381860"
  },
  {
    "text": "going to have this\nhuge case statements. Just minimal instructions\nare generated now.",
    "start": "1381860",
    "end": "1387050"
  },
  {
    "text": "Makes your life a lot\neasy in optimization because at that point,\nyour case statement was [INAUDIBLE] much\neasier, much simpler,",
    "start": "1387050",
    "end": "1393320"
  },
  {
    "text": "because you only have to\nunderstand a few things. So even though there's\nmany, just don't go crazy.",
    "start": "1393320",
    "end": "1398420"
  },
  {
    "text": "Just do the fewest possible\nthings and then go on. ",
    "start": "1398420",
    "end": "1404540"
  },
  {
    "text": "And then there are\nexception controlled process that you don't have to\nworry about that one. Claps, exceptions--\nthere are a lot of--",
    "start": "1404540",
    "end": "1412890"
  },
  {
    "text": "in this basically,\nthe operating system will take care of--\nsave the current context and go to a trap handler.",
    "start": "1412890",
    "end": "1419710"
  },
  {
    "text": "Most of this code is written in\nassembly, and for our purposes, it just looks like\neither assembly written",
    "start": "1419710",
    "end": "1426700"
  },
  {
    "text": "or some system calls\nthat deal with that. So the compiler\ndoesn't have to worry about most of these\nthings, especially at least",
    "start": "1426700",
    "end": "1432570"
  },
  {
    "text": "[INAUDIBLE]. So here's a question. Because there are a\nlot of different types of control flow you have--",
    "start": "1432570",
    "end": "1438210"
  },
  {
    "text": "jumps, calls, jump from\nregisters, conditional jumps--",
    "start": "1438210",
    "end": "1444149"
  },
  {
    "text": "when would we use each\nof these in our compiler?",
    "start": "1444150",
    "end": "1451170"
  },
  {
    "text": "When would we use\na jump to a label? ",
    "start": "1451170",
    "end": "1458070"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: So jump to label.",
    "start": "1458070",
    "end": "1464269"
  },
  {
    "text": "Yeah, you are there, but\nwouldn't an if statement would be a jump conditional?",
    "start": "1464270",
    "end": "1470490"
  },
  {
    "text": "AUDIENCE: Yeah, [INAUDIBLE]. AUDIENCE: [INAUDIBLE] ",
    "start": "1470490",
    "end": "1475640"
  },
  {
    "text": "PROFESSOR: Break and continue. That's [INAUDIBLE] again,\nyeah, continue could be a jump.",
    "start": "1475640",
    "end": "1481700"
  },
  {
    "text": "And also, even also, the other\nthing about if statements-- so I actually-- it's a little bit\nof a trick question",
    "start": "1481700",
    "end": "1486920"
  },
  {
    "text": "because if statement, the\nfirst branch in here--",
    "start": "1486920",
    "end": "1491990"
  },
  {
    "text": "let me see. So you have two\nregions [INAUDIBLE]..",
    "start": "1491990",
    "end": "1497440"
  },
  {
    "text": "And then do the condition. And so this is a\nconditional jump here. This is a conditional jump. This is a [INAUDIBLE]\nor something like that.",
    "start": "1497440",
    "end": "1504500"
  },
  {
    "text": "But when you get to here, you\nneed to jump over this guy. And that is just a jump\nbecause you have [INAUDIBLE]..",
    "start": "1504500",
    "end": "1512507"
  },
  {
    "text": "So you have a jump over\nthis thing to here. So you are in the if, you\nwill have a jump statement.",
    "start": "1512508",
    "end": "1518920"
  },
  {
    "text": "Call, I guess it's obvious. So if you do a\nfunction call, you are doing a call to a\nfunction call label.",
    "start": "1518920",
    "end": "1525520"
  },
  {
    "text": "Would we ever use a\njump from a register? Address given in a register?",
    "start": "1525520",
    "end": "1532570"
  },
  {
    "text": "AUDIENCE: If we have\na switch statement. PROFESSOR: Yeah,\nthat's a good one. So [INAUDIBLE] have\nswitch statements.",
    "start": "1532570",
    "end": "1538150"
  },
  {
    "text": "Can somebody, anybody,\nelaborate more on that? I mean, how would a switch\nstatement go from a register?",
    "start": "1538150",
    "end": "1545730"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "1545730",
    "end": "1556030"
  },
  {
    "text": "PROFESSOR: So a lot of\ntimes, sometimes what happens is if the switch statement has\na very dense number of values,",
    "start": "1556030",
    "end": "1564750"
  },
  {
    "text": "so you can have\nnormally a jump table. So you have all the\naddresses in there. So you can look at\nthat in integer.",
    "start": "1564750",
    "end": "1570440"
  },
  {
    "text": "If it is passed, it's\nhard to do a jump table because if\nyou [INAUDIBLE],, you offset from that one.",
    "start": "1570440",
    "end": "1576960"
  },
  {
    "text": "So the base, add that,\nand you get that address. And you can jump from that. Yeah, that's that.",
    "start": "1576960",
    "end": "1582740"
  },
  {
    "text": "And if your language supports\npassing function pointers,",
    "start": "1582740",
    "end": "1588252"
  },
  {
    "text": "so the function pointer\nwill come as a register and you can do that. How about the next one?",
    "start": "1588252",
    "end": "1595110"
  },
  {
    "text": "It's a crazy one too.  [INAUDIBLE] do conditional jump.",
    "start": "1595110",
    "end": "1602150"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Yeah, but\nconditional jump from--",
    "start": "1602150",
    "end": "1610231"
  },
  {
    "text": "this is probably\na bit of crazy one out from calculated address,\naddress some calculated.",
    "start": "1610232",
    "end": "1617590"
  },
  {
    "text": " These kind of things come in\nthings like method dispatch",
    "start": "1617590",
    "end": "1625660"
  },
  {
    "text": "type stuff because if you\nare doing something like--",
    "start": "1625660",
    "end": "1633320"
  },
  {
    "text": " what's a good example?",
    "start": "1633320",
    "end": "1640178"
  },
  {
    "text": "This is a little bit\ntoo crazy one unless-- AUDIENCE: [INAUDIBLE] PROFESSOR: Yeah, exception\nhandler type stuff, yeah. That's a good one\nbecause exception",
    "start": "1640178",
    "end": "1645794"
  },
  {
    "text": "handler, when you go\nto exception handler to do these kind of\nthings to get out there. The next one is, basically,\nI guess, top of if then else,",
    "start": "1645795",
    "end": "1653370"
  },
  {
    "text": "you can do that. So here we go. So the next thing is memory.",
    "start": "1653370",
    "end": "1661370"
  },
  {
    "text": "It's composed of words, byte,\naddress addressable in here. And what we will do for this\n[INAUDIBLE] purpose is we",
    "start": "1661370",
    "end": "1667550"
  },
  {
    "text": "will basically look at code\nwords, at 64-bit words, because that makes our\nlife a hell a lot simpler.",
    "start": "1667550",
    "end": "1673880"
  },
  {
    "text": "Than we don't have to\ndo with anything else. So in memory, we usually\nstore everything. We store a program, local\nvariables, global stack, heap.",
    "start": "1673880",
    "end": "1681920"
  },
  {
    "text": "Everything has to\ngo in the memory. So normally what happens\nis by convention,",
    "start": "1681920",
    "end": "1691289"
  },
  {
    "text": "the memory in the address space\nget assigned in some format. In the x86 64 format has been--",
    "start": "1691290",
    "end": "1699653"
  },
  {
    "text": "at the beginning, there are\nsome unmet memory that's used for system purposes. And at some point, the\ntext segment gets started.",
    "start": "1699653",
    "end": "1706473"
  },
  {
    "text": "That's where the program is. That's where most\nof our stuff is. And then after that,\nthere's a data segment. That has basically global and\nread only memory in there.",
    "start": "1706473",
    "end": "1714270"
  },
  {
    "text": "And then you have two\nsegments that start growing in opposite direction. One is the stack that\nstarted growing down",
    "start": "1714270",
    "end": "1720179"
  },
  {
    "text": "and one is the heap\nthat start growing up. So that region,\nthe key thing is we",
    "start": "1720180",
    "end": "1728087"
  },
  {
    "text": "don't have to worry that much\nabout the heap because we are not doing [INAUDIBLE]\nor anything like that.",
    "start": "1728088",
    "end": "1733710"
  },
  {
    "text": "Most of our data is static. So that part doesn't come into\nit, but stack we'll deal with.",
    "start": "1733710",
    "end": "1739710"
  },
  {
    "text": "And then rest registers-- so why do you need registers?",
    "start": "1739710",
    "end": "1745110"
  },
  {
    "text": "Actually, in x86, you don't\nneed registers that much. In a risk architecture, what\nhappens is every arithmetic",
    "start": "1745110",
    "end": "1750870"
  },
  {
    "text": "operation only happens from\nregisters to registers. So everything has to\ncome to register just to do the operation.",
    "start": "1750870",
    "end": "1757080"
  },
  {
    "text": "In [INAUDIBLE],, you can actually\ndo some arithmetic operations",
    "start": "1757080",
    "end": "1764500"
  },
  {
    "text": "direct from memory. But there are limitations. For example, I can't do add from\nsome memory to another memory.",
    "start": "1764500",
    "end": "1769515"
  },
  {
    "text": "It doesn't have\nthat instruction. It's just invalid. But I can do the other two. I can do add from some memory\nto register and register",
    "start": "1769515",
    "end": "1776409"
  },
  {
    "text": "to some memory. So that's why this\ncraziness is basically",
    "start": "1776410",
    "end": "1781620"
  },
  {
    "text": "you try to generate that. And at some point,\nit doesn't work, and then you read the manual in\nthis very small print in 5,000",
    "start": "1781620",
    "end": "1790549"
  },
  {
    "text": "pages [INAUDIBLE] something\nand say, by the way, you cannot do that. So just stay with\nthe simple things.",
    "start": "1790550",
    "end": "1795610"
  },
  {
    "text": "So for that, you\nneed a register. And I think most important,\nregisters give you performance",
    "start": "1795610",
    "end": "1802990"
  },
  {
    "text": "because unlike a memory\naddress you [INAUDIBLE] access, you had to go access this. And registers basically\nis much faster accessible.",
    "start": "1802990",
    "end": "1811280"
  },
  {
    "text": "There are a lot more parallel. A lot more registers can be\naccessed in a given clock cycle. So there's a lot of\nperformance using registers.",
    "start": "1811280",
    "end": "1816970"
  },
  {
    "text": "So this code generation, we\ndon't care about performance. But as we go into the\nnext two sections,",
    "start": "1816970",
    "end": "1822820"
  },
  {
    "text": "we'll start using registers\nmore and try to get registers. And actually [INAUDIBLE]\nregister location is one of the\noptimizations that you",
    "start": "1822820",
    "end": "1828850"
  },
  {
    "text": "can see a very big\nimprovement in performance when you start doing that. So we'll get there. And there are some\nspecial registers--",
    "start": "1828850",
    "end": "1835810"
  },
  {
    "text": "based pointer, stack\npointer, and also in here, they introduced a new--",
    "start": "1835810",
    "end": "1841250"
  },
  {
    "text": "I think it's called\nRIP, the instruction pointer that points to the\ncurrent instruction being",
    "start": "1841250",
    "end": "1847180"
  },
  {
    "text": "executed. So those are very\nspecial registers that has side effects happening\nfrom instructions to execute",
    "start": "1847180",
    "end": "1857080"
  },
  {
    "text": "And then there are a lot\nof other interactions in the system,\nlike input, output, privileged instructions,\nhandling of [INAUDIBLE]..",
    "start": "1857080",
    "end": "1863905"
  },
  {
    "text": "There are a lot of\ninstructions that deal with this special\nstatus inside the hardware,",
    "start": "1863905",
    "end": "1868960"
  },
  {
    "text": "loading the TLB tables,\nand stuff like that. And for compiler purposes,\nthis is mostly system code.",
    "start": "1868960",
    "end": "1874899"
  },
  {
    "text": "It's hard-- some guy will\nwrite some assembly code, and your system will\nsee a function call. Either it's a system\ncall or a function call.",
    "start": "1874900",
    "end": "1881500"
  },
  {
    "text": "We don't treat [INAUDIBLE]\nand the compiler doesn't even know those instructions. We just ignore them. ",
    "start": "1881500",
    "end": "1888330"
  },
  {
    "text": "So that's kind of a\nvery high level picture of a modern architecture. So the next thing\nI want to look at",
    "start": "1888330",
    "end": "1894780"
  },
  {
    "text": "is memory layout because a\nlot of things we need to put is in memory. So this is the memory\nlayout that came up.",
    "start": "1894780",
    "end": "1900960"
  },
  {
    "text": " We don't have to care\nabout in this [INAUDIBLE] about the dynamic part.",
    "start": "1900960",
    "end": "1909140"
  },
  {
    "text": "But if you are doing\na program like Java, you actually had to deal\nwith the dynamic memory part.",
    "start": "1909140",
    "end": "1916153"
  },
  {
    "text": "So you'll have to come\nup with freelace memory allocator and stuff like that\nand manage the dynamic part.",
    "start": "1916153",
    "end": "1921549"
  },
  {
    "text": "And in the [INAUDIBLE]\nsegment, that's",
    "start": "1921550",
    "end": "1927078"
  },
  {
    "text": "where everything matters. That's where your\ncode is going to be. And if you had\ndynamic data, If you",
    "start": "1927078",
    "end": "1934630"
  },
  {
    "text": "had to allocate that in the\ndynamic part, you probably-- most of the time, you\nprobably have a small runtime system also, small\nlibrary that you include",
    "start": "1934630",
    "end": "1942370"
  },
  {
    "text": "with your compile code not\njust-- because even in a C compile, you come up\nwith just a library that comes with that do\na lot of setup stuff.",
    "start": "1942370",
    "end": "1949390"
  },
  {
    "text": "And that library will deal\nwith things like [INAUDIBLE],, freeing, handling\nthe runtime, handling",
    "start": "1949390",
    "end": "1955240"
  },
  {
    "text": "the dynamic allocation,\nand stuff like that. And in this project,\nyou don't really",
    "start": "1955240",
    "end": "1961000"
  },
  {
    "text": "need to generate\na runtime system because you're not doing things\nthat complicated in there.",
    "start": "1961000",
    "end": "1967660"
  },
  {
    "text": "So the next thing is\nallocating read-only data. So you have a bunch of\ndata that's on read-only.",
    "start": "1967660",
    "end": "1973960"
  },
  {
    "text": "And in here, we basically\nuse the data segment to do [INAUDIBLE] data.",
    "start": "1973960",
    "end": "1979423"
  },
  {
    "text": "So you can actually\nallocate a special segment called read-only segment. But we don't need to\ncomplicate our lives that much.",
    "start": "1979423",
    "end": "1985059"
  },
  {
    "text": "So we have two types\nof read-only data. One is integers. You might actually have explicit\ninteger that you won't use.",
    "start": "1985060",
    "end": "1992180"
  },
  {
    "text": "There the simplest thing\nis to use as immediate. Just don't worry about putting\nit anywhere special place. Just use it as immediate.",
    "start": "1992180",
    "end": "1999160"
  },
  {
    "text": "Return to the instruction,\nand you are done. So here, there's $5 and $16. There are two integers\nyou want to do.",
    "start": "1999160",
    "end": "2005430"
  },
  {
    "text": "And we just immediately--\nyou hard code the thing into the immediate. You can put a 64-bit\nnumber in there",
    "start": "2005430",
    "end": "2012240"
  },
  {
    "text": "if you want to hard\ncode it yourself. And the other thing\nis string data.",
    "start": "2012240",
    "end": "2017560"
  },
  {
    "text": "So you want to print\n[INAUDIBLE] string in there. And at that point,\nwhat you can do",
    "start": "2017560",
    "end": "2022620"
  },
  {
    "text": "is you can use this\nassembler directory called string that basically\nsays, OK at that point,",
    "start": "2022620",
    "end": "2028860"
  },
  {
    "text": "I will allocate memory\nand put that string value in that memory,\ncalculate the memory needed.",
    "start": "2028860",
    "end": "2034375"
  },
  {
    "text": "And then you can put\na label next to it and say, OK, give me the\nposition where it is. And I can use a label\nanywhere I want.",
    "start": "2034375",
    "end": "2040130"
  },
  {
    "text": "So there's an\naccessibility in there. So by using that\nlabel, I can get access to that read only data.",
    "start": "2040130",
    "end": "2046530"
  },
  {
    "text": "The thing about the text segment\nis it's marked read only. You can't write to that\nbecause you don't want",
    "start": "2046530",
    "end": "2051658"
  },
  {
    "text": "people writing on your code. So it's a read only thing,\nbut you can do that. So by doing that, you\ncan actually [INAUDIBLE]",
    "start": "2051659",
    "end": "2056908"
  },
  {
    "text": "read only data.  Then the other type of\nglobal data you want to do",
    "start": "2056909",
    "end": "2062590"
  },
  {
    "text": "is global variables. That, what do you\nwant to do is we",
    "start": "2062590",
    "end": "2067960"
  },
  {
    "text": "want to use-- there's a\ndirective in the assembly called the comm directive. The comm directive\nlets you allocate",
    "start": "2067960",
    "end": "2074710"
  },
  {
    "text": "regions in the data segment. So the comm directive comes with\nthe comm and the name of it.",
    "start": "2074710",
    "end": "2081110"
  },
  {
    "text": "So you can get a symbol name. So it has to be a\nunique symbol name. And you give the size, saying\nhow much, and alignment.",
    "start": "2081110",
    "end": "2087058"
  },
  {
    "text": "How do you want to align? Otherwise, they will\ntry to pack them. And if you-- it's byte aligned. So if you want to do-- I think this is--\nyeah, if you want",
    "start": "2087058",
    "end": "2093750"
  },
  {
    "text": "to do align by four bytes\nor align by eight bytes, you just give that number. And x86, it doesn't matter\nbecause except for performance,",
    "start": "2093750",
    "end": "2102440"
  },
  {
    "text": "x86 internally, there are\nall these conventions. Some alignment gives better\nperformance than others.",
    "start": "2102440",
    "end": "2107640"
  },
  {
    "text": "So it's always\ngood to be aligned in the largest [INAUDIBLE]. It's a mixed bag.",
    "start": "2107640",
    "end": "2113460"
  },
  {
    "text": "So since you are doing\n64-bit of everything, it's always good to\nbe aligned 64-bit. But if you have a lot of 32-bit\nnumbers and 8-bit numbers",
    "start": "2113460",
    "end": "2120140"
  },
  {
    "text": "and stuff like that,\nif you align them all in 64-bit\nboundaries, you're going",
    "start": "2120140",
    "end": "2125567"
  },
  {
    "text": "to waste space if you have\na lot of 8-bit numbers and stuff like that. But your access might be faster. In here, I think for you,\neverything is aligned 8-bit",
    "start": "2125568",
    "end": "2133100"
  },
  {
    "text": "boundaries-- 8-byte boundaries is good.",
    "start": "2133100",
    "end": "2140600"
  },
  {
    "text": "And then you don't have\nthese slowdowns and stuff that happens inside that\nyou don't have any access to whereas some of\nthe architectures",
    "start": "2140600",
    "end": "2147050"
  },
  {
    "text": "that some alignments\nare illegal. Some kind of accesses\nof underlying access",
    "start": "2147050",
    "end": "2152150"
  },
  {
    "text": "underlying memory is illegal. So we have a lot more\nthings to worry about. But here, just everybody\nget aligned to 8 bytes,",
    "start": "2152150",
    "end": "2158150"
  },
  {
    "text": "and you're happy. And another\ninteresting thing here is now after you assign that,\nhow do we access this thing?",
    "start": "2158150",
    "end": "2165859"
  },
  {
    "text": "So one way to do\nthat is get the value",
    "start": "2165860",
    "end": "2172910"
  },
  {
    "text": "of the explicit locations. And this is in address 5,000\nand address saying, OK, now I",
    "start": "2172910",
    "end": "2179210"
  },
  {
    "text": "want to get the data\nfrom address 5,000. That's great. But the problem is it's not\nrelocatable because the minute",
    "start": "2179210",
    "end": "2184609"
  },
  {
    "text": "I relocate that's in, that\naddress 5,000 has to go change. So they came up\nwith this neat trick",
    "start": "2184610",
    "end": "2190099"
  },
  {
    "text": "where what you do\nis you access it using the name that you gives,\nthe symbol name you give.",
    "start": "2190100",
    "end": "2200150"
  },
  {
    "text": "And using RIP-- RIP is not Rest In Peace. It's your instruction pointer.",
    "start": "2200150",
    "end": "2206820"
  },
  {
    "text": "And what it says is it gives\nyou the current instruction location.",
    "start": "2206820",
    "end": "2213080"
  },
  {
    "text": "So what the assembler link\nhas to do is for x, put-- because it knows whether\nit's in the data segment.",
    "start": "2213080",
    "end": "2220160"
  },
  {
    "text": "It's [INAUDIBLE] instruction. Just pi in the distance there\nand put that constant value",
    "start": "2220160",
    "end": "2225560"
  },
  {
    "text": "in there. Because relatively\nfrom the instruction",
    "start": "2225560",
    "end": "2230869"
  },
  {
    "text": "to data, where the data\nis it knows the distance. It doesn't change because\nwhen you relocate, the entire thing will\nget relocated together.",
    "start": "2230870",
    "end": "2236510"
  },
  {
    "text": "So you find that\ndistance at link time or when you generate\nthe object code",
    "start": "2236510",
    "end": "2243410"
  },
  {
    "text": "and plug that list distance\nthere adding to the RIP. So what happens is if this\nentire thing gets relocated,",
    "start": "2243410",
    "end": "2250925"
  },
  {
    "text": "RIP will basically\npoint to, OK, I am here, and I know I have\nthe exact address. And I added that value.",
    "start": "2250925",
    "end": "2257060"
  },
  {
    "text": "And then I find\nwhere my data is. So I can relocate. I don't have to-- because\na lot of times what happens is if you don't use that,\nyou need to use symbol names.",
    "start": "2257060",
    "end": "2264710"
  },
  {
    "text": "And every time you\nrelocate, you had to go all this use\nof the symbol names. So what normally would\nhappen is instead",
    "start": "2264710",
    "end": "2271039"
  },
  {
    "text": "of putting in this\nform, you can say, I am going to have variable x. And in the compiler,\nthe assembler",
    "start": "2271040",
    "end": "2278120"
  },
  {
    "text": "can't actually put\nthe exact value. It puts some space in there. And when you relocate,\nit says, OK, by the way,",
    "start": "2278120",
    "end": "2283640"
  },
  {
    "text": "go figure out where x is. And all the places that\nx is being used, just go update that location.",
    "start": "2283640",
    "end": "2289670"
  },
  {
    "text": "And so the link [INAUDIBLE]\nhas all this additional work to go look at relocation\ntables and go keep updating.",
    "start": "2289670",
    "end": "2296589"
  },
  {
    "text": "By doing this, you\ndon't have to do that. So there's no updates that\nneeds to happen in the loader because loader just runs it.",
    "start": "2296590",
    "end": "2301630"
  },
  {
    "text": "And at runtime, it will\nfigure out my current place, calculate, and I'm done.",
    "start": "2301630",
    "end": "2307609"
  },
  {
    "text": "Is that clear how that works? Simple. And then the\nassembler and linker",
    "start": "2307610",
    "end": "2314590"
  },
  {
    "text": "will take care of\nall these things. You don't have to do that. And another nice\nthing about doing that is when you use comex,\nwhen you go to the debugger,",
    "start": "2314590",
    "end": "2321190"
  },
  {
    "text": "you can actually see the symbol. You don't see just\nbyte or certain stuff. You can actually look at the\nsymbol, and it helps you debug.",
    "start": "2321190",
    "end": "2330650"
  },
  {
    "text": "So now we have global\nstatic variables also. So that's mainly about memory.",
    "start": "2330650",
    "end": "2337849"
  },
  {
    "text": "And the next interesting thing\nis procedures abstraction. So in procedures, this is a one\nvery nice thing that we have",
    "start": "2337850",
    "end": "2347170"
  },
  {
    "text": "come up to basically deal\nwith many weirdnesses going",
    "start": "2347170",
    "end": "2354059"
  },
  {
    "text": "on inside the system because if\nyou don't-- because the thing is, either you can\nagree on everything--",
    "start": "2354060",
    "end": "2360480"
  },
  {
    "text": "every compiler, you have to\nagree on exactly what you do everywhere. That's very hard\nbecause you need to give freedom for\ndifferent systems,",
    "start": "2360480",
    "end": "2366583"
  },
  {
    "text": "different people doing that. But if you give freedom,\nit doesn't really-- you can't interpret. And here, what\nhappens is we came up",
    "start": "2366583",
    "end": "2373080"
  },
  {
    "text": "with this set of agreements that\ninvolve architecture, operating system, and compiler and\nwhere people interact and say,",
    "start": "2373080",
    "end": "2381048"
  },
  {
    "text": "OK, these are the things\nwhere people have to interact. And if you are doing that, you\nhave to follow this covenant.",
    "start": "2381048",
    "end": "2387460"
  },
  {
    "text": "And because of doing that,\nyou can actually get access to system-wide facilities,\nthings like storage,",
    "start": "2387460",
    "end": "2394240"
  },
  {
    "text": "flow control,\ninterrupts, interface between many different things. And everybody can coexist\nbecause those things have",
    "start": "2394240",
    "end": "2401110"
  },
  {
    "text": "a very well-defined interface. And what it does is\nwithin the procedure,",
    "start": "2401110",
    "end": "2408760"
  },
  {
    "text": "it gives you private stuff,\nand it gives you control and say it's up to you to\nfigure out how to deal inside. I'm not going to go dictate\nwhat happens inside.",
    "start": "2408760",
    "end": "2416680"
  },
  {
    "text": "And it's your privacy. You can go to whatever. But I will have this\ninterface that when you come out and interact\nwith global resources,",
    "start": "2416680",
    "end": "2424450"
  },
  {
    "text": "I can work together. And in some sense, it's\nalmost like a social contract. There's no explicit\nhardware things.",
    "start": "2424450",
    "end": "2432130"
  },
  {
    "text": "There's no enforcement\nin many cases. This is basically-- it's in the\nmanual that basically do that.",
    "start": "2432130",
    "end": "2438420"
  },
  {
    "text": "And so in some sense, between\noperating system and operating system, things can change. Linux has a different\ncontract than Windows.",
    "start": "2438420",
    "end": "2445000"
  },
  {
    "text": "And the architecture has\nobviously a different contract. So it's basically\nsomething that you enforce",
    "start": "2445000",
    "end": "2451330"
  },
  {
    "text": "within that environment. ",
    "start": "2451330",
    "end": "2457050"
  },
  {
    "text": "So in practical,\nbasically what it does is you can deal with multiple\nprocedures, multiple libraries,",
    "start": "2457050",
    "end": "2462830"
  },
  {
    "text": "different things compiled\nwith different languages, different compilers,\nhandwritten assembly.",
    "start": "2462830",
    "end": "2467900"
  },
  {
    "text": "All can participate in\none gigantic program. In fact, if you start\ncompiling, if you do printf,",
    "start": "2467900",
    "end": "2473930"
  },
  {
    "text": "you aren't compiling printf. Printf has been compiled\nby some other compiler that",
    "start": "2473930",
    "end": "2480950"
  },
  {
    "text": "got released with the compiler\nsystem that come through that gets linked with LIBC.",
    "start": "2480950",
    "end": "2488060"
  },
  {
    "text": "And then you're using that. And that's not decaf. That's something different. And so all those things\nwork because there's",
    "start": "2488060",
    "end": "2495650"
  },
  {
    "text": "this very nice interface. And what we have to do is\nthen everything that's global,",
    "start": "2495650",
    "end": "2502262"
  },
  {
    "text": "we need to actually\nfigure out when you are going interface\nand things like parameter passing [INAUDIBLE]\nyou pass parameters",
    "start": "2502262",
    "end": "2507500"
  },
  {
    "text": "between outside world\nand [INAUDIBLE] what's the convention there. Registers, stack, calling\nconvention-- all those things",
    "start": "2507500",
    "end": "2513890"
  },
  {
    "text": "you have to worry about. In fact, we have a simplified\ncalling convention for decaf.",
    "start": "2513890",
    "end": "2519650"
  },
  {
    "text": "So what that really means, that\nyou cannot directly call from decaf to a libc function. So what Punya is\ngoing to give you",
    "start": "2519650",
    "end": "2526040"
  },
  {
    "text": "is he's going to give a wrapper\nfunction that basically deals with that because the\ncalling conventions has all this additional weird\nrules of where the return",
    "start": "2526040",
    "end": "2533210"
  },
  {
    "text": "address comes and some\npart comes and registers. I'll go that detail. So instead of coming up with\nthis very complex calling",
    "start": "2533210",
    "end": "2538880"
  },
  {
    "text": "convention, we give you a very\nsimple calling convention. So what that means is when\nyou are calling functions, it actually has to go to the\nright calling convention.",
    "start": "2538880",
    "end": "2547769"
  },
  {
    "text": "So one main thing\ncalling convention does is you do\nparameter passing.",
    "start": "2547770",
    "end": "2554300"
  },
  {
    "text": "So between call and call,\nyou pass some parameters. So there are three\nways of doing this.",
    "start": "2554300",
    "end": "2561480"
  },
  {
    "text": "One is called by\ncall by reference. So what that means is I\nhave some variable sitting",
    "start": "2561480",
    "end": "2567589"
  },
  {
    "text": "in some location. OK, when I pass that variable\ninto a function call,",
    "start": "2567590",
    "end": "2574300"
  },
  {
    "text": "they also see the same location. OK so when they read from\nthe same location, then",
    "start": "2574300",
    "end": "2580300"
  },
  {
    "text": "they modified that\nsame location. So basically, they got\ninto my variable in there.",
    "start": "2580300",
    "end": "2586260"
  },
  {
    "text": "OK, that's what's called\ncall by reference. Call by value, on\nthe other hand, say, OK, I'm calling a function.",
    "start": "2586260",
    "end": "2593620"
  },
  {
    "text": "What I will do is I\nwill take my variable. I will copy it to\nyour new location, and I'll give it to you.",
    "start": "2593620",
    "end": "2599980"
  },
  {
    "text": "And then you own it,\nand anything you do, I don't see changes. I have my own variable. You got a copy when I\nactually [INAUDIBLE] call,",
    "start": "2599980",
    "end": "2606150"
  },
  {
    "text": "and you have that. The call by value\nresult is kind of weird. The call by value result is\nwhen I'm actually calling,",
    "start": "2606150",
    "end": "2612730"
  },
  {
    "text": "I will give you a copy. I have my variable. I don't give it to you. You go change your variable.",
    "start": "2612730",
    "end": "2617950"
  },
  {
    "text": "You modify. You see your variable that\nyou get a pass as an argument.",
    "start": "2617950",
    "end": "2624010"
  },
  {
    "text": "And then when you\nreturn, I will basically replace mine with the last\nvalue you had with yours.",
    "start": "2624010",
    "end": "2629260"
  },
  {
    "text": " So when he's running,\nthere are two copies.",
    "start": "2629260",
    "end": "2636333"
  },
  {
    "text": "But at the end of the day, it\ncomes and modifies me again. So it's somewhere in between\na reference and a value.",
    "start": "2636333",
    "end": "2642270"
  },
  {
    "text": "So here's a question. So I have this\nsmall program that",
    "start": "2642270",
    "end": "2648520"
  },
  {
    "text": "has one global variable\nA. I call a function fu. And fu has the local\nvariable, basically argument B",
    "start": "2648520",
    "end": "2659560"
  },
  {
    "text": "that it gets. And then I do these\ntwo operations. So if I do call by value,\nat the end of this function,",
    "start": "2659560",
    "end": "2666720"
  },
  {
    "text": "what should be in A?  AUDIENCE: 7.",
    "start": "2666720",
    "end": "2672340"
  },
  {
    "text": "PROFESSOR: Yeah,\nbecause what happens is I copy it then into this\nnew location that has B.",
    "start": "2672340",
    "end": "2679720"
  },
  {
    "text": "And I'm only modifying B.\nI'm not modifying A at all. Great. How about call by reference?",
    "start": "2679720",
    "end": "2685800"
  },
  {
    "start": "2685800",
    "end": "2704263"
  },
  {
    "text": "AUDIENCE: 21. PROFESSOR: I have 21. Any other takers?",
    "start": "2704263",
    "end": "2710840"
  },
  {
    "text": "AUDIENCE: 22. PROFESSOR: Oh, 22. ",
    "start": "2710840",
    "end": "2716320"
  },
  {
    "text": "Any other takers? OK, how many people think 21? ",
    "start": "2716320",
    "end": "2721609"
  },
  {
    "text": "How many people think 22? OK, so the easiest way\nto think about that",
    "start": "2721610",
    "end": "2727750"
  },
  {
    "text": "is there's no difference between\nB and A. So replace B with A because it's always going\nto the same location.",
    "start": "2727750",
    "end": "2732920"
  },
  {
    "text": "So what happens is\nthen instead of B, you have A equals A plus 1. So it becomes 11.",
    "start": "2732920",
    "end": "2738010"
  },
  {
    "text": "Then it becomes A equals A\nplus A, which becomes 22. OK, how about value result?",
    "start": "2738010",
    "end": "2744440"
  },
  {
    "start": "2744440",
    "end": "2753368"
  },
  {
    "text": "AUDIENCE: 21. PROFESSOR: 21. That's 21 because the old\nvalue still keeps there.",
    "start": "2753368",
    "end": "2758640"
  },
  {
    "text": "And when you see A, you're\nstill getting the old A. But at the end of the day,\nyou go and smash A.",
    "start": "2758640",
    "end": "2764040"
  },
  {
    "text": "So there we go. ",
    "start": "2764040",
    "end": "2771490"
  },
  {
    "text": "So parameter passing-- so you\nhave all these conventions. You can do it in\nmany different ways. You can pass it in the stack.",
    "start": "2771490",
    "end": "2777890"
  },
  {
    "text": "You can pass it via registers\nor do some kind of combination. In fact, the normal calling\nconvention is a combination.",
    "start": "2777890",
    "end": "2785030"
  },
  {
    "text": "It says you need to\nhave, for the first, I think, five\nparameters you passed,",
    "start": "2785030",
    "end": "2790369"
  },
  {
    "text": "you pass the parameter\nin the register, but you still have to have some\nmemory allocated in the stack",
    "start": "2790370",
    "end": "2796340"
  },
  {
    "text": "because if you want to spill,\nyou have a location to spill. So you get the value\nin registers you don't have to get from the memory.",
    "start": "2796340",
    "end": "2801770"
  },
  {
    "text": "And after the fifth, it's\nall in the [INAUDIBLE] because you won't\nrun out of registers. So that's too complicated\nto deal with in the class.",
    "start": "2801770",
    "end": "2807597"
  },
  {
    "text": "So we said, OK, everything\ncomes from the stack. You don't deal\nwith the registers. So we came up with a much\nsimpler scheme in there.",
    "start": "2807597",
    "end": "2816099"
  },
  {
    "text": "So another thing\nabout registers is it's all the same\nsimple set of registers.",
    "start": "2816100",
    "end": "2821910"
  },
  {
    "text": "So what happened when\nyou have a register and when you call a function?",
    "start": "2821910",
    "end": "2828110"
  },
  {
    "text": "Because within the function,\nyou want a register. You manage them. But now if I do a function\ncall, what do I do to registers?",
    "start": "2828110",
    "end": "2836990"
  },
  {
    "text": "There are two types\nof things in there. One is called caller saved and\none is called calliee saved.",
    "start": "2836990",
    "end": "2843599"
  },
  {
    "text": "In the caller saved, thing says,\nif I am calling a function,",
    "start": "2843600",
    "end": "2849390"
  },
  {
    "text": "and at the end of\nthe function call, if I want the register to\nhave the same value, that",
    "start": "2849390",
    "end": "2856380"
  },
  {
    "text": "means the value has to be\nalive through the function. I would save it\nbecause it's my duty.",
    "start": "2856380",
    "end": "2862950"
  },
  {
    "text": "The function is to save my\nvalues through the call. Calliee saves it,\nit's not my duty,",
    "start": "2862950",
    "end": "2871400"
  },
  {
    "text": "but the function will guarantee\nthat register value survives across the function.",
    "start": "2871400",
    "end": "2876990"
  },
  {
    "text": "So what that means is\nif I have a function, when the function gets\nstarted, if there's any kind of a calliee saved\nregisters in there that I",
    "start": "2876990",
    "end": "2884720"
  },
  {
    "text": "am going to use,\nI better save it because the other guy who\ncalled me expects the same value to come out of them.",
    "start": "2884720",
    "end": "2890480"
  },
  {
    "text": "So I have to save\nit in that function. OK, so there are two\ndifferent conventions.",
    "start": "2890480",
    "end": "2895750"
  },
  {
    "text": "The interesting\nthing is what are the advantages of these two. So assume you have half your\nregisters at caller saved.",
    "start": "2895750",
    "end": "2903640"
  },
  {
    "text": "Half of them are calliee saved. When would you use what? ",
    "start": "2903640",
    "end": "2921650"
  },
  {
    "text": "AUDIENCE: Caller saved\nwould have the advantage of not going to save [INAUDIBLE]\ndo any extra work when you",
    "start": "2921650",
    "end": "2930260"
  },
  {
    "text": "don't care about the\n[INAUDIBLE] and all you care about is the value\nof the function [INAUDIBLE]..",
    "start": "2930260",
    "end": "2936367"
  },
  {
    "text": "PROFESSOR: So in some\nsense, what I would do is if I have some\nvalues, that doesn't need",
    "start": "2936367",
    "end": "2943510"
  },
  {
    "text": "to get survived across a call. It's great to put\nthat in a call and say",
    "start": "2943510",
    "end": "2949030"
  },
  {
    "text": "register because I\ndon't have to save it. And I'm eliminating\nsomething that I [INAUDIBLE]..",
    "start": "2949030",
    "end": "2955779"
  },
  {
    "text": "So I keep all the\nvalues that doesn't need to survive in caller saved,\nand I don't have to save it.",
    "start": "2955780",
    "end": "2963380"
  },
  {
    "text": "And anything I want to survive\nacross the function call, I put it in calliee saved. I just pass the buck\ndown and say, look,",
    "start": "2963380",
    "end": "2969430"
  },
  {
    "text": "I'm not doing any work. We better let the\ncalliee deal with it. I'm going to save that. That's one way to do that.",
    "start": "2969430",
    "end": "2975070"
  },
  {
    "text": "And in the calliee\nsave side, what you do is if you can only\nget the function executed",
    "start": "2975070",
    "end": "2983770"
  },
  {
    "text": "using half the registers,\nyou use all the caller save registers\nbecause I don't have",
    "start": "2983770",
    "end": "2989540"
  },
  {
    "text": "to say it at all because\nthe other guy is supposed to save it for me. So if I only need-- assume I have 16 digits.",
    "start": "2989540",
    "end": "2995370"
  },
  {
    "text": "If I only need 8, I need the 8\ncaller saved registers and I'm done for because I don't do\nany kind of saves and restores",
    "start": "2995370",
    "end": "3000619"
  },
  {
    "text": "in there. And only you grudgingly\nstart adding calliee saves if you had\nto go beyond that.",
    "start": "3000620",
    "end": "3006640"
  },
  {
    "text": "And also-- so that's\na nice thing in there. And what that means is\nif each function doesn't",
    "start": "3006640",
    "end": "3014260"
  },
  {
    "text": "need that many registers,\nbetween doing that, you really minimize the spills\nyou can have to do.",
    "start": "3014260",
    "end": "3020904"
  },
  {
    "text": "So I mean, we don't have\nto do have to do this now, but when you're\ndoing generation, these kind of issues\ncome in, and this",
    "start": "3020905",
    "end": "3026333"
  },
  {
    "text": "is interesting they do that.  So in this segment,\nbasically, we",
    "start": "3026333",
    "end": "3035010"
  },
  {
    "text": "don't want you guys to\ndeal with these things. What we are saying\nis [INAUDIBLE] register is very minimal. So I think what Punya did was\nI think he only gave you access",
    "start": "3035010",
    "end": "3042480"
  },
  {
    "text": "to two, three\nregisters, basically, in some sense except for a\nstack point and a frame pointer.",
    "start": "3042480",
    "end": "3049760"
  },
  {
    "text": "But yeah. What I suggest is just\nget it from memory",
    "start": "3049760",
    "end": "3055930"
  },
  {
    "text": "into one temporary registers. All arithmetic basically\nwill have three things. You get two things\nmodified and put to back.",
    "start": "3055930",
    "end": "3064210"
  },
  {
    "text": "Get it from memory to that. Get the other one there. Modify, put it back.",
    "start": "3064210",
    "end": "3069378"
  },
  {
    "text": "Just do that. Do that very simple thing. You can optimize this. I mean, here, you\nlook at this add. Then you can say, hey,\nI don't need to do that.",
    "start": "3069378",
    "end": "3075410"
  },
  {
    "text": "I don't have to move\nto two registers. I can just bring one value\nwhen you use one instruction.",
    "start": "3075410",
    "end": "3081020"
  },
  {
    "text": "It will make your life much\nsimpler in optimization if you have this\nsomething very simple. Otherwise, you created\nthis very complex things,",
    "start": "3081020",
    "end": "3086869"
  },
  {
    "text": "and when you [INAUDIBLE]\noptimizations, you go crazy. So just do the simplest thing. ",
    "start": "3086870",
    "end": "3094500"
  },
  {
    "text": "OK, how are we doing timewise? I guess we have a\nfew more minutes.",
    "start": "3094500",
    "end": "3099640"
  },
  {
    "text": "The other thing is stack\nthat we need to deal with. So there are arguments in\nthe stack that get passed in.",
    "start": "3099640",
    "end": "3107010"
  },
  {
    "text": "And that's the\nprevious stack frame. And your stack frame starts\nwith the return address because when you call,\nthe return address",
    "start": "3107010",
    "end": "3113220"
  },
  {
    "text": "gets put in there. And then there's a frame pointer\nthat you need to put in there. And then you allocate a room\nfor all your local variables",
    "start": "3113220",
    "end": "3121049"
  },
  {
    "text": "and temporaries in there. And then there's a variable\nsize if you do push and pop.",
    "start": "3121050",
    "end": "3127170"
  },
  {
    "text": "I don't think you'll\nhave to do that anyway. You can have variable\nsize going on in there. So so this is how the\nstack should behave.",
    "start": "3127170",
    "end": "3134349"
  },
  {
    "text": "So let me skip that. Procedure linkage--\nso let me see if I can go through this fast.",
    "start": "3134350",
    "end": "3140690"
  },
  {
    "text": "So what happens is\neach procedure call, you had to have some kind\nof pre-call and post-call instruction. In each procedure, you have\na prologue and epilogue",
    "start": "3140690",
    "end": "3147830"
  },
  {
    "text": "basically going on in there. So what happens here is\nassume I am doing a call.",
    "start": "3147830",
    "end": "3153619"
  },
  {
    "text": "For the sake of argument,\nassume this register RCX is live and it's caller saved.",
    "start": "3153620",
    "end": "3158840"
  },
  {
    "text": "That means I need to save. And I'm passing these\nthree different values that sits in these three\nmemory locations and in there.",
    "start": "3158840",
    "end": "3167460"
  },
  {
    "text": "So first thing I\nneed to do is I need to do this caller\nsaved register. I need to basically push\nthat value into the stack",
    "start": "3167460",
    "end": "3172713"
  },
  {
    "text": "because I'm supposed\nto save that in there. And then I need to go get\nall these arguments pushed into stack at this point.",
    "start": "3172713",
    "end": "3178940"
  },
  {
    "text": "At this point, I\nstill do the call. And call will go\ninto the next frame and put a return address there.",
    "start": "3178940",
    "end": "3186080"
  },
  {
    "text": "When I go into the call,\nassume I have a register RBX, which is calliee saved.",
    "start": "3186080",
    "end": "3192350"
  },
  {
    "text": "So I need to save that myself. And assume I need 40\nbytes to keep local.",
    "start": "3192350",
    "end": "3197413"
  },
  {
    "text": "So I have some local variables\nthat require 40 bytes that I decided. So what I need to\ndo is I need to push",
    "start": "3197413",
    "end": "3203510"
  },
  {
    "text": "the frame pointer, a previous\nframe point in there-- basically, [INAUDIBLE]\npointer value that [INAUDIBLE]",
    "start": "3203510",
    "end": "3210470"
  },
  {
    "text": "get pushed there-- because\nthen I won't actually modify my frame pointer to point here. So now I'm in the new frame.",
    "start": "3210470",
    "end": "3217280"
  },
  {
    "text": "And then what I do is I\nallocate that 48 bytes. Why 48?",
    "start": "3217280",
    "end": "3222920"
  },
  {
    "text": "40 for my local\nvariables, and I need to do this calliee\nsave business. And for that, I need\nto allocate 8 bytes.",
    "start": "3222920",
    "end": "3230020"
  },
  {
    "text": "So I allocate 48 bytes. And finally, I actually did\nthe calliee saved in there. So I save that thing.",
    "start": "3230020",
    "end": "3235688"
  },
  {
    "text": "You don't have to do caller\nsaved, calliee saved. I just do this illustration. Then in fact, all these\nthree first three instruction",
    "start": "3235688",
    "end": "3242810"
  },
  {
    "text": "get replaced by enter. So enter basically did all this. Just nothing but like a\nmacro get expanded in there.",
    "start": "3242810",
    "end": "3250298"
  },
  {
    "text": "So you can do that. So enter and do that. That's what happens in there. Now you are inside the function.",
    "start": "3250298",
    "end": "3255810"
  },
  {
    "text": "And if you want to address\narguments being passed, it's very simple\nbecause what happens",
    "start": "3255810",
    "end": "3262609"
  },
  {
    "text": "is arguments get\npassed in the stack, and you access all\nthis [INAUDIBLE]",
    "start": "3262610",
    "end": "3270240"
  },
  {
    "text": "set of base pointer\nor the frame pointer. And the first argument is\n16 off the frame pointer.",
    "start": "3270240",
    "end": "3277040"
  },
  {
    "text": "The next argument is 24,\nwhatever, whatever, whatever. So you can easily-- you\nhave exact address always in the function to\nget to your arguments.",
    "start": "3277040",
    "end": "3283560"
  },
  {
    "text": "So that's easy. So [INAUDIBLE] to\npass the arguments. The caller passes it by\npushing these things in there. And calliee basically\naccesses using that.",
    "start": "3283560",
    "end": "3292010"
  },
  {
    "text": "Very simple. So you look at your\nargument number. In this, you look at how much\nspace each argument takes,",
    "start": "3292010",
    "end": "3299085"
  },
  {
    "text": "and you basically figure out\nthe offset to that argument, [INAUDIBLE]. ",
    "start": "3299085",
    "end": "3304870"
  },
  {
    "text": "Local variable-- it's\nthe other way around. So what happens is in\nhere, since I actually",
    "start": "3304870",
    "end": "3310059"
  },
  {
    "text": "had to do some calliee saved,\nI had to skip over that. And I have some kind of a map\nsaying the first local variable",
    "start": "3310060",
    "end": "3318460"
  },
  {
    "text": "goes from the first location\nnext, and I have a map. And I know where things are. I can just directly\naddress [INAUDIBLE]..",
    "start": "3318460",
    "end": "3327289"
  },
  {
    "text": "And when I actually do return,\nbasically, what I do is first,",
    "start": "3327290",
    "end": "3335420"
  },
  {
    "text": "basically, I assume I have a-- ",
    "start": "3335420",
    "end": "3340970"
  },
  {
    "text": "RBX is what? This thing I got saved,\nthe calliee saved.",
    "start": "3340970",
    "end": "3347330"
  },
  {
    "text": "I restore that thing. Then I assume I had some\nreturn value I need to return.",
    "start": "3347330",
    "end": "3352550"
  },
  {
    "text": "I had it in all the values\nin my local [INAUDIBLE].. And I get it from local so\nI put it to the register",
    "start": "3352550",
    "end": "3358160"
  },
  {
    "text": "that returns return value. That's our convention. It's in that register. And then I wipe out all the\nthings I allocated in here.",
    "start": "3358160",
    "end": "3365630"
  },
  {
    "text": "I restore my RBP. I return.",
    "start": "3365630",
    "end": "3370770"
  },
  {
    "text": "And all these two instructions\ncan be done in leave. Leaves is-- just wipe\nout my frame in there.",
    "start": "3370770",
    "end": "3377619"
  },
  {
    "text": "And then finally when\nI return from the call, I wipe about all the arguments\nthat I mapped in there.",
    "start": "3377620",
    "end": "3384440"
  },
  {
    "text": "I did a calliee saved. I basically go and-- caller saved. I got rid of that.",
    "start": "3384440",
    "end": "3390180"
  },
  {
    "text": "And then I actually had the 310.",
    "start": "3390180",
    "end": "3397510"
  },
  {
    "text": "I moved the return\nto where I want it. So at this point, what\nyou have is ability",
    "start": "3397510",
    "end": "3403150"
  },
  {
    "text": "to basically deal\nwith procedures. So this is what procedure\ncalls and actually procedure--",
    "start": "3403150",
    "end": "3408802"
  },
  {
    "text": "now you can generate a\nfunction, basically, in there. So you figure out\nhow to do that. So I have an example.",
    "start": "3408802",
    "end": "3415270"
  },
  {
    "text": "I'm going to skip that. [INAUDIBLE] I'll go one more thing. So what we have done\ntoday, we covered",
    "start": "3415270",
    "end": "3420280"
  },
  {
    "text": "how to lay out the procedure\nand also do a procedure call. So you know what\nneeds to be done.",
    "start": "3420280",
    "end": "3425680"
  },
  {
    "text": "And we figured out how to\nactually get all our data types in there and\ngenerate [INAUDIBLE].. So what I'm going\nto do next time",
    "start": "3425680",
    "end": "3431710"
  },
  {
    "text": "is I will go a little\nbit into some high level principles of writing\na code generator",
    "start": "3431710",
    "end": "3438910"
  },
  {
    "text": "and deal with on\nthe control side. And at that point,\nyou should be all set to go write your code generator.",
    "start": "3438910",
    "end": "3447520"
  },
  {
    "text": "OK. ",
    "start": "3447520",
    "end": "3453000"
  }
]