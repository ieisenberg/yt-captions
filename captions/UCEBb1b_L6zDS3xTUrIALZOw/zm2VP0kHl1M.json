[
  {
    "text": " All right, so what\nwe're going to do today is continue our\ndiscussion of modularity",
    "start": "0",
    "end": "5630"
  },
  {
    "text": "and how you hook software\nmodules up together. And what we did\nthe last time was",
    "start": "5630",
    "end": "11110"
  },
  {
    "text": "talked about how you share data\nbetween programs between users. And we went to the design\nof the UNIX file system,",
    "start": "11110",
    "end": "17800"
  },
  {
    "text": "or at least a particular\naspect of the UNIX file system where we talked about how\nwe built a file system out",
    "start": "17800",
    "end": "23940"
  },
  {
    "text": "of layers and layers. And each layer was essentially\ndoing name resolution in order",
    "start": "23940",
    "end": "29440"
  },
  {
    "text": "for us to take a UNIX\npath name and eventually get the data blocks\ncorresponding",
    "start": "29440",
    "end": "35060"
  },
  {
    "text": "to the data in that file. What we're going to do today is\nto move away a little bit from",
    "start": "35060",
    "end": "41759"
  },
  {
    "text": "the memory abstraction, which\nis what we spend our time on the last time, and start\ntalking about the second",
    "start": "41759",
    "end": "47530"
  },
  {
    "text": "abstraction -- the\ninterpreter abstraction. And we're going to do that\nin the context of software libraries, and\nbasically understand",
    "start": "47530",
    "end": "55220"
  },
  {
    "text": "how software libraries\nare put together, and how you can build\nlarge software programs out",
    "start": "55220",
    "end": "60970"
  },
  {
    "text": "of individual software modules\nthat get hooked together. So that's the plan for today.",
    "start": "60970",
    "end": "67800"
  },
  {
    "text": "And in addition to seeing\nthe actual mechanism for how you take all these modules\nin the form of libraries",
    "start": "67800",
    "end": "73299"
  },
  {
    "text": "and other software pieces,\nhook them up together, what we are really\ngoing to focus on is the mechanism by which these\ndifferent modules actually",
    "start": "73300",
    "end": "81409"
  },
  {
    "text": "run on your computer. OK, so it's going to involve a\nfair amount of mechanism going down to the lowest\nlayer until you actually",
    "start": "81410",
    "end": "87940"
  },
  {
    "text": "have something that's a\nsingle, executable file that runs on your computer. And then what we're\ngoing to do is",
    "start": "87940",
    "end": "95380"
  },
  {
    "text": "to step back and think\nabout the kind of modularity that we will have gotten\nfrom this approach.",
    "start": "95380",
    "end": "102380"
  },
  {
    "text": "And that's the\nkind of modularity that we're going to\ncall soft modularity. ",
    "start": "102380",
    "end": "109770"
  },
  {
    "text": "So, that's the plan for today. And you'll see why this\nis called soft modularity. And it has to do with the way\nin which propagation of faults",
    "start": "109770",
    "end": "118820"
  },
  {
    "text": "occurs and in particular\nthe kind of modularity at the libraries that we\nare going to discuss today has the property that a problem\nin one module, for example,",
    "start": "118820",
    "end": "127360"
  },
  {
    "text": "an infinite loop or\na crash in one module will turn out to affect\nthe whole program. And the whole thing will\ncome crumbling down.",
    "start": "127360",
    "end": "133500"
  },
  {
    "text": "OK, and that's why it's going\nto be called soft modularity. Of course, we don't like\nthat kind of modularity, although it is useful\nto have soft modularity.",
    "start": "133500",
    "end": "140439"
  },
  {
    "text": "So the next three lectures\nafter today, we're going to talk about hardening\nthe soft modularity using",
    "start": "140440",
    "end": "146690"
  },
  {
    "text": "a variety of\ndifferent techniques. So that's the plan for the\nnext three to four lectures.",
    "start": "146690",
    "end": "153020"
  },
  {
    "text": "OK, so let's take some examples\nto start with of where you end up using these modules --\nthese software modules --",
    "start": "153020",
    "end": "159090"
  },
  {
    "text": "to build bigger\nsoftware systems. And the first one\nis actually what you see in programming language.",
    "start": "159090",
    "end": "164230"
  },
  {
    "text": "When you use C or C++ or Java\nor Perl or any of these programs",
    "start": "164230",
    "end": "170980"
  },
  {
    "text": "that you're familiar with, you\nend up actually building large programs out of taking\nlots of little programs,",
    "start": "170980",
    "end": "176590"
  },
  {
    "text": "usually programmed\nin different files, and running a compiler on it,\nand it'll turn out to require",
    "start": "176590",
    "end": "183349"
  },
  {
    "text": "other system software to take\nprograms that are written in different modules and\nhook them all up together",
    "start": "183350",
    "end": "188620"
  },
  {
    "text": "into a bigger program. And this is actually\ngoing to be, we're going to learn today\nwith examples from C or C++",
    "start": "188620",
    "end": "195480"
  },
  {
    "text": "programming language to find\nout how we build C modules together. But, by no means\nare we restricted",
    "start": "195480",
    "end": "201110"
  },
  {
    "text": "to these programming languages. In fact, there's a lot\nof different examples.",
    "start": "201110",
    "end": "206480"
  },
  {
    "text": "Database systems provide a\ngreat example of modularity. ",
    "start": "206480",
    "end": "212689"
  },
  {
    "text": "So if you take a\nsystem like, you might've heard of\nOracle or Sybase, or any of IBM's DB2,\nall of these things",
    "start": "212690",
    "end": "218939"
  },
  {
    "text": "are fairly complicated\npieces of software. But what they invariably\nallow you to do is to put in your own software,\nyour own code, that will run",
    "start": "218940",
    "end": "228109"
  },
  {
    "text": "as part of the database system. So if you, for\nexample, come up with, you know, normally databases\nallow you to run queries",
    "start": "228109",
    "end": "233970"
  },
  {
    "text": "on tables of data.  We'll be back after\nthese messages.",
    "start": "233970",
    "end": "240620"
  },
  {
    "text": "OK, so every database system\nallows you to upload modules into it that run as part\nof the database system.",
    "start": "240620",
    "end": "245690"
  },
  {
    "text": "So if you come up with a\ndifferent kind of data type, for example, some geometric\ndata type on which you asked",
    "start": "245690",
    "end": "253019"
  },
  {
    "text": "whether there is a bunch\nof points inside a polygon, a regular database system\nwon't actually support that.",
    "start": "253020",
    "end": "259338"
  },
  {
    "text": "But what you can do is\nwrite code for that, and upload it, and run it as\na module in a database system.",
    "start": "259339",
    "end": "265810"
  },
  {
    "text": "Another example, a common\nexample these days are Web servers, particularly\nsomething like Apache --",
    "start": "265810",
    "end": "273360"
  },
  {
    "text": "-- where you can actually\ninclude as part of Apache when",
    "start": "273360",
    "end": "278800"
  },
  {
    "text": "you run it a bunch of different\nmodules for doing a variety of new functions that\nweren't previously running.",
    "start": "278800",
    "end": "284780"
  },
  {
    "text": "And all of these\ndifferent kinds of systems will turn out to use\nessentially variants of the same basic idea\nin terms of solving",
    "start": "284780",
    "end": "293580"
  },
  {
    "text": "the problem of taking these\ndifferent modules together and composing a single, large\nprogram that you can execute",
    "start": "293580",
    "end": "301600"
  },
  {
    "text": "on your computer. So what we're going to do\ntoday is discuss this method,",
    "start": "301600",
    "end": "311050"
  },
  {
    "text": "this way of doing modularity\nin the context of, a particular example,\nit's easiest to do",
    "start": "311050",
    "end": "316189"
  },
  {
    "text": "this with an example. And then we'll\nstep back and talk about the general principles. So, we're going to focus\non the Linux operating",
    "start": "316190",
    "end": "325550"
  },
  {
    "text": "system running the GNU tools. And in particular, we're going\nto focus on how you do this in a language like C or C++.",
    "start": "325550",
    "end": "332210"
  },
  {
    "text": "And so, most of you are probably\nfamiliar with some of the tools that you use to build\nprograms in GNU and Linux",
    "start": "332210",
    "end": "339030"
  },
  {
    "text": "and we are going to\nuse a compiler called GCC that will turn out to use\nsome other pieces of software",
    "start": "339030",
    "end": "345290"
  },
  {
    "text": "to build modular programs. So, that's kind of what\nwe're going to start with.",
    "start": "345290",
    "end": "350966"
  },
  {
    "text": "And the basic approach in terms\nof how these modules are going to be written is if you want to\nwrite a program, you typically",
    "start": "350967",
    "end": "357300"
  },
  {
    "text": "design what you want to\ndo, design the system, and then decide on\nhow you decompose",
    "start": "357300",
    "end": "363820"
  },
  {
    "text": "the functionality of\nyour system into a bunch of different modules. And typically you write one\nor more files for each module",
    "start": "363820",
    "end": "370675"
  },
  {
    "text": "and system, and then you need a\nway to bring all these modules, these different files together\nto build a bigger program.",
    "start": "370675",
    "end": "376240"
  },
  {
    "text": "And when you run GCC in\nparticular on a dot O file, the modules themselves\nwant to compile a C file.",
    "start": "376240",
    "end": "383350"
  },
  {
    "text": "As you know, you\nproduce an object file with a name like file dot O, and\nthat actually contains in it,",
    "start": "383350",
    "end": "392770"
  },
  {
    "text": "that's an object file\nthat with some more work you can arrange to\nrun on your computer.",
    "start": "392770",
    "end": "399464"
  },
  {
    "text": "And what we're going to\ndo today is figure out how when you have a large\nnumber of object files,",
    "start": "399464",
    "end": "405640"
  },
  {
    "text": "and it will also turn out, we'll\ntalk about something called a library, which is a\ncollection of object files put",
    "start": "405640",
    "end": "411000"
  },
  {
    "text": "into a single archive, or how\nyou can take those object files and produce an\nexecutable that will run.",
    "start": "411000",
    "end": "417950"
  },
  {
    "text": "So if this works,\nlet me show you an example of what we're\ngoing to be talking about. So I have two little files,\na little trivia program.",
    "start": "417950",
    "end": "430507"
  },
  {
    "text": "I don't know if this is visible.  OK, so all this is\ndoing is computing",
    "start": "430507",
    "end": "436810"
  },
  {
    "text": "the square of the number. And it uses here, this is\na very trivial program.",
    "start": "436810",
    "end": "443790"
  },
  {
    "text": "It defines a few\nvariables, and then just calls on modular function\ncalled SQR, which isn't actually",
    "start": "443790",
    "end": "450280"
  },
  {
    "text": "in this file. It's in a separate file. But one thing you\ncan do is run GCC-C",
    "start": "450280",
    "end": "455550"
  },
  {
    "text": "which just tells it to\nproduce the object file, and there's a program\ncalled object dump which",
    "start": "455550",
    "end": "462817"
  },
  {
    "text": "is a useful program\nif you want to see what's inside your object file. It's a binary\nfile, so you're not going to be able to hack it.",
    "start": "462817",
    "end": "468950"
  },
  {
    "text": "But you could run it with, we've\nalready reached the bottom,",
    "start": "468950",
    "end": "477630"
  },
  {
    "text": "all right.  OK, so the part to worry\nabout for the moment",
    "start": "477630",
    "end": "484870"
  },
  {
    "text": "are shown in the\nlast three lines that you could see here\nstarting main, SQR, and printf.",
    "start": "484870",
    "end": "492090"
  },
  {
    "text": "And those are the\nthree functions that are being invoked by\nthe program I showed you. And you can see,\nfor SQR and printf,",
    "start": "492090",
    "end": "499210"
  },
  {
    "text": "this object file doesn't\nactually know where it is or where its definition is. And that's why you\nsee UND for undefined.",
    "start": "499210",
    "end": "506830"
  },
  {
    "text": "And part of what we're\ngoing to figure out today is how we can find out where\nthose other modules are",
    "start": "506830",
    "end": "513070"
  },
  {
    "text": "defined, and hook up all those\ndifferent modules together to build a program\nthat will actually run to do what we want it to do.",
    "start": "513070",
    "end": "519860"
  },
  {
    "text": " So the other thing\nhere is square dot C,",
    "start": "519860",
    "end": "525329"
  },
  {
    "text": "which does the obvious thing of\njust multiplying two numbers. And you could do the same\nthing with square dot C.",
    "start": "525330",
    "end": "533970"
  },
  {
    "text": "So I have a little thing called\nshow object which is just an alias for object dump. ",
    "start": "533970",
    "end": "542699"
  },
  {
    "text": "And you can see here that\nthere aren't actually any undefined symbols\nor undefined functions",
    "start": "542700",
    "end": "548120"
  },
  {
    "text": "because square, in\nturn, didn't invoke anything that was outside\nand defined somewhere else.",
    "start": "548120",
    "end": "554790"
  },
  {
    "text": "And underneath here, you see the\nactual disassembled assembler code for this machine text.",
    "start": "554790",
    "end": "563230"
  },
  {
    "text": "So going back to M\ndot O, I just want to draw your attention\nto a couple of things.",
    "start": "563230",
    "end": "576160"
  },
  {
    "text": "Yeah? Shows up fine on\nmy screen, I know. [LAUGHTER] All right, good.",
    "start": "576160",
    "end": "583889"
  },
  {
    "text": " OK, so there's a few sections\nto this object file here.",
    "start": "583890",
    "end": "591650"
  },
  {
    "text": "And it's important to\nunderstand a little bit how an object file is laid out. It has in it a few different\nsections as I mentioned.",
    "start": "591650",
    "end": "599410"
  },
  {
    "text": "One of the sections is\ncalled the text section. The text section basically\ncontains the machine code.",
    "start": "599410",
    "end": "606050"
  },
  {
    "text": "I mean, ideally once you hook\nall these modules together, that machine code will actually\njust run on your computer.",
    "start": "606050",
    "end": "614209"
  },
  {
    "text": "It also has a section, I\nthink you can see it up there, called auto data. That's the second section that\nstands for read only data.",
    "start": "614209",
    "end": "623000"
  },
  {
    "text": "And one of the things I\nhad here in that program was something that said\nprintf with a string inside. And, that string\nis read only data.",
    "start": "623000",
    "end": "629360"
  },
  {
    "text": "I mean, you don't want, the\nprogram doesn't actually modify it. And that's the kind of thing\nyou could see it on the right. There is a comment there:\nthe square of something",
    "start": "629360",
    "end": "635580"
  },
  {
    "text": "is something. And that's an example\nof read only data. And then it has a\nsection for data",
    "start": "635580",
    "end": "641250"
  },
  {
    "text": "which really corresponds to\nthe global variables used in the program.",
    "start": "641250",
    "end": "646279"
  },
  {
    "text": "And for those of you\nwho remember 6.004, and if not we'll talk\nabout this next time. The look of variables\nin your modules",
    "start": "646280",
    "end": "652700"
  },
  {
    "text": "are not actually in\nthe data section. They're typically on the stack. So we're not going to\nworry about that for today.",
    "start": "652700",
    "end": "659820"
  },
  {
    "text": "And then there's a\nsection called a symbol table which is shown\nhere, I think, as sym tab",
    "start": "659820",
    "end": "666589"
  },
  {
    "text": "not on the screen. Let me go back.  So that's the symbol table.",
    "start": "666590",
    "end": "672790"
  },
  {
    "text": "And what this symbol\ntable shows is",
    "start": "672790",
    "end": "678329"
  },
  {
    "text": "the different global\nvariables and functions that are either defined in\nthe module in this dot O file",
    "start": "678330",
    "end": "684360"
  },
  {
    "text": "or are referenced\nby this module. OK, and for the symbols that\nare defined in this module, what",
    "start": "684360",
    "end": "690910"
  },
  {
    "text": "the symbol table tells you\nis the address at which you can find it in the module. OK, and for the things\nthat are not defined,",
    "start": "690910",
    "end": "698850"
  },
  {
    "text": "it says it's undefined. And hopefully once\nthe compiler sees all of the different\nobject files involved,",
    "start": "698850",
    "end": "705850"
  },
  {
    "text": "it can piece together these\ndifferent object files and build a larger\nprogram module.",
    "start": "705850",
    "end": "711322"
  },
  {
    "text": "So when you compile each of\nthese things in this example, M dot O and SQR dot\nO, you will find that the object file that's\nproduced for both files",
    "start": "711322",
    "end": "719480"
  },
  {
    "text": "starts with address zero. OK, so obviously when you hook\nthese modules up together, you can't have both modules\nrun at address zero.",
    "start": "719480",
    "end": "727089"
  },
  {
    "text": "So one of the things you\nneed to be able to do is to take these different\nobject files together, and somehow join them so that\nthe addresses are no longer",
    "start": "727090",
    "end": "736110"
  },
  {
    "text": "colliding with one another. So that's one problem that we\nare going to have to solve.",
    "start": "736110",
    "end": "742420"
  },
  {
    "text": "So that's what we're\ngoing to do today. So there's basically\nthree steps that we",
    "start": "742420",
    "end": "750699"
  },
  {
    "text": "are going to talk about today. The first step is figuring out\nall these different symbols.",
    "start": "750700",
    "end": "756590"
  },
  {
    "text": "So when you have SQR or if\nyou were using square root in a different program,\nprintf is another example,",
    "start": "756590",
    "end": "762010"
  },
  {
    "text": "figuring out where the\ndefinitions of these symbols are, and where the definitions\nof the global variables",
    "start": "762010",
    "end": "767410"
  },
  {
    "text": "are in your program. And that's a step called\nsymbol resolution. ",
    "start": "767410",
    "end": "775810"
  },
  {
    "text": "OK, and the plan is going to be\nthat each object file is going to have inside it\na table like here",
    "start": "775810",
    "end": "782000"
  },
  {
    "text": "that shows for the symbols\nthat have been locally defined,",
    "start": "782000",
    "end": "787390"
  },
  {
    "text": "where in the local\nmodule they are. I'm going to use the word\nmodule for these dot O files. And for symbols that are\nnot in the same dot O file,",
    "start": "787390",
    "end": "795290"
  },
  {
    "text": "it just says it's undefined. And I need it. OK, and that's what\nthe dot O contains. And, when you take all these\ndot O's together and produce",
    "start": "795290",
    "end": "804210"
  },
  {
    "text": "a bigger program, those symbols\nare going to be resolved. And that's the step\ncalled symbol resolution.",
    "start": "804210",
    "end": "812840"
  },
  {
    "text": "The second thing we\nhave to do before we get a single big program is to\ndo something called relocation.",
    "start": "812840",
    "end": "818805"
  },
  {
    "start": "818805",
    "end": "823960"
  },
  {
    "text": "So what relocation\nis, is remember I told you when you compile\na program to a dot O file, all of the dot O files all have\naddresses starting from zero.",
    "start": "823960",
    "end": "832436"
  },
  {
    "text": "You can't run them all\ntogether unless you actually modify the different addresses. And any time you see a reference\nto a variable in one of the dot",
    "start": "832436",
    "end": "838690"
  },
  {
    "text": "O files, you have to\nmodify that address to point to the actual address\nat which the instruction would",
    "start": "838690",
    "end": "845440"
  },
  {
    "text": "run or the data\nobject is present. And that's called relocation. And it'll turn out\nthat the object files",
    "start": "845440",
    "end": "852172"
  },
  {
    "text": "that are produced by the\ncompiler are what are called relocatable object files. Pretty much every object file\nthese days is relocatable.",
    "start": "852172",
    "end": "857933"
  },
  {
    "text": "But the relocatable\nobject file allows you to do this relocation\neasily because it has in it information that\ntells whoever is composing",
    "start": "857933",
    "end": "866700"
  },
  {
    "text": "these modules together how to\nmodify the addresses that are referenced within each module. ",
    "start": "866700",
    "end": "874080"
  },
  {
    "text": "And the third step\nonce you do all this and you produce a single\nbig program that's ready to execute, is\nactually to run the program.",
    "start": "874080",
    "end": "881089"
  },
  {
    "text": "And that's a step called\nloading or program loading.",
    "start": "881090",
    "end": "887190"
  },
  {
    "text": "So you create a big\nexecutable file, and you type it on\nthe command line. What happens?",
    "start": "887190",
    "end": "894160"
  },
  {
    "text": "So, those are the three\nsteps that we are going to be talking about today. And the first two steps\ntypically are called linking.",
    "start": "894160",
    "end": "901800"
  },
  {
    "text": "OK, so most of today\nis going to be talking",
    "start": "901800",
    "end": "908350"
  },
  {
    "text": "about how linking works. And the piece of\nsoftware, system software, that does linking\nis called a linker. And in the GNU-Linux\noperating system,",
    "start": "908350",
    "end": "916149"
  },
  {
    "text": "it's a program called LD. That's the linking program. And so when you run GCC\nto take a bunch of modules",
    "start": "916150",
    "end": "923590"
  },
  {
    "text": "and produce a program out\nof it, underneath inside not visible to you but\nunderneath, GCC actually",
    "start": "923590",
    "end": "929960"
  },
  {
    "text": "invokes a bunch of\nother programs including LD as one of the\nlast steps to produce an actual file that will run.",
    "start": "929960",
    "end": "935940"
  },
  {
    "text": " So the linker takes as\ninput, object files,",
    "start": "935940",
    "end": "942360"
  },
  {
    "text": "and produces as output a\nprogram that you can run. And then the loader takes\nover and runs the program.",
    "start": "942360",
    "end": "951750"
  },
  {
    "text": "So there are actually\nthree kinds of object files that the linker\ntakes as argument.",
    "start": "951750",
    "end": "958170"
  },
  {
    "text": "The first kind of object file\nis a relocatable object file. ",
    "start": "958170",
    "end": "968040"
  },
  {
    "text": "OK, actually there's two kinds. The first kind is a\nrelocatable object file. And that's what we're going to\nbe spending most of our time",
    "start": "968040",
    "end": "974340"
  },
  {
    "text": "on. The second kind of\nobject file is something called a share object file. ",
    "start": "974340",
    "end": "982740"
  },
  {
    "text": "We are going to get to this\na little bit at the end. And the reason we're going\nto wait until the end is that the reason for\na shared object file",
    "start": "982740",
    "end": "989320"
  },
  {
    "text": "is that if you have a program, a\nmodule like printf or some math library like using\nfunctions like square root,",
    "start": "989320",
    "end": "996860"
  },
  {
    "text": "if you just do linking\nthe normal way, which is the easy way we're going to\ntalk about for most of today,",
    "start": "996860",
    "end": "1004350"
  },
  {
    "text": "you will end up with a program\nthat includes in its text that includes in the binary\nall of the modules",
    "start": "1004350",
    "end": "1012340"
  },
  {
    "text": "corresponding to all\nof the libraries at, you know, the text corresponds\nto the different modules that you use.",
    "start": "1012340",
    "end": "1017730"
  },
  {
    "text": "So now, if you have 100\ndifferent programs running on your system, all\nof which use printf, it will turn out that\nevery program is quite big.",
    "start": "1017730",
    "end": "1024380"
  },
  {
    "text": "And so, shared object files\nallow us to not actually have to include the text of printf\nin every binary that we produce,",
    "start": "1024380",
    "end": "1032380"
  },
  {
    "text": "but just maintain a pointer\nto something that says, when you need printf, go\nand get this, and include it",
    "start": "1032380",
    "end": "1037589"
  },
  {
    "text": "as part of your program. So we get to that in the end. But for the most\npart, we are going to be focusing on relocatable\nobject files, that is,",
    "start": "1037589",
    "end": "1044709"
  },
  {
    "text": "object files that are\nproduced by something like GCC that I showed you, which include\nin it information for modifying",
    "start": "1044710",
    "end": "1053430"
  },
  {
    "text": "the addresses that are being\nreferenced inside the module. And once the linker\ntakes these as arguments,",
    "start": "1053430",
    "end": "1059150"
  },
  {
    "text": "what it produces as output,\nout comes an executable file. ",
    "start": "1059150",
    "end": "1068230"
  },
  {
    "text": "And these dot O's\ndon't actually run. The executable is a thing that's\ncapable of actually running. ",
    "start": "1068230",
    "end": "1081610"
  },
  {
    "text": "OK, so the first step\nwe have to talk about is symbol resolution. ",
    "start": "1081610",
    "end": "1092570"
  },
  {
    "text": "And so the input is a\nset of object files. And the output is\ngoing to be something that allows LD,\nthe linker program,",
    "start": "1092570",
    "end": "1098990"
  },
  {
    "text": "to know which symbol\nis located where in all the different modules. And if your linking\nsucceeds, then it",
    "start": "1098990",
    "end": "1105930"
  },
  {
    "text": "means that every symbol\nthat's been referenced by any of the modules that's\non the command line of this LD",
    "start": "1105930",
    "end": "1112840"
  },
  {
    "text": "program, there are no\nundefined symbols remaining. So that's what symbol\nresolution does.",
    "start": "1112840",
    "end": "1118850"
  },
  {
    "text": "And the input to this is\nreally it looks something like you have a bunch of files. I'm going to call them F1\ndot O, F2 dot O, all the way",
    "start": "1118850",
    "end": "1126190"
  },
  {
    "text": "through FN dot O. OK, and for those of you\nwho know what libraries, don't worry about them now. We are just going to take\nthese individual modules,",
    "start": "1126190",
    "end": "1133075"
  },
  {
    "text": "and we are going to produce\nout of it a single program that",
    "start": "1133075",
    "end": "1138740"
  },
  {
    "text": "includes in it all of\nthese different modules such that there are no\nunresolved symbols, OK?",
    "start": "1138740",
    "end": "1143940"
  },
  {
    "text": "So, SQR is one file, and M\ndot C contains references SQR, we want to make it so\nthe actual program, when",
    "start": "1143940",
    "end": "1151960"
  },
  {
    "text": "the reference to SQR comes\nin, you know where it is. So, what each file contains\nwhen you do GCC on F1 dot CN,",
    "start": "1151960",
    "end": "1161120"
  },
  {
    "text": "you get F1 dot O,\nit contains in it already a local symbol table. And you saw that in the\nexample I showed you.",
    "start": "1161120",
    "end": "1167500"
  },
  {
    "text": "And the symbol table has\nthe following structure. There's two kinds of data in the\nsymbol table on a local module.",
    "start": "1167500",
    "end": "1174740"
  },
  {
    "text": "The first is a set\nof icons, D1, that correspond to global\nvariables or functions that",
    "start": "1174740",
    "end": "1182800"
  },
  {
    "text": "are defined in the\nmodule F1 dot C, and therefore are defined\nin the module F1 dot O.",
    "start": "1182800",
    "end": "1188780"
  },
  {
    "text": "So, this just tells\nthe linker, you know, if you see the symbol\nbeing invoked by somebody else,",
    "start": "1188780",
    "end": "1194860"
  },
  {
    "text": "it's being defined\nin this module. OK, and it contains\nin it information about where in the\nlocal module it",
    "start": "1194860",
    "end": "1201419"
  },
  {
    "text": "does it so that you know\nat what address it's being defined and so on. Likewise, you have here\nanother set of symbols",
    "start": "1201420",
    "end": "1209944"
  },
  {
    "text": "that you want which\ncorresponds to things that are not defined in F1 dot O. And likewise, for each of these\nthings you have D2 and U2,",
    "start": "1209944",
    "end": "1221880"
  },
  {
    "text": "and so on, OK?  So, the way the\nparticular implementation",
    "start": "1221880",
    "end": "1229210"
  },
  {
    "text": "of the linker under\nGNU-Linux works, and there are many ways\nto implement linkers, and there are very complicated\nlinkers, and obviously simple",
    "start": "1229210",
    "end": "1237090"
  },
  {
    "text": "linkers as well. The Linux one is\nparticularly simple at least in terms of this\nway of linking, resolving",
    "start": "1237090",
    "end": "1245480"
  },
  {
    "text": "all of the symbols here. You just scan the command\nline from left to right and you start building\nup three sets, OK?",
    "start": "1245480",
    "end": "1251719"
  },
  {
    "text": "So we're going to build up\nthree sets in this algorithm when we scan from left to right. The first set is a set\nI'm going to call O.",
    "start": "1251719",
    "end": "1259090"
  },
  {
    "text": "And the idea in O is going\nto be all of object files that go into the\nprogram, that go",
    "start": "1259090",
    "end": "1264169"
  },
  {
    "text": "into the output of\nthe linking step. In this case, in\nthe end, it's going to be pretty straightforward. It's going to be F1 dot O, union\nF2, all the way up to union FN.",
    "start": "1264170",
    "end": "1271368"
  },
  {
    "text": "It's going to get a\nlittle more complicated when we talk about libraries. But for now, it's\na very easy set. When you scan from\nleft to right,",
    "start": "1271369",
    "end": "1277760"
  },
  {
    "text": "you look at the next object\nmodule or the object file, and all you have to do is\nO goes to O union Fi dot O.",
    "start": "1277760",
    "end": "1289700"
  },
  {
    "text": "OK, this is the I'th\nstep of the algorithm. OK, now we have to go\nto the next step, which",
    "start": "1289700",
    "end": "1296770"
  },
  {
    "text": "is get to the defined symbols. So as we go from\nleft to right, we",
    "start": "1296770",
    "end": "1302130"
  },
  {
    "text": "build up a set of\ndefined symbols. Initially it's null, and\nthen we start with D1,",
    "start": "1302130",
    "end": "1307640"
  },
  {
    "text": "and then we do D1 union\nD2, and all the way. So up to the I'th step, what\nwe're going to end up with is obviously at the I'th iteration,\nwe are going to have some",
    "start": "1307640",
    "end": "1314880"
  },
  {
    "text": "running set of defined\nsymbols that have been defined in the modules so far. And we're just going to do\nD goes to D union Di where",
    "start": "1314880",
    "end": "1322470"
  },
  {
    "text": "Di is the set of symbols that\nare defined in module number I. OK, in the last set,\nwe're going to calculate,",
    "start": "1322470",
    "end": "1332350"
  },
  {
    "text": "and the linker is going\nto calculate as a set U. And U is the set of all\nundefined symbols so far.",
    "start": "1332350",
    "end": "1339730"
  },
  {
    "text": "So you have a set of\nundefined symbols. And you are at the I'th stage\nof this process where up to here",
    "start": "1339730",
    "end": "1345549"
  },
  {
    "text": "you have a set U of\nundefined symbols. And now you're seeing this\nnew module a bunch more undefined symbols.",
    "start": "1345550",
    "end": "1351420"
  },
  {
    "text": "So clearly what you\nhave to do first is do union Ui, correct, because\nyou now have built up a bigger",
    "start": "1351420",
    "end": "1359549"
  },
  {
    "text": "set of undefined symbols. But then, notice that there\nmight be symbols that were",
    "start": "1359550",
    "end": "1364660"
  },
  {
    "text": "previously undefined that\nare now being defined in the I'th module, right?",
    "start": "1364660",
    "end": "1370307"
  },
  {
    "text": "Otherwise, I mean, if\nthis set kept growing, then all you would\nend up with is a big undefined set at the end. So clearly there are symbols\nthat are being defined",
    "start": "1370307",
    "end": "1376500"
  },
  {
    "text": "and subsequent modules. So you have to\nsubtract out a set. And the set you have\nto subtract obviously is the undefined\nset intersection",
    "start": "1376500",
    "end": "1383840"
  },
  {
    "text": "whatever is being\ndefined in this module. OK, and so the linker does\nthis from left to right.",
    "start": "1383840",
    "end": "1391241"
  },
  {
    "text": "It's actually a\npretty simple linker because it doesn't go\nback and do anything. And it doesn't actually\nhave to at least",
    "start": "1391241",
    "end": "1396910"
  },
  {
    "text": "for this way of hooking\nup object files together. And what you get at the end are\nthree sets: O, D, and U, OK?",
    "start": "1396910",
    "end": "1404519"
  },
  {
    "text": "And, the linker outputs\nsuccess, it then gets to the relocation\nstage of U is null.",
    "start": "1404520",
    "end": "1411375"
  },
  {
    "text": "If there are no undefined\nsymbols at the end, you know that now\nyou can then relocate by modifying patching the\ndifferent addresses together",
    "start": "1411375",
    "end": "1417140"
  },
  {
    "text": "to produce your big program. But if the set is\nnot null, you know that no matter what\nyou do to relocate, there is some symbol that\nis not being defined,",
    "start": "1417140",
    "end": "1423380"
  },
  {
    "text": "which means that module won't\nrun, which means the program won't run, OK? So that's kind of what\nthis linking program does.",
    "start": "1423380",
    "end": "1431205"
  },
  {
    "text": "It just goes from left to\nright and resolves all symbols. And although it's done\nin the context of, we've discussed this in the\ncontext of a particular example",
    "start": "1431205",
    "end": "1438290"
  },
  {
    "text": "of how GNU-Linux\ndoes its linking, the basic idea is the same. Essentially, all\nsymbol resolution",
    "start": "1438290",
    "end": "1443770"
  },
  {
    "text": "will turn out to use some\nvariant of something that greatly resembles this method.",
    "start": "1443770",
    "end": "1451633"
  },
  {
    "text": "There is actually\nonly one problem with what I described\nso far, and it's wrong.",
    "start": "1451634",
    "end": "1457230"
  },
  {
    "text": "So, what's the problem? Yeah? ",
    "start": "1457230",
    "end": "1469169"
  },
  {
    "text": "Right. If the symbol is undefined\nin F1 and defined in F2, you're fine because\nlet's take this example.",
    "start": "1469170",
    "end": "1474950"
  },
  {
    "text": "I had M dots it's OK. We're just building up sets. So you can have a\nsymbol that's defined.",
    "start": "1474950",
    "end": "1480884"
  },
  {
    "text": "You are saying,\nwhat if the symbol is defined in one of the files\nand undefined in the next file?",
    "start": "1480884",
    "end": "1487099"
  },
  {
    "text": "No, it doesn't matter for this. It's going to matter when we\ntalk about something called a library, but it's not\ngoing to matter here because we've built up these\nsets of what are defined",
    "start": "1487099",
    "end": "1494720"
  },
  {
    "text": "and what are undefined? So let's say you defined a\nsymbol here, and you come here and you find that it\nreferences a symbol that's",
    "start": "1494720",
    "end": "1500679"
  },
  {
    "text": "not locally defined, but has\nbeen previously defined, right? That's been built\nup in the set, D.",
    "start": "1500680",
    "end": "1506409"
  },
  {
    "text": "So, in the end --  Oh I see, so the code\nis a little wrong",
    "start": "1506410",
    "end": "1513000"
  },
  {
    "text": "because I have to\nactually update. ",
    "start": "1513000",
    "end": "1518929"
  },
  {
    "text": "You're right. I had to modify that U line. This is wrong. Good. So I have to modify the\nset of undefined symbols",
    "start": "1518929",
    "end": "1524600"
  },
  {
    "text": "to include the things that\nwere previously defined. So actually it should probably\nhave been U intersection D.",
    "start": "1524600",
    "end": "1530000"
  },
  {
    "text": "And that will probably fix it.",
    "start": "1530000",
    "end": "1535731"
  },
  {
    "text": " Good. Any other errors?",
    "start": "1535731",
    "end": "1542281"
  },
  {
    "text": "Yeah? Right. So, there were two. This one I actually\ndidn't realize. But it's actually right. So it should be\nU intersection D.",
    "start": "1542281",
    "end": "1547660"
  },
  {
    "text": "The other one is\nthat we just keep doing D goes to D union Di. But now, if I define\na function, SQR here,",
    "start": "1547660",
    "end": "1556060"
  },
  {
    "text": "and I define the same\nfunction SQR again here, we're not going to know\nwhich SQR to actually use.",
    "start": "1556060",
    "end": "1561720"
  },
  {
    "text": "So we have a duplicate symbol. And so, in fact, what\nthe algorithm actually ought to do is while it's\ndoing this union computation,",
    "start": "1561720",
    "end": "1568980"
  },
  {
    "text": "it better make sure\nthat any symbol that's being defined in a\nsubsequent module has not already been defined\nin a previous module.",
    "start": "1568980",
    "end": "1575440"
  },
  {
    "text": "And, if there is a\nduplicate definition, it'll tell you that there's\na duplicate definition. And I'm not going to\nshow you an example,",
    "start": "1575440",
    "end": "1581550"
  },
  {
    "text": "but if you just go and type out\na little -- use SQR twice -- and you run the compiler, GCC,\non it what you'll find is that",
    "start": "1581550",
    "end": "1588600"
  },
  {
    "text": "it'll tell you that this\nsymbol is multiply defined. OK, so we're not going\nto want that either.",
    "start": "1588600",
    "end": "1594380"
  },
  {
    "text": "So once you obtain\nthese different sets, what you'll end up with\nis information that",
    "start": "1594380",
    "end": "1603000"
  },
  {
    "text": "will tell the linker\neverything about all of the different symbols, and\nwhere they have been defined, and in which object file\nthey've been defined.",
    "start": "1603000",
    "end": "1611260"
  },
  {
    "text": "And so, the step that\nit has to do after that is the relocation step. So this was the first step.",
    "start": "1611260",
    "end": "1616600"
  },
  {
    "text": "It will turn out that this step\nis also pretty straightforward",
    "start": "1616600",
    "end": "1627250"
  },
  {
    "text": "because what happens when\nGCC runs on a single C file",
    "start": "1627250",
    "end": "1633340"
  },
  {
    "text": "and produces a\nsingle dot O file is it contains in it information\non how to relocate",
    "start": "1633340",
    "end": "1638670"
  },
  {
    "text": "all of the variables\nand all of the functions that are defined in that module. And there is a section\nof the object file",
    "start": "1638670",
    "end": "1646520"
  },
  {
    "text": "that I haven't shown you called\nthe relocation section that tells you, for any given\nvariable in the text,",
    "start": "1646520",
    "end": "1651780"
  },
  {
    "text": "or any given line of\ncode in the text area, all of the load instructions\nand all of the variables, how they get remapped inside.",
    "start": "1651780",
    "end": "1658295"
  },
  {
    "text": "So that's maintained. Basically the approach is\nto maintain local table. ",
    "start": "1658296",
    "end": "1664880"
  },
  {
    "text": "And, it's called the relocation\nsection of your program, OK?",
    "start": "1664880",
    "end": "1671060"
  },
  {
    "text": "So, we're going to get to\nloading in a little bit. But before we get to\nloading, I want to get back",
    "start": "1671060",
    "end": "1676410"
  },
  {
    "text": "to symbol resolution. So here we just talked about\ntaking a bunch of dot O files and producing a final program.",
    "start": "1676410",
    "end": "1683680"
  },
  {
    "text": "But there is another notion\nof something called a library. So, how you do symbol\nresolution with a library?",
    "start": "1683680",
    "end": "1690040"
  },
  {
    "start": "1690040",
    "end": "1695230"
  },
  {
    "text": "So an example of a library\nhere is lib C dot A, which is the standard C library. And that's the\nlibrary that contains",
    "start": "1695230",
    "end": "1701540"
  },
  {
    "text": "the definition of printf. So if you use printf or any of\nthese other standard functions, they define the C library.",
    "start": "1701540",
    "end": "1708310"
  },
  {
    "text": "Another example is\nthe math library, where you have the\nsquare root function and a bunch of other\nmathematical functions.",
    "start": "1708310",
    "end": "1713632"
  },
  {
    "text": "So we are going to\nwant to know how to resolve with the library. So first, we have to\nknow what a library is. And what a library\nis, is just you",
    "start": "1713632",
    "end": "1720010"
  },
  {
    "text": "take a bunch of object files\ntogether and basically just concatenate them together. It's not literally concatenation\nbecause the library also",
    "start": "1720010",
    "end": "1727549"
  },
  {
    "text": "maintains an index that\nsays, has information about what modules,\nwhat included",
    "start": "1727550",
    "end": "1735020"
  },
  {
    "text": "dot O files contain\nwhich symbol definitions? But essentially it's\njust a concatenation",
    "start": "1735020",
    "end": "1740350"
  },
  {
    "text": "of a bunch of dot O files, OK? And they get put\ntogether in a library.",
    "start": "1740350",
    "end": "1746010"
  },
  {
    "text": "And there is some index\ninformation in front that says what is where\ninside the library. OK, so the approach to\nresolving symbols with a library",
    "start": "1746010",
    "end": "1754779"
  },
  {
    "text": "is almost the same as\nwhat we have so far, except with one twist. And the twist is\nthat often libraries",
    "start": "1754780",
    "end": "1760730"
  },
  {
    "text": "are extremely big, much bigger\nthan a single dot O file. And, one approach to\nresolving with libraries",
    "start": "1760730",
    "end": "1766620"
  },
  {
    "text": "would be to apply the\nsame approach here. So when you have\nsomething that's defined in the standard C\nlibrary like lib C or the math",
    "start": "1766620",
    "end": "1773640"
  },
  {
    "text": "library like lib\nL, you could just include the entire text\nof the library inside to build your program.",
    "start": "1773640",
    "end": "1778935"
  },
  {
    "text": "But that just makes\nthings extremely bloated. I mean, think about\nif you just wanted to use printf in your program\nlike we had in this example",
    "start": "1778935",
    "end": "1785297"
  },
  {
    "text": "and you had to include the\nentire C library, which is megabytes long, it\nseems like not a good way of doing the linking.",
    "start": "1785297",
    "end": "1792814"
  },
  {
    "text": "So what we're going to do with\nthe resolution of libraries is essentially the idea is\nto only include the dot O",
    "start": "1792814",
    "end": "1800130"
  },
  {
    "text": "files that are in the library\nin which undefined symbols that were previously\nencountered are defined.",
    "start": "1800130",
    "end": "1807390"
  },
  {
    "text": "And if you think a little\nbit about what I said, that's one reason why\nit usually a good idea when you do GCC and\nuse the linker, use LD,",
    "start": "1807390",
    "end": "1818030"
  },
  {
    "text": "to specify the\nlibraries at the end because what we're\ngoing to do is we're going to take\nall the dot O files,",
    "start": "1818030",
    "end": "1823860"
  },
  {
    "text": "and then they're going to\nbe things like dash LM. I mean, the standard\nC library is usually, by default, already included\non the command line.",
    "start": "1823860",
    "end": "1832480"
  },
  {
    "text": "But if you have functions\nlike square root and so on, here it what we're going to\ndo is we're going to build up. What the linker\nis going to do is",
    "start": "1832480",
    "end": "1838380"
  },
  {
    "text": "it is going to build up a\nset of undefined symbols until it gets to the end. And there's going to be\nundefined symbols remaining.",
    "start": "1838380",
    "end": "1844260"
  },
  {
    "text": "If you use the\nsquare root program, the square root\nfunction, and you didn't write your own\nsquare root function,",
    "start": "1844260",
    "end": "1849510"
  },
  {
    "text": "it's in the math library. Then you might ask for the\nmath library to be included, and you want to pull the\ndefinition of square root",
    "start": "1849510",
    "end": "1855530"
  },
  {
    "text": "from The math library the\nway in which the linker does to pull the right dot O file is\nthat the math library is going",
    "start": "1855530",
    "end": "1864780"
  },
  {
    "text": "to have information that says\nwhich object file contains what symbols, and anytime you see an\nundefined symbol at this stage,",
    "start": "1864780",
    "end": "1873270"
  },
  {
    "text": "we are going to scan\nthis archive looking for the symbol that's been\nundefined, in particular looking at this example\nfor the square root symbol.",
    "start": "1873270",
    "end": "1880710"
  },
  {
    "text": "OK, and when we find the square\nroot symbol somewhere inside in some dot O file, we're\ngoing to take that dot O file,",
    "start": "1880710",
    "end": "1886860"
  },
  {
    "text": "and not the rest of\nthe library, and then use this algorithm that we did. So take that dot O file\nalone and push that as input",
    "start": "1886860",
    "end": "1894900"
  },
  {
    "text": "to this algorithm. That's the way in which\nwe're going to build it up. So that's why at least in\nthis particular implementation",
    "start": "1894900",
    "end": "1902130"
  },
  {
    "text": "of the linker which is very\nsimple, if you put the LM way up in front, you are\na little bit in trouble",
    "start": "1902130",
    "end": "1908260"
  },
  {
    "text": "because if Fn dot O is the file\nthat actually uses square root, and the math library was\nincluded well in front,",
    "start": "1908260",
    "end": "1914510"
  },
  {
    "text": "then square root\nwould not yet have been part of the undefined\nset of symbols until then.",
    "start": "1914510",
    "end": "1922090"
  },
  {
    "text": "And there are other\nways to deal with it. You can have linkers that go\nin more passes that presumably can deal with this problem.",
    "start": "1922090",
    "end": "1927594"
  },
  {
    "text": "But this is just an example\nof how GNU-Linux does this, and that's just worth knowing.",
    "start": "1927594",
    "end": "1933600"
  },
  {
    "text": "So this idea of linking\nand symbol resolution and relocation,\npeople have worked",
    "start": "1933600",
    "end": "1939100"
  },
  {
    "text": "on this for a very long time. And almost every\nsoftware system uses it. In fact, if you use LaTeX to\nbuild your design papers and so",
    "start": "1939100",
    "end": "1946750"
  },
  {
    "text": "on, it does symbol\nresolution as well because there is all\nsorts of cross-references that are there in LaTeX.",
    "start": "1946750",
    "end": "1952700"
  },
  {
    "text": "And it uses essentially the\nsame kinds of algorithms, go over the files and\ngo over the documents in multiple passes and\nresolve the symbol.",
    "start": "1952700",
    "end": "1959200"
  },
  {
    "text": "So it's a pretty\ngeneral algorithm that we described here of\nbuilding these different sets",
    "start": "1959200",
    "end": "1964340"
  },
  {
    "text": "to ultimately figure out whether\nthere are undefined references remaining at the end or not. ",
    "start": "1964340",
    "end": "1981922"
  },
  {
    "text": "So I want to step\nback for a minute and generalize on the\ndifferent approaches that we've seen so far for\ndoing symbol resolution.",
    "start": "1981922",
    "end": "1990790"
  },
  {
    "text": "And today we saw one approach\nfor doing symbol resolution. But in fact, last time we saw a\ncouple of different approaches",
    "start": "1990790",
    "end": "1996940"
  },
  {
    "text": "to resolve names whose values\nwe didn't actually know.",
    "start": "1996940",
    "end": "2001970"
  },
  {
    "text": "So, we're going to step\nback and generalize with a couple of\ndifferent techniques that we saw the\ndifferent examples.",
    "start": "2001970",
    "end": "2011470"
  },
  {
    "text": "So the general problem\nhere, the specifics are how you can find out where\nthese undefined symbols are",
    "start": "2011470",
    "end": "2018350"
  },
  {
    "text": "defined, or in the\nUNIX example, how you can take a big path name and\nidentify which blocks contain",
    "start": "2018350",
    "end": "2025580"
  },
  {
    "text": "the files or contain the\ndata for the file that was named in the path. But the general problem is\nyou have a set of names.",
    "start": "2025580",
    "end": "2035220"
  },
  {
    "text": "And associated with\neach name is a value. ",
    "start": "2035220",
    "end": "2046630"
  },
  {
    "text": "And these names get\nassociated with or mapped to the different values. In fact, the names get bound\nto the different values.",
    "start": "2046630",
    "end": "2052989"
  },
  {
    "text": "And in this example,\nthe linker needed to take a name like the\ndefinition of a symbol and needed to identify,\nwhat's the value associated",
    "start": "2052989",
    "end": "2059612"
  },
  {
    "text": "with that symbol? The value here in\nthis context is, where is this name, the\nsquare root function?",
    "start": "2059612",
    "end": "2065700"
  },
  {
    "text": "Where is it actually defined? At what location is it? OK, and so the way in\nwhich that resolution",
    "start": "2065701",
    "end": "2073940"
  },
  {
    "text": "is going to be done is done\nand general using something called the name\nmapping algorithm. ",
    "start": "2073940",
    "end": "2088179"
  },
  {
    "text": "And the mapping of a name to\nvalue being done by the name mapping algorithm\ntakes into account,",
    "start": "2088179",
    "end": "2094989"
  },
  {
    "text": "or takes as input something\ncalled the context. And I'll describe this with\nan example in a minute.",
    "start": "2094989",
    "end": "2102010"
  },
  {
    "text": "So somebody has found\na name to value. And when you are\na linker or when you are part of the\nUNIX file system,",
    "start": "2102010",
    "end": "2108887"
  },
  {
    "text": "and you're trying to\nidentify the value associated with the name, you're going\nto have to resolve that name to find a value.",
    "start": "2108887",
    "end": "2114464"
  },
  {
    "text": "And that resolution\nis going to be done in a particular context. So, for example, you\nmight have two files",
    "start": "2114464",
    "end": "2120200"
  },
  {
    "text": "with the same name in two\ndifferent directories, and that's fine. The same name can have\ntwo different values",
    "start": "2120200",
    "end": "2126520"
  },
  {
    "text": "because that resolution from\nthe name to the correct value, in the directory case\nit's an inode number would",
    "start": "2126520",
    "end": "2132420"
  },
  {
    "text": "be done in the context\nof the directory in which the resolution is being done. OK, so what we've seen over\nthe last couple of days,",
    "start": "2132420",
    "end": "2140982"
  },
  {
    "text": "the last lecture, and today,\nare three different ways of doing it. And it turns out that\nin almost every system,",
    "start": "2140982",
    "end": "2146140"
  },
  {
    "text": "or in every system\nthat I know of, anyway, there's basically three ways\nof doing this name resolution.",
    "start": "2146140",
    "end": "2152810"
  },
  {
    "text": "The first way -- the simplest\nway -- is a symbol lookup. Look in the context\nof a dot O file, which",
    "start": "2152810",
    "end": "2163510"
  },
  {
    "text": "has a set of defined symbols. Taking one of the symbols,\nthe name, in that case, as input, and finding\nout where it's",
    "start": "2163510",
    "end": "2169630"
  },
  {
    "text": "been defined in that dot O file\nis basically a table lookup. That's what that symbol\ntable section describes.",
    "start": "2169630",
    "end": "2177180"
  },
  {
    "text": "From the disk example\nfrom last time, the inode table is an\nexample of a table lookup. I mean, there's\na portion of disk",
    "start": "2177180",
    "end": "2183550"
  },
  {
    "text": "that has in it the mapping\nbetween inode numbers and the corresponding inodes.",
    "start": "2183550",
    "end": "2188570"
  },
  {
    "text": "And that's just a table lookup. So when you want to go from\nan inode number to an inode, you do a table lookup. And that's the\nsimplest base form,",
    "start": "2188570",
    "end": "2195580"
  },
  {
    "text": "base case of how this\nname resolution is done. The second way of\ndoing name resolution",
    "start": "2195580",
    "end": "2202800"
  },
  {
    "text": "is something called a\npathname resolution.  We didn't see an\nexample of this today,",
    "start": "2202800",
    "end": "2209650"
  },
  {
    "text": "but we saw an example\nof pathname resolution the last time. If you take a big UNIX\npathname slash home",
    "start": "2209650",
    "end": "2214660"
  },
  {
    "text": "slash foo slash\nbar, what we did was start left to right\nalong that path and narrowed down our resolution\nof the file to get to the block",
    "start": "2214660",
    "end": "2225760"
  },
  {
    "text": "that we wanted while going\nthrough a path, sorry, not a search path, but going to\nthe path that names the item.",
    "start": "2225760",
    "end": "2235520"
  },
  {
    "text": "And a third way of\ndoing name resolution is what we saw today.",
    "start": "2235520",
    "end": "2240619"
  },
  {
    "text": "And that's an example of\nsearching through contexts. ",
    "start": "2240620",
    "end": "2249104"
  },
  {
    "text": "There's really no path here. I just tell you, here's\na set of dot O files, and here's a set of libraries. And the symbols\nthat are undefined",
    "start": "2249104",
    "end": "2256030"
  },
  {
    "text": "are defined in different\nmodules of my program, or F.O2 in different\nmodules of my program are defined somewhere\namong these modules.",
    "start": "2256030",
    "end": "2262580"
  },
  {
    "text": "And I'm not really going\nto tell the linker what's been defined where. It's up to the linker\nto figure it out, and it does that by\nbasically running a search",
    "start": "2262580",
    "end": "2268589"
  },
  {
    "text": "running a search through a\nvariety of different contexts. So, each dot O file\nand each library is a new context in which a\nsearch for previously undefined",
    "start": "2268590",
    "end": "2276920"
  },
  {
    "text": "symbol happens.  And in this particular case,\nthe search within each context",
    "start": "2276920",
    "end": "2284320"
  },
  {
    "text": "takes the form of\nthe table lookup, OK? So, those are the\nthree techniques",
    "start": "2284320",
    "end": "2290010"
  },
  {
    "text": "for how you do name\nresolution in general. And we saw two of\nthem today, and we saw two of them, the\nfirst two, last time",
    "start": "2290010",
    "end": "2296870"
  },
  {
    "text": "when we talked about\nthe UNIX file system. ",
    "start": "2296870",
    "end": "2312019"
  },
  {
    "text": "So the last step in the\nprocess of what a linker does after symbol resolution\nand relocation, relocation",
    "start": "2312020",
    "end": "2319559"
  },
  {
    "text": "in this particular kind of\nlinking, I didn't use the term, but this form of\nlinking is called static",
    "start": "2319560",
    "end": "2324650"
  },
  {
    "text": "linking because we're\ngoing to take all of these different object files\nand defined on the command line or on the library,\nand build together",
    "start": "2324650",
    "end": "2331100"
  },
  {
    "text": "a single big binary that has\nbeen linked once up front where the linker's called. That's called static linking.",
    "start": "2331100",
    "end": "2337210"
  },
  {
    "text": "Internal relocation\nin that context is pretty straightforward. But so we're not going to\ntalk more about that except",
    "start": "2337210",
    "end": "2343560"
  },
  {
    "text": "to note that this\nrelocation table is maintained in each object file. But the third step is a little\nmore slightly more complicated,",
    "start": "2343560",
    "end": "2351059"
  },
  {
    "text": "and actually varies a lot\ndepending on the system.",
    "start": "2351060",
    "end": "2356370"
  },
  {
    "text": "And that's program loading.  And the problem that's\nsolved by loading",
    "start": "2356370",
    "end": "2363700"
  },
  {
    "text": "is that the linker\nproduces an output program that's executable. It's and you can run a program. In UNIX, you run it by typing\nsomething on a command line.",
    "start": "2363700",
    "end": "2371930"
  },
  {
    "text": "Or in Windows, you\nclick on something, and effectively that causes\na shell to execute a program.",
    "start": "2371930",
    "end": "2379010"
  },
  {
    "text": "So somebody has to\ndo the work of when you type something on the\ncommand line, somebody",
    "start": "2379010",
    "end": "2384030"
  },
  {
    "text": "has to do the work of looking\nat what file has been typed, taking the contents of\nthe file, loading it up",
    "start": "2384030",
    "end": "2390800"
  },
  {
    "text": "into memory, passing\ncontrol to something that can then start\nrunning the program. And typically the place\nwhere that control is passed",
    "start": "2390800",
    "end": "2397910"
  },
  {
    "text": "is the interpreter\ncorresponding to the program. So all of this work\nis done in UNIX",
    "start": "2397910",
    "end": "2403520"
  },
  {
    "text": "by a program called execve. So the actual loader in UNIX\nis a program called execve.",
    "start": "2403520",
    "end": "2410267"
  },
  {
    "text": "And its job, once you type\nit on the command line, is the shell invokes it. And what it does is to do what I\nsaid, which is look at the file",
    "start": "2410267",
    "end": "2417000"
  },
  {
    "text": "name, take the contents of\nit, load it up into memory, and pass control to basically\nthe first line of the program.",
    "start": "2417000",
    "end": "2425620"
  },
  {
    "text": "Often, modern object files\nare a little more complicated. They actually have\nsomething that says who the interpreter\nof the program is.",
    "start": "2425620",
    "end": "2431240"
  },
  {
    "text": "So you pass control\nto that interpreter, which in turn goes\nto a bunch of steps,",
    "start": "2431240",
    "end": "2436900"
  },
  {
    "text": "and then invokes the\nfirst line in main. And that's what the C\nloader, the way in which",
    "start": "2436900",
    "end": "2444020"
  },
  {
    "text": "loading a program that's\nwritten in C works. ",
    "start": "2444020",
    "end": "2450550"
  },
  {
    "text": "So, so far what we've\nseen is, as I mentioned, an example of linking called\nstatic linking where you take",
    "start": "2450550",
    "end": "2456769"
  },
  {
    "text": "all these object\nfiles and libraries, and extract the right\nobject files out of it and build a big program. So, what you'll find is\nthat even small programs",
    "start": "2456769",
    "end": "2465760"
  },
  {
    "text": "like this one, all it's doing\nis multiplying two numbers.",
    "start": "2465760",
    "end": "2471630"
  },
  {
    "text": "If I compile it --",
    "start": "2471630",
    "end": "2483079"
  },
  {
    "text": "-- it's pretty\nbig, almost 400 kB.",
    "start": "2483080",
    "end": "2488110"
  },
  {
    "text": "I mean, it's\nmultiplying two numbers and it takes 400\nkB to multiply it. And the reason is that\nI made the mistake",
    "start": "2488110",
    "end": "2494880"
  },
  {
    "text": "of including, I have to\nshow the output to the user, so I call it printf. And printf happens with part\nof a big object file that",
    "start": "2494880",
    "end": "2501350"
  },
  {
    "text": "defines a lot of other things. And that whole thing got\nbuilt as part of the program.",
    "start": "2501351",
    "end": "2507142"
  },
  {
    "text": "Now, if you have\na lot of programs, so it's not just that\nthe files are big. I mean, disks, as a mentioned\na couple lectures ago,",
    "start": "2507142",
    "end": "2512930"
  },
  {
    "text": "disks are cheap. And so that's not really\nthe problem as much. The problem is that this\nis the entire program,",
    "start": "2512930",
    "end": "2518830"
  },
  {
    "text": "so it has to get loaded in. So if you have some machine on\nwhich a hundred processors run,",
    "start": "2518830",
    "end": "2524270"
  },
  {
    "text": "and each of those\nprocessors has printf's in a few places or even one\nprintf, each of those programs",
    "start": "2524270",
    "end": "2530190"
  },
  {
    "text": "is going to be extremely big. So the way in which you\ndeal with this problem",
    "start": "2530190",
    "end": "2536020"
  },
  {
    "text": "is to do something that's\npretty obvious in retrospect. Why have multiple copies\nof the same module?",
    "start": "2536020",
    "end": "2541740"
  },
  {
    "text": "Why don't we just have one copy\nof that module running and all the programs that\nuse that module?",
    "start": "2541740",
    "end": "2548270"
  },
  {
    "text": "And that's done using\nan idea called a shared object or shared modules.",
    "start": "2548270",
    "end": "2557420"
  },
  {
    "text": "And this stuff is extremely hot. If you look at recent\nactivity in almost every",
    "start": "2557420",
    "end": "2562510"
  },
  {
    "text": "modular software system\nlike you look at Apache or you look at many\ndatabase systems, and also you look at GNU-Linux,\nthere's been a ton of activity",
    "start": "2562510",
    "end": "2570440"
  },
  {
    "text": "over the past five or six\nyears on different ways of optimizing things so that,\nthe idea is a very old idea.",
    "start": "2570440",
    "end": "2575544"
  },
  {
    "text": "But there's still\nbeen a lot of activity making it efficient\nand practical over the last five to ten years.",
    "start": "2575544",
    "end": "2582450"
  },
  {
    "text": "The problem with shared\nobjects is the following. And this has become\na little more clear when we talk about actually\nsomething called an address",
    "start": "2582450",
    "end": "2591930"
  },
  {
    "text": "space a couple\nlectures from now. But the basic problem is that\ninstructions are associated",
    "start": "2591930",
    "end": "2598270"
  },
  {
    "text": "with memory locations,\nand they run each thing in the object file. And the binary has an\ninstruction location.",
    "start": "2598270",
    "end": "2604670"
  },
  {
    "text": "And data has a\nparticular location associated with it as well. And the problem is that when\nyou have two programs that each",
    "start": "2604670",
    "end": "2612530"
  },
  {
    "text": "want to use a shared module,\nunless you're really careful about how you design it, it's\ngoing to be very hard for you",
    "start": "2612530",
    "end": "2619190"
  },
  {
    "text": "to ensure that for\nboth of those programs, this module that's going to\nbe shared has exactly the same addresses because if you have\nin one program the module being",
    "start": "2619190",
    "end": "2627720"
  },
  {
    "text": "called from address 17, and in\nanother program the module is",
    "start": "2627720",
    "end": "2633170"
  },
  {
    "text": "written up as 255, then that\nobject cannot be shared, right?",
    "start": "2633170",
    "end": "2639145"
  },
  {
    "text": "It's two different objects. And that's what happens\nwith static linking. If you take the\nSQR.O module and you",
    "start": "2639145",
    "end": "2646545"
  },
  {
    "text": "include that in two\ndifferent programs, the addresses that get\nassociated with it in the two different programs are going\nto be completely different.",
    "start": "2646545",
    "end": "2653590"
  },
  {
    "text": "So one challenge, and a\nsignificant one in the shared object is objects\nthat are shared",
    "start": "2653590",
    "end": "2661240"
  },
  {
    "text": "by different programs\nrunning at the same time is to generate code that is what\nis called position independent.",
    "start": "2661240",
    "end": "2669670"
  },
  {
    "text": "So it doesn't have\nin it anything",
    "start": "2669670",
    "end": "2675780"
  },
  {
    "text": "that's different for\nthe different programs. And so this is called\nposition independent code.",
    "start": "2675780",
    "end": "2683380"
  },
  {
    "text": "So the idea is when\nyou call the module on your computer,\nthe program counter",
    "start": "2683380",
    "end": "2688460"
  },
  {
    "text": "is going to point to something. And all of the addresses\ninside that module are going to have addresses. Obviously, they're\ngoing to have addresses,",
    "start": "2688460",
    "end": "2695060"
  },
  {
    "text": "but they're going to be\nrelative to the program counter. So when you jump to a location,\nI'm going to jump to 317.",
    "start": "2695060",
    "end": "2701356"
  },
  {
    "text": "You're going to\njump to something that says five locations\nfrom where you are now. So it's a kind of addressing\ncalled PC relative addressing.",
    "start": "2701356",
    "end": "2708680"
  },
  {
    "text": "And that's not going to be\nthe only thing that's used. But by and large, a requirement\nfor position independent code",
    "start": "2708680",
    "end": "2714470"
  },
  {
    "text": "is that all of the addressing\nbe relative to, say, the program counter. ",
    "start": "2714470",
    "end": "2720880"
  },
  {
    "text": "And once you have this kind of\nposition independent code, what",
    "start": "2720880",
    "end": "2726450"
  },
  {
    "text": "you have to do in your program,\nif you're using something like the square root\nprogram, let's say, OK, in the math library\nwhen you do the linking,",
    "start": "2726450",
    "end": "2733640"
  },
  {
    "text": "you don't have to include\nthe object file in which square root is defined.",
    "start": "2733640",
    "end": "2738710"
  },
  {
    "text": "All that your object\nfile has to do now is at the time it\nwas linked, there is some library,\nruntime library,",
    "start": "2738710",
    "end": "2746520"
  },
  {
    "text": "that you know when you\nlink the program has the definition of square root.",
    "start": "2746520",
    "end": "2751950"
  },
  {
    "text": "So what the program\ncontains when you run this F1 dot O, F2 dot O,\nall the way through the library",
    "start": "2751950",
    "end": "2759069"
  },
  {
    "text": "is it's just going to maintain\na pointer, a name actually. It's going to maintain a\nname to where the square root",
    "start": "2759070",
    "end": "2764690"
  },
  {
    "text": "function is defined. It's going to be a filename. OK, and so this is why sometimes\nwhen you type in a program,",
    "start": "2764690",
    "end": "2771203"
  },
  {
    "text": "and somebody has changed the\nconfiguration on your machine and built before, and somebody\nchanges the configuration, sometimes you get an error\nmessage that while you're",
    "start": "2771204",
    "end": "2777816"
  },
  {
    "text": "running the program, you get\nan error message that says some library dot SO not found.",
    "start": "2777816",
    "end": "2783040"
  },
  {
    "text": "It worked two days ago. It doesn't work now. And the reason for\nthat is somebody may have moved things\naround and you get an error",
    "start": "2783040",
    "end": "2790046"
  },
  {
    "text": "not when you\ncompile the program, but when you run the program. And many executions of\nprogram may not actually trigger the error at all.",
    "start": "2790046",
    "end": "2795660"
  },
  {
    "text": "It may get triggered only when\nthe actual object is needed. And that's called\ndynamic linking. ",
    "start": "2795660",
    "end": "2804480"
  },
  {
    "text": "And again, the way in\nwhich we do dynamic linking is to use the same\nname and constants. Rather than embed the entire\nobject file corresponding",
    "start": "2804480",
    "end": "2812470"
  },
  {
    "text": "to the module corresponding\nto a name of a function that's being defined elsewhere,\nmaintain a reference to it.",
    "start": "2812470",
    "end": "2820880"
  },
  {
    "text": "And load that reference\nup at runtime. Now, in order to\nenable for that object to be shared between\ndifferent programs,",
    "start": "2820880",
    "end": "2827530"
  },
  {
    "text": "all of the addressing inside\nthat has to be relative. That is, it has to be\nindependent of what",
    "start": "2827530",
    "end": "2833540"
  },
  {
    "text": "the PC's value for the starting\npoint of that module is. And that's called\nposition independent code.",
    "start": "2833540",
    "end": "2841010"
  },
  {
    "text": "So that's the basic\nstory behind how linking works and almost\nall software systems",
    "start": "2841010",
    "end": "2846880"
  },
  {
    "text": "involving libraries and modules\nends up having a linking in it. I mentioned LaTeX as\nan example before.",
    "start": "2846880",
    "end": "2853000"
  },
  {
    "text": "Even document systems\nhave linking in it. And it's a pretty fundamental\nalgorithm that we talked about. It's specific to GNU-Linux,\nbut the basic idea",
    "start": "2853000",
    "end": "2859610"
  },
  {
    "text": "is pretty common. Now, what we'll see next time\nis that this way of modularizing has a lot of nice\nproperties, allows",
    "start": "2859610",
    "end": "2865450"
  },
  {
    "text": "you to build big programs,\nbut at the same time has pretty bad fault isolation\nproperties that we'll talk about next time.",
    "start": "2865450",
    "end": "2872490"
  },
  {
    "start": "2872490",
    "end": "2879946"
  }
]