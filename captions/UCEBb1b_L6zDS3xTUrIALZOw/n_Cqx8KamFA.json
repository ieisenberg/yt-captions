[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6950"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6950",
    "end": "13500"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13500",
    "end": "18680"
  },
  {
    "start": "18680",
    "end": "27980"
  },
  {
    "text": "PROFESSOR: The last time we\ntalked about nondeterministic programming. And I think actually the\nmic is up pretty high.",
    "start": "27980",
    "end": "37290"
  },
  {
    "text": "If we can tone that down\njust a little bit. We talked about nondeterministic\nprogramming.",
    "start": "37290",
    "end": "43410"
  },
  {
    "text": "And as you recall, the rule\nwith nondeterministic programming is you should\nnever do it",
    "start": "43410",
    "end": "49630"
  },
  {
    "text": "unless you have to.  Today we're going to talk about",
    "start": "49630",
    "end": "55000"
  },
  {
    "text": "synchronizing with locks. And it goes doubly that you\nshould never synchronize without locks unless\nyou have to.",
    "start": "55000",
    "end": "64569"
  },
  {
    "text": "There's some good reasons for\nsynchronizing without locks as we'll see.",
    "start": "64569",
    "end": "70619"
  },
  {
    "text": "But it, once again, becomes even\nmore difficult to test correctness and to ensure that\nthe program that you think",
    "start": "70620",
    "end": "79550"
  },
  {
    "text": "you've written is, in\nfact, the program you meant to write. So we're going to talk\nabout a bunch of",
    "start": "79550",
    "end": "86260"
  },
  {
    "text": "really important topics. The first is memory\nconsistency. And then we'll talk a little bit\nabout lock free protocols",
    "start": "86260",
    "end": "93479"
  },
  {
    "text": "and one of the problems that\narises called the AVA problem. And then we're going to talk\nabout a technology that we're",
    "start": "93480",
    "end": "100700"
  },
  {
    "text": "using in the Cilk++ system,\nwhich tries to make an end run",
    "start": "100700",
    "end": "107180"
  },
  {
    "text": "around some of these problems\nand allows you to do synchronization without locks,\nwith low overhead.",
    "start": "107180",
    "end": "115410"
  },
  {
    "text": "But it only works in\ncertain context. So we're going to start with\nmemory consistency.",
    "start": "115410",
    "end": "121060"
  },
  {
    "text": " So here is a very simple\nparallel program.",
    "start": "121060",
    "end": "129729"
  },
  {
    "text": "So initially a and\nb are both 0. And processor zero\nmoves a 1 into a.",
    "start": "129729",
    "end": "137250"
  },
  {
    "text": "And then it moves whatever\nis in location b",
    "start": "137250",
    "end": "142360"
  },
  {
    "text": "into the EBX register. Processor one does something\ncomplementary.",
    "start": "142360",
    "end": "149070"
  },
  {
    "text": "It moves a 1 into b. And then it moves whatever is\nin a into the EAX register.",
    "start": "149070",
    "end": "159040"
  },
  {
    "text": "Into the EAX register as opposed\nto the EBX register. And the question is what are the\nfinal possible values of",
    "start": "159040",
    "end": "168870"
  },
  {
    "text": "EAX and EBX after both\nprocessors have executed. Seems like a straightforward\nenough question.",
    "start": "168870",
    "end": "175495"
  },
  {
    "text": " What values can EAX and EBX\nhave, depending upon-- there",
    "start": "175495",
    "end": "183320"
  },
  {
    "text": "may be scheduling of when things\nhappen and so forth. So it's not always going to\ngive the same answer.",
    "start": "183320",
    "end": "189319"
  },
  {
    "text": "But the question is what's\nthe set of answers that you can get? Well, it turns out you can't\njust answer this question for",
    "start": "189320",
    "end": "195230"
  },
  {
    "text": "any particular machine\nwithout knowing the machine's memory model.",
    "start": "195230",
    "end": "202370"
  },
  {
    "text": "So it depends upon how memory\noperations behave in the parallel computer system.",
    "start": "202370",
    "end": "208290"
  },
  {
    "text": "And different machines have\ndifferent memory models. And we'll give you different\nanswers for this code.",
    "start": "208290",
    "end": "215450"
  },
  {
    "text": "There'll be some answers that\nyou get on some machines, different answers on\ndifferent machines. ",
    "start": "215450",
    "end": "222620"
  },
  {
    "text": "So probably the bedrock of\nmemory models is a model",
    "start": "222620",
    "end": "228930"
  },
  {
    "text": "called sequential consistency. And this is intuitively what\nyou might think you want.",
    "start": "228930",
    "end": "235430"
  },
  {
    "text": " So Lamport in 1979 said, \"The\nresult of any execution is the",
    "start": "235430",
    "end": "242390"
  },
  {
    "text": "same as if the operations of\nall the processors were executed in some sequential\norder, and the operations of",
    "start": "242390",
    "end": "248939"
  },
  {
    "text": "each individual processor appear\nin this sequence in the order specified by\nits program.\"",
    "start": "248940",
    "end": "255380"
  },
  {
    "text": "So what does that mean? So what it says is that if\nI look at the processor's",
    "start": "255380",
    "end": "263560"
  },
  {
    "text": "program and the sequence of\noperations that are issued by that processor's program,\nthey're interleaved with the",
    "start": "263560",
    "end": "271780"
  },
  {
    "text": "corresponding sequences\ndefined by the other processors to produce a\nglobal linear order.",
    "start": "271780",
    "end": "278900"
  },
  {
    "text": " So the first thing is that\nthere's a global linear order",
    "start": "278900",
    "end": "284470"
  },
  {
    "text": "that consists of all of these\nprocessors' instructions being interleaved. ",
    "start": "284470",
    "end": "291850"
  },
  {
    "text": "In this linear order, whenever\nyou perform a load from memory into register, it receives the\nvalue that was stored by the",
    "start": "291850",
    "end": "300770"
  },
  {
    "text": "most recent store operation in\nthat linear order to that",
    "start": "300770",
    "end": "305919"
  },
  {
    "text": "location, i.e. it's memory. ",
    "start": "305920",
    "end": "311680"
  },
  {
    "text": "So you don't get something if\nyou have in this linear order",
    "start": "311680",
    "end": "317060"
  },
  {
    "text": "that two processors wrote. Well, one of them came last. The most recent one before\nyou read, that's the",
    "start": "317060",
    "end": "324340"
  },
  {
    "text": "one that you get. Now, there may be\nmany different interleavings and so forth. And you could get any of the\nvalues that correspond to any",
    "start": "324340",
    "end": "332520"
  },
  {
    "text": "of those interleavings. But the point is that you\nmust get a value that is represented by some\ninterleaving.",
    "start": "332520",
    "end": "339170"
  },
  {
    "text": " The hardware can then do\nanything it wants, but for the",
    "start": "339170",
    "end": "345240"
  },
  {
    "text": "execution to satisfy the\nsequential consistency model, for it to be sequentially\nconsistent, must appear as if",
    "start": "345240",
    "end": "352800"
  },
  {
    "text": "the loads and storage obey\nsome global linear order.",
    "start": "352800",
    "end": "358949"
  },
  {
    "text": "So let's be concrete about that\nwith the problem that I gave before.",
    "start": "358950",
    "end": "364580"
  },
  {
    "text": "So initially, we have\na and b are 0. And now, we have these\ninstructions executed.",
    "start": "364580",
    "end": "370620"
  },
  {
    "text": "So what I have to do is say, I\nget any possible outcome based on interleaving these\ninstructions in this order.",
    "start": "370620",
    "end": "378979"
  },
  {
    "text": "So if I look at it, I've\ngot two instructions here, two over here. So that there are six possible\ninterleavings because 4 choose",
    "start": "378980",
    "end": "388040"
  },
  {
    "text": "2 is 6 for those people\nwho've taken 6042.",
    "start": "388040",
    "end": "393270"
  },
  {
    "text": "So there are six possible\ninterleavings. So for example, if I execute\nfirst move a 1 into a, and",
    "start": "393270",
    "end": "401330"
  },
  {
    "text": "then I execute move load into\nregister, the value of b, and",
    "start": "401330",
    "end": "410330"
  },
  {
    "text": "then I move 1 into b, and then I\nload the value of a, I get a value of 1 for EAX and\na value of 0 for EBX.",
    "start": "410330",
    "end": "419940"
  },
  {
    "text": "For this particular interleaving\nof those instructions. ",
    "start": "419940",
    "end": "425310"
  },
  {
    "text": "That's what happens if\nI execute these two before these two. If I execute these two\ninstructions here before these",
    "start": "425310",
    "end": "432600"
  },
  {
    "text": "two here, I get the\norder 3412. And essentially, the opposite\nthing happens.",
    "start": "432600",
    "end": "437780"
  },
  {
    "text": "EAX gets 0 and EBX gets 1. And then, if I interleave them\nin some way, where 1 and 3",
    "start": "437780",
    "end": "446850"
  },
  {
    "text": "somehow come first before I do\nthe 2 and 4, then I'll get a value of 11 for each of them.",
    "start": "446850",
    "end": "454030"
  },
  {
    "text": "Those are the middle cases. So what don't I get?",
    "start": "454030",
    "end": "459386"
  },
  {
    "text": "AUDIENCE: 00 PROFESSOR: You never\ngets 00 in a sequentially consistent execution.",
    "start": "459386",
    "end": "466120"
  },
  {
    "text": "Sequential consistent implies\nthat no execution-- whoops, that should be EAX.",
    "start": "466120",
    "end": "472729"
  },
  {
    "text": "That EAX equals EBX equals 0. I don't ever get that outcome.",
    "start": "472730",
    "end": "479450"
  },
  {
    "text": "If I did, then I would say my\nmachine wasn't sequentially consistent.",
    "start": "479450",
    "end": "484860"
  },
  {
    "text": " So now let me take a detour a\nlittle bit to look at mutual",
    "start": "484860",
    "end": "491360"
  },
  {
    "text": "exclusion again. And understand what happens to\nmutual exclusion algorithms in",
    "start": "491360",
    "end": "498890"
  },
  {
    "text": "the context of memory\nconsistency. So everybody understood what\nsequential consistency is.",
    "start": "498890",
    "end": "504100"
  },
  {
    "text": "I simply look at my program\nas if I'm interleaving instructions. ",
    "start": "504100",
    "end": "512510"
  },
  {
    "text": "So most implementations of\nmutual exclusion, as I showed previously, employ some kind of\natomic read-modify-write.",
    "start": "512510",
    "end": "522530"
  },
  {
    "text": "So the example I gave you last\ntime was using the exchange",
    "start": "522530",
    "end": "528130"
  },
  {
    "text": "operation to atomically exchange\na value in a register with a value in memory.",
    "start": "528130",
    "end": "533920"
  },
  {
    "text": "People remember that? To implement a lock? So in order to implement\na lock, I",
    "start": "533920",
    "end": "540500"
  },
  {
    "text": "atomically switch two values. ",
    "start": "540500",
    "end": "546500"
  },
  {
    "text": "So we, in particular, use\nthe exchange one. And there are a bunch of other\ncommands that people can use. Test-and-set, compare-and-swap,",
    "start": "546500",
    "end": "552270"
  },
  {
    "text": "load-linked-store-conditional,\nwhich essentially do some kind",
    "start": "552270",
    "end": "557830"
  },
  {
    "text": "of read-modify-write\non memory. These tend to be expensive\ninstructions, as I mentioned. They usually tend to\ncost something",
    "start": "557830",
    "end": "563810"
  },
  {
    "text": "like an L2 cache hit. Now, the question is can\nmutual exclusion be",
    "start": "563810",
    "end": "570480"
  },
  {
    "text": "implemented with only atomic\nloads and stores? Do you really need one of these\nheavyweight operations",
    "start": "570480",
    "end": "578870"
  },
  {
    "text": "to implement mutual exclusion? What if I don't use our\nread-modify-write?",
    "start": "578870",
    "end": "584709"
  },
  {
    "text": "Is that possible to do it? And in fact, the\nanswer is yes.",
    "start": "584710",
    "end": "590690"
  },
  {
    "text": "So Dekker and Dijksra show that\nit can as long as the computer system is sequentially\nconsistent.",
    "start": "590690",
    "end": "598420"
  },
  {
    "text": "So as long as you have\nsequential consistency, you in fact, can implement a mutual\nexclusion with",
    "start": "598420",
    "end": "606850"
  },
  {
    "text": "read-modify-write. We're actually not going to\nuse either the Dekker or Dijksra algorithms, although\nyou can read about those in",
    "start": "606850",
    "end": "614090"
  },
  {
    "text": "the literature. We're going to look at what is\nprobably the simplest such algorithm that's been devised\nto date, which",
    "start": "614090",
    "end": "619579"
  },
  {
    "text": "is devised by Peterson. And I'm going to illustrate\nit with these two smileys.",
    "start": "619580",
    "end": "629370"
  },
  {
    "text": "That's a she. And that's a he. And they want to operate\non widget x. And she wants to frob it.",
    "start": "629370",
    "end": "636040"
  },
  {
    "text": "And he wants to borf it. And we want to preserve the\nproperty that we are not",
    "start": "636040",
    "end": "641240"
  },
  {
    "text": "frobbing and borfing\nat the same time. ",
    "start": "641240",
    "end": "646380"
  },
  {
    "text": "So how do we do that? Well, here's the code. So we're going to set up some\nthings before we start he and",
    "start": "646380",
    "end": "653120"
  },
  {
    "text": "she operating. So we're going to have\nour widget x. That's our protected variable. And we're going to have a\nBoolean set initially to false",
    "start": "653120",
    "end": "661700"
  },
  {
    "text": "that says whether she\nwants to frob it. So we don't want to make them\nfrob it unless they want to frob it.",
    "start": "661700",
    "end": "668019"
  },
  {
    "text": "And we don't want him to borf it\nunless he wants to borf it.",
    "start": "668020",
    "end": "673510"
  },
  {
    "text": "And we're going to have an\nextra auxiliary variable, which is whose turn it is.",
    "start": "673510",
    "end": "678620"
  },
  {
    "text": "So they're going to sort\nof do a take turn. But that only is going to come\ninto account if the other one",
    "start": "678620",
    "end": "685190"
  },
  {
    "text": "doesn't have a conflict. If they don't have a conflict,\nthen one of them is going to be able to go. So here's what she\nbasically does.",
    "start": "685190",
    "end": "691180"
  },
  {
    "text": "She initially sets\nthat she wants to operate on the widget.",
    "start": "691180",
    "end": "699440"
  },
  {
    "text": "And then, what she does is she\nsets the turn to be his. ",
    "start": "699440",
    "end": "707899"
  },
  {
    "text": "And then, while he wants it,\nand the turn is his, she's",
    "start": "707900",
    "end": "714350"
  },
  {
    "text": "going to just spin. Notice that you're not frobbing\nit in while loop. The body of the while\nloop is empty.",
    "start": "714350",
    "end": "720839"
  },
  {
    "text": "So this is a spinning\nsolution. So while he wants it, and it's\nhis turn, you're just going to",
    "start": "720840",
    "end": "727170"
  },
  {
    "text": "sit there, continually testing\nthe variables he wants and turn equals his until one of\nthem ends up being false.",
    "start": "727170",
    "end": "735810"
  },
  {
    "text": " So if he doesn't want it, or\nit's not his turn, then she",
    "start": "735810",
    "end": "743760"
  },
  {
    "text": "gets to frob it. And when she's done, she sets\nshe wants to false.",
    "start": "743760",
    "end": "748950"
  },
  {
    "text": "And he does a similar thing. He sets it to true, says\nit's her turn. And then, while she wants it,\nand the turn is hers, just",
    "start": "748950",
    "end": "756699"
  },
  {
    "text": "sits there waiting, continually\nre-executing this",
    "start": "756700",
    "end": "762190"
  },
  {
    "text": "until finally, one of these\nturns out to be false. And then he borfs it. And he sets it to false.",
    "start": "762190",
    "end": "767899"
  },
  {
    "text": "And then, they're doing both of\nthese things sort of in a loop, periodically coming\nback and executing it.",
    "start": "767900",
    "end": "775200"
  },
  {
    "text": "And what you want to do is you\ndon't want to make it so that it's forced. That it's one turn, then the\nother because maybe he never",
    "start": "775200",
    "end": "781460"
  },
  {
    "text": "wants to borf it. And then, she would be stuck\nnot being able to frob it, even though he doesn't want.",
    "start": "781460",
    "end": "788350"
  },
  {
    "text": "So if you think about this--\nlet's think about why this always is going to give\nyou mutual exclusion.",
    "start": "788350",
    "end": "795200"
  },
  {
    "text": " So basically, what's happening\nhere is if he wants it--",
    "start": "795200",
    "end": "801840"
  },
  {
    "text": "by the way, these things are\nnot easy to reason about. And usually, as much as I can\ntalk and talk in class, what",
    "start": "801840",
    "end": "808160"
  },
  {
    "text": "you really need to do is go\nhome, and sit down with this kind of thing. And study it for 10 minutes.",
    "start": "808160",
    "end": "815940"
  },
  {
    "text": "And then, you'll understand\nwhat the subtleties are as what's going on. But basically, what we're doing\nis we're making it so",
    "start": "815940",
    "end": "824620"
  },
  {
    "text": "that it's not going to be the\ncase that both she's setting",
    "start": "824620",
    "end": "829680"
  },
  {
    "text": "it and she wants it. And the turn is his. And then, if there's a race\nwhere he wants it also, then",
    "start": "829680",
    "end": "839010"
  },
  {
    "text": "that's going to preclude both of\nthem from going into it at the same time. And then whichever one sets\nthe turn, one of those is",
    "start": "839010",
    "end": "850040"
  },
  {
    "text": "going to occur first. And one is going to\noccur second. And whoever ends up coming\nsecond, the other",
    "start": "850040",
    "end": "858380"
  },
  {
    "text": "one gets to go ahead.  So it's very subtle how that\nis actually working to make",
    "start": "858380",
    "end": "866990"
  },
  {
    "text": "sure that each one is gating the\nother to allow them to go. ",
    "start": "866990",
    "end": "872470"
  },
  {
    "text": "But the way to reason about this\nis to reason about it is what are the possible\ninterleavings?",
    "start": "872470",
    "end": "877860"
  },
  {
    "text": "And the important interleavings\nhere as you can see are what happens when\nsetting these things.",
    "start": "877860",
    "end": "883709"
  },
  {
    "text": "And once they're set,\nwhat happens in testing these things? And especially because when you\ngo around the loop and so",
    "start": "883710",
    "end": "889810"
  },
  {
    "text": "forth, you have to imagine\nthat an arbitrarily long amount of time is gone. So for example, between the time\nthat you check that the",
    "start": "889810",
    "end": "897730"
  },
  {
    "text": "turn is his, he may have already\ngone around this loop. ",
    "start": "897730",
    "end": "904350"
  },
  {
    "text": "And so you have to\nworry about-- even though, it may look like\none instruction from this processors point of view for\ncorrectness purpose, you have",
    "start": "904350",
    "end": "911740"
  },
  {
    "text": "to imagine that an arbitrary\namount of computation could occur between any two\ninstructions.",
    "start": "911740",
    "end": "918340"
  },
  {
    "text": "So any question about\nthis code? People see how it preserves\nmutual exclusion and how you",
    "start": "918340",
    "end": "925780"
  },
  {
    "text": "use sequential consistency to\nreason about it by asking what are the possible\ninterleavings?",
    "start": "925780",
    "end": "932000"
  },
  {
    "text": "Questions? Yeah. AUDIENCE: So, I don't know\nif I got it right. So basically, sets the\n[UNINTELLIGIBLE]",
    "start": "932000",
    "end": "941148"
  },
  {
    "text": "to give him a chance before\nshe goes to loop.",
    "start": "941148",
    "end": "946500"
  },
  {
    "text": "So basically, she waits there\nuntil he has been able to go? That's why on the\n[UNINTELLIGIBLE].",
    "start": "946500",
    "end": "951770"
  },
  {
    "text": "PROFESSOR: So on this\nthird line-- AUDIENCE: Both of them. Either before actually\nfrobbing or borfing.",
    "start": "951770",
    "end": "959043"
  },
  {
    "text": "And before that while you always\ngive the turn to the other to give them\na chance to go. PROFESSOR: Yeah. So there are two things\nyou want to show.",
    "start": "959043",
    "end": "964550"
  },
  {
    "text": "One is that they can't\nboth be stalled on",
    "start": "964550",
    "end": "970470"
  },
  {
    "text": "the while loop there. And that can't happen because\nthe turn can't be simultaneously his and hers.",
    "start": "970470",
    "end": "976780"
  },
  {
    "text": "So you know that they're not\nboth going to deadlock in trying to do this by sitting\nthere waiting for the other",
    "start": "976780",
    "end": "983399"
  },
  {
    "text": "because of this. And now, the question is well,\nhow do you know that one can't",
    "start": "983400",
    "end": "988960"
  },
  {
    "text": "get through while the other\nis also going through?",
    "start": "988960",
    "end": "994070"
  },
  {
    "text": " And for that, you have to look\nand say, oh well, if you go",
    "start": "994070",
    "end": "1005780"
  },
  {
    "text": "through, then you know that it\nis either he doesn't want it, or it's not his turn.",
    "start": "1005780",
    "end": "1013279"
  },
  {
    "text": "And in which case, if\nhe doesn't want it, it's not his turn. If he does change it to that\nhe wants it, then in fact,",
    "start": "1013280",
    "end": "1018490"
  },
  {
    "text": "it's going to be your turn. Question? AUDIENCE: This only works for\nexactly two threads, right?",
    "start": "1018490",
    "end": "1023959"
  },
  {
    "text": "PROFESSOR: This only works\nfor exactly two threads. This does not work for three,\nbut there are extensions of",
    "start": "1023960",
    "end": "1029099"
  },
  {
    "text": "this sort of thing to\nend threads in an arbitrary large number.",
    "start": "1029099",
    "end": "1034859"
  },
  {
    "text": "However, the data structures\nto implement this kind of mutual exclusion for end threads\nend up taking space",
    "start": "1034859",
    "end": "1041959"
  },
  {
    "text": "proportional to n. And so one of the advantages\nof the built in atomics--",
    "start": "1041960",
    "end": "1048329"
  },
  {
    "text": "the compare-and-swap, or the\natomic exchange, or whatever--",
    "start": "1048329",
    "end": "1054590"
  },
  {
    "text": "is they work for an arbitrary\nnumber of threads with only a bounded amount of resource.",
    "start": "1054590",
    "end": "1060560"
  },
  {
    "text": "You don't require extra data\nstructures and so forth.",
    "start": "1060560",
    "end": "1066010"
  },
  {
    "text": "So that's why they put those\nthings in the architecture because in the architecture you\ncan build things that will",
    "start": "1066010",
    "end": "1074690"
  },
  {
    "text": "solve this problem much\nmore simply than this sort of thing. ",
    "start": "1074690",
    "end": "1084510"
  },
  {
    "text": "However, there are going to be\nlessons here that you may want to use in your programming,\ndepending on what you're doing. So now, it turns out that\nno modern day processor",
    "start": "1084510",
    "end": "1099309"
  },
  {
    "text": "implements sequential\nconsistency.  There have been machines that\nwere built-- actually quite",
    "start": "1099310",
    "end": "1105649"
  },
  {
    "text": "good machines-- that implemented sequential\nconsistency. But today, nobody\nimplements it.",
    "start": "1105650",
    "end": "1112920"
  },
  {
    "text": "They all implement some form\nof what's called relaxed consistency, where the\nhardware may reorder",
    "start": "1112920",
    "end": "1120930"
  },
  {
    "text": "instructions. And so you have things\nexecuting not in program order. And the compilers may reorder\ninstructions as well.",
    "start": "1120930",
    "end": "1129790"
  },
  {
    "text": "So both the hardware and the\nsoftware are going in there. So let's take a look at that.",
    "start": "1129790",
    "end": "1136720"
  },
  {
    "text": "So here's the program order\nfor one of the things. We move 1 into a, and then move\nthe value of b into EBX",
    "start": "1136720",
    "end": "1149840"
  },
  {
    "text": "to do a load. Here's the program order. Most modern hardware will switch\nthese and execute it in",
    "start": "1149840",
    "end": "1159760"
  },
  {
    "text": "this order. Why do you suppose? Even if you write it this way,\nthe instruction level",
    "start": "1159760",
    "end": "1166740"
  },
  {
    "text": "parallelism within the processor\nwill, in fact, execute it in the opposite\norder most of the time.",
    "start": "1166740",
    "end": "1175260"
  },
  {
    "text": "Yeah? AUDIENCE: Because loading\ntakes longer. PROFESSOR: Yeah. Because loading takes longer. Loading is going to\ntake latency.",
    "start": "1175260",
    "end": "1183290"
  },
  {
    "text": "I can't complete the load from\nthe processor's point of view until I get an answer. So if I load, and I wait for\nit to go out to the memory",
    "start": "1183290",
    "end": "1190730"
  },
  {
    "text": "system and back into\nthe processor, and then I do a store--",
    "start": "1190730",
    "end": "1196720"
  },
  {
    "text": "well, as soon as I've done\nthe store, I can move on. Even if the store takes\na while to get out to the memory system.",
    "start": "1196720",
    "end": "1201870"
  },
  {
    "text": "But if I do it in the\nopposite order. I do the store first, and then\nI do the load, I've ended up",
    "start": "1201870",
    "end": "1211650"
  },
  {
    "text": "wasting essentially one cycle,\nthe cycle to do the store, when I could have been\noverlapping that with the time",
    "start": "1211650",
    "end": "1219049"
  },
  {
    "text": "it took to do the load. So people follow that? So if I execute the load first,\nI can go right on to",
    "start": "1219050",
    "end": "1226870"
  },
  {
    "text": "execute the store. I can issue the load, go right\non to execute the store",
    "start": "1226870",
    "end": "1233950"
  },
  {
    "text": "without having to wait for the\nload to complete if I have a",
    "start": "1233950",
    "end": "1239159"
  },
  {
    "text": "multi-issue CPU in the\nprocessor core.",
    "start": "1239160",
    "end": "1244950"
  },
  {
    "text": "So you get higher instruction\nlevel parallelism. Now when is it safe for the\nhardware compiler to perform",
    "start": "1244950",
    "end": "1253490"
  },
  {
    "text": "this reordering? Can it always switch\ninstructions like this to put",
    "start": "1253490",
    "end": "1259070"
  },
  {
    "text": "loads before stores? ",
    "start": "1259070",
    "end": "1265360"
  },
  {
    "text": "When would this be a bad idea to\nput a load before a store? ",
    "start": "1265360",
    "end": "1273870"
  },
  {
    "text": "Yeah? AUDIENCE: You're loading the\nvariable you just stored. PROFESSOR: Yeah, if\nyou're loading the variable you just stored.",
    "start": "1273870",
    "end": "1279720"
  },
  {
    "text": "Suppose you say store into\nx and then load from x.",
    "start": "1279720",
    "end": "1287820"
  },
  {
    "text": "That's different from if\nI load from x, and then I store into x.",
    "start": "1287820",
    "end": "1293450"
  },
  {
    "text": "So if you're going to the same\nlocation, then that's not a",
    "start": "1293450",
    "end": "1300710"
  },
  {
    "text": "safe thing to do. So basically, in this case, if a\nis not equal to b, then this",
    "start": "1300710",
    "end": "1312620"
  },
  {
    "text": "is safe to do. But if a equals b, this\nis not safe to do. ",
    "start": "1312620",
    "end": "1319780"
  },
  {
    "text": "Because it's going to give\nyou a different answer. However, it turns out that\nthere's another time when this",
    "start": "1319780",
    "end": "1328190"
  },
  {
    "text": "is not safe to do. So this would have been the end\nof the story if we were running on one processor.",
    "start": "1328190",
    "end": "1334320"
  },
  {
    "text": "The other time that it's\nnot safe to do it is-- if it's safe, the other\nassumption is that there's no",
    "start": "1334320",
    "end": "1343320"
  },
  {
    "text": "concurrency. If there is concurrency, you can\nrun into trouble as well.",
    "start": "1343320",
    "end": "1348380"
  },
  {
    "text": " And the reason is because\nanother processor may be",
    "start": "1348380",
    "end": "1354420"
  },
  {
    "text": "changing the value that you're\nplanning to read.",
    "start": "1354420",
    "end": "1359710"
  },
  {
    "text": "And so if you read things out\nof order, you may violate sequential consistency.",
    "start": "1359710",
    "end": "1365180"
  },
  {
    "text": "Let me show you what's going on\nin the hardware so you have an appreciation of what\nthe issue is here.",
    "start": "1365180",
    "end": "1371030"
  },
  {
    "text": "So here's 30,000 feet of\nhardware reordering.",
    "start": "1371030",
    "end": "1376940"
  },
  {
    "text": "So the processor is going to\nissue memory operations to the",
    "start": "1376940",
    "end": "1382879"
  },
  {
    "text": "memory system. And results of memory\noperations are going to come back.",
    "start": "1382880",
    "end": "1388480"
  },
  {
    "text": "But they really only have\nto come back when? If they're loads.",
    "start": "1388480",
    "end": "1394670"
  },
  {
    "text": "If they're stores, they don't\nhave to come back. So the processor, in fact, can\nissue stores faster than the",
    "start": "1394670",
    "end": "1404570"
  },
  {
    "text": "network can handle them. And the memory system\ncan handle them. So the processors are\ngenerally very fast.",
    "start": "1404570",
    "end": "1409779"
  },
  {
    "text": "The memory systems are\nrelatively slow. But the processor is not\ngenerally issuing a store on",
    "start": "1409780",
    "end": "1416220"
  },
  {
    "text": "every cycle. It may do store, it may do\nsome additions, it may do another store, et cetera.",
    "start": "1416220",
    "end": "1422720"
  },
  {
    "text": "So rather than waiting for the\nmemory system to do every store, they create\na store buffer.",
    "start": "1422720",
    "end": "1429570"
  },
  {
    "text": "And the memory system pulls\nthings out of the store buffer as fast as it can.",
    "start": "1429570",
    "end": "1434880"
  },
  {
    "text": "And the processor shoves stuff\ninto the store buffer up to the point that the store buffer\ngets full, in which",
    "start": "1434880",
    "end": "1440360"
  },
  {
    "text": "case it would have to stall. But for most many codes, it\nnever has to stall because",
    "start": "1440360",
    "end": "1446630"
  },
  {
    "text": "there is a sufficient frequency\nof other operations going on that you don't\nhave to wait.",
    "start": "1446630",
    "end": "1453730"
  },
  {
    "text": "So when a store occurs, it\ndoesn't occur immediately on the store buffer. Now along comes a\nload operation.",
    "start": "1453730",
    "end": "1463700"
  },
  {
    "text": "And the load operation, if it's\nto a different address, you want to have that take\npriority because the processor",
    "start": "1463700",
    "end": "1470540"
  },
  {
    "text": "can be waiting. It's next instructions may\nbe waiting on the result.",
    "start": "1470540",
    "end": "1476090"
  },
  {
    "text": "So you want that to go\nas fast as possible. They have a passing lane here\nwhere the fast cars or the",
    "start": "1476090",
    "end": "1485190"
  },
  {
    "text": "important cars, the ambulances,\net cetera, in this case loads, can scoot by all\nthe other things in traffic",
    "start": "1485190",
    "end": "1491640"
  },
  {
    "text": "and get to the memory\nsystem first. But as we said, we don't want\nto do that if the last thing",
    "start": "1491640",
    "end": "1497510"
  },
  {
    "text": "that I stored was to\nthe same address. So in fact, there is content\naddressable memory here, which",
    "start": "1497510",
    "end": "1505890"
  },
  {
    "text": "matches the address that is\nbeing loaded with everything in the store buffer.",
    "start": "1505890",
    "end": "1511780"
  },
  {
    "text": "And if it does match, it gets\nsatisfied immediately by the store buffer.",
    "start": "1511780",
    "end": "1517340"
  },
  {
    "text": "And only does it make it out to\nthe network if it's not in the store buffer.",
    "start": "1517340",
    "end": "1523940"
  },
  {
    "text": "But what you can see here is\nthat this mechanism, which works great on one processor,\nviolates sequential",
    "start": "1523940",
    "end": "1532510"
  },
  {
    "text": "consistency because I may have\noperations going to two different memory locations,\nwhere the order, in fact,",
    "start": "1532510",
    "end": "1540580"
  },
  {
    "text": "matters to me. So let's see how\nthat works out. So first of all, let me tell you\nwhat the memory can-- so a",
    "start": "1540580",
    "end": "1547990"
  },
  {
    "text": "load can bypass a store\nto different address. First of all, any questions\nabout this mechanism?",
    "start": "1547990",
    "end": "1554350"
  },
  {
    "text": "So this accounts for a whole\nbunch of understanding of what",
    "start": "1554350",
    "end": "1562650"
  },
  {
    "text": "happens in concurrency\nin systems. This one understanding\nof store buffers.",
    "start": "1562650",
    "end": "1568810"
  },
  {
    "text": "It's absolutely crucial. And I have talked, by the way,\nwith lots of experts who don't",
    "start": "1568810",
    "end": "1574980"
  },
  {
    "text": "understand this. That this is what's going\non for why we don't have sequential consistency\nin our computers.",
    "start": "1574980",
    "end": "1582419"
  },
  {
    "text": "It's because they made the\ndecision to allow this optimization, even though it\ndoesn't preserve sequential",
    "start": "1582420",
    "end": "1589040"
  },
  {
    "text": "consistency. There were machines in the\npast that did support sequential consistency.",
    "start": "1589040",
    "end": "1594840"
  },
  {
    "text": "And what they did was they used\nspeculation to allow the",
    "start": "1594840",
    "end": "1600140"
  },
  {
    "text": "processor to assume that it was\nsequentially consistent. And if that turned out to be\nwrong, they were able to roll",
    "start": "1600140",
    "end": "1605820"
  },
  {
    "text": "back the processor's state\nto the point before the access was done.",
    "start": "1605820",
    "end": "1612440"
  },
  {
    "text": "In fact, the processor is\nalready doing that for branches, where it makes\nbranch predictions and",
    "start": "1612440",
    "end": "1618340"
  },
  {
    "text": "executes down a line. But it's wrong, it\nhas to flush the pipeline and so forth.",
    "start": "1618340",
    "end": "1624180"
  },
  {
    "text": "Why they don't do the same\nthing for hardware is an",
    "start": "1624180",
    "end": "1629540"
  },
  {
    "text": "interesting-- for loads of stores-- is an\ninteresting question. Because at some level\nthere's no reason",
    "start": "1629540",
    "end": "1636170"
  },
  {
    "text": "they couldn't do this. Instead, it's sort of been a\nthing where the software people say, yeah we\ncan handle it.",
    "start": "1636170",
    "end": "1643020"
  },
  {
    "text": "And the hardware\npeople say, OK. You're willing to handle it. We won't worry about it then.",
    "start": "1643020",
    "end": "1648170"
  },
  {
    "text": "When in fact, it just makes life\ncomplicated for everybody that you don't have sequential\nconsistency.",
    "start": "1648170",
    "end": "1654100"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] you have to do speculation\nacross both [INAUDIBLE].",
    "start": "1654100",
    "end": "1661669"
  },
  {
    "text": "PROFESSOR: Well here, you only\nhave to do speculation over what actually is coming out\nof your memory system. And if it doesn't match,\nyou could roll back.",
    "start": "1661670",
    "end": "1669309"
  },
  {
    "text": "The issue, in part, is how many\nmachine states are you ready to roll back to.",
    "start": "1669310",
    "end": "1674860"
  },
  {
    "text": "Loads come more frequently\nthan branches. That's one thing. So no doubt, there are\ngood reasons for why",
    "start": "1674860",
    "end": "1681399"
  },
  {
    "text": "they're doing it. Nevertheless, definitely loss\nof sequential consistency becomes a headache for a lot\nof people in doing a",
    "start": "1681400",
    "end": "1688830"
  },
  {
    "text": "concurrent program. We had a question here? Yes, Sara? AUDIENCE: So this does not\npreserve sequential consistency? But as long as there's only one\nprocessor, it should have",
    "start": "1688830",
    "end": "1695955"
  },
  {
    "text": "the same effect, right? PROFESSOR: But sequential\nconsistency for one processor is easy because all you\ndo is execute them--",
    "start": "1695956",
    "end": "1702190"
  },
  {
    "text": "AUDIENCE: Yeah, I'm\njust saying-- PROFESSOR: It should have the\nsame effect, exactly. So on one processor, this\nworks perfectly well.",
    "start": "1702190",
    "end": "1710080"
  },
  {
    "text": "If there's no concurrency, this\nis going to give you the same behavior. And yet, you've now got this\noptimization that loads can",
    "start": "1710080",
    "end": "1718470"
  },
  {
    "text": "bypass stores. And therefore, you can do a\nstore and a load and be able",
    "start": "1718470",
    "end": "1724399"
  },
  {
    "text": "to overlap their execution. So this definitely wins\nfor serial execution.",
    "start": "1724400",
    "end": "1732290"
  },
  {
    "text": "Yep, good. Any other questions about\nthis mechanism? ",
    "start": "1732290",
    "end": "1737620"
  },
  {
    "text": "You could reason about\nit on the quiz. That kind of thing, right?",
    "start": "1737620",
    "end": "1743250"
  },
  {
    "text": "Yeah, OK? So here's the x86 memory\nconsistency model.",
    "start": "1743250",
    "end": "1750960"
  },
  {
    "text": "For many years, Intel was\nunwilling to say what their memory consistency model was\nfor fear that people would",
    "start": "1750960",
    "end": "1756929"
  },
  {
    "text": "then rely on it. And then, they would\nbe forced into it. But recently, they've started\nbeing more explicit about it.",
    "start": "1756930",
    "end": "1763190"
  },
  {
    "text": "And this is the large\npart of it. I haven't put up all the things\nbecause there are a whole bunch of instructions,\nsuch as locking instructions",
    "start": "1763190",
    "end": "1772110"
  },
  {
    "text": "and so forth, for which for\nsome of them, it's more complicated. But this is the basics. So loads are not reordered\nwith loads.",
    "start": "1772110",
    "end": "1780190"
  },
  {
    "text": "So if you add a load to one\nlocation, a load to another location, they always execute\nin the same order.",
    "start": "1780190",
    "end": "1785470"
  },
  {
    "text": "Stores are not reordered\nwith stores. If you have store and then a\nsubsequent store, those two",
    "start": "1785470",
    "end": "1791309"
  },
  {
    "text": "stores always go\nin that order. Stores are not reordered\nwith prior loads.",
    "start": "1791310",
    "end": "1798240"
  },
  {
    "text": "So if you do a store\nafter a load-- if you do a load and then a\nstore, they're going to go in",
    "start": "1798240",
    "end": "1807530"
  },
  {
    "text": "that order. However, a load-- and this is what we just\ntalked about--",
    "start": "1807530",
    "end": "1812980"
  },
  {
    "text": "may be reordered with a prior\nstore to a different location but not with a prior store\nto the same location.",
    "start": "1812980",
    "end": "1819095"
  },
  {
    "text": " So that's exactly what we\njust talked about on the previous slide.",
    "start": "1819095",
    "end": "1825230"
  },
  {
    "text": "Then, loads and stores are\nnot reordered with lock instructions. So a certain set of instructions\nare called lock",
    "start": "1825230",
    "end": "1830789"
  },
  {
    "text": "instructions. And they include all the atomic\nupdates, the exchanges, comparisons-and-swaps, and\na variety of other atomic",
    "start": "1830790",
    "end": "1839160"
  },
  {
    "text": "operations that the\nhardware supports. The stores to the same location\nalways respect a",
    "start": "1839160",
    "end": "1845470"
  },
  {
    "text": "global order. Everybody sees the store\nto a location in",
    "start": "1845470",
    "end": "1851059"
  },
  {
    "text": "exactly the same order. And the lock instructions\nrespect a global total order.",
    "start": "1851060",
    "end": "1857409"
  },
  {
    "text": "So that everybody sees that this\nthread, or processor, got",
    "start": "1857410",
    "end": "1862460"
  },
  {
    "text": "a lock before that one. You don't have two different\nprocessors disagreeing on what",
    "start": "1862460",
    "end": "1868330"
  },
  {
    "text": "the order was that somebody\nacquired a lock or whatever. And then, memory ordering\npreserves transitive",
    "start": "1868330",
    "end": "1876190"
  },
  {
    "text": "visibility, which\nis sort of like saying it obeys causality. In other words, if after doing\na, if you had some effect, and",
    "start": "1876190",
    "end": "1887529"
  },
  {
    "text": "then you did b, it should look\nlike to other people like a and then b happened.",
    "start": "1887530",
    "end": "1892680"
  },
  {
    "text": "Like there's a causality\ngoing on. But that's not sequential\nconsistency, mainly",
    "start": "1892680",
    "end": "1899980"
  },
  {
    "text": "because of four here.  So what's the impact\nof reordering?",
    "start": "1899980",
    "end": "1906280"
  },
  {
    "text": "So here, we have our example\nfrom the beginning for the memory bottle, where I'm storing\na 1 into a and then",
    "start": "1906280",
    "end": "1915260"
  },
  {
    "text": "loading whatever is in b. And similarly, over\nhere the opposite.",
    "start": "1915260",
    "end": "1921890"
  },
  {
    "text": "So what happens if I'm allowed\nto do reordering?",
    "start": "1921890",
    "end": "1927040"
  },
  {
    "text": "What can happen to these\ntwo instructions? Yeah. They can execute in the\nopposite order.",
    "start": "1927040",
    "end": "1934060"
  },
  {
    "text": "Similarly, these two guys can\nexecute in the opposite order. So they can actually execute in\nthis order where we do the",
    "start": "1934060",
    "end": "1948049"
  },
  {
    "text": "load and then the stores. So it executes as if this\nwere the order.",
    "start": "1948050",
    "end": "1953450"
  },
  {
    "text": "Did I do this right? Executes as if this\nwere the order. So I could do 1, 2, 3, 4.",
    "start": "1953450",
    "end": "1958990"
  },
  {
    "text": "So if then, I do the ordering\n2, 4, 1, 3. ",
    "start": "1958990",
    "end": "1967250"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: I got the screwed\nup, I think. Didn't I? AUDIENCE: [INAUDIBLE]",
    "start": "1967250",
    "end": "1972820"
  },
  {
    "text": "PROFESSOR: Because I should be\nswapping these guys, right? AUDIENCE: Swapped the\nwrong [INAUDIBLE]. PROFESSOR: Ugh. OK.",
    "start": "1972820",
    "end": "1978730"
  },
  {
    "text": " So if I did this\none 2, 1, 4, 3.",
    "start": "1978730",
    "end": "1984850"
  },
  {
    "text": " So ignore this thing. Suppose I do the order 2.",
    "start": "1984850",
    "end": "1994049"
  },
  {
    "text": "So basically, I load b. Then, I load a. Then, I store a.",
    "start": "1994050",
    "end": "2003230"
  },
  {
    "text": "And then, I store b. What's the result value that\nare in EAX and EBX?",
    "start": "2003230",
    "end": "2011740"
  },
  {
    "text": "You get 00. Remember 00 wasn't the legal\nvalue from sequential",
    "start": "2011740",
    "end": "2020130"
  },
  {
    "text": "consistency. But in this case, the Intel\narchitecture and many other architectures out there will\ngive you the wrong value for",
    "start": "2020130",
    "end": "2030820"
  },
  {
    "text": "the execution of these\ninstructions. Any question about that?",
    "start": "2030820",
    "end": "2036270"
  },
  {
    "text": "So it doesn't preserve\nsequential consistency. ",
    "start": "2036270",
    "end": "2044370"
  },
  {
    "text": "So that's kind of scary in some\nway because you got to reason about this.",
    "start": "2044370",
    "end": "2050280"
  },
  {
    "text": "Let's see what happens in\nPeterson's algorithm if you don't have sequential\nconsistency.",
    "start": "2050280",
    "end": "2055888"
  },
  {
    "text": "So here we go. We have the code where\nshe wants is true,",
    "start": "2055889",
    "end": "2061179"
  },
  {
    "text": "turn is his, et cetera. How is this going to fail? What could happen here?",
    "start": "2061179",
    "end": "2067399"
  },
  {
    "start": "2067400",
    "end": "2074099"
  },
  {
    "text": "Where will the bug arise? What's going to happen? What's the reordering\nthat might happen?",
    "start": "2074100",
    "end": "2079520"
  },
  {
    "text": "AUDIENCE: On the while\nyou do loads, right? [INAUDIBLE] the he_wants\nand turn is. PROFESSOR: Sorry?",
    "start": "2079520",
    "end": "2084993"
  },
  {
    "text": "AUDIENCE: On the while\nstatement, you do a load, right? Because [INAUDIBLE]. PROFESSOR: Right. He_wants is a load.",
    "start": "2084994",
    "end": "2091809"
  },
  {
    "text": "AUDIENCE: And so that\nwill get reordered. PROFESSOR: Where could\nthat be reordered to? ",
    "start": "2091810",
    "end": "2099250"
  },
  {
    "text": "That could be reordered all\nthe way to the top. Similarly, this one can\nbe reordered all",
    "start": "2099250",
    "end": "2107130"
  },
  {
    "text": "the way to the top. So the loads could be ordered\nall the way to the top.",
    "start": "2107130",
    "end": "2113530"
  },
  {
    "text": "And now, what's going to happen\nis you're going to set that she_wants is true but\nget a value of he_wants",
    "start": "2113530",
    "end": "2120630"
  },
  {
    "text": "that might be old. And so they won't see\neach other's values.",
    "start": "2120630",
    "end": "2126109"
  },
  {
    "text": "And so then, both threads can\nnow enter the critical section simultaneously.",
    "start": "2126110",
    "end": "2131220"
  },
  {
    "text": " Yeah, Reid? AUDIENCE: If you swap the order\nof the loads, does the",
    "start": "2131220",
    "end": "2140112"
  },
  {
    "text": "[INAUDIBLE]? PROFESSOR: If you swap the\norder of the loads--",
    "start": "2140112",
    "end": "2145512"
  },
  {
    "text": "AUDIENCE: If you swap-- put\nthe turn equals his on the left, [INAUDIBLE]\non the right. Because according to--",
    "start": "2145512",
    "end": "2152484"
  },
  {
    "text": "PROFESSOR: Put the turn\nequals his over here? AUDIENCE: Because the he_wants\ncan't cross the load.",
    "start": "2152484",
    "end": "2158460"
  },
  {
    "text": "PROFESSOR: Yeah, but that's\nnot what you want to do. AUDIENCE: Then you can't\n[INAUDIBLE]. ",
    "start": "2158460",
    "end": "2165590"
  },
  {
    "text": "PROFESSOR: The whole idea here\nis that when you're saying you want to do something, you give\nthe other one a turn so that",
    "start": "2165590",
    "end": "2172319"
  },
  {
    "text": "whoever ends up winning the race\nallows just one of them",
    "start": "2172320",
    "end": "2178560"
  },
  {
    "text": "to go through. Yeah? AUDIENCE: I think the point is\nthat if you put turn equals his and he_wants--",
    "start": "2178560",
    "end": "2185720"
  },
  {
    "text": "PROFESSOR: You're saying\nthis stuff here. AUDIENCE: Swap those two\n[UNINTELLIGIBLE] turn equals his will not be reordered\nbefore the store that--",
    "start": "2185720",
    "end": "2193770"
  },
  {
    "text": "PROFESSOR: You might be right. Let me think about that. AUDIENCE: You both reorder\nthe same [? word. ?] AUDIENCE: But you just\nstored turn, right?",
    "start": "2193770",
    "end": "2200611"
  },
  {
    "text": "PROFESSOR: Yeah. So if do turn equals his-- I see what you're saying. Do this turn equals his. I was looking at this\nturn equals his.",
    "start": "2200611",
    "end": "2205920"
  },
  {
    "text": "AUDIENCE: You mean turn\nequals equals his. AUDIENCE: So the Boolean\nexpression [INAUDIBLE]. PROFESSOR: Yeah. OK, I hadn't thought\nabout that.",
    "start": "2205920",
    "end": "2210940"
  },
  {
    "text": "Let me just think about\nthat a second. So if we do the turn\nequals his--",
    "start": "2210940",
    "end": "2217175"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] and you won't reorder those\ntwo [INAUDIBLE]? PROFESSOR: Then the-- ",
    "start": "2217175",
    "end": "2226600"
  },
  {
    "text": "Yeah. You got to be--  I have to think about that.",
    "start": "2226600",
    "end": "2233760"
  },
  {
    "text": "I don't know about you folks,\nbut I find this stuff really hard to think about. And so do most people,\nI think.",
    "start": "2233760",
    "end": "2239760"
  },
  {
    "text": " This is one of these things\nwhere I don't think I can do without sitting down\nfor 10 minutes and",
    "start": "2239760",
    "end": "2247800"
  },
  {
    "text": "thinking about it deeply. But it's an interesting thought\nthat if you did it the",
    "start": "2247800",
    "end": "2252980"
  },
  {
    "text": "other direction that maybe\nthere would be a requirement there.",
    "start": "2252980",
    "end": "2259349"
  },
  {
    "text": "I'm skeptical that that is true\nbecause to my knowledge to do the mutual exclusion,\nyou pretty much have to do",
    "start": "2259350",
    "end": "2267020"
  },
  {
    "text": "what I'm going to\ntalk about next.  But it would be interesting\nif is true.",
    "start": "2267020",
    "end": "2273730"
  },
  {
    "text": " Because you also have to worry\nabout this guy getting",
    "start": "2273730",
    "end": "2280680"
  },
  {
    "text": "reordered with respect\nto this one. AUDIENCE: The loads can't\nbe reordered with respect to each other.",
    "start": "2280680",
    "end": "2285730"
  },
  {
    "text": "PROFESSOR: So he_wants\nand turn equals his. Yeah. So the loads won't\nbe reordered.",
    "start": "2285730",
    "end": "2292220"
  },
  {
    "text": "Yeah. So that looks OK. And then, you're saying and then\ntherefore, it can't go",
    "start": "2292220",
    "end": "2297460"
  },
  {
    "text": "forward because this one won't\nget reordered with that one. You might be right. That'd be cute.",
    "start": "2297460",
    "end": "2303700"
  },
  {
    "text": " So I have to update the slides\nfor next year if that's true.",
    "start": "2303700",
    "end": "2309370"
  },
  {
    "text": " So one way out of this quandary\nis to use what's",
    "start": "2309370",
    "end": "2316530"
  },
  {
    "text": "called a memory fence\nor memory barrier. And it's a hardware action\nthat enforces an ordering",
    "start": "2316530",
    "end": "2322950"
  },
  {
    "text": "constraint between the\ninstructions before and after the fence.",
    "start": "2322950",
    "end": "2328770"
  },
  {
    "text": "So a memory fence says don't\nallow the processor to reorder these things.",
    "start": "2328770",
    "end": "2334210"
  },
  {
    "text": "So why would you not want\nto do a memory fence? ",
    "start": "2334210",
    "end": "2341680"
  },
  {
    "text": "Then we'll talk about\nwhy you do it. Yeah? AUDIENCE: To force a\nhardware slowdown?",
    "start": "2341680",
    "end": "2347430"
  },
  {
    "text": "PROFESSOR: Yeah. You're forcing the hardware\nslowdown. You're also forcing compiler\nbecause the compiler has to respect that, too. You're not letting the compiler\ndo optimizations",
    "start": "2347430",
    "end": "2354480"
  },
  {
    "text": "across the fence. So generally, fences\nslow things down.",
    "start": "2354480",
    "end": "2361800"
  },
  {
    "text": "In addition, it turns\nout that they have some significant overhead. ",
    "start": "2361800",
    "end": "2366970"
  },
  {
    "text": "So you can issue a memory\nfence explicitly as an",
    "start": "2366970",
    "end": "2372510"
  },
  {
    "text": "instruction. So the mfence instruction\nsets a memory fence.",
    "start": "2372510",
    "end": "2379180"
  },
  {
    "text": "There's also, it turns out, on\nx86 an lfence and an sfence, which allow loads to go over\nbut not stores and",
    "start": "2379180",
    "end": "2390940"
  },
  {
    "text": "stores but not loads. And this one is basically\nboth. From the point of view of what\nwe're using it for, we're only",
    "start": "2390940",
    "end": "2397090"
  },
  {
    "text": "going to worry about\nthe fences. They're done by the\nexplicit one. But it also turns out all\nthe locking instructions",
    "start": "2397090",
    "end": "2403840"
  },
  {
    "text": "automatically put a fence in. One of the humorous things\nin recent memory is major",
    "start": "2403840",
    "end": "2414170"
  },
  {
    "text": "manufacturers for whom the lock\ninstruction was actually faster than doing a memory\nfence, which is kind of weird",
    "start": "2414170",
    "end": "2423000"
  },
  {
    "text": "because a lock instruction\ndoes a memory fence. So how do you think that sort\nof thing comes about?",
    "start": "2423000",
    "end": "2429530"
  },
  {
    "text": "So when you looked at\nperformance it would be like-- for this particular machine\nI'm thinking about--",
    "start": "2429530",
    "end": "2435020"
  },
  {
    "text": "it was 30 cycles to do\na lock instruction.",
    "start": "2435020",
    "end": "2441750"
  },
  {
    "text": "And it was on the order of 50\ncycles to do a memory fence. ",
    "start": "2441750",
    "end": "2449610"
  },
  {
    "text": "And so if you want to\ndo a memory fence, what should you do? AUDIENCE: Do a lock. PROFESSOR: Do a lock\ninstruction",
    "start": "2449610",
    "end": "2455490"
  },
  {
    "text": "instead to get the effect. But why do you suppose that\ncame up in the hardware? Why is it that one instruction\nwould be--",
    "start": "2455490",
    "end": "2462800"
  },
  {
    "start": "2462800",
    "end": "2468400"
  },
  {
    "text": "It's a social reason why this\nsort of thing happens.",
    "start": "2468400",
    "end": "2474190"
  },
  {
    "text": "So I don't know for sure. But I know enough about\nengineering to understand how",
    "start": "2474190",
    "end": "2479220"
  },
  {
    "text": "these things come about. So here's what goes on. They do studies of traces\nof programs.",
    "start": "2479220",
    "end": "2485680"
  },
  {
    "text": "And how often do you think\nlock instructions occur? And how often do you think\nfence instructions occur?",
    "start": "2485680",
    "end": "2492200"
  },
  {
    "text": "Turns out lock instructions\noccur all the time, whereas fences, they don't occur so\noften because usually it's",
    "start": "2492200",
    "end": "2499039"
  },
  {
    "text": "somebody who really knows what\nthey're doing who's using a memory fence. So then, they say to the\nengineering team, we're going",
    "start": "2499040",
    "end": "2506590"
  },
  {
    "text": "to make our code go faster. And lock instructions are\ngoing really fast. So they put a top engineer\non making lock",
    "start": "2506590",
    "end": "2513740"
  },
  {
    "text": "instructions go fast. They put a second-rate engineer\non making memory",
    "start": "2513740",
    "end": "2524530"
  },
  {
    "text": "fence operations go fast because\nthey're not used as often, without sort of\nrecognizing that, gee, what",
    "start": "2524530",
    "end": "2531780"
  },
  {
    "text": "you do for one is the\nsame problem. You can do the same thing\nfor the other.",
    "start": "2531780",
    "end": "2537510"
  },
  {
    "text": "So it ends up you'll see things\nin architecture that are really quite humorous like\nthat, where things are sort of like, wait a minute, how come\nthis is slower when well, it",
    "start": "2537510",
    "end": "2545750"
  },
  {
    "text": "probably has to do with the\nengineering team that built the system.",
    "start": "2545750",
    "end": "2551500"
  },
  {
    "text": "And actually now I'm aware of\ntwo architectures where they did the same kind of thing by\ndifferent manufacturers.",
    "start": "2551500",
    "end": "2558809"
  },
  {
    "text": "Where they got these\nmemory fences. It should be at least as fast\nbecause the one is doing--",
    "start": "2558810",
    "end": "2566390"
  },
  {
    "text": "anyway. Interesting story there. Now, you can actually access a\nmemory fence using a built in",
    "start": "2566390",
    "end": "2575580"
  },
  {
    "text": "function called sync\nsynchronize. And in fact, there whole\nset of atomics--",
    "start": "2575580",
    "end": "2580890"
  },
  {
    "text": "I've put the information here\nfor where you can go and look at the atomic operations that\ninclude memory fences and so",
    "start": "2580890",
    "end": "2587480"
  },
  {
    "text": "forth to using in\nthe compiler. It turns out when I was trying\nto get this going last night,",
    "start": "2587480",
    "end": "2593609"
  },
  {
    "text": "I couldn't get it to work. And it turns out that's because\nour compiler had a bug where this instruction was\ncompiling to nothing.",
    "start": "2593610",
    "end": "2605320"
  },
  {
    "text": "There's a compiler bug. And so I messed around for far\ntoo much time and then finally",
    "start": "2605320",
    "end": "2613460"
  },
  {
    "text": "sent out a help message\nto the T.A.s. And then, John figured out\nthat there was a bug. And he's patched all the\ncompilers so that you",
    "start": "2613460",
    "end": "2619520"
  },
  {
    "text": "guys all have it. But anyway, it was like, how\ncome this isn't working?",
    "start": "2619520",
    "end": "2626590"
  },
  {
    "text": "AUDIENCE: What compiler\nare we using? PROFESSOR: This was GCC. I was trying 4 1,\nand I tried 4 3.",
    "start": "2626590",
    "end": "2634120"
  },
  {
    "text": "And so the one that we're using\nin class for the most part, is 4 3. So anyway, John put\nthe patch in.",
    "start": "2634120",
    "end": "2640830"
  },
  {
    "text": "So now, when you use these instructions, they're all there. ",
    "start": "2640830",
    "end": "2649099"
  },
  {
    "text": "And then, the last thing is\nthat the typical cost of a memory fence operation is\ncomparable to that of an L2",
    "start": "2649100",
    "end": "2655610"
  },
  {
    "text": "cache access.  So memory fences tend to\nbe on our machine--",
    "start": "2655610",
    "end": "2664400"
  },
  {
    "text": "and I haven't actually measured\nin our machine. I meant to do that, and I\ndidn't get around to it. It's probably on the order\nof 10, or 15 cycles, or",
    "start": "2664400",
    "end": "2671849"
  },
  {
    "text": "something, which is not bad. If it's less than 20,\nit's pretty good.",
    "start": "2671850",
    "end": "2677859"
  },
  {
    "text": " So here's Peterson's algorithm\nwith memory fences.",
    "start": "2677860",
    "end": "2684549"
  },
  {
    "text": "You just simply sticky in the\nmemory fence there to prevent the reordering. And it's interesting if there's\na way that we can play",
    "start": "2684550",
    "end": "2691730"
  },
  {
    "text": "the game with the instruction\nstream to do the same thing because that would make this\ncode go, generally, a lot",
    "start": "2691730",
    "end": "2697350"
  },
  {
    "text": "faster in terms of overhead. And so using memory fences, you\ncan restore consistency.",
    "start": "2697350",
    "end": "2706380"
  },
  {
    "text": "Now, memory fences are\nlike data races. If you don't have them,\nhow do you know that you don't have them.",
    "start": "2706380",
    "end": "2711400"
  },
  {
    "text": "It's very difficult to\nregression test for them, which is one reason I\nthink there was a bug in the GCC compiler.",
    "start": "2711400",
    "end": "2717400"
  },
  {
    "text": "How do you know that some\npiece of code is failing because most of the time\nit will work correctly.",
    "start": "2717400",
    "end": "2725170"
  },
  {
    "text": "It's just occasionally, they'll\nbe some reordering, and timing, and race condition\nthat causes",
    "start": "2725170",
    "end": "2730680"
  },
  {
    "text": "it not to work out. In this case, you both have\nto have the race and the",
    "start": "2730680",
    "end": "2736270"
  },
  {
    "text": "reordering happening at the\nsame time for Peterson's algorithm, for example. So compilers can be\nvery difficult",
    "start": "2736270",
    "end": "2744090"
  },
  {
    "text": "for things like this. Really, the way to do it, which\nis what I was doing, was do an objdump and search\nfor is fence in there.",
    "start": "2744090",
    "end": "2754589"
  },
  {
    "text": "And in this case, it\nwasn't in there. AUDIENCE: And also compiler's\nself-analyzers, by itself.",
    "start": "2754590",
    "end": "2762609"
  },
  {
    "text": "And that's this instruction that\nbasically can take code. PROFESSOR: Right. It's not doing anything.",
    "start": "2762610",
    "end": "2767960"
  },
  {
    "text": "Right. So it says, oop, get out of it. Yep. Good. ",
    "start": "2767960",
    "end": "2775220"
  },
  {
    "text": "So any questions about\nconsistency. So what turns out to be most\nof the time when you're",
    "start": "2775220",
    "end": "2780490"
  },
  {
    "text": "designing things where you want\nto synchronize through memory directly, rather than\nusing locks or what have you.",
    "start": "2780490",
    "end": "2790610"
  },
  {
    "text": "The methodology that I found\nworks pretty well. Work it out for sequential\nconsistency, and then figure",
    "start": "2790610",
    "end": "2796010"
  },
  {
    "text": "out where you have to\nput the fences in. And that's a pretty\ngood methodology",
    "start": "2796010",
    "end": "2802529"
  },
  {
    "text": "for working out where-- here's sequential consistency. Now, what reorderings do I need\nto ensure in order to",
    "start": "2802530",
    "end": "2808750"
  },
  {
    "text": "make sure that it\nworks properly. And that can be error prone. So once again, big skull and\ncross bones on whether you",
    "start": "2808750",
    "end": "2816910"
  },
  {
    "text": "actually try this in practice. It really better make\na difference. ",
    "start": "2816910",
    "end": "2824100"
  },
  {
    "text": "Now, the fact that you can\nsynchronize directly through memory has led to a lot of\nprotocols that are called",
    "start": "2824100",
    "end": "2832600"
  },
  {
    "text": "lock-free protocols, which have\nsome advantages, even",
    "start": "2832600",
    "end": "2839610"
  },
  {
    "text": "though, in particular, because\nthey don't use locks. And so I want to illustrate some\nof those because you'll",
    "start": "2839610",
    "end": "2845870"
  },
  {
    "text": "see these in certain places. So recall the summing problem\nfrom last time. So here we have an array.",
    "start": "2845870",
    "end": "2853710"
  },
  {
    "text": "And what we're going to do is\nrun through all the elements in the array, computing\nsomething on every element,",
    "start": "2853710",
    "end": "2859310"
  },
  {
    "text": "and adding into result. And we wanted to parallelize\nthat. So we parallelize that\nwith a Cilk 4.",
    "start": "2859310",
    "end": "2865750"
  },
  {
    "text": "And what was the problem when\nwe parallelize this? We get a race.",
    "start": "2865750",
    "end": "2871770"
  },
  {
    "text": "So there's the race. We get a race on result because\nwe've got two parallel",
    "start": "2871770",
    "end": "2878110"
  },
  {
    "text": "instructions both\ntrying to update results at the same time. So we can solve that\nwith a lock.",
    "start": "2878110",
    "end": "2886230"
  },
  {
    "text": "And I showed you last\ntime that we could solve this for lock. By declaring a mutex, and then\nlocking before we update the",
    "start": "2886230",
    "end": "2896690"
  },
  {
    "text": "results, and then unlock. And of course, as we argued\nyesterday, that could cause severe contention.",
    "start": "2896690",
    "end": "2902170"
  },
  {
    "text": "Now, contention can\nbe an issue. But if it turns out that the\ncompute here, which I've moved",
    "start": "2902170",
    "end": "2907740"
  },
  {
    "text": "outside the lock notice. I've put it into temp and then\nadded temp in so I can lock",
    "start": "2907740",
    "end": "2913400"
  },
  {
    "text": "for the shortest\npossible time. If this compute is sufficiently\nlarge, there may be contention.",
    "start": "2913400",
    "end": "2918890"
  },
  {
    "text": "But it may not be a significant\ncontention in your execution because the update\nhere could be very, very short",
    "start": "2918890",
    "end": "2924860"
  },
  {
    "text": "compared with the time\nit takes to compute. So for example, if computing on\narray i cost you more than",
    "start": "2924860",
    "end": "2931290"
  },
  {
    "text": "say order n time, then the fact\nthat you have contention",
    "start": "2931290",
    "end": "2939000"
  },
  {
    "text": "there isn't going to matter,\ngenerally, because the total amount of time that you're going\nto be locking is just",
    "start": "2939000",
    "end": "2944710"
  },
  {
    "text": "small compared to the total\nexecution time.  Still in a multiprogram setting,\nthere may be other",
    "start": "2944710",
    "end": "2953370"
  },
  {
    "text": "problems that you can get into,\neven when you have this and even if you think\nthat contention",
    "start": "2953370",
    "end": "2959510"
  },
  {
    "text": "is going to be minimal.  So can anybody think of what\nthe issues might be?",
    "start": "2959510",
    "end": "2966160"
  },
  {
    "text": "Why could this be problematic\neven if contention is not a big issue? ",
    "start": "2966160",
    "end": "2975170"
  },
  {
    "text": "And the hint here is it's in\na multiprogram setting. ",
    "start": "2975170",
    "end": "2990720"
  },
  {
    "text": "So what happens in a\nmultiprogram setting. ",
    "start": "2990720",
    "end": "2998770"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] PROFESSOR: Because\nthe resolve is-- AUDIENCE: [INAUDIBLE PHRASE]",
    "start": "2998770",
    "end": "3004060"
  },
  {
    "text": " PROFESSOR: It actually doesn't\nhave to do with resolve here.",
    "start": "3004060",
    "end": "3009960"
  },
  {
    "text": "It has to do with locking\nexplicitly. It's a problem with locking in a\nmultiprogrammed environment.",
    "start": "3009960",
    "end": "3016800"
  },
  {
    "text": "What happens in a\nmultiprogrammed environment? What do I mean by\nmultiprogrammed environment? AUDIENCE: [INAUDIBLE]",
    "start": "3016800",
    "end": "3022090"
  },
  {
    "text": "PROFESSOR: Have multiple\njobs running, right? And what happens to the\nprocessor when there are multiple jobs running?",
    "start": "3022090",
    "end": "3027762"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Contact switches. ",
    "start": "3027762",
    "end": "3034530"
  },
  {
    "text": "So now, what can\ngo wrong here? What can be really bad here? Yeah. AUDIENCE: You aquire the\nlock and then the",
    "start": "3034530",
    "end": "3040021"
  },
  {
    "text": "contacts switch out. PROFESSOR: Yeah. You acquire the lock. And then, the operating system\ncontact switches you out.",
    "start": "3040021",
    "end": "3046190"
  },
  {
    "text": "And so what happens? You hold the lock while some\nother job is running. And what are those guys doing.",
    "start": "3046190",
    "end": "3052090"
  },
  {
    "text": "They go and spin and\nwait on the lock. Now, this is a good time where\nyou'd rather not have a",
    "start": "3052090",
    "end": "3058380"
  },
  {
    "text": "spinning lock. You'd rather have\na yielding lock. But even so, suddenly you're\ntalking about something that's",
    "start": "3058380",
    "end": "3066590"
  },
  {
    "text": "operating at the level of\n100 times a second, 10 milliseconds, versus something\nthat is operating on a",
    "start": "3066590",
    "end": "3073970"
  },
  {
    "text": "nanosecond level. So you're talking six orders\nof magnitude of performance",
    "start": "3073970",
    "end": "3079460"
  },
  {
    "text": "difference if you end up getting\nswitched out while you",
    "start": "3079460",
    "end": "3085020"
  },
  {
    "text": "hold a lock. ",
    "start": "3085020",
    "end": "3090310"
  },
  {
    "text": "That's the issue. What happens. And then, if that happens,\nall the other loop iterations must wait.",
    "start": "3090310",
    "end": "3097225"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] in the large program here\n[UNINTELLIGIBLE PHRASE]. ",
    "start": "3097225",
    "end": "3103887"
  },
  {
    "text": "I don't have a mic. If one [UNINTELLIGIBLE]\ncrashes or one [UNINTELLIGIBLE PHRASE] ",
    "start": "3103887",
    "end": "3112318"
  },
  {
    "text": "the lock\n[UNINTELLIGIBLE PHRASE]. ",
    "start": "3112318",
    "end": "3121742"
  },
  {
    "text": "AUDIENCE: Can you specify\nwhether those are yielding locks or spinning locks? PROFESSOR: Usually, the mutex\ntype will tell you.",
    "start": "3121742",
    "end": "3128369"
  },
  {
    "text": "I'm just using a simple\nname of mutex. I probably should have been\nusing the ones that--",
    "start": "3128370",
    "end": "3135140"
  },
  {
    "text": "we were using one called\nCilk mutex. And I probably should've used\nthat here rather than just simple mutex.",
    "start": "3135140",
    "end": "3142770"
  },
  {
    "text": "AUDIENCE: Are they yielding? PROFESSOR: There's\na good question. I used to know the\nanswer to this.",
    "start": "3142770",
    "end": "3150330"
  },
  {
    "text": "I believe that those spin for\na while, are competitive. They spin for a while\nand then yield.",
    "start": "3150330",
    "end": "3155890"
  },
  {
    "text": "But I'm not sure. They may just spin. They don't just automatically\nyield.",
    "start": "3155890",
    "end": "3162720"
  },
  {
    "text": "They're either competitive,\nor they'll spin and yield. I believe they spin and yield. And I believe there's actually\na switch where",
    "start": "3162720",
    "end": "3168690"
  },
  {
    "text": "you can tell it-- if you're doing timing\nmeasurements--  make it so that it purely spins\nso that you can get",
    "start": "3168690",
    "end": "3175140"
  },
  {
    "text": "better benchmark results. AUDIENCE: So my question is does\nthe colonel have power to",
    "start": "3175140",
    "end": "3186370"
  },
  {
    "text": "switch out a spinning\nlock or not? PROFESSOR: Yeah. Well, the colonel, the\nscheduler, can come in at any",
    "start": "3186370",
    "end": "3191910"
  },
  {
    "text": "moment and say, whip\nyou're out.  You're out. That's it.",
    "start": "3191910",
    "end": "3198850"
  },
  {
    "text": "And wherever it is, it\ninterrupts it at that moment in time. ",
    "start": "3198850",
    "end": "3206670"
  },
  {
    "text": "So one solution to this\nproblem is to use a lock-free method.",
    "start": "3206670",
    "end": "3213109"
  },
  {
    "text": "And one of the common ways of\ndoing that is with what's called compare-and-swap\ninstruction.",
    "start": "3213110",
    "end": "3218730"
  },
  {
    "text": "So this is what's called a\nlocking instruction, meaning it's one of these ones that goes\nout to L2, in terms of",
    "start": "3218730",
    "end": "3225150"
  },
  {
    "text": "timing and so forth. And what it does is it does\nthe following thing.",
    "start": "3225150",
    "end": "3230950"
  },
  {
    "text": "It has an address\nof a location. And it's got the old value\nthat was stored in the",
    "start": "3230950",
    "end": "3238660"
  },
  {
    "text": "location and a new value. And it says if the value that\nis there is the old value,",
    "start": "3238660",
    "end": "3244810"
  },
  {
    "text": "well, then stick the\nnew value in there. And then return essentially\ntrue.",
    "start": "3244810",
    "end": "3250700"
  },
  {
    "text": "Otherwise return false. So it's basically saying what\nyou tend to do is you first",
    "start": "3250700",
    "end": "3263020"
  },
  {
    "text": "look to see what's the value. You then update the value. And then you say, if it hasn't\nchanged, stick it back in and",
    "start": "3263020",
    "end": "3272310"
  },
  {
    "text": "return true. If it has changed,\nreturn false.",
    "start": "3272310",
    "end": "3277470"
  },
  {
    "text": "So it's only swaps the\nvalue if it is true. There's actually two versions.",
    "start": "3277470",
    "end": "3283900"
  },
  {
    "text": "One which says bool and\none which says val. And if you do the bool version,\nit returns a flag.",
    "start": "3283900",
    "end": "3289765"
  },
  {
    "text": "If you do the val version, it\nactually returns the value that was in there. So it's more like a\ncompare-and-swap.",
    "start": "3289765",
    "end": "3295619"
  },
  {
    "text": "The main thing about this is\nthis code essentially executes atomically with the single\ninstruction, which is called--",
    "start": "3295620",
    "end": "3302885"
  },
  {
    "start": "3302885",
    "end": "3307990"
  },
  {
    "text": "The instruction is cmpxchg. ",
    "start": "3307990",
    "end": "3314760"
  },
  {
    "text": "Is it up there? Oh, there it is. Yeah. So the cmpxchg instruction\non x86.",
    "start": "3314760",
    "end": "3321190"
  },
  {
    "text": "So when you compile this, you\nshould find on your assembly output that instruction\nsomewhere unless the compiler",
    "start": "3321190",
    "end": "3330890"
  },
  {
    "text": "figures out a better way\nto optimize that. But generally, you\nshould find that. ",
    "start": "3330890",
    "end": "3337330"
  },
  {
    "text": "Also, one of the things about\nthis is it works on values that are sort of integer\ntype values.",
    "start": "3337330",
    "end": "3342970"
  },
  {
    "text": "But it doesn't work on floating\npoint numbers, in particular.",
    "start": "3342970",
    "end": "3348080"
  },
  {
    "text": "So you can't compare-and-swap\na value, which is a floating point value. You can only do it with\nenergy type values.",
    "start": "3348080",
    "end": "3354060"
  },
  {
    "text": "So let's take a look at how we\ncan use the compare-and-swap for the summing problem.",
    "start": "3354060",
    "end": "3360120"
  },
  {
    "text": "So what we do is we have\nthe same sort of code. And now, what I'm going to do is\ncompute my temporary value.",
    "start": "3360120",
    "end": "3368470"
  },
  {
    "text": "And then, what I'll do is\nI'll read the value of result into old. I'll then update my new value\nfor what I think I want the",
    "start": "3368470",
    "end": "3377430"
  },
  {
    "text": "result to be the result plus\nthe thing that I computed. And now, what I do is I attempt\nto compare-and-swap as",
    "start": "3377430",
    "end": "3390660"
  },
  {
    "text": "long as the old value is\nwhat I read it to be. Swap in the new value.",
    "start": "3390660",
    "end": "3398560"
  },
  {
    "text": "If the old value turns out to\nbe different from what is currently in the result\nlocation,",
    "start": "3398560",
    "end": "3404940"
  },
  {
    "text": "then it returns false. And I redo this again. ",
    "start": "3404940",
    "end": "3412109"
  },
  {
    "text": "Then, I have to redo the\nwhole loop again. So this is a do-while loop. Do-while is like a while loop,\nexcept you do the body first.",
    "start": "3412110",
    "end": "3419690"
  },
  {
    "text": "And then you test\nthe condition. So if this fails, I go back. I then get a new value for\nthe result and so forth.",
    "start": "3419690",
    "end": "3426849"
  },
  {
    "text": "So let me show you\nhow that works. ",
    "start": "3426850",
    "end": "3433410"
  },
  {
    "text": "Let's see. So first, I'll show you\nhow this works. Actually, I'll show it on a more\ninteresting example how",
    "start": "3433410",
    "end": "3439849"
  },
  {
    "text": "this works. So what happens if I get swapped\nout in the middle of a loop iteration?",
    "start": "3439850",
    "end": "3446360"
  },
  {
    "text": "All I do is when I do the\ncompare-and-swap it fails. So no other instructions\ncan wait.",
    "start": "3446360",
    "end": "3452850"
  },
  {
    "text": "They can all march ahead and do\nthe thing they need to do. And then, the one that\ngot swapped out, eh.",
    "start": "3452850",
    "end": "3459520"
  },
  {
    "text": "It gets some old value. It discovers that and has\nto re-execute the loop.",
    "start": "3459520",
    "end": "3467230"
  },
  {
    "text": "So is that fine? So what this means is that the\namount work that's going on, however, could in fact, be\ngreater, depending upon how",
    "start": "3467230",
    "end": "3476420"
  },
  {
    "text": "much contention there is. If there's a lot of contention,\nyou could end up having these guys fighting\nand not re",
    "start": "3476420",
    "end": "3486400"
  },
  {
    "text": "executing a lot of code. But that's really not much worse\nthan them spinning is what it comes down to.",
    "start": "3486400",
    "end": "3494590"
  },
  {
    "text": "Any questions? Let's do a more interesting\nexample.",
    "start": "3494590",
    "end": "3500170"
  },
  {
    "text": "Here's a lock-free stack. So what we're going to do is\nwe're going to have a node,",
    "start": "3500170",
    "end": "3505549"
  },
  {
    "text": "which has a next pointer\nand some data. All we really care about\nis the next pointer. And we have a stack, which has\nbasically a head pointer.",
    "start": "3505550",
    "end": "3515339"
  },
  {
    "text": " So we have a linked list here. We want to basically be able to\ninsert things at the front",
    "start": "3515340",
    "end": "3522010"
  },
  {
    "text": "and take things out\nof the front. So here's a lock-free push.",
    "start": "3522010",
    "end": "3527910"
  },
  {
    "text": "So remember, this could\nbe concurrent. So these guys want to operate\non it at a time. We saw last time how in doing\nvery simple updates on link",
    "start": "3527910",
    "end": "3536030"
  },
  {
    "text": "structures, you could get\nyourself into a mess if you didn't properly synchronize when\nwe did the insertion in",
    "start": "3536030",
    "end": "3543890"
  },
  {
    "text": "the hash table. So here's my push\n[? up ?] code.",
    "start": "3543890",
    "end": "3549369"
  },
  {
    "text": "Well let's walk through it. It says, basically, here's my\nnode that I want to insert.",
    "start": "3549370",
    "end": "3555579"
  },
  {
    "text": "It says, first of all, make\nnode.next point to the head. So we basically have\nit pointing to 77.",
    "start": "3555580",
    "end": "3562140"
  },
  {
    "text": " So then what we say is OK.",
    "start": "3562140",
    "end": "3567840"
  },
  {
    "text": "Let's compare-and-swap to make\nthe head point to the node but",
    "start": "3567840",
    "end": "3574610"
  },
  {
    "text": "only if the value of the\nhead has not changed.",
    "start": "3574610",
    "end": "3579670"
  },
  {
    "text": "It's still the value\nof the node.next. ",
    "start": "3579670",
    "end": "3585100"
  },
  {
    "text": "And if so, it does the swap. Question? AUDIENCE: You say\ncompare-and-swap.",
    "start": "3585100",
    "end": "3591232"
  },
  {
    "text": "But you compare it to what? PROFESSOR: PROFESSOR: In this\ncase it's comparing to the--",
    "start": "3591232",
    "end": "3597270"
  },
  {
    "text": "so this is basically the\nlocation that you're doing the compare-and-swap on, the old\nvalue that you expect to see",
    "start": "3597270",
    "end": "3605690"
  },
  {
    "text": "in that location, and\nthe new value. So here, what it says--",
    "start": "3605690",
    "end": "3610730"
  },
  {
    "text": "when we're at this\npoint here-- we're saying before you do the\ncompare-and-swap, we're saying, I only want you to set\nthat pointer to go to here if",
    "start": "3610730",
    "end": "3623770"
  },
  {
    "text": "this value is still\npointing to there. So only move this here if\nthis value is still 77.",
    "start": "3623770",
    "end": "3630799"
  },
  {
    "text": "In other words, if somebody\nelse came in-- well, I'll do an example in a\nsecond that shows what happens when we have concurrency, and\none of them might fail.",
    "start": "3630800",
    "end": "3639940"
  },
  {
    "text": "But if it is true, then\nit basically sets it. And now I'm home free. ",
    "start": "3639940",
    "end": "3646790"
  },
  {
    "text": "So let's take a look at what\nhappens when we have contention. So I have two guys. So 33 says, OK I'll come in.",
    "start": "3646790",
    "end": "3654170"
  },
  {
    "text": "Let me set my next pointer\nto the head. But then comes 81. And it says, OK.",
    "start": "3654170",
    "end": "3659450"
  },
  {
    "text": "Let me try to set my pointer to\nalso be 77 because I look",
    "start": "3659450",
    "end": "3664700"
  },
  {
    "text": "at what the head is,\nand that's where it's supposed to go. So now, what happens\nis we do the",
    "start": "3664700",
    "end": "3670160"
  },
  {
    "text": "compare-and-swap operation. And they both are going\nto try to do it. And one of them is going to,\nessentially, do it first",
    "start": "3670160",
    "end": "3677330"
  },
  {
    "text": "because the hardware preserves\nthat the compare-and-swaps, their locking operations,\nthey will happen in",
    "start": "3677330",
    "end": "3682800"
  },
  {
    "text": "some definite order. So in this case, 81 got\nin there and did its",
    "start": "3682800",
    "end": "3688920"
  },
  {
    "text": "compare-and-swap first. When it looked, 77 was still\na value that it said. So it allowed that pointer\nto be changed.",
    "start": "3688920",
    "end": "3694950"
  },
  {
    "text": "But now what happens\nwhen 33 tries. 33 tries to do the\ncompare-and-swap.",
    "start": "3694950",
    "end": "3700850"
  },
  {
    "text": "And the compare-and-swap fails\nbecause it's saying, I want to swap 33 in as long as the value\nof head is the pointer",
    "start": "3700850",
    "end": "3710400"
  },
  {
    "text": "to 70, the node was 77. The value is no longer the\npointer to the node of 77.",
    "start": "3710400",
    "end": "3716500"
  },
  {
    "text": "It's now the pointer to the\nvalue of the node with 81. So the compare-and-swap fails.",
    "start": "3716500",
    "end": "3724650"
  },
  {
    "text": "People follow that? And so what does\n33 have to do? It's got to start again.",
    "start": "3724650",
    "end": "3730910"
  },
  {
    "text": "So it goes back around the loop,\nand now it sets it to 81, which is now the head. And now, it can compare-and-swap\nin the value.",
    "start": "3730910",
    "end": "3738410"
  },
  {
    "text": "And they both get in there\nperfectly well. Question?",
    "start": "3738410",
    "end": "3743470"
  },
  {
    "text": "AUDIENCE: What if there's\n[INAUDIBLE]? What if two nodes have-- PROFESSOR: Well, notice here,\nit's not looking at the value",
    "start": "3743470",
    "end": "3751470"
  },
  {
    "text": "of the data. Nowhere does data appear here. It's actually looking\nat the address of this chunk of memory.",
    "start": "3751470",
    "end": "3757410"
  },
  {
    "text": "There is a similar problem,\nwhich I will raise in just a moment. There is still a problem.",
    "start": "3757410",
    "end": "3762620"
  },
  {
    "text": "Yeah, question? AUDIENCE: So I'm confused\nabout the interface. So you give it the address\nof where you want to",
    "start": "3762620",
    "end": "3769300"
  },
  {
    "text": "compare the value of. And you're giving it what\nyou're pointing at and--",
    "start": "3769300",
    "end": "3774760"
  },
  {
    "text": "PROFESSOR: And here's the value\nthat I expect to be stored in this location. The value I expect to be in\nthere is node dot next.",
    "start": "3774760",
    "end": "3783869"
  },
  {
    "text": "So if I go back a\ncouple things. Here. ",
    "start": "3783870",
    "end": "3790960"
  },
  {
    "text": "Here, the guy says, the\nvalue I expect to be there is in this case.",
    "start": "3790960",
    "end": "3797470"
  },
  {
    "text": "the address of this chunk\nof memory here. He expects the address of the\nnode containing 77 is going to",
    "start": "3797470",
    "end": "3806170"
  },
  {
    "text": "be in this location. It's not. What's in this location\nis the address of this chunk of memory.",
    "start": "3806170",
    "end": "3813490"
  },
  {
    "text": "But you're saying, if it's equal\nto this, then you can go ahead and do the swap. Otherwise you're\ngoing to fail.",
    "start": "3813490",
    "end": "3819530"
  },
  {
    "text": "And the swap consists of now\nsticking this value into-- conditionally sticking\nit in there.",
    "start": "3819530",
    "end": "3825560"
  },
  {
    "text": "So you either do it or\nyou don't do it. ",
    "start": "3825560",
    "end": "3831810"
  },
  {
    "text": "So let's now do a pop. So pop you can also\ndo with things.",
    "start": "3831810",
    "end": "3839030"
  },
  {
    "text": "So here, I'm going to want\nto extract an element. And what I'm going to do is\ncreate a current value that I",
    "start": "3839030",
    "end": "3846640"
  },
  {
    "text": "want to make point to the\nelement that gets eliminated.",
    "start": "3846640",
    "end": "3851799"
  },
  {
    "text": "So what I do is I say, well,\nthe element that I want is that guy there.",
    "start": "3851800",
    "end": "3857640"
  },
  {
    "text": "And now, what I want to do is\nmake the head jump around and point to 94.",
    "start": "3857640",
    "end": "3864500"
  },
  {
    "text": "So what I do is I say, well,\nas long as the-- ",
    "start": "3864500",
    "end": "3873110"
  },
  {
    "text": "and I want to do that unless I\nget down to the fact that I have an empty list.",
    "start": "3873110",
    "end": "3881110"
  },
  {
    "text": "So basically, I say, if\nthe head still has",
    "start": "3881110",
    "end": "3895750"
  },
  {
    "text": "the value of current-- so they're pointing to\nthe same place-- then, I want to move in\ncurrent arrow next.",
    "start": "3895750",
    "end": "3904680"
  },
  {
    "text": "And then I'm done. Otherwise, I want to set current\nto head, reset it, and",
    "start": "3904680",
    "end": "3912940"
  },
  {
    "text": "go back to the beginning\nand try to pop again. And I'm going to keep doing\nthat until I get my pop to",
    "start": "3912940",
    "end": "3918770"
  },
  {
    "text": "succeed or until current\npoints to nil. If it ended up at the end,\nthen I don't want to keep",
    "start": "3918770",
    "end": "3925390"
  },
  {
    "text": "popping if the list ended\nup being empty.",
    "start": "3925390",
    "end": "3931660"
  },
  {
    "text": "So basically, it sets that\none to jump over.",
    "start": "3931660",
    "end": "3936980"
  },
  {
    "text": "And now, once it's done that, I\ncan go, and I can clean up, I can get rid of this\npointer, et cetera. But nobody else who's coming in\nto use this link list, can",
    "start": "3936980",
    "end": "3944660"
  },
  {
    "text": "see 15 now because I'm the only\none with a pointer to it. So people understand that?",
    "start": "3944660",
    "end": "3950339"
  },
  {
    "text": " So where's the bug?",
    "start": "3950340",
    "end": "3956964"
  },
  {
    "text": " Turns out this has a but\nafter all that work.",
    "start": "3956965",
    "end": "3964990"
  },
  {
    "text": "Each of these individually does\nwhat it's supposed to do. But here's the bug.",
    "start": "3964990",
    "end": "3970280"
  },
  {
    "text": "And it's a famous problem\nbecause you see it all the time when people are\nsynchronizing through memory",
    "start": "3970280",
    "end": "3976049"
  },
  {
    "text": "with lock-free algorithms. It's called the ABA problem.",
    "start": "3976050",
    "end": "3982150"
  },
  {
    "text": "So here's the problem. And it's similar to what\nsome people were concerned about earlier. So here's the ABA problem.",
    "start": "3982150",
    "end": "3988020"
  },
  {
    "text": "Thread 1 begins to pop 15. So imagine that what it does is\nit sets its current there,",
    "start": "3988020",
    "end": "3998000"
  },
  {
    "text": "and then it reads the value\nhere, and starts to set the",
    "start": "3998000",
    "end": "4003333"
  },
  {
    "text": "head here using the\ncompare-and-swap. But it doesn't complete the\ncompare-and-swap yet.",
    "start": "4003333",
    "end": "4009039"
  },
  {
    "text": "The compare-and-swap\nhasn't executed. It's simply gotten this\nvalue, and it's about to swap it here.",
    "start": "4009040",
    "end": "4015560"
  },
  {
    "text": "So then, thread 2 comes along. And it says, oh, I want to\npop something as well.",
    "start": "4015560",
    "end": "4020900"
  },
  {
    "text": "So it comes in. And it turns out it's faster,\nand manages to pop 15 off, and set up its pointers.",
    "start": "4020900",
    "end": "4028680"
  },
  {
    "text": "Now, what would normally\nhappen here is if this completed, what would happen? The compare-and-swap instruction\nwould discover",
    "start": "4028680",
    "end": "4036090"
  },
  {
    "text": "that this pointer is no longer\nthe pointer to the head. And so it would fail.",
    "start": "4036090",
    "end": "4041630"
  },
  {
    "text": "We'd be all hunky dory. No problem. But what could actually\nhappen here?",
    "start": "4041630",
    "end": "4046760"
  },
  {
    "text": "Thread 2 keeps going on. It says, oh, let me pop 94.",
    "start": "4046760",
    "end": "4051900"
  },
  {
    "text": "So it does the same thing. So thread 1 is still stalled\nhere, not having completed its",
    "start": "4051900",
    "end": "4058240"
  },
  {
    "text": "compare-and-swap. It swaps 94. Then, thread 2 goes\non and says, oh,",
    "start": "4058240",
    "end": "4063630"
  },
  {
    "text": "let's put 15 back on. So it puts 15 back on because\nafter all, it had 15.",
    "start": "4063630",
    "end": "4070799"
  },
  {
    "text": "So now, what happens here? Thread 1 now looks, and it now\ncompletes, and does its",
    "start": "4070800",
    "end": "4079520"
  },
  {
    "text": "compare-and-swap, it resumes,\nsplicing out 15, which it",
    "start": "4079520",
    "end": "4089510"
  },
  {
    "text": "thinks it has. But it doesn't realize that\nother stuff has gone on. And now, we've got a mess.",
    "start": "4089510",
    "end": "4097299"
  },
  {
    "start": "4097300",
    "end": "4102380"
  },
  {
    "text": "So this is the ABA problem\nbecause what happened was we were checking to see whether the\nvalue was still the same",
    "start": "4102380",
    "end": "4108839"
  },
  {
    "text": "value, the same chunk\nof memory. It got popped off. But it got popped back on.",
    "start": "4108840",
    "end": "4115159"
  },
  {
    "text": "But now, it could be in\nany configuration. We don't know what it is. And now, the code is thinking,\nthat oh, nothing happened.",
    "start": "4115160",
    "end": "4123960"
  },
  {
    "text": "But in fact, something\nhappened. So it's ABA because basically,\nyou've got 15 there.",
    "start": "4123960",
    "end": "4131049"
  },
  {
    "text": "It goes away. Then, 15 comes back. Question?",
    "start": "4131050",
    "end": "4136274"
  },
  {
    "text": "AUDIENCE: Can you compare two\nthings and then swap because that would solve this, right? PROFESSOR: That's called a\ndouble compare-and-swap. ",
    "start": "4136274",
    "end": "4143233"
  },
  {
    "text": "And we'll talk about\nit in a second. So the classic way to solve\nthis problem is to use",
    "start": "4143233",
    "end": "4152899"
  },
  {
    "text": "versioning. So what you do is you pack a\nversion number with each pointer in the same atomically\nupdatable word.",
    "start": "4152899",
    "end": "4162180"
  },
  {
    "text": "So that when 15 comes back,\nyou've got the pointer.",
    "start": "4162180",
    "end": "4168839"
  },
  {
    "text": "But you also have a version on\nthat pointer so that the value has to be the same as\nthe version you had and not the value.",
    "start": "4168840",
    "end": "4175399"
  },
  {
    "text": "What you do is you increment the\nversion number every time the pointer is changed.",
    "start": "4175399",
    "end": "4180560"
  },
  {
    "text": "So you just do an increment. But you do the compare-and-swap\non the version number and the pointer\nat the same time.",
    "start": "4180560",
    "end": "4189778"
  },
  {
    "text": "Now, it turns out that some\narchitectures actually have what's called a double\ncompare-and-swap, which will",
    "start": "4189779",
    "end": "4195710"
  },
  {
    "text": "do compare-and-swap on two\ndistinct locations. And that simplifies things even\nmore because it means you",
    "start": "4195710",
    "end": "4202139"
  },
  {
    "text": "don't have to pack and\nmake sure that things fit in one word. You can keep versioning\nelsewhere. And there are a whole bunch of\nother places where you can, in",
    "start": "4202140",
    "end": "4209730"
  },
  {
    "text": "fact, optimize and get even\ntighter code than you could if you have to pack.",
    "start": "4209730",
    "end": "4214990"
  },
  {
    "text": "So that's generally the\nway you solve this. And, of course, you can\nsee this gets-- as I say, this week has been\nskull and cross bones lecture.",
    "start": "4214990",
    "end": "4224310"
  },
  {
    "text": "It's appropriate it comes right\nafter Halloween because really, you do not want\nto play these games",
    "start": "4224310",
    "end": "4231260"
  },
  {
    "text": "unless you have to. But you should know about them\nbecause you will find times where you need this, or you need\nto understand somebody's",
    "start": "4231260",
    "end": "4238679"
  },
  {
    "text": "code that they've written\nin a lock-free way. Because remember lock-free has\nthe nice property that hey,",
    "start": "4238680",
    "end": "4243810"
  },
  {
    "text": "the operating system swaps\nsomething out, it just keeps running nice and jolly\nif it's correct.",
    "start": "4243810",
    "end": "4250490"
  },
  {
    "text": " So the other issue is that\nversion numbers may need to be",
    "start": "4250490",
    "end": "4257750"
  },
  {
    "text": "very large. So if you have a version number,\nhow many bits to you assign to that version number.",
    "start": "4257750",
    "end": "4263969"
  },
  {
    "text": "Well, 64 bits, that's\nno problem. You never run out of 64 bits. 2 to the 64th is a very,\nvery, very big number.",
    "start": "4263970",
    "end": "4271390"
  },
  {
    "text": "And you'll never run out\nof 2 to the 64th. We did that calculation at the\nbeginning of the term. How big did we say it was?",
    "start": "4271390",
    "end": "4276620"
  },
  {
    "start": "4276620",
    "end": "4282240"
  },
  {
    "text": "It's pretty big, right? It's like this big. Or is it this big?",
    "start": "4282240",
    "end": "4289739"
  },
  {
    "text": "My two-year-old is this big. ",
    "start": "4289740",
    "end": "4294810"
  },
  {
    "text": "So anyway, it's pretty big. So is it bigger than-- no, it's not bigger than the\nnumber of particles in the",
    "start": "4294810",
    "end": "4301570"
  },
  {
    "text": "universe, right? That's 10 to the 80th,\nwhich is much bigger than 2 to the 64th.",
    "start": "4301570",
    "end": "4306690"
  },
  {
    "text": "But it's still a big number. I think it's like more than\nthere are atoms in the earth or something. It's still pretty big.",
    "start": "4306690",
    "end": "4312429"
  },
  {
    "text": "You never get through it\nif you calculate it. I think we calculated\nit and it was hundreds of years or whatever. Anyway, it's a long time.",
    "start": "4312430",
    "end": "4319670"
  },
  {
    "text": "Many, many, many years at the\nvery fastest, updating with biggest supercomputers,\nand the most",
    "start": "4319670",
    "end": "4324880"
  },
  {
    "text": "processors, et cetera. Never run out of 64 bits. 32 bits. Four billion.",
    "start": "4324880",
    "end": "4330810"
  },
  {
    "text": "Maybe you run out. Maybe you don't. So that's one of the issues. You have to say, well, how often\ndo I have to do that.",
    "start": "4330810",
    "end": "4338369"
  },
  {
    "text": "Really, you only have\nto worry about this. You can wraparound. But you've got to make sure\nthat then you never have a",
    "start": "4338370",
    "end": "4344880"
  },
  {
    "text": "situation where something could\nbe swapped out for long enough that it would come back\nand bite you because you're",
    "start": "4344880",
    "end": "4352920"
  },
  {
    "text": "coming around and then\neating your tail. And you've got to make sure\nyou wouldn't have things overlap and get a [? thing. ?]",
    "start": "4352920",
    "end": "4358070"
  },
  {
    "text": "So that might be a risk you're\nwilling to take. You can do an analysis and\nsay, what are the odds my",
    "start": "4358070",
    "end": "4363240"
  },
  {
    "text": "system crashes from\nthis reason or from a different reason? That can be reasonable\nengineering trade-off.",
    "start": "4363240",
    "end": "4371559"
  },
  {
    "text": "So there's an alternative\nto compare-and-swap. One is the double\ncompare-and-swap. Another one is some machines\nhave what's called a",
    "start": "4371560",
    "end": "4379170"
  },
  {
    "text": "load-linked, store conditional\ninstruction. What those are actually is\na pair of instructions.",
    "start": "4379170",
    "end": "4384619"
  },
  {
    "text": "One is load-linked. When you load-linked, it\nbasically says, let's set a",
    "start": "4384620",
    "end": "4389800"
  },
  {
    "text": "bit, essentially,\nin that word. And if that word ever changes\nwhen you do store conditional,",
    "start": "4389800",
    "end": "4396870"
  },
  {
    "text": "it will fail. So even if some other processor\nchanges it to the exact same value, it's keeping\ntrack of whether anybody else",
    "start": "4396870",
    "end": "4406030"
  },
  {
    "text": "wrote it using the memory\nconsistency mechanism. The MSI type protocol that\nwe talked about.",
    "start": "4406030",
    "end": "4411870"
  },
  {
    "text": "It's using that kind of\nmechanism to make sure that if it changes. And so this is actually much\nmore reliable as a mechanism.",
    "start": "4411870",
    "end": "4419215"
  },
  {
    "text": " x86 does not have load-linked,\nstore conditional.",
    "start": "4419215",
    "end": "4426059"
  },
  {
    "text": "I'm not sure why. I don't know if there's\na patent on it or what's going on. But they don't have it. ",
    "start": "4426060",
    "end": "4435630"
  },
  {
    "text": "Final topic is reducers. ",
    "start": "4435630",
    "end": "4440650"
  },
  {
    "text": "So once again, recall\nthe summing problem. ",
    "start": "4440650",
    "end": "4446139"
  },
  {
    "text": "In Cilk++, they have a mechanism\ncalled reducer hyperobjects, which lets you do\nan end run around some of",
    "start": "4446140",
    "end": "4455150"
  },
  {
    "text": "these synchronization\nproblems. And the basic idea behind it is\nwe actually could code this",
    "start": "4455150",
    "end": "4462420"
  },
  {
    "text": "fairly easily as we talked about\nlast time by just doing divide and conquer\non the array.",
    "start": "4462420",
    "end": "4468110"
  },
  {
    "text": "We add up the first half of\nthe elements, add up the second half of the elements,\nwhen they return, add them together.",
    "start": "4468110",
    "end": "4473810"
  },
  {
    "text": "But the problem is that coding\nthat is a pain to do. So the hyper object mechanism\nsort of does that",
    "start": "4473810",
    "end": "4480770"
  },
  {
    "text": "automatically for you. What you can do is declare\nresult to be an integer, which",
    "start": "4480770",
    "end": "4490350"
  },
  {
    "text": "is going to have the operation\nadd performed on it.",
    "start": "4490350",
    "end": "4496530"
  },
  {
    "text": "And what happens then is you can\njust go ahead and add the values up like this.",
    "start": "4496530",
    "end": "4503730"
  },
  {
    "text": "And basically, what it does\nis essentially adds things locally and will combine them\non an as needed basis.",
    "start": "4503730",
    "end": "4512090"
  },
  {
    "text": "So you don't actually have to do\nany synchronization at all. In the end, you have\nto get the result",
    "start": "4512090",
    "end": "4517700"
  },
  {
    "text": "by doing a get value. So let me show you a little bit\nmore what's going on in",
    "start": "4517700",
    "end": "4523150"
  },
  {
    "text": "this situation. So the first thing here is\nwe're saying result is a summing reducer over int.",
    "start": "4523150",
    "end": "4529415"
  },
  {
    "text": " The updates are resolved\nautomatically without races or",
    "start": "4529415",
    "end": "4535480"
  },
  {
    "text": "contention because they're\nbasically doing it by keeping local values and copying them.",
    "start": "4535480",
    "end": "4542199"
  },
  {
    "text": "And then, at the end, you can\nget the underlying value. ",
    "start": "4542200",
    "end": "4547610"
  },
  {
    "text": "So the way this works is that\nwhen you declare the variable, you're declaring it as a reducer\nover some associative",
    "start": "4547610",
    "end": "4557210"
  },
  {
    "text": "operation, such as addition. So it only works cleanly if your\noperation is associative.",
    "start": "4557210",
    "end": "4564720"
  },
  {
    "text": "And there are a lot of\nassociative operations. Addition, multiplication,\nlogical, and, list",
    "start": "4564720",
    "end": "4570480"
  },
  {
    "text": "concatenation. I can concatenate two lists. So what does associative mean?",
    "start": "4570480",
    "end": "4575710"
  },
  {
    "text": " I think I have a slide\non this in a minute.",
    "start": "4575710",
    "end": "4580730"
  },
  {
    "text": "It means a times b times c. I can parenthesize it\nany way I want and",
    "start": "4580730",
    "end": "4586219"
  },
  {
    "text": "get the same answer. Associative, right? It's not associative like associative memory or whatever.",
    "start": "4586220",
    "end": "4595840"
  },
  {
    "text": "So now, the individual strands\nin the computation can update x as if it were an ordinary\nnon-local variable.",
    "start": "4595840",
    "end": "4603880"
  },
  {
    "text": "But in fact, it's maintained as\na set of different copies called views.",
    "start": "4603880",
    "end": "4610540"
  },
  {
    "text": "The Cilk++ runtime system\ncoordinates the views and combines them when\nappropriate. And when only one view remains,\nnow you can get the",
    "start": "4610540",
    "end": "4618620"
  },
  {
    "text": "actual value. So for example, you may have\na summing reducer where the actual value at this point\nin time is 89.",
    "start": "4618620",
    "end": "4626620"
  },
  {
    "text": "But locally, each processor may\nonly see a different value",
    "start": "4626620",
    "end": "4636120"
  },
  {
    "text": "whose sum is 89. But locally, I could do\nsomething like increment this.",
    "start": "4636120",
    "end": "4643170"
  },
  {
    "text": "And this guy can independently\nincrement his view and has the effect that it increments\nwhatever the total sum is.",
    "start": "4643170",
    "end": "4650099"
  },
  {
    "text": "And then, the runtime system\nmanages to combine everything at the end to make it be the\nvalue when there's no more",
    "start": "4650100",
    "end": "4658630"
  },
  {
    "text": "parallelism associated\nwith that reducer. So here's the conceptual\nbehavior.",
    "start": "4658630",
    "end": "4664390"
  },
  {
    "text": "Imagine I have this code. I set x equal to 0. I then add 3. I then increment.",
    "start": "4664390",
    "end": "4670210"
  },
  {
    "text": "I had 4, increments at 5. Fa da da da da. At the end, I get some\nvalue, which I",
    "start": "4670210",
    "end": "4677130"
  },
  {
    "text": "don't think I put down.  Another way I could do this\nis the following.",
    "start": "4677130",
    "end": "4683550"
  },
  {
    "text": "Let me do exactly the same here\nbut with a local view that I'll call x1.",
    "start": "4683550",
    "end": "4690520"
  },
  {
    "text": "For this set of operations, let\nme start a new view that I start out with the identity for\naddition, which is 0 and",
    "start": "4690520",
    "end": "4698210"
  },
  {
    "text": "add those guys up. And then, at the end, let\nme add x1 and x2.",
    "start": "4698210",
    "end": "4704060"
  },
  {
    "text": "It should give me the same\nanswer if addition is associative. ",
    "start": "4704060",
    "end": "4710600"
  },
  {
    "text": "In particular, these\nnow can operate in parallel with no races. ",
    "start": "4710600",
    "end": "4716520"
  },
  {
    "text": "So if you don't actually look\nat the intermediate values-- if all I'm doing is updating\nthem, but I'm not actually",
    "start": "4716520",
    "end": "4722640"
  },
  {
    "text": "looking to see what the absolute\nvalue of the thing is, I should get the same\nanswer at the end.",
    "start": "4722640",
    "end": "4729900"
  },
  {
    "text": "The answer to the result\nis then determinant. It's not deterministic because\nit's going to get done in a different way with different\nmemory state.",
    "start": "4729900",
    "end": "4736200"
  },
  {
    "text": "But it's determinant, meaning\nthe output answer is going to give you the same no matter how\nit executes, even if the",
    "start": "4736200",
    "end": "4743349"
  },
  {
    "text": "resulting computation\nis nondeterministic. So this is a way of\nencapsulating, if you will,",
    "start": "4743350",
    "end": "4748470"
  },
  {
    "text": "nondeterminism. And it worked because addition\nis associative. It didn't matter which\norder I did it.",
    "start": "4748470",
    "end": "4755340"
  },
  {
    "text": "And once again, I could have\nbroken it here instead of there, and I still get\nthe same answer.",
    "start": "4755340",
    "end": "4760360"
  },
  {
    "text": "It doesn't matter. So the idea is as these things\nare work stealing around. they're accumulating things\nlocally but combining them in",
    "start": "4760360",
    "end": "4766970"
  },
  {
    "text": "a way that maintains the\ninvariant that the final value",
    "start": "4766970",
    "end": "4772080"
  },
  {
    "text": "is going to be the sum.  So there's a lot of other\nrelated work where people do",
    "start": "4772080",
    "end": "4778760"
  },
  {
    "text": "reduction types of things, but\nthey're all tied to specific control or data structures.",
    "start": "4778760",
    "end": "4784520"
  },
  {
    "text": "And the neat thing about the\nCilk++ version is that it is",
    "start": "4784520",
    "end": "4790300"
  },
  {
    "text": "not tied to anything. You can name it anywhere. You can write recursive\nprograms. You can update locally your\nreducer wherever you want, and",
    "start": "4790300",
    "end": "4798300"
  },
  {
    "text": "it figures out exactly how to\ncombine them in order to get",
    "start": "4798300",
    "end": "4804020"
  },
  {
    "text": "your final answer. So the algebraic framework for\nthis is that we have a monoid,",
    "start": "4804020",
    "end": "4811449"
  },
  {
    "text": "which is a set, an operator,\nand an identity, where the",
    "start": "4811450",
    "end": "4817720"
  },
  {
    "text": "operator is an associative\nbinary operator. And the identity is, in\nfact, the identity.",
    "start": "4817720",
    "end": "4824450"
  },
  {
    "text": "So here are some examples. Integers with plus and 0, the\nreal numbers with times and 1,",
    "start": "4824450",
    "end": "4831510"
  },
  {
    "text": "true and false, Booleans with\nand, where true is the identity, strings over some\nalphabet with concatenation,",
    "start": "4831510",
    "end": "4840810"
  },
  {
    "text": "where the empty string\nis the identity. You can do MAX with minus\ninfinity as the",
    "start": "4840810",
    "end": "4846719"
  },
  {
    "text": "operation, and so forth. And you can come up\nwith your own. It's easy to come up with\nexamples of monoids.",
    "start": "4846720",
    "end": "4852990"
  },
  {
    "text": "So what we do in Cilk++ is we\nrepresent a monoid over a set t by a C++ class that inherits\nfrom this base class that's",
    "start": "4852990",
    "end": "4862530"
  },
  {
    "text": "predefined for you, which is\nparameterized using templates",
    "start": "4862530",
    "end": "4867550"
  },
  {
    "text": "with the types. So the set that we're going\nto use is, in fact, going to be a type.",
    "start": "4867550",
    "end": "4873120"
  },
  {
    "text": "And the member function\nreduced-- this monoid has to have a member\nfunction reduced that",
    "start": "4873120",
    "end": "4878440"
  },
  {
    "text": "implements the binary\noperator times. And it also has an identity\nmember function.",
    "start": "4878440",
    "end": "4884639"
  },
  {
    "text": "So we set up the algebraic\nframework. So here's, for example, how I\ncould define a sum monoid.",
    "start": "4884640",
    "end": "4892619"
  },
  {
    "text": "I inherit from the base with\nint, for example, here. And I define my reduced\nfunction.",
    "start": "4892620",
    "end": "4899650"
  },
  {
    "text": "And it actually turns out to\nbe important, you always do the right one into the left.",
    "start": "4899650",
    "end": "4904969"
  },
  {
    "text": "Otherwise, you won't have\nit be associative. And then, you have an identity,\nwhich gives you in this case a new element,\nwhich is 0.",
    "start": "4904970",
    "end": "4912940"
  },
  {
    "text": " And so you can now define\nthe reducer as so.",
    "start": "4912940",
    "end": "4922080"
  },
  {
    "text": "You just say Cilk reducer,\nthe sum monoid you've defined and x. And now, the local view of x\ncan be accessed as x open",
    "start": "4922080",
    "end": "4930360"
  },
  {
    "text": "close parenthesis. Now, in the example I showed\nyou, you didn't need to do the open close parenthesis.",
    "start": "4930360",
    "end": "4935980"
  },
  {
    "text": "And the way you get rid of those\nopen close parenthesis is you define a wrapper class. So it's generally inconvenient\nto replace every access with x",
    "start": "4935980",
    "end": "4944420"
  },
  {
    "text": "over brown. That's one issue. The other thing is accesses\naren't safe. Nothing prevents a programmer\nfrom writing x times equals 2,",
    "start": "4944420",
    "end": "4953070"
  },
  {
    "text": "even though the reducer\nwas defined over plus. And that will screw up the\nlogic of this code if",
    "start": "4953070",
    "end": "4958340"
  },
  {
    "text": "somewhere he's multiplying\nwhen, in fact, it's only supposed to be combined\nwith addition.",
    "start": "4958340",
    "end": "4964300"
  },
  {
    "text": "So the way you solve that\nis with a wrapper class. You can do a wrapper class that\nwill protect all of the",
    "start": "4964300",
    "end": "4969540"
  },
  {
    "text": "operations inside and export\nthings that you can just refer to the variable.",
    "start": "4969540",
    "end": "4974760"
  },
  {
    "text": "And it will actually\ncall that. For most of what you're doing,\nyou probably don't need to write a wrapper class.",
    "start": "4974760",
    "end": "4980380"
  },
  {
    "text": "You'll do fine just operating\nwith the extra parentheses.",
    "start": "4980380",
    "end": "4987949"
  },
  {
    "text": "In addition, there's\na whole bunch of commonly use reducers. Lists, appends, max, min, adds,\nan output stream, and",
    "start": "4987950",
    "end": "4997980"
  },
  {
    "text": "some strings, and also you can\nroll your own using things.",
    "start": "4997980",
    "end": "5003640"
  },
  {
    "text": "One issue with addition\nis that, in fact, this doesn't preserve--",
    "start": "5003640",
    "end": "5009810"
  },
  {
    "text": "for floating point addition--\ndoes not preserve the same answer.",
    "start": "5009810",
    "end": "5014969"
  },
  {
    "text": "And the reason is because\nfloating point numbers are not associative. If I had a to b and add that\nto c, I can get something",
    "start": "5014970",
    "end": "5022270"
  },
  {
    "text": "different because of round off\nerror from adding a to the result of b and c.",
    "start": "5022270",
    "end": "5027320"
  },
  {
    "text": "So generally, floating point\noperations don't give you-- they'll give you something that\nis close enough for most",
    "start": "5027320",
    "end": "5033400"
  },
  {
    "text": "things, but it's not actually\nassociative. So you will get different\nanswers.",
    "start": "5033400",
    "end": "5038580"
  },
  {
    "text": "A quick example. I'm sorry to run over\na little bit here. I hope people have\na couple minutes.",
    "start": "5038580",
    "end": "5043850"
  },
  {
    "text": "Here's a real world example. A company had a mechanical\nassembly represented a tree of",
    "start": "5043850",
    "end": "5048969"
  },
  {
    "text": "assemblies down to\nindividual parts. A pickup truck has all these\nparts and all of these extra",
    "start": "5048970",
    "end": "5054820"
  },
  {
    "text": "subparts all the way down to\nsome geometric description of what the part is. And what they want to do is\nthe so-called collision",
    "start": "5054820",
    "end": "5061610"
  },
  {
    "text": "detection problem, which\nhas nothing to do with colliding autos. What they're doing is saying,\nfind collisions between the",
    "start": "5061610",
    "end": "5067730"
  },
  {
    "text": "assembly and a target object. And that object might be\nsomething like a half space because they're computing\na cutaway.",
    "start": "5067730",
    "end": "5073250"
  },
  {
    "text": "Tell me all the things that\nfall within this. Or maybe, here's an engine\ncompartment, and does the",
    "start": "5073250",
    "end": "5079710"
  },
  {
    "text": "engine fit in with it? So here's a code\nthat does that. Basically, it does a recursive\nwalk, where it looks to see",
    "start": "5079710",
    "end": "5090020"
  },
  {
    "text": "whether it's an internal\nnode or a leaf. If it's a leaf, it says, oh,\nlet me check to see whether",
    "start": "5090020",
    "end": "5098000"
  },
  {
    "text": "the target collides\nwith a particular element of the tree. And if so, add that object\nto the end of a list.",
    "start": "5098000",
    "end": "5106120"
  },
  {
    "text": "So this is the standard a C++\nlibrary for putting something",
    "start": "5106120",
    "end": "5113730"
  },
  {
    "text": "on the end of the list. If it's an internal node, then\ngo through all of the children",
    "start": "5113730",
    "end": "5119670"
  },
  {
    "text": "recursively. And walk the children\nrecursively.",
    "start": "5119670",
    "end": "5125679"
  },
  {
    "text": "So basically, you're going to\nlook through the whole tree. Does it intersect this\nparticular object, x?",
    "start": "5125680",
    "end": "5134290"
  },
  {
    "text": "So how do we parallelize this? We can parallelize\nthe recursion. We turn the 4 loop here\ninto a Cilk 4.",
    "start": "5134290",
    "end": "5141280"
  },
  {
    "text": "So it goes through all the\nchildren at the same time. They all can do their\ncomparisons completely the same.",
    "start": "5141280",
    "end": "5147830"
  },
  {
    "text": "Oops, but we have a bug. What's the bug? AUDIENCE: Is it push back?",
    "start": "5147830",
    "end": "5154900"
  },
  {
    "text": "PROFESSOR: Yeah. The push back here. We have a race here because\nthey're all trying to push on",
    "start": "5154900",
    "end": "5162300"
  },
  {
    "text": "to this output list\nat the same time. So we could resolve it with\na lock or whatever.",
    "start": "5162300",
    "end": "5168870"
  },
  {
    "text": "But it turns out it's much\nbetter to resolve it with a-- so we could do this, right?",
    "start": "5168870",
    "end": "5175900"
  },
  {
    "text": "But now, you've got\nlock contention. And also, the list ends\nup getting produced in a jumbled order.",
    "start": "5175900",
    "end": "5183100"
  },
  {
    "text": "So it turns out if you use a\nreducer, you declare this to be a reducer with list append.",
    "start": "5183100",
    "end": "5192045"
  },
  {
    "text": "And what happens then is turns\nout list concatenation is",
    "start": "5192045",
    "end": "5197179"
  },
  {
    "text": "associative. If I concatenate a to b, and\nthen concatenate c, that's the",
    "start": "5197180",
    "end": "5202510"
  },
  {
    "text": "same as concatenating a to the\nconcatenation of b and c. And I can concatenate lists in\nconstant time by keeping a",
    "start": "5202510",
    "end": "5209780"
  },
  {
    "text": "pointer to the head and\ntail of each list. So if you do that, and that\nturns out to be one of the",
    "start": "5209780",
    "end": "5215340"
  },
  {
    "text": "built in functions, then, in\nfact, this code operates perfectly well with no\ncontention and so forth.",
    "start": "5215340",
    "end": "5222200"
  },
  {
    "text": "And in fact, produces the output\nin the same order as the original C++.",
    "start": "5222200",
    "end": "5228000"
  },
  {
    "text": "It runs fast.  And there's a little description\nof how it works.",
    "start": "5228000",
    "end": "5236050"
  },
  {
    "text": "The actual protocol\nis kind of tricky. And we'll put the paper-- let's make sure we get this\npaper up on the web.",
    "start": "5236050",
    "end": "5242970"
  },
  {
    "text": "I think it was there\nfrom last year. So we should be able\nto find it. If you're interested in\nhow the details work.",
    "start": "5242970",
    "end": "5248740"
  },
  {
    "text": "Here's the important thing\nto know from a programmer point of view. So typically, the cost--",
    "start": "5248740",
    "end": "5256630"
  },
  {
    "text": "it turns out the reduce\noperations you're only calling when there's actually a steal. It's actually a return\nfrom a steal.",
    "start": "5256630",
    "end": "5262900"
  },
  {
    "text": "But since stealing occurs\nrelatively infrequently the load balance, the number of\ntimes you actually do one of",
    "start": "5262900",
    "end": "5269450"
  },
  {
    "text": "these reduce operations\nis small. The most of the cost is actually\naccessing the reducer",
    "start": "5269450",
    "end": "5276250"
  },
  {
    "text": "to do the updates. And it's never worse than a hash\ntable lookup the way it's implemented.",
    "start": "5276250",
    "end": "5282480"
  },
  {
    "text": "If the reducer is accessed\nseveral times within a region of code, the compiler can\noptimize the lookups using",
    "start": "5282480",
    "end": "5288989"
  },
  {
    "text": "common subexpression\nelimination. And in the common case, then,\nwhat happens is it basically",
    "start": "5288990",
    "end": "5295380"
  },
  {
    "text": "has an access cost equal to\none additional level of indirection, which is typically\nan L1 cache hit.",
    "start": "5295380",
    "end": "5302480"
  },
  {
    "text": "So the overhead of actually\nupdating one of these things is really just like an extra L1\ncache hit for most of these",
    "start": "5302480",
    "end": "5310320"
  },
  {
    "text": "things, for most of the time. If you have the case that you're\naccessing a reducer",
    "start": "5310320",
    "end": "5317210"
  },
  {
    "text": "several times within the\nsame block of code. Otherwise, at the very worst,\nyou have to actually do a hash table lookup.",
    "start": "5317210",
    "end": "5323140"
  },
  {
    "text": "And that tends to be a little\nbit more like a function call overhead just in terms of\norder of magnitude.",
    "start": "5323140",
    "end": "5331180"
  },
  {
    "text": "Sorry for running over. ",
    "start": "5331180",
    "end": "5338859"
  }
]