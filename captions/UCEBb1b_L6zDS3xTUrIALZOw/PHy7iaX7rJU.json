[
  {
    "text": " PROFESSOR: All right,\nso this lecture we talked about lots of cool\norigami design software, all",
    "start": "0",
    "end": "9200"
  },
  {
    "text": "written by Tomohiro Tachi. We had Origamizer, Freeform\nOrigami Designer, Rigid Origami",
    "start": "9200",
    "end": "15470"
  },
  {
    "text": "Simulator. And then he talked about\na bunch of other things that he's built using\nthat kind of technology,",
    "start": "15470",
    "end": "21320"
  },
  {
    "text": "like cylinder folding and so on. And I got a bunch of questions. So first is an exercise.",
    "start": "21320",
    "end": "28820"
  },
  {
    "text": "If you haven't picked\nup handouts, grab them. Let's fold something\nfrom Origamizer.",
    "start": "28820",
    "end": "34750"
  },
  {
    "text": "And I made the pretty much\nthe simplest possible thing you can make, which is four\nsquares coming together.",
    "start": "34750",
    "end": "42854"
  },
  {
    "text": "And so this is the\ncrease pattern, and we're going to fold it. You can start folding\nnow if you like.",
    "start": "42854",
    "end": "49830"
  },
  {
    "text": "So I'll do it too. So the first step in folding\na crease pattern like this is to precrease all the folds.",
    "start": "49830",
    "end": "56289"
  },
  {
    "text": "The easiest way to do that is\nto precrease them all mountain. And these black guys, we're\nactually going to fold-- I'm",
    "start": "56290",
    "end": "62480"
  },
  {
    "text": "going to make a\nrectangular region here, because I didn't trim\nthe paper to the square.",
    "start": "62480",
    "end": "67750"
  },
  {
    "text": "So you've got a fold along\nthese two black lines and all of these guys. So it's a good exercise in\nfolding crease patterns,",
    "start": "67750",
    "end": "79090"
  },
  {
    "text": "if you didn't already do one\nNP set two, which is due today. ",
    "start": "79090",
    "end": "86284"
  },
  {
    "text": "When you're mountain folding,\nyou can pretty easily guide along a straight line. So you just fold,\nunfold, fold, unfold.",
    "start": "86285",
    "end": "93010"
  },
  {
    "start": "93010",
    "end": "107691"
  },
  {
    "text": "Don't worry about the mountain\nvalley pattern at this point. ",
    "start": "107691",
    "end": "114220"
  },
  {
    "text": "It's really hard to\nprecrease a valley. ",
    "start": "114220",
    "end": "177780"
  },
  {
    "text": "When you're precreasing the\nnon-horizontal and vertical folds, make sure you only\ncrease the part that's marked.",
    "start": "177780",
    "end": "183250"
  },
  {
    "text": "Don't go too far. ",
    "start": "183250",
    "end": "246979"
  },
  {
    "text": "How we doing? How many people have precreased? No one, all right. I win. ",
    "start": "246979",
    "end": "253600"
  },
  {
    "text": "It helps that I've already\nmade a couple of these. This is what it's going to\nlook like when it's folded. On the back, you'll have\nthe four rectangles.",
    "start": "253600",
    "end": "261000"
  },
  {
    "text": "Beautiful. And then on the front\nwhere all the color is, you see all the crease pattern.",
    "start": "261000",
    "end": "267400"
  },
  {
    "text": "And so we're going to--\nas Origamizer always does, it adds these tabs, the tuck\nparts, along each of the edges.",
    "start": "267400",
    "end": "277710"
  },
  {
    "text": "And that the vertex you've got\na slightly more complicated thing. So that's what we're\ngoing to be making.",
    "start": "277710",
    "end": "283875"
  },
  {
    "text": " This is an example of the tried\nand tested advanced origami",
    "start": "283875",
    "end": "292670"
  },
  {
    "text": "folding of almost anything. First precrease all the creases,\nthen fold all the creases.",
    "start": "292670",
    "end": "298160"
  },
  {
    "text": "Then you have your\nmodel, pretty much. ",
    "start": "298160",
    "end": "305830"
  },
  {
    "text": "But the precreasing is usually\nthe really tedious part. When we're feeling\nhigh tech, we'll precrease with a\nsign cutter, which",
    "start": "305830",
    "end": "313960"
  },
  {
    "text": "is a computer-controlled\nrobotic knife blade. We'll score along the creases.",
    "start": "313960",
    "end": "319780"
  },
  {
    "text": "Or a laser cutter, which can\nburn halfway through the paper. Or pick your favorite tool.",
    "start": "319780",
    "end": "327150"
  },
  {
    "text": "The fanciest is a\ncomputer-controlled ball burnisher. Once you've precreased\neverything mountain,",
    "start": "327150",
    "end": "333870"
  },
  {
    "text": "you want to reverse in\nparticular the black lines. Those are really the\nonly important ones to reverse, I find,\nin this model.",
    "start": "333870",
    "end": "343630"
  },
  {
    "text": "So those are all\ngoing to be valley. You want to invert\nthem to be valleys.",
    "start": "343630",
    "end": "349480"
  },
  {
    "start": "349480",
    "end": "393740"
  },
  {
    "text": "Once you've got those guys,\nyou can collapse your flaps. Here's the fun part.",
    "start": "393740",
    "end": "398840"
  },
  {
    "text": " Ideally, you can collapse\nmaybe all four of them at once.",
    "start": "398840",
    "end": "405370"
  },
  {
    "text": "Let's see. It's been hours since\nI've folded one of these. I've forgotten how it's done.",
    "start": "405370",
    "end": "411740"
  },
  {
    "text": "You get this kind\nof floppy version. These polygons aren't flat\nlike they're supposed to be.",
    "start": "411740",
    "end": "418000"
  },
  {
    "text": "And this is where we have too\nmuch material at the vertex here. And so there's\nthese tucks, which",
    "start": "418000",
    "end": "423500"
  },
  {
    "text": "are just crimps, as\nwe've been calling them. And the blue here is mountain,\nthe way I've set it up.",
    "start": "423500",
    "end": "431460"
  },
  {
    "text": "So you just do all\nof those crimps. Mountain valley. Mountain valley. It's kind of like\nlittle simple folds",
    "start": "431460",
    "end": "437440"
  },
  {
    "text": "but in this\nthree-dimensional state. And when you put\nthem all in, it just makes exactly the desired form.",
    "start": "437440",
    "end": "444000"
  },
  {
    "text": "That's because this\nis has been designed to have exactly the right\nangles after you do the crimps.",
    "start": "444000",
    "end": "450180"
  },
  {
    "text": "And there's only one--\nif your paper was rigid, there'd be only one possible\nshape this could take on.",
    "start": "450180",
    "end": "457580"
  },
  {
    "text": "And there it is. This is supposed\nto be-- usually,",
    "start": "457580",
    "end": "462919"
  },
  {
    "text": "you fold it this way so that all\nthe crease lines that you print are on the backside,\nso you can't see them.",
    "start": "462920",
    "end": "469370"
  },
  {
    "text": "So then you have your\nperfect model out here. Not so perfect.",
    "start": "469370",
    "end": "474490"
  },
  {
    "text": "You'd just be exposing\nthe origami side with the tucks hidden\non the backside. Usually, you also want\nto hide the tucks.",
    "start": "474490",
    "end": "480509"
  },
  {
    "text": "But of course, if you want to\nget it the other way around, you just fold the blue valleys. The red's mountains.",
    "start": "480510",
    "end": "487160"
  },
  {
    "text": "But I find it's a little\neasier to fold this way, where you can see\nwhat you're doing. You can see all the crease\nlines you're making.",
    "start": "487160",
    "end": "494350"
  },
  {
    "text": "I can see the advanced\nfolders are already going on to the next one. This one is six squares,\nall coming together.",
    "start": "494351",
    "end": "501420"
  },
  {
    "text": "When folded, it looks\nsomething like this. But note that the crease\npattern as I've drawn it kind of",
    "start": "501420",
    "end": "509390"
  },
  {
    "text": "requires you to cut\nout this outer shape, because I haven't drawn the\ncreases that are outside there,",
    "start": "509390",
    "end": "515940"
  },
  {
    "text": "to make it easier to fold. So if you're folding\nahead, ideally, you cut along all the black\nlines in the outside.",
    "start": "515940",
    "end": "523031"
  },
  {
    "text": "Those guys. And then when you want to put in\nthese tucks-- you see how these are lined up-- you just\nwant to crimp that.",
    "start": "523032",
    "end": "531170"
  },
  {
    "text": "All right. You can keep folding at home. I want to show you a little\nbit about the process",
    "start": "531170",
    "end": "536390"
  },
  {
    "text": "of making that crease pattern. It's pretty easy\nonce you know how, but if you haven't\ndone it before,",
    "start": "536390",
    "end": "541480"
  },
  {
    "text": "the first time is a\nlittle bit challenging. I use a 3D-- first you\ndraw your 3D squares",
    "start": "541480",
    "end": "547459"
  },
  {
    "text": "that you want to make. I use a program called\nRhinoceros 3D, which has a pretty cheap\nacademic license,",
    "start": "547460",
    "end": "554280"
  },
  {
    "text": "and it's commonly used\naround here in architecture. You get a top-down view\nand a perspective view,",
    "start": "554280",
    "end": "561465"
  },
  {
    "text": "and all these great things. In this case, I just wanted to\ndraw four squares in a plane, so it was pretty simple.",
    "start": "561466",
    "end": "568380"
  },
  {
    "text": "I should have the file here. Four squares. ",
    "start": "568380",
    "end": "577600"
  },
  {
    "text": "So it looks like this. I've got my four\nsquares like that.",
    "start": "577600",
    "end": "585675"
  },
  {
    "text": "Very exciting. Here's what it looks\nlike in three dimensions. Wow. Then you export that\ninto DXF format.",
    "start": "585675",
    "end": "594320"
  },
  {
    "text": "Or sorry, into OBJ format. So you save as OBJ.",
    "start": "594320",
    "end": "600920"
  },
  {
    "text": "You've got a zillion options. You want to polygon mesh. Polylines.",
    "start": "600920",
    "end": "606970"
  },
  {
    "text": "UNIX. That works for me, though\nsome variations may also work. Then you've got your OBJ file.",
    "start": "606970",
    "end": "616120"
  },
  {
    "text": "You run Origamizer,\nwhich looks like this. ",
    "start": "616120",
    "end": "623640"
  },
  {
    "text": "And you can drag in\nyour new OBJ file.",
    "start": "623640",
    "end": "629130"
  },
  {
    "text": "Here it is. Exciting model here. This is in three dimensions. And then you say develop.",
    "start": "629130",
    "end": "638550"
  },
  {
    "text": "Actually, first you should\nprobably do angle condition, and then develop. Now you've got something\nlike a crease pattern.",
    "start": "638550",
    "end": "646950"
  },
  {
    "text": "It's actually just\nplacing the squares, and you can change how the\nsquares are placed here. I spread them out a little\nbit so that this tuck was not",
    "start": "646950",
    "end": "653043"
  },
  {
    "text": "super tiny. This model isn't\nvery constrained. And then you say crease\npattern generation,",
    "start": "653043",
    "end": "658380"
  },
  {
    "text": "and you get your crease pattern. And you can adjust\nhow spread out you want these, how big\nyou want your tucks to be.",
    "start": "658380",
    "end": "665860"
  },
  {
    "text": "I made it nice and square,\nand something like that size. Then when you save, you get a\ncrease pattern in DXF format.",
    "start": "665860",
    "end": "674690"
  },
  {
    "text": "And then hopefully your\ndrawing program can edit DXF. I think I opened it in\nRhino, then exported",
    "start": "674690",
    "end": "680740"
  },
  {
    "text": "to Adobe Illustrator, and\nthen open in Illustrator. I removed all this\nstuff on the outside,",
    "start": "680740",
    "end": "686420"
  },
  {
    "text": "because I just wanted\nthis square boundary. But you can do\nwhatever you like.",
    "start": "686420",
    "end": "692550"
  },
  {
    "text": "So that's Origamizer in action.",
    "start": "692550",
    "end": "697620"
  },
  {
    "text": "Wow, 900 frames a second. That's fast. Of course, if you do\nmore complicated models,",
    "start": "697620",
    "end": "704400"
  },
  {
    "text": "it can be a little\nmore involved. We've seen the bunny. What haven't we seen? A mask.",
    "start": "704400",
    "end": "709579"
  },
  {
    "text": "Never done this one. You should see develop. Boom. There it goes.",
    "start": "709580",
    "end": "715760"
  },
  {
    "text": "And spreading them out, trying\nto solve all the constraints, at some point it will converge.",
    "start": "715760",
    "end": "721850"
  },
  {
    "text": "In the lower left, you can\nsee its current error value. When that gets down to zero you\nhave a perfect crease pattern.",
    "start": "721850",
    "end": "728650"
  },
  {
    "text": "Except for these green regions. The green regions means that\nthe tucks in the 3D model, some",
    "start": "728650",
    "end": "735190"
  },
  {
    "text": "of the-- it's a little\nhard to turnaround. Some of the tucks\nmay be intersecting.",
    "start": "735190",
    "end": "741469"
  },
  {
    "text": "So if we look closely\nwe can probably find some tucks that\nare crossing each other. And if you want to deal\nwith that in the software--",
    "start": "741469",
    "end": "747800"
  },
  {
    "text": "not just somehow fiddle\naround with it with origami-- there's a tool which is\nsplit extra wide tucks.",
    "start": "747800",
    "end": "753350"
  },
  {
    "text": "If you look at one of\nthese, the green thing is the edge-tucking molecule. If you look at that,\nit will subdivide",
    "start": "753350",
    "end": "760400"
  },
  {
    "text": "into two edge-tucking molecules. Now they're half this tall. They don't go as\ndeep into this model. And they're less\nlikely to intersect.",
    "start": "760400",
    "end": "766700"
  },
  {
    "text": "As long as you've\ngot a green thing, there's potential intersection. When you're done, this is\nprobably a valid crease",
    "start": "766700",
    "end": "771880"
  },
  {
    "text": "pattern, at this point. A little bit of green. Hopefully they're OK. You can keep splitting if it\ncontinues to be a problem.",
    "start": "771880",
    "end": "779467"
  },
  {
    "text": "It just adds more\nand more creases.  So that's how to use Origamizer,\nif you haven't used it already.",
    "start": "779467",
    "end": "789149"
  },
  {
    "text": "And go back to slides. ",
    "start": "789150",
    "end": "794180"
  },
  {
    "text": "And the slide\nprogression of that. ",
    "start": "794180",
    "end": "800020"
  },
  {
    "text": "Cool . So the next question is\nabout-- essentially, it's a question about what\nmakes a convex vertex",
    "start": "800020",
    "end": "805780"
  },
  {
    "text": "versus a concave vertex. Concave is a little\nbit ambiguous, so usually we say non-convex,\nto mean the opposite of convex.",
    "start": "805780",
    "end": "814290"
  },
  {
    "text": "So I'll use non-convex. Essentially, there are two\nor three kinds of vertices,",
    "start": "814290",
    "end": "819940"
  },
  {
    "text": "depending on how you count. We've got something like\nthis vertex of a tetrahedron.",
    "start": "819940",
    "end": "830040"
  },
  {
    "text": "This would be convex,\nmeaning that if you look at the sum of the angles\nof material at that vertex,",
    "start": "830040",
    "end": "837629"
  },
  {
    "text": "that sum of angles\nis less than 360. You could also\nhave a flat vertex,",
    "start": "837630",
    "end": "843720"
  },
  {
    "text": "where it's equal to 360. That's what we just made. I've got four squares\ncoming together,",
    "start": "843720",
    "end": "849110"
  },
  {
    "text": "four 90-degree angles. Sum of those angles is 360.",
    "start": "849110",
    "end": "854680"
  },
  {
    "text": "Or you could have a\nnon-convex vertex. ",
    "start": "854680",
    "end": "859750"
  },
  {
    "text": "Non-convex, it's\nbigger than 360. And that's a little\nharder to draw.",
    "start": "859750",
    "end": "865519"
  },
  {
    "text": "So I made what I\ncall the canonical-- it's a nice clean orthogonal,\nmeaning all the bases are",
    "start": "865520",
    "end": "873790"
  },
  {
    "text": "horizontal, vertical,\nor the other way.  Non-convex vertex.",
    "start": "873790",
    "end": "878890"
  },
  {
    "text": "This has six 90-degree\nangles coming together. Six times 90 is bigger than 365.",
    "start": "878890",
    "end": "884566"
  },
  {
    "text": "It's 540. So this is, of course, inspired\nby the video game Q'bert.",
    "start": "884566",
    "end": "891720"
  },
  {
    "text": "Play it back in the day. And when you put\nit into Origamizer, it gives you some kind\nof layout like this.",
    "start": "891720",
    "end": "897910"
  },
  {
    "text": "Then you ask for the creases. And boom, you've got it. And the thing that I printed\nout had this removed,",
    "start": "897910",
    "end": "903120"
  },
  {
    "text": "which requires you to\ncut here, unfortunately. I also made the squares\ngo all the way to the tip.",
    "start": "903120",
    "end": "909949"
  },
  {
    "text": "Place them differently,\nand you end up with this crease pattern. And this is a little\ntrickier, because you've got some extra tucks in here.",
    "start": "909950",
    "end": "916070"
  },
  {
    "text": "They're quite small. And depending on how\naccurate you want to be,",
    "start": "916070",
    "end": "922100"
  },
  {
    "text": "it's a little hard to fold it\nin exactly the right shape. Looks pretty good. It's got some-- little bit\nmessy here in the center.",
    "start": "922100",
    "end": "929380"
  },
  {
    "text": "If I use better paper,\nit'll be a little easier.  So that's a non-convex vertex.",
    "start": "929380",
    "end": "935600"
  },
  {
    "text": "And in some sense, the\npoint of Origamizer was to deal with non-convex\nvertices, not just convex ones.",
    "start": "935600",
    "end": "940760"
  },
  {
    "text": "Convex ones, you can kind\nof wrap around the paper, and just tuck away\nthe extra material. Non-convex, you really\nhave to tuck away",
    "start": "940760",
    "end": "946590"
  },
  {
    "text": "material in a clever way in\norder to get all of these guys to come together. Because normally, on a sheet of\npaper, everything looks flat.",
    "start": "946590",
    "end": "954630"
  },
  {
    "text": "Everything should add up to 360. But if you hide\naway material, you can get more corners\nto come together,",
    "start": "954630",
    "end": "960810"
  },
  {
    "text": "and that's what lets you\nget non-convex vertices. So that's where that came from.",
    "start": "960810",
    "end": "967662"
  },
  {
    "text": "You can't just take\na convex vertex and flip it inside, because\nintrinsically, on the surface, it'll still look\nlike a convex vertex,",
    "start": "967662",
    "end": "973880"
  },
  {
    "text": "even if it's popped inside out. Some of the angles won't change. Still be less than 360.",
    "start": "973880",
    "end": "982280"
  },
  {
    "text": "Cool. Next thing I wanted to\nshow is Freeform Origami.",
    "start": "982280",
    "end": "989279"
  },
  {
    "text": "In particular, there's a bunch\nof different modes in Freeform Origami, and they weren't really\nshowing much in the videos.",
    "start": "989279",
    "end": "994600"
  },
  {
    "text": "So I'm going to show you a\nlittle bit about how it works. So you download\nFreeform Origami .",
    "start": "994600",
    "end": "1002410"
  },
  {
    "text": "All this software is\nWindows only at the moment. ",
    "start": "1002410",
    "end": "1008610"
  },
  {
    "text": "So then you open\nyour favorite model. It can be a 3D\nmodel or a 2D model.",
    "start": "1008610",
    "end": "1014860"
  },
  {
    "text": "Miura-ori is a really\nnice example to work with. This is just straight\nlines in one direction, and then a zigzag in\nthe other direction.",
    "start": "1014860",
    "end": "1022350"
  },
  {
    "text": "I've got your 3D view\non the left and right. Now these views are\nnot enabled, because I haven't turned on a\nlot of constraints.",
    "start": "1022350",
    "end": "1028550"
  },
  {
    "text": "Now, as you see, there's a\nlot of different constraints I can turn on or off.",
    "start": "1028550",
    "end": "1034220"
  },
  {
    "text": "In this case, I will\nturn on developable, which means that each of these\nvertices in this 3D model",
    "start": "1034220",
    "end": "1041699"
  },
  {
    "text": "are flat, according\nto this model, so you want to constrain some\nof the angles to add up to 360. That means that it came\nfrom a sheet of paper.",
    "start": "1041700",
    "end": "1049140"
  },
  {
    "text": "That makes it a folding. So this is different from\nthe target in Origamizer, where it's just a 3D model.",
    "start": "1049140",
    "end": "1055570"
  },
  {
    "text": "And now you can see up\nhere the crease pattern, which will actually\nfold into that. Because a developable, you\ncan just locally unfold it,",
    "start": "1055570",
    "end": "1062330"
  },
  {
    "text": "and you'll get a\npicture like that. The other thing I want to\nturn on is flat foldability.",
    "start": "1062330",
    "end": "1068320"
  },
  {
    "text": "This is Kawasaki's condition. So it's going to enforce that\nthis angle plus this angle",
    "start": "1068320",
    "end": "1075900"
  },
  {
    "text": "equals 180. Or the sum of the odds\nequals the sum of the evens. When you add that constraint\nyou guarantee a flat folding,",
    "start": "1075900",
    "end": "1082230"
  },
  {
    "text": "and then this picture\nis the shadow pattern, if you make that flat\nfolding, and just draw them on top of each other.",
    "start": "1082230",
    "end": "1088900"
  },
  {
    "text": "OK, so those are my\nconstraints, and that turns on all of my views. Now I can do-- currently,\nI am in simulation mode.",
    "start": "1088900",
    "end": "1096899"
  },
  {
    "text": "This means it's acting like\na physical piece of paper. So when I drag on\na corner, it'll",
    "start": "1096900",
    "end": "1102590"
  },
  {
    "text": "try to fold that\nup, or unfold it. But this stuff on the\nright, the crease pattern, is not changing.",
    "start": "1102590",
    "end": "1109510"
  },
  {
    "text": "So this model, because it\nhas a lot of boundary edges, it has a bunch of\ndegrees of freedom.",
    "start": "1109510",
    "end": "1115210"
  },
  {
    "text": "So I was like number of\ndegrees-- number of boundary edges minus 3 is the number\nof degrees of freedom,",
    "start": "1115210",
    "end": "1120279"
  },
  {
    "text": "in this general picture. They're crushed. ",
    "start": "1120280",
    "end": "1126778"
  },
  {
    "text": "So that's the idea. You can also hold down\nspacebar, and it'll just try to fold everything,\nkind of uniformly.",
    "start": "1126779",
    "end": "1132080"
  },
  {
    "text": "Or you can hit B, and it'll\nunfold everything uniformly. So this is all, again, not\nchanging the crease pattern",
    "start": "1132080",
    "end": "1137970"
  },
  {
    "text": "up here. If I move away from\nsimulation mode, if I turn this check\nbox off, now I'm",
    "start": "1137970",
    "end": "1144320"
  },
  {
    "text": "allowing the crease\npattern up here to vary. So if you watch this upper right\ncorner, as I drag on this guy,",
    "start": "1144320",
    "end": "1151610"
  },
  {
    "text": "crease pattern changes. It's now allowing the\nwhole thing to be flexible.",
    "start": "1151610",
    "end": "1156750"
  },
  {
    "text": "And I can do things\nlike, oh, maybe I want to make this\nreally high up here.",
    "start": "1156750",
    "end": "1161787"
  },
  {
    "text": "And this is stuff you could\nnot do with Miura-ori. We're changing the\nMiura-ori pattern.",
    "start": "1161787",
    "end": "1166900"
  },
  {
    "text": "Zoom out over here. See what's going on. Maybe I want to bring\nthese guys up as well. ",
    "start": "1166900",
    "end": "1174770"
  },
  {
    "text": "I can't make any\n3D shape, because I am constrained by-- a\nlittle too exciting.",
    "start": "1174770",
    "end": "1180650"
  },
  {
    "text": "You can always hit\nControl-Z to undo. Sometimes it's hard to\nsatisfy all the constraints that I give it.",
    "start": "1180650",
    "end": "1186710"
  },
  {
    "text": "We can do things\nlike snap there. And wow, cool.",
    "start": "1186710",
    "end": "1192057"
  },
  {
    "text": "So you have to be\na little careful. This requires some finesse. Because the constraints\nare not always satisfiable.",
    "start": "1192057",
    "end": "1198510"
  },
  {
    "text": "But this, whatever I'm\nmaking, at all times will come from one\npiece of paper-- and you can print out\nthis crease pattern--",
    "start": "1198510",
    "end": "1204670"
  },
  {
    "text": "and it will be flat foldable. And the cool theorem\nby Tomohiro is that if you have\na valid 3D state,",
    "start": "1204670",
    "end": "1211924"
  },
  {
    "text": "like the one on the left, and\nyou know it's flat foldable, and it came from a\nsheet of paper, then it will actually be\nrigidly foldable.",
    "start": "1211924",
    "end": "1217860"
  },
  {
    "text": "And so we can unfold this thing. Whoa. Or fold it, in theory.",
    "start": "1217860",
    "end": "1224040"
  },
  {
    "text": "I see. The problem is I should first\nturn on simulation mode.",
    "start": "1224040",
    "end": "1229100"
  },
  {
    "text": "I don't want the\npattern to change. Then I let it fold,\nor unfold, and then it will be well behaved.",
    "start": "1229100",
    "end": "1234610"
  },
  {
    "text": "This is guaranteed to work. When I have simulation mode\non, anything could happen. So it could explode.",
    "start": "1234610",
    "end": "1240972"
  },
  {
    "text": "But that's how\nFreeform Origami works. So this question here was--\nyeah, if you pull on a point",
    "start": "1240972",
    "end": "1250260"
  },
  {
    "text": "when you're in\nsimulation mode, you won't change the crease pattern. But if you turn off\nsimulation mode, which",
    "start": "1250260",
    "end": "1255396"
  },
  {
    "text": "is called design mode, then you\ncan really change the pattern, and get it to fold into\nsomething that you want.",
    "start": "1255396",
    "end": "1262010"
  },
  {
    "text": "And here's an\nexample of something designed with this method. And then we waterjet\ncut it with little tabs.",
    "start": "1262010",
    "end": "1270860"
  },
  {
    "text": "And this only folds once. You can't unfold it, or\nelse the tabs will break.",
    "start": "1270860",
    "end": "1276419"
  },
  {
    "text": "But it's pretty cool. And you can just\nprint out these-- this is made from one sheet\nsteel and folded by hand.",
    "start": "1276420",
    "end": "1283920"
  },
  {
    "text": "This was made back\nwhen Tomohiro was visiting for that guest lecture.",
    "start": "1283920",
    "end": "1289260"
  },
  {
    "text": "So first we made a paper model,\nmade sure it looked good. And this one,\nwe'll fold rigidly.",
    "start": "1289260",
    "end": "1296940"
  },
  {
    "text": "And we made another version,\nwhich I couldn't find. It was metal, but [INAUDIBLE]\nridges folds rigidly,",
    "start": "1296940",
    "end": "1303220"
  },
  {
    "text": "like the videos that he showed. AUDIENCE: Erik, what is the name\nof the program you're using?",
    "start": "1303220",
    "end": "1308280"
  },
  {
    "text": "PROFESSOR: This is\ncalled Freeform Origami. Or maybe Freeform\nOrgami Designer. All of these, if you search\nfor Tomohiro Tachi software.",
    "start": "1308280",
    "end": "1315980"
  },
  {
    "text": "It's also linked in\nsome of these slides. You will find all three\nof these programs.",
    "start": "1315980",
    "end": "1321019"
  },
  {
    "text": "I haven't yet shown\nRigid Origami Simulator. ",
    "start": "1321020",
    "end": "1326950"
  },
  {
    "text": "Because it's, in some sense,\nassumed by Freeform Origami, because Freefrom\nOrigami can also do the folding with keeping\nall the panels rigid.",
    "start": "1326950",
    "end": "1334830"
  },
  {
    "text": "But they have some differences,\nwhich I might talk about now. Next question is, on\nthe slides, Tomohiro",
    "start": "1334830",
    "end": "1344190"
  },
  {
    "text": "showed there were\ntons of equations. He didn't talk\nabout any of them, and some people\nreally wanted to know about these great equations\nor the conditions.",
    "start": "1344190",
    "end": "1351340"
  },
  {
    "text": "What are the constraints that go\non in Origamizer, Rigid Origami Simulator, and Freeform Origami.",
    "start": "1351340",
    "end": "1356730"
  },
  {
    "text": "And there are a bunch. And I don't want to go into\nthem in lots of detail, because it can get complicated.",
    "start": "1356730",
    "end": "1363080"
  },
  {
    "text": "But I'll give you a high-level\npicture of what's going on. So first one, this is\nRigid Origami Simulator,",
    "start": "1363080",
    "end": "1368751"
  },
  {
    "text": "which I didn't show you. But basically, you take\nin a crease pattern. You can hit spacebar to\nmake everything fold.",
    "start": "1368751",
    "end": "1373910"
  },
  {
    "text": "You can hit B to make\neverything unfold. And it keeps all\nthe panels rigid. That's its goal.",
    "start": "1373910",
    "end": "1379430"
  },
  {
    "text": "And there's essentially-- this\nsoftware is written in a way that the geometry of\neach of these faces",
    "start": "1379430",
    "end": "1385815"
  },
  {
    "text": "is determined by the\noriginal crease pattern. So you don't-- that's\njust given to you. And the only thing\nreally that's free",
    "start": "1385815",
    "end": "1391860"
  },
  {
    "text": "are the bend angles\nat each crease. So it parameterizes this 3D\nmodel by the bend angles.",
    "start": "1391860",
    "end": "1398230"
  },
  {
    "text": "And when you parameterize\nby bend angles, there's one key\nconstraint you need, which is that if you\nwalk around a vertex",
    "start": "1398230",
    "end": "1404634"
  },
  {
    "text": "and you say, OK I bend by this. And then I bend by this,\nand bend, bend, bend. I should end up back\nwhere I started.",
    "start": "1404635",
    "end": "1410380"
  },
  {
    "text": "Otherwise, there'll be a tear\nin the paper, at the corner. So if you're going to\nprioritize by bend angles, you have a cyclic constraint\naround each vertex.",
    "start": "1410380",
    "end": "1417544"
  },
  {
    "text": "And that is the one\nconstraint you have. This was originally described\nby Belcastro and Hull.",
    "start": "1417544",
    "end": "1423075"
  },
  {
    "text": "I know some of you know. And so around a\nvertex, basically,",
    "start": "1423075",
    "end": "1429190"
  },
  {
    "text": "every time you have a face of\npaper, you turn by that amount.",
    "start": "1429190",
    "end": "1434220"
  },
  {
    "text": "There's matrix B.\nIt's a rotation. Then you rotate around\nthat crease by however",
    "start": "1434220",
    "end": "1440330"
  },
  {
    "text": "much the crease angle is. And then you rotate\naround the face, and you rotate, rotate, rotate.",
    "start": "1440330",
    "end": "1445909"
  },
  {
    "text": "You take the composition\nof all these rotations. That should end up with\nthe trivial rotation, which is do nothing.",
    "start": "1445910",
    "end": "1452247"
  },
  {
    "text": "Otherwise, there\nwould be a tear here. So this is a constraint\non the angles",
    "start": "1452247",
    "end": "1458100"
  },
  {
    "text": "it's a somewhat\ncomplicated constraint. It involves sines and\ncosines of the angles. But otherwise, if you ignore\nthe sine, cosine, stuff,",
    "start": "1458100",
    "end": "1466060"
  },
  {
    "text": "this is actually linear. This is a bunch of\nmatrices, rotation matrices. You're just composing them.",
    "start": "1466060",
    "end": "1471110"
  },
  {
    "text": "So it's relatively clean. And then you get\nyour folding motion.",
    "start": "1471110",
    "end": "1476205"
  },
  {
    "text": " A little tricky to do by hand,\nbut very easy on a computer",
    "start": "1476205",
    "end": "1484885"
  },
  {
    "text": "to solve that linear system. OK, next we have Freeform\nOrigami Simulator, what I just showed you.",
    "start": "1484885",
    "end": "1492300"
  },
  {
    "text": "This has two constraints. Or there are two constraints\nthat I turned on. There are, in general, more\nthat you could turn on.",
    "start": "1492300",
    "end": "1498380"
  },
  {
    "text": "One of them is developability. So here, we want to start\nfrom a piece of paper.",
    "start": "1498380",
    "end": "1505029"
  },
  {
    "text": "And so we want the sum\nof the angles to be 360. So that is just\na sum constraint.",
    "start": "1505030",
    "end": "1510140"
  },
  {
    "text": "The other condition we\nwant is flat foldability, which is the Kawasaki condition. If you satisfy both\nof these, we know",
    "start": "1510140",
    "end": "1516929"
  },
  {
    "text": "that you'll be rigidly\nfoldable, and that's kind of what Freeform\nOrigami is about. You can turn them off. You can turn on other\nconstraints as well.",
    "start": "1516929",
    "end": "1523360"
  },
  {
    "text": "There are bunch in there, but\nthose are kind of the core two that you typically want to use.",
    "start": "1523360",
    "end": "1529470"
  },
  {
    "text": "And so it's always\nsolving these constraints. So those two systems have\nrelatively simple constraint",
    "start": "1529470",
    "end": "1534830"
  },
  {
    "text": "systems, although\nFreeform Origami has a lot of extra\nbells and whistles. So you could do cool design.",
    "start": "1534830",
    "end": "1540664"
  },
  {
    "text": "You can try to\nforce two vertices to come together, and so on. You can try to make mountains\nbe folded as mountains,",
    "start": "1540665",
    "end": "1547970"
  },
  {
    "text": "and valleys folded as valleys. You can constrain\nwhich way creases go. Those are inequality\nconstraints. ",
    "start": "1547970",
    "end": "1555399"
  },
  {
    "text": "The last one I want to\ntalk about is Origamizer. This has a lot of\nconstraints, and this is where it's probably more\ninsightful to go through them.",
    "start": "1555400",
    "end": "1563620"
  },
  {
    "text": "So remember we're trying\nto place these polygons into the plane so that these\nedge-tucking molecules are",
    "start": "1563620",
    "end": "1568940"
  },
  {
    "text": "very simple. They're just a single crease. So that's our--\nfirst we're going",
    "start": "1568940",
    "end": "1574169"
  },
  {
    "text": "to just sort of paramaterize\nhow things are set up. Suppose you've got\ntwo faces, which",
    "start": "1574170",
    "end": "1579610"
  },
  {
    "text": "share an edge in the\npolyhedron, the thing you're trying to make. We want to place those\ntwo faces somewhere",
    "start": "1579610",
    "end": "1585289"
  },
  {
    "text": "in the piece of paper. And there's a rotation. So here, we've separated\nthis edge from this edge.",
    "start": "1585290",
    "end": "1593660"
  },
  {
    "text": "And if we extend those\nlines, they form some angle. We're going to call\nthat angle theta ij.",
    "start": "1593660",
    "end": "1598760"
  },
  {
    "text": "That's one of our variables\nthat we get to play with. The other thing is\nhow distant are they.",
    "start": "1598760",
    "end": "1604260"
  },
  {
    "text": "There's wij. Here, and wji here. And just for that\nprioritization to make sense,",
    "start": "1604260",
    "end": "1610390"
  },
  {
    "text": "you've got to satisfy\na couple of conditions, that if you look at theta\nji versus ij, it's negated.",
    "start": "1610390",
    "end": "1617440"
  },
  {
    "text": "And if you look at\nthe w's, you can take the sine of\nhalf the angle theta,",
    "start": "1617440",
    "end": "1623150"
  },
  {
    "text": "and that tells you how much\nthis w differs from this w. So these are two relatively\nsimple constraints.",
    "start": "1623150",
    "end": "1632610"
  },
  {
    "text": "Then, like in the previous\ntwo-- like in Rigid Origami Simulator, you have to have\nclosure around a vertex.",
    "start": "1632610",
    "end": "1640700"
  },
  {
    "text": "If we're placing these two\nparameters, w and theta, denote how this guy's\nplaced relative to this guy.",
    "start": "1640700",
    "end": "1647784"
  },
  {
    "text": "And then you can-- if you\nlook around a vertex where all these faces\nmeet, there's the way this is parameterized\nwith aspect to this,",
    "start": "1647784",
    "end": "1653480"
  },
  {
    "text": "and this to this,\nand this to this. Those should be consistent. And in terms of the\nthetas, it means",
    "start": "1653480",
    "end": "1658830"
  },
  {
    "text": "that you should do one full\nturn around the vertex. You've got these theta i's. Then you've got these\nalpha i's, which",
    "start": "1658830",
    "end": "1665210"
  },
  {
    "text": "are the angles of the face. Then you turn by theta. Turn by alpha. Theta, alpha, blah, blah, blah. In the end, you should get 360.",
    "start": "1665210",
    "end": "1672461"
  },
  {
    "text": "And the equation's\nwritten this way because these are the variables\nthat you want to constrain.",
    "start": "1672462",
    "end": "1677989"
  },
  {
    "text": "These quantities are all known. You know all the\nalphas ahead of time. Those are the angles\nof your surface. So this is a linear\nconstraint on the thetas.",
    "start": "1677989",
    "end": "1685310"
  },
  {
    "text": " So there's also a similar\nconstraint on the w's.",
    "start": "1685310",
    "end": "1692190"
  },
  {
    "text": "This is a little bit messier. It involves rotations,\ninvolving these angles",
    "start": "1692190",
    "end": "1698660"
  },
  {
    "text": "and this other\nangle, capital theta, which is the sum of\nthetas and alphas. But it's essentially\nsaying the same thing,",
    "start": "1698660",
    "end": "1704860"
  },
  {
    "text": "that this closed loop\nis actually a polygon. It should come back\nto where it started.",
    "start": "1704860",
    "end": "1710790"
  },
  {
    "text": "So if you do this walk, you end\nup back at your origin, 0, 0. ",
    "start": "1710790",
    "end": "1718540"
  },
  {
    "text": "Next constraint is the\nconvexity of the piece of paper. So you're trying to-- you want\nthe polygons on the outside",
    "start": "1718540",
    "end": "1724690"
  },
  {
    "text": "to form a nice convex polygon,\nbecause you can always fold the convex\npolygon from a square.",
    "start": "1724690",
    "end": "1729730"
  },
  {
    "text": "And so this is just a\nvery simple constraint that, at the boundary,\nyou have these--",
    "start": "1729730",
    "end": "1735000"
  },
  {
    "text": "the thetas should be\ngreater or equal to 180. That's very simple.",
    "start": "1735000",
    "end": "1740080"
  },
  {
    "text": "Next one, these get\na little bit more technical to make the\nmolecules guaranteed to work.",
    "start": "1740080",
    "end": "1747521"
  },
  {
    "text": "And so, in particular,\nan edge-tucking molecule, we want this to be a\nnice convex polygon. And so this is actually\nfairly easy to constrain,",
    "start": "1747521",
    "end": "1755020"
  },
  {
    "text": "but all these angles should\nbe in the right range. Don't want any giant angle.",
    "start": "1755020",
    "end": "1760495"
  },
  {
    "text": "You don't want\nthese to basically flip open to be more than 180. That would be bad. ",
    "start": "1760495",
    "end": "1767800"
  },
  {
    "text": "The vertex-tucking molecule\nis a little trickier. There are two main\nconstraints we need. One is that the thing that you\nfold, which is kind of floppy",
    "start": "1767800",
    "end": "1775210"
  },
  {
    "text": "and has too much\nmaterial, you want it to have too much material,\nnot too little material. You want each of these\nangles in the tabs",
    "start": "1775210",
    "end": "1782710"
  },
  {
    "text": "to be greater than or equal to\nthe desired angle over here, so that you can just add\nin a tuck, like these guys.",
    "start": "1782710",
    "end": "1789440"
  },
  {
    "text": "Add in one of\nthese little pleats to reduce the angle\nto whatever you need. If it's too small, no\nmatter how much you fold it,",
    "start": "1789440",
    "end": "1796299"
  },
  {
    "text": "it'll stay too small. So it's like the guy who\nkeeps cutting the board and he says, \"I keep cutting\nit, but it's still too short.\"",
    "start": "1796300",
    "end": "1803650"
  },
  {
    "text": "So you want it to be\ntoo long initially, so you can cut it to\njust the right length. The angle to just\nthe right length.",
    "start": "1803650",
    "end": "1812020"
  },
  {
    "text": "This involves all these angles,\nwhich I don't want to define, but you can compute\nwhat the angle is here.",
    "start": "1812020",
    "end": "1817694"
  },
  {
    "text": "It's easy to compute\nwhat the target angle is. You just measure\nit on the 3D model after you compute\nthe type proxy.",
    "start": "1817694",
    "end": "1823040"
  },
  {
    "text": "And so you're\nconstraining the thetas, or constraining this fee value.",
    "start": "1823040",
    "end": "1831604"
  },
  {
    "text": "All right, so then\nthe other constraint is this tuck depth\ncondition, which",
    "start": "1831604",
    "end": "1836970"
  },
  {
    "text": "says this is the\nnon-intersection parts. So you want these tucks\nto not hit each other.",
    "start": "1836970",
    "end": "1843775"
  },
  {
    "text": "They're not so deep that\nthey penetrate each other. And I don't want to go into\nthe details of how that's specified, but it's\nanother constraint.",
    "start": "1843775",
    "end": "1849920"
  },
  {
    "text": "Now over all, these\nconstraints are fairly complicated\nand non-linear.",
    "start": "1849920",
    "end": "1855059"
  },
  {
    "text": "But Origamizer solves\nthem approximately. And if you let it converge, and\nif it says it's got zero error,",
    "start": "1855060",
    "end": "1862500"
  },
  {
    "text": "it has solved them. But it can take a while. So one of the questions was,\ncan we do an example by hand",
    "start": "1862500",
    "end": "1872630"
  },
  {
    "text": "to solve all of these systems? And the short answer is no. You really need a computer\nto solve something like this.",
    "start": "1872630",
    "end": "1878570"
  },
  {
    "text": "At least I would. The solution method is\nessentially Newton's method,",
    "start": "1878570",
    "end": "1884055"
  },
  {
    "text": "that you may have\nseen in some context. But this is a high-dimensional\nversion of Newton's method to solve non-linear systems,\nand it involves the Jacobian--",
    "start": "1884056",
    "end": "1892520"
  },
  {
    "text": "I'll just wave my\nhands-- which is partial derivatives with respect\nto all the different parameters you have.",
    "start": "1892520",
    "end": "1898740"
  },
  {
    "text": "These are vectors, so\nthis is a big matrix. And then you do a\nsequence of iterations",
    "start": "1898740",
    "end": "1904820"
  },
  {
    "text": "using this method, which\nis a little easier to see in this picture. Essentially there are\ntwo things going on.",
    "start": "1904820",
    "end": "1911430"
  },
  {
    "text": "So you're reacting to-- suppose\nyou have a valid solution right now. Then someone drags on a vertex.",
    "start": "1911430",
    "end": "1917370"
  },
  {
    "text": "When they drag on\na vertex, let's say they drag it\nalong a straight line. That's a linear\nmotion of a vertex.",
    "start": "1917370",
    "end": "1923929"
  },
  {
    "text": "And that will start\nviolating constraints. If you go in that direction,\nprobably not very good for all these constraints.",
    "start": "1923930",
    "end": "1930700"
  },
  {
    "text": "In Freefrom Origami,\nyou have-- the edge lengths should\nall stay the same. If you're in simulation mode.",
    "start": "1930700",
    "end": "1937700"
  },
  {
    "text": "So as you drag crazy,\nyou're invalid. So the first thing\nyou do is project.",
    "start": "1937700",
    "end": "1944830"
  },
  {
    "text": "And this is, I\ncall, an oiler step. You project that direction\nto be a direction that",
    "start": "1944830",
    "end": "1951490"
  },
  {
    "text": "is perpendicular to all\nof your constraints, which means that\nit preserves all the constraints to\nthe first order.",
    "start": "1951490",
    "end": "1958279"
  },
  {
    "text": "And that's, I think,\nthis first red step. Sorry. In general, these\ngreen steps would",
    "start": "1958280",
    "end": "1963937"
  },
  {
    "text": "be if you just preserve\nthings to the first order. But if you keep\nfollowing motions that are kind of correct-- they're\ncorrect to the first order--",
    "start": "1963937",
    "end": "1972870"
  },
  {
    "text": "you'll eventually drift\naway from correctness. And so you have to correct\nwith the second derivative--",
    "start": "1972870",
    "end": "1979250"
  },
  {
    "text": "and that's these\nyellow steps-- to try to get back to a solution.",
    "start": "1979250",
    "end": "1985430"
  },
  {
    "text": "So as you're\ndragging, first, you correct to be correct\nto the first order. You make a step\nin that direction.",
    "start": "1985430",
    "end": "1991030"
  },
  {
    "text": "Then you do the sequence\nof second order steps to get closer and closer to\nwhere things are actually correct. If that made sense, great.",
    "start": "1991030",
    "end": "1996389"
  },
  {
    "text": "If not, you should take a\ncourse on numerical methods in computer science. A little beyond\nwhat we can do here.",
    "start": "1996390",
    "end": "2002299"
  },
  {
    "text": "And so I'm just going\nto leave it at that. ",
    "start": "2002300",
    "end": "2008210"
  },
  {
    "text": "Cool. Couple other questions\nabout things Tomohiro said. So he said, it\nseems you don't need",
    "start": "2008210",
    "end": "2014890"
  },
  {
    "text": "to worry about NP completeness\nof flat foldability. That's actually\nsomething we'll be covering in the next lecture.",
    "start": "2014890",
    "end": "2019950"
  },
  {
    "text": "So if you don't know what\nthat means yet, don't worry. We'll be talking about it. But it means, at\nthe high level, it",
    "start": "2019951",
    "end": "2025659"
  },
  {
    "text": "says it's competitionally\nintractable to make things fold flat. And yet, he's solving it.",
    "start": "2025659",
    "end": "2031290"
  },
  {
    "text": "Why is that OK? There's a couple\nthings going on. In some sense\nhere, we don't care",
    "start": "2031290",
    "end": "2039980"
  },
  {
    "text": "about true flat foldabilities. Sometimes, he'd like\nto fold all the way to the flat state for\ncompactness, and so on.",
    "start": "2039980",
    "end": "2045779"
  },
  {
    "text": "That would be nice. But in particular, he just\nwants local flat foldability. He knows that if you have\nKawasaki's condition,",
    "start": "2045780",
    "end": "2053060"
  },
  {
    "text": "then you guarantee\na rigid motion to fold for a little bit of\ntime, and you can prove that. And so if you're just trying\nto get rigidly foldable things,",
    "start": "2053060",
    "end": "2061269"
  },
  {
    "text": "it's enough to have local\nflat foldability, which we do know how to\nsolve in linear time. And that's the\nKawasaki condition,",
    "start": "2061269",
    "end": "2067370"
  },
  {
    "text": "and that's what he's solving. And so, essentially,\nwhatever he makes will fold for at least\na little bit of time.",
    "start": "2067370",
    "end": "2074070"
  },
  {
    "text": "And if he's lucky, it'll\nfold all the way to flat. Sometimes not. Sometimes might get\ncollision in between.",
    "start": "2074070",
    "end": "2079106"
  },
  {
    "text": "So you always get\nsomething that folds. And then if it doesn't fall the\nway, you can try tweaking it until it does.",
    "start": "2079106",
    "end": "2084739"
  },
  {
    "text": "So that's the high\nlevel version. But you can, in some sense,\nsidestep NP completeness here.",
    "start": "2084739",
    "end": "2091460"
  },
  {
    "text": " I think there's still some\ninteresting open problems.",
    "start": "2091460",
    "end": "2097180"
  },
  {
    "text": "In this setting, it seems like,\nsay, Freeform Origami Designer. It seems like you really-- yeah.",
    "start": "2097180",
    "end": "2107865"
  },
  {
    "text": "I have to leave it at that. I don't know exactly how to\nformulate the open problem here. But I think there are\ninteresting questions about proving NP completeness\ndoesn't matter as much here.",
    "start": "2107865",
    "end": "2116020"
  },
  {
    "text": " OK, another cool question. This is getting a\nbit higher level.",
    "start": "2116020",
    "end": "2123340"
  },
  {
    "text": "This is rather tedious to fold\nby hand, as you've now learned, especially if you're going to\nmake something like a bunny.",
    "start": "2123340",
    "end": "2128860"
  },
  {
    "text": "Can we make a\nmachine to do this? And so I wanted to show you\na couple examples of machines for folding that\nhave sidestepped",
    "start": "2128860",
    "end": "2135790"
  },
  {
    "text": "the printing by hand. This is an origami robot\nmade at CMU by Devin Balkcom.",
    "start": "2135790",
    "end": "2142740"
  },
  {
    "text": "He was a Ph.D.\nstudent at the time. And he's taking\na piece of paper. It's a robot. It's open loop. It has no feedback, has\nno censors, or anything.",
    "start": "2142740",
    "end": "2150360"
  },
  {
    "text": "It is preprogrammed like an\nassembly machine to fold.",
    "start": "2150360",
    "end": "2156320"
  },
  {
    "text": "Essentially, it can\ndo simple folds. So it's got a\nlittle suction guy, to move things around, crease.",
    "start": "2156320",
    "end": "2162850"
  },
  {
    "text": "Eventually it accumulates error\nif it does a ton of steps, so you'd need a closed-loop\nsystem with a camera or something to get that.",
    "start": "2162850",
    "end": "2169070"
  },
  {
    "text": "But it actually does\na pretty decent job. This is real time.",
    "start": "2169070",
    "end": "2174370"
  },
  {
    "text": "In this case, I\nthink it's finished. One more fold.",
    "start": "2174370",
    "end": "2180170"
  },
  {
    "text": "Crunch. It's pretty impressive\nwhat it can do it. But it can really\nonly do simple folds.",
    "start": "2180170",
    "end": "2185550"
  },
  {
    "text": "It's going to have an issue if\nthings really unfold it a lot. It might accidentally\nhit something.",
    "start": "2185550",
    "end": "2192150"
  },
  {
    "text": "And this should\nbe a samurai hat. ",
    "start": "2192150",
    "end": "2197220"
  },
  {
    "text": "Tweaking it a\nlittle bit by hand. Wow, it looks like\na tetrahedron.",
    "start": "2197220",
    "end": "2203910"
  },
  {
    "text": "OK, so that was one example. Here's a more modern example. This was done at\nHarvard just last year.",
    "start": "2203910",
    "end": "2209640"
  },
  {
    "text": "And this is a process involving\nlaser-cutting individual components, aligning\nthem with these tabs.",
    "start": "2209640",
    "end": "2216150"
  },
  {
    "text": "Sorry, these pins. Assembling them\ntogether to make hinges. So they use laser\ncutting, and to get",
    "start": "2216150",
    "end": "2224230"
  },
  {
    "text": "two-dimensional surfaces, they\nuse folding to make 3D shapes. Kind of like pop-up cards.",
    "start": "2224230",
    "end": "2230840"
  },
  {
    "text": "This is what a typical\nhinge looks like. They've got all the\ndifferent materials here to attach different parts.",
    "start": "2230840",
    "end": "2237289"
  },
  {
    "text": "And these piezoelectric\nfolding actuators. This is their overall design. They're trying to make\na bee robotic bee.",
    "start": "2237290",
    "end": "2243480"
  },
  {
    "text": "And this is what the final\ncreated thing looks like. It's mostly carbon fiber.",
    "start": "2243480",
    "end": "2248930"
  },
  {
    "text": "And then these are the\npiezoelectric actuators. So this is the thing\nthey want to make. They build a scaffold around\nit that causes the whole thing",
    "start": "2248930",
    "end": "2256560"
  },
  {
    "text": "to fold into its\ndesired 3D shape. So they're taking flat parts. And they want to do things\nlike take this flat part",
    "start": "2256560",
    "end": "2262610"
  },
  {
    "text": "and raise it. So what do they do? They add two hinges\nto make this part move",
    "start": "2262610",
    "end": "2268000"
  },
  {
    "text": "along this straight\nup and down motion. And then each of--\nthat's just a scaffold.",
    "start": "2268000",
    "end": "2273150"
  },
  {
    "text": "Each of the gray parts they\nactually want to build. They add the appropriate\nhinges to cause it to fold in exactly\nthe way they like.",
    "start": "2273150",
    "end": "2280020"
  },
  {
    "text": "So here, for example, the\nwing is staying vertical. This part-- it keeps\nmoving around on me--",
    "start": "2280020",
    "end": "2285390"
  },
  {
    "text": "is turning 90 degrees. You do that with all the parts. You get them all\nto fold like that.",
    "start": "2285390",
    "end": "2292640"
  },
  {
    "text": "Here's a prototype in real life. ",
    "start": "2292640",
    "end": "2298150"
  },
  {
    "text": "And then here's\nthe final version. This is actually in real\ntime, so it folds really fast.",
    "start": "2298150",
    "end": "2304380"
  },
  {
    "text": "Zoom. And then you've got\nyour assembled thing. One more. ",
    "start": "2304380",
    "end": "2311440"
  },
  {
    "text": "And then they add\nthis particular metal that fuses the\nhinges together, so",
    "start": "2311440",
    "end": "2316490"
  },
  {
    "text": "that they will no longer unfold. So that's what it\nlooks like locked.",
    "start": "2316490",
    "end": "2322660"
  },
  {
    "text": "It's all done in an\nautomatic process. And then you laser cut\nall of the scaffold away, and you've got\nyour finish thing.",
    "start": "2322660",
    "end": "2328770"
  },
  {
    "text": "A sense of scale, this\nis super, super tiny. It's tedious to\nfold these by hand. And in this way, they\ncan mass produce them.",
    "start": "2328770",
    "end": "2336760"
  },
  {
    "text": "Here's what it looks like\nwhen you connect a battery. Either it will fold at 1\nHertz or at 30 Hertz, which",
    "start": "2336760",
    "end": "2344460"
  },
  {
    "text": "you can barely see, because\nit's a 30 Hertz video. So you get your robotic bee.",
    "start": "2344460",
    "end": "2351347"
  },
  {
    "text": "It's not yet controllable. It doesn't have a\nbattery attached, but it's extremely\nlightweight, and very powerful.",
    "start": "2351347",
    "end": "2356970"
  },
  {
    "text": "This is a 3D printed\nprototype they made first. And you can use it to\nmass produce your objects.",
    "start": "2356970",
    "end": "2364760"
  },
  {
    "text": "Essentially,\nautomatic procedure. And it's all by\nlayering up flat layers, and then getting it to\nfold into 3D things.",
    "start": "2364760",
    "end": "2372147"
  },
  {
    "text": "And so you could imagine\nsomething like this to execute some\ncomplicated foldings, although that's future work.",
    "start": "2372147",
    "end": "2379510"
  },
  {
    "text": "This is, in some sense, a\nfairly simple thing to build. And we're working on making\nmore complicated things.",
    "start": "2379510",
    "end": "2384760"
  },
  {
    "text": "So that was some\nrobotic folding for you.  Next question is, any\ncool open problems here?",
    "start": "2384760",
    "end": "2392280"
  },
  {
    "text": "So I have two related\nto rigid origami. ",
    "start": "2392280",
    "end": "2398890"
  },
  {
    "text": "One of them is, if I give\nyou a crease pattern, tell me whether it is rigidly\nfoldable at least a little bit",
    "start": "2398890",
    "end": "2406819"
  },
  {
    "text": "or to the first\norder or something. So I'll just give you something,\nlike this will fold rigidly.",
    "start": "2406820",
    "end": "2412760"
  },
  {
    "text": "I want to say yes or\nno, does this fold? Seems like a pretty\nnatural question. And indeed, if all the vertices\nare degree four like this,",
    "start": "2412760",
    "end": "2419370"
  },
  {
    "text": "only four four edges\ncoming together, we can solve it efficiently. But given a more\ncomplicated general pattern,",
    "start": "2419370",
    "end": "2427200"
  },
  {
    "text": "characterize when\nthat is possible. We don't have a good\nalgorithm for that. I don't know if there is one.",
    "start": "2427200",
    "end": "2432950"
  },
  {
    "text": " The more general question is--\nthat's kind of an analysis",
    "start": "2432950",
    "end": "2438309"
  },
  {
    "text": "question. The design problem is, I want\nto design cool rigid origami. And we've seen bunches of\nexamples of rigid origami.",
    "start": "2438310",
    "end": "2446460"
  },
  {
    "text": "Here's a new one\nI wanted to show. The Hexa Pot. I believe this is rigid origami,\nas a kick starter on this.",
    "start": "2446460",
    "end": "2454600"
  },
  {
    "text": "And here is one of them. It folds nice and flat. And it has this 3D state,\nwhere you can boil water",
    "start": "2454600",
    "end": "2462330"
  },
  {
    "text": "on your camping stove. And they have a video\nof cooking noodles. It cooks noodles. It cooks pasta.",
    "start": "2462330",
    "end": "2468190"
  },
  {
    "text": "It cooks sausages. Anything you could imagine,\nyou can cook in here, as long as it fits\nin this space.",
    "start": "2468190",
    "end": "2474210"
  },
  {
    "text": "That's waterproof, obviously. We saw the telescope lens.",
    "start": "2474210",
    "end": "2480300"
  },
  {
    "text": "We saw this origami stent. How are these designed? Inspiration. Some human had a cool\nidea, tried it out,",
    "start": "2480300",
    "end": "2487390"
  },
  {
    "text": "proved that it actually\nfolded rigidly. Great. But can we come\nup with algorithms",
    "start": "2487390",
    "end": "2493829"
  },
  {
    "text": "to design things like this? Could you close the door?",
    "start": "2493830",
    "end": "2499140"
  },
  {
    "text": "Here's another just\none-off example. You may have seen these. These are called shopping\nbags, and they're usually",
    "start": "2499140",
    "end": "2505750"
  },
  {
    "text": "paper shopping bags. They're usually folded\nalong this crease pattern. It turns out that's not possible\nif all the panels are rigid.",
    "start": "2505750",
    "end": "2512830"
  },
  {
    "text": "This thing cannot fold at all. It's rigid, if the\npanels are made of steel.",
    "start": "2512830",
    "end": "2518001"
  },
  {
    "text": "And it's actually\nfairly easy to see that, if you look\nat this corner, these are four 90-degree\nangles coming together.",
    "start": "2518001",
    "end": "2524730"
  },
  {
    "text": "And if you look at four\n90-degree angles, two straight lines, like in a map,\nyou could fold one of them.",
    "start": "2524730",
    "end": "2531109"
  },
  {
    "text": "But only when you get\nall the way to 180 can you fold the other way. So right now, this guy\nis folded 90 degrees.",
    "start": "2531110",
    "end": "2537260"
  },
  {
    "text": "This can't fold at all, which\nmeans this fold angle is zero. And we know from\nTomohiro's lecture",
    "start": "2537260",
    "end": "2542870"
  },
  {
    "text": "that a degree four vertex\nhas one degree of freedom. So this if this is zero,\nthey all have to be zero.",
    "start": "2542870",
    "end": "2548299"
  },
  {
    "text": "And so the whole thing is rigid. Of course, if you\nadd extra creases,",
    "start": "2548300",
    "end": "2553420"
  },
  {
    "text": "this is done with that\nDevin Balkcom and Marty. So the same robotic folding guy.",
    "start": "2553420",
    "end": "2559290"
  },
  {
    "text": "Here's a visual proof\nof what goes wrong. You end up with a tear here. You can fold everything\nexcept one of those guys.",
    "start": "2559290",
    "end": "2567970"
  },
  {
    "text": "If you add extra\ncreases, you can kind of roll the lip of the\nbag down, and repeat",
    "start": "2567970",
    "end": "2573369"
  },
  {
    "text": "that until it's really short. And then once it's below\nthis height of one to two,",
    "start": "2573370",
    "end": "2580300"
  },
  {
    "text": "you can just crush it\nlike a garment box. And so you can do that.",
    "start": "2580300",
    "end": "2585320"
  },
  {
    "text": "You can actually\nfold this thing flat, and you can undo\nit and unfold it. An interesting open question\nis, these paper bags",
    "start": "2585320",
    "end": "2591510"
  },
  {
    "text": "are manufactured in\ntheir flat state. If I give you a flat\npaper bag, can you open it by adding creases?",
    "start": "2591510",
    "end": "2597810"
  },
  {
    "text": "I don't think we know\nthe answer to that. But we conjecture\nthe answer is yes. There are a bunch of\ndifferent designs out there.",
    "start": "2597810",
    "end": "2604650"
  },
  {
    "text": "This is done with--\nit's hard to read. But this is with\n[INAUDIBLE] in particular, who did the origami stent.",
    "start": "2604650",
    "end": "2611270"
  },
  {
    "text": "It's kind of a twisting box. Works up to a cubicle box.",
    "start": "2611270",
    "end": "2616590"
  },
  {
    "text": "And he just had a paper\nwith Woo this year on a more practical folding.",
    "start": "2616590",
    "end": "2622030"
  },
  {
    "text": "So when we roll the lip, we get\na lot of layers of material. This one works for\nfairly a tall bag. I forget exactly heart how tall.",
    "start": "2622030",
    "end": "2628589"
  },
  {
    "text": "Maybe three to one. And it has a fairly\nsmall number of layers. They even built one\nout of sheet metal",
    "start": "2628590",
    "end": "2635300"
  },
  {
    "text": "to prove this is a practical\nway to make rigid shopping bags. ",
    "start": "2635300",
    "end": "2641200"
  },
  {
    "text": "And the last question\nhere is, could you make one crease\npattern that folds into two different shapes?",
    "start": "2641200",
    "end": "2647510"
  },
  {
    "text": "Could you make an\nOrigamizer that at one point will make one shape? And then you super-impose\nanother crease pattern,",
    "start": "2647510",
    "end": "2652740"
  },
  {
    "text": "ideally sharing lots of creases,\nto make a different shape? And the answer is,\nwatch the next lecture.",
    "start": "2652740",
    "end": "2660520"
  },
  {
    "text": "Yes, we will be talking about\nuniversal hinge patterns, where you take a different\nsubset of the creases. You can fold anything, provided\nit's made up of little cubes.",
    "start": "2660520",
    "end": "2668109"
  },
  {
    "text": "And that's one answer\nto that question. Any other questions? Yes. AUDIENCE: Erik, going back\nto the rigid foldability,",
    "start": "2668110",
    "end": "2675439"
  },
  {
    "text": "you do understand\nrigid foldability has a single vertex, right? It's just a global [INAUDIBLE]. PROFESSOR: Right.",
    "start": "2675439",
    "end": "2680448"
  },
  {
    "text": "Rigid foldability of the\nsingle vertex is easy. Almost anything is\nrigidly foldable.",
    "start": "2680448",
    "end": "2687869"
  },
  {
    "text": "But yeah, its general\ncrease pattern [INAUDIBLE]. AUDIENCE: So it's very similar\nto the flat foldability",
    "start": "2687870",
    "end": "2693349"
  },
  {
    "text": "[INAUDIBLE]. PROFESSOR: Yeah, it's\nlike flat foldability, except for flat\nfoldability, we know",
    "start": "2693350",
    "end": "2699829"
  },
  {
    "text": "that testing a single\nvertex is easy. Testing a whole crease\npattern is NP hard.",
    "start": "2699830",
    "end": "2705010"
  },
  {
    "text": "What'd we'd like to prove\nis either NP hardness, or get an algorithm\nfor rigid foldability.",
    "start": "2705010",
    "end": "2710240"
  },
  {
    "text": "AUDIENCE: There's no\nsuch result [INAUDIBLE]. PROFESSOR: Right,\nthere's no such result for rigid foldability yet.",
    "start": "2710240",
    "end": "2717200"
  },
  {
    "text": "Other questions? All right. Enjoy folding.",
    "start": "2717200",
    "end": "2722430"
  },
  {
    "start": "2722430",
    "end": "2734473"
  }
]