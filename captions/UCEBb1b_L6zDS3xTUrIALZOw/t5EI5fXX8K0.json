[
  {
    "start": "0",
    "end": "385000"
  },
  {
    "text": " [MUSIC PLAYING]",
    "start": "0",
    "end": "16401"
  },
  {
    "text": "PROFESSOR: Well, let's see. What we did so far was\na lot of fun, was",
    "start": "16401",
    "end": "21800"
  },
  {
    "text": "it useful for anything?  I suppose the answer\nis going to be yes.",
    "start": "21800",
    "end": "29380"
  },
  {
    "text": "If these metacircular\ninterpreters are a valuable thing to play with.",
    "start": "29380",
    "end": "35180"
  },
  {
    "text": " Well, there have been times I\nspend 50% of my time, over a",
    "start": "35180",
    "end": "41300"
  },
  {
    "text": "year, trying various design\nalternatives by experimenting",
    "start": "41300",
    "end": "46590"
  },
  {
    "text": "with them with metacircular\ninterpreters-- metacircular interpreters like\nthe sort you just saw.",
    "start": "46590",
    "end": "52570"
  },
  {
    "text": "Metacircular is because they\nare defined in terms of themselves in such a way that\nthe language they interpret",
    "start": "52570",
    "end": "58830"
  },
  {
    "text": "contains itself. Such interpreters are a\nconvenient medium for",
    "start": "58830",
    "end": "64080"
  },
  {
    "text": "exploring language issues. If you want to try adding a new\nfeature, it's sort of a",
    "start": "64080",
    "end": "71010"
  },
  {
    "text": "snap, it's easy, you just do\nit and see what happens. You play with that language for\na while you say, gee, I'm",
    "start": "71010",
    "end": "77710"
  },
  {
    "text": "didn't like that, you\nthrow it away. Or you might want to see what\nthe difference is if you'd",
    "start": "77710",
    "end": "84640"
  },
  {
    "text": "make a slight difference in the\nbinding strategy, or some",
    "start": "84640",
    "end": "90080"
  },
  {
    "text": "more complicated things\nthat might occur. In fact, these metacircular\ninterpreters are an excellent",
    "start": "90080",
    "end": "96810"
  },
  {
    "text": "medium for people exchanging\nideas about language design,",
    "start": "96810",
    "end": "104030"
  },
  {
    "text": "because they're pretty easy to\nunderstand, and they're short, and compact, and simple.",
    "start": "104030",
    "end": "109690"
  },
  {
    "text": "If I have some idea that I want\nsomebody to criticize like say, Dan Friedman at\nIndiana, I'd write a little",
    "start": "109690",
    "end": "120770"
  },
  {
    "text": "metacircular interpreter and\nsend him some network mail with this interpreter in it. He could whip it up on his\nmachine and play with it and",
    "start": "120770",
    "end": "127899"
  },
  {
    "text": "say, that's no good. And then send it back to me and\nsay, well, why don't you",
    "start": "127900",
    "end": "133706"
  },
  {
    "text": "try this one, it's\na little better. So I want to show you some\nof that technology.",
    "start": "133706",
    "end": "140160"
  },
  {
    "text": "See, because, really, it's the\nessential, simple technology for getting started in designing\nyour own languages",
    "start": "140160",
    "end": "147760"
  },
  {
    "text": "for particular purposes. Let's start by adding a very\nsimple feature to a Lisp.",
    "start": "147760",
    "end": "154209"
  },
  {
    "start": "154210",
    "end": "160640"
  },
  {
    "text": "Now, one thing I want\nto tell you about is features, before I start. ",
    "start": "160640",
    "end": "169560"
  },
  {
    "text": "There are many languages that\nhave made a mess of themselves by adding huge numbers\nof features.",
    "start": "169560",
    "end": "176620"
  },
  {
    "text": "Computer scientists have a joke\nabout bugs that transform it to features all the time.",
    "start": "176620",
    "end": "182519"
  },
  {
    "text": " But I like to think of it is\nthat many systems suffer from",
    "start": "182520",
    "end": "190120"
  },
  {
    "text": "what's called creeping\nfeaturism. Which is that George has a pet\nfeature he'd like in the",
    "start": "190120",
    "end": "197740"
  },
  {
    "text": "system, so he adds it. And then Harry says, gee, this\nsystem is no longer what",
    "start": "197740",
    "end": "203480"
  },
  {
    "text": "exactly I like, so I'm going\nto add my favorite feature. And then Jim adds his\nfavorite feature.",
    "start": "203480",
    "end": "210710"
  },
  {
    "text": "And, after a while, the thing\nhas a manual 500 pages long that no one can understand.",
    "start": "210710",
    "end": "217790"
  },
  {
    "text": "And sometimes it's the same\nperson who writes all of these features and produces this\nterribly complicated thing.",
    "start": "217790",
    "end": "224830"
  },
  {
    "text": "In some cases, like editors,\nit's sort of reasonable to have lots of features, because\nthere are a lot of things you",
    "start": "224830",
    "end": "231940"
  },
  {
    "text": "want to be able to do and\nmany of them arbitrary. But in computer languages, I\nthink it's a disaster to have",
    "start": "231940",
    "end": "240440"
  },
  {
    "text": "too much stuff in them.  The other alternative you get\ninto is something called",
    "start": "240440",
    "end": "246860"
  },
  {
    "text": "feeping creaturism, which is\nwhere you have a box which has",
    "start": "246860",
    "end": "252300"
  },
  {
    "text": "a display, a fancy display, and\na mouse, and there is all",
    "start": "252300",
    "end": "257370"
  },
  {
    "text": "sorts of complexity associated\nwith all this fancy IO. And your computer language\nbecomes a dismal, little, tiny",
    "start": "257370",
    "end": "264430"
  },
  {
    "text": "thing that barely works because\nof all the swapping, and disk twitching, and so on,\ncaused by your Windows system.",
    "start": "264430",
    "end": "270080"
  },
  {
    "text": "And every time you go near the\ncomputer, the mouse process wakes up and says, gee do you\nhave something for me to do,",
    "start": "270080",
    "end": "275910"
  },
  {
    "text": "and then it goes\nback to sleep. And if you accidentally push\nmouse with you elbow, a big puff of smoke comes out\nof your computer",
    "start": "275910",
    "end": "281600"
  },
  {
    "text": "and things like that. So two ways to disastrously\ndestroy a system by adding features.",
    "start": "281600",
    "end": "287500"
  },
  {
    "text": "But try right now to add a\nlittle, simple feature.  This actually is a good\none, and in fact,",
    "start": "287500",
    "end": "294349"
  },
  {
    "text": "real Lisps have it. As you've seen, there are\nprocedures like plus and times",
    "start": "294350",
    "end": "303420"
  },
  {
    "text": "that take any number\nof arguments. So we can write things like the\nsum of the product of a",
    "start": "303420",
    "end": "309440"
  },
  {
    "text": "and x and x, and the product\nof b and x and c.",
    "start": "309440",
    "end": "317540"
  },
  {
    "text": "As you can see here, addition\ntakes three arguments or two arguments, multiplication takes\ntwo arguments or three",
    "start": "317540",
    "end": "324229"
  },
  {
    "text": "arguments, taking numbers of\narguments all of which are to be treated in the same way.",
    "start": "324230",
    "end": "330000"
  },
  {
    "text": "This is a valuable thing, indefinite numbers of arguments. Yet the particular Lisp system\nthat I showed you is one where",
    "start": "330000",
    "end": "340460"
  },
  {
    "text": "the numbers of arguments is\nfixed, because I had to match the arguments against the\nformal parameters in the",
    "start": "340460",
    "end": "345910"
  },
  {
    "text": "binder, where there's\na pairup.  Well, I'd like to be able to\ndefine new procedures like",
    "start": "345910",
    "end": "353460"
  },
  {
    "text": "this that can have any\nnumber of arguments.",
    "start": "353460",
    "end": "358590"
  },
  {
    "text": "Well there's several parts\nto this problem. The first part is coming\nup with the syntactic",
    "start": "358590",
    "end": "363870"
  },
  {
    "text": "specification, some way of\nnotating the additional",
    "start": "363870",
    "end": "370620"
  },
  {
    "text": "arguments, of which you don't\nknow how many there are. And then there's the other\nthing, which is once we've",
    "start": "370620",
    "end": "377980"
  },
  {
    "text": "notated it, how are we going to\ninterpret that notation so as to do the right thing,\nwhatever the right thing is?",
    "start": "377980",
    "end": "386980"
  },
  {
    "start": "385000",
    "end": "800000"
  },
  {
    "text": "So let's consider an example\nof a sort of thing we might want to be able to do. ",
    "start": "386980",
    "end": "393070"
  },
  {
    "text": "So an example might be, that\nI might want to be able to define a procedure which is a\nprocedure of one required",
    "start": "393070",
    "end": "400490"
  },
  {
    "text": "argument x and a bunch of\narguments, I don't know how",
    "start": "400490",
    "end": "405819"
  },
  {
    "text": "many there are, called y. So x is required, and there are\nmany y's, many argument--",
    "start": "405820",
    "end": "420725"
  },
  {
    "text": " y will be the list of them.",
    "start": "420725",
    "end": "425990"
  },
  {
    "start": "425990",
    "end": "434479"
  },
  {
    "text": "Now, with such a thing, we might\nbe able to say something like, map--",
    "start": "434480",
    "end": "440720"
  },
  {
    "text": "I'm going to do something\nto every one-- of that procedure of one\nargument u, which multiplies x",
    "start": "440720",
    "end": "450055"
  },
  {
    "text": "by u, and we'll apply\nthat to y.",
    "start": "450055",
    "end": "456889"
  },
  {
    "text": "I've used a dot here to indicate\nthat the thing after this is a list of all the\nrest of the arguments.",
    "start": "456890",
    "end": "466300"
  },
  {
    "text": "I'm making a syntactic\nspecification. ",
    "start": "466300",
    "end": "473320"
  },
  {
    "text": "Now, what this depends upon, the\nreason why this is sort of a reasonable thing to do, is\nbecause this happens to be a",
    "start": "473320",
    "end": "481440"
  },
  {
    "text": "syntax that's used in\nthe Lisp reader for representing conses.",
    "start": "481440",
    "end": "488631"
  },
  {
    "text": "We've never introduced\nthat before. You may have seen when playing\nwith the system that if you",
    "start": "488631",
    "end": "493680"
  },
  {
    "text": "cons two things together, you\nget the first, space, dot, the second, space--",
    "start": "493680",
    "end": "499800"
  },
  {
    "text": "the first, space, dot, space,\nthe second with parentheses around the whole thing.",
    "start": "499800",
    "end": "506980"
  },
  {
    "text": "So that, for example, this x dot\ny corresponds to a pair,",
    "start": "506980",
    "end": "516349"
  },
  {
    "text": "which has got an x in\nit and a y in it.",
    "start": "516350",
    "end": "521870"
  },
  {
    "text": "The other notations that you've\nseen so far are things like a procedure of arguments x\nand y and z which do things,",
    "start": "521870",
    "end": "535720"
  },
  {
    "text": "and that looks like-- ",
    "start": "535720",
    "end": "542000"
  },
  {
    "text": "Just looking at the bound\nvariable list, it looks like this, x, y, z, and\nthe empty thing.",
    "start": "542000",
    "end": "558279"
  },
  {
    "text": "If I have a list of arguments I\nwish to match this against, supposing, I have a list of\narguments one, two, three, I",
    "start": "558280",
    "end": "566110"
  },
  {
    "text": "want to match these against. So\nI might have here a list of",
    "start": "566110",
    "end": "576300"
  },
  {
    "text": "three things, one, two, three.",
    "start": "576300",
    "end": "586380"
  },
  {
    "text": " And I want to match x, y, z\nagainst one, two, three.",
    "start": "586380",
    "end": "594220"
  },
  {
    "text": "Well, it's clear that the one\nmatches the x, because I can just sort of follow the\nstructure, and the two matches",
    "start": "594220",
    "end": "600130"
  },
  {
    "text": "the y, and the three\nmatches the z.",
    "start": "600130",
    "end": "605480"
  },
  {
    "text": "But now, supposing I were to\ncompare this x dot y-- this is x dot y--",
    "start": "605480",
    "end": "612460"
  },
  {
    "text": "supposing I compare that with\na list of three arguments, one, two, three.",
    "start": "612460",
    "end": "618510"
  },
  {
    "text": "Let's look at that again. ",
    "start": "618510",
    "end": "628000"
  },
  {
    "text": "One, two, three-- Well, I can walk along here and\nsay, oh yes, x matches the",
    "start": "628000",
    "end": "634970"
  },
  {
    "text": "one, the y matches the list,\nwhich is two and three.",
    "start": "634970",
    "end": "643740"
  },
  {
    "text": "So the notation I'm choosing\nhere is one that's very natural for Lisp system.",
    "start": "643740",
    "end": "650160"
  },
  {
    "text": " But I'm going to choose this as\na notation for representing a bunch of arguments.",
    "start": "650160",
    "end": "656040"
  },
  {
    "text": " Now, there's an alternative\npossibility. If I don't want to take one\nspecial out, or two special",
    "start": "656040",
    "end": "663560"
  },
  {
    "text": "ones out or something like that,\nif I don't want to do that, if I want to talk about\njust the list of all the",
    "start": "663560",
    "end": "671420"
  },
  {
    "text": "arguments like in addition, well\nthen the argument list",
    "start": "671420",
    "end": "676950"
  },
  {
    "text": "I'm going to choose to be that\nprocedure of all the arguments x which does something with x.",
    "start": "676950",
    "end": "685140"
  },
  {
    "text": "And which, for example, if I\ntake the procedure, which takes all the arguments x and\nreturned the list of them,",
    "start": "685140",
    "end": "695040"
  },
  {
    "text": "that's list. That's the\nprocedure list.",
    "start": "695040",
    "end": "705850"
  },
  {
    "text": "How does this work? Well, indeed what I had as the\nbound variable list in this case, whatever it is,\nis being matched",
    "start": "705850",
    "end": "712450"
  },
  {
    "text": "against a list of arguments. This symbol now is all\nof the arguments. ",
    "start": "712450",
    "end": "721490"
  },
  {
    "text": "And so this is the choice I'm\nmaking for a particular syntactic specification, for the\ndescription of procedures",
    "start": "721490",
    "end": "728060"
  },
  {
    "text": "which take indefinite numbers\nof arguments. ",
    "start": "728060",
    "end": "733190"
  },
  {
    "text": "There are two cases of it,\nthis one and this one.",
    "start": "733190",
    "end": "738420"
  },
  {
    "text": "When you make syntactic\nspecifications, it's important that it's unambiguous, that\nneither of these can be",
    "start": "738420",
    "end": "746410"
  },
  {
    "text": "confused with a representation\nwe already have, this one. ",
    "start": "746410",
    "end": "753610"
  },
  {
    "text": "I can always tell whether\nI have a fixed number of explicitly named arguments\nmade by these formal",
    "start": "753610",
    "end": "761180"
  },
  {
    "text": "parameters, or a fixed number\nof named formal parameters followed by a thing which picks\nup all the rest of them,",
    "start": "761180",
    "end": "769240"
  },
  {
    "text": "or a list of all the arguments\nwhich will be matched against",
    "start": "769240",
    "end": "774620"
  },
  {
    "text": "this particular formal parameter\ncalled x, because these are syntactically\ndistinguishable. ",
    "start": "774620",
    "end": "782250"
  },
  {
    "text": "Many languages make terrible\nerrors in that form where whole segments of interpretation\nare cut off,",
    "start": "782250",
    "end": "788340"
  },
  {
    "text": "because there are syntactic\nambiguities in the language.",
    "start": "788340",
    "end": "794560"
  },
  {
    "text": "They are the traditional\nproblems with ALGOL like languages having to do with\nthe nesting of ifs in the",
    "start": "794560",
    "end": "802810"
  },
  {
    "start": "800000",
    "end": "965000"
  },
  {
    "text": "predicate part. In any case, now, so I've told\nyou about the syntax, now,",
    "start": "802810",
    "end": "810510"
  },
  {
    "text": "what are we going to do about\nthe semantics of this? How do we interpret it?",
    "start": "810510",
    "end": "816590"
  },
  {
    "text": "Well this is just super easy. I'm going to modify\nthe metacircular interpreter to do it.",
    "start": "816590",
    "end": "823396"
  },
  {
    "text": "And that's a one liner. There it is. I'm changing the way\nyou pair things up.",
    "start": "823396",
    "end": "829560"
  },
  {
    "start": "829560",
    "end": "836390"
  },
  {
    "text": "Here's the procedure that\npairs the variables, the",
    "start": "836390",
    "end": "846070"
  },
  {
    "text": "formal parameters, with the\narguments that were passed",
    "start": "846070",
    "end": "852090"
  },
  {
    "text": "from the last description of the\nmetacircular interpreter. ",
    "start": "852090",
    "end": "858960"
  },
  {
    "text": "And here's some things\nthat are the same as they were before. In other words, if the list of\nvariables is empty, then if",
    "start": "858960",
    "end": "865880"
  },
  {
    "text": "the list of values is empty,\nthen I have an empty list.",
    "start": "865880",
    "end": "871050"
  },
  {
    "text": "Otherwise, I have too many\narguments, that is, if I have",
    "start": "871050",
    "end": "876890"
  },
  {
    "text": "empty variables but\nnot empty values. If I have empty values, but the\nvariables are not empty, I",
    "start": "876890",
    "end": "887713"
  },
  {
    "text": "have too few arguments. The variables are a symbol-- ",
    "start": "887713",
    "end": "895620"
  },
  {
    "text": "interesting case-- then, what I should do is say,\noh yes, this is the special",
    "start": "895620",
    "end": "904040"
  },
  {
    "text": "case that I have a\nsymbolic tail.  I have here a thing just like\nwe looked over here.",
    "start": "904040",
    "end": "914900"
  },
  {
    "text": "This is a tail which\nis a symbol, y. It's not a nil.",
    "start": "914900",
    "end": "920730"
  },
  {
    "text": "It's not the empty list. Here's\na symbolic tail that is just the very beginning\nof the tail. There is nothing else.",
    "start": "920730",
    "end": "927790"
  },
  {
    "text": "In that case, I wish to match\nthat variable with all the",
    "start": "927790",
    "end": "936540"
  },
  {
    "text": "values and add that to the\npairing that I'm making.",
    "start": "936540",
    "end": "944500"
  },
  {
    "text": "Otherwise, I go through the\nnormal arrangement of making up the whole pairing. ",
    "start": "944500",
    "end": "952019"
  },
  {
    "text": "I suppose that's very simple. And that's all there is to it.",
    "start": "952020",
    "end": "957080"
  },
  {
    "text": "And now I'll answer\nsome questions. ",
    "start": "957080",
    "end": "962620"
  },
  {
    "text": "The first one-- Are there any questions? Yes? AUDIENCE: Could you explain\nthat third form?",
    "start": "962620",
    "end": "970450"
  },
  {
    "start": "965000",
    "end": "1100000"
  },
  {
    "text": "PROFESSOR: This one? Well, maybe we should look\nat the thing as a piece of list structure.",
    "start": "970450",
    "end": "978570"
  },
  {
    "text": "This is a procedure which\ncontains a lambda. ",
    "start": "978570",
    "end": "985970"
  },
  {
    "text": "I'm just looking at\nthe list structure which represents this.",
    "start": "985970",
    "end": "991089"
  },
  {
    "text": "Here's x. These are our symbols. ",
    "start": "991090",
    "end": "997410"
  },
  {
    "text": "And then the body is\nnothing but x. ",
    "start": "997410",
    "end": "1004840"
  },
  {
    "text": "If I were looking for the bound\nvariable list part of this procedure, I would go\nlooking at the CADR, and I'd",
    "start": "1004840",
    "end": "1012399"
  },
  {
    "text": "find a symbol. So the, naturally, which is\nthis pairup thing I just showed you, is going to be\nmatching a symbolic object",
    "start": "1012400",
    "end": "1021570"
  },
  {
    "text": "against a list of arguments\nthat were passed. And it will bind that symbol\nto the list of arguments.",
    "start": "1021570",
    "end": "1029558"
  },
  {
    "text": " In this case, if I'm looking\nfor it, the match will be",
    "start": "1029559",
    "end": "1038560"
  },
  {
    "text": "against this in the bound\nvariable list position. ",
    "start": "1038560",
    "end": "1044140"
  },
  {
    "text": "Now, if what this does is it\ngets a list of arguments and returns it, that's list. That's\nwhat the procedure is.",
    "start": "1044140",
    "end": "1051450"
  },
  {
    "text": " Oh well, thank you. Let's take a break.",
    "start": "1051450",
    "end": "1057830"
  },
  {
    "text": "[MUSIC PLAYING]",
    "start": "1057830",
    "end": "1100357"
  },
  {
    "start": "1100000",
    "end": "1395000"
  },
  {
    "text": "PROFESSOR: Well let's see. Now, I'm going to tell you\nabout a rather more substantial variation, one\nthat's a famous variation that",
    "start": "1100358",
    "end": "1112440"
  },
  {
    "text": "many early Lisps had.",
    "start": "1112440",
    "end": "1118250"
  },
  {
    "text": "It's called dynamic binding\nof variables. And we'll investigate a little\nbit about that right now.",
    "start": "1118250",
    "end": "1124680"
  },
  {
    "text": " I'm going to first introduce\nthis by showing you the sort",
    "start": "1124680",
    "end": "1129710"
  },
  {
    "text": "of thing that would make\nsomeone want this idea. I'm not going to tell what it is\nyet, I'm going to show you",
    "start": "1129710",
    "end": "1136679"
  },
  {
    "text": "why you might want it. Suppose, for example, we looked\nat the sum procedure",
    "start": "1136680",
    "end": "1142100"
  },
  {
    "text": "again for summing up\na bunch of things.",
    "start": "1142100",
    "end": "1148140"
  },
  {
    "text": "To be that procedure, of a term,\nlower bound, method of",
    "start": "1148140",
    "end": "1155860"
  },
  {
    "text": "computing the next index, and\nupper bound, such that, if a",
    "start": "1155860",
    "end": "1165559"
  },
  {
    "text": "is greater than b then the\nresult is 0, otherwise, it's",
    "start": "1165560",
    "end": "1174020"
  },
  {
    "text": "the sum, of the term, procedure,\napplied to a and",
    "start": "1174020",
    "end": "1180680"
  },
  {
    "text": "the result of adding up, terms,\nwith the next a being",
    "start": "1180680",
    "end": "1191925"
  },
  {
    "text": "the a, the next procedure passed\nalong, and the upper",
    "start": "1191925",
    "end": "1206970"
  },
  {
    "text": "bound being passed along. ",
    "start": "1206970",
    "end": "1214510"
  },
  {
    "text": "Blink, blink, blink--  Now, when I use this sum\nprocedure, I can use it, for",
    "start": "1214510",
    "end": "1223350"
  },
  {
    "text": "example, like this. We can define the sum of the\npowers to be, for example, sum",
    "start": "1223350",
    "end": "1238679"
  },
  {
    "text": "of a bunch of powers x to the\nn, to be that procedure of a, b, and n--",
    "start": "1238680",
    "end": "1245970"
  },
  {
    "text": "lower bound, the upper\nbound, and n-- which is sum, of lambda of x,\nthe procedure of one argument",
    "start": "1245970",
    "end": "1254530"
  },
  {
    "text": "x, which exponentiates x to\nthe n, with the a, the",
    "start": "1254530",
    "end": "1265720"
  },
  {
    "text": "incrementer, and b, being\npassed along.",
    "start": "1265720",
    "end": "1271440"
  },
  {
    "text": "So we're adding up x\nto n, given an x. x takes on values from a to\nb, incrementing by one.",
    "start": "1271440",
    "end": "1279740"
  },
  {
    "text": " I can also write the-- ",
    "start": "1279740",
    "end": "1287670"
  },
  {
    "text": "That's right. Product, excuse me. The product of a bunch\nof powers.",
    "start": "1287670",
    "end": "1293220"
  },
  {
    "text": " It's a strange name.",
    "start": "1293220",
    "end": "1300019"
  },
  {
    "text": "I'm going to leave it there. Weird-- ",
    "start": "1300020",
    "end": "1305760"
  },
  {
    "text": "I write up what I have.\nI'm sure that's right.",
    "start": "1305760",
    "end": "1310890"
  },
  {
    "text": "And if I want the product\nof a bunch of powers-- ",
    "start": "1310890",
    "end": "1318630"
  },
  {
    "text": "That was 12 brain cells,\nthat double-take. I can for example use the\nprocedure which is like sum,",
    "start": "1318630",
    "end": "1326890"
  },
  {
    "text": "which is for making products,\nbut it's similar to that, that you've seen before. There's a procedure of three\narguments again.",
    "start": "1326890",
    "end": "1336725"
  },
  {
    "text": "Which is the product of terms\nthat are constructed, or",
    "start": "1336725",
    "end": "1344080"
  },
  {
    "text": "factors in this case,\nconstructed from exponentiating x to the n,\nwhere I start with a, I",
    "start": "1344080",
    "end": "1355970"
  },
  {
    "text": "increment, and I go to b. ",
    "start": "1355970",
    "end": "1361530"
  },
  {
    "text": "Now, there's some sort of thing\nhere that should disturb",
    "start": "1361530",
    "end": "1368690"
  },
  {
    "text": "you immediately. These look the same. Why am I writing this\ncode so many times?",
    "start": "1368690",
    "end": "1376590"
  },
  {
    "text": "Here I am, in the same boat\nI've been in before. Wouldn't it be nice to make\nan abstraction here?",
    "start": "1376590",
    "end": "1383810"
  },
  {
    "text": "What's an example of a good\nabstraction to make? Well, I see some codes\nthat's identical. Here's one, and here's\nanother.",
    "start": "1383810",
    "end": "1391080"
  },
  {
    "text": " And so maybe I should be\nable to pull that out.",
    "start": "1391080",
    "end": "1397090"
  },
  {
    "start": "1395000",
    "end": "1450000"
  },
  {
    "text": "I should be able to say, oh\nyes, the sum of the powers could be written in terms\nof something called",
    "start": "1397090",
    "end": "1403350"
  },
  {
    "text": "the nth power procedure. Imagine somebody wanted to write\na slightly different",
    "start": "1403350",
    "end": "1408690"
  },
  {
    "text": "procedure that looks\nlike this. ",
    "start": "1408690",
    "end": "1417630"
  },
  {
    "text": "The sum powers to be a procedure\nof a, b, and n, as",
    "start": "1417630",
    "end": "1429300"
  },
  {
    "text": "the result of summing\nup the nth power. We're going to give a name to\nthat idea, for starting at a,",
    "start": "1429300",
    "end": "1439720"
  },
  {
    "text": "going by one, and ending at b. ",
    "start": "1439720",
    "end": "1446000"
  },
  {
    "text": "And similarly, I might want to\nwrite the product powers this",
    "start": "1446000",
    "end": "1452480"
  },
  {
    "start": "1450000",
    "end": "1620000"
  },
  {
    "text": "way, abstracting\nout this idea. I might want this.",
    "start": "1452480",
    "end": "1457520"
  },
  {
    "text": " Product powers, to be a\nprocedure of a, b, and n,",
    "start": "1457520",
    "end": "1475350"
  },
  {
    "text": "which is the product of the nth\npower operation on a with",
    "start": "1475350",
    "end": "1487539"
  },
  {
    "text": "the incrementation and b being\nmy arguments for the",
    "start": "1487540",
    "end": "1496380"
  },
  {
    "text": "analogous-thing product. And I'd like to be able to\ndefine, I'd like to be able to",
    "start": "1496380",
    "end": "1502840"
  },
  {
    "text": "define nth power-- I'll put it over here. ",
    "start": "1502840",
    "end": "1511215"
  },
  {
    "text": "I'll put it at the top. ",
    "start": "1511215",
    "end": "1525410"
  },
  {
    "text": "--to be, in fact, my procedure\nof one argument x which is the",
    "start": "1525410",
    "end": "1530630"
  },
  {
    "text": "result of exponentiating\nx to the n. But I have a problem.",
    "start": "1530630",
    "end": "1538640"
  },
  {
    "text": "My environment model, that is my\nmeans of interpretation for",
    "start": "1538640",
    "end": "1544160"
  },
  {
    "text": "the language that we've defined\nso far, does not give me a meaning for this n. ",
    "start": "1544160",
    "end": "1552520"
  },
  {
    "text": "Because, as you know, this n\nis free in this procedure.",
    "start": "1552520",
    "end": "1566410"
  },
  {
    "text": "The environment model tells us\nthat the meaning of a free variable is determined in the\nenvironment in which this",
    "start": "1566410",
    "end": "1573760"
  },
  {
    "text": "procedure is defined. In a way I have written it,\nassuming these things are defined on the blackboard as\nis, this is defined in the",
    "start": "1573760",
    "end": "1582830"
  },
  {
    "text": "global environment, where\nthere is no end. Therefore, n is unbound\nvariable.",
    "start": "1582830",
    "end": "1588720"
  },
  {
    "text": "But it's perfectly clear, to\nmost of us, that we would like it to be this n and this n.",
    "start": "1588720",
    "end": "1596220"
  },
  {
    "text": " On the other hand,\nit would be nice.",
    "start": "1596220",
    "end": "1602840"
  },
  {
    "text": "Certainly we've got to be\ncareful here of keeping this to be this, and this one\nover here, wherever it",
    "start": "1602840",
    "end": "1611005"
  },
  {
    "text": "is to be this one. ",
    "start": "1611005",
    "end": "1617390"
  },
  {
    "text": "Well, the desire to make\nthis work has led to a very famous bug.",
    "start": "1617390",
    "end": "1624040"
  },
  {
    "start": "1620000",
    "end": "1730000"
  },
  {
    "text": "I'll tell you about\nthe famous bug. Look at this slide.",
    "start": "1624040",
    "end": "1630660"
  },
  {
    "text": "This is an idea called\ndynamic binding. Where, instead of the free\nvariable being interpreted in",
    "start": "1630660",
    "end": "1637980"
  },
  {
    "text": "the environment of definition\nof a procedure, the free variable is interpreted as\nhaving its value in the",
    "start": "1637980",
    "end": "1645769"
  },
  {
    "text": "environment of the caller\nof the procedure. ",
    "start": "1645770",
    "end": "1651850"
  },
  {
    "text": "So what you have is a system\nwhere you search up the chain of callers of a particular\nprocedure, and, of course, in",
    "start": "1651850",
    "end": "1661990"
  },
  {
    "text": "this case, since nth power is\ncalled from inside product whatever it is-- I had to write our own sum\nwhich is the analogous",
    "start": "1661990",
    "end": "1668140"
  },
  {
    "text": "procedure-- and product is presumably called\nfrom product powers, as",
    "start": "1668140",
    "end": "1675300"
  },
  {
    "text": "you see over here, then since\nproduct powers bind with variable n , then nth powers\nn would be derived",
    "start": "1675300",
    "end": "1683220"
  },
  {
    "text": "through that chain.  Similarly, this n, the nth power\nin n in this case, would",
    "start": "1683220",
    "end": "1692600"
  },
  {
    "text": "come through nth power here\nbeing called from inside sum. You can see it being called\nfrom inside sum here.",
    "start": "1692600",
    "end": "1699730"
  },
  {
    "text": "It's called term here. But sum was called from inside\nof sum powers, which bound n.",
    "start": "1699730",
    "end": "1708930"
  },
  {
    "text": "Therefore, there would be an n\navailable for that n to get",
    "start": "1708930",
    "end": "1715245"
  },
  {
    "text": "it's value from.  What we have below this white\nline plus over here, is what's",
    "start": "1715245",
    "end": "1723630"
  },
  {
    "text": "called a dynamic binding\nview of the world. If that works, that's a\ndynamic binding view.",
    "start": "1723630",
    "end": "1730850"
  },
  {
    "start": "1730000",
    "end": "1895000"
  },
  {
    "text": "Now, let's take a look, for\nexample, at just what it takes to implement that.",
    "start": "1730850",
    "end": "1735990"
  },
  {
    "text": "That's real easy. In fact, the very first Lisps\nthat had any interpretations",
    "start": "1735990",
    "end": "1741400"
  },
  {
    "text": "of the free variables at all,\nhad dynamic binding interpretations for the\nfree variables.",
    "start": "1741400",
    "end": "1746490"
  },
  {
    "text": "APL has dynamic binding\ninterpretation for the free variables, not lexical\nor static binding.",
    "start": "1746490",
    "end": "1755220"
  },
  {
    "text": "So, of course, the change\nis in eval. And it's really in two places.",
    "start": "1755220",
    "end": "1762780"
  },
  {
    "text": "First of all, one thing we see,\nis that things become a little simpler.",
    "start": "1762780",
    "end": "1769010"
  },
  {
    "text": " If I don't have to have the\nenvironment be the environment",
    "start": "1769010",
    "end": "1774929"
  },
  {
    "text": "of definition for procedure, the\nprocedure need not capture the environment at the\ntime it's defined.",
    "start": "1774930",
    "end": "1782030"
  },
  {
    "text": "And so if we look here at this\nslide, we see that the clause",
    "start": "1782030",
    "end": "1787900"
  },
  {
    "text": "for a lambda expression, which\nis the way a procedure is defined, does not make up a\nthing which has a type closure",
    "start": "1787900",
    "end": "1797820"
  },
  {
    "text": "and a attached environment\nstructure. It's just the expression\nitself. And we'll decompose that some\nother way somewhere else.",
    "start": "1797820",
    "end": "1806440"
  },
  {
    "text": "The other thing we see is the\napplicator must be able to get",
    "start": "1806440",
    "end": "1812210"
  },
  {
    "text": "the environment of the caller. The caller of a procedure\nis right here.",
    "start": "1812210",
    "end": "1819560"
  },
  {
    "text": "If the expression we're\nevaluating is anpplication or a combination, then we're going\nto call a procedure",
    "start": "1819560",
    "end": "1825680"
  },
  {
    "text": "which is the value\nof the operator.  The environment of the caller\nis the environment we have",
    "start": "1825680",
    "end": "1833100"
  },
  {
    "text": "right here, available now. So all I have to do is pass\nthat environment to the",
    "start": "1833100",
    "end": "1838570"
  },
  {
    "text": "applicator, to apply. And if we look at that here,\nthe only change we have to",
    "start": "1838570",
    "end": "1844679"
  },
  {
    "text": "make is that fellow takes that\nenvironment and uses that",
    "start": "1844680",
    "end": "1849720"
  },
  {
    "text": "environment for the purpose of\nextending that environment",
    "start": "1849720",
    "end": "1857240"
  },
  {
    "text": "when abiding the formal\nparameters of the procedure to the arguments that were passed,\nnot an environment",
    "start": "1857240",
    "end": "1864559"
  },
  {
    "text": "that was captured in\nthe procedure. The reason why the first Lisps\nwere implemented this way, is",
    "start": "1864560",
    "end": "1869780"
  },
  {
    "text": "the sort of the obvious,\naccidental implementation. And, of course, as usual,\npeople got used to",
    "start": "1869780",
    "end": "1875990"
  },
  {
    "text": "it and liked it. And there were some people\nsaid, this is the way to do it.",
    "start": "1875990",
    "end": "1881590"
  },
  {
    "text": "Unfortunately that causes some\nserious problems. The most important, serious problem in\nusing dynamic binding is",
    "start": "1881590",
    "end": "1891240"
  },
  {
    "text": "there's a modularity crisis\nthat's involved it. If two people are working\ntogether on some big system,",
    "start": "1891240",
    "end": "1898370"
  },
  {
    "start": "1895000",
    "end": "2085000"
  },
  {
    "text": "then an important thing to want\nis that the names used by each one don't interfere with\nthe names of the other.",
    "start": "1898370",
    "end": "1904580"
  },
  {
    "text": " It's important that when I\ninvent some segment of code",
    "start": "1904580",
    "end": "1911060"
  },
  {
    "text": "that no one can make my code\nstop working by using my names that I use internal to my code,\ninternal to his code.",
    "start": "1911060",
    "end": "1919850"
  },
  {
    "text": "However, dynamic binding\nviolates that particular modularity constraint\nin a clear way.",
    "start": "1919850",
    "end": "1926670"
  },
  {
    "text": "Consider, for example, what\nhappens over here.",
    "start": "1926670",
    "end": "1932540"
  },
  {
    "text": "Suppose it was the case\nthat I decided to",
    "start": "1932540",
    "end": "1937590"
  },
  {
    "text": "change the word next. Supposing somebody is writing\nsum, and somebody else is",
    "start": "1937590",
    "end": "1945870"
  },
  {
    "text": "going to use sum. The writer of sum has a choice\nof what names he may use.",
    "start": "1945870",
    "end": "1953789"
  },
  {
    "text": "Let's say, I'm that writer. Well, by gosh, just happens I\ndidn't want to call this next.",
    "start": "1953790",
    "end": "1959300"
  },
  {
    "text": "I called it n. So all places where you see\nnext, I called it n.",
    "start": "1959300",
    "end": "1968140"
  },
  {
    "text": "Whoops. I changed nothing about the\nspecifications of this program, but this program\nstops working.",
    "start": "1968140",
    "end": "1976110"
  },
  {
    "text": "Not only that, unfortunately,\nthis one does too. Why do these programs\nstop working?",
    "start": "1976110",
    "end": "1982260"
  },
  {
    "text": "Well, it's sort of clear. Instead of chasing out the value\nof the n that occurs in",
    "start": "1982260",
    "end": "1989890"
  },
  {
    "text": "nth power over here or over\nhere, through the environment",
    "start": "1989890",
    "end": "1996450"
  },
  {
    "text": "of definition, where this one is\nalways linked to this one, if it was through the\nenvironment of definition,",
    "start": "1996450",
    "end": "2001659"
  },
  {
    "text": "because here is the\ndefinition. This lambda expression was\nexecuted in the environment",
    "start": "2001660",
    "end": "2007320"
  },
  {
    "text": "where that n was defined. If instead of doing that, I have\nto chase through the call",
    "start": "2007320",
    "end": "2013149"
  },
  {
    "text": "chain, then look what horrible\nthing happens. Well, this was called from\ninside sum as term, term a.",
    "start": "2013150",
    "end": "2024779"
  },
  {
    "text": "I'm looking for a value of n. Instead of getting this\none, I get that one.",
    "start": "2024780",
    "end": "2030700"
  },
  {
    "text": "So by changing the insides of\nthis program, this program stops working. ",
    "start": "2030700",
    "end": "2036770"
  },
  {
    "text": "So I no longer have\na quantifier, as I described before. ",
    "start": "2036770",
    "end": "2042700"
  },
  {
    "text": "The lambda symbol is supposed\nto be a quantifier. A thing which has the property\nthat the names that are bound",
    "start": "2042700",
    "end": "2049649"
  },
  {
    "text": "by it are unimportant, that I\ncan uniformly substitute any",
    "start": "2049650",
    "end": "2054739"
  },
  {
    "text": "names for these throughout this\nthing, so long as they don't occur in here, the new\nnames, and the meaning of this",
    "start": "2054739",
    "end": "2061699"
  },
  {
    "text": "expression should remain\nunchanged. I've just changed the meaning of\nthe expression by changing the one of the names.",
    "start": "2061699",
    "end": "2068690"
  },
  {
    "text": "So lambda is no longer\na well defined idea. It's a very serious problem.",
    "start": "2068690",
    "end": "2074549"
  },
  {
    "text": "So for that reason, I and my\nbuddies have given up this",
    "start": "2074550",
    "end": "2080850"
  },
  {
    "text": "particular kind of abstraction,\nwhich I would like to have, in favor of\na modularity principle.",
    "start": "2080850",
    "end": "2088089"
  },
  {
    "start": "2085000",
    "end": "2275000"
  },
  {
    "text": "But this is the kind of\nexperiment you can do if you want to play with these\ninterpreters.",
    "start": "2088090",
    "end": "2094530"
  },
  {
    "text": "You can try them out this way,\nthat way, and the other way. You see what makes\na nicer language.",
    "start": "2094530",
    "end": "2100070"
  },
  {
    "text": " So that's a very important\nthing to be able to do. Now, I would like to give you\na feeling for I think the",
    "start": "2100070",
    "end": "2107260"
  },
  {
    "text": "right thing to do is here. How are you going to I get\nthis kind of power in a",
    "start": "2107260",
    "end": "2114190"
  },
  {
    "text": "lexical system? And the answer is, of course,\nwhat I really want is a something that makes up for\nme an exponentiator for a",
    "start": "2114190",
    "end": "2121790"
  },
  {
    "text": "particular n. Given an n, it will make\nme an exponentiator. Oh, but that's easy too.",
    "start": "2121790",
    "end": "2128170"
  },
  {
    "text": "In other words, I can write\nmy program this way. ",
    "start": "2128170",
    "end": "2135450"
  },
  {
    "text": "I'm going to define a thing\ncalled PGEN, which is a",
    "start": "2135450",
    "end": "2140720"
  },
  {
    "text": "procedure of n which produces\nfor me an exponentiator. ",
    "start": "2140720",
    "end": "2150240"
  },
  {
    "text": "--x to the n. ",
    "start": "2150240",
    "end": "2156900"
  },
  {
    "text": "Given that I have that, then I\ncan capture the abstraction I wanted even better, because now\nit's encapsulated in a way",
    "start": "2156900",
    "end": "2164090"
  },
  {
    "text": "where I can't be destroyed\nby a change of names. I can define some powers to be a\nprocedure again of a, b, and",
    "start": "2164090",
    "end": "2180200"
  },
  {
    "text": "n which is the sum of the term\nfunction generated by using",
    "start": "2180200",
    "end": "2188070"
  },
  {
    "text": "this generator, PGEN, n, with\na, incrementer, and b.",
    "start": "2188070",
    "end": "2197590"
  },
  {
    "text": " And I can define the product of\npowers to be a procedure of",
    "start": "2197590",
    "end": "2217100"
  },
  {
    "text": "a, b, and n which is the product\nPGEN, n, with a,",
    "start": "2217100",
    "end": "2229010"
  },
  {
    "text": "increment, and b. Now, of course, this is a very\nsimple example where this",
    "start": "2229010",
    "end": "2234339"
  },
  {
    "text": "object that I'm trying to\nabstract over is small. But it could be a 100\nlines of code.",
    "start": "2234340",
    "end": "2240100"
  },
  {
    "text": "And so, the purpose\nof this is, of course, to make it simple. I'd give a name to it, it's\njust that here it's a",
    "start": "2240100",
    "end": "2245630"
  },
  {
    "text": "parameterized name. It's a name that depends upon,\nexplicitly, the lexically",
    "start": "2245630",
    "end": "2251460"
  },
  {
    "text": "apparent value of n. ",
    "start": "2251460",
    "end": "2257130"
  },
  {
    "text": "So you can think of this\nas a long name. And here, I've solved my problem\nby naming the term",
    "start": "2257130",
    "end": "2265150"
  },
  {
    "text": "generation procedures\nwithin an n in them. ",
    "start": "2265150",
    "end": "2275080"
  },
  {
    "start": "2275000",
    "end": "2385000"
  },
  {
    "text": "Are there any questions? Oh, yes, David. AUDIENCE: Is the only solution\nto the problem you raise to",
    "start": "2275080",
    "end": "2284819"
  },
  {
    "text": "create another procedure? In other words, can this only\nwork in languages that are capable of defining objects\nas procedures?",
    "start": "2284820",
    "end": "2292402"
  },
  {
    "text": "PROFESSOR: Oh, I see.  My solution to making this\nabstraction, when I didn't",
    "start": "2292402",
    "end": "2300530"
  },
  {
    "text": "want include the procedure\ninside the body, depends upon my ability to return a procedure\nor export one.",
    "start": "2300530",
    "end": "2308190"
  },
  {
    "text": "And that's right. If I don't have that, then I\njust don't have this ability",
    "start": "2308190",
    "end": "2313549"
  },
  {
    "text": "to make an abstraction in\na way where I don't have",
    "start": "2313550",
    "end": "2319490"
  },
  {
    "text": "possibilities of symbol\nconflicts that were unanticipated. That's right.",
    "start": "2319490",
    "end": "2325610"
  },
  {
    "text": "I consider being able to return\nthe procedural value",
    "start": "2325610",
    "end": "2332690"
  },
  {
    "text": "and, therefore, to sort of have\nfirst class procedures,",
    "start": "2332690",
    "end": "2337780"
  },
  {
    "text": "in general, as being essential\nto doing very good modular programming.",
    "start": "2337780",
    "end": "2343700"
  },
  {
    "text": "Now, indeed there are many other\nways to skin this cat. What you can do is take for each\nof the bad things that",
    "start": "2343700",
    "end": "2350500"
  },
  {
    "text": "you have to worry about, you\ncan make a special feature that covers that thing.",
    "start": "2350500",
    "end": "2355839"
  },
  {
    "text": "You can make a package system. You can make a module system\nas in Ada, et cetera.",
    "start": "2355840",
    "end": "2362240"
  },
  {
    "text": "And all of those work, or they\ncover little regions of it. The thing is that returning\nprocedures as values cover all",
    "start": "2362240",
    "end": "2368819"
  },
  {
    "text": "of those problems. And so it's\nthe simplest mechanism that",
    "start": "2368820",
    "end": "2375820"
  },
  {
    "text": "gives you the best modularity,\ngives you all of the known modularity mechanisms.",
    "start": "2375820",
    "end": "2385590"
  },
  {
    "text": "Well, I suppose it's time for\nthe next break, thank you. [MUSIC PLAYING]",
    "start": "2385590",
    "end": "2441871"
  },
  {
    "text": "PROFESSOR: Well, yesterday\nwhen you learned about streams, Hal worried to you\nabout the order of evaluation",
    "start": "2441871",
    "end": "2452109"
  },
  {
    "start": "2442000",
    "end": "2648000"
  },
  {
    "text": "and delayed arguments\nto procedures. The way we played with streams\nyesterday, it was the",
    "start": "2452110",
    "end": "2460619"
  },
  {
    "text": "responsibility of the caller and\nthe callee to both agree",
    "start": "2460620",
    "end": "2467170"
  },
  {
    "text": "that an argument was delayed,\nand the callee must force the",
    "start": "2467170",
    "end": "2472180"
  },
  {
    "text": "argument if it needs\nthe answer. So there had to be a lot of\nhand shaking between the",
    "start": "2472180",
    "end": "2478400"
  },
  {
    "text": "designer of a procedure and user\nof it over delayedness.",
    "start": "2478400",
    "end": "2486099"
  },
  {
    "text": "That turns out, of course, to\nbe a fairly bad thing, it works all right with streams.\nBut as a general thing, what",
    "start": "2486100",
    "end": "2493119"
  },
  {
    "text": "you want is an idea to have a\nlocus, a decision, a design decision in general, to have\na place where it's made,",
    "start": "2493120",
    "end": "2500580"
  },
  {
    "text": "explicitly, and notated\nin a clear way.",
    "start": "2500580",
    "end": "2505900"
  },
  {
    "text": "And so it's not a very good\nidea to have to have an agreement, between the person\nwho writes a procedure and the",
    "start": "2505900",
    "end": "2512670"
  },
  {
    "text": "person who calls it, about such\ndetails as, maybe, the arguments of evaluation, the\norder of evaluation.",
    "start": "2512670",
    "end": "2519500"
  },
  {
    "text": "Although, that's not so bad. I mean, we have other such\nagreements like, the input's a number.",
    "start": "2519500",
    "end": "2524540"
  },
  {
    "text": "But it would be nice if only one\nof these guys could take responsibility, completely.",
    "start": "2524540",
    "end": "2531020"
  },
  {
    "text": "Now this is not a new idea. ALGOL 60 had two different ways\nof calling a procedure.",
    "start": "2531020",
    "end": "2542020"
  },
  {
    "text": "The arguments could be passed\nby name or by value. And what that meant was that a\nname argument was delayed.",
    "start": "2542020",
    "end": "2551110"
  },
  {
    "text": "That when you passed an argument\nby name, that its value would only be obtained if\nyou accessed that argument.",
    "start": "2551110",
    "end": "2559620"
  },
  {
    "text": " So what I'd like to do now is\nshow you, first of all, a",
    "start": "2559620",
    "end": "2565870"
  },
  {
    "text": "little bit about, again, we're\ngoing to make a modification to a language. In this case, we're going\nto add a feature.",
    "start": "2565870",
    "end": "2573370"
  },
  {
    "text": "We're going to add the feature\nof, by name parameters, if you will, or delayed parameters.",
    "start": "2573370",
    "end": "2580430"
  },
  {
    "text": "Because, in fact, the default\nin our Lisp system is by the",
    "start": "2580430",
    "end": "2585579"
  },
  {
    "text": "value of a pointer. A pointer is copied, but\nthe data structure it points at is not.",
    "start": "2585580",
    "end": "2593410"
  },
  {
    "text": "But I'd like to, in fact, show\nyou is how you add name arguments as well.",
    "start": "2593410",
    "end": "2599990"
  },
  {
    "text": "Now again, why would we\nneed such a thing? Well supposing we wanted to\ninvent certain kinds of what",
    "start": "2599990",
    "end": "2606930"
  },
  {
    "text": "otherwise would be special\nforms, reserve words? But I'd rather not take\nup reserve words.",
    "start": "2606930",
    "end": "2612180"
  },
  {
    "text": "I want procedures that can\ndo things like if. If is special, or cond,\nor whatever it is.",
    "start": "2612180",
    "end": "2619420"
  },
  {
    "text": "It's the same thing. It's special in that it\ndetermines whether or not to evaluate the consequent or the\nalternative based on the value",
    "start": "2619420",
    "end": "2628360"
  },
  {
    "text": "of the predicate part\nof an expression. So taking the value of one thing\ndetermines whether or",
    "start": "2628360",
    "end": "2634230"
  },
  {
    "text": "not to do something else. Whereas all the procedures like\nplus, the ones that we",
    "start": "2634230",
    "end": "2640240"
  },
  {
    "text": "can define right now, evaluate\nall of their arguments before",
    "start": "2640240",
    "end": "2645900"
  },
  {
    "text": "application. So, for example, supposing I\nwish to be able to define",
    "start": "2645900",
    "end": "2651750"
  },
  {
    "text": "something like the reverse\nof if in terms of if.",
    "start": "2651750",
    "end": "2659452"
  },
  {
    "text": "Call it unless. ",
    "start": "2659452",
    "end": "2664890"
  },
  {
    "text": "We've a predicate, a\nconsequent, and an alternative. Now what I would like to sort of\nbe able to do is say-- oh,",
    "start": "2664890",
    "end": "2670994"
  },
  {
    "text": "I'll do it in terms of cond. Cond, if not the predicate,\nthen take the consequent,",
    "start": "2670995",
    "end": "2681660"
  },
  {
    "text": "otherwise, take the\nalternative. ",
    "start": "2681660",
    "end": "2691290"
  },
  {
    "text": "Now, what I'd like this to\nmean, is supposing I do something like this.",
    "start": "2691290",
    "end": "2696920"
  },
  {
    "text": "I'd like this unless say if\nequals one, 0, then the answer",
    "start": "2696920",
    "end": "2705859"
  },
  {
    "text": "is two, otherwise, the quotient\nof one and 0.",
    "start": "2705860",
    "end": "2711350"
  },
  {
    "text": " What I'd like that to mean is\nthe result of substituting",
    "start": "2711350",
    "end": "2720170"
  },
  {
    "text": "equal one, 0, and two, and\nthe quotient of one, 0 for p, c, and a.",
    "start": "2720170",
    "end": "2725579"
  },
  {
    "text": "I'd like that to mean, and this\nis funny, I'd like it to transform into or mean cond\nnot equal one, 0, then the",
    "start": "2725580",
    "end": "2740940"
  },
  {
    "text": "result is two, otherwise\nI want it to be the",
    "start": "2740940",
    "end": "2748910"
  },
  {
    "text": "quotient one and 0. ",
    "start": "2748910",
    "end": "2754480"
  },
  {
    "text": "Now, you know that if I\nwere to type this into Lisp, I'd get a two.",
    "start": "2754480",
    "end": "2759970"
  },
  {
    "text": "There's no problem with that. However, if I were to type this\ninto Lisp, because all",
    "start": "2759970",
    "end": "2765940"
  },
  {
    "text": "the arguments are evaluated\nbefore I start, then I'm going to get an error out of this. ",
    "start": "2765940",
    "end": "2773380"
  },
  {
    "text": "So that if the substitutions\nwork at all, of course, I would get the right answer. But here's a case where the\nsubstitutions don't work.",
    "start": "2773380",
    "end": "2780160"
  },
  {
    "text": " I don't get the wrong answer. I get no answer. I get an error.",
    "start": "2780160",
    "end": "2785920"
  },
  {
    "text": " Now, however, I'd like to be\nable to make my definition so",
    "start": "2785920",
    "end": "2791859"
  },
  {
    "text": "that this kind of thing works. What I want to do\nis say something special about c and a.",
    "start": "2791860",
    "end": "2799930"
  },
  {
    "text": "I want them to be delayed\nautomatically. ",
    "start": "2799930",
    "end": "2806300"
  },
  {
    "start": "2800000",
    "end": "2870000"
  },
  {
    "text": "I don't want them to be\nevaluated at the time I call.",
    "start": "2806300",
    "end": "2811520"
  },
  {
    "text": "So I'm going to make a\ndeclaration, and then I'm going to see how to implement\nsuch a declaration. But again, I want you to say\nto yourself, oh, this is an",
    "start": "2811520",
    "end": "2818870"
  },
  {
    "text": "interesting kluge he's\nadding in here. The piles of kluges make\na big complicated mess.",
    "start": "2818870",
    "end": "2825750"
  },
  {
    "text": "And is this going to\nfoul up something else that might occur. First of all, is it\nsyntactically unambiguous?",
    "start": "2825750",
    "end": "2833860"
  },
  {
    "text": "Well, it will be syntactically\nunambiguous with what we've seen so far. But what I'm going to do may,\nin fact, cause trouble.",
    "start": "2833860",
    "end": "2841670"
  },
  {
    "text": "It may be that the thing I had\nwill conflict with type declarations I might want to add\nin the future for giving",
    "start": "2841670",
    "end": "2848700"
  },
  {
    "text": "some system, some compiler or\nsomething, the ability to optimize given the\ntypes are known.",
    "start": "2848700",
    "end": "2854300"
  },
  {
    "text": "Or it might conflict with other\ntypes of declarations I might want to make about\nthe formal parameters.",
    "start": "2854300",
    "end": "2860569"
  },
  {
    "text": "So I'm not making a general\nmechanism here where I can add declarations. And I would like to be\nable to do that.",
    "start": "2860570",
    "end": "2866750"
  },
  {
    "text": "But I don't want to talk\nabout that right now. So here I'm going to do, I'm\ngoing to build a kluge.",
    "start": "2866750",
    "end": "2873680"
  },
  {
    "start": "2870000",
    "end": "2935000"
  },
  {
    "text": " So we're going to define\nunless of a predicate--",
    "start": "2873680",
    "end": "2888770"
  },
  {
    "text": "and I'm going to call\nthese by name--  the consequent, and name\nthe alternative.",
    "start": "2888770",
    "end": "2894930"
  },
  {
    "text": " Huh, huh--",
    "start": "2894930",
    "end": "2902670"
  },
  {
    "text": "I got caught in the corner. ",
    "start": "2902670",
    "end": "2911240"
  },
  {
    "text": "If not p then the result\nis c, else--",
    "start": "2911240",
    "end": "2917165"
  },
  {
    "text": " that's what I'd like. ",
    "start": "2917165",
    "end": "2924670"
  },
  {
    "text": "Where I can explicitly declare\ncertain of the parameters to be delayed, to be\ncomputed later.",
    "start": "2924670",
    "end": "2931650"
  },
  {
    "text": " Now, this is actually a very\ncomplicated modification to an",
    "start": "2931650",
    "end": "2937910"
  },
  {
    "start": "2935000",
    "end": "2988000"
  },
  {
    "text": "interpreter rather than\na simple one. The ones you saw before, dynamic\nbinding or adding",
    "start": "2937910",
    "end": "2945270"
  },
  {
    "text": "indefinite argument procedures, is relatively simple. But this one changes\na basic strategy.",
    "start": "2945270",
    "end": "2952120"
  },
  {
    "text": "The problem here is that our\ninterpreter, as written,",
    "start": "2952120",
    "end": "2958070"
  },
  {
    "text": "evaluates a combination by\nevaluating the procedure, the",
    "start": "2958070",
    "end": "2964420"
  },
  {
    "text": "operator producing the\nprocedure, and evaluating the operands producing the\narguments, and then doing",
    "start": "2964420",
    "end": "2971410"
  },
  {
    "text": "apply of the procedure\nto the arguments. However, here, I don't want to\nevaluate the operands to",
    "start": "2971410",
    "end": "2980540"
  },
  {
    "text": "produce the arguments until\nafter I examined the procedure to see what the procedure's\ndeclarations look like.",
    "start": "2980540",
    "end": "2986809"
  },
  {
    "text": " So let's look at that.",
    "start": "2986810",
    "end": "2992680"
  },
  {
    "start": "2988000",
    "end": "3247000"
  },
  {
    "text": "Here we have a changed\nevaluator. I'm starting with the simple\nlexical evaluator, not",
    "start": "2992680",
    "end": "3002109"
  },
  {
    "text": "dynamic, but we're going to have\nto do something sort of similar in some ways.",
    "start": "3002110",
    "end": "3009750"
  },
  {
    "text": "Because of the fact that,\nif I delay a procedure-- I'm sorry-- delay an argument\nto a procedure, I'm going to",
    "start": "3009750",
    "end": "3015790"
  },
  {
    "text": "have to attach and environment\nto it. Remember how Hal implemented\ndelay.",
    "start": "3015790",
    "end": "3023380"
  },
  {
    "text": "Hal implemented delay as being\na procedure of no arguments",
    "start": "3023380",
    "end": "3028650"
  },
  {
    "text": "which does some expression. That's what delay of\nthe expression is. ",
    "start": "3028650",
    "end": "3035369"
  },
  {
    "text": "--of that expression.  This turned into something\nlike this.",
    "start": "3035370",
    "end": "3040950"
  },
  {
    "text": " Now, however, if I evaluate a\nlambda expression, I have to",
    "start": "3040950",
    "end": "3047760"
  },
  {
    "text": "capture the environment.  The reason why is because there\nare variables in there",
    "start": "3047760",
    "end": "3056920"
  },
  {
    "text": "who's meaning I wish to derive\nfrom the context where this was written. ",
    "start": "3056920",
    "end": "3064010"
  },
  {
    "text": "So that's why a lambda\ndoes the job. It's the right thing. And such that the forcing of a\ndelayed expression was same",
    "start": "3064010",
    "end": "3077070"
  },
  {
    "text": "thing as calling that\nwith no arguments. It's just the opposite\nof this.",
    "start": "3077070",
    "end": "3084100"
  },
  {
    "text": "Producing an environment of the\ncall which is, in fact, the environment where this was\ndefined with an extra frame in",
    "start": "3084100",
    "end": "3091713"
  },
  {
    "text": "it that's empty. I don't care about that. Well, if we go back to this\nslide, since it's the case, if",
    "start": "3091713",
    "end": "3102460"
  },
  {
    "text": "we look at this for a second,\neverything is the same as it was before except the case of\napplications or combinations.",
    "start": "3102460",
    "end": "3111980"
  },
  {
    "text": "And combinations are going\nto do two things. One, is I have to evaluate\nthe procedure--",
    "start": "3111980",
    "end": "3118010"
  },
  {
    "text": "forget the procedure-- by\nevaluating the operator. That's what you see\nright here. I have to make sure that that's\ncurrent, that is not a",
    "start": "3118010",
    "end": "3124990"
  },
  {
    "text": "delayed object, and evaluate\nthat to the point where it's forced now.",
    "start": "3124990",
    "end": "3130730"
  },
  {
    "text": "And then I have to somehow apply\nthat to the operands.",
    "start": "3130730",
    "end": "3138460"
  },
  {
    "text": "But I have to keep the\nenvironment, pass that environmental along. So some of those operands\nI may have to delay.",
    "start": "3138460",
    "end": "3143710"
  },
  {
    "text": "I may have to attach that\nenvironment to those operands.",
    "start": "3143710",
    "end": "3149302"
  },
  {
    "text": "This is a rather complicated\nthing happening here. Looking at that in apply. ",
    "start": "3149302",
    "end": "3156400"
  },
  {
    "text": "Apply, well it has a\nprimitive procedure thing just like before.",
    "start": "3156400",
    "end": "3162610"
  },
  {
    "text": "But the compound one is a\nlittle more interesting.  I have to evaluate the body,\njust as before, in an",
    "start": "3162610",
    "end": "3170920"
  },
  {
    "text": "environment which is the result\nof binding some formal",
    "start": "3170920",
    "end": "3176010"
  },
  {
    "text": "parameters to arguments\nin the environment. That's true.",
    "start": "3176010",
    "end": "3181530"
  },
  {
    "text": "The environment is the\none that comes from the procedure now. It's a lexical language,\nstatically bound.",
    "start": "3181530",
    "end": "3188040"
  },
  {
    "text": "However, one thing I have\nto do is strip off the declarations to get the names\nof the variables. That's what this guy\ndoes, vnames.",
    "start": "3188040",
    "end": "3195450"
  },
  {
    "text": "And the other thing I have\nto do is process these declarations, deciding which\nof these operands--",
    "start": "3195450",
    "end": "3201770"
  },
  {
    "text": "that's the operands now, as\nopposed to the arguments-- which of these operands to\nevaluate, and which of them",
    "start": "3201770",
    "end": "3208010"
  },
  {
    "text": "are to be encapsulated in\ndelays of some sort.",
    "start": "3208010",
    "end": "3213770"
  },
  {
    "text": " The other thing you see here is\nthat we got a primitive, a",
    "start": "3213770",
    "end": "3220720"
  },
  {
    "text": "primitive like plus, had better get at the real operands.",
    "start": "3220720",
    "end": "3225819"
  },
  {
    "text": "So here is a place where we're\ngoing to have to force them. And we're going to look at what\nevlist is going to have to do a bunch of forces.",
    "start": "3225820",
    "end": "3231339"
  },
  {
    "text": "So we have two different\nkinds of evlist now. We have evlist and gevlist.\nGevlist is going to wrap delays around some things and\nforce others, evaluate others.",
    "start": "3231340",
    "end": "3239869"
  },
  {
    "text": "And this guy's going to do\nsome forcing of things.",
    "start": "3239870",
    "end": "3247900"
  },
  {
    "start": "3247000",
    "end": "3367000"
  },
  {
    "text": "Just looking at this a little\nbit, this is a game you must play for yourself, you know. It's not something that you're\ngoing to see all possible",
    "start": "3247900",
    "end": "3254870"
  },
  {
    "text": "variations on an evaluator\ntalking to me. What you have to do is\ndo this for yourself.",
    "start": "3254870",
    "end": "3261410"
  },
  {
    "text": "And after you feel this, you\nplay this a bit, you get to see all the possible design\ndecisions and what they might",
    "start": "3261410",
    "end": "3266580"
  },
  {
    "text": "mean, and how they interact\nwith each other. So what languages might\nhave in them.",
    "start": "3266580",
    "end": "3273160"
  },
  {
    "text": "And what are some of the\nconsistent sets that make a legitimate language. Whereas what things are\ncomplicated kluges that are",
    "start": "3273160",
    "end": "3279135"
  },
  {
    "text": "just piles of junk. So evlist of course, over here,\njust as I said, is a",
    "start": "3279135",
    "end": "3285050"
  },
  {
    "text": "list of operands which are going\nto be undelayed after evaluation.",
    "start": "3285050",
    "end": "3290750"
  },
  {
    "text": "So these are going to\nbe forced, whatever that's going to mean.",
    "start": "3290750",
    "end": "3296050"
  },
  {
    "text": "And gevlist, which is\nthe next thing-- ",
    "start": "3296050",
    "end": "3301320"
  },
  {
    "text": "Thank you. What we see here, well there's\na couple of possibilities.",
    "start": "3301320",
    "end": "3309810"
  },
  {
    "text": "Either it's a normal, ordinary\nthing, a symbol sitting there like the predicate in the\nunless, and that's",
    "start": "3309810",
    "end": "3318020"
  },
  {
    "text": "what we have here. In which case, this is intended\nto be evaluated in applicative order.",
    "start": "3318020",
    "end": "3323339"
  },
  {
    "text": "And it's, essentially, just\nwhat we had before. It's mapping eval down the\nlist. In other words, I",
    "start": "3323340",
    "end": "3330400"
  },
  {
    "text": "evaluate the first expression\nand continue gevlisting the",
    "start": "3330400",
    "end": "3335690"
  },
  {
    "text": "CDR of the expression\nin the environment. However, it's possible that\nthis is a name parameter.",
    "start": "3335690",
    "end": "3343599"
  },
  {
    "text": "If it's a name parameter, I want\nto put a delay in which combines that expression, which\nI'm calling by name,",
    "start": "3343600",
    "end": "3353480"
  },
  {
    "text": "with the environment that's\navailable at this time and",
    "start": "3353480",
    "end": "3359250"
  },
  {
    "text": "passing that as the parameter. And this is part of the\nmapping process",
    "start": "3359250",
    "end": "3364350"
  },
  {
    "text": "that you see here.  The only other interesting\nplace in this",
    "start": "3364350",
    "end": "3372040"
  },
  {
    "start": "3367000",
    "end": "3396000"
  },
  {
    "text": "interpreter is cond. People tend to write this thing,\nand then they leave this one out.",
    "start": "3372040",
    "end": "3378550"
  },
  {
    "text": "There's a place where\nyou have to force. Conditionals have to know\nwhether or not the answer is",
    "start": "3378550",
    "end": "3385260"
  },
  {
    "text": "true or false. It's like a primitive. When you do a conditional,\nyou have to force.",
    "start": "3385260",
    "end": "3391890"
  },
  {
    "text": "Now, I'm not going to\nlook at any more of this in any detail. It isn't very exciting. And what's left is how\nyou make delays.",
    "start": "3391890",
    "end": "3398990"
  },
  {
    "start": "3396000",
    "end": "3433000"
  },
  {
    "text": "Well, delays are data structures\nwhich contain an expression, an environment,\nand a type on them.",
    "start": "3398990",
    "end": "3404839"
  },
  {
    "text": "And it says they're a thunk. That comes from ALGOL language,\nand it's claimed to",
    "start": "3404840",
    "end": "3410099"
  },
  {
    "text": "be the sound of something\nbeing pushed on a stack. I don't know. I was not an ALGOLician or an\nALGOLite or whatever, so I",
    "start": "3410100",
    "end": "3417829"
  },
  {
    "text": "don't know. But that's what was claimed. And undelay is something which\nwill recursively undelay",
    "start": "3417830",
    "end": "3423400"
  },
  {
    "text": "thunks until the thunk becomes\nsomething which isn't a thunk. This is the way you implement\na call by name",
    "start": "3423400",
    "end": "3429930"
  },
  {
    "text": "like thing in ALGOL. And that's about all there is.",
    "start": "3429930",
    "end": "3435210"
  },
  {
    "start": "3433000",
    "end": "3599000"
  },
  {
    "text": "Are there any questions? ",
    "start": "3435210",
    "end": "3446839"
  },
  {
    "text": "AUDIENCE: Gerry? PROFESSOR: Yes, Vesko? AUDIENCE: I noticed you avoided\ncalling by name in the",
    "start": "3446840",
    "end": "3453900"
  },
  {
    "text": "primitive procedures,\nI was wondering what cause you have on that?",
    "start": "3453900",
    "end": "3459350"
  },
  {
    "text": "You never need that? PROFESSOR: Vesko is asking if\nit's ever reasonable to call a",
    "start": "3459350",
    "end": "3464720"
  },
  {
    "text": "primitive procedure by name? The answer is, yes. There's one particular case\nwhere it's reasonable,",
    "start": "3464720",
    "end": "3471680"
  },
  {
    "text": "actually two.  Construction of a data structure\nlike cons where",
    "start": "3471680",
    "end": "3479250"
  },
  {
    "text": "making an array if you\nhave arrays with any number of elements. It's unnecessary to evaluate\nthose arguments.",
    "start": "3479250",
    "end": "3487440"
  },
  {
    "text": "All you need is promises to\nevaluate those arguments if you look at them. If I cons together two things,\nthen I could cons together the",
    "start": "3487440",
    "end": "3497309"
  },
  {
    "text": "promises just as easily as I can\ncons together the things. And it's not even when\nI CAR CDR them that I",
    "start": "3497310",
    "end": "3503720"
  },
  {
    "text": "have to look at them. That just gets out\nthe promises and passes them to somebody. That's why the lambda calculus\ndefinition, the Alonzo Church",
    "start": "3503720",
    "end": "3511320"
  },
  {
    "text": "definition of CAR, CDR,\nand cons makes sense. It's because no work is done\nin CAR, CDR, and cons, it's",
    "start": "3511320",
    "end": "3516630"
  },
  {
    "text": "just shuffling data, it's just\nrouting, if you will. However, the things that do\nhave to look at data are",
    "start": "3516630",
    "end": "3522960"
  },
  {
    "text": "things like plus. Because they have a look at the\nbits that the numbers are made out of, unless they're\nlambda calculus",
    "start": "3522960",
    "end": "3530220"
  },
  {
    "text": "numbers which are funny. They have to look at the bits\nto be able to crunch them together to do the add.",
    "start": "3530220",
    "end": "3535880"
  },
  {
    "text": " So, in fact, data constructors,\ndata selectors,",
    "start": "3535880",
    "end": "3543280"
  },
  {
    "text": "and, in fact, things that\nside-effect data objects don't",
    "start": "3543280",
    "end": "3548500"
  },
  {
    "text": "need to do any forcing in the\nlaziest possible interpreters. ",
    "start": "3548500",
    "end": "3556460"
  },
  {
    "text": "On the other hand predicates\non data structures have to. ",
    "start": "3556460",
    "end": "3561710"
  },
  {
    "text": "Is this a pair? Or is it a symbol? Well, you better find out. You got to look at it then.",
    "start": "3561710",
    "end": "3566940"
  },
  {
    "text": " Any other questions? ",
    "start": "3566940",
    "end": "3580050"
  },
  {
    "text": "Oh, well, I suppose it's\ntime for a break. Thank you. [MUSIC PLAYING]",
    "start": "3580050",
    "end": "3602950"
  },
  {
    "text": "and ",
    "start": "3602950",
    "end": "3605972"
  }
]