[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6880"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation, or\nview additional materials",
    "start": "6880",
    "end": "13360"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13360",
    "end": "21349"
  },
  {
    "text": "PROFESSOR: OK, so\nup until now, we've been talking about the\nshortest path in graphs.",
    "start": "21349",
    "end": "26370"
  },
  {
    "text": "And we've been talking\nabout these game problems where you came up with a way to\nrepresent the state of a game",
    "start": "26371",
    "end": "34260"
  },
  {
    "text": "as noting graphs. And then we drew edges between\nthose vertices that represented",
    "start": "34260",
    "end": "39400"
  },
  {
    "text": "states, to represent moves\nthat you can do in a game. It turns out you can solve\na lot of problems this way.",
    "start": "39400",
    "end": "44500"
  },
  {
    "text": "And you can do it without\nthinking of a graph at all. So we usually think of a\ngraph, build the graph,",
    "start": "44500",
    "end": "50482"
  },
  {
    "text": "then run dynamic programming. You can do better without\nbuilding the graph. And the good part about that\nis that your code is smaller,",
    "start": "50482",
    "end": "59260"
  },
  {
    "text": "and it runs faster. The bad part about that is\nit's harder to understand. The dynamic programming\ncode looks like black magic.",
    "start": "59260",
    "end": "66259"
  },
  {
    "text": "And, when we're going to\ngive you dynamic programming problems on the final,\nyou can't say, oh, we're going to build something\nand run [? dystring ?].",
    "start": "66260",
    "end": "73378"
  },
  {
    "text": "And get partial credit. You actually have to\nunderstand the magic, and write the formulas,\nand hopefully get",
    "start": "73378",
    "end": "81360"
  },
  {
    "text": "something that works. So, we're going to spend all\nthe time that we have left in the semester, I\nthink, building up",
    "start": "81360",
    "end": "87640"
  },
  {
    "text": "your intuition for how to\nbuild dynamic programming. So, from lecture,\ndynamic programming is just a catchy name for\nfor optimization problems.",
    "start": "87640",
    "end": "97659"
  },
  {
    "text": "So, problems where\nyou're trying to compute the minimum or the\nmaximum of something.",
    "start": "97659",
    "end": "102740"
  },
  {
    "text": "So let's start with a problem. And then, see how all\nthe concepts in lecture relate to that. So this problem is\ncalled Crazy Eights.",
    "start": "102740",
    "end": "109650"
  },
  {
    "text": "And we start out with a deck\nof cards, randomly shuffled.",
    "start": "109650",
    "end": "115030"
  },
  {
    "text": "And then some of the\ncards are pulled out. Did everyone see playing cards? Poker cards?",
    "start": "115030",
    "end": "120520"
  },
  {
    "text": "Does everyone know what they\nare or do I have to define them? Does anyone need me\nto define poker cards?",
    "start": "120520",
    "end": "126740"
  },
  {
    "text": "Let's put it that way. OK. Cool. So, suppose we have\na bunch of these.",
    "start": "126740",
    "end": "133270"
  },
  {
    "text": " AUDIENCE: I don't know\nwhat Crazy Eights is.",
    "start": "133270",
    "end": "139112"
  },
  {
    "text": "PROFESSOR: We'll get to that. AUDIENCE: OK. It's an 8. AUDIENCE: I know\nwhat an 8 is, but I don't know how the game works.",
    "start": "139112",
    "end": "144880"
  },
  {
    "text": "PROFESSOR: OK. We'll get to it. So, let's see. ",
    "start": "144880",
    "end": "151010"
  },
  {
    "text": "4 of spades. ",
    "start": "151010",
    "end": "175250"
  },
  {
    "text": "OK, so this is a\nbunch of cards that were pulled out of the deck. And we want the longest\ncrazy subsequence.",
    "start": "175250",
    "end": "183660"
  },
  {
    "text": "And the crazy subsequence\nis a subsequence where two cards are\nlike each other.",
    "start": "183660",
    "end": "189090"
  },
  {
    "text": "The way we define like\nis that either they have the same number.",
    "start": "189090",
    "end": "196370"
  },
  {
    "text": "Or they have the same suit. Or one of them is an 8.",
    "start": "196370",
    "end": "201700"
  },
  {
    "text": "So an 8 is like anything else. ",
    "start": "201700",
    "end": "211160"
  },
  {
    "text": "OK. So 4 and 8. Are they like each other? AUDIENCE: Yes.",
    "start": "211160",
    "end": "217959"
  },
  {
    "text": "PROFESSOR: 8 and 5. Are they like each other? AUDIENCE: Yep.",
    "start": "217960",
    "end": "223676"
  },
  {
    "text": "PROFESSOR: OK.  this 5, 5 of hearts\nand 9 of diamonds.",
    "start": "223677",
    "end": "230470"
  },
  {
    "text": "Are they like each other? No. 5 of hearts and 7 of hearts.",
    "start": "230470",
    "end": "236649"
  },
  {
    "text": "Are they like each other? AUDIENCE: Yes. PROFESSOR: 5 of spades and 7\nof hearts, like each other?",
    "start": "236649",
    "end": "243000"
  },
  {
    "text": "No. OK. So we have some cards\nthat are like each other. We want the longest\npossible subsequence.",
    "start": "243000",
    "end": "249850"
  },
  {
    "text": "AUDIENCE: What about 5 and 5? Those are like each other. PROFESSOR: They're\nlike each other, yep.",
    "start": "249850",
    "end": "255064"
  },
  {
    "text": "They are more cards that are\nlike each other than the ones I drew here. For example, this guy\nis like everything else.",
    "start": "255064",
    "end": "264263"
  },
  {
    "text": "Oh, we already drew that one.  OK.",
    "start": "264263",
    "end": "269440"
  },
  {
    "text": "So how do we model this\nproblem using graphs? So, stuff that we knew\nbefore the last lecture.",
    "start": "269440",
    "end": "276310"
  },
  {
    "text": "AUDIENCE: Those\ncould all be nodes. PROFESSOR: OK. All the cards are nodes. That's good. And, I want the longest\npath between what and what?",
    "start": "276310",
    "end": "286860"
  },
  {
    "text": " AUDIENCE: One node to another?",
    "start": "286860",
    "end": "292917"
  },
  {
    "text": "PROFESSOR: OK. AUDIENCE: The longest\npath in the graph. PROFESSOR: Yeah. The longest path in the graph. One trick to reduce\nit to a known problem",
    "start": "292917",
    "end": "299510"
  },
  {
    "text": "is to add the fake source. So this is a fake source. And it's going to\nconnect to everything.",
    "start": "299510",
    "end": "305750"
  },
  {
    "start": "305750",
    "end": "311984"
  },
  {
    "text": "And this way, I want the longest\npath, starting from the source. ",
    "start": "311984",
    "end": "317524"
  },
  {
    "text": "AUDIENCE: And the other source? PROFESSOR: Nope. The longest path, starting from\nthe source, ending anywhere",
    "start": "317524",
    "end": "322688"
  },
  {
    "text": "in the graph. AUDIENCE: Such that it doesn't\ngo touch another card again?",
    "start": "322688",
    "end": "328684"
  },
  {
    "text": "PROFESSOR: Yeah. So, if I want a\nlonger subsequence, that's a good question. How would the edges look?",
    "start": "328684",
    "end": "333884"
  },
  {
    "text": "AUDIENCE: Directed. PROFESSOR: Yep. Directed. And which direction? ",
    "start": "333884",
    "end": "340354"
  },
  {
    "text": "AUDIENCE: Arbitrary [INAUDIBLE]. PROFESSOR: So, if I choose\nthis one and this one,",
    "start": "340354",
    "end": "346350"
  },
  {
    "text": "can I go back afterwards? AUDIENCE: You just\ncan't go back to the 4. PROFESSOR: So, in the\nlongest common subsequence,",
    "start": "346350",
    "end": "352481"
  },
  {
    "text": "all the cards have to\nbe in increasing order. So I can say I'm going to\nchoose this one, this one, and this one.",
    "start": "352481",
    "end": "358419"
  },
  {
    "text": "And they have to\nmatch in this order. So I can only go forward.",
    "start": "358420",
    "end": "363949"
  },
  {
    "text": "So I can't reorder the cards. My answer has to be, say, 4\nof diamonds, 8 of diamonds.",
    "start": "363950",
    "end": "373270"
  },
  {
    "text": "And then, what else\nwould match that? 9 of diamonds. AUDIENCE: You can put the\n8 anywhere, though, right?",
    "start": "373270",
    "end": "378400"
  },
  {
    "text": "PROFESSOR: No. I can't move them. So the cards have to be\nin the initial order. I don't have to\nchoose all the cards,",
    "start": "378400",
    "end": "384789"
  },
  {
    "text": "but the cards that I\nchoose have to respect the initial ordering. AUDIENCE: So everything\npoints right. PROFESSOR: Everything\npoints right.",
    "start": "384790",
    "end": "390900"
  },
  {
    "text": "Forward. Yep. ",
    "start": "390900",
    "end": "399330"
  },
  {
    "text": "And, I need one more\nedge from here to here. AUDIENCE: Oh, so you're\nsaying in the game you get an initial order.",
    "start": "399330",
    "end": "405169"
  },
  {
    "text": "And you can't reorder it. PROFESSOR: Yeah. But otherwise I can, if\nI have all the cards,",
    "start": "405170",
    "end": "411350"
  },
  {
    "text": "I'm just going to order them. AUDIENCE: Well, that's\nthe point right? I was picturing more like\nyou get a set of cards",
    "start": "411350",
    "end": "417720"
  },
  {
    "text": "and you try to figure out-- PROFESSOR: No. So, that's a different game. That might be harder to solve,\nso let's stick with this.",
    "start": "417720",
    "end": "423860"
  },
  {
    "text": "Yes? AUDIENCE: Why is 8\nin there, with 7? PROFESSOR: 8 is\nsimilar to anything.",
    "start": "423860",
    "end": "429640"
  },
  {
    "text": " Just for the heck of it. These are the rules. ",
    "start": "429640",
    "end": "437340"
  },
  {
    "text": "OK, so we have a\ngraph and we want to compute the longest path. We do not have an algorithm\nto compute the longest path.",
    "start": "437340",
    "end": "444250"
  },
  {
    "text": "We only have algorithms\nto compute shortest paths. So how do I deal with that? We had that in problem set six.",
    "start": "444250",
    "end": "450927"
  },
  {
    "text": "AUDIENCE: Make all\nweights negative because there's no\ncycle [INAUDIBLE]. PROFESSOR: OK. We know it's negative.",
    "start": "450928",
    "end": "456980"
  },
  {
    "text": "And, I guess these\nones don't matter. But all these are going\nto be, instead of being 1, they're all going to be -1.",
    "start": "456980",
    "end": "463190"
  },
  {
    "text": "Very good. And there are no\ncycles in this graph, so we know that the answer\nwill be well defined.",
    "start": "463190",
    "end": "471391"
  },
  {
    "text": "OK. Everyone with me so far? Happy nods? Yes.",
    "start": "471391",
    "end": "477590"
  },
  {
    "text": "So, what algorithm do I know\nthat solves this problem? AUDIENCE: Bellman-Ford. PROFESSOR: Bellman-Ford.",
    "start": "477590",
    "end": "482690"
  },
  {
    "text": "Good. ",
    "start": "482690",
    "end": "489260"
  },
  {
    "text": "What is the running\ntime of Bellman-Ford? AUDIENCE: [INAUDIBLE]. PROFESSOR: Cool.",
    "start": "489260",
    "end": "495420"
  },
  {
    "text": "Suppose I have N cards. How many vertices do I have?",
    "start": "495420",
    "end": "500585"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Plus the source. It's ordering.",
    "start": "500585",
    "end": "506350"
  },
  {
    "text": "So you're right. How many edges do I have? ",
    "start": "506350",
    "end": "513530"
  },
  {
    "text": "Worst case. AUDIENCE: N squared. PROFESSOR: Yep. AUDIENCE: [INAUDIBLE] you mean,\nlike, the directed [INAUDIBLE]?",
    "start": "513530",
    "end": "522080"
  },
  {
    "text": "PROFESSOR: No, I\nmean Bellman-Ford. Then, we're going to\ngo to that algorithm and get the better running time.",
    "start": "522080",
    "end": "527500"
  },
  {
    "text": "AUDIENCE: Cause isn't\nBellman-Ford e times e? PROFESSOR: Oh. What?",
    "start": "527500",
    "end": "532625"
  },
  {
    "text": "AUDIENCE: Yeah. PROFESSOR: Yeah, that's what\nI-- Did someone say, v plus e? Or did I write v plus e?",
    "start": "532625",
    "end": "540210"
  },
  {
    "text": "Yep. You did. Thank you. So it's v times e. ",
    "start": "540210",
    "end": "547260"
  },
  {
    "text": "So the total running time is. aUDIENCE: N squared. aUDIENCE: N cubed.",
    "start": "547260",
    "end": "553063"
  },
  {
    "text": "AUDIENCE: Or, n cubed. Yeah, it's multiplying\n[INAUDIBLE], too. PROFESSOR: You guys\nare mean today.",
    "start": "553064",
    "end": "560120"
  },
  {
    "text": "OK, so n cubed\napplying Bellman-Ford. There is a better way of\nsolving this problem, right?",
    "start": "560120",
    "end": "567440"
  },
  {
    "text": "The Directed Acyclic\nGraph Bellman-Ford. So let's look at the Directed\nAcyclic Graph, not the one",
    "start": "567440",
    "end": "573950"
  },
  {
    "text": "to be generated by this because\nthat might be a bit messy. And let's try to\ncompute shortest path. ",
    "start": "573950",
    "end": "580509"
  },
  {
    "text": "s, a, b, c. ",
    "start": "580510",
    "end": "627199"
  },
  {
    "text": "OK, so let's see\nhow we'd compute the shortest path in this graph. It's Acyclic, right? All the the edges are\npointing downwards.",
    "start": "627200",
    "end": "635467"
  },
  {
    "text": "So let's try to\ncompute them directly. I'm not going to write\npseudocode first. I'm going to write\nthe formulas, and that will get the intuition for it.",
    "start": "635467",
    "end": "641050"
  },
  {
    "text": "Then, maybe right psuedocode. So what is the distance\nfrom the source to itself?",
    "start": "641050",
    "end": "646066"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Good. The first ones are easy, so\nI'm going to do them myself.",
    "start": "646066",
    "end": "652820"
  },
  {
    "text": "sa is 1. sb is 2. sc is 3.",
    "start": "652820",
    "end": "658440"
  },
  {
    "text": "And, of course, you guys\nget to do the hard ones. So the distance\nfrom s to d is what?",
    "start": "658440",
    "end": "665154"
  },
  {
    "text": "How would I compute it? AUDIENCE: There's two paths\nto get to [INAUDIBLE].",
    "start": "665155",
    "end": "671510"
  },
  {
    "text": "PROFESSOR: OK. So, I would want the shortest\npath from those, right?",
    "start": "671510",
    "end": "676740"
  },
  {
    "text": "OK. So it's 4. And the formula for it is the\nminimum of two paths, right?",
    "start": "676740",
    "end": "682700"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] S\nto b, and then b to b. PROFESSOR: So, one path is--",
    "start": "682700",
    "end": "688740"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nand s [? and b ?]. AUDIENCE: [INAUDIBLE]. PROFESSOR: Wait.",
    "start": "688740",
    "end": "694090"
  },
  {
    "text": "sa. So, first there's\na path from s to a. And the edge a to d.",
    "start": "694090",
    "end": "700020"
  },
  {
    "text": "And then, there's\na path from s to b. And the 8 from b to d, right?",
    "start": "700020",
    "end": "707170"
  },
  {
    "text": " And I already know the\nvalues for sa and sb,",
    "start": "707170",
    "end": "712550"
  },
  {
    "text": "so this is well defined. We can compute it right away. No recursion.",
    "start": "712550",
    "end": "718149"
  },
  {
    "text": "No metrics. I mean, there's recursion, but\nthere's no infinite recursion.",
    "start": "718150",
    "end": "724960"
  },
  {
    "text": "Does this make sense? So, in order to get to d, there\nare two edges pointing into d.",
    "start": "724960",
    "end": "732095"
  },
  {
    "text": "One of them coming from a. One of them coming from b. So I can either get to\na and take this edge. Or get to b and take this edge.",
    "start": "732095",
    "end": "739249"
  },
  {
    "text": "This is what the\nformulas are saying. ",
    "start": "739249",
    "end": "745620"
  },
  {
    "text": "How about se?s\nWhat's the formula? ",
    "start": "745620",
    "end": "753303"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: OK. What are they?",
    "start": "753303",
    "end": "759520"
  },
  {
    "text": "AUDIENCE: s3. AUDIENCE: Yeah, sa, sb, sc. AUDIENCE: [INAUDIBLE].",
    "start": "759520",
    "end": "765422"
  },
  {
    "text": "Aed's. ",
    "start": "765422",
    "end": "777270"
  },
  {
    "text": "PROFESSOR: And the number? AUDIENCE: [INAUDIBLE] 3?",
    "start": "777270",
    "end": "787010"
  },
  {
    "text": "I think. e to e. PROFESSOR: OK.",
    "start": "787010",
    "end": "793682"
  },
  {
    "text": "f.  Someone that hasn't\nspoken today.",
    "start": "793682",
    "end": "800500"
  },
  {
    "text": "So that I can see\nthat everyone gets it. Please.",
    "start": "800500",
    "end": "806360"
  },
  {
    "text": "AUDIENCE: dsb-- PROFESSOR: OK. AUDIENCE: --plus wef.",
    "start": "806360",
    "end": "812540"
  },
  {
    "text": "PROFESSOR: OK. AUDIENCE: And dsc plus wcf.",
    "start": "812540",
    "end": "822029"
  },
  {
    "text": "PROFESSOR: Awesome. And that is-- PROFESSOR: 4. PROFESSOR: I'll take\nyour word for it.",
    "start": "822030",
    "end": "827840"
  },
  {
    "text": " OK, so now the last one. Distance from std.",
    "start": "827840",
    "end": "833836"
  },
  {
    "start": "833836",
    "end": "844748"
  },
  {
    "text": "AUDIENCE: 5. Wait. No. ",
    "start": "844748",
    "end": "850240"
  },
  {
    "text": "PROFESSOR: So, let's\nwrite a formula. AUDIENCE: Oh, g, not a. AUDIENCE: That's 5.",
    "start": "850240",
    "end": "855445"
  },
  {
    "text": "AUDIENCE: 5. PROFESSOR: OK, so\nlet's write a formula to make sure that you\nguys are computing it in the fastest\npossible way for me.",
    "start": "855445",
    "end": "861570"
  },
  {
    "text": "So-- sd plus sd to g. ",
    "start": "861570",
    "end": "870047"
  },
  {
    "text": "PROFESSOR: OK.  Does anyone else? Is this the only path?",
    "start": "870047",
    "end": "876840"
  },
  {
    "text": "AUDIENCE: No. There's more. PROFESSOR: OK. AUDIENCE: Plus e as to f.",
    "start": "876840",
    "end": "883126"
  },
  {
    "text": "PROFESSOR: Plus e as f. AUDIENCE: And n. AUDIENCE: c to f. I mean, c to g.",
    "start": "883126",
    "end": "888210"
  },
  {
    "text": "Or, No. no. s to c. PROFESSOR: OK. See, there's a trick.",
    "start": "888210",
    "end": "893390"
  },
  {
    "text": "OK. Cool. And then, what are the weights?",
    "start": "893390",
    "end": "898475"
  },
  {
    "text": "AUDIENCE: w e to g. PROFESSOR: e to g. Very good. AUDIENCE: fg. PROFESSOR: fg.",
    "start": "898476",
    "end": "904040"
  },
  {
    "text": "AUDIENCE: cg. PROFESSOR: cg. ",
    "start": "904040",
    "end": "912990"
  },
  {
    "text": "AUDIENCE: Why are\nyou adding in c? AUDIENCE: Because\nthere's the extra c. AUDIENCE: Oh, I didn't see that.",
    "start": "912990",
    "end": "918713"
  },
  {
    "text": " PROFESSOR: So, the point of this\nguy's, is that if you do bfs,",
    "start": "918713",
    "end": "924339"
  },
  {
    "text": "you'll get tricked.  Because bfs would put g on\nthe same level as these.",
    "start": "924339",
    "end": "930730"
  },
  {
    "text": "And might compute\nthe value for g before it has the\nvalues for these. ",
    "start": "930730",
    "end": "938320"
  },
  {
    "text": "OK, so what order do I need\nto compute these numbers in, for this to work? ",
    "start": "938320",
    "end": "945964"
  },
  {
    "text": "AUDIENCE: That way\nyou computed them? PROFESSOR: So, that is a, that\nis a, something of the graph.",
    "start": "945964",
    "end": "953701"
  },
  {
    "text": "Yeah. AUDIENCE: Oh, topological. PROFESSOR: Yeah. Stole your answer. ",
    "start": "953701",
    "end": "961019"
  },
  {
    "text": "Topological sort. So, any of the\ntopological sorts works.",
    "start": "961020",
    "end": "967330"
  },
  {
    "text": "The one we used this\ntime is sabcdefg. ",
    "start": "967330",
    "end": "974209"
  },
  {
    "text": "Why am I using a\ntopological sort? AUDIENCE: Because\nthere's dependency.",
    "start": "974210",
    "end": "979230"
  },
  {
    "text": "PROFESSOR: Yep. So, this depends on\nthis and this, right?",
    "start": "979230",
    "end": "985699"
  },
  {
    "text": "As c depends on sa, as b as c. So basically, every edge\nhere indicates a dependency.",
    "start": "985700",
    "end": "992225"
  },
  {
    "text": "In order to compute the shortest\ndistance from the source to here, I need to\nknow the shortest distance from the\nsource to these two.",
    "start": "992225",
    "end": "998630"
  },
  {
    "text": "And then I can\nlook at the edges. So, the nice thing\nabout a topological sort",
    "start": "998630",
    "end": "1003725"
  },
  {
    "text": "is, after I write the\nvertices this way, all the edges point forward. Right? s to a. s to b.",
    "start": "1003725",
    "end": "1010680"
  },
  {
    "text": "s to c. a to d. a to e. b to d.",
    "start": "1010680",
    "end": "1017125"
  },
  {
    "text": "b to e. b to f. I can keep going. But the point is, there's no\nsuch thing as a backward edge.",
    "start": "1017125",
    "end": "1022440"
  },
  {
    "text": " So if I compute the numbers in\nthis order, when I get to se,",
    "start": "1022440",
    "end": "1029339"
  },
  {
    "text": "I know that I computed the\ndistance from s to abcd. And if I have any\nedge coming into e,",
    "start": "1029339",
    "end": "1035800"
  },
  {
    "text": "I know that I've already\ncomputed the shortest distance to the node that\nit is coming from. ",
    "start": "1035800",
    "end": "1042809"
  },
  {
    "text": "yes? Did I lose you guys? Was this too-- AUDIENCE: So\nbasically, like, at a,",
    "start": "1042810",
    "end": "1048750"
  },
  {
    "text": "you relaxed all the\nedges going out of it. PROFESSOR: You can\nlook at it that way.",
    "start": "1048750",
    "end": "1054200"
  },
  {
    "text": "But what we're doing here\nis I'm looking at a node and I'm relaxing all the\nedges coming into a node.",
    "start": "1054200",
    "end": "1061000"
  },
  {
    "text": "AUDIENCE: OK. PROFESSOR: So this\nmatches this order. AUDIENCE: OK. PROFESSOR: What you said\ndoesn't match this order.",
    "start": "1061000",
    "end": "1066410"
  },
  {
    "text": "But it's exactly the same thing. AUDIENCE: Oh. PROFESSOR: It'll give\nyou the same result. AUDIENCE: You'd get the first\nvalue at g when you reach c.",
    "start": "1066410",
    "end": "1072790"
  },
  {
    "text": "But, like, end up\nwith the same answer. PROFESSOR: Yep. AUDIENCE: We're still going\nbackwards then, instead of--",
    "start": "1072790",
    "end": "1078709"
  },
  {
    "text": "PROFESSOR: As long as\nyou're processing the nodes in the topological sort\norder, all the algorithms",
    "start": "1078709",
    "end": "1084010"
  },
  {
    "text": "will work because\nyou're just computing these terms in a\ndifferent order. But as long as the\ndependencies are satisfied,",
    "start": "1084010",
    "end": "1090450"
  },
  {
    "text": "you're still going to\nget the right thing. OK, so what's the\nrunning time of this?",
    "start": "1090450",
    "end": "1097079"
  },
  {
    "text": "How many people know\nthe running time without having to write\npseudocode for this?",
    "start": "1097079",
    "end": "1104030"
  },
  {
    "text": "I know the answer beforehand,\nso I cheated, obviously. OK. AUDIENCE: Is it a? [INAUDIBLE] edges.",
    "start": "1104030",
    "end": "1109600"
  },
  {
    "text": "PROFESSOR: Almost. Very close. [INTERPOSING VOICES] ",
    "start": "1109600",
    "end": "1118751"
  },
  {
    "text": "PROFESSOR: So, it's\nthe topological. So, running time\nplus the running time for evaluating this. The running time for evaluating\nthis is v plus e because you",
    "start": "1118751",
    "end": "1125740"
  },
  {
    "text": "have every h shows up\nexactly once in here. So you have e terms. And you have v vertices, even\nif you don't have any edge,",
    "start": "1125740",
    "end": "1133130"
  },
  {
    "text": "you have to initialize\nthe verdicts. So that's why it's v plus e. AUDIENCE: It's also\ntopological sort.",
    "start": "1133130",
    "end": "1140630"
  },
  {
    "text": "PROFESSOR: So, this is the\norder in which we process this. So everything is v plus e.",
    "start": "1140630",
    "end": "1146850"
  },
  {
    "text": "If we use this algorithm\nto solve this problem, what will the running time be? ",
    "start": "1146850",
    "end": "1154375"
  },
  {
    "text": "AUDIENCE: n. AUDIENCE: n squared. AUDIENCE: It's an no. PROFESSOR: So, it's v\nprime plus u prime, which",
    "start": "1154375",
    "end": "1161320"
  },
  {
    "text": "is n squared plus [INAUDIBLE]\nsquared, which is n squared.",
    "start": "1161320",
    "end": "1171809"
  },
  {
    "text": "So, by observing that\nthis graph is acyclic, we have a better running\ntime than Bellman-Ford.",
    "start": "1171810",
    "end": "1178409"
  },
  {
    "text": "Even though we used\nexactly the same intuition that we used up until now. Model the problem as a graph.",
    "start": "1178410",
    "end": "1184020"
  },
  {
    "text": "Figure out what the edges are. Run a shortest path algorithm. We have a better\nshortest path algorithm,",
    "start": "1184020",
    "end": "1189900"
  },
  {
    "text": "which works for\nDirected Acyclic Graphs, so we get a better running time. ",
    "start": "1189900",
    "end": "1196590"
  },
  {
    "text": "OK, questions for\nwhat we did so far? ",
    "start": "1196590",
    "end": "1202470"
  },
  {
    "text": "AUDIENCE: It's [INAUDIBLE]\non this graph here, then you would do\nthe same thing.",
    "start": "1202470",
    "end": "1208559"
  },
  {
    "text": "Take each node and then\nrelax the incoming edges. ",
    "start": "1208560",
    "end": "1215299"
  },
  {
    "text": "PROFESSOR: Yeah. So what is the\ntopological sort of this? AUDIENCE: [INAUDIBLE]",
    "start": "1215300",
    "end": "1221000"
  },
  {
    "text": "PROFESSOR: It's exactly\nthe cards in the order that they're on\nthe board, right? So, in dynamic programming,\nthe topological sort order",
    "start": "1221000",
    "end": "1230050"
  },
  {
    "text": "is obvious. So the hard part is\nrepresenting the state and figuring out what\nthe dependencies are.",
    "start": "1230050",
    "end": "1235730"
  },
  {
    "text": "So what the edges are. And after that, the\ntopological sort usually comes, it's fairly straightforward. ",
    "start": "1235730",
    "end": "1244370"
  },
  {
    "text": "OK, so what we can do now,\nwe have a few directions in which we can go. We can write the\npseudocode for this.",
    "start": "1244370",
    "end": "1250780"
  },
  {
    "start": "1250780",
    "end": "1256250"
  },
  {
    "text": "I mean, it's\nbasically, it's just, we're going to write abstract\nthings instead of this.",
    "start": "1256250",
    "end": "1262900"
  },
  {
    "text": "So we're going to write one\npiece of pseudocode that evaluates these. So it's just\ngeneralizing this thing.",
    "start": "1262900",
    "end": "1272470"
  },
  {
    "text": "Something else we\ncan do is we can look at how would these things\nget computed using memoization?",
    "start": "1272470",
    "end": "1278790"
  },
  {
    "start": "1278790",
    "end": "1284030"
  },
  {
    "text": "We can look at how we would\ncompute shortest path in graphs with cycles.",
    "start": "1284030",
    "end": "1289270"
  },
  {
    "text": "So this assumes we have a DAG. What if we have cycles? How do we deal with them?",
    "start": "1289270",
    "end": "1294560"
  },
  {
    "text": "Or we can do another DP problem,\nand see how we'd model that. ",
    "start": "1294560",
    "end": "1303220"
  },
  {
    "text": "So, votes? What do people want to see? I think we might have time for\ntwo things, out of these four.",
    "start": "1303220",
    "end": "1309419"
  },
  {
    "text": "So, everyone votes for one. And we'll start with that. Sorry? AUDIENCE: DP problem.",
    "start": "1309420",
    "end": "1315161"
  },
  {
    "text": "PROFESSOR: OK, so one\nvote for DP problem. AUDIENCE: Yeah. PROFESSOR: OK. AUDIENCE: Cyclic.",
    "start": "1315161",
    "end": "1320540"
  },
  {
    "text": " AUDIENCE: Wait, you\ngot two or one votes?",
    "start": "1320540",
    "end": "1325725"
  },
  {
    "text": "PROFESSOR: One vote. AUDIENCE: OK. I'll DP. AUDIENCE: I'll stick\nwith [INAUDIBLE]. AUDIENCE: DP.",
    "start": "1325725",
    "end": "1332990"
  },
  {
    "text": "PROFESSOR: I think\nwe're done here. All right. So, new DP problem. ",
    "start": "1332990",
    "end": "1339830"
  },
  {
    "text": "So, suppose you have something\nlike Manhattan's map, which is basically a lattice.",
    "start": "1339830",
    "end": "1346210"
  },
  {
    "text": "Fancy math term for a grid. ",
    "start": "1346210",
    "end": "1356970"
  },
  {
    "text": "And suppose it we can\nonly go forward and down. ",
    "start": "1356970",
    "end": "1363840"
  },
  {
    "text": "So, all the streets are\none way because they liked how people drive\nin San Francisco, and decided they're going\nto do the same craziness.",
    "start": "1363840",
    "end": "1370545"
  },
  {
    "start": "1370545",
    "end": "1384320"
  },
  {
    "text": "So, we want to go from s to t. And there are different\ncost on all these edges.",
    "start": "1384320",
    "end": "1394590"
  },
  {
    "text": "This is an n by m matrix. And I want to get from s to t\nin the shortest possible way.",
    "start": "1394590",
    "end": "1404659"
  },
  {
    "text": "So, let's model the problem. And then let's do\nrecursion formulas",
    "start": "1404660",
    "end": "1410784"
  },
  {
    "text": "and make it look like a DP\ninstead of like a graph problem because-- it might be\ntoo easy of a graph problem in hindsight.",
    "start": "1410784",
    "end": "1417397"
  },
  {
    "text": "OK, so what's the graph problem? AUDIENCE: It's not equivalent. AUDIENCE: Topological sort. And then bfs.",
    "start": "1417397",
    "end": "1424647"
  },
  {
    "text": "PROFESSOR: OK. Topological sort. And then, and then that.",
    "start": "1424647",
    "end": "1430340"
  },
  {
    "text": "Well, let's write\nthis as, let's say that each node is so let's say\nthat the nodes have numbers,",
    "start": "1430340",
    "end": "1437890"
  },
  {
    "text": "right? So this is 1,1 and this is 5,4.",
    "start": "1437890",
    "end": "1443980"
  },
  {
    "text": "And I want to write\nthis using math, so 2,1. 3,1.",
    "start": "1443980",
    "end": "1449470"
  },
  {
    "text": "4,1. 5,1. And then, 1,2.",
    "start": "1449470",
    "end": "1456419"
  },
  {
    "text": "1,3. 1,4.",
    "start": "1456420",
    "end": "1461440"
  },
  {
    "text": "OK, so this is the graph. The shortest path from\nhere to here is obvious. By the way, this\nis a real problem",
    "start": "1461440",
    "end": "1467516"
  },
  {
    "text": "for people who don't\nsee the connection between dynamic\nprogramming and graphs. I This problem has tripped\nup people on exams before.",
    "start": "1467516",
    "end": "1474899"
  },
  {
    "text": "So it's not a toy problem.  OK. AUDIENCE: So, on an\nexamine, would you",
    "start": "1474900",
    "end": "1480981"
  },
  {
    "text": "have the option of just using\na straight up graph algorithm-- PROFESSOR: Well, we're going to\nask you to solve this using DP. So let's try to solve this using\ndynamic programming by writing",
    "start": "1480981",
    "end": "1488380"
  },
  {
    "text": "recursion formulas. So, what's the shortest\ndistance to 1,1.",
    "start": "1488380",
    "end": "1498590"
  },
  {
    "text": "AUDIENCE: 0. PROFESSOR: OK, then. If I have a general distance,\nif I have some random node here,",
    "start": "1498590",
    "end": "1506390"
  },
  {
    "text": "dij, how do I compute this? AUDIENCE: It's a\nminimum distance",
    "start": "1506390",
    "end": "1511430"
  },
  {
    "text": "between the distance\nof law plus weights. AUDIENCE: Or the distance of j.",
    "start": "1511430",
    "end": "1517790"
  },
  {
    "text": "i minus one. Yeah.  PROFESSOR: So, i minus 1 j.",
    "start": "1517790",
    "end": "1524100"
  },
  {
    "text": "AUDIENCE: Yeah. We get it. Plus the weight of the, yeah.",
    "start": "1524100",
    "end": "1532645"
  },
  {
    "text": "AUDIENCE: Going from\none to the other. PROFESSOR: OK, so the weight\nfrom i minus 1 j to ij.",
    "start": "1532645",
    "end": "1540380"
  },
  {
    "text": "OK. And? AUDIENCE: j minus 1i. For i, j minus 1.",
    "start": "1540380",
    "end": "1549030"
  },
  {
    "text": "PROFESSOR: ij minus 1. AUDIENCE: Plus\nweight of that ij.",
    "start": "1549030",
    "end": "1558184"
  },
  {
    "text": "ij minus j1 to ij. ij [INAUDIBLE]",
    "start": "1558184",
    "end": "1564900"
  },
  {
    "text": "PROFESSOR: OK. So these are the recursions. Now, how would I write the\nfull set of code for this?",
    "start": "1564900",
    "end": "1570450"
  },
  {
    "text": "So what's a valid topological\nsort for these guys?",
    "start": "1570450",
    "end": "1575712"
  },
  {
    "text": "AUDIENCE: 1,1. 2,1. 3,1. AUDIENCE: Dials. AUDIENCE: 1,2. AUDIENCE: The right dials.",
    "start": "1575713",
    "end": "1582550"
  },
  {
    "text": "PROFESSOR: That's going\nto be hard to code. That's going to be easy to code. So I'm going to\ntake your answer.",
    "start": "1582550",
    "end": "1588110"
  },
  {
    "text": "AUDIENCE: OK. AUDIENCE: What? PROFESSOR: I'm not going to take\nyour answer because your answer is correct, but\nit's hard to code. AUDIENCE: But isn't that\nthe same thing [INAUDIBLE]?",
    "start": "1588110",
    "end": "1594590"
  },
  {
    "text": "PROFESSOR: She\nsays, go like this. AUDIENCE: Oh. Oh. PROFESSOR: So, here's how\nI'm going to code them.",
    "start": "1594590",
    "end": "1599850"
  },
  {
    "text": "4i in 1,2n.",
    "start": "1599850",
    "end": "1605746"
  },
  {
    "text": "4j in 1 to m. ",
    "start": "1605746",
    "end": "1613360"
  },
  {
    "text": "So, I guess, first off, if i\nis 1 and j is 1, then d of ij",
    "start": "1613360",
    "end": "1621260"
  },
  {
    "text": "is 0, right? This is the base case. Otherwise, d of ij\nequals big bad formula",
    "start": "1621260",
    "end": "1632140"
  },
  {
    "text": "that we have up there. ",
    "start": "1632140",
    "end": "1637289"
  },
  {
    "text": "OK. Do we need anything else? AUDIENCE: DP. PROFESSOR: This is DP.",
    "start": "1637290",
    "end": "1642380"
  },
  {
    "text": "We're done. AUDIENCE: Is it? PROFESSOR: Almost work. Yeah, this is-- AUDIENCE: Over [INAUDIBLE]-- AUDIENCE: I thought this\nwas just programming. AUDIENCE: --it's a\ndictionary, though. PROFESSOR: Yeah.",
    "start": "1642380",
    "end": "1647910"
  },
  {
    "text": "It's programming. So this is the DP\nsolution to the program because, instead of\nbuilding the graph, you're writing the recursion.",
    "start": "1647910",
    "end": "1654410"
  },
  {
    "text": "And you're writing using\nthis implicit representation of the graph.",
    "start": "1654410",
    "end": "1660284"
  },
  {
    "text": "AUDIENCE: Oh. PROFESSOR: This is it. This is DP. Most people are\nreally afraid of it.",
    "start": "1660284",
    "end": "1665940"
  },
  {
    "text": "This is the hardest\nthing in the course. If you get the connection\nbetween graphs and this, and if you know how to\nmodel graphs, that it.",
    "start": "1665940",
    "end": "1671318"
  },
  {
    "text": "You're one month\nin the term, you're done with six double six. You already know\neverything to ace the exam.",
    "start": "1671318",
    "end": "1677130"
  },
  {
    "text": "OK. AUDIENCE: Aren't graphs\njust programming, as well?  PROFESSOR: Ah. But there, you're building\na graph structure.",
    "start": "1677130",
    "end": "1683925"
  },
  {
    "text": "Here, we don't need to\nbuild that structure. Because we see the\nconnection directly. Like, this code is\nmuch smaller, right?",
    "start": "1683925",
    "end": "1689740"
  },
  {
    "text": "It's much easier to look at. I mean, sorry. It's faster to read. But it looks like\nblack magic if you",
    "start": "1689740",
    "end": "1695350"
  },
  {
    "text": "don't see the underlying graph. Yes? Did you have a question? AUDIENCE: Yeah, so.",
    "start": "1695350",
    "end": "1700901"
  },
  {
    "text": "What exactly is\ndynamic programming? Unless they give at least\none or two examples of,",
    "start": "1700901",
    "end": "1707811"
  },
  {
    "text": "like, using something that you\nhad calculated already, or-- PROFESSOR: Yeah. AUDIENCE: --Fibinocci.",
    "start": "1707811",
    "end": "1713371"
  },
  {
    "text": "So. PROFESSOR: Yeah. So-- AUDIENCE: Ah, so\nnow you just have to have a dictionary to\nstore the minimum cost. AUDIENCE: That's\nwhat d is, though.",
    "start": "1713371",
    "end": "1719475"
  },
  {
    "text": "The d of ij. AUDIENCE: Wait. PROFESSOR: So. So I like your question. And I'm going to address\nall the other ones first.",
    "start": "1719475",
    "end": "1725614"
  },
  {
    "text": "And then I'm going to\nspend about five minutes addressing your question. What is dynamic\nprogramming, right?",
    "start": "1725614",
    "end": "1731460"
  },
  {
    "text": "What is the point of this? Like, what is\ndynamic programming?",
    "start": "1731460",
    "end": "1740770"
  },
  {
    "text": "We're going to\ncome back to this. So any questions about this? AUDIENCE: Wait.",
    "start": "1740770",
    "end": "1746310"
  },
  {
    "text": "As you're going through-- AUDIENCE: Is there a dictionary? PROFESSOR: Sure.",
    "start": "1746310",
    "end": "1751320"
  },
  {
    "text": "This is an array. Or dictionary. So, say this is ij.",
    "start": "1751320",
    "end": "1756627"
  },
  {
    "text": "If it's an array, or\nif it's a dictionary, it would be d of the tuple ij. ",
    "start": "1756628",
    "end": "1764809"
  },
  {
    "text": "So, I can write this\nin Python, right? This is almost Python.",
    "start": "1764810",
    "end": "1770140"
  },
  {
    "text": "What am I missing? AUDIENCE: [INAUDIBLE],\nor it fits inside. PROFESSOR: Yes.",
    "start": "1770140",
    "end": "1775620"
  },
  {
    "text": "So, I have some boundary\nconditions, right? Because this guy would depend\non this guy, which is inside.",
    "start": "1775620",
    "end": "1780755"
  },
  {
    "text": "And left to depend on this guy. Which doesn't exist. AUDIENCE: Oh.",
    "start": "1780755",
    "end": "1785870"
  },
  {
    "text": "I wasn't-- OK. Sure. PROFESSOR: So, we need\na few more ifs here, for boundary conditions. ",
    "start": "1785870",
    "end": "1798594"
  },
  {
    "text": "AUDIENCE: I mean, in theory,\nthough, you could just run through the\nnew dfs and create",
    "start": "1798594",
    "end": "1804341"
  },
  {
    "text": "a topological of the source. Right? And just run through that. PROFESSOR: Yeah. But that's so much\ncode to write.",
    "start": "1804342",
    "end": "1809390"
  },
  {
    "text": "Look at this. This is five lines. AUDIENCE: Well, yeah. For this particular\nproblem, it's five lines. PROFESSOR: Well, for\ndynamic programming,",
    "start": "1809390",
    "end": "1815228"
  },
  {
    "text": "the solutions are 5 to\n10 lines in general. And the only hard thing\nin dynamic programming",
    "start": "1815228",
    "end": "1820750"
  },
  {
    "text": "is figuring out what is\nthe state going to be. So, after you get used to\nthem, after you solve 10 or 20,",
    "start": "1820750",
    "end": "1826650"
  },
  {
    "text": "when people come out of\nprogramming contests, and someone says, my\nsolution's dynamic programming. Really?",
    "start": "1826650",
    "end": "1831740"
  },
  {
    "text": "Wait, you can solve it that way. And he says, yeah. This is the state. And then everything\nelse is obvious. Like, it's pretty easy to\nfigure out everything else.",
    "start": "1831740",
    "end": "1838290"
  },
  {
    "text": "The hard part is the state. So, it's enough to\nsay my solution is dynamic programming. This is my state. You guys are probably\ngoing to have",
    "start": "1838290",
    "end": "1844200"
  },
  {
    "text": "to say a bit more\nthan that on the exam. But this is the hard part. AUDIENCE: DP. PROFESSOR: No, you\ncan't just say DP.",
    "start": "1844200",
    "end": "1850740"
  },
  {
    "text": "You'll definitely\nneed at least a state. ",
    "start": "1850740",
    "end": "1856820"
  },
  {
    "text": "OK. So. AUDIENCE: You're\nalso missing a state for deciding stuff in the\ndictionary, though, right?",
    "start": "1856820",
    "end": "1862302"
  },
  {
    "text": "PROFESSOR: Before deciding\nif my key is already in the dictionary? Well, so, aside from the\nboundary conditions here,",
    "start": "1862302",
    "end": "1868370"
  },
  {
    "text": "if I compute this here, it\ndepends on theses two, right? Are they going to be\nin the dictionary?",
    "start": "1868370",
    "end": "1876074"
  },
  {
    "text": "AUDIENCE: Not yet. PROFESSOR: Why? If I'm running\nthis way, so if I'm computing all my\nvalues in this order.",
    "start": "1876074",
    "end": "1883210"
  },
  {
    "text": "So the first line one. Then line two. Then line three. They're already going\nto be in the dictionary.",
    "start": "1883210",
    "end": "1888630"
  },
  {
    "text": "So this is because I'm\ndoing topological sort. You don't need\nmemoization if you're not using the topological\nsort of the graph.",
    "start": "1888630",
    "end": "1895010"
  },
  {
    "text": "You only need\nmemoization if you don't. AUDIENCE: So, why are we doing\nboundaries commissions if--",
    "start": "1895010",
    "end": "1902877"
  },
  {
    "text": "PROFESSOR: Because-- AUDIENCE: [INAUDIBLE]. PROFESSOR: So, I'm doing\na boundary condition because if I paste this in if I\npaste this thing in, then when",
    "start": "1902877",
    "end": "1913500"
  },
  {
    "text": "I am here, this is going\nto refer to this guy. Which is fine. But it's also going\nto refer to 2,0.",
    "start": "1913500",
    "end": "1919490"
  },
  {
    "text": "Which doesn't exist. ",
    "start": "1919490",
    "end": "1926980"
  },
  {
    "text": "So the code might be a bit\nobfuscated by the boundary conditions. But it's 10 lines of code. It's pretty nice\nand straightforward.",
    "start": "1926980",
    "end": "1933940"
  },
  {
    "text": "OK, now what is\ndynamic programming? I like that question. PROFESSOR: So, a key\nproperty, I don't",
    "start": "1933940",
    "end": "1940060"
  },
  {
    "text": "think it was\nmentioned in lecture. Guys, correct me if I'm wrong. It's called optimal\nsubstructure. Does that ring a bell?",
    "start": "1940060",
    "end": "1946248"
  },
  {
    "text": "Probably going to hear\nabout it next time, so. ",
    "start": "1946249",
    "end": "1952820"
  },
  {
    "text": "Optimal substructure. ",
    "start": "1952820",
    "end": "1963560"
  },
  {
    "text": "So, the point of\noptimal substructure is, suppose I have a\nshortest path from s to g.",
    "start": "1963560",
    "end": "1969800"
  },
  {
    "text": "Right? ",
    "start": "1969800",
    "end": "1981810"
  },
  {
    "text": "so, suppose I have\nshortest path from s to g.",
    "start": "1981810",
    "end": "1991580"
  },
  {
    "text": " And that path is called p.",
    "start": "1991580",
    "end": "1997130"
  },
  {
    "text": "Now, suppose this\npath goes through d. So, path from s to g is actually\ns making a path through d.",
    "start": "1997130",
    "end": "2008320"
  },
  {
    "text": "And then there's another\npath going from d to g. ",
    "start": "2008320",
    "end": "2016740"
  },
  {
    "text": "This path over here, p1. p1 is guaranteed to be the\nshortest path, or a shortest",
    "start": "2016740",
    "end": "2028660"
  },
  {
    "text": "path, from s to d. ",
    "start": "2028660",
    "end": "2033919"
  },
  {
    "text": "So this is the big solution. It's optimal because we say it's\nthe solution to the problem.",
    "start": "2033920",
    "end": "2040200"
  },
  {
    "text": "This is a part of the solution. This part of the solution\nis optimal for this part",
    "start": "2040200",
    "end": "2045660"
  },
  {
    "text": "of the problem. So the part of the problem\nis getting from s to d.",
    "start": "2045660",
    "end": "2051282"
  },
  {
    "text": "The part of the big\noptimal solution is optimal-- so the small\npart of the big solution",
    "start": "2051282",
    "end": "2058090"
  },
  {
    "text": "is optimal with respect\nto the small problem. So p1 has to be a\nshortest path from s to d.",
    "start": "2058090",
    "end": "2065270"
  },
  {
    "text": "Do you guys want to see\na proof by contradiction? Or do take my word for it? ",
    "start": "2065270",
    "end": "2072300"
  },
  {
    "text": "Does anyone want to? So, intuitively, the idea is\nthat if you had the better path here, say that\npath would be s3,",
    "start": "2072300",
    "end": "2079359"
  },
  {
    "text": "then I could replace\nthis, sorry. p3. I could replace this with p3. And I would have a\nbetter path overall.",
    "start": "2079360",
    "end": "2086594"
  },
  {
    "text": "And that would\ncontradict the fact that this is the best path. So this part of the path\nhas to be a shortest path",
    "start": "2086594",
    "end": "2093600"
  },
  {
    "text": "to get from s to d. So I've broken up my\nproblem to get from s to g,",
    "start": "2093600",
    "end": "2100250"
  },
  {
    "text": "into saying, I want to get\nfrom s to d, from s to e. Or, from s to f and\nthen cross one edge.",
    "start": "2100250",
    "end": "2106570"
  },
  {
    "text": "And then the ways I get from\ns to d from s to e, or from s to f, have to be optimal.",
    "start": "2106570",
    "end": "2113150"
  },
  {
    "text": "I've already encoded that here. And nobody asked me,\nyo, is this true?",
    "start": "2113150",
    "end": "2118430"
  },
  {
    "text": "Can I take a longer path here? And have a better solution? The answer is no.",
    "start": "2118430",
    "end": "2123520"
  },
  {
    "text": "In some problems,\nthe answer is yes. Those are not\nproblems that you can solve with dynamic programming.",
    "start": "2123520",
    "end": "2129790"
  },
  {
    "text": "if, in your problems,\nthat's the case, you probably forgot to account\nfor some part of the state.",
    "start": "2129790",
    "end": "2136522"
  },
  {
    "text": "AUDIENCE: What kind\nof problems would it be where that wouldn't be true? PROFESSOR: Well,\nremember the quiz problem",
    "start": "2136522",
    "end": "2142619"
  },
  {
    "text": "with the gas stations? If you don't account for the\ngas, if you do Dijkstra, then,",
    "start": "2142620",
    "end": "2149280"
  },
  {
    "text": "well. Guess what? Shortest path in\nthe graph, if that",
    "start": "2149280",
    "end": "2154700"
  },
  {
    "text": "doesn't account for gas\nstops, if you start accounting for the cost of\nrefilling, this path",
    "start": "2154700",
    "end": "2160410"
  },
  {
    "text": "might be longer than a\npath that goes like this. So, it's longer in\nterms of road stalls.",
    "start": "2160410",
    "end": "2165970"
  },
  {
    "text": "But has fewer, or has cheaper,\ngas stations on the way.",
    "start": "2165970",
    "end": "2171170"
  },
  {
    "text": "So then, there's no\noptimal substructure. And that's because you didn't\naccount for the fuel states.",
    "start": "2171170",
    "end": "2177850"
  },
  {
    "text": "OK. Probably not the best example. Sorry for bringing\nup painful memories.",
    "start": "2177850",
    "end": "2183380"
  },
  {
    "text": "But the point is,\nusually when you have this with our problems, you\ndidn't account for the state. All the problems that are\nsolved with dynamic programming",
    "start": "2183380",
    "end": "2191539"
  },
  {
    "text": "have this thing called\noptimal substructure. And this is sort\nof how it works.",
    "start": "2191540",
    "end": "2197341"
  },
  {
    "text": "OK. I have no idea how much time I\nhave because my phone crashed. So can anyone help me?",
    "start": "2197341",
    "end": "2202770"
  },
  {
    "text": "Five minutes. 10 minutes. Sorry. AUDIENCE: Seven minutes. PROFESSOR: OK. ",
    "start": "2202770",
    "end": "2209710"
  },
  {
    "text": "What else do you\nguys want to see? AUDIENCE: Cycles.",
    "start": "2209710",
    "end": "2215730"
  },
  {
    "text": "[INAUDIBLE] PROFESSOR: OK. Is everyone happy with cycles?",
    "start": "2215730",
    "end": "2221800"
  },
  {
    "text": "OK. Almost everyone, so\nthat's good enough. ",
    "start": "2221800",
    "end": "2228550"
  },
  {
    "text": "OK. Let's do cycles. We have seven minutes. ",
    "start": "2228550",
    "end": "2245380"
  },
  {
    "text": "So, suppose I have this graph. Source going a going\nto be going to c.",
    "start": "2245380",
    "end": "2255440"
  },
  {
    "text": " And then the costs\nare 1 minus 1.",
    "start": "2255440",
    "end": "2263050"
  },
  {
    "text": "1. 1.  Can I solve it\nusing that method?",
    "start": "2263050",
    "end": "2269180"
  },
  {
    "text": " Probably not. Let's try to write\nthe recursions",
    "start": "2269180",
    "end": "2277690"
  },
  {
    "text": "to see what we get\nfor the formulas. So, dsa is--",
    "start": "2277690",
    "end": "2282800"
  },
  {
    "text": "AUDIENCE: 1. PROFESSOR: --minimum. Yeah, it's 1. But it's the minimum\nof dss plus weight sa.",
    "start": "2282800",
    "end": "2294450"
  },
  {
    "text": " ds-- well, almost.",
    "start": "2294450",
    "end": "2300720"
  },
  {
    "text": " Actually, it's not 1.",
    "start": "2300720",
    "end": "2306240"
  },
  {
    "text": "Likely. You're confusing me again. There's one more edges that\nthey have to account for. AUDIENCE: Oh.",
    "start": "2306240",
    "end": "2313480"
  },
  {
    "text": "PROFESSOR: dsc plus weight. I'm going to fail today. I'm tired.",
    "start": "2313480",
    "end": "2319220"
  },
  {
    "text": "AUDIENCE: ca. PROFESSOR: OK. So we accounted for both\nedges coming in now.",
    "start": "2319220",
    "end": "2325099"
  },
  {
    "text": "dsb is minimum of\ndsa plus weight ab.",
    "start": "2325100",
    "end": "2331300"
  },
  {
    "text": " dsc is minimum of\ndsb plus weight bc.",
    "start": "2331300",
    "end": "2340710"
  },
  {
    "text": " Right? And dss is 0 because we\npromised that's how we start.",
    "start": "2340710",
    "end": "2347742"
  },
  {
    "text": " OK. Now what if I try\nevaluate these?",
    "start": "2347742",
    "end": "2352900"
  },
  {
    "text": "Is there a sane order in\nwhich I can evaluate them? Nope.",
    "start": "2352900",
    "end": "2358170"
  },
  {
    "text": "Let's see why. If I try to evaluate\nsa, this depends on sc.",
    "start": "2358170",
    "end": "2366214"
  },
  {
    "text": "AUDIENCE: Which\nwe don't have yet. PROFESSOR: sc is here.\nsc depends on sb.",
    "start": "2366214",
    "end": "2371809"
  },
  {
    "text": "sb is here. And it depends on sa. Which was.",
    "start": "2371810",
    "end": "2378790"
  },
  {
    "text": "So we have this infinite\nrecursion, right? They all depend on each other.",
    "start": "2378790",
    "end": "2383950"
  },
  {
    "text": "There's a loop here. There's a negative cycle. Can't use this algorithm.",
    "start": "2383950",
    "end": "2390450"
  },
  {
    "text": "That's a shame. What can we do instead? PROFESSOR: Show a negative node.",
    "start": "2390450",
    "end": "2396135"
  },
  {
    "text": "A negative weight. half. PROFESSOR: Sorry? AUDIENCE: Can we just get rid\nof the negative weight half?",
    "start": "2396135",
    "end": "2401940"
  },
  {
    "text": "PROFESSOR: No. That's the best edge. That's probably going to be\npart of the solution, right? AUDIENCE: Can we add\n1 to all the edges?",
    "start": "2401940",
    "end": "2409184"
  },
  {
    "text": "PROFESSOR: That's still\ngoing to have a cycle. I still won't be\nable to run this. AUDIENCE: Oh, yeah. AUDIENCE: Bellman-Ford.",
    "start": "2409184",
    "end": "2414410"
  },
  {
    "text": " PROFESSOR: Bellman-ford. AUDIENCE: That's not dynamic.",
    "start": "2414410",
    "end": "2420110"
  },
  {
    "text": "PROFESSOR: OK. Well, one way to do it\nis Bellman-Ford, right? Another way, which we\nwent through last time, is to break the cycle.",
    "start": "2420110",
    "end": "2427110"
  },
  {
    "text": "And the way we break\nthe cycle is we add the path length\ninto the equation.",
    "start": "2427110",
    "end": "2432440"
  },
  {
    "start": "2432440",
    "end": "2439379"
  },
  {
    "text": "So, I'm going to\nlook at the distance from a source to some\nnode, so the distance",
    "start": "2439379",
    "end": "2444730"
  },
  {
    "text": "from a source to some node, as\nthe distance from the source",
    "start": "2444730",
    "end": "2451310"
  },
  {
    "text": "to some other node\nplus the edge weight. This is what I\nhad before, right?",
    "start": "2451310",
    "end": "2457660"
  },
  {
    "text": "Nothing new here. So dsv is the minimum\nover all the edges of dsu",
    "start": "2457660",
    "end": "2465910"
  },
  {
    "text": "plus weight uv, Right? Minimum over all uv.",
    "start": "2465910",
    "end": "2471880"
  },
  {
    "text": "That's our edges. Right? This is the old stuff. Now, we're going to\nsay this instead.",
    "start": "2471880",
    "end": "2477970"
  },
  {
    "text": "The distance from s to v,\nusing a path of length k,",
    "start": "2477970",
    "end": "2484150"
  },
  {
    "text": "is the minimum over all the\nedges of the distance from s",
    "start": "2484150",
    "end": "2491279"
  },
  {
    "text": "to u, using a path\nof what length? If this path is length k.",
    "start": "2491280",
    "end": "2500200"
  },
  {
    "text": "So k edges. How many edges do I have here? AUDIENCE: k equals 1. ",
    "start": "2500200",
    "end": "2508560"
  },
  {
    "text": "PROFESSOR: So this is\ndistance su using k minus 1 plus the weight of uv.",
    "start": "2508560",
    "end": "2517090"
  },
  {
    "text": "AUDIENCE: So what's the\ndifference between the two? PROFESSOR: So, this\nwill always decrease.",
    "start": "2517090",
    "end": "2525240"
  },
  {
    "text": "So I guarantee that they will\nnot have an infinite recursion.",
    "start": "2525240",
    "end": "2530770"
  },
  {
    "text": "This is the magic\nthat makes it work. Now, an equivalent way\nof looking at this, is building a graph.",
    "start": "2530770",
    "end": "2535780"
  },
  {
    "text": "That's what we've\nbeen doing so far. So let's build an\nequivalent graph to this.",
    "start": "2535780",
    "end": "2541167"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "2541167",
    "end": "2546770"
  },
  {
    "text": "PROFESSOR: It's going to\nget to 0 eventually, right? So when k is 0, the distance\nfrom the source to itself is 0.",
    "start": "2546770",
    "end": "2556220"
  },
  {
    "text": "But the distance from the source\nto any other nodes is infinity.",
    "start": "2556220",
    "end": "2562875"
  },
  {
    "text": "Because from the\nsource, we can't get to anywhere else in 0 edges. We can't teleport. ",
    "start": "2562875",
    "end": "2570226"
  },
  {
    "text": "So let's build a graph to\nget the intuition for this. This looks mathy. This looks too mathy.",
    "start": "2570227",
    "end": "2576770"
  },
  {
    "text": "So, at the first layer,\nyou only have the source. You can only get from\nthe source to itself by not crossing any edges.",
    "start": "2576770",
    "end": "2583849"
  },
  {
    "text": "At level one, you potentially\nhave all the nodes. If the source is\nconnected to everything, you might have all the nodes.",
    "start": "2583850",
    "end": "2589278"
  },
  {
    "text": "So, s1, a1, b1, c1.",
    "start": "2589278",
    "end": "2595770"
  },
  {
    "text": "Where can you get\nfrom the source? AUDIENCE: To a. PROFESSOR: To a.",
    "start": "2595770",
    "end": "2602320"
  },
  {
    "text": "What's the cost of the edge? AUDIENCE: 1. PROFESSOR: OK. Now, let's build a second layer.",
    "start": "2602320",
    "end": "2607770"
  },
  {
    "text": "s2, a2, b2, c2.",
    "start": "2607770",
    "end": "2615940"
  },
  {
    "text": "So someone tell me the edges. So, assuming I can get\nto this node using one",
    "start": "2615940",
    "end": "2621130"
  },
  {
    "text": "edge, how can I get to this\nother node using two edges? ",
    "start": "2621130",
    "end": "2626882"
  },
  {
    "text": "AUDIENCE: A to b. PROFESSOR: OK. a to b. a1 to b2. AUDIENCE: 2. PROFESSOR: OK.",
    "start": "2626882",
    "end": "2633390"
  },
  {
    "text": "Cost? AUDIENCE: 1 [INAUDIBLE]. A1 to c-- AUDIENCE: That's negative 1.",
    "start": "2633390",
    "end": "2639319"
  },
  {
    "text": "PROFESSOR: a1 to b2. Thank you. ",
    "start": "2639320",
    "end": "2644349"
  },
  {
    "text": "OK. AUDIENCE: [INAUDIBLE]. PROFESSOR: Sorry? AUDIENCE: Are we\ndoing anything else? PROFESSOR: I think so.",
    "start": "2644350",
    "end": "2649940"
  },
  {
    "text": "So, if I'm at b using one edge,\nI can get to c using two edges. Cost?",
    "start": "2649940",
    "end": "2655494"
  },
  {
    "text": "AUDIENCE: 1. PROFESSOR: OK. If I'm at c using one edge-- AUDIENCE: a.",
    "start": "2655495",
    "end": "2661632"
  },
  {
    "text": "PROFESSOR: --using two edges. Cost? AUDIENCE: 1. PROFESSOR: OK. And if I'm at s using one edge?",
    "start": "2661632",
    "end": "2669220"
  },
  {
    "text": "AUDIENCE: a. AUDIENCE: [INAUDIBLE] PROFESSOR: Can you? AUDIENCE: There's now edge.",
    "start": "2669220",
    "end": "2676122"
  },
  {
    "text": "PROFESSOR: There's no edge. AUDIENCE: I thought it was\njust like an assumed edge. PROFESSOR: Nope. Nope. Not an edge.",
    "start": "2676122",
    "end": "2682000"
  },
  {
    "text": "As to a, cost? AUDIENCE: 1. PROFESSOR: 1. OK. Let's build a third level.",
    "start": "2682000",
    "end": "2688380"
  },
  {
    "text": "s3, a3, b3, c3.",
    "start": "2688380",
    "end": "2693884"
  },
  {
    "text": " Someone dictate\nthe edges please.",
    "start": "2693885",
    "end": "2699896"
  },
  {
    "text": "AUDIENCE: S2 to a3. With 1. I mean, it's going\nto be the exact same.",
    "start": "2699896",
    "end": "2706810"
  },
  {
    "text": "PROFESSOR: Yep. a2 to b3 minus 1.",
    "start": "2706810",
    "end": "2712440"
  },
  {
    "text": "b2 to c3 1. And c2 to a3 1.",
    "start": "2712440",
    "end": "2720580"
  },
  {
    "text": "So these are exactly\nthe same edges, right? Because they're the\noriginal edges in the graph. Every edge in the graph\ncan connect to levels here.",
    "start": "2720580",
    "end": "2728520"
  },
  {
    "text": " So, all edges.",
    "start": "2728520",
    "end": "2734585"
  },
  {
    "text": " All edges.",
    "start": "2734585",
    "end": "2739829"
  },
  {
    "text": "All edges from s.",
    "start": "2739830",
    "end": "2745790"
  },
  {
    "text": "How many layers do I need?  AUDIENCE: e.",
    "start": "2745790",
    "end": "2752367"
  },
  {
    "text": "PROFESSOR: OK. Pretty close. Let's try something smaller. AUDIENCE: a.",
    "start": "2752367",
    "end": "2757688"
  },
  {
    "text": "AUDIENCE: Oh. That makes no sense. PROFESSOR: So, what's the\nlongest path in a graph?",
    "start": "2757688",
    "end": "2764120"
  },
  {
    "text": "Graph of v vertices. What is the longest path? AUDIENCE: The\nnumber [INAUDIBLE]. PROFESSOR: The\nlongest shortest path.",
    "start": "2764120",
    "end": "2769620"
  },
  {
    "text": "AUDIENCE: v minus 1. PROFESSOR: v minus 1. That's how Bellman-Ford\nhas v minus 1 runs, right?",
    "start": "2769620",
    "end": "2774800"
  },
  {
    "text": "AUDIENCE: Oh. PROFESSOR: So, a shortest\npath can't have a cycle. If it has a cycle, then it\nmeans it's an infinite cycle.",
    "start": "2774800",
    "end": "2781500"
  },
  {
    "text": "So there's no solution. Shortest paths have\nno cycles therefore, even if they go through\nthe entire graph,",
    "start": "2781500",
    "end": "2786650"
  },
  {
    "text": "they're going to\nhave v minus 1 edges. So I'm going to have\nv minus 1 layers.",
    "start": "2786650",
    "end": "2791890"
  },
  {
    "text": " Here, I drew three\nlayers, so I'm done.",
    "start": "2791890",
    "end": "2798060"
  },
  {
    "text": "That's why I stopped at three. So let's see how many nodes\nand how many edges we're going to have if we do\nthis transformation.",
    "start": "2798060",
    "end": "2804371"
  },
  {
    "text": " v prime is-- so, how many times\nam I going to copy the graph?",
    "start": "2804371",
    "end": "2817892"
  },
  {
    "text": "AUDIENCE: Two or thee times. AUDIENCE: Three times. PROFESSOR: OK. And in general terms? AUDIENCE: v minus 1.",
    "start": "2817892",
    "end": "2823230"
  },
  {
    "text": "AUDIENCE: v minus 1 times. PROFESSOR: OK. So I'm going to copy the\ngraph v minus 1 times.",
    "start": "2823230",
    "end": "2828920"
  },
  {
    "text": "And then I'm going to add\nthat one source, right? Doesn't really matter because\nit's order of b squared.",
    "start": "2828920",
    "end": "2834820"
  },
  {
    "text": " How many edges? ",
    "start": "2834820",
    "end": "2841801"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "2841801",
    "end": "2847070"
  },
  {
    "text": "PROFESSOR: Order of v times e. We can do the math\nthat's whatever. Let's say it's\nsomething like this. So the running time-- this\ngraph is acyclic, right?",
    "start": "2847070",
    "end": "2855060"
  },
  {
    "text": "All the nodes are going forward. The new graph that I have here.",
    "start": "2855060",
    "end": "2860940"
  },
  {
    "text": "AUDIENCE: Yeah. PROFESSOR: So, I can\nuse the DAG algorithm. ",
    "start": "2860940",
    "end": "2866380"
  },
  {
    "text": "So the running time, if\nI use the DAG algorithm, is v prime plus e prime.",
    "start": "2866380",
    "end": "2872220"
  },
  {
    "text": "Which is? ",
    "start": "2872220",
    "end": "2877425"
  },
  {
    "text": "AUDIENCE: v. PROFESSOR: Thank you. AUDIENCE: Or is it ve? PROFESSOR: So, it's v\nsquared plus ve, which is ve,",
    "start": "2877426",
    "end": "2884020"
  },
  {
    "text": "for most purposes. And this is? AUDIENCE: Bellman-Ford. PROFESSOR: Bellman-Ford.",
    "start": "2884020",
    "end": "2890450"
  },
  {
    "text": "So this is Bellman-Ford. This is what Bellman-Ford does. Except when you're\ncoding it up, it",
    "start": "2890450",
    "end": "2895530"
  },
  {
    "text": "relaxes the edges\nin a different way. But this is the intuition\nbehind Bellman-Ford.",
    "start": "2895530",
    "end": "2900700"
  },
  {
    "text": "And this is an easy way to\nsee why Bellman-Ford works. ",
    "start": "2900700",
    "end": "2910768"
  },
  {
    "text": "AUDIENCE: So,\npractically, we really wouldn't want to do\ndynamic programming. We just want to run\nBellman-Ford because that's",
    "start": "2910769",
    "end": "2917163"
  },
  {
    "text": "less code, right? PROFESSOR: So, this is\nthe dynamic programming view of Bellman-Ford.",
    "start": "2917164",
    "end": "2922369"
  },
  {
    "text": " Write Bellman-Ford. There's a reason why we taught\nyou to write it that way.",
    "start": "2922370",
    "end": "2928760"
  },
  {
    "text": "It's going to be shorter. This just gives\nyou more intuition. And it shows you how\nthe DAG algorithm",
    "start": "2928760",
    "end": "2934750"
  },
  {
    "text": "relates to Bellman-Ford. And this is how we handle\ncycles, which are removed. So, that means I have fulfilled\nmy promise of covering",
    "start": "2934750",
    "end": "2942869"
  },
  {
    "text": "two of the issues that\nI had on the board. Yes. So any questions about this?",
    "start": "2942870",
    "end": "2948325"
  },
  {
    "text": " So, we didn't do the\npseudocode for the shortest",
    "start": "2948325",
    "end": "2954640"
  },
  {
    "text": "path using DAGs. The code that we gave\nyou in the code handout matches the pseudocode\nthat you'd write.",
    "start": "2954640",
    "end": "2962440"
  },
  {
    "text": "Yes? AUDIENCE: So, if all edges\nwere negative 1 here, except for the top edge,\nlooking at this graph over here,",
    "start": "2962440",
    "end": "2970760"
  },
  {
    "text": "how would the search go through,\nsuch that it would find, lik,e negative two weight half?",
    "start": "2970760",
    "end": "2979400"
  },
  {
    "text": "PROFESSOR: So these\nedges are minus 1? AUDIENCE: Yeah. PROFESSOR: Well, do you have\na solution in this case?",
    "start": "2979400",
    "end": "2985408"
  },
  {
    "text": " AUDIENCE: It's no.",
    "start": "2985408",
    "end": "2991160"
  },
  {
    "text": "PROFESSOR: No.  But you could have this, right?",
    "start": "2991160",
    "end": "2998490"
  },
  {
    "text": "And expect the\nwhole thing to work. AUDIENCE: No, that's still\nnot, that's not making sense.",
    "start": "2998490",
    "end": "3003912"
  },
  {
    "text": "PROFESSOR: Is it? AUDIENCE: It's negative 1 cycle. PROFESSOR: Oh, yeah. That's unfortunate. OK. Never mind.",
    "start": "3003912",
    "end": "3009780"
  },
  {
    "text": "Do like this? ",
    "start": "3009780",
    "end": "3016630"
  },
  {
    "text": "OK. AUDIENCE: So, also,\nlooking at the graph, there's only one natural\npath that you can take. PROFESSOR: Yep.",
    "start": "3016630",
    "end": "3022000"
  },
  {
    "text": "So, if I go from s to\nc, like this, sabc,",
    "start": "3022000",
    "end": "3028590"
  },
  {
    "text": "this is going to\nbe s0, a1, b2, c3.",
    "start": "3028590",
    "end": "3034850"
  },
  {
    "text": "So, all the paths go ahead. AUDIENCE: So, what if I\nwanted to find the shortest path to s to b?",
    "start": "3034850",
    "end": "3041281"
  },
  {
    "text": "Like, in terms of actually\nwriting an algorithm, would it be s0, a1, b2, or s1?",
    "start": "3041281",
    "end": "3046450"
  },
  {
    "text": "a2, b3. PROFESSOR: OK. So, if you actually want\nto read the shortest path, then the shortest path could\nhave length 1, length 2,",
    "start": "3046450",
    "end": "3053910"
  },
  {
    "text": "or length 3, right? I don't know. So I would have to\nlook at all these. AUDIENCE: Oh.",
    "start": "3053910",
    "end": "3059108"
  },
  {
    "text": "OK. So you just run it from\ns0 to any b, basically.",
    "start": "3059108",
    "end": "3064790"
  },
  {
    "text": "PROFESSOR: So, the algorithm\nthat we have there computes the path from one source\nto everything else.",
    "start": "3064790",
    "end": "3070970"
  },
  {
    "text": "So I run it. It runs. Computes all the shortest paths. And then I have to\nread these ones. And get the smallest one.",
    "start": "3070970",
    "end": "3078279"
  },
  {
    "text": "That's a question. Thank you. Yeah, that is a detail\nthat I left out. Thank you.",
    "start": "3078280",
    "end": "3083339"
  },
  {
    "text": " So, no more cycles.",
    "start": "3083339",
    "end": "3088770"
  },
  {
    "start": "3088770",
    "end": "3095011"
  },
  {
    "text": "OK. Any other questions?  Yes? AUDIENCE: I'm still, like, on\nthe initial problem and stuff.",
    "start": "3095011",
    "end": "3101699"
  },
  {
    "text": "A bit of a disconnect. When you were underlining\nstuff, like the sa,",
    "start": "3101699",
    "end": "3106810"
  },
  {
    "text": "it seemed to me that,\nlike, in that case, when you're going\nforward, you're never",
    "start": "3106810",
    "end": "3113289"
  },
  {
    "text": "going to stop because\nyou're doing recursion. So you never have a\nbeginning point, almost.",
    "start": "3113290",
    "end": "3121329"
  },
  {
    "text": "Effectively, if you, like-- PROFESSOR: So, do you mean here? AUDIENCE: Well, yeah. PROFESSOR: So, in that case,\nthis is the beginning point.",
    "start": "3121330",
    "end": "3128614"
  },
  {
    "text": "AUDIENCE: Right. PROFESSOR: If I go through the\nnodes in the topological sort order, then all I need\nis one beginning point.",
    "start": "3128614",
    "end": "3135070"
  },
  {
    "text": "Because everything else\nwill refer back to that. There has to be a\ntopological sort order. And the first node in\nthat order is my source.",
    "start": "3135070",
    "end": "3141660"
  },
  {
    "text": " And, if we have cycles, then the\nbeginning conditions are here.",
    "start": "3141660",
    "end": "3152270"
  },
  {
    "text": "So that's why I'm only\ndrawing this vertex. Because these other\nvertices wouldn't be useful. ",
    "start": "3152270",
    "end": "3161849"
  },
  {
    "text": "OK. So then, that being said, don't\nforget your quizzes and happy Thanksgiving.",
    "start": "3161850",
    "end": "3167400"
  }
]