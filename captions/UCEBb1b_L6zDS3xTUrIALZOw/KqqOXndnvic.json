[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation, or\nview additional materials",
    "start": "6360",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "21222"
  },
  {
    "text": "SRINIVAS DEVADAS: All\nright, let's get started. Good morning everyone. I see a lot of tired faces.",
    "start": "21222",
    "end": "28210"
  },
  {
    "text": "I'm not tired. Why are you tired? [LAUGHTER]  I only lecture half the time. You guys take the\nclass all the time.",
    "start": "28210",
    "end": "36240"
  },
  {
    "text": "So today's lecture is\nabout hash functions.",
    "start": "36240",
    "end": "41640"
  },
  {
    "text": "And you may think that you know\na lot about hash functions, and you probably do.",
    "start": "41640",
    "end": "47860"
  },
  {
    "text": "But what we're going to do\ntoday is talk about really a completely different\napplication of hash functions,",
    "start": "47860",
    "end": "54990"
  },
  {
    "text": "and a new set of\nproperties that we're going to require\nof hash functions",
    "start": "54990",
    "end": "60190"
  },
  {
    "text": "that I'll elaborate on. And we're going to see a bunch\nof different applications to things like\npassword protection,",
    "start": "60190",
    "end": "66700"
  },
  {
    "text": "checking the integrity\nof files, auctions, and so on and so forth. So a little bit of\na different lecture.",
    "start": "66700",
    "end": "72940"
  },
  {
    "text": "Both today and on\nThursday I'm going to be going to be doing\ncryptography and applications,",
    "start": "72940",
    "end": "78320"
  },
  {
    "text": "not too much of algorithms. But we will do a little bit\nof analysis with respect to whether properties\nare satisfied,",
    "start": "78320",
    "end": "85390"
  },
  {
    "text": "in this case by hash\nfunctions or not. So let's just dive right in. You all know what\nhash functions are.",
    "start": "85390",
    "end": "93240"
  },
  {
    "text": "There's no real change\nin the definition. But the kinds of hash\nfunctions that we're",
    "start": "93240",
    "end": "99369"
  },
  {
    "text": "going to be looking at\ntoday are quite different from the simple hash\nfunctions, like taking a mod",
    "start": "99370",
    "end": "105590"
  },
  {
    "text": "with a prime number that\nwe've looked at in the past. And the notion of\ncollisions is going",
    "start": "105590",
    "end": "111680"
  },
  {
    "text": "to come up again,\nexcept that again we're going to raise the\nstakes a little bit. So a hash function\nmaps arbitrary",
    "start": "111680",
    "end": "124100"
  },
  {
    "text": "strings-- let me do this right. ",
    "start": "124100",
    "end": "131940"
  },
  {
    "text": "So you're not making a statement\nabout the length of the string. ",
    "start": "131940",
    "end": "138440"
  },
  {
    "text": "You will break it up, even if\nyou had a string of length 512,",
    "start": "138440",
    "end": "143490"
  },
  {
    "text": "or maybe it was 27, you do\nwant to get a number out of it.",
    "start": "143490",
    "end": "148830"
  },
  {
    "text": "In a specific\nrange there's going to be a number of\nbits associated",
    "start": "148830",
    "end": "154189"
  },
  {
    "text": "with our hash functions. And previously we\nhad a number of slots associated with the output\nof the hash function.",
    "start": "154190",
    "end": "159620"
  },
  {
    "text": "But the input\ncould be arbitrary. And these arbitrary\nstrings of data",
    "start": "159620",
    "end": "168080"
  },
  {
    "text": "are going to get\nmapped, as I just said, to a fixed length output.",
    "start": "168080",
    "end": "173190"
  },
  {
    "text": " And we're going to\nthink about this fixed length as being a\nnumber of bits today,",
    "start": "173190",
    "end": "181590"
  },
  {
    "text": "as opposed to slots\nin the hash table. Because we really aren't\ngoing to be storing",
    "start": "181590",
    "end": "188170"
  },
  {
    "text": "a dictionary or a hash\ntable in the applications we're going to look at today. It's simply a question\nof computing a hash.",
    "start": "188170",
    "end": "194750"
  },
  {
    "text": "And because the\nfixed length output is going to be something on the\norder of 160-bits, or 256-bits,",
    "start": "194750",
    "end": "203879"
  },
  {
    "text": "there's no way that you\ncould store two arrays to 160 elements in a hash\ntable, or even two arrays to 64",
    "start": "203880",
    "end": "213370"
  },
  {
    "text": "really. And so we're going\nto just assume that we're computing\nthese hashes",
    "start": "213370",
    "end": "221879"
  },
  {
    "text": "and using them for\ncertain applications. I just wrote output\ntwice I guess.",
    "start": "221880",
    "end": "228800"
  },
  {
    "text": "So map it to a\nfixed length output. We want to do this in a\ndeterministic fashion.",
    "start": "228800",
    "end": "238990"
  },
  {
    "text": "So once we've computed the\nhash of a particular arbitrary",
    "start": "238990",
    "end": "244430"
  },
  {
    "text": "string that is\ngiven to us, we want to be able to repeat\nthat process to get",
    "start": "244430",
    "end": "250150"
  },
  {
    "text": "the same hash every time. We want to do this\nin a public fashion. So everything is public.",
    "start": "250150",
    "end": "256170"
  },
  {
    "text": "There's no secrecy. There's keyed hash functions\nthat we won't actually look at today, but\nmaybe in passing",
    "start": "256170",
    "end": "262210"
  },
  {
    "text": "I'll mention it next time. We're not looking at\nkeyed hash functions here. There's no secrets in any of\nthe descriptions of algorithms",
    "start": "262210",
    "end": "270920"
  },
  {
    "text": "or techniques I'm going\nto be describing today. And we want this to be random.",
    "start": "270920",
    "end": "277720"
  },
  {
    "text": "We want it to look random. True randomness is going to\nbe impossible to achieve,",
    "start": "277720",
    "end": "283750"
  },
  {
    "text": "given our other constraints. But we're going to\ntry and approximate it with pseudo-randomness.",
    "start": "283750",
    "end": "288880"
  },
  {
    "text": "But we'd want it to\nlook random, because we are interested-- as we were\nin the case of dictionaries",
    "start": "288880",
    "end": "295210"
  },
  {
    "text": "and the regular application\nof hash functions-- we are interested in\nminimizing collisions.",
    "start": "295210",
    "end": "300870"
  },
  {
    "text": "And in fact we're going to\nraise the stakes really high with respect to collisions. We want it to be impossible\nfor you, or anyone else,",
    "start": "300870",
    "end": "309870"
  },
  {
    "text": "to discover collisions. And that's going to be an\nimportant property of collision",
    "start": "309870",
    "end": "315150"
  },
  {
    "text": "resistance that obviously is\ngoing to require randomness.",
    "start": "315150",
    "end": "320520"
  },
  {
    "text": "And those are the\nthree things we want, deterministic,\npublic, and random.",
    "start": "320520",
    "end": "326840"
  },
  {
    "text": "And so just from a function\ndescription standpoint",
    "start": "326840",
    "end": "332870"
  },
  {
    "text": "you have 0, 1 star here,\nwhich implies that it's an arbitrary length strength. And we want to go to 0, 1 d.",
    "start": "332870",
    "end": "341830"
  },
  {
    "text": "And this is a\nstring of length d. ",
    "start": "341830",
    "end": "349169"
  },
  {
    "text": "So that means that\nyou're getting d-bits out from your hash function. And here the length is\ngreater than or equal to 0.",
    "start": "349170",
    "end": "356630"
  },
  {
    "text": " So that's it.",
    "start": "356630",
    "end": "361750"
  },
  {
    "text": "Not a lot that's new here. But a few things that are going\nto be a little bit different.",
    "start": "361750",
    "end": "368880"
  },
  {
    "text": "And there's some subtleties\nhere that we'll get to. I want to emphasize two things,\none of which I just said.",
    "start": "368880",
    "end": "378600"
  },
  {
    "text": "There's no secrecy, no secret\nkeys here in the hash functions that we are describing.",
    "start": "378600",
    "end": "385350"
  },
  {
    "text": "All operations are public. So just like you had your hash\nfunction, which was k mod p,",
    "start": "385350",
    "end": "393330"
  },
  {
    "text": "and p was a prime and p was\npublic and known to everyone who used the dictionary,\neverything here",
    "start": "393330",
    "end": "400600"
  },
  {
    "text": "we are going to be\ntalking about is public. So anyone can compute h. ",
    "start": "400600",
    "end": "411942"
  },
  {
    "text": "And we're going to\nassume that this is poly-time computation--\nnot too surprising-- but I'm",
    "start": "411942",
    "end": "417310"
  },
  {
    "text": "being quite flexible here. When you look at\ndictionaries, and you",
    "start": "417310",
    "end": "423720"
  },
  {
    "text": "think about using dictionaries,\nand using it to implement efficient algorithms,\nwhat is the assumption",
    "start": "423720",
    "end": "430540"
  },
  {
    "text": "we kind of implicitly made--\nare perhaps explicitly in some cases-- with respect\nto computing the hash?",
    "start": "430540",
    "end": "438810"
  },
  {
    "text": "Anybody?  Yeah? AUDIENCE: Constant time? SRINIVAS DEVADAS: Constant time.",
    "start": "438810",
    "end": "445023"
  },
  {
    "text": "We assumed-- so this is not\nnecessarily order 1, right?",
    "start": "445023",
    "end": "453680"
  },
  {
    "text": "So that's important. So we're going to-- I want\nto make sure you're watching.",
    "start": "453680",
    "end": "462180"
  },
  {
    "text": "So you're going to raise\nthe stakes even with respect to the complexity of the hash.",
    "start": "462180",
    "end": "467990"
  },
  {
    "text": "And as you'll see, because\nof the desirable properties, we're going to have to do that. We're going to ask for\nreally a lot with respect",
    "start": "467990",
    "end": "474010"
  },
  {
    "text": "to these hash functions. Nobody can find a\ncollision, right? And if you have something\nas simple as k mod p,",
    "start": "474010",
    "end": "481750"
  },
  {
    "text": "it's going to be trivial\nto find a collision. And so these order\n1 hash functions that you're familiar\nwith aren't going",
    "start": "481750",
    "end": "488380"
  },
  {
    "text": "to make the grade with respect\nto any of the properties that we'll discuss\nin a few minutes.",
    "start": "488380",
    "end": "494500"
  },
  {
    "text": "All right, so remember this\nis poly-time computation. And there's lots of examples\nof these hash functions. And for those of you who are\nkind of into computer security",
    "start": "494500",
    "end": "501820"
  },
  {
    "text": "and cryptography already,\nyou might have heard of examples like MD4 and MD5.",
    "start": "501820",
    "end": "509240"
  },
  {
    "text": "These are versions. MD stands for message digest. These were functions that were\ninvented by Professor Rivest.",
    "start": "509240",
    "end": "515610"
  },
  {
    "text": "And they had d equals\n128 way back when-- 1992,",
    "start": "515610",
    "end": "522969"
  },
  {
    "text": "if I recall-- when\nthey were proposed. And these algorithms have\nsince been broken in the sense",
    "start": "522970",
    "end": "530830"
  },
  {
    "text": "that it was conjectured that\nthey had particular properties of collision resistance that\nit would take exponential time",
    "start": "530830",
    "end": "539060"
  },
  {
    "text": "for anybody to find collisions. And it still kind of\ntakes exponential time,",
    "start": "539060",
    "end": "544490"
  },
  {
    "text": "but 2 raised to 37 is\nexponential at one level,",
    "start": "544490",
    "end": "551040"
  },
  {
    "text": "but constant in another level. So you can kind of do\nit in a few seconds now.",
    "start": "551040",
    "end": "557720"
  },
  {
    "text": "So a little bit of history. I'm not going to spend\na lot of time on this.",
    "start": "557720",
    "end": "563300"
  },
  {
    "text": "MD5 was used to create what was\ncalled a secure hash algorithm.",
    "start": "563300",
    "end": "568399"
  },
  {
    "text": "This is 160-bits. And this is not quite\nbroken at this point.",
    "start": "568400",
    "end": "576330"
  },
  {
    "text": "But that people consider it\nbroken, or soon to be broken.",
    "start": "576330",
    "end": "581920"
  },
  {
    "text": "Right now the\nrecommended algorithm is called SHA-3, secure hash\nalgorithm version three.",
    "start": "581920",
    "end": "590260"
  },
  {
    "text": "And there was a contest\nthat ran for like 18 months, or maybe even longer,\nthat eventually was won",
    "start": "590260",
    "end": "596770"
  },
  {
    "text": "by what turned into the SHA-3. And they had a different name\nfor it that I can't recall.",
    "start": "596770",
    "end": "603200"
  },
  {
    "text": "But it turned into SHA-3. And what happened along the\nway, as we went from MD4,",
    "start": "603200",
    "end": "608220"
  },
  {
    "text": "MD5, SHA-1 to SHA-3, is that\nthis amount of computation that you had to do increased.",
    "start": "608220",
    "end": "614810"
  },
  {
    "text": "And the complexity of\noperations that you had to do in order to compute\nthe hash of an arbitrary string",
    "start": "614810",
    "end": "621690"
  },
  {
    "text": "increased to the\npoint where-- you want to think about this as\n100 rounds of computation.",
    "start": "621690",
    "end": "627720"
  },
  {
    "text": "And certainly order\nd computation, where d is the number of bits.",
    "start": "627720",
    "end": "634200"
  },
  {
    "text": "And perhaps even more. So it's definitely not order 1. So as I said a little bit\nof context with respect",
    "start": "634200",
    "end": "643269"
  },
  {
    "text": "to the things that\nare out there. At the end of the\nlecture I'll give you a sense for how these\nhash functions are built.",
    "start": "643270",
    "end": "649570"
  },
  {
    "text": "We're not going to\nspend a lot of time on creating these\nhash functions. It's really a research topic\nonto itself and not really",
    "start": "649570",
    "end": "656319"
  },
  {
    "text": "in the slope of 6.046. What is in the scope\nof 6.046, and what I think is more\ninteresting, which",
    "start": "656320",
    "end": "662510"
  },
  {
    "text": "is what we'll focus\nour energy and time on, is the properties of\nthese hash functions.",
    "start": "662510",
    "end": "667990"
  },
  {
    "text": "And why these properties\nare useful in a bunch of different apps. And so what is it that we want?",
    "start": "667990",
    "end": "675100"
  },
  {
    "text": "We want a random oracle. We want to essentially\nbuild something",
    "start": "675100",
    "end": "683790"
  },
  {
    "text": "that looks like that,\ndeterministic, public, random. And we're going to\nclaim that what we want",
    "start": "683790",
    "end": "691390"
  },
  {
    "text": "is this random\noracle which has all of these wonderful properties\nthat I'm going to describe. I'm going to describe\nthe random oracle to you,",
    "start": "691390",
    "end": "697850"
  },
  {
    "text": "and then I'm going to tell you\nabout what the properties are. And then unfortunately\nthis is an ideal world",
    "start": "697850",
    "end": "704420"
  },
  {
    "text": "and we can't build\nthis in the real world. And so we're going to\nhave to approximate it.",
    "start": "704420",
    "end": "709919"
  },
  {
    "text": "And that's where the MD4's and\nthe MD5's and the SHA-1's came in, OK?",
    "start": "709919",
    "end": "715200"
  },
  {
    "text": "So this is not\nachievable in practice. ",
    "start": "715200",
    "end": "725560"
  },
  {
    "text": "So what is this oracle? This oracle is on input\nx, belonging to 0,1 star.",
    "start": "725560",
    "end": "737170"
  },
  {
    "text": "So that could be an\narbitrary string. If x not in the book--\nso there's this the book,",
    "start": "737170",
    "end": "746100"
  },
  {
    "text": "all right? And there's this\ninfinite capacity book that has all of the computations\nthat were ever done prior.",
    "start": "746100",
    "end": "755170"
  },
  {
    "text": "And they're always\nstored in the book. And that's how we're\ngoing to get determinism. Because this book\ninitially gets filled in.",
    "start": "755170",
    "end": "762100"
  },
  {
    "text": "All of the entries in\nthe book are filled in using pure randomness. So you flip a coin d\ntimes to determine h of x.",
    "start": "762100",
    "end": "775610"
  },
  {
    "text": "So that's basically it. And you just keep flipping. You have to flip d times.",
    "start": "775610",
    "end": "780950"
  },
  {
    "text": "And so if x was 0, you\nflip d times, d was 160. You flipped a coin 160\ntimes and got a string.",
    "start": "780950",
    "end": "788300"
  },
  {
    "text": "If x were 1, flip 160 times,\nyou get a different string",
    "start": "788300",
    "end": "793430"
  },
  {
    "text": "with very high\nprobability, obviously. And so on and so forth. But what you do is\nyou have this book.",
    "start": "793430",
    "end": "799280"
  },
  {
    "text": "So you're going to record\nx h of x in the book, OK?",
    "start": "799280",
    "end": "809870"
  },
  {
    "text": "So at some level\nyour hash function is this giant look-up\ntable in the sky, right?",
    "start": "809870",
    "end": "815220"
  },
  {
    "text": "Actually not giant, infinite\ncapacity look-up table in the sky. Because you can put\narbitrary strings into this.",
    "start": "815220",
    "end": "822230"
  },
  {
    "text": "And if it's in the book-- this\nis obviously the important part",
    "start": "822230",
    "end": "827910"
  },
  {
    "text": "that gives you determinism--\nthen you return y, where x and y are\nin the book, OK?",
    "start": "827910",
    "end": "838700"
  },
  {
    "text": " So you get a random\nanswer every time,",
    "start": "838700",
    "end": "845040"
  },
  {
    "text": "except as required\nfor consistency with previous answers.",
    "start": "845040",
    "end": "850180"
  },
  {
    "text": "So the very first\ntime you see a string, or-- and the whole world\ncan create this book.",
    "start": "850180",
    "end": "856730"
  },
  {
    "text": "It's public. So if I created the book at\nfirst with a particular string,",
    "start": "856730",
    "end": "862430"
  },
  {
    "text": "let's say Eric. I was the string. And I'm the one who put\nthe entry-- x equals Eric,",
    "start": "862430",
    "end": "869960"
  },
  {
    "text": "and h of x, h of Eric equals\nsome random 160-bit string-- into the book, I get\ncredit for that, right?",
    "start": "869960",
    "end": "876639"
  },
  {
    "text": "But if you come a nanosecond\nlater and ask for h of Eric,",
    "start": "876640",
    "end": "883650"
  },
  {
    "text": "you should get exactly\nwhat got put into the book when I asked for h of Eric.",
    "start": "883650",
    "end": "889850"
  },
  {
    "text": "And so on and so forth. So this is true for everybody. So this is like-- I mean\nbasically impossible to get.",
    "start": "889850",
    "end": "896810"
  },
  {
    "text": "Because not only can\nanybody and everybody query, you have to have this\nordering associated",
    "start": "896810",
    "end": "905190"
  },
  {
    "text": "with people querying the book. And you have to\nhave consistency.",
    "start": "905190",
    "end": "911330"
  },
  {
    "text": "All right. So everyone convinced\nthat we can't build this? All right.",
    "start": "911330",
    "end": "916709"
  },
  {
    "text": "If you took anything\nout of this lecture, that's what you should take. No, no. There's a lot more.",
    "start": "916710",
    "end": "922290"
  },
  {
    "text": "So we want to approximate\nthe random oracle. And we're going to get to that.",
    "start": "922290",
    "end": "928840"
  },
  {
    "text": "Obviously we're going to have to\ndo this in poly-space as well.",
    "start": "928840",
    "end": "934767"
  },
  {
    "text": "So what's wrong with this? Of course this picture is\nI didn't actually say this, but you'd like things to be\npoly-time in terms of space.",
    "start": "934767",
    "end": "942320"
  },
  {
    "text": "You don't want to store\nan infinite number-- this is worse than poly-time,\nworse than exponential time,",
    "start": "942320",
    "end": "948649"
  },
  {
    "text": "because it's arbitrary strings\nthat we're talking about here, right? So you can't possibly do that.",
    "start": "948649",
    "end": "953940"
  },
  {
    "text": "So we have to do\nsomething better. But before I get into how we'd\nactually build this, and give",
    "start": "953940",
    "end": "960180"
  },
  {
    "text": "you a sense of how SHA-1\nand MD5 were built-- and that's going to come\na little bit later--",
    "start": "960180",
    "end": "966220"
  },
  {
    "text": "I want to spend a lot of time\non the what is interesting,",
    "start": "966220",
    "end": "971910"
  },
  {
    "text": "which are the\ndesirable properties. Which you can kind of see\nusing the random oracle. So what is cool about\nthe random oracle",
    "start": "971910",
    "end": "978690"
  },
  {
    "text": "is that it's a simple algorithm. You can understand it. You can't implement it.",
    "start": "978690",
    "end": "984410"
  },
  {
    "text": "But now you can see what\nwonderful properties it gives you. And these properties are\ngoing to be important",
    "start": "984410",
    "end": "990350"
  },
  {
    "text": "for our applications, OK? And so let's get started with a\nbunch of different properties.",
    "start": "990350",
    "end": "996146"
  },
  {
    "text": "And these are all\nproperties that are going to be useful for\nverification or computer",
    "start": "996146",
    "end": "1003030"
  },
  {
    "text": "security applications. The first one, it's not ow,\nit's O, W. It's one-wayness,",
    "start": "1003030",
    "end": "1011100"
  },
  {
    "text": "all right? So one-way, or one-wayness. And it's also called-- you're\nnot going to call it this--",
    "start": "1011100",
    "end": "1023230"
  },
  {
    "text": "but perhaps this is a more\ntechnical term, a more precise",
    "start": "1023230",
    "end": "1029390"
  },
  {
    "text": "term, pre-image resistance. And so what does this mean? Well this is a very\nstrong requirement.",
    "start": "1029390",
    "end": "1035167"
  },
  {
    "text": "I mean a couple of\nother ones are also going to be perhaps stronger. But this is a pretty\nstrong requirement",
    "start": "1035167",
    "end": "1041270"
  },
  {
    "text": "which says it's\ninfeasible, given y,",
    "start": "1041270",
    "end": "1048710"
  },
  {
    "text": "which is in the-- it's basically\na d-bit vector, to find any x",
    "start": "1048710",
    "end": "1065169"
  },
  {
    "text": "such that h of x equals y.",
    "start": "1065170",
    "end": "1070950"
  },
  {
    "text": "And so this is x is\nthe pre-image of y.",
    "start": "1070950",
    "end": "1080120"
  },
  {
    "text": "So what does this say? It says that I want to\ncreate a hash function such that if I give you\na specific-- we call",
    "start": "1080120",
    "end": "1088030"
  },
  {
    "text": "it a 160-bit string, because\nwe're talking SHA-1 here, and that's the hash--\nI'm going to have,",
    "start": "1088030",
    "end": "1096792"
  },
  {
    "text": "it's going to have\nto be impossible for me to discover an x that\nproduced that 160-bit string,",
    "start": "1096792",
    "end": "1105430"
  },
  {
    "text": "OK? Now if you go look\nat our random oracle, you realize that if you\nhad a 160-bit string,",
    "start": "1105430",
    "end": "1112750"
  },
  {
    "text": "and perhaps you\nhave the entire book and you can read\nthe entire book.",
    "start": "1112750",
    "end": "1119289"
  },
  {
    "text": "It's an infinite capacity book. It's got a bunch of stuff in it.",
    "start": "1119290",
    "end": "1124750"
  },
  {
    "text": "And know that any time anyone\nqueried the book the first time",
    "start": "1124750",
    "end": "1129800"
  },
  {
    "text": "for a given x, that there was\nthis random 160-bit number that was generated and\nput into the book.",
    "start": "1129800",
    "end": "1135700"
  },
  {
    "text": "And there's a whole lot\nof these numbers, right? So what's going to\nhappen is, you're going to have to look\nthrough the entire book,",
    "start": "1135700",
    "end": "1141870"
  },
  {
    "text": "this entire potentially\ninfinite capacity book, in order to figure out if this\nparticular y is in the book",
    "start": "1141870",
    "end": "1153500"
  },
  {
    "text": "or not. And that's going to take a long\ntime to do, potentially, OK? So in the case where you\nhave a random oracle you'd",
    "start": "1153500",
    "end": "1163290"
  },
  {
    "text": "have to go through and find--\nlooking at the output hash corresponding to each of the\nentries in the random oracle,",
    "start": "1163290",
    "end": "1170502"
  },
  {
    "text": "you're going to start matching,\nmatch, match, match, match, it's going to take\nyou exponential time. Well actually worse than that,\ngiven the infinite capacity",
    "start": "1170502",
    "end": "1177760"
  },
  {
    "text": "of the book. So this clearly gives you that. Now you may not be a completely\nsatisfied with that answer",
    "start": "1177760",
    "end": "1184070"
  },
  {
    "text": "because you say well,\nyou can't implement that. But we'll talk a\nlittle bit, as I said, about how you could\nactually get this.",
    "start": "1184070",
    "end": "1190410"
  },
  {
    "text": "But what's-- I should be\nclear-- is that the simple hash functions that we've looked\nat in the past just to build",
    "start": "1190410",
    "end": "1199180"
  },
  {
    "text": "dictionaries do not\nsatisfy this, right? So suppose I had h of x\nequals x square mod p.",
    "start": "1199180",
    "end": "1211860"
  },
  {
    "text": "Is this one-way,\ngiven a public p?",
    "start": "1211860",
    "end": "1218049"
  },
  {
    "text": "No of course not, right? Because I'm going to be--\nit's going to be easy for me to do something.",
    "start": "1218050",
    "end": "1224730"
  },
  {
    "text": "Even though this is discrete\narithmetic I could do something like, well, I know that what\nI have here-- actually let's",
    "start": "1224730",
    "end": "1232669"
  },
  {
    "text": "do it with something\nthat's simpler, and then I'll talk\nabout the x squared. If I had something\nas simple as x mod p,",
    "start": "1232670",
    "end": "1238649"
  },
  {
    "text": "I mean that's trivially broken\nin terms of one-wayness. Because I know that h of x could\nbe viewed as the remainder.",
    "start": "1238650",
    "end": "1245900"
  },
  {
    "text": "So anything-- if this\nis h of x, and let's",
    "start": "1245900",
    "end": "1251870"
  },
  {
    "text": "just call that y for a\nsecond, because that's what we had it out there. Something that's a multiple\nof y plus the remainder-- so I",
    "start": "1251870",
    "end": "1260340"
  },
  {
    "text": "could have a-- is that right? Is that what I want? Yeah. No, plus y. So I want a of-- well since\nI can't figure it out,",
    "start": "1260340",
    "end": "1273760"
  },
  {
    "text": "why can't you? What do I need to\nput in there in order to discover an x that\nwould produce a y?",
    "start": "1273760",
    "end": "1284169"
  },
  {
    "text": "Can I write an equation? Yeah? AUDIENCE: Could you\njust write y itself? SRINIVAS DEVADAS: Just y itself.",
    "start": "1284170",
    "end": "1289300"
  },
  {
    "text": "That's right. Good point. Just y itself in this case. Good. I knew you guys were\nsmarter than me.",
    "start": "1289300",
    "end": "1295649"
  },
  {
    "text": "This proves it. So if you just take\ny-- and y remember",
    "start": "1295650",
    "end": "1301500"
  },
  {
    "text": "is going to be something\nthat's 0 to p minus 1, right? And that's it.",
    "start": "1301500",
    "end": "1307519"
  },
  {
    "text": "It just goes through, right? So that's a trivial\nexample, right? Now if I put x squared in\nhere, obviously it's not y,",
    "start": "1307520",
    "end": "1315780"
  },
  {
    "text": "but I could start looking\nat-- what I have here is",
    "start": "1315780",
    "end": "1323050"
  },
  {
    "text": "I'm going to get y that\nlooks like x squared. But I could take\nthe y that I have, take the square root\nof that, and then start",
    "start": "1323050",
    "end": "1329240"
  },
  {
    "text": "looking for x's that give\nme the y that I have. Actually it's not a complicated\nprocess to try and figure out,",
    "start": "1329240",
    "end": "1338019"
  },
  {
    "text": "through trial and\nerror potentially, what an x is that\nproduces a particular y",
    "start": "1338020",
    "end": "1343250"
  },
  {
    "text": "for the kinds of hash\nfunctions that we've looked at, all right? Now as you complicate this\nequation it gets harder.",
    "start": "1343250",
    "end": "1352050"
  },
  {
    "text": "Because you have to invert\nthis set of equations. And that's what\nthe game is going to be when you go create\none-way hash functions.",
    "start": "1352050",
    "end": "1358620"
  },
  {
    "text": "The amount of computation\nthat you do in order to compute the y is going\nto increase to the point",
    "start": "1358620",
    "end": "1364770"
  },
  {
    "text": "where, as I mentioned, you have\n80, 100 rounds of computation, things getting mixed in. And the hope is that you create\nthis circuit, if you will,",
    "start": "1364770",
    "end": "1373210"
  },
  {
    "text": "that has all this\ncomputation in that. Going forwards is\neasy, because you've specified the\nmultiplications and the mods",
    "start": "1373210",
    "end": "1379350"
  },
  {
    "text": "and so on and so forth. But not all of these operations\nhave simple inverses.",
    "start": "1379350",
    "end": "1384830"
  },
  {
    "text": "And going backwards,\nwhich is what you need to do in order\nto break one-wayness,",
    "start": "1384830",
    "end": "1391010"
  },
  {
    "text": "or discover the x\ngiven a y, is going to be harder and harder\nas the computations get",
    "start": "1391010",
    "end": "1397100"
  },
  {
    "text": "more complex, OK? So everyone have a sense\nof what one-wayness is? ",
    "start": "1397100",
    "end": "1404810"
  },
  {
    "text": "So that's one-wayness. There's four other properties,\ntwo of which are very related.",
    "start": "1404810",
    "end": "1410929"
  },
  {
    "text": "CR and TCR. So CR is collision resistance. ",
    "start": "1410930",
    "end": "1422970"
  },
  {
    "text": "It's infeasible to find x and\nx prime such that x not equal",
    "start": "1422970",
    "end": "1434289"
  },
  {
    "text": "to x prime, and h of\nx equals h of x prime,",
    "start": "1434290",
    "end": "1442269"
  },
  {
    "text": "which is of course a collision. ",
    "start": "1442269",
    "end": "1448300"
  },
  {
    "text": "OK? And that just says you have\nthis crazy hash function where",
    "start": "1448300",
    "end": "1454789"
  },
  {
    "text": "you can't discover collisions. Well it would be\nabsolutely wonderful. In fact that's what we wanted\nwhen we built dictionaries.",
    "start": "1454790",
    "end": "1461740"
  },
  {
    "text": "But why don't we use\nSHA-3 in dictionaries? ",
    "start": "1461740",
    "end": "1468410"
  },
  {
    "text": "Why don't we use\nSHA-3 in dictionaries? Yeah? AUDIENCE: Because it's more\ncomplicated than we need. SRINIVAS DEVADAS: Yeah,\nit's horribly slow, right?",
    "start": "1468410",
    "end": "1475270"
  },
  {
    "text": "It would take longer to\ncompute the hash than access the dictionary,\nwhen you actually",
    "start": "1475270",
    "end": "1480740"
  },
  {
    "text": "had a reasonable dictionary\nthat maybe had some collisions. I mean you just go off and\nyou have a linked list,",
    "start": "1480740",
    "end": "1486930"
  },
  {
    "text": "you can afford a few collisions,\nwhat's the big deal, right? So it just doesn't\nmake any sense to use this level of\nheavyweight hash function,",
    "start": "1486930",
    "end": "1497420"
  },
  {
    "text": "even if it satisfies\ncollision resistance-- which some of these are conjectured to\ndo-- for the applications we've",
    "start": "1497420",
    "end": "1504070"
  },
  {
    "text": "looked at. But there'll be other apps\nwhere collision resistance is going to be important. So that's collision resistance.",
    "start": "1504070",
    "end": "1510110"
  },
  {
    "text": "And then there's-- TCR is\ntarget collision resistance.",
    "start": "1510110",
    "end": "1515470"
  },
  {
    "text": "It's a weaker form--\nso sometimes people CR strong collision resistance,\nand TCR weak occlusion",
    "start": "1515470",
    "end": "1524190"
  },
  {
    "text": "resistance. We'll use CR and TCR here. And this says it's\ninfeasible, given",
    "start": "1524190",
    "end": "1535460"
  },
  {
    "text": "x-- so there's a\nspecific x that you want to find a collision\nfor, as opposed",
    "start": "1535460",
    "end": "1541590"
  },
  {
    "text": "to just finding a pair that\ngoes once to x and x prime. And any pair would suffice to\nbreak the collision resistance",
    "start": "1541590",
    "end": "1549700"
  },
  {
    "text": "property. But TCR says is I'm going\nto give you a specific x. And I want you to\nfind an x prime who's",
    "start": "1549700",
    "end": "1557750"
  },
  {
    "text": "hash collides with\nthe hash of x, OK? That's TCR. ",
    "start": "1557750",
    "end": "1576350"
  },
  {
    "text": "OK that's TCR for you. And that just to be clear,\nI think you probably all got this, obviously\nwe want this here",
    "start": "1576350",
    "end": "1583420"
  },
  {
    "text": "because we have a\ndeterministic hash function. And it's a trivial thing\nto say that if you had x,",
    "start": "1583420",
    "end": "1589429"
  },
  {
    "text": "and you had x again, that you\nget the same hash back from it. That's a requirement, really. So we want two distinct x\nand x primes that are not",
    "start": "1589430",
    "end": "1596670"
  },
  {
    "text": "equal that end up colliding. That's really what\na collision is. And so you see the difference\nbetween CR and TCR?",
    "start": "1596670",
    "end": "1604200"
  },
  {
    "text": "Yup? Yeah? AUDIENCE: Are we to\nassume that given an x it's very easy to\nget the h of x back?",
    "start": "1604200",
    "end": "1611105"
  },
  {
    "text": "SRINIVAS DEVADAS:\nSo the question was, given an x, it's poly-time\ncomputation to get h of x.",
    "start": "1611105",
    "end": "1617150"
  },
  {
    "text": "Absolutely. Public poly-time computation\ngiven an x to get h of x.",
    "start": "1617150",
    "end": "1622480"
  },
  {
    "text": "So going this way is easy.",
    "start": "1622480",
    "end": "1628840"
  },
  {
    "text": "Going this way-- I ran\nout of room-- hard.",
    "start": "1628840",
    "end": "1635169"
  },
  {
    "text": "OK? AUDIENCE: So does that mean that\nTCR is basically the same as 1? SRINIVAS DEVADAS: No,\nno, no, absolutely not.",
    "start": "1635170",
    "end": "1642230"
  },
  {
    "text": "TCR says it's OK. You can compute this.",
    "start": "1642230",
    "end": "1647620"
  },
  {
    "text": "You can get x. And you can get h of x. So given x, you know\nthat you can get h of x.",
    "start": "1647620",
    "end": "1653125"
  },
  {
    "text": "I didn't actually put\nthat in the definition. And maybe I should have. So given x you can\nalways get h of x.",
    "start": "1653125",
    "end": "1658860"
  },
  {
    "text": "Remember that. It's easy to get h of x. So any time I say given\nx, you can always add it,",
    "start": "1658860",
    "end": "1664350"
  },
  {
    "text": "saying given x and h of x. So I'm given x. I'm given h of x.",
    "start": "1664350",
    "end": "1669960"
  },
  {
    "text": "I obviously need to\nmap-- I need to discover an x prime such that h of\nx prime equals h of x, OK?",
    "start": "1669960",
    "end": "1678080"
  },
  {
    "text": "Now you have situations\nwhere for-- it",
    "start": "1678080",
    "end": "1684490"
  },
  {
    "text": "may be the case that\nfor particular x's you can actually do this. And that's enough to break TCR.",
    "start": "1684490",
    "end": "1690363"
  },
  {
    "text": " So you have to have\nthis strong property",
    "start": "1690363",
    "end": "1695640"
  },
  {
    "text": "that you really don't want to\nfind collisions are for some--",
    "start": "1695640",
    "end": "1702520"
  },
  {
    "text": "even if there's a constant\nfraction of x's that break the TCR property, you\ndon't like your hash function,",
    "start": "1702520",
    "end": "1709210"
  },
  {
    "text": "OK? Because you might end\nup picking those and go build security applications\nusing those properties.",
    "start": "1709210",
    "end": "1715490"
  },
  {
    "text": "I want to talk a little\nbit about the relationship between OW, CR, and TCR.",
    "start": "1715490",
    "end": "1721240"
  },
  {
    "text": "So I'm going to\nget back to that. And we're going to talking\nabout hash functions that satisfy one property but\ndon't satisfy the other.",
    "start": "1721240",
    "end": "1728076"
  },
  {
    "text": "And I think your\nquestion will probably be answered better, OK? Thanks for the question.",
    "start": "1728076",
    "end": "1733460"
  },
  {
    "text": "So those are the main ones. And really quickly, if you\nwant to spend a lot of time",
    "start": "1733460",
    "end": "1739260"
  },
  {
    "text": "on this-- but I do\nwant to put up-- I think I'll leave\nthese properties up here",
    "start": "1739260",
    "end": "1745320"
  },
  {
    "text": "for the duration. Because it's important for you\nto see these definitions as we",
    "start": "1745320",
    "end": "1750350"
  },
  {
    "text": "look at the\napplications where we require these properties, or\na subset of these properties.",
    "start": "1750350",
    "end": "1757090"
  },
  {
    "text": "But that we have\npseudo randomness. And this is simply a\nfunction of the fact",
    "start": "1757090",
    "end": "1762909"
  },
  {
    "text": "that-- so this is PRF-- we know\nwe can't build a random oracle.",
    "start": "1762910",
    "end": "1771100"
  },
  {
    "text": "And so we're going to have to do\nsomething that's pseudo-random. And basically what\nwe're saying here",
    "start": "1771100",
    "end": "1777840"
  },
  {
    "text": "is the behavior is\nindistinguishable from random.",
    "start": "1777840",
    "end": "1785870"
  },
  {
    "start": "1785870",
    "end": "1790990"
  },
  {
    "text": "So we're going to have to use\nnon-linearity, things that",
    "start": "1790990",
    "end": "1796140"
  },
  {
    "text": "are called non-linear\nfeedback shift registers, to create pseudo-random\nfunctions. There's many ways that we can\ncreate pseudo-random functions.",
    "start": "1796140",
    "end": "1803710"
  },
  {
    "text": "We won't really get into that. But obviously\nthat's what we want. And then the last\none is a bit tricky.",
    "start": "1803710",
    "end": "1814420"
  },
  {
    "text": "And we will have an app that\nrequires this way at the end. But this is infeasible\ngiven h of x",
    "start": "1814420",
    "end": "1829240"
  },
  {
    "text": "to produce h of x prime, where\nx and x prime are-- and it gets",
    "start": "1829240",
    "end": "1842010"
  },
  {
    "text": "a little bit fuzzy here-- are\nrelated in some fashion, right?",
    "start": "1842010",
    "end": "1850150"
  },
  {
    "text": "So a concrete\nexample of this is, let's say that x\nprime is x plus 1.",
    "start": "1850150",
    "end": "1859770"
  },
  {
    "text": "So this is a reasonable\nexample of this. So what this says is\nyou're just given h of x.",
    "start": "1859770",
    "end": "1869930"
  },
  {
    "text": "It doesn't actually say\nanything about one-wayness yet. But you could\nassume, for example, that if this was a\none-way hash function,",
    "start": "1869930",
    "end": "1878510"
  },
  {
    "text": "that it would be possible to\nget x from h of x, correct?",
    "start": "1878510",
    "end": "1883581"
  },
  {
    "text": " And let's keep that though. Hold that thought, all right?",
    "start": "1883581",
    "end": "1889470"
  },
  {
    "text": "We're going to get back to it. So if I'm just given the hash\nthrough some computation,",
    "start": "1889470",
    "end": "1896710"
  },
  {
    "text": "it may be possible for me\nto create another hash, h of x prime, such that\nthere's some relationship",
    "start": "1896710",
    "end": "1905330"
  },
  {
    "text": "that I can prove or argue\nfor between the strings that",
    "start": "1905330",
    "end": "1911010"
  },
  {
    "text": "created the hashes,\nnamely x and x prime, OK? That's what\nmalleability is, right?",
    "start": "1911010",
    "end": "1917330"
  },
  {
    "text": "Now you might just go off and\nsay here's an x, here's a y,",
    "start": "1917330",
    "end": "1923440"
  },
  {
    "text": "here's h of x,\nand here's h of y. These look completely random.",
    "start": "1923440",
    "end": "1929620"
  },
  {
    "text": "And you might go off-- I'm\nbeing facetious here-- I say that y is x's third cousin's\nroommate's brother-in-law",
    "start": "1929620",
    "end": "1937767"
  },
  {
    "text": "or something, right? I mean just make\nsomething up, right? So clearly there's got to be\na strong, precise relationship",
    "start": "1937767",
    "end": "1946470"
  },
  {
    "text": "between x and y. If in fact you could\ndo this and get y",
    "start": "1946470",
    "end": "1952180"
  },
  {
    "text": "equals x plus 1, that'd\nbe a problem, right? But if you are--\nand then you can",
    "start": "1952180",
    "end": "1958840"
  },
  {
    "text": "do this sort of consistently\nfor different x's and y's, that would absolutely be\na problem, right?",
    "start": "1958840",
    "end": "1964980"
  },
  {
    "text": "But what you're really\nasking for-- and typically when you want\nnon-malleability-- it's",
    "start": "1964980",
    "end": "1970710"
  },
  {
    "text": "things where you have\nauctions, for example, where you are to be careful about\nmaking sure that you don't want",
    "start": "1970710",
    "end": "1978350"
  },
  {
    "text": "to expose your bid. And so maybe what you're\ndoing is exposing h of x.",
    "start": "1978350",
    "end": "1984700"
  },
  {
    "text": "You don't want somebody\nto look at your h of x and figure out how\nthey could beat",
    "start": "1984700",
    "end": "1990419"
  },
  {
    "text": "your bid by just a little bit. Or in case of Vickrey auctions,\nwhere the second highest bidder",
    "start": "1990420",
    "end": "1997140"
  },
  {
    "text": "wins, now just be a little\nbit below you, right? So that's the kind\nof thing that you want to think about when it\ncomes to non-malleability,",
    "start": "1997140",
    "end": "2005110"
  },
  {
    "text": "or malleability, where you\nwant a strong relationship between two strings\nthat are related",
    "start": "2005110",
    "end": "2012300"
  },
  {
    "text": "in some ordered fashion,\nlike x equals-- x prime equals x plus 1, or just\nx prime equals 2 times x.",
    "start": "2012300",
    "end": "2018950"
  },
  {
    "text": "And you don't want\nto be able to-- you don't want the adversary\nto be able to discover",
    "start": "2018950",
    "end": "2025350"
  },
  {
    "text": "these new strings. Because that would be\nthe system, all right?",
    "start": "2025350",
    "end": "2031440"
  },
  {
    "text": "So any questions\nabout properties? Are we all good on\nthese properties?",
    "start": "2031440",
    "end": "2037620"
  },
  {
    "text": "All right, because I'm\ngoing to start asking you how to use them for\nparticular applications,",
    "start": "2037620",
    "end": "2043010"
  },
  {
    "text": "or what properties are required\nfor certain applications, OK?",
    "start": "2043010",
    "end": "2049169"
  },
  {
    "text": "One last thing\nbefore we get there. I promised a slightly\nmore detailed analysis",
    "start": "2049170",
    "end": "2056960"
  },
  {
    "text": "of the relationships\nbetween these properties. So let's do that. ",
    "start": "2056960",
    "end": "2064810"
  },
  {
    "text": "Now if your just look\nat it, eyeball it, and you look at collision\nresistance and TCR,",
    "start": "2064810",
    "end": "2074888"
  },
  {
    "text": "what can I say about\nthe relationship between CR and TCR?",
    "start": "2074888",
    "end": "2080820"
  },
  {
    "text": "If h is CR, it's going\nto be TCR, right?",
    "start": "2080820",
    "end": "2085952"
  },
  {
    "text": "It's got to be TCR. It's a strictly\nstronger requirement. ",
    "start": "2085953",
    "end": "2094658"
  },
  {
    "text": "But not reverse.  And you can actually\ngive a concrete example",
    "start": "2094659",
    "end": "2104230"
  },
  {
    "text": "of a particular hash\nfunction that is TCR. I'm not going to go there. It's actually a\nlittle more involved",
    "start": "2104230",
    "end": "2109659"
  },
  {
    "text": "than you might think it is,\nwhere a TCR hash function is not collision resistant. But you can see that\nexamples such as these",
    "start": "2109659",
    "end": "2117180"
  },
  {
    "text": "should exist, simply because I\nhave a more stringent property corresponding to\ncollision resistance",
    "start": "2117180",
    "end": "2122280"
  },
  {
    "text": "as opposed to TCR, right? So if you're interested in\nthat particular example, you're not responsible for\nit, get in touch with me",
    "start": "2122280",
    "end": "2129780"
  },
  {
    "text": "and I'll point you to a,\nlike a three-page description of an example. So I didn't really\nwant to go in there.",
    "start": "2129780",
    "end": "2135930"
  },
  {
    "text": "But what I do want to do is talk\nabout one-wayness and collision resistance. Because I think that's\nactually much more interesting,",
    "start": "2135930",
    "end": "2143069"
  },
  {
    "text": "all right? So if h is one-way--\nany conjectures",
    "start": "2143069",
    "end": "2159060"
  },
  {
    "text": "as to what the question\nmark is in the middle? Can I make strong statements\nabout the collision resistance",
    "start": "2159060",
    "end": "2167950"
  },
  {
    "text": "of a hash function,\nif I'm guaranteed that the hash function I have\nis a one-way hash function,",
    "start": "2167950",
    "end": "2174010"
  },
  {
    "text": "or vice versa? ",
    "start": "2174010",
    "end": "2180960"
  },
  {
    "text": "Another way of\nputting it is, can you give me an example of,\njust to start with,",
    "start": "2180960",
    "end": "2188970"
  },
  {
    "text": "a hash function which is\none-way but not TCR, not",
    "start": "2188970",
    "end": "2195096"
  },
  {
    "text": "target collision resistant? ",
    "start": "2195096",
    "end": "2200520"
  },
  {
    "text": "So I'm going to try and\nextract this out of you. This is somewhat subtle.",
    "start": "2200520",
    "end": "2206870"
  },
  {
    "text": "But the way you want\nto think about this is, let's say that h\nof x is OW and TCR, OK?",
    "start": "2206870",
    "end": "2219260"
  },
  {
    "text": "And so I have a bunch of inputs. And this is the output. And I get d-bits out.",
    "start": "2219260",
    "end": "2226160"
  },
  {
    "text": "And I've got x1, x2, to xn, OK?",
    "start": "2226160",
    "end": "2232010"
  },
  {
    "text": "Now I've given this h--\nI've been given this h which is one-way and TCR.",
    "start": "2232010",
    "end": "2238240"
  },
  {
    "text": "It satisfies those properties\nthat you have up there. In the case of one-way, I give\nyou an arbitrary d-bit string.",
    "start": "2238240",
    "end": "2244589"
  },
  {
    "text": "You can't go backwards and\nfind a bunch of the xi's that produce exactly that\nd-bit string, all right?",
    "start": "2244590",
    "end": "2254150"
  },
  {
    "text": "So it's going to be\nhard to get here. But you're allowed now\nto give me an example.",
    "start": "2254150",
    "end": "2260380"
  },
  {
    "text": "So this is some hash\nfunction that you can create,",
    "start": "2260380",
    "end": "2265390"
  },
  {
    "text": "which may use h as well. And h is kind of nice because\nit has this one-way property.",
    "start": "2265390",
    "end": "2271780"
  },
  {
    "text": "So let's say that we want\nto discover something where one-way does not imply TCR.",
    "start": "2271780",
    "end": "2279080"
  },
  {
    "text": "So I want to cook up a\nhash function h prime such that h prime is one-way,\nbut it's not TCR, OK?",
    "start": "2279080",
    "end": "2289550"
  },
  {
    "text": "The way you want to think about\nthis is you want to add to h. And you want to add something\nto h such that it's still hard--",
    "start": "2289550",
    "end": "2296790"
  },
  {
    "text": "if you add h it's still hard\nto go from here to there. Because you've got to go deeper. If you add to, for\nexample, the inputs of h.",
    "start": "2296790",
    "end": "2303760"
  },
  {
    "text": "Or you could add to the\noutputs of h as well, or the outputs of the current h. But you can basically go deeper,\nor need to go deeper in order",
    "start": "2303760",
    "end": "2314670"
  },
  {
    "text": "to find the break\none-wayness, in order to find an x, whatever you have,\nthat produces the d-bit string",
    "start": "2314670",
    "end": "2323820"
  },
  {
    "text": "that you have, right? So what's a simple way of\ncreating an h prime such that",
    "start": "2323820",
    "end": "2329690"
  },
  {
    "text": "it's going to be pretty easy to\nfind targeted collisions even, not necessarily collisions,\nit's pretty easy to find",
    "start": "2329690",
    "end": "2336150"
  },
  {
    "text": "targeted collisions,\nwithout breaking the one-way property of h? ",
    "start": "2336150",
    "end": "2343785"
  },
  {
    "text": "Yeah? AUDIENCE: So if you have\nx sub i, if i odd then",
    "start": "2343785",
    "end": "2351672"
  },
  {
    "text": "return h of x of i. So that's minus 1. So return the even group.",
    "start": "2351673",
    "end": "2358552"
  },
  {
    "text": "SRINIVAS DEVADAS: Sure. Yep. AUDIENCE: Given\nx any x of i, you",
    "start": "2358552",
    "end": "2364241"
  },
  {
    "text": "can usually find another x of\ni that was the same output? You can go backwards. SRINIVAS DEVADAS: You\ncan't go backwards.",
    "start": "2364241",
    "end": "2369700"
  },
  {
    "text": "Yeah, that's good. That's good. I'm going to do something that's\nalmost exactly what you said. But I'm going to\ndraw it pictorially.",
    "start": "2369700",
    "end": "2375655"
  },
  {
    "text": " And what you can do, you can\ndo a parity, like odd and even",
    "start": "2375655",
    "end": "2382705"
  },
  {
    "text": "that was just described.  And all I'll do is add\na little [? XNOR ?]",
    "start": "2382705",
    "end": "2391440"
  },
  {
    "text": "gate, which is a parity\ngate, to one of the inputs. So you have and b here.",
    "start": "2391440",
    "end": "2396830"
  },
  {
    "text": "So I've taken x1, and\nI have a and b here. So I've added-- I can\nadd as many inputs",
    "start": "2396830",
    "end": "2404560"
  },
  {
    "text": "as I want to this function. Oh I should mention\nby the way, h of x is working on arbitrary strings.",
    "start": "2404560",
    "end": "2411290"
  },
  {
    "text": "And obviously I\nput in some number here that corresponds to\nn, which is a fixed number.",
    "start": "2411290",
    "end": "2416774"
  },
  {
    "text": "So you might ask, what the\nheck happened here with respect to arbitrary strings? And there's two answers.",
    "start": "2416774",
    "end": "2422570"
  },
  {
    "text": "The first answer is,\nwell, ignore arbitrary. And assume that you\nonly have n-bit strings. And n this is really\nlarge number, right?",
    "start": "2422570",
    "end": "2429370"
  },
  {
    "text": "And that may not be\nparticularly satisfying. The other answer is,\nwhich is more practical, which is what's\nused in practice,",
    "start": "2429370",
    "end": "2435849"
  },
  {
    "text": "is that typically\nwhat happens is, you do have particular\nimplementations",
    "start": "2435850",
    "end": "2441000"
  },
  {
    "text": "of hash functions that\nobviously need to have fixed inputs, n, for example.",
    "start": "2441000",
    "end": "2446440"
  },
  {
    "text": "And n is typically 512. It's usually the block size. And you chunk the input up\ninto five 12-bit blocks.",
    "start": "2446440",
    "end": "2452940"
  },
  {
    "text": "And typically what\nyou do is, you take the first five 12-bits,\ncompute the hash for it. And then you can do it\nfor the remaining blocks.",
    "start": "2452940",
    "end": "2462280"
  },
  {
    "text": "And then you can hash all\nof them together, all right? So there's typically\nmore invocations. I don't really want\nto get into it.",
    "start": "2462280",
    "end": "2468330"
  },
  {
    "text": "But there's typically\nmore invocations of h when the input would be 2 times\nn, or 3 times n, all right?",
    "start": "2468330",
    "end": "2475600"
  },
  {
    "text": "So we don't really\nneed to go there for the purposes\nof this lecture. But keep that in mind. So we'll still stick with our\narbitrary string requirement.",
    "start": "2475600",
    "end": "2483750"
  },
  {
    "text": "So having said that, take\na look at this picture. And see what this\npicture implies.",
    "start": "2483750",
    "end": "2490190"
  },
  {
    "text": "I have an h prime that\nI've constructed, right? Now if I look at h\nprime, and I give you",
    "start": "2490190",
    "end": "2496720"
  },
  {
    "text": "an output for h prime--\nso h prime now has, it's a function of a and b, and\nx2 all the way to xn, right?",
    "start": "2496720",
    "end": "2505640"
  },
  {
    "text": "So it's got an extra input. If I look at h prime, and I look\nat the output of h prime that is given to me, and I need\nto discover something that",
    "start": "2505640",
    "end": "2516279"
  },
  {
    "text": "produces that, it is pretty\nclear that I need to figure out what these values\nare, all right?",
    "start": "2516280",
    "end": "2523400"
  },
  {
    "text": "And I need to know what\nthe parity of a and b is. And maybe I don't need to\nknow exactly what a and b are,",
    "start": "2523400",
    "end": "2529293"
  },
  {
    "text": "but I absolutely need to know\nwhat the parity of a and b are, because that's x1. And the one-way I'd\nbreak would require",
    "start": "2529293",
    "end": "2535490"
  },
  {
    "text": "me to tell you what\nthe value of x1 is, and the value of x2,\nand so on and so forth. So it's pretty clear that\nh prime is one-way, right?",
    "start": "2535490",
    "end": "2543640"
  },
  {
    "text": "Everybody buy that? h prime is one-way.",
    "start": "2543640",
    "end": "2548870"
  },
  {
    "text": "But you know what? I've got target\ncollisions galore, right? All I have to do is flip-- I\nhave a equals 1 and b equals 1.",
    "start": "2548870",
    "end": "2557360"
  },
  {
    "text": "And I have a equals\n0 and b equals 0. They're going to give\nme the same hash, right? So trivial example,\nbut that gets",
    "start": "2557360",
    "end": "2565690"
  },
  {
    "text": "to the essence of the difference\nbetween collision resistance and one-wayness, target\ncollision resistance",
    "start": "2565690",
    "end": "2572290"
  },
  {
    "text": "and one-wayness, all right? So this is one-way but not TCR,\nsimply because a equals 0, b",
    "start": "2572290",
    "end": "2583710"
  },
  {
    "text": "equals 0 for\narbitrary x's produce the same thing as a equals\n1 and b equals 1, right?",
    "start": "2583710",
    "end": "2591200"
  },
  {
    "text": "So those are collisions. So admittedly contrived. But it's a counterexample.",
    "start": "2591200",
    "end": "2599349"
  },
  {
    "text": "Counterexamples\ncan be contrived. It's OK. All right.",
    "start": "2599350",
    "end": "2604710"
  },
  {
    "text": "So that was what\nhappens with that. Let's look at one\nmore interesting thing",
    "start": "2604710",
    "end": "2612400"
  },
  {
    "text": "that corresponds to\nthe other way, right? So what I want to show is that a\nTCR does not imply one-wayness.",
    "start": "2612400",
    "end": "2626029"
  },
  {
    "start": "2626030",
    "end": "2639040"
  },
  {
    "text": "OK, so now I want an\nexample where it is clear that I have target collision\nresistance, because I can just",
    "start": "2639040",
    "end": "2645580"
  },
  {
    "text": "assume that. And we're going to\nuse the same strategy. I'm just going assume\nthat I have an h that's target collision resistant.",
    "start": "2645580",
    "end": "2652240"
  },
  {
    "text": "And I'm going to try and cook up\nan h prime that is not one-way. So I'm going to assume that\nin fact h is TCR and OW.",
    "start": "2652240",
    "end": "2661080"
  },
  {
    "text": "And I'm going to take away\none of the properties. And if I take it one\nof the properties I have a counterexample, right?",
    "start": "2661080",
    "end": "2668350"
  },
  {
    "text": "So think about how\nyou could do this.",
    "start": "2668350",
    "end": "2674320"
  },
  {
    "text": "You have h as before. ",
    "start": "2674320",
    "end": "2681920"
  },
  {
    "text": "And I want to add\nsome stuff around it such that it's going to be\neasy to discover-- for a large,",
    "start": "2681920",
    "end": "2692820"
  },
  {
    "text": "for a constant\nfraction of hashes that I've given to me,\nnot for any old hash.",
    "start": "2692820",
    "end": "2698430"
  },
  {
    "text": "Because you can always\nclaim that one-wayness is broken by saying I have\nx, I computed h of x, now",
    "start": "2698430",
    "end": "2706360"
  },
  {
    "text": "I know what-- given h\nof x I know what x is. I mean you can't do that, right?",
    "start": "2706360",
    "end": "2711970"
  },
  {
    "text": "So that's not breaking\nthe one-wayness of it. It's when you have\nan h of x and this is the first time\nyou've seen it,",
    "start": "2711970",
    "end": "2718250"
  },
  {
    "text": "you're trying to find\nwhat x is, right? So how would you-- how\nwould you set it up",
    "start": "2718250",
    "end": "2723369"
  },
  {
    "text": "so you break the\none-wayness of h without necessarily breaking\nthe target collision",
    "start": "2723370",
    "end": "2731310"
  },
  {
    "text": "resistance of the overall hash\nfunction that you're creating?",
    "start": "2731310",
    "end": "2737430"
  },
  {
    "text": "And you have to do something\nwith the outputs, OK? You have to do something. This is a little more involved.",
    "start": "2737430",
    "end": "2743671"
  },
  {
    "text": "It's not as easy\nas this example. It's a little more involved. But any ideas? ",
    "start": "2743671",
    "end": "2751240"
  },
  {
    "text": "Yeah, go ahead. AUDIENCE: So x is\nless than b returns x. If x is greater than\nb, return [INAUDIBLE].",
    "start": "2751240",
    "end": "2757964"
  },
  {
    "text": "SRINIVAS DEVADAS: Beautiful. Right. What color did\nyou get last time? AUDIENCE: Blue. SRINIVAS DEVADAS: You\ngot a blue last time?",
    "start": "2757964",
    "end": "2763049"
  },
  {
    "text": "All right. Well you get a purple. You have a set. Actually we have these red ones\nthat are precious, that are--",
    "start": "2763050",
    "end": "2769220"
  },
  {
    "text": "no, we don't. We chose not to do red.",
    "start": "2769220",
    "end": "2774479"
  },
  {
    "text": "I don't know. There was some\nsubliminal message I think with throwing red\nFrisbees that we didn't like.",
    "start": "2774479",
    "end": "2780750"
  },
  {
    "text": "But OK. So thank you. And h of x is simply\nsomething where",
    "start": "2780750",
    "end": "2793260"
  },
  {
    "text": "I'm going to concatenate\na zero to the x value and just put it out.",
    "start": "2793260",
    "end": "2798660"
  },
  {
    "text": "And clearly this is\nbreaking one-wayness because I'm just taking the\ninput, I'm adding a zero to it, and shipping it out.",
    "start": "2798660",
    "end": "2804730"
  },
  {
    "text": "So it's going to be easy\nto go backwards, right? And this only happens\nif x is less than n,",
    "start": "2804730",
    "end": "2813500"
  },
  {
    "text": "as the gentleman just said. Less than or equal to n in\nterms of the input length, OK?",
    "start": "2813500",
    "end": "2820220"
  },
  {
    "text": "Otherwise I'm\ngoing to do h of x. ",
    "start": "2820220",
    "end": "2828270"
  },
  {
    "text": "So this is good news. Because I'm actually using\nthe hash function in the case",
    "start": "2828270",
    "end": "2835400"
  },
  {
    "text": "where I have a\nlonger input string. This is bad news for\none-wayness because I'm just",
    "start": "2835400",
    "end": "2840660"
  },
  {
    "text": "piping out the input. And so if I get an x, and I\nsee what the x is out here,",
    "start": "2840660",
    "end": "2850927"
  },
  {
    "text": "and let's just say\nfor argument's sake that-- you could\neven say that n is",
    "start": "2850927",
    "end": "2858480"
  },
  {
    "text": "going to be something\nthat is less than d, which is the final\noutput, which has d-bits.",
    "start": "2858480",
    "end": "2866210"
  },
  {
    "text": "And so if you see something\nthat h prime produces that's less than\nd-bits you instantly",
    "start": "2866210",
    "end": "2871450"
  },
  {
    "text": "know that you can go\nbackwards and discover what input produced that\nfor the h prime, right?",
    "start": "2871450",
    "end": "2877186"
  },
  {
    "text": "Because you just go off\nand you go backwards. This is what it tells you. Now on the other\nhand if it's larger obviously you can't do that.",
    "start": "2877186",
    "end": "2883160"
  },
  {
    "text": "But there's a whole\nlot of combinations that you can do that for. So this breaks one-wayness, OK?",
    "start": "2883160",
    "end": "2891300"
  },
  {
    "text": "Now you think about TCR. And what you want\na show of course is that this maintains TCR.",
    "start": "2891300",
    "end": "2897570"
  },
  {
    "text": "So that's the last thing\nthat we have to show. We know that it\nbreaks one-wayness. But if it broke TCR we don't\nquite have our example.",
    "start": "2897570",
    "end": "2905182"
  },
  {
    "text": "So we want to show\nthat it actually maintains TCR, which is\nkind of a weakish property",
    "start": "2905182",
    "end": "2911220"
  },
  {
    "text": "that we need to maintain. And the reason\nthis maintains TCR is that there's really only\ntwo cases here obviously,",
    "start": "2911220",
    "end": "2919289"
  },
  {
    "text": "corresponding to\nthe if statement. And it's pretty clear that if\nx is less than or equal to n,",
    "start": "2919290",
    "end": "2929280"
  },
  {
    "text": "clearly different x's produce\ndifferent h prime x's, correct?",
    "start": "2929280",
    "end": "2943520"
  },
  {
    "text": "Because I'm just passing\nalong the x out to the output. So if x is less than n I am\ngoing to get different hashes",
    "start": "2943520",
    "end": "2949730"
  },
  {
    "text": "at the output. I'm just passing them out. So that's easy. And for the other case,\nwell I assume that h of x",
    "start": "2949730",
    "end": "2957490"
  },
  {
    "text": "was CCR, correct? Because that was the original\nassumption, that I had h, which was CCR.",
    "start": "2957490",
    "end": "2963540"
  },
  {
    "text": "So in both cases TCR is\nmaintained because else h",
    "start": "2963540",
    "end": "2970690"
  },
  {
    "text": "of x maintains TCR, all right?",
    "start": "2970690",
    "end": "2978349"
  },
  {
    "text": "So again, a bit of\na contrived example to show you the\ndifference between these different properties so\nyou know not to mix them up.",
    "start": "2978350",
    "end": "2985510"
  },
  {
    "text": "You know what you\nwant to ask for, what is required\nwhen you actually",
    "start": "2985510",
    "end": "2991150"
  },
  {
    "text": "implement an\napplication that depends on particular properties. All right?",
    "start": "2991150",
    "end": "2997230"
  },
  {
    "text": "Any questions so\nfar about properties or any of these examples? We're going to dive\nin to using them.",
    "start": "2997230",
    "end": "3003227"
  },
  {
    "text": " OK.",
    "start": "3003227",
    "end": "3008510"
  },
  {
    "text": "So start thinking\ncomputer security. Start thinking hackers,\nprotecting yourself",
    "start": "3008510",
    "end": "3018089"
  },
  {
    "text": "against the bad guys\nthat are out there who are trying to discover\nyour passwords, trying to corrupt\nyour files, generally",
    "start": "3018090",
    "end": "3024923"
  },
  {
    "text": "make your life miserable. ",
    "start": "3024924",
    "end": "3032880"
  },
  {
    "text": "And we'll start out with\nfairly simple examples, where",
    "start": "3032880",
    "end": "3038880"
  },
  {
    "text": "the properties are\nsomewhat obvious, and graduate to this auction\nbidding example which",
    "start": "3038880",
    "end": "3046205"
  },
  {
    "text": "should be sort of the\nculmination of at least this part of the lecture. And depending on\nhow much time I have",
    "start": "3046205",
    "end": "3052470"
  },
  {
    "text": "I'll tell you a\nlittle bit about how to implement hash functions. But I think these\nthings are more",
    "start": "3052470",
    "end": "3059640"
  },
  {
    "text": "important from a\nstandpoint of giving you a sense of cryptographic hashes.",
    "start": "3059640",
    "end": "3068610"
  },
  {
    "text": "All right. Password storage. How many of you write your\npassword in an unencrypted text",
    "start": "3068610",
    "end": "3076730"
  },
  {
    "text": "file and store it in\na readable location?",
    "start": "3076730",
    "end": "3082230"
  },
  {
    "text": "There you go, man. Thank you for being honest.",
    "start": "3082230",
    "end": "3087390"
  },
  {
    "text": "And I do worse. Not only do I do that, I\nuse my first daughter's",
    "start": "3087390",
    "end": "3092610"
  },
  {
    "text": "name for four passwords. I won't tell you\nwhat the name is. ",
    "start": "3092610",
    "end": "3101350"
  },
  {
    "text": "So that's something that\nwe'd like to fix, right? So what do real systems do? Real systems cannot protect\nagainst me using my first",
    "start": "3101350",
    "end": "3109530"
  },
  {
    "text": "daughter's name as\na password, right? So there's no way you\ncan protect against that. But if I had a reasonable\npassword, which",
    "start": "3109530",
    "end": "3116830"
  },
  {
    "text": "had reasonable\nentropy in it-- so let's assume here that we\nhave reasonable entropy in the password.",
    "start": "3116830",
    "end": "3122010"
  },
  {
    "text": "And you can just say 128-bits. And it's not a lot, right? 128-bits is 16 characters, OK?",
    "start": "3122010",
    "end": "3129135"
  },
  {
    "text": "And you don't have to answer\nthis-- how many of you have 16 characters\nin your password?",
    "start": "3129135",
    "end": "3135390"
  },
  {
    "text": "Oh I'm impressed. OK. So you've got\n128-bits of entropy. But the rest of you, forget it.",
    "start": "3135390",
    "end": "3141710"
  },
  {
    "text": "This is not going\nto help you, OK? But what I want,\nassuming you have",
    "start": "3141710",
    "end": "3148140"
  },
  {
    "text": "significant entropy in your\npassword-- because otherwise, if there's not\nenough entropy you",
    "start": "3148140",
    "end": "3153940"
  },
  {
    "text": "can just enumerate all possible\npasswords of eight letters. And it's not that much.",
    "start": "3153940",
    "end": "3159230"
  },
  {
    "text": "It's 2 raised to\n50, what have you. And you can just go off. And none of these\nproperties matter. You just-- you have your h of x.",
    "start": "3159230",
    "end": "3165809"
  },
  {
    "text": "It's public. We'll talk about how we\nuse that in a second. But clearly if the\ndomain is small",
    "start": "3165810",
    "end": "3173350"
  },
  {
    "text": "you can just\nenumerate the domain. So keep that in mind. I talked about h of\nx, and it's obviously",
    "start": "3173350",
    "end": "3178770"
  },
  {
    "text": "going to be relevant here. But suppose I wanted\nto build a system, and this is how\nsystems are built,",
    "start": "3178770",
    "end": "3184300"
  },
  {
    "text": "ETC slash password\nfile, assuming you have long passwords\nit does it this way,",
    "start": "3184300",
    "end": "3191040"
  },
  {
    "text": "otherwise it needs something\nthat's called a salt. But that's 6, 8, 57\nand we won't go there.",
    "start": "3191040",
    "end": "3196540"
  },
  {
    "text": "So we just assume\na large entropy. What is it that a system can do?",
    "start": "3196540",
    "end": "3201980"
  },
  {
    "text": "What can it store in order\nto let you in, and only let you in when you\ntype your password,",
    "start": "3201980",
    "end": "3208830"
  },
  {
    "text": "and not let some bogus\npassword into the system? Or somebody with a bogus\npassword into the system.",
    "start": "3208830",
    "end": "3214609"
  },
  {
    "text": "Yeah, go ahead. AUDIENCE: If you capture the\npassword when you enter it and compare it to\nwhat's stored-- SRINIVAS DEVADAS: Yes.",
    "start": "3214610",
    "end": "3220347"
  },
  {
    "text": "AUDIENCE: If it's a one-way\nhash you know you have what the correct password is. SRINIVAS DEVADAS:\nThat's exactly right. That's exactly right. So it's a really simple\nidea, a very powerful idea.",
    "start": "3220347",
    "end": "3229950"
  },
  {
    "text": "It, as I said, assumed that the\nentropy-- and I'm belaboring the obvious now--\nbut it is important",
    "start": "3229950",
    "end": "3236890"
  },
  {
    "text": "when you talk about security\nto state your assumptions. But you do not store\npassword on your computer.",
    "start": "3236890",
    "end": "3244380"
  },
  {
    "text": "And you store the\nhash of the password. Now why do I store my\npassword on the computer?",
    "start": "3244380",
    "end": "3249530"
  },
  {
    "text": "Because this is so\ninconvenient, right? So this is what the\nsystem does for me.",
    "start": "3249530",
    "end": "3255180"
  },
  {
    "text": "But the fact of the matter\nis, if I lose my password, this doesn't help me. Because what the system wants\nyou to do is choose a password",
    "start": "3255180",
    "end": "3264050"
  },
  {
    "text": "that is long enough,\nand the h is one-way. So anybody who discovers h of\nPW that is publicly readable",
    "start": "3264050",
    "end": "3270960"
  },
  {
    "text": "cannot discover PW, all right? That's what's cool about this.",
    "start": "3270960",
    "end": "3276420"
  },
  {
    "text": "How do you let\nthe person log in? Use h of PW to compare\nagainst h of PW prime,",
    "start": "3276420",
    "end": "3287860"
  },
  {
    "text": "which is what is entered, where\nPW prime is the typed password.",
    "start": "3287860",
    "end": "3294420"
  },
  {
    "start": "3294420",
    "end": "3300540"
  },
  {
    "text": "And clearly what we need is\nthe disclosure of h of PW",
    "start": "3300540",
    "end": "3308530"
  },
  {
    "text": "should not reveal PW.",
    "start": "3308530",
    "end": "3314960"
  },
  {
    "text": "So we definitely\nneed one-wayness. What about-- what about\ncollision resistance?",
    "start": "3314960",
    "end": "3324370"
  },
  {
    "text": "Our target collision resistance? Think practitioner now, right?",
    "start": "3324370",
    "end": "3331350"
  },
  {
    "text": "Are we interested in\nthis hash function being collision resistant? What does that\nmean in this case?",
    "start": "3331350",
    "end": "3337150"
  },
  {
    "text": "Give me the context in this\nparticular application? Yeah, go ahead. AUDIENCE: It means that someone\nentering a different password",
    "start": "3337150",
    "end": "3344859"
  },
  {
    "text": "will have the same\nhash [INAUDIBLE]. SRINIVAS DEVADAS: Exactly. So it means that what you have\nis a situation where you do not",
    "start": "3344860",
    "end": "3356599"
  },
  {
    "text": "reveal-- and so what might\nhappen is that h of PW prime equals h of PW.",
    "start": "3356600",
    "end": "3362460"
  },
  {
    "text": "But h of PW equals\nh of PW prime. But PW is not equal to PW prime.",
    "start": "3362460",
    "end": "3371490"
  },
  {
    "text": "What you have is\na false positive. Someone who didn't\nknow your password but guessed right-- and\nthis is a 128-bit value,",
    "start": "3371490",
    "end": "3379060"
  },
  {
    "text": "and they guessed right--\nis going to get it. You don't particularly\ncare of the probability",
    "start": "3379060",
    "end": "3384940"
  },
  {
    "text": "of this occurrence. It's really small. Typically you're going to\nhave systems that lock you out",
    "start": "3384940",
    "end": "3390569"
  },
  {
    "text": "if you try 10 tries that occurs\none, two, wrong passwords, right? So really in systems\nyou do not require--",
    "start": "3390570",
    "end": "3397965"
  },
  {
    "text": "you do want to\nbuild systems that have minimal\nproperties with respect to the perimeters that are used.",
    "start": "3397965",
    "end": "3403570"
  },
  {
    "text": "So from a system building\nstandpoint just require OW. Don't go overboard. Don't require collision\nresistance or TCR, OK?",
    "start": "3403570",
    "end": "3413100"
  },
  {
    "text": "Let's do a slightly\ndifferent example. Also a bit of a\nwarm-up for what's",
    "start": "3413100",
    "end": "3419010"
  },
  {
    "text": "coming next, which is a\nfile modification detector. ",
    "start": "3419010",
    "end": "3442080"
  },
  {
    "text": "So for each file F, I'm going to\nstore h of F. And as securely.",
    "start": "3442080",
    "end": "3452800"
  },
  {
    "text": "So you assume that this means\nthat h of F cannot be modified by anybody, h of F itself.",
    "start": "3452800",
    "end": "3460380"
  },
  {
    "start": "3460380",
    "end": "3467859"
  },
  {
    "text": "And now we want to\ncheck if F is modified",
    "start": "3467860",
    "end": "3476030"
  },
  {
    "text": "by re-computing h of\nF. Which could be,",
    "start": "3476030",
    "end": "3484470"
  },
  {
    "text": "this could be modified. So this could\nactually be F prime. You don't know that. You have a file.",
    "start": "3484470",
    "end": "3490500"
  },
  {
    "text": "It's a gigabyte. And somebody might\nhave tampered with one of the bits in the file.",
    "start": "3490500",
    "end": "3496030"
  },
  {
    "text": "All you have is a\nd-bit digest that corresponds to h of F that you\nstored in a secure location.",
    "start": "3496030",
    "end": "3503670"
  },
  {
    "text": "And you want to check\nto see, by re-computing h of F, the file\nthat is given to you,",
    "start": "3503670",
    "end": "3511940"
  },
  {
    "text": "and comparing it with what\nyou've stored, the h of F that you've stored. And so what property do we\nneed in order to pull this off?",
    "start": "3511940",
    "end": "3522200"
  },
  {
    "text": "Of hash functions. What precisely do we\nneed to pull this off?",
    "start": "3522200",
    "end": "3528070"
  },
  {
    "text": " What is the adversary\ntrying to do? And what is a successful break?",
    "start": "3528070",
    "end": "3535530"
  },
  {
    "text": "A successful break is if an\nadversary can modify the file",
    "start": "3535530",
    "end": "3542000"
  },
  {
    "text": "and keep h of F the same, right?",
    "start": "3542000",
    "end": "3548720"
  },
  {
    "text": "That would be a\nsuccessful break, right? Yup. Go ahead.",
    "start": "3548720",
    "end": "3554125"
  },
  {
    "text": "AUDIENCE: TCR. SRINIVAS DEVADAS: TCR? Yeah, absolutely. You need TCR. ",
    "start": "3554125",
    "end": "3559350"
  },
  {
    "text": "So you want to modify the file. ",
    "start": "3559350",
    "end": "3574830"
  },
  {
    "text": "So you're given that\nthe file-- the adversary is given the file, which\nis the input to the hash,",
    "start": "3574830",
    "end": "3581980"
  },
  {
    "text": "and is going to try and\nmodify-- modify the file, right?",
    "start": "3581980",
    "end": "3587550"
  },
  {
    "text": "So let's do a couple more. And we're going to advance our\nrequirements here a little bit.",
    "start": "3587550",
    "end": "3597470"
  },
  {
    "text": "So those two are\nbasic properties. I want to leave this up there. ",
    "start": "3597470",
    "end": "3604937"
  },
  {
    "text": "We're going to do\nsomething that corresponds to digital signatures. So digital signatures are\nthis wonderful invention",
    "start": "3604937",
    "end": "3613030"
  },
  {
    "text": "that came out of MIT in a\ncomputer science laboratory--",
    "start": "3613030",
    "end": "3618290"
  },
  {
    "text": "again, Ron Rivest and\ncollaborators-- which are a way of digitally\nsigning a document using",
    "start": "3618290",
    "end": "3628119"
  },
  {
    "text": "a secret key, a private key. But anybody who has\naccess to a public key,",
    "start": "3628120",
    "end": "3635660"
  },
  {
    "text": "so it could be\npretty much anybody, could verify the authenticity\nof that signature, right?",
    "start": "3635660",
    "end": "3641647"
  },
  {
    "text": "So that's what a\ndigital signature is. ",
    "start": "3641647",
    "end": "3652490"
  },
  {
    "text": "So we're going to talk\nabout public cryptography on Thursday, in terms\nof how you could build",
    "start": "3652490",
    "end": "3660730"
  },
  {
    "text": "systems or encryption algorithms\nthat are public key algorithms.",
    "start": "3660730",
    "end": "3666640"
  },
  {
    "text": "But here I'll just tell you\nwhat we want out of them.",
    "start": "3666640",
    "end": "3672470"
  },
  {
    "text": "Essentially what we have here\nin the case of signatures, we actually want to talk\nabout encryption here,",
    "start": "3672470",
    "end": "3678100"
  },
  {
    "text": "are-- there's two\nkeys associated with a public key system.",
    "start": "3678100",
    "end": "3684030"
  },
  {
    "text": "Anybody and everybody\nin the system would have a public key that\nyou can put on your website.",
    "start": "3684030",
    "end": "3691089"
  },
  {
    "text": "And you also have a secret key--\nthat's like your password-- that you don't\nwant to write down, you don't want to give away,\nbecause that's effectively",
    "start": "3691090",
    "end": "3698221"
  },
  {
    "text": "your identity. And what digital\nsignatures respond to",
    "start": "3698221",
    "end": "3704700"
  },
  {
    "text": "are that you have\ntwo operations. You have signing\nand verification.",
    "start": "3704700",
    "end": "3711029"
  },
  {
    "text": "So signing means that you\ncreate a signature sigma that",
    "start": "3711030",
    "end": "3716760"
  },
  {
    "text": "is the sign using your\nprivate key, your secret key,",
    "start": "3716760",
    "end": "3726420"
  },
  {
    "text": "off a message M. So you're\nsaying this is this message, it came from me, right?",
    "start": "3726420",
    "end": "3732060"
  },
  {
    "text": "That's what signing means. You have this long message\nand you sign it at the bottom. You're taking responsibility for\nthe contents of that message.",
    "start": "3732060",
    "end": "3740620"
  },
  {
    "text": "And then verification is you\nhave M sigma and a public key.",
    "start": "3740620",
    "end": "3747710"
  },
  {
    "text": "And this is simply going\nto output true or false. ",
    "start": "3747710",
    "end": "3755780"
  },
  {
    "text": "And so the public key should\nnot reveal any information",
    "start": "3755780",
    "end": "3762260"
  },
  {
    "text": "about the secret key. ",
    "start": "3762260",
    "end": "3768570"
  },
  {
    "text": "And that's the challenge\nof building PKI systems, that we'll talk about in\nsome detail next time.",
    "start": "3768570",
    "end": "3776800"
  },
  {
    "text": "But we don't need to\nthink about that other than acknowledging it today.",
    "start": "3776800",
    "end": "3786099"
  },
  {
    "text": "So the public and private\nkey are two distinct things, neither one of which reveals\nanything about the other.",
    "start": "3786100",
    "end": "3792150"
  },
  {
    "text": "Think of them as completely\ndistinct passwords. But they happen to be\nmathematically related. That's why this\nwhole thing works.",
    "start": "3792150",
    "end": "3798500"
  },
  {
    "text": "And that mathematical\nrelationship we'll look at in some\ndetail on Thursday.",
    "start": "3798500",
    "end": "3804750"
  },
  {
    "text": "But having said\nthat, take a look at what this app is\ndoing for us, right? This is a security application.",
    "start": "3804750",
    "end": "3811369"
  },
  {
    "text": "And I haven't quite gotten\nto hash functions yet. But I'll get to it\nin just a minute.",
    "start": "3811370",
    "end": "3816599"
  },
  {
    "text": "But what I want to do is\nemphasize that there's two operations going on. One of which is a\nsignature, which",
    "start": "3816600",
    "end": "3822760"
  },
  {
    "text": "is a private signature, in the\nsense that it's private to me, if I'm Alice. Or private to Alice.",
    "start": "3822760",
    "end": "3828500"
  },
  {
    "text": "And you're using\nsecret information on this public message,\nM, because that's going to be publicized.",
    "start": "3828500",
    "end": "3834690"
  },
  {
    "text": "And you're going to\nsign the public message. And then anybody in the\nworld who has access",
    "start": "3834690",
    "end": "3841160"
  },
  {
    "text": "to Alice's public key is\ngoing to be able to say, oh I'm looking at the signature,\nwhich is a bunch of bits.",
    "start": "3841160",
    "end": "3846839"
  },
  {
    "text": "I'm looking at the message,\nwhich is a whole lot of bits. And I have this public key,\nwhich is a bunch of bits.",
    "start": "3846840",
    "end": "3852589"
  },
  {
    "text": "And I'm going to be\nable to tell for sure that either Alice\nsigned this message,",
    "start": "3852590",
    "end": "3859339"
  },
  {
    "text": "or Alice did not\nsign this message. And the assumption\nhere is that Alice",
    "start": "3859340",
    "end": "3866710"
  },
  {
    "text": "kept her private key secret. And of course, what\nI just wrote there, that the public key\ndoes not reveal anything",
    "start": "3866710",
    "end": "3873450"
  },
  {
    "text": "about the secret key, OK? So that's digital signatures\nfor you, in a nutshell. And when you do MIT\ncertificates you're",
    "start": "3873450",
    "end": "3880990"
  },
  {
    "text": "using digital signatures a la\nRivest-Shamir-Adleman, the RSA algorithm. So you're using\nthis all the time,",
    "start": "3880990",
    "end": "3888579"
  },
  {
    "text": "when you click on 6.046\nlinks, for example. And what happens is M is\ntypically really large.",
    "start": "3888580",
    "end": "3896440"
  },
  {
    "text": "I mean it could\nbe a file, right? It could be a large file. And you don't necessarily want\nto compute these operations",
    "start": "3896440",
    "end": "3902730"
  },
  {
    "text": "on large files. So for convenience, what happens\nis you end up hashing the file.",
    "start": "3902730",
    "end": "3909579"
  },
  {
    "text": "And for large M it's\neasier to sign h of M.",
    "start": "3909580",
    "end": "3922550"
  },
  {
    "text": "And so replace the M's that\nyou see here with h of M,",
    "start": "3922550",
    "end": "3929810"
  },
  {
    "text": "all right? So now that we're given that\nwe're going to be doing h of M",
    "start": "3929810",
    "end": "3938640"
  },
  {
    "text": "in here, think\nabout what we wanted to accomplish with M, right?",
    "start": "3938640",
    "end": "3945390"
  },
  {
    "text": "I told you what we wanted\nto accomplish with M. There's a particular message. I'm Alice. I'm going to keep my\nsecret key secret.",
    "start": "3945390",
    "end": "3953849"
  },
  {
    "text": "But I want to commit to signing\nthis message M, all right? And I want to make\nsure that nobody",
    "start": "3953850",
    "end": "3960329"
  },
  {
    "text": "can pretend to be me who\ndoesn't know my secret key. And nobody does.",
    "start": "3960330",
    "end": "3967290"
  },
  {
    "text": "So if I'm going to be signing\nthe hash of the message, now it comes down\nto today's lecture.",
    "start": "3967290",
    "end": "3973930"
  },
  {
    "text": "I'm signing the hash\nof the message h of M. What property do I require of\nh in order for this whole thing",
    "start": "3973930",
    "end": "3982119"
  },
  {
    "text": "to work out? Yeah, go ahead. AUDIENCE: Is it\nnon-malleability? SRINIVAS DEVADAS: Non\nmalleability, but even before",
    "start": "3982120",
    "end": "3988665"
  },
  {
    "text": "that-- suppose-- absolutely,\nbut non-malleability is kind of beyond one of these\nproperties over on the right.",
    "start": "3988665",
    "end": "3996590"
  },
  {
    "text": "You're on the\nright track, right? So do you want to give\nme a different answer?",
    "start": "3996590",
    "end": "4005219"
  },
  {
    "text": "You can give me a\ndifferent answer. AUDIENCE: Oh, I'm not sure. SRINIVAS DEVADAS: OK.",
    "start": "4005219",
    "end": "4012190"
  },
  {
    "text": "What? Yeah, back there. AUDIENCE: I think you wanted to\none-way because otherwise you could take that signature and\nfind another message that you",
    "start": "4012190",
    "end": "4020112"
  },
  {
    "text": "could credit. SRINIVAS DEVADAS: I\ncan make M public. I can make M-- M can be public.",
    "start": "4020112",
    "end": "4025480"
  },
  {
    "text": "And h of M is public. So one-wayness is not\ninteresting for this example",
    "start": "4025480",
    "end": "4033570"
  },
  {
    "text": "if M is public. And we can assume that M\neventually gets public. Because that's the message\nI'm signing, right?",
    "start": "4033570",
    "end": "4038839"
  },
  {
    "text": "I can also put M out. So I want the\nrelationship-- I want you to focus on the relationship\nbetween h of M and M",
    "start": "4038840",
    "end": "4045760"
  },
  {
    "text": "and tell me what would\nbreak this system. And you're on the right track.",
    "start": "4045760",
    "end": "4051119"
  },
  {
    "text": "Yeah, go ahead. Or way back there. Yeah, sorry about that. AUDIENCE: TCR. SRINIVAS DEVADAS: TCR. Why TCR?",
    "start": "4051120",
    "end": "4056780"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "4056780",
    "end": "4066130"
  },
  {
    "text": "SRINIVAS DEVADAS: So I have\nM. So what happens here-- I should write this out.",
    "start": "4066130",
    "end": "4071920"
  },
  {
    "text": "I'm given-- as an adversary I\nhave M and h of M. It is bad",
    "start": "4071920",
    "end": "4092640"
  },
  {
    "text": "if Alice signs h of M, but Bob\nclaims Alice signed M prime.",
    "start": "4092640",
    "end": "4113009"
  },
  {
    "text": "Because h of M equals\nh of M prime, right?",
    "start": "4113010",
    "end": "4119829"
  },
  {
    "text": "That is bad. So the M is public--\ncould you stand up? ",
    "start": "4119830",
    "end": "4129229"
  },
  {
    "text": "M is given. There's a specific\nM, and a specific h of M in particular,\nthat has been exposed.",
    "start": "4129229",
    "end": "4136470"
  },
  {
    "text": "And h of M is what was\nused for the signature. So you want to keep\nh of M the same. It's a specific one.",
    "start": "4136470",
    "end": "4142170"
  },
  {
    "text": "So it's not\ncollision resistance, it's target\ncollision resistance, because that's given to you.",
    "start": "4142170",
    "end": "4147460"
  },
  {
    "text": "And you want to\nkeep that the same. But you want to claim that oh,\nyou promised me $10,000, not",
    "start": "4147460",
    "end": "4153600"
  },
  {
    "text": "$20, right? If you can do that,\nyou signed saying you want to pay $10,000, not\n$20, then you've got a problem.",
    "start": "4153600",
    "end": "4162149"
  },
  {
    "text": "So your thing is very close. It's just that it doesn't need\nto be a strong relationship between the 10,000 or the 20.",
    "start": "4162149",
    "end": "4168710"
  },
  {
    "text": "I mean I give you a\nconcrete example of that. But it could be more,\nit could be less.",
    "start": "4168710",
    "end": "4173720"
  },
  {
    "text": "Anything that is different\nfrom what you signed, be it with the numerical\nrelationship or not,",
    "start": "4173720",
    "end": "4178870"
  },
  {
    "text": "would cause a problem and\nbreak this scheme, all right? Are we good?",
    "start": "4178870",
    "end": "4185259"
  },
  {
    "text": "All right, one last example,\nthe most interesting one.",
    "start": "4185260",
    "end": "4190489"
  },
  {
    "text": "And as I guessed I'm\nprobably not going",
    "start": "4190490",
    "end": "4197250"
  },
  {
    "text": "to get to saying very much\nabout how cache functions are implemented. But maybe I'll spend\na minute or two on it.",
    "start": "4197250",
    "end": "4204041"
  },
  {
    "text": " So let's do this example that\nhas to do with commitments.",
    "start": "4204041",
    "end": "4212700"
  },
  {
    "start": "4212700",
    "end": "4219260"
  },
  {
    "text": "Commitment is important, right? You want to commit\nto doing things. You want to keep your promises.",
    "start": "4219260",
    "end": "4224420"
  },
  {
    "text": "And in this case we\nhave a legal requirement that you want to be able to make\npeople honor their commitments,",
    "start": "4224420",
    "end": "4234550"
  },
  {
    "text": "and not weasel their way\nout of commitments, right? And we want to deal with\nthis computationally.",
    "start": "4234550",
    "end": "4239670"
  },
  {
    "text": "And let's think about auctions. So Alice has value x,\ne.g. an auction bid.",
    "start": "4239670",
    "end": "4251325"
  },
  {
    "text": " Alice computes what\nwe're going to call",
    "start": "4251325",
    "end": "4262170"
  },
  {
    "text": "C of x, which is a commitment\nof x, and cements it, right?",
    "start": "4262170",
    "end": "4271500"
  },
  {
    "text": "C of x, C of x is-- let's\nassume that the auctioneer,",
    "start": "4271500",
    "end": "4286670"
  },
  {
    "text": "and perhaps other auctionees\nas well, see C of x.",
    "start": "4286670",
    "end": "4292469"
  },
  {
    "text": "You have to submit it\nto somebody, right? So you can assume\nthat that's exposed. And what is going to happen\nis, when bidding is over Alice",
    "start": "4292470",
    "end": "4309460"
  },
  {
    "text": "is going to open--\nso this is-- C of x can be thought\nof as sealing the bid.",
    "start": "4309460",
    "end": "4320069"
  },
  {
    "text": "So that's the commitment. You're sealing the--\nyou're making a bid and you're sealing\nit in an envelope. You've committed to that.",
    "start": "4320069",
    "end": "4325650"
  },
  {
    "text": "That's obviously, what\nhappens in real life without cryptography,\nbut we want to do this with cryptography,\nwith hash functions.",
    "start": "4325650",
    "end": "4332300"
  },
  {
    "text": "And so now Alice opens\nC of x to reveal x.",
    "start": "4332300",
    "end": "4339250"
  },
  {
    "text": "So she has to prove that\nin fact x was her bid.",
    "start": "4339250",
    "end": "4345670"
  },
  {
    "text": "And that it matches\nwhat she sealed. When you open it up, think\nabout it conceptually",
    "start": "4345670",
    "end": "4351930"
  },
  {
    "text": "from a standpoint of\nwhat happens with paper, and then we have to think\nabout this computationally",
    "start": "4351930",
    "end": "4358620"
  },
  {
    "text": "and what this implies, right? So again I'll do a\nlittle bit of set up. And then we have start\ntalking about the properties",
    "start": "4358620",
    "end": "4365370"
  },
  {
    "text": "that we want for this\nparticular application. So there are a bunch\nof people who are",
    "start": "4365370",
    "end": "4370580"
  },
  {
    "text": "doing bidding for this auction. I don't-- I want\nto be the first--",
    "start": "4370580",
    "end": "4376999"
  },
  {
    "text": "I don't want to\nspend a lot of money. But I want to win. All of us are like that, right? If I know information\nabout your bid,",
    "start": "4376999",
    "end": "4384350"
  },
  {
    "text": "that is obviously a\ntremendous advantage. So clearly that\ncan't happen, right? If I know one other person's\nbid I just do plus 1 on that.",
    "start": "4384350",
    "end": "4393000"
  },
  {
    "text": "If I know everybody else's I\njust do plus 1 on the maximum. So clearly there's some secrecy\nthat's required here, correct?",
    "start": "4393000",
    "end": "4399420"
  },
  {
    "text": "So C of x is going to\nhave to do two things. It can't reveal x.",
    "start": "4399420",
    "end": "4406160"
  },
  {
    "text": "Because then even maybe\nthe auctioneer is bad. Or other people are\nlooking at this.",
    "start": "4406160",
    "end": "4411570"
  },
  {
    "text": "And you can just assume that C\nof x is-- the C of x's are all public. But I also need a\nconstraint that's",
    "start": "4411570",
    "end": "4419840"
  },
  {
    "text": "associated with C of x\nthat corresponds to making sure Alice is honest, correct?",
    "start": "4419840",
    "end": "4426539"
  },
  {
    "text": "So I need to make Alice\ncommit to something, right? So what are the different\nproperties of the hash function",
    "start": "4426540",
    "end": "4436000"
  },
  {
    "text": "that if I use h of\nx here, that I'd",
    "start": "4436000",
    "end": "4443350"
  },
  {
    "text": "want h to satisfy in order\nfor this whole process to work like it's supposed to\nwork with paper and envelopes?",
    "start": "4443350",
    "end": "4454699"
  },
  {
    "text": "Yeah, go ahead. AUDIENCE: It has to be\none-way [INAUDIBLE]. SRINIVAS DEVADAS: It\nhas to be one-way.",
    "start": "4454700",
    "end": "4460030"
  },
  {
    "text": "And explain to me-- so I\nwant a description of it has to be one-way, because why?",
    "start": "4460030",
    "end": "4466260"
  },
  {
    "text": "AUDIENCE: Because\nyou want all the c x's to be hidden from\nall the other options. SRINIVAS DEVADAS: Right. C of x should not\nreveal x, all right?",
    "start": "4466260",
    "end": "4480930"
  },
  {
    "text": "All right. That's good. Do you have more? It has to be\ncollision resistant.",
    "start": "4480930",
    "end": "4486764"
  },
  {
    "start": "4486765",
    "end": "4493180"
  },
  {
    "text": "OK. I guess. A little bit more.",
    "start": "4493180",
    "end": "4500580"
  },
  {
    "text": "You're getting there. What-- why is it\ncollision resistant?",
    "start": "4500580",
    "end": "4505672"
  },
  {
    "text": "AUDIENCE: Because you want\nto make sure that Alice, when she makes a bid that\nshe commits that bid.",
    "start": "4505672",
    "end": "4512560"
  },
  {
    "text": "If she's not going to resist\nit then she could bid $100 and then find something else. SRINIVAS DEVADAS:\nThat's exactly right.",
    "start": "4512560",
    "end": "4518430"
  },
  {
    "text": "So CR, because\nAlice should not be",
    "start": "4518430",
    "end": "4526540"
  },
  {
    "text": "able to open this in\nmultiple ways, right?",
    "start": "4526540",
    "end": "4537760"
  },
  {
    "text": "And in this case it's\nnot TCR in the sense that Alice controls\nwhat her bids are.",
    "start": "4537760",
    "end": "4545350"
  },
  {
    "text": "And so she might find a pair\nof bids that collide, correct?",
    "start": "4545350",
    "end": "4551440"
  },
  {
    "text": "She might realize that in\nthis particular hash function, you know $10,000 and a billion\ndollars collide, right?",
    "start": "4551440",
    "end": "4561000"
  },
  {
    "text": "And so she figures\ndepending on what happens, she's a billionaire,\nlet's assume.",
    "start": "4561000",
    "end": "4567820"
  },
  {
    "text": "She's going to open\nthe right thing. She's a billionaire, but\nshe doesn't necessarily want to spend the billion, OK?",
    "start": "4567820",
    "end": "4573389"
  },
  {
    "text": "So that's that, right? But I want more. Go ahead.",
    "start": "4573390",
    "end": "4579114"
  },
  {
    "text": "AUDIENCE: You don't\nwant it to be malleable. Assuming that the\nauctioneer is not honest because you don't want to\naccept a bribe from someone",
    "start": "4579115",
    "end": "4585690"
  },
  {
    "text": "and then change\neveryone else's bid to square root of\nwhatever they bid. SRINIVAS DEVADAS:\nThat's exactly right.",
    "start": "4585690",
    "end": "4591110"
  },
  {
    "text": "Or plus 1, which is a\ngreat example, right? So there you go.",
    "start": "4591110",
    "end": "4597050"
  },
  {
    "text": "I ran out of Frisbees. You can get one next time. ",
    "start": "4597050",
    "end": "4602610"
  },
  {
    "text": "So yeah, I don't\nneed this anymore. You're exactly right. There's another-- it turns out\nit's even more subtle than what",
    "start": "4602610",
    "end": "4609790"
  },
  {
    "text": "you just described. And I think I might be able\nto point that out to you. But let me just first\ndescribe this answer, which",
    "start": "4609790",
    "end": "4619730"
  },
  {
    "text": "gives us non-malleability. So the claim is that you\nalso want non-malleability",
    "start": "4619730",
    "end": "4626130"
  },
  {
    "text": "in your hash function. And the simple reason is,\ngiven C of x-- and let's assume",
    "start": "4626130",
    "end": "4634147"
  },
  {
    "text": "that this is public. It's certainly public\nto the auctioneer, and it could be public to\nthe other bidders as well.",
    "start": "4634147",
    "end": "4639530"
  },
  {
    "text": "Because the notion of\nsealing is that you've sealed it using C of x. But people can see the\noutside of the envelope, which",
    "start": "4639530",
    "end": "4646580"
  },
  {
    "text": "is C of x. So everyone can see C of x. You still want this to work,\neven though all other bidders",
    "start": "4646580",
    "end": "4652250"
  },
  {
    "text": "can see C of x. So given C of x, should\nnot be possible to produce",
    "start": "4652250",
    "end": "4664989"
  },
  {
    "text": "C of x plus 1. You don't know x is. But if you can produce C of\nx plus 1, you win, all right?",
    "start": "4664990",
    "end": "4674050"
  },
  {
    "text": "And so that's the problem. Now it turns out you\nnow say OK, am I done?",
    "start": "4674050",
    "end": "4684929"
  },
  {
    "text": "I want these three properties. And I'm done, right?",
    "start": "4684930",
    "end": "4690350"
  },
  {
    "text": "There's a little\nsubtlety here which these properties don't capture.",
    "start": "4690350",
    "end": "4695750"
  },
  {
    "text": "So that's why there's more here. And I don't mean to\ntitillate, because I'll",
    "start": "4695750",
    "end": "4701770"
  },
  {
    "text": "tell you what is missing here. But let's say that I have a hash\nfunction that looks like this.",
    "start": "4701770",
    "end": "4709370"
  },
  {
    "text": " And this here is non-malleable.",
    "start": "4709370",
    "end": "4719970"
  },
  {
    "text": "It is collision resistant. And it's one-way, all right? So h of x has all these\nwonderful properties,",
    "start": "4719970",
    "end": "4726730"
  },
  {
    "text": "all right? I'm creating an h\nprime x that looks",
    "start": "4726730",
    "end": "4732160"
  },
  {
    "text": "like this, which is\na concatenation of h of x, and giving away the most\nsignificant bit of x, which",
    "start": "4732160",
    "end": "4740210"
  },
  {
    "text": "is my bid, right? I'm just giving\nthat away, right? The problem here is\nthat we haven't really",
    "start": "4740210",
    "end": "4748190"
  },
  {
    "text": "made our properties\nbroad enough to solve this particular\napplication to the extent",
    "start": "4748190",
    "end": "4754230"
  },
  {
    "text": "that there's contrived cases\nwhere these properties aren't enough, OK?",
    "start": "4754230",
    "end": "4760420"
  },
  {
    "text": "And the reason is simple. h prime x is arguably\nNM, CR, and OW.",
    "start": "4760420",
    "end": "4770000"
  },
  {
    "text": "And I won't go into to\neach of those arguments. But you can think\nabout it, right?",
    "start": "4770000",
    "end": "4776630"
  },
  {
    "text": "If I'm just giving you one\nbit, there's 159 others, there's a couple of\nhundred others, whatever it",
    "start": "4776630",
    "end": "4782139"
  },
  {
    "text": "is that I have in the domain. It's not going to be invertible. h prime x is not going to\nbe invertible if h of x",
    "start": "4782140",
    "end": "4789420"
  },
  {
    "text": "is not invertible. h prime x is not going to be\nbreakable in terms of collision",
    "start": "4789420",
    "end": "4797880"
  },
  {
    "text": "resistance if h of\nx is not breakable, and so on and so forth. But if I had a hash\nfunction like that,",
    "start": "4797880",
    "end": "4804740"
  },
  {
    "text": "is it a good hash function\nfor my commitment application? No, obviously not.",
    "start": "4804740",
    "end": "4810090"
  },
  {
    "text": "Because if I publicize this\nhash function-- remember, everything is public\nhere with respect to h and h prime-- you\nare giving away the most",
    "start": "4810090",
    "end": "4818030"
  },
  {
    "text": "significant that\ncorresponds to your bid in this particular\nhash function, right?",
    "start": "4818030",
    "end": "4823350"
  },
  {
    "text": "So you really need a little bit\nmore than these for secrecy,",
    "start": "4823350",
    "end": "4833170"
  },
  {
    "text": "for true secrecy.  But in the context\nof this example,",
    "start": "4833170",
    "end": "4839889"
  },
  {
    "text": "I mean it's common\nsense that you would not use the hash function\nlike that, right? So it's not that there's\nanything profound here.",
    "start": "4839890",
    "end": "4846949"
  },
  {
    "text": "It's just that I\nwant to make sure that you understand the\nnuances of the properties that we're requiring.",
    "start": "4846950",
    "end": "4852580"
  },
  {
    "text": "We had all the\nrequirements corresponding to the definitions\nof NM and CR and OW.",
    "start": "4852580",
    "end": "4858900"
  },
  {
    "text": "And you need a little bit\nmore for this example, where you have to say something,\nperhaps informally,",
    "start": "4858900",
    "end": "4864300"
  },
  {
    "text": "like the bits of your auction\nare scrambled in the final hash",
    "start": "4864300",
    "end": "4870869"
  },
  {
    "text": "output, which most hash\nfunctions should do anyway, and h of x will definitely do. But you kind of unscrambled\nit by adding this little thing",
    "start": "4870870",
    "end": "4879290"
  },
  {
    "text": "in here, corresponding to\nthe most significant thing, all right? So I'll stop with that.",
    "start": "4879290",
    "end": "4885480"
  },
  {
    "text": "Let me just say that the\noperation-- or sorry, the work involved in\ncreating hash functions that",
    "start": "4885480",
    "end": "4893590"
  },
  {
    "text": "are poly-time computable\nis research work. People put up hash functions\nand they get broken,",
    "start": "4893590",
    "end": "4900290"
  },
  {
    "text": "like MD4 was put up in '92 and\nthen got broken, SHA-1 and so on and so forth. And so I just encourage you\nto look up SHA-3 and just take",
    "start": "4900290",
    "end": "4909580"
  },
  {
    "text": "a quick scan and what\nthe complexity of SHA-3 is with respect to computing the\nhash given an arbitrary string,",
    "start": "4909580",
    "end": "4916820"
  },
  {
    "text": "all right? I'll stick around for questions. ",
    "start": "4916820",
    "end": "4920075"
  }
]