[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6340"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6340",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13320",
    "end": "21369"
  },
  {
    "start": "20000",
    "end": "32000"
  },
  {
    "text": "PROFESSOR: OK, welcome back. This is the second half of our\ntwo lectures on distributed algorithms this week.",
    "start": "21370",
    "end": "28341"
  },
  {
    "text": "I could turn that on, OK. All right, I'll start\nwith a quick preview.",
    "start": "28341",
    "end": "33969"
  },
  {
    "start": "32000",
    "end": "1205000"
  },
  {
    "text": "This week, we're just looking\nat synchronous and asynchronous distributed algorithms,\nnot worrying about interesting\nstuff like failures.",
    "start": "33970",
    "end": "42070"
  },
  {
    "text": "Last time we looked\nat leader election, maximal independent set,\nbreadth-first spanning trees,",
    "start": "42070",
    "end": "48289"
  },
  {
    "text": "and we started looking\nat shortest paths trees. We'll finish that\ntoday, and then we'll",
    "start": "48290",
    "end": "53570"
  },
  {
    "text": "move on to the main topic for\ntoday, which is asynchronous distributed algorithms where\nthings start getting much more",
    "start": "53570",
    "end": "59880"
  },
  {
    "text": "complicated because not\neverything is going on in synchronous rounds. And we'll revisit the same\ntwo problems, breadth-first",
    "start": "59880",
    "end": "67260"
  },
  {
    "text": "and shortest paths\nspanning trees. ",
    "start": "67260",
    "end": "72320"
  },
  {
    "text": "Quick review, all\nof our algorithms are using a model that's\nbased on undirected graph.",
    "start": "72320",
    "end": "80505"
  },
  {
    "text": " Using this notation, gamma,\nfor the neighbors of a vertex.",
    "start": "80505",
    "end": "86562"
  },
  {
    "text": "We'll talk about the\ndegree of a vertex. We have a process,\nthen, associated with every vertex in the graph.",
    "start": "86562",
    "end": "93290"
  },
  {
    "text": "And we associate\ncommunication channels in both directions\non every edge. ",
    "start": "93290",
    "end": "101039"
  },
  {
    "text": "Last time we looked at\nsynchronous distributed algorithms in the\nsynchronous model. We have the processes\nof the ground vertices,",
    "start": "101040",
    "end": "108100"
  },
  {
    "text": "they communicate using messages. The processes have\nlocal ports that they",
    "start": "108100",
    "end": "113270"
  },
  {
    "text": "know by some kind of\nlocal name, and the ports connect to their\ncommunication channel.",
    "start": "113270",
    "end": "118520"
  },
  {
    "text": "The algorithm executes\nin synchronous rounds where, in every\naround, every process is going to decide what to\nsend on all of its ports,",
    "start": "118520",
    "end": "126455"
  },
  {
    "text": "and the messages then get put\ninto the channel delivered to the processes\nat the other end. And everybody looks at all the\nmessages they get at that round",
    "start": "126456",
    "end": "133970"
  },
  {
    "text": "all at once, and they\ndetermine a new state. They compute a new\nstate based on all of those arriving messages.",
    "start": "133970",
    "end": "140086"
  },
  {
    "text": " We started with leader election.",
    "start": "140086",
    "end": "145400"
  },
  {
    "text": "I won't repeat the\nproblem definition, but here's the results\nthat we got last time. We looked at a special\ncase of a graph that's",
    "start": "145400",
    "end": "152010"
  },
  {
    "text": "just a simple clique. And if the processes don't have\nany distinguishing information,",
    "start": "152010",
    "end": "159129"
  },
  {
    "text": "like unique identifiers,\nand they're deterministic, then there's no way to break\nthe symmetry and you can prove",
    "start": "159130",
    "end": "165580"
  },
  {
    "text": "an impossibility result\nthat says that you can't-- in a deterministic,\nindistinguishable case,",
    "start": "165580",
    "end": "172100"
  },
  {
    "text": "you can't guarantee to elect a\nleader in this kind of a graph.",
    "start": "172100",
    "end": "177506"
  },
  {
    "text": "Just as an aside, I should\nsay that distributed computing theory is just filled with\nimpossibility results,",
    "start": "177506",
    "end": "183200"
  },
  {
    "text": "and they're all based on this\nlimitation of distributed computing where\neach node only knows what's happening to itself\nand in its neighborhood.",
    "start": "183200",
    "end": "191130"
  },
  {
    "text": "Nobody knows what's happening\nin the entire system. That's a very strong limitation,\nand as you might expect,",
    "start": "191130",
    "end": "198250"
  },
  {
    "text": "that would make a lot of\nthings impossible or difficult. Then we went on and got two\npositive results, a theorem",
    "start": "198250",
    "end": "205330"
  },
  {
    "text": "that-- well, an algorithm\nthat is deterministic, but the processes have\nunique identifiers,",
    "start": "205330",
    "end": "212209"
  },
  {
    "text": "and then you can elect\na leader quickly. Or if you don't have\nunique identifiers",
    "start": "212210",
    "end": "217690"
  },
  {
    "text": "but you have probability, so\nyou can make random choices, you can essentially\nchoose an identifier,",
    "start": "217690",
    "end": "224850"
  },
  {
    "text": "and then it works almost as\nwell with those identifiers. Then we looked at\nmaximal independent set.",
    "start": "224850",
    "end": "233410"
  },
  {
    "text": "Remember what it\nmeans, no two neighbors should both be in\nthe set, but you don't want to be able to add\nany more nodes while keeping",
    "start": "233410",
    "end": "240740"
  },
  {
    "text": "these nodes independent. In other words, every\nnode is either in the set or has a neighbor in the set. ",
    "start": "240740",
    "end": "248810"
  },
  {
    "text": "And we gave this algorithm--\nI'm just including it here as a reminder-- Luby's\nalgorithm, which basically goes",
    "start": "248810",
    "end": "256199"
  },
  {
    "text": "through a number of phases. In each phase, some processes\ndecide to join the MIS",
    "start": "256200",
    "end": "262729"
  },
  {
    "text": "and their neighbors\ndecide not to join, and you just repeat this. You do this based on\nchoosing random IDs again.",
    "start": "262730",
    "end": "269390"
  },
  {
    "text": " And we proved that the theorem\ncorrectly computes an MIS,",
    "start": "269390",
    "end": "276800"
  },
  {
    "text": "and with a good\nprobability, all the nodes decide within only\nlogarithmic phases,",
    "start": "276800",
    "end": "284520"
  },
  {
    "text": "and here is the number of nodes. All right, then went on to\nbreadth-first spanning trees.",
    "start": "284520",
    "end": "292360"
  },
  {
    "text": "Here, we have now a graph\nthat already has a leader. It has a distinguished vertex.",
    "start": "292360",
    "end": "298070"
  },
  {
    "text": "And the process\nthat's sitting there knows that it's the leader. The processes now\nare going to produce",
    "start": "298070",
    "end": "303539"
  },
  {
    "text": "a breadth-first spanning\ntree rooted at that vertex. Now, for the rest\nof the time, we'll",
    "start": "303540",
    "end": "309310"
  },
  {
    "text": "assume unique identifiers,\nbut the processes don't know anything about the\ngraph except that their own ID",
    "start": "309310",
    "end": "314979"
  },
  {
    "text": "and their neighbors' IDs. And we want the processes\nto eventually output",
    "start": "314980",
    "end": "320780"
  },
  {
    "text": "the ID of their parent. And here is, just to repeat, the\nsimple algorithm that we used.",
    "start": "320780",
    "end": "329310"
  },
  {
    "text": "Basically, it's processes\njust mark themselves as they get included\nin the tree.",
    "start": "329310",
    "end": "334863"
  },
  {
    "text": "It starts out with just\nthe root being marked. He sends a special search\nmessage out to his neighbors, and soon as they get it they\nget marked and pass it on.",
    "start": "334864",
    "end": "343259"
  },
  {
    "text": "Everybody gets\nmarked in a number of rounds that corresponds to\ntheir depth in-- their distance",
    "start": "343260",
    "end": "349650"
  },
  {
    "text": "from the root of the tree,\n[INAUDIBLE] from the tree. We talked about correctness\nin terms of invariance.",
    "start": "349650",
    "end": "356470"
  },
  {
    "text": "What this algorithm\nguarantees is, at the end of any number r of\nrounds, exactly the processes",
    "start": "356470",
    "end": "362389"
  },
  {
    "text": "at distance up to r are\nmarked, and the processes that are marked, have\ntheir parents defined.",
    "start": "362390",
    "end": "369950"
  },
  {
    "text": "And if your parents\ndefined-- it's the UID of a process that\nhas distance d minus 1",
    "start": "369950",
    "end": "376500"
  },
  {
    "text": "from the root. If you're a distance\nd, your parent should be somebody\nwho's correct--",
    "start": "376500",
    "end": "382160"
  },
  {
    "text": "has the correct\ndistance d minus 1. We analyze the complexity.",
    "start": "382160",
    "end": "388130"
  },
  {
    "text": "Time is counting the\nnumber of rounds. And that's going\nto be, at worst, the diameter of the network.",
    "start": "388130",
    "end": "393790"
  },
  {
    "text": "It's really the distance from\na particular vertex, v 0. And the message\ncomplexity-- there's",
    "start": "393790",
    "end": "400130"
  },
  {
    "text": "only one message sent in\neach direction on each edge, so that's going to be only\norder of the number of edges.",
    "start": "400130",
    "end": "406659"
  },
  {
    "text": "And we talked about how\nyou can get child pointers. This just gives you parents. But if you want to also\nfind out your children,",
    "start": "406660",
    "end": "413070"
  },
  {
    "text": "then every search\nmessage should get a response either\nsaying you're my parent or you're not my parent.",
    "start": "413070",
    "end": "419250"
  },
  {
    "text": "And we can do a termination\nusing convergecast, and there's some applications\nwe talked about as well.",
    "start": "419250",
    "end": "424590"
  },
  {
    "text": " All right, and then at\nthe end of the hour, we started talking\nabout a generalization,",
    "start": "424590",
    "end": "431620"
  },
  {
    "text": "a breadth-first spanning trees,\nwhich adds weights so you have shortest paths trees.",
    "start": "431620",
    "end": "437880"
  },
  {
    "text": "Now you have weights\non the edges. Processes still have\nunique identifiers. ",
    "start": "437880",
    "end": "444452"
  },
  {
    "text": "They don't know anything\nabout the graph, except their immediate\nneighborhood information. And they have to produce\na shortest path spanning",
    "start": "444452",
    "end": "451630"
  },
  {
    "text": "tree rooted at vertex v 0. You know what a spanning tree\nis and the shortest paths",
    "start": "451630",
    "end": "458500"
  },
  {
    "text": "are in terms of the\ntotal weight of the path. Now we want each node each,\nprocess, to output its parent",
    "start": "458500",
    "end": "467050"
  },
  {
    "text": "in the shortest path. And also the distance from\nthe original vertex v 0. ",
    "start": "467050",
    "end": "475730"
  },
  {
    "text": "At the end of the\nhour, we looked at a version of Bellman-Ford,\nwhich you've already",
    "start": "475730",
    "end": "480830"
  },
  {
    "text": "seen as a sequential algorithm.",
    "start": "480830",
    "end": "485919"
  },
  {
    "text": "But as a distributed\nalgorithm, everybody keeps track of their best\nguess, their best current guess,",
    "start": "485920",
    "end": "492090"
  },
  {
    "text": "of the distance from\nthe initial vertex. And they keep track\nof their parent",
    "start": "492090",
    "end": "498760"
  },
  {
    "text": "on some path that gave it\nthis distance estimate, and they keep their\nunique identifier.",
    "start": "498760",
    "end": "506100"
  },
  {
    "text": "The complete algorithm\nnow is, everybody's going to keep sending\ntheir distance around-- I",
    "start": "506100",
    "end": "511189"
  },
  {
    "text": "mean we could optimize\nthat, but this is simple. At every round, everybody sends\ntheir current distance estimate",
    "start": "511190",
    "end": "518719"
  },
  {
    "text": "to all their neighbors. They collect the\ndistance estimates from all their neighbors, and\nthen they do a relaxation step.",
    "start": "518720",
    "end": "525930"
  },
  {
    "text": "If they get anything\nthat's better than what they had before, they\nlook at the best new estimate",
    "start": "525930",
    "end": "531040"
  },
  {
    "text": "they could get. They take the minimum of their\nold estimate-- stop shaking,",
    "start": "531040",
    "end": "537730"
  },
  {
    "text": "good-- and the minimum\nof all of the estimates they would get by looking\nat the incoming information",
    "start": "537730",
    "end": "546060"
  },
  {
    "text": "plus adding the weight of\nthe edge between the sender",
    "start": "546060",
    "end": "551160"
  },
  {
    "text": "and the node itself. This way you may get\na better estimate.",
    "start": "551160",
    "end": "556470"
  },
  {
    "text": "And if you do, you\nwould reset your parent to be the sender of this\nimproved information.",
    "start": "556470",
    "end": "564780"
  },
  {
    "text": "And again, you can\npick-- if there's a tie, you can pick any\nof the nodes that",
    "start": "564780",
    "end": "570690"
  },
  {
    "text": "sense-- the information\nleading to the best new guess, you can set your\nparent to any of those.",
    "start": "570690",
    "end": "578810"
  },
  {
    "text": "And then this just repeats.  At the very end of the hour,\nwe showed an animation,",
    "start": "578810",
    "end": "587084"
  },
  {
    "text": "which I'm not going\nto repeat now, which basically shows how you\ncan get lots of corrections.",
    "start": "587084",
    "end": "592210"
  },
  {
    "text": "You can have many\npaths that are set up that look good after\njust one round,",
    "start": "592210",
    "end": "597610"
  },
  {
    "text": "but then they get corrected\nas the rounds go on. You get much lower\nweight paths by having",
    "start": "597610",
    "end": "603319"
  },
  {
    "text": "a roundabout, multi-hop\npath to a node. You can get a better total cost.",
    "start": "603320",
    "end": "611690"
  },
  {
    "text": "Here's where we\ngot to last time. Now why does this work? Well what we need is\neventually every process",
    "start": "611690",
    "end": "618940"
  },
  {
    "text": "should get the correct distance. And the parent should be its\npredecessor on some shortest",
    "start": "618940",
    "end": "624649"
  },
  {
    "text": "path. In order to prove that-- you\nalways look for an invariant,",
    "start": "624650",
    "end": "631870"
  },
  {
    "text": "something that's true,\nat intermediate steps of the algorithm that you can\nshow by induction will hold--",
    "start": "631870",
    "end": "638110"
  },
  {
    "text": "and that will imply the result\nthat you want at the end. Here, what's the key invariant?",
    "start": "638110",
    "end": "644520"
  },
  {
    "text": "At the end of some number r of\nrounds, what do processes have?",
    "start": "644520",
    "end": "651081"
  },
  {
    "start": "651081",
    "end": "656649"
  },
  {
    "text": "After r rounds have passed,\nin this kind of algorithm,",
    "start": "656650",
    "end": "661796"
  },
  {
    "text": "what do the estimates look like? ",
    "start": "661796",
    "end": "668920"
  },
  {
    "text": "Well, after one\nround, everybody's got their best estimate\nthat could happen",
    "start": "668920",
    "end": "674350"
  },
  {
    "text": "on a single-- that could\nresult from a single hop path from v 0. After two rounds, you\nalso get the best guesses",
    "start": "674350",
    "end": "680779"
  },
  {
    "text": "from two hop paths, and\nafter r rounds in general, you have your distance\nand parent corresponding",
    "start": "680780",
    "end": "688130"
  },
  {
    "text": "to a shortest path\nchosen from among those that have at most our hops.",
    "start": "688130",
    "end": "693750"
  },
  {
    "text": "Yes? That makes sense?",
    "start": "693750",
    "end": "698811"
  },
  {
    "text": "No? Yeah? OK. All right, and if there is\nno path of r hops or fewer",
    "start": "698811",
    "end": "705569"
  },
  {
    "text": "to get to a node,\nthere's still going to have their distance estimate\nbe infinity after r rounds.",
    "start": "705569",
    "end": "712230"
  },
  {
    "text": "This is not a complete proof,\nbut it's the key invariant that makes this work.",
    "start": "712230",
    "end": "717350"
  },
  {
    "text": "You can see that after\nenough rounds corresponding to the number of\nnodes, for example,",
    "start": "717350",
    "end": "723650"
  },
  {
    "text": "everybody will have the correct\nshortest path of any length. OK?",
    "start": "723650",
    "end": "730620"
  },
  {
    "text": "The number of rounds\nuntil every estimate stabilize-- all the\nestimates stabilize,",
    "start": "730620",
    "end": "737980"
  },
  {
    "text": "it's going to be n minus 1. All right? Because the longest\nsimple path to any node",
    "start": "737980",
    "end": "745230"
  },
  {
    "text": "is going to be n\nminus 1, if it goes through all the nodes of the\nnetwork before reaching it.",
    "start": "745230",
    "end": "751310"
  },
  {
    "text": "Makes sense? If you want to make sure\nyou have the best estimate, you have to wait\nn minus 1 rounds",
    "start": "751310",
    "end": "758279"
  },
  {
    "text": "to make sure the\ninformation has reached you. The message complexity--\nwell, since there's",
    "start": "758280",
    "end": "763610"
  },
  {
    "text": "all these repeated estimates\nit's no longer just proportional to the\nnumber of edges, but you have to\ntake into account",
    "start": "763610",
    "end": "771210"
  },
  {
    "text": "that there can be many new\nestimates sent on each edge. In fact, the way\nI've written this,",
    "start": "771210",
    "end": "777100"
  },
  {
    "text": "you just keep sending your\ndistance at every round. It's going to be\nthe number of edges",
    "start": "777100",
    "end": "783930"
  },
  {
    "text": "times the number of rounds. You can do somewhat\nbetter than this, but it's worse than just\nthe simple BFS case.",
    "start": "783930",
    "end": "793009"
  },
  {
    "text": "This is more expensive, because\nBFS just had diameter rounds and this now has n\nfor n minus 1 rounds,",
    "start": "793010",
    "end": "801150"
  },
  {
    "text": "and BFS just had one message\never sent on each edge, and now we have to send many.",
    "start": "801150",
    "end": "807820"
  },
  {
    "text": "Comments? Questions? ",
    "start": "807820",
    "end": "814670"
  },
  {
    "text": "Is it clear that the time bound\nreally does depend on n and not on the diameter? ",
    "start": "814670",
    "end": "823190"
  },
  {
    "text": "For breadth-first search,\nit was enough just to have enough\nrounds to correspond",
    "start": "823190",
    "end": "830180"
  },
  {
    "text": "to the actual distance\nand hops to each node,",
    "start": "830180",
    "end": "837580"
  },
  {
    "text": "but now you need\nenough rounds to take care of these\nindirect paths that",
    "start": "837580",
    "end": "842670"
  },
  {
    "text": "might go through many nodes but\nstill end up with a shorter--",
    "start": "842670",
    "end": "848630"
  },
  {
    "text": "with a smaller total weight. Is it clear to everybody\nwhy the bound depends on n?",
    "start": "848630",
    "end": "855279"
  },
  {
    "text": "Actually the animation\nthat I had last time showed how there are\nlots of corrections, and you had enough-- you\nhad rounds that depended",
    "start": "855280",
    "end": "864260"
  },
  {
    "text": "on the total number of nodes. Yes? OK.",
    "start": "864260",
    "end": "869579"
  },
  {
    "text": "Yeah? AUDIENCE: But could you\nkeep track of each round",
    "start": "869580",
    "end": "875154"
  },
  {
    "text": "if the values-- if\nany of [INAUDIBLE]? If you-- if everything stops\nchanging after less than n",
    "start": "875154",
    "end": "880962"
  },
  {
    "text": "rounds, then you\nmight not have to-- PROFESSOR: OK, so you're\nasking about termination? AUDIENCE: Yeah. PROFESSOR: Ah, OK, well so\nthat's probably the next slide.",
    "start": "880962",
    "end": "888600"
  },
  {
    "text": "First, let's deal with\nthe child pointers, and then we'll come\nback to termination. First, this just gives\nyou your parents.",
    "start": "888600",
    "end": "894640"
  },
  {
    "text": "If you want your children,\nyou can do the same thing that we did last time. When a process gets a message,\nand the message doesn't",
    "start": "894640",
    "end": "903430"
  },
  {
    "text": "make the sender its\nparent, this is not giving it an improved distance.",
    "start": "903430",
    "end": "908589"
  },
  {
    "text": "Then the node can just\nrespond, non-parent. But if a process\nreceives a message that",
    "start": "908590",
    "end": "915330"
  },
  {
    "text": "doesn't improve the distance,\nit says, OK, you are my parent, but it might have also\ntold another node--",
    "start": "915330",
    "end": "923040"
  },
  {
    "text": "it might have another\nparent, another node that previously it\nthought was its parent. It has to do more\nwork, in this case,",
    "start": "923040",
    "end": "929720"
  },
  {
    "text": "to correct the erroneous\nparent information. It has to send its previous\nparent a non-parent message",
    "start": "929720",
    "end": "938270"
  },
  {
    "text": "to correct the previous\nparent message. Things are getting a\nlittle bit trickier here.",
    "start": "938270",
    "end": "946149"
  },
  {
    "text": "On the other end, if somebody is\nkeeping track of its children, it has to make adjustments\ntoo because things can",
    "start": "946150",
    "end": "952550"
  },
  {
    "text": "change during the algorithm. Let's say a process keeps track\nof its children in some set,",
    "start": "952550",
    "end": "958350"
  },
  {
    "text": "it has a set children. If it gets a non-parent\nmessage from a child,",
    "start": "958350",
    "end": "963620"
  },
  {
    "text": "even if that child might\nbe from a neighbor. That neighbor might be\nin its set children,",
    "start": "963620",
    "end": "969500"
  },
  {
    "text": "and this could be a\ncorrection, and then the process has to\ntake that neighbor out",
    "start": "969500",
    "end": "974510"
  },
  {
    "text": "of the set of children.  And suppose the process\nimproves its own distance.",
    "start": "974510",
    "end": "983710"
  },
  {
    "text": "Well, now, it's kind\nof starting over. It's going to send that\ndistance to all of its neighbors",
    "start": "983710",
    "end": "989149"
  },
  {
    "text": "again and collect\nnew information about whether they're children or not. The simple thing to do\nhere is just empty--",
    "start": "989150",
    "end": "997170"
  },
  {
    "text": "zero out your children\nset and start over. Now you send your new\nmessages to your neighbors",
    "start": "997170",
    "end": "1005310"
  },
  {
    "text": "and wait for them\nto respond again. There's tricky bookkeeping\nto do to handle corrections",
    "start": "1005310",
    "end": "1011740"
  },
  {
    "text": "as the structure of\nthis tree changes, so getting child pointers\nis a little more complicated",
    "start": "1011740",
    "end": "1017069"
  },
  {
    "text": "than before. Make sense? All right, so now back to\nyour question, termination.",
    "start": "1017070",
    "end": "1023980"
  },
  {
    "text": " How do all the processes know\nwhen the tree is complete?",
    "start": "1023980",
    "end": "1032126"
  },
  {
    "text": "In fact, we have\na worse problem. With this problem we hit\nfor breadth first search, but we have an\neven worse problem.",
    "start": "1032126",
    "end": "1037250"
  },
  {
    "text": "Now what is that?  Yeah? AUDIENCE: [INAUDIBLE].",
    "start": "1037250",
    "end": "1043549"
  },
  {
    "text": "PROFESSOR: Yeah, before we\nhad each individual node. Once it figured out\nwho its parent was,",
    "start": "1043550",
    "end": "1049700"
  },
  {
    "text": "it could just output that. And now, you can figure out your\nparent, but it's just a guess",
    "start": "1049700",
    "end": "1054909"
  },
  {
    "text": "and you don't know when\nyou can output this. How does a process even--\nan individual process even figure out its own\nparent and distance?",
    "start": "1054910",
    "end": "1062659"
  },
  {
    "text": "There's two aspects\nhere in termination. One is how do you know the\nwhole thing is finished, but the other one\nis even how do you",
    "start": "1062660",
    "end": "1068310"
  },
  {
    "text": "know when you're done with\nyour own parent and distance? Well, if you knew\nsomething about the graph,",
    "start": "1068310",
    "end": "1075230"
  },
  {
    "text": "like an upper bound on\nthe total number of nodes, then you could just wait\nuntil that number of rounds and be done.",
    "start": "1075230",
    "end": "1080600"
  },
  {
    "text": "But what if you don't have that\ninformation about the graph?",
    "start": "1080600",
    "end": "1085740"
  },
  {
    "text": "What might you do? Yeah? AUDIENCE: You want\nto BFS in parallel",
    "start": "1085740",
    "end": "1092773"
  },
  {
    "text": "and filter down the\ninformation when you've reached the size of the graph.",
    "start": "1092774",
    "end": "1099130"
  },
  {
    "text": "PROFESSOR: Maybe. I think-- what is the strategy\nwe use for termination for BFS?",
    "start": "1099130",
    "end": "1104830"
  },
  {
    "text": "Let's start with that one. It's a little easier. You did the subtree\nthing that we call",
    "start": "1104830",
    "end": "1110530"
  },
  {
    "text": "convergecast the information. When we had a leaf he\nknew he was a leaf, and he could send his done\ninformation up to his parent",
    "start": "1110530",
    "end": "1117610"
  },
  {
    "text": "and that got convergecast\nup to the top of the tree. Can we convergecast\nin this setting?",
    "start": "1117610",
    "end": "1126520"
  },
  {
    "text": "Turns out we can, but\nsince things are changing, you're going to be\nsending done messages",
    "start": "1126520",
    "end": "1132960"
  },
  {
    "text": "and then something might change. You might be participating in\nthe convergecast many times.",
    "start": "1132960",
    "end": "1138392"
  },
  {
    "text": " Since the tree\nstructure is changing,",
    "start": "1138392",
    "end": "1143730"
  },
  {
    "text": "the main idea is anybody\ncan send a done message to it's current-- the node\nhe believes is his parent,",
    "start": "1143730",
    "end": "1153000"
  },
  {
    "text": "provided he's received responses\nto all of its distance messages",
    "start": "1153000",
    "end": "1159720"
  },
  {
    "text": "so it thinks it knows\nwho all its children are. It has a current estimate\nof all the children",
    "start": "1159720",
    "end": "1166460"
  },
  {
    "text": "and-- so if it knows\nall its children and they have all sent\nhim done messages.",
    "start": "1166460",
    "end": "1174730"
  },
  {
    "text": "For all your current\nchildren, your current belief or who your children\nare, if they've all",
    "start": "1174730",
    "end": "1180150"
  },
  {
    "text": "sent you done messages, then\nyou can send a done message up the tree.",
    "start": "1180150",
    "end": "1186100"
  },
  {
    "text": "But this can get a\nlittle more complicated than it sounds, because you can\nchange who your children are.",
    "start": "1186100",
    "end": "1195250"
  },
  {
    "text": "What this means is\nthat the same process can be involved several\ntimes in the convergecast,",
    "start": "1195250",
    "end": "1200399"
  },
  {
    "text": "based on improving\nthe estimates. Here's an example of the kind\nof thing that can happen.",
    "start": "1200400",
    "end": "1210730"
  },
  {
    "start": "1205000",
    "end": "1561000"
  },
  {
    "text": "Let's say you start out,\nyou have these huge weights and then you have a long\npath with small weights.",
    "start": "1210730",
    "end": "1220809"
  },
  {
    "text": "i 0 starts out and sends\nits distance information",
    "start": "1220810",
    "end": "1226560"
  },
  {
    "text": "on its three nodes, to\nits three neighbors.",
    "start": "1226560",
    "end": "1231670"
  },
  {
    "text": "And this guy at the bottom now\nhas a distance estimate of 100,",
    "start": "1231670",
    "end": "1239500"
  },
  {
    "text": "and it's going to\ndecide it's a leaf. Why? Because when it sends\nmessages to its children,",
    "start": "1239500",
    "end": "1247420"
  },
  {
    "text": "to its neighbors, they're not\nable to improve their estimates based on the new information\nthat he's sending.",
    "start": "1247420",
    "end": "1255120"
  },
  {
    "text": "This guy decides that\nhe's a leaf right away, and he sends that\ninformation back to node i 0.",
    "start": "1255120",
    "end": "1264800"
  },
  {
    "text": "On the other hand, this guy\nhas the same estimate of 100. And he sends out his messages to\ntry to find out if he's a leaf,",
    "start": "1264800",
    "end": "1274360"
  },
  {
    "text": "but he finds out when he\nsends a message this way that he's actually able\nto improve that neighbor's",
    "start": "1274360",
    "end": "1279750"
  },
  {
    "text": "estimate, because that\nwas infinity till then. He doesn't think he's a leaf.",
    "start": "1279750",
    "end": "1285730"
  },
  {
    "text": "We have this one guy who thinks\nhe's a leaf and responds, so this i 0 is sitting there. He has to wait to hear\nfrom his other children.",
    "start": "1285730",
    "end": "1293790"
  },
  {
    "text": "OK so far? All right, in the\nmeantime, the messages are going to\neventually creep around",
    "start": "1293790",
    "end": "1299770"
  },
  {
    "text": "and this node is going to\nget a smaller estimate based on the length of that\nlong many hop path.",
    "start": "1299770",
    "end": "1308809"
  },
  {
    "text": "Then he's going to decide\nhe is not a child of i 0.",
    "start": "1308810",
    "end": "1314620"
  },
  {
    "text": "He's going to tell\ni 0 I'm really not your child, which means that\ni 0 stops waiting for him.",
    "start": "1314620",
    "end": "1321750"
  },
  {
    "text": "But also, this guy decides\nhe's not a child as well. He becomes a child of\nthe node right above him.",
    "start": "1321750",
    "end": "1329530"
  },
  {
    "text": "So i 0 now will realize\nhe only has one child,",
    "start": "1329530",
    "end": "1334750"
  },
  {
    "text": "but this guy believes he's a\nleaf again after trying again",
    "start": "1334750",
    "end": "1340920"
  },
  {
    "text": "to find children. And now the done information\npropagates all the way up the tree, which is now\njust this one long path.",
    "start": "1340920",
    "end": "1348870"
  },
  {
    "text": "They start trying\nto convergecast, but then, oops, they were wrong. They have to make a\ncorrection, and they",
    "start": "1348870",
    "end": "1356490"
  },
  {
    "text": "are forming a new tree. Eventually, the tree\nis going to stabilize, and eventually the\ndone information",
    "start": "1356490",
    "end": "1361730"
  },
  {
    "text": "will get all the\nway up to the top, but there could be lots of\nfalse starts in the mean time.",
    "start": "1361730",
    "end": "1367494"
  },
  {
    "text": "It's sort of\nconfusing, but that's the kind of thing that happens. Yeah?",
    "start": "1367494",
    "end": "1372514"
  },
  {
    "text": "AUDIENCE: There may be a\nprocess in which [INAUDIBLE] and then it just switches its\nmind at the very end of it.",
    "start": "1372514",
    "end": "1380629"
  },
  {
    "text": "How do you make sure that,\nthat propagation [INAUDIBLE]? ",
    "start": "1380629",
    "end": "1386617"
  },
  {
    "text": "PROFESSOR: Yes, so\nthe root node isn't going to terminate until\nit hears from everybody. You kind of have to close\nout the whole process.",
    "start": "1386617",
    "end": "1394100"
  },
  {
    "text": "It's always pending,\nwaiting for somebody, if it hasn't heard from someone. If things switch, they'll join\nin another part of the tree.",
    "start": "1394100",
    "end": "1400610"
  },
  {
    "text": "I think the best\nthing to do here is sort of construct some\nlittle examples by hand. I mean we're not going\nto get into it how",
    "start": "1400610",
    "end": "1407000"
  },
  {
    "text": "you do formal proofs\nof things like this. We don't even have\nright now a simulator",
    "start": "1407000",
    "end": "1412120"
  },
  {
    "text": "you can use to play\nwith these algorithms. Although if\nanybody's interested, some students in\nmy class last term,",
    "start": "1412120",
    "end": "1418533"
  },
  {
    "text": "actually, wrote a simulator\nthat might be available. ",
    "start": "1418534",
    "end": "1424230"
  },
  {
    "text": "OK, all right, so\nthat's what you",
    "start": "1424230",
    "end": "1430070"
  },
  {
    "text": "get for a synchronous-- some\nexample synchronous distributed algorithms. Now let's look at\nsomething more complicated",
    "start": "1430070",
    "end": "1437560"
  },
  {
    "text": "when you get into\nasynchronous algorithms. OK.",
    "start": "1437560",
    "end": "1443620"
  },
  {
    "text": "So far complications\nthat you've seen over the rest of\nthis course, you",
    "start": "1443620",
    "end": "1449529"
  },
  {
    "text": "have now processes that\nare acting concurrently. And we had a little\nbit of non-determinism,",
    "start": "1449530",
    "end": "1454560"
  },
  {
    "text": "nothing important,\nbut now things are about to get much worse. We don't have rounds anymore.",
    "start": "1454560",
    "end": "1462110"
  },
  {
    "text": "Now we're going to have\nprocesses taking steps, messages getting delivered at\nabsolutely arbitrary times,",
    "start": "1462110",
    "end": "1468260"
  },
  {
    "text": "arbitrary orders. The processes can get\ncompletely out of sync,",
    "start": "1468260",
    "end": "1474740"
  },
  {
    "text": "and so you have lots and\nlots more non-determinism in the algorithm. The non-determinism\nhas to do with who's",
    "start": "1474740",
    "end": "1480440"
  },
  {
    "text": "doing what in what order.  Understanding that\ntype of algorithm",
    "start": "1480440",
    "end": "1487230"
  },
  {
    "text": "is really different from\nunderstanding the algorithms that you've seen all term and\neven synchronous distributed",
    "start": "1487230",
    "end": "1493779"
  },
  {
    "text": "algorithms, because\nthere isn't just one way the algorithm is\ngoing to execute.",
    "start": "1493780",
    "end": "1500450"
  },
  {
    "text": "The execution can proceed\nin many different ways, just depending on the\norder of the steps.",
    "start": "1500450",
    "end": "1507870"
  },
  {
    "text": "You can't ever\nhope to understand exactly how this kind of\nalgorithm is executing.",
    "start": "1507870",
    "end": "1514344"
  },
  {
    "text": "What can you do? Well, you can play with\nit, but in the end, you have to understand is\nsome abstract properties.",
    "start": "1514344",
    "end": "1520169"
  },
  {
    "text": "Some properties of\nthe executions, rather than exactly what happens at\nevery step, and that's a jump.",
    "start": "1520170",
    "end": "1526230"
  },
  {
    "text": "It's a new way of thinking. We can look at\nasynchronous stuff, if you want, from my book.",
    "start": "1526230",
    "end": "1533260"
  },
  {
    "text": "Now we still have processes\nat the nodes of a graph. And now we have\ncommunication channels",
    "start": "1533260",
    "end": "1540250"
  },
  {
    "text": "associated with the edges. Now, the processes are going\nto be some kind of automata,",
    "start": "1540250",
    "end": "1545799"
  },
  {
    "text": "but the channels will also\nbe some kind of automata. We'll have all these\ncomponents, and we'll",
    "start": "1545800",
    "end": "1551100"
  },
  {
    "text": "be modeling all of them. Processes still\nhave their ports.",
    "start": "1551100",
    "end": "1557690"
  },
  {
    "text": "They need not, in\ngeneral, have identifiers. What's a channel?",
    "start": "1557690",
    "end": "1564970"
  },
  {
    "start": "1561000",
    "end": "1585000"
  },
  {
    "text": "A channel is-- it's a kind of\nan automaton, infinite state automaton, that has\ninputs and some outputs.",
    "start": "1564970",
    "end": "1572300"
  },
  {
    "text": "Here, this is just a picture\nof a channel from node u",
    "start": "1572300",
    "end": "1579620"
  },
  {
    "text": "to node v. Channel\nuv is just this cloud thing that delivers messages.",
    "start": "1579620",
    "end": "1587320"
  },
  {
    "start": "1585000",
    "end": "1628000"
  },
  {
    "text": "It has inputs. The inputs are-- messages\nget sent on the channel. You can have one process at\none end sending a message m",
    "start": "1587320",
    "end": "1596679"
  },
  {
    "text": "and the outputs at the other\nend are the deliveries, let's say receive message\nm, at the other end, node v.",
    "start": "1596680",
    "end": "1608450"
  },
  {
    "text": "To model this, the\nbest thing is actually to-- instead of\njust describing what it does, to give an\nexplicit model of its state",
    "start": "1608450",
    "end": "1615510"
  },
  {
    "text": "and what happens when the\ninputs and outputs occur. If you want these messages\nto be delivered-- let's",
    "start": "1615510",
    "end": "1621850"
  },
  {
    "text": "say in FIFO order, fine. You can make the state of\nthe channel be an actual q.",
    "start": "1621850",
    "end": "1627250"
  },
  {
    "text": "mq would just be a\nFIFO queue of messages. Starts out empty, and\nwhen messages get sent,",
    "start": "1627250",
    "end": "1633070"
  },
  {
    "start": "1628000",
    "end": "1712000"
  },
  {
    "text": "they get added to the end,\nand get delivered they get removed from the beginning.",
    "start": "1633070",
    "end": "1638260"
  },
  {
    "text": "All that we need\nto describe-- this is a sort of a pseudo code. All we need to describe--\nto write in order",
    "start": "1638260",
    "end": "1644530"
  },
  {
    "text": "to describe what\nthis channel does, is what happens\nwhen a send occurs,",
    "start": "1644530",
    "end": "1650110"
  },
  {
    "text": "and when can this channel\ndeliver a message, and what happens when it does that.",
    "start": "1650110",
    "end": "1656340"
  },
  {
    "text": "A send, which can just come\nin at any time, and the effect is just to add this message\nto the end of the queue.",
    "start": "1656340",
    "end": "1664630"
  },
  {
    "text": "The recieve-- stop moving.",
    "start": "1664630",
    "end": "1670710"
  },
  {
    "text": "The receive-- that\ncannot be construction.",
    "start": "1670710",
    "end": "1677419"
  },
  {
    "text": "We'd hear noise. It's gremlins. We have-- a receive\ncan occur only",
    "start": "1677420",
    "end": "1687730"
  },
  {
    "text": "when this message is at\nthe head of the queue, and when it occurs, it gets\nremoved from the queue.",
    "start": "1687730",
    "end": "1694420"
  },
  {
    "text": "Does this make sense\nas a description of what a channel does? Messages come in,\nget added to it,",
    "start": "1694420",
    "end": "1700090"
  },
  {
    "text": "and then messages\ncan get delivered in certain situations,\nand they get removed.",
    "start": "1700090",
    "end": "1706610"
  },
  {
    "text": "That's a description\nof the channel. to be using an\nasynchronous system. A process-- the\nrest of the system",
    "start": "1706610",
    "end": "1713760"
  },
  {
    "start": "1712000",
    "end": "1801000"
  },
  {
    "text": "consists of processes associated\nwith the graph vertices. Let's say pu is a process\nthat's associated with vertex u.",
    "start": "1713760",
    "end": "1722890"
  },
  {
    "text": "But I'm writing that just sort\nof as a shorthand, because u is the vertex in the graph, and\nthe process doesn't actually",
    "start": "1722890",
    "end": "1729130"
  },
  {
    "text": "know the name of the vertex. It just has its own\nunique ID or something, but I'm going to be a little\nsloppy about that now.",
    "start": "1729130",
    "end": "1738019"
  },
  {
    "text": "The process that at\nvertex u can perform send outputs to put\nmessages on the channel,",
    "start": "1738020",
    "end": "1745480"
  },
  {
    "text": "and it will receive\ninputs for messages to come in on the channel.",
    "start": "1745480",
    "end": "1750940"
  },
  {
    "text": "But the processes might also\nhave some external interface",
    "start": "1750940",
    "end": "1756320"
  },
  {
    "text": "where somebody is submitting\nsome inputs to the process, and the process has to produce\nsome output at the end.",
    "start": "1756320",
    "end": "1762716"
  },
  {
    "text": "There can be other\ninputs and outputs. ",
    "start": "1762717",
    "end": "1768900"
  },
  {
    "text": "And we'll model it\nwith state variables. Process is supposed\nto keep taking steps.",
    "start": "1768900",
    "end": "1774530"
  },
  {
    "text": "The channel is supposed to\nkeep delivering messages. It's a property called liveness.",
    "start": "1774530",
    "end": "1780380"
  },
  {
    "text": "You want to make sure that\nyour components in your system all keep doing things. They don't just do some\nsteps and then stop.",
    "start": "1780380",
    "end": "1788450"
  },
  {
    "text": "Here's a simple example. A process that's remembering the\nmaximum number it's ever seen.",
    "start": "1788450",
    "end": "1794650"
  },
  {
    "text": "There's a max process automaton. It receives some\nmessages m, some value,",
    "start": "1794650",
    "end": "1801160"
  },
  {
    "start": "1801000",
    "end": "2146000"
  },
  {
    "text": "and it will send it out. It keeps track of the max--\nthat's max state variable.",
    "start": "1801160",
    "end": "1807179"
  },
  {
    "text": "it starts out with its\nown initial values, so x for u. x of u\nis its initial value.",
    "start": "1807180",
    "end": "1814610"
  },
  {
    "text": "And then it has--\nfor every neighbor, it has a little queue--\nhere, it's just a Boolean--",
    "start": "1814610",
    "end": "1822850"
  },
  {
    "text": "asking whether it's supposed\nto send to that neighbor. ",
    "start": "1822850",
    "end": "1829799"
  },
  {
    "text": "This is the pseudocode\nfor that max process. What does it do when\nit receives a message?",
    "start": "1829800",
    "end": "1834900"
  },
  {
    "text": "Well, it sees if that value is\nbigger than what it had before, and if so, it resets the max.",
    "start": "1834900",
    "end": "1841480"
  },
  {
    "text": "And it also makes a note that\nit's supposed to send this out to all its neighbors. Whenever it gets\nnew information,",
    "start": "1841480",
    "end": "1847870"
  },
  {
    "text": "it will want to propagate\nit to its neighbors. You see how this is written? You just say, reset the\nmax and then get ready",
    "start": "1847870",
    "end": "1856049"
  },
  {
    "text": "to send to all your\nneighbors, and the last part is just sort of trivial code.",
    "start": "1856050",
    "end": "1861380"
  },
  {
    "text": "It says, if you are ready\nto send, then you can send, and then you're done and you\ncan set the send flags to false.",
    "start": "1861380",
    "end": "1870519"
  },
  {
    "text": "Yeah? AUDIENCE: What study? PROFESSOR: For every neighbor.",
    "start": "1870519",
    "end": "1876160"
  },
  {
    "text": "Oh, I wrote neighbor v\nbefore, and then I-- yeah. I wrote neighbor-- oh,\nI know why I wrote w.",
    "start": "1876160",
    "end": "1882760"
  },
  {
    "text": "Here, I'm talking about\nif you receive a message from a particular\nneighbor v, then",
    "start": "1882760",
    "end": "1888010"
  },
  {
    "text": "you have to send it\nto all your neighbors. Before, I used v to\ndenote a generic neighbor,",
    "start": "1888010",
    "end": "1893590"
  },
  {
    "text": "but now I can't do\nthat anymore, because v is the sender of the message. Just technical-- OK?",
    "start": "1893590",
    "end": "1900309"
  },
  {
    "text": " We have these process automata.",
    "start": "1900310",
    "end": "1905370"
  },
  {
    "text": "We have this channel automata. Now, we want to\nbuild the system. We paste them together. ",
    "start": "1905370",
    "end": "1912690"
  },
  {
    "text": "How we paste them\nis just we have outputs from processes that\ncan match up with inputs",
    "start": "1912690",
    "end": "1917730"
  },
  {
    "text": "to channels and vice versa. If a process has a\nsend output, let's",
    "start": "1917730",
    "end": "1922899"
  },
  {
    "text": "say send from u to v, that will\nmatch up with the channel that has send uv as an input.",
    "start": "1922900",
    "end": "1931310"
  },
  {
    "text": "And the receive from\nthe channel matches up with the process that has\nthat receive as an input.",
    "start": "1931310",
    "end": "1937570"
  },
  {
    "text": "All I'm doing is matching\nup these components. I'm hooking together\nthese components",
    "start": "1937570",
    "end": "1944480"
  },
  {
    "text": "by matching up\ntheir action names. Does that make sense? I'm saying how I build a system\nout of all these components,",
    "start": "1944480",
    "end": "1953110"
  },
  {
    "text": "and I just have a syntactic way\nof saying what actions match up",
    "start": "1953110",
    "end": "1958309"
  },
  {
    "text": "in different components. Questions? This is all new. ",
    "start": "1958310",
    "end": "1965919"
  },
  {
    "text": "When this system\ntakes a step, well, if somebody's\nperforming an action,",
    "start": "1965920",
    "end": "1973030"
  },
  {
    "text": "and someone else has\nthat same action-- let's say a process\nis doing a send. The channel has a send. They both take their\ntransitions at the same time.",
    "start": "1973030",
    "end": "1980850"
  },
  {
    "text": "The process sends\na message, it gets put into the channel at\nthe end of its queue.",
    "start": "1980850",
    "end": "1986899"
  },
  {
    "text": "Make sense? OK. How does this thing execute?",
    "start": "1986900",
    "end": "1993050"
  },
  {
    "text": "Well, there's no\nsynchronous rounds, so the system just\noperates by the processes",
    "start": "1993050",
    "end": "1999170"
  },
  {
    "text": "and the channels just perform\ntheir steps in any order. One at a time, but it\ncan be in any order,",
    "start": "1999170",
    "end": "2005470"
  },
  {
    "text": "so it's a sequence model. You just have a sequence\nof individual steps. There's no concurrency here.",
    "start": "2005470",
    "end": "2011429"
  },
  {
    "text": "In the synchronous model, we\nhad everybody taking their steps in one big block. And here, it's just they\ntake steps one at a time,",
    "start": "2011430",
    "end": "2018860"
  },
  {
    "text": "but it could be in any order. ",
    "start": "2018860",
    "end": "2024390"
  },
  {
    "text": "And we have to make sure that\neverybody keeps taking steps. That every channel continues\nto deliver messages,",
    "start": "2024390",
    "end": "2030490"
  },
  {
    "text": "and every process\nalways performs some step that's enabled. ",
    "start": "2030490",
    "end": "2038419"
  },
  {
    "text": "For the max processes,\nwell, we can just have a bunch of processes,\neach one now starting",
    "start": "2038420",
    "end": "2044929"
  },
  {
    "text": "with its initial value. And what happens when we\nplug them together with all",
    "start": "2044930",
    "end": "2049940"
  },
  {
    "text": "their channels between them? Corresponding to whatever\ngraph they are in.",
    "start": "2049940",
    "end": "2055480"
  },
  {
    "text": "They just have\nchannels on the edges. What's the behavior of this?",
    "start": "2055480",
    "end": "2060638"
  },
  {
    "text": "If all the processes are like\nthe ones I just showed you,",
    "start": "2060639",
    "end": "2065750"
  },
  {
    "text": "they wait till they\nhear some new max and then they send it out. ",
    "start": "2065750",
    "end": "2072270"
  },
  {
    "text": "Yeah? AUDIENCE: All\nprocesses eventually have a globally maximum value.",
    "start": "2072270",
    "end": "2077440"
  },
  {
    "text": "PROFESSOR: Yeah, they'll all\neventually get the global max. They'll keep propagating\nuntil everybody receives it.",
    "start": "2077440",
    "end": "2083260"
  },
  {
    "text": "Here's a animation if everybody\nstarts with the values that are written in these circles. ",
    "start": "2083260",
    "end": "2090500"
  },
  {
    "text": "Now, remember,\nbefore they were all sending it once, now no more. Let's say the first\nthing that happens",
    "start": "2090500",
    "end": "2095658"
  },
  {
    "text": "is the process that started\nwith five sends its message out on one of its channels,\nso the five goes out.",
    "start": "2095659",
    "end": "2102942"
  },
  {
    "text": "The next thing that might\nhappen is the other process with the seven might\nsend the seven out on one of its channels.",
    "start": "2102942",
    "end": "2110110"
  },
  {
    "text": "And these are three more steps. Somebody sends a 10. Somebody sends a seven. Somebody received a message and\nupdated its value as a result,",
    "start": "2110110",
    "end": "2121150"
  },
  {
    "text": "and we continue. I'm depicting several\nsteps at once, because it's boring to\nreally do them one at a time,",
    "start": "2121150",
    "end": "2126240"
  },
  {
    "text": "but the model really says that\nthey take steps in some order. Everybody is propagating\nthe largest thing it's seen,",
    "start": "2126240",
    "end": "2132980"
  },
  {
    "text": "and eventually, you wind\nup with everybody having",
    "start": "2132980",
    "end": "2138060"
  },
  {
    "text": "the maximum value, the 10. ",
    "start": "2138060",
    "end": "2143590"
  },
  {
    "text": "All right, that's how an\nasynchronous system operates. We can analyze the message\ncomplexity of this.",
    "start": "2143590",
    "end": "2151280"
  },
  {
    "start": "2146000",
    "end": "2164000"
  },
  {
    "text": "The total number\nof messages sent during the entire execution,\nat worst, on every edge.",
    "start": "2151280",
    "end": "2157470"
  },
  {
    "text": "You can send the successively\nimproved estimate, so that's, again, what are\nn times the number of edges.",
    "start": "2157470",
    "end": "2165510"
  },
  {
    "start": "2164000",
    "end": "2752000"
  },
  {
    "text": "Time complexity is an issue. When we had\nsynchronous algorithms,",
    "start": "2165510",
    "end": "2171839"
  },
  {
    "text": "we just counted the number\nof rounds and that was easy. But what do we measure now?",
    "start": "2171840",
    "end": "2177090"
  },
  {
    "text": "How do we count the time when\nyou have all these processes and channels taking\nsteps whenever they want?",
    "start": "2177090",
    "end": "2184140"
  },
  {
    "text": "Yeah, so this really\nisn't obvious. There's a solution that's\ncommonly used, which is-- OK,",
    "start": "2184140",
    "end": "2191060"
  },
  {
    "text": "we're going to use real time. And we're going to\nmake some assumptions about certain basic\nsteps taking, at most,",
    "start": "2191060",
    "end": "2200234"
  },
  {
    "text": "a certain amount of time.  Let's say that local\ncomputational-- time",
    "start": "2200234",
    "end": "2207140"
  },
  {
    "text": "for a process to perform\nits next step, is little l. You just give a\nlocal time bound.",
    "start": "2207140",
    "end": "2214200"
  },
  {
    "text": "And then you have d for a\nchannel to deliver one message. The first message that's\ncurrently in the channel.",
    "start": "2214200",
    "end": "2221720"
  },
  {
    "text": "If you have\nassumptions like that, you could use those to infer\na real time upper bound",
    "start": "2221720",
    "end": "2227870"
  },
  {
    "text": "for solving the whole problem. I mean if you know it takes no\nlonger than d to deliver one message, then you\ncan bound how long",
    "start": "2227870",
    "end": "2235000"
  },
  {
    "text": "it takes to deliver-- to empty\nout a queue, a channel, and how long it takes for messages to\npropagate through the network.",
    "start": "2235000",
    "end": "2241520"
  },
  {
    "start": "2241520",
    "end": "2247080"
  },
  {
    "text": "It's tricky, but this\nis about the only thing you can do in a setting\nwhere you don't actually",
    "start": "2247080",
    "end": "2252450"
  },
  {
    "text": "have rounds to measure. ",
    "start": "2252450",
    "end": "2257500"
  },
  {
    "text": "Then for the max system,\nhow long does it take? Well, let's just ignore\nthe local processing time.",
    "start": "2257500",
    "end": "2262799"
  },
  {
    "text": "Usually that's assumed\nto be very small, so let's say it's 0. We can get a very simple,\npessimistic really,",
    "start": "2262800",
    "end": "2270760"
  },
  {
    "text": "upper bound that says the\nreal time for finishing the whole thing is of the order\nof the diameter of the network",
    "start": "2270760",
    "end": "2277770"
  },
  {
    "text": "times the number of\nnodes times little d is the amount of time\nfor a message queue",
    "start": "2277770",
    "end": "2284160"
  },
  {
    "text": "to deliver its first message. ",
    "start": "2284160",
    "end": "2290180"
  },
  {
    "text": "As a naive way of\nanalyzing this, you just consider how\nlong it takes for the max",
    "start": "2290180",
    "end": "2296250"
  },
  {
    "text": "to reach some particular vertex\nu along the shortest path. Well, it has to go through\nall the hops on the path,",
    "start": "2296250",
    "end": "2304510"
  },
  {
    "text": "so that would be the diameter. And how long does it have\nto wait in each channel",
    "start": "2304510",
    "end": "2310809"
  },
  {
    "text": "before it gets to\nmove another hop? Well, it might be at\nthe end of a queue.",
    "start": "2310810",
    "end": "2316010"
  },
  {
    "text": "How big could the queue be? Well, at worst end for\nthe improved estimates. Let's say it's n times the\ndelivery time on the channel,",
    "start": "2316010",
    "end": "2324640"
  },
  {
    "text": "just to traverse one channel. What I'm doing is modeling\npossible congestion on the queue to see how\nlong it takes for a message",
    "start": "2324640",
    "end": "2332820"
  },
  {
    "text": "to traverse one channel. Yeah? AUDIENCE: Are we just assuming\nthat processes process things,",
    "start": "2332820",
    "end": "2338076"
  },
  {
    "text": "and messages are delivered\nas soon as they can possibly have them? PROFESSOR: Good.",
    "start": "2338076",
    "end": "2343570"
  },
  {
    "text": "Yeah, we normally have--\nI'm sort of skipping over some things in the model-- but\nyou have a liveness assumption",
    "start": "2343570",
    "end": "2351810"
  },
  {
    "text": "that says that the process\nkeeps taking steps as long as it has anything\nto do, and so we would be putting time\nbounds on how long",
    "start": "2351810",
    "end": "2358780"
  },
  {
    "text": "it takes between those steps. That'll be the local\nprocessing time, here. I'm saying that's 0.",
    "start": "2358780",
    "end": "2364265"
  },
  {
    "text": "AUDIENCE: You do\nthat-- wouldn't you be able to get some\namount of information about what were\nthings happening?",
    "start": "2364265",
    "end": "2370490"
  },
  {
    "text": "PROFESSOR: Ah, OK. Here is-- this is a\nvery subtle point. What do you think is that if\nI'm making all these timing",
    "start": "2370490",
    "end": "2376806"
  },
  {
    "text": "assumptions, the\nprocesses should be able to figure that out. But actually, you can't\nfigure anything out just",
    "start": "2376806",
    "end": "2383780"
  },
  {
    "text": "based on these assumptions\nabout these upper bounds. Putting upper bounds on\nthe time between steps",
    "start": "2383780",
    "end": "2391380"
  },
  {
    "text": "does not in any way\nrestrict the orderings. You still have all the same\npossible orderings of steps.",
    "start": "2391380",
    "end": "2397970"
  },
  {
    "text": "Nobody can see\nanything different. These times are not\nvisible in any sense. They're not marked anywhere\nfor the processes to read.",
    "start": "2397970",
    "end": "2405226"
  },
  {
    "text": "They're just\nsomething that we're using to evaluate the cost, the\ntime cost, of the execution.",
    "start": "2405226",
    "end": "2412730"
  },
  {
    "text": "And you're not\nrestricting the execution by putting just upper\nbounds on the time.",
    "start": "2412730",
    "end": "2420090"
  },
  {
    "text": "If you are restricting\nthe execution, like you had upper bounds and\nlower bounds on the time, then the processes might\nknow a lot more.",
    "start": "2420090",
    "end": "2426780"
  },
  {
    "text": "They might, in fact, be acting\nmore like a synchronous system.",
    "start": "2426780",
    "end": "2433030"
  },
  {
    "text": "These are times that are just\nused for analyzing complexity. They're not anything known to\nthe processes in the system.",
    "start": "2433030",
    "end": "2440310"
  },
  {
    "text": "OK? All right. Now let's revisit the\nbreadth-first spanning tree problem.",
    "start": "2440310",
    "end": "2447750"
  },
  {
    "text": "We want to now compute a\nbreadth-first spanning tree in an asynchronous network.",
    "start": "2447750",
    "end": "2453710"
  },
  {
    "text": "Connected graph,\ndistinguish root vertex, processes have no\nknowledge of the graph. They have you UIDs.",
    "start": "2453710",
    "end": "2459420"
  },
  {
    "text": "All this is the same as before\nin the synchronous case. Everybody's supposed to\noutput its parent information",
    "start": "2459420",
    "end": "2466900"
  },
  {
    "text": "when it's done.  Here's an idea.",
    "start": "2466900",
    "end": "2474270"
  },
  {
    "text": "Suppose we just take that nice\nsimple synchronous algorithm that I reviewed at the beginning\nof the hour where everybody",
    "start": "2474270",
    "end": "2480870"
  },
  {
    "text": "just sends a search message\nas soon as they get it and they just adopt the\nfirst parent they see.",
    "start": "2480870",
    "end": "2486550"
  },
  {
    "text": "What happens if I run\nthat asynchronously? ",
    "start": "2486550",
    "end": "2491940"
  },
  {
    "text": "I just send it and I\nget a search message. Then I send it out to\nmy parents whenever and everybody's doing this.",
    "start": "2491940",
    "end": "2498956"
  },
  {
    "text": "Whenever they get their\nfirst search message, they decide the\nsender is its parent. Yeah?",
    "start": "2498956",
    "end": "2503980"
  },
  {
    "text": "AUDIENCE: Could you\npossibly have a front tier that doesn't keep expanding--\nnot obeying the defining",
    "start": "2503980",
    "end": "2511382"
  },
  {
    "text": "property of the BFS? PROFESSOR: Yeah\nit could be that, because we don't have\nany restriction on how",
    "start": "2511382",
    "end": "2516910"
  },
  {
    "text": "fast the messages might be\nsent and the order of steps, it could be that some\nmessages get sent",
    "start": "2516910",
    "end": "2523800"
  },
  {
    "text": "very quickly on some long path. Someone sitting at the far\nend of the network might",
    "start": "2523800",
    "end": "2528940"
  },
  {
    "text": "get a message first\non a long path and later on a short\npath, and the first one to gets it decides that's its\nparent, then it's stuck.",
    "start": "2528940",
    "end": "2537740"
  },
  {
    "text": "This is not an algorithm\nthat makes corrections. OK?",
    "start": "2537740",
    "end": "2544740"
  },
  {
    "text": "All right, well, before we had\na little bit of non-determinism when we had this algorithm\nin the synchronous case",
    "start": "2544740",
    "end": "2551170"
  },
  {
    "text": "because we could have two\nmessages arriving at once, and you have to pick\none to be your parent.",
    "start": "2551170",
    "end": "2556782"
  },
  {
    "text": "Now that doesn't\nhappen, because you only get one message at a time,\nbut you have a lot more",
    "start": "2556782",
    "end": "2562010"
  },
  {
    "text": "non-determinism now. Now you have all\nthis non-determinism from the order in which the\nmessages get sent and processes",
    "start": "2562010",
    "end": "2570060"
  },
  {
    "text": "take their steps. There's plenty of\nnon-determinism, and remember, the way we treat\nnon-determinism for distributed",
    "start": "2570060",
    "end": "2576670"
  },
  {
    "text": "algorithms is it's\nsupposed to work regardless of how those\nnon-deterministic choices get",
    "start": "2576670",
    "end": "2581990"
  },
  {
    "text": "made. How would we describe? I'll just write some\npseudo code here",
    "start": "2581990",
    "end": "2587160"
  },
  {
    "text": "for a process that's\njust mimicking the trivial algorithm. It can receive a search\nmessage, that's the inputs,",
    "start": "2587160",
    "end": "2594339"
  },
  {
    "text": "and it can send a search\nmessage as its output. It can also output parent\nwhen it's ready to do that.",
    "start": "2594340",
    "end": "2603500"
  },
  {
    "text": "What does it have\nto keep track of? Well, it keeps\ntrack of its parent,",
    "start": "2603500",
    "end": "2608800"
  },
  {
    "text": "keeps track of whether\nit's reported its parent, and it has some send\nbuffers with messages",
    "start": "2608800",
    "end": "2616140"
  },
  {
    "text": "it's ready to send\nto its neighbors, could be search\nmessages or nothing.",
    "start": "2616140",
    "end": "2622400"
  },
  {
    "text": "This bottom symbol is\njust a placeholder symbol. ",
    "start": "2622400",
    "end": "2630230"
  },
  {
    "text": "What happens when the process\nreceives a search message, just following the simple algorithm?",
    "start": "2630230",
    "end": "2636770"
  },
  {
    "text": "Well, if it doesn't\nhave a parent yet, then it sets its parent to\nbe the sender of that search",
    "start": "2636770",
    "end": "2643849"
  },
  {
    "text": "message, and it gets ready\nto send the search message to all of its neighbors.",
    "start": "2643850",
    "end": "2650319"
  },
  {
    "text": "That's really the\nheart of the algorithm that you saw for\nthe simple algorithm",
    "start": "2650320",
    "end": "2656010"
  },
  {
    "text": "for that is the synchronous\ncase so that's the same code. The rest of the code is it just\nsends the search messages out",
    "start": "2656010",
    "end": "2662410"
  },
  {
    "text": "when it's got them\nin the send buffers, and it can announce its\nparent once the parent is set,",
    "start": "2662410",
    "end": "2669290"
  },
  {
    "text": "and then it doesn't-- this\nflag just means it doesn't keep announcing it over\nand over again.",
    "start": "2669290",
    "end": "2676299"
  },
  {
    "text": "It makes sense\nthat this describes that simple algorithm. It's pretty concise,\njust what does",
    "start": "2676300",
    "end": "2682220"
  },
  {
    "text": "it do in all these\ndifferent steps. OK?",
    "start": "2682220",
    "end": "2688850"
  },
  {
    "text": "Now, if you run\nthis asynchronously, as you already\nnoted, it isn't going to necessarily work right.",
    "start": "2688850",
    "end": "2696010"
  },
  {
    "text": "You can have this guy\nsending search messages, but some are going to\narrive faster than others.",
    "start": "2696010",
    "end": "2703420"
  },
  {
    "text": "And you see you can have the\nsearch messages creeping around in an indirect\npath, which causes",
    "start": "2703420",
    "end": "2710530"
  },
  {
    "text": "a spanning tree like\nthis one to be created, which is definitely not a\nbreadth-first spanning tree.",
    "start": "2710530",
    "end": "2715600"
  },
  {
    "text": "The breadth-first tree is this\none-- a breadth-first tree.",
    "start": "2715600",
    "end": "2720830"
  },
  {
    "text": "You have these roundabout paths. This doesn't work. What do we do?",
    "start": "2720830",
    "end": "2727350"
  },
  {
    "text": "Yeah? AUDIENCE: You could have\na child [INAUDIBLE]. ",
    "start": "2727350",
    "end": "2740063"
  },
  {
    "text": "PROFESSOR: You're going to try\nto synchronize them, basically. ",
    "start": "2740063",
    "end": "2745642"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: That is related to\na homework question this week. Very good.",
    "start": "2745642",
    "end": "2751849"
  },
  {
    "text": "We're going to do\nsomething different. Other suggestions? Yeah? AUDIENCE: We could keep a\nvariable in each process",
    "start": "2751850",
    "end": "2760510"
  },
  {
    "start": "2752000",
    "end": "2774000"
  },
  {
    "text": "that-- you can do something\nlike Bellman-Ford. PROFESSOR: Yeah, so you can do\nwhat we did for Bellman-Ford,",
    "start": "2760510",
    "end": "2766470"
  },
  {
    "text": "but now the setting is\ncompletely different. We did it for Bellman-Ford\nwhen it was synchronous and we had weights.",
    "start": "2766470",
    "end": "2772160"
  },
  {
    "text": "Now, it's asynchronous\nand there are no weights. OK?",
    "start": "2772160",
    "end": "2777300"
  },
  {
    "start": "2774000",
    "end": "2937000"
  },
  {
    "text": "Oh, there's some remarks\non a couple of slides here. This is just\nbelaboring the point,",
    "start": "2777300",
    "end": "2782710"
  },
  {
    "text": "that the paths that you\nget by this algorithm can be longer than\nthe shortest paths, and-- yeah, you can analyze the\nmessage and time complexity.",
    "start": "2782710",
    "end": "2792085"
  },
  {
    "start": "2792085",
    "end": "2800740"
  },
  {
    "text": "The complexity here is order of\nthe diameter times the message delay on one link.",
    "start": "2800740",
    "end": "2808120"
  },
  {
    "text": "And why is it the diameter\neven though some paths",
    "start": "2808120",
    "end": "2813600"
  },
  {
    "text": "may be very long?  This is a real time\nupper bound that",
    "start": "2813600",
    "end": "2820670"
  },
  {
    "text": "depends on the actual\ndiameter of the graph, not on the total\nnumber of nodes.",
    "start": "2820670",
    "end": "2826764"
  },
  {
    "text": " Why would an upper bound on\nthe running time for the simple",
    "start": "2826764",
    "end": "2833540"
  },
  {
    "text": "algorithm depend\non the diameter? ",
    "start": "2833540",
    "end": "2841420"
  },
  {
    "text": "Yeah? AUDIENCE: Because you\nonly have a longer path if it's faster than-- PROFESSOR: Exactly. The way we're modeling\nit-- it's a little strange,",
    "start": "2841420",
    "end": "2847540"
  },
  {
    "text": "maybe-- but we're\nsaying that something can travel on a long path\nonly if it's going very fast.",
    "start": "2847540",
    "end": "2852910"
  },
  {
    "text": "But the actual shortest paths\nstill move along, at worst, at d time per hop.",
    "start": "2852910",
    "end": "2861750"
  },
  {
    "text": "At worst, the shortest\npath information would get there within time d. Something is going to\nget there within time d,",
    "start": "2861750",
    "end": "2868350"
  },
  {
    "text": "even though something else\nmight get there faster. OK? All right.",
    "start": "2868350",
    "end": "2875050"
  },
  {
    "text": "Yes, we can set up\na child pointers, and we can do termination\nusing convergecast.",
    "start": "2875050",
    "end": "2881540"
  },
  {
    "text": "It's just one tree. There's nothing changing here.",
    "start": "2881540",
    "end": "2886930"
  },
  {
    "text": "And applications,\nsame as before. But that didn't\nwork, so we're going",
    "start": "2886930",
    "end": "2892040"
  },
  {
    "text": "to-- back to the\npoint we were talking about a minute ago-- we're\ngoing to use a relaxation algorithm like Bellman-Ford.",
    "start": "2892040",
    "end": "2897450"
  },
  {
    "text": " In the synchronous\ncase, we corrected for paths that had many\nhops but low weight,",
    "start": "2897450",
    "end": "2906190"
  },
  {
    "text": "but now we're going to correct\nfor the asynchrony errors. All the errors that you get\nbecause of things traveling",
    "start": "2906190",
    "end": "2912590"
  },
  {
    "text": "fast on long paths, we're\ngoing to correct for those using the same strategy.",
    "start": "2912590",
    "end": "2919960"
  },
  {
    "text": "Everybody is going to keep\ntrack of the hop distance. No weights now just\nthe hop distance,",
    "start": "2919960",
    "end": "2925680"
  },
  {
    "text": "and they will change\nthe parent when they learn of a shorter path. And then they will propagate\nthe improved distance,",
    "start": "2925680",
    "end": "2931840"
  },
  {
    "text": "so it's exactly\nlike Bellman-Ford. And eventually,\nthis will stabilize to an actual breadth-first\nspanning tree.",
    "start": "2931840",
    "end": "2940030"
  },
  {
    "start": "2937000",
    "end": "3599000"
  },
  {
    "text": "Here's a description\nof this new algorithm. Everybody keeps track\nof their parent,",
    "start": "2940030",
    "end": "2945619"
  },
  {
    "text": "and now they keep track\nof their hop distance, and they have their channels.",
    "start": "2945620",
    "end": "2951240"
  },
  {
    "text": "Here's the key, when you get\nnew information-- you receive some new information,\nthis m is a number",
    "start": "2951240",
    "end": "2956790"
  },
  {
    "text": "of hops that your\nneighbor is telling you. Well, if m plus\n1, which would be",
    "start": "2956790",
    "end": "2962869"
  },
  {
    "text": "your new estimate\nfor a number of hops-- if that's better\nthan what you already have,",
    "start": "2962870",
    "end": "2967940"
  },
  {
    "text": "then you just\nreplace your estimate by this new number of hops.",
    "start": "2967940",
    "end": "2973340"
  },
  {
    "text": "And you set your--\nto a new parent. You set your parent\npointer to the sender,",
    "start": "2973340",
    "end": "2979910"
  },
  {
    "text": "and you propagate\nthis information. It's exactly the same\nas what we had before,",
    "start": "2979910",
    "end": "2985140"
  },
  {
    "text": "but now we're correcting\nfor the asynchrony. We get shorter hop paths later.",
    "start": "2985140",
    "end": "2992430"
  },
  {
    "text": "Makes sense?  And the rest of this is\njust you send the message.",
    "start": "2992430",
    "end": "2998400"
  },
  {
    "text": "And notice we don't have\nany terminating actions. Why? Because we have the\nsame problem that we had before with having processes\nknow when they're done.",
    "start": "2998400",
    "end": "3006750"
  },
  {
    "text": "If you keep get\ngetting corrections, how do you know when\nyou're finished? ",
    "start": "3006750",
    "end": "3012440"
  },
  {
    "text": "And how do you know\nthis is going to work? In the synchronous\ncase, we could get an exact characterization\nof what exactly",
    "start": "3012440",
    "end": "3020970"
  },
  {
    "text": "the situation is after\nany number of rounds. And we can't do that\nnow, because things",
    "start": "3020970",
    "end": "3026380"
  },
  {
    "text": "can happen in so many orders. We have to, instead,\nstate some higher level",
    "start": "3026380",
    "end": "3032849"
  },
  {
    "text": "abstract properties,\neither in variance or you'll see some other\nkinds of properties as well.",
    "start": "3032850",
    "end": "3039790"
  },
  {
    "text": " We could say, for\ninstance, as an invariant,",
    "start": "3039790",
    "end": "3045309"
  },
  {
    "text": "that all the distance\ninformation you get is correct. ",
    "start": "3045310",
    "end": "3050650"
  },
  {
    "text": "If you ever have your\ndistance set to something, it's the actual\ndistance on some path",
    "start": "3050650",
    "end": "3055910"
  },
  {
    "text": "and your parent is correctly set\nto be your predecessor on such",
    "start": "3055910",
    "end": "3061069"
  },
  {
    "text": "a path. This is just saying whatever\nyou get is correct information. This doesn't say that eventually\nyou're going to finish, though.",
    "start": "3061070",
    "end": "3070190"
  },
  {
    "text": "It just says what\nyou get is correct. If you want to show\nthat, eventually, you",
    "start": "3070190",
    "end": "3078240"
  },
  {
    "text": "get the right answer,\nyou have to do something with the timing. You have to say something\nlike by a certain time that",
    "start": "3078240",
    "end": "3087230"
  },
  {
    "text": "depends on the distance. If there is-- and at most\nour hop path to a node,",
    "start": "3087230",
    "end": "3095510"
  },
  {
    "text": "then it will learn about\nthat by a certain time, but that depends on the length\nof the path and the message",
    "start": "3095510",
    "end": "3104470"
  },
  {
    "text": "delivery time. And the number of nodes,\nbecause they can be congestion. You have to not only\nsay things are correct,",
    "start": "3104470",
    "end": "3111480"
  },
  {
    "text": "but you have to say, eventually,\nyou get the right result, and here it will say by\na certain time you get",
    "start": "3111480",
    "end": "3117329"
  },
  {
    "text": "the right result. Makes sense? This is how you would understand\nan algorithm like this one.",
    "start": "3117330",
    "end": "3124900"
  },
  {
    "text": "Message complexity. Since there's all\nthese corrections, you're back in number\nof edges times possibly",
    "start": "3124900",
    "end": "3131770"
  },
  {
    "text": "the number of nodes. And the time complexity, till\nall the distances and parent",
    "start": "3131770",
    "end": "3138520"
  },
  {
    "text": "values stabilize,\ncould be-- this is pessimistic\nagain-- the diameter",
    "start": "3138520",
    "end": "3143829"
  },
  {
    "text": "times the number of nodes\ntimes d, because there can be congestion in\neach of the links because",
    "start": "3143830",
    "end": "3150261"
  },
  {
    "text": "of the corrections. ",
    "start": "3150261",
    "end": "3155300"
  },
  {
    "text": "How do you know\nwhen this is done? How can a process know\nwhen it can finish?",
    "start": "3155300",
    "end": "3161205"
  },
  {
    "text": "Idea? ",
    "start": "3161205",
    "end": "3167680"
  },
  {
    "text": "Before we had said,\nwell, if you knew n, if you knew the\nnumber of nodes, you could weight that\nnumber of rounds.",
    "start": "3167680",
    "end": "3174850"
  },
  {
    "text": "That doesn't even help you here. Even if you know--\nhave a good upper bound",
    "start": "3174850",
    "end": "3180050"
  },
  {
    "text": "on the number of\nnodes in the network, there's no rounds to count.",
    "start": "3180050",
    "end": "3186390"
  },
  {
    "text": "You can't tell. Even knowing the number\nof nodes you can't tell, so how might you\ndetect termination?",
    "start": "3186390",
    "end": "3193595"
  },
  {
    "text": "Yep? AUDIENCE: It could bound on\nthe diameter of [INAUDIBLE].",
    "start": "3193595",
    "end": "3199050"
  },
  {
    "text": "PROFESSOR: Yeah, well,\nbut even if you know that, you can't count time.",
    "start": "3199050",
    "end": "3204324"
  },
  {
    "text": "See this is the thing about\nasynchronous algorithms, you don't have--\nalthough we're using time to measure how long\nit's termination takes,",
    "start": "3204324",
    "end": "3213040"
  },
  {
    "text": "we-- the processes in\nthere don't have that. They're just these asynchronous\nguys who just take their steps.",
    "start": "3213040",
    "end": "3219450"
  },
  {
    "text": "They're ignorant of\nanything to do with time.",
    "start": "3219450",
    "end": "3224480"
  },
  {
    "text": "Other ideas? Yeah. AUDIENCE: Couldn't you use the\nsame converge kind of thing-- PROFESSOR: Same thing. We're just going to use\nconvergecast again, same idea.",
    "start": "3224480",
    "end": "3231660"
  },
  {
    "text": "You just compute and your\nrepute your child pointers. You send a done to your current\nparent, after you've gotten",
    "start": "3231660",
    "end": "3238290"
  },
  {
    "text": "responses to all\nyour messages, so you think you know your children. And they've all told\nyou they're done",
    "start": "3238290",
    "end": "3243780"
  },
  {
    "text": "and-- but then you might\nhave to make corrections, so as in what we saw\nbefore, you can be involved",
    "start": "3243780",
    "end": "3249650"
  },
  {
    "text": "in this convergecast several\ntimes until it finally reaches all the way to the root. ",
    "start": "3249650",
    "end": "3258160"
  },
  {
    "text": "Once you have these, you can\nuse them the same way as before. You now have costs\nthat are better than this simple tree\nthat didn't have shortest",
    "start": "3258160",
    "end": "3266990"
  },
  {
    "text": "paths, because it now\ntakes you less time to use the tree for computing functions\nor disseminating information",
    "start": "3266990",
    "end": "3274050"
  },
  {
    "text": "because the tree is shallower. ",
    "start": "3274050",
    "end": "3279950"
  },
  {
    "text": "Finally, what\nhappens when we want to find shortest path trees\nin an asynchronous setting?",
    "start": "3279950",
    "end": "3290420"
  },
  {
    "text": "Now, we're going to add\nto the complications that we just saw with\nall the asynchrony. The complications of having\nweights on the edges.",
    "start": "3290420",
    "end": "3299790"
  },
  {
    "text": "All right, the problem is get\na shortest path spanning tree, now in an asynchronous\nnetwork, weighted graph,",
    "start": "3299790",
    "end": "3311029"
  },
  {
    "text": "processes don't know\nabout the graph again. They have UIDs, and everybody's\nsupposed to output its distance",
    "start": "3311030",
    "end": "3320799"
  },
  {
    "text": "and parent in the tree. ",
    "start": "3320800",
    "end": "3327320"
  },
  {
    "text": "We're going to use another\nrelaxation algorithm. ",
    "start": "3327320",
    "end": "3333400"
  },
  {
    "text": "Now think about\nwhat the relaxation is going to be doing for you. ",
    "start": "3333400",
    "end": "3340790"
  },
  {
    "text": "We have two kinds of\ncorrections to make. You could have long paths\nthat have small weight.",
    "start": "3340790",
    "end": "3348110"
  },
  {
    "text": "That showed up for Bellman-Ford\nin the synchronous setting, so we have to correct for those.",
    "start": "3348110",
    "end": "3353980"
  },
  {
    "text": "But you could also have--\nbecause of asynchrony, you could have information\ntravelling fast on many hops,",
    "start": "3353980",
    "end": "3361212"
  },
  {
    "text": "and you have to correct\nfor that as well. There's two kinds\nof things you're going to be correcting\nfor in one algorithm.",
    "start": "3361212",
    "end": "3366636"
  },
  {
    "text": " This is going to-- and it's\npretty surprising-- it's",
    "start": "3366636",
    "end": "3373140"
  },
  {
    "text": "going to lead to ridiculously\nhigh complexity, message and time complexity.",
    "start": "3373140",
    "end": "3378980"
  },
  {
    "text": "If you really have unbridled\nasynchrony and weights, this is going to give you\na very costly algorithm.",
    "start": "3378980",
    "end": "3385640"
  },
  {
    "text": "You're going to see\nsome exponential is going to creep in there. ",
    "start": "3385640",
    "end": "3393200"
  },
  {
    "text": "Here's the algorithm for the\nasynchronous Bellman-Ford algorithm.",
    "start": "3393200",
    "end": "3398300"
  },
  {
    "text": "Everyone keeps track\nof their parent. Their conjecture\ndistance, and they",
    "start": "3398300",
    "end": "3405040"
  },
  {
    "text": "have, now, messages that they're\ngoing to send to the neighbors. Let's say you have a\nqueue because there",
    "start": "3405040",
    "end": "3410860"
  },
  {
    "text": "could be successive estimates. We'll have a queue there.",
    "start": "3410860",
    "end": "3417500"
  },
  {
    "text": "The key step, the\nrelaxation step, is what happens when you receive\na new estimate of the best",
    "start": "3417500",
    "end": "3425440"
  },
  {
    "text": "distance. This is weighted distance,\nnow, from a neighbor. Well, you look at that\ndistance plus the weight",
    "start": "3425440",
    "end": "3431250"
  },
  {
    "text": "of the edge in\nbetween, and you see if that's better than\nyour current distance, just like synchronous\nBellman-Ford.",
    "start": "3431250",
    "end": "3438810"
  },
  {
    "text": "And if it is, then you\nimprove your distance, reset your parent, and send the\ndistance out to your neighbors.",
    "start": "3438810",
    "end": "3448630"
  },
  {
    "text": "It's exactly like\nthe synchronous case, but we're going to be\nrunning this asynchronously.",
    "start": "3448630",
    "end": "3456460"
  },
  {
    "text": "And since you're going to be\ncorrecting every time you see a new estimate, this\nis actually going",
    "start": "3456460",
    "end": "3462990"
  },
  {
    "text": "to handle both kinds\nof corrections, whether it comes because of a\nmany hop path with a smaller",
    "start": "3462990",
    "end": "3470700"
  },
  {
    "text": "weight, or whether it just\ncomes because of the asynchrony. Whenever you get\na better estimate, you're going to\nmake the correction.",
    "start": "3470700",
    "end": "3478084"
  },
  {
    "text": "Is it clear this\nis all you really need to do in the algorithm,\njust what's in this code? ",
    "start": "3478084",
    "end": "3487409"
  },
  {
    "text": "That's the received, and then\nthe rest of the algorithm is just you send it out\nwhen you're ready to send.",
    "start": "3487409",
    "end": "3492962"
  },
  {
    "text": " And then we have the same\nissue about termination,",
    "start": "3492962",
    "end": "3498609"
  },
  {
    "text": "there's no terminating actions. We'll come back to that.",
    "start": "3498610",
    "end": "3504350"
  },
  {
    "text": " It's really hard to come up\nwith invariants and timing",
    "start": "3504350",
    "end": "3510200"
  },
  {
    "text": "properties, now,\nfor this setting. You can certainly have\nan invariant like the one that we just had for\nasynchronous breadth-first",
    "start": "3510200",
    "end": "3518180"
  },
  {
    "text": "search. You can say that at\nany point, whatever distance you have is an\nactual distance that's",
    "start": "3518180",
    "end": "3524520"
  },
  {
    "text": "achievable along some path,\nand the parent is correct.",
    "start": "3524520",
    "end": "3530010"
  },
  {
    "text": "But we'd also like\nto have something that says, eventually, you'll\nget the right distance. ",
    "start": "3530010",
    "end": "3536360"
  },
  {
    "text": "You want to state a\ntiming property that says, fine, if you have an at most\nr hop path, by a certain time,",
    "start": "3536360",
    "end": "3542950"
  },
  {
    "text": "you'd like to know that\nyour distance is at least as good as what you could\nget on that path.",
    "start": "3542950",
    "end": "3550039"
  },
  {
    "text": "The problem is\nwhat are you going to have here for\nthe amount of time? How long would it\npossibly take in order",
    "start": "3550040",
    "end": "3556960"
  },
  {
    "text": "to get the best\nestimate that you could for a path of at most r hops?",
    "start": "3556960",
    "end": "3564244"
  },
  {
    "text": " A guess?",
    "start": "3564244",
    "end": "3569346"
  },
  {
    "text": " I was able to calculate\nsomething reasonable",
    "start": "3569346",
    "end": "3574440"
  },
  {
    "text": "for the breadth-first\nsearch case, but now this is going\nto be much, much worse.",
    "start": "3574440",
    "end": "3581190"
  },
  {
    "text": "It's not obvious at all. It's actually going to depend on\nhow many messages could pile up",
    "start": "3581190",
    "end": "3586869"
  },
  {
    "text": "in a channel, and that\ncan be an awful lot, an exponential number--\nexponential in the number",
    "start": "3586870",
    "end": "3592835"
  },
  {
    "text": "of nodes in the network. ",
    "start": "3592835",
    "end": "3604339"
  },
  {
    "text": "I'm going to produce an\nexecution for you that",
    "start": "3604340",
    "end": "3610380"
  },
  {
    "text": "can generate a huge number of\nmessages, which then will take a long time to deliver\nand delay the termination",
    "start": "3610380",
    "end": "3617720"
  },
  {
    "text": "of the algorithm. First, let's look\nat an upper bound. What can we say\nfor an upper bound?",
    "start": "3617720",
    "end": "3623460"
  },
  {
    "text": "Well, there's many\ndifferent paths from v 0 to any other\nparticular node.",
    "start": "3623460",
    "end": "3629960"
  },
  {
    "text": "We might have to traverse all\nthe simple paths in the graph,",
    "start": "3629960",
    "end": "3636000"
  },
  {
    "text": "perhaps. And how many are there? Well, as an upper bound, you\ncould say order n factorial",
    "start": "3636000",
    "end": "3645390"
  },
  {
    "text": "for the number of\ndifferent paths that you can traverse\nto get from v 0 to some particular other node.",
    "start": "3645390",
    "end": "3653500"
  },
  {
    "text": "That's exponential in n. Certainly, it's\norder n to the n. ",
    "start": "3653500",
    "end": "3661510"
  },
  {
    "text": "This says that the\nnumber of messages that you might\nsend on any channel could correspond to doing\nthat many corrections.",
    "start": "3661510",
    "end": "3669599"
  },
  {
    "text": "This can blow up your\nmessage complexity into n to the n times the\nnumber of edges,",
    "start": "3669600",
    "end": "3675770"
  },
  {
    "text": "and your time complexity n\nto the n times, n times d,",
    "start": "3675770",
    "end": "3682520"
  },
  {
    "text": "because on every\nedge you might have to wait for that many messages,\ncorrected messages, sitting",
    "start": "3682520",
    "end": "3689590"
  },
  {
    "text": "in front of you.  That seems pretty awful.",
    "start": "3689590",
    "end": "3696770"
  },
  {
    "text": "Does it actually happen? Can you actually construct an\nexecution of this algorithm",
    "start": "3696770",
    "end": "3701900"
  },
  {
    "text": "where you get exponential\nbounds like that? And we'll see\nthat, yes, you can.",
    "start": "3701900",
    "end": "3708410"
  },
  {
    "text": "Any questions so far?  Here's a bad example.",
    "start": "3708410",
    "end": "3716680"
  },
  {
    "text": "This is a network, consists\nof a sequence of, let's say, k plus 1-- k plus 2, I\nguess, nodes, in a line.",
    "start": "3716680",
    "end": "3727760"
  },
  {
    "text": "And I'm going to throw in\nsome little detour nodes",
    "start": "3727760",
    "end": "3732820"
  },
  {
    "text": "in between each consecutive\npair of nodes in this graph, and now let me play\nwith the weights.",
    "start": "3732820",
    "end": "3740950"
  },
  {
    "text": "Let's say on this path,\nthis direct path from v 0 to vk plus 1, all\nthe weights are 0.",
    "start": "3740950",
    "end": "3748480"
  },
  {
    "text": "That's going to be the shortest\npath, the best weight path,",
    "start": "3748480",
    "end": "3753570"
  },
  {
    "text": "from v 0 to vk plus 1. But now I'm going to\nhave some detours.",
    "start": "3753570",
    "end": "3759930"
  },
  {
    "text": "And on the detours I have\ntwo edges, one of weight 0",
    "start": "3759930",
    "end": "3765839"
  },
  {
    "text": "and the other one of\nweight that's a power of 2. I'm going to start\nwith high powers of 2, 2 to the k minus 1, and go\ndown to 2 to the k minus 2,",
    "start": "3765840",
    "end": "3773810"
  },
  {
    "text": "down to 2 of the 1, to the 0. See what this graph is doing?",
    "start": "3773810",
    "end": "3778900"
  },
  {
    "text": "It has a very fast\npath in the bottom, which you'd like to hear\nabout as soon as you can.",
    "start": "3778900",
    "end": "3784390"
  },
  {
    "text": "But, actually, there is\ndetours which could give you much worse paths. ",
    "start": "3784390",
    "end": "3794140"
  },
  {
    "text": "Let's see how this might execute\nto make a lot of messages pile up in a channel.",
    "start": "3794140",
    "end": "3801819"
  },
  {
    "text": "My claim is that\nthere's an execution of that network in which\nthe last node, bk, sends 2",
    "start": "3801820",
    "end": "3812152"
  },
  {
    "text": "to the k messages to\nthe next node vk plus 1.",
    "start": "3812153",
    "end": "3817390"
  },
  {
    "text": "He's really going to send an\nexponential number of messages corresponding to\nhis corrections.",
    "start": "3817390",
    "end": "3822490"
  },
  {
    "text": "He's going to keep making\ncorrections for better and better estimates.",
    "start": "3822490",
    "end": "3828099"
  },
  {
    "text": "And if all this happens\nrelatively fast, that just means\nyou have a channel with an exponential\nnumber of messages in it,",
    "start": "3828100",
    "end": "3835589"
  },
  {
    "text": "emptying that will\ntake exponential time. ",
    "start": "3835590",
    "end": "3843380"
  },
  {
    "text": "You have an idea how\nthis might happen? How could this node, bk, get\nso many successively improved",
    "start": "3843380",
    "end": "3854260"
  },
  {
    "text": "estimates, one after the other? ",
    "start": "3854260",
    "end": "3861110"
  },
  {
    "text": "Well, what's the biggest\nestimate it might get? ",
    "start": "3861110",
    "end": "3868943"
  },
  {
    "text": "Yeah? AUDIENCE: 2 to the k minus 1. PROFESSOR: It could\nget 2 to the k minus 1? Well, let's see.",
    "start": "3868943",
    "end": "3874395"
  },
  {
    "text": "AUDIENCE: Or [INAUDIBLE]. PROFESSOR: It could do that. AUDIENCE: Then it's 2 to the k. PROFESSOR: And it could do that.",
    "start": "3874395",
    "end": "3879873"
  },
  {
    "text": "AUDIENCE: Plus 2 to the k. PROFESSOR: Plus 2\nto the k minus 2, plus all the way down\nto plus 2 to the 0.",
    "start": "3879873",
    "end": "3885100"
  },
  {
    "text": "You could be following this\nreally inefficient path, just all the detours, before the\nmessages actually arrive",
    "start": "3885100",
    "end": "3893550"
  },
  {
    "text": "on the edges on the spine. AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah, so you follow\nall-- oh, you said 2 to the k,",
    "start": "3893550",
    "end": "3902410"
  },
  {
    "text": "minus 1, parenthesis. Yeah, that's exactly right. AUDIENCE: It's all\nright. [INAUDIBLE].",
    "start": "3902410",
    "end": "3907859"
  },
  {
    "text": "PROFESSOR: We can't\nparenthesize our speech. All right, so the possible\nestimates that bk can take on",
    "start": "3907860",
    "end": "3916810"
  },
  {
    "text": "are actually 2 to the k-- as you\nsaid, 2 to the k minus 1, which",
    "start": "3916810",
    "end": "3924110"
  },
  {
    "text": "you would get by taking\nall of the detours and adding up the powers of 2. ",
    "start": "3924110",
    "end": "3930580"
  },
  {
    "text": "But it could also\nhave an estimate, which is 2 to the k minus\n2 or 2 to the k minus 3.",
    "start": "3930580",
    "end": "3937340"
  },
  {
    "text": "All of those are possible. Moreover, you can have\na single execution",
    "start": "3937340",
    "end": "3942920"
  },
  {
    "text": "of this asynchronous algorithm\nin which node bk actually acquires all those estimates\nin sequence, one at a time.",
    "start": "3942920",
    "end": "3953270"
  },
  {
    "text": "How might that work? First, the messages\ntravel all the detours. Fine, bk gets 2\nto the k minus 1.",
    "start": "3953270",
    "end": "3961560"
  },
  {
    "text": "Then, there's a message\ntraveling-- well this guy sends a message\non the lower link.",
    "start": "3961560",
    "end": "3969470"
  },
  {
    "text": "This guy has only heard about\nthe messages on the detours up to that point.",
    "start": "3969470",
    "end": "3974990"
  },
  {
    "text": "But he sends that\non the lower link, which means you kind of\nbypass this weight of one.",
    "start": "3974990",
    "end": "3981340"
  },
  {
    "text": "bk gets a little bit\nof an improvement, which gives it 2 to the k\nminus 2 as its estimate.",
    "start": "3981340",
    "end": "3988280"
  },
  {
    "text": " What happens next?",
    "start": "3988280",
    "end": "3994050"
  },
  {
    "text": "Well, we step one back, and\nthe node from node k minus 2",
    "start": "3994050",
    "end": "3999800"
  },
  {
    "text": "can send a message on\nthe lower link, which has weight 0, to bk minus one.",
    "start": "3999800",
    "end": "4008740"
  },
  {
    "text": "But that corrected estimate\nmight then traverse the detour",
    "start": "4008740",
    "end": "4014250"
  },
  {
    "text": "to get to node bk. If you get the correction\nfor node bk minus 1,",
    "start": "4014250",
    "end": "4021270"
  },
  {
    "text": "but then you follow the detour,\nyou haven't improved that much. You've just improved by one.",
    "start": "4021270",
    "end": "4027300"
  },
  {
    "text": "This way, you get 2 to the k\nminus 3 as the new estimate.",
    "start": "4027300",
    "end": "4032370"
  },
  {
    "text": "But then, again,\non the lower link, the message eventually\narrives, which",
    "start": "4032370",
    "end": "4037870"
  },
  {
    "text": "gives you 2 to the k minus 4. You see the pattern sort of?",
    "start": "4037870",
    "end": "4043170"
  },
  {
    "text": "You're going to be\ncounting down in binary by successively having\nnodes further to the left",
    "start": "4043170",
    "end": "4050300"
  },
  {
    "text": "deliver their\nmessages, but then they do the worst possible thing of\ngetting the information to bk.",
    "start": "4050300",
    "end": "4057300"
  },
  {
    "text": "He has to deal with all those\nother estimates in between. ",
    "start": "4057300",
    "end": "4062740"
  },
  {
    "text": "If this happens\nquickly, what you get is a pile up of an exponential\nnumber of search messages",
    "start": "4062740",
    "end": "4068950"
  },
  {
    "text": "in one channel. And then that\ninformation has to go on to the next node or the\nrest of the network, whatever.",
    "start": "4068950",
    "end": "4074440"
  },
  {
    "text": "It's going to take an\nexponential amount of time, in the worst case, to\nempty that all out. ",
    "start": "4074440",
    "end": "4081340"
  },
  {
    "text": "This is pretty bad, but\nthe algorithm is correct.",
    "start": "4081340",
    "end": "4088520"
  },
  {
    "text": "And so how do you learn\nwhen everything is finished, and how does a\nprocess know when it",
    "start": "4088520",
    "end": "4094810"
  },
  {
    "text": "can output its own correct\ndistance information? How can we figure out when\nthis is all stabilized?",
    "start": "4094810",
    "end": "4101428"
  },
  {
    "start": "4101428",
    "end": "4106689"
  },
  {
    "text": "Same thing as before, we\ncan just do a convergecast. I mean this is more\ncorrections, but it's still",
    "start": "4106689",
    "end": "4114180"
  },
  {
    "text": "the same kind of corrections. We can convergecast\nand, eventually, this",
    "start": "4114180",
    "end": "4120219"
  },
  {
    "text": "is going to convergecast\nall the way up to the root. And then the root\nknows it's done",
    "start": "4120220",
    "end": "4125790"
  },
  {
    "text": "and can tell everyone else. ",
    "start": "4125790",
    "end": "4131318"
  },
  {
    "text": "A moral here-- you've\nhad a quick dose of a lot of asynchrony--\nyeah, if you don't do anything",
    "start": "4131319",
    "end": "4138599"
  },
  {
    "text": "about it and you just use\nunrestrained asynchrony, in the worst case,\nyou're going to have",
    "start": "4138600",
    "end": "4143889"
  },
  {
    "text": "some pretty bad performance. The question is, what\ndo you do about that? There are various techniques.",
    "start": "4143890",
    "end": "4149348"
  },
  {
    "text": "And if you want to take\nmy course next fall, we'll cover some of those.",
    "start": "4149348",
    "end": "4154680"
  },
  {
    "text": "I'll say a little\nbit about the course. It's a basic-- it's a TQE\nlevel, basic grad course.",
    "start": "4154680",
    "end": "4163960"
  },
  {
    "text": "We do synchronous, asynchronous,\nand some other stuff where the nodes really know\nabout something about time.",
    "start": "4163960",
    "end": "4172651"
  },
  {
    "text": "Here's some of the\nsynchronous problems-- some like the ones\nyou've already seen.",
    "start": "4172651",
    "end": "4178710"
  },
  {
    "text": "Building many other kinds\nof structures in graphs,",
    "start": "4178710",
    "end": "4184460"
  },
  {
    "text": "and then we get into\nfault tolerance. There's a lot of\nquestions about what happens when some of\nthe components can fail,",
    "start": "4184460",
    "end": "4193170"
  },
  {
    "text": "or they're even\nmalicious, and you have to deal with the effects\nof malicious processes",
    "start": "4193170",
    "end": "4199210"
  },
  {
    "text": "in your system. And then for\nasynchronous algorithms,",
    "start": "4199210",
    "end": "4205400"
  },
  {
    "text": "we'll do not only\nindividual problems like the ones you've just seen,\nbut some general techniques",
    "start": "4205400",
    "end": "4210410"
  },
  {
    "text": "like synchronizers,\nnotion of logical time-- that's Leslie Lamport's first\nand biggest contribution.",
    "start": "4210410",
    "end": "4217700"
  },
  {
    "text": "He one the Turing Award last\nyear-- other techniques, like taking global snapshots\nof the entire system",
    "start": "4217700",
    "end": "4226800"
  },
  {
    "text": "while it's running. In addition to talking\nabout networks, as we've been doing\nthis week, we'll",
    "start": "4226800",
    "end": "4232820"
  },
  {
    "text": "talk about shared memory,\nmulti-processors accessing shared memory.",
    "start": "4232820",
    "end": "4238630"
  },
  {
    "text": "And solving problems that are\nof use in multiprocessors, like mutual exclusion. And again, fault tolerance.",
    "start": "4238630",
    "end": "4245170"
  },
  {
    "text": "Fault tolerance then gets us\ninto a study of data objects with consistency\nconditions, which",
    "start": "4245170",
    "end": "4251770"
  },
  {
    "text": "is the sort of stuff that's\nuseful in cloud computing. If you want to have coherent\naccess to data that's",
    "start": "4251770",
    "end": "4259010"
  },
  {
    "text": "stored at many locations, you\nneed to have some interesting distributed algorithms.",
    "start": "4259010",
    "end": "4265440"
  },
  {
    "text": "Self stabilization-- if\nyou plunge your system into some arbitrary\nstate, and you'd like it to converge to a good\nstate, that's the topic of self",
    "start": "4265440",
    "end": "4273659"
  },
  {
    "text": "stabilization. And depending on\ntime, there's things",
    "start": "4273660",
    "end": "4278800"
  },
  {
    "text": "that use time in the\nalgorithms, and the newer work that we're working on in\nresearch is very dynamic.",
    "start": "4278800",
    "end": "4286489"
  },
  {
    "text": "You have distributed\nalgorithms where the network itself is changing\nduring the execution. That comes up in\nwireless networks,",
    "start": "4286489",
    "end": "4293526"
  },
  {
    "text": "and lately we're\nactually looking at insect colony algorithms. What distributed\nalgorithms do ants",
    "start": "4293526",
    "end": "4300110"
  },
  {
    "text": "use to decide on how to\nselect a new nest when the researchers smash their\nold nest in the laboratory?",
    "start": "4300110",
    "end": "4307580"
  },
  {
    "text": "That kind of question.  That's it for the\ndistributed algorithms week.",
    "start": "4307580",
    "end": "4314610"
  },
  {
    "text": "And we'll see you--\nnext week is security? OK, yeah.",
    "start": "4314610",
    "end": "4322218"
  },
  {
    "start": "4322218",
    "end": "4322718"
  }
]