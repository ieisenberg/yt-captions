[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6910"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6910",
    "end": "13460"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13460",
    "end": "19290"
  },
  {
    "text": "ocw.mit.edu.  ERIC GRIMSON: Good morning.",
    "start": "19290",
    "end": "24710"
  },
  {
    "text": "Professor Guttag has to\nbe out of town today. My name's Professor Grimson. I'm going to be subbing\nfor him.",
    "start": "24710",
    "end": "30390"
  },
  {
    "text": "And just to show you how much\nwe value education here at MIT, and especially in EECS,\nyou get the incoming",
    "start": "30390",
    "end": "36920"
  },
  {
    "text": "chancellor as a substitute\nteacher. So how cool is that? All right, maybe\nnot very cool.",
    "start": "36920",
    "end": "42489"
  },
  {
    "text": "But I'm going to talk\nto you anyway for the next 50 minutes. At the end of last lecture,\nI think Professor Guttag",
    "start": "42490",
    "end": "49960"
  },
  {
    "text": "introduced dictionaries to you,\na really powerful type. It's got a great capability,\nwhich is it's a tool, a data",
    "start": "49960",
    "end": "58430"
  },
  {
    "text": "type that lets you association\nalmost any kind of structure with a key. So it could be that you're\nassociating keys with numbers,",
    "start": "58430",
    "end": "65909"
  },
  {
    "text": "you're associating keys\nwith strings. But you could be associating\nkeys with other things, including dictionaries.",
    "start": "65910",
    "end": "72046"
  },
  {
    "text": "And I don't know if he showed\nthis to you or not, but those keys themselves can also\nbe really powerful. It could be just a string.",
    "start": "72046",
    "end": "78820"
  },
  {
    "text": "But the key could also be a\ntuple, or a list, an x- and y-coordinate, or a set of\nnames, or other things.",
    "start": "78820",
    "end": "85750"
  },
  {
    "text": "So it's a really great data\nstructure to use. Now, one of the things you could\nask, though, is, gee,",
    "start": "85750",
    "end": "93630"
  },
  {
    "start": "90000",
    "end": "245000"
  },
  {
    "text": "what if Python or whatever\nlanguage you're using didn't come with dictionaries?",
    "start": "93630",
    "end": "98729"
  },
  {
    "text": "Could we still get\nthe same power? And the answer is sure. So I want to show you\na little example. So on your handout, if we look\nat this little procedure up",
    "start": "98730",
    "end": "106390"
  },
  {
    "text": "here at the top, key search, I\ncould build it out of lists. I could just use a list as\nmy way of storing it.",
    "start": "106390",
    "end": "113149"
  },
  {
    "text": "So let's look at what\nthis procedure. Says it says, OK, if I've got a\nlist, and I've got a key, K,",
    "start": "113150",
    "end": "121340"
  },
  {
    "text": "I could write a little loop that\njust walks down the list, saying, is the first part of\neach element equal to the key",
    "start": "121340",
    "end": "128919"
  },
  {
    "text": "I'm looking for? And if it is, I'll return the\nsecond part of that element.",
    "start": "128919",
    "end": "134090"
  },
  {
    "text": "And if I get to the end of the\nlist, I haven't found it, I return none. So notice I'm making\na choice here.",
    "start": "134090",
    "end": "140540"
  },
  {
    "text": "I'm assuming that I'm storing in\nthe dictionary things that are lists too long, key and the\nassociated value, another",
    "start": "140540",
    "end": "147879"
  },
  {
    "text": "key and the associated value,\nanother key and the associated value. But this would work fine. So if I didn't have\ndictionaries,",
    "start": "147880",
    "end": "153150"
  },
  {
    "text": "I could build it. If I wanted to make things that\nhad a more complicated lookup, I'd have to make\nsure that that",
    "start": "153150",
    "end": "158520"
  },
  {
    "text": "equality test did it. But you could see how\nI might do it. So the question then can be,\nso why do we bother with",
    "start": "158520",
    "end": "165420"
  },
  {
    "text": "dictionaries, if we could\njust use it with lists? Here's my question to you. So how long in this\nimplementation is it going to",
    "start": "165420",
    "end": "172730"
  },
  {
    "text": "take me to figure out if\nsomething's in my dictionary? ",
    "start": "172730",
    "end": "178400"
  },
  {
    "text": "Oh my god, he's asking\nquestions at 10 o'clock in the morning. This is really terrifying. Somebody help me out. How long?",
    "start": "178400",
    "end": "183890"
  },
  {
    "text": "Yeah? AUDIENCE: Probably on\naverage on the order the size of the list.",
    "start": "183890",
    "end": "189270"
  },
  {
    "text": "ERIC GRIMSON: Yeah. On average, it's going to take\nme half the size of the list. But that's the same thing as\nbeing the size of the list.",
    "start": "189270",
    "end": "194870"
  },
  {
    "text": "So if that list is really\nlong, I'm toast. If it's not in the dictionary,\nin fact, I'm going to have to go all the way through the list\nbefore I get to the end",
    "start": "194870",
    "end": "202170"
  },
  {
    "text": "to decide it's not there. So this is not as efficient an\nimplementation as we'd like.",
    "start": "202170",
    "end": "207870"
  },
  {
    "text": "Now, the flip that is you say,\nOK, how long does it take for the dictionaries, the built-in\nassociated retrieval that you",
    "start": "207870",
    "end": "213360"
  },
  {
    "text": "have inside of Python? And the interesting answer there\nis that that retrieval is constant.",
    "start": "213360",
    "end": "218720"
  },
  {
    "text": "It takes the same amount of time\nindependent of the size of the dictionary. And that's wonderful.",
    "start": "218720",
    "end": "225580"
  },
  {
    "text": "We're not going to talk\nabout how today. You're going to see that\nlater on in the term. But it is something that drives\nhome, if you like, the",
    "start": "225580",
    "end": "231360"
  },
  {
    "text": "point that different\ndata structures have different costs. And while some are easier to\nimplement in, they may not be",
    "start": "231360",
    "end": "236800"
  },
  {
    "text": "as efficient, some may be a\nlittle more difficult to implement in, but they are\nmuch more efficient. And that's one of the great\nthings about dictionaries.",
    "start": "236800",
    "end": "242450"
  },
  {
    "text": " The second thing I think you\nsaw at the end of last lecture, and I want to just\nhighlight in a slightly",
    "start": "242450",
    "end": "248990"
  },
  {
    "start": "245000",
    "end": "643000"
  },
  {
    "text": "different way, is I believe\nProfessor Guttag showed you a little example of a very simple\ntranslation function.",
    "start": "248990",
    "end": "255110"
  },
  {
    "text": "We had a little dictionary. I'm going to give you a version\nright here, and un-comment it. In fact, there's a little\ndictionary that simply",
    "start": "255110",
    "end": "265150"
  },
  {
    "text": "associates English words\nwith French words. And yes, it's pretty simple,\nbut it's a little way of pairing those things up.",
    "start": "265150",
    "end": "271340"
  },
  {
    "text": "And the idea would be if I have\na sentence just a string that consists of a bunch of\nwords, I'd like to translate",
    "start": "271340",
    "end": "277599"
  },
  {
    "text": "that English sentence, if\nI can, into French. And let's look at the code\nthat's going to do it. I'm going to, again,\nun-comment it here.",
    "start": "277600",
    "end": "283470"
  },
  {
    "text": "It's on your handout. I want to walk you through it. ",
    "start": "283470",
    "end": "289660"
  },
  {
    "text": "So first thing I'm going to do\nis actually write a little procedure the says, given a\nword in English, I want to find the corresponding\nword in French.",
    "start": "289660",
    "end": "297039"
  },
  {
    "text": "And that's pretty easy. It says, if you give me a,\nword, and you give me a dictionary, I'm just going to\nlook it up in the dictionary.",
    "start": "297040",
    "end": "306080"
  },
  {
    "text": "That's just that associative\nretrieval. It does all the work to go into\nthe dictionary, say, if that's a key for something in\nthe dictionary, it's going to",
    "start": "306080",
    "end": "312400"
  },
  {
    "text": "give it back to me. And in particular, I can get it\nback by simply retrieving",
    "start": "312400",
    "end": "318020"
  },
  {
    "text": "it out of the dictionary. And notice I'm doing this\na little more carefuly. I'm not just directly going, and\nsaying, give me the thing",
    "start": "318020",
    "end": "325370"
  },
  {
    "text": "corresponding to the word in\nthe dictionary, because it might not be there. So that test basically says,\nif the word is in the",
    "start": "325370",
    "end": "332530"
  },
  {
    "text": "dictionary, it'll return true. And in that case, I get out\nthe corresponding element.",
    "start": "332530",
    "end": "338270"
  },
  {
    "text": "If it's not in the dictionary,\nI'm just going to be stuck with the English words, so we'll\njust return the word.",
    "start": "338270",
    "end": "343990"
  },
  {
    "text": "Now, let's look at the\nmore fun part of it. I now want to translate\na sentence.",
    "start": "343990",
    "end": "350260"
  },
  {
    "text": "And the sentence is\na string of words. I need to find where\nthe words are.",
    "start": "350260",
    "end": "355970"
  },
  {
    "text": "I need to look them up. I need to gather together\na translation. So notice what the heart of this\nthing does, right down",
    "start": "355970",
    "end": "362759"
  },
  {
    "text": "here in this part of the loop\nthat I'm going to highlight right there. Oops, I mis-did that. Let me try it again,\nright there.",
    "start": "362760",
    "end": "371410"
  },
  {
    "text": "What's that doing? It's walking down\nthe sentence. A sentence is some\nbig, long string.",
    "start": "371410",
    "end": "376800"
  },
  {
    "text": "And it says for each character\nC in the sentence, I need to find where the word is.",
    "start": "376800",
    "end": "382710"
  },
  {
    "text": "So I'm going to keep walking\nalong until I find a place where there's a space.",
    "start": "382710",
    "end": "388330"
  },
  {
    "text": "So that first test there is\nsaying, if C is not a space,",
    "start": "388330",
    "end": "393490"
  },
  {
    "text": "just add it onto the\nend of the word. Oh, yeah, I need to have\ninititalized word, which I did right up here.",
    "start": "393490",
    "end": "398820"
  },
  {
    "text": "I said, let's set word to\njust be an empty string. So I'm just walking along the\nsentence until I find a space.",
    "start": "398820",
    "end": "405680"
  },
  {
    "text": "Until I do that, I'm just\ngathering together all of those characters. So I'm building up the word. When I get to the place where\nin fact C is a space, then",
    "start": "405680",
    "end": "414539"
  },
  {
    "text": "here's what I'm going to do. I'm going to translate the word\nusing that procedure I just wrote.",
    "start": "414540",
    "end": "419980"
  },
  {
    "text": "It looks it up in\nthe dictionary. It either gives me back the\nFrench word, if it's there, and if not, it just gives me\nback the English word.",
    "start": "419980",
    "end": "425890"
  },
  {
    "text": "And, oh yeah, I'm doing\na whole long sentence. So I need to add it together. So I'm simply going to add it\nto the end of what I've",
    "start": "425890",
    "end": "432300"
  },
  {
    "text": "translated so far. And I'm doing a slightly\nfunky thing in there. I'm inserting a space in\nbetween, just to keep the",
    "start": "432300",
    "end": "439530"
  },
  {
    "text": "words separate. And of course, I need to have\ninitialized translation up here, which I did, to\nbe an empty string.",
    "start": "439530",
    "end": "446780"
  },
  {
    "text": "So what's this do? Walks along character\nby character. When it gets to a space, it\nsays, I've got a word. Find the translation, add it\nto the end of this other",
    "start": "446780",
    "end": "453830"
  },
  {
    "text": "internal variable,\nand keep going. And I'll do that until I get to\nthe end of that sentence.",
    "start": "453830",
    "end": "459199"
  },
  {
    "text": "And then I'll just return\nthe translation. Nice little iterative loop.",
    "start": "459200",
    "end": "464570"
  },
  {
    "text": "And it's simply using\ntwo pieces to make all of this happen. ",
    "start": "464570",
    "end": "470260"
  },
  {
    "text": "I lied too you-- sorry,\nI didn't lie. I misspoke to you. Which is, what's that funky\nthing at the end?",
    "start": "470260",
    "end": "477640"
  },
  {
    "text": "What's it returning? It's returning this strange\nthing this says, \"Translation,\" starting with the\nfirst element, a copy of",
    "start": "477640",
    "end": "484990"
  },
  {
    "text": "all of that, plus a translation\nof the word.",
    "start": "484990",
    "end": "490190"
  },
  {
    "text": "So what assumption am I making\nabout the inputs that causes me to do this strange\nthing at the end?",
    "start": "490190",
    "end": "496806"
  },
  {
    "text": "I'm actually making two\nassumptions about my input. But I'm making a particular\nassumption. Why do I not just return\ntranslation when I'm done?",
    "start": "496806",
    "end": "504430"
  },
  {
    "text": "Why am I doing this\nlast piece? Anybody help me out?",
    "start": "504430",
    "end": "509581"
  },
  {
    "text": "Boy, I notice everybody sits way\nback at the back, where I can't make any eye contact. ",
    "start": "509581",
    "end": "518110"
  },
  {
    "text": "How do I characterize\nwords in my string? They have to end with a space.",
    "start": "518110",
    "end": "524430"
  },
  {
    "text": "Ooh, is there a space at\nthe end of my example? So I guess I haven't shown\nyou an example.",
    "start": "524430",
    "end": "530100"
  },
  {
    "text": "But I'm assuming if I give you\na sentence, you don't usually have spaces at the\nend of sentences. So I'm making an assumption, is\nthat the words, except for",
    "start": "530100",
    "end": "537260"
  },
  {
    "text": "the last one, are characterized\nby spaces. So this last little piece here\nis to get the very last word,",
    "start": "537260",
    "end": "543640"
  },
  {
    "text": "and translate it. Because it won't be a space.",
    "start": "543640",
    "end": "548810"
  },
  {
    "text": "Let's try a couple\nof examples. Let's just un-comment these,\nand see if this does it.",
    "start": "548810",
    "end": "555760"
  },
  {
    "text": "Yes, commenting them again\nis not a good idea. We'll go the other direction. ",
    "start": "555760",
    "end": "568130"
  },
  {
    "text": "Looks like it did right. John-- we should have translated\nJohn into Jean. I don't know what the hell Eric\nis in French, but John",
    "start": "568130",
    "end": "574650"
  },
  {
    "text": "mange du pan, Eric\nboit du vin. John has that right. He's eats bread.",
    "start": "574650",
    "end": "579760"
  },
  {
    "text": "I like to drink wine. And, of course, tout\nle monde aime 6.00.",
    "start": "579760",
    "end": "585380"
  },
  {
    "text": "Or in this case, everyone\nlikes 6.00. You just got HASS credit, by the\nway, for listening to me",
    "start": "585380",
    "end": "590680"
  },
  {
    "text": "do French really badly. OK, as I said, I made an\nassumption, which that the",
    "start": "590680",
    "end": "597390"
  },
  {
    "text": "words end in spaces. What's the other assumption\nI made here? I know you're just looking\nat the code. But I made another assumption\ninside of my code.",
    "start": "597390",
    "end": "604439"
  },
  {
    "text": "And it's always good\nto figure out what those assumptions are. Yeah?",
    "start": "604440",
    "end": "610925"
  },
  {
    "text": "AUDIENCE: That the first word is\na noun, so we don't have to translate it? ERIC GRIMSON: I didn't\nassume that.",
    "start": "610926",
    "end": "616782"
  },
  {
    "text": "I could if I was doing a more\nclever translation. But I'm actually making\nno assumptions linguistically here.",
    "start": "616782",
    "end": "621900"
  },
  {
    "text": "I'll give you a hint. How many spaces do I\nhave between words?",
    "start": "621900",
    "end": "627390"
  },
  {
    "text": "Just one. I'm sort of building that\ninto this assumption. It's a reasonable assumption\nto make. But it points out, if I wanted\nto improve the code, I should",
    "start": "627390",
    "end": "634480"
  },
  {
    "text": "think about these other cases. And of course, to build a real\ntranslation system, I'd need something much more\nsophisticated. ",
    "start": "634480",
    "end": "642140"
  },
  {
    "text": "So this shows you little\nexample of using the dictionaries. But I want to use this to lead\ninto the main part of today's",
    "start": "642140",
    "end": "647770"
  },
  {
    "start": "643000",
    "end": "938000"
  },
  {
    "text": "lecture, which is, why did I\nwrite this separate little procedure up here called\ntranslate word?",
    "start": "647770",
    "end": "654820"
  },
  {
    "text": "I could have buried that\ninside the code. And the answer is twofold.",
    "start": "654820",
    "end": "662420"
  },
  {
    "text": "First one is it saves a\nsmall amount of code. If I'm going to use it in\nmultiple places, I don't want",
    "start": "662420",
    "end": "668790"
  },
  {
    "text": "to rewrite the code. And that actually is valuable,\nnot just to save you typing. It means I only have\nto debug it once.",
    "start": "668790",
    "end": "676355"
  },
  {
    "text": "It's one piece of code. But the real reason I wanted to\nintroduce it is it gives me",
    "start": "676355",
    "end": "681750"
  },
  {
    "text": "what you might think of as\nmodular abstraction. Those are fancy words that\nbasically say I am isolating",
    "start": "681750",
    "end": "687820"
  },
  {
    "text": "that function in one place. If I decide to change how I'm\ngoing to translate words, I",
    "start": "687820",
    "end": "695740"
  },
  {
    "text": "don't have to search through all\nof my code to find all the places where I was using that. I just need to change the\ndefinition of that procedure.",
    "start": "695740",
    "end": "705140"
  },
  {
    "text": "And I agree, in a simple example\nlike this, it looks pretty simple. But if you've got a million\nlines of code, you're using it",
    "start": "705140",
    "end": "710580"
  },
  {
    "text": "10,000 different places, you\ndon't want to have to find all the places to change. So this is an example of modular\nabstraction, isolating",
    "start": "710580",
    "end": "719460"
  },
  {
    "text": "where that thing is. And that is an example,\nin fact, of a general problem-solving principle we're\ngoing to use, called",
    "start": "719460",
    "end": "729770"
  },
  {
    "text": "divide and conquer. ",
    "start": "729770",
    "end": "736800"
  },
  {
    "text": "Divide and conquer is basically\nthe idea of taking a hard problem, and breaking it\nup into some simpler pieces,",
    "start": "736800",
    "end": "744380"
  },
  {
    "text": "or into smaller problems, where\nthose smaller problems have two properties. ",
    "start": "744380",
    "end": "753670"
  },
  {
    "text": "Small problems are easier to\nsolve than the original one.",
    "start": "753670",
    "end": "763829"
  },
  {
    "text": "More importantly, the solutions\nto the small",
    "start": "763830",
    "end": "769070"
  },
  {
    "text": "problems can easily\nbe combined--",
    "start": "769070",
    "end": "774680"
  },
  {
    "text": "I want to stress easily-- ",
    "start": "774680",
    "end": "780150"
  },
  {
    "text": "to solve the big problem. ",
    "start": "780150",
    "end": "794070"
  },
  {
    "text": "And we're going to look\nat a bunch of examples today to show that. This is a really old idea.",
    "start": "794070",
    "end": "800130"
  },
  {
    "text": "Julius Caesar used it. He did it in Latin. My Latin is terrible, but it's\nsomething like divide et",
    "start": "800130",
    "end": "805370"
  },
  {
    "text": "impera, which literally\nmeans divide and rule. That's how he created\nthe Roman Empire.",
    "start": "805370",
    "end": "810980"
  },
  {
    "text": "The British knew this\nreally well. That's how they control the\nIndian subcontinent brilliantly for several\ndecades.",
    "start": "810980",
    "end": "816990"
  },
  {
    "text": "Ben Franklin actually knew it. In particular, he knew how good\nthe British were at this. So there's a famous quote.",
    "start": "816990",
    "end": "822610"
  },
  {
    "text": "You may well remember-- when he\nsigned the Declaration of Independence, he said, quote,\n\"We must all hang together, or",
    "start": "822610",
    "end": "828270"
  },
  {
    "text": "assuredly we will hang\nseparately,\" meaning divide and conquer is going to\nbe a real problem.",
    "start": "828270",
    "end": "834590"
  },
  {
    "text": "So second HASS credit for you. We just did some history. Why are we going to\nuse it today? Boy, you're a tough audience,\nI noticed, by the way.",
    "start": "834590",
    "end": "841210"
  },
  {
    "text": "That's all right. We're going to use it today,\nbecause we're going to use it as a tool for problem-solving.",
    "start": "841210",
    "end": "846540"
  },
  {
    "text": "And in particular, we're\ngoing to use it with one particular example. You're going to see divide and\nconquer later on in the term,",
    "start": "846540",
    "end": "854449"
  },
  {
    "text": "when Professor Guttag talks\nabout algorithm design. Today, I'm going to show you one\ngreat technique for doing",
    "start": "854450",
    "end": "860380"
  },
  {
    "text": "divide and conquer kind\nof algorithms. And that is the technique\nof recursion. ",
    "start": "860380",
    "end": "873040"
  },
  {
    "text": "How many people here have heard\nthat term used before by computer scientists? OK, not to worry.",
    "start": "873040",
    "end": "880310"
  },
  {
    "text": "If you've heard it, you probably\nthink that it's a really subtle programming\ntechnique. I'll let you in on a secret.",
    "start": "880310",
    "end": "887220"
  },
  {
    "text": "That's a PR job. It's what computer scientists\ntell you to make you think that they're much smarter\nthan they really are.",
    "start": "887220",
    "end": "893620"
  },
  {
    "text": "It's not subtle, and\nit's much more than a programming technique. And we're going to\ntalk about it.",
    "start": "893620",
    "end": "899900"
  },
  {
    "text": "Now, it gets used not just as\na programming technique. It gets used two other ways\nin computer science.",
    "start": "899900",
    "end": "905520"
  },
  {
    "text": "And I'm going to talk\nabout both. It's both a way of describing or\ndefining problems, so it's",
    "start": "905520",
    "end": "918320"
  },
  {
    "text": "a way of characterizing a\nproblem independent of how we might implement it. And it is a way of designing\nsolutions.",
    "start": "918320",
    "end": "924225"
  },
  {
    "start": "924225",
    "end": "934440"
  },
  {
    "text": "So an example of divide\nand conquer. ",
    "start": "934440",
    "end": "939630"
  },
  {
    "text": "Let me give you an example just\nto show you of why it's a way of defining a problem. Consider the part of the legal\ncode that defines the notion",
    "start": "939630",
    "end": "949079"
  },
  {
    "text": "of a natural-born US citizen,\nand remind you, to be eligible to run for president, which I\nhope you all do, you have to",
    "start": "949080",
    "end": "955130"
  },
  {
    "text": "be a natural-born US citizen. Definition has two parts. Part number one, anyone born\nwithin the United States is a",
    "start": "955130",
    "end": "962350"
  },
  {
    "text": "natural-born citizen. Part number two, anyone born\noutside the United States,",
    "start": "962350",
    "end": "968880"
  },
  {
    "text": "both of whose parents are\ncitizens of the United States, is a natural-born citizen,\nas long as one parent has",
    "start": "968880",
    "end": "975620"
  },
  {
    "text": "lived in the US. A little more complicated. What does that actually say? Well, it's got two parts.",
    "start": "975620",
    "end": "981730"
  },
  {
    "text": "And that's what a recursive\ndefinition has. The first part is simple. You're born here, natural-born\nUS citizen.",
    "start": "981730",
    "end": "989640"
  },
  {
    "text": "Notice the second part. It says, you weren't born here,\nyou might still be a natural-born citizen. But what you have to do? You have to decide if your\nparents are US citizens--",
    "start": "989640",
    "end": "998110"
  },
  {
    "text": "which they could be by having\nbeen born here, but there are other ways to be naturalized-- and that may require you\ndetermining if your",
    "start": "998110",
    "end": "1004280"
  },
  {
    "text": "grandparents are US citizens,\nwhich may require you to-- ah. So you may have to chain down\nseveral sets of problems.",
    "start": "1004280",
    "end": "1012889"
  },
  {
    "text": "Those two parts are what exactly\nwe're going to use when we talk about recursive\ndefinitions. There's what we call a base\npart, which typically",
    "start": "1012890",
    "end": "1019430"
  },
  {
    "text": "describes the simplest version\nof the problem. And then there is an inductive\npart that tends to describe",
    "start": "1019430",
    "end": "1028420"
  },
  {
    "text": "how you reduce the problem\nto simpler versions of the same problem. So in fact, let me write\nthose both down.",
    "start": "1028420",
    "end": "1034079"
  },
  {
    "text": "We have-- it's called a base case. ",
    "start": "1034079",
    "end": "1041970"
  },
  {
    "text": "This typically gives\nus a direct answer. It just tells us very simply,\nusing very simple methods,",
    "start": "1041970",
    "end": "1049570"
  },
  {
    "text": "whether this is something that\nsatisfies that recursive definition. And there is the recursive\nor inductive case.",
    "start": "1049570",
    "end": "1057350"
  },
  {
    "start": "1057350",
    "end": "1063280"
  },
  {
    "text": "Here, you reduce to a simpler\nversion of the same problem,",
    "start": "1063280",
    "end": "1075360"
  },
  {
    "text": "plus some other simple\noperations. ",
    "start": "1075360",
    "end": "1084399"
  },
  {
    "text": "OK, again, a bunch of words. Let me show you some examples. ",
    "start": "1084400",
    "end": "1089800"
  },
  {
    "text": "I'm going to start with three\nor four different examples, just to show you how\nquickly we do this. What I want you to see in all of\nthese examples is that when",
    "start": "1089800",
    "end": "1096340"
  },
  {
    "text": "I describe the problem, I'm\ndescribing it in terms of what's the simplest case, and\nthen how do I build solutions",
    "start": "1096340",
    "end": "1102330"
  },
  {
    "text": "to bigger problems from\nsolutions to smaller versions of the same problems?",
    "start": "1102330",
    "end": "1107680"
  },
  {
    "text": "OK, here's the first case\nI'm going to do. Suppose I tell you I want to\nbuild a little procedure to do",
    "start": "1107680",
    "end": "1114200"
  },
  {
    "text": "exponentiation, integer\nexponents. I want to compute b to the n.",
    "start": "1114200",
    "end": "1119250"
  },
  {
    "text": "But I tell you I've got a really\ncheap machine, and all I can do is multiplication. So I can't use exp.",
    "start": "1119250",
    "end": "1126820"
  },
  {
    "text": "Mathematician-- a course 18 person would\nsay, what's b to the n? That's b times b times\nb, n times.",
    "start": "1126820",
    "end": "1139290"
  },
  {
    "text": "How could I solve this? Well, recursively, I'd like to\nsay, suppose I could solve smaller versions of\nthe same problem.",
    "start": "1139290",
    "end": "1145950"
  },
  {
    "text": "And if somebody gave me a\nsolution to that smaller version, how would I\nbuild a solution to the bigger problem?",
    "start": "1145950",
    "end": "1151210"
  },
  {
    "text": "Oh, that's easy. That's the same as b times\nb to the n minus 1.",
    "start": "1151210",
    "end": "1164290"
  },
  {
    "text": "All right, I can see you're\nall going, well, duh. I guess that's what\nchancellors know. They're not very bright. Of course, you know that.",
    "start": "1164290",
    "end": "1170490"
  },
  {
    "text": "But notice what I did. I've now reduced it to a simpler\nversion of the same problem, recursively.",
    "start": "1170490",
    "end": "1177100"
  },
  {
    "text": "This basically says I wanted\nto solve b to the n.",
    "start": "1177100",
    "end": "1183090"
  },
  {
    "text": "It's b times b to\nthe n minus 1. Oh, yeah, but I've\ngot to figure out",
    "start": "1183090",
    "end": "1189080"
  },
  {
    "text": "when to unwrap this. So there's an if there. And that's true as long as\nn is greater than one--",
    "start": "1189080",
    "end": "1197170"
  },
  {
    "text": "actually, as long as n\nis greater than 0. We'll do it that way. And if n is equal to 0, I know\nthe answer is just 1.",
    "start": "1197170",
    "end": "1208860"
  },
  {
    "text": "I know you don't believe me,\nbut that's really cool. Why is it really cool? What do I have? I have a base case.",
    "start": "1208860",
    "end": "1215500"
  },
  {
    "text": "And if it's equal to 0, I know\nthe answer right away. If n is bigger than 0, oh, let's\nassume that I've got",
    "start": "1215500",
    "end": "1222640"
  },
  {
    "text": "somebody who will give\nme the solution to that smaller problem. When I get it, I can\njust use it, do the multiplication, and I'm done.",
    "start": "1222640",
    "end": "1229260"
  },
  {
    "text": "And so, in fact, here is a\nsimple piece of implementation of that, which I know is not in\nyour handout, but I'm just",
    "start": "1229260",
    "end": "1235720"
  },
  {
    "text": "going to show to you, because\nI simply want you to see the form of it.",
    "start": "1235720",
    "end": "1242780"
  },
  {
    "start": "1240000",
    "end": "1485000"
  },
  {
    "text": "It's an exact Python\ntranslation of what I just said. It says, if I want to take an\nexponent of b to the n, if n",
    "start": "1242780",
    "end": "1250690"
  },
  {
    "text": "is equal to 0, just return 1. If not, solve a smaller version\nof the same problem",
    "start": "1250690",
    "end": "1259179"
  },
  {
    "text": "right there. Call to the same procedure,\nsame function,",
    "start": "1259180",
    "end": "1264330"
  },
  {
    "text": "but different argument. And when I get that answer back,\njust multiply it by b, and return that.",
    "start": "1264330",
    "end": "1271860"
  },
  {
    "text": "This may look a little funky. This is the kind of thing that\nyour high school geometry teacher would rap your knuckles\nwith, although",
    "start": "1271860",
    "end": "1277900"
  },
  {
    "text": "they're not allowed to\ndo that anymore. You don't define things in\nterms of themselves. This is not geometry.",
    "start": "1277900",
    "end": "1283160"
  },
  {
    "text": "This is programming. And this is a perfectly\nlegal recursive definition of a problem.",
    "start": "1283160",
    "end": "1288380"
  },
  {
    "text": "It will stop, because it will\nkeep unwinding those recursive",
    "start": "1288380",
    "end": "1293690"
  },
  {
    "text": "calls until it gets down\nto the base case. And I'm going to show you an\nexample of that in a second.",
    "start": "1293690",
    "end": "1299049"
  },
  {
    "text": "I want to show you a much nicer\nexample of recursion. And again, part of my message\nhere is when you get a problem, don't instantly\nstart writing code.",
    "start": "1299050",
    "end": "1305549"
  },
  {
    "text": "Think about, how do I break\nthis down recursively? So I have brought some very\nhigh-tech tools with me today.",
    "start": "1305550",
    "end": "1311830"
  },
  {
    "text": "This is my version of the\ntower of Hanoi problem. How many people know the problem\nof the tower of Hanoi? Only a few.",
    "start": "1311830",
    "end": "1317350"
  },
  {
    "text": "OK, so here's the story. There's a temple in Hanoi\nstaffed by a bunch of monks.",
    "start": "1317350",
    "end": "1323460"
  },
  {
    "text": "In that temple, there\nare three tall, jewel-encrusted spikes. Mine aren't nearly as fancy.",
    "start": "1323460",
    "end": "1329510"
  },
  {
    "text": "And there are 64 golden disks,\nall of a different size. Stack starts out on one of those\nspikes, and the monks",
    "start": "1329510",
    "end": "1337710"
  },
  {
    "text": "move one disk at a time. Their goal is to move the entire\nstack of 64 from one",
    "start": "1337710",
    "end": "1343870"
  },
  {
    "text": "spike to another. And the rules are they can it\nof one disk at a time, but",
    "start": "1343870",
    "end": "1349830"
  },
  {
    "text": "they can never cover\nup a smaller disk with a larger disk. I have to tell you, I don't know\nwhat happens when they",
    "start": "1349830",
    "end": "1356640"
  },
  {
    "text": "move the entire stack. I mean, the universe ends, or\nyou all get A's in 600, or something equally as cool.",
    "start": "1356640",
    "end": "1363630"
  },
  {
    "text": "Question is, could we write a\npiece of code to help the monks, to tell them\nhow to move them? All right, so let's\nfigure this out.",
    "start": "1363630",
    "end": "1368970"
  },
  {
    "text": "And I'm going to show\nyou some examples. So I'm going to move a\nstack of size one.",
    "start": "1368970",
    "end": "1374320"
  },
  {
    "text": "Well, that's not very hard. Watch carefully, because\nyou're going to write code to do this. I want to move a stack of size\ntwo, so I've got to just make",
    "start": "1374320",
    "end": "1381920"
  },
  {
    "text": "sure that I move the\nbottom one off. That's not so hard. Now, I want to move a\nstack of size three.",
    "start": "1381920",
    "end": "1388330"
  },
  {
    "text": "I've got to be a little more\ncareful, because I can't cover up the smaller one with\na larger one. But that doesn't\nlook very hard.",
    "start": "1388330",
    "end": "1394981"
  },
  {
    "text": "Got the solution, right? Now, we go for stack\nof size four. This one definitely takes a\nlittle bit more care, because you really can't cover it up.",
    "start": "1394981",
    "end": "1401320"
  },
  {
    "text": "But as long as you do it right,\nyou can actually move the-- oops, and I didn't\ndo it right. You've got to move the pieces\nin the right way.",
    "start": "1401320",
    "end": "1406880"
  },
  {
    "text": "I do this for taking money off\nof Harvard students in Harvard Square, by the way.",
    "start": "1406880",
    "end": "1412160"
  },
  {
    "text": "Got it? Real easy to see the\nsolution, right? You could write code\nfor that right now. I'm not going to do five,\nbut it's really",
    "start": "1412160",
    "end": "1417660"
  },
  {
    "text": "easy to see the solution. Yeah. ",
    "start": "1417660",
    "end": "1422929"
  },
  {
    "text": "I blew it, too. I did one move I had\nto backtrack on. Let's think about this\nrecursively.",
    "start": "1422930",
    "end": "1429000"
  },
  {
    "text": "What's the recursive solution? Break it down into a simpler\nproblem, or a problem of a",
    "start": "1429000",
    "end": "1434559"
  },
  {
    "text": "smaller size. Ah, here's the solution. To solve this, I've got a stack,\nI've got a stack I'm",
    "start": "1434560",
    "end": "1441409"
  },
  {
    "text": "going to, I've got\na spare stack. What's the solution? You take a stack of size n\nminus 1, move it onto the",
    "start": "1441410",
    "end": "1447690"
  },
  {
    "text": "spare stack. Now I've got a simple problem. I can always move a\nstack of size one.",
    "start": "1447690",
    "end": "1453200"
  },
  {
    "text": "And then I move a stack of size\nn minus 1 to the target.",
    "start": "1453200",
    "end": "1458549"
  },
  {
    "text": "And, of course, how I move a\nstack of size n minus 1? Well, I just unwrap\nit one more. That's a really easy\nexplanation, right?",
    "start": "1458550",
    "end": "1466970"
  },
  {
    "text": "And it's really easy to write\ncode to do exactly that. So let me show it to you.",
    "start": "1466970",
    "end": "1473190"
  },
  {
    "text": "Again, I know this isn't in\nyour handout, but I just wanted to see it. And you could write\nthis yourself.",
    "start": "1473190",
    "end": "1479710"
  },
  {
    "text": "I'm going to write a\nlittle procedure right here called Hanoi. ",
    "start": "1479710",
    "end": "1487019"
  },
  {
    "start": "1485000",
    "end": "1756000"
  },
  {
    "text": "What are my arguments? Going to tell how big\na stack there is. That's m. And I'm just going to give it\nlabels, the from stack, the to",
    "start": "1487020",
    "end": "1493760"
  },
  {
    "text": "stack, and the spare stack. Look how simple the code is.",
    "start": "1493760",
    "end": "1498880"
  },
  {
    "text": "Says, if it's a stack of\nsize 1, just move it. I'll just print out\nthe instruction.",
    "start": "1498880",
    "end": "1504040"
  },
  {
    "text": "Move it from the from\nstack to the target stack, or the to stack. If it's bigger than\n1, what do I do?",
    "start": "1504040",
    "end": "1511610"
  },
  {
    "text": "I move a stack of size n minus\n1 onto the spare stack. I move a stack of size 1, which\nis what's left, onto the",
    "start": "1511610",
    "end": "1519450"
  },
  {
    "text": "target stack. And then, I move that stack over\nhere that's on the spare stack over to the\ntarget stack.",
    "start": "1519450",
    "end": "1526490"
  },
  {
    "text": "It's what I just showed\nyou right there. OK? So let's try it. ",
    "start": "1526490",
    "end": "1535400"
  },
  {
    "text": "Yes, I know I still\nlike French. We're going to do Hanoi. Move a stack of size 1. And we'll just give this\nsome labels, just",
    "start": "1535400",
    "end": "1540670"
  },
  {
    "text": "from, to, and spare. Well, duh. You just move it there.",
    "start": "1540670",
    "end": "1546540"
  },
  {
    "text": "All right. Let's try a stack of size 2. ",
    "start": "1546540",
    "end": "1554580"
  },
  {
    "text": "It's just what I did. I'm sure you remember that. Let's be a little more\ndaring here. ",
    "start": "1554580",
    "end": "1565060"
  },
  {
    "text": "There's the solution to move\na stack of size 5. I'll let you check\nit separately, make sure it's right.",
    "start": "1565060",
    "end": "1572340"
  },
  {
    "text": "One of the things you\ncan also see here-- I'm not going to\ntalk about it. You might think about it, ask\nyour TA in recitation is, how long does it take to\nsolve this problem?",
    "start": "1572340",
    "end": "1580070"
  },
  {
    "text": "How long is it going to take\nthose monks to actually move a stack of size 64? I'll give you a hint. The answer is measured\nin billions of years.",
    "start": "1580070",
    "end": "1587880"
  },
  {
    "text": "This is an exponential\nproblem. And you can see that\ngrowth right away. That's a separate topic. But notice coming up with that\nsolution on your own, maybe",
    "start": "1587880",
    "end": "1597040"
  },
  {
    "text": "not so easy. Thinking about it recursively,\nvery easy to think about. And that's the way we\nwant to look at it.",
    "start": "1597040",
    "end": "1604440"
  },
  {
    "text": "OK, let me give you another\nexample of breaking a problem down recursively, and then\nwriting the code to do.",
    "start": "1604440",
    "end": "1613350"
  },
  {
    "text": "I want to decide if a sentence\nis a palindrome.",
    "start": "1613350",
    "end": "1618730"
  },
  {
    "text": "Remember what a palindrome is? It is not an ex-governor\nfrom Alaska. It is a string of characters--",
    "start": "1618730",
    "end": "1624500"
  },
  {
    "text": "I guess an airport in Alaska--\nit's a string of characters that have the property\nthat they read the same front to back.",
    "start": "1624500",
    "end": "1632290"
  },
  {
    "text": "The most famous one in English--\nwhich is, of course, amusing because it's attributed\nto a Frenchman-- is Napoleon supposedly saying,\n\"Able was I ere I saw Elba.\"",
    "start": "1632290",
    "end": "1641140"
  },
  {
    "text": "Same thing back to front. How would I write a piece of\ncode to decide if something is",
    "start": "1641140",
    "end": "1646330"
  },
  {
    "text": "a palindrome? I'm going to do it\nin a second. You've got it on the handout. But let's think about\nit for a second.",
    "start": "1646330",
    "end": "1652610"
  },
  {
    "text": "What would the base cases be-- or base case? Somebody help me out. What's a good base case here?",
    "start": "1652610",
    "end": "1658000"
  },
  {
    "text": " What's the shortest possible\nsentence I could have?",
    "start": "1658000",
    "end": "1665310"
  },
  {
    "text": "I? A? A? Don't worry about whether it's\na legal sense of not. It might need a verb in there.",
    "start": "1665310",
    "end": "1670430"
  },
  {
    "text": "Base case is presumably, if\nI've got a string one character long, it's\na palindrome.",
    "start": "1670430",
    "end": "1676130"
  },
  {
    "text": "If I've got a string zero\ncharacters long, it's probably a palindrome as well.",
    "start": "1676130",
    "end": "1682550"
  },
  {
    "text": "How would I take a longer string\nand break it down into a simpler version of the same\nproblem to decide if something",
    "start": "1682550",
    "end": "1688419"
  },
  {
    "text": "is a palindrome?  Anybody want to help me out? ",
    "start": "1688420",
    "end": "1696020"
  },
  {
    "text": "Is that a hand up there,\nor are you just scratching your head?  Well-- yeah?",
    "start": "1696020",
    "end": "1701940"
  },
  {
    "text": "AUDIENCE: Maybe take the first\nand the last element, see if they're equal. If they are, then cut\nthem off, and--",
    "start": "1701940",
    "end": "1708309"
  },
  {
    "text": "ERIC GRIMSON: Yeah. What's a palindrome? The easy way to start it is take\nthe things at the end, first and last character.",
    "start": "1708310",
    "end": "1713340"
  },
  {
    "text": "If they're not the same, it\ndoesn't matter what's happening in the middle. This thing can't be\na palindrome. So let's check those.",
    "start": "1713340",
    "end": "1718642"
  },
  {
    "text": "And oh, yeah, if those are the\nsame character, and I pull them off, what do I have?",
    "start": "1718642",
    "end": "1724005"
  },
  {
    "text": "I have a smaller version\nof the same problem. I have a new sentence that's\nnow two characters less.",
    "start": "1724005",
    "end": "1730150"
  },
  {
    "text": "Do the same thing. Say, is that a palindrome? So if these characters\nmatch, and that's a palindrome, I'm done.",
    "start": "1730150",
    "end": "1735870"
  },
  {
    "text": "How do I tell if that's\na palindrome? Check if their two end\ncharacters match, and the things in the middle.",
    "start": "1735870",
    "end": "1742250"
  },
  {
    "text": "So let's look a little piece of\ncode to make this happen. ",
    "start": "1742250",
    "end": "1749090"
  },
  {
    "text": "I'm going to do it in\na couple of pieces. Here's the first piece\nI'm going to write. I'm going to walk\nyou through it.",
    "start": "1749090",
    "end": "1755110"
  },
  {
    "text": " First thing I'm going to do is\nI'm going to do this outside",
    "start": "1755110",
    "end": "1760520"
  },
  {
    "start": "1756000",
    "end": "2420000"
  },
  {
    "text": "of the recursive call is I\nneed to convert a string that's put in to make\nsure that, in fact, it's in a form I want.",
    "start": "1760520",
    "end": "1765769"
  },
  {
    "text": "So I don't care about\nthe spaces. Able was I ere I saw Elba. The spaces aren't in\nthe same place.",
    "start": "1765770",
    "end": "1771289"
  },
  {
    "text": "That's OK. It's really the characters. And I don't really care\nabout capitalization. So this little procedure\nbasically says, given a",
    "start": "1771290",
    "end": "1778560"
  },
  {
    "text": "string, convert it all into\nlowercase-- and if you haven't seen that, I'm just importing\nfrom a module called string",
    "start": "1778560",
    "end": "1785050"
  },
  {
    "text": "some built-in procedures-- and this one simply takes\nthe string, and makes it all lowercase.",
    "start": "1785050",
    "end": "1790179"
  },
  {
    "text": "And then what do I do? Well, just like we did before,\nI'm just going to walk down that string, gathering\ntogether all of the",
    "start": "1790180",
    "end": "1797020"
  },
  {
    "text": "characters. So this little loop just says,\nlet's initialize ans to be an empty string.",
    "start": "1797020",
    "end": "1802530"
  },
  {
    "text": "And then for each character\nin s, if it is a lowercase character-- and that little\ntest simply does that.",
    "start": "1802530",
    "end": "1807790"
  },
  {
    "text": "It says, if it's in the set of\nlowercase characters I'm going to add it to the end.",
    "start": "1807790",
    "end": "1813049"
  },
  {
    "text": "And when I'm done, I'm just\ngoing to return ans. Going to return the answer.",
    "start": "1813050",
    "end": "1818424"
  },
  {
    "text": "A little procedure. And, by the way, this is a\nnice piece of programming style, as well. I want to separate out things\nthat I want to do once from",
    "start": "1818424",
    "end": "1825540"
  },
  {
    "text": "the things I'm going to\ncall multiple times. So I don't need to re-check\nevery time that my string is",
    "start": "1825540",
    "end": "1830929"
  },
  {
    "text": "all lowercase, I'm just going\nto convert it out. Now, let's look at how\ndo we test this.",
    "start": "1830930",
    "end": "1839230"
  },
  {
    "text": "Well, it's literally just a\ntranslation of what we said.",
    "start": "1839230",
    "end": "1845250"
  },
  {
    "text": "But let's look at the pieces. It says, if I give you just\na string of characters--",
    "start": "1845250",
    "end": "1850690"
  },
  {
    "text": "I've gotten rid of the spaces,\nI've made it all lowercase-- what does it say to do? I've got to check for\nthe base cases. And here, I'm actually\ngoing to be careful.",
    "start": "1850690",
    "end": "1858060"
  },
  {
    "text": "We could have discovered\nthis if we programmed. There actually are two base\ncases here, which is, is the string of length one, or\nis of length zero?",
    "start": "1858060",
    "end": "1867620"
  },
  {
    "text": "Why would I end up with\ntwo base cases? Why don't I just check for\na string of length one?",
    "start": "1867620",
    "end": "1873850"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] ERIC GRIMSON: Exactly. I can have an odd or an even\nnumber of characters.",
    "start": "1873850",
    "end": "1880140"
  },
  {
    "text": "So as I'm clipping them off the\nends, I might end up with nothing in the middle,\nor I might have one in the middle exactly.",
    "start": "1880140",
    "end": "1885200"
  },
  {
    "text": "And we might have discovered it\nif we tried programming it. But right, exactly right. So I can capture that by just\nsaying, if the length is less",
    "start": "1885200",
    "end": "1891470"
  },
  {
    "text": "than or equal to 1, which\ngets both of those. In that case, we know the\npalindrome will return true.",
    "start": "1891470",
    "end": "1896610"
  },
  {
    "text": "Otherwise, what do we do? Well, we do what the gentleman\nover here suggested. We take the first and the last\ncharacter of the string--",
    "start": "1896610",
    "end": "1903970"
  },
  {
    "text": "again, remind you s with an\nindex of minus 1 goes backwards 1, if you like, and\ngives me the last character.",
    "start": "1903970",
    "end": "1909230"
  },
  {
    "text": "If those two characters are the\nsame, I've now reduced it to a simpler version of\nthe same problem. So I simply say, if that's true,\nand everything else is a",
    "start": "1909230",
    "end": "1919360"
  },
  {
    "text": "palindrome, return true. Now, if you've not seen this\nparticular little funky form",
    "start": "1919360",
    "end": "1925750"
  },
  {
    "text": "right here, that is taking\nstring s, and saying, give me",
    "start": "1925750",
    "end": "1933160"
  },
  {
    "text": "a copy of everything starting\nwith the first-- which means not the\n0th element--",
    "start": "1933160",
    "end": "1938320"
  },
  {
    "text": "and ending with everything up\nto, but not including, the last element. We'll use this to make copies\nof other kinds of lists.",
    "start": "1938320",
    "end": "1945130"
  },
  {
    "text": "But that's all that's doing, is\nsaying, give me what's in that string, throwing away the\nfirst and the last element.",
    "start": "1945130",
    "end": "1950809"
  },
  {
    "text": "And that gives me exactly the\nrecursive call I want. I'm now saying what? If the first and last character\nare the same, and if",
    "start": "1950810",
    "end": "1957669"
  },
  {
    "text": "what's left over is itself\na palindrome, I'm golden. ",
    "start": "1957670",
    "end": "1964300"
  },
  {
    "text": "Now, let me just wrap\nall of that up in a little piece here.",
    "start": "1964300",
    "end": "1969440"
  },
  {
    "text": "I'll un-comment this.  Which is simply going to say,\nI'm going to print out, or put",
    "start": "1969440",
    "end": "1976080"
  },
  {
    "text": "a comment in it. And I'm simply going to put\nthe two pieces together. Given a string, I'm going to\nconvert it into all lowercase",
    "start": "1976080",
    "end": "1981140"
  },
  {
    "text": "characters. And then I'm going to check,\nis this thing a palindrome? So again, let's try\nsome examples.",
    "start": "1981140",
    "end": "1989985"
  },
  {
    "text": " So we'll pick on Professor\nGuttag.",
    "start": "1989985",
    "end": "1995730"
  },
  {
    "text": "His name is almost\na palindrome.  Not quite.",
    "start": "1995730",
    "end": "2002649"
  },
  {
    "text": "So we're going to give\nhim a name change. It helps if I can type. ",
    "start": "2002650",
    "end": "2017850"
  },
  {
    "text": "Oh, good. Guttag is not, but Guttug,\nwhatever that means in German,",
    "start": "2017850",
    "end": "2023740"
  },
  {
    "text": "is, because the Gs, the Us,\nand the Ts all match up. Oh, and let's see. Let's try a couple of\nother ones here.",
    "start": "2023740",
    "end": "2029650"
  },
  {
    "text": "And I actually typed these in. We'll check to see if Napoleon\nreally was right when he used his palindrome.",
    "start": "2029650",
    "end": "2035390"
  },
  {
    "text": " If you can't read this last\none, it says, \"Are we not",
    "start": "2035390",
    "end": "2040750"
  },
  {
    "text": "drawn onward, we few, drawn\nonward to--\" and I can't read the tail end of that-- ",
    "start": "2040750",
    "end": "2049980"
  },
  {
    "text": "\"to new era.\" And if we try\nboth of those, they are.",
    "start": "2049980",
    "end": "2060530"
  },
  {
    "text": "What's my point, you're\nwondering. I solved this problem by simply\nbreaking it down into",
    "start": "2060530",
    "end": "2067820"
  },
  {
    "text": "simpler versions of\nthe same problem. That's the tool that you want. If you were just trying to think\nabout, how do I keep",
    "start": "2067820",
    "end": "2073589"
  },
  {
    "text": "track of my indices as\nI'm walking along? I'm going to come in from\nboth ends, so I've got to add and subtract. And I got to make sure\nI'm checking things.",
    "start": "2073590",
    "end": "2079520"
  },
  {
    "text": "You could write a nice\niterative loop that would do it. Actually, I'll take back\nthe word nice. You could write an iterative\nloop that would do it.",
    "start": "2079520",
    "end": "2086138"
  },
  {
    "text": "But it is not crisp, it's not\nclean, and it's really easy to screw up. Or you could say, let's take\nadvantage of recursion.",
    "start": "2086139",
    "end": "2093350"
  },
  {
    "text": "Let's just break it down\ninto a simpler version of the same problem. You'd get a very nice,\nsimple piece of code.",
    "start": "2093350",
    "end": "2100310"
  },
  {
    "text": "Now, this may still feel\na little mysterious. I wouldn't blame\nyou if it did. So let's do the following.",
    "start": "2100310",
    "end": "2106550"
  },
  {
    "text": " I'm going to comment these out\nso that we're not constantly",
    "start": "2106550",
    "end": "2111700"
  },
  {
    "text": "looking at them.  And I'm going to show you what\nhappens if we actually look",
    "start": "2111700",
    "end": "2118800"
  },
  {
    "text": "inside of this thing to\nsee what's going on. So just give me a second here. We're going to comment\nall of those out. ",
    "start": "2118800",
    "end": "2126330"
  },
  {
    "text": "And let's build a version of\nthis that just prints out as we go along.",
    "start": "2126330",
    "end": "2133790"
  },
  {
    "text": "So I'm going to show\nyou right here. ",
    "start": "2133790",
    "end": "2140940"
  },
  {
    "text": "It's the same basic pieces. And actually, I realized\nI need to leave is characters around.",
    "start": "2140940",
    "end": "2146660"
  },
  {
    "text": "Let me go find my is\ncharacters part-- two characters part. Sorry, give me a second here.",
    "start": "2146660",
    "end": "2152869"
  },
  {
    "text": " Going to need that. ",
    "start": "2152870",
    "end": "2158824"
  },
  {
    "text": "So we'll un-comment\nthat region. That's just doing the\nconversion for us. I think this is going to work. Let's look at what\nwe're doing here.",
    "start": "2158824",
    "end": "2165900"
  },
  {
    "text": "This is exactly the\nsame thing. But I'm just going to put some\nprint statements in it, which as I'm sure you've already heard\nfrom Professor Guttag,",
    "start": "2165900",
    "end": "2171380"
  },
  {
    "text": "is a good thing to do as well. I want you to see\nwhat happens. So the only changes I'm making\nhere are when I come into the",
    "start": "2171380",
    "end": "2178500"
  },
  {
    "text": "thing that's doing the checking,\nI'm going to print out a little thing that says,\nwhat are you calling me with, so you can see how\nit does the work.",
    "start": "2178500",
    "end": "2185220"
  },
  {
    "text": "And then, if it's a base case,\nI'm going to print out a statement that says I'm\nin the base case.",
    "start": "2185220",
    "end": "2190940"
  },
  {
    "text": "And otherwise, I'm just going\nto print out something that says, here's what I'm about to\nreturn for the piece of the",
    "start": "2190940",
    "end": "2195960"
  },
  {
    "text": "string I'm looking at. So it's just instrumenting, if\nyou like, what I'm going to do inside of here.",
    "start": "2195960",
    "end": "2201319"
  },
  {
    "text": "And the other piece I'm going\nto do is I'm going to have a little space called indent, so\nthat every time I call a",
    "start": "2201320",
    "end": "2208410"
  },
  {
    "text": "smaller version of the problem,\nI'm just going to indent over a little bit, so you\ncan see how it unwraps it.",
    "start": "2208410",
    "end": "2215265"
  },
  {
    "text": "And if we do this, just\nrun that through.",
    "start": "2215265",
    "end": "2223109"
  },
  {
    "text": "Let's try it. So if I call is palindrome\nprint with Guttag--",
    "start": "2223110",
    "end": "2232530"
  },
  {
    "text": " it would really help if I\ncould type, wouldn't it?",
    "start": "2232530",
    "end": "2239230"
  },
  {
    "start": "2239230",
    "end": "2245900"
  },
  {
    "text": "Yes, it would really help\nif I could type. You're all being really polite,\ngoing, ah, he missed a character there. But we're not going to tell\nhim, because he's going to",
    "start": "2245900",
    "end": "2252970"
  },
  {
    "text": "have to figure it\nout for himself.  Administrators cannot\npossibly do this.",
    "start": "2252970",
    "end": "2259470"
  },
  {
    "text": " Ah, notice what it did.",
    "start": "2259470",
    "end": "2265760"
  },
  {
    "text": "This is how you can see the\nrecursive unwinding. It said-- I'm going to check\nthis thing out.",
    "start": "2265760",
    "end": "2270910"
  },
  {
    "text": "It said way up there--\nactually, I'll just do it here. It said, I'm going to call\nit initially with Guttag.",
    "start": "2270910",
    "end": "2277310"
  },
  {
    "text": "Oh, the two Gs worked so\nthat recursively-- and notice the push-in here--\nsaid, I'm calling it again",
    "start": "2277310",
    "end": "2282680"
  },
  {
    "text": "with U-T-T-A. Oh, that\none didn't work. So I didn't have to check any\nfurther, and I pushed it out.",
    "start": "2282680",
    "end": "2290535"
  },
  {
    "text": "On the other hand, if I do this,\nha, you can see all of",
    "start": "2290535",
    "end": "2301289"
  },
  {
    "text": "the stages. You can see it unwinding it. It says, to decide if Guttug\nis a palindrome,",
    "start": "2301290",
    "end": "2306859"
  },
  {
    "text": "well, I check the ends. And I've got to check U-T-T-U.\nI don't know what that is. Something interesting.",
    "start": "2306860",
    "end": "2312130"
  },
  {
    "text": "Which says, I got\nto check that.  Which means I've got a check,\noh, there's that base case of",
    "start": "2312130",
    "end": "2317950"
  },
  {
    "text": "the empty one. I can now return true-- and I'm\ngoing to open this up so you can see it-- from the base case, true\nfor that, true for",
    "start": "2317950",
    "end": "2325160"
  },
  {
    "text": "that, true for that. Let's do one last one,\nassuming I can type.",
    "start": "2325160",
    "end": "2331690"
  },
  {
    "text": "I can't. ",
    "start": "2331690",
    "end": "2351480"
  },
  {
    "text": "Well, you get the idea, right? It's a little messy. But we go up a little bit,\nyou can start seeing--",
    "start": "2351480",
    "end": "2357270"
  },
  {
    "text": "I'm obviously just going to\nrun out of those pieces there-- but notice\nwhat it's doing. It's stripping off each of\nthose characters in turn.",
    "start": "2357270",
    "end": "2363710"
  },
  {
    "text": "You can see how deep this goes\nin, which is why you've got all those weird spaces there\nas I keep going in. But it starts off by\nsaying, look at",
    "start": "2363710",
    "end": "2369430"
  },
  {
    "text": "that, oh, look at that. I've got to look at-- [GIBBERISH] Which says, I've got to\nlook at [GIBBERISH]",
    "start": "2369430",
    "end": "2375799"
  },
  {
    "text": "You get the idea. But notice the key thing. I'm simply reducing\nit to a simpler version of the same problem.",
    "start": "2375800",
    "end": "2381720"
  },
  {
    "text": "You can also see that to get\nthe answer out, I've got to stack up a whole bunch\nof things. All those indents are basically\nheld operations,",
    "start": "2381720",
    "end": "2388650"
  },
  {
    "text": "which is one of the properties\nof a recursive procedure. You have to hold onto\nintermediate things.",
    "start": "2388650",
    "end": "2393970"
  },
  {
    "text": "And that can cause,\nin some languages, some efficiency issues. But in terms of solving the\nproblem, this is really easy.",
    "start": "2393970",
    "end": "2399900"
  },
  {
    "text": "I've just broken it down into\nthose simple pieces. And that's really nice. ",
    "start": "2399900",
    "end": "2406940"
  },
  {
    "text": "So let me finish up with\none last example of a recursive procedure. Again, my goal here is to let\nyou see, what am I doing?",
    "start": "2406940",
    "end": "2412530"
  },
  {
    "text": "I keep repeating this,\nbut it's important. To solve a problem, figure out\nhow to break it down into a",
    "start": "2412530",
    "end": "2417870"
  },
  {
    "text": "simpler version of\nthe same problem. One of the classic examples\nof recursion is Fibonacci.",
    "start": "2417870",
    "end": "2426900"
  },
  {
    "text": "How many people here know\nthe Fibonacci numbers? A few more, good. For those of you who don't,\nhere's the story.",
    "start": "2426900",
    "end": "2433650"
  },
  {
    "text": "Probably heard the phrase, \"They\nbreed like rabbits.\" It's been used to describe a\npopulation that the speaker",
    "start": "2433650",
    "end": "2439610"
  },
  {
    "text": "thinks is growing too quickly. Works with rabbits. It works if you put two\npennies in a drawer. There's a whole bunch of ways\nin which this happens.",
    "start": "2439610",
    "end": "2447380"
  },
  {
    "text": "The history of this is\nactually very old. It goes back to 1202, when an\nItalian mathematician named",
    "start": "2447380",
    "end": "2454750"
  },
  {
    "text": "Leonardo of Pisa, also known\nas Fibonacci, developed a formula that he thought would\nhelp him quantify the notion",
    "start": "2454750",
    "end": "2461220"
  },
  {
    "text": "of how rapidly do\nrabbits breed. And here was his model. His model is not great, and\nwe'll see that in a second.",
    "start": "2461220",
    "end": "2466440"
  },
  {
    "text": "But here's his model. You start with a newborn\npair of rabbits, one male and one female.",
    "start": "2466440",
    "end": "2472390"
  },
  {
    "text": "You put them in a pen. You assume that rabbits\nare able to mate at the age of one month.",
    "start": "2472390",
    "end": "2479130"
  },
  {
    "text": "And you further assume that\nthey have a one-month gestation period. So they can produce offspring\nat the end of a month.",
    "start": "2479130",
    "end": "2486590"
  },
  {
    "text": "Finally, let's suppose that\nthese mythical rabbits never die and that the female always\nproduces one new pair--",
    "start": "2486590",
    "end": "2493770"
  },
  {
    "text": "that is, a male and a female\nevery month from its second month on. The question is, how many female\nrabbits will there be",
    "start": "2493770",
    "end": "2501650"
  },
  {
    "text": "at the end of a year? Hm. OK, let's see if we can\nfigure this out.",
    "start": "2501650",
    "end": "2507190"
  },
  {
    "start": "2507190",
    "end": "2522130"
  },
  {
    "text": "OK, at month 0, when it starts\noff, there's 1 female rabbit",
    "start": "2522130",
    "end": "2527529"
  },
  {
    "text": "and 1 male rabbit. At the end of the first month,\nthere's still one female",
    "start": "2527530",
    "end": "2533820"
  },
  {
    "text": "rabbit, but she's\nnow pregnant. So there's still 1.",
    "start": "2533820",
    "end": "2541340"
  },
  {
    "text": "At the end of the second\nmonth, what do we have? Well, that initial female\nis still there. And she has produced one pair.",
    "start": "2541340",
    "end": "2548830"
  },
  {
    "text": "So there is a second female.  At the end of the third month,\nthat initial female has again",
    "start": "2548830",
    "end": "2558260"
  },
  {
    "text": "been pregnant and\nhas produced. And these two are still there.",
    "start": "2558260",
    "end": "2563810"
  },
  {
    "text": "So there are 3. At the end of the fourth month,\nboth of these females",
    "start": "2563810",
    "end": "2572540"
  },
  {
    "text": "have now produced offspring. And those 3 females\nare now pregnant. There are 5.",
    "start": "2572540",
    "end": "2578496"
  },
  {
    "start": "2578496",
    "end": "2584020"
  },
  {
    "text": "At the end of the fifth\nmonth, those 3 females have produced offspring.",
    "start": "2584020",
    "end": "2589589"
  },
  {
    "text": "Those 5 are now pregnant. There are 8.",
    "start": "2589590",
    "end": "2594980"
  },
  {
    "text": "And at the end of the sixth\nmonth, there are 13. ",
    "start": "2594980",
    "end": "2601339"
  },
  {
    "text": "What did I just describe? I just described a nice\nrecursive relationship.",
    "start": "2601340",
    "end": "2606434"
  },
  {
    "text": " That says, gee, there ought\nto be a base case.",
    "start": "2606435",
    "end": "2612110"
  },
  {
    "text": "And there ought to be\na recursive case. And, in fact, in this case, we\ncan describe this very nicely.",
    "start": "2612110",
    "end": "2621320"
  },
  {
    "text": "The number of females at month\nend is the number of females",
    "start": "2621320",
    "end": "2628090"
  },
  {
    "text": "there were two months\nearlier-- because they've all given\nbirth, so that's that many new females--",
    "start": "2628090",
    "end": "2633440"
  },
  {
    "text": "plus the number of females there\nwere at the previous",
    "start": "2633440",
    "end": "2638960"
  },
  {
    "text": "month, who are now\nall in whelp. Ah, that's a recursive\nrelationship.",
    "start": "2638960",
    "end": "2645790"
  },
  {
    "text": "If I wanted to figure out how\nmany females there are at month end, what do\nI have to do?",
    "start": "2645790",
    "end": "2651840"
  },
  {
    "text": "Well, I just have to say,\nwhat's the base case? Because there's the\nrecursive case. And the base case is--",
    "start": "2651840",
    "end": "2659470"
  },
  {
    "text": "let me do it this way. If n is equal to\n0 or 1, it's 1.",
    "start": "2659470",
    "end": "2666579"
  },
  {
    "text": " And as a consequence, I should\nbe able to figure out how",
    "start": "2666580",
    "end": "2674300"
  },
  {
    "text": "quickly do rabbits breed, at\nleast according to 12th century Italian mathematicians.",
    "start": "2674300",
    "end": "2681260"
  },
  {
    "text": "A couple of things to notice\nhere, by the way. Sort of similar to what I saw\nin the towers of Hanoi",
    "start": "2681260",
    "end": "2687710"
  },
  {
    "text": "problem, I'm going to have\nmultiple recursive calls. To solve this problem of size n\nover here, I've got to solve",
    "start": "2687710",
    "end": "2695950"
  },
  {
    "text": "two smaller problems, and then\ndo the simple operation of adding them together. That's OK.",
    "start": "2695950",
    "end": "2701560"
  },
  {
    "text": "It's going to change the\ncomplexity of my algorithm, but it's perfectly fine to have\nmultiple recursive calls. And as I saw in my case of the\npalindrome, I may have more",
    "start": "2701560",
    "end": "2709330"
  },
  {
    "text": "than one base case. That's also OK, as long as\nI can ground this out. All right, so let's\njust look at it.",
    "start": "2709330",
    "end": "2715570"
  },
  {
    "text": "How would we write this? Let me get rid of that,\ncomment that out.",
    "start": "2715570",
    "end": "2721089"
  },
  {
    "text": "We can write a little procedure to compute Fibonacci. ",
    "start": "2721090",
    "end": "2730090"
  },
  {
    "text": "And there's the procedure. It's in your handout. I've got some things up at the\ntop here that are just making sure that I got the right kinds\nof arguments to pass in,",
    "start": "2730090",
    "end": "2736240"
  },
  {
    "text": "which is a cleaner, crisp\nway of doing it. But what do I say? I say, if either x is 0 or x\nis 1, two base cases, just",
    "start": "2736240",
    "end": "2744460"
  },
  {
    "text": "return the answer, which is 1. Otherwise, solve two--",
    "start": "2744460",
    "end": "2750300"
  },
  {
    "text": "right there-- smaller sub-problems. And what's the simple\noperation?",
    "start": "2750300",
    "end": "2755440"
  },
  {
    "text": "Just add the two things\ntogether, and return it out.  And if I do this, we can check\nto see if we actually compute",
    "start": "2755440",
    "end": "2762900"
  },
  {
    "start": "2759000",
    "end": "2963000"
  },
  {
    "text": "Fibonacci properly. All right, let's do\na test fib of 0.",
    "start": "2762900",
    "end": "2768370"
  },
  {
    "text": " It says, ah, fib of 0 is 1.",
    "start": "2768370",
    "end": "2774549"
  },
  {
    "text": "To do a test fib of 1-- there's\nmy other base case.",
    "start": "2774550",
    "end": "2780080"
  },
  {
    "text": "Aha, it says, there they go. And now, let's do something\na little larger.",
    "start": "2780080",
    "end": "2787400"
  },
  {
    "text": " There it is. As it gets each computation it's\ndoing, it says, to get",
    "start": "2787400",
    "end": "2795290"
  },
  {
    "text": "fib of 3, I've got to solve\nfib of 0, fib of 1, and fib of 2. And there's the answer. And just to make sure we're\nreally doing this well, just",
    "start": "2795290",
    "end": "2806480"
  },
  {
    "text": "reproduce my table over there.  Do I expect you to get all\nof that code right away?",
    "start": "2806480",
    "end": "2812790"
  },
  {
    "text": "No, although it's pretty\neasy to understand. What I do expect you to see,\nthough, is notice what I did. I took a recursive problem,\nand broke it down",
    "start": "2812790",
    "end": "2820180"
  },
  {
    "text": "into simpler pieces. And then I used the solutions of\nthose pieces to give me the",
    "start": "2820180",
    "end": "2825630"
  },
  {
    "text": "solution to the larger\nproblem. By the way, Leonardo\nPisa had it wrong.",
    "start": "2825630",
    "end": "2834329"
  },
  {
    "text": "In 1859, as I'm sure many\nof you know, a wonderful Australian farmer named Thomas\nAustin imported 24 rabbits",
    "start": "2834330",
    "end": "2842440"
  },
  {
    "text": "from England to use as\ntargets for hunting. 10 years later there were 2\nmillion rabbits being shot and",
    "start": "2842440",
    "end": "2848670"
  },
  {
    "text": "trapped in Australia. And fib, while it grows fast,\ndoesn't go quite that fast. So Leonardo of Pisa\nhad it wrong.",
    "start": "2848670",
    "end": "2856150"
  },
  {
    "text": "Of course, as you probably also\nknow, Australia, and I think New Zealand, have the\nwonderful property of having",
    "start": "2856150",
    "end": "2861170"
  },
  {
    "text": "more sheep than people. I don't know what that says,\nother than it's a great recursive problem.",
    "start": "2861170",
    "end": "2867490"
  },
  {
    "text": "Fibonacci, by the way, actually shows up in other places. Again, it may not be a perfect\nmodel of rabbit populations,",
    "start": "2867490",
    "end": "2873559"
  },
  {
    "text": "but it has some other really\ninteresting properties. One of them is, if you let n get\nclose to infinity, and you",
    "start": "2873560",
    "end": "2879640"
  },
  {
    "text": "look at the ratio of fib of\nn over fib of n minus 1-- ",
    "start": "2879640",
    "end": "2894242"
  },
  {
    "text": "it sounds like a strange\nthing to look at. It basically tells you how\nquickly does fib grow. Does anybody know the\nanswer to this?",
    "start": "2894242",
    "end": "2900346"
  },
  {
    "text": "The golden ratio, 1 plus root\n5 over 2, which Leonardo--",
    "start": "2900346",
    "end": "2907210"
  },
  {
    "text": "the other Leonardo, the really\ngood Leonardo-- by the way, used to design buildings with. So there's a very strange\nconnection.",
    "start": "2907210",
    "end": "2912650"
  },
  {
    "text": "The other one thing I like about\nthis is that Fibonacci shows up, actually,\na lot in nature. So, for example, did you know\nthat the number of petals on",
    "start": "2912650",
    "end": "2921400"
  },
  {
    "text": "most flowers is a Fibonacci\nnumber? For example, black-eyed\nSusans, 13 petals.",
    "start": "2921400",
    "end": "2928850"
  },
  {
    "text": " Field daisies, 34 petals.",
    "start": "2928850",
    "end": "2935020"
  },
  {
    "text": "You might ask why. Oh, sorry. I'm out of time. I won't answer it today.",
    "start": "2935020",
    "end": "2941650"
  },
  {
    "text": "But you can ask Professor Guttag\nnext time around why it is that petals come in\nFibonacci numbers.",
    "start": "2941650",
    "end": "2947150"
  },
  {
    "text": "What's the message\nof this lecture? Recursion, divide and conquer. Break a problem down\ninto simpler",
    "start": "2947150",
    "end": "2953590"
  },
  {
    "text": "versions of the same problem. Life is really easy. And you'll see Professor\nGuttag next time. ",
    "start": "2953590",
    "end": "2963881"
  }
]