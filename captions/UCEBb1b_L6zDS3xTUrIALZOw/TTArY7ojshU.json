[
  {
    "start": "0",
    "end": "223000"
  },
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "5940"
  },
  {
    "start": "5940",
    "end": "25762"
  },
  {
    "text": "MICHAEL SIPSER: OK, everyone. Let's get started. Welcome back to Theory of\nComputation lecture number six.",
    "start": "25762",
    "end": "36290"
  },
  {
    "text": "So we have been looking at\na number of different models",
    "start": "36290",
    "end": "46990"
  },
  {
    "text": "of computation. And last lecture actually\nwas an important one for us,",
    "start": "46990",
    "end": "54410"
  },
  {
    "text": "because we shifted gears\nfrom our restricted models,",
    "start": "54410",
    "end": "61520"
  },
  {
    "text": "finite automata,\npushdown automata, and their associated generative\nmodels, regular expressions,",
    "start": "61520",
    "end": "69270"
  },
  {
    "text": "and context-free grammars\nto Turing machines, which",
    "start": "69270",
    "end": "74479"
  },
  {
    "text": "are going to be the model\nthat we're going to-- which is the model that we're\ngoing to be sticking with for the rest\nof the semester,",
    "start": "74480",
    "end": "80090"
  },
  {
    "text": "because that's going to\nbe our model, as we're going to argue today, for\na general purpose computer.",
    "start": "80090",
    "end": "86930"
  },
  {
    "text": "So in a sense, everything\nwe've been doing up till now or up until that point has\nbeen kind of a warm up.",
    "start": "86930",
    "end": "92650"
  },
  {
    "text": "But it's been nevertheless\nhas gotten a chance for us to introduce some\nimportant concepts that",
    "start": "92650",
    "end": "98950"
  },
  {
    "text": "are used in practice and also\nwill serve as good examples for us moving forward.",
    "start": "98950",
    "end": "104170"
  },
  {
    "text": "And also just to get kind of\nin a sense on the same page.",
    "start": "104170",
    "end": "113360"
  },
  {
    "text": "So what we're going\nto be doing today is looking at the\nTuring machine model",
    "start": "113360",
    "end": "125060"
  },
  {
    "text": "in a little bit more depth. One can define Turing machines\nin all sorts of different ways.",
    "start": "125060",
    "end": "132410"
  },
  {
    "text": "But it's going to turn\nout not to matter, because all of\nthose different ways are going to be\nequivalent to one another.",
    "start": "132410",
    "end": "138570"
  },
  {
    "text": "And so we are going to stick\nwith the very simplest version, the one we've already\ndefined, namely the simple one",
    "start": "138570",
    "end": "147050"
  },
  {
    "text": "tape Turing machine. But we're going to\nbasically justify that",
    "start": "147050",
    "end": "152870"
  },
  {
    "text": "by looking at some\nof these other models and proving equivalence. So we will look at\nmulti-tape Turing machines,",
    "start": "152870",
    "end": "161010"
  },
  {
    "text": "we'll look at non-deterministic\nTuring machines, and we'll look at another model\nwhich is slightly different but it's still based on Turing\nmachines called an enumerator.",
    "start": "161010",
    "end": "169340"
  },
  {
    "text": "And we'll show that\nthose all in the end give you the same\nclass of languages.",
    "start": "169340",
    "end": "175370"
  },
  {
    "text": "And so in that sense, they're\nall equivalent to one another. And that's going to be-- serve\nas a kind of a motivator, kind",
    "start": "175370",
    "end": "183860"
  },
  {
    "text": "of in a sense recapitulate some\nof the history of the subject, and going to lead to our\ndiscussion of what's called",
    "start": "183860",
    "end": "192620"
  },
  {
    "text": "the Church Turing thesis. So we will get to\nthat in due course.",
    "start": "192620",
    "end": "199620"
  },
  {
    "text": "And we'll also talk about\nsome notation for notations",
    "start": "199620",
    "end": "207769"
  },
  {
    "text": "for Turing machines and\nfor encoding objects to feed into Turing\nmachines as input,",
    "start": "207770",
    "end": "212989"
  },
  {
    "text": "but we'll get to\nthat shortly as well. So let's move on, then.",
    "start": "212990",
    "end": "218420"
  },
  {
    "text": "We will next go into a\nlittle review of what",
    "start": "218420",
    "end": "226220"
  },
  {
    "start": "223000",
    "end": "423000"
  },
  {
    "text": "we did with Turing machines. And just want to make sure\nwe're all together on that. It's a very important\nconcept for us this term.",
    "start": "226220",
    "end": "233519"
  },
  {
    "text": "So the Turing\nmachine model looks like there's going to\nbe this finite control. There's a tape with a head that\ncan read and write on the tape,",
    "start": "233520",
    "end": "241790"
  },
  {
    "text": "can move in both directions. The tape is infinite\nto one side and so on, as I mentioned last time.",
    "start": "241790",
    "end": "247610"
  },
  {
    "text": " The output of the Turing machine\nis either going to be a halt,",
    "start": "247610",
    "end": "253990"
  },
  {
    "text": "accepting or rejecting, or\nloop that the machine may run forever. With three possible outcomes\nfor any particular input.",
    "start": "253990",
    "end": "261519"
  },
  {
    "text": "The machine may accept that\ninput by entering q accept. May halt and reject\nby entering q reject.",
    "start": "261519",
    "end": "268300"
  },
  {
    "text": "And it might reject\nby looping, which means it just never\ngets to the accept state or it never gets\nany halting state.",
    "start": "268300",
    "end": "276070"
  },
  {
    "text": "It just goes forever. But we still consider that\nto be rejecting the input, just it's rejecting by looping.",
    "start": "276070",
    "end": "281620"
  },
  {
    "text": " And as we defined last\ntime, a language is Turing",
    "start": "281620",
    "end": "288730"
  },
  {
    "text": "recognizable, or as\nwe typically write, T recognizable, if it's\nthe language of some Turing",
    "start": "288730",
    "end": "293920"
  },
  {
    "text": "machine, the collection\nof accepted strings from that Turing machine.",
    "start": "293920",
    "end": "299140"
  },
  {
    "text": "Again, just as\nbefore, the machine may accept 0 strings,\none string, many strings,",
    "start": "299140",
    "end": "305380"
  },
  {
    "text": "but it always has one\nlanguage, the collection of all accepted strings.",
    "start": "305380",
    "end": "312010"
  },
  {
    "text": "Now, if you have\na decider, which is a machine that\nnever loops, which always halts on\nevery input, then we",
    "start": "312010",
    "end": "319930"
  },
  {
    "text": "say its language is\na decidable language. So we'll say a language\nis Turing decidable",
    "start": "319930",
    "end": "325810"
  },
  {
    "text": "or simply decidable if it's the\nlanguage of some decider, which",
    "start": "325810",
    "end": "331660"
  },
  {
    "text": "is a Turing machine that\nalways halts on all inputs. So we have those two\ndistinct notions,",
    "start": "331660",
    "end": "338230"
  },
  {
    "text": "Turing recognizable\nlanguages and Turning decidable languages. ",
    "start": "338230",
    "end": "344260"
  },
  {
    "text": "Now, as we're going\nto argue this lecture, Turing machines are going to be\nour model of a general purpose",
    "start": "344260",
    "end": "349900"
  },
  {
    "text": "computer. So that's the way we're\ngoing to think of computers as Turing machines. And why Turing machines?",
    "start": "349900",
    "end": "357720"
  },
  {
    "text": "Why didn't we pick\nsomething else? Well, the fact is,\nit doesn't matter. And that's going to be\nthe point of this lecture.",
    "start": "357720",
    "end": "364290"
  },
  {
    "text": "All reasonable models of\ngeneral purpose computation, unrestricted computation in the\nsense of not limited memory,",
    "start": "364290",
    "end": "375150"
  },
  {
    "text": "are all going to be-- all have been shown,\nall the models",
    "start": "375150",
    "end": "380670"
  },
  {
    "text": "that we've ever\nencountered have all been shown to be\nequivalent to one another. And so you're free to\npick any one you like.",
    "start": "380670",
    "end": "387930"
  },
  {
    "text": "And so for this\ncourse, we're going to pick Turing machines\nbecause they're very simple to argue\nabout mathematically,",
    "start": "387930",
    "end": "394980"
  },
  {
    "text": "and also they have some\nelement of familiarity",
    "start": "394980",
    "end": "400310"
  },
  {
    "text": "in that they feel like-- well, they're more familiar than\nsome of the other models that",
    "start": "400310",
    "end": "409160"
  },
  {
    "text": "have been proposed\nthat are out there, such as rewriting systems,\nlambda calculus, and so on.",
    "start": "409160",
    "end": "416425"
  },
  {
    "text": "Turing machines feel like a\nprimitive kind of computer. And in that sense, they\nhave a certain familiarity.",
    "start": "416425",
    "end": "423070"
  },
  {
    "text": "OK, so let's start\ntalking about variations on the Turing machine model.",
    "start": "423070",
    "end": "429460"
  },
  {
    "text": "And we're going to argue that\nit doesn't make any difference. And then this is\ngoing to be kind",
    "start": "429460",
    "end": "435800"
  },
  {
    "text": "of a precursor to a discussion\nof a bit of the history of the subject that\nwe're gonna get to",
    "start": "435800",
    "end": "440810"
  },
  {
    "text": "in the second half\nof the lecture. So a multi-tape Turing\nmachine is a Turing machine,",
    "start": "440810",
    "end": "447169"
  },
  {
    "text": "as you might imagine,\nthat has more than one-- well, has one or\npossibly more tapes.",
    "start": "447170",
    "end": "452930"
  },
  {
    "text": "And so a single\ntape Turing machine would be a special version of\na multi-tape Turing machine.",
    "start": "452930",
    "end": "458660"
  },
  {
    "text": "That's OK. But you might have\nmore than one tape, as I've shown in this diagram.",
    "start": "458660",
    "end": "465020"
  },
  {
    "text": "Now, how do we actually use\na multi-tape Turing machine? Well, you present the--",
    "start": "465020",
    "end": "470690"
  },
  {
    "text": "and we're going to see these\ncoming up for convenience. Sometimes it's nice to be\nworking with multiple tapes.",
    "start": "470690",
    "end": "476389"
  },
  {
    "text": "So we're going to see these\nlater on in the semester a couple of times as well. But for now, we're\nsetting the model up",
    "start": "476390",
    "end": "484099"
  },
  {
    "text": "so that the input is going to\nbe presented on a special input tape.",
    "start": "484100",
    "end": "489169"
  },
  {
    "text": "So that's where\nthe input appears, and it's going to be followed by\nblanks, just as we had before. And now we have these\npotentially other tapes,",
    "start": "489170",
    "end": "496820"
  },
  {
    "text": "possibly other tapes, which\nwe call them work tapes where the machine can write\nother stuff as it wishes.",
    "start": "496820",
    "end": "505850"
  },
  {
    "text": "And those tapes are going\nto be initially blank. So just all blanks on them.",
    "start": "505850",
    "end": "511690"
  },
  {
    "text": "All of the tapes are going\nto be read and write. So you can write\non the input tape. Obviously you can read\noff on the input tape,",
    "start": "511690",
    "end": "517900"
  },
  {
    "text": "and you can read and write\non the other tapes as well. So what we want to\nfirst establish that",
    "start": "517900",
    "end": "525010"
  },
  {
    "text": "by having these\nadditional tapes, you don't get additional power\nfor the machine in the sense",
    "start": "525010",
    "end": "531430"
  },
  {
    "text": "that you're not going to have-- ",
    "start": "531430",
    "end": "536680"
  },
  {
    "text": "you won't have\nadditional languages that you can recognize\nby virtue of having",
    "start": "536680",
    "end": "543310"
  },
  {
    "text": "these additional tapes. I mean, you can imagine\nthat having more tapes will allow you to\ndo more things.",
    "start": "543310",
    "end": "550630"
  },
  {
    "text": "For example, if you have\na pushdown automaton with two stacks, you\ncan do more languages",
    "start": "550630",
    "end": "558070"
  },
  {
    "text": "than you can with one stack. So it's conceivable that\nby having more tapes, you can do more languages\nthan you could with one tape.",
    "start": "558070",
    "end": "567450"
  },
  {
    "text": "But in fact, that's\nnot the case. One tape is as good\nas having many tapes.",
    "start": "567450",
    "end": "572560"
  },
  {
    "text": "And we're going to prove that. We're going to quickly sketch\nthrough the proof of that fact.",
    "start": "572560",
    "end": "579670"
  },
  {
    "text": "So the theorem is\nthat a language is Turing recognizable.",
    "start": "579670",
    "end": "585240"
  },
  {
    "text": "And when we say Turing\nrecognizable, for now we mean just with one tape. So that's the way\nwe've defined it.",
    "start": "585240",
    "end": "592200"
  },
  {
    "text": "So a language is Turing\nrecognizable if and only if some multi-tape\nTuring machine recognizes",
    "start": "592200",
    "end": "597840"
  },
  {
    "text": "that language. So really another\nway of saying that is",
    "start": "597840",
    "end": "603610"
  },
  {
    "text": "if you have a language that\nyou can do with a single tape, you can do it with a\nmulti-tape and vice versa.",
    "start": "603610",
    "end": "609720"
  },
  {
    "text": "So one direction of\nthat is immediate, because a single tape\nTuring machine is already",
    "start": "609720",
    "end": "615020"
  },
  {
    "text": "a multi-tape Turing machine\nthat just so happens to have one tape. So the forward\ndirection of that is--",
    "start": "615020",
    "end": "623330"
  },
  {
    "text": "there's nothing to say. That's just immediately true.",
    "start": "623330",
    "end": "628440"
  },
  {
    "text": "But if we want to\nprove the reverse, then we're going to\nhave to do some work. And the work is\ngoing to be showing",
    "start": "628440",
    "end": "634160"
  },
  {
    "text": "how do you convert a multi-tape\nTuring machine to a single tape Turing machine.",
    "start": "634160",
    "end": "639350"
  },
  {
    "text": "So if we have something\nthat's recognized by a multi-tape Turing machine,\nit's still Turing recognizable.",
    "start": "639350",
    "end": "644460"
  },
  {
    "text": "And what that means is that you\ncan do it with a single tape Turing machine. So we have to show how\nto do the conversion.",
    "start": "644460",
    "end": "651009"
  },
  {
    "text": "And I'll show you that I\nthink in a convincing way but without getting\ninto too much detail.",
    "start": "651010",
    "end": "658970"
  },
  {
    "text": "So here is an image of a\nmulti-tape Turing machine during the course of its input.",
    "start": "658970",
    "end": "665380"
  },
  {
    "text": "So we've already started it off. Initially it starts off\nwith the other tapes,",
    "start": "665380",
    "end": "672339"
  },
  {
    "text": "the work tapes being all blank. But now it's\nprocessed for a while and the head on\nthe input tape now",
    "start": "672340",
    "end": "679899"
  },
  {
    "text": "has moved off from its starting\nposition at the left end. It's somewhere in the middle. It's written stuff\non the other tapes.",
    "start": "679900",
    "end": "688000"
  },
  {
    "text": "And what we want\nto do is show how to represent that same\ninformation on a single tape",
    "start": "688000",
    "end": "696529"
  },
  {
    "text": "Turing machine in a way which\nallows the single tape Turing machine to carry out the\nsteps of the multi-tape Turing",
    "start": "696530",
    "end": "706250"
  },
  {
    "text": "machine but using only\na single tape by virtue of some kind of a data structure\nwhich allows for the simulation",
    "start": "706250",
    "end": "713330"
  },
  {
    "text": "to go forward. So how is the single tape Turing\nmachine going to be simulating,",
    "start": "713330",
    "end": "721050"
  },
  {
    "text": "going to be carrying out\nthe same effect of having these multiple tapes on the\nmulti-tape Turing machine?",
    "start": "721050",
    "end": "729000"
  },
  {
    "text": "So here's a picture of the\nsingle tape Turing machine. It just has one tape. By the way, I should mention\nthat all of the tapes",
    "start": "729000",
    "end": "735870"
  },
  {
    "text": "are infinite to the right in\nthe multi-tape Turing machine, just as we had for the\nsingle tape Turing machine.",
    "start": "735870",
    "end": "742170"
  },
  {
    "text": "And now with this single\ntape Turing machine, it's going to represent\nthe information that's",
    "start": "742170",
    "end": "749550"
  },
  {
    "text": "present on these multiple tapes\nbut using only the single tape. And the way I'm\nchoosing to do that is going to be\nparticularly simple.",
    "start": "749550",
    "end": "756840"
  },
  {
    "text": "I'm going to just divide up,\nso here I'm saying it in words. It's going to\nsimulate m by storing",
    "start": "756840",
    "end": "763140"
  },
  {
    "text": "the contents of the\nmulti-tape on the single tape in separate blocks. So I'm basically going to\ndivide up the single tape Turing",
    "start": "763140",
    "end": "772740"
  },
  {
    "text": "machines tape into\nseparate regions where each one of those\nregions is going",
    "start": "772740",
    "end": "778920"
  },
  {
    "text": "to have the information\nthat was on one of the tapes in the\nmulti-tape machine.",
    "start": "778920",
    "end": "787339"
  },
  {
    "text": "So for example, on the first\ntape it's got a, a, b, a. Well, that's going\nto appear here",
    "start": "787340",
    "end": "793209"
  },
  {
    "text": "in that first block on the\nsingle tape Turing machine. ",
    "start": "793210",
    "end": "798420"
  },
  {
    "text": "Sort of seeing it\nfloat down to suggest that it's coming from this\nmulti-tape Turing machine. But that's really been\ndeveloped by the simulation",
    "start": "798420",
    "end": "806653"
  },
  {
    "text": "that the single tape\nTuring machine has. Obviously the single\ntape Turing machine doesn't have any direct access\nto the multi-tape machine.",
    "start": "806653",
    "end": "813390"
  },
  {
    "text": "But it's going to be simulating. So this is how we're\nshowing the data is being stored on the\nsingle tape machines tape.",
    "start": "813390",
    "end": "820950"
  },
  {
    "text": "So in the second\nblock, it's going to have the contents of the\nsecond tape of the Turing",
    "start": "820950",
    "end": "826470"
  },
  {
    "text": "multi-tape machine. And the final region\nof the single tapes,",
    "start": "826470",
    "end": "835970"
  },
  {
    "text": "the final block so-called of\nthe single tape's tape is going to have-- the single\ntape machine's tape--",
    "start": "835970",
    "end": "842350"
  },
  {
    "text": "it's going to have the\nrest of the contents of the last tape of m.",
    "start": "842350",
    "end": "849863"
  },
  {
    "text": "And then it's going\nto be followed by the same infinitely many\nblanks that each of these tapes",
    "start": "849863",
    "end": "857520"
  },
  {
    "text": "are going to have\nfollowing the portion that they may have\nwritten during the course",
    "start": "857520",
    "end": "863220"
  },
  {
    "text": "of their computation. So that's what the single\ntape Turing machine's tape",
    "start": "863220",
    "end": "869010"
  },
  {
    "text": "is going to look like during\nthe course of its computation. It's going to have the\ninformation represented in these blocks.",
    "start": "869010",
    "end": "875550"
  },
  {
    "text": "Capturing all of the information\nthat the multi-tape Turing machine has in a perhaps\nsomewhat less convenient way,",
    "start": "875550",
    "end": "881100"
  },
  {
    "text": "because the multi-tape\nTuring machine, we didn't really\nmake this explicit. And in part because it\ndoesn't really matter,",
    "start": "881100",
    "end": "887230"
  },
  {
    "text": "we didn't say exactly how the\nmulti tape machine operates. What I have in mind is that\nthe multi-tape Turing machine",
    "start": "887230",
    "end": "892860"
  },
  {
    "text": "can read and move\nall of its heads from all of its\nheads in one step.",
    "start": "892860",
    "end": "900620"
  },
  {
    "text": "So in a single step of\nthe multi-tape machine, it can obtain the\ninformation that's underneath each of\nits heads, feed that",
    "start": "900620",
    "end": "908320"
  },
  {
    "text": "in through its\ntransition function, and then together with the\nstate of the multi-tape machine",
    "start": "908320",
    "end": "913340"
  },
  {
    "text": "decide how to change\neach of those locations and then how to move\neach one of those heads.",
    "start": "913340",
    "end": "919058"
  },
  {
    "text": "So it's kind of operating on\nall of the tapes in parallel. ",
    "start": "919058",
    "end": "924860"
  },
  {
    "text": "So now how does the actual\nsteps of the simulation of the single tape--",
    "start": "924860",
    "end": "931610"
  },
  {
    "text": "by the single tape\nmachine, how does it go? So first of all, besides\nstoring the contents",
    "start": "931610",
    "end": "942270"
  },
  {
    "text": "of each of the tapes\nin S's single tape,",
    "start": "942270",
    "end": "948312"
  },
  {
    "text": "there's some\nadditional information that it needs to record. Namely, M has a head for\neach one of its tapes.",
    "start": "948312",
    "end": "960690"
  },
  {
    "text": "But S has just a single head. And each of M's heads could\nbe in some different location.",
    "start": "960690",
    "end": "966960"
  },
  {
    "text": "In this case, as I've shown\nit, on the first tape, its head is in location three.",
    "start": "966960",
    "end": "972540"
  },
  {
    "text": "On the second tape,\nit's in location two. On the third tape, it's on\nlocation-- on the last tape, it's in location one.",
    "start": "972540",
    "end": "979080"
  },
  {
    "text": "So where were we? We were simulating the\nmulti-tape Turing machine",
    "start": "979080",
    "end": "984210"
  },
  {
    "text": "with the single\ntape Turing machine. And we had to keep track\nof where the heads are.",
    "start": "984210",
    "end": "990412"
  },
  {
    "text": "And so we're going\nto do that by writing the locations on those blocks.",
    "start": "990413",
    "end": "996130"
  },
  {
    "text": "So we're going to have a\nspecial dot, as I've shown here,",
    "start": "996130",
    "end": "1003040"
  },
  {
    "text": "to represent the location of the\nhead in that very first block. So the head's on the b.",
    "start": "1003040",
    "end": "1008649"
  },
  {
    "text": "I'm going to dot the b. And I'm going to do the\nsame thing for the locations of the other heads.",
    "start": "1008650",
    "end": "1017450"
  },
  {
    "text": "And how am I\ngetting that effect? Well, we've seen\nsomething like that before, where we just expand\nthe tape alphabet of S",
    "start": "1017450",
    "end": "1026000"
  },
  {
    "text": "to allow for these\ndotted symbols as well as the irregular symbols.",
    "start": "1026000",
    "end": "1031579"
  },
  {
    "text": "We also have expanded it to\ninclude the delimiter markers that separate the\nblocks from one another, which I'm\nwriting as a pound sign.",
    "start": "1031579",
    "end": "1038849"
  },
  {
    "text": "So we can just get\nthat effect simply by expanding the\ntape alphabet of S.",
    "start": "1038849",
    "end": "1044939"
  },
  {
    "text": "A few more details of S that\nare just worth looking at, just to make sure we're\nkind of all understanding",
    "start": "1044940",
    "end": "1050630"
  },
  {
    "text": "what's happening. So for every time\nM takes one step,",
    "start": "1050630",
    "end": "1057170"
  },
  {
    "text": "S has actually a\nlot of work to do. Because one step of M can\nread and move all of those",
    "start": "1057170",
    "end": "1063020"
  },
  {
    "text": "heads all at one shot. S has to scan the\nentire tape to see",
    "start": "1063020",
    "end": "1070910"
  },
  {
    "text": "what's underneath those in\neffect virtual heads, which are the locations of\nthe dotted symbols.",
    "start": "1070910",
    "end": "1077540"
  },
  {
    "text": "It has to see what's underneath\neach one of those heads",
    "start": "1077540",
    "end": "1082860"
  },
  {
    "text": "to see how to update its\nstate to the next state. And then it has to scan\nagain to change the location,",
    "start": "1082860",
    "end": "1094590"
  },
  {
    "text": "change the contents of\nthose tape locations, and also to move the head left\nor right by effectively now",
    "start": "1094590",
    "end": "1100890"
  },
  {
    "text": "moving the dot left or right. So that's pretty\nstraightforward. ",
    "start": "1100890",
    "end": "1107190"
  },
  {
    "text": "There's one complication\nthat can occur, however, which is that what happens if\non one of the tapes, let's say,",
    "start": "1107190",
    "end": "1118680"
  },
  {
    "text": "M starts writing\nmore content than you",
    "start": "1118680",
    "end": "1124770"
  },
  {
    "text": "have room in that block\nto store that information?",
    "start": "1124770",
    "end": "1131280"
  },
  {
    "text": "So if M, it has\n1, 0, 1, suppose M after a few steps moves its\nhead into the originally",
    "start": "1131280",
    "end": "1139050"
  },
  {
    "text": "blank portion of the tape and\nwrites another symbol there. We have to put that\nsymbol somewhere, because we have to record\nall that information.",
    "start": "1139050",
    "end": "1145320"
  },
  {
    "text": "And the block is full. So what do we do? Well, in that case, S goes\nto a little interrupt routine",
    "start": "1145320",
    "end": "1153120"
  },
  {
    "text": "and moves, shifts all of the\nsymbols to the right one place",
    "start": "1153120",
    "end": "1162660"
  },
  {
    "text": "to open up a location here\nwhere it can write a new symbol",
    "start": "1162660",
    "end": "1167790"
  },
  {
    "text": "for continuing the simulation.",
    "start": "1167790",
    "end": "1173260"
  },
  {
    "text": "So with that in mind, S can\nmaintain the current contents",
    "start": "1173260",
    "end": "1179500"
  },
  {
    "text": "of each of of M's tapes. And let me just note that here. Shift to add room is needed.",
    "start": "1179500",
    "end": "1186510"
  },
  {
    "text": "And that's all that\nhappens during the course of the simulation. And of course, if S\nas it's simulating M",
    "start": "1186510",
    "end": "1196320"
  },
  {
    "text": "observes that M comes to\nan accept or reject state, S should do the same.",
    "start": "1196320",
    "end": "1203260"
  },
  {
    "text": "So that's our description\nof how the single tape simulation of the\nmulti-tape machine works.",
    "start": "1203260",
    "end": "1211850"
  },
  {
    "start": "1210000",
    "end": "1825000"
  },
  {
    "text": "Let's turn to\nnon-deterministic machines. Now, if you remember\nfor finite, and I",
    "start": "1211850",
    "end": "1217840"
  },
  {
    "text": "hope you do, for\nfinite automata, we had equivalence between\nnon-deterministic and deterministic.",
    "start": "1217840",
    "end": "1225310"
  },
  {
    "text": "Finite automata. For pushdown automata, we\ndid not have the equivalence. We didn't prove that, but\nwe just stated it as a fact.",
    "start": "1225310",
    "end": "1232299"
  },
  {
    "text": "There are certain\nlanguages that you can do with non-deterministic\npushdown automata, which is the model we typically\nhold as our standard.",
    "start": "1232300",
    "end": "1238929"
  },
  {
    "text": "So that some things you can do\nwith non-deterministic automata that you cannot do with\ndeterministic pushdown",
    "start": "1238930",
    "end": "1244419"
  },
  {
    "text": "automata. You really need the\nnon-determinism. They're not equivalent. For Turing machines, we're going\nto get the equivalence back.",
    "start": "1244420",
    "end": "1254049"
  },
  {
    "text": "So we'll show that\nanything you can do with a non-deterministic\nTuring machine in terms of language recognition,\nyou can also",
    "start": "1254050",
    "end": "1260409"
  },
  {
    "text": "do with a deterministic\nTuring machine. So remember, we kind of\nmentioned this briefly last time, the\nnon-deterministic Turing machine",
    "start": "1260410",
    "end": "1267430"
  },
  {
    "text": "looks exactly like a\ndeterministic Turing machine except for the\ntransition function where we have this\npower set, which",
    "start": "1267430",
    "end": "1273669"
  },
  {
    "text": "allows for multiple\ndifferent outcomes at a given step instead of just\na single outcome",
    "start": "1273670",
    "end": "1279789"
  },
  {
    "text": "that you would have in\na deterministic machine. So we represent that\nwith this power set here",
    "start": "1279790",
    "end": "1287200"
  },
  {
    "text": "applied to the possibilities\nthat the machine would have as the next step.",
    "start": "1287200",
    "end": "1293799"
  },
  {
    "text": " So now we're going to prove\na very similar theorem, that A is Turing recognizable\nby an ordinary one tape Turing",
    "start": "1293800",
    "end": "1302300"
  },
  {
    "text": "machine. That kind of goes\nwithout saying, since that's how we defined it. It's Turing\nrecognizable if and only",
    "start": "1302300",
    "end": "1307420"
  },
  {
    "text": "of some non-deterministic\nTuring machine recognizes the language. ",
    "start": "1307420",
    "end": "1313870"
  },
  {
    "text": "Again, remember we're\nusing non-determinism in the way we always do. Namely that a\nnon-deterministic machine",
    "start": "1313870",
    "end": "1320590"
  },
  {
    "text": "accepts if there is some\nbranch or some thread of its computation\nends up at an accept.",
    "start": "1320590",
    "end": "1326350"
  },
  {
    "text": "Other branches might go forever\nor might reject part of the way through.",
    "start": "1326350",
    "end": "1332800"
  },
  {
    "text": "But acceptance always overrules\nthen if any branch accepts. That's how non-determinism\nworks for us.",
    "start": "1332800",
    "end": "1339370"
  },
  {
    "text": "So now the forward\ndirection of this is, again, just like\nbefore, immediate",
    "start": "1339370",
    "end": "1345320"
  },
  {
    "text": "because a deterministic\nTuring machine is a special kind of\nnon-deterministic Turing machine which never branches\nnon-deterministically",
    "start": "1345320",
    "end": "1353150"
  },
  {
    "text": "on any of its steps. So that forward\ndirection is immediate.",
    "start": "1353150",
    "end": "1358164"
  },
  {
    "text": "The backwards\ndefinition is where we're going to have to\ndo some work converting our non-deterministic\nTuring machine",
    "start": "1358165",
    "end": "1363410"
  },
  {
    "text": "to a deterministic\nTuring machine. And we'll do so as follows. We'll take a non-deterministic\nTuring machine.",
    "start": "1363410",
    "end": "1369260"
  },
  {
    "text": "Here is our picture. And we're going to now\nimagine its computation",
    "start": "1369260",
    "end": "1374570"
  },
  {
    "text": "in terms of a tree. And so here is the\nnon-deterministic computation",
    "start": "1374570",
    "end": "1380090"
  },
  {
    "text": "tree for n on some input w. So n for non-deterministic.",
    "start": "1380090",
    "end": "1386880"
  },
  {
    "text": "Here is the tree. Somewhere down here it\nmight end up accepting. And as I mentioned,\nthat is going",
    "start": "1386880",
    "end": "1393480"
  },
  {
    "text": "to be defining the\noverall computation to be accepting if there is some\nplace here that's accepting.",
    "start": "1393480",
    "end": "1401070"
  },
  {
    "text": "And the only way it can be\nnon-accepting computation if there is no accept\nthat occurs anywhere.",
    "start": "1401070",
    "end": "1408620"
  },
  {
    "text": "And somehow if you're\ngoing to convert this non-deterministic machine\nto a deterministic machine, the deterministic\nmachine is going",
    "start": "1408620",
    "end": "1415430"
  },
  {
    "text": "to have to get that same effect.  It doesn't have the\nnon-determinism.",
    "start": "1415430",
    "end": "1421470"
  },
  {
    "text": "So how does it manage that? Well, it's really going to be\ncarrying out the simulation",
    "start": "1421470",
    "end": "1427340"
  },
  {
    "text": "kind of as you would imagine\ndoing it yourself if you were",
    "start": "1427340",
    "end": "1432409"
  },
  {
    "text": "told you had to simulate\na non-deterministic Turing machine, which is\nyou're going to search that tree of\npossibilities looking",
    "start": "1432410",
    "end": "1439790"
  },
  {
    "text": "to see if you find and accept. If you do, then you accept. If you don't, well,\nmaybe you'll go forever",
    "start": "1439790",
    "end": "1445669"
  },
  {
    "text": "or maybe you'll manage to\nsearch the entire tree, and then you will say, no,\nI accept, no, I reject.",
    "start": "1445670",
    "end": "1455420"
  },
  {
    "text": "So let's just see,\nagain, what the data structure of that\ndeterministic machine's tape",
    "start": "1455420",
    "end": "1460490"
  },
  {
    "text": "is going to look like. So the way this simulation\nis going to carry out,",
    "start": "1460490",
    "end": "1466270"
  },
  {
    "text": "and you could program this\nin a host of different ways. And in fact, the textbook has a\nsomewhat different simulation.",
    "start": "1466270",
    "end": "1472490"
  },
  {
    "text": "But I think this one here lends\nitself a little bit better and maybe it's a little\nsimpler for description",
    "start": "1472490",
    "end": "1479750"
  },
  {
    "text": "in this setting. But there's lots of different\nways of improving these things.",
    "start": "1479750",
    "end": "1486350"
  },
  {
    "text": "So m is going to simulate\nn kind of a little bit similar to the\nprevious simulation.",
    "start": "1486350",
    "end": "1493580"
  },
  {
    "text": "It's going to break the\ntape up into blocks, and it's going to now\nstore in each block",
    "start": "1493580",
    "end": "1502480"
  },
  {
    "text": "a different thread at a\nparticular point in time of n's computation.",
    "start": "1502480",
    "end": "1509750"
  },
  {
    "text": "So you imagine where m\nis going to be simulating n sort of doing the\nsame parallelism",
    "start": "1509750",
    "end": "1520480"
  },
  {
    "text": "but getting the effect\nof the parallelism not through the non-determinism\nbut by maintaining copies",
    "start": "1520480",
    "end": "1528640"
  },
  {
    "text": "of each of the\nthreads on its tape and then updating\nthem accordingly.",
    "start": "1528640",
    "end": "1534790"
  },
  {
    "text": "So the idea is, I think,\nnot too complicated. So let's just see some\nof the details here.",
    "start": "1534790",
    "end": "1541940"
  },
  {
    "text": "So here populating those\nblocks with the contents of n's",
    "start": "1541940",
    "end": "1548259"
  },
  {
    "text": "tape on different threads. Maybe that corresponds\nto n's tape",
    "start": "1548260",
    "end": "1556360"
  },
  {
    "text": "after the fifth step of n\non each of those threads.",
    "start": "1556360",
    "end": "1561760"
  },
  {
    "text": "You have these three\npossibilities, let's say, written down as three\ndifferent blocks. ",
    "start": "1561760",
    "end": "1569890"
  },
  {
    "text": "Now, remember in the case of\nthe multi-tape simulation,",
    "start": "1569890",
    "end": "1575170"
  },
  {
    "text": "we needed to record\nsome extra information. In particular, we had to record\nthe location of the heads",
    "start": "1575170",
    "end": "1582790"
  },
  {
    "text": "by using those dotted symbols. We're going to do that\nagain because each one of these threads\nmight have their head",
    "start": "1582790",
    "end": "1587890"
  },
  {
    "text": "in some different location. But we're going to\nhave to do more. So let's do one thing at a time.",
    "start": "1587890",
    "end": "1593320"
  },
  {
    "text": "We're going to store\nthe head location. Here they are all written\ndown as dotted symbols.",
    "start": "1593320",
    "end": "1600220"
  },
  {
    "text": "But now there's something\nthat goes further. Because in a multi-tape case,\nthere was one global state",
    "start": "1600220",
    "end": "1609930"
  },
  {
    "text": "that the multi-tape\nmachine was in, of course, at any given time. It's just that one has\none finite control.",
    "start": "1609930",
    "end": "1615179"
  },
  {
    "text": "It's in one state.  But in the case of the\nnon-deterministic machine",
    "start": "1615180",
    "end": "1622500"
  },
  {
    "text": "that we're simulating\nnow, each thread can be in a different state. ",
    "start": "1622500",
    "end": "1629590"
  },
  {
    "text": "So whereas before,\nwe could keep track of the multi-tape machine's\nstate inside the single tape",
    "start": "1629590",
    "end": "1636960"
  },
  {
    "text": "machine's finite control. Now there could be many,\nmany different states to keep track of.",
    "start": "1636960",
    "end": "1642779"
  },
  {
    "text": "So you won't be able to store\nthat in a finite control anymore, because there could\nbe some huge number of threads active at any given stage.",
    "start": "1642780",
    "end": "1648833"
  },
  {
    "text": "And some of them\ncan be one state. Others can be in\ndifferent state. And how do you keep\ntrack of all that? So we're going to\nhave to use the tape.",
    "start": "1648833",
    "end": "1655320"
  },
  {
    "text": "We're going to actually write\ndown which state a given thread is in on that block.",
    "start": "1655320",
    "end": "1661770"
  },
  {
    "text": "And we'll do that. I'll show it like this. So writing down the state\nof each thread in the block",
    "start": "1661770",
    "end": "1668700"
  },
  {
    "text": "by writing down symbols which\ncorrespond to those states.",
    "start": "1668700",
    "end": "1676179"
  },
  {
    "text": "So we're actually in a sense\nwriting the states down right on top of the block\nusing symbols that correspond to those states.",
    "start": "1676180",
    "end": "1681980"
  },
  {
    "text": "So again, we're\ngetting that effect by increasing the\ntape alphabet of M",
    "start": "1681980",
    "end": "1688360"
  },
  {
    "text": "to include symbols\nthat correspond to each of its states.",
    "start": "1688360",
    "end": "1695066"
  },
  {
    "text": "And we're going to write\nthose symbols down. So here's the\nsymbol for state q8 that says, well, that very\nfirst thread of n's computation",
    "start": "1695067",
    "end": "1703440"
  },
  {
    "text": "is in state q8. It's in this third\nposition on its tape.",
    "start": "1703440",
    "end": "1710100"
  },
  {
    "text": "The head is on the\nthird position there. And the tape contents\nis a, a, b, a. That's how we represent that\nthread of the computation",
    "start": "1710100",
    "end": "1719100"
  },
  {
    "text": "including the state. ",
    "start": "1719100",
    "end": "1724450"
  },
  {
    "text": "So M is going to carry out\nthat step by step maintaining that information on its tape.",
    "start": "1724450",
    "end": "1730780"
  },
  {
    "text": "Again, similar to\nbefore, there might be some special\nsituations arising. So for example, n is\nnon-deterministic.",
    "start": "1730780",
    "end": "1737590"
  },
  {
    "text": "So a thread might\nfork into two threads.",
    "start": "1737590",
    "end": "1742900"
  },
  {
    "text": "What do we do then? Well, sort of the\nreasonable thing.",
    "start": "1742900",
    "end": "1748570"
  },
  {
    "text": "If there's a forking\nthread, M then copies that block, makes\ntwo copies of the block",
    "start": "1748570",
    "end": "1755090"
  },
  {
    "text": "to correspond, or however\nmany copies you need, to correspond to\nthe possibilities",
    "start": "1755090",
    "end": "1761200"
  },
  {
    "text": "that that thread\nis branching into. So you want to represent\nthem all on different blocks",
    "start": "1761200",
    "end": "1766840"
  },
  {
    "text": "of M's tape. All right? And then if M ever finds out\nthat on one of the threads",
    "start": "1766840",
    "end": "1774670"
  },
  {
    "text": "it's entering the\naccept state, it can just shut down the whole\ncomputation at that point and say accept.",
    "start": "1774670",
    "end": "1780055"
  },
  {
    "text": " So perhaps a little elaborate,\nbut I think conceptually,",
    "start": "1780055",
    "end": "1787550"
  },
  {
    "text": "hopefully, not too bad. Now, let's move on then\nto talk about somewhat",
    "start": "1787550",
    "end": "1799730"
  },
  {
    "text": "of a different looking-- well, sort of a different\nmodel, in a way, which",
    "start": "1799730",
    "end": "1805850"
  },
  {
    "text": "has some historical significance\nand sometimes is a helpful way to look at Turing\nrecognizability.",
    "start": "1805850",
    "end": "1811940"
  },
  {
    "text": "And incidentally, you\nhave a homework problem on this model called\nan enumerator or Turing",
    "start": "1811940",
    "end": "1820310"
  },
  {
    "text": "enumerator. So here it's going to\noperate somewhat differently.",
    "start": "1820310",
    "end": "1830310"
  },
  {
    "start": "1825000",
    "end": "1960000"
  },
  {
    "text": "First of all, we're going to\nenhance the Turing machine model. It's going to now have\njust a single tape.",
    "start": "1830310",
    "end": "1835490"
  },
  {
    "text": "But it's going to\nalso have a printer.  So we're now adding\nin this new device",
    "start": "1835490",
    "end": "1844080"
  },
  {
    "text": "into the Turing machine\ncalled a printer. And the Turing machine\nhas tape as before,",
    "start": "1844080",
    "end": "1854820"
  },
  {
    "text": "except we never provide\nany input to the machine. The tape always starts\nout fully blank.",
    "start": "1854820",
    "end": "1862160"
  },
  {
    "text": "It's only used for\nreading and writing. Only used for work.",
    "start": "1862160",
    "end": "1870650"
  },
  {
    "text": "It's not where you\npresent the input. So how do you talk about\nthe language of the machine? Well, the way you work\nthis machine is you",
    "start": "1870650",
    "end": "1877700"
  },
  {
    "text": "take this enumerator. It's a deterministic Turing\nmachine with a printer, as I mentioned. You started off in blank tape.",
    "start": "1877700",
    "end": "1884150"
  },
  {
    "text": "And it runs and runs and\nruns and periodically it can print a string under some\nsort of program control, which",
    "start": "1884150",
    "end": "1892692"
  },
  {
    "text": "I'm not going to\nspell out for you. But you can imagine\nyou might have to define the\nmachine in such a way",
    "start": "1892692",
    "end": "1898010"
  },
  {
    "text": "that when it goes into\na certain print state, we're not going to set\nthat all up, then whatever",
    "start": "1898010",
    "end": "1903289"
  },
  {
    "text": "string is in a certain\nregion of the tape maybe from the start point up\ninto the head location, that",
    "start": "1903290",
    "end": "1909710"
  },
  {
    "text": "gets printed out on the printer. And then it can print out\nother strings in due course.",
    "start": "1909710",
    "end": "1917010"
  },
  {
    "text": "And so periodically, you\nthink of this printer as printing out a string under\nthe control of the Turing",
    "start": "1917010",
    "end": "1927200"
  },
  {
    "text": "machine enumerator. And so these print strings,\nthese strings that could",
    "start": "1927200",
    "end": "1932809"
  },
  {
    "text": "print out w1, w2, they appear. And the machine might\npossibly go forever and print",
    "start": "1932810",
    "end": "1940910"
  },
  {
    "text": "infinitely many strings. Or it might go forever and only\nprint finitely many strings.",
    "start": "1940910",
    "end": "1946700"
  },
  {
    "text": "Or it might stop after a while\nby entering a halting state. Accepting or rejecting\nis irrelevant,",
    "start": "1946700",
    "end": "1951800"
  },
  {
    "text": "but it enters a halting state. And then the strings\nthat it's print out, the finitely many\nstrings it printed out,",
    "start": "1951800",
    "end": "1958940"
  },
  {
    "text": "that's the output\nof the machine. Now, the language of the\nmachine is the collection of all strings that\nit ever prints out.",
    "start": "1958940",
    "end": "1966020"
  },
  {
    "start": "1960000",
    "end": "2257000"
  },
  {
    "text": " So we're defining language in\na somewhat different way here.",
    "start": "1966020",
    "end": "1972240"
  },
  {
    "text": "It's not the strings\nthat it accepts. It's the strings that it prints.",
    "start": "1972240",
    "end": "1977580"
  },
  {
    "text": "So we think of this\nmachine almost a little bit analogous to the\nregular expression or the grammar in the sense\nthat it's a generative model.",
    "start": "1977580",
    "end": "1985620"
  },
  {
    "text": "It produces the language\nrather than accepts the strings in the language. ",
    "start": "1985620",
    "end": "1993490"
  },
  {
    "text": "It's not really a recognizer. It's a generator. And the language of the\nmachine, as writing over here,",
    "start": "1993490",
    "end": "1998950"
  },
  {
    "text": "for an enumerator here, we say\nits language is a collection of strings that it prints. ",
    "start": "1998950",
    "end": "2006390"
  },
  {
    "text": "Now we will show that a\nlanguage is Turing recognizable in the previous sense recognized\nby some ordinary Turing",
    "start": "2006390",
    "end": "2014760"
  },
  {
    "text": "machine if and only if it's the\nlanguage of some enumerator. And actually this is\nkind of a little bit",
    "start": "2014760",
    "end": "2021140"
  },
  {
    "text": "of an interesting proof. You have to do some work. It's an if only if. Now neither direction\nis immediate.",
    "start": "2021140",
    "end": "2026630"
  },
  {
    "text": "You're going to have to do\nsome work in both directions. One direction is a little\nharder than the other. We'll start off with\nthe easier direction.",
    "start": "2026630",
    "end": "2033500"
  },
  {
    "text": "Let's say we have an enumerator. ",
    "start": "2033500",
    "end": "2038620"
  },
  {
    "text": "Hopefully you got this\nconcept of this Turing machine which periodically prints\nstrings when you started it off",
    "start": "2038620",
    "end": "2045040"
  },
  {
    "text": "on the empty tape.  So now what I'm going\nto construct for you",
    "start": "2045040",
    "end": "2052908"
  },
  {
    "text": "is that Turing\nmachine recognizer defined from the enumerator.",
    "start": "2052909",
    "end": "2060260"
  },
  {
    "text": "So this recognizer is going to\nbe simulating the enumerator. So basically that recognizer is\ngoing to launch the enumerator.",
    "start": "2060260",
    "end": "2070350"
  },
  {
    "text": "It's going to start\noff simulating it. Now, if you want,\nif it's convenient,",
    "start": "2070350",
    "end": "2076280"
  },
  {
    "text": "we could use several tapes. We can use one tape to\nsimulate the recognizer and you have other tapes\navailable for convenience",
    "start": "2076280",
    "end": "2083149"
  },
  {
    "text": "if you want, because\nwe already showed multi-tape and single\ntape are equivalent. So if you want, you can think\nof M as having multiple tapes.",
    "start": "2083150",
    "end": "2089530"
  },
  {
    "text": "It's not going to really be that\nrelevant to my conversation. But you're going to simulate\nE starting on the blank input,",
    "start": "2089530",
    "end": "2096679"
  },
  {
    "text": "as you're supposed to. And then you're going to\nsee whenever E prints in x,",
    "start": "2096679",
    "end": "2101780"
  },
  {
    "text": "you're going to see\nif x is the same as the input to the recognizer.",
    "start": "2101780",
    "end": "2107890"
  },
  {
    "text": "You get the idea? So we have a recognizer. It has an input string,\nmaybe like 1, 1, 0, 1.",
    "start": "2107890",
    "end": "2114760"
  },
  {
    "text": "And I want to know. I want to accept that string\nif it's one of the strings that the enumerator E\nprints out, because that's",
    "start": "2114760",
    "end": "2122650"
  },
  {
    "text": "what the recognizer do. It's supposed to\naccept all the strings that the enumerator prints out. So I got this 1, 1, 0, 1.",
    "start": "2122650",
    "end": "2128575"
  },
  {
    "text": "What do I do? I fire up that numerator,\nI get it going, and I start watching the\nstrings it prints out,",
    "start": "2128575",
    "end": "2135340"
  },
  {
    "text": "comparing them with my\ninput string, 1, 1, 0, 1. If I ever see it print\nout a 1, 1, 0, 1, great.",
    "start": "2135340",
    "end": "2144140"
  },
  {
    "text": "I know I can accept,\nbecause I know it's in the enumerator's language. But if I compare and\ncompare and compare,",
    "start": "2144140",
    "end": "2150470"
  },
  {
    "text": "I never see the enumerator\never printing out my input string 1, 1, 0, 1.",
    "start": "2150470",
    "end": "2157550"
  },
  {
    "text": "Well, I just keep simulating. If E halts, well then\nI can halt and reject if I've never seen that string\ncoming out as an output.",
    "start": "2157550",
    "end": "2166130"
  },
  {
    "text": "If E doesn't halt, well, I'm\njust not going to halt either. I'm going to go forever. But then I'm going to be\nrejecting my input by looping.",
    "start": "2166130",
    "end": "2174740"
  },
  {
    "text": "So that's the\nproof of converting in this backward direction,\nwhich is the easier direction.",
    "start": "2174740",
    "end": "2180643"
  },
  {
    "text": "Now let's look at the\nforward direction, which has a certain\nwrinkle in it that we're going to have to get to.",
    "start": "2180643",
    "end": "2187119"
  },
  {
    "text": "So now we're going to be\nbuilding our enumerator to simulate our recognizer.",
    "start": "2187120",
    "end": "2192280"
  },
  {
    "text": "And the way we'll do\nthat is the enumerator has to print out\nall of the strings",
    "start": "2192280",
    "end": "2199819"
  },
  {
    "text": "that the recognizer\nwould ever accept. ",
    "start": "2199820",
    "end": "2205060"
  },
  {
    "text": "So you kind of do\nthe obvious thing. You're going to take-- the enumerator is going to\nstart simulating the recognizer",
    "start": "2205060",
    "end": "2213160"
  },
  {
    "text": "M on all possible strings. Sort of one by one, doing them\nin parallel, taking turns.",
    "start": "2213160",
    "end": "2221650"
  },
  {
    "text": "Maybe we didn't make\nthis so explicit. But you can sort of timeshare\namong several different",
    "start": "2221650",
    "end": "2227410"
  },
  {
    "text": "possibilities. Sort of like having different\nblocks for the machine. ",
    "start": "2227410",
    "end": "2235870"
  },
  {
    "text": "The enumerator is going\nto run the recognizer on--",
    "start": "2235870",
    "end": "2241360"
  },
  {
    "text": "well, let's just say it\ndoes it sequentially. It runs it on the empty string. It runs it on the string 0.",
    "start": "2241360",
    "end": "2246640"
  },
  {
    "text": "It runs it on the string one. Runs it on the string 0, 0. These are all the possible\nstrings of sigma star.",
    "start": "2246640",
    "end": "2252700"
  },
  {
    "text": "You run on all of them. And whenever the enumerator--",
    "start": "2252700",
    "end": "2259390"
  },
  {
    "text": " uh oh.",
    "start": "2259390",
    "end": "2264789"
  },
  {
    "text": "This is wrong. ",
    "start": "2264790",
    "end": "2273809"
  },
  {
    "text": "So whenever M\naccepts, then print--",
    "start": "2273810",
    "end": "2285310"
  },
  {
    "text": "I can't write very well. Print w, wi.",
    "start": "2285310",
    "end": "2294385"
  },
  {
    "text": "Oops.  OK.",
    "start": "2294385",
    "end": "2299930"
  },
  {
    "text": "So I'm going to just\nsay it in words. I'm want to simulate\nM on each wi.",
    "start": "2299930",
    "end": "2305300"
  },
  {
    "text": "Whenever you notice M accepting\nwi, you just print out wi. ",
    "start": "2305300",
    "end": "2313579"
  },
  {
    "text": "Because you want to print\nout all of the strings that M accepts. Now, there is a problem here.",
    "start": "2313580",
    "end": "2321150"
  },
  {
    "text": "So hopefully you're not\nconfused by this typo. ",
    "start": "2321150",
    "end": "2326640"
  },
  {
    "text": "Doing it sequentially\nlike I just described doesn't quite work. So let me just\nback that up here.",
    "start": "2326640",
    "end": "2332390"
  },
  {
    "text": "Doing it sequentially\ndoesn't quite work, because M might get stuck\nlooping on one of the wi's.",
    "start": "2332390",
    "end": "2340140"
  },
  {
    "text": "Like maybe when I feed 0\ninto M, M goes forever.",
    "start": "2340140",
    "end": "2347549"
  },
  {
    "text": "Because M is rejecting\n0 by looping. But maybe it also\naccepts this next string",
    "start": "2347550",
    "end": "2352950"
  },
  {
    "text": "in the list, the string one. I'll never get to one by just\nfeeding the strings into M one",
    "start": "2352950",
    "end": "2359070"
  },
  {
    "text": "by one like this. What I really have to do\nis run all of the strings in M in parallel.",
    "start": "2359070",
    "end": "2366390"
  },
  {
    "text": "And the way I'm\ngoing to indicate that is I want to simulate\nM on w1 to wi for i steps",
    "start": "2366390",
    "end": "2373829"
  },
  {
    "text": "for each possible i. So I'm going to run M on more\nand more strings for more",
    "start": "2373830",
    "end": "2382990"
  },
  {
    "text": "and more steps.  And every time I notice\nthat M accepts something,",
    "start": "2382990",
    "end": "2389870"
  },
  {
    "text": "I print it out. ",
    "start": "2389870",
    "end": "2397869"
  },
  {
    "text": "So I will fix this in\nthe version of the file",
    "start": "2397870",
    "end": "2402910"
  },
  {
    "text": "that I publish on the website. So if you're still not getting\nit, you can look there.",
    "start": "2402910",
    "end": "2411490"
  },
  {
    "text": "But just to make\nthings even worse, I have a check in, which is\ngoing to be about this one little point here.",
    "start": "2411490",
    "end": "2417766"
  },
  {
    "text": "So I got a question. Where do we get the wi strings? The wi strings are\nsimply the list of all strings in sigma star.",
    "start": "2417767",
    "end": "2425180"
  },
  {
    "text": "So under program\ncontrol, we can make M go",
    "start": "2425180",
    "end": "2431960"
  },
  {
    "text": "through every possible string. Like if you had an\nodometer, you're going to first get\nto the empty string. Then you go to the string\n0, then the string one.",
    "start": "2431960",
    "end": "2439069"
  },
  {
    "text": "You can write a program\nwhich is going to do that. And the Turing\nmachine can similarly write code to do that, to get\nto each possible string one",
    "start": "2439070",
    "end": "2448310"
  },
  {
    "text": "by one. And then that's what\nthe enumerator is doing. It's obtaining each\nof those strings",
    "start": "2448310",
    "end": "2453740"
  },
  {
    "text": "and then feeding them into\nM, seeing what M does. What I'm trying\nto get at here is",
    "start": "2453740",
    "end": "2459590"
  },
  {
    "text": "that it's not good to\nfeed them in, run M to completion on each one\nbefore going to the next one.",
    "start": "2459590",
    "end": "2466070"
  },
  {
    "text": "You really kind of have\nto do them all in parallel to avoid the problem of\ngetting stuck on one string",
    "start": "2466070",
    "end": "2474680"
  },
  {
    "text": "that M is looping on. All right. So this is relevant to\nyour homework, in fact.",
    "start": "2474680",
    "end": "2482789"
  },
  {
    "text": "If I convert em to an\nenumerator in this way,",
    "start": "2482790",
    "end": "2487970"
  },
  {
    "text": "does that enumerator always\nprint the strings out in string order. String order is this order here.",
    "start": "2487970",
    "end": "2493725"
  },
  {
    "text": " Having the shorter\nstrings coming up",
    "start": "2493725",
    "end": "2499140"
  },
  {
    "text": "before the longer strings\nand within strings of a certain length, just doing\nthem in lexicographical order. ",
    "start": "2499140",
    "end": "2508000"
  },
  {
    "text": "So hopefully you follow that. But since these are not correct,\nthis doesn't matter for us.",
    "start": "2508000",
    "end": "2516600"
  },
  {
    "text": "Let me launch that poll. I'll see how random\nthe answer is here. ",
    "start": "2516600",
    "end": "2525980"
  },
  {
    "text": "So a fair amount of confusion. If you're confused, obviously\nyou're in good company there.",
    "start": "2525980",
    "end": "2531760"
  },
  {
    "text": "About to shut this down. Five seconds to go.",
    "start": "2531760",
    "end": "2536960"
  },
  {
    "text": "OK, ending it now. ",
    "start": "2536960",
    "end": "2542920"
  },
  {
    "text": "All right. So the correct answer, as\nthe majority of you did get, is in fact that the order is\nnot going to be respected here",
    "start": "2542920",
    "end": "2550869"
  },
  {
    "text": "when E prints things out. It might print out some\nthings later in the order",
    "start": "2550870",
    "end": "2556250"
  },
  {
    "text": "before earlier\nthings in the order. What's going to control when\nE is going to print it out?",
    "start": "2556250",
    "end": "2564250"
  },
  {
    "text": "If M accepts some strings\nmore quickly in fewer steps,",
    "start": "2564250",
    "end": "2570220"
  },
  {
    "text": "then E might end up printing\nout that string earlier in the list than some\nother string that",
    "start": "2570220",
    "end": "2579310"
  },
  {
    "text": "might be a shorter string. Because the order in which\nE is going to now identify",
    "start": "2579310",
    "end": "2589050"
  },
  {
    "text": "that M is accepting\nthose strings depends upon the speed\nwith which M is actually",
    "start": "2589050",
    "end": "2596670"
  },
  {
    "text": "doing the accepting. So this is relevant to\none of your homeworks,",
    "start": "2596670",
    "end": "2602980"
  },
  {
    "text": "because what you're\ngoing to have to show is that if you start with a\ndecidable language instead",
    "start": "2602980",
    "end": "2612160"
  },
  {
    "text": "of a recognizable\nlanguage, then you can make an enumerator, which\nalways prints out things",
    "start": "2612160",
    "end": "2620109"
  },
  {
    "text": "in order, in the string order.  And vice versa.",
    "start": "2620110",
    "end": "2628630"
  },
  {
    "text": "And if you have an enumerator\nwhich prints that things out in string order, then the\nlanguage is decidable.",
    "start": "2628630",
    "end": "2637060"
  },
  {
    "text": "So need to think about that. One direction is a fairly\nsimple modification",
    "start": "2637060",
    "end": "2644030"
  },
  {
    "text": "of what I just showed. The other direction is a\nlittle bit of more work.",
    "start": "2644030",
    "end": "2649530"
  },
  {
    "text": "So anyway, why don't we take\nour little coffee break here?",
    "start": "2649530",
    "end": "2657660"
  },
  {
    "start": "2652000",
    "end": "2907000"
  },
  {
    "text": "So that's an\ninteresting question. So one question is because\nsigma has an infinite-- sigma",
    "start": "2657660",
    "end": "2663299"
  },
  {
    "text": "star is infinite,\nif I understand this question\ncorrectly, which says",
    "start": "2663300",
    "end": "2669660"
  },
  {
    "text": "it's an infinite\nnumber of strings here. How does the machine\neven get started",
    "start": "2669660",
    "end": "2675480"
  },
  {
    "text": "because it has to go through\nand enumerate all of it? No, it's not first writing\ndown all of those strings.",
    "start": "2675480",
    "end": "2683560"
  },
  {
    "text": "Because yeah, you\ncan't write down-- you can't do this infinite\nstep of writing down all the strings. What I had in mind\nis you're going",
    "start": "2683560",
    "end": "2689500"
  },
  {
    "text": "to take each string in turn. First you're going to\ntake the first string on the list of sigma star,\nrun M on that string,",
    "start": "2689500",
    "end": "2697925"
  },
  {
    "text": "and then the next\nstring in sigma star, run it on that string, and\nso on, string after string.",
    "start": "2697925",
    "end": "2703090"
  },
  {
    "text": "And so you're never going to\nhave infinitely many strings to deal with. It's just going to be\nmore and more strings as you're going along.",
    "start": "2703090",
    "end": "2709000"
  },
  {
    "text": "And the question I\nwas trying to get at is whether you're going to\nrun each one to completion",
    "start": "2709000",
    "end": "2716990"
  },
  {
    "text": "before you get to the next one\nor you're going to kind of try to do them all in\nparallel, which is what you need to do to prove this there.",
    "start": "2716990",
    "end": "2726349"
  },
  {
    "text": "Won't there be\ninfinitely many wi? Yes, so there are\na-- similar question. Infinitely many wi. There are infinitely many wi.",
    "start": "2726350",
    "end": "2732770"
  },
  {
    "text": "But it's just an infinite\nloop that we're in. One by one, you're taking\ncare of more and more wi",
    "start": "2732770",
    "end": "2740299"
  },
  {
    "text": "as you're going.  Let's see here.",
    "start": "2740300",
    "end": "2747170"
  },
  {
    "text": "Yes. So another question\nis are we running all the strings in parallel? Yes, we are running all of\nthe strings in parallel.",
    "start": "2747170",
    "end": "2755740"
  },
  {
    "text": "But it's running them in\nparallel, but these are--",
    "start": "2755740",
    "end": "2762175"
  },
  {
    "text": " we're not defining a\nparallel Turing machine.",
    "start": "2762175",
    "end": "2768670"
  },
  {
    "text": "It's running them in\nparallel using time sharing. It runs a little\nbit in this block, runs a little bit in that\nblock and another block,",
    "start": "2768670",
    "end": "2776170"
  },
  {
    "text": "and sort of shifts\naround and sort of does a few steps of each. And that's how it's getting\nthe effect of the parallelism.",
    "start": "2776170",
    "end": "2781600"
  },
  {
    "start": "2781600",
    "end": "2796640"
  },
  {
    "text": "Question is would the\nenumerator essentially have a print tape\nand a work tape? Yeah, you can think of it\nas having a print tape.",
    "start": "2796640",
    "end": "2803540"
  },
  {
    "text": "However you want\nto formalize it. It doesn't matter. I mean, I'm being a little\nwhimsical with attaching it",
    "start": "2803540",
    "end": "2810020"
  },
  {
    "text": "to a picture of a real printer. But yeah, you think conceptually\nyou can have a print tape.",
    "start": "2810020",
    "end": "2818130"
  },
  {
    "text": "However you like to\nthink about it is fine. How can we directly say\nthat without knowing",
    "start": "2818130",
    "end": "2825260"
  },
  {
    "text": "the program of the printer? ",
    "start": "2825260",
    "end": "2833410"
  },
  {
    "text": "We don't have to get into\nthe structure of the printer. The printer is just something\nwhere you say print a string",
    "start": "2833410",
    "end": "2840880"
  },
  {
    "text": "and a string comes out. That's all we know\nabout the printer, and that's all we need to know.",
    "start": "2840880",
    "end": "2847060"
  },
  {
    "text": "So there's no program\nfor the printer. Sorry if I'm not\nunderstanding your question.",
    "start": "2847060",
    "end": "2852760"
  },
  {
    "text": "But the question\nliterally says, how can we say that without knowing\nthe name of the printer? ",
    "start": "2852760",
    "end": "2860099"
  },
  {
    "text": "So if the machine\nis decidable, why does it have to print\nall strings in order? For example, if one\nstring is shorter,",
    "start": "2860100",
    "end": "2866520"
  },
  {
    "text": "can it be decided later? Well, yeah.",
    "start": "2866520",
    "end": "2871960"
  },
  {
    "text": "The reason why we want-- so the question is, if\nthe machine is decidable, why does it have to print\nall strings in order?",
    "start": "2871960",
    "end": "2881010"
  },
  {
    "text": "Because that's what I'm asking\nyou to do in the problem. If you read the problem, I think\nit's number five on the P set.",
    "start": "2881010",
    "end": "2888665"
  },
  {
    "text": "That's what I'm\nasking you to do. That's why you have\nto print it in order. Otherwise you wouldn't have to\nworry about printing in order.",
    "start": "2888665",
    "end": "2894410"
  },
  {
    "text": "It's just because\nI'm asking you to. OK, so I think\nwe're out of time.",
    "start": "2894410",
    "end": "2901542"
  },
  {
    "text": "Let us move back\ninto our material. ",
    "start": "2901542",
    "end": "2909000"
  },
  {
    "start": "2907000",
    "end": "3137000"
  },
  {
    "text": "Second half,\nChurch-Turing thesis. So Church, this is\ngoing back into the bit",
    "start": "2909000",
    "end": "2916289"
  },
  {
    "text": "of the history of the\nsubject back to the 1930s. Back then people were\ninterested in formulating",
    "start": "2916290",
    "end": "2925820"
  },
  {
    "text": "the notion of what do\nwe mean by algorithm. They didn't even\ncall it algorithm.",
    "start": "2925820",
    "end": "2931369"
  },
  {
    "text": "Some people call it procedure. Some people called it\neffective procedure. Some people called it\neffective calculation.",
    "start": "2931370",
    "end": "2941390"
  },
  {
    "text": "But people had in their\nminds-- mathematicians have been dealing for\ncenturies, thousands of years,",
    "start": "2941390",
    "end": "2946460"
  },
  {
    "text": "with procedures\nfor doing things. That's a very natural thing. And mathematical logicians, in\nparticular Church and Turing,",
    "start": "2946460",
    "end": "2955310"
  },
  {
    "text": "Turing somebody surely\nobviously you've heard of, Church maybe not.",
    "start": "2955310",
    "end": "2961400"
  },
  {
    "text": "Church was Turing's\nthesis advisor, in fact. And they both were coming\nout of the mathematical logic",
    "start": "2961400",
    "end": "2970040"
  },
  {
    "text": "field of mathematics and trying\nto use mathematical logic to formalize this\nintuitive notion of what",
    "start": "2970040",
    "end": "2977900"
  },
  {
    "text": "we have had for centuries\nabout what a procedure is,",
    "start": "2977900",
    "end": "2983150"
  },
  {
    "text": "what is an algorithm. And back in those\ndays, they came up",
    "start": "2983150",
    "end": "2989500"
  },
  {
    "text": "with different ways\nof formalizing it. So here we had this\nnotion of algorithm, which",
    "start": "2989500",
    "end": "2994960"
  },
  {
    "text": "is kind of intuitive concept. Turing proposed Turing\nmachine as a way of capturing that\nin a formal way,",
    "start": "2994960",
    "end": "3001080"
  },
  {
    "text": "a mathematically precise way. Other people came up with\nother ways of doing it.",
    "start": "3001080",
    "end": "3008150"
  },
  {
    "text": "And back then, it\nwasn't obvious that all of those different\nformulations would end up",
    "start": "3008150",
    "end": "3013700"
  },
  {
    "text": "giving you equivalent\nconcepts, equivalent notions. And in fact, they proved\nin fairly elaborate detail",
    "start": "3013700",
    "end": "3021950"
  },
  {
    "text": "that the different methods\nthat people came up with, there was the\nlambda calculus, there was rewriting systems,\nthere were several methods",
    "start": "3021950",
    "end": "3029510"
  },
  {
    "text": "that were proposed for\nformalizing this notion, and they all turned out to\nbe equivalent to one another.",
    "start": "3029510",
    "end": "3036350"
  },
  {
    "text": "Today that seems\nkind of obvious, even though I went\nto some effort to prove that just to\ngive you a feeling for how",
    "start": "3036350",
    "end": "3043040"
  },
  {
    "text": "those things go. If you have programs, if\nyou have Pascal and Java,",
    "start": "3043040",
    "end": "3051170"
  },
  {
    "text": "say, and thinking about what\nyou can do mathematically in those-- I'm not talking\nabout their ability",
    "start": "3051170",
    "end": "3056360"
  },
  {
    "text": "to interface with Windows\nand so on, but just the mathematical capabilities.",
    "start": "3056360",
    "end": "3063290"
  },
  {
    "text": "The capability of doing\nmathematical calculations or functions with a Pascal\nprogram or a Java program.",
    "start": "3063290",
    "end": "3071625"
  },
  {
    "text": "It would be absurd to think\nthere's some program that you can write in Java that you\ncan't write in Pascal or Python.",
    "start": "3071625",
    "end": "3078620"
  },
  {
    "text": " And the reason is we know you\ncan compile Python into Java",
    "start": "3078620",
    "end": "3085260"
  },
  {
    "text": "and you can compile\nJava back into Python. That tells you that the two\nsystems, two programming",
    "start": "3085260",
    "end": "3090390"
  },
  {
    "text": "languages are\nequivalent in power. That wasn't obvious from\nthe get go to these folks. So they observed that all of\nthe different efforts that",
    "start": "3090390",
    "end": "3100320"
  },
  {
    "text": "came at formalizing\nalgorithm, all were equivalent to one another. That was kind of a\nbreakthrough moment",
    "start": "3100320",
    "end": "3106339"
  },
  {
    "text": "when they realized that all of\nthe ways that they've come up with, and once\nthey got the idea,",
    "start": "3106340",
    "end": "3112460"
  },
  {
    "text": "they realized all\nreasonable ways of doing it are always going\nto be equivalent. And so that suggested\nthat they've really",
    "start": "3112460",
    "end": "3120980"
  },
  {
    "text": "captured this\nnotion of algorithm by any one of those methods,\nsay a Turing machine.",
    "start": "3120980",
    "end": "3126440"
  },
  {
    "text": "And that's what they took. You can't prove that, because\nalgorithms are an intuitive notion.",
    "start": "3126440",
    "end": "3131839"
  },
  {
    "text": "But the fact that we're able to\ncapture that in a formal way, that's what we call today\nthe Church-Turing thesis.",
    "start": "3131840",
    "end": "3136970"
  },
  {
    "start": "3136970",
    "end": "3145230"
  },
  {
    "start": "3137000",
    "end": "3361000"
  },
  {
    "text": "So any of these methods\ncaptured the notion of algorithm as we described.",
    "start": "3145230",
    "end": "3152270"
  },
  {
    "text": "And that has had a big\nimpact on mathematics. ",
    "start": "3152270",
    "end": "3158829"
  },
  {
    "text": "Just give me one second here.  All right. Here's a check in on this one.",
    "start": "3158830",
    "end": "3165260"
  },
  {
    "text": "So you know Alan Turing. So here are some facts\nwhich may or may not be true about Alan Turing.",
    "start": "3165260",
    "end": "3172850"
  },
  {
    "text": "So now you get to pick\nall of the ones that apply based on your knowledge.",
    "start": "3172850",
    "end": "3178010"
  },
  {
    "text": "Obviously this is more for\nfun or historical interest.",
    "start": "3178010",
    "end": "3186080"
  },
  {
    "text": "But let's launch that poll. See how much you know\nabout Mr. Turing.",
    "start": "3186080",
    "end": "3192619"
  },
  {
    "start": "3192620",
    "end": "3198230"
  },
  {
    "text": "Check all that apply. ",
    "start": "3198230",
    "end": "3204840"
  },
  {
    "text": "OK, almost done? Please let's wrap it up.",
    "start": "3204840",
    "end": "3209870"
  },
  {
    "text": "I think that's everybody. OK, two seconds. Please get credit\nfor doing this.",
    "start": "3209870",
    "end": "3215570"
  },
  {
    "text": "End polling. In fact, it's kind\nof interesting here. ",
    "start": "3215570",
    "end": "3226640"
  },
  {
    "text": "You all do know that\nhe was a code breaker. He worked, in fact,\nwas part of a team,",
    "start": "3226640",
    "end": "3234930"
  },
  {
    "text": "I think led the team,\nwhich broke the German code during World War II.",
    "start": "3234930",
    "end": "3240049"
  },
  {
    "text": "The Turing test\nis a famous thing for how do you\ncharacterize when you have an intelligent machine.",
    "start": "3240050",
    "end": "3246650"
  },
  {
    "text": "So he definitely worked in AI. He worked in biology as well. He has a paper less well\nknown to computer scientists.",
    "start": "3246650",
    "end": "3253460"
  },
  {
    "text": "But if you look him\nup on Wikipedia, where I get all my\ninformation, he actually,",
    "start": "3253460",
    "end": "3261200"
  },
  {
    "text": "and I knew this anyway, he\nhas a very famous paper, an influential paper, on\nhow, for example, spots",
    "start": "3261200",
    "end": "3269240"
  },
  {
    "text": "arise on leopards and\nstripes on tigers and so on.",
    "start": "3269240",
    "end": "3275869"
  },
  {
    "text": "Gave a kind of\nmathematical model for that which actually proves-- actually is quite--\ndoes capture things",
    "start": "3275870",
    "end": "3281420"
  },
  {
    "text": "in an accurate way, as was\nshown subsequent to that. Was imprisoned for being gay.",
    "start": "3281420",
    "end": "3287300"
  },
  {
    "text": "In fact, as far as I\nknow from his history, he was not in prison\nfor being gay. He was convicted of being\ngay and was given a choice",
    "start": "3287300",
    "end": "3297290"
  },
  {
    "text": "to go to prison or\nto take chemicals to cure him from being gay.",
    "start": "3297290",
    "end": "3303740"
  },
  {
    "text": "And he opted not to go to\nprison and take the chemicals. And sadly, he committed\nsuicide two years after that.",
    "start": "3303740",
    "end": "3313620"
  },
  {
    "text": "So he was treated very\nbadly by British society",
    "start": "3313620",
    "end": "3321090"
  },
  {
    "text": "and British government despite\nhaving the great work that he had done.",
    "start": "3321090",
    "end": "3326770"
  },
  {
    "text": "And you might think that he\nhas been honored by appearing on a British banknote.",
    "start": "3326770",
    "end": "3331830"
  },
  {
    "text": "That's also not true. But the good news is\nhe's not currently",
    "start": "3331830",
    "end": "3337680"
  },
  {
    "text": "on a British banknote,\nbut he's going to be on a British banknote\nstarting next year. ",
    "start": "3337680",
    "end": "3347370"
  },
  {
    "text": "So that's along with Winston\nChurchill and a number of other notable Brits.",
    "start": "3347370",
    "end": "3354060"
  },
  {
    "text": "He's going to be on\nthe 50 pound banknote. OK, so let us continue.",
    "start": "3354060",
    "end": "3363050"
  },
  {
    "start": "3361000",
    "end": "3599000"
  },
  {
    "text": "So as I mentioned,\nthe Church-Turing was important for mathematics. And it has to do with\nthese Hilbert problems.",
    "start": "3363050",
    "end": "3369775"
  },
  {
    "text": "I don't know how many of\nyou have encountered that. David Hilbert was\nwidely considered to be the perhaps the greatest\nmathematician of his day.",
    "start": "3369775",
    "end": "3377840"
  },
  {
    "text": "And every four\nyears, mathematicians get together for an\ninternational congress,",
    "start": "3377840",
    "end": "3383990"
  },
  {
    "text": "well, the International\nCongress of Mathematicians. That's been going on\nfor over 100 years.",
    "start": "3383990",
    "end": "3390049"
  },
  {
    "text": "And he was invited\nto the 1900 meeting to give a talk about\nanything he wanted.",
    "start": "3390050",
    "end": "3395400"
  },
  {
    "text": "And what he decided to do\nduring that presentation is present 23\nproblems that would",
    "start": "3395400",
    "end": "3404930"
  },
  {
    "text": "be a challenge for\nmathematicians for the coming century. ",
    "start": "3404930",
    "end": "3411150"
  },
  {
    "text": "And we're running a\nlittle short on time, so I'm not going\nto go into them.",
    "start": "3411150",
    "end": "3417300"
  },
  {
    "text": "Some of these we'll\ntalk about later. But the 10th problem\nhere is about algorithms.",
    "start": "3417300",
    "end": "3422490"
  },
  {
    "text": "The 10th problem\non Hilbert's list called Hilbert's 10th problem\nis a problem about algorithms.",
    "start": "3422490",
    "end": "3428790"
  },
  {
    "text": "And it says give an algorithm\nfor solving what are called Diophantine equations.",
    "start": "3428790",
    "end": "3435118"
  },
  {
    "text": "He didn't call it an algorithm. He called it some finite\nprocedure or something",
    "start": "3435118",
    "end": "3441240"
  },
  {
    "text": "like that. But what are\nDiophantine equations? I'm glad you asked.",
    "start": "3441240",
    "end": "3448050"
  },
  {
    "text": "Diophantine equations. What are they? Well, they're very simple. They're just\npolynomial equations,",
    "start": "3448050",
    "end": "3453750"
  },
  {
    "text": "like does this polynomial equal\nsome constant, for example. But where you're looking\nfor the solutions,",
    "start": "3453750",
    "end": "3461610"
  },
  {
    "text": "the polynomials are variables. You're looking\nfor the solutions, but you're only allowing the\nsolutions to be integers.",
    "start": "3461610",
    "end": "3467730"
  },
  {
    "text": "So here's an example. So I give you this polynomial. Here I'm setting it equal to 7.",
    "start": "3467730",
    "end": "3474590"
  },
  {
    "text": "And I want to solve\nthat equation. So it has these three\nvariables, x, y, and z.",
    "start": "3474590",
    "end": "3480109"
  },
  {
    "text": "So you have to find\na solution there. But I'm only going to allow\nyou to have plug in integers.",
    "start": "3480110",
    "end": "3485360"
  },
  {
    "text": "And in fact, there is\na solution in integers. 1, 2, and minus 2. If you plug it in,\nyou'll see it works.",
    "start": "3485360",
    "end": "3491450"
  },
  {
    "text": "All right. Now, the general problem\nthat Hilbert was addressing is suppose I give\nyou a polynomial.",
    "start": "3491450",
    "end": "3498630"
  },
  {
    "text": "Let's say it's set to 0. So we're looking for\nroots of the polynomial. But just some\npolynomial equation. You can always put\nit in this form.",
    "start": "3498630",
    "end": "3504930"
  },
  {
    "text": "And I want to know does it\nhave a solution in integers? And what I'm looking\nfor is a procedure",
    "start": "3504930",
    "end": "3513520"
  },
  {
    "text": "which will tell me yes or no. I want to know. Give an algorithm to answer\nthat question for a given",
    "start": "3513520",
    "end": "3520840"
  },
  {
    "text": "polynomial. Or using the language\nof this course, defining this in terms of a\nlanguage, decide this language.",
    "start": "3520840",
    "end": "3529059"
  },
  {
    "text": "Give a Turing machine which will\ndecide yes or no for any given polynomial. Yes there is a\nsolution in integers.",
    "start": "3529060",
    "end": "3534970"
  },
  {
    "text": "No, there is no\nsolution in integers. ",
    "start": "3534970",
    "end": "3547970"
  },
  {
    "text": "That was what Hilbert\nasked in his 10th problem.",
    "start": "3547970",
    "end": "3553310"
  },
  {
    "text": "Give an algorithm. Now, as we know now,\nit took seven years to get the answer that\nthere is no such algorithm.",
    "start": "3553310",
    "end": "3562880"
  },
  {
    "text": "It's an undecidable problem. And we'll talk about that a\nlittle bit later in the term. But D is not a\ndecidable language.",
    "start": "3562880",
    "end": "3572960"
  },
  {
    "text": "Now, there was no hope of coming\nup with that answer in 1900",
    "start": "3572960",
    "end": "3579790"
  },
  {
    "text": "or even in 1910,\nbecause we didn't have a formal idea of\nwhat an algorithm is.",
    "start": "3579790",
    "end": "3585550"
  },
  {
    "text": "That had to wait until the\nChurch-Turing thesis told us that algorithms really\nare Turing machines,",
    "start": "3585550",
    "end": "3593080"
  },
  {
    "text": "that there is a formal way of\nsaying what an algorithm is. And once you had\nthat notion, then you",
    "start": "3593080",
    "end": "3599210"
  },
  {
    "text": "could prove that there\nis no Turing machine. But before that, you had only\nthis vague notion, intuitive",
    "start": "3599210",
    "end": "3604580"
  },
  {
    "text": "notion of what an algorithm is. And so there was no\nhope of ever answering that, because in\nfact, the answer is",
    "start": "3604580",
    "end": "3609830"
  },
  {
    "text": "there is no such algorithm. Now, I'll give this as a\nlittle exercise to you.",
    "start": "3609830",
    "end": "3616110"
  },
  {
    "text": "We're a little bit\nrunning short on time. But this language D is in\nfact a recognizable language.",
    "start": "3616110",
    "end": "3622630"
  },
  {
    "text": "So I would suggest you\nthink about that offline. But basically, you can try\nplugging in different values",
    "start": "3622630",
    "end": "3629470"
  },
  {
    "text": "for these variables. And if you ever find\nthat it evaluates to 0,",
    "start": "3629470",
    "end": "3635710"
  },
  {
    "text": "then you can accept. But otherwise, you just have\nto keep going and looking. So showing recognizability\nis very simple,",
    "start": "3635710",
    "end": "3642940"
  },
  {
    "text": "but decidability is false. Now let's talk a little\nbit about encodings",
    "start": "3642940",
    "end": "3650460"
  },
  {
    "text": "for Turing machines. So we're going to be working-- encodings and Turing machines.",
    "start": "3650460",
    "end": "3656140"
  },
  {
    "text": "So we're now going to be working\nwith Turing machines going forward. ",
    "start": "3656140",
    "end": "3665240"
  },
  {
    "text": "The input to those Turing\nmachines might be polynomials, might be strings. They might be other things too.",
    "start": "3665240",
    "end": "3671210"
  },
  {
    "text": "We might want to feed automata\ninto the Turing machines. So the Turing machine can answer\nquestions about the automata.",
    "start": "3671210",
    "end": "3677990"
  },
  {
    "text": "Well, don't forget, Turing\nmachines take as their input just strings. So we have to think\nabout how we're",
    "start": "3677990",
    "end": "3683480"
  },
  {
    "text": "going to represent\nsomething more complicated like an automaton as a string.",
    "start": "3683480",
    "end": "3688760"
  },
  {
    "text": "And I'm not going to get\ninto the details of that. You could spell\nit out in detail. But I think that's not too\ninteresting to get into that.",
    "start": "3688760",
    "end": "3696030"
  },
  {
    "text": "We're just going to\ndevelop a notation that says if you have some object,\nit could be a polynomial.",
    "start": "3696030",
    "end": "3703023"
  },
  {
    "text": "There could be an automaton. It could be a graph. It could be whatever\nyou're working with. A table. I'm going to write that\nO in these brackets",
    "start": "3703023",
    "end": "3711170"
  },
  {
    "text": "to mean an encoding of\nthat object into a string. And then you can feed the\nstring into the Turing machine.",
    "start": "3711170",
    "end": "3716880"
  },
  {
    "text": " So that's how we're going to be\nthinking of presenting Turing",
    "start": "3716880",
    "end": "3722990"
  },
  {
    "text": "machines with more complicated\nobjects and strings as input, because we're just\ngoing to represent them",
    "start": "3722990",
    "end": "3728960"
  },
  {
    "text": "as strings using ways in which\nI'm sure you're all familiar. I mean, that's how you deal\nwith representing stuff when",
    "start": "3728960",
    "end": "3734420"
  },
  {
    "text": "you write your programs anyway. But just to make it\nformal and that's the way we're going to write it\ndown in these brackets.",
    "start": "3734420",
    "end": "3740638"
  },
  {
    "text": "And if you have a list\nof several objects that you want to present\ntogether to a Turing machine,",
    "start": "3740638",
    "end": "3745819"
  },
  {
    "text": "we'll just write them together\nwithin brackets like this. Now, for writing Turing\nmachines down, going forward,",
    "start": "3745820",
    "end": "3753810"
  },
  {
    "text": "we're going to be using high\nlevel English descriptions. We're not going to be\nworrying about managing--",
    "start": "3753810",
    "end": "3759320"
  },
  {
    "text": "like the stuff we've been\ndoing up till now, I'm not going to ask you to do it. We're not going to\ndo that anymore, and I'm not going\nto ask you to do it.",
    "start": "3759320",
    "end": "3765233"
  },
  {
    "text": "Managing where stuff goes on\nthe tapes and all that stuff, that's too low level. Because really now that we\nhave the Church-Turing thesis,",
    "start": "3765233",
    "end": "3772640"
  },
  {
    "text": "we're really interested in\ntalking about algorithms. We're not that interested in\ntalking about Turing machines, per se. We're interested in\nalgorithms and what",
    "start": "3772640",
    "end": "3779510"
  },
  {
    "text": "the power of computation is. So we're going to only be\ntalking about Turing machines",
    "start": "3779510",
    "end": "3784700"
  },
  {
    "text": "now in a higher level way. And only when we need to prove\nsomething about capabilities,",
    "start": "3784700",
    "end": "3790348"
  },
  {
    "text": "we're going to come\nback to Turing machines and we're going to be proving\nthings about their limitations and so on.",
    "start": "3790348",
    "end": "3796170"
  },
  {
    "text": "So our notation for\nrunning Turing machines is going to be-- we're basically going to\nput the Turing machine",
    "start": "3796170",
    "end": "3803010"
  },
  {
    "text": "inside these quotation marks. And we're going to know that\nwe could in principle write out",
    "start": "3803010",
    "end": "3809099"
  },
  {
    "text": "the Turing machine in a\nprecise way in terms of states and transition\nfunction and so on, but we'll never\nactually go ahead",
    "start": "3809100",
    "end": "3815160"
  },
  {
    "text": "and do that lengthy exercise. So quick check in here.",
    "start": "3815160",
    "end": "3822180"
  },
  {
    "text": "So one of the features-- well,\nOK, let me not give this away. So if x and y are\nstrings, I want",
    "start": "3822180",
    "end": "3829670"
  },
  {
    "text": "to now have a way of presenting\ntwo strings as a single string as input to my machine, because\nI always think of my machine",
    "start": "3829670",
    "end": "3836900"
  },
  {
    "text": "as getting a single input. So would you suggest one way of\ncombining two strings into one",
    "start": "3836900",
    "end": "3844270"
  },
  {
    "text": "which would be a good encoding\nis just to concatenate those two strings together. ",
    "start": "3844270",
    "end": "3853560"
  },
  {
    "text": "Would that be the\nway you would do it? Is that a good way to do it or\nnot such a good way to do it?",
    "start": "3853560",
    "end": "3859560"
  },
  {
    "text": "So let's see here.",
    "start": "3859560",
    "end": "3866300"
  },
  {
    "text": "I can get to that next. ",
    "start": "3866300",
    "end": "3872633"
  },
  {
    "text": "And think of what you\nwould want to have happen in a good encoding. ",
    "start": "3872633",
    "end": "3881770"
  },
  {
    "text": "Ready, set, sold. Share results. Yeah.",
    "start": "3881770",
    "end": "3886990"
  },
  {
    "text": "I think most of you get\nthe idea that this is not a good way of combining\ntwo strings into one,",
    "start": "3886990",
    "end": "3892599"
  },
  {
    "text": "because the problem is it's\nkind of ambiguous in a sense.",
    "start": "3892600",
    "end": "3898060"
  },
  {
    "text": "If you combine two\nstrings this way, what's important in an\nencoding is that the machine",
    "start": "3898060",
    "end": "3903400"
  },
  {
    "text": "when it gets the encoding,\nit can decode them back into the original objects. And if you're just going\nto be sticking the two",
    "start": "3903400",
    "end": "3909430"
  },
  {
    "text": "strings together, you don't\nknow where one string ends and the next string begins.",
    "start": "3909430",
    "end": "3914450"
  },
  {
    "text": "And so it's not going to be a\ngood way of combining things. You should find a little\nbit more clever way",
    "start": "3914450",
    "end": "3919839"
  },
  {
    "text": "of either introducing\nanother symbol or doing something a little\nbit more sophisticated, which would allow you to\nbe able to do the decoding",
    "start": "3919840",
    "end": "3927010"
  },
  {
    "text": "as well as the encoding\nin a unique way. So getting back to that\nnotation for a Turing machine.",
    "start": "3927010",
    "end": "3934950"
  },
  {
    "text": "So here is the\nmachine we've already seen once before for a to the\nk, b to the k, c to the k.",
    "start": "3934950",
    "end": "3941540"
  },
  {
    "text": "I would write it now more simply\nthan managing all of the tapes that we had the first\ntime around, which we did last lecture.",
    "start": "3941540",
    "end": "3947630"
  },
  {
    "text": "I would just say we\ngive it an input w, check if w's of the right\nform with the things",
    "start": "3947630",
    "end": "3952850"
  },
  {
    "text": "in the right order. Reject if it's not. Count the number of\na's b's and c's in w.",
    "start": "3952850",
    "end": "3957950"
  },
  {
    "text": "Accept if all the counts\nare equal and reject if not. That's going to be good\nenough to be writing things",
    "start": "3957950",
    "end": "3964550"
  },
  {
    "text": "at that higher level when\nyou're going to be writing your algorithm descriptions. You just have to make sure\nthat whatever you're doing",
    "start": "3964550",
    "end": "3971000"
  },
  {
    "text": "you can implement.  You don't want to be doing\ntests which are impossible",
    "start": "3971000",
    "end": "3978319"
  },
  {
    "text": "or doing infinitely\nmuch work in one stage. That's not good.",
    "start": "3978320",
    "end": "3984390"
  },
  {
    "text": "But as long as it's clear\nthat what you're doing is doing only a finite\namount of work in every stage and it's something that\nyou could really implement,",
    "start": "3984390",
    "end": "3990319"
  },
  {
    "text": "you can write it\nin a high level. ",
    "start": "3990320",
    "end": "3995590"
  },
  {
    "text": "I wanted to spend a few minutes\ntalking about problem set two, but we're a little bit\nrunning out of time here.",
    "start": "3995590",
    "end": "4002100"
  },
  {
    "text": "Particularly there was\nthis problem number five where you show that a language\nis Turing recognizable if",
    "start": "4002100",
    "end": "4008010"
  },
  {
    "text": "and only if there's\na decidable D. Where C is Turing recognizable where\nD is now a collection of pairs.",
    "start": "4008010",
    "end": "4016960"
  },
  {
    "text": "We've got some questions\nabout the notation, which I've hopefully answered now. So C is a set of x's\nsuch that there exists",
    "start": "4016960",
    "end": "4027870"
  },
  {
    "text": "a string you can pair it with. So that the string xy is in D.",
    "start": "4027870",
    "end": "4035322"
  },
  {
    "text": "Let me try to give\nyou a picture of that.  So I want to think of D as a\ncollection of pairs of strings.",
    "start": "4035322",
    "end": "4043720"
  },
  {
    "text": "And it might be helpful to think\nof D kind of on the axes here. So if we have a pair of strings\nxy, which I have not yet",
    "start": "4043720",
    "end": "4052540"
  },
  {
    "text": "packaged into a\nsingle string, I'm thinking of them as a pair of\ntwo objects at this moment,",
    "start": "4052540",
    "end": "4058089"
  },
  {
    "text": "think of D as-- so just the x part is just\nbelow here on the x-axis.",
    "start": "4058090",
    "end": "4065580"
  },
  {
    "text": "D you might just\nconceptually want to think of it as a\ncollection of pairs. So it's like a subset\nof all of these pairs.",
    "start": "4065580",
    "end": "4073780"
  },
  {
    "text": "And C is all of the x's that\ncorrespond to any pair in here.",
    "start": "4073780",
    "end": "4083350"
  },
  {
    "text": "Sometimes we call\nthat the projection, because it's all the things\nthat are below or the shadow.",
    "start": "4083350",
    "end": "4089079"
  },
  {
    "text": "If you had a light\nsitting up here, it's all the things that\nare kind of underneath a D.",
    "start": "4089080",
    "end": "4095090"
  },
  {
    "text": "So I've written C here\nkind of a little thicker, if you can see that. So that's the C language. And there's two directions here.",
    "start": "4095090",
    "end": "4104750"
  },
  {
    "text": "One is a lot easier\nthan the other. If I give you a\ndecidable D and I",
    "start": "4104750",
    "end": "4110060"
  },
  {
    "text": "want to test whether something's\nin C, so I'll give you an x, I want to know is x in C?",
    "start": "4110060",
    "end": "4118699"
  },
  {
    "text": "Well, you now have to test is\nthere some y that I can pair with x where the pair is in D?",
    "start": "4118700",
    "end": "4126818"
  },
  {
    "text": "So you can start\nlooking for that y. If you ever find\none, you know that x",
    "start": "4126819",
    "end": "4131890"
  },
  {
    "text": "is in C. There are infinitely\nmany y's to look for. But don't forget, you're only\nlooking for a recognizer for C.",
    "start": "4131890",
    "end": "4143120"
  },
  {
    "text": "So on the rejecting side,\nyou're allowed to go forever. So I'm kind of giving\nyou a way to think",
    "start": "4143120",
    "end": "4149180"
  },
  {
    "text": "about the easy direction. The hard direction, you need\nto think about how are you",
    "start": "4149180",
    "end": "4156710"
  },
  {
    "text": "going to come up with that\ndecidable D. If I give you C, you have to find a\ndecidable D. And now",
    "start": "4156710",
    "end": "4162859"
  },
  {
    "text": "you're bringing\nsomething down lower. You're starting with a\nrecognizable language and a decidable\nlanguage, which is",
    "start": "4162859",
    "end": "4169460"
  },
  {
    "text": "going to sort of be counterpart\nto that and in a sense is a simpler language. And the way it\nbecomes simpler is",
    "start": "4169460",
    "end": "4174649"
  },
  {
    "text": "that y is going to help you\ndetermine whether x is in C.",
    "start": "4174649",
    "end": "4181960"
  },
  {
    "text": "And I guess the thing that\nI'll leave you with is, and maybe we can talk about this\na little bit more on Tuesday,",
    "start": "4181960",
    "end": "4188620"
  },
  {
    "text": "I'll try to leave a\nlittle more time if you want to test if something\nis in C, x is in C,",
    "start": "4188620",
    "end": "4197507"
  },
  {
    "text": "but I don't want to let you go\nforever anymore, because I want to be a decidable language. And I'm going to\nuse y to help you.",
    "start": "4197507",
    "end": "4205040"
  },
  {
    "text": "What information would\nhelp you guarantee you get the right\nanswer for x being in C?",
    "start": "4205040",
    "end": "4213040"
  },
  {
    "text": "But that you would\nhave to be sure you're getting the right answer. So y could just be the answer.",
    "start": "4213040",
    "end": "4220330"
  },
  {
    "text": "But then you don't know\nthat that's-- you have to be convinced that you\nhave the right answer.",
    "start": "4220330",
    "end": "4225670"
  },
  {
    "text": "y just saying what\nit is, I mean, y could say that x is in\nD even when it's not true.",
    "start": "4225670",
    "end": "4232300"
  },
  {
    "text": "x is in C even when\nthat's not true. So what information would allow\nyou to check that x is in C?",
    "start": "4232300",
    "end": "4240190"
  },
  {
    "text": "What would be\nhelpful information to check that x is in C\nwhere you would avoid ever having to go forever?",
    "start": "4240190",
    "end": "4247270"
  },
  {
    "text": "A little bit too rushed\nhere for that to be helpful. Anyway, let's just\nconclude what we've done.",
    "start": "4247270",
    "end": "4254190"
  },
  {
    "text": "Just brief summary here. And I don't want to\nkeep you over time.",
    "start": "4254190",
    "end": "4263659"
  },
  {
    "text": "So I'll just leave\nthis up on the board. I will see if there's any--\nso the lecture is over",
    "start": "4263660",
    "end": "4274429"
  },
  {
    "text": "and you can take\noff as you wish. I will stick around for\na couple of minutes. I have another meeting soon, but\nI'll try to answer some chats.",
    "start": "4274430",
    "end": "4282845"
  },
  {
    "start": "4282845",
    "end": "4288270"
  },
  {
    "text": "All right. People are commenting about\nthis movie about Turing,",
    "start": "4288270",
    "end": "4293700"
  },
  {
    "text": "The Imitation Game. If you haven't seen\nthat, I recommend it. ",
    "start": "4293700",
    "end": "4300760"
  },
  {
    "text": "And is it a good idea to make\ny to be equal to the repeated",
    "start": "4300760",
    "end": "4307203"
  },
  {
    "text": "looped string? Hm. I'm not sure about that. ",
    "start": "4307204",
    "end": "4313970"
  },
  {
    "text": "Thank you, everybody, for\nsending your kind notes. ",
    "start": "4313970",
    "end": "4322410"
  },
  {
    "text": "Church-Turing thesis. The question is\nis it in the book? Yes. It's in the book. Kind of similar to what\nI've already said, but yes.",
    "start": "4322410",
    "end": "4328275"
  },
  {
    "start": "4328275",
    "end": "4336630"
  },
  {
    "text": "OK, this is a good\nquestion here. The Church-Turing thesis. Somebody asked me, is\nit proved in the book?",
    "start": "4336630",
    "end": "4344280"
  },
  {
    "text": "There's nothing to prove. The Church-Turing\nthesis is an equivalence between the intuitive\nand the formal.",
    "start": "4344280",
    "end": "4352290"
  },
  {
    "text": "You can't prove\nsomething like that. You can just make-- it's really in a\nsense a hypothesis",
    "start": "4352290",
    "end": "4359070"
  },
  {
    "text": "that the only thing you'll\never be able to compute is something that you can\ndo with a Turing machine.",
    "start": "4359070",
    "end": "4366000"
  },
  {
    "text": "I mean, that has something\nto do with the nature of the physical world. And I don't really think\nthat's what people had in mind.",
    "start": "4366000",
    "end": "4372480"
  },
  {
    "text": "It's that the kinds of\nthings that we normally think of being able\nto do with a procedure",
    "start": "4372480",
    "end": "4379830"
  },
  {
    "text": "mathematically is exactly\nthe kinds of things that you can do with\na Turing machine. ",
    "start": "4379830",
    "end": "4386880"
  },
  {
    "text": "So somebody's pointing out,\ntrying to be helpful here, maybe these folks are\nasking about equivalents",
    "start": "4386880",
    "end": "4392750"
  },
  {
    "text": "of various different\ncomputation models being proved in the book, not the\nChurch-Turing thesis itself.",
    "start": "4392750",
    "end": "4398120"
  },
  {
    "text": "Well, I mean, the things\nthat we proved in lecture are also proved in the book.",
    "start": "4398120",
    "end": "4404480"
  },
  {
    "text": "About the equivalence\nof single tape machines, multi-tape machines,\nnon-deterministic machines,",
    "start": "4404480",
    "end": "4410090"
  },
  {
    "text": "those are all\nproved in the book. I mean, there's lots\nof models out there. So we could spend a lot of\ntime proving equivalences.",
    "start": "4410090",
    "end": "4417398"
  },
  {
    "text": "And there are books that do\nspend a lot of time proving equivalences. ",
    "start": "4417398",
    "end": "4426040"
  },
  {
    "text": "But I think what we've\ngiven is probably enough. ",
    "start": "4426040",
    "end": "4433672"
  },
  {
    "text": "That's a good question. If you give an\nalgorithm, you don't",
    "start": "4433672",
    "end": "4439949"
  },
  {
    "text": "need to give the actual machine\ngoing forward unless you're explicitly asked to.",
    "start": "4439950",
    "end": "4447270"
  },
  {
    "text": "But yes, you don't have to\ngive the states and transitions",
    "start": "4447270",
    "end": "4453360"
  },
  {
    "text": "anymore.  OK.",
    "start": "4453360",
    "end": "4458500"
  },
  {
    "text": "So it's a little after 4:00. I think I'm going to move\non to my next meeting.",
    "start": "4458500",
    "end": "4464530"
  },
  {
    "text": "So thank you for being here,\nand I will see you on Tuesday.",
    "start": "4464530",
    "end": "4470610"
  },
  {
    "start": "4470610",
    "end": "4489000"
  }
]