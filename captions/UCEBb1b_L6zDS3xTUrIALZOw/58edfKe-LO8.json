[
  {
    "text": "Here's a final logic implementation strategy\nusing read-only memories.",
    "start": "840",
    "end": "5330"
  },
  {
    "text": "This strategy is useful when you need to generate\nmany different outputs from the same set of",
    "start": "5330",
    "end": "10070"
  },
  {
    "text": "inputs, a situation we'll see a lot when we\nget to finite state machines later on in the",
    "start": "10070",
    "end": "15990"
  },
  {
    "text": "course.",
    "start": "15990",
    "end": "16990"
  },
  {
    "text": "Where MUXes are good for implementing truth\ntables with one output column, read-only memories",
    "start": "16990",
    "end": "21200"
  },
  {
    "text": "are good for implementing truth tables with\nmany output columns.",
    "start": "21200",
    "end": "24790"
  },
  {
    "text": "One of the key components in a read-only memory\nis the decoder which has K select inputs and",
    "start": "24790",
    "end": "31590"
  },
  {
    "text": "2^K data outputs.",
    "start": "31590",
    "end": "34190"
  },
  {
    "text": "Only one of the data outputs will be 1 (or\nHIGH) at any given time, which one is determined",
    "start": "34190",
    "end": "39460"
  },
  {
    "text": "by the value on the select inputs.",
    "start": "39460",
    "end": "42140"
  },
  {
    "text": "The Jth output will be 1 when the select lines\nare set to the binary representation of J.",
    "start": "42140",
    "end": "49309"
  },
  {
    "text": "Here's a read-only memory implementation for\nthe 2-output truth table shown on the left.",
    "start": "49309",
    "end": "54920"
  },
  {
    "text": "This particular 2-output device is a full\nadder, which is used as a building block in",
    "start": "54920",
    "end": "60010"
  },
  {
    "text": "addition circuits.",
    "start": "60010",
    "end": "62079"
  },
  {
    "text": "The three inputs to the function (A, B, and\nCI) are connected to the select lines of a",
    "start": "62079",
    "end": "67649"
  },
  {
    "text": "3-to-8 decoder.",
    "start": "67649",
    "end": "68649"
  },
  {
    "text": "The 8 outputs of the decoder run horizontally\nin the schematic diagram and each is labeled",
    "start": "68649",
    "end": "75130"
  },
  {
    "text": "with the input values for which that output\nwill be HIGH.",
    "start": "75130",
    "end": "79358"
  },
  {
    "text": "So when the inputs are 000, the top decoder\noutput will be HIGH and all the other decoder",
    "start": "79359",
    "end": "84899"
  },
  {
    "text": "outputs LOW.",
    "start": "84899",
    "end": "86430"
  },
  {
    "text": "When the inputs are 001 - i.e., when A and\nB are 0 and CI is 1 - the second decoder output",
    "start": "86430",
    "end": "93899"
  },
  {
    "text": "will be HIGH.",
    "start": "93899",
    "end": "94899"
  },
  {
    "text": "And so on.",
    "start": "94899",
    "end": "97070"
  },
  {
    "text": "The decoder outputs control a matrix of NFET\npulldown switches.",
    "start": "97070",
    "end": "101679"
  },
  {
    "text": "The matrix has one vertical column for each\noutput of the truth table.",
    "start": "101679",
    "end": "107270"
  },
  {
    "text": "Each switch connects a particular vertical\ncolumn to ground, forcing it to a LOW value",
    "start": "107270",
    "end": "112209"
  },
  {
    "text": "when the switch is on.",
    "start": "112209",
    "end": "114359"
  },
  {
    "text": "The column circuitry is designed so that if\nno pulldown switches force its value to 0,",
    "start": "114359",
    "end": "119549"
  },
  {
    "text": "its value will be a 1.",
    "start": "119549",
    "end": "121829"
  },
  {
    "text": "The value on each of the vertical columns\nis inverted to produce the final output values.",
    "start": "121829",
    "end": "128130"
  },
  {
    "text": "So how do we use all this circuitry to implement\nthe function described by the truth table?",
    "start": "128130",
    "end": "133269"
  },
  {
    "text": "For any particular combination of input values,\nexactly one of the decoder outputs will be",
    "start": "133269",
    "end": "138099"
  },
  {
    "text": "HIGH, all the others will be low.",
    "start": "138100",
    "end": "141180"
  },
  {
    "text": "Think of the decoder outputs as indicating\nwhich row of the truth table has been selected",
    "start": "141180",
    "end": "145340"
  },
  {
    "text": "by the input values.",
    "start": "145340",
    "end": "147709"
  },
  {
    "text": "All of the pulldown switches controlled by\nthe HIGH decoder output will be turned ON,",
    "start": "147709",
    "end": "152950"
  },
  {
    "text": "forcing the vertical column to which they\nconnect LOW.",
    "start": "152950",
    "end": "156849"
  },
  {
    "text": "For example, if the inputs are 001, the decoder\noutput labeled 001 will be HIGH.",
    "start": "156849",
    "end": "164209"
  },
  {
    "text": "This will turn on the circled pulldown switch,\nforcing the S vertical column LOW.",
    "start": "164209",
    "end": "170069"
  },
  {
    "text": "The COUT vertical column is not pulled down,\nso it will be HIGH.",
    "start": "170069",
    "end": "175349"
  },
  {
    "text": "After the output inverters, S will be 1 and\nCOUT will be 0, the desired output values.",
    "start": "175349",
    "end": "181120"
  },
  {
    "text": "By changing the locations of the pulldown\nswitches, this read-only memory can be programmed",
    "start": "181120",
    "end": "186579"
  },
  {
    "text": "to implement any 3-input, 2-output function.",
    "start": "186579",
    "end": "191580"
  },
  {
    "text": "For read-only memories with many inputs, the\ndecoders have many outputs and the vertical",
    "start": "191580",
    "end": "196819"
  },
  {
    "text": "columns in the switch matrix can become quite\nlong and slow.",
    "start": "196819",
    "end": "200079"
  },
  {
    "text": "We can reconfigure the circuit slightly so\nthat some of the inputs control the decoder",
    "start": "200079",
    "end": "206170"
  },
  {
    "text": "and the other inputs are used to select among\nmultiple shorter and faster vertical columns.",
    "start": "206170",
    "end": "211769"
  },
  {
    "text": "This combination of smaller decoders and output\nMUXes is quite common in these sorts of memory",
    "start": "211769",
    "end": "217440"
  },
  {
    "text": "circuits.",
    "start": "217440",
    "end": "219299"
  },
  {
    "text": "Read-only memories, ROMs for short, are an\nimplementation strategy that ignores the structure",
    "start": "219299",
    "end": "224260"
  },
  {
    "text": "of the particular boolean expression to be\nimplemented.",
    "start": "224260",
    "end": "227180"
  },
  {
    "text": "The ROM's size and overall layout are determined\nonly by the number of inputs and outputs.",
    "start": "227180",
    "end": "233049"
  },
  {
    "text": "Typically the switch matrix is fully populated,\nwith all possible switch locations filled",
    "start": "233049",
    "end": "238180"
  },
  {
    "text": "with an NFET pulldown.",
    "start": "238180",
    "end": "239769"
  },
  {
    "text": "A separate physical or electrical programming\noperation determines which switches are actually",
    "start": "239769",
    "end": "245069"
  },
  {
    "text": "controlled by the decoder lines.",
    "start": "245069",
    "end": "247430"
  },
  {
    "text": "The other switches are configured to be in\nthe permanently off state.",
    "start": "247430",
    "end": "252139"
  },
  {
    "text": "If the ROM has N inputs and M outputs, then\nthe switch matrix will have 2^N rows and M",
    "start": "252139",
    "end": "259049"
  },
  {
    "text": "output columns, corresponding exactly to the\nsize of the truth table.",
    "start": "259049",
    "end": "264900"
  },
  {
    "text": "As the inputs to the ROM change, various decoder\noutputs will turn off and on, but at slightly",
    "start": "264900",
    "end": "270610"
  },
  {
    "text": "different times.",
    "start": "270610",
    "end": "272888"
  },
  {
    "text": "As the decoder lines cycle, the output values\nmay change several times until the final configuration",
    "start": "272889",
    "end": "278889"
  },
  {
    "text": "of the pulldown switches is stable.",
    "start": "278889",
    "end": "280990"
  },
  {
    "text": "So ROMs are not lenient and the outputs may\nshow the glitchy behavior discussed earlier.",
    "start": "280990",
    "end": "287449"
  },
  {
    "text": "Whew!",
    "start": "287449",
    "end": "288449"
  },
  {
    "text": "This has been a whirlwind tour of various\ncircuits we can use to implement logic functions.",
    "start": "288449",
    "end": "293729"
  },
  {
    "text": "The sum-of-products approach lends itself\nnicely to implementation with inverting logic.",
    "start": "293729",
    "end": "298840"
  },
  {
    "text": "Each circuit is custom-designed to implement\na particular function and as such can be made",
    "start": "298840",
    "end": "303639"
  },
  {
    "text": "both fast and small.",
    "start": "303639",
    "end": "306500"
  },
  {
    "text": "The design and manufacturing expense of creating\nsuch circuits is worthwhile when you need",
    "start": "306500",
    "end": "310819"
  },
  {
    "text": "high-end performance or are producing millions\nof devices.",
    "start": "310819",
    "end": "316120"
  },
  {
    "text": "MUX and ROM circuit implementations are mostly\nindependent of the specific function to be",
    "start": "316120",
    "end": "321030"
  },
  {
    "text": "implemented.",
    "start": "321030",
    "end": "322030"
  },
  {
    "text": "That's determined by a separate programming\nstep, which may be completed after the manufacture",
    "start": "322030",
    "end": "326490"
  },
  {
    "text": "of the devices.",
    "start": "326490",
    "end": "328310"
  },
  {
    "text": "They are particularly suited for prototyping,\nlow-volume production, or devices where the",
    "start": "328310",
    "end": "332930"
  },
  {
    "text": "functionality may need to be updated after\nthe device is out in the field.",
    "start": "332930",
    "end": "337009"
  }
]