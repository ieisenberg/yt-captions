[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6050"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6050",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12690",
    "end": "20814"
  },
  {
    "text": "PROFESSOR: Right, so now\nI'm going to walk you through some examples. And just so you know where\nthis stuff is-- so you all",
    "start": "20814",
    "end": "29490"
  },
  {
    "text": "have your LLGrid accounts. And in your LLGrid accounts--\nand I'm looking over here because these people are\ngoing to check to make sure",
    "start": "29490",
    "end": "35440"
  },
  {
    "text": "I don't say anything wrong. So this is, by the way,\nthis is [INAUDIBLE] over here and Julie Mullin.",
    "start": "35440",
    "end": "40670"
  },
  {
    "text": "They are our expert consultants,\nPhDs in computational science,",
    "start": "40670",
    "end": "45780"
  },
  {
    "text": "that help you all. And we're all eternally\ngrateful to them for helping us get all\nthis technology to work.",
    "start": "45780",
    "end": "54080"
  },
  {
    "text": "So if you go to\nyour LLGrid account, there should be a link\nin there called Tools.",
    "start": "54080",
    "end": "62332"
  },
  {
    "text": "This is where all the\nsoftware is that we provide as part of LLGrid. And there'll be one\ncalled d4m_api in there.",
    "start": "62332",
    "end": "68510"
  },
  {
    "text": "So there'll be a\nfolder just like this. And just so you know-- so all\nthe lectures are there for you.",
    "start": "68510",
    "end": "77490"
  },
  {
    "text": "And I am putting them all\nin for public release. And all the software we're going\nto post on the internet too.",
    "start": "77490",
    "end": "83159"
  },
  {
    "text": "And so just make\nit easier for you to use, use with\nyour government-- use",
    "start": "83160",
    "end": "88530"
  },
  {
    "text": "with your sponsors,\nuse with your projects, all that kind of stuff. We try and do that so that\npeople aren't constantly asking",
    "start": "88530",
    "end": "94860"
  },
  {
    "text": "us, well, what can I share? It's like, I'm going to\nput it on the internet. So there you go. ",
    "start": "94860",
    "end": "102240"
  },
  {
    "text": "We want to focus on the\nexamples directory here.  The order of the examples\nis numerical order.",
    "start": "102240",
    "end": "110860"
  },
  {
    "text": "So we are going to\ngo through examples in the folder called one\nand then two and then three.",
    "start": "110860",
    "end": "116640"
  },
  {
    "text": "And this really corresponds\nto kind of the first three lectures, then the\nnext three lectures, then the next\nthree lectures, OK?",
    "start": "116640",
    "end": "124649"
  },
  {
    "text": "And so today, we're going to\ngo in here to this first one. And then here is kind of like\nthe first three of those three.",
    "start": "124650",
    "end": "131465"
  },
  {
    "text": "We're going to go\nand we're going to review this set here, OK?",
    "start": "131465",
    "end": "137530"
  },
  {
    "text": "So these are the-- the examples\nof have this sort of-- they basically take the\nfirst two letters",
    "start": "137530",
    "end": "143760"
  },
  {
    "text": "of the folder-- in this case,\n[INAUDIBLE] intro AI 1234.",
    "start": "143760",
    "end": "149540"
  },
  {
    "text": "Those are the actual examples. If you see other files in there,\nthose are supporting files. You don't run those directly.",
    "start": "149540",
    "end": "155504"
  },
  {
    "text": " So I'm going to start my--\nI'm going to-- I always run",
    "start": "155505",
    "end": "160939"
  },
  {
    "text": "MATLAB from the shell. Other people run\nit from the IDE. I'm going to create\na shell here.",
    "start": "160940",
    "end": "167319"
  },
  {
    "text": " [INAUDIBLE] folder.",
    "start": "167320",
    "end": "173099"
  },
  {
    "text": "I'm going to start my MATLAB up. This will take a\nminute because we're reusing 2012B, which is a little\nbit slower on this computer.",
    "start": "173100",
    "end": "186238"
  },
  {
    "text": "All right, there we go. ",
    "start": "186238",
    "end": "193016"
  },
  {
    "text": "And you'll be pleased\nto know I develop all the [? D form ?] software\non this little computer.",
    "start": "193016",
    "end": "198312"
  },
  {
    "text": "And people are going,\nwell, why don't you get a big giant workstation\nto develop your programs on?",
    "start": "198312",
    "end": "203410"
  },
  {
    "text": "It's like, well, because\nif it feels OK for me on this computer, I\nknow that most of you have much better computers.",
    "start": "203410",
    "end": "209270"
  },
  {
    "text": "And it will feel-- should feel\nvery, very, very good for you. All right, so we're\nin the folder. And I'm just going to run the\nfirst program-- AI1_SetupTEST.",
    "start": "209270",
    "end": "216750"
  },
  {
    "start": "216750",
    "end": "223780"
  },
  {
    "text": "Actually, before we\neven get into that, the first thing you're\ngoing to want to do is check before you run\nthis that your D4M code has",
    "start": "223780",
    "end": "231920"
  },
  {
    "text": "been properly set up. The simplest way to do that\nis when you start MATLAB, if you type help D4M\nand you get a list",
    "start": "231920",
    "end": "240930"
  },
  {
    "text": "of all the functions\nin D4M, then that means that your\npath is set up properly.",
    "start": "240930",
    "end": "248050"
  },
  {
    "text": "And this is just a list of\nall the different functions. We break them down\nin different types.",
    "start": "248050",
    "end": "253900"
  },
  {
    "text": "You've got a little sort\nof like how to set up here, although a lot of this stuff\nisn't-- is written for more",
    "start": "253900",
    "end": "259100"
  },
  {
    "text": "people on the outside world. And we go through\nall the functions and we categorize the functions. You know, some are\nfunctions that we really",
    "start": "259100",
    "end": "265719"
  },
  {
    "text": "expect to use all the time. Some are functions\nthat you might use once in kind of rare instances.",
    "start": "265720",
    "end": "271745"
  },
  {
    "text": "And then we also have\nfunctions like, look, you really-- they're there. They're in the library. These are really not meant\nfor you to use, though.",
    "start": "271745",
    "end": "277830"
  },
  {
    "text": "They're really internal\nsupporting functions. But they're there\nin the library. All right, so that's the\nfirst thing you want to check",
    "start": "277830",
    "end": "285840"
  },
  {
    "text": "is to make sure that's set up. If you have any issues, send\nemail to grid-help@ll.mit.edu",
    "start": "285840",
    "end": "294680"
  },
  {
    "text": "and the people will help\nyou in and check it out. And don't be surprised if\nsome of you do have an issue.",
    "start": "294680",
    "end": "301180"
  },
  {
    "text": "This is the first time\nwe've really rolled it out to such a large audience. And so we absolutely\nexpect people to have",
    "start": "301180",
    "end": "307919"
  },
  {
    "text": "little things that will pop up. All right, so I'm going to\nrun the first example here.",
    "start": "307920",
    "end": "317960"
  },
  {
    "text": "I should say we also have\ntested all the stuff. For those of you who are utterly\naverse to commercial software,",
    "start": "317960",
    "end": "326920"
  },
  {
    "text": "depending on your\nreligious preferences, we also run with\nGNU Octave, which is the GPL version\nfor those of you",
    "start": "326920",
    "end": "332840"
  },
  {
    "text": "who refuse to run\nnon-free software. And so this-- all\nthis stuff should also",
    "start": "332840",
    "end": "338860"
  },
  {
    "text": "work with that as well\njust for those people who prefer to use that\ntype of environment. But generally,\nMATLAB-- you know,",
    "start": "338860",
    "end": "346350"
  },
  {
    "text": "it's pretty available here. And so we certainly\nencourage you to use that.",
    "start": "346350",
    "end": "353870"
  },
  {
    "text": "So we're going to run\nthe first test here. AI1_SetupTEST-- Go.",
    "start": "353870",
    "end": "361730"
  },
  {
    "text": "Yay, it worked. It's embarrassing when you're\nrecording and these don't work.",
    "start": "361730",
    "end": "367400"
  },
  {
    "text": "So I'm going to walk you through\nsome really rudimentary stuff here in this example.",
    "start": "367400",
    "end": "373780"
  },
  {
    "text": "So one of the things in D4M\nthat you're dealing with a lot is lists of strings--\nlong list of strings,",
    "start": "373780",
    "end": "382880"
  },
  {
    "text": "millions of distinct strings. Now, MATLAB has\ndata structures that",
    "start": "382880",
    "end": "388980"
  },
  {
    "text": "do support lists of strings,\ncell arrays being one of them. There's other data structure\nthat you can use to do that.",
    "start": "388980",
    "end": "395560"
  },
  {
    "text": "They naturally support these. But they tend to be very\nmemory intensive and very slow.",
    "start": "395560",
    "end": "402400"
  },
  {
    "text": "And so given our\nwhole thing here is we have a real\nfocus on performance,",
    "start": "402400",
    "end": "407970"
  },
  {
    "text": "me giving you a\ngreat tool that's 1,000 times slower than other\ntechniques is not very helpful.",
    "start": "407970",
    "end": "414520"
  },
  {
    "text": "So we are going to be\ndealing with list of strings all the time. And so in D4M, a list of strings\nis a row vector of characters,",
    "start": "414520",
    "end": "423139"
  },
  {
    "text": "OK? I've highlighted here. And the last character in the\nrow vector is the delimiter.",
    "start": "423140",
    "end": "429540"
  },
  {
    "text": "In this case, it's the comma. You're at the end. That is the delimiter. It can be whatever\nyou want it to be.",
    "start": "429540",
    "end": "437910"
  },
  {
    "text": "It can be semicolon. It can be a dash. It can be a space. I tend to recommend new line,\nwhich is ASCII character 10--",
    "start": "437910",
    "end": "447080"
  },
  {
    "text": "very safe delimiter. But whatever that last character\nis, that's the limiter.",
    "start": "447080",
    "end": "453540"
  },
  {
    "text": "And you could have different\nlists, different strings with different delimiters. It should handle those\nsituations just fine.",
    "start": "453540",
    "end": "461730"
  },
  {
    "text": " But within a list\nof strings, it needs",
    "start": "461730",
    "end": "467800"
  },
  {
    "text": "to be that-- that last\ncharacter will be the delimiter. So I'm actually\ncreating here a list.",
    "start": "467800",
    "end": "475270"
  },
  {
    "text": "I'm going to creating a\nset of triples here-- r, which is the rows, c,\nwhich is the columns, v, which is the values.",
    "start": "475270",
    "end": "481000"
  },
  {
    "text": "And so I have an\nr, which is this. I have a set of c\nhere, which is this.",
    "start": "481000",
    "end": "486650"
  },
  {
    "text": "Vector here and then\na list of values-- and the values in\nthis case are just",
    "start": "486650",
    "end": "491910"
  },
  {
    "text": "appending the row and the\ncolumn together with a dash. And all three of\nthese use the comma",
    "start": "491910",
    "end": "498360"
  },
  {
    "text": "as-- it's the last character--\nas the delimiter, all right? And now I'm going to create\nan associative array, which",
    "start": "498360",
    "end": "504400"
  },
  {
    "text": "is the fundamental\ndata structure in D4M. It's what allows us to\nbridge linear algebra",
    "start": "504400",
    "end": "509750"
  },
  {
    "text": "and strings together. So this is a constructor command\nfor an associative array--",
    "start": "509750",
    "end": "515080"
  },
  {
    "text": "so Assoc. And then we give it\na list of row keys.",
    "start": "515080",
    "end": "521030"
  },
  {
    "text": "These are called-- we often call\nthem keys-- list of column keys and a list of string values.",
    "start": "521030",
    "end": "526710"
  },
  {
    "text": "And this construct the\nassociative array a. And in MATLAB, since\nI haven't terminated this with a semicolon, it\nwill now will print out",
    "start": "526710",
    "end": "534126"
  },
  {
    "text": "the list of triples. So now you can see the list of\ntriples we can construct here was row a, column a, value a-a,\nrow aa, column a, value aa-a,",
    "start": "534127",
    "end": "547810"
  },
  {
    "text": "and I won't read the whole list. Yes, Darryl. AUDIENCE: Question. [INAUDIBLE] ",
    "start": "547810",
    "end": "556850"
  },
  {
    "text": "PROFESSOR: That is an artifact\nof this printing out display. It will show you the delimiter\nthat you actually used here",
    "start": "556850",
    "end": "563709"
  },
  {
    "text": "just as-- and it's\ngood to know that you-- AUDIENCE: It's not really there. PROFESSOR: It's\nnot really there.",
    "start": "563710",
    "end": "569149"
  },
  {
    "text": "Yeah, I mean, it's there\nand it's not there. But it's showing\nyou the delimiter. And after a while, you just\nkind of learn to ignore that.",
    "start": "569150",
    "end": "574630"
  },
  {
    "text": "The only time this does become\na little bit of an issue is that that is the\nnewline character.",
    "start": "574630",
    "end": "580060"
  },
  {
    "text": "Then the formatting\ngets a little bit-- and we've actually\nbuilt in routines that allow you to take\nan associative array,",
    "start": "580060",
    "end": "585913"
  },
  {
    "text": "replace the delimiter with\nsomething nicer in one command so that you can print it out and\ndoesn't look so crazy if you're",
    "start": "585913",
    "end": "592940"
  },
  {
    "text": "using a new line. Typically, though, you\ntend to be doing this print out command on small things.",
    "start": "592940",
    "end": "598459"
  },
  {
    "text": "So it's fine. So that's the whole\nlist, you see there,",
    "start": "598460",
    "end": "604440"
  },
  {
    "text": "of all the different entries. If you use the disp\ncommand, it will actually",
    "start": "604440",
    "end": "612590"
  },
  {
    "text": "display the internal structure\nof the associative array.",
    "start": "612590",
    "end": "617700"
  },
  {
    "text": "And an associative array object\nin D4M has four fields total.",
    "start": "617700",
    "end": "623110"
  },
  {
    "text": "That's it. We do everything with\njust four fields. And the four fields\nare a set of row keys.",
    "start": "623110",
    "end": "630189"
  },
  {
    "text": "This is a lexicographically\nsorted list of the unique row keys.",
    "start": "630190",
    "end": "637589"
  },
  {
    "text": "And it's stored\nas a string list. So in this case, we had\nsix unique row keys.",
    "start": "637590",
    "end": "643600"
  },
  {
    "text": "And we have six entries\nin this row string list.",
    "start": "643600",
    "end": "649420"
  },
  {
    "text": "Likewise, the column\nis the same thing. We have these six\nunique entries. And you see they inherit\nthe delimiter that",
    "start": "649420",
    "end": "657399"
  },
  {
    "text": "was passed into them. If I'd used different ones, you\nwould see different delimiters.",
    "start": "657400",
    "end": "662730"
  },
  {
    "text": "And then the value, which\nis another list that",
    "start": "662730",
    "end": "669050"
  },
  {
    "text": "shows all the different\nstrings, OK, and then",
    "start": "669050",
    "end": "674490"
  },
  {
    "text": "a matrix, which shows--\nwhich is a six by six matrix.",
    "start": "674490",
    "end": "679870"
  },
  {
    "text": "So this is a six by\nsix associative array. And this is the pointer.",
    "start": "679870",
    "end": "686490"
  },
  {
    "text": "Basically, the value stored in a\nsix by six sparse matrix points to the index of the value.",
    "start": "686490",
    "end": "694470"
  },
  {
    "text": "So you can view that as\na pointer to the values. And this is how\nwe can have values that are actually strings.",
    "start": "694470",
    "end": "700180"
  },
  {
    "text": "That may not be quite clear. There's an easier\nway to do this. So we have a little routine\nfunction here called",
    "start": "700180",
    "end": "705430"
  },
  {
    "text": "displayFull, which produces a\nnice tabular view of the data.",
    "start": "705430",
    "end": "711839"
  },
  {
    "text": "So here's the row keys, the\ncolumn keys, and the values. And you see this was the\nmatrix I constructed.",
    "start": "711840",
    "end": "718900"
  },
  {
    "text": "You had a full first\ncolumn and a full first row and then values\nalong the diagonal.",
    "start": "718900",
    "end": "726320"
  },
  {
    "text": " And then what we're going to\ndo is we want to save this.",
    "start": "726320",
    "end": "733651"
  },
  {
    "text": "We want to write it out. So we're going to\nwrite it out to-- we have a function\n[INAUDIBLE] assoc to CSV.",
    "start": "733651",
    "end": "738660"
  },
  {
    "text": "So I pass an associative array. I give it the row terminator and\nthe column separator and a file",
    "start": "738660",
    "end": "745144"
  },
  {
    "text": "name and we'll\nwrite that data out to a CSV file, which\nis very convenient.",
    "start": "745144",
    "end": "750750"
  },
  {
    "text": "[INAUDIBLE] actually hide that. You can see here\nis the CSV file.",
    "start": "750750",
    "end": "757490"
  },
  {
    "text": "So you can look at it. There's the CSV file. You can zoom in on that for you.",
    "start": "757490",
    "end": "764322"
  },
  {
    "text": "Can you see? There we go. Those are our six rows, six\ncolumns against first row,",
    "start": "764322",
    "end": "770890"
  },
  {
    "text": "against first column, and\nour diagonal, all right? ",
    "start": "770890",
    "end": "778480"
  },
  {
    "text": "All right, so\nlet's go back here. Now let's go to\nour next example,",
    "start": "778480",
    "end": "784990"
  },
  {
    "text": "which is going to be AI2. And now we're going\nto talk about how-- we sort of described how we put\ndata into an associative array.",
    "start": "784990",
    "end": "791839"
  },
  {
    "text": "We're now going to talk about\nhow we query it or get data out of the associative array. And one thing that's very\nnice about the queries",
    "start": "791839",
    "end": "798190"
  },
  {
    "text": "that I will show you as\nwe get to the later parts of the [? course ?]\nwe do databases, whether you're querying\nan associate array that's",
    "start": "798190",
    "end": "804440"
  },
  {
    "text": "in memory or binding to\na table, it's the same. We try and make it so\nthat almost everything you",
    "start": "804440",
    "end": "811510"
  },
  {
    "text": "would do in an associate array,\nyou could also do on a table. So you can write your\nprograms in associative arrays",
    "start": "811510",
    "end": "816810"
  },
  {
    "text": "and then switch a\ncouple things and now it should also work on tables\nin the database the same way. And so we try and\npreserve that concept.",
    "start": "816810",
    "end": "823300"
  },
  {
    "text": "The only difference is that a\ntable [? in ?] databases just can be much, much bigger than\nan associative array you would",
    "start": "823300",
    "end": "830880"
  },
  {
    "text": "have in your memory space. All right, so you're\ngoing to run that.",
    "start": "830880",
    "end": "835900"
  },
  {
    "text": "That's the next example. So the first thing\nwe did is when we wrote out the\nassociate array, we're going to read it back in.",
    "start": "835900",
    "end": "841720"
  },
  {
    "text": "So we have a nice\nfunction here called ReadCSV that reads CSV files.",
    "start": "841720",
    "end": "847605"
  },
  {
    "text": " Just so you know,\nMicrosoft Excel",
    "start": "847605",
    "end": "854149"
  },
  {
    "text": "does write out a\nnon-standard CSV file. Microsoft Excel\n[INAUDIBLE] common-- that",
    "start": "854150",
    "end": "861089"
  },
  {
    "text": "is, if you have a row that is\nempty after a certain point,",
    "start": "861090",
    "end": "870310"
  },
  {
    "text": "it won't write out those commas,\nwhich is technically probably",
    "start": "870310",
    "end": "875540"
  },
  {
    "text": "not conformant with the\nofficial CSV format, although I don't know there is\na sufficiently written down CSV format, right?",
    "start": "875540",
    "end": "881120"
  },
  {
    "text": "You can describe it in one line. So you just have to\nbe careful about that. If you see this issue, people\nwrite out a CSV from Excel.",
    "start": "881120",
    "end": "888084"
  },
  {
    "text": "And if there's an empty\nlast-- if it's last row is not",
    "start": "888085",
    "end": "894240"
  },
  {
    "text": "fully dense or if its last\ncolumn is not a dense column, you can get this issue and\nit will screw this stuff up.",
    "start": "894240",
    "end": "903440"
  },
  {
    "text": "We also don't support\nquoted strings. Way to do that, though,\nis to create a TSV file.",
    "start": "903440",
    "end": "908834"
  },
  {
    "text": "So put tabs in there. And we support tab-- just, if\nyou just call this a TSV file,",
    "start": "908835",
    "end": "915366"
  },
  {
    "text": "when you write it\nout, you can have your separator via tab\ninstead of column, a comma, and then you're all good.",
    "start": "915367",
    "end": "920490"
  },
  {
    "text": "And so that's how\nwe support that. So we're going to now-- so\nthat's how you read it in. And now we're going\nto do a whole bunch",
    "start": "920490",
    "end": "926960"
  },
  {
    "text": "of different queries. These are all what are\nrelatively complicated queries. So the first one here\nis get me rows a and b.",
    "start": "926960",
    "end": "936430"
  },
  {
    "text": "So if I pass in a string\nlist just like the-- whoops, didn't want to do that.",
    "start": "936430",
    "end": "943000"
  },
  {
    "text": "Let's see here. We pass in a string list of the\nsame type that I have before. And I just say this exact\nsame type of indexing",
    "start": "943000",
    "end": "951640"
  },
  {
    "text": "that we normally have in\nMATLAB where you're like, I want to get it a set of rows. I give it a set of rows.",
    "start": "951640",
    "end": "956990"
  },
  {
    "text": "And so this says,\nget me rows a and b. And give me the\nwhole row-- colon--",
    "start": "956990",
    "end": "962980"
  },
  {
    "text": "use the standard MATLAB syntax\nthat colon means full row. Likewise, if a was a\nbinding to a table,",
    "start": "962980",
    "end": "968779"
  },
  {
    "text": "it would deliver the exact\nsame query to the database and return the exact same\nthing in associative array.",
    "start": "968780",
    "end": "975130"
  },
  {
    "text": "Here's another more\ncomplicated that says get me all rows containing a.",
    "start": "975130",
    "end": "982560"
  },
  {
    "text": "So our wild card character\nis a little liberal here. It will just give you\nanything containing an a.",
    "start": "982560",
    "end": "987660"
  },
  {
    "text": "It doesn't really respect\nbeginnings or endings or anything like that. It's kind of a\nregular expression.",
    "start": "987660",
    "end": "994100"
  },
  {
    "text": "And this says get any row\ncontaining a and column's one",
    "start": "994100",
    "end": "1000490"
  },
  {
    "text": "through three. So we can use numerical indexes. Sometimes, you're\njust like, I don't",
    "start": "1000490",
    "end": "1005890"
  },
  {
    "text": "care what the row keys are. Just give me the first 10\ncolumns or the first 10 rows. And that will return this, OK?",
    "start": "1005890",
    "end": "1015379"
  },
  {
    "text": "This is one feature that does\nnot work on all databases. Some database have a\nconcept-- the numerical index",
    "start": "1015380",
    "end": "1025109"
  },
  {
    "text": "of a column. And some databases do not. So it's dependent on\nthe actual database.",
    "start": "1025109",
    "end": "1030918"
  },
  {
    "text": "Here's another one. This is a range query. So if you remember in MATLAB,\nif you do colon and two values,",
    "start": "1030919",
    "end": "1036199"
  },
  {
    "text": "it gives you a range. So we can do a range query here. So a-- give me all\ncolumns a through b.",
    "start": "1036200",
    "end": "1045140"
  },
  {
    "text": "If you really\nwanted to just get-- we have something called a\nstarts with, which is something like-- a lot of\ntimes, you'll be like,",
    "start": "1045140",
    "end": "1050683"
  },
  {
    "text": "I want to just get the\nrows or the columns that begin with a certain string. So we have a little\nshorthand routine here",
    "start": "1050683",
    "end": "1057280"
  },
  {
    "text": "that constructs that for you. So this says, get me all\nrows starting with a and c.",
    "start": "1057280",
    "end": "1062572"
  },
  {
    "text": "Likewise, I can do the\nsame thing with columns. I can say get me\ncolumns a and b. I can say get me all columns\nthat contain a with columns--",
    "start": "1062572",
    "end": "1073960"
  },
  {
    "text": "with rows one through three. Like I said, I can do\ncolumn ranges here. I can say, give me\nall columns a to b.",
    "start": "1073960",
    "end": "1080790"
  },
  {
    "text": "Likewise, I can do the\nstarts with command as well as give me all\ncolumns starting with a or c.",
    "start": "1080790",
    "end": "1088540"
  },
  {
    "text": "And then finally, I\nthink this kind of fun, we can actually\nquery the values. Again, this is a\nfeature that's not",
    "start": "1088540",
    "end": "1094899"
  },
  {
    "text": "in-- [? it's ?] supported\nwith the database. But it is supported with\nthe associate array, which is if I say get me all-- return\nan associative array were",
    "start": "1094900",
    "end": "1103850"
  },
  {
    "text": "all the values are greater than\nb-- I'm sorry, less than b, OK?",
    "start": "1103850",
    "end": "1109830"
  },
  {
    "text": "So let me just show you\nwhat that looks like. So this was that query. And this is what it looks like.",
    "start": "1109830",
    "end": "1115800"
  },
  {
    "text": "So I do display\na-- and you see now we don't have any\nvalues that begin",
    "start": "1115800",
    "end": "1121809"
  },
  {
    "text": "with a b-- all the values, OK? Another thing that\nwe should notice here",
    "start": "1121810",
    "end": "1127080"
  },
  {
    "text": "is that this is now a three\nby three matrix, not a six by six matrix.",
    "start": "1127080",
    "end": "1132700"
  },
  {
    "text": "Associative arrays\nnever store an empty row or an empty column.",
    "start": "1132700",
    "end": "1138160"
  },
  {
    "text": "That is a big difference\nbetween traditional sparse linear algebra and\nassociative arrays.",
    "start": "1138160",
    "end": "1144142"
  },
  {
    "text": "In sparse linear\nalgebra, you could have a row of all\nzero-- an empty row or an empty column, not\nan associative arrays.",
    "start": "1144142",
    "end": "1151700"
  },
  {
    "text": "Associative arrays,\nyou either have-- there's going to be-- if\nyou have a row or column,",
    "start": "1151700",
    "end": "1157650"
  },
  {
    "text": "it's going to have\nan [? entry-- ?] yes. AUDIENCE: [INAUDIBLE] ",
    "start": "1157650",
    "end": "1166279"
  },
  {
    "text": "PROFESSOR: So\nbasically, all it does-- so it's basically-- so if we\nhad a value to begin with,",
    "start": "1166280",
    "end": "1173510"
  },
  {
    "text": "c, that would also\nnot be included. So it's basically--\nlexographically, we compare the value aa with b.",
    "start": "1173510",
    "end": "1181070"
  },
  {
    "text": "And we say, is it\nlexographically before b? If so, it satisfies\nthe condition. AUDIENCE: [INAUDIBLE] ",
    "start": "1181070",
    "end": "1190700"
  },
  {
    "text": "PROFESSOR: Yes, yes. So that's the policy\nthat we [? made-- ?] so strictly, the algebra\nof associate arrays",
    "start": "1190700",
    "end": "1197380"
  },
  {
    "text": "doesn't require\nlexographical ordering. That's an implementation fact. It's a very important\nimplementation fact.",
    "start": "1197380",
    "end": "1204440"
  },
  {
    "text": "We are constantly maintaining\nlexicographical order inside the data structure.",
    "start": "1204440",
    "end": "1210009"
  },
  {
    "text": "Yeah, Darryl? AUDIENCE: [INAUDIBLE]  PROFESSOR: That's right,\nyeah-- three by six,",
    "start": "1210009",
    "end": "1215620"
  },
  {
    "text": "sorry, three by six. Yes, yes-- because these\nare full here, right?",
    "start": "1215620",
    "end": "1221230"
  },
  {
    "text": "But you see that the ones--\nnone of the ones with b in it",
    "start": "1221230",
    "end": "1226510"
  },
  {
    "text": "happened because they\ndidn't satisfy criteria. So therefore, they're empty. And so therefore-- so just\nvery important thing to know.",
    "start": "1226510",
    "end": "1234540"
  },
  {
    "text": "All right, moving on\nhere to the next-- AUDIENCE: [INAUDIBLE] ",
    "start": "1234540",
    "end": "1240307"
  },
  {
    "text": "PROFESSOR: You define\nother [? orderings. ?] The mathematics would\nno doubt admit that.",
    "start": "1240307",
    "end": "1245410"
  },
  {
    "text": "It's really backed in, though,\ninto the implementation. I mean, because we rely on\nthe MATLAB sort command--",
    "start": "1245410",
    "end": "1252790"
  },
  {
    "text": "and as far as I know,\nthat does not allow you to have other orderings. Now, you could\nobviously do rehashed.",
    "start": "1252790",
    "end": "1259299"
  },
  {
    "text": "You could hash your rows\nand keys to some other thing and then have an associate array\nthat maps those back and forth.",
    "start": "1259300",
    "end": "1265010"
  },
  {
    "text": "And in fact, people do that\nall the time and just have-- and you could do that. But that's how-- and if\nyou really, really want",
    "start": "1265010",
    "end": "1270950"
  },
  {
    "text": "the order-- the\nmain thing, though, is to kind of think\nof it, though, is that the ordering\ndoesn't really matter. It's really a device that\nallows me to do fast lookups.",
    "start": "1270950",
    "end": "1277960"
  },
  {
    "text": "And you shouldn't really\ncare about the ordering.",
    "start": "1277960",
    "end": "1283380"
  },
  {
    "text": "So let's move on to\nthe next example. So actually-- so\nwe're going to do AI3.",
    "start": "1283380",
    "end": "1288550"
  },
  {
    "text": "So now we're going to do\nsome math on this stuff, OK? So here we go.",
    "start": "1288550",
    "end": "1295050"
  },
  {
    "text": "All right, so once\nagain, I read in my data that I constructed\nin the first example. ",
    "start": "1295050",
    "end": "1302570"
  },
  {
    "text": "The values of that\ndata are strings. But if I want to do\nmath, sometimes I",
    "start": "1302570",
    "end": "1308220"
  },
  {
    "text": "don't want to do\nmath on strings. Sometimes, I want to\ndo math on numbers. So in D4M, the associate\narrays can also",
    "start": "1308220",
    "end": "1314450"
  },
  {
    "text": "be numbers, which can be\nvery convenient for doing mathematical operations.",
    "start": "1314450",
    "end": "1319970"
  },
  {
    "text": "And so what we have here\nis we have this command called dblLogi, which\nis a shorthand for--",
    "start": "1319970",
    "end": "1327990"
  },
  {
    "text": "and it's kind of cut\noff here-- applying logical to the associate array,\nwhich takes all the values",
    "start": "1327990",
    "end": "1335209"
  },
  {
    "text": "and converts them just\nto a zero or a one-- basically throws\naway the strings. Or if it was a numeric value,\njust [INAUDIBLE] are you there?",
    "start": "1335209",
    "end": "1341150"
  },
  {
    "text": "You're a one. You're not there, you're\na zero or you're empty. And then since we\ncan't do arithmetic",
    "start": "1341150",
    "end": "1346950"
  },
  {
    "text": "on logicals in MATLAB, we have\nto bump them back into doubles. So we do this so\noften, we've actually",
    "start": "1346950",
    "end": "1352250"
  },
  {
    "text": "made a little shorthand\nhere where we call dblLogi. And you'll see that all the\ntime in the class because I just",
    "start": "1352250",
    "end": "1357670"
  },
  {
    "text": "don't like to type all\nthe characters [INAUDIBLE] writing double logical\ngets very redundant.",
    "start": "1357670",
    "end": "1362770"
  },
  {
    "text": "Now, if we go and look\nat that data again, we see when you do\ndisplayFull that instead of where\nbefore we had values",
    "start": "1362770",
    "end": "1369260"
  },
  {
    "text": "of these various strings,\nwe just now have numbers-- just ones. So that's convenient.",
    "start": "1369260",
    "end": "1374750"
  },
  {
    "text": "Now I can do arithmetic on them. So let me do the\nfirst thing here.",
    "start": "1374750",
    "end": "1380111"
  },
  {
    "text": "One of the things\nI might want to do is sum all the rows-- so\nthe MATLAB sum command.",
    "start": "1380111",
    "end": "1386030"
  },
  {
    "text": "It's basically-- you're giving\nit essentially the dimension to eliminate. The first dimension we want\nto eliminate or sum over",
    "start": "1386030",
    "end": "1393320"
  },
  {
    "text": "is the row dimensions. So that means it's\nsumming up all these rows. It's basically squishing the\nmatrix and summing them up.",
    "start": "1393320",
    "end": "1400614"
  },
  {
    "text": "And now we have a new\nassociative array, which is essentially a one\nby six associative array. You see now that the\nrow key is empty.",
    "start": "1400614",
    "end": "1408240"
  },
  {
    "text": "Because when we\nsum, the definitions of the rows sort\nof kind of go away. So we don't-- you don't have\nto have strings to be your row",
    "start": "1408240",
    "end": "1415310"
  },
  {
    "text": "keys. You can have numeric row keys. Just leave the row entry empty.",
    "start": "1415310",
    "end": "1424590"
  },
  {
    "text": "But there are some\ncautions with that as well. So when we sum that and\nyou see [INAUDIBLE] we have all the\ncolumns, the values,",
    "start": "1424590",
    "end": "1430489"
  },
  {
    "text": "because they're not\nstrings, are just stored in this a matrix itself.",
    "start": "1430489",
    "end": "1436440"
  },
  {
    "text": "And you see that we had six\nand two and two and two and two and two. So when we sum these up, that's\nexactly what you would expect.",
    "start": "1436440",
    "end": "1442529"
  },
  {
    "text": " Moving along, we\ncan do the columns.",
    "start": "1442530",
    "end": "1448480"
  },
  {
    "text": "So here I'm going to sum. And then I'm going to do display\nfull, which is the same as just kind of listing it.",
    "start": "1448480",
    "end": "1453890"
  },
  {
    "text": "And we see here we now sum the--\ncompressed all the columns.",
    "start": "1453890",
    "end": "1459425"
  },
  {
    "text": "So we have a column vector. And this shows the row\nlabels of that column vector. We now have a new column\nlabel, which is just one.",
    "start": "1459425",
    "end": "1466510"
  },
  {
    "text": "And then you see the actual\nvalues there-- again, a very useful thing. People do this all\nthe time summing",
    "start": "1466510",
    "end": "1472159"
  },
  {
    "text": "of their rows and columns. Let's do a simple join.",
    "start": "1472160",
    "end": "1477620"
  },
  {
    "text": "So I'm going to say give me\na column vector A. Get me",
    "start": "1477620",
    "end": "1483010"
  },
  {
    "text": "another column vector b, right? And now I'm going to\njoin these two together.",
    "start": "1483010",
    "end": "1488500"
  },
  {
    "text": "Now, I could just do aa and ab. But I'd get an empty matrix.",
    "start": "1488500",
    "end": "1494720"
  },
  {
    "text": "The reason is because it\nwould attempt to do the joins and they would have\ndifferent column labels. And so when we do joins,\nwe're intersecting",
    "start": "1494720",
    "end": "1502059"
  },
  {
    "text": "the two sets of row and\ncolumn keys together. And if they have sep-- those\nare just separate columns.",
    "start": "1502060",
    "end": "1508740"
  },
  {
    "text": "They add them together,\nthey have no intersection. However, if we have this\nfunction called no call, which",
    "start": "1508740",
    "end": "1514440"
  },
  {
    "text": "is actually blows\naway the column and basically gives them all,\nin this case a column value one, we can now add them together.",
    "start": "1514440",
    "end": "1520480"
  },
  {
    "text": "And we can actually\nfind where these two things have a common value.",
    "start": "1520480",
    "end": "1526390"
  },
  {
    "text": "So that's a fairly\nsimple way to do a join.  This is something called a facet\nsearch, which basically says,",
    "start": "1526390",
    "end": "1534649"
  },
  {
    "text": "all right, I'm going to\njoin these things together. So I'm going to create\na column vector.",
    "start": "1534650",
    "end": "1542740"
  },
  {
    "text": "But then I'm going to\ntranspose that over here. So I transpose it. And then I'm going\nto multiply it back",
    "start": "1542740",
    "end": "1548193"
  },
  {
    "text": "with the original matrix. This gives me a count of\nessentially all-- given all columns, all\nrows that contained--",
    "start": "1548193",
    "end": "1556630"
  },
  {
    "text": "had an entry in column a and B,\ncan you now sum up their rows? And this is a fairly--\nthis is actually",
    "start": "1556630",
    "end": "1564270"
  },
  {
    "text": "the mathematical basis of, if\nyou ever do in Google search it does auto-find,\nit's essentially",
    "start": "1564270",
    "end": "1571090"
  },
  {
    "text": "trying to do this\ntype of operation. It's trying to guess what the\nnext most popular topic would be. And this is essentially--\nthis mathematical operation",
    "start": "1571090",
    "end": "1578230"
  },
  {
    "text": "does that kind of thing. We actually have a bunch\nof applications in lab that use this quite heavily.",
    "start": "1578230",
    "end": "1583930"
  },
  {
    "text": "And I can display the\ntranspose of that-- so to make it a column vector. And as you see here, we\nhave a bunch of columns here",
    "start": "1583930",
    "end": "1591140"
  },
  {
    "text": "and then values. And then we can actually do\nthings like sum and normalize. So we can divide.",
    "start": "1591140",
    "end": "1596909"
  },
  {
    "text": "So I'm going to normalize them. You can display that. You see now you get the\nprobabilities associated with these things.",
    "start": "1596910",
    "end": "1603310"
  },
  {
    "text": "Just basically, you\ncan just kind of go on your way doing math.",
    "start": "1603310",
    "end": "1608340"
  },
  {
    "text": "This shows essentially the\ncorrelation of the columns a and b. But why not just do all\nthe correlations at once?",
    "start": "1608340",
    "end": "1614340"
  },
  {
    "text": "So I'll focus on here. So we have this\nfunction square in, which is the same as a\ntranspose a but a little bit",
    "start": "1614340",
    "end": "1621440"
  },
  {
    "text": "faster if you're just squaring\nsomething with itself. I'm going to get the\ndiagonal of that.",
    "start": "1621440",
    "end": "1627680"
  },
  {
    "text": "So if I use this function Adj,\nwhich stands for adjacency,",
    "start": "1627680",
    "end": "1632880"
  },
  {
    "text": "it'll just pop out that\na matrix by itself. Whenever you use\nAdj, you're getting a straight sparse MATLAB matrix.",
    "start": "1632880",
    "end": "1641340"
  },
  {
    "text": "And you can do any\noperation on that that you want that\nMATLAB supports. So it's a really-- I\nhighly recommend that.",
    "start": "1641340",
    "end": "1646460"
  },
  {
    "text": "If you can't figure\nout how to do it with associate\narrays [INAUDIBLE] just pop up that\nadjacency matrix. Do whatever you want.",
    "start": "1646460",
    "end": "1652160"
  },
  {
    "text": "And then you can just-- as long\nas you didn't change the size, you can just stuff it right\nback in at essentially no cost.",
    "start": "1652160",
    "end": "1658500"
  },
  {
    "text": "So this is basically\ncopies that field out. And we're going to\nget the diagonal. The reason we want\nto get the diagonal",
    "start": "1658500",
    "end": "1663965"
  },
  {
    "text": "is when we do correlations, we\nalways get this dense diagonal. I want to eliminate that. So I'm going to then now\ntake the adjacency matrix",
    "start": "1663965",
    "end": "1673370"
  },
  {
    "text": "of the original correlation\nmatrix, subtract the diagonal. And then we have this\nfunction [? putAdj, ?] which",
    "start": "1673370",
    "end": "1679490"
  },
  {
    "text": "is kind of the inverse\nof Adj, which just says I have an associative array.",
    "start": "1679490",
    "end": "1685059"
  },
  {
    "text": "Replace that a with this. No checking, instantaneous\ncopy, very fast,",
    "start": "1685060",
    "end": "1693760"
  },
  {
    "text": "but make sure it's\nthe right size. If it's the wrong size\nor you've reoriented",
    "start": "1693760",
    "end": "1699580"
  },
  {
    "text": "the columns in some way\nor the rows in some way, then it won't make any sense. So it's a little bit\nof an advanced feature,",
    "start": "1699580",
    "end": "1705571"
  },
  {
    "text": "but it's a very powerful one. You can pop stuff in and out of\nthese structures very quickly. And that way, if you\never need to do math",
    "start": "1705572",
    "end": "1712750"
  },
  {
    "text": "that we don't support, you\ncan just do that directly. And so if we look\nat that, we see",
    "start": "1712750",
    "end": "1718000"
  },
  {
    "text": "what you would expect-- a\nnice correlation matrix here, symmetric with no diagonal\nand the counts of each one.",
    "start": "1718000",
    "end": "1726799"
  },
  {
    "text": "Right here-- so let me\nmove on to the next example here, which is AI4.",
    "start": "1726800",
    "end": "1734320"
  },
  {
    "text": "And this just shows\nyou different ways to construct associative\narrays, some of the various kind of more degenerate cases.",
    "start": "1734320",
    "end": "1741770"
  },
  {
    "text": "So I have a bench [INAUDIBLE]\ncreating a string here and a bunch of numeric values.",
    "start": "1741770",
    "end": "1747760"
  },
  {
    "text": "The point here is when you\nconstruct an associative array, one, we have full\nsupport for all",
    "start": "1747760",
    "end": "1753090"
  },
  {
    "text": "these degenerate\nempty conditions. You give me anything\nwith any kind of empty, we're going to return an\nempty associative array.",
    "start": "1753090",
    "end": "1760020"
  },
  {
    "text": "MATLAB has outstanding\nsupport for empty objects. You can just keep on passing. You don't have\nto-- we basically--",
    "start": "1760020",
    "end": "1766040"
  },
  {
    "text": "what I'm saying is we\ndo a lot of checking. If the thing is\nempty, short circuit, return an empty type of thing.",
    "start": "1766040",
    "end": "1771730"
  },
  {
    "text": "So you're not having\nto constantly check if something is empty or\nnot in order to proceed.",
    "start": "1771730",
    "end": "1777740"
  },
  {
    "text": "So that's what we do there. That's just showing you\nall these [? supported. ?] In addition, you\ncan do mixed types.",
    "start": "1777740",
    "end": "1784210"
  },
  {
    "text": "So when you construct\nan associative array, if one of the values is a\nscalar-- like, for instance,",
    "start": "1784210",
    "end": "1789820"
  },
  {
    "text": "you can have that. You don't-- you know normally,\nas in the MATLAB sparse constructor, when you\ngive it a set of triples,",
    "start": "1789820",
    "end": "1797220"
  },
  {
    "text": "they all have to\nbe the same length. Or any one of them can-- or\nany of them can be scalars. So this just says, I have\na bunch of columns strings,",
    "start": "1797220",
    "end": "1805220"
  },
  {
    "text": "a bunch of numeric values. Oh and by the way, they\nall have the same row.",
    "start": "1805220",
    "end": "1810690"
  },
  {
    "text": "So this is a very quick way\nto construct a row vector. I don't have to go and\nreplicate this a that many times",
    "start": "1810690",
    "end": "1819200"
  },
  {
    "text": "to make this work. Likewise here, I could\nhave a numeric value for the actual rows, a\nstring value for the columns.",
    "start": "1819200",
    "end": "1830070"
  },
  {
    "text": "And I want everyone to\nhave the same value. They're all going to\nhave the value of a. And you can do\nvariations on that theme.",
    "start": "1830070",
    "end": "1836679"
  },
  {
    "text": "So you do-- these are fast\nways to create row columns, row vectors, or column\nvectors or values",
    "start": "1836680",
    "end": "1843830"
  },
  {
    "text": "with all or constant\nnumeric value and other types of\nthings like that. And then we can just\ndisplay one of these.",
    "start": "1843830",
    "end": "1850164"
  },
  {
    "text": "And you see here-- I think it\nwas which one we displayed-- this first one, which is a row.",
    "start": "1850164",
    "end": "1855220"
  },
  {
    "text": "And you can see when you\ndisplay that, it just has one value for the row. These are the different columns. These are the different values.",
    "start": "1855220",
    "end": "1861302"
  },
  {
    "text": "Then again, if we\ndisplay full, you see in the tabular form\nthat's what you have. So that brings us to the\nend of the first lecture.",
    "start": "1861302",
    "end": "1870640"
  },
  {
    "text": "I'm happy to stay for questions\nthat people might have. Please go and check out\nyour LLGrid account.",
    "start": "1870640",
    "end": "1878260"
  },
  {
    "text": "Copy the examples. Don't try and work\nout of the-- you'll get, like, permission denied\nerrors and stuff like that.",
    "start": "1878260",
    "end": "1884140"
  },
  {
    "text": "Copy the examples to\nyour home directory. Try and get your D4M working. Try and run just\nthis first example.",
    "start": "1884140",
    "end": "1889870"
  },
  {
    "text": "Make sure it behaves the\nsame way that we had here. And then send\nemail to grid-help.",
    "start": "1889870",
    "end": "1896679"
  },
  {
    "text": "And then as we get\ninto the next week, we'll do homeworks that are a\nlittle bit more substantive. But this is just to make\nsure the technology is",
    "start": "1896680",
    "end": "1903480"
  },
  {
    "text": "working for you. And that's-- we'll\nwrap it up there.",
    "start": "1903480",
    "end": "1909250"
  },
  {
    "text": "Thank you. ",
    "start": "1909250",
    "end": "1915482"
  }
]