[
  {
    "start": "0",
    "end": "95000"
  },
  {
    "text": "[SQUEAKING][RUSTLING][CLICKING] ",
    "start": "0",
    "end": "12509"
  },
  {
    "text": "JASON KU: Welcome, everybody,\nto our lecture 14 of 6.006. This is our last lecture\non graph algorithms,",
    "start": "12510",
    "end": "21240"
  },
  {
    "text": "in particular, the\nlast lecture we'll have on weighted shortest paths.",
    "start": "21240",
    "end": "28350"
  },
  {
    "text": "But we're going to talk about\na slightly different problem today, different than single\nsource shortest paths.",
    "start": "28350",
    "end": "35970"
  },
  {
    "text": "We're going to be talking\nabout all-pairs shortest paths. But first, let's review\nour single source",
    "start": "35970",
    "end": "43379"
  },
  {
    "text": "shortest paths algorithms. We had BFS, DAG\nrelaxation, Dijkstra,",
    "start": "43380",
    "end": "49740"
  },
  {
    "text": "which we saw last time, which\ngets pretty close to linear. V log V plus E is\npretty close to linear.",
    "start": "49740",
    "end": "59190"
  },
  {
    "text": "It's much closer to linear than\nthe general algorithm we have for solving single\nsource shortest paths,",
    "start": "59190",
    "end": "65880"
  },
  {
    "text": "namely, Bellman-Ford, which is a\nlittle bit more like quadratic. This is like the\ndifference between--",
    "start": "65880",
    "end": "71190"
  },
  {
    "text": "for sparse graphs, this is like\nthe difference between sorting, using insertion sort and\nn squared, and merge sort",
    "start": "71190",
    "end": "80430"
  },
  {
    "text": "in N log N, for example. We're going to get\nactually quite a big bonus for large input sizes by\nusing Dijkstra when we can.",
    "start": "80430",
    "end": "89970"
  },
  {
    "text": "Today, we're going\nto be focusing on this new problem called\nall-pairs shortest paths.",
    "start": "89970",
    "end": "95040"
  },
  {
    "start": "95000",
    "end": "165000"
  },
  {
    "text": "It's not really complicated. Instead of having\na single source, we are essentially wanting\nto, given an input--",
    "start": "95040",
    "end": "102300"
  },
  {
    "text": " this is our weighted graph,\nwhere we've got a graph V, E,",
    "start": "102300",
    "end": "117890"
  },
  {
    "text": "and we've got a weight function\nfrom the edges to the integers.",
    "start": "117890",
    "end": "123800"
  },
  {
    "text": " This is our general\nweighted graph. We want our output\nto be something",
    "start": "123800",
    "end": "130560"
  },
  {
    "text": "like, the shortest\npath distance from u",
    "start": "130560",
    "end": "136470"
  },
  {
    "text": "to v for every u and\nv in our vortex set.",
    "start": "136470",
    "end": "146130"
  },
  {
    "text": "That's what we want to return. Now, there's one\ncaveat here that,",
    "start": "146130",
    "end": "152310"
  },
  {
    "text": "if there's a negative\nweight cycle in our graph-- in other words, if any of these\ndelta u, v's is minus infinity,",
    "start": "152310",
    "end": "163700"
  },
  {
    "text": "there's a negative rate\ncycle in our graph. So unless, I guess--",
    "start": "163700",
    "end": "173239"
  },
  {
    "start": "165000",
    "end": "835000"
  },
  {
    "text": "or abort if G contains\na negative weight cycle.",
    "start": "173240",
    "end": "189515"
  },
  {
    "text": " So we're not actually going\nto worry about negative weight",
    "start": "189515",
    "end": "195650"
  },
  {
    "text": "cycles in today's class. If we have a graph, it\ncould have negative weights.",
    "start": "195650",
    "end": "201819"
  },
  {
    "text": "These are any integers. It could include\nnegative weight edges.",
    "start": "201820",
    "end": "208460"
  },
  {
    "text": "But as long as all\nof our path distances are bounded from\nbelow, none of them",
    "start": "208460",
    "end": "218920"
  },
  {
    "text": "are negative infinity, we\ndon't have any negative weight cycles, then I want you to\noutput all of these shortest",
    "start": "218920",
    "end": "225430"
  },
  {
    "text": "path distances. Now, in particular,\nthis output could-- any of these outputs needs to\nhave size theta of V squared.",
    "start": "225430",
    "end": "236800"
  },
  {
    "text": "Because for every\npair of vertices, I need to return to you\na number, or infinity,",
    "start": "236800",
    "end": "242230"
  },
  {
    "text": "or minus infinity or\nsomething like that. But we are not dealing with\na case with minus infinity. The output could have size--",
    "start": "242230",
    "end": "251320"
  },
  {
    "text": "this is a theta here. It does have size V squared.",
    "start": "251320",
    "end": "256750"
  },
  {
    "text": "But in particular,\nit's at least V squared because I\nneed to give a number",
    "start": "256750",
    "end": "264010"
  },
  {
    "text": "for each pair of vertices. And so we couldn't\nhope for linear time",
    "start": "264010",
    "end": "270259"
  },
  {
    "text": "in the size of this graph\nfor this problem, right? Single source shortest\npaths, for certain versions",
    "start": "270260",
    "end": "276050"
  },
  {
    "text": "of the problem, we\nneed to read the graph. And so we need to\nuse linear time.",
    "start": "276050",
    "end": "281580"
  },
  {
    "text": "But in this problem, our\noutput has quadratic size in the number of vertices. So in a sense, we can't\ndo better than this.",
    "start": "281580",
    "end": "289620"
  },
  {
    "text": "We can't do better\nthan quadratic. And actually, what's\none way we could",
    "start": "289620",
    "end": "296010"
  },
  {
    "text": "solve all-pairs shortest\npaths by using stuff we've already done\nin this class?",
    "start": "296010",
    "end": "302170"
  },
  {
    "text": "That's why I put\nthis slide up here. Yeah, we could just\nsolve a single source",
    "start": "302170",
    "end": "307320"
  },
  {
    "text": "shortest paths algorithm from\nevery vertex in my graph. That seems like a\nstupid thing to do.",
    "start": "307320",
    "end": "315060"
  },
  {
    "text": "It's almost brute\nforce on the vertices. But it's certainly a way we\ncould solve this problem, in polynomial time.",
    "start": "315060",
    "end": "323450"
  },
  {
    "text": "And we could definitely\nsolve it in order",
    "start": "323450",
    "end": "332790"
  },
  {
    "text": "V squared E time,\nusing Bellman-Ford.",
    "start": "332790",
    "end": "338980"
  },
  {
    "text": "We just take V steps of\nBellman-Ford and deal",
    "start": "338980",
    "end": "344010"
  },
  {
    "text": "with a graph on any\nset of vertices. We can do better than this.",
    "start": "344010",
    "end": "351170"
  },
  {
    "text": "We can do better\nthan this for graphs that are special in some way.",
    "start": "351170",
    "end": "356380"
  },
  {
    "text": "We can do V times V\nplus E, V times linear.",
    "start": "356380",
    "end": "362140"
  },
  {
    "text": "If our weights are\npositive and bounded, we can use BFS V times. Or if our graph\ndoesn't have cycles,",
    "start": "362140",
    "end": "368919"
  },
  {
    "text": "we could use DAG\nrelaxation V times. Or if our graph had non-negative\nedge weights, we could get,",
    "start": "368920",
    "end": "375470"
  },
  {
    "text": "basically, V squared\nlog V plus V times E.",
    "start": "375470",
    "end": "381160"
  },
  {
    "text": "And that's actually not bad. In sparse graphs, this is what\nBellman-Ford would give us.",
    "start": "381160",
    "end": "388360"
  },
  {
    "start": "388360",
    "end": "396509"
  },
  {
    "text": "But if we had Dijkstra's,\nfor example, if we had all positive edge weights--\nor non-negative, sorry,",
    "start": "396510",
    "end": "405180"
  },
  {
    "text": "we could get V squared\nlog V plus V, E time.",
    "start": "405180",
    "end": "415830"
  },
  {
    "text": "This is V times Dijkstra. ",
    "start": "415830",
    "end": "428330"
  },
  {
    "text": "OK, so how do these\nrunning times compare? This is V times Bellman-Ford. This is V times Dijkstra.",
    "start": "428330",
    "end": "435140"
  },
  {
    "text": "Let's just get a feel\nfor this separation here. If we had a sparse graph\nwhere V is upper-bounded",
    "start": "435140",
    "end": "443599"
  },
  {
    "text": "by the number of vertices, this\none looks like V squared log V.",
    "start": "443600",
    "end": "449310"
  },
  {
    "text": "This one looks like V cubed. And we need to spend at\nleast V squared time.",
    "start": "449310",
    "end": "458669"
  },
  {
    "text": "So actually, this\nis really close to linear in the\nsize of the graph, just off by a log factor, just\nlike sorting would entail.",
    "start": "458670",
    "end": "467620"
  },
  {
    "text": "And this one would\nhave a linear factor.",
    "start": "467620",
    "end": "474669"
  },
  {
    "text": "In the sparse graph, this\nwould be a linear factor worse than this, instead of\na logarithmic factor--",
    "start": "474670",
    "end": "480100"
  },
  {
    "text": "again, this linear\nto log separation. We don't want to have to\ndo this running time if we",
    "start": "480100",
    "end": "486310"
  },
  {
    "text": "don't have to. That's the name of the game. And really, all we're\ngoing to do in this lecture",
    "start": "486310",
    "end": "496790"
  },
  {
    "text": "is try to solve how we can\nmake this running time faster",
    "start": "496790",
    "end": "504740"
  },
  {
    "text": "by doing something a\nlittle bit more intelligent than running a single\nsource shortest path",
    "start": "504740",
    "end": "510110"
  },
  {
    "text": "algorithm from every vertex. ",
    "start": "510110",
    "end": "517419"
  },
  {
    "text": "How are we going to do that? Well, we could-- let's see.",
    "start": "517419",
    "end": "526330"
  },
  {
    "text": "What are we doing? Right. The idea here, if\nwe had a graph-- ",
    "start": "526330",
    "end": "537240"
  },
  {
    "text": "should my graph be\ndirected or undirected? I'm not sure.",
    "start": "537240",
    "end": "542550"
  },
  {
    "text": "Let's see if we can\nmake a directed graph. OK, so here's a directed graph.",
    "start": "542550",
    "end": "548140"
  },
  {
    "text": "Why do I not care about\nundirected graphs? Can anyone tell me?",
    "start": "548140",
    "end": "553450"
  },
  {
    "text": "Yeah, it's because-- I don't care about\nundirected graphs",
    "start": "553450",
    "end": "559270"
  },
  {
    "text": "because, if I had\nan undirected graph,",
    "start": "559270",
    "end": "564710"
  },
  {
    "text": "I could detect whether\nI had negative weight cycles in constant time--",
    "start": "564710",
    "end": "576470"
  },
  {
    "text": "I'm sorry, in linear time. I could just check each edge,\nsee if it has negative weight,",
    "start": "576470",
    "end": "583720"
  },
  {
    "text": "because a negative weight\nedge, an undirected edge is a cycle of negative weight.",
    "start": "583720",
    "end": "588880"
  },
  {
    "text": "So I could just-- if it has\nany negative edge weights, I could return in linear time\nthat it does, and I can abort.",
    "start": "588880",
    "end": "598760"
  },
  {
    "text": "Or it has only positive weights,\nand I can still use Dijkstra. So that's all good. So we're only concerned about\nneeding to run Bellman-Ford",
    "start": "598760",
    "end": "606660"
  },
  {
    "text": "on directed graphs that\npotentially have negative edge weight. OK, so here's a graph.",
    "start": "606660",
    "end": "613410"
  },
  {
    "text": "Let's see. Is this a graph that I want? ",
    "start": "613410",
    "end": "618920"
  },
  {
    "text": "Sure. Let's say we've got that\ndirection and this direction.",
    "start": "618920",
    "end": "633529"
  },
  {
    "text": "Say we have a directed\ngraph like this. And let's say this is s. This is our source.",
    "start": "633530",
    "end": "641610"
  },
  {
    "text": "And we have weights being 2--",
    "start": "641610",
    "end": "649120"
  },
  {
    "text": "sorry, weights being\n4, 1, 1, 2, 2, 2, 2.",
    "start": "649120",
    "end": "658450"
  },
  {
    "text": "So this is an\nexample of a graph we might want to run all-pairs\nshortest paths on.",
    "start": "658450",
    "end": "665840"
  },
  {
    "text": "Maybe we also have negative\nweights in this graph. ",
    "start": "665840",
    "end": "673660"
  },
  {
    "text": "In particular, this has\na negative weight cycle. I don't want negative\nweight cycles, so I'm going to make this 0.",
    "start": "673660",
    "end": "682310"
  },
  {
    "text": "So this graph doesn't have\nnegative weight cycles. Great. ",
    "start": "682310",
    "end": "687740"
  },
  {
    "text": "That's true, great. All right, so here's an\nexample that we might want",
    "start": "687740",
    "end": "692940"
  },
  {
    "text": "to compute shortest paths on. There's no s in\nall-pairs shortest paths. But I'm going to be\ntalking about a couple",
    "start": "692940",
    "end": "700610"
  },
  {
    "text": "of shortest paths from\ns in my next argument, so I'm just labeling\nthat vertex as s.",
    "start": "700610",
    "end": "706680"
  },
  {
    "text": "OK, the claim-- the\napproach we're going to do, we're going to try to take a\ngraph that has negative edge",
    "start": "706680",
    "end": "713460"
  },
  {
    "text": "weights, directed graph. We don't know if it has\nnegative cycles or not yet.",
    "start": "713460",
    "end": "721160"
  },
  {
    "text": "But we want to compute\nall-pairs shortest paths, not in this running time,\nbut in this running time.",
    "start": "721160",
    "end": "727510"
  },
  {
    "text": "How could we do that? Well, maybe it's\npossible that we can change the\nweight of every edge",
    "start": "727510",
    "end": "736380"
  },
  {
    "text": "so that they're all\npositive, but shortest paths are preserved. So basically, if a\nparticular path--",
    "start": "736380",
    "end": "744060"
  },
  {
    "text": "like OK, the shortest path\nfrom s to t here is 1, 2, 3.",
    "start": "744060",
    "end": "752970"
  },
  {
    "text": "I could change edge\nweights in this graph. Say, for example, if\nI changed 1 to 0 here,",
    "start": "752970",
    "end": "761920"
  },
  {
    "text": "that would still make\nthis a shortest path. I haven't done-- I've\nreweighted the graph.",
    "start": "761920",
    "end": "768960"
  },
  {
    "text": "Shortest paths have to be\nthe same in this graph. ",
    "start": "768960",
    "end": "774660"
  },
  {
    "text": "But now-- sorry. Yeah, this is not\na shortest path.",
    "start": "774660",
    "end": "785910"
  },
  {
    "text": "OK, I'll make that minus\n2, and then these both 2,",
    "start": "785910",
    "end": "791639"
  },
  {
    "text": "and I think this 4. Man, I really should have\ndone my example beforehand.",
    "start": "791640",
    "end": "800320"
  },
  {
    "text": "OK, so this still doesn't\nhave negative weight cycles. It has a negative weight edge. But this path is\nlonger than this path.",
    "start": "800320",
    "end": "807170"
  },
  {
    "text": "So when this was\n1, this had length of 3, which was\nshorter than this path.",
    "start": "807170",
    "end": "814195"
  },
  {
    "text": " That is length 4.",
    "start": "814195",
    "end": "820150"
  },
  {
    "text": "OK, cool. So this is the shortest\npath from s to t.",
    "start": "820150",
    "end": "826300"
  },
  {
    "text": "I could change\nweights in this graph, for example, changing\n2 to 3 and 1 to 0.",
    "start": "826300",
    "end": "835360"
  },
  {
    "start": "835000",
    "end": "1165000"
  },
  {
    "text": "That changed\nweights in my graph, but shortest paths\nremain the same.",
    "start": "835360",
    "end": "841320"
  },
  {
    "text": "So maybe there's a way I\ncould reweight my edges so that shortest paths\nstay the same, shortest paths are preserved.",
    "start": "841320",
    "end": "847490"
  },
  {
    "text": " So I'm going to put this\nback to where it was.",
    "start": "847490",
    "end": "855880"
  },
  {
    "text": "So idea-- make edge\nweights non-negative while",
    "start": "855880",
    "end": "875080"
  },
  {
    "text": "preserving shortest paths.",
    "start": "875080",
    "end": "880780"
  },
  {
    "text": " In other words, just\nreweight the edges",
    "start": "880780",
    "end": "886270"
  },
  {
    "text": "here so that\nshortest paths in G-- this is G-- after we reweight\nwill go to some graph G prime,",
    "start": "886270",
    "end": "896649"
  },
  {
    "text": "with the same combinatorial\nstructure just different edge weights. And we want shortest paths--",
    "start": "896650",
    "end": "903040"
  },
  {
    "text": "we want these weights\nto all be non-negative. And we want shortest paths, if\nthere's a shortest path in G,",
    "start": "903040",
    "end": "909130"
  },
  {
    "text": "it continues to be a shortest\npath in the reweighted graph. That's the goal for today. ",
    "start": "909130",
    "end": "916560"
  },
  {
    "text": "If we can do that transformation\nand this is not negative, then we're done.",
    "start": "916560",
    "end": "922500"
  },
  {
    "text": "We're done because we\ncan just run Dijkstra V times on that new graph, get\nthe shortest path distances,",
    "start": "922500",
    "end": "932940"
  },
  {
    "text": "construct a shortest path\ntree from those distances, and then traverse that\ntree in the original graph,",
    "start": "932940",
    "end": "940290"
  },
  {
    "text": "and compute shortest\npaths along that tree. So that's the claim.",
    "start": "940290",
    "end": "945780"
  },
  {
    "text": "Claim-- we can compute\ndistances in G--",
    "start": "945780",
    "end": "965270"
  },
  {
    "text": "so we're going to\nrestrict G prime to have with non-negative edge weights.",
    "start": "965270",
    "end": "975529"
  },
  {
    "start": "975530",
    "end": "983290"
  },
  {
    "text": "If we have such a G prime with\nnon-negative edge weights, we can compute distances\nin G from distances",
    "start": "983290",
    "end": "994150"
  },
  {
    "text": "in G prime in V times V\nplus E, which is smaller",
    "start": "994150",
    "end": "1009520"
  },
  {
    "text": "than our Dijkstra running time. This is our Dijkstra\nrunning time. And this is smaller than that.",
    "start": "1009520",
    "end": "1015529"
  },
  {
    "text": "So that would be fine, right? What do we do? We have our new graph G prime.",
    "start": "1015530",
    "end": "1023580"
  },
  {
    "text": "It has all positive\nedge weights, so we run all-pairs\nshortest paths in here by just running\nDijkstra V times.",
    "start": "1023580",
    "end": "1030780"
  },
  {
    "text": "And then for each vertex s, we\nhave some shortest path tree",
    "start": "1030780",
    "end": "1037050"
  },
  {
    "text": "to all the things that\nit's connected to. We can look at that\npath in G. This",
    "start": "1037050",
    "end": "1045130"
  },
  {
    "text": "is the same common\n[INAUDIBLE] graph, just with different edge weights. We can look at that same tree.",
    "start": "1045130",
    "end": "1051130"
  },
  {
    "text": "I'm not going to be able to\ndraw the exact same tree here. But what I can do is I can just\nBFS or DFS along this tree.",
    "start": "1051130",
    "end": "1061570"
  },
  {
    "text": "And every time I have an edge,\nbecause each one of these is the shortest\npath in this tree,",
    "start": "1061570",
    "end": "1067270"
  },
  {
    "text": "I can just compute every\ntime I traverse an edge what",
    "start": "1067270",
    "end": "1073780"
  },
  {
    "text": "its shortest path\ndistance is in G in linear time for that\nvertex for that particular s.",
    "start": "1073780",
    "end": "1079570"
  },
  {
    "text": "I do that over all s's, and\nI get this running time. So that's the goal here.",
    "start": "1079570",
    "end": "1086549"
  },
  {
    "text": "All right, so we\nfirst wanted to find-- we were wanting to\nmake edge weights",
    "start": "1086550",
    "end": "1092929"
  },
  {
    "text": "non-negative while\npreserving shortest paths. Because if we could\ndo that, we could",
    "start": "1092930",
    "end": "1098240"
  },
  {
    "text": "solve our original all-pairs\nshortest paths problem. So this is the proof sketch.",
    "start": "1098240",
    "end": "1104990"
  },
  {
    "text": " But how can we do this?",
    "start": "1104990",
    "end": "1111780"
  },
  {
    "text": "But how?  It doesn't even seem like this\ncould be possible, generally.",
    "start": "1111780",
    "end": "1119490"
  },
  {
    "text": "How can I just\nreweight the edges and maintain that the shortest\npath trees are the same?",
    "start": "1119490",
    "end": "1125580"
  },
  {
    "text": "That seems hard to do. And in particular, if\nthere's a negative weight",
    "start": "1125580",
    "end": "1131440"
  },
  {
    "text": "cycle in this graph,\nit's impossible to do. So claim-- not possible if\nG contains a negative weight",
    "start": "1131440",
    "end": "1150470"
  },
  {
    "text": "cycle. ",
    "start": "1150470",
    "end": "1159090"
  },
  {
    "text": "OK, the exclamation point\nis just my comment here. ",
    "start": "1159090",
    "end": "1165940"
  },
  {
    "text": "So if G contains a\nnegative weight cycle, then in particular, the shortest\npath distance or a shortest",
    "start": "1165940",
    "end": "1173429"
  },
  {
    "text": "path in G-- if this is G, say we\nhave a negative weight",
    "start": "1173430",
    "end": "1180570"
  },
  {
    "text": "cycle directed cycle C here. In particular, the shortest\npath from this vertex",
    "start": "1180570",
    "end": "1189340"
  },
  {
    "text": "on the cycle to this\nvertex on the cycle,",
    "start": "1189340",
    "end": "1194890"
  },
  {
    "text": "what is its shortest path? It's infinite. A shortest path is\ninfinite around this cycle.",
    "start": "1194890",
    "end": "1201460"
  },
  {
    "text": "You just keep going around\nthe cycle over and over and over again because\nit has a negative weight.",
    "start": "1201460",
    "end": "1206559"
  },
  {
    "text": "Weight of C is less\nthan 0, strictly.",
    "start": "1206560",
    "end": "1212530"
  },
  {
    "text": "That's what a negative\nweight cycle is. OK, so the shortest path--\na shortest path from s to t",
    "start": "1212530",
    "end": "1218650"
  },
  {
    "text": "has infinite length and, in\nparticular, is non-simple. However-- so shortest path\nfrom s to t is non-simple.",
    "start": "1218650",
    "end": "1242830"
  },
  {
    "start": "1242830",
    "end": "1248690"
  },
  {
    "text": "But as we proved in\nthe last lecture, shortest paths in a graph with\nnon-negative weights are what?",
    "start": "1248690",
    "end": "1270500"
  },
  {
    "text": "Are simple, right? Because they're just\nshortest path trees. ",
    "start": "1270500",
    "end": "1280020"
  },
  {
    "text": "So that's a contradiction. So this is not possible. ",
    "start": "1280020",
    "end": "1287070"
  },
  {
    "text": "So given a graph with negative\nweights but no negative cycle,",
    "start": "1287070",
    "end": "1294330"
  },
  {
    "text": "it's still not clear how we\ncould find such a reweighting of the graph.",
    "start": "1294330",
    "end": "1299390"
  },
  {
    "text": "Can we do this? Well, we're going to\nexploit a little idea here.",
    "start": "1299390",
    "end": "1305149"
  },
  {
    "text": "How can we transform\nthe weights of a path? Well, how-- what's a--",
    "start": "1305150",
    "end": "1311500"
  },
  {
    "text": "a silly idea, I have\nthis silly idea. If I don't want negative\nedge weights in this graph--",
    "start": "1311500",
    "end": "1318315"
  },
  {
    "text": "ugh, this is messy in the back. You got edge weights 1,\nminus 2, 0, 1, 4, 5, and 1.",
    "start": "1318315",
    "end": "1326700"
  },
  {
    "text": "There's only one negative\nedge weight here. What if I just added\na large number,",
    "start": "1326700",
    "end": "1334170"
  },
  {
    "text": "or in particular, the\nnegative of the smallest",
    "start": "1334170",
    "end": "1339240"
  },
  {
    "text": "edge in my graph to\nevery edge in my graph? Then I'll have a graph\nwith non-negative weights.",
    "start": "1339240",
    "end": "1346500"
  },
  {
    "text": "Fantastic. Why is that not a good idea?",
    "start": "1346500",
    "end": "1352400"
  },
  {
    "text": "Well, in particular, if\nI did that to this graph, if I added 2 to every edge,\nthe weight of this path,",
    "start": "1352400",
    "end": "1359640"
  },
  {
    "text": "which was the shortest\npath, changed from weight 3",
    "start": "1359640",
    "end": "1365800"
  },
  {
    "text": "to weight 9, because I\nadded 2 for every edge.",
    "start": "1365800",
    "end": "1372660"
  },
  {
    "text": "But this path, which wasn't a\nshortest path in the original graph-- it had weight 4--",
    "start": "1372660",
    "end": "1378640"
  },
  {
    "text": "increased only by 2. Now that is a shortest path. Or it's a shorter\npath than this one,",
    "start": "1378640",
    "end": "1384890"
  },
  {
    "text": "so this one can't\nbe a shortest path. So that transformation,\nsure, would",
    "start": "1384890",
    "end": "1390309"
  },
  {
    "text": "make all the weights\nnon-negative, but would not preserve\nshortest paths.",
    "start": "1390310",
    "end": "1396680"
  },
  {
    "text": "In particular, if I added the\nsame edge weight to every edge,",
    "start": "1396680",
    "end": "1403390"
  },
  {
    "text": "I will bias toward taking paths\nthat have fewer edges, not just",
    "start": "1403390",
    "end": "1409210"
  },
  {
    "text": "smaller weight. So that first idea doesn't work.",
    "start": "1409210",
    "end": "1414559"
  },
  {
    "text": "Idea-- add large\nnumber to each edge.",
    "start": "1414560",
    "end": "1425500"
  },
  {
    "text": " This is bad.",
    "start": "1425500",
    "end": "1431940"
  },
  {
    "text": "Makes weights\nnon-negative, but does not",
    "start": "1431940",
    "end": "1447059"
  },
  {
    "text": "preserve shortest paths. So this is not a\ngood idea-- bad idea.",
    "start": "1447060",
    "end": "1456530"
  },
  {
    "text": " Is there any way\nyou can think of",
    "start": "1456530",
    "end": "1462060"
  },
  {
    "text": "to modify the edge weights\nin a graph in any way that will preserve shortest paths?",
    "start": "1462060",
    "end": "1469049"
  },
  {
    "text": "So here is an idea\nfor you, which",
    "start": "1469050",
    "end": "1477040"
  },
  {
    "text": "is kind of this critical step in\nJohnson's and in a lot of graph transformation algorithms.",
    "start": "1477040",
    "end": "1483550"
  },
  {
    "text": "If I have a vertex, say\nthis middle guy, say v,",
    "start": "1483550",
    "end": "1491290"
  },
  {
    "text": "every path from v goes\nthrough an outgoing edge of v.",
    "start": "1491290",
    "end": "1500620"
  },
  {
    "text": "And every path going into v goes\nthrough an edge going into v.",
    "start": "1500620",
    "end": "1508570"
  },
  {
    "text": "I haven't said anything-- I've said very stupid things. But that observation\nis critical here.",
    "start": "1508570",
    "end": "1515680"
  },
  {
    "text": "If I add a number-- or let me see if I got\nthis right in terms",
    "start": "1515680",
    "end": "1520960"
  },
  {
    "text": "of adding and subtracting. If I add a number to all\noutgoing edges from a vertex,",
    "start": "1520960",
    "end": "1529940"
  },
  {
    "text": "and I subtract that same\nnumber from the weights of all",
    "start": "1529940",
    "end": "1535809"
  },
  {
    "text": "of the incoming edges to that\nvertex, then every path from v",
    "start": "1535810",
    "end": "1541810"
  },
  {
    "text": "is changed by the same amount,\nbecause every path from v goes through one of\nthose outgoing edges.",
    "start": "1541810",
    "end": "1547990"
  },
  {
    "text": "And any path going\ninto v has also changed by the same amount.",
    "start": "1547990",
    "end": "1553450"
  },
  {
    "text": "In particular, it's changed\nby a negative, whatever we added to the outgoing edges.",
    "start": "1553450",
    "end": "1561480"
  },
  {
    "text": "So such a transformation,\nadding a number from all the outgoing\nedges from a vertex",
    "start": "1561480",
    "end": "1569130"
  },
  {
    "text": "and subtracting that same number\nfrom all the incoming edges, preserves shortest paths.",
    "start": "1569130",
    "end": "1574460"
  },
  {
    "text": "That's a claim. Idea-- this is a better idea.",
    "start": "1574460",
    "end": "1579809"
  },
  {
    "start": "1579810",
    "end": "1585150"
  },
  {
    "text": "Given vertex v, add--",
    "start": "1585150",
    "end": "1592695"
  },
  {
    "text": " I'm going to put\nthis on two lines.",
    "start": "1592695",
    "end": "1599180"
  },
  {
    "text": "Add weight h to\nall outgoing edges,",
    "start": "1599180",
    "end": "1615670"
  },
  {
    "text": "and subtract weight\nto all incoming edges.",
    "start": "1615670",
    "end": "1624315"
  },
  {
    "text": " So that's the idea.",
    "start": "1624315",
    "end": "1629320"
  },
  {
    "text": "And the claim is,\nthis transformation,",
    "start": "1629320",
    "end": "1639039"
  },
  {
    "text": "shortest paths are preserved\nunder this transformation.",
    "start": "1639040",
    "end": "1659490"
  },
  {
    "start": "1659490",
    "end": "1665870"
  },
  {
    "text": "And why is that? It's kind of the exact same\nargument that I had over there.",
    "start": "1665870",
    "end": "1672280"
  },
  {
    "start": "1667000",
    "end": "2827000"
  },
  {
    "text": "Proof-- consider any path in\nmy graph, either if the path--",
    "start": "1672280",
    "end": "1690690"
  },
  {
    "text": "path could go\nthrough v many times, or it could go\nthrough not at all. If my path, if I have a\npath, in my original graph G,",
    "start": "1690690",
    "end": "1703830"
  },
  {
    "text": "then with path weight w of pi--",
    "start": "1703830",
    "end": "1708840"
  },
  {
    "text": "this is my path-- it goes through v\nsome number of times.",
    "start": "1708840",
    "end": "1721390"
  },
  {
    "text": "So I'm going to say this\nis going from s to t. If it crosses v-- if\nit never crosses v,",
    "start": "1721390",
    "end": "1731010"
  },
  {
    "text": "if it never touches v, the\nvertex that I transformed, then I argue that the\npath weight is the same",
    "start": "1731010",
    "end": "1738090"
  },
  {
    "text": "because I didn't do anything\nto edges that are in this path. Alternatively, this thing\ngoes through v sometimes.",
    "start": "1738090",
    "end": "1746170"
  },
  {
    "text": "If it goes through\nv in the middle,",
    "start": "1746170",
    "end": "1752660"
  },
  {
    "text": "how is the weight\nof my path changed? Well, it hasn't, because I added\na number to all outgoing edges,",
    "start": "1752660",
    "end": "1759960"
  },
  {
    "text": "so there's an outgoing\nedge here with weight I've changed by weight h.",
    "start": "1759960",
    "end": "1765320"
  },
  {
    "text": "And there's an\nincoming edge here that I've changed by\nweight negative h. So these cancel out\nand you've got 0.",
    "start": "1765320",
    "end": "1772280"
  },
  {
    "text": "So passing through\na vertex doesn't change the weight of my path.",
    "start": "1772280",
    "end": "1779130"
  },
  {
    "text": "The only way I could change\nthe weight of my path is if v is the start\nvertex or the end vertex.",
    "start": "1779130",
    "end": "1784575"
  },
  {
    "text": " So it's possible that s is\nmy vertex or t is my vertex.",
    "start": "1784575",
    "end": "1792720"
  },
  {
    "text": "Well, for any path\nleaving v, I will",
    "start": "1792720",
    "end": "1798320"
  },
  {
    "text": "have increased the\nweight of that path by h, because I added a weight\nh to all outgoing edges.",
    "start": "1798320",
    "end": "1807330"
  },
  {
    "text": "So again, while\nthe path weight has changed, since all of\nthe paths leaving v",
    "start": "1807330",
    "end": "1815490"
  },
  {
    "text": "have changed by the same\namount, a shortest path will still be a shortest path. And same goes for t.",
    "start": "1815490",
    "end": "1822180"
  },
  {
    "text": "If t, the end vertex is\nv, I'll have subtracted h from all of my\nincoming edges, which",
    "start": "1822180",
    "end": "1830070"
  },
  {
    "text": "means that any path ending at t,\nany directed path ending at t,",
    "start": "1830070",
    "end": "1835740"
  },
  {
    "text": "also changes by the same value. And so shortest paths\nmust be preserved.",
    "start": "1835740",
    "end": "1842350"
  },
  {
    "text": "So shortest paths preserved. ",
    "start": "1842350",
    "end": "1850050"
  },
  {
    "text": "So that's pretty\ncool transformation. I can assign for any vertex\nsuch a transformation which",
    "start": "1850050",
    "end": "1857870"
  },
  {
    "text": "affects all of the\nedges surrounding it by this h additive factor,\neither added or subtracted.",
    "start": "1857870",
    "end": "1866180"
  },
  {
    "text": "So maybe-- and I can do this\nindependently for every vertex. The shortest paths\nwere preserved",
    "start": "1866180",
    "end": "1871970"
  },
  {
    "text": "by me doing this to one vertex. Then if I do it\nto another vertex,",
    "start": "1871970",
    "end": "1877270"
  },
  {
    "text": "then shortest paths\nare still preserved. And let's prove that real quick. ",
    "start": "1877270",
    "end": "1887980"
  },
  {
    "text": "What I'm going to\ndo is I'm going to want to do this to\ngive me flexibility for changing all the\nedge weights in my graph",
    "start": "1887980",
    "end": "1893950"
  },
  {
    "text": "to have this property. I'm going to set-- ",
    "start": "1893950",
    "end": "1899220"
  },
  {
    "text": "or define a potential function h\nthat maps vertices to integers.",
    "start": "1899220",
    "end": "1916372"
  },
  {
    "start": "1916372",
    "end": "1924480"
  },
  {
    "text": "So this is the potential\nh of v. And then we're",
    "start": "1924480",
    "end": "1936900"
  },
  {
    "text": "going to make a graph, G prime\nbased on above transformation",
    "start": "1936900",
    "end": "1956760"
  },
  {
    "text": "for each vertex in v.",
    "start": "1956760",
    "end": "1964330"
  },
  {
    "text": "So I'm going to set a\nnumber, an h for each vertex.",
    "start": "1964330",
    "end": "1969669"
  },
  {
    "text": "These are independent now. And I'm going to\nadd that potential",
    "start": "1969670",
    "end": "1974850"
  },
  {
    "text": "to all outgoing edges. And I'm going to\nsubtract that potential from all incoming edges.",
    "start": "1974850",
    "end": "1980200"
  },
  {
    "text": "This transformation is going\nto preserve shortest paths. Let's actually be a\nlittle bit more rigorous",
    "start": "1980200",
    "end": "1985990"
  },
  {
    "text": "that that's the case when\nwe do this multiple times. So claim-- shortest paths\nare still preserved.",
    "start": "1985990",
    "end": "2004029"
  },
  {
    "start": "2004030",
    "end": "2009620"
  },
  {
    "text": "All right, well, that's,\nagain, not so difficult to see. Let's consider a\npath from s to t.",
    "start": "2009620",
    "end": "2020362"
  },
  {
    "text": "It passes through a\nbunch of vertices. I'm going to label these\nas v0 to vk so that I can",
    "start": "2020362",
    "end": "2031320"
  },
  {
    "text": "kind of number them. All right, this is v1 here.",
    "start": "2031320",
    "end": "2036850"
  },
  {
    "text": "This is a directed path, v1,\n2, 3, 4, all the way up to k.",
    "start": "2036850",
    "end": "2043350"
  },
  {
    "text": "There are k edges in this graph. I claim to you that any path\nfrom v0 to vk, any shortest",
    "start": "2043350",
    "end": "2054040"
  },
  {
    "text": "path from v0 to vk remains a\nshortest path after I reweight",
    "start": "2054040",
    "end": "2059469"
  },
  {
    "text": "everything in this way. So let's say this is path\npi, and so it has weight w",
    "start": "2059469",
    "end": "2067338"
  },
  {
    "text": "pi, which is really just\nthe sum of all of the edge",
    "start": "2067339",
    "end": "2073199"
  },
  {
    "text": "weights from vi minus 1 to\nvi, for i equals 1 to k.",
    "start": "2073199",
    "end": "2082949"
  },
  {
    "text": "This is poor notation. This is the weight of the\nedge from the vi minus 1 to i.",
    "start": "2082949",
    "end": "2089300"
  },
  {
    "text": "And we've got-- it\nindexes from 1-- that's the first edge--",
    "start": "2089300",
    "end": "2094600"
  },
  {
    "text": "to k, which is the last edge. So that's the weight of my path. The weight of my\ntransformed path--",
    "start": "2094600",
    "end": "2101160"
  },
  {
    "text": "I'm going to do it down here. It's a little iffy. The weight of my transformed\npath I'm going to say",
    "start": "2101160",
    "end": "2108100"
  },
  {
    "text": "is the weight in this new\nweighted graph G prime. ",
    "start": "2108100",
    "end": "2116390"
  },
  {
    "text": "This weight of that same path-- it's the same path-- is just going to be the sum of\nall of the reweighted edges.",
    "start": "2116390",
    "end": "2126510"
  },
  {
    "text": "So i equals 1 to k of my\noriginal weight of my edge,",
    "start": "2126510",
    "end": "2136650"
  },
  {
    "text": "so from 0, i minus 1 to vi. ",
    "start": "2136650",
    "end": "2143099"
  },
  {
    "text": "But what did I do? This edge is outgoing\nfrom vi minus 1.",
    "start": "2143100",
    "end": "2149570"
  },
  {
    "text": "So it's outgoing, so\nI add that weight-- that potential, sorry. ",
    "start": "2149570",
    "end": "2159680"
  },
  {
    "text": "But that edge is also\nincoming into vi. So when I reweighted the thing,\nI got a subtraction of h, vi.",
    "start": "2159680",
    "end": "2171494"
  },
  {
    "start": "2171495",
    "end": "2176850"
  },
  {
    "text": "Now, what happens\nhere in the sum, this term, if I just took\nthe sum over this term,",
    "start": "2176850",
    "end": "2183780"
  },
  {
    "text": "that's exactly my\noriginal pathway. So that's good. ",
    "start": "2183780",
    "end": "2191280"
  },
  {
    "text": "But you'll notice that\nthis sum has k terms,",
    "start": "2191280",
    "end": "2196510"
  },
  {
    "text": "and this sum has the\nsubtraction of k other terms. But most of these\nterms are equal.",
    "start": "2196510",
    "end": "2205450"
  },
  {
    "text": "Along the path, all the incoming\nand outgoing edges cancel out.",
    "start": "2205450",
    "end": "2212859"
  },
  {
    "text": "So we're left with only\nadding the potential",
    "start": "2212860",
    "end": "2218070"
  },
  {
    "text": "at the starting vertex and\nsubtracting the potential at the final vertex.",
    "start": "2218070",
    "end": "2224000"
  },
  {
    "text": "So we've got, add\nh, v0 minus h, vk.",
    "start": "2224000",
    "end": "2231510"
  },
  {
    "text": " And why is that good?",
    "start": "2231510",
    "end": "2237780"
  },
  {
    "text": "Well, that's good because\nevery path from v0 to vk starts at\nv0 and ends at vk.",
    "start": "2237780",
    "end": "2246900"
  },
  {
    "text": "That's just-- that's how it is. That's how we've defined\npaths going from v0 to vk.",
    "start": "2246900",
    "end": "2253380"
  },
  {
    "text": "But every such path,\nwe transform the weight of that path by adding\na constant associated",
    "start": "2253380",
    "end": "2262500"
  },
  {
    "text": "with the start and adding this\nvalue associated with the end. And so every path going\nfrom v0 to vk changes",
    "start": "2262500",
    "end": "2271140"
  },
  {
    "text": "by the same amount. And so if this path\npi was shortest,",
    "start": "2271140",
    "end": "2280330"
  },
  {
    "text": "it's still shortest in\nthe reweighted graph because I've just changed\nall paths between those two",
    "start": "2280330",
    "end": "2285580"
  },
  {
    "text": "vertices by the same amount. This is kind of like a\ntelescoping argument here",
    "start": "2285580",
    "end": "2291519"
  },
  {
    "text": "in that kind of proof. Right. So we have, the weight changes.",
    "start": "2291520",
    "end": "2298210"
  },
  {
    "text": "It could change, but it changes\nall paths between these two vertices by the\nsame amount, which",
    "start": "2298210",
    "end": "2304850"
  },
  {
    "text": "means that shortest\npaths are still shortest. Awesome. OK, so the name of\nthe game here is now,",
    "start": "2304850",
    "end": "2316390"
  },
  {
    "text": "we have this really\nflexible tool. We have this tool where we\ncan add or subtract weight",
    "start": "2316390",
    "end": "2323950"
  },
  {
    "text": "from various edges. But we have to do so in a kind\nof localized, constrained way. We have to do the same\nthing around each vertex.",
    "start": "2323950",
    "end": "2332869"
  },
  {
    "text": "But it seems like a powerful\ntransformation technique that maybe we can get\nthis thing that we want,",
    "start": "2332870",
    "end": "2338750"
  },
  {
    "text": "which is a G prime, a\nreweighting of the graph where all the edge weights are\npositive or non-negative.",
    "start": "2338750",
    "end": "2347130"
  },
  {
    "text": "So does there exist an h\nsuch that the weights are all",
    "start": "2347130",
    "end": "2356039"
  },
  {
    "text": "positive? What does that mean? w prime u, v, the weight in\nmy new graph, in G prime,",
    "start": "2356040",
    "end": "2368540"
  },
  {
    "text": "I want these modified\nweights, this modified",
    "start": "2368540",
    "end": "2376250"
  },
  {
    "text": "weight of my graph, I want each\nof these to be non-negative.",
    "start": "2376250",
    "end": "2383280"
  },
  {
    "text": "So does there\nexist such a thing? Huh. Well, if I rearrange this\nequation a little bit,",
    "start": "2383280",
    "end": "2390520"
  },
  {
    "text": "this side, I get something\nthat looks like this.",
    "start": "2390520",
    "end": "2395695"
  },
  {
    "text": "h of v needs to be less\nthan or equal to h of u,",
    "start": "2395695",
    "end": "2404030"
  },
  {
    "text": "plus the weight of\nsome edge from u to v. What does that look like?",
    "start": "2404030",
    "end": "2416450"
  },
  {
    "text": "That looks like almost\nexactly the definition of the triangle inequality.",
    "start": "2416450",
    "end": "2421520"
  },
  {
    "text": " Shortest path from some vertex\nhere and its shortest path",
    "start": "2421520",
    "end": "2427990"
  },
  {
    "text": "distance from the\nsame vertex here, this is just a statement\nof the triangle inequality.",
    "start": "2427990",
    "end": "2435660"
  },
  {
    "text": "So if we can set these h's\nto be the shortest path distance from some vertex and\nthose shortest path distances",
    "start": "2435660",
    "end": "2442320"
  },
  {
    "text": "are finite, and\nnot minus infinity,",
    "start": "2442320",
    "end": "2449570"
  },
  {
    "text": "then this thing will hold\nby triangle inequality. And in particular, if we were\nto reweight the edges based",
    "start": "2449570",
    "end": "2458360"
  },
  {
    "text": "on those values of h,\nthen we get new edge rates that are non-negative.",
    "start": "2458360",
    "end": "2464630"
  },
  {
    "text": "Awesome. OK. But there might\nnot be any vertex",
    "start": "2464630",
    "end": "2471039"
  },
  {
    "text": "from which we can access,\nwhich we can reach all vertices in the graph.",
    "start": "2471040",
    "end": "2476920"
  },
  {
    "text": "In particular, my graph\nmight not even be connected. ",
    "start": "2476920",
    "end": "2484349"
  },
  {
    "text": "If I want this property,\nI need all of these-- I don't gain any information\nif these things are infinite.",
    "start": "2484350",
    "end": "2492780"
  },
  {
    "text": "It's exhaustively true. Infinity is-- I\ndon't even know how to compare infinity and\ninfinity plus a constant.",
    "start": "2492780",
    "end": "2501580"
  },
  {
    "text": "I don't know. So I need all of these\nthings to be finite. So how can I make\nthose things finite?",
    "start": "2501580",
    "end": "2509310"
  },
  {
    "text": "So here's the next idea. ",
    "start": "2509310",
    "end": "2520740"
  },
  {
    "text": "Add new vertex s\nwith 0-weight edge",
    "start": "2520740",
    "end": "2538500"
  },
  {
    "text": "to every vertex, V in V.\nWe take our original graph.",
    "start": "2538500",
    "end": "2550250"
  },
  {
    "text": "We add a new super node\nor auxiliary vertex s, with a 0-weight edge to\nevery vertex in my graph.",
    "start": "2550250",
    "end": "2557468"
  },
  {
    "text": "What does that look like? This is like-- there's\nmy original graph, and now I have this vertex s.",
    "start": "2557468",
    "end": "2565260"
  },
  {
    "text": "But it has directed edges\ninto all of the vertices with 0-weight.",
    "start": "2565260",
    "end": "2571819"
  },
  {
    "text": "That's our picture. And this new thing I'm going\nto call, maybe, my s graph now.",
    "start": "2571820",
    "end": "2583470"
  },
  {
    "text": " And the claim is, well now,\nif I run some shortest path",
    "start": "2583470",
    "end": "2593630"
  },
  {
    "text": "algorithm, single\nsource shortest path algorithm this time, from s\nto compute the shortest path",
    "start": "2593630",
    "end": "2599560"
  },
  {
    "text": "distance to all of the\nvertices, the shortest distance",
    "start": "2599560",
    "end": "2606000"
  },
  {
    "text": "to each of the vertices\ncan't be positive,",
    "start": "2606000",
    "end": "2611310"
  },
  {
    "text": "because there's a 0-weight edge. So a minimum weight path is\ngoing to be no bigger than 0.",
    "start": "2611310",
    "end": "2618260"
  },
  {
    "text": " If it's finite, then there's\na finite length shortest path.",
    "start": "2618260",
    "end": "2623470"
  },
  {
    "text": "If it's minus\ninfinity, then there's a negative rate cycle in\nmy graph and I can stop.",
    "start": "2623470",
    "end": "2631290"
  },
  {
    "text": "So there are either\ntwo situations.",
    "start": "2631290",
    "end": "2638050"
  },
  {
    "text": "If delta s,v equals\nminus infinity--",
    "start": "2638050",
    "end": "2645090"
  },
  {
    "text": "so I guess this is, run single\nsource shortest paths from s.",
    "start": "2645090",
    "end": "2658290"
  },
  {
    "text": "And really, because this graph\ncould contain negative edge weights and could\ncontain negative cycles,",
    "start": "2658290",
    "end": "2664170"
  },
  {
    "text": "we can't really do better\nthan running Bellman-Ford here from s to compute these paths.",
    "start": "2664170",
    "end": "2670260"
  },
  {
    "text": "If there exists in this new\ngraph this Gs, if there exists",
    "start": "2670260",
    "end": "2676890"
  },
  {
    "text": "a vertex that has\nnegative infinite weight in the reweighted graph--",
    "start": "2676890",
    "end": "2685560"
  },
  {
    "text": "sorry, in the original graph G--",
    "start": "2685560",
    "end": "2690880"
  },
  {
    "text": "G hasn't been reweighted yet. If there's a negative\nweight distance from s,",
    "start": "2690880",
    "end": "2701380"
  },
  {
    "text": "then there was a negative weight\ncycle in the original graph.",
    "start": "2701380",
    "end": "2709029"
  },
  {
    "text": "Why is that? Well, if this was set\nto minus infinity, then there is some negative\nweight cycle in the graph.",
    "start": "2709030",
    "end": "2718300"
  },
  {
    "text": "The worry is that\nthat negative weight cycle was added to my graph\nby adding this vertex s.",
    "start": "2718300",
    "end": "2727030"
  },
  {
    "text": "But what do I know\nabout vertex s? It has no incoming edges. So no negative weight\ncycle could go through s.",
    "start": "2727030",
    "end": "2735430"
  },
  {
    "text": "So any negative weight cycle\nwas in the original graph, and so I can abort.",
    "start": "2735430",
    "end": "2741420"
  },
  {
    "text": "Abort. Yay. Otherwise, what do I do?",
    "start": "2741420",
    "end": "2751550"
  },
  {
    "text": "Well, I know the shortest\npath distances here",
    "start": "2751550",
    "end": "2756710"
  },
  {
    "text": "would satisfy the\ntriangle inequality. So if I reweight with h of\nv equal to delta s of v,",
    "start": "2756710",
    "end": "2778960"
  },
  {
    "text": "if we set our potentials\nin our reweighted graph to be the shortest path\ndistance from our super node s,",
    "start": "2778960",
    "end": "2788900"
  },
  {
    "text": "it satisfies the\ntriangle inequality. ",
    "start": "2788900",
    "end": "2795070"
  },
  {
    "text": "And because there's no negative\ncycles, all of these values are finite.",
    "start": "2795070",
    "end": "2800950"
  },
  {
    "text": "And then this reweighting will\nlead to a graph with strictly-- or not strictly--",
    "start": "2800950",
    "end": "2808720"
  },
  {
    "text": "strictly no negative weights\nor non-negative weights. OK, great.",
    "start": "2808720",
    "end": "2816440"
  },
  {
    "text": "So that's basically it. That's the idea behind\nJohnson's algorithm.",
    "start": "2816440",
    "end": "2822231"
  },
  {
    "start": "2822231",
    "end": "2828619"
  },
  {
    "start": "2827000",
    "end": "3412000"
  },
  {
    "text": "It's really a reduction problem\nor a reduction algorithm. We reducing from solving\nkind of signed all-pairs",
    "start": "2828620",
    "end": "2838580"
  },
  {
    "text": "shortest paths, graphs\nwhere their weights could be positive or\nnegative, and we're",
    "start": "2838580",
    "end": "2844230"
  },
  {
    "text": "reducing to creating\na graph that has the same shortest\npaths properties,",
    "start": "2844230",
    "end": "2850590"
  },
  {
    "text": "but only has non-negative\nedge weights. So we're reducing\nfrom a signed context to a non-negative\nweight context.",
    "start": "2850590",
    "end": "2857325"
  },
  {
    "text": " So Johnson's algorithm,\nwhat are the steps?",
    "start": "2857325",
    "end": "2866130"
  },
  {
    "text": "Construct Gs from\nG, just as up here.",
    "start": "2866130",
    "end": "2880839"
  },
  {
    "text": "I make a new vertex s. I put a 0 weight directed\nedge from s to every vertex.",
    "start": "2880840",
    "end": "2889190"
  },
  {
    "text": "So that's the first step. Second step-- compute E,\ns,v for all V in V, i.e--",
    "start": "2889190",
    "end": "2905690"
  },
  {
    "text": "or e.g-- I guess\nreally it should be i.e. because I don't really\nhave another option here--",
    "start": "2905690",
    "end": "2911690"
  },
  {
    "text": "but by Bellman-Ford. ",
    "start": "2911690",
    "end": "2919750"
  },
  {
    "text": "This is just a single\nrun of Bellman-Ford here. Compute.",
    "start": "2919750",
    "end": "2926269"
  },
  {
    "text": "And then there are\ntwo possibilities. If there exists a delta s,\nv that's minus infinity,",
    "start": "2926270",
    "end": "2944440"
  },
  {
    "text": "then abort. ",
    "start": "2944440",
    "end": "2949490"
  },
  {
    "text": "Else, make-- or reweight\nthe graph according to this",
    "start": "2949490",
    "end": "2962750"
  },
  {
    "text": "reweighting scheme, by\nreweighting each edge",
    "start": "2962750",
    "end": "2977170"
  },
  {
    "text": "in my original graph\nto have weight-- ",
    "start": "2977170",
    "end": "2984130"
  },
  {
    "text": "our new weight, which\nis our old weight, plus our transformation.",
    "start": "2984130",
    "end": "2989410"
  },
  {
    "text": "Now, our transformation is now\ngoing to set h, v to this delta s, v. So I'm going\nto add delta s,",
    "start": "2989410",
    "end": "3000630"
  },
  {
    "text": "u, and subtract delta s, v.\nThat's our reweighting scheme.",
    "start": "3000630",
    "end": "3006569"
  },
  {
    "text": "I'm just identifying h, v with\nthis shortest path distance here. ",
    "start": "3006570",
    "end": "3016300"
  },
  {
    "text": "And after I reweighted\nthat, I can just solve all-pairs shortest paths\non G prime with Dijkstra.",
    "start": "3016300",
    "end": "3032375"
  },
  {
    "text": " And then compute G shortest path\ndistances from G prime shortest",
    "start": "3032375",
    "end": "3050450"
  },
  {
    "text": "path distances. ",
    "start": "3050450",
    "end": "3057440"
  },
  {
    "text": "Compute these distances from the\nother using this algorithm up",
    "start": "3057440",
    "end": "3063200"
  },
  {
    "text": "here-- can compute distances\nin G from distances in G prime",
    "start": "3063200",
    "end": "3068900"
  },
  {
    "text": "in linear time-- or sorry, v times linear\ntime, linear time for each s--",
    "start": "3068900",
    "end": "3077150"
  },
  {
    "text": "for each vertex in my graph. OK, so that's the algorithm.",
    "start": "3077150",
    "end": "3082339"
  },
  {
    "text": "It's basically,\ncorrectness is trivial. We already proved-- the\nwhole part of this lecture,",
    "start": "3082340",
    "end": "3089840"
  },
  {
    "text": "the interesting\npart of this lecture was proving that, if we\nhad a transformation based",
    "start": "3089840",
    "end": "3095299"
  },
  {
    "text": "on a potential\nfunction that changed outgoing edges in a\nsymmetrically opposite way",
    "start": "3095300",
    "end": "3101240"
  },
  {
    "text": "as incoming edges, then that\npreserves shortest paths.",
    "start": "3101240",
    "end": "3107670"
  },
  {
    "text": "And then realizing that the\ntriangle inequality enforces",
    "start": "3107670",
    "end": "3115630"
  },
  {
    "text": "this condition that\nedge weights will be non-negative under\nthis reweighting,",
    "start": "3115630",
    "end": "3124359"
  },
  {
    "text": "so we find shortest\npath distances from some other\narbitrary vertex,",
    "start": "3124360",
    "end": "3129650"
  },
  {
    "text": "and set our potential functions\nto be those shortest path distance weights. We do the reweighting,\nbecause that reweighting",
    "start": "3129650",
    "end": "3138010"
  },
  {
    "text": "preserves shortest paths,\nwhich we already argued. ",
    "start": "3138010",
    "end": "3144000"
  },
  {
    "text": "Then we can do-- then this\nhas positive edge weights, so Dijkstra applies.",
    "start": "3144000",
    "end": "3149100"
  },
  {
    "text": "And then computing this\ntakes a small amount of time. OK, what is the running\ntime of this algorithm?",
    "start": "3149100",
    "end": "3155230"
  },
  {
    "text": "So this part,\nreconstructing this thing, this takes linear time. I'm just adding.",
    "start": "3155230",
    "end": "3160785"
  },
  {
    "text": " I'm just making a new\ngraph of the same size,",
    "start": "3160785",
    "end": "3167490"
  },
  {
    "text": "except I added v\nedges and one vertex. Computing-- doing Bellman-Ford\non this new modified graph,",
    "start": "3167490",
    "end": "3176490"
  },
  {
    "text": "that's just-- I'm doing that once. That takes V times E time. ",
    "start": "3176490",
    "end": "3184030"
  },
  {
    "text": "Doing this check,\nthat just takes-- I'm looping over my vertices. That just takes V time.",
    "start": "3184030",
    "end": "3190720"
  },
  {
    "text": "Otherwise, doing\nthis reweighting,",
    "start": "3190720",
    "end": "3195940"
  },
  {
    "text": "I change the weight\nof every edge. That takes order E time. ",
    "start": "3195940",
    "end": "3203520"
  },
  {
    "text": "And then solving G prime-- solving all-pairs shortest paths\non the modified edge weight",
    "start": "3203520",
    "end": "3211260"
  },
  {
    "text": "graph with Dijkstra\ntakes V times Dijkstra. That's-- I could use a little\nbit more board space here.",
    "start": "3211260",
    "end": "3220890"
  },
  {
    "text": "That's V times V\nlog, V plus E time,",
    "start": "3220890",
    "end": "3236559"
  },
  {
    "text": "which is actually the running\ntime that we're looking for. I wanted to reduce to not\nusing more than this time.",
    "start": "3236560",
    "end": "3242890"
  },
  {
    "text": "We used this amount of time. Let's make sure we still\ndidn't use even more.",
    "start": "3242890",
    "end": "3248050"
  },
  {
    "text": "After that, we compute these\npaths, as proofed before, in V times V plus E, which\nis smaller than that.",
    "start": "3248050",
    "end": "3261150"
  },
  {
    "text": "And so summing up all\nof these running times, this one dominates. And so Johnson's\ncan solve signed",
    "start": "3261150",
    "end": "3270240"
  },
  {
    "text": "weighted all-pairs\nshortest paths, signed all-pairs shortest paths, not\nin V times Bellman-Ford, like we",
    "start": "3270240",
    "end": "3280060"
  },
  {
    "text": "had before up here,\nbut faster, in nearly",
    "start": "3280060",
    "end": "3287260"
  },
  {
    "text": "linear for sparse graphs,\njust without this log factor.",
    "start": "3287260",
    "end": "3293180"
  },
  {
    "text": "So we got quite a\nbig improvement. So that's the nice\nthing about all-pairs",
    "start": "3293180",
    "end": "3300950"
  },
  {
    "text": "shortest paths is\nthat, really, we don't have to incur this\nbig cost in the context",
    "start": "3300950",
    "end": "3309859"
  },
  {
    "text": "of negative weights. Essentially, we just\nrun Bellman-Ford once to see if there is a negative\nweight cycle in my graph.",
    "start": "3309860",
    "end": "3317089"
  },
  {
    "text": "If it is, I save a lot of\nwork by stopping early.",
    "start": "3317090",
    "end": "3322460"
  },
  {
    "text": "So that's Johnson's. That's the end of\nour graphs lectures. We'll be having a\nreview and problem",
    "start": "3322460",
    "end": "3329119"
  },
  {
    "text": "session about how to solve\nproblems, graph problems using this material.",
    "start": "3329120",
    "end": "3336010"
  },
  {
    "text": "But we've talked about a lot\nof different things so far. We've talked about\ngraph reachability, connected components,\ndetecting cycles, detecting",
    "start": "3336010",
    "end": "3344259"
  },
  {
    "text": "topological sort\norders of a DAG. We've talked about finding\nnegative weight cycles,",
    "start": "3344260",
    "end": "3349500"
  },
  {
    "text": "single source shortest\npath algorithms, and now finally, today,\nall-pairs shortest path",
    "start": "3349500",
    "end": "3355350"
  },
  {
    "text": "algorithms, with a new\nalgorithm that's really not an entirely new algorithm.",
    "start": "3355350",
    "end": "3361740"
  },
  {
    "text": "We didn't have to do any\nproof by induction here. Really, the heavy\nwork that's happening",
    "start": "3361740",
    "end": "3368859"
  },
  {
    "text": "is we're reducing to using\neither Dijkstra or Bellman-Ford to do the heavy lifting of\nfinding single source shortest",
    "start": "3368860",
    "end": "3376660"
  },
  {
    "text": "paths efficiently. So Johnson's is really\njust glue to transform",
    "start": "3376660",
    "end": "3384069"
  },
  {
    "text": "a graph in a clever\nway, and then reducing to using some of\nthe shortest paths algorithms faster.",
    "start": "3384070",
    "end": "3390550"
  },
  {
    "text": "So that's our unit on graphs. Our next lecture,\nwe'll start talking about a general form\nof, not presenting you",
    "start": "3390550",
    "end": "3398950"
  },
  {
    "text": "with an algorithm,\nbut how to design your own algorithm in the\ncontext of dynamic programming.",
    "start": "3398950",
    "end": "3405310"
  },
  {
    "text": "So see you next lecture. ",
    "start": "3405310",
    "end": "3413000"
  }
]