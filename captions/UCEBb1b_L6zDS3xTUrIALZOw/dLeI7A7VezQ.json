[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Suppose we have a real-time system supporting\nthree devices:",
    "start": "410",
    "end": "3400"
  },
  {
    "text": "a keyboard whose interrupt handler has a service\ntime of 800 us,",
    "start": "3400",
    "end": "7910"
  },
  {
    "text": "a disk with a service time of 500 us,\nand a printer with a service time of 400 us.",
    "start": "7910",
    "end": "15389"
  },
  {
    "text": "What is the worst-case latency seen by each\ndevice?",
    "start": "15389",
    "end": "18949"
  },
  {
    "text": "For now we'll assume that requests are infrequent,\ni.e., that each request only happens once",
    "start": "18949",
    "end": "24140"
  },
  {
    "text": "in each scenario.",
    "start": "24140",
    "end": "26250"
  },
  {
    "text": "Requests can arrive at any time and in any\norder.",
    "start": "26250",
    "end": "29560"
  },
  {
    "text": "If we serve the requests in first-come-first-served\norder, each device might be delayed by the",
    "start": "29560",
    "end": "34730"
  },
  {
    "text": "service of all other devices.",
    "start": "34730",
    "end": "37170"
  },
  {
    "text": "So the start of the keyboard handler might\nbe delayed by the execution of the disk and",
    "start": "37170",
    "end": "41280"
  },
  {
    "text": "printer handlers, a worst-case latency of\n900 us.",
    "start": "41280",
    "end": "46710"
  },
  {
    "text": "The start of the disk handler might be delayed\nby the keyboard and printer handlers, a worst-case",
    "start": "46710",
    "end": "51579"
  },
  {
    "text": "latency of 1200 us.",
    "start": "51579",
    "end": "54448"
  },
  {
    "text": "And the printer handler might be delayed by\nthe keyboard and disk handlers, a worst-case",
    "start": "54449",
    "end": "58680"
  },
  {
    "text": "latency of 1300 us.",
    "start": "58680",
    "end": "62090"
  },
  {
    "text": "In this scenario we see that long-running\nhandlers have a huge impact on the worst-case",
    "start": "62090",
    "end": "66450"
  },
  {
    "text": "latency seen by the other devices.",
    "start": "66450",
    "end": "69789"
  },
  {
    "text": "What are the possibilities for reducing the\nworst-case latencies?",
    "start": "69790",
    "end": "73500"
  },
  {
    "text": "Is there a better scheduling algorithm than\nfirst-come-first-served?",
    "start": "73500",
    "end": "79390"
  },
  {
    "start": "79000",
    "end": "79000"
  },
  {
    "text": "One strategy is to assign priorities to the\npending requests and to serve the requests",
    "start": "79390",
    "end": "84030"
  },
  {
    "text": "in priority order.",
    "start": "84030",
    "end": "85850"
  },
  {
    "text": "If the handlers are uninterruptible, the priorities\nwill be used to select the *next* task to",
    "start": "85850",
    "end": "90140"
  },
  {
    "text": "be run at the completion of the current task.",
    "start": "90140",
    "end": "93470"
  },
  {
    "text": "Note that under this strategy, the current\ntask always runs to completion even if a higher-priority",
    "start": "93470",
    "end": "98780"
  },
  {
    "text": "request arrives while it's executing.",
    "start": "98780",
    "end": "101270"
  },
  {
    "text": "This is called a \"nonpreemptive\" or \"weak\"\npriority system.",
    "start": "101270",
    "end": "105820"
  },
  {
    "text": "Using a weak priority system, the worst-case\nlatency seen by each device is the worst-case",
    "start": "105820",
    "end": "110920"
  },
  {
    "text": "service time of all the other devices\n(since that handler may have just started",
    "start": "110920",
    "end": "115340"
  },
  {
    "text": "running when the new request arrives),\nplus the service time of all higher-priority",
    "start": "115340",
    "end": "120500"
  },
  {
    "text": "devices (since they'll be run first).",
    "start": "120500",
    "end": "122800"
  },
  {
    "text": "In our example, suppose we assigned the highest\npriority to the disk, the next priority to",
    "start": "122800",
    "end": "127840"
  },
  {
    "text": "the printer, and the lowest priority to the\nkeyboard.",
    "start": "127840",
    "end": "131670"
  },
  {
    "text": "The worst-case latency of the keyboard is\nunchanged since it has the lowest priority",
    "start": "131670",
    "end": "135610"
  },
  {
    "text": "and hence can be delayed by the higher-priority\ndisk and printer handlers.",
    "start": "135610",
    "end": "140590"
  },
  {
    "text": "The disk handler has the highest priority\nand so will always be selected for execution",
    "start": "140590",
    "end": "144849"
  },
  {
    "text": "after the current handler completes.",
    "start": "144850",
    "end": "147880"
  },
  {
    "text": "So its worst-case latency is the worst-case\nservice time for the currently-running handler,",
    "start": "147880",
    "end": "152910"
  },
  {
    "text": "which in this case is the keyboard.",
    "start": "152910",
    "end": "154840"
  },
  {
    "text": "So the worst-case latency for the disk is\n800 us.",
    "start": "154840",
    "end": "159140"
  },
  {
    "text": "This is a considerable improvement over the\nfirst-come-first-served scenario.",
    "start": "159140",
    "end": "164360"
  },
  {
    "text": "Finally the worst-case scenario for the printer\nis 1300 us since it may have to wait for the",
    "start": "164360",
    "end": "169840"
  },
  {
    "text": "keyboard handler to finish (which can take\nup to 800 us)",
    "start": "169840",
    "end": "173930"
  },
  {
    "text": "and then for a higher-priority disk request\nto be serviced (which takes 500 us).",
    "start": "173930",
    "end": "180829"
  },
  {
    "text": "How should priorities be assigned given hard\nreal-time constraints?",
    "start": "180830",
    "end": "185510"
  },
  {
    "start": "181000",
    "end": "181000"
  },
  {
    "text": "We'll assume each device has a service deadline\nD after the arrival of its service request.",
    "start": "185510",
    "end": "192239"
  },
  {
    "text": "If not otherwise specified, assume D is the\ntime until the *next* request for the same",
    "start": "192240",
    "end": "197640"
  },
  {
    "text": "device.",
    "start": "197640",
    "end": "198640"
  },
  {
    "text": "This is a reasonably conservative assumption\nthat prevents the system from falling further",
    "start": "198640",
    "end": "202460"
  },
  {
    "text": "and further behind.",
    "start": "202460",
    "end": "204610"
  },
  {
    "text": "For example, it makes sense that the keyboard\nhandler should finish processing one character",
    "start": "204610",
    "end": "209790"
  },
  {
    "text": "before the next arrives.",
    "start": "209790",
    "end": "211760"
  },
  {
    "text": "\"Earliest Deadline\" is a strategy for assigning\npriorities that is guaranteed to meet the",
    "start": "211760",
    "end": "216709"
  },
  {
    "text": "deadlines if any priority assignment can meet\nthe deadlines.",
    "start": "216709",
    "end": "221209"
  },
  {
    "text": "It's very simple: Sort the requests by their\ndeadlines.",
    "start": "221209",
    "end": "224640"
  },
  {
    "text": "Assign the highest priority to the earliest\ndeadline, second priority to the next deadline,",
    "start": "224640",
    "end": "229459"
  },
  {
    "text": "and so on.",
    "start": "229459",
    "end": "231290"
  },
  {
    "text": "A weak priority system will choose the pending\nrequest with the highest priority, i.e., the",
    "start": "231290",
    "end": "236650"
  },
  {
    "text": "request that has the earliest deadline.",
    "start": "236650",
    "end": "240269"
  },
  {
    "text": "Earliest Deadline has an intuitive appeal.",
    "start": "240270",
    "end": "242380"
  },
  {
    "text": "Imagine standing in a long security line at\nthe airport.",
    "start": "242380",
    "end": "245510"
  },
  {
    "text": "It would make sense to prioritize the processing\nof passengers who have the earliest flights",
    "start": "245510",
    "end": "250720"
  },
  {
    "text": "assuming that there's enough time to process\neveryone before their flight leaves.",
    "start": "250720",
    "end": "256739"
  },
  {
    "text": "Processing 10 people whose flights leave in\n30 minutes before someone whose flight leaves",
    "start": "256739",
    "end": "260500"
  },
  {
    "text": "in 5 min will cause that last person to miss\ntheir flight.",
    "start": "260500",
    "end": "265200"
  },
  {
    "text": "But if that person is processed first, the\nother passengers may be slightly delayed but",
    "start": "265200",
    "end": "270060"
  },
  {
    "text": "everyone will make their flight.",
    "start": "270060",
    "end": "272510"
  },
  {
    "text": "This is the sort of scheduling problem that\nEarliest Deadline and a weak priority system",
    "start": "272510",
    "end": "277070"
  },
  {
    "text": "can solve.",
    "start": "277070",
    "end": "279360"
  },
  {
    "text": "It's outside the scope of our discussion,\nbut it's interesting to think about what should",
    "start": "279360",
    "end": "283129"
  },
  {
    "text": "happen if some flights are going to be missed.",
    "start": "283130",
    "end": "287090"
  },
  {
    "text": "If the system is overloaded, prioritizing\nby earliest deadline may mean that everyone",
    "start": "287090",
    "end": "291800"
  },
  {
    "text": "will miss their flights!",
    "start": "291800",
    "end": "293520"
  },
  {
    "text": "In this scenario it might be better to assign\npriorities to the minimize the total number",
    "start": "293520",
    "end": "297970"
  },
  {
    "text": "of missed flights.",
    "start": "297970",
    "end": "299650"
  },
  {
    "text": "This gets complicated in a hurry since the\nassignment of priorities now depends on exactly",
    "start": "299650",
    "end": "304250"
  },
  {
    "text": "what requests are pending and how long it\nwill take them to be serviced.",
    "start": "304250",
    "end": "308150"
  },
  {
    "text": "An intriguing problem to think about!",
    "start": "308150",
    "end": "310120"
  }
]