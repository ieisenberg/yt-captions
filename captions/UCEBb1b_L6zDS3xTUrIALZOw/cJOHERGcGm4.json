[
  {
    "text": "-- week of 6.046.\nWoohoo! The topic of this final week,\namong our advanced topics,",
    "start": "7000",
    "end": "13485"
  },
  {
    "text": "is cache oblivious algorithms.\nThis is a particularly fun area, one dear to my heart\nbecause I've done a lot of",
    "start": "13485",
    "end": "22350"
  },
  {
    "text": "research in this area.\nThis is an area co-founded by Professor Leiserson.\nSo, in fact,",
    "start": "22350",
    "end": "29877"
  },
  {
    "text": "the first context in which I\nmet Professor Leiserson was him giving a talk about cache\noblivious algorithms at WADS '99",
    "start": "29877",
    "end": "38359"
  },
  {
    "text": "in Vancouver I think.\nYeah, that has to be an odd year.\nSo, I learned about cache",
    "start": "38359",
    "end": "44063"
  },
  {
    "text": "oblivious algorithms then,\nstarted working in the area, and it's been a fun place to\nplay.",
    "start": "44063",
    "end": "50424"
  },
  {
    "text": "But this topic in some sense\nwas also developed in the context of this class.\nI think there was one semester,",
    "start": "50424",
    "end": "58175"
  },
  {
    "text": "probably also '98-'99 where all\nof the problem sets were about cache oblivious algorithms.\nAnd they were,",
    "start": "58175",
    "end": "67023"
  },
  {
    "text": "in particular,\nworking out the research ideas at the same time.\nSo, it must have been fun",
    "start": "67023",
    "end": "73308"
  },
  {
    "text": "semester.\nWe consider doing that this semester, but we kept it to the\nsimple.",
    "start": "73308",
    "end": "78717"
  },
  {
    "text": "We know a lot more about cache\noblivious algorithms by now as you might expect.\nRight, I think that's all the",
    "start": "78717",
    "end": "86465"
  },
  {
    "text": "setting.\nI mean, it was kind of developed also with a bunch of\nMIT students in particular,",
    "start": "86465",
    "end": "93312"
  },
  {
    "text": "M.Eng.\nstudent, Harold Prokop. It was his M.Eng.\nthesis. There is all the citations I\nwill give for now.",
    "start": "93313",
    "end": "99971"
  },
  {
    "text": "I haven't posted yet,\nbut there are some lecture notes that are already on my\nwebpage.",
    "start": "99971",
    "end": "105553"
  },
  {
    "text": "But I will link to them from\nthe course website that gives all the references for all the\nresults I'll be talking about.",
    "start": "105553",
    "end": "113423"
  },
  {
    "text": "They've all been done in the\nlast five years or so, in particular,\nstarting in '99 when the first",
    "start": "113423",
    "end": "119745"
  },
  {
    "text": "paper was published.\nBut I won't give the specific citations in lecture.\nAnd, this topic is related to",
    "start": "119745",
    "end": "128145"
  },
  {
    "text": "the topic of last week,\nmultithreaded algorithms, although at a somewhat high\nlevel.",
    "start": "128145",
    "end": "134137"
  },
  {
    "text": "And then it's also dealing with\nparallelism in modern machines. And we've had throughout all of\nthese last two lectures,",
    "start": "134137",
    "end": "142793"
  },
  {
    "text": "we've had this very simple\nmodel of a computer where we have random access.\nYou can access memory at a cost",
    "start": "142793",
    "end": "150487"
  },
  {
    "text": "of one.\nYou can read and write a word of memory.\nThere is some details on how",
    "start": "150487",
    "end": "156627"
  },
  {
    "text": "big a word can be and whatnot.\nIt's pretty basic, simple, flat model.\nAnd, at the multithreaded",
    "start": "156628",
    "end": "161980"
  },
  {
    "text": "algorithm is the idea that,\nwell, maybe you have multiple threads of computation running\nat once, but you still have this",
    "start": "161980",
    "end": "168844"
  },
  {
    "text": "very flat memory.\nEveryone can access anything in memory at a constant cost.\nWe're going to change that",
    "start": "168844",
    "end": "174661"
  },
  {
    "text": "model now.\nAnd we are going to realize that a real machine,\nthe memory of a real machine is",
    "start": "174662",
    "end": "183090"
  },
  {
    "text": "some hierarchy.\nYou have some CPU, you have some cache,\nprobably on the same chip,",
    "start": "183090",
    "end": "190272"
  },
  {
    "text": "level 1 cache,\nyou have some level 2 cache, if you're lucky,\nmaybe you have some level 3",
    "start": "190272",
    "end": "198000"
  },
  {
    "text": "cache, before you get to main\nmemory. And then, you probably have a\nreally big disk and probably",
    "start": "198000",
    "end": "206454"
  },
  {
    "text": "there's even some cache out\nhere, but I won't even think about that.\nSo, the point is,",
    "start": "206454",
    "end": "215139"
  },
  {
    "text": "you have lots of different\nlevels of memory and what's changing here is that things\nthat are very close to the CPU",
    "start": "215139",
    "end": "222577"
  },
  {
    "text": "are very fast to access.\nUsually level 1 cache you can access in one clock cycle or a\nfew.",
    "start": "222577",
    "end": "228407"
  },
  {
    "text": "And then, things get slower and\nslower. Memory still costs like 70 ns\nor so to access a chunk out of.",
    "start": "228407",
    "end": "234974"
  },
  {
    "text": "And that's a long time.\n70 ns is, of course, a very long time.\nSo, as we go out here,",
    "start": "234974",
    "end": "241547"
  },
  {
    "text": "we get slower.\nBut we also get bigger. I mean, if we could put\neverything at level 1 cache,",
    "start": "241547",
    "end": "247736"
  },
  {
    "text": "the problem would be solved.\nBut what would be a flat memory.\nAccessing everything in here,",
    "start": "247736",
    "end": "253925"
  },
  {
    "text": "we assumed takes the same\namount of time. But usually,\nwe can't afford, it's not even possible to put\neverything in level 1 cache.",
    "start": "253925",
    "end": "262716"
  },
  {
    "text": "I mean, there's a reason why\nthere is a memory hierarchy. Does anyone have a suggestion\non what that reason might be?",
    "start": "262716",
    "end": "272000"
  },
  {
    "text": "It's like one of these limits\nin life. Yeah?\nFast memory is expensive.",
    "start": "272000",
    "end": "277457"
  },
  {
    "text": "That's the practical\nlimitations indeed, that you could try to build\nmore and more at level 1 cache",
    "start": "277457",
    "end": "285278"
  },
  {
    "text": "and maybe you could try to,\nwell, yeah. Expenses is a good reason,\nand practically,",
    "start": "285278",
    "end": "291793"
  },
  {
    "text": "that's why they may be the\nsizes are what they are. But suppose really fast memory\nwere really cheap.",
    "start": "291794",
    "end": "301000"
  },
  {
    "text": "There is a physical limitation\nof what's going on, yeah?\nThe speed of light. Yeah, that's a bit of a\nproblem, right?",
    "start": "301000",
    "end": "308345"
  },
  {
    "text": "No matter how much,\nlet's suppose you can only fit so many bits in an atom.\nYou can only fit so many bits",
    "start": "308345",
    "end": "315095"
  },
  {
    "text": "in a particular amount of space.\nIf you want more bits, and you need more space,\nand the more space you have,",
    "start": "315095",
    "end": "322110"
  },
  {
    "text": "the longer it's going to take\nfor a round-trip. So, if you assume your CPU is\nlike this point in space,",
    "start": "322110",
    "end": "328727"
  },
  {
    "text": "so it's relatively small and it\nhas to get the data in, the bigger the data,\nthe farther it has to be away.",
    "start": "328727",
    "end": "337000"
  },
  {
    "text": "But, you can have these cores\naround the CPU that are, we don't usually live in 3-D,\nand chips were usually in 2-D,",
    "start": "337000",
    "end": "344070"
  },
  {
    "text": "but never mind.\nYou can have the sphere that's closer to the CPU that's a lot\nfaster to access.",
    "start": "344070",
    "end": "349878"
  },
  {
    "text": "And as you get further away it\ncosts more. And that's essentially what\nthis model is representing,",
    "start": "349878",
    "end": "355876"
  },
  {
    "text": "although it's a bit\napproximated from the intrinsic physics and geometry and\nwhatnot.",
    "start": "355876",
    "end": "362000"
  },
  {
    "text": "But that's the idea.\nThe latency, the round-trip time to get some\nof this memory has to be big.",
    "start": "362000",
    "end": "371142"
  },
  {
    "text": "In general, the costs to access\nmemory is made up of two things.",
    "start": "371142",
    "end": "377403"
  },
  {
    "text": "There's the latency,\nthe round-trip time, which in particular is limited\nby the speed of light.",
    "start": "377403",
    "end": "386546"
  },
  {
    "text": "And, plus the round-trip time,\nyou also have to get the data",
    "start": "386546",
    "end": "392409"
  },
  {
    "text": "out.\nAnd depending on how much data you want, it could take longer.\nOK, so there's something.",
    "start": "392409",
    "end": "400486"
  },
  {
    "text": "There could be,\nget this right, let's say, the amount of data\ndivided by the bandwidth.",
    "start": "400486",
    "end": "406822"
  },
  {
    "text": "OK, the bandwidth is at what\nrate can you get the data out? And if you look at the\nbandwidth of these various",
    "start": "406822",
    "end": "414817"
  },
  {
    "text": "levels of memory,\nit's all pretty much the same. If you have a well-designed\ncomputer the bandwidths should",
    "start": "414817",
    "end": "422661"
  },
  {
    "text": "all be the same.\nOK, as you can still get data off disc really,\nreally fast,",
    "start": "422661",
    "end": "428988"
  },
  {
    "text": "usually at about the speed of\nyour bus, and that the bus gets the CPU hopefully as fast as\neverything else.",
    "start": "428988",
    "end": "436267"
  },
  {
    "text": "So, even though they're slower,\nthey're really only slower in terms of latency.\nAnd so, this part is maybe",
    "start": "436267",
    "end": "443475"
  },
  {
    "text": "reasonable.\nThe bandwidth looks pretty much the same universally.\nIt's the latency that's going",
    "start": "443475",
    "end": "449913"
  },
  {
    "text": "up.\nSo, if the latency is going up but we still get to divide by\nthe same amount of bandwidth,",
    "start": "449913",
    "end": "456280"
  },
  {
    "text": "what should we do to make the\naccess cost at all these levels about the same?\nThis is fixed.",
    "start": "456281",
    "end": "465043"
  },
  {
    "text": "Let's say this is increasing,\nbut this is still staying big.",
    "start": "465043",
    "end": "473656"
  },
  {
    "text": "What could we do to balance\nthis formula?",
    "start": "473656",
    "end": "479496"
  },
  {
    "text": "Change the amounts.\nAs the latency goes up,",
    "start": "479496",
    "end": "485290"
  },
  {
    "text": "if we increase the amount,\nthen the amortized cost to",
    "start": "485290",
    "end": "490470"
  },
  {
    "text": "access one element will go down.\nSo, this is amortization in a",
    "start": "490470",
    "end": "496545"
  },
  {
    "text": "very simple sense.\nSo, this was to access a whole block, let's say,\nand this amount was the size of",
    "start": "496545",
    "end": "506107"
  },
  {
    "text": "the block.\nSo, the amortized cost, then, to access one element is\ngoing to be the latency divided",
    "start": "506107",
    "end": "516399"
  },
  {
    "text": "by the size of the block,\nthe amount plus one over the",
    "start": "516399",
    "end": "521700"
  },
  {
    "text": "bandwidth.\nOK, so this is what you should implicitly be thinking in your\nhead.",
    "start": "521700",
    "end": "529200"
  },
  {
    "text": "So, I'm just dividing here by\nthe amounts because the amount",
    "start": "529200",
    "end": "535100"
  },
  {
    "text": "is how many elements you get in\none access, let's suppose.",
    "start": "535100",
    "end": "542000"
  },
  {
    "text": "OK, so we get this formula for\nthe amortized cost. The one over bandwidth is going\nto be good no matter what level",
    "start": "542000",
    "end": "548733"
  },
  {
    "text": "we are on, I claim.\nThere's no real fundamental limitation there except it might\nbe expensive.",
    "start": "548733",
    "end": "554253"
  },
  {
    "text": "And the latency week at the\namortized out by the amounts, so whatever the latency is,\nat the latency gets bigger out",
    "start": "554254",
    "end": "561109"
  },
  {
    "text": "here, we just get more and more\nstuff and then we make these two terms equal, let's say.\nThat would be a good way to",
    "start": "561109",
    "end": "567964"
  },
  {
    "text": "balance things.\nSo what particular, disc has a really high latency.\nNot only is there speed of",
    "start": "567964",
    "end": "574483"
  },
  {
    "text": "light issues here,\nbut there's actually the speed of the head moving on the tracks\nof the disk.",
    "start": "574484",
    "end": "579736"
  },
  {
    "text": "That takes a long time.\nThere's a physical motion. Everything else here doesn't\nusually have physical motion.",
    "start": "579736",
    "end": "585788"
  },
  {
    "text": "It's just electric.\nSo, this is really, really slow and latency,\nso when you read something out",
    "start": "585788",
    "end": "591040"
  },
  {
    "text": "of disk, you might as well read\na lot of data from disc, like a megabyte or so.\nIt's probably even old these",
    "start": "591040",
    "end": "597034"
  },
  {
    "text": "days.\nMaybe you read multiple megabytes when you read anything\nfrom disk if you want these to",
    "start": "597034",
    "end": "602173"
  },
  {
    "text": "be matched.\nOK, there's a bit of a problem with doing that.\nAny suggestions what the",
    "start": "602173",
    "end": "610139"
  },
  {
    "text": "problem would be?\nSo, you have this algorithm. And, whenever it reads\nsomething off of desk,",
    "start": "610140",
    "end": "617946"
  },
  {
    "text": "it reads an entire megabyte of\nstuff around the element it asked for.\nSo the amortized cost to access",
    "start": "617947",
    "end": "626543"
  },
  {
    "text": "is going to be reasonable,\nbut that's actually sort of assuming something.\nYeah?",
    "start": "626543",
    "end": "634493"
  },
  {
    "text": "Right.\nI'm assuming I'm ever going to use the rest of that data.\nIf I'm going to read 10 MB",
    "start": "634493",
    "end": "643177"
  },
  {
    "text": "around the one element that\nasked for, I access A bracket I,",
    "start": "643177",
    "end": "649000"
  },
  {
    "text": "and I get 10 million items from\nA around I, it would be kind of",
    "start": "649000",
    "end": "655118"
  },
  {
    "text": "good if the algorithm actually\nused that data for something.",
    "start": "655118",
    "end": "660940"
  },
  {
    "text": "It seems reasonable.\nSo, this would be spatial",
    "start": "660940",
    "end": "666710"
  },
  {
    "text": "locality.\nSo, we want, I mean the goal of this world\nin cache oblivious algorithms",
    "start": "666710",
    "end": "675277"
  },
  {
    "text": "and cache efficient algorithms\nin general is you want",
    "start": "675277",
    "end": "680915"
  },
  {
    "text": "algorithms that perform well\nwhen this is happening.",
    "start": "680915",
    "end": "686445"
  },
  {
    "text": "So, this is the idea of\nblocking. And we want the algorithm to\nuse all or at least most of the",
    "start": "686445",
    "end": "696816"
  },
  {
    "text": "elements in a block,\na consecutive chunk of memory. So, this is spatial locality.",
    "start": "696816",
    "end": "705000"
  },
  {
    "text": "Ideally, we'd use all of them\nright then. But I mean, depending on your\nalgorithm, that's a little bit tricky.\nThere is another issue,",
    "start": "715000",
    "end": "721511"
  },
  {
    "text": "though.\nSo, you read in your thing into, read your 10 MB into main\nmemory, let's say, and your memory,\nlet's say, is at least,",
    "start": "721511",
    "end": "727619"
  },
  {
    "text": "these days you should have a 4\nGB memory or something. So, you could read and actually\na lot of different blocks into",
    "start": "727619",
    "end": "733373"
  },
  {
    "text": "main memory.\nWhat you'd like is that you can use those blocks for as long as\npossible. Maybe you don't even use them.\nIf you have a linear time",
    "start": "733373",
    "end": "740339"
  },
  {
    "text": "algorithm, you're probably only\ngoing to visit each element a constant number of times.\nSo, this is enough.",
    "start": "740339",
    "end": "745589"
  },
  {
    "text": "But if your algorithm is more\nthan linear time, you're going to be accessing\nelements more than once.",
    "start": "745589",
    "end": "752000"
  },
  {
    "text": "So, it would be a good idea not\nonly to use all the elements of",
    "start": "752000",
    "end": "757605"
  },
  {
    "text": "the blocks, but use them as many\ntimes as you can before you have",
    "start": "757605",
    "end": "763391"
  },
  {
    "text": "to throw the block out.\nThat's temporal locality. So ideally, you even reuse\nblocks as much as possible.",
    "start": "763391",
    "end": "772523"
  },
  {
    "text": "So, I mean, we have all these\ncaches. So, I didn't write this word.\nJust in case I don't know how",
    "start": "772523",
    "end": "781021"
  },
  {
    "text": "to spell it, it's not the money.\nWe should use those caches for",
    "start": "781021",
    "end": "787107"
  },
  {
    "text": "something.\nI mean, the fact that they store more than one block,\neach cache can store several",
    "start": "787107",
    "end": "793429"
  },
  {
    "text": "blocks.\nHow many? Well, we'll get to that in a\nsecond. OK, so this is the general\nmotivation, but at this point",
    "start": "793429",
    "end": "800876"
  },
  {
    "text": "the model is still pretty damn\nugly. If you wanted to design an\nalgorithm that runs well on this",
    "start": "800876",
    "end": "807409"
  },
  {
    "text": "kind of machine directly,\nit's possible but pretty difficult, and essentially never\ndone, let's say,",
    "start": "807409",
    "end": "814223"
  },
  {
    "text": "even though this is what real\nmachines look like. At least in theory,\nand pretty much in practice,",
    "start": "814223",
    "end": "822935"
  },
  {
    "text": "the main thing to think about\nis two levels at a time. So, this is a simplification\nwhere we can say a lot more",
    "start": "822935",
    "end": "831977"
  },
  {
    "text": "about algorithms,\na simplification over this model.\nSo, in this model,",
    "start": "831978",
    "end": "837588"
  },
  {
    "text": "each of these levels has\ndifferent block sizes, and a different total sizes,\nit's a mess to deal with and",
    "start": "837588",
    "end": "846129"
  },
  {
    "text": "design algorithms for.\nIf you just think about two levels, it's relatively easy.\nSo, we have our CPU which we",
    "start": "846129",
    "end": "857330"
  },
  {
    "text": "assume has a constant number of\nregisters only.",
    "start": "857330",
    "end": "862801"
  },
  {
    "text": "So, you know,\nonce it has a couple of data items, you can add them and\nwhatnot.",
    "start": "862801",
    "end": "871841"
  },
  {
    "text": "Then we have this really fast\npipe. So, I draw it thick to some\ncache.",
    "start": "871841",
    "end": "881000"
  },
  {
    "text": "So this is cache.\nAnd, we have a relatively",
    "start": "881000",
    "end": "889399"
  },
  {
    "text": "narrow pipe to some really big\nother storage,",
    "start": "889399",
    "end": "898200"
  },
  {
    "text": "which I will call main memory.\nSo, I mean, that's the general",
    "start": "898200",
    "end": "906933"
  },
  {
    "text": "picture.\nNow, this could represent any two of these levels.\nIt could be between L3 cache",
    "start": "906933",
    "end": "912411"
  },
  {
    "text": "and make memory.\nThat's maybe, what?\nThe naming corresponds to best. Or cache could in fact be main\nmemory, what we consider the RAM",
    "start": "912411",
    "end": "920595"
  },
  {
    "text": "of the machine,\nand what's called a memory over there to be the disk.\nIt's whatever you care about.",
    "start": "920595",
    "end": "926782"
  },
  {
    "text": "And usually,\nif you have a program, that's what usually we assume\neverything fits in main memory.",
    "start": "926782",
    "end": "934000"
  },
  {
    "text": "Then you care about the caching\nbehavior. So you probably look between\nthese two levels.",
    "start": "934000",
    "end": "939115"
  },
  {
    "text": "That's probably what matters\nthe most inner program because the cost differential here is\nreally big relative to the cost",
    "start": "939116",
    "end": "946219"
  },
  {
    "text": "differential here.\nIf your data doesn't even fit it main memory,\nand you have to go to disk,",
    "start": "946219",
    "end": "951576"
  },
  {
    "text": "then you really care about this\nlevel because the cost differential here is huge.\nIt's like six orders of",
    "start": "951576",
    "end": "957716"
  },
  {
    "text": "magnitude, let's say.\nSo, in practice you may think of just two memory levels that\nare the most relevant.",
    "start": "957716",
    "end": "965000"
  },
  {
    "text": "OK, now I'm going to define\nsome parameters. I'm going to call them cache\nand make memory just for clarity",
    "start": "965000",
    "end": "974683"
  },
  {
    "text": "because I like to think of main\nmemory just the way it used to",
    "start": "974683",
    "end": "980418"
  },
  {
    "text": "be.\nAnd now all we have to worry about is this extra thing called\ncache.",
    "start": "980418",
    "end": "986905"
  },
  {
    "text": "It has some bounded size,\nand there's a block size. The block size is B.\nand a number of blocks is M",
    "start": "986905",
    "end": "996025"
  },
  {
    "text": "over B.\nSo, the total size of the cache",
    "start": "996025",
    "end": "1001132"
  },
  {
    "text": "is M.\nOK, main memory is also blocked into blocks of size B.\nAnd we assume that it has",
    "start": "1001132",
    "end": "1009519"
  },
  {
    "text": "essentially infinite size.\nWe don't care about its size in",
    "start": "1009519",
    "end": "1015277"
  },
  {
    "text": "this picture.\nIt's whatever is big enough to hold the size of your algorithm,\nor data structure,",
    "start": "1015278",
    "end": "1024674"
  },
  {
    "text": "or whatever.\nOK, so that's the general model.\nAnd for strange,",
    "start": "1024675",
    "end": "1031320"
  },
  {
    "text": "historical reasons,\nwhich I don't want to get into, these things are called capital\nM and capital B.",
    "start": "1031321",
    "end": "1040240"
  },
  {
    "text": "Even though M sounds a lot like\nmemory, it's really for cache,",
    "start": "1040241",
    "end": "1045850"
  },
  {
    "text": "and don't ask.\nOK, this is to preserve history.\nOK, now what do we do with this",
    "start": "1045850",
    "end": "1052922"
  },
  {
    "text": "model?\nIt seems nice, but now what do we measure\nabout it? What I'm going to assume is\nthat the cache is really fast.",
    "start": "1052922",
    "end": "1059870"
  },
  {
    "text": "So the CPU can access cache\nessentially instantaneously. I still have to pay for the\ncomputation that the CPU is",
    "start": "1059870",
    "end": "1066631"
  },
  {
    "text": "doing, but I'm assuming cache is\nclose enough that I don't care. And that may memory is so big\nthat it has to be far away,",
    "start": "1066631",
    "end": "1074013"
  },
  {
    "text": "and therefore,\nthis pipe is a problem. I mean, what I should really\ndraw is that pipe is still",
    "start": "1074013",
    "end": "1079657"
  },
  {
    "text": "thick, but is really long.\nSo, the latency is high. The bandwidth is still high.\nOK, and all transfers here",
    "start": "1079657",
    "end": "1087413"
  },
  {
    "text": "happened as blocks.\nSo, when you don't have something, so the idea is CPU\nasks for A of I,",
    "start": "1087413",
    "end": "1092913"
  },
  {
    "text": "as for something in memory,\nif it's in the cache, it gets it.\nThat's free. Otherwise, it has to grab the\nentire block containing that",
    "start": "1092913",
    "end": "1101005"
  },
  {
    "text": "element from main memory,\nbrings it into cache, maybe kicks somebody out if the\ncache was full,",
    "start": "1101005",
    "end": "1106820"
  },
  {
    "text": "and then the CPU can use that\ndata and keep going. Until it accesses something\nelse that's not in cache,",
    "start": "1106821",
    "end": "1113205"
  },
  {
    "text": "then it has to grab it from\nmain memory. When you kick something out,\nyou're actually writing back to",
    "start": "1113206",
    "end": "1123588"
  },
  {
    "text": "memory.\nThat's the model. So, we suppose the accesses to\ncache are free.",
    "start": "1123588",
    "end": "1131294"
  },
  {
    "text": "But we can still think about\nthe running time of the",
    "start": "1131294",
    "end": "1136988"
  },
  {
    "text": "algorithm.\nI'm not going to change the definition of running time.\nThis would be the computation",
    "start": "1136989",
    "end": "1145733"
  },
  {
    "text": "time, or the work if you want to\nuse multithreaded lingo, computation time.\nOK, so we still have time,",
    "start": "1145734",
    "end": "1153767"
  },
  {
    "text": "and T of N will still mean what\nit did before. This is just an extra level of\nrefinement of understanding of",
    "start": "1153767",
    "end": "1162287"
  },
  {
    "text": "what's going on.\nEssentially, measuring the parallelism that\nwe can exploit out of the memory",
    "start": "1162287",
    "end": "1169589"
  },
  {
    "text": "system, that when you access\nsomething you actually get B items.\nSo, this is the old stuff.",
    "start": "1169589",
    "end": "1179980"
  },
  {
    "text": "Now, what I want to do is count\nmemory transfers.",
    "start": "1179980",
    "end": "1187330"
  },
  {
    "text": "These are transfers of blocks,\nso I should say block memory",
    "start": "1187330",
    "end": "1196210"
  },
  {
    "text": "transfers between the two\nlevels, so, between the cache",
    "start": "1196210",
    "end": "1204477"
  },
  {
    "text": "and main memory.\nSo, memory transfers are either",
    "start": "1204478",
    "end": "1212660"
  },
  {
    "text": "reading reads or writes.\nMaybe I should say that.",
    "start": "1212660",
    "end": "1219875"
  },
  {
    "text": "These are number of block reads\nand writes from and to the main",
    "start": "1219875",
    "end": "1229196"
  },
  {
    "text": "memory.\nOK, so I'm going to introduce some notation.\nThis is new notation,",
    "start": "1229196",
    "end": "1235934"
  },
  {
    "text": "so we'll see how it works out.\nMT of N I want to represent the number of memory transfers\ninstead of just normal time of",
    "start": "1235934",
    "end": "1244955"
  },
  {
    "text": "the problem of size N.\nReally, this is a function that depends not only on N but also\non these parameters,",
    "start": "1244955",
    "end": "1252897"
  },
  {
    "text": "B and M, in our model.\nSo, this is what it should be, MT_B,M(N), but that's obviously\npretty messy,",
    "start": "1252897",
    "end": "1260299"
  },
  {
    "text": "so I'm going to stick to MT of\nN. But this will always,\nbecause mainly I care about the",
    "start": "1260299",
    "end": "1267003"
  },
  {
    "text": "growth in terms of N.\nwell, I care about the growth in terms of all things,\nbut the only thing I could",
    "start": "1267003",
    "end": "1272723"
  },
  {
    "text": "change is N.\nSo, most of the time I only think about, like when we are\nwriting recurrences,",
    "start": "1272723",
    "end": "1277805"
  },
  {
    "text": "only N is changing.\nI can't recurse on the block size.\nI can't recurse on the size of cache.\nThose are given to me.",
    "start": "1277806",
    "end": "1284161"
  },
  {
    "text": "They're fixed.\nOK, so we'll be changing N mainly.\nBut B and M always matter here. They're not constants.\nThey're parameters of the",
    "start": "1284161",
    "end": "1291382"
  },
  {
    "text": "model.\nOK, easy enough. This is something called the\ndisk access model,",
    "start": "1291382",
    "end": "1299515"
  },
  {
    "text": "if you like DAM models,\nor the external memory model,",
    "start": "1299515",
    "end": "1304980"
  },
  {
    "text": "or the cache aware model.\nMaybe I should mention that;",
    "start": "1304980",
    "end": "1310549"
  },
  {
    "text": "this is the cache aware.\nIn general, you have some",
    "start": "1310550",
    "end": "1315700"
  },
  {
    "text": "algorithm that runs on this kind\nof model, machine model.",
    "start": "1315700",
    "end": "1321585"
  },
  {
    "text": "That's a cache aware algorithm.\nOK, we're not too interested in",
    "start": "1321585",
    "end": "1327797"
  },
  {
    "text": "cache aware algorithms.\nWe've seen one, B trees.\nB trees are cache aware data structure.\nYou assume that there is some",
    "start": "1327797",
    "end": "1334351"
  },
  {
    "text": "block size, B,\nunderlying. Maybe you didn't see exactly\nthis model. In particular,\nit didn't really matter how big",
    "start": "1334351",
    "end": "1340673"
  },
  {
    "text": "the cache was because you just\nwanted to know. When I read B items,\nI can use all of them as much",
    "start": "1340673",
    "end": "1346124"
  },
  {
    "text": "as possible and figure out where\nI fit among those B items, and that gives me log base B of\nN memory transfers instead of",
    "start": "1346124",
    "end": "1352968"
  },
  {
    "text": "log N, which would be,\nif you just threw your favorite balanced binary search tree.\nSo, log base B of N is",
    "start": "1352968",
    "end": "1361838"
  },
  {
    "text": "definitely better than log base\n2 of N. B trees are a cache aware\nalgorithm.",
    "start": "1361838",
    "end": "1371257"
  },
  {
    "text": "OK, what we would like to do\ntoday and next lecture is get",
    "start": "1371258",
    "end": "1378612"
  },
  {
    "text": "cache oblivious algorithms.\nSo, there's essentially only",
    "start": "1378612",
    "end": "1386176"
  },
  {
    "text": "one difference between cache\naware algorithms and cache",
    "start": "1386176",
    "end": "1392302"
  },
  {
    "text": "oblivious algorithms.\nIn cache oblivious algorithms,",
    "start": "1392302",
    "end": "1398088"
  },
  {
    "text": "the algorithm doesn't know what\nB and M are. So this is a bit of a subtle\npoint, but very cool idea.",
    "start": "1398088",
    "end": "1410000"
  },
  {
    "text": "You assume that this is the\nmodel of the machine, and you care about the number\nof memory transfers between this",
    "start": "1410000",
    "end": "1416043"
  },
  {
    "text": "cache of size M with blocking B,\nand main memory with blocking B.\nBut you don't actually know what the model is.\nYou don't know the other",
    "start": "1416043",
    "end": "1423363"
  },
  {
    "text": "parameters of the model.\nIt looks like this, but you don't know the width.\nYou don't know the height.",
    "start": "1423363",
    "end": "1428797"
  },
  {
    "text": "Why not?\nSo, the analysis knows what B and M are.\nWe are going to write some algorithms which look just like\nboring old algorithms that we've",
    "start": "1428797",
    "end": "1436338"
  },
  {
    "text": "seen throughout the lecture.\nThat's one of the nice things about this model.\nEvery algorithm we have seen is",
    "start": "1436338",
    "end": "1443052"
  },
  {
    "text": "a cache oblivious algorithm,\nall right, because we didn't even know the word cache in this\nclass until today.",
    "start": "1443052",
    "end": "1448631"
  },
  {
    "text": "So, we already have lots of\nalgorithms to choose from. The thing is,\nsome of them will perform well",
    "start": "1448631",
    "end": "1453684"
  },
  {
    "text": "in this model,\nand some of them won't. So, we would like to design\nalgorithms that just like our old algorithms that happened to\nperform well in this context,",
    "start": "1453684",
    "end": "1461736"
  },
  {
    "text": "no matter what B and M are.\nSo, another way this is the same algorithm should work well\nfor all values of B and M if you",
    "start": "1461736",
    "end": "1467894"
  },
  {
    "text": "have a good cache oblivious\nalgorithm. OK, there are a few\nconsequences to this assumption.",
    "start": "1467894",
    "end": "1473940"
  },
  {
    "text": "In a cache aware algorithm,\nyou can explicitly say, OK, I'm blocking my memory into\nchunks of size B.",
    "start": "1473940",
    "end": "1479590"
  },
  {
    "text": "Here they are.\nI was going to store these B elements here,\nthese B elements here, because you know B,\nyou can do that.",
    "start": "1479590",
    "end": "1486105"
  },
  {
    "text": "You can say,\nwell, OK, now I want to read these B items into my cache,\nand then write out these ones",
    "start": "1486105",
    "end": "1491697"
  },
  {
    "text": "over here.\nYou can explicitly maintain your cache.\nWith cache oblivious algorithms, you can't because\nyou don't know what it is.",
    "start": "1491697",
    "end": "1500000"
  },
  {
    "text": "So, it's got to be all\nimplicit. And this is pretty much how\ncaches work anyway except for",
    "start": "1500000",
    "end": "1511303"
  },
  {
    "text": "disk.\nSo, it's a pretty reasonable model.\nIn particular,",
    "start": "1511303",
    "end": "1518188"
  },
  {
    "text": "when you access an element\nthat's not in cache,",
    "start": "1518188",
    "end": "1524165"
  },
  {
    "text": "you automatically fetch the\nblock containing that element.",
    "start": "1524165",
    "end": "1533000"
  },
  {
    "text": "And you pay one memory transfer\nfor that if it wasn't already",
    "start": "1533000",
    "end": "1538096"
  },
  {
    "text": "there.\nAnother bit of a catch here is, what if your cache is full?\nThen you've got to kick some",
    "start": "1538096",
    "end": "1545911"
  },
  {
    "text": "block out of your cache.\nAnd then, so we need some model of which block gets kicked out\nbecause we can't control that.",
    "start": "1545911",
    "end": "1555679"
  },
  {
    "text": "We have no knowledge of what\nthe blocks are in our algorithm.",
    "start": "1555679",
    "end": "1560776"
  },
  {
    "text": "So what we're going to assume\nin this model is the ideal thing, that when you fetch a new\nblock, if your cache is full,",
    "start": "1560776",
    "end": "1570629"
  },
  {
    "text": "you evict a block that will be\nused farthest in the future.",
    "start": "1570629",
    "end": "1577000"
  },
  {
    "text": "Sorry, the furthest.\nFarthest is distance. Furthest is time.\nFurthest in the future.",
    "start": "1577000",
    "end": "1585526"
  },
  {
    "text": "OK, this would be the best\npossible thing to do.",
    "start": "1585526",
    "end": "1591000"
  },
  {
    "text": "It's a little bit hard to do in\npractice because you don't know the future generally,\nunless you're omniscient.",
    "start": "1591000",
    "end": "1598482"
  },
  {
    "text": "So, this is a bit of an\nidealized model. But it's pretty reasonable in\nthe sense that if you've read",
    "start": "1598482",
    "end": "1605203"
  },
  {
    "text": "the reading handout number 20,\nthis paper by Sleator and Tarjan, they introduce the idea\nof competitive algorithms.",
    "start": "1605203",
    "end": "1612962"
  },
  {
    "text": "So, we only talked about a\nsmall portion of that paper that moved to front heuristic for\nstoring a list.",
    "start": "1612963",
    "end": "1621000"
  },
  {
    "text": "But, it also proves that there\nare strategies, and maybe you heard this in\nrecitation.",
    "start": "1621000",
    "end": "1626068"
  },
  {
    "text": "Some people covered it;\nsome didn't, that these are called paging\nstrategies. So, you want to maintain some\ncache of pages or blocks,",
    "start": "1626068",
    "end": "1633885"
  },
  {
    "text": "and you pay whenever you have\nto access a block that's not in your cache.\nThe best thing to do is to",
    "start": "1633885",
    "end": "1639809"
  },
  {
    "text": "always kick out the block that\nwill be used farthest in the future because that way you'll\nuse all the blocks that are in",
    "start": "1639809",
    "end": "1647014"
  },
  {
    "text": "there.\nThis turns out to be the offline optimal strategy if you\nknew the future.",
    "start": "1647015",
    "end": "1653000"
  },
  {
    "text": "But, there are algorithms that\nare essentially constant competitive against this\nstrategy. I don't want to get into\ndetails because they're not",
    "start": "1653000",
    "end": "1660651"
  },
  {
    "text": "exactly constant competitive.\nBut they are sufficiently constant competitive for the\npurposes of this lecture that we",
    "start": "1660651",
    "end": "1666972"
  },
  {
    "text": "can assume this,\nnot have to worry about it. Most of the time,\nwe don't even really use this assumption.\nBut there it is.",
    "start": "1666972",
    "end": "1673403"
  },
  {
    "text": "That's the cache oblivious\nmodel. It makes things cleaner to\nthink about just anything that should be done,\nwill be done.",
    "start": "1673403",
    "end": "1681000"
  },
  {
    "text": "And you can simulate that with\nleast recently used or whatever good heuristic that you want to\nthat's competitive against the",
    "start": "1681000",
    "end": "1690319"
  },
  {
    "text": "optimal.\nOK, that's pretty much the cache oblivious algorithm.\nOnce you have the two level",
    "start": "1690319",
    "end": "1696965"
  },
  {
    "text": "model, you just assume you don't\nknow B and M. You have this automatic request\nin writing, and whatnot.",
    "start": "1696965",
    "end": "1704604"
  },
  {
    "text": "A little bit more to say,\nI guess, it may be obvious at this point, but I've been\ndrawing everything as tables.",
    "start": "1704604",
    "end": "1714000"
  },
  {
    "text": "So, it's not really clear what\nthe linear order is. Linear order is just the\nreading order.",
    "start": "1714000",
    "end": "1720827"
  },
  {
    "text": "So, although we don't\nexplicitly say it most of the time, a typical model is that\nmemory is a linear array.",
    "start": "1720827",
    "end": "1728896"
  },
  {
    "text": "Everything that you ever store\nin your program is written in this linear array.\nIf you've ever programmed in",
    "start": "1728896",
    "end": "1737043"
  },
  {
    "text": "Assembly or whatever,\nthat's the model. You have the address space,\nand any number between here and",
    "start": "1737043",
    "end": "1744988"
  },
  {
    "text": "here, that's where you can\nactually, this is physical memory.\nThis is all you can write to.",
    "start": "1744988",
    "end": "1751039"
  },
  {
    "text": "So, it starts at zero and goes\nout to, let's call it infinity over here.\nAnd, if you allocate some",
    "start": "1751039",
    "end": "1757571"
  },
  {
    "text": "array, maybe it occupies some\nspace in the middle. Who knows?\nOK, we usually don't think",
    "start": "1757571",
    "end": "1763416"
  },
  {
    "text": "about that much.\nWhat I care about now is that memory itself is blocked in this\nview.",
    "start": "1763416",
    "end": "1769055"
  },
  {
    "text": "So, however your stuff is\nstored in memory, it's blocked into clusters of\nlength B.",
    "start": "1769055",
    "end": "1776000"
  },
  {
    "text": "So, if this is,\nlet me call it one and be a little bit nicer.\nThis is B.",
    "start": "1776000",
    "end": "1781700"
  },
  {
    "text": "This is position B plus one.\nThis is 2B, and 2B plus one, and so on.\nThese are the indexes into",
    "start": "1781700",
    "end": "1789301"
  },
  {
    "text": "memory.\nThis is how the blocking happens.\nIf you access something here,",
    "start": "1789301",
    "end": "1794920"
  },
  {
    "text": "you get that chunk from U,\nround it down to the previous multiple of B,\nround it up to the next",
    "start": "1794920",
    "end": "1802521"
  },
  {
    "text": "multiple of B.\nThat's what you always get. OK, so if you think about some\narray that's maybe allocated",
    "start": "1802521",
    "end": "1811226"
  },
  {
    "text": "here, OK, you have to keep in\nmind that that array may not be perfectly aligned with the\nblocks.",
    "start": "1811226",
    "end": "1818038"
  },
  {
    "text": "But more or less it will be so\nwe don't care too much. But that's a bit of a subtlety\nthere.",
    "start": "1818038",
    "end": "1824557"
  },
  {
    "text": "OK, so that's pretty much the\nmodel. So every algorithm we've seen,\nexcept B trees,",
    "start": "1824557",
    "end": "1832029"
  },
  {
    "text": "is a cache oblivious algorithm.\nAnd our question is, now, we know how everything\nruns in terms of running time.",
    "start": "1832029",
    "end": "1841701"
  },
  {
    "text": "Now we want to measure the\nnumber of memory transfers, MT of N.\nI want to mention one other",
    "start": "1841701",
    "end": "1849582"
  },
  {
    "text": "fact or theorem.\nI'll put it in brackets because I don't want to state it\nprecisely.",
    "start": "1849582",
    "end": "1858000"
  },
  {
    "text": "But if you have an algorithm\nthat is efficient on two levels,",
    "start": "1858000",
    "end": "1864000"
  },
  {
    "text": "so in other words,\nwhat we're looking at, if we just think about the two\nlevel world and your algorithm",
    "start": "1864000",
    "end": "1874000"
  },
  {
    "text": "is cache oblivious,\nthen it is efficient on any number of levels in your memory\nhierarchy, say,",
    "start": "1874000",
    "end": "1883200"
  },
  {
    "text": "L levels.\nSo, I don't want to define what efficient means.\nBut the intuition is,",
    "start": "1883200",
    "end": "1891164"
  },
  {
    "text": "if your machine really looks\nlike this and you have a cache oblivious algorithm,\nyou can apply the cache",
    "start": "1891164",
    "end": "1896765"
  },
  {
    "text": "oblivious analysis for all B and\nM. So you can analyze the number\nof memory transfers here, here, here, here,\nand here.",
    "start": "1896765",
    "end": "1903087"
  },
  {
    "text": "And if you have a good cache\noblivious algorithm, the performances at all those\nlevels has to be good.",
    "start": "1903087",
    "end": "1908577"
  },
  {
    "text": "And therefore,\nthe whole performance is good. Good here means asymptotically\noptimal up to constant factors,",
    "start": "1908577",
    "end": "1914400"
  },
  {
    "text": "something like that.\nOK, so I don't want to prove that, and you can read the cache\noblivious papers.",
    "start": "1914400",
    "end": "1921000"
  },
  {
    "text": "That's a nice fact about cache\noblivious algorithms. If you have a cache aware\nalgorithm that tunes to a",
    "start": "1921000",
    "end": "1928730"
  },
  {
    "text": "particular value of B,\nand a particular value of M, you're not going to have that\nproblem.",
    "start": "1928730",
    "end": "1935390"
  },
  {
    "text": "So, this is one nice feature of\ncache obliviousness. Another nice feature is when\nyou are coding the algorithm,",
    "start": "1935390",
    "end": "1943656"
  },
  {
    "text": "you don't have to put in B and\nM. So, that simplifies things a\nbit. So, let's do some algorithms.\nEnough about models.",
    "start": "1943656",
    "end": "1954222"
  },
  {
    "text": "OK, we're going to start out\nwith some really simple things",
    "start": "1954222",
    "end": "1960666"
  },
  {
    "text": "just to get warmed up on the\nanalysis side. The most basic thing you can do\nthat's good in a cache oblivious",
    "start": "1960666",
    "end": "1972333"
  },
  {
    "text": "world is scanning.\nSo, scanning is just visiting",
    "start": "1972333",
    "end": "1977555"
  },
  {
    "text": "the items in an array in order.\nSo, visit A_1 up to A_N in",
    "start": "1977555",
    "end": "1983890"
  },
  {
    "text": "order.\nFor some notion of visit, this is presumably some\nconstant time operation.",
    "start": "1983890",
    "end": "1989563"
  },
  {
    "text": "For example,\nsuppose you want to compute the aggregate of the array.\nYou want to sum all the",
    "start": "1989563",
    "end": "1996035"
  },
  {
    "text": "elements in the array.\nSo, you have one extra variable using, but you can store that in\na register or whatever,",
    "start": "1996036",
    "end": "2003890"
  },
  {
    "text": "so that's one simple example.\nSum the array. OK, so here's the picture.\nWe have our memory.",
    "start": "2003890",
    "end": "2011686"
  },
  {
    "text": "Each of these cells represents\none item, one element, log N bits, one word,\nwhatever.",
    "start": "2011687",
    "end": "2018971"
  },
  {
    "text": "Our array is somewhere in here.\nMaybe it's there. And we go from here to here to\nhere to here.",
    "start": "2018971",
    "end": "2027054"
  },
  {
    "text": "OK, and so on.\nSo, what does this cost? What is the number of memory\ntransfers?",
    "start": "2027054",
    "end": "2033804"
  },
  {
    "text": "We know that this is a linear\ntime algorithm. It takes order N time.\nWhat does it cost in terms of",
    "start": "2033805",
    "end": "2043656"
  },
  {
    "text": "memory transfers?\nN over B, pretty much. We like to say it's order N\nover B plus two or one in the",
    "start": "2043656",
    "end": "2052357"
  },
  {
    "text": "big O.\nThis is a bit of worry. I mean, N could be smaller than\nB.",
    "start": "2052358",
    "end": "2058037"
  },
  {
    "text": "We really want to think about\nall the cases, especially because usually\nyou're not doing this on",
    "start": "2058038",
    "end": "2066556"
  },
  {
    "text": "something of size N.\nYou're doing it on something of size k, where we don't really\nknow much about k.",
    "start": "2066557",
    "end": "2077000"
  },
  {
    "text": "But in general,\nit's N over B plus one because we always need at least one\nmemory transfer to look at",
    "start": "2077000",
    "end": "2083719"
  },
  {
    "text": "something, unless N is zero.\nAnd in particular, it's plus two if you care about\nthe constants.",
    "start": "2083719",
    "end": "2089960"
  },
  {
    "text": "If I don't write the big O,\nthen it would be plus two at most because you could\nessentially waste the first",
    "start": "2089960",
    "end": "2097091"
  },
  {
    "text": "block and that everything is\nfine for awhile. And then, if you're unlucky,\nyou essentially waste the last",
    "start": "2097091",
    "end": "2105517"
  },
  {
    "text": "blocked.\nThere is just one element in that block, and you're not\ngetting much out of it.",
    "start": "2105517",
    "end": "2112138"
  },
  {
    "text": "Everything in the middle,\nthough, every block between the first and last block has to be\nfull.",
    "start": "2112138",
    "end": "2119227"
  },
  {
    "text": "So, you're using all of those\nelements. So out of the N elements,\nyou only have N over B blocks",
    "start": "2119227",
    "end": "2126393"
  },
  {
    "text": "because the block has B\nelements. OK, that's pretty trivial.\nLet me do something slightly",
    "start": "2126393",
    "end": "2133092"
  },
  {
    "text": "more interesting,\nwhich is two scans at once. OK, here we are not assuming\nanything about M.",
    "start": "2133092",
    "end": "2141398"
  },
  {
    "text": "we're not assuming anything\nabout the size of the cache, just that I can hold a single\nblock.",
    "start": "2141398",
    "end": "2148196"
  },
  {
    "text": "The last block that we visited\nhas to be there. OK, you can also do a constant\nnumber of parallel scans.",
    "start": "2148196",
    "end": "2155824"
  },
  {
    "text": "This is not really parallel in\nthe sense of multithreaded, bit simulated parallelism.\nI mean, if you have a constant",
    "start": "2155824",
    "end": "2166191"
  },
  {
    "text": "number, do one,\ndo the other, do the other,\ncome back, come back,",
    "start": "2166191",
    "end": "2172786"
  },
  {
    "text": "come back, all right,\nvisit them in turn round robin,",
    "start": "2172787",
    "end": "2178319"
  },
  {
    "text": "whatever.\nFor example, here's a cute piece of code.\nIf you want to reverse an",
    "start": "2178319",
    "end": "2186191"
  },
  {
    "text": "array, OK, then you can do it.\nThis is a good puzzle.",
    "start": "2186191",
    "end": "2193000"
  },
  {
    "text": "You can do it by essentially\ntwo scans where you repeatedly",
    "start": "2193000",
    "end": "2198901"
  },
  {
    "text": "swapped the first and last\nelement. So I was swapping A_i with N\nminus i plus one,",
    "start": "2198901",
    "end": "2206940"
  },
  {
    "text": "and just restart at one.\nSo, here's your array. Suppose this is actually my\narray.",
    "start": "2206940",
    "end": "2214978"
  },
  {
    "text": "I swap these two guys,\nand I saw these two guys, and so on.\nThat will reverse my array,",
    "start": "2214978",
    "end": "2224131"
  },
  {
    "text": "and this should work hopefully\nthe middle as well if it's odd. It should not do anything.\nAnd you can view this as two",
    "start": "2224131",
    "end": "2233210"
  },
  {
    "text": "scans.\nThere is one scan that's coming in this way.\nThere's also a reverse scan,",
    "start": "2233210",
    "end": "2239289"
  },
  {
    "text": "ooh, some more sophisticated,\ncoming back this way. Of course, reverse scan has the\nsame analysis.",
    "start": "2239289",
    "end": "2246789"
  },
  {
    "text": "And as long as your cache is\nbig enough to store at least two blocks, which is a pretty\nreasonable assumption,",
    "start": "2246789",
    "end": "2255235"
  },
  {
    "text": "so let's write it.\nAssuming the number of blocks",
    "start": "2255236",
    "end": "2260817"
  },
  {
    "text": "in the cache,\nwhich is M over B, is at least two in this\nalgorithm, the number of memory",
    "start": "2260817",
    "end": "2269076"
  },
  {
    "text": "transfers is still order N over\nB plus one. OK, the constant goes up maybe,\nbut in this case it probably",
    "start": "2269076",
    "end": "2278890"
  },
  {
    "text": "doesn't.\nBut who cares. OK, as long as you're doing a\nconstant number of scans,",
    "start": "2278890",
    "end": "2286764"
  },
  {
    "text": "and some constant number of\narrays, it happens to be one of",
    "start": "2286764",
    "end": "2291881"
  },
  {
    "text": "them's reversed,\nwhatever, it will take, we call this linear time.\nIt's linear in the number of",
    "start": "2291882",
    "end": "2300000"
  },
  {
    "text": "blocks in your input.\nOK, great. So now you can reverse an\narray: exciting.",
    "start": "2300000",
    "end": "2306352"
  },
  {
    "text": "Let's try another simple\nalgorithm on another board.",
    "start": "2306352",
    "end": "2312000"
  },
  {
    "text": "Let's try binary search.\nSo just like last week, we're going back to our basics\nhere.",
    "start": "2327000",
    "end": "2333406"
  },
  {
    "text": "Scanning we didn't even talk\nabout in this class. Binary search is something we\ntalked about a little bit.",
    "start": "2333406",
    "end": "2342000"
  },
  {
    "text": "It was a simple divide and\nconquer algorithm. I hope you all remember it.\nAnd if we look at an array,",
    "start": "2342000",
    "end": "2348173"
  },
  {
    "text": "and I'm not going to draw the\ncells here because I want to imagine a really big array,\nbinary search,",
    "start": "2348173",
    "end": "2354346"
  },
  {
    "text": "but suppose it always goes to\nleft. It starts by visiting this\nelement in the middle.",
    "start": "2354346",
    "end": "2359511"
  },
  {
    "text": "Then ago so the quarter marked.\nThen it goes to the one eighth mark.\nOK, this is one hypothetical",
    "start": "2359511",
    "end": "2365433"
  },
  {
    "text": "execution of a binary search.\nOK, and eventually it finds the element it's looking for.\nIt finds where it fits at",
    "start": "2365433",
    "end": "2372361"
  },
  {
    "text": "least.\nSo x is over here. So, we know that it takes log N\ntime.",
    "start": "2372362",
    "end": "2378519"
  },
  {
    "text": "How many memory transfers of\nthe take? Now, I blocked this array into\nchunks of size B,",
    "start": "2378519",
    "end": "2385550"
  },
  {
    "text": "blocks of size B.\nHow many blocks do I touch? This one's a little bit more\nsubtle.",
    "start": "2385550",
    "end": "2393000"
  },
  {
    "text": "It depends on the relative\nsizes of N and B, yeah.\nLog base B of N would be a good",
    "start": "2418000",
    "end": "2423830"
  },
  {
    "text": "guess.\nWe would like it to be, let's say, hope,\nis that it's log base B of N",
    "start": "2423830",
    "end": "2429217"
  },
  {
    "text": "because we know that B trees can\nsearch in what's essentially a sorted list of N items in log\nbase B of N time.",
    "start": "2429217",
    "end": "2438000"
  },
  {
    "text": "That turns out to be optimal in\nthe cache oblivious model or in the two level model you've got\nto pay log base B of N.",
    "start": "2438000",
    "end": "2446905"
  },
  {
    "text": "I won't prove that here.\nThe same reason you need log N comparisons to do a binary\nsearch in the normal model.",
    "start": "2446905",
    "end": "2455191"
  },
  {
    "text": "Alas, it is possible to get log\nbase B of N even without knowing B.\nBut, binary search does not do",
    "start": "2455191",
    "end": "2466079"
  },
  {
    "text": "it.\nLog of N over B, yes.\nSo the number of memory",
    "start": "2466079",
    "end": "2473867"
  },
  {
    "text": "transfers on N items is log of N\nover B also known as,",
    "start": "2473867",
    "end": "2482841"
  },
  {
    "text": "let's say, plus one,\nalso known as log N minus log",
    "start": "2482841",
    "end": "2491137"
  },
  {
    "text": "B.\nOK, whereas log base B of N is log N divided by log B,\nOK, clearly this is much better",
    "start": "2491137",
    "end": "2499461"
  },
  {
    "text": "than subtracting.\nSo, this would be good, but this is bad.\nMost of the time,",
    "start": "2499461",
    "end": "2505076"
  },
  {
    "text": "this is log N,\nwhich is no better, I mean, you're not using blocks\nat all essentially.",
    "start": "2505076",
    "end": "2511461"
  },
  {
    "text": "The idea is,\nout here, I mean, there's some little,\ntiny block that contains this",
    "start": "2511461",
    "end": "2517461"
  },
  {
    "text": "thing.\nI mean, tiny depends on how big B is.\nBut, each of these items will",
    "start": "2517461",
    "end": "2523590"
  },
  {
    "text": "be in a different block until\nyou get essentially within one block worth of x.\nWhen you get within one block",
    "start": "2523591",
    "end": "2529351"
  },
  {
    "text": "worth of x, there's only like a\nconstant number of blocks that matter, and so all of these\naccesses are indeed within the",
    "start": "2529352",
    "end": "2535826"
  },
  {
    "text": "same block.\nBut, how many are there? Well, just log B because you're\nonly spending log B within a,",
    "start": "2535826",
    "end": "2541038"
  },
  {
    "text": "if you're within an interval of\nsize k, you're only going to spend log k steps in it.\nSo, you're saving log B in",
    "start": "2541038",
    "end": "2547018"
  },
  {
    "text": "here, but overall you're paying\nlog N, so you only get log N minus log B plus some constant.\nOK, so this is bad news for",
    "start": "2547019",
    "end": "2554640"
  },
  {
    "text": "binary search.\nSo, not all of the algorithms we've seen are going to work\nwell in this model.",
    "start": "2554640",
    "end": "2560107"
  },
  {
    "text": "We need a lot more thinking\nbefore we can solve what is essentially the binary search\nproblem, finding an element in a",
    "start": "2560107",
    "end": "2567093"
  },
  {
    "text": "sorted list, in log base B of N\nwithout knowing B. OK, we know we could use B\ntrees. If you knew B,\ngreat, that works,",
    "start": "2567093",
    "end": "2573957"
  },
  {
    "text": "and that's optimal.\nBut without knowing B, it's a little bit harder.\nAnd this gets us into the world",
    "start": "2573957",
    "end": "2582252"
  },
  {
    "text": "of divide and conquer.\nAlso like last week, and like the first few weeks of\nthis class, divide and conquer",
    "start": "2582252",
    "end": "2593058"
  },
  {
    "text": "is your friend.\nAnd, it turns out divide and conquer is not the only tool,\nbut it's a really useful tool",
    "start": "2593059",
    "end": "2603655"
  },
  {
    "text": "in designing cache oblivious\nalgorithms. And, let me say why.",
    "start": "2603655",
    "end": "2611000"
  },
  {
    "text": "So, we'll see a bunch of divide\nand conquer based algorithms, cache oblivious.\nAnd, the intuition is that we",
    "start": "2623000",
    "end": "2630762"
  },
  {
    "text": "can take all the favorite\nalgorithms we have, obviously it doesn't always\nwork.",
    "start": "2630762",
    "end": "2636380"
  },
  {
    "text": "Binary search was a divide and\nconquer algorithm. It's not so great.\nBut, in general,",
    "start": "2636381",
    "end": "2643053"
  },
  {
    "text": "the idea is that your algorithm\ncan just do the normal divide and conquer thing,\nright?",
    "start": "2643053",
    "end": "2648586"
  },
  {
    "text": "You divide your problem into\nsubproblems of smaller size repeatedly, all the way down to\nproblems of constant size,",
    "start": "2648586",
    "end": "2655963"
  },
  {
    "text": "OK, just like before.\nBut, if you're recursively dividing your problem into\nsmaller things,",
    "start": "2655964",
    "end": "2661760"
  },
  {
    "text": "at some point you can think\nabout it and say, well, wait, I mean,\nthe algorithm divides all the",
    "start": "2661760",
    "end": "2667820"
  },
  {
    "text": "way, but we can think about the\npoint at which the problem fits in a block or fits in cache.\nOK, and that's the analysis.",
    "start": "2667820",
    "end": "2676866"
  },
  {
    "text": "OK, we'll think about the time\nwhen your problem is small enough that we can analyze it in\nsome other way.",
    "start": "2676866",
    "end": "2683733"
  },
  {
    "text": "So, usually,\nwe analyze it recursively. We get a recurrence.\nWhat we're changing,",
    "start": "2683733",
    "end": "2688933"
  },
  {
    "text": "essentially,\nis the base case. So, in the base case,\nwe don't want to go down to a",
    "start": "2688933",
    "end": "2694199"
  },
  {
    "text": "constant size.\nThat's too far. I'll show you some examples.\nWe want to consider the point",
    "start": "2694199",
    "end": "2702738"
  },
  {
    "text": "in recursion at which either the\nproblem fits in cache,",
    "start": "2702738",
    "end": "2709699"
  },
  {
    "text": "so it has size less than or\nequal to M, or it fits in order",
    "start": "2709699",
    "end": "2717175"
  },
  {
    "text": "one blocks.\nThat's another natural time to",
    "start": "2717175",
    "end": "2722460"
  },
  {
    "text": "do it.\nOrder one blocks would be even better than fitting in cache.\nSo, this means a size order B.",
    "start": "2722460",
    "end": "2735466"
  },
  {
    "text": "OK, this will change the base\ncase of the recurrence,",
    "start": "2735466",
    "end": "2741474"
  },
  {
    "text": "and it will turn out to give us\ngood answers instead of bad",
    "start": "2741474",
    "end": "2748175"
  },
  {
    "text": "ones.\nSo, let's do a simple example. Our good friend order\nstatistics, in particular,",
    "start": "2748175",
    "end": "2757649"
  },
  {
    "text": "for finding medians.\nSo, I hope you all know this by",
    "start": "2757649",
    "end": "2764252"
  },
  {
    "text": "heart.\nRemember the worst case linear time, median finding algorithm\nby Bloom et al.",
    "start": "2764252",
    "end": "2772750"
  },
  {
    "text": "I'll write this fast.\nWe partition our array. It turns out,\nthis is a good algorithm as it",
    "start": "2772750",
    "end": "2781878"
  },
  {
    "text": "is.\nWe partition our array conceptually into N over five,\nfive tuples into little groups",
    "start": "2781878",
    "end": "2790796"
  },
  {
    "text": "of five.\nThis may not have been exactly",
    "start": "2790796",
    "end": "2796026"
  },
  {
    "text": "how I wrote it last time.\nI didn't check. But, it's the same algorithm.\nYou compute the median of each",
    "start": "2796027",
    "end": "2806018"
  },
  {
    "text": "five tuple.\nThen you recursively compute the median of the medians of\nthese medians.",
    "start": "2806018",
    "end": "2815000"
  },
  {
    "text": "Then, you partition around x.\nSo, that gave us some element that was roughly in the middle.\nIt was within the middle half,",
    "start": "2831000",
    "end": "2840562"
  },
  {
    "text": "I think.\nPartition around x, and then we show that you could\nalways recurse on just one of",
    "start": "2840562",
    "end": "2847553"
  },
  {
    "text": "the sides.",
    "start": "2847553",
    "end": "2849000"
  },
  {
    "text": "OK, this was our good old\nfriend for computing, order statistics,\nor medians, or whatnot.",
    "start": "2858000",
    "end": "2863733"
  },
  {
    "text": "OK, so how much time does this,\nwell, we know how much time this takes.\nIt should be linear time.",
    "start": "2863733",
    "end": "2870000"
  },
  {
    "text": "But how many memory transfers\ndoes this take? Well, conceptually partitioning\nthat, I can do,",
    "start": "2870000",
    "end": "2876000"
  },
  {
    "text": "in zero.\nMaybe I have to compute N over five, no big deal here.\nWe're not thinking about",
    "start": "2876000",
    "end": "2882582"
  },
  {
    "text": "computation.\nI have to find the median of each tuple.\nSo, here it matters how my",
    "start": "2882582",
    "end": "2887661"
  },
  {
    "text": "array is laid out.\nBut, what I'm going to do is take my array,\ntake the first five elements,",
    "start": "2887661",
    "end": "2893531"
  },
  {
    "text": "and then the next five elements\nand so on. Those will be my five tuples.\nSo, I can implement this just",
    "start": "2893531",
    "end": "2900061"
  },
  {
    "text": "by scanning, and then computing\nthe median on those five elements, which I stored in the\nfive registers on my CPU.",
    "start": "2900061",
    "end": "2907382"
  },
  {
    "text": "I'll assume that there are\nenough registers for that. And, I compute the median,\nwrite it out to some array out",
    "start": "2907382",
    "end": "2915989"
  },
  {
    "text": "here.\nSo, it's going to be one element.\nSo, the median of here goes into there.\nThe median of these guys goes",
    "start": "2915989",
    "end": "2923398"
  },
  {
    "text": "into there, and so on.\nSo, I'm scanning in here, and in parallel,\nI'm scanning an output in here.",
    "start": "2923398",
    "end": "2930094"
  },
  {
    "text": "So, it's two parallel scans.\nSo, that takes linear time. So, this takes order N over B\nplus one memory transfers.",
    "start": "2930094",
    "end": "2939000"
  },
  {
    "text": "OK, then we have recursively\ncompute the median of the medians.\nThis step used to be T of N",
    "start": "2939000",
    "end": "2946284"
  },
  {
    "text": "over five.\nNow it's MT of N over five, OK, with the same values of B\nand M.",
    "start": "2946284",
    "end": "2952243"
  },
  {
    "text": "Then we partition around x.\nPartitioning is also like three parallel scans if you work it\nout.",
    "start": "2952243",
    "end": "2959776"
  },
  {
    "text": "So, this is also going to take\nlinear memory transfers, N over B plus one.\nAnd then, we recurse on one of",
    "start": "2959776",
    "end": "2968219"
  },
  {
    "text": "the sides, and this is the fun\npart of the analysis which I won't repeat here.\nBut, we get MT of,",
    "start": "2968219",
    "end": "2977565"
  },
  {
    "text": "like, three quarters N.\nI think originally it was seven tenths, so we simplified to\nthree quarters,",
    "start": "2977565",
    "end": "2985913"
  },
  {
    "text": "which is hopefully bigger than\nseven tenths. Yeah, it is.\nOK, so this is the new",
    "start": "2985913",
    "end": "2992608"
  },
  {
    "text": "analysis.\nNow we get a recurrence. So, let's do that.",
    "start": "2992608",
    "end": "2998000"
  },
  {
    "text": "So, the analysis is we get this\nMT of N is MT of N over five",
    "start": "3016000",
    "end": "3022686"
  },
  {
    "text": "plus MT of three quarters N\nplus, this is just as before.",
    "start": "3022686",
    "end": "3029033"
  },
  {
    "text": "Before we had linear work here.\nAnd now, we have what we call",
    "start": "3029033",
    "end": "3035247"
  },
  {
    "text": "linear number of memory\ntransfers, linear number of blocks.\nOK, I'll sort of ignore this",
    "start": "3035247",
    "end": "3041835"
  },
  {
    "text": "plus one.\nIt's not too critical. So, this is our recurrence.\nNow, it depends what our base",
    "start": "3041835",
    "end": "3048577"
  },
  {
    "text": "case is.\nAnd, usually we would use a base case of constant size.\nSo, let's see what happens if",
    "start": "3048577",
    "end": "3055630"
  },
  {
    "text": "we use a base case of constant\nsize just so that it's clear why this base case is so important.\nOK, this describes a recurrence",
    "start": "3055630",
    "end": "3065718"
  },
  {
    "text": "as one of these hairy\nrecurrences. And, I don't want to use\nsubstitution. I just want the intuition of\nwhy this is going to solve to",
    "start": "3065718",
    "end": "3072759"
  },
  {
    "text": "something rather big.\nOK, and for me, the best intuition always comes\nfrom recursion trees. If you don't know the solution\nto recurrence and you need a",
    "start": "3072759",
    "end": "3080854"
  },
  {
    "text": "good guess, use recursion trees.\nAnd today, I will only give you good guesses.\nI don't want to prove anything",
    "start": "3080854",
    "end": "3086731"
  },
  {
    "text": "with substitution because I want\nto get to the bigger ideas. So, this is even messy from a\nrecursion tree point of view",
    "start": "3086731",
    "end": "3094800"
  },
  {
    "text": "because you have these\nunbalanced sizes where you start at the root with some of size N\nover B.",
    "start": "3094800",
    "end": "3100932"
  },
  {
    "text": "Then you split it into\nsomething size one fifth N over B, and something of size three\nquarters N over B,",
    "start": "3100933",
    "end": "3107666"
  },
  {
    "text": "which is annoying because now\nthis subtree will be a lot bigger than this one,\nor this one will terminate",
    "start": "3107666",
    "end": "3114466"
  },
  {
    "text": "faster.\nSo, it's pretty unbalanced. But, summing per level doesn't\nreally tell you a lot at this",
    "start": "3114466",
    "end": "3120666"
  },
  {
    "text": "point.\nBut let's just look at the bottom level.\nLook at all the leaves in this",
    "start": "3120666",
    "end": "3127161"
  },
  {
    "text": "recursion tree.\nSo, that's the base cases. How many base cases are there?\nThis is an interesting",
    "start": "3127161",
    "end": "3133861"
  },
  {
    "text": "question.\nWe've never thought about it in the context of this recurrence.\nIt gives a somewhat surprising",
    "start": "3133861",
    "end": "3141138"
  },
  {
    "text": "answer.\nIt was surprising to me the first time I worked it out.\nSo, how many leaves does this",
    "start": "3141138",
    "end": "3147621"
  },
  {
    "text": "recursion tree have?\nWell, we can write a recurrence.\nThe number of leaves in a",
    "start": "3147622",
    "end": "3155978"
  },
  {
    "text": "problem of size N,\nit's going to be the number of",
    "start": "3155978",
    "end": "3161103"
  },
  {
    "text": "leaves in this problem plus the\nnumber of leaves in this problem",
    "start": "3161103",
    "end": "3167829"
  },
  {
    "text": "plus zero.\nSo, that's another recurrence. We'll call this L of N.\nOK, now the base case is really",
    "start": "3167829",
    "end": "3177864"
  },
  {
    "text": "relevant.\nIt determines the solution to this recurrence.\nAnd let's, again,",
    "start": "3177864",
    "end": "3184625"
  },
  {
    "text": "assume that in a problem of\nsize one, we have one leaf. That's our only base case.\nWell, it turns out,",
    "start": "3184625",
    "end": "3192010"
  },
  {
    "text": "and here you need to guess,\nI think. This is not particularly\nobvious. Any of the TA's have guesses of\nthe form of this solution?",
    "start": "3192010",
    "end": "3201260"
  },
  {
    "text": "Or anybody, not just TA's.\nBut this is open to everyone. If Charles were here,\nI would ask him.",
    "start": "3201260",
    "end": "3208122"
  },
  {
    "text": "I had to think for a while,\nand it's not linear, right, because you're somehow\ndecreasing quite a bit.",
    "start": "3208122",
    "end": "3217000"
  },
  {
    "text": "So, it's smaller than linear,\nbut it's more than a constant.",
    "start": "3217000",
    "end": "3222121"
  },
  {
    "text": "OK, it's actually more than\npolylog, so what's your favorite",
    "start": "3222121",
    "end": "3227243"
  },
  {
    "text": "function in the middle?\nN over log N, that's still too big.\nKeep going.",
    "start": "3227243",
    "end": "3233145"
  },
  {
    "text": "You have an oracle here,\nso you can, N to the k, yeah, close.\nI mean, k is usually an",
    "start": "3233145",
    "end": "3240263"
  },
  {
    "text": "integer.\nN to the alpha for some real number between zero and one.\nYeah, that's what you meant.",
    "start": "3240263",
    "end": "3249035"
  },
  {
    "text": "Sorry.\nIt's like the shortest mathematical joke.\nLet epsilon be less than zero",
    "start": "3249035",
    "end": "3255317"
  },
  {
    "text": "or for a sufficiently large\nepsilon. I don't know.\nSo, you've got to use the right",
    "start": "3255317",
    "end": "3261934"
  },
  {
    "text": "letters.\nSo, let's suppose that it's N to the alpha.\nThen we would get this N over",
    "start": "3261934",
    "end": "3268550"
  },
  {
    "text": "five to the alpha,\nand we'd get three quarters N to the alpha.\nWhen you have a nice recurrence",
    "start": "3268550",
    "end": "3276908"
  },
  {
    "text": "like this, you can just try\nplugging in a guess and see whether it works,\nOK, and of course this will",
    "start": "3276908",
    "end": "3282942"
  },
  {
    "text": "work only depending on alpha.\nSo, we should get an equation on alpha here.\nSo, everything has an N to the",
    "start": "3282942",
    "end": "3289222"
  },
  {
    "text": "alpha, in fact,\nall of these terms. So, I can divide through my N\nto the alpha. That's assuming that it's not\nzero or something.",
    "start": "3289222",
    "end": "3296796"
  },
  {
    "text": "That seems reasonable.\nSo, we have one equals one fifth to the alpha plus three\nquarters to the alpha.",
    "start": "3296796",
    "end": "3304000"
  },
  {
    "text": "This is something you won't get\non a final because I don't know",
    "start": "3304000",
    "end": "3310158"
  },
  {
    "text": "any good way to solve this\nexcept with like Maple or",
    "start": "3310158",
    "end": "3315224"
  },
  {
    "text": "Mathematica.\nIf you're smart I'm sure you could compute it in a nicer way,\nbut alpha is about 0.8,",
    "start": "3315225",
    "end": "3324662"
  },
  {
    "text": "it turns out.\nSo, the number of leaves is this sort of in between constant\nand linear.",
    "start": "3324662",
    "end": "3334000"
  },
  {
    "text": "Usually polynomial means you\nhave an integer power. Let's call it a polynomial.\nWhy not?",
    "start": "3334000",
    "end": "3340455"
  },
  {
    "text": "There's a lot of leaves,\nis the point, and if we say that each leaf\ncosts a constant number of",
    "start": "3340455",
    "end": "3347367"
  },
  {
    "text": "memory transfers,\nwe're in trouble because then the number of memory transfers\nhas to be at least this.",
    "start": "3347367",
    "end": "3354962"
  },
  {
    "text": "If it's at least that,\nthat's potentially bigger than N over B, I mean,\nbigger than in an asymptotic",
    "start": "3354962",
    "end": "3362328"
  },
  {
    "text": "sense.\nThis is little omega of N over B if B is big.\nIf B is at least N to the 0.2",
    "start": "3362329",
    "end": "3370768"
  },
  {
    "text": "something, OK,\nor one seventh something. But if, in particular,\nB is at least N to the 0.2,",
    "start": "3370768",
    "end": "3378927"
  },
  {
    "text": "then this should be bigger than\nthat. So, this is a bad analysis\nbecause we're not going to get",
    "start": "3378927",
    "end": "3387455"
  },
  {
    "text": "the answer we want,\nwhich is N over B. The best you can do for median\nis N over B because you have to",
    "start": "3387456",
    "end": "3395702"
  },
  {
    "text": "read all the element,\nand you should spend linear time.\nSo, we want to get N over B. This algorithm is N over B plus\none.",
    "start": "3395702",
    "end": "3402744"
  },
  {
    "text": "So, this is why you need a good\nbase case, all right? So that makes the point.\nSo, the question is,",
    "start": "3402744",
    "end": "3408570"
  },
  {
    "text": "what base case should I use?",
    "start": "3408571",
    "end": "3411000"
  },
  {
    "text": "So, we have this recurrence",
    "start": "3424000",
    "end": "3426000"
  },
  {
    "text": "What base case should I use?\nConstant was too small. We have a couple of choices\nlisted up here.",
    "start": "3441000",
    "end": "3450000"
  },
  {
    "text": "Any suggestions?\nB, OK, MT of B is?",
    "start": "3466000",
    "end": "3475519"
  },
  {
    "text": "The hard part.\nSo, if my problem,",
    "start": "3475519",
    "end": "3481628"
  },
  {
    "text": "if the size of my array fits in\na block and I do all this stuff",
    "start": "3481628",
    "end": "3487235"
  },
  {
    "text": "on it, how many memory transfers\ncould that take? One, or a constant,\ndepending on alignment.",
    "start": "3487236",
    "end": "3495376"
  },
  {
    "text": "OK, maybe it takes two memory\ntransfers, but constant. Good.\nThat's clearly a lot better",
    "start": "3495376",
    "end": "3503065"
  },
  {
    "text": "than this base case,\nMT of one equals order one, clearly stronger.\nSo, hopefully,",
    "start": "3503065",
    "end": "3510119"
  },
  {
    "text": "it gives the right answer,\nand now indeed it does.",
    "start": "3510120",
    "end": "3516000"
  },
  {
    "text": "I love this analysis.\nSo, I'm going to wave my hands. OK, but in particular,\nwhat this gives us,",
    "start": "3516000",
    "end": "3523127"
  },
  {
    "text": "if we do the previous analysis,\nwhat is the number of leaves? So, in the leaves,\nnow L of B equals one instead",
    "start": "3523127",
    "end": "3531328"
  },
  {
    "text": "of L of one equals one.\nSo, this stops earlier. When does it stop?\nWell, instead of getting N to",
    "start": "3531328",
    "end": "3539110"
  },
  {
    "text": "the order of 0.8,\nwhatever, we get N over B to the power of 0.8 whatever.\nOK, so it turns out the number",
    "start": "3539110",
    "end": "3546459"
  },
  {
    "text": "of leaves is N over B to the\nalpha, which is little o of N over B.\nSo, we don't care.",
    "start": "3546459",
    "end": "3552426"
  },
  {
    "text": "It's tiny.\nAnd, if you look at the root cost is N over B in the\nrecursion tree,",
    "start": "3552426",
    "end": "3557955"
  },
  {
    "text": "the leaf cost is little o of N\nover B, and if you wave your hands, and close your eyes,\nand squint, the cost should be",
    "start": "3557956",
    "end": "3566324"
  },
  {
    "text": "geometrically decreasing as we\ngo down, I hope, more or less.\nIt's a bit messy because of all",
    "start": "3566324",
    "end": "3574808"
  },
  {
    "text": "the things terminating,\nbut let's say cost is roughly geometric.\nDon't do this in the final,",
    "start": "3574809",
    "end": "3582875"
  },
  {
    "text": "but you won't have any messy\nrecurrences like this. So, don't worry.\nDown the tree,",
    "start": "3582875",
    "end": "3590125"
  },
  {
    "text": "so you'd have to prove this\nformally, but I claim that the",
    "start": "3590125",
    "end": "3595290"
  },
  {
    "text": "root cost dominates.\nAnd, the root cost is N over B.",
    "start": "3595290",
    "end": "3601000"
  },
  {
    "text": "So, we get N over B.\nOK, so this is a nice, linear time algorithm for order\nstatistics for cache oblivious.",
    "start": "3613000",
    "end": "3621892"
  },
  {
    "text": "Great.\nThis may turn you off a little bit, but even though this is\nlike the simplest algorithm,",
    "start": "3621892",
    "end": "3629758"
  },
  {
    "text": "it's also probably the most\ncomplicated analysis that we will do.\nIn the future,",
    "start": "3629758",
    "end": "3636846"
  },
  {
    "text": "our algorithms will be more\ncomplicated, and the analyses will be relatively simple.\nAnd usually,",
    "start": "3636846",
    "end": "3642533"
  },
  {
    "text": "it's that way with cache\noblivious algorithms. So, I'm giving you this sort of\nas the intuition of why this",
    "start": "3642533",
    "end": "3648824"
  },
  {
    "text": "should be enough.\nThen you have to prove it. OK, let's go to another problem\nwhere divide and conquer is",
    "start": "3648824",
    "end": "3654933"
  },
  {
    "text": "useful, our good friend,\nmatrix multiplication. I don't know how many times\nwe've seen this in this class,",
    "start": "3654933",
    "end": "3661164"
  },
  {
    "text": "but in particular we saw it\nlast week with a recursive matrix multiply,\nmultithreaded algorithm.",
    "start": "3661164",
    "end": "3668000"
  },
  {
    "text": "So, I won't give you the\nalgorithm yet again, but we're going to analyze it\nin a very different way.",
    "start": "3668000",
    "end": "3676176"
  },
  {
    "text": "So, we have C and we have A,\nand actually up to you. So, I could cover standard\nmatrix multiplication,",
    "start": "3676176",
    "end": "3684521"
  },
  {
    "text": "which is when you do it row by\nrow, and column by column.",
    "start": "3684521",
    "end": "3690000"
  },
  {
    "text": "And, we could see why that's\nbad. And then, we could do the\nrecursive one and see why that's",
    "start": "3690000",
    "end": "3696485"
  },
  {
    "text": "good.\nOr, we could skip the standard algorithm.\nSo, how many people would like",
    "start": "3696485",
    "end": "3701951"
  },
  {
    "text": "to see why the standard\nalgorithm is bad? Because it's not totally\nobvious.",
    "start": "3701951",
    "end": "3707198"
  },
  {
    "text": "One, two, three,\nfour, five, half? Wow, that's a lot of votes.\nNow, how many people want to",
    "start": "3707198",
    "end": "3713611"
  },
  {
    "text": "skip to the chase?\nNo one. One, OK.\nAnd, everyone else is asleep. So, that's pretty good,\n50% awake, not bad.",
    "start": "3713611",
    "end": "3721190"
  },
  {
    "text": "OK, then, so standard matrix\nmultiplication. I'll do this fast because it\nis, I mean, you all know the",
    "start": "3721190",
    "end": "3730036"
  },
  {
    "text": "algorithm, right?\nTo compute this value of C; in A, you take this row,\nand in B you take this column.",
    "start": "3730036",
    "end": "3737099"
  },
  {
    "text": "Sorry I did a little bit\nsloppily. But this is supposed to be\naligned. Right?\nSo I take all of this stuff,",
    "start": "3737099",
    "end": "3744378"
  },
  {
    "text": "I multiply it with all of the\nstuff, add them up, the dot product.\nThat gives me this element.",
    "start": "3744378",
    "end": "3751949"
  },
  {
    "text": "And, let's say I do them in\nthis order row by row. So for every item in C,\nI loop over this row and this",
    "start": "3751949",
    "end": "3759241"
  },
  {
    "text": "column, B, multiply them\ntogether. That is an access pattern in\nmemory. So, exactly how much that costs\ndepends how these matrices are",
    "start": "3759241",
    "end": "3768555"
  },
  {
    "text": "laid out in memory.\nOK, this is a subtlety we haven't had to worry about\nbefore because everything was",
    "start": "3768555",
    "end": "3775703"
  },
  {
    "text": "uniform.\nI'm going to assume to give the standard algorithm the best\nchances of being good,",
    "start": "3775703",
    "end": "3782057"
  },
  {
    "text": "I'm going to store C in row\nmajor order, A in row major order, and B in column major\norder.",
    "start": "3782057",
    "end": "3790000"
  },
  {
    "text": "So, everything is nice and\nyou're scanning. So then this inner product is a\nscan.",
    "start": "3790000",
    "end": "3799254"
  },
  {
    "text": "Cool.\nSounds great, doesn't it?\nIt's bad, though.",
    "start": "3799254",
    "end": "3804711"
  },
  {
    "text": "Assume A is row major,\nand B is column major.",
    "start": "3804711",
    "end": "3811000"
  },
  {
    "text": "And C, you could assume is\nreally either way, but if I'm doing it row by row,\nI'll assume it's row major.",
    "start": "3811000",
    "end": "3817750"
  },
  {
    "text": "So, this is what I call the\nlayout, the memory layout, of these matrices.\nOK, it's good for this",
    "start": "3817750",
    "end": "3823904"
  },
  {
    "text": "algorithm, but the algorithm is\nnot good. So, it won't be that great.",
    "start": "3823904",
    "end": "3829000"
  },
  {
    "text": "So, how long does this take?\nHow many memory transfers? We know it takes M^3 time.\nNot going to try and beat M^3",
    "start": "3852000",
    "end": "3860533"
  },
  {
    "text": "here.\nJust going to try and get standard matrix multiplication\ngoing faster.",
    "start": "3860533",
    "end": "3866249"
  },
  {
    "text": "So, well, for each item over\nhere I pay N over B to do the scans and get the inner product.\nSo, N over B per item.",
    "start": "3866249",
    "end": "3876801"
  },
  {
    "text": "So, it's N over B,\nor we could go with the plus",
    "start": "3876801",
    "end": "3882659"
  },
  {
    "text": "one here, to compute each c_ij.\nSo that would suggest,",
    "start": "3882659",
    "end": "3889408"
  },
  {
    "text": "as an upper bound at least,\nit's N^3 over B.",
    "start": "3889408",
    "end": "3894883"
  },
  {
    "text": "OK, and indeed that is the\nright bound, so theta.",
    "start": "3894883",
    "end": "3900996"
  },
  {
    "text": "This is memory transfers,\nnot time, obviously.",
    "start": "3900996",
    "end": "3908000"
  },
  {
    "text": "That is indeed the case because\nif you look at consecutive, I do this c_ij,\nthen this one,",
    "start": "3908000",
    "end": "3914525"
  },
  {
    "text": "this one, this one,\nthis one, keep incrementing j and keeping I fixed,\nright?",
    "start": "3914525",
    "end": "3920074"
  },
  {
    "text": "So, the row that I use stays\nfixed for a long time. I get to reuse that if it\nhappens, say that that fits a",
    "start": "3920074",
    "end": "3927875"
  },
  {
    "text": "block maybe, I get to reuse that\nrow several times if that happens to fit in cache.\nBut the column is changing",
    "start": "3927875",
    "end": "3936630"
  },
  {
    "text": "every single time.\nOK, so every time I moved here and compute the next c_ij,\neven if a column could fit in",
    "start": "3936631",
    "end": "3943093"
  },
  {
    "text": "cache, I can't fit all the\ncolumns in cache. And the columns that I'm\nvisiting move,",
    "start": "3943093",
    "end": "3948174"
  },
  {
    "text": "you know, they just scan\nacross. So, I'm scanning this whole\nmatrix every time. And unless you're entire matrix\nfits in cache,",
    "start": "3948174",
    "end": "3955765"
  },
  {
    "text": "in which case you could do\nanything, I don't care, it will take constant time,\nor you'll take M over B time,",
    "start": "3955766",
    "end": "3962353"
  },
  {
    "text": "enough to read it into the\ncache, do your stuff, and write it back out.\nExcept in that boring case,",
    "start": "3962353",
    "end": "3969989"
  },
  {
    "text": "you're going to have to pay N^2\nover B for every row here because you have to scan the\nwhole collection of columns.",
    "start": "3969989",
    "end": "3978242"
  },
  {
    "text": "You have to read this entire\nmatrix for every row over here. So, you really do need N^3 over\nB for the whole thing.",
    "start": "3978242",
    "end": "3986494"
  },
  {
    "text": "So, it's usually a theta.\nSo, you might say, well, that's great.\nIt's the size of my problem,",
    "start": "3986494",
    "end": "3992765"
  },
  {
    "text": "the usual running time,\ndivided by B. And that was the case when we\nare thinking about linear time,",
    "start": "3992766",
    "end": "3998329"
  },
  {
    "text": "N versus N over B.\nIt's hard to beat N over B when your problem is of size N.\nBut now we have a cubed.",
    "start": "3998329",
    "end": "4004066"
  },
  {
    "text": "And, this gets back to,\nwe have good spatial locality. When we read a block,\nwe use the whole thing.",
    "start": "4004066",
    "end": "4009687"
  },
  {
    "text": "Great.\nIt seems optimal. But we don't have good temporal\nlocality. It could be that maybe if we\nstored the right things,",
    "start": "4009687",
    "end": "4016349"
  },
  {
    "text": "we kept them around,\nwe could them several times because we're using each element\nlike a cubed number of times.",
    "start": "4016350",
    "end": "4024000"
  },
  {
    "text": "That's not the right way of\nsaying it, but we're reusing the matrices a lot,\nreusing those items.",
    "start": "4024000",
    "end": "4031951"
  },
  {
    "text": "If we are doing N^3 work on N^2\nthings, we're reusing a lot. So, we want to do better than\nthis, and that's the recursive",
    "start": "4031951",
    "end": "4041932"
  },
  {
    "text": "algorithm, which we've seen.\nSo, we know the algorithm pretty much.\nI just have to tell you what",
    "start": "4041933",
    "end": "4049800"
  },
  {
    "text": "the layout is.\nSo, we're going to take C,",
    "start": "4049800",
    "end": "4056588"
  },
  {
    "text": "partition of C_1-1,\nC_1-2, and so on.",
    "start": "4056588",
    "end": "4062941"
  },
  {
    "text": "So, I have an N by N matrix,\nand I'm partitioning into N",
    "start": "4062941",
    "end": "4072647"
  },
  {
    "text": "over 2 by N over 2 submatrices,\nall three of them times",
    "start": "4072647",
    "end": "4082176"
  },
  {
    "text": "whatever.\nAnd, I could write this out yet",
    "start": "4082176",
    "end": "4087377"
  },
  {
    "text": "again but I won't.\nOK, we can recursively compute this thing with eight matrix\nmultiplies, and a bunch of",
    "start": "4087377",
    "end": "4095200"
  },
  {
    "text": "matrix additions.\nI don't care how many, but a constant number.\nWe see that at least twice now,",
    "start": "4095200",
    "end": "4102255"
  },
  {
    "text": "so I won't show it again.\nNow, how do I lay out the matrices?\nAny suggestions how I lay out",
    "start": "4102256",
    "end": "4109005"
  },
  {
    "text": "the matrices?\nI could lay them out in row major order.\nI'll call it major order.",
    "start": "4109005",
    "end": "4115692"
  },
  {
    "text": "But that might be less natural\nnow. We're not doing anything by\nrows or by columns.",
    "start": "4115693",
    "end": "4122000"
  },
  {
    "text": "So, what layout should I use?\nYeah? Quartet major order,\nmaybe quadrant major order",
    "start": "4139000",
    "end": "4148445"
  },
  {
    "text": "unless you're musically\ninclined, yeah. Good idea.\nYou've never seen this order",
    "start": "4148446",
    "end": "4157420"
  },
  {
    "text": "before, so it's maybe not so\nnatural. Somehow I want to cluster it by\nblocks.",
    "start": "4157420",
    "end": "4166157"
  },
  {
    "text": "OK, I think that's about all.\nSo, I mean, it's a recursive",
    "start": "4166158",
    "end": "4173401"
  },
  {
    "text": "layout.\nThis was not an easy question. It's OK.\nStore matrices or lay out the",
    "start": "4173402",
    "end": "4179751"
  },
  {
    "text": "matrices recursively by block.\nOK, I'm cheating a little bit.",
    "start": "4179751",
    "end": "4184899"
  },
  {
    "text": "I'm redefining the problem to\nsay, assume that your matrices",
    "start": "4184899",
    "end": "4189961"
  },
  {
    "text": "are laid out in this way.\nBut, it doesn't really matter. We can cheat,\ncan't we?",
    "start": "4189961",
    "end": "4196568"
  },
  {
    "text": "In fact, it doesn't matter.\nYou can turn a matrix into this",
    "start": "4196568",
    "end": "4202276"
  },
  {
    "text": "layout without too much linear\nwork, almost linear work. Log factors,\nmaybe.",
    "start": "4202276",
    "end": "4207636"
  },
  {
    "text": "OK, so if I want to store my\nmatrix A as a linear thing, I'm going to recursively\ndefined that layout to be",
    "start": "4207637",
    "end": "4215274"
  },
  {
    "text": "recursively store the upper left\ncorner, then store, let's say, the upper right\ncorner.",
    "start": "4215274",
    "end": "4221442"
  },
  {
    "text": "It doesn't matter which order I\ndo these. I should have drawn this wider,\nthen store the lower left",
    "start": "4221442",
    "end": "4228491"
  },
  {
    "text": "corner, and then store the lower\nright corner recursively.",
    "start": "4228492",
    "end": "4234000"
  },
  {
    "text": "So, how do you store this?\nWell, you divide it in four, and lay out the top left,\nand so on.",
    "start": "4234000",
    "end": "4240634"
  },
  {
    "text": "OK, this is a recursive\ndefinition of how the element should be stored in a linear\narray.",
    "start": "4240634",
    "end": "4247046"
  },
  {
    "text": "It's a weird one,\nbut this is a very powerful idea in cache oblivious\nalgorithms.",
    "start": "4247046",
    "end": "4252861"
  },
  {
    "text": "We'll use this multiple times.\nOK, so now all we have to do is analyze the number of memory\ntransfers.",
    "start": "4252861",
    "end": "4260241"
  },
  {
    "text": "How hard could it be?\nSo, we're going to store all the matrices in this order,\nand we want to compute the",
    "start": "4260241",
    "end": "4268978"
  },
  {
    "text": "number of memory transfers on an\nN by N matrix. See, I lapsed and I switched to\nlowercase n.",
    "start": "4268978",
    "end": "4275547"
  },
  {
    "text": "I should, throughout this week,\nbe using uppercase N because for historical reasons,\nany external memory kinds of",
    "start": "4275547",
    "end": "4283666"
  },
  {
    "text": "algorithms, to level algorithms,\nalways talk about capital N. And, don't ask why.\nYou should see what they define",
    "start": "4283666",
    "end": "4291785"
  },
  {
    "text": "little n to be.\nOK, so, any suggestions on what",
    "start": "4291785",
    "end": "4297995"
  },
  {
    "text": "the recurrence should be now?\nAll his fancy setup with the",
    "start": "4297995",
    "end": "4305342"
  },
  {
    "text": "recurrence is actually pretty\neasy. So, definitely it involves\nmultiplying matrices that are N",
    "start": "4305342",
    "end": "4317071"
  },
  {
    "text": "over 2 by N over 2.\nSo, what goes here?",
    "start": "4317071",
    "end": "4323000"
  },
  {
    "text": "Eight, thank you.\nThat you should know. And that the tricky part is\nwhat goes here.",
    "start": "4323000",
    "end": "4328793"
  },
  {
    "text": "OK, what goes here is,\nnow, the fact that I can even write this, this is the matrix\nadditions.",
    "start": "4328793",
    "end": "4335384"
  },
  {
    "text": "Ignore those for now.\nSuppose there weren't any. I just have to recursively\nmultiply.",
    "start": "4335384",
    "end": "4341323"
  },
  {
    "text": "The fact that this actually is\neight times memory transfers of N over 2 relies on this layout.\nRight, I'm assuming that the",
    "start": "4341323",
    "end": "4350670"
  },
  {
    "text": "arrays that I'm given are given\nas contiguous intervals and memory.\nIf they aren't, I mean, if they're scattered\nall over memory,",
    "start": "4350670",
    "end": "4358066"
  },
  {
    "text": "I'm screwed.\nThere's nothing I can do. So, but by assuming that I have\nthis recursive layout,",
    "start": "4358066",
    "end": "4363435"
  },
  {
    "text": "I know that the recursive\nmultiplies will always deal with three consecutive chunks of\nmemory, one for A,",
    "start": "4363435",
    "end": "4369519"
  },
  {
    "text": "one for B, one for C,\nOK, no matter what I do. Because these are stored\nconsecutively, recursively I have that\ninvariant.",
    "start": "4369519",
    "end": "4376438"
  },
  {
    "text": "And I can keep recursing.\nAnd I'm always dealing with three consecutive chunks of\nmemory.",
    "start": "4376438",
    "end": "4383000"
  },
  {
    "text": "That's why I need this layout\nis to be able to say this.",
    "start": "4383000",
    "end": "4388328"
  },
  {
    "text": "OK, Now what does addition\ncost? I'll just give you two\nmatrices.",
    "start": "4388328",
    "end": "4394335"
  },
  {
    "text": "They're stored in some linear\norder, the same linear order",
    "start": "4394335",
    "end": "4399858"
  },
  {
    "text": "among the three of them.\nDo I care what the linear order",
    "start": "4399858",
    "end": "4405186"
  },
  {
    "text": "is?\nHow should I add two matrices, get the output?",
    "start": "4405186",
    "end": "4411000"
  },
  {
    "text": "Yeah?",
    "start": "4422000",
    "end": "4423000"
  },
  {
    "text": "Right, if each of the three\narrays I'm dealing with are stored in the same order,\nI can just scan in parallel",
    "start": "4431000",
    "end": "4438559"
  },
  {
    "text": "through all three of them and\njust add corresponding elements, and output it to the third.\nSo, I don't care what the order",
    "start": "4438559",
    "end": "4447045"
  },
  {
    "text": "is, as long as it's consistent\nand I get N^2 over B. I'll ignore plus one here.\nThat's just looking at the",
    "start": "4447045",
    "end": "4454390"
  },
  {
    "text": "entire matrix.\nSo, there we go: another recurrence.\nWe've seen this with N^2,",
    "start": "4454390",
    "end": "4459667"
  },
  {
    "text": "and we just got N^3.\nBut, it turns out now we get something cooler if we use the\nright base case.",
    "start": "4459667",
    "end": "4466370"
  },
  {
    "text": "So now we get to the base case,\nah, the tricky part. So, any suggestions what base\ncase I should use?",
    "start": "4466371",
    "end": "4475000"
  },
  {
    "text": "The block size,\ngood suggestion. So, if we have something of\nsize order B, we know that takes a constant\nnumber of memory transfers.",
    "start": "4475000",
    "end": "4481850"
  },
  {
    "text": "It turns out that's not enough.\nThat won't solve it here. But good guess.\nIn this case, it's not the right answer.\nI'll give you some intuition",
    "start": "4481850",
    "end": "4489294"
  },
  {
    "text": "why.\nWe are trying to improve on N^3 over B.\nIf you were just trying to get it divided by B,\nthis is a great base case.",
    "start": "4489294",
    "end": "4495443"
  },
  {
    "text": "But here, we know that just the\nimprovement afforded by the block size is not enough.\nWe have to somehow use the fact",
    "start": "4495443",
    "end": "4503243"
  },
  {
    "text": "that the cache is big.\nIt's M, so however big M is, it's that big.\nOK, so if we want to get some",
    "start": "4503244",
    "end": "4509976"
  },
  {
    "text": "improvement on this,\nwe've got to have M in the formula somewhere,\nand there's no M's yet.",
    "start": "4509977",
    "end": "4516276"
  },
  {
    "text": "So, it's got to involve M.\nWhat's that? MT of M over B?\nThat would work, but MT of M is also OK,\nI mean, some constant times M,",
    "start": "4516276",
    "end": "4525108"
  },
  {
    "text": "let's say.\nI want to make this constant small enough so that the entire\nproblem fits in cache.",
    "start": "4525108",
    "end": "4533000"
  },
  {
    "text": "So, it's like one third.\nI think it's actually, oh wait, is it the square root\nof M actually?",
    "start": "4533000",
    "end": "4540837"
  },
  {
    "text": "Right, this is an N by N\nmatrix. So, it should be C times the\nsquare root of M.",
    "start": "4540837",
    "end": "4547456"
  },
  {
    "text": "Sorry.\nSo, the square root of M by square root of M matrix has M\nentries.",
    "start": "4547456",
    "end": "4553552"
  },
  {
    "text": "If I make C like one third or\nsomething, then I can fit all",
    "start": "4553552",
    "end": "4558602"
  },
  {
    "text": "three matrices in memory.\nActually, one over square root",
    "start": "4558603",
    "end": "4564372"
  },
  {
    "text": "of three would do,\nbut who cares? So, for some constant,\nC, now everything fits in",
    "start": "4564372",
    "end": "4570620"
  },
  {
    "text": "memory.\nHow many memory transfers does it take?\nOne? It's a bit too small,\nbecause I do have to read the",
    "start": "4570621",
    "end": "4578451"
  },
  {
    "text": "problem in.\nAnd now, I mean, here was one because there's\nonly one block to read.",
    "start": "4578451",
    "end": "4584621"
  },
  {
    "text": "Now how many blocks are there\nto read? Constants?\nNo.",
    "start": "4584621",
    "end": "4590000"
  },
  {
    "text": "B?\nNo. M over B, good.\nGet it right eventually. That's the great thing about\nthinking with an oracle.",
    "start": "4590000",
    "end": "4597102"
  },
  {
    "text": "You can just keep guessing.\nM over B because we have cache size M.\nThere are M over B blocks in",
    "start": "4597102",
    "end": "4603907"
  },
  {
    "text": "that cache to read each one,\nOK? This is maybe,\nyou forgot what M was because",
    "start": "4603908",
    "end": "4609382"
  },
  {
    "text": "we haven't used it for a long\ntime. But M is the number of elements\nin cache.",
    "start": "4609382",
    "end": "4614857"
  },
  {
    "text": "This is the number of blocks in\ncache. OK, some of was saying B,\nand it's reasonable to assume",
    "start": "4614857",
    "end": "4622537"
  },
  {
    "text": "that M over B is about B.\nThat's like a square cache, but in general,\nwe don't make that assumption.",
    "start": "4622537",
    "end": "4628892"
  },
  {
    "text": "OK, where are we?\nWe're hopefully done, just about, good,\nbecause we have three minutes.",
    "start": "4628892",
    "end": "4634460"
  },
  {
    "text": "So, that's our base case.\nI have a square root here; I just forgot it.\nNow we just have to solve it.",
    "start": "4634460",
    "end": "4640815"
  },
  {
    "text": "Now, this is an easier\nrecurrence, right? I don't want to use the master\nmethod, because master method is",
    "start": "4640815",
    "end": "4647497"
  },
  {
    "text": "not going to handle these B's\nand M's, and these crazy base cases.\nOK, master method would prove",
    "start": "4647497",
    "end": "4655271"
  },
  {
    "text": "N^3.\nGreat. Master method doesn't really\nthink about these kinds of",
    "start": "4655271",
    "end": "4660283"
  },
  {
    "text": "cases.\nBut with regression trees, if you remember way back to the\nproof of the master method,",
    "start": "4660283",
    "end": "4667331"
  },
  {
    "text": "just look at the recursion tree\nas geometric up or down where everything is equal,\nand then you just add them up,",
    "start": "4667331",
    "end": "4675945"
  },
  {
    "text": "every level.\nThe point is that this is a nice recurrence.\nAll of the sub problems are the",
    "start": "4675945",
    "end": "4682680"
  },
  {
    "text": "same size, and that analysis\nalways works, I say, when everything has the\nsame size, all the children.",
    "start": "4682680",
    "end": "4692000"
  },
  {
    "text": "So, here's the recursion tree.\nWe have N^2 over B at the top.",
    "start": "4692000",
    "end": "4698857"
  },
  {
    "text": "We split into eight subproblems\nwhere each one,",
    "start": "4698857",
    "end": "4704114"
  },
  {
    "text": "the cost is one half N^2 over\nB. I'm not going to write them\nall.",
    "start": "4704114",
    "end": "4712000"
  },
  {
    "text": "There they are.\nYou add them up. How much do you get?\nWell, there's eight of them.",
    "start": "4712000",
    "end": "4718921"
  },
  {
    "text": "Eight times a half is two.\nFour. [LAUGHTER] Thanks.\nFour, right?",
    "start": "4718921",
    "end": "4724265"
  },
  {
    "text": "OK, I'm bad at arithmetic.\nI probably already said it, but there are three kinds of\nmathematicians,",
    "start": "4724265",
    "end": "4732676"
  },
  {
    "text": "those who can add,\nand those who can't. OK, why am I looking at this?\nIt's obvious.",
    "start": "4732676",
    "end": "4741000"
  },
  {
    "text": "OK, so we keep going.\nThis looks geometrically increasing.\nRight? You just know in your heart\nthat if you work out the first",
    "start": "4741000",
    "end": "4748405"
  },
  {
    "text": "two levels, you can tell whether\nit's geometrically increasing, decreasing, or they're all\nequal, or something else.",
    "start": "4748405",
    "end": "4755437"
  },
  {
    "text": "And then you better think.\nBut I see this as geometrically increasing.\nIt will indeed be like 16 at",
    "start": "4755437",
    "end": "4761412"
  },
  {
    "text": "the next level,\nI guess. OK, it should be.\nSo, it's increasing. That means the leaves matter.\nSo, let's work out the leaves.",
    "start": "4761412",
    "end": "4770000"
  },
  {
    "text": "And, this is where we use our\nbase case. So, we have a problem of size\nsquare root of M.",
    "start": "4770000",
    "end": "4778630"
  },
  {
    "text": "And so, yeah,\nyou have a question? Oh, indeed.\nI knew there was something.",
    "start": "4778630",
    "end": "4785840"
  },
  {
    "text": "I knew it was supposed to be\ntwo out here. Thanks.\nThis is why you're here.",
    "start": "4785840",
    "end": "4793150"
  },
  {
    "text": "It's actually N over two\nsquared over B. Thanks.\nI'm substituting N over 2 into",
    "start": "4793150",
    "end": "4800866"
  },
  {
    "text": "this.\nOK, so this is actually N^2 over 4 B.\nSo, I get two,",
    "start": "4800867",
    "end": "4806519"
  },
  {
    "text": "because there are eight times\none over four. OK, I wasn't that far off then.\nIt's still geometrically",
    "start": "4806519",
    "end": "4813417"
  },
  {
    "text": "increasing, still the case,\nOK? But now, it actually doesn't\nmatter. Whatever the cost is,\nas long as it's bigger than",
    "start": "4813417",
    "end": "4821371"
  },
  {
    "text": "one, great.\nNow we look at the leaves. The leaves are root M by root\nM. I substitute root M into this:\nI get M over B with some",
    "start": "4821371",
    "end": "4829958"
  },
  {
    "text": "constants.\nWho cares? So, each leaf is M over B,\nOK, lots of them.",
    "start": "4829958",
    "end": "4836786"
  },
  {
    "text": "How many are there?\nThis is the only, deal with recursion trees,\ncounting the number of leaves",
    "start": "4836787",
    "end": "4845006"
  },
  {
    "text": "is always the annoying part.\nOh boy, well, we start with an N by N matrix.\nWe stop when we get down to",
    "start": "4845006",
    "end": "4853948"
  },
  {
    "text": "root N by root N matrix.\nSo, that sounds like something.",
    "start": "4853948",
    "end": "4860000"
  },
  {
    "text": "Oh boy, I'm cheating here.\nReally? That many?\nIt sounds plausible.",
    "start": "4860000",
    "end": "4867905"
  },
  {
    "text": "OK, the claim is,\nand I'll cheat. So I'm going to use the oracle\nhere, and we'll figure out why",
    "start": "4867905",
    "end": "4879449"
  },
  {
    "text": "this is the case.\nN over root N^3 leaves,",
    "start": "4879450",
    "end": "4884470"
  },
  {
    "text": "hey what?\nI think here, it's hard to see the tree.\nBut it's easy to see in the",
    "start": "4884470",
    "end": "4893979"
  },
  {
    "text": "matrix.\nLet's enter the matrix. We have our big matrix.\nWe divided in half.",
    "start": "4893979",
    "end": "4899256"
  },
  {
    "text": "We recursively divide in half.\nWe recursively divide in half. You get the idea,\nOK?",
    "start": "4899256",
    "end": "4905119"
  },
  {
    "text": "Now, at some point these\nsectors, let's say one of these sectors, and each of these\nsectors, fits in cache.",
    "start": "4905120",
    "end": "4912742"
  },
  {
    "text": "And three of them fit in cache.\nSo, that's when we stop the recursion in the analysis.\nThe algorithm goes all the way.",
    "start": "4912743",
    "end": "4922320"
  },
  {
    "text": "But in the analysis,\nlet's say we stop at M. OK, now, how many leaves or\nproblems are there?",
    "start": "4922320",
    "end": "4928981"
  },
  {
    "text": "Oh man, this is still not\nobvious. OK, the number of leaf chunks\nhere is, like,",
    "start": "4928981",
    "end": "4934669"
  },
  {
    "text": "I mean, the number of these\nthings is something like N over root M, right,\nthe number of chunks.",
    "start": "4934669",
    "end": "4941629"
  },
  {
    "text": "But, it's a little less clear\nbecause I have so many of these. But, all right,\nso let's just suppose,",
    "start": "4941629",
    "end": "4948964"
  },
  {
    "text": "now, I think of normal,\nboring, matrix multiplication on chunks of this size.\nThat's essentially what the",
    "start": "4948964",
    "end": "4958119"
  },
  {
    "text": "leaves should tell me.\nI start with this big problem, I recurse out to all these\nlittle, tiny,",
    "start": "4958119",
    "end": "4965261"
  },
  {
    "text": "multiply this by that,\nOK, this root M by root M chunk.\nOK, how many operations,",
    "start": "4965261",
    "end": "4971305"
  },
  {
    "text": "how many multiplies do I do on\nthose things? N^3.\nBut now, N, the size of my",
    "start": "4971305",
    "end": "4977034"
  },
  {
    "text": "matrix in terms of these little\nsub matrices, is N over root M.\nSo, it should be N over root",
    "start": "4977034",
    "end": "4985859"
  },
  {
    "text": "M^3 subproblems of this size.\nIf you work it out, normally we go down to things\nof constant size and we get",
    "start": "4985859",
    "end": "4996477"
  },
  {
    "text": "exactly N^3 of them.\nNow we are stopping at this short point in saying,\nwell, it's however many there",
    "start": "4996478",
    "end": "5006485"
  },
  {
    "text": "are, cubed.\nOK, this is a bit of hand waving.\nYou could work it out with the",
    "start": "5006485",
    "end": "5015352"
  },
  {
    "text": "recurrence on the number of\nleaves. But there it is.\nSo, the total here is N over,",
    "start": "5015352",
    "end": "5024179"
  },
  {
    "text": "let's work it out.\nN^3 over M to the three halves,",
    "start": "5024180",
    "end": "5029656"
  },
  {
    "text": "that's this number of leaves,\ntimes the cost at each leaf,",
    "start": "5029656",
    "end": "5036025"
  },
  {
    "text": "which is M over B.\nSo, some of the N's cancel,",
    "start": "5036025",
    "end": "5041053"
  },
  {
    "text": "and we get N^3 over B root M,\nwhich is a root M factor better",
    "start": "5041054",
    "end": "5047759"
  },
  {
    "text": "than N^3 over B.\nIt's actually quite a lot,",
    "start": "5047759",
    "end": "5053432"
  },
  {
    "text": "the square root of the cache\nsize. That is optimal.\nThe best two level matrix",
    "start": "5053433",
    "end": "5060359"
  },
  {
    "text": "multiplication algorithm is N^3\nover B root M memory transfers.",
    "start": "5060359",
    "end": "5066162"
  },
  {
    "text": "Pretty amazing,\nand I'm over time. You can generalize this into\nall sorts of great things,",
    "start": "5066162",
    "end": "5074979"
  },
  {
    "text": "but the bottom line is this is\na great way to do matrix multiplication as a recursion.\nWe'll see more recursion for",
    "start": "5074979",
    "end": "5085308"
  },
  {
    "text": "cache oblivious algorithms on\nWednesday.",
    "start": "5085308",
    "end": "5087908"
  }
]