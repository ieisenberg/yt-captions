[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "7410"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "7410",
    "end": "13960"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13960",
    "end": "19790"
  },
  {
    "text": "ocw.mit.edu.  PROFESSOR: So this week\nthe last final",
    "start": "19790",
    "end": "28100"
  },
  {
    "text": "topic we were taught-- we're really going to talk\nabout in class is dynamic programming, so who can tell\nme what the key idea in",
    "start": "28100",
    "end": "38065"
  },
  {
    "text": "dynamic programming is?  AUDIENCE: A way of\n[INAUDIBLE].",
    "start": "38065",
    "end": "43996"
  },
  {
    "text": " Instead of optimization tools,\nyou can use [UNINTELLIGIBLE]",
    "start": "43996",
    "end": "49540"
  },
  {
    "text": " PROFESSOR: Sort of.",
    "start": "49540",
    "end": "57270"
  },
  {
    "text": "The key idea is that you don't\nwant to repeat computations that you've already\ndone before. So you want to find a way to\nonly do everything once.",
    "start": "57270",
    "end": "66690"
  },
  {
    "text": "So it's a form of laziness. There are two key attributes for\na problem though that need",
    "start": "66690",
    "end": "73820"
  },
  {
    "text": "to exist for it to be solvable\nwith dynamic programming. Can someone tell me\nwhat those are?",
    "start": "73820",
    "end": "80540"
  },
  {
    "text": " AUDIENCE: It's optimal\n[UNINTELLIGIBLE]",
    "start": "80540",
    "end": "88921"
  },
  {
    "text": "The local optimization\nhas those. PROFESSOR: There's overlapping\nsub-properties.",
    "start": "88921",
    "end": "100768"
  },
  {
    "text": "[LAUGHTER] You had all the right words,\njust not in the right order.",
    "start": "100768",
    "end": "106299"
  },
  {
    "text": "An optimal substructure. ",
    "start": "106300",
    "end": "116509"
  },
  {
    "text": "OK. Can you describe the first\none, or any one? AUDIENCE: You get to the end\nsolution [UNINTELLIGIBLE]",
    "start": "116510",
    "end": "123732"
  },
  {
    "text": " PROFESSOR: So when they say\noverlapping sub-problems, it",
    "start": "123733",
    "end": "129369"
  },
  {
    "text": "means that we can take the big\nproblem and we can break it down to a slightly smaller\ninstance of the same problem.",
    "start": "129370",
    "end": "137550"
  },
  {
    "text": "And then we can use the solution\nto that smaller sub-problem in the solution\nto our bigger problem.",
    "start": "137550",
    "end": "145290"
  },
  {
    "text": "And then optimal substructure\nis closely related. It's saying that if we get an\noptimal solution for one of",
    "start": "145290",
    "end": "151270"
  },
  {
    "text": "those sub-problems, then we can\nuse that optimal solution for the optimal solution\nof the big problem.",
    "start": "151270",
    "end": "160080"
  },
  {
    "text": "Does that make sense\nto everyone? AUDIENCE: [INAUDIBLE] PROFESSOR: What's that?",
    "start": "160080",
    "end": "166819"
  },
  {
    "text": "It's closely related. And so it's-- ",
    "start": "166820",
    "end": "173540"
  },
  {
    "text": "yeah, it's closely related\nbut not exactly the same. ",
    "start": "173540",
    "end": "180010"
  },
  {
    "text": "So to start off, we're going to\ndo kind of a function that we're all familiar with,\nis Fibonacci, right.",
    "start": "180010",
    "end": "186000"
  },
  {
    "text": " We've seen this one a billion\ntimes before.",
    "start": "186000",
    "end": "192390"
  },
  {
    "start": "192390",
    "end": "198500"
  },
  {
    "text": "And so it's pretty obvious\nwhere the overlapping sub-problems are. The solution to f of N is\nf of N minus 1, and f",
    "start": "198500",
    "end": "207903"
  },
  {
    "text": "of N minus 2, right? And so if I combine the\nsolutions to these two",
    "start": "207903",
    "end": "213129"
  },
  {
    "text": "instances of Fibonacci, I get\nthe solution for the big instance of Fibonacci right?",
    "start": "213130",
    "end": "219400"
  },
  {
    "text": "So on the screen, you have\nan example function.",
    "start": "219400",
    "end": "227810"
  },
  {
    "text": "You've all seen this before. And so what I'm just going to\ndo is I'm going to run this",
    "start": "227810",
    "end": "233640"
  },
  {
    "text": "Fibonacci function from 0 to 30,\nor N equals 29 actually.",
    "start": "233640",
    "end": "239800"
  },
  {
    "text": "And we're going to\nlook at how many steps it takes to execute. ",
    "start": "239800",
    "end": "251730"
  },
  {
    "text": "When we get to Fibonacci of 29,\nit takes about 1.6 million steps to compute the value.",
    "start": "251730",
    "end": "259299"
  },
  {
    "text": "And if we take a look\nat a plot here--",
    "start": "259300",
    "end": "265379"
  },
  {
    "text": "so the y-axis is semi-log, the\nblue dots represent the actual",
    "start": "265380",
    "end": "271610"
  },
  {
    "text": "number of steps that the\nfunction took, so the number of times that it had to perform\nthe computation.",
    "start": "271610",
    "end": "276690"
  },
  {
    "text": "And then the blue solid line\nrepresents 2 to the N. The red line is the golden ratio to\nthe N, which is the tight",
    "start": "276690",
    "end": "284475"
  },
  {
    "text": "bound for this version\nof Fibonacci. And then the green line is a\nplot of a quadratic function.",
    "start": "284475",
    "end": "293740"
  },
  {
    "text": "So nothing really surprising\nthere. It's pretty inefficient, and\nwe established that before.",
    "start": "293740",
    "end": "301080"
  },
  {
    "text": "So we could make this more\nefficient with dynamic programming, right? ",
    "start": "301080",
    "end": "307659"
  },
  {
    "text": "Let's draw out the call\ntree for f of 5. ",
    "start": "307660",
    "end": "329420"
  },
  {
    "text": "Doing a lot of writing.  OK.",
    "start": "329420",
    "end": "334940"
  },
  {
    "text": "So if you look at this, we see\nthat in a lot of places, we're",
    "start": "334940",
    "end": "340870"
  },
  {
    "text": "repeating computations. So we repeat f of\n2 three times. ",
    "start": "340870",
    "end": "348969"
  },
  {
    "text": "We also repeat f of 3, this\ncomputation, twice. ",
    "start": "348970",
    "end": "359650"
  },
  {
    "text": "The idea behind dynamic\nprogramming is that instead of repeating these computations\nover and over again, we're",
    "start": "359650",
    "end": "366150"
  },
  {
    "text": "just going to compute\nthem once. So if we look at the\nimplementation of this",
    "start": "366150",
    "end": "372419"
  },
  {
    "text": "recursive Fibonacci, we see that\nthe first recursive call is going down this\nside of the tree.",
    "start": "372420",
    "end": "378720"
  },
  {
    "text": " And so the upshot\nis that this--",
    "start": "378720",
    "end": "389069"
  },
  {
    "text": "all the values from f5, f4, f3,\nf2, f1, f0, they all get",
    "start": "389070",
    "end": "394450"
  },
  {
    "text": "computed before any\nof these branches. So what we can do is instead of\nrecomputing f2 and f2 here,",
    "start": "394450",
    "end": "406250"
  },
  {
    "text": "we can just compute it here. Save off this value somewhere\nin some sort of a brain, and",
    "start": "406250",
    "end": "413320"
  },
  {
    "text": "do the same thing for f3,\nand f4, but that's",
    "start": "413320",
    "end": "419030"
  },
  {
    "text": "not going to matter. So when we get to the second\nrecursive call, say when we're",
    "start": "419030",
    "end": "424290"
  },
  {
    "text": "calling Fibonacci of 3, we\ncompute f of 2, get f of 1, we",
    "start": "424290",
    "end": "429650"
  },
  {
    "text": "come back up to Fibonacci\nof 4, right? The next recursive call is going\nto be to Fibonacci of 2.",
    "start": "429650",
    "end": "436600"
  },
  {
    "text": "But since we've already computed\nit, and we've saved it off in a brain, we can just\nlook up this value instead of",
    "start": "436600",
    "end": "442250"
  },
  {
    "text": "doing all the computation\nagain. So when you have a very small\ntree like this, right, it's",
    "start": "442250",
    "end": "448440"
  },
  {
    "text": "not a huge benefit. But if you have like a lot, like\nf of 100, this is going",
    "start": "448440",
    "end": "453780"
  },
  {
    "text": "to make a huge difference. Is anyone lost?",
    "start": "453780",
    "end": "459114"
  },
  {
    "text": "OK.  So why don't we take a look--",
    "start": "459114",
    "end": "464780"
  },
  {
    "start": "464780",
    "end": "472760"
  },
  {
    "text": "So this is an implementation\nof Fib that has an extra",
    "start": "472760",
    "end": "479870"
  },
  {
    "text": "parameter called memo. And memo is the brain\nI'm talking about. This is where we're going to\nstash those computed values so",
    "start": "479870",
    "end": "487070"
  },
  {
    "text": "we don't have to compute\nthem again. And when it initially comes in,\nif memo is none, that is,",
    "start": "487070",
    "end": "496759"
  },
  {
    "text": "we haven't passed in a\ndictionary or if it's like the first call to this function,\nthen it's going to set a key",
    "start": "496760",
    "end": "503720"
  },
  {
    "text": "of 0 to 0 and key of 1 to 1. Those correspond to f of 0 and\nf of 1, right, actually.",
    "start": "503720",
    "end": "509990"
  },
  {
    "start": "509990",
    "end": "516429"
  },
  {
    "text": "No one pointed that out? All right.",
    "start": "516429",
    "end": "522559"
  },
  {
    "text": "So, now it's going to-- after it does that\ninitialization, it's going to",
    "start": "522559",
    "end": "528180"
  },
  {
    "text": "come down to this if statement,\nand it's going to check for whether or\nnot N is in memo.",
    "start": "528180",
    "end": "535840"
  },
  {
    "text": "What this is actually\nasking is, have we seen this number before?",
    "start": "535840",
    "end": "541529"
  },
  {
    "text": "When we've been computing this\nnumber, the big Fibonacci number, right?",
    "start": "541530",
    "end": "548640"
  },
  {
    "text": "So if it's down here, and it's\nlooking at f of 2, it's asking, have I seen Fibonacci\nof 2 when I've done this",
    "start": "548640",
    "end": "556339"
  },
  {
    "text": "computation before? And if it's in this tree, then\nthe answer is yes because it's seen it down here.",
    "start": "556340",
    "end": "562120"
  },
  {
    "text": " If it hasn't seen it though,\nit's got to do the work.",
    "start": "562120",
    "end": "567750"
  },
  {
    "text": "So it's got to actually do\nthe recursive calls. And this is when it travels\ndown this left",
    "start": "567750",
    "end": "575399"
  },
  {
    "text": "branch of the tree. Does that makes sense? ",
    "start": "575400",
    "end": "581089"
  },
  {
    "text": "And all we're going to do\nis store it off here.  And then at the end,\nwe just return",
    "start": "581090",
    "end": "587200"
  },
  {
    "text": "whatever's in our memory. So why don't we take a look\nat how this runs.",
    "start": "587200",
    "end": "592370"
  },
  {
    "start": "592370",
    "end": "600920"
  },
  {
    "text": "So remember, this is 1.6\nmillion with the old",
    "start": "600920",
    "end": "607720"
  },
  {
    "text": "implementation, and\nnow it's only 57. And in fact, it's linear and\nexactly 2 to the N minus 1, or",
    "start": "607720",
    "end": "619290"
  },
  {
    "text": "2 times N minus 1.  Everyone follow that?",
    "start": "619290",
    "end": "625980"
  },
  {
    "text": "Any questions? AUDIENCE: There's not too\nmuch we could do. PROFESSOR: No.",
    "start": "625980",
    "end": "631390"
  },
  {
    "text": "It saves a lot of\nwork for you. Because as soon as it-- so let's say that it's computed\nf of 4, this entire",
    "start": "631390",
    "end": "639890"
  },
  {
    "text": "sub-tree here. As soon as it sees f of 3, it's\ngoing to look in it's",
    "start": "639890",
    "end": "645090"
  },
  {
    "text": "brain, and you've already seen\nf of 3, and it says, I've already seen this, so I don't\nneed to do all this",
    "start": "645090",
    "end": "650589"
  },
  {
    "text": "computation here. I don't need to do all these\nrecursive calls. I just have to return whatever's\nin the dictionary.",
    "start": "650590",
    "end": "656670"
  },
  {
    "text": "That's where your\nsavings come in. ",
    "start": "656670",
    "end": "661890"
  },
  {
    "text": "So let's take a look\nat another example. ",
    "start": "661890",
    "end": "669070"
  },
  {
    "text": "The point is, you can have some\nreally huge savings if you write your code right.",
    "start": "669070",
    "end": "676360"
  },
  {
    "text": "So let's look at a different\nproblem. Let's say that I have a robot.",
    "start": "676360",
    "end": "681830"
  },
  {
    "start": "681830",
    "end": "690290"
  },
  {
    "text": "And this robot is positioned\non the grid. ",
    "start": "690290",
    "end": "696510"
  },
  {
    "text": "Let's say that it has N rows,\nand N columns, or M columns.",
    "start": "696510",
    "end": "714060"
  },
  {
    "text": " Your robot is starting\nout here, and it",
    "start": "714060",
    "end": "721670"
  },
  {
    "text": "wants to get here. Your robot though is very\nstupid, and it can go only",
    "start": "721670",
    "end": "727850"
  },
  {
    "text": "down and to the right. The question is, how many unique\npaths are there from",
    "start": "727850",
    "end": "735240"
  },
  {
    "text": "the top left square to the\nbottom right square, given those constraints? ",
    "start": "735240",
    "end": "746430"
  },
  {
    "text": "If you try and do this\nanalytically, you'll probably hurt yourself. The easier way to do it, or\nat least I think so, is to",
    "start": "746430",
    "end": "754900"
  },
  {
    "text": "realize that in order to get to\ng, there's only two places that it can come from. It can come from here, it can\ncome from here, right.",
    "start": "754900",
    "end": "763730"
  },
  {
    "text": "So the total number of unique\npaths coming into g are the total number of unique paths\ncoming into this guy, and the",
    "start": "763730",
    "end": "770620"
  },
  {
    "text": "total number of unique paths\ncoming into this guy. So there's your overlapping\nsub-problems, right, and also",
    "start": "770620",
    "end": "775880"
  },
  {
    "text": "your optimal substructure. If I can figure out these\nnumbers, then I can figure out this number, right.",
    "start": "775880",
    "end": "782840"
  },
  {
    "text": "So--  and then these guys, the\nsame condition applies.",
    "start": "782840",
    "end": "790010"
  },
  {
    "text": "If I know these two numbers,\nthen I can figure out this number. If I know these two numbers,\nthen I can figure out this number.",
    "start": "790010",
    "end": "796320"
  },
  {
    "text": "So one implementation-- well, one other thing.",
    "start": "796320",
    "end": "803890"
  },
  {
    "text": "If I get down to this case where\nI have a 1 by M grid,",
    "start": "803890",
    "end": "808940"
  },
  {
    "text": "how many different ways\nare there to get from here to here? One, right?",
    "start": "808940",
    "end": "814340"
  },
  {
    "text": " And then same thing\nfor M by N right?",
    "start": "814340",
    "end": "820130"
  },
  {
    "text": " So the first crack at this,\nhere's a recursive function.",
    "start": "820130",
    "end": "829260"
  },
  {
    "text": " All we're going to do is, if\nwe only have 1 row or 1",
    "start": "829260",
    "end": "836400"
  },
  {
    "text": "column, we return 1. Otherwise, we're going to look\nfor the number of robot paths",
    "start": "836400",
    "end": "844160"
  },
  {
    "text": "in an N minus 1 by M matrix and\nthen the number of paths in an N by M minus 1 matrix.",
    "start": "844160",
    "end": "851139"
  },
  {
    "text": " So let's take a look. ",
    "start": "851140",
    "end": "861450"
  },
  {
    "text": "We're going to do this\non a 14 by 14 grid.",
    "start": "861450",
    "end": "867410"
  },
  {
    "text": "And this will take\na few seconds. ",
    "start": "867410",
    "end": "880550"
  },
  {
    "text": "OK. So there's a lot. 10 million unique paths, and it\ntook about 20 million steps",
    "start": "880550",
    "end": "889560"
  },
  {
    "text": "to figure it out. So we're going to pull the same\ntrick for this problem",
    "start": "889560",
    "end": "896570"
  },
  {
    "text": "that we did for Fibonacci. We're going to memorize, or\nmemoize, the different paths",
    "start": "896570",
    "end": "905080"
  },
  {
    "text": "or the different solutions,\nexcept our key is going to be",
    "start": "905080",
    "end": "910750"
  },
  {
    "text": "a little different. It's just going to be N and M. So again, if we have--",
    "start": "910750",
    "end": "918130"
  },
  {
    "text": "well, again, if N and M\nis not memo, then we need to compute it. If either is 1, then we\nremember it as 1.",
    "start": "918130",
    "end": "927750"
  },
  {
    "text": "And if they're both greater than\n1, then we're going to",
    "start": "927750",
    "end": "932950"
  },
  {
    "text": "look at the number of paths\nin N minus 1 by M, and N times M minus 1.",
    "start": "932950",
    "end": "941100"
  },
  {
    "text": "And then we also know\nthat the solutions are symmetric, right. So it's going to be the same for\nan N by M and an M by N.",
    "start": "941100",
    "end": "950780"
  },
  {
    "text": "And just return the solution. So let's try this out. ",
    "start": "950780",
    "end": "960880"
  },
  {
    "text": "We get the same answer, but it\nonly takes 104 steps to do it. So it's a pretty huge\nsavings there.",
    "start": "960880",
    "end": "969620"
  },
  {
    "text": "So the other-- this is an example\nof a top-down dynamic programming solution.",
    "start": "969620",
    "end": "975710"
  },
  {
    "text": "We looked at the big problem,\nand we broke it down into two smaller problems. We looked at those two smaller\nsub-problems, we broke them",
    "start": "975710",
    "end": "982320"
  },
  {
    "text": "down into two smaller\nsub-problems a piece.",
    "start": "982320",
    "end": "987630"
  },
  {
    "text": "We can also go from\nthe bottom up.  And we might want to do\nthis for a reason that",
    "start": "987630",
    "end": "994080"
  },
  {
    "text": "I'll show in a second. So I think I needed that. ",
    "start": "994080",
    "end": "1010000"
  },
  {
    "text": "This is going to go from\nthe bottom up. So instead of starting back here\nand asking how many ways I can get from these two guys,\nit's going to start at the",
    "start": "1010000",
    "end": "1019010"
  },
  {
    "text": "beginning and ask how many\nways I can get here. One, right. And then here let's imagine that\nwe only have a 2 by 2.",
    "start": "1019010",
    "end": "1031770"
  },
  {
    "text": "It's going to look at, again,\nthe number of ways to get to",
    "start": "1031770",
    "end": "1037020"
  },
  {
    "text": "the square to the left and\nto the square to the top, and add it here.",
    "start": "1037020",
    "end": "1042849"
  },
  {
    "text": "Add it here. So what we're doing here-- what we're doing in this version\nis we're growing a",
    "start": "1042849",
    "end": "1051310"
  },
  {
    "text": "grid towards a solution. ",
    "start": "1051310",
    "end": "1057970"
  },
  {
    "text": "Does that make sense? ",
    "start": "1057970",
    "end": "1063530"
  },
  {
    "text": "This just sets up a matrix. The top row is going to\nbe initialized to 1.",
    "start": "1063530",
    "end": "1069519"
  },
  {
    "text": "First column is going to be 1.  And then for everything else,\nwe're just going to add the",
    "start": "1069520",
    "end": "1081660"
  },
  {
    "text": "row above and the column\nto the left. ",
    "start": "1081660",
    "end": "1088530"
  },
  {
    "text": "And return whatever's down in\nthis lower right corner. So it gets the same solution,\njust in a different direction.",
    "start": "1088530",
    "end": "1096620"
  },
  {
    "text": " So now you might want to do\nthis because imagine if",
    "start": "1096620",
    "end": "1112290"
  },
  {
    "text": "instead of 14, we had 1,400. So this should crash.",
    "start": "1112290",
    "end": "1118260"
  },
  {
    "text": " Python has a maximum\nrecursion depth.",
    "start": "1118260",
    "end": "1126290"
  },
  {
    "text": "If you have too many recursive\ncolumns, it's going to tell you, I can't go that deep,\nand kick you out.",
    "start": "1126290",
    "end": "1131750"
  },
  {
    "text": "So I have 1,400 rows\nand 1,400 columns,",
    "start": "1131750",
    "end": "1138350"
  },
  {
    "text": "that's a lot of recursion. ",
    "start": "1138350",
    "end": "1150720"
  },
  {
    "text": "But if we do it iteratively,\nwhere we have no recursion,",
    "start": "1150720",
    "end": "1162799"
  },
  {
    "text": "that's the number of unique\npaths, which is a pretty",
    "start": "1162800",
    "end": "1167870"
  },
  {
    "text": "sizable number. And that's the number of columns\nwe made, which for a",
    "start": "1167870",
    "end": "1175380"
  },
  {
    "text": "1,400 by 1,400 matrix is\nnot too bad, right. ",
    "start": "1175380",
    "end": "1183700"
  },
  {
    "text": "All right. So that was an easy one. So now we're going to go\nto little harder one. ",
    "start": "1183700",
    "end": "1191730"
  },
  {
    "text": "Everyone doing all right? OK. ",
    "start": "1191730",
    "end": "1198740"
  },
  {
    "text": "This is a counting\nchange problem. The idea is, let's assume I have\na currency with coins of",
    "start": "1198740",
    "end": "1219169"
  },
  {
    "text": "a certain value.  I'm not sure where I got the\n$0.27 from, but that's",
    "start": "1219170",
    "end": "1227850"
  },
  {
    "text": "apparently the value for the\ncoins in our currency. So the problem is--",
    "start": "1227850",
    "end": "1234770"
  },
  {
    "text": "let's say that I have\na sum total-- ",
    "start": "1234770",
    "end": "1239890"
  },
  {
    "text": "the question is, how many\ndifferent combinations of coins are there that\nequal total?",
    "start": "1239890",
    "end": "1246789"
  },
  {
    "start": "1246790",
    "end": "1253300"
  },
  {
    "text": "The way to break this down\nis-- so does everyone understand the problem? So like if I say I want to\ngive change $0.41 to a",
    "start": "1253300",
    "end": "1261710"
  },
  {
    "text": "customer, then it's like a\nquarter, a dime, a nickel, and a penny, right? ",
    "start": "1261710",
    "end": "1271380"
  },
  {
    "text": "We can think of the problem\nin two ways. Well, we can break the problem\ndown into two sub-problems by",
    "start": "1271380",
    "end": "1278660"
  },
  {
    "text": "first considering what the total\nis-- what the number of",
    "start": "1278660",
    "end": "1288800"
  },
  {
    "text": "combos would be if I use the\nlargest coin in my set.",
    "start": "1288800",
    "end": "1294880"
  },
  {
    "text": " We're using at least one\nof the largest coins.",
    "start": "1294880",
    "end": "1311550"
  },
  {
    "text": "And then the other is the number\nof combinations if not",
    "start": "1311550",
    "end": "1325600"
  },
  {
    "text": "using the largest coin. ",
    "start": "1325600",
    "end": "1333039"
  },
  {
    "text": "OK?  So this turned, actually\nturns, into a nicer",
    "start": "1333040",
    "end": "1339880"
  },
  {
    "text": "sub-problem, which is if I have\ntotal minus largest--",
    "start": "1339880",
    "end": "1348850"
  },
  {
    "text": "so in this case, minus $0.27,\nwhat's the number of",
    "start": "1348850",
    "end": "1357960"
  },
  {
    "text": "combinations for this\nsub-problem?",
    "start": "1357960",
    "end": "1364590"
  },
  {
    "text": "You follow?  And then this guy can be\nformulated as the number--",
    "start": "1364590",
    "end": "1372890"
  },
  {
    "text": "so I still have total number\nof combinations.",
    "start": "1372890",
    "end": "1380316"
  },
  {
    "text": " But then I take out the largest\ncoin, so coins is now,",
    "start": "1380316",
    "end": "1390490"
  },
  {
    "text": "instead of 1, instead of having\n$0.27 as the largest",
    "start": "1390490",
    "end": "1396590"
  },
  {
    "text": "coin, now has $0.25 as\nthe largest coin. Does that makes sense\nto people? ",
    "start": "1396590",
    "end": "1404320"
  },
  {
    "text": "And so the solution here to\nthis big problem is the",
    "start": "1404320",
    "end": "1410779"
  },
  {
    "text": "solution to-- or is the sum of the\nsolutions to this problem and In this problem.",
    "start": "1410780",
    "end": "1416490"
  },
  {
    "text": "Make sense? All right. Why don't we take a look at\nthe first version of this",
    "start": "1416490",
    "end": "1426450"
  },
  {
    "text": "problem or this implementation. So we have three base cases.",
    "start": "1426450",
    "end": "1436080"
  },
  {
    "text": "So the first base case is-- well, first let me explain\nthe function.",
    "start": "1436080",
    "end": "1441610"
  },
  {
    "text": "So, total, that's the\namount that we want.",
    "start": "1441610",
    "end": "1447100"
  },
  {
    "text": "Coins-- it's the set of coins\nin our currency. ",
    "start": "1447100",
    "end": "1452309"
  },
  {
    "text": "And I only have $0.05, $0.10,\n$0.25, and $0.27, so, oh well.",
    "start": "1452310",
    "end": "1460950"
  },
  {
    "text": "The first thing we do is check\nto see if total is 0. That means that we're trying to\nfigure out what combination",
    "start": "1460950",
    "end": "1468340"
  },
  {
    "text": "of coins is equal to 0. And of course, there's only\none combination of coins.",
    "start": "1468340",
    "end": "1473890"
  },
  {
    "text": "There are no coins. So that actually is 1. ",
    "start": "1473890",
    "end": "1480610"
  },
  {
    "text": "This case--  this is if we're trying a\nparticular coin that's a",
    "start": "1480610",
    "end": "1487140"
  },
  {
    "text": "little too large to fit\ninto our total. So we wind up going below 0.",
    "start": "1487140",
    "end": "1492660"
  },
  {
    "text": "That means we can't use that\ncoin for this particular total, right. So there are no combinations\nthat work for this.",
    "start": "1492660",
    "end": "1501980"
  },
  {
    "text": "And then this last case is,\nif we're no longer using--",
    "start": "1501980",
    "end": "1507169"
  },
  {
    "text": "if we have no more coins, and\nwe still have stuff that we need to make up, like we still\nhave some value in total, then",
    "start": "1507170",
    "end": "1516429"
  },
  {
    "text": "that means that this particular\ncombination that we're trying out also doesn't\nwork, so we return 0.",
    "start": "1516430",
    "end": "1524179"
  },
  {
    "text": "So that's this case, where we've\ntaken out everything, so",
    "start": "1524180",
    "end": "1531470"
  },
  {
    "text": "our set of coins is the\nempty set, is nothing. Does that make sense?",
    "start": "1531470",
    "end": "1536750"
  },
  {
    "text": " So our first recursive call is\nlooking for the number of ways",
    "start": "1536750",
    "end": "1548300"
  },
  {
    "text": "without the last coin.  That's this case.",
    "start": "1548300",
    "end": "1554870"
  },
  {
    "text": "And all we're doing is we're\npassing in the total we got before, and all the coins except\nfor the largest one, so",
    "start": "1554870",
    "end": "1560170"
  },
  {
    "text": "the last one. So we're stricken one off\nfor each recursive call. ",
    "start": "1560170",
    "end": "1567200"
  },
  {
    "text": "And then the second case here\nis if we do use at least one of the largest coins.",
    "start": "1567200",
    "end": "1573559"
  },
  {
    "text": "In this case, we're just\ngoing to subtract that off the total. And we're going to pass\nin coins as is.",
    "start": "1573560",
    "end": "1581790"
  },
  {
    "text": "Make sense?  And then we just\nreturn the sum. ",
    "start": "1581790",
    "end": "1603780"
  },
  {
    "text": "OK. So not too bad. Everyone follow that code?",
    "start": "1603780",
    "end": "1610280"
  },
  {
    "text": "All right. So this is without doing any\nmemoization, it's just using",
    "start": "1610280",
    "end": "1618480"
  },
  {
    "text": "recursion, breaking it down\ninto two sub-problems and figuring out a solution.",
    "start": "1618480",
    "end": "1624450"
  },
  {
    "text": "But now we're going to use\ndynamic programming to optimize this a little bit.",
    "start": "1624450",
    "end": "1629720"
  },
  {
    "text": "So in this case, we have\nour little memoization dictionary--",
    "start": "1629720",
    "end": "1634970"
  },
  {
    "text": "you notice a pattern here?  Yeah?",
    "start": "1634970",
    "end": "1640757"
  },
  {
    "text": "AUDIENCE: Do you have\nan infinite amount to supply those? PROFESSOR: Yes. So you're assuming that you\nhave an infinite number of",
    "start": "1640758",
    "end": "1647690"
  },
  {
    "text": "$0.27 cent pieces, $0.25\ncent pieces, et cetera. AUDIENCE: [UNINTELLIGIBLE]",
    "start": "1647690",
    "end": "1654272"
  },
  {
    "text": "just add 1's [UNINTELLIGIBLE] ",
    "start": "1654272",
    "end": "1660694"
  },
  {
    "text": "PROFESSOR: And it's possible\nto get below 0. ",
    "start": "1660694",
    "end": "1670070"
  },
  {
    "text": "So let's see. This is all the same, right? No surprises there.",
    "start": "1670070",
    "end": "1675310"
  },
  {
    "text": " But then what we're going to do\nis we're going to memoize",
    "start": "1675310",
    "end": "1682160"
  },
  {
    "text": "on the total that we're trying\nto find and the largest value-- largest currency\npiece that we have.",
    "start": "1682160",
    "end": "1691140"
  },
  {
    "text": "And if it's not in our\ndictionary, then we're going to compute it.",
    "start": "1691140",
    "end": "1696710"
  },
  {
    "start": "1696710",
    "end": "1702340"
  },
  {
    "text": "And then once we get the\nsolution, we're going to memoize it and return it.",
    "start": "1702340",
    "end": "1709470"
  },
  {
    "text": "So let's see how this runs. ",
    "start": "1709470",
    "end": "1720510"
  },
  {
    "text": "It could've been by 4. ",
    "start": "1720510",
    "end": "1725590"
  },
  {
    "text": "That make sense to everyone?  No questions?",
    "start": "1725590",
    "end": "1732470"
  },
  {
    "text": "Wow.  So now let's try a different\nformulation.",
    "start": "1732470",
    "end": "1738190"
  },
  {
    "text": " This one's a little tricky.",
    "start": "1738190",
    "end": "1743835"
  },
  {
    "start": "1743835",
    "end": "1748860"
  },
  {
    "text": "Let's imagine that\nI have a grid.  And down the rows I have\nnumbers up to total.",
    "start": "1748860",
    "end": "1758375"
  },
  {
    "text": " OK, starting from 0. ",
    "start": "1758375",
    "end": "1769340"
  },
  {
    "text": "Across the columns, I have my\ndifferent currency pieces. ",
    "start": "1769340",
    "end": "1785440"
  },
  {
    "text": "So the first two implementations\nwe're going top down, now we're\ngoing bottom up. ",
    "start": "1785440",
    "end": "1792920"
  },
  {
    "text": "The way you read this is, if I\nhave a total of 0, this is a",
    "start": "1792920",
    "end": "1799440"
  },
  {
    "text": "number and my largest currency\npiece is $0.05, or $0.10, or",
    "start": "1799440",
    "end": "1805784"
  },
  {
    "text": "$0.25, or $0.27, it's the number\nof coin combinations I have that will equal\nthis total, right.",
    "start": "1805785",
    "end": "1813090"
  },
  {
    "text": "So in this first row, that's\nmy base case, right.",
    "start": "1813090",
    "end": "1820559"
  },
  {
    "text": " And then down here, we know\nthis is all going to be 0,",
    "start": "1820560",
    "end": "1828820"
  },
  {
    "text": "because if I have\nno coin pieces-- ",
    "start": "1828820",
    "end": "1835170"
  },
  {
    "text": "So now, the bottom-up way is,\nwe're going to fill in this table here.",
    "start": "1835170",
    "end": "1840510"
  },
  {
    "text": " So we're just going to iterate\nthrough all the totals that",
    "start": "1840510",
    "end": "1848090"
  },
  {
    "text": "are possible.  And for each total, we're going\nto iterate through all",
    "start": "1848090",
    "end": "1854250"
  },
  {
    "text": "the largest coin\ndenominations.  Right?",
    "start": "1854250",
    "end": "1860840"
  },
  {
    "text": "And then we're just going\nto do two checks. We're going to look at the\ncurrent total we're looking",
    "start": "1860840",
    "end": "1866539"
  },
  {
    "text": "at, so let's say that we're on\nrow one, so our total is 1.",
    "start": "1866540",
    "end": "1873460"
  },
  {
    "text": "And we're going to subtract the\nlargest denomination of currency that we're\nlooking at.",
    "start": "1873460",
    "end": "1881270"
  },
  {
    "text": "We start out here. So we're going to subtract\n5 from total of 1.",
    "start": "1881270",
    "end": "1889610"
  },
  {
    "text": "And that's less than 0.",
    "start": "1889610",
    "end": "1894870"
  },
  {
    "text": "And when it's less than 0, all\nwe're going to do is carry the number of combinations from the\ncurrent total to the next",
    "start": "1894870",
    "end": "1906690"
  },
  {
    "text": "smallest largest denomination. So if we're at 5 and we know\nwe're less than 0, that means",
    "start": "1906690",
    "end": "1912750"
  },
  {
    "text": "we're going to carry\nthis value over. And we're now going to\ndo the same thing for all these values.",
    "start": "1912750",
    "end": "1918310"
  },
  {
    "text": " Now let's get to an\ninteresting case. So now we're looking at\na total of 5, OK?",
    "start": "1918310",
    "end": "1937700"
  },
  {
    "text": " When our largest coin is $0.05\nand we subtract it from a",
    "start": "1937700",
    "end": "1947240"
  },
  {
    "text": "total of 5, that's not\nless than 0, right? So that means we're going\nto go into the second branch of f statement.",
    "start": "1947240",
    "end": "1955370"
  },
  {
    "text": "So again, the same thing. We're going to look at the\nnumber of ways with the largest coin.",
    "start": "1955370",
    "end": "1961930"
  },
  {
    "text": "And to do that, we're going\nto use our table. We're going to look at the\ncurrent total, which is 5,",
    "start": "1961930",
    "end": "1970790"
  },
  {
    "text": "minus the largest coin\nthat we're looking at, which is $0.05. So that's going to index us\ninto this row because",
    "start": "1970790",
    "end": "1979620"
  },
  {
    "text": "5 minus 5 is 0. And then we're going to\nlook at the current",
    "start": "1979620",
    "end": "1984910"
  },
  {
    "text": "coin, which is $0.05. So that's going to\nbe 1, right?",
    "start": "1984910",
    "end": "1995330"
  },
  {
    "text": "Well, I skipped a step. So we're going to get this\nvalue, right, so this is the number of ways with\nthe largest coin.",
    "start": "1995330",
    "end": "2001900"
  },
  {
    "text": " And then we're going to look at\nthe number of ways without",
    "start": "2001900",
    "end": "2006909"
  },
  {
    "text": "the last coin, so if this is\nthe largest coin that we're looking at, then without it,\nthis is all we have.",
    "start": "2006910",
    "end": "2016000"
  },
  {
    "text": "So that's going to be 0. So 0 plus 1, that's 1. ",
    "start": "2016000",
    "end": "2023860"
  },
  {
    "text": "And then for 10-- so again, this becomes 0.",
    "start": "2023860",
    "end": "2033150"
  },
  {
    "text": "So the next interesting\none is going to be 10. Is everyone following so\nfar what we're doing?",
    "start": "2033150",
    "end": "2038220"
  },
  {
    "text": " This would be 0. ",
    "start": "2038220",
    "end": "2044780"
  },
  {
    "text": "This is going to be 1 plus 0. ",
    "start": "2044780",
    "end": "2053069"
  },
  {
    "text": "And this is going\nto be 1 plus 1. ",
    "start": "2053070",
    "end": "2060340"
  },
  {
    "text": "Making sense? Make an error? No, OK.",
    "start": "2060340",
    "end": "2065399"
  },
  {
    "text": "And then this is going to be\n0 Everyone get the idea? So we're just filling\nin this table.",
    "start": "2065400",
    "end": "2071874"
  },
  {
    "start": "2071874",
    "end": "2080179"
  },
  {
    "text": "What's that? AUDIENCE: [INAUDIBLE] PROFESSOR: Here?",
    "start": "2080179",
    "end": "2086778"
  },
  {
    "text": "AUDIENCE: There's only one\nway to make 10 plus 5. PROFESSOR: Because--",
    "start": "2086778",
    "end": "2092060"
  },
  {
    "text": "the smallest-- so if I had 1 here, like so I\nwas using a one piece, then",
    "start": "2092060",
    "end": "2098530"
  },
  {
    "text": "this would be 2. But because we only have\n5, there's only",
    "start": "2098530",
    "end": "2104440"
  },
  {
    "text": "one way to make 10. Two 5's. Make sense?",
    "start": "2104440",
    "end": "2112234"
  },
  {
    "text": "AUDIENCE: [UNINTELLIGIBLE] because you can either use\none 10 or two 5's.",
    "start": "2112234",
    "end": "2117510"
  },
  {
    "text": "PROFESSOR: Yes, exactly. AUDIENCE: So if we're using\nthe table that as--",
    "start": "2117510",
    "end": "2124250"
  },
  {
    "text": "so you have $0.05 as the largest\ncoin, so there's only one way of doing it using $0.05\nas the largest coin?",
    "start": "2124250",
    "end": "2130542"
  },
  {
    "text": "How come that 1 doesn't go all\nthe way across the row? Because if you have $0.25\nas the largest coin you could use $0.05's.",
    "start": "2130542",
    "end": "2137580"
  },
  {
    "text": "PROFESSOR: You know what,\nyou're right.  Made an error.",
    "start": "2137580",
    "end": "2143054"
  },
  {
    "start": "2143054",
    "end": "2149289"
  },
  {
    "text": "Actually, that would be 0. ",
    "start": "2149289",
    "end": "2157772"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: What's that?",
    "start": "2157772",
    "end": "2163261"
  },
  {
    "text": "Yeah, but-- ",
    "start": "2163261",
    "end": "2171744"
  },
  {
    "text": "what can I say? It can be confusing. ",
    "start": "2171744",
    "end": "2177290"
  },
  {
    "text": "To prove that this crazy thing\nworks, let's run it. ",
    "start": "2177290",
    "end": "2189019"
  },
  {
    "text": "So let's expand this. Actually, I'm going\nto use this.",
    "start": "2189020",
    "end": "2195080"
  },
  {
    "text": " So all three versions--",
    "start": "2195080",
    "end": "2200190"
  },
  {
    "start": "2200190",
    "end": "2207339"
  },
  {
    "text": "what, did I make a mistake? AUDIENCE: No, it's just how\nyou expanded the window. PROFESSOR: Oh, you like that?",
    "start": "2207340",
    "end": "2215820"
  },
  {
    "text": "AUDIENCE: That's what we-- well, like Tracy's quote is\nalways really, really small.",
    "start": "2215820",
    "end": "2222086"
  },
  {
    "text": "But. AUDIENCE: No worries.  PROFESSOR: It's a program\ncalled Divvy, if you're",
    "start": "2222086",
    "end": "2228370"
  },
  {
    "text": "interested. I think it's like $10 on the\nApps store or something, or maybe it's $5.00.",
    "start": "2228370",
    "end": "2234125"
  },
  {
    "text": "It just allows you to do those\nlittle grid things, so if you have lots of windows\nand stuff--",
    "start": "2234125",
    "end": "2239240"
  },
  {
    "text": " and if you need to increase\nyour font size, that's a",
    "start": "2239240",
    "end": "2244359"
  },
  {
    "text": "little bit more involved\nwith Python. Anyway, so they all give the\nsame output except for the",
    "start": "2244360",
    "end": "2250240"
  },
  {
    "text": "number of steps that they take,\nso the initial one took 855, the one with the\nmemoization took 209 steps,",
    "start": "2250240",
    "end": "2258099"
  },
  {
    "text": "and the one without memoization\nbut from bottom up took only 337 steps, so--",
    "start": "2258100",
    "end": "2264010"
  },
  {
    "text": " it's just-- it's three different\nways of attacking",
    "start": "2264010",
    "end": "2270700"
  },
  {
    "text": "the same problem. And objectively, the last two\nare better than the first one.",
    "start": "2270700",
    "end": "2277960"
  },
  {
    "text": " We might think of cases where\nwe would want to use say the",
    "start": "2277960",
    "end": "2284650"
  },
  {
    "text": "table-based method over their\nrecursion method. Like if we had like lots of\ncombinations to explore or",
    "start": "2284650",
    "end": "2291740"
  },
  {
    "text": "some kind of situation where\nyou got into a really deep recursion that was too deep for\nPython to handle and we",
    "start": "2291740",
    "end": "2298040"
  },
  {
    "text": "got kicked out like we did for\nthe number of robot paths. So that would be kind of like a\ncriteria for which algorithm",
    "start": "2298040",
    "end": "2304590"
  },
  {
    "text": "you would choose\nover the other. ",
    "start": "2304590",
    "end": "2309845"
  }
]