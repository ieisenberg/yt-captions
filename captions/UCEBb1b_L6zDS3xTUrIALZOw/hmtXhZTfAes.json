[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6940"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6940",
    "end": "13490"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13490",
    "end": "19320"
  },
  {
    "text": "ocw.mit.edu. PROFESSOR: OK so we're\ngoing to test it.",
    "start": "19320",
    "end": "27010"
  },
  {
    "start": "20000",
    "end": "356000"
  },
  {
    "text": "Here's testOne. It just says for name and range\n10, I'm going to build",
    "start": "27010",
    "end": "32360"
  },
  {
    "text": "some nodes, put in a few edges,\nand then I'm going to print the graph. And all I really want to show\nyou here, is that if we run it",
    "start": "32360",
    "end": "41940"
  },
  {
    "text": "for digraph or we run\nit for graph, we'll get something different. ",
    "start": "41940",
    "end": "48560"
  },
  {
    "text": "Yes, I'm happy to\nsave the source. Oh, and now the syntax.",
    "start": "48560",
    "end": "59732"
  },
  {
    "text": " It was valid last time I looked,\nwhat have we done",
    "start": "59733",
    "end": "65449"
  },
  {
    "text": "wrong here? I edit something badly?",
    "start": "65450",
    "end": "70899"
  },
  {
    "text": "Sort of looks valid\nto me, doesn't it? We'll retype it. ",
    "start": "70900",
    "end": "78900"
  },
  {
    "text": "Yes, we'll save. Nope. Well, it's one of those\ndays, isn't it?",
    "start": "78900",
    "end": "86450"
  },
  {
    "text": "All right this is a good\ndebugging exercise for us. Let's think about how\nwe go and find this.",
    "start": "86450",
    "end": "92875"
  },
  {
    "text": "I'm sure you've all had\nthis sort of problem. Well the first thing to do is I\nthink I'll just comment out",
    "start": "92875",
    "end": "98690"
  },
  {
    "text": "all of this. ",
    "start": "98690",
    "end": "106270"
  },
  {
    "text": "Let's see if I still\nget an error. ",
    "start": "106270",
    "end": "112130"
  },
  {
    "text": "I do. All right, well that suggests\nthat, that wasn't the problem, so I can put it back. ",
    "start": "112130",
    "end": "119590"
  },
  {
    "text": "Now it shows a problem all\nthe way down there. ",
    "start": "119590",
    "end": "125280"
  },
  {
    "text": "So let's see what's\ngoing on here. Or maybe, I'll just skip this,\nbut doubtless I'll get in",
    "start": "125280",
    "end": "131300"
  },
  {
    "text": "trouble if I do. ",
    "start": "131300",
    "end": "138448"
  },
  {
    "text": "So let's see. I must have just made a sloppy\nediting error somewhere this",
    "start": "138448",
    "end": "145560"
  },
  {
    "text": "morning in commenting things\nout for the lecture. ",
    "start": "145560",
    "end": "156709"
  },
  {
    "text": "Well, I think what we're going\nto do, for the moment, is move",
    "start": "156710",
    "end": "162180"
  },
  {
    "text": "on and hope it goes away. Now that seems silly. Sorry about this everybody.",
    "start": "162180",
    "end": "170450"
  },
  {
    "text": "People should look with me, and\nsomeone may see it more quickly than I can. In fact, I'm hoping someone\nsees it more",
    "start": "170450",
    "end": "177630"
  },
  {
    "text": "quickly than I can. ",
    "start": "177630",
    "end": "207580"
  },
  {
    "text": "We've now got a microphone,\nand the embarrassment of a code with syntax error,\n[UNINTELLIGIBLE].",
    "start": "207580",
    "end": "212870"
  },
  {
    "text": "MALE SPEAKER: You've\ngot a sign. For some reason it wasn't\non the schedule, so-- PROFESSOR: Well just\nbecause we've been",
    "start": "212870",
    "end": "218140"
  },
  {
    "text": "teaching at 10 o'clock. MALE SPEAKER: Yeah, I know. Yeah. [UNINTELLIGIBLE]. PROFESSOR: February. There's no reason to suspect\nthat we would teach at 10",
    "start": "218140",
    "end": "224780"
  },
  {
    "text": "o'clock today. MALE SPEAKER: I actually\nlooked. I double checked. ",
    "start": "224780",
    "end": "233050"
  },
  {
    "text": "PROFESSOR: Well this is\nembarrassing, folks. And I wish one of you would\nbail me out by telling me where my syntax error is.",
    "start": "233050",
    "end": "238345"
  },
  {
    "start": "238345",
    "end": "246900"
  },
  {
    "text": "Well random looks OK, right? Node looks OK. ",
    "start": "246900",
    "end": "259230"
  },
  {
    "text": "And it gets more complicated. MALE SPEAKER: Hey professor,\ncan you turn on the transmitter?",
    "start": "259230",
    "end": "264310"
  },
  {
    "text": "PROFESSOR: No. [LAUGHTER] PROFESSOR: OK, I'll turn\non the transmitter. ",
    "start": "264310",
    "end": "269760"
  },
  {
    "text": "But I'm really focused on a\ndifferent problem right now. ",
    "start": "269760",
    "end": "280940"
  },
  {
    "text": "Guys help!  Where are my TAs? ",
    "start": "280940",
    "end": "293510"
  },
  {
    "text": "Why does it keep doing\nthat to me? Maybe there's something just\nfunny going on here.",
    "start": "293510",
    "end": "300020"
  },
  {
    "text": "Pardon? AUDIENCE: Restart IDLE. PROFESSOR: Restarting IDLE? You think maybe that's\nthe issue?",
    "start": "300020",
    "end": "306319"
  },
  {
    "text": "We could try that. ",
    "start": "306320",
    "end": "332920"
  },
  {
    "text": "Ha! So it looks like IDLE was\njust in some ugly state.",
    "start": "332920",
    "end": "338930"
  },
  {
    "text": "Let's hope. ",
    "start": "338930",
    "end": "356880"
  },
  {
    "start": "356000",
    "end": "721000"
  },
  {
    "text": "Yes, all right, so I\ndidn't have a bug. It was just IDLE had a bug.",
    "start": "356880",
    "end": "361900"
  },
  {
    "text": "All right, phew. But we did squander\nten minutes. Oh well. So we have the graph, and you\ncan see when we look at a",
    "start": "361900",
    "end": "369050"
  },
  {
    "text": "graph, we have a node from 1\nto 2, an edge from 1 to 2, from 1 to 1, et cetera.",
    "start": "369050",
    "end": "375030"
  },
  {
    "text": "And that's the digraph. When we look at the graph, we'll\nsee that in fact we have",
    "start": "375030",
    "end": "380600"
  },
  {
    "text": "a lot more nodes, because\neverything goes in both directions. But that's what we expected--",
    "start": "380600",
    "end": "387900"
  },
  {
    "text": "nothing very interesting. All I want you to do is notice\nthe difference here between graphs and digraphs.",
    "start": "387900",
    "end": "395730"
  },
  {
    "text": "Now getting to the whole point,\nonce we have this",
    "start": "395730",
    "end": "402450"
  },
  {
    "text": "mechanism set up to think about\ngraphs, we can now think about interesting problems\nand formulate",
    "start": "402450",
    "end": "409010"
  },
  {
    "text": "them as graph problems. And I want to list a few of the\ninteresting problems, and then we'll look at how to\nsolve some of them.",
    "start": "409010",
    "end": "416480"
  },
  {
    "text": "So probably the most common\ngraph problem that people solve, is called the shortest\npath problem.",
    "start": "416480",
    "end": "421920"
  },
  {
    "text": " We talked about this\nbriefly last time.",
    "start": "421920",
    "end": "428590"
  },
  {
    "text": "The notion here is for some pair\nof nodes, n1 and n2, we",
    "start": "428590",
    "end": "434210"
  },
  {
    "text": "want to find the shortest\nsequence of edges that connects those two nodes.",
    "start": "434210",
    "end": "439390"
  },
  {
    "text": " All right? So that's very straightforward.",
    "start": "439390",
    "end": "445110"
  },
  {
    "text": "Then there is the shortest\nweighted path, where instead",
    "start": "445110",
    "end": "458389"
  },
  {
    "text": "of trying to find the shortest\nsequence of edges, we want to find the smallest\ntotal weight.",
    "start": "458390",
    "end": "466610"
  },
  {
    "text": "So it may be that we traverse\na few extra edges, but since they have a shorter\nweights, we end up",
    "start": "466610",
    "end": "472700"
  },
  {
    "text": "getting a shorter path.  So we might indirect to\ndo the shortest path.",
    "start": "472700",
    "end": "481409"
  },
  {
    "text": "This is probably the more\ncommon problem. So for example, that's the\nproblem that Google Maps",
    "start": "481410",
    "end": "489360"
  },
  {
    "text": "solves, when you ask it to give\nyou driving directions.",
    "start": "489360",
    "end": "496580"
  },
  {
    "text": "And you'll notice when you use\nsomething like Google Maps or MapQuest, you can tell it to\nminimize the time, in which",
    "start": "496580",
    "end": "506990"
  },
  {
    "text": "case maybe it will route you\non a freeway, where you can drive at 80 miles an hour, even\nthough you drive a few",
    "start": "506990",
    "end": "513909"
  },
  {
    "text": "extra miles. Or you can tell it to minimize\nthe distance in which case it",
    "start": "513909",
    "end": "519789"
  },
  {
    "text": "may take you on these crummy\nlittle surface roads where you have to drive slowly, but you'll\ncover fewer miles and",
    "start": "519789",
    "end": "526180"
  },
  {
    "text": "use less gas. So you get to tell it which set\nof weights you care about,",
    "start": "526180",
    "end": "532220"
  },
  {
    "text": "and then it finds\nyou the shortest path, given those weights.",
    "start": "532220",
    "end": "537990"
  },
  {
    "text": "We'll come back to this since\nwe're going to look at some code to implement it. Another slightly more\ncomplicated problem to",
    "start": "537990",
    "end": "546079"
  },
  {
    "text": "understand is finding cliques. ",
    "start": "546080",
    "end": "552279"
  },
  {
    "text": "So to find a clique, we're\nlooking to find a set of",
    "start": "552280",
    "end": "557460"
  },
  {
    "text": "nodes, such that there exists\na path connecting",
    "start": "557460",
    "end": "574800"
  },
  {
    "text": "each node in the set. ",
    "start": "574800",
    "end": "584730"
  },
  {
    "text": "So you can think of this\nas similar to,",
    "start": "584730",
    "end": "590180"
  },
  {
    "text": "say a social clique-- who your friends are. It's a group of nodes or group\nof people that somehow can get",
    "start": "590180",
    "end": "599779"
  },
  {
    "text": "to each other. It's not saying you can't\nget outside the clique. But it is guaranteeing that from\nany member of the clique,",
    "start": "599780",
    "end": "607910"
  },
  {
    "text": "you can reach any other\nmember of the clique. ",
    "start": "607910",
    "end": "618329"
  },
  {
    "text": "And so well, we'll look at some\nexamples of where finding",
    "start": "618330",
    "end": "623610"
  },
  {
    "text": "a clique is useful. And the final kind of problem\nI want to mention is the",
    "start": "623610",
    "end": "636420"
  },
  {
    "text": "minimum cut problem-- often abbreviated mincut.",
    "start": "636420",
    "end": "641870"
  },
  {
    "text": "So the problem here, is given a\ngraph, and given two sets of",
    "start": "641870",
    "end": "650300"
  },
  {
    "text": "nodes, you want to find the\nminimum number of edges such",
    "start": "650300",
    "end": "671649"
  },
  {
    "text": "that if those edges are removed,\nthe two sets are",
    "start": "671650",
    "end": "679780"
  },
  {
    "text": "disconnected. ",
    "start": "679780",
    "end": "685020"
  },
  {
    "text": "i.e. you can't get from a member\nof one set to a member of the other set. ",
    "start": "685020",
    "end": "696089"
  },
  {
    "text": "This is often a question\nthat gets asked. For example, imagine that you\nwere the government of Syria",
    "start": "696090",
    "end": "703759"
  },
  {
    "text": "and you want to ensure\nthat nobody can post a video on YouTube.",
    "start": "703760",
    "end": "709200"
  },
  {
    "text": "You would take the set of nodes\nin Syria, and you would take the set of nodes probably\noutside Syria, and ask what's",
    "start": "709200",
    "end": "717580"
  },
  {
    "text": "the minimum number of\ncommunication links you'd have to cut to ensure that you can't\nget from a node in Syria",
    "start": "717580",
    "end": "725230"
  },
  {
    "start": "721000",
    "end": "941000"
  },
  {
    "text": "to a node outside Syria.  People who do things like plan\npower lines worry about that.",
    "start": "725230",
    "end": "734330"
  },
  {
    "text": "They want to say what's the\nminimum number of links such that if they're cut, you can't\nget any electricity from this",
    "start": "734330",
    "end": "741220"
  },
  {
    "text": "power plant to say, this city. And they'll typically design\ntheir network with redundancy",
    "start": "741220",
    "end": "748050"
  },
  {
    "text": "in it, so that the mincut\nis not too small. ",
    "start": "748050",
    "end": "753550"
  },
  {
    "text": "And so people frequently are\nworried about mincut problems, and trying to see\nwhat that is.",
    "start": "753550",
    "end": "761390"
  },
  {
    "text": "All right, now let's look at\na couple of examples, in",
    "start": "761390",
    "end": "766470"
  },
  {
    "text": "slightly more detail. So what we see here is a\npictorial representation of a",
    "start": "766470",
    "end": "776880"
  },
  {
    "text": "weighted graph generated by\nthe Centers for Disease Control, CDC, in Atlanta in 2003\nwhen they were studying",
    "start": "776880",
    "end": "785740"
  },
  {
    "text": "an outbreak of tuberculosis\nin the United States-- a virulent and bad infectious\ndisease.",
    "start": "785740",
    "end": "793720"
  },
  {
    "text": "Each node, and you can see\nthese little dots are the nodes, represents a person.",
    "start": "793720",
    "end": "804480"
  },
  {
    "text": "And each node is labeled by a\ncolor, indicating whether the person has active tuberculosis,\nhas tested",
    "start": "804480",
    "end": "813220"
  },
  {
    "text": "positive for exposure, but\ndoesn't have the disease, or",
    "start": "813220",
    "end": "818339"
  },
  {
    "text": "tested negative for exposure,\nor not been tested.",
    "start": "818340",
    "end": "823530"
  },
  {
    "text": "So you'll remember when we\nlooked last time at class node, and asked why did I bother\ncreating a class for",
    "start": "823530",
    "end": "831110"
  },
  {
    "text": "something so simple, it was\nbecause I said well maybe we would add extra properties\nto a node.",
    "start": "831110",
    "end": "837090"
  },
  {
    "text": "So now in some sense these\ncolors would be easy to add. So I could add to class node--",
    "start": "837090",
    "end": "844690"
  },
  {
    "text": "well I could attribute\ncolor, and call it red or blue or green-- or more likely an attribute\nsaying TB state, which would",
    "start": "844690",
    "end": "852640"
  },
  {
    "text": "indicate active not\nactive, et cetera. The edges, which you can see\nhere, represent connections",
    "start": "852640",
    "end": "862430"
  },
  {
    "text": "among pairs of people. ",
    "start": "862430",
    "end": "869400"
  },
  {
    "text": "What I didn't bother, you can't\nsee on these pictures, is the edges are actually\nweighted.",
    "start": "869400",
    "end": "874980"
  },
  {
    "text": "And the weights there\nare about how closely people are connected.",
    "start": "874980",
    "end": "880320"
  },
  {
    "text": "And there are really only two\nweights I think they used: close, someone who say lives in\nyour house or works in the",
    "start": "880320",
    "end": "887790"
  },
  {
    "text": "same office, or casual, a\nneighbor you might have encountered, but you wouldn't\nexpect to necessarily",
    "start": "887790",
    "end": "894209"
  },
  {
    "text": "see them every day. So I've taken a fairly\ncomplicated set of information",
    "start": "894210",
    "end": "900940"
  },
  {
    "text": "and represented it as a graph. Now what are some of the\ninteresting graph theoretic",
    "start": "900940",
    "end": "907889"
  },
  {
    "text": "questions we might proceed\nto ask about this? So an important question they\ntypically ask when diseases",
    "start": "907890",
    "end": "917050"
  },
  {
    "text": "break out unexpectedly is, is\nthere an index patient?",
    "start": "917050",
    "end": "923060"
  },
  {
    "text": "The index patient is the\npatient who brought the disease into the community--",
    "start": "923060",
    "end": "929250"
  },
  {
    "text": "so somebody who visited some\ncountry, picked up tuberculosis, flew back to their\nneighborhood in the US",
    "start": "929250",
    "end": "936129"
  },
  {
    "text": "and started spreading it. ",
    "start": "936130",
    "end": "941160"
  },
  {
    "start": "941000",
    "end": "1011000"
  },
  {
    "text": "How would we formulate that\nas a graph question? Again, quite simply.",
    "start": "941160",
    "end": "948020"
  },
  {
    "text": "We would say does there exist a\nnode such that node has TB,",
    "start": "948020",
    "end": "965630"
  },
  {
    "text": "or maybe not even that,\nno, let's simplify it.",
    "start": "965630",
    "end": "971230"
  },
  {
    "text": "You might say, \"or tested\npositive\" because maybe you can communicate it without\nhaving it--",
    "start": "971230",
    "end": "976940"
  },
  {
    "text": "has TB and is connected\nto every node with TB.",
    "start": "976940",
    "end": "990840"
  },
  {
    "text": " Now this doesn't guarantee\nthat the",
    "start": "990840",
    "end": "997350"
  },
  {
    "text": "patient is an index patient. But if there is no such patient,\nno such node, then",
    "start": "997350",
    "end": "1003410"
  },
  {
    "text": "you know that there's not a\nsingle source of this disease in the community. ",
    "start": "1003410",
    "end": "1011460"
  },
  {
    "start": "1011000",
    "end": "1171000"
  },
  {
    "text": "How would we change the graph to\nmodel it in a more detailed way, and remember this is all\nabout modeling, so that we",
    "start": "1011460",
    "end": "1019640"
  },
  {
    "text": "could ask a question\nor more precisely? ",
    "start": "1019640",
    "end": "1026589"
  },
  {
    "text": "Well we'd have to change to a\nmore complex coloring scheme, if you will, in which we'd\ninclude the date of when",
    "start": "1026589",
    "end": "1035400"
  },
  {
    "text": "somebody acquired the disease,\nor tested positive.",
    "start": "1035400",
    "end": "1040439"
  },
  {
    "text": "And then we could ask those\nkinds of questions in a little bit more detail. But again once we've built the\nmodel, we can then go and ask",
    "start": "1040440",
    "end": "1049049"
  },
  {
    "text": "a lot of interesting\nquestions. By the way the answer to\nthis question, for",
    "start": "1049050",
    "end": "1054370"
  },
  {
    "text": "this graph, is almost. ",
    "start": "1054370",
    "end": "1062390"
  },
  {
    "text": "There is an index patient that's\nconnected to every node",
    "start": "1062390",
    "end": "1067920"
  },
  {
    "text": "in the graph, except for the\nnodes in this black circle. ",
    "start": "1067920",
    "end": "1073980"
  },
  {
    "text": "They are not connected\nto any index patient.",
    "start": "1073980",
    "end": "1080780"
  },
  {
    "text": "So the CDC actually did that\nanalysis, and they reached that conclusion that there\ndidn't seem to be.",
    "start": "1080780",
    "end": "1087620"
  },
  {
    "text": "And then later, it came to\nlight, in fact, that this particular graph is\nmissing an edge.",
    "start": "1087620",
    "end": "1093640"
  },
  {
    "text": " Somebody had moved from\nneighborhood A to neighborhood",
    "start": "1093640",
    "end": "1099250"
  },
  {
    "text": "B, and they had not kept\ntrack of that. And if they had, they would have\ndiscovered there was a",
    "start": "1099250",
    "end": "1104720"
  },
  {
    "text": "link that's missing--\nan edge that's missing from this graph-- which in fact would've connected\neverybody to the",
    "start": "1104720",
    "end": "1111000"
  },
  {
    "text": "index patient. It was an interesting\nquestion. They only found that, because\nthey were puzzled about this",
    "start": "1111000",
    "end": "1118600"
  },
  {
    "text": "tiny little black circle\nout here, and started investigating all the people\nin the black circle, and",
    "start": "1118600",
    "end": "1124290"
  },
  {
    "text": "discovered that one of\nthem had moved from one place to another.",
    "start": "1124290",
    "end": "1130350"
  },
  {
    "text": "What's another question you\nmight ask once you've built this model? Well suppose this is the current\nstate of the world,",
    "start": "1130350",
    "end": "1138230"
  },
  {
    "text": "and I want to reduce the spread\nof the disease, by",
    "start": "1138230",
    "end": "1143340"
  },
  {
    "text": "vaccinating uninfected people\nso that they don't contract tuberculosis.",
    "start": "1143340",
    "end": "1149389"
  },
  {
    "text": "But I have a minimum, it's\nexpensive to do this, I only have so much vaccine.",
    "start": "1149390",
    "end": "1155280"
  },
  {
    "text": "Who should get it? What's the graph theory problem\nthat I would solve to",
    "start": "1155280",
    "end": "1161460"
  },
  {
    "text": "address the question of what's\nthe best way to allocate my limited supply a vaccine? ",
    "start": "1161460",
    "end": "1169670"
  },
  {
    "text": "Exactly. I, by the way, have much\nbetter candy now. So I think that's where the\nminimum cut came from.",
    "start": "1169670",
    "end": "1179850"
  },
  {
    "start": "1171000",
    "end": "1261000"
  },
  {
    "text": "Well, all right. It's better for eating. It's just worse for throwing. ",
    "start": "1179850",
    "end": "1187030"
  },
  {
    "text": "That's easier to throw. All right. It's the minimum cut problem.",
    "start": "1187030",
    "end": "1193610"
  },
  {
    "text": "I take the people who are\nalready infected, view them as",
    "start": "1193610",
    "end": "1199610"
  },
  {
    "text": "one set of nodes. I take the people who are not\ninfected, and view them as another set of nodes, find the\nedges that I need to cut to",
    "start": "1199610",
    "end": "1209400"
  },
  {
    "text": "separate them, and then\nvaccinated somebody on one side of the edge, so that they\ndon't contract the disease.",
    "start": "1209400",
    "end": "1216550"
  },
  {
    "text": "So again a nice, easily\nformalized, problem. All right, so that's\nan example.",
    "start": "1216550",
    "end": "1224590"
  },
  {
    "text": "Let's look at another example. Let's think about the shortest\npath problem here.",
    "start": "1224590",
    "end": "1230730"
  },
  {
    "text": "And we'll do that by thinking\nabout social networks. So I suspect that at least a few\nof you have used Facebook,",
    "start": "1230730",
    "end": "1238580"
  },
  {
    "text": "and you have friends-- some of you more, than others. ",
    "start": "1238580",
    "end": "1246759"
  },
  {
    "text": "I see people laughing. This is someone who probably has\ntwo friends, and is said. I don't know, or 1,000\nfriends and is happy.",
    "start": "1246760",
    "end": "1255029"
  },
  {
    "text": "Who knows-- I don't want to know please.  And I'm not going to\ntell you how many",
    "start": "1255030",
    "end": "1260240"
  },
  {
    "text": "friends I have either. But you might ask the question,\nsuppose you wanted",
    "start": "1260240",
    "end": "1269790"
  },
  {
    "start": "1261000",
    "end": "1371000"
  },
  {
    "text": "to reach Donald Trump -- erstwhile Republican, vice\npresidential candidate, or presidential candidate.",
    "start": "1269790",
    "end": "1276510"
  },
  {
    "text": "Say is there a connection from\nyou to Donald Trump? Do you have a friend, who has\na friend, who has a friend,",
    "start": "1276510",
    "end": "1282140"
  },
  {
    "text": "who is a friend with\nDonald Trump? Or for Barack Obama, or\nanyone else you'd ask.",
    "start": "1282140",
    "end": "1287480"
  },
  {
    "text": "Well what's the shortest path? How many friends do you\nhave to go through?",
    "start": "1287480",
    "end": "1294789"
  },
  {
    "text": "This is what's called the six\ndegrees of separation problem. In the 1990s, the playwright\nJohn Guare published a play",
    "start": "1294790",
    "end": "1303840"
  },
  {
    "text": "called Six Degrees of\nSeparation, under the slightly dubious premise, that everybody\nin the world was",
    "start": "1303840",
    "end": "1310779"
  },
  {
    "text": "connected to everybody\nelse in the world with at most six hops. If you took all the people you\nknew, all the people they",
    "start": "1310780",
    "end": "1317070"
  },
  {
    "text": "knew, et cetera, you could reach\nany person in the world in six phone calls--",
    "start": "1317070",
    "end": "1322100"
  },
  {
    "text": "say any person who\nhas a phone. I don't know whether that's\ntrue, but this is the whole",
    "start": "1322100",
    "end": "1328630"
  },
  {
    "text": "notion of a social network. So if we wanted to look at that\nin Facebook, we could",
    "start": "1328630",
    "end": "1334880"
  },
  {
    "text": "either assume that the friend\nrelation is symmetric-- if I'm your friend, you're\nmy friend, which it is.",
    "start": "1334880",
    "end": "1342260"
  },
  {
    "text": "Or you could imagine a different\nmodel, in which it's asymmetric. If it's symmetric you\nhave a graph.",
    "start": "1342260",
    "end": "1348669"
  },
  {
    "text": "If it's asymmetric you have\na directed graph. And then you just ask\nthe question.",
    "start": "1348670",
    "end": "1354950"
  },
  {
    "text": "What's the shortest\npath from you to whomever you care about?",
    "start": "1354950",
    "end": "1360149"
  },
  {
    "text": "And you get that. You could imagine that Facebook\nalready knows the",
    "start": "1360150",
    "end": "1366030"
  },
  {
    "text": "answer to that question, but\njust won't tell you. But they'll sell it to somebody\nwho has enough money.",
    "start": "1366030",
    "end": "1372880"
  },
  {
    "text": "All right, So how does Facebook\nsolve this problem?",
    "start": "1372880",
    "end": "1378370"
  },
  {
    "text": "They have a very simple piece of\ncode, which we'll now look at which solves the\nshortest path. ",
    "start": "1378370",
    "end": "1390310"
  },
  {
    "text": "So let's go back. ",
    "start": "1390310",
    "end": "1399000"
  },
  {
    "text": "So here's a recursive implementation of shortest path.",
    "start": "1399000",
    "end": "1406640"
  },
  {
    "text": "Comment this out while I'm\nin the neighborhood. ",
    "start": "1406640",
    "end": "1413890"
  },
  {
    "text": "It takes the graph, a start node\nand end node to print,",
    "start": "1413890",
    "end": "1419800"
  },
  {
    "text": "and this extra argument\ncall visited. We'll see why that's\ngets used.",
    "start": "1419800",
    "end": "1425200"
  },
  {
    "text": "And we'll think about\nthe algorithm. This particular algorithm is\nwhat's called a depth first",
    "start": "1425200",
    "end": "1432990"
  },
  {
    "text": "search algorithm. It's a recursive depth\nfirst search. We've seen these before,\noften abbreviated DFS.",
    "start": "1432990",
    "end": "1453184"
  },
  {
    "text": " So if you think about having\na graph of a bunch of nodes",
    "start": "1453185",
    "end": "1460110"
  },
  {
    "text": "connected to one another, just\nfor fun we'll say it does",
    "start": "1460110",
    "end": "1470140"
  },
  {
    "text": "something like this. What depth first search does\nis it starts at the source",
    "start": "1470140",
    "end": "1477040"
  },
  {
    "text": "node for the shortest path,\nlet's called it this one, it",
    "start": "1477040",
    "end": "1483030"
  },
  {
    "text": "first visits one child, then\nvisits all the children of",
    "start": "1483030",
    "end": "1488080"
  },
  {
    "text": "those children. This one has no children.",
    "start": "1488080",
    "end": "1494160"
  },
  {
    "text": "Visits this child, picks one of\nits children, visits all of",
    "start": "1494160",
    "end": "1499200"
  },
  {
    "text": "its children-- let's say it\nhad another one here-- and goes on until it's done.",
    "start": "1499200",
    "end": "1506330"
  },
  {
    "text": "And then it back tracks, comes\nback and takes the next child.",
    "start": "1506330",
    "end": "1512529"
  },
  {
    "text": "Then we have to be a little bit\ncareful about the circle.  So to summarize it, first thing\nwe have to say is the",
    "start": "1512530",
    "end": "1528059"
  },
  {
    "text": "recursion ends, when\nstart equals end.",
    "start": "1528060",
    "end": "1541060"
  },
  {
    "text": "That is to say I've called it\nand I've asked is there a path",
    "start": "1541060",
    "end": "1547290"
  },
  {
    "text": "from A to A, and the answer\nis yes, there is. I'm already there. Now you could argue, and in some\nformulations the answer",
    "start": "1547290",
    "end": "1554940"
  },
  {
    "text": "is not necessarily, you'd say\nthere's only a path if there's an edge from A to A. But I've\nchosen to make the simpler",
    "start": "1554940",
    "end": "1563370"
  },
  {
    "text": "assertion that if you want to\nget to A, and you're already there, you're done. Kind of seems reasonable.",
    "start": "1563370",
    "end": "1570360"
  },
  {
    "text": "So then the recursive part,\nstarts by choosing one child",
    "start": "1570360",
    "end": "1589059"
  },
  {
    "text": "of the node you're\ncurrently at. And it keeps doing that until\neither it reaches a node with",
    "start": "1589060",
    "end": "1598179"
  },
  {
    "text": "no children, or it reaches the\nnode you're trying to get to,",
    "start": "1598180",
    "end": "1607280"
  },
  {
    "text": "or, and here's an important\npart, it reaches a node it's already seen.",
    "start": "1607280",
    "end": "1613980"
  },
  {
    "text": "And that's what visited\nis about. Because I want to make sure\nthat when I explore this",
    "start": "1613980",
    "end": "1620100"
  },
  {
    "text": "graph, I don't go from here to\nhere to here to here to here to here ad nauseum, because\nI'm stuck in",
    "start": "1620100",
    "end": "1626350"
  },
  {
    "text": "what's called a cycle. ",
    "start": "1626350",
    "end": "1634169"
  },
  {
    "text": "You have to avoid the cycles. ",
    "start": "1634170",
    "end": "1642250"
  },
  {
    "text": "Once it's got to a node that has\nno children, if that's not",
    "start": "1642250",
    "end": "1648110"
  },
  {
    "text": "the node it's trying to get to,\nit back tracks and takes the next child of the\nnode it was at.",
    "start": "1648110",
    "end": "1658885"
  },
  {
    "start": "1658885",
    "end": "1666840"
  },
  {
    "text": "And in that way, it\nsystematically explores all",
    "start": "1666840",
    "end": "1672200"
  },
  {
    "text": "possible paths, and along the\nway, it chooses the best one.",
    "start": "1672200",
    "end": "1678799"
  },
  {
    "text": "So we can look at\nthe code here.  I've just commented out\nsomething we'll look at later",
    "start": "1678800",
    "end": "1685970"
  },
  {
    "start": "1681000",
    "end": "1911000"
  },
  {
    "text": "just as we try and instrument\nit to see how fast it's working.",
    "start": "1685970",
    "end": "1691380"
  },
  {
    "text": "I've got a debugging statement\njust to say whether I'm going to print what I've been\nasked to do, in",
    "start": "1691380",
    "end": "1696865"
  },
  {
    "text": "case it's not working. And then the real work starts. I get the original path is just\nthe node we're starting",
    "start": "1696865",
    "end": "1705060"
  },
  {
    "text": "at, if start is end, I stop. ",
    "start": "1705060",
    "end": "1710450"
  },
  {
    "text": "If I get to here, or say\nshortest equals none, I haven't found any paths yet. So there is no shortest path.",
    "start": "1710450",
    "end": "1718000"
  },
  {
    "text": "And then for node in the\nchildren of start, if I",
    "start": "1718000",
    "end": "1724350"
  },
  {
    "text": "haven't already visited\nthe node-- this is to avoid cycles-- I create a visited list that\ncontains whatever used to",
    "start": "1724350",
    "end": "1732910"
  },
  {
    "text": "contain plus the node. Notice that I'm creating a new\nlist here, rather than",
    "start": "1732910",
    "end": "1740080"
  },
  {
    "text": "mutating the old list. And that's because when I\nunravel my recursion, and back",
    "start": "1740080",
    "end": "1745929"
  },
  {
    "text": "track to where I was, I don't\nwant to have think I visited something I haven't\nvisited, right?",
    "start": "1745930",
    "end": "1753040"
  },
  {
    "text": "If I had only one list, and I\nmutated each time, then as I go down the recursion and back\nup the recursion, I'm always",
    "start": "1753040",
    "end": "1759950"
  },
  {
    "text": "dealing with the same list. By getting a new list, I'm\nensuring that I don't have",
    "start": "1759950",
    "end": "1766550"
  },
  {
    "text": "that problem. Then I say the new path is\nwhatever the shortest path is,",
    "start": "1766550",
    "end": "1773270"
  },
  {
    "text": "from the node I'm currently at\nto the desired end node. And I use the current set of\nvisited nodes to indicate",
    "start": "1773270",
    "end": "1780580"
  },
  {
    "text": "where I've already been at this\npart of the recursion. ",
    "start": "1780580",
    "end": "1787550"
  },
  {
    "text": "If the new path is none, well\ndidn't find one, I continue. Otherwise, I found a path, and\nnow I just want to check is it",
    "start": "1787550",
    "end": "1795059"
  },
  {
    "text": "better, or worse, or the same,\nas the previous shortest path.",
    "start": "1795060",
    "end": "1800910"
  },
  {
    "text": "And then I'm done. Very straightforward. The only really tricky part was\nmaking sure that I kept",
    "start": "1800910",
    "end": "1808690"
  },
  {
    "text": "track of visited properly, and\ndidn't get stuck in cycles.",
    "start": "1808690",
    "end": "1814250"
  },
  {
    "text": "OK let's run it. So here's testTwo --",
    "start": "1814250",
    "end": "1819880"
  },
  {
    "text": "builds the same kind of graph\nwe've built before. And then it tries to find\nthe shortest path.",
    "start": "1819880",
    "end": "1826135"
  },
  {
    "text": " And I'm going to do it for the\nsame input, essentially, the",
    "start": "1826135",
    "end": "1833789"
  },
  {
    "text": "same at edge operations, but\nonce when it's a graph and once when it's a digraph. ",
    "start": "1833790",
    "end": "1845410"
  },
  {
    "text": "So you'll notice that it found\ntwo different answers. ",
    "start": "1845410",
    "end": "1852050"
  },
  {
    "text": "When it was a graph, it could\nget from 0 to 4 in essentially one hop.",
    "start": "1852050",
    "end": "1858125"
  },
  {
    "text": " But when it was a digraph,\nit took longer.",
    "start": "1858125",
    "end": "1868690"
  },
  {
    "text": "It had to go from 0\nto two to 3 to 4. And that's not surprising,\nbecause the",
    "start": "1868690",
    "end": "1873790"
  },
  {
    "text": "graph has more edges.  And in fact, what we saw is that\nin the graph there was an",
    "start": "1873790",
    "end": "1881950"
  },
  {
    "text": "edge from 4 to 0, but there\nwas no such edge in the directed graph.",
    "start": "1881950",
    "end": "1886990"
  },
  {
    "text": "So again you'll get, unsurprisingly, different answers--",
    "start": "1886990",
    "end": "1893560"
  },
  {
    "text": "but very straightforwardly. Now let's try it on\na bigger problem.",
    "start": "1893560",
    "end": "1900000"
  },
  {
    "start": "1900000",
    "end": "1911010"
  },
  {
    "start": "1911000",
    "end": "2039000"
  },
  {
    "text": "So I've called this big test. And what this does, is rather\nthan my sitting there and",
    "start": "1911010",
    "end": "1916270"
  },
  {
    "text": "typing a bunch of at edge\ncommands, it just generates edges at random.",
    "start": "1916270",
    "end": "1923830"
  },
  {
    "text": "So I tell it whether I want it\nto be a graph or digraph, and then I give it the number\nof nodes I want, and",
    "start": "1923830",
    "end": "1930870"
  },
  {
    "text": "the number of edges. And it just generates, at\nrandom, a graph in this case with 25 nodes and 200 edges.",
    "start": "1930870",
    "end": "1939429"
  },
  {
    "text": "So let's see what\nhappens here. ",
    "start": "1939430",
    "end": "1948670"
  },
  {
    "text": "So it's printed out the\ngraph, and now we're",
    "start": "1948670",
    "end": "1955630"
  },
  {
    "text": "waiting a little bit. It will eventually\nfinish, there.",
    "start": "1955630",
    "end": "1961350"
  },
  {
    "text": "I can get from 0 to 4. It turns out there's a short\npath for this random graph",
    "start": "1961350",
    "end": "1966520"
  },
  {
    "text": "from 0 to 14 to 4. It's not so surprising that\nthere's a short path. Why is it not surprising that\nthere's a pretty short path?",
    "start": "1966520",
    "end": "1975179"
  },
  {
    "text": "It had a lot of edges, right? I had 200 edges in my graph. So things are pretty\ndensely connected.",
    "start": "1975180",
    "end": "1981125"
  },
  {
    "text": " Why did it take so long? ",
    "start": "1981125",
    "end": "1988540"
  },
  {
    "text": "Well remember what it's doing is\nexploring all the possible",
    "start": "1988540",
    "end": "1994310"
  },
  {
    "text": "paths from 0 to 4,\nin this case. ",
    "start": "1994310",
    "end": "2001220"
  },
  {
    "text": "This is very much like what we\nsaw when we looked at the knapsack problem, right? Where, there when we looked at\nthe recursive implementation,",
    "start": "2001220",
    "end": "2009100"
  },
  {
    "text": "we saw that well all right,\ngenerating all possibilities, there were an exponential number\nof possibilities there",
    "start": "2009100",
    "end": "2015310"
  },
  {
    "text": "in the number of items. Here, depending upon the number\nof nodes and the number",
    "start": "2015310",
    "end": "2022440"
  },
  {
    "text": "of edges, it's also large,\nand in fact, exponential. ",
    "start": "2022440",
    "end": "2030390"
  },
  {
    "text": "We could explore a lot of\ndifferent paths, but let's see",
    "start": "2030390",
    "end": "2036380"
  },
  {
    "text": "what's going on when\nwe explore those. So what I'm going to\ndo now, is go back",
    "start": "2036380",
    "end": "2044500"
  },
  {
    "text": "to our small example.  We'll run testTwo That was the\nsmall one we looked at.",
    "start": "2044500",
    "end": "2053238"
  },
  {
    "text": "But I'm going to set to print\nonto true, and if you remember what that code did is they told\nus what each recursive",
    "start": "2053239",
    "end": "2062919"
  },
  {
    "text": "call was, what the start node\nwas and what the end node was. ",
    "start": "2062920",
    "end": "2071280"
  },
  {
    "text": "So it found the same\nshortest path. That's a good thing, 0 to 4.",
    "start": "2071280",
    "end": "2077089"
  },
  {
    "text": "But how did it do that? Well it first got called with\nthe question of starting at 0",
    "start": "2077090",
    "end": "2085730"
  },
  {
    "text": "find me a path to 4. It visited the first child\nof 0, which was 1.",
    "start": "2085730",
    "end": "2091300"
  },
  {
    "text": "It said, all right see if you\ncan find a path from 1 to 4. ",
    "start": "2091300",
    "end": "2096940"
  },
  {
    "text": "It then backtracked and sort\nof asked the same question, can I get from 2 to 4?",
    "start": "2096940",
    "end": "2103750"
  },
  {
    "text": "From 0 to 4? And then it said well I can get\nfrom 0 to 2, let me try 2 to 4, 3 to 4, 4 to\n4, that's good.",
    "start": "2103750",
    "end": "2113369"
  },
  {
    "text": "Get to 5 to 4, and then it tried\nto find 4 to 4 again. Here it tried to find\n2 to 4 again.",
    "start": "2113370",
    "end": "2119730"
  },
  {
    "text": "So what you can see, is as I\ndo that backtracking, I'm",
    "start": "2119730",
    "end": "2125420"
  },
  {
    "text": "solving the same problem\nmultiple times.",
    "start": "2125420",
    "end": "2130750"
  },
  {
    "text": "Why am I doing that? Because there may be multiple\nways to get to the same node.",
    "start": "2130750",
    "end": "2138920"
  },
  {
    "text": "So if, for example, I looked at\nthis graph, what we would",
    "start": "2138920",
    "end": "2147950"
  },
  {
    "text": "see is I would try and let's\nsay I want to get to here, just for the sake of argument,\nI'd first say can I get to",
    "start": "2147950",
    "end": "2157050"
  },
  {
    "text": "here from here. I'd try this, then I'd\nsolve here to here.",
    "start": "2157050",
    "end": "2162520"
  },
  {
    "text": "And I'd do that. I'd also go from here to here\nto here, and then for the",
    "start": "2162520",
    "end": "2170290"
  },
  {
    "text": "second time, I'd try and solve\nthe problem here to here. Now here since it's only\none connection,",
    "start": "2170290",
    "end": "2176859"
  },
  {
    "text": "it's a short thing. But you can see if I have\nmultiple ways to get to the",
    "start": "2176860",
    "end": "2182350"
  },
  {
    "text": "same intermediate node, each\ntime I get there I'm going to solve a problem I have\nalready solved--",
    "start": "2182350",
    "end": "2190070"
  },
  {
    "text": "how to get from that\nintermediate node to the final destination. So I'm doing work I've\nalready done before.",
    "start": "2190070",
    "end": "2197310"
  },
  {
    "text": " This is obviously troublesome.",
    "start": "2197310",
    "end": "2205740"
  },
  {
    "text": "Nobody likes to solve\na problem they've already solved before. So what do you think\nthe solution is?",
    "start": "2205740",
    "end": "2210990"
  },
  {
    "text": " How would you solve this\nsort of thing yourself? ",
    "start": "2210990",
    "end": "2218460"
  },
  {
    "text": "What would you do? ",
    "start": "2218460",
    "end": "2223940"
  },
  {
    "text": "Well what you'd--\nyeah, thank you. This guy is hungry. Go ahead. AUDIENCE: Some way of storing\ninformation that you've",
    "start": "2223940",
    "end": "2231052"
  },
  {
    "text": "already looked at. PROFESSOR: Exactly. What you try and do, is remember\nwhat you did before,",
    "start": "2231052",
    "end": "2243330"
  },
  {
    "text": "and just look it up. This is a very common\ntechnique.",
    "start": "2243330",
    "end": "2250730"
  },
  {
    "text": "It's called memoization. ",
    "start": "2250730",
    "end": "2261350"
  },
  {
    "text": "We use this to solve a lot of\nproblems where you remember what the answer was, and rather\nthan recalculating it,",
    "start": "2261350",
    "end": "2268500"
  },
  {
    "text": "you just look it up. And that can, of course,\nbe much faster.",
    "start": "2268500",
    "end": "2275780"
  },
  {
    "text": "So it's a fancy way\nto say we're going to use a table look-up. ",
    "start": "2275780",
    "end": "2283839"
  },
  {
    "text": "This concept of memoization\nis at the heart of a very",
    "start": "2283840",
    "end": "2289750"
  },
  {
    "text": "important programming technique\ncalled dynamic programming. ",
    "start": "2289750",
    "end": "2302090"
  },
  {
    "text": "In the algorithms class that's\ntaught in this room immediately following this\nclass, they have spent at",
    "start": "2302090",
    "end": "2308080"
  },
  {
    "text": "least four lectures on the topic\nof dynamic programming. But since you guys are much\nsmarter than those guys taking",
    "start": "2308080",
    "end": "2314910"
  },
  {
    "text": "that class, we're going to do\nit in about 20 minutes, in today and a little bit\nin the next lecture.",
    "start": "2314910",
    "end": "2323140"
  },
  {
    "text": "All right, so let's look\nat an example. ",
    "start": "2323140",
    "end": "2330490"
  },
  {
    "text": "We'll look at a solution. So I've taken the recursive\nimplementation we had before,",
    "start": "2330490",
    "end": "2342420"
  },
  {
    "start": "2331000",
    "end": "2574000"
  },
  {
    "text": "and rewritten it just a little\nbit, to call dp, dynamic",
    "start": "2342420",
    "end": "2348880"
  },
  {
    "text": "programming shortest path. And the most important thing\nto notice is I've given yet",
    "start": "2348880",
    "end": "2357500"
  },
  {
    "text": "another argument to the\nfunction, and that's the memo,",
    "start": "2357500",
    "end": "2362590"
  },
  {
    "text": "which is initially an\nempty dictionary. ",
    "start": "2362590",
    "end": "2368150"
  },
  {
    "text": "The rest of the algorithm\nproceeds as before, except",
    "start": "2368150",
    "end": "2373440"
  },
  {
    "text": "what happens here is when I want\nto get from a path, the",
    "start": "2373440",
    "end": "2381329"
  },
  {
    "text": "first question I ask is I say\nnew path is equal to the memo of node to end.",
    "start": "2381330",
    "end": "2388540"
  },
  {
    "text": "So when I get to one of these\ninterior nodes, and I want to say what's the shortest path\nfrom here to here, the first",
    "start": "2388540",
    "end": "2395760"
  },
  {
    "text": "question I ask is do I already\nknow the answer? Is it already in my memo?",
    "start": "2395760",
    "end": "2402160"
  },
  {
    "text": "If so, I just look it\nup, and I'm done.",
    "start": "2402160",
    "end": "2408130"
  },
  {
    "text": "I found it, and I proceed\nas before. If it's not in the memo, well\nthis look up will fail, and",
    "start": "2408130",
    "end": "2417369"
  },
  {
    "text": "I'll enter the except clause,\nand I'll make a call again.",
    "start": "2417370",
    "end": "2422970"
  },
  {
    "text": "So this is a very conventional\nway of using try, except as a control structure.",
    "start": "2422970",
    "end": "2428010"
  },
  {
    "text": "Failing to find in the memo is\nnot an error, it just means I haven't yet stored it away.",
    "start": "2428010",
    "end": "2433980"
  },
  {
    "text": "And as I go, I'll build up the\nmemo, and then I'm done. ",
    "start": "2433980",
    "end": "2441470"
  },
  {
    "text": "So it's very simple. So I should ask the question.",
    "start": "2441470",
    "end": "2449380"
  },
  {
    "text": "Does anyone need me to explain\nthis again, or does it makes sense what we're doing\nhere with a memo? ",
    "start": "2449380",
    "end": "2456990"
  },
  {
    "text": "OK, I'm assuming\nit makes sense. Let's test it. And we'll first do a\nvery simple test.",
    "start": "2456990",
    "end": "2464330"
  },
  {
    "text": "We're just going to use\nthe same little graph we used before.",
    "start": "2464330",
    "end": "2469620"
  },
  {
    "text": "And I'm going to run shortest\npath, and dp_shortest path, and at least confirm that\nfor one search I",
    "start": "2469620",
    "end": "2476110"
  },
  {
    "text": "get the same answer. It's just fire testing it to\nmake sure that it's not a",
    "start": "2476110",
    "end": "2481380"
  },
  {
    "text": "complete disaster.  And we do.",
    "start": "2481380",
    "end": "2487009"
  },
  {
    "text": "We get 0234, 0234. So at least for one thing,\nit's the same thing.",
    "start": "2487010",
    "end": "2493210"
  },
  {
    "text": " Let's see about performance,\nbecause that's really what we",
    "start": "2493210",
    "end": "2499500"
  },
  {
    "text": "got interested in.  So we'll go back to\nour big test.",
    "start": "2499500",
    "end": "2507640"
  },
  {
    "text": " And let's go back and for both\nof these, I'm going to",
    "start": "2507640",
    "end": "2518720"
  },
  {
    "text": "uncomment, tracking this global\nvariable, just keeping",
    "start": "2518720",
    "end": "2524980"
  },
  {
    "text": "track of the number of calls,\nand we'll see whether we get a substantially different amount\nof recursion, in",
    "start": "2524980",
    "end": "2534970"
  },
  {
    "text": "one versus the other. ",
    "start": "2534970",
    "end": "2558260"
  },
  {
    "text": "So it's built some random\ngraph again. ",
    "start": "2558260",
    "end": "2564619"
  },
  {
    "text": "This is the non-dynamic\nprogramming one, which as we recall, takes a bit longer.",
    "start": "2564620",
    "end": "2570390"
  },
  {
    "text": " I probably should have said--\nall right, so it's pretty big",
    "start": "2570390",
    "end": "2576960"
  },
  {
    "start": "2574000",
    "end": "2933000"
  },
  {
    "text": "difference. They found the same\npath, 0, 2,3, 4. But you'll notice the\nstraightforward depth first",
    "start": "2576960",
    "end": "2585630"
  },
  {
    "text": "search took over 800,000\nrecursive calls, whereas the",
    "start": "2585630",
    "end": "2592380"
  },
  {
    "text": "dynamic programming one took\nonly an order of 2000-- a huge difference.",
    "start": "2592380",
    "end": "2598630"
  },
  {
    "text": " If I ran it again, I might see a\nslightly smaller difference.",
    "start": "2598630",
    "end": "2606339"
  },
  {
    "text": "I might even see a considerably\nlarger difference. I've run this on some examples\nwhere the recursive search",
    "start": "2606340",
    "end": "2613230"
  },
  {
    "text": "depth first took a million, and\ngot through the dynamic programming in 50, 60.",
    "start": "2613230",
    "end": "2619960"
  },
  {
    "text": "But what you can see is there's\na huge improvement in going from one to the other.",
    "start": "2619960",
    "end": "2627369"
  },
  {
    "text": "Dynamic programming was invented\nin the 1950s by someone named Richard Bellman. ",
    "start": "2627370",
    "end": "2635290"
  },
  {
    "text": "Many a student has wasted\na lot of time trying to understand why it's called\ndynamic programming.",
    "start": "2635290",
    "end": "2642080"
  },
  {
    "text": "And you or I could invent\nlots of theories. Relatively recently, I found out\nwhy it was called dynamic",
    "start": "2642080",
    "end": "2648849"
  },
  {
    "text": "programming, and this is\na quote from Bellman. \"It was an attempt to hide\nwhat I was doing from",
    "start": "2648850",
    "end": "2655860"
  },
  {
    "text": "government sponsors. The fact that I was really\ndoing mathematics was something not even a congressman\ncould object to.\"",
    "start": "2655860",
    "end": "2664240"
  },
  {
    "text": "So he was doing this thing that\nwas pretty evil, which was mathematics, which is what\nhe thought this was-- the math",
    "start": "2664240",
    "end": "2671510"
  },
  {
    "text": "of dynamic programming. And he just didn't\nwant to admit it. So he made up a name out of\nnothing, and it fooled the",
    "start": "2671510",
    "end": "2678340"
  },
  {
    "text": "government, and he\ngot to do it. Now why do I teach you\ndynamic programming?",
    "start": "2678340",
    "end": "2683430"
  },
  {
    "text": "And we're going to talk a little\nbit more about it, the next lecture. It's because it is one of the\nmost important algorithms that",
    "start": "2683430",
    "end": "2692380"
  },
  {
    "text": "we know today. It's used over and over again\nto provide practical,",
    "start": "2692380",
    "end": "2701330"
  },
  {
    "text": "efficient solutions to\noptimization problems that on",
    "start": "2701330",
    "end": "2707850"
  },
  {
    "text": "their surface appear\nintractable. They appear exponential.",
    "start": "2707850",
    "end": "2713609"
  },
  {
    "text": "It says there is no good\nway to solve it. In fact, if it has certain kinds\nof properties, it will",
    "start": "2713610",
    "end": "2721830"
  },
  {
    "text": "always be amenable to\nsolutions by dynamic programming, which will most\nof the time-- and I'll come",
    "start": "2721830",
    "end": "2728360"
  },
  {
    "text": "back to the most of the time-- end up taking an exponential\nproblem, and solving it really",
    "start": "2728360",
    "end": "2735109"
  },
  {
    "text": "quickly, as we did here. I could have made this graph\nenormous, and dynamic",
    "start": "2735110",
    "end": "2741240"
  },
  {
    "text": "programming would have given us\na very fast solution to it. So when can we use dynamic\nprogramming?",
    "start": "2741240",
    "end": "2747600"
  },
  {
    "text": " Not all the time. ",
    "start": "2747600",
    "end": "2754420"
  },
  {
    "text": "We can use it on problems that\nexhibit two properties.",
    "start": "2754420",
    "end": "2762500"
  },
  {
    "text": "The problem must have optimal\nsubstructure. ",
    "start": "2762500",
    "end": "2775069"
  },
  {
    "text": "What this means is that you can\nfind a globally optimal solution by combining locally\noptimal solutions.",
    "start": "2775070",
    "end": "2785505"
  },
  {
    "start": "2785505",
    "end": "2814400"
  },
  {
    "text": "So we can again see that with\nour graph problem, that we can",
    "start": "2814400",
    "end": "2819539"
  },
  {
    "text": "combine the solutions from nodes\nat a distance from the root node to get the solution\nof getting there",
    "start": "2819540",
    "end": "2828020"
  },
  {
    "text": "from the root node. If I know I can get from A to B,\nand I can find the optimal",
    "start": "2828020",
    "end": "2833720"
  },
  {
    "text": "solution from B to C, then I\ncan use that to find the optimal solution from A to\nC. So it has optimal",
    "start": "2833720",
    "end": "2843020"
  },
  {
    "text": "substructure.  The other thing it has to have\nis overlapping sub-problems.",
    "start": "2843020",
    "end": "2852350"
  },
  {
    "text": "And that's the thing I\nemphasized earlier-- ",
    "start": "2852350",
    "end": "2861799"
  },
  {
    "text": "that finding the optimal\nsolution involves finding optimal solution to the same\nsub-problem multiple times.",
    "start": "2861800",
    "end": "2871930"
  },
  {
    "text": "Otherwise, we could build this\nmemo, but we'd never successfully look up\nanything in it.",
    "start": "2871930",
    "end": "2877790"
  },
  {
    "text": "And so the algorithm would give\nus the right answer, but we'd get no speedup,. ",
    "start": "2877790",
    "end": "2883849"
  },
  {
    "text": "So it's this property that we\nneed to know that we'll get the correct answer--",
    "start": "2883850",
    "end": "2890260"
  },
  {
    "text": "that when we combine the local\nsolutions, we'll get the right global solution. It's this property that gives\nus an indication of how much",
    "start": "2890260",
    "end": "2898570"
  },
  {
    "text": "of a speedup we can\nexpect to achieve. How many problems will we not\nhave to solve, because we can",
    "start": "2898570",
    "end": "2905300"
  },
  {
    "text": "look up the solution? We'll come back to this. And we'll see how it applies to\nanother problem that you've",
    "start": "2905300",
    "end": "2913260"
  },
  {
    "text": "already looked at say the\nknapsack problem, to give us a fast solution to that, so that\nif you want a answer, go back",
    "start": "2913260",
    "end": "2920700"
  },
  {
    "text": "to a previous problem set, and\ntake the full database of classes, you'll be able to solve\nit quickly using dynamic",
    "start": "2920700",
    "end": "2927540"
  },
  {
    "text": "programming. OK, see you next time. ",
    "start": "2927540",
    "end": "2933503"
  }
]