[
  {
    "text": " ANNOUNCER: The following content\nis provided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw@mit.edu",
    "start": "13320",
    "end": "20485"
  },
  {
    "text": "PROFESSOR: So today we're\ngoing to cover a data structure called link-cut trees. A cool way of maintaining\ndynamic trees,",
    "start": "20485",
    "end": "27300"
  },
  {
    "text": "and it begins our study\nof dynamic graphs. Where in general, we have\na graph usually undirected.",
    "start": "27300",
    "end": "32850"
  },
  {
    "text": "You want to support insertion\nand deletion of edges. So we're going to do that in\nthe situation where at all times",
    "start": "32850",
    "end": "38969"
  },
  {
    "text": "our graphs are trees. So in general, we\nhave a forest of trees and we want to maintain them.",
    "start": "38970",
    "end": "44440"
  },
  {
    "text": "So that will be our only\ndata structure today because it's a bit complicated.",
    "start": "44440",
    "end": "50520"
  },
  {
    "text": "It's going to need some\nfancy amortization. And two techniques\nfor splitting trees",
    "start": "50520",
    "end": "56879"
  },
  {
    "text": "into paths, one\nwe've seen already in the context of tango\ntrees and lecture's six, preferred paths.",
    "start": "56880",
    "end": "62514"
  },
  {
    "text": "And another, which\nwe haven't seen is probably my favorite\ntechnique in data structures, actually, heavy\nlike decomposition.",
    "start": "62514",
    "end": "69847"
  },
  {
    "text": "The technique and data structure\nthat I've used the most outside of data structures. It's very useful in\nlots of settings.",
    "start": "69847",
    "end": "76111"
  },
  {
    "text": "Whenever you have\nan unbalanced tree and you want to make it balance,\nlike with like cut trees,",
    "start": "76111",
    "end": "82720"
  },
  {
    "text": "It's the go to tool. So, in, general we want to\nmaintain a forest of trees.",
    "start": "82720",
    "end": "89955"
  },
  {
    "start": "89955",
    "end": "97740"
  },
  {
    "text": "And these are going to be\nrooted unordered trees. ",
    "start": "97740",
    "end": "105270"
  },
  {
    "text": "So arbitrary degree I this. ",
    "start": "105270",
    "end": "110700"
  },
  {
    "text": "And we have a bunch of\noperations we want to do. Basically, insertion and\ndeletion of edges and some queries.",
    "start": "110700",
    "end": "117060"
  },
  {
    "text": "And we want to do all\nof those operations in the log n time per operation. ",
    "start": "117060",
    "end": "124979"
  },
  {
    "text": "That's the hard part. So we have some kind of getting\nstarted operation make tree.",
    "start": "124980",
    "end": "132360"
  },
  {
    "text": "This is going to be make a new\nvertex in a new tree, return.",
    "start": "132360",
    "end": "137430"
  },
  {
    "text": "It. So this is how you add\nnotes to the structure. And we're not going to\nworry about doing deletions.",
    "start": "137430",
    "end": "143160"
  },
  {
    "text": "Once you add something\nit stays there forever. So you could you could do that. It's no big deal.",
    "start": "143160",
    "end": "149570"
  },
  {
    "text": "You could throw away a tree. Then we have link\nwhich is essentially the insertion of an edge.",
    "start": "149570",
    "end": "155790"
  },
  {
    "text": "So here we're given\ntwo vertices BMW that are in different\ntrees as a precondition.",
    "start": "155790",
    "end": "162540"
  },
  {
    "text": "So v has to be at\nthe root of its tree. W can be any node.",
    "start": "162540",
    "end": "168870"
  },
  {
    "text": "So here we have another tree\nand we have some node w inside v And the link operation\nadds V as a child of W.",
    "start": "168870",
    "end": "179760"
  },
  {
    "text": "So we add this edge. OK, that, of course, combines\ntwo trees into one tree.",
    "start": "179760",
    "end": "186889"
  },
  {
    "text": "And the requirement is BMW\nhas to be in different trees or otherwise you'd be\nadding a cycle that doesn't satisfy that were\nalways a forest of trees.",
    "start": "186889",
    "end": "195710"
  },
  {
    "text": "Then we have a cut operation,\nwhich is basically the reverse.",
    "start": "195710",
    "end": "203340"
  },
  {
    "text": "So let me draw it. We have V subtree parent.",
    "start": "203340",
    "end": "210090"
  },
  {
    "text": "And there is a\nwhole tree up here. ",
    "start": "210090",
    "end": "216129"
  },
  {
    "text": "And what we want to do\nis remove that edge. So that splits one tree into\ntwo trees by the leading",
    "start": "216130",
    "end": "223590"
  },
  {
    "text": "edge from V to its parent. ",
    "start": "223590",
    "end": "234800"
  },
  {
    "text": "OK so those are our updates. Pretty obvious in the\nsetting of dynamic graphs.",
    "start": "234800",
    "end": "241830"
  },
  {
    "text": "Of course, it's the\nfirst time we see them. Now we have some queries. There are lots of\ndifferent queries",
    "start": "241830",
    "end": "247269"
  },
  {
    "text": "that cut-trees can support. One of the most basic is\nfind the root of vertex.",
    "start": "247270",
    "end": "258430"
  },
  {
    "text": "Let me just draw a picture of. It you have some\nvertex V, you want",
    "start": "258430",
    "end": "264460"
  },
  {
    "text": "to return the root of the tree. So find R. And that's\npretty easy to do.",
    "start": "264460",
    "end": "274159"
  },
  {
    "text": "Well actually see it in\nnext class, next lecture, if you wanted to make\ntree/link cut and find root,",
    "start": "274160",
    "end": "280940"
  },
  {
    "text": "there's a really easy way to\ndo them in logarithmic time. link-cut trees is a harder\nway to do it in log n time,",
    "start": "280940",
    "end": "287090"
  },
  {
    "text": "but they support a lot\nof other operations. And in particular, something\ncalled path aggregation.",
    "start": "287090",
    "end": "299020"
  },
  {
    "text": "This is kind of the essence\nof link/cut are cool.",
    "start": "299020",
    "end": "304419"
  },
  {
    "text": "Let's suppose you\nhave a for a tree, you have a vertex V.\nThere's a root to V path.",
    "start": "304420",
    "end": "313210"
  },
  {
    "text": "And let's suppose that every\nnode or every edge, doesn't matter, has a weight on it. Just some real number.",
    "start": "313210",
    "end": "319700"
  },
  {
    "text": "Then path aggregation\ncan do things like the min or\nthe max or the sum",
    "start": "319700",
    "end": "327850"
  },
  {
    "text": "or the product or whatever\nof weights on that path. ",
    "start": "327850",
    "end": "341102"
  },
  {
    "text": "And this is a powerful thing. And it's actually the reason\nlink/cut trees were originally invented for doing network\nflow algorithms faster.",
    "start": "341102",
    "end": "347110"
  },
  {
    "text": "If you know network\nflow algorithms. Or maybe you've seen them\nin advanced algorithms. This is sort of the key\nthing you need to do.",
    "start": "347110",
    "end": "353440"
  },
  {
    "text": "You find, I think, min way\nedge along one of these paths and that's the max you can push\nin a push reliable strategy.",
    "start": "353440",
    "end": "361169"
  },
  {
    "text": "I don't want to get into that\nbecause that's algorithms, not data structures. But this is why\nthey were invented.",
    "start": "361170",
    "end": "366670"
  },
  {
    "text": "And, in general, link/cut\ntrees have a very strong kind of path thing.",
    "start": "366670",
    "end": "372652"
  },
  {
    "text": "If you want to know\nanything about a root to the path for any\nnode v, link-cut trees",
    "start": "372652",
    "end": "378099"
  },
  {
    "text": "can do whatever you\nwant in lon n time. This is just sort of\nan example of that. And Yeah.",
    "start": "378100",
    "end": "384750"
  },
  {
    "text": "course. So that's what link\ncountries are able to do. All these operations in log\nn And the main point here",
    "start": "384750",
    "end": "391060"
  },
  {
    "text": "is that the trees are storing\nare probably not balanced. It could be a path,\ncould be depth",
    "start": "391060",
    "end": "398120"
  },
  {
    "text": "and is this path we're talking\nabout could be length order n is really bad.",
    "start": "398120",
    "end": "404319"
  },
  {
    "text": "And yet, we can do all these\noperations in log n time. And we're going to\ndo that, essentially, by storing the unbalanced\ntree that you're",
    "start": "404320",
    "end": "412240"
  },
  {
    "text": "trying to represent, which we\ncall this the represent tree. We're going to store it using,\nessentially, a balanced tree.",
    "start": "412240",
    "end": "420430"
  },
  {
    "text": "In one version of\nlink-cut trees, indeed, we store all the\nnodes in a log n height tree.",
    "start": "420430",
    "end": "426180"
  },
  {
    "text": "The version we're\ngoing to cover here-- there's several versions\nof link-cut trees. Original are biased\nlater in Tarjan in 1983.",
    "start": "426180",
    "end": "435580"
  },
  {
    "text": "And then Tarjan wrote a\nbook, one of a few books on data structures. Very thin book, usually called\nTarjan's little book, in 1984.",
    "start": "435580",
    "end": "443980"
  },
  {
    "text": "And it has a different\nversion of link-cut trees, and that's the\nversion we're going to cover it uses splay\ntrees as a subroutine.",
    "start": "443980",
    "end": "449608"
  },
  {
    "text": "So it's not going to\nbe perfectly balanced. It's going to be balanced\nin an amortize sense, or vaguely balanced,\nroughly balanced, whatever.",
    "start": "449609",
    "end": "458320"
  },
  {
    "text": "But there is a version that does\neverything in log n worse case pre-operation. If there's time, I'll sketch\nthat for you at the end.",
    "start": "458320",
    "end": "465850"
  },
  {
    "text": "But the simplest version I know\nis this splay tree version. And it's also kind of fun\nbecause the version we'll see,",
    "start": "465850",
    "end": "475120"
  },
  {
    "text": "doesn't really look\nlike it should work, and yet it does thanks to\nsplay trees, essentially.",
    "start": "475120",
    "end": "481550"
  },
  {
    "text": "So it's a little, it's fun\nand surprising in that sense. ",
    "start": "481550",
    "end": "495610"
  },
  {
    "text": "As I said, link-cut trees are\nall about paths in the tree. And so somehow we want to\nsplit a tree up into paths",
    "start": "495610",
    "end": "502379"
  },
  {
    "text": "and we've already\nseen a way to do this. The preferred path\ndecomposition. So it's kind of reminding\nyou, but I'm also",
    "start": "502380",
    "end": "509970"
  },
  {
    "text": "going to slightly redefine\nit, if I recall correctly. It's just a minor\ndifference which",
    "start": "509970",
    "end": "518209"
  },
  {
    "text": "I can talk about a second. The notion of a preferred\nchild of a node, and it's going to be two cases.",
    "start": "518209",
    "end": "523875"
  },
  {
    "text": " There isn't a preferred\nchild, if the last access",
    "start": "523875",
    "end": "533960"
  },
  {
    "text": "in these subtree is v. So\nwe have some node v. Now,",
    "start": "533960",
    "end": "544020"
  },
  {
    "text": "this is relative to\nthe represented tree. So we have some node to v.\nWe don't care about accesses",
    "start": "544020",
    "end": "550260"
  },
  {
    "text": "outside of that subtree, but\nof the last access within the subtree was v itself, then\nthere's no preferred child.",
    "start": "550260",
    "end": "557730"
  },
  {
    "text": "Otherwise, the last\naccess within the tree was in one of these\nchild subtrees.",
    "start": "557730",
    "end": "562899"
  },
  {
    "text": "And whichever one it was, we\nsay w is the preferred child. ",
    "start": "562900",
    "end": "569019"
  },
  {
    "text": "So if the last access in\nv subtree is in child w's",
    "start": "569020",
    "end": "582091"
  },
  {
    "text": "subtree.  OK, I think last time we\ndefined preferred children",
    "start": "582091",
    "end": "587630"
  },
  {
    "text": "in the context of tango trees,\nwe just had the second part. So if there is an access\nto v, we ignored it",
    "start": "587630",
    "end": "593330"
  },
  {
    "text": "and we just consider what\nthe last child access. Was I don't think\nthere's actually would affect tango\ntrees, but I think",
    "start": "593330",
    "end": "599120"
  },
  {
    "text": "it does effect Link-cut trees. So I want to define it this way. It'll make life\ncleaner, basically.",
    "start": "599120",
    "end": "605390"
  },
  {
    "text": "Probably not a huge\ndifference either way. OK, once you have\npreferred children, that gives you one outgoing\nedge, downward edge,",
    "start": "605390",
    "end": "613250"
  },
  {
    "text": "from every node. And so we get preferred\npaths by repeatedly following",
    "start": "613250",
    "end": "621620"
  },
  {
    "text": "preferred child pointers. Now, we may stop at some\npoint because we reach a none.",
    "start": "621620",
    "end": "627250"
  },
  {
    "text": "I'm going to use none as like\nnull pointers in this lecture. But, in general, we have some\ntree and you follow for a while",
    "start": "627250",
    "end": "634910"
  },
  {
    "text": "and then it's going to be a\nbunch of things like this. We decompose the nodes\nand the represented tree,",
    "start": "634910",
    "end": "649430"
  },
  {
    "text": "partition the nodes.  Every node belongs to\nsome preferred path.",
    "start": "649430",
    "end": "657110"
  },
  {
    "text": "So basic idea is we're\ngoing to store the preferred paths in kind of balanced binary\nsearch trees, splay trees,",
    "start": "657110",
    "end": "665720"
  },
  {
    "text": "and then we're going to connect\nthem together because that's not all the edges in the tree.",
    "start": "665720",
    "end": "670770"
  },
  {
    "text": "There's some edges that\nsort of connect them,",
    "start": "670770",
    "end": "675810"
  },
  {
    "text": "connect the paths together. That's where the\ntree part comes in. That's what we're going to do\nit this thing is unbalanced.",
    "start": "675810",
    "end": "682700"
  },
  {
    "text": "We're going to take each\nof these white lines and compress it\ninto a splay tree,",
    "start": "682700",
    "end": "688190"
  },
  {
    "text": "and preserve the red pointers. ",
    "start": "688190",
    "end": "693721"
  },
  {
    "text": "I'll write that down. These are called\nauxiliary trees.",
    "start": "693721",
    "end": "701350"
  },
  {
    "text": "This was exactly the\nidea and tango trace and I'm using tango\ntree terminology",
    "start": "701350",
    "end": "708310"
  },
  {
    "text": "to keep it consistent\nwith that notation. It wasn't called preferred paths\nin the link-cut tree papers.",
    "start": "708310",
    "end": "714700"
  },
  {
    "text": "Or it wasn't called auxiliary\ntrees, but same difference. So auxiliary trees were going to\nstore represent each preferred",
    "start": "714700",
    "end": "726940"
  },
  {
    "text": "path by a splay tree.",
    "start": "726940",
    "end": "736380"
  },
  {
    "text": "Tango trees we use\nred-black trees or whatever. Could us splay trees,\nactually, if you",
    "start": "736380",
    "end": "742662"
  },
  {
    "text": "use tango trees with splay\ntrees for each preferred path. It's called a multi-splay tree. Multi-splay trees are almost\nidentical to link-cut trees",
    "start": "742662",
    "end": "751020"
  },
  {
    "text": "but, they're used for\na different setting. The use for proving\nlog n competitiveness.",
    "start": "751020",
    "end": "757380"
  },
  {
    "text": "Here we're doing it to\nrepresent a specific tree. With tango trees, the\ntree we're representing",
    "start": "757380",
    "end": "763420"
  },
  {
    "text": "was just a perfect\nbinary tree, p. So you may recall, here\nit has some meaning. And it's going to\nbe changing, and we",
    "start": "763420",
    "end": "769720"
  },
  {
    "text": "care about how it's changing. OK, another difference is\nwe're going to key the nodes",
    "start": "769720",
    "end": "777520"
  },
  {
    "text": "by depth. This is what we wanted\nto do with tango trees,",
    "start": "777520",
    "end": "782844"
  },
  {
    "text": "but we weren't allowed\nto because we had to be a binary search trees. And the keys were given to us. Here, there are no keys.",
    "start": "782844",
    "end": "788649"
  },
  {
    "text": "So we need to specify them\nand the most convenient one is by depth. So we're just taking a path\nlike this, 0, 1, 2, 3 4.",
    "start": "788650",
    "end": "799790"
  },
  {
    "text": "And then we're turning it\ninto a nice balance tree like this, 0, 1, 2, 3, 3, 4.",
    "start": "799790",
    "end": "813430"
  },
  {
    "text": "OK, Now, it's a splay\ntrees so it's not guaranteed to be\nbalanced at any moment,",
    "start": "813430",
    "end": "820270"
  },
  {
    "text": "but amortized is going to have\nlog n performance preparation.",
    "start": "820270",
    "end": "825670"
  },
  {
    "text": "OK, and then this\nis sort of that's representing each of\nthese white paths, but then we also need\nthe red pointers.",
    "start": "825670",
    "end": "832040"
  },
  {
    "text": "So what we're going\nto do is say the root of each auxiliary\ntree, I'll abbreviate",
    "start": "832040",
    "end": "839140"
  },
  {
    "text": "ox tree, stores what I'll\ncall the path parent, which",
    "start": "839140",
    "end": "848410"
  },
  {
    "text": "are these red pointers. The definition is this is, the\npaths, the top nodes, parent,",
    "start": "848410",
    "end": "865240"
  },
  {
    "text": "and represented tree. ",
    "start": "865240",
    "end": "873220"
  },
  {
    "text": "OK, very soon it's\ngoing to get confusing and I'm going to always\nmake it explicit.",
    "start": "873220",
    "end": "878710"
  },
  {
    "text": "Am I talking about the\nrepresented tree the thing we're trying to represent? Or am I talking about auxiliary\ntrees because notion of parent",
    "start": "878710",
    "end": "886690"
  },
  {
    "text": "is different in the two? So in an auxiliary\ntree a parent is just whatever it happens to be\nstored in the splay tree.",
    "start": "886690",
    "end": "894010"
  },
  {
    "text": "When you splay operations\nyou care about those parents. When you're thinking\nabout the tree you're",
    "start": "894010",
    "end": "899830"
  },
  {
    "text": "trying to represent,\nyou care about parents in the represented tree. Now, how do you see that here?",
    "start": "899830",
    "end": "904930"
  },
  {
    "text": "Well following parent is like\ndoing predecessor over here. So we kind of know\nhow to do predecessor",
    "start": "904930",
    "end": "910790"
  },
  {
    "text": "in a binary search tree. But when we get to 0,\nwhich is the left most",
    "start": "910790",
    "end": "916060"
  },
  {
    "text": "node in this tree, corresponds\nto the top of the path, if we want to do the parent\nthat's going up from this path,",
    "start": "916060",
    "end": "924130"
  },
  {
    "text": "that's going to be\nthe path parent. And it saying the\npath's top node, that's this guy 0, its parent\nand the representative tree",
    "start": "924130",
    "end": "932620"
  },
  {
    "text": "are just going to\nstore that pointer. The only weird\nthing is we're not going to store the\npointer here, we're going to store the pointer here.",
    "start": "932620",
    "end": "940420"
  },
  {
    "text": "That's the path parent. We're going to put it at\nthe root of the splay tree, basically because\nit's really easy to get to the root of a tree.",
    "start": "940420",
    "end": "946510"
  },
  {
    "text": "You could probably\nstart here, you just have to go left every time\nand it's kind of annoying. Analysis will get messier.",
    "start": "946510",
    "end": "952899"
  },
  {
    "text": "So we'll put at the root. And so, in particular,\nif I do a rotation, like if I rotate the tree like\nthis and make one the route,",
    "start": "952900",
    "end": "959740"
  },
  {
    "text": "that path parent pointer\nhas to move to 1. But it's still\nrepresenting essentially for this whole splay\ntree representing",
    "start": "959740",
    "end": "965680"
  },
  {
    "text": "this path, what was the\nparent pointer from there. So this is the represented\ntree, and this is the ox tree.",
    "start": "965680",
    "end": "973690"
  },
  {
    "text": " OK, now if I take all the\nox trees plus these parent",
    "start": "973690",
    "end": "980290"
  },
  {
    "text": "pointers, I get something\ncalled the tree of ox trees. ",
    "start": "980290",
    "end": "990760"
  },
  {
    "text": "And this is our representation. So there's the represented\nthing versus our representation.",
    "start": "990760",
    "end": "997180"
  },
  {
    "text": "I'm not going to use the word\nrepresentation because it sounds almost like represented. So it's going to be represented\nversus tree of ox trees.",
    "start": "997180",
    "end": "1004350"
  },
  {
    "text": "Tree of ox trees\nis what we store, represented is what\nwe want to store. That's what we're\ntrying to represent.",
    "start": "1004350",
    "end": "1011700"
  },
  {
    "text": "So that's the\nterminology, Basically, we",
    "start": "1011700",
    "end": "1017160"
  },
  {
    "text": "want the tree of ox\ntrees to be balanced, and if there's splay trees,\nthey'll be kind of balanced. ",
    "start": "1017160",
    "end": "1024390"
  },
  {
    "text": "Whereas, the represented\ntree is on balance. Cool so now I want\nto give you some code",
    "start": "1024390",
    "end": "1030990"
  },
  {
    "text": "and how we're going to\nmanipulate these things. And then we'll be able\nto analyze the code and that both will\ntake a little while.",
    "start": "1030990",
    "end": "1037618"
  },
  {
    "start": "1037619",
    "end": "1062871"
  },
  {
    "text": "The main operation I'm\ngoing to talk about is actually just a\nhelper operation. So first I want to tell you\nwhat it is, how it works.",
    "start": "1062871",
    "end": "1072820"
  },
  {
    "text": "It's like an access\nin a tango tree. With tango trees we just\nwanted to touch item xi",
    "start": "1072820",
    "end": "1080100"
  },
  {
    "text": "and then go onto the\nnext item, xi plus 1. So I'm going to think\nabout that world, while all I'm trying\nto do is touch nodes.",
    "start": "1080100",
    "end": "1086274"
  },
  {
    "text": "What's interesting\nabout touching nodes is it changes this notion\nof preferred edges.",
    "start": "1086275",
    "end": "1092590"
  },
  {
    "text": "So, as I said, the last\naccess in that subtree was blah, blah, blah. So access. ",
    "start": "1092590",
    "end": "1099690"
  },
  {
    "text": "In reality, what I\nmean is the last time that node was used as a link\nor cut or find operation.",
    "start": "1099690",
    "end": "1106560"
  },
  {
    "text": "But in fact I'm going\nto make that explicit. Every operation is going to\nstart by calling this function",
    "start": "1106560",
    "end": "1111630"
  },
  {
    "text": "access on its arguments. Question? AUDIENCE: I still\ndon't understand.",
    "start": "1111630",
    "end": "1117498"
  },
  {
    "text": "When you say that this\n[INAUDIBLE] by depth-- PROFESSOR: Yes.",
    "start": "1117498",
    "end": "1122646"
  },
  {
    "text": "AUDIENCE: How do you\ngo from that path to the actual splay tree? PROFESSOR: OK so the\ntransformation from this path",
    "start": "1122646",
    "end": "1129160"
  },
  {
    "text": "in the represented\ntree to splay tree is just these nodes have\ndepth within that path,",
    "start": "1129160",
    "end": "1135750"
  },
  {
    "text": "I mean they're just\nstored along the path. What I mean is, I want to store\nthem in as a binary search tree ordered by that value.",
    "start": "1135750",
    "end": "1143390"
  },
  {
    "text": "So that's what-- yeah. So splay trees have\nsome key on the nodes,",
    "start": "1143390",
    "end": "1148419"
  },
  {
    "text": "they maintain the binary\nsearch tree property. My key is just going\nto be the depth. The position along the path. AUDIENCE: So if you do an\nin order traversal you just",
    "start": "1148420",
    "end": "1155352"
  },
  {
    "text": "get the path. PROFESSOR: Right if I do\nit in order traversal here, I'll get the path back. Yep, no problem.",
    "start": "1155352",
    "end": "1162750"
  },
  {
    "text": "That's going to be\nimportant to understand. OK, so to do an access, access\nis going to do two things.",
    "start": "1162750",
    "end": "1169600"
  },
  {
    "text": "The first thing it has to\ndo, and the other thing is going to make our\nlife easy, you'll",
    "start": "1169600",
    "end": "1175500"
  },
  {
    "text": "see once we've defined access,\nall operations become trivial. So it's going to be a\nreally cool helper function.",
    "start": "1175500",
    "end": "1181529"
  },
  {
    "start": "1181530",
    "end": "1186580"
  },
  {
    "text": "The first thing we have to\ndo, when we access a node v, is say well that then by\ndefinition the path to v from",
    "start": "1186580",
    "end": "1193230"
  },
  {
    "text": "the root --v to root I guess,\nsort of, but probably more root to v--",
    "start": "1193230",
    "end": "1198672"
  },
  {
    "text": " should be preferred.",
    "start": "1198672",
    "end": "1203940"
  },
  {
    "text": "That's the definition\nof preferred because now it's the\nlatest thing accessed. ",
    "start": "1203940",
    "end": "1211859"
  },
  {
    "text": "So we've got to fix that.  But we're going to\ndo a little bit more",
    "start": "1211859",
    "end": "1216890"
  },
  {
    "text": "we're also going to make\nv the root of its ox tree.",
    "start": "1216890",
    "end": "1224530"
  },
  {
    "start": "1224530",
    "end": "1230270"
  },
  {
    "text": "Which will mean, because\nthat ox tree is now the top most ox tree because\nthat actually contains the root",
    "start": "1230270",
    "end": "1236900"
  },
  {
    "text": "and it contains v. So\nin fact, v is the root",
    "start": "1236900",
    "end": "1243830"
  },
  {
    "text": "of the tree of ox trees. It's the overall root for\nthis tree of our streets.",
    "start": "1243830",
    "end": "1254420"
  },
  {
    "text": "Why do we do that? Well, it's sort of going to\njust be a consequence of using splay, because whenever\nyou splice something",
    "start": "1254420",
    "end": "1259880"
  },
  {
    "text": "you move it to the root\nin this zigzaggy way. But it will actually be really\nhelpful to have this property,",
    "start": "1259880",
    "end": "1267200"
  },
  {
    "text": "and that's why these are the\nsimplest link-cut trees I know. OK, so how do we do this?",
    "start": "1267200",
    "end": "1275299"
  },
  {
    "text": "So you're given the node\nv somewhere in this world, and we've basically got to\nfix a lot of preferred child",
    "start": "1275300",
    "end": "1281480"
  },
  {
    "text": "pointers. And, whereas, tango\ntrees basically walked from the top down,\nnavigating one preferred path",
    "start": "1281480",
    "end": "1290419"
  },
  {
    "text": "until it found the\nright place to exit and then fixing that edge, were\ngoing to be working bottom up. Because we already know where\nthe vertexes, were given it,",
    "start": "1290420",
    "end": "1298010"
  },
  {
    "text": "and we need to walk our way\nup the tree and kind of push v to the root overall.",
    "start": "1298010",
    "end": "1303620"
  },
  {
    "text": "So the first thing\nto do is splay v. So",
    "start": "1303620",
    "end": "1310040"
  },
  {
    "text": "that, now, when I say splay\nv, I mean within its ox tree.",
    "start": "1310040",
    "end": "1316990"
  },
  {
    "text": "Doesn't make sense to do\nit in any global sense. In some sense access is going to\nbe our global version of splay.",
    "start": "1316990",
    "end": "1324060"
  },
  {
    "text": "Whenever I say splay a node, I\nmean just within its ox tree. That's going to be the\ndefinition of splay tree. So you may recall from Lecture\nSix there's the zig-zig case",
    "start": "1324060",
    "end": "1332380"
  },
  {
    "text": "and zig-zag case. You do some rotation,\ndouble rotation, whatever. In the end, maybe one\nmore rotation, and then v",
    "start": "1332380",
    "end": "1338840"
  },
  {
    "text": "becomes the root. So what does the\npicture look like? We've got v at the\nroot of it's ox tree.",
    "start": "1338840",
    "end": "1345260"
  },
  {
    "text": "Then we've got things\nin the left subtree which have smaller depth. And then we've got things\nin the right subtree of tree",
    "start": "1345260",
    "end": "1351710"
  },
  {
    "text": "which have bigger depth. Depth bigger than v. So we\njust pulled to the root.",
    "start": "1351710",
    "end": "1358620"
  },
  {
    "text": "So in the represented tree\nwhat we have is a path v. These are things of smaller depth\nthese things of larger depth.",
    "start": "1358620",
    "end": "1366210"
  },
  {
    "text": "Now, if you look at the\ndefinition of preferred child, when we access v, v now no\nlonger has a preferred child.",
    "start": "1366210",
    "end": "1374480"
  },
  {
    "text": "This preferred\nchild is now none. If you look at\nthis picture, this is a preferred path, currently,\nv has a preferred child.",
    "start": "1374480",
    "end": "1382649"
  },
  {
    "text": "We want to get rid of that. That's our first operation. ",
    "start": "1382650",
    "end": "1389330"
  },
  {
    "text": "First thing we want to do\nis get rid of that edge. It's no longer a preferred edge.",
    "start": "1389330",
    "end": "1395460"
  },
  {
    "text": "So that essentially\ncorresponds to this edge because that's the connection\nfrom v to deeper things.",
    "start": "1395460",
    "end": "1402040"
  },
  {
    "text": "I mean in fact, this\nnode right below us let's call it x is right here.",
    "start": "1402040",
    "end": "1409530"
  },
  {
    "text": "It's the smallest\ndepth among the nodes with larger depth than v. But if we kind of\nkill that connection,",
    "start": "1409530",
    "end": "1416080"
  },
  {
    "text": "then, now, this path is its\nown thing, the part below v, separate from v and above.",
    "start": "1416080",
    "end": "1422120"
  },
  {
    "text": "So that's what we're\ngoing to do first. Remove these preferred child.",
    "start": "1422120",
    "end": "1429340"
  },
  {
    "text": " And I'm going to elaborate\nexactly the point arithmetic",
    "start": "1429340",
    "end": "1436092"
  },
  {
    "text": "that makes that happen.  This is the kind of tedious\npart of, or really any point",
    "start": "1436092",
    "end": "1443770"
  },
  {
    "text": "of machine data structure. This is going to all work on a\npoint of machine, by the way. ",
    "start": "1443770",
    "end": "1465710"
  },
  {
    "text": "OK, so basically I'm\nobliterating the edge. So I'm going to make this\nvertex here, have a path parent",
    "start": "1465710",
    "end": "1475770"
  },
  {
    "text": "pointer to v and otherwise\nobliterate this edge.",
    "start": "1475770",
    "end": "1481920"
  },
  {
    "text": "It will no longer has a parent,\nv no longer has a right child. So it's going to be v has a\nleft thing and no right pointer.",
    "start": "1481920",
    "end": "1490680"
  },
  {
    "text": "But this separate tree is\ngoing to a parent pointer to v. This is, of course,\nif it exists.",
    "start": "1490680",
    "end": "1496860"
  },
  {
    "text": "If v.right is nothing already,\nthen you don't do any of this. But if there is a right pointer\nthen you've got to do this.",
    "start": "1496860",
    "end": "1504456"
  },
  {
    "text": "So this is the place\nwhere we're going to set path parents,\npretty obvious stuff. The only thing to check\nis that this is really",
    "start": "1504457",
    "end": "1510960"
  },
  {
    "text": "in the right place. This thing is the root\nof this ox tree, which is where the parent pointer\npath parent supposed to be,",
    "start": "1510960",
    "end": "1518790"
  },
  {
    "text": "and it points to v meaning,\nthat the parent of x is v in the represented tree.",
    "start": "1518790",
    "end": "1524220"
  },
  {
    "text": "And that's exactly\nwhat this picture is. This is the represented\ntree parent of x is v,",
    "start": "1524220",
    "end": "1529410"
  },
  {
    "text": "and so that's the correct\ndefinition of pat parent. Cool.",
    "start": "1529410",
    "end": "1534650"
  },
  {
    "text": "OK, now the fun part. ",
    "start": "1534650",
    "end": "1542419"
  },
  {
    "text": "Now, we're going to\nwalk up the tree.  We've seen everything on the\noutline except this heavy light",
    "start": "1542419",
    "end": "1549390"
  },
  {
    "text": "decomposition. We'll come to that soon. ",
    "start": "1549390",
    "end": "1557480"
  },
  {
    "text": "OK, so now we're going\nto walk up the tree and add new preferred\nchild pointers.",
    "start": "1557480",
    "end": "1565710"
  },
  {
    "text": "This is the one that we\nhad to remove because it's the stuff below v. But up the\npath, if we walk up to the root",
    "start": "1565710",
    "end": "1572940"
  },
  {
    "text": "here, to the left\nmost node of v then there's a path\nparent from there, we want to make that not a path\nparent but a regular parent.",
    "start": "1572940",
    "end": "1581330"
  },
  {
    "text": "Because that right\nnow, is living in its own little\npreferred path that we want that preferred path to\nextend all the way to the root,",
    "start": "1581330",
    "end": "1589230"
  },
  {
    "text": "by the definition of a\nchild after doing an access. So we're going to do a loop\nuntil v path parent is none.",
    "start": "1589230",
    "end": "1602940"
  },
  {
    "start": "1602940",
    "end": "1608799"
  },
  {
    "text": "I'm going to let w\nbe v's path parent. ",
    "start": "1608800",
    "end": "1617470"
  },
  {
    "text": "save some writing. And then we're going to splay w. OK, I think at this point,\nI should draw a picture.",
    "start": "1617470",
    "end": "1625540"
  },
  {
    "text": "So many pictures to draw.",
    "start": "1625540",
    "end": "1635020"
  },
  {
    "text": "So we have, let's say, a\nnode w as a child v. This",
    "start": "1635020",
    "end": "1641610"
  },
  {
    "text": "is the represented tree. That's some other child x\nand I can have many children.",
    "start": "1641610",
    "end": "1650370"
  },
  {
    "text": "Let's suppose that, right now,\nthe preferred child from w is x.",
    "start": "1650370",
    "end": "1655890"
  },
  {
    "text": "It's not v because we just\nfollowed a path parent pointer to go from v's path, which is\nsomething here, to w's path.",
    "start": "1655890",
    "end": "1662940"
  },
  {
    "text": "So w's path is going to\nbe something like this. So it goes to some\nother guy x, we",
    "start": "1662940",
    "end": "1668490"
  },
  {
    "text": "want change that that pointer. Instead of being that,\nwe want to go here.",
    "start": "1668490",
    "end": "1676160"
  },
  {
    "text": "That's in the represented tree. Now what does this look like\nin the tree of ox trees?",
    "start": "1676160",
    "end": "1683610"
  },
  {
    "text": "W lives in some thing. ",
    "start": "1683610",
    "end": "1689760"
  },
  {
    "text": "w's there, x's its\nsuccessor in there, so maybe it's like a\nright child or whatever,",
    "start": "1689760",
    "end": "1699720"
  },
  {
    "text": "somewhere else in the tree. And then separately we've\nalready built this thing. v it has a left child, it has\nno right child because there's",
    "start": "1699720",
    "end": "1708210"
  },
  {
    "text": "nothing deeper than v in\nits own preferred path. And then we have a path parent\npointer that goes like this.",
    "start": "1708210",
    "end": "1715950"
  },
  {
    "text": " I want to fix. That the first thing I'm\ngoing to do is splay w,",
    "start": "1715950",
    "end": "1722860"
  },
  {
    "text": "so the w is in the\nroot of its own tree. So then it's going\nto look like w.",
    "start": "1722860",
    "end": "1730480"
  },
  {
    "text": "It's going to have a left child,\nleft subtree, right subtree. X is going to be its\nsuccessor so it's",
    "start": "1730480",
    "end": "1736360"
  },
  {
    "text": "the leftmost thing in there. And we still have v with its\nleft child and this pointer.",
    "start": "1736360",
    "end": "1746020"
  },
  {
    "text": "It's not in the tree. So if two ox trees, now I want\nto basically merge these two ox trees, but also get\nrid of this stuff.",
    "start": "1746020",
    "end": "1753880"
  },
  {
    "text": "Just like we did\nup here actually. First, I have to destroy\nthis preferred child and then make a new\none, which is v.",
    "start": "1753880",
    "end": "1760780"
  },
  {
    "text": "So how do I do it? I just replace the\nright pointer from w to be v instead of whatever\nthis thing is that's it.",
    "start": "1760780",
    "end": "1769480"
  },
  {
    "text": "So say, switch w's preferred\nchild to be v. And what we do",
    "start": "1769480",
    "end": "1782110"
  },
  {
    "text": "is say w, first we clip\noff the existing guy,",
    "start": "1782110",
    "end": "1791440"
  },
  {
    "text": "we say this node's w.rights path\nparent is now going to be w.",
    "start": "1791440",
    "end": "1797110"
  },
  {
    "text": "We still want to have some way\nto get from here back up to w, just like we did up here. This code is going to look very\nsimilar to these two lines.",
    "start": "1797110",
    "end": "1804530"
  },
  {
    "text": "We set it's parents to none.  And we set w.right.",
    "start": "1804530",
    "end": "1813560"
  },
  {
    "text": "Up, here we set it to none. Now we know it\nactually needs to be v. And then we set\nthe reverse pointer",
    "start": "1813560",
    "end": "1819880"
  },
  {
    "text": "so v's parent is now w and v\nno longer has a path parent.",
    "start": "1819880",
    "end": "1826150"
  },
  {
    "start": "1826150",
    "end": "1831920"
  },
  {
    "text": "So essentially the reverse\nof these operations. So we remove this\npreferred child pointer",
    "start": "1831920",
    "end": "1838450"
  },
  {
    "text": "and we add this one in. So the new picture will be,\nwe have w has its left subtree",
    "start": "1838450",
    "end": "1844840"
  },
  {
    "text": "just like before. It's right subtree is now\nv with its left subtree. And then we also have this\nother tree hanging out.",
    "start": "1844840",
    "end": "1853210"
  },
  {
    "text": "Not directly connected except\nby path parent pointer. So whereas before, v was\nlinked in with the path parent",
    "start": "1853210",
    "end": "1859510"
  },
  {
    "text": "pointer, now this thing is\nlinked to in the parent pointer and sort of the\nprimary connection, the white connection\nis direct from w to v.",
    "start": "1859510",
    "end": "1867670"
  },
  {
    "text": "And that's exactly\nwhat corresponds to clipping off this portion\nof the preferred path and concatenating on this\nportion of the preferred path.",
    "start": "1867670",
    "end": "1876330"
  },
  {
    "text": "More or less clear? You can double\ncheck this at home but that's what we need to, do.",
    "start": "1876330",
    "end": "1883753"
  },
  {
    "text": "To go back and forth\nbetween these two worlds. The represented world\nand the tree of our world",
    "start": "1883754",
    "end": "1888969"
  },
  {
    "text": "is doing the right thing. Again you can check that\nthis path parent is, indeed,",
    "start": "1888969",
    "end": "1894620"
  },
  {
    "text": "the right thing. It's essentially saying\nthe parent of x equals w, which is, indeed, the case.",
    "start": "1894620",
    "end": "1899890"
  },
  {
    "text": "That left most thing\nhere, its parent is w.",
    "start": "1899890",
    "end": "1905640"
  },
  {
    "text": "Cool last thing we do is\nkind of a lame way to say it,",
    "start": "1905640",
    "end": "1911730"
  },
  {
    "text": "but I want to splay v\nwithin its ox tree Now, v is a child of the root. So this just means\nrotate v. So what",
    "start": "1911730",
    "end": "1921289"
  },
  {
    "text": "it's going to look like\nis v becomes the root, it's left child is w, that\nleft child is whatever,",
    "start": "1921290",
    "end": "1930690"
  },
  {
    "text": "that right child is whatever. V will still have no right\nchild because v is the deepest node in it's preferred path.",
    "start": "1930690",
    "end": "1936720"
  },
  {
    "text": "So there's nothing\ndeeper than it. There's nothing\nto the right of v. So these two\ntriangles go to here.",
    "start": "1936720",
    "end": "1942010"
  },
  {
    "text": "Of course, there's still the\nold triangle with x in it, and it's still going to prefer\nit's still going to point to w.",
    "start": "1942010",
    "end": "1947500"
  },
  {
    "text": " But we want v to\neventually end up to be the very, very root so\nI'd like to make the root again",
    "start": "1947500",
    "end": "1955860"
  },
  {
    "text": "after I did this concatenation. And so there you go you can\nthink of this as a second splay",
    "start": "1955860",
    "end": "1963260"
  },
  {
    "text": "if you want or as a\nrotation, either way.",
    "start": "1963260",
    "end": "1970170"
  },
  {
    "text": "And now we're going to loop. OK, the one thing I\ndidn't make explicit is that when we do a splay,\nor when we do a rotation,",
    "start": "1970170",
    "end": "1978870"
  },
  {
    "text": "you have to carry along\nthe path parent pointer. So like right now,\nsorry, in this picture,",
    "start": "1978870",
    "end": "1985830"
  },
  {
    "text": "w has some path parent\npointer because it's the root of its ox tree. After we do the\nrotation, v is the root",
    "start": "1985830",
    "end": "1991398"
  },
  {
    "text": "and so it's going to have\nthe parent path parent point. Or you can just define rotate\nto preserve that information.",
    "start": "1991399",
    "end": "1998769"
  },
  {
    "text": "So now v has some new path\nparent and we do the loop. As long as it is not\nthere's something there,",
    "start": "1998770",
    "end": "2004650"
  },
  {
    "text": "we're going to splay\nit stick them together. Repeat, the number\nof times we repeat,",
    "start": "2004650",
    "end": "2010490"
  },
  {
    "text": "is equal to the number of\npreferred child changes. So that's how we're going\nto analyze the thing.",
    "start": "2010490",
    "end": "2016000"
  },
  {
    "text": "How many times does a child\nhave to change in this world.",
    "start": "2016000",
    "end": "2021020"
  },
  {
    "text": "OK, clear, more or\nless that is that's",
    "start": "2021020",
    "end": "2027410"
  },
  {
    "text": "the hard the hard\noperation access. ",
    "start": "2027410",
    "end": "2032960"
  },
  {
    "text": "One thing to note is v will\nhave no right child at the end, and it will be the root\nof the tree of ox trees.",
    "start": "2032960",
    "end": "2039410"
  },
  {
    "text": "Why the tree of ox trees? When we stop, we\nhave no path parent. That means we are\nthe overall root.",
    "start": "2039410",
    "end": "2045720"
  },
  {
    "text": "So that's the end.  Cool now let me\ntell you how to do--",
    "start": "2045720",
    "end": "2054830"
  },
  {
    "text": "first, I'll do the\nqueries, and then I'll do the updates, link-cut. Cut Make tree, I'm pretty\nsure, if you all think",
    "start": "2054830",
    "end": "2060590"
  },
  {
    "text": "you know how did you make tree. So let's start with find root. ",
    "start": "2060590",
    "end": "2068530"
  },
  {
    "text": "So for find root, first thing\nwe're going to do is access v.",
    "start": "2068530",
    "end": "2076149"
  },
  {
    "text": "So what that gives us is v, no\nright child, some left child.",
    "start": "2076150",
    "end": "2082750"
  },
  {
    "text": "This is v's ox tree, but the\nroots of the overall tree is right here.",
    "start": "2082750",
    "end": "2088949"
  },
  {
    "text": "This is r.  Because, in the\nend, we know that,",
    "start": "2088949",
    "end": "2094610"
  },
  {
    "text": "the mean the root ox tree\nalways contains the root node of the tree, and the\naccess operation makes it also",
    "start": "2094610",
    "end": "2102010"
  },
  {
    "text": "contain v So what's the highest\nnode in that path from r to v?",
    "start": "2102010",
    "end": "2109400"
  },
  {
    "text": "Well, it's the left\nmost node in the thing. So you just block left\nto find the root r.",
    "start": "2109400",
    "end": "2120650"
  },
  {
    "text": "And then, we are going to do\none more thing, which splay r. If we didn't splay\nr, we'd be in trouble",
    "start": "2120650",
    "end": "2126410"
  },
  {
    "text": "because this is a splay tree. If you say this r might be\nextremely deep in the tree.",
    "start": "2126410",
    "end": "2132359"
  },
  {
    "text": "And so if you just repeatedly\nsaid, find root of v, find v for the same\nv, you don't want to have to walk down linear\nlength path every single time.",
    "start": "2132360",
    "end": "2139940"
  },
  {
    "text": "So we're going to splay it\nevery time we touch the root, so that very soon r will be\nnear the root of the tree of ox",
    "start": "2139940",
    "end": "2147500"
  },
  {
    "text": "trees, and so this\noperation will become fast. So amortized it will\nalways be order log n. But we need to do that.",
    "start": "2147500",
    "end": "2154970"
  },
  {
    "text": "OK that's fine root. Let's do half aggregate. ",
    "start": "2154970",
    "end": "2165570"
  },
  {
    "text": "Of aggregates\nbasically the same. Actually, even easier. First thing we do like\nall of our operations,",
    "start": "2165570",
    "end": "2172039"
  },
  {
    "text": "is access v, so we\nget that picture. So remember what\nthis corresponds to?",
    "start": "2172040",
    "end": "2178700"
  },
  {
    "text": "This is an ox tree that\nrepresents a path ending in v",
    "start": "2178700",
    "end": "2186026"
  },
  {
    "text": "So this is in the\nrepresented tree. And the goal of a\npath aggregate is",
    "start": "2186026",
    "end": "2191840"
  },
  {
    "text": "to compute the min or the max\nor to some of those things. So I basically\nhave this tree that",
    "start": "2191840",
    "end": "2197450"
  },
  {
    "text": "represents exactly the\nthings I care about, and I just need to do a sum\nor a min or a max or whatever.",
    "start": "2197450",
    "end": "2203780"
  },
  {
    "text": "So easy way to do it is\naugment all the ox trees to have subtree\nsize, subtree sums, or mins or maxes, whatever\noperations you care about.",
    "start": "2203780",
    "end": "2211859"
  },
  {
    "text": "And so then it's just a return\nv.subtree min max, whatever.",
    "start": "2211860",
    "end": "2223510"
  },
  {
    "text": " You have to have to check\nwhen we do link-cuts",
    "start": "2223510",
    "end": "2230707"
  },
  {
    "text": "that it's easy to maintain\naugmentation like this, but it is. And now this, the\nsubtree aggregations",
    "start": "2230707",
    "end": "2237200"
  },
  {
    "text": "are relative to\nyour own ox tree. You don't go deeper. In fact, there's\nno way to go deeper",
    "start": "2237200",
    "end": "2242240"
  },
  {
    "text": "because if you look\nat the structure, there's no way to go down. We store these path\nparents, but we can't afford to store path\nchildren because a node may",
    "start": "2242240",
    "end": "2249950"
  },
  {
    "text": "have a zillion path children. So it's kind of\nawkward to store them. we don't have to because\nthis aggregation is just",
    "start": "2249950",
    "end": "2257900"
  },
  {
    "text": "within the ox tree. That's exactly\nwhat we care about because it represents that\npath and nothing more.",
    "start": "2257900",
    "end": "2264120"
  },
  {
    "text": "So you see, access makes\nour life pretty darn easy. Once that path is preferred,\nwe can do whatever",
    "start": "2264120",
    "end": "2270650"
  },
  {
    "text": "we need to with that path. We can compute aggregations,\nthe root, anything pretty",
    "start": "2270650",
    "end": "2276350"
  },
  {
    "text": "much instantly once\nwe have access.  OK, I claim also link\nand cut are really easy.",
    "start": "2276350",
    "end": "2284240"
  },
  {
    "text": " So let me show you that.",
    "start": "2284240",
    "end": "2291210"
  },
  {
    "text": "So let's start with cut.  First thing we do, you\nguessed it, access v. So",
    "start": "2291210",
    "end": "2303320"
  },
  {
    "text": "think about this\npicture a little bit. So we have v, have this stuff.",
    "start": "2303320",
    "end": "2308900"
  },
  {
    "text": "What this corresponds\nto, this is the ox tree in the represented tree. This is a path\nfrom the root to v.",
    "start": "2308900",
    "end": "2317090"
  },
  {
    "text": "And our goal in\nthe cut operation is to separate v from its\nparent in the represented tree.",
    "start": "2317090",
    "end": "2322700"
  },
  {
    "text": "So we want to remove this\nedge above v. That basically corresponds to this edge.",
    "start": "2322700",
    "end": "2328970"
  },
  {
    "text": "Connection from v to all the\nthings less deep than it. So this is the preferred path. Of course, in reality, there\nis some subtree down here,",
    "start": "2328970",
    "end": "2337040"
  },
  {
    "text": "and that's going to correspond\nto things that are linked here by path parent pointers. So they'll come along for the\nride, because what they know",
    "start": "2337040",
    "end": "2345410"
  },
  {
    "text": "is they're attached to v.\nAnd so all we need to do is delete this edge\nand we're done.",
    "start": "2345410",
    "end": "2351650"
  },
  {
    "text": "It's kind of crazy,\nbut it works.",
    "start": "2351650",
    "end": "2357450"
  },
  {
    "text": "So what we do, say, v\nleft the parent is none.",
    "start": "2357450",
    "end": "2367550"
  },
  {
    "text": "The left is none. That's it.",
    "start": "2367550",
    "end": "2372860"
  },
  {
    "text": "Gone. That edge has disappeared. What will be left with\nis v all by itself.",
    "start": "2372860",
    "end": "2380405"
  },
  {
    "text": "/ Has no left child,\nno right child. It still has some things that\nlink into it via path parent",
    "start": "2380405",
    "end": "2388070"
  },
  {
    "text": "pointers. But v is alone in its ox\ntree after you do a cut.",
    "start": "2388070",
    "end": "2396500"
  },
  {
    "text": "This thing will now live\nin a separate world. In particular, this node\nbecomes the new root",
    "start": "2396500",
    "end": "2403760"
  },
  {
    "text": "of the tree of ox\ntrees for this tree. after we do the cut,\nthere's two trees.",
    "start": "2403760",
    "end": "2408770"
  },
  {
    "text": "So there's two\ntrees of ox trees. There's the one with v,\nv will remain the root of its tree of ox trees.",
    "start": "2408770",
    "end": "2414200"
  },
  {
    "text": "And the other one,\nthis thing called x, becomes its own root of\nits own tree of ox trees.",
    "start": "2414200",
    "end": "2421720"
  },
  {
    "text": "So there's nothing else to do. It doesn't need a parent\npointer because it's not linked to anything above it.",
    "start": "2421720",
    "end": "2428230"
  },
  {
    "text": "The end. OK, I corresponds to\nsome node up here.",
    "start": "2428230",
    "end": "2433740"
  },
  {
    "text": "Kind of the median node. ",
    "start": "2433740",
    "end": "2439130"
  },
  {
    "text": "So there you go. That's a cut. It's like super short code. You have to stare\nat it for a while",
    "start": "2439130",
    "end": "2445290"
  },
  {
    "text": "and make sure it does all the\nright things, but it does. How about a link?",
    "start": "2445290",
    "end": "2451240"
  },
  {
    "text": "Well first thing we do on a\nlink, is access v and access w. These don't interfere\nwith each other",
    "start": "2451240",
    "end": "2456540"
  },
  {
    "text": "because precondition\nis that v and w are in different trees of ox trees. They're indifferent\nrepresented trees.",
    "start": "2456540",
    "end": "2464520"
  },
  {
    "text": "So they're completely\nindependent. The result will\nbe that we have-- ",
    "start": "2464520",
    "end": "2475029"
  },
  {
    "text": "should be consistent --so\nox trees are on the left. We're going to have w, is\ngoing to have a left thing.",
    "start": "2475030",
    "end": "2482690"
  },
  {
    "text": "We're going to have v claim\nall by itself because remember what a link does?",
    "start": "2482690",
    "end": "2488540"
  },
  {
    "text": "It's right here, v is\nassumed to be a root node. So if you do an access\non the root node,",
    "start": "2488540",
    "end": "2494029"
  },
  {
    "text": "then the path from the root\nto v is a very short path. It is just v itself. So the ox tree\ncontaining v, will just",
    "start": "2494030",
    "end": "2500329"
  },
  {
    "text": "be v itself when you\ndo x as v. Yeah, so",
    "start": "2500330",
    "end": "2506060"
  },
  {
    "text": "this is the picture\nin represented space. And so we access v,\nwe're going to have this.",
    "start": "2506060",
    "end": "2511880"
  },
  {
    "text": "Of course, there's\nstuff pointing into it. We're at access w, so it's\ngoing to look like this. And then this path is going\nto be what's over here.",
    "start": "2511880",
    "end": "2520244"
  },
  {
    "text": "And there's, of\ncourse, more stuff linked from below into those. Our goal is to add this\nedge between v and w, which",
    "start": "2520244",
    "end": "2528049"
  },
  {
    "text": "corresponds to\nadding this change. ",
    "start": "2528050",
    "end": "2535049"
  },
  {
    "text": "So that's what\nwe're going to do. V.left left equals w.",
    "start": "2535050",
    "end": "2540278"
  },
  {
    "text": " W.parent equals v.",
    "start": "2540278",
    "end": "2549920"
  },
  {
    "text": "If you want, you could instead\nmake v the right child of w. And that looks much more sane.",
    "start": "2549920",
    "end": "2555740"
  },
  {
    "text": "I like it this way because\nit looks kind of insane. This is not unbalanced\nor anything. But splay trees will fix it\nso you don't have to worry.",
    "start": "2555740",
    "end": "2562220"
  },
  {
    "text": "This is the carefree\napproach to data structuring. And you just leave it to\nthe analysis to make sure.",
    "start": "2562220",
    "end": "2567830"
  },
  {
    "text": "Everything here is going\nto be log n amortized. But you can check this is doing\nthe right thing, because v",
    "start": "2567830",
    "end": "2576170"
  },
  {
    "text": "is deeper than w, right? So we had this path from\nthe root over here to w.",
    "start": "2576170",
    "end": "2581250"
  },
  {
    "text": "We're extending the\npath by one node, v, and so v should be to\nthe right of everything. So either it goes that\nhere is that right child",
    "start": "2581250",
    "end": "2588140"
  },
  {
    "text": "w that would also work, or\nwould make it the parent of w on the right that works.",
    "start": "2588140",
    "end": "2593280"
  },
  {
    "text": "It's in the correct order,\nbinary search tree order. OK? So you see length and\nlinks and cuts are easy.",
    "start": "2593280",
    "end": "2600474"
  },
  {
    "text": "In fact, the most\ncomplicated was find root where we had\nto do a walk and splay,",
    "start": "2600475",
    "end": "2605690"
  },
  {
    "text": "but basically, everything\nreduces to access. If access is fast,\nall these operations",
    "start": "2605690",
    "end": "2610910"
  },
  {
    "text": "will be fast because they\nspend essentially constant time plus a constant\nnumber of accesses.",
    "start": "2610910",
    "end": "2616365"
  },
  {
    "text": "Except for find root. It also doesn't splay. But we're going to show\ndisplays are efficient as, well as part of access, because\naccess does a ton of splays.",
    "start": "2616365",
    "end": "2624010"
  },
  {
    "text": "So this is log n\namortize, surely one splay is log n amortized. And indeed, that\nwill be the case.",
    "start": "2624010",
    "end": "2630300"
  },
  {
    "text": "AUDIENCE: Splay as access. PROFESSOR: Here, I'm treating\nsplaying not as an access.",
    "start": "2630300",
    "end": "2636680"
  },
  {
    "text": "So I'm going to define access\nto mean calling this function. AUDIENCE: [INAUDIBLE].",
    "start": "2636680",
    "end": "2641976"
  },
  {
    "start": "2641976",
    "end": "2647140"
  },
  {
    "text": "PROFESSOR: OK so over\nhere, access first splays v and displays various things. It might not splay r.",
    "start": "2647140",
    "end": "2653914"
  },
  {
    "text": "AUDIENCE: No, I'm saying, do\nyou call access r [INAUDIBLE]? PROFESSOR: Oh good.",
    "start": "2653914",
    "end": "2659270"
  },
  {
    "text": "That might simplify my analysis. I'll just change this\nline to access r.",
    "start": "2659270",
    "end": "2665539"
  },
  {
    "text": "Good, why not? ",
    "start": "2665540",
    "end": "2671059"
  },
  {
    "text": "Yeah, that seems\nlike a good way. ",
    "start": "2671060",
    "end": "2676400"
  },
  {
    "text": "OK, I think you could do that. It might simplify,\nconceptually, what's going on.",
    "start": "2676400",
    "end": "2681410"
  },
  {
    "text": "The one thing I find\nannoying about it's just-- it's an aesthetic, let's say.",
    "start": "2681410",
    "end": "2687049"
  },
  {
    "text": "So here, I was talking\nabout the last access. And if you define lost access\nto mean access, that's fine.",
    "start": "2687050",
    "end": "2693800"
  },
  {
    "text": "But also another intuitive\nnotion of the last access, is the last time it was given to\nany of these functions cut link",
    "start": "2693800",
    "end": "2699650"
  },
  {
    "text": "find root path aggregate. And so r is not really\ngiven to the function. Of course, it's the\noutput of find roots,",
    "start": "2699650",
    "end": "2705650"
  },
  {
    "text": "so maybe you think\nof that as an access. You could say find root\nis accessing the root. Either way, this\nshould work either way,",
    "start": "2705650",
    "end": "2713680"
  },
  {
    "text": "but I think I like that. You just have to\nredefine things a little.",
    "start": "2713680",
    "end": "2719190"
  },
  {
    "text": "OK, let's do some analysis. This is the data structure. Algorithms are all up there\nin they're gory detail.",
    "start": "2719190",
    "end": "2725280"
  },
  {
    "text": "This is. Of course. goriest. ",
    "start": "2725280",
    "end": "2734604"
  },
  {
    "text": "I can now erase the, API.",
    "start": "2734604",
    "end": "2740130"
  },
  {
    "start": "2740130",
    "end": "2753779"
  },
  {
    "text": "Makes me think of\nGoogle versus Oracle. And then following that case?",
    "start": "2753780",
    "end": "2759180"
  },
  {
    "text": "Yeah, it's interesting. ",
    "start": "2759180",
    "end": "2766190"
  },
  {
    "text": "OK pretty clear\nthis implementation",
    "start": "2766190",
    "end": "2783589"
  },
  {
    "text": "is much more significant\nthan the API, but anyway. If First goal is to\nprove log squared.",
    "start": "2783590",
    "end": "2790190"
  },
  {
    "text": "This is just like a warm up. This is actually\ntrivial at this point. We've done all the work to\ndo a lot of squared bound.",
    "start": "2790190",
    "end": "2795830"
  },
  {
    "text": "In fact, you just\nreplace the slay tree with a red-black\ntree, and you know that each of these\noperations is Log n.",
    "start": "2795830",
    "end": "2804380"
  },
  {
    "text": "All displays that we do, I\nmean, you can do essentially like a splay in a balance\nbinary [INAUDIBLE] tree,",
    "start": "2804380",
    "end": "2809754"
  },
  {
    "text": "you can still move\nit to the root. You can still maintain it\ntemporarily and maintain the height is order log n.",
    "start": "2809754",
    "end": "2815237"
  },
  {
    "text": "That's one way to view it. Or you can observe the\nsplay tree analysis that gives you log n,\nwhich we haven't actually",
    "start": "2815237",
    "end": "2820610"
  },
  {
    "text": "covered in this class. Still applies in this scenario. Even though it's not\none splay a tree. It's a bunch of trees.",
    "start": "2820610",
    "end": "2826490"
  },
  {
    "text": "You can show each of the\nsplays is order log n. So what that gives you is that--",
    "start": "2826490",
    "end": "2833900"
  },
  {
    "text": "so we have lets just say\nit's order log n amortized per splay, a few splay trees\nor use regular balancer",
    "start": "2833900",
    "end": "2842680"
  },
  {
    "text": "trees is definitely log n. So then if we do m operations,\nit's going to cost --we're not",
    "start": "2842680",
    "end": "2853220"
  },
  {
    "text": "actually going to be done-- order log n times\nm plus total number",
    "start": "2853220",
    "end": "2861680"
  },
  {
    "text": "of preferred child changes. ",
    "start": "2861680",
    "end": "2874400"
  },
  {
    "text": "This bound should be clear,\nbecause every operation reduces to accesses plus\nconstant amount of work.",
    "start": "2874400",
    "end": "2882170"
  },
  {
    "text": "Maybe one more splay a\nsplay is just another log n. And the total number of\npreferred child changes",
    "start": "2882170",
    "end": "2895100"
  },
  {
    "text": "comes from this access thing. We're doing one splay per\npreferred child change.",
    "start": "2895100",
    "end": "2900609"
  },
  {
    "text": "So that thing is\nreasonable, you just take it, multiply by\nlog n, we're done. So the remaining thing is,\nat this point, just claim.",
    "start": "2900609",
    "end": "2908809"
  },
  {
    "text": "Total number of preferred\ntrial changes is order m log n.",
    "start": "2908810",
    "end": "2914700"
  },
  {
    "text": "So if you take this\nwhole thing, divide by m, you get log squared amortize.",
    "start": "2914700",
    "end": "2921740"
  },
  {
    "text": "So that sounds kind\nof lame, log square is not such a good bound,\nbut it's a warm up.",
    "start": "2921740",
    "end": "2926847"
  },
  {
    "text": "In fact, we need to\nprove this anyway. We need this for\nthe log n analysis. So first thing\nI'm going to do is prove total number of preferred\nchild changes is log squared.",
    "start": "2926847",
    "end": "2936019"
  },
  {
    "text": "Before I do that, I need\nheavy-light decomposition. So to prove, this we're going to\nuse heavy-light decomposition.",
    "start": "2936020",
    "end": "2942140"
  },
  {
    "text": "And this I think, is where\nthings get pretty cool. ",
    "start": "2942140",
    "end": "2962440"
  },
  {
    "text": "So heavy-light\ndecomposition, this is another way to decompose\na tree into paths.",
    "start": "2962440",
    "end": "2970280"
  },
  {
    "text": " So heavy-light\ndecomposition is, again, going to apply to\nthe represented tree.",
    "start": "2970280",
    "end": "2978580"
  },
  {
    "text": "Not the tree of ox trees. It's like an intrinsic thing. It's very simple we define\nthe size of the node",
    "start": "2978580",
    "end": "2987339"
  },
  {
    "text": "to be the number of\nnodes in that subtree. We've done this\nmany times, I think.",
    "start": "2987340",
    "end": "2992740"
  },
  {
    "start": "2992740",
    "end": "2998140"
  },
  {
    "text": "And then, we're going\nto call an edge from v",
    "start": "2998140",
    "end": "3004559"
  },
  {
    "text": "to its parent heavy or light.",
    "start": "3004560",
    "end": "3014150"
  },
  {
    "text": "It's heavy if the size\nof v is more than half",
    "start": "3014150",
    "end": "3023020"
  },
  {
    "text": "of the size of its parent. ",
    "start": "3023020",
    "end": "3032164"
  },
  {
    "text": "And, otherwise,\nit's called light. ",
    "start": "3032164",
    "end": "3041570"
  },
  {
    "text": "OK, so we have parent\nand sub child v has loads of other children.",
    "start": "3041570",
    "end": "3047990"
  },
  {
    "text": "I just want to know, is the\nheaviest of all your children? That's one way to define it. But, in, particular\nis a bigger than half",
    "start": "3047990",
    "end": "3055010"
  },
  {
    "text": "of the total weight of p? So there might not\nbe any heavy child according to this definition. Maybe it's nicely\nevenly balanced.",
    "start": "3055010",
    "end": "3061700"
  },
  {
    "text": "Everybody's got a third. But if somebody has got bigger\nthan 1/2, I call it heavy. Everybody else is light. So there's going to be, at most,\none heavy edge from every node.",
    "start": "3061700",
    "end": "3070490"
  },
  {
    "text": "Therefore, heavy edges decompose\nyour world into path's. Heavy paths decompose the tree.",
    "start": "3070490",
    "end": "3077300"
  },
  {
    "start": "3077300",
    "end": "3088730"
  },
  {
    "text": "Nodes, every node lives\nin some heavy path.",
    "start": "3088730",
    "end": "3094100"
  },
  {
    "text": "It may be node has no heavy\nchilds, but, at most, one. This may seem kind of silly,\nbut in fact, because your maybe",
    "start": "3094100",
    "end": "3103010"
  },
  {
    "text": "all edges are light. This might not do\nanything, every node is in its own path, that's\nactually a really good case,",
    "start": "3103010",
    "end": "3109160"
  },
  {
    "text": "light edges are good. Why are they good? Because then the size of\nv is at most half the size",
    "start": "3109160",
    "end": "3115130"
  },
  {
    "text": "of its parent. I mean, every time you\nfollow a light edge, the size of your subtree\nwent down by a factor of 2.",
    "start": "3115130",
    "end": "3121349"
  },
  {
    "text": "How many times is\ngoing to happen? Log n times. Start with everything at\nthe root, as you walk down,",
    "start": "3121350",
    "end": "3127430"
  },
  {
    "text": "if you're decreasing your\nside effect or two every time, you can only follow log . Light edges.",
    "start": "3127430",
    "end": "3133740"
  },
  {
    "text": "This is what we call the\nlight depth of a node. ",
    "start": "3133740",
    "end": "3142440"
  },
  {
    "text": "This is the number of light\nedges on a root to the path.",
    "start": "3142440",
    "end": "3149545"
  },
  {
    "start": "3149545",
    "end": "3158069"
  },
  {
    "text": "And it is always,\nat most, log n. Now, remember heavy\nedges could be huge.",
    "start": "3158070",
    "end": "3164040"
  },
  {
    "text": "Maybe you follow, maybe\nyour tree is a path. Then every edge is heavy. And you n of them to\nget from the root of v.",
    "start": "3164040",
    "end": "3173579"
  },
  {
    "text": "So we can't bound the\nnumber of heavy edges. But the number of light\nwe can bound as log n.",
    "start": "3173580",
    "end": "3179760"
  },
  {
    "text": "This is where heavy light\nto composition is useful. So you've got preferred\npath composition.",
    "start": "3179760",
    "end": "3186324"
  },
  {
    "text": "Our Or data structure, we're\nnot going to change it. It's still following\nthe preferred path the decomposition. But our analysis is going\nto think about which edges",
    "start": "3186324",
    "end": "3193349"
  },
  {
    "text": "are heavy and which are light. In general, an edge can\nhave four different states.",
    "start": "3193350",
    "end": "3200310"
  },
  {
    "text": "It can be preferred\nor not preferred. And it can be preferred\nor not preferred, it could be heavy or light.",
    "start": "3200310",
    "end": "3207020"
  },
  {
    "text": "All four of those\ncombinations are possible, because one of them has to\ndo with the access sequence, the other has to do with\nthe structure of the tree.",
    "start": "3207020",
    "end": "3214026"
  },
  {
    "text": "These are basically\northogonal to each other.  OK, so let's maybe go here.",
    "start": "3214026",
    "end": "3224609"
  },
  {
    "start": "3224610",
    "end": "3249990"
  },
  {
    "text": "So next thing I'm going to do\nis use heavy light decomposition to analyze total number of\npreferred child changes,",
    "start": "3249990",
    "end": "3256250"
  },
  {
    "text": "by looking at not only\nwhether an edge is preferred or not, but whether\nit is heavy or light. ",
    "start": "3256250",
    "end": "3263960"
  },
  {
    "text": "We're going to get an order m\nlog n bound on preferred child",
    "start": "3263960",
    "end": "3272775"
  },
  {
    "text": "changes. ",
    "start": "3272775",
    "end": "3280970"
  },
  {
    "text": "So here's the big idea. ",
    "start": "3280970",
    "end": "3329970"
  },
  {
    "text": "In order for a preferred\nchild to change, I mean when you change\nfor a child of one node",
    "start": "3329970",
    "end": "3336360"
  },
  {
    "text": "from this to this, I'm\ngoing to think of this edge as being destroyed\nfrom its preferredness,",
    "start": "3336360",
    "end": "3342270"
  },
  {
    "text": "and this one is being created\nin it's preferredness. OK, so of course, if we could\ncount preferred edge equations,",
    "start": "3342270",
    "end": "3352140"
  },
  {
    "text": "that would be basically the\nsame as preferred child changes. Or we could count preferred\nedge destructions,",
    "start": "3352140",
    "end": "3360900"
  },
  {
    "text": "that would be basically, the\nsame as the number of changes. OK, so that's the idea. If you ignore this part, or\nlook at pilferage equations",
    "start": "3360900",
    "end": "3368220"
  },
  {
    "text": "or prefer it is destructions. But then I also care\nabout whether that edge is light or heavy.",
    "start": "3368220",
    "end": "3373890"
  },
  {
    "text": "So it turns out for\nthe light edges, it's going to be easier to\ntalk about the creations",
    "start": "3373890",
    "end": "3379527"
  },
  {
    "text": "or to bound the creations. For heavy edges is\ngoing to be easier to bound the destructions. If I do both of those and\nadd them up, that in total",
    "start": "3379527",
    "end": "3386910"
  },
  {
    "text": "is, basically, the number\nof preferred edge changes according to whether\nthere is light or heavy.",
    "start": "3386910",
    "end": "3392460"
  },
  {
    "text": "You need to add in a\nlittle bit more because and edge might get created\nbut never destroyed.",
    "start": "3392460",
    "end": "3398160"
  },
  {
    "text": "And if it's heavy, then\nit won't get counted here. Or an edge might get\ndestroyed because it",
    "start": "3398160",
    "end": "3403290"
  },
  {
    "text": "exists originally,\nnever got created but it got destroyed\nover the operations. And if it was light, then\nit wouldn't be counted here.",
    "start": "3403290",
    "end": "3409558"
  },
  {
    "text": "So just add on n plus\n1 for all the edges might get a bonus point. But, otherwise,\nthis will bound it,",
    "start": "3409558",
    "end": "3416260"
  },
  {
    "text": "it's going to look at\nlight edge creations-- creations, light preferred edge\ncreations, heavy preferred edge",
    "start": "3416260",
    "end": "3421800"
  },
  {
    "text": "distructions. And it can be destroyed because\nit becomes no longer heavy or no longer preferred.",
    "start": "3421800",
    "end": "3426990"
  },
  {
    "text": "And it can be created\nbecause it becomes light or it becomes preferred and\nwas already the other one.",
    "start": "3426990",
    "end": "3432810"
  },
  {
    "text": "OK, so all we need\nto do is think about, in all these operations,\naccess link-cut, just",
    "start": "3432810",
    "end": "3438510"
  },
  {
    "text": "the updates. So access link/cut. How can this change?",
    "start": "3438510",
    "end": "3443849"
  },
  {
    "text": "So let's start with access. ",
    "start": "3443850",
    "end": "3450180"
  },
  {
    "text": "So access. The hard one. ",
    "start": "3450180",
    "end": "3457619"
  },
  {
    "text": "Well, there's all\nthis implementation, which is dealing with\nthe tree of ox trees, but really, an access\ndoes a very simple thing.",
    "start": "3457620",
    "end": "3464100"
  },
  {
    "text": "It makes the path from\nthe root to be preferred. That's its goal. So there's the root, it's\nto v, this becomes preferred",
    "start": "3464100",
    "end": "3472920"
  },
  {
    "text": "whether it was before or not. Some of it was before\nsome of it wasn't. So some of these might\nbe on newly preferred.",
    "start": "3472920",
    "end": "3480702"
  },
  {
    "text": " It does not change which\nedges are heavy or light.",
    "start": "3480702",
    "end": "3487819"
  },
  {
    "text": "It does not change the\nstructure of the tree when you do an access. Only link/cut changed the\nstructure of the tree. So it makes some of\nthese edges preferred.",
    "start": "3487820",
    "end": "3496010"
  },
  {
    "text": "What that means, of course,\nis that some other edges used to be preferred and\nare no longer preferred.",
    "start": "3496010",
    "end": "3501770"
  },
  {
    "text": "Those are the preferred\nchild changes. So if we look at\nthis, first concern",
    "start": "3501770",
    "end": "3507140"
  },
  {
    "text": "is that we're creating\nnew preferred edges, so maybe we create some\nnew light preferred edges.",
    "start": "3507140",
    "end": "3513074"
  },
  {
    "text": "How many new light\npreferred edges could we create along this path?",
    "start": "3513074",
    "end": "3518250"
  },
  {
    "text": "Most log n. Whatever the light depth\nof v is as an upper bound.",
    "start": "3518250",
    "end": "3523380"
  },
  {
    "text": "So make, at most, log\nand, like preferred edges,",
    "start": "3523380",
    "end": "3532490"
  },
  {
    "text": "because they all live\non a single path. And it would be really\nhard to bound how many",
    "start": "3532490",
    "end": "3538430"
  },
  {
    "text": "heavy preferred edges we make. But we don't have to. We don't have to worry about\nheavy preferred edges being",
    "start": "3538430",
    "end": "3544460"
  },
  {
    "text": "destroyed. Now, those edges\ncould be these ones. These edges used to be\npreferred, now they're not.",
    "start": "3544460",
    "end": "3549740"
  },
  {
    "text": "If they were heavy, then\nI have to pay for them. But the number of these\nedges is equal to,",
    "start": "3549740",
    "end": "3557420"
  },
  {
    "text": "or is at most, the\nnumber of these edges. I mean, if this edge\nwas heavy, every node has only one heavy down pointer.",
    "start": "3557420",
    "end": "3563960"
  },
  {
    "text": "So if this edge is heavy hanging\noff, then this one is light. We know there's only\nlog n light edges here.",
    "start": "3563960",
    "end": "3569880"
  },
  {
    "text": "So the number of\nheavy edges coming off here can also be most log n,",
    "start": "3569880",
    "end": "3575370"
  },
  {
    "text": "So destroy, at most, log\nn heavy preferred edges.",
    "start": "3575370",
    "end": "3583740"
  },
  {
    "text": " Yeah In some sense,\nwe don't even really",
    "start": "3583740",
    "end": "3591800"
  },
  {
    "text": "are about the word\npreferred here. But, of course, we're not\nmaking them, light so anyway.",
    "start": "3591800",
    "end": "3597900"
  },
  {
    "text": " Is that clear? Now, there's actually one more\nedge that could change which",
    "start": "3597900",
    "end": "3604670"
  },
  {
    "text": "is, there used to be a preferred\nedge from v, now there isn't. We destroyed that in the very\nbeginning of the operation.",
    "start": "3604670",
    "end": "3611220"
  },
  {
    "text": "So maybe plus 1 that might have\ndestroyed one more heavy edge. But overall order log n.",
    "start": "3611220",
    "end": "3619940"
  },
  {
    "text": "So, actually, really\neasy to analyze access. ",
    "start": "3619940",
    "end": "3626100"
  },
  {
    "text": "Any questions about that? ",
    "start": "3626100",
    "end": "3642500"
  },
  {
    "text": "OK, link/cut not\nmuch to say here.",
    "start": "3642500",
    "end": "3650000"
  },
  {
    "text": "Yeah, so link/cut don't really\nchange what's preferred. I'm analyzing-- I'm going\nto think about what link",
    "start": "3650000",
    "end": "3656570"
  },
  {
    "text": "does after it accesses v and w. Because access we've\nalready analyzed. So link is just\nthese two operations",
    "start": "3656570",
    "end": "3664730"
  },
  {
    "text": "which add a single pointer. So if you look at what that's\ndoing in the represented tree,",
    "start": "3664730",
    "end": "3670760"
  },
  {
    "text": "which was v was the\nroute and we made it to be a new child w, which\nlived in some tree over here.",
    "start": "3670760",
    "end": "3682490"
  },
  {
    "text": "That's in the represented\ntree, what happens. ",
    "start": "3682490",
    "end": "3688470"
  },
  {
    "text": "What happens is\nthat w gets heavier.",
    "start": "3688470",
    "end": "3694099"
  },
  {
    "text": "I guess also this get's heavier. All the nodes on this route\nto w path get heavier.",
    "start": "3694100",
    "end": "3701180"
  },
  {
    "text": "That's all that happens\nin terms of heavy, light. Preferred paths don't change. It's just about heavy\nand light changing.",
    "start": "3701180",
    "end": "3709869"
  },
  {
    "text": "OK, in fact, this will\nbe a preferred path from the root to v because\nwe just accessed those guys.",
    "start": "3709870",
    "end": "3716060"
  },
  {
    "start": "3716060",
    "end": "3722640"
  },
  {
    "text": "So we're heavying edges,\nwhich means you might create new heavy preferred edges.",
    "start": "3722640",
    "end": "3729010"
  },
  {
    "text": "But we don't care about heavy\npreferred edges being created. We only care about\nthem being destroyed.",
    "start": "3729010",
    "end": "3736580"
  },
  {
    "text": "So has anything changed? Well, there might have been a\nheavy edge hanging off of here.",
    "start": "3736580",
    "end": "3742232"
  },
  {
    "text": "Is that possible?  Yeah, so this might turn\nlight, because this one",
    "start": "3742232",
    "end": "3749640"
  },
  {
    "text": "became heavier. So this edge might\nbecome light, which means we might have\npotentially lost--",
    "start": "3749640",
    "end": "3756180"
  },
  {
    "text": "this could have been\npreferred before. It wasn't preferred,\nso who cares? If we've already\ndone the accesses,",
    "start": "3756180",
    "end": "3762180"
  },
  {
    "text": "the edges are already\nnot preferred. So not a big deal. So can anything happen? I think not.",
    "start": "3762180",
    "end": "3768839"
  },
  {
    "text": "Some of the edges on the\npath might become heavy, but we don't care because\nthey are preferred. Some of the edges off the\npath might become light,",
    "start": "3768839",
    "end": "3775260"
  },
  {
    "text": "but we don't care because\nthey're not preferred. Done. So this actually costs zero\nin just analyzing number",
    "start": "3775260",
    "end": "3784609"
  },
  {
    "text": "of preferred child changes. Cuts, not quite so simple. When we do a cut,\nwe're lightning stuff.",
    "start": "3784610",
    "end": "3793450"
  },
  {
    "text": " The path from the root to\nv in the represented tree,",
    "start": "3793450",
    "end": "3799550"
  },
  {
    "text": "when we line up there,\nbecomes lighter, because we cut off that\nwhole subtree containing v.",
    "start": "3799550",
    "end": "3808290"
  },
  {
    "text": "So we might create light\npreferred edges on that path. And that's something we\nactually want to count.",
    "start": "3808290",
    "end": "3815470"
  },
  {
    "text": "we count number of light\npreferred edges created. But, again, they're on a\npath so it's, at most, log n",
    "start": "3815470",
    "end": "3823294"
  },
  {
    "text": "Most log n light\npreferred edges created.",
    "start": "3823294",
    "end": "3830560"
  },
  {
    "text": "We don't care about edges\nhanging off that path because they're not\npreferred anymore, so it's nothing to talk about.",
    "start": "3830560",
    "end": "3837299"
  },
  {
    "text": "So that's it. That proves m log n\npreferred child changes. It's amortized because we're\ndoing this creation/destruction",
    "start": "3837299",
    "end": "3844200"
  },
  {
    "text": "business. This thing is worst case log n\nper operation, this quantity. But when you sum it\nup, then you actually",
    "start": "3844200",
    "end": "3850890"
  },
  {
    "text": "get about the number of\npreferred child changes overall. ",
    "start": "3850890",
    "end": "3859799"
  },
  {
    "text": "So if you plug that\ninto this bound, we get a log squared m bound.",
    "start": "3859800",
    "end": "3865020"
  },
  {
    "text": "Big deal. But with a little\nbit more work, we",
    "start": "3865020",
    "end": "3870030"
  },
  {
    "text": "can actually get a log n bound. ",
    "start": "3870030",
    "end": "3879839"
  },
  {
    "text": "For this, we need\nto actually know a little bit about\nsplay tree analysis. I didn't cover in Lecture Six.",
    "start": "3879840",
    "end": "3886435"
  },
  {
    "text": "You probably would have\nforgotten it by now anyway. So let me give you\nwhat little you need to know about splay analysis.",
    "start": "3886436",
    "end": "3894180"
  },
  {
    "text": "First, I need to define a\nslightly weird quantity. It's kind of like\nthe weight of a node.",
    "start": "3894180",
    "end": "3900599"
  },
  {
    "text": "It's a capital W, but\na little bit weird. ",
    "start": "3900600",
    "end": "3920600"
  },
  {
    "text": "OK, now we're thinking\nabout the tree of ox trees. For the analysis we need that. It's a tree of splay trees.",
    "start": "3920600",
    "end": "3927292"
  },
  {
    "text": "And what I'm looking at, is\nin that tree of ox trees, how many nodes are\nin the subtree of v? That's what I'm\ngoing to call wv .",
    "start": "3927292",
    "end": "3933190"
  },
  {
    "text": "Whereas size of v was thinking\nin the represented tree. So this is a totally\ndifferent world.",
    "start": "3933190",
    "end": "3938590"
  },
  {
    "text": "Here, we're thinking about\nthe tree of ox trees. So one way you can\nrewrite this count",
    "start": "3938590",
    "end": "3944640"
  },
  {
    "text": "as the sum of all nodes w in\nthe ox tree containing v. It's",
    "start": "3944640",
    "end": "3954490"
  },
  {
    "text": "a weird notation, but look at\nall the other nodes in the ox tree-- is that right?",
    "start": "3954490",
    "end": "3960000"
  },
  {
    "text": "Sorry. No. ",
    "start": "3960000",
    "end": "3966960"
  },
  {
    "text": "I should say w in v's\nsubtree in v's ox tree.",
    "start": "3966960",
    "end": "3979140"
  },
  {
    "text": "It's awkward to say. What I mean is there is an\nox tree containing a node v,",
    "start": "3979140",
    "end": "3984930"
  },
  {
    "text": "and I want to look in that\nsubtree I'll know as w. Just within the ox tree though.",
    "start": "3984930",
    "end": "3991170"
  },
  {
    "text": "And for all those nodes,\nI take 1 plus the size of ox trees hanging off.",
    "start": "3991170",
    "end": "3998573"
  },
  {
    "start": "3998573",
    "end": "4006970"
  },
  {
    "text": "So total number of nodes. And when I say\nhanging off I mean",
    "start": "4006970",
    "end": "4012190"
  },
  {
    "text": "via pathed parent pointers. So down here, there are\ntrees, add up all their sizes",
    "start": "4012190",
    "end": "4018069"
  },
  {
    "text": "total number of nodes in\nthem, add one for w itself, that's another way\nof writing this.",
    "start": "4018070",
    "end": "4024340"
  },
  {
    "text": "I'll just mention that this\npart is what's normally",
    "start": "4024340",
    "end": "4030910"
  },
  {
    "text": "considered in splay trees. This is a bonus thing that,\nbasically, doesn't matter. ",
    "start": "4030910",
    "end": "4037940"
  },
  {
    "text": "I'll justify that in a second. So we define a\npotential function for our amortization fee, which\nis sum over all nodes v of log",
    "start": "4037940",
    "end": "4049420"
  },
  {
    "text": "this quantity wv, this thing. So just think of this\nas an abstract quantity,",
    "start": "4049420",
    "end": "4057460"
  },
  {
    "text": "which for every node it has\nsome number associated with it. Splay trees allow you to assign\narbitrary weight to every node,",
    "start": "4057460",
    "end": "4065200"
  },
  {
    "text": "use this potential function,\nand prove abound --which is called the access lemma\nThe access lemma says is that,",
    "start": "4065200",
    "end": "4077700"
  },
  {
    "text": "for this potential\nfunction, the amortized cost of doing a splay\noperation splay of v,",
    "start": "4077700",
    "end": "4092620"
  },
  {
    "text": "is, at most, three times\nlog w of root of v's ox tree",
    "start": "4092620",
    "end": "4110290"
  },
  {
    "text": "minus log w of v plus 1.",
    "start": "4110290",
    "end": "4118028"
  },
  {
    "text": " OK, so this is something\ncalled the access Lemma",
    "start": "4118029",
    "end": "4123969"
  },
  {
    "text": "It's used to prove, for\nexample, that splay trees have log n performance amortize. It's also used to\nprove that they",
    "start": "4123969",
    "end": "4129520"
  },
  {
    "text": "have a working set\nbound, which you may recall from Lecture Six. But we never actually mentioned\nthe access lemma It's a tool.",
    "start": "4129520",
    "end": "4137040"
  },
  {
    "text": "It's an analysis tool.  This works no matter\nhow the w's are defined.",
    "start": "4137040",
    "end": "4144266"
  },
  {
    "text": "And remember, we're\nthinking of splaying just within a single ox tree. So the size of the\nox trees hanging off",
    "start": "4144266",
    "end": "4150068"
  },
  {
    "text": "don't change during a splay. They just come\nalong for the ride. So the old analysis\nof splay trees",
    "start": "4150069",
    "end": "4156712"
  },
  {
    "text": "I haven't proved\nthis lemma to you. But it still applies\nin this setting. And given my lack of time.",
    "start": "4156712",
    "end": "4163100"
  },
  {
    "text": "I will just say in\nwords, the way you prove this lemma is very simple. You do you analyze each\noperation of display",
    "start": "4163100",
    "end": "4170229"
  },
  {
    "text": "separately there's a zig-zag\ncase in a zigzag case. And you argue that every time\nyou do such an operation,",
    "start": "4170229",
    "end": "4179500"
  },
  {
    "text": "you pay three times\na log of w of v after the operation minus log\nof wv before the operation.",
    "start": "4179500",
    "end": "4188740"
  },
  {
    "text": "So you just see how wv\nchanges when it goes up after you do display\noperation, and turns out it's",
    "start": "4188740",
    "end": "4195155"
  },
  {
    "text": "the most three\ntimes log of that. And it has to do with\nconcavity of log n. It's just basic checking.",
    "start": "4195155",
    "end": "4200650"
  },
  {
    "text": "Once you have that you\nget a telescoping sum. Each operation is log\nw new minus long w old.",
    "start": "4200650",
    "end": "4207820"
  },
  {
    "text": "Those cancel, in turn, until\nyou get the final log w of v,",
    "start": "4207820",
    "end": "4213070"
  },
  {
    "text": "minus the original log w of v.\nThe final log w is whatever-- I mean, v becomes the root and\nso it has everybody below it.",
    "start": "4213070",
    "end": "4221510"
  },
  {
    "text": "So that's the axis lemma. So assuming the\naccess lemma, I want",
    "start": "4221510",
    "end": "4228010"
  },
  {
    "text": "to prove to you a log n bound. Maybe over here OK,\nanother thing to note,",
    "start": "4228010",
    "end": "4253920"
  },
  {
    "text": "when we change preferred\nchildren, it does not affect w. W defined on the\ntree of ox trees.",
    "start": "4253920",
    "end": "4261880"
  },
  {
    "text": "If you turn a path\nparent pointer into a regular parent pointer\nor vice versa, It doesn't care.",
    "start": "4261880",
    "end": "4266974"
  },
  {
    "text": "It looks the same from the\ntree of ox trees' perspective. All that changes, all that\nmatters is when you do splays",
    "start": "4266975",
    "end": "4272609"
  },
  {
    "text": "this stuff happens. But the splay analysis\ntells us how splays behave. So we're kind of good.",
    "start": "4272609",
    "end": "4278890"
  },
  {
    "text": "If you look at what we did\nover here, when we splayed v,",
    "start": "4278890",
    "end": "4285040"
  },
  {
    "text": "then we splayed w, then we did\na little bit of manipulation",
    "start": "4285040",
    "end": "4290140"
  },
  {
    "text": "which doesn't matter\nin this analysis. And then we splayed\nv one more time.",
    "start": "4290140",
    "end": "4296040"
  },
  {
    "text": "How much does that cost\naccording to the access lemma. It's basically going\nto cost you order log",
    "start": "4296040",
    "end": "4303219"
  },
  {
    "text": "w of little w minus\nlog w of v plus 1,",
    "start": "4303220",
    "end": "4311620"
  },
  {
    "text": "because well is it clear?",
    "start": "4311620",
    "end": "4320410"
  },
  {
    "text": "When we do the first splay\nof v going up to the root that cost log of w of\nthe whole tree containing",
    "start": "4320410",
    "end": "4327460"
  },
  {
    "text": "b minus longer wv. But if you just\nlook at log, I mean, w is higher than the root of\nv. So if we take a log of w",
    "start": "4327460",
    "end": "4336580"
  },
  {
    "text": "this the whole thing from w\ndownwards minus log wv, that",
    "start": "4336580",
    "end": "4343120"
  },
  {
    "text": "includes the cost that we did\nfor the initial splay of v. Then when we played w, well\nthat's basically the same thing",
    "start": "4343120",
    "end": "4350530"
  },
  {
    "text": "but the next level up. So if you look at log of w\nminus log of w of next level up,",
    "start": "4350530",
    "end": "4358116"
  },
  {
    "text": "that's what it's going\nto cost this splay w. To splay v again, will\nagain cost this bound. The point is, we sum this up\nover all the preferred child",
    "start": "4358117",
    "end": "4368620"
  },
  {
    "text": "changes. And what we get is a\ntelescoping scum again.",
    "start": "4368620",
    "end": "4373719"
  },
  {
    "text": "Same as in the display analysis. So we end up with order log w\nof everything, which an n minus,",
    "start": "4373720",
    "end": "4383290"
  },
  {
    "text": "I guess, the log of\nw of the original v, -but we don't really\ncare about that-- plus the number of\npreferred child changes.",
    "start": "4383290",
    "end": "4390355"
  },
  {
    "text": " And now we're golden because\nbefore, the obvious bound was",
    "start": "4390355",
    "end": "4398230"
  },
  {
    "text": "number preferred child\nchanges times again, now it's number of\npreferred time changes plus log n for an entire access.",
    "start": "4398230",
    "end": "4405790"
  },
  {
    "text": "And so we pay log n here. We already know the amortize\nnumber preferred child changes is log n per operation.",
    "start": "4405790",
    "end": "4412060"
  },
  {
    "text": "So overall the amortize\ncost per operation is log n. And we're done.",
    "start": "4412060",
    "end": "4419020"
  },
  {
    "text": "So I'll just mention the worst\ncase version of link-cut trees instead of the amortize\nsplay based version.",
    "start": "4419020",
    "end": "4427060"
  },
  {
    "text": "They actually store the\nheavy light decomposition. They don't use preferred path\nto decomposition at all, which",
    "start": "4427060",
    "end": "4432430"
  },
  {
    "text": "makes all the algorithms messy. But you can just maintain the\nheavy [? likely ?] composition",
    "start": "4432430",
    "end": "4437440"
  },
  {
    "text": "position dynamically as\nthe tree is changing, and then you use a kind\nof weight balanced trees,",
    "start": "4437440",
    "end": "4444610"
  },
  {
    "text": "like we saw in the\nstrings lecture, where the depth of a node is sort\nof related to log of its size",
    "start": "4444610",
    "end": "4453560"
  },
  {
    "text": "or inversely related I guess. So you try to put all the\nheavy things near the root, because they're more\nlikely to be accessed.",
    "start": "4453560",
    "end": "4460450"
  },
  {
    "text": "And then you guarantee that\nthe overall tree of ox trees has long n depth by skewing\neach of the end of the ox trees",
    "start": "4460450",
    "end": "4467500"
  },
  {
    "text": "to match. So it can be done but all\nthe operations are messier, because you no longer have the\nconvenience of preferred paths",
    "start": "4467500",
    "end": "4474571"
  },
  {
    "text": "to make it easy to\nlink/cut things. ",
    "start": "4474571",
    "end": "4478756"
  }
]