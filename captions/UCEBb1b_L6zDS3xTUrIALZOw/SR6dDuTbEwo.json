[
  {
    "start": "0",
    "end": "210000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6340"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6340",
    "end": "13309"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13310",
    "end": "21439"
  },
  {
    "text": "PROFESSOR: So Phil is going to\ndo the next three recitations. So the first one\ntoday is really going to focus on how do you actually\ndebug programs on cell.",
    "start": "21440",
    "end": "29115"
  },
  {
    "text": "How many people in\nhere have used gdb, or are familiar with gdb? OK, good.",
    "start": "29115",
    "end": "34760"
  },
  {
    "text": "So there's going to be\na mini tutorial on how to run programs and\nattach gdb, which",
    "start": "34760",
    "end": "40359"
  },
  {
    "text": "is a debugger that's commonly\nused for debugging programs. We'll show you how to\ndebug PPU and SPU programs.",
    "start": "40360",
    "end": "47809"
  },
  {
    "text": "And he's going to talk a little\nbit about some other things that might help you in terms\nof performance debugging,",
    "start": "47810",
    "end": "53250"
  },
  {
    "text": "finding out where things are\nnot going as well or as fast as you might expect them to.",
    "start": "53250",
    "end": "59170"
  },
  {
    "text": "And the next two recitations,\nwhich will be next week, will focus on doing some\nactual performance-specific",
    "start": "59170",
    "end": "64412"
  },
  {
    "text": "optimizations. So you've written your program. It's working. Well, the\nfunctionality is there.",
    "start": "64412",
    "end": "70797"
  },
  {
    "text": "But it's not performing\nas fast as you might like. Or you think you can improve\nperformance a bit better. So what can you do?",
    "start": "70797",
    "end": "76110"
  },
  {
    "text": "So he'll show you some tricks\nand some things you can do to get the performance up. For some of you who have\nasked about the Eclipse",
    "start": "76110",
    "end": "82860"
  },
  {
    "text": "debugger, the Eclipse IDE,\nit does run reasonably slowly on the PlayStation 3\nbecause of memory constraints.",
    "start": "82860",
    "end": "91620"
  },
  {
    "text": "So if you have lots of people\ntrying to use it on the PS3, it'll probably be unusable.",
    "start": "91620",
    "end": "97825"
  },
  {
    "text": "So for those of you\nwho are interested, we'll just do separate\ntutorials offline. Because I don't\nknow how many people",
    "start": "97825",
    "end": "103856"
  },
  {
    "text": "will actually end up using it. Other than that, [INAUDIBLE]. ",
    "start": "103856",
    "end": "112604"
  },
  {
    "text": "PHIL: All right. So today we'll talk about\nhow to run gdb on Cell. And then we'll also do\nsome static profiling",
    "start": "112604",
    "end": "119430"
  },
  {
    "text": "where you can figure\nout when instructions are going to be executed. And then I'll talk a little\nbit about the dynamic profiling",
    "start": "119430",
    "end": "125660"
  },
  {
    "text": "tools that we have available. ",
    "start": "125660",
    "end": "131140"
  },
  {
    "text": "So you can use gdb to examine\nthe state of your program. And this can help you figure\nout bugs that you might have.",
    "start": "131140",
    "end": "138060"
  },
  {
    "text": "There's two ways\nthat you can use gdb. The first way is when\nyour program crashes,",
    "start": "138060",
    "end": "143389"
  },
  {
    "text": "you can figure out what\nwas happening at the time that it crashed. Another way that you can\nuse gdb is to kind of run it",
    "start": "143389",
    "end": "149670"
  },
  {
    "text": "from the beginning. You attach gdb to your\nprogram, and then you step through all the things,\nall the instructions that",
    "start": "149670",
    "end": "155776"
  },
  {
    "text": "are being executed\nwhile the program runs. ",
    "start": "155776",
    "end": "162079"
  },
  {
    "text": "In order for gdb to be able\nto provide useful information about the state of\nyour program, you have to give it a little help.",
    "start": "162080",
    "end": "168030"
  },
  {
    "text": "You need to compile your\nprogram using gcc -g. xlc -g will also work.",
    "start": "168030",
    "end": "173860"
  },
  {
    "text": " This puts in some extra\ninformation into your program",
    "start": "173860",
    "end": "180250"
  },
  {
    "text": "so that when gdb is looking\nat the state of your program,",
    "start": "180250",
    "end": "185630"
  },
  {
    "text": "it's able to figure out what\nline numbers in the source code that corresponds to.",
    "start": "185630",
    "end": "191819"
  },
  {
    "text": "So you can just\nadd dash g manually to your GCC invocations, or you\ncan also set this compiler--",
    "start": "191820",
    "end": "198990"
  },
  {
    "text": "or you can set this option\nin the makefile, CC_OPT_LEVEL and set that to\nCC_OPT_LEVEL_DEBUG.",
    "start": "198990",
    "end": "204410"
  },
  {
    "text": "And that will do the same\nthing as adding dash g. All right?",
    "start": "204410",
    "end": "209560"
  },
  {
    "text": " Now we have a special\nversion of gdb",
    "start": "209560",
    "end": "216530"
  },
  {
    "start": "210000",
    "end": "265000"
  },
  {
    "text": "available for use on the Cell. ppu-gdb is used for\ndebugging ppu and spu",
    "start": "216530",
    "end": "224950"
  },
  {
    "text": "programs after they've\nbeen linked together. And how you invoke\nit if you're going",
    "start": "224950",
    "end": "231489"
  },
  {
    "text": "to run your entire program\nusing gdb is you type ppu-gdb",
    "start": "231490",
    "end": "236760"
  },
  {
    "text": "and then the name\nof your program. And what you get is\na gdb prompt where you can issue additional\ncommands to the debugger",
    "start": "236760",
    "end": "243510"
  },
  {
    "text": "to control execution\nof your program, and also ask the\ndebugger to tell you various things\nabout your program.",
    "start": "243510",
    "end": "249410"
  },
  {
    "text": " One thing you can do is export\nSPU_INFO=1 before you start",
    "start": "249410",
    "end": "257600"
  },
  {
    "text": "your program. And that will print some\nextra debugging information about when threads are\nbeing created and destroyed.",
    "start": "257600",
    "end": "264945"
  },
  {
    "text": " Like I mentioned,\nyou can also use gdb",
    "start": "264945",
    "end": "272100"
  },
  {
    "start": "265000",
    "end": "310000"
  },
  {
    "text": "to attach to a program\nthat's already running. And if you want to do\nthat you still need to provide the executable name.",
    "start": "272100",
    "end": "278870"
  },
  {
    "text": "And you also provide the process\nID of the program to attach to. ",
    "start": "278870",
    "end": "285304"
  },
  {
    "text": "PROFESSOR: Do people know\nhow to get the process ID? [INAUDIBLE] How many\npeople don't know?",
    "start": "285304",
    "end": "291520"
  },
  {
    "text": " The easiest way to do\nit is if your program's running just type \"top.\"",
    "start": "291520",
    "end": "297759"
  },
  {
    "text": "And that'll actually show you\nwhat's running on your machine. And there'll be a column\nthat has a process ID. Another thing you can\ndo is just type \"ps.\"",
    "start": "297759",
    "end": "304780"
  },
  {
    "text": "We'll add those to the\nrecitation slides. [INAUDIBLE]. ",
    "start": "304780",
    "end": "310472"
  },
  {
    "start": "310000",
    "end": "340000"
  },
  {
    "text": "PHIL: So I forgot to mention. If you're invoking\nyour program with gdb,",
    "start": "310472",
    "end": "315750"
  },
  {
    "text": "then after you type ppu-gdb\nwith your executable name,",
    "start": "315750",
    "end": "321205"
  },
  {
    "text": "gdb is just going to sit there\nand wait for instructions. And what you can do\nis type \"run\" and that will run your program normally.",
    "start": "321205",
    "end": "327759"
  },
  {
    "text": "But the difference is\nthat gdb will pick up and if something goes wrong.",
    "start": "327760",
    "end": "333829"
  },
  {
    "text": "And then that's where you can\nstep in and look at the program state. ",
    "start": "333829",
    "end": "341900"
  },
  {
    "start": "340000",
    "end": "380000"
  },
  {
    "text": "So what kind of things can you\nfigure out about your program? ",
    "start": "341900",
    "end": "347260"
  },
  {
    "text": "Anytime you have this gdb prompt\nand your program is running, you can type \"bt\" to get a\nstack trace for your program.",
    "start": "347260",
    "end": "354597"
  },
  {
    "text": "And this will tell\nyou which functions are calling which functions. ",
    "start": "354597",
    "end": "360639"
  },
  {
    "text": "It's going to give\nyou a list of frames. And the top one is\ngoing to correspond to the deepest level\nof function nesting,",
    "start": "360640",
    "end": "367540"
  },
  {
    "text": "or the deepest function\ncall in the program. And of course, the\nlast one on the list",
    "start": "367540",
    "end": "373300"
  },
  {
    "text": "is going to be the main or the\nfirst function that was called. That make sense? ",
    "start": "373300",
    "end": "381450"
  },
  {
    "text": "And for each stack\nframe gdb will tell you the name of the function.",
    "start": "381450",
    "end": "387680"
  },
  {
    "text": "And if source code\nis available it will tell you also which\nfile the function is",
    "start": "387680",
    "end": "393889"
  },
  {
    "text": "running in right now,\nand at which line number. And so using that\ninformation you",
    "start": "393890",
    "end": "399389"
  },
  {
    "text": "can figure out exactly where it\nwas that this function called the next function and where\nwas that each function called",
    "start": "399390",
    "end": "406250"
  },
  {
    "text": "the next function after that. ",
    "start": "406250",
    "end": "414750"
  },
  {
    "start": "410000",
    "end": "515000"
  },
  {
    "text": "Now whenever you've\nhalted the program state, you can get information about\nwhat the local variables are.",
    "start": "414750",
    "end": "422240"
  },
  {
    "text": "And to do that you\ncan type \"info locals\" and it will print a list\nof all the local variables and their values.",
    "start": "422240",
    "end": "428010"
  },
  {
    "text": "gdb, because it gets annotations\nfrom the compiled program, it knows about what data\ntypes are associated",
    "start": "428010",
    "end": "434620"
  },
  {
    "text": "with which variables. And so it will be able to\nformat the output appropriately.",
    "start": "434620",
    "end": "442250"
  },
  {
    "text": "So for example, it knows\nthat i is an integer. Whereas if you had i as, for\nexample, a floating point",
    "start": "442250",
    "end": "451110"
  },
  {
    "text": "number, it would print\nthat floating point number representation instead.",
    "start": "451110",
    "end": "457160"
  },
  {
    "text": "Instead of looking\nat single variables you can also ask gdb to evaluate\narbitrary expressions for you.",
    "start": "457160",
    "end": "463400"
  },
  {
    "text": "And this is actually a\nreally powerful facility. You can pretty much type any\nexpression that you would be",
    "start": "463400",
    "end": "468410"
  },
  {
    "text": "able to use in C or C++. ",
    "start": "468410",
    "end": "478880"
  },
  {
    "text": "When you type\n\"print VARNAME\" gdb will look up that\nvariable name for you. But sometimes if you have\nmore than one variable",
    "start": "478880",
    "end": "487902"
  },
  {
    "text": "available in your function\nunder the same name, for example, these variables\nare in different files or different functions\nthat are all available,",
    "start": "487902",
    "end": "498420"
  },
  {
    "text": "then you may need to\ndisambiguate the variable name. And to do that you just\nproceed the variable name",
    "start": "498420",
    "end": "503689"
  },
  {
    "text": "with either the file name that\nyou want to use or the function that the variable occurs in.",
    "start": "503690",
    "end": "509647"
  },
  {
    "text": "Any questions? ",
    "start": "509647",
    "end": "515580"
  },
  {
    "start": "515000",
    "end": "575000"
  },
  {
    "text": "OK. And because gdb knows which\nline numbers the programs",
    "start": "515580",
    "end": "525480"
  },
  {
    "text": "is executing right\nnow, then it's able to show you the\nsource code corresponding to the current place\nin the program.",
    "start": "525480",
    "end": "533920"
  },
  {
    "text": "And in order to browse the\nsource code, if it's available you just type \"list.\"",
    "start": "533920",
    "end": "541700"
  },
  {
    "text": "In general whenever gdb has\nstopped in a certain place you can type \"list\" to get\na listing of the source",
    "start": "541700",
    "end": "548130"
  },
  {
    "text": "code near that location. And what list will\ndo, by default, is show 10 lines of source code\nnear where the program stopped.",
    "start": "548130",
    "end": "556850"
  },
  {
    "text": "If you type \"list\" again it will\nshow 10 lines following that. And you can keep typing \"list\"\nto browse the source code.",
    "start": "556850",
    "end": "564450"
  },
  {
    "text": "You can also get the code that's\nat a particular line number if you want to look at\nanother place in your program.",
    "start": "564450",
    "end": "570620"
  },
  {
    "text": " All right, so this is how to\nuse gdb to actually control",
    "start": "570620",
    "end": "578704"
  },
  {
    "start": "575000",
    "end": "690000"
  },
  {
    "text": "the flow of your program. ",
    "start": "578704",
    "end": "588140"
  },
  {
    "text": "If you invoke gdb to\nstart up your program, then you can type \"run\" and\nthat will run your program",
    "start": "588140",
    "end": "594399"
  },
  {
    "text": "with a normal flow of execution. And it will only stop\nwhen errors occur.",
    "start": "594400",
    "end": "599630"
  },
  {
    "text": "But you can use a\ncouple of these commands to actually go step by\nstep through your program.",
    "start": "599630",
    "end": "605200"
  },
  {
    "text": "And wait for one line\nto be executed, and then",
    "start": "605200",
    "end": "610580"
  },
  {
    "text": "decide whether you want to\nlook at the next line or not. If you want to do this kind\nof step-by-step execution",
    "start": "610580",
    "end": "617990"
  },
  {
    "text": "you start by using the\nstart command instead of the run command, which\nwill run continuously.",
    "start": "617990",
    "end": "623110"
  },
  {
    "text": "Then anytime you want to\njump to the next instruction, you can use next to\nget to the next line",
    "start": "623110",
    "end": "630120"
  },
  {
    "text": "in the current procedure. You can also use\nstep, which, if there are function calls\non the current line,",
    "start": "630120",
    "end": "636330"
  },
  {
    "text": "will descend into\nthose function calls and show you what's\ngoing on over there. And if you're inside\na function call",
    "start": "636330",
    "end": "643350"
  },
  {
    "text": "you can type \"finish\"\nin order to jump back to right after\nthe function call ends",
    "start": "643350",
    "end": "649430"
  },
  {
    "text": "in the caller of that function. And if you want to stop\nline-by-line execution",
    "start": "649430",
    "end": "657950"
  },
  {
    "text": "you can type \"continue\"\nand it will just continue without interruptions.",
    "start": "657950",
    "end": "663080"
  },
  {
    "text": "Any questions?  Basically any time you use one\nof these line-by-line commands",
    "start": "663080",
    "end": "670640"
  },
  {
    "text": "gdb will show you the\nline that you're on. And if your program just\njumped into a new function",
    "start": "670640",
    "end": "679630"
  },
  {
    "text": "or something, then it will\nalso show you what function and what file you're in.",
    "start": "679630",
    "end": "684820"
  },
  {
    "text": "So this is very helpful\nfor following what's going on in your program. ",
    "start": "684820",
    "end": "694020"
  },
  {
    "start": "690000",
    "end": "825000"
  },
  {
    "text": "OK. So in addition to just\nrunning through your program step by step, you\ncan also choose",
    "start": "694020",
    "end": "700010"
  },
  {
    "text": "to only stop your program\nwhen certain things happen. So this is very\nuseful for debugging",
    "start": "700010",
    "end": "706439"
  },
  {
    "text": "certain pieces of code where\nthe code is very deeply nested inside and you don't want\nto step all the way to there.",
    "start": "706440",
    "end": "712950"
  },
  {
    "text": "You just want to stop\nwhen you get there. And gdb allows you to\ndefine breakpoints, which",
    "start": "712950",
    "end": "719390"
  },
  {
    "text": "are places in your source code. And once gdb gets to a point\nof execution which corresponds",
    "start": "719390",
    "end": "727694"
  },
  {
    "text": "to that point in\nyour source code, it will stop and\nask you what to do. You can set a breakpoint\nthat's associated",
    "start": "727694",
    "end": "734720"
  },
  {
    "text": "with any particular\nfunction in your source code or any particular--\nwell, what you can do",
    "start": "734720",
    "end": "741890"
  },
  {
    "text": "is if you do break\nfunction then it will create a new breakpoint. And it will stop\nexecution any time",
    "start": "741890",
    "end": "747910"
  },
  {
    "text": "you get to the beginning\nof that function. But you can also\nset break points in the interior of a function\nby using line numbers.",
    "start": "747910",
    "end": "758450"
  },
  {
    "text": "All right? Any questions? ",
    "start": "758450",
    "end": "763649"
  },
  {
    "text": "Now sometimes you want a little\nbit more flexibility than that in setting breakpoints.",
    "start": "763650",
    "end": "770410"
  },
  {
    "text": "If you only want\nto set a breakpoint to happen when a certain\ncondition is true-- this",
    "start": "770410",
    "end": "775660"
  },
  {
    "text": "is helpful if you're trying\nto track down a bug-- then you can write \"break\"\nand any of these things,",
    "start": "775660",
    "end": "781630"
  },
  {
    "text": "and then \"if expression.\" And again, you can use\nany sort of expression that you'd be able to use in C.",
    "start": "781630",
    "end": "788110"
  },
  {
    "text": "And what gdb will do\nis every time execution runs up to that line it will\nevaluate the expression.",
    "start": "788110",
    "end": "794060"
  },
  {
    "text": "And only if that\nexpression is true will it stop to ask you for control.",
    "start": "794060",
    "end": "800580"
  },
  {
    "text": "At any time you can\nsee which breakpoints are active by doing info\nbreakpoints at the gdb prompt.",
    "start": "800580",
    "end": "809580"
  },
  {
    "text": "And you can also remove\nbreakpoints at any time. When each breakpoint is\ncreated it's given this number.",
    "start": "809580",
    "end": "816830"
  },
  {
    "text": "And the numbers start from one. And to remove a breakpoint\nyou just do remove",
    "start": "816830",
    "end": "822452"
  },
  {
    "text": "followed by the number\nthat was assigned. ",
    "start": "822452",
    "end": "828500"
  },
  {
    "start": "825000",
    "end": "875000"
  },
  {
    "text": "In addition to breaking, you\ncan also set a watchpoint. What this does is it will\nhalt your program every time",
    "start": "828500",
    "end": "835380"
  },
  {
    "text": "a particular value changes. And this is useful for tracking\ndown certain kinds of bugs.",
    "start": "835380",
    "end": "842870"
  },
  {
    "text": "If you're trying\nto figure out where a certain value for\na variable came from,",
    "start": "842870",
    "end": "848291"
  },
  {
    "text": "there could potentially be many,\nmany places in your program where that value is set. And you don't want to have to\nset a breakpoint for all those",
    "start": "848291",
    "end": "855199"
  },
  {
    "text": "and watch them. So you can instead\nset a watchpoint which will just tell you\nwhen that value is set.",
    "start": "855200",
    "end": "860650"
  },
  {
    "text": " Watchpoints work a\nlot like breakpoints.",
    "start": "860650",
    "end": "867670"
  },
  {
    "text": "If you do info breakpoints it\nwill also list the watchpoints. And I believe you\ncan also remove",
    "start": "867670",
    "end": "872720"
  },
  {
    "text": "them the same way with remove. ",
    "start": "872720",
    "end": "879580"
  },
  {
    "start": "875000",
    "end": "990000"
  },
  {
    "text": "All right, so I mentioned how\nyou can examine your program state by looking at the\nvalues of local variables.",
    "start": "879580",
    "end": "887130"
  },
  {
    "text": "If you want a more\nlow level view of what's going on\nin your program, you can actually look\nat the raw memory.",
    "start": "887130",
    "end": "893870"
  },
  {
    "text": "And gdb allows you to\nspecify an address. And it will tell you\nexactly what data is stored",
    "start": "893870",
    "end": "903045"
  },
  {
    "text": "in the memory at that address. ",
    "start": "903045",
    "end": "908529"
  },
  {
    "text": "But because there's not\nnecessarily annotation info telling gdb what kind of data\nis stored at that address,",
    "start": "908530",
    "end": "914490"
  },
  {
    "text": "and of course,\nthere's multiple ways you can interpret any\nparticular piece of data, you'll have to tell gdb\nexactly how you want",
    "start": "914490",
    "end": "921490"
  },
  {
    "text": "that data to be interpreted. So you can interpret any\nparticular block of memory as, for example, a series\nof machine instructions.",
    "start": "921490",
    "end": "929040"
  },
  {
    "text": "Then gdb will tell you what the\ninstructions are as if you were looking at an assembly listing.",
    "start": "929040",
    "end": "936920"
  },
  {
    "text": "You can ask gdb to\ninterpret the memory as if it were an array of\nintegers and print them out",
    "start": "936920",
    "end": "942940"
  },
  {
    "text": "either in hex or in decimal.  You can ask gdb to display the\ndata as if they were addresses",
    "start": "942940",
    "end": "958250"
  },
  {
    "text": "or floating point numbers. And how you do this is you type\nx for examine memory and slash.",
    "start": "958250",
    "end": "965850"
  },
  {
    "text": "And then the number\nfollowing is the number of words you want to look at.",
    "start": "965850",
    "end": "971540"
  },
  {
    "text": "And then the letter corresponds\nto one of these letters and tells gdb how to\nformat the output.",
    "start": "971540",
    "end": "978160"
  },
  {
    "text": "And then the address will be\nthe starting block of where you want to start examining memory. All right?",
    "start": "978160",
    "end": "983470"
  },
  {
    "text": "Any questions about this? ",
    "start": "983470",
    "end": "992589"
  },
  {
    "start": "990000",
    "end": "1070000"
  },
  {
    "text": "OK, so I mentioned that at any\ntime when you stop your program there are going to be\nmultiple function calls which",
    "start": "992590",
    "end": "999180"
  },
  {
    "text": "are active, corresponding\nto main, which called this other function, which\ncalled this other function, which called wherever your\ncurrent point of execution is.",
    "start": "999180",
    "end": "1006837"
  },
  {
    "text": "And you can actually\nexamine the state for all of these stack\nframes separately. ",
    "start": "1006837",
    "end": "1014310"
  },
  {
    "text": "When you do bt it's going to\ngive you the list of frames. And they're going to\nbe numbered from 0",
    "start": "1014310",
    "end": "1020540"
  },
  {
    "text": "to however many there are. And you can jump to any\nof them by using frame",
    "start": "1020540",
    "end": "1030470"
  },
  {
    "text": "and the appropriate number. And it's going to\ndefault to frame zero, which is the closest to where\nyour program is actually",
    "start": "1030470",
    "end": "1036549"
  },
  {
    "text": "executing. But you can examine the state in\nframes which are further away.",
    "start": "1036550",
    "end": "1042279"
  },
  {
    "text": "So that means when you're\nevaluating variables, each variable only makes\nsense in the context",
    "start": "1042280",
    "end": "1047839"
  },
  {
    "text": "of a particular frame. And you're able to\ngo up the call stack to figure out what the value\nof a particular variable",
    "start": "1047839",
    "end": "1056990"
  },
  {
    "text": "is in this function, which\ncalled this other function. You can also use the\ncommands up and down",
    "start": "1056990",
    "end": "1063140"
  },
  {
    "text": "to just jump to the\nimmediately adjacent frames.",
    "start": "1063140",
    "end": "1069320"
  },
  {
    "text": "All right? ",
    "start": "1069320",
    "end": "1074460"
  },
  {
    "start": "1070000",
    "end": "1150000"
  },
  {
    "text": "OK, so you can use gdb\nfrom emacs as well. And emacs provides a really\nhandy interface for gdb.",
    "start": "1074460",
    "end": "1082300"
  },
  {
    "text": "If you do M-x gdb emacs\nwill invoke gdb for you. And when you do\nthis, you're going",
    "start": "1082300",
    "end": "1089309"
  },
  {
    "text": "to want to tell emacs to use\nppu gdb instead of regular gdb. And emacs will just ask you\nwhat you want to invoke.",
    "start": "1089310",
    "end": "1096470"
  },
  {
    "text": "You just want to replace\ngdb with ppu gdb. Anytime you're\ndebugging within emacs,",
    "start": "1096470",
    "end": "1104860"
  },
  {
    "text": "if emacs has your\nsource code files open, it will show you the\ncurrent point of execution by drawing a little arrow\nnext to the particular line",
    "start": "1104860",
    "end": "1115840"
  },
  {
    "text": "in the buffer.  You also get a bunch\nof keyboard shortcuts",
    "start": "1115840",
    "end": "1122120"
  },
  {
    "text": "that you can use to do\nsome common operations. You can set breakpoints\nwith Control X Space,",
    "start": "1122120",
    "end": "1128470"
  },
  {
    "text": "just by placing your cursor\nat the particular line that you want to stop at.",
    "start": "1128470",
    "end": "1134260"
  },
  {
    "text": "So you don't have to go\nto gdb and type break whatever whatever. ",
    "start": "1134260",
    "end": "1141440"
  },
  {
    "text": "But when you do\nm-x gdb in emacs, you get a separate\nbuffer for gdb. And so you can issue all the\ncommands that you normally",
    "start": "1141440",
    "end": "1147880"
  },
  {
    "text": "would want to.  OK, so the first\nthing we're going",
    "start": "1147880",
    "end": "1154429"
  },
  {
    "text": "to try-- this should\nbe really quick-- is we're just going to\nopen up a brief program",
    "start": "1154430",
    "end": "1163750"
  },
  {
    "text": "and make sure you\ncan invoke gdb on it. ",
    "start": "1163750",
    "end": "1177880"
  },
  {
    "start": "1170000",
    "end": "1305000"
  },
  {
    "text": "And you'll have to\nset Cell top if you don't have that set already. ",
    "start": "1177880",
    "end": "1193620"
  },
  {
    "text": "I'm just going to do\nit on the same one. [INAUDIBLE] AUDIENCE: How do\nyou exit gdb again?",
    "start": "1193620",
    "end": "1200240"
  },
  {
    "text": "PHIL: Oh, you can do\nQuit or Control D.",
    "start": "1200240",
    "end": "1212770"
  },
  {
    "text": "So once you've attached gdb to\na program, when you exit gdb it will quit the program\nthat you were running,",
    "start": "1212770",
    "end": "1218299"
  },
  {
    "text": "unless you do detach first.  For this one it\ndoesn't really matter,",
    "start": "1218300",
    "end": "1223890"
  },
  {
    "text": "because we're looking\nat a crash anyway. ",
    "start": "1223890",
    "end": "1231621"
  },
  {
    "text": "PROFESSOR: [INAUDIBLE]\nAnybody [INAUDIBLE]? ",
    "start": "1231621",
    "end": "1238439"
  },
  {
    "text": "OK. AUDIENCE: How do you evaluate\nsomething [INAUDIBLE]?",
    "start": "1238439",
    "end": "1244320"
  },
  {
    "text": "PHIL: You can evaluate an\nexpression using Print. ",
    "start": "1244320",
    "end": "1251740"
  },
  {
    "text": "OK, any questions?  All right, so all\nI did here was run",
    "start": "1251740",
    "end": "1258760"
  },
  {
    "text": "and then the program crashes. This is just lab one without the\nalignment in the control block",
    "start": "1258760",
    "end": "1272420"
  },
  {
    "text": "that you need to make\neverything work correctly. And so all I did\nhere was run and then",
    "start": "1272420",
    "end": "1277590"
  },
  {
    "text": "the program crashes\nand then print cb. And of course,\nthis thing is going to be 0 because the DMA transfer\nto do that doesn't work.",
    "start": "1277590",
    "end": "1286711"
  },
  {
    "text": "Questions?  OK so we can exit the\ndebugger with Control D.",
    "start": "1286711",
    "end": "1294520"
  },
  {
    "text": "And it'll ask if you\nwant to kill the program. ",
    "start": "1294520",
    "end": "1305900"
  },
  {
    "start": "1305000",
    "end": "1605000"
  },
  {
    "text": "So gdb also has\nfeatures to help you with debugging programs\nthat have multiple threads.",
    "start": "1305900",
    "end": "1312440"
  },
  {
    "text": "Whenever a new thread is created\nor a thread is destroyed,",
    "start": "1312440",
    "end": "1318679"
  },
  {
    "text": "gdb will print a brief\nmessage to tell you. And one important thing is\nit will print this LWP number",
    "start": "1318680",
    "end": "1328419"
  },
  {
    "text": "on the PlayStations. ",
    "start": "1328420",
    "end": "1334280"
  },
  {
    "text": "To get a list of threads\nyou can type info threads. And gdb always\nmaintains this thing",
    "start": "1334280",
    "end": "1339530"
  },
  {
    "text": "called the current thread. And by default, when you do\nmany of these other actions",
    "start": "1339530",
    "end": "1345360"
  },
  {
    "text": "they're going to apply\nto the current thread. And so to examine things\nabout other threads",
    "start": "1345360",
    "end": "1351510"
  },
  {
    "text": "you're going to have\nto change the thread. And to do that you do\nthread and some number.",
    "start": "1351510",
    "end": "1356890"
  },
  {
    "text": "When you do info\nthreads, it's going to give you this\nlist of threads which are numbered, for example,\n1, 2, 3 on the left.",
    "start": "1356890",
    "end": "1364190"
  },
  {
    "text": "And the LWP numbers\nthat are displayed are going to correspond\nto these that came up when the threads were started.",
    "start": "1364190",
    "end": "1372005"
  },
  {
    "text": "But you're going to have to\nuse these numbers on the left to switch between threads. And when you do\ninfo threads, gdb",
    "start": "1372005",
    "end": "1378600"
  },
  {
    "text": "will mark the current thread\nwith a star on the left. And it will also show\nyou where each thread",
    "start": "1378600",
    "end": "1383770"
  },
  {
    "text": "is executing right now. Questions? ",
    "start": "1383770",
    "end": "1390475"
  },
  {
    "text": "AUDIENCE: Where does it\nshow you [INAUDIBLE]? ",
    "start": "1390475",
    "end": "1397300"
  },
  {
    "text": "PHIL: It will show the procedure\nand the file name and line number, if that\ninformation is available.",
    "start": "1397300",
    "end": "1406020"
  },
  {
    "text": "PROFESSOR: If you can't\nfind out which [INAUDIBLE]. AUDIENCE: That's\nwhat I was saying-- PHIL: Ah.",
    "start": "1406020",
    "end": "1411700"
  },
  {
    "text": "No. AUDIENCE: [INAUDIBLE] PROFESSOR: I don't believe\nyou can get that information.",
    "start": "1411700",
    "end": "1418650"
  },
  {
    "text": "We can check.  David, do you know?",
    "start": "1418650",
    "end": "1425985"
  },
  {
    "text": "Sorry [INAUDIBLE]. So David says\nmaybe you can do it",
    "start": "1425985",
    "end": "1431075"
  },
  {
    "text": "on a simulator, but\nnot [INAUDIBLE]. ",
    "start": "1431075",
    "end": "1437380"
  },
  {
    "text": "PHIL: OK. So we're going to try\nthis brief exercise, which is just to get you to work with\ndealing with multiple threads.",
    "start": "1437380",
    "end": "1447630"
  },
  {
    "text": "And what you're going\nto do is load the lab 1 program, which is the correctly\nworking solution for lab 1.",
    "start": "1447630",
    "end": "1456200"
  },
  {
    "text": "And if you'll recall, this\nprogram has multiple threads. The PPU thread maintains\nan array of control blocks.",
    "start": "1456200",
    "end": "1464452"
  },
  {
    "text": "And it's going to send the\naddresses of those control blocks to the SPUs. So what we're going\nto do is we're just",
    "start": "1464452",
    "end": "1470320"
  },
  {
    "text": "going to set breakpoints\nat the right places to verify that the first SPU\nthread is getting the control",
    "start": "1470320",
    "end": "1479760"
  },
  {
    "text": "block which is the same\nas one of the control blocks in the PPU program. All right, any\nquestions about that?",
    "start": "1479760",
    "end": "1485929"
  },
  {
    "text": "This is in [? rec ?] 4, lab 1. ",
    "start": "1485930",
    "end": "1493470"
  },
  {
    "text": "So you're going to have\nto run and set breakpoints at the right places. And you're going to want to set\none break point in each thread",
    "start": "1493470",
    "end": "1500840"
  },
  {
    "text": "to be able to examine the value\nof CB that's being produced. ",
    "start": "1500840",
    "end": "1570380"
  },
  {
    "text": "PROFESSOR: [INAUDIBLE]\nright after the recitation. As another exercise for those\nof you who did get through,",
    "start": "1570380",
    "end": "1576490"
  },
  {
    "text": "the way you'll actually\nrun into these problems is you'll run your\nprogram and you might end up with a bus error.",
    "start": "1576490",
    "end": "1581660"
  },
  {
    "text": "So what you might want\nto do is then launch gdb. And you run to the error. And then you trace back\nin the execution to see,",
    "start": "1581660",
    "end": "1588320"
  },
  {
    "text": "uh-oh, is my control\nblock value matching? So you might want to try that\nfor the second exercise online.",
    "start": "1588320",
    "end": "1593982"
  },
  {
    "start": "1593982",
    "end": "1600210"
  },
  {
    "text": "PHIL: Should do the\nstack profiling thing? PROFESSOR: Yeah, just go\nthrough that. [INAUDIBLE].",
    "start": "1600210",
    "end": "1605416"
  },
  {
    "start": "1605000",
    "end": "1645000"
  },
  {
    "text": "PHIL: OK.  So one problem that\nyou may have run into",
    "start": "1605416",
    "end": "1612160"
  },
  {
    "text": "is that gdb will remove\nbreakpoints from threads",
    "start": "1612160",
    "end": "1617300"
  },
  {
    "text": "that exit, which is a problem\nif you have more than one thread running the same program.",
    "start": "1617300",
    "end": "1623220"
  },
  {
    "text": "And if you're\ndebugging SPU programs, gdb may complain about not being\nable to find the source files.",
    "start": "1623220",
    "end": "1628510"
  },
  {
    "text": "But if you just\nignore that message, it seems to find\nthem OK, I think.",
    "start": "1628510",
    "end": "1637020"
  },
  {
    "text": "You can use SPU gdb to debug\nthe SPU programs by themselves. You can try that sometime.",
    "start": "1637020",
    "end": "1642445"
  },
  {
    "start": "1642445",
    "end": "1648789"
  },
  {
    "text": "OK, so actually figuring\nout what the errors are, unfortunately you don't\nget very much information",
    "start": "1648790",
    "end": "1653860"
  },
  {
    "text": "from the actual\nerrors that occur. But maybe looking at where\nthe errors are occurring can help you figure things out.",
    "start": "1653860",
    "end": "1661170"
  },
  {
    "text": "If you've run into\nmemory misalignment problems or the problem in\nthe last recitation where",
    "start": "1661170",
    "end": "1669910"
  },
  {
    "text": "we had DMA transfers\nthat were too big, those are all going\nto be bus errors. Under various\nother circumstances",
    "start": "1669910",
    "end": "1675760"
  },
  {
    "text": "you might get\nsegmentation faults. And if you think your program\nis running into a deadlock,",
    "start": "1675760",
    "end": "1681820"
  },
  {
    "text": "you can also use gdb to kind\nof attach to the program and then examine the\nstate of that program",
    "start": "1681820",
    "end": "1688360"
  },
  {
    "text": "to see what's waiting for what. ",
    "start": "1688360",
    "end": "1693830"
  },
  {
    "start": "1690000",
    "end": "1780000"
  },
  {
    "text": "OK, so static profiling. We have some tools\nfor the Cell that will allow you to, when you\nhave a sequence of assembly",
    "start": "1693830",
    "end": "1707760"
  },
  {
    "text": "instructions, figure out when\nthose instructions are going to get scheduled and how fast\nthe resulting sequence will",
    "start": "1707760",
    "end": "1713309"
  },
  {
    "text": "run. So in order to take\nadvantage of this you need to use GCC dash big\nS to generate your assembly.",
    "start": "1713310",
    "end": "1720030"
  },
  {
    "text": "And you can also\ndo that with xlc. If you're using\nour makefiles you can also use make whatever\nfile named dot s in order",
    "start": "1720030",
    "end": "1728400"
  },
  {
    "text": "to generate the assembly\nfrom your source code.",
    "start": "1728400",
    "end": "1734020"
  },
  {
    "text": "Then once you have\nthe dot s file you can run this utility\ncalled SPU timing.",
    "start": "1734020",
    "end": "1739070"
  },
  {
    "text": "And what SPU timing\ndoes is it will take all the instructions\nthat are in your assembly",
    "start": "1739070",
    "end": "1745750"
  },
  {
    "text": "and figure out the\ndependencies between them. And then it will figure\nout when the earliest point is that each\ninstruction can get executed.",
    "start": "1745750",
    "end": "1753020"
  },
  {
    "text": "And it will print out the\nschedule that's generated. So if you provide the\ndash running count option,",
    "start": "1753020",
    "end": "1761460"
  },
  {
    "text": "then it will also\nshow you how many cycles in all the entire\nprogram will take.",
    "start": "1761460",
    "end": "1773039"
  },
  {
    "text": "And the output goes into\nfile name dot s dot timing. ",
    "start": "1773040",
    "end": "1782570"
  },
  {
    "start": "1780000",
    "end": "1875000"
  },
  {
    "text": "So for how instructions are\nscheduled on Cell, if you'll recall, there's two\npipelines for different kinds",
    "start": "1782570",
    "end": "1789780"
  },
  {
    "text": "of instructions. And some instructions\ncan only run on one or the other of the pipelines. And some instructions\ncan run on both.",
    "start": "1789780",
    "end": "1795870"
  },
  {
    "text": " Now, how Cell actually\nschedules those instructions is",
    "start": "1795870",
    "end": "1801530"
  },
  {
    "text": "it's always going to go in\norder that the instructions are specified in the binary.",
    "start": "1801530",
    "end": "1808730"
  },
  {
    "text": "And whenever there's two\ninstructions next to each other",
    "start": "1808730",
    "end": "1815580"
  },
  {
    "text": "and the first instruction\ncan run on pipeline zero and the second instruction\ncan run on pipeline one,",
    "start": "1815580",
    "end": "1821809"
  },
  {
    "text": "then Cell will try and schedule\nthose at the same time. And that's called dual issue.",
    "start": "1821810",
    "end": "1827270"
  },
  {
    "text": "So if you were taking\nadvantage of that dual issue all the time, then\npotentially you could schedule two\ninstructions every cycle.",
    "start": "1827270",
    "end": "1833210"
  },
  {
    "start": "1833210",
    "end": "1839100"
  },
  {
    "text": "Oh yes, and unlike a lot of\nother architectures nowadays, Cell does not have dynamic\nrent branch prediction.",
    "start": "1839100",
    "end": "1846309"
  },
  {
    "text": "All the branch prediction is\nencoded inside the assembly",
    "start": "1846310",
    "end": "1853020"
  },
  {
    "text": "that you're using. So that means for any\ntype of loop or whatever, you have to be sure to get\nthe branch prediction right.",
    "start": "1853020",
    "end": "1861010"
  },
  {
    "text": "If the branch\nprediction is wrong, Cell is going to end up\npre-fetching instructions",
    "start": "1861010",
    "end": "1866309"
  },
  {
    "text": "along the wrong line. And it's going to have to\nstall by about 20 cycles",
    "start": "1866310",
    "end": "1873370"
  },
  {
    "text": "when it figures out that\nthe branch is wrong. ",
    "start": "1873370",
    "end": "1881050"
  },
  {
    "start": "1875000",
    "end": "1940000"
  },
  {
    "text": "So if you're looking at the\ngenerated assembly on Cell, all the instructions are going\nto be of the form operation,",
    "start": "1881050",
    "end": "1888230"
  },
  {
    "text": "then the destination register,\nand then two or more sources.",
    "start": "1888230",
    "end": "1894600"
  },
  {
    "text": "And if you're trying to\njust kind of orient yourself in the generated assembly,\nthere are sometimes",
    "start": "1894600",
    "end": "1899940"
  },
  {
    "text": "these helpful markers. So if you're looking at\nthe generated assembly",
    "start": "1899940",
    "end": "1906360"
  },
  {
    "text": "for dist_spu, then\nit's going to have a header at the top\nwhich says which files",
    "start": "1906360",
    "end": "1912010"
  },
  {
    "text": "were included inside this file.",
    "start": "1912010",
    "end": "1917120"
  },
  {
    "text": "And then where the\nactual assembly is there'll be these markers\nthat say, for example, location",
    "start": "1917120",
    "end": "1924140"
  },
  {
    "text": "1 19. And what this means is that here\nis the assembly corresponding to file 1 line 19.",
    "start": "1924140",
    "end": "1931902"
  },
  {
    "text": "So that's kind of\nhelpful if you're trying to get your bearings\ninside the assembly.",
    "start": "1931902",
    "end": "1937970"
  },
  {
    "text": "Because otherwise it's really\nhard to make heads or tails of. Questions? ",
    "start": "1937970",
    "end": "1944960"
  },
  {
    "start": "1940000",
    "end": "2025000"
  },
  {
    "text": "All right, so after you\nactually run your assembly through the static profiler,\nit will spit out this schedule.",
    "start": "1944960",
    "end": "1950420"
  },
  {
    "text": "And what the schedule shows\nis which clock cycles are used",
    "start": "1950420",
    "end": "1955450"
  },
  {
    "text": "for every single instruction. There's one line for each\nassembly instruction.",
    "start": "1955450",
    "end": "1960730"
  },
  {
    "text": "And what it's\ngoing to do is it's going to print one digit in\nthis schedule for each cycle",
    "start": "1960730",
    "end": "1965980"
  },
  {
    "text": "that the instruction takes. All right?",
    "start": "1965980",
    "end": "1971299"
  },
  {
    "text": "So you can kind of\nthink of this dimension as the passage of time. And what happens\nis that these guys,",
    "start": "1971300",
    "end": "1978219"
  },
  {
    "text": "when they get to\nthe right-hand side, they'll wrap around it\n50 columns or whatever. ",
    "start": "1978219",
    "end": "1985840"
  },
  {
    "text": "And you'll be able to notice\nwhen these instructions are being scheduled. And sometimes when\nthere's dependencies",
    "start": "1985840",
    "end": "1992040"
  },
  {
    "text": "between instructions,\nthe instructions are not able to get scheduled\nat the earliest possible time.",
    "start": "1992040",
    "end": "1999960"
  },
  {
    "text": "And when that happens\nyou'll see these dashes, which mean that the instruction\nis being stalled to wait",
    "start": "1999960",
    "end": "2005580"
  },
  {
    "text": "for one of the dependencies. In order to make\nyour code fast you're going to want to\neliminate these stalls.",
    "start": "2005580",
    "end": "2013270"
  },
  {
    "text": "And you can do that\nto a large extent by reordering your instructions. ",
    "start": "2013270",
    "end": "2020276"
  },
  {
    "text": "AUDIENCE: Can you stop\nat the previous slide? PHIL: Yep. PROFESSOR: [INAUDIBLE] ",
    "start": "2020276",
    "end": "2028100"
  },
  {
    "start": "2025000",
    "end": "2142000"
  },
  {
    "text": "PHIL: Pardon? PROFESSOR: The point of\ninstruction scheduling [INAUDIBLE].",
    "start": "2028100",
    "end": "2033317"
  },
  {
    "text": "PHIL: So the point of\ninstruction scheduling is going to be to minimize\nthe number of stalls.",
    "start": "2033317",
    "end": "2038550"
  },
  {
    "text": " And you can do that by, if\nyou have instructions which",
    "start": "2038550",
    "end": "2046454"
  },
  {
    "text": "are going to be dependencies\nfor other instructions, you just want to move\nthose as far up as you can.",
    "start": "2046454",
    "end": "2053394"
  },
  {
    "text": "PROFESSOR: So ideally you would\nget to instructions per cycle, or how many instructions\ncan you use per cycle?",
    "start": "2053394",
    "end": "2058770"
  },
  {
    "text": "Two, because you can have\ndual issue, two pipelines. Or how many cycles per\ninstruction [INAUDIBLE]",
    "start": "2058770",
    "end": "2065799"
  },
  {
    "text": "by a half. Because you're getting two\ninstructions per cycle, so [INAUDIBLE]. So we have an\nexercise that actually",
    "start": "2065800",
    "end": "2072810"
  },
  {
    "text": "has you understand\nthe assembly code, and then doing the\ninstruction reordering. So we'll leave\nthat on the slides.",
    "start": "2072810",
    "end": "2078419"
  },
  {
    "text": "You can do it offline. But we'll pick up\nwith this next week and go over instruction\nscheduling, some DMA tricks",
    "start": "2078420",
    "end": "2085300"
  },
  {
    "text": "for improving performance. And in particular, the thing\nwe'll focus on quite rigorously",
    "start": "2085300",
    "end": "2090408"
  },
  {
    "text": "is [INAUDIBLE]. So Phil's going to walk you\nthrough how you actually [? synchronize ?]\nand get performance from the vectorization\nand the intrinsics.",
    "start": "2090409",
    "end": "2098883"
  },
  {
    "text": "We'll talk a little bit about\n[? heat ?] dynamic profiling. And for those of you who are\nstill having problems with gdp,",
    "start": "2098884",
    "end": "2104812"
  },
  {
    "text": "we'll try to resolve those\nnow since it'll probably be very useful for your projects.",
    "start": "2104812",
    "end": "2110080"
  },
  {
    "text": "And we installed CVS in the\nmain directory on every PS3, for those of you\nwho actually want",
    "start": "2110080",
    "end": "2116141"
  },
  {
    "text": "to use it and go through\nthe trouble of setting up their own CVS. The CVS that's\nsatisfied actually",
    "start": "2116141",
    "end": "2121910"
  },
  {
    "text": "notified the local\nusers on that machine. So that would be\neverybody on your team. It will send out an\nemail whenever somebody",
    "start": "2121910",
    "end": "2127991"
  },
  {
    "text": "does a check-in or\nan import, to let them know that there's some\nnew information that they don't want to update.",
    "start": "2127991",
    "end": "2133664"
  },
  {
    "text": "If you don't know how to use\nCVS or want a quick tutorial, just stop by. Some of the TAs will\nbe able to help you.",
    "start": "2133664",
    "end": "2138780"
  },
  {
    "text": "OK? [INAUDIBLE]",
    "start": "2138780",
    "end": "2142430"
  }
]