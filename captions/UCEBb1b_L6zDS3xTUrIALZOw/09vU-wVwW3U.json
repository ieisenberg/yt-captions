[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6360"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6360",
    "end": "13339"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13340",
    "end": "20872"
  },
  {
    "start": "20000",
    "end": "136000"
  },
  {
    "text": "LING REN: All right,\nwelcome everyone. This is 6046 presentation. Just make sure you're\nin the right place.",
    "start": "20872",
    "end": "27540"
  },
  {
    "text": " My name is Ling Ren. I'm one of the 10\nTAs for this class.",
    "start": "27540",
    "end": "36570"
  },
  {
    "text": "We do have a second\nTA for this section. I think he is not\nhere right now,",
    "start": "36570",
    "end": "41840"
  },
  {
    "text": "but, basically,\n[INAUDIBLE] and I will be switching every other week.",
    "start": "41840",
    "end": "48839"
  },
  {
    "text": "I want to remind\nyou, just a heads up, this section is recorded\nfor OCW purpose.",
    "start": "48840",
    "end": "55500"
  },
  {
    "text": "But I think he's only\nrecording us, the TAs.",
    "start": "55500",
    "end": "61110"
  },
  {
    "text": "You're not in a camera. ",
    "start": "61110",
    "end": "68040"
  },
  {
    "text": "All right, so, the only\npurpose we are here is to help you learn this very\ninteresting, and also very",
    "start": "68040",
    "end": "73060"
  },
  {
    "text": "useful, class. So don't hesitate\nto ask any questions or give us any feedback,\nlike whether I'm",
    "start": "73060",
    "end": "80170"
  },
  {
    "text": "going too fast or too slow,\nwhether you want us to cover something that's not\nin the posted schedule,",
    "start": "80170",
    "end": "88370"
  },
  {
    "text": "or just anything we can help. All right, so let's get started.",
    "start": "88370",
    "end": "94930"
  },
  {
    "text": "The two lectures in this\nweek, in the first week, focus on divide and conquer.",
    "start": "94930",
    "end": "100220"
  },
  {
    "start": "100220",
    "end": "109610"
  },
  {
    "text": "It is a class of algorithm\nthat usually involves recursion in the algorithm description.",
    "start": "109610",
    "end": "115960"
  },
  {
    "text": "And Professor Devadas worked\nthrough several algorithms,",
    "start": "115960",
    "end": "122220"
  },
  {
    "text": "including weighted\ninterval scheduling and a bunch of others, and he\nleft several open problems.",
    "start": "122220",
    "end": "127949"
  },
  {
    "start": "127949",
    "end": "140920"
  },
  {
    "start": "136000",
    "end": "1360000"
  },
  {
    "text": "So we will answer those open\nquestions in this section, and we'll also show\nyou a new algorithm,",
    "start": "140920",
    "end": "147810"
  },
  {
    "text": "and analyze a bunch\nof other algorithms. So just to remind everyone what\nweighted interval scheduling",
    "start": "147810",
    "end": "155520"
  },
  {
    "text": "is.  In this problem, we are\ngiven a bunch of requests,",
    "start": "155520",
    "end": "172489"
  },
  {
    "text": "each with a start time\nand a finish time. And our goal is to find a subset\nof them that are compatible,",
    "start": "172490",
    "end": "181480"
  },
  {
    "text": "meaning they do not\noverlap, and that have a largest combined weight.",
    "start": "181480",
    "end": "187640"
  },
  {
    "text": "OK, are we clear? Everyone clear about that? So an easier case\nis when the problem",
    "start": "187640",
    "end": "194260"
  },
  {
    "text": "is unweighted, meaning that\nevery task has the same weight. In that case, we can just solve\nit using our greedy algorithm.",
    "start": "194260",
    "end": "204120"
  },
  {
    "text": "But when the problem\nbecomes weighted, we have to use dynamic\nprogramming, or recursion,",
    "start": "204120",
    "end": "209860"
  },
  {
    "text": "and Srini introduced a\nsimple one, a basic version,",
    "start": "209860",
    "end": "215560"
  },
  {
    "text": "in a class. Can someone remind us\nhow that algorithm works?",
    "start": "215560",
    "end": "221395"
  },
  {
    "text": "Any volunteers? ",
    "start": "221395",
    "end": "233645"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] LING REN: Can you speak louder?",
    "start": "233645",
    "end": "239650"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]\nso we find that it's not conflicting [INAUDIBLE]. ",
    "start": "239650",
    "end": "249330"
  },
  {
    "text": "LING REN: So what's your name? AUDIENCE: [INAUDIBLE]",
    "start": "249330",
    "end": "255749"
  },
  {
    "text": "LING REN: Yeah, I think\nthe version you described is for the unweighted case. In unweighted case,\nwe just schedule",
    "start": "255749",
    "end": "262229"
  },
  {
    "text": "the 1 with the\nearliest finish time, and, then, we remove all\nthe incompatible ones, and we keep going, right?",
    "start": "262230",
    "end": "268500"
  },
  {
    "text": "That solved the\nunweighted version. If it's the weighted version,\nwe need to use recursion.",
    "start": "268500",
    "end": "274495"
  },
  {
    "text": "And remember, we break the\nproblem into many sub-problems,",
    "start": "274495",
    "end": "279970"
  },
  {
    "text": "and each one can potentially\nbe an optimal solution. Does anyone remember that?",
    "start": "279970",
    "end": "285080"
  },
  {
    "text": " Care to give it a try? AUDIENCE: Sure.",
    "start": "285080",
    "end": "290862"
  },
  {
    "text": "So we break it into subproblems. We took the best solution\nfrom a certain point,",
    "start": "290862",
    "end": "297694"
  },
  {
    "text": "and then we calculate\nthat subproblem starting at all the\ndifferent finish times.",
    "start": "297694",
    "end": "303062"
  },
  {
    "text": "[INAUDIBLE] LING REN: Great. What is your name? AUDIENCE: [? Amin. ?]",
    "start": "303062",
    "end": "310090"
  },
  {
    "text": "LING REN: [? Amin? ?] OK. [? Amin ?] said, let's\njust try every one as our potential first request.",
    "start": "310090",
    "end": "318775"
  },
  {
    "text": " So if we request the j as\nour first, we get its weight.",
    "start": "318775",
    "end": "328890"
  },
  {
    "text": "And then, we're going\nto solve a subproblem. So let me call the\noriginal problem.",
    "start": "328890",
    "end": "333930"
  },
  {
    "text": "We did interval scheduling\nwith all the incoming requests.",
    "start": "333930",
    "end": "341039"
  },
  {
    "text": "Now, we choose j,\nrequest as our first. Now, we are left with a\nsubproblem that starts",
    "start": "341040",
    "end": "351800"
  },
  {
    "text": "after request to j finishes. So I'll write that\nas Rj, Where I",
    "start": "351800",
    "end": "359330"
  },
  {
    "text": "define Rj to be the set of\nrequests where their stop",
    "start": "359330",
    "end": "366349"
  },
  {
    "text": "time is later than the finish\ntime of the j-th request.",
    "start": "366350",
    "end": "375170"
  },
  {
    "text": " OK, so just to repeat,\nwe choose a request,",
    "start": "375170",
    "end": "383180"
  },
  {
    "text": "has the potential to\nbe the first request, and then, we look at all the\nrequests that start after it,",
    "start": "383180",
    "end": "389510"
  },
  {
    "text": "and solve a subproblem\nof that case. Then, we take a max of\nall the candidate we have,",
    "start": "389510",
    "end": "403880"
  },
  {
    "text": "and that's going to give\nus the optimal solution. Any question about\nthis algorithm? ",
    "start": "403880",
    "end": "414979"
  },
  {
    "text": "So this algorithm\nruns in n square time. ",
    "start": "414980",
    "end": "425560"
  },
  {
    "text": "Now, we're going to try to\noptimize that, and come up with a better algorithm.",
    "start": "425560",
    "end": "432460"
  },
  {
    "text": "So in order to improve\nanything, we first",
    "start": "432460",
    "end": "438330"
  },
  {
    "text": "want to identify the\ninefficiency in this algorithm. So which part in\nthe algorithm do you",
    "start": "438330",
    "end": "445960"
  },
  {
    "text": "think is inefficient,\nor silly, unnecessary? Go ahead. AUDIENCE: So it's\ninefficient to look",
    "start": "445960",
    "end": "451594"
  },
  {
    "text": "through every previous\nsubproblem, when we're trying to find maximum [INAUDIBLE].",
    "start": "451594",
    "end": "462890"
  },
  {
    "text": "LING REN: I was\nsaying that we don't need to go through\nevery of this case.",
    "start": "462890",
    "end": "468428"
  },
  {
    "text": "AUDIENCE: Yeah,\nwe shouldn't Well, we should be able to efficiently\nquery for the right one.",
    "start": "468428",
    "end": "478090"
  },
  {
    "text": "LING REN: OK, I think you\nare definitely correct. So let me just go through what\nthis algorithm does, and it",
    "start": "478090",
    "end": "485230"
  },
  {
    "text": "will be more clear. So what this means is, I'll\nchoose the first request.",
    "start": "485230",
    "end": "492509"
  },
  {
    "text": "I'll request 1 as\nmy first request. Then, I'm going to consider\nonly the requests that",
    "start": "492510",
    "end": "498090"
  },
  {
    "text": "start after 1 finishes, right? That only leaves request a 5. Potentially some other's\nalready been drawn there.",
    "start": "498090",
    "end": "505710"
  },
  {
    "text": "That's my first\ncandidate in that max. My second candidate is actually\nrequest 2 as my first request.",
    "start": "505710",
    "end": "514169"
  },
  {
    "text": "Then, I have to remove request\n1, because it starts too early, and then, I'm left with\nall the remaining requests.",
    "start": "514169",
    "end": "520510"
  },
  {
    "text": "I'll solve that subproblem. That's candidate 2. Candidate 3, I chose request\n3 as my first request,",
    "start": "520510",
    "end": "530190"
  },
  {
    "text": "and then I have\nto remove 1 and 2, because they start too early. Oh, 4 as well.",
    "start": "530190",
    "end": "535817"
  },
  {
    "text": "It also starts too early, right? Before 3 finishes. Everyone following that? So we're left with\nthe remaining request.",
    "start": "535817",
    "end": "544170"
  },
  {
    "text": "Is it more clear now?  Go ahead.",
    "start": "544170",
    "end": "549290"
  },
  {
    "text": "AUDIENCE: So candidate, if\nyou start with 3, that's actually a subproblem of 2.",
    "start": "549290",
    "end": "556139"
  },
  {
    "text": "[INAUDIBLE]  LING REN: Great point.",
    "start": "556140",
    "end": "562462"
  },
  {
    "text": "What's your name? AUDIENCE: Andrew. LING REN: Andrew said,\nwe can potentially be solving many repeated\nsubproblems, like this.",
    "start": "562462",
    "end": "572589"
  },
  {
    "text": "We definitely don't\nwant to do that. And that's actually the core\nidea, the one crisp idea",
    "start": "572590",
    "end": "579339"
  },
  {
    "text": "of dynamic programming. Andrew, can you tell me\nwhat's the definition of dynamic programming?",
    "start": "579340",
    "end": "586016"
  },
  {
    "text": "You remember? Anyone remember that? Go ahead. AUDIENCE: Just memorize\nsubproblems, then look them up.",
    "start": "586016",
    "end": "593940"
  },
  {
    "text": "LING REN: Exactly. So dynamic programming says,\nwe will break a problem",
    "start": "593940",
    "end": "600060"
  },
  {
    "text": "into subproblems,\nand subproblems into even more subproblems,\nbut whenever we solve one,",
    "start": "600060",
    "end": "605370"
  },
  {
    "text": "we should memorize, or\njust remember its result and store it somewhere.",
    "start": "605370",
    "end": "610449"
  },
  {
    "text": "And if you need it again,\nwe'll just retrieve it, without resolving the problem. ",
    "start": "610450",
    "end": "616830"
  },
  {
    "text": "That's definitely a great point. So we can analyze the\ncomplexity of this algorithm",
    "start": "616830",
    "end": "624050"
  },
  {
    "text": "later, because I want\nto touch on this more efficient algorithm first. And we'll see that, even\nafter Andrew's optimization,",
    "start": "624050",
    "end": "631070"
  },
  {
    "text": "its runtime is n square. So without that\nobservation, if we are solving repeated\nsubproblems,",
    "start": "631070",
    "end": "636579"
  },
  {
    "text": "these will be a lot\nworse than that. Yeah, go ahead. AUDIENCE: You can also trim\nones that get to the same place,",
    "start": "636580",
    "end": "644061"
  },
  {
    "text": "so you don't need to\nexplore two paths. LING REN: Sorry, say that again? AUDIENCE: You don't need\nto explore two paths that",
    "start": "644062",
    "end": "649709"
  },
  {
    "text": "[INAUDIBLE] both exploring 3. Once they're both looking\nat 3, then you only need to do the ones more\nefficient to that point.",
    "start": "649710",
    "end": "656360"
  },
  {
    "text": "LING REN: OK, cool. Go ahead. Oh, same thing? AUDIENCE: Well, I have\nanother one as well.",
    "start": "656360",
    "end": "662316"
  },
  {
    "text": "So I think to get\nbetter than n squared, we need to make the observation\nthat it's always fine to start",
    "start": "662316",
    "end": "673140"
  },
  {
    "text": "a subproblem later. So if you've decided\nyou're taking a certain sequence of intervals\nfrom your first interval,",
    "start": "673140",
    "end": "679896"
  },
  {
    "text": "and then you want to see\nhow to compute from there, it's always valid to start\nlater than, maybe, you had to.",
    "start": "679896",
    "end": "691708"
  },
  {
    "text": "So that means that\nif we can efficiently starting at any\nparticular point,",
    "start": "691708",
    "end": "696968"
  },
  {
    "text": "query for the maximum of any\nof the subproblems starting",
    "start": "696968",
    "end": "702956"
  },
  {
    "text": "after that point, then\nwe can [INAUDIBLE].. LING REN: OK, great. I think we are on the same page.",
    "start": "702956",
    "end": "708740"
  },
  {
    "text": "So when I describe the\nsteps of this algorithm, remember this third candidate.",
    "start": "708740",
    "end": "716110"
  },
  {
    "text": "I choose this as\nmy first, right? It makes zero sense,\nbecause, if I do that,",
    "start": "716110",
    "end": "723230"
  },
  {
    "text": "I might as well\nput in 2, as well. Doesn't hurt, right?",
    "start": "723230",
    "end": "730116"
  },
  {
    "text": "Everyone get that? So the idea is that we\nshouldn't try every possible W",
    "start": "730117",
    "end": "742120"
  },
  {
    "text": "request as my first. Some requests are\njust better, more suited to be the first request.",
    "start": "742120",
    "end": "749425"
  },
  {
    "text": "And how we're going to do that? So, apparently,\n1 can potentially be the first request.",
    "start": "749425",
    "end": "755020"
  },
  {
    "text": "2 can also be. But it doesn't make any\nsense for any requests",
    "start": "755020",
    "end": "760350"
  },
  {
    "text": "come after that, because\nthere's and earlier request. So the efficient\nalgorithm, let's",
    "start": "760350",
    "end": "768329"
  },
  {
    "text": "first sort them by\ntheir start time. We're going to consider the\nrequest that comes early first.",
    "start": "768330",
    "end": "776600"
  },
  {
    "start": "776600",
    "end": "782128"
  },
  {
    "text": "So I have my entire\nproblem, here. ",
    "start": "782128",
    "end": "788709"
  },
  {
    "text": "Now, I'm going to\nask a question. Should I include request\n1 in my solution or not?",
    "start": "788710",
    "end": "795750"
  },
  {
    "text": "That's only two cases. ",
    "start": "795750",
    "end": "802180"
  },
  {
    "text": "So if I do not select 1 in\nmy solution, what subproblem",
    "start": "802180",
    "end": "808440"
  },
  {
    "text": "am I left with? ",
    "start": "808440",
    "end": "814699"
  },
  {
    "text": "Any idea? If I decide I will not\ninclude 1 in my solution.",
    "start": "814700",
    "end": "822690"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. LING REN: Yeah, exactly.  There's no conflicts anywhere.",
    "start": "822690",
    "end": "829410"
  },
  {
    "text": "I'll solve a\nsubproblem from 2 to n. If I do decide to put my\nrequest 1 in a solution,",
    "start": "829410",
    "end": "837090"
  },
  {
    "text": "I get this weight. So what's the subproblem\nI'm left with? ",
    "start": "837090",
    "end": "849519"
  },
  {
    "text": "Yeah, in this\nexample, it's five. Correct. But more generally-- ",
    "start": "849520",
    "end": "856850"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] So every\nrequest that starts afterward.",
    "start": "856850",
    "end": "863100"
  },
  {
    "text": "LING REN: Exactly, every request\nthat starts after 1 finishes.",
    "start": "863100",
    "end": "869000"
  },
  {
    "text": "Now, suddenly, we are not\nbreaking the original problem into n subproblems. We only have two subproblems.",
    "start": "869000",
    "end": "874310"
  },
  {
    "start": "874310",
    "end": "880050"
  },
  {
    "text": "So let me draw a\nrecursion tree, which is a powerful tool in\nanalyzing these sort of things.",
    "start": "880050",
    "end": "885830"
  },
  {
    "text": " So we start with our original\nproblem, from 1 to n,",
    "start": "885830",
    "end": "896779"
  },
  {
    "text": "and we have two subproblems,\n2 to n and R1 to n.",
    "start": "896780",
    "end": "902760"
  },
  {
    "text": "This one, we'll also break\nthem into subproblems. So what is this one? ",
    "start": "902760",
    "end": "912590"
  },
  {
    "text": "OK, I have my sub\nproblem 2 to n, and I need to further\nreapply the same trick",
    "start": "912590",
    "end": "925856"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "925856",
    "end": "932102"
  },
  {
    "text": "The max of Wi has to be-- LING REN: Oh, sorry. ",
    "start": "932103",
    "end": "939660"
  },
  {
    "text": "These are the two cases.  Either I do not schedule\nmy first, or I schedule it,",
    "start": "939660",
    "end": "948650"
  },
  {
    "text": "and this is my first request. Now, here, I'm left\nwith this problem. Either I do not schedule\nit, or I schedule it",
    "start": "948650",
    "end": "956880"
  },
  {
    "text": "as my first request. So what is this one? ",
    "start": "956880",
    "end": "965102"
  },
  {
    "text": "AUDIENCE: Probably\nbe 3 to the n. LING REN: 3 to n,\nbecause now I'm",
    "start": "965102",
    "end": "970540"
  },
  {
    "text": "asking the same question for 2. And, here, I'll have R2\nto n, so on and so forth.",
    "start": "970540",
    "end": "980140"
  },
  {
    "text": "Now, let me point out the big\ndifference for this version,",
    "start": "980140",
    "end": "987700"
  },
  {
    "text": "and for the basic version. So I'm starting with the\nrequest that starts first.",
    "start": "987700",
    "end": "993820"
  },
  {
    "text": "If I do not do\nthat, say, if here, I am asking the question for\n5, do I schedule 5 as my first",
    "start": "993820",
    "end": "1002870"
  },
  {
    "text": "or not? Then, what happens? Then, these two branches\ndo not cover all the cases,",
    "start": "1002870",
    "end": "1011400"
  },
  {
    "text": "because I can\npotentially schedule it, but not as my first, in\nthe optimal solution,",
    "start": "1011400",
    "end": "1019839"
  },
  {
    "text": "if I'm asking a question\nfor a random request. However, if I start with the\nfirst request, first meaning it",
    "start": "1019840",
    "end": "1028970"
  },
  {
    "text": "starts earliest, it will\neither be not scheduled, or it will be scheduled,\nand as the first.",
    "start": "1028970",
    "end": "1034039"
  },
  {
    "text": "Because it cannot be the\nsecond request in my solution. ",
    "start": "1034040",
    "end": "1040432"
  },
  {
    "text": "Any questions about\nthis algorithm? ",
    "start": "1040432",
    "end": "1051230"
  },
  {
    "text": "OK, now, this is the algorithm. Let's analyze its complexity.",
    "start": "1051230",
    "end": "1057929"
  },
  {
    "text": "So what's the\noverall complexity. when we go all the\nway down, solve the entire original problem?",
    "start": "1057930",
    "end": "1065710"
  },
  {
    "text": "Any guesses?  What do you think? ",
    "start": "1065710",
    "end": "1075040"
  },
  {
    "text": "What do you think? Go ahead. AUDIENCE: It should be log\nn, because [INAUDIBLE] sort",
    "start": "1075040",
    "end": "1082484"
  },
  {
    "text": "the intervals, and we're going\nto need to, for every interval, find the next interval\nthat starts after it,",
    "start": "1082484",
    "end": "1093799"
  },
  {
    "text": "and do that for [INAUDIBLE]. LING REN: Cool. So the first step is\nsorting, which is n log n.",
    "start": "1093800",
    "end": "1101990"
  },
  {
    "text": " Now, after I sort everything,\nthe question I need to answer",
    "start": "1101990",
    "end": "1112890"
  },
  {
    "text": "is, how many unique\nsubproblems are there, in this entire recursion tree?",
    "start": "1112890",
    "end": "1118480"
  },
  {
    "text": "So I'm not going to solve\nthe same problem twice. How many unique\nproblems exist, here?",
    "start": "1118480",
    "end": "1124840"
  },
  {
    "text": " n of them, right? Just this left branch.",
    "start": "1124840",
    "end": "1130780"
  },
  {
    "text": "All the others will\nbe one of these. So I can start from the bottom\nof the tree and work my way up,",
    "start": "1130780",
    "end": "1139430"
  },
  {
    "text": "and when I want\nto take this step,",
    "start": "1139430",
    "end": "1144470"
  },
  {
    "text": "I'll look up the\nresult of this in one of the subproblems\nI've already solved.",
    "start": "1144470",
    "end": "1150100"
  },
  {
    "text": "So, actually, the recursion\nitself is only O of n.",
    "start": "1150100",
    "end": "1156971"
  },
  {
    "text": "AUDIENCE: I missed\nwhen you said, what is the sorting referring to?",
    "start": "1156972",
    "end": "1162080"
  },
  {
    "text": "LING REN: OK, so we need to\nstart with the request that",
    "start": "1162080",
    "end": "1167960"
  },
  {
    "text": "starts first, right? We need to decide whether\nwe schedule it or not.",
    "start": "1167960",
    "end": "1173710"
  },
  {
    "text": "And, then, we need to do the\nsame thing for this request 2. It's the start earliest\nrequest in this subset.",
    "start": "1173710",
    "end": "1180880"
  },
  {
    "text": "We always need to do that\nfor all the subproblems. ",
    "start": "1180880",
    "end": "1187890"
  },
  {
    "text": "So the overall\ncomplexity is n log n. ",
    "start": "1187890",
    "end": "1196510"
  },
  {
    "text": "But if we only focus\non this recursion step, our improvement is\nactually larger than that,",
    "start": "1196510",
    "end": "1201770"
  },
  {
    "text": "because it went from\nn square to O of n.",
    "start": "1201770",
    "end": "1210490"
  },
  {
    "text": "So why is the original\nalgorithm n squared? I think it also has only n\nunique subproblems, right?",
    "start": "1210490",
    "end": "1217920"
  },
  {
    "text": " So do you agree that the\noriginal algorithm is n",
    "start": "1217920",
    "end": "1224460"
  },
  {
    "text": "squared, or do you\nthink it's also O of n? Just focus on the\nrecursion step. ",
    "start": "1224460",
    "end": "1233720"
  },
  {
    "text": "AUDIENCE: Didn't the\noriginal algorithm solve some subproblems\nup to n times?",
    "start": "1233720",
    "end": "1239612"
  },
  {
    "text": "So that's why it's\nstill of n squared, because it solved\nthe same thing?",
    "start": "1239612",
    "end": "1244784"
  },
  {
    "text": "LING REN: But\nassuming I do not do that, assuming, whenever\nI solve it once, I store the result somewhere,\nand I directly get it.",
    "start": "1244784",
    "end": "1253100"
  },
  {
    "text": "Assuming I do that,\nwhat's the complexity? ",
    "start": "1253100",
    "end": "1261006"
  },
  {
    "text": "Go ahead. AUDIENCE: O of n. LING REN: You think it's O of n?",
    "start": "1261006",
    "end": "1266960"
  },
  {
    "text": "So anyone think it's n squared? Because I think Srini\nsaid it's n squared. Go ahead.",
    "start": "1266960",
    "end": "1272455"
  },
  {
    "text": "AUDIENCE: I think the\noriginal algorithm isn't [INAUDIBLE] squared,\nbecause we're still doing [INAUDIBLE] for every\nsubproblem [INAUDIBLE]..",
    "start": "1272456",
    "end": "1279360"
  },
  {
    "text": "LING REN: Exactly right. So, here, whenever\nwe go up one step, I'm doing constant\nnumber of work.",
    "start": "1279360",
    "end": "1286420"
  },
  {
    "text": "Just comparing two numbers\nand taking the max. However, in the\noriginal algorithm,",
    "start": "1286420",
    "end": "1291970"
  },
  {
    "text": "which is here, whenever\nI want to go one step up, there are n branches\nof the tree.",
    "start": "1291970",
    "end": "1300720"
  },
  {
    "text": "So my total amount of work is\n1 plus 2 plus 3 plus n, right?",
    "start": "1300720",
    "end": "1306409"
  },
  {
    "text": "Every step becomes\nharder when I go up. And this is n squared. ",
    "start": "1306410",
    "end": "1322459"
  },
  {
    "text": "Any questions about that? ",
    "start": "1322459",
    "end": "1330192"
  },
  {
    "text": "OK, this is so much for our\nweighted interval scheduling. Now, I'm going to transition\ninto the next topic.",
    "start": "1330192",
    "end": "1336830"
  },
  {
    "text": "So any question on\nthe side, in general, for the scheduling problem?",
    "start": "1336830",
    "end": "1342395"
  },
  {
    "text": " Do you have a question?",
    "start": "1342395",
    "end": "1347914"
  },
  {
    "text": "No? OK, now, let's turn to a second\ntopic of this section, which",
    "start": "1347914",
    "end": "1357490"
  },
  {
    "text": "is Strassen algorithm.  Strassen algorithm is\nan efficient algorithm",
    "start": "1357490",
    "end": "1364750"
  },
  {
    "start": "1360000",
    "end": "1993000"
  },
  {
    "text": "for matrix multiplication,\nand matrix multiplication is a really useful primitive.",
    "start": "1364750",
    "end": "1371630"
  },
  {
    "text": "It has applications in almost\nevery area I can think of.",
    "start": "1371630",
    "end": "1376690"
  },
  {
    "text": "Circuit simulation,\nclimate simulation, and physics,\nbasically everything.",
    "start": "1376690",
    "end": "1383760"
  },
  {
    "text": "Now, I actually\nhad some experience with matrix multiplication,\nbecause my undergrad research",
    "start": "1383760",
    "end": "1390250"
  },
  {
    "text": "was improving matrix algorithms. And, actually, many\nmatrix algorithms, including inversion,\nsolving equations,",
    "start": "1390250",
    "end": "1397840"
  },
  {
    "text": "they all use multiplication\nas a primitive. So it actually comes\ndown to improving",
    "start": "1397840",
    "end": "1403529"
  },
  {
    "text": "matrix multiplication. And I tried very hard to just\noptimize this basic matrix",
    "start": "1403530",
    "end": "1411000"
  },
  {
    "text": "multiplication. We'll take a row,\nyou take a column, and then you get your\nanswer for this spot.",
    "start": "1411000",
    "end": "1419200"
  },
  {
    "text": "Everyone's familiar\nwith that, right? I tried very hard,\nbut it's still 100 x slower than the\nbest algorithm out there.",
    "start": "1419200",
    "end": "1426980"
  },
  {
    "text": "So I finally look it up, and\nI was completely mind-blown when I know that matrix\nalgorithm complexity is not",
    "start": "1426980",
    "end": "1435860"
  },
  {
    "text": "n cubic. It's actually smaller than that. ",
    "start": "1435860",
    "end": "1443790"
  },
  {
    "text": "Is this a surprise to you? Anyone expect that before? ",
    "start": "1443790",
    "end": "1452210"
  },
  {
    "text": "And the technique the more\nefficient algorithm uses is, exactly, Strassen algorithm.",
    "start": "1452210",
    "end": "1458180"
  },
  {
    "text": "Now that we're talking\nabout divide and conquer, you can guess it must be a\ndivide and conquer algorithm.",
    "start": "1458180",
    "end": "1463770"
  },
  {
    "text": "And, so, does\nanyone have an idea how to divide the\noriginal problem? ",
    "start": "1463770",
    "end": "1474322"
  },
  {
    "text": "Anyone want to give it a try? ",
    "start": "1474322",
    "end": "1481490"
  },
  {
    "text": "So are you familiar with\ntiled matrix multiplication, or blocked matrix\nmultiplication?",
    "start": "1481490",
    "end": "1488686"
  },
  {
    "text": "OK, can you tell\nus what that is? AUDIENCE: Yeah. You can break it\ninto [INAUDIBLE]..",
    "start": "1488686",
    "end": "1494830"
  },
  {
    "start": "1494830",
    "end": "1501200"
  },
  {
    "text": "LING REN: OK, so say\nthis is our A and B, and we want C. We can break\neach matrix into four parts.",
    "start": "1501200",
    "end": "1510330"
  },
  {
    "text": "I'll call this\nA11, A12, A21, A22.",
    "start": "1510330",
    "end": "1516710"
  },
  {
    "text": "B11, B12, B21, B22. ",
    "start": "1516710",
    "end": "1524750"
  },
  {
    "text": "Same thing for C. Now, I would like someone\nto tell me, what is C11,",
    "start": "1524750",
    "end": "1536880"
  },
  {
    "text": "in this case?  Yes.",
    "start": "1536880",
    "end": "1542255"
  },
  {
    "text": "AUDIENCE: A11 [INAUDIBLE]. ",
    "start": "1542255",
    "end": "1549590"
  },
  {
    "text": "LING REN: A12, B21, yep. And C12 is--",
    "start": "1549590",
    "end": "1557280"
  },
  {
    "text": "Just speak up, don't be shy. This is also my first\nsection ever, in my life,",
    "start": "1557280",
    "end": "1564650"
  },
  {
    "text": "teaching a recitation. I'm more nervous than you guys. ",
    "start": "1564650",
    "end": "1569681"
  },
  {
    "text": "What is C12? ",
    "start": "1569681",
    "end": "1576288"
  },
  {
    "text": "AUDIENCE: A11, B12? LING REN: A11, B12.",
    "start": "1576288",
    "end": "1583180"
  },
  {
    "text": " A12, B22, right? So the rule is the\nsame as before.",
    "start": "1583180",
    "end": "1591000"
  },
  {
    "text": "Matrix multiplication. Compute this, we take\nthis row, this column, and it gives us this. AUDIENCE: So the\nfirst one [INAUDIBLE]..",
    "start": "1591000",
    "end": "1597280"
  },
  {
    "text": " LING REN: Right, thank you.",
    "start": "1597280",
    "end": "1602400"
  },
  {
    "text": " A12, B21.",
    "start": "1602400",
    "end": "1607680"
  },
  {
    "text": " OK. And, same thing,\nC21, we're going",
    "start": "1607680",
    "end": "1613530"
  },
  {
    "text": "to take this row\nand this column. A21 B11 plus A22 B21.",
    "start": "1613530",
    "end": "1627840"
  },
  {
    "text": "C11 is A21 B12 plus A22 B22.",
    "start": "1627840",
    "end": "1638151"
  },
  {
    "text": "OK. ",
    "start": "1638151",
    "end": "1644260"
  },
  {
    "text": "And everyone understands this? OK, great. So, now, we've broken\nup the original problem",
    "start": "1644260",
    "end": "1650490"
  },
  {
    "text": "into several subproblems. We only need to do matrix\nmultiplication here",
    "start": "1650490",
    "end": "1656600"
  },
  {
    "text": "eight times.  And each of this\nmatrix is half in size.",
    "start": "1656600",
    "end": "1664520"
  },
  {
    "text": "If the original\nalgorithm is n cubic, now each sub problem\nis half n cubic.",
    "start": "1664520",
    "end": "1670530"
  },
  {
    "text": "Then we have eight of them,\nso the complexity is still",
    "start": "1670530",
    "end": "1675860"
  },
  {
    "text": "n cubic. No improvement at all. ",
    "start": "1675860",
    "end": "1681860"
  },
  {
    "text": "So, actually, to\nbe more precise, we can further break up these\nmatrices into smaller blocks.",
    "start": "1681860",
    "end": "1690640"
  },
  {
    "text": "So, to be precise,\nits complexity should be given by a recursion.",
    "start": "1690640",
    "end": "1696430"
  },
  {
    "text": " Eight subproblems, each\none half the size, plus--",
    "start": "1696430",
    "end": "1706179"
  },
  {
    "text": "can anyone tell me? What's the merging complexity,\nonce I get all this?",
    "start": "1706180",
    "end": "1713560"
  },
  {
    "text": " [INAUDIBLE]",
    "start": "1713560",
    "end": "1718994"
  },
  {
    "start": "1718994",
    "end": "1724428"
  },
  {
    "text": "Go ahead. AUDIENCE: Is it just constant\nbecause you're adding? LING REN: Yeah,\nbecause I'm adding.",
    "start": "1724428",
    "end": "1729690"
  },
  {
    "text": "But is it constant? I'm adding these two matrices. ",
    "start": "1729690",
    "end": "1736000"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. LING REN: Pardon? AUDIENCE: For each\nlevel it can base case?",
    "start": "1736000",
    "end": "1743060"
  },
  {
    "text": "LING REN: Yeah, for base case,\nit's, of course, constant. OK, so maybe I'm not\nclear about this. What's the subproblem,\nin this case?",
    "start": "1743060",
    "end": "1749110"
  },
  {
    "text": "It's this multiplication\noperation, OK? And, so, these are the eight\nsubproblems I will solve.",
    "start": "1749110",
    "end": "1757270"
  },
  {
    "text": "After solving them, I\nneed to add them together. And adding two matrices,\nand each is size ha;f of n.",
    "start": "1757270",
    "end": "1767520"
  },
  {
    "text": "The complexity is-- AUDIENCE: n squared 2 over 2? LING REN: Yeah, it's n squared.",
    "start": "1767520",
    "end": "1774300"
  },
  {
    "text": "Basically, n squared. So, to get a precise complexity,\nwe should solve this recursion,",
    "start": "1774300",
    "end": "1780790"
  },
  {
    "text": "but it will end up being the\nsame thing as this intuition, n cubic.",
    "start": "1780790",
    "end": "1786090"
  },
  {
    "text": "OK, so now, this is the magic. So Strassen, in 1969, came\nup with this algorithm.",
    "start": "1786090",
    "end": "1792799"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE]. ",
    "start": "1792800",
    "end": "1800820"
  },
  {
    "text": "LING REN: Each of these is\na half n by half n matrix. AUDIENCE: [INAUDIBLE].",
    "start": "1800820",
    "end": "1806684"
  },
  {
    "text": " LING REN: So Strassen came\nup with this algorithm.",
    "start": "1806684",
    "end": "1813270"
  },
  {
    "text": "He somehow defined M1\nthrough M7, seven matrices,",
    "start": "1813270",
    "end": "1820620"
  },
  {
    "text": "in this way. I can't provide any\nintuition, because I didn't come up with this.",
    "start": "1820620",
    "end": "1826570"
  },
  {
    "text": "And, somehow, with\nthose seven matrices, he can reconstruct, he\ncan compute all the four",
    "start": "1826570",
    "end": "1835110"
  },
  {
    "text": "submatrices in C. And it's not very just\ninteresting to check it,",
    "start": "1835110",
    "end": "1840770"
  },
  {
    "text": "because the algorithm\nis definitely correct. But let's just do one of them. OK, how about this one.",
    "start": "1840770",
    "end": "1846740"
  },
  {
    "text": "So C21 is M2 plus M4. So M2 plus M4.",
    "start": "1846740",
    "end": "1852190"
  },
  {
    "text": "So M2 will have\nA12 B11, A22 B11.",
    "start": "1852190",
    "end": "1858830"
  },
  {
    "text": "So M4, there's A22 minus\nB11, so that cancels out.",
    "start": "1858830",
    "end": "1863919"
  },
  {
    "text": "So we're left with\nA21 B11 plus A22 B21.",
    "start": "1863920",
    "end": "1869000"
  },
  {
    "text": " That's the correct answer.",
    "start": "1869000",
    "end": "1875370"
  },
  {
    "text": "So this, I guess, is a\nvery clever algorithm. You have to work in\nthat area for 10 years",
    "start": "1875370",
    "end": "1880670"
  },
  {
    "text": "to come up with this so\nthat's not our concern. Our goal is to analyze\nthis algorithm.",
    "start": "1880670",
    "end": "1887620"
  },
  {
    "text": "What's the complexity of it? ",
    "start": "1887620",
    "end": "1893760"
  },
  {
    "text": "So does anyone understand\nthis recursion? Can someone tell me, what's\nthe recursion for this part,",
    "start": "1893760",
    "end": "1901399"
  },
  {
    "text": "for this Strassen algorithm? ",
    "start": "1901400",
    "end": "1907860"
  },
  {
    "text": "We have the original\nproblem, and we have some--",
    "start": "1907860",
    "end": "1916780"
  },
  {
    "text": "go ahead. AUDIENCE: So since each\nof the M 1 through 7 only require one\nmultiplication, you'll",
    "start": "1916780",
    "end": "1923148"
  },
  {
    "text": "need to solve seven subproblems,\nso 7T n over 2 plus O n",
    "start": "1923148",
    "end": "1929748"
  },
  {
    "text": "squared. LING REN: That's\nabsolutely correct. ",
    "start": "1929749",
    "end": "1936220"
  },
  {
    "text": "Everyone gets this? So what Strassen did, is he\ncame up with the seven matrices.",
    "start": "1936220",
    "end": "1942730"
  },
  {
    "text": "Each one requires only\none multiplication. So we have seven subproblems,\ninstead of eight,",
    "start": "1942730",
    "end": "1951340"
  },
  {
    "text": "and that's going to give us\na benefit, an improvement. ",
    "start": "1951340",
    "end": "1958290"
  },
  {
    "text": "So the question now becomes,\nhow do I solve this recursion? Given this recursion, how\ndo I know its complexity?",
    "start": "1958290",
    "end": "1964000"
  },
  {
    "text": "And same question there. ",
    "start": "1964000",
    "end": "1969160"
  },
  {
    "text": "Anyone want to give it a try? ",
    "start": "1969160",
    "end": "1974200"
  },
  {
    "text": "So that's going to be covered\nin a third topic, which",
    "start": "1974200",
    "end": "1994070"
  },
  {
    "start": "1993000",
    "end": "3226000"
  },
  {
    "text": "is Master Theorem. ",
    "start": "1994070",
    "end": "2001770"
  },
  {
    "text": "So Master Theorem\ndoes exactly that. All it does is, given the\nrecursion, a and T of n",
    "start": "2001770",
    "end": "2018929"
  },
  {
    "text": "over b, plus some\nwork for merging,",
    "start": "2018930",
    "end": "2027130"
  },
  {
    "text": "where a and b are constants, it\ndirectly tell you what T of n is, in some cases.",
    "start": "2027130",
    "end": "2035809"
  },
  {
    "text": "So I'll first write the formula. Master Theorem actually\nhas three cases.",
    "start": "2035810",
    "end": "2041990"
  },
  {
    "text": "The first case, fn,\nis order n raised",
    "start": "2041990",
    "end": "2047440"
  },
  {
    "text": "to c, where c is\nless than log b of a. Then, Master Theorem says, it's\ncomplexity is theta log b of a.",
    "start": "2047440",
    "end": "2061690"
  },
  {
    "text": " Second case, fn is theta\nnc log K, where c is,",
    "start": "2061690",
    "end": "2077335"
  },
  {
    "text": "log b is equal to b of a,\nthen it's complexity is n",
    "start": "2077335",
    "end": "2085240"
  },
  {
    "text": "raised to c log K plus 1 n. You don't necessarily\nhave to copy them,",
    "start": "2085240",
    "end": "2091690"
  },
  {
    "text": "because you just\nfind them anywhere. And the third case,\nyou can imagine,",
    "start": "2091690",
    "end": "2098160"
  },
  {
    "text": "it's the only remaining\ncase, which is, fn is large,",
    "start": "2098160",
    "end": "2103204"
  },
  {
    "text": "it's omega n raised to c, where\nc is greater than log b of a.",
    "start": "2103205",
    "end": "2110085"
  },
  {
    "text": "Then, Master Theorem says,\nits complexity, the complexity of Tn, is theta fn.",
    "start": "2110085",
    "end": "2119630"
  },
  {
    "text": "So, intuitively, if fn\nis not too much work, then it's basically\nthis recursion,",
    "start": "2119630",
    "end": "2126170"
  },
  {
    "text": "what recursion gives you. If fn dominates, fn is\nthe biggest component,",
    "start": "2126170",
    "end": "2133330"
  },
  {
    "text": "then Tn is, roughly,\non the order of fn, and there's a case\nin the middle. ",
    "start": "2133330",
    "end": "2145600"
  },
  {
    "text": "Now, let's see why\nthat is the case. I'll only cover one case, here. ",
    "start": "2145600",
    "end": "2159200"
  },
  {
    "text": "So, again, we are going\nto draw a recursion tree, because that is very\nuseful in all the recursion",
    "start": "2159200",
    "end": "2164300"
  },
  {
    "text": "problems. So we start with a\nproblem of size n,",
    "start": "2164300",
    "end": "2170556"
  },
  {
    "text": "and we break them into\nproblem size n over b. ",
    "start": "2170556",
    "end": "2182560"
  },
  {
    "text": "So on and so forth. What's the size of\nthis subproblem? ",
    "start": "2182560",
    "end": "2191770"
  },
  {
    "text": "So that recursion represents a\nclass of recursive algorithm. Every time it\nbreaks the problem,",
    "start": "2191770",
    "end": "2199236"
  },
  {
    "text": "it reduced the problem\nsize by a factor of b, so what do I have here? ",
    "start": "2199236",
    "end": "2205630"
  },
  {
    "text": "Go ahead. AUDIENCE: [INAUDIBLE] LING REN: n over b squared.",
    "start": "2205630",
    "end": "2212510"
  },
  {
    "text": "So on and so forth. So what is a, in this graph?",
    "start": "2212510",
    "end": "2219640"
  },
  {
    "text": "AUDIENCE: 3. LING REN: 3, think so? 3. a is just a branching\nfactor of this tree.",
    "start": "2219640",
    "end": "2228490"
  },
  {
    "text": "I keep going. Finally, I will\nreach my base case.",
    "start": "2228490",
    "end": "2234330"
  },
  {
    "text": "So my next question is, after\nhow many levels of recursion will I reach a base\ncase of size 1?",
    "start": "2234330",
    "end": "2242340"
  },
  {
    "start": "2242340",
    "end": "2251498"
  },
  {
    "text": "Go ahead. AUDIENCE: Log b of [INAUDIBLE]? LING REN: Log b of-- ",
    "start": "2251498",
    "end": "2262630"
  },
  {
    "text": "OK, so, here is n over b, n\nover b square, next one n over b",
    "start": "2262630",
    "end": "2268730"
  },
  {
    "text": "cubic, so on and so forth. So, say, this last level it\nTth level, than the problems",
    "start": "2268730",
    "end": "2275269"
  },
  {
    "text": "size is n over--  we raise to T, and we want that\nto be a constant, so what is T?",
    "start": "2275270",
    "end": "2288510"
  },
  {
    "text": " AUDIENCE: Log b on n.",
    "start": "2288510",
    "end": "2295420"
  },
  {
    "text": "LING REN: Log b of n. Now, this is the recursion\ntree, and we have that fn",
    "start": "2295420",
    "end": "2304319"
  },
  {
    "text": "among the emerging work to do. So, here, we have to do fn\nwork, to merge these a results",
    "start": "2304320",
    "end": "2312300"
  },
  {
    "text": "to the solution\nof our problem, n. Then, we have f- what's the\nemerging work for this level,",
    "start": "2312300",
    "end": "2322040"
  },
  {
    "text": "for this part of the tree? ",
    "start": "2322040",
    "end": "2327160"
  },
  {
    "text": "This is my problem size.  AUDIENCE: [INAUDIBLE]",
    "start": "2327160",
    "end": "2334670"
  },
  {
    "text": "LING REN: n over b, right. And we have a of them. OK, so on and so forth.",
    "start": "2334670",
    "end": "2341589"
  },
  {
    "text": "So, then, we know what is Tn. Let's just enumerate all\nthe work we have to do.",
    "start": "2341590",
    "end": "2349260"
  },
  {
    "text": "So on the first level,\nwe have to do fn. OK, on second level, af n of b--",
    "start": "2349260",
    "end": "2358820"
  },
  {
    "text": "sorry, n over b. And what's the next level? ",
    "start": "2358820",
    "end": "2365802"
  },
  {
    "text": "We have how many subproblems?  Speak louder.",
    "start": "2365802",
    "end": "2371007"
  },
  {
    "text": "AUDIENCE: a squared. LING REN: a square\nsubproblems, and each of them is n over b squared.",
    "start": "2371007",
    "end": "2383570"
  },
  {
    "text": "And, finally, I\nreach my last level.",
    "start": "2383570",
    "end": "2389172"
  },
  {
    "text": "They are all base cases, so\nI have a raised to T of them,",
    "start": "2389172",
    "end": "2394300"
  },
  {
    "text": "because I defined T to\nbe my depth of the tree. And each of them is T of 1.",
    "start": "2394300",
    "end": "2399690"
  },
  {
    "text": " OK, so that's Tn.",
    "start": "2399690",
    "end": "2405769"
  },
  {
    "text": "I'm not entirely happy\nwith this formula, because I have this\nbeautiful pattern, here,",
    "start": "2405770",
    "end": "2411850"
  },
  {
    "text": "except for that last guy. It's add one a and divide\none b, blah, blah, blah.",
    "start": "2411850",
    "end": "2419910"
  },
  {
    "text": "So I'm going to\nchange this T into f. Can I do that?",
    "start": "2419910",
    "end": "2426570"
  },
  {
    "text": "Because it's [INAUDIBLE]\nis the same, right? T1 is a constant,\nf1 is also constant. Then, I get my beautiful\nform, where it's a sum from i",
    "start": "2426570",
    "end": "2441140"
  },
  {
    "text": "equals 0 to T.\nWhat's in the sum? ",
    "start": "2441140",
    "end": "2450225"
  },
  {
    "text": "Go ahead. AUDIENCE: [INAUDIBLE].  LING REN: a raised\nto i, f of n over b1.",
    "start": "2450226",
    "end": "2459166"
  },
  {
    "text": " Everyone gets that? ",
    "start": "2459166",
    "end": "2465970"
  },
  {
    "text": "Now, you can roughly see\nwhy we have three cases. So let me deal with\nthe first case.",
    "start": "2465970",
    "end": "2472750"
  },
  {
    "text": "The first case says, fn\nis order n raised to c.",
    "start": "2472750",
    "end": "2481177"
  },
  {
    "text": "What does that mean?  It means this guy here\nis sigma a raised to n,",
    "start": "2481177",
    "end": "2490940"
  },
  {
    "text": "then this is what's\nin my f raised to c.",
    "start": "2490940",
    "end": "2497119"
  },
  {
    "text": "There should be order, here, but\neverything has order before it, so I just omit that. So it actually\nshould be this, OK?",
    "start": "2497120",
    "end": "2506310"
  },
  {
    "text": "So this, because n\nraised to c is actually independent of the\nsum, I can pull it out.",
    "start": "2506310",
    "end": "2513380"
  },
  {
    "text": " And what am I left with?",
    "start": "2513380",
    "end": "2520640"
  },
  {
    "start": "2520640",
    "end": "2527940"
  },
  {
    "text": "Is that correct? Now, this is a sum of\ngeometric sequence.",
    "start": "2527940",
    "end": "2535190"
  },
  {
    "text": "We know how to\nsolve that, but we need to check whether this ratio\nis greater or larger than 1,",
    "start": "2535190",
    "end": "2541210"
  },
  {
    "text": "or if it's equal to 1. And what is this ratio? The case tells us.",
    "start": "2541210",
    "end": "2546500"
  },
  {
    "text": "So c is less than log b of a. That means b raised\nto c is less than b",
    "start": "2546500",
    "end": "2554240"
  },
  {
    "text": "raised to this guy,\nwhich is a, right?",
    "start": "2554240",
    "end": "2561830"
  },
  {
    "text": "So we know our denominator\nis smaller than or numerator.",
    "start": "2561830",
    "end": "2568150"
  },
  {
    "text": "So this is an increasing\nsequence, right? So what we have\nis n raised to c,",
    "start": "2568150",
    "end": "2575770"
  },
  {
    "text": "then that thing\nraised to t minus 1",
    "start": "2575770",
    "end": "2581530"
  },
  {
    "text": "divided by this thing minus 1. But they are all constants. Are everyone familiar\nwith this formula.",
    "start": "2581530",
    "end": "2589250"
  },
  {
    "text": "of geometric sequence? OK, so that's what we have. ",
    "start": "2589250",
    "end": "2598829"
  },
  {
    "text": "Next, we have t\nequals log b of n. That means b raised\nto t is n, correct?",
    "start": "2598830",
    "end": "2613119"
  },
  {
    "text": "So, then, b raised to t is\nn, then we have raised to c, they cancel out.",
    "start": "2613120",
    "end": "2619610"
  },
  {
    "text": "What do we have? I want to make sure\neveryone's following. ",
    "start": "2619610",
    "end": "2632146"
  },
  {
    "text": "AUDIENCE: is it a over t? LING REN: A raised to t. ",
    "start": "2632146",
    "end": "2639730"
  },
  {
    "text": "No questions? AUDIENCE: Can you\ndo that stuff again? LING REN: OK, let\nme do that again.",
    "start": "2639730",
    "end": "2645990"
  },
  {
    "text": "It's actually a\nraised to t, and then n over bt raised to c, right?",
    "start": "2645990",
    "end": "2653816"
  },
  {
    "text": "AUDIENCE: How did you get\nfrom the line above that? LING REN: This one to here? AUDIENCE: Yeah. LING REN: Oh, it's the\nsum of geometric sequence,",
    "start": "2653816",
    "end": "2660099"
  },
  {
    "text": "so if I have 1 plus q plus q\nsquared, all the way to qt,",
    "start": "2660100",
    "end": "2665620"
  },
  {
    "text": "it's qt plus 1, I guess-- or\nt, I don't remember very well--",
    "start": "2665620",
    "end": "2671100"
  },
  {
    "text": "minus 1, then q minus 1. I guess this should be t plus 1.",
    "start": "2671100",
    "end": "2678620"
  },
  {
    "text": "So this is what we're doing. So this is our q minus 1,\nand divided by q minus 1,",
    "start": "2678620",
    "end": "2683635"
  },
  {
    "text": "they are all constants, so\nI don't care about them. ",
    "start": "2683635",
    "end": "2688820"
  },
  {
    "text": "So a raised plus this\nthing raised to c, but we said that b raised\nto t is equal to n,",
    "start": "2688820",
    "end": "2696190"
  },
  {
    "text": "so we're just left\nwith a raised to t.",
    "start": "2696190",
    "end": "2701710"
  },
  {
    "text": "And what is t? t is log b of n.",
    "start": "2701710",
    "end": "2709820"
  },
  {
    "text": "I can write it as log\na of n over log a of b.",
    "start": "2709820",
    "end": "2717820"
  },
  {
    "text": "Everyone familiar with that? That means log a\nof n, log b of a.",
    "start": "2717820",
    "end": "2727279"
  },
  {
    "text": "This is when I flip them.  So this, what is that?",
    "start": "2727279",
    "end": "2733700"
  },
  {
    "text": " AUDIENCE: n. LING REN: That is n. ",
    "start": "2733700",
    "end": "2742930"
  },
  {
    "text": "OK, we're done.  Are we?",
    "start": "2742930",
    "end": "2748160"
  },
  {
    "start": "2748160",
    "end": "2758839"
  },
  {
    "text": "Not exactly, because I\nhave an order here, right? So everything is ordered.",
    "start": "2758840",
    "end": "2764260"
  },
  {
    "text": "If you only care about\norder, big O, then it's fine. But that theorem\nsays theta, so you",
    "start": "2764260",
    "end": "2769840"
  },
  {
    "text": "have to prove it the other way,\nthat it's no less than that. I'm not going to do that. It's not very hard.",
    "start": "2769840",
    "end": "2776970"
  },
  {
    "text": "Next, I'm going to apply\nthis theorem to the two problems we left here.",
    "start": "2776970",
    "end": "2783780"
  },
  {
    "text": "So let's apply Master\nTheorem to this recurrence.",
    "start": "2783780",
    "end": "2789570"
  },
  {
    "text": "I think you are still\nlooking at that side. ",
    "start": "2789570",
    "end": "2795970"
  },
  {
    "text": "So what is the a, b, c for this? ",
    "start": "2795970",
    "end": "2804180"
  },
  {
    "text": "a is 8, b is 2, right? And c is 2.",
    "start": "2804180",
    "end": "2813150"
  },
  {
    "text": "Log b of a is 3, so that's which\ncase of the Master Theorem?",
    "start": "2813150",
    "end": "2819944"
  },
  {
    "text": " So the theorem says\nit should be n raised",
    "start": "2819945",
    "end": "2826410"
  },
  {
    "text": "to log b of a, which is 3, OK? ",
    "start": "2826410",
    "end": "2833550"
  },
  {
    "text": "Now, what we have here,\ncan I remind someone",
    "start": "2833550",
    "end": "2840530"
  },
  {
    "text": "to do that for me? ",
    "start": "2840530",
    "end": "2847029"
  },
  {
    "text": "Want to give it a try? ",
    "start": "2847029",
    "end": "2854860"
  },
  {
    "text": "Go ahead. AUDIENCE: OK, so we have\na equals 7, b equals 2,",
    "start": "2854860",
    "end": "2865660"
  },
  {
    "text": "and c equals 2, like before. And, now, we want to see whether\nc equals 2 is less than log b",
    "start": "2865660",
    "end": "2877282"
  },
  {
    "text": "of a, which is log 2 of 7. ",
    "start": "2877282",
    "end": "2886396"
  },
  {
    "text": "Pretty sure that's\nstill the case. So we should just get\nn to the log 2 of 7.",
    "start": "2886396",
    "end": "2893660"
  },
  {
    "text": "LING REN: Yeah, exactly. So, yeah. Yeah, thank you. let's give\nhim a round of applause. ",
    "start": "2893660",
    "end": "2902640"
  },
  {
    "text": "So log 2 of 7 is\ndefinitely greater than 2. Why? Because log 2 of 4 is 2, right?",
    "start": "2902640",
    "end": "2909880"
  },
  {
    "text": "So this happens to be n raised\nto 2.80, and many other digits,",
    "start": "2909880",
    "end": "2918029"
  },
  {
    "text": "but it's less than n cubic. And, just for knowledge purpose,\nthis is no longer the best.",
    "start": "2918030",
    "end": "2928200"
  },
  {
    "text": "It was the best,\nwhen it was proposed, and, well, researchers\nin that area have got it down to\nn raised to 2.35.",
    "start": "2928200",
    "end": "2936590"
  },
  {
    "text": "I think 2.37, first, then 2.35. I'm not following the\nliterature very closely, so maybe it's 2.34 now.",
    "start": "2936590",
    "end": "2946010"
  },
  {
    "text": "So I should have one\nmore thing to cover, but I think we are\nrunning out of time. Sorry about that.",
    "start": "2946010",
    "end": "2951339"
  },
  {
    "text": "I can post it. So the last thing\nwe should do is, remember, we have this\nmedium finding algorithm,",
    "start": "2951340",
    "end": "2957490"
  },
  {
    "text": "where we have a recurrence,\nwhich is, I think, 10 over 5, some ceiling, and\nthen plus this [INAUDIBLE]",
    "start": "2957490",
    "end": "2970470"
  },
  {
    "text": "n plus theta n. And we want to solve\nthis recursion,",
    "start": "2970470",
    "end": "2978780"
  },
  {
    "text": "but we cannot apply\nMaster Theorem. Apparently, it's\nnot the right form. So when Master\nTheorem doesn't apply,",
    "start": "2978780",
    "end": "2985339"
  },
  {
    "text": "we have to study\nit case by case. Let me see if I have\ntime to do that. ",
    "start": "2985340",
    "end": "2994970"
  },
  {
    "text": "OK, I think I probably do. ",
    "start": "2994970",
    "end": "3001640"
  },
  {
    "text": "To solve that case,\nfirst, can someone tell me, what's the\ndefinition of theta? We have to go back to the\ndefinition to solve that.",
    "start": "3001640",
    "end": "3008619"
  },
  {
    "text": " What does theta even mean? So if I say fn is theta\nn, what do I really mean?",
    "start": "3008620",
    "end": "3018140"
  },
  {
    "text": " Go ahead. AUDIENCE: It's tightly bounded,\nso you can move the [INAUDIBLE]",
    "start": "3018140",
    "end": "3026442"
  },
  {
    "text": "to either side. LING REN: So it means I can\nfind some K1 and K2 such",
    "start": "3026442",
    "end": "3033470"
  },
  {
    "text": "that this holds when n\ngets sufficiently large.",
    "start": "3033470",
    "end": "3038680"
  },
  {
    "text": "OK, so, now, we're\ngoing to do induction. ",
    "start": "3038680",
    "end": "3049490"
  },
  {
    "text": "Assuming, for all the small\nn less than capital N,",
    "start": "3049490",
    "end": "3055530"
  },
  {
    "text": "my Tn is bounded by\nthis K2 and K1 thing. ",
    "start": "3055530",
    "end": "3063360"
  },
  {
    "text": "Then, my next step is, T of\nthis capital N would be bounded.",
    "start": "3063360",
    "end": "3070660"
  },
  {
    "text": "I'll do the right side first. It will be bounded by\nK2 n5 ceiling, plus K2.",
    "start": "3070660",
    "end": "3088220"
  },
  {
    "text": "[INAUDIBLE] in a second\nterm, n plus another theta n.",
    "start": "3088220",
    "end": "3093740"
  },
  {
    "text": "So, we know, that means it's\nbounded by some other number. I'll say A2, then.",
    "start": "3093740",
    "end": "3099110"
  },
  {
    "text": "That's the definition\nof theta n. Then, I want this to be--",
    "start": "3099110",
    "end": "3106090"
  },
  {
    "text": "sorry, all of them\nshould be capital N. Capital N, Capital N.\nI want this to be smaller",
    "start": "3106091",
    "end": "3112340"
  },
  {
    "text": "than K2 capital N.",
    "start": "3112340",
    "end": "3121140"
  },
  {
    "text": "So let me redo this first step. This is roughly 5 of K2 plus\n7 over 10 K2, plus A2 of n,",
    "start": "3121140",
    "end": "3135930"
  },
  {
    "text": "plus a bunch of constants\nthat I don't care. I want it to be\nsmaller than K2 of n.",
    "start": "3135930",
    "end": "3144320"
  },
  {
    "text": "Can I reach that? Of course I can, right? If I select a K2 to be\ngreater than all we have here,",
    "start": "3144321",
    "end": "3152140"
  },
  {
    "text": "what is this? This is 9 over 10\nK2 plus A2, right?",
    "start": "3152140",
    "end": "3160930"
  },
  {
    "text": "So if I select the K2 to be\ngreater than 10 times A2--",
    "start": "3160930",
    "end": "3167910"
  },
  {
    "text": " is everyone following that?",
    "start": "3167910",
    "end": "3173160"
  },
  {
    "text": "When n is sufficiently large,\nTn should be bounded by A2 n.",
    "start": "3173160",
    "end": "3179020"
  },
  {
    "text": " That's the induction.",
    "start": "3179020",
    "end": "3184890"
  },
  {
    "text": "I am assuming, when n is\nsmaller than capital N, I have solved them. So I can use these two,\nand I solve the next step.",
    "start": "3184890",
    "end": "3193030"
  },
  {
    "text": "So there's the other side,\nwhich is very similar. I'm not going to\ngo through that.",
    "start": "3193030",
    "end": "3198640"
  },
  {
    "text": "All right, so that's\nall for today. And just to quickly\nrecap, we went",
    "start": "3198640",
    "end": "3205320"
  },
  {
    "text": "through the weighted\ninterval scheduling,",
    "start": "3205320",
    "end": "3210450"
  },
  {
    "text": "and the Strassen algorithm,\nMaster Theorem and applying Master Theorem, and that case\nstudy of a new recursion.",
    "start": "3210450",
    "end": "3219350"
  },
  {
    "text": "OK, thanks,\neveryone, for coming. ",
    "start": "3219350",
    "end": "3225645"
  }
]