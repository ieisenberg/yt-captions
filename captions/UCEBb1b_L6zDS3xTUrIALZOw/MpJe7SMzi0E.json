[
  {
    "text": "6.004 students work around the dryer bottleneck\nby finding a laundromat that has two dryers",
    "start": "729",
    "end": "6310"
  },
  {
    "text": "for every washer.",
    "start": "6310",
    "end": "7950"
  },
  {
    "text": "Looking at the timeline you can see the plan,\nwhich is divided into 30-minute steps.",
    "start": "7950",
    "end": "13339"
  },
  {
    "text": "The washer is in use every step, producing\na newly-washed load every 30 minutes.",
    "start": "13339",
    "end": "18800"
  },
  {
    "text": "Dryer usage is interleaved, where Dryer #1\nis used to dry the odd-numbered loads and",
    "start": "18800",
    "end": "24140"
  },
  {
    "text": "Dryer #2 is used to dry the even-numbered\nloads.",
    "start": "24140",
    "end": "28410"
  },
  {
    "text": "Once started, a dryer runs for a duration\nof two steps, a total of 60 minutes.",
    "start": "28410",
    "end": "34050"
  },
  {
    "text": "Since the dryers run on a staggered schedule,\nthe system as a whole produces a load of clean,",
    "start": "34050",
    "end": "38920"
  },
  {
    "text": "dry laundry every 30 minutes.",
    "start": "38920",
    "end": "41980"
  },
  {
    "text": "The steady-state throughput is 1 load of laundry\nevery 30 minutes and the latency for a particular",
    "start": "41980",
    "end": "47039"
  },
  {
    "text": "load of laundry is 90 minutes.",
    "start": "47039",
    "end": "50280"
  },
  {
    "text": "And now here's the take-home message from\nthis example.",
    "start": "50280",
    "end": "53590"
  },
  {
    "text": "Consider the operation of the two-dryer system.",
    "start": "53590",
    "end": "56970"
  },
  {
    "text": "Even though the component dryers themselves\naren't pipelined, the two-dryer interleaving",
    "start": "56970",
    "end": "61929"
  },
  {
    "text": "system is acting like a 2-stage pipeline with\na clock period of 30 minutes and a latency",
    "start": "61929",
    "end": "67190"
  },
  {
    "text": "of 60 minutes.",
    "start": "67190",
    "end": "68750"
  },
  {
    "text": "In other words, by interleaving the operation\nof 2 unpipelined components we can achieve",
    "start": "68750",
    "end": "74250"
  },
  {
    "text": "the effect of a 2-stage pipeline.",
    "start": "74250",
    "end": "78120"
  },
  {
    "text": "Returning to the example of the previous section,\nwe couldn't improve the throughput of our",
    "start": "78120",
    "end": "83010"
  },
  {
    "text": "pipelined system past 1/8 ns because the minimum\nclock period was set by the 8 ns latency of",
    "start": "83010",
    "end": "89790"
  },
  {
    "text": "the C module.",
    "start": "89790",
    "end": "91580"
  },
  {
    "text": "To improve the throughput further we either\nneed to find a pipelined version of the C",
    "start": "91580",
    "end": "96180"
  },
  {
    "text": "component or use an interleaving strategy\nto achieve the effect of a 2-stage pipeline",
    "start": "96180",
    "end": "101340"
  },
  {
    "text": "using two instances of the unpipelined C component.",
    "start": "101340",
    "end": "104609"
  },
  {
    "text": "Let's try thatâ€¦",
    "start": "104610",
    "end": "107330"
  },
  {
    "text": "Here's a circuit for a general-purpose two-way\ninterleaver, using, in this case, two copies",
    "start": "107330",
    "end": "112270"
  },
  {
    "text": "of the unpipelined C component, C_0 and C_1.",
    "start": "112270",
    "end": "117159"
  },
  {
    "text": "The input for each C component comes from\na D-latch, which has the job of capturing",
    "start": "117160",
    "end": "121580"
  },
  {
    "text": "and holding the input value.",
    "start": "121580",
    "end": "123990"
  },
  {
    "text": "There's also a multiplexer to select which\nC-component output will be captured by the",
    "start": "123990",
    "end": "128239"
  },
  {
    "text": "output register.",
    "start": "128239",
    "end": "130380"
  },
  {
    "text": "In the lower left-hand corner of the circuit\nis a very simple 2-state FSM with one state",
    "start": "130380",
    "end": "135390"
  },
  {
    "text": "bit.",
    "start": "135390",
    "end": "136690"
  },
  {
    "text": "The next-state logic is a single inverter,\nwhich causes the state to alternate between",
    "start": "136690",
    "end": "141360"
  },
  {
    "text": "0 and 1 on successive clock cycles.",
    "start": "141360",
    "end": "145239"
  },
  {
    "text": "This timing diagram shows how the state bit\nchanges right after each rising clock edge.",
    "start": "145239",
    "end": "151299"
  },
  {
    "text": "To help us understand the circuit, we'll look\nat some signal waveforms to illustrate its",
    "start": "151299",
    "end": "155379"
  },
  {
    "text": "operation.",
    "start": "155379",
    "end": "156400"
  },
  {
    "text": "To start, here are the waveforms for the CLK\nsignal and our FSM state bit from the previous",
    "start": "156400",
    "end": "162930"
  },
  {
    "text": "slide.",
    "start": "162930",
    "end": "163930"
  },
  {
    "text": "A new X input arrives from the previous stage\njust after the rising edge of the clock.",
    "start": "163930",
    "end": "169920"
  },
  {
    "text": "Next, let's follow the operation of the C_0\ncomponent.",
    "start": "169920",
    "end": "174340"
  },
  {
    "text": "Its input latch is open when FSM Q is low,\nso the newly arriving X_1 input passes through",
    "start": "174340",
    "end": "180500"
  },
  {
    "text": "the latch and C_0 can begin its computation,\nproducing its result at the end of clock cycle",
    "start": "180500",
    "end": "186670"
  },
  {
    "text": "#2.",
    "start": "186670",
    "end": "188420"
  },
  {
    "text": "Note that the C_0 input latch closes at the\nbeginning of the second clock cycle, holding",
    "start": "188420",
    "end": "193209"
  },
  {
    "text": "the X_1 input value stable even though the\nX input is starting to change.",
    "start": "193209",
    "end": "199400"
  },
  {
    "text": "The effect is that C_0 has a valid and stable\ninput for the better part of 2 clock cycles",
    "start": "199400",
    "end": "205030"
  },
  {
    "text": "giving it enough time to compute its result.",
    "start": "205030",
    "end": "209670"
  },
  {
    "text": "The C_1 waveforms are similar, just shifted\nby one clock cycle.",
    "start": "209670",
    "end": "213819"
  },
  {
    "text": "C_1's input latch is open when FSM Q is high,\nso the newly arriving X_2 input passes through",
    "start": "213819",
    "end": "220200"
  },
  {
    "text": "the latch and C_1 can begin its computation,\nproducing its result at the end of clock cycle",
    "start": "220200",
    "end": "226239"
  },
  {
    "text": "#3.",
    "start": "226239",
    "end": "228400"
  },
  {
    "text": "Now let's check the output of the multiplexer.",
    "start": "228400",
    "end": "230480"
  },
  {
    "text": "When FSM Q is high, it selects the value from\nC_0 and when FSM Q is low, it selects the",
    "start": "230480",
    "end": "237659"
  },
  {
    "text": "value from C_1.",
    "start": "237659",
    "end": "239560"
  },
  {
    "text": "We can see that happening in the waveform\nshown.",
    "start": "239560",
    "end": "242590"
  },
  {
    "text": "Finally, at the rising edge of the clock,\nthe output register captures the value on",
    "start": "242590",
    "end": "247430"
  },
  {
    "text": "its input and holds it stable for the remainder\nof the clock cycle.",
    "start": "247430",
    "end": "252319"
  },
  {
    "text": "The behavior of the interleaving circuit is\nlike a 2-stage pipeline: the input value arriving",
    "start": "252319",
    "end": "257820"
  },
  {
    "text": "in cycle i is processed over two clock cycles\nand the result output becomes available on",
    "start": "257820",
    "end": "262810"
  },
  {
    "text": "cycle i+2.",
    "start": "262810",
    "end": "265720"
  },
  {
    "text": "What about the clock period for the interleaving\nsystem?",
    "start": "265720",
    "end": "268980"
  },
  {
    "text": "Well, there is some time lost to the propagation\ndelays of the upstream pipeline register that",
    "start": "268980",
    "end": "274240"
  },
  {
    "text": "supplies the X input, the internal latches\nand multiplexer, and the setup time of the",
    "start": "274240",
    "end": "279599"
  },
  {
    "text": "output register.",
    "start": "279600",
    "end": "280670"
  },
  {
    "text": "So the clock cycle has to be just a little\nbit longer than half the propagation delay",
    "start": "280670",
    "end": "286090"
  },
  {
    "text": "of the C module.",
    "start": "286090",
    "end": "287810"
  },
  {
    "text": "We can treat the interleaving circuit as a\n2-stage pipeline, consuming an input value",
    "start": "287810",
    "end": "291680"
  },
  {
    "text": "every clock cycle and producing a result two\ncycles later.",
    "start": "291680",
    "end": "296070"
  },
  {
    "text": "When incorporating an N-way interleaved component\nin our pipeline diagrams, we treat it just",
    "start": "296070",
    "end": "301070"
  },
  {
    "text": "like a N-stage pipeline.",
    "start": "301070",
    "end": "303550"
  },
  {
    "text": "So N of our pipelining contours have to pass\nthrough the component.",
    "start": "303550",
    "end": "307970"
  },
  {
    "text": "Here we've replaced the slow unpipelined C\ncomponent with a 2-way interleaved C-prime",
    "start": "307970",
    "end": "313790"
  },
  {
    "text": "component.",
    "start": "313790",
    "end": "314850"
  },
  {
    "text": "We can follow our process for drawing pipeline\ncontours.",
    "start": "314850",
    "end": "318810"
  },
  {
    "text": "First we draw a contour across all the outputs.",
    "start": "318810",
    "end": "322180"
  },
  {
    "text": "Then we add contours, ensuring that two of\nthem pass through the C-prime component.",
    "start": "322180",
    "end": "327729"
  },
  {
    "text": "Then we add pipeline registers at the intersections\nof the contours with the signal connections.",
    "start": "327730",
    "end": "333470"
  },
  {
    "text": "We see that the contours passing through C-prime\nhave caused extra pipeline registers to be",
    "start": "333470",
    "end": "338280"
  },
  {
    "text": "added on the other inputs to the F module,\naccommodating the 2-cycle delay through C-prime.",
    "start": "338280",
    "end": "345430"
  },
  {
    "text": "Somewhat optimistically we've specified the\nC-prime minimum t_CLK to be 4 ns, so that",
    "start": "345430",
    "end": "350940"
  },
  {
    "text": "means that the slow component which determines\nthe system's clock period is now the F module,",
    "start": "350940",
    "end": "355830"
  },
  {
    "text": "with a propagation delay of 5 ns.",
    "start": "355830",
    "end": "359810"
  },
  {
    "text": "So the throughput of our new pipelined circuit\nis 1 output every 5 ns, and with 5 contours,",
    "start": "359810",
    "end": "366090"
  },
  {
    "text": "it's a 5-pipeline so the latency is 5 times\nthe clock period or 25 ns.",
    "start": "366090",
    "end": "371930"
  },
  {
    "text": "By running pipelined systems in parallel we\ncan continue to increase the throughput.",
    "start": "371930",
    "end": "377150"
  },
  {
    "text": "Here we show a laundry with 2 washers and\n4 dryers, essentially just two copies of the",
    "start": "377150",
    "end": "382220"
  },
  {
    "text": "1-washer, 2-dryer system shown earlier.",
    "start": "382220",
    "end": "385210"
  },
  {
    "text": "The operation is as described before, except\nthat at each step the system produces and",
    "start": "385210",
    "end": "390009"
  },
  {
    "text": "consumes two loads of laundry.",
    "start": "390010",
    "end": "393030"
  },
  {
    "text": "So the throughput is 2 loads every 30 minutes\nfor an effective rate of 1 load every 15 minutes.",
    "start": "393030",
    "end": "399240"
  },
  {
    "text": "The latency for a load hasn't changed; it's\nstill 90 minutes per load.",
    "start": "399240",
    "end": "404000"
  },
  {
    "text": "We've seen that even with slow components\nwe can use interleaving and parallelism to",
    "start": "404000",
    "end": "407910"
  },
  {
    "text": "continue to increase throughput.",
    "start": "407910",
    "end": "410340"
  },
  {
    "text": "Is there an upper bound on the throughput\nwe can achieve?",
    "start": "410340",
    "end": "413370"
  },
  {
    "text": "Yes!",
    "start": "413370",
    "end": "414520"
  },
  {
    "text": "The timing overhead of the pipeline registers\nand interleaving components will set a lower",
    "start": "414520",
    "end": "418440"
  },
  {
    "text": "bound on the achievable clock period, thus\nsetting an upper bound on the achievable throughput.",
    "start": "418440",
    "end": "424160"
  },
  {
    "text": "Sorry, no infinite speed-up is possible in\nthe real world.",
    "start": "424160",
    "end": "427690"
  }
]