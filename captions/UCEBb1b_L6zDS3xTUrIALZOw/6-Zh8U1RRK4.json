[
  {
    "text": " PROFESSOR: So this lecture was\nabout hyperbolic paraboloids,",
    "start": "0",
    "end": "7280"
  },
  {
    "text": "and the extent to which\nthey don't exist or exist. Here is a regular\nnon-existing hyperbolic",
    "start": "7280",
    "end": "13650"
  },
  {
    "text": "paraboloid with the concentric\nsquares, no diagonals, folded",
    "start": "13650",
    "end": "19000"
  },
  {
    "text": "here. And so, those are just a\nfew questions about this.",
    "start": "19000",
    "end": "24380"
  },
  {
    "text": "What does it mean, other things. These are all asked by\n[INAUDIBLE] I believe,",
    "start": "24380",
    "end": "29420"
  },
  {
    "text": "and they're all open, so--\nthey're all good questions.",
    "start": "29420",
    "end": "35290"
  },
  {
    "text": "We don't know whether\nthe good triangulation, the alternating one,\nworks for arbitrary, and we only know\nup to n equals 100,",
    "start": "35290",
    "end": "42920"
  },
  {
    "text": "for the various fixed\nangles that we checked. We don't have a proof\ntechnique to do arbitrary in.",
    "start": "42920",
    "end": "48629"
  },
  {
    "text": "You could try to do some\namount of alternation, but not, somewhere in\nbetween the two extremes,",
    "start": "48630",
    "end": "54500"
  },
  {
    "text": "and probably you'll get\nsomething in between goodness, but I don't know. You could certainly\nplay with that.",
    "start": "54500",
    "end": "61070"
  },
  {
    "text": "And it's very natural to try\nthis with larger than squares. The only trouble is,\nthe center no longer",
    "start": "61070",
    "end": "67390"
  },
  {
    "text": "has a single degree of\nfreedom, so the only thing to answer there would be, How\ndo you want to initially fold,",
    "start": "67390",
    "end": "74240"
  },
  {
    "text": "like, if you're doing\na hexagon, hexagon is probably clear what\nyou might want to do, but for general\nk-gon, how do you",
    "start": "74240",
    "end": "81530"
  },
  {
    "text": "want to arrange that\ninnermost k-gon? From that, you\ncould propagate out, just like we did with\nthe square, if you",
    "start": "81530",
    "end": "88020"
  },
  {
    "text": "use an alternating\ntriangulation, say. Probably works well,\nbut we haven't tried it. That could be a cool project\nto do that, not that hard.",
    "start": "88020",
    "end": "97040"
  },
  {
    "text": "So those were open problems. Next, we have some, sort of,\nmath, general math questions.",
    "start": "97040",
    "end": "107510"
  },
  {
    "text": "c1, c2, and semi-creases. These are related questions.",
    "start": "107510",
    "end": "112720"
  },
  {
    "text": "So let me do a quick visual\nreview of these terms. ",
    "start": "112720",
    "end": "120720"
  },
  {
    "text": "I'm going to do it for\none-dimensional curves in 2D, because that's a lot\neasier to think about, then",
    "start": "120720",
    "end": "126420"
  },
  {
    "text": "what we really care\nabout, which is two-dimensional services in 3D. But all the ideas carry over,\nso here is just a function.",
    "start": "126420",
    "end": "136740"
  },
  {
    "start": "136740",
    "end": "149710"
  },
  {
    "text": "Let's say, for example,\nthis is a parabolic arc, than a straight segment. This point is missing,\nand instead it's up here.",
    "start": "149710",
    "end": "156250"
  },
  {
    "text": "These points are\npresent, and here we have another parabolic arc. So, this function I would\ncall piecewise C infinity.",
    "start": "156250",
    "end": "170209"
  },
  {
    "text": "Let me explain what\nthese things mean. So we have, on the one\nhand, c zero is a term,",
    "start": "170210",
    "end": "177490"
  },
  {
    "text": "meaning just continuous.  Continuous means\nno jumps like this,",
    "start": "177490",
    "end": "184450"
  },
  {
    "text": "so this is not a\ncontinuous function. So this function overall\nis not even c zero. c1",
    "start": "184450",
    "end": "190459"
  },
  {
    "text": "is a stronger condition, which\nmeans that not only are you continuous, but you also have\na continuous and existing",
    "start": "190460",
    "end": "198220"
  },
  {
    "text": "first derivative. ",
    "start": "198220",
    "end": "205847"
  },
  {
    "text": "So whereas here we're\nthinking about f, here we're thinking of f prime. So, not only can you talk about\nthe function being continuous,",
    "start": "205847",
    "end": "214440"
  },
  {
    "text": "c0c1, but you can talk about\nindividual moments in time. So for example, this moment\nhere is going to be c1.",
    "start": "214440",
    "end": "222879"
  },
  {
    "text": "It has a nice derivative. That derivative is\nchanging continuously here.",
    "start": "222880",
    "end": "228030"
  },
  {
    "text": "Here, however, this\nis c zero, but not c1,",
    "start": "228030",
    "end": "234880"
  },
  {
    "text": "because the tangent\non the left is different from the\ntangent on the right.",
    "start": "234880",
    "end": "239980"
  },
  {
    "text": "So this is not a c1 function,\nbecause the derivative is jumping at that point. I'm not going to draw\nthe derivative here,",
    "start": "239980",
    "end": "245730"
  },
  {
    "text": "it's a little harder to\ndraw, but you could draw it with the same x-axis,\nand you'd see a jump from one angle to another.",
    "start": "245730",
    "end": "253460"
  },
  {
    "text": "This point is not even c zero. This point is c\nzero, but not c1.",
    "start": "253460",
    "end": "262480"
  },
  {
    "text": "This point is c1, because\nthe tangent here is equal,",
    "start": "262480",
    "end": "269500"
  },
  {
    "text": "on the left, is equal to\nthe tangent on the right, if I drew this\nproperly, where this is the bottom of the parabola.",
    "start": "269500",
    "end": "276400"
  },
  {
    "text": "You can ask for more than\nc1, and we do in class, we talk about c2,\nand this says you",
    "start": "276400",
    "end": "282199"
  },
  {
    "text": "should have a continuous\nsecond derivative.",
    "start": "282200",
    "end": "287230"
  },
  {
    "text": "So acceleration. And this point, for\nexample, is not c2.",
    "start": "287230",
    "end": "293156"
  },
  {
    "text": "Because while the\ntangents meet, if you take the next derivative, you\nsee that it's suddenly-- here the tangent was\ncompletely flat, it",
    "start": "293156",
    "end": "299629"
  },
  {
    "text": "has a second derivative of\nzero, and then suddenly it starts increasing. Now you can design functions\nthat are even C infinity.",
    "start": "299630",
    "end": "306430"
  },
  {
    "text": "C infinity means no matter\nhow many derivatives you take, it's continuous\nand defined, no jumps.",
    "start": "306430",
    "end": "312319"
  },
  {
    "text": "But if you do a\nparabola, for example, it will not be so\nwell-behaved, I think, yes.",
    "start": "312320",
    "end": "319669"
  },
  {
    "text": " Got the x, y equals x squared,\nyou take the derivative,",
    "start": "319670",
    "end": "326350"
  },
  {
    "text": "you get 2x, take the derivative\nof that, you get 2, and then",
    "start": "326350",
    "end": "333240"
  },
  {
    "text": "the derivative of\nthat, you get zero.  So the second derivative here\nis 2, all along the curve.",
    "start": "333240",
    "end": "344024"
  },
  {
    "text": "So I guess y prime,\ny double prime. So, in particular here, we had\na second derivative of zero, here we have a second\nderivative of 2.",
    "start": "344024",
    "end": "352090"
  },
  {
    "text": "All right, so that's\na quick crash course on individual points\nbeing c zero or c1 or c2,",
    "start": "352090",
    "end": "359350"
  },
  {
    "text": "or C infinity is when\nyou can go all the way. Creases are points on the\npaper where you're not c1.",
    "start": "359350",
    "end": "368210"
  },
  {
    "text": "That means that you have\ntwo different tangent plans coming\ntogether, typically.",
    "start": "368210",
    "end": "374340"
  },
  {
    "text": "So discontinuity is in\nthe first derivative, that's what we call creases. Semi-creases are discontinuities\nin the second derivative",
    "start": "374340",
    "end": "384770"
  },
  {
    "text": "So semi-crease is\nwhere you're not c2,",
    "start": "384770",
    "end": "392970"
  },
  {
    "text": "crease is where you're\nnot c1, according to this particular paper.",
    "start": "392970",
    "end": "399680"
  },
  {
    "text": "Semi-crease is not\ntoo common a term, but crease is very comm-- this\nis the usual meaning of crease, semi-crease is maybe a little\nnew to this paper we're talking",
    "start": "399680",
    "end": "407340"
  },
  {
    "text": "about, nonexistence of pi parse. And so, for example,\nthis would be a crease,",
    "start": "407340",
    "end": "415757"
  },
  {
    "text": "and this would be a semi-crease. ",
    "start": "415757",
    "end": "421630"
  },
  {
    "text": "Here the derivative changes,\nthat looks like a crease, if you had a one-dimensional\npiece of paper. This doesn't look like a\ncrease, it's kind of smooth,",
    "start": "421630",
    "end": "428570"
  },
  {
    "text": "but not-- it's a little\nbit smooth, it's c1, but it's not c2. So there's a semi-crease there.",
    "start": "428570",
    "end": "434419"
  },
  {
    "text": "And part of that paper is sort\nof worrying about semi-creases, because we want to\ndeal with c2 parts,",
    "start": "434420",
    "end": "439570"
  },
  {
    "text": "because c2 functions are nice. I mean, ideally we\nhave C infinity parts, but we only need\nc2 parts, and so",
    "start": "439570",
    "end": "446690"
  },
  {
    "text": "we subdivide at\nthe semi-creases. And basically, argue most the\ntime semi-creases don't really happen, so you don't\nhave to worry about them.",
    "start": "446690",
    "end": "452586"
  },
  {
    "text": "But that's what they are. Any questions about smoothness? These are all different\nkinds of smoothness.",
    "start": "452586",
    "end": "459366"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE]. PROFESSOR: All of these\nthings are C infinity,",
    "start": "459366",
    "end": "467479"
  },
  {
    "text": "except at these points. So every polynomial C infinity,\nyou can differentiate it all the time,\neventually get to zero.",
    "start": "467480",
    "end": "476100"
  },
  {
    "text": "Exponentials are\nC infinity, pretty much all functions you can\nthink of that are smooth are C infinity.",
    "start": "476100",
    "end": "481425"
  },
  {
    "text": " Yeah. ",
    "start": "481425",
    "end": "488080"
  },
  {
    "text": "All right, so next\nquestion is about one of the proofs, which was that--\nthe proof involving normals",
    "start": "488080",
    "end": "499560"
  },
  {
    "text": "basically, the one\ninvolving tangent planes, and the other one is\ninvolving normals. This is the polygonal\nimplies flat proof,",
    "start": "499560",
    "end": "506840"
  },
  {
    "text": "so this was, If you\nhave a region of paper that is bounded by\npolygonal creases,",
    "start": "506840",
    "end": "511980"
  },
  {
    "text": "so they're piecewise straight,\nthen that region of paper,",
    "start": "511980",
    "end": "517010"
  },
  {
    "text": "if it's uncreased,\nmust actually be flat. And I'm just going\nto, I want to talk",
    "start": "517010",
    "end": "522144"
  },
  {
    "text": "about just one\npart of the proof. So there was a\nsequence of steps, but ultimately what we\nwanted was some segment, bf.",
    "start": "522145",
    "end": "529470"
  },
  {
    "text": "This is a boundary of your\nregion, somewhere over here, and we assume that\nit's straight.",
    "start": "529470",
    "end": "536690"
  },
  {
    "text": "So, we took a few\nsteps to get here. But suppose we have a\nstraight region and locally,",
    "start": "536690",
    "end": "542970"
  },
  {
    "text": "around this point,\nthere's some ruling. And then we're looking\nat a point, Q, here.",
    "start": "542970",
    "end": "551250"
  },
  {
    "text": "I'm going to define this\nruling to be r of q. The rule line from q, and\nso q is an arbitrary point,",
    "start": "551250",
    "end": "561015"
  },
  {
    "text": "it slides along this segment. And then we're interested\nin a normal vector here, which we called n of q.",
    "start": "561015",
    "end": "569020"
  },
  {
    "text": "That's normal to the\nsurface at this point, and so as q slides,\nn of q changes.",
    "start": "569020",
    "end": "575230"
  },
  {
    "text": "And we were claiming\na few things, but so the definition\nof this guy being normal",
    "start": "575230",
    "end": "581630"
  },
  {
    "text": "is it has to be perpendicular\nto-- normal to the surface is perpendicular to the surface.",
    "start": "581630",
    "end": "586810"
  },
  {
    "text": "It has to be perpendicular\nto this axis of the surface, and it has to be\nperpendicular to this axis. So we know, just from\ndefinition of normal, n of q",
    "start": "586810",
    "end": "594620"
  },
  {
    "text": "is perpendicular\nto bf, and n of q",
    "start": "594620",
    "end": "600300"
  },
  {
    "text": "is perpendicular to r\nof q, the rule line.",
    "start": "600300",
    "end": "606890"
  },
  {
    "text": "So that's the definition but\nit wasn't quite what we wanted. We wanted to prove, for\nexample, that the derivative",
    "start": "606890",
    "end": "613770"
  },
  {
    "text": "of the normal, funny thing,\nis perpendicular to bf.",
    "start": "613770",
    "end": "619130"
  },
  {
    "text": "That was one of the\nthings we wanted, and the other one was the\ncorresponding perpendicular",
    "start": "619130",
    "end": "624769"
  },
  {
    "text": "to the rule line. I don't know if I used\nthis notation in lecture, but this just means that\nthey're perpendicular, which is like the dot product\nof those two vectors is zero.",
    "start": "624770",
    "end": "633260"
  },
  {
    "text": "So, how do we go\nfrom here to here? This was actually the part\nthat was most confusing to me.",
    "start": "633260",
    "end": "639260"
  },
  {
    "text": "I find this one more confusing,\nbecause it uses the fact that it's [INAUDIBLE],\nbut the question",
    "start": "639260",
    "end": "644819"
  },
  {
    "text": "was actually about this one, so\nunless you ask about this one now, I'll just cover this one. It's a little simpler. Both are in the notes.",
    "start": "644819",
    "end": "651630"
  },
  {
    "text": "So why is this true? I guess, first, the\nintuitive reason.",
    "start": "651630",
    "end": "656810"
  },
  {
    "text": "So, you've got all these\ndifferent normals here. We're going to end up\nconcluding they're all pointed the same\nway but, in general,",
    "start": "656810",
    "end": "663180"
  },
  {
    "text": "they're changing\ndirection somehow. We know that at all\ntimes the normal",
    "start": "663180",
    "end": "669760"
  },
  {
    "text": "is perpendicular\nto this segment, so it is pointing away,\nstraight away from the segments.",
    "start": "669760",
    "end": "675180"
  },
  {
    "text": "So you've got a\nright angle here. So it's kind of spinning\naround the segment at best, as it moves around.",
    "start": "675180",
    "end": "683720"
  },
  {
    "text": "We claim that the change in\nthe normal, the derivative of the normal, as you\nwalk along this segment,",
    "start": "683720",
    "end": "690279"
  },
  {
    "text": "must also be perpendicular\nto the segment. Intuitively, this is obvious,\nif you think about it enough.",
    "start": "690280",
    "end": "698020"
  },
  {
    "text": "If you were changing in\na direction that was not perpendicular to normal, to\nthis segment, for example you're going this\nway or something,",
    "start": "698020",
    "end": "704870"
  },
  {
    "text": "then, while initially\nyou're perpendicular, you're kind of falling\nover, and then you'll no longer be perpendicular.",
    "start": "704870",
    "end": "710470"
  },
  {
    "text": "So if you change\nin a first order way that is not\nperpendicular to this thing, then afterwards you will\nno longer be perpendicular.",
    "start": "710470",
    "end": "716399"
  },
  {
    "text": "So that's intuitively why\nthis follows from this. ",
    "start": "716400",
    "end": "723250"
  },
  {
    "text": "One way to formalize that\nis to use Taylor expansion, so I'll just write that quickly.",
    "start": "723250",
    "end": "728630"
  },
  {
    "text": "If you look at a\npoint, q, and I'm going to use this\nnotation, q plus epsilon, to mean a point just\na little bit over.",
    "start": "728630",
    "end": "734960"
  },
  {
    "text": "This is q plus\nepsilon, this is q. ",
    "start": "734960",
    "end": "740330"
  },
  {
    "text": "For a very small epsilon, this\nis going to be approximately n of q, plus epsilon,\nand the prime of q.",
    "start": "740330",
    "end": "746670"
  },
  {
    "text": " In Taylor expansion, then\nyou have epsilon squared,",
    "start": "746670",
    "end": "752690"
  },
  {
    "text": "but for small enough epsilon,\nthis is a good approximation. And so, on the one\nhand, you have--",
    "start": "752690",
    "end": "765700"
  },
  {
    "text": "If you look at n\nof q plus epsilon, and you compare\nit to bf, you know that these are perpendicular,\nand what you can write that",
    "start": "765700",
    "end": "771660"
  },
  {
    "text": "as a product being\nequal to zero. So the dot product\nof these two vectors should be equal to zero,\nthat is, being perpendicular.",
    "start": "771660",
    "end": "778097"
  },
  {
    "text": "We know this is true\nfor all points q, so in particular, it's going\nto be true for q plus epsilon. So that's what we know, but\nnow we can expand this thing,",
    "start": "778097",
    "end": "785730"
  },
  {
    "text": "and we get these two terms. So we get n of q dot bf, plus\nepsilon and prime of q, dot bf.",
    "start": "785730",
    "end": "797820"
  },
  {
    "text": "That's just distributing\nthat sum over this product, dot products work OK that way.",
    "start": "797820",
    "end": "803910"
  },
  {
    "text": "Now this thing is also\nzero, because this is just another point\nq dotted with bf,",
    "start": "803910",
    "end": "809204"
  },
  {
    "text": "and they should always\nbe perpendicular. And this is the\nthing we care about. Now if this whole\nsum is equal to zero,",
    "start": "809204",
    "end": "815560"
  },
  {
    "text": "and this term is equal\nto zero, then this better be equal to zero. So implies this\nthing equals zero,",
    "start": "815560",
    "end": "821740"
  },
  {
    "text": "and that's what we wanted. And prime of q is\nperpendicular to bf. So that's the algebra\nway to see it.",
    "start": "821740",
    "end": "827839"
  },
  {
    "text": "But if you think about it\nenough, and you believe things are linear to the\nfirst order, as we say, than that has to be true.",
    "start": "827840",
    "end": "835657"
  },
  {
    "text": "You can get second derivatives\nand things as well, but first derivative\nbetter hold in, particular.",
    "start": "835657",
    "end": "841370"
  },
  {
    "text": "Any questions about that? You can do the same\nthing with this property,",
    "start": "841370",
    "end": "846570"
  },
  {
    "text": "but it's messier. You need to use the\n[INAUDIBLE] property, which we didn't really go\ninto much detail on, so I think I'll skip it.",
    "start": "846570",
    "end": "853670"
  },
  {
    "text": " Last question is,\nwhat does it all mean?",
    "start": "853670",
    "end": "860615"
  },
  {
    "text": "If we're proving\nthings are impossible, and yet here I have physical\nmodels of them existing,",
    "start": "860615",
    "end": "866149"
  },
  {
    "text": "what's going on? What's the difference\nbetween mathematical paper and real paper? And, of course, there's no\nreal mathematical answer",
    "start": "866150",
    "end": "873300"
  },
  {
    "text": "to that question, but there--\nwe have a couple competing theories for what might be\nhappening in this model.",
    "start": "873300",
    "end": "880449"
  },
  {
    "text": "One is that perhaps the\npaper is not being isometric. Perhaps it's\nstretching or shearing.",
    "start": "880450",
    "end": "887660"
  },
  {
    "text": "So normally we think of paper\nas unstretchable and not",
    "start": "887660",
    "end": "893589"
  },
  {
    "text": "shearable, the only way\nto shear is to fold it. And that is almost perfectly\ntrue but, of course,",
    "start": "893590",
    "end": "900890"
  },
  {
    "text": "no material is perfect. So it might be\nshearing or changing the geometry, the intrinsic\ngeometry just enough",
    "start": "900890",
    "end": "908460"
  },
  {
    "text": "to somehow make this possible. Our theory only says\nthat it's impossible if you're exactly\nperfect, so maybe-- it",
    "start": "908460",
    "end": "915050"
  },
  {
    "text": "would be interesting to\nmeasure how exact paper is. Question? AUDIENCE: If it's possible\nto imitate a shear,",
    "start": "915050",
    "end": "921770"
  },
  {
    "text": "if it compresses the paper\nbut I fold it, then-- PROFESSOR: This is not a shear.",
    "start": "921770",
    "end": "927310"
  },
  {
    "text": "AUDIENCE: I know, but\nif you can fold it, so that it, like,\nimitates a shear-- PROFESSOR: Well, you can\nadd creases to make it,",
    "start": "927310",
    "end": "932910"
  },
  {
    "text": "to simulate a shear. AUDIENCE: Right. PROFESSOR: But only\nby adding creases, that's what we\nproved in lecture.",
    "start": "932910",
    "end": "938820"
  },
  {
    "text": "So yeah, you can kind of\nfake a shear, but only by adding creases. Now, it doesn't look like\nthere's extra creases here.",
    "start": "938820",
    "end": "944390"
  },
  {
    "text": "Theory number 2\nis there are lots of really tiny creases\nhere that are so small. I mean, here you could\ndetect the crease,",
    "start": "944390",
    "end": "950779"
  },
  {
    "text": "because it was a\nbig change in angle, but if they're super,\nsuper tiny here and, you know, we never\nfold these things completely",
    "start": "950780",
    "end": "957070"
  },
  {
    "text": "perfect, it could be lots\nof little tiny things, maybe you look\nunder a microscope and you'll see\nthat, I don't know.",
    "start": "957070",
    "end": "963380"
  },
  {
    "text": "It could be an\ninteresting project to try to investigate what\nreally happens with paper in these kinds of\nmodels in real life,",
    "start": "963380",
    "end": "970600"
  },
  {
    "text": "and how it differs\nfrom mathematics. But the two theories are\nmaybe some stretching or maybe",
    "start": "970600",
    "end": "977370"
  },
  {
    "text": "extra creases. We know by adding the\ndiagonals, it folds. Now here, you could\npretty clearly",
    "start": "977370",
    "end": "983080"
  },
  {
    "text": "see the diagonals\nare not being added, but there might be-- there\nmight be effectively, there might be enough added\ncreases that are together",
    "start": "983080",
    "end": "991650"
  },
  {
    "text": "so tiny, you can't see them. AUDIENCE: It's\nnot semi-creases-- PROFESSOR: Semi-creases\nare not enough.",
    "start": "991650",
    "end": "999210"
  },
  {
    "text": "The theory says that if you\nhave these creases and possibly any number of semi-creases,\nyou can't fold it all.",
    "start": "999210",
    "end": "1006110"
  },
  {
    "text": "So you need to add\nactual creases. Yeah, good question.",
    "start": "1006110",
    "end": "1011640"
  },
  {
    "text": "All right, that's\nit for old material.",
    "start": "1011640",
    "end": "1017050"
  },
  {
    "text": "Now I wanted to show you\nsome cool new material, which is based on--",
    "start": "1017050",
    "end": "1022474"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah, question? AUDIENCE: [INAUDIBLE]\ndon't really look like straight lines.",
    "start": "1022474",
    "end": "1028192"
  },
  {
    "text": "PROFESSOR: Right. The creases here do not\nlook like straight lines, and yet we prove they\nmust be straight lines, so something's going on.",
    "start": "1028192",
    "end": "1034899"
  },
  {
    "text": "Now, we didn't know initially\nthat straight creases had to stay straight\nin 3D, but once we proved that, we were pretty\nsure this didn't exist.",
    "start": "1034900",
    "end": "1043172"
  },
  {
    "text": "It's not obvious that straight\ncreases stay straight, but they do. It's evidence there's a problem.",
    "start": "1043172",
    "end": "1051130"
  },
  {
    "text": "OK, I wanted to talk\nabout this paper, because it's kind of related. It's about how to efficiently\nmake pleat folding happen,",
    "start": "1051130",
    "end": "1058550"
  },
  {
    "text": "and it's written by a bunch of\npeople, Jean Cardinal, Marty, our cameraman, Shinji Imahori,\nYoshi Ito, Messashi Kiomi,",
    "start": "1058550",
    "end": "1067900"
  },
  {
    "text": "Stefan Langerman,\nRyuhei Uehara, who's here on sabbatical,\nand Tachiachi Uno.",
    "start": "1067900",
    "end": "1074440"
  },
  {
    "text": "Good practice. So, here's the kind of setting.",
    "start": "1074440",
    "end": "1079940"
  },
  {
    "text": "It's going to be\nfamiliar, in that we have a one-D piece of\npaper, so it's a segment,",
    "start": "1079940",
    "end": "1087130"
  },
  {
    "text": "and we're also going to assume\nthat it's uniformly creased, so each of these\nis spacing of 1.",
    "start": "1087130",
    "end": "1093890"
  },
  {
    "text": "And now usually we think\nof preassigning mountains and valleys here, and then\nyou could only fold mountains",
    "start": "1093890",
    "end": "1100340"
  },
  {
    "text": "on the mountains, you can only\nfold valleys in the valleys. The model here is\nthat you're allowed to fold and unfold repeatedly\non the same segments.",
    "start": "1100340",
    "end": "1109020"
  },
  {
    "text": "So you can do some\nlayers, simple folds, although, I think, we'll just\nneed all layers here today.",
    "start": "1109020",
    "end": "1117250"
  },
  {
    "text": " But you can also unfold\nany previous folds.",
    "start": "1117250",
    "end": "1125340"
  },
  {
    "start": "1125340",
    "end": "1130779"
  },
  {
    "text": "And I'll say that\nunfolds are free, you don't pay for the\nunfolding operations,",
    "start": "1130780",
    "end": "1136390"
  },
  {
    "text": "because it's just\na constant factor. You can only unfold things that\nhave previously been folded. So we'll count the\nnumber of folds you make.",
    "start": "1136390",
    "end": "1142762"
  },
  {
    "text": "Each time you do a fold,\nit's a mountain or a valley, say, through all the layers\nand through some of the layers. But our goal is in, the end,\nto have our segment creased",
    "start": "1142762",
    "end": "1151660"
  },
  {
    "text": "in a particular pattern. And the pleat pattern\nwould be mv, mv, mv.",
    "start": "1151660",
    "end": "1157900"
  },
  {
    "text": "So we want the last time\neach crease to be folded, to be a particular\npattern, but along the way",
    "start": "1157900",
    "end": "1163289"
  },
  {
    "text": "we could fold it in\nlots of-- it could be, this one could be mountain for a\nwhile, as long as the last time",
    "start": "1163290",
    "end": "1169510"
  },
  {
    "text": "we crease this thing, it's\na valley, we're happy. So we end up with\nmountain valley strings,",
    "start": "1169510",
    "end": "1177649"
  },
  {
    "text": "and we want to know\nhow many folds, how many folding operations\ndo you need to make,",
    "start": "1177650",
    "end": "1184110"
  },
  {
    "text": "in order to achieve a particular\nmountain valley string? ",
    "start": "1184110",
    "end": "1192950"
  },
  {
    "text": "And, in particular, we care\nabout strings like mv mv mv, because, as we'll learn later\ntoday when we fold these,",
    "start": "1192950",
    "end": "1199990"
  },
  {
    "text": "pleating takes a lot\nof time, it's tedious. It would be nice if you\ncould do things faster. Now, why do we think we\ncan do things faster?",
    "start": "1199990",
    "end": "1207600"
  },
  {
    "text": "Because I can take a piece\nof paper and, imagine this is one-dimensional,\nand fold it in half,",
    "start": "1207600",
    "end": "1214779"
  },
  {
    "text": "and then fold it in half again. Boom, I got how many creases? Two creases for the\nprice of one operation.",
    "start": "1214780",
    "end": "1221700"
  },
  {
    "text": "Now I fold again, Boom! I get four creases\nfor the price of one. I fold it again.",
    "start": "1221700",
    "end": "1227179"
  },
  {
    "text": "Wow, I get eight creases\nfor the price of one. So the number of folding\noperations you do here",
    "start": "1227180",
    "end": "1232620"
  },
  {
    "text": "may be much, much\nsmaller than n. n is going to be the\nnumber of the creases,",
    "start": "1232620",
    "end": "1238970"
  },
  {
    "text": "the length of your string. So if I fold a piece\nof paper like this--",
    "start": "1238970",
    "end": "1244530"
  },
  {
    "text": "I actually tried\nthis-- and then I unfold to see what\nmountain valley assignment I got-- unfolding is free--\nI get this weird shape.",
    "start": "1244530",
    "end": "1255059"
  },
  {
    "text": "And I didn't do it perfectly. It's hard to do perfectly\nbecause of creep. I get a weird thing. Anyone know what\nthis thing is called?",
    "start": "1255060",
    "end": "1263580"
  },
  {
    "text": "I think that's pretty much--\nif I unfold them to 90 degrees. AUDIENCE: Dragon curve. PROFESSOR: Dragon curve.",
    "start": "1263580",
    "end": "1268875"
  },
  {
    "text": "Yeah. Dragon curve looks like this. This is the Wikipedia\ndrawing, and the more",
    "start": "1268875",
    "end": "1275110"
  },
  {
    "text": "you fold in half, that you\nkeep adding this iteration, it's a nice fractal.",
    "start": "1275110",
    "end": "1280690"
  },
  {
    "text": "It's kind of cool,\nit doesn't have-- you can prove it\ndoesn't self intersect. It touches itself at vertices,\nbut it doesn't properly",
    "start": "1280690",
    "end": "1287250"
  },
  {
    "text": "cross itself. You take the limit, it\nlooks something like this if you fill it in, very cool.",
    "start": "1287250",
    "end": "1292930"
  },
  {
    "text": "Wikipedia calls it the, I don't\nwant to spoil the surprise, but there's actually a book\nwhere the section headings are",
    "start": "1292930",
    "end": "1300659"
  },
  {
    "text": "iterations of this fractal? Anyone know what this book is? AUDIENCE: Jurassic Park. PROFESSOR: Jurassic Park,\nyes, Ian Malcolm right there.",
    "start": "1300660",
    "end": "1308370"
  },
  {
    "text": "So, pretty cool. It's called the Jurassic Park\nfractal, to some, at least on Wikipedia.",
    "start": "1308370",
    "end": "1314649"
  },
  {
    "text": "And so that's one particular\nmountain valley assignment you can get. And let me tell you what is.",
    "start": "1314650",
    "end": "1320910"
  },
  {
    "text": " It's pretty easy to figure out,\nand you see why it's a fractal.",
    "start": "1320910",
    "end": "1326554"
  },
  {
    "text": "So the first time\nwe make a fold-- let's say I always make\nmountains, just for simplicity. You have a little bit of\nchoice here, but not very much.",
    "start": "1326554",
    "end": "1334567"
  },
  {
    "text": "So first I make a\nmountain fold, so now I've got things folded in half. Now let's say I make a\nmountain fold over here.",
    "start": "1334567",
    "end": "1339840"
  },
  {
    "text": "Of course, it's\nalready folded in half, which means I get\na valley over here. So I'm going to-- Yeah.",
    "start": "1339840",
    "end": "1346370"
  },
  {
    "text": "So now I make another\nmountain fold, maybe I should have done it the\nother way, anyway, so it is.",
    "start": "1346370",
    "end": "1354430"
  },
  {
    "text": "So I make another mountain\nfold here, and on the left I get this, on the right I\nget the reflection of that.",
    "start": "1354430",
    "end": "1362090"
  },
  {
    "text": "And then I make\nanother mountain fold, and I get this on\nthe left, and I get the reflection\nof that on the right.",
    "start": "1362090",
    "end": "1367200"
  },
  {
    "text": "And when I reflect, I'm reading\nbackwards and also inverting everything. ",
    "start": "1367200",
    "end": "1375780"
  },
  {
    "text": "vv and so on. So you see the kind of\nfractal nature here, and that's what\ngives the cool curve.",
    "start": "1375780",
    "end": "1383090"
  },
  {
    "text": "Keep repeating that. You have, essentially,\nn choices, because they're log n\nfolds that you make,",
    "start": "1383090",
    "end": "1388532"
  },
  {
    "text": "each could be a\nmountain or valley. So there are n\ndifferent mv strings you can get in\nessentially log n folds.",
    "start": "1388532",
    "end": "1399720"
  },
  {
    "text": "But sadly, none\nof them is the one we want, mvmvmv, the pleat fold.",
    "start": "1399720",
    "end": "1405490"
  },
  {
    "text": "So that leaves us with the\nquestion of how many operations do you need to get a pleat fold? ",
    "start": "1405490",
    "end": "1416570"
  },
  {
    "text": "This is where things get cool. So-- why don't I tell\nyou some answers.",
    "start": "1416570",
    "end": "1426270"
  },
  {
    "text": "So if you want to\nfold mmmm, or mvmv,",
    "start": "1426270",
    "end": "1431880"
  },
  {
    "text": "these turn out to be\nthe same, because you can do m's on the odd positions,\nv's on the even positions.",
    "start": "1431880",
    "end": "1437610"
  },
  {
    "text": "Then you can do it in\nlog squared n folds, and you need at least log\nsquared n over log, log n.",
    "start": "1437610",
    "end": "1448050"
  },
  {
    "text": "This is way, way faster than n. There's an open\nproblem between log squared n and log\nsquared over log",
    "start": "1448050",
    "end": "1453506"
  },
  {
    "text": "log, small gap of\nthe log log factor. But somewhere in between here.",
    "start": "1453506",
    "end": "1459149"
  },
  {
    "text": "If you want to do, let's say,\na random pattern, then we",
    "start": "1459150",
    "end": "1467470"
  },
  {
    "text": "can prove you need about\nn divided by log n.",
    "start": "1467470",
    "end": "1478809"
  },
  {
    "text": "So the obvious way to do it\nis fold each crease unfolds, that takes n steps.",
    "start": "1478810",
    "end": "1484230"
  },
  {
    "text": "So you can always\nimprove by a log factor, and that's the best you\ncould do for most strings.",
    "start": "1484230",
    "end": "1489289"
  },
  {
    "text": "But these strings are\nsufficiently special, that you can get a huge factor,\nbasically exponential, when,",
    "start": "1489290",
    "end": "1494920"
  },
  {
    "text": "instead of doing\nroughly n steps, you're only doing\npoly log steps. So, there's four results here.",
    "start": "1494920",
    "end": "1502050"
  },
  {
    "text": "Which ones would\nyou like to see? How many people vote for\nlog squared n upper bound? ",
    "start": "1502050",
    "end": "1509289"
  },
  {
    "text": "Four. How many people vote for\nlog squared over log log lower bound? Completely different\nset of four.",
    "start": "1509290",
    "end": "1515840"
  },
  {
    "text": "How many people vote for the\nn over log n story, upper bound first and lower bound?",
    "start": "1515840",
    "end": "1522461"
  },
  {
    "text": "OK. I think the upper bound\nhere wins, just curious. They all these similar ideas.",
    "start": "1522461",
    "end": "1529447"
  },
  {
    "text": "I'm going to briefly\nsketch, because I want to get to folding stuff,\nhow you achieve n over log n",
    "start": "1529447",
    "end": "1536170"
  },
  {
    "text": "upper bound, maybe then I'll do\nlog squared upper bound here. Lower bounds are,\nwell, they're bounds.",
    "start": "1536170",
    "end": "1545630"
  },
  {
    "text": "That doesn't say anything. So, if you have an mv string,\nto get this bound, arbitrary",
    "start": "1545630",
    "end": "1552580"
  },
  {
    "text": "string, I'm going to\nconsider epsilon-- sorry,",
    "start": "1552580",
    "end": "1558840"
  },
  {
    "text": "1 minus epsilon log n,\nconsecutive letters,",
    "start": "1558840",
    "end": "1564250"
  },
  {
    "text": "and split into, basically, n\nover log n chunks, each of size",
    "start": "1564250",
    "end": "1571340"
  },
  {
    "text": "roughly log n, a little\nbit smaller than log n. Why do I do that?",
    "start": "1571340",
    "end": "1577000"
  },
  {
    "text": "Because the number of\ndifferent chunk values is 2 to the 1 minus\nepsilon, times log n, right,",
    "start": "1577000",
    "end": "1583890"
  },
  {
    "text": "each can be mountain or valley. Now 2 the log n is n, so\nthis is n to the 1 minus",
    "start": "1583890",
    "end": "1591090"
  },
  {
    "text": "epsilon, possible\ndifferent chunk values. ",
    "start": "1591090",
    "end": "1602009"
  },
  {
    "text": "These are chunks. Why is that interesting? Because I have basically\nn over log n chunks,",
    "start": "1602010",
    "end": "1608525"
  },
  {
    "text": "but there's only n to the 1\nminus epsilon different chunk values. This is much, much\nsmaller than this.",
    "start": "1608525",
    "end": "1613840"
  },
  {
    "text": "Think of epsilon being a half,\nas the square root of n, this is n over log n. So there's actually most-- many\nthe chunks have to be repeated.",
    "start": "1613840",
    "end": "1622409"
  },
  {
    "text": "So this means that an average\nchunk is repeated, What is it?",
    "start": "1622410",
    "end": "1633950"
  },
  {
    "text": "It's n over log n of\nthem, is n over log n,",
    "start": "1633950",
    "end": "1639620"
  },
  {
    "text": "times n to the 1\nminus epsilon times, which is n to the\nepsilon over log n.",
    "start": "1639620",
    "end": "1646220"
  },
  {
    "text": " This is the number\nof chunks here,",
    "start": "1646220",
    "end": "1652059"
  },
  {
    "text": "and we're dividing by the\nnumber of different ones, so typical repetition\nis going to be",
    "start": "1652060",
    "end": "1657844"
  },
  {
    "text": "n to the epsilon\nover log n times. I'll just assume all chunks\nare repeated this many times. It's all linear, so\nit doesn't matter",
    "start": "1657844",
    "end": "1663230"
  },
  {
    "text": "whether some are more common\nand some are less common. OK, cool.",
    "start": "1663230",
    "end": "1671601"
  },
  {
    "text": "Now what?  So, if I look at one of\nthese chunks and all of it",
    "start": "1671601",
    "end": "1681435"
  },
  {
    "text": "is repetitions, I would like\nto fold them all somehow more efficiently. And there's one key\nidea in this paper",
    "start": "1681435",
    "end": "1688710"
  },
  {
    "text": "on how to do that, which is--\nso here's my strip, maybe here's",
    "start": "1688710",
    "end": "1697710"
  },
  {
    "text": "one instance of the\nchunk, here's another one. They can be kind of\nspaced out arbitrarily.",
    "start": "1697710",
    "end": "1703360"
  },
  {
    "text": "So what I'm going to do is fold\nhere, fold here, fold here.",
    "start": "1703360",
    "end": "1708410"
  },
  {
    "text": "I think that's right,\nall the bisectors. So I end up with\none chunk like this, than another chunk like this,\nthan another chunk something",
    "start": "1708410",
    "end": "1717550"
  },
  {
    "text": "like this. Then, this one is very tiny. Can I get my four\nrepetitions of the chunk",
    "start": "1717550",
    "end": "1723390"
  },
  {
    "text": "all on top of each other? What I then do, so this is going\nto take how many repetitions",
    "start": "1723390",
    "end": "1729810"
  },
  {
    "text": "is, n to the epsilon over\nlog n, so this is about n to the epsilon over log n\nsteps, to do all these folds.",
    "start": "1729810",
    "end": "1737250"
  },
  {
    "text": "Now I fold here, fold here, fold\nhere, fold here simultaneously, getting them all correct.",
    "start": "1737250",
    "end": "1742940"
  },
  {
    "text": "That's going to take\n1 minus epsilon times basically log n\nsteps, then I unfold.",
    "start": "1742940",
    "end": "1749400"
  },
  {
    "text": "And then I discover, Darn it,\nhalf of them were upside down. Because I got this one\nright and this one right,",
    "start": "1749400",
    "end": "1755580"
  },
  {
    "text": "but these two are flipped,\nso that's so good, so then I recurse on\nthe remaining half.",
    "start": "1755580",
    "end": "1761967"
  },
  {
    "text": "But this turns out to\nbe a geometric series, so if I do all four of these,\nand then I do two of them, and then I do one of\nthem, I'll be done,",
    "start": "1761967",
    "end": "1767789"
  },
  {
    "text": "and it will only cost me\nanother factor of 2 in time. So I get log n plus n to\nthe epsilon over log n.",
    "start": "1767790",
    "end": "1776200"
  },
  {
    "text": "I have to do this for each of\nthe different chunk values, so I need to do n to\nthe 1 minus epsilon,",
    "start": "1776200",
    "end": "1783190"
  },
  {
    "text": "times log n plus n to the\nepsilon over log n, times 2",
    "start": "1783190",
    "end": "1790080"
  },
  {
    "text": "because of the geometric series. And this comes out\nto n over log n.",
    "start": "1790080",
    "end": "1795225"
  },
  {
    "text": "Ta-da!  Magic.",
    "start": "1795225",
    "end": "1800518"
  },
  {
    "text": "The log n is basically coming\nfrom the chunk size being log n and 1 minus epsilon log\nn as big as we could make it,",
    "start": "1800519",
    "end": "1806480"
  },
  {
    "text": "because we needed this to\nbe a lot smaller than n. So that's how you save a\nfactor of log n, little crazy,",
    "start": "1806480",
    "end": "1814160"
  },
  {
    "text": "but it works in theory. That's the upper\nbound, the lower bound is actually pretty obvious,\nbecause if you only",
    "start": "1814160",
    "end": "1822970"
  },
  {
    "text": "use k folds, you're doing--\nthere's n to the k or maybe 2n",
    "start": "1822970",
    "end": "1829030"
  },
  {
    "text": "to the k, different\nthings you can do, because there's n different\nplaces you could make a fold, could be a mountain or a valley.",
    "start": "1829030",
    "end": "1834770"
  },
  {
    "text": "And this better be,\nat least, 2 to the n, because they're 2 the n\ndifferent mountain valley",
    "start": "1834770",
    "end": "1839830"
  },
  {
    "text": "patterns you could\nmake, and you have to somehow make\nthem with k folds. These are all the things\nyou could make with k folds.",
    "start": "1839830",
    "end": "1845570"
  },
  {
    "text": "And you work that\nout and k has to be, at least, about n over log n. So that's why it's optimal, and\nbecause this is an information",
    "start": "1845570",
    "end": "1853130"
  },
  {
    "text": "theoretic argument, this works\nin the average case as well. Take a random example. You need at least n over log n.",
    "start": "1853130",
    "end": "1859420"
  },
  {
    "text": "Most examples, high probability,\nwill need n over log n. So that's those lower bounds.",
    "start": "1859420",
    "end": "1865899"
  },
  {
    "text": "Let me briefly tell you about\nthis log squared n upper bound. It uses the same idea, but\nbecause everything is repeated",
    "start": "1865900",
    "end": "1874890"
  },
  {
    "text": "in the mmmm string, you don't--\nit's a lot easier to do this kind of folding.",
    "start": "1874890",
    "end": "1880570"
  },
  {
    "text": "Oh sorry, there's one\nstep I left out here. So great, you make these\nfolds, you line things up,",
    "start": "1880570",
    "end": "1885600"
  },
  {
    "text": "you fold these things. Then you unfold. So in recurse, eventually\nyou fix these guys,",
    "start": "1885600",
    "end": "1893010"
  },
  {
    "text": "but you also destroyed\nthis crease and this crease and this crease, so you kind\nof messed things up a little. You've got to do this\nrepeatedly for every chunk.",
    "start": "1893010",
    "end": "1899480"
  },
  {
    "text": "You don't want to mess\nup previous chunks that you've done. So you have to go back\nand fix this fold, unfold, fix this fold,\nunfold, but that,",
    "start": "1899480",
    "end": "1906000"
  },
  {
    "text": "again, it only costs n to\nthe epsilon over log n, so not too bad. So another factor of 2 here.",
    "start": "1906000",
    "end": "1914160"
  },
  {
    "text": "But I'm ignoring\nconstant factors. OK, that was n over\nlog n, upper bound.",
    "start": "1914160",
    "end": "1920900"
  },
  {
    "text": "Let's do log squared\nupper bound for mmmmm. ",
    "start": "1920900",
    "end": "1928860"
  },
  {
    "text": "So I need to look this\nup, it's a little tricky.",
    "start": "1928860",
    "end": "1933970"
  },
  {
    "text": "We're going to use the\ntrick of the dragon curve, essentially, which is\nrepeatedly fold in half, and we're going to keep\ndoing that until we",
    "start": "1933970",
    "end": "1942130"
  },
  {
    "text": "are left with three creases,\nwhich haven't yet been folded.",
    "start": "1942130",
    "end": "1947410"
  },
  {
    "text": "So this is my folded bundle. There's many, many,\nmany layers here. And then I'm going to fold\nmmm on those three creases.",
    "start": "1947410",
    "end": "1955357"
  },
  {
    "text": "Instead of going all the way to\ndragon curve, which would just be, Do m, fold here first, I'm\ngoing to fold this, unfold,",
    "start": "1955357",
    "end": "1961960"
  },
  {
    "text": "fold this, unfold, fold this,\nunfold, so I get this pattern. When I unfold this,\nit actually turns out",
    "start": "1961960",
    "end": "1968799"
  },
  {
    "text": "to be kind of nice\nand alternating. It will be something mmm,\nsomething, valley valley",
    "start": "1968800",
    "end": "1976470"
  },
  {
    "text": "valley, something, mountain\nmountain mountain, something, valley valley valley, and so on.",
    "start": "1976470",
    "end": "1983640"
  },
  {
    "text": "OK great, half of my things,\nroughly, are mountains. I just need to\nfix these valleys.",
    "start": "1983640",
    "end": "1991020"
  },
  {
    "text": "So I use the same trick,\nwhich is I'm going to fold,",
    "start": "1991020",
    "end": "1996905"
  },
  {
    "text": "let me use red maybe-- fold in\nthe middle of these mountain",
    "start": "1996905",
    "end": "2002390"
  },
  {
    "text": "segments. If I do that, I line up\nall the valley segments.",
    "start": "2002390",
    "end": "2007610"
  },
  {
    "text": "So I end up with, after folding,\nthis is going to look like,",
    "start": "2007610",
    "end": "2013679"
  },
  {
    "text": "you almost need a computer\nto work all this out, but we have implemented\nthis, it works.",
    "start": "2013680",
    "end": "2019990"
  },
  {
    "text": "It's going to look like this,\nI mean, with many layers like this. All the values are\non top of each other.",
    "start": "2019990",
    "end": "2025299"
  },
  {
    "text": "These question marks are\nstill question marks. This mountain is that mountain,\nthis mountain is that mountain, my mountain is your\nmountain, I don't know.",
    "start": "2025300",
    "end": "2032182"
  },
  {
    "text": "So now we're going to fold\nmountain mountain mountain mountain, on all\nfive of these things,",
    "start": "2032182",
    "end": "2039380"
  },
  {
    "text": "and these two remain mountains. And then unfold, and what I\nend up with is twice as good.",
    "start": "2039380",
    "end": "2045790"
  },
  {
    "text": "I end up with question mark,\nand then, I think, sorry,",
    "start": "2045790",
    "end": "2050840"
  },
  {
    "text": "not quite-- because this\npart also gets messed up. So I end up with valley,\nmountain, question mark,",
    "start": "2050840",
    "end": "2057239"
  },
  {
    "text": "then seven mountains,\nthen question mark,",
    "start": "2057239",
    "end": "2064010"
  },
  {
    "text": "then some not so pretty stuff,\nm v v v v v m, question mark,",
    "start": "2064010",
    "end": "2070649"
  },
  {
    "text": "and then this repeats until we\nget to the end of the string. And then the end looks\nkind of like this.",
    "start": "2070650",
    "end": "2076840"
  },
  {
    "text": "So the point is, I had\nthree m's in a row, now I have seven m's in a row. Each time I do this,\nI roughly double the number of m's in a row.",
    "start": "2076840",
    "end": "2082690"
  },
  {
    "text": "By the end, almost\neverything will be m's, after I do\nthis log n times.",
    "start": "2082690",
    "end": "2088190"
  },
  {
    "text": "I have pretty much all m's\nand then I can finish it off. And each of these\nsteps took log n steps,",
    "start": "2088190",
    "end": "2094199"
  },
  {
    "text": "because I had to fold\nalong all these things. How did I fold along them? Not one at a time, of course, I\nfold in half and fold in half,",
    "start": "2094199",
    "end": "2100175"
  },
  {
    "text": "and fold in half, roughly. I choose the middlemost\nred line to fold first, and about log n steps later,\neverything will be piled up.",
    "start": "2100175",
    "end": "2107600"
  },
  {
    "text": "So I get to use this efficiency\nof dragon curve things. I'm messing up these\ncreases, of course, but it's OK, because\nI get a big chunk",
    "start": "2107600",
    "end": "2114960"
  },
  {
    "text": "that all gets correct at once. Half of it gets wrong,\nhalf of it's correct, but the half that's getting\ncorrect, gets longer and longer",
    "start": "2114960",
    "end": "2121380"
  },
  {
    "text": "each step, doubling. So only log squared steps. Pretty sure this is optimal,\nbut the best lower bound",
    "start": "2121380",
    "end": "2126970"
  },
  {
    "text": "we can prove is log\nsquared over log log. All right, finally,\nlet's fold some stuff.",
    "start": "2126970",
    "end": "2134830"
  },
  {
    "text": "I thought we would fold\nsome hyperbolic paraboloids and maybe put them together\ninto structures like this.",
    "start": "2134830",
    "end": "2143770"
  },
  {
    "text": "So, you have your squares. If you don't have squares,\na bunch of squares up here. ",
    "start": "2143770",
    "end": "2150560"
  },
  {
    "text": "You can start folding\nas many as you like. We're going to\nput them together. I will demonstrate up here.",
    "start": "2150560",
    "end": "2157040"
  },
  {
    "text": " So the first thing we want to\ndo is fold along the diagonals.",
    "start": "2157040",
    "end": "2164210"
  },
  {
    "text": "These aren't perfect\nsquares, but it's OK. So we fold along on diagonal,\nand the other diagonal.",
    "start": "2164210",
    "end": "2174809"
  },
  {
    "text": "This is mainly so we know\nwhere the center is, but also because we need to\nfold a diagonal, so we kill two birds\nwith one stone.",
    "start": "2174809",
    "end": "2180075"
  },
  {
    "start": "2180075",
    "end": "2185310"
  },
  {
    "text": "Whereas we just saw how\nto kill, in this case, log n birds with one stone.",
    "start": "2185310",
    "end": "2190780"
  },
  {
    "text": "Say log n, here we're\nonly killing two. So now you've got your\ndiagonals and your square,",
    "start": "2190780",
    "end": "2196190"
  },
  {
    "text": "we want to fold--\nit's kind of cool, I colored the edges\nwith my chalk hands. Now everything's\ngoing to be parallel",
    "start": "2196190",
    "end": "2202340"
  },
  {
    "text": "to the sides of the square. So the first thing\nwe're going to do is construct a\nsquare that's half as big, centered along that point.",
    "start": "2202340",
    "end": "2209670"
  },
  {
    "text": "So this involves folding\nthe bottom edge, usually do this valley fold. Fold the bottom edge to\nline up with that center,",
    "start": "2209670",
    "end": "2216890"
  },
  {
    "text": "and also line up the edges. Now, very important. When you make this fold,\ndon't fold it all the way,",
    "start": "2216890",
    "end": "2223000"
  },
  {
    "text": "just fold the middle half,\nbetween the two diagonals. That's really key, otherwise\nthis will not work.",
    "start": "2223000",
    "end": "2229470"
  },
  {
    "text": "It's the only thing you\nhave to be careful of. Don't fall all the way,\njust in the middle. OK, that's one quarter.",
    "start": "2229470",
    "end": "2235930"
  },
  {
    "text": "Do that four times.  So we go here, line up at\nthe center, fold the middle.",
    "start": "2235930",
    "end": "2246070"
  },
  {
    "start": "2246070",
    "end": "2257080"
  },
  {
    "text": "Once you've got\nthe inner square, you're going to make two more. There's going to be this\nsquare at the one quarter mark,",
    "start": "2257080",
    "end": "2263600"
  },
  {
    "text": "and an inner square\nat the 3/4 mark. To make the outer square, you\nfold the edge to the thing",
    "start": "2263600",
    "end": "2271390"
  },
  {
    "text": "that you just folded. Keep careful note of which\ncrease you're folding to,",
    "start": "2271390",
    "end": "2278030"
  },
  {
    "text": "should be from the\nprevious square, not from the current square. To fold the inner square,\nyou go all the way up",
    "start": "2278030",
    "end": "2284950"
  },
  {
    "text": "to the opposite side\nof the first square. And you can just look visually,\nare these evenly spaced.",
    "start": "2284950",
    "end": "2291700"
  },
  {
    "text": "If yes, you did it right,\nif not, you're in trouble. You're probably OK if you\nmake a few extra creases,",
    "start": "2291700",
    "end": "2298530"
  },
  {
    "text": "but don't try to make as few\nextra creases as possible. ",
    "start": "2298530",
    "end": "2304170"
  },
  {
    "text": "So then repeat that four\ntimes and you'll get your, I guess, four squares, if\nyou count the outer boundary.",
    "start": "2304170",
    "end": "2310905"
  },
  {
    "start": "2310905",
    "end": "2333160"
  },
  {
    "text": "It's a little hard to see, once\nyou've got that, those squares, looks like I did one\nof them incorrectly.",
    "start": "2333160",
    "end": "2338440"
  },
  {
    "start": "2338440",
    "end": "2343569"
  },
  {
    "text": "Got your nice concentric\nsquares, four of them. Now you're halfway\ndown, you flip it over,",
    "start": "2343570",
    "end": "2351040"
  },
  {
    "text": "and do valley folds\non the other side, because you want these to\nbe alternating mountain valley, mountain valley, and\njust fill in all the squares",
    "start": "2351040",
    "end": "2358160"
  },
  {
    "text": "in between those squares. And you can figure out what\nthe reference markers are, they're all the mountain folds,\nactually every other mountain",
    "start": "2358160",
    "end": "2367050"
  },
  {
    "text": "fold will be one\nof your references. Don't go to one of\nyour new valley folds, always go to the mountain ones.",
    "start": "2367050",
    "end": "2375314"
  },
  {
    "text": "And just check that you're\nalways filling in halfway in between two of\nyour mountain folds.",
    "start": "2375314",
    "end": "2380590"
  },
  {
    "text": "Don't forget to flip\nover, very important. ",
    "start": "2380590",
    "end": "2390734"
  },
  {
    "text": "And skip every other\nguy, otherwise you will make a refold and just\nincrease the wrong way.",
    "start": "2390734",
    "end": "2398471"
  },
  {
    "text": "This is what it looks like\nafter one quarter of those. ",
    "start": "2398471",
    "end": "2451050"
  },
  {
    "text": "And once you've done all\nthis crazy pre-creasing, concentric squares,\nalternating mountain valley, then the fun part begins.",
    "start": "2451050",
    "end": "2457410"
  },
  {
    "text": "This is actually, literally fun.  It's, I guess, also harder,\nbut much more exciting",
    "start": "2457410",
    "end": "2465170"
  },
  {
    "text": "than all that pre-creasing. So, in this case, you have to\nfold all the creases at once, and the easy way to do that\nis start at the outside",
    "start": "2465170",
    "end": "2472340"
  },
  {
    "text": "and make the outermost\nring, fold it, just",
    "start": "2472340",
    "end": "2479340"
  },
  {
    "text": "go around once or twice. Make sure everything's folded,\nincluding that diagonal.",
    "start": "2479340",
    "end": "2484369"
  },
  {
    "text": "So here I have valley\nfolded everything, including the outer diagonal. And then you want to\nmountain fold the next one,",
    "start": "2484370",
    "end": "2490520"
  },
  {
    "text": "and get them to be\nagainst each other. You're aiming for a\nkind of x shape, which is drawn over here.",
    "start": "2490520",
    "end": "2497210"
  },
  {
    "text": "It's going to look\nlike that ideally. Just keep collapsing, square\nby square, making sure you",
    "start": "2497210",
    "end": "2504329"
  },
  {
    "text": "alternating mountain\nvalley, it should just fall into place pretty much.",
    "start": "2504330",
    "end": "2510260"
  },
  {
    "text": "But paper likes to\nmisfold a little bit, so you've got to fix it all.",
    "start": "2510260",
    "end": "2515430"
  },
  {
    "text": "Here I've done two\nsquares, little more. ",
    "start": "2515430",
    "end": "2522554"
  },
  {
    "text": "It gets easier and easier,\nbecause the squares get smaller and smaller. We've got three squares done,\nso I'm, like, halfway to an x.",
    "start": "2522554",
    "end": "2531060"
  },
  {
    "text": "Fourth square.  The center is a\nlittle bit tricky,",
    "start": "2531060",
    "end": "2537020"
  },
  {
    "text": "try to get it so it alternates,\nso now it's nice and thin. It's like repeated sync\nfolds of a water bomb base,",
    "start": "2537020",
    "end": "2544760"
  },
  {
    "text": "and it's like an x. And then this is\nyour opportunity to recrease all your\ncreases really hard,",
    "start": "2544760",
    "end": "2550810"
  },
  {
    "text": "just give it a good squeeze\non each of the three, four legs of the starfish. ",
    "start": "2550810",
    "end": "2558240"
  },
  {
    "text": "And now you've got your\nhyperbolic paraboloid. To make it, you want to take two\nmidpoints here of the squares,",
    "start": "2558240",
    "end": "2566650"
  },
  {
    "text": "pull them apart until\nit's a little bit open, and then give it a twist,\nand then open it up a little,",
    "start": "2566650",
    "end": "2575146"
  },
  {
    "text": "and you've got your\nhyperbolic paraboloid. ",
    "start": "2575146",
    "end": "2580847"
  },
  {
    "text": "If we make enough of\nthese, we can assemble it into some cool shapes. ",
    "start": "2580847",
    "end": "2587340"
  },
  {
    "text": "How many people have folded one? At least one.",
    "start": "2587340",
    "end": "2593450"
  },
  {
    "text": "A few people. I will show you--\nyou can fold more.",
    "start": "2593450",
    "end": "2600054"
  },
  {
    "text": "We're going to\nassemble something, might need a bunch of people. This is the algorithm we use\nfor converting a polyhedron",
    "start": "2600054",
    "end": "2607000"
  },
  {
    "text": "into a bunch of\nhyperbolic paraboloids. It's in this paper\nfor '99, and we",
    "start": "2607000",
    "end": "2613900"
  },
  {
    "text": "take each face of the polygons,\nof the polyhedron, sorry. So if you have a cube, you've\ngot a bunch of squares.",
    "start": "2613900",
    "end": "2619760"
  },
  {
    "text": "For each square,\nwe will make what we call a four hat, which is\nfour hyperbolic paraboloids,",
    "start": "2619760",
    "end": "2625240"
  },
  {
    "text": "joined in a cycle, like this. And you've got to be careful\nthe join it the right way,",
    "start": "2625240",
    "end": "2630790"
  },
  {
    "text": "but then, these, the tips of\nthe high parts that are not joined-- I mean, one tip\nof each of the high parts",
    "start": "2630790",
    "end": "2638740"
  },
  {
    "text": "comes together at the center. Than these tips are\ngoing to represent the edge of the\npolygon, these red dots.",
    "start": "2638740",
    "end": "2644570"
  },
  {
    "text": "And so these two sides are\nthe sides of-- these two sides",
    "start": "2644570",
    "end": "2651352"
  },
  {
    "text": "are the sides of [INAUDIBLE]. They're going to join to an\nadjacent [INAUDIBLE] over here.",
    "start": "2651352",
    "end": "2657140"
  },
  {
    "text": "So that's the idea. ",
    "start": "2657140",
    "end": "2662220"
  },
  {
    "text": "So I've got-- I've already\nfolded a bunch of these already.",
    "start": "2662220",
    "end": "2667277"
  },
  {
    "text": "I'll show you, maybe,\nwhat a hat looks like. ",
    "start": "2667277",
    "end": "2675410"
  },
  {
    "text": "So take two of them, join\nthem along those edges.",
    "start": "2675410",
    "end": "2681180"
  },
  {
    "text": "We're going to use tape\nor staples to join them, I don't have a fancy\nlock, I'm afraid.",
    "start": "2681180",
    "end": "2686570"
  },
  {
    "text": "And join these edges\ntogether, and you get-- this is a three-hat\nand you can put on your head,",
    "start": "2686570",
    "end": "2697330"
  },
  {
    "text": "whatever, and that would\nrepresent a triangle. And then we're going to\njoin along these two sides",
    "start": "2697330",
    "end": "2702800"
  },
  {
    "text": "to an adjacent\ntriangle or whatever.  So we could make\na platonic solid.",
    "start": "2702800",
    "end": "2712490"
  },
  {
    "text": "I guess the simplest one would\nbe a tetrahedron has six edges, so it needs 12 [INAUDIBLE].",
    "start": "2712490",
    "end": "2720560"
  },
  {
    "text": "I was thinking we\ncould make this solid, it's never been made before. It should be cool. It's the simplest\nArchimedean solid,",
    "start": "2720560",
    "end": "2725940"
  },
  {
    "text": "in terms of number of edges,\nthe truncated tetrahedron. This requires 36 parts,\nso if we're ambitious,",
    "start": "2725940",
    "end": "2734579"
  },
  {
    "text": "we can go for it, but I\nthink we're low on time. So a tetrahedron might\nbe an easier bet.",
    "start": "2734580",
    "end": "2741637"
  },
  {
    "text": "If people want to come\nup and start assembling.  Finish taping that.",
    "start": "2741637",
    "end": "2747980"
  },
  {
    "text": "Hold these, and\nthen this goes here. Do you want to hold this one?",
    "start": "2747980",
    "end": "2755320"
  },
  {
    "text": "Virtual assembly\nhere, so maybe we'll finish assembling next class.",
    "start": "2755320",
    "end": "2760520"
  },
  {
    "start": "2760520",
    "end": "2765867"
  }
]