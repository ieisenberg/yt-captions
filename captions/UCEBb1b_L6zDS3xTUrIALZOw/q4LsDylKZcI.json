[
  {
    "text": " PROFESSOR: I have\nour final exam schedule from the registrar. It comes Tuesday morning\nof exam week.",
    "start": "0",
    "end": "6980"
  },
  {
    "text": "It's on the web page. You won't miss it. I want to remind you that the\nmidterm exam is on Wednesday,",
    "start": "6980",
    "end": "14340"
  },
  {
    "text": "March 16, that it starts at 9\nnot at 9:30 so that you're",
    "start": "14340",
    "end": "19720"
  },
  {
    "text": "less time-limited than you\nwould be otherwise. It's a two-hour exam.",
    "start": "19720",
    "end": "26020"
  },
  {
    "text": "And it will cover basically up\nthrough chapter eight, which",
    "start": "26020",
    "end": "31280"
  },
  {
    "text": "is Reed-Solomon codes. And you're responsible for\nanything that's been",
    "start": "31280",
    "end": "37750"
  },
  {
    "text": "discussed in class. If we haven't discussed\nit in class, then don't worry about it. All right.",
    "start": "37750",
    "end": "43489"
  },
  {
    "text": "Any questions about any\nof those things? ",
    "start": "43490",
    "end": "51180"
  },
  {
    "text": "It's 9 o'clock to 11 o'clock.  What's the underlined?",
    "start": "51180",
    "end": "56870"
  },
  {
    "text": " This line up here?",
    "start": "56870",
    "end": "62150"
  },
  {
    "text": "This says, \"This class\ngoes from 9:30 to 11.00.\" Not 11:15.",
    "start": "62150",
    "end": "69280"
  },
  {
    "text": "That's for me, not for you,\nalthough I've tried to lay off some of the responsibility\non you.",
    "start": "69280",
    "end": "76670"
  },
  {
    "text": "OK, let's continue. I hope to finish up chapter\nsix today, might not",
    "start": "76670",
    "end": "83820"
  },
  {
    "text": "completely finish it. There are really three\ntopics left to go.",
    "start": "83820",
    "end": "88990"
  },
  {
    "text": "One is the orthogonality\nand inner product topic, which I skipped.",
    "start": "88990",
    "end": "94630"
  },
  {
    "text": "The second is Reed-Muller\ncodes, which is our main objective in this chapter,\na family of useful codes.",
    "start": "94630",
    "end": "102040"
  },
  {
    "text": "And the last topic is why\nmaking hard decisions",
    "start": "102040",
    "end": "107060"
  },
  {
    "text": "is not a good idea. And so I'll try to say\nas much as I can about those three things.",
    "start": "107060",
    "end": "114090"
  },
  {
    "text": "Just to remind you of where\nwe are, we're in the power-limited regime. We're trying to design good,\nsmall-signal constellations,",
    "start": "114090",
    "end": "121860"
  },
  {
    "text": "or moderate-sized signal\nconstellations now, with nominal spectral efficiency,\nless than two bits per two",
    "start": "121860",
    "end": "129649"
  },
  {
    "text": "dimensions. The technique we're using is\nwe're going to start from a",
    "start": "129650",
    "end": "135150"
  },
  {
    "text": "binary linear block code\nin Hamming space. And we're going to take the\nEuclidean image of that and",
    "start": "135150",
    "end": "142069"
  },
  {
    "text": "hope it's a good constellation\nin Euclidean space. And as we were just talking\nabout before class, the fact",
    "start": "142070",
    "end": "149879"
  },
  {
    "text": "that a linear code is a subspace\nof F2 to the n means",
    "start": "149880",
    "end": "158590"
  },
  {
    "text": "it's true if and only if,\nreally, it has the group property, which in Euclidean\nspace leads to a geometrical",
    "start": "158590",
    "end": "164540"
  },
  {
    "text": "uniformity property. We haven't proved that\nin its full scope.",
    "start": "164540",
    "end": "170989"
  },
  {
    "text": "But we have noticed that from\nevery code word, every code",
    "start": "170990",
    "end": "176130"
  },
  {
    "text": "word has the same distance\nprofile to all other code words. And in particular, the minimum\ndistance is the minimum weight",
    "start": "176130",
    "end": "184170"
  },
  {
    "text": "of any non-zero code word. That's the main juice we've\nsqueezed out of that at this point.",
    "start": "184170",
    "end": "190780"
  },
  {
    "text": "So we've now been talking a\nlittle bit about the algebra of binary linear block codes.",
    "start": "190780",
    "end": "196590"
  },
  {
    "text": "We've characterized them\nbasically by three parameters, n, k, d, where n is the length\nof the code, k is the",
    "start": "196590",
    "end": "202840"
  },
  {
    "text": "dimension of the code, d is the\nminimum Hamming distance of the code. In the literature, this is what\nyou'll mainly find, in",
    "start": "202840",
    "end": "208670"
  },
  {
    "text": "the n, k, d code. We have a subsidiary parameter,\nthe number of words",
    "start": "208670",
    "end": "215080"
  },
  {
    "text": "of minimum distance d, which\nwe're going to need to get the error coefficient, or a\nunion-bound expression.",
    "start": "215080",
    "end": "221800"
  },
  {
    "text": "This has less prominence\nin the literature.  Given just these numbers, we get\na couple of key parameters",
    "start": "221800",
    "end": "231840"
  },
  {
    "text": "of our constellation. One is its nominal spectral\nefficiency, which is 2k over n",
    "start": "231840",
    "end": "237440"
  },
  {
    "text": "bits per two dimension,\nupper bounded by 2. Of course, often in the coding\nliterature, you talk about in",
    "start": "237440",
    "end": "245120"
  },
  {
    "text": "a more natural quantity,\nwhich is k over n, called the code rate. Maybe I shouldn't call it cap-R,\nbecause R is used for",
    "start": "245120",
    "end": "252099"
  },
  {
    "text": "the code rate in bits\nper second. This means bit per symbol.",
    "start": "252100",
    "end": "257415"
  },
  {
    "text": "So just let me call this rate. ",
    "start": "257415",
    "end": "263680"
  },
  {
    "text": "But when you're reading the\ncoding literature, the rate of the code means how many\ninformation bits per how many",
    "start": "263680",
    "end": "269350"
  },
  {
    "text": "transmitted bits. And for n, k, d binary linear\nblock code, it's k over m.",
    "start": "269350",
    "end": "277310"
  },
  {
    "text": "And the nominal spectral\nefficiency is just twice that, since we measure it per\ntwo dimensions.",
    "start": "277310",
    "end": "284200"
  },
  {
    "text": "OK, and even more importantly,\nwe get the union bound estimate in terms of a couple\nof simple parameters.",
    "start": "284200",
    "end": "291110"
  },
  {
    "text": "It's just an error coefficient,\nKb, the number of nearest neighbors per bit\ntimes this Q function",
    "start": "291110",
    "end": "298170"
  },
  {
    "text": "expression, which always has 2Eb\nover N_0 in it, multiplied by this multiplicative factor,\nwhich we call the coding gain,",
    "start": "298170",
    "end": "306590"
  },
  {
    "text": "which is just kd over n. And this is equal to one\nfor a 1,1,1 code.",
    "start": "306590",
    "end": "312715"
  },
  {
    "text": "Now you know coding. So anything else?",
    "start": "312715",
    "end": "318960"
  },
  {
    "text": "Our basic effort is to get\na larger coding gain by",
    "start": "318960",
    "end": "324080"
  },
  {
    "text": "constructing more complicated\ncodes. This parameter here, which we\nneed in order to actually plot",
    "start": "324080",
    "end": "331389"
  },
  {
    "text": "the curve and estimate the\neffective coding gain -- the effective coding gain is derated\nfrom the nominal",
    "start": "331390",
    "end": "338860"
  },
  {
    "text": "coding gain by a rule of thumb,\nwhich depends on Kb. It's every factor of 2 in Kb\ncosts you 0.2 dB, roughly in",
    "start": "338860",
    "end": "348650"
  },
  {
    "text": "the right range, if it's not too\nbig, all those qualifiers. But it's a good engineering\nrule of thumb. And that's just the number of\nnearest neighbors per code",
    "start": "348650",
    "end": "356140"
  },
  {
    "text": "word divided by k. And so our object here is to\nsee how well we can do.",
    "start": "356140",
    "end": "361970"
  },
  {
    "text": "And the Reed-Muller codes will\nbe an infinite family of codes that give us a pretty good idea\nof what can be achieved",
    "start": "361970",
    "end": "370500"
  },
  {
    "text": "for a variety of n, k, d that\nkind of cover the waterfront. That's why I talk about\nthem first.",
    "start": "370500",
    "end": "376130"
  },
  {
    "text": "They're all so very simple. OK, but first, we forgot to talk\nabout orthogonality and",
    "start": "376130",
    "end": "384370"
  },
  {
    "text": "inner products and duality, both\nfrom a geometric point of",
    "start": "384370",
    "end": "390360"
  },
  {
    "text": "view and from an algebraic\npoint of view. And so I want to go back\nand recover that.",
    "start": "390360",
    "end": "399785"
  },
  {
    "text": "The definition of an inner\nproduct between x and y, where",
    "start": "399785",
    "end": "410610"
  },
  {
    "text": "x and y are both binary\nn-tuples, is, as you'd expect,",
    "start": "410610",
    "end": "423300"
  },
  {
    "text": "a sort of dot product\nexpression, a component-wise product, the sum over k of xk\nyk, where all the arithmetic",
    "start": "423300",
    "end": "435810"
  },
  {
    "text": "here is in the binary\nfield, F2.  And well, this clearly has the\nbilinearity properties that",
    "start": "435810",
    "end": "449040"
  },
  {
    "text": "you expect of an inner product\nthat's linear in x for a fixed y or vice versa.",
    "start": "449040",
    "end": "454530"
  },
  {
    "text": " But it doesn't turn out to have\nthe geometric properties",
    "start": "454530",
    "end": "461850"
  },
  {
    "text": "that you expect. We can define orthogonality,\nthis is another definition, in",
    "start": "461850",
    "end": "474630"
  },
  {
    "text": "the usual way. x and y are said to\nbe orthogonal --",
    "start": "474630",
    "end": "479893"
  },
  {
    "text": " do that better.",
    "start": "479893",
    "end": "485400"
  },
  {
    "text": "x is said to be orthogonal to\ny if and only if their inner",
    "start": "485400",
    "end": "491070"
  },
  {
    "text": "product is 0, which is the same\ndefinition you know from real and complex\nvector spaces.",
    "start": "491070",
    "end": "500280"
  },
  {
    "text": "OK. But the overall moral I want you\nto get from this is while",
    "start": "500280",
    "end": "506940"
  },
  {
    "text": "this inner product behaves\nabsolutely as you expect in an algebraic sense, it behaves very\ndifferent from what you",
    "start": "506940",
    "end": "512870"
  },
  {
    "text": "expect in a geometric sense. So the algebra's fine.",
    "start": "512870",
    "end": "517960"
  },
  {
    "text": "The geometry is screwy. All right. That's the catch word\nto keep in mind.",
    "start": "517960",
    "end": "525200"
  },
  {
    "text": "Why is that? Where does this inner\nproduct live?",
    "start": "525200",
    "end": "531830"
  },
  {
    "text": "It's F2 valued, right? I'm just doing this sum in\nbinary space, and the result",
    "start": "531830",
    "end": "537209"
  },
  {
    "text": "is either 0 or 1. So when are two n-tuples\northogonal?",
    "start": "537210",
    "end": "549470"
  },
  {
    "text": "Simply if they have an even\nnumber of places in which",
    "start": "549470",
    "end": "555379"
  },
  {
    "text": "they're both equal to 1. Is there a question? ",
    "start": "555380",
    "end": "562600"
  },
  {
    "text": "In particular, suppose I try to\ndefine a norm in the usual",
    "start": "562600",
    "end": "572779"
  },
  {
    "text": "way, like that. Is that going to have\nthe properties that",
    "start": "572780",
    "end": "578095"
  },
  {
    "text": "I'd want of a norm? No.",
    "start": "578095",
    "end": "583410"
  },
  {
    "text": "Why? Because one of the basic\nproperties we want of a norm",
    "start": "583410",
    "end": "590649"
  },
  {
    "text": "is strict positivity, that the\nnorm of x is equal to 0 if and",
    "start": "590650",
    "end": "597030"
  },
  {
    "text": "only if x is equal to 0. That's clearly not true here. What's the requirement for the\ninner product of x with itself",
    "start": "597030",
    "end": "606415"
  },
  {
    "text": "to be equal to 0, in\nother words x to be orthogonal with itself?",
    "start": "606415",
    "end": "611566"
  },
  {
    "text": "It just simply has to have\nan even number of 1's. If it has an even number\nof 1's, then this",
    "start": "611566",
    "end": "618230"
  },
  {
    "text": "so-called norm is 0. If there's an odd\nnumber, it's 1. So it's perfectly possible for\na vector to be orthogonal to",
    "start": "618230",
    "end": "627480"
  },
  {
    "text": "itself, a non-zero vector to\nbe orthogonal to itself. And that's basically where all\nthe trouble comes from in a",
    "start": "627480",
    "end": "635850"
  },
  {
    "text": "geometric sense.  AUDIENCE: So which of them would\nbe [INAUDIBLE] here?",
    "start": "635850",
    "end": "643636"
  },
  {
    "text": "PROFESSOR: It's mod-2. It's in F2. All the arithmetic rules\nare from F2 which is",
    "start": "643636",
    "end": "649170"
  },
  {
    "text": "mod-2 rules, correct. So, good. This means at the most\nfundamental level, we don't",
    "start": "649170",
    "end": "657090"
  },
  {
    "text": "have a Hilbert space here. We don't have a projection\ntheorem. Projection theorem is the basic\ntool we use in Euclidean",
    "start": "657090",
    "end": "666390"
  },
  {
    "text": "spaces, more generally,\nHilbert spaces. Just say that every vector\ncan be partitioned.",
    "start": "666390",
    "end": "674040"
  },
  {
    "text": "In a given space and its\northogonal space, we can",
    "start": "674040",
    "end": "679050"
  },
  {
    "text": "express a vector as the sum of\nits projection onto the space and the projection onto the\northogonal space, which are",
    "start": "679050",
    "end": "684300"
  },
  {
    "text": "two orthogonal vectors. So it's an orthogonal\ndecomposition.",
    "start": "684300",
    "end": "689480"
  },
  {
    "text": "So we have nothing like the\nprojection theorem here. Therefore we have nothing like,\nwe don't necessarily",
    "start": "689480",
    "end": "697040"
  },
  {
    "text": "have orthonormal or even orthogonal basis for subspaces.",
    "start": "697040",
    "end": "707084"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]?  PROFESSOR: You do have a unique\northogonal complement.",
    "start": "707084",
    "end": "713509"
  },
  {
    "text": "I'll get to that in a second. But for instance, we might have\nthat a subspace can be",
    "start": "713510",
    "end": "729830"
  },
  {
    "text": "orthogonal to itself.  That's what the problem is.",
    "start": "729830",
    "end": "735145"
  },
  {
    "text": " For instance, 0, 0, and 1,\n1 is a nice, little,",
    "start": "735145",
    "end": "744860"
  },
  {
    "text": "one-dimensional subspace. And what's it's orthogonal\nsubspace? It's itself. ",
    "start": "744860",
    "end": "752830"
  },
  {
    "text": "We may not have an orthogonal\nbasis for a subspace. And for an example of that, I'll\ngive you our favorite 3,",
    "start": "752830",
    "end": "761246"
  },
  {
    "text": "2, 2 code, as I'll\nnow call it. It consists of these\nfour code words.",
    "start": "761246",
    "end": "766630"
  },
  {
    "text": "A set of generators for this\ncode consists of any two of the non-zero code words.",
    "start": "766630",
    "end": "773490"
  },
  {
    "text": "You can generate all of the code\nwords as binary linear combinations of any\ntwo of these.",
    "start": "773490",
    "end": "779490"
  },
  {
    "text": "But no two of these\nare orthogonal. So there's clearly\nno orthogonal basis for that code.",
    "start": "779490",
    "end": "786089"
  },
  {
    "text": "We shouldn't expect to find\northogonal basis, orthogonal decomposition, so all of these\nsorts of tools that we relied",
    "start": "786090",
    "end": "793095"
  },
  {
    "text": "on heavily in 6.450 in\nEuclidean spaces. ",
    "start": "793095",
    "end": "799290"
  },
  {
    "text": "OK, so this is just a great\ncaution to the student. ",
    "start": "799290",
    "end": "806589"
  },
  {
    "text": "Don't expect Hamming space to\nhave the same geometric properties as Euclidean space.",
    "start": "806590",
    "end": "813490"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE]? ",
    "start": "813490",
    "end": "819160"
  },
  {
    "text": "PROFESSOR: Nothing special. It's just finite fields have\na different geometry. In F2, there's really only one\ngeometry you would impose,",
    "start": "819160",
    "end": "827569"
  },
  {
    "text": "which is the Hamming geometry. In other finite fields, there\nactually could be more than",
    "start": "827570",
    "end": "833010"
  },
  {
    "text": "one geometry. But let's say the algebraic\nproperties, however, you can",
    "start": "833010",
    "end": "841509"
  },
  {
    "text": "still count on. ",
    "start": "841510",
    "end": "853820"
  },
  {
    "text": "For instance, n, k, d\ncode C has, as we've",
    "start": "853820",
    "end": "866040"
  },
  {
    "text": "already shown, a basis. It has k dimensions.",
    "start": "866040",
    "end": "871795"
  },
  {
    "text": "It has a basis g1 up to gk of\nk, linearly independent,",
    "start": "871795",
    "end": "884670"
  },
  {
    "text": "though not necessarily\northogonal basis vectors.",
    "start": "884670",
    "end": "889899"
  },
  {
    "text": "So we can always write the code\nas the set of all u g",
    "start": "889900",
    "end": "899910"
  },
  {
    "text": "such that u is a k-tuple of\ninformation bits, let's say.",
    "start": "899910",
    "end": "906589"
  },
  {
    "text": "In other words, this is a\ncompressed form for the set of all binary linear combinations\nof these generators, where",
    "start": "906590",
    "end": "916820"
  },
  {
    "text": "I've written what's called a\ngenerator matrix, g as a k by",
    "start": "916820",
    "end": "927960"
  },
  {
    "text": "n matrix, whose rows are\nthese generators.",
    "start": "927960",
    "end": "933105"
  },
  {
    "text": " And I've multiplied on the left\nwith a row vector u, if",
    "start": "933105",
    "end": "941569"
  },
  {
    "text": "I'm doing it in matrix terms.",
    "start": "941570",
    "end": "946670"
  },
  {
    "text": "You can do this more abstractly\njust as a linear transformation. And side comment, notice that\nin coding theory, it's",
    "start": "946670",
    "end": "956100"
  },
  {
    "text": "conventional to write vectors\nas row vectors, whereas in every other subject you take,\nit's conventional to write",
    "start": "956100",
    "end": "961720"
  },
  {
    "text": "vectors as column vectors. Why is this? Is there some deep,\nphilosophical reason?",
    "start": "961720",
    "end": "968170"
  },
  {
    "text": "No. It's just the way people started\nto do it in coding theory back at the beginning,\nand then everybody has",
    "start": "968170",
    "end": "974360"
  },
  {
    "text": "followed them. I may have even had something\nto do with this myself. And I'll tell you the reason I\nlike to write vectors as row",
    "start": "974360",
    "end": "981550"
  },
  {
    "text": "vectors is I don't have\nto write a little t up next to them. That's the deep philosophical\nreason.",
    "start": "981550",
    "end": "987819"
  },
  {
    "text": " It's like driving on the right\nside or the left side.",
    "start": "987820",
    "end": "992860"
  },
  {
    "text": "Obviously, you could have chosen\nhow to do it one way or another back in the beginning. But once you've chosen it,\nyou better stick with it.",
    "start": "992860",
    "end": "1001560"
  },
  {
    "text": "There's actually some insight\ninvolved here.",
    "start": "1001560",
    "end": "1009550"
  },
  {
    "text": "This is sort of associated with\na block diagram, where we take k bits, and we run\nit through this linear",
    "start": "1009550",
    "end": "1015700"
  },
  {
    "text": "transformation. And as a result, we get out,\nwhat shall I write, x n bits.",
    "start": "1015700",
    "end": "1025819"
  },
  {
    "text": "And in block diagrams, we tend\nto take the input bits from the left and proceed to\nthe right, left to",
    "start": "1025819",
    "end": "1032939"
  },
  {
    "text": "right kind of thing. So this formula reflects this\nleft to right picture, whereas",
    "start": "1032940",
    "end": "1041449"
  },
  {
    "text": "I'd say the deeper reason why\nyou usually see G u in system",
    "start": "1041450",
    "end": "1046559"
  },
  {
    "text": "theory is that G is regarded\nas an operator",
    "start": "1046560",
    "end": "1051710"
  },
  {
    "text": "that operates on u. It's kind of a G of u.",
    "start": "1051710",
    "end": "1056750"
  },
  {
    "text": "And so that's why it's more\nnatural to think of this as being a column vector,\nbecause then, we",
    "start": "1056750",
    "end": "1064500"
  },
  {
    "text": "have a different picture. G is the operator that\nsomehow transforms u. But these are all side\ncomments, obviously.",
    "start": "1064500",
    "end": "1071990"
  },
  {
    "text": "They don't really matter\nfor anything. All right, just remember that\nvectors are row vectors.",
    "start": "1071990",
    "end": "1085645"
  },
  {
    "text": " OK.",
    "start": "1085645",
    "end": "1091120"
  },
  {
    "text": "Let's define the dual code in\nthe natural way, as the",
    "start": "1091120",
    "end": "1097720"
  },
  {
    "text": "orthogonal code. ",
    "start": "1097720",
    "end": "1104590"
  },
  {
    "text": "Say C dual. The definition is that C dual is\nthe set of all n-tuples y,",
    "start": "1104590",
    "end": "1124840"
  },
  {
    "text": "such that x, the inner product\nbetween x and y is 0. In other words, y is orthogonal\nto x for all the x",
    "start": "1124840",
    "end": "1133130"
  },
  {
    "text": "and C. It's the set of all\nn-tuples that are orthogonal to all the words in C under\nour F2 definition of inner",
    "start": "1133130",
    "end": "1142460"
  },
  {
    "text": "product orthogonality. OK, so that's a natural\ndefinition.",
    "start": "1142460",
    "end": "1150170"
  },
  {
    "text": "For example, as I've already\nshown you, if C is 0, 0, 1, 1,",
    "start": "1150170",
    "end": "1156270"
  },
  {
    "text": "then C dual is 0, 0, 1, 1. If C were 0, 0, 0, 1, then C\ndual would be 0, 0, what?",
    "start": "1156270",
    "end": "1167860"
  },
  {
    "text": " 1, 0. Thank you.",
    "start": "1167860",
    "end": "1173990"
  },
  {
    "text": "Because 1, 1 is not orthogonal\nto this, 0, 1 and is not orthogonal to this.",
    "start": "1173990",
    "end": "1180420"
  },
  {
    "text": "So we simply go through\nand pick it out. Now as I said, the algebraic\nproperties of the",
    "start": "1180420",
    "end": "1189590"
  },
  {
    "text": "dual code are OK. I emphasize they're algebraic.",
    "start": "1189590",
    "end": "1196560"
  },
  {
    "text": "If C is an n, k code, in other\nwords, has dimension k, what",
    "start": "1196560",
    "end": "1207350"
  },
  {
    "text": "do you expect the parameters\nof C dual to be? ",
    "start": "1207350",
    "end": "1213610"
  },
  {
    "text": "Its length is what? It's n, of course. ",
    "start": "1213610",
    "end": "1220070"
  },
  {
    "text": "And what's its dimension\ngoing to be? If C has dimension k, what do\nyou guess the dimension of C",
    "start": "1220070",
    "end": "1225880"
  },
  {
    "text": "dual is going to be? ",
    "start": "1225880",
    "end": "1231350"
  },
  {
    "text": "Just guess from Euclidean\nspaces, or any -- it's n minus k. The dual space has dimension\nn minus k.",
    "start": "1231350",
    "end": "1239419"
  },
  {
    "text": "And that holds.  In the notes, I give two\nproofs for this.",
    "start": "1239420",
    "end": "1245930"
  },
  {
    "text": "There's the conventional coding\ntheory textbook proof, which involves writing down\na generator matrix for C k",
    "start": "1245930",
    "end": "1253920"
  },
  {
    "text": "generators, reducing it to a\ncanonical form, called the systematic form, where there's\nsome k by k identity matrix",
    "start": "1253920",
    "end": "1261809"
  },
  {
    "text": "and a n minus k by k\nparity check part.",
    "start": "1261810",
    "end": "1269490"
  },
  {
    "text": "Then, by inspection, you can\nwrite down a generator matrix for C dual. And you find it has dimension\nn minus k.",
    "start": "1269490",
    "end": "1277360"
  },
  {
    "text": "It's kind of a klutzy proof,\nin my opinion. A second, more elegant proof,\nbut one that you don't have",
    "start": "1277360",
    "end": "1283200"
  },
  {
    "text": "the background for yet, is to\nuse simply the fundamental theorem of homomorphisms.",
    "start": "1283200",
    "end": "1288990"
  },
  {
    "text": " This is in some sense\nan image. This is the dual of an image,\nwhich is a kernel.",
    "start": "1288990",
    "end": "1297440"
  },
  {
    "text": "You work out the dimensions\nfrom that. I am still in search of an\nelegant, elementary proof.",
    "start": "1297440",
    "end": "1307335"
  },
  {
    "text": "And anyone who can come up\nwith a proof suitable for",
    "start": "1307335",
    "end": "1312779"
  },
  {
    "text": "chapter six gets a gold star. ",
    "start": "1312780",
    "end": "1317880"
  },
  {
    "text": "Believe me, the gold star will\nbe very valuable to you.",
    "start": "1317880",
    "end": "1323160"
  },
  {
    "text": "OK, so exercise for any student\nso inclined, give me a nice proof of this. It's surprisingly hard.",
    "start": "1323160",
    "end": "1330930"
  },
  {
    "text": "And I can't say I've spent great\nquantities of my life on it, but I've spent\nsome time on it.",
    "start": "1330930",
    "end": "1337780"
  },
  {
    "text": "So anyway, the dimensions come\nout as I hope you would",
    "start": "1337780",
    "end": "1343970"
  },
  {
    "text": "expect, based on your\npast experience. And I won't give you\na proof in class.",
    "start": "1343970",
    "end": "1351510"
  },
  {
    "text": "You get the fundamental duality\nrelationship, that the dual of C dual, what would\nyou expects that to be?",
    "start": "1351510",
    "end": "1359600"
  },
  {
    "text": " C. OK.",
    "start": "1359600",
    "end": "1365970"
  },
  {
    "text": "In words, C is the set of all\nn-uples that are orthogonal to",
    "start": "1365970",
    "end": "1373020"
  },
  {
    "text": "all the n-tuples in C dual. ",
    "start": "1373020",
    "end": "1379870"
  },
  {
    "text": "OK. So this actually means that I\ncan specify C. If I know C dual, I know C. Give me C dual,\nthe set of all code",
    "start": "1379870",
    "end": "1390420"
  },
  {
    "text": "words orthogonal to it\ntells me what C is. So this implies that I can write\nC in the following form.",
    "start": "1390420",
    "end": "1403100"
  },
  {
    "text": "C is the set of all, just\nemulating this, y n F2 to the",
    "start": "1403100",
    "end": "1413260"
  },
  {
    "text": "n such that x, y equals zero\nfor all x in C dual.",
    "start": "1413260",
    "end": "1423780"
  },
  {
    "text": "I probably should have\ninterchanged x and y for this. x such that x, y equals\n0 for all --",
    "start": "1423780",
    "end": "1431666"
  },
  {
    "text": " this is symmetrical. The inner product of x and y is\nequal to the inner product",
    "start": "1431666",
    "end": "1438880"
  },
  {
    "text": "of y and x. So I don't care how\nI write it. OK, so I can actually\nspecify a code by a",
    "start": "1438880",
    "end": "1448250"
  },
  {
    "text": "set of parity checks. Now suppose I have a generator\nmatrix, call it H, namely a",
    "start": "1448250",
    "end": "1463290"
  },
  {
    "text": "set of generators, H1 through\nHn minus k, for C dual.",
    "start": "1463290",
    "end": "1473670"
  },
  {
    "text": "I'm going to have a set of\nn minus k generators. Then I hope it's obvious that\nI can test whether x is",
    "start": "1473670",
    "end": "1482580"
  },
  {
    "text": "orthogonal to all of C dual by\njust checking whether it's",
    "start": "1482580",
    "end": "1490580"
  },
  {
    "text": "orthogonal to all of\nthese generators. So I would now have C is the set\nof all x n-tuples x such",
    "start": "1490580",
    "end": "1504059"
  },
  {
    "text": "that x, H, j equals\nzero, all j.",
    "start": "1504060",
    "end": "1512560"
  },
  {
    "text": "OK. I've just got to test\northogonality to each of these generators.",
    "start": "1512560",
    "end": "1518290"
  },
  {
    "text": "In other words, in each\nof these is what we call a parity check.",
    "start": "1518290",
    "end": "1525400"
  },
  {
    "text": "We take the inner product of x\nwith a certain n-tuple, and we ask whether parity checks.",
    "start": "1525400",
    "end": "1531600"
  },
  {
    "text": "In other words, we ask whether\nthe subset of positions in which H, j is equal to 1, in\nthose positions, whether x has",
    "start": "1531600",
    "end": "1539160"
  },
  {
    "text": "an even number of 1's. Get very concrete about it.",
    "start": "1539160",
    "end": "1546540"
  },
  {
    "text": "So writing this out in matrix\nform, the test is C is the set",
    "start": "1546540",
    "end": "1555752"
  },
  {
    "text": "of x in F2 to the n such that\nx h-transpose equals 0.",
    "start": "1555752",
    "end": "1565990"
  },
  {
    "text": " That's just a matrix form of\nwhat I've written up there.",
    "start": "1565990",
    "end": "1572600"
  },
  {
    "text": "So let me picture\nit like this. Here the test is, I take\nx, which is n bits.",
    "start": "1572600",
    "end": "1583380"
  },
  {
    "text": "I put it into what's\ncalled a parity checker or syndrome reformer.",
    "start": "1583380",
    "end": "1589059"
  },
  {
    "text": "And I ask whether this is 0. We call this, in general,\nthe syndrome.",
    "start": "1589060",
    "end": "1596470"
  },
  {
    "text": "And we ask whether it's 0. If we get a 0, we say\nx is in the code.",
    "start": "1596470",
    "end": "1602170"
  },
  {
    "text": "If it's not 0, then x\nis not in the code. That's the test. ",
    "start": "1602170",
    "end": "1610420"
  },
  {
    "text": "So when we summarize, we really\nhave two dual ways of",
    "start": "1610420",
    "end": "1622070"
  },
  {
    "text": "characterizing a code, which\nyou will see in the",
    "start": "1622070",
    "end": "1628750"
  },
  {
    "text": "literature.  We have a generator matrix, we\nmight give a k by n generator",
    "start": "1628750",
    "end": "1639980"
  },
  {
    "text": "matrix for the code. And then the code is specified\nas C is the set of all U g",
    "start": "1639980",
    "end": "1653350"
  },
  {
    "text": "such that U n F2 to the k.",
    "start": "1653350",
    "end": "1663169"
  },
  {
    "text": "In other words, this is an\nimage representation. We take C as the image of\na linear transformation.",
    "start": "1663170",
    "end": "1669185"
  },
  {
    "text": " We call G a linear\ntransformation.",
    "start": "1669185",
    "end": "1674700"
  },
  {
    "text": "It goes from Fk to F2 to\nthe k to F2 to the n.",
    "start": "1674700",
    "end": "1684840"
  },
  {
    "text": "And then the code is simply\nthe image of this transformation algebraically. ",
    "start": "1684840",
    "end": "1692850"
  },
  {
    "text": "OK. Or we can specify it by means\nof a parity check matrix, H,",
    "start": "1692850",
    "end": "1701210"
  },
  {
    "text": "which is the generator matrix\nof the dual code. So this would be the parity\ncheck matrix for the dual code",
    "start": "1701210",
    "end": "1707660"
  },
  {
    "text": "G. h is the generator matrix\nof the dual code. And we ask whether --",
    "start": "1707660",
    "end": "1715960"
  },
  {
    "text": "now we specify it as I have up\nhere, simply the x and F2 to",
    "start": "1715960",
    "end": "1724960"
  },
  {
    "text": "the n such that x\nH_t equals 0.",
    "start": "1724960",
    "end": "1731279"
  },
  {
    "text": "And this is what's called a\nkernel representation, because",
    "start": "1731280",
    "end": "1737410"
  },
  {
    "text": "it's the kernel of a linear\ntransformation defined by H2",
    "start": "1737410",
    "end": "1744450"
  },
  {
    "text": "from F2 to the end, down\nto, this is a m",
    "start": "1744450",
    "end": "1751490"
  },
  {
    "text": "by n minus k matrix. So the syndrome is actually\nan n-minus-k-tuple.",
    "start": "1751490",
    "end": "1758750"
  },
  {
    "text": "The elements of the syndrome are\nthe n minus k individual bits, parity check bits. OK.",
    "start": "1758750",
    "end": "1764797"
  },
  {
    "text": " And sometimes it's more\nconvenient to characterize the",
    "start": "1764797",
    "end": "1773640"
  },
  {
    "text": "code in one way, and sometimes\nit's more convenient to characterize it in\nthe other way.",
    "start": "1773640",
    "end": "1779650"
  },
  {
    "text": "For instance, we were talking\nlast time about the n, n minus",
    "start": "1779650",
    "end": "1787560"
  },
  {
    "text": "1, 2 single parity check code,\nor the even weight code, the",
    "start": "1787560",
    "end": "1793280"
  },
  {
    "text": "set of all even weight\nn-tuples, which has dimension n minus 1. And in general, for high-rate\ncodes especially, it may be",
    "start": "1793280",
    "end": "1802710"
  },
  {
    "text": "simpler to give the parity\ncheck representation. What is the dual code?",
    "start": "1802710",
    "end": "1808525"
  },
  {
    "text": "Let's call this C.\nC dual is what? ",
    "start": "1808525",
    "end": "1819490"
  },
  {
    "text": "C dual is what we call the\nn, 1, n repetition code.",
    "start": "1819490",
    "end": "1825024"
  },
  {
    "text": "In other words, it has\ndimension one. It has two code words, the all-0\nword and the all-1 word.",
    "start": "1825024",
    "end": "1831750"
  },
  {
    "text": " Clearly, the all-1 word is\northogonal to all of the even",
    "start": "1831750",
    "end": "1840470"
  },
  {
    "text": "weight words. And vice versa, a word is even\nweight if and only if it's orthogonal to all 1's.",
    "start": "1840470",
    "end": "1848620"
  },
  {
    "text": "So in this case, what is\nthe generator matrix? We had a generator matrix last\ntime consisting of n minus 1",
    "start": "1848620",
    "end": "1857559"
  },
  {
    "text": "weight 2 code words all arranged\nin a kind of double diagonal pattern. That's OK.",
    "start": "1857560",
    "end": "1863970"
  },
  {
    "text": "But that's an n minus\n1 by n matrix. ",
    "start": "1863970",
    "end": "1869850"
  },
  {
    "text": "Most people would say it's\neasier to say, OK, what's the parity check matrix?",
    "start": "1869850",
    "end": "1875256"
  },
  {
    "text": "The parity check matrix in this\ncase, H, is simply a one",
    "start": "1875256",
    "end": "1882110"
  },
  {
    "text": "by n matrix consisting\nof all one's. And what's the characterization\nof the code?",
    "start": "1882110",
    "end": "1891470"
  },
  {
    "text": "The code consists of all\nthe words that are orthogonal to this.",
    "start": "1891470",
    "end": "1897290"
  },
  {
    "text": "And that is why we call it\nsingle parity check code. There's one parity check. And if you pass the parity\ncheck, you're in the code.",
    "start": "1897290",
    "end": "1904040"
  },
  {
    "text": "And if you don't, you're not. OK, so we see that these,\nfirst of all, here's an",
    "start": "1904040",
    "end": "1910850"
  },
  {
    "text": "example of dual codes. Are their dimensions correct? They are. Is each on characterized\ncorrectly as",
    "start": "1910850",
    "end": "1918419"
  },
  {
    "text": "the dual of the other? It is. So we've passed that.",
    "start": "1918420",
    "end": "1923799"
  },
  {
    "text": "This is intended to make point\nC. So it's a good example.",
    "start": "1923800",
    "end": "1931810"
  },
  {
    "text": " One final thing is suppose I\nhave a code with generator",
    "start": "1931810",
    "end": "1944130"
  },
  {
    "text": "matrix G and another code with\ngenerator matrix H. Are they",
    "start": "1944130",
    "end": "1950880"
  },
  {
    "text": "each other's dual\ncodes are not? And the answer is pretty obvious\nfrom all of this.",
    "start": "1950880",
    "end": "1957570"
  },
  {
    "text": "Yes, they are. Let me a substitute in here,\nx is supposed to",
    "start": "1957570",
    "end": "1962870"
  },
  {
    "text": "be equal to U g. So another requirement is that\nUGH_t equals zero for all u.",
    "start": "1962870",
    "end": "1978650"
  },
  {
    "text": "And without belaboring the\npoint, the 5, 2 codes with",
    "start": "1978650",
    "end": "1988400"
  },
  {
    "text": "generator matrix G and H, they\nare dual codes if and only if",
    "start": "1988400",
    "end": "1994320"
  },
  {
    "text": "they have the right dimension,\none is n, k, and the other is n, n minus k, and we satisfy\nG H_t equals zero.",
    "start": "1994320",
    "end": "2002800"
  },
  {
    "text": "Basically, this is the matrix\nof inner products of the generators of C with the\ngenerators of C dual.",
    "start": "2002800",
    "end": "2011470"
  },
  {
    "text": "And if we have k generators\nthat are all orthogonal to",
    "start": "2011470",
    "end": "2017470"
  },
  {
    "text": "these n minus k generators,\nthen they must be the generators of dual codes.",
    "start": "2017470",
    "end": "2023410"
  },
  {
    "text": "That's is kind of intuitive\nand natural. All right, so again, this is a\nconcise form that you would",
    "start": "2023410",
    "end": "2031520"
  },
  {
    "text": "actually, probably most\ncommonly find in the literature. It's not hard to get to.",
    "start": "2031520",
    "end": "2038620"
  },
  {
    "text": "OK, so in this course, we're\nprobably going to talk quite a",
    "start": "2038620",
    "end": "2045100"
  },
  {
    "text": "bit about orthogonality. Duality is very powerful, but\nwe're not going to be using it",
    "start": "2045100",
    "end": "2050919"
  },
  {
    "text": "very much in this course,\nI believe. I'll mention duality\nwhenever there's a",
    "start": "2050920",
    "end": "2056149"
  },
  {
    "text": "duality property to mention. But in general, I'm not going\nto spend an awful lot of time on it.",
    "start": "2056150",
    "end": "2062870"
  },
  {
    "text": "But it's important you know\nabout it, particularly if you were going to go on and do\nanything in this subject.",
    "start": "2062870",
    "end": "2068379"
  },
  {
    "text": "And at an elementary level, it's\nnice to know that we have",
    "start": "2068380",
    "end": "2073539"
  },
  {
    "text": "two possible representations,\nand one is often going to be simpler than the other. Use the simple one.",
    "start": "2073540",
    "end": "2079032"
  },
  {
    "text": "In general, use the\nrepresentation for the low-rate code to determine\nthe high-rate code.",
    "start": "2079032",
    "end": "2084540"
  },
  {
    "text": " OK. Any questions on this?",
    "start": "2084540",
    "end": "2090213"
  },
  {
    "text": "I've now finished up\nthe preparatory. Yeah? AUDIENCE: So you're saying\nthat every basis for [INAUDIBLE]?",
    "start": "2090214",
    "end": "2097160"
  },
  {
    "text": "PROFESSOR: That's necessary\nand sufficient, right. ",
    "start": "2097160",
    "end": "2102550"
  },
  {
    "text": "OK, Reed-Muller codes. Why do I talk about\nReed-Muller codes?",
    "start": "2102550",
    "end": "2108380"
  },
  {
    "text": "First of all, they give us an\ninfinite family of codes, so we can see what happens as n\ngets large, as k goes from 0",
    "start": "2108380",
    "end": "2117020"
  },
  {
    "text": "to n, whose parameters are\nsort of representative.",
    "start": "2117020",
    "end": "2122313"
  },
  {
    "text": " They aren't necessarily the best\ncodes that we know of.",
    "start": "2122313",
    "end": "2132900"
  },
  {
    "text": "They're very simple, as I will\nshow, to construct and to characterize their parameters,\nso we can do all the proofs in",
    "start": "2132900",
    "end": "2141660"
  },
  {
    "text": "half an hour here. And they're not so bad. In terms of the parameters n,\nk, d, the Reed-Muller codes,",
    "start": "2141660",
    "end": "2151060"
  },
  {
    "text": "up to length 32, are the best\nones we know of, at least for their parameters.",
    "start": "2151060",
    "end": "2157720"
  },
  {
    "text": "There is no 32, 16 code that's\nbetter than a 32, 16, eight",
    "start": "2157720",
    "end": "2163690"
  },
  {
    "text": "Reed-Muller code. There's no 32k, eight code that\nhas k greater than 16,",
    "start": "2163690",
    "end": "2170990"
  },
  {
    "text": "all those sorts of things. Actually, I'm not 100%\nsure of that.",
    "start": "2170990",
    "end": "2177059"
  },
  {
    "text": "So for short block lengths,\nthey're as good as BCH codes,",
    "start": "2177060",
    "end": "2183620"
  },
  {
    "text": "or any of the codes that were\ndiscovered subsequently. For even longer lengths, up to\n64, 128, 256, they are going",
    "start": "2183620",
    "end": "2197790"
  },
  {
    "text": "to be slightly sub-optimal in\nterms of n, k, d, as we'll see in some cases.",
    "start": "2197790",
    "end": "2204080"
  },
  {
    "text": "But they still are very good\ncodes to look at in terms of performance versus complexity.",
    "start": "2204080",
    "end": "2210460"
  },
  {
    "text": "The decoding algorithm that\nI'm going to talk about eventually for them is a\ntrellis-based decoding",
    "start": "2210460",
    "end": "2215690"
  },
  {
    "text": "algorithm, and a maximum\nlikelihood decoding algorithm within.",
    "start": "2215690",
    "end": "2222230"
  },
  {
    "text": "They can be maximum likelihood\ndecoded very simply by these trellis-based algorithms.",
    "start": "2222230",
    "end": "2229700"
  },
  {
    "text": "And that's not true of more\nelaborate classes of codes.",
    "start": "2229700",
    "end": "2234880"
  },
  {
    "text": "So from a performance versus\ncomplexity point of view, they're still good codes to look\nat for block lengths up",
    "start": "2234880",
    "end": "2240710"
  },
  {
    "text": "to 100, 200. As we get up to higher block\nlengths, then we'll be talking about much more random-like,\nnon-algebraic codes in the",
    "start": "2240710",
    "end": "2248560"
  },
  {
    "text": "final section of the course. This is the way you actually\nget to pass it. You don't worry about n, k, d.",
    "start": "2248560",
    "end": "2254210"
  },
  {
    "text": "Right now, we're talking about\nmoderate complexity, moderate performance.",
    "start": "2254210",
    "end": "2259309"
  },
  {
    "text": "OK, so they were invented in\n1954 independently by Irving",
    "start": "2259310",
    "end": "2267690"
  },
  {
    "text": "Reed and, I think it was, David\nMuller, D. Muller, in",
    "start": "2267690",
    "end": "2273050"
  },
  {
    "text": "two separate papers,\nwhich shows they weren't too hard to find. As you'll see, they're very\neasy to construct.",
    "start": "2273050",
    "end": "2279740"
  },
  {
    "text": " They're basically based on a\nlength-doubling construction.",
    "start": "2279740",
    "end": "2288490"
  },
  {
    "text": " So we start off with codes\nof length or length 2.",
    "start": "2288490",
    "end": "2298780"
  },
  {
    "text": "And then from that, we build up\ncodes of length 4, 8, 16,",
    "start": "2298780",
    "end": "2306040"
  },
  {
    "text": "32, and so forth. So in general, their lengths are\nequal to a power of 2, and",
    "start": "2306040",
    "end": "2313119"
  },
  {
    "text": "m is the parameter that denotes\nthe power of 2.",
    "start": "2313120",
    "end": "2319080"
  },
  {
    "text": "So we only get certain block\nlengths, which are equal to powers of 2.",
    "start": "2319080",
    "end": "2326130"
  },
  {
    "text": "They have a second parameter, r,\nwhose significance is that",
    "start": "2326130",
    "end": "2331490"
  },
  {
    "text": "d is 2 to the m minus r for 0,\nless than or equal to r, less",
    "start": "2331490",
    "end": "2342010"
  },
  {
    "text": "than or equal to m. Or some people, including me,\nare going to put the lower limit at minus 1, just to be\nable to include one more code",
    "start": "2342010",
    "end": "2351420"
  },
  {
    "text": "in this family at each length. But this is just a\nmatter of taste. You'll see this is a very\nspecial case, the minus 1.",
    "start": "2351420",
    "end": "2361210"
  },
  {
    "text": "So let's guess what some of\nthese codes are going to be. So we have two parameters, m,\nwhich can be any integer 0 or",
    "start": "2361210",
    "end": "2373560"
  },
  {
    "text": "higher, so the lengths will be\n1,2,4, so forth, and r, which",
    "start": "2373560",
    "end": "2379250"
  },
  {
    "text": "goes basically from 0 to m,\nwhich means the distances will go from 2 to the m down to 1.",
    "start": "2379250",
    "end": "2393349"
  },
  {
    "text": " And what are some of the\nbasic codes that we're always going to find?",
    "start": "2393350",
    "end": "2399490"
  },
  {
    "text": " We always write Rm\nof little rm.",
    "start": "2399490",
    "end": "2406100"
  },
  {
    "text": "I'm not sure I completely\napprove of how the notation goes for these codes, but\nthat's the way it is.",
    "start": "2406100",
    "end": "2412870"
  },
  {
    "text": "So it's this notation. That means the Reed-Muller code\nwith the parameters m and",
    "start": "2412870",
    "end": "2419750"
  },
  {
    "text": "r is written Rm of r, m. All right.",
    "start": "2419750",
    "end": "2425030"
  },
  {
    "text": "So Rm of m, m, this is going\nto be a code of length 2 to",
    "start": "2425030",
    "end": "2431660"
  },
  {
    "text": "the m and distance 1. What do you suppose that's\ngoing to be?",
    "start": "2431660",
    "end": "2437810"
  },
  {
    "text": "This is always going to\nbe the 2 to the m 1.",
    "start": "2437810",
    "end": "2446110"
  },
  {
    "text": "Sorry, the distance is 1. So it's going to be the 2 to\nthe m, 1 universe code, in",
    "start": "2446110",
    "end": "2458230"
  },
  {
    "text": "other words, simply the set of\nall 2 to the m-tuples, which",
    "start": "2458230",
    "end": "2467420"
  },
  {
    "text": "has Hamming distance 1. OK.",
    "start": "2467420",
    "end": "2473350"
  },
  {
    "text": "RM of 0, m, what's\nthat going to be?",
    "start": "2473350",
    "end": "2483170"
  },
  {
    "text": "This is a code now that has\nlength 2 to the m and minimum distance 2 to the m.",
    "start": "2483170",
    "end": "2489660"
  },
  {
    "text": "We know what that has to be. It has to be the 2 to the m, 1,\n2 to the m repetition code,",
    "start": "2489660",
    "end": "2499980"
  },
  {
    "text": "a very low-rate code,\ndimension one. OK. ",
    "start": "2499980",
    "end": "2507529"
  },
  {
    "text": "And then if we like, we can\ngo one step further. There is a code below\nthis code.",
    "start": "2507530",
    "end": "2514290"
  },
  {
    "text": "This is the highest-rate\ncode you can get. This, however, is not the\nlowest-rate code you can get.",
    "start": "2514290",
    "end": "2519550"
  },
  {
    "text": "What's the lowest rate code\nof length 2 to the m?",
    "start": "2519550",
    "end": "2527580"
  },
  {
    "text": "Well, it's one that has\ndimension zero and minimum distance infinity.",
    "start": "2527580",
    "end": "2534960"
  },
  {
    "text": "And I don't think I ever defined\nthis convention. But for the trivial code that\nconsists of simply the all-0",
    "start": "2534960",
    "end": "2540859"
  },
  {
    "text": "word, what's it's minimum\ndistance? Undefined, or infinity,\nif you like.",
    "start": "2540860",
    "end": "2546720"
  },
  {
    "text": "So this is the trivial code. ",
    "start": "2546720",
    "end": "2552540"
  },
  {
    "text": "So if we want, we can include\nthe trivial code in this family just by defining\nit like this.",
    "start": "2552540",
    "end": "2559370"
  },
  {
    "text": "And it works for some things. It doesn't work for\nall things. It doesn't work for\nd, for instance.",
    "start": "2559370",
    "end": "2567030"
  },
  {
    "text": "This definition holds only\nfor r between 0 and m. It doesn't hold for r equals\nminus 1, because there the",
    "start": "2567030",
    "end": "2574080"
  },
  {
    "text": "distance is infinite. OK, so let's start out and\nget even more explicit.",
    "start": "2574080",
    "end": "2585530"
  },
  {
    "text": "We want to start with\nm equals 0. In that case, we have only Rm of\n0, 0, and Rm of minus 1, 0.",
    "start": "2585530",
    "end": "2597140"
  },
  {
    "text": "And this is going to be the\none by either of these.",
    "start": "2597140",
    "end": "2602589"
  },
  {
    "text": "The universe code is equal\nto the repetition code. It's the 1, 1, 1 code.",
    "start": "2602590",
    "end": "2609210"
  },
  {
    "text": "And this is the 1,\n0, infinity code. And that's really the only two\ncodes that you can think of",
    "start": "2609210",
    "end": "2616960"
  },
  {
    "text": "that have length 1, right? This is the one that consists\nof 0 and 1, and this is the",
    "start": "2616960",
    "end": "2624310"
  },
  {
    "text": "one that consists of 0. I don't think there are any\nother binary linear block",
    "start": "2624310",
    "end": "2629349"
  },
  {
    "text": "codes of length 1. So that's a start, not\nvery interesting.",
    "start": "2629350",
    "end": "2637210"
  },
  {
    "text": "Let's go up to length 2. So m is going to\nbe equal to 1.",
    "start": "2637210",
    "end": "2642670"
  },
  {
    "text": "Here, Rm of 1, 1 is going\nto be length 2.",
    "start": "2642670",
    "end": "2649299"
  },
  {
    "text": "And it's going to be the\nuniverse code, so it's only going to have distance 1.",
    "start": "2649300",
    "end": "2654650"
  },
  {
    "text": "Rm of 0, 1 is going to be length\n2, but it's going to be",
    "start": "2654650",
    "end": "2659799"
  },
  {
    "text": "the repetition code. And Rm of minus 1, 1 is going\nto be 2, 0, infinity.",
    "start": "2659800",
    "end": "2673010"
  },
  {
    "text": "OK, so there are really the\nonly three sensible codes of length 2.",
    "start": "2673010",
    "end": "2678650"
  },
  {
    "text": "This is the only one\nof dimension two. This is the only one\nof dimension zero. There are other ones of\ndimension one, but they don't",
    "start": "2678650",
    "end": "2684880"
  },
  {
    "text": "have minimum distance 2, so\nthey're not very good for coding purposes. So this kind of lists all the\ngood coding codes of length 2.",
    "start": "2684880",
    "end": "2692950"
  },
  {
    "text": " All right. So now let me introduce the\nlength-doubling construction.",
    "start": "2692950",
    "end": "2702920"
  },
  {
    "text": " Let me make the point, first of\nall, that all these codes",
    "start": "2702920",
    "end": "2708630"
  },
  {
    "text": "are nested. What does that mean? That means that his code is a\nsub-code of this code, which",
    "start": "2708630",
    "end": "2715330"
  },
  {
    "text": "is a sub-code of this code. And that's going to be, in\ngeneral, a property of Reed-Muller codes.",
    "start": "2715330",
    "end": "2721720"
  },
  {
    "text": "We're going to get a family. And each lower one is going\nto be a sub-code of the next-higher one, which is going\nto be easy to prove",
    "start": "2721720",
    "end": "2730640"
  },
  {
    "text": "recursively. All right. This is the key thing to know\nabout Reed-Muller codes, how",
    "start": "2730640",
    "end": "2738100"
  },
  {
    "text": "do you construct them. Once you understand the\nconstruction, then you can",
    "start": "2738100",
    "end": "2744740"
  },
  {
    "text": "derive all the properties. It's called the u, u plus v construction for obvious reasons.",
    "start": "2744740",
    "end": "2753770"
  },
  {
    "text": "Apparently, Plotkin was the\nfirst person to show this.",
    "start": "2753770",
    "end": "2759870"
  },
  {
    "text": "I think Reed and Muller had two\ndifferent constructions, and neither one of them was the\nu, u plus v construction.",
    "start": "2759870",
    "end": "2766630"
  },
  {
    "text": "Reed, in particular, talked\nabout Boolean functions. ",
    "start": "2766630",
    "end": "2772824"
  },
  {
    "text": "All right. But this is the way I recommend\nyou to think about constructing them.",
    "start": "2772824",
    "end": "2779599"
  },
  {
    "text": "And it's simply defined\nas follows. We assume we've already\nconstructed the Reed-Muller",
    "start": "2779600",
    "end": "2789660"
  },
  {
    "text": "codes of length m minus 1. It's a recursive parameter,\nm minus 1. Now we're going to construct all\nthe Reed-Muller codes of",
    "start": "2789660",
    "end": "2797099"
  },
  {
    "text": "parameter m of length\n2 to the m. How are we going to do it? ",
    "start": "2797100",
    "end": "2805600"
  },
  {
    "text": "We want to construct\nRm of r, m.",
    "start": "2805600",
    "end": "2811780"
  },
  {
    "text": "And we'll say it's the set of\nall code words which consist",
    "start": "2811780",
    "end": "2816790"
  },
  {
    "text": "of two halves, a pair of\nn-tuples of half the length.",
    "start": "2816790",
    "end": "2822670"
  },
  {
    "text": " so the two halves are going to\nbe u and u plus v, where I",
    "start": "2822670",
    "end": "2832200"
  },
  {
    "text": "choose u and u plus\nv as follows. u is in Rm of r minus 1, m.",
    "start": "2832200",
    "end": "2845170"
  },
  {
    "text": " And so what does that mean?",
    "start": "2845170",
    "end": "2850780"
  },
  {
    "text": "Sorry, it's got to\nbe m minus 1.",
    "start": "2850780",
    "end": "2856930"
  },
  {
    "text": "So it's got to be\nhalf the length. Is that right? r m minus\n1, v is in Rm of r",
    "start": "2856930",
    "end": "2866579"
  },
  {
    "text": "minus 1, m minus 1. Somebody who has the notes,\nlike my valuable teaching",
    "start": "2866580",
    "end": "2872560"
  },
  {
    "text": "assistant, might check whether\nI got it right or not. Let's see. What are going to be the\nparameters of these codes?",
    "start": "2872560",
    "end": "2879320"
  },
  {
    "text": "They both have n equals\n2 to the m minus 1. The distance here is 2 to the m\nminus 1 minus r minus 1, so",
    "start": "2879320",
    "end": "2888140"
  },
  {
    "text": "the distance here is 2 to the\nm minus r, which is the distance that we want to\nachieve for this code.",
    "start": "2888140",
    "end": "2895170"
  },
  {
    "text": " And the distance here is 2 to\nthe m minus r minus 1, which",
    "start": "2895170",
    "end": "2902910"
  },
  {
    "text": "is half the distance we want\nto achieve for this code. So we reach down, if we wanted\nto construct now a code of",
    "start": "2902910",
    "end": "2910690"
  },
  {
    "text": "length four and distance two,\nwe would construct it from",
    "start": "2910690",
    "end": "2915900"
  },
  {
    "text": "these two codes, the one of half\nthe length with distance 2, and the one of half the\nlength with half the distance,",
    "start": "2915900",
    "end": "2922470"
  },
  {
    "text": "distance 1. So we would somehow use this to\nget a code of length 4 and",
    "start": "2922470",
    "end": "2929640"
  },
  {
    "text": "distance 2. And we don't know\nyet what k is.",
    "start": "2929640",
    "end": "2935109"
  },
  {
    "text": "OK. So we're going to use these\ntwo codes to construct a larger code.",
    "start": "2935110",
    "end": "2941090"
  },
  {
    "text": "Is the construction clear? ",
    "start": "2941090",
    "end": "2947320"
  },
  {
    "text": "All right.  So let's now derive some\nproperties from this",
    "start": "2947320",
    "end": "2956650"
  },
  {
    "text": "construction, and from the fact\nthat we've started from a set of codes.",
    "start": "2956650",
    "end": "2962030"
  },
  {
    "text": "Let's say we start from\nlength two codes. Or we could start\nfrom length one. You could satisfy yourself that\nthis construction applied",
    "start": "2962030",
    "end": "2969760"
  },
  {
    "text": "to the length one codes gives\nthe length two codes. I won't go through\nthat exercise. So we have some set of\ncodes, m minus 1.",
    "start": "2969760",
    "end": "2980420"
  },
  {
    "text": "What's the first thing\nwe notice? ",
    "start": "2980420",
    "end": "2985530"
  },
  {
    "text": "Obviously, the length is what\nwe want, because we've put",
    "start": "2985530",
    "end": "2991510"
  },
  {
    "text": "together two 2-to-the-m minus\n1-tuples, and 2 times 2 to the m minus 1 is 2 to the m.",
    "start": "2991510",
    "end": "2997569"
  },
  {
    "text": "So we've constructed a set\nof 2-to-the-m-tuples. The length of the resulting\ncode is 2 to the m.",
    "start": "2997570",
    "end": "3006349"
  },
  {
    "text": "This is Rm r, m, constructed\nin this way.",
    "start": "3006350",
    "end": "3012360"
  },
  {
    "text": " Second, it's linear.",
    "start": "3012360",
    "end": "3020430"
  },
  {
    "text": "It's a linear code. All we have to check is\nthe group property. If we add two code words of this\nform, we're going to get",
    "start": "3020430",
    "end": "3027680"
  },
  {
    "text": "another code word of that form,\nfrom the fact that these guys are linear, yes.",
    "start": "3027680",
    "end": "3035420"
  },
  {
    "text": "OK. So it is a linear code,\nthat's important.",
    "start": "3035420",
    "end": "3040940"
  },
  {
    "text": "Then we might ask, what's\nits dimension? How many code words are there? ",
    "start": "3040940",
    "end": "3047820"
  },
  {
    "text": "Well, do I get a unique code\nword for every combination of u and v. And however you want\nto convince yourself, you",
    "start": "3047820",
    "end": "3063390"
  },
  {
    "text": "obviously do. If I'm given this word here, I\ncan deduce from it what was u,",
    "start": "3063390",
    "end": "3069960"
  },
  {
    "text": "that's simply the first\nhalf of it. Subtract u from the second\nhalf of it, and I find out what v is.",
    "start": "3069960",
    "end": "3075650"
  },
  {
    "text": "So there's a one-to-one map\nbetween all possible pairs, u, v, and all possible\nnew code words.",
    "start": "3075650",
    "end": "3082859"
  },
  {
    "text": "And so what that means is, let\nme call it the dimension of",
    "start": "3082860",
    "end": "3087910"
  },
  {
    "text": "the code with parameters r,\nm is simply the sum of the dimensions of the codes with\nparameters r, m minus 1 and r",
    "start": "3087910",
    "end": "3102799"
  },
  {
    "text": "minus 1, m minus 1. So for instance, in this\nhypothesized code here, if I",
    "start": "3102800",
    "end": "3110670"
  },
  {
    "text": "want to know the dimension,\nwell, I take all possible combinations of words\nhere and words here.",
    "start": "3110670",
    "end": "3116210"
  },
  {
    "text": "How many are there? There are eight. It has dimension three. So I'm going to get a 4, 3, 2,\ncode, which it's not too hard",
    "start": "3116210",
    "end": "3124410"
  },
  {
    "text": "to see is the single parity\ncheck code of length 4. All right. ",
    "start": "3124410",
    "end": "3130470"
  },
  {
    "text": "So that's how I do it. I simply add up the dimensions\nof the two contributing codes. ",
    "start": "3130470",
    "end": "3139540"
  },
  {
    "text": "Not a very nice formula. In the homework, you do a\ncombinatoric exercise that",
    "start": "3139540",
    "end": "3145160"
  },
  {
    "text": "gives you a somewhat more closed\nform of the formula. But I think this is actually\nthe most useful one.",
    "start": "3145160",
    "end": "3151950"
  },
  {
    "text": "In any case, we eventually get\na table that shows what all these things are anyway. ",
    "start": "3151950",
    "end": "3159850"
  },
  {
    "text": "Now, just as a fine point, I\nwant to assert that if I start",
    "start": "3159850",
    "end": "3165630"
  },
  {
    "text": "out from a set of nested codes,\nthen I come up with a",
    "start": "3165630",
    "end": "3170890"
  },
  {
    "text": "set of nested codes, at the\nnext highest level. That, again, is sort\nof obvious.",
    "start": "3170890",
    "end": "3176940"
  },
  {
    "text": "If these guys were nested, then\nI get the appropriate -- if I take u, u plus v\nfrom sub-codes, I'm",
    "start": "3176940",
    "end": "3185359"
  },
  {
    "text": "going to get a sub-code.  Look at the notes if you want\nmore than that little bit of",
    "start": "3185360",
    "end": "3192299"
  },
  {
    "text": "hand-waving. OK, that's something I need\nfor the next thing.",
    "start": "3192300",
    "end": "3200490"
  },
  {
    "text": "I want to find out what d is. ",
    "start": "3200490",
    "end": "3208080"
  },
  {
    "text": "What's the minimum\ndistance here? Of course, my objective is\nto make it equal to 2",
    "start": "3208080",
    "end": "3214010"
  },
  {
    "text": "to the m minus r. Did I succeed? What are the possibilities\nfor u, u plus v?",
    "start": "3214010",
    "end": "3220619"
  },
  {
    "text": "The possibilities are that\nthey're both 0, or that this one is 0 and this is not equal\nto 0, or this is not equal to",
    "start": "3220620",
    "end": "3229460"
  },
  {
    "text": "0 and this is 0, or that they're\nboth not equal to 0. And I'm going to consider\nthose four cases.",
    "start": "3229460",
    "end": "3236635"
  },
  {
    "text": " Since every linear code include\nthe all-0 word, it's",
    "start": "3236635",
    "end": "3244119"
  },
  {
    "text": "certainly possible that this\ncomes out at 0, 0. The only possibility for this\nto come out 0, 0 is if I",
    "start": "3244120",
    "end": "3250590"
  },
  {
    "text": "choose u equals 0. Then I have to choose\nv equals 0. So there's one-code word of\nweight 0 in my new code.",
    "start": "3250590",
    "end": "3257840"
  },
  {
    "text": "But that's OK. If there were two code words\nwith weight 0, well, then the",
    "start": "3257840",
    "end": "3264700"
  },
  {
    "text": "dimension would be wrong. This is in effect a proof that\nthe kernel is just 0, 0.",
    "start": "3264700",
    "end": "3270170"
  },
  {
    "text": "And so the dimension is OK. It's a one-to-one map. All right. So I don't really have\nto worry about that.",
    "start": "3270170",
    "end": "3279140"
  },
  {
    "text": "I'm going to get one all-0\nword in my new code. I can afford one all-0 word. I'm always going to have\nto have it anyway.",
    "start": "3279140",
    "end": "3286490"
  },
  {
    "text": "It's linear. All right, so these are the\nmore interesting cases. Suppose the first half is 0, but\nthe second half is not 0.",
    "start": "3286490",
    "end": "3295029"
  },
  {
    "text": "That implies that u is 0. That implies that the second\nhalf is just v,",
    "start": "3295030",
    "end": "3302730"
  },
  {
    "text": "which is not 0. So v must be a non-zero code\nword in this code, which has",
    "start": "3302730",
    "end": "3308340"
  },
  {
    "text": "minimum distance 2\nto the n minus r. So in this case, I prove that\nthe distance is greater than",
    "start": "3308340",
    "end": "3317228"
  },
  {
    "text": "or equal to 2 to\nthe m minus r. Similarly, suppose this one\nis not 0, but this is 0.",
    "start": "3317228",
    "end": "3325059"
  },
  {
    "text": "OK, if that's 0, it can only be\nbecause I chose u equal to some v. and that means the first\nhalf, then, is that v.",
    "start": "3325060",
    "end": "3336260"
  },
  {
    "text": "So again, v is in this\ncode that has enough minimum distance.",
    "start": "3336260",
    "end": "3342089"
  },
  {
    "text": "So in this case, I proved that\nthe code word has weight 2 to",
    "start": "3342090",
    "end": "3347560"
  },
  {
    "text": "the m minus r.  And finally, let's take\nthe case where",
    "start": "3347560",
    "end": "3352760"
  },
  {
    "text": "they're both non-zero. In that case, u could be an\narbitrary word in this code",
    "start": "3352760",
    "end": "3359570"
  },
  {
    "text": "which only has distance\n2 to the m r minus 1. So the first half is going to\nhave weight at least 2 to the",
    "start": "3359570",
    "end": "3367210"
  },
  {
    "text": "m minus r minus 1, but\nthat's all I can say about the first half. But now the second half,\nwhat is this?",
    "start": "3367210",
    "end": "3375815"
  },
  {
    "text": " This is a higher-rate\ncode than this.",
    "start": "3375815",
    "end": "3382050"
  },
  {
    "text": "This, by the nesting property,\nis a sub-code of this. So if I add a word in a sub-code\nto a word in the",
    "start": "3382050",
    "end": "3391510"
  },
  {
    "text": "code, I'm going to get another\nword in this code. So u plus v is still in this\nReed-Muller code, still has a",
    "start": "3391510",
    "end": "3399950"
  },
  {
    "text": "minimum weight, if it's\nnon-zero, of 2 to the m minus r minus 1.",
    "start": "3399950",
    "end": "3405015"
  },
  {
    "text": " So the distance is at least this\nin the first half, this",
    "start": "3405015",
    "end": "3411650"
  },
  {
    "text": "in the second half. And that's, of course,\nstill good enough. ",
    "start": "3411650",
    "end": "3419230"
  },
  {
    "text": "OK. So by this construction. I've assured that I'm going to\nget a d greater than or equal",
    "start": "3419230",
    "end": "3428370"
  },
  {
    "text": "to 2 to the m minus r. And of course, you can easily\nfind cases of equality, where",
    "start": "3428370",
    "end": "3433990"
  },
  {
    "text": "it's only 2 to the m minus r. If this has a word of weight 2\nto the m minus r, then you can",
    "start": "3433990",
    "end": "3440839"
  },
  {
    "text": "clearly set up one like\nthis that has weight 2 to the m minus r. Just pick one of the\nminimum-weight code words as",
    "start": "3440840",
    "end": "3448430"
  },
  {
    "text": "v, and u as 0. So the minimum distance\nis 2 to the m minus r.",
    "start": "3448430",
    "end": "3453460"
  },
  {
    "text": " All righty.",
    "start": "3453460",
    "end": "3459630"
  },
  {
    "text": "So those are all the\nproperties we need. And then, I like to display\nthese properties in a tableau",
    "start": "3459630",
    "end": "3472200"
  },
  {
    "text": "which you have in the notes,\nwhich goes as follows.",
    "start": "3472200",
    "end": "3477255"
  },
  {
    "text": " Let's just start listing\nthese codes.",
    "start": "3477255",
    "end": "3482670"
  },
  {
    "text": "Here are the length 1 ones. We only found 2 of them, 1,\n1, 1, and 1, 0, infinity.",
    "start": "3482670",
    "end": "3494370"
  },
  {
    "text": "So there are two codes\nof length 1. Now it turns out that if you\ncombine these according to the",
    "start": "3494370",
    "end": "3501790"
  },
  {
    "text": "u, u plus v construction, you\nget 2, 1, 2, where the weight",
    "start": "3501790",
    "end": "3517570"
  },
  {
    "text": "2, 1 is just the -- you take the first half is 1,\nand the second half is 1.",
    "start": "3517570",
    "end": "3525710"
  },
  {
    "text": "So you can build this\nin the same way. And similarly, we can say just\nby definition, we're always",
    "start": "3525710",
    "end": "3533110"
  },
  {
    "text": "going to put a universe code at\nthe top and a trivial code",
    "start": "3533110",
    "end": "3540600"
  },
  {
    "text": "at the bottom. So now I've listed all\nmy Reed-Muller codes with length 2.",
    "start": "3540600",
    "end": "3546520"
  },
  {
    "text": "Now to construct the\nones of length 4.",
    "start": "3546520",
    "end": "3551850"
  },
  {
    "text": "Again, I'll put a universe code\nat the top, a trivial code at the bottom.",
    "start": "3551850",
    "end": "3558859"
  },
  {
    "text": "I'll use my construction now to\ncreate a 4, 3, 2 code here.",
    "start": "3558860",
    "end": "3567030"
  },
  {
    "text": "I'm just using all\nthese properties. And down here, my construction,\nwhen you combine",
    "start": "3567030",
    "end": "3576500"
  },
  {
    "text": "these two things, you always\nget a repetition code, again, 4, 1, 4.",
    "start": "3576500",
    "end": "3582549"
  },
  {
    "text": "And I guess I've hand-waved. Exercise for the student,\nprove that combining a",
    "start": "3582550",
    "end": "3589980"
  },
  {
    "text": "repetition code with a trivial\ncode under the u, u plus v construction always gives a\ndouble length repetition code.",
    "start": "3589980",
    "end": "3597230"
  },
  {
    "text": " It's clear.",
    "start": "3597230",
    "end": "3603340"
  },
  {
    "text": "v is always the all-0 word. u is either all-0 or all-1.",
    "start": "3603340",
    "end": "3610220"
  },
  {
    "text": "So we get two words, one of\nwhich is all-0, and one of which is all-1, double length.",
    "start": "3610220",
    "end": "3618150"
  },
  {
    "text": "All right. So now I can just go on\nindefinitely, and without a",
    "start": "3618150",
    "end": "3624590"
  },
  {
    "text": "great deal of effort. Here I find that k is 7, just by\nadding up these two things.",
    "start": "3624590",
    "end": "3632710"
  },
  {
    "text": "The 8, this gives me an 8, 4. 4 code.",
    "start": "3632710",
    "end": "3639740"
  },
  {
    "text": "This gives me an 8. 1, 8 code, and similarly\ndown here.",
    "start": "3639740",
    "end": "3648740"
  },
  {
    "text": "And this, I now just\nturn the crank. 16, 16, 1.",
    "start": "3648740",
    "end": "3654390"
  },
  {
    "text": "I always put that on top. The next one is 16, 15, 2. Next one is 16, 11, 4.",
    "start": "3654390",
    "end": "3664185"
  },
  {
    "text": " After a while, you don't know\nwhat you're going to get.",
    "start": "3664185",
    "end": "3672090"
  },
  {
    "text": "But you get something. You've proved that all of\nthese codes exist, that",
    "start": "3672090",
    "end": "3677630"
  },
  {
    "text": "they're all linear. They all have the n, k, d that\nwe've specified, and that",
    "start": "3677630",
    "end": "3686270"
  },
  {
    "text": "furthermore, they're nested. And a final property, which you\nmight suspect, looking at",
    "start": "3686270",
    "end": "3692590"
  },
  {
    "text": "these tables, is that the dual\nof a Reed-Muller code is also",
    "start": "3692590",
    "end": "3700860"
  },
  {
    "text": "a Reed-Muller code. And they're paired up according\nto k and n minus k. Let's see.",
    "start": "3700860",
    "end": "3705900"
  },
  {
    "text": "15 and 11 is 26. 11 and five is 16.",
    "start": "3705900",
    "end": "3711882"
  },
  {
    "start": "3711883",
    "end": "3717770"
  },
  {
    "text": "5 and 1 is 6. And 32, 1, 32, and so forth.",
    "start": "3717770",
    "end": "3725805"
  },
  {
    "text": " Did you see how I proved that\nall these codes exist?",
    "start": "3725805",
    "end": "3731345"
  },
  {
    "text": " And if I continued, I could get\narbitrarily long codes,",
    "start": "3731345",
    "end": "3737760"
  },
  {
    "text": "one of your simple homework\nproblems is just to do this, continue this for 64\nand 128, see what",
    "start": "3737760",
    "end": "3744640"
  },
  {
    "text": "additional codes you get.  And so I now have this infinite\nfamily it of that",
    "start": "3744640",
    "end": "3752700"
  },
  {
    "text": "kind of covers the space n, k,\nd in some sort of sparse way.",
    "start": "3752700",
    "end": "3758750"
  },
  {
    "text": "But it indicates how\nk and d go with n. And we come back to our original\nquestion, how well",
    "start": "3758750",
    "end": "3764809"
  },
  {
    "text": "can we do with binary\nlinear block codes. Well, here's some binary linear\nblock codes, pretty",
    "start": "3764810",
    "end": "3770650"
  },
  {
    "text": "close to the best we\ncan find, actually. The ones I've listed\nup here are all as good as we can find.",
    "start": "3770650",
    "end": "3776319"
  },
  {
    "text": "And how well can we do? Really, we don't need to know\nmuch to evaluate the",
    "start": "3776320",
    "end": "3783010"
  },
  {
    "text": "performance of, say, 32, 6, 8\ncode, which is now getting to be a pretty substantial code,\nwith 2 to the 16 code words,",
    "start": "3783010",
    "end": "3792250"
  },
  {
    "text": "to 65,536 code words.",
    "start": "3792250",
    "end": "3797750"
  },
  {
    "text": "So we built a fairly sizable\nconstellation here in a 32-dimensional Euclidean\nspace.",
    "start": "3797750",
    "end": "3804000"
  },
  {
    "text": "And how good is it? Let's take 32, 16, 8.",
    "start": "3804000",
    "end": "3809710"
  },
  {
    "text": " Can I graph its probability\nof error per bit, a",
    "start": "3809710",
    "end": "3820840"
  },
  {
    "text": "good estimate of it? Can I? Is there any information\nI'm lacking?",
    "start": "3820840",
    "end": "3826869"
  },
  {
    "start": "3826870",
    "end": "3832090"
  },
  {
    "text": "OK, I've been talking too long,\nbecause when I go to the",
    "start": "3832090",
    "end": "3837390"
  },
  {
    "text": "class, I'd like a\nlittle response. So you were going to\nsay something? AUDIENCE: We don't\nhave [INAUDIBLE].",
    "start": "3837390",
    "end": "3845480"
  },
  {
    "text": "PROFESSOR: OK, let me tell you\nthat the n, d is approximately",
    "start": "3845480",
    "end": "3852950"
  },
  {
    "text": "600-something, so\nlet's say 630.",
    "start": "3852950",
    "end": "3859225"
  },
  {
    "text": "It's probably not\nexactly correct. In the notes I give a\nformula for n, d --",
    "start": "3859226",
    "end": "3865578"
  },
  {
    "text": "a formula that I don't\nderive, that is known for Reed-Muller codes.",
    "start": "3865578",
    "end": "3870960"
  },
  {
    "text": "And from that, you can compute\nn, d for any of these codes. This parameter is m, r.",
    "start": "3870960",
    "end": "3877869"
  },
  {
    "text": "All right. So I'll give you n, d as well. Now can I get the good estimate\nfor the probability",
    "start": "3877870",
    "end": "3885535"
  },
  {
    "text": "of error per bit? How do I do that? ",
    "start": "3885535",
    "end": "3894380"
  },
  {
    "text": "Union-bound estimate. All right, so what's it\ngoing to look like? What are the two subsidiary\nparameters I need?",
    "start": "3894380",
    "end": "3903471"
  },
  {
    "text": "One is the coding gain, right? What is the nominal coding gain\nof this 32, 16, 8 code?",
    "start": "3903471",
    "end": "3910355"
  },
  {
    "text": " Come on, this is not a difficult\ncomputation.",
    "start": "3910355",
    "end": "3916964"
  },
  {
    "text": " OK, what's k over n?",
    "start": "3916965",
    "end": "3924510"
  },
  {
    "text": "1/2? I think we can all\ndo that one.",
    "start": "3924510",
    "end": "3929779"
  },
  {
    "text": "What's the nominal\ncoding gain? Take 1/2 times d, 8.",
    "start": "3929780",
    "end": "3935820"
  },
  {
    "text": "So now our coding gain is\n4, which is what in dB?",
    "start": "3935820",
    "end": "3941440"
  },
  {
    "text": "6 dB. Wow, gee whiz. I've already got a nominal\ncoding gain of 6 dB.",
    "start": "3941440",
    "end": "3949280"
  },
  {
    "text": "Remember, my whole gap was,\ndepending on how I measured it, 9 or 10 or 11 dB.",
    "start": "3949280",
    "end": "3954510"
  },
  {
    "text": "This looks like already a\nsizable fraction of the gap, with just a simple\nconstruction.",
    "start": "3954510",
    "end": "3960660"
  },
  {
    "text": "Well, we better pay attention\nto this error coefficient as well, or the number of\nnearest neighbors.",
    "start": "3960660",
    "end": "3966940"
  },
  {
    "text": "Kb is, let's just take a rough\nestimate here, what's this",
    "start": "3966940",
    "end": "3974260"
  },
  {
    "text": "going to be?  About 40.",
    "start": "3974260",
    "end": "3979345"
  },
  {
    "text": "That's good. It's just this divided by 16.",
    "start": "3979345",
    "end": "3985090"
  },
  {
    "text": "So there are about 40 nearest\nneighbors per bit. How much is that going\nto cost us? ",
    "start": "3985090",
    "end": "3993820"
  },
  {
    "text": "Not so good. Well, it's a little bit more\nthan 5 factors of 2. ",
    "start": "3993820",
    "end": "3999839"
  },
  {
    "text": "Maybe 5 and a 1/2 factors. It's less than 5 and a 1/2. So this very roughly,\nsomething will",
    "start": "3999840",
    "end": "4007760"
  },
  {
    "text": "cost me about 1 dB. ",
    "start": "4007760",
    "end": "4013850"
  },
  {
    "text": "And so I get an effective\ncoding gain of 5 dB.",
    "start": "4013850",
    "end": "4020180"
  },
  {
    "text": "That's my first very\ngross estimate. All right, well,\nit's not 6 dB.",
    "start": "4020180",
    "end": "4025630"
  },
  {
    "text": "It's only 5 dB. That's still not bad. Again, if I really wanted to\nknow what this was, I would",
    "start": "4025630",
    "end": "4034130"
  },
  {
    "text": "write this out as 40 or whatever\nit is times Q to the square root of four times\n2Eb over N_0.",
    "start": "4034130",
    "end": "4043140"
  },
  {
    "text": " And can I plot that quantity?",
    "start": "4043140",
    "end": "4051170"
  },
  {
    "text": "Yes, if I have MATLAB. Or actually, all I need\nis my baseline.",
    "start": "4051170",
    "end": "4058900"
  },
  {
    "text": "So if this is my baseline, which\nwent through 9.6 dB at",
    "start": "4058900",
    "end": "4070339"
  },
  {
    "text": "10 to the minus 5, then we\nremember how to plot that. I just take this whole curve\nbodily, and I move",
    "start": "4070340",
    "end": "4077900"
  },
  {
    "text": "it 6 dB to the left. So I get the same curve, this\nis not very good, going",
    "start": "4077900",
    "end": "4087440"
  },
  {
    "text": "through 3.6 dB.  Sorry about that.",
    "start": "4087440",
    "end": "4093027"
  },
  {
    "text": "How's that? Get it way down here. But then I also have to raise\nit by a factor of 40.",
    "start": "4093028",
    "end": "4099098"
  },
  {
    "text": " So it really looks\nmore like that. That's really going to go more\nthrough about 4.6 dB or",
    "start": "4099099",
    "end": "4107370"
  },
  {
    "text": "something like that. That's what these calculations\nare, Ashish took",
    "start": "4107370",
    "end": "4113839"
  },
  {
    "text": "you through, I believe. And so while 6 dB was my\nnominal coding gain, my",
    "start": "4113840",
    "end": "4122199"
  },
  {
    "text": "effective coding gain is 5 dB. But still, hey, not bad. ",
    "start": "4122200",
    "end": "4130089"
  },
  {
    "text": "I have very easily been able to\nconstruct a code that gives you about 5 dB of coding gain.",
    "start": "4130090",
    "end": "4136673"
  },
  {
    "text": "Is there any fly in\nthis ointment? ",
    "start": "4136674",
    "end": "4143400"
  },
  {
    "text": "Can I just go out and\nbuild it now?  I need a decoder.",
    "start": "4143400",
    "end": "4150229"
  },
  {
    "text": "Who said that? Thank you. Good point. What's the decoding method\nassumed for this code?",
    "start": "4150229",
    "end": "4156580"
  },
  {
    "text": " Excuse me? AUDIENCE: Just a table\nright now.",
    "start": "4156580",
    "end": "4163239"
  },
  {
    "text": "PROFESSOR: Just a table,\nbased on what? I get some kind of received\nn-tuple, which is actually",
    "start": "4163240",
    "end": "4171790"
  },
  {
    "text": "just a random, some kind of\nvector in 32-dimensional space, 32 numbers,\nreal numbers.",
    "start": "4171790",
    "end": "4180660"
  },
  {
    "text": "And really, I'm assuming minimum\ndistance decoding.",
    "start": "4180660",
    "end": "4185818"
  },
  {
    "text": "So in principle, I want to\ncompute the distance to each of the 2 to the 1/6th,\n65,000 code words.",
    "start": "4185819",
    "end": "4193080"
  },
  {
    "text": "And actually, nowadays, you\nmight just do that. That's not a formidable task.",
    "start": "4193080",
    "end": "4200460"
  },
  {
    "text": "Back when I got into this\nbusiness, that would have been considered outrageous. But nowadays, you could keep\nup a pretty good decoding",
    "start": "4200460",
    "end": "4206610"
  },
  {
    "text": "rate, even doing 65,000 distance\ncomputations and just",
    "start": "4206610",
    "end": "4213210"
  },
  {
    "text": "finding the best one. That would do it. That would give you\nthis performance. ",
    "start": "4213210",
    "end": "4220030"
  },
  {
    "text": "But of course, we are going to\nbe looking for somewhat more efficient decoding schemes\nthan that.",
    "start": "4220030",
    "end": "4226150"
  },
  {
    "text": "All right. So at this point, that's the\nonly fly in the ointment. We have a way of getting this\nkind of error curve, provided",
    "start": "4226150",
    "end": "4236090"
  },
  {
    "text": "that we're willing to do\nexhaustive maximum likelihood or minimum distance decoding.",
    "start": "4236090",
    "end": "4241735"
  },
  {
    "text": " And furthermore, we\ncan continue.",
    "start": "4241735",
    "end": "4247680"
  },
  {
    "text": "It's also instructive to\nsee what happens as we let n go to infinity.",
    "start": "4247680",
    "end": "4252885"
  },
  {
    "text": "What are we going to get\nwith this construction? We pretty well know.",
    "start": "4252885",
    "end": "4258180"
  },
  {
    "text": "These are all going to be\nuniverse codes, which are not very interesting to us.",
    "start": "4258180",
    "end": "4264469"
  },
  {
    "text": "They all have a nominal\ncoding gain of one, and are just useless. They're basically just\nsend a bit 32 times,",
    "start": "4264470",
    "end": "4273219"
  },
  {
    "text": "send 32 bits, I mean. OK, what are these\ncodes along here?",
    "start": "4273220",
    "end": "4280360"
  },
  {
    "text": "Let me start there. These are all single\nparity check codes.",
    "start": "4280360",
    "end": "4286889"
  },
  {
    "text": "What's the nominal\ncoding gain? ",
    "start": "4286890",
    "end": "4292840"
  },
  {
    "text": "Well, as we get out here,\nwhat does the nominal coding gain approach? ",
    "start": "4292840",
    "end": "4298520"
  },
  {
    "text": "The code rate approaches 1. The code distance stays at 2.",
    "start": "4298520",
    "end": "4304790"
  },
  {
    "text": "So the nominal coding gain goes\nto 2 or 3 or dB, at a",
    "start": "4304790",
    "end": "4311800"
  },
  {
    "text": "rate of 1 or a nominal spectral\nefficiency of 2. ",
    "start": "4311800",
    "end": "4317460"
  },
  {
    "text": "OK. Well, these are totally\nsimple codes, single parity check codes.",
    "start": "4317460",
    "end": "4323045"
  },
  {
    "text": "And even with that, it looks\nlike we can get 3 dB of coding gain.",
    "start": "4323045",
    "end": "4328860"
  },
  {
    "text": "But what's the number of\nnearest neighbors here?",
    "start": "4328860",
    "end": "4334810"
  },
  {
    "text": "Number of nearest neighbors\nis just n, n minus 1 over 2, n choose 2.",
    "start": "4334810",
    "end": "4341320"
  },
  {
    "text": "So the number of even dividing\nby k, which is n minus 1, we",
    "start": "4341320",
    "end": "4348070"
  },
  {
    "text": "still get a Kb that goes\nup linearly with n.",
    "start": "4348070",
    "end": "4354030"
  },
  {
    "text": "So what's in fact going\nto happen to the effective coding gain? ",
    "start": "4354030",
    "end": "4363490"
  },
  {
    "text": "The nominal coding gain will\ngo up and reach an asymptote of 3 dB.",
    "start": "4363490",
    "end": "4368980"
  },
  {
    "text": "This is nominal coding gain. But somewhere out here, as this\nhas reached an asymptote,",
    "start": "4368980",
    "end": "4375590"
  },
  {
    "text": "the effective coding gain is\nalways going to be less, and it's going to have\nto bend over.",
    "start": "4375590",
    "end": "4381050"
  },
  {
    "text": "And according to our rule of\nthumb, it'll eventually go back through 0, because the\ncost just keeps going up",
    "start": "4381050",
    "end": "4390680"
  },
  {
    "text": "linearly in terms of Kb. So the effective coding\ngain is not as great. It has a peak for some n.",
    "start": "4390680",
    "end": "4401739"
  },
  {
    "text": "And so there's some maximum\neffective coding gain, which",
    "start": "4401740",
    "end": "4407310"
  },
  {
    "text": "again I've left for you\nas a homework problem, that's less than 3 dB.",
    "start": "4407310",
    "end": "4412420"
  },
  {
    "text": "And I'll give you a hint that\nit's of the order of 2 dB. ",
    "start": "4412420",
    "end": "4418140"
  },
  {
    "text": "It's pretty easy to work out in\nthe five minutes before the next class, not a difficult\nproblem to find out when this",
    "start": "4418140",
    "end": "4427410"
  },
  {
    "text": "thing reaches its maximum. But still, these are\nvery simple codes. We'll see in a second they\nhave an extremely simple",
    "start": "4427410",
    "end": "4434600"
  },
  {
    "text": "minimum distance decoding\nalgorithm called Wagner decoding. It's trivial, not hard to do\nminimum distance decoding for",
    "start": "4434600",
    "end": "4441489"
  },
  {
    "text": "these codes. And so, OK, not hard to get\n2 dB of coding gain.",
    "start": "4441490",
    "end": "4447400"
  },
  {
    "text": "What happens if we go along\nthis line here? These are all codes of\nminimum distance 4.",
    "start": "4447400",
    "end": "4453790"
  },
  {
    "text": "Again, start here. They're called extended\nHamming codes. A Hamming code has minimum\ndistance three and is suitable",
    "start": "4453790",
    "end": "4461270"
  },
  {
    "text": "for hard decisions, single\nerror correction. These codes all have minimum\ndistance four.",
    "start": "4461270",
    "end": "4466449"
  },
  {
    "text": "We've seen that it's always\nworthwhile to add an overall parity check to get an even\nminimum distance, if we're",
    "start": "4466450",
    "end": "4473440"
  },
  {
    "text": "looking at Euclidean\nspace coding gain. And so these are actually\nslightly better",
    "start": "4473440",
    "end": "4479219"
  },
  {
    "text": "than Hamming codes.  They're called extended Hamming\ncodes, because they're",
    "start": "4479220",
    "end": "4485620"
  },
  {
    "text": "Hamming codes extended by\na single parity check. They have one more unit\nof minimum distance.",
    "start": "4485620",
    "end": "4492190"
  },
  {
    "text": "So again, asymptotically,\nthese are called extended Hamming. The nominal coding gain\ngoes to what now?",
    "start": "4492190",
    "end": "4499490"
  },
  {
    "text": "This is, the rate is\nagain going to 1. The distance holds at four. So the nominal coding gain\ngoes to 4, or 6 dB, while",
    "start": "4499490",
    "end": "4510850"
  },
  {
    "text": "again, the spectral efficiency\ngoes to two bits per two dimensions, the nominal spectral\nefficiency rate to 1.",
    "start": "4510850",
    "end": "4518460"
  },
  {
    "text": "But again, you have this\nkind of phenomenon. And I ask you to work that out\nalso on the homework, where",
    "start": "4518460",
    "end": "4525099"
  },
  {
    "text": "even though the nominal coding\ngain plateaus eventually at 6 dB, there is a maximum effective\ncoding gain, which",
    "start": "4525100",
    "end": "4533370"
  },
  {
    "text": "is something more in the\nrange of 4 to 5 dB. You figure out what it is. ",
    "start": "4533370",
    "end": "4540560"
  },
  {
    "text": "And there's a limit to how much\neffective coding gain you can get with these codes. Does this all makes sense?",
    "start": "4540560",
    "end": "4546710"
  },
  {
    "text": "Are you seeing how\nI'm arguing? ",
    "start": "4546710",
    "end": "4551780"
  },
  {
    "text": "OK, here's another interesting\nsequence of codes.",
    "start": "4551780",
    "end": "4556905"
  },
  {
    "text": " These are all half-rate codes,\nor nominal spectral efficiency",
    "start": "4556905",
    "end": "4566880"
  },
  {
    "text": "one bit per two dimensions. ",
    "start": "4566880",
    "end": "4571940"
  },
  {
    "text": "I briefly mentioned that these\nthings pair up in duals. The 16, 5 code is the dual\ncode of the 16, 11 codes.",
    "start": "4571940",
    "end": "4579750"
  },
  {
    "text": "If you see, there's a symmetry\nabout rate 1 by 2, such that this is k, and this\nis n minus k.",
    "start": "4579750",
    "end": "4586989"
  },
  {
    "text": "And so you would suspect that\nthis guy is the dual of this guy, which it is. This guy is the dual\nof this guy.",
    "start": "4586990",
    "end": "4593450"
  },
  {
    "text": "This guy is the dual\nof this guy. And this guy is its own dual. It's a self-dual code\nof rate 1 by 2 or",
    "start": "4593450",
    "end": "4600730"
  },
  {
    "text": "spectral efficiency 1. So these are self-dual codes. ",
    "start": "4600730",
    "end": "4608699"
  },
  {
    "text": "And what does their nominal\ncoding gain go to? ",
    "start": "4608700",
    "end": "4617640"
  },
  {
    "text": "Well, the rate is always 1 by 2\ntimes four, that's a nominal coding gain of 2.",
    "start": "4617640",
    "end": "4624090"
  },
  {
    "text": "This has a nominal\ncoding gain of 4. The next one in line would be\na 128, 64, 16 code, nominal",
    "start": "4624090",
    "end": "4631280"
  },
  {
    "text": "coding gain of 8. So the nominal coding gain\nactually goes to infinity. ",
    "start": "4631280",
    "end": "4643450"
  },
  {
    "text": "That's pretty good. However, what is its\ntrue meaning?",
    "start": "4643450",
    "end": "4648639"
  },
  {
    "text": "What we really want to\nknow is what's the effective coding gain. And given that the nominal\ncoding gain goes to infinity,",
    "start": "4648640",
    "end": "4656900"
  },
  {
    "text": "is it possible the effective\ncoding gain can get us all the way to the Shannon limit? Can we completely close\nthe gap to capacity?",
    "start": "4656900",
    "end": "4664960"
  },
  {
    "text": "As far as I know, this\nis an open question. I strongly believe that you go\nalong this sequence through",
    "start": "4664960",
    "end": "4671770"
  },
  {
    "text": "maximum likelihood decoding, you\nwill eventually get to the Shannon limit, that is the\nShannon limit for this",
    "start": "4671770",
    "end": "4679300"
  },
  {
    "text": "spectral efficiency, which is\nnot the ultimate Shannon limit, but rather is 0, in terms\nof Eb over N_0 If you",
    "start": "4679300",
    "end": "4685720"
  },
  {
    "text": "remember, for rate 1/2 for rho\nequals 1, the Shannon limit on",
    "start": "4685720",
    "end": "4691420"
  },
  {
    "text": "Eb over N_0 was 0 dB.  You may or may not\nremember that.",
    "start": "4691420",
    "end": "4699480"
  },
  {
    "text": "So there's a question. Does this take you all the\nway to the Shannon limit?",
    "start": "4699480",
    "end": "4706322"
  },
  {
    "text": " And that would be a nice\nquestion for somebody to answer someday.",
    "start": "4706322",
    "end": "4711639"
  },
  {
    "text": "I think it probably does,\nespecially in view of the fact that if you take this set down\nhere, again, this will be a",
    "start": "4711640",
    "end": "4724850"
  },
  {
    "text": "homework problem, this turns out\nto be a set of Euclidean",
    "start": "4724850",
    "end": "4731080"
  },
  {
    "text": "images of these codes are\northogonal signal sets. For instance, 32, 6,\n16, what is that?",
    "start": "4731080",
    "end": "4740469"
  },
  {
    "text": "That's a set of 64 constellation\npoints in 32 dimensions.",
    "start": "4740470",
    "end": "4746940"
  },
  {
    "text": "And algebraically, it's not hard\nto figure out that every one of these code words is\northogonal in a Euclidean",
    "start": "4746940",
    "end": "4754070"
  },
  {
    "text": "sense to one another, except for\none that's complementary, which is just what you expect in\na bi-orthogonal signal set.",
    "start": "4754070",
    "end": "4760510"
  },
  {
    "text": "So these give you bi-orthogonal,\nthey're called bi-orthogonal codes, or\nfirst-order Reed-Muller codes,",
    "start": "4760510",
    "end": "4768150"
  },
  {
    "text": "because the parameter r\nis 1 for all of these.",
    "start": "4768150",
    "end": "4775360"
  },
  {
    "text": "What's happening to the spectral\nefficiency here? Spectral efficiency goes to 0.",
    "start": "4775360",
    "end": "4781800"
  },
  {
    "text": "So these become highly\ninefficient from a bandwidth point of view, as we already\nknow about orthogonal,",
    "start": "4781800",
    "end": "4787680"
  },
  {
    "text": "bi-orthogonal simplex\nsignal sets. They use up a lot\nof bandwidth.",
    "start": "4787680",
    "end": "4792969"
  },
  {
    "text": "But what else do we\nknow about them? In this case, we definitely know\nthat the effective coding",
    "start": "4792970",
    "end": "4800880"
  },
  {
    "text": "gain does go to the Shannon\nlimit, and in this case, to the ultimate Shannon limit\nfor rho equals 0 as",
    "start": "4800880",
    "end": "4806740"
  },
  {
    "text": "rho approaches 0. So here, there's a proof that\nthese codes can get you to the",
    "start": "4806740",
    "end": "4812239"
  },
  {
    "text": "Shannon limit. But as we've already explained\nearlier, geometrically, it's",
    "start": "4812240",
    "end": "4817530"
  },
  {
    "text": "at the cost of using much more\nbandwidth than you probably really want to use.",
    "start": "4817530",
    "end": "4822880"
  },
  {
    "text": "But here, at least, is one\ncapacity-approaching set of codes, just among these rather\nsimple Reed-Muller",
    "start": "4822880",
    "end": "4829000"
  },
  {
    "text": "codes along this line. And of course, we also\nsee our repetition",
    "start": "4829000",
    "end": "4834940"
  },
  {
    "text": "codes, our trivial codes. So this is a nice representative family of codes.",
    "start": "4834940",
    "end": "4840780"
  },
  {
    "text": "And it really does tell you\nquite well what to expect. Are you looking at your watch?",
    "start": "4840780",
    "end": "4846380"
  },
  {
    "text": "Thank you. I appreciate the hint. So we didn't quite finish\nchapter six today.",
    "start": "4846380",
    "end": "4856390"
  },
  {
    "text": "Next time, we'll start out with\nthe penalties of making hard decisions, which at first\nbrush seems like a not",
    "start": "4856390",
    "end": "4863969"
  },
  {
    "text": "unreasonable compromise\nto make. But it actually costs\na serious penalty.",
    "start": "4863970",
    "end": "4869600"
  },
  {
    "text": "And that will finish\nchapter six. I'll do that as briefly\nas I can.",
    "start": "4869600",
    "end": "4875080"
  },
  {
    "text": "And then we'll get into chapters\nseven and eight, which is finite fields and\nReed-Solomon codes, which are",
    "start": "4875080",
    "end": "4881889"
  },
  {
    "text": "the single great triumph of\nalgebraic coding theory. ",
    "start": "4881890",
    "end": "4888250"
  },
  {
    "text": "So OK, that's tomorrow. ",
    "start": "4888250",
    "end": "4899363"
  }
]