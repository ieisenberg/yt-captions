[
  {
    "text": "Virtual memory allows programs to behave as\nif they have a larger memory than they actually",
    "start": "570",
    "end": "5840"
  },
  {
    "text": "do.",
    "start": "5840",
    "end": "6900"
  },
  {
    "text": "The way this works is by using virtual addresses,\nwhich refer to addresses on disk, in our programs.",
    "start": "6900",
    "end": "14049"
  },
  {
    "text": "The virtual addresses are translated into\nphysical addresses using the page map which",
    "start": "14049",
    "end": "18910"
  },
  {
    "text": "is a lookup table that has one entry per virtual\npage.",
    "start": "18910",
    "end": "23589"
  },
  {
    "text": "The page map knows whether the virtual page\nis in physical memory and if so it immediately",
    "start": "23589",
    "end": "29099"
  },
  {
    "text": "returns the physical page number.",
    "start": "29099",
    "end": "31939"
  },
  {
    "text": "If the page is not in physical memory, then\nthis causes a fault which means that the virtual",
    "start": "31939",
    "end": "36940"
  },
  {
    "text": "page must be brought in from disk to physical\nmemory before it can be accessed.",
    "start": "36940",
    "end": "42370"
  },
  {
    "text": "To do this the least recently used (LRU) page\nin the physical memory is removed to make",
    "start": "42370",
    "end": "48500"
  },
  {
    "text": "room for the address that is currently being\nrequested.",
    "start": "48500",
    "end": "52579"
  },
  {
    "text": "The page map is also updated with the new\nmapping of virtual to physical pages.",
    "start": "52579",
    "end": "58110"
  },
  {
    "text": "Since bringing data to and from disk is an\nexpensive operation, data is moved in chunks.",
    "start": "58110",
    "end": "63420"
  },
  {
    "text": "This makes sense because of the concept of\nlocality which we studied as part of our Caches",
    "start": "63420",
    "end": "69210"
  },
  {
    "text": "unit.",
    "start": "69210",
    "end": "70210"
  },
  {
    "text": "The idea is that instructions, or data, that\nare close to the current address are likely",
    "start": "70210",
    "end": "75369"
  },
  {
    "text": "to be accessed as well, so it makes sense\nto fetch more than one word of data at a time.",
    "start": "75370",
    "end": "82030"
  },
  {
    "text": "This is especially true if the cost of fetching\nthe first word is significantly higher than",
    "start": "82030",
    "end": "86380"
  },
  {
    "text": "the cost of fetching adjacent memory locations\nas is the case with accesses to disk.",
    "start": "86380",
    "end": "93110"
  },
  {
    "text": "So data is moved back and forth from disk\nin pages.",
    "start": "93110",
    "end": "97200"
  },
  {
    "text": "The size of a page is the same in both virtual\nand physical memory.",
    "start": "97200",
    "end": "101950"
  },
  {
    "text": "Lets look at an example of how virtual memory\nis used.",
    "start": "101950",
    "end": "106118"
  },
  {
    "text": "While it is usually the case that the virtual\naddress space is larger than the physical",
    "start": "106119",
    "end": "110860"
  },
  {
    "text": "address space, this is not a requirement and\nin this problem the virtual address space",
    "start": "110860",
    "end": "115460"
  },
  {
    "text": "happens to be smaller than the physical address\nspace.",
    "start": "115460",
    "end": "119720"
  },
  {
    "text": "Specifically, virtual addresses are 16 bits\nlong so they can address 2^16 bytes.",
    "start": "119720",
    "end": "127280"
  },
  {
    "text": "Physical addresses are 20 bits long so that\nmeans that our physical memory is of size",
    "start": "127280",
    "end": "132110"
  },
  {
    "text": "2^20 bytes.",
    "start": "132110",
    "end": "134910"
  },
  {
    "text": "Our page size is 2^8 bytes or 256 bytes per\npage.",
    "start": "134910",
    "end": "140790"
  },
  {
    "text": "This means that the 16 bit virtual address\nconsists of 8 bits of page offset and another",
    "start": "140790",
    "end": "146730"
  },
  {
    "text": "8 bits for the virtual page number (or VPN).",
    "start": "146730",
    "end": "149319"
  },
  {
    "text": "The 20 bit physical address consists of the\nsame 8 bit page offset and another 12 bits",
    "start": "149320",
    "end": "156730"
  },
  {
    "text": "for the physical page number (or PPN).",
    "start": "156730",
    "end": "159000"
  },
  {
    "text": "The first question we want to consider is\nwhat is the size of the page map in this example?",
    "start": "159000",
    "end": "166450"
  },
  {
    "text": "Recall that a page map has 1 entry per virtual\npage in order to map each virtual page to",
    "start": "166450",
    "end": "172000"
  },
  {
    "text": "a physical page.",
    "start": "172000",
    "end": "174220"
  },
  {
    "text": "This means that the number of entries in the\npage map is 2^8 where 8 is the number of bits",
    "start": "174220",
    "end": "180500"
  },
  {
    "text": "in the VPN.",
    "start": "180500",
    "end": "182230"
  },
  {
    "text": "The size of each page map entry is 14 bits,\n12 for the PPN, 1 for the dirty bit and 1",
    "start": "182230",
    "end": "190060"
  },
  {
    "text": "for the resident bit.",
    "start": "190060",
    "end": "191940"
  },
  {
    "text": "Suppose that you are told that the page size\nis doubled in size so that there are now 2^9",
    "start": "191940",
    "end": "196950"
  },
  {
    "text": "bytes per page, but the size of your physical\nand virtual addresses remain the same.",
    "start": "196950",
    "end": "202970"
  },
  {
    "text": "We would like to determine what effect this\nchange would have on some of the page map",
    "start": "202970",
    "end": "206750"
  },
  {
    "text": "attributes.",
    "start": "206750",
    "end": "208450"
  },
  {
    "text": "The first question is how does the size of\neach page map entry in bits change?",
    "start": "208450",
    "end": "213790"
  },
  {
    "text": "Since the size of a physical address continues\nto be 20 bits long, then the change in page",
    "start": "213790",
    "end": "219340"
  },
  {
    "text": "offset size from 8 to 9 bits implies that\nthe size of the PPN decreased by 1 bit from",
    "start": "219340",
    "end": "225840"
  },
  {
    "text": "12 to 11.",
    "start": "225840",
    "end": "228040"
  },
  {
    "text": "This implies that the size of each page map\nentry also decreases by 1 bit.",
    "start": "228040",
    "end": "233760"
  },
  {
    "text": "How are the number of entries in the page\nmap affected by the change in page size?",
    "start": "233760",
    "end": "239519"
  },
  {
    "text": "Since the number of entries in a page map\nis equal to the number of virtual pages, that",
    "start": "239520",
    "end": "244450"
  },
  {
    "text": "means that if the size of each page doubled,\nthen we have half as many virtual pages.",
    "start": "244450",
    "end": "249920"
  },
  {
    "text": "This is shown in the size of the VPN which\nhas decreased from 8 to 7 bits.",
    "start": "249920",
    "end": "255670"
  },
  {
    "text": "This also means that the number of entries\nin the page map have halved in size from 2^8",
    "start": "255670",
    "end": "261419"
  },
  {
    "text": "entries down to 2^7 entries.",
    "start": "261420",
    "end": "264980"
  },
  {
    "text": "How about the number of accesses of the page\nmap that are required to translate a single",
    "start": "264980",
    "end": "270280"
  },
  {
    "text": "virtual address?",
    "start": "270280",
    "end": "272410"
  },
  {
    "text": "This parameter does not change as a result\nof the pages doubling in size.",
    "start": "272410",
    "end": "277950"
  },
  {
    "text": "Suppose we return to our original page size\nof 256 bytes per page.",
    "start": "277950",
    "end": "283470"
  },
  {
    "text": "We now execute these two lines of code, a\nload followed by a store operation.",
    "start": "283470",
    "end": "289130"
  },
  {
    "text": "The comment after each instruction shows us\nthe value of the PC when each of the instructions",
    "start": "289130",
    "end": "294100"
  },
  {
    "text": "is executed, so it is telling us that the\nload instruction is at address 0x1FC and the",
    "start": "294100",
    "end": "301000"
  },
  {
    "text": "store instruction is at address 0x200.",
    "start": "301000",
    "end": "304380"
  },
  {
    "text": "To execute these two lines of code, we must\nfirst fetch each instruction and then perform",
    "start": "304380",
    "end": "310410"
  },
  {
    "text": "the data access required by that instruction.",
    "start": "310410",
    "end": "314070"
  },
  {
    "text": "Since our pages are 2^8 bytes long, that means\nthat the bottom 8 bits of our address correspond",
    "start": "314070",
    "end": "319560"
  },
  {
    "text": "to the page offset.",
    "start": "319560",
    "end": "321720"
  },
  {
    "text": "Notice that our instruction addresses are\nspecified in hex so 8 bits correspond to the",
    "start": "321720",
    "end": "326380"
  },
  {
    "text": "bottom 2 hex characters.",
    "start": "326380",
    "end": "329320"
  },
  {
    "text": "This means that when accessing the LD instruction,\nthe VPN = 1 (which is what remains of our",
    "start": "329320",
    "end": "335780"
  },
  {
    "text": "virtual address after removing the bottom\n8 bits.)",
    "start": "335780",
    "end": "340460"
  },
  {
    "text": "The data accessed by the LD instruction comes\nfrom VPN 3.",
    "start": "340460",
    "end": "345810"
  },
  {
    "text": "Next we fetch the store instruction from VPN\n2, and finally we store an updated value to",
    "start": "345810",
    "end": "352150"
  },
  {
    "text": "VPN 6.",
    "start": "352150",
    "end": "354550"
  },
  {
    "text": "Given the page map shown here, we would like\nto determine the unique physical addresses",
    "start": "354550",
    "end": "359930"
  },
  {
    "text": "that are accessed by this code segment.",
    "start": "359930",
    "end": "363190"
  },
  {
    "text": "Recall that the four virtual addresses that\nwill be accessed are:",
    "start": "363190",
    "end": "368100"
  },
  {
    "text": "0x1FC which is in VPN 1\n0x34C which is in VPN 3",
    "start": "368100",
    "end": "376810"
  },
  {
    "text": "0x200 which is in VPN 2\nand 0x604 which is in VPN 6.",
    "start": "376810",
    "end": "385660"
  },
  {
    "text": "Assume that all the code and data required\nto handle page faults is located at physical",
    "start": "385660",
    "end": "391170"
  },
  {
    "text": "page 0, your goal is to determine the 5 different\nphysical pages that will get accessed and",
    "start": "391170",
    "end": "397700"
  },
  {
    "text": "the order in which they will get accessed\nby this code segment.",
    "start": "397700",
    "end": "401800"
  },
  {
    "text": "We begin by looking up VPN 1 in our page map.",
    "start": "401800",
    "end": "406039"
  },
  {
    "text": "We see that its resident bit is set to 1.",
    "start": "406040",
    "end": "409760"
  },
  {
    "text": "This means that the virtual page is in physical\nmemory and its PPN is 0x007.",
    "start": "409760",
    "end": "415669"
  },
  {
    "text": "Thus the first physical page that we access\nis page 0x7, and the first physical address",
    "start": "415669",
    "end": "423311"
  },
  {
    "text": "is determined by concatenating the PPN to\nthe page offset.",
    "start": "423311",
    "end": "427700"
  },
  {
    "text": "This results in a physical address of 0x7FC.",
    "start": "427700",
    "end": "431690"
  },
  {
    "text": "Next, we want to load the data at virtual\naddress 0x34C which is in VPN 3.",
    "start": "431690",
    "end": "440680"
  },
  {
    "text": "Looking up VPN 3 in our page map, we find\nout that its not resident in physical memory.",
    "start": "440680",
    "end": "447240"
  },
  {
    "text": "This means that we need to make room for it\nby removing the least recently used page from",
    "start": "447240",
    "end": "451610"
  },
  {
    "text": "physical memory.",
    "start": "451610",
    "end": "453400"
  },
  {
    "text": "The least recently used page is VPN 2 which\nmaps to PPN 0x602.",
    "start": "453400",
    "end": "460990"
  },
  {
    "text": "Since the dirty bit of our LRU page is 0,\nthat means that we have not done any writes",
    "start": "460990",
    "end": "466289"
  },
  {
    "text": "to this page while it was in physical memory\nso the version in physical memory and on disk",
    "start": "466290",
    "end": "471620"
  },
  {
    "text": "are identical.",
    "start": "471620",
    "end": "473310"
  },
  {
    "text": "So to free up physical page 0x602, all we\nneed to do is change the resident bit of VPN",
    "start": "473310",
    "end": "479740"
  },
  {
    "text": "2 to 0 and now we can bring VPN 3 into physical\npage 0x602.",
    "start": "479740",
    "end": "487138"
  },
  {
    "text": "Recall that the code for handling the page\nfault is in physical page 0 so the second",
    "start": "487139",
    "end": "492169"
  },
  {
    "text": "physical page that we access is page 0.",
    "start": "492169",
    "end": "495700"
  },
  {
    "text": "The updated page map, after handling the page\nfault, looks like this, where the resident",
    "start": "495700",
    "end": "501230"
  },
  {
    "text": "bit for VPN 2 has been set to 0, and PPN 0x602\nis now used for VPN 3.",
    "start": "501230",
    "end": "510430"
  },
  {
    "text": "Since this is a LD operation, we are not modifying\nthe page so the dirty bit is set to 0.",
    "start": "510430",
    "end": "517520"
  },
  {
    "text": "The physical address for virtual address 0x34C\nis now 0x6024C which is now in VPN 0x602.",
    "start": "517520",
    "end": "530830"
  },
  {
    "text": "Next we need to fetch the store instruction\nfrom virtual address 0x200 which is in VPN",
    "start": "530830",
    "end": "535980"
  },
  {
    "text": "2.",
    "start": "535980",
    "end": "537620"
  },
  {
    "text": "Since we just removed VPN 2 from physical\nmemory we get another page fault.",
    "start": "537620",
    "end": "543270"
  },
  {
    "text": "This time we will remove the next LRU page\nfrom physical memory in order to make room",
    "start": "543270",
    "end": "548110"
  },
  {
    "text": "for VPN 2 once again.",
    "start": "548110",
    "end": "550820"
  },
  {
    "text": "In this case, the dirty bit is set to 1 which\nmeans that we have written to PPN 0x097 after",
    "start": "550820",
    "end": "558541"
  },
  {
    "text": "it was fetched from disk.",
    "start": "558541",
    "end": "560580"
  },
  {
    "text": "This means that the page fault handler will\nneed to first write physical page 0x097 back",
    "start": "560580",
    "end": "567120"
  },
  {
    "text": "to virtual page 5 before we can use physical\npage 0x097 for VPN 2.",
    "start": "567120",
    "end": "575690"
  },
  {
    "text": "After handling the page fault, our updated\npage map looks like this.",
    "start": "575690",
    "end": "579890"
  },
  {
    "text": "VPN 5 is no longer resident, and instead VPN\n2 is resident in physical page 0x097.",
    "start": "579890",
    "end": "589920"
  },
  {
    "text": "In addition, we set the dirty bit to 0 because\nwe have not made any changes to this virtual",
    "start": "589920",
    "end": "595760"
  },
  {
    "text": "page.",
    "start": "595760",
    "end": "597480"
  },
  {
    "text": "We now know that virtual address 0x200 maps\nto physical address 0x09700 after the handling",
    "start": "597480",
    "end": "607149"
  },
  {
    "text": "of the page fault.",
    "start": "607149",
    "end": "608810"
  },
  {
    "text": "Finally, we need to perform the store to virtual\naddress 0x604 which is in VPN 6.",
    "start": "608810",
    "end": "616620"
  },
  {
    "text": "Since VPN 6 is resident in physical memory,\nwe can access it at physical page 0x790 as",
    "start": "616620",
    "end": "623540"
  },
  {
    "text": "shown in the page map.",
    "start": "623540",
    "end": "625820"
  },
  {
    "text": "This means that virtual address 0x604 maps\nto physical address 0x79004.",
    "start": "625820",
    "end": "635820"
  },
  {
    "text": "Note that because the dirty bit of VPN 6 was\nalready a 1, we don't need to make any further",
    "start": "635820",
    "end": "641399"
  },
  {
    "text": "modifications to the page map as a result\nof executing the store operation.",
    "start": "641399",
    "end": "646330"
  },
  {
    "text": "If the dirty bit had been a 0, then we would\nhave set it to 1.",
    "start": "646330",
    "end": "652170"
  },
  {
    "text": "So the five physical pages that were accessed\nby this program are: page 0x7, page 0 for",
    "start": "652170",
    "end": "659410"
  },
  {
    "text": "the page faults, page 0x602, page 0x097, and\npage 0x790.",
    "start": "659410",
    "end": "668639"
  }
]