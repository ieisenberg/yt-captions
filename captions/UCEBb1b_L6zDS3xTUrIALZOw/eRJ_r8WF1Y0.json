[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6060"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6060",
    "end": "12700"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12700",
    "end": "26380"
  },
  {
    "text": "PROFESSOR: All right, guys. Let's get started with\nthe next installment of our exciting journey\ninto computer security.",
    "start": "26380",
    "end": "34290"
  },
  {
    "text": "Today, we're actually going\nto talk about web security. Web security is, actually,\none of my favorite topics",
    "start": "34290",
    "end": "39760"
  },
  {
    "text": "to talk about because\nit really exposes you to the true horrors\nof the world. It's very easy to\nthink, as a student,",
    "start": "39760",
    "end": "45126"
  },
  {
    "text": "that everything will be\ngreat when you graduate. Today's lecture and\nthe next lecture will be telling you that's,\nin fact, not the case.",
    "start": "45126",
    "end": "51006"
  },
  {
    "text": "Everything's terrible. So what Is the web? Well back in the olden days, the\nweb was, actually, much simpler",
    "start": "51006",
    "end": "57230"
  },
  {
    "text": "than it is today, right. So clients, which is\nto say the browsers, couldn't really do anything\nwith respect of displaying",
    "start": "57230",
    "end": "63030"
  },
  {
    "text": "rigid or active content. Basically they could just get\nstatic images, static text, and that was about it. Now the server side was\na little more interesting",
    "start": "63030",
    "end": "70512"
  },
  {
    "text": "because even if there was static\ncontent on a clients side. Maybe the server was\ntalking databases,",
    "start": "70512",
    "end": "75830"
  },
  {
    "text": "maybe it was talking to other\nmachines on the server side. Things like that. So for a very long time,\nthe notion of web security,",
    "start": "75830",
    "end": "82950"
  },
  {
    "text": "basically, meant looking at\nwhat the server was doing. And to this point\nin this class, we've essentially taken that approach.",
    "start": "82950",
    "end": "89430"
  },
  {
    "text": "So we looked at things like\nbuffer to overflow attacks. So how clients can trick\nthe server into doing things",
    "start": "89430",
    "end": "95890"
  },
  {
    "text": "the server doesn't want to do. You also looked\nat the OKWS server and looked at how we can do\nsome privilege isolation there.",
    "start": "95890",
    "end": "103750"
  },
  {
    "text": "So to this point, we, sort\nof, looked at security through the experiences\nthat were actually",
    "start": "103750",
    "end": "110489"
  },
  {
    "text": "experienced by the security\nresources themselves. But now, actually, the\nbrowser is very interesting to think about, in\nterms of security,",
    "start": "110489",
    "end": "116810"
  },
  {
    "text": "because the browser is super,\nsuper complicated these days.",
    "start": "116810",
    "end": "122483"
  },
  {
    "text": " So now there's all kinds\nof insane, dynamic stuff",
    "start": "122484",
    "end": "127950"
  },
  {
    "text": "that the browser\ncan actually do. So for example, you probably\nheard of JavaScript.",
    "start": "127950",
    "end": "133320"
  },
  {
    "text": "So JavaScript now\nallows pages to execute client side code,\nTuring complete,",
    "start": "133320",
    "end": "138465"
  },
  {
    "text": "can do all kinds of wacky stuff. There is the DOM\nmodel, which we'll talk about in more\ndepth later today.",
    "start": "138465",
    "end": "145100"
  },
  {
    "text": "The DOM model, essentially,\nallows JavaScript code to dynamically change the\nvisual appearance of the page.",
    "start": "145100",
    "end": "151480"
  },
  {
    "text": "Fiddle with things like font\nstylings and stuff like that. There's XML HTTP request.",
    "start": "151480",
    "end": "160630"
  },
  {
    "text": "These are, basically,\na way for JavaScript to asynchronously fetch\ncontents from servers.",
    "start": "160630",
    "end": "167350"
  },
  {
    "text": "You may also hear XML HTTP\nrequests referred to as AJAX.",
    "start": "167350",
    "end": "173520"
  },
  {
    "text": "Asynchronous\nJavaScript fetching. There are things\nlike web sockets.",
    "start": "173520",
    "end": "178760"
  },
  {
    "text": "This is, actually,\nrecently introduced API. So WebSockets, essentially,\nallow a full duplex",
    "start": "178760",
    "end": "185959"
  },
  {
    "text": "communication between\nclients and servers. Communication going both ways. We've got all kinds\nof multimedia support.",
    "start": "185960",
    "end": "192610"
  },
  {
    "text": " So for example, we have\nthings like the video tag,",
    "start": "192610",
    "end": "202629"
  },
  {
    "text": "which allows a web\npage to play video without using a Flash app. It can actually just\nplay that video natively.",
    "start": "202630",
    "end": "210110"
  },
  {
    "text": "There's also a geolocation. So now a web page can actually\ndetermine, physically,",
    "start": "210110",
    "end": "219180"
  },
  {
    "text": "where you are. For example, if you're running\na web page on a smartphone, the browser can actually\naccess your GPS unit.",
    "start": "219180",
    "end": "225359"
  },
  {
    "text": "If you're accessing a\npage on a desktop browser, it can actually look at\nyour Wi-Fi connection",
    "start": "225360",
    "end": "231460"
  },
  {
    "text": "and connect to Google's\nWi-Fi geolocation service to figure out where\nexactly you are. That's, kind of, insane.",
    "start": "231460",
    "end": "237130"
  },
  {
    "text": "Right? But now web pages can do\ndo that kind of stuff. So we've also talked\nabout things like NaCl,",
    "start": "237130",
    "end": "245000"
  },
  {
    "text": "for example, which allows\nbrowsers to run native code. So there's many,\nmany other features",
    "start": "245000",
    "end": "251371"
  },
  {
    "text": "that I haven't mentioned here. But suffice it to\nsay the browser is now incredibly complicated.",
    "start": "251371",
    "end": "256480"
  },
  {
    "text": "So what does this mean from\nthe perspective of security? Well basically, it means\nthat we're screwed.",
    "start": "256480",
    "end": "262140"
  },
  {
    "text": "Right? The thread surface for that\nright there is enormous. And loosely speaking, when\nyou're thinking about security,",
    "start": "262140",
    "end": "268580"
  },
  {
    "text": "you can think of a graph that,\nsort of, looks like this. So you've got the\nlikelihood of correctness.",
    "start": "268580",
    "end": "277229"
  },
  {
    "text": " And then, you've got the number\nof features that you have.",
    "start": "277230",
    "end": "283629"
  },
  {
    "text": " And so you know, this graph\nstarts up here at 100.",
    "start": "283630",
    "end": "291035"
  },
  {
    "text": "Well of course, we\nnever even started 100, even with very simple\ncode because we can't even do bubble sort right.",
    "start": "291035",
    "end": "298190"
  },
  {
    "text": "So essentially, that curve\nlooks something like this. And web browsers\nare right over here.",
    "start": "298190",
    "end": "303490"
  },
  {
    "text": "So as we'll discuss\ntoday, There's all kinds of wacky security bugs\nthat are arising constantly.",
    "start": "303490",
    "end": "309210"
  },
  {
    "text": "And as soon as the\nold ones are fixed, new ones are rising\nbecause people keep adding these new features.",
    "start": "309210",
    "end": "314530"
  },
  {
    "text": "Oftentimes, without\nthinking about what the security implications\nof those features are. So if you think about what a\nweb application is these days,",
    "start": "314530",
    "end": "322400"
  },
  {
    "text": "well it's this client thing\nand it's a server thing. And a web application now spans\nmultiple programming languages,",
    "start": "322400",
    "end": "328220"
  },
  {
    "text": "multiple machines, and\nmultiple hardware programs. You could be using\nFirefox on Windows. Then it's going to go talk to\na machine in the cloud that's",
    "start": "328220",
    "end": "335430"
  },
  {
    "text": "running Linux. It's running the Apache server. Maybe it's running an ARM chip\nopposed to x86 or something",
    "start": "335430",
    "end": "341460"
  },
  {
    "text": "like that, or the\nother way around. So long story short, there's all\nthese problems of composition.",
    "start": "341460",
    "end": "347210"
  },
  {
    "text": "There's all these software\nlayers and all these hardware layers that all can impact\nsecurity in some way.",
    "start": "347210",
    "end": "353797"
  },
  {
    "text": "But it's also complicated. It's not quite clear how we can\nmake sense of the entire whole. So for example, one common\nproblem with the web",
    "start": "353797",
    "end": "363170"
  },
  {
    "text": "is this problem of\na parsing context. ",
    "start": "363170",
    "end": "370220"
  },
  {
    "text": "So as an example,\nsuppose that you had something in a page\nthat looked like this.",
    "start": "370220",
    "end": "376220"
  },
  {
    "text": "You declare a script tag. Inside that script tag,\nyou declare a variable.",
    "start": "376220",
    "end": "382470"
  },
  {
    "text": "There's some string here. And let's say that this string\ncomes from an untrusted party.",
    "start": "382470",
    "end": "389700"
  },
  {
    "text": "Either the user or another\nmachine or something like that.",
    "start": "389700",
    "end": "394810"
  },
  {
    "text": "And then, you close\nthat script tag. ",
    "start": "394810",
    "end": "400360"
  },
  {
    "text": "So this stuff is trusted. This stuff is trusted. This stuff is not trusted. So can anybody\nfigure out why there",
    "start": "400360",
    "end": "405389"
  },
  {
    "text": "might be some problems here if\nwe take this entrusted string and put it in there? ",
    "start": "405390",
    "end": "411422"
  },
  {
    "text": "AUDIENCE: You can have a closing\nquote mark in [INAUDIBLE] and then have some [INAUDIBLE].",
    "start": "411422",
    "end": "417159"
  },
  {
    "text": "PROFESSOR: Right,\nright, exactly. So the problem is there\nare multiple context, that this untrusted code\ncould, sort of, break into.",
    "start": "417159",
    "end": "424590"
  },
  {
    "text": "So for example, if the untrusted\ncode had a double quote here, now we've closed the definition\nof this JavaScript string.",
    "start": "424590",
    "end": "434056"
  },
  {
    "text": "So now we're added the\nJavaScript string context and render the regular\nJavaScript execution context. And then the attacker\ngets a regular job",
    "start": "434056",
    "end": "440610"
  },
  {
    "text": "zip code here and go to town. Alternatively, the\nattacker could just put a closing script tag here.",
    "start": "440610",
    "end": "451220"
  },
  {
    "text": "Right? And then, at that\npoint, the attacker can, sort of, get out of\nthe JavaScript context",
    "start": "451220",
    "end": "458819"
  },
  {
    "text": "and then get into\nthe HTML context. Maybe to find some new HTML\nnodes or something like that.",
    "start": "458820",
    "end": "464250"
  },
  {
    "text": "So you see this problem\nwith composition all over the place in\nthe web because there are so many different\nlanguages and run",
    "start": "464250",
    "end": "469810"
  },
  {
    "text": "times for you to think about. HTML, CSS, JavaScript, maybe\nMySQL on the server side, and so on and so forth.",
    "start": "469810",
    "end": "476820"
  },
  {
    "text": "So this is just\na classic example of why you have to do something\ncalled content standardization.",
    "start": "476820",
    "end": "482240"
  },
  {
    "text": "So whenever you get\nuntrusted input from someone, you actually need to\nanalyze it very carefully",
    "start": "482240",
    "end": "487700"
  },
  {
    "text": "to make sure that it's not being\nused as a vector for an attack. So another reason why\nweb security so tricky",
    "start": "487700",
    "end": "494420"
  },
  {
    "text": "is because the web\nspecifications are incredibly long, they're\nincredibly tedious, they're incredibly boring, and\nthey're often inconsistent.",
    "start": "494420",
    "end": "501857"
  },
  {
    "text": "So when I mean the\nweb specifications, I mean things like the\ndefinition of JPEG, the definition of CSS,\nthe definition of HTML.",
    "start": "501857",
    "end": "508522"
  },
  {
    "text": "These documents\nare, like, the size of the EU constitution and\nequally as easy to understand. So what ends up happening\nis that the browser vendors",
    "start": "508522",
    "end": "516130"
  },
  {
    "text": "see all these specs. And they essentially\nsay, OK, thanks for that. I'm going to do something\nthat somewhat resembles",
    "start": "516130",
    "end": "522169"
  },
  {
    "text": "what these specs look like. Then they call it a day\nand they laugh about it with their friends. OK, so what ends up happening\nis that these specifications",
    "start": "522169",
    "end": "528160"
  },
  {
    "text": "end up being like these vague,\naspirational documents that don't always accurately reflect\nwhat real browsers are doing.",
    "start": "528160",
    "end": "535109"
  },
  {
    "text": "And if you want to understand\nthe horror of this, you can go to this site\ncalled quirksmode.org. I mean, don't go to this\nsite if you want to be happy.",
    "start": "535109",
    "end": "541050"
  },
  {
    "text": "But you can go there. And it actually documents all of\nthese terrible inconsistencies that browsers have with\nrespect to what happens",
    "start": "541050",
    "end": "548029"
  },
  {
    "text": "when the user hits a key press? There should just be one key\nprecedent that's generated. You are so wrong.",
    "start": "548030",
    "end": "553839"
  },
  {
    "text": "So go to quirksmode.org\nand check that out, and see what's going on. So anyway, in this\nlecture, we're going to focus on the client\nside of the web application.",
    "start": "553840",
    "end": "561514"
  },
  {
    "text": "In particular,\nwe're going to look at how we can isolate\ncontent from different web providers that has\nto coexist, somehow,",
    "start": "561514",
    "end": "568610"
  },
  {
    "text": "in the same machine\nand the same browser. So at a high level, there's\nthis fundamental difference",
    "start": "568610",
    "end": "574011"
  },
  {
    "text": "between the way\nyou traditionally think of a desktop\napplication and the way you think of a web application.",
    "start": "574012",
    "end": "579420"
  },
  {
    "text": "Abstractly speaking, most of the\ndesktop applications that you use, you can think of it as\ncoming from a single principal.",
    "start": "579420",
    "end": "585320"
  },
  {
    "text": "So word comes from Microsoft. And maybe TurboTax comes\nfrom Mr. and Mrs. TurboTax, so on and so forth.",
    "start": "585320",
    "end": "591470"
  },
  {
    "text": "But when you look at a\nweb application, something that looks to you, visually,\nas a single application",
    "start": "591470",
    "end": "598830"
  },
  {
    "text": "is actually composed of a\nbunch of different content from a bunch of\ndifferent people. So you go to CNN, it looks\nlike it's all on one tab.",
    "start": "598830",
    "end": "605259"
  },
  {
    "text": "But each of those visual\nthings that you see may, in fact, come\nfrom someone different.",
    "start": "605260",
    "end": "610420"
  },
  {
    "text": "So let's just look at a\nvery simple example here.",
    "start": "610420",
    "end": "615529"
  },
  {
    "text": "So let's say that we were\nlooking at the following site. So HTTP food.com.",
    "start": "615530",
    "end": "624654"
  },
  {
    "text": "And we're just\nlooking at index.html. ",
    "start": "624654",
    "end": "630730"
  },
  {
    "text": "So you know, you look\nat your browser tab. What might you see?",
    "start": "630730",
    "end": "636240"
  },
  {
    "text": "So one thing that you might\nsee is an advertisement.",
    "start": "636240",
    "end": "641830"
  },
  {
    "text": "So you might see\nan advertisement in the form of a gift. And maybe that was\ndownloaded from ads.com.",
    "start": "641830",
    "end": "649082"
  },
  {
    "text": " Then you also might see, let's\nsay, an analytics library.",
    "start": "649082",
    "end": "656270"
  },
  {
    "text": " And maybe this comes\nfrom google.com.",
    "start": "656270",
    "end": "663061"
  },
  {
    "text": " So these libraries are very\npopular for doing things",
    "start": "663062",
    "end": "669470"
  },
  {
    "text": "like tracking how many\npeople have loaded your page, looking to see where\npeople click on things",
    "start": "669470",
    "end": "674600"
  },
  {
    "text": "to see which parts of their\nsite are the most interesting for people to interact\nwith, so on and so forth. And you might also have\nanother JavaScript library.",
    "start": "674600",
    "end": "682690"
  },
  {
    "text": "Let's say it's jQuery.  And maybe that comes\nfrom cdn.foo.com.",
    "start": "682690",
    "end": "693370"
  },
  {
    "text": "So some content distribution\nnetwork that foo.com runs. jQuery is very popular\nlibrary for doing things",
    "start": "693370",
    "end": "700470"
  },
  {
    "text": "like GUI manipulation. Things like that. So a lot of popular\nwebsites have jQuery. Although, they serve it\nfrom different places.",
    "start": "700470",
    "end": "707139"
  },
  {
    "text": "And then, on this page\nyou might see some HTML.",
    "start": "707140",
    "end": "713170"
  },
  {
    "text": "And here's where\nyou might see stuff like buttons for the user to\nclick on, text input, and so",
    "start": "713170",
    "end": "722250"
  },
  {
    "text": "on and so forth.  So that's just raw\nHTML on the page.",
    "start": "722250",
    "end": "728120"
  },
  {
    "text": "And then, you might\nsee what they call inline JavaScript from foo.com.",
    "start": "728120",
    "end": "739075"
  },
  {
    "text": " In my inline, you\nhave a script tag.",
    "start": "739075",
    "end": "747480"
  },
  {
    "text": "And then, you have\na closed script tag. And then you just have\nsome JavaScript code",
    "start": "747480",
    "end": "752820"
  },
  {
    "text": "included in their directly. That's as opposed to where\nyou say something like script.",
    "start": "752820",
    "end": "759399"
  },
  {
    "text": "And then, the source\nequals something that lives on some server remotely.",
    "start": "759400",
    "end": "765199"
  },
  {
    "text": "So this is what's called\ninline JavaScript. This is what's referred to\nas an externally defined JavaScript file. So you might have some inline\nJavaScript there from foo.com.",
    "start": "765199",
    "end": "773172"
  },
  {
    "text": "And the other thing that\nyou might have in here is actually a frame.",
    "start": "773172",
    "end": "778960"
  },
  {
    "text": "So we'll talk about frames\na bit more in a little bit, but think of a frame as almost\nlike a separate JavaScript",
    "start": "778960",
    "end": "784450"
  },
  {
    "text": "universe. It's a little bit equivalent\nto a process and UNIX. So maybe this frame here,\nmaybe this guy belongs",
    "start": "784450",
    "end": "793500"
  },
  {
    "text": "to https://facebook\n.com/likethis.html. ",
    "start": "793500",
    "end": "810690"
  },
  {
    "text": "So maybe here we have\nsome inline JavaScript",
    "start": "810690",
    "end": "816940"
  },
  {
    "text": "from Facebook. And then, maybe, we\nalso have some image.",
    "start": "816940",
    "end": "823300"
  },
  {
    "text": "So you know, f.jpeg. ",
    "start": "823300",
    "end": "829040"
  },
  {
    "text": "That comes from\nhttps://facebook.com.",
    "start": "829040",
    "end": "840139"
  },
  {
    "text": "OK, so this is what a single\ntab might have in its contents.",
    "start": "840140",
    "end": "846370"
  },
  {
    "text": "But as I just\nmentioned, all this can, potentially, come from\nall these different principles. So there's a bunch of\ninteresting questions",
    "start": "846370",
    "end": "852301"
  },
  {
    "text": "that we can ask about\na application that looks like this So for example, can this\nanalytics code from google.com",
    "start": "852301",
    "end": "859354"
  },
  {
    "text": "actually access\nJavaScript state that resides in the jQuery code. So to first approximation,\nmaybe that seems like a bad idea",
    "start": "859354",
    "end": "866840"
  },
  {
    "text": "because these two pieces of\ncode came from different places. But then again, maybe\nit's actually OK because, presumably, foo.com\nbrought both of these libraries",
    "start": "866840",
    "end": "875170"
  },
  {
    "text": "in so that they can\nwork with each other. So who knows. Another question\nyou might have is",
    "start": "875170",
    "end": "880370"
  },
  {
    "text": "can the analytics\ncode here actually interact with the\ntext inputs here. So for example, can\nthe analytics code",
    "start": "880370",
    "end": "887350"
  },
  {
    "text": "define event handlers? So a little bit of\nbackground in JavaScript. JavaScript is single\nthreaded vent driven model.",
    "start": "887350",
    "end": "894720"
  },
  {
    "text": "So basically, in\neach frame, there's just an event loop that's just\nconstantly pulling events. Key presses, network events\ntimers, and stuff like that.",
    "start": "894720",
    "end": "901569"
  },
  {
    "text": "And then, seeing if there\nare any handlers associated with those events. And if so, it fires them. So who should be able to define\nevent handlers for this HTML.",
    "start": "901570",
    "end": "908800"
  },
  {
    "text": "Should google.com\nbe able to do it. It's not from foo.com\nso maybe, maybe not.",
    "start": "908800",
    "end": "914520"
  },
  {
    "text": "Another question, too, is\nwhat's the relationship between this Facebook frame\nhere and the larger frame?",
    "start": "914520",
    "end": "919930"
  },
  {
    "text": "The Facebook frame\nis an HTTPS, secure. foo.com is an HTTP, nonsecure.",
    "start": "919930",
    "end": "926460"
  },
  {
    "text": "So how should these two\nthings be able to interact? So basically, to\nanswer these questions,",
    "start": "926460",
    "end": "931900"
  },
  {
    "text": "browsers use a security model\ncalled the same-origin policy.",
    "start": "931900",
    "end": "938015"
  },
  {
    "start": "938015",
    "end": "943910"
  },
  {
    "text": "So there's, sort\nof, this vague goal because a lot of things\nwith respect to web security",
    "start": "943910",
    "end": "949460"
  },
  {
    "text": "are, kind of, vague\nbecause nobody knows what they're doing. But the basic idea\nis two websites",
    "start": "949460",
    "end": "958140"
  },
  {
    "text": "should not be able to\ntamper with each other,",
    "start": "958140",
    "end": "963654"
  },
  {
    "text": "unless they want to. ",
    "start": "963654",
    "end": "974089"
  },
  {
    "text": "So defining what tampering\nmeans was actually easier",
    "start": "974090",
    "end": "979860"
  },
  {
    "text": "when the web was simpler. But as we keep adding\nthese new APIs, it's more and more\ndifficult to understand what",
    "start": "979860",
    "end": "984990"
  },
  {
    "text": "this non-tampering goal means. So for example,\nit's obviously bad if two websites, which\ndon't trust each other,",
    "start": "984990",
    "end": "992010"
  },
  {
    "text": "can over write o each\nother's visual display. That seems like an\nobviously bad thing. It seems like an\nobviously good thing",
    "start": "992010",
    "end": "999000"
  },
  {
    "text": "if two websites, which\nwant to collaborate, are able to, somehow,\nexchange data in a safe way.",
    "start": "999000",
    "end": "1004977"
  },
  {
    "text": "So you can think of mash up\nsites you may have heard of. So sometimes you'll see\nthese things in the internet. It's like someone\ntakes Google map data,",
    "start": "1004977",
    "end": "1010990"
  },
  {
    "text": "and then takes the\nlocation of food trucks. And then, you have\nthis amazing mash up that allows you to eat cheaply\nand avoid salmonella, right?",
    "start": "1010990",
    "end": "1017140"
  },
  {
    "text": "So that seems like a thing\nyou should be able to do. But how, exactly, do we enable\nthat type of composition?",
    "start": "1017140",
    "end": "1022695"
  },
  {
    "text": "Then there's other things that\nare, kind of, hard to say. So for example, if JavaScript\ncode comes from origin",
    "start": "1022695",
    "end": "1027909"
  },
  {
    "text": "x inside of a page\nthat's from origin y, how exactly should that code\nand that content compose?",
    "start": "1027910",
    "end": "1035920"
  },
  {
    "text": "So the strategy that the\nsame-origin policy user can be",
    "start": "1035920",
    "end": "1043220"
  },
  {
    "text": "roughly described as follows. So each resource is\nassigned an origin, which",
    "start": "1043220",
    "end": "1058830"
  },
  {
    "text": "we'll discuss in a second. ",
    "start": "1058830",
    "end": "1064790"
  },
  {
    "text": "And essentially,\na JavaScript code can only access resources\nfrom its own origin.",
    "start": "1064790",
    "end": "1077429"
  },
  {
    "start": "1077430",
    "end": "1085820"
  },
  {
    "text": "So this is the\nhigh level strategy the same origin policy uses. But the devil's in the details.",
    "start": "1085820",
    "end": "1091355"
  },
  {
    "text": "And there's the ton of\nexceptions, which we're going to look into in a second. But first of all,\nbefore we proceed,",
    "start": "1091355",
    "end": "1097179"
  },
  {
    "text": "let's define what an origin is. So an origin is, basically,\na network protocol scheme",
    "start": "1097180",
    "end": "1109310"
  },
  {
    "text": "plus a host name plus a port.",
    "start": "1109310",
    "end": "1116140"
  },
  {
    "text": " So for example, we can have\nsomething like HTTP foo.com.",
    "start": "1116140",
    "end": "1124952"
  },
  {
    "text": " And then, maybe,\nit's index.html. ",
    "start": "1124952",
    "end": "1135130"
  },
  {
    "text": "So the scheme here is HTTP. And the host name is foo.com.",
    "start": "1135130",
    "end": "1142400"
  },
  {
    "text": "And the port is 80. Now the port, in this\ncase, is implicit. The port is the port\non the server side",
    "start": "1142400",
    "end": "1148830"
  },
  {
    "text": "that the client uses to connect. So if you see a URL\nfrom the HTTP scheme and there's no port that's\nexplicitly supplied, then,",
    "start": "1148830",
    "end": "1156550"
  },
  {
    "text": "implicitly, that port is 80. So then, if we look at\nsomething like the HTTPS,",
    "start": "1156550",
    "end": "1166220"
  },
  {
    "text": "once again, foo.com index.html. ",
    "start": "1166220",
    "end": "1173340"
  },
  {
    "text": "So these two URLs have\nthe same host name. Right? But they have, actually,\ndifferent schemes.",
    "start": "1173340",
    "end": "1180880"
  },
  {
    "text": "HTTPS vs HTTP. And also, here, the\nport is implicitly 443.",
    "start": "1180880",
    "end": "1186710"
  },
  {
    "text": "That's the default HTTPS port. So these two URLs have\ndifferent origins.",
    "start": "1186710",
    "end": "1191940"
  },
  {
    "text": "And then, as a final\nexample, if you had a site like HTTP\nbar.com, then you",
    "start": "1191940",
    "end": "1200830"
  },
  {
    "text": "can use this colon\nnotation here. 8181.",
    "start": "1200830",
    "end": "1207330"
  },
  {
    "text": "You know, these\nthings beyond here don't matter with respect to\nthe same origin policy, at least",
    "start": "1207330",
    "end": "1212915"
  },
  {
    "text": "with respect to this\nvery simple example. Here, we see that we have\na scheme of HTTP, a host",
    "start": "1212915",
    "end": "1217930"
  },
  {
    "text": "name of bar.com, and here we've\nexplicitly specified the port. So in this case, it's a\nnon-default port of 8181.",
    "start": "1217930",
    "end": "1225771"
  },
  {
    "text": "So does that make sense? It's pretty straightforward. OK, so this is, basically,\nwhat an origin is.",
    "start": "1225771",
    "end": "1233970"
  },
  {
    "text": "Loosely speaking, you can think\nof an origin as a UID in Unix",
    "start": "1233970",
    "end": "1239630"
  },
  {
    "text": "with the frame being loosely\nconsidered as, like, a process. So there are four basic\nideas behind the browser's",
    "start": "1239630",
    "end": "1253409"
  },
  {
    "text": "implementation of the\nsame origin policy. So first idea is each origin\nhas client side resources.",
    "start": "1253410",
    "end": "1268350"
  },
  {
    "start": "1268350",
    "end": "1274179"
  },
  {
    "text": "So what are examples\nof those resources? Things like cookies.",
    "start": "1274180",
    "end": "1281559"
  },
  {
    "text": "Now you can think of\ncookies as a very simple way to implement state in a\nstateless protocol like HTTP.",
    "start": "1281560",
    "end": "1289560"
  },
  {
    "text": "Basically, a cookie is\nlike a tiny file that's associated with each origin. And we'll talk about the\nspecifics of this in a bit.",
    "start": "1289560",
    "end": "1295780"
  },
  {
    "text": "But the basic idea is that when\nthe browser sends a request to a particular website,\nit includes any cookies",
    "start": "1295780",
    "end": "1300960"
  },
  {
    "text": "that the client has\nfor that website. And you can use these\ncookies for things",
    "start": "1300960",
    "end": "1306230"
  },
  {
    "text": "like implementing\npassword remembering. Maybe if you were going\nto an ecommerce site, you can remember stuff\nabout a user's shopping cart",
    "start": "1306230",
    "end": "1313934"
  },
  {
    "text": "in these cookies,\nso on and so forth. So cookies are one\nthing that each origin",
    "start": "1313935",
    "end": "1319529"
  },
  {
    "text": "can be associated with. Also, you can think\nof DOM storage as another one of\nthese resources.",
    "start": "1319530",
    "end": "1326170"
  },
  {
    "text": "This is a fairly new interface. But think of DOM storage\nas just a key value store.",
    "start": "1326170",
    "end": "1331820"
  },
  {
    "text": "So DOM storage allows\nan origin to say, for this given key,\nwhich is a string, let me associate\nit with this given",
    "start": "1331820",
    "end": "1338020"
  },
  {
    "text": "value, which is also a string. Another thing that is\nsocial with an origin",
    "start": "1338020",
    "end": "1346390"
  },
  {
    "text": "is a JavaScript name space. ",
    "start": "1346390",
    "end": "1352810"
  },
  {
    "text": "So that JavaScript\nname space defines what functions and\nwhat interfaces are available to the origin.",
    "start": "1352810",
    "end": "1358887"
  },
  {
    "text": "Some of those\ninterfaces are built in. Like, let's say, the string\nprototype and stuff like that. And then, an application\nmight actually",
    "start": "1358887",
    "end": "1364514"
  },
  {
    "text": "fill the JavaScript namespace\nwith some other content. There's also this thing\ncalled the DOM tree.",
    "start": "1364514",
    "end": "1373180"
  },
  {
    "text": "So DOM is short for\nDocument Object Model. And the Dom tree\nis, essentially,",
    "start": "1373180",
    "end": "1378409"
  },
  {
    "text": "a JavaScript reflection\nof the HTML in a page. So you can imagine\nthat the DOM tree",
    "start": "1378410",
    "end": "1387409"
  },
  {
    "text": "has a node for the topmost\nHTML5 node in the HTML.",
    "start": "1387410",
    "end": "1394690"
  },
  {
    "text": "And then, it's going to have\na node for the head tag.",
    "start": "1394690",
    "end": "1400820"
  },
  {
    "text": "Then, it's going to have\na node for the body tag. ",
    "start": "1400820",
    "end": "1407176"
  },
  {
    "text": "All right, so on and so forth. So the way that a lot\nof dynamic web pages",
    "start": "1407176",
    "end": "1412269"
  },
  {
    "text": "are made dynamic is\nthe JavaScript code can access this data\nstructure in JavaScript",
    "start": "1412270",
    "end": "1417630"
  },
  {
    "text": "that mirrors the HTML content. So you can imagine an\nanimation takes place by changing some\nof these nodes down",
    "start": "1417630",
    "end": "1423000"
  },
  {
    "text": "here to implement different\norganizations of various tabs. So that's what the DOM tree is.",
    "start": "1423000",
    "end": "1429290"
  },
  {
    "text": "There's also a\nvisual display area. ",
    "start": "1429290",
    "end": "1437398"
  },
  {
    "text": "Although, we'll see that\nthe visual display area actually interacts very\nstrangely with the same origin policy.",
    "start": "1437398",
    "end": "1442910"
  },
  {
    "text": "So on and so forth. So at high level,\neach origin has access to some set of client side\nresources of these types.",
    "start": "1442910",
    "end": "1450159"
  },
  {
    "text": "Doe that make sense? And then, the second big\nidea is that each frame",
    "start": "1450160",
    "end": "1461920"
  },
  {
    "text": "gets the origin of its URL.",
    "start": "1461920",
    "end": "1468100"
  },
  {
    "start": "1468100",
    "end": "1474059"
  },
  {
    "text": "So as I mentioned\nbefore, a frame is, roughly, analogous\nto a process in Unix.",
    "start": "1474060",
    "end": "1479850"
  },
  {
    "text": "It's, kind of, like\na name space that aggregates a bunch of\nother different resources.",
    "start": "1479850",
    "end": "1485700"
  },
  {
    "text": "So third idea is that\nscripts, so JavaScript code,",
    "start": "1485700",
    "end": "1495380"
  },
  {
    "text": "execute with the authority\nof it's frame's origin.",
    "start": "1495380",
    "end": "1509700"
  },
  {
    "start": "1509700",
    "end": "1518510"
  },
  {
    "text": "OK, so what that means is that\nfoo.com imports a JavaScript file from bar.com.",
    "start": "1518510",
    "end": "1524130"
  },
  {
    "text": "Well, that JavaScript\nfile is going to be able to act with\nthe authority of foo.com.",
    "start": "1524130",
    "end": "1530779"
  },
  {
    "text": "So loosely speaking, this\nis, sort of, similar to if you were in the\nUnix world to run",
    "start": "1530780",
    "end": "1536220"
  },
  {
    "text": "a binary that, sort of,\nbelonged in someone else's home directory. That thing would sort of,\nexecute, with your privileged",
    "start": "1536220",
    "end": "1541760"
  },
  {
    "text": "there. And the fourth thing is\nthere's passive content.",
    "start": "1541760",
    "end": "1550020"
  },
  {
    "text": "So by passive content I mean\nthings like that images,",
    "start": "1550020",
    "end": "1555980"
  },
  {
    "text": "for example. Or CSS file or things like that. These are things,\nwhich we don't think",
    "start": "1555980",
    "end": "1561800"
  },
  {
    "text": "of as having executable code. So passive content gets zero\nauthority from the browser.",
    "start": "1561800",
    "end": "1568800"
  },
  {
    "start": "1568800",
    "end": "1576430"
  },
  {
    "text": "So that, kind of, makes sense. We'll see why this fourth\nthing is a little bit subtle in a second.",
    "start": "1576430",
    "end": "1582280"
  },
  {
    "text": "So going back to\nour example here. So we see, for example,\nthat the Google Analytics",
    "start": "1582280",
    "end": "1587830"
  },
  {
    "text": "script and the jQuery script\ncan access all kinds of stuff in foo.com.",
    "start": "1587830",
    "end": "1593630"
  },
  {
    "text": "So for example, they can\nread and write cookies. They can do things like attach\nevent handlers to buttons here.",
    "start": "1593630",
    "end": "1599440"
  },
  {
    "text": "So on and so forth. If we look at the Facebook\nframe and its relationship",
    "start": "1599440",
    "end": "1604900"
  },
  {
    "text": "to the larger foo.com\nframe, then we see that they're from\ndifferent origins because they have\ndifferent schemes here.",
    "start": "1604900",
    "end": "1611830"
  },
  {
    "text": "They have different host names. Different ports. So what this means is that they\nare, to a first approximation,",
    "start": "1611830",
    "end": "1618630"
  },
  {
    "text": "isolated. Now they can communicate\nif they both opt into it using this interface\ncalled postMessage.",
    "start": "1618630",
    "end": "1627885"
  },
  {
    "text": " So postMessage allows\ntwo different frames",
    "start": "1627885",
    "end": "1637320"
  },
  {
    "text": "to exchange asynchronous\nimmutable messages with each other. So think of this facility\nas allowing Facebook",
    "start": "1637320",
    "end": "1645080"
  },
  {
    "text": "to try to send a string. Not a reference, a string up\nto the enclosing foo.com frame.",
    "start": "1645080",
    "end": "1650860"
  },
  {
    "text": "Now note that if foo.com doesn't\nwant to receive those messages, it doesn't have to. So this has to be opt\nin from both sides",
    "start": "1650860",
    "end": "1657940"
  },
  {
    "text": "to get this thing to work. So note that the JavaScript\ncode here in the Facebook frame",
    "start": "1657940",
    "end": "1665880"
  },
  {
    "text": "cannot issue an XML HTTP\nrequest to the foo.com server.",
    "start": "1665880",
    "end": "1671860"
  },
  {
    "text": "That's once again because\nnetwork destinations also have these origins that\nare associated with them. So because Facebook.com does not\nhave the same origin as foo.com",
    "start": "1671860",
    "end": "1680220"
  },
  {
    "text": "it can't asynchronously fetch\nstuff from it via HTML request.",
    "start": "1680220",
    "end": "1685610"
  },
  {
    "text": "So the last thing\nwe can look at we can say, OK, we got an\nimage up here from ads.com. This is rule number\nfour over there.",
    "start": "1685610",
    "end": "1692302"
  },
  {
    "text": "So it seems pretty\nstraightforward. This is an image. It has no executable code. So clearly, the browser's\ngoing to give it no authority.",
    "start": "1692302",
    "end": "1698350"
  },
  {
    "text": "Now that seems kind\nof like a dumb thing. Like, why are you even\ntalking about images having authority or\nnot having authority?",
    "start": "1698350",
    "end": "1703800"
  },
  {
    "text": "It seems obvious that images\nshouldn't be able to do stuff. Well it's a security class. So clearly, there is mischief\nthat hides in statement number",
    "start": "1703800",
    "end": "1712005"
  },
  {
    "text": "four up there. So what happens if the browser\nincorrectly parses an object",
    "start": "1712005",
    "end": "1719600"
  },
  {
    "text": "and misattributes it's type? So you can actually get into\nsecurity problems there.",
    "start": "1719600",
    "end": "1724630"
  },
  {
    "text": "And this was actually a\nreal security problem. So there's this thing called\nthe MIME sniffing attack. So the MIME type--\nI mean, you've",
    "start": "1724630",
    "end": "1730876"
  },
  {
    "text": "probably seen these before. You knows it's Something\nlike text dot HTML",
    "start": "1730876",
    "end": "1736176"
  },
  {
    "text": "or image.JPEG Things like that. This was like a MIME type. So old versions of i.e used to\ndo something that they thought",
    "start": "1736176",
    "end": "1744690"
  },
  {
    "text": "was going to be helpful for you. So sometimes what\nweb servers will do is they will misattribute the\nfile extension of an object.",
    "start": "1744690",
    "end": "1753519"
  },
  {
    "text": "So you can imagine that\na web server that's been configured incorrectly\nmight attach a dot HTML",
    "start": "1753519",
    "end": "1759050"
  },
  {
    "text": "suffix to something\nthat's really an image. Or it might attach\na dot JPEG suffix",
    "start": "1759050",
    "end": "1764470"
  },
  {
    "text": "to something that's really HTML. So what IE would do\nback in the olden days is try to help you out.",
    "start": "1764470",
    "end": "1771039"
  },
  {
    "text": "So IE would go out. It would go fetch this resource. And it would say,\nOK, this resource",
    "start": "1771040",
    "end": "1777020"
  },
  {
    "text": "claims to be of some type,\naccording to its file name extension. But then it would actually\nlook at the first 256 bytes",
    "start": "1777020",
    "end": "1783519"
  },
  {
    "text": "of what was in that object. And if it found certain\nmagic values in there that indicated that there\nwas a different type for that",
    "start": "1783520",
    "end": "1790380"
  },
  {
    "text": "object, it would just say, hey,\nI found something cool here. The web server\nmisidentified the object.",
    "start": "1790380",
    "end": "1796629"
  },
  {
    "text": "Let me just treat the\nobject like it's type that I found in these\nfirst 256 bytes.",
    "start": "1796630",
    "end": "1801779"
  },
  {
    "text": "And then, everybody's\na winner because I've helped the web\nserver developer out because now their website's\ngoing to render properly.",
    "start": "1801779",
    "end": "1808396"
  },
  {
    "text": "And the user's\ngoing to like this because they get to\nunlock this content that would have been garbage before. But this is clearly\na vulnerability",
    "start": "1808396",
    "end": "1815320"
  },
  {
    "text": "because suppose that a page\nincludes some passive content. Like, let's say, an image\nfrom a domain that's",
    "start": "1815320",
    "end": "1823400"
  },
  {
    "text": "controlled by the attacker. Now from the perspective of\nthe victim page, it's saying,",
    "start": "1823400",
    "end": "1828750"
  },
  {
    "text": "even if this attacker site is\nevil, it's passive content. It can't do anything.",
    "start": "1828750",
    "end": "1834189"
  },
  {
    "text": "Like, at worst, it displays\nan unfortunate image. But it can't actually\naccess any code because passive content\ngives 0 authority.",
    "start": "1834189",
    "end": "1840820"
  },
  {
    "text": "But what would happen is that\nIE could sniff this image. The first 256 bytes.",
    "start": "1840820",
    "end": "1846300"
  },
  {
    "text": "And the attacker\ncould intentionally put HTML and\nJavaScript in there. So what would happen is\nthat the victim site brings",
    "start": "1846300",
    "end": "1853220"
  },
  {
    "text": "in what it thinks is an image. IE coerces it into\nHTML and JavaScript.",
    "start": "1853220",
    "end": "1858260"
  },
  {
    "text": "And then, executes that\ncode in the context of that enclosing page.",
    "start": "1858260",
    "end": "1864790"
  },
  {
    "text": "So does that attack make sense? so This is, sort of, an example\nof how complex browsers are",
    "start": "1864790",
    "end": "1872420"
  },
  {
    "text": "and how adding even a very\nwell intentioned feature can cause these very\nsubtle security bugs.",
    "start": "1872420",
    "end": "1882010"
  },
  {
    "text": "So let's now dig down\nand take a deeper look at how the browser\nsecures various resources.",
    "start": "1882010",
    "end": "1889870"
  },
  {
    "text": "So let's look at frames\nand window objects.",
    "start": "1889870",
    "end": "1896515"
  },
  {
    "start": "1896515",
    "end": "1902100"
  },
  {
    "text": "So frames represent these\nseparate JavaScript universes that we discussed over here.",
    "start": "1902100",
    "end": "1908720"
  },
  {
    "text": "I mean, implementation\nwise, a frame with respect to JavaScript\nis an instance of a DOM node.",
    "start": "1908720",
    "end": "1915400"
  },
  {
    "text": "So I forget where\nI drew-- oh, yeah. This DOM node up here. So the frame would\nexist as a DOM node",
    "start": "1915400",
    "end": "1921340"
  },
  {
    "text": "object somewhere in\nthis hierarchy that's visible to JavaScript. In JavaScript, the window\nobject is actually an alias",
    "start": "1921340",
    "end": "1927900"
  },
  {
    "text": "for the global name space. It's, kind of, this wacky idea. Like, if you were to find\nthis global variable name x,",
    "start": "1927900",
    "end": "1932980"
  },
  {
    "text": "you can also access it\nvia the name window.x. OK, so basically, frames\nand window objects",
    "start": "1932980",
    "end": "1939260"
  },
  {
    "text": "are very powerful references\nfor you to be able to access. And they actually contain\npointers to each other.",
    "start": "1939260",
    "end": "1944662"
  },
  {
    "text": "The frame can\n[INAUDIBLE] a pointer to the associated window\nobject and vice versa. So these two things\nare, essentially,",
    "start": "1944662",
    "end": "1950020"
  },
  {
    "text": "equivalently powerful. So frame and window objects get\nthe origin of the framed URL.",
    "start": "1950020",
    "end": "1963220"
  },
  {
    "start": "1963220",
    "end": "1969909"
  },
  {
    "text": "Or because there's always\nan or in web security, they can get a suffix of\nthe original domain name.",
    "start": "1969910",
    "end": "1990530"
  },
  {
    "text": "The original origin. So for example, a\nframe could start off",
    "start": "1990530",
    "end": "1998200"
  },
  {
    "text": "having an initial origin. x dot y dot z dot com.",
    "start": "1998200",
    "end": "2006770"
  },
  {
    "text": "So let's ignore the scheme\nand the protocol for a second. So initially, the page\ncan start off like this.",
    "start": "2006770",
    "end": "2013020"
  },
  {
    "text": "It can then intentionally\nsay I want to set my origin",
    "start": "2013020",
    "end": "2019470"
  },
  {
    "text": "to be y dot z dot com. A suffix of that. And the way that\nit indicates this is by doing an assignment\nto the special document",
    "start": "2019470",
    "end": "2031080"
  },
  {
    "text": "dot domain value that's\naccessible via JavaScript.",
    "start": "2031080",
    "end": "2036090"
  },
  {
    "text": "So we can set document dot\ndomain explicitly to this right here. And that's allowable\nbecause this guy",
    "start": "2036090",
    "end": "2042060"
  },
  {
    "text": "is a suffix of that guy. And then, similarly,\nit could also",
    "start": "2042060",
    "end": "2047880"
  },
  {
    "text": "set document dot domain to\nz.com and effectively reset it's origin like that. Now what it cannot do is\nit cannot do something like",
    "start": "2047880",
    "end": "2056980"
  },
  {
    "text": "setting document domain\nto a dot y dot z dot com.",
    "start": "2056980",
    "end": "2063729"
  },
  {
    "text": "That's disallowed\nbecause this is not a problem this is not a proper\nsuffix of the original origin.",
    "start": "2063729",
    "end": "2069370"
  },
  {
    "text": "And also, it cannot set\nits suffix to dot com.",
    "start": "2069370",
    "end": "2075535"
  },
  {
    "text": "So does anyone have any theories\nabout why this is a bad idea? Right, exactly. So people are laughing\nbecause, clearly, this",
    "start": "2075536",
    "end": "2081760"
  },
  {
    "text": "is going to bring out\nthe apocalypse, right. So if it does this,\nthen this means that the site could somehow\nbe able to impact cookies",
    "start": "2081760",
    "end": "2089638"
  },
  {
    "text": "or things like that in\nany dot com site, which will be pretty devastating. The motivation for why these\ntypes of things are allowable",
    "start": "2089639",
    "end": "2096210"
  },
  {
    "text": "is because, presumably,\nthese origins have some type of preexisting\ntrust relationship.",
    "start": "2096210",
    "end": "2102130"
  },
  {
    "text": "So this seems to be vaguely OK. Whereas, this would\nseem to be bad. AUDIENCE: So you can\nmake these splits",
    "start": "2102130",
    "end": "2107650"
  },
  {
    "text": "on any dot or actual end point? Like, for example,\nfor your x.y.zz.com,",
    "start": "2107650",
    "end": "2112811"
  },
  {
    "text": "can you change\nthat to your z.com? PROFESSOR: No, it\nsays on every dot. AUDIENCE: OK.",
    "start": "2112811",
    "end": "2117936"
  },
  {
    "text": "Is there a reason\nthat it wasn't made so that you could specify\nsuper- or subdomain,",
    "start": "2117936",
    "end": "2127559"
  },
  {
    "text": "but somehow they had to agree\non where the information was coming from.",
    "start": "2127560",
    "end": "2133050"
  },
  {
    "text": "So, like, you said some kind of\nI want to consider all of these to be the same origin as me. So any of them can attack me.",
    "start": "2133050",
    "end": "2139940"
  },
  {
    "text": "And then you made this\nsymmetric in order for me to impact them as well? [INAUDIBLE] .com means anything\nthat's .com can impact me.",
    "start": "2139940",
    "end": "2148170"
  },
  {
    "text": "And then you put [INAUDIBLE]. PROFESSOR: Yeah, it's tricky. So there's a couple of\ndifferent answers to that.",
    "start": "2148170",
    "end": "2153840"
  },
  {
    "text": "So first of all, people were\nvery worried about this attack here. So they wanted to make\nthe domain manipulation",
    "start": "2153840",
    "end": "2160569"
  },
  {
    "text": "language be, at least,\nsomewhat easy to understand. So they don't allow\nmore broke settings.",
    "start": "2160570",
    "end": "2165859"
  },
  {
    "text": "I'll get to one thing in a\nsecond, which kind of allows what you're talking about but\nonly with respect to domain [INAUDIBLE].",
    "start": "2165859",
    "end": "2171220"
  },
  {
    "text": "I'll get to that in one second. And another to mention, too, is\nthat the post message interface does allow arbitrary domains\nto communicate with each other",
    "start": "2171220",
    "end": "2178230"
  },
  {
    "text": "if they both opt into it. So in practice, people\nuse post message to cross domain\ncommunication if they",
    "start": "2178230",
    "end": "2185040"
  },
  {
    "text": "can't set their origins\nto be the same using these tricks here.",
    "start": "2185040",
    "end": "2190060"
  },
  {
    "text": "So yeah, so browsers\ncan constrain or widen,",
    "start": "2190060",
    "end": "2195780"
  },
  {
    "text": "I should say, their\ndomain to these suffixes of the original domain. And there's also this little\ninteresting quark here,",
    "start": "2195780",
    "end": "2201570"
  },
  {
    "text": "which is that browsers actually\ndistinguish between a document dot domain value\nthat has been written",
    "start": "2201570",
    "end": "2208150"
  },
  {
    "text": "and one that has not\nbeen written, OK. And there's a subtle\nreason for this we'll get into in a second. So basically, two frames\ncan access each other",
    "start": "2208150",
    "end": "2223099"
  },
  {
    "text": "if one of two things is true. The first thing is both of\nthe frames set document dot",
    "start": "2223100",
    "end": "2233290"
  },
  {
    "text": "domain to the same value.",
    "start": "2233290",
    "end": "2239390"
  },
  {
    "text": " And the other way that two\nframes can access each other",
    "start": "2239390",
    "end": "2247630"
  },
  {
    "text": "is that neither of those frames\nhas changed document domain.",
    "start": "2247630",
    "end": "2256109"
  },
  {
    "start": "2256110",
    "end": "2262310"
  },
  {
    "text": "And of course, both\nvalues have to match. And there's a value match.",
    "start": "2262310",
    "end": "2269278"
  },
  {
    "text": " So the reason for\nthis is a bit subtle.",
    "start": "2269278",
    "end": "2277290"
  },
  {
    "text": "But the basic idea is that\nthese two rules prevent a domain",
    "start": "2277290",
    "end": "2282540"
  },
  {
    "text": "from being attacked by\none of its own buggy or malicious sub-domains.",
    "start": "2282540",
    "end": "2288150"
  },
  {
    "text": "OK? So imagine that you have\nthe domain x.y.z.com. ",
    "start": "2288150",
    "end": "2296540"
  },
  {
    "text": "And then, imagine that it's\ntrying to attack y.z.com. ",
    "start": "2296540",
    "end": "2303526"
  },
  {
    "text": "So this guy up here\nis buggy or evil.",
    "start": "2303526",
    "end": "2309039"
  },
  {
    "text": " So what this guy could try to do\nis actually shorten his domain",
    "start": "2309040",
    "end": "2316140"
  },
  {
    "text": "to be y.z.com. And then, start messing\naround with JavaScript state, or cookies or stuff\nlike that here.",
    "start": "2316140",
    "end": "2322170"
  },
  {
    "text": "Right? So basically, what these\ntwo rules over here will say is that if y.z.com does not\nwant to actually allow anyone",
    "start": "2322170",
    "end": "2329599"
  },
  {
    "text": "to interact with\nit, it will never change it's\ndocument.domain value so that when this frame\nup here does shorten it,",
    "start": "2329600",
    "end": "2337860"
  },
  {
    "text": "the browser will say aha. You've shortened it. You have not. There's a match here\nin terms of the values.",
    "start": "2337860",
    "end": "2343379"
  },
  {
    "text": "But this person\nhasn't indicated they want to opt into this\ntype of chicanery. So does that makes sense?",
    "start": "2343379",
    "end": "2349250"
  },
  {
    "text": " OK, so that is, basically,\nhow frames work with respect",
    "start": "2349250",
    "end": "2358610"
  },
  {
    "text": "to the same origin policy.  So then we can look at how\nour DOM node's treated.",
    "start": "2358610",
    "end": "2367200"
  },
  {
    "text": "So DOM nodes, it's pretty\nstraightforward for DOM nodes. So DOM nodes, basically,\nget the origin",
    "start": "2367200",
    "end": "2373869"
  },
  {
    "text": "of their surrounding frame. Makes sense. Then we can look at cookies. Cookies are complicated\nand a bit tricky.",
    "start": "2373870",
    "end": "2384770"
  },
  {
    "text": "So cookies have a domain.",
    "start": "2384770",
    "end": "2390400"
  },
  {
    "text": "And they have a path. ",
    "start": "2390400",
    "end": "2395809"
  },
  {
    "text": "So for example, you can imagine\na cookie might be associated",
    "start": "2395810",
    "end": "2401040"
  },
  {
    "text": "with the following information. So asterisks dot MIT.edu.",
    "start": "2401040",
    "end": "2406880"
  },
  {
    "text": "And then, 6.858.",
    "start": "2406880",
    "end": "2412029"
  },
  {
    "text": "So you've got this domain\nthing sitting here, and then, you've got this\npath thing sitting over here.",
    "start": "2412030",
    "end": "2418000"
  },
  {
    "text": "So note that this domain\ncan be, possibly, complete suffix of the pages\ncurrent domain.",
    "start": "2418000",
    "end": "2424670"
  },
  {
    "text": "So you can play,\nsomewhat, similar tricks as we had over there. And note that this path\nhere can actually just be set just to the slash with\nnothing else there, which",
    "start": "2424670",
    "end": "2433690"
  },
  {
    "text": "indicates that all\npaths in the domain should be able to have\naccess to this cookie here.",
    "start": "2433690",
    "end": "2440230"
  },
  {
    "text": "But in this case,\nwe actually have one of these nonempty paths. So whoever sets this\ncookie, basically,",
    "start": "2440230",
    "end": "2446500"
  },
  {
    "text": "gets to choose what the\ndomain in the path look like. And it can actually\nbe set by the server",
    "start": "2446500",
    "end": "2451950"
  },
  {
    "text": "or can be set on\nthe client side. So on the client side,\nyou can basically right to this JavaScript\nobject called document.cooking.",
    "start": "2451950",
    "end": "2460985"
  },
  {
    "text": " And there's, sort of,\nthis Byzantine format",
    "start": "2460985",
    "end": "2466540"
  },
  {
    "text": "that you can use to\nindicate all these paths and things like that. But suffice to say\nit can be done. So JavaScript can set\ncookies like this.",
    "start": "2466540",
    "end": "2473280"
  },
  {
    "text": "And also, the\nserver can actually set cookies on HP responses when\nthey come back over the wire.",
    "start": "2473280",
    "end": "2478880"
  },
  {
    "text": "So you can, basically, just\nuse the set cookie header, if you're the server, to\nset some of these things.",
    "start": "2478880",
    "end": "2484590"
  },
  {
    "text": "And know that there's\nalso a secure flag",
    "start": "2484590",
    "end": "2490530"
  },
  {
    "text": "that you can set in the cookie\nto indicate that it's an HTTPS cookie, meaning that\nHTTP content should not",
    "start": "2490530",
    "end": "2498330"
  },
  {
    "text": "be able to access that cookie. So that's the basic\nidea behind cookies.",
    "start": "2498330",
    "end": "2505210"
  },
  {
    "text": "Now note that whenever the\nbrowser generates a request to a particular web\nserver, it's going",
    "start": "2505210",
    "end": "2510580"
  },
  {
    "text": "to include all of the matching\ncookies in that request. So there's a little\nbit of, sort of,",
    "start": "2510580",
    "end": "2516540"
  },
  {
    "text": "string matching\nand algorithms that have to take place to\nfigure out what are all the exact cookies\nthat should be sent",
    "start": "2516540",
    "end": "2521830"
  },
  {
    "text": "to the service for\na particular request because you can have\nall these weird, sort of, suffix\ndomain things going on and so on and so forth.",
    "start": "2521830",
    "end": "2527590"
  },
  {
    "text": "But that's the basic\nidea behind cookies.",
    "start": "2527590",
    "end": "2532890"
  },
  {
    "text": "So does that all make sense? AUDIENCE: So can frames\naccess each other cookies",
    "start": "2532890",
    "end": "2538654"
  },
  {
    "text": "if they match those rules? PROFESSOR: Yeah, so\nframes can do that.",
    "start": "2538654",
    "end": "2544150"
  },
  {
    "text": "But it's dependent on how the\ndocument.domain has been set. And then, it's dependent\non what the cookie domain",
    "start": "2544150",
    "end": "2552315"
  },
  {
    "text": "and path have been set. So yeah, after a bunch of\nthese strained comparisons, yes, frames can access\neach others cookies",
    "start": "2552315",
    "end": "2558610"
  },
  {
    "text": "if all those tests pass. ",
    "start": "2558610",
    "end": "2564220"
  },
  {
    "text": "OK, so yes, that leads me\ninto the next question. So we're trying to figure\nout how different frames can",
    "start": "2564220",
    "end": "2570240"
  },
  {
    "text": "access each others cookies. So what's the problem? What would be the problem is\nwe allowed arbitrary frames",
    "start": "2570240",
    "end": "2576910"
  },
  {
    "text": "to write arbitrary\npeople's cookies? So what do you think? ",
    "start": "2576910",
    "end": "2586513"
  },
  {
    "text": "Well, it will be bad,\nsuffice it to say. The reason it would be bad\nis because, once again, these cookies allow the\nclient side of the application",
    "start": "2586513",
    "end": "2596339"
  },
  {
    "text": "to store a per user data. So you can imagine that if\nan attacker could control",
    "start": "2596340",
    "end": "2602180"
  },
  {
    "text": "or override a users cookie,\nthe attacker could actually, for example, change\nthat cookie for a Gmail",
    "start": "2602180",
    "end": "2607940"
  },
  {
    "text": "to make the user log into\nthe attackers Gmail account.",
    "start": "2607940",
    "end": "2613140"
  },
  {
    "text": "So when the user logged\ninto the attacker Gmail account, any email\nthat the user typed in",
    "start": "2613140",
    "end": "2618820"
  },
  {
    "text": "could be read by the\nattacker, for example. You could also imagine\nthat someone could tamper with the Amazon.com cookie.",
    "start": "2618820",
    "end": "2624177"
  },
  {
    "text": "You know, put all kinds of\nembarrassing ridiculous stuff in your shopping cart,\nperhaps, or so and so forth. So cookies are, actually, a very\nimportant resource to protect.",
    "start": "2624177",
    "end": "2631690"
  },
  {
    "text": "And a lot of web\nsecurity attacks try to steal that cookie to\ndo various kinds of evil.",
    "start": "2631690",
    "end": "2639390"
  },
  {
    "text": "So here's another\ninteresting question with respect to cookies. So let's say that you've\ngot the site that's",
    "start": "2639390",
    "end": "2648420"
  },
  {
    "text": "coming from foo.co.uk. ",
    "start": "2648420",
    "end": "2654800"
  },
  {
    "text": "So should the site\nfrom this host name be allowed to set\na cookie for co.uk?",
    "start": "2654800",
    "end": "2664119"
  },
  {
    "text": " So this is a bit subtle\nbecause, according",
    "start": "2664120",
    "end": "2670146"
  },
  {
    "text": "to the rules that\nwe've discussed before, a site from here should\nbe able to shorten its domain,",
    "start": "2670146",
    "end": "2677320"
  },
  {
    "text": "set a cookie for this, and\nthat all seems to be legal. Now of course, as\na human, we think",
    "start": "2677320",
    "end": "2682760"
  },
  {
    "text": "this is kind of suspicious\nbecause, as a human, we actually understand that\nthis is morally speaking",
    "start": "2682760",
    "end": "2688819"
  },
  {
    "text": "a single atomic domain. Morally speaking, this\nis equivalent to .com.",
    "start": "2688820",
    "end": "2694640"
  },
  {
    "text": "The British got screwed. They have to have\na dot in there. But that's not their\nfault. History's unfair. Right? So morally speaking,\nthis is a single domain.",
    "start": "2694640",
    "end": "2702470"
  },
  {
    "text": "So you actually have to have\nsome special infrastructure to get the cookie setting\nrules to work out correctly.",
    "start": "2702470",
    "end": "2708260"
  },
  {
    "text": "So essentially, Mozilla,\nthey have this website called publicsuffix.org.",
    "start": "2708260",
    "end": "2715430"
  },
  {
    "start": "2715430",
    "end": "2721220"
  },
  {
    "text": "And basically, what\nthis website contains are lists of these rules for\nhow cookies, and origins,",
    "start": "2721220",
    "end": "2729360"
  },
  {
    "text": "and domains should be shrunk\ngiven that some things might have dots in them. But actually, they should be\ntreated as a single, sort of,",
    "start": "2729360",
    "end": "2737010"
  },
  {
    "text": "atomic thing. So actually, when your\nbrowser is figuring out how it should do all these\nvarious cookie manipulations,",
    "start": "2737010",
    "end": "2744512"
  },
  {
    "text": "it's actually going\nto consult this side. Or it's going to have\nthis baked in somehow or something like\nthat to make sure that foo.co.uk can't actually\njust shorten its domain",
    "start": "2744512",
    "end": "2752790"
  },
  {
    "text": "to co.uk. And then, perform\nsome chicanery. So once again, this\nis very subtle.",
    "start": "2752790",
    "end": "2759220"
  },
  {
    "text": "And a lot of the\ninteresting web security issues that we find\ncome about because a lot",
    "start": "2759220",
    "end": "2764740"
  },
  {
    "text": "of the original infrastructure\nwas designed just for the English language. You know, for ASCII text\nor something like this.",
    "start": "2764740",
    "end": "2771150"
  },
  {
    "text": "It wasn't designed for an\ninternational community. So as the internet became more\npopular, people said, hey,",
    "start": "2771150",
    "end": "2778275"
  },
  {
    "text": "we made some pretty big\ndesign decisions here at the beginning. We should actually\nmake this usable on people who use our narrow\nunderstanding of what language",
    "start": "2778275",
    "end": "2785181"
  },
  {
    "text": "means. You run into all\nthese crazy problems. And I'll give you\nanother example one of those a later lecture.",
    "start": "2785181",
    "end": "2791520"
  },
  {
    "text": "So does this all makes sense? OK. So with respect to\nXML HTTP responses,",
    "start": "2791520",
    "end": "2804930"
  },
  {
    "text": "how are they treated by\nthe same origin policy?",
    "start": "2804930",
    "end": "2810740"
  },
  {
    "text": " So by default, JavaScript can\nonly generate one of these",
    "start": "2810740",
    "end": "2818510"
  },
  {
    "text": "if it's going to\nits origin server. However, there's this\nnew interface called",
    "start": "2818510",
    "end": "2825500"
  },
  {
    "text": "cross origin request or CORS. All right, so this\nis the same origin",
    "start": "2825500",
    "end": "2833970"
  },
  {
    "text": "unless the server has\nenabled this CORS thing.",
    "start": "2833970",
    "end": "2840500"
  },
  {
    "text": " So basically, this adds a new\nHTTP response header called",
    "start": "2840500",
    "end": "2849960"
  },
  {
    "text": "access control allow origin.",
    "start": "2849960",
    "end": "2856480"
  },
  {
    "start": "2856480",
    "end": "2862100"
  },
  {
    "text": "So let's say that\nJavaScript from foo.com wants to make an XML\nHTTP request to bar.com.",
    "start": "2862100",
    "end": "2867470"
  },
  {
    "text": "So that's cross origin, as we\ndescribed in the rules so far. So if the server in bar.com\nwants to allow this,",
    "start": "2867470",
    "end": "2875380"
  },
  {
    "text": "it will return in it's HTTP\nresponse this header here that's going to say, yes, I\nallow, for example, foo.com",
    "start": "2875380",
    "end": "2887670"
  },
  {
    "text": "to send me these cross\norigin XML HTTP request.",
    "start": "2887670",
    "end": "2893220"
  },
  {
    "text": "The server on bar.com\ncould actually say no. It could refuse the request. In which case, the browser\nwould fail the XML HTTP request.",
    "start": "2893220",
    "end": "2901440"
  },
  {
    "text": "So this is, sort of,\na new thing that's come up in large part because\nof these mash up applications.",
    "start": "2901440",
    "end": "2907270"
  },
  {
    "text": "This need for,\nsomehow, applications from different developers\nand different domains",
    "start": "2907270",
    "end": "2912690"
  },
  {
    "text": "to be able to share data in\nsome type of constrained way. So this could also be\nasterisks over here",
    "start": "2912690",
    "end": "2918085"
  },
  {
    "text": "if anybody can fetch\nthe data cross-origin, so on and so forth. So I think that's\npretty straightforward.",
    "start": "2918085",
    "end": "2925316"
  },
  {
    "text": "So I mean, there's a\nbunch of other resources we could look at. For example, images.",
    "start": "2925316",
    "end": "2932030"
  },
  {
    "text": "So a frame can load images from\nany origin that it desires. But it can't actually inspect\nthe bits in that image",
    "start": "2932030",
    "end": "2941044"
  },
  {
    "text": "because, somehow, the\nsame origin policy says that having\ndifferent origin directly inspect each others\ncontent is a bad thing.",
    "start": "2941044",
    "end": "2947870"
  },
  {
    "text": "So the frame can't\ninspect the bits. But it can, actually,\ninfer things like what the size of the image\nis because it can actually",
    "start": "2947870",
    "end": "2954630"
  },
  {
    "text": "see where the other\ndominoes in that page have been placed, for example. So this is another one of\nthese weird instances where",
    "start": "2954630",
    "end": "2960700"
  },
  {
    "text": "the same origin\npolicy is ostensibly trying to prevent all\ninformation leakage. But it can't actually\nprevent all of it",
    "start": "2960700",
    "end": "2965805"
  },
  {
    "text": "because embedding\ninherently reveals some types of information. CSS has a similar\nstory to images.",
    "start": "2965805",
    "end": "2973280"
  },
  {
    "text": "So a frame can embed\nCSS from any origin. However, it cannot directly\ninspect the text inside that",
    "start": "2973280",
    "end": "2981849"
  },
  {
    "text": "CSS file, if it's from\na different origin. But it can actually imply what\nthis CSS does because it just",
    "start": "2981850",
    "end": "2987640"
  },
  {
    "text": "can create a bunch of nodes. And then, see how they're\nstyling gets changed. So it's a bit wacky.",
    "start": "2987640",
    "end": "2993740"
  },
  {
    "text": "JavaScript is actually\nmy favorite example",
    "start": "2993740",
    "end": "2999020"
  },
  {
    "text": "of how this same\norigin policy struggles to maintain any type of\nintellectual consistency.",
    "start": "2999020",
    "end": "3004550"
  },
  {
    "text": "So the idea here is that, if\nyou do a cross origin fetch of JavaScript, that is allowed.",
    "start": "3004550",
    "end": "3010980"
  },
  {
    "text": "You can allow that\nexternal JavaScript to execute in the\ncontext of your own page. You cannot, however, look\nat the source code for it.",
    "start": "3010980",
    "end": "3019300"
  },
  {
    "text": "So if you have a\nscript tag source equals something\noutside your domain, then when that\nsource gets executed,",
    "start": "3019300",
    "end": "3025922"
  },
  {
    "text": "you can call functions in it. But you can't actually look\nat the JavaScript source code in it. OK, fine.",
    "start": "3025922",
    "end": "3031369"
  },
  {
    "text": "So that seems very nice. However, there are a\nbunch of holes in this. So for example, JavaScript is\ndynamic scripting language.",
    "start": "3031370",
    "end": "3038040"
  },
  {
    "text": "And functions are\nfirst class objects. So for any function f, you\ncan just call f.tostring.",
    "start": "3038040",
    "end": "3047089"
  },
  {
    "text": "And that will give you the\nsource code for the function. And people do this all the time. Do things like dynamic\nrewriting and stuff like that.",
    "start": "3047090",
    "end": "3054654"
  },
  {
    "text": "So you know the\nsame origin policy doesn't allow you\nto directly look at the contents of\nthe script tag itself?",
    "start": "3054654",
    "end": "3060140"
  },
  {
    "text": "You can just call this\nfor any public function that that external\nscript has given you. And just get the\nsource code like that.",
    "start": "3060140",
    "end": "3066600"
  },
  {
    "text": "Another thing you\ncould imagine doing is you could just get your\nhome server from your domain to just fetch the\nsource code for you.",
    "start": "3066600",
    "end": "3073980"
  },
  {
    "text": "And then, just send\nit back to you. So oops. I mean, you essentially\njust asked your home server",
    "start": "3073980",
    "end": "3079400"
  },
  {
    "text": "to run Wget. And you get the\nsource code that way. OK, so that's, kind\nof think, goofy. So long story short,\nthe same origin policies",
    "start": "3079400",
    "end": "3087290"
  },
  {
    "text": "here are a bit odd. AUDIENCE: Presume that\npar of the reason they do it is to prevent the user\nfrom fetching JavaScript",
    "start": "3087290",
    "end": "3093281"
  },
  {
    "text": "because then cookies\nwill be sent as well. So you can get JavaScript\ntailored to you. PROFESSOR: Yeah. AUDIENCE: So if you get your\nserver to fetch it for you,",
    "start": "3093281",
    "end": "3100259"
  },
  {
    "text": "it won't have the user's\ncookies [INAUDIBLE]. PROFESSOR: That is true. Although, in practice,\na lot of times, the raw source code, itself, is\nnot user tailored in practice.",
    "start": "3100260",
    "end": "3109119"
  },
  {
    "text": "But you're right\nthat it will prevent some cookie-mediated\nattacks like that. Modulo, some of the\ncookie [INAUDIBLE].",
    "start": "3109119",
    "end": "3114630"
  },
  {
    "text": "But that's exactly correct. So because it's actually pretty\neasy for users and applications",
    "start": "3114630",
    "end": "3122505"
  },
  {
    "text": "to get JavaScript source\ncode, a lot of times, JavaScript source code,\nwhen it's deployed, it's actually\nobfuscated and minified.",
    "start": "3122505",
    "end": "3129070"
  },
  {
    "text": "So if you've ever tried to look\nand see how a web page works, if you look at the\nsource, sometimes people will do things like move\nall the white space.",
    "start": "3129070",
    "end": "3136330"
  },
  {
    "text": "They will also change\nall the variable names to be super short and have\nall these exclamation marks. Looks like cartoon characters\ncursing in the cartoons.",
    "start": "3136330",
    "end": "3143940"
  },
  {
    "text": "So that's, sort of,\nlike a cheat form of digital rights management. But it's all, ultimately,\na bit of a crap shoot",
    "start": "3143940",
    "end": "3152090"
  },
  {
    "text": "because you can do\nthings like execute that code in your own browser. See what it does.",
    "start": "3152090",
    "end": "3157300"
  },
  {
    "text": "Sniff the network. See who it talks to,\nso on and so forth. But that's, basically, the same\norigin story for JavaScript.",
    "start": "3157300",
    "end": "3164480"
  },
  {
    "text": "Plug-ins-- AUDIENCE: I was\nunder the impression that the reason you\ndo that is [INAUDIBLE]",
    "start": "3164480",
    "end": "3170051"
  },
  {
    "text": "take less time to download\nrather than [INAUDIBLE]. PROFESSOR: So that is also\na reason they do that, too. That's a good point.",
    "start": "3170051",
    "end": "3176100"
  },
  {
    "text": "But I mean, if you type\ninto the internet, sort of, web page obfuscation\nor stuff like that,",
    "start": "3176100",
    "end": "3182500"
  },
  {
    "text": "people often try to, somehow,\nmake some type of secrets into either their HTML\nor their JavaScript.",
    "start": "3182500",
    "end": "3188330"
  },
  {
    "text": "Maybe they want to\nobscure the protocol. For example, if the client\nuses it to talk to the server. Some people will also do the\nobfuscation for that reason.",
    "start": "3188330",
    "end": "3196222"
  },
  {
    "text": "Pure minification--\nin other words, just making the\nvariable names small and moving the\n[INAUDIBLE] space--",
    "start": "3196222",
    "end": "3201360"
  },
  {
    "text": "yeah, that's mainly just to save\ndownload band, download time. ",
    "start": "3201360",
    "end": "3208611"
  },
  {
    "text": "OK, so that's the\nstory for JavaScript. There's also plug-ins.",
    "start": "3208611",
    "end": "3214150"
  },
  {
    "text": "So this is stuff like\nJava and things like this.",
    "start": "3214150",
    "end": "3219440"
  },
  {
    "text": "So a frame can easily run a\nplug-in from either origin. Now plug-ins, depending\non who you believe,",
    "start": "3219440",
    "end": "3224590"
  },
  {
    "text": "are actually going to\nthe way of the dinosaurs. Because a lot of the\nnew HTML 5 features, like video tag and\nthings like this,",
    "start": "3224590",
    "end": "3230030"
  },
  {
    "text": "can actually do\nstuff that you used to only be able to do\nwith a plug-in like Java. So it's not clear how\nmuch longer these things",
    "start": "3230030",
    "end": "3235490"
  },
  {
    "text": "are going to be around. OK, so any questions. ",
    "start": "3235490",
    "end": "3242992"
  },
  {
    "text": "OK, so remember that when\na browser generates an HTTP request it automatically\nincludes the relevant cookies",
    "start": "3242992",
    "end": "3251090"
  },
  {
    "text": "in that request. So what happens if a\nmalicious site generates",
    "start": "3251090",
    "end": "3258250"
  },
  {
    "text": "a URL that looks like this? So for example, it\ncreates a new child frame.",
    "start": "3258250",
    "end": "3264538"
  },
  {
    "text": "It says that URL to bank.com. And then, it actually tries to\nmimic what the browser would",
    "start": "3264538",
    "end": "3271990"
  },
  {
    "text": "do if there was going to\nbe a transfer of money between the user\nand someone else.",
    "start": "3271990",
    "end": "3279780"
  },
  {
    "text": " So in this URL, in this\nframe that the attack",
    "start": "3279780",
    "end": "3289605"
  },
  {
    "text": "is trying to create, it tries\nto invoke this transfer command here. Say $500.",
    "start": "3289605",
    "end": "3294872"
  },
  {
    "text": "And that should go to the\nattacker's account at the bank. Now the attacker\npage, which the user",
    "start": "3294872",
    "end": "3301800"
  },
  {
    "text": "visited because, somehow,\nthe attacker is [INAUDIBLE] go there.",
    "start": "3301800",
    "end": "3307450"
  },
  {
    "text": "What's interesting\nabout this is that, even though the\nattacker page won't be able to see the contents\nof this child frame",
    "start": "3307450",
    "end": "3314930"
  },
  {
    "text": "because it's probably going\nto be in a different origin. The bank.com page will still\ndo what the attacker wants",
    "start": "3314930",
    "end": "3321880"
  },
  {
    "text": "because the browser's going\nto transfer all the users cookies with this request. It's going to look\nat this command here",
    "start": "3321880",
    "end": "3327130"
  },
  {
    "text": "and say, oh, the user\nmust've, somehow, asked me to transfer $500\nto this mysteriously named individual named attacker.",
    "start": "3327130",
    "end": "3332990"
  },
  {
    "text": "OK, I'll do. All right, seems reasonable. So that's a problem.",
    "start": "3332990",
    "end": "3338080"
  },
  {
    "text": "Then the reason\nthis attack works is because, essentially,\nthe attacker can figure out\ndeterministically what",
    "start": "3338080",
    "end": "3345760"
  },
  {
    "text": "this command should look like. There's no randomness\nin this command here. So essentially,\nwhat the attacker",
    "start": "3345760",
    "end": "3351200"
  },
  {
    "text": "can do is try this on his\nor her own bank account, figure out this\nprotocol, and then just, somehow, force the\nuser browser to execute",
    "start": "3351200",
    "end": "3358780"
  },
  {
    "text": "this on the attackers behalf. So this is what's called a\ncross site request forgery.",
    "start": "3358780",
    "end": "3368639"
  },
  {
    "text": " So sometimes you hear\nthis is called CSRF.",
    "start": "3368639",
    "end": "3376690"
  },
  {
    "text": "C-S-R-F. So the solution to\nfixing this attack here",
    "start": "3376690",
    "end": "3385619"
  },
  {
    "text": "is that you actually just need\nto include some randomness in this URL that's generated.",
    "start": "3385620",
    "end": "3390680"
  },
  {
    "text": "A type of randomness\nthat the attacker can't guess statically. So for example, you can imagine\nthat inside the bank's web page",
    "start": "3390680",
    "end": "3402960"
  },
  {
    "text": "it's going to have some form. The form is the\nthing, which actually generates request like this.",
    "start": "3402960",
    "end": "3408460"
  },
  {
    "text": "So maybe the action of\nthat form is transfer.cgi.",
    "start": "3408460",
    "end": "3413474"
  },
  {
    "text": " And then, inside this form,\nyou're going to have an input.",
    "start": "3413475",
    "end": "3422329"
  },
  {
    "text": "Inputs are usually used to\nget in user input like text, key presses, mouse clicks,\nand stuff like that. But we can actually\ngive this input",
    "start": "3422330",
    "end": "3429310"
  },
  {
    "text": "a type of hidden, which\nmeans that it's not shown to the user.",
    "start": "3429310",
    "end": "3436280"
  },
  {
    "text": "And then, we can give\nit this attribute. We'll call it CSRF.",
    "start": "3436280",
    "end": "3444190"
  },
  {
    "text": "And then, we'll give\nit some random value. ",
    "start": "3444190",
    "end": "3451790"
  },
  {
    "text": "You know, a72f. Whatever. So remember, this is\ngenerated on the server side.",
    "start": "3451790",
    "end": "3457619"
  },
  {
    "text": "So when the user goes to this\npage, on the server side, it sometimes generates\nthis random here",
    "start": "3457620",
    "end": "3463270"
  },
  {
    "text": "and embeds that in the HTML\nthat the user receives. So when the user\nsubmits this form,",
    "start": "3463270",
    "end": "3469390"
  },
  {
    "text": "then this URL that we\nhave up here will actually have this extra thing up here,\nwhich is this token here.",
    "start": "3469390",
    "end": "3483619"
  },
  {
    "text": "So what this does\nis that this now means that the\nattacker would have to be able to guess the\nparticular range of token",
    "start": "3483620",
    "end": "3490450"
  },
  {
    "text": "that the server generated\nfor the user each time the user had gone to the page. So if you sufficient\nrandomness here,",
    "start": "3490450",
    "end": "3497720"
  },
  {
    "text": "the attacker can't just\nforge one of these things because if the attacker\nguesses the wrong token,",
    "start": "3497720",
    "end": "3503250"
  },
  {
    "text": "then the server orders\nwill reject your request. AUDIENCE: Well why\nshould these always be included in the URL and not\nin the body of the [INAUDIBLE]?",
    "start": "3503250",
    "end": "3510450"
  },
  {
    "text": " PROFESSOR: Yeah, yea.",
    "start": "3510450",
    "end": "3516160"
  },
  {
    "text": "So HTTPS helps a\nlot of these things. And there's actually\nno intrinsic reason why you couldn't put\nsome of this stuff",
    "start": "3516160",
    "end": "3522240"
  },
  {
    "text": "in the body of the request. There's some legacy reasons why\nforms, sort of, work like this.",
    "start": "3522240",
    "end": "3527319"
  },
  {
    "text": "But you're correct. And in practice, you can put\nthat information somewhere else in the HTTPS request. But note that just moving\nthat information, for example,",
    "start": "3527319",
    "end": "3534000"
  },
  {
    "text": "to the body of the\nrequest, there's still a challenge there,\npotentially because if there's",
    "start": "3534000",
    "end": "3539080"
  },
  {
    "text": "something there that\nthe attacker can guess. Then the attacker may\nstill be able to, somehow, conjure up that URL.",
    "start": "3539080",
    "end": "3545410"
  },
  {
    "text": "For example, when I'm making\nXML HTTP request and then, explicitly, setting\nthe body to this thing that the attacker\nknows how to guess.",
    "start": "3545410",
    "end": "3551911"
  },
  {
    "text": "AUDIENCE: Well if the\nattacker just gives you a URL, then that just gets encoded\nin the header of [INAUDIBLE].",
    "start": "3551911",
    "end": "3559934"
  },
  {
    "text": "PROFESSOR: If the attacker\njust gives you a URL. So if you're just\nsetting a frame to URL,",
    "start": "3559934",
    "end": "3566320"
  },
  {
    "text": "then, that's all that\nthe attacker can control. But if you're using\nan XML HTTP request if, if somehow the attacker\ncan generate one of those,",
    "start": "3566320",
    "end": "3572970"
  },
  {
    "text": "then XML HTTP interface actually\nallows you to set the body.",
    "start": "3572970",
    "end": "3578050"
  },
  {
    "text": "AUDIENCE: The XML\nHTTP request would be limited by, say, an origin. But the attacker could just\nwrite a form and submit it.",
    "start": "3578050",
    "end": "3584110"
  },
  {
    "text": "There's nothing [INAUDIBLE]\nsubmitting a form like using [INAUDIBLE]. And then, it's sent in the body.",
    "start": "3584110",
    "end": "3589910"
  },
  {
    "text": "But it's still-- PROFESSOR: That's right. So XML HTTP request is\nlimited to the same origin.",
    "start": "3589910",
    "end": "3595290"
  },
  {
    "text": "However, if for example,\nthe attacker can, maybe, do something\nlike this, for example.",
    "start": "3595290",
    "end": "3601380"
  },
  {
    "text": "And the attacker can inject\nthe XML HTTP request here, which would then execute\nwith the authority of the embedded page. ",
    "start": "3601380",
    "end": "3610650"
  },
  {
    "text": "AUDIENCE: Can the\nattacker [INAUDIBLE] by inspecting the\nHTML source code?",
    "start": "3610650",
    "end": "3616741"
  },
  {
    "text": "PROFESSOR: Yes, that's actually\na good question. right so it depends on what the\nattacker has access to.",
    "start": "3616741",
    "end": "3622830"
  },
  {
    "text": "If the attacker-- for example,\nby doing something goofy like that-- can actually\naccess this JavaScript property",
    "start": "3622830",
    "end": "3630109"
  },
  {
    "text": "called inner HTML. This is a property\n[INAUDIBLE], right.",
    "start": "3630110",
    "end": "3635680"
  },
  {
    "text": "So if I document that\nbody dot inner HTML, I will get all of the HTML\nthat's inside that page",
    "start": "3635680",
    "end": "3642536"
  },
  {
    "text": "right now. So yeah. So if the attacker can\ndo this, then yeah. Then you're in trouble. That's right.",
    "start": "3642536",
    "end": "3647624"
  },
  {
    "text": "So a lot of these\ndetails, though, depend on exactly what the\nattacker can and can't do. So it, kind of, makes sense. So if the attacker can or\ncannot generate Ajax request,",
    "start": "3647624",
    "end": "3654780"
  },
  {
    "text": "that means one thing. The attacker can or cannot\nlook at the right HTML, then you have another thing. So on and so forth. ",
    "start": "3654780",
    "end": "3662041"
  },
  {
    "text": "All right. So yeah. So this is token based\nthing is a popular way to get around\nthese CSRF attacks.",
    "start": "3662041",
    "end": "3670270"
  },
  {
    "text": "All right, so another\nthing we can look at",
    "start": "3670270",
    "end": "3677970"
  },
  {
    "text": "are network addresses.  So this gets into some of the\nconversation we've been having",
    "start": "3677970",
    "end": "3685210"
  },
  {
    "text": "about who the attacker cannot\ncontact via XML HTTP request,",
    "start": "3685210",
    "end": "3690609"
  },
  {
    "text": "for example. ",
    "start": "3690610",
    "end": "3696450"
  },
  {
    "text": "So with respect to\nnetwork addresses, a frame can send HTTP\nand HTTPS requests",
    "start": "3696450",
    "end": "3707210"
  },
  {
    "text": "to a host plus a port\nthat matches it's origin. But note that the security\nof the same origin policy is,",
    "start": "3707210",
    "end": "3714950"
  },
  {
    "text": "actually, very tightly tied\nwith the security of the DNS infrastructure because\nall the same origin",
    "start": "3714950",
    "end": "3721730"
  },
  {
    "text": "policies' rules are\nbased upon what names me. So if you can control\nwhat names me, you can actually want some\npretty vicious attacks.",
    "start": "3721730",
    "end": "3728260"
  },
  {
    "text": "So an example of this is\nthe DNS rebinding attack.",
    "start": "3728260",
    "end": "3734520"
  },
  {
    "start": "3734520",
    "end": "3739940"
  },
  {
    "text": "So in this attack, the\ngoal of the attacker",
    "start": "3739940",
    "end": "3745010"
  },
  {
    "text": "is run attacker controlled\nJavaScript with the authority",
    "start": "3745010",
    "end": "3760577"
  },
  {
    "text": "of some victim website. We'll just call them victim.com. ",
    "start": "3760577",
    "end": "3768232"
  },
  {
    "text": "So the attacker wants to\nbus the same origin policies and somehow run code\nthat he has written",
    "start": "3768232",
    "end": "3773240"
  },
  {
    "text": "with the authority\nof some other site. So here's the approach.",
    "start": "3773240",
    "end": "3779480"
  },
  {
    "text": "So the first thing that\nthe attacker is going to do is register a domain name.",
    "start": "3779480",
    "end": "3787460"
  },
  {
    "text": " So let's say we just\ncall that attacker.com.",
    "start": "3787460",
    "end": "3793040"
  },
  {
    "start": "3793040",
    "end": "3798746"
  },
  {
    "text": "Very simple to do. Just pay a couple of bucks. You're ready to go. You own your own domain name.",
    "start": "3798746",
    "end": "3804390"
  },
  {
    "text": "So note that the\nattacker is also going to set up a\nDNS server to respond to name resolution\nrequests for objects",
    "start": "3804390",
    "end": "3812490"
  },
  {
    "text": "that reside in attacker.com. So the second thing\nthat has to happen is that the user has\nto visit attacker.com.",
    "start": "3812490",
    "end": "3820980"
  },
  {
    "text": " In particular, the user has\nto visit some website that",
    "start": "3820980",
    "end": "3827260"
  },
  {
    "text": "hangs off of this domain name. This part is\nactually not tricky. See if you can create\nan ad campaign.",
    "start": "3827260",
    "end": "3833110"
  },
  {
    "text": "Free iPad. Everybody wants\na free iPad, even though I don't know anyone\nwho's ever won a free iPad. The click on this. They're there.",
    "start": "3833110",
    "end": "3838230"
  },
  {
    "text": "It's in the phishing\nemail, so and so forth. This part's not hard. So what's going to happen? So this is actually going\nto cause the browser",
    "start": "3838230",
    "end": "3850430"
  },
  {
    "text": "to generate a DNS\nrequest to attacker.com",
    "start": "3850430",
    "end": "3865559"
  },
  {
    "text": "because this page\nhas some objects that refer to some objects\nthat live in attacker.com.",
    "start": "3865560",
    "end": "3870950"
  },
  {
    "text": "The browser's going to say I\nnever seen this domain before. Let me send the DNS resolution\nrequest to attacker.com.",
    "start": "3870950",
    "end": "3878292"
  },
  {
    "text": "So what's going to\nend up happening is that the attackers\nDNS server is going to respond to that request.",
    "start": "3878292",
    "end": "3885090"
  },
  {
    "text": "But it's going to respond\nwith a DNS result that has a very short time to live.",
    "start": "3885090",
    "end": "3891630"
  },
  {
    "text": "OK? Meaning that the\nbrowser will think that it's only valid for a\nvery short period of time",
    "start": "3891630",
    "end": "3898300"
  },
  {
    "text": "before it has to go out\nand revalidate that. OK? So in other words, the attacker\nresponse has a small DTL.",
    "start": "3898300",
    "end": "3917780"
  },
  {
    "text": " OK, fine. So the user gets\nthe response back.",
    "start": "3917780",
    "end": "3923990"
  },
  {
    "text": "The malicious website is now\nrunning on the user side. Meanwhile, while the user's\ninteracting with the sight,",
    "start": "3923990",
    "end": "3930580"
  },
  {
    "text": "the attacker is going\nto configure the DNS server that he controls.",
    "start": "3930580",
    "end": "3937310"
  },
  {
    "text": "The attacker is going to\nbind the attacker.com name",
    "start": "3937310",
    "end": "3945390"
  },
  {
    "text": "to victim.com's IP address.",
    "start": "3945390",
    "end": "3950940"
  },
  {
    "start": "3950940",
    "end": "3956599"
  },
  {
    "text": "Right? So what that means is that\nnow if the user's browser ask",
    "start": "3956600",
    "end": "3962050"
  },
  {
    "text": "for a domain name resolution\nfor something that resides in attacker.com,\nit's actually going to get some internal\naddress to victim.com.",
    "start": "3962050",
    "end": "3970152"
  },
  {
    "text": "This is actually very subtle. Now why can the attacker's\nDNS resolver do that?",
    "start": "3970152",
    "end": "3975720"
  },
  {
    "text": "Because the attacker\nconfigures it to do so. The attacker's DNS\nserver does not have to consult victim.com\nto do this rebinding.",
    "start": "3975720",
    "end": "3983387"
  },
  {
    "text": "So perhaps, you can see some of\nthe outline in the attack now. So what will happen\nis that the website",
    "start": "3983387",
    "end": "3992450"
  },
  {
    "text": "wants to fetch a new object\nvia, let's say, AJAX.",
    "start": "3992450",
    "end": "4004185"
  },
  {
    "text": " And it thinks that\nthat AJAX request",
    "start": "4004185",
    "end": "4010300"
  },
  {
    "text": "is going to go to attacker.com\nsomewhere externally. But this AJAX request\nactually goes to victim.com.",
    "start": "4010300",
    "end": "4020950"
  },
  {
    "text": " And the reason why that's\nbad is because now we've",
    "start": "4020950",
    "end": "4028110"
  },
  {
    "text": "got this code on\nappliance side that resides on the attacker.com web\npage that's actually accessing",
    "start": "4028110",
    "end": "4036270"
  },
  {
    "text": "now data that is from\na different origin from victim.com. So once this step of\nthe attack completes,",
    "start": "4036270",
    "end": "4043150"
  },
  {
    "text": "then the attacker.com web page\ncan send that contact back to the server using [INAUDIBLE]\nor do other things like that.",
    "start": "4043150",
    "end": "4050599"
  },
  {
    "text": "So does this attack make sense? AUDIENCE: Wouldn't it be more\nsensible to do the attack the other way around?",
    "start": "4050600",
    "end": "4056560"
  },
  {
    "text": "So to [INAUDIBLE] victim.com\nto the attackers IP address.",
    "start": "4056560",
    "end": "4061732"
  },
  {
    "text": "Because that way you're the\nsame origin as victim.com so you can get all\nthe cookies and such.",
    "start": "4061732",
    "end": "4067710"
  },
  {
    "text": "PROFESSOR: Yeah, so that\nwould work, too, as well. So what's nice about\nthis though is that,",
    "start": "4067710",
    "end": "4073850"
  },
  {
    "text": "presumably, this allows you o do\nnice things like port scanning and stuff like that.",
    "start": "4073850",
    "end": "4079380"
  },
  {
    "text": "I mean, your approach\nwill work, right. But I think here the\nreason why you do--",
    "start": "4079380",
    "end": "4084680"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Because,\nessentially, you can do things like constantly\nrebind what attacker.com points",
    "start": "4084680",
    "end": "4091460"
  },
  {
    "text": "to to different machine names\nand different ports inside of victim.com's network.",
    "start": "4091460",
    "end": "4097394"
  },
  {
    "text": "So then, you can,\nsort of, step through. So in other words, let's say\nthat the attacker.com web page always thinks it's\ngoing to attacker.com",
    "start": "4097394",
    "end": "4108899"
  },
  {
    "text": "and issuing an\nAJAX request there. So every time the\nDNS server rebinds,",
    "start": "4108899",
    "end": "4115270"
  },
  {
    "text": "it [INAUDIBLE] to some\ndifferent IP address inside of victim.com's network. So it can just, sort of, step\nthrough the IP addresses one",
    "start": "4115270",
    "end": "4122109"
  },
  {
    "text": "by one and see if anybody's\nresponding to those requests.",
    "start": "4122109",
    "end": "4127368"
  },
  {
    "text": "AUDIENCE: But the client,\nthe user you're attacking, doesn't necessarily have inside\naccess to victim.com's network.",
    "start": "4127369",
    "end": "4135279"
  },
  {
    "text": "PROFESSOR: So what this\nattack, typically, ensues is that there are certain\nfirewall rules that",
    "start": "4135280",
    "end": "4140389"
  },
  {
    "text": "would prevent attacker.com\nfrom outside the network from actually looking through\neach one of the IP addresses",
    "start": "4140390",
    "end": "4145969"
  },
  {
    "text": "inside of victim.com. However, if you're inside\ncorp.net-- if you're inside the corporate\nfirewall, let's say--",
    "start": "4145970",
    "end": "4151540"
  },
  {
    "text": "then machines often do have the\nability to contact [INAUDIBLE]. AUDIENCE: [INAUDIBLE].",
    "start": "4151540",
    "end": "4157299"
  },
  {
    "text": "PROFESSOR: Yeah, yeah. Exactly. AUDIENCE: Does this\nwork over HTTPS?",
    "start": "4157300",
    "end": "4163229"
  },
  {
    "text": "PROFESSOR: Ah, so that's\nan interesting question. So HTTPS has these keys.",
    "start": "4163229",
    "end": "4169960"
  },
  {
    "text": "So the way you'd have to\nget this to work with HTTPS is if somehow, for example,\nif attacker.com could-- let",
    "start": "4169960",
    "end": "4181497"
  },
  {
    "text": "me think about this. Yeah, it's interesting\nbecause, presumably,",
    "start": "4181497",
    "end": "4187989"
  },
  {
    "text": "if you were using HTTPS, then\nwhen you sent out this Ajax request, the victim\nmachine wouldn't",
    "start": "4187990",
    "end": "4193509"
  },
  {
    "text": "have the attackers HTTPS keys. So the cryptography\nwould fail somehow.",
    "start": "4193510",
    "end": "4200896"
  },
  {
    "text": "So I think HTTPS\nwould stop that. AUDIENCE: Or if the the victim\nonly has things on HTTPS?",
    "start": "4200896",
    "end": "4207590"
  },
  {
    "text": "PROFESSOR: Yeah. So I think that would stop it. ",
    "start": "4207590",
    "end": "4214771"
  },
  {
    "text": "AUDIENCE: If you\nconfigure the [INAUDIBLE]",
    "start": "4214771",
    "end": "4220663"
  },
  {
    "text": "use the initial or receiving\nresult [INAUDIBLE]? PROFESSOR: That's\na good question. I'm actually not\nsure about that.",
    "start": "4220663",
    "end": "4226280"
  },
  {
    "text": "So actually, a lot\nof these attacks were dependant on the devil\nin the details, right? So I'm not actually\nsure how that wold work.",
    "start": "4226280",
    "end": "4231732"
  },
  {
    "text": "AUDIENCE: It uses\nthe first domain. PROFESSOR: It would\nuse the first domain? OK.",
    "start": "4231732",
    "end": "4237460"
  },
  {
    "text": "Yep? AUDIENCE: So why\ncan the attacker respond with the victims IP\naddress in the first place?",
    "start": "4237460",
    "end": "4246319"
  },
  {
    "text": "PROFESSOR: So why\ncan't-- what do you mean? AUDIENCE: [INAUDIBLE]. Why has the attacker\nteam [INAUDIBLE]",
    "start": "4246319",
    "end": "4253630"
  },
  {
    "text": "has to respond with the\nattacker's IP [INAUDIBLE]? PROFESSOR: Oh, well, yeah.",
    "start": "4253630",
    "end": "4258860"
  },
  {
    "text": "Since the attacker\nhas to, somehow, get it's own code on\nthe victim machine first before it can then start\ndoing this nonsense where it's",
    "start": "4258860",
    "end": "4265090"
  },
  {
    "text": "looking inside the network. So it's that initial\nstep where it has to put that code\non the victims machine.",
    "start": "4265090",
    "end": "4270467"
  },
  {
    "text": "All right, so in the\ninterest of time, let's keep moving forward. But come see me\nafter class if you",
    "start": "4270467",
    "end": "4275555"
  },
  {
    "text": "want to follow up the question. So that's the DNS\nrebinding attack.",
    "start": "4275556",
    "end": "4282560"
  },
  {
    "text": "So how can you fix this? So one way you\ncould fix it is so that you modify your\nclient-side DNS resolver",
    "start": "4282560",
    "end": "4289040"
  },
  {
    "text": "so that external\nhost names can never resolve to internal IP address. It's, kind of, goofy that\nsomeone outside of your network",
    "start": "4289040",
    "end": "4295590"
  },
  {
    "text": "should be able to create a\nDNS binding for something inside of your network. That's the most\nstraightforward solution.",
    "start": "4295590",
    "end": "4300739"
  },
  {
    "text": "You could also imagine that\nthe browser could do something called DNS pinning. Whereby, if it receives\na DNS resolution record,",
    "start": "4300740",
    "end": "4307760"
  },
  {
    "text": "then it will always treat\nthat record as valid for, let's say, 30 minutes,\nregardless of whether it",
    "start": "4307760",
    "end": "4313895"
  },
  {
    "text": "has a short TTL set inside\nit because that also prevents the attack, as well. That solution is a little\nbit tricky because there",
    "start": "4313895",
    "end": "4320260"
  },
  {
    "text": "are some sites that actually,\nintentionally, use dynamic DNS and do things like load\nbalancing and stuff like that. So the first solution is\nprobably the better one.",
    "start": "4320260",
    "end": "4328230"
  },
  {
    "text": "OK, so here is, sort\nof, a fun attack.",
    "start": "4328230",
    "end": "4333239"
  },
  {
    "text": "So we've talked about\na lot of resources",
    "start": "4333240",
    "end": "4338680"
  },
  {
    "text": "that the origin protects--\nthe the same origin policy protects. So what about pixels? ",
    "start": "4338680",
    "end": "4345230"
  },
  {
    "text": "So how does the same origin\npolicy protect pixels? Well as it turns out, pixels\ndon't really have an origin.",
    "start": "4345230",
    "end": "4351350"
  },
  {
    "text": "So each frame gets its\nown little bounding box. Just a square, basically.",
    "start": "4351350",
    "end": "4356480"
  },
  {
    "text": "So a frame can draw wherever\nit wants on that square. So this is, actually,\na problem because what",
    "start": "4356480",
    "end": "4362910"
  },
  {
    "text": "this means is that\na parent frame can draw atop of it's child frame.",
    "start": "4362910",
    "end": "4369030"
  },
  {
    "text": "So this can lead to some\nvery insidious attacks. So let's say that the\nattacker creates some page.",
    "start": "4369030",
    "end": "4379040"
  },
  {
    "text": "And let's say,\ninside of that page, the attacker says\nclick to win the iPad.",
    "start": "4379040",
    "end": "4389420"
  },
  {
    "text": "The very same standard thing. So this is the parent frame. Now what the parent frame\ncan do is actually create",
    "start": "4389420",
    "end": "4395320"
  },
  {
    "text": "a child frame that is actually\nthe Facebook Like button frame.",
    "start": "4395320",
    "end": "4403139"
  },
  {
    "text": " So Facebook allows you to run\nthis little piece of Facebook",
    "start": "4403140",
    "end": "4412630"
  },
  {
    "text": "code you can put on your page. You know, if the user\nclicks Like, then that means that it'll go on\nFacebook and say, hey,",
    "start": "4412630",
    "end": "4417969"
  },
  {
    "text": "the user likes the\nparticular page. So we've got this\nchild frame over here.",
    "start": "4417970",
    "end": "4423255"
  },
  {
    "text": " That actually turned\nout remarkably well. Anyway, so you've got\nthis Like thing over here.",
    "start": "4423255",
    "end": "4431480"
  },
  {
    "text": "Now what the attacker can do\nis actually overlay this frame",
    "start": "4431480",
    "end": "4438200"
  },
  {
    "text": "on top of the click\nto get the free iPad and also make this invisible.",
    "start": "4438200",
    "end": "4444719"
  },
  {
    "text": "So CSS let's you do that. So what's going to happen? As we've already established,\neverybody wants a free iPad.",
    "start": "4444720",
    "end": "4450260"
  },
  {
    "text": "So the user's going\nto go to this site, click on thing-- this area\nof the screen-- thinking",
    "start": "4450260",
    "end": "4456609"
  },
  {
    "text": "that they're going to click\nhere and get the free iPad. But in reality, they're\nclicking the Like button that they can't see\nthat's invisible.",
    "start": "4456609",
    "end": "4463130"
  },
  {
    "text": "It's like layered\natop the C index. So what that means is\nthat now maybe they go check their Facebook profile,\nand they've liked attacker.com.",
    "start": "4463130",
    "end": "4470310"
  },
  {
    "text": "You know, and they don't\nremember how that happened. So this is actually called\nclick jacking attack",
    "start": "4470310",
    "end": "4476050"
  },
  {
    "text": "because you can imagine you\ncan do all kinds of evil things here. So you can imagine you could\nsteal passwords this way.",
    "start": "4476050",
    "end": "4483610"
  },
  {
    "text": "You could get raw input. I mean, it's madness. So once again, this\nhappens because the parent,",
    "start": "4483610",
    "end": "4489760"
  },
  {
    "text": "essentially, gets the right\nto draw over anything that's inside this bounding box.",
    "start": "4489760",
    "end": "4496140"
  },
  {
    "text": "So does that attack make sense? Yeah. AUDIENCE: [INAUDIBLE],\nwhat do you",
    "start": "4496140",
    "end": "4502140"
  },
  {
    "text": "mean the parent gets to draw\nover anything [INAUDIBLE]? PROFESSOR: So what I'm\ntrying to indicate here",
    "start": "4502140",
    "end": "4508900"
  },
  {
    "text": "is that, visually speaking,\nwhat the user just sees is this.",
    "start": "4508900",
    "end": "4514415"
  },
  {
    "text": "AUDIENCE: Oh, that's\nthe parent frames. PROFESSOR: Yeah, this\nis the parent frame. That's right. This is the child frame. So visually speaking,\nthe user just sees this.",
    "start": "4514415",
    "end": "4520120"
  },
  {
    "text": "But using the miracle of my da\nVinci style drawing techniques, this is actually overlaid\natop this transparently.",
    "start": "4520120",
    "end": "4527340"
  },
  {
    "text": "So that's the child frame. That's the parent frame. OK so, there's a couple\ndifferent solutions--",
    "start": "4527340",
    "end": "4532380"
  },
  {
    "text": "you can imagine--\nfor solving this. The first solution is to\nuse a frame busting code.",
    "start": "4532380",
    "end": "4540320"
  },
  {
    "text": " So you can actually use\nJavaScript expressions",
    "start": "4540320",
    "end": "4547200"
  },
  {
    "text": "to figure out if you have\nbeen put into a frame by someone else. So like, one of these tests is\nyou compare the reference self",
    "start": "4547200",
    "end": "4559489"
  },
  {
    "text": "to top. So in the JavaScript\nworld, self refers to frame that you\nyourself aren't in.",
    "start": "4559490",
    "end": "4566800"
  },
  {
    "text": "Top refers to the frame at the\ntop of the frame hierarchy. So if you do this\ntest and you find out",
    "start": "4566800",
    "end": "4572846"
  },
  {
    "text": "that self is not\nequal to top, then you realize that you\nare a child frame. And then you can refuse to\nload or do things like this.",
    "start": "4572846",
    "end": "4579039"
  },
  {
    "text": "So this, in fact,\nis what will happen if you try to create a frame\nfor, let's say, CNN.com. You can actually look\nin the JavaScript source",
    "start": "4579039",
    "end": "4584760"
  },
  {
    "text": "and see that it does\nthis test because CNN.com doesn't want other people\ntaking credit for it's content.",
    "start": "4584760",
    "end": "4589980"
  },
  {
    "text": "So it only wants to\nbe the top most frame. So that's one solution\nyou can use here. The other solution\nthat you can use here",
    "start": "4589980",
    "end": "4595216"
  },
  {
    "text": "is also to have your web\nserver send this HTTP response hitter called x-frame options.",
    "start": "4595216",
    "end": "4601900"
  },
  {
    "text": " So when the web server\nreturns a response,",
    "start": "4601900",
    "end": "4607520"
  },
  {
    "text": "it can set this header. And it can basically\nsay, hey, browser, do not allow anyone to put\nmy content inside of a frame.",
    "start": "4607520",
    "end": "4614740"
  },
  {
    "text": "So that allows the browser\nto do the enforcement. So that's pretty\nstraightforward. So there's a bunch of\nother, sort of, crazy",
    "start": "4614740",
    "end": "4622460"
  },
  {
    "text": "attacks that you can launch. Here's another one that's\nactually pretty funny. So as I was mentioning\nbefore, the fact",
    "start": "4622460",
    "end": "4628860"
  },
  {
    "text": "that we're now living in a\nweb that's internationalized actually mean that there's\nall these issues that",
    "start": "4628860",
    "end": "4634502"
  },
  {
    "text": "come up involving name and\nhow you represent host names. So for example, let's say that\nyou see this letter right here.",
    "start": "4634502",
    "end": "4643434"
  },
  {
    "text": "So what does this look like? This looks like a C, right? What is this? A C in ASCII in\nthe Latin alphabet?",
    "start": "4643434",
    "end": "4650460"
  },
  {
    "text": "Or is this a C in Cyrillic? Hard to say, right? So you can end up having these\nreally strange attacks where",
    "start": "4650460",
    "end": "4657890"
  },
  {
    "text": "attackers will register a\ndomain name, like cats.com,",
    "start": "4657890",
    "end": "4664210"
  },
  {
    "text": "for example. But this is a Cyrillic C. So users will go to this domain.",
    "start": "4664210",
    "end": "4670723"
  },
  {
    "text": "They might click\non it or whatever thinking they're going to\nLatin alphabet C, cats.com.",
    "start": "4670724",
    "end": "4675840"
  },
  {
    "text": "But instead, they're\ngoing to an attacker one. And then, all kinds of madness\ncan happen from there, as well.",
    "start": "4675840",
    "end": "4681824"
  },
  {
    "text": "So you might have\nheard of attacks like this are like\ntypo squatting attacks where people register for\nnames like F-C-E book.com.",
    "start": "4681824",
    "end": "4691900"
  },
  {
    "text": " This is a common fumble finger\ntyping for Facebook.com.",
    "start": "4691900",
    "end": "4700170"
  },
  {
    "text": "So if you control this, you're\ngoing to get a ton of traffic from people who think they're\ngoing to Facebook.com.",
    "start": "4700170",
    "end": "4706456"
  },
  {
    "text": "So there's a bunch of different,\nsort of, wacky attacks that you can launch\nthrough the domain",
    "start": "4706456",
    "end": "4711710"
  },
  {
    "text": "registry system that are tricky\nto defend from first principles because how are you going to\nprevent users from mistyping",
    "start": "4711710",
    "end": "4717180"
  },
  {
    "text": "things, for example? Or how would the browser\nindicate to the user, hey, this is Cyrillic?",
    "start": "4717180",
    "end": "4723110"
  },
  {
    "text": "Is the browser going to\nalert the user every time Cyrillic fonts are included? That's going to make people\nangry if they actually use",
    "start": "4723110",
    "end": "4729070"
  },
  {
    "text": "Cyrillic as their native font. So it's not quite clear,\ntechnologically speaking, how we deal with\nsome of those issues.",
    "start": "4729070",
    "end": "4736940"
  },
  {
    "text": "So yeah, there's a bunch\nof other security issues that are very subtle here.",
    "start": "4736940",
    "end": "4742790"
  },
  {
    "text": "One thing that's interesting\nis if you look at plugins. So how do plugins treat\nthe same origin policy?",
    "start": "4742790",
    "end": "4750900"
  },
  {
    "text": "Well plugins often have very\nsubtle incompatibilities with the rest of the\nbrowser with respect",
    "start": "4750900",
    "end": "4757150"
  },
  {
    "text": "to the same origin. So for example, if you\nlook at a Java plug-in, Java, oftentimes, assumes\nthat different host",
    "start": "4757150",
    "end": "4765020"
  },
  {
    "text": "names that have\nthe same IP address actually have the same origin.",
    "start": "4765020",
    "end": "4771420"
  },
  {
    "text": "That's actually a pretty big\ndeviation from the standard interpretation of the same\norigin policy because this",
    "start": "4771420",
    "end": "4777450"
  },
  {
    "text": "means that if you have something\nlike x.y.com and, lets say,",
    "start": "4777450",
    "end": "4785620"
  },
  {
    "text": "z.y.com, if they map\nonto the same IP address,",
    "start": "4785620",
    "end": "4790640"
  },
  {
    "text": "then Java will consider these\nto be in the same origin, which is a problem\nif, for example, this site gets [? owned ?]\nbut this one doesn't.",
    "start": "4790640",
    "end": "4798390"
  },
  {
    "text": "So there's a bunch\nof other corner cases involving plug-ins. You can refer to the tangled\nweb to see some more about some",
    "start": "4798390",
    "end": "4805190"
  },
  {
    "text": "of those types of things. So the final thing that\nI want to discuss-- you can see the\nlecture notes for more",
    "start": "4805190",
    "end": "4811323"
  },
  {
    "text": "examples of a crazy Attacks\nthat people can launch-- but the final thing\nthat I want to discuss is this screen sharing attack.",
    "start": "4811323",
    "end": "4819680"
  },
  {
    "text": "So HTML 5 actually\ndefine this NEW API by which a web page can allow\nall the bits in it's screen",
    "start": "4819680",
    "end": "4826630"
  },
  {
    "text": "to be shared with\nanother browser or shared with the server. This seems like a\nreally cool idea",
    "start": "4826630",
    "end": "4832230"
  },
  {
    "text": "because now I can do\ncollaborative foo. We can collaborate on a\ndocument at the same time. And it's exciting because\nwe live in the future.",
    "start": "4832230",
    "end": "4838405"
  },
  {
    "text": "But what's funny\nabout this is that, when they designed this API,\nand it's a very new API,",
    "start": "4838405",
    "end": "4844420"
  },
  {
    "text": "they apparently didn't think\nabout same origin policies at all. So what that means is that\nif you have some page that",
    "start": "4844420",
    "end": "4854070"
  },
  {
    "text": "has multiple frames, then\nany one of these frames, if they are granted\npermission to take",
    "start": "4854070",
    "end": "4860179"
  },
  {
    "text": "a screenshot of your monitor,\nit can take an entire screen shot of the entire\nthing, regardless",
    "start": "4860180",
    "end": "4867630"
  },
  {
    "text": "of what origin that other\ncontent's coming from. So this is, actually, a\npretty devastating flaw",
    "start": "4867630",
    "end": "4874340"
  },
  {
    "text": "in the same origin policy. So there's some pretty obvious\nfixes you can think about. So for example, if this person's\ngiven screenshot capabilities,",
    "start": "4874340",
    "end": "4883500"
  },
  {
    "text": "only let it take a\nscreenshot of this. Right? Not this whole thing. Why didn't the browser vendors\nimplement it like this?",
    "start": "4883500",
    "end": "4889010"
  },
  {
    "text": "Because there's such pressure\nto compete on features, and to innovate on features, and\nto get that next new thing out",
    "start": "4889010",
    "end": "4895595"
  },
  {
    "text": "there. So for example, a lot of the\nquestions that people were asking about this particular\nlecture online [INAUDIBLE]",
    "start": "4895595",
    "end": "4900940"
  },
  {
    "text": "was like, well, why\ncouldn't you do this? Wouldn't this thing\nmake more sense? It seems like this current\nscheme is brain dead.",
    "start": "4900940",
    "end": "4906030"
  },
  {
    "text": "Wouldn't this other\none be better? And the answer is, yes. Everything, yes. That's exactly correct. Almost anything would\nbe better than this.",
    "start": "4906030",
    "end": "4913460"
  },
  {
    "text": "I'm ashamed to be\nassociated with this. But this is what we had. So what ends up happening\nis if you look at the nuts",
    "start": "4913460",
    "end": "4919440"
  },
  {
    "text": "and bolts of how web\nbrowsers get developed, people are a little bit\nbetter about security now. But like, with the\nscreen sharing thing,",
    "start": "4919440",
    "end": "4925256"
  },
  {
    "text": "people were so pumped to\nget this thing out there, they didn't realize\nthat's it's going to leak",
    "start": "4925256",
    "end": "4930310"
  },
  {
    "text": "all the bits on your screen. So now we're at his\npoint with the web where-- I mean, look\nat all these things",
    "start": "4930310",
    "end": "4936530"
  },
  {
    "text": "that we've discussed today. So if we were going\nto start from scratch and come up with a\nbetter security policy,",
    "start": "4936530",
    "end": "4942280"
  },
  {
    "text": "what fraction of websites\nthat you have today are going to actually work? Like, approximately,\n.2% of them.",
    "start": "4942280",
    "end": "4948941"
  },
  {
    "text": "Right? So users are going to complain. And this is another constant\nstory with security. Once you give users a feature,\nit's often very difficult",
    "start": "4948941",
    "end": "4956040"
  },
  {
    "text": "to claw that back, even if\nthat feature is insecure. So today, we discussed a\nlot of different things",
    "start": "4956040",
    "end": "4962449"
  },
  {
    "text": "about the same origin\npolicy and stuff like that. Next lecture, we'll\ngo into some more depth about some of those things\nwe talked about [INAUDIBLE].",
    "start": "4962450",
    "end": "4968680"
  }
]