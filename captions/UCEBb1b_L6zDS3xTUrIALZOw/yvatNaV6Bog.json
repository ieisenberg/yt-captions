[
  {
    "start": "0",
    "end": "50000"
  },
  {
    "text": " PROFESSOR: All\nright, so lecture 11 was about generic\nrigidity of linkages.",
    "start": "0",
    "end": "9200"
  },
  {
    "text": "So we've got bars and vertices\nconnected together in a graph.",
    "start": "9200",
    "end": "14400"
  },
  {
    "text": "And generically, the\ngraph is all that matters. And we characterize in two\nways, Henneberg construction",
    "start": "14400",
    "end": "20150"
  },
  {
    "text": "and Laman when graphs\nare generically rigid. And in particular, there\nwas this pebble algorithm",
    "start": "20150",
    "end": "27110"
  },
  {
    "text": "that was supposed to tell\nyou in polynomial time whether you're a graph\nwas Laman or not. And everyone pretty much asked\nabout this, about the details,",
    "start": "27110",
    "end": "35266"
  },
  {
    "text": "including myself when\nI watched it like, huh, that seems a little sketchy. So I thought I'd spend\nmost of today going",
    "start": "35266",
    "end": "40620"
  },
  {
    "text": "through how that\nalgorithm works exactly and also why it's correct, which\nis definitely not obviously.",
    "start": "40620",
    "end": "47580"
  },
  {
    "text": "It vaguely feels correct, but\nwe'll see why it actually is.",
    "start": "47580",
    "end": "54030"
  },
  {
    "start": "50000",
    "end": "240000"
  },
  {
    "text": "Remember Laman's Theorem,\nLaman characterization",
    "start": "54030",
    "end": "62170"
  },
  {
    "text": "is that your graph is\ngenerically rigid if and only",
    "start": "62170",
    "end": "71399"
  },
  {
    "text": "if every subgraph-- let's\nsay every k vertices induces",
    "start": "71400",
    "end": "87090"
  },
  {
    "text": "at most to 2k minus 3 edges. ",
    "start": "87090",
    "end": "92580"
  },
  {
    "text": "That's part one. And you also need\nthat the number of edges overall in\nthe graph is 2n minus 3",
    "start": "92580",
    "end": "102840"
  },
  {
    "text": "where n is the total\nnumber vertices. So this was just the\ndegree of freedom count. You have 2n degrees of freedom\nfor every vertex minus 3",
    "start": "102840",
    "end": "111110"
  },
  {
    "text": "for the rigid motions, two\ntranslations, one rotation. So that's the number of\nedges you should have total.",
    "start": "111110",
    "end": "116990"
  },
  {
    "text": "Sorry. This is for minimally\ngenerically rigid. ",
    "start": "116990",
    "end": "122280"
  },
  {
    "text": "And then to make it\nbalance, you want to guarantee that every\nk vertices doesn't",
    "start": "122280",
    "end": "128800"
  },
  {
    "text": "have too many edges. Because if it has\ntoo many edges, there'd be too few\nsomewhere else. This part would be\noverbrace, some other part",
    "start": "128800",
    "end": "134614"
  },
  {
    "text": "would be underbrace,\nand you'd be flexible. That's the intuition. And so the tricky\npart comes down",
    "start": "134614",
    "end": "141560"
  },
  {
    "text": "to how do you check whether\nevery k vertices induces 2k minus 3 edges because they're\nexponentially many choices.",
    "start": "141560",
    "end": "148950"
  },
  {
    "text": "There's 2 to the n different\nchoices of subsets or vertices. For each of them,\nyou'd have to check.",
    "start": "148950",
    "end": "154040"
  },
  {
    "text": "That's no good. So the algorithm\nwants to check this. And I'm going to\ncall this property",
    "start": "154040",
    "end": "159050"
  },
  {
    "text": "the 2k minus 3 property. ",
    "start": "159050",
    "end": "164110"
  },
  {
    "text": "And we're going to warm up\nwith a simpler problem, which is to check to the 2k\nproperty without the minus 3.",
    "start": "164110",
    "end": "171810"
  },
  {
    "text": "So 2k property is\njust every k vertices",
    "start": "171810",
    "end": "182610"
  },
  {
    "text": "induce at most 2k edges.",
    "start": "182610",
    "end": "188200"
  },
  {
    "text": " So this'll be a little\neasier to think about, more or less the same, a\nlot easier to argue about.",
    "start": "188200",
    "end": "197014"
  },
  {
    "text": "And then we'll see how\nto modify the algorithm to check the 2k\nminus 3 property. Was the property clear and\nin particular inducing?",
    "start": "197014",
    "end": "206170"
  },
  {
    "text": "Inducing means that you\nhave some set of vertices, and there's the rest of the\nvertices, n minus k of them.",
    "start": "206170",
    "end": "213310"
  },
  {
    "text": "You only look at edges where\nboth endpoints are in the set, both of them are\namong the k vertices.",
    "start": "213310",
    "end": "219750"
  },
  {
    "text": "So you ignore vertices that have\none end in k and the other end",
    "start": "219750",
    "end": "225531"
  },
  {
    "text": "outside. And you ignore, obviously, edges\nthat have both ends outside. Just count these guys.",
    "start": "225531",
    "end": "230660"
  },
  {
    "text": " So how do we do this?",
    "start": "230660",
    "end": "237010"
  },
  {
    "text": "Give you the algorithm. Actually, let me first give\nyou the idea of the algorithm before we go to the\nactual algorithm.",
    "start": "237010",
    "end": "244840"
  },
  {
    "start": "240000",
    "end": "390000"
  },
  {
    "text": "And this is review,\nbut pretty soon we'll get to stuff that wasn't\ncovered in lecture.",
    "start": "244840",
    "end": "250055"
  },
  {
    "start": "250055",
    "end": "264280"
  },
  {
    "text": "So the idea is every vertex\nhas two pebbles inside of it.",
    "start": "264280",
    "end": "273501"
  },
  {
    "text": "I'll draw as two red dots. And they can cover\nincident edges.",
    "start": "273501",
    "end": "281923"
  },
  {
    "text": "So they can't move very far. They have to stay\nbasically on the inside or on the boundary\nof the vertex.",
    "start": "281924",
    "end": "287260"
  },
  {
    "text": "That's how I'm going to draw it. Each pebble can cover\none incident edge.",
    "start": "287260",
    "end": "303245"
  },
  {
    "start": "303245",
    "end": "308910"
  },
  {
    "text": "So for example,\nthere's a little graph. ",
    "start": "308910",
    "end": "316680"
  },
  {
    "text": "I could take--\nlet's maybe I leave one of the pebbles\nin the middle. I can move one of the pebbles\nto cover one of the edges.",
    "start": "316680",
    "end": "324120"
  },
  {
    "text": "So I'll put it this\nintersection to denote it's covering this edge, but it\nstill belongs to this vertex. Pebbles cannot change vertices.",
    "start": "324120",
    "end": "330460"
  },
  {
    "text": "They have to stay local. These two pebbles could\njust stay where they are.",
    "start": "330460",
    "end": "335860"
  },
  {
    "text": "Here, we could put\none pebble here, another pebble there, one\npebble here, one pebble here.",
    "start": "335860",
    "end": "341334"
  },
  {
    "text": "This is what I call\na pebble cover cause every edge is covered\nby some pebble.",
    "start": "341334",
    "end": "346750"
  },
  {
    "text": "That's the goal in a pebble\ncover is to cover every edge.",
    "start": "346750",
    "end": "354710"
  },
  {
    "text": " You need to cover it once. ",
    "start": "354710",
    "end": "364270"
  },
  {
    "text": "And the pebbles can either cover\nan edge or they can be free.",
    "start": "364270",
    "end": "371030"
  },
  {
    "text": "Free if they're just\nhanging out in the inside here not being\nused for anything.",
    "start": "371030",
    "end": "376450"
  },
  {
    "text": "So our goal is to\nfind pebble covers. But the first claim, why do\nI care about pebble covers, I claimed that\nhaving a pebble cover",
    "start": "376450",
    "end": "383470"
  },
  {
    "text": "is equivalent to\nthe 2k property. So that's what I want to show.",
    "start": "383470",
    "end": "388960"
  },
  {
    "start": "388960",
    "end": "397979"
  },
  {
    "start": "390000",
    "end": "585000"
  },
  {
    "text": "So let's start with that. This is why\neverything is working. A graph has a 2k property if and\nonly if it has a pebble cover.",
    "start": "397979",
    "end": "406939"
  },
  {
    "text": " So that's why we care about\nthese pebble coverings.",
    "start": "406940",
    "end": "415729"
  },
  {
    "text": "And this is actually\npretty easy to prove",
    "start": "415730",
    "end": "421090"
  },
  {
    "text": "and gives a lot of intuition\nfor why everything works here. So let's start with\nthe left direction.",
    "start": "421090",
    "end": "429240"
  },
  {
    "text": "So suppose I have\na pebble cover. Suppose somehow I've\nachieved this property, covering all the edges, using\nonly two pebbles per vertex.",
    "start": "429240",
    "end": "437500"
  },
  {
    "text": "I claim that we then\nsatisfy the 2k property. 2k property says you\ntake any key vertices,",
    "start": "437500",
    "end": "442940"
  },
  {
    "text": "you induce at most\ntwo key edges. So let's consider k vertices.",
    "start": "442940",
    "end": "448220"
  },
  {
    "text": "Someone chooses k vertices. doesn't matter which. It should hold for all\nof them, for all choices.",
    "start": "448220",
    "end": "456810"
  },
  {
    "text": "So we've got a k vertices here. n minus k vertices remaining.",
    "start": "456810",
    "end": "462900"
  },
  {
    "text": "We claim that the number\nof edges induced by those k vertices is at most 2k. So look at one of these\nedges that's wholly inside,",
    "start": "462900",
    "end": "469980"
  },
  {
    "text": "that's induced by\nthese k vertices. ",
    "start": "469980",
    "end": "475380"
  },
  {
    "text": "I claim, well, that edge\nmust be covered by a pebble. Which pebble?",
    "start": "475381",
    "end": "481190"
  },
  {
    "text": "Well, either this one or\none on the other side. But the point is it\nis covered by a pebble",
    "start": "481190",
    "end": "488040"
  },
  {
    "text": "among these vertices. My concern is, well, maybe you\nworry about an edge like this.",
    "start": "488040",
    "end": "494790"
  },
  {
    "text": " Or, maybe you worry\nabout a pebble",
    "start": "494790",
    "end": "500650"
  },
  {
    "text": "here that's covering this\nedge, but that edge is not one of the induced edges. So these vertices are relevant.",
    "start": "500650",
    "end": "507419"
  },
  {
    "text": "It's just the pebbles inside,\njust among these 2k pebbles.",
    "start": "507420",
    "end": "513740"
  },
  {
    "text": "So in here, there\nare 2k pebbles. They must fully cover\nthe induced subgraph.",
    "start": "513740",
    "end": "520159"
  },
  {
    "text": "They must cover all\nthe edges in here. That means they're\nat most 2k edges",
    "start": "520159",
    "end": "525470"
  },
  {
    "text": "because there's one\npebble per edge at least. And so there's 2k\npebbles in here.",
    "start": "525470",
    "end": "531410"
  },
  {
    "text": "This means they're at\nmust 2k induced edges. ",
    "start": "531410",
    "end": "541340"
  },
  {
    "text": "Clear? That's the obvious direction. This doesn't really exploit\nvery much about pebbles.",
    "start": "541340",
    "end": "548424"
  },
  {
    "text": "The other direction is a\nlittle more interesting.  Why should these\npebble covers exist?",
    "start": "548424",
    "end": "555000"
  },
  {
    "text": "Because they seem\npretty constrained. Pebbles can't move very far. It's not really clearly\nthe same, but it is.",
    "start": "555000",
    "end": "564300"
  },
  {
    "text": "So if we have the 2k property-- So now we know that every\nsubgraph of k vertices",
    "start": "564300",
    "end": "571170"
  },
  {
    "text": "induces at most 2k edges. Now, we want to prove that\na pebble cover exists. ",
    "start": "571170",
    "end": "580030"
  },
  {
    "text": "I'm going to wait. It will become\nobvious momentarily.",
    "start": "580030",
    "end": "586180"
  },
  {
    "start": "585000",
    "end": "1955000"
  },
  {
    "text": "This is fun. Sometimes, it's easier\nto prove a theorem than it is to come\nup with an algorithm.",
    "start": "586180",
    "end": "591610"
  },
  {
    "text": "But in this case, it's easier\nto come up with an algorithm than it is to prove a theorem. And you can use the algorithm\nitself to prove the theorem,",
    "start": "591610",
    "end": "598580"
  },
  {
    "text": "so I'm going to prove\nthis in a moment. Stay tuned. ",
    "start": "598580",
    "end": "604820"
  },
  {
    "text": "Meanwhile, we have an algorithm.  This algorithm is\nan example of what",
    "start": "604820",
    "end": "610620"
  },
  {
    "text": "we call an incremental style\nalgorithm where you imagine starting with the\nempty graph and then",
    "start": "610620",
    "end": "616259"
  },
  {
    "text": "you put in all the edges\nthat belong one at a time. So add edges one at a time\nstarting from nothing.",
    "start": "616260",
    "end": "623760"
  },
  {
    "start": "623760",
    "end": "629140"
  },
  {
    "text": "One detail is we're going to\nimagine as edges get added, we want to direct them.",
    "start": "629140",
    "end": "634840"
  },
  {
    "text": "We're going to direct edges\nfrom the pebble that covers them",
    "start": "634840",
    "end": "646240"
  },
  {
    "text": "to the other side. So if we have an edge and\nwe have a pebble over here,",
    "start": "646240",
    "end": "658220"
  },
  {
    "text": "than I'm going to imagine\nthe edge as being directed from the pebble\nto the other side.",
    "start": "658220",
    "end": "664220"
  },
  {
    "text": "That's just for convenience\nfor expressing the algorithm in a moment.",
    "start": "664220",
    "end": "669530"
  },
  {
    "text": "So now this is for\nthe 2k property.",
    "start": "669530",
    "end": "674860"
  },
  {
    "text": "We'll get to an algorithm\nfor 2k minus 3 a little bit. ",
    "start": "674860",
    "end": "689150"
  },
  {
    "text": "So now we have a 4 loop over\nthe edge is we're going to add.",
    "start": "689150",
    "end": "694990"
  },
  {
    "text": "And when I immediately add an\nedge, it will not be covered, so it's not directed,\njust some edge v-w.",
    "start": "694990",
    "end": "704000"
  },
  {
    "text": "I would like to\nput a pebble here, but it could be\nboth pebbles at w are occupied for\nsome other edges.",
    "start": "704000",
    "end": "709650"
  },
  {
    "text": "It could be the\npebbles for v are also occupied for some other edges.",
    "start": "709650",
    "end": "715942"
  },
  {
    "text": "That would be annoying. I want to somehow reassign\na pebble to cover this edge, so what I'm going to\ndo inside this 4 loop",
    "start": "715942",
    "end": "737800"
  },
  {
    "text": "is search for available pebbles.",
    "start": "737800",
    "end": "743839"
  },
  {
    "text": "And in this case, what\nturns out to be right is a directed path in\nthis directed graph",
    "start": "743840",
    "end": "751700"
  },
  {
    "text": "from either v or w\nto a free pebble.",
    "start": "751700",
    "end": "757310"
  },
  {
    "start": "757310",
    "end": "765790"
  },
  {
    "text": "Either I find one or I don't. If I find one, let's\nsay from v, there's",
    "start": "765790",
    "end": "772505"
  },
  {
    "text": "some edge and then some other\nedge and some other edge. And eventually, I\nfind a free pebble.",
    "start": "772505",
    "end": "778821"
  },
  {
    "text": "Remember a free pebble is one\nthat's floating on the inside, not being used for anything. So what does my\npicture look like?",
    "start": "778821",
    "end": "785700"
  },
  {
    "text": "Remember edges are\ndirected from the pebbles. That means there was a pebble\nat v being used for that edge. There was a pebble\nat this vertex",
    "start": "785700",
    "end": "791360"
  },
  {
    "text": "being used for that edge. There was a pebble\nat this vertex being used for that edge.",
    "start": "791360",
    "end": "796560"
  },
  {
    "text": "In this case, what do I do? ",
    "start": "796560",
    "end": "804120"
  },
  {
    "text": "AUDIENCE: Reverse. PROFESSOR: Reverse them, yeah. Just reverse all the edges. So I have this edge, v-w, here.",
    "start": "804120",
    "end": "812060"
  },
  {
    "text": "I want to put a\npebble here, so I'm going to reassign this guy\nto be over there, this guy",
    "start": "812060",
    "end": "818649"
  },
  {
    "text": "to be over there, this guy\nto be over there, and so on. So I end up with--\nthat's in the way.",
    "start": "818650",
    "end": "828500"
  },
  {
    "text": "Put w over here. The new picture\nis I have v and w. ",
    "start": "828500",
    "end": "835132"
  },
  {
    "text": "And I'm going to have\nleft 4 directed edges. ",
    "start": "835132",
    "end": "841540"
  },
  {
    "text": "So now this pebble got\nassigned to be here.",
    "start": "841540",
    "end": "846790"
  },
  {
    "text": "I can't draw left apparently. The other left. ",
    "start": "846790",
    "end": "852384"
  },
  {
    "text": "This pebble assigned there. This pebble, the free\npebble, gets used up. And now we've got a\nfree pebble over here.",
    "start": "852385",
    "end": "858410"
  },
  {
    "text": "And now we can assign it\nto be on the edge v-w. So if I can find such a\npath from v or from w,",
    "start": "858410",
    "end": "863920"
  },
  {
    "text": "I'm happy because\nthen I can reassign. ",
    "start": "863920",
    "end": "878370"
  },
  {
    "text": "If I find such a path, I just\nshift the pebbles like that,",
    "start": "878370",
    "end": "885660"
  },
  {
    "text": "and I'm done. ",
    "start": "885660",
    "end": "891009"
  },
  {
    "text": "But what if I can't? This is the critical\nissue, and it is also core to this part\nof the proof that we",
    "start": "891010",
    "end": "896340"
  },
  {
    "text": "haven't discover--\nhaven't yet done. Why would we hope\nfor pebble covers",
    "start": "896340",
    "end": "901504"
  },
  {
    "text": "to exist in the first place? We don't know. I claim if this\nalgorithm fails to find",
    "start": "901504",
    "end": "906810"
  },
  {
    "text": "a path in this situation,\nthen you can immediately say you do not satisfy\nthe 2k property.",
    "start": "906810",
    "end": "913600"
  },
  {
    "text": "I'd like to say there's\nno pebble cover, but that's a little harder. I'm going to say you do not\nsatisfy the 2k property.",
    "start": "913600",
    "end": "922160"
  },
  {
    "start": "922160",
    "end": "933819"
  },
  {
    "text": "And we actually know\nalready, from this part, pebble cover\nimplies 2k property.",
    "start": "933820",
    "end": "939232"
  },
  {
    "text": "The contrapositive, which\nwe've already proved, is if you do not\nsatisfy the 2k property, you do not have a pebble cover.",
    "start": "939232",
    "end": "945950"
  },
  {
    "text": "So that will actually guarantee\ncorrectness of the algorithm. If I can prove this part,\nthat it violates 2k property,",
    "start": "945950",
    "end": "951529"
  },
  {
    "text": "then I'll know there was no\npebble cover, and I'm done. ",
    "start": "951530",
    "end": "956960"
  },
  {
    "text": "So why is this true. I claim if you look at\nall the nodes reachable",
    "start": "956960",
    "end": "965970"
  },
  {
    "text": "by directed paths\nfrom v and w, then",
    "start": "965970",
    "end": "973490"
  },
  {
    "text": "that is a set of nodes that\ninduce more than 2k edges.",
    "start": "973490",
    "end": "978620"
  },
  {
    "text": "So let's say their k\nnodes you can reach. I claim there will be more\nthan 2k edges among them.",
    "start": "978620",
    "end": "986050"
  },
  {
    "text": "Why?  It's fun to have proof in\nthe middle of an algorithm.",
    "start": "986050",
    "end": "994510"
  },
  {
    "text": "So here we've got to\nv and w, and these are the k nodes that are\nreachable from v and w, which",
    "start": "994510",
    "end": "1001160"
  },
  {
    "text": "means all of the other edges\nare pointing into this set. And then, over here,\nwe have everybody else.",
    "start": "1001160",
    "end": "1008264"
  },
  {
    "text": "I mean it might be everyone. But potentially, there's\nsome vertices over here.",
    "start": "1008264",
    "end": "1014050"
  },
  {
    "text": "All the edges are directed\nfrom right to left, otherwise we could\nreach more stuff.",
    "start": "1014050",
    "end": "1020350"
  },
  {
    "text": "So what's the situation? v-w is uncovered. There's no pebbles\nthat cover it. ",
    "start": "1020350",
    "end": "1030659"
  },
  {
    "text": "Every other edge is\ncovered because there's only one uncovered\nedge at any moment. These edges are all\ncovered from this end.",
    "start": "1030660",
    "end": "1037240"
  },
  {
    "text": "That's what these\ndirections mean, which means all the\npebbles in here are used to cover induced edges.",
    "start": "1037240",
    "end": "1045160"
  },
  {
    "text": "So all the pebbles in here\nare covering induced edges, and yet, there's one induced\nedge that is not covered.",
    "start": "1045160",
    "end": "1052180"
  },
  {
    "text": "Now they're exactly 2k pebbles. They're all being used. I'm assuming here you never\nhave two pebbles covering",
    "start": "1052180",
    "end": "1058890"
  },
  {
    "text": "the same edge, so that\nmeans-- so there's 2k pebbles.",
    "start": "1058890",
    "end": "1064520"
  },
  {
    "text": "They're all used to cover\ninduced edges, which implies you have\nexactly 2k plus 1 edges.",
    "start": "1064520",
    "end": "1074220"
  },
  {
    "text": "Plus 1 is v-w. That means that means the\ngraph that we've created so far",
    "start": "1074220",
    "end": "1080970"
  },
  {
    "text": "violates the 2k property. Now, we haven't added\nall the edges yet, but if we add more\nedge, it's going to get even worse potentially.",
    "start": "1080970",
    "end": "1087429"
  },
  {
    "text": "If we have 2k plus 1 edges\nnow, in the actual graph, we'll have at least\n2k plus 1 edges.",
    "start": "1087430",
    "end": "1094660"
  },
  {
    "text": "So if this search\nfails, you know that you violate the\n2k property, which",
    "start": "1094660",
    "end": "1101367"
  },
  {
    "text": "means you know that\nthere's no pebble cover. So that proves correctness\nof the algorithm. Now we can come\nback to this claim.",
    "start": "1101367",
    "end": "1108230"
  },
  {
    "text": "This follows, by correctness\nof the algorithm, why.",
    "start": "1108230",
    "end": "1118460"
  },
  {
    "text": "We want to prove if we\nhave the 2k property, then you have a pebble copper. Well, if I have the 2k property,\nthis algorithm will work.",
    "start": "1118460",
    "end": "1128090"
  },
  {
    "text": "This case can never\nhappen because it can only happen when you violate\nthe 2k property. So if you have the 2k\nproperty, this algorithm,",
    "start": "1128090",
    "end": "1135270"
  },
  {
    "text": "you can keep running it. You will always find a path. You'll be able to\nshift the pebbles and always cover things, and\nso you get a pebble cover",
    "start": "1135270",
    "end": "1142440"
  },
  {
    "text": "from the algorithm. The end. ",
    "start": "1142440",
    "end": "1147600"
  },
  {
    "text": "That's how you argue that\nif you have the 2k property, you get a pebble cover. And it's nifty.",
    "start": "1147600",
    "end": "1153013"
  },
  {
    "text": "Without this\nalgorithm, this would be quite tricky to specify. But the algorithm tells\nyou where the violation",
    "start": "1153014",
    "end": "1160330"
  },
  {
    "text": "would be, tells you where you\nwould violate the 2k property. And that lets you prove\nthe claim ultimately.",
    "start": "1160330",
    "end": "1167880"
  },
  {
    "text": "Any questions about that. This, I think, is the\nheart of pebble algorithms and why they work.",
    "start": "1167880",
    "end": "1173960"
  },
  {
    "text": "It's the cleanest part. It gets a little bit messier\nto do the 2k minus 3 thing, so we'll move to that next.",
    "start": "1173960",
    "end": "1181380"
  },
  {
    "text": "Maybe before we go there, we\ncan talk about the running time of the algorithm for\nthose so inclined.",
    "start": "1181380",
    "end": "1191445"
  },
  {
    "start": "1191445",
    "end": "1207679"
  },
  {
    "text": "So the heart of the\nalgorithm is this step, search for directed path\nfor v or w to a free pebble.",
    "start": "1207680",
    "end": "1214330"
  },
  {
    "text": "This is essentially some of\nthe nodes have free pebbles. Those are like good nodes.",
    "start": "1214330",
    "end": "1219370"
  },
  {
    "text": "But basically, we've\ngot a directed graph. We want to find all the nodes\nthat are reachable from v,",
    "start": "1219370",
    "end": "1225929"
  },
  {
    "text": "see if there's any good\nnodes that have free pebbles, search from all\nthe nodes from w. This you could do with a depth\nfirst search or a breadth",
    "start": "1225930",
    "end": "1232940"
  },
  {
    "text": "first search or your\nfavorite search algorithm. Takes linear time. Order the number of\nvertices plus the number",
    "start": "1232940",
    "end": "1238130"
  },
  {
    "text": "of edges in the graph. We do this search v times.",
    "start": "1238130",
    "end": "1243990"
  },
  {
    "text": " Why v times? ",
    "start": "1243990",
    "end": "1254210"
  },
  {
    "text": "So we add edges one at a time. We're hoping that we\nhave the 2k property.",
    "start": "1254210",
    "end": "1261559"
  },
  {
    "text": "The 2k property implies\nthat, in particular, there at most 2v edges. So in general, we\ndo this e times.",
    "start": "1261560",
    "end": "1268549"
  },
  {
    "text": "We keep adding edges. We would add e edges\nto the graph hopefully.",
    "start": "1268550",
    "end": "1273850"
  },
  {
    "text": "In general, e can be much\nlarger than v in a graph. e could v squared, the worst case.",
    "start": "1273850",
    "end": "1280330"
  },
  {
    "text": "But this algorithm\nwill fail by the time you add 2k plus 1 edges\nbecause then you definitely",
    "start": "1280330",
    "end": "1285950"
  },
  {
    "text": "don't satisfy the 2k property\nover the entire graph, so particularly you\nwon't satisfy it on some subset of vertices.",
    "start": "1285950",
    "end": "1291580"
  },
  {
    "text": " So you will only have to\nrun this loop v times, not e times-- or 2v times.",
    "start": "1291580",
    "end": "1299170"
  },
  {
    "text": "So this is a little bit\nsmaller, and so this product is v squared plus ve.",
    "start": "1299170",
    "end": "1307669"
  },
  {
    "text": "Normally, we write ve, but\nthis is slightly more precise, which is the same\nas Bellman Ford",
    "start": "1307670",
    "end": "1313370"
  },
  {
    "text": "algorithm if you've\ntaken algorithms. I'll just mention that there is\nan algorithm slightly fancier",
    "start": "1313370",
    "end": "1319679"
  },
  {
    "text": "that just requires this term. This is possible.",
    "start": "1319680",
    "end": "1325390"
  },
  {
    "text": "You don't need this ve part. but it's beside the point\nto our goal, which is just",
    "start": "1325390",
    "end": "1331795"
  },
  {
    "text": "to understand when\nthings are rigid, when they're not in an\nefficient amount of time.",
    "start": "1331795",
    "end": "1336980"
  },
  {
    "text": "So this is polynomial\nin any case. This also the best known\nalgorithm, v squared.",
    "start": "1336980",
    "end": "1342127"
  },
  {
    "text": "Open problem is whether\nyou could do better. ",
    "start": "1342127",
    "end": "1347770"
  },
  {
    "text": "Questions? Yeah? AUDIENCE: Is there more than 2v\nedges instead of, [INAUDIBLE]",
    "start": "1347770",
    "end": "1355530"
  },
  {
    "text": "that [INAUDIBLE] problem. PROFESSOR: Yes, there\nare more than to v edges. Oh, right! So there's done.",
    "start": "1355530",
    "end": "1361630"
  },
  {
    "text": "Great. You can just check in the\nbeginning, are there more than to v edges. If so, you do not satisfy the 2k\nproperty, and so you can stop.",
    "start": "1361630",
    "end": "1372880"
  },
  {
    "text": "So that takes constant time to\ncheck those cases, otherwise e is small. And then you only\ntake the square time.",
    "start": "1372880",
    "end": "1378910"
  },
  {
    "text": "Thanks. That's key. ",
    "start": "1378910",
    "end": "1386520"
  },
  {
    "text": "So that was the 2k property. Let's do 2k minus 3.",
    "start": "1386520",
    "end": "1394080"
  },
  {
    "start": "1394080",
    "end": "1408960"
  },
  {
    "text": "For the 2k minus\n3 algorithm, it's going to be pretty much\nthe same as this algorithm. So in particular, every\nvertex is to attach pebbles.",
    "start": "1408960",
    "end": "1416900"
  },
  {
    "text": "Each pebble can cover\nwhen it's in an edge, otherwise it's free. Our goal is to cover every edge.",
    "start": "1416900",
    "end": "1422730"
  },
  {
    "text": "But it's slightly differently. We have to deal with\nthis minus 3 business. And for that we need\nanother claim, which",
    "start": "1422730",
    "end": "1440620"
  },
  {
    "text": "is that a graph has a\n2k minus 3 property if",
    "start": "1440620",
    "end": "1447740"
  },
  {
    "text": "and only if g plus three\ncopies of an edge e",
    "start": "1447740",
    "end": "1454640"
  },
  {
    "text": "has the 2k property for\nevery edge, e and g.",
    "start": "1454640",
    "end": "1470610"
  },
  {
    "text": "Should probably say g has. So I want to know whether\nmy-- ultimately, I",
    "start": "1470610",
    "end": "1476930"
  },
  {
    "text": "care whether my graph has\na 2k minus 3 property. This is most of the\nLaman condition. It's the hard part to check.",
    "start": "1476930",
    "end": "1483330"
  },
  {
    "text": "And 2k property is what\nI know how to check. So I claim all you need\nto do to check it-- this would actually\nbe an algorithm.",
    "start": "1483330",
    "end": "1489769"
  },
  {
    "text": "For every edge, turn\nthat single edge into four copies of the\nedge, add three more,",
    "start": "1489770",
    "end": "1495470"
  },
  {
    "text": "check whether it\nhas the 2k property, remove those extra three\ncopies, take the next edge, add three copies,\ncheck the 2k property.",
    "start": "1495470",
    "end": "1503150"
  },
  {
    "text": "So with another\nfactor of e, which has to be order v, if you're\nwilling to spend v cubed time,",
    "start": "1503150",
    "end": "1511750"
  },
  {
    "text": "you can just run this\nalgorithm for each edge, quadruple it, see whether it\nstill has the 2k property.",
    "start": "1511750",
    "end": "1519580"
  },
  {
    "text": "So that's the connection\nbetween these 2 things. Let me prove this claim. And then I'll tell\nyou a better algorithm",
    "start": "1519580",
    "end": "1525210"
  },
  {
    "text": "that only takes v squared time. ",
    "start": "1525210",
    "end": "1533069"
  },
  {
    "text": "Which one's easier? In both cases, I want\nto take k vertices.",
    "start": "1533069",
    "end": "1539524"
  },
  {
    "start": "1539525",
    "end": "1544790"
  },
  {
    "text": "And then I'll do in\nthis direction first. ",
    "start": "1544790",
    "end": "1551090"
  },
  {
    "text": "So how do we prove this? First, this is\nactually really easy.",
    "start": "1551090",
    "end": "1556580"
  },
  {
    "text": "Suppose g has a 2k\nminus 3 property. So if I have k\nvertices here, I know",
    "start": "1556580",
    "end": "1562169"
  },
  {
    "text": "that the number of edges in\nhere is at most 2k minus 3. So here's k vertices.",
    "start": "1562170",
    "end": "1567914"
  },
  {
    "text": "Looking at the number\nof induced edges, it's going to be\nat most 2k minus 3.",
    "start": "1567915",
    "end": "1573270"
  },
  {
    "text": "What I'm claiming is then\nif I quadruple an edge, if I add three new edges, I have\nat most 2k edges afterwards.",
    "start": "1573270",
    "end": "1582370"
  },
  {
    "text": "I think that's pretty clear. 2k minus 3 would be 4 at most. If I add three copies of any\nedge, could be in this set",
    "start": "1582370",
    "end": "1588400"
  },
  {
    "text": "or outside the set\nwould be even better, the number of edges inside\nthe set will be at most 2k.",
    "start": "1588400",
    "end": "1593740"
  },
  {
    "text": "So this is in g. This implies there's at\nmost 2k and g plus thrice e.",
    "start": "1593740",
    "end": "1605620"
  },
  {
    "text": "This is non-standard\nnotation by the way. It just means add three\ncopies of that edge. So we would normally\ndraw that like this,",
    "start": "1605620",
    "end": "1615330"
  },
  {
    "text": "four copies of the edge. So that was half of the\nclaim, pretty trivial.",
    "start": "1615330",
    "end": "1622700"
  },
  {
    "text": "The other half is\nalmost as trivial. ",
    "start": "1622700",
    "end": "1629620"
  },
  {
    "text": "So on the other\ndirection, we assume that g plus 3e has this\nproperty for every edge.",
    "start": "1629620",
    "end": "1636980"
  },
  {
    "text": "And now we need to prove\nthat g has a 2k minus 3 property for every\nset of k vertices.",
    "start": "1636980",
    "end": "1642359"
  },
  {
    "text": "So we're looking at\nthat set of k vertices. We want to argue\nthat in g, there's at most 2k minus 3 edges.",
    "start": "1642359",
    "end": "1648790"
  },
  {
    "text": "What we know is that in here,\nin g plus 3 e for any e-- so it's a little awkward--\nbut let me start by drawing g.",
    "start": "1648790",
    "end": "1657850"
  },
  {
    "text": "We want to claim that the\nnumber of edges in here is at most 2k minus 3, so\nI'll put a question mark.",
    "start": "1657850",
    "end": "1663260"
  },
  {
    "text": " So there are 2\npossibilities here.",
    "start": "1663260",
    "end": "1669410"
  },
  {
    "text": "It could be either this\ngraph is completely empty. If there are no edges in\nhere, then surely there",
    "start": "1669410",
    "end": "1675710"
  },
  {
    "text": "are at most 2k minus\n3 of them, assuming k is bigger than 1, which\nI haven't mentioned.",
    "start": "1675710",
    "end": "1682440"
  },
  {
    "text": "But throughout here, I need\nthe k is bigger than 1. You can never have negative\n1 edges on subgraphs, so the 2k in the 2k\nminus 3 property only",
    "start": "1682440",
    "end": "1690840"
  },
  {
    "text": "hold for at least 2 vertices. K is at least 2. ",
    "start": "1690840",
    "end": "1697070"
  },
  {
    "text": "So if there are no\nedges, find I'm done. If there are edges in here,\nthen I can do this trick.",
    "start": "1697070",
    "end": "1703270"
  },
  {
    "text": "So there's some edge. Pick your favorite edge. Call it e in this subset.",
    "start": "1703270",
    "end": "1709360"
  },
  {
    "text": "Produce out of it\ng plus 3e, which just looks like the\nsame thing, but now it's",
    "start": "1709360",
    "end": "1715260"
  },
  {
    "text": "got four copies of that edge. This we know has at\nmost 2k edges in here.",
    "start": "1715260",
    "end": "1722590"
  },
  {
    "text": "The original graph\nis exactly the same except it lacks those\nthree edges, therefore, there's at most 2k\nminus 3 of them.",
    "start": "1722590",
    "end": "1729380"
  },
  {
    "text": "So it's really the same\nproof in both directions. Here, you have to\nuse your freedom",
    "start": "1729380",
    "end": "1735429"
  },
  {
    "text": "in choosing e to\nchoose an edge that is induced in this subgraph. You can't choose some\nother edge out here.",
    "start": "1735430",
    "end": "1740909"
  },
  {
    "text": " Question? AUDIENCE: So this seems\nkind of cheap because we're",
    "start": "1740910",
    "end": "1749062"
  },
  {
    "text": "using the graph as a\nlinkage in the end,",
    "start": "1749062",
    "end": "1755440"
  },
  {
    "text": "so adding these extra edges,\nthey all collapse into one.",
    "start": "1755440",
    "end": "1761245"
  },
  {
    "text": "PROFESSOR: Ah, interesting. Right. So why this feels\nlike cheating because, from a linkage\nperspective, these 2 guys",
    "start": "1761245",
    "end": "1769110"
  },
  {
    "text": "have exactly the\nsame constraints. AUDIENCE: Yeah. PROFESSOR: I agree. It's weird.",
    "start": "1769110",
    "end": "1774420"
  },
  {
    "text": "At this point, this is a device. You could think of\nit as adding edges.",
    "start": "1774420",
    "end": "1780240"
  },
  {
    "text": "Another way to think\nof it is this edge has to be covered\nby four pebbles.",
    "start": "1780240",
    "end": "1785250"
  },
  {
    "text": "That's probably a\nlittle more intuitive. So having to cover an\nedge by four pebbles, essentially, is\npinning the edge.",
    "start": "1785250",
    "end": "1791540"
  },
  {
    "text": "Because on the one hand, you\nhave a single pebble just to say this is an edge. And then you have\nthree more pebbles",
    "start": "1791540",
    "end": "1797110"
  },
  {
    "text": "to eat up the translations\nand rotations. That's intuitively\nwhat's going on. I agree this looks weird.",
    "start": "1797110",
    "end": "1804470"
  },
  {
    "text": "And at this point, we're just\nplaying the graph theory game and ignoring the linkages. That's the short\nanswer why this is OK.",
    "start": "1804470",
    "end": "1811090"
  },
  {
    "text": "But ultimately,\nintuitively, what's going on is that these three\nedges are just representing the translations\nand rotations being eaten.",
    "start": "1811090",
    "end": "1818750"
  },
  {
    "text": "And they have to be\nsomehow eatable universally at every edge. That's what this is saying.",
    "start": "1818750",
    "end": "1824944"
  },
  {
    "text": "I don't have a great\nintuition for that, but it is-- pretty\nsure you do need to say for every edge,\nnot just some edge.",
    "start": "1824944",
    "end": "1831524"
  },
  {
    "text": " So at this point, you have\na polynomial time algorithm,",
    "start": "1831525",
    "end": "1839059"
  },
  {
    "text": "so I'm done. But let me briefly mention\nhow you could make it faster",
    "start": "1839060",
    "end": "1844260"
  },
  {
    "text": "by modifying this algorithm to\ndo the 2k minus 3 situation.",
    "start": "1844260",
    "end": "1850360"
  },
  {
    "text": "Dare I-- I won't literally\nmodify the algorithm. I'll write a new version.",
    "start": "1850360",
    "end": "1857090"
  },
  {
    "text": "But I'm going to use that\nas a subroutine basically. ",
    "start": "1857090",
    "end": "1875990"
  },
  {
    "text": "And so algorithm\n2k minus 3 version.",
    "start": "1875990",
    "end": "1886150"
  },
  {
    "text": "So it's going to\nbe the same style. We're going to add\nedges one at a time. We'll direct the edges in the\nsame way for each added edge",
    "start": "1886150",
    "end": "1892010"
  },
  {
    "text": "v-w. I'll just write for\neach added edge v-w.",
    "start": "1892010",
    "end": "1900540"
  },
  {
    "start": "1900540",
    "end": "1905700"
  },
  {
    "text": "Before I just tried to add the\nedge and cover it with pebble.",
    "start": "1905700",
    "end": "1911399"
  },
  {
    "text": "Now, I want to cover\nit with four pebbles. I want to basically add\nthe edge four times. ",
    "start": "1911400",
    "end": "1927150"
  },
  {
    "text": "I'm going to write as\nabove to mean this step.",
    "start": "1927150",
    "end": "1932660"
  },
  {
    "text": "So every time I add\nthe edge, I search for a directed path from\nv or w for free pebble.",
    "start": "1932660",
    "end": "1938520"
  },
  {
    "text": "When I find it, I\ndo the pebble shift. I do that four times.",
    "start": "1938520",
    "end": "1944170"
  },
  {
    "text": "Then basically, I have\nfour pebbles on the edge, or you could think of them as\nbeing four copies of the edge, each has one pebble.",
    "start": "1944170",
    "end": "1950560"
  },
  {
    "text": "Either I succeed and I get all\nfour, or I don't get all four. ",
    "start": "1950560",
    "end": "1956500"
  },
  {
    "start": "1955000",
    "end": "2007000"
  },
  {
    "text": "On success, this is just\na temporary measure.",
    "start": "1956500",
    "end": "1963530"
  },
  {
    "text": "At that point, I'm going to\ndelete three of the copies. Put it back to a\nregular single edge.",
    "start": "1963530",
    "end": "1968799"
  },
  {
    "text": "This frees three\npebbles for future use.",
    "start": "1968800",
    "end": "1974077"
  },
  {
    "text": "So I don't want every\nedge to be quadrupled.  I don't want them all to\nbe quadrupled at once.",
    "start": "1974077",
    "end": "1980790"
  },
  {
    "text": "I want to try\nquadrupling one edge, then try quadrupling\nthe next edge, try quadrupling the next edge. But when I'm\nquadrupling an edge,",
    "start": "1980790",
    "end": "1987720"
  },
  {
    "text": "all the other edges\nexist as single edges. So I delete the three copies.",
    "start": "1987720",
    "end": "1992980"
  },
  {
    "text": "And then this four loop\ncontinues and tries the next edge. On failure-- here I'm\ngoing to say something",
    "start": "1992980",
    "end": "2001590"
  },
  {
    "text": "more interesting-- Normally,\non failure I'd say, well, you don't satisfy\nthe 2k minus 3 property. Game over.",
    "start": "2001590",
    "end": "2007690"
  },
  {
    "start": "2007000",
    "end": "2115000"
  },
  {
    "text": "But you can be a little\nmore sophisticated. Just say delete all\nthe copies of e.",
    "start": "2007690",
    "end": "2014970"
  },
  {
    "text": "I guess there's four of them. Whatever pebbles you can\nacquire, you give them up.",
    "start": "2014970",
    "end": "2020690"
  },
  {
    "text": "Delete the edge and\ncall the edge redundant. ",
    "start": "2020690",
    "end": "2028870"
  },
  {
    "text": "Basically, in this\ncase, you could argue that edge was superfluous\nfor rigidity purposes. You didn't need it.",
    "start": "2028870",
    "end": "2035650"
  },
  {
    "text": "So the algorithm\ndoesn't just fail. It says this was a useless edge. And it'll tell you\nwhich edges are useful,",
    "start": "2035650",
    "end": "2042320"
  },
  {
    "text": "which ones are non-redundant\nfrom a rigidity standpoint. And then when you're done,\nyou will be rigid if and only",
    "start": "2042320",
    "end": "2052989"
  },
  {
    "text": "if the number of non-redundant\nedges that remain",
    "start": "2052989",
    "end": "2063690"
  },
  {
    "text": "equals 2n minus 3. So that's the last part\nof the Laman check.",
    "start": "2063690",
    "end": "2069690"
  },
  {
    "text": "So this is giving you a\nlittle bit more information than just do I satisfy\nthe 2k minus 3 property.",
    "start": "2069690",
    "end": "2074719"
  },
  {
    "text": "To get that, you just check\nwhether you ever failed. But in this case,\nyou can actually see, ah, these are\nthe useless edges.",
    "start": "2074719",
    "end": "2081590"
  },
  {
    "text": "They're those overbracing edges. Everything else is useful. And if I end up having enough\nuseful edges to n minus 3",
    "start": "2081590",
    "end": "2088629"
  },
  {
    "text": "of them, then I know I'm rigid. Otherwise, I'm going\nto be flexible. So this gives you all\nthe information you want.",
    "start": "2088630",
    "end": "2096144"
  },
  {
    "text": "With a little bit\nmore effort, you could even figure out if I'm\nflexible, which parts are rigid",
    "start": "2096144",
    "end": "2102040"
  },
  {
    "text": "and which parts can move\nrelative to each other. This, of course,\ngenerically rigid.",
    "start": "2102040",
    "end": "2107700"
  },
  {
    "text": " Finally, let me show you\nthis thing in action.",
    "start": "2107700",
    "end": "2114970"
  },
  {
    "text": "So look over there. This is an implementation\nby Audrey Lee-Saint John.",
    "start": "2114970",
    "end": "2121780"
  },
  {
    "text": "And so here's a simple graph. You can probably see this\ntop part is flexible. It's quadrilateral.",
    "start": "2121780",
    "end": "2128069"
  },
  {
    "text": "Bottom part is overbraced. This is in 2 dimensions, right? So just triangles\nwould be enough,",
    "start": "2128070",
    "end": "2133856"
  },
  {
    "text": "but I've added an\nextra edge here. And this is going to check\nthe Laman condition one",
    "start": "2133856",
    "end": "2138920"
  },
  {
    "text": "step at a time. So we start with 2\npebbles everywhere. We start by adding\nthat top edge.",
    "start": "2138920",
    "end": "2144650"
  },
  {
    "text": "Right now, there are four\npebbles on that edge, so it's great. I can just add the edge. Let's say I added it four times.",
    "start": "2144650",
    "end": "2151262"
  },
  {
    "text": "There are four pebbles there. But then in the end,\nI just need one. So let's skip that step.",
    "start": "2151262",
    "end": "2156470"
  },
  {
    "text": "And now I've got the one\npebble from b, and we're happy. So that is its own\nrigid component.",
    "start": "2156470",
    "end": "2163270"
  },
  {
    "text": "Next, let's add this edge ef. So this also has four\npebbles on it, so we're done.",
    "start": "2163270",
    "end": "2169010"
  },
  {
    "text": "Next, we have cd. That also has-- you\ncould change the order if you think this\none's a little trivial. Now is when the action happens.",
    "start": "2169010",
    "end": "2174940"
  },
  {
    "text": "Let's add this edge bc. So currently, it is only\ncovered by three pebbles.",
    "start": "2174940",
    "end": "2181380"
  },
  {
    "text": "But we need a fourth. So we're going to take one\nof these free pebbles on a",
    "start": "2181380",
    "end": "2187619"
  },
  {
    "text": "and move it along b. We found that by starting\nfrom b and searching out and finding a free pebble.",
    "start": "2187620",
    "end": "2193160"
  },
  {
    "text": "So we just flip that edge. Now we've got a\nfree pebble on b. Now we've got four pebbles on\nbc, and we can add the edge.",
    "start": "2193160",
    "end": "2199930"
  },
  {
    "text": "But we only actually\ntake one of them. So I'm skipping the part\nwhere we add the four copies and immediately remove three\nof them because that's silly.",
    "start": "2199930",
    "end": "2208310"
  },
  {
    "text": "Cool. So that's its own rigid\ncomponent it turns out. Each of these things\nis independently--",
    "start": "2208310",
    "end": "2213319"
  },
  {
    "text": "the colors represent\nrigid components. And right now nothing\nis tied together. Everything's flexible.",
    "start": "2213320",
    "end": "2218780"
  },
  {
    "text": "Flexible at b. Flexible at c. Let's add this diagonal df.",
    "start": "2218780",
    "end": "2225499"
  },
  {
    "text": "So right now, it\nonly has one pebble, which means we\nneed four pebbles. So we're actually going\nto have to get one at f,",
    "start": "2225499",
    "end": "2230960"
  },
  {
    "text": "and we're going\nto have to get one at d because there can\nonly be two at each. So first, we'll do I\nguess a search from d,",
    "start": "2230960",
    "end": "2238367"
  },
  {
    "text": "and we immediately\nfind a pebble. We move it down there. Great. Then, we search from f.",
    "start": "2238367",
    "end": "2244160"
  },
  {
    "text": "We find a pebble there. We move it. Boom! We've got our edge,\nadded all four pebbles.",
    "start": "2244160",
    "end": "2251346"
  },
  {
    "text": "Eventually we're going\nto run out of pebbles, but right now, we\nare very flexible. Let's add this other diagonal.",
    "start": "2251346",
    "end": "2256630"
  },
  {
    "text": "This should also be possible. Right now, there's one\npebble at e, one pebble at c. We've got to find\ntwo more pebbles.",
    "start": "2256630",
    "end": "2263350"
  },
  {
    "text": "So first, we'll\nfollow this edge. Find a free pebble at f. That was easy. Next, we'll look at from c.",
    "start": "2263350",
    "end": "2271242"
  },
  {
    "text": "There's only one way\nwe can go from c. We can't follow the back edge. Got to go forward. Got a pebble at d.",
    "start": "2271242",
    "end": "2277809"
  },
  {
    "text": "Flip it around. Now, we've got four pebbles on\nc and e, so we can add the edge.",
    "start": "2277810",
    "end": "2283360"
  },
  {
    "text": " Now, let's add ef. Right now, we've only got\none pebble, yet we need four.",
    "start": "2283360",
    "end": "2290810"
  },
  {
    "text": "So let's start by\nsearching from a. Oh, we found a\npebble immediately. In general, we would have\nto follow many edges.",
    "start": "2290810",
    "end": "2297570"
  },
  {
    "text": "So there's a from f. There are two ways we could go. Either one of them would\nhave given us a pebble.",
    "start": "2297570",
    "end": "2302710"
  },
  {
    "text": "Let's flip the yellow edge. Boom! We've got f, one pebble,\nbut we need another one.",
    "start": "2302710",
    "end": "2308507"
  },
  {
    "text": "Now, we cannot get another\npebble from e because we just flipped the edge, but we\ncan get a pebble from d, so we flip that edge.",
    "start": "2308507",
    "end": "2316579"
  },
  {
    "text": "And now we can add the\nedge af to more edges. It's a little tedious.",
    "start": "2316580",
    "end": "2323770"
  },
  {
    "text": "So next is cf. We're running out\nof pebbles here. There's only five pebbles\ntotal in the system.",
    "start": "2323770",
    "end": "2331450"
  },
  {
    "text": "We need four of them\nright here because we're getting almost rigid. So let's see.",
    "start": "2331450",
    "end": "2337190"
  },
  {
    "text": "We've got cf. Let's start from\nsearching from f. There's only one way we can go.",
    "start": "2337190",
    "end": "2342470"
  },
  {
    "text": "We find a pebble. We flip it around. Now we've got c. There's only one\nway to go from c.",
    "start": "2342470",
    "end": "2348869"
  },
  {
    "text": "We find the pebble at e. And we flip it around. Now we've got the two pebbles.",
    "start": "2348870",
    "end": "2354960"
  },
  {
    "text": "Cool. So we've got the\nthree pebbles here, which are representing our\ntranslations and rotations.",
    "start": "2354960",
    "end": "2360230"
  },
  {
    "text": "The only other pebble\nleft is this one, which is basically representing\nthe degree of freedom in this quadrilateral.",
    "start": "2360230",
    "end": "2366490"
  },
  {
    "text": "So when we go to add the\nlast edge, which is-- so at this point, this is\na ridge it component because of the triangles.",
    "start": "2366490",
    "end": "2373290"
  },
  {
    "text": "And we go to add\nthe last edge, we will fail to find\nenough pebbles.",
    "start": "2373290",
    "end": "2378310"
  },
  {
    "text": "Let's see. We can find three of them. We can grab the one from e. Or let's see so-- it's\nnot going to show us.",
    "start": "2378310",
    "end": "2385860"
  },
  {
    "text": "But from e, we can grab\nf, the pebble at f. From d, we can grab\nthe pebble at c.",
    "start": "2385860",
    "end": "2392160"
  },
  {
    "text": "From d, we can grab\nthe other pebble at f. We've got three\npebbles, but there's no way to get to this pebble\nbecause both of these edges",
    "start": "2392160",
    "end": "2399560"
  },
  {
    "text": "are directed down. So you can never get from the\nbelow part to the above part. So it's not obvious\nthat this is working.",
    "start": "2399560",
    "end": "2406230"
  },
  {
    "text": "That's what the proof is for. But at least you\nsee it in action.",
    "start": "2406230",
    "end": "2411410"
  },
  {
    "text": "I'll just run it very\nquickly for another graph. Let's say a big one.",
    "start": "2411410",
    "end": "2417600"
  },
  {
    "text": "This one is minimally,\ngenerically rigid. So it's fun to\nwatch for a while.",
    "start": "2417600",
    "end": "2423250"
  },
  {
    "text": "You get pebbles moving around. In this case, you\nhave some longer paths",
    "start": "2423250",
    "end": "2429820"
  },
  {
    "text": "you have to follow to\nget enough pebbles. It depends a lot on the\ninsertion order that you use.",
    "start": "2429820",
    "end": "2435515"
  },
  {
    "start": "2435515",
    "end": "2441950"
  },
  {
    "text": "So in each case, you need four\npebbles, two on each side. And if so, you\ncan add your edge.",
    "start": "2441950",
    "end": "2447380"
  },
  {
    "text": "Otherwise, you can't. What I haven't described\nis this color coding which is figuring out when\nyou have rigid components.",
    "start": "2447380",
    "end": "2454190"
  },
  {
    "text": "Roughly speaking, to find\nwhat your rigid component is-- if you're an edge, you want to\nknow what rigid component am",
    "start": "2454190",
    "end": "2460090"
  },
  {
    "text": "I in-- you basically just\nsearch for all the vertices that are reachable\nfrom your edge.",
    "start": "2460090",
    "end": "2467510"
  },
  {
    "text": "Those are all in\nyour rigid component. That's what we saw. So this graph happens\nto be minimally rigid,",
    "start": "2467510",
    "end": "2473075"
  },
  {
    "text": "and it detects that. But then it can be\na little bit more as in your rigid component.",
    "start": "2473075",
    "end": "2479180"
  },
  {
    "text": "Some of the incoming\nedges-- let's see.",
    "start": "2479180",
    "end": "2484349"
  },
  {
    "text": "Draw a picture. So here's everything\nyou can reach from v-w.",
    "start": "2484350",
    "end": "2490410"
  },
  {
    "text": "And say you're following\nan incoming edge here from some other vertex u. And then suppose these\nare all the things",
    "start": "2490410",
    "end": "2496400"
  },
  {
    "text": "you can reach from you. If there are zero\npebbles out here, then this whole thing\nis a rigid component.",
    "start": "2496400",
    "end": "2503622"
  },
  {
    "text": "And you just keep doing that. You check an incoming edge. If there's zero pebbles\nin that reachable piece,",
    "start": "2503622",
    "end": "2509090"
  },
  {
    "text": "then you merge. And you keep doing that. Those are all the things that\nare rigidly attached to you. So I won't prove that.",
    "start": "2509090",
    "end": "2514510"
  },
  {
    "text": "It's a little tricky to\nprove, but it's fairly easy to compute. And you could actually do it\nin the same amount of time. As you're building\nthis thing up,",
    "start": "2514510",
    "end": "2520790"
  },
  {
    "text": "you can do the color\ncoding to figure out which things are in the\nsame component, which things are in different components.",
    "start": "2520790",
    "end": "2527880"
  },
  {
    "text": "Let's see. So another fun fact\nis this little part.",
    "start": "2527880",
    "end": "2537110"
  },
  {
    "text": "This says it's the\n2k minus 3 property. The same algorithm you could\nuse to check 5k minus 27,",
    "start": "2537110",
    "end": "2545130"
  },
  {
    "text": "or whatever you want, for fixed\nnumbers like two and three, the same pebble\nalgorithm can detect",
    "start": "2545130",
    "end": "2553960"
  },
  {
    "text": "that ak minus b property. And that's actually useful\nfor a lot of different things.",
    "start": "2553960",
    "end": "2559630"
  },
  {
    "text": "This is done originally\nby Lee and Streinu. Same lee, and Streinu\nwe'll be seeing",
    "start": "2559630",
    "end": "2567000"
  },
  {
    "text": "some of her results in a\ncouple of classes as well. For example-- so this is\nthat-- 3D body and bar.",
    "start": "2567000",
    "end": "2579970"
  },
  {
    "text": "So actually let me\nshow you the kind of scenario we're\nthinking about. So I mentioned 3D.",
    "start": "2579970",
    "end": "2586140"
  },
  {
    "text": "If we have vertices\nand bars between them, we don't know how to\ncharacterize generic rigidity.",
    "start": "2586140",
    "end": "2593950"
  },
  {
    "text": "But a slightly different\nproblem, which is 3D bodies, these are polyhedron. And they have bars\nconnected between them.",
    "start": "2593950",
    "end": "2602380"
  },
  {
    "text": "This we know how to solve\nin 3D and in any dimension.",
    "start": "2602380",
    "end": "2607599"
  },
  {
    "text": "And so this is a picture\nof not only having-- so their bodies can\nspin unlike vertices.",
    "start": "2607600",
    "end": "2615430"
  },
  {
    "text": "Vertices can't rotate. Nothing happens when\nyou rotate a vertex. Bodies have this extra\ndegree of freedom. ",
    "start": "2615430",
    "end": "2623567"
  },
  {
    "text": "So there are two things\nwe're allowing here, one is to add a hinge\nbetween two bodies and the other is to add\nbars connecting them",
    "start": "2623567",
    "end": "2630000"
  },
  {
    "text": "from various random points. And it's generic, so these\npoints will never coincide. I think that's what makes\nthis different from a vertex.",
    "start": "2630000",
    "end": "2636600"
  },
  {
    "text": "Vertex bars always coincide. Here, they all just\nattach to generic points. So it turns out you can\nsimulate a hinge by five bars.",
    "start": "2636600",
    "end": "2645470"
  },
  {
    "text": "They're equivalent. So both of these can be\ncaptured by 6K minus 6 property.",
    "start": "2645470",
    "end": "2653234"
  },
  {
    "text": "Turns out these things will\nbe generically rigid if and only if you satisfy\nthe 6K minus 6 property and you have exactly\n6K minus 6 bars.",
    "start": "2653235",
    "end": "2661930"
  },
  {
    "text": "And this is proved by\ntwo or three people.",
    "start": "2661930",
    "end": "2667150"
  },
  {
    "text": "I mean you need to add\ntwo results together, one from the '90s and\none from much older,",
    "start": "2667150",
    "end": "2673130"
  },
  {
    "text": "I think, in graph theory. But in particular, Tae\nwas involved from 1984.",
    "start": "2673130",
    "end": "2681260"
  },
  {
    "text": "And it's funny. The paper starts out with, if\nyou ask any structural engineer if you have two\nbodies how many bars you have to add to rigidify\nthem, they will say six.",
    "start": "2681260",
    "end": "2688716"
  },
  {
    "text": "I'm like, OK, I\ndidn't know that. But six is the right answer. And that's why the\n6K minus 6 basically.",
    "start": "2688716",
    "end": "2696339"
  },
  {
    "text": "And and we can use\nthis pebble algorithm to solve that for\nfree basically. And this is actually\nimplemented here",
    "start": "2696340",
    "end": "2704380"
  },
  {
    "text": "in the same kind of software. I'll just run it quickly\nbecause it's a lot of pebbles.",
    "start": "2704380",
    "end": "2709910"
  },
  {
    "text": "Every vertex has six pebbles. You just keep going.",
    "start": "2709910",
    "end": "2715369"
  },
  {
    "text": "You need to cover every\nedge with how many pebbles?",
    "start": "2715370",
    "end": "2722930"
  },
  {
    "text": "Before it was four,\nso now it should be 7, I believe, one more\nthan the six here.",
    "start": "2722930",
    "end": "2729460"
  },
  {
    "text": "So 6k minus 6. Anyway, this graph,\nwhile it's not obvious,",
    "start": "2729460",
    "end": "2735570"
  },
  {
    "text": "is minimally rigid\nin this world. And it corresponds exactly\nto the left example.",
    "start": "2735570",
    "end": "2742570"
  },
  {
    "text": "It's hard to see because\nwe've replaced the hinges here by six bars.",
    "start": "2742570",
    "end": "2747590"
  },
  {
    "text": "So that's why we got all the\nsix-- all the duplicated edges. Here, you see the duplicated\nare different from a rigidity",
    "start": "2747590",
    "end": "2753870"
  },
  {
    "text": "standpoint because having three\nedges between the same pair of objects is no longer just\nthe same as having one edge",
    "start": "2753870",
    "end": "2759970"
  },
  {
    "text": "because they attach\nto different points. Each one can spin. These are universal\njoints by the way.",
    "start": "2759970",
    "end": "2765170"
  },
  {
    "text": "So these bars can\nrotate around the body. The body can spin. Lots of things can happen.",
    "start": "2765170",
    "end": "2770940"
  },
  {
    "text": "But this is enough to rigidify. Is there a question? Cool.",
    "start": "2770940",
    "end": "2776480"
  },
  {
    "text": "I'm not going to prove that. You can read the papers\nif you're interested. But it's interesting.",
    "start": "2776480",
    "end": "2781510"
  },
  {
    "text": "Bodies and bars are so much\neasier than other things. One other thing you can do\nis called angular rigidity.",
    "start": "2781510",
    "end": "2789680"
  },
  {
    "start": "2785000",
    "end": "2844000"
  },
  {
    "text": "This is a fairly new\nresult by same people. If you have a bunch of\nlines in 3D, and you",
    "start": "2789680",
    "end": "2796349"
  },
  {
    "text": "have angular constraints. In this case, every\ntriple of these lines has an angular constraint that\nit must be equal to alpha.",
    "start": "2796350",
    "end": "2802720"
  },
  {
    "text": "That's what's drawn on\nthis spherical picture. Over here, we have two bodies. So here we have lines.",
    "start": "2802720",
    "end": "2807809"
  },
  {
    "text": "Here, we have bodies. And there are three\nconstraints that",
    "start": "2807810",
    "end": "2812890"
  },
  {
    "text": "fix the angles between how the\nangles meet at these bodies. And they claim is that both\nof these are angularly rigid,",
    "start": "2812890",
    "end": "2820960"
  },
  {
    "text": "meaning things can\nstill slide up and down, but the angles are all fixed.",
    "start": "2820960",
    "end": "2826560"
  },
  {
    "text": "And you can test this again. This case actually turns out\nit's the 2k minus 3 property",
    "start": "2826560",
    "end": "2833490"
  },
  {
    "text": "again, same as Laman. This one, I've forgotten. I have to check. I think it's 3k minus 3.",
    "start": "2833490",
    "end": "2841440"
  },
  {
    "text": "Yeah, 3k minus 3. So cool things. One last question.",
    "start": "2841440",
    "end": "2847579"
  },
  {
    "start": "2844000",
    "end": "3022000"
  },
  {
    "text": "Connected banana. So there's this three banana\nexample-- or two banana",
    "start": "2847580",
    "end": "2853340"
  },
  {
    "text": "example. I'm getting ahead of\nmyself-- which was weird. You have this one banana on the\nleft, one banana on the right.",
    "start": "2853340",
    "end": "2859590"
  },
  {
    "text": "And there's this implicit,\nimplied hinge, as they call it, between the two points. The whole thing is flexible,\nbut if you check it,",
    "start": "2859590",
    "end": "2866370"
  },
  {
    "text": "it satisfies the Lama condition. It satisfies 3k\nminus 6, which is what it should be\nfor 3D rigidity.",
    "start": "2866370",
    "end": "2873839"
  },
  {
    "text": "This is a 3D. Now, this graph is--\nseems trivial-- I mean it seems easy to figure\nout that this is flexible",
    "start": "2873840",
    "end": "2880530"
  },
  {
    "text": "because there's a two cut. There are two vertices\nyou can remove that disconnect the\ngraph into two pieces.",
    "start": "2880530",
    "end": "2886430"
  },
  {
    "text": "So if you could just subdivide,\ndo the left part separately from the right part, you should\nbe able to figure this out.",
    "start": "2886430",
    "end": "2892930"
  },
  {
    "text": "Unfortunately, this example\ncan be made more connected, and that's what\nthe question was. So this is an old\nexample by Henry Crapo.",
    "start": "2892930",
    "end": "2900740"
  },
  {
    "text": " A modification by\nWalter Whiteley",
    "start": "2900740",
    "end": "2906599"
  },
  {
    "text": "is that if you add a single\npoint here and attach it to those two points--\nsorry, those three points--",
    "start": "2906600",
    "end": "2913380"
  },
  {
    "text": "this will be three connected,\nstill be flexible, and still satisfy Laman because we added\nthree edges and one vertex,",
    "start": "2913380",
    "end": "2920835"
  },
  {
    "text": "so it still satisfies Laman. So that sucks. We think, oh, maybe\nfour connected.",
    "start": "2920835",
    "end": "2926670"
  },
  {
    "text": "Well, you can make it\nfour connected, too, by adding a triangle\nin the center and connecting these six,\nadding these 6 connections.",
    "start": "2926670",
    "end": "2935720"
  },
  {
    "text": "Well, what about 5 connected? Well, five connected,\nyou can also do. And this is an example\ncalled the banana spider.",
    "start": "2935720",
    "end": "2943670"
  },
  {
    "text": "Although it seems a\nbit of a misnomer. It should be-- but I\nguess banana spiders are actual object--\nactual species.",
    "start": "2943670",
    "end": "2950060"
  },
  {
    "text": "This really should\nbe a banana insect because this guy\nhas six legs, three on the left, three on the right.",
    "start": "2950060",
    "end": "2956640"
  },
  {
    "text": "So if it is an\noctahedron in the center, and then you add these\nthree connections, and you can actually prove\nthat any graph you have,",
    "start": "2956640",
    "end": "2963490"
  },
  {
    "text": "any example that's maybe only\none or two or three connected, whatever, you can make it five\nconnected by whenever you have",
    "start": "2963490",
    "end": "2970770"
  },
  {
    "text": "two four connected components--\nor five things components I guess-- just add a spider\nin the middle to bridge them,",
    "start": "2970770",
    "end": "2977799"
  },
  {
    "text": "and it will be as\nflexible as before. And it will still satisfy Laman. So five connectivity doesn't\nbuy you anything unfortunately.",
    "start": "2977800",
    "end": "2986549"
  },
  {
    "text": "I guess you could ask\nfor six connectivity, but six connectivity,\nI think, is impossible",
    "start": "2986549",
    "end": "2991840"
  },
  {
    "text": "because you only have\n3n minus 6 edges.  That's the limit.",
    "start": "2991840",
    "end": "2998220"
  },
  {
    "text": "So sadly, connectivity is not\nthe right-- doesn't buy us anything. And that's what we know about\nvertex and bar structures in 3D",
    "start": "2998220",
    "end": "3009160"
  },
  {
    "text": "sadly. Tough open problem. Any questions?",
    "start": "3009160",
    "end": "3015400"
  },
  {
    "text": "That's it for today. ",
    "start": "3015400",
    "end": "3022796"
  }
]