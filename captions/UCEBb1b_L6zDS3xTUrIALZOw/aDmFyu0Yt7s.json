[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6050"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation, or to\nview additional materials",
    "start": "6050",
    "end": "12700"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12700",
    "end": "25725"
  },
  {
    "text": "PROFESSOR: All right. Today, more games. Last time in\ngeneral, we're going",
    "start": "25725",
    "end": "31540"
  },
  {
    "text": "to look at this categorization\nof different types of games. So far we've been focusing on\nthe one-player category, which",
    "start": "31540",
    "end": "39580"
  },
  {
    "text": "normally think of as\npuzzles or not games at all. But today we're going to branch\nout in the other directions.",
    "start": "39580",
    "end": "47170"
  },
  {
    "text": "And we're going to talk about\nzero-player games, which arguably are also not\ngames, and two-player games.",
    "start": "47170",
    "end": "54150"
  },
  {
    "text": "But to fill out this\nspace, we probably won't get out here yet to\nEXPTIME and Undecidable games.",
    "start": "54150",
    "end": "63740"
  },
  {
    "text": "But we will stick to this chunk. We're going to start\nwith zero-player games,",
    "start": "63740",
    "end": "69210"
  },
  {
    "text": "also simulations-- Game of Life\nis the classic example here. And these can be very hard,\ndespite being very simple",
    "start": "69210",
    "end": "77270"
  },
  {
    "text": "and not really\nhaving any choices. So as a funny equality here,\nthe sliding block puzzles",
    "start": "77270",
    "end": "83810"
  },
  {
    "text": "and things that we\nlooked at last time where you have agency, you have\na choice of which move to make,",
    "start": "83810",
    "end": "89870"
  },
  {
    "text": "will remain PSPACE\ncomplete even when you don't have that choice. This category is\nnot so interesting.",
    "start": "89870",
    "end": "96060"
  },
  {
    "text": "If you a polynomially\nbounded zero-player game, that is a computer. And it can just compute\nsomething for polynomial time.",
    "start": "96060",
    "end": "103420"
  },
  {
    "text": "And recall, this polynomially\nbounded number of moves. And this is an exponentially\nbounded number of moves.",
    "start": "103420",
    "end": "110508"
  },
  {
    "text": "Although you can actually\ngo a little bit higher. And we'll talk about that\nand get even harder problems",
    "start": "110509",
    "end": "115660"
  },
  {
    "text": "when you have potentially\ninfinitely many moves. And then we'll go\ninto two-player,",
    "start": "115660",
    "end": "121064"
  },
  {
    "text": "in particular,\ntwo-player bounded, where we get another\nPSPACE completeness result.",
    "start": "121064",
    "end": "127210"
  },
  {
    "text": "As you may recall from time ago,\nall of these versions of games",
    "start": "127210",
    "end": "132580"
  },
  {
    "text": "have constraint\nlogic variations. So we've focused on this one.",
    "start": "132580",
    "end": "139430"
  },
  {
    "text": "But I'll mention this one, and\nthis one, and this one today.",
    "start": "139430",
    "end": "145379"
  },
  {
    "text": "And they're all complete. So we can use them\nto reduce things.",
    "start": "145380",
    "end": "150830"
  },
  {
    "text": "But before we get\nto constraint logic, I'm going to be talking about\nboth more classical ways",
    "start": "150830",
    "end": "155989"
  },
  {
    "text": "of proving hardness\nin these classes, and then also the\nconstraint logic way. And we'll start with\nthe Game of Life.",
    "start": "155990",
    "end": "163950"
  },
  {
    "text": "Let me write down a\ndefinition of the game in case you haven't seen it,\nor if you've forgotten.",
    "start": "163950",
    "end": "171590"
  },
  {
    "text": "So this was invented by Conway. ",
    "start": "171590",
    "end": "181760"
  },
  {
    "text": "'70s. So you have two types of\ncells-- living cells, which",
    "start": "181760",
    "end": "187885"
  },
  {
    "text": "are the black cells;\nand dead cells, those are the white cells. And you have this iteration--\nevery cell in parallel updates.",
    "start": "187885",
    "end": "196299"
  },
  {
    "text": "In general, this is called\na cellular automaton. And if we have a\nliving cell, it will",
    "start": "196300",
    "end": "203910"
  },
  {
    "text": "continue to live if and only\nif it has two or three living",
    "start": "203910",
    "end": "211205"
  },
  {
    "text": "neighbors. ",
    "start": "211205",
    "end": "217220"
  },
  {
    "text": "This is among the\neight neighbors in the 8-way adjacency. And then if we have\na dead cell, then it",
    "start": "217220",
    "end": "225730"
  },
  {
    "text": "becomes living-- it's\nborn, if you will-- if",
    "start": "225730",
    "end": "232709"
  },
  {
    "text": "and only if it has exactly\nthree living neighbors. ",
    "start": "232710",
    "end": "242209"
  },
  {
    "text": "And so those are the rules. We don't really need\nto know the rules except for verifying that\nvery small gadgets work.",
    "start": "242210",
    "end": "249080"
  },
  {
    "text": "Most of what I'll talk\nabout are higher level than specifics of these rules. But some things you\nshould know is sometimes",
    "start": "249080",
    "end": "255750"
  },
  {
    "text": "you get a periodic\npattern like this pulsar. Sometimes you get\na static pattern. These things don't change\nbecause for example, on the 2",
    "start": "255750",
    "end": "263190"
  },
  {
    "text": "by 2 square, each\nof the living cells has exactly three neighbors.",
    "start": "263190",
    "end": "268280"
  },
  {
    "text": "And so it lives. And each of the dead cells has\nnot exactly three neighbors. And so I guess one or two.",
    "start": "268280",
    "end": "276250"
  },
  {
    "text": "And so they remain dead. And so nothing changes. That's called still life. There's tons of\npuns in this area.",
    "start": "276250",
    "end": "283560"
  },
  {
    "text": "And so that's well and good. And so one question you might\nask is, given a pattern, is it a still life?",
    "start": "283560",
    "end": "288580"
  },
  {
    "text": "Well, that's easy to check. Is it periodic? That's harder to check.",
    "start": "288580",
    "end": "293980"
  },
  {
    "text": "Does it ever die out\nand become nothing? That's actually kind of common. And that, we will prove,\nis very hard to check.",
    "start": "293980",
    "end": "302720"
  },
  {
    "text": "But all these\nquestions are related, other than still\nlife, which is easy.",
    "start": "302720",
    "end": "307890"
  },
  {
    "text": "So some other cool things you\nshould know about are gliders. Gliders are a kind\nof periodic pattern,",
    "start": "307890",
    "end": "314510"
  },
  {
    "text": "but with a diagonal offset. So they go off to infinity\nin a diagonal direction, unless they hit something.",
    "start": "314510",
    "end": "320180"
  },
  {
    "text": "Then something might happen. But in the absence\nof anything else they'll just keep\ngoing on for infinity.",
    "start": "320180",
    "end": "326600"
  },
  {
    "text": "So this is a little different\nfrom most of our games. Most of our games we\nhave a finite board.",
    "start": "326600",
    "end": "332280"
  },
  {
    "text": "There's some rectangular thing. Sometimes Life is\nplayed on a torus. So when you go off\nthe south edge,",
    "start": "332280",
    "end": "338500"
  },
  {
    "text": "you end up on the\nnorth edge, and so on. In that setting, Life is\ngoing to be PSPACE complete.",
    "start": "338500",
    "end": "344760"
  },
  {
    "text": "So in general for\nzero-player games,",
    "start": "344760",
    "end": "353330"
  },
  {
    "text": "if we have a polynomial number\nof moves, then of course",
    "start": "353330",
    "end": "359819"
  },
  {
    "text": "we're going to be\nin polynomial time. If we have an unbounded\nnumber of moves",
    "start": "359820",
    "end": "365360"
  },
  {
    "text": "but a polynomial space,\nbasically, then we're going to get PSPACE.",
    "start": "365360",
    "end": "373610"
  },
  {
    "text": "OK. No surprise. So the finite versions of\nLife will be like that.",
    "start": "373610",
    "end": "381180"
  },
  {
    "text": "But if we have infinite\nspace, normally we",
    "start": "381180",
    "end": "386330"
  },
  {
    "text": "can't think about\ninfinite space. But with Life it's meaningful\nto have an infinite board. But initially only a finite\nrectangle has any stuff in it.",
    "start": "386330",
    "end": "393990"
  },
  {
    "text": "So if you just encode all of the\npositions of the living cells and say, well everything\noutside of that is dead,",
    "start": "393990",
    "end": "401120"
  },
  {
    "text": "then you can think\nabout infinite space. And here we will get that\nthe problem is undecidable.",
    "start": "401120",
    "end": "408349"
  },
  {
    "text": "So there's no finite\nalgorithm to solve it. So that's cool.",
    "start": "408350",
    "end": "414572"
  },
  {
    "text": "And I'm going to tell you a\nlittle bit about both of these. Spaceship is like\na glider, but it goes in one dimension\ninstead of diagonally.",
    "start": "414572",
    "end": "421990"
  },
  {
    "text": "So usually horizontally. There are many\nspaceships out there. This is one particularly\nefficient one.",
    "start": "421990",
    "end": "429160"
  },
  {
    "text": "And one of the coolest\nthings is this thing called Gosper glider gun,\ninvented by Bill Gosper,",
    "start": "429160",
    "end": "435410"
  },
  {
    "text": "I think while he was at MIT. It's this construction up here. And it creates gliders.",
    "start": "435410",
    "end": "441240"
  },
  {
    "text": "And so they just\ngo off to infinity. And you just keep making more,\nand more, and more of them.",
    "start": "441240",
    "end": "447020"
  },
  {
    "text": "So in some infinite sense, this\nthing is periodic, I guess. But at any finite time you have\nmaybe n of these coming out.",
    "start": "447020",
    "end": "453366"
  },
  {
    "text": "And you just keep\nmaking more and more.  Gliders and glider\nguns are the key things",
    "start": "453366",
    "end": "459800"
  },
  {
    "text": "you should know about\nfor hardness proofs. First I'm just going to show you\na couple of pictures of fairly",
    "start": "459800",
    "end": "466900"
  },
  {
    "text": "recent hardness proofs. This is an explicit construction\nof a particular Turing machine.",
    "start": "466900",
    "end": "472287"
  },
  {
    "text": "I think it is a Turing machine\nthat given a number represented in unary doubles that number.",
    "start": "472287",
    "end": "477840"
  },
  {
    "text": "So it's a fairly clean\nmachine, which is in here. And there's two stacks.",
    "start": "477840",
    "end": "483670"
  },
  {
    "text": "So you can think of\na Turing machine, normally you have a tape. And you have your head\nat some cell in the tape.",
    "start": "483670",
    "end": "490270"
  },
  {
    "text": "You can think of that as a\nstack going to your left, and a stack going to your right. Each time you can pop off\nan item from the stack",
    "start": "490270",
    "end": "496220"
  },
  {
    "text": "and push it onto the other side. That would be the same\nas moving to the left or moving to the right.",
    "start": "496220",
    "end": "501829"
  },
  {
    "text": "So this is implementing\nwhat's called a pushdown automaton\nwith two stacks, but basically a Turing\nmachine with one tape.",
    "start": "501829",
    "end": "508259"
  },
  {
    "text": "And you can do that. And this is done\nalgorithmically. So he also applied it to a\nuniversal Turing machine,",
    "start": "508260",
    "end": "514380"
  },
  {
    "text": "if you're more a fan of that. That's the Turing machine that\ntakes a Turing machine as input and simulates it. So that's the code in here.",
    "start": "514380",
    "end": "520025"
  },
  {
    "text": "It's much bigger. Now this construction relies\non the tape being finite.",
    "start": "520025",
    "end": "526310"
  },
  {
    "text": "So it proves PSPACE completeness\nfor the polynomial space version. It will remain in this\nrectangle, as big as it is.",
    "start": "526310",
    "end": "535480"
  },
  {
    "text": "And it will run the machine. If it ran out of\ntape, then the machine",
    "start": "535480",
    "end": "540510"
  },
  {
    "text": "might crash or not\ndo the thing that it was supposed to do if\nit was a Turing machine.",
    "start": "540510",
    "end": "545970"
  },
  {
    "text": "So that's fine for\nPSPACE hardness, because simulating a\nTuring machine is hard. I mentioned that last time.",
    "start": "545970",
    "end": "551560"
  },
  {
    "text": "But not good for undecidability.  Same guy a year later came\nup with a Turing machine that",
    "start": "551560",
    "end": "559680"
  },
  {
    "text": "grows itself automatically. So it's a little hard to see,\nbut this is the original thing.",
    "start": "559680",
    "end": "567520"
  },
  {
    "text": "And then as you run\nit longer and longer, this machine moves\nalong this dotted line.",
    "start": "567520",
    "end": "573670"
  },
  {
    "text": "So it's moved here. This is like the dirt\nthat it leaves behind. And simultaneously\nit's been building",
    "start": "573670",
    "end": "581200"
  },
  {
    "text": "larger and larger versions\nof its stacks, so by the time it needs to use it,\nit will be available.",
    "start": "581200",
    "end": "586680"
  },
  {
    "text": "Because space is\nbounded by time. So limit on the rate of growth.",
    "start": "586680",
    "end": "592870"
  },
  {
    "text": "Very complicated, obviously. But extremely powerful. This establishes that\nsome version of Life",
    "start": "592870",
    "end": "599490"
  },
  {
    "text": "like, will the thing ever\nstop growing, is undecidable. Cause if the machine halts,\nyou could make this thing",
    "start": "599490",
    "end": "605260"
  },
  {
    "text": "just stop. It will non answer the question\nof, given a life setup,",
    "start": "605260",
    "end": "616120"
  },
  {
    "text": "will everything\neventually disappear? At least not easily.",
    "start": "616120",
    "end": "621250"
  },
  {
    "text": "So I'm going to talk about\nthat version and a somewhat older proof, partly\nbecause I like old proofs. And it's a very epic proof.",
    "start": "621250",
    "end": "627680"
  },
  {
    "text": "So this one, I don't\nunderstand the details of. But they are online if you\nwant to study this thing.",
    "start": "627680",
    "end": "634010"
  },
  {
    "text": "There is another proof by\nBerlekamp, Conway, and Guy",
    "start": "634010",
    "end": "639510"
  },
  {
    "text": "in their series of books\ncalled Winning Ways, which is a very cool set of books.",
    "start": "639510",
    "end": "644880"
  },
  {
    "text": "Interested in two-player\ngames in particular. But they have this chapter\nabout life being undecidable. ",
    "start": "644880",
    "end": "653279"
  },
  {
    "text": "At a high level\nit's very simple. It's just if you\nhave a glider, that's going to represent a 1 bit.",
    "start": "653280",
    "end": "658290"
  },
  {
    "text": "If you don't have a glider\nin a particular area, that's going to\nrepresent a zero bit. And so you can think\nof streams of bits",
    "start": "658290",
    "end": "665190"
  },
  {
    "text": "and doing stuff\nwith them over time. And so that's cool.",
    "start": "665190",
    "end": "671810"
  },
  {
    "text": "Everything's going to be\noriented diagonally, of course. Now one useful structure.",
    "start": "671810",
    "end": "677790"
  },
  {
    "text": "That's going to be our wire. We can also build a terminator. They call these eaters.",
    "start": "677790",
    "end": "683560"
  },
  {
    "text": "So this is a\nparticular construction where-- and this\nis frame-by-frame-- if the glider comes\nin here, it basically",
    "start": "683560",
    "end": "690630"
  },
  {
    "text": "gets eaten by the eater,\nand the eater remains. The notation, by the\nway, is that the dots",
    "start": "690630",
    "end": "696270"
  },
  {
    "text": "are going to be newly born\npositions in the next step. And the holes are going\nto die in the next step.",
    "start": "696270",
    "end": "702720"
  },
  {
    "text": "So you can see the transition. Stuff happens. These are just things\nyou need to check. And boom, it ends up\njust the eater remains.",
    "start": "702720",
    "end": "710684"
  },
  {
    "text": "The eater is\notherwise still life. So it will just hang out. So you can send\ngliders into an eater,",
    "start": "710684",
    "end": "716009"
  },
  {
    "text": "and they'll just disappear. One thing to note is\nthat the exact offset",
    "start": "716010",
    "end": "724870"
  },
  {
    "text": "of this stream versus the\neater is very critical. You do something a\nlittle different, eater might explode or\ndo something else weird.",
    "start": "724870",
    "end": "731680"
  },
  {
    "text": "So if you're going to\nbuild these, be careful. We'll talk a little bit\nmore about parity and things",
    "start": "731680",
    "end": "737779"
  },
  {
    "text": "in a moment. OK. So here's a fun thing you can\ndo with a glider gun up top,",
    "start": "737780",
    "end": "745149"
  },
  {
    "text": "and a stream of bits. So if you have a stream\nof bits coming in here. And you have a glider gun\nshooting one, one, one, one",
    "start": "745150",
    "end": "753830"
  },
  {
    "text": "down, then if you\nset up your gliders with the exact right\noffsets-- so I've",
    "start": "753830",
    "end": "759899"
  },
  {
    "text": "got to shift that\ngun to be precise-- and then when gliders\nhit each other, they annihilate each other.",
    "start": "759900",
    "end": "766529"
  },
  {
    "text": "Nothing is left with\nthis particular offset. So what that means\nis in some sense",
    "start": "766530",
    "end": "772320"
  },
  {
    "text": "you're negating the signal. If a 1 comes in here,\nit'll hit another 1. And then 0 will come out here.",
    "start": "772320",
    "end": "778720"
  },
  {
    "text": "But in particular,\nif there's a 0 here, there will be nothing to stop\nthis guy from going through, so you get a 1 out.",
    "start": "778720",
    "end": "785050"
  },
  {
    "text": "So this isn't really a\nnegation, because whenever it's horizontal, it's\ngoing to be one way. And whenever it's negative,\nit's going to be inverted.",
    "start": "785050",
    "end": "791600"
  },
  {
    "text": "But this is really a turn. So if I turn this and\nthen turn it back, which I think is the next\nimage, I can now turn a wire.",
    "start": "791600",
    "end": "798720"
  },
  {
    "text": "So this is progress, but\nalready a little challenging. So we have this input wire\ngets turned by the gun.",
    "start": "798720",
    "end": "805329"
  },
  {
    "text": "Turn back, turn back, turn back. So sufficiently zoomed out,\nyou can do arbitrary turns.",
    "start": "805330",
    "end": "812290"
  },
  {
    "text": "You can use this to delay\nsignals, which is useful, because timing is really\nsensitive here with the wires",
    "start": "812290",
    "end": "818060"
  },
  {
    "text": "and when there's a\none bit or a zero bit. Another thing you\ncan do with this",
    "start": "818060",
    "end": "824560"
  },
  {
    "text": "is get a parity offset shift. Because there are actually\nmany different offsets",
    "start": "824560",
    "end": "830230"
  },
  {
    "text": "of the gliders that all lead to\nevaporation and into nothing.",
    "start": "830230",
    "end": "835420"
  },
  {
    "text": "So you have to believe\nthis a little bit, but there are enough\ndifferent offsets here",
    "start": "835420",
    "end": "840449"
  },
  {
    "text": "that by doing a bunch of\nturns like in this picture, with slightly different\noffsets of each of these guns,",
    "start": "840450",
    "end": "847020"
  },
  {
    "text": "you can shift your signal to be\nanywhere you want on the grid. That's good, because\nall the gadgets will",
    "start": "847020",
    "end": "853500"
  },
  {
    "text": "require very careful alignment. So, that's a shift.",
    "start": "853500",
    "end": "859949"
  },
  {
    "text": "So now here's how we can do\nAND and OR gates pretty easily.",
    "start": "859950",
    "end": "866370"
  },
  {
    "text": "So on the one hand, if\nwe have two streams A, B, and we want to make\nthe end of them.",
    "start": "866370",
    "end": "871450"
  },
  {
    "text": "We're going to use\na single glider gun to kind of merge them together. So a 1 is going to get\nthrough here if and only",
    "start": "871450",
    "end": "879920"
  },
  {
    "text": "if there was a 0 here. And in that case, it\nwill prevent any A from getting through.",
    "start": "879920",
    "end": "886830"
  },
  {
    "text": "So if B was false, there's a 0,\nthen there'll be a glider here. And it will annihilate whatever\nwas an A, so the AND will be 0.",
    "start": "886830",
    "end": "896316"
  },
  {
    "text": "On the other hand, maybe\nboth of them are 0. Then the glider will just\ngo up here to the eater and disappear. So that's also fine.",
    "start": "896317",
    "end": "902639"
  },
  {
    "text": "And if A is zero, then there\nwill be nothing over there,",
    "start": "902640",
    "end": "908040"
  },
  {
    "text": "obviously. And if they're both one,\nthen A will get through, because B will prevent the\ngun here from getting there.",
    "start": "908040",
    "end": "916480"
  },
  {
    "text": "So A and B have to be\nsort of offset in time, because it takes a little\nbit longer for the signal to get here, but\nyou get the And.",
    "start": "916480",
    "end": "923800"
  },
  {
    "text": "And similarly for the OR, if\nyou want to send up a gun here,",
    "start": "923800",
    "end": "931380"
  },
  {
    "text": "and then it's essentially\ngetting negated on the right. So for there to be\nan output in the OR, there must be nothing here.",
    "start": "931380",
    "end": "937950"
  },
  {
    "text": "And so for a glider\nto be blocked, either A blocks\nit or B blocks it.",
    "start": "937950",
    "end": "943670"
  },
  {
    "text": "So then the output\nis the OR of A and B. And because everything\nhere is horizontal,",
    "start": "943670",
    "end": "951694"
  },
  {
    "text": "we're not negating anything. That's actually annoying. It would be better if\nwe had an AND and an OR. Or an AND or an OR, cause\nthen it would be done.",
    "start": "951694",
    "end": "958422"
  },
  {
    "text": "So we still need negation. ",
    "start": "958422",
    "end": "964316"
  },
  {
    "text": "Yeah, question. AUDIENCE: If you go\nback into this line, you are going to have\nthis A and B output",
    "start": "964316",
    "end": "970648"
  },
  {
    "text": "there as well, to\nget the terminator. In the right-hand diagram. PROFESSOR: Right.",
    "start": "970648",
    "end": "975910"
  },
  {
    "text": "Right. Sorry. So there should also\nbe an eater here, because this is\nnot fully occupied.",
    "start": "975910",
    "end": "981680"
  },
  {
    "text": "Good. But because this\nis fully occupied, we don't need an eater there. Cause this is fully occupied,\nwe don't need and eater here.",
    "start": "981680",
    "end": "987120"
  },
  {
    "text": "You could put them\nin for good measure. But, cool.",
    "start": "987120",
    "end": "993050"
  },
  {
    "text": "So before I show\nyou the next gadget, I need another fun tool\ncalled the kick back.",
    "start": "993050",
    "end": "1000360"
  },
  {
    "text": "So this is of somewhat weirder\noffset between two gliders. So one's coming in this way,\nthe other is coming in this way.",
    "start": "1000360",
    "end": "1007210"
  },
  {
    "text": "And stuff happens. And then this glider\ngoes backwards.",
    "start": "1007210",
    "end": "1013600"
  },
  {
    "text": "Returns along its original spot. So this is really cool. It means if you're\nsending a glider,",
    "start": "1013600",
    "end": "1018709"
  },
  {
    "text": "if you can kind of\nhead it off at the pass with the perpendicular\nglider, you can cause that glider to come\nback the way it was going.",
    "start": "1018710",
    "end": "1025829"
  },
  {
    "text": "Which I think exactly\nthe same offset, even.",
    "start": "1025829",
    "end": "1030929"
  },
  {
    "text": "So this is useful\nfor a lot of things. In particular, it lets\nus build a crossover.",
    "start": "1030930",
    "end": "1037189"
  },
  {
    "text": "So the idea with a\ncrossover is that instead of every-- a glider gun produces\ngliders at a certain rate.",
    "start": "1037190",
    "end": "1045589"
  },
  {
    "text": "Call that rate one. When it's so dense, if\nyou cross two streams,",
    "start": "1045589",
    "end": "1052050"
  },
  {
    "text": "you're guaranteed collisions\nand something unintentional will happen. But if I could just\nthin out the stream so",
    "start": "1052050",
    "end": "1057420"
  },
  {
    "text": "that every 10th\nposition is a glider, and then we only look at the\nbits, you know, modular 10,",
    "start": "1057420",
    "end": "1066000"
  },
  {
    "text": "then there will be no\nproblem to do crossings. You just have to set up the\nparity so that the gap happens",
    "start": "1066000",
    "end": "1071070"
  },
  {
    "text": "whenever the other guy happens. And vice versa. So they'll never\ncollide with each other.",
    "start": "1071070",
    "end": "1076730"
  },
  {
    "text": "Even if it's all ones. So here's how you\nthin out a stream.",
    "start": "1076730",
    "end": "1082549"
  },
  {
    "text": "We have a single\nglider here, which is just going to be kicked back\nand forth, just hanging out.",
    "start": "1082550",
    "end": "1091060"
  },
  {
    "text": "And on the other hand, we\nhave these guns-- G1, G2, G3. So this is going to\nreplace a single gun.",
    "start": "1091060",
    "end": "1099419"
  },
  {
    "text": "So this is the notation for\nthe kickback minute mechanism.",
    "start": "1099420",
    "end": "1105190"
  },
  {
    "text": "So mostly these guys are\njust going to shoot off. But they're set up so that\nif this glider comes here,",
    "start": "1105190",
    "end": "1113000"
  },
  {
    "text": "he gets kicked back. And also we lose\none glider here, but they're going to\neat it all up anyway,",
    "start": "1113000",
    "end": "1118649"
  },
  {
    "text": "so it doesn't matter. And same thing over here. So this guy is mostly ones,\nbut every once in awhile",
    "start": "1118650",
    "end": "1126220"
  },
  {
    "text": "this glider will come\nin and get kickback, and consume one of the\ngliders down this G2 stream.",
    "start": "1126220",
    "end": "1131810"
  },
  {
    "text": "So there will be a\ncouple holes here. And then if you basically\nnegate that stream, so you send another\nglider down through here,",
    "start": "1131810",
    "end": "1138159"
  },
  {
    "text": "then only every once in\nawhile will you have a glider. And by controlling this width,\nyou can control the rate.",
    "start": "1138160",
    "end": "1144050"
  },
  {
    "text": "And I think in this\nproof, you just need all of them the same rate. Sufficiently large\nto allow crossovers.",
    "start": "1144050",
    "end": "1152080"
  },
  {
    "text": "OK. Cool. So that's thinning\nand crossover.",
    "start": "1152080",
    "end": "1157389"
  },
  {
    "text": "AUDIENCE: Quick question. PROFESSOR: Yeah. AUDIENCE: Are glider\ngun constructions that we know about, or\nas least know about it",
    "start": "1157389",
    "end": "1162412"
  },
  {
    "text": "at the time [INAUDIBLE]\nenough that you can't just set the rate of fire from\nthe gun construction use.",
    "start": "1162412",
    "end": "1168655"
  },
  {
    "text": "AUDIENCE: There's a gun for\nevery period either greater than or equal to 14. PROFESSOR: Oh, cool.",
    "start": "1168655",
    "end": "1174240"
  },
  {
    "text": "According to-- AUDIENCE: Wikipedia. PROFESSOR: Wikipedia. Must be true.",
    "start": "1174240",
    "end": "1179920"
  },
  {
    "text": "I'll make a weak claim\nto the extent to which I know glider guns, these\nare not like easily",
    "start": "1179920",
    "end": "1185147"
  },
  {
    "text": "variable constructions. They're kind of magical,\nand they just work. There are probably many\ndifferent glider guns,",
    "start": "1185147",
    "end": "1191555"
  },
  {
    "text": "each with a different rate. But I don't think there's\na general purpose glider gun with an arbitrary rate.",
    "start": "1191556",
    "end": "1197104"
  },
  {
    "text": "Now there might\nbe one by now that has a slow enough\nrate that we're OK.",
    "start": "1197104",
    "end": "1202870"
  },
  {
    "text": "But I don't know. So this certainly guarantees\nthat yeah, you could do it. It's a little bit messy, but\nmaybe there's a simpler one.",
    "start": "1202870",
    "end": "1210169"
  },
  {
    "text": "Life is still actively studied\nso there are many more guns and there were in\nthe early '80s so I",
    "start": "1210170",
    "end": "1218450"
  },
  {
    "text": "think I won't go through\nthis construction in detail, but using orders\nand some kickbacks",
    "start": "1218450",
    "end": "1224720"
  },
  {
    "text": "and some crazy\nideas with guns, you could build a split and a not. Is that OK?",
    "start": "1224720",
    "end": "1231740"
  },
  {
    "text": "In particular, we're using\nthis idea of rate limiting, so there's a lot of zeroes here. And this is, whatever,\n10 spots-- there's",
    "start": "1231740",
    "end": "1238630"
  },
  {
    "text": "only one every 10 spots. And there's two cases, depending\non whether A is there or not.",
    "start": "1238630",
    "end": "1246990"
  },
  {
    "text": "And by ORing it\ntogether with something, and then having all\nthese chain reactions, we end up with a copy of A\nhere, and a negated copy of A",
    "start": "1246990",
    "end": "1259230"
  },
  {
    "text": "hear with different offsets. Yeah. AUDIENCE: So for\nNOT, isn't there the super easy gadget\nof A equal gun,",
    "start": "1259230",
    "end": "1266088"
  },
  {
    "text": "and then-- sorry-- the gun\ngets through if A is not there. PROFESSOR: That's what we\nhad for the turn gadget,",
    "start": "1266088",
    "end": "1272690"
  },
  {
    "text": "but it always turns the signal. AUDIENCE: And that's bad? PROFESSOR: That's\nbad because it means if you think of your gadgets\nhaving inputs horizontally,",
    "start": "1272690",
    "end": "1280909"
  },
  {
    "text": "then you need to negate\nand still be horizontal. So this negates and\nstill is horizontal.",
    "start": "1280910",
    "end": "1285930"
  },
  {
    "text": "In their writeup, they actually\ncall the turn a NOT gadget. But I think that's not NOT.",
    "start": "1285930",
    "end": "1293408"
  },
  {
    "text": "It depends on your perspective. You definitely need a\ndirection-preserving NOT.",
    "start": "1293409",
    "end": "1300059"
  },
  {
    "text": "OK. So that's cool. And at this point, they say\njust give this to the engineers",
    "start": "1300060",
    "end": "1306650"
  },
  {
    "text": "and they'll build a computer. Once you have AND or NOT,\nyou can build binary logic,",
    "start": "1306650",
    "end": "1312220"
  },
  {
    "text": "so you can do\nCIRCUIT-SAT style things. And you could make\nre-entrant circuits.",
    "start": "1312220",
    "end": "1318539"
  },
  {
    "text": "And so you can compute\non stuff and build a Turing machine\nwith a finite size,",
    "start": "1318540",
    "end": "1324070"
  },
  {
    "text": "or any machine of finite\nsize, bounded size. So that's enough to\nprove PSPACE hardness.",
    "start": "1324070",
    "end": "1330410"
  },
  {
    "text": "But if you want to\nprove undecidability, you need some way to\ngrow up to infinity.",
    "start": "1330410",
    "end": "1335780"
  },
  {
    "text": "And their idea is to have a\nsmall number of registers. Two are enough.",
    "start": "1335780",
    "end": "1341260"
  },
  {
    "text": "This is called a Minsky machine,\nis the two-counter version.",
    "start": "1341260",
    "end": "1349490"
  },
  {
    "text": "And Minsky proved that you\ncan simulate a Turing machine",
    "start": "1349490",
    "end": "1354620"
  },
  {
    "text": "with two counters. What's a counter? It stores a\nnon-negative integer.",
    "start": "1354620",
    "end": "1359789"
  },
  {
    "text": "And you have three operations--\nincrement, decrement, and check whether it's 0.",
    "start": "1359790",
    "end": "1365160"
  },
  {
    "text": "So it's a little crazy. But that's enough to\nsimulate an entire Turing machine with infinite tape.",
    "start": "1365160",
    "end": "1373409"
  },
  {
    "text": "So the rough idea is to\nstore a bit onto the tape. You double it and\npossibly add one.",
    "start": "1373410",
    "end": "1380059"
  },
  {
    "text": "And if you want to remove\nsomething from the stack, then you divide by 2.",
    "start": "1380060",
    "end": "1386540"
  },
  {
    "text": "So with four\nregisters, you can use this one to represent\none stack, and this one to represent the other stack.",
    "start": "1386540",
    "end": "1392250"
  },
  {
    "text": "Dot, dot, dot. It's not too hard. So how are we going to represent\nan arbitrary non-negative",
    "start": "1392250",
    "end": "1399920"
  },
  {
    "text": "integer? We're going to have\na little 2 by 2 box-- this is drawn diagonally--\nsomewhere along this ray.",
    "start": "1399920",
    "end": "1407810"
  },
  {
    "text": "And then we're going to be\nable to increment or decrement the box by sending\na wave of gliders",
    "start": "1407810",
    "end": "1414770"
  },
  {
    "text": "using these constructions. Sorry, next slide we'll have the\nconstructions for incrementing.",
    "start": "1414770",
    "end": "1423169"
  },
  {
    "text": "Here actually is a\nglider that's going to test whether this\nguy's currently zero. And he happens to be.",
    "start": "1423170",
    "end": "1430200"
  },
  {
    "text": "And so here's how you test. I mean, you just send a\nglider through the box.",
    "start": "1430200",
    "end": "1435580"
  },
  {
    "text": "And there may be a cleaner test. This one is a destructive test. It destroys the box.",
    "start": "1435580",
    "end": "1441350"
  },
  {
    "text": "But in particular, it\ndestroys the glider. So then you can have a gate\non this side that says, well,",
    "start": "1441350",
    "end": "1446680"
  },
  {
    "text": "if I didn't get a glider, then\nI know that I'm actually 0, and I can feed that back\nto my logic circuit.",
    "start": "1446680",
    "end": "1452740"
  },
  {
    "text": "If I do get a glider, then\nI know this was empty. So that's pretty easy. The only catch is then\nyou've destroyed the box.",
    "start": "1452740",
    "end": "1458770"
  },
  {
    "text": "You have to create a new box. And you can do that by sending\ntwo gliders with a slightly different offset.",
    "start": "1458770",
    "end": "1464340"
  },
  {
    "text": "This looks like this same as\nall the others, but in this one you end up with\na box at the end. So if you send like\nanother one here",
    "start": "1464340",
    "end": "1470820"
  },
  {
    "text": "and another one timed\njust right here, you'll recreate the\nbox after you've discovered that it was there.",
    "start": "1470820",
    "end": "1477110"
  },
  {
    "text": "So that's cool. And then this is a swarm. I think it's actually drawn\nsomewhat accurately to push",
    "start": "1477110",
    "end": "1483500"
  },
  {
    "text": "this block forward by 1. I think it's this stream.",
    "start": "1483500",
    "end": "1489140"
  },
  {
    "text": "So there are two\nconstructions here. One is a wave of gliders that\npulls it a block back by 3,",
    "start": "1489140",
    "end": "1496870"
  },
  {
    "text": "another one pushes\nit forward by 1. Together you could use this to\nincrement or decrement by 1.",
    "start": "1496870",
    "end": "1502770"
  },
  {
    "text": "So I mean, lots of\ndetails to check here. This one is a\nlittle bit cleaner.",
    "start": "1502770",
    "end": "1509110"
  },
  {
    "text": "We have one glider here,\na second glide here. And it ends up moving. It goes in this\norder and then back.",
    "start": "1509110",
    "end": "1515760"
  },
  {
    "text": "And we end up moving the box\nup to here, back three spaces. I assume these are found\nby trial and error.",
    "start": "1515760",
    "end": "1523910"
  },
  {
    "text": "And then to push a block\nforward 1, this is pretty crazy. Their second wave\nof five gliders.",
    "start": "1523910",
    "end": "1534370"
  },
  {
    "text": "Where's the first wave? AUDIENCE: Turning the\nblock into a honey farm. PROFESSOR: That's right.",
    "start": "1534370",
    "end": "1540050"
  },
  {
    "text": "Turning the block\ninto a honey farm, which is this particular\nstill life pattern. Anyway.",
    "start": "1540050",
    "end": "1546080"
  },
  {
    "text": "Dot, dot, dot. You check the results. It works. It's actually a lot\nof fun to implement these in a life simulator\nand check that it works.",
    "start": "1546080",
    "end": "1552470"
  },
  {
    "text": "But for now I'm showing\nyou the ancient diagrams, hand-drawn diagrams.",
    "start": "1552470",
    "end": "1559240"
  },
  {
    "text": "OK. So there's like a\ncatch with this.",
    "start": "1559240",
    "end": "1564780"
  },
  {
    "text": "In order to generate these\ngliders in this very specific",
    "start": "1564780",
    "end": "1570720"
  },
  {
    "text": "pattern, currently the only\nway we have of making gliders",
    "start": "1570720",
    "end": "1576190"
  },
  {
    "text": "is with the glider gun. Glider guns are large objects. And you can't put them\nright next to each other.",
    "start": "1576190",
    "end": "1582740"
  },
  {
    "text": "And even worse, if\nyou have a glider gun, it's spitting out gliders\nin the middle of it. You can't put a glider gun\nshifted over a little bit",
    "start": "1582740",
    "end": "1590289"
  },
  {
    "text": "even if you slide it\nthis way or that way. If you want to\nproduce two streams very close to each\nother, one of them",
    "start": "1590290",
    "end": "1596031"
  },
  {
    "text": "will go through the other glider\ngun and destroy the glider gun. So you can't actually\nbuild this kind of pattern",
    "start": "1596031",
    "end": "1602720"
  },
  {
    "text": "with glider guns ultimately. But there's this\ntrick using kickbacks to get a glider to go out\nfar away from any guns.",
    "start": "1602720",
    "end": "1612660"
  },
  {
    "text": "And this is to-- so\nhere's your original gun. And this one has\nsome holes in it.",
    "start": "1612660",
    "end": "1618360"
  },
  {
    "text": "So you can get a\nglider through here. And then get this glider to\nbounce back and forth until you",
    "start": "1618360",
    "end": "1623750"
  },
  {
    "text": "have the right timing. Then this glider will escape\nthrough this little gap.",
    "start": "1623750",
    "end": "1631549"
  },
  {
    "text": "And then the result is, you\nsend the glider basically offset to the right from this gun.",
    "start": "1631550",
    "end": "1637340"
  },
  {
    "text": "So using that, you can\nhave a bunch of glider guns sort of around\nwhere you need it. Get all the gliders to come up.",
    "start": "1637340",
    "end": "1643450"
  },
  {
    "text": "And now you're very narrow. You could have two gliders\nright next to each other without any trouble.",
    "start": "1643450",
    "end": "1648559"
  },
  {
    "text": "So you do a bunch of\nthese constructions at various heights. So this is the picture of\ntwo glider guns, one shooting",
    "start": "1648560",
    "end": "1655090"
  },
  {
    "text": "a glider through the other. That's bad. So instead, we'll put\nthese away from it,",
    "start": "1655090",
    "end": "1660710"
  },
  {
    "text": "and send the gliders offset\nto be like that, using two of these constructions.",
    "start": "1660710",
    "end": "1666800"
  },
  {
    "text": "OK. So now we can increment and\ndecrement, and test for 0. With this similar trick\nwe can do some fun stuff",
    "start": "1666800",
    "end": "1677880"
  },
  {
    "text": "in sending gliders\nforward and backward. So this is cool.",
    "start": "1677880",
    "end": "1684050"
  },
  {
    "text": "Remember I said that\nyou could send a glider and cause it to come\nback using the kickback.",
    "start": "1684050",
    "end": "1689400"
  },
  {
    "text": "So normally if you\nwant to send the glider and have it come back,\nyou need another glider to be shot this way.",
    "start": "1689400",
    "end": "1696340"
  },
  {
    "text": "So that's OK in some cases. But here's a cool construction\nwhere all the gliders are way down here, and still I\ncan make the glider go up",
    "start": "1696340",
    "end": "1703620"
  },
  {
    "text": "and then come back\nat some desired time. And it's the same kind of idea. You use this construction\nto make this glider go back",
    "start": "1703620",
    "end": "1709638"
  },
  {
    "text": "and forth, spend lots of time. And then eventually hit this guy\nat just the right orientation to send it back.",
    "start": "1709638",
    "end": "1715490"
  },
  {
    "text": "And if you have\nsome more stuff, you could actually get it to go\nback and forth many times and come over\nfarther to the right.",
    "start": "1715490",
    "end": "1722730"
  },
  {
    "text": "Why do I care about this? For self-destruction. So the idea is if the Turing\nmachine says yes, if it stops,",
    "start": "1722730",
    "end": "1732840"
  },
  {
    "text": "then you want the entire\nthing to collapse to nothing. And so when you get\nto this magical state,",
    "start": "1732840",
    "end": "1739076"
  },
  {
    "text": "you're going to send out\na whole bunch of gliders, and then turn them around using\nthe mechanism I just showed-- the boomerang--\nand get them to hit",
    "start": "1739077",
    "end": "1745600"
  },
  {
    "text": "every gadget in the construction\nat exactly the right offset to make them disappear.",
    "start": "1745600",
    "end": "1751480"
  },
  {
    "text": "This is how you kill an eater\nfrom going from slightly wrong orientation. This is how you destroy a gun.",
    "start": "1751480",
    "end": "1758230"
  },
  {
    "text": "It ends up with nothing.  Oh.",
    "start": "1758230",
    "end": "1763500"
  },
  {
    "text": "Sorry. This is a gun. This is a how you\ndestroy a square. We already saw that. So all of that infrastructure\nbeing able to precisely place",
    "start": "1763500",
    "end": "1771557"
  },
  {
    "text": "gliders exactly where you need\nthem, lots of details to check. But you should be able\nto get them all come out",
    "start": "1771557",
    "end": "1777610"
  },
  {
    "text": "and come back. And you always hit them in\nthe backside of the guns.",
    "start": "1777610",
    "end": "1783500"
  },
  {
    "text": "I think first you kill\nall the guns so they stop generating gliders. You let the gliders\nget eaten by eaters.",
    "start": "1783500",
    "end": "1788810"
  },
  {
    "text": "And then you go out and destroy\nall the eaters and squares and so on. So, pretty epic.",
    "start": "1788810",
    "end": "1795284"
  },
  {
    "text": "But in the end we\nget undecidability of life in an infinite board.",
    "start": "1795285",
    "end": "1802980"
  },
  {
    "text": "So zero-player is\nmore interesting than you might expect.",
    "start": "1802980",
    "end": "1808887"
  },
  {
    "text": "This is certainly\none of the more epic proofs in that direction. Next thing I want\nto tell you about is zero-player constraint logic.",
    "start": "1808887",
    "end": "1816610"
  },
  {
    "text": "This is called deterministic\nconstraint logic, as opposed to nondeterministic\nconstraint logic, which we talked about last time.",
    "start": "1816610",
    "end": "1823480"
  },
  {
    "text": "So let me define it for you. ",
    "start": "1823480",
    "end": "1838070"
  },
  {
    "text": "So in deterministic\nconstraint logic we have a little bit more state.",
    "start": "1838070",
    "end": "1845390"
  },
  {
    "text": "Before it's just in\nthe state of a machine is just the orientations\nof all the edges.",
    "start": "1845390",
    "end": "1851680"
  },
  {
    "text": "Now we're also\ngoing to have-- it's a little hard to see\non this projector-- but there's some highlighted\nedges which are active.",
    "start": "1851680",
    "end": "1860809"
  },
  {
    "text": "So I'll describe what\nthey are in a moment. So even if you can't see\nthem, they are there.",
    "start": "1860809",
    "end": "1866309"
  },
  {
    "text": "Active literally means that\nyou just flipped the edge",
    "start": "1866310",
    "end": "1872410"
  },
  {
    "text": "in the previous step. So deterministic\nconstraint logic, we're going to be flipping\nmultiple edges at once",
    "start": "1872410",
    "end": "1878429"
  },
  {
    "text": "in one round. And in the next round, those\nedges are all called active. And the rest are inactive.",
    "start": "1878430",
    "end": "1886550"
  },
  {
    "text": "Now that's for edges. We're going to define a\nvertex to be active basically",
    "start": "1886550",
    "end": "1893470"
  },
  {
    "text": "if that reversal did\nsomething useful. So if its active incoming\nedges have total weight greater",
    "start": "1893470",
    "end": "1913549"
  },
  {
    "text": "or equal to 2. So if the just flipped edges\nsatisfy that vertex possibly",
    "start": "1913550",
    "end": "1920690"
  },
  {
    "text": "in a new way, then we\ncall the vertex active. It's been activated by\nwhat just got flipped.",
    "start": "1920690",
    "end": "1927240"
  },
  {
    "text": "And then here's what we're\ngoing to do in each round. ",
    "start": "1927240",
    "end": "1937180"
  },
  {
    "text": "We are going to reverse\ninactive edges pointing",
    "start": "1937180",
    "end": "1944820"
  },
  {
    "text": "to active vertices. ",
    "start": "1944820",
    "end": "1957590"
  },
  {
    "text": "And we're going to reverse\nactive edges pointing",
    "start": "1957590",
    "end": "1966386"
  },
  {
    "text": "to inactive vertices. ",
    "start": "1966386",
    "end": "1980760"
  },
  {
    "text": "And then these reversed edges\nare the new active edges. ",
    "start": "1980760",
    "end": "1994639"
  },
  {
    "text": "OK. So let's look at an example. So here's a little gadget.",
    "start": "1994640",
    "end": "2000950"
  },
  {
    "text": "We're actually going\nto use this gadget in proving PSPACE\ncompleteness of this model.",
    "start": "2000950",
    "end": "2006039"
  },
  {
    "text": "And initially just\nthis edge is active.",
    "start": "2006040",
    "end": "2011130"
  },
  {
    "text": "And if that's all that happens--\nnow there's some inputs and outputs here-- if\nthat's all that happens,",
    "start": "2011130",
    "end": "2018510"
  },
  {
    "text": "this edge is active. It alone does not\nsatisfy this vertex. So this vertex is inactive.",
    "start": "2018510",
    "end": "2024890"
  },
  {
    "text": "And in the inactive case,\nif the vertex is inactive, we're supposed to\nreverse the active edge.",
    "start": "2024890",
    "end": "2030700"
  },
  {
    "text": "This is basically bouncing back. If you try to\nsatisfy a vertex, you didn't satisfy it, you\njust undo what you did.",
    "start": "2030700",
    "end": "2036820"
  },
  {
    "text": "You're going to\nreverse the edge. So what's going to\nhappen here is this guy",
    "start": "2036820",
    "end": "2042320"
  },
  {
    "text": "will just flip back and forth. First he's gonna go this way. Says, oh, I didn't\nsatisfy this one. So I'll reverse this edge.",
    "start": "2042320",
    "end": "2047720"
  },
  {
    "text": "Now it points into here. Still doesn't\nsatisfy that vertex. It's inactive. So this guy will just\nflip back and forth",
    "start": "2047720",
    "end": "2053580"
  },
  {
    "text": "forever until here we're\ndrawing the picture where",
    "start": "2053580",
    "end": "2058800"
  },
  {
    "text": "A reverses, so because\nof some gadget below it. Suppose A reverses at the same\ntime this one is reversing.",
    "start": "2058800",
    "end": "2066419"
  },
  {
    "text": "So now this edge is active. And this edge is active. Still this guy didn't\nsatisfy what he wants.",
    "start": "2066420",
    "end": "2071888"
  },
  {
    "text": "So he's going to reverse\nagain in the next step. But this guy did satisfy the\nvertex because he has weight 2.",
    "start": "2071889",
    "end": "2078000"
  },
  {
    "text": "So now it alone\nsatisfies this vertex. So now both of these\nare going to reverse.",
    "start": "2078000",
    "end": "2084219"
  },
  {
    "text": "This is the forward case. We have a active edge\nsatisfying-- so now",
    "start": "2084219",
    "end": "2089370"
  },
  {
    "text": "this vertex is active. We're going to reverse\nthese inactive edges which",
    "start": "2089370",
    "end": "2095919"
  },
  {
    "text": "point to the active vertex. So we end up flipping those. Now they're pointing\nout of the vertex. This one remains pointing in.",
    "start": "2095920",
    "end": "2101700"
  },
  {
    "text": "It's no longer active, because\nwe didn't just flip it. So we propagate from this\nbeing active to these two being",
    "start": "2101700",
    "end": "2106870"
  },
  {
    "text": "active. This is a splitter. We have the signal and we\nsplit it into two parts.",
    "start": "2106870",
    "end": "2112290"
  },
  {
    "text": "So it's acting like the\nsplitter that we know and love from last lecture. OK. Meanwhile, this guy\njust reversed again.",
    "start": "2112290",
    "end": "2120290"
  },
  {
    "text": "But now these two are\nsimultaneously here. So together, those two active\nedges satisfy the vertex.",
    "start": "2120290",
    "end": "2127090"
  },
  {
    "text": "So this vertex is active, which\nwill flip that edge up there. ",
    "start": "2127090",
    "end": "2133040"
  },
  {
    "text": "Yes. I should say this vertex\nis a little bit weird.",
    "start": "2133040",
    "end": "2138370"
  },
  {
    "text": "You could think of there being\na red to blue conversion here. This guy only has a\ndesired weight of 1.",
    "start": "2138370",
    "end": "2145460"
  },
  {
    "text": "This is basically a\nred edge, but it's subdivided to fix the timing. So we'll see how to get\nrid of that subdivision.",
    "start": "2145460",
    "end": "2152359"
  },
  {
    "text": "But you can think of\nthis as a red to blue. And there's two blue edges here. But this one edge will\nactually satisfy this vertex.",
    "start": "2152360",
    "end": "2160260"
  },
  {
    "text": "And so then this guy\nflips in the next stage. And then it's just\ngoing to hang out here,",
    "start": "2160260",
    "end": "2166980"
  },
  {
    "text": "flipping back and\nforth along this path. And meanwhile, this will\ngo off and do something",
    "start": "2166980",
    "end": "2173609"
  },
  {
    "text": "until it comes back\nand reverses the edge.",
    "start": "2173610",
    "end": "2178700"
  },
  {
    "text": "And I should say at this\npoint-- because there are a lot of timing\nissues here, we're",
    "start": "2178700",
    "end": "2183828"
  },
  {
    "text": "going to set up all the\ngadgets so that they only get an input edge reversed\nat times divisible by 4.",
    "start": "2183829",
    "end": "2191840"
  },
  {
    "text": "So this one happened at time 0. And then this one we know will\nhappen at a certain parity",
    "start": "2191840",
    "end": "2197800"
  },
  {
    "text": "relative to 4. And so we know when this\nguy has gotten flipped, this one will also\nhave just been flipped.",
    "start": "2197800",
    "end": "2204620"
  },
  {
    "text": "And then stuff happens. And then this edge ends\nup getting reversed.",
    "start": "2204620",
    "end": "2209695"
  },
  {
    "text": " And then more stuff happens. Then this edge gets\nreversed again.",
    "start": "2209695",
    "end": "2216670"
  },
  {
    "text": "And then the A gets\nreversed again. So this gadget has\nsort of three cycles.",
    "start": "2216670",
    "end": "2221829"
  },
  {
    "text": "When you reverse A, first B will\nreverse, then C will reverse, then B will reverse,\nthen A will reverse.",
    "start": "2221830",
    "end": "2230486"
  },
  {
    "text": "It's a little bit overkill. But we're going to use\nthis to check two options. We're just going to\ncheck one of them twice because that's\nwhat we can build easily.",
    "start": "2230486",
    "end": "2239289"
  },
  {
    "text": "OK. So now we want to prove PSPACE\ncompleteness of this model.",
    "start": "2239290",
    "end": "2244950"
  },
  {
    "text": "The decision question is again,\ndoes a particular edge ever get reversed?",
    "start": "2244950",
    "end": "2250920"
  },
  {
    "text": "And so we're going to reduce in\nthe usual way from quantified",
    "start": "2250920",
    "end": "2256599"
  },
  {
    "text": "CNF-SAT. We have our blocks which\nrepresent quantifiers.",
    "start": "2256600",
    "end": "2261670"
  },
  {
    "text": "They're going to produce\nvariable settings. We're going to have\nsome CNF logic. And then in the end, this is\nactually not quite accurate.",
    "start": "2261670",
    "end": "2267790"
  },
  {
    "text": "We're going to get some\nsatisfied signal which is piped into these guys.",
    "start": "2267790",
    "end": "2273120"
  },
  {
    "text": "So the first thing\nthat has to change are the quantifier gadgets. In particular, the\nexistential quantifier",
    "start": "2273120",
    "end": "2278890"
  },
  {
    "text": "needs to change because before\nwe let the player decide",
    "start": "2278890",
    "end": "2285630"
  },
  {
    "text": "whether to choose x or x bar. So in this case, we're going\nto use the gadget you just saw,",
    "start": "2285630",
    "end": "2291860"
  },
  {
    "text": "the little wheel, which\nwill try x being false. Then it will try x being true,\nthen it will try x being false.",
    "start": "2291860",
    "end": "2300437"
  },
  {
    "text": "And all we need is that\none of them is true. So if at any point this\nformula is satisfied, we'll just output that\nformula satisfied.",
    "start": "2300437",
    "end": "2306820"
  },
  {
    "text": "We have four edges here\nbecause everything needs to work modular 4 in timing.",
    "start": "2306820",
    "end": "2312500"
  },
  {
    "text": "So there's a little bit\nmore going on here, which I will get into in a moment.",
    "start": "2312500",
    "end": "2317859"
  },
  {
    "text": "On the other hand, universal\nquantifier is similar. I think I will leave it at that.",
    "start": "2317860",
    "end": "2323210"
  },
  {
    "text": "There's this generator\nto try all the options. This is going to act in\nsome sense like the one",
    "start": "2323210",
    "end": "2328859"
  },
  {
    "text": "bit of memory, the latch,\nthat we had before. So it's similar. But I think the details\nare not worth getting into.",
    "start": "2328860",
    "end": "2335029"
  },
  {
    "text": "If you look at the appendix of\nGames, Puzzles, Computation, you'll see an explicit\nexecution of this thing. I mean, it's like life.",
    "start": "2335030",
    "end": "2340769"
  },
  {
    "text": "You just run it through\nand see if it works. And it does. So what's going on\nup here is that when",
    "start": "2340770",
    "end": "2350100"
  },
  {
    "text": "we set x bar to be false,\nwe're going to flip this edge. And we're basically telling\nthe circuit, hey, x is false.",
    "start": "2350100",
    "end": "2359816"
  },
  {
    "text": "And then at some\npoint it's going to acknowledge and say, OK. I understand that x is false.",
    "start": "2359816",
    "end": "2365470"
  },
  {
    "text": " But that's going to be\non a different channel.",
    "start": "2365470",
    "end": "2370710"
  },
  {
    "text": "So let me illustrate the issue. So this is how we\nused to do CNF logic.",
    "start": "2370710",
    "end": "2378050"
  },
  {
    "text": "We did ANDs of ORs using OR\nvertices and AND vertices.",
    "start": "2378050",
    "end": "2386370"
  },
  {
    "text": "And that was cool if we had\na signal for what was true and what was false,\nwe could throw away signals we didn't need.",
    "start": "2386370",
    "end": "2393480"
  },
  {
    "text": "Then this would propagate\nand produce a true answer. Nondeterministically it would.",
    "start": "2393480",
    "end": "2398880"
  },
  {
    "text": "But deterministically there's\na lot of timing issues here. Everything has to arrive\nat the inputs at exactly",
    "start": "2398880",
    "end": "2404527"
  },
  {
    "text": "the same time. And AND will only work if\nthis edge and this edge simultaneously reverse.",
    "start": "2404527",
    "end": "2410609"
  },
  {
    "text": "So OK. Maybe you could subdivide enough\nedges to fix the timing issue. But it's worse than that.",
    "start": "2410610",
    "end": "2415870"
  },
  {
    "text": "If you're doing an\nAND of two things, and you discover that\nthe answer is false,",
    "start": "2415870",
    "end": "2422180"
  },
  {
    "text": "then all bets are off. So normally that would be\nOK, because we can always undo what we did.",
    "start": "2422180",
    "end": "2427980"
  },
  {
    "text": "But we need to guarantee that\nthe deterministic constraint machine will exactly undo\nwhat it was supposed to do.",
    "start": "2427980",
    "end": "2435280"
  },
  {
    "text": "So it's an issue that if\none of these comes in true and the other's false,\nthis one will bounce back and then chaos will happen.",
    "start": "2435280",
    "end": "2441630"
  },
  {
    "text": "We'll end up getting\nedges just randomly reversing it at annoying times.",
    "start": "2441630",
    "end": "2446710"
  },
  {
    "text": "So that seems messy. And so instead we build\nthis much safer version",
    "start": "2446710",
    "end": "2452740"
  },
  {
    "text": "called AND prime, OR prime,\nand split prime, I guess. There should be a prime\nthere where each input",
    "start": "2452740",
    "end": "2462760"
  },
  {
    "text": "is represented by two things. First the signal, and\nthen the acknowledgement.",
    "start": "2462760",
    "end": "2467870"
  },
  {
    "text": "And so there's some\ndetails to check here. The OR is particularly messy.",
    "start": "2467870",
    "end": "2473030"
  },
  {
    "text": "But these are just deterministic\nconstraint logic machines. You see this gadget yet\nagain to try various things.",
    "start": "2473030",
    "end": "2482000"
  },
  {
    "text": "But in this case, if\ninput 1 comes at sometime before input 2, then it will\nessentially-- so this comes up.",
    "start": "2482000",
    "end": "2493000"
  },
  {
    "text": "The signal gets split out here. And so we send off\nthe acknowledgement. And then this edge\nwill, I think,",
    "start": "2493000",
    "end": "2499330"
  },
  {
    "text": "just be flipping back and forth. So it's basically holding\nthe input for awhile.",
    "start": "2499330",
    "end": "2505050"
  },
  {
    "text": "And later, the second\ninput could come in. And it will trigger\nthis to happen, and also trigger the output, and also\ntrigger the acknowledgement,",
    "start": "2505050",
    "end": "2511925"
  },
  {
    "text": "cause it does all the things. So that is roughly\nhow that works.",
    "start": "2511925",
    "end": "2519369"
  },
  {
    "text": "So I think the details are not\nworth spending more time on. This is the final thing after\nyou have all the CNF logic come",
    "start": "2519370",
    "end": "2527570"
  },
  {
    "text": "out, then this is how\nyou end up sending it to satisfy out to the\nquantifiers, which are here.",
    "start": "2527570",
    "end": "2539510"
  },
  {
    "text": "So it's a bit messy. But the main point\nis that this works. And so hopefully we can use\ndeterministic constraint logic",
    "start": "2539510",
    "end": "2547010"
  },
  {
    "text": "to prove lots of interesting\nzero-player games are hard. We don't know very many\ninteresting zero-player games. So please help in finding them.",
    "start": "2547010",
    "end": "2554859"
  },
  {
    "text": "There's one detail I'd\nlike to get rid of though. These degree 2 vertices, it\nwould be nicer to avoid those.",
    "start": "2554860",
    "end": "2561990"
  },
  {
    "text": "So this is a bunch of reductions\nto get rid of degree 2 vertices",
    "start": "2561990",
    "end": "2567100"
  },
  {
    "text": "and keep things mod 4. So we're going to\ntake every edge",
    "start": "2567100",
    "end": "2572150"
  },
  {
    "text": "and subdivide it into\na path of length 4, because then if we have two\nred edges in the original graph",
    "start": "2572150",
    "end": "2581040"
  },
  {
    "text": "together, instead of replacing\nit by two red paths of length 4, we're going to\nreplace it by two paths",
    "start": "2581040",
    "end": "2588600"
  },
  {
    "text": "here, with the first\nand last edge being red, but everything else being blue.",
    "start": "2588600",
    "end": "2593740"
  },
  {
    "text": "The motivation\nfor that is now we just have blue, blue\nedges and red, blue edges.",
    "start": "2593740",
    "end": "2601440"
  },
  {
    "text": "No red, reds. To get a blue, blue, we just\nadd on a thing like this that's forced to be out.",
    "start": "2601440",
    "end": "2607700"
  },
  {
    "text": "And this will be satisfied if\nand only if one of these is in. So we've done that\nkind of trick before.",
    "start": "2607700",
    "end": "2613060"
  },
  {
    "text": "And red, blue edges, we've\nexplicitly done before. So we know how to\ndeal with those. And so we do all the\nsubdivision in order",
    "start": "2613060",
    "end": "2618850"
  },
  {
    "text": "to get rid of the red, reds. Also where these guys have\na smaller weight constraint, just one of them has to be in.",
    "start": "2618850",
    "end": "2625680"
  },
  {
    "text": "So now we have no\ndegree 2 vertices.",
    "start": "2625680",
    "end": "2630950"
  },
  {
    "text": "The other thing is, we\nhave a non-planar graph. It would be nice to get\nrid of the crossings. AUDIENCE: Don't you still\nhave a timing issue?",
    "start": "2630950",
    "end": "2637755"
  },
  {
    "text": " PROFESSOR: This should preserve\nthe fact that everything happens at time 0 mod 4.",
    "start": "2637755",
    "end": "2645750"
  },
  {
    "text": "So we'll slow everything\ndown by a factor of 4. But it shouldn't\nbe a timing issue. And because these\nthings are rigid,",
    "start": "2645750",
    "end": "2653220"
  },
  {
    "text": "they don't have any timing. OK. So next we get rid of crossings.",
    "start": "2653220",
    "end": "2659859"
  },
  {
    "text": "This actually is a\nlittle easier for once. This was how we implemented\na red, red, red, red vertex",
    "start": "2659860",
    "end": "2666579"
  },
  {
    "text": "in the crossover gadget for NCL. But here it's actually\nenough as a crossover,",
    "start": "2666580",
    "end": "2671870"
  },
  {
    "text": "because we have the luxury\nof timing in some sense. There are a lot of\nthings that could've",
    "start": "2671870",
    "end": "2678390"
  },
  {
    "text": "happened undeterministically\nthat just can't happen deterministically. So does it work? Here I pasted in the figure.",
    "start": "2678390",
    "end": "2686420"
  },
  {
    "text": "You run it through and you check\nthat it works in both cases. If they don't activate at\nthe same time, then it works.",
    "start": "2686420",
    "end": "2691460"
  },
  {
    "text": "Activated at the same time, I\ndon't know what would happen. But we can offset all the timing\nso there are no collisions.",
    "start": "2691460",
    "end": "2697940"
  },
  {
    "text": "And boom, we get crossovers. So the conclusion is\ndeterministic constraint logic",
    "start": "2697940",
    "end": "2712849"
  },
  {
    "text": "is PSPACE complete for\na planar and OR graphs.",
    "start": "2712850",
    "end": "2731330"
  },
  {
    "text": "I think I actually\nwant to also say split. So normally we think of AND\nand OR as the same thing.",
    "start": "2731330",
    "end": "2739019"
  },
  {
    "text": "But it is helpful to\ndistinguish them based",
    "start": "2739020",
    "end": "2747350"
  },
  {
    "text": "on their initial orientations.  An AND would\nprobably be this way.",
    "start": "2747350",
    "end": "2756715"
  },
  {
    "text": "Because you want\nto activate this, and you can only do that if both\nof these have been activated. And so this is the output.",
    "start": "2756715",
    "end": "2764380"
  },
  {
    "text": "For a split, this is the input. So it's initially not active. And then it wold look\nsomething like that.",
    "start": "2764380",
    "end": "2770070"
  },
  {
    "text": "So if you want to\ndistinguish between these two vertex-- sorry. This should be the other way.",
    "start": "2770070",
    "end": "2776770"
  },
  {
    "text": "If you want to distinguish what\nthe initial orientations are, then you also need\nto list split here.",
    "start": "2776770",
    "end": "2782450"
  },
  {
    "text": "So up to you whether you\nfeel like doing that. ",
    "start": "2782450",
    "end": "2788458"
  },
  {
    "text": "OK. That's all I want to say\nabout zero-player games. Any questions? AUDIENCE: What should\nhappen in the end?",
    "start": "2788458",
    "end": "2794978"
  },
  {
    "text": "Everything is-- PROFESSOR: In the end, if you\nsatisfy the whole formula then you will get here,\nthis edge will reverse.",
    "start": "2794978",
    "end": "2805310"
  },
  {
    "text": "And so the decision question\nis, does this edge reverse? Either it will or it won't.",
    "start": "2805310",
    "end": "2810579"
  },
  {
    "text": "In both cases, I think\nthe behavior's periodic. Because it's a funny thing.",
    "start": "2810580",
    "end": "2816160"
  },
  {
    "text": "Yeah. AUDIENCE: So there were\ntwo decision problems for nondeterministic\nconstraint logic. One of them was can you\nreach this configuration.",
    "start": "2816160",
    "end": "2824490"
  },
  {
    "text": "Another one was can\nyou fit this edge? Do you know anything about-- PROFESSOR: Yes. ",
    "start": "2824490",
    "end": "2831620"
  },
  {
    "text": "OK. If you want to\nsolve configuration to configuration for DCL,\nI think you can basically",
    "start": "2831620",
    "end": "2839120"
  },
  {
    "text": "add some red edges here. So if this thing\nactivates-- well,",
    "start": "2839120",
    "end": "2844200"
  },
  {
    "text": "you need to do a little bit\nmore of a construction here. But I want to\nbasically get an edge to start flipping over here.",
    "start": "2844200",
    "end": "2850260"
  },
  {
    "text": "Whereas before it\nwas not flipping. I think you can get\nan edge flipping, and then everything inverts. And then you will be in\nthe original configuration,",
    "start": "2850260",
    "end": "2857130"
  },
  {
    "text": "except this guy\nwill be flipping. If you set your parity\nright, then he'll be flipped in a state\nwhere everything else is",
    "start": "2857130",
    "end": "2862800"
  },
  {
    "text": "in its original state. So, pretty sure. I forget whether\nthat's in the book. But I think configuration to\nconfiguration, also PSPACE",
    "start": "2862800",
    "end": "2870540"
  },
  {
    "text": "complete for DCL. Good. ",
    "start": "2870540",
    "end": "2877420"
  },
  {
    "text": "So let's move on to\nmultiplayer games.",
    "start": "2877420",
    "end": "2882559"
  },
  {
    "text": "First I'd like to reduce\nto the two-player case.",
    "start": "2882560",
    "end": "2890440"
  },
  {
    "text": " So there's a big difference\nbetween one and two players.",
    "start": "2890440",
    "end": "2896032"
  },
  {
    "text": "But there's not so\nbig a difference between two and three and\nfour and five and six players. At least the usual\ndecision problem",
    "start": "2896032",
    "end": "2902760"
  },
  {
    "text": "is, does the first player\nhave a winning strategy.",
    "start": "2902760",
    "end": "2908185"
  },
  {
    "text": " Can the first player\nwin, basically.",
    "start": "2908185",
    "end": "2916580"
  },
  {
    "text": "Sometimes this is\ncalled a forced win. If a player forces a win.",
    "start": "2916580",
    "end": "2922940"
  },
  {
    "text": "If you think of it this way,\nand all the other players are free agents,\nthen the worst case is when they all collude\nto try to make you not win.",
    "start": "2922940",
    "end": "2930470"
  },
  {
    "text": "So that would be the\nopposite of a forced win. If it's not possible\nfor you to force a win,",
    "start": "2930470",
    "end": "2935920"
  },
  {
    "text": "that means the players can\nsomehow work together in order to prevent you from winning. So in that sense, they are\nall essentially one player.",
    "start": "2935920",
    "end": "2941960"
  },
  {
    "text": "You can thinking of\nthem as one hive mind. Now in the mechanics\nof the game, of course there are differences between\ntwo players and three players,",
    "start": "2941960",
    "end": "2949500"
  },
  {
    "text": "because they have more\npower in some sense. They can do three things for\nevery time you do one thing.",
    "start": "2949500",
    "end": "2955329"
  },
  {
    "text": "But at some level that is\njust a two-player game again, where you are\nrelatively impoverished",
    "start": "2955330",
    "end": "2960690"
  },
  {
    "text": "compared to your opponent. So the asymmetric,\nbut still two-player game from a\ncomplexity standpoint.",
    "start": "2960690",
    "end": "2967099"
  },
  {
    "text": "So we just need to think\nabout two-player games and their complexity. Later we'll add some variations\nthat make this not true.",
    "start": "2967100",
    "end": "2973720"
  },
  {
    "text": "But in a perfect information\ndeterministic game, this is true, this\nreduction is true.",
    "start": "2973720",
    "end": "2981920"
  },
  {
    "text": "So for a two\nplayers, we're going to have-- at least\nfor the duration of this lecture--\nthe two players will",
    "start": "2981920",
    "end": "2988220"
  },
  {
    "text": "be called white and black. In Winning Ways for example,\nthey're called red and blue.",
    "start": "2988220",
    "end": "2994109"
  },
  {
    "text": "But this is problematic\nbecause we have red and blue edges already. And I want red, white edges and\nblue, black edges and so on.",
    "start": "2994110",
    "end": "3003680"
  },
  {
    "text": "So the players will be white and\nblack as in chess, checkers-- not checkers.",
    "start": "3003680",
    "end": "3008760"
  },
  {
    "text": "Go, whatever. But color renaming. OK.",
    "start": "3008760",
    "end": "3015810"
  },
  {
    "text": "And I'm going to\nfocus today on games that have a polynomial number\nof moves in any execution, which",
    "start": "3015810",
    "end": "3029630"
  },
  {
    "text": "places the problem into PSPACE. So again, we're going to\naim for PSPACE completeness.",
    "start": "3029630",
    "end": "3037420"
  },
  {
    "text": "It's PSPACE because you\ncan think of this question as being equivalent to, do I\nhave a move such that no matter",
    "start": "3037420",
    "end": "3045260"
  },
  {
    "text": "how the opponent\nresponds to that move-- so every move for\nthe opponent, which",
    "start": "3045260",
    "end": "3050340"
  },
  {
    "text": "I will call response--\nI have another move such that no matter what\nthe opponent does dot,",
    "start": "3050340",
    "end": "3060500"
  },
  {
    "text": "dot, dot through the\npolynomial number of moves. If there's only a\npolynomial in many moves, then there's only a polynomial\nnumber of quantifiers here.",
    "start": "3060500",
    "end": "3068580"
  },
  {
    "text": "And then in the\nformula I'm going to write whatever\nthe rules of the game are, and then AND it\ntogether with I win.",
    "start": "3068580",
    "end": "3077980"
  },
  {
    "text": " I think you believe\nalmost all games you",
    "start": "3077980",
    "end": "3083230"
  },
  {
    "text": "can write as some Boolean\nformula to do that. Some polynomial-sized Boolean\nformula saying at each",
    "start": "3083230",
    "end": "3090950"
  },
  {
    "text": "step you satisfy what you need. And so this is a QSAT problem.",
    "start": "3090950",
    "end": "3098730"
  },
  {
    "text": " And therefore, any\ntwo-player game",
    "start": "3098730",
    "end": "3107240"
  },
  {
    "text": "where you can write moves and\nresponses succinctly and have a polynomial number\nof moves is in PSPACE,",
    "start": "3107240",
    "end": "3113380"
  },
  {
    "text": "because you can\nreduce it to QSAT. OK. So that's why\nPSPACE is the class",
    "start": "3113380",
    "end": "3119340"
  },
  {
    "text": "we care about for\npolynomially bounded games. So now we want to\nprove hardness.",
    "start": "3119340",
    "end": "3126210"
  },
  {
    "text": "And first I want to give\nyou some hard problems in this setting starting\nwith SAT-style games.",
    "start": "3126210",
    "end": "3133780"
  },
  {
    "start": "3133780",
    "end": "3139570"
  },
  {
    "text": "This is from another paper\nby Shaefer, same guy who did Shaefer Dichotomy Theorem.",
    "start": "3139570",
    "end": "3146869"
  },
  {
    "text": "He also did some\nnice stuff on games. So first game is just your\nfavorite flavor of QSAT.",
    "start": "3146870",
    "end": "3160220"
  },
  {
    "text": "You can think of it as a game. Because QSAT is exactly of this\nform, you can think of the game",
    "start": "3160220",
    "end": "3166420"
  },
  {
    "text": "as-- in your first move you're\ngoing to choose this variable. In your second\nmove, your opponent",
    "start": "3166420",
    "end": "3172289"
  },
  {
    "text": "is going to choose\nthis variable. In the third move you\nchoose this variable. And so on. Because play alternates,\nyou are following",
    "start": "3172290",
    "end": "3179710"
  },
  {
    "text": "exactly an alternating\nquantifier kind of thing. And the goal of player one\nis to satisfy this formula.",
    "start": "3179710",
    "end": "3188690"
  },
  {
    "text": "The goal player two is to have\nit not satisfied in the end. And so player one\nwill win if and only if this formula is true.",
    "start": "3188690",
    "end": "3196260"
  },
  {
    "text": "So in the game, you think of\nit as there are a sequence of variables-- x1, x2, x3. Play alternates between\nassigning xi and xi plus 1.",
    "start": "3196260",
    "end": "3205640"
  },
  {
    "text": "Player one's always\nassigning the odd variables. Player two is always\nassigning the even variables. And then if the\nformula is satisfied,",
    "start": "3205640",
    "end": "3212530"
  },
  {
    "text": "then player one wins. OK.",
    "start": "3212530",
    "end": "3218410"
  },
  {
    "text": "So this is what you\nmight call the game",
    "start": "3218410",
    "end": "3226880"
  },
  {
    "text": "version of a satisfiable formula\nis that player one wins if",
    "start": "3226880",
    "end": "3236099"
  },
  {
    "text": "and only if the formula\nis satisfied in the end. ",
    "start": "3236100",
    "end": "3249140"
  },
  {
    "text": "But there's some\nother goal conditions you might consider\nthat Schaefer defines.",
    "start": "3249140",
    "end": "3254360"
  },
  {
    "text": "One is called Seek,\nwhich is the first player",
    "start": "3254360",
    "end": "3263210"
  },
  {
    "text": "to satisfy the formula wins.",
    "start": "3263210",
    "end": "3272980"
  },
  {
    "text": "And so in general, if you're\nchoosing some variables,",
    "start": "3272980",
    "end": "3280422"
  },
  {
    "text": "you have a set of\nvariables, some of them have been assigned 0 or 1. Some of them haven't\nbeen assigned yet.",
    "start": "3280422",
    "end": "3286110"
  },
  {
    "text": "So when I say\nsatisfy here, I mean that unassigned things are 0.",
    "start": "3286110",
    "end": "3294370"
  },
  {
    "text": "So if you think of everything as\ninitially 0, whoever satisfies the formula first wins.",
    "start": "3294370",
    "end": "3301880"
  },
  {
    "text": "Then the opposite\nversion is Void. So the first person to\nsatisfy the formula loses.",
    "start": "3301880",
    "end": "3310132"
  },
  {
    "text": "So the formula starts false. ",
    "start": "3310132",
    "end": "3315210"
  },
  {
    "text": "And the first person to set\nit to true loses the game. Other person wins. OK. So those are some rule\nvariations of the goal state.",
    "start": "3315210",
    "end": "3325859"
  },
  {
    "text": "Now let me tell you\nabout the moves. ",
    "start": "3325860",
    "end": "3337090"
  },
  {
    "text": "So other than QSAT, we're going\nto have two types of moves.",
    "start": "3337090",
    "end": "3345020"
  },
  {
    "text": "One is impartial moves. Impartial means that both\nplayers have the same moves.",
    "start": "3345020",
    "end": "3351349"
  },
  {
    "text": "So an impartial move is\ngoing to be whoever's playing",
    "start": "3351350",
    "end": "3356470"
  },
  {
    "text": "sets an unassigned variable. So on all of these\ngames, you can only",
    "start": "3356470",
    "end": "3362520"
  },
  {
    "text": "assign a variable once. If you can assign\nit multiple times,",
    "start": "3362520",
    "end": "3367680"
  },
  {
    "text": "then you're no longer\npolynomially bounded, and you get x time completeness. But for the polynomially\nbounded games,",
    "start": "3367680",
    "end": "3373890"
  },
  {
    "text": "we're going to define\neach variable can only be assigned once. And in a partial\ngame, any player",
    "start": "3373890",
    "end": "3379420"
  },
  {
    "text": "can assign any variable\nthat's not yet assigned. OK. So whereas in QSAT, you\nhad a fixed ordering.",
    "start": "3379420",
    "end": "3386770"
  },
  {
    "text": "First x1, then x2, then x3. An impartial game\nversion of SAT, players",
    "start": "3386770",
    "end": "3398240"
  },
  {
    "text": "take turns setting\nvariables, any one they want. It's not yet assigned. And in the end, if the formula\nis satisfied, player one wins.",
    "start": "3398240",
    "end": "3405330"
  },
  {
    "text": "That would be impartial game. But I could also do impartial\nseek, impartial void. ",
    "start": "3405330",
    "end": "3412430"
  },
  {
    "text": "And then by the way,\nI made up these names. So they don't match\nwhat Shaefer calls them.",
    "start": "3412430",
    "end": "3420110"
  },
  {
    "text": "But these are more modern. These terms are in\nWinning Ways, for example. Seek and Avoid he used.",
    "start": "3420110",
    "end": "3425450"
  },
  {
    "text": "But the other ones I made up. OK. Partisan version is that\nthere are white variables",
    "start": "3425450",
    "end": "3434450"
  },
  {
    "text": "and there are black variables. And the white player can\nonly set white variables,",
    "start": "3434450",
    "end": "3441440"
  },
  {
    "text": "black player can only\nset black variables. There's 50% of each.",
    "start": "3441440",
    "end": "3448250"
  },
  {
    "text": "And so they balance if you\nplay all the way to the end,",
    "start": "3448250",
    "end": "3454170"
  },
  {
    "text": "like in the game\nversion, then it's",
    "start": "3454170",
    "end": "3461069"
  },
  {
    "text": "OK to have the white player play\nany unsatisfied white variable and set it to true or false.",
    "start": "3461070",
    "end": "3466420"
  },
  {
    "text": " I think that defines all\nthe games that I want. Now let me tell you which\ncombinations are PSPACE",
    "start": "3466420",
    "end": "3473390"
  },
  {
    "text": "complete.  A bunch of them.",
    "start": "3473390",
    "end": "3479090"
  },
  {
    "text": "So impartial. In addition to this\ncharacterization, there's also all the different\nversions of SAT that we know.",
    "start": "3479090",
    "end": "3487180"
  },
  {
    "text": "So we have impartial\ngame positive 11-SAT.",
    "start": "3487180",
    "end": "3494680"
  },
  {
    "text": " So this is a version of CNF. Instead of 3-SAT, I have 11-SAT.",
    "start": "3494680",
    "end": "3501070"
  },
  {
    "text": "There are no negative literals. And it's impartial. So anyone could\nset any variable.",
    "start": "3501070",
    "end": "3507920"
  },
  {
    "text": "And it's the game\nversion, so player one wants to set it true. Player two wants the\nformula to be false.",
    "start": "3507920",
    "end": "3513452"
  },
  {
    "text": "That's PSPACE complete.  Also, if we do 11-DNF-SAT, so\na DNF formula with positive.",
    "start": "3513452",
    "end": "3524715"
  },
  {
    "text": " This is also as hard. I mean, that essentially\ncorresponds to flipping",
    "start": "3524715",
    "end": "3532440"
  },
  {
    "text": "all the quantifiers. So that doesn't make\na big difference. ",
    "start": "3532440",
    "end": "3538430"
  },
  {
    "text": "So this is cool because\npositive SAT is usually pretty easy with all\nexistential quantifiers.",
    "start": "3538430",
    "end": "3544150"
  },
  {
    "text": "With alternating\nquantifiers, not so easy. Yeah. AUDIENCE: Is impartial game\npositive 10-SAT [INAUDIBLE]?",
    "start": "3544150",
    "end": "3551940"
  },
  {
    "text": "PROFESSOR: We don't\nknow the exact cutoff. There is a paper, I think,\nproving six is enough.",
    "start": "3551940",
    "end": "3558740"
  },
  {
    "text": "But the positive disappears. So I think that's an open\nproblem, how low you could go.",
    "start": "3558740",
    "end": "3565880"
  },
  {
    "text": " It's hard to do the\nusual kind of reductions",
    "start": "3565880",
    "end": "3571300"
  },
  {
    "text": "from many occurrences\nto fewer, because games are very sensitive about who's\nplaying win, timing, and so on.",
    "start": "3571300",
    "end": "3580530"
  },
  {
    "text": "So next one is\npartisan game CNF-SAT.",
    "start": "3580530",
    "end": "3586500"
  },
  {
    "text": "Here we don't have positive. And we don't have the bound 11. But we changed\nimpartial to partisan.",
    "start": "3586500",
    "end": "3592840"
  },
  {
    "text": "That still is hard. And next we have a\nwhole bunch of games",
    "start": "3592840",
    "end": "3597920"
  },
  {
    "text": "that work both for impartial\nand partisan moves. ",
    "start": "3597920",
    "end": "3610400"
  },
  {
    "text": "OK. So we have avoid\npositive 2-DNF-SAT.",
    "start": "3610400",
    "end": "3617299"
  },
  {
    "text": " We have seek positive 3-DNF-SAT.",
    "start": "3617300",
    "end": "3625945"
  },
  {
    "text": " We have avoid positive CNF-SAT.",
    "start": "3625945",
    "end": "3639720"
  },
  {
    "text": "And we have seek\npositive CNF-SAT. ",
    "start": "3639720",
    "end": "3647790"
  },
  {
    "text": "So the main point is,\nmost combinations are hard for some version of SAT. And these are the tightest\nones that Shaefer could show.",
    "start": "3647790",
    "end": "3655450"
  },
  {
    "text": "Doesn't necessarily\nmean that they're tight. And there's no\ndichotomy theorem here,",
    "start": "3655450",
    "end": "3660959"
  },
  {
    "text": "so we don't know exactly\nwhich problems are hard. But this is a ton of\ngames to start from. And in particular, we're going\nto use at least one of them.",
    "start": "3660959",
    "end": "3671250"
  },
  {
    "text": "OK. Let's maybe go over here. ",
    "start": "3671250",
    "end": "3685740"
  },
  {
    "text": "OK. A couple more problems\nwhich are in Shaefer paper.",
    "start": "3685740",
    "end": "3692690"
  },
  {
    "text": "One's called Kayles,\none is called Geography. ",
    "start": "3692690",
    "end": "3703350"
  },
  {
    "text": "Kayles is essentially\nthe two-player version of independent set. So there are a\ncouple of versions.",
    "start": "3703350",
    "end": "3710310"
  },
  {
    "text": "There is node Kayles and\nbipartite node Kayles.",
    "start": "3710310",
    "end": "3717795"
  },
  {
    "text": " These are the traditional names.",
    "start": "3717795",
    "end": "3725090"
  },
  {
    "text": "You could also think of\nthis is impartial Kayles and this as partisan Kayles.",
    "start": "3725090",
    "end": "3730720"
  },
  {
    "text": "So here the moves\nare all the same. The moves are here. Pick any vertex, add\nto an independent set.",
    "start": "3730720",
    "end": "3737530"
  },
  {
    "text": " That's a move. So players take turns adding. At all times, you\nmust add a vertex",
    "start": "3737530",
    "end": "3744850"
  },
  {
    "text": "that keeps it independent set. So you're effectively\nremoving all of its neighbors and itself. Last player to move wins.",
    "start": "3744850",
    "end": "3751410"
  },
  {
    "text": "You can't move, you lose. Bipartite node Kayles, you\nhave a bipartite graph.",
    "start": "3751410",
    "end": "3757650"
  },
  {
    "text": "And one side you call white,\none side you call black. A white player can only\nchoose from the white side. A black player can only\nchoose from the black side.",
    "start": "3757650",
    "end": "3765010"
  },
  {
    "text": "So these are both\nPSPACE complete as well, via reductions from\nthese problems. But I don't have those\nreductions with me.",
    "start": "3765010",
    "end": "3773430"
  },
  {
    "text": "OK. So that's independent set. Geography is essentially\na two-player version",
    "start": "3773430",
    "end": "3779400"
  },
  {
    "text": "of Longest Path. It's inspired by this\nreal-life game where",
    "start": "3779400",
    "end": "3785319"
  },
  {
    "text": "one person names\na city or country or pick your favorite\nclass of objects. And then the other\nplayer must name",
    "start": "3785320",
    "end": "3791700"
  },
  {
    "text": "a word whose first letter\nequals the last letter of the previous word. So you're forming\nchains of words.",
    "start": "3791700",
    "end": "3797290"
  },
  {
    "text": "And you can think of that\nas just having a graph where vertices are the\nwords, the edges are valid moves between words.",
    "start": "3797290",
    "end": "3804290"
  },
  {
    "text": "Do they have some\ncommon property. So in general, you're\ngiven a directed graph",
    "start": "3804290",
    "end": "3809520"
  },
  {
    "text": "and you're given a start node. And you have a token\nat that start node.",
    "start": "3809520",
    "end": "3814760"
  },
  {
    "text": " A move in the game\nis to follow an edge, to move the token along an edge.",
    "start": "3814760",
    "end": "3822190"
  },
  {
    "text": "But then there's some\nnon-repetition condition. So we have node geography\nwhere you're not",
    "start": "3822190",
    "end": "3829060"
  },
  {
    "text": "allowed to repeat any notes. That would be the\nusual longest path. ",
    "start": "3829060",
    "end": "3839324"
  },
  {
    "text": "And again, the last\nplayer to move wins. If you can't make a move,\nyou lose the game, just like the real game.",
    "start": "3839324",
    "end": "3845490"
  },
  {
    "text": "And on the other hand,\nwe have edge geography, which is more like\nan [INAUDIBLE] path.",
    "start": "3845490",
    "end": "3852080"
  },
  {
    "text": " The longest edge\ndestroying path.",
    "start": "3852080",
    "end": "3858690"
  },
  {
    "text": "So edge geography you're\nnot allowed to repeat edges. ",
    "start": "3858690",
    "end": "3864319"
  },
  {
    "text": "And for each one, you could\nthink of a directed graph, you have to follow directed\nedges or an undirected graph.",
    "start": "3864320",
    "end": "3869760"
  },
  {
    "text": "And here undirected,\nno geography is NP.",
    "start": "3869760",
    "end": "3877620"
  },
  {
    "text": "Directed, no geography\nif PSPACE complete. ",
    "start": "3877620",
    "end": "3885410"
  },
  {
    "text": "And for edge geography,\nsurprisingly, both are PSPACE complete. ",
    "start": "3885410",
    "end": "3892890"
  },
  {
    "text": "So this is a useful problem. I've seen a ton of PSPACE\ncompleteness proofs based on geography.",
    "start": "3892890",
    "end": "3898730"
  },
  {
    "text": "It's kind of conceptually clean. And I will show you one now.",
    "start": "3898730",
    "end": "3904559"
  },
  {
    "text": "Everyone play Othello, Reversi.",
    "start": "3904560",
    "end": "3909780"
  },
  {
    "text": "In general, you\nhave these pieces which are black on one\nside, white on the other. The black side is\nthe one that you play",
    "start": "3909780",
    "end": "3916310"
  },
  {
    "text": "if you're the black player. But then you can, for example,\nif you place a new black stone",
    "start": "3916310",
    "end": "3922410"
  },
  {
    "text": "here, given this\nconfiguration, because there's a black string of whites\nand then a black here,",
    "start": "3922410",
    "end": "3927420"
  },
  {
    "text": "you end up flipping\nthat one over. Because this is black and\nthen a bunch of whites, or black and then a space,\nnothing else happens.",
    "start": "3927420",
    "end": "3934340"
  },
  {
    "text": "In this picture though, if\nyou place this black thing, this is black, a bunch of\nwhites, then black, black,",
    "start": "3934340",
    "end": "3940160"
  },
  {
    "text": "bunch of whites, black,\nblack, bunch of whites, black. So all of those flip over. And your goal is to\nmaximize your color.",
    "start": "3940160",
    "end": "3947280"
  },
  {
    "text": "You want more more stones of\nyour color than the opponent's. OK.",
    "start": "3947280",
    "end": "3952670"
  },
  {
    "text": "Cool game. Bounded number of moves,\npolynomial number of moves, because every time\nyou add a new stone,",
    "start": "3952670",
    "end": "3958840"
  },
  {
    "text": "you've occupied one of\nthe squares on the board. And you'll never get that back. So n by n board would be\nexactly n squared minus 4 moves,",
    "start": "3958840",
    "end": "3966310"
  },
  {
    "text": "because four is the\noriginal number. So this is PSPACE\ncomplete, given",
    "start": "3966310",
    "end": "3971390"
  },
  {
    "text": "a particular\nconfiguration to decide whether black has a\nwinning strategy, say,",
    "start": "3971390",
    "end": "3976410"
  },
  {
    "text": "is PSPACE complete. And most of the\nconstruction is in here.",
    "start": "3976410",
    "end": "3984900"
  },
  {
    "text": "This box is actually\nthis picture. And that's going to\nsimulate geography.",
    "start": "3984900",
    "end": "3990309"
  },
  {
    "text": "But let me tell you\nabout this other part. So right now white has\na huge amount of area. This is actually really big.",
    "start": "3990310",
    "end": "3995730"
  },
  {
    "text": "So I guess this is very thin,\nso there's not much action here. Here you've got a huge\namount of white area.",
    "start": "3995730",
    "end": "4002210"
  },
  {
    "text": "So white will win unless\nblack can take this part. And what happens is\nthere's a gap here.",
    "start": "4002210",
    "end": "4008210"
  },
  {
    "text": "And if black can play\nany of these spots, now black won't be\nable to play here",
    "start": "4008210",
    "end": "4013310"
  },
  {
    "text": "if there's some corresponding\nblack thing over here. So that's what these long\nhorizontal channels will be.",
    "start": "4013310",
    "end": "4019520"
  },
  {
    "text": "So if black can play over\nhere, because there's a black stone and long\nwhite channels here,",
    "start": "4019520",
    "end": "4025510"
  },
  {
    "text": "then this will flip to black. And then in this\npicture is this.",
    "start": "4025510",
    "end": "4030849"
  },
  {
    "text": "So if one of these stones\nup here is now black,",
    "start": "4030850",
    "end": "4036670"
  },
  {
    "text": "that means you can\nplay at position alpha. And if I play at position\nalpha, black plays there.",
    "start": "4036670",
    "end": "4042680"
  },
  {
    "text": "Then I get black\nall the way here. White can't really\nrespond much to that.",
    "start": "4042680",
    "end": "4048750"
  },
  {
    "text": "And then in the next\nblack move, black can go here and flip that one. And then black can go\nhere in the corner.",
    "start": "4048750",
    "end": "4057397"
  },
  {
    "text": "Corners are very\nimportant in Othello. So once you take this corner\nand flip all these things to be black, then I can play here,\nhere, here, here, here, here,",
    "start": "4057397",
    "end": "4065400"
  },
  {
    "text": "here and take all of these. And because this\nis the edge, white won't be able to\ntake anything back.",
    "start": "4065400",
    "end": "4071890"
  },
  {
    "text": "So that's the threat. Each of these lines is\ngoing to be a threat that if any of these\nbecome black over here,",
    "start": "4071890",
    "end": "4080550"
  },
  {
    "text": "white has to turn\nthem back to white. Otherwise, in the very next\nmove, black will win the game.",
    "start": "4080550",
    "end": "4085551"
  },
  {
    "text": "OK.  A lot of two-player game proofs\nhave this constant notion of threat. One player's basically\njust slogging",
    "start": "4085551",
    "end": "4091230"
  },
  {
    "text": "through trying to put out fires. And the other\nplayer is constantly causing fires in order\nto force the other player",
    "start": "4091230",
    "end": "4096649"
  },
  {
    "text": "to do what they want. So it almost reduces\nto a one-player game. But there's still\nsome choices involved.",
    "start": "4096649",
    "end": "4102109"
  },
  {
    "text": " Well, these are not\nterribly exciting.",
    "start": "4102109",
    "end": "4107528"
  },
  {
    "text": "But let me show you\nthe typical setup. This is just a turn gadget, or\nit could be a degree 2 vertex.",
    "start": "4107529",
    "end": "4113609"
  },
  {
    "text": "I should mention we're\nreducing from directed no geography, where this\nis directed no geography.",
    "start": "4113609",
    "end": "4123028"
  },
  {
    "text": "Also max degree 3. ",
    "start": "4123029",
    "end": "4131159"
  },
  {
    "text": "So that means you might\nhave a degree 2 vertex, or you might have\na degree 3 vertex.",
    "start": "4131160",
    "end": "4136520"
  },
  {
    "text": "There are two types\nof degree 3 directed vertices merging and branching.",
    "start": "4136520",
    "end": "4145850"
  },
  {
    "text": "So we need gadgets\nfor each of these. Also, bipartite. ",
    "start": "4145850",
    "end": "4153049"
  },
  {
    "text": "Bipartite is useful\nbecause in geography you're always moving along an edge,\nwhich means you'll always",
    "start": "4153050",
    "end": "4158439"
  },
  {
    "text": "be jumping from the left\nside of the bipartition to the right side. So you can color the\nedges black and white. And black player will only\nplay in the black side,",
    "start": "4158439",
    "end": "4164920"
  },
  {
    "text": "and white player will only\nplay in the white side. So this is good. You can predict who's going\nto be playing in each gadget.",
    "start": "4164920",
    "end": "4170979"
  },
  {
    "text": "So in a degree 2 gadget, it\nworks something like this. If white has played\nhere, that will be because of the other gadget.",
    "start": "4170979",
    "end": "4179759"
  },
  {
    "text": "This is the trigger. Then now this is black, a\nbunch of whites, and now black can play here,\nreversing all of these.",
    "start": "4179760",
    "end": "4185914"
  },
  {
    "text": "This is a threat line. And there's now a\nblack square, which means white must\nimmediately play here",
    "start": "4185914",
    "end": "4191600"
  },
  {
    "text": "in order to reverse all of\nthose stones back to white. But now this is a white stone,\nwhich lets this thing trigger.",
    "start": "4191600",
    "end": "4198180"
  },
  {
    "text": "So now black can play at the\nend of this thing, et cetera. So this just propagates\na signal, does a turn.",
    "start": "4198180",
    "end": "4203580"
  },
  {
    "text": "It's a degree 2 vertex. Whatever. All those things. And this is slightly\ndifferent version for a different orientation,\nbecause these things",
    "start": "4203580",
    "end": "4210382"
  },
  {
    "text": "have to go to the left. This looks a little different. OK. More interesting are\nthe degree 3 vertices.",
    "start": "4210382",
    "end": "4216120"
  },
  {
    "text": "This is the type where I have\ntwo incoming edges and one outgoing. Key thing here is we need to\ncheck that we do not visit",
    "start": "4216120",
    "end": "4223730"
  },
  {
    "text": "this vertex more than once. We came in here and\nthen came in again. We want something bad to happen.",
    "start": "4223730",
    "end": "4228760"
  },
  {
    "text": "Now what should\nhappen bad depends on whether it was the white player\nmoving or the black player moving. if it was the\nwhite player moving",
    "start": "4228760",
    "end": "4234810"
  },
  {
    "text": "and they double visit, it\nmeans white should lose. If it was the black player\nmoving, and they double visit, it means black should lose.",
    "start": "4234810",
    "end": "4241320"
  },
  {
    "text": "Because of the bipartiteness,\nwe know which gadget to use. They're almost the same gadget.",
    "start": "4241320",
    "end": "4246640"
  },
  {
    "text": "Just these two dots\nhave been added. So something like, if this\nactivates, and it's symmetric,",
    "start": "4246640",
    "end": "4255870"
  },
  {
    "text": "but let's say this one\nactivates by white playing here, then black can play\nhere, flip all those,",
    "start": "4255870",
    "end": "4261650"
  },
  {
    "text": "which has this threat\nline, which means white must play here. Flip them all back to white. But now this B1\nposition is white,",
    "start": "4261650",
    "end": "4268770"
  },
  {
    "text": "which enables black to play\nhere, flip all those to black. This is the threat line,\ntherefore white must play here.",
    "start": "4268770",
    "end": "4274800"
  },
  {
    "text": "Can't play there. And turn all these\nback to white. Now this is white. And now this\nactivates down there.",
    "start": "4274800",
    "end": "4281440"
  },
  {
    "text": "So that's just\nfollowing the vertex. No big deal. But if you came\nalong a second time",
    "start": "4281440",
    "end": "4286920"
  },
  {
    "text": "and activated this as white--\nnow this is already white. So when you play black,\nyou get a black here.",
    "start": "4286920",
    "end": "4295550"
  },
  {
    "text": "And white can't do anything. There's no white stone up there.",
    "start": "4295550",
    "end": "4301250"
  },
  {
    "text": "Yeah. Well it's entirely black. If there was a white\non either side,",
    "start": "4301250",
    "end": "4306590"
  },
  {
    "text": "white could flip it\nand get them back. But you can't. And so you actually have\ntwo threat lines activated.",
    "start": "4306590",
    "end": "4311830"
  },
  {
    "text": "And then black wins. So this is the version\nwhere black wins. If instead, we have\na white thing here,",
    "start": "4311830",
    "end": "4318619"
  },
  {
    "text": "everything else is the same. So this was white,\nthis was white. Black now plays here.",
    "start": "4318620",
    "end": "4325800"
  },
  {
    "text": "Now white can go\nhere and completely make this thing\nwhite, and then black doesn't have any moves anymore.",
    "start": "4325800",
    "end": "4331142"
  },
  {
    "text": "And that's the way that\nwhite's going to win is to prevent black\nfrom playing anymore. Then the area that was white\nis white, so we're done.",
    "start": "4331142",
    "end": "4339600"
  },
  {
    "text": "There are lots of\ndetails here to check, but that's how it works. There's one more\ngadget basically",
    "start": "4339600",
    "end": "4345090"
  },
  {
    "text": "that says this is for\none incoming edge and two",
    "start": "4345090",
    "end": "4352679"
  },
  {
    "text": "outgoing edges. So here you want the\nplayers to have a choice, either I go this way,\nor I go this way.",
    "start": "4352680",
    "end": "4358726"
  },
  {
    "text": "And if it's a white vertex, you\nwant white to make that choice. If it's a black vertex, you\nwant black to make that choice.",
    "start": "4358726",
    "end": "4363840"
  },
  {
    "text": "But black is still kind\nof doing all the action. So it can be done. When this activates,\nthen black plays here,",
    "start": "4363840",
    "end": "4372200"
  },
  {
    "text": "flipping all these things. Then white plays here,\nimmediately flipping it back.",
    "start": "4372200",
    "end": "4379440"
  },
  {
    "text": "That's the trouble, is\nalways black is in control. Now black plays here,\nflipping that one guy.",
    "start": "4379440",
    "end": "4385470"
  },
  {
    "text": "And white has two choices. It can either play here and\nflip just this one, or play here and flip those guys.",
    "start": "4385470",
    "end": "4391660"
  },
  {
    "text": "And either put a\nwhite here or here, and that will end up\nactivating for black either this path, or this path.",
    "start": "4391660",
    "end": "4398239"
  },
  {
    "text": "So white made the choice. And in this version,\nblack makes the choice. That's a little easier. Yeah.",
    "start": "4398240",
    "end": "4403890"
  },
  {
    "text": "AUDIENCE: Are these\ngadgets constructable? PROFESSOR: In an 8 by 8? AUDIENCE: No.",
    "start": "4403890",
    "end": "4409530"
  },
  {
    "text": "Like from a starting\nconfiguration. Can you get to a configuration\nof these gadgets?",
    "start": "4409530",
    "end": "4414850"
  },
  {
    "text": "PROFESSOR: Oh, I see. I think so. I didn't read that\nas [INAUDIBLE],",
    "start": "4414850",
    "end": "4421669"
  },
  {
    "text": "but it wouldn't surprise\nme if it's in the paper. It's traditional in constructing\nthese generalized games to actually show that you\ncan reach this position",
    "start": "4421669",
    "end": "4429190"
  },
  {
    "text": "from the initial state. Although the problem makes\nsense even if you can't. It's more interesting to say,\nwell we played like crazy.",
    "start": "4429190",
    "end": "4436590"
  },
  {
    "text": "And then we ended\nup with this thing. Can you finish it off for me? That's basically the\nproblem we'd like to solve.",
    "start": "4436590",
    "end": "4444140"
  },
  {
    "text": "Can white win? It's like the\ncommentator problem. People are playing. And now I want to know who's\ngoing to win at this point.",
    "start": "4444140",
    "end": "4450860"
  },
  {
    "text": "But I don't know for\nsure for this reduction. Usually they can. OK. So that's a sketch of\nOthello PSPACE hardness",
    "start": "4450860",
    "end": "4457980"
  },
  {
    "text": "reduction from geography.  So the last thing I want to talk\nabout, back to this picture,",
    "start": "4457980",
    "end": "4466560"
  },
  {
    "text": "is the two-player setup\nfor constraint logic.",
    "start": "4466560",
    "end": "4473270"
  },
  {
    "text": "So polynomially\nbounded, two-player game should be PSPACE complete.",
    "start": "4473270",
    "end": "4479230"
  },
  {
    "text": "First I'm going to\ntalk briefly about what does bounded mean in general\nfor constraint logic. So in particular, for\none player which we know,",
    "start": "4479230",
    "end": "4485830"
  },
  {
    "text": "the bounded NCL means each\nedge can flip only once.",
    "start": "4485830",
    "end": "4491840"
  },
  {
    "text": "That's our definition. And that game is clearly\nin NP, cause one you flip all the edges, you're done.",
    "start": "4491840",
    "end": "4497210"
  },
  {
    "text": "And in the same way,\nwe prove that just finding and satisfying\norientation of a constraint graph is NP\ncomplete, we can show",
    "start": "4497210",
    "end": "4505380"
  },
  {
    "text": "just I changed the very top\ngadget, that bounded NCL,",
    "start": "4505380",
    "end": "4511120"
  },
  {
    "text": "you just want to flip this\none edge is NP complete. Because you basically\nhave to make a choice for each\nof these vertices,",
    "start": "4511120",
    "end": "4517270"
  },
  {
    "text": "which way to set them. And then you can propagate up. We don't have to flip any edges\nfor this very simple proof.",
    "start": "4517270",
    "end": "4522860"
  },
  {
    "text": "So NP completeness\nfor a bounded NCL. We do for this proof\nneed a choice gadget.",
    "start": "4522860",
    "end": "4530559"
  },
  {
    "text": "So all three red edges. It doesn't work\nto just blow it up like we could before\nin the bounded case.",
    "start": "4530560",
    "end": "4537450"
  },
  {
    "text": "OK. And there's a crossover gadget\nin this setting as well. It's actually pretty\nsimple because a bounded",
    "start": "4537450",
    "end": "4543060"
  },
  {
    "text": "you can't revisit. OK. So now bounded two-player\nconstraint logic is called 2CL.",
    "start": "4543060",
    "end": "4549804"
  },
  {
    "text": "This is PSPACE complete by\npretty much the same proof structure.",
    "start": "4549805",
    "end": "4555500"
  },
  {
    "text": "So what's the game? I have white edges\nand black edges. Each edge is white or black,\nand it's also red or blue.",
    "start": "4555500",
    "end": "4562860"
  },
  {
    "text": "Exclusive ORs. So they're drawn as--\nthese are all white edges. This is an example\nof a black edge. So the fill is white or black,\nthe outline is red or blue,",
    "start": "4562860",
    "end": "4570980"
  },
  {
    "text": "as before. White players can\nonly flip white edges, black players can\nonly flip black edges.",
    "start": "4570980",
    "end": "4577440"
  },
  {
    "text": "And otherwise it's\nthe same constraints. I mean, the inflow\nconstraint doesn't care whether you're black or white.",
    "start": "4577440",
    "end": "4583900"
  },
  {
    "text": "It's politically correct\nvertices, I guess. So we just need one\nnew type of vertex.",
    "start": "4583900",
    "end": "4592190"
  },
  {
    "text": "Everything else is going to\nbe done by the white player. There's one new type\nor vertex, which is an incoming black edge\nand an incoming white edge.",
    "start": "4592190",
    "end": "4599460"
  },
  {
    "text": "Call this a variable. The idea is that wherever gets\nthere first, white or black can flip it, preventing\nthe other player",
    "start": "4599460",
    "end": "4605860"
  },
  {
    "text": "from flipping their edge. So that's what we're going\nto use for variable settings. And I'm reducing from--\nremember the terminology here--",
    "start": "4605860",
    "end": "4616000"
  },
  {
    "text": "impartial game positive CNF-SAT. The very first one here.",
    "start": "4616000",
    "end": "4621320"
  },
  {
    "text": "Impartial game positive CNF-SAT. So player one's goal--\nwhite is the player one.",
    "start": "4621320",
    "end": "4627460"
  },
  {
    "text": "Player one's goal is\nto satisfy the formula and flip their edge. And it's the impartial\nversion, meaning anyone",
    "start": "4627460",
    "end": "4636040"
  },
  {
    "text": "can set any variable. So if black plays\nthis edge, that's going to correspond\nto setting x2 false.",
    "start": "4636040",
    "end": "4642030"
  },
  {
    "text": "If white plays the\nedge, it's going to correspond to x being true. Because this is a\npositive formula,",
    "start": "4642030",
    "end": "4647739"
  },
  {
    "text": "every time white\nchoose a variable, they're gonna want\nto set it to true. And every time black\nsets a variable, they're going to\nset it to false,",
    "start": "4647740",
    "end": "4653420"
  },
  {
    "text": "because they want to prevent\nsatisfaction of the formula. So that's why it's OK to\njust represent it this way.",
    "start": "4653420",
    "end": "4658560"
  },
  {
    "text": "And then the rest\njust propagates. So if there are n\nvariables, there's going to be n over 2 rounds\nwhere all the variables get",
    "start": "4658560",
    "end": "4665620"
  },
  {
    "text": "set. And then black can't\ndo anything else. Just sitting there. This one is not going\nto be flippable because",
    "start": "4665620",
    "end": "4671400"
  },
  {
    "text": "of this gadget. So white's just going\nto fill in the formula.",
    "start": "4671400",
    "end": "4677070"
  },
  {
    "text": "And if it happens\nto be come out true, and white can flip their\nedge, then they win the game. And that will correspond\nto the formula being true.",
    "start": "4677070",
    "end": "4684590"
  },
  {
    "text": "And otherwise, not. Yeah. AUDIENCE: So is pass\nin that you can do? Or they're just like--",
    "start": "4684590",
    "end": "4690360"
  },
  {
    "text": "PROFESSOR: In this\ngame you can pass. I think you could\nprobably avoid that",
    "start": "4690360",
    "end": "4695510"
  },
  {
    "text": "by just adding a bunch\nof floating black edges that you can flip, or just\nflip repeatedly until white",
    "start": "4695510",
    "end": "4703950"
  },
  {
    "text": "either wins, or\nwhite doesn't win. The decision question\nis does white win? Now we end up with a tie in\nthe case white doesn't win.",
    "start": "4703950",
    "end": "4711940"
  },
  {
    "text": "You can also change that by\nhaving a long path of blacks. And black is going to sit\nthere flipping, trying",
    "start": "4711940",
    "end": "4717330"
  },
  {
    "text": "to get to flipping their edge. And the length of the\nwire is exactly how long it takes to fill in\nall these things.",
    "start": "4717330",
    "end": "4722810"
  },
  {
    "text": "Yeah. AUDIENCE: The reason why\nthey have that gadget there at the end is you\nneed to set exactly",
    "start": "4722810",
    "end": "4728990"
  },
  {
    "text": "a certain number of them true? Before black can, and so--",
    "start": "4728990",
    "end": "4734797"
  },
  {
    "text": "PROFESSOR: Oh. I see. Right. Yeah. That's a little more subtle. ",
    "start": "4734797",
    "end": "4741050"
  },
  {
    "text": "OK. Zero minutes remaining. ",
    "start": "4741050",
    "end": "4748300"
  },
  {
    "text": "The same crossover works. And you can also\nbuild a protected OR.",
    "start": "4748300",
    "end": "4754310"
  },
  {
    "text": "Protected OR is where you never\nhave both of these coming in. If you allow me the\nnotion of a free edge,",
    "start": "4754310",
    "end": "4760040"
  },
  {
    "text": "which is just floating there\nand can be reversed whenever you want, this is a white edge,\nthen this will act as a OR,",
    "start": "4760040",
    "end": "4766890"
  },
  {
    "text": "because this choice gadget can\nonly go one way or the other. It's only one of the\ninputs can actually flip one of these edges, and\nthen the OR will just take it.",
    "start": "4766890",
    "end": "4776000"
  },
  {
    "text": "So we can build predicted ORs. And then I have a bunch\nof PSPACE hardness proofs",
    "start": "4776000",
    "end": "4784320"
  },
  {
    "text": "based on bounded\nconstraint logic, but I suggest we wait\ntil Thursday to see this. Because they're kind of fun.",
    "start": "4784320",
    "end": "4790350"
  },
  {
    "text": "And I'd rather spend a little\ntime going through the proof details. So you'll have to\nwait in suspense",
    "start": "4790350",
    "end": "4798199"
  },
  {
    "text": "before we get to\nAmazons, which is a very fun-- you should\nplay Amazons meanwhile, if you get a chance.",
    "start": "4798200",
    "end": "4804114"
  },
  {
    "text": "It's very fun if you\nhave a chessboard around. And Konane, which is an ancient,\nat least 300-year-old game",
    "start": "4804115",
    "end": "4814140"
  },
  {
    "text": "from Hawaii, and Cross Purposes,\nwhich is a modern game.",
    "start": "4814140",
    "end": "4820554"
  },
  {
    "text": "These are all three\nbounded two- player games. And they're all PSPACE\ncomplete by a reduction from bounded two-player\nconstraint logic.",
    "start": "4820554",
    "end": "4828910"
  },
  {
    "text": " Cool. ",
    "start": "4828910",
    "end": "4837668"
  }
]