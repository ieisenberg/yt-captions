[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "What we'd like to do is to create a single\nabstraction that can be used to address all",
    "start": "1010",
    "end": "5210"
  },
  {
    "text": "our synchronization needs.",
    "start": "5210",
    "end": "7620"
  },
  {
    "text": "In the early 1960's, the Dutch computer scientist\nEdsger Dijkstra proposed a new abstract data",
    "start": "7620",
    "end": "13760"
  },
  {
    "text": "type called the semaphore, which has an integer\nvalue greater than or equal to 0.",
    "start": "13760",
    "end": "19470"
  },
  {
    "text": "A programmer can declare a semaphore as shown\nhere, specifying its initial value.",
    "start": "19470",
    "end": "25289"
  },
  {
    "text": "The semaphore lives in a memory location shared\nby all the processes that need to synchronize",
    "start": "25289",
    "end": "29860"
  },
  {
    "text": "their operation.",
    "start": "29860",
    "end": "32410"
  },
  {
    "text": "The semaphore is accessed with two operations:\nWAIT and SIGNAL.",
    "start": "32410",
    "end": "37289"
  },
  {
    "text": "The WAIT operation will wait until the specified\nsemaphore has a value greater than 0, then",
    "start": "37289",
    "end": "41960"
  },
  {
    "text": "it will decrement the semaphore value and\nreturn to the calling program.",
    "start": "41960",
    "end": "46299"
  },
  {
    "text": "If the semaphore value is 0 when WAIT is called,\nconceptually execution is suspended until",
    "start": "46299",
    "end": "52340"
  },
  {
    "text": "the semaphore value is non-zero.",
    "start": "52340",
    "end": "55600"
  },
  {
    "text": "In a simple (inefficient) implementation,\nthe WAIT routine loops, periodically testing",
    "start": "55600",
    "end": "60579"
  },
  {
    "text": "the value of the semaphore, proceeding when\nits value is non-zero.",
    "start": "60579",
    "end": "64360"
  },
  {
    "text": "The SIGNAL operation increments the value\nof the specified semaphore.",
    "start": "64360",
    "end": "68830"
  },
  {
    "text": "If there any processes WAITing on that semaphore,\nexactly one of them may now proceed.",
    "start": "68830",
    "end": "75070"
  },
  {
    "text": "We'll have to be careful with the implementation\nof SIGNAL and WAIT to ensure that the \"exactly",
    "start": "75070",
    "end": "79890"
  },
  {
    "text": "one\" constraint is satisfied,\ni.e., that two processes both WAITing on the",
    "start": "79890",
    "end": "84430"
  },
  {
    "text": "same semaphore won't both think they can decrement\nit and proceed after a SIGNAL.",
    "start": "84430",
    "end": "90040"
  },
  {
    "text": "A semaphore initialized with the value K guarantees\nthat the i_th call to SIGNAL will precede",
    "start": "90040",
    "end": "95860"
  },
  {
    "text": "(i+K)_th call to WAIT.",
    "start": "95860",
    "end": "99340"
  },
  {
    "text": "In a moment, we'll see some concrete examples\nthat will make this clear.",
    "start": "99340",
    "end": "103259"
  },
  {
    "text": "Note that in 6.004, we're ruling out semaphores\nwith negative values.",
    "start": "103260",
    "end": "107800"
  },
  {
    "text": "In the literature, you may see P(s) used in\nplace of WAIT(s) and V(s) used in place of",
    "start": "107800",
    "end": "115380"
  },
  {
    "text": "SIGNAL(s).",
    "start": "115380",
    "end": "117030"
  },
  {
    "text": "These operation names are derived from the\nDutch words for \"test\" and \"increase\".",
    "start": "117030",
    "end": "122010"
  },
  {
    "text": "Let's see how to use semaphores to implement\nprecedence constraints.",
    "start": "122010",
    "end": "126330"
  },
  {
    "start": "126000",
    "end": "126000"
  },
  {
    "text": "Here are two processes, each running a program\nwith 5 statements.",
    "start": "126330",
    "end": "131430"
  },
  {
    "text": "Execution proceeds sequentially within each\nprocess, so A1 executes before A2, and so",
    "start": "131430",
    "end": "136280"
  },
  {
    "text": "on.",
    "start": "136280",
    "end": "137380"
  },
  {
    "text": "But there are no constraints on the order\nof execution between the processes, so statement",
    "start": "137380",
    "end": "142579"
  },
  {
    "text": "B1 in Process B might be executed before or\nafter any of the statements in Process A.",
    "start": "142579",
    "end": "149510"
  },
  {
    "text": "Even if A and B are running in a timeshared\nenvironment on a single physical processor,",
    "start": "149510",
    "end": "154909"
  },
  {
    "text": "execution may switch at any time between processes\nA and B.",
    "start": "154910",
    "end": "159540"
  },
  {
    "text": "Suppose we wish to impose the constraint that\nthe execution of statement A2 completes before",
    "start": "159540",
    "end": "165120"
  },
  {
    "text": "execution of statement B4 begins.",
    "start": "165120",
    "end": "168540"
  },
  {
    "text": "The red arrow shows the constraint we want.",
    "start": "168540",
    "end": "171950"
  },
  {
    "text": "Here's the recipe for implementing this sort\nof simple precedence constraint using semaphores.",
    "start": "171950",
    "end": "177180"
  },
  {
    "text": "First, declare a semaphore (called \"s\" in\nthis example) and initialize its value to",
    "start": "177180",
    "end": "184239"
  },
  {
    "text": "0.",
    "start": "184239",
    "end": "185870"
  },
  {
    "text": "Place a call to signal(s) at the start of\nthe arrow.",
    "start": "185870",
    "end": "188980"
  },
  {
    "text": "In this example, signal(s) is placed after\nthe statement A2 in process A.",
    "start": "188980",
    "end": "194340"
  },
  {
    "text": "Then place a call to wait(s) at the end of\nthe arrow.",
    "start": "194340",
    "end": "198040"
  },
  {
    "text": "In this example, wait(s) is placed before\nthe statement B4 in process B.",
    "start": "198040",
    "end": "203730"
  },
  {
    "text": "With these modifications, process A executes\nas before, with the signal to semaphore s",
    "start": "203730",
    "end": "208650"
  },
  {
    "text": "happening after statement A2 is executed.",
    "start": "208650",
    "end": "211959"
  },
  {
    "text": "Statements B1 through B3 also execute as before,\nbut when the wait(s) is executed, execution",
    "start": "211959",
    "end": "219451"
  },
  {
    "text": "of process B is suspended until the signal(s)\nstatement has finished execution.",
    "start": "219451",
    "end": "225669"
  },
  {
    "text": "This guarantees that execution of B4 will\nstart only after execution of A2 has completed.",
    "start": "225669",
    "end": "233299"
  },
  {
    "text": "By initializing the semaphore s to 0, we enforced\nthe constraint that the first call to signal(s)",
    "start": "233299",
    "end": "239609"
  },
  {
    "text": "had to complete before the first call to wait(s)\nwould succeed.",
    "start": "239609",
    "end": "244900"
  },
  {
    "text": "Another way to think about semaphores is as\na management tool for a shared pool of K resources,",
    "start": "244900",
    "end": "250379"
  },
  {
    "start": "245000",
    "end": "245000"
  },
  {
    "text": "where K is the initial value of the semaphore.",
    "start": "250379",
    "end": "253930"
  },
  {
    "text": "You use the SIGNAL operation to add or return\nresources to the shared pool.",
    "start": "253930",
    "end": "257979"
  },
  {
    "text": "And you use the WAIT operation to allocate\na resource for your exclusive use.",
    "start": "257980",
    "end": "263060"
  },
  {
    "text": "At any given time, the value of the semaphore\ngives the number of unallocated resources",
    "start": "263060",
    "end": "268600"
  },
  {
    "text": "still available in the shared pool.",
    "start": "268600",
    "end": "271570"
  },
  {
    "text": "Note that the WAIT and SIGNAL operations can\nbe in the same process, or they may be in",
    "start": "271570",
    "end": "276440"
  },
  {
    "text": "different processes, depending on when the\nresource is allocated and returned.",
    "start": "276440",
    "end": "282150"
  },
  {
    "start": "282000",
    "end": "282000"
  },
  {
    "text": "We can use semaphores to manage our N-character\nFIFO buffer.",
    "start": "282150",
    "end": "286000"
  },
  {
    "text": "Here we've defined a semaphore CHARS and initialized\nit to 0.",
    "start": "286000",
    "end": "289850"
  },
  {
    "text": "The value of CHARS will tell us how many characters\nare in the buffer.",
    "start": "289850",
    "end": "294320"
  },
  {
    "text": "So SEND does a signal(CHARS) after it has\nadded a character to the buffer, indicating",
    "start": "294320",
    "end": "298860"
  },
  {
    "text": "the buffer now contains an additional character.",
    "start": "298860",
    "end": "301770"
  },
  {
    "text": "And RCV does a wait(CHARS) to ensure the buffer\nhas at least one character before reading",
    "start": "301770",
    "end": "307509"
  },
  {
    "text": "from the buffer.",
    "start": "307510",
    "end": "309790"
  },
  {
    "text": "Since CHARS was initialized to 0, we've enforced\nthe constraint that the i_th call to signal(CHARS)",
    "start": "309790",
    "end": "314560"
  },
  {
    "text": "precedes the completion of the i_th call to\nwait(CHARS).",
    "start": "314560",
    "end": "317419"
  },
  {
    "text": "In other words, RCV can't consume a character\nuntil it has been placed in the buffer by",
    "start": "317420",
    "end": "323030"
  },
  {
    "text": "SEND.",
    "start": "323030",
    "end": "324040"
  },
  {
    "text": "Does this mean our producer and consumer are\nnow properly synchronized?",
    "start": "324040",
    "end": "329160"
  },
  {
    "text": "Using the CHARS semaphore, we implemented\n*one* of the two precedence constraints we",
    "start": "329160",
    "end": "332800"
  },
  {
    "text": "identified as being necessary for correct\noperation.",
    "start": "332800",
    "end": "336789"
  },
  {
    "text": "Next we'll see how to implement the other\nprecedence constraint.",
    "start": "336790",
    "end": "340780"
  },
  {
    "text": "What keeps the producer from putting more\nthan N characters into the N-character buffer?",
    "start": "340780",
    "end": "346460"
  },
  {
    "start": "341000",
    "end": "341000"
  },
  {
    "text": "Nothing.",
    "start": "346460",
    "end": "347620"
  },
  {
    "text": "Oops, the producer can start to overwrite\ncharacters placed in the buffer earlier even",
    "start": "347620",
    "end": "353250"
  },
  {
    "text": "though they haven't yet been read by the consumer.",
    "start": "353250",
    "end": "356550"
  },
  {
    "text": "This is called buffer overflow and the sequence\nof characters transmitted from producer to",
    "start": "356550",
    "end": "361030"
  },
  {
    "text": "consumer becomes hopelessly corrupted.",
    "start": "361030",
    "end": "364860"
  },
  {
    "text": "What we've guaranteed so far is that the consumer\ncan read a character only after the producer",
    "start": "364860",
    "end": "369400"
  },
  {
    "text": "has placed it in the buffer, i.e., the consumer\ncan't read from an empty buffer.",
    "start": "369400",
    "end": "375250"
  },
  {
    "text": "What we still need to guarantee is that the\nproducer can't get too far ahead of the consumer.",
    "start": "375250",
    "end": "380780"
  },
  {
    "text": "Since the buffer holds at most N characters,\nthe producer can't send the (i+N)th character",
    "start": "380780",
    "end": "386770"
  },
  {
    "text": "until the consumer has read the i_th character.",
    "start": "386770",
    "end": "391270"
  },
  {
    "text": "Here we've added a second semaphore, SPACES,\nto manage the number of spaces in the buffer.",
    "start": "391270",
    "end": "397110"
  },
  {
    "text": "Initially the buffer is empty, so it has N\nspaces.",
    "start": "397110",
    "end": "400400"
  },
  {
    "text": "The producer must WAIT for a space to be available.",
    "start": "400400",
    "end": "403669"
  },
  {
    "text": "When SPACES in non-zero, the WAIT succeeds,\ndecrementing the number of available spaces",
    "start": "403670",
    "end": "408800"
  },
  {
    "text": "by one and then the producer fills that space\nwith the next character.",
    "start": "408800",
    "end": "414440"
  },
  {
    "text": "The consumer signals the availability of another\nspace after it reads a character from the",
    "start": "414440",
    "end": "418720"
  },
  {
    "text": "buffer.",
    "start": "418720",
    "end": "420230"
  },
  {
    "text": "There's a nice symmetry here.",
    "start": "420230",
    "end": "422070"
  },
  {
    "text": "The producer consumes spaces and produces\ncharacters.",
    "start": "422070",
    "end": "426320"
  },
  {
    "text": "The consumer consumes characters and produces\nspaces.",
    "start": "426320",
    "end": "431400"
  },
  {
    "text": "Semaphores are used to track the availability\nof both resources (i.e., characters and spaces),",
    "start": "431400",
    "end": "437370"
  },
  {
    "text": "synchronizing the execution of the producer\nand consumer.",
    "start": "437370",
    "end": "440650"
  },
  {
    "text": "This works great when there is a single producer\nprocess and a single consumer process.",
    "start": "440650",
    "end": "445960"
  },
  {
    "text": "Next we'll think about what will happen if\nwe have multiple producers and multiple consumers.",
    "start": "445960",
    "end": "450530"
  }
]