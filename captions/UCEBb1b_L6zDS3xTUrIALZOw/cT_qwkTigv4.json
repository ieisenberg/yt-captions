[
  {
    "start": "0",
    "end": "95000"
  },
  {
    "text": "so we've been talking about p and np",
    "start": "24800",
    "end": "30400"
  },
  {
    "text": "and the time complexity classes and today we're going to shift gear",
    "start": "30400",
    "end": "35520"
  },
  {
    "text": "we're going to talk about uh space complexity or memory complexity as uh",
    "start": "35520",
    "end": "40559"
  },
  {
    "text": "space complexity is what complexity theorists uh usually refer refer to it as",
    "start": "40559",
    "end": "47039"
  },
  {
    "text": "um and um you know time and space are the two basic most basic measures of complexity",
    "start": "47039",
    "end": "54719"
  },
  {
    "text": "that uh that we consider and so um today we're going to look at the the second of",
    "start": "54719",
    "end": "61840"
  },
  {
    "text": "those two um the space complexity uh so we will",
    "start": "61840",
    "end": "66880"
  },
  {
    "text": "define a lot of this is going to be by analogy with what",
    "start": "66880",
    "end": "72960"
  },
  {
    "text": "we did for time complexity we're going to define complexity classes we'll talk about polynomial space and non-deterministic",
    "start": "72960",
    "end": "79439"
  },
  {
    "text": "polynomial space um see how those classes connect up with the time",
    "start": "79439",
    "end": "84799"
  },
  {
    "text": "complexity classes that we've already defined and we'll do some examples that will be setting us up for our",
    "start": "84799",
    "end": "91759"
  },
  {
    "text": "further discussion about space complexity next week so",
    "start": "91759",
    "end": "96799"
  },
  {
    "text": "we're going to talk about first of all what it means for a turing machine",
    "start": "96799",
    "end": "102320"
  },
  {
    "text": "to run in a certain certain amount of space and that's simply going to be counting",
    "start": "102320",
    "end": "109360"
  },
  {
    "text": "the number of cells that the turing machine scans over",
    "start": "109360",
    "end": "114960"
  },
  {
    "text": "on its tape during the course of its computation you might be reading that cell might be writing on that cell but",
    "start": "114960",
    "end": "121759"
  },
  {
    "text": "the total number of cells that it actually um visits",
    "start": "121759",
    "end": "126880"
  },
  {
    "text": "um of course visiting the same cell multiple times only counts once because",
    "start": "126880",
    "end": "132560"
  },
  {
    "text": "space can be reused but we're going to count the number of cells that the turing machine visits",
    "start": "132560",
    "end": "139760"
  },
  {
    "text": "during the course of its computation and then define the space utilization by analogy with",
    "start": "139760",
    "end": "146400"
  },
  {
    "text": "what we did for time so we'll say a turing machine runs in a certain amount of space f n we'll say",
    "start": "146400",
    "end": "153200"
  },
  {
    "text": "if first of all it has to always hold so all of the machines are deciders and it uses at most",
    "start": "153200",
    "end": "160720"
  },
  {
    "text": "that much uh tape that much that it visits that number of cells",
    "start": "160720",
    "end": "167920"
  },
  {
    "text": "on all inputs of length n so just like we said for time complexity",
    "start": "167920",
    "end": "173519"
  },
  {
    "text": "the machine has to run within t of n time on all inputs",
    "start": "173519",
    "end": "179200"
  },
  {
    "text": "of length n here it's going to have to use at most f of n cells",
    "start": "179200",
    "end": "184720"
  },
  {
    "text": "on all inputs of length n in order for it to be running in space f n",
    "start": "184720",
    "end": "191280"
  },
  {
    "text": "okay a tape cell is simply a little square of the tape where you can write a",
    "start": "192319",
    "end": "197360"
  },
  {
    "text": "symbol okay answering a question that good question that came in from the chat",
    "start": "197360",
    "end": "203360"
  },
  {
    "text": "so um you know uh i'm not sure we have i have a",
    "start": "203360",
    "end": "209440"
  },
  {
    "text": "diagram for that but the um in each of the little squares on the tape are going to be the tape cells",
    "start": "209440",
    "end": "216000"
  },
  {
    "text": "generally we're going to be sticking to one tape turing machines but i'll make a brief remark about multi-tape during machining shortly",
    "start": "216000",
    "end": "223360"
  },
  {
    "text": "better take cells sorry uh on all inputs of length n",
    "start": "223360",
    "end": "228799"
  },
  {
    "text": "uh so return now okay so that's for deterministic uh turing machines",
    "start": "228799",
    "end": "234720"
  },
  {
    "text": "for non-deterministic touring machines we will say uh that it",
    "start": "234720",
    "end": "241439"
  },
  {
    "text": "also runs in a certain amount of space so for a",
    "start": "241439",
    "end": "247040"
  },
  {
    "text": "non-deterministic machine it has to use",
    "start": "247040",
    "end": "254000"
  },
  {
    "text": "at most that many tape cells on each branch of its computation",
    "start": "254000",
    "end": "261600"
  },
  {
    "text": "separately you don't add up the total number of cells used across all of the",
    "start": "261600",
    "end": "267120"
  },
  {
    "text": "branches just like we don't add up the total amount of time the machine uses across all of its branches for the",
    "start": "267120",
    "end": "273440"
  },
  {
    "text": "machine to be running in say space n squared it has to be using it most n squared",
    "start": "273440",
    "end": "280479"
  },
  {
    "text": "cells or order n squared cells on each one of its non-deterministic branches",
    "start": "280479",
    "end": "286479"
  },
  {
    "text": "separately there might be exponentially many branches but that's okay",
    "start": "286479",
    "end": "292000"
  },
  {
    "text": "but on each branch it's going to be using at most n squared or order n squared cells",
    "start": "292000",
    "end": "298720"
  },
  {
    "text": "importantly though that still the machine has to be a decider it's not enough to be looping forever",
    "start": "298720",
    "end": "306400"
  },
  {
    "text": "and using a small amount of space it could do that but that's not going to",
    "start": "306400",
    "end": "311440"
  },
  {
    "text": "count toward the machine contributing to its um space complexity of that language so for",
    "start": "311440",
    "end": "318880"
  },
  {
    "text": "the machine to be running in a certain amount of space we say that the machine holds on all of its branches",
    "start": "318880",
    "end": "325680"
  },
  {
    "text": "and each one of its branches uses at most that much space okay",
    "start": "325680",
    "end": "332639"
  },
  {
    "text": "again i can see lots of typos here thank you",
    "start": "332639",
    "end": "339440"
  },
  {
    "text": "um i messed this all up today uh some non-deterministic",
    "start": "339440",
    "end": "347639"
  },
  {
    "text": "good thank you um",
    "start": "352639",
    "end": "357600"
  },
  {
    "text": "all right so we're going to define the space complexity classes analogous to",
    "start": "359199",
    "end": "364560"
  },
  {
    "text": "this time complexity classes so these are languages that you can do",
    "start": "364560",
    "end": "371039"
  },
  {
    "text": "with machines that run within that space bound so",
    "start": "371039",
    "end": "376960"
  },
  {
    "text": "um space f n you can think of space n squared um is all of the languages",
    "start": "376960",
    "end": "384560"
  },
  {
    "text": "that a deterministic one tape turing machine um can do within uh can decide within by using in",
    "start": "384560",
    "end": "393120"
  },
  {
    "text": "most n-squared tape cells or order n-squared tape cells similarly the non-deterministic space",
    "start": "393120",
    "end": "399520"
  },
  {
    "text": "complexity class are all of the languages that are non-deterministic one",
    "start": "399520",
    "end": "405199"
  },
  {
    "text": "tape turing machine can decide running within that amount of space",
    "start": "405199",
    "end": "410479"
  },
  {
    "text": "okay and lastly we have a polynomial space",
    "start": "410479",
    "end": "418000"
  },
  {
    "text": "so that's the union over all polynomial space bounds of the space complexity class and non-deterministic polynomial",
    "start": "418000",
    "end": "424400"
  },
  {
    "text": "space it's the same for all of the non-deterministic uh polynomial space classes",
    "start": "424400",
    "end": "430800"
  },
  {
    "text": "okay so i think i do have a check-in on this um",
    "start": "430800",
    "end": "436160"
  },
  {
    "text": "whoops which talks about uh multi-tape turing machines",
    "start": "436160",
    "end": "444479"
  },
  {
    "start": "437000",
    "end": "682000"
  },
  {
    "text": "so we could define space complexity for multi-tape turing machines just as we've been doing which",
    "start": "445039",
    "end": "450160"
  },
  {
    "text": "is we did for one tape turning machines and then define the associated space complexity classes and then define",
    "start": "450160",
    "end": "458560"
  },
  {
    "text": "the class p space but that would be for multi-turing machines",
    "start": "458560",
    "end": "464400"
  },
  {
    "text": "now for time uh remember that the class p",
    "start": "464400",
    "end": "470400"
  },
  {
    "text": "that you would get from multitape turing machines is exactly the same as the class p that we got for one tape turing",
    "start": "470400",
    "end": "476080"
  },
  {
    "text": "machines um that was part of the nice quality of the class p it's robust in",
    "start": "476080",
    "end": "483280"
  },
  {
    "text": "that sense a natural so how about for p space um what do you think do we get the same class",
    "start": "483280",
    "end": "488879"
  },
  {
    "text": "um no maybe or yes because we can convert a multi-tape",
    "start": "488879",
    "end": "495280"
  },
  {
    "text": "turning machine to a single tape turning machine by only squaring the amount of space um",
    "start": "495280",
    "end": "501039"
  },
  {
    "text": "that was what happened with time as you remember or maybe we can do even better converting a multi-tape touring machine",
    "start": "501039",
    "end": "506960"
  },
  {
    "text": "to single tape only increases it by by less by say a constant factor here",
    "start": "506960",
    "end": "512080"
  },
  {
    "text": "remember how this is how we're defining space complexity for multi-tape turing machines we're taking the sum of all the",
    "start": "512080",
    "end": "518240"
  },
  {
    "text": "cells used on all of the tapes",
    "start": "518240",
    "end": "522159"
  },
  {
    "text": "all right so let's launch that poll and see what you think",
    "start": "523599",
    "end": "529839"
  },
  {
    "text": "hopefully this is not too hard um",
    "start": "530160",
    "end": "535680"
  },
  {
    "text": "yeah i think most of you have got the idea though some of you are i worry sometimes about some of the",
    "start": "535680",
    "end": "541600"
  },
  {
    "text": "answers that i get i don't know if you're serious or you're really com",
    "start": "541600",
    "end": "546640"
  },
  {
    "text": "badly confused but anyway let's",
    "start": "546640",
    "end": "552160"
  },
  {
    "text": "let's wrap this up another 10 seconds or so",
    "start": "552160",
    "end": "559519"
  },
  {
    "text": "let's call okay i'm gonna end it",
    "start": "561440",
    "end": "567839"
  },
  {
    "text": "yeah i mean i uh i think",
    "start": "570240",
    "end": "575600"
  },
  {
    "text": "answer b is a reasonable answer in fact uh answer c is the correct answer uh you",
    "start": "575600",
    "end": "581040"
  },
  {
    "text": "can if you just look at the same simulation from multi-tape to single",
    "start": "581040",
    "end": "586399"
  },
  {
    "text": "tape and how much space overhead that simulation introduces",
    "start": "586399",
    "end": "593040"
  },
  {
    "text": "um it's only linear you're basically just taking all of the tapes of the multitape machine and writing them down",
    "start": "593040",
    "end": "599279"
  },
  {
    "text": "next to one another obviously you know ignoring all the infinite infinitely many blanks we're",
    "start": "599279",
    "end": "604399"
  },
  {
    "text": "just taking the active portion of the tapes writing them down next to each other so the total amount used is just",
    "start": "604399",
    "end": "610160"
  },
  {
    "text": "going to be the sum on the single tape of what was used on each of the",
    "start": "610160",
    "end": "616480"
  },
  {
    "text": "individual multitapes in the original machine so there's just a linear cost overhead",
    "start": "616480",
    "end": "624079"
  },
  {
    "text": "by converting from multi-tape to single tape when you're looking at space the amount of memory that's used",
    "start": "624079",
    "end": "630800"
  },
  {
    "text": "for time remember there was some additional overhead because we had to be uh updating um where the virtual heads",
    "start": "630800",
    "end": "638320"
  },
  {
    "text": "were and that uh cost extra time to move our single head around to do that but",
    "start": "638320",
    "end": "645279"
  },
  {
    "text": "for space the amount of time that's introduced is not as irrelevant we're only looking at the amount of memory and so that's a um",
    "start": "645279",
    "end": "653600"
  },
  {
    "text": "link going to just uh you know the overhead on that is very low",
    "start": "653600",
    "end": "659360"
  },
  {
    "text": "i would do worry about the folks who are answering a for example in this uh for this question you should be",
    "start": "659360",
    "end": "665360"
  },
  {
    "text": "rethinking what's what what's really going on here um uh so",
    "start": "665360",
    "end": "672160"
  },
  {
    "text": "okay um now let us um",
    "start": "672160",
    "end": "678079"
  },
  {
    "text": "move on here from from that to our next uh slide",
    "start": "678079",
    "end": "683120"
  },
  {
    "start": "682000",
    "end": "1300000"
  },
  {
    "text": "and compare uh the time and space complexity classes",
    "start": "683120",
    "end": "689279"
  },
  {
    "text": "you know or time and space complexity how do they relate to one another and so first of all we're going to point",
    "start": "689279",
    "end": "696800"
  },
  {
    "text": "out um let's uh start out",
    "start": "696800",
    "end": "703360"
  },
  {
    "text": "here t of n is going to be represent some bound either on the time or the amount of space and generally at least up till",
    "start": "703360",
    "end": "710800"
  },
  {
    "text": "this point um and most of the mostly going forward though there's going to be one",
    "start": "710800",
    "end": "716399"
  },
  {
    "text": "variation on that a little later but we're going to be focusing on uh bounds which are at least",
    "start": "716399",
    "end": "722959"
  },
  {
    "text": "big enough to either read the input or at least hold the input that's why we",
    "start": "722959",
    "end": "728399"
  },
  {
    "text": "we refer to t of n being at least n um",
    "start": "728399",
    "end": "733440"
  },
  {
    "text": "so now if we look at uh the time complexity class t of n",
    "start": "733440",
    "end": "738959"
  },
  {
    "text": "think of that t of n like typically would be say n squared maybe",
    "start": "738959",
    "end": "744560"
  },
  {
    "text": "and the things that you can do in n squared time i claim you can also do in n squared",
    "start": "744560",
    "end": "752079"
  },
  {
    "text": "space um and basically um it's just using the very same machine",
    "start": "752079",
    "end": "760000"
  },
  {
    "text": "suppose you have a machine that runs in n squared time how could it possibly use say n square n cubed space if it's",
    "start": "760000",
    "end": "767360"
  },
  {
    "text": "running only in n square time even if it tries to use as much state as it possibly could as many tape cells as",
    "start": "767360",
    "end": "774720"
  },
  {
    "text": "it possibly could and you know sending its head cruising out um into the blind portion of the",
    "start": "774720",
    "end": "781600"
  },
  {
    "text": "tape chewing up as much uh as many tape cells as it possibly can in in n squared",
    "start": "781600",
    "end": "787279"
  },
  {
    "text": "time it's only going to be able to use n squared space so the very same machine",
    "start": "787279",
    "end": "792720"
  },
  {
    "text": "that runs in t of n time is also going to run in t event space um so this",
    "start": "792720",
    "end": "799440"
  },
  {
    "text": "containment here follows you know really without doing um",
    "start": "799440",
    "end": "805519"
  },
  {
    "text": "any work at all um so just re restating that here um a",
    "start": "805519",
    "end": "811680"
  },
  {
    "text": "uh turing machine that runs in t of n steps cannot use more than t of n tape cells",
    "start": "811680",
    "end": "817279"
  },
  {
    "text": "okay so right now we're focusing on we could prove some analogous statements about",
    "start": "817279",
    "end": "822639"
  },
  {
    "text": "non-deterministic complexity um but let's focus here on the deterministic complexity",
    "start": "822639",
    "end": "829279"
  },
  {
    "text": "now let's look at going the other direction suppose we have a turing machine that uses t of n",
    "start": "829279",
    "end": "836160"
  },
  {
    "text": "space now does that immediately imply it's using only t of n and time",
    "start": "836160",
    "end": "842959"
  },
  {
    "text": "and that's uh not so clear and in fact probably not true because",
    "start": "842959",
    "end": "848639"
  },
  {
    "text": "a space appears to be much more powerful than time and within a certain amount of",
    "start": "848639",
    "end": "854000"
  },
  {
    "text": "space you can run for much longer than that same amount of time um so how long",
    "start": "854000",
    "end": "859279"
  },
  {
    "text": "could you run so what which you can show is that if you're running uh within",
    "start": "859279",
    "end": "867680"
  },
  {
    "text": "a certain amount of space t event space let's say n squared space for example",
    "start": "867680",
    "end": "873519"
  },
  {
    "text": "the amount of time you could use is going to be exponential in n squared a 2",
    "start": "873519",
    "end": "879040"
  },
  {
    "text": "to the order n squared sometimes we also write that as",
    "start": "879040",
    "end": "885760"
  },
  {
    "text": "the union of c to the um n squared by sort of pulling down that constant here if you want well",
    "start": "885760",
    "end": "893120"
  },
  {
    "text": "it's also just to understand what we mean by order t of n up in the exponent it means that",
    "start": "893120",
    "end": "899199"
  },
  {
    "text": "the union over c to the t of n for all c either of these are just completely equivalent so whichever one you're more",
    "start": "899199",
    "end": "905440"
  },
  {
    "text": "comfortable with but why is this going to be true why does a turing machine that runs in say",
    "start": "905440",
    "end": "911839"
  },
  {
    "text": "um uh say n squared space",
    "start": "911839",
    "end": "917519"
  },
  {
    "text": "use at most uh uh",
    "start": "917519",
    "end": "922880"
  },
  {
    "text": "two to the order n squared time and that's because if you look at how",
    "start": "922880",
    "end": "928639"
  },
  {
    "text": "many possible configurations the machine can have remember that a configuration is is",
    "start": "928639",
    "end": "935279"
  },
  {
    "text": "essentially the contents of the tape this is also the head position and the state but the",
    "start": "935279",
    "end": "941519"
  },
  {
    "text": "dominant um uh the dominant aspect of a configuration",
    "start": "941519",
    "end": "946560"
  },
  {
    "text": "is the tape and so how many different tape contents can you have",
    "start": "946560",
    "end": "951680"
  },
  {
    "text": "well it's going to be exponential in the saw in the length of that tape because you know each cell can have some",
    "start": "951680",
    "end": "958720"
  },
  {
    "text": "fixed number of symbols in it if a machine repeats a configuration it's going to go",
    "start": "958720",
    "end": "965839"
  },
  {
    "text": "forever which we're forbidding um in uh you know in the in these machines",
    "start": "965839",
    "end": "971759"
  },
  {
    "text": "because they're all going to be deciders so they can only run um",
    "start": "971759",
    "end": "977040"
  },
  {
    "text": "uh for an amount of time which is bounded by the number of configurations that the machine can have",
    "start": "977040",
    "end": "983040"
  },
  {
    "text": "and so the machine can have you know if it's running in t of n space",
    "start": "983040",
    "end": "990880"
  },
  {
    "text": "then the amount of time that it could be running is going to be at most some constant to the t of",
    "start": "990880",
    "end": "996560"
  },
  {
    "text": "n or two to the order of t events saying the same thing uh uh you know unless it's going to",
    "start": "996560",
    "end": "1002880"
  },
  {
    "text": "repeat a configuration and end up looping okay so these are the two fundamental",
    "start": "1002880",
    "end": "1010079"
  },
  {
    "text": "connections between time and space time is contained within the same amount of space space is contained within that",
    "start": "1010079",
    "end": "1017440"
  },
  {
    "text": "amount of time exponentiated",
    "start": "1017440",
    "end": "1020880"
  },
  {
    "text": "okay um so one car reliary of that is that the class p is contained within p",
    "start": "1022880",
    "end": "1029120"
  },
  {
    "text": "space similarly np is going to be contained",
    "start": "1029120",
    "end": "1034640"
  },
  {
    "text": "within an np space for the very same reason",
    "start": "1034640",
    "end": "1039720"
  },
  {
    "text": "um okay is this um",
    "start": "1040240",
    "end": "1046000"
  },
  {
    "text": "understandable you know this is this is a good place or in a moment to have one more line to",
    "start": "1046000",
    "end": "1052720"
  },
  {
    "text": "to to to tell you about but leading into the next slide so",
    "start": "1052720",
    "end": "1058559"
  },
  {
    "text": "if you understand the definitions of what we've done so far",
    "start": "1058559",
    "end": "1063600"
  },
  {
    "text": "all of the the the this is a this is a fairly straightforward theorem and the and the corollary is immediate",
    "start": "1063600",
    "end": "1071120"
  },
  {
    "text": "okay so um anything that you can do in n squared time you can do an n squared space and",
    "start": "1071120",
    "end": "1076960"
  },
  {
    "text": "so for if anything you can do in polynomial time you can also do in polynomial space",
    "start": "1076960",
    "end": "1082000"
  },
  {
    "text": "yes c somebody's asking me you know what is the c c is essentially going to be the size of the tape alphabet",
    "start": "1082000",
    "end": "1089840"
  },
  {
    "text": "um because that's going to govern how many different configurations you have there's a slight extra uh factor it's",
    "start": "1089840",
    "end": "1095919"
  },
  {
    "text": "like you know slight extra factor for the tape um the the head location and also the",
    "start": "1095919",
    "end": "1102640"
  },
  {
    "text": "um state but uh the the main thing is going to be the number of tape symbols and the length of",
    "start": "1102640",
    "end": "1109120"
  },
  {
    "text": "the tape okay but what's going to come next is",
    "start": "1109120",
    "end": "1114160"
  },
  {
    "text": "we're going to prove something more powerful than this corollary that p is contained in p",
    "start": "1114160",
    "end": "1120240"
  },
  {
    "text": "space because not only is p contained in p space but np is also contained in p space and for that we're going to have",
    "start": "1120240",
    "end": "1126240"
  },
  {
    "text": "to do more work",
    "start": "1126240",
    "end": "1128960"
  },
  {
    "text": "so somebody's asking me about the number of states the number of states is going to be indep is fixed depend",
    "start": "1134480",
    "end": "1141520"
  },
  {
    "text": "upon depending on the machine only so um they it doesn't depend upon the",
    "start": "1141520",
    "end": "1148480"
  },
  {
    "text": "uh depend up on n so it could in most affect",
    "start": "1148480",
    "end": "1154880"
  },
  {
    "text": "the number configurations by a constant factor and those constant factors are going to",
    "start": "1154880",
    "end": "1160480"
  },
  {
    "text": "be absorbed within the definitions of these uh complexity classes because that's how we",
    "start": "1160480",
    "end": "1167200"
  },
  {
    "text": "would define them to be um uh you know",
    "start": "1167200",
    "end": "1173600"
  },
  {
    "text": "ignoring the constant factors",
    "start": "1173600",
    "end": "1177559"
  },
  {
    "text": "but you know why don't we just take a you know this may be a good place to pause for a second and see if there's",
    "start": "1180000",
    "end": "1187039"
  },
  {
    "text": "any questions because you know",
    "start": "1187039",
    "end": "1192799"
  },
  {
    "text": "i think for some of you this may be um straightforward but you know i i think it's less common to be measuring",
    "start": "1192799",
    "end": "1199520"
  },
  {
    "text": "thinking about uh the amount of memory as a complexity measure um so this is perhaps a little",
    "start": "1199520",
    "end": "1205679"
  },
  {
    "text": "less familiar some of you have seen measuring time and other classes but",
    "start": "1205679",
    "end": "1210720"
  },
  {
    "text": "remember measuring the the amount of space that the algorithm uses probably is a little less familiar and maybe that's it's",
    "start": "1210720",
    "end": "1217360"
  },
  {
    "text": "worth spending a moment or two answering questions about that",
    "start": "1217360",
    "end": "1222240"
  },
  {
    "text": "so i'm not sure i understand the question that just came in but i'll i'll read it out there is it possible that a",
    "start": "1228400",
    "end": "1233600"
  },
  {
    "text": "turing machine can loop forever absolutely but a turing machine that loops forever does not count as one that",
    "start": "1233600",
    "end": "1240080"
  },
  {
    "text": "runs within the space bound to run within the space bound the machine must halt on every input it has to be a",
    "start": "1240080",
    "end": "1246000"
  },
  {
    "text": "decider we're only considering deciders here so is it possible that turn machine can look forever yes isn't the turing",
    "start": "1246000",
    "end": "1252480"
  },
  {
    "text": "machine we're talking about a member of space and thus a decider",
    "start": "1252480",
    "end": "1257840"
  },
  {
    "text": "um not totally sure i understand the question but",
    "start": "1258320",
    "end": "1264159"
  },
  {
    "text": "if a turing machine is not",
    "start": "1264159",
    "end": "1269919"
  },
  {
    "text": "halting on all inputs it's not a decider that's our definition",
    "start": "1269919",
    "end": "1275280"
  },
  {
    "text": "um are we good and we're not getting very many questions here so i'm assuming",
    "start": "1275280",
    "end": "1280960"
  },
  {
    "text": "you're all with me or so lost you don't even know what to ask which is not good",
    "start": "1280960",
    "end": "1287360"
  },
  {
    "text": "um so be bold if you're confused throw our question out there because i'm i i",
    "start": "1287360",
    "end": "1293120"
  },
  {
    "text": "don't want to race through this lecture since it's it's maybe a little less familiar to some of you",
    "start": "1293120",
    "end": "1298400"
  },
  {
    "text": "okay so let's move on um as promised i'm going to show you now",
    "start": "1298400",
    "end": "1303679"
  },
  {
    "start": "1300000",
    "end": "1382000"
  },
  {
    "text": "that np not only p as is kind of happens immediately but np",
    "start": "1303679",
    "end": "1309120"
  },
  {
    "text": "is contained as a subset of a p space",
    "start": "1309120",
    "end": "1314080"
  },
  {
    "text": "so that is oh i didn't get a question i moved on before i answered this question",
    "start": "1314559",
    "end": "1320880"
  },
  {
    "text": "can i explain part two of the proof again part two okay let's just do it um",
    "start": "1320880",
    "end": "1326960"
  },
  {
    "text": "uh if something runs in a certain amount of space you have to just think about how",
    "start": "1326960",
    "end": "1332080"
  },
  {
    "text": "many different configurations the machine can have within that amount of space remember the configurations that we defined way back at lbas",
    "start": "1332080",
    "end": "1340080"
  },
  {
    "text": "um so the number of configurations the machine can have depends on how much space it's allocated",
    "start": "1340080",
    "end": "1346880"
  },
  {
    "text": "like the lbas they had a fixed number of configurations and we gave a calculation for that",
    "start": "1346880",
    "end": "1352480"
  },
  {
    "text": "um which is basically an exponential in the amount of space that's how many configurations the machine can have",
    "start": "1352480",
    "end": "1359760"
  },
  {
    "text": "so if the machine is not a is not looping if it's a decider it can never repeat a",
    "start": "1359760",
    "end": "1365679"
  },
  {
    "text": "configuration and that's going to tell us how long the machine can possibly run for",
    "start": "1365679",
    "end": "1372080"
  },
  {
    "text": "you know it's a it's it's it's important to understand i'm not sure if i knew how to say that",
    "start": "1372400",
    "end": "1377679"
  },
  {
    "text": "in any way be that different from what i said before but um okay getting back now",
    "start": "1377679",
    "end": "1384400"
  },
  {
    "start": "1382000",
    "end": "1593000"
  },
  {
    "text": "to proving that np is a subset of p space so now we're going to have to do something that's sort of in a way uh",
    "start": "1384400",
    "end": "1391520"
  },
  {
    "text": "different from what we did on the previous slide because now it's not going to be enough to work with",
    "start": "1391520",
    "end": "1398080"
  },
  {
    "text": "the same machine before when we were converting we're showing that a certain amount of time time classes contained",
    "start": "1398080",
    "end": "1404559"
  },
  {
    "text": "within a spaceclass it was by virtue of the very same machine by just showing that if it's running within a certain",
    "start": "1404559",
    "end": "1410799"
  },
  {
    "text": "amount of time then it has to be running within that same amount of sp within that same amount of space um",
    "start": "1410799",
    "end": "1417039"
  },
  {
    "text": "or in terms of the space it was in the x given a certain amount of space it has to be running that same machine within a",
    "start": "1417039",
    "end": "1422159"
  },
  {
    "text": "certain amount of time here we're going to mixing non-determinism and determinism so we're",
    "start": "1422159",
    "end": "1428559"
  },
  {
    "text": "going to have to take a machine that's in uh an np type machine a non-deterministic polynomial time",
    "start": "1428559",
    "end": "1434559"
  },
  {
    "text": "machine and convert it into a deterministic machine that doesn't use a whole lot of space",
    "start": "1434559",
    "end": "1440480"
  },
  {
    "text": "so there's a difference in the character of this theorem because we",
    "start": "1440480",
    "end": "1446559"
  },
  {
    "text": "have to introduce a new machine um and the way we're going to prove that um",
    "start": "1446559",
    "end": "1454159"
  },
  {
    "text": "i i'm going to take advantage of some of the things we've already shown to prove this one could also prove it a",
    "start": "1454320",
    "end": "1461679"
  },
  {
    "text": "little bit more directly and maybe it's worth understanding making sure you understand both proofs so the first thing i'm going to observe",
    "start": "1461679",
    "end": "1470000"
  },
  {
    "text": "is that sat our np complete language um the satisfiability language",
    "start": "1470159",
    "end": "1477279"
  },
  {
    "text": "itself is a member of p space",
    "start": "1477279",
    "end": "1481360"
  },
  {
    "text": "and the reason for that is um when you're given a formula",
    "start": "1482400",
    "end": "1488559"
  },
  {
    "text": "and now you want to test if that formula is satisfiable",
    "start": "1488559",
    "end": "1494200"
  },
  {
    "text": "one way to do it the most obvious way to do it is try all",
    "start": "1496080",
    "end": "1501440"
  },
  {
    "text": "assignments one by one and see if any of them satisfy the",
    "start": "1501440",
    "end": "1506960"
  },
  {
    "text": "formula now that's going to take a lot of time",
    "start": "1506960",
    "end": "1512000"
  },
  {
    "text": "but how much space does it use i have in mind reusing the space every",
    "start": "1512000",
    "end": "1518400"
  },
  {
    "text": "time we try the next assignment think of going through all of the assignments the way an odometer would",
    "start": "1518400",
    "end": "1525360"
  },
  {
    "text": "work just trying every possible assignment but reusing the space where you're going",
    "start": "1525360",
    "end": "1530880"
  },
  {
    "text": "to write that assignment down um sort of incrementing it like like a",
    "start": "1530880",
    "end": "1536559"
  },
  {
    "text": "number um written in binary if you wish um going through all the possible",
    "start": "1536559",
    "end": "1542000"
  },
  {
    "text": "assignments every time you get in the next assignment you plug it into the formula and see if the formula is",
    "start": "1542000",
    "end": "1547360"
  },
  {
    "text": "satisfied if it is then you can accept immediately if not you go on to the next assignment and only when you've gone",
    "start": "1547360",
    "end": "1553200"
  },
  {
    "text": "through all the assignments in that way and none of them have satisfied the formula then you can reject so how much",
    "start": "1553200",
    "end": "1559440"
  },
  {
    "text": "space does that use that doesn't use a whole lot of space because you're reusing the space",
    "start": "1559440",
    "end": "1564880"
  },
  {
    "text": "um to write down one assignment after the next okay it's only going to be",
    "start": "1564880",
    "end": "1571039"
  },
  {
    "text": "using an amount of space which is big enough to hold an assignment which is basically linear because it's the size",
    "start": "1571039",
    "end": "1577440"
  },
  {
    "text": "of the number of variables of the formula so that's going to be a linear amount of space to solve the satisfiability",
    "start": "1577440",
    "end": "1585120"
  },
  {
    "text": "problem and so the satisfiability problem is certainly in p space um",
    "start": "1585120",
    "end": "1591520"
  },
  {
    "text": "step one step two is we're going to take advantage",
    "start": "1591520",
    "end": "1597760"
  },
  {
    "text": "of what we know about reducibility um so if a is polynomial time reducible",
    "start": "1597760",
    "end": "1604480"
  },
  {
    "text": "to b we've already commented we didn't say this exactly in this way but you know it's still going to follow that anything",
    "start": "1604480",
    "end": "1611440"
  },
  {
    "text": "you can do in a certain amount of time you can also do in that amount of space because there's a very same machine um",
    "start": "1611440",
    "end": "1618799"
  },
  {
    "text": "doesn't can't use any more space than the amount of time it was allocated",
    "start": "1618799",
    "end": "1624320"
  },
  {
    "text": "so if a is polynomial time reducible to b it's also going to be reducible in polynomial space the a polynomial space",
    "start": "1624320",
    "end": "1631279"
  },
  {
    "text": "machine could do the reduction so that means if a",
    "start": "1631279",
    "end": "1637600"
  },
  {
    "text": "is polynomial time reducible to b and b is in polynomial space then a is also in polynomial space",
    "start": "1637600",
    "end": "1645200"
  },
  {
    "text": "but we know because satisfiability is np-complete that every language of np",
    "start": "1645520",
    "end": "1652480"
  },
  {
    "text": "is reducible to sat so put sat in place of b every np language is polynomial",
    "start": "1652480",
    "end": "1658559"
  },
  {
    "text": "time reducible to sat and we now know that sat is in p space so therefore every language in np is in",
    "start": "1658559",
    "end": "1666399"
  },
  {
    "text": "p space because they're all polynomial time reducible to set",
    "start": "1666399",
    "end": "1671200"
  },
  {
    "text": "okay so just by using some of the technology we've developed",
    "start": "1671919",
    "end": "1677200"
  },
  {
    "text": "namely the notion of completeness sort of shows us some of its power that if",
    "start": "1677200",
    "end": "1682240"
  },
  {
    "text": "you want to conclude something about an entire class an entire complexity class if you have a",
    "start": "1682240",
    "end": "1688640"
  },
  {
    "text": "complete problem for that complexity class often it's enough just to work with the complete problem and then",
    "start": "1688640",
    "end": "1694080"
  },
  {
    "text": "everything else by virtue of the reducibility is going to inherit the same property it doesn't",
    "start": "1694080",
    "end": "1699679"
  },
  {
    "text": "work in all cases but in many of the cases as long as the um you know the reducibility can be computed by the um",
    "start": "1699679",
    "end": "1708240"
  },
  {
    "text": "by the the type of procedure you're working with um then you can then it follows",
    "start": "1708240",
    "end": "1714480"
  },
  {
    "text": "uh you know you could also prove this more directly i think it's in some ways a little clumsy or a little bit um",
    "start": "1714480",
    "end": "1720640"
  },
  {
    "text": "less elegant but you can say well let me just take my um",
    "start": "1720640",
    "end": "1726159"
  },
  {
    "text": "uh take a language that's in np it has a non-deterministic polynomial time",
    "start": "1726159",
    "end": "1731279"
  },
  {
    "text": "algorithm and then give a deterministic polynomial space algorithm simulates that",
    "start": "1731279",
    "end": "1738399"
  },
  {
    "text": "np algorithm just by going through all the different branches but making sure that going through all those different",
    "start": "1738399",
    "end": "1744320"
  },
  {
    "text": "branches you're reusing the space and not using new space every time you're going through a different branch and you",
    "start": "1744320",
    "end": "1749600"
  },
  {
    "text": "can arrange things if you're just a little bit careful to do it that way so you could give a direct simulation in",
    "start": "1749600",
    "end": "1755760"
  },
  {
    "text": "polynomial space of any uh np turing machine so that i mean that's also completely satisfactory but",
    "start": "1755760",
    "end": "1762240"
  },
  {
    "text": "i think this is a little more elegant so now let's also this",
    "start": "1762240",
    "end": "1767840"
  },
  {
    "start": "1764000",
    "end": "1838000"
  },
  {
    "text": "furthermore is going to allow us to conclude some additional languages are in p space",
    "start": "1767840",
    "end": "1775600"
  },
  {
    "text": "let's define a class we have not yet seen though maybe you've seen this i think we've talked about this this",
    "start": "1775600",
    "end": "1781520"
  },
  {
    "text": "notion of uh co before um i think we talked about co-touring reducib",
    "start": "1781520",
    "end": "1788640"
  },
  {
    "text": "co touring recognizable um so uh the class",
    "start": "1788640",
    "end": "1794960"
  },
  {
    "text": "those are the class of languages whose complements are turning recognizable and the same for co and p",
    "start": "1794960",
    "end": "1801200"
  },
  {
    "text": "this is the class of languages whose complements are in np",
    "start": "1801200",
    "end": "1807320"
  },
  {
    "text": "so you take the complement of every language that's in np and now you get all the languages that are in this class",
    "start": "1808080",
    "end": "1813760"
  },
  {
    "text": "co np complement of np um",
    "start": "1813760",
    "end": "1818960"
  },
  {
    "text": "so for example the complement of the hand handpath problem so all the graphs which don't have",
    "start": "1818960",
    "end": "1825360"
  },
  {
    "text": "hamiltonian paths from uh you know esthetic so the the the non-hamiltonian",
    "start": "1825360",
    "end": "1831520"
  },
  {
    "text": "uh graph uh the non-hamiltonian path problem that's a cohen p problem",
    "start": "1831520",
    "end": "1838880"
  },
  {
    "start": "1838000",
    "end": "1987000"
  },
  {
    "text": "um well here's a language we haven't i'm not going to define uh as in terms of its complement it's a",
    "start": "1838880",
    "end": "1845360"
  },
  {
    "text": "the tautology problem so these are the problem language",
    "start": "1845360",
    "end": "1850799"
  },
  {
    "text": "these are all formulas or these are the formulas where all assignments satisfy",
    "start": "1850799",
    "end": "1856399"
  },
  {
    "text": "the formula all assignments make the formula true um so a tautology is a statement that's",
    "start": "1856399",
    "end": "1863679"
  },
  {
    "text": "always true so no matter how you plug in the variables",
    "start": "1863679",
    "end": "1871200"
  },
  {
    "text": "so the the tautology tautology language is in co-np",
    "start": "1871200",
    "end": "1877039"
  },
  {
    "text": "um because it's complement which is the non-tautologies those are the formulas for which",
    "start": "1877039",
    "end": "1883840"
  },
  {
    "text": "um there's some assignment which makes it false so that's going to be clearly an np language",
    "start": "1883840",
    "end": "1889279"
  },
  {
    "text": "so tautology is a co and p language okay",
    "start": "1889279",
    "end": "1895039"
  },
  {
    "text": "um now one thing that we get immediately from the theorem as a",
    "start": "1895039",
    "end": "1901519"
  },
  {
    "text": "corollary really should write this as a corollary is that cohen p is also a subset of p space",
    "start": "1901519",
    "end": "1910000"
  },
  {
    "text": "and the reason for that is and this is something that you know it's um",
    "start": "1910000",
    "end": "1915440"
  },
  {
    "text": "again easy but make sure you understand it is that",
    "start": "1915440",
    "end": "1920559"
  },
  {
    "text": "p space itself is closed under complement because it is",
    "start": "1920559",
    "end": "1926159"
  },
  {
    "text": "defined in terms of deterministic machines and deterministic machines you can always flip the answer",
    "start": "1926159",
    "end": "1932799"
  },
  {
    "text": "and get a machine of the same type which um",
    "start": "1932799",
    "end": "1938320"
  },
  {
    "text": "uh uh will decide the complementary language so for deterministic machines",
    "start": "1938320",
    "end": "1945840"
  },
  {
    "text": "deterministic deciders i should say um you can always flip the answer",
    "start": "1945840",
    "end": "1951279"
  },
  {
    "text": "um now so here we have anything that's in p",
    "start": "1951279",
    "end": "1957760"
  },
  {
    "text": "space it has a deterministic polynomial time a polynomial space uh machine and so its",
    "start": "1957760",
    "end": "1965120"
  },
  {
    "text": "complementary line which is also going to be in p space so p space and cos base p co p space are equal and so that's why",
    "start": "1965120",
    "end": "1971919"
  },
  {
    "text": "coen p uh is going to be in p space it's going to be a subset of p space",
    "start": "1971919",
    "end": "1979600"
  },
  {
    "text": "okay i hope that's not getting mixed up by all of the different uh",
    "start": "1979600",
    "end": "1985600"
  },
  {
    "text": "alphabet soup here but um uh here is maybe a picture maybe that'll be helpful uh of how the world looks for",
    "start": "1985600",
    "end": "1994000"
  },
  {
    "start": "1987000",
    "end": "2424000"
  },
  {
    "text": "the time and spice uh complexity classes um so far",
    "start": "1994000",
    "end": "1999279"
  },
  {
    "text": "uh so we have p is a subset of np it's also a subset of",
    "start": "1999279",
    "end": "2004799"
  },
  {
    "text": "co np um again for the same reason that p and co",
    "start": "2004799",
    "end": "2010640"
  },
  {
    "text": "p are equal we never never even really talk about copy because it's the same as p",
    "start": "2010640",
    "end": "2016960"
  },
  {
    "text": "um uh but np and cohen p that those are two classes where we don't know whether they're equal or not",
    "start": "2017279",
    "end": "2025120"
  },
  {
    "text": "uh because an np machine um you know you can't necessarily",
    "start": "2025120",
    "end": "2030480"
  },
  {
    "text": "complement the behavior of an np machine and end up with an np machine",
    "start": "2030480",
    "end": "2036159"
  },
  {
    "text": "so a question how do we know that cohen p is a complete class of problems i",
    "start": "2036159",
    "end": "2041840"
  },
  {
    "text": "didn't say that there's anything about completeness and cohen p is just a collection of languages i'm not saying",
    "start": "2041840",
    "end": "2047440"
  },
  {
    "text": "it's anything any particular feature about it in fact it does have a complete problem just like np has a complete",
    "start": "2047440",
    "end": "2055118"
  },
  {
    "text": "complete problem the complements and i'm not going to prove this right here but though it's pretty",
    "start": "2055119",
    "end": "2060158"
  },
  {
    "text": "straightforward complements of all the np-complete languages are going to be co-np-complete languages",
    "start": "2060159",
    "end": "2066079"
  },
  {
    "text": "um and um so",
    "start": "2066079",
    "end": "2072079"
  },
  {
    "text": "uh so i'm getting so okay so let's i will answer some of the questions",
    "start": "2072079",
    "end": "2077839"
  },
  {
    "text": "about or about possible alternate worlds this is how we believe the world looks like",
    "start": "2077839",
    "end": "2084560"
  },
  {
    "text": "with each one of these regions being separated from one another including this little",
    "start": "2084560",
    "end": "2089760"
  },
  {
    "text": "corner of the world here np and intersect co-np which is not um there",
    "start": "2089760",
    "end": "2095040"
  },
  {
    "text": "might be languages in here which are not in p and we actually believe there are such languages but again all of this is",
    "start": "2095040",
    "end": "2100839"
  },
  {
    "text": "conjectural um and even whether p and p space are the same or different is an un",
    "start": "2100839",
    "end": "2106640"
  },
  {
    "text": "is an open question we don't even know the answer to that which is perhaps even more shocking that",
    "start": "2106640",
    "end": "2112079"
  },
  {
    "text": "we don't know how to solve pnn you know proved p different from np that we don't know how to prove p different",
    "start": "2112079",
    "end": "2118160"
  },
  {
    "text": "from p space which seems to be a much bigger class uh it would be incredible that anything you can do with a polynomial amount of",
    "start": "2118160",
    "end": "2124560"
  },
  {
    "text": "space uh you can also do with a polynomial amount of time um but",
    "start": "2124560",
    "end": "2130400"
  },
  {
    "text": "i don't know how to prove that they're different and in fact so this is how the world could look",
    "start": "2130400",
    "end": "2136240"
  },
  {
    "text": "um everything could collapse down p could equal p space",
    "start": "2136240",
    "end": "2142320"
  },
  {
    "text": "and then all of these classes would be the same um and i should also mention i don't have",
    "start": "2142320",
    "end": "2147520"
  },
  {
    "text": "this as another diagram here but just to answer you know there's also another pos there's other possibilities for example",
    "start": "2147520",
    "end": "2154960"
  },
  {
    "text": "um p could equal np without it being equal to p space",
    "start": "2154960",
    "end": "2160640"
  },
  {
    "text": "and then you'd have a different looking venn diagram here where there'd be just two classes p np and co np would all be",
    "start": "2160640",
    "end": "2167119"
  },
  {
    "text": "the same p space would be different that's possible at least we have no idea",
    "start": "2167119",
    "end": "2172800"
  },
  {
    "text": "uh had a head of m a a lot of these things can collapse in in various ways",
    "start": "2172800",
    "end": "2179359"
  },
  {
    "text": "um and you just have to make sure that you you know there are some collapses that obviously could not uh occur like p",
    "start": "2179359",
    "end": "2187760"
  },
  {
    "text": "if p equals np it's also going to equal cohen p um so you can't get some there are",
    "start": "2187760",
    "end": "2192800"
  },
  {
    "text": "obviously some crazy collapses which could not uh happen that p collapsing p and np",
    "start": "2192800",
    "end": "2198560"
  },
  {
    "text": "being the same but different from cohen b that can't happen but um",
    "start": "2198560",
    "end": "2204480"
  },
  {
    "text": "avoiding some obvious contradictory situations everything else is possible",
    "start": "2205119",
    "end": "2211200"
  },
  {
    "text": "so somebody said so well here's a question let me just answer a few of these did we use the completeness of co np to",
    "start": "2211200",
    "end": "2218000"
  },
  {
    "text": "show that cohen p is a subset of co-p space no we didn't do",
    "start": "2218000",
    "end": "2223520"
  },
  {
    "text": "it that way we showed that uh co-np",
    "start": "2223520",
    "end": "2230400"
  },
  {
    "text": "um uh",
    "start": "2230400",
    "end": "2234800"
  },
  {
    "text": "well let's see didn't we is that fair um",
    "start": "2235520",
    "end": "2240079"
  },
  {
    "text": "well i i suppose you know np of subset of p space immediately implies because",
    "start": "2241520",
    "end": "2247599"
  },
  {
    "text": "he's complementing both sides that cohen p is a subset of copy space",
    "start": "2247599",
    "end": "2252880"
  },
  {
    "text": "so you don't have to deal with the complete problems on the other side that's too complicated to get into here",
    "start": "2252880",
    "end": "2259040"
  },
  {
    "text": "but you don't you don't need to talk about co-empty complete problems um though",
    "start": "2259040",
    "end": "2264400"
  },
  {
    "text": "again those are very simple to to get from np complete problems um",
    "start": "2264400",
    "end": "2269520"
  },
  {
    "text": "let's see what else is here uh are there np complete problems that are",
    "start": "2269520",
    "end": "2275280"
  },
  {
    "text": "in co-np so the answer to that is no not as far as well i mean there would be",
    "start": "2275280",
    "end": "2281520"
  },
  {
    "text": "if there was an np complete problem in co-np then all of np would be in cohen p",
    "start": "2281520",
    "end": "2287119"
  },
  {
    "text": "and they would be equal so we suspect the np complete problems are not in co and p but don't know how",
    "start": "2287119",
    "end": "2293280"
  },
  {
    "text": "to prove that so why is tautology",
    "start": "2293280",
    "end": "2299280"
  },
  {
    "text": "in cohen p so here is tautology sits in this class here the reason is that its",
    "start": "2299280",
    "end": "2304400"
  },
  {
    "text": "complementary language is an np the complement of tautology are the languages where there is some",
    "start": "2304400",
    "end": "2312160"
  },
  {
    "text": "assignment which makes the formula false so with a with an np machine you can",
    "start": "2312160",
    "end": "2317839"
  },
  {
    "text": "just guess that assignment and check that it makes the formula false so the complement of tautology",
    "start": "2317839",
    "end": "2324320"
  },
  {
    "text": "is an np language and so tautology is a co-np language um",
    "start": "2324320",
    "end": "2331520"
  },
  {
    "text": "okay uh so somebody's asking about p space and np-space and how do those relate to one",
    "start": "2332640",
    "end": "2338880"
  },
  {
    "text": "another so that's looking ahead um to what we're going to be doing next week",
    "start": "2338880",
    "end": "2344240"
  },
  {
    "text": "but i'll give you a preview an old but at the time surprising",
    "start": "2344240",
    "end": "2351280"
  },
  {
    "text": "theorem was that piece base and np space actually are equal",
    "start": "2351280",
    "end": "2357200"
  },
  {
    "text": "so there this analogy with time breaks down so polynomial space and non-deterministic polynomial space do",
    "start": "2357200",
    "end": "2363359"
  },
  {
    "text": "turn out to be equal the most obvious way of proving of",
    "start": "2363359",
    "end": "2368480"
  },
  {
    "text": "trying to simulate an np an np space machine would be give you an exponential",
    "start": "2368480",
    "end": "2374400"
  },
  {
    "text": "deterministic space algorithm uh so we'll go through that but there is an algorithm which",
    "start": "2374400",
    "end": "2380240"
  },
  {
    "text": "collapses non-deterministic polynomial space down to deterministic polynomial space which",
    "start": "2380240",
    "end": "2385520"
  },
  {
    "text": "again at the time was kind of surprising uh",
    "start": "2385520",
    "end": "2390480"
  },
  {
    "text": "and so last question i'll take here is there some equivalent concept to the idea of a certificate for co-np",
    "start": "2391280",
    "end": "2397839"
  },
  {
    "text": "yes there is a notion of a certificate but now it's going to be a certificate that you're not in the language instead",
    "start": "2397839",
    "end": "2404079"
  },
  {
    "text": "of a certificate that you're in the language and then again works for the very same reason that we had certificates for np",
    "start": "2404079",
    "end": "2411040"
  },
  {
    "text": "languages where you had certificate for membership for cohenp you have a certificate for non-membership i don't",
    "start": "2411040",
    "end": "2416480"
  },
  {
    "text": "know if there's no other certificate for membership in co mp um okay so let's move on",
    "start": "2416480",
    "end": "2422400"
  },
  {
    "text": "um okay so now we're going to introduce we're going to look at some important",
    "start": "2422400",
    "end": "2428640"
  },
  {
    "start": "2424000",
    "end": "2462000"
  },
  {
    "text": "examples these are examples that we're going to um i'm going to give you two examples first one called tqbf",
    "start": "2428640",
    "end": "2434960"
  },
  {
    "text": "and then we're going to have a second example both of those we're going to",
    "start": "2434960",
    "end": "2440240"
  },
  {
    "text": "one of them is going to be an example of a problem in p space the other one is going to be an example of a problem in np space um and",
    "start": "2440240",
    "end": "2448720"
  },
  {
    "text": "it's these are going to be important languages for us so they're not just going to serve as examples for today but",
    "start": "2448720",
    "end": "2455040"
  },
  {
    "text": "you know um they're going to be useful languages for us later on so just keep that in mind as we're going through",
    "start": "2455040",
    "end": "2461599"
  },
  {
    "text": "going through it so to understand tqbf you have to understand um",
    "start": "2461599",
    "end": "2468800"
  },
  {
    "start": "2462000",
    "end": "2935000"
  },
  {
    "text": "what are called quantified boolean formulas or qbfs",
    "start": "2468800",
    "end": "2475279"
  },
  {
    "text": "so those are boolean formulas just like the ones we've been seeing we've been talking about with boolean variables and",
    "start": "2475839",
    "end": "2481280"
  },
  {
    "text": "the ands ors and and negated variables um but now you're going to add",
    "start": "2481280",
    "end": "2486560"
  },
  {
    "text": "quantifiers exist quantifiers for all quantifiers",
    "start": "2486560",
    "end": "2492319"
  },
  {
    "text": "if you haven't seen quantifiers you you need to go back and re you know review those um",
    "start": "2492319",
    "end": "2498160"
  },
  {
    "text": "you know i think that we already kind of introduced talked about them briefly earlier in the in the term",
    "start": "2498160",
    "end": "2503440"
  },
  {
    "text": "but um this is part of the basic math that you need to know",
    "start": "2503440",
    "end": "2509119"
  },
  {
    "text": "maybe you'll not comfortable with them you'll pick it up somewhat during the course of",
    "start": "2509440",
    "end": "2515520"
  },
  {
    "text": "the today's and the next few lectures but anyway uh so if you have a boolean formula formula",
    "start": "2515520",
    "end": "2522480"
  },
  {
    "text": "i'll give you some examples that has exist and for all quantifiers one of the requirement for it to be a qbf is that",
    "start": "2522480",
    "end": "2529359"
  },
  {
    "text": "all of the variables have to be within the scope of one of the quantifiers so you",
    "start": "2529359",
    "end": "2535119"
  },
  {
    "text": "all of the variables of the formula have to be quantified by one of the quantifiers and the we're",
    "start": "2535119",
    "end": "2540480"
  },
  {
    "text": "going to assume the quantifiers are in front are sort of leading quantifiers in front of the rest of the uh",
    "start": "2540480",
    "end": "2547520"
  },
  {
    "text": "of the of the rest of the expression so because all of the variables have",
    "start": "2547520",
    "end": "2555440"
  },
  {
    "text": "been quantified then a quantified boolean formula is going to be either true or false",
    "start": "2555440",
    "end": "2562240"
  },
  {
    "text": "following the meaning of the quantifiers um and again some of this may become",
    "start": "2562240",
    "end": "2568079"
  },
  {
    "text": "clear as we do some examples uh okay",
    "start": "2568079",
    "end": "2573839"
  },
  {
    "text": "so here are some examples coming so here is one here is a qbf",
    "start": "2573839",
    "end": "2579280"
  },
  {
    "text": "so all of the variables the which are just x and y they both appear in front",
    "start": "2579280",
    "end": "2584400"
  },
  {
    "text": "of uh next to some quantifier so that's going to be that's a requirement uh if",
    "start": "2584400",
    "end": "2589760"
  },
  {
    "text": "we have a qbf and",
    "start": "2589760",
    "end": "2595359"
  },
  {
    "text": "so this says for all x there exists a y this expression",
    "start": "2595359",
    "end": "2601040"
  },
  {
    "text": "holds so we need to kind of unpack that and understand what it means it says for",
    "start": "2601040",
    "end": "2606960"
  },
  {
    "text": "every x for every for every way of assigning a boolean value to x so",
    "start": "2606960",
    "end": "2614160"
  },
  {
    "text": "uh x is going to be either true or false there exists a way of assigning a boolean value for y to make this true",
    "start": "2614160",
    "end": "2620720"
  },
  {
    "text": "determined to to make the rest of the expression hold true",
    "start": "2620720",
    "end": "2626640"
  },
  {
    "text": "um and we'll go through that but let's let's uh contrast",
    "start": "2626640",
    "end": "2632560"
  },
  {
    "text": "that with the second example where i invert the order of the quantifiers",
    "start": "2632560",
    "end": "2637599"
  },
  {
    "text": "because that's going to be important for the meaning of the formula",
    "start": "2637599",
    "end": "2644240"
  },
  {
    "text": "so if i say for every x there is a y which makes this the rest of it true",
    "start": "2644319",
    "end": "2650000"
  },
  {
    "text": "that says well no matter how i set x there's going to be a way to set y to",
    "start": "2650000",
    "end": "2655040"
  },
  {
    "text": "make this true so that says well if i set x to true it's got to be some way to set y to make",
    "start": "2655040",
    "end": "2661200"
  },
  {
    "text": "to make the the the remaining expression hold um so if i said x to true what should i",
    "start": "2661200",
    "end": "2667040"
  },
  {
    "text": "set y to be um well uh",
    "start": "2667040",
    "end": "2672560"
  },
  {
    "text": "if i said x to be true and maybe i said y to be true well then this this clause is uh",
    "start": "2672560",
    "end": "2679520"
  },
  {
    "text": "satisfied but this clause won't be satisfied so setting y to be true is not it won't work but for every x i'm",
    "start": "2679520",
    "end": "2687520"
  },
  {
    "text": "only need to show there exists some y so if i pick x to be true i can say y to be",
    "start": "2687520",
    "end": "2692560"
  },
  {
    "text": "false um and now this one is this one holds and this one holds and the formula holds but",
    "start": "2692560",
    "end": "2699680"
  },
  {
    "text": "i have to make sure that that's going to be the case for both settings of x because i'm saying for all x so if i said x not",
    "start": "2699680",
    "end": "2706880"
  },
  {
    "text": "a false because i already showed that it works for x equal to true if i set x to false if i set now y to be true",
    "start": "2706880",
    "end": "2714800"
  },
  {
    "text": "this is going to hold so this expression is true",
    "start": "2714800",
    "end": "2721280"
  },
  {
    "text": "because it is the case that for every way to set x there is a way to set y so this part holds",
    "start": "2721280",
    "end": "2727520"
  },
  {
    "text": "let's look at let's compare that with this case is there some way to set y",
    "start": "2727520",
    "end": "2733440"
  },
  {
    "text": "such that no matter how i said x this is going to hold",
    "start": "2733440",
    "end": "2739280"
  },
  {
    "text": "and that's not going to be true no matter what you pick for y um there is going to be some way to set",
    "start": "2739280",
    "end": "2745520"
  },
  {
    "text": "x to make this false so does it resist a y such that every x makes us true no",
    "start": "2745520",
    "end": "2752160"
  },
  {
    "text": "if you try x equal to true it's not going to work if you try x equal to false it's not going to work",
    "start": "2752160",
    "end": "2758079"
  },
  {
    "text": "so this second fi2 expression quantified qbf is false",
    "start": "2758079",
    "end": "2765760"
  },
  {
    "text": "okay we're going to be playing with these a lot so it's important to understand",
    "start": "2765760",
    "end": "2771520"
  },
  {
    "text": "how this this quantification works um so tqbf",
    "start": "2771520",
    "end": "2778800"
  },
  {
    "text": "is the problem of testing whether one of these qbfs is true",
    "start": "2778800",
    "end": "2784000"
  },
  {
    "text": "or phrased as a language it's the collection of true qb true qbfs and that's where we get the um",
    "start": "2784000",
    "end": "2792640"
  },
  {
    "text": "uh the uh acronym tqbf not acronym the the the abbreviation tqbf for the true",
    "start": "2792640",
    "end": "2799680"
  },
  {
    "text": "quantified boolean formulas",
    "start": "2799680",
    "end": "2803559"
  },
  {
    "text": "so going back to that example p1 is a true quantified boolean formula and v2 is not",
    "start": "2805760",
    "end": "2811520"
  },
  {
    "text": "a true quantified building formula so that's why p1 is in the language v2 is not in the",
    "start": "2811520",
    "end": "2816880"
  },
  {
    "text": "language now our computational problem is to test",
    "start": "2816880",
    "end": "2823440"
  },
  {
    "text": "whether quantified boolean formulas are true or not and now we can do in polynomial space",
    "start": "2823440",
    "end": "2831119"
  },
  {
    "text": "oh there's a check in first i claim that sat is a special case of",
    "start": "2831119",
    "end": "2838880"
  },
  {
    "text": "tqbf why is that how can we",
    "start": "2838880",
    "end": "2844800"
  },
  {
    "text": "um think of sat as a special case if i give you a sat formula",
    "start": "2844800",
    "end": "2850880"
  },
  {
    "text": "how can i see that as also a tqbf problem if you want to test if that formula is",
    "start": "2850880",
    "end": "2856839"
  },
  {
    "text": "true what would you say remove all the quantifiers or add some quantifiers and what kind of",
    "start": "2856839",
    "end": "2863599"
  },
  {
    "text": "quantifiers maybe um uh how is sat",
    "start": "2863599",
    "end": "2869839"
  },
  {
    "text": "just testing a formula satisfiable a special case of this what i claim is a more general problem",
    "start": "2869839",
    "end": "2876400"
  },
  {
    "text": "of solving these tqbf problems",
    "start": "2876400",
    "end": "2881359"
  },
  {
    "text": "okay closing down let's call",
    "start": "2881599",
    "end": "2887838"
  },
  {
    "text": "yes indeed you know satisfiability so c is correct",
    "start": "2891119",
    "end": "2896880"
  },
  {
    "text": "when you're talking about a satisfiability problem you're saying is there a satisfying assignment another",
    "start": "2896880",
    "end": "2902559"
  },
  {
    "text": "way of writing that down is take the boolean formula represent take",
    "start": "2902559",
    "end": "2907599"
  },
  {
    "text": "that boolean formula and put exists in front of all the variables",
    "start": "2907599",
    "end": "2913040"
  },
  {
    "text": "saying the is there a is there exists does there exist a way to set x1 and x2 and x3 and x4 to make the formula",
    "start": "2913040",
    "end": "2921280"
  },
  {
    "text": "true make your formula hold so um sat is a special case by adding",
    "start": "2921280",
    "end": "2927440"
  },
  {
    "text": "exist quantifiers of a tqbf problem so c is correct",
    "start": "2927440",
    "end": "2934319"
  },
  {
    "text": "um okay so why is this problem in p space",
    "start": "2934319",
    "end": "2940480"
  },
  {
    "start": "2935000",
    "end": "3223000"
  },
  {
    "text": "as i claimed and for that we're going to give a simple recursive algorithm",
    "start": "2940480",
    "end": "2946880"
  },
  {
    "text": "um in any uh a quantified boolean formula now if you want to test if it's true or not you",
    "start": "2946880",
    "end": "2953440"
  },
  {
    "text": "know we're going to basically strip off the leading quantifiers",
    "start": "2953440",
    "end": "2959920"
  },
  {
    "text": "so if it's an exist quantifier we'll remove it and plug in true and false",
    "start": "2959920",
    "end": "2965520"
  },
  {
    "text": "associated to its variable and then solve those problems",
    "start": "2965520",
    "end": "2971920"
  },
  {
    "text": "recursively okay so this is just going to be a recursive procedure for solving",
    "start": "2971920",
    "end": "2980319"
  },
  {
    "text": "tqbf problems operating by stripping off the the quantifiers in front",
    "start": "2980319",
    "end": "2986400"
  },
  {
    "text": "and uh getting smaller and smaller formulas but now we're going to be plugging in uh values true and false um",
    "start": "2986400",
    "end": "2993280"
  },
  {
    "text": "instead of relying on the quantifier uh to um uh to to to uh",
    "start": "2993280",
    "end": "3000720"
  },
  {
    "text": "give us the meaning of the formula okay so first of all if there are no",
    "start": "3000720",
    "end": "3006079"
  },
  {
    "text": "quantifiers then there are no variables because all variables have to be bound within quantifiers and in that case the",
    "start": "3006079",
    "end": "3012400"
  },
  {
    "text": "uh that quantified boolean formula has to simply be the statement true or the",
    "start": "3012400",
    "end": "3017680"
  },
  {
    "text": "statement false and so you're going to output accordingly because that's all it can be if you have no variables",
    "start": "3017680",
    "end": "3023599"
  },
  {
    "text": "um if the formula starts with an exist quantifier",
    "start": "3023599",
    "end": "3029119"
  },
  {
    "text": "what you're going to do so here psi is the remainder of the formula after you strip off that exist",
    "start": "3029119",
    "end": "3035760"
  },
  {
    "text": "quantifier so you're going to evaluate psi now but take that variable that was bound by the",
    "start": "3035760",
    "end": "3041680"
  },
  {
    "text": "exist and just plug in true um or and false respectively so you're",
    "start": "3041680",
    "end": "3048319"
  },
  {
    "text": "going to get two two now new problems um",
    "start": "3048319",
    "end": "3053359"
  },
  {
    "text": "and uh run them uh and evaluate them using the same",
    "start": "3053520",
    "end": "3060000"
  },
  {
    "text": "procedure recursively uh but now with x plugged in for true plugged in for x and",
    "start": "3060000",
    "end": "3065760"
  },
  {
    "text": "also then with false plug in for x and",
    "start": "3065760",
    "end": "3071280"
  },
  {
    "text": "get the answers for those two cases and if either one of them ended up accepting",
    "start": "3071280",
    "end": "3076880"
  },
  {
    "text": "then you're going to accept because you know there exists a value uh for x which makes the whole thing",
    "start": "3076880",
    "end": "3083599"
  },
  {
    "text": "true because you you you just recursively",
    "start": "3083599",
    "end": "3088640"
  },
  {
    "text": "showed that there was such a value you know either true or false the thing is has accepted and if both of them fail",
    "start": "3088640",
    "end": "3094720"
  },
  {
    "text": "then you're going to reject and the very same idea if you have a for all quantifier",
    "start": "3094720",
    "end": "3100640"
  },
  {
    "text": "you're going to evaluate the remainder of the formula again with x equal to true and false so",
    "start": "3100640",
    "end": "3107440"
  },
  {
    "text": "as two subproblems but now you're going to require them both to accept because that's the",
    "start": "3107440",
    "end": "3113200"
  },
  {
    "text": "meaning of for all that both assignments to x have to make the formula true so",
    "start": "3113200",
    "end": "3118880"
  },
  {
    "text": "you're going to evaluate them recursively and accept both of them are true as determined by",
    "start": "3118880",
    "end": "3126000"
  },
  {
    "text": "your recursive your recursion okay so how much space does this use",
    "start": "3126000",
    "end": "3132160"
  },
  {
    "text": "um i'm not going to go through this in great detail but uh",
    "start": "3132160",
    "end": "3137200"
  },
  {
    "text": "each recursive level uses just a constant amount of space so every time you do a recursion you have to remember",
    "start": "3137200",
    "end": "3144240"
  },
  {
    "text": "that uh that value uh that assignment to that to that variable",
    "start": "3144240",
    "end": "3150559"
  },
  {
    "text": "you want to think of recursion as being implemented on a stack so you're just going to pop push on the stack that",
    "start": "3150559",
    "end": "3156559"
  },
  {
    "text": "value of that variable which is that true or false so basically it's one bit of memory uh",
    "start": "3156559",
    "end": "3163920"
  },
  {
    "text": "that you're going to require every time you're going down the recursion you just have to remember what um",
    "start": "3163920",
    "end": "3171280"
  },
  {
    "text": "you know which case you're working on whether x equal to true or x equal to false",
    "start": "3171280",
    "end": "3178839"
  },
  {
    "text": "uh and um so each recursive level just involves",
    "start": "3178839",
    "end": "3184079"
  },
  {
    "text": "constant space and the depth of the recursion you know how far how much might you have to remember well it's going to be at most",
    "start": "3184079",
    "end": "3190400"
  },
  {
    "text": "one for every quantifier um because that's you know you're stripping them off as you're going down the recursion so that's going to be at most",
    "start": "3190400",
    "end": "3197920"
  },
  {
    "text": "the length of the formula that says most of the number of quantifiers you can have and so",
    "start": "3197920",
    "end": "3203119"
  },
  {
    "text": "uh the total amount of space used by this is going to be um just n order n",
    "start": "3203119",
    "end": "3209520"
  },
  {
    "text": "okay so this problem is solved in uh in n space",
    "start": "3209520",
    "end": "3214880"
  },
  {
    "text": "and so that's why it's in p space okay i think that's all i wanted to say about this",
    "start": "3214880",
    "end": "3223838"
  },
  {
    "text": "okay if we've got the tape and a turning machine as memory in a modern computer what does the finite control correspond to the finite",
    "start": "3226319",
    "end": "3233440"
  },
  {
    "text": "control corresponds to just a finite additional memory um the tape is an",
    "start": "3233440",
    "end": "3238480"
  },
  {
    "text": "unlimited amount of memory uh or if we're putting bounds you know the amount of tape is going to be",
    "start": "3238480",
    "end": "3245119"
  },
  {
    "text": "say n squared memory where n is the length of n n is the length of the input so um",
    "start": "3245119",
    "end": "3251200"
  },
  {
    "text": "yeah they're both memories but um the finite control is",
    "start": "3251200",
    "end": "3256880"
  },
  {
    "text": "it doesn't grow with n so that's going to be just a you know some constant amount of memory",
    "start": "3256880",
    "end": "3263599"
  },
  {
    "text": "what would be the time complexity of this album time complexity would be bad it's going to be exponential so you'd",
    "start": "3263599",
    "end": "3269760"
  },
  {
    "text": "have to just double check that but it's going to be something like 2 to the",
    "start": "3269760",
    "end": "3275599"
  },
  {
    "text": "number of variables that you have two to the number of quantifiers plus some small overhead for evaluating",
    "start": "3275599",
    "end": "3281280"
  },
  {
    "text": "the formula multiple time but it's going to be exponential um",
    "start": "3281280",
    "end": "3287200"
  },
  {
    "text": "that's going to answer for you",
    "start": "3287359",
    "end": "3291480"
  },
  {
    "text": "so someone is asking going back again to co-np and how do we know there exists a problem in cohen p that is co and p",
    "start": "3297280",
    "end": "3303599"
  },
  {
    "text": "complete we didn't define even what that means but uh co-np-complete",
    "start": "3303599",
    "end": "3308880"
  },
  {
    "text": "means we're going to start seeing other examples of completeness for different",
    "start": "3308880",
    "end": "3314319"
  },
  {
    "text": "complexity classes in particular one of one thing that's going to happen on tuesdays we'll see",
    "start": "3314319",
    "end": "3320400"
  },
  {
    "text": "a problem that's complete for p space in fact it's going to be tq tqbf",
    "start": "3320400",
    "end": "3327200"
  },
  {
    "text": "sort of looking ahead is going to be a piece based complete problem",
    "start": "3327200",
    "end": "3332559"
  },
  {
    "text": "but we even have to have the notion of what we mean by uh complete for these other",
    "start": "3332559",
    "end": "3338079"
  },
  {
    "text": "classes and in the case of co np a problem is co and p complete if it's in in co np and",
    "start": "3338079",
    "end": "3345760"
  },
  {
    "text": "every other co np problem is polynomial time reducible to it so just exactly the same as we have for np just plugging in",
    "start": "3345760",
    "end": "3352400"
  },
  {
    "text": "co np instead and",
    "start": "3352400",
    "end": "3357119"
  },
  {
    "text": "you just have to work through the logic but it's pretty straightforward the complement of any np complete",
    "start": "3358960",
    "end": "3365680"
  },
  {
    "text": "problem is going to be a co-np-complete problem using that definition um",
    "start": "3365680",
    "end": "3371119"
  },
  {
    "text": "uh so just i i don't want to go through through that those simple steps but",
    "start": "3371119",
    "end": "3377680"
  },
  {
    "text": "you just can go and verify that offline that that's going to be true and i think we're going to probably talk about that later in the",
    "start": "3377680",
    "end": "3384079"
  },
  {
    "text": "semester too um so another question how does the tqbf",
    "start": "3384079",
    "end": "3392799"
  },
  {
    "text": "algorithm ah that is a good question here um",
    "start": "3392799",
    "end": "3400400"
  },
  {
    "text": "why is the tqbf algorithm that i just described in p space doesn't the thing",
    "start": "3400400",
    "end": "3406079"
  },
  {
    "text": "every time i'm doing the recursion doesn't things branch out so that i end up using exponential space",
    "start": "3406079",
    "end": "3412000"
  },
  {
    "text": "critical thing which i don't i actually don't think i mentioned which i think is important to observe is that when you're doing those",
    "start": "3412000",
    "end": "3418720"
  },
  {
    "text": "two recursive calls when you set x equal to true and set x equal to false",
    "start": "3418720",
    "end": "3424240"
  },
  {
    "text": "after you've determined that the the answer for when you set x equal to true now you reuse that space",
    "start": "3424240",
    "end": "3431040"
  },
  {
    "text": "that very same space to test what happens when you have x equal to false",
    "start": "3431040",
    "end": "3436079"
  },
  {
    "text": "so that's that's the power of space which makes it different from time is that it can be reused",
    "start": "3436079",
    "end": "3441839"
  },
  {
    "text": "so after you've got the answer for when you have x equal to true now you free up that space that's no longer needed",
    "start": "3441839",
    "end": "3448559"
  },
  {
    "text": "anymore you just remember the answer and now you see what happens when you have x equal to false using that same space so",
    "start": "3448559",
    "end": "3454160"
  },
  {
    "text": "there's no exponential blow-up that's that's an important point i'm glad you gave me the chance to to say it",
    "start": "3454160",
    "end": "3461760"
  },
  {
    "text": "so somebody's asking about defining time of an undetermined turing machine to the maximum",
    "start": "3461760",
    "end": "3467119"
  },
  {
    "text": "time of each branch well that's sort of what we have done maybe i don't understand your question but you'll have to ask it",
    "start": "3467119",
    "end": "3472960"
  },
  {
    "text": "after after um afterwards because i want to i don't want to be delaying any more",
    "start": "3472960",
    "end": "3478400"
  },
  {
    "text": "than we that we have so we're going to we're going to go back",
    "start": "3478400",
    "end": "3484319"
  },
  {
    "text": "and um move on here",
    "start": "3484319",
    "end": "3489400"
  },
  {
    "start": "3490000",
    "end": "3599000"
  },
  {
    "text": "okay second example um and this one is a kind of a fun",
    "start": "3492000",
    "end": "3497119"
  },
  {
    "text": "example but it's also going to be an important one for us um it's called the latter problem",
    "start": "3497119",
    "end": "3502480"
  },
  {
    "text": "now so you may have seen something called the word ladder but in general a ladder is a sequence of",
    "start": "3502480",
    "end": "3508079"
  },
  {
    "text": "strings which are all of the same length but where consecutive strings differ in",
    "start": "3508079",
    "end": "3513440"
  },
  {
    "text": "a single symbol um so",
    "start": "3513440",
    "end": "3519040"
  },
  {
    "text": "so for example if you have a word letter for english it's going to be a ladder where all the words are english all of",
    "start": "3520720",
    "end": "3526559"
  },
  {
    "text": "the um strings are english words so here's an example",
    "start": "3526559",
    "end": "3532240"
  },
  {
    "text": "i thought i fixed that okay here is here is a",
    "start": "3532400",
    "end": "3537520"
  },
  {
    "text": "a word ladder for english and maybe you've seen these suppose i want to try to get",
    "start": "3538880",
    "end": "3545119"
  },
  {
    "text": "from work to play but all of the intermediate uh",
    "start": "3545119",
    "end": "3551280"
  },
  {
    "text": "strings should be english words with four letters that differ from their previous one in",
    "start": "3551280",
    "end": "3558640"
  },
  {
    "text": "only a single letter and i want to somehow change the word work to the word play so i don't know if",
    "start": "3558640",
    "end": "3565680"
  },
  {
    "text": "you know so for example i can change work to pork so here's just one letter difference",
    "start": "3565680",
    "end": "3572880"
  },
  {
    "text": "um which looks like it's an improvement because now i have the i'm agree an agreement on the play",
    "start": "3572880",
    "end": "3579119"
  },
  {
    "text": "um but sometimes you know you might change it you might have a good change and then you have to undo it later which i think actually happens here um",
    "start": "3579119",
    "end": "3586880"
  },
  {
    "text": "so pork then this port but then we gave up that progress we made port",
    "start": "3586880",
    "end": "3593359"
  },
  {
    "text": "to sort to suit to slot you understand again you",
    "start": "3593359",
    "end": "3599119"
  },
  {
    "text": "understand what i'm doing here each case i'm just changing a single letter but all of these words all of these have",
    "start": "3599119",
    "end": "3605599"
  },
  {
    "text": "to be legitimate english words of length four plot",
    "start": "3605599",
    "end": "3610960"
  },
  {
    "text": "ploy and then play okay so that's what a word lighter in english",
    "start": "3610960",
    "end": "3617760"
  },
  {
    "text": "would be of course you can do it in different languages and i'm going to talk about it abstractly where",
    "start": "3617760",
    "end": "3623280"
  },
  {
    "text": "instead of having any natural human language as being the uh test for a word",
    "start": "3623280",
    "end": "3630319"
  },
  {
    "text": "b for being a string being legitimate i'm going to define a um",
    "start": "3630319",
    "end": "3636640"
  },
  {
    "text": "any old language uh let's let's say it's a is going to be some language some set of strings and",
    "start": "3636640",
    "end": "3643680"
  },
  {
    "text": "the and the those are going to be the legal strings that can be in the ladder",
    "start": "3643680",
    "end": "3648880"
  },
  {
    "text": "so a ladder in a is a lot of strings that are all members of a um",
    "start": "3648880",
    "end": "3654319"
  },
  {
    "text": "and now the the latter dfa problem is",
    "start": "3654319",
    "end": "3660480"
  },
  {
    "text": "a is going to be the language of some dfa so i'm giving you b",
    "start": "3660480",
    "end": "3666798"
  },
  {
    "text": "um and so i want and then a start string and an n string so this is like work and",
    "start": "3667119",
    "end": "3672400"
  },
  {
    "text": "play u and v are like work and play so where b is a dfa and its language has a ladder that goes",
    "start": "3672400",
    "end": "3680319"
  },
  {
    "text": "from u to v here are the intermediate strings",
    "start": "3680319",
    "end": "3685640"
  },
  {
    "text": "okay and",
    "start": "3686079",
    "end": "3690960"
  },
  {
    "text": "all right um so um",
    "start": "3696720",
    "end": "3702319"
  },
  {
    "text": "i'm going to show you that this latter dfa problem is in np space",
    "start": "3702319",
    "end": "3707520"
  },
  {
    "text": "okay and it's not this is not super hard because basically uh well",
    "start": "3707520",
    "end": "3713119"
  },
  {
    "text": "let's just actually look at the slide here the way it's going to work is it's not deterministically going to guess that",
    "start": "3713119",
    "end": "3719599"
  },
  {
    "text": "sequence from u to v so if i if i'm trying to get from work to play imagine those i'm going to be",
    "start": "3719599",
    "end": "3725440"
  },
  {
    "text": "using this as um you know in place of the uh the",
    "start": "3725440",
    "end": "3731839"
  },
  {
    "text": "of the language of my fine art automaton just because this is easier to talk about but imagine these are being strings that are that are accepted by",
    "start": "3731839",
    "end": "3738880"
  },
  {
    "text": "that that dfa um so now i'm trying to get from my string u to the string v and i want to",
    "start": "3738880",
    "end": "3745920"
  },
  {
    "text": "test can i get there by some uh changing one letter at a time but",
    "start": "3745920",
    "end": "3751280"
  },
  {
    "text": "staying as strings that are accepted by the dfa um",
    "start": "3751280",
    "end": "3757440"
  },
  {
    "text": "i'm just going to guess that sequence non-deterministically",
    "start": "3757440",
    "end": "3762480"
  },
  {
    "text": "but i have to make sure careful of two things um i don't want to guess the sequence solid",
    "start": "3762480",
    "end": "3768079"
  },
  {
    "text": "in advance because that sequence might be exponentially long you have to calculate how long it could",
    "start": "3768079",
    "end": "3774319"
  },
  {
    "text": "possibly be but you might might you know you might change to one symbol then change it to a different",
    "start": "3774319",
    "end": "3780559"
  },
  {
    "text": "symbol then change it back to that original symbol or so the the only bound that you can write",
    "start": "3780559",
    "end": "3786480"
  },
  {
    "text": "down is the number of possible strings that you can have of that length um so it might be exponential uh you",
    "start": "3786480",
    "end": "3793039"
  },
  {
    "text": "don't want to write down that whole thing because that's going to be exceeding your space bound",
    "start": "3793039",
    "end": "3798799"
  },
  {
    "text": "but what you don't need to you're just going to guess them one at a time forgetting about the previous ones just",
    "start": "3798799",
    "end": "3805039"
  },
  {
    "text": "keep guessing the next uh one in the sequence and only remembering that one",
    "start": "3805039",
    "end": "3811039"
  },
  {
    "text": "and seeing if uh you're ever get to the the string your you your target string",
    "start": "3811039",
    "end": "3818079"
  },
  {
    "text": "but then when you do that you have to make sure that you don't end up going forever",
    "start": "3818079",
    "end": "3823119"
  },
  {
    "text": "um because that's not allowed in your uh in your um",
    "start": "3823119",
    "end": "3828880"
  },
  {
    "text": "in your np space algorithm uh so you're going to have to keep a counter",
    "start": "3828880",
    "end": "3835440"
  },
  {
    "text": "to make sure that if you go beyond that bound which is going to be the maximum number of strings you could possibly",
    "start": "3835440",
    "end": "3841520"
  },
  {
    "text": "have then you're going to just shot that branch of the non-determinism off you're going to just reject on that",
    "start": "3841520",
    "end": "3847359"
  },
  {
    "text": "branch okay so here is i'm going to write to say this here",
    "start": "3847359",
    "end": "3853119"
  },
  {
    "text": "here is my non-deterministic uh you know polynomial space procedure",
    "start": "3853359",
    "end": "3859119"
  },
  {
    "text": "um i'm given my language my dfab and my start and end strings",
    "start": "3859119",
    "end": "3865280"
  },
  {
    "text": "i let y equal the start string write down the length of my strings that",
    "start": "3865280",
    "end": "3871760"
  },
  {
    "text": "i'm going to have to keep in mind all the way through and then i'm going to just repeat the",
    "start": "3871760",
    "end": "3877119"
  },
  {
    "text": "following t times where t is the maximum length as can be which is the the size",
    "start": "3877119",
    "end": "3883039"
  },
  {
    "text": "of the alphabet of these of these things to the nth power where m is the length of those strings",
    "start": "3883039",
    "end": "3889920"
  },
  {
    "text": "uh and i'm just going to not deterministically change one symbol at a time",
    "start": "3889920",
    "end": "3895200"
  },
  {
    "text": "making sure that i'm staying in the language so rejecting immediately if that change",
    "start": "3895200",
    "end": "3901280"
  },
  {
    "text": "introduced a string outside the language and accepting if that string that i get",
    "start": "3901280",
    "end": "3907039"
  },
  {
    "text": "by changing that single symbol is now my target",
    "start": "3907039",
    "end": "3912960"
  },
  {
    "text": "um and if i've gone through my bound and i haven't managed to reach",
    "start": "3912960",
    "end": "3919520"
  },
  {
    "text": "that target then i'm just going to reject",
    "start": "3919520",
    "end": "3923838"
  },
  {
    "text": "and we just have to observe that this algorithm doesn't use too much space",
    "start": "3925680",
    "end": "3932160"
  },
  {
    "text": "so if you imagine what we need here here's my input unv which is of length n",
    "start": "3932160",
    "end": "3938160"
  },
  {
    "text": "and the total amount of space i just have to remember the current y",
    "start": "3938160",
    "end": "3943119"
  },
  {
    "text": "um and um and also my counter t my counter up to t",
    "start": "3944400",
    "end": "3951839"
  },
  {
    "text": "so um each of those can be written down with it with uh essentially in space so",
    "start": "3951839",
    "end": "3958319"
  },
  {
    "text": "the total amount is going to be order n space um so that shows that uh this latter dfa",
    "start": "3958319",
    "end": "3965839"
  },
  {
    "text": "problem is actually in non-deterministic space n not deterministic linear space",
    "start": "3965839",
    "end": "3972559"
  },
  {
    "text": "um and what we're going to show next um",
    "start": "3972640",
    "end": "3978640"
  },
  {
    "text": "is that this language is actually solvable in deterministic space and this is kind of perhaps a bit of a surprise",
    "start": "3978640",
    "end": "3986400"
  },
  {
    "text": "okay um so what's the size of the input the size",
    "start": "3986400",
    "end": "3993119"
  },
  {
    "text": "of the input is uh going to be what it takes to write",
    "start": "3993119",
    "end": "3998319"
  },
  {
    "text": "down the uh the dfa and the uh the two strings u and v um",
    "start": "3998319",
    "end": "4005200"
  },
  {
    "text": "so uh um here",
    "start": "4005200",
    "end": "4010720"
  },
  {
    "text": "uh yeah i mean i i should have also included as part of the input the the description of b itself",
    "start": "4010720",
    "end": "4017520"
  },
  {
    "text": "but um uh so but that's going to even work in my",
    "start": "4017520",
    "end": "4023039"
  },
  {
    "text": "favor because um so this this is slightly incorrect because b itself has to appear as part",
    "start": "4023039",
    "end": "4029520"
  },
  {
    "text": "of the input so apologies for that but still the amount of uh space used is",
    "start": "4029520",
    "end": "4034960"
  },
  {
    "text": "going to be order n um because these are going to be actually less than n",
    "start": "4034960",
    "end": "4040319"
  },
  {
    "text": "um so let me jump be so we don't run out of time for the lecture we can save additional",
    "start": "4040319",
    "end": "4047520"
  },
  {
    "text": "questions for afterward i'll stick around for a few minutes i just really have one more slide here um and that is proving this",
    "start": "4047520",
    "end": "4054799"
  },
  {
    "text": "theorem that ladder can be done in deterministically in polynomial space and that's going to be",
    "start": "4054799",
    "end": "4059920"
  },
  {
    "text": "important as a kind of a preview of what we're going to be doing on tuesday",
    "start": "4059920",
    "end": "4066960"
  },
  {
    "text": "and you know if this goes a little fast i'll go over",
    "start": "4068240",
    "end": "4073280"
  },
  {
    "text": "it again on tuesday so let's just see how it goes so i'm going to show the same ladder dfa problem",
    "start": "4073280",
    "end": "4080400"
  },
  {
    "text": "is solvable deterministically in polynomial space and but this time it's",
    "start": "4080480",
    "end": "4086160"
  },
  {
    "text": "going to be in squared space instead of non-deterministically in end space so there's going to be some cost but it's",
    "start": "4086160",
    "end": "4092079"
  },
  {
    "text": "only going to be a squaring so remember what the problem is you know i'm giving you that dfa",
    "start": "4092079",
    "end": "4099120"
  },
  {
    "text": "and giving you two strings in the language of that dfa and i want to know can i get",
    "start": "4099120",
    "end": "4104640"
  },
  {
    "text": "from one the first string to the second string by changing one symbol at a time but always",
    "start": "4104640",
    "end": "4111278"
  },
  {
    "text": "making sure that the strings are along the way are accepted by that dfa",
    "start": "4111279",
    "end": "4119080"
  },
  {
    "text": "okay so i'm going to introduce notation saying can i get from string u to v by a ladder",
    "start": "4119199",
    "end": "4125920"
  },
  {
    "text": "but now i'm limiting how many steps i can take so i'm writing u to v but doing",
    "start": "4125920",
    "end": "4131278"
  },
  {
    "text": "it only within b b intermediate strings b steps so is there a ladder from u to v of",
    "start": "4131279",
    "end": "4137199"
  },
  {
    "text": "length at most b that's what it means to write this notation down",
    "start": "4137199",
    "end": "4142880"
  },
  {
    "text": "so i'm going to uh give you a recursive procedure to solve the bounded ladder problem where it's",
    "start": "4143600",
    "end": "4150238"
  },
  {
    "text": "just like the before but now i'm going to say not only does there a ladder from u",
    "start": "4150239",
    "end": "4155359"
  },
  {
    "text": "to v but there's a ladder of length at most b",
    "start": "4155359",
    "end": "4160678"
  },
  {
    "text": "okay so that's going to allow me to solve the latter problem recursively by",
    "start": "4162400",
    "end": "4167440"
  },
  {
    "text": "shrinking the size of b um",
    "start": "4167440",
    "end": "4173719"
  },
  {
    "text": "uh okay so um",
    "start": "4174239",
    "end": "4180880"
  },
  {
    "text": "let's how is this going to work uh um",
    "start": "4180880",
    "end": "4186960"
  },
  {
    "text": "well here's going to be the idea so here is my u and my v",
    "start": "4186960",
    "end": "4193199"
  },
  {
    "text": "um and the procedure is going to work by instead of non-deterministically guessing",
    "start": "4193440",
    "end": "4200640"
  },
  {
    "text": "the steps that take me from work to play because i don't have non-determinism anymore i have to operate",
    "start": "4200640",
    "end": "4205679"
  },
  {
    "text": "deterministically what i'm going to do is work instead of",
    "start": "4205679",
    "end": "4211760"
  },
  {
    "text": "um i'm going to instead of going from looking at the very first",
    "start": "4211760",
    "end": "4217840"
  },
  {
    "text": "thing that follows from from you i'm going to jump right to the middle and try every possible middle string",
    "start": "4217840",
    "end": "4227040"
  },
  {
    "text": "oh i have no clue even what that middle string should look like so i'm going to try all possibilities in the sequence",
    "start": "4228239",
    "end": "4235920"
  },
  {
    "text": "but then i'm going to use once i have one of those possibilities i'm going to recursively try to solve the problem by",
    "start": "4236000",
    "end": "4242400"
  },
  {
    "text": "splitting that now but i'm now going to divide that b value in half",
    "start": "4242400",
    "end": "4247760"
  },
  {
    "text": "okay so here is the maximum value we can have this is the t from the previous slide which is the maximum length um",
    "start": "4247760",
    "end": "4255199"
  },
  {
    "text": "and i uh here i'm going to try every possible",
    "start": "4255199",
    "end": "4260480"
  },
  {
    "text": "intermediate let's start off with a all a's um",
    "start": "4260480",
    "end": "4265600"
  },
  {
    "text": "and now i cut the problem in half can i get from work to all a's and all a's to",
    "start": "4265600",
    "end": "4271040"
  },
  {
    "text": "play well very first thing i should check is making sure that all a's in fact is a string uh in the language",
    "start": "4271040",
    "end": "4278000"
  },
  {
    "text": "and if we're thinking of the languages sort of you know matching it's like english all a's is not",
    "start": "4278000",
    "end": "4283520"
  },
  {
    "text": "a legitimate word so you try the next one aab and this is how it's going to work",
    "start": "4283520",
    "end": "4288800"
  },
  {
    "text": "but now you're going to be instead of using english you're going to feed it into the finite automaton just one after the next trying every possibility until",
    "start": "4288800",
    "end": "4296400"
  },
  {
    "text": "you know like a clock like a like an odometer trying them all",
    "start": "4296400",
    "end": "4302320"
  },
  {
    "text": "until eventually you find a string that's in the language sort of i'm representing that by an",
    "start": "4302320",
    "end": "4308320"
  },
  {
    "text": "english word able maybe that's the first word that you would have found and then once you find that you're gonna",
    "start": "4308320",
    "end": "4315120"
  },
  {
    "text": "can i get from work to able and able to play recursively reusing the space again",
    "start": "4315120",
    "end": "4322480"
  },
  {
    "text": "but now where the bound is cut in half okay so that's that's the whole album",
    "start": "4322480",
    "end": "4328640"
  },
  {
    "text": "so um just going through it quickly and we'll do this again um",
    "start": "4328640",
    "end": "4336320"
  },
  {
    "text": "uh here is my dfa going from u to v within b steps",
    "start": "4336320",
    "end": "4343440"
  },
  {
    "text": "first of all oh this is bad uh t should not be one b this should be b if b is one um",
    "start": "4343440",
    "end": "4351360"
  },
  {
    "text": "can i quickly fix that uh so these t's should be b's my apologies",
    "start": "4351360",
    "end": "4357440"
  },
  {
    "text": "um so if t is one if b is one",
    "start": "4357440",
    "end": "4363440"
  },
  {
    "text": "then they have to d then i'm only allowed a a ladder of length one now i just check at the media directly do you",
    "start": "4363440",
    "end": "4370159"
  },
  {
    "text": "and v different in just in one place if yes then accept else i reject",
    "start": "4370159",
    "end": "4377199"
  },
  {
    "text": "uh if it's greater than one now i'm going to do this procedure that i described i'm going to try for each",
    "start": "4377199",
    "end": "4383280"
  },
  {
    "text": "possible w uh in the middle",
    "start": "4383280",
    "end": "4388320"
  },
  {
    "text": "um i'm gonna",
    "start": "4388320",
    "end": "4392000"
  },
  {
    "text": "try that w test whether i can get from u to w in half the number of steps and from w to v in half the number of steps",
    "start": "4393600",
    "end": "4400640"
  },
  {
    "text": "and except if they both accept um and if trying all possible w's",
    "start": "4400640",
    "end": "4407199"
  },
  {
    "text": "none of them work then i know that there's no way to get from u to v and b steps and so then i reject",
    "start": "4407199",
    "end": "4413360"
  },
  {
    "text": "okay and then to do the original problem which was not the bounded ladder problem i just do the",
    "start": "4413360",
    "end": "4420239"
  },
  {
    "text": "bounded line i do the bounded ladder problem where i put in t which is the maximum",
    "start": "4420239",
    "end": "4425679"
  },
  {
    "text": "possible length that it could be to get from work to play out to get from u to v okay so the space analysis",
    "start": "4425679",
    "end": "4433120"
  },
  {
    "text": "um well i'm kind of out of time here so we're going to go through this again next time",
    "start": "4433120",
    "end": "4438800"
  },
  {
    "text": "we have a very quick so let me skip that uh analysis i'll review this next time i have a very",
    "start": "4438800",
    "end": "4445600"
  },
  {
    "text": "quick check-in i just want to get to you get get here um find an english word",
    "start": "4445600",
    "end": "4451440"
  },
  {
    "text": "letter that connects the word must to the word vote",
    "start": "4451440",
    "end": "4457280"
  },
  {
    "text": "you can think about that i mean i it's not that hard to come up with such a word ladder uh so i encourage you",
    "start": "4457280",
    "end": "4464159"
  },
  {
    "text": "to think about that also to think about voting which is also important that's coming up",
    "start": "4464159",
    "end": "4471120"
  },
  {
    "text": "um okay another five seconds here",
    "start": "4471760",
    "end": "4479280"
  },
  {
    "text": "um okay i'm gonna end this so make sure you",
    "start": "4479280",
    "end": "4485360"
  },
  {
    "text": "get your credit for the check-in",
    "start": "4485360",
    "end": "4489280"
  },
  {
    "text": "okay so uh we're at the end of the hour um into the end of the night",
    "start": "4492080",
    "end": "4498640"
  },
  {
    "text": "end of the 80 minutes anyway uh so this is what we did today um",
    "start": "4498640",
    "end": "4504080"
  },
  {
    "text": "and looks like i ran over by a minute so my apologies and but i'll stick around here um if any",
    "start": "4504080",
    "end": "4511199"
  },
  {
    "text": "of you have any further questions so but otherwise uh lecture is over uh see you guys",
    "start": "4511199",
    "end": "4517360"
  },
  {
    "text": "do we know anything about ladder for other kinds of languages i i don't know",
    "start": "4517360",
    "end": "4522840"
  },
  {
    "text": "um uh interesting question whether you can say uh some nice things about the",
    "start": "4522840",
    "end": "4527920"
  },
  {
    "text": "latter um the latter um problem in other in other",
    "start": "4527920",
    "end": "4533360"
  },
  {
    "text": "cases i don't know okay why is t here this value of t",
    "start": "4533360",
    "end": "4540640"
  },
  {
    "text": "sigma to the m the maximum length of a um of a word letter so what did",
    "start": "4540640",
    "end": "4547520"
  },
  {
    "text": "what first of all we have to m maybe i should have written this down m is the the the length",
    "start": "4547520",
    "end": "4554400"
  },
  {
    "text": "of the words uh sigma is the alphabet",
    "start": "4554400",
    "end": "4559920"
  },
  {
    "text": "of the words um so the number of possible different words is sigma to the m",
    "start": "4559920",
    "end": "4566960"
  },
  {
    "text": "these are all possible words that there could possibly be so uh",
    "start": "4566960",
    "end": "4572480"
  },
  {
    "text": "there's no reason in a word like or ever to repeat the word because you can just find a shorter word ladder that",
    "start": "4572480",
    "end": "4578640"
  },
  {
    "text": "still does the job of connecting to connecting a start in the end",
    "start": "4578640",
    "end": "4584320"
  },
  {
    "text": "so you can just cut out that middle part um the repeated part",
    "start": "4584320",
    "end": "4589840"
  },
  {
    "text": "so in that case the longest possible",
    "start": "4589840",
    "end": "4595040"
  },
  {
    "text": "word letter is going to be the total number of possible words that you can have which is going to be sigma the size",
    "start": "4595040",
    "end": "4601280"
  },
  {
    "text": "of sigma to the m explain again why cohen p is a subset of p space",
    "start": "4601280",
    "end": "4608719"
  },
  {
    "text": "um well maybe i'll say it this way",
    "start": "4608719",
    "end": "4614719"
  },
  {
    "text": "take the why is why is every co np language also in pd space",
    "start": "4614719",
    "end": "4620480"
  },
  {
    "text": "well take the complement of your co-mp language that's an np language an np language is in p space because we",
    "start": "4620480",
    "end": "4627199"
  },
  {
    "text": "proved that that's what we proved um uh but if a language is in p space its",
    "start": "4627199",
    "end": "4633920"
  },
  {
    "text": "complement is also in p space because for a deterministic procedure you can just flip the answer of the machine",
    "start": "4633920",
    "end": "4641120"
  },
  {
    "text": "um so now you get you know if so if b language b is in",
    "start": "4641120",
    "end": "4646400"
  },
  {
    "text": "cohen p its complement b b complement is an np which is in p space but now so b",
    "start": "4646400",
    "end": "4652960"
  },
  {
    "text": "complement is in p space so now p space you can invert the answer and now b is also in p space i hope that",
    "start": "4652960",
    "end": "4660880"
  },
  {
    "text": "helps um somebody's giving me the answer to get from uh",
    "start": "4660880",
    "end": "4666320"
  },
  {
    "text": "uh must to vote but you know i i i've seen an answer and that's you know there",
    "start": "4666320",
    "end": "4671360"
  },
  {
    "text": "are online tools that will answer word letters um so you just",
    "start": "4671360",
    "end": "4677280"
  },
  {
    "text": "plug in the two you know where the start and the finish and it'll give you the word ladder and then the",
    "start": "4677280",
    "end": "4683199"
  },
  {
    "text": "one that this person is sent me is the one you get from that that tool so i suspect it didn't find it",
    "start": "4683199",
    "end": "4689679"
  },
  {
    "text": "himself i i actually uh before lecture i actually saw that on my own besides the",
    "start": "4689679",
    "end": "4695360"
  },
  {
    "text": "one that i know the one that the one that the tool will give you so that tool gives one in uh i think five steps and i",
    "start": "4695360",
    "end": "4703120"
  },
  {
    "text": "found one on my own of six steps it's not that hard but yeah must",
    "start": "4703120",
    "end": "4708400"
  },
  {
    "text": "most lost lose rose wrote and vote",
    "start": "4708400",
    "end": "4714400"
  },
  {
    "text": "i think maybe that's seven steps um anyway you see you can solve the for",
    "start": "4714400",
    "end": "4720080"
  },
  {
    "text": "short words you can solve these generally pretty quickly on your own um",
    "start": "4720080",
    "end": "4725120"
  },
  {
    "text": "what else what else can i do for you um",
    "start": "4725120",
    "end": "4729920"
  },
  {
    "text": "do we need to worry about coming back to a previously visited word visited word",
    "start": "4732400",
    "end": "4737840"
  },
  {
    "text": "on the construction on this page no we don't have to worry about coming back to a previously visited word all",
    "start": "4737840",
    "end": "4744159"
  },
  {
    "text": "you need to worry about is making sure that you bound how long you're going to go for",
    "start": "4744159",
    "end": "4749520"
  },
  {
    "text": "and that's where the previously visited issue comes in",
    "start": "4749520",
    "end": "4755520"
  },
  {
    "text": "you know if the um [Music] if the word letter that you found",
    "start": "4755520",
    "end": "4762320"
  },
  {
    "text": "repeats some word well then there would would have been a shorter word ladder that would have also",
    "start": "4762320",
    "end": "4767600"
  },
  {
    "text": "worked but uh you know it still shows that it's possible to get from the",
    "start": "4767600",
    "end": "4774159"
  },
  {
    "text": "uh the start word to the finish word um if you if you're if you have a repeated",
    "start": "4774159",
    "end": "4780159"
  },
  {
    "text": "one in between so that that doesn't matter we don't have to worry about that if you did then it would be a problem",
    "start": "4780159",
    "end": "4787040"
  },
  {
    "text": "so i think i will it's four or five i think i want to head out uh see you all guys and i'm going to join",
    "start": "4787040",
    "end": "4793440"
  },
  {
    "text": "my tas in the meeting shortly so bye-bye thank you for being here",
    "start": "4793440",
    "end": "4799560"
  },
  {
    "text": "you",
    "start": "4809199",
    "end": "4811280"
  }
]