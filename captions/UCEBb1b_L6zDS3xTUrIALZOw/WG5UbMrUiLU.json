[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6050"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6050",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12690",
    "end": "25731"
  },
  {
    "text": "PROFESSOR: All right,\nlet's get started. Thank you for showing\nup to this very special pre-Thanksgiving\nlecture.",
    "start": "25732",
    "end": "32619"
  },
  {
    "text": "I'm glad you guys have\nsuch devotion to security, I'm sure that you will be\nrewarded on the job market",
    "start": "32619",
    "end": "37790"
  },
  {
    "text": "at some point. Feel free to list me\nas a recommendation. So today we're going to\ntalk about taint tracking,",
    "start": "37790",
    "end": "42877"
  },
  {
    "text": "and in particular we're going\nto look at a system called TaintDroid that looks at how\nto do this type of information",
    "start": "42877",
    "end": "47950"
  },
  {
    "text": "flow analysis in the context\nof Android smartphones. And so the basic problem\nthe paper deals with",
    "start": "47950",
    "end": "54970"
  },
  {
    "text": "is this fact that apps\ncan exfiltrate data. So the basic idea\nis that your phone contains a lot of sensitive\ninformation, right.",
    "start": "54970",
    "end": "61670"
  },
  {
    "text": "It contains your contacts\nlist and your phone number and your email and all\nthat kind of stuff.",
    "start": "61670",
    "end": "66920"
  },
  {
    "text": "So if the operating system or\nthe phone itself isn't careful,",
    "start": "66920",
    "end": "72070"
  },
  {
    "text": "then a malicious app\nmight be able to take some of that information\nand send it back to its home server,\nand that server",
    "start": "72070",
    "end": "79337"
  },
  {
    "text": "can use it for all types\nof nefarious things as we'll talk about later. The high-level solution that\nthe TaintDroid paper suggests",
    "start": "79337",
    "end": "89899"
  },
  {
    "text": "is that we should basically\ntrack the sensitive data as it",
    "start": "89900",
    "end": "95320"
  },
  {
    "text": "flows through the system,\nand essentially, we need to stop it from\ngoing over the network.",
    "start": "95320",
    "end": "102754"
  },
  {
    "text": "In other words,\nwe need to stop it from being passed as an argument\nto networking system calls.",
    "start": "102754",
    "end": "110380"
  },
  {
    "text": " And so presumably,\nif we can do that,",
    "start": "110380",
    "end": "116400"
  },
  {
    "text": "then we can essentially stop\nthe leak right at the moment that it's about to happen. So you might think\nto yourself, so why",
    "start": "116400",
    "end": "122660"
  },
  {
    "text": "are traditional\nAndroid permissions insufficient to stop these\ntypes of data exfiltrations?",
    "start": "122660",
    "end": "129770"
  },
  {
    "text": "And the reason is that these\npermissions don't really have the appropriate grammar to\ntalk about the type of attack",
    "start": "129770",
    "end": "135452"
  },
  {
    "text": "that we're trying to prevent. So a lot of times these\nAndroid permissions, they deal with these things\nlike can an application",
    "start": "135452",
    "end": "141400"
  },
  {
    "text": "read or write to a\nparticular device. But we're talking\nabout something at a sort of different\nlevel of semantics.",
    "start": "141400",
    "end": "147570"
  },
  {
    "text": "We're saying even if an\napplication has been granted the authority to read or\nwrite a particular device,",
    "start": "147570",
    "end": "153330"
  },
  {
    "text": "like the network,\nfor example, it still might not be good to allow that\napplication to read or write",
    "start": "153330",
    "end": "160100"
  },
  {
    "text": "certain sensitive data over\nthat device to which it has permissions. In other words, using these\ntraditional Android security",
    "start": "160100",
    "end": "168060"
  },
  {
    "text": "policies, it is\ndifficult to speak about specific types of data. It's much easier to talk about\nwhether an application accesses",
    "start": "168060",
    "end": "174579"
  },
  {
    "text": "a device or not. So you might think, all right,\nso that's kind of a bummer,",
    "start": "174580",
    "end": "180489"
  },
  {
    "text": "but maybe we can\nsolve this problem by-- we have this alternate\nsolution, so we'll",
    "start": "180490",
    "end": "187015"
  },
  {
    "text": "call this solution star. So maybe we can\njust never install applications that can do\nreads of sensitive data",
    "start": "187015",
    "end": "201410"
  },
  {
    "text": "and also have network access. ",
    "start": "201410",
    "end": "207660"
  },
  {
    "text": "At first glance, that\nseems to solve the problem. Because if it can't do\nboth of these things, it either can't get\nto the sensitive data",
    "start": "207660",
    "end": "213137"
  },
  {
    "text": "in the first place, or it can,\nbut it can't send it anywhere. So does anyone have any ideas\nwhere this probably isn't",
    "start": "213138",
    "end": "218170"
  },
  {
    "text": "going to work out very well?  Everyone's already\nthinking about turkey.",
    "start": "218170",
    "end": "223959"
  },
  {
    "text": "I can see in your eyes. The main reason why this\nis probably a bad idea",
    "start": "223960",
    "end": "230500"
  },
  {
    "text": "is that this is going to break a\nlot of legitimate applications.",
    "start": "230500",
    "end": "237220"
  },
  {
    "text": " So you could imagine that\nthere are a lot of programs,",
    "start": "237220",
    "end": "242234"
  },
  {
    "text": "like maybe email\nclients or things like that, that should actually\nhave the ability, perhaps,",
    "start": "242234",
    "end": "247549"
  },
  {
    "text": "to read some data\nthat's sensitive and also send information\nover the network. So if we just say\nthat we're going",
    "start": "247550",
    "end": "253460"
  },
  {
    "text": "to prevent this sort of\nand type of activity, then you're actually going\nto make a lot of things that work right now fail.",
    "start": "253460",
    "end": "260019"
  },
  {
    "text": "So users are not\ngoing to like that. There's also a problem here is\nthat even if we did implement",
    "start": "260019",
    "end": "266580"
  },
  {
    "text": "this solution, it's not going to\nstop a bunch of different side",
    "start": "266580",
    "end": "272300"
  },
  {
    "text": "channel mechanisms\nfor data leakage. So for example, we've\nlooked in previous classes",
    "start": "272300",
    "end": "277930"
  },
  {
    "text": "about how the browser\ncache, for example, can leak information about\nwhether a particular site has",
    "start": "277930",
    "end": "283900"
  },
  {
    "text": "been visited or not. And so even if we have a\nsecurity policy like this, maybe we don't capture all\nkinds of side channels.",
    "start": "283900",
    "end": "290387"
  },
  {
    "text": "We'll talk about some other\nside channels a little later in the lecture. Another thing that this\nwouldn't stop is app collusion.",
    "start": "290387",
    "end": "301250"
  },
  {
    "text": "So two apps can\nactually collaborate to break the security system.",
    "start": "301250",
    "end": "307220"
  },
  {
    "text": "So for example, what\nif there's one app that doesn't have access\nnetwork, but it can talk to a second\napplication, which does.",
    "start": "307220",
    "end": "314600"
  },
  {
    "text": "So maybe it can use\nAndroid's IPC mechanisms to pass the sensitive data\nto an application that does have network permissions,\nand that second app can",
    "start": "314600",
    "end": "321170"
  },
  {
    "text": "actually upload that\ninformation to the server. And even if the apps\naren't colluding,",
    "start": "321170",
    "end": "327920"
  },
  {
    "text": "then there may be\nsome type of trickery that an application\ncan engage in",
    "start": "327920",
    "end": "334300"
  },
  {
    "text": "to trick some other applications\ninto accidentally revealing sensitive data. So maybe there's some type\nof weakness in the way",
    "start": "334300",
    "end": "340960"
  },
  {
    "text": "that the email\nprogram is written, and so perhaps that\nemail program accepts too many random messages\nfrom other things that",
    "start": "340960",
    "end": "347280"
  },
  {
    "text": "are living on the system. So perhaps we could craft a\nspecial intent that's somehow going to trick your Gmail\napplication, for example,",
    "start": "347280",
    "end": "353360"
  },
  {
    "text": "into emailing something to\nsomeone outside of the phone. At a high level, this approach\ndoesn't really work very well.",
    "start": "353360",
    "end": "359949"
  },
  {
    "text": " One important thing\nto think about is OK, so it seems like we're very\nworried about the sensitive",
    "start": "359950",
    "end": "366681"
  },
  {
    "text": "data leaving the phone. So what does Android malware\nactually do in practice.",
    "start": "366681",
    "end": "372690"
  },
  {
    "text": "Are there any kinds\nof real world attacks that we're going to\nbe preventing by all",
    "start": "372690",
    "end": "378030"
  },
  {
    "text": "this taint tracking type stuff. And the answer is yes. So increasingly, malware is\nbecoming a bigger problem",
    "start": "378030",
    "end": "384080"
  },
  {
    "text": "for these mobile phones. So one thing it might do is\nit might use your location",
    "start": "384080",
    "end": "391020"
  },
  {
    "text": "or maybe your IMEI for ads.",
    "start": "391020",
    "end": "397324"
  },
  {
    "text": " So similarly to\nmalware, it's actually going to look and see where\nyou are physically located",
    "start": "397325",
    "end": "404060"
  },
  {
    "text": "in the world and then maybe\nit will that oh, you're located near the MIT\ncampus, therefore you must be a hungry student\nso hey, why don't you",
    "start": "404060",
    "end": "410190"
  },
  {
    "text": "go to my food truck that\nhappens to be located right where you are. IMEI is kind of\nlike this-- you can",
    "start": "410190",
    "end": "417282"
  },
  {
    "text": "think of it as an integer that's\nlike a per device uniquefier. So this could be used perhaps\nto track you in ways that you",
    "start": "417282",
    "end": "422924"
  },
  {
    "text": "don't want to be tracked,\nin different locations, so on and so forth. So there's actually\nmalware in the wild that does things like that.",
    "start": "422924",
    "end": "428840"
  },
  {
    "text": "Another thing that\nmalware might try to do is steal your credentials. ",
    "start": "428840",
    "end": "437250"
  },
  {
    "text": "So for example, it might try\nto take your phone number,",
    "start": "437250",
    "end": "442850"
  },
  {
    "text": "or it might try to\ntake your contact list, it might try to upload those\nthings to a remote server. Maybe that's useful for\ntrying to impersonate you,",
    "start": "442850",
    "end": "450690"
  },
  {
    "text": "for example, in a\nmessage that's going to be used for spam later on.",
    "start": "450690",
    "end": "455790"
  },
  {
    "text": "There's malware out there that\ndoes things like this today. Perhaps most horrifyingly,\nat least for me,",
    "start": "455790",
    "end": "464289"
  },
  {
    "text": "malware might be able to\nturn your phone into a bot.",
    "start": "464290",
    "end": "469891"
  },
  {
    "text": "This, of course, is a problem\nthat our parents did not have to deal with. Modern phones are so powerful\nthat they can actually",
    "start": "469891",
    "end": "475380"
  },
  {
    "text": "be used to send out spam\nmessages themselves. So there's actually\na pretty nasty piece of malware that's\ngoing around right now",
    "start": "475380",
    "end": "481900"
  },
  {
    "text": "that seems to be targeting some\ncorporate environments that's doing precisely this. So it gets to your phone and\njust starts sending out stuff.",
    "start": "481900",
    "end": "487168"
  },
  {
    "text": "AUDIENCE: So this\ntype of malware, is it malware that subverts\nthe Android OS, or is it",
    "start": "487168",
    "end": "492397"
  },
  {
    "text": "just a typical app? If it's a typical app, it\nseems that it should be able-- PROFESSOR: Yeah.",
    "start": "492397",
    "end": "498810"
  },
  {
    "text": "That's a good question. There's both types\nof malware out there. As it turns out, it's\nactually fairly easy",
    "start": "498810",
    "end": "504990"
  },
  {
    "text": "to get users to click on things. So I'll give you an example. This isn't necessarily\nindicative of malware,",
    "start": "504990",
    "end": "511290"
  },
  {
    "text": "more about the sad\nstate of humanity. There'll be a popular\ngame out there, let's say Angry\nBirds, for example. You go to the App Store and\nyou type in Angry Birds,",
    "start": "511290",
    "end": "517996"
  },
  {
    "text": "I want to get Angry Birds. So hopefully the\nfirst hit that you get is the actual Angry Birds. But then the second hit will\nbe something like Angry Birdss,",
    "start": "517997",
    "end": "526160"
  },
  {
    "text": "with two S's, for example. And a lot of people\nwill go there, and maybe it's cheaper\nthan the regular version, and they go there.",
    "start": "526160",
    "end": "531649"
  },
  {
    "text": "It's going to present\nthat thing that says, do you allow this application\nto do this, this, and this. The person is going say, yeah,\nbecause I got to get my Angry",
    "start": "531649",
    "end": "537275"
  },
  {
    "text": "Birds, yeah, sure. Boom, then that\nperson could be owned. So in practice you\nsee now where it exploits both types of vectors.",
    "start": "537275",
    "end": "543519"
  },
  {
    "text": "But you're exactly right that\nif you assume that the Android security model is correct,\nthen the malware sort",
    "start": "543520",
    "end": "549950"
  },
  {
    "text": "has to depend on users\nbeing foolish or naive and giving it network\naccess, for example,",
    "start": "549950",
    "end": "555869"
  },
  {
    "text": "when your tic-tac-toe\ngame shouldn't really have network access. ",
    "start": "555869",
    "end": "561814"
  },
  {
    "text": "Yes, so you can\nactually have your phone get turned into a bot. This is horrible for\nmultiple reasons, not only because\nyour phone is a bot",
    "start": "561814",
    "end": "567360"
  },
  {
    "text": "but also because\nmaybe you're paying for data for all\nthose emails that are getting sent from your phone. Maybe your battery's\ngetting ground down",
    "start": "567360",
    "end": "573640"
  },
  {
    "text": "because you phone's just\nsitting around constantly sending ads about whenever, free\ntrips to Bermuda or whatever.",
    "start": "573640",
    "end": "581740"
  },
  {
    "text": "There are actually malicious\napplications out there that will use your private\ninformation for bad.",
    "start": "581740",
    "end": "588975"
  },
  {
    "text": "And the particularly\nbad thing about this bot here is that it can actually\nlook at your contact list and some spam\non your behalf",
    "start": "588975",
    "end": "594380"
  },
  {
    "text": "to people that you know and make\nthe likelihood of the victim clicking on something in\nthat email much, much higher. ",
    "start": "594380",
    "end": "601511"
  },
  {
    "text": "One thing to note, and\nthis kind of getting back to the discussion\nwe just had, so preventing this\ndata exfiltration is very nice, right.",
    "start": "601511",
    "end": "607240"
  },
  {
    "text": "But in and of itself,\npreventing that exfiltration doesn't stop the hack\nin the first place. So there's actually\nmechanisms that we actually",
    "start": "607240",
    "end": "613470"
  },
  {
    "text": "should look at to prevent your\nmachine from getting owned in the first place or to\neducate users about what they should and should not click on.",
    "start": "613470",
    "end": "619540"
  },
  {
    "text": "So just doing this\ntaint tracking isn't a full solution for\npreventing your machine from getting compromised. ",
    "start": "619540",
    "end": "626910"
  },
  {
    "text": "How is TaintDroid in\nparticular going to work?",
    "start": "626910",
    "end": "633240"
  },
  {
    "text": "Let's see. So as I mentioned\nbefore, TaintDroid",
    "start": "633240",
    "end": "638460"
  },
  {
    "text": "is going to track all of\nyour sensitive information",
    "start": "638460",
    "end": "643760"
  },
  {
    "text": "as it propagates\nthrough the system. So TaintDroid\ndistinguishes between what they call information sources\nand information sinks.",
    "start": "643760",
    "end": "651140"
  },
  {
    "text": "So these sources are things\nthat generate sensitive data.",
    "start": "651140",
    "end": "658240"
  },
  {
    "text": "So you might think of this\nas things like sensors. So for example,\nGPS, accelerometer,",
    "start": "658240",
    "end": "665310"
  },
  {
    "text": "things like that. This could be your\ncontact list database,",
    "start": "665310",
    "end": "672600"
  },
  {
    "text": "this could be things like the\nIMEI, basically anything that",
    "start": "672600",
    "end": "680519"
  },
  {
    "text": "might help to tie you,\na particular user, to your actual phone. So these are the things\nthat generate the taint.",
    "start": "680520",
    "end": "688220"
  },
  {
    "text": "And then you can\nthink of these sinks as being the places where we\ndon't want tainted data to go.",
    "start": "688220",
    "end": "696170"
  },
  {
    "text": "And so in the case\nof TaintDroid, the particular sink that we're\nconcerned about is the network.",
    "start": "696170",
    "end": "701530"
  },
  {
    "text": " As we'll talk about later, you\ncan generalize information flow",
    "start": "701530",
    "end": "707690"
  },
  {
    "text": "to more scenarios than\nTaintDroid specifically covers. So you can imagine there\nmight be other sinks in a more general purpose system.",
    "start": "707690",
    "end": "713430"
  },
  {
    "text": "But for TaintDroid,\nthey're literally caring about the network as\nthe sink for information.",
    "start": "713430",
    "end": "719180"
  },
  {
    "text": "So in TaintDroid, they're\ngoing to use a 32-bit bitvector",
    "start": "719180",
    "end": "728550"
  },
  {
    "text": "to represent taint. And so what this basically\nmeans is that you can have,",
    "start": "728550",
    "end": "735589"
  },
  {
    "text": "at most, 32 distinct\ntaint sources. So each sensitive\ndata value will",
    "start": "735590",
    "end": "742510"
  },
  {
    "text": "have a one in a\nparticular position if it has been tainted by some\nparticular source of taint. That's like, has it been\nderived from your GPS data,",
    "start": "742510",
    "end": "751370"
  },
  {
    "text": "for example. Has it been derived from\nsomething from your contacts list, and so on and so forth.",
    "start": "751370",
    "end": "757540"
  },
  {
    "text": "One interesting thing is\nthat 32 sources of taint is actually not that big, right.",
    "start": "757540",
    "end": "764120"
  },
  {
    "text": "And so an interesting\nquestion is, is that big enough for\nthis particular system",
    "start": "764120",
    "end": "769900"
  },
  {
    "text": "and is it big enough in\ngeneral for these information flow systems. So in a particular\ncase of TaintDroid,",
    "start": "769900",
    "end": "775860"
  },
  {
    "text": "32 possible sources\nof taint seems to be somewhat reasonable,\nbecause it's actually",
    "start": "775860",
    "end": "781160"
  },
  {
    "text": "looking at a fairly constrained\ninformation flow problem. So it's saying given all the\nsensors you have on your phone,",
    "start": "781160",
    "end": "787230"
  },
  {
    "text": "given all of these\nsensitive databases, and things like that,\n32 seems roughly the right order of\nmagnitude in terms",
    "start": "787230",
    "end": "795250"
  },
  {
    "text": "of storing these taint flags. And as we'll see in the\nimplementation of this system,",
    "start": "795250",
    "end": "801100"
  },
  {
    "text": "32 is actually very\nconvenient, too, because what else is 32 bits? Well, an integer. So you can actually do some\nvery efficient representations",
    "start": "801100",
    "end": "808006"
  },
  {
    "text": "of these taint flags in the way\nthat they actually build this. As we'll discuss a\nlittle bit later, though, if you want to expose\ninformation flow to programmers",
    "start": "808006",
    "end": "816090"
  },
  {
    "text": "in a more generic\nway, so for example, if you want programmers\nbe able to specify their own sources of taint\nand their own types of sink,",
    "start": "816090",
    "end": "824080"
  },
  {
    "text": "then 32 bits probably\nisn't enough. In systems like\nthat you actually have to think about including\nmore complex runtime support",
    "start": "824080",
    "end": "831790"
  },
  {
    "text": "for a larger label space. So does that all make sense?",
    "start": "831790",
    "end": "837720"
  },
  {
    "text": "OK so roughly speaking,\nwhen you look at the way",
    "start": "837720",
    "end": "842829"
  },
  {
    "text": "that a taint flows through\nthe system, at a high level, it basically goes from the\nright hand side of a statement",
    "start": "842830",
    "end": "849750"
  },
  {
    "text": "to the left hand side. So as a very simple example,\nif you had some statement,",
    "start": "849750",
    "end": "856060"
  },
  {
    "text": "like you declare an integer\nvariable that's going to get your latitude, and then a high\nlevel you call gps.getLat(),",
    "start": "856060",
    "end": "867520"
  },
  {
    "text": "then essentially this thing here\nis going to generate a value that has some taint\nthat's associated with it.",
    "start": "867520",
    "end": "873972"
  },
  {
    "text": "Some particular flag will\nbe set that indicates that hey, this\nvalue I'm returning comes from a sensitive source.",
    "start": "873972",
    "end": "879650"
  },
  {
    "text": "So the taint will come from\nhere on the right hand side and go over here to\nthe left hand side, and now that is\nactually tainted.",
    "start": "879650",
    "end": "885839"
  },
  {
    "text": "So that's sort of what it\nlooks like from the perspective of the human developer\nwho writes source code.",
    "start": "885840",
    "end": "892080"
  },
  {
    "text": "However, the Dalvik VM actually\nuses this register-based format at the lower level to\nactually build programs,",
    "start": "892080",
    "end": "898200"
  },
  {
    "text": "and that's actually the way\nthat these taint semantics are implemented in reality.",
    "start": "898200",
    "end": "903864"
  },
  {
    "text": "This is what's explained\nin table one of the papers, so they have this big list\nof classes of opcodes,",
    "start": "903864",
    "end": "909345"
  },
  {
    "text": "and they describe how\ntaint sort of flows for those types of opcodes. So for example,\nyou might imagine",
    "start": "909345",
    "end": "914950"
  },
  {
    "text": "that you have an operation\nthat looks kind of like a move,",
    "start": "914950",
    "end": "920060"
  },
  {
    "text": "and so it mentions a\ndestination and a source. So in Dalvik, to register\na base virtual machines,",
    "start": "920060",
    "end": "928334"
  },
  {
    "text": "so you can think\nof these as being registers on this sort of\nabstract computation engine.",
    "start": "928334",
    "end": "933450"
  },
  {
    "text": "And so essentially what happens\nhere is that, like I said, taint goes from the right hand\nside to the left hand side.",
    "start": "933450",
    "end": "939557"
  },
  {
    "text": "So in this case, when\nthe Dalvik interpreter executes this\ninstruction here, it's going to look at the\ntaint label, this,",
    "start": "939557",
    "end": "945830"
  },
  {
    "text": "and it's going to\nassign it over here.  Then you might imagine you\nhave another instruction that's",
    "start": "945830",
    "end": "953130"
  },
  {
    "text": "like a binary operation. So think of this as something\nlike addition, for example.",
    "start": "953130",
    "end": "959300"
  },
  {
    "text": "So here you'll have\na single destination, but then you'll\nhave two sources.",
    "start": "959300",
    "end": "967350"
  },
  {
    "text": "And what will\nhappen in this case is that when Dalvik interpreter\nencounters this instruction, it'll take the taints\nof both of these,",
    "start": "967350",
    "end": "974040"
  },
  {
    "text": "construct a union of those,\nand then assign that union to be the taint tag over here.",
    "start": "974040",
    "end": "982049"
  },
  {
    "text": "Does that all make sense? It's fairly straightforward. So the table breaks down all the\ndifferent types of instructions",
    "start": "982049",
    "end": "988250"
  },
  {
    "text": "that you'll see, but to\na first approximation, these are the most\ncommon ways that taint propagates through the system.",
    "start": "988250",
    "end": "994500"
  },
  {
    "text": "Now there are actually some\ninteresting special cases that they mention in the paper. So one of those special\ncases involves arrays.",
    "start": "994500",
    "end": "1006680"
  },
  {
    "text": "Let's say that you\nhave some code that's going to declare a\ncharacter, and you",
    "start": "1006680",
    "end": "1013470"
  },
  {
    "text": "get the value for the character\nsomehow, doesn't really matter. And then let's say the\nprogram declares some array,",
    "start": "1013470",
    "end": "1022380"
  },
  {
    "text": "we'll call it upper(). And it's basically going to have\nuppercase versions of letters.",
    "start": "1022380",
    "end": "1035020"
  },
  {
    "text": "And so one very common\nthing to do in code is to index into an array like\nthis using, for example, maybe",
    "start": "1035020",
    "end": "1040689"
  },
  {
    "text": "just C directly,\nbecause as we all know, Kernighan and Ritchie teach us\nthat basically characters are integers, so hooray for that.",
    "start": "1040690",
    "end": "1046709"
  },
  {
    "text": "So you can imagine that\nyou have some code that says something like the upper\ncase version of this character",
    "start": "1046710",
    "end": "1053960"
  },
  {
    "text": "here is going to be whatever\nis at a particular index in this table here, in the\nindex that table by c like this.",
    "start": "1053960",
    "end": "1063399"
  },
  {
    "text": "So there's a question of what\ntaint should this receive.",
    "start": "1063400",
    "end": "1068780"
  },
  {
    "text": "It seems pretty\nstraightforward what should happen in these\ncases, but in this case, it seems like we have multiple\nthings that are going on.",
    "start": "1068780",
    "end": "1075352"
  },
  {
    "text": "We've got this array here that\nmay have some type of taint, we've got this character\nc here that may have some type of taint.",
    "start": "1075352",
    "end": "1081500"
  },
  {
    "text": "What Dalvik decides\nto do in this case is a little bit\nsimilar to what it does in the case of\nthis binary op here.",
    "start": "1081500",
    "end": "1088000"
  },
  {
    "text": "So it's essentially going to say\nthat this character over here is going to get the union\nof the taint of c and also",
    "start": "1088000",
    "end": "1095500"
  },
  {
    "text": "of the array. And the intuition behind\nthat is that to generate this character, we somehow\nhad to know something",
    "start": "1095500",
    "end": "1103000"
  },
  {
    "text": "about this array here. We had to know something\nabout this index here. So therefore I\nguess it makes sense",
    "start": "1103000",
    "end": "1108160"
  },
  {
    "text": "that this thing should\nbe as sensitive as both of these things combined. ",
    "start": "1108160",
    "end": "1115580"
  },
  {
    "text": "AUDIENCE: Can you explain\nagain move op and binary op, what exactly it means,\nlike the union of a taint.",
    "start": "1115580",
    "end": "1120860"
  },
  {
    "text": "PROFESSOR: Yes, so\nimagine that-- let's look",
    "start": "1120860",
    "end": "1128320"
  },
  {
    "text": "at the move op here. So imagine that this\nsource operation here just had-- actually, let\nme get more concrete.",
    "start": "1128320",
    "end": "1136050"
  },
  {
    "text": "So each variable,\nas I'll described in a second what a variable is,\nhas this integer, essentially, that has a bunch of\nbits that are set",
    "start": "1136050",
    "end": "1142460"
  },
  {
    "text": "according to what taint it has. So imagine each one of\nthese values flying around has this associated\ninteger flying",
    "start": "1142460",
    "end": "1148270"
  },
  {
    "text": "around that has some bits set. So let's say that this source\nhad two bits set, corresponding",
    "start": "1148270",
    "end": "1154415"
  },
  {
    "text": "to the fact that it had\nbeen tainted by two things, it doesn't really matter. So what the interpreter will do\nis it will look at this source",
    "start": "1154415",
    "end": "1160093"
  },
  {
    "text": "thing, it'll look at\nthe associated integer, and it'll say aha. I should take that integer\nhas those two bits set",
    "start": "1160093",
    "end": "1167410"
  },
  {
    "text": "and then essentially make that\ninteger the taint tag for this.",
    "start": "1167410",
    "end": "1173775"
  },
  {
    "text": "So that's sort of a\nsimple case, right. The more complicated case,\nlike what does the union actually look like. So imagine that we've\ngot these two things here",
    "start": "1173775",
    "end": "1184480"
  },
  {
    "text": "and we've got\nsource 0, source 1. And so I'm going\nto show you here,",
    "start": "1184480",
    "end": "1189940"
  },
  {
    "text": "these are the tainted\nbits for this particular-- AUDIENCE: [INAUDIBLE]? PROFESSOR: Yeah, so\nimagine that you have",
    "start": "1189940",
    "end": "1198819"
  },
  {
    "text": "this is the taint for this one. And imagine that the taint\nfor this one is this. So what's the taint going\nto look like for dest?",
    "start": "1198819",
    "end": "1207030"
  },
  {
    "text": "You basically take\nall of the bits that are saying either one of\nthose and then assign that",
    "start": "1207030",
    "end": "1212970"
  },
  {
    "text": "to that throwback to this one. AUDIENCE: All right, thanks. PROFESSOR: Yeah, no problem. And so one reasons, so once\nagain I should emphasize this,",
    "start": "1212970",
    "end": "1220940"
  },
  {
    "text": "so since we can represent all\nthe possible taints in this 32 bits, as we were\njust discussing,",
    "start": "1220940",
    "end": "1226590"
  },
  {
    "text": "doing this operation here,\nit's just bitwise operations. So this actually really\ncuts down on the overhead from implementing\nthese taint bits.",
    "start": "1226590",
    "end": "1232500"
  },
  {
    "text": "If you had to express a\nlarger universe of taints then you might be in trouble,\nbecause you might not be able to use these\nvery efficient bitwise",
    "start": "1232500",
    "end": "1239070"
  },
  {
    "text": "operations to do things. Any other questions about that? OK.",
    "start": "1239070",
    "end": "1244550"
  },
  {
    "text": " So the way that arrays work is\na little bit like that binary op",
    "start": "1244550",
    "end": "1250212"
  },
  {
    "text": "like I mentioned. So this is going\nto get the union of the taint of this and that.",
    "start": "1250212",
    "end": "1256290"
  },
  {
    "text": "And so one design decision\nthat they made in TaintDroid is that they associate a single\ntaint tab with each array.",
    "start": "1256290",
    "end": "1267741"
  },
  {
    "text": "So in other words,\nthey're not going to try to taint all the\nindividual elements in there.",
    "start": "1267741",
    "end": "1273492"
  },
  {
    "text": "So basically what's\ngoing to end up happening is that this is going\nto save them storage space,",
    "start": "1273492",
    "end": "1279659"
  },
  {
    "text": "right, because for each\narray they declare, they'll just have a\nsingle through route to the entity that sort of\nfloats around that array",
    "start": "1279660",
    "end": "1285250"
  },
  {
    "text": "and represents all the taint\nthat belongs to that array. ",
    "start": "1285250",
    "end": "1292270"
  },
  {
    "text": "There is one\nquestion about why is it safe to not have a finer\ngrain system for taint.",
    "start": "1292270",
    "end": "1300010"
  },
  {
    "text": "Because it seems like an\narray is a collection of data, so why shouldn't we have a\nbunch of labels flying around",
    "start": "1300010",
    "end": "1305679"
  },
  {
    "text": "for each thing\nthat's in that array? And so the answer to\nthat is that by only",
    "start": "1305680",
    "end": "1311190"
  },
  {
    "text": "associating one taint\ntag with the array and making it the union of\nall the things that's inside,",
    "start": "1311190",
    "end": "1316910"
  },
  {
    "text": "that actually is going\nto overestimate taint. So in other words, if\nyou have an array that",
    "start": "1316910",
    "end": "1322590"
  },
  {
    "text": "has two items in\nit, and that array is tainted with the union\nof all of those things, well, that's probably a little\nbit-- it's conservative.",
    "start": "1322590",
    "end": "1329930"
  },
  {
    "text": "Because it may be that if\nsomething only accesses this, maybe it didn't learn\nanything about the taint that was over here.",
    "start": "1329930",
    "end": "1335070"
  },
  {
    "text": "But by being\nconservative, hopefully we will always be correct. In other words, if\nwe underestimate",
    "start": "1335070",
    "end": "1341065"
  },
  {
    "text": "the amount of taint\nthat something had, then we might accidentally\ndisclose something that we didn't want\nto actually disclose.",
    "start": "1341065",
    "end": "1346248"
  },
  {
    "text": "But if we overestimate,\nthen in the worst case, maybe we prevent something from\ngoing outside of the phone that",
    "start": "1346248",
    "end": "1351700"
  },
  {
    "text": "should actually\nOK, but we're going to be err on the side of safety. Does that all makes sense? ",
    "start": "1351700",
    "end": "1358790"
  },
  {
    "text": "Another instance of-- a\nsort of special case taint",
    "start": "1358790",
    "end": "1363910"
  },
  {
    "text": "propagation that they mention\nare things like native methods.",
    "start": "1363910",
    "end": "1369825"
  },
  {
    "text": " And so native methods\nmight exist inside of the v",
    "start": "1369825",
    "end": "1377570"
  },
  {
    "text": "in itself, so for example, the\nDalvik VM exposes some function like a System.arraycopy(), so\nwe can pass in anything through",
    "start": "1377570",
    "end": "1388120"
  },
  {
    "text": "this, and internal to the VM,\nthis is implemented in C or C++",
    "start": "1388120",
    "end": "1393270"
  },
  {
    "text": "code for reasons of speed. That's one type of example of\na native method you might have.",
    "start": "1393270",
    "end": "1398510"
  },
  {
    "text": "Another thing you might\nhave, a type of native method is what they call\nJNI expose methods.",
    "start": "1398510",
    "end": "1408799"
  },
  {
    "text": "So the native\ninterface essentially allows Java code\nto call into code",
    "start": "1408800",
    "end": "1415330"
  },
  {
    "text": "that is not Java, that's\nimplemented using x86 or ARM or something like that. There's a whole\ncalling convention",
    "start": "1415330",
    "end": "1421350"
  },
  {
    "text": "that's exposed here to allow\nthose two types of stacks to interoperate. And so the problem with\nthese native code methods,",
    "start": "1421350",
    "end": "1429460"
  },
  {
    "text": "from the perspective\nof tracking taint, is that this native code is\nnot being executed directly",
    "start": "1429460",
    "end": "1437440"
  },
  {
    "text": "by the Dalvik interpreter. In fact, it is often not even\nJava code, maybe C or C++ code.",
    "start": "1437440",
    "end": "1443400"
  },
  {
    "text": "So that means that once\nexecution flow goes into one of these\nnative methods,",
    "start": "1443400",
    "end": "1449020"
  },
  {
    "text": "TaintDroid can't do any\nof this taint propagation that it's doing for code\nthat lives in the Java world.",
    "start": "1449020",
    "end": "1457009"
  },
  {
    "text": "So that seems a\nlittle bit problematic because these things are\nkind of like black boxes. You want to make sure that\nwhen these methods return,",
    "start": "1457010",
    "end": "1465360"
  },
  {
    "text": "we can actually\nsomehow represent the new taint that was\ncreated by the execution",
    "start": "1465360",
    "end": "1470720"
  },
  {
    "text": "of those methods. And so the way that the\nauthors solve this issue is,",
    "start": "1470720",
    "end": "1478490"
  },
  {
    "text": "they essentially result\nto manual analysis. ",
    "start": "1478490",
    "end": "1486160"
  },
  {
    "text": "So they basically say,\nthere are not a whole lot of these types of methods here.",
    "start": "1486160",
    "end": "1491890"
  },
  {
    "text": "So for example, the Dalvik VM\nonly exposes a certain number of functions like\nSystems.arraycopy(),",
    "start": "1491890",
    "end": "1497290"
  },
  {
    "text": "so we as human developers can\nlook through this relatively small number of calls and\nessentially figure out what",
    "start": "1497290",
    "end": "1503860"
  },
  {
    "text": "the taint relationship\nshould be. So for example, they can look\nat something like array copy and say, OK, based\non what we know",
    "start": "1503860",
    "end": "1509840"
  },
  {
    "text": "the semantics of\nthis operation are, we know that we should\ntaint the return values from this function\nin a certain way",
    "start": "1509840",
    "end": "1515960"
  },
  {
    "text": "given the input values\nto this function. And so how well does this scale?",
    "start": "1515960",
    "end": "1522700"
  },
  {
    "text": "Well, if there are in\nfact only a small number of things exposed by, for\nexample, the VM in native code,",
    "start": "1522700",
    "end": "1530299"
  },
  {
    "text": "this actually works OK. Because if you assume that the\nDalvik VM interface doesn't change very often,\nthen it's actually not",
    "start": "1530300",
    "end": "1536640"
  },
  {
    "text": "too burdensome to look at these\nthings, view the documentation, and figure out how\ntaint's going to spread.",
    "start": "1536640",
    "end": "1543350"
  },
  {
    "text": "This may or may not\nbe more troublesome. They give some empirical\ndata that suggests that a lot",
    "start": "1543350",
    "end": "1548790"
  },
  {
    "text": "of applications\nare not, in fact, including code alongside of\nthem that's actually going",
    "start": "1548790",
    "end": "1556075"
  },
  {
    "text": "to execute in C or C++. So they argued that\nempirically, this is not going to be a big problem.",
    "start": "1556075",
    "end": "1561223"
  },
  {
    "text": "They also argue that for certain\ntypes of method signatures, you can actually automate\nthe way in which these taint",
    "start": "1561223",
    "end": "1569900"
  },
  {
    "text": "calculations are done. So they say that, for example,\nif only integers or strings are pass in to some of these\nnative functions here, then",
    "start": "1569900",
    "end": "1577000"
  },
  {
    "text": "we can just do the standard\nthing of tagging the output value with the union of all\nthings the taints of the input.",
    "start": "1577000",
    "end": "1583389"
  },
  {
    "text": "So in practice, it seems\nlike this isn't probably going to be too big\nof a problem here. AUDIENCE: But why couldn't\nyou just scan-- whatever",
    "start": "1583389",
    "end": "1590779"
  },
  {
    "text": "scans your code [INAUDIBLE]? ",
    "start": "1590780",
    "end": "1596720"
  },
  {
    "text": "PROFESSOR: Oh yeah, so in\npractice, what do they do. So they know that whenever the\ninterpreter is going to execute",
    "start": "1596720",
    "end": "1603610"
  },
  {
    "text": "something like this, then when\nthe return value comes back, they do have special case code\nthat's going to automagically",
    "start": "1603610",
    "end": "1609130"
  },
  {
    "text": "say return values of\nSystem.arraycopy() should have this taint assigned to it.",
    "start": "1609130",
    "end": "1614149"
  },
  {
    "text": "AUDIENCE: Right, so what's\nthe manual part of it? PROFESSOR: Oh, the\nmanual part of it is figuring out what that policy\nshould be in the first place.",
    "start": "1614149",
    "end": "1620260"
  },
  {
    "text": "So in other words, if you\njust look at off the shelf Taint or off the\nshelf Android, this is going to do\nsomething for you,",
    "start": "1620260",
    "end": "1626630"
  },
  {
    "text": "but it's not going to\nautomatically assign Taint in the right way. So someone looks\nat this and figures out what that policy is.",
    "start": "1626630",
    "end": "1632990"
  },
  {
    "text": "Make sense? Any other questions? It doesn't look\nlike this is going to be a big problem in practice,\nalthough you can imagine that,",
    "start": "1632990",
    "end": "1643210"
  },
  {
    "text": "for example, if there\nwas this increasing amount of applications that\ndefine these native outcalls,",
    "start": "1643210",
    "end": "1649280"
  },
  {
    "text": "then we could be in a\nlittle bit of a problem. All right. ",
    "start": "1649280",
    "end": "1658789"
  },
  {
    "text": "So another type of\ndata that we have to worry about assigning\ntaint to, IPC messages.",
    "start": "1658790",
    "end": "1669290"
  },
  {
    "text": "And so IPC messages\nare essentially treated like arrays. ",
    "start": "1669290",
    "end": "1676610"
  },
  {
    "text": "So each one of these\nmessages is going",
    "start": "1676610",
    "end": "1681790"
  },
  {
    "text": "to be associated with\na single taint that is the union of the taint of\nall the constituent parts.",
    "start": "1681790",
    "end": "1688230"
  },
  {
    "text": "Once again, this\nhelps with efficiency because we only have\nto store one taint tag for each one of these messages.",
    "start": "1688230",
    "end": "1695360"
  },
  {
    "text": "And in the worst case,\nthis is conservative, it overestimates taint. But that should never\nresult in a security leak.",
    "start": "1695360",
    "end": "1701727"
  },
  {
    "text": "At worst, it should\nonly result in something that should have been able to\ngo over the network not being able to go on the network.",
    "start": "1701727",
    "end": "1707030"
  },
  {
    "text": " This is how things work\nwhen you're constructing",
    "start": "1707030",
    "end": "1712730"
  },
  {
    "text": "the message, so\nthat message gets the union of all the\ntaint of its components. Then when you're\nreading it, what you",
    "start": "1712730",
    "end": "1720570"
  },
  {
    "text": "receive in the message--\nso extracted data",
    "start": "1720570",
    "end": "1726500"
  },
  {
    "text": "gets the taint of the message\nitself, which makes sense.",
    "start": "1726500",
    "end": "1732560"
  },
  {
    "text": " So that's how IPC\nmessages are treated. Another resource you might worry\nabout is how a file's handled.",
    "start": "1732560",
    "end": "1743000"
  },
  {
    "text": "So once again each file\ngets a single taint tag,",
    "start": "1743000",
    "end": "1750160"
  },
  {
    "text": "and that tag is\nessentially stored alongside the file in its\nmetadata on stable stores like the SD card or whatever.",
    "start": "1750160",
    "end": "1757219"
  },
  {
    "text": "So this is basically the\nsame conservative scheme that we've seen before. So the basic idea is that\nthe application accesses",
    "start": "1757219",
    "end": "1765030"
  },
  {
    "text": "some sensitive data like,\nfor example, your GPS location, maybe it's going\nto write that data to a file.",
    "start": "1765030",
    "end": "1771710"
  },
  {
    "text": "So TaintDroid updates\nthat file's taint tag with the GPS flag, maybe\nthe application closes down,",
    "start": "1771710",
    "end": "1778700"
  },
  {
    "text": "later on some other application\ncomes out, it reads that file. When it comes into the\nVM, into the application,",
    "start": "1778700",
    "end": "1786700"
  },
  {
    "text": "TaintDroid will\nlook and see that it has that flag marked,\nand so any data that's",
    "start": "1786700",
    "end": "1792149"
  },
  {
    "text": "derived from reading that file\nwill also have that GPS flag set. So pretty\nstraightforward, I think.",
    "start": "1792150",
    "end": "1799590"
  },
  {
    "text": "So what kind of\nthings do we have to taint in terms of Java State.",
    "start": "1799590",
    "end": "1807170"
  },
  {
    "text": "So there's basically five\ntypes of Java objects",
    "start": "1807170",
    "end": "1815990"
  },
  {
    "text": "that need taint flags. ",
    "start": "1815990",
    "end": "1823190"
  },
  {
    "text": "And so the first kind of\nthing is local variables",
    "start": "1823190",
    "end": "1831330"
  },
  {
    "text": "that live in a method. So we can imagine\nback over here,",
    "start": "1831330",
    "end": "1837430"
  },
  {
    "text": "this is a local variable,\nchar c, for example. So we have to assign taint\nflags to those things.",
    "start": "1837430",
    "end": "1844559"
  },
  {
    "text": "You can also imagine\nthat method arguments",
    "start": "1844560",
    "end": "1850560"
  },
  {
    "text": "need to have taint flags. Both of these things here,\nthese live in a stack.",
    "start": "1850560",
    "end": "1859029"
  },
  {
    "text": " So a TaintDroid has to keep\ntrack of assigning flags",
    "start": "1859030",
    "end": "1866090"
  },
  {
    "text": "and whatnot for those\ntypes of things. Also we need to assign flags\nto object instance fields.",
    "start": "1866090",
    "end": "1875460"
  },
  {
    "text": " And so this is like, imagine\nthat I have some object called",
    "start": "1875460",
    "end": "1884669"
  },
  {
    "text": "c, it's a circle so of\ncourse the proper thing to do is I want to look at its radius.",
    "start": "1884670",
    "end": "1889730"
  },
  {
    "text": "Here's a field here. And so we have to associate\ntaint information for each one",
    "start": "1889730",
    "end": "1896690"
  },
  {
    "text": "of these fields here. Java also allows you to\nhave a static class field,",
    "start": "1896690",
    "end": "1906660"
  },
  {
    "text": "and so you need taint\ninformation for those. This is saying something like,\nfor example, maybe the circle",
    "start": "1906660",
    "end": "1916030"
  },
  {
    "text": "that some property, OK,\nwe'll assign some taint information there. Then arrays, as we've\nalready discussed before,",
    "start": "1916030",
    "end": "1924080"
  },
  {
    "text": "we'll assign one piece\nof taint information per that entire array.",
    "start": "1924080",
    "end": "1929350"
  },
  {
    "text": "And so the basic\nidea for how we're going to store these taint flags\nat the implementation level,",
    "start": "1929350",
    "end": "1935450"
  },
  {
    "text": "is that we're going to try\nto basically store the taint",
    "start": "1935450",
    "end": "1941887"
  },
  {
    "text": "flags for a variable\nnear the variable itself.",
    "start": "1941887",
    "end": "1947559"
  },
  {
    "start": "1947560",
    "end": "1953620"
  },
  {
    "text": "The basic idea here is\nwe've got, for example, let's say some integer\nvariable, and we",
    "start": "1953620",
    "end": "1960070"
  },
  {
    "text": "want to store some\ntaint state with that. We want to try to keep that\nstate as close to the variable",
    "start": "1960070",
    "end": "1965429"
  },
  {
    "text": "as possible for reasons\nof making the cache work efficiently at\nthe processor level. So if we were to\nstore taint very far",
    "start": "1965430",
    "end": "1972790"
  },
  {
    "text": "away from that\nvariable, that can be problematic because\nprobably, the interpreter is going to look at the memory\nvalue for the actual Java",
    "start": "1972790",
    "end": "1979250"
  },
  {
    "text": "variable. It's going to want to very\nquickly thereafter, or even before that, look and see\nwhat the taint information is.",
    "start": "1979250",
    "end": "1984990"
  },
  {
    "text": "Because if you look at\nthese operations here, the same places\nin the code where",
    "start": "1984990",
    "end": "1990940"
  },
  {
    "text": "the interpreter's\nlooking at the values, it's also looking at taint. Basically by storing these\nthings close to each other,",
    "start": "1990940",
    "end": "1997710"
  },
  {
    "text": "you try to make the\ncache behavior better. And the way that they\ndo this is actually",
    "start": "1997710",
    "end": "2002840"
  },
  {
    "text": "pretty straightforward. So if you look at what they\ndo for method arguments",
    "start": "2002840",
    "end": "2010660"
  },
  {
    "text": "and local variables\nthat live on a stack, they essentially\nallocate the taint flags",
    "start": "2010660",
    "end": "2016390"
  },
  {
    "text": "right next to where the\nvariables are allocated. So let's say that we have our\nfavorite thing in this class,",
    "start": "2016390",
    "end": "2024860"
  },
  {
    "text": "a stack diagram,\nwhich you'll probably hate after you get out of here. So you've got some local\nvariable 0 on the stack,",
    "start": "2024860",
    "end": "2036740"
  },
  {
    "text": "and then what\nTaintDroid will do is it will store the taint\ntag for that variable",
    "start": "2036740",
    "end": "2042270"
  },
  {
    "text": "right next to where that\nlocal variable is in memory. So similarly, if you had\nanother local variable here,",
    "start": "2042270",
    "end": "2050810"
  },
  {
    "text": "then you would see its\ntaint tag right down here.",
    "start": "2050810",
    "end": "2056899"
  },
  {
    "text": "So on and so forth. Pretty straightforward. So hopefully you\nget these things",
    "start": "2056900",
    "end": "2062566"
  },
  {
    "text": "in the same cache line, that's\ngoing to make the accesses very cheap. Yeah? AUDIENCE: I was just\nwondering, how can you",
    "start": "2062567",
    "end": "2068094"
  },
  {
    "text": "have a single flag\nfor an entire array and a different flag for\nevery property of an object.",
    "start": "2068094",
    "end": "2073810"
  },
  {
    "text": "What if one of the\nmethods of the object can access data which is\nstored in its properties.",
    "start": "2073810",
    "end": "2081023"
  },
  {
    "text": "That would like--\nknow what I mean? PROFESSOR: Let's see. So you're asking as\na policy reason, why?",
    "start": "2081023",
    "end": "2087030"
  },
  {
    "text": "AUDIENCE: As a\npolicy reason, right. PROFESSOR: So I think some of\nthis they do for implementation efficiency reasons.",
    "start": "2087030",
    "end": "2093489"
  },
  {
    "text": "I think that for the case--\nso they have some other rules, too. For example, they say that they\ndon't say a length of the data",
    "start": "2093489",
    "end": "2100232"
  },
  {
    "text": "array, is actually going\nto leak information, so they don't propagate\ntaint for that. So some of it is just for\nreasons of efficiency.",
    "start": "2100232",
    "end": "2107000"
  },
  {
    "text": "I think that in principle, that\nthere's nothing that stops you from saying, take every\nelement in the array",
    "start": "2107000",
    "end": "2114450"
  },
  {
    "text": "and, when you do some\nparticular access on it, then you just say the thing\non the left hand side's going to get the\ntaint, only that items.",
    "start": "2114450",
    "end": "2121741"
  },
  {
    "text": "It's not completely clear\nthat's the right thing to do, though,\nbecause presumably in getting that thing into\nthe array in the first place,",
    "start": "2121741",
    "end": "2128980"
  },
  {
    "text": "the thing that did that\nhad to know something about the array in some way. So I think it's a combination\nof both policy reasons--",
    "start": "2128980",
    "end": "2135100"
  },
  {
    "text": "they think that by being\noverly conservative, you shouldn't allow any data\nleaks that you want to prevent.",
    "start": "2135100",
    "end": "2142200"
  },
  {
    "text": "And also I think that it\nkind of does intuitively make sense that\naccessing an array, you should have to know\nsomething about that array.",
    "start": "2142200",
    "end": "2149160"
  },
  {
    "text": "And when you have to know\nsomething about something, that typically means that\nyou want to get tainted by. ",
    "start": "2149160",
    "end": "2154810"
  },
  {
    "text": "Any other questions? OK, so this is the\nbasic scheme that they use for essentially storing\nall of this information close",
    "start": "2154810",
    "end": "2162830"
  },
  {
    "text": "to each other. So you can imagine\nthat for class fields and for object fields,\nyou do a similar thing. So in the declaration\nof the class,",
    "start": "2162830",
    "end": "2169280"
  },
  {
    "text": "you've got some slot memory for\na particular instance variable, and then right next\nto that slot you",
    "start": "2169280",
    "end": "2174530"
  },
  {
    "text": "have the taint information\nfor that particular variable. So I think that's all\npretty reasonable.",
    "start": "2174530",
    "end": "2181380"
  },
  {
    "text": " That's kind of a high level\noverview of how TaintDroid",
    "start": "2181380",
    "end": "2186780"
  },
  {
    "text": "works, so if you get all\nthis, then the basic idea behind TaintDroid is\nactually pretty simple.",
    "start": "2186780",
    "end": "2193900"
  },
  {
    "text": "So at system initialization\ntime or whatever, TaintDroid looks at all these\nsources of potentially tainted",
    "start": "2193900",
    "end": "2201660"
  },
  {
    "text": "information, and\nessentially assigns a flag to each one of these things. So things like your GPS, your\ncamera, and so on and so forth.",
    "start": "2201660",
    "end": "2207940"
  },
  {
    "text": "As the program\nexecutes, it's going to pull out\nsensitive information from these sensitive sources,\nand then as that kind of thing",
    "start": "2207940",
    "end": "2214720"
  },
  {
    "text": "happens, the\ninterpreter is going to look at all these\ntypes of op codes here and basically\nfollow those policy",
    "start": "2214720",
    "end": "2221640"
  },
  {
    "text": "rules in the table on\nthe paper, and figure out how to propagate taint\nthrough the system.",
    "start": "2221640",
    "end": "2226780"
  },
  {
    "text": "So the most interesting\npart is what happens if data attempts\nto exfiltrate itself.",
    "start": "2226780",
    "end": "2232570"
  },
  {
    "text": "So essentially, TaintDroid can\nsit at the network interfaces and they can see everything that\ntries to go over the network",
    "start": "2232570",
    "end": "2238319"
  },
  {
    "text": "interface. We actually look at\nthe taint tags there and we can say if data that's\ntrying to leave the network",
    "start": "2238320",
    "end": "2244520"
  },
  {
    "text": "has one or more taint\nflags, then we will say no. That data will not be\nallowed to go in the network.",
    "start": "2244520",
    "end": "2252060"
  },
  {
    "text": "Now what happens at\nthat point is actually kind of application-dependent.",
    "start": "2252060",
    "end": "2257090"
  },
  {
    "text": "You could imagine that\nTaintDroid shows an alert to the user which\nsays hey, somebody's trying to send your\nlocation over the network.",
    "start": "2257090",
    "end": "2264859"
  },
  {
    "text": "You could imagine that\nmaybe TaintDroid has some policies that are\nbuilt in which, for example, maybe it allows that\nnetwork flow to go out,",
    "start": "2264859",
    "end": "2271390"
  },
  {
    "text": "but it zeros out all\nthat sensitive data, so on and so forth. That's from a certain\nperspective, a little bit",
    "start": "2271390",
    "end": "2276895"
  },
  {
    "text": "orthogonal to the\ncore contribution of the paper, which is to\nfind those data exfiltrations in the first place.",
    "start": "2276895",
    "end": "2283335"
  },
  {
    "text": "In the evaluation\nsection of the paper, they discuss some of the\nthings that they found. They do find that\nAndroid applications will",
    "start": "2283335",
    "end": "2290740"
  },
  {
    "text": "try to exfiltrate\ndata in ways that were not exposed to the user. So for example, they will\ntry to use your location",
    "start": "2290740",
    "end": "2297187"
  },
  {
    "text": "for advertisements, they\nwill send your phone number and things like this\nto remote servers. Once again, it's important to\nnote that these applications,",
    "start": "2297187",
    "end": "2306170"
  },
  {
    "text": "typically they weren't\nbreaking the Android security",
    "start": "2306170",
    "end": "2311200"
  },
  {
    "text": "model in the sense\nthat the user had allowed these applications\nwith access to the network,",
    "start": "2311200",
    "end": "2316350"
  },
  {
    "text": "for example. Or they had allowed\nthese applications to have access to things\nlike a contact list. However, the\napplications did not",
    "start": "2316350",
    "end": "2323140"
  },
  {
    "text": "exposed to the user in the\nEULA, in the End User License Agreement, that hey, I'm going\nto take your phone number",
    "start": "2323140",
    "end": "2328360"
  },
  {
    "text": "and actually send it to\nsome server in Silk Road 8 or whatever.",
    "start": "2328360",
    "end": "2334280"
  },
  {
    "text": "That's actually misleading and\ndeceptive, because most users, if they'd actually\nseen that in the EULA and they'd known\nthat was happening,",
    "start": "2334280",
    "end": "2340299"
  },
  {
    "text": "they might have at least\nhad a second thought about whether they want to install\nthis application or not. AUDIENCE: Is it reasonable to\nguess that even if they put it",
    "start": "2340299",
    "end": "2348914"
  },
  {
    "text": "in the EULA, that\nthat's not really worth it because people\nnever read those. PROFESSOR: Yes, it\nis, in fact, quite",
    "start": "2348915",
    "end": "2354080"
  },
  {
    "text": "reasonable to assume that. So even well trained computer\nscientists like myself do not always check out\nthe EULA because it's",
    "start": "2354080",
    "end": "2359820"
  },
  {
    "text": "like, you gotta\nhave Flappy Birds or what are you going to do. I think what is useful,\nthough, and this",
    "start": "2359820",
    "end": "2365794"
  },
  {
    "text": "is kind of spiritually\nunsatisfying but useful in practice, is that if\nit is put in the EULA, then maybe there will be\nsome virtuous individuals who",
    "start": "2365794",
    "end": "2372330"
  },
  {
    "text": "do actually read the EULA. AUDIENCE: And they\ncould tell you like-- PROFESSOR: That's\nright, that's right. AUDIENCE: --don't do that one. PROFESSOR: Yeah,\nConsumer Reports",
    "start": "2372330",
    "end": "2377960"
  },
  {
    "text": "or some moral equivalent will\nsay our job is to read EULAs, and by the way, you\nshouldn't download this app.",
    "start": "2377960",
    "end": "2383526"
  },
  {
    "text": "But you're exactly correct\nthat relying on users to read pages of tiny\nprint is basically-- they're not going to do it.",
    "start": "2383526",
    "end": "2389470"
  },
  {
    "text": "They're going to hit Next\nand then keep on going. OK, so any questions\nup to this point?",
    "start": "2389470",
    "end": "2397500"
  },
  {
    "text": "I think that the rules\nfor how information",
    "start": "2397500",
    "end": "2402890"
  },
  {
    "text": "flows through the system\nare fairly straightforward. So as we were discussing,\nit's basically taint from the right hand\nside goes to the left side.",
    "start": "2402890",
    "end": "2410400"
  },
  {
    "text": "Sometimes, though, these\ninformation flow rules can have somewhat\ncounterintuitive results. So imagine that\nan application is",
    "start": "2410400",
    "end": "2417579"
  },
  {
    "text": "going to implement its\nown linked list class. So it's going to define some\nsimple class up here called",
    "start": "2417580",
    "end": "2428550"
  },
  {
    "text": "ListNode and it's going to\nhave an object field for data.",
    "start": "2428550",
    "end": "2435020"
  },
  {
    "text": "And then it will have\na ListNode object which represents the next\nthing in the linked list.",
    "start": "2435020",
    "end": "2446310"
  },
  {
    "text": "Suppose if the application\nassigned some tainted data to this field here.",
    "start": "2446310",
    "end": "2454590"
  },
  {
    "text": "Some sensitive data derived\nfrom a GPS or whatever. So one question\nyou might have is",
    "start": "2454590",
    "end": "2459809"
  },
  {
    "text": "what happens when we calculate\nthe length for this list. Should the length of\nthe list be tainted?",
    "start": "2459810",
    "end": "2468660"
  },
  {
    "text": "It may strike you as\na bit counterintuitive that the answer is probability\nno, at least in the way",
    "start": "2468660",
    "end": "2473920"
  },
  {
    "text": "that TaintDroid and a\nlot of these systems define information flow. So what does it mean to add\na node to the linked list.",
    "start": "2473920",
    "end": "2485530"
  },
  {
    "text": "It basically means three things. So the first thing you do\nis you allocate a new list",
    "start": "2485530",
    "end": "2493450"
  },
  {
    "text": "node to contain this new\ndata that you want to add. Then the second thing you\ndo is you assign to the data",
    "start": "2493450",
    "end": "2505420"
  },
  {
    "text": "field of this new node. And then the third\nthing that you do is you do some type of patch\nup of the next pointers",
    "start": "2505420",
    "end": "2517140"
  },
  {
    "text": "to actually splice the\nnode into the list.",
    "start": "2517140",
    "end": "2522380"
  },
  {
    "text": "What's interesting is that\nthis step here doesn't actually involve the data field at all.",
    "start": "2522380",
    "end": "2528960"
  },
  {
    "text": "Just looking at\nthese next values. Right, so what's interesting\nis that since only these data",
    "start": "2528960",
    "end": "2534820"
  },
  {
    "text": "objects are tainted, how we\ncalculate the length of a list.",
    "start": "2534820",
    "end": "2540000"
  },
  {
    "text": "We basically start\nfrom some head node and we traverse\nthese next pointers, and we count how\nmany we traverse.",
    "start": "2540000",
    "end": "2545050"
  },
  {
    "text": "So that algorithm is not going\nto touch the tainted data at all. So interestingly, even if\nyou have a linked list that's",
    "start": "2545050",
    "end": "2551990"
  },
  {
    "text": "filled with tainted\ndata, then just calculating the\nlength of that list",
    "start": "2551990",
    "end": "2558410"
  },
  {
    "text": "won't actually result in\nthe generation of value that is tainted at all.",
    "start": "2558410",
    "end": "2563630"
  },
  {
    "text": "So does that makes sense? That may seem a little\nbit counterintuitive, and this is one of\nthe reasons why,",
    "start": "2563630",
    "end": "2569230"
  },
  {
    "text": "for example, like when we\nwere talking about the array, for example. They say array.length,\nI'm not going",
    "start": "2569230",
    "end": "2574410"
  },
  {
    "text": "to generate any taint for that. It's because of\nreasons like this.",
    "start": "2574410",
    "end": "2580390"
  },
  {
    "text": "If you wanted a\nstronger assurance about-- not stronger assurance.",
    "start": "2580390",
    "end": "2586810"
  },
  {
    "text": "But if you actually\nwant to calculate the length of the list to\ngenerate a kind of value,",
    "start": "2586810",
    "end": "2594619"
  },
  {
    "text": "we could imagine that\nyour implementation, it's a bit goofy, but you can\njust decide to touch data",
    "start": "2594620",
    "end": "2599857"
  },
  {
    "text": "for no real semantic reason\nother than to generate taint in the resulting length. Or, as I'll discuss towards\nthe end of the lecture,",
    "start": "2599857",
    "end": "2606280"
  },
  {
    "text": "you could actually\nuse a language which allows you the\nprogrammer to define",
    "start": "2606280",
    "end": "2611740"
  },
  {
    "text": "your own types of taint. And then you can actually\ndefine your own policies for things like this.",
    "start": "2611740",
    "end": "2618280"
  },
  {
    "text": "One nice thing about TaintDroid\nis that you as a developer, you don't have to\nlabel anything. TaintDroid basically\ndoes that for you.",
    "start": "2618280",
    "end": "2624144"
  },
  {
    "text": "It says here's all the sensitive\nstuff that can be a source, here's all the sensitive\nstuff that can be a sink. You as a developer,\nyou're ready to go.",
    "start": "2624144",
    "end": "2631104"
  },
  {
    "text": "But if you want that\npointer to be controlled, you might have to build some\nof the policies yourself.",
    "start": "2631104",
    "end": "2636700"
  },
  {
    "text": "All right, so in terms\nof performance overhead",
    "start": "2636700",
    "end": "2644364"
  },
  {
    "text": "of TaintDroid, what\ndoes that look like?  The overheads actually seem\nto be pretty reasonable.",
    "start": "2644364",
    "end": "2651710"
  },
  {
    "text": "So there's going to be\nmemory overhead, and that's the memory overhead,\nessentially,",
    "start": "2651710",
    "end": "2658070"
  },
  {
    "text": "of storing all of\nthese taint tags. And so there's going\nto be CPU overhead,",
    "start": "2658070",
    "end": "2667320"
  },
  {
    "text": "and this is basically to\nassign, propagate, and check those taint calculations.",
    "start": "2667320",
    "end": "2674720"
  },
  {
    "text": "And that's because of\noverhead like here. So any interpreting\nfor the Dalvik VM, we're actually doing\nadditional work.",
    "start": "2674720",
    "end": "2680470"
  },
  {
    "text": "So looking at the source,\nlooking at this 32 bit taint information, we're\ndoing the or operations",
    "start": "2680470",
    "end": "2687209"
  },
  {
    "text": "that we discussed before,\nand so on and so forth. So that's\ncomputational overhead.",
    "start": "2687209",
    "end": "2692260"
  },
  {
    "text": "These overheads actually\nseem to be pretty moderate. So for memory, the authors\nreport about 3% to 5%",
    "start": "2692260",
    "end": "2701540"
  },
  {
    "text": "in terms of the\nextra RAM space you need to store those taint tags. So that's not too bad.",
    "start": "2701540",
    "end": "2707549"
  },
  {
    "text": "The CPU overhead is higher,\nwhich I think makes sense. They're both somewhere between,\nlet's say, 3% and about 29% CPU",
    "start": "2707550",
    "end": "2718609"
  },
  {
    "text": "overhead. And the reason why I think it's\nreasonable to see why that's higher is because you can\nimagine that every time you",
    "start": "2718610",
    "end": "2727079"
  },
  {
    "text": "step into the\ninterpreter loop, you're having to look at these\ntags and do some operations. So even though it is all\nthese bitwise operations,",
    "start": "2727080",
    "end": "2734849"
  },
  {
    "text": "you have to do\nthat all the time. So that seems like it's going to\nget painful, whereas basically,",
    "start": "2734850",
    "end": "2739960"
  },
  {
    "text": "the overhead for this, OK, so\nyou put a couple extra integers in memory somewhere. That doesn't seem,\nmaybe, too bad.",
    "start": "2739960",
    "end": "2748340"
  },
  {
    "text": "Even on it's high end, 29%,\nin of itself maybe that's OK,",
    "start": "2748340",
    "end": "2753570"
  },
  {
    "text": "because Silicon Valley\nkeeps telling us that we need phones that have\nlike quad cores and whatnot,",
    "start": "2753570",
    "end": "2759080"
  },
  {
    "text": "so probably have a lot of\nspare cycles sitting around. So maybe that's not\nall that crushing. Although there might be a\nproblem with battery life.",
    "start": "2759080",
    "end": "2766750"
  },
  {
    "text": "So even if you have\nthese extra cores, you might not want your phone\ngetting hot in your pocket as you're just sitting\nthere, just sort",
    "start": "2766750",
    "end": "2772950"
  },
  {
    "text": "of churning and calculating\nsome of this stuff. I think for here,\nthe main issue here would be if this is\nbad for your battery.",
    "start": "2772950",
    "end": "2779400"
  },
  {
    "text": "If it's not bad\nfor your battery, then probably even at that high\nend, that may not be that bad. ",
    "start": "2779400",
    "end": "2788800"
  },
  {
    "text": "So that is essentially\nan overview of how TaintDroid works. Any more questions before we--",
    "start": "2788800",
    "end": "2794564"
  },
  {
    "text": "AUDIENCE: Do you tag\nsomething that also has been there all the time? Do you tag every\nvariable, or only",
    "start": "2794564",
    "end": "2801698"
  },
  {
    "text": "tag the ones that have this? PROFESSOR: Yes, so you\nbasically tag everything.",
    "start": "2801698",
    "end": "2806839"
  },
  {
    "text": "So in theory, there's\nnothing that prevents you",
    "start": "2806840",
    "end": "2812518"
  },
  {
    "text": "from not allocating any taint\ninformation for stuff that has no taint at all.",
    "start": "2812518",
    "end": "2817750"
  },
  {
    "text": "I think the problem,\nthen, with it-- then once something gains\neven one bit of taint,",
    "start": "2817750",
    "end": "2824545"
  },
  {
    "text": "then you have to do dynamic\nsort of layout changes. So what if on the stack,\nthis local here, then it",
    "start": "2824545",
    "end": "2831670"
  },
  {
    "text": "had a taint, so now you're\nallocating with this, and it does get taint. Or you have that extra\ntaint flag live on the heap, and you're going to see\nhow it rewrites the stack,",
    "start": "2831670",
    "end": "2838020"
  },
  {
    "text": "and then someone made\nyour code-- so we're going to see how that works. So in practice, typical use\nis like shadow memory somehow,",
    "start": "2838020",
    "end": "2845210"
  },
  {
    "text": "so every byte in the\napplication is backed up by some byte of extra\ninformation somewhere.",
    "start": "2845210",
    "end": "2852060"
  },
  {
    "text": "And in the case of TaintDroid,\nthat shadowing actually lives alongside of the\nactual variable itself. Anyone has another question?",
    "start": "2852060",
    "end": "2860060"
  },
  {
    "text": "OK. Cool. This system essentially\ntracks information",
    "start": "2860060",
    "end": "2866720"
  },
  {
    "text": "at the level of these high\nlevel Dalvik VM instructions.",
    "start": "2866720",
    "end": "2873840"
  },
  {
    "text": "So one thing you might\nthink to yourself",
    "start": "2873840",
    "end": "2879310"
  },
  {
    "text": "is, could we track taint at\nthe level of x86 instructions",
    "start": "2879310",
    "end": "2891230"
  },
  {
    "text": "or the ARM instructions. ",
    "start": "2891230",
    "end": "2897797"
  },
  {
    "text": "One reason why that\nmight be useful is because then\nwe could actually understand how information flows\nthrough arbitrary applications,",
    "start": "2897797",
    "end": "2906650"
  },
  {
    "text": "not just ones that are running\ninside this tricked out VM that requires you to run\nJava and so on and so forth.",
    "start": "2906650",
    "end": "2913270"
  },
  {
    "text": "So why not track\ntaint at that level. It turns out that you\ncan, in fact, do that.",
    "start": "2913270",
    "end": "2919200"
  },
  {
    "text": "So there are projects that we\nlooked at at tracking taint at this low level. What's nice is that you maybe\nget that increased coverage.",
    "start": "2919200",
    "end": "2926768"
  },
  {
    "text": "You don't throw a\nline into [INAUDIBLE] for how, for example, Java\ncode interacts with native code methods.",
    "start": "2926768",
    "end": "2932060"
  },
  {
    "text": "It's all eventually\ngoing to result down to x86 instructions\nexecuted, so that removed a lot of the manual\neffort that you as a developer",
    "start": "2932060",
    "end": "2938740"
  },
  {
    "text": "have to do to sort of understand\nit's the taint semantics if you use native methods. But the problem with that, if\nwe track at this low level,",
    "start": "2938740",
    "end": "2947210"
  },
  {
    "text": "it can be very\nexpensive to do this. You can also get a lot\nof false positives.",
    "start": "2947210",
    "end": "2957460"
  },
  {
    "text": "So if they're spec'd\nto the expense, there's also this\nissue of correctness.",
    "start": "2957460",
    "end": "2964216"
  },
  {
    "text": " As you may know, x86 is\nan adversarially complex",
    "start": "2964217",
    "end": "2971050"
  },
  {
    "text": "instruction set. There's all kinds of crazy\nthings that it can do. I don't know if you've ever\nseen an x86 instruction manual,",
    "start": "2971050",
    "end": "2978540"
  },
  {
    "text": "they're huge. So they'll have one huge\nmanual that's this thick, and then it'll say this is\ninstructions whose letters",
    "start": "2978540",
    "end": "2985710"
  },
  {
    "text": "start with M through P, and\nthere'll be this full on series about that. So it's actually\npretty tricky to think",
    "start": "2985710",
    "end": "2992270"
  },
  {
    "text": "about what it means to\nactually track taint at the level of x86 instruction. Because even seemingly\nsimple instructions,",
    "start": "2992270",
    "end": "2999605"
  },
  {
    "text": "like sometimes at,\nthey're setting all types of internal\nprocessor registers and flags and things like that.",
    "start": "2999605",
    "end": "3005840"
  },
  {
    "text": "So it's very difficult to\ndescribe in the first place. If you could do that, it's\nalso oftentimes very expensive.",
    "start": "3005840",
    "end": "3012220"
  },
  {
    "text": "You're sort of looking at things\nat a very, very low level. So the amount of state\nyou have to track",
    "start": "3012220",
    "end": "3018310"
  },
  {
    "text": "might get very\nlarge very quickly. It might be a very sensitive\ncomputational clause. Then there's this issue\nof false positives.",
    "start": "3018310",
    "end": "3025089"
  },
  {
    "text": "This is actually\npretty devastating. You can get into bad\nproblems if you ever",
    "start": "3025090",
    "end": "3034576"
  },
  {
    "text": "have kernel data that\nimproperly gets tainted.",
    "start": "3034576",
    "end": "3042729"
  },
  {
    "text": " And if this happens, maybe\nbecause your infrastructure's",
    "start": "3042729",
    "end": "3052960"
  },
  {
    "text": "trying to be ultraconservative,\nit doesn't want to miss anything,\nso it says well, I'm going to err on\nthe side of security.",
    "start": "3052960",
    "end": "3059480"
  },
  {
    "text": "And I'm going to taint some\nof this kernel data structure, then what you get here is\nthis exciting term they",
    "start": "3059480",
    "end": "3067470"
  },
  {
    "text": "call taint explosion. What this basically means\nis that at a certain point, there are certain things that\nif they end up getting tainted,",
    "start": "3067470",
    "end": "3073780"
  },
  {
    "text": "they're involved in\nso many calculations that essentially everything\nin your program gets polluted. It's like one of these things\nin Dungeons and Dragons",
    "start": "3073780",
    "end": "3080550"
  },
  {
    "text": "where you touch this\nevil thing and eventually death spreads\nthroughout your body.",
    "start": "3080550",
    "end": "3086395"
  },
  {
    "text": "This is very bad, because\nif you can't tightly constrain the way that taint\nflows through the system,",
    "start": "3086395",
    "end": "3092140"
  },
  {
    "text": "then eventually what's\ngoing to end up happening is that you let this\nrun for a while, the system's going to say\nyou can't do anything. You can't send anything\nover the network,",
    "start": "3092140",
    "end": "3098963"
  },
  {
    "text": "you can't display\nanything on the screen, because everything\nin your system seems like it's been tainted\nby some sensitive error,",
    "start": "3098964",
    "end": "3104700"
  },
  {
    "text": "even if that's not the case. One way that this can\nhappen is if somehow",
    "start": "3104700",
    "end": "3113980"
  },
  {
    "text": "the stack pointer or the\nbreak pointer get tainted.",
    "start": "3113980",
    "end": "3119700"
  },
  {
    "text": " If this happens, you're\nprobably in a world of hurt.",
    "start": "3119700",
    "end": "3126819"
  },
  {
    "text": "You can imagine that all\nof the instructions in x86, for example, that access the\nstack, they all go through ESB.",
    "start": "3126819",
    "end": "3135100"
  },
  {
    "text": "So the stack register gets\ncorrupted somehow, that's bad. If the break point\nregister gets bad,",
    "start": "3135100",
    "end": "3140910"
  },
  {
    "text": "a lot of times when you want\nyour equivalents to access local variables, it has\nto go the EBP indirectly.",
    "start": "3140910",
    "end": "3148238"
  },
  {
    "text": "So if anybody ever touches\nthose in terms of taint, it's basically game over. So there's a link in\nthe lecture that's",
    "start": "3148238",
    "end": "3153980"
  },
  {
    "text": "about a paper that\nacknowledges some of this stuff and basically says that we have\nto be very careful when we do",
    "start": "3153980",
    "end": "3159540"
  },
  {
    "text": "taint tracking at this low level\nbecause very quickly, if you're looking at how this works\nin the Linux kernel, there are certain optimizations\nthe Linux kernel would do",
    "start": "3159540",
    "end": "3166564"
  },
  {
    "text": "to make its code fast, but\nwill result, unintentionally, in the break pointer or the\nstack pointer getting tainted.",
    "start": "3166564",
    "end": "3171960"
  },
  {
    "text": "And once that happens, you\ncan't really do anything useful with the taint tracking system. AUDIENCE: So how do you do\nthis [INAUDIBLE] programs?",
    "start": "3171960",
    "end": "3181316"
  },
  {
    "text": "It seems like you have all\nthese register files in the CPU. PROFESSOR: Yeah, so great. So all those register\nfiles, it hangs back",
    "start": "3181316",
    "end": "3188261"
  },
  {
    "text": "to the correctness case. So unless you are\nvery, very good at understanding\nx86 architecture, there are going to be\nthings that you miss.",
    "start": "3188261",
    "end": "3194694"
  },
  {
    "text": "It terms of computation\nlevel, how do you actually do this thing. There's this-- I think\nthe most popular way,",
    "start": "3194694",
    "end": "3202307"
  },
  {
    "text": "and I could be wrong about this. So when I say it's\npopular, the way I know about, because I'm a\nknowledge [INAUDIBLE], right.",
    "start": "3202307",
    "end": "3208010"
  },
  {
    "text": "There's this system\nsubmitter called Bochs, I think it's spelled like this.",
    "start": "3208010",
    "end": "3215552"
  },
  {
    "text": "They actually have\nsomething called TaintBochs, which actually does\nx86 level innuation of flow.",
    "start": "3215552",
    "end": "3223600"
  },
  {
    "text": "And it's actually\nan interpreter, you can think of it as. So it's going to take\nyour entire OS and all",
    "start": "3223600",
    "end": "3230166"
  },
  {
    "text": "your applications,\nand it's going to look at each x86\ninstruction and try to simulate",
    "start": "3230166",
    "end": "3235450"
  },
  {
    "text": "what the hardware would do. So you can imagine this\nis very, very slow. What's nice about that is you\ndon't require any hardware",
    "start": "3235450",
    "end": "3240940"
  },
  {
    "text": "support, and then it's\nrelatively straightforward to tweak your software\nmodel of how things work,",
    "start": "3240940",
    "end": "3246794"
  },
  {
    "text": "if you discovered\nthat you weren't tracking some registered\nfiles or something like that. AUDIENCE: So the ideal solution\nwould be architectural support.",
    "start": "3246794",
    "end": "3254114"
  },
  {
    "text": "PROFESSOR: Yeah,\nso there have been techniques to do that, too. That gets a little bit\nsubtle because, for example,",
    "start": "3254114",
    "end": "3262179"
  },
  {
    "text": "if you look here\nyou've looked at how we've allocated the taint\nstate next to the variables",
    "start": "3262179",
    "end": "3267488"
  },
  {
    "text": "themselves. So if you bake in that\nsupport in the hardware, it can be very difficult to,\nfor example, change the way",
    "start": "3267488",
    "end": "3274565"
  },
  {
    "text": "you want the layout to work. Because then it's like\nbaked into the silicon. You could imagine doing some of\nthis because at a high level--",
    "start": "3274565",
    "end": "3282258"
  },
  {
    "text": "where do we have it. So the Dalvik VM and TaintDroid\nis executing these high level",
    "start": "3282258",
    "end": "3287716"
  },
  {
    "text": "instructions and it's\nassigning taint at this level. You can imagine doing that\nat the hardware level, too. So actually, if\nthis is the silicon,",
    "start": "3287716",
    "end": "3293840"
  },
  {
    "text": "you can probably make that work. So that's definitely possible. You had a question? AUDIENCE: What\ndoes TaintDroid do",
    "start": "3293840",
    "end": "3300840"
  },
  {
    "text": "with information built from\nbranching and permission tests. PROFESSOR: Oh, we're going\nto get to that in a second.",
    "start": "3300840",
    "end": "3306090"
  },
  {
    "text": "So just hold that thought,\nwe're going to get to that. AUDIENCE: I'm curious,\nhow long was it to things like buffer overflow\nbecause all the things are so",
    "start": "3306090",
    "end": "3313796"
  },
  {
    "text": "nested together [INAUDIBLE]? ",
    "start": "3313796",
    "end": "3318849"
  },
  {
    "text": "PROFESSOR: That's\na good question. So presumably, one would hope\nthat in a language like Java",
    "start": "3318850",
    "end": "3324530"
  },
  {
    "text": "there are no buffer\noverflow, right. But you can imagine\nin a language like C, for example, where you\ndidn't have this protection,",
    "start": "3324530",
    "end": "3331700"
  },
  {
    "text": "maybe there's something\ncatastrophic that could happen or somehow, if you\ndid a buffer overflow and then you were able\nto overwrite taint tags",
    "start": "3331700",
    "end": "3337880"
  },
  {
    "text": "and you could set this to\nzeros, then you could just let your data exfiltrate. AUDIENCE: I think if\nit's super predictable,",
    "start": "3337880",
    "end": "3345196"
  },
  {
    "text": "like one every other one\nfor the next q variables, there's no stacking-- PROFESSOR: I was going to\nsay, that's exactly right.",
    "start": "3345196",
    "end": "3351546"
  },
  {
    "text": "So you run into\nsomewhat similar issues like what we can discuss\nwith the stack canaries, because basically we have\nthis data on the stack,",
    "start": "3351546",
    "end": "3357520"
  },
  {
    "text": "like in this particular\nlayout, that you don't neither want to make it\nimpossible to overwrite,",
    "start": "3357520",
    "end": "3362720"
  },
  {
    "text": "or if it is overwritten, one\nthat's hacked in some way. So you're exactly\nright about that. ",
    "start": "3362720",
    "end": "3372119"
  },
  {
    "text": "So you can in fact do taint\ntracking at this low level although it may be expensive\nand a little bit difficult",
    "start": "3372120",
    "end": "3378360"
  },
  {
    "text": "to get right. So you might say well,\nwhy don't we just punt on this whole issue of taint\ntracking in the first place",
    "start": "3378360",
    "end": "3384313"
  },
  {
    "text": "and instead we're just\ngoing to look at the things that the program tries to output\nover the network, let's say,",
    "start": "3384313",
    "end": "3389450"
  },
  {
    "text": "and just do a scan for\ndata that seems sensitive. That seems to be much\nmore lightweight, you don't have to do this\ndynamic instrumentation of all",
    "start": "3389450",
    "end": "3397240"
  },
  {
    "text": "the things the program's doing. The problem with that,\nthough, is that that will only work as a heuristic.",
    "start": "3397240",
    "end": "3403210"
  },
  {
    "text": "In fact, if the attacker knows\nthat this is what you're doing, then it's pretty\neasy to subvert that. So if you're just\nsitting there and you're",
    "start": "3403210",
    "end": "3409620"
  },
  {
    "text": "trying to do a grep for numbers,\nSocial Security numbers, then the attacker can\njust use base 64 encoding,",
    "start": "3409620",
    "end": "3417030"
  },
  {
    "text": "or do some other wacky\nthing, compress it. It's actually trivial to get\npast that type of filter. So in practice,\nthat's completely",
    "start": "3417030",
    "end": "3423359"
  },
  {
    "text": "insufficient from the\nsecurity perspective. Now let's get back\nto the question that you brought up,\nwhich was basically",
    "start": "3423360",
    "end": "3431650"
  },
  {
    "text": "how can we track flows\nthrough things like branches, for example.",
    "start": "3431650",
    "end": "3437289"
  },
  {
    "text": "So this is basically\ngoing to lead us to a topic that's\ncalled implicit flows.",
    "start": "3437290",
    "end": "3447450"
  },
  {
    "text": "And so an implicit\nflow occurs typically when you have a\ntainted value that's",
    "start": "3447450",
    "end": "3452539"
  },
  {
    "text": "going to affect the way that\nanother variable is assigned,",
    "start": "3452540",
    "end": "3458560"
  },
  {
    "text": "even though that implicit\nflow variable doesn't directly assign variables. This will make more sense\nwith a concrete example.",
    "start": "3458560",
    "end": "3466470"
  },
  {
    "text": "Let's say that you have an if\nstatement that does something",
    "start": "3466470",
    "end": "3471980"
  },
  {
    "text": "like, it's going to\nlook at your INEI and it's going to say\nif it's greater than 42,",
    "start": "3471980",
    "end": "3478109"
  },
  {
    "text": "maybe I'm going\nto assign 0 to x.",
    "start": "3478110",
    "end": "3483340"
  },
  {
    "text": "Otherwise I'm going to assign 1.",
    "start": "3483340",
    "end": "3488350"
  },
  {
    "text": "So what's interesting\nhere is that we're looking at this\nsensitive data here",
    "start": "3488350",
    "end": "3494240"
  },
  {
    "text": "and we're doing some\ncomparison of it up here, but when we're assigning\nto x down here,",
    "start": "3494240",
    "end": "3499609"
  },
  {
    "text": "we're not actually\nassigning something that is directly derived\nfrom the sensitive data here.",
    "start": "3499610",
    "end": "3506940"
  },
  {
    "text": "This is an example of one\nof these implicit flows. Because the value\nof x is actually dependent on this thing\nhere, but the adversary,",
    "start": "3506940",
    "end": "3514880"
  },
  {
    "text": "if they're clever, can sort of\nstructure their code in a way that there's no\ndirect assignment. Now note that even here,\ninstead of just assigning to x,",
    "start": "3514880",
    "end": "3522427"
  },
  {
    "text": "you can just say let's\ntry to send something over the network. You might say over\nthe network x is 0,",
    "start": "3522427",
    "end": "3528440"
  },
  {
    "text": "or x is 1, or\nsomething like that. So that's an example of one\nof these implicit flows that",
    "start": "3528440",
    "end": "3533860"
  },
  {
    "text": "a system like TaintDroid\ncannot actually handle. So do people sort of see the\nproblem here at a high level?",
    "start": "3533860",
    "end": "3540990"
  },
  {
    "text": "Yes. This is called an\nexplicit flow as contrast to those direct flows like\nfrom the assignment operator.",
    "start": "3540990",
    "end": "3548042"
  },
  {
    "text": "AUDIENCE: What if [INAUDIBLE]\na native power function that",
    "start": "3548042",
    "end": "3555838"
  },
  {
    "text": "did exactly [INAUDIBLE]?  Because the output in\nthat case would be, right?",
    "start": "3555838",
    "end": "3563355"
  },
  {
    "text": "PROFESSOR: Well, let's see. So it depends. So if I understand your\nquestion correctly, you're saying there could\nbe some native function that",
    "start": "3563355",
    "end": "3569930"
  },
  {
    "text": "does something that's sort\nof equivalent to this, and so for example, TaintDroid\nwouldn't know necessarily, because it can't look\ninside this native code",
    "start": "3569930",
    "end": "3575890"
  },
  {
    "text": "to see this type of thing. The way that the authors\nclaim that they would handle",
    "start": "3575890",
    "end": "3580925"
  },
  {
    "text": "that is that they would say for\nnative methods that are defined by the VM itself, they\nwould look at the contract",
    "start": "3580925",
    "end": "3587380"
  },
  {
    "text": "that method exposes\nand they might say things like I take\nthese two integers and then return the average.",
    "start": "3587380",
    "end": "3592980"
  },
  {
    "text": "So then the TaintDroid\nsystem would say we trust that the native\nfunction does that, so we need to figure out what\nthe appropriate tainting",
    "start": "3592980",
    "end": "3599224"
  },
  {
    "text": "policy should be. However, you are correct\nthat if something like this was sort of hidden inside and\nfor whatever reason wasn't",
    "start": "3599224",
    "end": "3605880"
  },
  {
    "text": "exposed to the\npublic-facing contract, then the manual policy that the\nTaintDroid authors came up with",
    "start": "3605880",
    "end": "3613310"
  },
  {
    "text": "might not catch\nthis implicit flow. It might actually\nallow information to leak out somehow. But I mean for that\nmatter, there might even",
    "start": "3613310",
    "end": "3619367"
  },
  {
    "text": "be a direct flow in there that\nthe TaintDroid authors couldn't see and you might still have\nan even more direct leak.",
    "start": "3619367",
    "end": "3626958"
  },
  {
    "text": "AUDIENCE: So in practice, this\nseems very dangerous, right? Because you can literally send\nthe whole [INAUDIBLE] value",
    "start": "3626958",
    "end": "3632862"
  },
  {
    "text": "by just looking at\nthis last three-- PROFESSOR: That's right.",
    "start": "3632862",
    "end": "3638869"
  },
  {
    "text": "We had class a few times where\nyou'd sit in a while loop and you'd try to construct\nthese implicit flows to do these types of things.",
    "start": "3638870",
    "end": "3644050"
  },
  {
    "text": "There's actually\nsome ways that you can think about trying to\nfix some of this stuff.",
    "start": "3644050",
    "end": "3649390"
  },
  {
    "text": "At a high level,\none approach you can do to try to\nprevent this stuff is you can actually assign\na taint tag to the PC.",
    "start": "3649390",
    "end": "3663599"
  },
  {
    "text": " Then essentially you taint\nit with the branch test.",
    "start": "3663600",
    "end": "3678690"
  },
  {
    "text": "So the idea here is that we as\nhumans can look at this code here and we can tell that\nthere's this implicit flow",
    "start": "3678690",
    "end": "3685380"
  },
  {
    "text": "here, because we know\nthat somehow to get here, we had to look at\nthe sensitive data. So what does that mean at\nthe implementation level?",
    "start": "3685380",
    "end": "3692480"
  },
  {
    "text": "That means that to\nget here, there's something about the PC that has\nbeen tainted by sensitive data.",
    "start": "3692480",
    "end": "3699180"
  },
  {
    "text": "To say that we\nhave gotten here is to say the PC has been\nset to here or to here. At a high level we could\nimagine that the system would",
    "start": "3699180",
    "end": "3708089"
  },
  {
    "text": "do some analysis\nand it would say that at this point in the code,\nthe PC has no taint at all.",
    "start": "3708090",
    "end": "3714050"
  },
  {
    "text": "At this point, it gets\ntainted somehow by the INEI, and at this point here, it's\ngoing to have that taint.",
    "start": "3714050",
    "end": "3721819"
  },
  {
    "text": "So what will end up happening\nis that if x is a variable that initially shows up with\nno taint maybe we'll",
    "start": "3721820",
    "end": "3728090"
  },
  {
    "text": "say OK, at this\npoint, it's actually going to give the taint of\nthe PC which is actually going to taint it there.",
    "start": "3728090",
    "end": "3733450"
  },
  {
    "text": "So there's some sublety\nhere that I'm glossing over, but at a high level that's\nhow you can capture some of these flows here by\nactually looking and seeing how",
    "start": "3733450",
    "end": "3740450"
  },
  {
    "text": "the PC is getting\nset, and then trying to propagate that to the\ntargets of these if statements.",
    "start": "3740450",
    "end": "3748190"
  },
  {
    "text": "Does that all makes sense? OK. And if you're interested\nin learning more about this, come talk to me,\nthere's been a lot of research",
    "start": "3748190",
    "end": "3756005"
  },
  {
    "text": "into this kind of stuff. However, you can imagine that\nthe system I just described",
    "start": "3756005",
    "end": "3761280"
  },
  {
    "text": "may be too conservative\nonce again. So imagine that instead\nof having this code here,",
    "start": "3761280",
    "end": "3769770"
  },
  {
    "text": "this was also 0. So in this dump case,\nthere's absolutely no reason",
    "start": "3769770",
    "end": "3776300"
  },
  {
    "text": "to taint x with anything\nrelated to the INEI, because you didn't actually\nleak any information",
    "start": "3776300",
    "end": "3783590"
  },
  {
    "text": "in either of these branches. But if you use it with a\nnaive PC tainting scheme,",
    "start": "3783590",
    "end": "3789780"
  },
  {
    "text": "then you might over-estimate\nhow much x has been tainted by.",
    "start": "3789780",
    "end": "3796580"
  },
  {
    "text": "So I should say there's\nsome subtlety you can do to try to get around\nsome of these issues, but it's a little bit tricky.",
    "start": "3796580",
    "end": "3804009"
  },
  {
    "text": "Does this all make sense?  All right. AUDIENCE: Just a question.",
    "start": "3804010",
    "end": "3809372"
  },
  {
    "text": "PROFESSOR: Oh, sorry. AUDIENCE: When you get out of\nthe if statement, so you're out of the branch, do you\n[INAUDIBLE] taint out?",
    "start": "3809373",
    "end": "3816062"
  },
  {
    "text": "PROFESSOR: Yeah,\nso typically, yes. So like down here the PC\ntaint would be cleared. So it would only be set inside\nthese branch things here.",
    "start": "3816062",
    "end": "3823608"
  },
  {
    "text": "And the reason for that\nis because essentially, by the time you\nget down here, you get down here regardless\nof what the INEI was.",
    "start": "3823608",
    "end": "3829686"
  },
  {
    "text": "So yeah, you clear that. It's a good question. ",
    "start": "3829686",
    "end": "3835480"
  },
  {
    "text": "Let's see. ",
    "start": "3835480",
    "end": "3840680"
  },
  {
    "text": "You talked about how you\nmight be able to taint at this very low level, even\nthough that might be expensive,",
    "start": "3840680",
    "end": "3847450"
  },
  {
    "text": "one reason why it\nmight be useful is because it will\nactually allow you to do things like see what\nyour data lifetimes look like.",
    "start": "3847450",
    "end": "3852680"
  },
  {
    "text": "So a couple lectures ago,\nwe talked about the fact that a lot of times\nkey data, for example, will live in memory longer\nthan you think that it should.",
    "start": "3852680",
    "end": "3859365"
  },
  {
    "text": "So you can imagine that even\nif some of the x86 or ARM level",
    "start": "3859365",
    "end": "3864612"
  },
  {
    "text": "taint tracking is\nexpensive, you can imagine using it to form an\naudit of your system and actually\ntainting, let's say,",
    "start": "3864612",
    "end": "3870190"
  },
  {
    "text": "some secret key that\nthe user entered, and just seeing where that\ngoes throughout your system. It's an offline analysis,\nit's not facing customers,",
    "start": "3870190",
    "end": "3877146"
  },
  {
    "text": "so it's OK for it to be slow. That might actually really\nhelp you to figure out oh, this data's getting into\nthe keyboard buffer,",
    "start": "3877146",
    "end": "3883550"
  },
  {
    "text": "it's getting into the x server,\nit's getting to wherever. So even if it's slow, that can\nstill be very, very useful.",
    "start": "3883550",
    "end": "3889240"
  },
  {
    "text": "So I just wanted to\nmention that briefly. One interesting thing\nyou might think about",
    "start": "3889240",
    "end": "3897290"
  },
  {
    "text": "is the fact that as I\nmentioned, TaintDroid is nice because it constrains\nthe universe of taint sources",
    "start": "3897290",
    "end": "3906490"
  },
  {
    "text": "and taint sinks. But as the developer,\nmaybe you want to actually explicitly assert some more fine\ngrain control over the labels",
    "start": "3906490",
    "end": "3917895"
  },
  {
    "text": "that your program\ninteracts with. So now as a programmer, you\nwant to be able to say something",
    "start": "3917895",
    "end": "3923110"
  },
  {
    "text": "like this. So you query some int, and\nlet's say we call it x,",
    "start": "3923110",
    "end": "3930319"
  },
  {
    "text": "then you associate\nsome label with it. Maybe the name of this\nlabel is that Alice",
    "start": "3930320",
    "end": "3936360"
  },
  {
    "text": "is the owner of\nthis data, but Alice permits Bob, or something\nlabeled with Bob,",
    "start": "3936360",
    "end": "3942320"
  },
  {
    "text": "to be able to see that. TaintDroid doesn't let you do\nthis, because it essentially controls that\nuniverse of labels.",
    "start": "3942320",
    "end": "3947829"
  },
  {
    "text": "But maybe as a\nprogrammer you want to be able to do\na thing like this. You can imagine that your\nprogram has various input",
    "start": "3947830",
    "end": "3956770"
  },
  {
    "text": "channels and output\nchannels, and all",
    "start": "3956770",
    "end": "3961825"
  },
  {
    "text": "of these input and\noutput channels, they all have labels, too. And these are labels\nthat you as a programmer",
    "start": "3961825",
    "end": "3968950"
  },
  {
    "text": "get to actually pick, as\nopposed to the system itself trying to say here's this\ngroup of fine set of things.",
    "start": "3968950",
    "end": "3974600"
  },
  {
    "text": "So maybe say for input channels,\nyou know the read values,",
    "start": "3974600",
    "end": "3983620"
  },
  {
    "text": "maybe they get the\nlabel of the channel.  That's very similar to how\nTaintDroid works right now.",
    "start": "3983620",
    "end": "3993777"
  },
  {
    "text": "So if you read\nsomething from the GPS, that read value is the\ntaint of the GPS channel, but now you as a programmer can\nchoose what those labels are.",
    "start": "3993777",
    "end": "4003329"
  },
  {
    "text": "And then you could imagine that\nfor output channels that label will channel has to match some\nlabel value we've written.",
    "start": "4003330",
    "end": "4019834"
  },
  {
    "start": "4019834",
    "end": "4025020"
  },
  {
    "text": "You can imagine other\npolicies here as well. But the basic idea is\nthat there are actually program managers that\nallow you the developer",
    "start": "4025020",
    "end": "4031079"
  },
  {
    "text": "to pick what the\nlabels are and what the semantics for\nthose labels can be.",
    "start": "4031080",
    "end": "4036369"
  },
  {
    "text": "So what's nice\nabout some of these is they do require the\nprogrammer to do a little bit",
    "start": "4036370",
    "end": "4042078"
  },
  {
    "text": "more work, but the\noutcome of that work is that static checking--\nand by static checking",
    "start": "4042078",
    "end": "4050099"
  },
  {
    "text": "I mean checking that's\ndone at compile time--",
    "start": "4050100",
    "end": "4055948"
  },
  {
    "text": "can catch many types of\ninformation flow bugs.",
    "start": "4055948",
    "end": "4062530"
  },
  {
    "text": "So if you're diligent about\nlabeling all of your network channels and screen channels\nwith the appropriate",
    "start": "4062530",
    "end": "4069860"
  },
  {
    "text": "permissions, and you're\nvery diligent about leaving your data like this,\nwhat can happen is that at compile time,\nwhen you compile your program",
    "start": "4069861",
    "end": "4076930"
  },
  {
    "text": "and your compiler can\ntell you things like hey, if you were to run this\nprogram, then you actually have an information leak that\nthis particular piece of data",
    "start": "4076930",
    "end": "4085150"
  },
  {
    "text": "will pass an equal channel,\nwhich is untrusted. And at a high level, the\nreason why static checking",
    "start": "4085150",
    "end": "4090605"
  },
  {
    "text": "can catch a lot of these bugs\nis because usually speaking, when you think of some\nof these annotations,",
    "start": "4090605",
    "end": "4096339"
  },
  {
    "text": "they're somewhat\nsimilar to types. So the same way that\ncompilers can catch errors",
    "start": "4096340",
    "end": "4103140"
  },
  {
    "text": "involving types and\ninstalling type language, you can imagine\nthat the compiler in a language like this\ncan codes some calculus",
    "start": "4103140",
    "end": "4109664"
  },
  {
    "text": "over this label,\nand in many cases, determine hey, if you would\nactually run this program,",
    "start": "4109664",
    "end": "4115251"
  },
  {
    "text": "this would be a problem. So you really need to fix\nthe way that the labels work, maybe you need to explicitly\ndeclassify something,",
    "start": "4115251",
    "end": "4122140"
  },
  {
    "text": "so on and so forth. AUDIENCE: You can't\njust [INAUDIBLE]? ",
    "start": "4122140",
    "end": "4128444"
  },
  {
    "text": "PROFESSOR: Yeah,\nyeah, that's right. So depending on the\nlanguage, these labels",
    "start": "4128445",
    "end": "4133850"
  },
  {
    "text": "can associate people with IO\nports, all that kind of stuff. That's exactly right.",
    "start": "4133850",
    "end": "4139532"
  },
  {
    "text": "So this is just\ninteresting to know about, because TaintDroid has a very\nnice general introduction",
    "start": "4139533",
    "end": "4146729"
  },
  {
    "text": "to this information flows\nstuff, but there's actually some really hardcore\nsystems out there than can express\nmuch richer semantics",
    "start": "4146729",
    "end": "4153084"
  },
  {
    "text": "in the control of a program with\nrespect to information flow. And you know, too, that when\nwe talk about static checking",
    "start": "4153084",
    "end": "4160180"
  },
  {
    "text": "and being able to\ncatch many bugs, it's actually preferable\nto catch as many bugs using static checking and\nstatic failures as opposed",
    "start": "4160180",
    "end": "4167506"
  },
  {
    "text": "to dynamic checking\nand dynamic failures. There's a very subtle\nbut powerful reason for why that is.",
    "start": "4167507",
    "end": "4172693"
  },
  {
    "text": "The reason is that,\nlet's say that we defer all of the static\nchecks to the runtime, which",
    "start": "4172694",
    "end": "4178375"
  },
  {
    "text": "you could certainly do. There's no reason you couldn't\ntake all the static checks and give you a name for it. The problem is that the failure\nor success of these checks",
    "start": "4178375",
    "end": "4185770"
  },
  {
    "text": "is actually a covert\nchannel, perhaps. So the attacker\ncould actually feed your program some\ninformation and then see",
    "start": "4185770",
    "end": "4192089"
  },
  {
    "text": "whether it crashed or not. And if it crashed,\nit might say, aha, you've passed some dynamic\ncheck of information flow, that",
    "start": "4192090",
    "end": "4198960"
  },
  {
    "text": "must mean something was\nsecret about this value I sort of cajoled you into computing. So you want to try\nto make these checks",
    "start": "4198960",
    "end": "4205590"
  },
  {
    "text": "as static as possible to the\ngreatest possible extent. If you want more information\non this kind of stuff, maybe",
    "start": "4205590",
    "end": "4214480"
  },
  {
    "text": "a good place to start,\na word to search is Jif. It's a very\ninfluential system that",
    "start": "4214480",
    "end": "4220041"
  },
  {
    "text": "built some of these issues\nof label computation. So you can start there\nand sort of roll forward.",
    "start": "4220041",
    "end": "4227204"
  },
  {
    "text": "My co-professor actually\nhas done a lot of good work on this, so you could\nask him about that if you want to talk\nmore label stuff.",
    "start": "4227204",
    "end": "4234614"
  },
  {
    "text": "That's sort of interesting\nto know that TaintDroid is actually fairly restrictive\nin the expressiveness",
    "start": "4234614",
    "end": "4241526"
  },
  {
    "text": "of the labels it\nallows you to look at. There are systems\nout there that allow you to do more powerful stuff.",
    "start": "4241526",
    "end": "4248150"
  },
  {
    "text": " Finally, what I'd like to talk\nabout is what we can do if we",
    "start": "4248150",
    "end": "4258734"
  },
  {
    "text": "want to track information\nflows in some of these legacy programs, or through programs\nthat are written in C or C++",
    "start": "4258734",
    "end": "4268670"
  },
  {
    "text": "that don't have all the\nfancy runtime support. So there's a very\ncute system, some",
    "start": "4268670",
    "end": "4276046"
  },
  {
    "text": "of the same authors on this\npaper that looks at this issue of how can we track\ninformational leaks",
    "start": "4276046",
    "end": "4284160"
  },
  {
    "text": "in a system which we\ndon't want to modify the application at all. This is the TightLip system.",
    "start": "4284160",
    "end": "4290568"
  },
  {
    "text": "So the basic idea is\nthat they introduce this notion of what they\ncall doppelganger processes.",
    "start": "4290568",
    "end": "4296305"
  },
  {
    "start": "4296305",
    "end": "4302020"
  },
  {
    "text": "TightLip uses doppelganger\nprocesses evolved. So the first thing it\ndoes is it periodically",
    "start": "4302020",
    "end": "4308350"
  },
  {
    "text": "scans a user's\nfile system and it",
    "start": "4308350",
    "end": "4314082"
  },
  {
    "text": "looks for sensitive file types. This might be things like your\nmail file, your word processing",
    "start": "4314082",
    "end": "4322719"
  },
  {
    "text": "documents, so on and so forth. So what it's going to do\nfor each one of these files is it's going to produce\na scrubbed version.",
    "start": "4322720",
    "end": "4330210"
  },
  {
    "text": " So for example, if it\nfinds an email file,",
    "start": "4330210",
    "end": "4336060"
  },
  {
    "text": "it's going to replace the to\nor the from information with,",
    "start": "4336060",
    "end": "4342002"
  },
  {
    "text": "let's say, a string of the same\nlength but just dummy data. Maybe all spaces or\nsomething like that.",
    "start": "4342002",
    "end": "4348179"
  },
  {
    "text": "It does this as a\nbackground task. Then the second thing it's going\nto do, at some point a process",
    "start": "4348180",
    "end": "4356772"
  },
  {
    "text": "is going to start executing,\nand so then TightLip is going to detect when\nand if the process tries",
    "start": "4356772",
    "end": "4368200"
  },
  {
    "text": "to access a sensitive file.  And if such an access\ndoes take place,",
    "start": "4368200",
    "end": "4377219"
  },
  {
    "text": "TightLip is going to spawn\none of these doppelganger processes.",
    "start": "4377220",
    "end": "4382485"
  },
  {
    "text": " And so what the\ndoppelganger process",
    "start": "4382485",
    "end": "4389500"
  },
  {
    "text": "looks like is very similar\nto the original process that",
    "start": "4389500",
    "end": "4394896"
  },
  {
    "text": "tried to touch that\nsensitive data, but the key difference is\nthat the doppelganger, which",
    "start": "4394896",
    "end": "4401785"
  },
  {
    "text": "I'll abbreviate DG,\nreads the scrubbed data.",
    "start": "4401786",
    "end": "4407460"
  },
  {
    "text": " So imagine that-- so the\nprocess is executing,",
    "start": "4407460",
    "end": "4414460"
  },
  {
    "text": "it tries to access\nyour email file. The system spawns this new\nprocess, the doppelganger,",
    "start": "4414460",
    "end": "4419500"
  },
  {
    "text": "that doppelganger is exactly\nthe same as that original one, but it is now reading from\nthe scrub data instead",
    "start": "4419500",
    "end": "4424810"
  },
  {
    "text": "of the real sensitive data.  What happens then.",
    "start": "4424810",
    "end": "4431458"
  },
  {
    "text": "Essentially,\nTightLip, we're going to run those two\nprocesses in parallel.",
    "start": "4431458",
    "end": "4441020"
  },
  {
    "text": "It needs to just watch\nthem and see what they do. And so in particular,\nwe're going to see,",
    "start": "4441020",
    "end": "4449842"
  },
  {
    "text": "do the processes issue\nthe same system calls",
    "start": "4449842",
    "end": "4461329"
  },
  {
    "text": "with the same arguments. ",
    "start": "4461330",
    "end": "4468050"
  },
  {
    "text": "And if that's the case, then\npresumably those system calls",
    "start": "4468050",
    "end": "4474795"
  },
  {
    "text": "do not depend on\nthe sensitive data. So in other words, if\nI start a process that",
    "start": "4474795",
    "end": "4481409"
  },
  {
    "text": "tries to open some\nsensitive file, I feed it basically junk\ndata, I let it execute. If that doppelganger process\nstill does the same things",
    "start": "4481410",
    "end": "4489860"
  },
  {
    "text": "that the regular\nprocess would have done, then presumably it\nwasn't influenced by that sensitive data at all.",
    "start": "4489860",
    "end": "4496550"
  },
  {
    "text": "So essentially doppelganger\nwill let these processes run, TightLip will let\nthese processes run,",
    "start": "4496550",
    "end": "4502379"
  },
  {
    "text": "and then check the\nsystem calls here. And then it might happen that in\nsome case the sys calls divert.",
    "start": "4502379",
    "end": "4509445"
  },
  {
    "text": " So in particular, what\nif the doppelganger",
    "start": "4509445",
    "end": "4517260"
  },
  {
    "text": "starts doing things that the\nregular version of the process would not have done, and\nthen the doppelganger tries",
    "start": "4517260",
    "end": "4523170"
  },
  {
    "text": "to make a network call. So just like in TaintDroid,\nwhen that doppelganger tries to make a network call,\nthat's when we say aha,",
    "start": "4523170",
    "end": "4529577"
  },
  {
    "text": "we should probably stop\nwhat's happening right now and then do something. So if the system calls\ndiverge, then the doppelganger",
    "start": "4529577",
    "end": "4540120"
  },
  {
    "text": "makes a network call, then\nwe're going to do something.",
    "start": "4540120",
    "end": "4547540"
  },
  {
    "text": "So we're going to either\nraise an alert to the user or whatever.",
    "start": "4547540",
    "end": "4552737"
  },
  {
    "text": "Kind of like in TaintDroid,\nbut at this point there's a specific\npolicy you can add in some particular\nsystem you're going to use.",
    "start": "4552737",
    "end": "4558520"
  },
  {
    "text": "But this is sort of an\ninteresting point at which you can say well, somehow that\ndoppelganger process was",
    "start": "4558520",
    "end": "4565140"
  },
  {
    "text": "affected by that sensitive\ndata that was returned. That means that maybe\nif the user did not",
    "start": "4565140",
    "end": "4570390"
  },
  {
    "text": "think that a particular\nprocess was going to get exfiltrated data,\nnow the user can actually do an audit of that\nprogram to figure out",
    "start": "4570390",
    "end": "4576940"
  },
  {
    "text": "why that program returned send\nthat data over the network. So does anyone-- go ahead.",
    "start": "4576940",
    "end": "4582104"
  },
  {
    "text": "AUDIENCE: So if you're\nhitting something like a word file or\nwhatever, you kind of have to know what\nyou're zeroing out",
    "start": "4582104",
    "end": "4588229"
  },
  {
    "text": "and what you're [INAUDIBLE].  PROFESSOR: Good\nquestion, that's right.",
    "start": "4588229",
    "end": "4594217"
  },
  {
    "text": "So I was going to\ndiscuss some limitations, and one of the limitations\nis precisely that. You need to have per\nfile type scrubbers.",
    "start": "4594217",
    "end": "4600874"
  },
  {
    "text": "So you can't just take\nyour email scrubber and use it for Word. And in fact, if those\nscrubbers miss something,",
    "start": "4600874",
    "end": "4607860"
  },
  {
    "text": "so if they don't\nredact everything, then this system may not catch\nall the possible sensitive data",
    "start": "4607860",
    "end": "4613719"
  },
  {
    "text": "leaks. So you're exactly\nright about that. But I think-- go ahead. AUDIENCE: So if\nI understand, why",
    "start": "4613719",
    "end": "4620449"
  },
  {
    "text": "should the process look at the\ndata before saying go ahead? Why wouldn't you just\nsend the stuff in?",
    "start": "4620450",
    "end": "4627000"
  },
  {
    "text": "PROFESSOR: Why\nwould the process-- AUDIENCE: If the process plans\nto input data, [INAUDIBLE]?",
    "start": "4627000",
    "end": "4632740"
  },
  {
    "text": " PROFESSOR: Oh, no, no.",
    "start": "4632740",
    "end": "4637870"
  },
  {
    "text": "From the perspective\nof the doppelganger, I mean, it may try\nto, in fact, look and see things like does this\nemail address make sense,",
    "start": "4637870",
    "end": "4644747"
  },
  {
    "text": "for example, before it\ntries to send it out. But the doppelganger\nprocess, it shouldn't know that it's gotten\nthis weird scrubbed data.",
    "start": "4644747",
    "end": "4650740"
  },
  {
    "text": "So this gets back a\nlittle bit to the question we were just talking about. If your scrubber\ndoesn't scrub things",
    "start": "4650740",
    "end": "4657619"
  },
  {
    "text": "in a semantically\nreasonable way, the doppelganger may, in\nfact, crash, for example.",
    "start": "4657620",
    "end": "4662725"
  },
  {
    "text": "It expects things in this\nsort of format, but it's not. But at a high level,\nthe idea is that we're trying to trick the doppelganger\ninto doing what it would do",
    "start": "4662725",
    "end": "4671330"
  },
  {
    "text": "normally, but on\ndata that's different in the original version\nand see if there",
    "start": "4671330",
    "end": "4677080"
  },
  {
    "text": "will be that divergence. So one drawback is that,\nlike we're discussing, this basically puts\nthe scrubbers in TCB",
    "start": "4677080",
    "end": "4684410"
  },
  {
    "text": "and if they don't work properly,\ndoppelgangers might crash, you might not be able to\ncatch some violations, things like that.",
    "start": "4684410",
    "end": "4690224"
  },
  {
    "text": "But the nice thing\nabout this is that it works with legacy systems. So we don't have\nto change anything",
    "start": "4690224",
    "end": "4695820"
  },
  {
    "text": "about the application\nitself runs. We just have to make some fairly\nminor changes to the OS kernel",
    "start": "4695820",
    "end": "4701950"
  },
  {
    "text": "to be able to track the\nsystem call stuff, and then things sort of work. It's very, very nice.",
    "start": "4701950",
    "end": "4707336"
  },
  {
    "text": "And the overhead of the\nsystem is essentially the overhead of running an\nadditional process, which is fairly low in a\nmodern operating system.",
    "start": "4707336",
    "end": "4714734"
  },
  {
    "text": "This is just sort of\na neat way to think about how to do some type\nof limited taint tracking",
    "start": "4714734",
    "end": "4720969"
  },
  {
    "text": "without doing heavyweight\nchanges to the runtime without requiring changes\nfrom the OS-- or sorry,",
    "start": "4720970",
    "end": "4726165"
  },
  {
    "text": "from the application. AUDIENCE: Are we\nonly doing parallel or waiting for each one?",
    "start": "4726165",
    "end": "4731940"
  },
  {
    "text": "Are we running both\nprocesses and then after that we can just\ncheck that the system calls are the same? Like when do we check-- PROFESSOR: Yeah, two questions.",
    "start": "4731940",
    "end": "4738131"
  },
  {
    "text": "So as long as the doppelganger\nprocess does things",
    "start": "4738131",
    "end": "4743500"
  },
  {
    "text": "that the OS can control and\nkeep on the local machine, you can imagine running\nthe doppelganger process",
    "start": "4743500",
    "end": "4748925"
  },
  {
    "text": "and the regular one forward. But as soon as the doppelganger\ntries to affect external state,",
    "start": "4748925",
    "end": "4754240"
  },
  {
    "text": "so maybe the network\nis doing this and that. Maybe you can think of some\nother linked sources like that. Maybe there's\nsomething like pipes,",
    "start": "4754240",
    "end": "4760180"
  },
  {
    "text": "for example, that the kernel\ndoesn't know how to create doppelganger state for. At that point you have to\nstop it and then declare",
    "start": "4760180",
    "end": "4766591"
  },
  {
    "text": "success or victory, basically.  Any other questions?",
    "start": "4766591",
    "end": "4773262"
  },
  {
    "text": "All right, well, that's\nthe end of the lecture. Have a good Thanksgiving. See you next week.",
    "start": "4773262",
    "end": "4778080"
  }
]