[
  {
    "start": "0",
    "end": "716000"
  },
  {
    "text": "[WRITING ON CHALKBOARD]",
    "start": "0",
    "end": "96980"
  },
  {
    "text": "PROFESSOR: Good morning. I think I'll start even though\npeople are not quite all here,",
    "start": "96980",
    "end": "104780"
  },
  {
    "text": "because it's time.  Sorry, I'd hoped to start\nChapter 10 last time, but",
    "start": "104780",
    "end": "111990"
  },
  {
    "text": "we'll start it this time. When Ashish comes, we'll have\nhandouts for Chapter 10, the",
    "start": "111990",
    "end": "118600"
  },
  {
    "text": "new problem set and the\nold problem set solutions as usual.",
    "start": "118600",
    "end": "123799"
  },
  {
    "text": "This chapter is about trellis\ndiagrams for block codes.",
    "start": "123800",
    "end": "130630"
  },
  {
    "text": "Binary linear block codes of\nthe kind that we've seen before, it's actually a much\nmore general notion that",
    "start": "130630",
    "end": "137800"
  },
  {
    "text": "applies to -- well, linearity is important,\nalthough we don't see it very",
    "start": "137800",
    "end": "144360"
  },
  {
    "text": "specifically in the\ntrellis diagram. But we'll see that for\nconstructing a unique minimal trellis, linearity is\nan important aspect.",
    "start": "144360",
    "end": "153650"
  },
  {
    "text": "Or more generally, it's just\nthe group property of codes that allows us to\nconstruct unique",
    "start": "153650",
    "end": "160470"
  },
  {
    "text": "minimal trellis diagrams. And I think it's best\nto motivate this",
    "start": "160470",
    "end": "165930"
  },
  {
    "text": "chapter by an example. Here's a nice example of a code\nthat we know very well.",
    "start": "165930",
    "end": "172580"
  },
  {
    "text": "It has a nice trellis diagram. It's the 8, 4, 4 Reed-Muller\ncode.",
    "start": "172580",
    "end": "178075"
  },
  {
    "text": " Just to remind you of how we\nconstruct this code, or one of",
    "start": "178075",
    "end": "183890"
  },
  {
    "text": "the methods. We have many methods. We take this kind of universal\neight by eight --",
    "start": "183890",
    "end": "189920"
  },
  {
    "text": "well, it's a list\nof eight tuples. And it's the tensor product\nof this little",
    "start": "189920",
    "end": "197420"
  },
  {
    "text": "matrix three times. And if we create this, we get a\nmatrix that looks like that.",
    "start": "197420",
    "end": "204770"
  },
  {
    "text": "And we just pick the rows that\nhave weight four or greater, and they are the generators of\nthe 8, 4, 4 Reed-Muller code.",
    "start": "204770",
    "end": "212780"
  },
  {
    "text": "So we'll take those as our\nset of generators. It's the 16 code words generated\nby these four",
    "start": "212780",
    "end": "220040"
  },
  {
    "text": "generators here. This goes back to the first part\nof the term, but I hope",
    "start": "220040",
    "end": "226780"
  },
  {
    "text": "you recall that fairly\nquickly. Now I'd like to draw a trellis\ndiagram for this code.",
    "start": "226780",
    "end": "234200"
  },
  {
    "text": "I don't particularly\nknow why yet. One idea I might have in mind\nis to do a Viterbi algorithm",
    "start": "234200",
    "end": "239490"
  },
  {
    "text": "decoding as a maximum likelihood\ndecoding algorithm for this code. So let's see if I can\ncome up with an",
    "start": "239490",
    "end": "244920"
  },
  {
    "text": "efficient trellis diagram. That means one that first\nof all has really",
    "start": "244920",
    "end": "250190"
  },
  {
    "text": "few states in it. Relatively few branches would be\nefficient as a decoding map",
    "start": "250190",
    "end": "255450"
  },
  {
    "text": "for the Viterbi algorithm. And here's a very nice one. This looks sort of\nlike a rate 1/2",
    "start": "255450",
    "end": "263919"
  },
  {
    "text": "four-state trellis diagram. Of course, it's not\ntime-invariant, doesn't go on",
    "start": "263920",
    "end": "270710"
  },
  {
    "text": "forever like for a convolutional\ncode, for a block code. Block code only exists\nover a finite time.",
    "start": "270710",
    "end": "276950"
  },
  {
    "text": "So we're going to get a block\ntrellis that starts at a particular time, that\nends at a particular",
    "start": "276950",
    "end": "282600"
  },
  {
    "text": "time in a single state. But we want the basic\nproperty that the --",
    "start": "282600",
    "end": "289460"
  },
  {
    "text": "the paths in this trellis are\nin one-to-one correspondence with the words in the code.",
    "start": "289460",
    "end": "295350"
  },
  {
    "text": "So, how many words are\nthere in the code? There are 16 in this code. How many paths are there\nthrough this trellis?",
    "start": "295350",
    "end": "301690"
  },
  {
    "text": "Well, again it has a very\nregular structure. There is a four-way\nbranch here. Wherever you get to, you have\na two-way branch here.",
    "start": "301690",
    "end": "308710"
  },
  {
    "text": "You have a two-way\nbranch here. You have no choice here. So there are 16 possible ways\nto get through this trellis,",
    "start": "308710",
    "end": "316330"
  },
  {
    "text": "16 trajectories if you like. And next let's check if they\ncorrespond to all the possible",
    "start": "316330",
    "end": "323690"
  },
  {
    "text": "code words. Here is the all 0 code\nword up here.",
    "start": "323690",
    "end": "330590"
  },
  {
    "text": "What's next? Let's check for the\ngenerators. Here is one of the generators,\n1, 1, 1, 1, 0, 0, 0, 0.",
    "start": "330590",
    "end": "338300"
  },
  {
    "text": "And it's a 1, 1, 0, 0. This is 1, 1 also.",
    "start": "338300",
    "end": "344580"
  },
  {
    "text": "1, 1 --  no, I'm sorry.",
    "start": "344580",
    "end": "350430"
  },
  {
    "text": "1, 1, 0, 0, 1, 1, 0, 0. That's right. That's this one going\nthrough here.",
    "start": "350430",
    "end": "356590"
  },
  {
    "text": "And 1, 0, 1, 0, 1, 0, 1, 0. That's here.",
    "start": "356590",
    "end": "362289"
  },
  {
    "text": "And what's the last one? All ones. Well, that's up here too.",
    "start": "362290",
    "end": "368050"
  },
  {
    "text": "The all one path. Yeah. AUDIENCE: How did you know\nwhether to make the [INAUDIBLE] procedure?",
    "start": "368050",
    "end": "374580"
  },
  {
    "text": "PROFESSOR: I had side\ninformation. A genie told me. I know that this is an\nefficient trellis.",
    "start": "374580",
    "end": "381500"
  },
  {
    "text": "Where we'll get to, and I hope\ntoday in this lecture, is a",
    "start": "381500",
    "end": "388200"
  },
  {
    "text": "turn-the-crank method of\nconstructing not only a trellis, but the minimal\npossible trellis.",
    "start": "388200",
    "end": "394569"
  },
  {
    "text": "So you'll be able to see how\nstarting from a set of four generators like this, turn the\ncrank, and I'll produce a",
    "start": "394570",
    "end": "401020"
  },
  {
    "text": "trellis for you. But of course you don't\nsee that yet. I just know that this\nis a trellis,",
    "start": "401020",
    "end": "406800"
  },
  {
    "text": "and it's a nice trellis. It has nice, regular\nstructure. You could decode this with a\nViterbi algorithm, and you",
    "start": "406800",
    "end": "413680"
  },
  {
    "text": "could see the complexity would\nbe comparable to the complexity of decoding\na rate 1/2 four-state",
    "start": "413680",
    "end": "421700"
  },
  {
    "text": "convolutional code. And in fact, you remember I\ncompared our example rate 1/2",
    "start": "421700",
    "end": "427860"
  },
  {
    "text": "four-state convolutional code\nwhich had a coding gain of 4 dB with this code saying they\nroughly have the same",
    "start": "427860",
    "end": "435270"
  },
  {
    "text": "complexity. And when I said that, this is\nwhat I had in mind, that I could decode each of them with\na Viterbi algorithm with",
    "start": "435270",
    "end": "441699"
  },
  {
    "text": "approximately the same\namount of complexity. And unfortunately this only has\na nominal coding gain of 3",
    "start": "441700",
    "end": "449000"
  },
  {
    "text": "dB, and an effective\ncoding gain of slightly less than that. So it's not quite as good as\nthe convolutional code.",
    "start": "449000",
    "end": "457410"
  },
  {
    "text": "And at the end of the day, we're\ngoing to find out that that's kind of typical of a\ncomparison between block and convolutional codes of the\nsame trellis complexity.",
    "start": "457410",
    "end": "466080"
  },
  {
    "text": "But on the other hand, this is\ncertainly a better way to decode this code, recursive by\nthe Viterbi algorithm, than to",
    "start": "466080",
    "end": "475260"
  },
  {
    "text": "do a full maximum likelihood\ndecoding of all 16 code words, which involves just brute force\ncomputing the distance",
    "start": "475260",
    "end": "482490"
  },
  {
    "text": "to 16 code words. This is if you like a more\norganized way of performing",
    "start": "482490",
    "end": "487590"
  },
  {
    "text": "the computation of how far is\nthe receive sequence from each of the 16 code words.",
    "start": "487590",
    "end": "492790"
  },
  {
    "text": " So the reason we look for\ntrellises of block codes is",
    "start": "492790",
    "end": "501310"
  },
  {
    "text": "first of all, it's better\nthan exhaustive maximum likelihood decoding. It is a maximum likelihood\ndecoding algorithm since we're",
    "start": "501310",
    "end": "509030"
  },
  {
    "text": "going to find that we can\nconstruct a trellis for any linear block code, which at\nworst, it's never going to be",
    "start": "509030",
    "end": "520159"
  },
  {
    "text": "more complicated than just\nenumerating all the code words and doing exhaustive maximum\nlikelihood decoding.",
    "start": "520159",
    "end": "526940"
  },
  {
    "text": "And usually, as in this case,\nit's going to be a more efficient method of doing\nmaximum likelihood decoding.",
    "start": "526940",
    "end": "533440"
  },
  {
    "text": "So we will have a general method\nof maximum likelihood decoding that is more\nefficient than the exhaustive method.",
    "start": "533440",
    "end": "541150"
  },
  {
    "text": "Secondly, there's\nan interesting link to system theory. I won't make a great deal\nof this in this course.",
    "start": "541150",
    "end": "547670"
  },
  {
    "text": "But what are we really\ndoing here? We're representing a block code\nas a finite state system.",
    "start": "547670",
    "end": "556280"
  },
  {
    "text": "In fact, a linear block code\nis a finite state linear system, although again the\nlinearity is not terribly",
    "start": "556280",
    "end": "561980"
  },
  {
    "text": "transparent from this picture. So we have a linear finite state\nsystem, just as we did",
    "start": "561980",
    "end": "569510"
  },
  {
    "text": "for the convolutional code. However, it's necessarily\ntime varying. It couldn't possibly be shift\ninvariant because we only have",
    "start": "569510",
    "end": "577360"
  },
  {
    "text": "a finite time axis,\nif you like. Time axis only goes over four\ntime units in this particular",
    "start": "577360",
    "end": "584220"
  },
  {
    "text": "picture, where I've grouped\ntwo outputs at a time. ",
    "start": "584220",
    "end": "589870"
  },
  {
    "text": "So that's interesting, and for\nour purposes an interesting",
    "start": "589870",
    "end": "597190"
  },
  {
    "text": "aspect of this is that we now\nget a notion of how complex is",
    "start": "597190",
    "end": "602940"
  },
  {
    "text": "a block code. So far we've been focused on\nparameters like n, k, d, which",
    "start": "602940",
    "end": "608709"
  },
  {
    "text": "are all algebraic parameters\nof the code itself. But we really want to know\nabout performance versus",
    "start": "608710",
    "end": "616310"
  },
  {
    "text": "complexity. So how complex is\nthe 8 4 4 code? Well, now we have a little\nbit of a handle on it.",
    "start": "616310",
    "end": "621399"
  },
  {
    "text": "We can say its complexity is\nthat of a four-state machine.",
    "start": "621400",
    "end": "627730"
  },
  {
    "text": "So trellis complexity gives us a\nmeasure of the complexity of a block code so that we can,\nfor instance, say the",
    "start": "627730",
    "end": "635330"
  },
  {
    "text": "Reed-Muller codes tend to be\nless complex than PCH codes. And I'll try to give\nsome substance to",
    "start": "635330",
    "end": "641120"
  },
  {
    "text": "that as we go along. So we get additional parameters\nthat have more to do with what we really care\nabout, which is decoding",
    "start": "641120",
    "end": "648459"
  },
  {
    "text": "complexity. And finally, I introduce this\nsubject because it's a",
    "start": "648460",
    "end": "654029"
  },
  {
    "text": "stepping stone to where we're\nreally going, is this notion of codes on graphs, which is the\nunderlying concept for the",
    "start": "654030",
    "end": "662990"
  },
  {
    "text": "capacity-approaching codes\nthat is our goal point. Our whole goal in this course\nis to get to capacity,",
    "start": "662990",
    "end": "671650"
  },
  {
    "text": "specifically on the additive\nwhite Gaussian noise channel. And the way that people have\nfound they get to capacity",
    "start": "671650",
    "end": "677300"
  },
  {
    "text": "turbo codes, low-density\nparity check codes, the underlying concept that I'm\ngoing to be framing that in is",
    "start": "677300",
    "end": "684160"
  },
  {
    "text": "codes on graphs. And this is kind of a code on\na very elementary graph.",
    "start": "684160",
    "end": "690950"
  },
  {
    "text": "So it's a good way from\nhere to there. So that's why we're taking\na little time to",
    "start": "690950",
    "end": "697759"
  },
  {
    "text": "look at this subject. Even though as I say, at the\nend of the day, even though there's a better way of decoding\nblock codes than the",
    "start": "697760",
    "end": "704779"
  },
  {
    "text": "ways we've had previously, and a\nbetter non-algebraic way, it still is not going to turn out\nto be as good as convolutional",
    "start": "704780",
    "end": "712480"
  },
  {
    "text": "codes, which we already\nknow about.  Any questions on what\nwe're doing,",
    "start": "712480",
    "end": "718930"
  },
  {
    "text": "motivation and so forth? Yeah. AUDIENCE: [INAUDIBLE]\nconvolutional codes is that",
    "start": "718930",
    "end": "726054"
  },
  {
    "text": "each node doesn't have two\nthings coming on to it? PROFESSOR: That's right, it's\na little bit more irregular,",
    "start": "726054",
    "end": "731820"
  },
  {
    "text": "and this trellis section\ndoesn't look the same. We had a completely mixing\ntrellis section for the",
    "start": "731820",
    "end": "738210"
  },
  {
    "text": "convolutional code. This kind of divides it into two\nhalves which don't meet.",
    "start": "738210",
    "end": "744160"
  },
  {
    "text": "This basically expresses the\ncode as a certain subcode, and",
    "start": "744160",
    "end": "749300"
  },
  {
    "text": "its coset is down here. So, it's not quite the same. Looks different.",
    "start": "749300",
    "end": "755080"
  },
  {
    "text": "Maybe this will turn out\nto be interesting. Good observation. ",
    "start": "755080",
    "end": "763430"
  },
  {
    "text": "Anything else at this point? AUDIENCE: You just said\nthat this is not a convolutional code. Or maybe we can have more than\none states, and it is a",
    "start": "763430",
    "end": "771760"
  },
  {
    "text": "convolutional code. PROFESSOR: Let's see, it's\nnot a convolutional code. It's not even a terminated\nconvolutional code, because it",
    "start": "771760",
    "end": "781800"
  },
  {
    "text": "doesn't have the simple\nshift register type of trellis diagram. At least it's not the kind\nof convolutional",
    "start": "781800",
    "end": "787060"
  },
  {
    "text": "code we know about. But why should it be? Let's open up our minds\nto more possibilities.",
    "start": "787060",
    "end": "794565"
  },
  {
    "text": " We don't really care.",
    "start": "794565",
    "end": "800810"
  },
  {
    "start": "796000",
    "end": "868000"
  },
  {
    "text": "The objective that we have in\nmind here is we're just going to try to come up with the most\nefficient trellis picture",
    "start": "800810",
    "end": "809950"
  },
  {
    "text": "that we can for block code. And we're going to use the\nlinearity, and we're going to",
    "start": "809950",
    "end": "817020"
  },
  {
    "text": "basically try to find\nas few states as possible at each time. That's going to be our measure\nof efficiency.",
    "start": "817020",
    "end": "824370"
  },
  {
    "text": "That's not the only one you\ncould think of, but it'll turn out that any notion of efficient\nrepresentation comes",
    "start": "824370",
    "end": "831330"
  },
  {
    "text": "down to the same thing. So we'll focus on a minimal\nstate representation of a block code, and you can think\nof this as an exercise in",
    "start": "831330",
    "end": "840100"
  },
  {
    "text": "system theory and minimal realizations of a linear system. This you can view.",
    "start": "840100",
    "end": "846860"
  },
  {
    "text": "A set of all 16 code words you\ncan view is the set of possible trajectories of a\nlinear system on a time axis",
    "start": "846860",
    "end": "854160"
  },
  {
    "text": "of length 8, and we want to find\na minimal realization, minimal state realization\nof that linear system.",
    "start": "854160",
    "end": "862100"
  },
  {
    "text": "So that'll make sense to some\nof you, and it won't make an awful lot of sense to\nthe rest of you. ",
    "start": "862100",
    "end": "869810"
  },
  {
    "start": "868000",
    "end": "1134000"
  },
  {
    "text": "So we're after a minimal, in the\nstate sense, minimal state",
    "start": "869810",
    "end": "876610"
  },
  {
    "text": "complexity, let's say. ",
    "start": "876610",
    "end": "882940"
  },
  {
    "text": "And let's continue to focus on\nthis example, and let's focus on a particular time.",
    "start": "882940",
    "end": "888745"
  },
  {
    "text": "Let's focus on the halfway\npoint here.",
    "start": "888745",
    "end": "893790"
  },
  {
    "text": "Where do the state times\noccur, by the way? They occur between\nthe symbol tags.",
    "start": "893790",
    "end": "899100"
  },
  {
    "text": "You can think of a state as\nbeing associated with a cut between a certain set of symbols\nwhich we call the past",
    "start": "899100",
    "end": "907730"
  },
  {
    "text": "and another set of symbols\nwhich we call the future, again using just some theoretic\ntemporal language.",
    "start": "907730",
    "end": "917089"
  },
  {
    "text": "So if we make a cut -- let's say I do it over here.",
    "start": "917090",
    "end": "922420"
  },
  {
    "text": "States are based on cuts between\na past and a future, so the state actually occurs\nbetween the fourth and the",
    "start": "922420",
    "end": "929470"
  },
  {
    "text": "fifth symbol here, not at either\nof them, if you want to draw where is the stated time.",
    "start": "929470",
    "end": "937330"
  },
  {
    "text": "And let's start with\nthis example. And let's ask if we could find\nany simpler trellis for this.",
    "start": "937330",
    "end": "945040"
  },
  {
    "text": "In other words, let's see if\nwe can have fewer than four states at this midpoint.",
    "start": "945040",
    "end": "951154"
  },
  {
    "text": " Could we possibly have\nfewer than four",
    "start": "951155",
    "end": "956330"
  },
  {
    "text": "states at the midpoint? ",
    "start": "956330",
    "end": "964360"
  },
  {
    "text": "What's the key property\nof states? The key property of states is\nthat once you get to a state,",
    "start": "964360",
    "end": "971839"
  },
  {
    "text": "that then becomes a summary of\nall the history that you know about the past, and any past\nsequence or partial sequence",
    "start": "971840",
    "end": "983940"
  },
  {
    "text": "that gets you to this state has\nto have the same set of possible continuations over here\nin the future in order",
    "start": "983940",
    "end": "993440"
  },
  {
    "text": "for this to be a valid trellis\nrepresentation. So maybe it will help if I draw\nthis just focusing on the",
    "start": "993440",
    "end": "1001750"
  },
  {
    "text": "central time. There are two ways to get\nto this central time. One is to get to what\nwe call the 0 state.",
    "start": "1001750",
    "end": "1009450"
  },
  {
    "text": "We can get there by 0, 0,\n0, 0 or 1, 1, 1, 1. There's a second state which\nwe can get to again by two",
    "start": "1009450",
    "end": "1018510"
  },
  {
    "text": "paths, which are 0, 0,\n1, 1 or 1, 1, 0, 0.",
    "start": "1018510",
    "end": "1027050"
  },
  {
    "text": "There's a third one, which we\ncan get to by 1, 0, 1, 0 or",
    "start": "1027050",
    "end": "1033839"
  },
  {
    "text": "its complement, 0, 1, 0, 1. We'll see that each of these\ninvolves a four-tuple and its",
    "start": "1033839",
    "end": "1042750"
  },
  {
    "text": "complement. And this is 1, 0, 0,\n1 or 0, 1, 1, 0.",
    "start": "1042750",
    "end": "1049070"
  },
  {
    "text": "Those are the set of possible\npast sequences that can get to",
    "start": "1049070",
    "end": "1054590"
  },
  {
    "text": "any of these four states. There are two of them. Now what this trellis says\nis that from this state,",
    "start": "1054590",
    "end": "1064910"
  },
  {
    "text": "regardless of how we got here,\neither of these two things, there are two possible\ncontinuations, which happen to",
    "start": "1064910",
    "end": "1072140"
  },
  {
    "text": "be the same thing.  And the property state has to\nbe that either of these",
    "start": "1072140",
    "end": "1079640"
  },
  {
    "text": "continuations is a legitimate\ncontinuation of either of the",
    "start": "1079640",
    "end": "1085580"
  },
  {
    "text": "paths that it takes\nto get there. So we now have four possible\ncode words that go through",
    "start": "1085580",
    "end": "1090900"
  },
  {
    "text": "this particular state, that\npass through this state. And down here, similarly, I\nthink what we have is the same",
    "start": "1090900",
    "end": "1100559"
  },
  {
    "text": "set of code words. There's complete symmetry\nand so forth.",
    "start": "1100560",
    "end": "1109480"
  },
  {
    "text": "Let's ask, could we combine\nthese two states, somehow",
    "start": "1109480",
    "end": "1114549"
  },
  {
    "text": "smush them together into\na single state? And the answer is obviously no,\nbecause 0, 0, 1, 1 is not",
    "start": "1114550",
    "end": "1121880"
  },
  {
    "text": "a continuation of the\nall 0 sequence, or of the all 1 sequence. And 0, 0, 0, 0 is not a\ncontinuation of the 0, 0, 1, 1",
    "start": "1121880",
    "end": "1130320"
  },
  {
    "text": "sequence or the 1,\n1, 0, 0 sequence. ",
    "start": "1130320",
    "end": "1136240"
  },
  {
    "start": "1134000",
    "end": "1405000"
  },
  {
    "text": "The property of the state\nis the Markov property. ",
    "start": "1136240",
    "end": "1142559"
  },
  {
    "text": "And there are many ways of\nphrasing this, but this is the",
    "start": "1142560",
    "end": "1147950"
  },
  {
    "text": "defining property of states, is\nthat if two past paths have",
    "start": "1147950",
    "end": "1171880"
  },
  {
    "text": "a future continuation --  I hope you understand this\nlanguage as I introduce it --",
    "start": "1171880",
    "end": "1180040"
  },
  {
    "text": "in common, then all\ntheir future",
    "start": "1180040",
    "end": "1194640"
  },
  {
    "text": "continuations are in common. ",
    "start": "1194640",
    "end": "1212500"
  },
  {
    "text": "So I have two past\npaths, let's say. This is the definition\nof states.",
    "start": "1212500",
    "end": "1217800"
  },
  {
    "text": "If we can find such a situation,\nthen we can say that these two past paths go\nthrough the same state at the",
    "start": "1217800",
    "end": "1227210"
  },
  {
    "text": "cut time, because then we\ncan smush them together.",
    "start": "1227210",
    "end": "1232350"
  },
  {
    "text": "You can think of this as our\nstarting from, but suppose we drew all 16 code words,\nand we drew a --",
    "start": "1232350",
    "end": "1241080"
  },
  {
    "text": "here would be a 16 state\ntrellis, and the first two elements of it might be 0, 0,\n0, 1, 1, 1, 1, 1, 1, 1, 1.",
    "start": "1241080",
    "end": "1250440"
  },
  {
    "text": "And we'd ask, can we smush these\ntwo states together? And the answer is yes because\nof this property, because 0,",
    "start": "1250440",
    "end": "1258870"
  },
  {
    "text": "0, 0 can also be followed\nby 1, 1, 1, 1. There are actually four\nstates that we're",
    "start": "1258870",
    "end": "1263960"
  },
  {
    "text": "smushing together here. ",
    "start": "1263960",
    "end": "1269720"
  },
  {
    "text": "1, 1, 1, 1 and 0, 0, 0. These are all legitimate code\nwords, and because they're all legitimate, we can basically\nbreak this up into a Cartesian",
    "start": "1269720",
    "end": "1278340"
  },
  {
    "text": "product of two paths with two\nfutures, and represent all four of them by a\nsingle state.",
    "start": "1278340",
    "end": "1284710"
  },
  {
    "text": "So that's what states do. If we want a minimal state\ndiagram, we should do this as",
    "start": "1284710",
    "end": "1290850"
  },
  {
    "text": "much as possible. It's not very well-defined right\nnow, but we should merge states wherever this\nproperty holds.",
    "start": "1290850",
    "end": "1298870"
  },
  {
    "text": "So this implies they go through\na common state, and",
    "start": "1298870",
    "end": "1305330"
  },
  {
    "text": "it's if and only if. ",
    "start": "1305330",
    "end": "1312080"
  },
  {
    "text": "So you could see it\nvery concretely from the trellis diagram. This is the property\nthat we need.",
    "start": "1312080",
    "end": "1318890"
  },
  {
    "text": "You can see that for this\nparticular code, we do have the possibility of combining\nall 16 possible states here",
    "start": "1318890",
    "end": "1328630"
  },
  {
    "text": "into 4, because we can\ncombine them all pair-wise in this way.",
    "start": "1328630",
    "end": "1334380"
  },
  {
    "text": "This is going to come from the\nlinear property of the code. That's why everything\nis so symmetric.",
    "start": "1334380",
    "end": "1340208"
  },
  {
    "text": "But we can't go any\nfurther than that. So we can conclude from this is\nthat for the 8, 4, 4 code,",
    "start": "1340208",
    "end": "1350282"
  },
  {
    "text": "the minimal state space\nat the center has four",
    "start": "1350282",
    "end": "1360620"
  },
  {
    "text": "states, has size four.",
    "start": "1360620",
    "end": "1367900"
  },
  {
    "start": "1367900",
    "end": "1373440"
  },
  {
    "text": "For simple code like this, you\ncan simply see what all the possibilities are, and this\nis the best we can do.",
    "start": "1373440",
    "end": "1380340"
  },
  {
    "text": "So do you get that? This is fundamental\nsystem theory",
    "start": "1380340",
    "end": "1385490"
  },
  {
    "text": "state realization theory. I don't know where\nin the curriculum one gets this nowadays.",
    "start": "1385490",
    "end": "1391650"
  },
  {
    "text": "Probably somewhere over towards\nthe control side, maybe in digital signal\nprocessing, but maybe not.",
    "start": "1391650",
    "end": "1401280"
  },
  {
    "text": "But we're doing system\ntheory here. ",
    "start": "1401280",
    "end": "1406910"
  },
  {
    "start": "1405000",
    "end": "1528000"
  },
  {
    "text": "We all get that? Yeah. AUDIENCE: [INAUDIBLE] properties basically defined, I\nhave two possible paths, and",
    "start": "1406910",
    "end": "1415605"
  },
  {
    "text": "they have one common\n[INAUDIBLE] data, they have [INAUDIBLE]",
    "start": "1415605",
    "end": "1422779"
  },
  {
    "text": "PROFESSOR: Yeah, if they go\nthrough a common state, that implies this statement.",
    "start": "1422780",
    "end": "1428840"
  },
  {
    "text": "Conversely, if we have a set of\npast paths and future paths",
    "start": "1428840",
    "end": "1435159"
  },
  {
    "text": "that have this property, then\nwe can define a state. In other words, states are\nalways going to look something",
    "start": "1435160",
    "end": "1441530"
  },
  {
    "text": "like this, with a set\nof past paths. We have a set of future paths,\nand the state is simply a node",
    "start": "1441530",
    "end": "1451520"
  },
  {
    "text": "that they go through such that\nyou can combine any of these paths with any of\nthese futures. If it's symmetric, you could\nsay the same thing.",
    "start": "1451520",
    "end": "1458100"
  },
  {
    "text": "If two futures have a past in\ncommon, then they have all their paths in common.",
    "start": "1458100",
    "end": "1463740"
  },
  {
    "text": "But whenever you have a state\nrepresentation -- let's suppose we have\nthree states there.",
    "start": "1463740",
    "end": "1471770"
  },
  {
    "text": "Then this is what, just looking\nat those states and the initial and final states,\nthis is what the code is going",
    "start": "1471770",
    "end": "1479000"
  },
  {
    "text": "to have to look like. ",
    "start": "1479000",
    "end": "1484850"
  },
  {
    "text": "Because property of state is\nthat however you got there,",
    "start": "1484850",
    "end": "1490179"
  },
  {
    "text": "you have to be able to take\nany of these over here. Otherwise the trellis\nis invalid. If not all of these nine\nsequences are code words, then",
    "start": "1490180",
    "end": "1497720"
  },
  {
    "text": "it's not a valid trellis\nrepresentation, or equivalently, it's not a valid\nstate representation.",
    "start": "1497720",
    "end": "1504590"
  },
  {
    "text": "So if, and only if, we\ncan draw the thing in this way, we get it.",
    "start": "1504590",
    "end": "1511090"
  },
  {
    "text": "So for a small code, you can\njust see how much combining",
    "start": "1511090",
    "end": "1516390"
  },
  {
    "text": "you can do. In particular, you can ask,\nwhat can the 0, 0 state --",
    "start": "1516390",
    "end": "1522120"
  },
  {
    "text": "0, 0 path sequence -- what can\nthat be combined with? ",
    "start": "1522120",
    "end": "1528370"
  },
  {
    "start": "1528000",
    "end": "1998000"
  },
  {
    "text": "Well, it can only be combined\nwith sequences that have a 0",
    "start": "1528370",
    "end": "1538160"
  },
  {
    "text": "first part. So let me introduce now\nthe idea of subcodes.",
    "start": "1538160",
    "end": "1543179"
  },
  {
    "start": "1543180",
    "end": "1550960"
  },
  {
    "text": "We have a linear code C. Let's\ndefine an interval on the time",
    "start": "1550960",
    "end": "1567610"
  },
  {
    "text": "axis: k, k prime, whatever.",
    "start": "1567610",
    "end": "1573540"
  },
  {
    "text": "The subcode C on that interval\nis the set of all code words.",
    "start": "1573540",
    "end": "1581440"
  },
  {
    "start": "1581440",
    "end": "1589100"
  },
  {
    "text": "Elegant way to say it is whose\nsupport is in k, k prime.",
    "start": "1589100",
    "end": "1595010"
  },
  {
    "text": " In other words, which are all\n0 outside, which have all 0",
    "start": "1595010",
    "end": "1602940"
  },
  {
    "text": "symbols outside of this\ninterval that we've identified. So that's just notation.",
    "start": "1602940",
    "end": "1609390"
  },
  {
    "text": "So specifically, let's say the\npast code with respect to a",
    "start": "1609390",
    "end": "1615350"
  },
  {
    "text": "certain time, like the\nmidpoint there. Well, we can define that as the\nset of all code words that",
    "start": "1615350",
    "end": "1624450"
  },
  {
    "text": "are 0 outside the past, the\nfirst four symbols, and we define the future subcode as the\nset of all code words that",
    "start": "1624450",
    "end": "1632800"
  },
  {
    "text": "are 0 outside the future. For this code, what is that? We list the 16 code words.",
    "start": "1632800",
    "end": "1638630"
  },
  {
    "text": "We make this the past. We make this the future. What is the past subcode here?",
    "start": "1638630",
    "end": "1648700"
  },
  {
    "text": "In this particular case, the\npast subcode is, of course, the all 0 sequence.",
    "start": "1648700",
    "end": "1654380"
  },
  {
    "text": "It was always in this code\nor this sequence, 1, 1, 1, 0, 0, 0.",
    "start": "1654380",
    "end": "1661110"
  },
  {
    "text": "It's a linear code of dimension\none, and it consists of these two code words. ",
    "start": "1661110",
    "end": "1671029"
  },
  {
    "text": "It is precisely the set of all\ncode words that can be",
    "start": "1671030",
    "end": "1676120"
  },
  {
    "text": "followed by the all\n0 sequence. So I can read it directly off of\nthis trellis picture here.",
    "start": "1676120",
    "end": "1683059"
  },
  {
    "text": " So everybody with me? The past subcode just consists\nof those two words.",
    "start": "1683060",
    "end": "1691510"
  },
  {
    "text": "The future subcode consists\nsimilarly. Looking at the trellis, it's the\n1's that are all 0 outside",
    "start": "1691510",
    "end": "1703370"
  },
  {
    "text": "the future. In other words, can follow\na past which is all 0. In other words, it's these\ntwo code words.",
    "start": "1703370",
    "end": "1709860"
  },
  {
    "text": " So here are two little\nsubcodes with a code.",
    "start": "1709860",
    "end": "1716640"
  },
  {
    "text": " So by definition, this is\nsubcode of C. If C is linear,",
    "start": "1716640",
    "end": "1728940"
  },
  {
    "text": "you can quickly convince\nyourself this is a linear subcode, so it's going to have\na certain dimension.",
    "start": "1728940",
    "end": "1735090"
  },
  {
    "text": "It's going to have size equal\nto a power of two. It's even going to have a\nminimum distance that is at",
    "start": "1735090",
    "end": "1740950"
  },
  {
    "text": "least as great as the minimum\ndistance of C, because it consists of code words of C, so\nits minimum non-zero weight",
    "start": "1740950",
    "end": "1747560"
  },
  {
    "text": "is going to be at least as great\nas that of C. So it has some properties immediately.",
    "start": "1747560",
    "end": "1753290"
  },
  {
    "start": "1753290",
    "end": "1758840"
  },
  {
    "text": "These past and future codes seem\nto have a lot to do with the structure of the\ntrellis up here.",
    "start": "1758840",
    "end": "1766230"
  },
  {
    "text": "In fact, the zero state consists\nof precisely --",
    "start": "1766230",
    "end": "1773400"
  },
  {
    "text": "the sequences that go through\nthe zero state here are not",
    "start": "1773400",
    "end": "1780440"
  },
  {
    "text": "coincidentally the set of all\npast code words in Cp followed",
    "start": "1780440",
    "end": "1786309"
  },
  {
    "text": "by the set of all future\ncode words in Cf. ",
    "start": "1786310",
    "end": "1796000"
  },
  {
    "text": "And why is that? It's because the set of all\nways of getting to here,",
    "start": "1796000",
    "end": "1805350"
  },
  {
    "text": "getting to this state, have\nto be the set of all code sequences that can be followed\nby the all 0 sequence.",
    "start": "1805350",
    "end": "1812770"
  },
  {
    "text": "Similarly, the set of all\ncontinuations from this state have to be the set of\nall continuations",
    "start": "1812770",
    "end": "1818190"
  },
  {
    "text": "of the all 0 sequence. So the zero state is always\ngoing to be a little",
    "start": "1818190",
    "end": "1824690"
  },
  {
    "text": "sub-trellis that is going to\nrepresent in effect -- you can draw it as a sum, or\na product, of the past and",
    "start": "1824690",
    "end": "1832930"
  },
  {
    "text": "future subcodes. In other words, there's a\ntwo-dimensional code that has",
    "start": "1832930",
    "end": "1838690"
  },
  {
    "text": "these two generators. g1, g2 generates a little\ntwo-dimensional code.",
    "start": "1838690",
    "end": "1844600"
  },
  {
    "text": "Here's the fourth code word in\nit, the all 1 code sequence. And every element in that\ntwo-dimensional code goes",
    "start": "1844600",
    "end": "1852970"
  },
  {
    "text": "through the zero state.  AUDIENCE: [INAUDIBLE]",
    "start": "1852970",
    "end": "1858890"
  },
  {
    "text": "code word. So then you know -- PROFESSOR: It's whatever\nit happens to be. AUDIENCE: Then you have a\nseparate state just for --",
    "start": "1858890",
    "end": "1867110"
  },
  {
    "text": " you could combine them.",
    "start": "1867110",
    "end": "1874150"
  },
  {
    "text": "PROFESSOR: It doesn't matter. Suppose that Cp has\ndimension one.",
    "start": "1874150",
    "end": "1880780"
  },
  {
    "text": "Cf has dimension one. That means Cp is going to\nbe something like this.",
    "start": "1880780",
    "end": "1887515"
  },
  {
    "text": " Cf is going to be something\nlike this.",
    "start": "1887515",
    "end": "1894830"
  },
  {
    "text": "Whatever, what way. AUDIENCE: [INAUDIBLE] PROFESSOR: It just follows\nfrom linearity.",
    "start": "1894830",
    "end": "1904110"
  },
  {
    "text": "And clearly, since C itself was\nlinear, we're allowed to add x, x, x, x all 0's\nto y, y, y, y.",
    "start": "1904110",
    "end": "1911010"
  },
  {
    "text": "That's a code word, because\nthese were both code words in C. So the linearity allows you\nto fill in this fourth corner",
    "start": "1911010",
    "end": "1920720"
  },
  {
    "text": "of the rectangle, if you like. So Cp plus Cf is always going\nto look like this.",
    "start": "1920720",
    "end": "1929160"
  },
  {
    "text": "And we'll always call this the\nzero state, the state that you get to by the all 0 sequence.",
    "start": "1929160",
    "end": "1935330"
  },
  {
    "text": "And that can be followed\nby the all 0 sequence. That's always going to be\ncalled the zero state.",
    "start": "1935330",
    "end": "1942220"
  },
  {
    "text": "By linearity, it's always\ngoing to look like that. It might not be dimension one. It could have any\ndimension here.",
    "start": "1942220",
    "end": "1947650"
  },
  {
    "text": " So we're really beginning\nto get somewhere now.",
    "start": "1947650",
    "end": "1956919"
  },
  {
    "text": "What do all these other states\nlook like, grouped",
    "start": "1956920",
    "end": "1962170"
  },
  {
    "text": "theoretically?  Cosets. Somebody -- who said cosets?",
    "start": "1962170",
    "end": "1969730"
  },
  {
    "text": "Good, that's right. So Cp plus Cf is itself\na subcode of C, a",
    "start": "1969730",
    "end": "1977870"
  },
  {
    "text": "two-dimensional subcode. So there are four cosets of Cp\nplus Cf in C, and we'll see if",
    "start": "1977870",
    "end": "1987050"
  },
  {
    "text": "they correspond to\nthe four states. ",
    "start": "1987050",
    "end": "1994000"
  },
  {
    "text": "So how do we do this\nalgebraically? ",
    "start": "1994000",
    "end": "1999130"
  },
  {
    "start": "1998000",
    "end": "2211000"
  },
  {
    "text": "Let's draw a generator matrix\nfor C in a certain form.",
    "start": "1999130",
    "end": "2004645"
  },
  {
    "text": " Again, I'll draw the\npast, the future.",
    "start": "2004645",
    "end": "2013670"
  },
  {
    "text": "So that's the only division I'm\nconcerned with right now. And let me draw it in\ngeneral form first.",
    "start": "2013670",
    "end": "2022990"
  },
  {
    "text": "I've defined this past subcode,\nCp, at a certain dimension, so it has a certain\nnumber of generators.",
    "start": "2022990",
    "end": "2031140"
  },
  {
    "text": "So we're going to put up here a\nset of generators for Cp, g",
    "start": "2031140",
    "end": "2036420"
  },
  {
    "text": "of Cp, however many there\nhappen to be. And what's their common\ncharacteristic?",
    "start": "2036420",
    "end": "2043810"
  },
  {
    "text": "They all are all 0\nin the future.",
    "start": "2043810",
    "end": "2048935"
  },
  {
    "text": "So they're all going\nto look like that. ",
    "start": "2048935",
    "end": "2056460"
  },
  {
    "text": "Then I'm going to take a set\nof generators of Cf, and",
    "start": "2056460",
    "end": "2062690"
  },
  {
    "text": "similarly I'm going to use\nthem up over there. These are all code words, and\nthey're clearly linear and",
    "start": "2062690",
    "end": "2070739"
  },
  {
    "text": "independent of those. So I'm on my way to constructing\na generator matrix for C.",
    "start": "2070739",
    "end": "2076919"
  },
  {
    "text": "But obviously I'm going\nto need some more. We can call this the number of\ngenerators in the past, the",
    "start": "2076920",
    "end": "2084600"
  },
  {
    "text": "number of generators\nin the future. This is the dimension of Cp.",
    "start": "2084600",
    "end": "2089699"
  },
  {
    "text": "This is the dimension of Cf. And now I need some more\ngenerators, which by",
    "start": "2089699",
    "end": "2097490"
  },
  {
    "text": "definition are going to have to\nspan both past and future. ",
    "start": "2097490",
    "end": "2103790"
  },
  {
    "text": "Let's see. Since I've already introduced\nthe coset language, let me",
    "start": "2103790",
    "end": "2109880"
  },
  {
    "text": "just mysteriously put that\nas the generators",
    "start": "2109880",
    "end": "2116400"
  },
  {
    "text": "of a quotient group. C mod Cp and Cf is what that\nmeans, and it's a quotient",
    "start": "2116400",
    "end": "2125150"
  },
  {
    "text": "group, if you know or recall\nwhat a quotient group is.",
    "start": "2125150",
    "end": "2130442"
  },
  {
    "text": "But anyway, there are k minus\nkp minus kf of these.",
    "start": "2130442",
    "end": "2135789"
  },
  {
    "text": "And I don't particularly care\nwhat I put down in here. Their property is that\nthey have to span both past and future.",
    "start": "2135790",
    "end": "2144070"
  },
  {
    "text": "So for our particular example,\nhere's the generator for the 8, 4, 4 code.",
    "start": "2144070",
    "end": "2152250"
  },
  {
    "text": "What we're talking about is\na generator that looks like 1, 1, 1, 1.",
    "start": "2152250",
    "end": "2158390"
  },
  {
    "text": "That's k past is 1. 0, 0, 0, 1, 1, 1, 1.",
    "start": "2158390",
    "end": "2165470"
  },
  {
    "text": "k future is 1. They're both one-dimensional\ncodes. Now I need two other generators,\nwhich must span",
    "start": "2165470",
    "end": "2174150"
  },
  {
    "text": "past and future.  So what'll I take?",
    "start": "2174150",
    "end": "2182180"
  },
  {
    "text": "Let me just take two more. 1, 1, 0, 0, 1, 1, 0, 0, 1,\n0, 1, 0, 1, 0, 1, 0.",
    "start": "2182180",
    "end": "2192675"
  },
  {
    "text": "That would be one\npossible choice. And so this is k minus kp\nminus kf, which is 2.",
    "start": "2192675",
    "end": "2201349"
  },
  {
    "start": "2201350",
    "end": "2213250"
  },
  {
    "start": "2211000",
    "end": "2337000"
  },
  {
    "text": "What I'm going to claim is that\nI'm going to need a state for every possible linear\ncombination of these",
    "start": "2213250",
    "end": "2220510"
  },
  {
    "text": "generators. ",
    "start": "2220510",
    "end": "2226330"
  },
  {
    "text": "So claim --  well, let me break it down into\nmore logical sequence.",
    "start": "2226330",
    "end": "2236880"
  },
  {
    "text": "Every code word in C can be\nwritten as some linear",
    "start": "2236880",
    "end": "2247019"
  },
  {
    "text": "combination of the generators. What does that amount to?",
    "start": "2247020",
    "end": "2252060"
  },
  {
    "text": "It amounts to a certain code\nword in the past code plus a",
    "start": "2252060",
    "end": "2260010"
  },
  {
    "text": "certain component in the future\ncode, either all 0 or they're all one, plus --",
    "start": "2260010",
    "end": "2266080"
  },
  {
    "text": "let me call this the state code,\nS, as I do in the notes.",
    "start": "2266080",
    "end": "2272430"
  },
  {
    "text": "So in this case we have a\ntwo-dimensional state code. Its elements are eight-tuples. It's just a subcode of the code\nwe started with, so it's",
    "start": "2272430",
    "end": "2280769"
  },
  {
    "text": "not quite clear how it\ncorresponds to states yet.",
    "start": "2280770",
    "end": "2286440"
  },
  {
    "text": "Well, let me just call that\nS for state sequence. ",
    "start": "2286440",
    "end": "2297250"
  },
  {
    "text": "And I claim I can break this up\nbecause the proof is that",
    "start": "2297250",
    "end": "2302730"
  },
  {
    "text": "for every c in C is equal\nto a sum of --",
    "start": "2302730",
    "end": "2309240"
  },
  {
    "text": "it's a linear combination\nof the generators. So I just break that up into\nthe three possible parts.",
    "start": "2309240",
    "end": "2314480"
  },
  {
    "text": "So I get one part that's in the\npast subcode, one part's in the future subcode, and\none is in the state.",
    "start": "2314480",
    "end": "2321030"
  },
  {
    "text": "So this is the past, this is the\nfuture, this is the state. So I just break it up\naccording to this.",
    "start": "2321030",
    "end": "2328700"
  },
  {
    "text": "So the 16 code words can all be\nwritten in this way in our particular example. ",
    "start": "2328700",
    "end": "2337610"
  },
  {
    "start": "2337000",
    "end": "2520000"
  },
  {
    "text": "So let's project this code\nword on the past.",
    "start": "2337610",
    "end": "2343346"
  },
  {
    "text": "What does projection mean? It means you just don't\nlook at the part that's in the future.",
    "start": "2343346",
    "end": "2348470"
  },
  {
    "text": "So we're looking at\nfour-tuples now. ",
    "start": "2348470",
    "end": "2354210"
  },
  {
    "text": "So C projected on to the\npast, this is the part",
    "start": "2354210",
    "end": "2359970"
  },
  {
    "text": "that lives over here. It is equal to -- well, if I\nproject the past code word on",
    "start": "2359970",
    "end": "2366840"
  },
  {
    "text": "the past, I basically get the\npast code word again.",
    "start": "2366840",
    "end": "2372840"
  },
  {
    "text": "Let me write it like that, but\nit's a little bit redundant. ",
    "start": "2372840",
    "end": "2379950"
  },
  {
    "text": "Incidental comment: I can regard\nthis past subcode as",
    "start": "2379950",
    "end": "2385160"
  },
  {
    "text": "either an 8 1 4 code, but\nwhat is it really?",
    "start": "2385160",
    "end": "2391940"
  },
  {
    "text": "It doesn't live out here. It's support is on these four. It's really a 4 1 4 repetition\ncode that lives on the past.",
    "start": "2391940",
    "end": "2403660"
  },
  {
    "text": "It's support is the past. Similarly, the support here\nis the future, and it's",
    "start": "2403660",
    "end": "2411090"
  },
  {
    "text": "effectively a 4 1 4 repetition\ncode for our example. ",
    "start": "2411090",
    "end": "2417960"
  },
  {
    "text": "But formally, if we project\nthis on the past, it's a one-to-one projection.",
    "start": "2417960",
    "end": "2424590"
  },
  {
    "text": "What happens to the\nfuture part? This disappears, because the\nprojection of anything in the",
    "start": "2424590",
    "end": "2430480"
  },
  {
    "text": "future code on the past is\nall 0 by definition.",
    "start": "2430480",
    "end": "2436350"
  },
  {
    "text": "Plus, it's the projection\nof the state sequence on the past. Could the projection of\nthe state sequence on",
    "start": "2436350",
    "end": "2442340"
  },
  {
    "text": "the past be all 0? ",
    "start": "2442340",
    "end": "2448450"
  },
  {
    "text": "This is actually an\nimportant point.  Could the the projection of\nany linear combination of",
    "start": "2448450",
    "end": "2455570"
  },
  {
    "text": "these generators down here\nbe all 0 in the past? The answer is no by\nthe definition",
    "start": "2455570",
    "end": "2461920"
  },
  {
    "text": "of the future subcode. If I found a linear combination\nof this that was",
    "start": "2461920",
    "end": "2468180"
  },
  {
    "text": "all 0 in the past, I should add\nthat to the generators of the future subcode. So by defining this in this way,\nI've forced this to be",
    "start": "2468180",
    "end": "2476819"
  },
  {
    "text": "nonzero, unless, of\ncourse, the state sequence itself was 0.",
    "start": "2476820",
    "end": "2482840"
  },
  {
    "text": "The all 0 sequence is\nin the state code. So this is nonzero\nif S is nonzero.",
    "start": "2482840",
    "end": "2488940"
  },
  {
    "text": " And similarly, if I project\na code word on the",
    "start": "2488940",
    "end": "2496530"
  },
  {
    "text": "future, I get -- ",
    "start": "2496530",
    "end": "2502390"
  },
  {
    "text": "this becomes all 0. I get the element of the future\ncode projected on the",
    "start": "2502390",
    "end": "2508350"
  },
  {
    "text": "future, plus the state on the\nfuture, the state projected on the future.",
    "start": "2508350",
    "end": "2514440"
  },
  {
    "start": "2514440",
    "end": "2520568"
  },
  {
    "start": "2520000",
    "end": "2621000"
  },
  {
    "text": "And now I claim further that\nthis means I can draw a",
    "start": "2520569",
    "end": "2528910"
  },
  {
    "text": "trellis as follows. ",
    "start": "2528910",
    "end": "2536220"
  },
  {
    "text": "Start from here. For the all 0 sequence, I'll\nhave a bunch of parallel paths",
    "start": "2536220",
    "end": "2542859"
  },
  {
    "text": "going to the zero state\nthat together add up to the past subcode.",
    "start": "2542860",
    "end": "2548780"
  },
  {
    "text": " These are precise. One of these is going to be all\n0, and these are precisely",
    "start": "2548780",
    "end": "2557450"
  },
  {
    "text": "the ones over here that can be\nfollowed by all 0, as I've",
    "start": "2557450",
    "end": "2562665"
  },
  {
    "text": "already claimed.  So these are the ones that\ncan be followed by 0, and",
    "start": "2562665",
    "end": "2570910"
  },
  {
    "text": "similarly over here I'm going to\nput all the future subcode. ",
    "start": "2570910",
    "end": "2579140"
  },
  {
    "text": "I will say these correspond\nto the state sequence 0.",
    "start": "2579140",
    "end": "2584200"
  },
  {
    "text": "These are the ones where if I\nput 0 coefficients down here, I just get linear combinations\nof the past subcode and the",
    "start": "2584200",
    "end": "2591890"
  },
  {
    "text": "future subcode. I'm going to write those\nas going through all one trellis state. And I believe I've already made\nthe argument that this",
    "start": "2591890",
    "end": "2598620"
  },
  {
    "text": "state at least is legitimate,\nthat every combination of",
    "start": "2598620",
    "end": "2605010"
  },
  {
    "text": "something in the past subcode\nwith something in the future subcode is a code word. This is simply just Cp plus\nCf, what I wrote before.",
    "start": "2605010",
    "end": "2614340"
  },
  {
    "text": "So I've got one state that\nrepresents all of Cp plus Cf. ",
    "start": "2614340",
    "end": "2622080"
  },
  {
    "start": "2621000",
    "end": "3036000"
  },
  {
    "text": "And now let's take another\ntypical state down here. We'll say this state corresponds\nto the state",
    "start": "2622080",
    "end": "2629130"
  },
  {
    "text": "sequence S, or S is a general\nstate sequence.",
    "start": "2629130",
    "end": "2634970"
  },
  {
    "text": "Think of it as being nonzero. And what am I going\nto put on that?",
    "start": "2634970",
    "end": "2640410"
  },
  {
    "text": "I'm going to put Cp plus\nthis state sequence projected on the past.",
    "start": "2640410",
    "end": "2647200"
  },
  {
    "text": "And that way I'll get all past\nprojections that are of this form for a specific S projected\non the past,",
    "start": "2647200",
    "end": "2654789"
  },
  {
    "text": "allowing this to vary through\nthe past subcode. ",
    "start": "2654790",
    "end": "2661600"
  },
  {
    "text": "And similarly over here, I will\nlet the set of all these",
    "start": "2661600",
    "end": "2667320"
  },
  {
    "text": "trellis branches be\nCf plus the state projected on the future. ",
    "start": "2667320",
    "end": "2677220"
  },
  {
    "text": "So all the things that go\nthrough this state here will be Cp plus Cf plus this\nparticular state sequence.",
    "start": "2677220",
    "end": "2687800"
  },
  {
    "text": "So for each of the state\nsequences, I claim I can define a state. So it's the set of all past\ncontinuations of anything that",
    "start": "2687800",
    "end": "2696810"
  },
  {
    "text": "projects on the past as anything\nin the past subcode plus a past projection of the\nstate sequence can be combined",
    "start": "2696810",
    "end": "2704750"
  },
  {
    "text": "with anything in the future,\nCf plus the future continuation of the\nstate sequence.",
    "start": "2704750",
    "end": "2711730"
  },
  {
    "text": "One of these is simply the past\nprojection of the state sequence plus the future\nprojection",
    "start": "2711730",
    "end": "2717730"
  },
  {
    "text": "of the state sequence. And this is S, and by\nconstruction this is a code",
    "start": "2717730",
    "end": "2725210"
  },
  {
    "text": "word in the code. Now by linearity I can add any\npast code word to this past",
    "start": "2725210",
    "end": "2733539"
  },
  {
    "text": "projection. And that's a code word, so any\nof these elements plus Sf,",
    "start": "2733540",
    "end": "2741450"
  },
  {
    "text": "continued by Sf, the future\nprojection is a code word. See, there we're taking\nsomething generated by Cp and",
    "start": "2741450",
    "end": "2749540"
  },
  {
    "text": "the state code. And similarly, anything by\nhere comes out here.",
    "start": "2749540",
    "end": "2755500"
  },
  {
    "text": "So I think I've left one or two\ndetails undone, but are",
    "start": "2755500",
    "end": "2760900"
  },
  {
    "text": "you convinced that I can define\na state in this way such that all of these pasts can\nbe followed by all these",
    "start": "2760900",
    "end": "2769510"
  },
  {
    "text": "futures, and they're\ncode words? In fact, they correspond\nto this subset of",
    "start": "2769510",
    "end": "2777600"
  },
  {
    "text": "elements of the code. We have examples\nof it up here.",
    "start": "2777600",
    "end": "2784430"
  },
  {
    "text": "For instance, 0, 0, 1, 1. Or let's see.",
    "start": "2784430",
    "end": "2789900"
  },
  {
    "text": "Let's take a past protection,\n1, 1, 0, 0. Here's a typical state\nsequence, 1, 1,",
    "start": "2789900",
    "end": "2796650"
  },
  {
    "text": "0, 0, 1, 1, 0, 0. And I can add to this anything\nin the past, so I get 0, 0, 1,",
    "start": "2796650",
    "end": "2806920"
  },
  {
    "text": "1, 1, 1, 0, 0. I can add to it any of these\ntwo, anything in the future.",
    "start": "2806920",
    "end": "2814490"
  },
  {
    "text": "So I get 1, 1, 0, 0, 0, 0, 1, 1\nand 0, 0, 1, 1, 0, 0, 1, 1.",
    "start": "2814490",
    "end": "2821570"
  },
  {
    "text": "And I claim that all four of\nthese have the state projected on the past equals 1, 1, 0, 0.",
    "start": "2821570",
    "end": "2827730"
  },
  {
    "text": "The state projected on the\nfuture is 1, 1, 0, 0.",
    "start": "2827730",
    "end": "2833270"
  },
  {
    "text": "And that any of these pasts\ncan be followed by any of these futures. So this is C past plus\nC future plus 1, 1,",
    "start": "2833270",
    "end": "2843450"
  },
  {
    "text": "0, 0, 1, 1, 0, 0. That is the claim. ",
    "start": "2843450",
    "end": "2856520"
  },
  {
    "text": "And furthermore, if I go through\nthis, dot dot dot, I'm going to generate everything in\nC. So this is the partition",
    "start": "2856520",
    "end": "2864540"
  },
  {
    "text": "of C -- into what?",
    "start": "2864540",
    "end": "2872970"
  },
  {
    "text": "S cosets of Cp plus Cf,\nsubcode of C. So",
    "start": "2872970",
    "end": "2885520"
  },
  {
    "text": "algebraically, that's\nwhat's going on.  But having done this partition,\nat least with",
    "start": "2885520",
    "end": "2893340"
  },
  {
    "text": "respect to this state space, I\ncan create something which has",
    "start": "2893340",
    "end": "2900230"
  },
  {
    "text": "S states the size of\nS, which is -- what is this?",
    "start": "2900230",
    "end": "2905690"
  },
  {
    "text": "The dimension of S is the\ndimension of C minus the",
    "start": "2905690",
    "end": "2911829"
  },
  {
    "text": "dimension of Cp minus\nthe dimension of Cf. ",
    "start": "2911830",
    "end": "2921940"
  },
  {
    "text": "So I've argued that\nI can get a state space with this dimension.",
    "start": "2921940",
    "end": "2930119"
  },
  {
    "text": "It's a linear state space, and\nit has a certain dimension,",
    "start": "2930120",
    "end": "2935590"
  },
  {
    "text": "which is just the dimension of\nC minus the dimension of the past subcode minus\nthe dimension of the future subcode. It's the number of generators\nthat I need for S. So in the",
    "start": "2935590",
    "end": "2946180"
  },
  {
    "text": "example, I need two generators\nfor S, so I get a state space of dimension two,\nor size four.",
    "start": "2946180",
    "end": "2952859"
  },
  {
    "text": " It's just a vector space\nover F2 in this case.",
    "start": "2952860",
    "end": "2960015"
  },
  {
    "text": " You all with me? I think you are.",
    "start": "2960015",
    "end": "2965599"
  },
  {
    "text": "I don't see any great puzzles. So I can get at least\nthese few states.",
    "start": "2965600",
    "end": "2973380"
  },
  {
    "text": "Could I get any fewer? ",
    "start": "2973380",
    "end": "2979750"
  },
  {
    "text": "Can I possibly merge any\ntwo of these states? Could I draw a trellis in which,\nsay, I've mushed the",
    "start": "2979750",
    "end": "2990490"
  },
  {
    "text": "zero state together with one\nof these nonzero states?",
    "start": "2990490",
    "end": "2995938"
  },
  {
    "text": "And the answer to that is\nclearly no by the definition of the past and the\nfuture subcodes.",
    "start": "2995938",
    "end": "3002490"
  },
  {
    "text": "These are all of the future\nsequences that can follow the",
    "start": "3002490",
    "end": "3008410"
  },
  {
    "text": "all 0 past sequence. There can't be any more down\nhere, so we can't possibly mush them together.",
    "start": "3008410",
    "end": "3014840"
  },
  {
    "text": "And similarly, just by going\nthrough this, if you can't",
    "start": "3014840",
    "end": "3021280"
  },
  {
    "text": "take the past part of one state\nand combine it with a future part of another state\nsequence, because that clearly",
    "start": "3021280",
    "end": "3031170"
  },
  {
    "text": "is not in the code. And I don't have a slick proof\nof that in mind at the moment,",
    "start": "3031170",
    "end": "3039570"
  },
  {
    "start": "3036000",
    "end": "3369000"
  },
  {
    "text": "but there is one in the notes. ",
    "start": "3039570",
    "end": "3051770"
  },
  {
    "text": "The conclusion from this\nis what I call the state space theorem.",
    "start": "3051770",
    "end": "3058150"
  },
  {
    "text": "Given code C, any partition of\nthe time axis, the total index",
    "start": "3058150",
    "end": "3069015"
  },
  {
    "text": "set, into past and future,\nI can do this",
    "start": "3069015",
    "end": "3078059"
  },
  {
    "text": "not just at the midpoint. I can do this any point along\nthe code that I want to, any",
    "start": "3078060",
    "end": "3084609"
  },
  {
    "text": "partition into past\nand future. ",
    "start": "3084610",
    "end": "3092470"
  },
  {
    "text": "The minimal --  we get a linear state space, in\nother words a vector space,",
    "start": "3092470",
    "end": "3109170"
  },
  {
    "text": "S. And the dimension of S is\nequal to the dimension of C",
    "start": "3109170",
    "end": "3116589"
  },
  {
    "text": "minus the dimension of this\npast subcode minus the",
    "start": "3116590",
    "end": "3122020"
  },
  {
    "text": "dimension of the\nfuture subcode.  So we can simply calculate what\nthe minimal dimension of",
    "start": "3122020",
    "end": "3129590"
  },
  {
    "text": "a state space is at any\npoint along here. ",
    "start": "3129590",
    "end": "3136770"
  },
  {
    "text": "So for instance, at this point\nhere, what's the minimal size",
    "start": "3136770",
    "end": "3142110"
  },
  {
    "text": "of a state space? What's the past subcode here? What's the set of all code\nsequences that are all 0 in",
    "start": "3142110",
    "end": "3151960"
  },
  {
    "text": "the future, as we have\nall 0's out here? This point, Cp, is just 0, 0.",
    "start": "3151960",
    "end": "3161090"
  },
  {
    "text": "It just has dimension 0. Yeah, 0 What's the future subcode?",
    "start": "3161090",
    "end": "3167810"
  },
  {
    "text": "This is the subcode which has\nsupport all out here.",
    "start": "3167810",
    "end": "3174240"
  },
  {
    "text": "This is anything that\nstarts with 0, 0. This is 0, 0, 0, 0, 0,\n0, 0, 1, 1, 1, 1.",
    "start": "3174240",
    "end": "3187290"
  },
  {
    "text": "Let me just write\ndown generators. 1, 1, 1, 1, 0, 0.",
    "start": "3187290",
    "end": "3192500"
  },
  {
    "text": "So there is -- this is dimension\nCp equals 0.",
    "start": "3192500",
    "end": "3197590"
  },
  {
    "text": "Dimension Cf equals 2. ",
    "start": "3197590",
    "end": "3205290"
  },
  {
    "text": "And so the minimum size of the\nstate space is 4 minus 2.",
    "start": "3205290",
    "end": "3215480"
  },
  {
    "text": "That's again 2.  AUDIENCE: Does this mean\nthat [INAUDIBLE]",
    "start": "3215480",
    "end": "3222975"
  },
  {
    "text": "each state's the number\nof states is the same? PROFESSOR: Certainly not\ntrue in general.",
    "start": "3222975",
    "end": "3228010"
  },
  {
    "text": " Let me ask about time three.",
    "start": "3228010",
    "end": "3234800"
  },
  {
    "text": "Can certainly do that.  Time three, what's\nthe past subcode?",
    "start": "3234800",
    "end": "3243789"
  },
  {
    "text": "This is the code words that\nhave support on the first",
    "start": "3243790",
    "end": "3248940"
  },
  {
    "text": "three symbols. Again, that has to have\ndimension 0, because the minimum weight of\nthis code is 4.",
    "start": "3248940",
    "end": "3255660"
  },
  {
    "text": "So there can't be anything that\njust looks like 1,1,1 and then five 0's",
    "start": "3255660",
    "end": "3262390"
  },
  {
    "text": "What is the future\nsubcode for that? Now the only generator\nof the future subcode",
    "start": "3262390",
    "end": "3269609"
  },
  {
    "text": "is 0, 1, 1, 1, 1. We have to go this far, and then\nit's what futures can we",
    "start": "3269610",
    "end": "3275830"
  },
  {
    "text": "get from here? There are only two words\nthat are in the future.",
    "start": "3275830",
    "end": "3281720"
  },
  {
    "text": "So in that case we have\ndimension past is 0. Dimension future is 1.",
    "start": "3281720",
    "end": "3287480"
  },
  {
    "text": "So if we drew a state space\nhere, we would have to have",
    "start": "3287480",
    "end": "3293720"
  },
  {
    "text": "eight states.  In fact, I can do that if I just\ndraw a little state in",
    "start": "3293720",
    "end": "3302230"
  },
  {
    "text": "the middle of each\nof these lines. ",
    "start": "3302230",
    "end": "3309700"
  },
  {
    "text": "I get now a trellis picture\nwhich has an explicit state at this third time here, but\nit has eight states.",
    "start": "3309700",
    "end": "3318820"
  },
  {
    "text": "Oo ugly, so I've masked that. I've suppressed that\nby this nice little four-state trellis.",
    "start": "3318820",
    "end": "3324950"
  },
  {
    "text": "But yeah, if you insisted on\ndrawing a state space at time three, it would have\neight states in it.",
    "start": "3324950",
    "end": "3330220"
  },
  {
    "start": "3330220",
    "end": "3336400"
  },
  {
    "text": "We'll get back to that when I\nget to this turn-the-crank procedure, if I do, of getting\nto minimal trellises.",
    "start": "3336400",
    "end": "3345760"
  },
  {
    "text": "So what have we done? We've established that there is\na uniquely defined minimal",
    "start": "3345760",
    "end": "3353360"
  },
  {
    "text": "state space size for\nany partition between past and future. In other words, if there's any\ntime where you want to make a",
    "start": "3353360",
    "end": "3359800"
  },
  {
    "text": "cut in the time axis between\npast and future, you can define what the minimal\nstate space size is.",
    "start": "3359800",
    "end": "3366800"
  },
  {
    "text": " And now you might ask\nthe question, can we",
    "start": "3366800",
    "end": "3379070"
  },
  {
    "start": "3369000",
    "end": "3600000"
  },
  {
    "text": "simultaneously achieve minimal\nstate spaces at all times?",
    "start": "3379070",
    "end": "3393290"
  },
  {
    "start": "3393290",
    "end": "3400200"
  },
  {
    "text": "In other words, can we draw a\nsingle trellis which gets the",
    "start": "3400200",
    "end": "3406750"
  },
  {
    "text": "minimal state space\nat each time? ",
    "start": "3406750",
    "end": "3414400"
  },
  {
    "text": "We haven't proved\nthat there is. It might be that if you push\nin the state space at one",
    "start": "3414400",
    "end": "3419770"
  },
  {
    "text": "time, it forces the state\nspace to balloon out at another time.",
    "start": "3419770",
    "end": "3425200"
  },
  {
    "text": "And in fact, for nonlinear\ncodes, that is typically what happens. But for linear codes, a\nminor miracle occurs.",
    "start": "3425200",
    "end": "3431900"
  },
  {
    "text": "And the answer is yes. ",
    "start": "3431900",
    "end": "3437710"
  },
  {
    "text": "So how am I going\nto prove that?",
    "start": "3437710",
    "end": "3445190"
  },
  {
    "text": "I'm going to prove it via this\nvery handy tool, which is also a construction tool which is\ncalled a trellis-oriented, or",
    "start": "3445190",
    "end": "3457230"
  },
  {
    "text": "a little bit more formally, a\nminimum span generator matrix.",
    "start": "3457230",
    "end": "3464085"
  },
  {
    "start": "3464085",
    "end": "3476349"
  },
  {
    "text": "The idea here is, given a\ngenerator matrix, reduce to",
    "start": "3476350",
    "end": "3487830"
  },
  {
    "text": "trellis-oriented form. We're going to prove that this\nis unique, or effectively",
    "start": "3487830",
    "end": "3496599"
  },
  {
    "text": "unique, and specifies minimal\ntrellis at all times in a",
    "start": "3496600",
    "end": "3507690"
  },
  {
    "text": "certain way. ",
    "start": "3507690",
    "end": "3516234"
  },
  {
    "text": "Let's start again. ",
    "start": "3516235",
    "end": "3531190"
  },
  {
    "text": "So loosely, what is a trellis-oriented generator matrix?",
    "start": "3531190",
    "end": "3538522"
  },
  {
    "text": "Well, if we have a generator,\nsay 0, 0, 1, 1, 1, 1, 0, 0,",
    "start": "3538522",
    "end": "3548090"
  },
  {
    "text": "its span is this interval from\nits starting time to its",
    "start": "3548090",
    "end": "3558470"
  },
  {
    "text": "ending time. It's this. We say it starts at time 3, it\nends at time 6, the span is",
    "start": "3558470",
    "end": "3567109"
  },
  {
    "text": "the interval 3 to\n6 in this case. ",
    "start": "3567110",
    "end": "3573060"
  },
  {
    "text": "So we think of this as not being\nactive before time 3.",
    "start": "3573060",
    "end": "3578190"
  },
  {
    "text": "At time 3 we get the first\ninteresting thing happens. A 1 comes up, but then goes\nthrough something.",
    "start": "3578190",
    "end": "3585640"
  },
  {
    "text": "These don't have\nto all be ones. It could be 1, 1, 0, 1. Then there's a last 1 at some\npoint, and then it quiets",
    "start": "3585640",
    "end": "3593329"
  },
  {
    "text": "down, and it's dead again. AUDIENCE: [INAUDIBLE] ",
    "start": "3593330",
    "end": "3599250"
  },
  {
    "text": "PROFESSOR: Yes. Except I'm not sure. Would you say the support of\nthis was 3, 4, and 6, or would",
    "start": "3599250",
    "end": "3606160"
  },
  {
    "text": "you say it was the interval\nfrom 3 to 6? I don't know. What's the definition\nof support?",
    "start": "3606160",
    "end": "3613490"
  },
  {
    "text": "AUDIENCE: I don't know it. PROFESSOR: I'm not\nsure I know. It's probably been defined\nboth ways in different",
    "start": "3613490",
    "end": "3620180"
  },
  {
    "text": "literatures. So I'll call it a span, but it's\nroughly the support of",
    "start": "3620180",
    "end": "3626780"
  },
  {
    "text": "the interesting part. ",
    "start": "3626780",
    "end": "3632400"
  },
  {
    "text": "So that's the definition\nof span. And what a trellis-oriented\ngeneral matrix is, a",
    "start": "3632400",
    "end": "3641750"
  },
  {
    "text": "minimal-span matrix, meaning all\ngenerators have a short a",
    "start": "3641750",
    "end": "3652400"
  },
  {
    "text": "span as possible.  I'll just say, are as\nshort as possible.",
    "start": "3652400",
    "end": "3658615"
  },
  {
    "text": " This is a lecture.",
    "start": "3658615",
    "end": "3664690"
  },
  {
    "text": "I can be loose. Now it's not even clear that's\nwell-defined yet.",
    "start": "3664690",
    "end": "3670210"
  },
  {
    "text": " But let me again give you an\nexample, and show you how to",
    "start": "3670210",
    "end": "3681430"
  },
  {
    "text": "find a trellis-oriented\ngenerating",
    "start": "3681430",
    "end": "3687480"
  },
  {
    "text": "matrix just by example. ",
    "start": "3687480",
    "end": "3693670"
  },
  {
    "text": "Let me take our example here, 1,\n1, 0, 0, 1, 1, 0, 0, 1, 0,",
    "start": "3693670",
    "end": "3700010"
  },
  {
    "text": "1, 0, 1, 0, 1, 0, 1,\n1, 1, 1, 1, 1, 1.",
    "start": "3700010",
    "end": "3706890"
  },
  {
    "text": "So there is a generator\nmatrix that's not in trellis-oriented form.",
    "start": "3706890",
    "end": "3712349"
  },
  {
    "text": "In particular, I can see that by\nadding this to this, I can make this generator\nhave shorter span.",
    "start": "3712350",
    "end": "3720089"
  },
  {
    "text": "I can replace it by one, which\nis four 0's and then four 1's, which we've already\nfound useful in",
    "start": "3720090",
    "end": "3726089"
  },
  {
    "text": "constructing a trellis. But let me proceed through\nit more systematically.",
    "start": "3726090",
    "end": "3732920"
  },
  {
    "text": "How can I make -- this generator generates\nall words in the code.",
    "start": "3732920",
    "end": "3739380"
  },
  {
    "text": "So how can I find a set of\nlinearly independent generators that has\nshorter span?",
    "start": "3739380",
    "end": "3745670"
  },
  {
    "text": "There's the sort of greedy\nway of proceeding. Let's take the first\ntwo generators.",
    "start": "3745670",
    "end": "3751380"
  },
  {
    "text": "Can I combine these to find\nanything that has a shorter span, that I can replace one\nof the generators with?",
    "start": "3751380",
    "end": "3759559"
  },
  {
    "text": "Anybody? AUDIENCE: No. PROFESSOR: No, I can't. That's not the answer\nI expected to hear.",
    "start": "3759560",
    "end": "3765190"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE] ",
    "start": "3765190",
    "end": "3772570"
  },
  {
    "text": "PROFESSOR: Let's identify what\nthe spans of these are. That has a span of four. That has a span of six.",
    "start": "3772570",
    "end": "3777990"
  },
  {
    "text": "That has a span of seven. This has a span of eight. What I'm trying to do\nis to reduce that.",
    "start": "3777990",
    "end": "3784388"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: So if I add the first\ntwo, that seems like a",
    "start": "3784388",
    "end": "3789470"
  },
  {
    "text": "good thing to do, because then\nI get 0, 0, 1, 1, and I've",
    "start": "3789470",
    "end": "3796920"
  },
  {
    "text": "reduced the span of\nthat generator. ",
    "start": "3796920",
    "end": "3805830"
  },
  {
    "text": "Any way I can combine these\ntwo to reduce the span? ",
    "start": "3805830",
    "end": "3814829"
  },
  {
    "text": "Obviously not, because the span\nof this is completely included in the span of this.",
    "start": "3814830",
    "end": "3820270"
  },
  {
    "text": "If I add these two together,\nthen I'll get something which still starts here\nand ends here.",
    "start": "3820270",
    "end": "3827280"
  },
  {
    "text": "Why was I able to reduce\nthe span here? Because the spans had the same\nstarting time, so I got a",
    "start": "3827280",
    "end": "3834970"
  },
  {
    "text": "cancellation of the first bit. I got a 0 up here.",
    "start": "3834970",
    "end": "3840470"
  },
  {
    "text": "That's what I wanted. So that's the key\nto proceeding.",
    "start": "3840470",
    "end": "3845860"
  },
  {
    "text": "If I see any place, any two that\nhave the same starting time, then I can add them\ntogether, and the result will",
    "start": "3845860",
    "end": "3855750"
  },
  {
    "text": "be something that has a\nshorter span than at least one of them. ",
    "start": "3855750",
    "end": "3862280"
  },
  {
    "text": "So let me do that. I see two here that have the\nsame starting time, and so I",
    "start": "3862280",
    "end": "3867730"
  },
  {
    "text": "add that to that, and\nI get 0 1 0 1. So I've got the span\ndown to here.",
    "start": "3867730",
    "end": "3875520"
  },
  {
    "text": "I can do that down here.  And I get this, which is a very\nnice reduction in span.",
    "start": "3875520",
    "end": "3886140"
  },
  {
    "text": "Can I go any further? I can clearly look for the same\nthing in ending times, if",
    "start": "3886140",
    "end": "3892890"
  },
  {
    "text": "I could find two ending times\nthat were the same. I could do the same trick, add\nthose two generators together,",
    "start": "3892890",
    "end": "3900640"
  },
  {
    "text": "and the result would be\nsomething that was shorter than at least one of the\ncomponent generators.",
    "start": "3900640",
    "end": "3907680"
  },
  {
    "text": "But here are my starting\ntimes, here, here, here, and here. They're all different.",
    "start": "3907680",
    "end": "3913780"
  },
  {
    "text": "So I have no possibility for\ncombining two and getting a",
    "start": "3913780",
    "end": "3919640"
  },
  {
    "text": "better starting time. Similarly, the ending times\nare here, here, and here. They're all different.",
    "start": "3919640",
    "end": "3926590"
  },
  {
    "text": "So I'm done. ",
    "start": "3926590",
    "end": "3933910"
  },
  {
    "text": "So, that's how you find a trellis-oriented generator matrix.",
    "start": "3933910",
    "end": "3939339"
  },
  {
    "text": "And there's a closely associated\ntheorem, which is",
    "start": "3939340",
    "end": "3946450"
  },
  {
    "text": "that a generator matrix g is\ntrellis-oriented if, and only",
    "start": "3946450",
    "end": "3957040"
  },
  {
    "text": "if, all starting times differ,\nall ending terms differ.",
    "start": "3957040",
    "end": "3971522"
  },
  {
    "start": "3971522",
    "end": "3984320"
  },
  {
    "text": "Yeah? AUDIENCE: What's the definition\nof all generators as short as possible?",
    "start": "3984320",
    "end": "3991410"
  },
  {
    "text": "PROFESSOR: I'm now making it. This is really just\nmotivation. ",
    "start": "3991410",
    "end": "4000279"
  },
  {
    "text": "So this can be my actual\ndefinition of a trellis-oriented generator\nmatrix, which I've proved this theorem.",
    "start": "4000280",
    "end": "4006910"
  },
  {
    "text": "It's a matrix in which all the\nstarting times are different, and all the ending times\nare different. And what I've achieved is\nthat all generators",
    "start": "4006910",
    "end": "4014240"
  },
  {
    "text": "are as short as possible. ",
    "start": "4014240",
    "end": "4021940"
  },
  {
    "text": "How would I go about proving\nthe theorem? ",
    "start": "4021940",
    "end": "4029160"
  },
  {
    "text": "Suppose I have a matrix that's\nnot in this form.",
    "start": "4029160",
    "end": "4035170"
  },
  {
    "text": "And I've already proved that I\ncan shorten the generators.  So if it's not in this form,\nit's not trellis-oriented.",
    "start": "4035170",
    "end": "4043140"
  },
  {
    "text": "The generators are not\nas short as possible. So all I need to do is\nprove the other side.",
    "start": "4043140",
    "end": "4048810"
  },
  {
    "text": "Suppose it is in this form.  Then could I possibly find\nshorter generators?",
    "start": "4048810",
    "end": "4058510"
  },
  {
    "text": " And the proof of that is\nbasically the following lemma,",
    "start": "4058510",
    "end": "4068810"
  },
  {
    "text": "that the subcode C, take\nany interval kk prime.",
    "start": "4068810",
    "end": "4082863"
  },
  {
    "start": "4082863",
    "end": "4090520"
  },
  {
    "text": "So given a trellis-oriented\ngenerating matrix, namely one",
    "start": "4090520",
    "end": "4099355"
  },
  {
    "text": "that satisfies these conditions,\nthen the subcode consisting of all the code words\nwho have support on this",
    "start": "4099355",
    "end": "4106640"
  },
  {
    "text": "interval is generated by\nthe gj in G that have",
    "start": "4106640",
    "end": "4117910"
  },
  {
    "text": "support in kk prime.",
    "start": "4117910",
    "end": "4124700"
  },
  {
    "text": " And that's kind of intuitive\nand obvious.",
    "start": "4124700",
    "end": "4133089"
  },
  {
    "text": "On the one hand, it's clear that\nany linear combination of these generators is a code\nword in the subcode.",
    "start": "4133090",
    "end": "4141979"
  },
  {
    "text": "Obviously they all have support\nin this interval. I can't generate anything that\nhas support outside that interval by linear\ncombinations.",
    "start": "4141979",
    "end": "4150244"
  },
  {
    "text": " So the only question is, can I\npossibly get anything that's",
    "start": "4150244",
    "end": "4161589"
  },
  {
    "text": "in the subcode by combining\nwith a generator that is",
    "start": "4161590",
    "end": "4168210"
  },
  {
    "text": "outside this interval? And again, it's clear that say I\ntake kk prime to be here, if",
    "start": "4168210",
    "end": "4179509"
  },
  {
    "text": "all the starting times are\ndifferent, and all the ending times are different, and I start\nto add generators that",
    "start": "4179510",
    "end": "4187199"
  },
  {
    "text": "are outside here, I can't\npossibly get cancellation of the starting time, or I can't\npossibly get cancellation of",
    "start": "4187200",
    "end": "4194420"
  },
  {
    "text": "the ending time. So I'm going to wind up with a\ncode word which has support",
    "start": "4194420",
    "end": "4199469"
  },
  {
    "text": "outside the interval.  So, it really is\na simple lemma.",
    "start": "4199470",
    "end": "4206812"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] have the all 0 code word? PROFESSOR: Excuse me? AUDIENCE: The all 0 word will\nbe part of the subcode.",
    "start": "4206812",
    "end": "4214430"
  },
  {
    "text": "PROFESSOR: The all 0 word is\nalways part of the subcode. AUDIENCE: [INAUDIBLE] who has something outside\nthis interval.",
    "start": "4214430",
    "end": "4220300"
  },
  {
    "text": "Then when you add that with the\nall 0 one, you would get something that does not belong\nto the subcode, [INAUDIBLE]",
    "start": "4220300",
    "end": "4226258"
  },
  {
    "text": " PROFESSOR: Right, but\nI have to ask if",
    "start": "4226258",
    "end": "4232350"
  },
  {
    "text": "there's any code word. So I have to consider all\nthe code words, really.",
    "start": "4232350",
    "end": "4238480"
  },
  {
    "text": "But I'm saying if I have a code\nword C that is sum of the",
    "start": "4238480",
    "end": "4244120"
  },
  {
    "text": "generators, and I have a nonzero\ncoefficient here on any generator that has starting\ntime outside this",
    "start": "4244120",
    "end": "4253389"
  },
  {
    "text": "interval or ending time outside\nthis interval, then I can't possibly get\ncancellation of",
    "start": "4253390",
    "end": "4259320"
  },
  {
    "text": "that nonzero thing. And so if it really requires\nthis to be nonzero, and then",
    "start": "4259320",
    "end": "4266090"
  },
  {
    "text": "I'm going to say that\nI get a code word that's not in this subcode. ",
    "start": "4266090",
    "end": "4271340"
  },
  {
    "text": "So that's very quick, intuitive sketch of that proof. Again, for writing it\nout, see the notes.",
    "start": "4271340",
    "end": "4284750"
  },
  {
    "text": "But this lemma then proves this\ntheorem, because it now",
    "start": "4284750",
    "end": "4294510"
  },
  {
    "text": "says I can't -- ",
    "start": "4294510",
    "end": "4300260"
  },
  {
    "text": "if all the starting times are\ndifferent, and all the ending times are different, then I\ncan't possibly get shorter",
    "start": "4300260",
    "end": "4307210"
  },
  {
    "text": "support for any of\nthe generators. ",
    "start": "4307210",
    "end": "4312700"
  },
  {
    "text": "And I don't think so in a\ntotally convincing way, but that basically is\nthe point here.",
    "start": "4312700",
    "end": "4319650"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] ",
    "start": "4319650",
    "end": "4326030"
  },
  {
    "text": "PROFESSOR: Well, now\nI'm defining this. So, meaning that all the\nstarting times are different,",
    "start": "4326030",
    "end": "4331610"
  },
  {
    "text": "and all the ending times\nare different. From now on that's going to\nbe my definition of a trellis-oriented generator\nmatrix.",
    "start": "4331610",
    "end": "4337350"
  },
  {
    "text": "So, saying that this property\nimplies this property. ",
    "start": "4337350",
    "end": "4345790"
  },
  {
    "text": "But now this lemma has an\ninteresting consequence. This implies for any past and\nfuture, Cp is generated by the",
    "start": "4345790",
    "end": "4374190"
  },
  {
    "text": "generators in a trellis-oriented\ngenerating",
    "start": "4374190",
    "end": "4382820"
  },
  {
    "text": "matrix with support in p.",
    "start": "4382820",
    "end": "4389090"
  },
  {
    "text": "And similarly, Cf is generated\nby the generators",
    "start": "4389090",
    "end": "4396880"
  },
  {
    "text": "with support in f. So for any p and f, I get a\npicture that looks like this.",
    "start": "4396880",
    "end": "4414510"
  },
  {
    "text": "I can draw now this boundary\nanywhere I want, and if the matrix was trellis-oriented,\nthen I'm going to get a",
    "start": "4414510",
    "end": "4420700"
  },
  {
    "text": "certain subset of generators\nthat live in the past, and they'll be the generators\nin fact of Cp.",
    "start": "4420700",
    "end": "4425880"
  },
  {
    "text": " The dimension of them will\nsimply be the number of",
    "start": "4425880",
    "end": "4432190"
  },
  {
    "text": "generators that live in\nthe past for that definition of the past. There will be some other\nset that live entirely in the future.",
    "start": "4432190",
    "end": "4438239"
  },
  {
    "text": "Those will be the ones that\ngenerate the future. And the ones that are neither\nwholly in the past or in the future will generate\nthe state code.",
    "start": "4438240",
    "end": "4447139"
  },
  {
    "text": "So that says I can read off the\ndimensions of the state",
    "start": "4447140",
    "end": "4454750"
  },
  {
    "text": "spaces just by looking at this\nsingle trellis-oriented generator matrix.",
    "start": "4454750",
    "end": "4460909"
  },
  {
    "text": "So now let me very quickly go\nthrough the calculation that I went through a little bit\nlaboriously over here.",
    "start": "4460910",
    "end": "4467880"
  },
  {
    "text": "Suppose I make the whole\nthing the future. In other words, I draw\na cut before time 0.",
    "start": "4467880",
    "end": "4475960"
  },
  {
    "text": "Then the state space\nhas dimension 0.",
    "start": "4475960",
    "end": "4482340"
  },
  {
    "text": "All four generators live\non the future. If I make the cut here, the\nstate space has dimension 1,",
    "start": "4482340",
    "end": "4490440"
  },
  {
    "text": "because three of the generators\nlive on the future. One is active at time 1.",
    "start": "4490440",
    "end": "4496630"
  },
  {
    "text": "So that means I'm going to get a\ntwo-state trellis at time 1.",
    "start": "4496630",
    "end": "4502050"
  },
  {
    "text": "If I make the cut here between\npast and future, I see two generators live on the future\nand are inactive, haven't",
    "start": "4502050",
    "end": "4510670"
  },
  {
    "text": "started yet. But two of the generators\nhave already started.",
    "start": "4510670",
    "end": "4515870"
  },
  {
    "text": "At this time we have three\nactive generators. Only one is still completely\non the future.",
    "start": "4515870",
    "end": "4522210"
  },
  {
    "text": "At this time in the middle I\nhave two generators which --",
    "start": "4522210",
    "end": "4528170"
  },
  {
    "text": "past subcode, future subcode,\nand two that aren't. So I get this form that we\nlooked at over there.",
    "start": "4528170",
    "end": "4535470"
  },
  {
    "text": "And I get a state space here\ngenerated by these two generators of size two.",
    "start": "4535470",
    "end": "4541600"
  },
  {
    "text": "So just by looking at this I go\nright through the picture,",
    "start": "4541600",
    "end": "4547950"
  },
  {
    "text": "and I find the size of the\nstate space at each time. ",
    "start": "4547950",
    "end": "4555990"
  },
  {
    "text": "So this is an algebraic way of\nfinding the minimal state. So now I can draw from this a\ntrellis just by writing down",
    "start": "4555990",
    "end": "4567860"
  },
  {
    "text": "these state spaces. ",
    "start": "4567860",
    "end": "4573796"
  },
  {
    "text": "Let me leave these\ntrellises here. Let me draw now a full\ntrellis, or an",
    "start": "4573796",
    "end": "4579720"
  },
  {
    "text": "eight-section trellis. I'm only going to put one\nbit on each trellis.",
    "start": "4579720",
    "end": "4585840"
  },
  {
    "text": "Here is the starting\nstate, dimension 0. One state. From that I can go\nout to 0 or 1.",
    "start": "4585840",
    "end": "4594806"
  },
  {
    "text": "I won't label the\nstate spaces. Next time, I'm still\njust branching.",
    "start": "4594806",
    "end": "4600956"
  },
  {
    "start": "4600956",
    "end": "4607400"
  },
  {
    "text": "Actually, to make it look like\nthat, I'm going to want to come down here, 0,\n1, 1, 1, 1, 0.",
    "start": "4607400",
    "end": "4616990"
  },
  {
    "start": "4616990",
    "end": "4622610"
  },
  {
    "text": "I basically just have four\nstates at time two corresponding to whatever\nthe first two bits are.",
    "start": "4622610",
    "end": "4628880"
  },
  {
    "text": "They all go to different states,\nbecause all these have possible future continuations.",
    "start": "4628880",
    "end": "4634500"
  },
  {
    "text": "Then I have eight\nstates at this time, still just branching. ",
    "start": "4634500",
    "end": "4656000"
  },
  {
    "text": "Sorry, this is going to take\nsome time to do correctly. ",
    "start": "4656000",
    "end": "4668250"
  },
  {
    "text": "Add this time, then\nI come in here. 0, 1.",
    "start": "4668250",
    "end": "4674325"
  },
  {
    "start": "4674325",
    "end": "4697880"
  },
  {
    "text": "Anyway, and it's symmetrical\non the other side.",
    "start": "4697880",
    "end": "4703620"
  },
  {
    "text": "So that's what a full trellis\nwill look like. And how did I do this trellis\nin principle?",
    "start": "4703620",
    "end": "4710620"
  },
  {
    "text": "I wrote down all\n16 code words. I wrote down what linear\ncombinations they were up",
    "start": "4710620",
    "end": "4717810"
  },
  {
    "text": "here, and I therefore found what\nstates they went through at each time.",
    "start": "4717810",
    "end": "4723350"
  },
  {
    "text": "And then I just drew the graph\nthat goes through that describes those trajectories.",
    "start": "4723350",
    "end": "4730340"
  },
  {
    "text": "So I wrote down all\nthe code words. I wrote down all these state\ncodes at all these times.",
    "start": "4730340",
    "end": "4736059"
  },
  {
    "text": "I could have written them\ndown in any order. And then I just connected\nthe dots according",
    "start": "4736060",
    "end": "4741639"
  },
  {
    "text": "to which state -- I make this calculation as to\nwhich state they go through.",
    "start": "4741640",
    "end": "4747850"
  },
  {
    "start": "4747850",
    "end": "4755590"
  },
  {
    "text": "That's a good place to stop. Let me summarize. ",
    "start": "4755590",
    "end": "4761800"
  },
  {
    "text": "We now have a method, given a\ngenerator matrix for a binary",
    "start": "4761800",
    "end": "4768590"
  },
  {
    "text": "linear block code, of reducing\nthat generator matrix to trellis-oriented form.",
    "start": "4768590",
    "end": "4776160"
  },
  {
    "text": "Just by inspection of the\ntrellis-oriented generator matrix, we can determine what\nthe state space dimensions are",
    "start": "4776160",
    "end": "4783739"
  },
  {
    "text": "at each instant of time, at\neach possible state cut. ",
    "start": "4783740",
    "end": "4791660"
  },
  {
    "text": "And we can then draw a trellis\nwhich achieves that minimal",
    "start": "4791660",
    "end": "4798110"
  },
  {
    "text": "state space dimension, or\nminimal state space size, for every moment of time\nsimultaneously.",
    "start": "4798110",
    "end": "4804400"
  },
  {
    "text": " And I assert that this trellis\nis the minimal trellis in",
    "start": "4804400",
    "end": "4813580"
  },
  {
    "text": "every respect, whether you're\ntrying to minimize state complexity, or if you're using\nthe Viterbi algorithm.",
    "start": "4813580",
    "end": "4821350"
  },
  {
    "text": "Really what you want to minimize\nis the number of branches, but there's a\ncalculation about branch",
    "start": "4821350",
    "end": "4827370"
  },
  {
    "text": "spaces in the notes that shows\nthat this also achieves the minimal branch space size at\nevery time, regardless of how",
    "start": "4827370",
    "end": "4835190"
  },
  {
    "text": "you draw the trellis. More elaborate calculations with\na more refined notion of",
    "start": "4835190",
    "end": "4842960"
  },
  {
    "text": "Viterbi algorithm complexities\nstill come up with the same result. The result is there is\nessentially a unique minimal",
    "start": "4842960",
    "end": "4851730"
  },
  {
    "text": "trellis, where it's minimal\nin every way. ",
    "start": "4851730",
    "end": "4857775"
  },
  {
    "text": "And this comes from the linear,\nor more broadly, the",
    "start": "4857775",
    "end": "4865949"
  },
  {
    "text": "group property of the code. So for any linear group code,\nthere's a well-defined,",
    "start": "4865950",
    "end": "4874599"
  },
  {
    "text": "essentially unique up to\nre-labeling, minimal trellis",
    "start": "4874600",
    "end": "4881670"
  },
  {
    "text": "that achieves the minimum of\nwhatever complexity quantity you want to define.",
    "start": "4881670",
    "end": "4887340"
  },
  {
    "text": "So in this sense, the trellis\ncomplexity of a group or",
    "start": "4887340",
    "end": "4895170"
  },
  {
    "text": "linear code is very\nwell-defined. It's defined by this minimal\ntrellis, or by its parameters,",
    "start": "4895170",
    "end": "4903150"
  },
  {
    "text": "and we can use that as a measure\nof the complexity of the corresponding group code.",
    "start": "4903150",
    "end": "4909540"
  },
  {
    "text": "And from an engineering point\nof view, once we've got this minimal trellis, we can use the\nViterbi algorithm to do",
    "start": "4909540",
    "end": "4915620"
  },
  {
    "text": "maximum likelihood decoding. Just in the same way we did for\nconvolutional codes, sweep",
    "start": "4915620",
    "end": "4921650"
  },
  {
    "text": "from the starting node\nto the ending node. ",
    "start": "4921650",
    "end": "4926830"
  },
  {
    "text": "Digest that, and we'll come back\nand talk about it again. Do a few more details\non Monday, but",
    "start": "4926830",
    "end": "4932469"
  },
  {
    "text": "that's the basic idea. ",
    "start": "4932470",
    "end": "4946175"
  }
]