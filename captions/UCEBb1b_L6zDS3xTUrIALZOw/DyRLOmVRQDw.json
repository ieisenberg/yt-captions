[
  {
    "text": " PROFESSOR: The topic of this\nchapter is finding trellis representations for block codes,\nin particular linear",
    "start": "0",
    "end": "8460"
  },
  {
    "text": "block codes. We're looking only at binary\nblock codes, except one of the homework problems looks at MDS\ncodes over ground field of q.",
    "start": "8460",
    "end": "16830"
  },
  {
    "text": "The principles are the same for\ngeneral Fq or in fact for group codes.",
    "start": "16830",
    "end": "23070"
  },
  {
    "text": "We're looking for minimal\ntrellis representations. ",
    "start": "23070",
    "end": "28270"
  },
  {
    "text": "And so just to review our line\nof thought, basically we",
    "start": "28270",
    "end": "33280"
  },
  {
    "text": "proved a basic theorem called\nthe state space theorem that tells us that there is a vector\nspace over the ground",
    "start": "33280",
    "end": "43730"
  },
  {
    "text": "field at any time which we can\nidentify with the state space. It has a certain dimension.",
    "start": "43730",
    "end": "50590"
  },
  {
    "text": "And we got a little formula in\nterms of subcodes for the",
    "start": "50590",
    "end": "55710"
  },
  {
    "text": "dimension of the state space. We set up a little generator\nmatrix where we isolated the",
    "start": "55710",
    "end": "61829"
  },
  {
    "text": "past part of the code with\nrespect to a certain cut time future part of the code,\ngenerators for that.",
    "start": "61830",
    "end": "68119"
  },
  {
    "text": "We subtract those\ngenerators out. What's left? The number of generators is the\nnumber of generators it",
    "start": "68120",
    "end": "76950"
  },
  {
    "text": "takes to generate the state\nspace, in other words the dimension of the state space. So we got a theorem on the\ndimension of the state space",
    "start": "76950",
    "end": "85770"
  },
  {
    "text": "at any time. And then we found a nifty little\nalgorithm to find a --",
    "start": "85770",
    "end": "93300"
  },
  {
    "text": "to determine the dimensions of\nthe state spaces at all times, the minimal state spaces.",
    "start": "93300",
    "end": "100080"
  },
  {
    "text": "And in fact we can use this\nalgorithm to construct a",
    "start": "100080",
    "end": "105440"
  },
  {
    "text": "minimal trellis realization. The algorithm involves a trellis-oriented generator matrix.",
    "start": "105440",
    "end": "113450"
  },
  {
    "text": "And the idea here turns\nout to be very simple. All you do is you find any\ngenerator matrix for your",
    "start": "113450",
    "end": "122060"
  },
  {
    "text": "linear block code, and\nyou reduce it to trellis-oriented form. Trellis-oriented form means that\nthe generators have as",
    "start": "122060",
    "end": "130009"
  },
  {
    "text": "short a span as possible. It's a minimum span\ngenerator matrix. And we do that just in a greedy\nfashion by any time we",
    "start": "130009",
    "end": "138060"
  },
  {
    "text": "have an opportunity to add two\ngenerators together such that",
    "start": "138060",
    "end": "143770"
  },
  {
    "text": "either their starting position\ncancels, or their end position cancels, we do it. And out of that we get a shorter\ngenerator, and we can",
    "start": "143770",
    "end": "151360"
  },
  {
    "text": "replace one of the two\ngenerators in the combination by that. We can keep shortening\neverything up.",
    "start": "151360",
    "end": "158290"
  },
  {
    "text": "The algorithm must terminate at\nthe point where no further shortening is possible.",
    "start": "158290",
    "end": "164130"
  },
  {
    "text": " And that is explicitly the\npoint at which all the",
    "start": "164130",
    "end": "169750"
  },
  {
    "text": "starting times of the generators\nare different, and all the ending times of all the\ngenerators are different.",
    "start": "169750",
    "end": "177000"
  },
  {
    "text": "For example, here's a trellis-oriented generator matrix. The starting times,\nthe spans of the",
    "start": "177000",
    "end": "183680"
  },
  {
    "text": "generators, are like this. The active times, starting\ntimes --",
    "start": "183680",
    "end": "189600"
  },
  {
    "text": "there's the starting time of\nthis one, and its ending time. Here's the starting time\nof the next one,",
    "start": "189600",
    "end": "195150"
  },
  {
    "text": "and its ending time. The starting time of the\nnext one, and its ending time is here.",
    "start": "195150",
    "end": "201920"
  },
  {
    "text": "And the starting time\nof this one, and its ending time is here.",
    "start": "201920",
    "end": "207260"
  },
  {
    "text": "We're not always going to find\nthat the starting and ending times are disjoint.",
    "start": "207260",
    "end": "213180"
  },
  {
    "text": "This happens, it turns\nout, because this is a self-dual code. In a self-dual code, you will\nalways get this each time,",
    "start": "213180",
    "end": "221130"
  },
  {
    "text": "either a starting time\nor an ending time. But that's not a general\nproperty. For instance, another example\nthat we've used is, say, the 8",
    "start": "221130",
    "end": "231425"
  },
  {
    "text": "7 2 single parity check code. What are its generators?",
    "start": "231425",
    "end": "238879"
  },
  {
    "text": "Its generators look like\nthis, dot, dot, dot,",
    "start": "238880",
    "end": "248240"
  },
  {
    "text": "down to 0, 0, 1, 1. That's a set of trellis-oriented\ngenerators with starting time, ending\ntime, the first one here.",
    "start": "248240",
    "end": "256989"
  },
  {
    "text": "Starting time, ending time\nof the second one there. So in general for this one,\nevery time is a starting and",
    "start": "256990",
    "end": "264570"
  },
  {
    "text": "ending time up to here, where\nevery intermediate time is",
    "start": "264570",
    "end": "270310"
  },
  {
    "text": "both the starting and\nan ending time. So it could happen that way,\nor another example would be",
    "start": "270310",
    "end": "278850"
  },
  {
    "text": "the 8 1 8 repetition code.",
    "start": "278850",
    "end": "284870"
  },
  {
    "text": "What's a trellis-oriented\ngenerator matrix for that? It only has one generator. It looks like that. It has a starting span\nas the whole thing.",
    "start": "284870",
    "end": "292230"
  },
  {
    "text": "The starting time is here. The ending time is here. So for general codes, the\nstarting times and ending",
    "start": "292230",
    "end": "300180"
  },
  {
    "text": "times could be anywhere. There will always\nbe k of them. And otherwise, there's always\none at the beginning.",
    "start": "300180",
    "end": "309479"
  },
  {
    "text": "If it's a nontrivial code,\nthere's always an ending time at the end, et cetera. But this particular behavior\nis for self-dual codes.",
    "start": "309480",
    "end": "319380"
  },
  {
    "text": "Anyway, having done that\nwe can now read off the dimensions of the state spaces\nby simply looking for how many",
    "start": "319380",
    "end": "328840"
  },
  {
    "text": "generators are active at\nany particular time. For a state space, we're always\nlooking at the times",
    "start": "328840",
    "end": "335670"
  },
  {
    "text": "between the symbols,\ncut times. We could in fact draw a trivial\none there, but we're",
    "start": "335670",
    "end": "341310"
  },
  {
    "text": "looking between here. How many are active\nat this time? One. So dimension of the state\nspace at state",
    "start": "341310",
    "end": "349120"
  },
  {
    "text": "time k is 1, 2, 3.",
    "start": "349120",
    "end": "355750"
  },
  {
    "text": "This point, we come\nback to 2 again. 3, 2, 1, 0, 0 at the end.",
    "start": "355750",
    "end": "363490"
  },
  {
    "text": "It's always zero at the ends\nbecause at that point everything's in the future, or\neverything is in the past.",
    "start": "363490",
    "end": "371040"
  },
  {
    "text": "So these are trivial\nstate spaces. These are the nontrivial state\nspaces in the trellis.",
    "start": "371040",
    "end": "378150"
  },
  {
    "text": "And in fact, you remember\nwe had a little picture. We can draw this complete\ntrellis out with the state",
    "start": "378150",
    "end": "384670"
  },
  {
    "text": "spaces of size 1 2\n4 8 4 8 4 2 1.",
    "start": "384670",
    "end": "392430"
  },
  {
    "text": "So this is called the state\ndimension profile, just this set, this ordered set.",
    "start": "392430",
    "end": "399639"
  },
  {
    "text": "Or the state space size profile\nis 2 to the dimension, of binary codes, whatever.",
    "start": "399640",
    "end": "407260"
  },
  {
    "text": "And similarly down here, if we\nlook at state space sizes, we see the dimension is going\nto be one at every time.",
    "start": "407260",
    "end": "415600"
  },
  {
    "text": "So in this case, the dimension\nof the state space is 0, 1, 1, 1, 1, 1, 1, 1, 1, 0.",
    "start": "415600",
    "end": "422870"
  },
  {
    "text": "And similarly down here, we\nlook at the cut time. It cuts one active generator\nevery time.",
    "start": "422870",
    "end": "428250"
  },
  {
    "text": "So it's 0, 1, 1, 1, 1, 1, 0. So we get at least the state\nspace dimensions just by",
    "start": "428250",
    "end": "436810"
  },
  {
    "text": "inspection of the trellis-oriented generator matrix. ",
    "start": "436810",
    "end": "443430"
  },
  {
    "text": "Question? AUDIENCE: [INAUDIBLE]  PROFESSOR: We proved it\nin several steps.",
    "start": "443430",
    "end": "450200"
  },
  {
    "text": "First we have the state space\ntheorem, which I gave to you",
    "start": "450200",
    "end": "459100"
  },
  {
    "text": "in the following form: the\ndimension of the state space at time k is equal to the\ndimension of the code minus",
    "start": "459100",
    "end": "467530"
  },
  {
    "text": "the past subcode. Let me write that. The dimension of the past\nsubcode minus the dimension of",
    "start": "467530",
    "end": "475580"
  },
  {
    "text": "the future subcode at time k\nrelative to this cut time.",
    "start": "475580",
    "end": "481500"
  },
  {
    "text": "And we proved from the\ntrellis-oriented generator matrix that the past subcode\nis generated by all the",
    "start": "481500",
    "end": "488180"
  },
  {
    "text": "trellis-oriented generators that\nhave support on the past, and the future by all\nthe ones that have support on the future.",
    "start": "488180",
    "end": "495040"
  },
  {
    "text": "So, it's simply we\ntake those out. And what do we have left? We have the ones that are active\nat time k, the ones",
    "start": "495040",
    "end": "503539"
  },
  {
    "text": "that are neither wholly\nsupported on the past nor on the future. They're supported both on\nthe past and future.",
    "start": "503540",
    "end": "509870"
  },
  {
    "text": "And those, that's what\nthis difference is. ",
    "start": "509870",
    "end": "516580"
  },
  {
    "text": "So explicitly we have -- the code is generated\nby all generators.",
    "start": "516580",
    "end": "523724"
  },
  {
    "text": " That's all k generators.",
    "start": "523724",
    "end": "529210"
  },
  {
    "text": "Cpk is generated by\ntrellis-oriented generators",
    "start": "529210",
    "end": "538340"
  },
  {
    "text": "supported on the past. And Cfk is generated by the\ntrellis-oriented generators",
    "start": "538340",
    "end": "546070"
  },
  {
    "text": "supported on the future.  So the difference --",
    "start": "546070",
    "end": "551880"
  },
  {
    "text": "state code sk is generated\nby the trellis-oriented generators not supported\non past or future, or",
    "start": "551880",
    "end": "561500"
  },
  {
    "text": "active at time k. ",
    "start": "561500",
    "end": "568020"
  },
  {
    "text": "Probably good to write all\nthat out at least once. Yeah? AUDIENCE: [INAUDIBLE]",
    "start": "568020",
    "end": "574217"
  },
  {
    "text": "self-dual codes all have such\nproperties that each time is starting and ending?",
    "start": "574218",
    "end": "579270"
  },
  {
    "text": "PROFESSOR: Yes. AUDIENCE: Why is that? PROFESSOR: Why? It's a duality theorem, and\nwe're not doing many duality",
    "start": "579270",
    "end": "586820"
  },
  {
    "text": "theorems in this course, so\nI'll simply tell you. AUDIENCE: [INAUDIBLE] has this property, it\nmust be a self-dual.",
    "start": "586820",
    "end": "595990"
  },
  {
    "text": "PROFESSOR: I don't think\nthat's true. ",
    "start": "595990",
    "end": "601100"
  },
  {
    "text": "It's possible that's true. Duality theorems are very\nstrong, but I don't think this",
    "start": "601100",
    "end": "606913"
  },
  {
    "text": "is a sufficient property. ",
    "start": "606913",
    "end": "611990"
  },
  {
    "text": "For instance, suppose I just\nchanged one of the generators to look like that.",
    "start": "611990",
    "end": "617300"
  },
  {
    "text": "It still has disjoint starting\nand ending times, but now I",
    "start": "617300",
    "end": "622930"
  },
  {
    "text": "don't think the code\nis self-dual.  So here's another code generated\nby these four",
    "start": "622930",
    "end": "630100"
  },
  {
    "text": "generators, and I don't\nbelieve self-dual. AUDIENCE: [INAUDIBLE]",
    "start": "630100",
    "end": "636440"
  },
  {
    "text": "PROFESSOR: I'm guessing\nthat it isn't. To prove it I would compute\nthe dual code, and I would",
    "start": "636440",
    "end": "644160"
  },
  {
    "text": "find that it wasn't same\ncode, didn't have the same code words. ",
    "start": "644160",
    "end": "649980"
  },
  {
    "text": "But I'm guessing that if I just\nmake random changes in the interior here, I'm not going\nto get a self-dual code,",
    "start": "649980",
    "end": "655860"
  },
  {
    "text": "because that's a very strong\nstructural property. But I'm not going to take the\ntime in class to do that.",
    "start": "655860",
    "end": "663600"
  },
  {
    "text": "But these are good questions. The whole subject of duality\nis a wonderful and elegant",
    "start": "663600",
    "end": "671410"
  },
  {
    "text": "topic that we just don't\nhave time to do much in this course. If I did it another time,\nI could spend",
    "start": "671410",
    "end": "677050"
  },
  {
    "text": "many lectures on duality. Some of the homework problems\nhave suggested what you might be able to do in orthogonal\ncodes, but --",
    "start": "677050",
    "end": "685710"
  },
  {
    "text": " well, one of the problems you'll\ndo on the homework --",
    "start": "685710",
    "end": "694730"
  },
  {
    "text": "I was going to talk about\nit a little later. There's a dual state space\ntheorem that basically says the state space sizes, or\ndimensions, are the same for",
    "start": "694730",
    "end": "702140"
  },
  {
    "text": "the dual code as they are\nfor the primal code. Here's one example.",
    "start": "702140",
    "end": "708500"
  },
  {
    "text": "Of course, dual is itself, so\nit's trivial that the state space size is the same. But here's another less\ntrivial example.",
    "start": "708500",
    "end": "715360"
  },
  {
    "text": "These two codes are orthogonal\nto each other. And what is similar about\ntheir trellises?",
    "start": "715360",
    "end": "721579"
  },
  {
    "text": "Their trellises are both\ntwo-state trellises. They don't look the same.",
    "start": "721580",
    "end": "727100"
  },
  {
    "text": "This trellis looks like this,\nbecause they're all zeroes up",
    "start": "727100",
    "end": "732540"
  },
  {
    "text": "here, and all ones down here. That's the repetition code\ntrellis, whereas this trellis",
    "start": "732540",
    "end": "740470"
  },
  {
    "text": "looks like this. It has crosses every time and\nso forth, abstractly.",
    "start": "740470",
    "end": "750300"
  },
  {
    "text": "So trellises are not the same. They have different branching\nproperties, but the state",
    "start": "750300",
    "end": "756980"
  },
  {
    "text": "space sizes are the\nsame at all times. This is a general property of\ndual codes which you will",
    "start": "756980",
    "end": "763560"
  },
  {
    "text": "prove on the homework, if you\nhaven't done so already. ",
    "start": "763560",
    "end": "771420"
  },
  {
    "text": "Sorry, it's hard to know what to\ntell you about and what to",
    "start": "771420",
    "end": "776470"
  },
  {
    "text": "suppress, because I'm also\ntrying to cover more material this year. There's a lot of material that's\nreally nice that I have",
    "start": "776470",
    "end": "782839"
  },
  {
    "text": "to skip over.  Let's continue from this.",
    "start": "782840",
    "end": "790040"
  },
  {
    "text": "Let's make a minimal\nrealization. So, a canonical minimal\ntrellis.",
    "start": "790040",
    "end": "799770"
  },
  {
    "text": "I'm doing this in a little bit\ndifferent order than it's done in the notes, but I think you\nwill see this kind of argument",
    "start": "799770",
    "end": "807630"
  },
  {
    "text": "very quickly.  I've got this trellis-oriented\ngenerator matrix, but suppose",
    "start": "807630",
    "end": "813920"
  },
  {
    "text": "I didn't know what the\ntrellis looked like. I put it up the first\ntime last time. But all I have is this generator\nmatrix, and I want",
    "start": "813920",
    "end": "821370"
  },
  {
    "text": "to generate a trellis now for\nthis code which has minimal state spaces. It's also going to turn out to\nbe minimal in every other way.",
    "start": "821370",
    "end": "828610"
  },
  {
    "text": " Well, let's start off\nby realizing the",
    "start": "828610",
    "end": "835000"
  },
  {
    "text": "first generator here. The first generator generates a\nlittle one-dimensional code.",
    "start": "835000",
    "end": "842329"
  },
  {
    "text": " G1, the code generated by the\nfirst generator, is simply the",
    "start": "842330",
    "end": "849770"
  },
  {
    "text": "two code words 0, 0, 0,\n0, 1, 1, 1, 1, 0, 0.",
    "start": "849770",
    "end": "855380"
  },
  {
    "text": " So let me realize that little\none-dimensional code with a",
    "start": "855380",
    "end": "862140"
  },
  {
    "text": "minimal trellis for that. What would it look like? If I go through this, I'll\nsee that it has --",
    "start": "862140",
    "end": "870470"
  },
  {
    "text": "my trellis-oriented generator\nmatrix for this code is simply 1, 1, 1, 1, 0, 0, 0.",
    "start": "870470",
    "end": "878080"
  },
  {
    "text": "I see from that that the\ndimensions of the state spaces",
    "start": "878080",
    "end": "883090"
  },
  {
    "text": "is 0, 1, 1, 1, 0, 0, 0, 0, 0. ",
    "start": "883090",
    "end": "890029"
  },
  {
    "text": "And you can easily see that what\nthe trellis, the minimal",
    "start": "890030",
    "end": "896740"
  },
  {
    "text": "trellis, a minimal trellis looks\nlike is 0, 0, 0, 0, 1,",
    "start": "896740",
    "end": "904839"
  },
  {
    "text": "1, 1, 1, 0, 0, 0, 0.",
    "start": "904840",
    "end": "914160"
  },
  {
    "text": "So there is the minimal trellis\nrealization for that one-dimensional code.",
    "start": "914160",
    "end": "919380"
  },
  {
    "text": "It has state spaces of\ndimension 0, 1, 1, 1, 0, 0, 0, 0, 0.",
    "start": "919380",
    "end": "927570"
  },
  {
    "text": "Therefore the state spaces\nare all minimal, as proved from this.",
    "start": "927570",
    "end": "932965"
  },
  {
    "text": "It's all sort of elementary. ",
    "start": "932965",
    "end": "938230"
  },
  {
    "text": "Similarly, I can realize this\none by another little machine",
    "start": "938230",
    "end": "949230"
  },
  {
    "text": "that looks like this. ",
    "start": "949230",
    "end": "959300"
  },
  {
    "text": "0, 0, 0, 0, 0, 0, 0. This is just the state\ntransition diagram of a linear",
    "start": "959300",
    "end": "967310"
  },
  {
    "text": "time-varying finite\nstate machine. And it looks like that, and it\ntoo is minimal by the same",
    "start": "967310",
    "end": "974389"
  },
  {
    "text": "argument for the one-dimensional\ncode generated by this generator.",
    "start": "974390",
    "end": "979860"
  },
  {
    "text": " What is this saying here? This is saying we really --",
    "start": "979860",
    "end": "986480"
  },
  {
    "text": "what we should imagine here\nis we have a little memory element that's only active at\nstate times 1, 2, and 3.",
    "start": "986480",
    "end": "996100"
  },
  {
    "text": "So to realize this, this is a one-dimensional memory element.",
    "start": "996100",
    "end": "1003140"
  },
  {
    "text": "Think of it as a little -- well, a memory for\nan element of f2.",
    "start": "1003140",
    "end": "1009600"
  },
  {
    "text": "It's active during the interval\n1 through 3, during",
    "start": "1009600",
    "end": "1015110"
  },
  {
    "text": "the time that this generator\nis active.  It's active at these three\ntimes, not otherwise.",
    "start": "1015110",
    "end": "1023270"
  },
  {
    "text": "So you can think of it\nas just disappearing. It comes into existence\nat time 1. It holds whatever the\ninput bit is.",
    "start": "1023270",
    "end": "1031839"
  },
  {
    "text": "Think of -- we're trying to create the\ncode as the set of all --",
    "start": "1031839",
    "end": "1038270"
  },
  {
    "text": "sum of ui gi. And so what this memory element\nreally does is it",
    "start": "1038270",
    "end": "1043310"
  },
  {
    "text": "holds ui during the time that\nit's needed, which is at times 1, 2, and 3.",
    "start": "1043310",
    "end": "1050450"
  },
  {
    "text": "Whatever the coefficient is -- what could it be, 0 or 1? Element of the base field, f2.",
    "start": "1050450",
    "end": "1056279"
  },
  {
    "text": "So the memory element holds, it\ncontains u1 in this case.",
    "start": "1056280",
    "end": "1066120"
  },
  {
    "text": "Yeah? AUDIENCE: What if we look at\nthis matrix only for the second code.",
    "start": "1066120",
    "end": "1071960"
  },
  {
    "text": "PROFESSOR: Yes. AUDIENCE: So that will give\n0, 1, 0, 1, 1, 0, 1, 0.",
    "start": "1071960",
    "end": "1078059"
  },
  {
    "text": "PROFESSOR: Correct. AUDIENCE: So some places it\nwill suggest that the dimension is --",
    "start": "1078060",
    "end": "1084669"
  },
  {
    "text": "PROFESSOR: The fact that\nthe values are --",
    "start": "1084670",
    "end": "1089900"
  },
  {
    "text": "there will always be 1 here at\nthe starting time and the ending time. Otherwise we wouldn't\ndraw a branch there.",
    "start": "1089900",
    "end": "1096570"
  },
  {
    "text": "But they can be arbitrary\nin between. So don't be thrown off by the\nfact that there are some 0",
    "start": "1096570",
    "end": "1103960"
  },
  {
    "text": "values in here. What we're doing here is we're\nrealizing u2 times g2, where",
    "start": "1103960",
    "end": "1110870"
  },
  {
    "text": "u2 can be either 0 or 1. And g2 can be arbitrary, except\nthat it has a starting",
    "start": "1110870",
    "end": "1118390"
  },
  {
    "text": "time and an ending\ntime, so it's not arbitrary for this kind. ",
    "start": "1118390",
    "end": "1124740"
  },
  {
    "text": "AUDIENCE: What if we try\nto find the state space [INAUDIBLE] ",
    "start": "1124740",
    "end": "1131149"
  },
  {
    "text": "PROFESSOR: For this, what I\nneed is a one-dimensional memory element containing u2\nwhich is active during a",
    "start": "1131150",
    "end": "1141320"
  },
  {
    "text": "different interval,\n2 through 6. ",
    "start": "1141320",
    "end": "1147820"
  },
  {
    "text": "So think of these as like\nlittle stars that wink on or wink off. This thing comes into\nexistence for three",
    "start": "1147820",
    "end": "1154310"
  },
  {
    "text": "consecutive times, and\nthen it disappears. This thing comes into existence\nfor five consecutive",
    "start": "1154310",
    "end": "1160600"
  },
  {
    "text": "times, and then it disappears. Because those are the only\ntimes when it's needed to contribute to the output.",
    "start": "1160600",
    "end": "1166620"
  },
  {
    "text": " So altogether, we can think of\nthere as sort of being four",
    "start": "1166620",
    "end": "1176059"
  },
  {
    "text": "memory elements which contain\nu1, u2, u3, and u4.",
    "start": "1176060",
    "end": "1183140"
  },
  {
    "text": "And we form the outputs g1k\ntimes this, sort of like in",
    "start": "1183140",
    "end": "1192270"
  },
  {
    "text": "the convolutional code. g2k g3k and g4k.",
    "start": "1192270",
    "end": "1201900"
  },
  {
    "text": "The generators step along in\ntime, and we form the outputs. We sum this all together in a\nsummer, and this provides yk,",
    "start": "1201900",
    "end": "1213330"
  },
  {
    "text": "the output, as we go from k\nequals 1 through 8 as we go",
    "start": "1213330",
    "end": "1220690"
  },
  {
    "text": "through the code word. But we only need this one\nfor -- it's only on from",
    "start": "1220690",
    "end": "1226020"
  },
  {
    "text": "time 1, 2, and 3. And this is on from\ntime 2 through 6.",
    "start": "1226020",
    "end": "1233720"
  },
  {
    "text": "And this is on from\ntime 3 through 5. And this is on from\ntime 4 through 7.",
    "start": "1233720",
    "end": "1240770"
  },
  {
    "text": "Because we don't need\nit any other time. So you can think of an input\ncoming in at time 1, at the",
    "start": "1240770",
    "end": "1248330"
  },
  {
    "text": "starting time of the first\ngenerator, being saved for as long as it's needed, then\nit's discarded.",
    "start": "1248330",
    "end": "1254210"
  },
  {
    "text": "And in fact we don't need that\nmemory element anymore. ",
    "start": "1254210",
    "end": "1261130"
  },
  {
    "text": "How many people are\ngetting this? Raise your hand if\nyou get this. ",
    "start": "1261130",
    "end": "1267461"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: It's a time -- what I'm trying to do is draw\na time-varying machine.",
    "start": "1267462",
    "end": "1275720"
  },
  {
    "text": "So how do I do that? At time 1, it looks like this. ",
    "start": "1275720",
    "end": "1283360"
  },
  {
    "text": "Time 1, it just has u1,\nand we multiply it by g11, which is 1.",
    "start": "1283360",
    "end": "1289890"
  },
  {
    "text": "And that gives me the\noutput at time 1. There's nothing else\nthat contributes.",
    "start": "1289890",
    "end": "1295250"
  },
  {
    "text": "At time 2, we've got now another\ninput, u1 and u2.",
    "start": "1295250",
    "end": "1303670"
  },
  {
    "text": "And we've got to sum the\ncontributions from both of those, times their respective\ncoefficients. ",
    "start": "1303670",
    "end": "1311210"
  },
  {
    "text": "At time 3, we're up to\nthree of them, and we need all of them.",
    "start": "1311210",
    "end": "1316550"
  },
  {
    "text": "We're going to form some linear\ncombination according to the generator matrix.",
    "start": "1316550",
    "end": "1321626"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  PROFESSOR: It's time-varying,\nyeah.",
    "start": "1321626",
    "end": "1328130"
  },
  {
    "text": "So get used to it. For a block code it obviously\nhas to be time-varying.",
    "start": "1328130",
    "end": "1333820"
  },
  {
    "text": "Obviously if we regard these as\nimpulse responses, this is",
    "start": "1333820",
    "end": "1338990"
  },
  {
    "text": "the impulse response to u1. It only lasts in terms of symbol\ntimes from time 0 1 2",
    "start": "1338990",
    "end": "1346519"
  },
  {
    "text": "3, for four time units\nof symbol time. This is the impulse\nresponse to u2.",
    "start": "1346520",
    "end": "1354790"
  },
  {
    "text": "u2 you can think of as an input\nthat comes in at time 2, and whose output rings\nfor five more times.",
    "start": "1354790",
    "end": "1363270"
  },
  {
    "text": "So you need to save u2 for five\nmore times, and then it disappears. We don't need to save\nit anymore. We can let it drop off\nthe end of the shift",
    "start": "1363270",
    "end": "1370290"
  },
  {
    "text": "register, if you like. u3 comes in at time 3, and this\nis its impulse response.",
    "start": "1370290",
    "end": "1379549"
  },
  {
    "text": "And u4 comes in at time 5, and\nthis is its impulse response.",
    "start": "1379550",
    "end": "1385200"
  },
  {
    "text": "Does that help? How many people are not\ngetting it now? ",
    "start": "1385200",
    "end": "1393372"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "1393372",
    "end": "1400929"
  },
  {
    "text": "PROFESSOR: We don't need it\nhere, but we're going to need it again at time 4, so\nwe have to save it. ",
    "start": "1400930",
    "end": "1410650"
  },
  {
    "text": "What are you going to do\nwith it at time 3? You going to hide\nit somewhere? ",
    "start": "1410650",
    "end": "1418540"
  },
  {
    "text": "So I still need to save it. ",
    "start": "1418540",
    "end": "1424409"
  },
  {
    "text": "This, again, is linear system\ntheory, except I guess you just don't get taught linear\nsystem theory anymore.",
    "start": "1424410",
    "end": "1432670"
  },
  {
    "text": "But this is what you have\nto do if you -- before, for convolutional codes,\nwe did linear systems",
    "start": "1432670",
    "end": "1439130"
  },
  {
    "text": "theory for linear time-invariant\nsystems. They have to be over a finite\nfield, but who cares?",
    "start": "1439130",
    "end": "1444309"
  },
  {
    "text": "We did general linear\nsystem theory. This is general linear system\ntheory for realizing",
    "start": "1444310",
    "end": "1449470"
  },
  {
    "text": "time-varying systems.  In fact, one comment that might\nbe good to make at this",
    "start": "1449470",
    "end": "1456910"
  },
  {
    "text": "point is that -- now go back and remember\nwhat we did with convolutional codes.",
    "start": "1456910",
    "end": "1462710"
  },
  {
    "text": " We started out with a rate 1\nover n convolutional code c,",
    "start": "1462710",
    "end": "1471280"
  },
  {
    "text": "and we found some generator\nfor it. Basically we can take any code\nword in the code, and all of",
    "start": "1471280",
    "end": "1479520"
  },
  {
    "text": "its shifts will generate\nthe code. Any non-zero code word, all of\nits time shifts generate the",
    "start": "1479520",
    "end": "1485030"
  },
  {
    "text": "convolutional code.  So take any code word g of d in\na convolutional code, and g",
    "start": "1485030",
    "end": "1495870"
  },
  {
    "text": "of d, dg of d, d squared\ng of d and so forth generate the code. ",
    "start": "1495870",
    "end": "1503000"
  },
  {
    "text": "But then we converted it by\ndoing a little polynomial or",
    "start": "1503000",
    "end": "1511400"
  },
  {
    "text": "Laurent series algebra. We took a rational one and we\nconverted it to a canonical",
    "start": "1511400",
    "end": "1520269"
  },
  {
    "text": "one, g prime of d.",
    "start": "1520270",
    "end": "1525980"
  },
  {
    "text": "Which if you remember, this is\nthe polynomial code word of minimum degree in the code.",
    "start": "1525980",
    "end": "1536840"
  },
  {
    "text": "We call that degree nu. ",
    "start": "1536840",
    "end": "1542780"
  },
  {
    "text": "What were we doing there? ",
    "start": "1542780",
    "end": "1548060"
  },
  {
    "text": "The shifts of g prime of d\nform a trellis-oriented generator matrix for this\nconvolutional code.",
    "start": "1548060",
    "end": "1556080"
  },
  {
    "text": "For instance, for our canonical\nexample, g prime of d looked like this.",
    "start": "1556080",
    "end": "1561620"
  },
  {
    "text": " Polynomial notation, it's 1 plus\nd squared 1 plus d plus d",
    "start": "1561620",
    "end": "1571340"
  },
  {
    "text": "squared is the generator\nmatrix. Let me write that out as 1, 1\nat time 0 or coefficient 0.",
    "start": "1571340",
    "end": "1582380"
  },
  {
    "text": "0, 1, 1, 1, and then all\n0's before that, and",
    "start": "1582380",
    "end": "1588950"
  },
  {
    "text": "all 0's after that. Is somebody sleeping? Wake him up please, before\nI turn around.",
    "start": "1588950",
    "end": "1594730"
  },
  {
    "text": " What?",
    "start": "1594730",
    "end": "1600696"
  },
  {
    "text": "Oh, all right. I'm very glad to hear that.",
    "start": "1600696",
    "end": "1606360"
  },
  {
    "text": "So here is g prime of d\nwritten out as bits.",
    "start": "1606360",
    "end": "1612270"
  },
  {
    "text": "dg prime of d looks like what? It looks like the same thing\nshifted over one.",
    "start": "1612270",
    "end": "1617470"
  },
  {
    "text": " d squared g prime of d looks\nlike this and so forth.",
    "start": "1617470",
    "end": "1630120"
  },
  {
    "start": "1630120",
    "end": "1635900"
  },
  {
    "text": "Is this trellis-oriented? In this case, each time interval\ncontains two symbols.",
    "start": "1635900",
    "end": "1642679"
  },
  {
    "text": "Here are our divisions\nbetween symbols. We've got a rate 1/2 code, so\nwe chose to take them two",
    "start": "1642680",
    "end": "1649150"
  },
  {
    "text": "symbols at a time.  Where are the starting\nand ending times?",
    "start": "1649150",
    "end": "1655830"
  },
  {
    "text": "This one starts here,\nends here. This one starts here,\nends here. Starts here, ends here.",
    "start": "1655830",
    "end": "1661100"
  },
  {
    "text": "So all the starting times and\nending times are different. Ergo, this is a trellis-oriented generator matrix.",
    "start": "1661100",
    "end": "1667350"
  },
  {
    "text": "Modulo some hand-waving about\ninfinite sequences. Ergo, we ought to be able to use\nthe state space theorem to",
    "start": "1667350",
    "end": "1673990"
  },
  {
    "text": "say what are the state\nspace sizes. Any time I have a cut here,\nwhat are the spans?",
    "start": "1673990",
    "end": "1681019"
  },
  {
    "text": "The spans are like there,\nthere, there, so forth. So the state space dimension at\neach time is going to be 2,",
    "start": "1681020",
    "end": "1691669"
  },
  {
    "text": "2, 2, 2, 2. And if we go through this\nconstruction procedure, what",
    "start": "1691670",
    "end": "1698355"
  },
  {
    "text": "are we going to get? We're going to get something\nthat at time 0, we need to",
    "start": "1698355",
    "end": "1705230"
  },
  {
    "text": "have in memory, we need\nto remember u minus 1 and u minus 2.",
    "start": "1705230",
    "end": "1712260"
  },
  {
    "text": " At time 1, just doing what I did\nup here, we need to have",
    "start": "1712260",
    "end": "1719070"
  },
  {
    "text": "in memory u minus 1 and u0. At time 2, we need to have\nin memory u0 and u1.",
    "start": "1719070",
    "end": "1728810"
  },
  {
    "text": "And we achieve that just\nby implementing this with a shift register. In the time-invariant case it's\nvery easy, and you all",
    "start": "1728810",
    "end": "1736019"
  },
  {
    "text": "understand it. So exactly the same theory goes\nthrough for rate 1 over n",
    "start": "1736020",
    "end": "1743890"
  },
  {
    "text": "convolutional codes. I will tell you briefly that to\ntreat rate k over n, it's",
    "start": "1743890",
    "end": "1750000"
  },
  {
    "text": "basically just the same thing,\nexcept we need k generators starting at each time here.",
    "start": "1750000",
    "end": "1755590"
  },
  {
    "text": "But in order to get a canonical\nencoder, we just get a trellis-oriented generator\nmatrix again.",
    "start": "1755590",
    "end": "1762790"
  },
  {
    "text": "And by the way, modulo this\nhand-waving about infinite sequences, I've now proved what\nI asserted, that this",
    "start": "1762790",
    "end": "1771950"
  },
  {
    "text": "encoder is minimal among all\nencoders for this code, that it has the minimum number\nof memory elements.",
    "start": "1771950",
    "end": "1778640"
  },
  {
    "text": "Because from this argument,\nthe minimal state space dimension at each time is 2\nonce I've achieved this",
    "start": "1778640",
    "end": "1786560"
  },
  {
    "text": "canonical trellis-oriented\ngenerator matrix. ",
    "start": "1786560",
    "end": "1793070"
  },
  {
    "text": "By the way, this theory\nis very general. It's really all you need to know\nto do minimal realization",
    "start": "1793070",
    "end": "1800610"
  },
  {
    "text": "theory of linear systems,\nwhether they're time-varying or time-invariant over any\nfield, or over groups.",
    "start": "1800610",
    "end": "1809065"
  },
  {
    "text": " So that was a parenthetical\ncomment about convolutional",
    "start": "1809065",
    "end": "1816290"
  },
  {
    "text": "codes just to tie it back\nto what we did in the previous chapter. ",
    "start": "1816290",
    "end": "1824860"
  },
  {
    "text": "I haven't completed\nwhat I wanted to say about block codes. How am I going to do this\nwithout erasing something?",
    "start": "1824860",
    "end": "1831126"
  },
  {
    "text": " Let's go back to block codes.",
    "start": "1831126",
    "end": "1839140"
  },
  {
    "text": "And I guess I'll move over. ",
    "start": "1839140",
    "end": "1844710"
  },
  {
    "text": "The point that I was in the\nprocess of making was that I",
    "start": "1844710",
    "end": "1850674"
  },
  {
    "text": "can realize each one of these\ngenerators individually by a",
    "start": "1850675",
    "end": "1856060"
  },
  {
    "text": "little trellis diagram that's\none-dimensional during the",
    "start": "1856060",
    "end": "1862100"
  },
  {
    "text": "time that the generator is\nactive, and zero-dimensional state space during the time\nthe generator is inactive.",
    "start": "1862100",
    "end": "1871220"
  },
  {
    "text": "And think of this as just\none component here. To generate a code word,\na particular code",
    "start": "1871220",
    "end": "1880120"
  },
  {
    "text": "word is just the sum. All I need to do is sum the\noutputs of all these",
    "start": "1880120",
    "end": "1886139"
  },
  {
    "text": "generators independently. How many different possibilities\nare there? There are 2 to the k possible\ncode words.",
    "start": "1886140",
    "end": "1893380"
  },
  {
    "text": "Each one of these generates\none of two possible code words. If I take the set of all\npossible sums of these four",
    "start": "1893380",
    "end": "1900040"
  },
  {
    "text": "code words, I'm going to have\n16 possible code words. So that very quickly was what\nI was doing when I said,",
    "start": "1900040",
    "end": "1906660"
  },
  {
    "text": "here's a little machine that\ngenerates the first code, c1. Here's a little machine that\ngenerates the second code, c2.",
    "start": "1906660",
    "end": "1915149"
  },
  {
    "text": "Only has two possible code words\naccording to the value of what's in storage. This generates the\nthird component.",
    "start": "1915150",
    "end": "1922180"
  },
  {
    "text": "This generates the\nfourth component. Sum it all together,\nand you get --",
    "start": "1922180",
    "end": "1927200"
  },
  {
    "text": "sorry, I'm calling this y now. y\nequals the sum of the ui gi. ",
    "start": "1927200",
    "end": "1934540"
  },
  {
    "text": "You see that? I hope I've beaten it into\nthe ground enough now.",
    "start": "1934540",
    "end": "1940850"
  },
  {
    "text": "So it's a linear time-varying\nmachine. That is a realization of it,\nif you've understood my",
    "start": "1940850",
    "end": "1948800"
  },
  {
    "text": "description of it now. And now we can draw\nthe trellis of it. ",
    "start": "1948800",
    "end": "1957120"
  },
  {
    "text": "That what can happen at time\n1, we can either have u1.",
    "start": "1957120",
    "end": "1964080"
  },
  {
    "text": "Now I can label my states\nhere, at this time u1. u1 can be either 0 or 1.",
    "start": "1964080",
    "end": "1971160"
  },
  {
    "text": "This is u1.  At time 2, I have both u1\nand u2 in my state.",
    "start": "1971160",
    "end": "1982810"
  },
  {
    "text": "So this can either be 0, 0\nor 0, 1, or 1, 0 or 1, 1.",
    "start": "1982810",
    "end": "1991900"
  },
  {
    "text": "And obviously if I've already\ndetermined u1 is 0 here, it's still going to be 0 at time 2.",
    "start": "1991900",
    "end": "2002180"
  },
  {
    "text": "I label these with their\nassociated outputs.",
    "start": "2002180",
    "end": "2007910"
  },
  {
    "text": "This is 1. This is also 1.",
    "start": "2007910",
    "end": "2013159"
  },
  {
    "text": "This can turn it back to 0. And I just keep going. At the third time, I\nhave u1, u2, u3.",
    "start": "2013160",
    "end": "2020390"
  },
  {
    "text": "I have eight states. At time 4, I come back.",
    "start": "2020390",
    "end": "2026020"
  },
  {
    "text": "I only have u2, u3 at time\n4, and so these merge.",
    "start": "2026020",
    "end": "2031205"
  },
  {
    "text": " So I get something --",
    "start": "2031205",
    "end": "2036614"
  },
  {
    "text": "this doesn't merge like\nthat, though. It merges down here.",
    "start": "2036614",
    "end": "2041710"
  },
  {
    "text": "0, 0, 0, 0, 0, 1. This merges to 0, 1 when\nI drop the first one. ",
    "start": "2041710",
    "end": "2049510"
  },
  {
    "text": "It's probably worth doing\nthis more carefully than I'm doing it. ",
    "start": "2049510",
    "end": "2055040"
  },
  {
    "text": "0, 1 can go to 0, 1,\n0, or 0, 1, 1.",
    "start": "2055040",
    "end": "2060330"
  },
  {
    "text": "0, 1, 0 can either go to -- ",
    "start": "2060330",
    "end": "2070149"
  },
  {
    "text": "u2 equals 1. I guess these can't cross.",
    "start": "2070150",
    "end": "2076100"
  },
  {
    "text": "u2 -- AUDIENCE: [INAUDIBLE]  PROFESSOR: Excuse me? AUDIENCE: [INAUDIBLE]",
    "start": "2076100",
    "end": "2082097"
  },
  {
    "text": "u3 and u4.  PROFESSOR: No, this\nis state time.",
    "start": "2082098",
    "end": "2091090"
  },
  {
    "text": "State time 1, 2, 3. u4 hasn't started yet.",
    "start": "2091090",
    "end": "2097030"
  },
  {
    "text": "So I'm sorry, this\nis 5 through 7.",
    "start": "2097030",
    "end": "2102940"
  },
  {
    "text": "Is that right? It only lasts for\nthree intervals.",
    "start": "2102940",
    "end": "2109080"
  },
  {
    "text": "So I only have u2, u3. ",
    "start": "2109080",
    "end": "2116030"
  },
  {
    "text": "u1, u2 has to be 0, 0, 1, so\nthis would then go to 0, 1.",
    "start": "2116030",
    "end": "2121660"
  },
  {
    "text": "0, 1. These seem to cross. ",
    "start": "2121660",
    "end": "2127220"
  },
  {
    "text": "Yes, they do cross. ",
    "start": "2127220",
    "end": "2136040"
  },
  {
    "text": "So let's see if I can actually\ncomplete it. This could go to 1,\n0, 0, or 1, 0, 1.",
    "start": "2136040",
    "end": "2143000"
  },
  {
    "text": " And then this one goes up\nto either 0, 0 or 0, 1.",
    "start": "2143000",
    "end": "2151410"
  },
  {
    "text": "This one can go to 1,\n1, 0 or 1, 1, 1.",
    "start": "2151410",
    "end": "2156990"
  },
  {
    "text": "And that can go like this.  So there's the trellis\nfor the first half.",
    "start": "2156990",
    "end": "2164520"
  },
  {
    "text": "It's topologically the same, but\nlooks a little different",
    "start": "2164520",
    "end": "2170960"
  },
  {
    "text": "from what I put up before. I interchanged these two with\nthese two, and this",
    "start": "2170960",
    "end": "2176390"
  },
  {
    "text": "one with this one. But you can recover the trellis\nthat I had before.",
    "start": "2176390",
    "end": "2186110"
  },
  {
    "text": "In any case, I claim when I've\nlabeled this with what the appropriate output is\nat each time, I've",
    "start": "2186110",
    "end": "2191910"
  },
  {
    "text": "got my minimal trellis. ",
    "start": "2191910",
    "end": "2200339"
  },
  {
    "text": "And now we can make more\ncomments about",
    "start": "2200340",
    "end": "2205420"
  },
  {
    "text": "how the trellis works. You see that whenever a\ngenerator starts, we have",
    "start": "2205420",
    "end": "2211859"
  },
  {
    "text": "what's called a divergence in\nthe trellis, a branching process, a branching out,\nwhereas whenever a generator",
    "start": "2211860",
    "end": "2218910"
  },
  {
    "text": "ends, we have a convergence\nin. So a starting time --",
    "start": "2218910",
    "end": "2228180"
  },
  {
    "text": "if we have a generator starting,\nthen we get a branch",
    "start": "2228180",
    "end": "2233230"
  },
  {
    "text": "that looks like this, like\nhere, and here, and here. When we have an ending time,\nwe have branches that look",
    "start": "2233230",
    "end": "2239660"
  },
  {
    "text": "like this, like here. So this is a starting time,\nstarting time, starting time,",
    "start": "2239660",
    "end": "2244880"
  },
  {
    "text": "and ending time.  So this tells you when things\nopen and close in the trellis.",
    "start": "2244880",
    "end": "2256230"
  },
  {
    "text": "Now again, as I've said for\nthese more general trellises, down here we can have starting\nand ending at the same time.",
    "start": "2256230",
    "end": "2263170"
  },
  {
    "text": "And in that case,\nwe get a cross. We get a starting and ending\nat the same time, we get",
    "start": "2263170",
    "end": "2270400"
  },
  {
    "text": "something that looks\nlike this. ",
    "start": "2270400",
    "end": "2275630"
  },
  {
    "text": "And if we get neither starting\nnor ending, empty, then",
    "start": "2275630",
    "end": "2281599"
  },
  {
    "text": "nothing happens. We just get -- the trellis segment looks like\nthat, like this one here.",
    "start": "2281600",
    "end": "2286700"
  },
  {
    "text": " In this case we have a starting\ntime, an ending time",
    "start": "2286700",
    "end": "2292559"
  },
  {
    "text": "in this trellis. Here we have nothing\nhappening. Here we have nothing\nhappening. So you just get an extension,\na parallel extension where",
    "start": "2292560",
    "end": "2299850"
  },
  {
    "text": "nothing happens. So again, the starting and\nending times tell you what",
    "start": "2299850",
    "end": "2307210"
  },
  {
    "text": "happens in the trellis. ",
    "start": "2307210",
    "end": "2323410"
  },
  {
    "text": "There's one other thing that you\ncan read from the trellis,",
    "start": "2323410",
    "end": "2329490"
  },
  {
    "text": "which is the size of\nbranch spaces. ",
    "start": "2329490",
    "end": "2335170"
  },
  {
    "text": "And since as usual I'm running\na little later than I intend to --",
    "start": "2335170",
    "end": "2342300"
  },
  {
    "text": "let me just state without proof\nthat there is a similar",
    "start": "2342300",
    "end": "2350970"
  },
  {
    "text": "theorem for branch spaces.  What is a branch?",
    "start": "2350970",
    "end": "2357210"
  },
  {
    "start": "2357210",
    "end": "2367660"
  },
  {
    "text": "When we look in a trellis, a\nbranch is one of these things.",
    "start": "2367660",
    "end": "2372890"
  },
  {
    "text": "That's a branch. What do we need to\ndefine a branch?",
    "start": "2372890",
    "end": "2378940"
  },
  {
    "text": "We have a initial state, the\ncode output at time k.",
    "start": "2378940",
    "end": "2386839"
  },
  {
    "text": "We're calling that y time\nk in the next state.",
    "start": "2386840",
    "end": "2392290"
  },
  {
    "text": "So it's that triple. Again, this is linear\nsystem theory. State, output, next state.",
    "start": "2392290",
    "end": "2400600"
  },
  {
    "text": "Those are the three things\nthat define a branch. ",
    "start": "2400600",
    "end": "2405730"
  },
  {
    "text": "This branch is state 1 0. Output whatever it is, y k,\nand next state 1 0 0.",
    "start": "2405730",
    "end": "2414810"
  },
  {
    "text": "And that differentiates it\nfrom this down here. ",
    "start": "2414810",
    "end": "2420280"
  },
  {
    "text": "If we define the branch\nas this triple, then we can add triples.",
    "start": "2420280",
    "end": "2426610"
  },
  {
    "text": "States form a vector space\nover the ground field. These are simply symbols\nover the ground field.",
    "start": "2426610",
    "end": "2434500"
  },
  {
    "text": "These are vectors over\nthe ground field. So we can add them.",
    "start": "2434500",
    "end": "2440359"
  },
  {
    "text": "And we find that it's closed,\nand the set of all branches is",
    "start": "2440360",
    "end": "2451850"
  },
  {
    "text": "a vector space.  It's fairly easy to show.",
    "start": "2451850",
    "end": "2460099"
  },
  {
    "text": "Look at the notes, but it's\nbasically because these are all projected from code words\nin the first place, and code",
    "start": "2460100",
    "end": "2468690"
  },
  {
    "text": "words form a vector space, so\nthis is just a projection of the code words, a certain kind\nof projection onto the state",
    "start": "2468690",
    "end": "2476910"
  },
  {
    "text": "spaces and symbol spaces\nand so forth. A projection of a vector space\nis a vector space.",
    "start": "2476910",
    "end": "2484310"
  },
  {
    "text": "Roughly the proof.  And what is the dimension\nof the branch space?",
    "start": "2484310",
    "end": "2494424"
  },
  {
    "text": " Again, I'm just going to\ngive you the answer.",
    "start": "2494425",
    "end": "2499710"
  },
  {
    "text": "Suppose we have a trellis-oriented generator matrix.",
    "start": "2499710",
    "end": "2505220"
  },
  {
    "text": "Let's suppose we want to find\nout the size of the branch space at this time.",
    "start": "2505220",
    "end": "2511450"
  },
  {
    "text": "What doesn't enter into\nthe branch space? What doesn't make a difference\nto the branches?",
    "start": "2511450",
    "end": "2517020"
  },
  {
    "text": "All the pasts that arrive at the\nsame state at time k are equivalent.",
    "start": "2517020",
    "end": "2523450"
  },
  {
    "text": "So this generator doesn't\nenter in. All the futures that depart from\ntime k plus 1 don't enter",
    "start": "2523450",
    "end": "2531800"
  },
  {
    "text": "in, so anything that's supported\nby the future at time k plus 1 doesn't\nenter in.",
    "start": "2531800",
    "end": "2540420"
  },
  {
    "text": "And what's left is all of the\ngenerators that are active at symbol time k.",
    "start": "2540420",
    "end": "2547710"
  },
  {
    "text": "Notice the symbol times occur\nbetween the state times. So certainly this\nis an easy --",
    "start": "2547710",
    "end": "2560050"
  },
  {
    "text": " this is one of those results\nthat's easier to understand",
    "start": "2560050",
    "end": "2565120"
  },
  {
    "text": "than to prove, and I'll refer\nyou to the notes to prove.",
    "start": "2565120",
    "end": "2570610"
  },
  {
    "text": "The dimension of the branch\nspace is simply the number of generators that are active\nat symbol time k.",
    "start": "2570610",
    "end": "2578540"
  },
  {
    "start": "2578540",
    "end": "2589971"
  },
  {
    "text": "Because branches are\nsynchronized with the symbol times, not with the\nstate times.",
    "start": "2589971",
    "end": "2595600"
  },
  {
    "text": " So how does that come\nout over here? There's the dimension of the\nbranch space is 1 here.",
    "start": "2595600",
    "end": "2604140"
  },
  {
    "text": "It's 2 here. It's 3 here. It's 4 here.",
    "start": "2604140",
    "end": "2609809"
  },
  {
    "text": "I'm sorry, it's 3 again here. This one hasn't started yet. It's 3 again here.",
    "start": "2609810",
    "end": "2617390"
  },
  {
    "text": "It's 3 again here,\n2 here, 1 here.",
    "start": "2617390",
    "end": "2625010"
  },
  {
    "text": "That means that the size of the\nbranch space is 2, 4, 8,",
    "start": "2625010",
    "end": "2630910"
  },
  {
    "text": "8, 8, 8, 4, 2. Is that right?",
    "start": "2630910",
    "end": "2638290"
  },
  {
    "text": "There are two branches here. There are four branches here. There are eight branches here. There are still eight\nbranches here.",
    "start": "2638290",
    "end": "2644230"
  },
  {
    "text": "And it's symmetric on\nthe other side. So it looks like we got the\nright answer there, and in",
    "start": "2644230",
    "end": "2650400"
  },
  {
    "text": "fact it's a general rule. So that's great. That's another property of",
    "start": "2650400",
    "end": "2655540"
  },
  {
    "text": "trellis-oriented generator matrix. We can again, by inspection, get\nthe dimensions of all the branch space sizes.",
    "start": "2655540",
    "end": "2662480"
  },
  {
    "text": "Are the branch sizes\nimportant? Yes.",
    "start": "2662480",
    "end": "2668490"
  },
  {
    "text": "In fact, they're more important\nfrom a complexity point of view than the\nstate space sizes.",
    "start": "2668490",
    "end": "2674920"
  },
  {
    "text": "95% of the literature has\nto do with state spaces. State space is a little bit more\nelegant mathematically.",
    "start": "2674920",
    "end": "2681480"
  },
  {
    "text": " For instance, you don't have the\nsame kind of dual branch",
    "start": "2681480",
    "end": "2686610"
  },
  {
    "text": "space theorem as you have a\ndual state space theorem. But actually, when you're asking\nwhat's going on in the",
    "start": "2686610",
    "end": "2694109"
  },
  {
    "text": "Viterbi algorithm, what\ndoes the Viterbi algorithm have to do? At a minimum, it has to do one\nthing for each branch.",
    "start": "2694110",
    "end": "2701069"
  },
  {
    "text": "It has to perform a metric\nextension, a metric addition computation at least once\nfor each branch.",
    "start": "2701070",
    "end": "2707150"
  },
  {
    "text": "So the Viterbi algorithm\ncomplexity is better estimated by the size of the branch space\nthan the size of the",
    "start": "2707150",
    "end": "2715910"
  },
  {
    "text": "state space. To progress at this point, a\nViterbi algorithm has to do at",
    "start": "2715910",
    "end": "2721720"
  },
  {
    "text": "least eight things. To progress again, it has to\ndo at least eight things. ",
    "start": "2721720",
    "end": "2729050"
  },
  {
    "text": "So it's more relevant from the\npoint of view of complexity. Furthermore, you can play games\nwith state space size.",
    "start": "2729050",
    "end": "2737440"
  },
  {
    "text": "And you've seen me play games\nwith state space size. For instance, if I draw this\nas a two-section trellis --",
    "start": "2737440",
    "end": "2743385"
  },
  {
    "text": " the first picture I put up was\nonly a four-state trellis, and",
    "start": "2743385",
    "end": "2749950"
  },
  {
    "text": "it looked like this.  I went immediately\nto time 2, and I",
    "start": "2749950",
    "end": "2755630"
  },
  {
    "text": "aggregated these two things. 0, 0 and 1, 1 were up\nhere, and 0, 1 and",
    "start": "2755630",
    "end": "2762075"
  },
  {
    "text": "1, 0 were down here. And then I had a nice -- I just drew these four\nstates over here.",
    "start": "2762075",
    "end": "2768510"
  },
  {
    "text": "And if I do it like that, then\nI get a much nicer picture. It looks like this. ",
    "start": "2768510",
    "end": "2778700"
  },
  {
    "text": "It looks only like a\nfour-state trellis. Now, is this still a\nlegitimate trellis?",
    "start": "2778700",
    "end": "2784730"
  },
  {
    "text": "Yeah, it's still a legitimate\ntrellis. If I do a Viterbi algorithm\ndecoding of this trellis, is",
    "start": "2784730",
    "end": "2791240"
  },
  {
    "text": "it any different from this? Well, in detail it is a\nlittle bit different. You do the additions and the\ncomparisons and the selection.",
    "start": "2791240",
    "end": "2798420"
  },
  {
    "text": "So you only do selections\nevery this often. ",
    "start": "2798420",
    "end": "2806000"
  },
  {
    "text": "And if you think about it,\nit's really legitimate to think of this -- if you think exactly how the\nViterbi algorithm works,",
    "start": "2806000",
    "end": "2813480"
  },
  {
    "text": "really what's it doing? It's not making any\nselection here. It's just adding an increment\nthere, and then adding another increment, and it's not\nmaking any selection",
    "start": "2813480",
    "end": "2820830"
  },
  {
    "text": "until it gets here. So it's perfectly legitimate to\nthink of this as basically",
    "start": "2820830",
    "end": "2826360"
  },
  {
    "text": "being a four-state algorithm. It really isn't doing any\nwork at this stage.",
    "start": "2826360",
    "end": "2831470"
  },
  {
    "text": "All the work occurs at this\nstage if you think about the operation of the Viterbi\nalgorithm.",
    "start": "2831470",
    "end": "2838309"
  },
  {
    "text": "So this is a quite legitimate\nrepresentation. And so what are we\ngoing to say? Is the state complexity of this\ncode, is it four states",
    "start": "2838310",
    "end": "2845970"
  },
  {
    "text": "or is it eight states? Well, to some degree it's just\na matter of definition. ",
    "start": "2845970",
    "end": "2852400"
  },
  {
    "text": "How do you choose\nto define it? If you want something more\nfundamental, it's better to go",
    "start": "2852400",
    "end": "2858900"
  },
  {
    "text": "to branch complexity. What's the branch complexity\nhere for the fully displayed trellis?",
    "start": "2858900",
    "end": "2865385"
  },
  {
    "text": "It's eight. By branch complexity, I\nmean the maximum size of any branch space.",
    "start": "2865385",
    "end": "2872530"
  },
  {
    "text": "What's the branch\ncomplexity here? It's eight. We've still got eight.",
    "start": "2872530",
    "end": "2879010"
  },
  {
    "text": "Ultimately we've got to compare\nthese eight things and reduce them to four, whether\nwe do it here or here.",
    "start": "2879010",
    "end": "2886280"
  },
  {
    "text": "I gave you another trellis which\nwas only a two-section trellis, where I just showed\nthe four central states.",
    "start": "2886280",
    "end": "2898480"
  },
  {
    "text": "And we actually have two\nbranches going there, two branches going there, two\nbranches going there, and two",
    "start": "2898480",
    "end": "2904300"
  },
  {
    "text": "branches going there. What's the branch complexity\nof that trellis? Still eight.",
    "start": "2904300",
    "end": "2909755"
  },
  {
    "text": "There are eight ways to get\nfrom the origin to here. ",
    "start": "2909755",
    "end": "2916799"
  },
  {
    "text": "If you go back to how we do this\ntheorem, if you believe this theorem, what happens now\nif we say arbitrarily, OK,",
    "start": "2916800",
    "end": "2927860"
  },
  {
    "text": "we're going to define the state\nspaces as we do in a rate 1/2 convolutional code. We're just going to define\nthe state times to",
    "start": "2927860",
    "end": "2934610"
  },
  {
    "text": "be every two times. ",
    "start": "2934610",
    "end": "2940980"
  },
  {
    "text": "Then the dimension of the state\nspaces, just at those times we've defined,\nis 0, 2, 2, 2, 0.",
    "start": "2940980",
    "end": "2949100"
  },
  {
    "text": "They don't change. We just have fewer of\nthem by our choice.",
    "start": "2949100",
    "end": "2955120"
  },
  {
    "text": "What happens to the dimensions\nof the branch spaces? Again, if the theorem is\ncorrect, we should just count",
    "start": "2955120",
    "end": "2961340"
  },
  {
    "text": "the number of active generators\nat each now of these four bi-symbol times.",
    "start": "2961340",
    "end": "2968580"
  },
  {
    "text": "So it's 2, 3, 3, 2.",
    "start": "2968580",
    "end": "2974720"
  },
  {
    "text": "Is that right? That is the branch complexity\nof this trellis down here.",
    "start": "2974720",
    "end": "2979920"
  },
  {
    "text": "It's 4 in the initial interval,\nand 8 over here.",
    "start": "2979920",
    "end": "2985069"
  },
  {
    "text": "So again it's correct. Suppose we go to that so-called\ntwo-section trellis.",
    "start": "2985070",
    "end": "2990480"
  },
  {
    "text": "We just say there's a first\nhalf and a second half. Now the states is going to\nbe 0 2 0, and the branch",
    "start": "2990480",
    "end": "2999380"
  },
  {
    "text": "complexity is going to be -- there are three active\ngenerators in the first half,",
    "start": "2999380",
    "end": "3005299"
  },
  {
    "text": "and three active generators\nin the second half. ",
    "start": "3005300",
    "end": "3011300"
  },
  {
    "text": "So by playing this kind of\ngame, which is called sectionalization, we can make\nthe state complexity sometimes",
    "start": "3011300",
    "end": "3020080"
  },
  {
    "text": "appear simpler. There are limits to how much\nsimpler we can make it. Well, there actually aren't. Suppose we took the whole eight\nsymbols as one time.",
    "start": "3020080",
    "end": "3029970"
  },
  {
    "text": "We'd have 0 dimensional state\nspace at the beginning, and 0 dimensional at the end.",
    "start": "3029970",
    "end": "3035319"
  },
  {
    "text": "What does that trellis\nlook like? It looks like 16 parallel\ntransitions from",
    "start": "3035320",
    "end": "3040670"
  },
  {
    "text": "beginning to end. That's a legitimate\ntrellis, right? We should have one state at the\nbeginning and one state at",
    "start": "3040670",
    "end": "3046350"
  },
  {
    "text": "the end, and 16 transitions. Is that what we get if\nwe went through this?",
    "start": "3046350",
    "end": "3051480"
  },
  {
    "text": "Yeah. We have 0 0. And what's the branch\ncomplexity? It's 4.",
    "start": "3051480",
    "end": "3057340"
  },
  {
    "text": "The dimension of the branch\nspace is 4 if we took the whole thing.",
    "start": "3057340",
    "end": "3062380"
  },
  {
    "text": "So we can mask state complexity\nby picking our state spaces at appropriate\ntimes, but you can't ever mask",
    "start": "3062380",
    "end": "3072080"
  },
  {
    "text": "branch complexity. And again, it's a very\nintuitive proof here.",
    "start": "3072080",
    "end": "3078740"
  },
  {
    "text": "Let's take this time here, where\nthere are three active generators. ",
    "start": "3078740",
    "end": "3084480"
  },
  {
    "text": "By expanding that time, can we\never get fewer than three active generators? No, any interval that includes\nthis particular time is going",
    "start": "3084480",
    "end": "3094660"
  },
  {
    "text": "to have three active\ngenerators in it. So branch complexity cannot\nbe reduced by this kind of",
    "start": "3094660",
    "end": "3101340"
  },
  {
    "text": "sectionalization game. State complexity can be\napparently reduced. It isn't really.",
    "start": "3101340",
    "end": "3107020"
  },
  {
    "text": "But branch complexity cannot. AUDIENCE: [INAUDIBLE] ",
    "start": "3107020",
    "end": "3112730"
  },
  {
    "text": "PROFESSOR: And if you go too\nfar, it might increase. ",
    "start": "3112730",
    "end": "3117800"
  },
  {
    "text": "So at the very end of the\nchapter, I talk about sectionalization.",
    "start": "3117800",
    "end": "3125109"
  },
  {
    "text": "It's not a very important\nissue. There's a very easy heuristic\nfor how you should",
    "start": "3125110",
    "end": "3131860"
  },
  {
    "text": "sectionalize, which is basically\nyou should make the sections as big as you can\nwithout increasing branch",
    "start": "3131860",
    "end": "3137970"
  },
  {
    "text": "complexity. So in this case, the heuristic\nsays we know we're going to",
    "start": "3137970",
    "end": "3143720"
  },
  {
    "text": "have to have branch\ncomplexity of 3. But without increasing -- if I just make this one\npartition at the center, I",
    "start": "3143720",
    "end": "3152660"
  },
  {
    "text": "just take these two sections,\nfirst half, second half. Then I have an increased\nbranch complexity.",
    "start": "3152660",
    "end": "3159980"
  },
  {
    "text": "So that's a good\nsectionalization. This will probably lead to the\nsimplest Viterbi algorithm and the simplest-looking trellis\nrepresentation of the code.",
    "start": "3159980",
    "end": "3168480"
  },
  {
    "text": " So that's the character of the\nsectionalization algorithm.",
    "start": "3168480",
    "end": "3175380"
  },
  {
    "text": "You can read about it. It usually winds up with\na sensible time-varying",
    "start": "3175380",
    "end": "3182030"
  },
  {
    "text": "sectionalization, and it's\nworth five minutes of discussion. Yes. AUDIENCE: Is it like a monotonic\nkind of thing, like",
    "start": "3182030",
    "end": "3189691"
  },
  {
    "text": "if you make sections bigger,\nthen you'll only either increase or keep the same\nbranch complexity?",
    "start": "3189691",
    "end": "3195859"
  },
  {
    "text": "PROFESSOR: Yeah, that was my\nbasic argument, that if I have any section that includes this\ntime, and I start making it",
    "start": "3195860",
    "end": "3201559"
  },
  {
    "text": "bigger, the dimension\ncan only increase. So the algorithm is to keep\nincreasing it until I get to",
    "start": "3201560",
    "end": "3208960"
  },
  {
    "text": "some place where I might have to\ninclude another generator. For instance here, if I'm taking\nthis time, I don't want",
    "start": "3208960",
    "end": "3216000"
  },
  {
    "text": "to push it out over here,\nbecause then I'll get the fourth generator in there. So any section that includes\ntime 3 should not be extended",
    "start": "3216000",
    "end": "3227849"
  },
  {
    "text": "in this direction, because we'll\nget another generator. But no problem with extending\nin this direction.",
    "start": "3227850",
    "end": "3234150"
  },
  {
    "text": "So that's the basic heuristic. It's easy.",
    "start": "3234150",
    "end": "3240070"
  },
  {
    "text": "And it's not very productive. It doesn't really change the\ncomplexity of the Viterbi",
    "start": "3240070",
    "end": "3246119"
  },
  {
    "text": "algorithm as a representation\nof code. So these are just a couple\nof arguments to say really we might --",
    "start": "3246120",
    "end": "3252650"
  },
  {
    "text": "the branch complexity\nis more fundamental. We want to focus on branch\ncomplexity a little bit more. But of course, if you have a\nfully displayed trellis, the",
    "start": "3252650",
    "end": "3268750"
  },
  {
    "text": "maximum state space dimension is\neither going to be equal to the maximum branch space\ndimension or one less than it.",
    "start": "3268750",
    "end": "3275760"
  },
  {
    "text": "Because in these binary\ntrellises, we get at most a binary branch at each time.",
    "start": "3275760",
    "end": "3282569"
  },
  {
    "text": "So any branch complexity is\nat most twice that of the adjacent state space.",
    "start": "3282570",
    "end": "3290630"
  },
  {
    "text": "So they're not going to\ndiffer by very much. So state complexity is a good\nproxy for branch complexity in",
    "start": "3290630",
    "end": "3298440"
  },
  {
    "text": "a fully displayed or\nunsectionalized trellis. ",
    "start": "3298440",
    "end": "3310070"
  },
  {
    "text": "While I'm on this subject,\nthere's another interesting direction we can go, which is\naverage dimension bounds.",
    "start": "3310070",
    "end": "3323555"
  },
  {
    "start": "3323555",
    "end": "3334079"
  },
  {
    "text": "Again, think of our\nrealization here. ",
    "start": "3334080",
    "end": "3343849"
  },
  {
    "text": "What does it contribute? What does a single generator\ncontribute overall to state",
    "start": "3343850",
    "end": "3351520"
  },
  {
    "text": "and branch space complexity? A single generator Gj of span\nS, which of course has to be",
    "start": "3351520",
    "end": "3366390"
  },
  {
    "text": "greater than or equal to\nthe minimum distance to the code, right? The span can't be less\nof a generator. It can't be less than\nthe minimum nonzero",
    "start": "3366390",
    "end": "3374109"
  },
  {
    "text": "weight of any code word. Span S contributes overall\nto all the state space",
    "start": "3374110",
    "end": "3385599"
  },
  {
    "text": "dimensions. It contributes S minus 1 state\nspace dimensions, because it's",
    "start": "3385600",
    "end": "3393480"
  },
  {
    "text": "active for S minus\n1 state times. ",
    "start": "3393480",
    "end": "3402359"
  },
  {
    "text": "And it contributes S branch\ndimensions because it's active for S symbols.",
    "start": "3402360",
    "end": "3411545"
  },
  {
    "text": " If I look at it spread out\nacross time, this generator of",
    "start": "3411545",
    "end": "3418530"
  },
  {
    "text": "span 4, it contributed three\ntimes to a state space",
    "start": "3418530",
    "end": "3425100"
  },
  {
    "text": "dimension, and it\ncontributed four times to a branch dimension. ",
    "start": "3425100",
    "end": "3433510"
  },
  {
    "text": "So total state dimension has to\nbe greater than or equal to",
    "start": "3433510",
    "end": "3445490"
  },
  {
    "text": "k times d minus 1. And the total branch dimension,\njust summing up",
    "start": "3445490",
    "end": "3452300"
  },
  {
    "text": "across the trellis, is greater\nthan or equal to k generators times d.",
    "start": "3452300",
    "end": "3457650"
  },
  {
    "text": " Now how many different\nnontrivial",
    "start": "3457650",
    "end": "3463750"
  },
  {
    "text": "state spaces are there? There are n minus 1 nontrivial\nstate times.",
    "start": "3463750",
    "end": "3470300"
  },
  {
    "text": "Excuse me. For instance, in this code\nof length 8, there are 7",
    "start": "3470300",
    "end": "3475730"
  },
  {
    "text": "nontrivial state spaces. ",
    "start": "3475730",
    "end": "3480830"
  },
  {
    "text": "So the average state dimension\nhas to be greater than or",
    "start": "3480830",
    "end": "3488530"
  },
  {
    "text": "equal to k d minus\n1 over n minus 1.",
    "start": "3488530",
    "end": "3498440"
  },
  {
    "text": "And the average branch dimension\nhas got to be",
    "start": "3498440",
    "end": "3505230"
  },
  {
    "text": "greater than or equal to k d\nover the n symbol times. ",
    "start": "3505230",
    "end": "3515260"
  },
  {
    "text": "So actually we might remember\nthat quantity.",
    "start": "3515260",
    "end": "3520350"
  },
  {
    "text": "That's what we called the coding\ngain of the code, the nominal coding gain on\nthe additive white Gaussian noise channel.",
    "start": "3520350",
    "end": "3526700"
  },
  {
    "text": "Well, if the average dimension\nis lower bounded by something, then certainly the maximum state\nspace dimension is lower",
    "start": "3526700",
    "end": "3533290"
  },
  {
    "text": "bounded by that. ",
    "start": "3533290",
    "end": "3543280"
  },
  {
    "text": "Max has to be at least as\ngreat as the average. ",
    "start": "3543280",
    "end": "3549510"
  },
  {
    "text": "So if these are what are called\nthe average dimension bounds on the maximum state\nspace size, and there are some",
    "start": "3549510",
    "end": "3560050"
  },
  {
    "text": "interesting implications. Again, this expression for\nbranch dimension is nicer",
    "start": "3560050",
    "end": "3566480"
  },
  {
    "text": "here, because it's\nthis k d over n nominal coding gain thing. It's in terms of the basic n\nk d parameters of the code.",
    "start": "3566480",
    "end": "3574606"
  },
  {
    "text": "And it says what? It says if you want a nominal\ncoding gain of 2, it implies",
    "start": "3574606",
    "end": "3584019"
  },
  {
    "text": "that the max branch dimension is\ngreater than or equal to 2.",
    "start": "3584020",
    "end": "3592560"
  },
  {
    "text": "Or the max size is greater than\nor equal to 2 to the 2,",
    "start": "3592560",
    "end": "3598040"
  },
  {
    "text": "or you need a branch space of at\nleast size 4, or dimension 2 to get a 3 dB nominal\ncoding gain.",
    "start": "3598040",
    "end": "3609539"
  },
  {
    "text": "Similarly, if you want\na 6 dB gain -- ",
    "start": "3609540",
    "end": "3615850"
  },
  {
    "text": "let's get right down to dB. It says you're going to need a\nbranch space size greater than",
    "start": "3615850",
    "end": "3622626"
  },
  {
    "text": "or equal to 4, or at least\na 16-state trellis.",
    "start": "3622626",
    "end": "3628320"
  },
  {
    "text": "So we know if we want a 6 dB\ncoding gain, we're going to need at least a 16-state\ntrellis,",
    "start": "3628320",
    "end": "3633730"
  },
  {
    "text": "or a 16-branch trellis. It might be an eight-state\ntrellis. Well, these are not tight, but\nthey're quite indicative in",
    "start": "3633730",
    "end": "3641839"
  },
  {
    "text": "fact of what we see in both the\ntables for block codes and",
    "start": "3641840",
    "end": "3647510"
  },
  {
    "text": "for convolutional codes. These same bounds hold for\nconvolutional codes, by the",
    "start": "3647510",
    "end": "3653300"
  },
  {
    "text": "way, just average over\ninfinite time. ",
    "start": "3653300",
    "end": "3658540"
  },
  {
    "text": "But they're still\nperfectly good. So they tell us that\nin order to get --",
    "start": "3658540",
    "end": "3666020"
  },
  {
    "text": "if we want the nominal coding\ngain to keep going up to 8, to 16, to infinity, it says we're\ngoing to need infinite trellis",
    "start": "3666020",
    "end": "3676289"
  },
  {
    "text": "complexity to get infinite\ncoding gain. ",
    "start": "3676290",
    "end": "3683740"
  },
  {
    "text": "Let's do some little\nasymptotics, be a little bit more refined about this.",
    "start": "3683740",
    "end": "3690119"
  },
  {
    "start": "3690120",
    "end": "3696280"
  },
  {
    "text": "A sequence of codes Cn of length\nn going to infinity is",
    "start": "3696280",
    "end": "3714020"
  },
  {
    "text": "called good if both the rate k\nover n is bounded away from 0",
    "start": "3714020",
    "end": "3723110"
  },
  {
    "text": "as n goes to infinity, and the\ndistance d over n is bounded",
    "start": "3723110",
    "end": "3729540"
  },
  {
    "text": "away from 0. The rate and the relative\ndistance are both bounded away",
    "start": "3729540",
    "end": "3735980"
  },
  {
    "text": "from 0 as n goes to infinity. Is that clear? In other words, we want the\ndimension and the minimum",
    "start": "3735980",
    "end": "3743510"
  },
  {
    "text": "distance both to increase\nlinearly with n in a good sequence of codes.",
    "start": "3743510",
    "end": "3748830"
  },
  {
    "text": "This is a classical algebraic\ndefinition, and it's easy to prove there exists good\nsequences of codes.",
    "start": "3748830",
    "end": "3756660"
  },
  {
    "text": "You just pick a code at random,\nrate 1/2 of binary linear code.",
    "start": "3756660",
    "end": "3762110"
  },
  {
    "text": "It on average will have\na relative minimum distance about 11%.",
    "start": "3762110",
    "end": "3768750"
  },
  {
    "text": "This is just basic information\ntheory.  So there certainly exists\nsequences of good codes, and",
    "start": "3768750",
    "end": "3777849"
  },
  {
    "text": "this is what most of coding\ntheory was occupied with constructing for a\nvery long time.",
    "start": "3777850",
    "end": "3785380"
  },
  {
    "text": "What happens if you have a\ngood sequence of codes? ",
    "start": "3785380",
    "end": "3790990"
  },
  {
    "text": "We have this nominal coding\ngain, which is equal to kd",
    "start": "3790990",
    "end": "3797200"
  },
  {
    "text": "over n, which is equal to n\ntimes k over n times d over n.",
    "start": "3797200",
    "end": "3804974"
  },
  {
    "text": "If both of these are bounded\naway from zero, then the nominal coding gain has to\nincrease linearly with n.",
    "start": "3804975",
    "end": "3823240"
  },
  {
    "text": "That means that the average,\nor the maximum branch dimension, in a minimal trellis\nrepresentation for",
    "start": "3823240",
    "end": "3831420"
  },
  {
    "text": "your code has to increase at\nleast linearly with n, which means that the actual branch\ncomplexity, the size of B, has",
    "start": "3831420",
    "end": "3840820"
  },
  {
    "text": "to increase as --",
    "start": "3840820",
    "end": "3848150"
  },
  {
    "text": "it goes as 2 to the nominal\ncoding gain, which is in other words exponentially with n.",
    "start": "3848150",
    "end": "3854350"
  },
  {
    "start": "3854350",
    "end": "3863350"
  },
  {
    "text": "So basically what this says is\nthat if your objective is to",
    "start": "3863350",
    "end": "3868570"
  },
  {
    "text": "get a good sequence of codes,\nif this is the way you think you're going to get to channel\ncapacity, then sure enough,",
    "start": "3868570",
    "end": "3877780"
  },
  {
    "text": "your nominal coding gain\nwill go up to infinity linearly with n.",
    "start": "3877780",
    "end": "3883010"
  },
  {
    "text": "But how are you going\nto decode it? Our first method was simply\nmaximum likelihood decoding.",
    "start": "3883010",
    "end": "3888369"
  },
  {
    "text": "The complexity of that,\ncomputing the distance to every code word, that\ncertainly goes up",
    "start": "3888370",
    "end": "3894550"
  },
  {
    "text": "exponentially with n, exhaustive\ndecoding, comparing with every code word.",
    "start": "3894550",
    "end": "3899569"
  },
  {
    "text": "But now we have a new method\nwhich is, we hope, simpler, which is trellis decoding.",
    "start": "3899570",
    "end": "3904990"
  },
  {
    "text": "But we find out, unfortunately,\nthe complexity of trellis decoding\nis going to go up",
    "start": "3904990",
    "end": "3910109"
  },
  {
    "text": "exponentially with n as well. So the good news was that with\nthe Viterbi algorithm and a",
    "start": "3910110",
    "end": "3920890"
  },
  {
    "text": "minimal trellis, we can get\na simpler optimum maximum likelihood decoding algorithm\nfor block code, simpler than",
    "start": "3920890",
    "end": "3928160"
  },
  {
    "text": "exhaustive decoding. The bad news is that under\nthis assumption, the",
    "start": "3928160",
    "end": "3934420"
  },
  {
    "text": "complexity of that algorithm\nis still going to go up exponentially with n. Maybe just a lower exponent,\nthat's all.",
    "start": "3934420",
    "end": "3941069"
  },
  {
    "text": "So we haven't really solved our\nbasic problem, which is exponential decoding complexity,\nby going to",
    "start": "3941070",
    "end": "3948300"
  },
  {
    "text": "trellis decoding.  We have, however, another\nway to go.",
    "start": "3948300",
    "end": "3959376"
  },
  {
    "text": "Do we really need the coding\ngain to go to infinity, the nominal coding gain\nto go to infinity?",
    "start": "3959376",
    "end": "3967170"
  },
  {
    "text": "If we go back and remember the\nname of the game, the playing field that we're on, at least in\nthe additive white Gaussian",
    "start": "3967170",
    "end": "3972820"
  },
  {
    "text": "noise channel, we found the\ndistance between uncoded and",
    "start": "3972820",
    "end": "3977970"
  },
  {
    "text": "the Shannon limit was some\nfinite number, something like",
    "start": "3977970",
    "end": "3983010"
  },
  {
    "text": "9 dB at a 10 to the minus 5\nerror probability, larger at lower error probability. So that's the maximum\neffective coding",
    "start": "3983010",
    "end": "3990990"
  },
  {
    "text": "gain we can ever get. So maybe we only need a finite\nnominal coding gain.",
    "start": "3990990",
    "end": "3999160"
  },
  {
    "text": "In practice, this means maybe\nwe don't need a minimum distance that goes up\nlinearly with n.",
    "start": "3999160",
    "end": "4004580"
  },
  {
    "text": "Maybe we can have a very\nlong code with a low minimum distance.",
    "start": "4004580",
    "end": "4011220"
  },
  {
    "text": "And that would be another\nway to crack the complexity problem. In fact, some of the\ncapacity-approaching codes",
    "start": "4011220",
    "end": "4018069"
  },
  {
    "text": "that we're going to talk about,\nspecifically turbo codes, tend to have bad\nminimum distances. You have a turbo code that's\nthousands of bits long, and",
    "start": "4018070",
    "end": "4026260"
  },
  {
    "text": "its minimum distance will be\nsomething like 20 or 30. ",
    "start": "4026260",
    "end": "4032329"
  },
  {
    "text": "And yet it signals within 1\ndB of the Shannon limit.",
    "start": "4032330",
    "end": "4037790"
  },
  {
    "text": "It gives you low error\nprobabilities within 1 dB of the Shannon limit. So maybe there's another way to\ngo, at least if we're only",
    "start": "4037790",
    "end": "4047490"
  },
  {
    "text": "interested in a certain\nerror probability. Maybe it's 10 to the minus 5.",
    "start": "4047490",
    "end": "4052900"
  },
  {
    "text": "Maybe it's 10 to the minus 10. But it's still only a finite\nerror probability. Maybe we don't need the minimum",
    "start": "4052900",
    "end": "4058390"
  },
  {
    "text": "distance to go to infinity. Maybe we can get by sampling\ncodes which are lousy in",
    "start": "4058390",
    "end": "4067410"
  },
  {
    "text": "classical terms, which have\npoor minimum distance. Maybe they'd be lousy in\ndistance terms, or in nominal",
    "start": "4067410",
    "end": "4075860"
  },
  {
    "text": "coding gain terms, but they'll\nbe very good from the point of view of complexity. Maybe there's some\ntrade-off here.",
    "start": "4075860",
    "end": "4082910"
  },
  {
    "text": "We know the code is going to\nhave to be long, but maybe it doesn't have to have\nlarge distance. Yeah.",
    "start": "4082910",
    "end": "4087954"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]  That's what you are\nsaying, isn't it?",
    "start": "4087954",
    "end": "4093750"
  },
  {
    "text": "We try to maintain the -- PROFESSOR: We certainly want\nto maintain a finite rate. ",
    "start": "4093750",
    "end": "4100189"
  },
  {
    "text": "This was the problem with\northogonal and simplex codes and so forth, is that the rate\nwent to zero, and therefore",
    "start": "4100189",
    "end": "4105989"
  },
  {
    "text": "the spectral efficiency\nwent to zero. In practically all cases,\nthat's unacceptable.",
    "start": "4105990",
    "end": "4111850"
  },
  {
    "text": "So we need to maintain some\nminimal rate or spectral",
    "start": "4111850",
    "end": "4117689"
  },
  {
    "text": "efficiency on the additive\nwhite Gaussian noise. So that we need, but this\nmaybe we don't need.",
    "start": "4117689",
    "end": "4124246"
  },
  {
    "start": "4124246",
    "end": "4131350"
  },
  {
    "text": "So that's just a interesting\nlittle bit of philosophy we",
    "start": "4131350",
    "end": "4137240"
  },
  {
    "text": "can do at this point, is how\nshould you really design capacity-achieving codes?",
    "start": "4137240",
    "end": "4142390"
  },
  {
    "text": "And this seems to be a clue to\nthe way to go that has in fact",
    "start": "4142390",
    "end": "4147630"
  },
  {
    "text": "proved to be good. However, I should add that not\nall capacity-approaching codes",
    "start": "4147630",
    "end": "4155000"
  },
  {
    "text": "have this property. A random low-density parity\ncheck code is going to have",
    "start": "4155000",
    "end": "4160479"
  },
  {
    "text": "both low complexity and a very\ngood minimum distance as well.",
    "start": "4160479",
    "end": "4165580"
  },
  {
    "text": "So this certainly isn't\nthe full story.",
    "start": "4165580",
    "end": "4170710"
  },
  {
    "start": "4170710",
    "end": "4176489"
  },
  {
    "text": "There are just two more topics\nin chapter 10, and maybe I'll",
    "start": "4176490",
    "end": "4183939"
  },
  {
    "text": "discuss them both briefly\nright now. ",
    "start": "4183939",
    "end": "4189028"
  },
  {
    "text": "One is I skipped over\nprojections. ",
    "start": "4189029",
    "end": "4197360"
  },
  {
    "text": "And how shall I introduce\nthis subject? I talked about the subcode of,\nsay, this code, which is",
    "start": "4197360",
    "end": "4206590"
  },
  {
    "text": "pretty badly marked-up by now,\nbut let me keep using it.",
    "start": "4206590",
    "end": "4211860"
  },
  {
    "text": "I talked about the subcode\nthat's supported, say, on the first half.",
    "start": "4211860",
    "end": "4217270"
  },
  {
    "text": "In this case it's simply the\nsubcode that's generated by the first generator. ",
    "start": "4217270",
    "end": "4225100"
  },
  {
    "text": "Here's another code that we can\nlook at that's kind of a first half code.",
    "start": "4225100",
    "end": "4231740"
  },
  {
    "text": "Suppose we just take the set\nof all possible first",
    "start": "4231740",
    "end": "4237570"
  },
  {
    "text": "four-tuples in this code. That's called the projection\nonto the first half.",
    "start": "4237570",
    "end": "4243680"
  },
  {
    "text": "In other words, what are\nthe set of all possible four-tuples? They're the set of code words\nthat are generated by 1, 1, 1,",
    "start": "4243680",
    "end": "4257260"
  },
  {
    "text": "1, 0, 1, 0, 1, 0, 0,\n1, 1, and this doesn't contribute anything.",
    "start": "4257260",
    "end": "4264050"
  },
  {
    "text": "So it's a linear code. It's length 4.",
    "start": "4264050",
    "end": "4270220"
  },
  {
    "text": "It has three generators,\ndimension 3. And we can quickly convince\nourselves that it's the even",
    "start": "4270220",
    "end": "4277559"
  },
  {
    "text": "weight, or zero sum, or\na single parity check code of length 4.",
    "start": "4277560",
    "end": "4283070"
  },
  {
    "text": "So if we project this on\nto the first half, we get a 4, 3, 2 code.",
    "start": "4283070",
    "end": "4290390"
  },
  {
    "text": "So that's what I mean\nby a projection. If I project on to here,\nI get the 1 0 code.",
    "start": "4290390",
    "end": "4298850"
  },
  {
    "text": "I'm sorry, I get the universe\ncode of length 1, all one-tuples. On here I get all two-tuples.",
    "start": "4298850",
    "end": "4304630"
  },
  {
    "text": "On here I get all\nthree-tuples. But on here I don't get\nall four-tuples. I get a single parity\ncheck code.",
    "start": "4304630",
    "end": "4311820"
  },
  {
    "text": "So those are my projections.  Some things can be done nicely\nin terms of projections.",
    "start": "4311820",
    "end": "4319260"
  },
  {
    "text": "Projections are kind of\nthe dual to subcodes. In fact, you prove this on the\nhomework in the course of",
    "start": "4319260",
    "end": "4326090"
  },
  {
    "text": "proving the dual state\nspace theorem. In other words, the dual of a\nsubcode of a code C is the",
    "start": "4326090",
    "end": "4338720"
  },
  {
    "text": "projection of the dual code\nof C, and vice versa.",
    "start": "4338720",
    "end": "4344840"
  },
  {
    "text": "They're always tongue twisters,\nthe duality theorem. But that's what you will\nprove along the way.",
    "start": "4344840",
    "end": "4351380"
  },
  {
    "text": "Let me give you the relevance\nof this to",
    "start": "4351380",
    "end": "4356659"
  },
  {
    "text": "the state space theorem.  So I had the state space\ntheorem right here.",
    "start": "4356660",
    "end": "4363540"
  },
  {
    "text": "So let me leave it up. ",
    "start": "4363540",
    "end": "4372350"
  },
  {
    "text": "State space theorem\nis based on -- in general, we divide the\ngenerator matrix g prime into",
    "start": "4372350",
    "end": "4385890"
  },
  {
    "text": "a part that is a generator\nfor the past subcode 0.",
    "start": "4385890",
    "end": "4392890"
  },
  {
    "text": " 0 generator for the\nfuture subcode.",
    "start": "4392890",
    "end": "4401190"
  },
  {
    "text": "And then some stuff down here,\nwhich is generators of the state space code.",
    "start": "4401190",
    "end": "4407430"
  },
  {
    "start": "4407430",
    "end": "4412640"
  },
  {
    "text": "By construction here, the\nprojections of any nonzero",
    "start": "4412640",
    "end": "4421350"
  },
  {
    "text": "vector in the state space\ncode are nonzero.",
    "start": "4421350",
    "end": "4426640"
  },
  {
    "text": "If they were zero, any nonzero\nlinear combination of these",
    "start": "4426640",
    "end": "4432370"
  },
  {
    "text": "generators down here cannot\nbe zero on here. ",
    "start": "4432370",
    "end": "4440850"
  },
  {
    "text": "So the projection on to the\nfirst half here, the dimension",
    "start": "4440850",
    "end": "4446450"
  },
  {
    "text": "of the projection -- I'm making a slight skip here\n-- is basically equal to the",
    "start": "4446450",
    "end": "4451960"
  },
  {
    "text": "dimension of the past subspace\ncode plus the dimension of the state code.",
    "start": "4451960",
    "end": "4457989"
  },
  {
    "text": "It's basically generated by\nthese generators and these generators projected\nonto here. We can forget about\nthese generators.",
    "start": "4457990",
    "end": "4466190"
  },
  {
    "text": "So let me write that down. The dimension of C projected\nonto the past is equal to the",
    "start": "4466190",
    "end": "4476930"
  },
  {
    "text": "dimension of the past subcode\nplus the dimension of the",
    "start": "4476930",
    "end": "4482300"
  },
  {
    "text": "state space code. ",
    "start": "4482300",
    "end": "4488449"
  },
  {
    "text": "Which leads to another version\nof the state space theorem.",
    "start": "4488450",
    "end": "4494790"
  },
  {
    "text": "I could simply write state space\ntheorem as dimension of the state space at time k is\nsimply the difference between",
    "start": "4494790",
    "end": "4502090"
  },
  {
    "text": "the dimension of the projection,\nC projected on the past, minus the dimension\nof the subcode.",
    "start": "4502090",
    "end": "4509640"
  },
  {
    "text": " It's all of these guys\nminus these guys.",
    "start": "4509640",
    "end": "4515100"
  },
  {
    "text": " And again, if we look back here,\nwe see we have the 4, 3",
    "start": "4515100",
    "end": "4522260"
  },
  {
    "text": "code is C projected on\np, 4, 3, 2, and C --",
    "start": "4522260",
    "end": "4530079"
  },
  {
    "text": "the subcode is 4, 1, 4. In fact, for this, these are\nboth Reed-Muller codes of half",
    "start": "4530080",
    "end": "4537090"
  },
  {
    "text": "the length. This is not an accident,\nas you will prove in the homework.",
    "start": "4537090",
    "end": "4542420"
  },
  {
    "text": "The state space size is the\ndifference in the dimensions of these two codes. This is a very handy thing\nto know, and you're",
    "start": "4542420",
    "end": "4549420"
  },
  {
    "text": "going to need this. This, for instance, will give\nyou that in general for Reed-Muller codes, if you\ndivide them in half --",
    "start": "4549420",
    "end": "4559330"
  },
  {
    "text": "we had this general picture of\nsay the 8 4 code being made up",
    "start": "4559330",
    "end": "4566570"
  },
  {
    "text": "by the new u plus\nv construction. These two together make\nthe 8, 4, 4 code.",
    "start": "4566570",
    "end": "4575190"
  },
  {
    "text": "If you have the u u plus v\nconstruction, there you are,",
    "start": "4575190",
    "end": "4582560"
  },
  {
    "text": "first half, second half. You will find that the\nprojection on the first half is always this guy, which\nis the u code.",
    "start": "4582560",
    "end": "4592700"
  },
  {
    "text": "And the subcode is v code,\nwhich is the homework.",
    "start": "4592700",
    "end": "4598530"
  },
  {
    "text": "And so you can quickly read\noff from this what the dimension of the central\nstate space is",
    "start": "4598530",
    "end": "4605160"
  },
  {
    "text": "for Reed-Muller codes. In this case it's 2. But for instance if we have the\n32, 16, 8 code, then what",
    "start": "4605160",
    "end": "4617400"
  },
  {
    "text": "is that made up of? That's made up from the\n16, 11, 4 code and",
    "start": "4617400",
    "end": "4623030"
  },
  {
    "text": "the 16, 5, 8 code. And so we can see the dimension\nof the central state",
    "start": "4623030",
    "end": "4629320"
  },
  {
    "text": "space here is going to be 6. We're going to get a 64-state\ntrellis for this code, at",
    "start": "4629320",
    "end": "4635260"
  },
  {
    "text": "least just measuring the size\nof the central state space. Now it turns out you\ncan keep having --",
    "start": "4635260",
    "end": "4644590"
  },
  {
    "text": "if you go down and you make\nfour cuts here, then the relevant codes are what you\nget one more space back.",
    "start": "4644590",
    "end": "4653130"
  },
  {
    "text": "At this space, we have the 2,\n2, 1 as the projected code, and the 2, 0, infinity\nas the subcode.",
    "start": "4653130",
    "end": "4661080"
  },
  {
    "text": "And again, the difference in\ndimensions here is going to be the same as the different\ndimensions here.",
    "start": "4661080",
    "end": "4666780"
  },
  {
    "text": "Minor miracle at first. It turns out to be just\nfrom the construction. Here we go back to the 8,\n7, 2 and the 8, 1, 8.",
    "start": "4666780",
    "end": "4678010"
  },
  {
    "text": "And again we see the difference\nhere is 6. So that means that Reed-Muller\ncodes always have trellises,",
    "start": "4678010",
    "end": "4688520"
  },
  {
    "text": "least if you put them\nin four sections. They always look like\nthis abstractly.",
    "start": "4688520",
    "end": "4696080"
  },
  {
    "text": "They look like what\nwe've already seen for the 8, 4, 4 code.",
    "start": "4696080",
    "end": "4702256"
  },
  {
    "text": " And you'll do this on the\nhomework using projections.",
    "start": "4702256",
    "end": "4709700"
  },
  {
    "text": "That's not very hard. It doesn't mean that -- so we know, for instance, for\nthe 32 16 8, we're going to do",
    "start": "4709700",
    "end": "4718050"
  },
  {
    "text": "this, and there are going to be\n64 states here, 64 states here, 64 states here.",
    "start": "4718050",
    "end": "4723680"
  },
  {
    "text": "We don't know what it's going to\nbe in between, but you can figure that out too. In fact, we get a minimal\ntrellis for the whole thing.",
    "start": "4723680",
    "end": "4731320"
  },
  {
    "text": " That's what you need\nto do the homework. ",
    "start": "4731320",
    "end": "4738880"
  },
  {
    "text": "There are actually two more\ntopics that I want to do in Chapter 10. One is the Muder bound.",
    "start": "4738880",
    "end": "4745500"
  },
  {
    "text": "And one -- I actually want to see how\ngood are these block code",
    "start": "4745500",
    "end": "4751440"
  },
  {
    "text": "trellises vis-a-vis\nconvolutional code trellises. So I'll do both of those at the\nbeginning of next time.",
    "start": "4751440",
    "end": "4758110"
  },
  {
    "text": "For homework problem set, let's\nthis week do only the",
    "start": "4758110",
    "end": "4765270"
  },
  {
    "text": "first four problems. So for this Wednesday,\ndo problem set --",
    "start": "4765270",
    "end": "4775760"
  },
  {
    "text": "what are we up to? Seven, is it? One through four, and for\nWednesday, 4/20, we'll do",
    "start": "4775760",
    "end": "4786239"
  },
  {
    "text": "problem set seven, five and six,\nplus I'll probably have another one.",
    "start": "4786240",
    "end": "4792150"
  },
  {
    "text": "But we have a holiday next\nMonday also if you recall, Patriots' Day.",
    "start": "4792150",
    "end": "4798520"
  },
  {
    "text": "So we only get one more\nclass on Wednesday. So I probably won't have much\nmore to add than this.",
    "start": "4798520",
    "end": "4805770"
  },
  {
    "text": "Is that clear? Maybe Ashish you could\nput out a email to",
    "start": "4805770",
    "end": "4811470"
  },
  {
    "text": "the class to do that. So good. We'll come back and clean\nup Chapter 10 quickly on",
    "start": "4811470",
    "end": "4818570"
  },
  {
    "text": "Wednesday, and then\nmove on to 11. ",
    "start": "4818570",
    "end": "4830164"
  }
]