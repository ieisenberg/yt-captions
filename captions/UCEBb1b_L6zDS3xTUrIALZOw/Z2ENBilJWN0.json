[
  {
    "start": "0",
    "end": "32000"
  },
  {
    "start": "0",
    "end": "14350"
  },
  {
    "text": "So today we're going to continue\nour discussion of networking. If you remember from\nthe last few times,",
    "start": "14350",
    "end": "19570"
  },
  {
    "text": "we talked about these two\ndifferent layers of the network",
    "start": "19570",
    "end": "25300"
  },
  {
    "text": "stack so far. We talked about the\nlink layer, and we talked about the network layer. And today were going to talk\nabout the end to end layer.",
    "start": "25300",
    "end": "32580"
  },
  {
    "start": "32000",
    "end": "215000"
  },
  {
    "text": "So what we've\ntalked about so far has been a network\nstack that provides",
    "start": "32580",
    "end": "38269"
  },
  {
    "text": "this abstraction of being able\nto send a message from one machine to another machine\nacross a number of links",
    "start": "38270",
    "end": "43940"
  },
  {
    "text": "in the network. And this network\nstack that we talked about is, if you will remember,\na best effort network.",
    "start": "43940",
    "end": "50530"
  },
  {
    "start": "50530",
    "end": "58129"
  },
  {
    "text": "So a best effort network,\nas you'll remember, is a network that is\nsubject to losses.",
    "start": "58130",
    "end": "65370"
  },
  {
    "text": "So some messages may not\nbe properly transmitted from one point to\nthe other point.",
    "start": "65370",
    "end": "71109"
  },
  {
    "text": "It's subject to the possibility\nof reordering of messages, as messages may\ntake, for example,",
    "start": "71110",
    "end": "77920"
  },
  {
    "text": "different routes\nthrough the network. And it's subject to\ndelays and congestion",
    "start": "77920",
    "end": "91549"
  },
  {
    "text": "typically due to queuing\nwithin the network. So, today what we're going to\ntalk about it and end layer.",
    "start": "91550",
    "end": "98354"
  },
  {
    "text": "And the end to\nend layer is going to be the way that we're going\nto get that finally addressing some of these best effort\nnetwork properties we've",
    "start": "98355",
    "end": "104433"
  },
  {
    "text": "been kind of skirting around\nfor the last few lectures. Particularly, today we're going\nto focus on the issue of loss.",
    "start": "104433",
    "end": "111440"
  },
  {
    "text": "How do we avoid losses\nwithin the network? And we'll talk a little\nbit about this problem of reordering.",
    "start": "111440",
    "end": "118200"
  },
  {
    "text": "We're going to save the\ndiscussion of delays and congestion for next time. ",
    "start": "118200",
    "end": "129619"
  },
  {
    "text": "So the end to end\nlayer in addition to helping us deal with these\nlimitations of the best effort",
    "start": "129620",
    "end": "136380"
  },
  {
    "text": "network provides a\nfew other features that we need to mention. So, the first thing that\nthe end to end layer does",
    "start": "136380",
    "end": "147040"
  },
  {
    "text": "is it provides the ability to\nmultiplex multiple applications on top of the network. So the network that\nwe talked about so far",
    "start": "147040",
    "end": "154010"
  },
  {
    "text": "is one in which\nthere are these two endpoints, to computers that\nare connected to each other. And they are transmitting\na sequence of messages.",
    "start": "154010",
    "end": "159960"
  },
  {
    "text": "But we haven't\nreally said anything about how those\nmessages get dispatched to different applications that\nare running above the network",
    "start": "159960",
    "end": "165990"
  },
  {
    "text": "layer. The other thing the\nend to end layer",
    "start": "165990",
    "end": "175760"
  },
  {
    "text": "provides for us\nis the ability to, is fragmentation of messages.",
    "start": "175760",
    "end": "182330"
  },
  {
    "text": " OK, and fragmentation\nis really about the fact",
    "start": "182330",
    "end": "189370"
  },
  {
    "text": "that the link in itself\nmay have some maximum size message that it can physically\ntransmit because that's,",
    "start": "189370",
    "end": "195750"
  },
  {
    "text": "say for example, the\nmaximum size message is how long the sender\nand receiver can remain synchronized with each other.",
    "start": "195750",
    "end": "201240"
  },
  {
    "text": "So what the end to\nend layer often does is it provides the ability\nto take a longer message and fragment it up into\nsmaller chunks or fragments,",
    "start": "201240",
    "end": "208209"
  },
  {
    "text": "and it transmits each\nof those fragments independently as a separate\nmessage across the network.",
    "start": "208210",
    "end": "215440"
  },
  {
    "start": "215000",
    "end": "293000"
  },
  {
    "text": "So just to illustrate\nhow these things are dealt with within\nthe end to end layer, let's look at a\nlittle illustration.",
    "start": "215440",
    "end": "221910"
  },
  {
    "text": "So suppose we have some set of\napplications that are connected",
    "start": "221910",
    "end": "227370"
  },
  {
    "text": "up to the end to end layer. ",
    "start": "227370",
    "end": "234890"
  },
  {
    "text": "OK, so these\napplications, the idea is going to be that when a\nmessage arrives over the end",
    "start": "234890",
    "end": "240340"
  },
  {
    "text": "to end layer, it's\ngoing to be dispatched to one of these\napplications by looking at a special number that's in\nthe header of this message that",
    "start": "240340",
    "end": "248020"
  },
  {
    "text": "comes in. So, this number is often\nreferred to as a port number.",
    "start": "248020",
    "end": "253760"
  },
  {
    "text": "And, each application\nis going to be running on one of these ports. So oftentimes these\nports are sort",
    "start": "253760",
    "end": "259479"
  },
  {
    "text": "of running at\nwell-known addresses. So we talked about these\nnumbers very briefly earlier, for example, Web\nservers run at port number 80",
    "start": "259480",
    "end": "267970"
  },
  {
    "text": "in the TCP protocol. So if you want to contact a Web\nserver at a particular machine,",
    "start": "267970",
    "end": "275150"
  },
  {
    "text": "talk to port 80. Other times applications\nwill send the port number that they're listening at in a\nmessage where two people will",
    "start": "275150",
    "end": "283819"
  },
  {
    "text": "exchange the port numbers\nthrough some out of band protocol, say by telling\nyour friend in an email",
    "start": "283820",
    "end": "289422"
  },
  {
    "text": "that he should connect\nyour server because it's running on port X. So, messages now\nare going to arrive",
    "start": "289422",
    "end": "296770"
  },
  {
    "start": "293000",
    "end": "399000"
  },
  {
    "text": "into the end to end layer\nfrom the network layer. And these messages\nare going to have in their header information\nabout which port",
    "start": "296770",
    "end": "302003"
  },
  {
    "text": "they should be dispatched to. So the other functionality of\nthe end to end layer I said is fragmentation.",
    "start": "302003",
    "end": "307889"
  },
  {
    "text": "Then fragmentation is about\ntaking a message that's",
    "start": "307890",
    "end": "313490"
  },
  {
    "text": "being sent down from one\nof these applications into the end to end layer. And then that message on\nits way to the network layer",
    "start": "313490",
    "end": "326370"
  },
  {
    "text": "gets fragmented up into\na number of chunks. So these are each of\nthese little chunks in this message is\ncalled a fragment.",
    "start": "326370",
    "end": "333240"
  },
  {
    "text": " So these are sort of, so\noftentimes one common end",
    "start": "333240",
    "end": "344569"
  },
  {
    "text": "to end layer is one that\nprovides an abstraction that's called a stream. So a stream is simply a\nflow of messages or data",
    "start": "344570",
    "end": "357280"
  },
  {
    "text": "from one endpoint to the other,\none application to the other, and where the segments in\nthat stream are guaranteed",
    "start": "357280",
    "end": "366330"
  },
  {
    "text": "to be delivered, are loss-free. So there are no missing\nsegments or missing messages.",
    "start": "366330",
    "end": "373470"
  },
  {
    "text": "And they are in order. So the application knows that\nthe data that it receives",
    "start": "373470",
    "end": "379409"
  },
  {
    "text": "is going to be in the order\nthat the receiver knows the data it receives is\ngoing to be in the order",
    "start": "379410",
    "end": "384449"
  },
  {
    "text": "that the sender sent\nit out on the channel. And there won't be\nany missing messages. So this sounds like a pretty\nconvenient abstraction.",
    "start": "384450",
    "end": "390275"
  },
  {
    "text": "And it's one that's often\nused in applications. And in fact, this\nstream abstraction is the attraction that\nthe TCP protocol provides.",
    "start": "390276",
    "end": "397610"
  },
  {
    "text": "OK, so just to sort\nof make it clear,",
    "start": "397610",
    "end": "403900"
  },
  {
    "start": "399000",
    "end": "536000"
  },
  {
    "text": "I just want to look\nquickly at a simplified end to end header format. So we looked at the header\nformats at the other layers",
    "start": "403900",
    "end": "412860"
  },
  {
    "text": "last time. And this is just showing\nsome of the things that you might expect to\nsee an end to end header.",
    "start": "412860",
    "end": "417910"
  },
  {
    "text": "There are, of course,\nare additional things if you go look at\nthe TCP header. But these are the\nones that mostly",
    "start": "417910",
    "end": "423080"
  },
  {
    "text": "matter from the point\nof view of this class. So there is a source\nport which specifies",
    "start": "423080",
    "end": "428710"
  },
  {
    "text": "which port the\nsender of the message is listening at\non the other side. There is a\ndestination port which specifies which port\nnumber this message",
    "start": "428710",
    "end": "435840"
  },
  {
    "text": "should be sent to on\nthe receiver side. There is something\ncalled the nonce. The nonce is just a\nunique identifier.",
    "start": "435840",
    "end": "442510"
  },
  {
    "text": "It's just a thing that uniquely\nidentifies this message as far as the conversation\nbetween the two endpoints",
    "start": "442510",
    "end": "448740"
  },
  {
    "text": "is concerned. A common kind of\nthe nonce to use is just a sequence\nnumber that gets",
    "start": "448740",
    "end": "454030"
  },
  {
    "text": "incremented by one every time\nan additional message is sent. And then, oftentimes in\nthe end to end layer, there's also some\ncheck some information,",
    "start": "454030",
    "end": "460652"
  },
  {
    "text": "something that\nallows you to verify the integrity of the messages\nthat are transmitted out over the network.",
    "start": "460652",
    "end": "466000"
  },
  {
    "text": "And we do this at\nthe end to end layer. We saw that the checksum\nsometimes appeared in the link layer before.",
    "start": "466000",
    "end": "472080"
  },
  {
    "text": "They also appear at the end to\nend layer because it's possible that, as you guys read\nin the paper about end",
    "start": "472080",
    "end": "480070"
  },
  {
    "text": "to end arguments,\noftentimes we want to verify that the message is\ncorrect at the end to end layer",
    "start": "480070",
    "end": "487225"
  },
  {
    "text": "or at the application layer\neven if we have already may be verified but that was\nthe case at the link layer because the message could\nhave been corrupted somewhere",
    "start": "487226",
    "end": "493620"
  },
  {
    "text": "above just the\nlink layer, right? So this is sort\nof the abstraction",
    "start": "493621",
    "end": "499680"
  },
  {
    "text": "that the end to\nend layer provides. Notice that the header format\nhere doesn't actually include,",
    "start": "499680",
    "end": "504879"
  },
  {
    "text": "for example, the addresses\nof the endpoints, the IP addresses. That's because the IP\naddresses are in the IP header.",
    "start": "504880",
    "end": "510510"
  },
  {
    "text": "So, remember, this is just\nthe additional information that's added by the\nend to end layer, and is used to\ndispatch from the end",
    "start": "510510",
    "end": "516789"
  },
  {
    "text": "to end layer to the applications\nthat are running above it. Once we are dealing with\nthe end to end header,",
    "start": "516789",
    "end": "522409"
  },
  {
    "text": "all the packets have\nalready been transmitted across the network,\nand in fact we don't need to know what\nthe IP address is anymore",
    "start": "522409",
    "end": "529670"
  },
  {
    "text": "because this is happening\non the local machine. All of the applications are\nrunning at the same IP address.",
    "start": "529670",
    "end": "536010"
  },
  {
    "start": "536000",
    "end": "616000"
  },
  {
    "text": "OK, so that the other things\nthat we said, so I said today we're going to focus mostly\non the ability of the end",
    "start": "536010",
    "end": "543310"
  },
  {
    "text": "to end layer to mitigate\nthese problems of losses. So this is sort\nof the abstraction that the end to\nend layer provides.",
    "start": "543310",
    "end": "548760"
  },
  {
    "text": "But what we want\nto look at now is how does the end to end layer\nactually deal with loss? We're going to talk about\ntwo different techniques.",
    "start": "548760",
    "end": "556260"
  },
  {
    "text": "There's two different\ncomponents to dealing with loss. So the first thing\nwe want to do is we want to make sure\nthat no packets get",
    "start": "556260",
    "end": "562950"
  },
  {
    "text": "lost during transmission. And the way we're\ngoing to do that is providing what we call\nat least once delivery.",
    "start": "562950",
    "end": "576640"
  },
  {
    "text": "The reason I put at\nleast once in quotes here is that I'm going to\ntalk you through a protocol.",
    "start": "576640",
    "end": "582760"
  },
  {
    "text": "But, and this protocol\nis going to guarantee that a message gets\nreceived by the receiver as long as, for example, the\nreceiver doesn't completely",
    "start": "582760",
    "end": "590270"
  },
  {
    "text": "fail or the network\ndoesn't completely explode. So it's always\npossible that messages can be lost because there can\nbe some physical failure that",
    "start": "590270",
    "end": "596900"
  },
  {
    "text": "makes it impossible for the\nmessages to get through. But as long as it is possible\nfor the message to get through,",
    "start": "596900",
    "end": "602980"
  },
  {
    "text": "there's a very high\nprobability that the message will, in fact, get through. And, if the message\ndoesn't get through,",
    "start": "602980",
    "end": "608466"
  },
  {
    "text": "what this at least once delivery\nprotocol is going to guarantee is that the receiver knows\nthat the sender may not",
    "start": "608466",
    "end": "614190"
  },
  {
    "text": "have actually received\nthe message, OK? So, and once we talk\nabout it at least once,",
    "start": "614190",
    "end": "619322"
  },
  {
    "start": "616000",
    "end": "1252000"
  },
  {
    "text": "we're going to talk\nabout something we call at most once delivery. And the issue with at most once\ndelivery is the at least once",
    "start": "619322",
    "end": "627359"
  },
  {
    "text": "protocol that I'm\ngoing to sketch out is going to generate duplicates. And we're going to need to\nmake sure that we can get rid",
    "start": "627359",
    "end": "632463"
  },
  {
    "text": "of some of the duplicates. And these two\nthings together are going to provide what's\nknown as exactly once",
    "start": "632463",
    "end": "638690"
  },
  {
    "text": "delivery of messages.  OK, so let's start\noff by talking",
    "start": "638690",
    "end": "646829"
  },
  {
    "text": "about our at least\nonce protocol. ",
    "start": "646830",
    "end": "655850"
  },
  {
    "text": "This protocol is\ngoing to guarantee that if at all possible,\nthe message will",
    "start": "655850",
    "end": "661050"
  },
  {
    "text": "be received by the receiver. And the way we're\ngoing to do this is really very straightforward. We are just going to have the\nreceiver send a message back",
    "start": "661050",
    "end": "668110"
  },
  {
    "text": "to the sender that\nsays I got the message. So, the receiver, when\nit gets the message, sends what's called an\nacknowledgment back --",
    "start": "668110",
    "end": "675627"
  },
  {
    "text": " -- sometimes abbreviated ACK,\nindicating that the message was",
    "start": "675627",
    "end": "688000"
  },
  {
    "text": "received at the other end. OK, this is just going to\nbe sent back to the receiver",
    "start": "688000",
    "end": "693100"
  },
  {
    "text": "directly. So in order to send\nthis acknowledgment,",
    "start": "693100",
    "end": "698297"
  },
  {
    "text": "though, we're going to\nneed a way for the receiver to refer to the message\nthat the sender sent, right?",
    "start": "698297",
    "end": "703642"
  },
  {
    "text": "So we want the receiver\nto be able to say I received this message\nthat you sent to me.",
    "start": "703642",
    "end": "709759"
  },
  {
    "text": "And the simplest way\nto be able to do that is to just use this\nnonce information that's in the packets. We said the nonce is\na unique identifier",
    "start": "709760",
    "end": "715940"
  },
  {
    "text": "as far as the two endpoints of\nthe conversation are concerned. So the knowledge\nman is basically",
    "start": "715940",
    "end": "722310"
  },
  {
    "text": "just going to be the\nnonce of the message, OK?",
    "start": "722310",
    "end": "729680"
  },
  {
    "text": "So let's look at how this\nworks in a simple example. So the idea is that\nthe sender at some",
    "start": "729680",
    "end": "737610"
  },
  {
    "text": "point it's going to send\na message to the receiver. And this message is going\nto contain information",
    "start": "737610",
    "end": "744260"
  },
  {
    "text": "like, well, it's going to have\nthe address of the sender, the address of the receiver, the\nports on both ends the message",
    "start": "744260",
    "end": "750600"
  },
  {
    "text": "is supposed to be sent to, this\nnonce information that uniquely identifies the message, and then\nwhatever the data that needs",
    "start": "750600",
    "end": "755781"
  },
  {
    "text": "to go in the message. Now when it sends this\nmessage, what's going to happen is that the sender\nis going to keep",
    "start": "755781",
    "end": "762240"
  },
  {
    "text": "this table of pending messages. So the sender is going to keep\na list of all the messages that it hasn't yet\nheard acknowledged.",
    "start": "762240",
    "end": "767830"
  },
  {
    "text": " And then at some\npoint, and it's going",
    "start": "767830",
    "end": "774070"
  },
  {
    "text": "to keep, for example,\nif this message is, say, the name of\nthis message is one",
    "start": "774070",
    "end": "779500"
  },
  {
    "text": "and the nonce for\nthis message is X, is going to add that\ninformation into its table.",
    "start": "779500",
    "end": "785030"
  },
  {
    "text": "Now at some point\nlater the receiver is going to send in a knowledge\nman for this message one back. And it just going to have\nthe sender and receiver IP",
    "start": "785030",
    "end": "793029"
  },
  {
    "text": "address, the port\nnumber of the receiver, and the nonce,\nwhich the sender is",
    "start": "793030",
    "end": "798720"
  },
  {
    "text": "going to use in order to remove\nthis entry from its table. So once the sender receives an\nacknowledgment for a message,",
    "start": "798720",
    "end": "803910"
  },
  {
    "text": "it no longer needs to\nkeep any state about it because it knows that the\nreceiver has received it.",
    "start": "803910",
    "end": "809020"
  },
  {
    "text": "OK, so how does\nthis do us any good? How is this at least once? Well, let's see what\nhappens when there is loss",
    "start": "809020",
    "end": "814310"
  },
  {
    "text": "that occurs within the network? So the idea is very simple.",
    "start": "814310",
    "end": "820410"
  },
  {
    "text": "Suppose that the\nsender sends out a message, message\ntwo this time, and that message\nsomehow gets lost",
    "start": "820410",
    "end": "826120"
  },
  {
    "text": "in transit through the network. So the network drops the message\neither because of congestion or because some links failed\nand it doesn't get through.",
    "start": "826120",
    "end": "834360"
  },
  {
    "text": "The idea is that\nthe sender is going to keep a timer associated with\nevery message that it sends.",
    "start": "834360",
    "end": "839494"
  },
  {
    "text": "And this timer is going to\nbe a timeout value that's going to tell the sender\nwhen it should retry transmitting this message.",
    "start": "839494",
    "end": "845290"
  },
  {
    "text": "And the sender is just going\nto retry transmitting messages over and over and over again\nuntil the message actually",
    "start": "845290",
    "end": "850579"
  },
  {
    "text": "gets through. So in this case\nit sets this timer for time TR1 at the same instant\nthat it sends out this message.",
    "start": "850580",
    "end": "858470"
  },
  {
    "text": "And then when time TR1 arrives\nin the message hasn't yet been acknowledged,\nthe sender is,",
    "start": "858470",
    "end": "865330"
  },
  {
    "text": "so after this retry\ninterval time, the sender is just going to\ntry and retransmit the message.",
    "start": "865330",
    "end": "870680"
  },
  {
    "text": "So now in this\ncase, the receiver has successfully\nreceived the message. But notice that the\nsender doesn't actually",
    "start": "870680",
    "end": "875760"
  },
  {
    "text": "know that the receiver\nhas received it. We can see it from the\ndiagram, but there's been no feedback that has\ncome from the receiver again.",
    "start": "875760",
    "end": "882563"
  },
  {
    "text": "And now, suppose that\nthe receiver sends its acknowledgment for this\nmessage, and along the way the acknowledgment\ngets lost, right?",
    "start": "882564",
    "end": "888972"
  },
  {
    "text": "So this could happen\njust as easily as the original\nmessage being sent out. So now in this case, our retry\nmechanism continues to work.",
    "start": "888972",
    "end": "897540"
  },
  {
    "text": "And after this retry interval\nand time TR2 is reached, the message gets resent,\nand then in this case",
    "start": "897540",
    "end": "903490"
  },
  {
    "text": "finally the message\nis actually received and we can go ahead and remove\nfrom the pending message list.",
    "start": "903490",
    "end": "909140"
  },
  {
    "text": "So this process,\nthe sender is just going to continually\nretry transmitting these messages until it\ngets an acknowledgment",
    "start": "909140",
    "end": "916650"
  },
  {
    "text": "from the receiver. Actually in practice,\nit's the case that the receiver will only\nretry a fixed number of times",
    "start": "916650",
    "end": "922089"
  },
  {
    "text": "because as we said, there\nare certain situations in which the network can\njust be simply unavailable.",
    "start": "922090",
    "end": "927579"
  },
  {
    "text": "Suppose there's no\nnetwork connection available to the\ntransmitter to the sender. Of course at some point it's\ngoing to make sense for it",
    "start": "927580",
    "end": "934170"
  },
  {
    "text": "to give up and stop trying. And then it will report\nan error to the user. The other thing to notice\nabout this protocol",
    "start": "934170",
    "end": "939759"
  },
  {
    "text": "that we've described here is\nthat the receiver has received two copies of this message.",
    "start": "939760",
    "end": "945320"
  },
  {
    "text": "So that seems a little\nbit problematic, right? If this is a message that says\nwithdraw $10,000 from your bank",
    "start": "945320",
    "end": "951110"
  },
  {
    "text": "account, we don't probably want\nto process that message twice, right? That might be problematic. So we're going to\naddress that issue",
    "start": "951110",
    "end": "961339"
  },
  {
    "text": "when we get to talking\nabout at most once delivery. But just bear in mind for\nnow that these duplicates",
    "start": "961340",
    "end": "966459"
  },
  {
    "text": "can occur. There is another subtlety\nwith this protocol that I've described here, though.",
    "start": "966460",
    "end": "972625"
  },
  {
    "text": "Does anybody see\nsomething that's a little bit suspicious\nabout this diagram that I've shown here, a little\nbit weird about the way I've",
    "start": "972625",
    "end": "978148"
  },
  {
    "text": "shown it? Yeah?",
    "start": "978148",
    "end": "983320"
  },
  {
    "text": "OK, right, good. So there's this\nquestion about, how are you going to set the retry\ninterval for these messages,",
    "start": "983320",
    "end": "989030"
  },
  {
    "text": "right? So what I've shown here is that\nthe retry interval is short, and the first time we sent and\nreceived this message, in fact",
    "start": "989030",
    "end": "994860"
  },
  {
    "text": "the time it took us to do\nthat appeared to be quite long on this diagram, right? And so in fact what would've\nhappened if we had done",
    "start": "994860",
    "end": "1002770"
  },
  {
    "text": "this is that the sender would\nhave retransmitted this message several times even though the\nreceiver had actually received",
    "start": "1002770",
    "end": "1008700"
  },
  {
    "text": "the message, and\nthe acknowledgment was on the way back\nto us correctly. It's just that we\ndidn't wait long enough",
    "start": "1008700",
    "end": "1015469"
  },
  {
    "text": "for that acknowledgment\nto come back to us. So, there's this\nquestion about, well, how are we going to pick this\ntimer interval so that it's",
    "start": "1015469",
    "end": "1020804"
  },
  {
    "text": "appropriate for the network\nthat we're running on. And this turns out to be kind of\nan interesting and challenging",
    "start": "1020804",
    "end": "1028630"
  },
  {
    "text": "problem. ",
    "start": "1028630",
    "end": "1036380"
  },
  {
    "text": "So there's this\nquestion about, how long do I wait before a retry? ",
    "start": "1036380",
    "end": "1049080"
  },
  {
    "text": "So a simple answer for\nhow long we should wait is, well, whatever the\nround-trip time on the network",
    "start": "1049080",
    "end": "1054480"
  },
  {
    "text": "is, however long it takes for\na message to reach the receiver and then for the knowledge meant\nto be sent back to the sender;",
    "start": "1054480",
    "end": "1060780"
  },
  {
    "text": "so we call that the\nround-trip time up or the RTT. So, we'd like to wait\nat least RTT, right?",
    "start": "1060780",
    "end": "1069389"
  },
  {
    "text": "But the problem is that\nRTT is this round-trip time is not necessarily going to\nbe constant over the whole",
    "start": "1069390",
    "end": "1076250"
  },
  {
    "text": "lifetime of the network. So let me show you what I mean. This is a plot of some\nround-trip time information",
    "start": "1076250",
    "end": "1083480"
  },
  {
    "text": "from a wide area wireless link. So these transit\ntimes are very long here over this link,\ntheir sort of order",
    "start": "1083480",
    "end": "1089990"
  },
  {
    "text": "of thousands of milliseconds. So the average transmission\ntime is 2.4 seconds here.",
    "start": "1089990",
    "end": "1098400"
  },
  {
    "text": "The standard deviation,\nwhich is a measure of the variance between\nthese different samples",
    "start": "1098400",
    "end": "1103760"
  },
  {
    "text": "is 1.5 seconds. So there's a lot of bouncing\naround of this signal. And so it's not as though\nthe round-trip time;",
    "start": "1103760",
    "end": "1113090"
  },
  {
    "text": "expecting the round-trip\ntime to simply be a single constant value\nisn't a very good idea. So if we want to\nset the timeout just",
    "start": "1113090",
    "end": "1119720"
  },
  {
    "text": "for RTT, that's\ngoing to cause us,",
    "start": "1119720",
    "end": "1125099"
  },
  {
    "text": "if you think about\nthis for a minute, if we set it just to be RTT,\nwhich is say for example may be",
    "start": "1125099",
    "end": "1130880"
  },
  {
    "text": "the average round-trip\ntime that we measured in a signal like this, well,\nsome significant proportion",
    "start": "1130880",
    "end": "1141130"
  },
  {
    "text": "of the time we're going to\nbe above the RTT, right, because just\npicking the average,",
    "start": "1141130",
    "end": "1147710"
  },
  {
    "text": "there's going to be many\nsamples that are above the RTT. So instead we want to\ndo RTT plus some slop",
    "start": "1147710",
    "end": "1154550"
  },
  {
    "text": "value, some\nadjustment factor that gives us a little bit of extra\nsort of leeway in how long",
    "start": "1154550",
    "end": "1162050"
  },
  {
    "text": "we wait. But of course we\ndon't want to wait too long because if\nwe wait too long then we're not going to actually\nretransmit the messages that",
    "start": "1162050",
    "end": "1168820"
  },
  {
    "text": "were in fact lost. OK, so let's look\nat how, so that's",
    "start": "1168820",
    "end": "1174070"
  },
  {
    "text": "sort of a simple\nintuitive argument for how we should do this. What I want to just do now\nis just quickly take you",
    "start": "1174070",
    "end": "1179270"
  },
  {
    "text": "through the way that these\nround-trip times are done, actually, these\nround-trip times are",
    "start": "1179270",
    "end": "1184760"
  },
  {
    "text": "estimated in the TCP protocol. And the way this is done is\nreally pretty straightforward.",
    "start": "1184760",
    "end": "1193030"
  },
  {
    "text": "The idea is that we want to\nestimate the average RTT.",
    "start": "1193030",
    "end": "1201690"
  },
  {
    "text": "And then we also\nwant to estimate the sort of variance which is\ngoing to be our slop number.",
    "start": "1201690",
    "end": "1207380"
  },
  {
    "text": "OK, so one way we could\ncompute the average RTT is to keep this sort\nof set of samples",
    "start": "1207380",
    "end": "1212484"
  },
  {
    "text": "of all the round-trip times. So I have maybe\n20 points, I have whatever it is, 20\npoints here that are",
    "start": "1212484",
    "end": "1217550"
  },
  {
    "text": "samples of the round-trip time. So I could take this\nset of 20 numbers and compute the average of them.",
    "start": "1217550",
    "end": "1222650"
  },
  {
    "text": "And then I could recompute\nthe average every time a new number comes in. The problem with\nthat is that I have",
    "start": "1222650",
    "end": "1227730"
  },
  {
    "text": "to keep this window of\nall the averages around. So instead, what\nwe want to do is to have some way\nof sort of updating",
    "start": "1227730",
    "end": "1233470"
  },
  {
    "text": "the average without\nhaving to keep all the previous values around. And there's a simple\ntechnique that's commonly",
    "start": "1233470",
    "end": "1239230"
  },
  {
    "text": "used in computer systems called\nan exponentially weighted moving average, which\nis a way that we",
    "start": "1239230",
    "end": "1244360"
  },
  {
    "text": "can keep track of this average\nwith just a single number. So this is the EWMA.",
    "start": "1244360",
    "end": "1249740"
  },
  {
    "text": "And what the EWMA does is\ngiven a set of samples,",
    "start": "1249740",
    "end": "1260110"
  },
  {
    "text": "say S1 up to some\nmost recent sample S gnu, what the EWMA\ndoes is incrementally",
    "start": "1260110",
    "end": "1270920"
  },
  {
    "text": "adjust the RTT according\nto the following formula. So, as the [new/gnu?] RTT is\ngoing to be equal to one minus",
    "start": "1270920",
    "end": "1277409"
  },
  {
    "text": "alpha, so these samples are\nsamples of round-trip times,",
    "start": "1277410",
    "end": "1283160"
  },
  {
    "text": "OK, like this number here. So, these are\nnumbers that we have observed over time as\nmessages have been transmitted",
    "start": "1283160",
    "end": "1288860"
  },
  {
    "text": "back and forth. We're going to take some\nnumber one minus alpha times S",
    "start": "1288860",
    "end": "1294280"
  },
  {
    "text": "gnu, our newly observed\nroundtrip time. And we're going to add\nto that some alpha times",
    "start": "1294280",
    "end": "1302049"
  },
  {
    "text": "the old round-trip time. OK, so what this\ndoes is basically",
    "start": "1302050",
    "end": "1310010"
  },
  {
    "text": "it computes the RTT as\nsome weighted combination of the old roundtrip time and\nthe newly observed roundtrip",
    "start": "1310010",
    "end": "1317921"
  },
  {
    "text": "time. And, if you think about this\nfor a minute, if we make alpha, so alpha in this case is going\nto be some number between zero",
    "start": "1317921",
    "end": "1326560"
  },
  {
    "text": "and one. And if you think about alpha\nbeing zero, if alpha is zero,",
    "start": "1326560",
    "end": "1332510"
  },
  {
    "text": "then the newly computed\nround-trip time is just equal to S gnu, right?",
    "start": "1332510",
    "end": "1337950"
  },
  {
    "text": "And, if alpha is one, then the\nnewly computed roundtrip time is just equal to whatever the\nold round-trip time was, right?",
    "start": "1337950",
    "end": "1344420"
  },
  {
    "text": "So, the new sample\nhas no effect. So, as we move very alpha\nbetween these two extremes,",
    "start": "1344420",
    "end": "1349620"
  },
  {
    "text": "we are going to weight the new\nroundtrip time more or less heavily. OK, so this is not going to\nperfectly compute the average",
    "start": "1349620",
    "end": "1357360"
  },
  {
    "text": "of the samples over time. But it's going to give\nus some estimate that sort of varies with time.",
    "start": "1357360",
    "end": "1362875"
  },
  {
    "text": "The other thing we\nsaid we wanted to do was compute what\nthe slop factor is. And the slop\nfactor, we just want",
    "start": "1362875",
    "end": "1369250"
  },
  {
    "start": "1363000",
    "end": "1622000"
  },
  {
    "text": "this to be some measure of\nthe variance of this signal. So in particular, what\nwe want it to be is,",
    "start": "1369250",
    "end": "1375070"
  },
  {
    "text": "I'm just going to push\nthis up so I can write, slop is going to be\nequal to some factor",
    "start": "1375070",
    "end": "1383220"
  },
  {
    "text": "beta times some variants\nof this, some number",
    "start": "1383220",
    "end": "1388740"
  },
  {
    "text": "that the variance. And what I mean by\nvariance is simply the difference between the\npredicted and actual round-trip",
    "start": "1388740",
    "end": "1402085"
  },
  {
    "text": "times.  So if our formula says that\nthis round-trip time, given",
    "start": "1402085",
    "end": "1410090"
  },
  {
    "text": "a sample, the round-trip\ntime should be 10 ms.",
    "start": "1410090",
    "end": "1415990"
  },
  {
    "text": "And the next sample\ncomes in and it says the actual\nround-trip time was 20 ms. Then the variance, we would say\nthat sort of this deviation,",
    "start": "1415990",
    "end": "1424880"
  },
  {
    "text": "the difference between those\ntwo things would be 10 ms. So let's see how this works. I'll show you now the\npseudocode for how this actually",
    "start": "1424880",
    "end": "1431440"
  },
  {
    "text": "works in the Internet. And it should be pretty\nclear what's going on. So what we're going\nto do is we are going to keep a set of\nvariables, one of which",
    "start": "1431440",
    "end": "1437900"
  },
  {
    "text": "is called SRTT. So this is almost exactly\nwhat the TCP protocol does.",
    "start": "1437900",
    "end": "1443510"
  },
  {
    "text": "So we're going to have SRTT,\nwhich is the current roundtrip time estimate. And then we're going to have\nthis thing we're going to call",
    "start": "1443510",
    "end": "1450361"
  },
  {
    "text": "RTT [DEV?], which\nis the deviation, the current estimate of sort of\nthe variance of this round-trip",
    "start": "1450361",
    "end": "1455790"
  },
  {
    "text": "time. And we're going to\ninitialize these two numbers to be something\nthat seems reasonable. We might say the\nround-trip time is 100 ms,",
    "start": "1455790",
    "end": "1462490"
  },
  {
    "text": "and this RTT DEV is 50 ms. And now what we're\ngoing to do is",
    "start": "1462490",
    "end": "1467870"
  },
  {
    "text": "every time a new one of these\nsamples of the round-trip time comes in, we're going to\ncall this calc RTT function.",
    "start": "1467870",
    "end": "1473440"
  },
  {
    "text": "What the calc RTT\nfunction is going to do isn't going\nto update the old,",
    "start": "1473440",
    "end": "1478720"
  },
  {
    "text": "update the round-trip\ntime using this formula that we've seen here.",
    "start": "1478720",
    "end": "1483830"
  },
  {
    "text": "And in the case of TCP, people\nhave sort of experimented with different values, and sort\nof the number that is typically",
    "start": "1483830",
    "end": "1490799"
  },
  {
    "text": "used is that a number\nthat is commonly used is that sort of used alpha, you\nset alpha to be seven eighths.",
    "start": "1490800",
    "end": "1499260"
  },
  {
    "text": "So that means that you\nsort of add in one eighth of the new number, and use\nseven eighths of the old number.",
    "start": "1499260",
    "end": "1505590"
  },
  {
    "text": "So, a new number\nthat varies a lot isn't going to change the\noverall round-trip time,",
    "start": "1505590",
    "end": "1512010"
  },
  {
    "text": "estimate of the round-trip\ntime terribly dramatically. And we're going to compute the\ndeviation as I've shown here.",
    "start": "1512010",
    "end": "1517680"
  },
  {
    "text": "We're going to take the\nabsolute value of it. And then, we're going to\nkeep some running estimate",
    "start": "1517680",
    "end": "1522750"
  },
  {
    "text": "of the round-trip\ntime again using one of these sort of\nexponentially weighted things. So in this case\nwe're going to wait",
    "start": "1522750",
    "end": "1528110"
  },
  {
    "text": "with this setting, the\nvalue of the weight here to three quarters.",
    "start": "1528110",
    "end": "1533620"
  },
  {
    "text": "OK, so that's a simple way to\ncompute the round-trip time. And now, given the computation\nof the round-trip time, what we need to do is to\ncompute the timeout value",
    "start": "1533620",
    "end": "1540559"
  },
  {
    "text": "that we should use. So what we said is the\ntimeout value you want to use is RTT plus some slop.",
    "start": "1540560",
    "end": "1547110"
  },
  {
    "text": "And, in the case of TCP,\na commonly used slop value might be four times the\nestimate of the deviation.",
    "start": "1547110",
    "end": "1553980"
  },
  {
    "text": "See, the idea is\nthat we want the slop value to be larger if the\nround-trip time varies more. If the round-trip time\nis practically constant,",
    "start": "1553980",
    "end": "1560980"
  },
  {
    "text": "we don't want it to vary much. We are sort of happy; if the\nround-trip time is practically",
    "start": "1560980",
    "end": "1569720"
  },
  {
    "text": "constant, then the timeout\nshouldn't be very much longer than that round-trip\ntime because that's",
    "start": "1569720",
    "end": "1576130"
  },
  {
    "text": "going to suggest we are\ngoing to be waiting longer than we need to time out. If the round-trip time\nvaries very dramatically,",
    "start": "1576130",
    "end": "1581481"
  },
  {
    "text": "we need to wait a relatively\nlong time in order to be sure that\nthe message in fact",
    "start": "1581482",
    "end": "1586549"
  },
  {
    "text": "has been lost as\nopposed to simply taking a long time for\nthe acknowledgment to get back to us.",
    "start": "1586550",
    "end": "1596550"
  },
  {
    "text": "OK, so what we've\nseen so far now is we've seen how we can build\nup at least once semantics",
    "start": "1596550",
    "end": "1606050"
  },
  {
    "text": "using acknowledgments. And we talked about how we can\ngo ahead and set these timers in order to allow us to\ncalculate the round-trip time",
    "start": "1606050",
    "end": "1614370"
  },
  {
    "text": "for a message. And these timers are going to\nallow us to sort of decide when",
    "start": "1614370",
    "end": "1619780"
  },
  {
    "text": "we should retransmit a message. But we also saw how we have\na little bit of a problem",
    "start": "1619780",
    "end": "1626290"
  },
  {
    "start": "1622000",
    "end": "1920000"
  },
  {
    "text": "in the at least once protocol. And the problem is that we\ncan generate duplicates.",
    "start": "1626290",
    "end": "1632990"
  },
  {
    "text": "So in order to\navoid duplicates, we need to introduce this\nnotion of at most once. ",
    "start": "1632990",
    "end": "1639960"
  },
  {
    "text": "OK, so the idea\nwith at most once is that we want to\nsuppress duplicates. ",
    "start": "1639960",
    "end": "1655510"
  },
  {
    "text": "And duplicate suppression turns\nout it works a lot like the way that acknowledgments\nwork on the receiver side",
    "start": "1655510",
    "end": "1664030"
  },
  {
    "text": "or on the sender side. So on the receiver\nside we're going to keep a table of\nall of the nonces,",
    "start": "1664030",
    "end": "1669260"
  },
  {
    "text": "of all the messages\nthat we've heard, and we're only going to process\na message when we haven't",
    "start": "1669260",
    "end": "1676260"
  },
  {
    "text": "already processed that message. And we're going to tell whether\nwe've already processed it by looking in this\ntable of nonces.",
    "start": "1676260",
    "end": "1681790"
  },
  {
    "text": "So let's look at an example. So here we are. This is sort of showing\nyou the protocol,",
    "start": "1681790",
    "end": "1686870"
  },
  {
    "text": "a stage in the at\nleast once protocol that we were in before. So we've already\nsent message one.",
    "start": "1686870",
    "end": "1692600"
  },
  {
    "text": "It's been successfully\nacknowledged. And you notice that we\nhave this table of nonces,",
    "start": "1692600",
    "end": "1698100"
  },
  {
    "text": "received messages, that\nis that the receiver. And in this table, we\nhave received this message",
    "start": "1698100",
    "end": "1704150"
  },
  {
    "text": "with nonce X. OK, so now when\nthe sender starts",
    "start": "1704150",
    "end": "1710260"
  },
  {
    "text": "to decide to send a message two\nwith nonce Y, it sends it out. The message doesn't arrive.",
    "start": "1710260",
    "end": "1716270"
  },
  {
    "text": "We time out. We retry. And this time the message\nis successfully received.",
    "start": "1716270",
    "end": "1723409"
  },
  {
    "text": "So what we do is we go ahead and\nadd the nonce for this message into the table on the receiver. ",
    "start": "1723410",
    "end": "1729957"
  },
  {
    "text": "And then the receiver goes ahead\nand sends the acknowledgment. But the acknowledgment is lost.",
    "start": "1729957",
    "end": "1735050"
  },
  {
    "text": "Again, the sender times\nout, resends the message. And this time, when the\nreceiver receives this message,",
    "start": "1735050",
    "end": "1742300"
  },
  {
    "text": "it's going to look it up in\nthe receive messages table. And it's going to see\nthat this is a duplicate.",
    "start": "1742300",
    "end": "1747610"
  },
  {
    "text": "It already has seen a\nmessage with nonce Y. So, it's not going\nto process this. But it needs to\nstill be sure that it",
    "start": "1747610",
    "end": "1753154"
  },
  {
    "text": "sends the acknowledgment\nof the message. So it doesn't\nactually do anything. It doesn't actually\nprocess this message. It doesn't pass it\nup to the application",
    "start": "1753154",
    "end": "1759770"
  },
  {
    "text": "so the application\ncan look at it. But it still sends\nthe acknowledgment so that the receiver knows that\nthe message has been received.",
    "start": "1759770",
    "end": "1765990"
  },
  {
    "text": " OK, so this is fine.",
    "start": "1765990",
    "end": "1771512"
  },
  {
    "text": "But if you think about\nthis for a second, this table of received\nmessages is now just going to be kind of\ngrowing without bound, right?",
    "start": "1771512",
    "end": "1778834"
  },
  {
    "text": "Because every time\nwe receive a message, we're going to add a new message\nto this table of nonces, right?",
    "start": "1778834",
    "end": "1784780"
  },
  {
    "text": "And this is a problem. I mean if we're sending\nthousands of messages out over the network,\nthen this table",
    "start": "1784780",
    "end": "1791309"
  },
  {
    "text": "is going to become\nvery, very large. So what are we going\nto do about it? Well, we're going to do sort\nof again the obvious thing.",
    "start": "1791310",
    "end": "1800780"
  },
  {
    "text": "We're going to have\nthe sender send some additional\ninformation that lets the receiver know which messages\nthe receiver has actually",
    "start": "1800780",
    "end": "1808679"
  },
  {
    "text": "heard. So a common way that\nthis might be done is to simply, along\nwith each message that",
    "start": "1808680",
    "end": "1814200"
  },
  {
    "text": "gets sent, piggyback a\nlittle bit of information, for example that contains\nthe list of messages",
    "start": "1814200",
    "end": "1819630"
  },
  {
    "text": "that the sender knows that the\nreceiver has actually received.",
    "start": "1819630",
    "end": "1824780"
  },
  {
    "text": "Right, so when the sender\nreceives an acknowledgment for a message, it\nknows that it's never",
    "start": "1824780",
    "end": "1830190"
  },
  {
    "text": "going to have to\nrequest, never going to resend the message anymore. And so there's no\nreason for the receiver",
    "start": "1830190",
    "end": "1836640"
  },
  {
    "text": "to keep that message in its\ntable of received messages because it's never going\nto be asked to acknowledge that message again.",
    "start": "1836640",
    "end": "1842520"
  },
  {
    "text": "So we can attach a little bit\nof information to the messages that we send that indicates\nsort of which messages we",
    "start": "1842520",
    "end": "1848550"
  },
  {
    "text": "have definitely completed\nup to this point. OK, so this is a\nsimple way in which",
    "start": "1848550",
    "end": "1858360"
  },
  {
    "text": "we can sort of eliminate\nthese messages that are hanging around. These messages that\nare sort of left",
    "start": "1858360",
    "end": "1865080"
  },
  {
    "text": "in our table of\nreceived messages are sometimes referred\nto as tombstones,",
    "start": "1865080",
    "end": "1872370"
  },
  {
    "text": "which is kind of a funny name. But the idea is that there\nare these messages that",
    "start": "1872370",
    "end": "1877700"
  },
  {
    "text": "are kind of, that\nare sort of remnants of a dead message that's\nhanging around that we're never going to need to process again.",
    "start": "1877700",
    "end": "1883961"
  },
  {
    "text": "But it might just be\nsitting in this table. And we are able to get rid\nof some of the tombstones by piggybacking this information\non to the ends of the messages",
    "start": "1883961",
    "end": "1891340"
  },
  {
    "text": "that we retransmit. But you have to realize\nthat there's always going to be a few messages left\nover in this receive messages",
    "start": "1891340",
    "end": "1898450"
  },
  {
    "text": "table because if we use\nthis piggybacking technique because we are piggybacking\na list of done messages",
    "start": "1898450",
    "end": "1905940"
  },
  {
    "text": "onto messages that are sent. So if the sender never\nsends any more messages,",
    "start": "1905940",
    "end": "1910946"
  },
  {
    "text": "then the receiver\nis never going to be able to eliminate\nany of the tombstones from its list of\nreceived messages.",
    "start": "1910947",
    "end": "1916275"
  },
  {
    "text": " OK, so now what we've\nseen is a simple way",
    "start": "1916275",
    "end": "1924850"
  },
  {
    "start": "1920000",
    "end": "1977000"
  },
  {
    "text": "to provide this sort of notion\nof at least once and at most once delivery.",
    "start": "1924850",
    "end": "1931140"
  },
  {
    "text": "So as I said before,\ntaken together,",
    "start": "1931140",
    "end": "1936430"
  },
  {
    "text": "this is sometimes called\nan exactly once protocol.",
    "start": "1936430",
    "end": "1943020"
  },
  {
    "text": "And this variant of this\nprotocol that we've seen is called a lockstep protocol. OK, so it's called lockstep\nbecause the sender and receiver",
    "start": "1943020",
    "end": "1959799"
  },
  {
    "text": "are operating in lockstep. The sender sends a\nmessage, and then it waits for the receiver to send\nin a knowledge meant before it",
    "start": "1959800",
    "end": "1965429"
  },
  {
    "text": "sends any additional messages. Right, so we are always sort\nof sitting here waiting for,",
    "start": "1965430",
    "end": "1971660"
  },
  {
    "text": "the sender is basically\nspending a lot of time idle waiting to receive\nan acknowledgment.",
    "start": "1971660",
    "end": "1977090"
  },
  {
    "start": "1977000",
    "end": "2105000"
  },
  {
    "text": "If you think about\nwhat this means in terms of the\nthroughput of the network,",
    "start": "1977090",
    "end": "1988220"
  },
  {
    "text": "it's kind of a limitation. So let's do a\nsimple calculation. ",
    "start": "1988220",
    "end": "1996210"
  },
  {
    "text": "So suppose that we said that\npackets, the segments that are being sent in this network,\nthese things that are being",
    "start": "1996210",
    "end": "2003140"
  },
  {
    "text": "sent back and forth\nin being acknowledged are, say, 512 bytes large. ",
    "start": "2003140",
    "end": "2010659"
  },
  {
    "text": "So, suppose we\nsaid that it takes the round-trip\ntime in the network is, say, 100 ms, which\nmight be a common roundtrip",
    "start": "2010660",
    "end": "2017200"
  },
  {
    "text": "time in a traditional\nnetwork, well, the throughput of this network is going to\nbe, the maximum throughput",
    "start": "2017200",
    "end": "2024269"
  },
  {
    "text": "of this network is going to\nbe limited by this number, 512 bytes divided by 100 ms. The round-trip time is 100 ms.",
    "start": "2024270",
    "end": "2031659"
  },
  {
    "text": "And so we have to wait 100\nms between each transmission of messages. And the sort of\nsize of a message",
    "start": "2031660",
    "end": "2038440"
  },
  {
    "text": "is, if the message is\n512 bytes, then we're going to be able to send ten\nof these messages per second.",
    "start": "2038440",
    "end": "2044419"
  },
  {
    "text": "So we're going to send sort of\napproximately 50 kb per second.",
    "start": "2044420",
    "end": "2050070"
  },
  {
    "text": "OK, that's not very fast, right? If we want to send,\nmodern networks",
    "start": "2050070",
    "end": "2055179"
  },
  {
    "text": "are often capable of sending\ntens or hundreds of megabytes, megabits a second. So we would like to be able\nto make this number higher.",
    "start": "2055179",
    "end": "2063289"
  },
  {
    "text": " So this is a bit of a\nperformance problem.",
    "start": "2063290",
    "end": "2068599"
  },
  {
    "start": "2068600",
    "end": "2074753"
  },
  {
    "text": "And the way we're\ngoing to do this is by making it so\nthat the sender doesn't wait to receive its\nacknowledgments before it goes",
    "start": "2074754",
    "end": "2081975"
  },
  {
    "text": "and sends the next message. So the sender is going to\nstart sending the next message before it's even heard\nthe first message even",
    "start": "2081975",
    "end": "2087790"
  },
  {
    "text": "being acknowledged. So we're going to have multiple\noverlapping transmissions, OK?",
    "start": "2087790",
    "end": "2102970"
  },
  {
    "text": " So let's see a really simple\nexample of how this works.",
    "start": "2102970",
    "end": "2111510"
  },
  {
    "start": "2105000",
    "end": "2173000"
  },
  {
    "text": "So the idea is now\nthat the sender, it's going to send a message. And then before it's even\nheard the knowledge meant",
    "start": "2111510",
    "end": "2119184"
  },
  {
    "text": "from the receiver, it's\ngoing to go ahead and start sending the message. At the same time,\nthe receiver can go ahead and\nacknowledge the messages",
    "start": "2119185",
    "end": "2125340"
  },
  {
    "text": "that have already been sent. So you sort of see\nwhat's happening here is that as time passes, the\nadditional messages are being",
    "start": "2125340",
    "end": "2131130"
  },
  {
    "text": "sent, and the acknowledgment\nfor those messages start being sent as\nsoon as possible. So we have a whole\nbunch of messages",
    "start": "2131130",
    "end": "2136610"
  },
  {
    "text": "that are kind of flying back\nand forth within this network. And I've only shown the sort of\nyellow, red, and blue messages",
    "start": "2136610",
    "end": "2144276"
  },
  {
    "text": "actually being\nacknowledged here. The white messages aren't\nbeing acknowledged. But of course there would be\nacknowledgments [pulling?]",
    "start": "2144276",
    "end": "2149401"
  },
  {
    "text": "for those as well. So this seems really good. Right now we can send\nmessages basically",
    "start": "2149401",
    "end": "2155920"
  },
  {
    "text": "as fast as we can cram\nthem onto the network. And we sort of don't have to\nwait for the acknowledgments",
    "start": "2155920",
    "end": "2162725"
  },
  {
    "text": "to come back anymore.  So in effect, what\nwe've said is now",
    "start": "2162725",
    "end": "2168471"
  },
  {
    "text": "the throughput is\nsimply constrained by how fast we can cram\nthe bytes onto the network. But this is a little bit of\nan oversimplification, right,",
    "start": "2168471",
    "end": "2176870"
  },
  {
    "start": "2173000",
    "end": "2321000"
  },
  {
    "text": "because this is sort\nof ignoring what it is that the receiver, suppose\nthe sender is just sending data",
    "start": "2176870",
    "end": "2182730"
  },
  {
    "text": "as fast as it can. Well the receiver has\nto receive that data, has to do something with it. It has to process it. It has to take some\naction on it, right?",
    "start": "2182730",
    "end": "2189980"
  },
  {
    "text": "And so it's very possible\nor very likely in fact that if we cram data at\nthe receiver in this way,",
    "start": "2189980",
    "end": "2196089"
  },
  {
    "text": "that the receiver is going\nto become overloaded, right? The receiver has\nsome limited amount",
    "start": "2196089",
    "end": "2201339"
  },
  {
    "text": "of data that it can buffer\nor that it can hold on to. And we are going to\noverflow those buffers.",
    "start": "2201340",
    "end": "2207579"
  },
  {
    "text": "And we're going to\ncreate a problem. So what we want to do\nis to have some way to allow the receiver\nto kind of throttle",
    "start": "2207580",
    "end": "2213730"
  },
  {
    "text": "the transmission of the\nsender to ask the sender to back off a little bit,\nand not send so aggressively. ",
    "start": "2213730",
    "end": "2222570"
  },
  {
    "text": "So we call this -- -- the technique that we're\ngoing to use is called flow",
    "start": "2222570",
    "end": "2230510"
  },
  {
    "text": "control. And it's basically just a\nway in which the receiver can tell the sender\nwhat great it",
    "start": "2230510",
    "end": "2237140"
  },
  {
    "text": "would like to receive data at. OK, so this is going to be sort\nof receiver driven feedback.",
    "start": "2237140",
    "end": "2250105"
  },
  {
    "start": "2250105",
    "end": "2255940"
  },
  {
    "text": "And we're going to\nlook at two techniques basically for doing this.",
    "start": "2255940",
    "end": "2261600"
  },
  {
    "text": "The first one is a technique\ncalled fixed windows. And the other technique\nis a technique",
    "start": "2261600",
    "end": "2270140"
  },
  {
    "text": "called sliding windows. OK, and what we\nmean by window here:",
    "start": "2270140",
    "end": "2278920"
  },
  {
    "text": "a window is simply the size of\nthe data that the receiver can",
    "start": "2278920",
    "end": "2286970"
  },
  {
    "text": "accept, the number of messages\nthat the receiver can accept -- ",
    "start": "2286970",
    "end": "2296609"
  },
  {
    "text": "-- can accept at one time.",
    "start": "2296610",
    "end": "2304440"
  },
  {
    "text": " So the idea is we're going to\nsend a window's worth of data",
    "start": "2304440",
    "end": "2310840"
  },
  {
    "text": "all continuously. And then once the\nreceiver says that it's done processing\nthat window, we're",
    "start": "2310840",
    "end": "2316280"
  },
  {
    "text": "going to be able to go ahead\nand send a next window to it.",
    "start": "2316280",
    "end": "2321290"
  },
  {
    "start": "2321000",
    "end": "2500000"
  },
  {
    "text": "So this first scheme that\nwe're going to look at is called the fixed\nwindows scheme.",
    "start": "2321290",
    "end": "2328630"
  },
  {
    "text": "And the idea is really\nvery straightforward. The sender and the receiver at\nthe beginning of communication",
    "start": "2328630",
    "end": "2334260"
  },
  {
    "text": "can negotiate. They're going to\nexchange some information about what the window size is. So the sender is\ngoing to request",
    "start": "2334260",
    "end": "2341650"
  },
  {
    "text": "the connection,\nthe open, and then the receiver is going to say,\nfor example, OK, let's go ahead",
    "start": "2341650",
    "end": "2347650"
  },
  {
    "text": "and start having this\nconversation, and by the way, my window size is four segments.",
    "start": "2347650",
    "end": "2353230"
  },
  {
    "text": "So now, the sender can send\nfour segments all at once, and the receiver can go\nahead and acknowledge them.",
    "start": "2353230",
    "end": "2358620"
  },
  {
    "text": "So we can have four segments\nthat are sort of in flight at any one time. And then after those messages\nhave all been acknowledged,",
    "start": "2358620",
    "end": "2366790"
  },
  {
    "text": "the receiver is going to have to\nsort of chew on those messages and process them for a little\nwhile, during which time",
    "start": "2366790",
    "end": "2376380"
  },
  {
    "text": "basically the sender\nis simply waiting. It's simply sitting\nthere waiting. But notice that we\nwere at least able to,",
    "start": "2376380",
    "end": "2383330"
  },
  {
    "text": "the sender was able to do\na little bit of extra work. It was able to send all\nfour of these messages to simultaneously.",
    "start": "2383330",
    "end": "2389700"
  },
  {
    "text": "And then when the\nreceiver has finished processing these\nmessages, it's going to go ahead and ask for some\nadditional set of messages",
    "start": "2389700",
    "end": "2396310"
  },
  {
    "text": "to be transmitted\nout over the network. So notice that there is\na little assumption here",
    "start": "2396310",
    "end": "2401600"
  },
  {
    "text": "which is that acknowledgments\nare being sent before the sort of\nreceiver has actually",
    "start": "2401600",
    "end": "2407530"
  },
  {
    "text": "finished processing\nthe messages. So the protocol that\nI'm showing here is that the receiver\nreceives a message,",
    "start": "2407530",
    "end": "2412940"
  },
  {
    "text": "and it immediately\nacknowledges it without, even though it hasn't\nactually, the application",
    "start": "2412940",
    "end": "2418390"
  },
  {
    "text": "hasn't necessarily\nprocessed this message yet. And the reason we want to\ndo this is that application process, remember it's\nalready hard enough for us",
    "start": "2418390",
    "end": "2425470"
  },
  {
    "text": "to estimate this round-trip\ntime using this EWMA approach.",
    "start": "2425470",
    "end": "2431240"
  },
  {
    "text": "And so, trying to\nsort of also estimate how long it would take the\napplication to process the data",
    "start": "2431240",
    "end": "2436780"
  },
  {
    "text": "would further complicate this\nprocess of setting timers. So we usually just sending\nknowledge meant right away.",
    "start": "2436780",
    "end": "2443030"
  },
  {
    "text": "OK, so this is the fixed\nsize windows scheme. And it's nice\nbecause now basically we've set this thing up so that\nthe sender can sort of send",
    "start": "2443030",
    "end": "2452390"
  },
  {
    "text": "more messages without waiting\nfor the acknowledgments. But the receiver has a way\nthat it can kind of throttle",
    "start": "2452391",
    "end": "2457597"
  },
  {
    "text": "how fast the sender sends. It knows that it only has\nbuffers for four messages. So it says my\nwindow size is four.",
    "start": "2457597",
    "end": "2464230"
  },
  {
    "text": "But we would like to do a\nlittle bit better, right? In particular, we would like\nto avoid this sort of situation",
    "start": "2464230",
    "end": "2469670"
  },
  {
    "text": "where, both so in this case we\nsort of have long periods where",
    "start": "2469670",
    "end": "2475170"
  },
  {
    "text": "the network is kind\nof sitting idle, where we are not using available\nbandwidth within the network because we're sort of waiting.",
    "start": "2475170",
    "end": "2482339"
  },
  {
    "text": "The sender has,\nperhaps, data to send, but it hasn't received\nthe message to send,",
    "start": "2482340",
    "end": "2487760"
  },
  {
    "text": "the receiver can\naccept more messages. And the receiver may be has\nprocessed some of the messages",
    "start": "2487760",
    "end": "2493380"
  },
  {
    "text": "that it's received, but it\nhasn't yet sent this message; it hasn't yet asked the\nsender to go ahead and send",
    "start": "2493380",
    "end": "2498920"
  },
  {
    "text": "any additional data. So the way that we're going to\nfix this is to use something",
    "start": "2498920",
    "end": "2503990"
  },
  {
    "start": "2500000",
    "end": "2621000"
  },
  {
    "text": "called the sliding\nwindow technique. And the idea is that when\nthe receiver, rather than",
    "start": "2503990",
    "end": "2509690"
  },
  {
    "text": "the receiver waiting until it\nis processed the whole window's worth of data, when\nthe receiver processes",
    "start": "2509690",
    "end": "2517510"
  },
  {
    "text": "each message within its window,\nso if this window is more messages big, once it's\nprocessed the first message,",
    "start": "2517510",
    "end": "2523180"
  },
  {
    "text": "it's going to go ahead and\nindicate that to the sender so that the sender can\nthen go ahead and send additional messages.",
    "start": "2523180",
    "end": "2529710"
  },
  {
    "text": "So rather than sort of\ngetting four new messages at a time, what\nwe're going to do is we're going to send\nour first four messages.",
    "start": "2529710",
    "end": "2536530"
  },
  {
    "text": "And then we're going to just\nsend one additional message at a time. So that's why we say the window\nis sliding, because we're",
    "start": "2536530",
    "end": "2541600"
  },
  {
    "text": "going to sort of\nallow the sender to send an additional\nmessage whenever it is that the receiver is\nfinished processing just one",
    "start": "2541600",
    "end": "2548120"
  },
  {
    "text": "message. And the way we are\ngoing to do this again, we're going to initially\nnegotiate a window size.",
    "start": "2548120",
    "end": "2555540"
  },
  {
    "text": "And then when the\nsender starts sending, it's going to do the same thing. It's going to send all\nfour of these messages.",
    "start": "2555540",
    "end": "2561789"
  },
  {
    "text": "I've sort of halted this\nanimation in the middle of it so that I can show you\nan intermediate step. But what would really\nbe happening here",
    "start": "2561790",
    "end": "2567430"
  },
  {
    "text": "is the sender would sort of\nsend all the messages that were in the window,\nand then the receiver would begin processing them.",
    "start": "2567430",
    "end": "2574070"
  },
  {
    "text": "So the receiver begins\nprocessing the first message. So suppose it finishes\nprocessing segment one",
    "start": "2574070",
    "end": "2582180"
  },
  {
    "text": "before it receives this\nsegment two from the sender.",
    "start": "2582180",
    "end": "2588099"
  },
  {
    "text": "So now what it can do is in its\nacknowledgment for segment two, it can piggyback\nagain using this idea,",
    "start": "2588100",
    "end": "2593900"
  },
  {
    "text": "it can stick a little\nbit of information on to the knowledge meant\nthat says, oh, and by the way,",
    "start": "2593900",
    "end": "2599950"
  },
  {
    "text": "I have finished processing\none of these messages. You can go ahead and send\none more additional message. You can slide the\nwindow by one, OK?",
    "start": "2599950",
    "end": "2609164"
  },
  {
    "text": "So I'm going to hit the\nnext step of this animation. And it's going to\nzip by really fast.",
    "start": "2609164",
    "end": "2614620"
  },
  {
    "text": "I'll explain what's\nhappening, but don't try and worry too much about\nexactly following the details.",
    "start": "2614620",
    "end": "2622309"
  },
  {
    "text": "OK, so now what happens is that\nthe receiver sort of continues",
    "start": "2622310",
    "end": "2628960"
  },
  {
    "text": "to process these\nmessages as it arrives, and then it continues\nto piggyback",
    "start": "2628960",
    "end": "2634250"
  },
  {
    "text": "this information about the fact\nthat it has finished sending some messages onto\nthe acknowledgments,",
    "start": "2634250",
    "end": "2639956"
  },
  {
    "text": "finished processing\nsome messages onto the acknowledgments. If the receiver doesn't have\nany acknowledgments to send,",
    "start": "2639956",
    "end": "2646420"
  },
  {
    "text": "which is the case for\nthese last two messages that it sent out here that\nI've labeled send more, it may need to send\nthese sort of slide",
    "start": "2646420",
    "end": "2653680"
  },
  {
    "text": "the window messages out by\nitself without acknowledgment. So here it sends a couple\nof additional messages",
    "start": "2653680",
    "end": "2658970"
  },
  {
    "text": "that say go ahead and\nsend me some more data. OK so in this way\nnow what we've done",
    "start": "2658970",
    "end": "2664580"
  },
  {
    "text": "is we've managed to make\nit so that the sender can",
    "start": "2664580",
    "end": "2669640"
  },
  {
    "text": "send additional\ninformation before all of the sort of messages\nin the initial window",
    "start": "2669640",
    "end": "2675690"
  },
  {
    "text": "were processed by the receiver. So you see that before\nthe sender sends,",
    "start": "2675690",
    "end": "2682770"
  },
  {
    "text": "before the receiver\nactually requests, sends a message requesting a\nwhole new window worth of data,",
    "start": "2682770",
    "end": "2688670"
  },
  {
    "text": "so you see now that some of\nthe sort of, go ahead and send more messages from\nthe receiver arrive",
    "start": "2688670",
    "end": "2695060"
  },
  {
    "text": "at the sender after the time\nthat the sender starts sending",
    "start": "2695060",
    "end": "2702420"
  },
  {
    "text": "messages, this fifth and\nsixth message to go ahead and processed. So we've managed\nto sort of increase",
    "start": "2702420",
    "end": "2707632"
  },
  {
    "text": "the amount of\nconcurrent processing that we can do in this network. But there still\nare periods where",
    "start": "2707632",
    "end": "2714490"
  },
  {
    "text": "the network is\nsort of idle where the sender and receiver are\nsort of not transmitting data.",
    "start": "2714490",
    "end": "2720510"
  },
  {
    "text": "So we haven't done quite as good\na job as maybe we would like. And the reason we haven't done\nquite as good a job as maybe we",
    "start": "2720510",
    "end": "2726620"
  },
  {
    "text": "would like is when\nthe receiver, so",
    "start": "2726620",
    "end": "2732100"
  },
  {
    "text": "the property that we\nwould like to enforce is that when the receiver\nsays go ahead and send me",
    "start": "2732100",
    "end": "2738730"
  },
  {
    "text": "a new message. When the receiver says\nslide the window by one, by the time that the\nnext message to process",
    "start": "2738730",
    "end": "2745190"
  },
  {
    "text": "arrives from the sender,\nwe would like the receiver to not have reached the\npoint where it's idle,",
    "start": "2745190",
    "end": "2753200"
  },
  {
    "text": "where it has to wait. So we'd like the\nreceivers buffered to be big enough such that by\nthe time its request for more",
    "start": "2753200",
    "end": "2759200"
  },
  {
    "text": "data reaches the sender,\nand by the time the sender's",
    "start": "2759200",
    "end": "2764589"
  },
  {
    "text": "response comes back, we would\nlike the receiver to still have some data to process,\nwhereas what's happened here",
    "start": "2764590",
    "end": "2770280"
  },
  {
    "text": "is that the receiver\nfinished processing all four messages in its buffer before\nthis next message came back",
    "start": "2770280",
    "end": "2778310"
  },
  {
    "text": "with additional data\nfor the receiver to process from the sender. Right, so basically the problem\nwas that the receiver's buffer",
    "start": "2778310",
    "end": "2784320"
  },
  {
    "text": "wasn't quite large enough for\nit to be able to continuously process data; it didn't\nhave quite enough data",
    "start": "2784320",
    "end": "2794762"
  },
  {
    "text": "for it to be able to\ncontinuously process while it waited for\nthe additional data to arrive from the sender.",
    "start": "2794762",
    "end": "2803829"
  },
  {
    "start": "2803000",
    "end": "3021000"
  },
  {
    "text": "What this suggests\nthat we want is to set this buffer size, to\nset the size of the window",
    "start": "2803830",
    "end": "2812020"
  },
  {
    "text": "to be the appropriate size\nin order for the receiver",
    "start": "2812020",
    "end": "2817140"
  },
  {
    "text": "to be able to sort of\ncontinuously process information if at all possible.",
    "start": "2817140",
    "end": "2824246"
  },
  {
    "text": "So there's this question about,\nhow do we pick the window size? ",
    "start": "2824246",
    "end": "2829700"
  },
  {
    "text": "So let's assume, so\nthe problem we have is that small windows\nimply underutilization",
    "start": "2829700",
    "end": "2842069"
  },
  {
    "text": "of the network,\nOK, because we have both the sender and receiver\nsort of sitting, waiting.",
    "start": "2842070",
    "end": "2848849"
  },
  {
    "text": "There's times when there's no\ndata that's being transferred across the network. ",
    "start": "2848850",
    "end": "2855510"
  },
  {
    "text": "So the question is then, how\nbig should we make the window? ",
    "start": "2855510",
    "end": "2864850"
  },
  {
    "text": "And what we said is we want the\nwindow size to be greater than",
    "start": "2864850",
    "end": "2871340"
  },
  {
    "text": "the amount of time -- ",
    "start": "2871340",
    "end": "2878050"
  },
  {
    "text": "We want it to be long enough\nso that the receiver which, say for example, if the\nreceiver can processed",
    "start": "2878050",
    "end": "2884450"
  },
  {
    "text": "some number of messages,\nrate messages per second, OK, the receiver can\nprocess this many messages,",
    "start": "2884450",
    "end": "2891360"
  },
  {
    "text": "we want its buffer\nto be large enough that if it processes that\nmany messages per second,",
    "start": "2891360",
    "end": "2899910"
  },
  {
    "text": "that the amount of time for\nadditional messages for it to process, that it\nwill still have messages",
    "start": "2899910",
    "end": "2905430"
  },
  {
    "text": "to process by the time\nadditional messages arrive from the sender. So the amount of time it\ntakes for additional messages",
    "start": "2905430",
    "end": "2915320"
  },
  {
    "text": "to arrive from the\nsender from the time that this guy first since this\nOK to send more message, right,",
    "start": "2915320",
    "end": "2921880"
  },
  {
    "text": "is one round-trip\ntime of the network. So it takes one round-trip time\nof the network for the receiver",
    "start": "2921880",
    "end": "2928650"
  },
  {
    "text": "to receive additional messages\nto process from the sender, and a number of messages\nthat will process",
    "start": "2928650",
    "end": "2934230"
  },
  {
    "text": "during that round-trip time is\nwhatever its message processing rate is times the round-trip\ntime of the network.",
    "start": "2934230",
    "end": "2940630"
  },
  {
    "text": "And so, therefore,\nthis is sort of ideally how we would set the window\nsize in this network.",
    "start": "2940630",
    "end": "2946720"
  },
  {
    "text": "Of course, we talked\nabout before how it's tricky to estimate\nthis sort of EWMA thing that we do to estimate\nthe window size",
    "start": "2946720",
    "end": "2952720"
  },
  {
    "text": "is not a perfect estimator. But we're going to\ntry and sort of, this",
    "start": "2952720",
    "end": "2957950"
  },
  {
    "text": "is going to be a good choice\nfor a window size to use. And so, typically\nthe receiver is",
    "start": "2957950",
    "end": "2965220"
  },
  {
    "text": "going to try and sort of use\nsome rough estimate of what it thinks the round-trip time\nis and the rate at which it",
    "start": "2965220",
    "end": "2970920"
  },
  {
    "text": "can process messages when it\ninforms the sender, the window",
    "start": "2970920",
    "end": "2976130"
  },
  {
    "text": "size at the initiation\nof the connection. OK, so this basically\nis going to wrap up",
    "start": "2976130",
    "end": "2982270"
  },
  {
    "text": "our discussion of the end-to-end\nlayer, or of the sort of loss recovery issues in\nthe end to end layer.",
    "start": "2982270",
    "end": "2988410"
  },
  {
    "text": "What we're going to talk about\nnext time is this issue of how we deal with congestion, right?",
    "start": "2988410",
    "end": "2993780"
  },
  {
    "text": "So we said that in\none of these networks,",
    "start": "2993780",
    "end": "2999310"
  },
  {
    "text": "there can be all these\ndelays due to queuing, and that these delays can\nintroduce additional loss.",
    "start": "2999310",
    "end": "3006579"
  },
  {
    "text": "And we call these\ndelays congestion. And so what we're going\nto talk about next time is how we actually\ndeal with congestion and how we respond\nto congestion.",
    "start": "3006580",
    "end": "3013430"
  },
  {
    "text": "OK so we'll see\nyou on Wednesday. ",
    "start": "3013430",
    "end": "3022609"
  }
]