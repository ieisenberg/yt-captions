[
  {
    "start": "0",
    "end": "90000"
  },
  {
    "text": "So my name is Erik Demaine. You should call me Erik. Welcome back to 6.046. This\nis Lecture 2. And today we are going to essentially",
    "start": "7880",
    "end": "19530"
  },
  {
    "text": "fill in some of the more mathematical underpinnings\nof Lecture 1. So, Lecture 1, we just sort",
    "start": "19530",
    "end": "26110"
  },
  {
    "text": "of barely got our feet wet with some analysis\nof algorithms, insertion sort and mergesort.",
    "start": "26110",
    "end": "31150"
  },
  {
    "text": "And we needed a couple of tools. We had this\nbig idea of asymptotics and forgetting about",
    "start": "31150",
    "end": "36350"
  },
  {
    "text": "constants, just looking at the lead term.\nAnd so, today, we're going to develop asymptotic notation so that we know that mathematically.\nAnd we also ended up with a recurrence with",
    "start": "36350",
    "end": "46649"
  },
  {
    "text": "mergesort, the running time of mergesort,\nso we need to see how to solve recurrences. And we will do those two things today. Question?\nYes, I will speak louder. Thanks. Good. Even",
    "start": "46649",
    "end": "58539"
  },
  {
    "text": "though I have a microphone, I am not amplified.\nOK, so let's start with asymptotic notation.",
    "start": "58540",
    "end": "74970"
  },
  {
    "text": "We have seen some basic asymptotic notation.\nI am sure you have seen it in other classes before, things like big O-notation. And today\nwe are going to really define this rigorously",
    "start": "74970",
    "end": "87250"
  },
  {
    "text": "so we know what is true and what is not, what\nis valid and what is not. We are going to",
    "start": "87250",
    "end": "100140"
  },
  {
    "start": "90000",
    "end": "480000"
  },
  {
    "text": "define, and unfortunately today is going to be really mathematical",
    "start": "100140",
    "end": "105770"
  },
  {
    "text": "and really no algorithms today, which is sort\nof an anticlimax. But next lecture we will talk about real algorithms and will apply\nall the things we learned today to real algorithms.",
    "start": "105770",
    "end": "118790"
  },
  {
    "text": "This is big O-notation, capital O-notation.\nWe have f(n)=O[g(n)]. This means that there",
    "start": "118790",
    "end": "131110"
  },
  {
    "text": "are some suitable constants, c and n_o, such\nthat f is bounded by cg(n) for all sufficiently",
    "start": "131110",
    "end": "153250"
  },
  {
    "text": "large n. So, this is pretty intuitive notion.\nWe have seen it before. We are going to assume",
    "start": "153250",
    "end": "160829"
  },
  {
    "text": "that f(n) is non-negative here. And I just\nwant f(n) to be bounded above by g(n). We",
    "start": "160829",
    "end": "168749"
  },
  {
    "text": "have seen a bunch of examples, but something\nlike 2n^2=O(n^3) defined. And roughly this",
    "start": "168749",
    "end": "182170"
  },
  {
    "text": "means if you drop leading constants and low\norder terms then this is less than or equal",
    "start": "182170",
    "end": "187190"
  },
  {
    "text": "to that. So, big O corresponds roughly to\nless than or equal to. But this is the formalization.",
    "start": "187190",
    "end": "193959"
  },
  {
    "text": "Another way to think of it formally, a funny\nthing about this notation is it is asymmetric.",
    "start": "193959",
    "end": "198999"
  },
  {
    "text": "Normally, you think of equality being symmetric.\nIf A=B then B=A. But it's not true here. We",
    "start": "198999",
    "end": "205459"
  },
  {
    "text": "do not have n^3 being big O of n^2. We don't\neven have big O of n^3 equaling n^2. So, we",
    "start": "205459",
    "end": "212109"
  },
  {
    "text": "will see exactly what that means in a second.\nBut before we get there, this is a bit bizarre",
    "start": "212109",
    "end": "223110"
  },
  {
    "text": "notation and you should always think about\nwhat it really means. Another way to think",
    "start": "223110",
    "end": "229200"
  },
  {
    "text": "about what it really means is that f(n) is\nin some set of functions that are like g.",
    "start": "229200",
    "end": "235730"
  },
  {
    "text": "You could define big O[g(n)] to be a set of\nfunctions, let's call it f(n), such that there",
    "start": "235730",
    "end": "248359"
  },
  {
    "text": "exist constants. They are the same definition,\nI think, fancy here, c and n_o, such that",
    "start": "248359",
    "end": "260190"
  },
  {
    "text": "we have the bound f(n) is between zero and\ncg(n). It is a bit of a long definition, and",
    "start": "260190",
    "end": "273590"
  },
  {
    "text": "that is why we use the notation, to avoid\nhaving to write this over and over. You can",
    "start": "273590",
    "end": "279060"
  },
  {
    "text": "think of instead of n^2 being equal to big\nO of n^3, what we really mean is that 2n^2",
    "start": "279060",
    "end": "284910"
  },
  {
    "text": "is in the set big O(n^3). When we write equal\nsign, we in some sense mean this in the set,",
    "start": "284910",
    "end": "295720"
  },
  {
    "text": "but we are going to use equal sign. You could\nwrite this. And occasionally you see papers that write this, but this is the notation\nthat we are going to use. That has the consequence",
    "start": "295720",
    "end": "305190"
  },
  {
    "text": "the equal sign is asymmetric, just like this\noperator. We have some nifty ways that we",
    "start": "305190",
    "end": "315310"
  },
  {
    "text": "actually use big O-notation. And it is using\nit as a macro. By the way, we have a lot to",
    "start": "315310",
    "end": "332570"
  },
  {
    "text": "cover today, so I am going to go relatively\nfast. If anything is unclear, just stop, ask questions, then I will slow down. Otherwise,\nI will take this as all completely obvious",
    "start": "332570",
    "end": "340720"
  },
  {
    "text": "and I can keep going at full speed. The convention,\nthis is intuitive, I guess, if you do some",
    "start": "340720",
    "end": "353750"
  },
  {
    "text": "macro programming or something, but it's a\nbit more mathematical. We have defined big",
    "start": "353750",
    "end": "368810"
  },
  {
    "text": "O-notation and it equals big O of something.\nAnd so we have only defined big O when on",
    "start": "368810",
    "end": "379220"
  },
  {
    "text": "the equal sign we have big O of some function.\nBut it is useful to have some general expression on the right-hand side that involves big O.\nFor example, let's say we have f(n) = n^3",
    "start": "379220",
    "end": "393630"
  },
  {
    "text": "+ O(n^2). This is attempting to get an error\nbound. This is saying f(n) is basically n^3",
    "start": "393630",
    "end": "402530"
  },
  {
    "text": "but there are these lower order terms that\nare O(n^2). And so this means that there is",
    "start": "402530",
    "end": "410380"
  },
  {
    "text": "a function, shorthand for a function, h(n)\nwhich is in O(n^2) or equals O(n^2) such that",
    "start": "410380",
    "end": "429530"
  },
  {
    "text": "f(n) = n^3 + h(n). It is saying that there\nare some lower order terms that are bounded",
    "start": "429530",
    "end": "439860"
  },
  {
    "text": "above by some constant times n^2 for sufficiently\nlarge n, and that is what is here. And then",
    "start": "439860",
    "end": "445870"
  },
  {
    "text": "f(n) equals, now this is a true equality,\nn^3 plus that error term. This is very useful",
    "start": "445870",
    "end": "452400"
  },
  {
    "text": "here. Essentially, I am expressing what the\nlead constant is and then saying well, there is other stuff and it's all at most n^2. Saying\nthat f(n) therefore is also order n^3, but",
    "start": "452400",
    "end": "462220"
  },
  {
    "text": "that is a bit weaker of a statement. This\nis a bit more refined. We won't need to use this too often, but it is useful. Sometimes\nwe will see, like in last class we even had",
    "start": "462220",
    "end": "470590"
  },
  {
    "text": "a big O inside a summation. So, you can use\nthem all over the place. The point is they represent some function in that set. A bit\nless intuitive, and this is more subtle, is",
    "start": "470590",
    "end": "486550"
  },
  {
    "start": "480000",
    "end": "590000"
  },
  {
    "text": "what it means to have big O on the left-hand\nside. It means the same thing, but there is",
    "start": "486550",
    "end": "493300"
  },
  {
    "text": "some convention what equality means. And this\nis why equal sign is asymmetric. You should",
    "start": "493300",
    "end": "502491"
  },
  {
    "text": "read equals like \"is\". Is means that everything\nover here is something over here. So, there",
    "start": "502491",
    "end": "510870"
  },
  {
    "text": "is an implicit for all on the left-hand side\nand there exists on the right-hand side. This is a true statement. Anything that is n^2\n+ O(n) is also O(n^2), but not the other way",
    "start": "510870",
    "end": "521810"
  },
  {
    "text": "around. So, this is a bit asymmetric. If you\nthink about it, this is pretty intuitive but",
    "start": "521810",
    "end": "531680"
  },
  {
    "text": "it is subtle so you should be careful. This\nsays for any expansion of the macro on the",
    "start": "531680",
    "end": "555839"
  },
  {
    "text": "left-hand side, which should be f(n), there\nis an expansion of the macro on the right-hand",
    "start": "555839",
    "end": "563500"
  },
  {
    "text": "side such that we get equality. And what this\nallows you to do is if you have a chain of",
    "start": "563500",
    "end": "570920"
  },
  {
    "text": "equal signs relations, a chain of \"is\"s, then\nthe very first one is equal to or bounded",
    "start": "570920",
    "end": "576110"
  },
  {
    "text": "by the very last one. So, you can chain equal\nsigns the way you normally would. You just cannot flip them around. Good. So, that's\nbig O-notation. Any questions about that?",
    "start": "576110",
    "end": "592190"
  },
  {
    "start": "590000",
    "end": "715000"
  },
  {
    "text": "So, big O is great for expressing upper bounds.\nBut we also want to talk about lower bounds.",
    "start": "592190",
    "end": "603589"
  },
  {
    "text": "For algorithms, we usually care about upper\nbounds on their running time. Running times at most n^2 is at most n log n up to big O,\nbut sometimes we need to express functions",
    "start": "603589",
    "end": "612660"
  },
  {
    "text": "that are at least some quantity. For example,\nwe will show that sorting requires at least",
    "start": "612660",
    "end": "617779"
  },
  {
    "text": "n log n time in some model. So, we need some\nother notation for that. And the notation",
    "start": "617779",
    "end": "625230"
  },
  {
    "text": "is big Omega-notation. And it is pretty symmetric.\nI will just write out the set definition here.",
    "start": "625230",
    "end": "638769"
  },
  {
    "text": "And we are going to write f(n)= big Omega[g(n)]\nto mean f(n) is at least some constant times",
    "start": "638769",
    "end": "645620"
  },
  {
    "text": "g(n) -- -- for sufficiently large n. So, I\nam basically just reversing the inequality",
    "start": "645620",
    "end": "670829"
  },
  {
    "text": "relation between f and g, nothing surprising,\njust to have it there. A random example, and",
    "start": "670829",
    "end": "680889"
  },
  {
    "text": "now we will get a little bit more sophisticated,\nroot n= big Omega(lg n). And you should read",
    "start": "680890",
    "end": "686379"
  },
  {
    "text": "this that up to constant factors root n is\nat least log n for sufficiently large n. So,",
    "start": "686379",
    "end": "694550"
  },
  {
    "text": "omega sort of corresponds to greater than\nor equal to. Let me give you some analogies.",
    "start": "694550",
    "end": "703628"
  },
  {
    "text": "We have big O, we have big omega, this is\nless than or equal to, this is greater than",
    "start": "703629",
    "end": "710389"
  },
  {
    "text": "or equal to. And I am going to fill in some\nmore here in a moment. It's nice to have all",
    "start": "710389",
    "end": "730470"
  },
  {
    "text": "the usual operators we have. Normally we have\nstrict less than, strict greater than and equal sign. And we want those sort of analogs\nin the asymptotic world where we ignore constant",
    "start": "730470",
    "end": "739930"
  },
  {
    "text": "factors and ignore lower order terms. We have,\nfor example, big Theta[g(n)]. This is a capital",
    "start": "739930",
    "end": "747519"
  },
  {
    "text": "theta which means you write the horizontal\nbar in the middle as opposed to all the way",
    "start": "747519",
    "end": "752878"
  },
  {
    "text": "through. I didn't invent Greek, so that is\nthe way it is. Theta means that you are less",
    "start": "752879",
    "end": "758750"
  },
  {
    "text": "than or equal to and you are greater than\nor equal to up to constant factors, so it",
    "start": "758750",
    "end": "764490"
  },
  {
    "text": "is the inner section of these two sets, big\nO and big Omega. That is sort of like equal",
    "start": "764490",
    "end": "774680"
  },
  {
    "text": "sign but, of course, this is very different.\nYou have things like n^2 is big Theta of 2(n^2)",
    "start": "774680",
    "end": "779930"
  },
  {
    "text": "because you ignore constant factors, but all\nof these other relations, OK, n^2 + O(n) = Theta(n^2),",
    "start": "779930",
    "end": "789210"
  },
  {
    "text": "but this does not hold with theta because\nsquare root of n is really asymptotically bigger than log n. And some of the other examples\nwe saw like n^2 versus n^3, those don't hold",
    "start": "789210",
    "end": "800269"
  },
  {
    "text": "with T. And we have some strict notation which\nare the little o-notation and little omega-notation.",
    "start": "800269",
    "end": "815711"
  },
  {
    "text": "There is no little theta because there is\nnot notion of strict equality versus unstrict",
    "start": "815711",
    "end": "824029"
  },
  {
    "text": "equality. Little o is going to correspond\nroughly to less than and little omega is going",
    "start": "824029",
    "end": "829560"
  },
  {
    "text": "to correspond to greater than. This is a notation\nyou will just have to get used to. And I am",
    "start": "829560",
    "end": "836699"
  },
  {
    "text": "not going to define it precisely here because\nit is almost exactly the same. The difference is that instead of saying there exists constant\nc and n_o, you have to say for every constant",
    "start": "836699",
    "end": "846730"
  },
  {
    "text": "c there exists a constant n_o. The relationship\nbetween f and g, this inequality must hold",
    "start": "846730",
    "end": "856769"
  },
  {
    "text": "for all c instead of just for 1. And so n_o\ncan now depend on c. You can assume that really",
    "start": "856769",
    "end": "875420"
  },
  {
    "text": "n is sufficiently large, but this gives you\na strict inequality. No matter what constant you put here, in front of g, let's say we\nare doing little o, f will be still less than",
    "start": "875420",
    "end": "888119"
  },
  {
    "text": "c times g for sufficiently large n. We have\nsome random examples. We are again ignoring",
    "start": "888119",
    "end": "902180"
  },
  {
    "text": "constants. n^2 is always less than n^3 for\nsufficiently large n. And it is a bit subtle",
    "start": "902180",
    "end": "910360"
  },
  {
    "text": "here. I mean in order to prove something like\nthis, it will become intuitive after you manipulate",
    "start": "910360",
    "end": "916700"
  },
  {
    "text": "it a little bit. You have to figure out what\nn_o is in terms of c. I think it something",
    "start": "916700",
    "end": "923100"
  },
  {
    "text": "like 2/c. If we have less than or equal to,\nthat should be right. As long n is at least",
    "start": "923100",
    "end": "935378"
  },
  {
    "text": "this big, no matter how small of a c, you\nshould think of c here as being epsilon now,",
    "start": "935379",
    "end": "940869"
  },
  {
    "text": "in the usual epsilon and deltas. No matter\nhow small c gets, still I can bound n^2 in",
    "start": "940869",
    "end": "946790"
  },
  {
    "text": "terms of n^3, upper bound, but whenever you\nhave theta you do not have either of these",
    "start": "946790",
    "end": "954759"
  },
  {
    "text": "relations. For example, Ωn^2 = Theta(n^2)\nand it is not little o(n^2) and it not little",
    "start": "954759",
    "end": "966310"
  },
  {
    "text": "omega(n^2) because it is exactly n^2. You\nwill get some sense in order relation out of this, although there are some messy behaviors\nas you will see in your problem set. Any questions",
    "start": "966310",
    "end": "979620"
  },
  {
    "text": "about asymptotic notation? That is the quick\nrundown. Now we are going to use it to solve some recurrences. Although we won't use it\nthat much today, we will use it a lot more",
    "start": "979620",
    "end": "990569"
  },
  {
    "text": "on Wednesday. OK. We will move onto the second\ntopic of today, which is solving recurrences.",
    "start": "990569",
    "end": "1016699"
  },
  {
    "start": "995000",
    "end": "1440000"
  },
  {
    "text": "You have probably solved some recurrences\nbefore in 6.042 or whatever discrete math",
    "start": "1016699",
    "end": "1024709"
  },
  {
    "text": "class you have taken. We are going to do more\nand have some techniques here that are particularly useful for analyzing recursive algorithms,\nand we will see that mostly on Wednesday.",
    "start": "1024710",
    "end": "1036750"
  },
  {
    "text": "There are three main methods that we are going\nto use here for solving recurrences. The first",
    "start": "1036750",
    "end": "1043390"
  },
  {
    "text": "one is the substitution method. There is no\ngeneral procedure for solving a recurrence.",
    "start": "1043390",
    "end": "1051500"
  },
  {
    "text": "There is no good algorithm for solving recurrences,\nunfortunately. We just have a bunch of techniques.",
    "start": "1051500",
    "end": "1056659"
  },
  {
    "text": "Some of them work some of the time, and if\nyou are lucky yours will work for your recurrence,",
    "start": "1056659",
    "end": "1062030"
  },
  {
    "text": "but it is sort of like solving an integral.\nYou have to just know some of them, you have to know various methods for solving them.\nIt is usually easy to check if you have the",
    "start": "1062030",
    "end": "1070580"
  },
  {
    "text": "right answer. Just like with integrals, you\njust differentiate and say oh, I got the right answer. And that is essentially the idea of\nsubstitution method. Substitution method will",
    "start": "1070580",
    "end": "1080279"
  },
  {
    "text": "always work, but unfortunately Step 1 is guess\nthe answer. And you have to guess it correctly.",
    "start": "1080279",
    "end": "1089760"
  },
  {
    "text": "That makes it a big difficult. You don't have\nto guess it completely. You can usually get",
    "start": "1089760",
    "end": "1096830"
  },
  {
    "text": "away with not knowing the constant factors,\nwhich is a good thing because we don't really care about the constant factors. You guess\nthe form. You say oh, it is going to be roughly",
    "start": "1096830",
    "end": "1104960"
  },
  {
    "text": "n^2, and so it's some constant times n^2 presumably.\nSo, you guess that. We are going to figure",
    "start": "1104960",
    "end": "1110570"
  },
  {
    "text": "out the constants. You try to verify whether\nthe recurrence satisfies this bound by induction,",
    "start": "1110570",
    "end": "1119519"
  },
  {
    "text": "and that is the key. Substitution uses induction.\nAnd from that you usually get the constants",
    "start": "1119520",
    "end": "1124700"
  },
  {
    "text": "for free. You figure out what the constants\nhave to be in order to make this work. So,",
    "start": "1124700",
    "end": "1130490"
  },
  {
    "text": "that is the general idea. You will see a few\nexamples of this. Actually, the same example",
    "start": "1130490",
    "end": "1135800"
  },
  {
    "text": "several times. Unfortunately, this is what\nyou might call, I don't know. This is an algorithm,",
    "start": "1135800",
    "end": "1147350"
  },
  {
    "text": "but it uses an oracle which is knowing the\nright answer. But sometimes it is not too hard to guess the answer. It depends. If you\nlook at this recurrence, T(n) = 4T(n/2) +",
    "start": "1147350",
    "end": "1159158"
  },
  {
    "text": "n, we should implicitly always have some base\ncase of T of some constant, usually 1 is a",
    "start": "1159159",
    "end": "1166170"
  },
  {
    "text": "constant, so we don't really care about the\nbase case. For algorithms that is always the case. And we want to solve this thing. Does\nanyone have a guess to what the solution is?",
    "start": "1166170",
    "end": "1177230"
  },
  {
    "text": "Ideally someone who doesn't already know how\nto solve this recurrence. OK. How many people know how to solve this recurrence? A few,\nOK. And, of the rest, any guesses? If you",
    "start": "1177230",
    "end": "1191120"
  },
  {
    "text": "look at what is going on here, here you have\nT(n/2) and let's ignore this term more or",
    "start": "1191120",
    "end": "1196200"
  },
  {
    "text": "less. We have n/2 here. If we double n and\nget T(n) then we multiply the value by 4.",
    "start": "1196200",
    "end": "1203630"
  },
  {
    "text": "And then there is this additive end, but that\ndoesn't matter so much. What function do you know that when you double the argument the\noutput goes up by a factor of 4? Sorry? n^2,yeah.",
    "start": "1203630",
    "end": "1215610"
  },
  {
    "text": "You should think n^2 and you would be right.\nBut we won't prove n^2 yet. Let's prove something",
    "start": "1215610",
    "end": "1223640"
  },
  {
    "text": "simpler, because it turns out proving that\nit is at most n^2 is a bit of a pain. We will see that in just a few minutes. But let's\nguess that T(n) = O(n^3) first because that",
    "start": "1223640",
    "end": "1234190"
  },
  {
    "text": "will be easier to prove by induction. You\nsort of see how it is done in the easy case,",
    "start": "1234190",
    "end": "1239950"
  },
  {
    "text": "and then we will actually get the right answer,\nn^2, later. I need to prove. What I am going",
    "start": "1239950",
    "end": "1245419"
  },
  {
    "text": "to do is guess that T(n) is some constant\ntimes n^3 at most, so I will be a little more",
    "start": "1245420",
    "end": "1252380"
  },
  {
    "text": "precise. I cannot use the big O-notation in\nthe substitution method so I have to expand",
    "start": "1252380",
    "end": "1258529"
  },
  {
    "text": "it out to use constants. I will show you why\nin a little bit, but let me just tell you",
    "start": "1258529",
    "end": "1271730"
  },
  {
    "text": "at a high level what is important in not using\nbig O-notation. Big O-notation is great if",
    "start": "1271730",
    "end": "1277190"
  },
  {
    "text": "you have a finite chain of big O relations,\nyou know, n^2 is big O(n^3) is big O(n^4)",
    "start": "1277190",
    "end": "1283490"
  },
  {
    "text": "is big O(n^4) is big O(n^4). That is all true.\nAnd so you get that n^2 is big O(n^4). But",
    "start": "1283490",
    "end": "1289920"
  },
  {
    "text": "if you have an infinite chain of those relations\nthen the first thing is not big O of the last thing. You have to be very careful. For example,\nthis is a total aside on the lecture notes.",
    "start": "1289920",
    "end": "1302299"
  },
  {
    "text": "Suppose you want to prove that n = O(1). This\nis a great relation. If it were true, every",
    "start": "1302299",
    "end": "1307760"
  },
  {
    "text": "algorithm would have constant running time.\nThis is not true. Not in Wayne's World notation.",
    "start": "1307760",
    "end": "1318450"
  },
  {
    "text": "You could \"prove this by induction\" by saying\nwell, base case is 1 = O(1). OK, that is true.",
    "start": "1318450",
    "end": "1327190"
  },
  {
    "text": "And then the induction step as well, if I\nknow that n-1, so let's suppose that n-1 = O(1),",
    "start": "1327190",
    "end": "1334370"
  },
  {
    "text": "well, that implies that n, which is (n-1)\n+1, if this is O(1) and 1 = O(1), the whole",
    "start": "1334370",
    "end": "1346750"
  },
  {
    "text": "thing is O(1). And that is true. If you knew\nthat (n-1) = O(1) and 1 = O(1) then their",
    "start": "1346750",
    "end": "1352611"
  },
  {
    "text": "sum is also O(1), but this is a false proof.\nYou cannot induct over big Os. What is going",
    "start": "1352611",
    "end": "1358549"
  },
  {
    "text": "on here is that the constants that are implicit\nin here are changing. Here you have some big O of 1, here you have some big O of 1. You\nare probably doubling the constant in there",
    "start": "1358549",
    "end": "1367260"
  },
  {
    "text": "every time you do this relation. If you have\na finite number of doubling of constants, no big deal, it is just a constant, two the\npower number of doublings. But here you are",
    "start": "1367260",
    "end": "1374861"
  },
  {
    "text": "doing n doublings and that is no good. The\nconstant is now depending on n. So, we are",
    "start": "1374861",
    "end": "1381110"
  },
  {
    "text": "avoiding this kind of problem by writing out\nthe constant. We have to make sure that constant doesn't change. Good. Now I have written out\nthe constant. I should be safe. I am assuming",
    "start": "1381110",
    "end": "1395408"
  },
  {
    "text": "it for all k less than n, now I have to prove\nit for k equal to n. I am going to take T(n)",
    "start": "1395409",
    "end": "1401570"
  },
  {
    "text": "and just expand it. I am going to do the obvious\nthing. I have this recurrence how to expand",
    "start": "1401570",
    "end": "1408620"
  },
  {
    "text": "T(n). Then it involves T(n/2). And I know\nsome fact about T(n/2) because n/2 is less",
    "start": "1408620",
    "end": "1414640"
  },
  {
    "text": "than n. So, let's expand. T(n) = 4T(n/2) +\nn. And now I have an upper bound on this thing",
    "start": "1414640",
    "end": "1425220"
  },
  {
    "text": "from the induction hypothesis. This is at\nmost 4 times c times the argument cubed plus",
    "start": "1425220",
    "end": "1438130"
  },
  {
    "text": "n.",
    "start": "1438130",
    "end": "1480909"
  },
  {
    "start": "1440000",
    "end": "2050000"
  },
  {
    "text": "Continuing on here. Let's expand this a little\nbit. We have n cubed over 2 cubed. Two cubed",
    "start": "1480909",
    "end": "1492549"
  },
  {
    "text": "is 8, so 4 over 8 is a half. So, we have Ωcn^3\n+ n. And what I would like this to be is,",
    "start": "1492549",
    "end": "1508480"
  },
  {
    "text": "so at the bottom where I would like to go\nis that this is at most cn3. That is what",
    "start": "1508480",
    "end": "1514658"
  },
  {
    "text": "I would like to prove to reestablish the induction\nhypothesis for n. What I will do, in order",
    "start": "1514659",
    "end": "1521120"
  },
  {
    "text": "to see when that is case, is just write this\nas what I want, so this is sort of the desired",
    "start": "1521120",
    "end": "1527610"
  },
  {
    "text": "value, cn3, minus whatever I don't want. This\nis called the residual. Now I have to actually",
    "start": "1527610",
    "end": "1542250"
  },
  {
    "text": "figure this out. Let's see. We have cn^3,\nbut only Ωcn^3 here, so I need to subtract off Ωcn^3 to get that lead term correct.\nAnd then I have plus n and there is a minus",
    "start": "1542250",
    "end": "1552908"
  },
  {
    "text": "here, so it is minus n. And that is the residual.\nIn order for this to be at most this, I need",
    "start": "1552909",
    "end": "1560260"
  },
  {
    "text": "that the residual is non-negative. This is\nif the residual part is greater than or equal",
    "start": "1560260",
    "end": "1569940"
  },
  {
    "text": "to zero, which is pretty easy to do because\nhere I have control over c. I get to pick",
    "start": "1569940",
    "end": "1576379"
  },
  {
    "text": "c to be whatever I want. And, as long as c\nis at least, oh, I don't know, 2, then this",
    "start": "1576380",
    "end": "1583480"
  },
  {
    "text": "is a 1 at least. Then I have n^3 should be\ngreater than or equal to n. And that is always",
    "start": "1583480",
    "end": "1589429"
  },
  {
    "text": "the case. For example, this is true if c is\nat least what n is, but let's say n is at",
    "start": "1589429",
    "end": "1603149"
  },
  {
    "text": "least 1 just for kicks. So, what we have done\nis proved that T(n) is at most some constant",
    "start": "1603150",
    "end": "1613630"
  },
  {
    "text": "times n^3. And the constant is like 1. So,\nthat is an upper bound. It is not a tight",
    "start": "1613630",
    "end": "1620639"
  },
  {
    "text": "upper bound. We actually believed that it\nis n^2, and it is, but you have to be a little",
    "start": "1620639",
    "end": "1626050"
  },
  {
    "text": "careful. This does not mean that the answer\nis n^3. It just means that at most n^3 is big O(n^3). And this is a proof by induction.\nNow, technically I should have put a base",
    "start": "1626050",
    "end": "1635000"
  },
  {
    "text": "case in this induction, so there is a little\nbit missing. The base case is pretty easy because T(1) is some constant, but it will\nsort of influence things. If the base case",
    "start": "1635000",
    "end": "1646159"
  },
  {
    "text": "T(1) is some constant. And what we need is\nthat it is at most c times one cubed, which",
    "start": "1646159",
    "end": "1655330"
  },
  {
    "text": "is c. And that will be true as long as you\nchoose c to be sufficiently large. So, this",
    "start": "1655330",
    "end": "1661669"
  },
  {
    "text": "is true if c is chosen sufficiently large.\nNow, we don't care about constants, but the",
    "start": "1661669",
    "end": "1671470"
  },
  {
    "text": "point is just to be a little bit careful.\nIt is not true that T(n) is at most 1 times",
    "start": "1671470",
    "end": "1678200"
  },
  {
    "text": "n^2, even though here all we need is that\nc is at least 1. For the base case to work, c actually might have to be a hundred or whatever\nT(1) is. So, be a little bit careful there.",
    "start": "1678200",
    "end": "1688889"
  },
  {
    "text": "It doesn't really affect the answer, usually\nit won't because we have very simple base cases here. OK, so let's try to prove the\ntight bound of O(n^2). I am not going to prove",
    "start": "1688889",
    "end": "1708220"
  },
  {
    "text": "an omega bound, but you can prove an omega\nn squared bound as well using substitution method. I will just be satisfied for now proving\nan upper bound of n squared. Let's try to",
    "start": "1708220",
    "end": "1724289"
  },
  {
    "text": "prove that T(n), this is the same recurrence,\nI want to prove that it is O(n^2). I am going",
    "start": "1724290",
    "end": "1733720"
  },
  {
    "text": "to do the same thing. And I will write a bit\nfaster because this is basically copying.",
    "start": "1733720",
    "end": "1740990"
  },
  {
    "text": "Except now, instead of three, I have two.\nThen I have T(n) = 4T(n/2) + n. I expand this",
    "start": "1740990",
    "end": "1755950"
  },
  {
    "text": "T(n/2). This is at most 4c(n/2)^2 + n. And\nnow, instead of have 2 cubed, I have 2 squared,",
    "start": "1755950",
    "end": "1767100"
  },
  {
    "text": "which is only 4. The fours cancel. I get cn^2\n+ n. And if you prefer to write it as desired",
    "start": "1767100",
    "end": "1775590"
  },
  {
    "text": "minus residual, then I have cn^2 - (-n). And\nI want this to be non-negative. And it is",
    "start": "1775590",
    "end": "1786450"
  },
  {
    "text": "damn hard for minus n to be non-negative.\nIf n is zero we are happy, but unfortunately",
    "start": "1786450",
    "end": "1791750"
  },
  {
    "text": "this is an induction on n. It's got to hold\nfor all n greater than or equal to 1. This",
    "start": "1791750",
    "end": "1798679"
  },
  {
    "text": "is not less than or equal to cn^2. Notice\nthe temptation is to write that this equals",
    "start": "1798679",
    "end": "1806799"
  },
  {
    "text": "O(n^2), which is true for this one step. cn^2\n- (-n), well, these are both order n, or this",
    "start": "1806799",
    "end": "1816230"
  },
  {
    "text": "is order n, this is order n squared. Certainly\nthis thing is O(n^2), that is true, but it is not completing the induction. To complete\nthe induction, you have to prove the induction",
    "start": "1816230",
    "end": "1824190"
  },
  {
    "text": "hypothesis for n with this constant c. Here\nyou are getting a constant c of like c + 1,",
    "start": "1824190",
    "end": "1830888"
  },
  {
    "text": "which is not good. This is true but useless.\nIt does not finish the induction, so you can",
    "start": "1830889",
    "end": "1840690"
  },
  {
    "text": "sort of ignore that. This proof doesn't work,\nwhich is kind of annoying because we feel, in our heart of hearts, that T(n) = n^2. It\nturns out to fix this you need to express",
    "start": "1840690",
    "end": "1852888"
  },
  {
    "text": "T(n) in a slightly different form. This is,\nagain, divine inspiration. And, if you have a good connection to some divinity, you are\nall set. [LAUGHTER] But it is a little bit",
    "start": "1852889",
    "end": "1862970"
  },
  {
    "text": "harder for the rest of us mere mortals. It\nturns out, and maybe you could guess this,",
    "start": "1862970",
    "end": "1872278"
  },
  {
    "text": "that the idea is we want to strengthen the\ninduction hypothesis. We assumed this relatively",
    "start": "1872279",
    "end": "1879549"
  },
  {
    "text": "weak thing, T(k) is less than or equal to\nsome constant times k^2. We didn't know what the constant was, that is fine, but we assumed\nthat there were no lower order terms. I want",
    "start": "1879549",
    "end": "1887100"
  },
  {
    "text": "to look at lower order terms. Maybe they play\na role. And if you look at this progression",
    "start": "1887100",
    "end": "1893138"
  },
  {
    "text": "you say, oh, well, I am getting something\nlike n^2 and the constants are pretty damn tight. I mean the fours are canceling and\nthe c just is preserved. How am I going to",
    "start": "1893139",
    "end": "1901059"
  },
  {
    "text": "get rid of this lower order term plus n? Well,\nmaybe I could subtract off a linear term in here and, if I am lucky, it will cancel with\nthis one. That is all the intuition we have",
    "start": "1901059",
    "end": "1910830"
  },
  {
    "text": "at this point. It turns out it works. We look\nat T(n) and this is 4T(n/2) + n as usual.",
    "start": "1910830",
    "end": "1921269"
  },
  {
    "text": "Now we expand a slightly messier form. We\nhave 4[c_1*(n/2)^2 - c_2*(n/2)] + n. This",
    "start": "1921270",
    "end": "1936899"
  },
  {
    "text": "part is the same because the fours cancel\nagain. So, we get c_1*n^2, which is good.",
    "start": "1936899",
    "end": "1943440"
  },
  {
    "text": "I mean that is sort of the form we want. Then\nwe have something times n, so let's figure it out. We have a plus 1 times n, so let's\nwrite it 1 minus c_2 over 2 times n. Oops,",
    "start": "1943440",
    "end": "1958388"
  },
  {
    "text": "got that wrong. There is four times a two\nso, in fact, the two is upstairs. Let me double",
    "start": "1958389",
    "end": "1968059"
  },
  {
    "text": "check. Right. OK. Now we can write this as\ndesired minus residual. And we have to be",
    "start": "1968059",
    "end": "1975850"
  },
  {
    "text": "a little careful here because now we have\na stronger induction hypothesis to prove. We don't just need it is at most c_1*n^2,\nwhich would be fine here because we could",
    "start": "1975850",
    "end": "1983190"
  },
  {
    "text": "choose c_2 to be large, but what we really\nneed is c_1*n^2 - c_2*n, and then minus some",
    "start": "1983190",
    "end": "1993409"
  },
  {
    "text": "other stuff. This is, again, desired minus\nresidual. And minus residual, let's see, we",
    "start": "1993410",
    "end": "1998500"
  },
  {
    "text": "have a minus 1 and we have a minus c_2. That\ndoesn't look so happy. Plus c_2, thank you,",
    "start": "1998500",
    "end": "2021120"
  },
  {
    "text": "because that again looked awfully negative.\nIt is plus c_2. I am getting my signs, there is a minus here and there is one minus here,\nso there we go. Again, I want my residual",
    "start": "2021120",
    "end": "2033559"
  },
  {
    "text": "to be greater than or equal to zero. And if\nI have that I will be all set in making this",
    "start": "2033559",
    "end": "2045898"
  },
  {
    "text": "inductive argument. Office hours start this\nweek, in case you are eager to go. They are",
    "start": "2045899",
    "end": "2058700"
  },
  {
    "start": "2050000",
    "end": "2380000"
  },
  {
    "text": "all held in some room in Building 24, which\nis roughly the midpoint between here and Stata,",
    "start": "2058700",
    "end": "2064118"
  },
  {
    "text": "I think, for no particular reason. And you\ncan look at the Web page for details on the",
    "start": "2064119",
    "end": "2071779"
  },
  {
    "text": "office hours. Continuing along, when is c_2\n- 1 going to be greater than or equal to zero?",
    "start": "2071780",
    "end": "2079510"
  },
  {
    "text": "Well, that is true if c_2 is at least 1, which\nis no big deal. Again, we get to choose the",
    "start": "2079510",
    "end": "2086159"
  },
  {
    "text": "constants however we want. It only has to\nhold for some choice of constants. So, we can set c_2 greater than or equal to 1. And\nthen we are happy. That means this whole thing",
    "start": "2086160",
    "end": "2097359"
  },
  {
    "text": "is less than or equal to c_1*n^2 - c_2*n if\nc_2 is greater than or equal to 1. It is kind",
    "start": "2097359",
    "end": "2105568"
  },
  {
    "text": "of funny here. This finishes the induction,\nat least the induction step. We proved now",
    "start": "2105569",
    "end": "2112579"
  },
  {
    "text": "that for any value of c_1, and provided c_2\nis at least one. We have to be a little more",
    "start": "2112579",
    "end": "2118510"
  },
  {
    "text": "careful that c_1 does actually have to be\nsufficiently large. Any particular reason",
    "start": "2118510",
    "end": "2123760"
  },
  {
    "text": "why? c_1 better not be negative, indeed. c_1\nhas to be positive for this to work, but it",
    "start": "2123760",
    "end": "2135160"
  },
  {
    "text": "even has to be larger than positive depending.\nSorry. I have been going so fast, I haven't",
    "start": "2135160",
    "end": "2141520"
  },
  {
    "text": "asked you questions. Now you are caught off\nguard. Yeah? Because of the base case, exactly. So, the base case will have T(1) is c_1 time\n1 squared minus c_2, we want to prove that",
    "start": "2141520",
    "end": "2159700"
  },
  {
    "text": "it is at most this, and T(1) is some constant\nwe have assumed. We need to choose c_1 to",
    "start": "2159700",
    "end": "2166560"
  },
  {
    "text": "be sufficiently larger than c_2, in fact,\nso c_2 has to be at least 1. c_1 may have to be at least a hundred more than one if\nthis is sufficiently large. And sufficiently",
    "start": "2166560",
    "end": "2184920"
  },
  {
    "text": "large now means with respect to c_2. You have\nto be a little bit careful, but in this case",
    "start": "2184920",
    "end": "2192349"
  },
  {
    "text": "it doesn't matter. Any questions about the\nsubstitution method? That was the same example",
    "start": "2192349",
    "end": "2199260"
  },
  {
    "text": "three times. In the end, it turned out we\ngot the right answer. But we sort of had to",
    "start": "2199260",
    "end": "2204340"
  },
  {
    "text": "know the answer in order to find it, which\nis a bit of a pain. It would certainly be nicer to just figure out the answer by some\nprocedure, and that will be the next two techniques",
    "start": "2204340",
    "end": "2213029"
  },
  {
    "text": "we talk about. Sorry? How would you prove\na lower bound? I haven't tried it for this",
    "start": "2213030",
    "end": "2220730"
  },
  {
    "text": "recurrence, but you should be able to do exactly\nthe same form. Argue that T(n) is greater",
    "start": "2220730",
    "end": "2226510"
  },
  {
    "text": "than or equal to c_1*n^2 - c_2*n. I didn't\ncheck whether that particular form will work,",
    "start": "2226510",
    "end": "2235099"
  },
  {
    "text": "but I think it does. Try it. These other methods\nwill give you, in some sense, upper and lower",
    "start": "2235099",
    "end": "2244020"
  },
  {
    "text": "bounds if you are a little bit careful. But,\nto really check things, you pretty much have to do the substitution method. And you will\nget some practice with that. Usually we only",
    "start": "2244020",
    "end": "2253400"
  },
  {
    "text": "care about upper bounds. Proving upper bounds\nlike this is what we will focus on, but occasionally we need lower bounds. It is always nice to\nknow that you have the right answer by proving",
    "start": "2253400",
    "end": "2262260"
  },
  {
    "text": "a matching lower bound. The next method we\nwill talk about is the recursion-tree method.",
    "start": "2262260",
    "end": "2274930"
  },
  {
    "text": "And it is a particular way of adding up a\nrecurrence, and it is my favorite way. It",
    "start": "2274930",
    "end": "2284771"
  },
  {
    "text": "usually just works. That's the great thing\nabout it. It provides you intuition for free. It tells you what the answer is pretty much.\nIt is slightly nonrigorous, this is a bit",
    "start": "2284771",
    "end": "2293910"
  },
  {
    "text": "of a pain, so you have to be really careful\nwhen you apply it. Otherwise, you might get the wrong answer. Because it involves dot,\ndot, dots, our favorite three characters,",
    "start": "2293910",
    "end": "2304180"
  },
  {
    "text": "but dot, dot, dots are always a little bit\nnonrigorous so be careful. Technically, what",
    "start": "2304180",
    "end": "2309860"
  },
  {
    "text": "you should do is find out what the answer\nis with recursion-tree method. Then prove that it is actually right with the substitution\nmethod. Usually that is not necessary, but",
    "start": "2309861",
    "end": "2318171"
  },
  {
    "text": "you should at least have in your mind that\nthat is required rigorously. And probably the first few recurrences you solve, you should\ndo it that way. When you really understand",
    "start": "2318171",
    "end": "2326049"
  },
  {
    "text": "the recursion-tree method, you can be a little\nbit more sloppy if you are really sure you have the right answer. Let's do an example.\nWe saw recursion trees very briefly last time",
    "start": "2326050",
    "end": "2338900"
  },
  {
    "text": "with mergesort as the intuition why it was\nn log n. And, if you took an example like",
    "start": "2338900",
    "end": "2346680"
  },
  {
    "text": "the one we just did with the recursion-tree\nmethod, it is dead simple. Just to make our life harder, let's do a more complicated recursion.\nHere we imagine we have some algorithm. It",
    "start": "2346680",
    "end": "2356380"
  },
  {
    "text": "starts with a problem size n, it recursively\nsolves a problem of size n/4, it then recursively solves a problem of size n/2, and it does\nn^2 work on the side without nonrecursive",
    "start": "2356380",
    "end": "2367630"
  },
  {
    "text": "work. What is that? I mean that is a bit less\nobvious, I would say. What we are going to",
    "start": "2367630",
    "end": "2375670"
  },
  {
    "text": "do is draw a picture, and we are just going\nto expand out that recursion in tree form",
    "start": "2375670",
    "end": "2384760"
  },
  {
    "start": "2380000",
    "end": "2770000"
  },
  {
    "text": "-- -- \nand then just add everything up. We want the",
    "start": "2384760",
    "end": "2399230"
  },
  {
    "text": "general picture, and the general principle\nin the recursion-tree method is we just draw",
    "start": "2399230",
    "end": "2406619"
  },
  {
    "text": "this as a picture. We say well, T(n) equals\nthe sum of n^2, T(n/4) and T(n/2). This is",
    "start": "2406619",
    "end": "2420849"
  },
  {
    "text": "a weird way of writing a sum but why not write\nit that way. This is going to be a tree. And",
    "start": "2420850",
    "end": "2426650"
  },
  {
    "text": "it is going to be a tree by recursively expanding\neach of these two leaves. I start by expanding",
    "start": "2426650",
    "end": "2433119"
  },
  {
    "text": "T(n) to this, then I keep expanding, expanding,\nexpanding everything. Let's go one more step.",
    "start": "2433119",
    "end": "2439510"
  },
  {
    "text": "We have this n^2, T(n/4), T(n/2). If we expand\none more time, this is going to be n^2 plus",
    "start": "2439510",
    "end": "2451630"
  },
  {
    "text": "two things. The first thing is going to be\n(n/4)^2, the second thing is going to be (n/2)^2.",
    "start": "2451630",
    "end": "2459670"
  },
  {
    "text": "Plus their recursive branches. We have T(n/16)\nand T(n/8). Here my arithmetic shows thin.",
    "start": "2459670",
    "end": "2471548"
  },
  {
    "text": "This better be the same, T(n/8), and this\nshould be T(n/4), I believe. You just keep",
    "start": "2471549",
    "end": "2477280"
  },
  {
    "text": "going forever, I mean, until you get down\nto the base case where T is a constant. So,",
    "start": "2477280",
    "end": "2483369"
  },
  {
    "text": "I am now going to skip some steps and say\ndot, dot, dot. This is where you have to be careful. We have n^2, (n/4)^2, (n/2)^2. Now\nthis is easy because I have already done them",
    "start": "2483369",
    "end": "2500260"
  },
  {
    "text": "all. (n/16)^2, (n/8)^2, (n/8)^2 again, (n/4)^2\nand et cetera, dot, dot, dot, of various levels",
    "start": "2500260",
    "end": "2515059"
  },
  {
    "text": "of recursion here. At the bottom, we are going\nto get a bunch of constants. These are the leaves. I would like to know how many leaves\nthere are. One challenge is how many leaves",
    "start": "2515059",
    "end": "2529440"
  },
  {
    "text": "in this tree could there be? This is a bit\nsubtle, unlike mergesort or unlike the previous recurrence we solved, the number of leaves\nhere is a bit funny because we are recursing",
    "start": "2529440",
    "end": "2537780"
  },
  {
    "text": "at different speeds. This tree is going to\nbe much smaller than this tree. It is going to have smaller depth because it has already\ndone down to (n/16). Here it has only gone",
    "start": "2537780",
    "end": "2546720"
  },
  {
    "text": "down to (n/4). But how many leaves are there\nin this recursion tree? All I need is an upper",
    "start": "2546720",
    "end": "2556140"
  },
  {
    "text": "bound, some reasonable upper bound. I can\ntell you it is at most T(n^10), but that is",
    "start": "2556140",
    "end": "2561818"
  },
  {
    "text": "a bit unreasonable. It should be less than\nn, good. Why is it less than n? Exactly. I",
    "start": "2561819",
    "end": "2576950"
  },
  {
    "text": "start with a problem of size n. And I recurse\ninto a problem that n/4 and a problem that says n/2. When I get down to one I stop. So,\nn/4 + n/2 = æn, which is strictly less than",
    "start": "2576950",
    "end": "2589260"
  },
  {
    "text": "n. So, definitely the total number of leaves\nhas to be at most n. If I start out with n",
    "start": "2589260",
    "end": "2594690"
  },
  {
    "text": "sort of stuff and get rid of a quarter of\nit and then recurse, it is definitely going",
    "start": "2594690",
    "end": "2600800"
  },
  {
    "text": "to be less than n stuff at the bottom. So,\nstrictly less than n leaves. At this point,",
    "start": "2600800",
    "end": "2609110"
  },
  {
    "text": "I have done nothing interesting. And then\nthe second cool idea in recursion trees is",
    "start": "2609110",
    "end": "2615589"
  },
  {
    "text": "you don't just expand this tree and see what\nit looks like and then say, well, God, how the hell am I going to sum that? You sum it\nlevel by level. That is the only other idea.",
    "start": "2615589",
    "end": "2624700"
  },
  {
    "text": "It usually works really, really well. Here\nit is a bit complicated and I have to think a bit to figure out n^2 is n^2. That is the\nfirst level. Easy. The second level, I have",
    "start": "2624700",
    "end": "2636099"
  },
  {
    "text": "to think a lot harder. There are three kinds\nof mathematicians, those who can add and those who cannot, and I am the latter kind so I\nneed your help. Can you add these things together?",
    "start": "2636099",
    "end": "2651440"
  },
  {
    "text": "It's n^2 over something. Please? (5/16)n^2.\nNow I really need your help. I think that",
    "start": "2651440",
    "end": "2662808"
  },
  {
    "text": "one I could have done, but this one is a little\nbit harder. I will go look at my notes while you compute that. Any answers? 73/256. Anyone\nelse confirm that? It seems a bit high to",
    "start": "2662809",
    "end": "2684440"
  },
  {
    "text": "me. 73 does not sound right to me. 64? Closer.\nIt is actually important that we get this",
    "start": "2684440",
    "end": "2696328"
  },
  {
    "text": "right. The 256 is correct. I can tell. Everyone\nshould know that 16^2 = 256. We are computer",
    "start": "2696329",
    "end": "2703780"
  },
  {
    "text": "scientists. 25, good. We have two people saying\n25, therefore it is correct by democracy.",
    "start": "2703780",
    "end": "2710870"
  },
  {
    "text": "[LAUGHTER] 25 is also what my notes say, and\nI computed it at home. (25/256)n^2 is the",
    "start": "2710870",
    "end": "2716380"
  },
  {
    "text": "right answer. Now, did anyone notice something\nmagical about this progression? It squares",
    "start": "2716380",
    "end": "2725000"
  },
  {
    "text": "each time, good. And, if we were going to\nadd these up, you might call it? A geometric",
    "start": "2725000",
    "end": "2733549"
  },
  {
    "text": "series, very good. So, it turns out this is\ngeometric. And we know how to sum geometric",
    "start": "2733549",
    "end": "2739140"
  },
  {
    "text": "series, at least you should. We started n^2.\nWe know that at the bottom, well, this is",
    "start": "2739140",
    "end": "2761000"
  },
  {
    "text": "not quite a level, we get something like n,\nbut we are decreasing geometrically. So, the",
    "start": "2761000",
    "end": "2769980"
  },
  {
    "text": "total, I mean the solution to the recurrence\nis the sum of all the numbers in this tree. If we added it up level by level and then\nadd up all the levels that is going to give",
    "start": "2769980",
    "end": "2777700"
  },
  {
    "start": "2770000",
    "end": "2824000"
  },
  {
    "text": "us the answer. This is the total computed\nlevel by level. It is just a cute way to compute",
    "start": "2777700",
    "end": "2783780"
  },
  {
    "text": "it. It usually gives you nice answers like\ngeometric answers. We have n^2(1 + 5/16 +",
    "start": "2783780",
    "end": "2791000"
  },
  {
    "text": "25/256 + ...). And, if we believe in fate\nand we see this three number recurrence, we",
    "start": "2791000",
    "end": "2798609"
  },
  {
    "text": "know that we have the right answer. In general,\nit is going to be (5/16)k, at least we hope,",
    "start": "2798609",
    "end": "2806259"
  },
  {
    "text": "and so on. And it keeps going. It doesn't\ngo on infinitely, but let's just assume it",
    "start": "2806260",
    "end": "2811450"
  },
  {
    "text": "goes on infinitely. That will be an upper\nbound that goes on forever. This is all times",
    "start": "2811450",
    "end": "2817828"
  },
  {
    "text": "n^2. Now, if you are going to know one thing\nabout geometric series, you should know that",
    "start": "2817829",
    "end": "2825140"
  },
  {
    "start": "2824000",
    "end": "2917000"
  },
  {
    "text": "1 + Ω + º, if you sum all the powers of\n2 you get 2. We are computer scientists. We",
    "start": "2825140",
    "end": "2836578"
  },
  {
    "text": "have got to know at least the binary case.\nThis is like writing 0.1111111 in binary,",
    "start": "2836579",
    "end": "2842820"
  },
  {
    "text": "actually, as 1, so this is 2. This is even\nsmaller. We have 5/16, that is less than a",
    "start": "2842820",
    "end": "2852920"
  },
  {
    "text": "half and then we are squaring each time, so\nthis is even less than 2. If you want, there",
    "start": "2852920",
    "end": "2860210"
  },
  {
    "text": "is a nifty formula for solving the general\ngeometric series, but all we need is that it is a constant. This is O(n^2). It is also\nO(n^2). It is pretty obvious that it is O(n^2)",
    "start": "2860210",
    "end": "2873200"
  },
  {
    "text": "because the top thing is n^2. So, there is\nour lower bound of n^2. And we have it within",
    "start": "2873200",
    "end": "2878880"
  },
  {
    "text": "a factor of 2, which is pretty good. You actually\nget a better factor here. So, that is recursion-tree",
    "start": "2878880",
    "end": "2884068"
  },
  {
    "text": "method. It is a little shaky here because\nwe have these dot, dot, dots, and we just believe that it is geometric. It turns out\nmost of the time it is geometric. No problem",
    "start": "2884069",
    "end": "2892359"
  },
  {
    "text": "here. I would definitely check it with the\nsubstitution method because this is not obvious to me that it is going to be geometric. In\nthe cases we will look at in a moment, it",
    "start": "2892359",
    "end": "2901440"
  },
  {
    "text": "will be much clearer, so clear that we can\nstate a theorem that everything is working",
    "start": "2901440",
    "end": "2910579"
  },
  {
    "text": "fine. And still time, good. So, that was recursion-trees.\nThere is one more method we are going to talk",
    "start": "2910580",
    "end": "2923470"
  },
  {
    "start": "2917000",
    "end": "3435000"
  },
  {
    "text": "about, and you could essentially think of\nit as an application of the recursion-tree method but it is made more precise. And it\nis an actual theorem, whereas recursion trees,",
    "start": "2923470",
    "end": "2942430"
  },
  {
    "text": "if the dot, dot, dots aren't obvious, you\nbetter check them. The sad part about the",
    "start": "2942430",
    "end": "2948440"
  },
  {
    "text": "master method is it is pretty restrictive.\nIt only applies to a particular family of",
    "start": "2948440",
    "end": "2959119"
  },
  {
    "text": "recurrences. It should be T(n) = aT(n/b) +\nf(n). Am I going to",
    "start": "2959120",
    "end": "2975809"
  },
  {
    "text": "call it f? Yes, I will call it f. In particular,\nit will not cover the recurrence I just solved",
    "start": "2975809",
    "end": "2981920"
  },
  {
    "text": "because I was recursing on two different problems\nof different sizes. Here, every problem you recurse on should be of the same size. There\nare a subproblems. A way to think of this",
    "start": "2981920",
    "end": "2990890"
  },
  {
    "text": "is a recursive algorithm. You have a subproblems.\nEach of them is of size n/b, so the total",
    "start": "2990890",
    "end": "2996140"
  },
  {
    "text": "costs will be this. Then you are doing f(n)\nnonrecursive work. A few constraints. a should",
    "start": "2996140",
    "end": "3002680"
  },
  {
    "text": "be at least 1, should have at least 1 recursion.\nb should be strictly greater than 1. You better",
    "start": "3002680",
    "end": "3008558"
  },
  {
    "text": "make the problem smaller or else it is going\nto be infinity. And f should have some nice",
    "start": "3008559",
    "end": "3017050"
  },
  {
    "text": "property. f(n) should be asymptotically positive.\nHow many people know what asymptotically positive",
    "start": "3017050",
    "end": "3032410"
  },
  {
    "text": "means? No one. OK, you haven't read the textbook.\nThat's OK. I haven't read it either, although",
    "start": "3032410",
    "end": "3040038"
  },
  {
    "text": "don't tell Charles. And he'd notice. And what\nmight you think asymptotically positive means?",
    "start": "3040039",
    "end": "3047950"
  },
  {
    "text": "That we can do a little bit better. Sorry?\nYes, it means for large enough n, f(n) is",
    "start": "3047950",
    "end": "3060060"
  },
  {
    "text": "positive. This means f(n) is greater than\nzero for n, at least some n_o, so for some",
    "start": "3060060",
    "end": "3068700"
  },
  {
    "text": "constant n_o. Eventually it should be positive.\nI mean, we don't care about whether it's negative 1 for n=1, not a big deal. It won't affect\nthe answer because we only care about the",
    "start": "3068700",
    "end": "3079000"
  },
  {
    "text": "asympotics within. The master method, you\ngave it a recurrence of this form, it tells",
    "start": "3079000",
    "end": "3089980"
  },
  {
    "text": "you the answer. That is the great thing about\nthe master method. The annoying thing about the master method is that it has three cases.\nIt is a big long. It takes a little bit longer",
    "start": "3089980",
    "end": "3099578"
  },
  {
    "text": "to memorize than all the others because the\nothers are just ideas. Here we need to actually remember a few things. Let me state the theorem.\nWell, not quite yet. There is one very simple",
    "start": "3099579",
    "end": "3112390"
  },
  {
    "text": "idea, which is we are going to compare this\nnonrecursive work f(n) with a very particular",
    "start": "3112390",
    "end": "3118260"
  },
  {
    "text": "function n^(log_b(a)). Why n^(log_b(a))? You\nwill see later. It turns out it is the number",
    "start": "3118260",
    "end": "3130391"
  },
  {
    "text": "of leaves in the recursion tree, but that\nis foreshadowing. So, it is either less, equal",
    "start": "3130391",
    "end": "3137480"
  },
  {
    "text": "or bigger. And here we care about asymptotics.\nAnd we have to be a little bit more precious",
    "start": "3137480",
    "end": "3142849"
  },
  {
    "text": "about less, equal or bigger. You might think\nwell, it means little o, big Theta, or little omega. It would be nice if the theorem held\nfor all of those cases, but it leaves some",
    "start": "3142849",
    "end": "3152640"
  },
  {
    "text": "gaps. Let's start with Case 1. Case 1 is when\nf is smaller. And not just that it is little",
    "start": "3152640",
    "end": "3161349"
  },
  {
    "text": "o, but it is actually quite a bit smaller.\nIt has got to be polynomially smaller than",
    "start": "3161350",
    "end": "3167880"
  },
  {
    "text": "n^(log_b(a)). For some positive epsilon, the\nrunning time should be this n to this constant",
    "start": "3167880",
    "end": "3184380"
  },
  {
    "text": "log base b of a minus that epsilon, so it\nis really polynomially smaller than n^(log_b(a)).",
    "start": "3184380",
    "end": "3191338"
  },
  {
    "text": "We cannot handle the little o case, that's\na little bit too strong. This is saying it is really quite a bit smaller. But the answer\nthen is really simple, T(n) = Theta(n^(log_b(a))).",
    "start": "3191339",
    "end": "3202049"
  },
  {
    "text": "Great. That is \nCase 1. Case 2 is when f(n) is pretty much",
    "start": "3202049",
    "end": "3216869"
  },
  {
    "text": "equal to n^(log_b(a)). And by pretty much\nequal I mean up to poly log factors. This",
    "start": "3216869",
    "end": "3229088"
  },
  {
    "text": "is log base 2 of n to the power k. You should\nknow this notation. For example, k could be",
    "start": "3229089",
    "end": "3238000"
  },
  {
    "text": "zero. And then they are equal up to constant\nfactors, for some k greater than or equal",
    "start": "3238000",
    "end": "3243710"
  },
  {
    "text": "to zero. Less than will not work, so it is\nreally important that k is non-negative. It",
    "start": "3243710",
    "end": "3250980"
  },
  {
    "text": "should probably be an integer. It doesn't\nactually matter whether there is an integer,",
    "start": "3250980",
    "end": "3256380"
  },
  {
    "text": "but there it is. It could n^(log_b(a)) times\nlog n or just times nothing, whatever. Again,",
    "start": "3256380",
    "end": "3262789"
  },
  {
    "text": "the solution is easy here, T(n) = Theta(n^(log_b(a))*\nlg^(k+1)(n)). Presumably it has to be at least",
    "start": "3262790",
    "end": "3275470"
  },
  {
    "text": "times log k. It turns out it is log to the\nk plus 1 of n. That is Case 2. We have one",
    "start": "3275470",
    "end": "3289310"
  },
  {
    "text": "more case which is slightly more complicated.\nWe need to assume slightly more for Case 3.",
    "start": "3289310",
    "end": "3298559"
  },
  {
    "text": "But Case 3 is roughly when f(n) grows bigger\nthan n^(log_b(a)). So, it should be capital",
    "start": "3298559",
    "end": "3306420"
  },
  {
    "text": "Omega, here is one place where we get to use\nomega, (n^(log_b(a)) + epsilon) for some positive",
    "start": "3306420",
    "end": "3316530"
  },
  {
    "text": "epsilon. It should grow not just bigger but\npolynomially bigger. Here it was growing just",
    "start": "3316530",
    "end": "3324160"
  },
  {
    "text": "a log factor bigger, poly log, and here it\nis a polynomial factor. In this case, we need",
    "start": "3324160",
    "end": "3331000"
  },
  {
    "text": "another assumption about f because we worry\na little bit about how quickly f grows. We",
    "start": "3331000",
    "end": "3338859"
  },
  {
    "text": "want to make sure that as you go down the\nrecursion f gets smaller. It would be kind of nice if f gets smaller as you go down,\notherwise you are, again, trying to sum to",
    "start": "3338859",
    "end": "3348220"
  },
  {
    "text": "infinity or whatever. I see why this is for\nsome epsilon prime greater than zero. What",
    "start": "3348220",
    "end": "3364560"
  },
  {
    "text": "I would like is that if I just sort of take\nthe recurrence, this T(n) and just throw in",
    "start": "3364560",
    "end": "3370549"
  },
  {
    "text": "fs instead, f(n) should be somehow related\nto af(n/b). What I would like is that f(n),",
    "start": "3370549",
    "end": "3379869"
  },
  {
    "text": "which is at the top of the recursion tree,\nshould be bigger than the thing at the next",
    "start": "3379869",
    "end": "3385338"
  },
  {
    "text": "level down. The sum of all the values at the\nnext level down should be bigger by some constant",
    "start": "3385339",
    "end": "3391359"
  },
  {
    "text": "factor. Here I have the next level down is\nat most some 1 - e, something strictly less",
    "start": "3391359",
    "end": "3397460"
  },
  {
    "text": "than 1, some constant strictly less than 1\ntimes the thing at the top level. I need that",
    "start": "3397460",
    "end": "3403990"
  },
  {
    "text": "to make sure things are getting smaller as\nI go down. Then T(n) = Theta[f(n)]. And that",
    "start": "3403990",
    "end": "3411050"
  },
  {
    "text": "is the theorem. This is the master theorem\nor whatever you want to call it. It is not",
    "start": "3411050",
    "end": "3418460"
  },
  {
    "text": "named after some guy name Master. It is just\nthe master of all methods because it is very easy to apply. Let's apply it a few times.\nIt is a bit much to take in all at once. And",
    "start": "3418460",
    "end": "3435910"
  },
  {
    "start": "3435000",
    "end": "3600000"
  },
  {
    "text": "then I will give you a sketch of the proof\nto see that it is really not that surprising",
    "start": "3435910",
    "end": "3441088"
  },
  {
    "text": "this is true if you look at the recursion-tree.\nBut first let's just try using it. For example,",
    "start": "3441089",
    "end": "3449400"
  },
  {
    "text": "we could take T(n) = 4T(n/2) + n. This is\na, this is b, this is f(n). The first thing",
    "start": "3449400",
    "end": "3466309"
  },
  {
    "text": "we should compute is n^(log_b(a)). This I\nthink even I can do. Log base 2 of 4. Yeah,",
    "start": "3466310",
    "end": "3474339"
  },
  {
    "text": "log base 2 I can do. This is n^2. OK, so is\nf(n) smaller or bigger than n^2? Well, f(n)",
    "start": "3474339",
    "end": "3482950"
  },
  {
    "text": "= n. n^2 is clearly bigger by a polynomial\nfactor. So, we are in Case 1. What is the",
    "start": "3482950",
    "end": "3503119"
  },
  {
    "text": "answer? n^2, yeah. It is T(n^(log_b(a))),\nwhich here it is just n^2. Let's do some slight",
    "start": "3503119",
    "end": "3519180"
  },
  {
    "text": "variation. I am going to keep a and b the\nsame and just change f. Let's say T(n) = 4T(n/2)",
    "start": "3519180",
    "end": "3530460"
  },
  {
    "text": "+ n^2. This is like drill spelling. n^2 is\nasymptotically the same as n^2 even up to",
    "start": "3530460",
    "end": "3541380"
  },
  {
    "text": "constants. What is the answer? This is Case\n2. It is slightly harder. What is k in this",
    "start": "3541380",
    "end": "3561288"
  },
  {
    "text": "example? Zero. The answer is? Survey says?\nn^2 log n. Good. And a couple more. T(n) = 4T(n/2)",
    "start": "3561289",
    "end": "3586119"
  },
  {
    "text": "+ n^3. What is the answer? n^3. This is Case\n3. I know this is pretty boring. At this point",
    "start": "3586119",
    "end": "3604500"
  },
  {
    "text": "we are just applying this stupid theorem.\nHow about n^2/lg n? What is the answer? Good.",
    "start": "3604500",
    "end": "3621420"
  },
  {
    "text": "In this case no one should answer. It is a\nbig tricky. I forget exactly the answer. I",
    "start": "3621420",
    "end": "3627901"
  },
  {
    "text": "think it is like n^2 log log n over log n,\nno? Oh, no. n^2 log log n, that's right. Yeah.",
    "start": "3627901",
    "end": "3638269"
  },
  {
    "text": "But you shouldn't know that, and this doesn't\nfollow from the master method. This is something you would have to solve, probably with the\nrecursion-tree would be a good way to do this",
    "start": "3638270",
    "end": "3645039"
  },
  {
    "text": "one, and you need to know some properties\nof logs to know how that goes. But here the",
    "start": "3645039",
    "end": "3651079"
  },
  {
    "text": "master method does not apply. And so you have\nto use a different method. OK. The last thing",
    "start": "3651079",
    "end": "3670450"
  },
  {
    "text": "I want to do is tell you why the master method\nis true, and that makes it much more intuitive, especially using recursion-trees, why everything\nworks. This is a sketch of a proof, not the",
    "start": "3670450",
    "end": "3696579"
  },
  {
    "text": "full thing. You should read the proof in the\ntextbook. It is not that much harder than",
    "start": "3696579",
    "end": "3701720"
  },
  {
    "text": "what I will show, but it is good for you to\nknow the formal details. I don't have time here to do all of the details. I will just\ntell you the salient parts. This is the proof",
    "start": "3701720",
    "end": "3711810"
  },
  {
    "text": "sketch or the intuition behind the master\nmethod. What we are going to do is just take",
    "start": "3711810",
    "end": "3725309"
  },
  {
    "text": "the recursion-tree for this recurrence and\nadd up each level and then add up all the",
    "start": "3725309",
    "end": "3731380"
  },
  {
    "text": "levels and see what we get. We start with\nf(n) at the top after we have expanded one",
    "start": "3731380",
    "end": "3739950"
  },
  {
    "text": "level. Then we get a different problems, each\nof n/b. And after we expand them it will f(n/b)",
    "start": "3739950",
    "end": "3749910"
  },
  {
    "text": "for each one. They are all the same size.\nThen we expand all of those and so on, and",
    "start": "3749910",
    "end": "3758038"
  },
  {
    "text": "we get another a subproblems from there. We\nare going to get like f((n/b)^2). That is",
    "start": "3758039",
    "end": "3769991"
  },
  {
    "text": "sort of decreasing geometrically the size,\nand so on and so on and so on, until at the",
    "start": "3769991",
    "end": "3775790"
  },
  {
    "text": "bottom we get constant size problems. This\nis a bit special because this is the base case, but we have some other constant at the\nbottom. We would like to know how many leaves",
    "start": "3775790",
    "end": "3784869"
  },
  {
    "text": "there are, but that is a little bit tricky\nat the moment. Let's first compute the height",
    "start": "3784869",
    "end": "3790680"
  },
  {
    "text": "of this tree. Let me draw it over here. What\nis the height of this tree? I start with a",
    "start": "3790680",
    "end": "3799050"
  },
  {
    "text": "problem of size n. I want to get down to a\nproblem of size 1. How long does that take?",
    "start": "3799050",
    "end": "3808920"
  },
  {
    "text": "How many levels? This is probably too easy\nfor some and not at your fingertips for others.",
    "start": "3808920",
    "end": "3828818"
  },
  {
    "text": "Log base b of n, good. The height of this\ntree is n^(log_b(a)), because it is just how",
    "start": "3828819",
    "end": "3834490"
  },
  {
    "text": "many times I divide by b until I get down\nto 1. That is great. Now I should be able",
    "start": "3834490",
    "end": "3839700"
  },
  {
    "text": "to compute the number of leaves because I\nhave branching factor a, I have height h.",
    "start": "3839700",
    "end": "3844769"
  },
  {
    "text": "The number of leaves is a^h, a^log_b(n). Let\nme expand that a little bit. a^log_b(n), properties",
    "start": "3844769",
    "end": "3859529"
  },
  {
    "text": "of logs, we can take the n downstairs and\nput the a upstairs, and we get n^(log_b(a)).",
    "start": "3859529",
    "end": "3867059"
  },
  {
    "text": "Our good friend n^(log_b(a)). So, that is\nwhy Our good friend n^(log_b(a)) is so important in the master method. What we are doing is\ncomparing f, which is the top level, to n^(log_b(a)),",
    "start": "3867059",
    "end": "3877820"
  },
  {
    "text": "which up to theta is the bottom level. Now\nthe leaves are all at the same level because we are decreasing at the same rate in every\nbranch. If I add up the cost at the bottom",
    "start": "3877820",
    "end": "3888180"
  },
  {
    "text": "level, it is Theta(n^(log_b(a))). I add up\nthe things at the top level it is f(n), not",
    "start": "3888180",
    "end": "3897890"
  },
  {
    "text": "terribly exciting. But the next level, this\nis a little bit more interesting, is af(n/b),",
    "start": "3897890",
    "end": "3904480"
  },
  {
    "text": "which should look familiar if you had the\nmaster method already memorized, it is that. So, we know that af(n/b) has decreased by\nsome constant factor, 1-epsilon prime. We",
    "start": "3904480",
    "end": "3918599"
  },
  {
    "text": "have gone down. This is a constant factor\nsmaller than this. And then you sum up the",
    "start": "3918599",
    "end": "3923860"
  },
  {
    "text": "next level. It is going to be like a^2f(n/b^2).\nI see that I actually wrote this wrong, the",
    "start": "3923860",
    "end": "3934059"
  },
  {
    "text": "parentheses. Sorry about that. It is not (n/b)^2.\nIt is (n/b^2). So, this sequence, in Case",
    "start": "3934059",
    "end": "3946410"
  },
  {
    "text": "3 at least, is decreasing geometrically. If\nit is decreasing geometrically up to constant",
    "start": "3946410",
    "end": "3952180"
  },
  {
    "text": "factors, it is dominated by the biggest term,\nwhich is f(n). Therefore, in Case 3, we get",
    "start": "3952180",
    "end": "3959260"
  },
  {
    "text": "Theta[f(n)]. Let's look at the other cases,\nand let me adapt those cases to how much time",
    "start": "3959260",
    "end": "3965960"
  },
  {
    "text": "we have left. Wow, lot's of time. Five minutes.\nTons of time. What to do? Let me write that",
    "start": "3965960",
    "end": "3975818"
  },
  {
    "text": "down. Case 3, the costs decrease. Now, this\nis a place I would argue where the dot, dot,",
    "start": "3975819",
    "end": "3983490"
  },
  {
    "text": "dot is pretty obvious. Here, this is damn\nsimple, it is a^kf(n/b^k). And, in Case 3,",
    "start": "3983490",
    "end": "3991349"
  },
  {
    "text": "we assume that the costs decrease geometrically\nas we go down the tree. That was sort of backwards",
    "start": "3991349",
    "end": "4009630"
  },
  {
    "text": "to start with Case 3. Let's do Case 1, which\nis sort of the other intuitively easy case.",
    "start": "4009630",
    "end": "4017308"
  },
  {
    "text": "In Case 1, we know that f(n) is polynomially\nsmaller than this thing. And we are sort of",
    "start": "4017309",
    "end": "4027660"
  },
  {
    "text": "changing by this very simple procedure in\nthe middle. I am going to wave my hands if this is where you need a more formal argument.\nI claim that this will increase geometrically.",
    "start": "4027660",
    "end": "4037440"
  },
  {
    "text": "It has to increase geometrically because this\nf(n) is polynomially smaller than this one,",
    "start": "4037440",
    "end": "4043369"
  },
  {
    "text": "you are going to get various polynomials in\nthe middle which interpret geometrically from the small one to the big one. Therefore, the\nbig one dominates because it is, again, geometric",
    "start": "4043369",
    "end": "4052180"
  },
  {
    "text": "series. As I said, this is intuition, not\na formal argument. This one was pretty formal",
    "start": "4052180",
    "end": "4060210"
  },
  {
    "text": "because we assumed it, but here you need a\nbit more argument. They may not increase geometrically",
    "start": "4060210",
    "end": "4065950"
  },
  {
    "text": "but they could increase faster, and that is\nalso fine. So, in Case 3, you are dominated,",
    "start": "4065950",
    "end": "4075010"
  },
  {
    "text": "I mean you are always dominated by the biggest\nterm in a geometric series. Here it happens",
    "start": "4075010",
    "end": "4081339"
  },
  {
    "text": "to be f(n) and here you are dominated by n^(log_b(a))\nwith a bottom term, oh, Theta. Case 2, here",
    "start": "4081339",
    "end": "4100960"
  },
  {
    "text": "it is pretty easy but you need to know some\nproperties of logs. In Case 2, we assume that",
    "start": "4100960",
    "end": "4106109"
  },
  {
    "text": "all of these are basically the same. I mean,\nwe assume that the top is equal to the bottom.",
    "start": "4106109",
    "end": "4111620"
  },
  {
    "text": "And this is changing in this very procedural\nway. Therefore, all of the ones in the middle have to be pretty much the same. Not quite\nbecause here we don't have the log factor.",
    "start": "4111620",
    "end": "4122258"
  },
  {
    "text": "Here we have a log to the k. We have n^(log_b(a))\ntimes log to the kn. Here we don't have the",
    "start": "4122259",
    "end": "4127980"
  },
  {
    "text": "log to the k. So, the logs do disappear here.\nIt turns out the way they disappear is pretty slowly. If you look at the top half of these\nterms, they will all have log to the k. The",
    "start": "4127980",
    "end": "4141750"
  },
  {
    "text": "bottom half they will start to disappear.\nI am giving you some oracle information. If",
    "start": "4141750",
    "end": "4147421"
  },
  {
    "text": "you take logs and you don't change the argument\nby too much, the logs remain. Maybe halfway",
    "start": "4147421",
    "end": "4155500"
  },
  {
    "text": "is too far. The claim is that each level is\nroughly the same, especially the upper most",
    "start": "4155500",
    "end": "4162120"
  },
  {
    "text": "levels are all asymptotically equal. Roughly\nthe same. And, therefore, the cost is one",
    "start": "4162120",
    "end": "4175859"
  },
  {
    "text": "level, here like f(n) times the number of\nlevels, h. And h is log base b of n. B is",
    "start": "4175860",
    "end": "4188210"
  },
  {
    "text": "a constant so we don't care. This is Theta(lg\nn). And, therefore, we get T(n) = (n^(log_b(a))",
    "start": "4188210",
    "end": "4201659"
  },
  {
    "text": "lg^(k+1)(n)) times another log n. So, we get\n[f(n)lg n]. That is the very quick sketch.",
    "start": "4201659",
    "end": "4210739"
  },
  {
    "text": "Sorry, I am being pretty fuzzy on Cases 1\nand 2. Read the proof because you will have to, at some point, manipulate logs in that\nway. And that is all. Any questions? Or, you",
    "start": "4210739",
    "end": "4220460"
  },
  {
    "text": "are all eager to go. OK. Thanks. See you Wednesday.",
    "start": "4220460",
    "end": "4224090"
  }
]