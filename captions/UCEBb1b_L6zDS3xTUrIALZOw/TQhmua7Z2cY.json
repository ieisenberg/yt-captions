[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6060"
  },
  {
    "text": "continue to offer high quality,\neducational resources for free. To make a donation, or to\nview additional materials",
    "start": "6060",
    "end": "12700"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12700",
    "end": "26985"
  },
  {
    "text": "PROFESSOR: All right. Let's get started. So today we're going to\ntalk about capabilities,",
    "start": "26985",
    "end": "32409"
  },
  {
    "text": "continue our discussion of how\nto do privilege separation. And remember last week we\ntalked about how Unix provides",
    "start": "32409",
    "end": "39960"
  },
  {
    "text": "some mechanisms for\napplications to use if they want to privilege\nseparate the application's",
    "start": "39960",
    "end": "45600"
  },
  {
    "text": "internal structure. And today we're going to talk\nabout capabilities, which is a very different way of\nthinking about privileges",
    "start": "45600",
    "end": "53719"
  },
  {
    "text": "that an application might have. And this is why we have actually\nthese two somewhat distinct",
    "start": "53720",
    "end": "59030"
  },
  {
    "text": "readings for today, one of which\nis this confused deputy problem",
    "start": "59030",
    "end": "66840"
  },
  {
    "text": "and how to make your privileges\nmuch more explicit when you're writing software so that\nyou don't accidentally",
    "start": "66840",
    "end": "72940"
  },
  {
    "text": "use the wrong privileges. And then the second\npaper is about the system called Capsicum, which is all\nabout sandboxing and running",
    "start": "72940",
    "end": "80700"
  },
  {
    "text": "some piece of code\nwith fewer privileges so that it, very much\nlike [INAUDIBLE],",
    "start": "80700",
    "end": "86420"
  },
  {
    "text": "if it's compromised, the\ndamage isn't that great. Now it turns out\nthat the authors",
    "start": "86420",
    "end": "91830"
  },
  {
    "text": "of both of these\nreadings really think capabilities are the answer,\nbecause they let you manipulate",
    "start": "91830",
    "end": "97610"
  },
  {
    "text": "privileges in a rather different\nway from how Unix, let's say, thinks about privileges.",
    "start": "97610",
    "end": "104812"
  },
  {
    "text": "So to get started, maybe let's\nlook at this confused deputy problem and try\nto understand what is this problem that Norman\nHardy ran into and was",
    "start": "104812",
    "end": "112979"
  },
  {
    "text": "so perplexed by. So the paper is\nwritten-- well, it was written quite\na while ago, and it",
    "start": "112980",
    "end": "118395"
  },
  {
    "text": "uses syntax for file names\nthat's a bit surprising. But we can try to at least\ntranscribe his problem",
    "start": "118395",
    "end": "124479"
  },
  {
    "text": "into more familiar syntax\nwith Unix-style path names, et cetera. So as far as I can\ntell, what is going",
    "start": "124480",
    "end": "130530"
  },
  {
    "text": "on in their system is that they\nhad a Fortran compiler, which sort of dates their\ndesign at some level, too.",
    "start": "130530",
    "end": "136310"
  },
  {
    "text": "But their Fortran compiler\nlived in /sysx/fort,",
    "start": "136310",
    "end": "142030"
  },
  {
    "text": "and they wanted to change\nthis Fortran compiler, so they would keep statistics\nabout what was compiled,",
    "start": "142030",
    "end": "149554"
  },
  {
    "text": "what parts of a compiler\nwere particularly expensive presumably, et cetera. So he wanted to make sure this\nFortran compiler would somehow",
    "start": "149554",
    "end": "156120"
  },
  {
    "text": "end up writing to\nthis file /sysx/stat, that it would record information\nabout various invocations",
    "start": "156120",
    "end": "164360"
  },
  {
    "text": "of the compiler. And the way they did this is,\nin their operating system, they",
    "start": "164360",
    "end": "170070"
  },
  {
    "text": "had something kind\nof like the setuid that we talked about in Unix. Except there, they called\nit the home files license.",
    "start": "170070",
    "end": "177360"
  },
  {
    "text": "And what it means is that\nif you ran /sysx/fort, and this program had this\nso-called home files license,",
    "start": "177360",
    "end": "185710"
  },
  {
    "text": "then this process that you just\nran would have extra privileges on being able to write\neverything in /sysx.",
    "start": "185710",
    "end": "193102"
  },
  {
    "text": "So it would have these extra\nprivileges on everything in /sysx/, basically, star.",
    "start": "193102",
    "end": "198819"
  },
  {
    "text": "It could access all\nthose files in addition to anything that it could\naccess because the user ran it, for example.",
    "start": "198819",
    "end": "205190"
  },
  {
    "text": "So the particular\nproblem they ran into is that some clever user\nwas able to do this.",
    "start": "205190",
    "end": "211236"
  },
  {
    "text": "So they would run\nthe Fortran compiler, and the Fortran compiler\nwould take arguments very much like GCC takes arguments.",
    "start": "211236",
    "end": "216790"
  },
  {
    "text": "And they would compile\nsomething like foo.f. Here is my Fortran source code. And they'd say, well, put that\noutput -o into /sysx/stat.",
    "start": "216790",
    "end": "228120"
  },
  {
    "text": "Or more damagingly\nin their case, there was another file in\n/sysx that was the billing file",
    "start": "228120",
    "end": "234470"
  },
  {
    "text": "for all the customers\non the system. So you could similarly ask the\nFortran compiler to compile",
    "start": "234470",
    "end": "241850"
  },
  {
    "text": "the source file and put the\noutput into some special file in /sysx.",
    "start": "241850",
    "end": "247980"
  },
  {
    "text": "And in their case,\nthis actually worked. Even though the user\nthemselves didn't have access to write to\nthis file or directory,",
    "start": "247980",
    "end": "255430"
  },
  {
    "text": "because the compiler had\nthis extra privilege-- this home files\nlicense, in their case--",
    "start": "255430",
    "end": "261660"
  },
  {
    "text": "it was able to\noverride these files despite that not being really\nthe developer's intention.",
    "start": "261660",
    "end": "268784"
  },
  {
    "text": "This make sense? This is the rough\nproblem they ran into? So who do they blame? What do they think went wrong? ",
    "start": "268784",
    "end": "280995"
  },
  {
    "text": "Or how would you\ndesign it differently to avoid running\ninto such problems?",
    "start": "280995",
    "end": "286150"
  },
  {
    "text": "So the thing they sort\nof think about here, or they talk about\nin this write up,",
    "start": "286150",
    "end": "291930"
  },
  {
    "text": "is that they believe this\nFortran compiler should be very careful when it's\nusing its privileges.",
    "start": "291930",
    "end": "297990"
  },
  {
    "text": "Because, at some level,\nthe Fortran compiler has two types of privileges. It has one stemming from the\nfact the user invoked it,",
    "start": "297990",
    "end": "305660"
  },
  {
    "text": "so the user should be\nable to access the source file, like foo.f. And if it was some\nother user, maybe",
    "start": "305660",
    "end": "311860"
  },
  {
    "text": "it wouldn't be able to\naccess the user source code. And in other sorts of privileges\nis from those home files",
    "start": "311860",
    "end": "317590"
  },
  {
    "text": "license thing that allows us to\nwrite to these special files. And internally, in the\nsource code of the compiler,",
    "start": "317590",
    "end": "323479"
  },
  {
    "text": "when they open a\nfile, the compiler should have been very explicit\nabout which of these privileges",
    "start": "323480",
    "end": "328900"
  },
  {
    "text": "it wants to exercise\nwhen opening a file or performing some\nprivileged operation.",
    "start": "328900",
    "end": "334372"
  },
  {
    "text": "But their compiler was\nnot written in this way. It was just called\nopen, read, write, like any other program would do.",
    "start": "334372",
    "end": "339550"
  },
  {
    "text": "And it would implicitly use\nall the privileges that it has, which combines-- well,\nin their system design,",
    "start": "339550",
    "end": "345033"
  },
  {
    "text": "it was sort of the union\nof the user privileges and these home files\nlicense privileges.",
    "start": "345033",
    "end": "351086"
  },
  {
    "text": "That make sense? So these guys were really\ninterested in fixing this problem.",
    "start": "351086",
    "end": "356180"
  },
  {
    "text": "And they were sort of calling\nthis compiler this confused deputy, because it\nneeds to disambiguate these multiple\nprivileges that it has",
    "start": "356180",
    "end": "362504"
  },
  {
    "text": "and carefully use them\nin the right instance. So I guess one thing\nwe could try to look at",
    "start": "362505",
    "end": "369349"
  },
  {
    "text": "is how would we design\nsuch a compiler in Unix?",
    "start": "369350",
    "end": "375120"
  },
  {
    "text": "So in their system, they had\nthis whole files license thing. Other mechanisms, then they\nintroduced capabilities.",
    "start": "375120",
    "end": "380189"
  },
  {
    "text": "We'll talk about them shortly. But could we solve\nthis in a Unix system? Suppose you had to write\nthis Fortran compiler in Unix",
    "start": "380190",
    "end": "387080"
  },
  {
    "text": "and write to a special file\nand avoid this confused deputy problem. What would you do?",
    "start": "387080",
    "end": "392775"
  },
  {
    "text": "Any ideas?  I guess you could just\ndeclare this a bad plan. Like don't keep statistics.",
    "start": "392775",
    "end": "400212"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE]. PROFESSOR: Sure.",
    "start": "400212",
    "end": "405314"
  },
  {
    "text": "That could be, right? Well, yeah. So you could not\nsupport flags like -o.",
    "start": "405315",
    "end": "410530"
  },
  {
    "text": "On the other hand,\nyou might want to allow specifying which\nsource code you want",
    "start": "410530",
    "end": "415979"
  },
  {
    "text": "to compile so that maybe\nyou could read the billing file or read the\nstatistics file, which maybe should be secret.",
    "start": "415980",
    "end": "421230"
  },
  {
    "text": "Or maybe the source\ncode has-- maybe you can support a the\nsource code on standard, but it has include\nstatements, so",
    "start": "421230",
    "end": "426330"
  },
  {
    "text": "it needs to include other\npieces of source code. So that's a little tricky. AUDIENCE: You could split up\nthe application [INAUDIBLE].",
    "start": "426330",
    "end": "431729"
  },
  {
    "start": "431729",
    "end": "436905"
  },
  {
    "text": "PROFESSOR: Yes. So another potentially good\ndesign is to split it up, right? And realize that this\nfort compiler really",
    "start": "436905",
    "end": "443129"
  },
  {
    "text": "doesn't need all these two\nprivileges at the same time. So maybe we should have our Unix\nworld /bin/fortcc or something,",
    "start": "443130",
    "end": "453419"
  },
  {
    "text": "the compiler, and then this guy\nis just a regular program with no extra privileges. And then we'll also maybe\nhave a /bin/fortlog,",
    "start": "453420",
    "end": "461980"
  },
  {
    "text": "which is going to be a special\nprogram with some extra privileges and it'll log some\nstatistics about what's going",
    "start": "461980",
    "end": "467640"
  },
  {
    "text": "on in the compiler. And fortcc is going\nto invoke this guy.",
    "start": "467640",
    "end": "473010"
  },
  {
    "text": "So how do we give this\nguy extra privileges? Yeah? AUDIENCE: Well, maybe if you\nuse something like setuid",
    "start": "473010",
    "end": "478153"
  },
  {
    "text": "or something, like fortlog,\nthen presumably any other user could also log arbitrary\ndata through it. PROFESSOR: Yeah.",
    "start": "478153",
    "end": "483699"
  },
  {
    "text": "So this is not so great. Because on fortlog,\npresumably the only way to give extra\nprivileges in Unix is to in fact make it owned by, I\ndon't know, maybe the fort UID,",
    "start": "483700",
    "end": "491169"
  },
  {
    "text": "and that's also setuid. So every time you run it, it\nswitches to this Fortran UID.",
    "start": "491170",
    "end": "497550"
  },
  {
    "text": "And maybe there's some\nspecial stats file. But then in fact anyone can\ninvoke this fortlog thingy.",
    "start": "497550",
    "end": "503169"
  },
  {
    "text": "Which is maybe not great. Now anyone can write\nto the stats file. But maybe this example is not\nthe biggest security concern",
    "start": "503170",
    "end": "509782"
  },
  {
    "text": "about someone corrupting\nyour statistics. But suppose this\nwas a billing file. Then maybe the same problems\nwould be slightly more acute.",
    "start": "509782",
    "end": "516071"
  },
  {
    "text": "Yeah? AUDIENCE: But you can always\nmake your [INAUDIBLE] stats you want, right? Instead of [INAUDIBLE].",
    "start": "516072",
    "end": "521297"
  },
  {
    "text": " PROFESSOR: So in\nsome sense, yeah.",
    "start": "521298",
    "end": "526930"
  },
  {
    "text": "If you're willing to\nlive with arbitrary stuff in your statistics\nor logging file, then maybe that's true.",
    "start": "526930",
    "end": "532220"
  },
  {
    "text": "AUDIENCE: Even if\nyou [INAUDIBLE], you can already make your C\ncode have whatever statistics that you'd want to be recorded.",
    "start": "532220",
    "end": "537994"
  },
  {
    "text": "PROFESSOR: You could. Yeah. Yeah. So it might be\nthat in this case, it doesn't really matter that\nyou can log arbitrary stuff.",
    "start": "537994",
    "end": "543940"
  },
  {
    "text": "So that's true. Yeah. So if you cared about who can\ninvoke this fortlog thing, could you really do\nsomething about it",
    "start": "543940",
    "end": "550063"
  },
  {
    "text": "in Unix, or not so much? Yeah? AUDIENCE: [INAUDIBLE]. It would make both\nof them setuid.",
    "start": "550063",
    "end": "558090"
  },
  {
    "text": "Now the fortcc would\nread that source files.",
    "start": "558090",
    "end": "563120"
  },
  {
    "text": "It would switch back to the\nsaved UID, just the user UID. Remote fortlog in\na setuid, which has",
    "start": "563120",
    "end": "571060"
  },
  {
    "text": "permissions to execute fortlog. And that fortlog would\nsetuid again [INAUDIBLE].",
    "start": "571060",
    "end": "577812"
  },
  {
    "text": "PROFESSOR: Right. Yeah. So there is this rather\nelaborate mechanism in Unix that we skipped on last\nMonday's lecture, that",
    "start": "577812",
    "end": "586280"
  },
  {
    "text": "actually allows an\napplication to switch between multiple UIDs. if it was setuid to some\nuser ID, then it could say,",
    "start": "586280",
    "end": "593800"
  },
  {
    "text": "well, now I want to\nrun with this user ID. Now I want to run with\nthis other user ID. And it could sort of carefully\nalternate between these.",
    "start": "593800",
    "end": "600820"
  },
  {
    "text": "It's a little tricky\nto do it right, but it's probably doable. So that's one potential design.",
    "start": "600820",
    "end": "606224"
  },
  {
    "text": "I guess another hack you\ncould maybe try to do is make this fortlog\nbinary only executable to a particular group and\nmake fortcc a setgid binary",
    "start": "606224",
    "end": "614790"
  },
  {
    "text": "to that group. It's not great, because it\nobliterates whatever group list the user had initially.",
    "start": "614790",
    "end": "619950"
  },
  {
    "text": "But who knows? Maybe that's better\nthan nothing. Anyway, so it's a\nfairly tricky problem",
    "start": "619950",
    "end": "626550"
  },
  {
    "text": "to solve in an entirely\nsatisfactory fashion with these Unix mechanisms.",
    "start": "626550",
    "end": "631811"
  },
  {
    "text": "Although, maybe you should\nrethink your problem and not worry about\nyour statistics file as much in the first place.",
    "start": "631812",
    "end": "638970"
  },
  {
    "text": "But how do we think about what's\ngoing wrong in the design?",
    "start": "638970",
    "end": "645149"
  },
  {
    "text": "Well, there's two things we\ncould try to learn from this, or basically, what went wrong. ",
    "start": "645150",
    "end": "653120"
  },
  {
    "text": "And one interpretation that\none party wants us to take away",
    "start": "653120",
    "end": "658180"
  },
  {
    "text": "is this notion that he\ncalls ambient authority. ",
    "start": "658180",
    "end": "666730"
  },
  {
    "text": "So what is ambient authority? Can anyone figure\nout what they meant? They've never\nexactly defined this.",
    "start": "666730",
    "end": "672230"
  },
  {
    "text": "Yeah? AUDIENCE: It means you\nhave the authority given to you by the environment. So as if [INAUDIBLE]\nuser with no limitations.",
    "start": "672230",
    "end": "679464"
  },
  {
    "text": "PROFESSOR: Yeah. So you're making an\noperation, and you can specify what operation you want.",
    "start": "679464",
    "end": "685177"
  },
  {
    "text": "But the decision of whether that\noperation is going to succeed comes from some extra implicit\nparameters in your process,",
    "start": "685177",
    "end": "690850"
  },
  {
    "text": "for example. And in Unix, you can figure\nout what this ambient authority check might look like.",
    "start": "690850",
    "end": "696490"
  },
  {
    "text": "So if you make a system\ncall, then you probably supplied some sort of a\nname to a system call. And inside of the\nkernel, this gets",
    "start": "696490",
    "end": "703340"
  },
  {
    "text": "mapped to some\nsort of an object. And the object presumably has\nsome kind of an access control",
    "start": "703340",
    "end": "708580"
  },
  {
    "text": "list on it, like the permissions\non a file, et cetera. So there are some\npermissions that you",
    "start": "708580",
    "end": "713930"
  },
  {
    "text": "can get from the object. And that should decide\nwhether an operation is going to be\nallowed on this name",
    "start": "713930",
    "end": "720480"
  },
  {
    "text": "of the application supplied. This is sort of what the\napplication gets to see. Inside of the\nkernel, there's also",
    "start": "720480",
    "end": "726850"
  },
  {
    "text": "the current user ID of the\nprocess making the calls. So this is the current prox UID.",
    "start": "726850",
    "end": "732600"
  },
  {
    "text": " And this thing goes\ninto the decision",
    "start": "732600",
    "end": "738250"
  },
  {
    "text": "of whether to allow a\nparticular operation or not. So it's the current\nprocess user ID",
    "start": "738250",
    "end": "744770"
  },
  {
    "text": "that's this ambient privilege. Whatever operation you're\ngoing to try to do, the kernel will actually\ntry, in some sense,",
    "start": "744770",
    "end": "751540"
  },
  {
    "text": "as hard as possible to allow\nit by using your current UID, and your current GID and\nwhatever other extra privileges",
    "start": "751540",
    "end": "759410"
  },
  {
    "text": "you might have. And as long as there's some set\nof privileges that allow you to do it, it'll let you do it.",
    "start": "759410",
    "end": "765690"
  },
  {
    "text": "Which is maybe\nnot the best thing to do if you aren't fully aware\nof what all these problems are.",
    "start": "765690",
    "end": "771080"
  },
  {
    "text": "Maybe you don't want\nto use all of them to open a particular file or\nmake some other operation.",
    "start": "771080",
    "end": "777910"
  },
  {
    "text": "Does this make sense, roughly\nwhat ambient privilege is? In the case of an\noperating system,",
    "start": "777910",
    "end": "783325"
  },
  {
    "text": "it basically ends up being\nthe fact that a process has some sort of a user ID. Are there non-OS examples\nof ambient privilege",
    "start": "783325",
    "end": "791570"
  },
  {
    "text": "you guys can think of? Like when you're making\nan operation, something about the identity of\nthe caller, the terms of",
    "start": "791570",
    "end": "797525"
  },
  {
    "text": "whether they'll succeed or not.  Like one example is\nprobably firewalls, as well.",
    "start": "797525",
    "end": "803765"
  },
  {
    "text": "So this is just an OS example. And in privilege, another is\nthe firewalls on the network.",
    "start": "803765",
    "end": "809940"
  },
  {
    "text": "Because any operation\nyou do from a machine inside of a firewall is\ngoing to be allowed because,",
    "start": "809940",
    "end": "815890"
  },
  {
    "text": "well, you just have\nthat IP address, or you're on that\nside of a network. And if you're outside, the same\noperation will be disallowed.",
    "start": "815890",
    "end": "823870"
  },
  {
    "text": "So it's also a solar problem. Say you visit some website,\nand the website includes a link",
    "start": "823870",
    "end": "830850"
  },
  {
    "text": "to some different\nserver, well, maybe you don't want to use the\nprivileges that you have or the inside of your\nnetwork to access that link.",
    "start": "830850",
    "end": "838500"
  },
  {
    "text": "Because maybe it'll access\nyour internal printer and exploit it in some way. And really, the guy that\nprovided you the link",
    "start": "838500",
    "end": "845021"
  },
  {
    "text": "shouldn't have\nbeen able to reach the printer in the first\nplace, because they were on the outside. Or a firewall that your browser,\nmaybe by visiting uplink,",
    "start": "845021",
    "end": "854190"
  },
  {
    "text": "will be tricked into doing this. It's sort of a moral\nequivalent of this confused",
    "start": "854190",
    "end": "859510"
  },
  {
    "text": "problem on the network models. Yeah? AUDIENCE: [INAUDIBLE] permission\nare directly affected also.",
    "start": "859510",
    "end": "865344"
  },
  {
    "text": "PROFESSOR: Yeah. AUDIENCE: Because it's\nessentially DAC, potentially, in the Capsicum. PROFESSOR: Yeah. So this is pretty much\nwhat the Capsicum guys",
    "start": "865344",
    "end": "871250"
  },
  {
    "text": "think of as discretionary\naccess control. And the fact that it's\ndiscretionary, well, this is not quite what\ndiscretionary access control",
    "start": "871250",
    "end": "878696"
  },
  {
    "text": "means. But what discretionary\naccess control means is that the user, or\nthe owner of an object,",
    "start": "878697",
    "end": "885350"
  },
  {
    "text": "can decide what security policy\nwill look like to an object. Which seems very natural in a\nUnix setting. it's my files,",
    "start": "885350",
    "end": "891025"
  },
  {
    "text": "I can decide what I want. I can give them to you, or I\ncan keep them private, great.  So almost all DAC\nsystems do look",
    "start": "891025",
    "end": "898700"
  },
  {
    "text": "like this, because they want to\nhave some sort of permissions that a user could modify\nto control the security",
    "start": "898700",
    "end": "904450"
  },
  {
    "text": "policy for their files. The flip side is\nmandatory access control.",
    "start": "904450",
    "end": "911910"
  },
  {
    "text": "We'll talk about it in a little\nwhile, but at some level, they have this very\nphilosophically different view",
    "start": "911910",
    "end": "917340"
  },
  {
    "text": "of the world. They think, well,\nyou're the user. But someone else will\nset the security policy for how you use this computer.",
    "start": "917340",
    "end": "924459"
  },
  {
    "text": "And this sort of came out of the\nmilitary in the '70s or '80s, when they really wanted to have\nclassified computer systems",
    "start": "924460",
    "end": "932946"
  },
  {
    "text": "where, well, you're\nworking on some stuff and it's marked secret. I'm working on some stuff\nthat's marked top secret. So my stuff just\ncan't go to you.",
    "start": "932946",
    "end": "939113"
  },
  {
    "text": "It's not up to me whether\nto set the permissions on a file, et cetera. It's just not allowed\nby some guy in charge.",
    "start": "939113",
    "end": "944830"
  },
  {
    "text": "So mandatory access\ncontrol is really trying to enforce these\ndifferent kinds of policies in the first place,\nwhere there's",
    "start": "944830",
    "end": "952500"
  },
  {
    "text": "the user and the\napplication developer. And then there's some guy\nseparate from the user and the developer\nthat sets the policy.",
    "start": "952500",
    "end": "959472"
  },
  {
    "text": "And, as you can sort of guess,\nit doesn't always work out. Well, we'll talk\nabout it in a bit. But that's what discretionary\nversus mandatory",
    "start": "959472",
    "end": "966001"
  },
  {
    "text": "means at this control. All right.",
    "start": "966001",
    "end": "971310"
  },
  {
    "text": "So there's many other examples\nthat you could imagine where we have ambient authority. And it's not inherently bad,\nlaw but it's just something",
    "start": "971310",
    "end": "980910"
  },
  {
    "text": "that you have to be\nvery careful about. If you have a system\nwith ambient authority, you should probably\nbe very careful",
    "start": "980910",
    "end": "987019"
  },
  {
    "text": "if you're performing\nprivileged operations. You should make sure\nthat you're really using the right authority\nand not accidentally being",
    "start": "987020",
    "end": "995980"
  },
  {
    "text": "tricked very much like this\nFortran compiler 20 years ago. 25 now.",
    "start": "995980",
    "end": "1001580"
  },
  {
    "text": "All right. So this is one interpretation\nof what goes wrong. And it's not\nnecessarily the only way",
    "start": "1001580",
    "end": "1007487"
  },
  {
    "text": "to think about what\ngoes wrong, right? Another possibility\nis that, well, wouldn't it be nice if it\nwas easy for an application",
    "start": "1007487",
    "end": "1013400"
  },
  {
    "text": "to tell whether it should\naccess a file on behalf of some principle? So maybe another problem\nis that the access control",
    "start": "1013400",
    "end": "1020700"
  },
  {
    "text": "checks are complicated. ",
    "start": "1020700",
    "end": "1027381"
  },
  {
    "text": "So in some sense, when the\nFortran compiler is running, and it's opening a file\non behalf of a user,",
    "start": "1027381",
    "end": "1033899"
  },
  {
    "text": "it basically needs to\nreplicate the same exact logic we see drawn out here, except\nthat the Fortran compiler needs",
    "start": "1033900",
    "end": "1040240"
  },
  {
    "text": "to plug-in something else here. Instead of using its current\nprivileges, and all of them,",
    "start": "1040240",
    "end": "1045770"
  },
  {
    "text": "it should just\nreplicate this check and try to make it with a\ndifferent set of privileges.",
    "start": "1045770",
    "end": "1052150"
  },
  {
    "text": "So in Unix, this\nturns out to be fairly tricky to do, because\nthere's many places where these security\nchecks happen.",
    "start": "1052150",
    "end": "1058500"
  },
  {
    "text": "if you have symbolic links,\nthen the symbolic link gets looked up, and\nthat path name also",
    "start": "1058500",
    "end": "1063660"
  },
  {
    "text": "gets evaluated with someone's\nprivileges, et cetera. But it might be\nthat, in some system,",
    "start": "1063660",
    "end": "1070220"
  },
  {
    "text": "you could simplify\nthis access control check, where you could do it\nyourself in an application.",
    "start": "1070220",
    "end": "1075632"
  },
  {
    "text": "Does that seem like a\nreasonable plan to you guys? Would you go with that?",
    "start": "1075632",
    "end": "1081960"
  },
  {
    "text": "Any dangers of\nreplicating these checks? Yeah? AUDIENCE: Well, if you do the\nchecks in the application, you could just\nnot do the checks.",
    "start": "1081960",
    "end": "1088594"
  },
  {
    "text": "PROFESSOR: Yeah. So you could easily\nmiss the checks. That's absolutely right. So in some sense, what the\nFortran compiler did here,",
    "start": "1088594",
    "end": "1093679"
  },
  {
    "text": "well, they didn't even bother\ntrying to do the checks, now that they screwed them up. Another possibility, in\naddition to missing the checks,",
    "start": "1093680",
    "end": "1098950"
  },
  {
    "text": "is maybe the kernel\nwill change over time, and it will have slightly\ndifferent checks. It will introduce some\nextra security measure,",
    "start": "1098950",
    "end": "1105100"
  },
  {
    "text": "and the application\nwill be left behind. And it will implement\nold style checks. And probably not a great plan.",
    "start": "1105100",
    "end": "1111279"
  },
  {
    "text": "So recall, one good\nidea in security is to have economy\nof mechanisms.",
    "start": "1111280",
    "end": "1116590"
  },
  {
    "text": "So there's only a small number\nof places that are enforcing your security policies. You probably don't\nwant to replicate",
    "start": "1116590",
    "end": "1121890"
  },
  {
    "text": "the same functionality in\napplications in the kernel, et cetera. You really want to boil\nit down to one place.",
    "start": "1121890",
    "end": "1128090"
  },
  {
    "text": "That roughly makes sense? OK. So what is this\ncapability, I guess,",
    "start": "1128090",
    "end": "1136980"
  },
  {
    "text": "idea where thinking might\nsolve this authority problem?",
    "start": "1136980",
    "end": "1142220"
  },
  {
    "text": "Well, there's some formal\ndefinition for the thing. But really, you can get very\nclose by thinking of Unix file",
    "start": "1142220",
    "end": "1148570"
  },
  {
    "text": "descriptors as a capability. So I guess the alternative\nto this picture,",
    "start": "1148570",
    "end": "1155210"
  },
  {
    "text": "in capability world,\nis that instead of having the\napplication supply name,",
    "start": "1155210",
    "end": "1160510"
  },
  {
    "text": "and you look up an object,\nyou get a permission, you decide whether\nto allow it based on some ambient\nauthority, instead,",
    "start": "1160510",
    "end": "1165910"
  },
  {
    "text": "the capability is the\npicture looks very simple. You have a capability, and\nif you have a capability,",
    "start": "1165910",
    "end": "1172230"
  },
  {
    "text": "it points to an object. And maybe the capability\nhas some small number",
    "start": "1172230",
    "end": "1177482"
  },
  {
    "text": "of restrictions of what\nyou can do with an object. But basically, if you have\nthe capability to an object,",
    "start": "1177482",
    "end": "1183340"
  },
  {
    "text": "you can access the object. It's actually very simple. So there's no ambient\nauthority that",
    "start": "1183340",
    "end": "1189280"
  },
  {
    "text": "decides whether an\noperation on a capability is going to be allowed. The only thing is that\nmaybe the capability has",
    "start": "1189280",
    "end": "1195290"
  },
  {
    "text": "a couple of extra bits, or\nthis mass that they described in the paper, which\nsays, well, you have a capability for this\nfile, as it's restricted",
    "start": "1195290",
    "end": "1202240"
  },
  {
    "text": "to read operations only. Or it's restricted to write\nor append operations only.",
    "start": "1202240",
    "end": "1207440"
  },
  {
    "text": "And then your security decisions\nare all of a sudden very easy. Because if you\nhave a capability, you can do something.",
    "start": "1207440",
    "end": "1213410"
  },
  {
    "text": "If you don't, you can't. Make sense? So I guess one important\nproperty of capability",
    "start": "1213410",
    "end": "1221429"
  },
  {
    "text": "is that they should\nactually be unforgeable, as the papers talk about.",
    "start": "1221430",
    "end": "1227396"
  },
  {
    "text": "So what does it mean\nto be unforgeable, or why do we want this\nin this capability world? ",
    "start": "1227396",
    "end": "1234980"
  },
  {
    "text": "Well, I guess this actually\nmay be almost too obvious here. Well, if you can make\nup any capability you want-- I can make\nup a capability for any",
    "start": "1234980",
    "end": "1241275"
  },
  {
    "text": "of your guys' files\nand go access it. So if I can make it\nup, and I'll access it, and there's nothing else in the\nsecurity design, that stops me",
    "start": "1241275",
    "end": "1247760"
  },
  {
    "text": "from accessing an object once\nI can manufacture a capability.",
    "start": "1247760",
    "end": "1254030"
  },
  {
    "text": "So it's important that\nthese capabilities can't be made up out of\nthin air by the application or by whatever's running.",
    "start": "1254030",
    "end": "1261340"
  },
  {
    "text": "How is this getting forced, if\nwe think of file descriptors as capabilities?",
    "start": "1261340",
    "end": "1267249"
  },
  {
    "text": "So many of you guys\nactually submitted this as the big question\nabout Capsicum. What do you think?",
    "start": "1267249",
    "end": "1273080"
  },
  {
    "text": "What prevents an application\nfrom synthesizing a capability in this file descriptor world?",
    "start": "1273080",
    "end": "1280490"
  },
  {
    "text": "Could you synthesize\na capability? Yeah? AUDIENCE: Well, it was\nprobably like a structure",
    "start": "1280490",
    "end": "1286949"
  },
  {
    "text": "and a construct\nthat says that they have a capability for\ncertain file descriptors. PROFESSOR: Yeah.",
    "start": "1286949",
    "end": "1292170"
  },
  {
    "text": "So it's actually\nfairly easy to see what goes on once you\nlook at what exactly",
    "start": "1292170",
    "end": "1297500"
  },
  {
    "text": "is a file descriptor, right? So a file descriptor\nis basically just some sort of an integer. And this integer--\nlike in Unix, you",
    "start": "1297500",
    "end": "1304756"
  },
  {
    "text": "have file descriptor 0,\nwhich refers to your input, file descriptor 1 which\nrefers to your output. Rockwell But really, these are just\nintegers in user space.",
    "start": "1304756",
    "end": "1312580"
  },
  {
    "text": "And this is what the\napplication can presumably do, and it can choose\nany integer it wants.",
    "start": "1312580",
    "end": "1318380"
  },
  {
    "text": "But whenever you\ntry to do something to a file descriptor, which\nis one of these integers, the kernel will always\ninterpret the integer",
    "start": "1318380",
    "end": "1325639"
  },
  {
    "text": "according to your current\nprocess's file descriptor table. So for every PID-- let's\nsay, well, this is PID,",
    "start": "1325640",
    "end": "1332429"
  },
  {
    "text": "I don't know, 57. So I'm process running. It has an open file\ntable, and each integer",
    "start": "1332430",
    "end": "1338750"
  },
  {
    "text": "from supply from\nuser space, refers to some entry in this table. And of course, the kernel\nshould check that the integer",
    "start": "1338750",
    "end": "1346650"
  },
  {
    "text": "is in bounds in this stable. It isn't negative. It doesn't go past\nthe end of the table.",
    "start": "1346650",
    "end": "1351890"
  },
  {
    "text": "Otherwise, it will have\nthe usual buffer overflow problems, et cetera. But if you carefully\ncheck that the integer is",
    "start": "1351890",
    "end": "1358517"
  },
  {
    "text": "in bounds in the\nkernel implementation, then the only possible\nthings that the application",
    "start": "1358517",
    "end": "1364670"
  },
  {
    "text": "can refer to by\na file descriptor are entries in this table. So presumably, the\nkernel will somehow",
    "start": "1364670",
    "end": "1371060"
  },
  {
    "text": "make sure that you legitimately\nguard a particular capability. So when you, for example, open a\nfile outside of this capability",
    "start": "1371060",
    "end": "1378810"
  },
  {
    "text": "model in Unix, well, the kernel,\nafter the open call succeeds, it's going to change that\nfile descriptor table",
    "start": "1378810",
    "end": "1387420"
  },
  {
    "text": "entry to point to a\nparticular open file, like maybe open/etc/pwd. ",
    "start": "1387420",
    "end": "1394350"
  },
  {
    "text": "And now, the entry at\nthis slot on the table points to an open file. Some of them might\nactually be null.",
    "start": "1394350",
    "end": "1400080"
  },
  {
    "text": "Maybe you don't have an open\nfile with a particular index in this table. And as a result, what does it\nmean to forge a capability?",
    "start": "1400080",
    "end": "1409000"
  },
  {
    "text": "The only thing you\ncan do in user space is make up an integer. And the only integers that\nwould make sense to make up",
    "start": "1409000",
    "end": "1415230"
  },
  {
    "text": "would be entries that point to\nnon-null entries in this table. And those guys are exactly the\ncapabilities that you have.",
    "start": "1415230",
    "end": "1422910"
  },
  {
    "text": "So does that make sense why\nit's difficult, in this file descriptor world, to\nactually forge capabilities in the first place?",
    "start": "1422910",
    "end": "1428542"
  },
  {
    "text": "So it's kind of cool, right? Like the only files that\nyou have opened are exactly the things you can operate on. And there's nothing else\nthat you can potentially",
    "start": "1428542",
    "end": "1436740"
  },
  {
    "text": "touch and effect. Make sense? Any questions? ",
    "start": "1436740",
    "end": "1445630"
  },
  {
    "text": "All right. OK. So I guess, how\nwould capabilities help solve the ambient\nauthority problem",
    "start": "1445630",
    "end": "1452540"
  },
  {
    "text": "that Norman Hardy is excited\nabout with his Fortran compiler? So what would be the file\ndescriptor moral equivalent",
    "start": "1452540",
    "end": "1459790"
  },
  {
    "text": "solution to this\nsysx/fort thing? ",
    "start": "1459790",
    "end": "1465682"
  },
  {
    "text": "Do they actually\nsolve the problem? Yeah? AUDIENCE: Well, they just use\nthe appropriate capabilities",
    "start": "1465682",
    "end": "1471590"
  },
  {
    "text": "whenever they're needed. So when you have to access the\noutput file, in the statistics,",
    "start": "1471590",
    "end": "1476660"
  },
  {
    "text": "you use the capability\n[INAUDIBLE] file. But when you're accessing the\nfile you're about to read,",
    "start": "1476660",
    "end": "1482320"
  },
  {
    "text": "you don't use that capability. PROFESSOR: Yeah. So I guess really what it\nboils down to is that somehow",
    "start": "1482320",
    "end": "1488370"
  },
  {
    "text": "the Fortran compiler should just\nalready have a file descriptor open for that /sysx/stat file.",
    "start": "1488370",
    "end": "1494280"
  },
  {
    "text": "So they don't really describe,\nin their short paper, about how we don't\nget that capability.",
    "start": "1494280",
    "end": "1499950"
  },
  {
    "text": "But it basically means\nyou shouldn't really pass file names around. You shouldn't set\npast file descriptors.",
    "start": "1499950",
    "end": "1505925"
  },
  {
    "text": "So you could actually come\nup with a perhaps much more elegant design for our Unix\nreplacement on the Fortran",
    "start": "1505925",
    "end": "1512540"
  },
  {
    "text": "compiler using capabilities. So maybe the plan is we should\njust have a Fortran compiler",
    "start": "1512540",
    "end": "1519530"
  },
  {
    "text": "front end that doesn't\nhave any extra privileges, and it takes all these arguments\nyou give it, and converts",
    "start": "1519530",
    "end": "1525750"
  },
  {
    "text": "all the path names you supply to\nit into open file descriptors. So the alternative design\nI am thinking of here",
    "start": "1525750",
    "end": "1533539"
  },
  {
    "text": "is that maybe we'd\nhave a program fort1, which is the front end. And it would take some\nsort of a file, foo.f,",
    "start": "1533540",
    "end": "1540345"
  },
  {
    "text": "and all the other\narguments, -o, whatever.",
    "start": "1540345",
    "end": "1545390"
  },
  {
    "text": "And it doesn't actually\nimplement any of the compiler logic, anything else. All it looks for is path\nnames in its arguments,",
    "start": "1545390",
    "end": "1552080"
  },
  {
    "text": "and it's going to open\nthem and establish file descriptors for them.  And the cool thing\nis that, because it",
    "start": "1552080",
    "end": "1558054"
  },
  {
    "text": "has no extra privileges, if\nthe user can't have access to some file name,\nthen it will fail.",
    "start": "1558054",
    "end": "1563519"
  },
  {
    "text": "Those are great. And then once this front end\nhas opened all these file descriptors, it can execute\nsome privileged extra component,",
    "start": "1563520",
    "end": "1570990"
  },
  {
    "text": "like the actual setuid\nFortran compiler. So maybe then it'll run fort.",
    "start": "1570990",
    "end": "1576520"
  },
  {
    "text": "This guy's maybe setuid to\nsome special user ID that has access to the stats file. But it doesn't actually accept\nany path names as input.",
    "start": "1576520",
    "end": "1583750"
  },
  {
    "text": "All it's going to do is\naccept file descriptors. And, in that case,\nthe file descriptor",
    "start": "1583750",
    "end": "1589550"
  },
  {
    "text": "is already prove that the\ncaller had access to open them. Does the property make sense?",
    "start": "1589550",
    "end": "1595845"
  },
  {
    "text": "So it of course doesn't\nsolve every issue. I'm just sort of sketching out\nhow capabilities might help. But that's roughly the plan,\nis that you should demonstrate",
    "start": "1595845",
    "end": "1603565"
  },
  {
    "text": "the fact that you have\naccess to a particular name by just opening it and passing\na capability, instead of saying,",
    "start": "1603565",
    "end": "1609190"
  },
  {
    "text": "why didn't you try\nto open this file and maybe accidentally\nuse some extra privileges.",
    "start": "1609190",
    "end": "1614457"
  },
  {
    "text": "Yes. AUDIENCE: So does\nthis generalize to having one process\nper capability? PROFESSOR: Does this generalize?",
    "start": "1614457",
    "end": "1620470"
  },
  {
    "text": "Well, of course you can have\nas many processes as you want. You can have multiple\nprocesses per capability, but I'm not sure-- AUDIENCE: [INAUDIBLE].",
    "start": "1620470",
    "end": "1626240"
  },
  {
    "start": "1626240",
    "end": "1632929"
  },
  {
    "text": "PROFESSOR: I'm still not sure\nwhat you mean by one property. AUDIENCE: So we have [INAUDIBLE]\ncapabilities the user has.",
    "start": "1632930",
    "end": "1639221"
  },
  {
    "text": " PROFESSOR: That's right. AUDIENCE: And then we\nhave the fort.s access to this past file. PROFESSOR: That's right.",
    "start": "1639222",
    "end": "1645210"
  },
  {
    "text": "Yeah. So the way to think of it\nis, you don't necessarily need a separate process\nfor every capability.",
    "start": "1645210",
    "end": "1651516"
  },
  {
    "text": "Because here, the fort1\nthing might open many files and might pass many capabilities\nto the privileged fort",
    "start": "1651516",
    "end": "1658590"
  },
  {
    "text": "component. The problem here--\nthe reason that this might seem like you\nwant a separate process",
    "start": "1658590",
    "end": "1664030"
  },
  {
    "text": "for every capability\nis that we're sort of dealing with this weird\ninterface between capabilities",
    "start": "1664030",
    "end": "1671010"
  },
  {
    "text": "and ambient privileges. Because fort1 sort of does\nhave ambient privilege. And what we're\ndoing is basically",
    "start": "1671010",
    "end": "1676155"
  },
  {
    "text": "we're converting this ambient\nprivilege into capabilities in this fort1 process. So if you have multiple\ndifferent kinds",
    "start": "1676155",
    "end": "1682580"
  },
  {
    "text": "of ambient privilege, or\nmultiple different privileges that you want to carefully\nuse, then maybe what you want",
    "start": "1682580",
    "end": "1687730"
  },
  {
    "text": "is a separate process\nholding that privilege. And whenever you want to use a\nparticular set of privileges,",
    "start": "1687730",
    "end": "1692820"
  },
  {
    "text": "you'll ask the\ncorresponding process to please perform a separation. And if it succeeds, give\nme back the capability.",
    "start": "1692820",
    "end": "1699120"
  },
  {
    "text": "So that's maybe one\nway to think of this.  There's been actually some\noperating system designs that",
    "start": "1699120",
    "end": "1706336"
  },
  {
    "text": "are entirely capability-based,\nthere are no ambient privileges whatsoever.",
    "start": "1706336",
    "end": "1711564"
  },
  {
    "text": "And it's kind of cool. Unfortunately, it's more of\nsort of an interesting reading experience. Like oh, yeah, you can do it.",
    "start": "1711564",
    "end": "1717904"
  },
  {
    "text": "That's pretty cool. But it's probably not\nreally practical to use in a real system, unfortunately.",
    "start": "1717905",
    "end": "1725540"
  },
  {
    "text": "It turns out that you\nreally do want not so much ambient privilege but being\nable to name an object",
    "start": "1725540",
    "end": "1731200"
  },
  {
    "text": "and tell someone about an object\nwithout conveying necessarily the rights to that object. So maybe I don't\nknow what privileges",
    "start": "1731200",
    "end": "1737670"
  },
  {
    "text": "you might have over some\nshared document, but I do want to tell you, hey, well,\nthere's a shared document.",
    "start": "1737670",
    "end": "1742890"
  },
  {
    "text": "If you can read it, read it. If you write it,\ngreat, write it. But I don't want to\nnecessarily convey any rights. I just want to tell you, hey,\nthere's this thing, go try it.",
    "start": "1742890",
    "end": "1750960"
  },
  {
    "text": "So it's a bit of a bummer\nin a capability world that it really forces\nyou to never talk",
    "start": "1750960",
    "end": "1756930"
  },
  {
    "text": "about objects without conveying\nrights to that object. So it's an important\nidea to know about,",
    "start": "1756930",
    "end": "1764910"
  },
  {
    "text": "and to use it in some\nparts of a system, but probably not the\nbe all end all solution to security, much like almost\nanything else [INAUDIBLE]",
    "start": "1764910",
    "end": "1771930"
  },
  {
    "text": "about here. Make sense? Yeah? AUDIENCE: So if the process\nhas capabilities given to it",
    "start": "1771930",
    "end": "1777720"
  },
  {
    "text": "by some other process,\nand it happens to already have the capability\nto that object, that's greater.",
    "start": "1777720",
    "end": "1783395"
  },
  {
    "text": "Can it compare them to\nmake sure that they're about the same object? Or will it just use\nthe one that's greater?",
    "start": "1783395",
    "end": "1788420"
  },
  {
    "text": "PROFESSOR: So the thing is that\na process doesn't implicitly use the capabilities. So that's the cool thing\nabout capabilities.",
    "start": "1788420",
    "end": "1793627"
  },
  {
    "text": "You have to explicitly name\nwhich one you're using. So think of it in terms\nof file descriptors. Suppose that I give you an open\nfile descriptor for some file,",
    "start": "1793627",
    "end": "1801820"
  },
  {
    "text": "and it's read only. And then someone else gives\nyou another capability for some other-- maybe the same\nfilem maybe a different file,",
    "start": "1801820",
    "end": "1807431"
  },
  {
    "text": "and it's read/write. It's not all of a\nsudden that if you're trying to write to the\nfirst file descriptor",
    "start": "1807431",
    "end": "1812869"
  },
  {
    "text": "you had that was read\nonly, all of a sudden those will start\nsucceeding because you have this extra writeable\nfile descriptor open.",
    "start": "1812869",
    "end": "1819270"
  },
  {
    "text": "So that's sort of\nthe cool thing. You don't want this\nambient privilege. Because if you think\nof these capabilities",
    "start": "1819270",
    "end": "1824920"
  },
  {
    "text": "as a bunch of privileges\nthat just keep accumulating in your process, then\nyou'll actually just end up with ambient\nprivilege again.",
    "start": "1824920",
    "end": "1830690"
  },
  {
    "text": "You just have all these\nmagic capabilities, and people have actually\nbuilt such libraries. Basically, well, they manage\nyour capabilities for you.",
    "start": "1830690",
    "end": "1837197"
  },
  {
    "text": "They sort of collect them. And when you try to\nperform an operation, they look for the\ncapabilities and find the one that'll make it work.",
    "start": "1837197",
    "end": "1842250"
  },
  {
    "text": "That exactly brings you back\nto this ambient authority that you were trying to avoid. So the cool thing\nabout capabilities",
    "start": "1842250",
    "end": "1847390"
  },
  {
    "text": "is that it's almost like\na programming construct, where it makes it\neasy for you-- which",
    "start": "1847390",
    "end": "1852875"
  },
  {
    "text": "is a rare thing in\nsecurity-- it makes it easier for you to write\ncode that specifies exactly what privileges you\nwant to do from a security",
    "start": "1852875",
    "end": "1859200"
  },
  {
    "text": "standpoint. And it's actually a fairly\nnatural code to write. So if you get into that mindset\nof always carrying around",
    "start": "1859200",
    "end": "1865279"
  },
  {
    "text": "this privilege with the\nobject you're accessing, it seems like a\ncool thing to do. It doesn't always make\nsense, but sometimes it does.",
    "start": "1865280",
    "end": "1872750"
  },
  {
    "text": "Any other questions? OK. So that's more on\nthe ambient authority",
    "start": "1872750",
    "end": "1880150"
  },
  {
    "text": "that we've look at here. It turns out that\ncapabilities are also great for other\nproblems, as well.",
    "start": "1880150",
    "end": "1886100"
  },
  {
    "text": "And in particular, the\nproblem of managing privileges often shows up when you want\nto run some untrustworthy code.",
    "start": "1886100",
    "end": "1893700"
  },
  {
    "text": "Because you want\nto really control which privileges you\ngive it, because you think it will misuse any\nprivileges you give it at all.",
    "start": "1893700",
    "end": "1900590"
  },
  {
    "text": "And this is the slightly\ndifferent point of view from which the authors\nof the Capsicum paper",
    "start": "1900590",
    "end": "1906960"
  },
  {
    "text": "are coming at capabilities. So they're of course clearly\naware of this ambient authority",
    "start": "1906960",
    "end": "1913575"
  },
  {
    "text": "problem, but it's sort\nof a different problem that you might or might\nnot care about solving. But the particular thing\nthey really care about",
    "start": "1913575",
    "end": "1920960"
  },
  {
    "text": "is they have a really large\nprivileged application, and they worry\nthat there's going",
    "start": "1920960",
    "end": "1926150"
  },
  {
    "text": "to be bugs in different parts\nof that application source code. So they would like to\nreduce the privileges",
    "start": "1926150",
    "end": "1932900"
  },
  {
    "text": "of different components\nof that application. So in that sense, the story\nis very similar to OKWS.",
    "start": "1932900",
    "end": "1940480"
  },
  {
    "text": "So you have-- for\nsandboxing, you have some large application,\nyou break it up into components,",
    "start": "1940480",
    "end": "1947000"
  },
  {
    "text": "and you will limit what\nprivileges each component has. So where does this make sense? Like OKWS is\nclearly one example.",
    "start": "1947000",
    "end": "1954140"
  },
  {
    "text": "What are other situations\nwhere you might care about prileged separation?",
    "start": "1954140",
    "end": "1960280"
  },
  {
    "text": "Well, I guess in the paper\nthey describe the examples I actually got to run. So things like tcpdump\nand other applications",
    "start": "1960280",
    "end": "1968320"
  },
  {
    "text": "that parse network data. So why do they worry so\nmuch about applications",
    "start": "1968320",
    "end": "1973890"
  },
  {
    "text": "that parse network inputs? What goes wrong in tcpdump? Why are they so paranoid? AUDIENCE: Well, an attacker\ncan control what's being sent",
    "start": "1973890",
    "end": "1981036"
  },
  {
    "text": "and what's being called. PROFESSOR: Yeah. I think what they\nreally worry about is, very much like with OKWS, they\nworry about that attack surface",
    "start": "1981036",
    "end": "1986603"
  },
  {
    "text": "and how much can an attacker\nreally control the inputs? And with these network\nparsing programs,",
    "start": "1986603",
    "end": "1991970"
  },
  {
    "text": "there's a lot of control\nthat that factor has. They have the exact packet. And the reason that\nthis was so problematic",
    "start": "1991970",
    "end": "1998355"
  },
  {
    "text": "is that if you're\nwriting code in C that has to parse data\nstructures, you're presumably",
    "start": "1998355",
    "end": "2003920"
  },
  {
    "text": "going to do lots of\npointer manipulations, copying bites into\narrays, allocating memory. And as you are now experts,\nthis is super fragile.",
    "start": "2003920",
    "end": "2012450"
  },
  {
    "text": "And you can easily have\nmemory management errors that lead to pretty\ndisastrous consequences.",
    "start": "2012450",
    "end": "2018155"
  },
  {
    "text": "So this is the\nreason why they're very excited about sandboxing\nvarious network protocol,",
    "start": "2018155",
    "end": "2023990"
  },
  {
    "text": "parsing things, et cetera. Another probably\nreal world instance where you really care about\nthis is in your browser.",
    "start": "2023990",
    "end": "2030070"
  },
  {
    "text": "You probably want to\nsandbox your Flash plug-in, or your Java\nextension, or whatnot. Because they're\npretty large attack",
    "start": "2030070",
    "end": "2036570"
  },
  {
    "text": "surfaces as well\nthat have gotten exploited pretty aggressively. So it seems like\na reasonable plan.",
    "start": "2036570",
    "end": "2042810"
  },
  {
    "text": "Like if you're writing\nsome piece of software, you want to sandbox\ndifferent components of it. What about more generally,\nif you download something",
    "start": "2042810",
    "end": "2048790"
  },
  {
    "text": "from the internet,\nand you want to run it with fewer privileges? Is this sort of Capsicum style\nisolation a good plan for that?",
    "start": "2048790",
    "end": "2056989"
  },
  {
    "text": "I could download some random\nscreensaver or some game from the internet. And I want to run\nit on my computer, and I want to make sure\nit doesn't screw up",
    "start": "2056989",
    "end": "2063381"
  },
  {
    "text": "whatever I have laying around.  Would you use Capsicum?",
    "start": "2063381",
    "end": "2068760"
  },
  {
    "text": "Would this be a good plan? Yeah? AUDIENCE: You could write\na sandboxing program,",
    "start": "2068760",
    "end": "2075475"
  },
  {
    "text": "which you'd use Capsicum\nto sandbox [INAUDIBLE]. ",
    "start": "2075476",
    "end": "2082651"
  },
  {
    "text": "PROFESSOR: Right. You could try to use Capsicum. So how would you use Capsicum? Well, you'd just enter into the\nsandbox mode with cap_enter.",
    "start": "2082652",
    "end": "2089379"
  },
  {
    "text": "And then you run the program. Would you expect it to work?",
    "start": "2089380",
    "end": "2094513"
  },
  {
    "text": " I guess the problem is that\nif the program wasn't really expecting to be\nsandboxed with Capsicum,",
    "start": "2094514",
    "end": "2101155"
  },
  {
    "text": "then all of a sudden the\nprogram will try to open any simplified-- it'll\nopen a shared library,",
    "start": "2101155",
    "end": "2107460"
  },
  {
    "text": "and it can't open\nthe shared library, because it can't\nopen/liv/ something else. That's not allowed\nin capability mode.",
    "start": "2107460",
    "end": "2113810"
  },
  {
    "text": "So it's a bit of a problem. So typically, these\nsandboxing techniques that we're going to look at\nhere-- capabilities, style,",
    "start": "2113810",
    "end": "2121685"
  },
  {
    "text": "stuff, and so on--\nreally are best used when the developer\nis sort of building",
    "start": "2121685",
    "end": "2127400"
  },
  {
    "text": "the application aware\nthat the code is going to run in this mode. There's probably other kinds\nof sandboxing techniques",
    "start": "2127400",
    "end": "2134260"
  },
  {
    "text": "that could be used\nfor unmodified code, but then the focus, or the\nrequirements, change a bit.",
    "start": "2134260",
    "end": "2140270"
  },
  {
    "text": "So in Capsicum,\nthey don't really worry about backwards\ncompatibility. Well, we have to open\nfiles differently?",
    "start": "2140270",
    "end": "2145319"
  },
  {
    "text": "Sure, we'll open\nthem differently. Whereas, if you want\nto write existing code, you probably want\nsomething more like maybe",
    "start": "2145320",
    "end": "2151330"
  },
  {
    "text": "a full virtual machine. So you could open a\nVM and run it there. And it's very\ncompatible, and there's",
    "start": "2151330",
    "end": "2158400"
  },
  {
    "text": "no question that it'll just\nrun, and probably not--",
    "start": "2158400",
    "end": "2163440"
  },
  {
    "text": "Well, it's actually a\ngood thought exercise. Should we use virtual machines\nto sandbox instead of Capsicum?",
    "start": "2163440",
    "end": "2171970"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. The overheads are probably\nquite significant. So the memory overhead\nis pretty bad.",
    "start": "2171970",
    "end": "2180715"
  },
  {
    "text": "It could be. But what if we don't care\nabout memory overhead? So maybe virtual machines\ngets really good, and they don't actually\nuse that much memory.",
    "start": "2180715",
    "end": "2188079"
  },
  {
    "text": "Is it still a bad plan? AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah.",
    "start": "2188080",
    "end": "2193374"
  },
  {
    "text": "So it's kind of hard to control\nwhat happens on the network, because either you give the\nvirtual machine no access",
    "start": "2193374",
    "end": "2200150"
  },
  {
    "text": "to the network at all, or\nyou connect to a network through NAT mode or something\nin Preview or VMware.",
    "start": "2200150",
    "end": "2205800"
  },
  {
    "text": "And then it can access\nthe whole internet. So you have to much more\nexplicitly control network",
    "start": "2205800",
    "end": "2212652"
  },
  {
    "text": "by maybe setting up firewall\nrules for the virtual machine, et cetera. That's maybe not so great. What if you don't\ncare about network?",
    "start": "2212652",
    "end": "2218890"
  },
  {
    "text": "What if you're some simple\nvideo or tcpdump parser.",
    "start": "2218890",
    "end": "2224240"
  },
  {
    "text": "You just spin up a VM. It's going to parse\nyour tcpdump packets and spit you back\nafter your presentation",
    "start": "2224240",
    "end": "2229490"
  },
  {
    "text": "that tcpdump wants\nto burn to the user. So there's no real\nnetwork I/O. Maybe you're, for some reason\n[INAUDIBLE] still?",
    "start": "2229490",
    "end": "2240819"
  },
  {
    "text": "AUDIENCE: Because the\ninitialization overhead is still large. PROFESSOR: Yeah. So it's maybe like an initial\noverhead of starting a VM.",
    "start": "2240820",
    "end": "2247823"
  },
  {
    "text": "So that's true. There's some performance stuff. Yeah. AUDIENCE: Well, you might\nwant to have database rights",
    "start": "2247823",
    "end": "2254780"
  },
  {
    "text": "and things like that. PROFESSOR: Yeah. But even more generally,\nwhat you're getting at is what if there's a real\ndata that you care about here?",
    "start": "2254780",
    "end": "2261140"
  },
  {
    "text": "And it's really hard to share. So VMs are really\na much more sort of separation mechanism, where\nyou can't really share stuff",
    "start": "2261140",
    "end": "2270040"
  },
  {
    "text": "across VMs very easily. So it's good for\nsituations where you have a very isolated program\nyou want to run, you basically",
    "start": "2270040",
    "end": "2277089"
  },
  {
    "text": "don't want to share any\nfiles with any directories, any processes, any pipes even. And you just let\nit run separately.",
    "start": "2277090",
    "end": "2283640"
  },
  {
    "text": "So it's great. It's probably, in some ways,\nstronger isolation than what Capsicum provides, because\nthere's probably fewer",
    "start": "2283640",
    "end": "2290340"
  },
  {
    "text": "ways for things to go wrong. And, you know,\nall these problems we talked about so far.",
    "start": "2290340",
    "end": "2295640"
  },
  {
    "text": "But it's also not applicable\nin many of the situations where you might want\nto use Capsicum, because in Capsicum,\nyou can actually",
    "start": "2295640",
    "end": "2301880"
  },
  {
    "text": "share files that have very fine\ngranularity between sandbox [INAUDIBLE] by just giving it\ncapability to [INAUDIBLE] file.",
    "start": "2301880",
    "end": "2310342"
  },
  {
    "text": "This is something that's\nvery easy to do in Capsicum, and would require quite\na bit of machinery in a virtual machine setting.",
    "start": "2310342",
    "end": "2317280"
  },
  {
    "text": "That makes sense? Questions?",
    "start": "2317280",
    "end": "2323200"
  },
  {
    "text": "All right. So does that seem like\na useful primitives to have to maybe sandbox stuff.",
    "start": "2323200",
    "end": "2329340"
  },
  {
    "text": "So I guess we're going to\ntalk about different ways to try to sandbox something.",
    "start": "2329340",
    "end": "2334900"
  },
  {
    "text": "And Capsicum in particular\nis the new thing here that uses capabilities. But just by comparison,\nI guess, you",
    "start": "2334900",
    "end": "2345810"
  },
  {
    "text": "can do some sandboxing in\nUnix, as we saw with OKWS. Right? It's just not great from\nseveral standpoints.",
    "start": "2345810",
    "end": "2353170"
  },
  {
    "text": "So let's maybe take\nthe example of tcpdump and see why tcpdump is difficult\nto sandbox with Unix mechanism.",
    "start": "2353170",
    "end": "2364530"
  },
  {
    "text": "So remember, in the Capsicum\npaper, these guys took tcpdump. And the way tcpdump\nworks is that it",
    "start": "2364530",
    "end": "2372569"
  },
  {
    "text": "opens some special sockets and\nthen runs basically parsing",
    "start": "2372570",
    "end": "2379080"
  },
  {
    "text": "logic on network packets. And it proceeds and prints them\nout to the users' terminal.",
    "start": "2379080",
    "end": "2384860"
  },
  {
    "text": "So what would it take to sandbox\ntcpdump with Unix primitives?",
    "start": "2384860",
    "end": "2391180"
  },
  {
    "text": "Have you restricted privileges? So I guess the one\nproblem with Unix is that you basically have\nto-- well, the only way",
    "start": "2391180",
    "end": "2399300"
  },
  {
    "text": "to really change\nprivileges is to change the inputs into the\ndecision function that decides whether you can actually\naccess some object or not.",
    "start": "2399300",
    "end": "2406610"
  },
  {
    "text": "And the only things\nyou can really change are, well, you can change\nthe privilges of the process,",
    "start": "2406610",
    "end": "2411859"
  },
  {
    "text": "which means it sends\nUID to something else. Or you could change\nthe permissions on various objects that are\nlaying around in your system.",
    "start": "2411860",
    "end": "2421510"
  },
  {
    "text": "Or probably both,\nin fact, right? If you wanted to\nsandbox tcpdump, you'd probably have to\npick some extra user ID",
    "start": "2421510",
    "end": "2427850"
  },
  {
    "text": "and switch to that\nwhile you're running. Probably not an ideal\nplan, because you probably",
    "start": "2427850",
    "end": "2436660"
  },
  {
    "text": "don't mean for multiple\ninstances of tcpdump to run as the same user ID. So if I compromise one\ninstance of tcpdump,",
    "start": "2436660",
    "end": "2442840"
  },
  {
    "text": "it doesn't really mean I\nwant to allow that factor to now control the other\ninstances of tcpdump running on my machine.",
    "start": "2442840",
    "end": "2449069"
  },
  {
    "text": "So that's potentially a bad\npart of using user IDs here. Another problem is that,\nin Unix, you actually",
    "start": "2449070",
    "end": "2455530"
  },
  {
    "text": "have to be root in\norder to change the user ID of the process or something\nelse, or user privileges",
    "start": "2455530",
    "end": "2461215"
  },
  {
    "text": "or switch them to\nsomething else. That's not great either. And another problem\nis that, regardless",
    "start": "2461215",
    "end": "2468080"
  },
  {
    "text": "of what your user ID\nis, there could be files that allow access to them.",
    "start": "2468080",
    "end": "2473829"
  },
  {
    "text": "So there could be world\nwritable or world readable files in your file system. Like your etc password file.",
    "start": "2473830",
    "end": "2479730"
  },
  {
    "text": "Regardless of what your\nUID is, the process will still be able to\nread that password. So that's not so nice.",
    "start": "2479730",
    "end": "2486069"
  },
  {
    "text": "So the result, in order\nto sandbox a unit, you probably have to do both--\nsome UID changing and maybe",
    "start": "2486070",
    "end": "2496257"
  },
  {
    "text": "careful look at the\npermissions of all the objects to convince yourself that\nthere's no world writeable file that's really sensitive.",
    "start": "2496257",
    "end": "2501714"
  },
  {
    "text": "Or there's no\nworld readable file that you don't want that\nhacker to get access to. And I guess [INAUDIBLE] true\nthat you get another mechanism",
    "start": "2501714",
    "end": "2508200"
  },
  {
    "text": "unit that you can use. But it all starts to add up. If you see it\nthrough, then it might be hard to share files or\nshare directories and so on.",
    "start": "2508200",
    "end": "2516681"
  },
  {
    "text": "So does that make sense? Just in terms of\ncontrast for what Capsicum is trying to solve?",
    "start": "2516681",
    "end": "2522393"
  },
  {
    "text": "Any questions about Unix stuff? All right. So let's look at how Capsicum\ntries to solve this problem.",
    "start": "2522393",
    "end": "2530650"
  },
  {
    "text": "So in Capsicum, as\nwe keep alluding to, the plan is very much that once\nyou enter the sandboxing mode,",
    "start": "2530650",
    "end": "2538329"
  },
  {
    "text": "everything is going\nto be accessed only through capability. So if you don't\nhave a capability,",
    "start": "2538330",
    "end": "2543490"
  },
  {
    "text": "you simply cannot\naccess any objects. So these guys, in the\npaper, make a huge deal",
    "start": "2543490",
    "end": "2552000"
  },
  {
    "text": "about global namespaces. So what's this thing\nabout a global namespace,",
    "start": "2552000",
    "end": "2557720"
  },
  {
    "text": "and why are they so\nworried about it? ",
    "start": "2557720",
    "end": "2563155"
  },
  {
    "text": "What's an example of\na global namespace these guys worry about? AUDIENCE: [INAUDIBLE].",
    "start": "2563155",
    "end": "2568534"
  },
  {
    "text": "PROFESSOR: Yeah. So a file system from them\nis sort of the prime example of a global namespace. You can start a slash, and\nyou can basically enumerate",
    "start": "2568534",
    "end": "2575420"
  },
  {
    "text": "any file you could, right? Like go to someone's\nhome directory-- /home/nickolai/\nsomething, something.",
    "start": "2575420",
    "end": "2583748"
  },
  {
    "text": "Why is this bad? Why are they against global\nnamespaces in Capsicum? ",
    "start": "2583748",
    "end": "2594349"
  },
  {
    "text": "What do you think? Yeah? AUDIENCE: Well, if you\nhave the wrong permissions, then use authorities, and\nthen you can get in trouble.",
    "start": "2594350",
    "end": "2600534"
  },
  {
    "text": "PROFESSOR: Yeah. So the problem is that\nthis is Unix after all. So there are still regular\npermissions on file.",
    "start": "2600534",
    "end": "2607369"
  },
  {
    "text": "So maybe you really want\nto sandbox some process and can't read anything\nat all in the system and can't write to anything.",
    "start": "2607370",
    "end": "2612970"
  },
  {
    "text": "But if you can name a file\nstarting from scratch, you'll find some stupid user\nthat has a world writable",
    "start": "2612970",
    "end": "2618060"
  },
  {
    "text": "file in their home directory. And that would be not so great\nfor the sandboxing client.",
    "start": "2618060",
    "end": "2623874"
  },
  {
    "text": "And I guess more generally,\nthe way they're thinking of it is that, with capabilities, you\ncould, in principle, enumerate",
    "start": "2623874",
    "end": "2630430"
  },
  {
    "text": "exactly all the objects\nthat a process has. Because you could just\nenumerate all the capabilities",
    "start": "2630430",
    "end": "2636030"
  },
  {
    "text": "in the file descriptor table,\nor whatever it is that's storing capabilities for you. And those are the only things\nthat the process could ever",
    "start": "2636030",
    "end": "2643970"
  },
  {
    "text": "touch. And if you ever have access\nto our global namespace, and this was\npotentially unbounded.",
    "start": "2643970",
    "end": "2649089"
  },
  {
    "text": "Because you could--\neven if you have some limited set\nof capabilities, maybe you'll start from slash\nagain and find some new file,",
    "start": "2649090",
    "end": "2654849"
  },
  {
    "text": "and you'll never\nreally know what is the set of\noperations or objects that a process could access.",
    "start": "2654850",
    "end": "2662120"
  },
  {
    "text": "So this is the reason they're so\nworried about global namespaces because it goes against their\ngoal of precisely controlling",
    "start": "2662120",
    "end": "2668775"
  },
  {
    "text": "all the things that a sandbox\nprocess should have access to.",
    "start": "2668775",
    "end": "2673880"
  },
  {
    "text": "Make sense? All right. So they tried to eliminate\nglobal namespaces",
    "start": "2673880",
    "end": "2679850"
  },
  {
    "text": "with a bunch of kernel changes\nto the FreeBSD, in their case, kernel to make sure that\nall the operations go",
    "start": "2679850",
    "end": "2687960"
  },
  {
    "text": "through some kind of capability,\nwhich is, in their case, a file descriptor.",
    "start": "2687960",
    "end": "2694190"
  },
  {
    "text": "So just to double check, do\nwe really need kernel changes? What if we just do\nthis in a library?",
    "start": "2694190",
    "end": "2700350"
  },
  {
    "text": "So we implement Capsicum, which\nthey already have a library. And all we do is we change\nall these functions,",
    "start": "2700350",
    "end": "2705700"
  },
  {
    "text": "like open, read, and write,\nto all very exclusive use capabilities. So all operations will go\nthrough some capability,",
    "start": "2705700",
    "end": "2712010"
  },
  {
    "text": "and look it up in the\nfile table, et cetera. Does that work?",
    "start": "2712010",
    "end": "2717140"
  },
  {
    "text": "Yeah? AUDIENCE: You could\nalways make a sys call. PROFESSOR: Yeah. So the problem is that there\nwas this existing set of systems",
    "start": "2717140",
    "end": "2722551"
  },
  {
    "text": "calls the kernel will accept. And even if you\nimplement a nice library, it doesn't prevent a bad\nprocess or a compromised process",
    "start": "2722551",
    "end": "2728240"
  },
  {
    "text": "from making the\nsys call directly. And then you have to\nhave the kernel enforce something or other.",
    "start": "2728240",
    "end": "2733786"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. So I think it's a\nquestion of-- I guess",
    "start": "2733786",
    "end": "2739246"
  },
  {
    "text": "what is your threat model? Exactly. So for the compiler,\nthe threat model is that the programmer is\nmaybe not paying attention",
    "start": "2739247",
    "end": "2747230"
  },
  {
    "text": "a whole lot, but it's not really\na compromised compiler process, not an arbitrary code. So if we just help the\nwell-meaning developer do",
    "start": "2747230",
    "end": "2754750"
  },
  {
    "text": "the right thing, then a\nlibrary will probably suffice. On the other hand, if we're\ntalking about a process that",
    "start": "2754750",
    "end": "2760990"
  },
  {
    "text": "could be our executing\narbitrary code and could be trying to\nbypass our mechanisms in any possible\nway, then we have",
    "start": "2760990",
    "end": "2767210"
  },
  {
    "text": "to have a strong\nenforcement boundary. And a library doesn't provide\nany kind of strong enforcement guarantees.",
    "start": "2767210",
    "end": "2772660"
  },
  {
    "text": "Whereas a kernel, in\nour case, would do that. OK. So what do they actually make in\nterms of changes to the kernel?",
    "start": "2772660",
    "end": "2780805"
  },
  {
    "text": "So I guess the first\nthing is this system call that they call cap_enter.",
    "start": "2780805",
    "end": "2786780"
  },
  {
    "text": " And what happens once\nyou run cap_enter?",
    "start": "2786780",
    "end": "2793049"
  },
  {
    "text": "Once you've [INAUDIBLE]\ncap_enter from your process? ",
    "start": "2793049",
    "end": "2798309"
  },
  {
    "text": "So as far as I can\ntell, what happens is that the kernel will stop\naccepting any system calls that",
    "start": "2798309",
    "end": "2804950"
  },
  {
    "text": "refer to global namespaces. And the only thing\nyou'll be able to do is refer to existing\nfile descriptors",
    "start": "2804950",
    "end": "2812650"
  },
  {
    "text": "that you have open\nin your process. So cap_enter will put your\nprocess in a special mode where",
    "start": "2812650",
    "end": "2818340"
  },
  {
    "text": "you cannot use the regular\nsystem called open, and instead you have to\ndo things like openat.",
    "start": "2818340",
    "end": "2826058"
  },
  {
    "text": "So there's this\nnew sort of family of systems called, in Unix\nlike operating systems, where instead of having open\ntake a single path name,",
    "start": "2826059",
    "end": "2833280"
  },
  {
    "text": "you can actually\nyou openat, where you pass it a first\nargument which is a file descriptor\nfor a directory",
    "start": "2833280",
    "end": "2840110"
  },
  {
    "text": "and the second is\nsome sort of a name. And the open at system\ncall will open this name",
    "start": "2840110",
    "end": "2847609"
  },
  {
    "text": "relative to whatever directory\nthe file descriptor points to. So this is a much more\ncapability-like version",
    "start": "2847610",
    "end": "2853430"
  },
  {
    "text": "of open, where you can still\nhave file descriptors pointing to directories, but\nyou can-- well, sorry.",
    "start": "2853430",
    "end": "2862579"
  },
  {
    "text": "You can still direct\nyour operation. But in order to\ndo this, you have to have a capability\nto the directory",
    "start": "2862580",
    "end": "2867871"
  },
  {
    "text": "in the form of an open\nfile descriptor for that [INAUDIBLE]. Make sense?",
    "start": "2867872",
    "end": "2873943"
  },
  {
    "text": "OK. So do they need any\nother kernel changes? Is there anything\nelse they worry about?",
    "start": "2873944",
    "end": "2880630"
  },
  {
    "text": " So I guess there's\nanother-- yeah?",
    "start": "2880630",
    "end": "2886086"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. So what do they do about\nnetwork access, right? So what happens in\ncapability mode?",
    "start": "2886086",
    "end": "2892073"
  },
  {
    "text": "AUDIENCE: I guess they have\ncapabilities for security packets [INAUDIBLE].",
    "start": "2892073",
    "end": "2897365"
  },
  {
    "text": "PROFESSOR: Yes. So I think the\nway they basically do it is that they treat the\nnetwork as a global namespace,",
    "start": "2897365",
    "end": "2902682"
  },
  {
    "text": "very much like a file system. So I think once you\nenter capability mode,",
    "start": "2902682",
    "end": "2908019"
  },
  {
    "text": "you cannot create a new socket. Or you cannot create a new\nsocket and connect to some",
    "start": "2908020",
    "end": "2913319"
  },
  {
    "text": "arbitrary machine, or to some\narbitrary address or fort number. You have to basically create all\nthe connections you want ahead",
    "start": "2913320",
    "end": "2920710"
  },
  {
    "text": "of time and fill them\nin as capabilities. Or maybe you'd have to get\nthem from someone that will pass you a file descriptor.",
    "start": "2920710",
    "end": "2926184"
  },
  {
    "text": "But basically, once\nyou're in capability mode, the set of file descriptors you\nhave open completely enumerates",
    "start": "2926185",
    "end": "2931280"
  },
  {
    "text": "all the machines\nyou'll ever talk to. So you can find\nopen connections. Maybe you're\nlistening on a forge. That's OK.",
    "start": "2931280",
    "end": "2937050"
  },
  {
    "text": "But you cannot connect\nto an address specified by an absolute name, kind of\nlike a global namespace would",
    "start": "2937050",
    "end": "2942453"
  },
  {
    "text": "allow you to do it. That make sense? So it's access through the\nnetworking namespace, as well.",
    "start": "2942453",
    "end": "2949309"
  },
  {
    "text": "What do they do for processes? So another global\nnamespace, I guess, in Unix,",
    "start": "2949310",
    "end": "2954400"
  },
  {
    "text": "is the the PIDs themselves. So the example of a\nsystem call that operates in this name space is \"kill.\"",
    "start": "2954400",
    "end": "2960090"
  },
  {
    "text": "So I could kill PID 25. And I could-- well, presumably\nI'll put a single number in there, too.",
    "start": "2960090",
    "end": "2966110"
  },
  {
    "text": "But I could actually kill a\nprocess by its PID number. How do they fix\nthis in Capsicum?",
    "start": "2966110",
    "end": "2975320"
  },
  {
    "text": "What's their plan? ",
    "start": "2975320",
    "end": "2981553"
  },
  {
    "text": "Yeah? AUDIENCE: File descriptors\nwith processes. PROFESSOR: Yeah. It's actually kind of cool. It's like, I wish Unix\nhad this all along.",
    "start": "2981553",
    "end": "2987299"
  },
  {
    "text": "Which is that, instead of\nhaving these different kinds of numbers or PIDs, instead,\nwhen you fork off a process,",
    "start": "2987300",
    "end": "2994630"
  },
  {
    "text": "actually having\nnew variant of fork called pdfork, or\nProcess Descriptor Fork.",
    "start": "2994630",
    "end": "3001300"
  },
  {
    "text": "And what it does is when\nit creates a child process, it actually sticks a reference\nto that child process",
    "start": "3001300",
    "end": "3007700"
  },
  {
    "text": "into your file descriptor\ntable somewhere. And this is your new process. And you can operate\non a child process",
    "start": "3007700",
    "end": "3013700"
  },
  {
    "text": "by specifying the file\ndescriptor number. Well, it would be pretty\ncool, because you can now pass your child\nprocess to someone else",
    "start": "3013700",
    "end": "3019550"
  },
  {
    "text": "and say, well, if you\ncan go and kill them now, or you can manage this\nprocess however you want, you'll get notifications\nwhen the process dies.",
    "start": "3019550",
    "end": "3026560"
  },
  {
    "text": "It'll look like a readable\nfile descriptor, et cetera. So they really try to\nhomogenize everything",
    "start": "3026560",
    "end": "3034530"
  },
  {
    "text": "into looking like a file\ndescriptor of some sort here. And with these\nkernel changes, you",
    "start": "3034530",
    "end": "3040694"
  },
  {
    "text": "can finally have all\nthe functionalities you might care about. You have the support\nfor sockets already,",
    "start": "3040695",
    "end": "3046110"
  },
  {
    "text": "process descriptors, et cetera. And you have a way\nof constraining",
    "start": "3046110",
    "end": "3052349"
  },
  {
    "text": "what the process can do. Because it cannot refer to any\nof the global names anymore after [INAUDIBLE].",
    "start": "3052350",
    "end": "3059690"
  },
  {
    "text": "All right. Any questions? So here's an interesting puzzle.",
    "start": "3059690",
    "end": "3065700"
  },
  {
    "text": "I was trying to\nunderstand from the paper. They make a big\ndeal about dot dot in looking up directory names.",
    "start": "3065700",
    "end": "3072819"
  },
  {
    "text": "So they basically say, well,\nonce you're in capability mode, when you pass a\nparticular name to openat,",
    "start": "3072820",
    "end": "3079430"
  },
  {
    "text": "you cannot use dot\ndot in those names. And presumably, if\nyou have a Simulink, if a Simulink's target\ncontains dot dot,",
    "start": "3079430",
    "end": "3085205"
  },
  {
    "text": "they will reject it if\nyou're in capability mode. So is this strictly required?",
    "start": "3085205",
    "end": "3091830"
  },
  {
    "text": "Could you imagine a\nsafe design in principle that allows the use of dot dot? ",
    "start": "3091830",
    "end": "3100330"
  },
  {
    "text": "Yeah. AUDIENCE: Well, you'd need to be\nable to find whether they have a file or a capability that\nallows the masses to the parent",
    "start": "3100330",
    "end": "3106892"
  },
  {
    "text": "directory. PROFESSOR: Right. AUDIENCE: So it's\ntrivial to go down, because any subdirectory--\nyou already have access to it",
    "start": "3106892",
    "end": "3112908"
  },
  {
    "text": "by having the capability. PROFESSOR: That's right. Yeah. AUDIENCE: But going\nup, you need to see whether you have any\ncapabilities for the parent",
    "start": "3112908",
    "end": "3118050"
  },
  {
    "text": "directory. PROFESSOR: That's right. Yeah. AUDIENCE: Search for it somehow. PROFESSOR: Yeah. So that's a little bit tricky. And also, it goes\nagainst the grain",
    "start": "3118050",
    "end": "3123503"
  },
  {
    "text": "of this whole explicit\nauthority thing. What about if you're\nusing dot dot inside sort",
    "start": "3123503",
    "end": "3129895"
  },
  {
    "text": "of a single open call? So for example, what if you\ncall something like openat some",
    "start": "3129895",
    "end": "3135800"
  },
  {
    "text": "particular directory or\nfile descriptor number, and you open something like,\nI don't know, b/c/../..? ",
    "start": "3135800",
    "end": "3146690"
  },
  {
    "text": "In principle, this\nmight be safe, right? Because you go down some\ndirectory, and then you just climb back up out of it.",
    "start": "3146690",
    "end": "3153770"
  },
  {
    "text": "Yeah? AUDIENCE: What if\nc is [INAUDIBLE]? PROFESSOR: Yeah. So it's a little bit\ntricky, of course, to define exactly what\nit means to be safe.",
    "start": "3153770",
    "end": "3160570"
  },
  {
    "text": "Right? You probably have to make sure\nthat c isn't a Simulink that goes somewhere else and so on.",
    "start": "3160570",
    "end": "3166160"
  },
  {
    "text": "Yeah. That's a fairly tricky\nproposition, to get this right. And I think, in the\npaper, what they basically argue about is\nthat it's actually",
    "start": "3166160",
    "end": "3172000"
  },
  {
    "text": "quite difficult in practice\nto implement a set of checks that's sufficient and\nbypasses all the possible rate",
    "start": "3172000",
    "end": "3177990"
  },
  {
    "text": "conditions here. So they basically just\ndo the conservative thing and disallow any\ndot dot at any time",
    "start": "3177990",
    "end": "3184190"
  },
  {
    "text": "once you're in capability mode. There's some interesting\nrate conditions",
    "start": "3184190",
    "end": "3189330"
  },
  {
    "text": "you could come up with here. The lecture notes\nhave more details. But basically I\nthink these guys are",
    "start": "3189330",
    "end": "3196010"
  },
  {
    "text": "being extra cautious in\ndefining what's allowed and what's not allowed\nin capability mode.",
    "start": "3196010",
    "end": "3202700"
  },
  {
    "text": "OK. So here, to answer\nyour question, once you enter\ncapability mode, it seems to be all controlled\nby your file table.",
    "start": "3202700",
    "end": "3210505"
  },
  {
    "text": "Does your UID still matter,\nonce you enter capability mode? ",
    "start": "3210505",
    "end": "3221020"
  },
  {
    "text": "[INAUDIBLE] Yeah? AUDIENCE: Well, you could\nstill launch a process",
    "start": "3221020",
    "end": "3226080"
  },
  {
    "text": "that doesn't use capabilities. PROFESSOR: No. Actually, no, you can't. You have to make sure that--\notherwise you could escape,",
    "start": "3226080",
    "end": "3232520"
  },
  {
    "text": "like well, I can't access--\nwhy don't you run this guy? [INAUDIBLE] So yeah, cap_enter is inherited\nby all the children, which",
    "start": "3232520",
    "end": "3239535"
  },
  {
    "text": "is actually hugely important. Yeah? ",
    "start": "3239535",
    "end": "3246000"
  },
  {
    "text": "Anyone else? So what if we kill the UID? So it's supposed to be\nlike going to cap_enter,",
    "start": "3246000",
    "end": "3253591"
  },
  {
    "text": "and we just kill the UID\nof the current process. We don't actually care\nwhat it is anymore. And then the process\ntries to open a file.",
    "start": "3253591",
    "end": "3259225"
  },
  {
    "text": "What checks should apply? Yeah? AUDIENCE: Oh, I was\nthinking that the UID is",
    "start": "3259225",
    "end": "3265191"
  },
  {
    "text": "useful for logging\npurposes as well, like being able to tell\nif you did something. PROFESSOR: So\nyeah, you're right. Actually, yeah. So that would be actually\nkind of damaging, right?",
    "start": "3265191",
    "end": "3270930"
  },
  {
    "text": "Like I spawned some sandbox\nprocess on my machine and it loses the UID. I'm like I have a\nhundred processes running",
    "start": "3270930",
    "end": "3276460"
  },
  {
    "text": "on my machine, and I have\nno idea what they are. So that's probably not a good\nplan for a management purpose. You're absolutely right.",
    "start": "3276460",
    "end": "3281555"
  },
  {
    "text": "But I'm just sort of\nhypothetically saying, well, do we need it for\naccess control, I guess. Yeah?",
    "start": "3281555",
    "end": "3286750"
  },
  {
    "text": "AUDIENCE: Maybe if\nthis UID is only supposed to be able to\naccess this file by reading or whatever, but you have\nthe file descriptor for it,",
    "start": "3286750",
    "end": "3294075"
  },
  {
    "text": "but then if you\nlose the UID, you might get permissions to write\n[INAUDIBLE] or something? PROFESSOR: Yeah. I think actually what it\nshows up in is in directories.",
    "start": "3294075",
    "end": "3303410"
  },
  {
    "text": "Because once you add a\ncapability to a file, that's basically it. You have it open with particular\nprivileges, et cetera.",
    "start": "3303410",
    "end": "3308600"
  },
  {
    "text": "But the problem is that they\nhave this hybrid design where they say, well, you can\nactually add capabilities to directories, and\nyou can open a new file",
    "start": "3308600",
    "end": "3315510"
  },
  {
    "text": "as you're running along. And it might be the case\nthat you add a capability to a directory, like /etc.",
    "start": "3315510",
    "end": "3322200"
  },
  {
    "text": "And you don't have access\nto necessarily all the files in /etc. But once you enter\ncapability mode,",
    "start": "3322200",
    "end": "3327440"
  },
  {
    "text": "you can now try to open\nthose files by saying, well, I have access to\nthe /etc directory. It's open already.",
    "start": "3327440",
    "end": "3332850"
  },
  {
    "text": "Why don't you give\nme the file named password in that directory? And the kernel still needs to\nmake an access control decision",
    "start": "3332850",
    "end": "3338780"
  },
  {
    "text": "on whether to allow you to\nopen a file in that directory with either read mode or\nwrite mode or what have you.",
    "start": "3338780",
    "end": "3345010"
  },
  {
    "text": "So I think this is the one\nplace where you still need this ambient privilege, to\nsome extent, because they're",
    "start": "3345010",
    "end": "3350619"
  },
  {
    "text": "trying to build this\ncompatible design where you can have semi-natural\nsemantics for how directories",
    "start": "3350620",
    "end": "3356779"
  },
  {
    "text": "work. Does that make sense? it's like one leftover place,\nkind of for compatibility",
    "start": "3356780",
    "end": "3362920"
  },
  {
    "text": "reasons, or at least the\nway that Unix file systems are typically set up. AUDIENCE: Are there\nany other places?",
    "start": "3362920",
    "end": "3369649"
  },
  {
    "text": "PROFESSOR: Good question. I couldn't think\nof one off hand, but I guess I would have to\nget their previous desource code to really figure\nout what's going on.",
    "start": "3369649",
    "end": "3377980"
  },
  {
    "text": "I think most of the\nother situations don't really\nrequire a UID check. Because for networking,\nit doesn't show up.",
    "start": "3377980",
    "end": "3383860"
  },
  {
    "text": "I think for process descriptors\nit doesn't show up, either. If you have it, then\nyou just have it.",
    "start": "3383860",
    "end": "3389660"
  },
  {
    "text": "So I think it probably is\njust file system operations. For shared memory, it's also--\nonce you have a shared memory",
    "start": "3389660",
    "end": "3395920"
  },
  {
    "text": "segment, you have it open. ",
    "start": "3395920",
    "end": "3401232"
  },
  {
    "text": "Yeah? AUDIENCE: Could\nyou explain again how exactly the user ID matters\nif you have a capability?",
    "start": "3401232",
    "end": "3407404"
  },
  {
    "text": "PROFESSOR: Yeah. So I think where it\nmatters is, you have a capability to a directory.",
    "start": "3407404",
    "end": "3414910"
  },
  {
    "text": "The question is, what does\nthe capability represent? So one interpretation that--\nfor example, some capability",
    "start": "3414910",
    "end": "3421260"
  },
  {
    "text": "system state, not Capsicum. Pure capability systems. They say, well, if you have\na capability to a directory,",
    "start": "3421260",
    "end": "3426869"
  },
  {
    "text": "then of course you have\naccess to all the files in that directory, no\nquestions about it. And in Unix, this is\ntypically not the case.",
    "start": "3426870",
    "end": "3433225"
  },
  {
    "text": "You can open a\ndirectory like /etc, but there's lots of system\nfiles in there that are maybe",
    "start": "3433225",
    "end": "3438670"
  },
  {
    "text": "private, like the private key of\nyour server is stored in there. And just because you can look\nat a directory and open it",
    "start": "3438670",
    "end": "3444250"
  },
  {
    "text": "and list it doesn't mean that\nyou cannot open the files in that directory. So in Capsicum, if you\nopen a directory like /etc,",
    "start": "3444250",
    "end": "3452392"
  },
  {
    "text": "and then you enter\ncapability mode. And then you say,\nwell, hey, I don't know what this directory is. I just add a file\ndescriptor to it.",
    "start": "3452392",
    "end": "3457658"
  },
  {
    "text": "There's a file in\nthere called \"key.\" Why don't you open\nthat file \"key\"? And at this point,\nyou probably don't",
    "start": "3457658",
    "end": "3464069"
  },
  {
    "text": "want to allow this\ncapability-based processor to just open it, because\nthat wasn't the intent. They'll allow you to bypass\nthe Unix permissions on a file.",
    "start": "3464070",
    "end": "3472060"
  },
  {
    "text": "So I think the\nauthors of this paper are careful to design a\nsystem which would not violate",
    "start": "3472060",
    "end": "3479850"
  },
  {
    "text": "existing security mechanisms. AUDIENCE: So you're saying\nthat you can, in some cases, use a combination of the two?",
    "start": "3479850",
    "end": "3486369"
  },
  {
    "text": "So even though it'll be able\nto change it to directory, inside the directory,\nwhich files you can access depends on your user ID?",
    "start": "3486370",
    "end": "3491839"
  },
  {
    "text": "PROFESSOR: Yeah, exactly. So in Capsicum, the way they\nget it to work in practice is that, actually, before\nyou enter capability mode,",
    "start": "3491839",
    "end": "3499890"
  },
  {
    "text": "you have to guess. Well, what files am I\ngoing to need later? I'm going to need\nsome shared libraries. I'll need some text files.",
    "start": "3499890",
    "end": "3505060"
  },
  {
    "text": "I'll need some templates. I'll need some network\nconnections, et cetera. So you open all these\nthings ahead of time.",
    "start": "3505060",
    "end": "3510960"
  },
  {
    "text": "And you don't always necessarily\nknow which exact file you need. So what these guys\nsupport as well, you can actually just open\na directory file descriptor,",
    "start": "3510960",
    "end": "3518045"
  },
  {
    "text": "as well. And then I can look up the\nparticular files later. But it might be\nthat the files don't have all the same permissions.",
    "start": "3518045",
    "end": "3524209"
  },
  {
    "text": "So that's exactly\nthe reason, yeah. Make sense?",
    "start": "3524209",
    "end": "3529610"
  },
  {
    "text": "All right. So this is the kernel\nmechanism part of it.",
    "start": "3529610",
    "end": "3535560"
  },
  {
    "text": "Why do they also need this\nlibrary for libcapsicum?",
    "start": "3535560",
    "end": "3541830"
  },
  {
    "text": "I guess there's two things that\nthey support in that library, as far as I can tell,\nor two main things.",
    "start": "3541830",
    "end": "3547329"
  },
  {
    "text": "One is that they implement this\nfunction they call lch_start",
    "start": "3547330",
    "end": "3555342"
  },
  {
    "text": "that you should use\ninstead of cap_enter.",
    "start": "3555342",
    "end": "3561930"
  },
  {
    "text": "And the other sort of\nfeature the library provides in libcapsicum is this\nnotion called fd lists",
    "start": "3561930",
    "end": "3571120"
  },
  {
    "text": "instead of passing file\ndescriptors by number. So this fd list\nthing is probably the easiest thing to explain.",
    "start": "3571120",
    "end": "3576460"
  },
  {
    "text": "It's basically a generalization,\nor maybe a clean up, of how Unix manages\nand passes file",
    "start": "3576460",
    "end": "3583520"
  },
  {
    "text": "descriptors between process. So in traditional\nUnix and Linux,",
    "start": "3583520",
    "end": "3589580"
  },
  {
    "text": "how you use it today, typically\nwhen you launch a process, you can pass it some\nfile descriptors. You just open some\nfile descriptors",
    "start": "3589580",
    "end": "3596020"
  },
  {
    "text": "at particular integer\nnumbers in this table and you run the child\nprocess that you want to run. Or you run a particular\nbinary, and it",
    "start": "3596020",
    "end": "3603180"
  },
  {
    "text": "inherits all these open\nslots in the fd table. But there's no real good\nway to name these things",
    "start": "3603180",
    "end": "3610370"
  },
  {
    "text": "other than by number. So the somewhat\nsurprising convention, if you haven't\n[INAUDIBLE] before,",
    "start": "3610370",
    "end": "3616660"
  },
  {
    "text": "is that, well, slot\n0 is your input. Slot 1 is your output. Slot 2 is where you should\nprint error messages to.",
    "start": "3616660",
    "end": "3624010"
  },
  {
    "text": "And that's how\nUnix sort of works. And it sort of works OK if you\nare just passing these three",
    "start": "3624010",
    "end": "3632240"
  },
  {
    "text": "files or streams to a process. But in Capsicum,\nwhat's happening",
    "start": "3632240",
    "end": "3637569"
  },
  {
    "text": "is that you're passing down many\nmore file descriptors around. So you're passing a file\ndescriptor for some files.",
    "start": "3637570",
    "end": "3643893"
  },
  {
    "text": "You're passing a file descriptor\nfor a network connection, for a shared library,\nwhat have you.",
    "start": "3643894",
    "end": "3649320"
  },
  {
    "text": "And it becomes much more tedious\nto manage all these numbers. So basically, libcapsicum\nprovides an abstraction",
    "start": "3649320",
    "end": "3655370"
  },
  {
    "text": "for naming these past file\ndescriptors between processes by some sort of a\nhierarchical name,",
    "start": "3655370",
    "end": "3661810"
  },
  {
    "text": "instead of just these opaque\nintegers, if you will.",
    "start": "3661810",
    "end": "3666980"
  },
  {
    "text": "So that's one sort\nof simple thing that they provide\nin their library. So I can pass a file\ndescriptor to a process",
    "start": "3666980",
    "end": "3673260"
  },
  {
    "text": "and give it a name. And it doesn't really\nmatter what number it has, a little easier. That make sense? OK.",
    "start": "3673260",
    "end": "3679450"
  },
  {
    "text": "So then they have\nthis other mechanism, this much more elaborate\nway to start a sandbox.",
    "start": "3679450",
    "end": "3685906"
  },
  {
    "text": "This lch, libcapsicum Host,\nAPI for starting a sandbox, instead of just entering\nthe capability mode.",
    "start": "3685906",
    "end": "3693342"
  },
  {
    "text": "So what happened? Why do they need something\nmore than just entering capability mode? What are you worried about\non creating a sandbox?",
    "start": "3693342",
    "end": "3699950"
  },
  {
    "text": "Yeah? AUDIENCE: It erases\nall the inherited stuff to give you a clean start.",
    "start": "3699950",
    "end": "3705524"
  },
  {
    "text": "PROFESSOR: Yeah. So I think they\nworry about trying to enumerate what are all the\nthings the sandbox has access",
    "start": "3705524",
    "end": "3711230"
  },
  {
    "text": "to. And the problem is that if\nyou just call cap_enter, technically, at the kernel\nmechanism level, as we talked",
    "start": "3711230",
    "end": "3718559"
  },
  {
    "text": "about just now, it worked. Right? It just prevents you from\nopening any new capabilities. But the problem is that there\nmight be lots of existing stuff",
    "start": "3718560",
    "end": "3725230"
  },
  {
    "text": "that the process\nalready has access to. So I guess the simplest\nexample is maybe",
    "start": "3725230",
    "end": "3731256"
  },
  {
    "text": "there are some file descriptors\nthat you forgot you had opened, and it'll just get\ninherited by this process.",
    "start": "3731256",
    "end": "3737309"
  },
  {
    "text": "So one example is they\nwere looking at tcpdump. And they realized that-- well,\nfirst, they changed tcpdump",
    "start": "3737310",
    "end": "3743950"
  },
  {
    "text": "just by calling\ncap_enter at the point just before they were about to\nparse all the network input.",
    "start": "3743950",
    "end": "3750594"
  },
  {
    "text": "So this works well, in some\nsense, because you can't get any more capabilities. But then they looked at\nthe open file descriptor,",
    "start": "3750594",
    "end": "3756331"
  },
  {
    "text": "and they realized that you have\ncomplete access to the user's terminal, because you have an\nopen file descriptor to it.",
    "start": "3756331",
    "end": "3761720"
  },
  {
    "text": "So you can actually\nsniff all the keystrokes that the user is typing\nand all that stuff. So it's probably not a\ngreat plan for tcpdump.",
    "start": "3761720",
    "end": "3768602"
  },
  {
    "text": "This compromise you probably\ndon't want sniffing everything you're typing. So instead they-- well,\nin tcpdump's case,",
    "start": "3768602",
    "end": "3776520"
  },
  {
    "text": "they manually changed\nthese file descriptors to add some capability\nbits to them,",
    "start": "3776520",
    "end": "3783010"
  },
  {
    "text": "to restrict what kinds\nof operations you can do. So remember, the capability,\nat least in Capsicum, has these extra bits that say,\nhere's the class of operations",
    "start": "3783010",
    "end": "3791030"
  },
  {
    "text": "you can perform on\na file descriptor. So they basically take what\nused to be file descriptor 0.",
    "start": "3791030",
    "end": "3797650"
  },
  {
    "text": "It pointed to the\nuser's terminal, tty. And originally, this was\njust a direct pointer",
    "start": "3797650",
    "end": "3803670"
  },
  {
    "text": "to the tty structure\nin the kernel. What they do is they\nactually-- in order to limit the kind of operations\nyou can perform on this file",
    "start": "3803670",
    "end": "3810070"
  },
  {
    "text": "descriptor, they basically\nintroduced some extra beta structure in the middle. This guy will point\nto the terminal. And the file\ndescriptor itself will",
    "start": "3810070",
    "end": "3816730"
  },
  {
    "text": "point to some sort of\na capability structure. And inside of it is the\npointer to the real file",
    "start": "3816730",
    "end": "3823040"
  },
  {
    "text": "that you're trying to access,\nas well as some restricted bits or permissions on\nthat file descriptor",
    "start": "3823040",
    "end": "3831590"
  },
  {
    "text": "object that you can do. In their case, they basically\ncan say for tcpdumps standard input, you cannot\ndo anything on it.",
    "start": "3831590",
    "end": "3837585"
  },
  {
    "text": "You can just see that it\nexists, and that's it. For the output file\ndescriptor, they say, well, you can write to it, but\nyou maybe can't reposition.",
    "start": "3837585",
    "end": "3843980"
  },
  {
    "text": "You can't [INAUDIBLE]\nback and forth, et cetera. Make sense?",
    "start": "3843980",
    "end": "3850280"
  },
  {
    "text": "So what else would\nyou worry about, in terms of starting a sandbox? So there is, I guess, the\nfile descriptor state. Anything else that matters?",
    "start": "3850280",
    "end": "3856234"
  },
  {
    "start": "3856234",
    "end": "3861448"
  },
  {
    "text": "Well, I guess in Unix it's\nfile descriptors and memory. That's pretty much it. So the other thing that\nthese guys worry about",
    "start": "3861448",
    "end": "3869400"
  },
  {
    "text": "is that it might be that\nin your address space, you previously allocated\nsome sensitive data.",
    "start": "3869400",
    "end": "3874600"
  },
  {
    "text": "And the process\nthat your sandbox is going to be able to\nread all its memory. So if there's\nmaybe some password",
    "start": "3874600",
    "end": "3880205"
  },
  {
    "text": "that you checked before when\nthe user was logging in, and you haven't\ncleared that yet, well, the sandbox\nprocess will be",
    "start": "3880205",
    "end": "3885749"
  },
  {
    "text": "able to read that\nand do something maybe interesting to that. So the way they\nsolved this problem",
    "start": "3885749",
    "end": "3890920"
  },
  {
    "text": "is, in lch_start, you basically\nhave to start a program fresh. You basically take a program.",
    "start": "3890920",
    "end": "3897270"
  },
  {
    "text": "You explicitly package\nup all the arguments you want to give it. You explicitly package up\nall the file descriptors you want to give it.",
    "start": "3897270",
    "end": "3902860"
  },
  {
    "text": "And then you start\na new process, or you would call\nexecutives to reinitialize your whole virtual memory space.",
    "start": "3902860",
    "end": "3909200"
  },
  {
    "text": "And then there's no\nquestion about what is the set of sensitive\ndata of extra privileges",
    "start": "3909200",
    "end": "3914370"
  },
  {
    "text": "that this process has. It's exactly what you\npassed to lch_start, in terms of a program name,\narguments, and capabilities.",
    "start": "3914370",
    "end": "3922039"
  },
  {
    "text": "Does that make sense? AUDIENCE: What would happen\nif the process that you're",
    "start": "3922040",
    "end": "3927160"
  },
  {
    "text": "starting is a setuid 0 binary? PROFESSOR: Yeah. I think these guys say\nthat they don't actually",
    "start": "3927160",
    "end": "3935380"
  },
  {
    "text": "allow setuid binaries\nin capability mode, just to avoid some\nweird interactions that would show up.",
    "start": "3935380",
    "end": "3940905"
  },
  {
    "text": "I think the rules\nthat they implement is that you could have\na setuid program that gets its privileges\nfrom a setuid binary,",
    "start": "3940905",
    "end": "3947770"
  },
  {
    "text": "and then it can call\ncapenter or lch_start. But once you're in\ncapability mode,",
    "start": "3947770",
    "end": "3952890"
  },
  {
    "text": "you cannot regain\nextra privileges. In principle, this could work,\nbut it would be very weird.",
    "start": "3952890",
    "end": "3958109"
  },
  {
    "text": "Because remember, the only\nplace where the UID matters, once you're in\ncapability mode, is in opening these files\ninside of a directory.",
    "start": "3958110",
    "end": "3964150"
  },
  {
    "text": "So it's not clear this\nis really a great plan for getting more privileges\nor [INAUDIBLE] there.",
    "start": "3964150",
    "end": "3970850"
  },
  {
    "text": "Make sense? Yeah? AUDIENCE: We talked\nabout earlier why the library doesn't really\nsupport strict separation",
    "start": "3970850",
    "end": "3977575"
  },
  {
    "text": "between those two. And then we just mentioned\nall these problems that you could use\n[INAUDIBLE], so we're still",
    "start": "3977575",
    "end": "3983799"
  },
  {
    "text": "not under a restriction to use\nlch_start necessarily, right? PROFESSOR: That's right. Yeah. So lch_start, here's sort\nof the way to think of it.",
    "start": "3983800",
    "end": "3990510"
  },
  {
    "text": "So you have an application,\nlike maybe tcpdump. Or gzip is the other\nthing they work with.",
    "start": "3990510",
    "end": "3996309"
  },
  {
    "text": "And what you're\nbasically assuming is the application is\nprobably not compromised, and there are some core part\nof the application that you",
    "start": "3996309",
    "end": "4002960"
  },
  {
    "text": "worry about sandboxing. In tcpdump's case, it's\nactually parsing packets coming from the network.",
    "start": "4002960",
    "end": "4008730"
  },
  {
    "text": "In gzip's case, it's\nactually taking the file and decompressing it. And you're basically assuming,\nwell, up until a point,",
    "start": "4008730",
    "end": "4014250"
  },
  {
    "text": "the process is probably\ndoing all the right things. It's not exploited. There's probably not a bug\nyet for the [INAUDIBLE] even.",
    "start": "4014250",
    "end": "4019420"
  },
  {
    "text": "So at that point,\nyou're trusting that it will run lch_start\ncorrectly and correctly set up the image, correctly set\nup all the capabilities,",
    "start": "4019420",
    "end": "4026580"
  },
  {
    "text": "and then restrict itself from\nmaking any further system calls outside its capability mode.",
    "start": "4026580",
    "end": "4031840"
  },
  {
    "text": "And then you run\nthe dangerous stuff. And by then, this setup\nhas happened correctly, and there's no way to\nescape out of that sandbox.",
    "start": "4031840",
    "end": "4040252"
  },
  {
    "text": "Make sense? All right. So I guess let's look at how\nyou actually use capability mode",
    "start": "4040252",
    "end": "4048230"
  },
  {
    "text": "to sandbox applications. So we talked a little\nbit about tcpdump. How do you isolate this process?",
    "start": "4048230",
    "end": "4056005"
  },
  {
    "text": "Another interesting\nexample they had was this gzip program that\ncompresses, decompresses files.",
    "start": "4056005",
    "end": "4064660"
  },
  {
    "text": "So why do they worry\nabout sandboxing it? I guess they worry that the\ndecompression code is going",
    "start": "4064660",
    "end": "4070420"
  },
  {
    "text": "to be potentially\nbuggy, or maybe there's some memory management\nerrors in how they manage the buffers during\ndecompression, et cetera.",
    "start": "4070420",
    "end": "4078099"
  },
  {
    "text": "So could they-- well, one\ninteresting question, I guess,",
    "start": "4078100",
    "end": "4085450"
  },
  {
    "text": "is why are the changes to\ngzip seemingly much more complicated than for tcpdump?",
    "start": "4085450",
    "end": "4096109"
  },
  {
    "start": "4096109",
    "end": "4103670"
  },
  {
    "text": "Any guesses?  Well as far as\nyou can tell, it's mostly just a question of how\nthe application is structured",
    "start": "4103670",
    "end": "4111639"
  },
  {
    "text": "internally, right? So if you had a application\nthat simply compressed",
    "start": "4111640",
    "end": "4119170"
  },
  {
    "text": "a single file, or\ndecompressed a single file, then it might be OK for us to\njust run it in capability mode",
    "start": "4119170",
    "end": "4128125"
  },
  {
    "text": "without really changing it. You just give it a new standard\nin for something to decompress, and the standard out goes\nto the decompressed output,",
    "start": "4128125",
    "end": "4135830"
  },
  {
    "text": "and that would work fine. The problem, as is\nalmost always the case here with these kind of\nsandboxing techniques,",
    "start": "4135830",
    "end": "4141899"
  },
  {
    "text": "is that the application actually\nhas much more complicated logic around it. So gzip, for\nexample, can compress",
    "start": "4141899",
    "end": "4147359"
  },
  {
    "text": "multiple files, et cetera. And in that case, you have some\nsort of a driver process on top",
    "start": "4147359",
    "end": "4153580"
  },
  {
    "text": "which actually has\nthese extra privileges to open multiple files, to\ncreate things, et cetera.",
    "start": "4153580",
    "end": "4158899"
  },
  {
    "text": "And the core logic needs to be\noften another helper process. And it was just so\nthe case in gzip",
    "start": "4158899",
    "end": "4164599"
  },
  {
    "text": "that the application\nwasn't structured in a way where this was already\na separate process doing",
    "start": "4164600",
    "end": "4169889"
  },
  {
    "text": "all the decompression\nor compression. So they had to change\ngzip's core implementation,",
    "start": "4169890",
    "end": "4176020"
  },
  {
    "text": "and, well, some structure of\nthe gzip application, instead",
    "start": "4176020",
    "end": "4182049"
  },
  {
    "text": "of just passing the data\nto the decompression function to actually\nsend it over an RPC call",
    "start": "4182050",
    "end": "4187060"
  },
  {
    "text": "or really just write it to\nsome almost file descriptor to help process the\nproblems on the side",
    "start": "4187060",
    "end": "4192659"
  },
  {
    "text": "and performs all\nthe decompression with almost no privileges. The only thing it\ncan do is return",
    "start": "4192660",
    "end": "4197760"
  },
  {
    "text": "the decompressed data,\nor the compressed data, back to the caller process. That roughly make sense?",
    "start": "4197760",
    "end": "4203670"
  },
  {
    "text": "What's going on in gzip? All right. So I guess one thing we asked\nfor the homework is how do you",
    "start": "4203670",
    "end": "4212179"
  },
  {
    "text": "actually use Capsicum in OKWS? So what do you guys think? Would it be useful? Would the OKWS guys\nhave been excited",
    "start": "4212180",
    "end": "4219385"
  },
  {
    "text": "and switched to FreeBSD because\nthis was much easier to use? Or is this a wash?",
    "start": "4219385",
    "end": "4225590"
  },
  {
    "text": "So what do you think? How would you use\nCapsicum in FreeBSD? Would this be much different?",
    "start": "4225590",
    "end": "4230954"
  },
  {
    "text": "Yeah. AUDIENCE: So it means\nyou can get rid of some of the jailing [INAUDIBLE].",
    "start": "4230954",
    "end": "4236944"
  },
  {
    "text": "PROFESSOR: Yeah. That's true. So truth seems to be completely\nsuperseded by this plan of having directory file\ndescriptors and capabilities.",
    "start": "4236944",
    "end": "4242980"
  },
  {
    "text": "So that's great. So you don't need the\nchroots setting it up. That seems messy. And this is much\nmore precise, also.",
    "start": "4242980",
    "end": "4248270"
  },
  {
    "text": "Because you can--\ninstead of having a chroot with lots of\nlittle things in there, you have to maybe set the\npermissions on there carefully.",
    "start": "4248270",
    "end": "4254397"
  },
  {
    "text": "You can just open exactly\nthe files that you need. So that seems like a plus. Any other benefits?",
    "start": "4254397",
    "end": "4260787"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE]. ",
    "start": "4260788",
    "end": "4266502"
  },
  {
    "text": "PROFESSOR: In OKWS, you mean? AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah. So in OKWS, right, you have\nthis OK launcher daemon that",
    "start": "4266502",
    "end": "4271880"
  },
  {
    "text": "had to launch all these guys. And it was the parent process. Only when they die,\nthe signal goes back",
    "start": "4271880",
    "end": "4278030"
  },
  {
    "text": "to this okld to restart\nthe crash process. And that thing had to\nrun this root, because it",
    "start": "4278030",
    "end": "4284155"
  },
  {
    "text": "had to sandbox things. There's actually a number of\nthings you could do better with Capsicum in OKWS.",
    "start": "4284155",
    "end": "4291240"
  },
  {
    "text": "So one example is\nyou could probably have okld have many\nfewer privileges. Because it might need to be\nroot initially to get fort 80.",
    "start": "4291240",
    "end": "4299410"
  },
  {
    "text": "But after that, it could set\nup sandboxes for everyone else without being root anymore. So that's kind of cool.",
    "start": "4299410",
    "end": "4304670"
  },
  {
    "text": "And maybe you can\neven delegate the job of responding a process\nto someone else, maybe a per service\nmonitor Damion",
    "start": "4304670",
    "end": "4310930"
  },
  {
    "text": "that just has this\nprocess descriptor handle, or process descriptor\nfor child process,",
    "start": "4310930",
    "end": "4316950"
  },
  {
    "text": "and whenever it crashes,\nstarts a new one. So I think this process\n[INAUDIBLE] helps things a lot.",
    "start": "4316950",
    "end": "4322745"
  },
  {
    "text": "And the fact that you can create\na sandbox without being root is also quite helpful, as well.",
    "start": "4322745",
    "end": "4329542"
  },
  {
    "text": "Any other stuff,\nwhat you could do? Yeah? AUDIENCE: You\ncould give each one a file descriptor with\nappend only mode to the log. PROFESSOR: Yeah.",
    "start": "4329542",
    "end": "4335053"
  },
  {
    "text": "So that's pretty cool. So as we were talking\nlast time, in OKWS, well, the oklogd maybe could\nhamper with the log file.",
    "start": "4335053",
    "end": "4343675"
  },
  {
    "text": "And who knows what\nthe kernel will allow it to do once it has\na file descriptor on the log file itself. But here, the fact\nthat we can do",
    "start": "4343675",
    "end": "4350090"
  },
  {
    "text": "much more of a\nprecise capability map on a file descriptor, well,\nwe could give it a log file",
    "start": "4350090",
    "end": "4355561"
  },
  {
    "text": "and say, well, you could just\nwrite to it, but not seek. So that basically\nmeans append only, if you're the only\nwriter to that file.",
    "start": "4355562",
    "end": "4361935"
  },
  {
    "text": "So that seems kind of nice. And you could prevent\nit from reading a file. You could say, well, you can\nonly write, but not read,",
    "start": "4361935",
    "end": "4367140"
  },
  {
    "text": "which is something\nthat's probably difficult to do with Unix\npermissions alone right now. ",
    "start": "4367140",
    "end": "4373253"
  },
  {
    "text": "Make sense? Any other ideas for how\nCapsicum might help? ",
    "start": "4373253",
    "end": "4379680"
  },
  {
    "text": "Would you wish there was\nmore stuff in Capsicum? I guess we always wish\nthere was more stuff. AUDIENCE: So one\nthing that perhaps",
    "start": "4379680",
    "end": "4385128"
  },
  {
    "text": "may be tricky is the\nservice team daemons need to connected to their\nbackend databases somehow.",
    "start": "4385128",
    "end": "4391617"
  },
  {
    "text": "Which might be remotely. But you don't want\nthe launch daemon to know about which\nservices each service",
    "start": "4391617",
    "end": "4397235"
  },
  {
    "text": "is going to connect to. PROFESSOR: Maybe, yeah. That's a good question, right? So in Capsicum, as we\nwere talking about,",
    "start": "4397235",
    "end": "4403990"
  },
  {
    "text": "the network is in\nglobal namespace. You have to have\nexisting file descriptors for all the outstanding\nconnections ahead of time.",
    "start": "4403990",
    "end": "4409909"
  },
  {
    "text": "AUDIENCE: Right. But you don't necessarily want\nokld to open up all the sockets for all the services. Because it might not know where\nthe services are connected.",
    "start": "4409910",
    "end": "4417940"
  },
  {
    "text": "PROFESSOR: That's right. Yeah. So that's a little bit\nof an awkward thing. I absolutely agree. And this is part\nof the reason why I think capabilities\nhaven't completely",
    "start": "4417940",
    "end": "4424950"
  },
  {
    "text": "subsumed everything\nin the security world, is because they are\nkind of awkward to use. Because the guy that gives\nyou all the privileges",
    "start": "4424950",
    "end": "4430430"
  },
  {
    "text": "has to know exactly what\nthings you're going to need, like these connections\nto backend servers. So at some level, maybe this\nis not such a huge problem",
    "start": "4430430",
    "end": "4438150"
  },
  {
    "text": "in OKWS. Because the launcher\ndaemon has to read a Config file and is going to pass\nthe token to the service",
    "start": "4438150",
    "end": "4443610"
  },
  {
    "text": "in the first place. So maybe the token is going\nto contain the host and port number to which\nyou're connected to. But I agree.",
    "start": "4443610",
    "end": "4449080"
  },
  {
    "text": "It's not great. Because especially,\nsuppose the database server disconnects you. Well, you're kind of stuck now.",
    "start": "4449080",
    "end": "4455150"
  },
  {
    "text": "The file server is\nnot connected anymore, and you can't\nconnect to a new one. So basically, if the database\nserver crashes, or restarts,",
    "start": "4455150",
    "end": "4460476"
  },
  {
    "text": "or the network\nbreaks, you basically have to terminate it,\nget yourself response, so you can get a new one of\nthese connections past you.",
    "start": "4460476",
    "end": "4467230"
  },
  {
    "text": "So it's maybe not a\ngreat plan in that sense. AUDIENCE: Could we wrap the\nsystem call, the function",
    "start": "4467230",
    "end": "4472518"
  },
  {
    "text": "[INAUDIBLE] to open a\nsocket so that it faults the middleman instead of the\nsocket that the users send out",
    "start": "4472518",
    "end": "4477602"
  },
  {
    "text": "to [INAUDIBLE]? PROFESSOR: Yeah. This is what I think the\nFreeBSD guys have done since.",
    "start": "4477602",
    "end": "4483130"
  },
  {
    "text": "Well, there's a\nbunch of situations like this, where you want to\nopen some file after the fact,",
    "start": "4483130",
    "end": "4488770"
  },
  {
    "text": "or you want to connect\nto something after going into capability mode. So the FreeBSD\ndevelopers have added",
    "start": "4488770",
    "end": "4494060"
  },
  {
    "text": "this daemon called Casper, that\nevery capability based process has a handle on.",
    "start": "4494060",
    "end": "4499470"
  },
  {
    "text": "And this Casper daemon runs\noutside of capability mode, and basically\nlistens to requests from sandbox processes.",
    "start": "4499470",
    "end": "4506380"
  },
  {
    "text": "And if you want\nto open some file, or if you want to send a\nnetwork connection, or a packet,",
    "start": "4506380",
    "end": "4512400"
  },
  {
    "text": "or something, but you didn't\nhave the right capability beforehand, then this Casper\ndaemon will do it for you.",
    "start": "4512400",
    "end": "4518250"
  },
  {
    "text": "But it carefully\nmaintains a list of things that every sandbox process\nshould or should not be able to do.",
    "start": "4518250",
    "end": "4524010"
  },
  {
    "text": "So it's like a systems service. So when you start a\ncapability process, or enter capability\nmode, by default,",
    "start": "4524010",
    "end": "4530900"
  },
  {
    "text": "this Casper thing will not allow\nyou to do anything extra funny. But you could say,\nwell, hey, I'm going to start the\nsandbox process.",
    "start": "4530900",
    "end": "4537050"
  },
  {
    "text": "And you can ask Casper,\nwell, please allow my process to do the following\nthings later.",
    "start": "4537050",
    "end": "4542977"
  },
  {
    "text": "So you could, right? And the cool thing is that\nyou can pass file descriptors or capabilities through\nfd passing in Unix.",
    "start": "4542977",
    "end": "4548700"
  },
  {
    "text": "So once you have a handle\non this Casper guy, you can get more\ncapabilities later on.",
    "start": "4548700",
    "end": "4555120"
  },
  {
    "text": "So it's, again, trade off\nbetween being pure capability world versus actually being\nprogrammable or easy to use.",
    "start": "4555120",
    "end": "4564330"
  },
  {
    "text": "So it seems to be working out. I think the particular thing\nthey use it for in FreeBSD,",
    "start": "4564330",
    "end": "4570230"
  },
  {
    "text": "or the thing that shows up\noften, is making DNS queries. So you want to be able to\nmake DNS queries once you're",
    "start": "4570230",
    "end": "4575600"
  },
  {
    "text": "in a sandbox. And actually, this is a problem\nthey ran into with tcpdump. Because when tcpdump is\nprinting your packets,",
    "start": "4575600",
    "end": "4580850"
  },
  {
    "text": "it wants to print the host\nname for an IP address. In order to do this, it has\nto talk to a DNS server. But you probably\ndon't want to connect",
    "start": "4580850",
    "end": "4586263"
  },
  {
    "text": "to a DNS server ahead of\ntime, or to every DNS server you might ever need. So instead, they use\nthis helper daemon",
    "start": "4586263",
    "end": "4592230"
  },
  {
    "text": "that's going to make\nDNS queries for you. Make sense?",
    "start": "4592230",
    "end": "4597388"
  },
  {
    "text": "All right. So I guess the last thing\nI wanted to talk about",
    "start": "4597388",
    "end": "4602905"
  },
  {
    "text": "is what are the security\nguarantees that Capsicum provides? So should you trust it?",
    "start": "4602905",
    "end": "4609120"
  },
  {
    "text": "How could Capsicum go wrong?  Presumably you can always\nhave security problems,",
    "start": "4609120",
    "end": "4615440"
  },
  {
    "text": "regardless of what mechanism\nyou're using underneath. But what particular\nthings should we worry about in\nCapsicum when we're",
    "start": "4615440",
    "end": "4621930"
  },
  {
    "text": "building some system here?  Suppose you have to\nattack this thing.",
    "start": "4621930",
    "end": "4628680"
  },
  {
    "text": "You have to attack this\ntcpdump thing, or gzip, or whatever it is\nthat they implemented.",
    "start": "4628680",
    "end": "4634060"
  },
  {
    "text": "What would you look at, in\nterms of bugs or problems? AUDIENCE: Well, it\ndepends on the developers",
    "start": "4634060",
    "end": "4639872"
  },
  {
    "text": "knowing what they're doing. So they might give\na bad capability. PROFESSOR: That's right.",
    "start": "4639872",
    "end": "4645220"
  },
  {
    "text": "Yeah. So it's actually one\ninteresting property of Capsicum is that it's not a guarantee\nthat the user of the system",
    "start": "4645220",
    "end": "4650640"
  },
  {
    "text": "gets. It's really a tool\nthat the developer has to build more trustworthy\nor better application software.",
    "start": "4650640",
    "end": "4658260"
  },
  {
    "text": "But I, as a user of the\nsystem, have no idea whether this is a\ngood or bad thing that the application\nis using Capsicum. You could totally misuse it,\nas you're absolutely right.",
    "start": "4658260",
    "end": "4666440"
  },
  {
    "text": "So maybe one example is,\nas they show in the paper, you could give too many\nprivileges to the sandbox",
    "start": "4666440",
    "end": "4671489"
  },
  {
    "text": "process. Like the the TCP\nhelper, or maybe it has access to my console. And that's not so great,\nbut it's hard for me",
    "start": "4671490",
    "end": "4677900"
  },
  {
    "text": "as a user to really tell this\nin a general purpose fashion. Yeah? AUDIENCE: It might also be that\nwhen you set the permissions",
    "start": "4677900",
    "end": "4685443"
  },
  {
    "text": "to the masks on any\ngiven file descriptor that you set two\npermission masks.",
    "start": "4685443",
    "end": "4691304"
  },
  {
    "text": "PROFESSOR: Yeah. Right. So it's not just the\nfile descriptors. Also, what can you do with\nthose file descriptors? You're right. Yes.",
    "start": "4691304",
    "end": "4696450"
  },
  {
    "text": "These maps are another\npart of the story that you have to watch out for.",
    "start": "4696450",
    "end": "4701460"
  },
  {
    "text": "OK. So suppose we got\nthe masks right. We got the file\ndescriptors right. We haven't used lth_start. There's nothing extra in memory.",
    "start": "4701460",
    "end": "4708740"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: That's true. Yes. So maybe there's like\nsomething before you even",
    "start": "4708740",
    "end": "4714030"
  },
  {
    "text": "add the capability\nmode that's damaging. So it only helps\nonce you jump in. And one slightly\nannoying thing is",
    "start": "4714030",
    "end": "4722239"
  },
  {
    "text": "that it seems like it can't do\na whole lot inside of capability",
    "start": "4722240",
    "end": "4727360"
  },
  {
    "text": "mode, not in the sense that you\ncan't run large computations, but you can't really put a large\npart of a complicated system",
    "start": "4727360",
    "end": "4735010"
  },
  {
    "text": "into capability mode. Because inevitably,\nin Unix, you'll need to do something\nwith new processes, opening network\nconnections, et cetera.",
    "start": "4735010",
    "end": "4741869"
  },
  {
    "text": "And you'll probably\nneed to use some of these global\nnamespaces that are not available in capability mode. So it's probably\ngoing to be quite",
    "start": "4741870",
    "end": "4748330"
  },
  {
    "text": "difficult to put large chunks\nof logic or intricate system code inside of capability mode.",
    "start": "4748330",
    "end": "4755370"
  },
  {
    "text": "So only well-defined\nchunks of an application are likely to be running\nin capability mode.",
    "start": "4755370",
    "end": "4762500"
  },
  {
    "text": "It depends. I don't know if this is\nentirely true or not. In Chrome, for example,\nlarge processes do run in capability\nmode in their design.",
    "start": "4762500",
    "end": "4770460"
  },
  {
    "text": "It might be that\nyou basically have to have non-capability mode\nchunks of your application",
    "start": "4770460",
    "end": "4777190"
  },
  {
    "text": "because you wanted to\nincorporate nicely with Unix, or whatever is is you're\nrunning alongside of it.",
    "start": "4777190",
    "end": "4784330"
  },
  {
    "text": "OK. Any other thing you\nshould worry about? Yeah? AUDIENCE: Well, whether they\nimplemented capabilities",
    "start": "4784330",
    "end": "4791449"
  },
  {
    "text": "correctly. PROFESSOR: Yeah. AUDIENCE: Whether they've\ncovered all the system calls. PROFESSOR: That's right. Yes. So that's actually a huge\nproblem, in some sense,",
    "start": "4791450",
    "end": "4798219"
  },
  {
    "text": "already. If you think about\nit, there's probably hundreds of system calls\nthat the kernel provides you.",
    "start": "4798220",
    "end": "4803960"
  },
  {
    "text": "And they're not especially\nprecisely documented, so you probably have to\nlook at their implementation and see if, for every\nsystem call, if there's",
    "start": "4803960",
    "end": "4811241"
  },
  {
    "text": "some way for the\napplications to get the system call to\nperform some operation on some extra object that didn't\nhave a file descriptor to it.",
    "start": "4811242",
    "end": "4818599"
  },
  {
    "text": "And most Unix\nsystem calls weren't written with the\nexpectation of everything has to be operation\non a file descriptor.",
    "start": "4818600",
    "end": "4824600"
  },
  {
    "text": "So you really have to get\nevery system all right. And probably more worryingly\nis that the kernel has",
    "start": "4824600",
    "end": "4830100"
  },
  {
    "text": "to be free of bugs,\nlike buffer overflows or whatever other memory\ncorruption like you guys explained [INAUDIBLE].",
    "start": "4830100",
    "end": "4835800"
  },
  {
    "text": "Otherwise, all of this\nis complete nonsense. You just are on arbitrary\nassembly code in the kernel, and you have full\ncontrol of the machine.",
    "start": "4835800",
    "end": "4843298"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "4843298",
    "end": "4852225"
  },
  {
    "text": "PROFESSOR: Yeah. I guess, yeah. So the one thing I didn't\nget a chance to talk about is alternative things. So this is in FreeBSD.",
    "start": "4852225",
    "end": "4858150"
  },
  {
    "text": "Linux has this thing\ncalled [INAUDIBLE], that allows you to specify which\nsystem calls you can operate.",
    "start": "4858150",
    "end": "4864140"
  },
  {
    "text": "If you squinted, it's\nkind of like Capsicum but very different, in\nthe sense that Capsicum talks about specific\nfile descriptors",
    "start": "4864140",
    "end": "4869731"
  },
  {
    "text": "that you can operate. And in Linux, the\n[INAUDIBLE] mechanism lets you talk about\nspecific system calls that you could run.",
    "start": "4869731",
    "end": "4876040"
  },
  {
    "text": "So it's probably\nless fine grained, but it's what's\navailable in Linux today.",
    "start": "4876040",
    "end": "4882110"
  },
  {
    "text": "And it's actually\nprobably a good idea to look at your applications\nand see what system call do you expect it to make\nand then code in a filter",
    "start": "4882110",
    "end": "4889450"
  },
  {
    "text": "and allow it to make\nonly those system calls. The problem is that if you have\nany interesting applications, it'll probably run exec\nand open and write,",
    "start": "4889450",
    "end": "4896215"
  },
  {
    "text": "and that's probably enough\nto do quite a bit of damage to the system. So that's why you probably want\nthe more fine-grained system",
    "start": "4896215",
    "end": "4901763"
  },
  {
    "text": "like Capsicum,\nwhere you can say, well, you can run right,\nbut only on this thing, not on my entire home directory.",
    "start": "4901763",
    "end": "4909350"
  },
  {
    "text": "All right. So I guess we're out of\ntime to talk about Capsicum. So let's talk about\nnative clients on Wednesday and a different\nway to sandbox programs.",
    "start": "4909350",
    "end": "4916840"
  }
]