[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6910"
  },
  {
    "text": "offer high quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "6910",
    "end": "13460"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at",
    "start": "13460",
    "end": "19290"
  },
  {
    "text": "ocw.mit.edu. PROFESSOR: Happy Valentine's\nDay 11.",
    "start": "19290",
    "end": "24970"
  },
  {
    "start": "22000",
    "end": "169000"
  },
  {
    "text": "Actually, maybe it's a\nlittle smiley face combined with an 11. Did any of you leave\nthis here for me?",
    "start": "24970",
    "end": "30310"
  },
  {
    "text": "Or am I just stroking\nmy ego and this was left for someone yesterday?",
    "start": "30310",
    "end": "36380"
  },
  {
    "text": "Stroking my ego, all right. OK, last lecture, we looked at\na program for finding roots",
    "start": "36380",
    "end": "47350"
  },
  {
    "text": "and put in a little debugging\nstatement that, along the way, printed various approximations\nto the root.",
    "start": "47350",
    "end": "54960"
  },
  {
    "text": "Now, suppose that instead of\nprinting things, we actually wanted to collect the\napproximations.",
    "start": "54960",
    "end": "62770"
  },
  {
    "text": "For example, to be able to go\nback and look at them later and analyze them, do various\nkinds of things.",
    "start": "62770",
    "end": "69820"
  },
  {
    "text": "To do this, and this is the sort\nof thing we do a lot, we need some data structures that\ncan be used for amassing",
    "start": "69820",
    "end": "77660"
  },
  {
    "text": "collections of items. There are 3 data structures\nin Python that are used to",
    "start": "77660",
    "end": "86520"
  },
  {
    "text": "collect items. I'm going to try and cover\nall of them today. ",
    "start": "86520",
    "end": "93049"
  },
  {
    "text": "Tuples, lists, and\ndictionaries.",
    "start": "93050",
    "end": "98306"
  },
  {
    "start": "98306",
    "end": "109270"
  },
  {
    "text": "We'll start with tuples\nand lists. And what they have in common is\nthey are ordered sequences",
    "start": "109270",
    "end": "122610"
  },
  {
    "text": "of objects. ",
    "start": "122610",
    "end": "131840"
  },
  {
    "text": "So the key notion here\nis they're ordered. It makes sense to talk about the\nfirst object, the second",
    "start": "131840",
    "end": "138400"
  },
  {
    "text": "object, the last object,\net cetera. When we get to dictionaries, or\ndicts as they're spelled in",
    "start": "138400",
    "end": "145380"
  },
  {
    "text": "Python, we'll see that\nthey're not ordered. All right, let's look\nat tuples first.",
    "start": "145380",
    "end": "151030"
  },
  {
    "text": "They're the simplest.  So if we look at it, there's\na very simple",
    "start": "151030",
    "end": "165700"
  },
  {
    "text": "example at the top. I have this tuple called test. And I just said that's\nthe sequence of",
    "start": "165700",
    "end": "172220"
  },
  {
    "start": "169000",
    "end": "302000"
  },
  {
    "text": "ints 1, 2, 3, 4, 5. I can then index into it.",
    "start": "172220",
    "end": "178670"
  },
  {
    "text": "For example, look at\nthe first element, which is the 0th element.",
    "start": "178670",
    "end": "184540"
  },
  {
    "text": "Or I could look at\nthe next element. And we can print them. So let's just do that.",
    "start": "184540",
    "end": "190100"
  },
  {
    "text": " And you can see it prints 1\nand 2, not surprisingly.",
    "start": "190100",
    "end": "198940"
  },
  {
    "text": "I can print the whole\nthing if I want. ",
    "start": "198940",
    "end": "205330"
  },
  {
    "text": "That lets me look at\nthe entire tuple.",
    "start": "205330",
    "end": "210950"
  },
  {
    "text": "I can also look at this. ",
    "start": "210950",
    "end": "218659"
  },
  {
    "text": "And that gives me the last\nelement without my having to know what the last element is.",
    "start": "218660",
    "end": "226010"
  },
  {
    "text": "I can ask about the\nlength of a tuple. ",
    "start": "226010",
    "end": "233120"
  },
  {
    "text": "And it tells me it's five.  Similarly, I could write\nsomething like this.",
    "start": "233120",
    "end": "239880"
  },
  {
    "text": " Print test.",
    "start": "239880",
    "end": "246050"
  },
  {
    "start": "246050",
    "end": "255500"
  },
  {
    "text": "Why was that out of range? ",
    "start": "255500",
    "end": "261756"
  },
  {
    "text": "Yeah? AUDIENCE: Because you're\nindexing from 0? PROFESSOR: Because I'm\nindexing from 0. So that's why I have this\nmore convenient way of",
    "start": "261757",
    "end": "269780"
  },
  {
    "text": "writing minus 1. Otherwise, I'd have to\ndo len minus one. Good grab.",
    "start": "269780",
    "end": "277170"
  },
  {
    "text": "OK, let's look at a little\nexample of how we might use",
    "start": "277170",
    "end": "282320"
  },
  {
    "text": "this sort of thing. ",
    "start": "282320",
    "end": "292270"
  },
  {
    "text": "So here, I've just written a\nlittle piece of code that finds divisors. ",
    "start": "292270",
    "end": "303000"
  },
  {
    "start": "302000",
    "end": "381000"
  },
  {
    "text": "Going to find all of the divisor\nof 100, collect them into a tuple.",
    "start": "303000",
    "end": "309990"
  },
  {
    "text": "Notice this kind of funny piece\nof syntax here, i comma.",
    "start": "309990",
    "end": "323930"
  },
  {
    "text": "I need to do that to say it's\na tuple of length one. ",
    "start": "323930",
    "end": "331290"
  },
  {
    "text": "Why can't I just write open\nparen, i, comma, open paren?",
    "start": "331290",
    "end": "336870"
  },
  {
    "text": "Because that would just take\nthe expression, i, and parenthesize it as we often use\nparentheses for grouping",
    "start": "336870",
    "end": "344800"
  },
  {
    "text": "when we write things. So by inserting this comma, I\nsay, I don't just mean the--",
    "start": "344800",
    "end": "351790"
  },
  {
    "text": "in this case-- say\nthe number i. I mean the tuple\nof length one.",
    "start": "351790",
    "end": "357950"
  },
  {
    "text": "So it's sort of a special case\npiece of syntax that you need for tuples of length one.",
    "start": "357950",
    "end": "364050"
  },
  {
    "text": "Then, I can print\nthe divisors. So let's run that. ",
    "start": "364050",
    "end": "371800"
  },
  {
    "text": "And it now prints the\ntuple for me. So I've run through. I've computed all\nthe divisors.",
    "start": "371800",
    "end": "376860"
  },
  {
    "text": "And I've collected them. ",
    "start": "376860",
    "end": "381889"
  },
  {
    "start": "381000",
    "end": "452000"
  },
  {
    "text": "Nothing very interesting,\nbut kind of useful. We can also--",
    "start": "381890",
    "end": "387660"
  },
  {
    "text": "I've shown you how to select\nelements of tuples. I can also, if I choose,\nget what are",
    "start": "387660",
    "end": "395670"
  },
  {
    "text": "called slices of tuples. ",
    "start": "395670",
    "end": "404370"
  },
  {
    "text": "So a slice gives me a range of\nvalues, or in this case, a",
    "start": "404370",
    "end": "411100"
  },
  {
    "text": "subsequence of the tuple.",
    "start": "411100",
    "end": "417100"
  },
  {
    "text": "As we'll see, we can\nalso slice lists. ",
    "start": "417100",
    "end": "431540"
  },
  {
    "text": "So let's see. We have a tuple called\ndivisors here. ",
    "start": "431540",
    "end": "439639"
  },
  {
    "text": "Yeah, OK, I'll save\nthe source. Oh, come on! ",
    "start": "439640",
    "end": "453010"
  },
  {
    "start": "452000",
    "end": "601000"
  },
  {
    "text": "So if I wanted to do-- what did I call it? I called it divisors. ",
    "start": "453010",
    "end": "460039"
  },
  {
    "text": "So I can do something\nlike divisors 1:3. ",
    "start": "460040",
    "end": "468380"
  },
  {
    "text": "And you'll note that gives me\nthose two elements at the",
    "start": "468380",
    "end": "473680"
  },
  {
    "text": "appropriate places. And so it's a very convenient\nway to take pieces of it.",
    "start": "473680",
    "end": "480320"
  },
  {
    "text": " All right, any questions\nabout tuples?",
    "start": "480320",
    "end": "488710"
  },
  {
    "text": "Not very deep. Lists are, I think, more useful\nthan tuples and also,",
    "start": "488710",
    "end": "497600"
  },
  {
    "text": "alas, more complicated. And they're complicated because\nthe big difference is",
    "start": "497600",
    "end": "505440"
  },
  {
    "text": "that tuples are immutable.",
    "start": "505440",
    "end": "512679"
  },
  {
    "text": "And by that, I mean once you've\ncreated a tuple, you",
    "start": "512679",
    "end": "517840"
  },
  {
    "text": "cannot change its value. You can create a new tuple.",
    "start": "517840",
    "end": "524070"
  },
  {
    "text": "but you can't change the\nvalue of the old tuple. In contrast, lists\nare mutable.",
    "start": "524070",
    "end": "534920"
  },
  {
    "text": "Once you've created a list, you\ncan actually change it. It's the first mutable type\nwe've looked at because you'll",
    "start": "534920",
    "end": "544340"
  },
  {
    "text": "recall assignment didn't\nactually change the value of an object.",
    "start": "544340",
    "end": "550550"
  },
  {
    "text": "It just changed the object to\nwhich an identifier was bound.",
    "start": "550550",
    "end": "556779"
  },
  {
    "text": "Mutability is the first time\nwe've seen a way to actually change the value of\nan object itself.",
    "start": "556780",
    "end": "564519"
  },
  {
    "text": " And that's, as we'll see, both\na powerful concept and an",
    "start": "564520",
    "end": "574050"
  },
  {
    "text": "opportunity to mess yourself\nup by committing serious programming blunders.",
    "start": "574050",
    "end": "579910"
  },
  {
    "text": " All right, so let's look at an\nexample here, first of many",
    "start": "579910",
    "end": "588529"
  },
  {
    "text": "we'll be looking at.  So first, we won't worry too\nmuch about the mutability.",
    "start": "588530",
    "end": "596620"
  },
  {
    "start": "596620",
    "end": "602190"
  },
  {
    "start": "601000",
    "end": "1003000"
  },
  {
    "text": "So here, I'm creating a list\ncalled techs, which happens to",
    "start": "602190",
    "end": "609250"
  },
  {
    "text": "be, in this case, a\nlist of strings. Lists need not be homogeneous.",
    "start": "609250",
    "end": "614990"
  },
  {
    "text": "As we'll see, you can mix\nstrings, and floats, and ints. And most interestingly, you\ncan have lists of list.",
    "start": "614990",
    "end": "622860"
  },
  {
    "text": "And then, another list\ncalled ivies.  And then, I'm going to say I'm\ngoing to have these univs, yet",
    "start": "622860",
    "end": "631390"
  },
  {
    "text": "another list. This list empty, containing\nno elements. ",
    "start": "631390",
    "end": "636959"
  },
  {
    "text": "Then, I'm going to append\ntechs to ivies.",
    "start": "636960",
    "end": "643380"
  },
  {
    "text": "Notice this syntax-- univs.append. ",
    "start": "643380",
    "end": "649300"
  },
  {
    "text": "What that means here is\nthat append is what",
    "start": "649300",
    "end": "657250"
  },
  {
    "text": "Python calls a method. ",
    "start": "657250",
    "end": "664610"
  },
  {
    "text": "As we'll see when we get to\nclasses, methods play a very important role in Python.",
    "start": "664610",
    "end": "672430"
  },
  {
    "text": "But to a first approximation,\nit's quite safe to think of a method as an alternative syntax\nfor writing function.",
    "start": "672430",
    "end": "681600"
  },
  {
    "text": " So instead of writing something\nlike append a list",
    "start": "681600",
    "end": "692620"
  },
  {
    "text": "and an element, I write\nl.append the element.",
    "start": "692620",
    "end": "706140"
  },
  {
    "text": "And just think of this l over\nhere as a fancy way of denoting the first argument to\nthe function append, the first",
    "start": "706140",
    "end": "715170"
  },
  {
    "text": "actual parameter. When we get to classes in a few\nweeks, we'll see why it's",
    "start": "715170",
    "end": "722210"
  },
  {
    "text": "highly useful to have this\nspecialized syntax. But for now, just think of it as\na piece of syntactic sugar,",
    "start": "722210",
    "end": "730519"
  },
  {
    "text": "if you will.  The thing I want you to think\nabout, though, is this is not",
    "start": "730520",
    "end": "739319"
  },
  {
    "text": "equivalent to assigning\nsomething to l. This actually mutates\nthe list.",
    "start": "739320",
    "end": "745615"
  },
  {
    "start": "745615",
    "end": "755339"
  },
  {
    "text": "And we say it has\na side effect. ",
    "start": "755340",
    "end": "764400"
  },
  {
    "text": "Up till now, since we've only\nbeen dealing with immutable types, every function we've\nlooked at, its job was to take",
    "start": "764400",
    "end": "774365"
  },
  {
    "text": "in a bunch of values, do some\ncomputation, return a value. It didn't change anything.",
    "start": "774365",
    "end": "781600"
  },
  {
    "text": "And then, if we wanted to take\nadvantage of what the function did, we had to assign the value\nit returned to some",
    "start": "781600",
    "end": "788590"
  },
  {
    "text": "variable, and then we\ncould manipulate it. Or we could print the\nvalue it returned. We had to do something with\nthe value it returned.",
    "start": "788590",
    "end": "796990"
  },
  {
    "text": "Here, we invoke append. And rather than worrying about\nwhat it returns, we're",
    "start": "796990",
    "end": "805920"
  },
  {
    "text": "invoking it for the purpose\nof its side effect-- the modification it performs\non the list.",
    "start": "805920",
    "end": "815459"
  },
  {
    "text": "So let's look at what we\nget when we run this. ",
    "start": "815460",
    "end": "824000"
  },
  {
    "text": "So you'll notice what\nunivs is now. It's a list of length one.",
    "start": "824000",
    "end": "832250"
  },
  {
    "text": "And the one element in it is\nitself a list because I have",
    "start": "832250",
    "end": "837890"
  },
  {
    "text": "appended a list to the end\nof the empty list-- not the elements of the list,\nbut the list itself, OK?",
    "start": "837890",
    "end": "848340"
  },
  {
    "text": "So it's important to notice the\ndifference between a list that contained the elements MIT\nand Cal Tech, and a list",
    "start": "848340",
    "end": "858170"
  },
  {
    "text": "that contained a list\nwhich contains the elements MIT and Cal Tech.",
    "start": "858170",
    "end": "863214"
  },
  {
    "start": "863215",
    "end": "870900"
  },
  {
    "text": "Yes? AUDIENCE: Previously, you added\ntwo tuples together.",
    "start": "870900",
    "end": "876760"
  },
  {
    "text": "And that's not like\nappending, right? PROFESSOR: Because when I\nconcatenated two tuples, in",
    "start": "876760",
    "end": "885769"
  },
  {
    "text": "order to do something useful\nwith that value, I had to assign it to something. It did not modify anything.",
    "start": "885770",
    "end": "893830"
  },
  {
    "text": "It produced a new tuple\nwhich was the value of appending them.",
    "start": "893830",
    "end": "899040"
  },
  {
    "text": "And then, it assigned\nit to a new tuple. So it's quite different from\nappend, which is actually",
    "start": "899040",
    "end": "905850"
  },
  {
    "text": "having a side effect\non the list. Does not produce a new list,\nit modifies the old list.",
    "start": "905850",
    "end": "913290"
  },
  {
    "text": "So we can look at this, draw\na little picture here.",
    "start": "913290",
    "end": "919529"
  },
  {
    "text": "So we had techs. ",
    "start": "919530",
    "end": "925190"
  },
  {
    "text": "And that pointed to a list with\ntwo elements in it, which",
    "start": "925190",
    "end": "931000"
  },
  {
    "text": "I'll abbreviated as\nMIT and Cal Tech. Both of these elements\nwere strings. ",
    "start": "931000",
    "end": "940190"
  },
  {
    "text": "Then, I created a new\nlist called univs. ",
    "start": "940190",
    "end": "947449"
  },
  {
    "text": "And that was initially bound to\nthe empty list, a list with",
    "start": "947450",
    "end": "954860"
  },
  {
    "text": "no elements in it.  I then did an append.",
    "start": "954860",
    "end": "961010"
  },
  {
    "text": "And the effect of the\nappend was to modify univs so that it pointed--",
    "start": "961010",
    "end": "967339"
  },
  {
    "text": " now, I had one element. And the element it was\nwas this list.",
    "start": "967340",
    "end": "976430"
  },
  {
    "text": "Notice it didn't\ncopy this list. It actually included\nthe list itself.",
    "start": "976430",
    "end": "982720"
  },
  {
    "text": " So let's look at the\nramifications of",
    "start": "982720",
    "end": "989149"
  },
  {
    "text": "doing it that way. ",
    "start": "989150",
    "end": "998960"
  },
  {
    "text": "Whoops.  So what I'm going to do\nnow is append another",
    "start": "998960",
    "end": "1006810"
  },
  {
    "start": "1003000",
    "end": "1055000"
  },
  {
    "text": "element called ivies. I'm going to then print it.",
    "start": "1006810",
    "end": "1012820"
  },
  {
    "text": "And then, for e in univs-- so\nhere's kind of a nice thing you can do with lists. ",
    "start": "1012820",
    "end": "1021860"
  },
  {
    "text": "You can iterate over the\nelements in the list. So you might think that the way\nto do that is, well, I'll",
    "start": "1021860",
    "end": "1028849"
  },
  {
    "text": "go for i index in range\n0 to length of list. That would be equivalent.",
    "start": "1028849",
    "end": "1035449"
  },
  {
    "text": "But it's, in fact, much easier\nto just write this way-- for e in univs.",
    "start": "1035450",
    "end": "1040500"
  },
  {
    "text": "That will do something to every\nelement of the list. I'm going to print what\nthe element is.",
    "start": "1040500",
    "end": "1046400"
  },
  {
    "text": "So let's look at that. ",
    "start": "1046400",
    "end": "1056370"
  },
  {
    "start": "1055000",
    "end": "1145000"
  },
  {
    "text": "So now, I have a list, as we\nsee here, of length two.",
    "start": "1056370",
    "end": "1063550"
  },
  {
    "text": "It contains two lists. And if I print the elements, I\nprint each of those lists.",
    "start": "1063550",
    "end": "1069930"
  },
  {
    "text": "Nothing very magical there. ",
    "start": "1069930",
    "end": "1076190"
  },
  {
    "text": "Now, suppose I wanted\nit flattened.",
    "start": "1076190",
    "end": "1082519"
  },
  {
    "text": "You asked the question about\nthe tuples where I did concatenation. Well, I can do the\nsame thing here.",
    "start": "1082520",
    "end": "1087905"
  },
  {
    "text": " I'll let flat equal\ntechs plus ivies.",
    "start": "1087905",
    "end": "1096050"
  },
  {
    "text": "And then, I'll print flat. ",
    "start": "1096050",
    "end": "1103620"
  },
  {
    "text": "And you'll note here what\nconcatenation does is it just",
    "start": "1103620",
    "end": "1109110"
  },
  {
    "text": "takes the elements of the list\nand creates a new list and",
    "start": "1109110",
    "end": "1114179"
  },
  {
    "text": "appends it.  Not append it-- in this\ncase, it assigns it to",
    "start": "1114180",
    "end": "1119899"
  },
  {
    "text": "flat, excuse me. So that's convenient.",
    "start": "1119900",
    "end": "1124970"
  },
  {
    "text": "Poor old plus is overloaded\nwith yet another meaning. All right, let's keep\non trucking.",
    "start": "1124970",
    "end": "1131430"
  },
  {
    "start": "1131430",
    "end": "1146460"
  },
  {
    "start": "1145000",
    "end": "1236000"
  },
  {
    "text": "I, of course, can\ndo this myself. So here, I've got another\nlist called artSchools. It includes RISD and Harvard.",
    "start": "1146460",
    "end": "1153630"
  },
  {
    "text": "For u2 in artSchools, if u2 in\nflat, I'm going to remove it. ",
    "start": "1153630",
    "end": "1164190"
  },
  {
    "text": "All right, so again, I'm going\nto iterate over everything in artSchools. ",
    "start": "1164190",
    "end": "1169560"
  },
  {
    "text": "What's this going to\ndo, do you think? ",
    "start": "1169560",
    "end": "1175410"
  },
  {
    "text": "What will I get when\nI print it here? ",
    "start": "1175410",
    "end": "1180970"
  },
  {
    "text": "No new concepts here. This is all stuff we've seen. Somebody up there?",
    "start": "1180970",
    "end": "1186540"
  },
  {
    "text": "Yeah. AUDIENCE: Flat without\nHarvard in it? PROFESSOR: Yes.",
    "start": "1186540",
    "end": "1191710"
  },
  {
    "text": "The correct answer was flat\nwithout Harvard in it. ",
    "start": "1191710",
    "end": "1197630"
  },
  {
    "text": "Wow, almost a good catch. Just almost there.",
    "start": "1197630",
    "end": "1203370"
  },
  {
    "text": "All right, so let's confirm. Yes, we'll save it. Thank you.",
    "start": "1203370",
    "end": "1209470"
  },
  {
    "text": " All right, so we've now removed\nthe art school.",
    "start": "1209470",
    "end": "1216715"
  },
  {
    "text": " All right, we'll look\nat one more thing.",
    "start": "1216715",
    "end": "1224620"
  },
  {
    "text": "Actually, we'll look at far\nmore than one more thing. But we'll look at one more\nthing for the moment.",
    "start": "1224620",
    "end": "1230235"
  },
  {
    "start": "1230235",
    "end": "1237420"
  },
  {
    "start": "1236000",
    "end": "1299000"
  },
  {
    "text": "So I'm going to invoke\nanother method. This is a built-in method\nof Python that works on sequence types.",
    "start": "1237420",
    "end": "1246490"
  },
  {
    "text": "And it's called sort. So you can do-- this will have\na side effect on flat.",
    "start": "1246490",
    "end": "1252174"
  },
  {
    "text": " And it will, as you might guess,\nput them in order.",
    "start": "1252175",
    "end": "1259440"
  },
  {
    "text": "So let's run that. Actually, we'll comment this\nout for the moment. ",
    "start": "1259440",
    "end": "1271440"
  },
  {
    "text": "So you'll now note that\nit's put them in alphabetical order. ",
    "start": "1271440",
    "end": "1278670"
  },
  {
    "text": "This is something, again, that\nyou'll find convenient throughout the term, the ability\nto have the side",
    "start": "1278670",
    "end": "1284170"
  },
  {
    "text": "effect of sorting a list. ",
    "start": "1284170",
    "end": "1295320"
  },
  {
    "text": "Now, I'm going to assign\nsomething to flat sub 1.",
    "start": "1295320",
    "end": "1303475"
  },
  {
    "text": " So let's think about what this\nis going to be doing.",
    "start": "1303475",
    "end": "1311010"
  },
  {
    "text": "It's going to replace\nthe first element of flat by a new value.",
    "start": "1311010",
    "end": "1318154"
  },
  {
    "text": " So it's having, again, a\nside effect on flat.",
    "start": "1318155",
    "end": "1327740"
  },
  {
    "text": "So you have to be a little bit\ncareful as you think about this, that I've written\nsomething that looks like a",
    "start": "1327740",
    "end": "1334580"
  },
  {
    "text": "conventional assignment\nstatement. But in fact, flat sub 1\nis not an identifier.",
    "start": "1334580",
    "end": "1341190"
  },
  {
    "text": " So this is not binding the name,\nflat sub 1, To UMass.",
    "start": "1341190",
    "end": "1349780"
  },
  {
    "text": "It's actually modifying the\nobject that is the first element of flat.",
    "start": "1349780",
    "end": "1356072"
  },
  {
    "start": "1356072",
    "end": "1361740"
  },
  {
    "text": "AUDIENCE: So would an identifier\njust be a name, flat, for example?",
    "start": "1361740",
    "end": "1367178"
  },
  {
    "text": "PROFESSOR: Well, I\nthink the way-- the question is, would the\nidentifier just be \"flat?\" No.",
    "start": "1367178",
    "end": "1375160"
  },
  {
    "text": "Don't think of this as\nan assignment at all. Because remember, what an\nassignment does is swing one",
    "start": "1375160",
    "end": "1382409"
  },
  {
    "text": "of these pointers to point\nto a different object. We'll see an example of that.",
    "start": "1382410",
    "end": "1388169"
  },
  {
    "text": "Whereas here, I'm actually\nmodifying a piece of the object that the identifier\npoints to.",
    "start": "1388170",
    "end": "1398490"
  },
  {
    "text": "So it's not an assignment in\nthe sense of a re-binding. It's actually having\na side effect of",
    "start": "1398490",
    "end": "1405559"
  },
  {
    "text": "modifying the object. ",
    "start": "1405560",
    "end": "1412590"
  },
  {
    "text": "Let's just run it. And then, I'll be happy\nwith the question. So here, you'll see I changed\nflat sub 1 to now be UMass.",
    "start": "1412590",
    "end": "1422110"
  },
  {
    "text": "Yeah, question? AUDIENCE: As you've drawn on\nthe blackboard here, you've",
    "start": "1422110",
    "end": "1428596"
  },
  {
    "text": "drawn an arrow to the actual\nobject that's techs. So if we change techs,\nwill we change univs?",
    "start": "1428596",
    "end": "1434340"
  },
  {
    "text": "PROFESSOR: Yes. The question was if we change\ntechs, will we change univs?",
    "start": "1434340",
    "end": "1440139"
  },
  {
    "text": "Now, in some sense, that's\na philosophical question. From the philosophical\npoint of view, maybe,",
    "start": "1440140",
    "end": "1446530"
  },
  {
    "text": "you could say no. Univs is still the\nsame object. So the binding has\nnot been changed.",
    "start": "1446530",
    "end": "1452670"
  },
  {
    "text": "But the object to which it has\nbeen bound is now different.",
    "start": "1452670",
    "end": "1458490"
  },
  {
    "text": "Same object, but it has a\nnew value, all right? So this is the key thing\nto keep in mind.",
    "start": "1458490",
    "end": "1465320"
  },
  {
    "text": "Assignment has to do with the\nbinding of names to objects.",
    "start": "1465320",
    "end": "1472049"
  },
  {
    "text": "Mutation has to do with changing\nthe value of objects.",
    "start": "1472050",
    "end": "1478930"
  },
  {
    "text": "We'll see that pretty\ngraphically in the next example that I wanted to\nwork my way through.",
    "start": "1478930",
    "end": "1486170"
  },
  {
    "text": "So I'm going to work through\na dull example. But I think it illustrates\nthe points.",
    "start": "1486170",
    "end": "1491770"
  },
  {
    "start": "1491770",
    "end": "1502360"
  },
  {
    "start": "1501000",
    "end": "1524000"
  },
  {
    "text": "And I do, by the way, very much\nappreciate the questions, even if I forget to throw you\ncandy in return for asking.",
    "start": "1502360",
    "end": "1509440"
  },
  {
    "text": "But it's good. If you have questions,\nplease do ask them. And I'll try and remember\nto feed you.",
    "start": "1509440",
    "end": "1515659"
  },
  {
    "start": "1515660",
    "end": "1525020"
  },
  {
    "start": "1524000",
    "end": "1618000"
  },
  {
    "text": "So let's work through what\nthis code is going to do. So first, I'm going to\nhave the list L1.",
    "start": "1525020",
    "end": "1532680"
  },
  {
    "start": "1532680",
    "end": "1546460"
  },
  {
    "text": "So the first thing, I'm going to\ncreate an object which is a list of length one containing\nthe integer 2.",
    "start": "1546460",
    "end": "1553630"
  },
  {
    "text": "So L1 will be bound to the\nlist of length one",
    "start": "1553630",
    "end": "1559480"
  },
  {
    "text": "containing the int 2.  I'm then going to create another\nlist, L2, which is",
    "start": "1559480",
    "end": "1572550"
  },
  {
    "text": "going to be of length two. And the first element\nwill be L1.",
    "start": "1572550",
    "end": "1579290"
  },
  {
    "text": "And the second element\nwill be L1. ",
    "start": "1579290",
    "end": "1589150"
  },
  {
    "text": "So what will happen\nif I print L2? What will I get? ",
    "start": "1589150",
    "end": "1597090"
  },
  {
    "text": "I'll get list two, comma,\nlist two, right? We can look at it. ",
    "start": "1597090",
    "end": "1608720"
  },
  {
    "text": "If I print L2, excuse me. ",
    "start": "1608720",
    "end": "1619000"
  },
  {
    "start": "1618000",
    "end": "1656000"
  },
  {
    "text": "All right, just what we\nwould have expected.",
    "start": "1619000",
    "end": "1624120"
  },
  {
    "text": "Now, I'm going to change the\n0th value of L1 to be 3.",
    "start": "1624120",
    "end": "1631135"
  },
  {
    "text": " So I'm going to mutate L1. ",
    "start": "1631135",
    "end": "1642660"
  },
  {
    "text": "Now, if I print L2, I will get\na different value, 3, 3.",
    "start": "1642660",
    "end": "1658970"
  },
  {
    "text": "Not surprising. ",
    "start": "1658970",
    "end": "1668549"
  },
  {
    "text": "It's something to keep in mind\nthat can be useful, but can",
    "start": "1668550",
    "end": "1674890"
  },
  {
    "text": "also be confusing. Because if I'm looking at my\ncode, it doesn't look like I",
    "start": "1674890",
    "end": "1681299"
  },
  {
    "text": "changed L2 when I have\na side effect on L1.",
    "start": "1681300",
    "end": "1687390"
  },
  {
    "text": "And so it can be mystifying when\nyou're trying to debug. You print L2. You do a bunch of--",
    "start": "1687390",
    "end": "1693330"
  },
  {
    "text": "execute a bunch of statements,\nnone of which apparently deals with L2. Then, you print L2 again and\nget a different value.",
    "start": "1693330",
    "end": "1702260"
  },
  {
    "text": "This is both the beauty and\nthe peril of mutation. ",
    "start": "1702260",
    "end": "1710170"
  },
  {
    "text": "Now, let's see what this does. ",
    "start": "1710170",
    "end": "1715950"
  },
  {
    "text": "So here, I've now mutated L2 so\nthat its first element is",
    "start": "1715950",
    "end": "1725830"
  },
  {
    "text": "no longer the list, L1, but\nis now the string a.",
    "start": "1725830",
    "end": "1732820"
  },
  {
    "start": "1732820",
    "end": "1747330"
  },
  {
    "text": "And we'll just do a bunch of\nthese all at once here. ",
    "start": "1747330",
    "end": "1755389"
  },
  {
    "text": "Now, I'm going to change\nL1 to be 2, length one.",
    "start": "1755390",
    "end": "1765040"
  },
  {
    "text": "So what do you think will\nhappen, by the way, if, after this, I print L2?",
    "start": "1765040",
    "end": "1771840"
  },
  {
    "start": "1771840",
    "end": "1785789"
  },
  {
    "text": "Whoops.  What do you think is going\nto get printed here?",
    "start": "1785790",
    "end": "1791670"
  },
  {
    "start": "1791670",
    "end": "1798770"
  },
  {
    "text": "This is important. You need to figure this out. ",
    "start": "1798770",
    "end": "1805630"
  },
  {
    "text": "What's going to get\nprinted here? A volunteer, please. Yes? AUDIENCE: it's going to print\n\"a\" in the first slot and then",
    "start": "1805630",
    "end": "1813074"
  },
  {
    "text": "L1 in the second slot. PROFESSOR: Well-- AUDIENCE: So it's \"a\"\nand then \"2.\"",
    "start": "1813074",
    "end": "1819340"
  },
  {
    "text": "PROFESSOR: \"a\" and then\n\"2\" is one conjecture. Let's find out.",
    "start": "1819340",
    "end": "1825290"
  },
  {
    "start": "1825290",
    "end": "1833090"
  },
  {
    "start": "1832000",
    "end": "1959000"
  },
  {
    "text": "\"a\" and then \"3.\" Why?",
    "start": "1833090",
    "end": "1838340"
  },
  {
    "text": "Because what happened here is,\nwhen I did the assignment to",
    "start": "1838340",
    "end": "1845529"
  },
  {
    "text": "L1, what that effectively did\nwas swing this pointer to",
    "start": "1845530",
    "end": "1854740"
  },
  {
    "text": "point to the new list containing\nthe element 2, but",
    "start": "1854740",
    "end": "1860900"
  },
  {
    "text": "had no effect on this object. ",
    "start": "1860900",
    "end": "1867170"
  },
  {
    "text": "I was changing the binding\nof the identifier. I was not mutating\nthis object.",
    "start": "1867170",
    "end": "1874050"
  },
  {
    "text": "And so this element still points\nto the same list, which",
    "start": "1874050",
    "end": "1879590"
  },
  {
    "text": "was not mutated. That makes sense now?",
    "start": "1879590",
    "end": "1885290"
  },
  {
    "text": "So you have to get your\nhead around the way all this stuff works. ",
    "start": "1885290",
    "end": "1893809"
  },
  {
    "text": "Anybody have a question about\nwhy this is what it did? ",
    "start": "1893810",
    "end": "1903260"
  },
  {
    "text": "All right, if not, we'll\njust roar right along. ",
    "start": "1903260",
    "end": "1916840"
  },
  {
    "text": "So now, we can do\nvarious things.",
    "start": "1916840",
    "end": "1922789"
  },
  {
    "text": "And we'll get some stuff. ",
    "start": "1922790",
    "end": "1932640"
  },
  {
    "text": "All right, moving right along. ",
    "start": "1932640",
    "end": "1937870"
  },
  {
    "text": "Here's an interesting little\nprogram not in your hand out. ",
    "start": "1937870",
    "end": "1949220"
  },
  {
    "text": "Let me get rid of\nall this cruft. ",
    "start": "1949220",
    "end": "1960170"
  },
  {
    "start": "1959000",
    "end": "1985000"
  },
  {
    "text": "So here's a function,\ncopylist. It takes a source list and\na destination list.",
    "start": "1960170",
    "end": "1967170"
  },
  {
    "text": "And for e in the source list, it\nappends it to whatever the destination list used to be.",
    "start": "1967170",
    "end": "1972820"
  },
  {
    "start": "1972820",
    "end": "1978120"
  },
  {
    "text": "And then, I'm just putting in\na little print statement so we'll be able to see as it\nruns what it's doing.",
    "start": "1978120",
    "end": "1985340"
  },
  {
    "start": "1985000",
    "end": "2053000"
  },
  {
    "text": "So I'm going to say L1 is\nequal to the empty list. L2 is 1, 2, 3.",
    "start": "1985340",
    "end": "1991900"
  },
  {
    "text": "And I'm going to copylist\nL2 to L1. Print L1 and L2.",
    "start": "1991900",
    "end": "1998270"
  },
  {
    "text": "So what am I going to get when\nI print those things? ",
    "start": "1998270",
    "end": "2003490"
  },
  {
    "text": "This is the easy question. ",
    "start": "2003490",
    "end": "2008730"
  },
  {
    "text": "Don't tell me I have you\nso intimidated that you think I'm playing. This is not a trick question. Pardon?",
    "start": "2008730",
    "end": "2014049"
  },
  {
    "text": "AUDIENCE: 1, 2, 3 for\nboth of them? PROFESSOR: 1, 2, 3\nfor both of them. Who said that?",
    "start": "2014050",
    "end": "2019920"
  },
  {
    "text": "Raise your hand.  Someone back-- oh, good grief, all the\nway in the back.",
    "start": "2019920",
    "end": "2026210"
  },
  {
    "text": "All right. Oh no, not even close!",
    "start": "2026210",
    "end": "2032419"
  },
  {
    "text": "Off by a row, and about\nfour people, too. OK.",
    "start": "2032420",
    "end": "2037740"
  },
  {
    "text": "so let's try it. ",
    "start": "2037740",
    "end": "2043980"
  },
  {
    "text": "1, 2, 3, 1, 2, 3. So exactly as predicted. ",
    "start": "2043980",
    "end": "2054610"
  },
  {
    "start": "2053000",
    "end": "2084000"
  },
  {
    "text": "Now comes the trick question. ",
    "start": "2054610",
    "end": "2061699"
  },
  {
    "text": "What is this going to do?  Pardon?",
    "start": "2061699",
    "end": "2067649"
  },
  {
    "start": "2067650",
    "end": "2078239"
  },
  {
    "text": "Well, we'll print L1 here. ",
    "start": "2078239",
    "end": "2084750"
  },
  {
    "start": "2084000",
    "end": "2131000"
  },
  {
    "text": "What do you think it'll\ndo when it gets to that print statement? ",
    "start": "2084750",
    "end": "2095629"
  },
  {
    "text": "Will it get to that\nprint statement? Let me ask that question. Will it ever get there?",
    "start": "2095630",
    "end": "2100740"
  },
  {
    "start": "2100740",
    "end": "2108905"
  },
  {
    "text": "AUDIENCE: No. PROFESSOR: No. Bingo. Let's run it. ",
    "start": "2108905",
    "end": "2120599"
  },
  {
    "text": "And you'll see LDest just gets\nlonger and longer and longer. ",
    "start": "2120600",
    "end": "2128040"
  },
  {
    "text": "Why is that happening?  Because what it's attempting to\ndo is look at LSource and",
    "start": "2128040",
    "end": "2139030"
  },
  {
    "start": "2131000",
    "end": "2365000"
  },
  {
    "text": "copy the remaining elements\nof LSource to LDest. But every time I go through the\nloop, what we have is a",
    "start": "2139030",
    "end": "2148540"
  },
  {
    "text": "situation where the formal\nLSource and LDest are now",
    "start": "2148540",
    "end": "2161580"
  },
  {
    "text": "pointing to the same object. ",
    "start": "2161580",
    "end": "2169260"
  },
  {
    "text": "So every time I modify LDest,\nI am modifying the object to which LSource points to.",
    "start": "2169260",
    "end": "2176360"
  },
  {
    "text": "And I keep finding yet another\nthing to copy. ",
    "start": "2176360",
    "end": "2181829"
  },
  {
    "text": "This is an example of what's\ncalled an alias, one object",
    "start": "2181830",
    "end": "2189130"
  },
  {
    "text": "with two names, or in general\nmultiple names. ",
    "start": "2189130",
    "end": "2212089"
  },
  {
    "text": "When you have immutable\nobjects, aliasing is perfectly harmless.",
    "start": "2212090",
    "end": "2219260"
  },
  {
    "text": "If you have 58 different names\nfor the object 3, it doesn't",
    "start": "2219260",
    "end": "2225070"
  },
  {
    "text": "matter because you can never\nchange what 3 means. ",
    "start": "2225070",
    "end": "2231310"
  },
  {
    "text": "Here, where you have multiple\nnames for the same mutable object, you can get massive\nconfusion when you modify it",
    "start": "2231310",
    "end": "2241790"
  },
  {
    "text": "through one name and then\nforget that it's being accessed through another.",
    "start": "2241790",
    "end": "2247610"
  },
  {
    "text": " So it's something\nto worry about. ",
    "start": "2247610",
    "end": "2257820"
  },
  {
    "text": "As with tuples, you\ncan slice lists. You can index into lists.",
    "start": "2257820",
    "end": "2263640"
  },
  {
    "text": "You can concatenate lists. You can do all the\nusual things. I'm not going to list all\nof the operators.",
    "start": "2263640",
    "end": "2269980"
  },
  {
    "text": "And there are a lot of\nvery nice operators. But we'll post readings where\nyou can find what operators",
    "start": "2269980",
    "end": "2276859"
  },
  {
    "text": "are available. I now want to move on to the\nthird built-in type that",
    "start": "2276860",
    "end": "2283359"
  },
  {
    "text": "collects values, and that's\na dictionary. ",
    "start": "2283360",
    "end": "2290120"
  },
  {
    "text": "A dictionary differs from\na list in two ways.",
    "start": "2290120",
    "end": "2297880"
  },
  {
    "text": "One, the elements\nare not ordered. And two, more profoundly, the\nindices need not be integers.",
    "start": "2297880",
    "end": "2308796"
  },
  {
    "start": "2308796",
    "end": "2320640"
  },
  {
    "text": "And they're not called\nindices. They're called keys. ",
    "start": "2320640",
    "end": "2332369"
  },
  {
    "text": "They can be any immutable\ntype. ",
    "start": "2332370",
    "end": "2346740"
  },
  {
    "text": "So we'll look at a simple\nexample first. ",
    "start": "2346740",
    "end": "2365990"
  },
  {
    "start": "2365000",
    "end": "2439000"
  },
  {
    "text": "So here, I'm creating\na new dict. We use set braces rather than\nsquare braces to remind",
    "start": "2365990",
    "end": "2374290"
  },
  {
    "text": "ourselves that the elements\nare not ordered. And I'm saying the first\nkey is the number 1.",
    "start": "2374290",
    "end": "2384100"
  },
  {
    "text": "And that's bound to the string\nobject \"1, 1.\" And then the",
    "start": "2384100",
    "end": "2392640"
  },
  {
    "text": "second key is the string object\ndeux, which is bound to",
    "start": "2392640",
    "end": "2398140"
  },
  {
    "text": "the string object 2. And the third one is the string\nobject pi which is",
    "start": "2398140",
    "end": "2404210"
  },
  {
    "text": "bound to the float 3.14159.",
    "start": "2404210",
    "end": "2411670"
  },
  {
    "text": "Now I can then index into it. So for example, if I choose to,\nI can write something like",
    "start": "2411670",
    "end": "2422870"
  },
  {
    "text": "print d sub pi. ",
    "start": "2422870",
    "end": "2432010"
  },
  {
    "text": "I'll just stop it here with my\nold trick of asserting false. ",
    "start": "2432010",
    "end": "2440230"
  },
  {
    "text": "And you'll see it will\nprint the value with which the key is bound--",
    "start": "2440230",
    "end": "2446040"
  },
  {
    "text": "to which the key is bound. ",
    "start": "2446040",
    "end": "2451600"
  },
  {
    "text": "So what we have here is a dict\nis a set of key value pairs.",
    "start": "2451600",
    "end": "2467935"
  },
  {
    "start": "2467935",
    "end": "2475410"
  },
  {
    "text": "And I can access it by\nlooking at the keys. ",
    "start": "2475410",
    "end": "2487730"
  },
  {
    "text": "I can do an assignment,\nd1 equals d, just as I can with lists. And now, I remember this\nis a real assignment.",
    "start": "2487730",
    "end": "2495100"
  },
  {
    "text": "So now, I have an alias,\ntwo identifiers pointing to the same dict.",
    "start": "2495100",
    "end": "2502420"
  },
  {
    "text": "I can then print d1 sub 1,\neither print it or I could",
    "start": "2502420",
    "end": "2509339"
  },
  {
    "text": "assign to it. So let's do that. First, we'll print it just\nto show what we get.",
    "start": "2509340",
    "end": "2520770"
  },
  {
    "text": "Then, I'm going to do an\nassignment, saying, OK, I want to now change the binding in\nd of the key one to be uno",
    "start": "2520770",
    "end": "2531940"
  },
  {
    "text": "rather than one. And we'll get something\ndifferent. Let's just run this. ",
    "start": "2531940",
    "end": "2543340"
  },
  {
    "text": "So you'll note, as we would have\nguessed, with mutability, we see it showing up.",
    "start": "2543340",
    "end": "2548590"
  },
  {
    "start": "2548590",
    "end": "2555570"
  },
  {
    "text": "So far, just like lists, the\ndifference being we have key",
    "start": "2555570",
    "end": "2561290"
  },
  {
    "text": "value pairs rather than you\ncould think of a list as being int value pairs.",
    "start": "2561290",
    "end": "2567330"
  },
  {
    "text": "The indices of a list\nare always ints. Associated with each of those\nints, we have a value.",
    "start": "2567330",
    "end": "2574119"
  },
  {
    "text": "Let's look at a more fun example\nshowing what we can do",
    "start": "2574120",
    "end": "2579810"
  },
  {
    "start": "2578000",
    "end": "2647000"
  },
  {
    "text": "with dictionaries. So here, I have a very simple\ndictionary called EtoF, for",
    "start": "2579810",
    "end": "2589130"
  },
  {
    "text": "English to French. And we can do some\nthings with it. ",
    "start": "2589130",
    "end": "2609670"
  },
  {
    "text": "So I can print it. And that's kind of\ninteresting. Let's see what we get\nwhen we print it.",
    "start": "2609670",
    "end": "2615160"
  },
  {
    "start": "2615160",
    "end": "2629770"
  },
  {
    "text": "So it's printing it. And you'll notice the order in\nwhich it's printed, the key value pairs, is not the order\nin which I typed them.",
    "start": "2629770",
    "end": "2639590"
  },
  {
    "start": "2639590",
    "end": "2647950"
  },
  {
    "text": "That's OK. The order in which it prints\nthem is not defined by Python.",
    "start": "2647950",
    "end": "2654710"
  },
  {
    "text": "So there's no way to\npredict the order. And that makes sense because, by\nspecification, dictionaries",
    "start": "2654710",
    "end": "2662110"
  },
  {
    "text": "are unordered. They're sets, not sequences. ",
    "start": "2662110",
    "end": "2673970"
  },
  {
    "text": "I can print keys, EtoF\nkeys, open, close.",
    "start": "2673970",
    "end": "2681980"
  },
  {
    "text": "Keys is a method on dicts\nthat returns the keys.",
    "start": "2681980",
    "end": "2687850"
  },
  {
    "text": "And then, just for fun, I'm\ngoing to try to print EtoF.keys without\nthe open, close.",
    "start": "2687850",
    "end": "2693599"
  },
  {
    "start": "2693600",
    "end": "2701640"
  },
  {
    "start": "2700000",
    "end": "2807000"
  },
  {
    "text": "So you'll see when I first\nprinted it with the open, closed, I got all of the keys\nin an order that was not",
    "start": "2701640",
    "end": "2711380"
  },
  {
    "text": "necessarily predictable. Certainly not the order\nin which I typed them. But that's nice.",
    "start": "2711380",
    "end": "2716670"
  },
  {
    "text": "I now have this sequence\nof keys that I could do things with.",
    "start": "2716670",
    "end": "2724370"
  },
  {
    "text": "When I typed it without the\nopen, close, and I wanted you to see this, it just says it's\na method, a built-in method.",
    "start": "2724370",
    "end": "2733610"
  },
  {
    "text": "It does not execute\nthe method, right? That's fine.",
    "start": "2733610",
    "end": "2739349"
  },
  {
    "text": "But again, you have to be\ncareful that you'll find this happening when you write code.",
    "start": "2739350",
    "end": "2746060"
  },
  {
    "text": "You'll forget to write\nthe open, close. And you'll wonder why your\nprogram isn't doing what you",
    "start": "2746060",
    "end": "2751460"
  },
  {
    "text": "expect it to do. Remember, it's not saying\nthat the method, keys, has no argument.",
    "start": "2751460",
    "end": "2758560"
  },
  {
    "text": "It has one argument. In this case, EtoF. And the open, close is basically\nsaying, all right,",
    "start": "2758560",
    "end": "2767000"
  },
  {
    "text": "call the method rather than\nthe method itself.",
    "start": "2767000",
    "end": "2772110"
  },
  {
    "text": "Again, this will be\nvery important when we get to classes.",
    "start": "2772110",
    "end": "2779790"
  },
  {
    "text": "Let's get rid of some of these\nprint statements now. ",
    "start": "2779790",
    "end": "2796569"
  },
  {
    "text": "Suppose I want to delete\nsomething. ",
    "start": "2796570",
    "end": "2807839"
  },
  {
    "start": "2807000",
    "end": "2830000"
  },
  {
    "text": "I can delete something, so\ndelete EtoF sub 1 del is a",
    "start": "2807840",
    "end": "2816150"
  },
  {
    "text": "command, much like print,\nthat says remove something from EtoF.",
    "start": "2816150",
    "end": "2822140"
  },
  {
    "text": " So I can do that. ",
    "start": "2822140",
    "end": "2831020"
  },
  {
    "start": "2830000",
    "end": "2894000"
  },
  {
    "text": "And now, something\nhas disappeared. The key value pair where\nthe key is one is gone.",
    "start": "2831020",
    "end": "2838910"
  },
  {
    "text": "So that's how I remove things. AUDIENCE: Question. PROFESSOR: Yes? AUDIENCE: Are the keys of\ndictionaries mutable?",
    "start": "2838910",
    "end": "2845821"
  },
  {
    "text": "PROFESSOR: The keys have\nto be immutable. You cannot use a mutable\ntype for a key.",
    "start": "2845822",
    "end": "2852000"
  },
  {
    "text": " We'll see the reason for that in\na couple of lectures when I",
    "start": "2852000",
    "end": "2859059"
  },
  {
    "text": "talk about how dictionaries\nare implemented in Python. They use a very clever technique\ncalled hashing which",
    "start": "2859060",
    "end": "2866990"
  },
  {
    "text": "would not work if the\nkeys were mutable. ",
    "start": "2866990",
    "end": "2872480"
  },
  {
    "text": "So in order to get an efficient\nimplementation of dictionary look-up, we need\nto have immutable keys.",
    "start": "2872480",
    "end": "2880540"
  },
  {
    "text": "And so that's required. ",
    "start": "2880540",
    "end": "2894830"
  },
  {
    "text": "Let's look at another example.  So here, I'm again setting\na dictionary.",
    "start": "2894830",
    "end": "2903500"
  },
  {
    "text": "And now, what I'm going to show\nyou is that I can iterate through the keys and\nprint the values.",
    "start": "2903500",
    "end": "2911785"
  },
  {
    "text": " For key in d1.keys, nothing\nvery fancy here.",
    "start": "2911785",
    "end": "2918714"
  },
  {
    "start": "2918715",
    "end": "2926290"
  },
  {
    "text": "OK?  one equals uno, pi equals\n3.1459, and deux equals 2.",
    "start": "2926290",
    "end": "2936560"
  },
  {
    "text": "All right? So nothing very dramatic\nhappening here.",
    "start": "2936560",
    "end": "2943010"
  },
  {
    "text": "Finally, just to illustrate\nwhy this sort of thing is particularly useful.",
    "start": "2943010",
    "end": "2949270"
  },
  {
    "text": "And in fact, you'll find it\nquite useful in the upcoming problem set. ",
    "start": "2949270",
    "end": "2957240"
  },
  {
    "text": "I'm going to do some\ntranslations. This, by the way, is not the\nway Google Translate works.",
    "start": "2957240",
    "end": "2963900"
  },
  {
    "text": "It's a bit more sophisticated. ",
    "start": "2963900",
    "end": "2975410"
  },
  {
    "start": "2974000",
    "end": "3035000"
  },
  {
    "text": "So I'm going to have two\nfunctions, translateword, which, if it finds the word in\nthe dictionary, returns the",
    "start": "2975410",
    "end": "2984020"
  },
  {
    "text": "value associated with the key. So note, if word in dictionary\nsays is there a key whose",
    "start": "2984020",
    "end": "2990050"
  },
  {
    "text": "value is word? If so, return the value\nassociated with that key.",
    "start": "2990050",
    "end": "2995940"
  },
  {
    "text": "Otherwise, don't even try\nand translate it. Just leave it the way it was.",
    "start": "2995940",
    "end": "3001660"
  },
  {
    "text": "And then, translatesentence will\nset the translation equal",
    "start": "3001660",
    "end": "3007670"
  },
  {
    "text": "to the empty string\nand wordequals to the empty string.",
    "start": "3007670",
    "end": "3013810"
  },
  {
    "text": "Then, it'll just collect all the\ncharacters until it finds a blank, translate\nthe word using",
    "start": "3013810",
    "end": "3020080"
  },
  {
    "text": "translateword, and append it. And when it's done,\nit will print it.",
    "start": "3020080",
    "end": "3025630"
  },
  {
    "text": "So we can now do these\ntranslations quite simply. ",
    "start": "3025630",
    "end": "3035980"
  },
  {
    "start": "3035000",
    "end": "3058000"
  },
  {
    "text": "What could be easier? You never again have to learn\na foreign language. Just use Python to do the\ntranslations for you.",
    "start": "3035980",
    "end": "3043300"
  },
  {
    "text": "All right, that's\nit for today. ",
    "start": "3043300",
    "end": "3048590"
  },
  {
    "text": "Remember, there is a problem set\nyou should be working on and another one that\nwill be posted.",
    "start": "3048590",
    "end": "3053960"
  },
  {
    "text": "Take care. ",
    "start": "3053960",
    "end": "3058067"
  }
]