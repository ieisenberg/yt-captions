[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13330"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13330",
    "end": "21800"
  },
  {
    "text": "PROFESSOR: OK. Who's going to lecture? Wow. Nice.",
    "start": "21800",
    "end": "27290"
  },
  {
    "text": "Does lecture make sense? One, two, three-- sort of. OK.",
    "start": "27290",
    "end": "32758"
  },
  {
    "text": "Then I'm going to\nhave an easy job. So any pointed questions?",
    "start": "32759",
    "end": "38020"
  },
  {
    "text": "Any specific pinpoints? We talked about DFS, but DFS\nand BFS are sort of related,",
    "start": "38020",
    "end": "43539"
  },
  {
    "text": "so I'm happy to take both. AUDIENCE: The\nclassification of edges? PROFESSOR: OK. We're going to talk\nabout that for sure.",
    "start": "43540",
    "end": "50140"
  },
  {
    "start": "50140",
    "end": "62050"
  },
  {
    "text": "Anything else? AUDIENCE: I thought it was\nfunny that in undirected graphs,",
    "start": "62050",
    "end": "67710"
  },
  {
    "text": "you could have a backward--\nor something like that. PROFESSOR: You don't\nhave to give a radiance. I will derive it.",
    "start": "67710",
    "end": "74120"
  },
  {
    "text": "OK So what edges do we have\nin directed versus undirected.",
    "start": "74120",
    "end": "80290"
  },
  {
    "text": " OK. What else?",
    "start": "80290",
    "end": "85629"
  },
  {
    "text": " Cool.",
    "start": "85629",
    "end": "90950"
  },
  {
    "text": "So I'm going to go through the\nconcepts in DFS really quickly. And we're going\nto focus on this.",
    "start": "90950",
    "end": "96160"
  },
  {
    "text": "Because it seems like this\nis where the issues are. ",
    "start": "96160",
    "end": "101500"
  },
  {
    "text": "I want this. So what's a graph?  AUDIENCE: Interconnected notes.",
    "start": "101500",
    "end": "108367"
  },
  {
    "text": "PROFESSOR: OK. Fancy names. Come on. We had this in\nthe last workshop. AUDIENCE: A set of\nedges and vertices.",
    "start": "108367",
    "end": "114810"
  },
  {
    "text": "PROFESSOR: All right. How do I draw my vertices? AUDIENCE: Dots. Circles.",
    "start": "114810",
    "end": "121098"
  },
  {
    "text": "PROFESSOR: Dots. How do I draw my edges? AUDIENCE: Dots.",
    "start": "121098",
    "end": "126941"
  },
  {
    "text": "Lines.  Oops. ",
    "start": "126942",
    "end": "162960"
  },
  {
    "text": "PROFESSOR: Looks like a graph? What kind of graph? Directed. Because there are arrows\nand not straight up lines.",
    "start": "162960",
    "end": "170500"
  },
  {
    "text": "Right? How do we store\ngraphs in Python? ",
    "start": "170500",
    "end": "177299"
  },
  {
    "text": "Fancy name first and\nthen implementation. AUDIENCE: [INAUDIBLE] list. PROFESSOR: OK. ",
    "start": "177300",
    "end": "189019"
  },
  {
    "text": "What's an adjacency\nlist in Python? AUDIENCE: It just\nshows what notes",
    "start": "189020",
    "end": "194940"
  },
  {
    "text": "are adjacent to other notes. PROFESSOR: OK. So what data\nstructure do we use? What elementary python\ndata structure do we use?",
    "start": "194940",
    "end": "202442"
  },
  {
    "text": "AUDIENCE: A dictionary? PROFESSOR: All right. So an adjacency list is a\ndictionary that keys our--",
    "start": "202442",
    "end": "209298"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: OK. So the keys are the vertices.",
    "start": "209298",
    "end": "215520"
  },
  {
    "text": " So on and so forth.",
    "start": "215520",
    "end": "221364"
  },
  {
    "text": "And what are the values?  AUDIENCE: The nodes?",
    "start": "221365",
    "end": "228375"
  },
  {
    "text": "Adjacent nodes? PROFESSOR: OK. ",
    "start": "228376",
    "end": "234159"
  },
  {
    "text": "A list of something. So after our presentation,\nis the object the one",
    "start": "234160",
    "end": "239970"
  },
  {
    "text": "that has edges\nand the simplified one that has vertices. So suppose I want to\ngo for the simple one.",
    "start": "239970",
    "end": "247220"
  },
  {
    "text": "Where vertices do\nI have in A's list? AUDIENCE: B and G. Right?",
    "start": "247220",
    "end": "252420"
  },
  {
    "text": " PROFESSOR: B and G. Sounds good.",
    "start": "252420",
    "end": "257605"
  },
  {
    "text": " Right. What vertices do I\nhave in B's list?",
    "start": "257606",
    "end": "264466"
  },
  {
    "text": "AUDIENCE: C. PROFESSOR: Why do I not have A?",
    "start": "264466",
    "end": "272094"
  },
  {
    "text": "AUDIENCE: Because it's an\narrow, so it can't get to A. PROFESSOR: Yeah.",
    "start": "272094",
    "end": "277379"
  },
  {
    "text": "So the nodes that\nI have in the list are the nodes that are\nreachable from that node.",
    "start": "277380",
    "end": "282860"
  },
  {
    "text": "I have an edge from B to C,\nso C is reachable from B. I do not have an\nedge from B to A",
    "start": "282860",
    "end": "288509"
  },
  {
    "text": "because my edges are directed. So A is not there. OK. Let's write a bit of pseudo-\nSo although it's Python,",
    "start": "288510",
    "end": "296480"
  },
  {
    "text": "let's say our graph is\nrepresented by a class G. Let's say in this class I\nhave a dictionary called",
    "start": "296480",
    "end": "305450"
  },
  {
    "text": "al, which has what we want. If I want to get all the\nvertices in the graph,",
    "start": "305450",
    "end": "312820"
  },
  {
    "text": "I want to write the method\nthat returns all the vertices. ",
    "start": "312820",
    "end": "319039"
  },
  {
    "text": "What should it look like? Just to make sure that we're\nall getting the data structure.",
    "start": "319040",
    "end": "324784"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: OK.  So the keys are in the vertices. ",
    "start": "324784",
    "end": "334840"
  },
  {
    "text": "Now, given the vertex,\nI want its neighbors. ",
    "start": "334840",
    "end": "342240"
  },
  {
    "text": "How do I write that? AUDIENCE: You mean only the\nvertices that it can go to?",
    "start": "342240",
    "end": "347632"
  },
  {
    "text": "PROFESSOR: Yeah.  AUDIENCE: Yeah. Dictionary and that vertex.",
    "start": "347632",
    "end": "354400"
  },
  {
    "text": "PROFESSOR: So\nreturn dictionary-- AUDIENCE: al bracket vertex v.",
    "start": "354400",
    "end": "364244"
  },
  {
    "text": "PROFESSOR: Cool. OK. So this makes sense\nfor everyone, right? ",
    "start": "364244",
    "end": "372110"
  },
  {
    "text": "Let's start writing\nDFS because no one said they don't understand DFS. So let's say we have\na DFS procedure.",
    "start": "372110",
    "end": "382319"
  },
  {
    "text": "And it gets a graph. And it has to do DFS. ",
    "start": "382320",
    "end": "389840"
  },
  {
    "text": "What do you need for DFS?  Starting points would be good.",
    "start": "389840",
    "end": "396240"
  },
  {
    "text": "Just like for DFS, right? So how do we do DFS?",
    "start": "396240",
    "end": "401740"
  },
  {
    "start": "401740",
    "end": "407030"
  },
  {
    "text": "AUDIENCE: Start with\none node and then we keep on following a path down\nby picking the first vertex.",
    "start": "407030",
    "end": "413220"
  },
  {
    "text": "So like for A,\nwe'd start with A. Then we'd pick the first\nvertex in its list.",
    "start": "413220",
    "end": "418715"
  },
  {
    "text": "And then we pick the first\nvertex in that one's list, first vertex in that one's\nlist, until we run out.",
    "start": "418715",
    "end": "425243"
  },
  {
    "text": "PROFESSOR: OK. So basically you start today. And for every neighbor,\nyou recursively",
    "start": "425243",
    "end": "432220"
  },
  {
    "text": "do DFS on that neighbor. Right? So since this is\nrecursive, let's write it",
    "start": "432220",
    "end": "437700"
  },
  {
    "text": "in a recursive\nmanner, nice and easy. So say DFS calls DFS\nvisit of g and s.",
    "start": "437700",
    "end": "449090"
  },
  {
    "text": "And let's say DFS\nvisit takes the graph,",
    "start": "449090",
    "end": "457990"
  },
  {
    "text": "takes the node that\nwe're visiting, and how are we\nimplementing this?",
    "start": "457990",
    "end": "463030"
  },
  {
    "text": " AUDIENCE: Just\nreturn [INAUDIBLE].",
    "start": "463030",
    "end": "470270"
  },
  {
    "text": "No. It marks as visited. PROFESSOR: OK. Marking something as visited\nis important to lead this.",
    "start": "470270",
    "end": "476870"
  },
  {
    "text": "So what's the main thing\nthat you do in DFS? Iterate over the\nneighbors and recurse.",
    "start": "476870",
    "end": "482750"
  },
  {
    "text": "Right? So for n in g neighbors of v\ncalled DFS visit of g and n.",
    "start": "482750",
    "end": "505950"
  },
  {
    "text": "So this is the basic idea. It has some holes that we need\nto fill because otherwise it",
    "start": "505950",
    "end": "513140"
  },
  {
    "text": "doesn't quite work. This is going to\nrecurse forever, which is not very good\nif you have a time",
    "start": "513140",
    "end": "518940"
  },
  {
    "text": "limit that your\ncode needs to obey. So how do I make it\nnot recurse forever?",
    "start": "518940",
    "end": "525529"
  },
  {
    "text": "AUDIENCE: Every time you visit,\nyou're about to visit a node, check if you've\nalready visited it.",
    "start": "525529",
    "end": "531215"
  },
  {
    "text": "PROFESSOR: All right. So we should keep\ntrack of the nodes that we've already visited\nand not visit them again.",
    "start": "531215",
    "end": "536690"
  },
  {
    "text": "Right. So you start with\nA, go to B, go to C,",
    "start": "536690",
    "end": "542332"
  },
  {
    "text": "you'd better not go to A\nagain because you've already been there. So let's implement\nthat this way.",
    "start": "542332",
    "end": "548420"
  },
  {
    "text": "Let's make a new object\ncalled DFS result that is sort of that\ndrawer that you have",
    "start": "548420",
    "end": "557560"
  },
  {
    "text": "where you stick\neverything in where you don't have a good place. So everything I do\nnot have a good place to put it, you just\nstick it in a drawer.",
    "start": "557560",
    "end": "564240"
  },
  {
    "text": "And then you can close\nthe drawing that be like, it's clean. Everything's clean. So let's say DFS\nresult is that drawer.",
    "start": "564240",
    "end": "569777"
  },
  {
    "text": "Everything that they\nneed from now on, we're just going\nto stick in there. So I have an object DFS result.",
    "start": "569777",
    "end": "579100"
  },
  {
    "text": "And we're going to figure\nout what we put in it. But at the beginning of DFS,\nI'm going to create that.",
    "start": "579100",
    "end": "584995"
  },
  {
    "text": " So create the new object.",
    "start": "584995",
    "end": "590490"
  },
  {
    "text": "And then I'm going to\npass it onto to DFS visit. ",
    "start": "590490",
    "end": "599740"
  },
  {
    "text": "So now we have a drawer where\nwe can put everything we want.",
    "start": "599740",
    "end": "604790"
  },
  {
    "text": "So let's keep track of the\nvisited information here.",
    "start": "604790",
    "end": "610610"
  },
  {
    "text": "How would I keep track\nof what nodes I visited? AUDIENCE: In a list?",
    "start": "610610",
    "end": "616150"
  },
  {
    "text": "PROFESSOR: In a list. So if I do a list, it\nturns out that in DFS,",
    "start": "616150",
    "end": "622529"
  },
  {
    "text": "and VFS, for that\nmatter, you check if you visited a\nnode pretty often. So it would be kind of slow.",
    "start": "622530",
    "end": "628130"
  },
  {
    "text": "So let's have a dictionary. What are we going to\nput in that dictionary? ",
    "start": "628130",
    "end": "633694"
  },
  {
    "text": "AUDIENCE: The node [INAUDIBLE]\nand listed [INAUDIBLE]. PROFESSOR: OK. So we're going to have\na visited dictionary.",
    "start": "633694",
    "end": "643710"
  },
  {
    "text": "And then the keys are\ngoing to be nodes. And let's say we're only going\nto put the nodes that we visit",
    "start": "643710",
    "end": "649320"
  },
  {
    "text": "in it so we don't\nhave to initialize it. And the values are\ngoing to be true. Because if the node\nis in the dictionary,",
    "start": "649320",
    "end": "655288"
  },
  {
    "text": "it means we visited it. So for all the nodes\nthat are in there,",
    "start": "655288",
    "end": "660920"
  },
  {
    "text": "visited is going to be true. ",
    "start": "660920",
    "end": "666024"
  },
  {
    "text": "Sorry.  OK. So where do I fill this in?",
    "start": "666024",
    "end": "674490"
  },
  {
    "text": "Let's use it.  AUDIENCE: Four n and g\nneighbors, set it to true.",
    "start": "674490",
    "end": "686470"
  },
  {
    "text": "But before that-- PROFESSOR: So here? AUDIENCE: R not.",
    "start": "686470",
    "end": "693279"
  },
  {
    "text": "Um. PROFESSOR: OK. ",
    "start": "693280",
    "end": "700530"
  },
  {
    "text": "So let's say this. Let's say these\nare lines 1, 2, 3. Line 1.5 or 2.5?",
    "start": "700530",
    "end": "707920"
  },
  {
    "text": "AUDIENCE: So at n 1.5, check\nif v is in the dictionary.",
    "start": "707920",
    "end": "714839"
  },
  {
    "text": "PROFESSOR: Here? OK. If v in r dot visited, then--",
    "start": "714840",
    "end": "726646"
  },
  {
    "text": " AUDIENCE: Return. ",
    "start": "726646",
    "end": "739360"
  },
  {
    "text": "Then 2.5, set r dot n to true.",
    "start": "739360",
    "end": "746750"
  },
  {
    "text": "You would only do it n times-- PROFESSOR: Wait.",
    "start": "746750",
    "end": "751780"
  },
  {
    "text": "So here you're saying say r\ndot visited of n equals true? AUDIENCE: Oh, no.",
    "start": "751780",
    "end": "757462"
  },
  {
    "text": "Change the v in\nv visited return, change that into a loop.",
    "start": "757462",
    "end": "762885"
  },
  {
    "text": "Put that after the loop. Put that into the loop.",
    "start": "762885",
    "end": "768391"
  },
  {
    "text": "And it's n visited\nto the [INAUDIBLE]. ",
    "start": "768392",
    "end": "779350"
  },
  {
    "text": "PROFESSOR: n in r dot visited--\nwe probably want not n, right?",
    "start": "779350",
    "end": "788803"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "788804",
    "end": "794147"
  },
  {
    "text": "PROFESSOR: OK. ",
    "start": "794147",
    "end": "799670"
  },
  {
    "text": "R dot visited is true\nand then the DFS.",
    "start": "799670",
    "end": "808636"
  },
  {
    "text": "So will this achieve the thing\nthat I wanted at the beginning. You start at A, you\ngo to B, you go to C, and then you do not go to A?",
    "start": "808637",
    "end": "815280"
  },
  {
    "text": "Not quite. AUDIENCE: We haven't\nhad our starting yet. Yeah. ",
    "start": "815280",
    "end": "823414"
  },
  {
    "text": "We could add V at the\nbeginning and check at the end.",
    "start": "823414",
    "end": "828529"
  },
  {
    "text": "Because that's only\nthe visited, right? PROFESSOR: So I think I\nlike Christian's suggestion.",
    "start": "828529",
    "end": "834860"
  },
  {
    "text": "r dot visited of v is true.",
    "start": "834860",
    "end": "842760"
  },
  {
    "text": "And then we can\nremove it from here.  AUDIENCE: It has\nto be [INAUDIBLE]",
    "start": "842760",
    "end": "851639"
  },
  {
    "text": "because the other\ncase is going to cover for if you visited again. But the first time it's being\ncalled, it's not checking--",
    "start": "851640",
    "end": "861855"
  },
  {
    "text": "PROFESSOR: Well you mean\nthe first time here? AUDIENCE: The first\ncall that's being made, and the recursive\ncall, it's going",
    "start": "861855",
    "end": "867914"
  },
  {
    "text": "to be as if it's not\ninto the visited node. PROFESSOR: Yeah. But this is at the beginning.",
    "start": "867914",
    "end": "874089"
  },
  {
    "text": "Right? So this calls DFS visit\nto the starting node. Do we care? ",
    "start": "874090",
    "end": "882340"
  },
  {
    "text": "So I think this should work. It's not the only way to write\nit, but it's reasonably clean. It's easy to reason\nabout, and it works.",
    "start": "882340",
    "end": "890370"
  },
  {
    "text": "Does it make sense to everyone? OK. We're going to change\nthings a little bit. So instead of using\nvisited, we're",
    "start": "890370",
    "end": "896690"
  },
  {
    "text": "going to keep track for\nevery node of its parent. So the node that\nwe visited from.",
    "start": "896690",
    "end": "903000"
  },
  {
    "text": "So we're not going to\nuse visited anymore. Instead we're going\nto use parent of v",
    "start": "903000",
    "end": "910220"
  },
  {
    "text": "is going to be some other node. ",
    "start": "910220",
    "end": "917930"
  },
  {
    "text": "So what I want is\nfor this graph, I said I'm going to go from\nA to B, and then from B to C.",
    "start": "917930",
    "end": "924220"
  },
  {
    "text": "So I want the parent of B to be\nA, and the parent of C to be B.",
    "start": "924220",
    "end": "932339"
  },
  {
    "text": "Make sense for everyone? So what's the parent of A? AUDIENCE: None. PROFESSOR: None's a\ngood value, right?",
    "start": "932340",
    "end": "939180"
  },
  {
    "text": "There's no parent. OK. So how would I modify\nthis code to write that?",
    "start": "939180",
    "end": "944880"
  },
  {
    "start": "944880",
    "end": "952730"
  },
  {
    "text": "AUDIENCE: Stick a line\nin 2.75 and establish 3b",
    "start": "952730",
    "end": "959940"
  },
  {
    "text": "as the parent of n. PROFESSOR: So r dot parent?",
    "start": "959940",
    "end": "968300"
  },
  {
    "text": "AUDIENCE: Yeah, of n is v. PROFESSOR: Of n is v. Good.",
    "start": "968300",
    "end": "975480"
  },
  {
    "text": "And I don't have\nvisited anymore, so this line is\ngoing to blow up. So what do I do instead? ",
    "start": "975480",
    "end": "983080"
  },
  {
    "text": "AUDIENCE: Oh. It doesn't have a parent? PROFESSOR: Yep.",
    "start": "983080",
    "end": "988700"
  },
  {
    "text": "So if it doesn't have a\nparent, we didn't visit it. So the parents works\njust like visited, except the values are\nnot going to be all true.",
    "start": "988700",
    "end": "995108"
  },
  {
    "text": "They're going to be\nsomething a bit more useful. AUDIENCE: We can't test for\nnone because the first one has",
    "start": "995108",
    "end": "1001232"
  },
  {
    "text": "a value of none. PROFESSOR: But they're\nnot testing for none, we're saying is it in\nthe dictionary or not? AUDIENCE: Oh. OK.",
    "start": "1001232",
    "end": "1006730"
  },
  {
    "start": "1006730",
    "end": "1012359"
  },
  {
    "text": "PROFESSOR: That's a good point. You could be testing for none. That wouldn't work. So you have to write\nthe check like this.",
    "start": "1012359",
    "end": "1018370"
  },
  {
    "text": "And we're going to erase\nthis because otherwise, it's going to throw an exception. ",
    "start": "1018370",
    "end": "1026209"
  },
  {
    "text": "And what else do we need? There's one missing parent. ",
    "start": "1026210",
    "end": "1034533"
  },
  {
    "text": "AUDIENCE: Inverse form? PROFESSOR: OK. Where do I say that? AUDIENCE: In DFS.",
    "start": "1034534",
    "end": "1041459"
  },
  {
    "text": "PROFESSOR: OK. One, two, three, which line?",
    "start": "1041460",
    "end": "1046599"
  },
  {
    "text": "1.5, 2.5, 3.5? AUDIENCE: 2.5. PROFESSOR: 2.5.",
    "start": "1046599",
    "end": "1052000"
  },
  {
    "text": "All right, so here. What do I write? ",
    "start": "1052000",
    "end": "1059470"
  },
  {
    "text": "Yes?  AUDIENCE: Parent of s is none.",
    "start": "1059470",
    "end": "1064980"
  },
  {
    "text": "PROFESSOR: OK. So r dot parent s is none.",
    "start": "1064980",
    "end": "1074889"
  },
  {
    "text": "So now this works. Right? Any questions so far? ",
    "start": "1074890",
    "end": "1083470"
  },
  {
    "text": "Nope. Basic DFS works. Everyone's happy with it? ",
    "start": "1083470",
    "end": "1091460"
  },
  {
    "text": "Let's try to track it\nfor this graph here.",
    "start": "1091460",
    "end": "1096970"
  },
  {
    "text": "And you're going to be in\na better position than me because I'm not sure I\ncan see the graph all the way from here.",
    "start": "1096970",
    "end": "1103990"
  },
  {
    "text": "Almost. So let's have the parents or\nthe parent's dictionary here.",
    "start": "1103990",
    "end": "1110750"
  },
  {
    "text": " And here, let's write the call\nstructure as it will happen.",
    "start": "1110750",
    "end": "1119830"
  },
  {
    "text": "So where do I start? DFS of A, right?",
    "start": "1119830",
    "end": "1126840"
  },
  {
    "text": "DFS of A. And this is\ngoing to call DFS visit A.",
    "start": "1126840",
    "end": "1136130"
  },
  {
    "text": "What are A's neighbors?  AUDIENCE: b and g. ",
    "start": "1136130",
    "end": "1143914"
  },
  {
    "text": "PROFESSOR: Cool. Is b in parents? What's in parents,\nat this point?",
    "start": "1143914",
    "end": "1149802"
  },
  {
    "text": "AUDIENCE: Just a. Oh. PROFESSOR: A is none.",
    "start": "1149802",
    "end": "1156020"
  },
  {
    "text": "Good. Excellent. So B is not in parents,\nso what am I going to do?",
    "start": "1156020",
    "end": "1161560"
  },
  {
    "text": "And it's the parents in visited. Right? What's B's parents? ",
    "start": "1161560",
    "end": "1168629"
  },
  {
    "text": "AUDIENCE: A. PROFESSOR: OK. I'm going to call DFS\nvisit of B. These children.",
    "start": "1168629",
    "end": "1178480"
  },
  {
    "text": " C. Is C parents?",
    "start": "1178480",
    "end": "1185940"
  },
  {
    "text": "No? What happens? Feel free to take over. When you get it, feel\nfree to start talking, and I can just write.",
    "start": "1185940",
    "end": "1191263"
  },
  {
    "text": "AUDIENCE: Of C. PROFESSOR: OK. ",
    "start": "1191263",
    "end": "1196660"
  },
  {
    "text": "What else? PROFESSOR: C's\nparent is B. So I'm",
    "start": "1196660",
    "end": "1203860"
  },
  {
    "text": "in B. The only child is\nC. C is not in parents. C gets in parent. C's parent is B. Call DFS visit\nof C, what are C's children?",
    "start": "1203860",
    "end": "1213270"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] and d.  PROFESSOR: So we're wondering\nabout the order, right?",
    "start": "1213270",
    "end": "1219210"
  },
  {
    "text": "Let's assume that in\nthe adjacency list, all the nodes are in\nalphabetical order.",
    "start": "1219210",
    "end": "1224500"
  },
  {
    "text": "So I'm going to have\nA, D, and F. OK.",
    "start": "1224500",
    "end": "1234930"
  },
  {
    "text": "Is A in parents? AUDIENCE: Yes.",
    "start": "1234930",
    "end": "1239960"
  },
  {
    "text": "PROFESSOR: Is D in parents? AUDIENCE: No. PROFESSOR: So what happens?",
    "start": "1239960",
    "end": "1245543"
  },
  {
    "text": "AUDIENCE: Parents visit\nD. D's parent is C.",
    "start": "1245543",
    "end": "1254390"
  },
  {
    "text": "PROFESSOR: D's neighbors? AUDIENCE: E and F.",
    "start": "1254390",
    "end": "1262399"
  },
  {
    "text": "PROFESSOR: E is in the-- no. ",
    "start": "1262400",
    "end": "1271354"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. ",
    "start": "1271354",
    "end": "1279140"
  },
  {
    "text": "PROFESSOR: Cool. Does E have any children? AUDIENCE: No. PROFESSOR: So I'm done. I get out of it, right?",
    "start": "1279140",
    "end": "1287310"
  },
  {
    "text": "Is F in parents? AUDIENCE: No.",
    "start": "1287310",
    "end": "1293088"
  },
  {
    "text": "PROFESSOR: F's parent is? Cool. ",
    "start": "1293088",
    "end": "1303464"
  },
  {
    "text": "F doesn't have any children. Right? So I get out of this DFS visit.",
    "start": "1303464",
    "end": "1309210"
  },
  {
    "text": "I'm done with F. So I\nget out of this visit. And I get back to this one. I'm done with D, and I'm\nat F. Is F in parents?",
    "start": "1309210",
    "end": "1318060"
  },
  {
    "text": "OK. So what kind of edge is C to F?",
    "start": "1318060",
    "end": "1325594"
  },
  {
    "text": "AUDIENCE: Forward.  PROFESSOR: OK. ",
    "start": "1325594",
    "end": "1332690"
  },
  {
    "text": "So forward maybe tree. Let's start with the easy ones. So now we've gone forward\nwith AB, BC, CD, DE, and DF.",
    "start": "1332690",
    "end": "1340790"
  },
  {
    "text": "What kind of edges\nare these ones? ",
    "start": "1340790",
    "end": "1346520"
  },
  {
    "text": "Tree edges. ",
    "start": "1346520",
    "end": "1352540"
  },
  {
    "text": "Does anyone know why\nthey're called tree edges? ",
    "start": "1352540",
    "end": "1358504"
  },
  {
    "text": "So if you look at the parent\npointers that they have there, they're going to end\nup defining a tree.",
    "start": "1358504",
    "end": "1366280"
  },
  {
    "text": "And the tree is, the\ntree shows the order in which DFS looked\nat the notes.",
    "start": "1366280",
    "end": "1371350"
  },
  {
    "text": "So let me erase this and\ndraw the tree for DFS that we had so far.",
    "start": "1371350",
    "end": "1377210"
  },
  {
    "text": " So we started at A, then we went\nto B. Then we went to C, then",
    "start": "1377210",
    "end": "1385450"
  },
  {
    "text": "we went to D, E, F. So this is\nall part of the DFS tree.You",
    "start": "1385450",
    "end": "1392200"
  },
  {
    "text": "can see that for\nall these nodes, their parent pointers\npoint the right way. So if you have parent\npointers for every node,",
    "start": "1392200",
    "end": "1399010"
  },
  {
    "text": "this is going to\ngive you a tree. So these are tree edges because\nthey're part of this tree.",
    "start": "1399010",
    "end": "1404950"
  },
  {
    "text": "So now we have this\nedge from C to F.",
    "start": "1404950",
    "end": "1410269"
  },
  {
    "text": "And this is what kind of edge? ",
    "start": "1410270",
    "end": "1416127"
  },
  {
    "text": "Forward edge. Why is it a forward edge? AUDIENCE: Somewhere\nup higher in the tree",
    "start": "1416127",
    "end": "1422142"
  },
  {
    "text": "is trying to get somewhere\nlower on the tree. It's going forward in time. PROFESSOR: So it's going\nfrom a node in the tree",
    "start": "1422142",
    "end": "1429740"
  },
  {
    "text": "to a node's child in the tree. Sorry, not child. Descendant. So F is strictly\nunder C. So yeah.",
    "start": "1429740",
    "end": "1439250"
  },
  {
    "text": "It takes us forward in time. It's a shortcut in the tree. So that's why it's\na forward edge.",
    "start": "1439250",
    "end": "1445400"
  },
  {
    "text": "So we now have two\ntypes of edges so far. Tree edges and forward edges. AUDIENCE: So tree\nedges [INAUDIBLE]?",
    "start": "1445400",
    "end": "1453370"
  },
  {
    "text": "PROFESSOR: Yep. So the tree edges are the\nones that DFS follows. ",
    "start": "1453370",
    "end": "1459640"
  },
  {
    "text": "All of these are tree edges. Yes. AUDIENCE: So like\nan edge from B to C,",
    "start": "1459640",
    "end": "1465830"
  },
  {
    "text": "why can't that be\na forward edge? Because technically it's\nnot a shortcut, right? But it's saying it's\npointing to the children,",
    "start": "1465831",
    "end": "1471044"
  },
  {
    "text": "but it only has one child. PROFESSOR: Because that's\nthe edge that DFS took. So the edges that we\nactually follow in DFS",
    "start": "1471044",
    "end": "1478180"
  },
  {
    "text": "have a special name,\nand they're tree edges. So first off, the\nmost important edges",
    "start": "1478180",
    "end": "1483679"
  },
  {
    "text": "are the edges that\nmake up your DFS tree. And that's why those\nare tree edges.",
    "start": "1483680",
    "end": "1489867"
  },
  {
    "text": "We don't even look\nat the other types. If you have an edge and DFS\nfollowed it, it's a tree edge. Done.",
    "start": "1489867",
    "end": "1496340"
  },
  {
    "text": "So these are all tree edges. We don't care about\nthe other definitions. ",
    "start": "1496340",
    "end": "1503809"
  },
  {
    "text": "So don't be ashamed to\nask questions about this because this is\nhard to understand. It's an issue we're\ntrying to clarify here.",
    "start": "1503810",
    "end": "1510409"
  },
  {
    "text": "So the point, why we're\ndoing that example, is to figure this out. So please do ask your questions.",
    "start": "1510410",
    "end": "1516770"
  },
  {
    "text": "Yes? AUDIENCE: So is it edges that\nare followed at any point during the search process?",
    "start": "1516770",
    "end": "1523358"
  },
  {
    "text": "I guess they're edges\nthat never get touched. Right? PROFESSOR: Yep.",
    "start": "1523358",
    "end": "1528395"
  },
  {
    "text": "So when I'm at C, and\nI look at this edge, F is already in parents. So this edge is not going\nto be followed by DFS.",
    "start": "1528395",
    "end": "1535622"
  },
  {
    "text": "There are some\nother types of edges that will not be followed. And we'll get to that by\nthe time DFS completes.",
    "start": "1535622",
    "end": "1541812"
  },
  {
    "text": "Yes. AUDIENCE: You mean that\nlike G to C is not--",
    "start": "1541812",
    "end": "1548710"
  },
  {
    "text": "PROFESSOR: You're\nruining my example, man. I'm supposed to ask\nyou that later on. So let's let go through it and\nsee what kind of edge it is.",
    "start": "1548710",
    "end": "1556360"
  },
  {
    "text": "You're right, but let's\npretend we don't know that. And we'll see as\nwe follow the DFS.",
    "start": "1556360",
    "end": "1561720"
  },
  {
    "text": "OK. So yep. That one's a forward edge. We'll deal with it later.",
    "start": "1561720",
    "end": "1566899"
  },
  {
    "text": "We're here. We decided that C to\nF is a forward edge.",
    "start": "1566900",
    "end": "1572510"
  },
  {
    "text": "F is already in parents. So we're going to\nreturn from DFS visit C. We're in DFS visit\nV. We're done with C.",
    "start": "1572510",
    "end": "1581530"
  },
  {
    "text": "Do we have anything\nelse to do here? So we go up to A. We're done\nwith B. And we look at G. A",
    "start": "1581530",
    "end": "1591789"
  },
  {
    "text": "to G. Is G in parents? No. So we're going to call it.",
    "start": "1591790",
    "end": "1600059"
  },
  {
    "text": "So A, B. DFS visit G.\nWhat are G's neighbors?",
    "start": "1600060",
    "end": "1612955"
  },
  {
    "text": "AUDIENCE: C.",
    "start": "1612955",
    "end": "1618409"
  },
  {
    "text": "PROFESSOR: OK. So is C in parents?",
    "start": "1618410",
    "end": "1625090"
  },
  {
    "text": " Actually I was wrong. Sorry. So C is in parents, so\nwe're not going to visit it.",
    "start": "1625090",
    "end": "1633275"
  },
  {
    "text": "So let's see how the tree\nlooks like at this point. ",
    "start": "1633275",
    "end": "1640000"
  },
  {
    "text": "So it looks like this. Is C a child of G?",
    "start": "1640000",
    "end": "1647995"
  },
  {
    "text": " So I'm wondering about this edge\nthat we chose not to follow.",
    "start": "1647995",
    "end": "1655270"
  },
  {
    "text": "We followed A to G so we know\nthis is actually the edge. So from this edge, G to C, I'm\nwondering what kind of edge",
    "start": "1655270",
    "end": "1663640"
  },
  {
    "text": "it is. ",
    "start": "1663640",
    "end": "1669559"
  },
  {
    "text": "So C is not G's child, right? So another forward edge. Sorry. I got confused\nearlier because they",
    "start": "1669560",
    "end": "1675728"
  },
  {
    "text": "look the same in a drawing. So it's not a forward edge,\nthen it's a cross edge.",
    "start": "1675728",
    "end": "1682220"
  },
  {
    "text": " There's one more\nedge that we haven't",
    "start": "1682220",
    "end": "1688170"
  },
  {
    "text": "talked about because it was\ntoo early in the search. And that edge is from C\nto A. So if you remember",
    "start": "1688170",
    "end": "1698000"
  },
  {
    "text": "there, we were in DFS visit\nC. And the first thing we did",
    "start": "1698000",
    "end": "1703310"
  },
  {
    "text": "was we looked at A, we said,\nhey it's already in parents, so we're not going to visit it. So DFS did not follow\nthe edge C to A.",
    "start": "1703310",
    "end": "1711557"
  },
  {
    "text": "That edge looks like this. What kind of edge is it? Back edge.",
    "start": "1711557",
    "end": "1717748"
  },
  {
    "text": "AUDIENCE: Wait. So it has to be direct\ndescendant in order to be a forward edge?",
    "start": "1717749",
    "end": "1722946"
  },
  {
    "text": "Because they are related\nthrough A, right? C and G?",
    "start": "1722946",
    "end": "1729357"
  },
  {
    "text": "PROFESSOR: So you have to look\nand which direction does it go? Does it go down the\ntree or up the tree?",
    "start": "1729357",
    "end": "1734899"
  },
  {
    "text": "AUDIENCE: It's going down if you\nconsider G to C. From G to C,",
    "start": "1734900",
    "end": "1740460"
  },
  {
    "text": "so it's a cross edge. PROFESSOR: Yeah. But is C G's descendant?",
    "start": "1740460",
    "end": "1747139"
  },
  {
    "text": "AUDIENCE: No. But they are related. PROFESSOR: They're\nrelated, but they're just",
    "start": "1747139",
    "end": "1753090"
  },
  {
    "text": "related because\nthey're in the tree. AUDIENCE: OK. So it's only\ndirectly descendants?",
    "start": "1753090",
    "end": "1758820"
  },
  {
    "text": "PROFESSOR: Yep. So DFS puts together a tree. A forward edge is a\nshortcut in that tree.",
    "start": "1758820",
    "end": "1765910"
  },
  {
    "text": "It lets you go\nforward in the VFS. A backward edge points\nto a parent in the tree,",
    "start": "1765910",
    "end": "1772660"
  },
  {
    "text": "so it lets you go back in time. A cross edge takes you from\none point to another point.",
    "start": "1772660",
    "end": "1777950"
  },
  {
    "text": "And it's not a forward\nedge, not a backward edge. So it takes you in a\nwhole different world.",
    "start": "1777950",
    "end": "1784180"
  },
  {
    "text": "So C, A, G, has-- A,\nG is the sub-tree,",
    "start": "1784180",
    "end": "1789500"
  },
  {
    "text": "and then this guy's\nthis other sub-tree, and they're different\nlittle worlds.",
    "start": "1789500",
    "end": "1794660"
  },
  {
    "text": "And this edge goes\nfrom one to the other. ",
    "start": "1794660",
    "end": "1800161"
  },
  {
    "text": "So the algorithm to decide what\nkind of an edge it is, let's put it together. Which edge do we look at, which\ntype do we think about first?",
    "start": "1800161",
    "end": "1808800"
  },
  {
    "text": "Tree edge. So DFS followed the edge. It's a tree edge. So we have tree edges.",
    "start": "1808800",
    "end": "1815980"
  },
  {
    "text": "What do we do next? So say we have an edge from\nu to v. If DFS follows it,",
    "start": "1815980",
    "end": "1825419"
  },
  {
    "text": "it's a tree edge. If not, then what\nquestion do I ask myself?",
    "start": "1825420",
    "end": "1831228"
  },
  {
    "text": "AUDIENCE: It could be\none of three edges then, back, forward, or cross. PROFESSOR: OK. So let's try to write\na simple algorithm",
    "start": "1831228",
    "end": "1837380"
  },
  {
    "text": "so that if I ask\nyou this on a quiz, you can decide which is which. AUDIENCE: So I think\nthat you look forward",
    "start": "1837380",
    "end": "1844915"
  },
  {
    "text": "if u is the parent of v. PROFESSOR: OK. So if u is a parent of v--\nwell, let's say ascendant.",
    "start": "1844916",
    "end": "1858851"
  },
  {
    "text": "It's not just the\ndirect parent, but this is the right intuition.",
    "start": "1858852",
    "end": "1864179"
  },
  {
    "text": "Then what kind of edge is it? AUDIENCE: Then it's\nthe forward edge. PROFESSOR: So the edge is from\nu to v. If u is a parent of v,",
    "start": "1864180",
    "end": "1872360"
  },
  {
    "text": "forward edge. Good.  Otherwise?",
    "start": "1872360",
    "end": "1877575"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE]. ",
    "start": "1877575",
    "end": "1885557"
  },
  {
    "text": "PROFESSOR: OK. ",
    "start": "1885557",
    "end": "1895400"
  },
  {
    "text": "Then? AUDIENCE: Then backward edge. Else cross edge.",
    "start": "1895400",
    "end": "1900830"
  },
  {
    "start": "1900830",
    "end": "1908380"
  },
  {
    "text": "PROFESSOR: Does this make sense? So these are the\nfour types of edges. DFS takes the edge,\nit's a forward edge.",
    "start": "1908380",
    "end": "1914690"
  },
  {
    "text": "If not, we draw the DFS tree. And we see does\nthe edge go forward in the tree, forward edge.",
    "start": "1914690",
    "end": "1920880"
  },
  {
    "text": "Does it go backward,\nbackward edge. Does it grow between completely\nunrelated nodes, cross edge.",
    "start": "1920880",
    "end": "1927935"
  },
  {
    "text": " OK. Now let me ask another question.",
    "start": "1927935",
    "end": "1933710"
  },
  {
    "text": "Let's suppose we do\nthis DFS thing again, but let's suppose we do\nit on an undirected graph.",
    "start": "1933710",
    "end": "1939830"
  },
  {
    "text": "What types of edges do I have? Anyone remember off\nthe top of their heads?",
    "start": "1939830",
    "end": "1946954"
  },
  {
    "text": "Don't think so, right? So let's do it and find out. ",
    "start": "1946954",
    "end": "1964740"
  },
  {
    "text": "So let me see where\ndo I get some room.",
    "start": "1964740",
    "end": "1971350"
  },
  {
    "text": " Here. ",
    "start": "1971350",
    "end": "1982364"
  },
  {
    "text": "Let's write the tree\nthat's we're going to go. So let's do a VFS of this\nquickly and write the tree. So we start at A, then what?",
    "start": "1982364",
    "end": "1990630"
  },
  {
    "text": " Then? ",
    "start": "1990630",
    "end": "1998280"
  },
  {
    "text": "Then? D. E.",
    "start": "1998280",
    "end": "2005445"
  },
  {
    "text": "AUDIENCE: And go back to\nD. It could go from C to A.",
    "start": "2005445",
    "end": "2013637"
  },
  {
    "text": "PROFESSOR: OK. So we have C to A. What\nkind of edge is this? AUDIENCE: Backward edge.",
    "start": "2013637",
    "end": "2020387"
  },
  {
    "text": "PROFESSOR: OK. So we still have tree edges\nfor sure and backward edges. ",
    "start": "2020387",
    "end": "2027872"
  },
  {
    "text": "AUDIENCE: How do\nyou get from C to A? PROFESSOR: This was supposed\nto happen way before.",
    "start": "2027872",
    "end": "2033570"
  },
  {
    "text": "So we went A, B, C, and\nthen when we were at C, oh.",
    "start": "2033570",
    "end": "2039643"
  },
  {
    "text": "Sorry. My bad.",
    "start": "2039644",
    "end": "2044970"
  },
  {
    "text": "So we went from A to\nB, B to C, and then A was the first thing\nin C's adjacency list. So we saw this back edge.",
    "start": "2044970",
    "end": "2050980"
  },
  {
    "text": "So C to D, D to E, D to F. AUDIENCE: E to F? Or F to C?",
    "start": "2050980",
    "end": "2057550"
  },
  {
    "text": "PROFESSOR: And then F to C.\nSo what kind of edge is this? AUDIENCE: Backward. ",
    "start": "2057550",
    "end": "2063690"
  },
  {
    "text": "PROFESSOR: So none\nof these guys. And then we're all the\nway back at A, right?",
    "start": "2063690",
    "end": "2072883"
  },
  {
    "text": "A to-- oh. Sorry.",
    "start": "2072883",
    "end": "2078020"
  },
  {
    "text": "No we're not done. So C to D, D to E, D to F, then\nwe're back at C. And C to G.",
    "start": "2078020",
    "end": "2090070"
  },
  {
    "text": "AUDIENCE: There's supposed\nto be a line between C and F? PROFESSOR: Oh, yeah. Sorry.",
    "start": "2090070",
    "end": "2095480"
  },
  {
    "text": "I guess I can't copy. One, two, three, four, five,\nsix, seven, eight, nine.",
    "start": "2095480",
    "end": "2101381"
  },
  {
    "text": "One, two, three, four, five,\nsix, seven, eight, nine. Now it's right. Thank you.",
    "start": "2101382",
    "end": "2107349"
  },
  {
    "text": "OK. So what am I missing? Edge from C to G.\nWhat kind of edge?",
    "start": "2107350",
    "end": "2118795"
  },
  {
    "text": "AUDIENCE: C and G?  PROFESSOR: OK. So we have tree edges and\nwe have backward edges.",
    "start": "2118795",
    "end": "2128460"
  },
  {
    "text": "What do we not have? Forward edges and\ncross edges, right? AUDIENCE: You need one from\nA to G. A and G are related.",
    "start": "2128460",
    "end": "2139392"
  },
  {
    "text": "PROFESSOR: What edge is this?  Cool. Thanks. AUDIENCE: You never add\nthose, though, right?",
    "start": "2139392",
    "end": "2147030"
  },
  {
    "text": "You just see that A was in the\nparent's list, and be like, OK. PROFESSOR: Yeah.",
    "start": "2147030",
    "end": "2152480"
  },
  {
    "text": "So for all the edges\nthat are not tree edges, DFS doesn't actually\nfollow them.",
    "start": "2152480",
    "end": "2157540"
  },
  {
    "text": "We just care about them\nbecause other algorithms care about them. They let you compute\nfancy things on the graph.",
    "start": "2157540",
    "end": "2163640"
  },
  {
    "text": "OK. So are we good with the types?",
    "start": "2163640",
    "end": "2169269"
  },
  {
    "text": "So why can't I have\na forward edge? So there are two types\nof edges I can't have,",
    "start": "2169270",
    "end": "2175040"
  },
  {
    "text": "cross edges and forward edges. Why can't I have a forward edge?",
    "start": "2175040",
    "end": "2180770"
  },
  {
    "text": " On an undirected graph?",
    "start": "2180770",
    "end": "2186016"
  },
  {
    "text": " So in order to have\na forward edge, I would have to go C, D, F.\nAnd then not follow this edge.",
    "start": "2186017",
    "end": "2197060"
  },
  {
    "text": "I mean not see this edge here. Right?",
    "start": "2197060",
    "end": "2202240"
  },
  {
    "text": "If this edge would\nbe undirected, I would say, hey, it goes from\nF to C. It's a background edge.",
    "start": "2202240",
    "end": "2207520"
  },
  {
    "text": "So I would have seen this edge\nwhen I would have been in C. So I'm comparing this\ntree with this tree, and trying to figure out\nwhy they're different.",
    "start": "2207520",
    "end": "2214408"
  },
  {
    "text": " How does a forward\nedge look like?",
    "start": "2214408",
    "end": "2220033"
  },
  {
    "text": "You have a node u, then you\nhave some more tree stuff.",
    "start": "2220033",
    "end": "2225480"
  },
  {
    "text": "And from here, you got to v.\nAnd then when you're at v, you didn't see the edge.",
    "start": "2225480",
    "end": "2231421"
  },
  {
    "text": "Right? Because if you\nwould have seen it, it would have been\na background edge. So you can only see the\nedge from u to v later on.",
    "start": "2231421",
    "end": "2238470"
  },
  {
    "text": "So this is tree edges,\na bunch of tree edges, and this is a forward edge. In an undirected\ngraph, this never",
    "start": "2238470",
    "end": "2244480"
  },
  {
    "text": "happens because\nwhen you're at v, you're going to see the edge. And you're going to mark\nit as a backward edge.",
    "start": "2244480",
    "end": "2252120"
  },
  {
    "text": "So forward edges\ncan ever happen. ",
    "start": "2252120",
    "end": "2257490"
  },
  {
    "text": "Yes? No? Is everyone happy?",
    "start": "2257490",
    "end": "2262680"
  },
  {
    "text": "So cross edges. Why can't they happen? A cross edge can never\nhappen because in order",
    "start": "2262680",
    "end": "2268069"
  },
  {
    "text": "for a cross edge to happen,\nI would have to go A, B, C, visit C's children, then go\nup and go somewhere else.",
    "start": "2268070",
    "end": "2276750"
  },
  {
    "text": "And then see this edge. But, hey, when I was at C,\nwhy didn't I see this edge?",
    "start": "2276750",
    "end": "2282420"
  },
  {
    "text": "Why did I only see it later? If it's an undirected graph,\nI would see this edge here and it would be a forward edge.",
    "start": "2282420",
    "end": "2289230"
  },
  {
    "text": "Sorry. A tree edge, because\nthat would take it. Yes? AUDIENCE: So is it just\nwhen you're-- is it just",
    "start": "2289230",
    "end": "2295169"
  },
  {
    "text": "because it's the way you\ntraverse in DFS or would it apply generally to VFS as well?",
    "start": "2295169",
    "end": "2300920"
  },
  {
    "text": "PROFESSOR: VFS doesn't\nhave forward and backward. Yeah. VFS is completely different.",
    "start": "2300920",
    "end": "2307390"
  },
  {
    "text": "So these are all DFS\nterms, purely DFS. OK. So no forward edges,\nno cross edges.",
    "start": "2307390",
    "end": "2314400"
  },
  {
    "text": "And if you forget which\nones you can and can't have, now you know how to reason\nabout it quickly and remember.",
    "start": "2314400",
    "end": "2320829"
  },
  {
    "text": "Yes? OK. So this is DFS.",
    "start": "2320830",
    "end": "2326440"
  },
  {
    "text": "Are we all happy with DFS? Let's talk about\ntopological sorting then.",
    "start": "2326440",
    "end": "2331890"
  },
  {
    "text": "Because it's really useful. It's one of the few algorithms\nthat is really useful and that you might have\nto write yourself later.",
    "start": "2331890",
    "end": "2338329"
  },
  {
    "text": "So suppose these are classes. So let's get back to\nthis oriented thing",
    "start": "2338330",
    "end": "2343390"
  },
  {
    "text": "and suppose these are classes. And the edges show\nprerequisites.",
    "start": "2343390",
    "end": "2348670"
  },
  {
    "text": "So A is a prerequisite\nof B. Like say A is 601 and B is 6006.",
    "start": "2348670",
    "end": "2354880"
  },
  {
    "text": "And you have to take 601\nbefore you take 6006. Otherwise you will cry during\nprogramming assignments.",
    "start": "2354880",
    "end": "2361690"
  },
  {
    "text": "So what we want\nto do is these are all the classes you\nneed to graduate.",
    "start": "2361690",
    "end": "2367030"
  },
  {
    "text": "We need to come up with an\norder in which you can take them so that when you take a class,\nyou took all the prerequisites.",
    "start": "2367030",
    "end": "2372610"
  },
  {
    "text": "So you don't cry while\nyou're taking that class. How do we do that? And let's use this\ngraph as an example.",
    "start": "2372610",
    "end": "2379435"
  },
  {
    "text": " AUDIENCE: Use a directed\ngraph that's acyclic?",
    "start": "2379435",
    "end": "2388477"
  },
  {
    "text": "PROFESSOR: OK. Is this graph acyclic? AUDIENCE: No.",
    "start": "2388477",
    "end": "2394247"
  },
  {
    "text": "PROFESSOR: OK. So what then? AUDIENCE: [INAUDIBLE]. ",
    "start": "2394247",
    "end": "2403190"
  },
  {
    "text": "PROFESSOR: So if the\ngraph has a cycle, you can't solve the problem. It has no solution.",
    "start": "2403190",
    "end": "2409432"
  },
  {
    "text": "AUDIENCE: It's like\nthose cardboard boxes that [INAUDIBLE]. It's really annoying.",
    "start": "2409432",
    "end": "2416140"
  },
  {
    "text": "PROFESSOR: I don't know\nthe cardboard box problem. AUDIENCE: Yeah.",
    "start": "2416140",
    "end": "2421640"
  },
  {
    "text": "You know those cardboard\nboxes with the four flaps when you close them, and\nthey close like-- Yeah.",
    "start": "2421640",
    "end": "2431110"
  },
  {
    "text": "Those are so annoying. That's just what\nthis reminds me of.",
    "start": "2431110",
    "end": "2436462"
  },
  {
    "text": "That's all. Continue. PROFESSOR: There's\na cycle there, so you can't just\nput them in an order. Right? You have to violate the\nrepeating variance somehow.",
    "start": "2436462",
    "end": "2442870"
  },
  {
    "text": "And you do that by\ntwisting the edges. So if we had classes A, B, C,\nyou cannot take them in any",
    "start": "2442870",
    "end": "2450160"
  },
  {
    "text": "order. Right? If you take A first, you would\nneed C. If you take B first, you would need A. If you take\nC first, you would need B.",
    "start": "2450160",
    "end": "2458090"
  },
  {
    "text": "So you can't start\nwith any of them. So if you have a\ncycle in a graph,",
    "start": "2458090",
    "end": "2463340"
  },
  {
    "text": "it's not a dependency graph. You can't compute dependencies. So topological sorts only\nworks on cyclic graphs.",
    "start": "2463340",
    "end": "2471040"
  },
  {
    "text": " So acyclic graph.",
    "start": "2471040",
    "end": "2479900"
  },
  {
    "text": "And what else? So a dependency graph is\na special kind of graph.",
    "start": "2479900",
    "end": "2485220"
  },
  {
    "text": "And I'm looking for\nthree fancy words. You already have two. So we have acyclic\nand we have graph.",
    "start": "2485220",
    "end": "2491635"
  },
  {
    "text": "Directed.  So you have to\nhave a directed, so",
    "start": "2491635",
    "end": "2497560"
  },
  {
    "text": "that you know which\nclass goes first. Needs to be acyclic,\notherwise there's no solution.",
    "start": "2497560",
    "end": "2502582"
  },
  {
    "text": "Needs to be a graph,\nbecause that's what we're talking about. ",
    "start": "2502582",
    "end": "2508600"
  },
  {
    "text": "So the shortening\nfor this is a DAG.  OK. How do you compute an order?",
    "start": "2508600",
    "end": "2515820"
  },
  {
    "text": "So say we remove that edge. ",
    "start": "2515820",
    "end": "2526408"
  },
  {
    "text": "How do we compute an order? AUDIENCE: You run DFS and\nthen print out the reverse.",
    "start": "2526408",
    "end": "2536134"
  },
  {
    "text": "PROFESSOR: And then\nprint out the reverse? AUDIENCE: Of your final output. PROFESSOR: Which is?",
    "start": "2536134",
    "end": "2542928"
  },
  {
    "text": "AUDIENCE: Your final output? You want me to do it on a graph?",
    "start": "2542928",
    "end": "2549180"
  },
  {
    "text": "PROFESSOR: You can tell me\nhow to change the codes, too. So I'm not sure what-- you said\nprint the reverse of something,",
    "start": "2549180",
    "end": "2554450"
  },
  {
    "text": "but what's that thing? AUDIENCE: So I go\ndown a path, right, until you've hit\nall the nodes, then",
    "start": "2554450",
    "end": "2559516"
  },
  {
    "text": "basically you start\nfrom the last node you visited and print\nout the reverse of that.",
    "start": "2559517",
    "end": "2564930"
  },
  {
    "text": "Go back to the first node. PROFESSOR: OK. So you're saying I go\nA, B, C, D, E, and then",
    "start": "2564930",
    "end": "2573050"
  },
  {
    "text": "I print E, D, C, B, A? AUDIENCE: No. Because that wouldn't\nhit all the nodes.",
    "start": "2573050",
    "end": "2578532"
  },
  {
    "text": "PROFESSOR: OK.  He's on the right track, by\nthe way, so that's why we're--",
    "start": "2578532",
    "end": "2587130"
  },
  {
    "text": "AUDIENCE: You go\nA, B, C, D, E, F, G, and you print G,\nF, E, D, C, B, A.",
    "start": "2587130",
    "end": "2595859"
  },
  {
    "text": "PROFESSOR: OK so we print\nthem in the reverse. So you're printing them in\nthe order in which you're",
    "start": "2595860",
    "end": "2602250"
  },
  {
    "text": "done with them after DFS? No. You're printing them\nin the reverse order of the order which\nyou visited them?",
    "start": "2602250",
    "end": "2610090"
  },
  {
    "text": "So you visited A,\nB, C, D, E, F, G, so you're saying print\nG, F, E, D, C, B, A.",
    "start": "2610090",
    "end": "2615920"
  },
  {
    "text": "AUDIENCE: Yeah. Because in lecture\nwasn't it flipped, so if an arrow points from\nA to B then A depends on B.",
    "start": "2615920",
    "end": "2624805"
  },
  {
    "text": "And we're looking at\nthe other way around. ",
    "start": "2624805",
    "end": "2630130"
  },
  {
    "text": "In lecture, based\non the graph you gave, if the arrow goes from\nA to B, then A depends on B.",
    "start": "2630130",
    "end": "2635572"
  },
  {
    "text": "PROFESSOR: If the arrow\ngoes from A to B, then what? AUDIENCE: If you're saying A\nis a prerequisite for B and G,",
    "start": "2635572",
    "end": "2642045"
  },
  {
    "text": "then we just sweep from\nleft to right and say, I have to do this. And then those two.",
    "start": "2642045",
    "end": "2648309"
  },
  {
    "text": "PROFESSOR: No. They have to-- AUDIENCE: It's the order that--\nbecause when you're doing DFS,",
    "start": "2648309",
    "end": "2655585"
  },
  {
    "text": "you recurse. It's the order that they\nfinished the recurse. PROFESSOR: Yeah. You have the right answer.",
    "start": "2655585",
    "end": "2661250"
  },
  {
    "text": "I'm just trying to build\nout the annotation for it. I'm pretty sure this\nis the right way.",
    "start": "2661250",
    "end": "2667510"
  },
  {
    "text": "I can look at this,\nbut I can't promise you that this is the right\nway because I coded it",
    "start": "2667510",
    "end": "2672635"
  },
  {
    "text": "and it works. So no. This is the right way.",
    "start": "2672635",
    "end": "2679990"
  },
  {
    "text": "Yes. This is the right way\nto represent them. So forward edge\nmeans B depends on A.",
    "start": "2679990",
    "end": "2690880"
  },
  {
    "text": "OK. So let's figure\nout how we do this. Let's do this in\npseudo-code and then build",
    "start": "2690880",
    "end": "2695930"
  },
  {
    "text": "the intuition for it. So you said reverse of\nthe finishing times.",
    "start": "2695930",
    "end": "2701200"
  },
  {
    "text": "So let's build a list\nthat has all the nodes in the order of their\nfinishing times.",
    "start": "2701200",
    "end": "2707190"
  },
  {
    "text": "So let's build a list finished\nthat is empty at first.",
    "start": "2707190",
    "end": "2714852"
  },
  {
    "text": "Then I'm going to add\nall the nodes in the list as I'm done with them. And then I'll reverse the list.",
    "start": "2714852",
    "end": "2721420"
  },
  {
    "text": "Where do I add\nnodes to the list? ",
    "start": "2721420",
    "end": "2728272"
  },
  {
    "text": "AUDIENCE: In the check. ",
    "start": "2728272",
    "end": "2733650"
  },
  {
    "text": "Line 2.75. PROFESSOR: Not quite.",
    "start": "2733650",
    "end": "2739241"
  },
  {
    "text": " So line 4.",
    "start": "2739241",
    "end": "2746814"
  },
  {
    "text": "So I'm adding them in the order\nin which I'm done with them. So when I'm about to\nleave a node completely,",
    "start": "2746814",
    "end": "2753410"
  },
  {
    "text": "I'll add it to that list. ",
    "start": "2753410",
    "end": "2762680"
  },
  {
    "text": "Which node? What's the name? AUDIENCE: V.",
    "start": "2762680",
    "end": "2768390"
  },
  {
    "text": "PROFESSOR: OK. And then where can\nI reverse the list? AUDIENCE: Line 4 of the first--",
    "start": "2768390",
    "end": "2776049"
  },
  {
    "text": "PROFESSOR: OK. How would I do this? r dot finished dot reverse.",
    "start": "2776050",
    "end": "2789130"
  },
  {
    "text": "Like this? AUDIENCE: I think\nthat's OK in Python. PROFESSOR: I think so, too.",
    "start": "2789130",
    "end": "2795460"
  },
  {
    "text": "So this will give me\na topological sort. Let's figure out why\nthis works intuitively.",
    "start": "2795460",
    "end": "2803650"
  },
  {
    "text": "Yes? So while we're building\nthe topological sort,",
    "start": "2803650",
    "end": "2810330"
  },
  {
    "text": "while we're building the\ninverse of the final list. So the first thing\nthat we put in the list",
    "start": "2810330",
    "end": "2816250"
  },
  {
    "text": "is the last class\nwe're going to take. So as I go forward\nin this graph,",
    "start": "2816250",
    "end": "2822040"
  },
  {
    "text": "my VFS is going to go A, B, C,\nD, E. There's nothing after E.",
    "start": "2822040",
    "end": "2829940"
  },
  {
    "text": "And it's done with E. So this means there is no class\nthat depends on E. Otherwise,",
    "start": "2829940",
    "end": "2835710"
  },
  {
    "text": "DFS would keep recursing. So E is the last class I take. If I take this last, there's\ndefinitely no dependencies",
    "start": "2835710",
    "end": "2843730"
  },
  {
    "text": "that I'm violating. All right? So it's safe to start with E.",
    "start": "2843730",
    "end": "2855310"
  },
  {
    "text": "Now I'm out of E, I'm back to D.\nI go from D to F, I print that.",
    "start": "2855310",
    "end": "2862470"
  },
  {
    "text": "Let's not worry about\nthis for a little bit. And let's go back\nto D. When DFS comes",
    "start": "2862470",
    "end": "2872410"
  },
  {
    "text": "back, it's going\nto print D. So I know that by the\ntime DFS is out,",
    "start": "2872410",
    "end": "2879470"
  },
  {
    "text": "I printed all the classes\nthat depend on D. Right? So when I'm at D,\nwhenever I have forward",
    "start": "2879470",
    "end": "2886510"
  },
  {
    "text": "edges that I\nhaven't visited yet, I will call DFS visit on them. DFS visit returns before\nI can get out of D.",
    "start": "2886510",
    "end": "2896170"
  },
  {
    "text": "So all the edges that depend\non D have been printed. Sorry. All the nodes that depend\non D have been printed.",
    "start": "2896170",
    "end": "2903950"
  },
  {
    "text": "So when I get out of D, I\nknow that all the nodes that depend on D have\nbeen printed, so it's",
    "start": "2903950",
    "end": "2909300"
  },
  {
    "text": "safe to print D.\nThis is the intuition behind topological sort.",
    "start": "2909300",
    "end": "2916450"
  },
  {
    "text": "So you can build sort of an\ninduction proof based on this.",
    "start": "2916450",
    "end": "2921579"
  },
  {
    "text": "So whenever I'm here, I\nassume that all the nodes",
    "start": "2921580",
    "end": "2926590"
  },
  {
    "text": "that I have forward edges to\nare somewhere in my results. So I can include my nodes.",
    "start": "2926590",
    "end": "2931770"
  },
  {
    "text": "So this means that whenever\nyou put a node here, all the nodes that have\nforward edges to this node",
    "start": "2931770",
    "end": "2940020"
  },
  {
    "text": "have already been output. So this means that no\ndependency relationships",
    "start": "2940020",
    "end": "2946020"
  },
  {
    "text": "are going to be violated. OK. Let's keep building\nthis and see the result.",
    "start": "2946020",
    "end": "2951230"
  },
  {
    "text": "So D, E, F, we get\nout of B. We get out of C. What do we do here?",
    "start": "2951230",
    "end": "2958960"
  },
  {
    "text": "Print C, right? ",
    "start": "2958960",
    "end": "2965260"
  },
  {
    "text": "What classes depend on C? D, E, and F. I had\na tree edge to D.",
    "start": "2965260",
    "end": "2973630"
  },
  {
    "text": "I had DFS visit here, so I\nknow that all the classes that depend on C because they\ndepend on D have been output.",
    "start": "2973630",
    "end": "2981670"
  },
  {
    "text": "And then I have a\nforward edge on F. So I didn't recurse\nfrom C to F, but I",
    "start": "2981670",
    "end": "2988280"
  },
  {
    "text": "know that has been\ncovered somewhere. Right? Forward edge means that\nI've already seen it in DFS,",
    "start": "2988280",
    "end": "2994220"
  },
  {
    "text": "and that I've already\nreturned from it. So it has already been printed. ",
    "start": "2994220",
    "end": "3002800"
  },
  {
    "text": "So I'm going to write this. Now I get out of C. I get out of\nB. I go into G. I get out of B,",
    "start": "3002800",
    "end": "3014390"
  },
  {
    "text": "and I go into A. And I go\nout of A, and I print it.",
    "start": "3014390",
    "end": "3020819"
  },
  {
    "text": "OK. So I have tree edges\nthat I can handle. ",
    "start": "3020820",
    "end": "3029020"
  },
  {
    "text": "So these are all tree edges.  And the reason that topological\nsorting works on tree edges",
    "start": "3029020",
    "end": "3040309"
  },
  {
    "text": "is that I call DFS\nvisit on the tree edge,",
    "start": "3040310",
    "end": "3046480"
  },
  {
    "text": "and I know it returns\nby the time I return. So I know that\nwhatever's underneath that tree has\nalready been printed.",
    "start": "3046480",
    "end": "3053670"
  },
  {
    "text": "I have forward edges that\nwill just take me forward in the DFS.",
    "start": "3053670",
    "end": "3059930"
  },
  {
    "text": "So I know that by the\ntime I return from a node, I've already returned\nfrom all the nodes",
    "start": "3059930",
    "end": "3065447"
  },
  {
    "text": "that I have forward\nedges to because they're lower in the tree. Right? Forward edges work like this. So by the time\nI'm out of C, I've",
    "start": "3065447",
    "end": "3071900"
  },
  {
    "text": "definitely printed F. Now I have\nthis cross edge from G to C.",
    "start": "3071900",
    "end": "3081240"
  },
  {
    "text": "A cross edge means that there\nis no direct relationship here,",
    "start": "3081240",
    "end": "3087210"
  },
  {
    "text": "but I've already visited C. If\nthere's no direct relationship,",
    "start": "3087210",
    "end": "3092250"
  },
  {
    "text": "it means that for sure\nI'm done visiting C and I've returned so\nthat I can get to G.",
    "start": "3092250",
    "end": "3099575"
  },
  {
    "text": "So there's some common\nparent between C and G. I'm already done with C, and\nI've returned to that parent.",
    "start": "3099575",
    "end": "3106849"
  },
  {
    "text": "And then I went to G. So all the nodes that are\npointed to my cross edges",
    "start": "3106850",
    "end": "3113839"
  },
  {
    "text": "have also been printed\nin topological sort.",
    "start": "3113840",
    "end": "3119671"
  },
  {
    "text": "OK. Now what about back edges? What if I had a back edge? ",
    "start": "3119671",
    "end": "3125420"
  },
  {
    "text": "What if I had this back\nedge between C and A? What happens then? If I had a back edge, then that\nwould break topological sort.",
    "start": "3125420",
    "end": "3135589"
  },
  {
    "text": "Right? Because this is\nsaying that hey, you should print A\nbefore you print C.",
    "start": "3135590",
    "end": "3142000"
  },
  {
    "text": "But I know that I'm going\nto come out of C way before I have a chance\nto come out of A.",
    "start": "3142000",
    "end": "3147040"
  },
  {
    "text": "So if I have a back edge,\ntopological sort doesn't work. When do I have a back edge?",
    "start": "3147040",
    "end": "3153740"
  },
  {
    "text": "When I have a cycle. So this is why I don't\ncare about back edges. Back edges [INAUDIBLE] cycles.",
    "start": "3153740",
    "end": "3161299"
  },
  {
    "text": "So back edge means I\nhave a path forward. And I have a path backward.",
    "start": "3161300",
    "end": "3167119"
  },
  {
    "text": "That does a cycle. ",
    "start": "3167120",
    "end": "3173820"
  },
  {
    "text": "OK. There's an awful\nlot of silence here. Does everything makes sense or?",
    "start": "3173820",
    "end": "3179289"
  },
  {
    "text": " OK. Any questions? ",
    "start": "3179290",
    "end": "3186691"
  },
  {
    "text": "Nope? Everyone's happy?  So you don't need to\nreason about this formally.",
    "start": "3186691",
    "end": "3192960"
  },
  {
    "text": "Just remember the intuition that\nthe reason we're printing them in this order is\nthe first thing you",
    "start": "3192960",
    "end": "3200320"
  },
  {
    "text": "print is the last class\nyou're going to take. Because for sure there are\nno dependencies left on it,",
    "start": "3200320",
    "end": "3207620"
  },
  {
    "text": "otherwise DFS would\nkeep recursing. And then there's that recursive\nstructure that makes this work. ",
    "start": "3207620",
    "end": "3215800"
  },
  {
    "text": "OK. Cool. ",
    "start": "3215800",
    "end": "3218284"
  }
]