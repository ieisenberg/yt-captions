[
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5080"
  },
  {
    "text": "Your support will help MIT\nOpenCourseWare continue to offer high quality educational\nresources for free.",
    "start": "5080",
    "end": "11770"
  },
  {
    "text": "To make a donation or view\nadditional materials from hundreds of MIT courses, visit\nMIT OpenCourseWare@mit.edu.",
    "start": "11770",
    "end": "17390"
  },
  {
    "start": "17390",
    "end": "23189"
  },
  {
    "text": "PROFESSOR: Any issues with\nthe project so far? Have you gotten your\nrepositories set up and the",
    "start": "23190",
    "end": "30900"
  },
  {
    "text": "compiler works and all this? So I'm glad to see a\nlot of people are",
    "start": "30900",
    "end": "38470"
  },
  {
    "text": "getting a early start. In fact, if you haven't, a lot\nof other people in the class",
    "start": "38470",
    "end": "43680"
  },
  {
    "text": "are getting an early start\nso you're behind already. So go there, get the project\nstarted, because these",
    "start": "43680",
    "end": "52080"
  },
  {
    "text": "performance projects can\nrun for long time. And in fact, last year a lot of\npeople asking, when is my",
    "start": "52080",
    "end": "60109"
  },
  {
    "text": "project done? Because a lot of times when you\nhave a project there's a certain set of-- we ask you to implement.",
    "start": "60110",
    "end": "66049"
  },
  {
    "text": "Once that's implemented,\nthe project is over. But when is a performance\nproject done?",
    "start": "66050",
    "end": "71310"
  },
  {
    "text": "And the only answer I L when the\ndeadline comes because you",
    "start": "71310",
    "end": "76390"
  },
  {
    "text": "can always shave 10% here,\nyou can get a better data structure, you can\nkeep like kind of tweaking for a long time.",
    "start": "76390",
    "end": "83505"
  },
  {
    "text": "And a lot of you will do. In fact, to give you a warning,\nlast year, the",
    "start": "83505",
    "end": "88869"
  },
  {
    "text": "performance difference between\nthe best project won, versus",
    "start": "88870",
    "end": "94560"
  },
  {
    "text": "the worst one, even the worst\none got about 50% better than the code we gave.",
    "start": "94560",
    "end": "99600"
  },
  {
    "text": "But the best one got 1,000x\nbetter than the worst one because they figured out right\ndata structures, they changed",
    "start": "99600",
    "end": "106140"
  },
  {
    "text": "algorithms, they did some\nprecomputation, they did a lot of cool stuff, and so there's\na lot to get if you do this",
    "start": "106140",
    "end": "113189"
  },
  {
    "text": "project right. So just don't be happy if you\njust got 10%, 50%, and say,",
    "start": "113190",
    "end": "119180"
  },
  {
    "text": "yeah, I got some performance. Think carefully. There's a lot of room in\nthis project for you to",
    "start": "119180",
    "end": "124720"
  },
  {
    "text": "gain, so work hard. I'm not saying this\nyields 1,000x. I don't know. I haven't exactly seen all the\nthings you can do, but there",
    "start": "124720",
    "end": "132140"
  },
  {
    "text": "could be a huge thing\nyou can win. So think through not just small,\nlow hanging fruit, but",
    "start": "132140",
    "end": "137560"
  },
  {
    "text": "there could be interesting\nthings you can do that can have impact. So today what I am going to do\nis talk a little bit about",
    "start": "137560",
    "end": "149260"
  },
  {
    "text": "basics of performance\nengineering. Kind of things you guys\nwould probably know, rules to follow.",
    "start": "149260",
    "end": "154680"
  },
  {
    "text": "So to start that if you look at\nperformance engineering, it",
    "start": "154680",
    "end": "161829"
  },
  {
    "text": "can fit into a couple\nof classes. One is you want to get a maximum\nout of the compiler",
    "start": "161830",
    "end": "167620"
  },
  {
    "text": "you have, the processor you\nhave, the system you have, you want them running efficiently. So if you look at the matrix\nmultiple examples we did this",
    "start": "167620",
    "end": "176290"
  },
  {
    "text": "in the first class it's saying,\nOK, we have a system, we have this very well known\nalgorithm, very long piece of",
    "start": "176290",
    "end": "182510"
  },
  {
    "text": "code, and we want to get the\nbest out of that thing, how do you go about doing that? That's mainly the focus there.",
    "start": "182510",
    "end": "188790"
  },
  {
    "text": "Then when you we looked at\nthe bithacking stuff that Professor Leiserson did last\ntime, it's mainly about really",
    "start": "188790",
    "end": "196480"
  },
  {
    "text": "changing the algorithms. We basically said, OK, look, if\nwe're thinking about this as bits there might be\nfundamental different ways to",
    "start": "196480",
    "end": "203470"
  },
  {
    "text": "approach this problem. By doing that we can actually\nget really good performance. OK, we'll be doing\nmore of that.",
    "start": "203470",
    "end": "209959"
  },
  {
    "text": "Today we are going to focus on\nthis two middle criteria. What we are going to do is we\nare going to stay within the",
    "start": "209960",
    "end": "217640"
  },
  {
    "text": "spirit of the program\nthat was given. Even though we are going to\nchange the program a little",
    "start": "217640",
    "end": "223860"
  },
  {
    "text": "bit, we are not going to\nfundamentally change what the program does. So the same computations would\nbe done basically on the same",
    "start": "223860",
    "end": "232630"
  },
  {
    "text": "day but what we will do is we\nwill change certain aspects how it's being done to gain some\nperformance advantages.",
    "start": "232630",
    "end": "240580"
  },
  {
    "text": "So the nice thing about this\none is you don't have to really understand the algorithm,\nyou don't have to",
    "start": "240580",
    "end": "246310"
  },
  {
    "text": "understand lot of what's going\non in, what's implementation. This is more--",
    "start": "246310",
    "end": "252550"
  },
  {
    "text": "you can do this as a\nmechanism sub out.  The unfortunate thing is there's\nnot theory in these",
    "start": "252550",
    "end": "260370"
  },
  {
    "text": "type of engineering. There's not something we\ncan prove, here's the optimal you can do. [UNINTELLIGIBLE] nice there.",
    "start": "260370",
    "end": "266970"
  },
  {
    "text": "So normally performance\nprogramming basically knows that you need to understand\neverything that's in modern",
    "start": "266970",
    "end": "274230"
  },
  {
    "text": "performance. That means all the way from high\nlevel algorithms, every layer in the systems, the\ncompiler, the hardware, the",
    "start": "274230",
    "end": "281060"
  },
  {
    "text": "disks, all those things can\nimpact performance. So it's normally when in\nperformance to understand",
    "start": "281060",
    "end": "287560"
  },
  {
    "text": "everything that\n[UNINTELLIGIBLE]. This is very different from\na lot of what you guys are used to. It is staying within\none layer.",
    "start": "287560",
    "end": "294090"
  },
  {
    "text": "You say, OK, this is my\nlayer, I don't care what's on any of it. I don't know care much about-- I'm going to work on that. And the thing that normally\ncomes and bite you is the",
    "start": "294090",
    "end": "301410"
  },
  {
    "text": "other layers that you just\ntake for granted. In performance it's basically\ngoing through end to end. That's the normal thing.",
    "start": "301410",
    "end": "306960"
  },
  {
    "text": "And normally, if you are an\nexperienced performance engineer, you know when\nthe problems show up.",
    "start": "306960",
    "end": "315570"
  },
  {
    "text": "And you can kind of have a basic\nunderstanding, here are the kind of places where they\nhave performance problems.",
    "start": "315570",
    "end": "321550"
  },
  {
    "text": "And so a good performance this\nis where experience comes in. So instead of saying looking at\nthe code and say I have no",
    "start": "321550",
    "end": "328780"
  },
  {
    "text": "idea what's going on, you can\nsay, let me think about this, this is where normally\nsomething goes wrong. And then you have to have the\nskill to zoom in and identify",
    "start": "328780",
    "end": "335720"
  },
  {
    "text": "the problem fast. And most of performance\nengineering is basically a good dose of common sense.",
    "start": "335720",
    "end": "341800"
  },
  {
    "text": "So have kind of a good\nperson who can do really good debugging.",
    "start": "341800",
    "end": "347610"
  },
  {
    "text": "Is you have kind of a built in\nalgorithm how do you go about doing something. And a lot of times you know\nyour strengths, kind of",
    "start": "347610",
    "end": "353840"
  },
  {
    "text": "mistakes you make, you look at\nthose things first, and the same way performance engineering\nthere has to be",
    "start": "353840",
    "end": "358970"
  },
  {
    "text": "kind of a back of your\nhead algorithm. And hopefully at the end of\nthis class you're going to develop that.",
    "start": "358970",
    "end": "365140"
  },
  {
    "text": "And in this lecture what I'm\ntrying to do is come up with a set of rules, that kind of\npatterns that occur regularly,",
    "start": "365140",
    "end": "373310"
  },
  {
    "text": "mistakes lot of people make,\nand that can have a substantial performance impact,\nor performance gain if",
    "start": "373310",
    "end": "378510"
  },
  {
    "text": "you do that. If you have done the design\npatterns lectures in 005, yes,",
    "start": "378510",
    "end": "385789"
  },
  {
    "text": "you do, you will see\nsome similar ideas. What you're doing is kind of\nsay, OK, here's a bunch of patterns in there,\nwhat we can do.",
    "start": "385790",
    "end": "392690"
  },
  {
    "text": "So what I'm doing is I am\nfollowing some very interesting set of rules that\nwas developed by this guy",
    "start": "392690",
    "end": "401430"
  },
  {
    "text": "named John Bentley. He wrote a book called\nProgramming Pearls, I guess.",
    "start": "401430",
    "end": "407120"
  },
  {
    "text": "It's a very old book, last\npublished in 1990. It talks about a lot of the\nsmall, interesting things you",
    "start": "407120",
    "end": "414440"
  },
  {
    "text": "can do to get really\ngood performance. It's out of print.",
    "start": "414440",
    "end": "419699"
  },
  {
    "text": "This is probably one\nreason to probably go to library probably. Libraries have this copy but you\ncan't get it on Amazon or",
    "start": "419700",
    "end": "424990"
  },
  {
    "text": "online so that's unfortunate. But what I'm going to do is\nI'm going to kind of read through it and some of these\nrules, modified to suit the",
    "start": "424990",
    "end": "433520"
  },
  {
    "text": "current program and practices. So he looked at it and said\nthere are basically two kinds",
    "start": "433520",
    "end": "439590"
  },
  {
    "text": "of things you can do,\nwe can modify data, you can modify code. And then went down more into\ndetails, if you modify data",
    "start": "439590",
    "end": "448410"
  },
  {
    "text": "you can do three things. You can pay one against other,\nyou can pay by space and gain",
    "start": "448410",
    "end": "454540"
  },
  {
    "text": "time, you can pay from time and\ngain space, and there's sometimes, if you're lucky, you\nhave a win-win situation",
    "start": "454540",
    "end": "460550"
  },
  {
    "text": "when you can get both space\nand time advantage. So let's go through a couple\nof those things.",
    "start": "460550",
    "end": "466690"
  },
  {
    "text": "So if you [UNINTELLIGIBLE] by space for time, there\nare four things.",
    "start": "466690",
    "end": "471840"
  },
  {
    "text": "I'm going to go through all\nthis four data structure augmentation, storing\nprecomputed results, caching,",
    "start": "471840",
    "end": "477780"
  },
  {
    "text": "and lazy evaluation. So what's data structure\naugmentation?",
    "start": "477780",
    "end": "483190"
  },
  {
    "text": "So here what you want to do is\nyou have a data structure that you keep the data. You add some extra information\nto your data structures.",
    "start": "483190",
    "end": "491919"
  },
  {
    "text": "That can mean the common\noperations run much quicker. OK?",
    "start": "491920",
    "end": "497240"
  },
  {
    "text": "And when this is good, because\nwhat do you want to do is this adding this information\nhas a clear benefit.",
    "start": "497240",
    "end": "505350"
  },
  {
    "text": "Calculating additional\ninformation has to be cheap and easy. So you don't want a situation\nwhere we have this information, you've spent all\nthis time calculating this",
    "start": "505350",
    "end": "513229"
  },
  {
    "text": "additional information and\nyou're not using it that much, or the use doesn't give you\nthat much advantage.",
    "start": "513230",
    "end": "518400"
  },
  {
    "text": "So you have amortize\nthe cost in here. And then also keeping that\ninformation current can't be",
    "start": "518400",
    "end": "523849"
  },
  {
    "text": "too difficult, because\nsometimes you can add information into a data\nstructure that makes it very",
    "start": "523850",
    "end": "530930"
  },
  {
    "text": "hard to make sure that that\ninformation is kept up to date, and then you're spending\nmore time and you're",
    "start": "530930",
    "end": "536010"
  },
  {
    "text": "[UNINTELLIGIBLE] that. So a couple of quick\nexamples in here.",
    "start": "536010",
    "end": "541860"
  },
  {
    "text": "Something like if you have a\nsingle link list, if you are",
    "start": "541860",
    "end": "547260"
  },
  {
    "text": "doing a lot of deletion it's a\nvery expensive proposition because you might had to walk\nthrough the entire list to delete an element.",
    "start": "547260",
    "end": "553360"
  },
  {
    "text": "But if you are in a doubly\nlinked list, a division operation is basically\norder one instead of",
    "start": "553360",
    "end": "558990"
  },
  {
    "text": "[UNINTELLIGIBLE]. So suddenly you realize, I'm\ndoing a lot of deletions, suddenly I can say I'm adding\nthis additional information to",
    "start": "558990",
    "end": "564830"
  },
  {
    "text": "my link list, I'm maintaining\npoint as to both directions, make this one operation\nrun much faster.",
    "start": "564830",
    "end": "570790"
  },
  {
    "text": "This is a very classic example\nof adding additional information.",
    "start": "570790",
    "end": "576810"
  },
  {
    "text": "Another one is what we call\nreference counting. So assume I have objects\nsomewhere and I want to figure",
    "start": "576810",
    "end": "584450"
  },
  {
    "text": "out who points to me. In terms of garbage collection\nyou want to see if anybody points to me.",
    "start": "584450",
    "end": "589890"
  },
  {
    "text": "The normal way to do that is\nlook for every other thing saying is anybody pointing to\nthat person, had to walk through every possible object\nout there to find if anybody's",
    "start": "589890",
    "end": "598410"
  },
  {
    "text": "pointing to this object. That's what normal garbage\ngarbage collectors do. But there's something\neasier, what you call reference counting.",
    "start": "598410",
    "end": "604770"
  },
  {
    "text": "That means if each object keep\na count on the amount of pointing coming to itself then\nto ask that question, is this",
    "start": "604770",
    "end": "613554"
  },
  {
    "text": "really true? And you look and say,\nOK, what's my count? If there's count to zero\nnobody's pointing to me. But of course every time you\npoint to that object to update",
    "start": "613554",
    "end": "622079"
  },
  {
    "text": "the counter, every time you\npoint away or take away an object that points you have to\nsubtract the counters, you had",
    "start": "622080",
    "end": "629410"
  },
  {
    "text": "to keep that information\nadditional. But by doing that discussion\nabout asking whether anybody",
    "start": "629410",
    "end": "635200"
  },
  {
    "text": "points to you becomes a\nvery trivial question. So here's a case you add a\nlittle bit more information and that makes some questions,\nsome things you want to know",
    "start": "635200",
    "end": "645320"
  },
  {
    "text": "trivial and very easy to do,\nand you have to figure out where the [UNINTELLIGIBLE] is. So here's one interesting\nthing.",
    "start": "645320",
    "end": "652592"
  },
  {
    "text": "Go a little bit further,\none thing you can do is",
    "start": "652592",
    "end": "657630"
  },
  {
    "text": "precompute, result\nand storage. What you are doing is you want\nsome calc computation and",
    "start": "657630",
    "end": "664370"
  },
  {
    "text": "instead of every time you want\nthat in recalculating it, say, OK, I'm going to compute them\nearly and I'm going to store",
    "start": "664370",
    "end": "669640"
  },
  {
    "text": "it somewhere, and then every\ntime I want then I just do a look up. So when is this going\nto be useful?",
    "start": "669640",
    "end": "675170"
  },
  {
    "text": "So this is-- the rest of my slides are going\nto have this kind of form, I'm going to give you a\nproblem, tell you when it's",
    "start": "675170",
    "end": "680740"
  },
  {
    "text": "going to be useful, and\nuse some examples. First of all, the function you\nare calculating has to be",
    "start": "680740",
    "end": "686270"
  },
  {
    "text": "somewhat expensive, otherwise if\nit is just a simple single operation look up is probably\ntoo slow to compile.",
    "start": "686270",
    "end": "693330"
  },
  {
    "text": "And the function has to be very\nheavily used, because if you are calling it many, many\ntimes it's worth storing it.",
    "start": "693330",
    "end": "699459"
  },
  {
    "text": "Another very important\nthing is the argument space has to be small. You might be asking for calling\nthe function millions",
    "start": "699460",
    "end": "707660"
  },
  {
    "text": "and millions of time, but every\ntime you call you give a different set of arguments. If the arguments are very large\nit can be many, many",
    "start": "707660",
    "end": "715920"
  },
  {
    "text": "things here, and then it's not\neasy to store everything. And it might take more time to\nfind all the solutions for all",
    "start": "715920",
    "end": "722955"
  },
  {
    "text": "the arguments. So if the arguments\nhave to be small. And of, course, a couple\nadditional things, results",
    "start": "722955",
    "end": "728510"
  },
  {
    "text": "only depends on the arguments. So assume the function results\nactually look time of day to",
    "start": "728510",
    "end": "734170"
  },
  {
    "text": "the computation. OK, that doesn't work, because\nthen every time you call the function, you get different\nresult. That doesn't work that much.",
    "start": "734170",
    "end": "740819"
  },
  {
    "text": "And functions shouldn't\nhave side effects. What that means is if you call\nthe function, if it is",
    "start": "740820",
    "end": "745960"
  },
  {
    "text": "modifying some global variable,\nglobal state. OK. Then if you keep the call, if\nyou don't call the function",
    "start": "745960",
    "end": "752900"
  },
  {
    "text": "that might not happen, so you\nwant to make sure that this function is something can not\ncall and give the results and",
    "start": "752900",
    "end": "762300"
  },
  {
    "text": "the state of the system\nwon't change. And another interesting, nice\nthing to have is function determinants, that means every\ntime you call the function you",
    "start": "762300",
    "end": "769649"
  },
  {
    "text": "get the same four arguments,\nyou get the same results. So this is a long list.",
    "start": "769650",
    "end": "775490"
  },
  {
    "text": "Some of the things I will go,\nso for an example, OK, so",
    "start": "775490",
    "end": "780649"
  },
  {
    "text": "instead of me getting there\ngetting all the things I want, you [INAUDIBLE] when I give a prescription like\nthe thing, what kind of",
    "start": "780650",
    "end": "787500"
  },
  {
    "text": "things can I do in this way\nthat might be helpful? Can anybody come up with\nan interesting example?",
    "start": "787500",
    "end": "795286"
  },
  {
    "text": "[UNINTELLIGIBLE] would precompute and save. AUDIENCE: Anytime you do\ndynamic programming. PROFESSOR: Anytime you\ndynamic program.",
    "start": "795286",
    "end": "802020"
  },
  {
    "text": "This is dynamic programming,\nit's a very good way, later we probably go get a little\nbit into that.",
    "start": "802020",
    "end": "808399"
  },
  {
    "text": "Where you precompute\nand save results. OK, that's very sophisticated\nanswer. Good.",
    "start": "808400",
    "end": "814180"
  },
  {
    "text": "Any other things you\ncan think of? That's almost a meta answer\nthat's in that class of things",
    "start": "814180",
    "end": "819980"
  },
  {
    "text": "you can do. Any problem there that you have\nencountered that you'd rather precompute and save that\nwould be a big, big win.",
    "start": "819980",
    "end": "826758"
  },
  {
    "text": "AUDIENCE: Operations with large\nprimes that [INAUDIBLE]. PROFESSOR: Operations with?",
    "start": "826758",
    "end": "832660"
  },
  {
    "text": "AUDIENCE: Large primes. PROFESSOR: Large primes,\noperations in large primes, yes. If you are doing that,\nespecially if this fits into",
    "start": "832660",
    "end": "841020"
  },
  {
    "text": "this argument space\nsmall apart. If the large primes are, any\nlarge primes then you might",
    "start": "841020",
    "end": "846950"
  },
  {
    "text": "not call it multiple times. So here I want to give you kind\nof a template that what",
    "start": "846950",
    "end": "852399"
  },
  {
    "text": "happens here. So what you want to do is at\ninitialization time I get this",
    "start": "852400",
    "end": "863070"
  },
  {
    "text": "function initialized, what I\ndo is I precompute for all arguments what the results are\nstored at, and then every time",
    "start": "863070",
    "end": "869920"
  },
  {
    "text": "you go apply the function I\njust basically, instead of calling the function, I just\nlook at this table.",
    "start": "869920",
    "end": "875750"
  },
  {
    "text": "OK. So then would this\nbe a bad idea? ",
    "start": "875750",
    "end": "886096"
  },
  {
    "text": "AUDIENCE: Because you know this\nearly ahead of time you",
    "start": "886096",
    "end": "891304"
  },
  {
    "text": "know that you're going to be\ncalling the function for all of your arguments. PROFESSOR: So if the argument\nspace is very large or if you",
    "start": "891304",
    "end": "899100"
  },
  {
    "text": "don't call the function that\nmany times, or as I said, it might only call for very small\nnumber of arguments,",
    "start": "899100",
    "end": "904290"
  },
  {
    "text": "[UNINTELLIGIBLE] this might not be a good idea. OK?",
    "start": "904290",
    "end": "909460"
  },
  {
    "text": "So we will go. As we improve, you'll see some\nother things that actually address that. So here's an interesting way of\ndoing a use case in here.",
    "start": "909460",
    "end": "918490"
  },
  {
    "text": "So what I have here is\nPascal's Triangle. How many people know\nPascal's Triangle?",
    "start": "918490",
    "end": "924126"
  },
  {
    "text": "OK, good, so I don't have\nto explain that. So here is a simple computation for Pascal's Triangle.",
    "start": "924126",
    "end": "929410"
  },
  {
    "text": "So what I'm doing is in order\nto calculate this value I am calling these two values\nand adding that.",
    "start": "929410",
    "end": "936790"
  },
  {
    "text": "OK? But the problem is that this\nwill call- so it kind of call exponentially more and\nmore doing that.",
    "start": "936790",
    "end": "943850"
  },
  {
    "text": "So you'd say exponential\nrhythm. However, what I can do in\nPascal's Triangle is I can",
    "start": "943850",
    "end": "951970"
  },
  {
    "text": "basically compute it at the\nbeginning by storing the",
    "start": "951970",
    "end": "956990"
  },
  {
    "text": "previous role, or previous set\nof values in and then previous role, and every time I'm calling\nI just basically have",
    "start": "956990",
    "end": "964365"
  },
  {
    "text": "to look up the two elements\nin the previous role. Trying to get my mouse, OK. Only have to look at the two\nelements on the previous role.",
    "start": "964365",
    "end": "971400"
  },
  {
    "text": "I added up, I will never have\nto compute beyond that. So, in fact, by just doing\nthis one I have taken",
    "start": "971400",
    "end": "980050"
  },
  {
    "text": "exponential algorithm to\nbasically lead a path through the data, basically.",
    "start": "980050",
    "end": "986610"
  },
  {
    "text": "This actually become a square,\nbecause if you have some depth, I had to do i squared-- become a square, pass\nthrough the data.",
    "start": "986610",
    "end": "994160"
  },
  {
    "text": "If I'm looking for n, I\ndon't know how to do exponential look up. Everybody saw this?",
    "start": "994160",
    "end": "1000100"
  },
  {
    "text": "So this is a nice way, simple\nway I'm just doing a simple storing this data, however in\nhere I had to calculate, I",
    "start": "1000100",
    "end": "1007850"
  },
  {
    "text": "need to know how much maximum\nof that, and calculate and I just look up. And here the [UNINTELLIGIBLE] if you calculate a little bit\nextra, who cares, I'm OK.",
    "start": "1007850",
    "end": "1017269"
  },
  {
    "text": "And another interesting\nthing is Fibonnaci. And again, here, if you do\nkeeping the previous value, in",
    "start": "1017270",
    "end": "1027404"
  },
  {
    "text": "here, you're actually changing\nfrom exponential algorithm, to",
    "start": "1027404",
    "end": "1032845"
  },
  {
    "text": "in here basically a linear\ncalculation. ",
    "start": "1032845",
    "end": "1038640"
  },
  {
    "text": "OK? So this is almost an algorithmic\nchange here. I kind of lied when\nI said it's just a",
    "start": "1038640",
    "end": "1043660"
  },
  {
    "text": "data structure change. But just a simple data structure\nchange made an algorithm difference. So the other interesting thing\nyou can do is caching.",
    "start": "1043660",
    "end": "1051410"
  },
  {
    "text": "So what that means is if you\nhave a heavily used function",
    "start": "1051410",
    "end": "1057310"
  },
  {
    "text": "you can keep some number of\nprevious basically results",
    "start": "1057310",
    "end": "1063790"
  },
  {
    "text": "from calling that function. This has a lot of caveats\nso let's go",
    "start": "1063790",
    "end": "1069660"
  },
  {
    "text": "through this carefully. Again the function has to be\nexpensive, otherwise it's not worth doing all that work.",
    "start": "1069660",
    "end": "1076520"
  },
  {
    "text": "Functions have to be heavily\nused, otherwise you're calculating and if you don't\nreuse it it's not worth doing all the worth.",
    "start": "1076520",
    "end": "1082200"
  },
  {
    "text": "Here the arguments space can be\nlarge, OK, because you are not calculating everything, you\ncan have a large argument",
    "start": "1082200",
    "end": "1088260"
  },
  {
    "text": "space, and that's OK. And then there's another thing\ncalled temporal locality.",
    "start": "1088260",
    "end": "1094480"
  },
  {
    "text": "Anybody knows what temporal\nlocality means? OK what. AUDIENCE: The same arguments are\ncalled [UNINTELLIGIBLE].",
    "start": "1094480",
    "end": "1101495"
  },
  {
    "text": "PROFESSOR: Yeah, so a lot of\ntimes we realize that if you go into the caching and\nstuff like that.",
    "start": "1101495",
    "end": "1107180"
  },
  {
    "text": "We really get into that in\nhardware when you talk about hardware lecture. So what happens is yes, we have\nobserved that if I have a",
    "start": "1107180",
    "end": "1115735"
  },
  {
    "text": "set of arguments and if I\ncalculate most of the times I will have the same arguments\nvery quickly time-wise.",
    "start": "1115735",
    "end": "1123940"
  },
  {
    "text": "So if I calculate something,\nthen for a short time I might reuse those arguments again and\nagain, so that's called",
    "start": "1123940",
    "end": "1129570"
  },
  {
    "text": "temporal locality. So caching works when there's a\nvery good temporal locality.",
    "start": "1129570",
    "end": "1134720"
  },
  {
    "text": "And then there's two other\nthings we want to do because we won't have hash function that\nmeans because a lot of",
    "start": "1134720",
    "end": "1140140"
  },
  {
    "text": "arguments from that we only get\none value to look up where I store my cache, have to have\na hash function, but to",
    "start": "1140140",
    "end": "1147156"
  },
  {
    "text": "calculate it by argument. Sometimes if the arguments are\ntoo complicated you might not be able to calculate a good\nhash function and the hash",
    "start": "1147156",
    "end": "1153070"
  },
  {
    "text": "function has to be good. What do you mean by a\ngood hash function? ",
    "start": "1153070",
    "end": "1159870"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yeah, no\n[UNINTELLIGIBLE]. That means they tend to be\na good distribution. So given most of the arguments\nit shouldn't be ending up as",
    "start": "1159870",
    "end": "1167600"
  },
  {
    "text": "the same value again, so you\nshould have good distribution when you call with different\narguments.",
    "start": "1167600",
    "end": "1173480"
  },
  {
    "text": "And the final results only\ndepend on the arguments that's again otherwise you have a\nproblem and the function",
    "start": "1173480",
    "end": "1179309"
  },
  {
    "text": "[UNINTELLIGIBLE] if your [UNINTELLIGIBLE]\nthis important. And there's another thing\ncalled coherence.",
    "start": "1179310",
    "end": "1184470"
  },
  {
    "text": "So what that means\nis I keep some",
    "start": "1184470",
    "end": "1191010"
  },
  {
    "text": "precalculated values in here. And sometime this if results\nare only dependent on the",
    "start": "1191010",
    "end": "1198410"
  },
  {
    "text": "arguments you don't have\nthat much of an issue. But sometimes you might in the\nsituation that the results are",
    "start": "1198410",
    "end": "1204270"
  },
  {
    "text": "dependent on the arguments and\nsome other things like the time of the day or whatever.",
    "start": "1204270",
    "end": "1209700"
  },
  {
    "text": "And if you want full coherence,\nwhat you want to make sure is-- many of you know that the\nresults might be varied.",
    "start": "1209700",
    "end": "1217770"
  },
  {
    "text": "I need to understand\nthat, I need to invalidate all the cache. And suddenly the data or the\nuser changed so that thing I",
    "start": "1217770",
    "end": "1226320"
  },
  {
    "text": "memorized only works for User\nA, now went to User B, the results are wrong and I had to\nget rid of all the results.",
    "start": "1226320",
    "end": "1232950"
  },
  {
    "text": "Or there are some cases where\nyou could say, yeah, little bit of things I can tolerate,\nlike for example, a really far",
    "start": "1232950",
    "end": "1241035"
  },
  {
    "text": "fetched example is something\nlike if you're looking at a",
    "start": "1241035",
    "end": "1246640"
  },
  {
    "text": "web page on a search. OK, you don't have a good\nguarantee that all the web",
    "start": "1246640",
    "end": "1251950"
  },
  {
    "text": "pages in the world are\nin that search. If you're a little bit late\ngetting a new web page, then you're OK.",
    "start": "1251950",
    "end": "1258130"
  },
  {
    "text": "So you can do tolerate\nsometimes, a lot of times, if you can tolerate these kind of\nthings you can have huge",
    "start": "1258130",
    "end": "1264080"
  },
  {
    "text": "performance impact. You don't have to be exact. So some of these projects we\nlook we look at these kind of",
    "start": "1264080",
    "end": "1269770"
  },
  {
    "text": "ideas, of tolerate a little bit\nof a slack and getting a",
    "start": "1269770",
    "end": "1276520"
  },
  {
    "text": "good performance out of that. So here's the kind of code, I\nput a lot of code in my slides",
    "start": "1276520",
    "end": "1286480"
  },
  {
    "text": "because not I won't explain\neverything but since these online if you want to figure out\nwhat the right template is",
    "start": "1286480",
    "end": "1293330"
  },
  {
    "text": "you can look at it. I have no idea why this\nis moving on me.",
    "start": "1293330",
    "end": "1299042"
  },
  {
    "text": "OK, OK, here we go. So what you first have to say\nis every time you cache a",
    "start": "1299042",
    "end": "1305220"
  },
  {
    "text": "value you have to know, I had\nto know old arguments and results, I had to store that,\nand then I'm keeping this many",
    "start": "1305220",
    "end": "1312760"
  },
  {
    "text": "precomputed values in here. And so every time I call the\nfunction with arguments first",
    "start": "1312760",
    "end": "1318210"
  },
  {
    "text": "I have to see I had to get the\nget the has with these arguments because that might be\nthe place, this buffer disk",
    "start": "1318210",
    "end": "1323840"
  },
  {
    "text": "just might be the place I have\nstored a previously computed [UNINTELLIGIBLE]. Then you say, OK look, is my\n[UNINTELLIGIBLE] stored, has",
    "start": "1323840",
    "end": "1330400"
  },
  {
    "text": "the same argument. If that means I already have\nthat precomputed, at that point I just return it, I\nhave no issue in there.",
    "start": "1330400",
    "end": "1336880"
  },
  {
    "text": "Otherwise you're to call the\nfunction because I haven't stored it, and then I will go\nabout storing the value",
    "start": "1336880",
    "end": "1342370"
  },
  {
    "text": "because I calculated I need a\nstorage because the next time",
    "start": "1342370",
    "end": "1347890"
  },
  {
    "text": "I call these arguments I want\nto get the same results, and then I return the result.",
    "start": "1347890",
    "end": "1353132"
  },
  {
    "text": "OK. Is this kind of clear, how\nthis caching works?",
    "start": "1353132",
    "end": "1359020"
  },
  {
    "text": "OK, what's a good place for\ncaching versus precomputing? ",
    "start": "1359020",
    "end": "1366000"
  },
  {
    "text": "Any idea what can make a good\nscenario where actually caching can have a big impact?",
    "start": "1366000",
    "end": "1371830"
  },
  {
    "start": "1371830",
    "end": "1379690"
  },
  {
    "text": "You have heard a lot of things\nthat have the word cache associated with it, and you can\nsay, OK, what that means.",
    "start": "1379690",
    "end": "1385908"
  },
  {
    "text": "AUDIENCE: Web browsing. PROFESSOR: Web browsing OK, you\nweb browse actually that's",
    "start": "1385908",
    "end": "1391420"
  },
  {
    "text": "a cache, because there's a good\nprobability that if you look at a page and you might be\nrefreshing that page or you",
    "start": "1391420",
    "end": "1397630"
  },
  {
    "text": "might be looking at that page,\nso a lot of times what you do is you keep a copy locally, and\nthe next time you ask for",
    "start": "1397630",
    "end": "1405070"
  },
  {
    "text": "that and if you have a local\ncopy you can give that local copy back. And then of course there's some\nissues about how to make",
    "start": "1405070",
    "end": "1411179"
  },
  {
    "text": "the local companies stay, the\ncoherence issues and stuff like that it can get complicated\nbut that's a situation where actually\nyou can use caching.",
    "start": "1411180",
    "end": "1417810"
  },
  {
    "text": " So finally, in this category,\nwe are going to talk about",
    "start": "1417810",
    "end": "1426080"
  },
  {
    "text": "lazy evaluation. So lazy evaluation means\nbasically a lot of times you might ask for value but you\nmight not really need it at",
    "start": "1426080",
    "end": "1434250"
  },
  {
    "text": "that point. Just keep the computation to the\nside without doing it and",
    "start": "1434250",
    "end": "1440600"
  },
  {
    "text": "then do the computations only\nwhen you really, really need the result.",
    "start": "1440600",
    "end": "1446240"
  },
  {
    "text": "So basically this is useful, a\nlot of times you might try to",
    "start": "1446240",
    "end": "1454040"
  },
  {
    "text": "compute a lot of values but\nonly a certain of that actually is used. And at that point you just\nbasically further that",
    "start": "1454040",
    "end": "1460360"
  },
  {
    "text": "calculation and only use it\nwhen it's actually done.  The nice part is when can be\ndone in a function call, and",
    "start": "1460360",
    "end": "1470799"
  },
  {
    "text": "also results can be calculated\nkind of incrementally. And also, the arguments or\nwhat's needed to calculate the",
    "start": "1470800",
    "end": "1479650"
  },
  {
    "text": "results can be nicely packaged\nup so it can be recalculated later.",
    "start": "1479650",
    "end": "1486280"
  },
  {
    "text": "So here what you do here is in\nthe precomputing is something like precomputing but you don't\nprecompute early, at the",
    "start": "1486280",
    "end": "1497910"
  },
  {
    "text": "beginning nothing\nis precomputed. When you only ask to apply a\nfunction then if there's no",
    "start": "1497910",
    "end": "1503590"
  },
  {
    "text": "precomputed value you'll\nrecompute, otherwise you just return the value. So if you compare this one\nPascal's Triangle beforehand I",
    "start": "1503590",
    "end": "1511190"
  },
  {
    "text": "just computed, there's a bunch\nof values in here and kept it. OK assuming OK up to\nPDMAX I will have",
    "start": "1511190",
    "end": "1519620"
  },
  {
    "text": "the results in there. But you might not do that. PDMAX might be very large and\nyou might be looking only for",
    "start": "1519620",
    "end": "1524990"
  },
  {
    "text": "small Pascal Triangle. So instead of doing that, what\nyou can do is you can do this way, you can keep the array for\nresults, assume everything",
    "start": "1524990",
    "end": "1534270"
  },
  {
    "text": "is normally in [UNINTELLIGIBLE] global array.",
    "start": "1534270",
    "end": "1539910"
  },
  {
    "text": "and then what happens is you\nlook at the results if the results is greater than zero we\nare what you're looking at,",
    "start": "1539910",
    "end": "1545090"
  },
  {
    "text": "that means, ah-ha. I have calculated it. I have a new value, I\njust iterated it. I'm happy. Otherwise I will call Pascal\nby recalculating values",
    "start": "1545090",
    "end": "1553750"
  },
  {
    "text": "because I don't have the\ncurrent results. And once I get it\nI will store it. ",
    "start": "1553750",
    "end": "1560710"
  },
  {
    "text": "Once I get the value I will\nbasically, I will calculate the Pascal, I will store it and\nI will return the value.",
    "start": "1560710",
    "end": "1566550"
  },
  {
    "text": "So what that means is this value\nof the Pascal yx will be only calculated once fully, and\nafterward every other time",
    "start": "1566550",
    "end": "1574679"
  },
  {
    "text": "you lose that you actually\nuse the previous one. This works very nice, this works\nboth very nice about",
    "start": "1574680",
    "end": "1580150"
  },
  {
    "text": "precomputation but you don't\npay that extra overhead. So you are doing the minimum\namount of computation.",
    "start": "1580150",
    "end": "1585980"
  },
  {
    "text": "You can never exceed the\ncomputation of the normal computation. So if you only ask for Pascal\nvery small one, that's exactly",
    "start": "1585980",
    "end": "1593640"
  },
  {
    "text": "the work we [UNINTELLIGIBLE]\ndo. But it will also really use this\nkind of exponential blow up that happens in the\nnormal computation.",
    "start": "1593640",
    "end": "1600090"
  },
  {
    "text": "So this is kind of the you can\nhave the cake and eat it too in this work.",
    "start": "1600090",
    "end": "1607510"
  },
  {
    "text": "OK good. So now let's switch from space\nfor time, for time for space.",
    "start": "1607510",
    "end": "1614429"
  },
  {
    "text": "OK? So here, one thing you can do\nis if you have a huge amount",
    "start": "1614430",
    "end": "1621270"
  },
  {
    "text": "of data what you can do is you\ncan store the data in some kind of reduced form and then\nwhat you can do is then you",
    "start": "1621270",
    "end": "1630100"
  },
  {
    "text": "can get a big compression of\ndata basically and then as you need the data you can do some\nmore computation to get the",
    "start": "1630100",
    "end": "1637350"
  },
  {
    "text": "data you want. So what you're doing is you are\nreally reducing the space you need but now you are paying\nby time to get access",
    "start": "1637350",
    "end": "1644659"
  },
  {
    "text": "to that data. So this is why [UNINTELLIGIBLE]",
    "start": "1644660",
    "end": "1650160"
  },
  {
    "text": "storage is at a premium. If you look at systems before\n1980s everybody had to do it",
    "start": "1650160",
    "end": "1657220"
  },
  {
    "text": "because storage was a premium\nand all the memory and disk space was so complicated\neverything got",
    "start": "1657220",
    "end": "1663450"
  },
  {
    "text": "compacted in there. Now, most your laptop and\ndesktops, you don't care, you have enough space.",
    "start": "1663450",
    "end": "1668710"
  },
  {
    "text": "However, if you got things\nlike embedded devices and things like that, this still\nbecomes a issue.",
    "start": "1668710",
    "end": "1674605"
  },
  {
    "text": "Or if you have a very large data\nset it becomes an issue. And what you can do is by\ncompressing, drastically",
    "start": "1674605",
    "end": "1681450"
  },
  {
    "text": "reduce the data size. And you can do it in different\nways, sometimes you can do it in batch.",
    "start": "1681450",
    "end": "1686720"
  },
  {
    "text": "That means you keep the data\ncompressed, expand it all, and process, hopefully you\nhave room for that.",
    "start": "1686720",
    "end": "1693340"
  },
  {
    "text": "Or sometimes if you don't have\nroom you do it by streams, that means you're looking at a\nsmall amount of data expanded,",
    "start": "1693340",
    "end": "1699250"
  },
  {
    "text": "work at it and then either throw\nit or again compress it and put it back in. And hardest thing is if you\nactually do random access.",
    "start": "1699250",
    "end": "1705700"
  },
  {
    "text": "That means you'll randomly go\nto some data, expand and understand that sometimes\nthere's some complications.",
    "start": "1705700",
    "end": "1712360"
  },
  {
    "text": "So there are a bunch of packing\nmethods and some simplest things are use\na small data size.",
    "start": "1712360",
    "end": "1718220"
  },
  {
    "text": "So right now you're dealing with\n64 bit words, you can say wait a minute, why does this\ndata only need 8 bits?",
    "start": "1718220",
    "end": "1725120"
  },
  {
    "text": "Why do you keep storing\neverything 64-bit if my data maximum can be only 0 to 256.",
    "start": "1725120",
    "end": "1732120"
  },
  {
    "text": "I can use 8 bits. Or I can look at that and I\ncan use small data size, that's something.",
    "start": "1732120",
    "end": "1737420"
  },
  {
    "text": "And a lot of people realize a\nlot of data we are storing are just zeros. There are many different data\nstructures, you have huge data",
    "start": "1737420",
    "end": "1745040"
  },
  {
    "text": "structures and most\nof it's zeroes. And eliminating zeroes in many\ninstances can you get a long",
    "start": "1745040",
    "end": "1751660"
  },
  {
    "text": "way in many, many, many\ndata storage. And something like LZ77\neliminates repetition.",
    "start": "1751660",
    "end": "1760090"
  },
  {
    "text": "So a lot of times what you\nfind in there you have repetitive patterns you can\neliminate that and then, of course, you can go into a\nlot more complicated.",
    "start": "1760090",
    "end": "1766470"
  },
  {
    "text": "heavy-weight compression. So to just give you a feel for\nwhat compression is like I",
    "start": "1766470",
    "end": "1773950"
  },
  {
    "text": "found this cute animation so\nI will show it to you. So here is the input stream, but\nit has this corrector LA,",
    "start": "1773950",
    "end": "1781789"
  },
  {
    "text": "and then it has some notion\nabout how much a repetition it has, corrector O and 0 3.",
    "start": "1781790",
    "end": "1788340"
  },
  {
    "text": "So what happens if it's\njust a character? It will get taken in, so these\ntwo correctors go.",
    "start": "1788340",
    "end": "1793919"
  },
  {
    "text": "Now these two forces from the\npoint I point in here go to",
    "start": "1793920",
    "end": "1800610"
  },
  {
    "text": "inwards, and repeat\nit four times. What that means is basically in\nhere it will get repeated",
    "start": "1800610",
    "end": "1810840"
  },
  {
    "text": "four times because that 2 4. So that means instead of having\nthese four correctors",
    "start": "1810840",
    "end": "1816210"
  },
  {
    "text": "in there, what it had was it had\ntwo things, and then all get repeated three times and\nthen it'd get shifted in here.",
    "start": "1816210",
    "end": "1824140"
  },
  {
    "text": "So instead of having ten\ncorrectors before, we had 2,",
    "start": "1824140",
    "end": "1832710"
  },
  {
    "text": "3, 4, 5, 6, 7. Seven, out of seven correctors\nyou compress you stored",
    "start": "1832710",
    "end": "1837950"
  },
  {
    "text": "information off ten correctors\nbecause of repetition. OK, so this is a very simple\nscheme that people use to do",
    "start": "1837950",
    "end": "1847409"
  },
  {
    "text": "this LZ77 compression. ",
    "start": "1847410",
    "end": "1852909"
  },
  {
    "text": "More complicated thing you can\ndo a lot of times is build an interpreter. What that means is you have some\ncomplex data, instead of",
    "start": "1852910",
    "end": "1860270"
  },
  {
    "text": "storing the data you have a\nsummary of the data stored.",
    "start": "1860270",
    "end": "1865280"
  },
  {
    "text": "OK. And then what you can do is\nyou can do this abstract representation.",
    "start": "1865280",
    "end": "1870880"
  },
  {
    "text": "I mean you were already\ntested. Like, for example, you\n[UNINTELLIGIBLE] exactly doing that.",
    "start": "1870880",
    "end": "1875990"
  },
  {
    "text": "What you do is you start off\nstoring all the beats of machine instructions.",
    "start": "1875990",
    "end": "1882160"
  },
  {
    "text": "You store it in abstraction\ncalled add register names or something like in smd.",
    "start": "1882160",
    "end": "1887470"
  },
  {
    "text": "What that means is you're\nbuilding a very simple abstraction which that would be\nmore complex sometimes to",
    "start": "1887470",
    "end": "1896120"
  },
  {
    "text": "store than the actual data. So in here, things like if you\nlook at a java byte cord,",
    "start": "1896120",
    "end": "1905280"
  },
  {
    "text": "that's a nice interpreter. So instead of storing all this\ncomplex instructions you",
    "start": "1905280",
    "end": "1910289"
  },
  {
    "text": "interpret, you stored some\nhigher level set of instructions, that byte code,\nthat is much more compressed",
    "start": "1910290",
    "end": "1918809"
  },
  {
    "text": "and that you run you map it into\nthe machine instructions. There's a lot of advantages\nother than just compressing",
    "start": "1918810",
    "end": "1925990"
  },
  {
    "text": "storage, it's a nice\nabstraction, you can change it at the highly level easily. ",
    "start": "1925990",
    "end": "1935150"
  },
  {
    "text": "OK, so those are something that\nyou can do, you give up one thing for the other.",
    "start": "1935150",
    "end": "1940910"
  },
  {
    "text": "And if you're lucky you can have\nthe cake and eat it too. Which is you get both space\nand time at the same time.",
    "start": "1940910",
    "end": "1950920"
  },
  {
    "text": "So we looked at it in last\nlecture sometime. This is bithack. Bithacks kind of gave you that\nbecause instead of having 64",
    "start": "1950920",
    "end": "1958190"
  },
  {
    "text": "bit word to represent you got\n64 of them into one big stream, if you're only\nrepresenting zeroes and ones.",
    "start": "1958190",
    "end": "1965559"
  },
  {
    "text": "And by doing that you get a lot\nmore compressed storage. Also now you can operate that\nentire 64 in parallel.",
    "start": "1965560",
    "end": "1973728"
  },
  {
    "text": "We can generalize it a little\nbit, so instead of just doing 64 Boolean, sometimes you can\ndo in a 64 bit word, you can",
    "start": "1973728",
    "end": "1982640"
  },
  {
    "text": "store two 32 bit words,\nor four 16 bit words, so eight 8 bit words.",
    "start": "1982640",
    "end": "1989315"
  },
  {
    "text": "OK. In [UNINTELLIGIBLE] is called a Memex\nSSE extensions.",
    "start": "1989316",
    "end": "1995800"
  },
  {
    "text": "Normally it's called SIMDs, a\nsingle instruction multiple data, because what you do to\nthat, all the bits, are the",
    "start": "1995800",
    "end": "2002060"
  },
  {
    "text": "same thing for everybody. So if you're adding you're\ndoing same add for both of the data.",
    "start": "2002060",
    "end": "2007860"
  },
  {
    "text": "And because of that you\nbasically going to get both the compression. Because now for 64 bit you are\nkeeping two thing, or four",
    "start": "2007860",
    "end": "2014620"
  },
  {
    "text": "things, or eight things. Also, now you're operating. In a single operation you can\nget the same operation",
    "start": "2014620",
    "end": "2021170"
  },
  {
    "text": "happening to all the data. So you're getting both storage\nand fast operations in here.",
    "start": "2021170",
    "end": "2028150"
  },
  {
    "text": "Of course if you only look at\none you have to do a little bit more work, you take it out\nof that data word, so if",
    "start": "2028150",
    "end": "2034110"
  },
  {
    "text": "you're just looking at\n[UNINTELLIGIBLE] thing can be expensive. So when is it viable?",
    "start": "2034110",
    "end": "2040420"
  },
  {
    "text": "You'll do the same operations\nall the data. OK, if each day you do something\ndifferent it's not that great and items can be\nstored in contiguous memory,",
    "start": "2040420",
    "end": "2050199"
  },
  {
    "text": "so when you load you can say I'm\ngetting nice in one word, if I'm getting two 32 bit, so\nfour 16 bit, so I can do that.",
    "start": "2050199",
    "end": "2058940"
  },
  {
    "text": "And you don't end up picking\neach operations and doing individual things too much.",
    "start": "2058940",
    "end": "2064980"
  },
  {
    "text": "So if you are to pick each\nindividual elements a lot, then you have to actually now\npick apart that word and that",
    "start": "2064980",
    "end": "2070760"
  },
  {
    "text": "can be multiple operations\nand expensive. ",
    "start": "2070760",
    "end": "2075840"
  },
  {
    "text": "So here's a simple example. This, I think, from after last\nbithacks class, this is a",
    "start": "2075840",
    "end": "2084408"
  },
  {
    "text": "little bit, you probably know,\ncan come up with enough examples here. What I'm doing is I'm doing\na Battleship board game.",
    "start": "2084409",
    "end": "2091658"
  },
  {
    "text": "So you represent the board, and\nthe interesting thing in this board is to know whether\nthat location has something or",
    "start": "2091659",
    "end": "2100650"
  },
  {
    "text": "not, it's empty or full, that's\nall I need to know. And so normally if I do this\nboard game I can have two",
    "start": "2100650",
    "end": "2107950"
  },
  {
    "text": "boards in here.  But what I'm doing is having\nthis overlap calculations,",
    "start": "2107950",
    "end": "2114290"
  },
  {
    "text": "saying of the two boards,\nhow many things overlap. I can just have each location\nrepresented by integer, but",
    "start": "2114290",
    "end": "2122069"
  },
  {
    "text": "then only the representing one\nvalue is not good enough. One thing I can do is I can just\nput each row into one 64",
    "start": "2122070",
    "end": "2129490"
  },
  {
    "text": "bit word, and then instead of\ndoing the two loops I can, in one loop, I can just do the\nending off each row, and I get",
    "start": "2129490",
    "end": "2137750"
  },
  {
    "text": "the result. So after the the bithack\nlecture, this should be kind",
    "start": "2137750",
    "end": "2142830"
  },
  {
    "text": "of trivial. ",
    "start": "2142830",
    "end": "2148240"
  },
  {
    "text": "OK, everybody get it? Anybody have questions so far? Are we all on the same page?",
    "start": "2148240",
    "end": "2157490"
  },
  {
    "text": "OK, good. There's a lot of blank faces so\nI want to help, I'll start asking more questions\nor something.",
    "start": "2157490",
    "end": "2163619"
  },
  {
    "text": "OK, so that's modifying data. Now we're going to modifying\ncode, where you will change",
    "start": "2163620",
    "end": "2170619"
  },
  {
    "text": "the programs to actually get\nperformance and that can be done in loops, logic rules,\nprocedures, expression, and",
    "start": "2170620",
    "end": "2177450"
  },
  {
    "text": "parallelism rules. When we get to parallelism rules\nwe will actually do a",
    "start": "2177450",
    "end": "2182640"
  },
  {
    "text": "lot more on them in future\nlectures, but I just want to address some basic stuff now.",
    "start": "2182640",
    "end": "2188590"
  },
  {
    "text": " Bunch of different loop rules. I will go each of them\nindividually.",
    "start": "2188590",
    "end": "2196230"
  },
  {
    "text": "So first of all, why loops?  Why do you think loops\nare so important?",
    "start": "2196230",
    "end": "2204835"
  },
  {
    "text": "OK, somebody who hasn't\nanswered the question. Why is loops so important? Why are we like really focused\non loops all of the time?",
    "start": "2204835",
    "end": "2212995"
  },
  {
    "text": "Anyone want to answer\nhere, this side? OK. AUDIENCE: [INAUDIBLE] in terms\nof maintainability,",
    "start": "2212996",
    "end": "2218915"
  },
  {
    "text": "[INAUDIBLE]? PROFESSOR: Yeah, so loops\ngive you a nice, simple",
    "start": "2218915",
    "end": "2225570"
  },
  {
    "text": "abstractions it's easier to\nmaintain instead of having multiple computed times. Yes, instead of having same\nthing repeated millions of",
    "start": "2225570",
    "end": "2234610"
  },
  {
    "text": "times for the same thing, if I\nwrite a loop, it's much more concise representation.",
    "start": "2234610",
    "end": "2240300"
  },
  {
    "text": "That's why I think we do a lot\nof loops, because it makes programs easier. In fact, assume this word,\nloops didn't exist, OK?",
    "start": "2240300",
    "end": "2252380"
  },
  {
    "text": "If loops doesn't exist that\nmeans you're going at each instruction get executed\nonly one time.",
    "start": "2252380",
    "end": "2258910"
  },
  {
    "text": "If you have a 3 gigahertz\nmachine that requires even if you do one instruction per cycle\nin 32 bit instruction",
    "start": "2258910",
    "end": "2265970"
  },
  {
    "text": "you need 12 gigabytes of\ninstruction per second, if you only execute one instruction\nonce.",
    "start": "2265970",
    "end": "2273780"
  },
  {
    "text": "That means if you have 100\ngigabyte disk full of a program you go through each\ninstruction the entire 100",
    "start": "2273780",
    "end": "2280869"
  },
  {
    "text": "gigabytes in 8 seconds.  OK. Of course this can never be\ndone, that means you cannot",
    "start": "2280870",
    "end": "2287200"
  },
  {
    "text": "feed 100 gigabytes into the\nprocessor in 8 seconds. That won't work because of\nthe disk access time,",
    "start": "2287200",
    "end": "2293160"
  },
  {
    "text": "caches, and all those. Even if it is doable, what\nthat means is the entire",
    "start": "2293160",
    "end": "2298349"
  },
  {
    "text": "reason your Pentium is running\nat 3 gigahertz and actually showing like it's running as 3\ngigahertz is because you are",
    "start": "2298350",
    "end": "2305750"
  },
  {
    "text": "using instructions\nmany, many times. You have loops that run\nmillions of times.",
    "start": "2305750",
    "end": "2311110"
  },
  {
    "text": "If you don't have loops you\ncan use whatever the data machine you build in '004 and\nthat probably as fast you",
    "start": "2311110",
    "end": "2318165"
  },
  {
    "text": "could get because of this\ninstruction thing. So loops are critical, and\nloops are what makes our",
    "start": "2318165",
    "end": "2325270"
  },
  {
    "text": "programs run fast. Repeated execution of same\ninstruction again",
    "start": "2325270",
    "end": "2330510"
  },
  {
    "text": "and again and again. OK. So in the world, in that sense,\nif you think about this, unless there are some\ninstruction that's run",
    "start": "2330510",
    "end": "2338260"
  },
  {
    "text": "millions of times, you can\nnever keep this ferocious beast's appetite full because\nthere will always be new",
    "start": "2338260",
    "end": "2345090"
  },
  {
    "text": "instructions. So because of that looking at\nloops, if you want to get good",
    "start": "2345090",
    "end": "2351980"
  },
  {
    "text": "performance just looking at the\nmost important loops, the inner loops, and just doing only\nthat we'll probably get",
    "start": "2351980",
    "end": "2358500"
  },
  {
    "text": "you most of way in\nmany, many cases.",
    "start": "2358500",
    "end": "2363800"
  },
  {
    "text": "And basically I could even say\n99 of the program execution time is in 10% of the code,\neven, more than",
    "start": "2363800",
    "end": "2371980"
  },
  {
    "text": "that in many cases. Because otherwise\n[UNINTELLIGIBLE] back of the envelope calcuation\nyou can do, you",
    "start": "2371980",
    "end": "2377690"
  },
  {
    "text": "realize how much code you need\nto feed the beast to keep it active otherwise.",
    "start": "2377690",
    "end": "2383010"
  },
  {
    "text": "So first loop optimization,\nloop and invariant code motion. So normally in a loop you run\nmillions of times, and if you",
    "start": "2383010",
    "end": "2391599"
  },
  {
    "text": "do the same thing millions of\ntimes and get the same results you are just doing useless\ncomputation.",
    "start": "2391600",
    "end": "2399180"
  },
  {
    "text": "And so here the key thing is\nmost of the time the compiler, a good compiler will\ncome help you.",
    "start": "2399180",
    "end": "2406740"
  },
  {
    "text": "So in this class you're\nnot trying to replace the compiler. We, as humans, we want to the\nleast amount of work.",
    "start": "2406740",
    "end": "2411910"
  },
  {
    "text": "The compilers [UNINTELLIGIBLE]\ndumb things sitting in there, it can do most of\nthe hard work. The key thing is first\ntrying to get the",
    "start": "2411910",
    "end": "2417430"
  },
  {
    "text": "compiler to do the work. Only do things yourself if\nthe compiler cannot do. So most of the time compiler,\nif it can analyze the code,",
    "start": "2417430",
    "end": "2424460"
  },
  {
    "text": "and prove the results are the\nsame in each iteration, it's going to get rid of it, it\nwill do that for you.",
    "start": "2424460",
    "end": "2429760"
  },
  {
    "text": "But there are cases it's not\npossible because sometimes the",
    "start": "2429760",
    "end": "2435130"
  },
  {
    "text": "computation might be too costly\nand also there might be cases the computation is too\ncheap if you hoist it out, you",
    "start": "2435130",
    "end": "2445696"
  },
  {
    "text": "have to keep the results in\nsome [UNINTELLIGIBLE] and if you keep too many things\nin too many registers, that cost might be\ntoo expensive.",
    "start": "2445696",
    "end": "2452050"
  },
  {
    "text": "So there might be case that you\nmight not do, but most of the time what happens\nbecause the compiler can't do anything.",
    "start": "2452050",
    "end": "2457800"
  },
  {
    "text": "So here's a good example. I'm doing, I don't know why I\ndid that, but square root and",
    "start": "2457800",
    "end": "2464450"
  },
  {
    "text": "take exponential off that. Compiler look at that\nas functions. I have no idea what the function\nare most of the time.",
    "start": "2464450",
    "end": "2470549"
  },
  {
    "text": "The compiler can't tell what\neach function does because the function call. It can do any arbitrary thing as\nfar as the compiler knows.",
    "start": "2470550",
    "end": "2476270"
  },
  {
    "text": "It says, OK, function call,\nI don't know what happened inside so I'm just giving up and\nI'm just leaving it, but",
    "start": "2476270",
    "end": "2481460"
  },
  {
    "text": "you, on the other hand, knows\nthat the square root function, exponential function doesn't\nhave any what you call the",
    "start": "2481460",
    "end": "2487370"
  },
  {
    "text": "side effects. That means those functions\ndoesn't go changing anything else. It just calculates\n[UNINTELLIGIBLE] the value,",
    "start": "2487370",
    "end": "2492720"
  },
  {
    "text": "you'll know this basically\ncalculate the same value again and again and you can just\nbasically take it out, do it",
    "start": "2492720",
    "end": "2500690"
  },
  {
    "text": "twice, happy. So lot of times make sure\nthe compiler can do it.",
    "start": "2500690",
    "end": "2505910"
  },
  {
    "text": "If the compiler cannot do then\nyou have to go in and interfere at that point.",
    "start": "2505910",
    "end": "2511940"
  },
  {
    "text": "So here's another interesting\nthing the compilers cannot do. A lot of times you're going\nthrough this array or data",
    "start": "2511940",
    "end": "2518940"
  },
  {
    "text": "structure looking\nfor some value. OK, once you've found the value,\nyou will say OK, found",
    "start": "2518940",
    "end": "2524660"
  },
  {
    "text": "it, I return. OK. Normally what that means is when\nyou're going to add it,",
    "start": "2524660",
    "end": "2529960"
  },
  {
    "text": "there's two things. First of all you had to test\nwhether you found the value that you're trying to exit.",
    "start": "2529960",
    "end": "2535320"
  },
  {
    "text": "Second, you have to make sure\nthat you don't overrun on the data structure, you're\nnot overrunning that. you have to make sure you're not\nat the end of that because",
    "start": "2535320",
    "end": "2542430"
  },
  {
    "text": "that value might not\nbe in that area. If that's the case, you run\nto the end of that.",
    "start": "2542430",
    "end": "2548170"
  },
  {
    "text": "So pretend I don't find it. So you do two tests.",
    "start": "2548170",
    "end": "2553215"
  },
  {
    "text": "One thing you can do is you\nstart doing the two test at the end of that array, how about\nyou add the value you",
    "start": "2553216",
    "end": "2561450"
  },
  {
    "text": "are testing for? So you know when you reach to\nthe end you will always find",
    "start": "2561450",
    "end": "2568020"
  },
  {
    "text": "the value because you\nadded there, so you know it's there already. So by doing that you can reuse\nthe test by just looking for",
    "start": "2568020",
    "end": "2574190"
  },
  {
    "text": "the value because now when it\ncomes to the end, you don't have to do anymore tests because\nthe value you're looking is already there and\nyou found that, you go out.",
    "start": "2574190",
    "end": "2581930"
  },
  {
    "text": "But you should be able to add\nthat value to the end of that. So what you do is this is your\nnormal test that's what you're",
    "start": "2581930",
    "end": "2588240"
  },
  {
    "text": "doing is you're, if I can get my\nmouse, you're going through this array, looking\nfor a value.",
    "start": "2588240",
    "end": "2595390"
  },
  {
    "text": "A value I return otherwise\nI return minus 1 in here. Now I do two tests. I do this test to make\nsure that I'm not at",
    "start": "2595390",
    "end": "2601500"
  },
  {
    "text": "the end of the array. I'm [UNINTELLIGIBLE] this one. So, in fact, [UNINTELLIGIBLE] loop I just can put the two\ntests next to each other so this is what you're doing.",
    "start": "2601500",
    "end": "2608309"
  },
  {
    "text": "But instead of doing that one\nthing I can do is put that at",
    "start": "2608310",
    "end": "2614560"
  },
  {
    "text": "the end of the array, after\nall the data that I care about, I can put the value I'm\nlooking for and then I just",
    "start": "2614560",
    "end": "2621490"
  },
  {
    "text": "only do one test. I check for that value. So if you find the real\nvalue in the area, at",
    "start": "2621490",
    "end": "2627920"
  },
  {
    "text": "that point I'm done. Or I ran out of the array, and\nafter I ran out the real data I just found the value because\nI, myself, put it there.",
    "start": "2627920",
    "end": "2636430"
  },
  {
    "text": "And so I have to find it, and\nthe minute I find it, if I realize that's the case I say,\nOK, that's the value I put and",
    "start": "2636430",
    "end": "2643530"
  },
  {
    "text": "I [UNINTELLIGIBLE]. Here I have done something\nwhich is not really good programming practice.",
    "start": "2643530",
    "end": "2649810"
  },
  {
    "text": "Can anybody put your 005\nhat and say, that's bad programming?",
    "start": "2649810",
    "end": "2655380"
  },
  {
    "text": " AUDIENCE: You modified\n[INAUDIBLE].",
    "start": "2655380",
    "end": "2661905"
  },
  {
    "text": "PROFESSOR: I modified\nmy input array. I know. That's not that great. I mean if I did it really well,\nif I want to make sure",
    "start": "2661905",
    "end": "2669790"
  },
  {
    "text": "what I should have done is kept\nthe old value of the n and at the end, it back\nso it looks the",
    "start": "2669790",
    "end": "2677560"
  },
  {
    "text": "pristine thing I got. I mean, if I was really careful\nI would have done that, and then my invariant that\nmy input array haven't",
    "start": "2677560",
    "end": "2684010"
  },
  {
    "text": "changed would hold nicely.\nbecause here I have mucked with my input array. So even though you are\nconstantly doing performance",
    "start": "2684010",
    "end": "2692440"
  },
  {
    "text": "programming you should still\nhave a good eye for doing good correct programming and keeping\nnice programming",
    "start": "2692440",
    "end": "2699410"
  },
  {
    "text": "variants around than mucking\nit all over the place.",
    "start": "2699410",
    "end": "2704510"
  },
  {
    "text": "So if you wonder putting a new\nhat in here, you should still have the 005 hat, at\nleast partially.",
    "start": "2704510",
    "end": "2709910"
  },
  {
    "start": "2709910",
    "end": "2715720"
  },
  {
    "text": "What else can we do? A lot of times what you find\nis we have these loops, and",
    "start": "2715720",
    "end": "2724330"
  },
  {
    "text": "loops have a couple\nof features. First of all, you have to keep\nchecking the loop condition, that's expensive.",
    "start": "2724330",
    "end": "2730510"
  },
  {
    "text": "And if the loop body is very\nsmall, the compiler doesn't have that much opportunity to\ndo anything useful in the",
    "start": "2730510",
    "end": "2735640"
  },
  {
    "text": "body, just basically\ncompile as is. So one thing you want to do is\nif the loop bodies are too",
    "start": "2735640",
    "end": "2742160"
  },
  {
    "text": "small and the number of\niterations is small, you want to unroll the loop. So in here, instead of doing\nthis calculation again and",
    "start": "2742160",
    "end": "2750165"
  },
  {
    "text": "again, I want to actually do a\ncomputation unrolled, and this gives you two things.",
    "start": "2750165",
    "end": "2755849"
  },
  {
    "text": "First of all I get rid of\nthis disk, so I actually [UNINTELLIGIBLE] in here. And second, this computation can\nbe done much faster, the",
    "start": "2755850",
    "end": "2767440"
  },
  {
    "text": "compiler can do this much\nfaster than this one. Do you see why? Can anybody see why this\ncomputation would happen much",
    "start": "2767440",
    "end": "2775040"
  },
  {
    "text": "faster than this doing in\nthe loop iteration? AUDIENCE: Because you don't have\nto write the final result of the variable until all\nthe numbers [INAUDIBLE]?",
    "start": "2775040",
    "end": "2783271"
  },
  {
    "text": "PROFESSOR: So that's\none thing. Even the final results in the\nregister what happens in here?",
    "start": "2783271",
    "end": "2790180"
  },
  {
    "text": "So that's a good assertion\nbut that's not exactly what's back there. AUDIENCE: [INAUDIBLE].",
    "start": "2790180",
    "end": "2795705"
  },
  {
    "text": " PROFESSOR: OK, he got 90%\nof the way there.",
    "start": "2795705",
    "end": "2805050"
  },
  {
    "text": "First of all here I\nhad increment i. And I have it check\n[UNINTELLIGIBLE] the loop condition. That's another point in here.",
    "start": "2805050",
    "end": "2811255"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: The one on right\ncan be run in parallel. In here I am doing\nsum equals--",
    "start": "2811256",
    "end": "2819020"
  },
  {
    "text": "some plus A I, so that means\nI have to calculate [UNINTELLIGIBLE].",
    "start": "2819020",
    "end": "2825450"
  },
  {
    "text": "Once that is done and we get the\nresults only then I can go add the two, only then\nI can add day three.",
    "start": "2825450",
    "end": "2832170"
  },
  {
    "text": "So the last [UNINTELLIGIBLE] using, you can show 16\ninstructions at every cycle.",
    "start": "2832170",
    "end": "2839450"
  },
  {
    "text": "OK what six things you\ncan do in here? Nothing. Because you're just waiting. You're twiddling your thumb for\nthe first one to finish, to do that.",
    "start": "2839450",
    "end": "2845030"
  },
  {
    "text": "In here, you can say, look, I\ndon't have to add A1A to it. I can just do these things\nin parallel. The first cycle I can\nadd is 0 to A of 1.",
    "start": "2845030",
    "end": "2852610"
  },
  {
    "text": "that's one instruction\n2 3 2 4 5 3 6 7. I can add all those things\ntogether as a tree.",
    "start": "2852610",
    "end": "2860700"
  },
  {
    "text": "I can do tree addition instead\nof one after another, that can happen in one go. And I can get a six editions\ndone and then the next",
    "start": "2860700",
    "end": "2868810"
  },
  {
    "text": "instruction I add the\n[UNINTELLIGIBLE] and at the later stages do not have too\nmuch to do but I could get a lot of [UNINTELLIGIBLE].",
    "start": "2868810",
    "end": "2874170"
  },
  {
    "text": "So the compiler can actually\n[UNINTELLIGIBLE] all of that. ",
    "start": "2874170",
    "end": "2880069"
  },
  {
    "text": "So that works very nicely if\nI have small number of iterations. But if you have a large number\nof iterations, you can still",
    "start": "2880070",
    "end": "2886850"
  },
  {
    "text": "do some stuff. So in here what you can do is\nit goes to one and you can say, OK, I don't know.",
    "start": "2886850",
    "end": "2892730"
  },
  {
    "text": "I don't know how to unroll fully\nbecause I don't know what n is, but I can\nunroll partially.",
    "start": "2892730",
    "end": "2898079"
  },
  {
    "text": "So here what I can do is say,\nlook, I have been running it n times, I will unroll\nmy loop four times.",
    "start": "2898080",
    "end": "2906414"
  },
  {
    "text": "OK. So I at least get enough\nof unrolling here. That way you can choose.",
    "start": "2906415",
    "end": "2911530"
  },
  {
    "text": "That is, you unroll enough that\nthe meshing can get busy. It's not just crawling.",
    "start": "2911530",
    "end": "2917240"
  },
  {
    "text": "And then I haven't blown up my\ncode like crazy in here. And of course you had to clean\nup and then you have to know",
    "start": "2917240",
    "end": "2923840"
  },
  {
    "text": "how many full iterations. So how do you choose\nhow much to unroll?",
    "start": "2923840",
    "end": "2932300"
  },
  {
    "text": "What impacts my number\nof unrolls? I unroll four times. You can get greedy, and say, I'm\ngoing to unroll 8 times,",
    "start": "2932300",
    "end": "2938530"
  },
  {
    "text": "16, 32, 64, 128.",
    "start": "2938530",
    "end": "2945270"
  },
  {
    "text": "Because a lot of time these are\nnot zero-sum some gains. Some stuff impact\nsome other way.",
    "start": "2945270",
    "end": "2951340"
  },
  {
    "text": "So what should I use normally\nfor my amount of iterations to unroll?",
    "start": "2951340",
    "end": "2957410"
  },
  {
    "text": "Anybody want to take\na guess what helps? AUDIENCE: It's probably the\nnumber [UNINTELLIGIBLE].",
    "start": "2957410",
    "end": "2965026"
  },
  {
    "text": "PROFESSOR: OK, so in one sense\nyou can look and say number of instructions I can execute in\none cycle, that's a good thing",
    "start": "2965026",
    "end": "2972920"
  },
  {
    "text": "to keep, unroll enough to\nkeep the process of [UNINTELLIGIBLE] most\nof the time.",
    "start": "2972920",
    "end": "2979592"
  },
  {
    "text": "But sometimes we can say oh\nthat's hard to figure that one out, I don't know that because\nI'm at the compiler. I'm at high level. I don't know what happens\nat low level.",
    "start": "2979592",
    "end": "2985890"
  },
  {
    "text": "I'm going to unroll\n1,000 times. So why shouldn't I unroll\na huge amount? ",
    "start": "2985890",
    "end": "2994160"
  },
  {
    "text": "What happens if I\nunroll too much? AUDIENCE: [INAUDIBLE].",
    "start": "2994160",
    "end": "3000180"
  },
  {
    "text": "PROFESSOR: You might-- AUDIENCE: You might\nto be [INAUDIBLE]. PROFESSOR: OK, define\nit more closely.",
    "start": "3000180",
    "end": "3005890"
  },
  {
    "text": "What do you mean? AUDIENCE: Perhaps there's\nsome [UNINTELLIGIBLE].",
    "start": "3005890",
    "end": "3011896"
  },
  {
    "text": "PROFESSOR: That's the one\ninteresting thing. Assume your number\nof iterations",
    "start": "3011896",
    "end": "3017200"
  },
  {
    "text": "are not always millions. Sometimes you might\n[UNINTELLIGIBLE] hundred times, or 200 times.",
    "start": "3017200",
    "end": "3023470"
  },
  {
    "text": "So if you unroll 500 times,\nyou would never get to the unroll loop. You end up in this\nclean up loop.",
    "start": "3023470",
    "end": "3031220"
  },
  {
    "text": "And so clean up loop, of course,\nis not unrolled and so you're back to your\nsquare one. And so a lot of times if you\nunroll too much and if your",
    "start": "3031220",
    "end": "3038549"
  },
  {
    "text": "number of iterations doesn't\nfit so you end up in here, that's not good. Another thing is when you unroll\nloop here there's a",
    "start": "3038550",
    "end": "3045310"
  },
  {
    "text": "huge amount of instructions\nnow. That instructions might be too\nmuch, it might not fit in the",
    "start": "3045310",
    "end": "3050580"
  },
  {
    "text": "cache, it might just overwhelm\nthe memory system. So you have already now created\na loop that doesn't",
    "start": "3050580",
    "end": "3056769"
  },
  {
    "text": "fit in the instruction cache\nand that's not good either. So that will limit down roll, so\ndon't get too greedy, just",
    "start": "3056770",
    "end": "3064030"
  },
  {
    "text": "sometimes these are the things\nyou kind of play with in the",
    "start": "3064030",
    "end": "3069500"
  },
  {
    "text": "problems you're looking\nat and some of it is architecture dependent. Some of them are things like\ntoo much unroll where the",
    "start": "3069500",
    "end": "3075780"
  },
  {
    "text": "number of iterations not that\nhigh is problem dependent. ",
    "start": "3075780",
    "end": "3083109"
  },
  {
    "text": "Another thing you can do there\nare many places if you have two different very same looking\nloops we can put them",
    "start": "3083110",
    "end": "3089090"
  },
  {
    "text": "together into one loop and that\ngives [UNINTELLIGIBLE]",
    "start": "3089090",
    "end": "3094480"
  },
  {
    "text": "all the loop tests and stuff\nand also the array access.",
    "start": "3094480",
    "end": "3100230"
  },
  {
    "text": "At least done once, so\nthat can give you a benefit in here. ",
    "start": "3100230",
    "end": "3107840"
  },
  {
    "text": "Here's interesting one. Here you have this weird loop\nthat the j loop run from I to",
    "start": "3107840",
    "end": "3113560"
  },
  {
    "text": "J in minus I, I to n minus I.\nHow can I improve this one?",
    "start": "3113560",
    "end": "3121440"
  },
  {
    "text": "Can anybody tell me what\nmight happen in here? So I have outer loop I goes from\n0 to N, inner loop goes",
    "start": "3121440",
    "end": "3128079"
  },
  {
    "text": "from I to N minus\nI. What happen?",
    "start": "3128080",
    "end": "3135740"
  },
  {
    "start": "3135740",
    "end": "3144730"
  },
  {
    "text": "Somebody's getting it. OK. AUDIENCE: [INAUDIBLE]. ",
    "start": "3144730",
    "end": "3150059"
  },
  {
    "text": "PROFESSOR: Yes, what happens is\nbecause what the loop is at",
    "start": "3150060",
    "end": "3161640"
  },
  {
    "text": "the beginning you're going from\nbasically 0 to N, and then the lower bound is going\nlike this, upper bound is",
    "start": "3161640",
    "end": "3169690"
  },
  {
    "text": "going like this. After N over 2, this is\nN, N over 2, there's",
    "start": "3169690",
    "end": "3175123"
  },
  {
    "text": "no iterations left. OK, you're trading and trading\nand trading and after it iterates, so you're running\nouter loop, N over 2 to end",
    "start": "3175123",
    "end": "3181550"
  },
  {
    "text": "with nothing running\non the inner loop. And so if you have this kind\nof funky loops you can just",
    "start": "3181550",
    "end": "3186700"
  },
  {
    "text": "look at it a little bit careful\nand say, wait a minute, that's not useful. So therefore I can just get rid\nof this new situations.",
    "start": "3186700",
    "end": "3193530"
  },
  {
    "text": "And then sort of free\ntrading to nothing. ",
    "start": "3193530",
    "end": "3201160"
  },
  {
    "text": "So that's loops rules. Loops are very important.",
    "start": "3201160",
    "end": "3206260"
  },
  {
    "text": "also you can do a lot of\ninteresting logic rules. So first of all, can anybody\nshout out what each of these",
    "start": "3206260",
    "end": "3213430"
  },
  {
    "text": "things can be done? Square root of x\ngreater than 0.",
    "start": "3213430",
    "end": "3219910"
  },
  {
    "text": "Square of [UNINTELLIGIBLE] zero, sorry. x [UNINTELLIGIBLE].",
    "start": "3219910",
    "end": "3224930"
  },
  {
    "text": "Actually, not [UNINTELLIGIBLE] sorry. x not equal to zero. Because x squared of\nx squared non-zero.",
    "start": "3224930",
    "end": "3230640"
  },
  {
    "text": "OK. Here's something your compiler\nprobably doesn't know about the transformation. We can do that. How about the next one?",
    "start": "3230640",
    "end": "3236440"
  },
  {
    "text": " How can I get to input\nthe next one?",
    "start": "3236440",
    "end": "3241940"
  },
  {
    "text": " Square root of base climb,\nlooking at the distance",
    "start": "3241940",
    "end": "3247850"
  },
  {
    "text": "between x and Y and AB.",
    "start": "3247850",
    "end": "3254380"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Eliminate\nthe square root. It doesn't help anything you\ndo except do too much computation.",
    "start": "3254380",
    "end": "3259900"
  },
  {
    "text": "OK, next one.  Yeah, I can basically multiply\nand then do take a one",
    "start": "3259900",
    "end": "3269080"
  },
  {
    "text": "[UNINTELLIGIBLE] final one. AUDIENCE: [INAUDIBLE]. PROFESSOR: One. OK, and then you should go and\nfind that program who wrote",
    "start": "3269080",
    "end": "3277640"
  },
  {
    "text": "that, but believe me you'll\nfind these kind of code sitting somewhere because you\ndidn't think through, you just",
    "start": "3277640",
    "end": "3283950"
  },
  {
    "text": "start writing and suddenly you\nhave this kind of nice axiom. So when do that this is\nsomething compiler can do, of",
    "start": "3283950",
    "end": "3290980"
  },
  {
    "text": "for these kind of patterns. That was a stupid mistake but\na lot of other things are things that a compiler cannot do\nbut you know more than the",
    "start": "3290980",
    "end": "3298430"
  },
  {
    "text": "compiler does. OK. ",
    "start": "3298430",
    "end": "3304415"
  },
  {
    "text": "Other interesting thing in\nhere is if you're looking",
    "start": "3304415",
    "end": "3310210"
  },
  {
    "text": "something like [UNINTELLIGIBLE] increasing function- OK, let\nme look at this carefully.",
    "start": "3310210",
    "end": "3319555"
  },
  {
    "start": "3319555",
    "end": "3325599"
  },
  {
    "text": "OK, this is very similar to what\nwe talked before with the [INAUDIBLE] ending. So one thing you can do is I can\nput the cut off at the end",
    "start": "3325600",
    "end": "3333780"
  },
  {
    "text": "and then I don't have to take\ncheck both the bounds and",
    "start": "3333780",
    "end": "3338880"
  },
  {
    "text": "basically [UNINTELLIGIBLE] through something. Basically this is the\n[UNINTELLIGIBLE]",
    "start": "3338880",
    "end": "3345750"
  },
  {
    "text": "check we did done a little\nbit differently. OK. And here's another interesting\nthing.",
    "start": "3345750",
    "end": "3351550"
  },
  {
    "text": "Reordering test. So what can you do here? What do I do here? I'm looking at is, I am looking\nat two different a",
    "start": "3351550",
    "end": "3360990"
  },
  {
    "text": "circles, see whether they\nare [UNINTELLIGIBLE] in here. This is expensive test because\nI had to do something in a",
    "start": "3360990",
    "end": "3374800"
  },
  {
    "text": "square root and check\nwhether it's less than or equal to radius. So here's what I had to do. How can I make this faster?",
    "start": "3374800",
    "end": "3381880"
  },
  {
    "text": "What's the [UNINTELLIGIBLE]\nin here?  So assume I have this bunch of\nballs running around in my",
    "start": "3381880",
    "end": "3390520"
  },
  {
    "text": "graphics program. I want to make sure that the\nballs haven't collided. They are actually moving with no\ncollision with other balls",
    "start": "3390520",
    "end": "3397740"
  },
  {
    "text": "and I'm doing this test. ",
    "start": "3397740",
    "end": "3402940"
  },
  {
    "text": "What's a good [UNINTELLIGIBLE]\nin here? ",
    "start": "3402940",
    "end": "3408722"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: So he's getting there\nbecause most of the time",
    "start": "3408722",
    "end": "3414000"
  },
  {
    "text": "what happens is if you're\nlooking at two balls collision",
    "start": "3414000",
    "end": "3419440"
  },
  {
    "text": "most times these balls are\nfarther apart and if you just",
    "start": "3419440",
    "end": "3424619"
  },
  {
    "text": "found the square around the\nball, testing these two",
    "start": "3424620",
    "end": "3431030"
  },
  {
    "text": "squares are colliding\nit's very cheap, OK?",
    "start": "3431030",
    "end": "3436710"
  },
  {
    "text": "And then if the squares are all\nhappy, then and only then you might want to check\nif actually all the",
    "start": "3436710",
    "end": "3442670"
  },
  {
    "text": "balls are all happening. OK and by doing this square test\nyou can do very expensive",
    "start": "3442670",
    "end": "3451589"
  },
  {
    "text": "operations in here. You can basically do some very\nsimple thing, in fact I have even reduced it more by just\ndoing first doing the x side",
    "start": "3451590",
    "end": "3460730"
  },
  {
    "text": "and then if x is\n[UNINTELLIGIBLE] I don't even have to check for\nY. And only if those two",
    "start": "3460730",
    "end": "3466730"
  },
  {
    "text": "checks fail that I realize,\nlook, the square might be now",
    "start": "3466730",
    "end": "3471950"
  },
  {
    "text": "there's a good chance it's\nactually the color id. And there's a really good chance\nmost of the test, after",
    "start": "3471950",
    "end": "3477240"
  },
  {
    "text": "doing the first two things,\nwill be done. You'll never have to go through\nthis very expensive operations. So here's something you have a\nlittle bit of intuition on",
    "start": "3477240",
    "end": "3484970"
  },
  {
    "text": "what's going on out there in\nthe problem, and use that intuition to look like more\nwork, but in reality really",
    "start": "3484970",
    "end": "3493380"
  },
  {
    "text": "reduce the amount of work you\nhad to do because the test is very expensive.",
    "start": "3493380",
    "end": "3498570"
  },
  {
    "start": "3498570",
    "end": "3507800"
  },
  {
    "text": "OK, here what I have done, OK\nthis is a little bit of a",
    "start": "3507800",
    "end": "3514380"
  },
  {
    "text": "contrived example, what I want\nto do is assume I have",
    "start": "3514380",
    "end": "3520809"
  },
  {
    "text": "basically a 4 bit word\nin here, OK.",
    "start": "3520810",
    "end": "3526360"
  },
  {
    "text": "And I am checking- this would be\n8 I think, so I have 8 bit",
    "start": "3526360",
    "end": "3535405"
  },
  {
    "text": "word in here. OK, I'm checking whether the\n8 bit word is a palindrome. So the way I check the word is a\npalindrome is first of all I",
    "start": "3535405",
    "end": "3543620"
  },
  {
    "text": "set up some bits in here,\nbit masks, OK?",
    "start": "3543620",
    "end": "3548940"
  },
  {
    "text": "And I have a bit mask\nfor the two ends. I said, OK, these two are same,\nthen these two same,",
    "start": "3548940",
    "end": "3554840"
  },
  {
    "text": "these two same, these two same,\nI just kind of go down the bit mask. Did everybody see\nhow this work?",
    "start": "3554840",
    "end": "3559880"
  },
  {
    "text": "And then in these two I kind\nof shift my bit mask to the side, these two, basically\nshifting.",
    "start": "3559880",
    "end": "3566329"
  },
  {
    "text": "So I'm checking the most two\nbits are the same, the next two bits are the same, next two\nbits are the same, going",
    "start": "3566330",
    "end": "3572740"
  },
  {
    "text": "on [UNINTELLIGIBLE]. OK, so every time I do that\nI have [UNINTELLIGIBLE] this bit mask do this operation\nand stuff like that.",
    "start": "3572740",
    "end": "3579529"
  },
  {
    "text": "Assume I am checking whether\nmy [UNINTELLIGIBLE] correctors.",
    "start": "3579530",
    "end": "3585100"
  },
  {
    "text": "If I call this a lot of\ntimes what can I do? ",
    "start": "3585100",
    "end": "3595630"
  },
  {
    "text": "Kind of out of the\nbox thinking. ",
    "start": "3595630",
    "end": "3606609"
  },
  {
    "text": "So the one thing is if I am only\nlooking for correctors, how many different correctors\nare there?",
    "start": "3606610",
    "end": "3613380"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE].",
    "start": "3613380",
    "end": "3618842"
  },
  {
    "start": "3618842",
    "end": "3623884"
  },
  {
    "text": "PROFESSOR: Yeah, because all the\ncorrectors in everything I look up, I have 8 bits,\ntwo to date.",
    "start": "3623884",
    "end": "3630660"
  },
  {
    "text": "What's two to date?  [UNINTELLIGIBLE].",
    "start": "3630660",
    "end": "3635730"
  },
  {
    "start": "3635730",
    "end": "3641944"
  },
  {
    "text": "OK, so you have 256\npossibilities in here, OK. So I'm doing this to 256 why\ndon't I precompute and store?",
    "start": "3641944",
    "end": "3650790"
  },
  {
    "text": "So if I just calculate for 256\ndifferent possibilities, we",
    "start": "3650790",
    "end": "3657260"
  },
  {
    "text": "see the palindrome or not, I\njust store a bit for each of them, saying it's a palindrome\nor not, and then my palindrome",
    "start": "3657260",
    "end": "3664160"
  },
  {
    "text": "test is very simple. I just look up my look up table\nand say, hey, is this a palindrome, no?",
    "start": "3664160",
    "end": "3669830"
  },
  {
    "text": "Yes? No? Done. So if I'm doing this computation\na lot of times I suddenly realize I can\nprecompute the kind of things",
    "start": "3669830",
    "end": "3679590"
  },
  {
    "text": "we did before. I am very safe, I can do that. ",
    "start": "3679590",
    "end": "3687590"
  },
  {
    "text": "So sometimes you have this\nprograms that has very",
    "start": "3687590",
    "end": "3692670"
  },
  {
    "text": "complicated control structures\nbut when you look at this here you realize [UNINTELLIGIBLE] use multiple times in here.",
    "start": "3692670",
    "end": "3699320"
  },
  {
    "text": "There's S1, if v S2, else S3. S4 again, if v S5.",
    "start": "3699320",
    "end": "3704600"
  },
  {
    "text": "And so there re a lot of\nconditions going on in here. And something like that you can\nsometimes look at that and",
    "start": "3704600",
    "end": "3710410"
  },
  {
    "text": "say, like OK, look, because\nmy conditions are simple.",
    "start": "3710410",
    "end": "3715859"
  },
  {
    "text": "I mean in here, I only do one,\nI just do that one and I will create the path depending\non what the",
    "start": "3715860",
    "end": "3721290"
  },
  {
    "text": "Boolean expressions are. And even if you have two or\nthree conditions you can create a couple of parts\ndepending on that.",
    "start": "3721290",
    "end": "3727540"
  },
  {
    "text": "So I'm replicating some\nstuff, like S1 is in both, S4 is in both.",
    "start": "3727540",
    "end": "3733289"
  },
  {
    "text": "So I have expanded my code a\nlot, but now instead of having this spaghetti code that my\ncompiler and my architecture",
    "start": "3733290",
    "end": "3739720"
  },
  {
    "text": "is going to stop all the time\nbecause [UNINTELLIGIBLE] prediction and stuff, as\nProfessor Leiserson pointed out, can have issues.",
    "start": "3739720",
    "end": "3746250"
  },
  {
    "text": "I created this nice single\nbranch, lot of code to execute, lot of chances for\nmy compiler to do a lot of",
    "start": "3746250",
    "end": "3752260"
  },
  {
    "text": "optimization. I can say things like that. And compiler can do it most of\nthe time and sometimes you",
    "start": "3752260",
    "end": "3757960"
  },
  {
    "text": "might want to help\nthe compiler. Procedure rules. ",
    "start": "3757960",
    "end": "3767119"
  },
  {
    "text": "So one interesting thing is a\nlot of times when you have a lot of small procedure calls.",
    "start": "3767120",
    "end": "3775120"
  },
  {
    "text": "A couple of things. OK, let me ask you, what's the\nproblem with having a lot of small procedure calls?",
    "start": "3775120",
    "end": "3780670"
  },
  {
    "text": "You cause a lot of small methods\nall over the place. What's the problem with\nsmall methods? AUDIENCE: [INAUDIBLE].",
    "start": "3780670",
    "end": "3787716"
  },
  {
    "text": "PROFESSOR: [UNINTELLIGIBLE] yes, because every time you do\na method call you have to",
    "start": "3787716",
    "end": "3792990"
  },
  {
    "text": "basically go change everything\n[UNINTELLIGIBLE], put it back in memory, stack, and\nthen go do that.",
    "start": "3792990",
    "end": "3799750"
  },
  {
    "text": "I have a basically calling\n[UNINTELLIGIBLE] expensive part. OK, so if I'm doing a very\nsmall thing your calling",
    "start": "3799750",
    "end": "3806350"
  },
  {
    "text": "context might have a lot more\nthan overhead than what the procedure does, method does. What else?",
    "start": "3806350",
    "end": "3812050"
  },
  {
    "text": " What's a more subtle thing\nthat can happen? ",
    "start": "3812050",
    "end": "3824190"
  },
  {
    "text": "So if you're thinking more, I'm\na compiler guy so I think like compilers, what would the\ncompiler do at this point?",
    "start": "3824190",
    "end": "3831180"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Compiler\n[UNINTELLIGIBLE] oops, barrier, I have no idea\nwhat's happening in here.",
    "start": "3831180",
    "end": "3838650"
  },
  {
    "text": "I had retrieved this\nas just bit stop. I will do a bunch of things\nabove that, I will do a bunch",
    "start": "3838650",
    "end": "3844740"
  },
  {
    "text": "things below that. But I can't go through that kind\nof thing, so the compiler basically treats that as, I\ncan't touch that barrier.",
    "start": "3844740",
    "end": "3852090"
  },
  {
    "text": "And that [UNINTELLIGIBLE] means\nthe amount of stuff that the compiler can do is\n[UNINTELLIGIBLE].",
    "start": "3852090",
    "end": "3857380"
  },
  {
    "text": "So one way to do that\nis basically inline. On a max function, it's pretty\nsimple to inline.",
    "start": "3857380",
    "end": "3862920"
  },
  {
    "text": "Basically you can define a macro\nthat the CE front end",
    "start": "3862920",
    "end": "3868819"
  },
  {
    "text": "will go inline for you. So this is simple. Or you can define inline method\nin here and put it in",
    "start": "3868820",
    "end": "3877130"
  },
  {
    "text": "the same file, and then we will\ntell the compiler, look, go and try doing inline\nlistening, and by doing that",
    "start": "3877130",
    "end": "3883084"
  },
  {
    "text": "we are forcing the compiler, or\ntelling it the ability to inline, and they're not only\ngetting rid of the overhead of",
    "start": "3883084",
    "end": "3890050"
  },
  {
    "text": "the method calls, but also\nyou're letting the compiler a lot more opportunity to go and\ndo something interesting.",
    "start": "3890050",
    "end": "3895609"
  },
  {
    "text": " So here's something you'll\nfind in many",
    "start": "3895610",
    "end": "3904630"
  },
  {
    "text": "streaming type programs. What you do is you run through\na loop, reading through a",
    "start": "3904630",
    "end": "3909910"
  },
  {
    "text": "bunch of data, do\nsome processing and writing it back. And then you want to get the\ndata you wrote back, read it",
    "start": "3909910",
    "end": "3917369"
  },
  {
    "text": "again, do some processing\nand write it back. The problem in that this one\nis the first loop which",
    "start": "3917370",
    "end": "3923880"
  },
  {
    "text": "stretches through all data. So by the time I'm done with the\nfirst loop I have written",
    "start": "3923880",
    "end": "3929200"
  },
  {
    "text": "all the data and the thing I\nwrote early is probably all the way down in my\ncache hierarchy.",
    "start": "3929200",
    "end": "3936000"
  },
  {
    "text": "Because I wrote a huge amount\nand it doesn't count it in my cache so it goes down, down,\ndown, and the next guy has to read it all the way\nfrom bottom up.",
    "start": "3936000",
    "end": "3943410"
  },
  {
    "text": "So [UNINTELLIGIBLE] means instead of doing that what\nyou can do is run for a",
    "start": "3943410",
    "end": "3949390"
  },
  {
    "text": "small amount of data. So don't run the entire\ndata set. Run a small amount of data,\nwrite it into a buffer in the",
    "start": "3949390",
    "end": "3955170"
  },
  {
    "text": "middle that we know sit in the\ncache, and the disk guys picks up the buffer and finish it\nup and write it back.",
    "start": "3955170",
    "end": "3961690"
  },
  {
    "text": "So by keeping the data in the\nbuffers what they have done is between these two I actually\nhad some nice locality.",
    "start": "3961690",
    "end": "3967069"
  },
  {
    "text": "I can keep the data up. So as we go into memory systems\nand stuff like that these kind of patterns\ncome up a lot.",
    "start": "3967070",
    "end": "3972980"
  },
  {
    "text": " Ah ha. Tail recursion elimination.",
    "start": "3972980",
    "end": "3980220"
  },
  {
    "text": "So here there are many functions\nthat the last thing you do is call itself.",
    "start": "3980220",
    "end": "3989190"
  },
  {
    "text": "OK? This is pretty expensive because\nwhat normally happens is when you call a function you\nset up a calling contest,",
    "start": "3989190",
    "end": "3997240"
  },
  {
    "text": "you do all this context\n[UNINTELLIGIBLE] put things into the stack and\ngo, but you don't need to keep",
    "start": "3997240",
    "end": "4002400"
  },
  {
    "text": "instead because you're basically\ndone with the previous guy. You're just calling just to\ngo create another stack.",
    "start": "4002400",
    "end": "4008190"
  },
  {
    "text": "In a lot of these cases you can\nreformulate the problem into nice loop that has\nno function calls.",
    "start": "4008190",
    "end": "4015150"
  },
  {
    "text": "So, in here, when you're doing\nfactorial, you can actually formulate the factorial in a way\nthat you don't have to do",
    "start": "4015150",
    "end": "4021355"
  },
  {
    "text": "a function call. So a lot of times if you end\nup in a situation that the last thing you do in some part\nis the call itself and if",
    "start": "4021355",
    "end": "4030740"
  },
  {
    "text": "you're not doing anything\nafterwards, you can always end up in a situation where you\ndon't know how do that, you can actually convert it into\n[UNINTELLIGIBLE] loop.",
    "start": "4030740",
    "end": "4037760"
  },
  {
    "text": "And by doing this I got rid of\nall my calling overhead and stuff that I'm just starting\na nice tight loop.",
    "start": "4037760",
    "end": "4044710"
  },
  {
    "text": "OK? So if you have patterns that\nlook like that you can think, OK, look, this is nice,\nI thought through",
    "start": "4044710",
    "end": "4050430"
  },
  {
    "text": "[UNINTELLIGIBLE]. I got this there. But now I can [UNINTELLIGIBLE]\ntransform it to more iterative",
    "start": "4050430",
    "end": "4055740"
  },
  {
    "text": "way of executing. In many cases you will find\na way of doing that. ",
    "start": "4055740",
    "end": "4062930"
  },
  {
    "text": "OK, then there are a bunch\nof expression rules. So a lot of times you have this\ncomputation that if you",
    "start": "4062930",
    "end": "4069660"
  },
  {
    "text": "think carefully you can let\nthe preprocessor do in something like calculate\nsomething like that, if I know what [UNINTELLIGIBLE] are, stuff\nlike that, I can just",
    "start": "4069660",
    "end": "4076510"
  },
  {
    "text": "put it in as a constant and\nvoila I don't even have to pay any cost to compute it because\nby the time it's compiled all",
    "start": "4076510",
    "end": "4083940"
  },
  {
    "text": "the computing is done. And there are a lot of good\ncases you can just get rid of",
    "start": "4083940",
    "end": "4089880"
  },
  {
    "text": "work by giving it to\nthe preprocessor. ",
    "start": "4089880",
    "end": "4100620"
  },
  {
    "text": "I'm just calling sin(a) and\nsin(a) twice in here, and the sin(a) squared I just basically,\nthe compiler",
    "start": "4100620",
    "end": "4107960"
  },
  {
    "text": "probably won't know that the\nsine every time you give it the same number, you give it\nthe same same input, it's a",
    "start": "4107960",
    "end": "4113259"
  },
  {
    "text": "function, I think the compiler\ndoesn't know that, and this is something you probably have\nto do for the compiler.",
    "start": "4113260",
    "end": "4118880"
  },
  {
    "text": "Especially when you know the\nfunction has no side effects. This is a little bit more funky,\nso assume I do two",
    "start": "4118880",
    "end": "4126580"
  },
  {
    "text": "similar computations, you might\nwant to do them together as a single computation that\ngives the compiler more",
    "start": "4126580",
    "end": "4132899"
  },
  {
    "text": "opportunity, but that means you\nrelay the function like a sine, cosine, s of 1 function. It's a little bit of funky thing\nthat in this list of",
    "start": "4132899",
    "end": "4140710"
  },
  {
    "text": "interesting things to do. But I put it there because there\nmight be cases you might find that's interesting, like if\nyou're doing taking min and",
    "start": "4140710",
    "end": "4147399"
  },
  {
    "text": "max, it might be calling\nmin and max separated. You might be able to\ncall it together.",
    "start": "4147399",
    "end": "4154439"
  },
  {
    "text": "So the last set of rules\nis parallelism rules. Of course, we are going to visit\nparallelism like crazy",
    "start": "4154439",
    "end": "4161460"
  },
  {
    "text": "in this class, but today we will\njust go through some very high level stuff to give you a\nlittle bit of feel for what",
    "start": "4161460",
    "end": "4168089"
  },
  {
    "text": "can be done.  So I have this rule,\nthis program.",
    "start": "4168090",
    "end": "4174799"
  },
  {
    "text": "So what's wrong with\nthis program? Why would this program\nrun very slow?",
    "start": "4174800",
    "end": "4180989"
  },
  {
    "text": "Can anybody tell me? ",
    "start": "4180990",
    "end": "4186750"
  },
  {
    "text": "Why can't, in this program, I\ncan't do the full utilization of my machine.",
    "start": "4186750",
    "end": "4193830"
  },
  {
    "text": "The problem in this program is\nevery iteration until this",
    "start": "4193830",
    "end": "4200110"
  },
  {
    "text": "condition is calculated I can't\nstart calculating this. And so every iteration I had\nof it, this is finished,",
    "start": "4200110",
    "end": "4206250"
  },
  {
    "text": "condition calculated,\nand [UNINTELLIGIBLE] and new calculate that. And once that's done, you go\nto the next iteration. We go to next iteration.",
    "start": "4206250",
    "end": "4213310"
  },
  {
    "text": "So by doing this I can't\ndo too much work. On the other hand, if I can\nunroll the loop like two times",
    "start": "4213310",
    "end": "4220120"
  },
  {
    "text": "and have two different\nconditions, now I can do this condition and these conditions,\nand these two can",
    "start": "4220120",
    "end": "4226550"
  },
  {
    "text": "be done in parallel and when\nthese two get resolved I can do these two operations. So instead of doing xmax, I'm\noperating two different",
    "start": "4226550",
    "end": "4233760"
  },
  {
    "text": "variables and at the end\nI can resolve that. So what I'm doing is\nI'm calculating two things in there.",
    "start": "4233760",
    "end": "4239140"
  },
  {
    "text": "And they go to four things,\nwhatever, to keep the machine busy. And each of them can be\ncalculated independently.",
    "start": "4239140",
    "end": "4244916"
  },
  {
    "text": "OK, so I can get parallelism\nand at the end of the day I can do that to help when I'm\nsumming something or whatever.",
    "start": "4244916",
    "end": "4251699"
  },
  {
    "text": "Do you see this? So to get the six instruction\nissued at a time, something",
    "start": "4251700",
    "end": "4258510"
  },
  {
    "text": "like that will give you more\nabilities because there's more things that can run\nin parallel. So most of the time it will be\ngood to see whether you can",
    "start": "4258510",
    "end": "4265430"
  },
  {
    "text": "eliminate these kind of chains\nlike here xmax is a chain because xmax-- until the previous is calculated\nI can't calculate",
    "start": "4265430",
    "end": "4271550"
  },
  {
    "text": "the next one, until that so I\nhave this chain that until this is calculated I can't do\nthis, until this is done I",
    "start": "4271550",
    "end": "4279020"
  },
  {
    "text": "can't do the next iteration, so\nxmax is kind of keeping me very sequential. By doing that I have two\nthings I can calculate.",
    "start": "4279020",
    "end": "4287690"
  },
  {
    "text": "So other interesting things is\nif you are doing through this kind of data structure\nlink list.",
    "start": "4287690",
    "end": "4295970"
  },
  {
    "text": "Sometimes if you have I believe\nthe bypass have another point that points couple\nof things ahead then I",
    "start": "4295970",
    "end": "4303139"
  },
  {
    "text": "can keep multiple of\nthem going on. So I can do sort of waiting\nfor the next one I can basically switch two elements,\ndo that so the next one I can",
    "start": "4303140",
    "end": "4311290"
  },
  {
    "text": "get some parallelism in here so\nI can do things like that. So to get some basic parallel\nperformance going on.",
    "start": "4311290",
    "end": "4320930"
  },
  {
    "text": "And this is basic kind of a\nlittle bit of a data structure augmentation. You add additional data\nmake it run faster.",
    "start": "4320930",
    "end": "4327740"
  },
  {
    "text": "And you want to get all\nyour loops vectorized.",
    "start": "4327740",
    "end": "4334320"
  },
  {
    "text": "That means you want to run\nthings like assembly instruction. If you're using 32 bits, you\nwant to put a couple of them",
    "start": "4334320",
    "end": "4340770"
  },
  {
    "text": "together, run in\none SIMD unit. But I don't want any of\nyou guys to go write",
    "start": "4340770",
    "end": "4347989"
  },
  {
    "text": "assembly to do this. It's going to be a big pain to\nwrite all the SIMD assembly. We are not talking about\nassembly but most the",
    "start": "4347990",
    "end": "4354560"
  },
  {
    "text": "compiler, [UNINTELLIGIBLE]\ncompiler is somewhat good at doing it. So what this means is you're\nkind of really nudge the",
    "start": "4354560",
    "end": "4362440"
  },
  {
    "text": "compiler, look at bunch of\ncompiler frags to get the compiler to do it. Sometimes it's--",
    "start": "4362440",
    "end": "4369100"
  },
  {
    "text": "when we go more into it, we'll\nfigure out how we can do it looking at given the right flags\nto compiler, sometimes",
    "start": "4369100",
    "end": "4376750"
  },
  {
    "text": "chaining the program a\nlittle bit makes it easier for the compiler. So sometimes just wrestling with\nthe compiler, that's much",
    "start": "4376750",
    "end": "4382850"
  },
  {
    "text": "more easier, believe me, than\ntrying to do it by yourself. By doing that you can get some\ninteresting performance.",
    "start": "4382850",
    "end": "4389850"
  },
  {
    "text": "And we will talk a lot more\nabout this coarse grain parallelism and we have a bunch\nof lectures on that.",
    "start": "4389850",
    "end": "4398420"
  },
  {
    "text": "Trying to figure out how to get\nmulticores, each core do something parallel, and get\nall your [UNINTELLIGIBLE]",
    "start": "4398420",
    "end": "4405489"
  },
  {
    "text": "in the machine working\nfor at a given time then only one guy. And so here's an interesting\nsituation.",
    "start": "4405490",
    "end": "4414310"
  },
  {
    "text": "So I have this problem here. Can I run this parallel?",
    "start": "4414310",
    "end": "4420000"
  },
  {
    "text": "So what I'm doing is I'm doing\nthese two loops and I'm adding all the elements of\nan array to total.",
    "start": "4420000",
    "end": "4426775"
  },
  {
    "text": "Is this parallel? Can I run anything or any of\nthese things parallel? ",
    "start": "4426775",
    "end": "4446210"
  },
  {
    "text": "Somebody says, yes, no,\nwhatever, what do you think?",
    "start": "4446210",
    "end": "4451431"
  },
  {
    "text": "Take a stand.  OK, what do you think? AUDIENCE: I think yes.",
    "start": "4451431",
    "end": "4457800"
  },
  {
    "text": "PROFESSOR: Somebody\nsays yes, good. Yes, takers, no takers.",
    "start": "4457800",
    "end": "4462806"
  },
  {
    "text": "Yes, everybody says yes. [UNINTELLIGIBLE] is parallel. But look at here, what happens\nis previous total is needed to",
    "start": "4462806",
    "end": "4472270"
  },
  {
    "text": "calculate the next total, so how\ncan I run this parallel? AUDIENCE: [INAUDIBLE] ",
    "start": "4472270",
    "end": "4480385"
  },
  {
    "text": "for loop jumps every two. PROFESSOR: OK, so she's somewhat\nonto it, so let me",
    "start": "4480385",
    "end": "4487790"
  },
  {
    "text": "show you what we can do. One thing you can do is instead\nof calculating one",
    "start": "4487790",
    "end": "4493570"
  },
  {
    "text": "total for each basically\ncolumn, you can calculate its own total.",
    "start": "4493570",
    "end": "4501400"
  },
  {
    "text": "OK? So what happens is so for this\ni's row, j's column.",
    "start": "4501400",
    "end": "4508750"
  },
  {
    "text": "So for each row, so each row\ngets a different total, a temp",
    "start": "4508750",
    "end": "4516080"
  },
  {
    "text": "total, and so what that means\nis you can calculate all the columns total separately.",
    "start": "4516080",
    "end": "4521520"
  },
  {
    "text": "You can total all the columns,\nand then total up those values to get the full total.",
    "start": "4521520",
    "end": "4527730"
  },
  {
    "text": "So totalling up columns can be\ndone parallel because now all of these things can be done\nparallel because it's",
    "start": "4527730",
    "end": "4534440"
  },
  {
    "text": "totalling up two different,\nmultiple different values. So it's kind of what she said\nbut you do it for each row",
    "start": "4534440",
    "end": "4541590"
  },
  {
    "text": "separately. And so here's something, you\nmade the program a little bit more complicated. Actually for a sequence it run a\nlittle bit slower but at the",
    "start": "4541590",
    "end": "4550300"
  },
  {
    "text": "end of the day you actually\nget the program parallelizable. So a lot of times when you're\nparallelizing is to also",
    "start": "4550300",
    "end": "4556570"
  },
  {
    "text": "looking at that algorithm little\nbit changes to the program that at the beginning\nmight look like you're slowing",
    "start": "4556570",
    "end": "4561980"
  },
  {
    "text": "down the program but ending\nup getting good parallel performance. So a lot of parallelism\nlooks like this.",
    "start": "4561980",
    "end": "4568440"
  },
  {
    "text": "So here's the entire list of\nthings we talked about. It's out there so you can go\nlook at them and see if you",
    "start": "4568440",
    "end": "4576560"
  },
  {
    "text": "understand them better. And I'm leaving you with this\nexample that I'm not going to have time to go through. which\nis my program of a traveling",
    "start": "4576560",
    "end": "4585590"
  },
  {
    "text": "salesman problem. So what you're doing is you're\nlooking at a way for a",
    "start": "4585590",
    "end": "4590760"
  },
  {
    "text": "tradesman to travel to\nall of the city's with a minimum cost. Of course the minimum shortest\nthing is exponential algorithm",
    "start": "4590760",
    "end": "4598100"
  },
  {
    "text": "so you don't do that. There's a good heuristic, that\nthe greedy heuristic every",
    "start": "4598100",
    "end": "4603735"
  },
  {
    "text": "time you go to the city you go\nto the cheapest city that's not visited and you just jump\naround and that's seem to be",
    "start": "4603735",
    "end": "4609170"
  },
  {
    "text": "pretty good heuristic. And so I call this up, and I\nwill go to the end and then",
    "start": "4609170",
    "end": "4616670"
  },
  {
    "text": "just finish it up. Oops, I went too far. ",
    "start": "4616670",
    "end": "4625400"
  },
  {
    "text": "So what I did was I have eight\ndifferent stages basically, each stage I did some changes\nand then I got this program to",
    "start": "4625400",
    "end": "4634765"
  },
  {
    "text": "run about five times faster\nthan from where I started. So you will see at each\nstage what I did.",
    "start": "4634765",
    "end": "4641810"
  },
  {
    "text": "So this is basically out of the\nmenu of things I showed you I found an instance I can\ndo and in this program I got",
    "start": "4641810",
    "end": "4652000"
  },
  {
    "text": "five times faster. This is more normal than the\n300 [UNINTELLIGIBLE] I got [UNINTELLIGIBLE]",
    "start": "4652000",
    "end": "4657170"
  },
  {
    "text": "and that's a real extreme\ncase, but enjoy looking at this code.",
    "start": "4657170",
    "end": "4662530"
  },
  {
    "start": "4662530",
    "end": "4663658"
  }
]