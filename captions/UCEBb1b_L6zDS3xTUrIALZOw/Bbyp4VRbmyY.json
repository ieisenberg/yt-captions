[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "6958"
  },
  {
    "start": "6958",
    "end": "16420"
  },
  {
    "text": "ANA BELL: All right, so let's\nget started on today's lecture. So today we're going\nto be doing one",
    "start": "16420",
    "end": "23859"
  },
  {
    "text": "of two lectures on the\ntopic of recursion. And you may or may not\nhave heard of recursion.",
    "start": "23860",
    "end": "28910"
  },
  {
    "text": "It's a programming technique and\na way to algorithmically solve problems.",
    "start": "28910",
    "end": "35720"
  },
  {
    "text": "It's not something\nthat's going to come easy because it's going\nto force our brain",
    "start": "35720",
    "end": "42609"
  },
  {
    "text": "to think about problems\nthat we've seen in a completely different way.",
    "start": "42610",
    "end": "48130"
  },
  {
    "text": "So you don't have to use\nrecursion if you don't want to, but there will be problems\nwhere the idea of recursion",
    "start": "48130",
    "end": "54820"
  },
  {
    "text": "and applying-- or writing recursive\ncode is going to come a lot more\nnaturally than writing code",
    "start": "54820",
    "end": "62200"
  },
  {
    "text": "that we have been so far. But I'm just warning\nyou, it's going to take a little bit of\nforgetting everything",
    "start": "62200",
    "end": "67870"
  },
  {
    "text": "we've learned about\nloops and things like that to train our\nbrain to think recursively",
    "start": "67870",
    "end": "73180"
  },
  {
    "text": "for the next two lectures. To help you, we will have\nan interactive portion of today's lecture.",
    "start": "73180",
    "end": "79170"
  },
  {
    "text": "So think about whether you\nwant to come up on stage, or whatever this is,\nthe front, and be",
    "start": "79170",
    "end": "85039"
  },
  {
    "text": "a part of the interaction. You'll be forever immortalized\non the OpenCourseWare--",
    "start": "85040",
    "end": "93140"
  },
  {
    "text": "awesome, I love it-- on\nthe OpenCourseWare videos.",
    "start": "93140",
    "end": "98390"
  },
  {
    "text": "All right, so let's think\nabout iterative algorithms",
    "start": "98390",
    "end": "105770"
  },
  {
    "text": "that we've seen so far. So iterative algorithm\nbasically means we are writing code that\nhas a loop within it,",
    "start": "105770",
    "end": "112219"
  },
  {
    "text": "so either a for loop\nor a while loop. Writing code with these\nfor loops or while loops",
    "start": "112220",
    "end": "117290"
  },
  {
    "text": "lead to iterative\nalgorithms, so things that do some task\nfor some repetition.",
    "start": "117290",
    "end": "125370"
  },
  {
    "text": "So the idea of\niterative algorithm is that there are some\nvariables that capture",
    "start": "125370",
    "end": "131420"
  },
  {
    "text": "the state of the computation. So each time through the\nloop, these variables will change their\nvalue, essentially",
    "start": "131420",
    "end": "137990"
  },
  {
    "text": "capturing what the values\nare at each step in the loop. So when we're writing\nthese iterative algorithms,",
    "start": "137990",
    "end": "143990"
  },
  {
    "text": "we basically think\nabout, what is something that's changing\neach time through the loop? Like we keep a running sum,\nthat's the easiest example.",
    "start": "143990",
    "end": "152239"
  },
  {
    "text": "What is a variable\nthat's changing each time through the loop, kind\nof like a counter that",
    "start": "152240",
    "end": "158270"
  },
  {
    "text": "keeps track of how many times\nwe've been through a loop? When do you stop? So for for loops, you stop after\nyou've exhausted a sequence.",
    "start": "158270",
    "end": "165440"
  },
  {
    "text": "For while loops, you\nstop when you have a condition that becomes false. And then at the end of the loop,\nyou have some sort of result",
    "start": "165440",
    "end": "173180"
  },
  {
    "text": "that you've been storing\nand accumulating or changing each time through the loop. So that's an\niterative algorithm.",
    "start": "173180",
    "end": "179240"
  },
  {
    "text": "And we've been working\nwith these a lot. So to show you--",
    "start": "179240",
    "end": "184970"
  },
  {
    "text": "we're going to go through the\nnext few slides showing you an iterative algorithm\nto do multiplication.",
    "start": "184970",
    "end": "190040"
  },
  {
    "text": "It's going to be\nvery, very simple. But we're also then\nafter going to look",
    "start": "190040",
    "end": "195350"
  },
  {
    "text": "at the same problem, which\nis doing multiplication, but in the context of recursion.",
    "start": "195350",
    "end": "201560"
  },
  {
    "text": "And hopefully that\ngives you a sense for how we think about the\nexact same problem we're trying to solve, multiplying\ntwo numbers together,",
    "start": "201560",
    "end": "208819"
  },
  {
    "text": "in a completely different way. So this is not the function that\nI want to write with iteration.",
    "start": "208820",
    "end": "214390"
  },
  {
    "text": "I don't want to create a\nfunction named mult and then return a*b.",
    "start": "214390",
    "end": "219490"
  },
  {
    "text": "I don't want to use\nthe built-in function. I want to assume\nthat I don't know how to do a star, a multiplication.",
    "start": "219490",
    "end": "226420"
  },
  {
    "text": "And so instead,\nwhat I'm going to do is I'm going to rely on-- let's\nsay I know how to do addition.",
    "start": "226420",
    "end": "232660"
  },
  {
    "text": "I'm going to rely on\nthe idea of addition to actually write my\nmultiplication function.",
    "start": "232660",
    "end": "239409"
  },
  {
    "text": "So let's think about how to\nmake multiplication iterative. We can have a loop that\nadds a to itself b times.",
    "start": "239410",
    "end": "250380"
  },
  {
    "text": "That is the definition\nof multiplication. So let's write a function that\ndoes this using a for loop.",
    "start": "250380",
    "end": "256729"
  },
  {
    "text": "Then we'll write it\nusing a while loop. With a for loop, we're going to\nwrite this iterative algorithm.",
    "start": "256730",
    "end": "263250"
  },
  {
    "text": "It's capturing the state\nof the computation, just like we said we should. So the for loop will iterate--\nwill have my range of values,",
    "start": "263250",
    "end": "272669"
  },
  {
    "text": "being from 0 to b. So we're going to repeat\nthis loop b times. The variable total is capturing\nmy state of the computation.",
    "start": "272670",
    "end": "281880"
  },
  {
    "text": "It's keeping track of what\nthe total is at each step through my loop. At the end of the loop,\nI return the total.",
    "start": "281880",
    "end": "289710"
  },
  {
    "text": "So very, very simple\niterative function here. Now, let's think about\nanother iterative solution.",
    "start": "289710",
    "end": "296070"
  },
  {
    "text": "Instead of keeping\na loop variable b that goes from 0\nall the way up to b--",
    "start": "296070",
    "end": "303137"
  },
  {
    "text": "or what was in my loop variable? N, I think. Yeah, instead of\nkeeping a loop variable n that goes from 0 to b,\nlet's work our way backward.",
    "start": "303137",
    "end": "309640"
  },
  {
    "text": "And this time, let's use\na while loop just for fun. Let's say that I'm going to\nstart at b and count down to 0.",
    "start": "309640",
    "end": "316860"
  },
  {
    "text": "So again, going and\nrepeating some task b times.",
    "start": "316860",
    "end": "322400"
  },
  {
    "text": "So what I'm going\nto do is I'm going to have some counter that starts\nat b and decreases down to 0.",
    "start": "322400",
    "end": "329870"
  },
  {
    "text": "Again, within my loop, I have\nto keep track of the result. So my total in the\nprevious code is now",
    "start": "329870",
    "end": "336169"
  },
  {
    "text": "being called result\nin this code. And so what I'm going\nto do is my iteration will start right at 0.",
    "start": "336170",
    "end": "342710"
  },
  {
    "text": "And then I'm going to keep\nadding a to itself b times. So the code looks like this.",
    "start": "342710",
    "end": "349900"
  },
  {
    "text": "I've got my while loop this\ntime instead of a for loop. I'm going to start out\nwith knowing what b is.",
    "start": "349900",
    "end": "355350"
  },
  {
    "text": "And I'm going to decrease b by\none each time through the loop. So here I've got b\nequals b minus 1.",
    "start": "355350",
    "end": "362590"
  },
  {
    "text": "So that's capturing the state of\nthe counter at each iteration. The result, just like the\ntotal in the previous slide,",
    "start": "362590",
    "end": "369190"
  },
  {
    "text": "is capturing the state\nof my sum at each time through the iteration. And at the end, I return\nresult. So hopefully",
    "start": "369190",
    "end": "376270"
  },
  {
    "text": "very simple, very\nreview code here.",
    "start": "376270",
    "end": "381560"
  },
  {
    "text": "But now, let's look at the\ncode in a recursive sense.",
    "start": "381560",
    "end": "386910"
  },
  {
    "text": "So here, let's not\nlook at the code yet. But let's think about is there\nsome thing that we're repeating",
    "start": "386910",
    "end": "394460"
  },
  {
    "text": "over and over and over again? If we recognize it, we\ncan think recursively.",
    "start": "394460",
    "end": "399830"
  },
  {
    "text": "OK, so let's try to figure\nout this recursive pattern. So I work best with examples,\nlike actual numbers.",
    "start": "399830",
    "end": "407510"
  },
  {
    "text": "So instead of using an abstract\na and b, let's use a is 5 and b is 4 as an example.",
    "start": "407510",
    "end": "414470"
  },
  {
    "text": "So let's say I want to use\nthe star operator-- that's basically the function I'm\ntrying to implement-- the star",
    "start": "414470",
    "end": "420280"
  },
  {
    "text": "operator between 5 and 4. So in the iterative sense,\nwe said that's 5 plus 5",
    "start": "420280",
    "end": "426380"
  },
  {
    "text": "plus 5 plus 5,\nadding 5 four times. The idea of recursion\nis that we're",
    "start": "426380",
    "end": "432860"
  },
  {
    "text": "trying to take our\noriginal problem, which is using the star operator\nbetween two numbers,",
    "start": "432860",
    "end": "438409"
  },
  {
    "text": "and try to solve a\nvery similar problem, if not the same, but in\na slightly changed way.",
    "start": "438410",
    "end": "447950"
  },
  {
    "text": "So instead of saying I'm\ngoing to multiply 5 by 4, what I will do is\nrecognize that 5 times 4,",
    "start": "447950",
    "end": "456130"
  },
  {
    "text": "which is my original problem,\ncan be rewritten by extracting",
    "start": "456130",
    "end": "462140"
  },
  {
    "text": "out one of my 5's. So I'm going to take a 5\nout and add it to 5 times 3.",
    "start": "462140",
    "end": "470860"
  },
  {
    "text": "So this is my recursive pattern. I'm using the star operator\nbetween 5 and some number.",
    "start": "470860",
    "end": "477050"
  },
  {
    "text": "But if I extract a 5 out, I can\nuse the star operator between 5",
    "start": "477050",
    "end": "482949"
  },
  {
    "text": "and a slightly smaller\nnumber, 1 less than 4. ",
    "start": "482950",
    "end": "489470"
  },
  {
    "text": "Well, what if I do--\nwhat about 5 times 3? Can I do the same thing again?",
    "start": "489470",
    "end": "495740"
  },
  {
    "text": "I can, right? For 5 times 3, I can\nagain notice that I can extract the 5 out again.",
    "start": "495740",
    "end": "501409"
  },
  {
    "text": "And I have 5 plus 5 times 2. And then I can do the same\nthing again to figure out what 5",
    "start": "501410",
    "end": "508040"
  },
  {
    "text": "times 2 is, I can again extract\na 5 out and be left with 5 times 1 or 5*1.",
    "start": "508040",
    "end": "515969"
  },
  {
    "text": "And so notice the\nthing inside the box is basically me solving\nmy original problem, which",
    "start": "515970",
    "end": "521429"
  },
  {
    "text": "is using the star operator\nbetween 5 and some number. But that number is changing\neach time on each line.",
    "start": "521429",
    "end": "530990"
  },
  {
    "text": "At some point, I can\nsay this problem is so easy that I know the answer. So 5*1, so a number\nmultiplied with one,",
    "start": "530990",
    "end": "538850"
  },
  {
    "text": "is just the number itself. And so at that\npoint, I can say I don't need to continue dividing\nmy problem into smaller",
    "start": "538850",
    "end": "545210"
  },
  {
    "text": "and smaller pieces. So just to bring the\npoint home, let's use parentheses to illustrate which\npieces I'm replacing where.",
    "start": "545210",
    "end": "552770"
  },
  {
    "text": "So I've got my original problem,\napplying the star operator in the multiplication\non 5 and 4.",
    "start": "552770",
    "end": "560240"
  },
  {
    "text": "I extract the 5 out, and I\nrecognize that I can have 5 plus and then solving 5*3.",
    "start": "560240",
    "end": "566600"
  },
  {
    "text": " I need to have some\ntrust here, right?",
    "start": "566600",
    "end": "572769"
  },
  {
    "text": "I don't know what 5*3 is. But if I decompose that\nproblem in the exact same way,",
    "start": "572770",
    "end": "578320"
  },
  {
    "text": "I can extract the 5 out\nof that and add it to 5*2.",
    "start": "578320",
    "end": "586670"
  },
  {
    "text": "So the thing in the\nboxes are equivalent. And then, again, 5*2, I'm going\nto recognize this is the same",
    "start": "586670",
    "end": "592973"
  },
  {
    "text": "problem I've been\ntrying to solve. Let's apply the\nsame solution, which is to extract a 5 out and add\nit to the multiplication of 5",
    "start": "592973",
    "end": "601115"
  },
  {
    "text": "star one less. So again, the two\nboxes are equivalent.",
    "start": "601115",
    "end": "607060"
  },
  {
    "text": "So this idea here, where we're\nrecognizing the same problem and kind of dividing it,\ndividing it, dividing it, having this trust\nthat at some point",
    "start": "607060",
    "end": "615759"
  },
  {
    "text": "we're going to divide\nit so much that we've reached a fundamental\nfact that we can solve",
    "start": "615760",
    "end": "621790"
  },
  {
    "text": "is this divide step. So we're going to divide it\nall the way up to-- all the way",
    "start": "621790",
    "end": "627579"
  },
  {
    "text": "down here, where\nI've got 5 plus 5*1. At this point, I can say,\nwell, 5*1 is going to be 5.",
    "start": "627580",
    "end": "636009"
  },
  {
    "text": "This is a basic fact\nthat I can just solve. I don't need to divide\nthis problem any further.",
    "start": "636010",
    "end": "642910"
  },
  {
    "text": "So once I solve this\nfact, I can start building back up my answer. And I can start\npassing the answer back",
    "start": "642910",
    "end": "649710"
  },
  {
    "text": "up the chain of\nmultiplication calls.",
    "start": "649710",
    "end": "655560"
  },
  {
    "text": "So if I'm at this step here,\nand I figured out that this is 5*1-- this 5*1 is equal to 5, I\ncan just replace it with a 5.",
    "start": "655560",
    "end": "664060"
  },
  {
    "text": "And then I can build up\nthe solution to this 5*2 because now 5*2 is\njust five plus 5.",
    "start": "664060",
    "end": "673920"
  },
  {
    "text": "So this is going to be 10. It's just simple addition. There's no more multiplication,\nwhich is the thing",
    "start": "673920",
    "end": "680790"
  },
  {
    "text": "that we were trying to avoid. So then the 5*2 gets\nreplaced with 10. And I'm still building back\nup my solution until I get",
    "start": "680790",
    "end": "688780"
  },
  {
    "text": "to the 5*4. So I was trying to\nfigure out what 5*3 is,",
    "start": "688780",
    "end": "694214"
  },
  {
    "text": "but before I could do that,\nI had to solve the rest of the two lines beneath it. But now I can finally solve it.",
    "start": "694215",
    "end": "700060"
  },
  {
    "text": "It's just 5 plus 10. That's the similar problem\nI was trying to solve. So I can replace\nthe 5*3 with 15.",
    "start": "700060",
    "end": "708570"
  },
  {
    "text": "And finally, my original problem\nwas trying to figure out 5*4, and now I can finally solve it\nbecause I've finally built back",
    "start": "708570",
    "end": "715740"
  },
  {
    "text": "up my solution as 5 plus 15. ",
    "start": "715740",
    "end": "720820"
  },
  {
    "text": "Any questions about these steps? It should be pretty\nstraightforward. I know it's a weird\nroundabout way of figuring out",
    "start": "720820",
    "end": "728470"
  },
  {
    "text": "what the answer is. But what I'm trying\nto get at is trying to recognize the problem\nthat we're trying to solve",
    "start": "728470",
    "end": "733780"
  },
  {
    "text": "and then solving a very similar\nproblem just slightly changed. In this case, we're\nmultiplying 5 star",
    "start": "733780",
    "end": "741190"
  },
  {
    "text": "one less than what we were\njust trying to figure out. So in terms of the recursion\nfor this particular problem,",
    "start": "741190",
    "end": "748450"
  },
  {
    "text": "multiplying a with b, we\nrecognize that a*b is going to be a plus a plus\na plus a b times.",
    "start": "748450",
    "end": "756430"
  },
  {
    "text": "If we extract an a\nout, just like when we extracted the 5 out and\nadded it to something else,",
    "start": "756430",
    "end": "762760"
  },
  {
    "text": "we'll recognize that that's\njust a plus a plus a plus a plus a plus a b minus 1 times.",
    "start": "762760",
    "end": "770490"
  },
  {
    "text": "OK, well, that a plus a\nplus a b minus 1 times is just our original\nproblem, just",
    "start": "770490",
    "end": "777860"
  },
  {
    "text": "multiplying a with b minus 1. So this is my recursive step.",
    "start": "777860",
    "end": "784250"
  },
  {
    "text": "We recognize that a*b is\nequal to a plus a*b minus 1. So I'm using the\nsame operation I'm",
    "start": "784250",
    "end": "791180"
  },
  {
    "text": "trying to find here down here\nin my quote, unquote \"solution.\"",
    "start": "791180",
    "end": "798320"
  },
  {
    "text": "But this is not the\nend of recursion, because if I just had this\nas my definition, then",
    "start": "798320",
    "end": "805610"
  },
  {
    "text": "I would have infinite recursion. I don't have a way to stop. And so this recursive\nstep, in conjunction",
    "start": "805610",
    "end": "811520"
  },
  {
    "text": "with a base case, something\nthat we know fundamentally about the star operator, is\ngoing to give us our solution.",
    "start": "811520",
    "end": "820110"
  },
  {
    "text": "So we knew on the previous\nslide when we multiply a with 1, we just get back a.",
    "start": "820110",
    "end": "825589"
  },
  {
    "text": "So our base case,\nvery simple case of multiplication between a and\nb, is going to be when b is 1.",
    "start": "825590",
    "end": "833450"
  },
  {
    "text": "And that's going to be\na times b is equal to a. So these might look like\nthe mathematical definitions",
    "start": "833450",
    "end": "840400"
  },
  {
    "text": "that you might come up\nwith in a math class. And we have them right here.",
    "start": "840400",
    "end": "845470"
  },
  {
    "text": "So if b is not\nequal to 1, a times b is a plus a times b minus 1. And then the base case\nis when b is equal to 1,",
    "start": "845470",
    "end": "853450"
  },
  {
    "text": "a times b is equal to a. So with these two\nlines, we can actually",
    "start": "853450",
    "end": "859350"
  },
  {
    "text": "come up with the\ncode, the programming version of this function.",
    "start": "859350",
    "end": "867530"
  },
  {
    "text": "So here we're creating a\nfunction named mult_recur.",
    "start": "867530",
    "end": "872540"
  },
  {
    "text": "And its parameters are\ngoing to be a and b. So I'm multiplying a with b.",
    "start": "872540",
    "end": "878020"
  },
  {
    "text": "And I have to encode\nthese two cases, when b is 1 and otherwise.",
    "start": "878020",
    "end": "884240"
  },
  {
    "text": "So we usually start\nwith the base case. It's the simplest\nto think about. So when b is 1, a\ntimes b is equal to a.",
    "start": "884240",
    "end": "891700"
  },
  {
    "text": "So if b is equal to 1,\nthen what is a times b? It's just a, right?",
    "start": "891700",
    "end": "897550"
  },
  {
    "text": "So the function can just\nimmediately return a.",
    "start": "897550",
    "end": "903610"
  },
  {
    "text": "So that's our base case. Else, this is going to\nbe our recursive step.",
    "start": "903610",
    "end": "909079"
  },
  {
    "text": "We're not going to return\na, but we will return this, a plus a*b minus 1.",
    "start": "909080",
    "end": "916280"
  },
  {
    "text": "Well, the a is just a plus\nand this, the star operator",
    "start": "916280",
    "end": "921770"
  },
  {
    "text": "between a and b minus 1,\nis just the function again. ",
    "start": "921770",
    "end": "929459"
  },
  {
    "text": "Isn't that really cool? We're using the function name\nin the body of this function",
    "start": "929460",
    "end": "935820"
  },
  {
    "text": "that we're defining. And it's not a problem\nbecause the parameter",
    "start": "935820",
    "end": "941410"
  },
  {
    "text": "to the one at the bottom in\nthe recursive step is changing. I'm not calling mult_recur\nwith a, b again.",
    "start": "941410",
    "end": "948850"
  },
  {
    "text": "That would be very silly\nof me because that would lead to infinite recursion. I'm not making any progress\ntowards a base case.",
    "start": "948850",
    "end": "955120"
  },
  {
    "text": "But I am calling\nit with b minus 1. So this function will just\nkeep calling mult_recur",
    "start": "955120",
    "end": "962130"
  },
  {
    "text": "with a, with b, b minus\n1, b minus 2, b minus 3, and so on, until\nit gets to b is 1. And then it'll build back\nup the solution, just",
    "start": "962130",
    "end": "969030"
  },
  {
    "text": "like we had in the slides\nwith all the parentheses that we were replacing. OK, so let's step\nthrough the Python Tutor,",
    "start": "969030",
    "end": "976690"
  },
  {
    "text": "and I will show\nyou how it actually looks when we make all\nthese function calls. And then we'll do\nanother example.",
    "start": "976690",
    "end": "984190"
  },
  {
    "text": "So here I've got\nmult_recur with a is-- I think I ran it with 5 and\n4, just like the one we've",
    "start": "984190",
    "end": "991950"
  },
  {
    "text": "been looking at. So this is going to\nbe my main function. It makes a function\ncall to mult_recur--",
    "start": "991950",
    "end": "997920"
  },
  {
    "text": "[COUGHS] oh, excuse me-- 5, 4. So my a is 5, and my b is 4.",
    "start": "997920",
    "end": "1005390"
  },
  {
    "text": "This little blue thing here\nis one function environment. Like when I draw boxes on\nmy slides that are orange,",
    "start": "1005390",
    "end": "1012380"
  },
  {
    "text": "they do them in blue.  OK, now, in this function\ncall, what do we do?",
    "start": "1012380",
    "end": "1020060"
  },
  {
    "text": "Is b 1? No. So we go in the else case,\nand we return 5 plus--",
    "start": "1020060",
    "end": "1026720"
  },
  {
    "text": "what happens next? Does anyone know? ",
    "start": "1026720",
    "end": "1033099"
  },
  {
    "text": "Yeah. AUDIENCE: Mult_recur is going\nto run again with a as 5 and b as 3.",
    "start": "1033099",
    "end": "1038260"
  },
  {
    "text": "ANA BELL: Yes, mult_recur\nwill run again with a as 5 and b as 3, exactly. It is a function call, right?",
    "start": "1038260",
    "end": "1045220"
  },
  {
    "text": "So as a function\ncall, we are going to create a new environment.",
    "start": "1045220",
    "end": "1051050"
  },
  {
    "text": "So here's, boom, another box. My previous box is\ncurrently hung up.",
    "start": "1051050",
    "end": "1059010"
  },
  {
    "text": "It cannot finish, because it's\ntrying to figure out what 5 plus the result of\nthis function call is.",
    "start": "1059010",
    "end": "1066720"
  },
  {
    "text": "But this one is not done yet. It's still figuring\nout its result.",
    "start": "1066720",
    "end": "1073140"
  },
  {
    "text": "So we've put that one on hold. And now we're trying to\nfigure out mult_recur 5, 3. Well, what is mult_recur 5, 3?",
    "start": "1073140",
    "end": "1079670"
  },
  {
    "text": "It's going to be b is not 1. So this one will\nalso go in its else.",
    "start": "1079670",
    "end": "1085550"
  },
  {
    "text": "And it will recur-- it\nwill return 5 plus what?",
    "start": "1085550",
    "end": "1091775"
  },
  {
    "text": " Exactly, the function call\nwhen b becomes 2, exactly.",
    "start": "1091775",
    "end": "1101210"
  },
  {
    "text": "But notice it is another\nfunction call, right? So here I have,\nboom, another box.",
    "start": "1101210",
    "end": "1108020"
  },
  {
    "text": "Now I've got two function calls,\nthis original one back here,",
    "start": "1108020",
    "end": "1113040"
  },
  {
    "text": "which was waiting on this one\nthat I've highlighted here. But now this one that\nI've highlighted here",
    "start": "1113040",
    "end": "1118190"
  },
  {
    "text": "had to make another\nfunction call down here. So I've got currently\nthree function calls",
    "start": "1118190",
    "end": "1123950"
  },
  {
    "text": "in the works that are\ntrying to figure out what their results are. All right, finally,\nthis mult_recur 5, 2",
    "start": "1123950",
    "end": "1131360"
  },
  {
    "text": "is going to make\nanother function call. So its b is not one. So we're going to\ngo into the else.",
    "start": "1131360",
    "end": "1136710"
  },
  {
    "text": " And what is its\nelse going to say?",
    "start": "1136710",
    "end": "1141730"
  },
  {
    "text": "We're going to return 5 plus-- and it's another function call.",
    "start": "1141730",
    "end": "1149200"
  },
  {
    "text": "So now I'm four\nfunction calls deep, and I haven't done any\nsort of visible work.",
    "start": "1149200",
    "end": "1157190"
  },
  {
    "text": "I've just kept kind of\nkicking the can down the road to try to figure out\nwhat the values are.",
    "start": "1157190",
    "end": "1163429"
  },
  {
    "text": "And everybody's waiting\nfor somebody else to finally return a value.",
    "start": "1163430",
    "end": "1169100"
  },
  {
    "text": "So this first one is waiting\nfor the one right underneath it to return a value.",
    "start": "1169100",
    "end": "1174290"
  },
  {
    "text": "But this one is waiting\nfor the one underneath it to return a value. And this one is waiting\nfor the one underneath it",
    "start": "1174290",
    "end": "1179870"
  },
  {
    "text": "to return a value. That's the chain of calls. What's this last\none going to do? Is it going to make another\nfunction environment?",
    "start": "1179870",
    "end": "1187560"
  },
  {
    "text": "No, it's going to\nreturn a, which is 5. ",
    "start": "1187560",
    "end": "1194680"
  },
  {
    "text": "OK, there's my return value 5. So this one will return\nthe 5 to whoever called it.",
    "start": "1194680",
    "end": "1201309"
  },
  {
    "text": "And whoever called it was this\none here, mult_recur 5, 2. 5, 2 was trying\nto figure out what",
    "start": "1201310",
    "end": "1208030"
  },
  {
    "text": "5 plus this bottom\nfunction call was.",
    "start": "1208030",
    "end": "1213450"
  },
  {
    "text": "Well, now it can figure out\nthat it's going to be 5 plus 5. So its return will be 10.",
    "start": "1213450",
    "end": "1220130"
  },
  {
    "text": "This one returns a value up\none level to whoever called it. And that was mult_recur 5, 3.",
    "start": "1220130",
    "end": "1226490"
  },
  {
    "text": "And now mult_recur 5,\n3 can finish its job. It was trying to figure out what\n5 plus its function call was,",
    "start": "1226490",
    "end": "1234710"
  },
  {
    "text": "which we figured out is 10. So this one can\nfigure out it's 15. And finally, this last\nvalue can return back up",
    "start": "1234710",
    "end": "1242740"
  },
  {
    "text": "to the original\nfunction call, 5, 4. And 5, 4 will return 5 plus\nthe 15 that got returned,",
    "start": "1242740",
    "end": "1251260"
  },
  {
    "text": "which is 20.  OK, questions about\nwhat just happened?",
    "start": "1251260",
    "end": "1258515"
  },
  {
    "text": " Does everything make sense?",
    "start": "1258515",
    "end": "1263539"
  },
  {
    "text": "All right. So let's look at\none more example.",
    "start": "1263540",
    "end": "1268818"
  },
  {
    "text": "I mean, we'll look at a few\nmore examples this lecture, but let's look at a real\nworld example for now.",
    "start": "1268818",
    "end": "1274140"
  },
  {
    "text": "This one will\nhopefully illustrate the difference between\niterative algorithms and recursive algorithms in\na more real-life setting.",
    "start": "1274140",
    "end": "1282070"
  },
  {
    "text": "So let's assume that in\nthis real-world setting, a student asks for a\nregrade for an exam.",
    "start": "1282070",
    "end": "1289169"
  },
  {
    "text": " In an iterative setting, we have\nbasically one function call,",
    "start": "1289170",
    "end": "1296950"
  },
  {
    "text": "regrade, or whatever\nyou want to call it. There's my student. How is the student going to\niteratively get the regrade?",
    "start": "1296950",
    "end": "1304170"
  },
  {
    "text": "Well, the student will be in\ncharge of basically looping through each staff member.",
    "start": "1304170",
    "end": "1311399"
  },
  {
    "text": "So the student goes to\nthe instructor and says, can I have a regrade please?",
    "start": "1311400",
    "end": "1317429"
  },
  {
    "text": "The instructor may have\ngraded one problem. Maybe they didn't, but they will\nregrade the problem that maybe",
    "start": "1317430",
    "end": "1322890"
  },
  {
    "text": "they were in charge of. Then the student will go to the\nnext person on staff, the TA.",
    "start": "1322890",
    "end": "1329260"
  },
  {
    "text": "Can I have a regrade, please? Let's say the TA maybe\nregrades the problem they were in charge of.",
    "start": "1329260",
    "end": "1334450"
  },
  {
    "text": "Maybe they didn't,\nbut in any case, they'll give the\nscore back, or they'll answer the student's request.",
    "start": "1334450",
    "end": "1340610"
  },
  {
    "text": "The student then goes\nto the next person on staff, the lab assistant.",
    "start": "1340610",
    "end": "1346441"
  },
  {
    "text": "Can I have a regrade, please? The lab assistant might\nregrade the problem they're in charge of,\nwhatever, gives the grade back",
    "start": "1346442",
    "end": "1352420"
  },
  {
    "text": "to the student. The student is keeping track\nof all these regrade scores that they're getting\nto figure out",
    "start": "1352420",
    "end": "1357820"
  },
  {
    "text": "what their new total score is. And finally, the\nstudent might go to the grader who did\nprobably most of the work,",
    "start": "1357820",
    "end": "1366190"
  },
  {
    "text": "asks for the regrade. The grader will dutifully\nagree to do the regrade and pass back the values.",
    "start": "1366190",
    "end": "1373370"
  },
  {
    "text": "So here, notice the student is\nin charge of iteratively going to every single person on staff\nand getting the result back.",
    "start": "1373370",
    "end": "1382060"
  },
  {
    "text": "And the student is keeping track\nof what their new score is. Obviously, the\nstaff members will too for the purposes\nof assigning grades,",
    "start": "1382060",
    "end": "1388160"
  },
  {
    "text": "but the student is as well. So the student's basically\nadding up all these values.",
    "start": "1388160",
    "end": "1393460"
  },
  {
    "text": "But there's only\none function call. So I've denoted\nthe function call using just this\nblack circle here.",
    "start": "1393460",
    "end": "1400410"
  },
  {
    "text": "OK, so that's iteration. We know how to do that. We've been doing this for a\nreally long time in this class.",
    "start": "1400410",
    "end": "1405470"
  },
  {
    "text": "But now let's look at the\nsame problem recursively. So in recursion, we've\ngot these two steps.",
    "start": "1405470",
    "end": "1413390"
  },
  {
    "text": "There's the problem of\ndecreasing our original problem into smaller problems until we\nreach some sort of base case.",
    "start": "1413390",
    "end": "1423490"
  },
  {
    "text": "And then at that\npoint, we have the task of building back up our answer.",
    "start": "1423490",
    "end": "1430440"
  },
  {
    "text": "So in the recursive\nsetting, again, I've got my one function\ncalled to regrade on behalf of the student.",
    "start": "1430440",
    "end": "1436580"
  },
  {
    "text": "But the student will only\ninteract with one person, maybe the instructor.",
    "start": "1436580",
    "end": "1442429"
  },
  {
    "text": "The student will not interact\nwith anybody else in staff. The student will just go up to\nthe instructor and say, hey,",
    "start": "1442430",
    "end": "1447750"
  },
  {
    "text": "I would like a\nregrade for this exam. Now, the student\nis going to wait.",
    "start": "1447750",
    "end": "1454730"
  },
  {
    "text": "The instructor is also a\nfunction call to regrade. So maybe the instructor\ndidn't do any of the grading,",
    "start": "1454730",
    "end": "1461630"
  },
  {
    "text": "but the instructor will\nmake their own function call to the TA. Can you please\nregrade this exam?",
    "start": "1461630",
    "end": "1468560"
  },
  {
    "text": "The TA maybe graded one problem. They'll keep track of the\nproblem they need to grade, but there are other problems\nthat need to be graded.",
    "start": "1468560",
    "end": "1474177"
  },
  {
    "text": "So the TA will then make\ntheir own function call to the lab assistant. Maybe the lab assistant\ngraded some problems.",
    "start": "1474177",
    "end": "1481220"
  },
  {
    "text": "And then the lab assistant\nwill also further the request, sort of passing along the\nfunction call to the grader.",
    "start": "1481220",
    "end": "1488240"
  },
  {
    "text": "So we have the task\nof doing the grading as a function being passed\nalong all of the staff members.",
    "start": "1488240",
    "end": "1495490"
  },
  {
    "text": "When we reach the\nbase case, which is the grader that\nprobably knows--",
    "start": "1495490",
    "end": "1504070"
  },
  {
    "text": "probably graded\nthe last question, we've got the answer\nbeing passed back up the chain of function calls.",
    "start": "1504070",
    "end": "1510910"
  },
  {
    "text": "So the grader will say, all\nright, I've graded my problem. There's nobody\nelse I need to ask. So here's my score.",
    "start": "1510910",
    "end": "1516830"
  },
  {
    "text": "So this score is being passed\nback up the chain of function calls to the lab assistant. The lab assistant\nwill take that score",
    "start": "1516830",
    "end": "1522730"
  },
  {
    "text": "and add it to their\nscore, passes it back up the chain of function calls\nto the teaching assistant.",
    "start": "1522730",
    "end": "1530230"
  },
  {
    "text": "The teaching assistant adds\nthat score to their score. Maybe they graded a problem. Maybe they didn't.",
    "start": "1530230",
    "end": "1535940"
  },
  {
    "text": "But anyway, they're\ncompiling the results, little by little, back up, until it\npasses it to the instructor.",
    "start": "1535940",
    "end": "1541169"
  },
  {
    "text": "And then the instructor\nsays, here you go, this is your score. So you see the\ndifference, right? The student is the iteration.",
    "start": "1541170",
    "end": "1548110"
  },
  {
    "text": "They ask everybody on staff. So they interact with\neverybody on staff. But in recursion, the\nstudent is basically hung",
    "start": "1548110",
    "end": "1555280"
  },
  {
    "text": "up waiting for an answer\nuntil we've gone down all these chain\nof function calls",
    "start": "1555280",
    "end": "1561460"
  },
  {
    "text": "and the answer has\nbeen built back up. So the student is not keeping\ntrack of the answer at all. They only get the final\nanswer at the end.",
    "start": "1561460",
    "end": "1571000"
  },
  {
    "text": "Did that help at all? OK, I've refined this\nexample a couple of times. Hopefully this is good.",
    "start": "1571000",
    "end": "1577940"
  },
  {
    "text": "So the big idea\nin recursion here is I've got these quote,\nunquote \"earlier\" function calls, the ones I've made\nway back at the beginning.",
    "start": "1577940",
    "end": "1585640"
  },
  {
    "text": "These function calls are\njust waiting on results to come back.",
    "start": "1585640",
    "end": "1590770"
  },
  {
    "text": "They're not doing any useful\nwork at the beginning. They only do useful\nwork when they're assembling the results\nafter getting a return back",
    "start": "1590770",
    "end": "1598929"
  },
  {
    "text": "from later function calls. So hopefully that\ngives you a sense",
    "start": "1598930",
    "end": "1604590"
  },
  {
    "text": "of how we can apply recursion. Now, what exactly is recursion? So algorithmically,\nit's a way for us",
    "start": "1604590",
    "end": "1611549"
  },
  {
    "text": "to come up with some\nsolutions to some problems in this divide-and-conquer\napproach or decrease-and-conquer\napproach.",
    "start": "1611550",
    "end": "1617250"
  },
  {
    "text": "You have your original problem-- you divide it so much\ninto the same problem",
    "start": "1617250",
    "end": "1622409"
  },
  {
    "text": "just slightly changed,\nuntil you reach a base case. That base case can kick\noff the conquer step",
    "start": "1622410",
    "end": "1628020"
  },
  {
    "text": "and start passing\nback a value that you can start assembling from\nyour earlier function calls.",
    "start": "1628020",
    "end": "1635430"
  },
  {
    "text": "Now, semantically, as\nwe saw in the example where we multiplied\nthe functions, we've got a function\nthat calls itself.",
    "start": "1635430",
    "end": "1642210"
  },
  {
    "text": "Obviously, it's\nnot calling itself with the exact same\nparameters because that would lead to\ninfinite recursion,",
    "start": "1642210",
    "end": "1647250"
  },
  {
    "text": "and that's not what we want. We're going to call ourselves\nwith a slight change in our parameters,\nin such a way that we",
    "start": "1647250",
    "end": "1654540"
  },
  {
    "text": "will reach our base case. And once we reach the\nbase case, then, again, we kick off the conquer step, and\nwe can start reassembling back.",
    "start": "1654540",
    "end": "1662309"
  },
  {
    "text": "And you saw how the\nfunction calls do that when they help each other back up.",
    "start": "1662310",
    "end": "1667410"
  },
  {
    "text": "OK, I'm going to give you a\ncouple of minutes to try this. So complete the function\nthat calculates n",
    "start": "1667410",
    "end": "1673140"
  },
  {
    "text": "to the power of p\nfor these variables. So if you come up with the\nmathematical definition, it will be a pretty straight\ntranslation to code.",
    "start": "1673140",
    "end": "1681570"
  },
  {
    "text": "I did include two\nbase cases here. So maybe a base\ncase is when n is 0",
    "start": "1681570",
    "end": "1686639"
  },
  {
    "text": "and another base\ncase is when n is 1. Figure out what\nyou should return and then how to write\nthis recursive step.",
    "start": "1686640",
    "end": "1693310"
  },
  {
    "text": "So I've got a line. ",
    "start": "1693310",
    "end": "1698980"
  },
  {
    "text": "50ish is where you\ncan type in the code.",
    "start": "1698980",
    "end": "1704490"
  },
  {
    "text": "All right, what's\nmy first base case? Yeah. AUDIENCE: If p is 0,\nthen it'll return 1.",
    "start": "1704490",
    "end": "1712410"
  },
  {
    "text": "ANA BELL: Yep, if p is equal\nto 0, then we can return 1. Oops, just one time.",
    "start": "1712410",
    "end": "1718809"
  },
  {
    "text": "What's another base case? ",
    "start": "1718810",
    "end": "1726680"
  },
  {
    "text": "P is 1; we can return 1. Awesome. How about my recursive step?",
    "start": "1726680",
    "end": "1733080"
  },
  {
    "text": " AUDIENCE: We can\nreturn n times n.",
    "start": "1733080",
    "end": "1740505"
  },
  {
    "text": "ANA BELL: Yep, we\ncan return n times-- AUDIENCE: [INAUDIBLE]",
    "start": "1740505",
    "end": "1746044"
  },
  {
    "text": " ANA BELL: Like this? Now, let's assume I\ndon't know how to do **,",
    "start": "1746044",
    "end": "1752590"
  },
  {
    "text": "how do you rewrite this in\nterms of the thing we're trying to write? There was a solution back there.",
    "start": "1752590",
    "end": "1757779"
  },
  {
    "text": "AUDIENCE: Power_recur\nn, p minus 1. ANA BELL: Yep, we\ncan do that too. Yep, exactly.",
    "start": "1757780",
    "end": "1762850"
  },
  {
    "text": "So here we're assuming that\nwe don't know the ** operator,",
    "start": "1762850",
    "end": "1768100"
  },
  {
    "text": "otherwise this would be a\nvery easy function to write. We are trying to define\nthe ** operator ourselves",
    "start": "1768100",
    "end": "1773890"
  },
  {
    "text": "using this function\nnamed power_recur. So we're just going to\ncall it again down here",
    "start": "1773890",
    "end": "1779899"
  },
  {
    "text": "with n and p minus 1. So if we run it,\nthis will give us 8.",
    "start": "1779900",
    "end": "1785150"
  },
  {
    "text": " Yeah.",
    "start": "1785150",
    "end": "1790220"
  },
  {
    "text": "AUDIENCE: What's the\nnecessity of having the p equals 1 [INAUDIBLE]?",
    "start": "1790220",
    "end": "1795409"
  },
  {
    "text": "ANA BELL: Yes, great question. What is the necessity of this? There is no necessity. I actually just included\nit there to just show you",
    "start": "1795410",
    "end": "1803260"
  },
  {
    "text": "how we can have two base cases. So in this particular case,\nwe would actually never",
    "start": "1803260",
    "end": "1808390"
  },
  {
    "text": "hit this one, if n\nis greater than 1, because we always stop here.",
    "start": "1808390",
    "end": "1814450"
  },
  {
    "text": "If the user gives us 0, we\nwould just return that one. But it would work\nif we completely",
    "start": "1814450",
    "end": "1820389"
  },
  {
    "text": "removed that as well. Yeah, great question. ",
    "start": "1820390",
    "end": "1828530"
  },
  {
    "text": "OK, let's look at\none more example. And this one is the\none that I'm going",
    "start": "1828530",
    "end": "1833660"
  },
  {
    "text": "to ask for some participation. I would like four of you\nto come down with me.",
    "start": "1833660",
    "end": "1838830"
  },
  {
    "text": "But before we do that,\nlet's think about factorial. So the definition\nof n factorial is",
    "start": "1838830",
    "end": "1844820"
  },
  {
    "text": "n times n minus 1 times n minus\n2 times n minus 3 down to 1.",
    "start": "1844820",
    "end": "1850039"
  },
  {
    "text": "What is a base case? What is the simplest thing\nthat we know the factorial of? You guys tell me.",
    "start": "1850040",
    "end": "1856676"
  },
  {
    "text": "AUDIENCE: 0. ANA BELL: What is n--\nwhat is 0 factorial?",
    "start": "1856676",
    "end": "1862559"
  },
  {
    "text": "1, good. I chose 1, but both could work. If n is equal to 0,\nyou can also return 1.",
    "start": "1862560",
    "end": "1869540"
  },
  {
    "text": "Or we can do n is\nequal to 1, return 1. What's our recursive step?",
    "start": "1869540",
    "end": "1874810"
  },
  {
    "text": "Do you recognize the\nrecursive pattern here? N factorial equals-- ",
    "start": "1874810",
    "end": "1885090"
  },
  {
    "text": "N times n minus 1 factorial. If we extract the first\nn out, n minus 1 times n",
    "start": "1885090",
    "end": "1892140"
  },
  {
    "text": "minus 2 times n minus 3 and so\non is just n minus 1 factorial. And so our recursive\nstep just says",
    "start": "1892140",
    "end": "1898260"
  },
  {
    "text": "it's n times the same function\nfactorial with n minus 1.",
    "start": "1898260",
    "end": "1903930"
  },
  {
    "text": "Is everyone OK with that? Cool. OK, so let's look\nthrough this example",
    "start": "1903930",
    "end": "1910490"
  },
  {
    "text": "with some participation,\nso four people. One, yes. And you'll be on OCW\nforever, you guys.",
    "start": "1910490",
    "end": "1916549"
  },
  {
    "text": "Two, yep. Two more. Yes, thank you.",
    "start": "1916550",
    "end": "1922700"
  },
  {
    "text": "Thank you. Awesome. OK, and I'll have you\nguys stand right here.",
    "start": "1922700",
    "end": "1928700"
  },
  {
    "text": "I'll ask you guys to\ncome in one at a time as we are working\nthrough this exam.",
    "start": "1928700",
    "end": "1935763"
  },
  {
    "text": "So we're just going\nto demonstrate sort of once again what happens\nwhen we make function calls. Do you want to just stand\nright here behind my computer?",
    "start": "1935763",
    "end": "1942910"
  },
  {
    "text": "Thank you. Yep, behind my computer. Cool. ",
    "start": "1942910",
    "end": "1948750"
  },
  {
    "text": "OK, perfect. OK, so I'll just stand here.",
    "start": "1948750",
    "end": "1954120"
  },
  {
    "text": "So I am going to be\nthe main program. You run this code, I am\ngoing to be the main program.",
    "start": "1954120",
    "end": "1962990"
  },
  {
    "text": "I am going to keep track of the\nvariables and everything that's",
    "start": "1962990",
    "end": "1970280"
  },
  {
    "text": "in this global scope. OK, so in the global scope, just\nlike we have been in the past,",
    "start": "1970280",
    "end": "1976260"
  },
  {
    "text": "I've got a definition for the\nmy factorial function here. And this is just some code.",
    "start": "1976260",
    "end": "1983149"
  },
  {
    "text": "At this point, I've\njust defined it. I don't care what\nit actually is. But I have one function call.",
    "start": "1983150",
    "end": "1988860"
  },
  {
    "text": "So my one and only\njob is to print the result of factorial 4. I have a pretty easy job.",
    "start": "1988860",
    "end": "1995010"
  },
  {
    "text": "So what happens-- you\nguys, the audience, tell me what happens when\nI've got factorial 4.",
    "start": "1995010",
    "end": "2001000"
  },
  {
    "text": "What is this? Do I just know right off\nthe bat what factorial 4 is?",
    "start": "2001000",
    "end": "2006460"
  },
  {
    "text": "No. It is a function call, right? So as a function call,\nwhat do I need to do?",
    "start": "2006460",
    "end": "2014049"
  },
  {
    "text": "AUDIENCE: Create an environment. ANA BELL: Exactly. I need to create an environment. OK, so you'll be my\nfirst environment.",
    "start": "2014050",
    "end": "2023000"
  },
  {
    "text": "Hello, my name is--\nyou can put it on you. There you go. Hello, my name is-- and then\nyou can step right over there.",
    "start": "2023000",
    "end": "2028040"
  },
  {
    "text": "So you are my first\nfunction call. Your name is fact for factorial. Awesome.",
    "start": "2028040",
    "end": "2033470"
  },
  {
    "text": "So I have just called you.  What is your job?",
    "start": "2033470",
    "end": "2039250"
  },
  {
    "text": "So you guys tell me,\nwhat factorial 4's job is from running the code.",
    "start": "2039250",
    "end": "2045350"
  },
  {
    "text": "Are they going to do\nthe if or the else? AUDIENCE: Else. ANA BELL: The else. So this is your job. You keep track of that.",
    "start": "2045350",
    "end": "2050570"
  },
  {
    "text": "Your n is going to be 4. And your job is to return\n4 times factorial of 3. Do you know what factorial\nof 3 is right now?",
    "start": "2050570",
    "end": "2058460"
  },
  {
    "text": "No. So what do you need to do? AUDIENCE: Call someone. ANA BELL: Yes, please\ncall somebody else. Who are you going to call?",
    "start": "2058460",
    "end": "2065330"
  },
  {
    "text": "Next. What is your name going to be? AUDIENCE: Factorial of 3. ANA BELL: Your name is\nalso factorial, exactly.",
    "start": "2065330",
    "end": "2071929"
  },
  {
    "text": "And you are going to be\ncalled with n is equal to 3. So you can stand right\nbeside factorial of 4.",
    "start": "2071929",
    "end": "2079388"
  },
  {
    "text": "Very nice. So now, notice, we've\ngot two function calls.",
    "start": "2079389",
    "end": "2085510"
  },
  {
    "text": "Both of their names\nare factorial, right? But they are completely\nseparate function calls.",
    "start": "2085510",
    "end": "2091329"
  },
  {
    "text": "They are completely\ndifferent environments. They have their own n values. They have their own jobs to do.",
    "start": "2091330",
    "end": "2098290"
  },
  {
    "text": "Just because their name is\nfactorial for both of them does not mean that\nthey'll interfere",
    "start": "2098290",
    "end": "2103660"
  },
  {
    "text": "with each other's variables. Very, very important\npoint to make. Factorial of 3, do you know\nwhat factorial of 2 is?",
    "start": "2103660",
    "end": "2111260"
  },
  {
    "text": "AUDIENCE: I do not. ANA BELL: No. So what do you need to do? AUDIENCE: I need\nto call somebody. ANA BELL: Exactly. Who are you going to call?",
    "start": "2111260",
    "end": "2116500"
  },
  {
    "text": "AUDIENCE: Factorial. ANA BELL: There you go. What is your name going to be?",
    "start": "2116500",
    "end": "2122056"
  },
  {
    "text": "AUDIENCE: Factorial\nat-- is it 2 now? ANA BELL: Yes, we\nare at 2, exactly. So you are factorial.",
    "start": "2122056",
    "end": "2127470"
  },
  {
    "text": "Your name is also factorial. And you are going to be\ncalled with n is equal to 2. Again, now I have\nthree factorial calls.",
    "start": "2127470",
    "end": "2135960"
  },
  {
    "text": "They're all to the\nname factorial, but they're all\nindependent function calls. So your job is to return\n2 times factorial of 1.",
    "start": "2135960",
    "end": "2143370"
  },
  {
    "text": "Do you know what\nfactorial of 1 is? AUDIENCE: Yes. Wait, no. [LAUGHTER]",
    "start": "2143370",
    "end": "2148700"
  },
  {
    "text": "ANA BELL: As a human you do,\nbut as factorial you do not. What do you need to do?",
    "start": "2148700",
    "end": "2153710"
  },
  {
    "text": "AUDIENCE: Call her. ANA BELL: Call her, exactly. Here you go. Your name is also factorial. You can stand beside our\nlovely other factorials.",
    "start": "2153710",
    "end": "2161190"
  },
  {
    "text": "So your job-- audience,\nI've already given it away. Your last job is to return 1.",
    "start": "2161190",
    "end": "2170520"
  },
  {
    "text": "OK, excellent. So here is your return value. Now, factorial of\n1, are you going",
    "start": "2170520",
    "end": "2178790"
  },
  {
    "text": "to return that value to me? Which one will you return it to?",
    "start": "2178790",
    "end": "2184200"
  },
  {
    "text": "Exactly. So factorial with\nn is equal to 2 can now replace their\nfactorial one function with 1.",
    "start": "2184200",
    "end": "2190920"
  },
  {
    "text": "So what is your return value\ngoing to be, factorial of 2? AUDIENCE: 2? AUDIENCE: (WHISPERING)\nI got it right.",
    "start": "2190920",
    "end": "2196160"
  },
  {
    "text": "ANA BELL: 2, exactly. So where do you pass\nyour value along to? OK, now, one thing\nwe forgot, as soon",
    "start": "2196160",
    "end": "2202760"
  },
  {
    "text": "as you made the return\nvalue, you disappear. [LAUGHTER] You had a very simple job.",
    "start": "2202760",
    "end": "2208450"
  },
  {
    "text": "I'm sorry, but it\nwas really important. You were our base case. Without you, we would have\nhad infinite recursion.",
    "start": "2208450",
    "end": "2215050"
  },
  {
    "text": "OK, so you've passed\nalong your value. So as a function that's done\nits job, what do you do?",
    "start": "2215050",
    "end": "2220540"
  },
  {
    "text": "Disappear, exactly. Thank you. All right, factorial\nof, where are we, 3, exactly, what are you-- what\nis your value going to be now?",
    "start": "2220540",
    "end": "2227559"
  },
  {
    "text": "AUDIENCE: I'm a 6. ANA BELL: 6, exactly. So here's your return value. Do you give it to me\nor-- there you go.",
    "start": "2227560",
    "end": "2233790"
  },
  {
    "text": "Exactly, very good. We disappear. So we've got three function\ncalls that disappeared as soon",
    "start": "2233790",
    "end": "2238859"
  },
  {
    "text": "as they return to value. And finally, 4 times 6. AUDIENCE: 24. ANA BELL: And who do\nyou give your value?",
    "start": "2238860",
    "end": "2245996"
  },
  {
    "text": "Me, which I just gave you. Sorry, yeah, that was confusing. Thank you so much, you guys. That illustrated a\ncouple of things.",
    "start": "2245997",
    "end": "2253980"
  },
  {
    "text": "You guys can head back. Thank you so much. [APPLAUSE]",
    "start": "2253980",
    "end": "2261116"
  },
  {
    "text": " So we illustrated a\ncouple of things here. I'm going to-- I can\ndo it on the slides as well, just to\nbring the point home.",
    "start": "2261116",
    "end": "2269730"
  },
  {
    "text": "But let's go through it. So I've got factorial 4. Every time I make\na function call,",
    "start": "2269730",
    "end": "2276390"
  },
  {
    "text": "even though it's the\nsame name, all factorial, it's a completely\nseparate environment.",
    "start": "2276390",
    "end": "2282480"
  },
  {
    "text": "Happens to have the same\nname, but they're just in charge of doing\ntheir own job. So here I've got factorial 4\ncalling 4 times factorial of 3.",
    "start": "2282480",
    "end": "2293070"
  },
  {
    "text": "As soon as I see\nfactorial of 3, this creates another environment. This is going to be returning\n3 times factorial of 2.",
    "start": "2293070",
    "end": "2300960"
  },
  {
    "text": "Again, another environment. This returns 2 times\nfactorial of 1. And a final environment.",
    "start": "2300960",
    "end": "2307560"
  },
  {
    "text": "Our most important\nenvironment is that last one with the base case.",
    "start": "2307560",
    "end": "2312869"
  },
  {
    "text": "It allows us to kick\nstart our conquer step. So this base step will\nreturn the value 1 to whoever",
    "start": "2312870",
    "end": "2320320"
  },
  {
    "text": "called it. Again, we're not\nskipping around. We only return the value to\nthe function that called us.",
    "start": "2320320",
    "end": "2327059"
  },
  {
    "text": "And I know it gets\nreally confusing because everything is called\nfact in this particular case.",
    "start": "2327060",
    "end": "2332200"
  },
  {
    "text": "But we just have to remember\nwhich function called us. And so we return\nthe 1 back up here.",
    "start": "2332200",
    "end": "2339070"
  },
  {
    "text": "This becomes 2 times 1. And they can finish their job. So notice at this\npoint, we've got--",
    "start": "2339070",
    "end": "2345220"
  },
  {
    "text": "we were 1, 2, 3, 4\nfunctions just kind of hung up and waiting for\nvalues to be passed back to us.",
    "start": "2345220",
    "end": "2351230"
  },
  {
    "text": "But now we can finally\nfinish our jobs one by one. So this one returns a 2.",
    "start": "2351230",
    "end": "2356260"
  },
  {
    "text": "This one returns the 6. This one returns the 24.",
    "start": "2356260",
    "end": "2362260"
  },
  {
    "text": "And the 24 gets printed out. So big idea here, we've\ngot each function call,",
    "start": "2362260",
    "end": "2372599"
  },
  {
    "text": "even though it\nhas the same name, is completely separate,\ncompletely independent environment with\ntheir own parameters.",
    "start": "2372600",
    "end": "2381210"
  },
  {
    "text": "Those parameters can change\nwithin those environments. And that's totally OK. They won't interfere\nwith any parameters",
    "start": "2381210",
    "end": "2388260"
  },
  {
    "text": "in any other environments. All right.",
    "start": "2388260",
    "end": "2394060"
  },
  {
    "text": "So let's do the\nPython Tutor link. And then, again, we can\njust do one more time just",
    "start": "2394060",
    "end": "2400119"
  },
  {
    "text": "to show you what this looks like\nin terms of the Python Tutor. So here I've got my factorial\nwith n is equal to 4,",
    "start": "2400120",
    "end": "2406570"
  },
  {
    "text": "calls n is equal to 3, calls\nfactorial with n is equal to 2, calls factorial with\nn is equal to 1.",
    "start": "2406570",
    "end": "2413770"
  },
  {
    "text": "At this point, just like\nwith the multiplication, I've got all these\nfactorials in the works,",
    "start": "2413770",
    "end": "2419569"
  },
  {
    "text": "but we can start\nreturning values back to whoever called\nus until we get back",
    "start": "2419570",
    "end": "2424770"
  },
  {
    "text": "to the original one, the\noriginal function call. OK, so this is another\nrecap of the observations",
    "start": "2424770",
    "end": "2432843"
  },
  {
    "text": "that we've seen. Each different function call\nhas its own environment. The variables within\nthese environments",
    "start": "2432843",
    "end": "2439089"
  },
  {
    "text": "are specific to\nthose environments. They don't interfere\nwith each other. And the flow of control--",
    "start": "2439090",
    "end": "2446740"
  },
  {
    "text": "so when we make a\nfunction call, all we know is the function\nthat we call next.",
    "start": "2446740",
    "end": "2451750"
  },
  {
    "text": "We don't skip around. All we know is who we\ncall next and who we need to give the value back up to.",
    "start": "2451750",
    "end": "2457375"
  },
  {
    "text": " One last thing I\nwanted to point out.",
    "start": "2457375",
    "end": "2463310"
  },
  {
    "text": "So here I've got the\ncode for factorial, the iterative version and\nthe recursive version.",
    "start": "2463310",
    "end": "2471580"
  },
  {
    "text": "So the one on the left is--\nsorry, the one on the right is what we already wrote,\nso it's factorial recursive.",
    "start": "2471580",
    "end": "2477910"
  },
  {
    "text": "And the one on the left\nis the iterative version. So I personally think\nthe one on the right",
    "start": "2477910",
    "end": "2485860"
  },
  {
    "text": "is more readable because\nit's very similar to the way that we would write the\nexpression mathematically.",
    "start": "2485860",
    "end": "2493359"
  },
  {
    "text": "But if you had a little bit\nof time to think about it, you can just as easily\ncome up with code that does",
    "start": "2493360",
    "end": "2499840"
  },
  {
    "text": "the exact same job iteratively. So remember, in iteration,\nwe've got our loop. There's no more function--\nno other function calls.",
    "start": "2499840",
    "end": "2507609"
  },
  {
    "text": "We have a loop that iterates\nsome number of times. There's some sort of loop\nvariable or loop counter.",
    "start": "2507610",
    "end": "2513460"
  },
  {
    "text": "And there's a\nstate variable that keeps track of the\nanswer of interest-- in this particular case,\nthe product from 1 all",
    "start": "2513460",
    "end": "2519970"
  },
  {
    "text": "the way up to and including n. So I want to end today's\nlecture with just a couple",
    "start": "2519970",
    "end": "2526079"
  },
  {
    "text": "of observations. So today we saw some really\nsimple examples of recursion.",
    "start": "2526080",
    "end": "2531180"
  },
  {
    "text": "But I think it outlined some\nreally, really tricky ideas that people usually have\ntrouble grasping when you first",
    "start": "2531180",
    "end": "2539010"
  },
  {
    "text": "see recursion. And that's because you\nbasically write a function in terms of itself. And that can be a\nlittle bit confusing.",
    "start": "2539010",
    "end": "2545410"
  },
  {
    "text": "So of course, we\napplied recursion to some really,\nreally simple things. We did multiplication,\nand we did factorial.",
    "start": "2545410",
    "end": "2555640"
  },
  {
    "text": "Depending on how you feel,\nthe recursive version or the iterative version might\nbe more intuitive for you. And certainly for\nthese examples,",
    "start": "2555640",
    "end": "2562210"
  },
  {
    "text": "you did not need to\nwrite them recursively. There's a lot of code out\nthere that you actually don't",
    "start": "2562210",
    "end": "2568750"
  },
  {
    "text": "need to implement recursively. The iterative solution is far\nmore intuitive, especially since you guys were first\nintroduced to iteration.",
    "start": "2568750",
    "end": "2576443"
  },
  {
    "text": "You introduced for\nloops and while loops back in lecture three\nor something like that. So if that's the\nfirst thing you saw,",
    "start": "2576443",
    "end": "2583060"
  },
  {
    "text": "that's usually the first thing\nthat's going to be your go-to. But there are\nseveral problems that are more intuitive to\nwrite using recursion.",
    "start": "2583060",
    "end": "2591230"
  },
  {
    "text": "So a couple of examples where\nrecursion is more intuitive is any time when you need to\nrepeat a task for which you",
    "start": "2591230",
    "end": "2599410"
  },
  {
    "text": "don't know how deep you\nneed to go, in which case the recursive calls will\ntake care of making calls",
    "start": "2599410",
    "end": "2607060"
  },
  {
    "text": "to itself to itself\nto itself to itself until it reaches the base case. You don't need to think\nabout that in your iteration.",
    "start": "2607060",
    "end": "2613070"
  },
  {
    "text": "So an example of that is\nthis kind of classic one where we have a file\ninside a file system.",
    "start": "2613070",
    "end": "2620790"
  },
  {
    "text": "If we're looking for\na P set, pset.txt, we can have a student who's\npset.txt is straight under",
    "start": "2620790",
    "end": "2628710"
  },
  {
    "text": "their user/pset.txt folder. But we might have another person\nwho's pset.txt is going to be",
    "start": "2628710",
    "end": "2636420"
  },
  {
    "text": "within their users, their\ndocuments, their schools, their MIT, their classes,\ntheir 6.100L, their P sets,",
    "start": "2636420",
    "end": "2642630"
  },
  {
    "text": "their pset1/pset.txt. So that uncertainty\nfor how far deep",
    "start": "2642630",
    "end": "2648540"
  },
  {
    "text": "you need to search the\nfile system in order to get to the file of\ninterest is a perfect place to apply recursion.",
    "start": "2648540",
    "end": "2654720"
  },
  {
    "text": "Another one is where\nyou have an expression. If you're building your\nown calculator in code and you have order of\nexpressions-- sorry,",
    "start": "2654720",
    "end": "2662579"
  },
  {
    "text": "order of operations\nusing parentheses, again, you don't know\nhow many parentheses you might need to have a\nloop go through in order",
    "start": "2662580",
    "end": "2670109"
  },
  {
    "text": "to get to that base expression\nto figure out the one that you need to do first. And so that's another case where\nusing recursion is very useful.",
    "start": "2670110",
    "end": "2682280"
  },
  {
    "text": "So in the next lecture\nwhat we're going to do is a recap of recursion\nusing another example,",
    "start": "2682280",
    "end": "2687830"
  },
  {
    "text": "a Fibonacci sequence. And then we're going\nto start looking at recursion applied to lists.",
    "start": "2687830",
    "end": "2695170"
  },
  {
    "text": "And specifically,\nif we have lists within lists within\nlists within lists and we don't know how many\nnested lists we might have,",
    "start": "2695170",
    "end": "2703359"
  },
  {
    "text": "recursion is going to be a\nperfect example for that. ",
    "start": "2703360",
    "end": "2718000"
  }
]