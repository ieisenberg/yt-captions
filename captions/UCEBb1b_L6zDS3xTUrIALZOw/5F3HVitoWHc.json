[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6870"
  },
  {
    "text": "offer high quality educational\nresource for free. To make a donation you or view\nadditional materials from",
    "start": "6870",
    "end": "14115"
  },
  {
    "text": "hundreds of MIT courses, visit\nmitopencourseware@ocw.mit.edu. ",
    "start": "14115",
    "end": "21330"
  },
  {
    "text": "PROFESSOR: So let's get started\nwith the second lecture for today. So I guess one thing multicores\ndid, is really",
    "start": "21330",
    "end": "30210"
  },
  {
    "text": "shatter this nice view of\nwriting in your programs and hardwares to take care of,\ngiving you performance.",
    "start": "30210",
    "end": "37040"
  },
  {
    "text": "So hardware just kind of\ncompletely gave that up. But so what you're doing in this\nclass, is you're trying",
    "start": "37040",
    "end": "46010"
  },
  {
    "text": "to do it by yourself. Give all the responsibility\nback to the program.",
    "start": "46010",
    "end": "51560"
  },
  {
    "text": "And you realize as you go,\nit's a much harder job. I mean, this is not simple\nprogramming.",
    "start": "51560",
    "end": "57520"
  },
  {
    "text": "So you need to have, you don't\nhave MIT class students on every company to do this, so we\nneed to have some kind of",
    "start": "57520",
    "end": "65625"
  },
  {
    "text": "middle ground. And so some of the stuff we have\nbeen doing is trying to figure out are there\nany middle ground.",
    "start": "65625",
    "end": "71650"
  },
  {
    "text": "Can you actually take some of\nthat load away from the user into things like languages\nand compilers.",
    "start": "71650",
    "end": "78640"
  },
  {
    "text": "So we will talk about\nsome of those. So right now we are kind of\nswitching from directly doing",
    "start": "78640",
    "end": "85140"
  },
  {
    "text": "what's necessary, to do the\nCell project into going breadth So this lecture, and\nthen we will sit back and do a",
    "start": "85140",
    "end": "95106"
  },
  {
    "text": "little bit of debugging and\nperformance work and that will be directly helpful. And then next week we'll have\nlots of guest lectures to kind of give you breadth in there.",
    "start": "95107",
    "end": "101770"
  },
  {
    "text": "So you'll understand no just\nCell programming but parallel programming and parallel\nprocessing, what the world is",
    "start": "101770",
    "end": "109640"
  },
  {
    "text": "like beyond that. So today we're going to have\nBill talk about streams.",
    "start": "109640",
    "end": "116300"
  },
  {
    "text": "BILL THIES: OK very good. So my name is Bill Thies. I'm a graduate student working\nwith Saman and Roderick, and others here.",
    "start": "116300",
    "end": "121450"
  },
  {
    "text": "And I'll talk about the\nStreamIt language. So why do we need a new\nprogramming language? Well we think that languages\nhaven't kept up with the",
    "start": "121450",
    "end": "128490"
  },
  {
    "text": "architectures. So one way to look at this is\nthat if you look back at previous languages, look at C\nwith von-Neumann machine.",
    "start": "128490",
    "end": "137110"
  },
  {
    "text": "Now I grew up in rural\nPennsylvania not too far from Amish Country. And so to me these go together\njust like a horse and buggy.",
    "start": "137110",
    "end": "143640"
  },
  {
    "text": "OK they're perfectly made\nfor each other. They basically go at\nthe same rate. Everything is fine.",
    "start": "143640",
    "end": "148720"
  },
  {
    "text": "But the problem is, in comes\nthe modern architecture. OK this is an F-16. you have a lot more that you can\ndo with it then, then with",
    "start": "148720",
    "end": "154610"
  },
  {
    "text": "the horse and buggy. So how do you program these\nnew architectures? Well architecture makers these\ndays are basically faced with",
    "start": "154610",
    "end": "161840"
  },
  {
    "text": "a really hard choice. On the one hand, you could get a\nreally cool architecture and develop an ad hoc programming\ntechnique where you're really",
    "start": "161840",
    "end": "168950"
  },
  {
    "text": "just leaving it to the\nprogrammer to do something complicated to get\nperformance. And unfortunately I\nthink that's the",
    "start": "168950",
    "end": "174569"
  },
  {
    "text": "route that they took. I mean fortunately for the\nindustry, but unfortunately for you, I think that's the\nroute they took with cell",
    "start": "174570",
    "end": "180010"
  },
  {
    "text": "which means all of you are\ngoing to become basically fighter pilots. You have to learn how\nto fly the plane. You have to become an expert.",
    "start": "180010",
    "end": "185100"
  },
  {
    "text": "You're going to become the best\npeople at programming these architectures. And unfortunately the only other\noption is to really bend",
    "start": "185100",
    "end": "191810"
  },
  {
    "text": "over backwards to support the\nprevious era of languages like C and C . And you can see what's coming\nhere, it's just hard to get",
    "start": "191810",
    "end": "199500"
  },
  {
    "text": "off the runway. So you don't want\nthis situation.",
    "start": "199500",
    "end": "205400"
  },
  {
    "text": "Out of consideration for whoever\nis in the buggy, hopefully you'll\nnever take off. So looking from a more academic\nperspective, why do",
    "start": "205400",
    "end": "213189"
  },
  {
    "text": "we need a new language\nright now? So if you look back over the\npast 30 years, I know you've seen this graph before.",
    "start": "213190",
    "end": "219330"
  },
  {
    "text": "We were dealing with just\none core in the machine for all this time. And now we have this plethora\nof multicores",
    "start": "219330",
    "end": "225110"
  },
  {
    "text": "coming across the board. So how did we program\nthese old machines? Well we had languages like C and\nFORTRAN that really have a",
    "start": "225110",
    "end": "232670"
  },
  {
    "text": "lot of nice properties across\nthese architectures. So it was portable,\nhigh-performance, composable--",
    "start": "232670",
    "end": "238540"
  },
  {
    "text": "you could have really good\nsoftware development-- malleable, maintainable, all the\nnice things you'd like to see from a software engineering\nperspective.",
    "start": "238540",
    "end": "245250"
  },
  {
    "text": "And really if you wrote a\nprogram back in 1970, you could keep it in C and have it\ncontinue to leverage all the",
    "start": "245250",
    "end": "252170"
  },
  {
    "text": "new properties of machines\nover the past 30 years. So just one fine\nout of the box. And looking forward, that's\nnot going to be true.",
    "start": "252170",
    "end": "259620"
  },
  {
    "text": "So for example, we could\nsay that C was the common machine language. That's what we say for the\npast 30 years, was common",
    "start": "259620",
    "end": "265760"
  },
  {
    "text": "across all the machines. But now looking forward,\nthat's not going to be true anymore. Because you have to program\nevery core separately.",
    "start": "265760",
    "end": "272800"
  },
  {
    "text": "So what's the common machine\nlanguage for multicores? We really think you need\nsomething where you can write a program once today, and have\nit scale for the next 30 years",
    "start": "272800",
    "end": "281370"
  },
  {
    "text": "without having to modify\nthe program. So what kind of language do you\nneed to get that kind of performance?",
    "start": "281370",
    "end": "287620"
  },
  {
    "text": "Well let's look a little deeper\ninto this notion of a common machine language. So why did it work so well\nfor the past 30 years?",
    "start": "287620",
    "end": "293819"
  },
  {
    "text": "Well on uniprocessors, things\nlike C and FORTRAN fran really encapsulated the common\nproperties.",
    "start": "293820",
    "end": "299800"
  },
  {
    "text": "So things like a single flow of\ncontrol in the machine, a single memory image, are both\nproperties of the language.",
    "start": "299800",
    "end": "306260"
  },
  {
    "text": "But they also hid certain\nproperties from the programmer. So they hid the things that\nwere different between one",
    "start": "306260",
    "end": "311550"
  },
  {
    "text": "machine and another. So for example, the register\nfile, the ISA, the functional units and so on.",
    "start": "311550",
    "end": "317540"
  },
  {
    "text": "These things could change from\none architecture to another. And you didn't have to change\nyour program because those aspects weren't in the\nprogramming language.",
    "start": "317540",
    "end": "324819"
  },
  {
    "text": "So that's why these languages\nwere succeeding. And what do we need to succeed\nin the multicore era from a",
    "start": "324820",
    "end": "330070"
  },
  {
    "text": "language perspective? Well you need to encapsulate the\ncommon properties again. And this time it's multiple\nflows of control that you have",
    "start": "330070",
    "end": "337830"
  },
  {
    "text": "for all the different cores, and\nmultiple local memories. There's no more monolithic\nmemory anymore, that everyone",
    "start": "337830",
    "end": "343710"
  },
  {
    "text": "can read and write to. Also you need to hide\nsome of the differences between the machines.",
    "start": "343710",
    "end": "350190"
  },
  {
    "text": "So some cores have different\ncapabilities. On cell there's a heterogeneous\nsystem between the STEs and the PPE.",
    "start": "350190",
    "end": "356560"
  },
  {
    "text": "Different communication models\non different architectures, different synchronization\nmodels. So whatever common machine\nlanguage we come up with,",
    "start": "356560",
    "end": "362970"
  },
  {
    "text": "we'll have to keep these\nthings hidden from the programmer. Now a lot of different\nresearchers are taking different tacts for how you want\nto invent the next common",
    "start": "362970",
    "end": "370389"
  },
  {
    "text": "machine language. And the thrust that we're really\nexcited about is this notion of streaming.",
    "start": "370390",
    "end": "375510"
  },
  {
    "text": "So what is a stream program? Well if you look at a lot of the\nhigh-performance systems today-- including Powerpoint\nwhich is running this awesome",
    "start": "375510",
    "end": "382780"
  },
  {
    "text": "animation-- you can basically see that\nthey're based around some stream of data.",
    "start": "382780",
    "end": "387930"
  },
  {
    "text": "So audio, video, like HDTV,\nvideo editing, graphic stuff.",
    "start": "387930",
    "end": "393289"
  },
  {
    "text": "I think actually, a lot of the\nprojects in this class that I looked at, would fit into\nthe streaming mold. Things like the software\nradio, array tracing, I",
    "start": "393290",
    "end": "401790"
  },
  {
    "text": "probably don't remember\nthem all. But when I looked at them, they\nall looked like they had a streaming component\nsomewhere in there. So what's special about a stream\nprogram compared to",
    "start": "401790",
    "end": "409560"
  },
  {
    "text": "just a normal program? Well they have a lot of\nattractive properties. If you look at their structure,\nyou can usually see",
    "start": "409560",
    "end": "416379"
  },
  {
    "text": "that the computation pattern\nremains relatively constant across the lifetime\nof the program.",
    "start": "416380",
    "end": "421850"
  },
  {
    "text": "So they have some well-defined\nunits that are communicating with each other. And they continue that pattern\nof communication throughout.",
    "start": "421850",
    "end": "428790"
  },
  {
    "text": "And this really exposes a lot\nof opportunities for the compiler to do some\noptimizations that it couldn't do on just an arbitrary general\npurpose program.",
    "start": "428790",
    "end": "436640"
  },
  {
    "text": "And if you saw before, we have\nbasically all the types of parallelism are really exposed\nin a stream program.",
    "start": "436640",
    "end": "442379"
  },
  {
    "text": "There's the pipeline parallelism\nbetween different producers and consumers. There's the task parallelism\nbasically going",
    "start": "442380",
    "end": "449340"
  },
  {
    "text": "from left to right. And also data parallelism which\nmeans that a single one of these stages can sometimes be\nsplit to apply to multiple",
    "start": "449340",
    "end": "456900"
  },
  {
    "text": "elements in the data stream. So when you're thinking about\nstream programming, there's a",
    "start": "456900",
    "end": "462380"
  },
  {
    "text": "lot of different ways\nyou can actually represent the program. So whenever you have a\nprogramming model, you have to",
    "start": "462380",
    "end": "467640"
  },
  {
    "text": "answer these kinds\nof questions. For example do the senders and\nthe receivers block when they try to communicate?",
    "start": "467640",
    "end": "473699"
  },
  {
    "text": "How much buffering is allowed? Is the computation\ndeterministic? What kind of model do\nyou have in there?",
    "start": "473700",
    "end": "479440"
  },
  {
    "text": "Can you avoid deadlock? Questions like these, and we\ncould spend a whole lecture answering these questions,\nputting them in different",
    "start": "479440",
    "end": "485790"
  },
  {
    "text": "categories. But what I want to just to do,\njust to give you a feel is touch on kind of three of the\nmajor models that you might",
    "start": "485790",
    "end": "492010"
  },
  {
    "text": "see come up in different kinds\nof programming models. And I'll just touch Kahn process\nnetworks, synchronous",
    "start": "492010",
    "end": "497550"
  },
  {
    "text": "dataflow, and communicating\nsequential processes, or CSP.",
    "start": "497550",
    "end": "502800"
  },
  {
    "text": "So just one slide\non these models. So let's compare them\na little bit. First there's the Kahn\nprocess networks.",
    "start": "502800",
    "end": "509650"
  },
  {
    "text": "So this is kind of the\nsimplest model. It's very intuitive. You just have different\nprocesses that are communicating over FIFOs.",
    "start": "509650",
    "end": "516459"
  },
  {
    "text": "And the FIFO size is\nconceptually unbounded. So to a first approximation,\nit's kind of like a Unix pipe.",
    "start": "516460",
    "end": "524840"
  },
  {
    "text": "These processes can just read\nfrom the input, and they can push onto their outputs\nwithout blocking.",
    "start": "524840",
    "end": "530310"
  },
  {
    "text": "But if they try to read from an\ninput they do block until an input is available. And the interesting thing is\nthat the communication pattern",
    "start": "530310",
    "end": "538089"
  },
  {
    "text": "can actually be dependent\non the data. So for example I could pop an\nindex off of one channel, and",
    "start": "538090",
    "end": "544410"
  },
  {
    "text": "then use that index to determine\nwhich other channel I'll read from on the\nnext time time step.",
    "start": "544410",
    "end": "549830"
  },
  {
    "text": "But at the same time it\nis deterministic. So for a given series of input\nvalues on the stream, I'll",
    "start": "549830",
    "end": "556450"
  },
  {
    "text": "always have the same\ncommunication pattern that I'm trying from the other input. So if it's a deterministic\nmodel, that's a nice property.",
    "start": "556450",
    "end": "564580"
  },
  {
    "text": "Let's see, what else\nto say here? There's actually a few recent\nventures that are using Kahn",
    "start": "564580",
    "end": "569670"
  },
  {
    "text": "process networks. So there's commercial interest.\nFor example Ambric is a startup that I think will\nbe based on a Kahn process",
    "start": "569670",
    "end": "576920"
  },
  {
    "text": "network for the programming\nmodel. Looking at another model called\nsynchronous dataflow,",
    "start": "576920",
    "end": "583410"
  },
  {
    "text": "this is actually what we use\nin the StreamIt system. And compared to Kahn\nprocess networks, it's kind of a subset.",
    "start": "583410",
    "end": "588830"
  },
  {
    "text": "It's a little bit more\nrestrictive. So if you look at the space\nof all possible program behaviors, Kahn process networks\nare a pretty big",
    "start": "588830",
    "end": "595769"
  },
  {
    "text": "piece of the space. And then synchronous dataflow\nis kind of a subset of that space where you know more\nabout the communication",
    "start": "595770",
    "end": "602490"
  },
  {
    "text": "pattern at compile time. So for example, in synchronous\ndataflow, the programmer actually declares how many items\nit will consume from",
    "start": "602490",
    "end": "610810"
  },
  {
    "text": "each of its in put channels\non a given execution step. So there's no more data\ndependence regarding the",
    "start": "610810",
    "end": "616770"
  },
  {
    "text": "communication pattern. It'll always input some items\nfrom some of the channels and produce some number of items\nto other channels.",
    "start": "616770",
    "end": "623990"
  },
  {
    "text": "And this is a really nice\nproperties because it lets the compiler do to scheduling\nfor you. So the compiling can see who's\ncommunicating to who and",
    "start": "623990",
    "end": "631020"
  },
  {
    "text": "exactly what pattern. And it can statically interleave\nthe filters to guarantee that everyone has\nenough data to complete their",
    "start": "631020",
    "end": "639399"
  },
  {
    "text": "computation. So there's a lot of interesting\noptimizations you can do here. That's why it's very attractive\nfor StreamIt.",
    "start": "639400",
    "end": "645820"
  },
  {
    "text": "And you can statically guarantee\nfreedom from deadlock, which is a nice\nproperty to have.",
    "start": "645820",
    "end": "651560"
  },
  {
    "text": "The last one I want to touch on\nis communicating sequential processes or CSP. And in the space of program\nbehaviors, it's kind of an",
    "start": "651560",
    "end": "659080"
  },
  {
    "text": "overlapping that from Kahn\nprocessing networks, and adds a few new semantic behaviors.",
    "start": "659080",
    "end": "665170"
  },
  {
    "text": "So the buffering model is\nbasically rendezvous communication now. So there's no bothering\nin the system.",
    "start": "665170",
    "end": "671950"
  },
  {
    "text": "Basically anytime you send a\nvalue to another process, you have to block and wait until\nthat process will actually",
    "start": "671950",
    "end": "678380"
  },
  {
    "text": "receive that value from you. So everyone is rendevouzing at\nevery communication step.",
    "start": "678380",
    "end": "684570"
  },
  {
    "text": "In addition to that, they\nhave some sophisticated synchronization primitives. So you can for example, discuss\nalternative behaviors",
    "start": "684570",
    "end": "692760"
  },
  {
    "text": "that you have. You can either\none thing or another which will introduce the\nnondeterminism in the model.",
    "start": "692760",
    "end": "699509"
  },
  {
    "text": "Which could be a good or a bad\nthing depending on the program you're trying to express. And pretty much the most\nwell-known encapsulation of",
    "start": "699510",
    "end": "707089"
  },
  {
    "text": "CSP is this occam programming\nlanguage invented quite a while ago. And some people are still\nusing that today.",
    "start": "707090",
    "end": "714420"
  },
  {
    "text": "Any questions on the\nmodel computations? ",
    "start": "714420",
    "end": "719760"
  },
  {
    "text": "OK. So now let me get into\nwhat StreamIt is. So StreamIt is a\ngreat language.",
    "start": "719760",
    "end": "726190"
  },
  {
    "text": "It's a high-level architecture-independent language. Oh question the back.",
    "start": "726190",
    "end": "731660"
  },
  {
    "text": "AUDIENCE: With the CSP I'm\ntrying to understand exactly what that means or how\nit's different.",
    "start": "731660",
    "end": "739660"
  },
  {
    "text": "Is basically what's it's saying\nis you have a bunch processes and they can send\nmessages to each other.",
    "start": "739660",
    "end": "744940"
  },
  {
    "text": "BILL THIES: So all these models\nhave that property. AUDIENCE: They all\nfit into that.",
    "start": "744940",
    "end": "751230"
  },
  {
    "text": "But it seems like from your\nexplanation of CSP, that that was just sort of the essence\nof CSP is it more specific?",
    "start": "751230",
    "end": "761620"
  },
  {
    "text": "BILL THIES: So CSP is usually\nassociated with rendezvous communication. That's the side of programs\nthat fit inside",
    "start": "761620",
    "end": "767269"
  },
  {
    "text": "Kahn process networks. It's any communicating model\nwhere you basically have no buffering between\nthe processes.",
    "start": "767270",
    "end": "774310"
  },
  {
    "text": "Now the piece that sits outside\nis usually lumped with CSP, or especially with occam\nThey have a set a primitives",
    "start": "774310",
    "end": "781000"
  },
  {
    "text": "that are richer in terms\nof synchronization. So for example, you can have\nguards on your communication.",
    "start": "781000",
    "end": "787810"
  },
  {
    "text": "Don't execute this consumption\nfrom this channel until I see a certain value. So there's some more rich\nsemantics there.",
    "start": "787810",
    "end": "795580"
  },
  {
    "text": "And so that's the things that\nare usually outside. They're outside the\nother models. Does that make sense?",
    "start": "795580",
    "end": "803940"
  },
  {
    "text": "Other questions?  OK so StreamIt.",
    "start": "803940",
    "end": "812210"
  },
  {
    "text": "OK so StreamIt is\narchitecture-independent. It's basically a really nice\nsyntactic model for",
    "start": "812210",
    "end": "819190"
  },
  {
    "text": "interfacing with these lower\nlevel models of computation for streaming. And really we have two goals\nin the StreamIt project.",
    "start": "819190",
    "end": "826460"
  },
  {
    "text": "And the first is from the\nprogrammer's side. So we want to improve the\nprogrammer's life when you're",
    "start": "826460",
    "end": "832000"
  },
  {
    "text": "writing a parallel program. We want to make it easier for\nyou to write a parallel program then you would have to\ndo in C or a language like",
    "start": "832000",
    "end": "839060"
  },
  {
    "text": "Java, or any other language\nthat you know. And at the same time, we want\nscalable and portable performance across\nthe multicores.",
    "start": "839060",
    "end": "846100"
  },
  {
    "text": "So an interesting thing these\ndays is you'll find, is it's often very hard a tempt the\nprogrammer to switch to your",
    "start": "846100",
    "end": "853570"
  },
  {
    "text": "favorite language based\nsolely on performance. Or at least this has been the\nstory in the past. It may",
    "start": "853570",
    "end": "858770"
  },
  {
    "text": "change, looking forward. Because it's a lot harder to\nget performance these days. But usually you have to offer\nthem some other carrot to get",
    "start": "858770",
    "end": "864730"
  },
  {
    "text": "them on board. And you know the carrot here\nis that it's really nice to program in. It's fun to program in.",
    "start": "864730",
    "end": "870880"
  },
  {
    "text": "It's beautiful. It's a lot easier to program and\nstream it then it would be in something like C or Java\nfor a certain class of",
    "start": "870880",
    "end": "877230"
  },
  {
    "text": "programs. So that's how we get\nthem on board, and then we also provide the performance.",
    "start": "877230",
    "end": "883010"
  },
  {
    "text": "We're mostly based on the\nsynchronous in dataflow model. In that when there are static\ncommunication patterns, we",
    "start": "883010",
    "end": "889380"
  },
  {
    "text": "leverage that from the\ncompiler side. So I'll also tell you about some\ndynamic extensions that we have, that is the much richer\nmodel of communication.",
    "start": "889380",
    "end": "898410"
  },
  {
    "text": "So what have we been doing\nin the Streamit Project? We have kind of a dual thrust\nwithin our group building on",
    "start": "898410",
    "end": "903860"
  },
  {
    "text": "this language. So the first thrust is from\nthe programmability side, looking at applications and\nprogrammability What can we",
    "start": "903860",
    "end": "910139"
  },
  {
    "text": "fit into the streaming model? And we're also really pushing\nthe optimizations. So what can you do from both a\ndomain specific optimization",
    "start": "910140",
    "end": "917660"
  },
  {
    "text": "standpoint, as kind of emulating\na DSP engineer or a signal processing expert\nin the design flow.",
    "start": "917660",
    "end": "924770"
  },
  {
    "text": "And also architecture specific\noptimizations. So we've been compiling for a\nlot of parallel machines. And we were hoping we could\nhave a full system for you",
    "start": "924770",
    "end": "931860"
  },
  {
    "text": "guys, this IEP, so you could\nwrite it then stream it and then hit the button. And it would work the whole\nway down to cell.",
    "start": "931860",
    "end": "937900"
  },
  {
    "text": "Unfortunately we're not\nquite there yet. But we do have a pretty robust\ncompiler infrastructure. And you can download this off\nthe web and play with it if",
    "start": "937900",
    "end": "945010"
  },
  {
    "text": "you want to. One of our backends that we've\nreleased so far actually does go to a cluster of\nworkstations.",
    "start": "945010",
    "end": "952260"
  },
  {
    "text": "So it's kind of an MPI-like\nversion of C. It uses Pthreads for the parallelism model.",
    "start": "952260",
    "end": "958120"
  },
  {
    "text": "And I mean, depending on what\nkind of a hacker you are, you actually might be able to lower\nthat down onto cell. So some of the stuff you might\nbe able to use if you're have",
    "start": "958120",
    "end": "967840"
  },
  {
    "text": "some initiative in there. And of course we'd be\nwilling to work with you on this as well. so we have lots optimizations\nin the tool flow.",
    "start": "967840",
    "end": "974460"
  },
  {
    "text": "And actually Saman will spend\nanother lecture focusing on the StreamIt compiler,\nand how we get performance out of the model.",
    "start": "974460",
    "end": "982010"
  },
  {
    "text": "OK, so let's just jump right in\nand do the analog of Hello World in StreamIt. I'm going to kind of walk you\nthrough the language and show",
    "start": "982010",
    "end": "988470"
  },
  {
    "text": "you the interesting pieces\nfrom an intellectual standpoint. What's interesting about\na streaming model that",
    "start": "988470",
    "end": "993720"
  },
  {
    "text": "you can take away. So instead of Hello World,\nwe have a counter. Since we're dealing with stream\nprograms here, you're",
    "start": "993720",
    "end": "1000319"
  },
  {
    "text": "not usually doing\ntext processing. So how do you write counter? Well there are two pieces\nto the program.",
    "start": "1000320",
    "end": "1006040"
  },
  {
    "text": "The first is kind of the\ninterconnect between the different components. That's what we have up here. We're saying the program is a\npipeline with two stages, it",
    "start": "1006040",
    "end": "1014210"
  },
  {
    "text": "has a source, and it\nhas a printer. And then we can write\nthe source and the printer as filters.",
    "start": "1014210",
    "end": "1019720"
  },
  {
    "text": "We call those basic building\nblocks filters in Streamit. So the source will just have\na variable x that it",
    "start": "1019720",
    "end": "1025430"
  },
  {
    "text": "initializes is zero. And then we have a work\nfunction which is automatically called by our\nruntime system every time",
    "start": "1025430",
    "end": "1032569"
  },
  {
    "text": "through the steady state. So this work function well push\none item on to the output channel, and it'll increment\nthe value afterward.",
    "start": "1032570",
    "end": "1040130"
  },
  {
    "text": "Whereas the intPrinter\nat the bottom here, will input one value. And its work function here just\npops that value off the",
    "start": "1040130",
    "end": "1047079"
  },
  {
    "text": "input tape, and prints\nit to the output. Now how do we run this thing? Well there's no main function\nhere like you",
    "start": "1047080",
    "end": "1053490"
  },
  {
    "text": "see in Hello World. Is there comment? Oh, sorry.",
    "start": "1053490",
    "end": "1059206"
  },
  {
    "text": "AUDIENCE: The two meanings of\npush and two meanings of pop. BILL THIES: Two meanings? AUDIENCE: Push 1, 2, 3. BILL THIES: Yeah, yeah.",
    "start": "1059207",
    "end": "1064970"
  },
  {
    "text": "So the first push here is just\ndeclaring that this work function will push one item\nto the output tape.",
    "start": "1064970",
    "end": "1071300"
  },
  {
    "text": "So this is the synchronous\ndataflow aspect. Were associating an output rate\nwith this work function.",
    "start": "1071300",
    "end": "1076510"
  },
  {
    "text": "So that's a declaration here. Whereas this push is just\nactually executing the push",
    "start": "1076510",
    "end": "1082190"
  },
  {
    "text": "onto the output. So how do we run this thing? Well we compile it with a\nStreamIt compiler, store C",
    "start": "1082190",
    "end": "1088770"
  },
  {
    "text": "into a binary. And then when we run, we run\nfor a given number of iterations. So you don't just\ncall it once.",
    "start": "1088770",
    "end": "1095100"
  },
  {
    "text": "Our model is that this is a\ncontinuous stream of data going through the program. And so when you run it, you\nrun it for some number of",
    "start": "1095100",
    "end": "1102110"
  },
  {
    "text": "iterations, or basically input\nor output items, is what you're running it for. So if you run this for four\niterations, it would",
    "start": "1102110",
    "end": "1108470"
  },
  {
    "text": "print in the 033. So we can leverage this\nsteady flow of data.",
    "start": "1108470",
    "end": "1113540"
  },
  {
    "text": "Yeah Amir? AUDIENCE: 1, 2, 3, 4, pushing\nX plus plus . BILL THIES: I think\nthe plus, plus is",
    "start": "1113540",
    "end": "1120320"
  },
  {
    "text": "executed after the push. AUDIENCE: Push plus plus? BILL THIES: So it\nstarts at zero.",
    "start": "1120320",
    "end": "1126570"
  },
  {
    "text": "So I think a PostFix expression\nexecutes after the actual obsession. Yeah.",
    "start": "1126570",
    "end": "1133780"
  },
  {
    "text": "Yeah. Other questions? ",
    "start": "1133780",
    "end": "1139679"
  },
  {
    "text": "OK so let's step up a\nlevel and look at what we have in StreamIt. So the first question is, how\ndo you represent this",
    "start": "1139680",
    "end": "1145940"
  },
  {
    "text": "connectivity between different\nbuilding blocks? How do you represent streams? And if you look at traditional\nprogramming models, kind of",
    "start": "1145940",
    "end": "1153159"
  },
  {
    "text": "the conventional wisdom\nis that a stream program is a graph. You have different\nnodes that are communicating to each other.",
    "start": "1153160",
    "end": "1159060"
  },
  {
    "text": "And graphs are actually kind\nof hard to analyze. They're hard to represent. They're a little\nbut confusing.",
    "start": "1159060",
    "end": "1164090"
  },
  {
    "text": "So the approach we decided to\ntake in StreamIt is one of a structured computation graph.",
    "start": "1164090",
    "end": "1169170"
  },
  {
    "text": "So instead of having arbitrary\ninner connections between the stages, we have a higher\nhierarchical description in",
    "start": "1169170",
    "end": "1175280"
  },
  {
    "text": "which every individual stage\nhas a single input and a single output. And you can compose these\ntogether into",
    "start": "1175280",
    "end": "1181760"
  },
  {
    "text": "higher level stages. Of course there's some pages\nthat do split and join with multiple inputs.",
    "start": "1181760",
    "end": "1186770"
  },
  {
    "text": "We'll get to that. So the analog here is kind of\nah analogous to structured",
    "start": "1186770",
    "end": "1192400"
  },
  {
    "text": "control flow, in your favorite imperative programming language. Of course there was a day when\neveryone used goto statements",
    "start": "1192400",
    "end": "1199060"
  },
  {
    "text": "instead of having structure\ncontrol flow. We've got a fan of goto\nstatements in the audience? OK, I'll get to you later.",
    "start": "1199060",
    "end": "1206550"
  },
  {
    "text": "But the problem was, it's really\nhard to understand the program that's jumping all over\nthe place because there's",
    "start": "1206550",
    "end": "1212110"
  },
  {
    "text": "no local reasoning you can have.\nYou know you're jumping to this location, you're coming\nback a different way.",
    "start": "1212110",
    "end": "1217150"
  },
  {
    "text": "It's hard to reason about\nprogram components. So when people went to\nstructured control flow, there's just if else, four\nloop statements.",
    "start": "1217150",
    "end": "1226409"
  },
  {
    "text": "Those are the two basic\nconstructs. You can basically express all\nkinds of computation in those",
    "start": "1226410",
    "end": "1232250"
  },
  {
    "text": "simple primitives. And things got a lot simpler. And you know people objected\nat one point even.",
    "start": "1232250",
    "end": "1237500"
  },
  {
    "text": "You know what about a\nfinite-state machine? Don't you need goto statements\nfor a finite-state machine, going from one state\nto another another.",
    "start": "1237500",
    "end": "1243980"
  },
  {
    "text": "And now everyone writes in FSM\nwith a really simple idiom. You usually have a while loop\naround a case statement.",
    "start": "1243980",
    "end": "1250090"
  },
  {
    "text": "Right, you have a\ndispatch loop. So and now whenever you see\nthat pattern you can recognize, oh there's a\nfinite-state machine.",
    "start": "1250090",
    "end": "1255490"
  },
  {
    "text": "It's not just at set of gotos. It's a finite-state machine. So we think there are\nsimilar idioms in the streaming domain.",
    "start": "1255490",
    "end": "1261140"
  },
  {
    "text": "And that's kind of the direction\nwe're pushing from a design standpoint. So what are our structures\nthat we have?",
    "start": "1261140",
    "end": "1266510"
  },
  {
    "text": "Well here are our structured\nstreams. At the base we have a filter. That's just the programmable\nunit like I showed you.",
    "start": "1266510",
    "end": "1273100"
  },
  {
    "text": "We have a pipeline, which just\nconnects one stream to another in a sequence. So this gives you pipeline\nparallelism.",
    "start": "1273100",
    "end": "1279620"
  },
  {
    "text": "There's a splitjoin where you\nhave explicit parallelism in the stream. So I'll talk about what these\nsplitters and joiners can do.",
    "start": "1279620",
    "end": "1285470"
  },
  {
    "text": "It's basically a predefined\npattern of scattering data to some child streams, and then\ngathering that data back into",
    "start": "1285470",
    "end": "1291530"
  },
  {
    "text": "a single stream. So the whole construct still\nremains single input and single output.",
    "start": "1291530",
    "end": "1297020"
  },
  {
    "text": "Likewise a feedback loop is\njust a simple way to put a loop in your stream.",
    "start": "1297020",
    "end": "1302340"
  },
  {
    "text": "And of course these\nare hierarchical. So all of these green boxes\ncan be any of the three constructs.",
    "start": "1302340",
    "end": "1307910"
  },
  {
    "text": "So that's how you can have these\nhierarchical graphs. And again, since everything is\nsingle-input single-output, you can really mix and match.",
    "start": "1307910",
    "end": "1313920"
  },
  {
    "text": "You know choose your favorite\ncomponents, and they'll always fit together. You don't need to stitch\nmultiple connections.",
    "start": "1313920",
    "end": "1320390"
  },
  {
    "text": "So let's dive inside one\nof these filters now. And I gave you a feel for how\nthey look before, but here's a",
    "start": "1320390",
    "end": "1325620"
  },
  {
    "text": "little more detail. So how do we program\nthe filter? Well a filter just transforms\none stream",
    "start": "1325620",
    "end": "1331600"
  },
  {
    "text": "into another stream. And here it's transforming a\nstream of floating-point numbers into another\nfloating-point number stream.",
    "start": "1331600",
    "end": "1337780"
  },
  {
    "text": "I can take some parameters\nat the top. These actually fixed at compile\ntime in our model,",
    "start": "1337780",
    "end": "1343310"
  },
  {
    "text": "which allows the compiler to\nreally specialize the filters code depending on the context\nin which it's being used.",
    "start": "1343310",
    "end": "1348720"
  },
  {
    "text": "So for example here, we're\ninputting N in a frequency. And then we have two stages\nof execution.",
    "start": "1348720",
    "end": "1354740"
  },
  {
    "text": "At initialization time-- this\nruns one at the beginning of the whole program-- we can\ncalculate some weights for",
    "start": "1354740",
    "end": "1360940"
  },
  {
    "text": "example, from the frequency. And we can store those weights\nas a local variable. So you can think of this kind\nof like a Java class.",
    "start": "1360940",
    "end": "1367860"
  },
  {
    "text": "You can have some member\nvariables. You can retains state from one\nexecution to the next. The work function\nis the closest",
    "start": "1367860",
    "end": "1373789"
  },
  {
    "text": "thing to the main function. This is called repeatedly\nin the steady state. And here are the IO rates\nof the work function.",
    "start": "1373790",
    "end": "1380660"
  },
  {
    "text": "This filter actually peaks at\nsome data items. That means that it inspects more items on\nthe input channel than it",
    "start": "1380660",
    "end": "1387010"
  },
  {
    "text": "actually consumes on\nevery iteration. So we'll look at N input items,\nand we'll push one new",
    "start": "1387010",
    "end": "1392920"
  },
  {
    "text": "item onto the output and pop one\nitem from the input tape every time we execute.",
    "start": "1392920",
    "end": "1399200"
  },
  {
    "text": "So here we have a sliding\nwindow computation. It means the next time through,\nwe'll just slide this",
    "start": "1399200",
    "end": "1404330"
  },
  {
    "text": "window up by one and inspect\nthe next N items on the input tape. And inside the work function\nyou can have pretty much",
    "start": "1404330",
    "end": "1411169"
  },
  {
    "text": "general purpose code. Right now we just allow pointers\nand a few other things to keep things simple. But the idea is this is general\npurpose imperative",
    "start": "1411170",
    "end": "1418049"
  },
  {
    "text": "code inside the work function. Now what's nice about this\nrepresentations of a filter is",
    "start": "1418050",
    "end": "1424160"
  },
  {
    "text": "for one thing is this\npeak function. So what we really have is a\nnice representation of the data pattern, that you're\nreading the data",
    "start": "1424160",
    "end": "1431100"
  },
  {
    "text": "on the input channel. And if you look at this for\nexample in a language like C, it's a lot messier.",
    "start": "1431100",
    "end": "1436730"
  },
  {
    "text": "So usually when you're doing\nbuffer management, you have to do some modulo operations. You have to keep a circular\nbuffer of your live data.",
    "start": "1436730",
    "end": "1443290"
  },
  {
    "text": "And increase you know, a head or\ntail pointer and mod around the side with some kind\nof modulo operation.",
    "start": "1443290",
    "end": "1448910"
  },
  {
    "text": "And for a compiler, this\nis a real nightmare. Because modulo operations\nare kind of the the worst thing to analyze.",
    "start": "1448910",
    "end": "1454679"
  },
  {
    "text": "You can't see what it's actually\ntrying to read. And if you want to map this\nbuffer to a network or to a combined communication with some\nother actor or filter in",
    "start": "1454680",
    "end": "1462460"
  },
  {
    "text": "the graph, it's pretty\nmuch impossible. So here is we're exposing that\nall to the compiler.",
    "start": "1462460",
    "end": "1467539"
  },
  {
    "text": "And you'll see how that\ncan make a difference. And also it's just a lot\neasier to program. I mean, I don't like looking\nat the code.",
    "start": "1467540",
    "end": "1473039"
  },
  {
    "text": "So I'm going to go to\nthe next slide. OK, so how do we piece\nthings together?",
    "start": "1473040",
    "end": "1478930"
  },
  {
    "text": "Let's just build some higher\nlevel components. So here's a pipeline\nof two components.",
    "start": "1478930",
    "end": "1484380"
  },
  {
    "text": "And we already saw a pipeline. You can just add one component\nafter another. And add just basically has the\neffect of making a queue, and",
    "start": "1484380",
    "end": "1493680"
  },
  {
    "text": "just queueing up all of the\ncomponents that you added, and connecting them one\nafter another. So here we have a BandPastFilter\nby connecting a",
    "start": "1493680",
    "end": "1501560"
  },
  {
    "text": "LowPassFilter and feeding it's\noutput into a HighPassFilter. You end up with a\nBandPassFilter.",
    "start": "1501560",
    "end": "1507650"
  },
  {
    "text": "OK what about a splitjoin? How do we make those? So a splitjoin has an add\nstatement as well.",
    "start": "1507650",
    "end": "1514730"
  },
  {
    "text": "And here we're adding components\nin a loop. So what this means is now when\nwe say add, we're actually",
    "start": "1514730",
    "end": "1520710"
  },
  {
    "text": "adding from left to right. So instead of going top to down,\nwe're adding from left to right across the splitjoin.",
    "start": "1520710",
    "end": "1526610"
  },
  {
    "text": "And we can actually\ndo that in a loop. So here we're intPrinting a\nparameter N. And depending on",
    "start": "1526610",
    "end": "1531879"
  },
  {
    "text": "that value, we'll add N BandPassFilters to this splitjoin. So it's kind of cool, right?",
    "start": "1531880",
    "end": "1537590"
  },
  {
    "text": "Because you can input a\nparameter, and that parameter actually affects the structure\nof your graph.",
    "start": "1537590",
    "end": "1543180"
  },
  {
    "text": "So this graph is unrolled at\ncompiled time by our compiler, constructing a big sequence\nof computations.",
    "start": "1543180",
    "end": "1550110"
  },
  {
    "text": "And it can resolve the structure\nand communication pattern in that graph, and then\nmap it to the underlying substrate when we compile.",
    "start": "1550110",
    "end": "1556300"
  },
  {
    "text": " Also to notice here are the\nsplitter and the joiner. So we have a predefined set\nof splitter and joiners.",
    "start": "1556300",
    "end": "1563420"
  },
  {
    "text": "I'll go into more\ndetail later. But here we're just duplicating\nthe data to every one of these parallel\ncomponents, and then doing a",
    "start": "1563420",
    "end": "1569970"
  },
  {
    "text": "round-robin join pattern where\nwe bring them back together into a single output stream.",
    "start": "1569970",
    "end": "1575030"
  },
  {
    "text": "And if you want to do an\nequalizer, you basically need an adder at the bottom\nto add the different components together.",
    "start": "1575030",
    "end": "1581309"
  },
  {
    "text": "And another thing you can notice\nhere is that we have some inlining going on. So we actually embedded this\nsplitjoin inside a higher",
    "start": "1581310",
    "end": "1588529"
  },
  {
    "text": "level pipeline. So what this does is it prevents\nyou from having to name every component\nof your stream.",
    "start": "1588530",
    "end": "1594340"
  },
  {
    "text": "You can have a single stream\ndefinition with lots of nested components. And the natural extension is,\nyou can basically scale-up to",
    "start": "1594340",
    "end": "1602770"
  },
  {
    "text": "basically the natural size of\na procedure, just like you would in an imperative\nlanguage. And here is for example, an FM\nradio where we have a few",
    "start": "1602770",
    "end": "1610190"
  },
  {
    "text": "inline components. And the interesting thing here\nis that there's a pretty good correspondence between the\nlines of the text and the",
    "start": "1610190",
    "end": "1617530"
  },
  {
    "text": "actual structure of the graph. And that's something that's\nhard to find in an imperative language. I mean if you want to for\nexample, stitch nodes together",
    "start": "1617530",
    "end": "1625120"
  },
  {
    "text": "with edges, it's often very\nhard to visualize the resulting structure of the graph\nthat you have. But here",
    "start": "1625120",
    "end": "1631140"
  },
  {
    "text": "if you just go through the\nprogram, you can see that the AtoD component goes right over\nto the AtoD, the demodulator",
    "start": "1631140",
    "end": "1636940"
  },
  {
    "text": "to the demodulator, and so on. And even for the parallel\ncomponents, you can kind of piece them together.",
    "start": "1636940",
    "end": "1643720"
  },
  {
    "text": "so that's kind of how we think\nof building programs. Any questions so far?",
    "start": "1643720",
    "end": "1648930"
  },
  {
    "text": " OK so this is kind of\nhow you go about programming in StreamIt.",
    "start": "1648930",
    "end": "1654920"
  },
  {
    "text": "But programming is kind of a\nchug n' plug activity right? Nobody wants to be\na code monkey. The reason we're all here is to\nsee what's beautiful about",
    "start": "1654920",
    "end": "1661340"
  },
  {
    "text": "this programming model. Right? Don Knuth said this, a famous\ncomputer scientist from Stanford during his Turing\nAward Lecture you know,",
    "start": "1661340",
    "end": "1668320"
  },
  {
    "text": "\"Some programs are\nelegant, some are exquisite, some are sparkling. My claim is that it is possible\nto write grand",
    "start": "1668320",
    "end": "1674520"
  },
  {
    "text": "programs, noble programs, truly magnificent ones!\" Right. We want the best programs\npossible.",
    "start": "1674520",
    "end": "1680210"
  },
  {
    "text": "It's not just about\nmaking it work. We want really beautiful\nprograms. So what's beautiful about the streaming domain?",
    "start": "1680210",
    "end": "1686370"
  },
  {
    "text": "What can you go away with and\nsay wow, that was a really beautiful expression\nof the computation.",
    "start": "1686370",
    "end": "1691539"
  },
  {
    "text": "Well for me I think one of the\ninteresting things here is the splitjoin contruct. Splitjoins can really\nbe beautiful.",
    "start": "1691540",
    "end": "1698040"
  },
  {
    "text": "You know some mornings I just\nwake up and I'm like, oh I'm so glad I live in a world\nwith splitjoins.",
    "start": "1698040",
    "end": "1704250"
  },
  {
    "text": "You know? And and now splitjoins will\nbe part of your world. You can say this tomorrow. This is just wonderful.",
    "start": "1704250",
    "end": "1710380"
  },
  {
    "text": "So OK, what do we having in\nthe splitjoin constructs? You can duplicate data. You can do a round-robin\ncommunication pattern from one",
    "start": "1710380",
    "end": "1717650"
  },
  {
    "text": "to another, or round-robin\njoin. Now the duplicate is\npretty simple. You just take the input\nstream and duplicate",
    "start": "1717650",
    "end": "1724090"
  },
  {
    "text": "it to all the children. No problem. What do you do for\na round-robin? Well you path N items from the\ninput to a given child.",
    "start": "1724090",
    "end": "1733260"
  },
  {
    "text": "So for example, if N is 1, we'll\njust distribute one at a time to the child streams. And\nyou get a pattern like this, a",
    "start": "1733260",
    "end": "1741169"
  },
  {
    "text": "round-robin just going across. And you can do the same thing\non the joiner side.",
    "start": "1741170",
    "end": "1746290"
  },
  {
    "text": "Let's say you're joining\nwith a factor of one. You're just reading from the\nchildren and putting them into",
    "start": "1746290",
    "end": "1752490"
  },
  {
    "text": "a single stream. OK so the pretty colorful, but\nnothing too fancy yet.",
    "start": "1752490",
    "end": "1758190"
  },
  {
    "text": "Let's consider a different\nround-robin factor. So a round-robin of 2 means that\nwe peel off 2 items from",
    "start": "1758190",
    "end": "1764419"
  },
  {
    "text": "the input, and pass those items\nto the first output. OK there actually is going\nto be a quiz on this.",
    "start": "1764420",
    "end": "1769590"
  },
  {
    "text": "So ask questions of this\ndoesn't make sense. OK pass the next 2 items, and 2\nitems round-robin like that.",
    "start": "1769590",
    "end": "1777290"
  },
  {
    "text": "And you can actually\nhave nonuniform weights if you want to. So on the right let's\nsay we're doing round-robin 1, 2, 3.",
    "start": "1777290",
    "end": "1783270"
  },
  {
    "text": "That means we pass 1 item from\nthe first stream, 2 items from the next stream, and then 3\nitems from the third stream.",
    "start": "1783270",
    "end": "1789670"
  },
  {
    "text": "OK, pretty simple. We're just doing 1, 2,\nand 3, and so on. Does that make sense? I'm going to build on this\nso any questions?",
    "start": "1789670",
    "end": "1799050"
  },
  {
    "text": "OK this was colorful but this\ntotally beautiful yet. So what's beautiful\nabout this? well let's see how you might\nwrite a matrix transpose.",
    "start": "1799050",
    "end": "1806440"
  },
  {
    "text": "OK, something you guys have\nprobably all written at one point in your life is\ntransposing a matrix. Let's say this matrix has M\nrows, and it has N columns",
    "start": "1806440",
    "end": "1814430"
  },
  {
    "text": "going across. And we're starting with a\nrepresentation in which the stream is basically, I think\nthis is row major order.",
    "start": "1814430",
    "end": "1820659"
  },
  {
    "text": "The first thing that you're\ndoing is going across the rows before you're going to the\nnext the next row. I'm sorry you're going across\nthe columns, and then down to",
    "start": "1820660",
    "end": "1827679"
  },
  {
    "text": "the next row. So it's zigzagging like this. And you want to pass through\na transpose, so you",
    "start": "1827680",
    "end": "1833020"
  },
  {
    "text": "zigzag the other way. You do the first column,\nup, and then the next column, and so on.",
    "start": "1833020",
    "end": "1838340"
  },
  {
    "text": "And this comes up a lot\nin a stream program. So it turns out you can\nrepresent this as a splitjoin.",
    "start": "1838340",
    "end": "1844080"
  },
  {
    "text": "Oh that's not good.  Just in my moment in\nglory as well.",
    "start": "1844080",
    "end": "1852420"
  },
  {
    "text": "OK, yeah slides. You can download slides. ",
    "start": "1852420",
    "end": "1857540"
  },
  {
    "text": "Actually I can do this\non the board. This is the thinking\npart anyway. Yeah, could you just\nbring up GMail? I have a backup on GMail.",
    "start": "1857540",
    "end": "1863820"
  },
  {
    "text": "Can we focus on the board? So this is going to be a\nlittle exercise anyway.",
    "start": "1863820",
    "end": "1869990"
  },
  {
    "text": "OK, here's what we had. We had M, M rows, N columns.",
    "start": "1869990",
    "end": "1880230"
  },
  {
    "text": "We started with an interleaving\nlike this. ",
    "start": "1880230",
    "end": "1887640"
  },
  {
    "text": "Right, and we want to\ngo into a splitjoin. And this will be a round-robin\nconstruct.",
    "start": "1887640",
    "end": "1893030"
  },
  {
    "text": "And what I want you to do is\nfill in the round-robin weight, and also the number of\nthe streams. And you can have",
    "start": "1893030",
    "end": "1901020"
  },
  {
    "text": "a round-robin at the bottom.  And when it comes out,\nyou want the opposite",
    "start": "1901020",
    "end": "1908240"
  },
  {
    "text": "interleaving. ",
    "start": "1908240",
    "end": "1916130"
  },
  {
    "text": "This is M and N. OK so there are 3 unknowns here,\nwhat you're doing the",
    "start": "1916130",
    "end": "1926059"
  },
  {
    "text": "round-robin by-- can you guys\nsee that over there-- how many parallel streams there\nare, and what you're",
    "start": "1926060",
    "end": "1932290"
  },
  {
    "text": "joining the round-robin by. ",
    "start": "1932290",
    "end": "1937520"
  },
  {
    "text": "Ok so I'm going to give you a\nminute to think about this. Try to think about this. See if you can figure out what\nthese constants are. You just basically want to read\nfrom this data in a row",
    "start": "1937520",
    "end": "1944260"
  },
  {
    "text": "major pattern, M rows and N\ncolumns, and end up with something that's column major.",
    "start": "1944260",
    "end": "1951450"
  },
  {
    "text": "What are the values\nfor the constant? Does it makes sense? Ask a question if it\ndoesn't make sense.",
    "start": "1951450",
    "end": "1956919"
  },
  {
    "text": "Yeah? AUDIENCE: So we assume that\nvalues are going to, based on the line that you drew, across\nit, tests like a stream line?",
    "start": "1956920",
    "end": "1965070"
  },
  {
    "text": "BILL THIES: Right,\nright, right. So those values are coming\ndown the stream. You have a 1-dimensional\nstream. It's interleaved like this.",
    "start": "1965070",
    "end": "1970870"
  },
  {
    "text": "So you'll be reading\nthem like this. And then you the output a\n1-dimensional stream that is threading the columns.",
    "start": "1970870",
    "end": "1977170"
  },
  {
    "text": "Does that make sense? Somebody ask another question. Yeah AUDIENCE: So the actual matrix\ntranspose codes, it's my",
    "start": "1977170",
    "end": "1988470"
  },
  {
    "text": "understand that nobody actually\ndoes it sequentially like that because of\nlocality issues. Instead it's broken\nup into blocks.",
    "start": "1988470",
    "end": "1995690"
  },
  {
    "text": "BILL THIES: So there are\nways to optimize this. AUDIENCE: And after you've sort\nof serialized it, can you",
    "start": "1995690",
    "end": "2001150"
  },
  {
    "text": "then capture.. PROFESSOR: Guys,\n[UNINTELLIGIBLE PHRASE]",
    "start": "2001150",
    "end": "2006510"
  },
  {
    "text": "has a blocking segment. So you can heirarchically\ndo that. So, normally what happens is you\ndo the blocks and inside",
    "start": "2006510",
    "end": "2014203"
  },
  {
    "text": "the blocks, you can\ndo it again. You can do it at two\nlevels, basically. ",
    "start": "2014203",
    "end": "2025950"
  },
  {
    "text": "BILL THIES: Any hypotheses? Anyone? AUDIENCE: Is it N for first\none, M for the second one?",
    "start": "2025950",
    "end": "2035429"
  },
  {
    "text": "BILL THIES: OK, what\ndo we have AUDIENCE: N for the first one,\nand M for the second? BILL THIES: N,M and",
    "start": "2035430",
    "end": "2042490"
  },
  {
    "text": "AUDIENCE: Same for the M? BILL THIES: Same, M?",
    "start": "2042490",
    "end": "2047990"
  },
  {
    "text": "AUDIENCE: Yeah. BILL THIES: OK OK, this\nis a hypothesis.",
    "start": "2047990",
    "end": "2057560"
  },
  {
    "text": "Other hypotheses? AUDIENCE: N, M, 1. ",
    "start": "2057560",
    "end": "2066359"
  },
  {
    "text": "BILL THIES: OK, anyone else?  Any amendments?",
    "start": "2066360",
    "end": "2073000"
  },
  {
    "text": "AUDIENCE: How about 1, 1, 1? BILL THIES: 1, 1, 1? ",
    "start": "2073000",
    "end": "2078750"
  },
  {
    "text": "OK lottery is closing. Yep? AUDIENCE: !, M, M BILL THIES: 1 M, M?",
    "start": "2078750",
    "end": "2084030"
  },
  {
    "text": "1, M, M, OK and last call?",
    "start": "2084030",
    "end": "2093260"
  },
  {
    "text": "OK I believe two of the ones\nsubmitted are correct. Is this and, yeah?",
    "start": "2093260",
    "end": "2101190"
  },
  {
    "text": "OK I think this, N, M, 1, works\nand 1, N, M, works. So let me explain the 1, N,\nM, this is how I like",
    "start": "2101190",
    "end": "2107830"
  },
  {
    "text": "to think about it. One way to think about this\nis we just want to move the whole matrix.",
    "start": "2107830",
    "end": "2113370"
  },
  {
    "text": "You doing OK, yeah? OK we just want to\nmove the whole matrix into this splitjoin.",
    "start": "2113370",
    "end": "2119599"
  },
  {
    "text": "So the way we can do that\nis have M columns of the splitjoin since we have N\ncolumns of the matrix.",
    "start": "2119600",
    "end": "2125660"
  },
  {
    "text": "And what we'll do is we'll just\ndo a round-robin one at a time, from the columns of\nthe matrix into the",
    "start": "2125660",
    "end": "2131400"
  },
  {
    "text": "columns of the splitjoin. So we'll take the first element,\nsend it to the last, next element, next column,\nand so on.",
    "start": "2131400",
    "end": "2138070"
  },
  {
    "text": "So we get the whole matrix here,\nNow I want to read it out column-wise. So we'll do a joiner of M. We'll\nread M from the left",
    "start": "2138070",
    "end": "2144650"
  },
  {
    "text": "stream that'll read all M items\nfrom the columns, send it out, and then M items\nin the next column, and",
    "start": "2144650",
    "end": "2150300"
  },
  {
    "text": "then send it out. Does that make sense? ",
    "start": "2150300",
    "end": "2155960"
  },
  {
    "text": "How many people understood\nthat? All right, So if you think about it, you\ncan also do it in M, N, 1.",
    "start": "2155960",
    "end": "2162920"
  },
  {
    "text": "That's basically, yeah,\nit's very similar. ",
    "start": "2162920",
    "end": "2174890"
  },
  {
    "text": "OK there we were. And yes. We can do 1, N, M. We basically\nread the matrix",
    "start": "2174890",
    "end": "2181570"
  },
  {
    "text": "down, and then pull it\ndown into column. And it's very easy to write\nthis as a transpose.",
    "start": "2181570",
    "end": "2189260"
  },
  {
    "text": "So we just have a transpose\nfilter in which we're doing nothing. No competition in the actual\nrows or the actual contents of",
    "start": "2189260",
    "end": "2196630"
  },
  {
    "text": "the splitjoin. And we just split the data by\n1, have N different identity filters, and then join it back\ntogether by M. Any questions",
    "start": "2196630",
    "end": "2204390"
  },
  {
    "text": "about this? An interesting way to\nwrite a transpose. OK so there's one more\nopportunity to shine here.",
    "start": "2204390",
    "end": "2212260"
  },
  {
    "text": "And that's a little more\ninteresting permutation called a bit-reversed ordering. And so this comes up in an FFT\nand another algorithm.",
    "start": "2212260",
    "end": "2219120"
  },
  {
    "text": "The permutation here, is that\nwe're taking the data at the index n. And let's say n has binary\ndigits b sub 0, b sub",
    "start": "2219120",
    "end": "2225690"
  },
  {
    "text": "1, up to b sub k. And we want to rearrange that\ndata, so this data goes to a",
    "start": "2225690",
    "end": "2231390"
  },
  {
    "text": "different index with the\nreversed bits of its index. So if it was and index n before,\nit ends up at b sub k",
    "start": "2231390",
    "end": "2239319"
  },
  {
    "text": "down to b sub 1, b sub 0. So for example, let's\njust look at 3-digit binary numbers.",
    "start": "2239320",
    "end": "2244329"
  },
  {
    "text": "If we have 0, 0, 0, this\nis 1 input item. We're reversing those digits,\nyou still get 0, 0, 0.",
    "start": "2244330",
    "end": "2252720"
  },
  {
    "text": "Item at index 1 will\nbe 0, 0, 1. We want to reorder\nthat to index 4.",
    "start": "2252720",
    "end": "2258330"
  },
  {
    "text": "OK, 1, 0, 0, 0, 1, 0, stays the\nsame, 0 1, 1, goes to 1,",
    "start": "2258330",
    "end": "2264270"
  },
  {
    "text": "1, 0 shifts over. And from there on,\nit's symmetric. AUDIENCE:\n[UNINTELLIGIBLE PHRASE]",
    "start": "2264270",
    "end": "2269410"
  },
  {
    "text": "BILL THIES: Sorry? AUDIENCE:\n[UNINTELLIGIBLE PHRASE]. BILL THIES: OK. So here I'm writing\nthe indices.",
    "start": "2269410",
    "end": "2274480"
  },
  {
    "text": "So I'm not writing the data. So index 0, 1, 2, 3 up through\nindex 8., or index 7.",
    "start": "2274480",
    "end": "2280940"
  },
  {
    "text": "OK and on the bottom you have\nindices 0 through 7. So the data will actually be\nmoved, reordered like that.",
    "start": "2280940",
    "end": "2287780"
  },
  {
    "text": "Does that make sense? It's a reordering of data. Does this transformation\nmake sense? Other questions?",
    "start": "2287780",
    "end": "2293980"
  },
  {
    "text": "OK, it turns out you can write\nthis as a splitjoin. And you just need 3 different\nweights for the round-robins.",
    "start": "2293980",
    "end": "2301380"
  },
  {
    "text": "OK round-robin with 1 weight\non the top here, and two different round-robin weights\non the bottom.",
    "start": "2301380",
    "end": "2308480"
  },
  {
    "text": "And here I'm assuming you have 3\nbinary digits in your index. So you're reordering\nin groups to 8.",
    "start": "2308480",
    "end": "2315290"
  },
  {
    "text": "OK, so let me give you a second\nto think about this. What are the values\nfor these weights?",
    "start": "2315290",
    "end": "2320670"
  },
  {
    "text": "I'll give you a hint\nin just a second, or ask another question. Yes?",
    "start": "2320670",
    "end": "2326096"
  },
  {
    "text": "AUDIENCE:\n[UNINTELLIGIBLE PHRASE]. ",
    "start": "2326096",
    "end": "2331170"
  },
  {
    "text": "BILL THIES: So what we're doing\nhere, is we're exposing the communication pattern. That's the thing. If you write this in an\nimperative way, you end up",
    "start": "2331170",
    "end": "2337800"
  },
  {
    "text": "basically having your, you're\nconflating basically the data dependencies with the\nreordering pattern.",
    "start": "2337800",
    "end": "2343930"
  },
  {
    "text": "So what I'm trying to convey\nhere, is how you can use the streaming model to show how\nyou're sending data around.",
    "start": "2343930",
    "end": "2349789"
  },
  {
    "text": "Because when you're on an\narchitecture-like cell, everything is about\nthe data motion. You're taking data from one\nplace and you're trying to",
    "start": "2349790",
    "end": "2355460"
  },
  {
    "text": "efficiently get it to the\nproducers or the consumers. And you really need to-- the\ncompiler needs to understand",
    "start": "2355460",
    "end": "2361400"
  },
  {
    "text": "the data motion. And also, it's just another\nway of writing it, which I think it's actually easier to\nunderstand once you see it.",
    "start": "2361400",
    "end": "2367099"
  },
  {
    "text": "It's a way to think about the\nactual reordering from a theoretical standpoint",
    "start": "2367100",
    "end": "2373060"
  },
  {
    "text": "Any wagers on this? ",
    "start": "2373060",
    "end": "2379550"
  },
  {
    "text": "So what we to do, if you think\nabout the bit-reverse ordering, what we want to do is\ndistribute the data by the",
    "start": "2379550",
    "end": "2385630"
  },
  {
    "text": "low-order bits. And then gather the data\nby the high-order bits.",
    "start": "2385630",
    "end": "2392080"
  },
  {
    "text": "So you want a fine-grained\nparity when you're shuffling. You can also do it the\nother way around. It's totally symmetrical.",
    "start": "2392080",
    "end": "2397340"
  },
  {
    "text": "But one way to think about it\nis, you want a fine-grained parity when you're distributing\ndata, and then a course-grained when you're\ncoming together.",
    "start": "2397340",
    "end": "2403540"
  },
  {
    "text": " Anyone see it? ",
    "start": "2403540",
    "end": "2414120"
  },
  {
    "text": "Give you ten more seconds. ",
    "start": "2414120",
    "end": "2421530"
  },
  {
    "text": "Come on? Yeah it is a little\nbit tricky. OK well let me explain\nhow it works.",
    "start": "2421530",
    "end": "2429030"
  },
  {
    "text": "So 1, 2, and 4. Ok so what these round-robin 1\nsplitters do, is these are",
    "start": "2429030",
    "end": "2435900"
  },
  {
    "text": "basically the fine-grained\nparities. So OK, the first round-robin,\nthat will send all the even",
    "start": "2435900",
    "end": "2441740"
  },
  {
    "text": "bits to the left, and all the\nodd values to the right. Right, that's the lowest\norder bit.",
    "start": "2441740",
    "end": "2447060"
  },
  {
    "text": "Because it's doing\nevery other one, shuffling it left and right. So this round-robin is seeing\nonly the even values.",
    "start": "2447060",
    "end": "2453630"
  },
  {
    "text": "Now it's going to split\nthem up based on who's divisible by 4. Now we'll go to the left\nor go to the right. This is basically shuffling in\nthe order of the bits, from",
    "start": "2453630",
    "end": "2461609"
  },
  {
    "text": "low-order bits to\nhigh-order bits. So these will be ordered in\nterms of their low-order bits.",
    "start": "2461610",
    "end": "2467250"
  },
  {
    "text": "And now we just want to read\nthem out from left to right. Just take the order that we made\nwith those round-robins,",
    "start": "2467250",
    "end": "2473010"
  },
  {
    "text": "and read them out from\nleft to right. And since they have 8 values,\nyou can do that just by chunking them up.",
    "start": "2473010",
    "end": "2478410"
  },
  {
    "text": "We'll read 2, 2, and then we'll\nread these two, 2 and 2, and now put all 8. Does that make sense?",
    "start": "2478410",
    "end": "2485010"
  },
  {
    "text": " OK, so yes, it's a bit clever.",
    "start": "2485010",
    "end": "2490100"
  },
  {
    "text": "So I think it's a nice way\nof thinking about what a bit-reversed ordering means. And you can write this in\na very general way.",
    "start": "2490100",
    "end": "2495870"
  },
  {
    "text": "You just have a recursive\nbit-reversed filter for N values. And base case, you\nonly have 2.",
    "start": "2495870",
    "end": "2501950"
  },
  {
    "text": "So there's no reordering\nto do when you when you think about it. So you're not doing\nany computation.",
    "start": "2501950",
    "end": "2507550"
  },
  {
    "text": "Otherwise yo have a round-robin\nsplit in half, and then have a coarse-grain\njoiner. So, you get a structure\nlike this.",
    "start": "2507550",
    "end": "2516060"
  },
  {
    "text": "If you're, as you're building\nup, just distributing and then bringing back together in\na course-grained way.",
    "start": "2516060",
    "end": "2522329"
  },
  {
    "text": "OK.  Let's see how do I\ndon't do this?",
    "start": "2522330",
    "end": "2527720"
  },
  {
    "text": "OK so one thing to notice,\nthere's one more example of a splitjoin. Question? AUDIENCE: [UNINTELLIGIBLE].",
    "start": "2527720",
    "end": "2533140"
  },
  {
    "text": "BILL THIES: OK so in general, at\nthe base of this hierarchy, we could've added some other\nfilter to do some competition.",
    "start": "2533140",
    "end": "2540260"
  },
  {
    "text": "Identity just means we're\ndoing no computation. It's a predefined filter\nthat just does nothing. PROFESSOR: On complex data.",
    "start": "2540260",
    "end": "2546460"
  },
  {
    "text": "BILL THIES: On complex data. Sorry this is a templated\nfilter. So we're reordering\ncomplex values.",
    "start": "2546460",
    "end": "2552100"
  },
  {
    "text": "And we're passing the\ninput to the output. Amir? AUDIENCE: [UNINTELLIGIBLE]",
    "start": "2552100",
    "end": "2560050"
  },
  {
    "text": "BILL THIES: In general the\nlanguage does not have support for templates. We only do it for these\nbase classes. That's more of an implementation\ndetail.",
    "start": "2560050",
    "end": "2566570"
  },
  {
    "text": "Yeah. AUDIENCE: [UNINTELLIGIBLE]. BILL THIES: Right now\nthere isn't, but nothing fundamental there. Yeah? Other questions?",
    "start": "2566570",
    "end": "2573410"
  },
  {
    "text": "Yeah? AUDIENCE: How did you know that\nthere are two filters after that?",
    "start": "2573410",
    "end": "2579510"
  },
  {
    "text": "BILL THIES: Two filters,\nsorry here? AUDIENCE: [UNINTELLIGIBLE].",
    "start": "2579510",
    "end": "2586030"
  },
  {
    "text": "BILL THIES: OK. OK. So we have two add statements\nbetween the split and the join.",
    "start": "2586030",
    "end": "2591740"
  },
  {
    "text": "So that branches to two\nparallel streams. Is that your question? ",
    "start": "2591740",
    "end": "2600610"
  },
  {
    "text": "AUDIENCE: Yeah. How do you that theorem, that\nthere's not like three. BILL THIES: So the compiler\nwill analyze this, the compile time. And it'll know these values of\nN and propagate them down at",
    "start": "2600610",
    "end": "2608360"
  },
  {
    "text": "compile time. So it'll basically symbolically\nevaluate this code, see there are two\nbranches, and you can unroll",
    "start": "2608360",
    "end": "2615010"
  },
  {
    "text": "this communication pattern. AUDIENCE: I think another way of\nthinking about it is, each",
    "start": "2615010",
    "end": "2621800"
  },
  {
    "text": "add statement essentially\nadds another branch in your splitjoin. PROFESSOR: That is\nanother box.",
    "start": "2621800",
    "end": "2629240"
  },
  {
    "text": "BILL THIES: It's about to\nget clear actually. Other questions? ",
    "start": "2629240",
    "end": "2636089"
  },
  {
    "text": "AUDIENCE: [UNINTELLIGIBLE] BILL THIES: That's one way\nto think about it, yeah. Wait say again, counting? AUDIENCE: A rating sort.",
    "start": "2636090",
    "end": "2643060"
  },
  {
    "text": "BILL THIES: A rating\nsort, right. OK, well is it sorting? It's not really sorting.",
    "start": "2643060",
    "end": "2649460"
  },
  {
    "text": "AUDIENCE: Well it's not\nreally sorting. BILL THIES: It's\na permutation. AUDIENCE: Could you\ndo a rating sort? BILL THIES: You could\ndo a rating sort.",
    "start": "2649460",
    "end": "2654940"
  },
  {
    "text": "So actually, what I want to show\nnext is how you can morph this program into a merge sort\nby changing only a few lines.",
    "start": "2654940",
    "end": "2661890"
  },
  {
    "text": "OK look carefully. Don't blink. OK there's merge sort. So very similar pattern.",
    "start": "2661890",
    "end": "2667710"
  },
  {
    "text": "This is one of those idioms.\nIt's a recursive idiom with splitjoins. But now in the base case,\nwe have a sort.",
    "start": "2667710",
    "end": "2673130"
  },
  {
    "text": "So we would basically\nbranch down. What we ended up with was\na sort in the base case. We're just sorting\na few values.",
    "start": "2673130",
    "end": "2679800"
  },
  {
    "text": "And we call [? merge sort ?]\ntwice again, and then we do a merge. So instead of identity at the\nbase case here, we now have a",
    "start": "2679800",
    "end": "2686150"
  },
  {
    "text": "basic sorting routine. And we merge those results\nfrom both sides. And the only thing I changed in\nterms of the communication",
    "start": "2686150",
    "end": "2692850"
  },
  {
    "text": "rate, is to be more efficient\nwe just distributed data in chuncks instead of doing a\nfine-grained splitting.",
    "start": "2692850",
    "end": "2699120"
  },
  {
    "text": "Actually you do it however\nyou want in a merge sort. But this is chunked up. And let's just zoom in here. This is how a merger sort\nlooks in StreamIt.",
    "start": "2699120",
    "end": "2706420"
  },
  {
    "text": "So we split the data two ways,\nboth directions, come together, do a sort on both\nsides, and then you merge.",
    "start": "2706420",
    "end": "2714210"
  },
  {
    "text": "And so by having the, you know\nyou can interleave pipelines and splitjoins like this. So you have these hierarchical\nstructures that are coming",
    "start": "2714210",
    "end": "2719720"
  },
  {
    "text": "back together. Does this make sense? OK.",
    "start": "2719720",
    "end": "2725890"
  },
  {
    "text": "I'm going to hold off on\nmessaging actually. Let me see, what do\nI want to cover?",
    "start": "2725890",
    "end": "2732830"
  },
  {
    "text": "OK let me actually\nskip to the end.  Oh, I can show you this.",
    "start": "2732830",
    "end": "2738580"
  },
  {
    "text": " Yeah, I'm going to cut\nshort a little bit. So here's how other programs\nlook written in StreamIt.",
    "start": "2738580",
    "end": "2744859"
  },
  {
    "text": "OK, you can have\na Bitonic sort. OK so you see a lot of these\nregular structures. And the compiler can unroll\nthis and then",
    "start": "2744860",
    "end": "2750340"
  },
  {
    "text": "match it to the substrate. This is how and FFT looks. It's quite an ah elegant\nimplementation of an FFT.",
    "start": "2750340",
    "end": "2756740"
  },
  {
    "text": "It'd be good to go into\nin more detail. You can do things like block\nmatrix multiply. You don't always have to have\ncolumn or row-wise ordering.",
    "start": "2756740",
    "end": "2764420"
  },
  {
    "text": "It's natural to split\nthings up like this. We have a lot of DSP algorithms,\nthe filter bank, FM radio with equalizer,\nradar array front end.",
    "start": "2764420",
    "end": "2772789"
  },
  {
    "text": "Here's an MP3 decoder.  And let's see, I'm going to\nskip this section and just",
    "start": "2772790",
    "end": "2778160"
  },
  {
    "text": "give you a taste for\nthe end here. ",
    "start": "2778160",
    "end": "2783880"
  },
  {
    "text": "I'm skipping a hundred slides. Yeah.",
    "start": "2783880",
    "end": "2789839"
  },
  {
    "text": "OK so if I give you a feel. Our biggest program written\nin StreamIt so far, is the complete MPEG-2 encoder\nand decoder.",
    "start": "2789840",
    "end": "2795680"
  },
  {
    "text": "So here is MPEG-2 decoder. And I think you've seen\nblock diagrams of this already in the class. And so it's a pretty\nnatural expression.",
    "start": "2795680",
    "end": "2801799"
  },
  {
    "text": "You can really get a feel for\nthe high-level structure of the algorithm mapping down. And for example, here on the\ntop we're doing the spatial",
    "start": "2801800",
    "end": "2807430"
  },
  {
    "text": "decoding looking inside\neach frame. Whereas at the bottom we're\ndoing the temporal decoding between two frames, the\nmotion compensation.",
    "start": "2807430",
    "end": "2815579"
  },
  {
    "text": "And one thing that I didn't have\na chance to mention, is that we have a concept of\nteleport messaging.",
    "start": "2815580",
    "end": "2821540"
  },
  {
    "text": "What this means is, I showed you\nhow the steady state flow data goes between these\nactors in the stream.",
    "start": "2821540",
    "end": "2828270"
  },
  {
    "text": "But sometimes you want to\ncontrol the stream as well. For example, this is\na variable length",
    "start": "2828270",
    "end": "2833280"
  },
  {
    "text": "decoder at the top. It's parsing the input data. It might want to change how the\nprocessing is happening",
    "start": "2833280",
    "end": "2838390"
  },
  {
    "text": "downstream. For example, say that you have--\nyou know in this case you have different picture\ntypes coming in.",
    "start": "2838390",
    "end": "2844430"
  },
  {
    "text": "And you want to tell other\ncomponents to change their processing based on a\nnon-local effect. And that's hard to do if you\njust want static data rates.",
    "start": "2844430",
    "end": "2852340"
  },
  {
    "text": "But what we have is this limited\nnotion of limited dynamism, where you're basically\npoking into somebody",
    "start": "2852340",
    "end": "2857660"
  },
  {
    "text": "else's stream. And we let you do that\nvery precisely. I don't have time to go into\nthe details, but you can basically synchronize the\narrival of these messages with",
    "start": "2857660",
    "end": "2865500"
  },
  {
    "text": "the data that's also flowing\nthrough the stream, And so in this case, were sending through\nthe picture type. And it really simplifies\nthe program code.",
    "start": "2865500",
    "end": "2872320"
  },
  {
    "text": "I didn't have time for details,\nbut why don't we put in the slides anyway, if\nyou're interested.",
    "start": "2872320",
    "end": "2877530"
  },
  {
    "text": "And if you do a similar\ncommunication pattern in C, it's a little bit\nof a nightmare. You have all these different,\nbasically memory spaces,",
    "start": "2877530",
    "end": "2885020"
  },
  {
    "text": "different files. And the control information\nis basically going left and right all over. So this really helps both the\ncompiler and the programmer as",
    "start": "2885020",
    "end": "2892650"
  },
  {
    "text": "well in StreamIt. So it's all implemented. It's about 2,000 lines\nof code in StreamIt.",
    "start": "2892650",
    "end": "2898720"
  },
  {
    "text": "Which is about 2/3 of the size\nof the C code, taking into account similar functionality\nthere.",
    "start": "2898720",
    "end": "2904020"
  },
  {
    "text": "And it's a pretty big program. You can write 48 static streams.\nAnd then we expand that to more than 600\ninstantiated filters.",
    "start": "2904020",
    "end": "2910400"
  },
  {
    "text": "So this gives you a lot of\nflexibility when you're trying to get parallelism. Question? AUDIENCE: When a compiler\ndownloads all bytes?",
    "start": "2910400",
    "end": "2915920"
  },
  {
    "text": "BILL THIES: Oh the object\ncode, you mean. OK, so right now our current\nimplementation, we duplicate a",
    "start": "2915920",
    "end": "2921920"
  },
  {
    "text": "lot of code. So it end up being bigger\nthan it needs to be. There's no reason for\nus to do that. That's kind of a-- we have\na research compiler",
    "start": "2921920",
    "end": "2928630"
  },
  {
    "text": "that make that easy. AUDIENCE: So object-wise\n, its not data. BILL THIES: Object-wise we\nstill need to do that",
    "start": "2928630",
    "end": "2934350"
  },
  {
    "text": "comparison. Yeah that's a good question. Yeah. Other questions?",
    "start": "2934350",
    "end": "2940940"
  },
  {
    "text": "OK so let me cut to the end. OK, so we have the StreamIt\nlanguage. And we think it really preserves the program structure.",
    "start": "2940940",
    "end": "2947569"
  },
  {
    "text": "It's a new way of thinking about\nhow you orchestrate the data reordering with the\nsplitjoins, showing you who is communicating to who, and how\nyou can stitch together",
    "start": "2947570",
    "end": "2954470"
  },
  {
    "text": "different pieces in your\nprogram development. And again, really our goal is to\nget this scalable multicore",
    "start": "2954470",
    "end": "2960400"
  },
  {
    "text": "performance. But you can't get people\non board just on a performance stat. You need to show them a new\nprogramming model that",
    "start": "2960400",
    "end": "2965540"
  },
  {
    "text": "actually makes their\nlives easier. So that's what we're\nworking on. And thinks with listening. [APPLAUSE]",
    "start": "2965540",
    "end": "2975520"
  },
  {
    "text": "BILL THIES: Any last\nquestions? Yes? AUDIENCE: So in the\nanti-decoder, you have a lot",
    "start": "2975520",
    "end": "2982770"
  },
  {
    "text": "of computations size that were\nnot sequential streams. Like for example, the output of the\ndistinct cosine transform is",
    "start": "2982770",
    "end": "2992300"
  },
  {
    "text": "not a stream of pixel, you are\ngoing to have coefficients and",
    "start": "2992300",
    "end": "2997750"
  },
  {
    "text": "things like that. Which are a logical\nsort of chunk. BILL THIES: Yes so depending\non the granularity of the",
    "start": "2997750",
    "end": "3004780"
  },
  {
    "text": "competition, you don't need to\npass individual values over the stream. For example, you can have a\nstream that inputs the whole",
    "start": "3004780",
    "end": "3010540"
  },
  {
    "text": "array at a time. And so we basically advocate\nthat if you have something",
    "start": "3010540",
    "end": "3016119"
  },
  {
    "text": "that course-grained, you should\nbe passing an array or a macroblock, in the case of\nMPEG, or a set of coefficients",
    "start": "3016120",
    "end": "3021660"
  },
  {
    "text": "in a structure. So when you have coarse-grain\nparallelism, you write your program in a course-grained\nway. The fine-grained things\nI showed for the bit",
    "start": "3021660",
    "end": "3028599"
  },
  {
    "text": "interleaving and so on, is\nmore for the fine-grained programs. AUDIENCE:\nCan you do both? In the sense that can you stream\nover an array, so it's",
    "start": "3028600",
    "end": "3038305"
  },
  {
    "text": "stream of stream, so to speak. BILL THIES: So there's an\ninteresting multidimensional problem there. Right now we've taken a\n1-dimensional approach.",
    "start": "3038305",
    "end": "3045700"
  },
  {
    "text": "So far it's basically the\nprogrammer has to set an iteration order, and end up with\na 1-dimensional stream",
    "start": "3045700",
    "end": "3051500"
  },
  {
    "text": "coming into and out\nof every filter. We're working on\nextending that. Yeah, but when you have\nbasically streams of",
    "start": "3051500",
    "end": "3057020"
  },
  {
    "text": "2-dimensional data, you like the\nfreedom to either iterate basically in time or\nin space, depending",
    "start": "3057020",
    "end": "3062339"
  },
  {
    "text": "on what you're doing. And so I think that's more\nof a research problem. So far we're just been doing a\n1-dimensional representation.",
    "start": "3062340",
    "end": "3068240"
  },
  {
    "text": "Yeah good point. Other questions?",
    "start": "3068240",
    "end": "3073650"
  },
  {
    "text": "Yeah? AUDIENCE: Why did you decide on\nthis synchronous dataflow model as opposed to something\nmore general?",
    "start": "3073650",
    "end": "3079620"
  },
  {
    "text": "BILL THIES: So our philosophy\nhas been that you want to start with the most kind of\nbasic block of a stream",
    "start": "3079620",
    "end": "3087180"
  },
  {
    "text": "program, and optimize\nit really well. And then you can stitch\nthose together into higher level blocks.",
    "start": "3087180",
    "end": "3092510"
  },
  {
    "text": "So we think of synchronous\ndataflow as being kind of the basic block of streaming. You know what's coming in, you\nknow what's coming out.",
    "start": "3092510",
    "end": "3098790"
  },
  {
    "text": "And even if you have a more\ngeneral model, they'll be pieces that fit under their\nsynchronous dataflow model.",
    "start": "3098790",
    "end": "3104750"
  },
  {
    "text": "And so we saw a lot\nof optimizations opportunities in there. And really knowing those IO\nrates can let you do a lot of",
    "start": "3104750",
    "end": "3110099"
  },
  {
    "text": "things that you can't do\nin a general model. So I wanted to get the simple\ncase right first. And actually kind of our focus now is on\nexpanding, and how do you look",
    "start": "3110100",
    "end": "3118010"
  },
  {
    "text": "at the heterogeneous system, and\nhow do you optimize a more dynamic system. Yep.",
    "start": "3118010",
    "end": "3123230"
  },
  {
    "text": " Other questions? ",
    "start": "3123230",
    "end": "3130520"
  },
  {
    "text": "OK. Yes. You can check out\nour web page. Yeah if you Google for\nStreamIt, I'm sure",
    "start": "3130520",
    "end": "3136549"
  },
  {
    "text": "you can find it. Yeah, we have a public\nrelease. Yes, send us any problems.\nIt's actually it's a good",
    "start": "3136550",
    "end": "3142380"
  },
  {
    "text": "test. We want to make sure\nit works for everyone. But I mean, we've had, you know,\nhundreds of downloads. There are a lot of people\nusing StreamIt.",
    "start": "3142380",
    "end": "3148930"
  },
  {
    "text": "It shouldn't break if\nyou download it. Yeah. ",
    "start": "3148930",
    "end": "3154359"
  },
  {
    "text": "OK good. Thanks. ",
    "start": "3154360",
    "end": "3158958"
  }
]