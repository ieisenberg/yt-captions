[
  {
    "text": " [MUSIC PLAYING]",
    "start": "0",
    "end": "14550"
  },
  {
    "text": "PROFESSOR: I'd like to\nwelcome you to this course on computer science. ",
    "start": "14550",
    "end": "28370"
  },
  {
    "text": "Actually, that's a terrible\nway to start. Computer science is a terrible\nname for this business. First of all, it's\nnot a science.",
    "start": "28370",
    "end": "35572"
  },
  {
    "text": "It might be engineering or it\nmight be art, but we'll actually see that computer\nso-called science actually has",
    "start": "35572",
    "end": "43470"
  },
  {
    "text": "a lot in common with magic,\nand we'll see that in this course. So it's not a science. It's also not really very\nmuch about computers.",
    "start": "43470",
    "end": "53340"
  },
  {
    "text": "And it's not about computers in\nthe same sense that physics is not really about particle\naccelerators, and biology is",
    "start": "53340",
    "end": "62920"
  },
  {
    "text": "not really about microscopes\nand petri dishes. And it's not about computers\nin the same sense that",
    "start": "62920",
    "end": "70400"
  },
  {
    "text": "geometry is not really about\nusing surveying instruments.",
    "start": "70400",
    "end": "76480"
  },
  {
    "text": "In fact, there's a lot of\ncommonality between computer science and geometry. Geometry, first of all,\nis another subject",
    "start": "76480",
    "end": "83829"
  },
  {
    "text": "with a lousy name. The name comes from Gaia,\nmeaning the Earth, and metron, meaning to measure.",
    "start": "83830",
    "end": "89770"
  },
  {
    "text": "Geometry originally\nmeant measuring the Earth or surveying. And the reason for that was\nthat, thousands of years ago,",
    "start": "89770",
    "end": "97260"
  },
  {
    "text": "the Egyptian priesthood\ndeveloped the rudiments of geometry in order to figure\nout how to restore the",
    "start": "97260",
    "end": "105320"
  },
  {
    "text": "boundaries of fields that were\ndestroyed in the annual flooding of the Nile. And to the Egyptians who did\nthat, geometry really was the",
    "start": "105320",
    "end": "112360"
  },
  {
    "text": "use of surveying instruments. Now, the reason that we think\ncomputer science is about",
    "start": "112360",
    "end": "117850"
  },
  {
    "text": "computers is pretty much the\nsame reason that the Egyptians thought geometry was about\nsurveying instruments.",
    "start": "117850",
    "end": "124520"
  },
  {
    "text": "And that is, when some field\nis just getting started and you don't really understand it\nvery well, it's very easy to",
    "start": "124520",
    "end": "131790"
  },
  {
    "text": "confuse the essence of what\nyou're doing with the tools that you use.",
    "start": "131790",
    "end": "137590"
  },
  {
    "text": "And indeed, on some absolute\nscale of things, we probably know less about the essence of\ncomputer science than the",
    "start": "137590",
    "end": "145100"
  },
  {
    "text": "ancient Egyptians really\nknew about geometry.  Well, what do I mean by the\nessence of computer science?",
    "start": "145100",
    "end": "152570"
  },
  {
    "text": "What do I mean by the\nessence of geometry? See, it's certainly true that\nthese Egyptians went off and used surveying instruments, but\nwhen we look back on them",
    "start": "152570",
    "end": "160190"
  },
  {
    "text": "after a couple of thousand\nyears, we say, gee, what they were doing, the important stuff\nthey were doing, was to",
    "start": "160190",
    "end": "165910"
  },
  {
    "text": "begin to formalize notions about\nspace and time, to start",
    "start": "165910",
    "end": "172510"
  },
  {
    "text": "a way of talking about\nmathematical truths formally. That led to the axiomatic\nmethod.",
    "start": "172510",
    "end": "179420"
  },
  {
    "text": "That led to sort of all of\nmodern mathematics, figuring out a way to talk precisely\nabout so-called declarative",
    "start": "179420",
    "end": "188349"
  },
  {
    "text": "knowledge, what is true.  Well, similarly, I think in the\nfuture people will look",
    "start": "188350",
    "end": "195680"
  },
  {
    "text": "back and say, yes, those\nprimitives in the 20th century were fiddling around with\nthese gadgets called computers, but really what they\nwere doing is starting to",
    "start": "195680",
    "end": "205790"
  },
  {
    "text": "learn how to formalize\nintuitions about process, how",
    "start": "205790",
    "end": "212730"
  },
  {
    "text": "to do things, starting to\ndevelop a way to talk",
    "start": "212730",
    "end": "227099"
  },
  {
    "text": "precisely about how-to\nknowledge, as opposed to",
    "start": "227100",
    "end": "232190"
  },
  {
    "text": "geometry that talks about\nwhat is true. Let me give you an\nexample of that.",
    "start": "232190",
    "end": "237810"
  },
  {
    "text": " Let's take a look. Here is a piece of mathematics\nthat says what",
    "start": "237810",
    "end": "248250"
  },
  {
    "text": "a square root is. The square root of X is the\nnumber Y, such that Y squared",
    "start": "248250",
    "end": "257019"
  },
  {
    "text": "is equal to X and Y\nis greater than 0. Now, that's a fine piece of\nmathematics, but just telling",
    "start": "257019",
    "end": "263510"
  },
  {
    "text": "you what a square root is\ndoesn't really say anything about how you might go\nout and find one.",
    "start": "263510",
    "end": "271419"
  },
  {
    "text": "So let's contrast that with a\npiece of imperative knowledge,",
    "start": "271420",
    "end": "277410"
  },
  {
    "text": "how you might go out and\nfind a square root. This, in fact, also comes\nfrom Egypt, not",
    "start": "277410",
    "end": "284660"
  },
  {
    "text": "ancient, ancient Egypt. This is an algorithm due to\nHeron of Alexandria, called",
    "start": "284660",
    "end": "290050"
  },
  {
    "text": "how to find a square root\nby successive averaging. And what it says is that, in\norder to find a square root,",
    "start": "290050",
    "end": "303370"
  },
  {
    "text": "you make a guess, you\nimprove that guess-- ",
    "start": "303370",
    "end": "310070"
  },
  {
    "text": "and the way you improve the\nguess is to average the guess and X over the guess, and we'll\ntalk a little bit later",
    "start": "310070",
    "end": "315170"
  },
  {
    "text": "about why that's a reasonable\nthing-- and you keep improving the guess\nuntil it's good enough. That's a method.",
    "start": "315170",
    "end": "320800"
  },
  {
    "text": "That's how to do something\nas opposed to declarative knowledge that says what\nyou're looking for.",
    "start": "320800",
    "end": "328270"
  },
  {
    "text": "That's a process. ",
    "start": "328270",
    "end": "334129"
  },
  {
    "text": "Well, what's a process\nin general? It's kind of hard to say.",
    "start": "334130",
    "end": "340000"
  },
  {
    "text": "You can think of it as like a\nmagical spirit that sort of",
    "start": "340000",
    "end": "345350"
  },
  {
    "text": "lives in the computer\nand does something. And the thing that directs a\nprocess is a pattern of rules",
    "start": "345350",
    "end": "356250"
  },
  {
    "text": "called a procedure. ",
    "start": "356250",
    "end": "361690"
  },
  {
    "text": "So procedures are the spells,\nif you like, that control these magical spirits that\nare the processes.",
    "start": "361690",
    "end": "370700"
  },
  {
    "text": "I guess you know everyone needs\na magical language, and sorcerers, real sorcerers, use\nancient Arcadian or Sumerian",
    "start": "370700",
    "end": "377310"
  },
  {
    "text": "or Babylonian or whatever. We're going to conjure our\nspirits in a magical language called Lisp, which is a language\ndesigned for talking",
    "start": "377310",
    "end": "386750"
  },
  {
    "text": "about, for casting the spells\nthat are procedures to direct the processes.",
    "start": "386750",
    "end": "392040"
  },
  {
    "text": "Now, it's very easy\nto learn Lisp. In fact, in a few minutes,\nI'm going to teach you, essentially, all of Lisp. I'm going to teach you,\nessentially, all of the rules.",
    "start": "392040",
    "end": "400660"
  },
  {
    "text": "And you shouldn't find that\nparticularly surprising. That's sort of like saying it's\nvery easy to learn the",
    "start": "400660",
    "end": "406150"
  },
  {
    "text": "rules of chess. And indeed, in a few minutes,\nyou can tell somebody the rules of chess. But of course, that's very\ndifferent from saying you",
    "start": "406150",
    "end": "413490"
  },
  {
    "text": "understand the implications of\nthose rules and how to use those rules to become a\nmasterful chess player. Well, Lisp is the same way.",
    "start": "413490",
    "end": "420380"
  },
  {
    "text": "We're going to state the rules\nin a few minutes, and it'll be very easy to see. But what's really hard is going\nto be the implications",
    "start": "420380",
    "end": "426210"
  },
  {
    "text": "of those rules, how you exploit\nthose rules to be a master programmer.",
    "start": "426210",
    "end": "432080"
  },
  {
    "text": "And the implications of those\nrules are going to take us the, well, the whole rest of\nthe subject and, of course,",
    "start": "432080",
    "end": "437770"
  },
  {
    "text": "way beyond.  OK, so in computer science,\nwe're in the business of",
    "start": "437770",
    "end": "446070"
  },
  {
    "text": "formalizing this sort of how-to\nimperative knowledge, how to do stuff.",
    "start": "446070",
    "end": "453330"
  },
  {
    "text": "And the real issues of computer\nscience are, of course, not telling people\nhow to do square roots.",
    "start": "453330",
    "end": "458620"
  },
  {
    "text": "Because if that was\nall it was, there wouldn't be no big deal. The real problems come when we\ntry to build very, very large",
    "start": "458620",
    "end": "465550"
  },
  {
    "text": "systems, computer programs that\nare thousands of pages long, so long that nobody can\nreally hold them in their",
    "start": "465550",
    "end": "472639"
  },
  {
    "text": "heads all at once. And the only reason that that's\npossible is because",
    "start": "472640",
    "end": "478770"
  },
  {
    "text": "there are techniques for\ncontrolling the complexity of",
    "start": "478770",
    "end": "497830"
  },
  {
    "text": "these large systems. And these\ntechniques that are controlling complexity\nare what this",
    "start": "497830",
    "end": "502949"
  },
  {
    "text": "course is really about. And in some sense, that's\nreally what computer science is about.",
    "start": "502950",
    "end": "509650"
  },
  {
    "text": "Now, that may seem like a very\nstrange thing to say. Because after all, a lot of\npeople besides computer",
    "start": "509650",
    "end": "514959"
  },
  {
    "text": "scientists deal with controlling\ncomplexity. A large airliner is an extremely\ncomplex system, and",
    "start": "514960",
    "end": "521860"
  },
  {
    "text": "the aeronautical engineers who\ndesign that are dealing with immense complexity.",
    "start": "521860",
    "end": "527030"
  },
  {
    "text": "But there's a difference\nbetween that kind of complexity and what we deal\nwith in computer science.",
    "start": "527030",
    "end": "532205"
  },
  {
    "text": " And that is that computer\nscience, in some",
    "start": "532205",
    "end": "537750"
  },
  {
    "text": "sense, isn't real.  You see, when an engineer is\ndesigning a physical system,",
    "start": "537750",
    "end": "547070"
  },
  {
    "text": "that's made out of real parts. The engineers who worry about\nthat have to address problems",
    "start": "547070",
    "end": "552820"
  },
  {
    "text": "of tolerance and approximation\nand noise in the system. So for example, as an electrical\nengineer, I can go",
    "start": "552820",
    "end": "559279"
  },
  {
    "text": "off and easily build a one-stage\namplifier or a two-stage amplifier, and I can\nimagine cascading a lot of",
    "start": "559280",
    "end": "565090"
  },
  {
    "text": "them to build a million-stage\namplifier. But it's ridiculous to build\nsuch a thing, because long",
    "start": "565090",
    "end": "570900"
  },
  {
    "text": "before the millionth stage,\nthe thermal noise in those components way at the beginning\nis going to get amplified and make the whole\nthing meaningless.",
    "start": "570900",
    "end": "576200"
  },
  {
    "text": " Computer science deals with\nidealized components.",
    "start": "576200",
    "end": "584070"
  },
  {
    "text": "We know as much as we want about\nthese little program and data pieces that we're fitting\nthings together.",
    "start": "584070",
    "end": "591820"
  },
  {
    "text": "We don't have to worry\nabout tolerance. And that means that, in building\na large program,",
    "start": "591820",
    "end": "597960"
  },
  {
    "text": "there's not all that much\ndifference between what I can build and what I can imagine,\nbecause the parts are these",
    "start": "597960",
    "end": "606519"
  },
  {
    "text": "abstract entities that I\nknow as much as I want. I know about them as precisely\nas I'd like.",
    "start": "606520",
    "end": "613430"
  },
  {
    "text": "So as opposed to other kinds\nof engineering, where the constraints on what you can\nbuild are the constraints of physical systems, the\nconstraints of physics and",
    "start": "613430",
    "end": "619810"
  },
  {
    "text": "noise and approximation, the\nconstraints imposed in building large software systems\nare the limitations of",
    "start": "619810",
    "end": "626639"
  },
  {
    "text": "our own minds. So in that sense, computer\nscience is like an abstract",
    "start": "626640",
    "end": "632460"
  },
  {
    "text": "form of engineering. It's the kind of engineering\nwhere you ignore the constraints that are\nimposed by reality.",
    "start": "632460",
    "end": "637645"
  },
  {
    "text": " Well, what are some of\nthese techniques?",
    "start": "637645",
    "end": "646399"
  },
  {
    "text": "They're not special to\ncomputer science.  First technique, which is used\nin all of engineering, is a",
    "start": "646400",
    "end": "654140"
  },
  {
    "text": "kind of abstraction called\nblack-box abstraction. ",
    "start": "654140",
    "end": "667670"
  },
  {
    "text": "Take something and build\na box about it.",
    "start": "667670",
    "end": "674339"
  },
  {
    "text": "Let's see, for example, if we\nlooked at that square root method, I might want to take\nthat and build a box.",
    "start": "674340",
    "end": "689678"
  },
  {
    "text": "That sort of says, to find the\nsquare root of X. And that",
    "start": "689678",
    "end": "698980"
  },
  {
    "text": "might be a whole complicated\nset of rules. And that might end up being a\nkind of thing where I can put",
    "start": "698980",
    "end": "706279"
  },
  {
    "text": "in, say, 36 and say, what's\nthe square root of 36? And out comes six.",
    "start": "706280",
    "end": "711520"
  },
  {
    "text": " And the important thing is that\nI'd like to design that",
    "start": "711520",
    "end": "719630"
  },
  {
    "text": "so that if George comes along\nand would like to compute,",
    "start": "719630",
    "end": "725080"
  },
  {
    "text": "say, the square root of A plus\nthe square root of B, he can",
    "start": "725080",
    "end": "731580"
  },
  {
    "text": "take this thing and use it as\na module without having to look inside and build something\nthat looks like",
    "start": "731580",
    "end": "736760"
  },
  {
    "text": "this, like an A and a B and a\nsquare root box and another",
    "start": "736760",
    "end": "744960"
  },
  {
    "text": "square root box and then\nsomething that adds that would",
    "start": "744960",
    "end": "752660"
  },
  {
    "text": "put out the answer. And you can see, just from the\nfact that I want to do that,",
    "start": "752660",
    "end": "758830"
  },
  {
    "text": "is from George's point of view,\nthe internals of what's in here should not\nbe important.",
    "start": "758830",
    "end": "764170"
  },
  {
    "text": "So for instance, it shouldn't\nmatter that, when I wrote this, I said I want to find the\nsquare root of X. I could",
    "start": "764170",
    "end": "770750"
  },
  {
    "text": "have said the square root of Y,\nor the square root of A, or anything at all.",
    "start": "770750",
    "end": "776890"
  },
  {
    "text": "That's the fundamental notion of\nputting something in a box",
    "start": "776890",
    "end": "783480"
  },
  {
    "text": "using black-box abstraction\nto suppress detail. And the reason for that is you\nwant to go off and build",
    "start": "783480",
    "end": "790070"
  },
  {
    "text": "bigger boxes. Now, there's another reason\nfor doing black-box abstraction other than you want\nto suppress detail for",
    "start": "790070",
    "end": "797340"
  },
  {
    "text": "building bigger boxes. Sometimes you want to say that\nyour way of doing something,",
    "start": "797340",
    "end": "804880"
  },
  {
    "text": "your how-to method, is an\ninstance of a more general",
    "start": "804880",
    "end": "810210"
  },
  {
    "text": "thing, and you'd like your\nlanguage to be able to express that generality.",
    "start": "810210",
    "end": "815560"
  },
  {
    "text": "Let me show you another example sticking with square roots. Let's go back and take another\nlook at that slide with the",
    "start": "815560",
    "end": "822260"
  },
  {
    "text": "square root algorithm on it. Remember what that says. That says, in order to do\nsomething, I make a guess, and",
    "start": "822260",
    "end": "830700"
  },
  {
    "text": "I improve that guess,\nand I sort of keep improving that guess.",
    "start": "830700",
    "end": "836970"
  },
  {
    "text": "So there's the general strategy\nof, I'm looking for something, and the way\nI find it is that I",
    "start": "836970",
    "end": "842440"
  },
  {
    "text": "keep improving it. Now, that's a particular case\nof another kind of strategy",
    "start": "842440",
    "end": "850930"
  },
  {
    "text": "for finding a fixed point\nof something. So you have a fixed point\nof a function.",
    "start": "850930",
    "end": "857660"
  },
  {
    "text": "A fixed point of a function\nis something, is a value.",
    "start": "857660",
    "end": "866089"
  },
  {
    "text": "A fixed point of a function F is\na value Y, such that F of Y equals Y. And the way I might do\nthat is start with a guess.",
    "start": "866090",
    "end": "881592"
  },
  {
    "text": "And then if I want something\nthat doesn't change when I keep applying F, is I'll keep\napplying F over and over until",
    "start": "881592",
    "end": "887800"
  },
  {
    "text": "that result doesn't\nchange very much. So there's a general strategy. And then, for example, to\ncompute the square root of X,",
    "start": "887800",
    "end": "896250"
  },
  {
    "text": "I can try and find a fixed point\nof the function which takes Y to the average of X/Y.\nAnd the idea that is that if I",
    "start": "896250",
    "end": "905020"
  },
  {
    "text": "really had Y equal to the square\nroot of X, then Y and X/Y would be the same value.",
    "start": "905020",
    "end": "912080"
  },
  {
    "text": "They'd both be the square root\nof X, because X over the square root of X is the\nsquare root of X.",
    "start": "912080",
    "end": "919080"
  },
  {
    "text": "And so the average if Y were\nequal to the square of X, then the average wouldn't change.",
    "start": "919080",
    "end": "926230"
  },
  {
    "text": "So the square root of X\nis a fixed point of that particular function. Now, what I'd like to have,\nI'd like to express the",
    "start": "926230",
    "end": "934010"
  },
  {
    "text": "general strategy for finding\nfixed points. So what I might imagine doing,\nis to find, is to be able to use my language to define a box\nthat says \"fixed point,\" just like I could make a box\nthat says \"square root.\" And I'd like to be able to express\nthis in my language. ",
    "start": "934010",
    "end": "956350"
  },
  {
    "text": "So I'd like to express not only\nthe imperative how-to knowledge of a particular thing\nlike square root, but",
    "start": "956350",
    "end": "963620"
  },
  {
    "text": "I'd like to be able to express\nthe imperative knowledge of how to do a general thing like\nhow to find fixed point.",
    "start": "963620",
    "end": "969930"
  },
  {
    "text": "And in fact, let's go back and\nlook at that slide again. ",
    "start": "969930",
    "end": "975010"
  },
  {
    "text": "See, not only is this a piece\nof imperative knowledge, how",
    "start": "975010",
    "end": "983380"
  },
  {
    "text": "to find a fixed point, but\nover here on the bottom, there's another piece of\nimperative knowledge which",
    "start": "983380",
    "end": "989890"
  },
  {
    "text": "says, one way to compute square\nroot is to apply this general fixed point method.",
    "start": "989890",
    "end": "996139"
  },
  {
    "text": "So I'd like to also\nbe able to express that imperative knowledge. What would that look like? That would say, this fixed point\nbox is such that if I",
    "start": "996140",
    "end": "1006010"
  },
  {
    "text": "input to it the function that\ntakes Y to the average of Y",
    "start": "1006010",
    "end": "1016980"
  },
  {
    "text": "and X/Y, then what should come\nout of that fixed point box is",
    "start": "1016980",
    "end": "1024299"
  },
  {
    "text": "a method for finding\nsquare roots.  So in these boxes we're\nbuilding, we're not only",
    "start": "1024300",
    "end": "1030829"
  },
  {
    "text": "building boxes that you input\nnumbers and output numbers,",
    "start": "1030829",
    "end": "1036369"
  },
  {
    "text": "we're going to be building in\nboxes that, in effect, compute methods like finding\nsquare root.",
    "start": "1036369",
    "end": "1042250"
  },
  {
    "text": "And my take is their inputs\nfunctions, like Y goes to the",
    "start": "1042250",
    "end": "1047480"
  },
  {
    "text": "average of Y and X/Y. The reason\nwe want to do that, the reason this is a procedure, will\nend up being a procedure,",
    "start": "1047480",
    "end": "1055424"
  },
  {
    "text": "as we'll see, whose value is\nanother procedure, the reason we want to do that is because\nprocedures are going to be our",
    "start": "1055425",
    "end": "1062630"
  },
  {
    "text": "ways of talking about imperative\nknowledge.",
    "start": "1062630",
    "end": "1067960"
  },
  {
    "text": "And the way to make that very\npowerful is to be able to talk about other kinds\nof knowledge.",
    "start": "1067960",
    "end": "1073260"
  },
  {
    "text": "So here is a procedure that, in\neffect, talks about another procedure, a general strategy\nthat itself talks about",
    "start": "1073260",
    "end": "1079450"
  },
  {
    "text": "general strategies.  Well, our first topic in this\ncourse-- there'll be three",
    "start": "1079450",
    "end": "1088370"
  },
  {
    "text": "major topics-- will be black-box\nabstraction. Let's look at that in a little\nbit more detail.",
    "start": "1088370",
    "end": "1095149"
  },
  {
    "text": "What we're going to do is we\nwill start out talking about",
    "start": "1095150",
    "end": "1103910"
  },
  {
    "text": "how Lisp is built up out\nof primitive objects. What does the language\nsupply with us?",
    "start": "1103910",
    "end": "1109580"
  },
  {
    "text": "And we'll see that there are\nprimitive procedures and primitive data.",
    "start": "1109580",
    "end": "1115620"
  },
  {
    "text": "Then we're going to see, how do\nyou take those primitives and combine them to make more\ncomplicated things, means of",
    "start": "1115620",
    "end": "1121940"
  },
  {
    "text": "combination? And what we'll see is that\nthere are ways of putting things together, putting\nprimitive procedures together",
    "start": "1121940",
    "end": "1127850"
  },
  {
    "text": "to make more complicated\nprocedures. And we'll see how to put\nprimitive data together to",
    "start": "1127850",
    "end": "1133250"
  },
  {
    "text": "make compound data. Then we'll say, well, having\nmade those compounds things,",
    "start": "1133250",
    "end": "1139700"
  },
  {
    "text": "how do you abstract them? How do you put those black boxes\naround them so you can",
    "start": "1139700",
    "end": "1145289"
  },
  {
    "text": "use them as components in\nmore complex things? And we'll see that's done by\ndefining procedures and a",
    "start": "1145290",
    "end": "1151640"
  },
  {
    "text": "technique for dealing with\ncompound data called data abstraction. And then, what's maybe the most\nimportant thing, is going",
    "start": "1151640",
    "end": "1159150"
  },
  {
    "text": "from just the rules to how\ndoes an expert work? How do you express common\npatterns of doing things, like",
    "start": "1159150",
    "end": "1165800"
  },
  {
    "text": "saying, well, there's a general\nmethod of fixed point and square root is a particular\ncase of that?",
    "start": "1165800",
    "end": "1172821"
  },
  {
    "text": "And we're going to use-- I've already hinted at it--\nsomething called higher-order procedures, namely procedures\nwhose inputs and outputs are",
    "start": "1172822",
    "end": "1180770"
  },
  {
    "text": "themselves procedures. And then we'll also see\nsomething very interesting. We'll see, as we go further and\nfurther on and become more",
    "start": "1180770",
    "end": "1187730"
  },
  {
    "text": "abstract, there'll be very-- well, the line between what we\nconsider to be data and what",
    "start": "1187730",
    "end": "1193700"
  },
  {
    "text": "we consider to be procedures\nis going to blur at an incredible rate. ",
    "start": "1193700",
    "end": "1203270"
  },
  {
    "text": "Well, that's our first\nsubject, black-box abstraction. Let's look at the\nsecond topic. ",
    "start": "1203270",
    "end": "1210640"
  },
  {
    "text": "I can introduce it like this. See, suppose I want to\nexpress the idea--",
    "start": "1210640",
    "end": "1219590"
  },
  {
    "text": "remember, we're talking\nabout ideas-- suppose I want to express the\nidea that I can take something",
    "start": "1219590",
    "end": "1230950"
  },
  {
    "text": "and multiply it by the sum\nof two other things.",
    "start": "1230950",
    "end": "1236070"
  },
  {
    "text": "So for example, I might say,\nif I had one and three and multiply that by two,\nI get eight.",
    "start": "1236070",
    "end": "1241919"
  },
  {
    "text": "But I'm talking about the\ngeneral idea of what's called linear combination, that you\ncan add two things and multiply them by\nsomething else.",
    "start": "1241920",
    "end": "1249169"
  },
  {
    "text": "It's very easy when I think\nabout it for numbers, but suppose I also want to use that\nsame idea to think about,",
    "start": "1249170",
    "end": "1256060"
  },
  {
    "text": "I could add two vectors, a1 and\na2, and then scale them by some factor x and get\nanother vector.",
    "start": "1256060",
    "end": "1263060"
  },
  {
    "text": "Or I might say, I want to think\nabout a1 and a2 as being",
    "start": "1263060",
    "end": "1268570"
  },
  {
    "text": "polynomials, and I might want\nto add those two polynomials",
    "start": "1268570",
    "end": "1273720"
  },
  {
    "text": "and then multiply them by two to\nget a more complicated one. ",
    "start": "1273720",
    "end": "1280020"
  },
  {
    "text": "Or a1 and a2 might be electrical\nsignals, and I might want to think about\nsumming those two electrical",
    "start": "1280020",
    "end": "1286870"
  },
  {
    "text": "signals and then putting the\nwhole thing through an amplifier, multiplying\nit by some factor of two or something.",
    "start": "1286870",
    "end": "1293890"
  },
  {
    "text": "The idea is I want to\nthink about the general notion of that. Now, if our language is going\nto be good language for",
    "start": "1293890",
    "end": "1302880"
  },
  {
    "text": "expressing those kind of general\nideas, if I really,",
    "start": "1302880",
    "end": "1307960"
  },
  {
    "text": "really can do that, I'd like to\nbe able to say I'm going to",
    "start": "1307960",
    "end": "1315190"
  },
  {
    "text": "multiply by x the sum of a1 and\na2, and I'd like that to",
    "start": "1315190",
    "end": "1323659"
  },
  {
    "text": "express the general idea of all\ndifferent kinds of things that a1 and a2 could be.",
    "start": "1323660",
    "end": "1329980"
  },
  {
    "text": "Now, if you think about that,\nthere's a problem, because after all, the actual primitive\noperations that go",
    "start": "1329980",
    "end": "1336370"
  },
  {
    "text": "on in the machine are obviously\ngoing to be different if I'm adding two\nnumbers than if I'm adding two",
    "start": "1336370",
    "end": "1342070"
  },
  {
    "text": "polynomials, or if I'm adding\nthe representation of two electrical signals\nor wave forms.",
    "start": "1342070",
    "end": "1347940"
  },
  {
    "text": "Somewhere, there has to be the\nknowledge of the kinds of various things that you\ncan add and the",
    "start": "1347940",
    "end": "1353139"
  },
  {
    "text": "ways of adding them.  Now, to construct such a system,\nthe question is, where",
    "start": "1353140",
    "end": "1359429"
  },
  {
    "text": "do I put that knowledge? How do I think about\nthe different kinds of choices I have?",
    "start": "1359430",
    "end": "1364480"
  },
  {
    "text": "And if tomorrow George comes up\nwith a new kind of object that might be added and\nmultiplied, how do I add",
    "start": "1364480",
    "end": "1371770"
  },
  {
    "text": "George's new object to the\nsystem without screwing up everything that was\nalready there?",
    "start": "1371770",
    "end": "1377690"
  },
  {
    "text": "Well, that's going to be the\nsecond big topic, the way of controlling that kind\nof complexity.",
    "start": "1377690",
    "end": "1383720"
  },
  {
    "text": "And the way you do that is by\nestablishing conventional interfaces, agreed upon ways of\nplugging things together.",
    "start": "1383720",
    "end": "1400230"
  },
  {
    "text": "Just like in electrical\nengineering, people have standard impedances for\nconnectors, and then you know",
    "start": "1400230",
    "end": "1406520"
  },
  {
    "text": "if you build something with\none of those standard impedances, you can plug it\ntogether with something else. ",
    "start": "1406520",
    "end": "1412720"
  },
  {
    "text": "So that's going to be our\nsecond large topic, conventional interfaces. What we're going to see is,\nfirst, we're going to talk",
    "start": "1412720",
    "end": "1419000"
  },
  {
    "text": "about the problem of generic\noperations, which is the one I alluded to, things like \"plus\"\nthat have to work with all",
    "start": "1419000",
    "end": "1426100"
  },
  {
    "text": "different kinds of data. ",
    "start": "1426100",
    "end": "1432148"
  },
  {
    "text": "So we talk about generic\noperations. Then we're going to talk about\nreally large-scale structures.",
    "start": "1432149",
    "end": "1438270"
  },
  {
    "text": "How do you put together very\nlarge programs that model the kinds of complex systems\nin the real world that",
    "start": "1438270",
    "end": "1443880"
  },
  {
    "text": "you'd like to model? And what we're going to see\nis that there are two very",
    "start": "1443880",
    "end": "1448990"
  },
  {
    "text": "important metaphors for putting\ntogether such systems. One is called object-oriented\nprogramming, where you sort of",
    "start": "1448990",
    "end": "1454730"
  },
  {
    "text": "think of your system as a kind\nof society full of little",
    "start": "1454730",
    "end": "1459840"
  },
  {
    "text": "things that interact by sending information between them. And then the second one is\noperations on aggregates,",
    "start": "1459840",
    "end": "1466540"
  },
  {
    "text": "called streams, where you think\nof a large system put together kind of like a signal\nprocessing engineer puts",
    "start": "1466540",
    "end": "1473529"
  },
  {
    "text": "together a large electrical\nsystem. ",
    "start": "1473530",
    "end": "1478610"
  },
  {
    "text": "That's going to be\nour second topic.  Now, the third thing we're going\nto come to, the third",
    "start": "1478610",
    "end": "1487000"
  },
  {
    "text": "basic technique for controlling\ncomplexity, is making new languages. Because sometimes, when you're\nsort of overwhelmed by the",
    "start": "1487000",
    "end": "1494370"
  },
  {
    "text": "complexity of a design, the\nway that you control that complexity is to pick a\nnew design language.",
    "start": "1494370",
    "end": "1501330"
  },
  {
    "text": "And the purpose of the new\ndesign language will be to highlight different aspects\nof the system. It will suppress some kinds of\ndetails and emphasize other",
    "start": "1501330",
    "end": "1508360"
  },
  {
    "text": "kinds of details.  This is going to be the most\nmagical part of the course.",
    "start": "1508360",
    "end": "1515910"
  },
  {
    "text": "We're going to start out by\nactually looking at the technology for building new\ncomputer languages.",
    "start": "1515910",
    "end": "1521730"
  },
  {
    "text": "The first thing we're going to\ndo is actually build in Lisp. ",
    "start": "1521730",
    "end": "1529210"
  },
  {
    "text": "We're going to express in Lisp\nthe process of interpreting Lisp itself. And that's going to be a very\nsort of self-circular thing.",
    "start": "1529210",
    "end": "1536840"
  },
  {
    "text": "There's a little mystical\nsymbol that has to do with that. The process of interpreting Lisp\nis sort of a giant wheel",
    "start": "1536840",
    "end": "1545500"
  },
  {
    "text": "of two processes, apply and\neval, which sort of constantly reduce expressions\nto each other.",
    "start": "1545500",
    "end": "1552031"
  },
  {
    "text": "Then we're going to see all\nsorts of other magical things. Here's another magical symbol. ",
    "start": "1552031",
    "end": "1559870"
  },
  {
    "text": "This is sort of the Y operator,\nwhich is, in some sense, the expression\nof infinity inside our procedural language.",
    "start": "1559870",
    "end": "1566390"
  },
  {
    "text": "We'll take a look at that. In any case, this section\nof the course is called",
    "start": "1566390",
    "end": "1571880"
  },
  {
    "text": "Metalinguistic Abstraction,\nabstracting by talking about",
    "start": "1571880",
    "end": "1584270"
  },
  {
    "text": "how you construct\nnew languages. ",
    "start": "1584270",
    "end": "1590270"
  },
  {
    "text": "As I said, we're going to start\nout by looking at the process of interpretation.",
    "start": "1590270",
    "end": "1595530"
  },
  {
    "text": "We're going to look\nat this apply-eval loop, and build Lisp.",
    "start": "1595530",
    "end": "1601980"
  },
  {
    "text": "Then, just to show you that this\nis very general, we're going to use exactly the same\ntechnology to build a very",
    "start": "1601980",
    "end": "1607100"
  },
  {
    "text": "different kind of language, a\nso-called logic programming language, where you don't really\ntalk about procedures",
    "start": "1607100",
    "end": "1612880"
  },
  {
    "text": "at all that have inputs\nand outputs. What you do is talk about\nrelations between things. And then finally, we're going\nto talk about how you",
    "start": "1612880",
    "end": "1621220"
  },
  {
    "text": "implement these things very\nconcretely on the very simplest kind of machines.",
    "start": "1621220",
    "end": "1626830"
  },
  {
    "text": "We'll see something like this. This is a picture of a chip,\nwhich is the Lisp interpreter",
    "start": "1626830",
    "end": "1634880"
  },
  {
    "text": "that we will be talking about\nthen in hardware. ",
    "start": "1634880",
    "end": "1641010"
  },
  {
    "text": "Well, there's an outline of the\ncourse, three big topics. Black-box abstraction,\nconventional interfaces,",
    "start": "1641010",
    "end": "1648120"
  },
  {
    "text": "metalinguistic abstraction. Now, let's take a break now and\nthen we'll get started.",
    "start": "1648120",
    "end": "1653480"
  },
  {
    "text": "[MUSIC PLAYING]",
    "start": "1653480",
    "end": "1684770"
  },
  {
    "text": "Let's actually start in\nlearning Lisp now. Actually, we'll start out by\nlearning something much more",
    "start": "1684770",
    "end": "1690250"
  },
  {
    "text": "important, maybe the very most\nimportant thing in this course, which is not Lisp, in\nparticular, of course, but",
    "start": "1690250",
    "end": "1696220"
  },
  {
    "text": "rather a general framework for\nthinking about languages that I already alluded to.",
    "start": "1696220",
    "end": "1701970"
  },
  {
    "text": "When somebody tells you they're\ngoing to show you a language, what you should say\nis, what I'd like you to tell",
    "start": "1701970",
    "end": "1707150"
  },
  {
    "text": "me is what are the primitive\nelements?",
    "start": "1707150",
    "end": "1712510"
  },
  {
    "text": " What does the language\ncome with?",
    "start": "1712510",
    "end": "1718929"
  },
  {
    "text": "Then, what are the ways you\nput those together? What are the means\nof combination?",
    "start": "1718930",
    "end": "1726720"
  },
  {
    "text": " What are the things that allow\nyou to take these primitive",
    "start": "1726720",
    "end": "1733399"
  },
  {
    "text": "elements and build bigger\nthings out of them? What are the ways of putting\nthings together?",
    "start": "1733400",
    "end": "1741280"
  },
  {
    "text": "And then, what are the\nmeans of abstraction? ",
    "start": "1741280",
    "end": "1748110"
  },
  {
    "text": "How do we take those complicated\nthings and draw",
    "start": "1748110",
    "end": "1755830"
  },
  {
    "text": "those boxes around them? How do we name them so that we\ncan now use them as if they were primitive elements\nin making still",
    "start": "1755830",
    "end": "1762810"
  },
  {
    "text": "more complex things? And so on, and so\non, and so on. So when someone says to you,\ngee, I have a great new",
    "start": "1762810",
    "end": "1768580"
  },
  {
    "text": "computer language, you don't\nsay, how many characters does it take to invert a matrix?",
    "start": "1768580",
    "end": "1775810"
  },
  {
    "text": "It's irrelevant. What you say is, if the language\ndid not come with",
    "start": "1775810",
    "end": "1781220"
  },
  {
    "text": "matrices built in or with\nsomething else built in, how could I then build that thing? What are the means of\ncombination which would allow",
    "start": "1781220",
    "end": "1787590"
  },
  {
    "text": "me to do that? And then, what are the means of\nabstraction which allow me then to use those as elements\nin making more complicated",
    "start": "1787590",
    "end": "1795750"
  },
  {
    "text": "things yet?  Well, we're going to see that\nLisp has some primitive data",
    "start": "1795750",
    "end": "1802330"
  },
  {
    "text": "and some primitive procedures. In fact, let's really start.",
    "start": "1802330",
    "end": "1808410"
  },
  {
    "text": "And here's a piece of\nprimitive data in Lisp, number three.",
    "start": "1808410",
    "end": "1816710"
  },
  {
    "text": "Actually, if I'm being very\npedantic, that's not the number three. That's some symbol that\nrepresents Plato's concept of",
    "start": "1816710",
    "end": "1824620"
  },
  {
    "text": "the number three. And here's another.",
    "start": "1824620",
    "end": "1830500"
  },
  {
    "text": "Here's some more primitive\ndata in Lisp, 17.4. Or actually, some representation\nof 17.4.",
    "start": "1830500",
    "end": "1840940"
  },
  {
    "text": "And here's another one, five. ",
    "start": "1840940",
    "end": "1846750"
  },
  {
    "text": "Here's another primitive\nobject that's built in Lisp, addition.",
    "start": "1846750",
    "end": "1852130"
  },
  {
    "text": "Actually, to use the same kind\nof pedantic-- this is a name for the primitive method\nof adding things.",
    "start": "1852130",
    "end": "1860140"
  },
  {
    "text": "Just like this is a name for\nPlato's number three, this is a name for Plato's concept\nof how you add things.",
    "start": "1860140",
    "end": "1870370"
  },
  {
    "text": "So those are some primitive\nelements. I can put them together. I can say, gee, what's the sum\nof three and 17.4 and five?",
    "start": "1870370",
    "end": "1878140"
  },
  {
    "text": "And the way I do that is to\nsay, let's apply the sum",
    "start": "1878140",
    "end": "1885580"
  },
  {
    "text": "operator to these\nthree numbers. And I should get,\nwhat? eight, 17. 25.4.",
    "start": "1885580",
    "end": "1894389"
  },
  {
    "text": "So I should be able to ask Lisp\nwhat the value of this is, and it will return 25.4.",
    "start": "1894390",
    "end": "1903049"
  },
  {
    "text": "Let's introduce some names. This thing that I typed is\ncalled a combination.",
    "start": "1903050",
    "end": "1910950"
  },
  {
    "start": "1910950",
    "end": "1916830"
  },
  {
    "text": "And a combination consists,\nin general, of applying an operator--",
    "start": "1916830",
    "end": "1922790"
  },
  {
    "text": "so this is an operator-- ",
    "start": "1922790",
    "end": "1929500"
  },
  {
    "text": "to some operands. These are the operands. ",
    "start": "1929500",
    "end": "1941759"
  },
  {
    "text": "And of course, I can make\nmore complex things. The reason I can get complexity\nout of this is because the operands themselves,\nin general, can be",
    "start": "1941760",
    "end": "1950289"
  },
  {
    "text": "combinations. So for instance, I could say,\nwhat is the sum of three and",
    "start": "1950290",
    "end": "1957519"
  },
  {
    "text": "the product of five and\nsix and eight and two?",
    "start": "1957520",
    "end": "1965660"
  },
  {
    "text": "And I should get-- let's see-- 30, 40, 43.",
    "start": "1965660",
    "end": "1972355"
  },
  {
    "text": "So Lisp should tell\nme that that's 43. Forming combinations is the\nbasic needs of combination",
    "start": "1972355",
    "end": "1981610"
  },
  {
    "text": "that we'll be looking at. And then, well, you see\nsome syntax here.",
    "start": "1981610",
    "end": "1990519"
  },
  {
    "text": "Lisp uses what's called prefix\nnotation, which means that the",
    "start": "1990520",
    "end": "1996940"
  },
  {
    "text": "operator is written to the\nleft of the operands.",
    "start": "1996940",
    "end": "2005399"
  },
  {
    "text": "It's just a convention. And notice, it's fully\nparenthesized. And the parentheses make it\ncompletely unambiguous.",
    "start": "2005400",
    "end": "2012169"
  },
  {
    "text": "So by looking at this, I can see\nthat there's the operator, and there are one, two,\nthree, four operands.",
    "start": "2012170",
    "end": "2022760"
  },
  {
    "text": "And I can see that the second\noperand here is itself some combination that has one\noperator and two operands.",
    "start": "2022760",
    "end": "2032500"
  },
  {
    "text": "Parentheses in Lisp are a little\nbit, or are very unlike parentheses in conventional\nmathematics.",
    "start": "2032500",
    "end": "2037630"
  },
  {
    "text": "In mathematics, we sort of use\nthem to mean grouping, and it sort of doesn't hurt if\nsometimes you leave out",
    "start": "2037630",
    "end": "2043140"
  },
  {
    "text": "parentheses if people\nunderstand that that's a group. And in general, it doesn't\nhurt if you put in extra parentheses, because that\nmaybe makes the",
    "start": "2043140",
    "end": "2049760"
  },
  {
    "text": "grouping more distinct. Lisp is not like that. In Lisp, you cannot leave out\nparentheses, and you cannot",
    "start": "2049760",
    "end": "2057020"
  },
  {
    "text": "put in extra parentheses,\nbecause putting in parentheses always means, exactly and\nprecisely, this is a",
    "start": "2057020",
    "end": "2063980"
  },
  {
    "text": "combination which has\nmeaning, applying operators to operands.",
    "start": "2063980",
    "end": "2069050"
  },
  {
    "text": "And if I left this out, if I\nleft those parentheses out, it would mean something else.",
    "start": "2069050",
    "end": "2075469"
  },
  {
    "text": "In fact, the way to think about\nthis, is really what I'm doing when I write something\nlike this is writing a tree.",
    "start": "2075469",
    "end": "2082280"
  },
  {
    "text": "So this combination is a tree\nthat has a plus and then a thee and then a something else\nand an eight and a two.",
    "start": "2082280",
    "end": "2094500"
  },
  {
    "text": "And then this something else\nhere is itself a little subtree that has a star\nand a five and a six.",
    "start": "2094500",
    "end": "2103770"
  },
  {
    "text": "And the way to think of that\nis, really, what's going on are we're writing these trees,\nand parentheses are just a way",
    "start": "2103770",
    "end": "2113260"
  },
  {
    "text": "to write this two-dimensional\nstructure as a linear character string.",
    "start": "2113260",
    "end": "2119130"
  },
  {
    "text": "Because at least when Lisp first\nstarted and people had teletypes or punch cards or\nwhatever, this was more",
    "start": "2119130",
    "end": "2124630"
  },
  {
    "text": "convenient. Maybe if Lisp started today,\nthe syntax of Lisp would look like that.",
    "start": "2124630",
    "end": "2131900"
  },
  {
    "text": "Well, let's look at\nwhat that actually looks like on the computer. Here I have a Lisp interaction\nset up.",
    "start": "2131900",
    "end": "2139320"
  },
  {
    "text": "There's a editor. And on the top, I'm going to\ntype some values and ask Lisp what they are.",
    "start": "2139320",
    "end": "2145050"
  },
  {
    "text": "So for instance, I can say\nto Lisp, what's the value of that symbol? That's three. And I ask Lisp to evaluate it.",
    "start": "2145050",
    "end": "2151850"
  },
  {
    "text": "And there you see Lisp has\nreturned on the bottom, and said, oh yeah, that's three.",
    "start": "2151850",
    "end": "2157690"
  },
  {
    "text": "Or I can say, what's the sum of\nthree and four and eight?",
    "start": "2157690",
    "end": "2166490"
  },
  {
    "text": "What's that combination? And ask Lisp to evaluate it. ",
    "start": "2166490",
    "end": "2174660"
  },
  {
    "text": "That's 15. Or I can type in something\nmore complicated. I can say, what's the sum of the\nproduct of three and the",
    "start": "2174660",
    "end": "2187300"
  },
  {
    "text": "sum of seven and 19.5?",
    "start": "2187300",
    "end": "2195210"
  },
  {
    "text": "And you'll notice here that Lisp\nhas something built in that helps me keep track of\nall these parentheses. Watch as I type the next closed\nparentheses, which is",
    "start": "2195210",
    "end": "2202260"
  },
  {
    "text": "going to close the combination\nstarting with the star. The opening one will flash.",
    "start": "2202260",
    "end": "2208220"
  },
  {
    "text": "Here, I'll rub those out\nand do it again. Type close, and you see\nthat closes the plus.",
    "start": "2208220",
    "end": "2213589"
  },
  {
    "text": "Close again, that\ncloses the star. Now I'm back to the sum, and\nmaybe I'm going to add that",
    "start": "2213590",
    "end": "2219799"
  },
  {
    "text": "all to four. That closes the plus. Now I have a complete\ncombination, and I can ask",
    "start": "2219800",
    "end": "2225750"
  },
  {
    "text": "Lisp for the value of that. That kind of paren balancing is\nsomething that's built into",
    "start": "2225750",
    "end": "2231309"
  },
  {
    "text": "a lot of Lisp systems to help\nyou keep track, because it is kind of hard just by hand doing\nall these parentheses.",
    "start": "2231310",
    "end": "2236759"
  },
  {
    "text": "There's another kind of\nconvention for keeping track of parentheses. Let me write another complicated\ncombination.",
    "start": "2236760",
    "end": "2244800"
  },
  {
    "text": "Let's take the sum of the\nproduct of three and five and",
    "start": "2244800",
    "end": "2253050"
  },
  {
    "text": "add that to something. And now what I'm going to do is\nI'm going to indent so that the operands are written\nvertically.",
    "start": "2253050",
    "end": "2259830"
  },
  {
    "text": "Which the sum of that and\nthe product of 47 and--",
    "start": "2259830",
    "end": "2267250"
  },
  {
    "text": "let's say the product\nof 47 with a difference of 20 and 6.8.",
    "start": "2267250",
    "end": "2274520"
  },
  {
    "text": "That means subtract\n6.8 from 20. And then you see the\nparentheses close.",
    "start": "2274520",
    "end": "2280050"
  },
  {
    "text": "Close the minus. Close the star. And now let's get another\noperator.",
    "start": "2280050",
    "end": "2285150"
  },
  {
    "text": "You see the Lisp editor here\nis indenting to the right position automatically to\nhelp me keep track.",
    "start": "2285150",
    "end": "2292660"
  },
  {
    "text": "I'll do that again. I'll close that last\nparentheses again. You see it balances the plus. ",
    "start": "2292660",
    "end": "2300340"
  },
  {
    "text": "Now I can say, what's\nthe value of that? So those two things, indenting\nto the right level, which is",
    "start": "2300340",
    "end": "2309620"
  },
  {
    "text": "called pretty printing, and\nflashing parentheses, are two things that a lot of Lisp\nsystems have built in to help",
    "start": "2309620",
    "end": "2317119"
  },
  {
    "text": "you keep track. And you should learn\nhow to use them.  Well, those are the\nprimitives.",
    "start": "2317120",
    "end": "2324640"
  },
  {
    "text": "There's a means of\ncombination. Now let's go up to the\nmeans of abstraction. I'd like to be able to take\nthe idea that I do some",
    "start": "2324640",
    "end": "2332400"
  },
  {
    "text": "combination like this, and\nabstract it and give it a simple name, so I can use\nthat as an element. And I do that in Lisp with\n\"define.\" So I can say, for",
    "start": "2332400",
    "end": "2341770"
  },
  {
    "text": "example, define A to be the\nproduct of five and five.",
    "start": "2341770",
    "end": "2354515"
  },
  {
    "text": " And now I could say, for\nexample, to Lisp, what is the",
    "start": "2354515",
    "end": "2363240"
  },
  {
    "text": "product of A and A? And this should be 25, and\nthis should be 625.",
    "start": "2363240",
    "end": "2371980"
  },
  {
    "text": "And then, crucial thing,\nI can now use A-- here I've used it in\na combination--",
    "start": "2371980",
    "end": "2378359"
  },
  {
    "text": "but I could use that in other\nmore complicated things that I name in turn.",
    "start": "2378360",
    "end": "2383440"
  },
  {
    "text": "So I could say, define B to be\nthe sum of, we'll say, A and",
    "start": "2383440",
    "end": "2393970"
  },
  {
    "text": "the product of five and A.\nAnd then close the plus.",
    "start": "2393970",
    "end": "2400260"
  },
  {
    "text": " Let's take a look at that\non the computer and see how that looks.",
    "start": "2400260",
    "end": "2407849"
  },
  {
    "text": "So I'll just type what\nI wrote on the board. I could say, define A to be the\nproduct of five and five.",
    "start": "2407850",
    "end": "2421164"
  },
  {
    "text": " And I'll tell that to Lisp. And notice what Lisp responded\nthere with",
    "start": "2421165",
    "end": "2427319"
  },
  {
    "text": "was an A in the bottom. In general, when you type in\na definition in Lisp, it responds with the symbol\nbeing defined.",
    "start": "2427320",
    "end": "2435180"
  },
  {
    "text": "Now I could say to Lisp, what\nis the product of A and A? ",
    "start": "2435180",
    "end": "2442265"
  },
  {
    "text": "And it says that's 625. I can define B to be the sum of\nA and the product of five",
    "start": "2442266",
    "end": "2459609"
  },
  {
    "text": "and A. Close a paren\ncloses the star. Close the plus. Close the \"define.\" Lisp says,\nOK, B, there on the bottom.",
    "start": "2459610",
    "end": "2471030"
  },
  {
    "text": "And now I can say to Lisp,\nwhat's the value of B? ",
    "start": "2471030",
    "end": "2477100"
  },
  {
    "text": "And I can say something more\ncomplicated, like what's the sum of A and the quotient\nof B and five?",
    "start": "2477100",
    "end": "2486600"
  },
  {
    "text": "That slash is divide, another\nprimitive operator. I've divided B by five,\nadded it to A. Lisp",
    "start": "2486600",
    "end": "2493829"
  },
  {
    "text": "says, OK, that's 55. So there's what it looks like.",
    "start": "2493830",
    "end": "2499810"
  },
  {
    "text": "There's the basic means\nof defining something. It's the simplest kind of\nnaming, but it's not really",
    "start": "2499810",
    "end": "2507869"
  },
  {
    "text": "very powerful. See, what I'd really\nlike to name-- remember, we're talking about\ngeneral methods--",
    "start": "2507870",
    "end": "2513510"
  },
  {
    "text": "I'd like to name, oh, the\ngeneral idea that, for example, I could multiply five\nby five, or six by six, or",
    "start": "2513510",
    "end": "2530450"
  },
  {
    "text": "1,001 by 1,001, 1,001.7\nby 1,001.7.",
    "start": "2530450",
    "end": "2538240"
  },
  {
    "text": "I'd like to be able to name\nthe general idea of multiplying something\nby itself.",
    "start": "2538240",
    "end": "2543970"
  },
  {
    "text": " Well, you know what that is. That's called squaring.",
    "start": "2543970",
    "end": "2551146"
  },
  {
    "text": "And the way I can do that in\nLisp is I can say, define to",
    "start": "2551146",
    "end": "2563640"
  },
  {
    "text": "square something x, multiply\nx by itself.",
    "start": "2563640",
    "end": "2577849"
  },
  {
    "text": "And then having done that,\nI could say to Lisp, for example, what's the\nsquare of 10?",
    "start": "2577850",
    "end": "2586240"
  },
  {
    "text": "And Lisp will say 100. So now let's actually look at\nthat a little more closely.",
    "start": "2586240",
    "end": "2594796"
  },
  {
    "text": "Right, there's the definition\nof square. To square something, multiply\nit by itself.",
    "start": "2594796",
    "end": "2603730"
  },
  {
    "text": "You see this x here. That x is kind of a pronoun,\nwhich is the something that I'm going to square.",
    "start": "2603730",
    "end": "2611380"
  },
  {
    "text": "And what I do with it\nis I multiply x, I multiply it by itself.",
    "start": "2611380",
    "end": "2616930"
  },
  {
    "start": "2616930",
    "end": "2624670"
  },
  {
    "text": "OK. So there's the notation for\ndefining a procedure. Actually, this is a little bit\nconfusing, because this is",
    "start": "2624670",
    "end": "2632500"
  },
  {
    "text": "sort of how I might\nuse square. And I say square root of x or\nsquare root of 10, but it's",
    "start": "2632500",
    "end": "2637790"
  },
  {
    "text": "not making it very clear that\nI'm actually naming something. ",
    "start": "2637790",
    "end": "2642970"
  },
  {
    "text": "So let me write this definition\nin another way that makes it a little\nbit more clear that I'm naming something.",
    "start": "2642970",
    "end": "2648420"
  },
  {
    "text": "I'll say, \"define\" square to\nbe lambda of x times xx.",
    "start": "2648420",
    "end": "2668250"
  },
  {
    "start": "2668250",
    "end": "2676550"
  },
  {
    "text": "Here, I'm naming something\nsquare, just like over here, I'm naming something A. The\nthing that I'm naming square--",
    "start": "2676550",
    "end": "2684390"
  },
  {
    "text": "here, the thing I named A was\nthe value of this combination. Here, the thing that I'm naming\nsquare is this thing",
    "start": "2684390",
    "end": "2692270"
  },
  {
    "text": "that begins with lambda, and\nlambda is Lisp's way of saying make a procedure. ",
    "start": "2692270",
    "end": "2700150"
  },
  {
    "text": "Let's look at that more\nclosely on the slide. The way I read that definition\nis to say, I define square to",
    "start": "2700150",
    "end": "2707410"
  },
  {
    "text": "be make a procedure-- ",
    "start": "2707410",
    "end": "2712730"
  },
  {
    "text": "that's what the lambda is-- make a procedure with\nan argument named x.",
    "start": "2712730",
    "end": "2719220"
  },
  {
    "text": "And what it does is return\nthe results of multiplying x by itself.",
    "start": "2719220",
    "end": "2724920"
  },
  {
    "text": "Now, in general, we're going to\nbe using this top form of",
    "start": "2724920",
    "end": "2732380"
  },
  {
    "text": "defining, just because it's a\nlittle bit more convenient. But don't lose sight of the fact\nthat it's really this.",
    "start": "2732380",
    "end": "2738750"
  },
  {
    "text": "In fact, as far as the Lisp\ninterpreter's concerned, there's no difference between\ntyping this to it and typing",
    "start": "2738750",
    "end": "2744830"
  },
  {
    "text": "this to it. And there's a word for that,\nsort of syntactic sugar.",
    "start": "2744830",
    "end": "2754380"
  },
  {
    "text": "What syntactic sugar means,\nit's having somewhat more convenient surface forms\nfor typing something.",
    "start": "2754380",
    "end": "2761059"
  },
  {
    "text": "So this is just really syntactic\nsugar for this underlying Greek thing\nwith the lambda.",
    "start": "2761060",
    "end": "2767310"
  },
  {
    "text": "And the reason you should\nremember that is don't forget that, when I write something\nlike this, I'm",
    "start": "2767310",
    "end": "2772430"
  },
  {
    "text": "really naming something. I'm naming something square,\nand the something that I'm naming square is a procedure\nthat's getting constructed.",
    "start": "2772430",
    "end": "2781620"
  },
  {
    "text": "Well, let's look at that\non the computer, too. So I'll come and I'll say,\ndefine square of",
    "start": "2781620",
    "end": "2790660"
  },
  {
    "text": "x to be times xx. ",
    "start": "2790660",
    "end": "2809569"
  },
  {
    "text": "Now I'll tell Lisp that. It says \"square.\" See, I've\nnamed something \"square.\" Now,",
    "start": "2809570",
    "end": "2816580"
  },
  {
    "text": "having done that, I can\nask Lisp for, what's the square of 1,001?",
    "start": "2816580",
    "end": "2825230"
  },
  {
    "text": "Or in general, I could say,\nwhat's the square of the sum",
    "start": "2825230",
    "end": "2834920"
  },
  {
    "text": "of five and seven? ",
    "start": "2834920",
    "end": "2842532"
  },
  {
    "text": "The square of 12's 144. Or I can use square itself\nas an element in some",
    "start": "2842532",
    "end": "2848079"
  },
  {
    "text": "combination. I can say, what's the sum of\nthe square of three and the",
    "start": "2848080",
    "end": "2856420"
  },
  {
    "text": "square of four? ",
    "start": "2856420",
    "end": "2862480"
  },
  {
    "text": "nine and 16 is 25. Or I can use square as an\nelement in some much more",
    "start": "2862480",
    "end": "2869579"
  },
  {
    "text": "complicated thing. I can say, what's the square\nof, the sqare of, the square of 1,001?",
    "start": "2869580",
    "end": "2887015"
  },
  {
    "text": "And there's the square of the\nsquare of the square of 1,001. Or I can say to Lisp, what\nis square itself?",
    "start": "2887016",
    "end": "2895619"
  },
  {
    "text": "What's the value of that? And Lisp returns some\nconventional way of telling me",
    "start": "2895620",
    "end": "2901040"
  },
  {
    "text": "that that's a procedure. It says, \"compound procedure\nsquare.\" Remember, the value of square is this procedure, and\nthe thing with the stars",
    "start": "2901040",
    "end": "2910050"
  },
  {
    "text": "and the brackets are just Lisp's\nconventional way of describing that.",
    "start": "2910050",
    "end": "2917010"
  },
  {
    "text": "Let's look at two more\nexamples of defining. ",
    "start": "2917010",
    "end": "2925020"
  },
  {
    "text": "Here are two more procedures. I can define the average of x\nand y to be the sum of x and y",
    "start": "2925020",
    "end": "2931859"
  },
  {
    "text": "divided by two. Or having had average and mean\nsquare, having had average and",
    "start": "2931860",
    "end": "2940830"
  },
  {
    "text": "square, I can use that to talk\nabout the mean square of something, which is the average\nof the square of x and",
    "start": "2940830",
    "end": "2948325"
  },
  {
    "text": "the square of y. So for example, having done\nthat, I could say, what's the",
    "start": "2948325",
    "end": "2953870"
  },
  {
    "text": "mean square of two and three?",
    "start": "2953870",
    "end": "2964915"
  },
  {
    "text": "And I should get the\naverage of four and nine, which is 6.5. ",
    "start": "2964915",
    "end": "2972970"
  },
  {
    "text": "The key thing here is that,\nhaving defined square, I can use it as if it were\nprimitive.",
    "start": "2972970",
    "end": "2978560"
  },
  {
    "text": " So if we look here on the\nslide, if I look at mean",
    "start": "2978560",
    "end": "2985200"
  },
  {
    "text": "square, the person defining mean\nsquare doesn't have to",
    "start": "2985200",
    "end": "2990910"
  },
  {
    "text": "know, at this point, whether\nsquare was something built into the language or\nwhether it was a",
    "start": "2990910",
    "end": "2997539"
  },
  {
    "text": "procedure that was defined. And that's a key thing in Lisp,\nthat you do not make",
    "start": "2997540",
    "end": "3004040"
  },
  {
    "text": "arbitrary distinctions between\nthings that happen to be primitive in the language\nand things that",
    "start": "3004040",
    "end": "3010400"
  },
  {
    "text": "happen to be built in. A person using that shouldn't\neven have to know. So the things you construct get\nused with all the power",
    "start": "3010400",
    "end": "3017800"
  },
  {
    "text": "and flexibility as if they\nwere primitives. In fact, you can drive that\nhome by looking on the computer one more time.",
    "start": "3017800",
    "end": "3024750"
  },
  {
    "text": "We talked about plus. And in fact, if I come here on\nthe computer screen and say,",
    "start": "3024750",
    "end": "3029920"
  },
  {
    "text": "what is the value of plus?  Notice what Lisp types out.",
    "start": "3029920",
    "end": "3036119"
  },
  {
    "text": "On the bottom there, it typed\nout, \"compound procedure plus.\" Because, in this system,\nit turns out that the",
    "start": "3036120",
    "end": "3043070"
  },
  {
    "text": "addition operator is itself\na compound procedure. And if I didn't just type that\nin, you'd never know that, and",
    "start": "3043070",
    "end": "3048140"
  },
  {
    "text": "it wouldn't make any\ndifference anyway. We don't care. It's below the level of\nthe abstraction that we're dealing with.",
    "start": "3048140",
    "end": "3054120"
  },
  {
    "text": "So the key thing is you cannot\ntell, should not be able to tell, in general, the difference\nbetween things that",
    "start": "3054120",
    "end": "3060910"
  },
  {
    "text": "are built in and things\nthat are compound. Why is that? Because the things that are\ncompound have an abstraction",
    "start": "3060910",
    "end": "3066630"
  },
  {
    "text": "wrapper wrapped around them. We've seen almost all the\nelements of Lisp now.",
    "start": "3066630",
    "end": "3072510"
  },
  {
    "text": "There's only one more we have to\nlook at, and that is how to make a case analysis. Let me show you what I mean.",
    "start": "3072510",
    "end": "3078760"
  },
  {
    "text": "We might want to think about the\nmathematical definition of the absolute value functions. I might say the absolute value\nof x is the function which has",
    "start": "3078760",
    "end": "3090520"
  },
  {
    "text": "the property that it's\nnegative of x.",
    "start": "3090520",
    "end": "3095670"
  },
  {
    "text": "For x less than zero, it's\nzero for x equal to zero.",
    "start": "3095670",
    "end": "3102579"
  },
  {
    "text": "And it's x for x greater\nthan zero. ",
    "start": "3102580",
    "end": "3109190"
  },
  {
    "text": "And Lisp has a way of making\ncase analyses. Let me define for you\nabsolute value.",
    "start": "3109190",
    "end": "3115210"
  },
  {
    "text": "Say define the absolute value\nof x is conditional.",
    "start": "3115210",
    "end": "3123080"
  },
  {
    "text": "This means case analysis,\nCOND. ",
    "start": "3123080",
    "end": "3128773"
  },
  {
    "text": "If x is less than zero, the\nanswer is negate x.",
    "start": "3128773",
    "end": "3138760"
  },
  {
    "text": " What I've written here\nis a clause.",
    "start": "3138760",
    "end": "3144290"
  },
  {
    "start": "3144290",
    "end": "3149490"
  },
  {
    "text": "This whole thing is a\nconditional clause, and it has two parts.",
    "start": "3149490",
    "end": "3156380"
  },
  {
    "text": "This part here is a predicate\nor a condition.",
    "start": "3156380",
    "end": "3164759"
  },
  {
    "text": "That's a condition. And the condition is expressed\nby something called a predicate, and a predicate in\nLisp is some sort of thing",
    "start": "3164760",
    "end": "3171170"
  },
  {
    "text": "that returns either\ntrue or false. And you see Lisp has a\nprimitive procedure, less-than, that tests whether\nsomething is true or false.",
    "start": "3171170",
    "end": "3180510"
  },
  {
    "text": "And the other part of a clause\nis an action or a thing to do,",
    "start": "3180510",
    "end": "3186940"
  },
  {
    "text": "in the case where that's true. And here, what I'm doing\nis negating x.",
    "start": "3186940",
    "end": "3192130"
  },
  {
    "text": "The negation operator, the\nminus sign in Lisp is a little bit funny. ",
    "start": "3192130",
    "end": "3197880"
  },
  {
    "text": "If there's two or more\narguments, if there's two arguments it subtracts the\nsecond one from the first, and we saw that. And if there's one argument,\nit negates it.",
    "start": "3197880",
    "end": "3205279"
  },
  {
    "text": "So this corresponds to that. And then there's another\nCOND clause. It says, in the case where\nx is equal to zero,",
    "start": "3205280",
    "end": "3214630"
  },
  {
    "text": "the answer is zero. And in the case where x\nis greater than zero,",
    "start": "3214630",
    "end": "3223480"
  },
  {
    "text": "the answer is x. Close that clause. Close the COND. Close the definition.",
    "start": "3223480",
    "end": "3228920"
  },
  {
    "text": "And there's the definition\nof absolute value. And you see it's the case\nanalysis that looks very much like the case analysis you\nuse in mathematics.",
    "start": "3228920",
    "end": "3235265"
  },
  {
    "text": " There's a somewhat different\nway of writing a restricted",
    "start": "3235265",
    "end": "3242300"
  },
  {
    "text": "case analysis. Often, you have a case analysis\nwhere you only have one case, where you test\nsomething, and then depending",
    "start": "3242300",
    "end": "3248810"
  },
  {
    "text": "on whether it's true or false,\nyou do something. And here's another definition of\nabsolute value which looks",
    "start": "3248810",
    "end": "3256150"
  },
  {
    "text": "almost the same, which says,\nif x is less than zero, the result is negate x.",
    "start": "3256150",
    "end": "3264380"
  },
  {
    "text": "Otherwise, the answer is x. And we'll be using \"if\" a lot. But again, the thing to remember\nis that this form of",
    "start": "3264380",
    "end": "3270650"
  },
  {
    "text": "absolute value that you're\nlooking at here, and then this one over here that I wrote\non the board, are",
    "start": "3270650",
    "end": "3277650"
  },
  {
    "text": "essentially the same. And \"if\" and COND are-- well, whichever way\nyou like it. You can think of COND as\nsyntactic sugar for \"if,\" or",
    "start": "3277650",
    "end": "3285100"
  },
  {
    "text": "you can think of \"if\" as\nsyntactic sugar for COND, and it doesn't make any\ndifference. The person implementing a Lisp\nsystem will pick one and",
    "start": "3285100",
    "end": "3291400"
  },
  {
    "text": "implement the other\nin terms of that. And it doesn't matter\nwhich one you pick. ",
    "start": "3291400",
    "end": "3302660"
  },
  {
    "text": "Why don't we break now, and\nthen take some questions. How come sometimes when I write\ndefine, I put an open",
    "start": "3302660",
    "end": "3311760"
  },
  {
    "text": "paren here and say, define open\nparen something or other,",
    "start": "3311760",
    "end": "3316790"
  },
  {
    "text": "and sometimes when\nI write this, I don't put an open paren?",
    "start": "3316790",
    "end": "3322330"
  },
  {
    "text": "The answer is, this particular\nform of \"define,\" where you",
    "start": "3322330",
    "end": "3327550"
  },
  {
    "text": "say define some expression, is\nthis very special thing for defining procedures.",
    "start": "3327550",
    "end": "3333630"
  },
  {
    "text": "But again, what it really means\nis I'm defining this symbol, square, to be that.",
    "start": "3333630",
    "end": "3341349"
  },
  {
    "text": "So the way you should think\nabout it is what \"define\" does is you write \"define,\" and the\nsecond thing you write is the",
    "start": "3341350",
    "end": "3348330"
  },
  {
    "text": "symbol here-- no open paren-- the symbol you're defining and\nwhat you're defining it to be.",
    "start": "3348330",
    "end": "3354610"
  },
  {
    "text": "That's like here\nand like here. That's sort of the basic way\nyou use \"define.\" And then,",
    "start": "3354610",
    "end": "3361480"
  },
  {
    "text": "there's this special syntactic\ntrick which allows you to define procedures that\nlook like this.",
    "start": "3361480",
    "end": "3368140"
  },
  {
    "text": "So the difference is, it's\nwhether or not you're defining a procedure. [MUSIC PLAYING]",
    "start": "3368140",
    "end": "3398109"
  },
  {
    "text": "Well, believe it or not, you\nactually now know enough Lisp to write essentially any\nnumerical procedure that you'd",
    "start": "3398110",
    "end": "3406610"
  },
  {
    "text": "write in a language like FORTRAN\nor Basic or whatever, or, essentially, any\nother language.",
    "start": "3406610",
    "end": "3411656"
  },
  {
    "text": "And you're probably saying,\nthat's not believable, because you know that these languages\nhave things like \"for",
    "start": "3411656",
    "end": "3416890"
  },
  {
    "text": "statements,\" and \"do until\nwhile\" or something. But we don't really\nneed any of that.",
    "start": "3416890",
    "end": "3424744"
  },
  {
    "text": "In fact, we're not going\nto use any of that in this course. Let me show you.",
    "start": "3424745",
    "end": "3430410"
  },
  {
    "text": "Again, looking back at square\nroot, let's go back to this square root algorithm of\nHeron of Alexandria.",
    "start": "3430410",
    "end": "3438505"
  },
  {
    "text": "Remember what that said. It said, to find an\napproximation to the square root of X, you make a guess,\nyou improve that guess by",
    "start": "3438505",
    "end": "3448730"
  },
  {
    "text": "averaging the guess and\nX over the guess. You keep improving that until\nthe guess is good enough.",
    "start": "3448730",
    "end": "3456381"
  },
  {
    "text": "I already alluded to the idea. The idea is that, if the initial\nguess that you took",
    "start": "3456382",
    "end": "3464650"
  },
  {
    "text": "was actually equal to the square\nroot of X, then G here would be equal to X/G.",
    "start": "3464650",
    "end": "3472760"
  },
  {
    "text": "So if you hit the square\nroot, averaging them wouldn't change it. If the G that you picked was\nlarger than the square root of",
    "start": "3472760",
    "end": "3479160"
  },
  {
    "text": "X, then X/G will be smaller than\nthe square root of X, so that when you average\nG and X/G, you get",
    "start": "3479160",
    "end": "3485890"
  },
  {
    "text": "something in between. So if you pick a G that's\ntoo small, your",
    "start": "3485890",
    "end": "3491789"
  },
  {
    "text": "answer will be too large. If you pick a G that's too\nlarge, if your G is larger",
    "start": "3491790",
    "end": "3497190"
  },
  {
    "text": "than the square root of X and\nX/G will be smaller than the square root of X. So averaging always gives you\nsomething in between.",
    "start": "3497190",
    "end": "3504460"
  },
  {
    "text": "And then, it's not quite\ntrivial, but it's possible to show that, in fact, if G misses\nthe square root of X by",
    "start": "3504460",
    "end": "3511050"
  },
  {
    "text": "a little bit, the average of G\nand X/G will actually keep getting closer to the square\nroot of X. So if you keep",
    "start": "3511050",
    "end": "3517800"
  },
  {
    "text": "doing this enough, you'll\neventually get as close as you want. And then there's another fact,\nthat you can always start out",
    "start": "3517800",
    "end": "3524170"
  },
  {
    "text": "this process by using 1\nas an initial guess.",
    "start": "3524170",
    "end": "3529210"
  },
  {
    "text": "And it'll always converge to\nthe square root of X. So that's this method of successive\naveraging due to",
    "start": "3529210",
    "end": "3535609"
  },
  {
    "text": "Heron of Alexandria. Let's write it in Lisp. Well, the central idea is, what\ndoes it mean to try a",
    "start": "3535610",
    "end": "3545770"
  },
  {
    "text": "guess for the square\nroot of X? Let's write that. So we'll say, define to try a\nguess for the square root of",
    "start": "3545770",
    "end": "3564310"
  },
  {
    "text": "X, what do we do? We'll say, if the guess is good\nenough to be a guess for",
    "start": "3564310",
    "end": "3584130"
  },
  {
    "text": "the square root of X,\nthen, as an answer, we'll take the guess.",
    "start": "3584130",
    "end": "3591550"
  },
  {
    "text": "Otherwise, we will try\nthe improved guess.",
    "start": "3591550",
    "end": "3598620"
  },
  {
    "text": "We'll improve that guess for\nthe square root of X, and",
    "start": "3598620",
    "end": "3605400"
  },
  {
    "text": "we'll try that as a guess for\nthe square root of X. Close the \"try.\" Close the \"if.\" Close\nthe \"define.\" So that's",
    "start": "3605400",
    "end": "3613510"
  },
  {
    "text": "how we try a guess. And then, the next part of the\nprocess said, in order to compute square roots, we'll\nsay, define to compute the",
    "start": "3613510",
    "end": "3628370"
  },
  {
    "text": "square root of X, we will try\none as a guess for the square",
    "start": "3628370",
    "end": "3635290"
  },
  {
    "text": "root of X. Well, we have to\ndefine a couple more things. We have to say, how is\na guess good enough?",
    "start": "3635290",
    "end": "3643770"
  },
  {
    "text": "And how do we improve a guess? So let's look at that. The algorithm to improve a guess\nfor the square root of",
    "start": "3643770",
    "end": "3653650"
  },
  {
    "text": "X, we average-- that was the algorithm-- we average the guess with\nthe quotient of",
    "start": "3653650",
    "end": "3660680"
  },
  {
    "text": "dividing X by the guess. That's how we improve a guess.",
    "start": "3660680",
    "end": "3665810"
  },
  {
    "text": "And to tell whether a guess is\ngood enough, well, we have to decide something. This is supposed to be a guess\nfor the square root of X, so",
    "start": "3665810",
    "end": "3671510"
  },
  {
    "text": "one possible thing you can do\nis say, when you take that guess and square it, do you get\nsomething very close to X?",
    "start": "3671510",
    "end": "3679109"
  },
  {
    "text": "So one way to say that is to\nsay, I square the guess, subtract X from that, and see if\nthe absolute value of that",
    "start": "3679110",
    "end": "3686900"
  },
  {
    "text": "whole thing is less than some\nsmall number, which depends on my purposes.",
    "start": "3686900",
    "end": "3692450"
  },
  {
    "text": " So there's a complete procedure\nfor how to compute",
    "start": "3692450",
    "end": "3700410"
  },
  {
    "text": "the square root of X. Let's look\nat the structure of that a little bit. ",
    "start": "3700410",
    "end": "3707970"
  },
  {
    "text": "I have the whole thing. I have the notion of how to\ncompute a square root.",
    "start": "3707970",
    "end": "3715370"
  },
  {
    "text": "That's some kind of module. That's some kind of black box. It's defined in terms of how to\ntry a guess for the square",
    "start": "3715370",
    "end": "3727340"
  },
  {
    "text": "root of X. \"Try\" is defined in terms of,\nwell, telling whether",
    "start": "3727340",
    "end": "3735110"
  },
  {
    "text": "something is good enough\nand telling how to improve something. So good enough. \"Try\" is defined in terms of\n\"good enough\" and \"improve.\"",
    "start": "3735110",
    "end": "3750790"
  },
  {
    "text": "And let's see what\nelse I fill in. Well, I'll go down this tree. \"Good enough\" was defined\nin terms of",
    "start": "3750790",
    "end": "3756039"
  },
  {
    "text": "absolute value, and square.  And improve was defined in\nterms of something called",
    "start": "3756040",
    "end": "3763289"
  },
  {
    "text": "averaging and then some other\nprimitive operator. Square root's defined in terms\nof \"try.\" \"Try\" is defined in",
    "start": "3763290",
    "end": "3769530"
  },
  {
    "text": "terms of \"good enough\"\nand \"improve,\" but also \"try\" itself.",
    "start": "3769530",
    "end": "3775410"
  },
  {
    "text": "So \"try\" is also defined in\nterms of how to try itself.",
    "start": "3775410",
    "end": "3782750"
  },
  {
    "text": "Well, that may give you some\nproblems. Your high school geometry teacher probably told\nyou that it's naughty to try",
    "start": "3782750",
    "end": "3790680"
  },
  {
    "text": "and define things in terms of\nthemselves, because it doesn't make sense. But that's false.",
    "start": "3790680",
    "end": "3796440"
  },
  {
    "text": "Sometimes it makes perfect\nsense to define things in terms of themselves. And this is the case.",
    "start": "3796440",
    "end": "3802918"
  },
  {
    "text": "And we can look at that. We could write down what this\nmeans, and say, suppose I",
    "start": "3802918",
    "end": "3808140"
  },
  {
    "text": "asked Lisp what the square\nroot of two is.  What's the square root\nof two mean?",
    "start": "3808140",
    "end": "3815710"
  },
  {
    "text": "Well, that means I try one\nas a guess for the",
    "start": "3815710",
    "end": "3822700"
  },
  {
    "text": "square root of two.  Now I look.",
    "start": "3822700",
    "end": "3827760"
  },
  {
    "text": "I say, gee, is one a good enough\nguess for the square root of two? And that depends on the test\nthat \"good enough\" does.",
    "start": "3827760",
    "end": "3834140"
  },
  {
    "text": "And in this case, \"good enough\"\nwill say, no, one is not a good enough guess for\nthe square root of two.",
    "start": "3834140",
    "end": "3839740"
  },
  {
    "text": "So that will reduce to saying,\nI have to try an improved--",
    "start": "3839740",
    "end": "3850350"
  },
  {
    "text": "improve one as a guess for the\nsquare root of two, and try",
    "start": "3850350",
    "end": "3855700"
  },
  {
    "text": "that as a guess for the\nsquare root of two. Improving one as a guess for the\nsquare root of two means I",
    "start": "3855700",
    "end": "3862350"
  },
  {
    "text": "average one and two\ndivided by one. So this is going\nto be average.",
    "start": "3862350",
    "end": "3869550"
  },
  {
    "text": "This piece here will be the\naverage of one and the",
    "start": "3869550",
    "end": "3877830"
  },
  {
    "text": "quotient of two by one. That's this piece here.",
    "start": "3877830",
    "end": "3884910"
  },
  {
    "text": "And this is 1.5.  So this square root of two\nreduces to trying one for the",
    "start": "3884910",
    "end": "3893670"
  },
  {
    "text": "square root of two, which\nreduces to trying 1.5 as a",
    "start": "3893670",
    "end": "3903369"
  },
  {
    "text": "guess for the square\nroot of two. So that makes sense. Let's look at the rest\nof the process.",
    "start": "3903370",
    "end": "3909650"
  },
  {
    "text": "If I try 1.5, that reduces.",
    "start": "3909650",
    "end": "3914890"
  },
  {
    "text": "1.5 turns out to be not good\nenough as a guess for the square root of two.",
    "start": "3914890",
    "end": "3920130"
  },
  {
    "text": "So that reduces to trying the\naverage of 1.5 and two divided by 1.5 as a guess for the\nsquare root of two.",
    "start": "3920130",
    "end": "3928200"
  },
  {
    "text": "That average turns\nout to be 1.333. So this whole thing reduces to\ntrying 1.333 as a guess for",
    "start": "3928200",
    "end": "3934215"
  },
  {
    "text": "the square root of two. And then so on. That reduces to another called\na \"good enough,\" 1.4",
    "start": "3934215",
    "end": "3940750"
  },
  {
    "text": "something or other. And then it keeps going until\nthe process finally stops with something that \"good enough\"\nthinks is good enough, which,",
    "start": "3940750",
    "end": "3947780"
  },
  {
    "text": "in this case, is 1.4142\nsomething or other. So the process makes\nperfect sense.",
    "start": "3947780",
    "end": "3955890"
  },
  {
    "text": " This, by the way, is called\na recursive definition.",
    "start": "3955890",
    "end": "3962619"
  },
  {
    "start": "3962620",
    "end": "3974410"
  },
  {
    "text": "And the ability to make\nrecursive definitions is a",
    "start": "3974410",
    "end": "3979470"
  },
  {
    "text": "source of incredible power. And as you can already see I've\nhinted at, it's the thing that effectively allows you to\ndo these infinite computations",
    "start": "3979470",
    "end": "3987160"
  },
  {
    "text": "that go on until something is\ntrue, without having any other constricts other than the\nability to call a procedure.",
    "start": "3987160",
    "end": "3993234"
  },
  {
    "text": " Well, let's see, there's\none more thing. Let me show you a variant of\nthis definition of square root",
    "start": "3993235",
    "end": "4003210"
  },
  {
    "text": "here on the slide. Here's sort of the same thing.",
    "start": "4003210",
    "end": "4008320"
  },
  {
    "text": "What I've done here is packaged\nthe definitions of \"improve\" and \"good enough\"\nand \"try\" inside \"square",
    "start": "4008320",
    "end": "4015339"
  },
  {
    "text": "root.\" So, in effect, what\nI've done is I've built a square root box.",
    "start": "4015340",
    "end": "4021860"
  },
  {
    "text": "So I've built a box that's the\nsquare root procedure that",
    "start": "4021860",
    "end": "4027320"
  },
  {
    "text": "someone can use. They might put in 36\nand get out six. And then, packaged inside this\nbox are the definitions of",
    "start": "4027320",
    "end": "4035079"
  },
  {
    "text": "\"try\" and \"good enough\"\nand \"improve.\"",
    "start": "4035080",
    "end": "4046530"
  },
  {
    "text": "So they're hidden\ninside this box. And the reason for doing that\nis that, if someone's using",
    "start": "4046530",
    "end": "4052010"
  },
  {
    "text": "this square root, if George is\nusing this square root, George probably doesn't care very much\nthat, when I implemented",
    "start": "4052010",
    "end": "4059180"
  },
  {
    "text": "square root, I had things inside\nthere called \"try\" and \"good enough\" and \"improve.\" And\nin fact, Harry might have",
    "start": "4059180",
    "end": "4068150"
  },
  {
    "text": "a cube root procedure that has\n\"try\" and \"good enough\" and \"improve.\" And in order to not\nget the whole system confused,",
    "start": "4068150",
    "end": "4073260"
  },
  {
    "text": "it'd be good for Harry to\npackage his internal procedures inside his\ncube root procedure.",
    "start": "4073260",
    "end": "4078319"
  },
  {
    "text": "Well, this is called block\nstructure, this particular way of packaging internals inside\nof a definition.",
    "start": "4078320",
    "end": "4089940"
  },
  {
    "text": "And let's go back and look\nat the slide again. The way to read this kind of\nprocedure is to say, to define",
    "start": "4089940",
    "end": "4097720"
  },
  {
    "text": "\"square root,\" well, inside that\ndefinition, I'll have the",
    "start": "4097720",
    "end": "4103009"
  },
  {
    "text": "definition of an \"improve\" and\nthe definition of \"good enough\" and the definition of\n\"try.\" And then, subject to",
    "start": "4103010",
    "end": "4111149"
  },
  {
    "text": "those definitions, the way I do\nsquare root is to try one. And notice here, I don't have to\nsay one as a guess for the",
    "start": "4111149",
    "end": "4118309"
  },
  {
    "text": "square root of X, because since\nit's all inside the square root, it sort of\nhas this X known.",
    "start": "4118310",
    "end": "4124270"
  },
  {
    "start": "4124270",
    "end": "4134770"
  },
  {
    "text": "Let me summarize. We started out with the idea\nthat what we're going to be",
    "start": "4134770",
    "end": "4139889"
  },
  {
    "text": "doing is expressing imperative\nknowledge.",
    "start": "4139890",
    "end": "4144960"
  },
  {
    "text": "And in fact, here's a slide\nthat summarizes the way we looked at Lisp. We started out by looking at\nsome primitive elements in",
    "start": "4144960",
    "end": "4153609"
  },
  {
    "text": "addition and multiplication,\nsome predicates for testing whether something is less-than\nor something's equal.",
    "start": "4153609",
    "end": "4159630"
  },
  {
    "text": "And in fact, we saw really\nsneakily in the system we're actually using, these aren't\nactually primitives, but it",
    "start": "4159630",
    "end": "4165160"
  },
  {
    "text": "doesn't matter. What matters is we're going\nto use them as if they're primitives. We're not going to\nlook inside.",
    "start": "4165160",
    "end": "4170219"
  },
  {
    "text": "We also have some primitive\ndata and some numbers. We saw some means of\ncomposition, means of",
    "start": "4170220",
    "end": "4176830"
  },
  {
    "text": "combination, the basic one being\ncomposing functions and building combinations with\noperators and operands.",
    "start": "4176830",
    "end": "4184839"
  },
  {
    "text": "And there were some other\nthings, like COND and \"if\" and \"define.\" But the main thing\nabout \"define,\" in particular,",
    "start": "4184840",
    "end": "4193790"
  },
  {
    "text": "was that it was the means\nof abstraction. It was the way that\nwe name things. You can also see from this slide\nnot only where we've",
    "start": "4193790",
    "end": "4199770"
  },
  {
    "text": "been, but holes we\nhave to fill in. At some point, we'll have to\ntalk about how you combine primitive data to get compound\ndata, and how you abstract",
    "start": "4199770",
    "end": "4207720"
  },
  {
    "text": "data so you can use large\nglobs of data as if they were primitive.",
    "start": "4207720",
    "end": "4213900"
  },
  {
    "text": "So that's where we're going. But before we do that, for the\nnext couple of lectures we're",
    "start": "4213900",
    "end": "4220790"
  },
  {
    "text": "going to be talking about, first\nof all, how it is that you make a link between these\nprocedures we write and the",
    "start": "4220790",
    "end": "4228900"
  },
  {
    "text": "processes that happen\nin the machine. And then, how it is that you\nstart using the power of Lisp",
    "start": "4228900",
    "end": "4236210"
  },
  {
    "text": "to talk not only about these\nindividual little computations, but about general\nconventional methods",
    "start": "4236210",
    "end": "4243080"
  },
  {
    "text": "of doing things. OK, are there any questions? AUDIENCE: Yes. If we defined A using\nparentheses instead of as we",
    "start": "4243080",
    "end": "4251880"
  },
  {
    "text": "did, what would be\nthe difference? PROFESSOR: If I wrote this, if\nI wrote that, what I would be",
    "start": "4251880",
    "end": "4258130"
  },
  {
    "text": "doing is defining a procedure\nnamed A. In this case, a",
    "start": "4258130",
    "end": "4263739"
  },
  {
    "text": "procedure of no arguments,\nwhich, when I ran it, would give me back five times five.",
    "start": "4263740",
    "end": "4270274"
  },
  {
    "text": "AUDIENCE: Right. I mean, you come up with the\nsame thing, except for you really got a different-- PROFESSOR: Right. And the difference would\nbe, in the old one--",
    "start": "4270274",
    "end": "4276330"
  },
  {
    "text": "Let me be a little\nbit clearer here. Let's call this A, like here.",
    "start": "4276330",
    "end": "4284070"
  },
  {
    "text": "And pretend here, just for\ncontrast, I wrote, define D to",
    "start": "4284070",
    "end": "4295060"
  },
  {
    "text": "be the product of\nfive and five. ",
    "start": "4295060",
    "end": "4300199"
  },
  {
    "text": "And the difference between\nthose, let's think about interactions with the\nLisp interpreter.",
    "start": "4300200",
    "end": "4305770"
  },
  {
    "text": "I could type in A and Lisp\nwould return 25.",
    "start": "4305770",
    "end": "4312860"
  },
  {
    "text": "I could type in D, if I just\ntyped in D, Lisp would return",
    "start": "4312860",
    "end": "4321239"
  },
  {
    "text": "compound procedure D, because\nthat's what it is.",
    "start": "4321240",
    "end": "4328000"
  },
  {
    "text": "It's a procedure. I could run D. I could say,\nwhat's the value of running D? Here is a combination\nwith no operands.",
    "start": "4328000",
    "end": "4336520"
  },
  {
    "text": "I see there are no operands. I didn't put any after D. And\nit would say, oh, that's 25.",
    "start": "4336520",
    "end": "4342940"
  },
  {
    "text": "Or I could say, just for\ncompleteness, if I typed in,",
    "start": "4342940",
    "end": "4348070"
  },
  {
    "text": "what's the value of running A? I get an error. The error would be the same\none as over there.",
    "start": "4348070",
    "end": "4355150"
  },
  {
    "text": "It'd be the error would say,\nsorry, 25, which is the value of A, is not an operator that\nI can apply to something.",
    "start": "4355150",
    "end": "4363719"
  },
  {
    "start": "4363720",
    "end": "4373076"
  }
]