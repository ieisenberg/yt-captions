[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "Okay, here's our final contract for how procedure\ncalls will work:",
    "start": "919",
    "end": "5620"
  },
  {
    "text": "The calling procedure (\"caller\") will\nPUSH the argument values onto the stack in",
    "start": "5620",
    "end": "10440"
  },
  {
    "text": "reverse order\nBranch to the entry point of the callee, putting",
    "start": "10440",
    "end": "14190"
  },
  {
    "text": "the return address into the linkage pointer.",
    "start": "14190",
    "end": "17640"
  },
  {
    "text": "When the callee returns, remove the argument\nvalues from the stack.",
    "start": "17640",
    "end": "23029"
  },
  {
    "text": "The called procedure (\"callee\") will\nPerform the promised computation, leaving",
    "start": "23029",
    "end": "27910"
  },
  {
    "text": "the result in R0.",
    "start": "27910",
    "end": "29980"
  },
  {
    "text": "Jump to the return address when the computation\nhas finished",
    "start": "29980",
    "end": "34170"
  },
  {
    "text": "Remove any items it has placed on the stack,\nleaving the stack as it was when the procedure",
    "start": "34170",
    "end": "39268"
  },
  {
    "text": "was entered.",
    "start": "39269",
    "end": "41089"
  },
  {
    "text": "Note that the arguments were PUSHed on the\nstack by the caller, so it will be up to the",
    "start": "41089",
    "end": "45780"
  },
  {
    "text": "caller to remove them.",
    "start": "45780",
    "end": "48038"
  },
  {
    "text": "Preserve the values in all registers except\nR0, which holds the return value.",
    "start": "48039",
    "end": "52989"
  },
  {
    "text": "So the caller can assume any values placed\nin registers before a nested call will be",
    "start": "52989",
    "end": "58050"
  },
  {
    "text": "there when the nested call returns.",
    "start": "58050",
    "end": "62878"
  },
  {
    "start": "62000",
    "end": "62000"
  },
  {
    "text": "We saw the code template for procedure calls\non an earlier slide.",
    "start": "62879",
    "end": "67600"
  },
  {
    "text": "Here's the template for the entry point to\na procedure F.",
    "start": "67600",
    "end": "71210"
  },
  {
    "text": "The code saves the caller's LP and BP values,\ninitializes BP for the current stack frame",
    "start": "71210",
    "end": "78030"
  },
  {
    "text": "and allocates words on the stack to hold any\nlocal variable values.",
    "start": "78030",
    "end": "83090"
  },
  {
    "text": "The final step is to PUSH the value of any\nregisters (besides R0) that will be used by",
    "start": "83090",
    "end": "88538"
  },
  {
    "text": "the remainder of the procedure's code.",
    "start": "88539",
    "end": "92060"
  },
  {
    "text": "The template for the exit sequence mirrors\nthe actions of the entry sequence, restoring",
    "start": "92060",
    "end": "97409"
  },
  {
    "text": "all the values saved by the entry sequence,\nperforming the POP operations in the reverse",
    "start": "97409",
    "end": "102420"
  },
  {
    "text": "of the order of the PUSH operations in the\nentry sequence.",
    "start": "102420",
    "end": "107350"
  },
  {
    "text": "Note that in moving the BP value into SP we've\nreset the stack to its state at the point",
    "start": "107350",
    "end": "113149"
  },
  {
    "text": "of the MOVE(SP,BP) in the entry sequence.",
    "start": "113149",
    "end": "116630"
  },
  {
    "text": "This implicitly undoes the effect of the ALLOCATE\nstatement in the entry sequence, so we don't",
    "start": "116630",
    "end": "121640"
  },
  {
    "text": "need a matching DEALLOCATE in the exit sequence.",
    "start": "121640",
    "end": "125889"
  },
  {
    "text": "The last instruction in the exit sequence\ntransfers control back to the calling procedure.",
    "start": "125889",
    "end": "132380"
  },
  {
    "text": "With practice you'll become familiar with\nthese code templates.",
    "start": "132380",
    "end": "135230"
  },
  {
    "text": "Meanwhile, you can refer back to this slide\nwhenever you need to generate code for a procedure",
    "start": "135230",
    "end": "140090"
  },
  {
    "text": "call.",
    "start": "140090",
    "end": "141400"
  },
  {
    "start": "141000",
    "end": "141000"
  },
  {
    "text": "Here's the code our compiler would generate\nfor the C implementation of factorial shown",
    "start": "141400",
    "end": "145819"
  },
  {
    "text": "on the left.",
    "start": "145819",
    "end": "147410"
  },
  {
    "text": "The entry sequence saves the caller's LP and\nBP, then initializes BP for the current stack",
    "start": "147410",
    "end": "153530"
  },
  {
    "text": "frame.",
    "start": "153530",
    "end": "154900"
  },
  {
    "text": "The value of R1 is saved so we can use R1\nin code that follows.",
    "start": "154900",
    "end": "159970"
  },
  {
    "text": "The exit sequence restores all the saved values,\nincluding that for R1.",
    "start": "159970",
    "end": "164810"
  },
  {
    "text": "The code for the body of the procedure has\narranged for R0 to contain the return value",
    "start": "164810",
    "end": "169780"
  },
  {
    "text": "by the time execution reaches the exit sequence.",
    "start": "169780",
    "end": "173830"
  },
  {
    "text": "The nested procedure call passes the argument\nvalue on the stack and removes it after the",
    "start": "173830",
    "end": "178380"
  },
  {
    "text": "nested call returns.",
    "start": "178380",
    "end": "181150"
  },
  {
    "text": "The remainder of the code is generated using\nthe templates we saw in the previous lecture.",
    "start": "181150",
    "end": "185879"
  },
  {
    "text": "Aside from computing and pushing the values\nof the arguments, there are approximately",
    "start": "185879",
    "end": "190879"
  },
  {
    "text": "10 instructions needed to implement the linking\napproach to a procedure call.",
    "start": "190879",
    "end": "195920"
  },
  {
    "text": "That's not much for a procedure of any size,\nbut might be significant for a trivial procedure.",
    "start": "195920",
    "end": "201590"
  },
  {
    "text": "As mentioned earlier, some optimizing compilers\ncan make the tradeoff of inlining small non-recursive",
    "start": "201590",
    "end": "207670"
  },
  {
    "text": "procedures saving this small amount of overhead.",
    "start": "207670",
    "end": "212450"
  },
  {
    "start": "212000",
    "end": "212000"
  },
  {
    "text": "So have we solved the activation record storage\nissue for recursive procedures?",
    "start": "212450",
    "end": "218280"
  },
  {
    "text": "Yes!",
    "start": "218280",
    "end": "219280"
  },
  {
    "text": "A new stack from is allocated for each procedure\ncall.",
    "start": "219280",
    "end": "223099"
  },
  {
    "text": "In each frame we see the storage for the argument\nand return address.",
    "start": "223099",
    "end": "227750"
  },
  {
    "text": "And as the nested calls return the stack frames\nwill be deallocated in inverse order.",
    "start": "227750",
    "end": "233560"
  },
  {
    "text": "Interestingly we can learn a lot about the\ncurrent state of execution by looking at the",
    "start": "233560",
    "end": "238000"
  },
  {
    "text": "active stack frames.",
    "start": "238000",
    "end": "240120"
  },
  {
    "text": "The current value of BP, along the older values\nsaved in the activation records, allow us",
    "start": "240120",
    "end": "246170"
  },
  {
    "text": "to identify the active procedure calls and\ndetermine their arguments, the values of any",
    "start": "246170",
    "end": "251370"
  },
  {
    "text": "local variables for active calls, and so on.",
    "start": "251370",
    "end": "254950"
  },
  {
    "text": "If we print out all this information at any\ngiven time we would have a \"stack trace\" showing",
    "start": "254950",
    "end": "260660"
  },
  {
    "text": "the progress of the computation.",
    "start": "260660",
    "end": "262250"
  },
  {
    "text": "In fact, when an problem occurs, many language\nruntimes will print out that stack trace to",
    "start": "262250",
    "end": "269220"
  },
  {
    "text": "help the programmer determine what happened.",
    "start": "269220",
    "end": "271730"
  },
  {
    "text": "And, of course, if you can interpret the information\nin the stack frames, you can show you understand",
    "start": "271730",
    "end": "277560"
  },
  {
    "text": "our conventions for procedure call and return.",
    "start": "277560",
    "end": "280450"
  },
  {
    "text": "Don't be surprised to find such a question\non a quiz :)",
    "start": "280450",
    "end": "283230"
  }
]