[
  {
    "text": "Welcome to Part 2 of 6.004x!",
    "start": "470",
    "end": "3980"
  },
  {
    "text": "In this part of the course, we turn our attention\nto the design and implementation of digital",
    "start": "3980",
    "end": "8280"
  },
  {
    "text": "systems that can perform useful computations\non different types of binary data.",
    "start": "8280",
    "end": "13780"
  },
  {
    "text": "We'll come up with a general-purpose design\nfor these systems, we which we call \"computers\",",
    "start": "13780",
    "end": "17660"
  },
  {
    "text": "so that they can serve as useful tools in\nmany diverse application areas.",
    "start": "17660",
    "end": "22820"
  },
  {
    "text": "Computers were first used to perform numeric\ncalculations in science and engineering, but",
    "start": "22820",
    "end": "26930"
  },
  {
    "text": "today they are used as the central control\nelement in any system where complex behavior",
    "start": "26930",
    "end": "32160"
  },
  {
    "text": "is required.",
    "start": "32160",
    "end": "34310"
  },
  {
    "text": "We have a lot to do in this chapter, so let's\nget started!",
    "start": "34310",
    "end": "37450"
  },
  {
    "text": "Suppose we want to design a system to compute\nthe factorial function on some numeric argument",
    "start": "37450",
    "end": "42080"
  },
  {
    "text": "N.\nN! is defined as the product of N times N-1",
    "start": "42080",
    "end": "47040"
  },
  {
    "text": "times N-2, and so on down to 1.",
    "start": "47040",
    "end": "50670"
  },
  {
    "text": "We can use a programming language like C to\ndescribe the sequence of operations necessary",
    "start": "50670",
    "end": "55149"
  },
  {
    "text": "to perform the factorial computation.",
    "start": "55150",
    "end": "57350"
  },
  {
    "text": "In this program there are two variables, \"a\"\nand \"b\".",
    "start": "57350",
    "end": "60210"
  },
  {
    "text": "\"a\" is used to accumulate the answer as we\ncompute it step-by-step.",
    "start": "60210",
    "end": "63829"
  },
  {
    "text": "\"b\" is used to hold the next value we need\nto multiply.",
    "start": "63830",
    "end": "68030"
  },
  {
    "text": "\"b\" starts with the value of the numeric argument\nN.",
    "start": "68030",
    "end": "71530"
  },
  {
    "text": "The DO loop is where the work gets done: on\neach loop iteration we perform one of the",
    "start": "71530",
    "end": "76110"
  },
  {
    "text": "multiplies from the factorial formula, updating\nthe value of the accumulator \"a\" with the",
    "start": "76110",
    "end": "80990"
  },
  {
    "text": "result, then decrementing \"b\" in preparation\nfor the next loop iteration.",
    "start": "80990",
    "end": "87060"
  },
  {
    "text": "If we want to implement a digital system that\nperforms this sequence of operations, it makes",
    "start": "87060",
    "end": "91298"
  },
  {
    "text": "sense to use sequential logic!",
    "start": "91299",
    "end": "93229"
  },
  {
    "text": "Here's the state transition diagram for a\nhigh-level finite-state machine designed to",
    "start": "93229",
    "end": "97460"
  },
  {
    "text": "perform the necessary computations in the\ndesired order.",
    "start": "97460",
    "end": "101548"
  },
  {
    "text": "We call this a high-level FSM since the \"outputs\"\nof each state are more than simple logic levels.",
    "start": "101549",
    "end": "107659"
  },
  {
    "text": "They are formulas indicating operations to\nbe performed on source variables, storing",
    "start": "107659",
    "end": "112149"
  },
  {
    "text": "the result in a destination variable.",
    "start": "112150",
    "end": "115570"
  },
  {
    "text": "The sequence of states visited while the FSM\nis running mirrors the steps performed by",
    "start": "115570",
    "end": "120260"
  },
  {
    "text": "the execution of the C program.",
    "start": "120260",
    "end": "122689"
  },
  {
    "text": "The FSM repeats the LOOP state until the new\nvalue to be stored in \"b\" is equal to 0, at",
    "start": "122689",
    "end": "128129"
  },
  {
    "text": "which point the FSM transitions into the final\nDONE state.",
    "start": "128129",
    "end": "132170"
  },
  {
    "text": "The high-level FSM is useful when designing\nthe circuitry necessary to implement the desired",
    "start": "132170",
    "end": "137300"
  },
  {
    "text": "computation using our digital logic building\nblocks.",
    "start": "137300",
    "end": "139330"
  },
  {
    "text": "We'll use 32-bit D-registers to hold the \"a\"\nand \"b\" values.",
    "start": "139330",
    "end": "144020"
  },
  {
    "text": "And we'll need a 2-bit D-register to hold\nthe 2-bit encoding of the current state, i.e.,",
    "start": "144020",
    "end": "149090"
  },
  {
    "text": "the encoding for either START, LOOP or DONE.",
    "start": "149090",
    "end": "152400"
  },
  {
    "text": "We'll include logic to compute the inputs\nrequired to implement the correct state transitions.",
    "start": "152400",
    "end": "158400"
  },
  {
    "text": "In this case, we need to know if the new value\nfor \"b\" is zero or not.",
    "start": "158400",
    "end": "162730"
  },
  {
    "text": "And, finally, we'll need logic to perform\nmultiply and decrement, and to select which",
    "start": "162730",
    "end": "167989"
  },
  {
    "text": "value should be loaded into the \"a\" and \"b\"\nregisters at the end of each FSM cycle.",
    "start": "167990",
    "end": "173200"
  },
  {
    "text": "Let's start by designing the logic that implements\nthe desired computations - we call this part",
    "start": "173200",
    "end": "177959"
  },
  {
    "text": "of the logic the \"datapath\".",
    "start": "177959",
    "end": "180540"
  },
  {
    "text": "First we'll need two 32-bit D-registers to\nhold the \"a\" and \"b\" values.",
    "start": "180540",
    "end": "184890"
  },
  {
    "text": "Then we'll draw the combinational logic blocks\nneeded to compute the values to be stored",
    "start": "184890",
    "end": "188770"
  },
  {
    "text": "in those registers.",
    "start": "188770",
    "end": "190030"
  },
  {
    "text": "In the START state , we need the constant\n1 to load into the \"a\" register and the constant",
    "start": "190030",
    "end": "195390"
  },
  {
    "text": "N to load into the \"b\" register.",
    "start": "195390",
    "end": "197720"
  },
  {
    "text": "In the LOOP state, we need to compute a*b\nfor the \"a\" register and b-1 for the \"b\" register.",
    "start": "197720",
    "end": "205770"
  },
  {
    "text": "Finally, in the DONE state , we need to be\nable to reload each register with its current",
    "start": "205770",
    "end": "210210"
  },
  {
    "text": "value.",
    "start": "210210",
    "end": "212190"
  },
  {
    "text": "We'll use multiplexers to select the appropriate\nvalue to load into each of the data registers.",
    "start": "212190",
    "end": "217050"
  },
  {
    "text": "These multiplexers are controlled by 2-bit\nselect signals that choose which of the three",
    "start": "217050",
    "end": "222160"
  },
  {
    "text": "32-bit input values will be the 32-bit value\nto be loaded into the register.",
    "start": "222160",
    "end": "227629"
  },
  {
    "text": "So by choosing the appropriate values for\nWASEL and WBSEL, we can make the datapath",
    "start": "227629",
    "end": "233060"
  },
  {
    "text": "compute the desired values at each step in\nthe FSM's operation.",
    "start": "233060",
    "end": "237849"
  },
  {
    "text": "Next we'll add the combinational logic needed\nto control the FSM's state transitions.",
    "start": "237849",
    "end": "242849"
  },
  {
    "text": "In this case, we need to test if the new value\nto be loaded into the \"b\" register is zero.",
    "start": "242849",
    "end": "248019"
  },
  {
    "text": "The Z signal from the datapath will be 1 if\nthat's the case and 0 otherwise.",
    "start": "248019",
    "end": "253370"
  },
  {
    "text": "Now we're all set to add the hardware for\nthe control FSM, which has one input (Z) from",
    "start": "253370",
    "end": "258840"
  },
  {
    "text": "the datapath and generates two 2-bit outputs\n(WASEL and WBSEL) to control the datapath.",
    "start": "258840",
    "end": "266280"
  },
  {
    "text": "Here's the truth table for the FSM's combinational\nlogic.",
    "start": "266280",
    "end": "269950"
  },
  {
    "text": "S is the current state, encoded as a 2-bit\nvalue, and S' is the next state.",
    "start": "269950",
    "end": "275860"
  },
  {
    "text": "Using our skills from Part 1 of the course,\nwe're ready to draw a schematic for the system!",
    "start": "275860",
    "end": "280699"
  },
  {
    "text": "We know how to design the appropriate multiplier\nand decrement circuitry.",
    "start": "280700",
    "end": "284340"
  },
  {
    "text": "And we can use our standard register-and-ROM\nimplementation for the control FSM.",
    "start": "284340",
    "end": "289030"
  },
  {
    "text": "The Z signal from the datapath is combined\nwith the 2 bits of current state to form the",
    "start": "289030",
    "end": "293010"
  },
  {
    "text": "3 inputs to the combinational logic, in this\ncase realized by a read-only memory with 2^3=8",
    "start": "293010",
    "end": "300720"
  },
  {
    "text": "locations.",
    "start": "300720",
    "end": "302610"
  },
  {
    "text": "Each ROM location has the appropriate values\nfor the 6 output bits: 2 bits each for WASEL,",
    "start": "302610",
    "end": "309000"
  },
  {
    "text": "WBSEL, and next state.",
    "start": "309000",
    "end": "311590"
  },
  {
    "text": "The table on the right shows the ROM contents,\nwhich are easily determined from the table",
    "start": "311590",
    "end": "315860"
  },
  {
    "text": "on the previous slide.",
    "start": "315860",
    "end": "316990"
  }
]