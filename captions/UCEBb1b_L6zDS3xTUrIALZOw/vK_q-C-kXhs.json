[
  {
    "text": "OK.\nToday we are going to talk about a very interesting\nalgorithm called Quicksort --",
    "start": "8000",
    "end": "18000"
  },
  {
    "text": "-- which was invented by Tony\nHoare in 1962.",
    "start": "23000",
    "end": "30000"
  },
  {
    "text": "And it has ended up being a\nreally interesting algorithm",
    "start": "30000",
    "end": "35961"
  },
  {
    "text": "from many points of view.\nAnd because of that, it turns out today's lecture is\ngoing to be both hard and fast.",
    "start": "35961",
    "end": "47559"
  },
  {
    "text": "If you see the person next to\nyou sleeping, you will want to say let's get\ngoing.",
    "start": "47559",
    "end": "56013"
  },
  {
    "text": "It's a divide-and-conquer\nalgorithm.",
    "start": "56013",
    "end": "61000"
  },
  {
    "text": "And it sorts,\nas they say, in place, meaning that it just\nrearranged the elements where",
    "start": "66000",
    "end": "74063"
  },
  {
    "text": "they are.\nThat is like insertion sort rearranges elements where they\nare.",
    "start": "74063",
    "end": "80784"
  },
  {
    "text": "Mergesort does not.\nMergesort requires extra storage in order to do the merge\noperation.",
    "start": "80784",
    "end": "90000"
  },
  {
    "text": "To merge in linear time and\nplace, it doesn't merge in place in linear time.\nIt doesn't do it just by",
    "start": "90000",
    "end": "97882"
  },
  {
    "text": "rearranging.\nIt is nice because it is in place, so that means that it is\nfairly efficient in its use of",
    "start": "97882",
    "end": "105923"
  },
  {
    "text": "storage.\nAnd it also happens to be very practical if you tune it a bit.\nThe basic algorithm turns out,",
    "start": "105924",
    "end": "113887"
  },
  {
    "text": "if you just implement that,\nit's not necessarily that efficient.\nBut if what you do was then do",
    "start": "113887",
    "end": "122553"
  },
  {
    "text": "the standard kinds of things you\ndo to goose up the runtime of",
    "start": "122553",
    "end": "127744"
  },
  {
    "text": "something, and we'll talk a\nlittle about what those things are, then it can be very,\nvery practical.",
    "start": "127744",
    "end": "136000"
  },
  {
    "text": "So, it uses divide-and-conquer\nparadigm.",
    "start": "136000",
    "end": "140000"
  },
  {
    "text": "First step is divide.\nAnd to do this basically it",
    "start": "153000",
    "end": "160518"
  },
  {
    "text": "does it by partitioning.\nSo, it partitions the input",
    "start": "160518",
    "end": "168506"
  },
  {
    "text": "array into two subarrays around\nan element we call the pivot --",
    "start": "168506",
    "end": "179000"
  },
  {
    "text": "-- such that elements in the\nlower subarray are less than or",
    "start": "184000",
    "end": "194892"
  },
  {
    "text": "equal to x, are less than or\nequal to elements in the upper",
    "start": "194892",
    "end": "205599"
  },
  {
    "text": "subarray.\nIf we draw a picture of the",
    "start": "205599",
    "end": "211222"
  },
  {
    "text": "input array, this partition step\nbasically takes some element x",
    "start": "211223",
    "end": "218626"
  },
  {
    "text": "and everything over here is less\nthan or equal to x after the",
    "start": "218626",
    "end": "225791"
  },
  {
    "text": "partition step and everything\nover here is greater than or",
    "start": "225791",
    "end": "232597"
  },
  {
    "text": "equal to x.\nAnd so now the conquer step is pretty easy.\nYou just recursively sort the",
    "start": "232597",
    "end": "244549"
  },
  {
    "text": "two subarrays.\nSo, I recursively sort the",
    "start": "244549",
    "end": "250823"
  },
  {
    "text": "elements less than or equal to\nx, I recursively sort the",
    "start": "250823",
    "end": "259450"
  },
  {
    "text": "elements greater than or equal\nto x.",
    "start": "259450",
    "end": "264941"
  },
  {
    "text": "And then combine is then just\ntrivial.",
    "start": "264941",
    "end": "272000"
  },
  {
    "text": "Because once I have sorted the\nthings less than or equal to x, then sorted the things greater\nthan or equal to x,",
    "start": "272000",
    "end": "280345"
  },
  {
    "text": "the whole thing is sorted.\nSo, there is nothing to do really for the combine.\nThe key step in quicksort is",
    "start": "280346",
    "end": "288162"
  },
  {
    "text": "this partition step.\nThat is the thing that does all of the work.\nAnd so you can view quicksort",
    "start": "288162",
    "end": "295143"
  },
  {
    "text": "of just as recursive\npartitioning. That's all it is.\nJust as mergesort was recursive",
    "start": "295143",
    "end": "306358"
  },
  {
    "text": "merging, quicksort sort of goes\nthe other way around and does",
    "start": "306358",
    "end": "318666"
  },
  {
    "text": "recursive partitioning.\nThe key is the linear time,",
    "start": "318666",
    "end": "328922"
  },
  {
    "text": "by which I mean theta n,\npartitioning subroutine.",
    "start": "328923",
    "end": "340000"
  },
  {
    "text": "And here are some pseudocode\nfor it. This is actually slightly\ndifferent from the book.",
    "start": "340000",
    "end": "347533"
  },
  {
    "text": "The book has one.\nIn fact, there is a nice problem in the book that has\neven a different one,",
    "start": "347533",
    "end": "355604"
  },
  {
    "text": "but they are all basically the\nsame idea. Partition (A,\np, q).",
    "start": "355605",
    "end": "361655"
  },
  {
    "text": "And what we are looking at,\nat this step of the recursion, is the subarray A from p to q.\nAnd basically we pick a pivot,",
    "start": "361655",
    "end": "371853"
  },
  {
    "text": "which is we are going to just\npick as the first element of the",
    "start": "371853",
    "end": "377169"
  },
  {
    "text": "array A of p.",
    "start": "377169",
    "end": "379000"
  },
  {
    "text": "And the book,\njust for your information, uses A of q.\nI use A of p.",
    "start": "386000",
    "end": "392054"
  },
  {
    "text": "It doesn't really matter.\nAnd then we set an index to p",
    "start": "392054",
    "end": "397162"
  },
  {
    "text": "and then we have a loop.",
    "start": "397162",
    "end": "400000"
  },
  {
    "text": "This is the code.\nBasically the structure of it",
    "start": "455000",
    "end": "460845"
  },
  {
    "text": "is a for loop with an \"if\"\nstatement in the middle.",
    "start": "460845",
    "end": "467198"
  },
  {
    "text": "And so the structure of the\nalgorithm of this partitioning",
    "start": "467198",
    "end": "474441"
  },
  {
    "text": "step looks as follows.\nWe set the pivot to be the",
    "start": "474441",
    "end": "480888"
  },
  {
    "text": "first element.\nHere is p and here is q. This is going to be our\ninvariant for the loop.",
    "start": "480888",
    "end": "490222"
  },
  {
    "text": "And, at any time during the\nexecution of a loop,",
    "start": "490222",
    "end": "495443"
  },
  {
    "text": "I essentially have some values\nup to i which are already less",
    "start": "495444",
    "end": "502111"
  },
  {
    "text": "than or equal to x and then some\nvalues that end at j minus 1",
    "start": "502111",
    "end": "508776"
  },
  {
    "text": "that are greater than or equal\nto x.",
    "start": "508777",
    "end": "514000"
  },
  {
    "text": "And then I don't know about the\nrest. And so we start out with i\nequal to p and j equal to p plus",
    "start": "514000",
    "end": "524531"
  },
  {
    "text": "1.\nIt starts out at p plus 1 so that everything is unknown\nexcept for x here.",
    "start": "524531",
    "end": "532821"
  },
  {
    "text": "And then the idea is that it is\ngoing to preserve this",
    "start": "532821",
    "end": "538759"
  },
  {
    "text": "invariant.\nAnd the way it does it is, as we go through the loop,\nit looks at a of j and says is",
    "start": "538759",
    "end": "546505"
  },
  {
    "text": "it greater than or equal to x?\nSorry, is it less than or equal to x?\nIf it is greater than or equal",
    "start": "546505",
    "end": "552952"
  },
  {
    "text": "to x it does nothing,\nbecause what can happen? If this is greater than or\nequal to x, essentially it just",
    "start": "552952",
    "end": "559800"
  },
  {
    "text": "goes to the next iterational\nloop which moves this boundary and the invariant is satisfied.\nDoes everybody see that?",
    "start": "559800",
    "end": "567388"
  },
  {
    "text": "Yeah, OK.\nBut if it is less than or equal to x, I have got a problem if I\nwant to maintain the invariant",
    "start": "567388",
    "end": "575512"
  },
  {
    "text": "if this next element is less\nthan or equal to x. And so what it does then is it\nsays oh, let me just move this",
    "start": "575513",
    "end": "583088"
  },
  {
    "text": "boundary and swap this element\nhere, which is greater than or equal to x, with this one here\nthat is less than or equal to x,",
    "start": "583088",
    "end": "591725"
  },
  {
    "text": "thereby increasing the size of\nthis subarray and then the invariant is satisfied again.\nIt is a fairly simple",
    "start": "591725",
    "end": "599230"
  },
  {
    "text": "algorithm.\nAnd it is actually a very tight and easy algorithm.\nThat is one reason that this is",
    "start": "599230",
    "end": "608677"
  },
  {
    "text": "such a great piece of code\nbecause it is very efficient.",
    "start": "608677",
    "end": "613890"
  },
  {
    "text": "Now, in principle,\nthe running time for this on n elements is order n.",
    "start": "613890",
    "end": "621000"
  },
  {
    "text": "Because I am basically just\ngoing through the n elements and just doing a constant amount of\nwork and then just a constant",
    "start": "628000",
    "end": "635584"
  },
  {
    "text": "amount of work outside.\nThis is a clever piece of code. In fact, in principle partition\nis easy, right?",
    "start": "635584",
    "end": "641958"
  },
  {
    "text": "If I weren't worrying about\ndoing it in place, it is really a pretty easy\nthing to do.",
    "start": "641958",
    "end": "647248"
  },
  {
    "text": "I take an element and just\ncompare every other element with it.\nI throw one into one bin and",
    "start": "647248",
    "end": "652920"
  },
  {
    "text": "one into the other.\nThat is clearly linear time. But often what you find is that\njust because you can do it that",
    "start": "652920",
    "end": "661105"
  },
  {
    "text": "way theoretically doesn't mean\nthat that is going to end up giving you good code.\nAnd this is a nice piece of",
    "start": "661105",
    "end": "668125"
  },
  {
    "text": "code that allows you to do it in\nplace. And that is one reason why this\nis a particularly good",
    "start": "668125",
    "end": "674152"
  },
  {
    "text": "algorithm, because the constants\nare good. So, yes, when we do asymptotic\nanalysis we tend to ignore the",
    "start": "674152",
    "end": "680841"
  },
  {
    "text": "constants, but when you're\nactually building code you care about the constants.\nBut first you care much more",
    "start": "680841",
    "end": "690313"
  },
  {
    "text": "than just about the constants,\nis whether overall it is going",
    "start": "690314",
    "end": "697417"
  },
  {
    "text": "to be a fast algorithm.\nLet's go through an example of",
    "start": "697417",
    "end": "703691"
  },
  {
    "text": "this, I guess I will do it over\nhere, just so we get the gist.",
    "start": "703691",
    "end": "710912"
  },
  {
    "text": "Here is a sample array that I\nhave created out of hallcloth.",
    "start": "710912",
    "end": "717897"
  },
  {
    "text": "And here we are going to set x,\nthe pivot, to be 6.",
    "start": "717897",
    "end": "725000"
  },
  {
    "text": "Let's look to see how this\nalgorithm works. So, i starts out here and j\nstarts out here if we",
    "start": "725000",
    "end": "732459"
  },
  {
    "text": "initialize.\nAnd what we do is start scanning right,\nessentially that code is",
    "start": "732459",
    "end": "738510"
  },
  {
    "text": "scanning right until it gets\nsomething which is less than or equal to the pivot.\nIt keeps going here until it",
    "start": "738510",
    "end": "747296"
  },
  {
    "text": "finds, j keeps incrementing\nuntil it finds something that is less than or equal to the pivot.\nAnd, in that case,",
    "start": "747296",
    "end": "758239"
  },
  {
    "text": "it is the number 5.\nThen it says we will swap these",
    "start": "758239",
    "end": "764459"
  },
  {
    "text": "two things.\nAnd it does that and we get 6,",
    "start": "764459",
    "end": "769558"
  },
  {
    "text": "5, 13, 10, 8,\n3, 2, 11. And meanwhile now i gets\nincremented and j continues",
    "start": "769559",
    "end": "778641"
  },
  {
    "text": "where it left off.\nAnd so now we keep scanning",
    "start": "778641",
    "end": "785375"
  },
  {
    "text": "right until we get to something\nthat is less than or equal to",
    "start": "785375",
    "end": "792875"
  },
  {
    "text": "the pivot.\nIn this case it is 3. We swap 3 and 5 and get 6,\n3, etc.",
    "start": "792875",
    "end": "800875"
  },
  {
    "text": "And now, at this step we\nincrement i, we start j out",
    "start": "800875",
    "end": "807250"
  },
  {
    "text": "here.\nAnd in this case, right off the bat,\nwe have something which is less",
    "start": "807250",
    "end": "815686"
  },
  {
    "text": "than or equal to x,\nso we swap these two. I blew it, didn't I?\nOops.",
    "start": "815686",
    "end": "822271"
  },
  {
    "text": "What did I do?\nI swapped the wrong thing, didn't I, here?\nAh-ha.",
    "start": "822271",
    "end": "828450"
  },
  {
    "text": "That is why I am not a\ncomputer. Good.\nWe should have swapped this",
    "start": "828450",
    "end": "834833"
  },
  {
    "text": "guy, right?\nSwapped i plus 1, right?\nThis was i.",
    "start": "834833",
    "end": "841230"
  },
  {
    "text": "We swap i plus 1,\ngood. So, that's all wrong.\nLet's swap the right things.",
    "start": "841230",
    "end": "849171"
  },
  {
    "text": "Now we have 6,\n5, 3, 10, 8, 13, 2, 11.\nThat even corresponds to my",
    "start": "849171",
    "end": "856217"
  },
  {
    "text": "notes for some strange reason.\nThis is i and now this is j.",
    "start": "856217",
    "end": "862703"
  },
  {
    "text": "And now when I look,\nI immediately have something",
    "start": "862703",
    "end": "868072"
  },
  {
    "text": "that is less than or equal to\nthe pivot.",
    "start": "868072",
    "end": "874000"
  },
  {
    "text": "We swap this and i plus 1,\nso now we have 6,",
    "start": "874000",
    "end": "881603"
  },
  {
    "text": "5, 3, 2, 8, 13,\n10, 11. And we, at that point,\nincrement i to here.",
    "start": "881603",
    "end": "892920"
  },
  {
    "text": "And we have j now going here\nand j runs to the end.",
    "start": "892920",
    "end": "903000"
  },
  {
    "text": "And the loop terminates.\nWhen the loop terminates there",
    "start": "903000",
    "end": "908579"
  },
  {
    "text": "is one less swap that we do,\nwhich is to put our pivot",
    "start": "908579",
    "end": "914055"
  },
  {
    "text": "element in the middle between\nthe two subarrays. Here we swap this one and this\none, and so that gives us then",
    "start": "914055",
    "end": "925110"
  },
  {
    "text": "2, 5, 3, 6, 8,\n13, 10, 11. And this is the pivot.\nAnd everything over here is",
    "start": "925110",
    "end": "933830"
  },
  {
    "text": "less than or equal to the pivot.\nAnd everything over here is",
    "start": "933830",
    "end": "940016"
  },
  {
    "text": "greater than or equal to the\npivot.",
    "start": "940016",
    "end": "944000"
  },
  {
    "text": "OK, so the quicksort routine.\nOnce we have this partition routine, quicksort is a pretty\neasy piece of code to write.",
    "start": "956000",
    "end": "963000"
  },
  {
    "text": "I should have said return here\ni, right? You have got to return with the\npivot.",
    "start": "978000",
    "end": "984691"
  },
  {
    "text": "Here I have got to return i\nbecause we want to know where the pivot element is.\nSorry.",
    "start": "984691",
    "end": "993693"
  },
  {
    "text": "I will plug in my code.\nr gets partition of (A,",
    "start": "993693",
    "end": "1006677"
  },
  {
    "text": "p, q) and then we quicksort (A,\np, r-1) and quicksort of (A,",
    "start": "1006677",
    "end": "1023330"
  },
  {
    "text": "r+1, q).\nAnd that is it.",
    "start": "1023330",
    "end": "1029612"
  },
  {
    "text": "That's the code.\nThe initial call is quicksort",
    "start": "1029612",
    "end": "1037449"
  },
  {
    "text": "of (A, 1, n).\nBecause once we partitioned,",
    "start": "1037449",
    "end": "1044589"
  },
  {
    "text": "we just have to quicksort the\ntwo portions,",
    "start": "1044589",
    "end": "1051903"
  },
  {
    "text": "the left and right portions.\nJust the boundary case is",
    "start": "1051904",
    "end": "1059355"
  },
  {
    "text": "probably worth mentioning for a\nsecond. If there are zero or one\nelements, that is basically what",
    "start": "1059355",
    "end": "1064451"
  },
  {
    "text": "can possibly happen here,\nis that I get zero or one elements here.\nThen the point is there is nothing to do because the array\nis sorted, either because it is",
    "start": "1064451",
    "end": "1072692"
  },
  {
    "text": "an empty array or because it\nonly has one element. One of the tricks to making\nquicksort go fast,",
    "start": "1072692",
    "end": "1079035"
  },
  {
    "text": "as one tunes this,\nis to, in fact, look at having a special\npurpose sorting routine for",
    "start": "1079035",
    "end": "1084702"
  },
  {
    "text": "small numbers of elements.\nFor example, if you get down to five\nelements having some straight",
    "start": "1084702",
    "end": "1090773"
  },
  {
    "text": "line piece of code that knows\nhow to sort five elements sufficiently as opposed to\ncontinuing to go through",
    "start": "1090773",
    "end": "1097789"
  },
  {
    "text": "recursion in order to accomplish\nthat. And there are a variety of\nother things.",
    "start": "1097789",
    "end": "1102916"
  },
  {
    "text": "This is a tail recursive code,\nand so you can use certain tail recursion optimizations.\nAnd there are a variety of",
    "start": "1102916",
    "end": "1111572"
  },
  {
    "text": "other kinds of optimizations\nthat you can use to make this code go fast.\nSo, yeah, you can tune it up a",
    "start": "1111572",
    "end": "1117617"
  },
  {
    "text": "bit beyond what is there,\nbut the core of it is this efficient partitioning routine.",
    "start": "1117618",
    "end": "1123000"
  },
  {
    "text": "That is the algorithm.\nIt turns out that looking at",
    "start": "1133000",
    "end": "1138660"
  },
  {
    "text": "how fast it runs is actually a\nlittle bit challenging.",
    "start": "1138660",
    "end": "1145000"
  },
  {
    "text": "In the analysis,\nwe are going to assume that all elements are distinct.\nIt turns out that this",
    "start": "1145000",
    "end": "1153855"
  },
  {
    "text": "particular code does not work\nvery well when you have repeated",
    "start": "1153855",
    "end": "1159791"
  },
  {
    "text": "elements, but Hoare's original\npartitioning routine is actually",
    "start": "1159791",
    "end": "1165825"
  },
  {
    "text": "more efficient in that case if\nthere are duplicates in what you",
    "start": "1165825",
    "end": "1171859"
  },
  {
    "text": "are sorting.\nAnd I encourage you to look at that.\nIt has a much more complicated",
    "start": "1171859",
    "end": "1178700"
  },
  {
    "text": "invariant for partitioning\nroutine, but it does a similar kind of thing.\nIt's just a bit more",
    "start": "1178700",
    "end": "1185209"
  },
  {
    "text": "complicated.\nIf they weren't all distinct, there are things you can do to\nmake them distinct or you can",
    "start": "1185209",
    "end": "1192440"
  },
  {
    "text": "just use this code.\nThe easiest thing to do is just use Hoare's original code\nbecause that works pretty well",
    "start": "1192441",
    "end": "1200034"
  },
  {
    "text": "when they are nondistinct.\nBut this is a little bit easier",
    "start": "1200034",
    "end": "1207617"
  },
  {
    "text": "to understand.\nLet's let T(n) be the",
    "start": "1207617",
    "end": "1212829"
  },
  {
    "text": "worst-case running time on n\nelements.",
    "start": "1212829",
    "end": "1218340"
  },
  {
    "text": "And so what is the worse-case?\nWhat is the worse-case going to",
    "start": "1218340",
    "end": "1227424"
  },
  {
    "text": "be for quicksort?",
    "start": "1227425",
    "end": "1231000"
  },
  {
    "text": "That's right.\nIf you always pick the pivot and everything is greater than\nor everything is less than,",
    "start": "1240000",
    "end": "1247195"
  },
  {
    "text": "you are not going to partition\nthe array very well. And when does that happen?\nWhat does the original input",
    "start": "1247195",
    "end": "1254831"
  },
  {
    "text": "look like that makes that\nhappen? If it is already sorted or\nreverse sorted.",
    "start": "1254832",
    "end": "1261000"
  },
  {
    "text": "So, if the input is sorted or\nreverse sorted. That is actually kind of\nimportant to understand,",
    "start": "1261000",
    "end": "1269747"
  },
  {
    "text": "because it turns out the most\ncommon thing to sort is something that is already\nsorted, surprisingly,",
    "start": "1269747",
    "end": "1279065"
  },
  {
    "text": "or things that are nearly\nsorted. But often it is just sorted and\nsomebody wants to make sure it",
    "start": "1279065",
    "end": "1287908"
  },
  {
    "text": "is sorted.\nWell, let's just sort it again",
    "start": "1287908",
    "end": "1293367"
  },
  {
    "text": "rather than checking to see if\nit is sorted. And, in those cases,\none side of the partition of",
    "start": "1293367",
    "end": "1303580"
  },
  {
    "text": "each partition has no elements.\nThen we can write out what the",
    "start": "1303581",
    "end": "1310428"
  },
  {
    "text": "recursion is for that.\nWe have T(n). If one side has no elements,\nwe are going to have T(0) on",
    "start": "1310428",
    "end": "1320642"
  },
  {
    "text": "that side.\nAnd on the other side we are",
    "start": "1320642",
    "end": "1326122"
  },
  {
    "text": "going to have T(n-1).\nWe are just writing out the",
    "start": "1326123",
    "end": "1331479"
  },
  {
    "text": "recursion for this.\nOne side has no elements. The other side has n-1\nelements.",
    "start": "1331479",
    "end": "1339846"
  },
  {
    "text": "And then partitioning and all\nthe bookkeeping and so forth is",
    "start": "1339847",
    "end": "1346541"
  },
  {
    "text": "order n.\nWhat is T(0)? What is T(0)?\nWhat is that asymptotically?",
    "start": "1346541",
    "end": "1355530"
  },
  {
    "text": "It's a constant,\norder 1. That is just order 1 + T(n-1) +\norder n.",
    "start": "1355530",
    "end": "1364027"
  },
  {
    "text": "Well, the order 1 can be\nabsorbed into the order n,",
    "start": "1364027",
    "end": "1370772"
  },
  {
    "text": "so this is really just saying\nit is T(n-1) + order n.",
    "start": "1370772",
    "end": "1379000"
  },
  {
    "text": "And what is that equal to?\nThat is order n^2.",
    "start": "1379000",
    "end": "1388538"
  },
  {
    "text": "Why is that order n^2?\nIt is an arithmetic series.",
    "start": "1388538",
    "end": "1399159"
  },
  {
    "text": "Actually, just like we got for\ninsertion sort.",
    "start": "1399160",
    "end": "1410000"
  },
  {
    "text": "Just like for insertion sort it\nis an arithmetic series.",
    "start": "1410000",
    "end": "1415843"
  },
  {
    "text": "Going through all that work and\nwe have an algorithm called",
    "start": "1415843",
    "end": "1422006"
  },
  {
    "text": "quicksort, and it is no faster\nthan insertion sort.",
    "start": "1422006",
    "end": "1427318"
  },
  {
    "text": "Nevertheless,\nI said it was a good algorithm. The reason it is a good\nalgorithm is because its average",
    "start": "1427318",
    "end": "1437837"
  },
  {
    "text": "case time, as we are going to\nsee, is very good.",
    "start": "1437837",
    "end": "1444000"
  },
  {
    "text": "But let's try to understand\nthis a little bit more just so",
    "start": "1444000",
    "end": "1449681"
  },
  {
    "text": "that we understand the\ndifference between what is going",
    "start": "1449681",
    "end": "1455063"
  },
  {
    "text": "to happen in the average case\nand what is going to happen in",
    "start": "1455063",
    "end": "1460943"
  },
  {
    "text": "the worse-case.\nLet's draw a recursion tree for this for T(n) = T(0) + T(n-1) +\nand I will make the constant",
    "start": "1460943",
    "end": "1471408"
  },
  {
    "text": "explicit for cn.\nSo, we get an intuition of what",
    "start": "1471408",
    "end": "1476539"
  },
  {
    "text": "is going on.\nSome constant times n. And then we have T(n) is equal\nto, and we write it with the",
    "start": "1476539",
    "end": "1484075"
  },
  {
    "text": "constant part here,\ncn, and then T(0) here, and then T(n-1) here.\nNow, I know that all you folks",
    "start": "1484075",
    "end": "1491692"
  },
  {
    "text": "are really fast and want to jump\nimmediately to the full-blown tree.\nBut, let me tell you,",
    "start": "1491692",
    "end": "1499700"
  },
  {
    "text": "my advice is that you spend\njust a couple of minutes writing it out.\nSince the tree grows",
    "start": "1499701",
    "end": "1506668"
  },
  {
    "text": "exponentially,\nit only costs you a constant overhead to write out the small\ncases and make sure that you",
    "start": "1506668",
    "end": "1514850"
  },
  {
    "text": "have got the pattern that you\nare developing. So, I am going to go one more\nstep.",
    "start": "1514850",
    "end": "1521169"
  },
  {
    "text": "Here we have T(0) and now this\nbecomes c(n-1) and now we have another T(0) over here and\nT(n-2).",
    "start": "1521169",
    "end": "1530000"
  },
  {
    "text": "And we continue that,\ndot, dot, dot.",
    "start": "1530000",
    "end": "1535864"
  },
  {
    "text": "That is all equal to cn with a\nT(0) here, c(n-1) with a T(0),",
    "start": "1535864",
    "end": "1545918"
  },
  {
    "text": "c(n-2), T(0) here,\nand that goes all the way down",
    "start": "1545918",
    "end": "1553961"
  },
  {
    "text": "until we end up with T(1) down\nhere.",
    "start": "1553962",
    "end": "1561000"
  },
  {
    "text": "What is the height of this tree?",
    "start": "1561000",
    "end": "1567000"
  },
  {
    "text": "What is the height of the tree\nhere? Yeah, n.\nGood.",
    "start": "1577000",
    "end": "1582473"
  },
  {
    "text": "Because every step we are just\ndecrementing the argument by 1.",
    "start": "1582473",
    "end": "1590000"
  },
  {
    "text": "So, the height is n.\nTo analyze this, let's first add up everything\nthat is here.",
    "start": "1590000",
    "end": "1600833"
  },
  {
    "text": "Just so we understand where\nthese things are coming from,",
    "start": "1600833",
    "end": "1608611"
  },
  {
    "text": "this is just theta of the\nsummation of k equals 1 to n of",
    "start": "1608611",
    "end": "1616388"
  },
  {
    "text": "k, actually of ck.\nThat is what is in there.",
    "start": "1616388",
    "end": "1622393"
  },
  {
    "text": "And that is equal to order n^2.\nThat is where our algorithmatic",
    "start": "1622393",
    "end": "1628329"
  },
  {
    "text": "series is coming from.\nSo, that is Theta(n^2). And then all of these things\nhere are all Theta(1).",
    "start": "1628329",
    "end": "1638000"
  },
  {
    "text": "And how many of them are there?\nThere are n Theta(1)'s.",
    "start": "1643000",
    "end": "1653000"
  },
  {
    "text": "So, the total amount is T(n) =\nTheta(n) + Theta(n^2) =",
    "start": "1653000",
    "end": "1674681"
  },
  {
    "text": "Theta(n^2).\nJust to see what the structure",
    "start": "1674681",
    "end": "1683189"
  },
  {
    "text": "is in terms of the recursion\ntree, it is a highly unbalanced",
    "start": "1683189",
    "end": "1689461"
  },
  {
    "text": "recursion tree.\nNow I am going to do something that I told you should never do,\nwhich is we are going to be do",
    "start": "1689461",
    "end": "1700837"
  },
  {
    "text": "a best-case analysis.\nThis is for intuition only.",
    "start": "1700837",
    "end": "1705940"
  },
  {
    "text": "And, in general,\nwe don't do best-case analyses.",
    "start": "1705940",
    "end": "1712000"
  },
  {
    "text": "It doesn't mean anything,\nunless we get some intuition for it maybe.\nBut basically it means nothing",
    "start": "1712000",
    "end": "1718993"
  },
  {
    "text": "mathematically because it's\nproviding no guarantee.",
    "start": "1718993",
    "end": "1723000"
  },
  {
    "text": "And so this is intuition only.",
    "start": "1735000",
    "end": "1740000"
  },
  {
    "text": "If we are really lucky what\nhappens for partition?",
    "start": "1745000",
    "end": "1753546"
  },
  {
    "text": "What is going to be the lucky\ncase?",
    "start": "1753546",
    "end": "1760000"
  },
  {
    "text": "Yeah, it splits right in the\nmiddle. Which is essentially --",
    "start": "1766000",
    "end": "1771000"
  },
  {
    "text": "-- n/2 : n/2.\nIt is really (n-1)/2 : (n-1)/2, but we're not going to\nworry about the details because",
    "start": "1783000",
    "end": "1791434"
  },
  {
    "text": "we're only doing intuition for\nthe best-case because best-case",
    "start": "1791434",
    "end": "1796739"
  },
  {
    "text": "is not what we want.\nIf that happened,",
    "start": "1796739",
    "end": "1801818"
  },
  {
    "text": "what is the recurrence I get?\nImagine it split it exactly in",
    "start": "1801818",
    "end": "1811598"
  },
  {
    "text": "the middle every time,\nthen what happens?",
    "start": "1811598",
    "end": "1818229"
  },
  {
    "text": "You get T(n) = 2T(n/2) + order\nn for partitioning and",
    "start": "1818229",
    "end": "1826850"
  },
  {
    "text": "bookkeeping.\nAnd what is the solution of",
    "start": "1826850",
    "end": "1833138"
  },
  {
    "text": "that recurrence?\nThat is n log n. That is the same as the merge\nsort recurrence.",
    "start": "1833139",
    "end": "1842093"
  },
  {
    "text": "It is which case of the master\ntheorem? Case 2, right?\nBecause n to the log base 2 of",
    "start": "1842093",
    "end": "1851627"
  },
  {
    "text": "2 is n to the 1,\nit is the same, so we tack on the extra log n.\nCase 2 of the master theorem.",
    "start": "1851627",
    "end": "1865174"
  },
  {
    "text": "That is pretty good.\nThat says that in the best-case",
    "start": "1865174",
    "end": "1874273"
  },
  {
    "text": "quicksort is going to do well.\nHow about let's suppose the",
    "start": "1874273",
    "end": "1884443"
  },
  {
    "text": "split is always let's say 1/10 :\n9/10, 1/10n :",
    "start": "1884443",
    "end": "1892473"
  },
  {
    "text": "9/10n.\nIn that case, are we lucky or are we unlucky?",
    "start": "1892473",
    "end": "1903000"
  },
  {
    "text": "I mean, if the split is really\nskewed, we clearly are going to",
    "start": "1912000",
    "end": "1917398"
  },
  {
    "text": "be unlucky, right,\nbecause then it's, say, 1 to n.\nIf it is really in the middle",
    "start": "1917398",
    "end": "1924416"
  },
  {
    "text": "it is n log n.\nWhat do you suppose it is if it is 1/10 : 9/10?\nIs that lucky or unlucky?",
    "start": "1924416",
    "end": "1931500"
  },
  {
    "text": "We will have a little democracy\nhere. Who thinks that that is a lucky\ncase?",
    "start": "1931500",
    "end": "1937500"
  },
  {
    "text": "It is going to be fast running\ntime. And who thinks it is an unlucky\ncase?",
    "start": "1937500",
    "end": "1943416"
  },
  {
    "text": "OK, so we have some brave\nsouls. And who didn't vote?\nOh, come on.",
    "start": "1943416",
    "end": "1950000"
  },
  {
    "text": "Come on.\nIt is always better, by the way, to say yes or no\nand be right or wrong,",
    "start": "1950000",
    "end": "1955864"
  },
  {
    "text": "because then you have some\nemotional commitment to it and we will remember better,\nrather than just sitting and",
    "start": "1955864",
    "end": "1963984"
  },
  {
    "text": "being quiet.\nYou don't manipulate your own emotions well enough to remember\nthings well.",
    "start": "1963984",
    "end": "1970375"
  },
  {
    "text": "Those people who voted win over\nthe people who don't vote, whether they are right or\nwrong.",
    "start": "1970375",
    "end": "1976992"
  },
  {
    "text": "Well, let's take a look.\nHere is the recurrence.",
    "start": "1976992",
    "end": "1982935"
  },
  {
    "text": "T(n) = T(1/10n) + T(9/10n) +\nTheta(n). And we will assume that this\npart here is less than or equal",
    "start": "1982936",
    "end": "1995191"
  },
  {
    "text": "to some cn in order to analyze\nit. We will just do a recursion\ntree for this and see.",
    "start": "1995191",
    "end": "2005659"
  },
  {
    "text": "Here is a recursion tree.",
    "start": "2005659",
    "end": "2010000"
  },
  {
    "text": "We have T(n) = cn,\nT(1/10n), T(9/10n).",
    "start": "2015000",
    "end": "2021335"
  },
  {
    "text": "Now we have again cn at the\ntop.",
    "start": "2021335",
    "end": "2026643"
  },
  {
    "text": "This gets complicated,\nright? This is 1/10cn.\nNow, over here we have 1/10.",
    "start": "2026643",
    "end": "2040000"
  },
  {
    "text": "And then we are plugging it\ninto the recursion again,",
    "start": "2040000",
    "end": "2049931"
  },
  {
    "text": "so we now get T(1/100n) and\nover here we get T(9/100n).",
    "start": "2049932",
    "end": "2060246"
  },
  {
    "text": "And over here we have now\n9/10cn.",
    "start": "2060247",
    "end": "2066358"
  },
  {
    "text": "And that gives us T(9/100n)\nagain.",
    "start": "2066359",
    "end": "2074000"
  },
  {
    "text": "And here we get T(81/100n).\nAnd we keep going on.",
    "start": "2074000",
    "end": "2088457"
  },
  {
    "text": "That is equal to cn,\n1/10cn here.",
    "start": "2088457",
    "end": "2099000"
  },
  {
    "text": "Down this way we have 1/100cn.\nAnd that keeps going down until",
    "start": "2099000",
    "end": "2108269"
  },
  {
    "text": "we get to order 1 down here.\nAnd over here we have 9/10cn.",
    "start": "2108269",
    "end": "2116931"
  },
  {
    "text": "And here, let's see,\nthis is 9/100cn and this is now",
    "start": "2116931",
    "end": "2124681"
  },
  {
    "text": "9/100cn and this is 81/100cn.\nAnd these things keep going",
    "start": "2124681",
    "end": "2132912"
  },
  {
    "text": "down until they get down to\norder 1. But the leaves are not all at\nuniform depth here,",
    "start": "2132913",
    "end": "2141869"
  },
  {
    "text": "right?\nThis side is way further up than this side,\nright?",
    "start": "2141870",
    "end": "2147697"
  },
  {
    "text": "Because here we are only going\ndown by 9/10 each time.",
    "start": "2147697",
    "end": "2153417"
  },
  {
    "text": "So, in fact,\nwhat is the length of this path here?\nWhat is the length of this path",
    "start": "2153417",
    "end": "2162446"
  },
  {
    "text": "down to this,\nif I take the left most spine?",
    "start": "2162447",
    "end": "2166000"
  },
  {
    "text": "Somebody raise there hand.\nYeah?",
    "start": "2175000",
    "end": "2183679"
  },
  {
    "text": "Log base 10 of n.\nBecause I am basically cutting",
    "start": "2183679",
    "end": "2190939"
  },
  {
    "text": "down by a factor of 10 each\ntime. And how long does it take me to\nreduce it to 1?",
    "start": "2190939",
    "end": "2195982"
  },
  {
    "text": "That is the definition,\nif you will, of what a log is,\nlog base 10. What is this one?\nWhat is this path going that",
    "start": "2195982",
    "end": "2203030"
  },
  {
    "text": "way?",
    "start": "2203030",
    "end": "2204000"
  },
  {
    "text": "Log of n. Log base 10/9 of n.\nBecause we're going down by",
    "start": "2213000",
    "end": "2222243"
  },
  {
    "text": "9/10 each time.\nOnce again, essentially the definition of n.\nAnd everything in between there",
    "start": "2222243",
    "end": "2229640"
  },
  {
    "text": "is somewhere between log base 10\nof n and log base 10/9 of n. So, everything is in between\nthere.",
    "start": "2229640",
    "end": "2237453"
  },
  {
    "text": "Now what I can do is do the\ntrick that we did for mergesort in looking at what the\nevaluation of this is by adding",
    "start": "2237453",
    "end": "2246678"
  },
  {
    "text": "up what is the cost of the total\nlevel. That is just cn.\nWhat is the cost of the next",
    "start": "2246678",
    "end": "2256962"
  },
  {
    "text": "level?\ncn. And what is the cost of the\nnext level?",
    "start": "2256962",
    "end": "2263330"
  },
  {
    "text": "cn.\nEvery level we are still doing the same amount of work.\nAnd we take that all the way",
    "start": "2263331",
    "end": "2274850"
  },
  {
    "text": "down.\nAnd the last levels --",
    "start": "2274850",
    "end": "2280000"
  },
  {
    "text": "Eventually we hit some point\nwhere it is not equal to cn where we start getting things\nthat are less than or equal to",
    "start": "2280000",
    "end": "2289395"
  },
  {
    "text": "cn because some of the leaves\nstart dropping out starting at this level.\nBasically this part is going to",
    "start": "2289395",
    "end": "2297719"
  },
  {
    "text": "be log base 10 of n,\nand then we start getting things that are less than or\nequal to cn, and so forth,",
    "start": "2297719",
    "end": "2305879"
  },
  {
    "text": "until finally we get to add it\nall up. T(n) is going to be less than\nor equal to cn times,",
    "start": "2305879",
    "end": "2316437"
  },
  {
    "text": "well, what is the longest that\nthis could possibly be?",
    "start": "2316437",
    "end": "2323261"
  },
  {
    "text": "Log base 10/9 of n.\nPlus we have all of the leaves",
    "start": "2323261",
    "end": "2329570"
  },
  {
    "text": "that we have to add in,\nbut all the leaves together add",
    "start": "2329570",
    "end": "2336523"
  },
  {
    "text": "up to just order n.\nAll the leaves add up to order",
    "start": "2336523",
    "end": "2343074"
  },
  {
    "text": "n, so we have + Theta(n).\nAnd so this is how much?",
    "start": "2343074",
    "end": "2348096"
  },
  {
    "text": "If I add all of this together,\nwhat is this asymptotically?",
    "start": "2348096",
    "end": "2354040"
  },
  {
    "text": "That is n log n.\nSo, T(n) is actually bounded by n log n.\nWe are lucky.",
    "start": "2354040",
    "end": "2361009"
  },
  {
    "text": "Those people who guessed lucky\nwere right. A 1/10 : 9/10 split is\nasymptotically as good as a 50 :",
    "start": "2361009",
    "end": "2370744"
  },
  {
    "text": "50 split.\nAnd, in fact, we can lower bound this by just\nlooking at these things here and",
    "start": "2370745",
    "end": "2381047"
  },
  {
    "text": "discover that,\nin fact, T(n) is lower bounded by cn log base 10 of n + order\nn.",
    "start": "2381047",
    "end": "2389094"
  },
  {
    "text": "And so T(n) is lower bounded by\nalso asymptotically n log n.",
    "start": "2389094",
    "end": "2395341"
  },
  {
    "text": "So, T(n) is actually Theta(n lg\nn). Now, this is not really proof.\nI generally recommend that you",
    "start": "2395341",
    "end": "2404466"
  },
  {
    "text": "don't do this kind of thing to\ndo a proof. This is a good intuition of a\nrecursion tree.",
    "start": "2404466",
    "end": "2410794"
  },
  {
    "text": "The way you prove this is what?\nSubstitution method. Good.\nWhat you do is use this to get",
    "start": "2410794",
    "end": "2417196"
  },
  {
    "text": "your guess and then use\nsubstitution method to prove that your guess is right.\nIt is too easy to make mistakes",
    "start": "2417196",
    "end": "2425161"
  },
  {
    "text": "with this method.\nIt is very easy to make mistakes.\nWith the substitution method it",
    "start": "2425161",
    "end": "2432568"
  },
  {
    "text": "is harder to make mistakes\nbecause there is just algebra there that you are cranking\nthrough.",
    "start": "2432569",
    "end": "2440026"
  },
  {
    "text": "It is easier to verify rather\nthan dot, dot, dots and trees that you drew\nimproperly and wrote in wrong",
    "start": "2440027",
    "end": "2448314"
  },
  {
    "text": "amounts and so forth.\nOK? So, this is n log n.\nThat's pretty good.",
    "start": "2448314",
    "end": "2453535"
  },
  {
    "text": "It is order n log n.\nAnd we are lucky. Now let's try another one.\nThis is all for intuition",
    "start": "2453535",
    "end": "2461879"
  },
  {
    "text": "because, I will tell you,\nby the time we get to the end of this class you folks are\ngoing to bolting for the door",
    "start": "2461879",
    "end": "2470150"
  },
  {
    "text": "because we are going to do some\ngood math today, actually.\nIt is actually fun math,",
    "start": "2470150",
    "end": "2476165"
  },
  {
    "text": "I think, but it is challenging.\nIf you are not awake, you can still sleep now,\nbut I will tell you when to",
    "start": "2476165",
    "end": "2483909"
  },
  {
    "text": "wake up.\nOne more bit of intuition. Suppose that we alternate\nsteps.",
    "start": "2483909",
    "end": "2490000"
  },
  {
    "text": "Suppose we do the partitioning\nthing. And it happens that we start\nout lucky and then we have a",
    "start": "2490000",
    "end": "2498557"
  },
  {
    "text": "partitioning step that is\nunlucky and then we have a step",
    "start": "2498558",
    "end": "2503767"
  },
  {
    "text": "that is lucky and a step that is\nunlucky and we do that all the",
    "start": "2503767",
    "end": "2509534"
  },
  {
    "text": "way down the tree.\nSuppose we alternate.",
    "start": "2509534",
    "end": "2514000"
  },
  {
    "text": "Are we lucky or unlucky if we\ndo that? This time I want everybody\nvoting. It doesn't matter what your\nanswer is.",
    "start": "2527000",
    "end": "2533760"
  },
  {
    "text": "Everybody has to have a stake\nin the game. It is sort of like horseracing.\nIf ever you have watched",
    "start": "2533760",
    "end": "2539826"
  },
  {
    "text": "horseracing, it is really\nboring, but if you put a little bit of money down,\na little skin in the game",
    "start": "2539826",
    "end": "2546082"
  },
  {
    "text": "suddenly it is interesting.\nThe same thing here. I want everybody to put some\nskin in the game.",
    "start": "2546082",
    "end": "2553994"
  },
  {
    "text": "Who thinks that this is going\nto be lucky? Who thinks it is going to be\nunlucky?",
    "start": "2553994",
    "end": "2560828"
  },
  {
    "text": "OK.\nWho didn't vote? [LAUGHTER] You guys.\nNo skin in the game,",
    "start": "2560828",
    "end": "2566065"
  },
  {
    "text": "ha?\nLet's analyze this so we can once again write a recurrence.\nOn the lucky step,",
    "start": "2566065",
    "end": "2573076"
  },
  {
    "text": "we will have L(n) be the\nrunning time on a lucky step of size n.\nAnd that is going to be twice.",
    "start": "2573076",
    "end": "2582916"
  },
  {
    "text": "While the next step is going to\nbe unlucky. It is two unluckies over 2 plus\norder n.",
    "start": "2582916",
    "end": "2590791"
  },
  {
    "text": "That is our lucky step.\nAnd then for the unlucky step",
    "start": "2590791",
    "end": "2595847"
  },
  {
    "text": "it is essentially going to be L\nof n minus 1, it is going to be lucky on the\nnext step, plus order n.",
    "start": "2595847",
    "end": "2605375"
  },
  {
    "text": "That is unlucky.\nSee how I have described this",
    "start": "2605375",
    "end": "2610701"
  },
  {
    "text": "behavior with a system now of\nrecurrences that are dependent",
    "start": "2610701",
    "end": "2616197"
  },
  {
    "text": "where the boundary cases,\nonce again which are unstated,",
    "start": "2616197",
    "end": "2621320"
  },
  {
    "text": "is that the recurrences have a\nconstant solution with constant",
    "start": "2621320",
    "end": "2627002"
  },
  {
    "text": "input.\nNow we just do a little bit of algebra using substitution.\nL(n) is then equal to,",
    "start": "2627002",
    "end": "2634920"
  },
  {
    "text": "well, I can just plug in,\nfor U(n/2) plug in the value of",
    "start": "2634920",
    "end": "2640136"
  },
  {
    "text": "U(n/2).\nAnd that gives me 2[L(n/2-1) +",
    "start": "2640136",
    "end": "2646212"
  },
  {
    "text": "Theta(n) + Theta(n)].\nSee what I did here?",
    "start": "2646212",
    "end": "2651970"
  },
  {
    "text": "I simply plugged in,\nfor U(n/2), this recurrence.",
    "start": "2651970",
    "end": "2658710"
  },
  {
    "text": "In fact, technically I guess I\nshould have said Theta(n/2) just",
    "start": "2658710",
    "end": "2667417"
  },
  {
    "text": "to make this substitution more\nstraightforward.",
    "start": "2667417",
    "end": "2675000"
  },
  {
    "text": "It is the same thing,\nbut just to not skip a step.",
    "start": "2675000",
    "end": "2681657"
  },
  {
    "text": "That we can now crank through.\nAnd that is 2L(n/2 - 1) +,",
    "start": "2681657",
    "end": "2689265"
  },
  {
    "text": "and now I have two T(n/2) plus\nanother one, so all of that is",
    "start": "2689266",
    "end": "2697418"
  },
  {
    "text": "just order n.\nAnd what is the solution to",
    "start": "2697418",
    "end": "2704050"
  },
  {
    "text": "that recurrence?\nn log n. Theta(n lg n).\nDoes everybody see that?",
    "start": "2704050",
    "end": "2713349"
  },
  {
    "text": "OK?\nTheta(n lg n). This is basically just,\nonce again, master theorem with",
    "start": "2713349",
    "end": "2724000"
  },
  {
    "text": "a little bit of jiggering here.\nThat minus one is only going to",
    "start": "2724000",
    "end": "2733286"
  },
  {
    "text": "help us, actually,\nin the solution of the master theorem.\nSo, it is order n lg n.",
    "start": "2733286",
    "end": "2741554"
  },
  {
    "text": "We are lucky.\nIf we alternate lucky and unlucky, we are lucky.\nHow can we insure that we are",
    "start": "2741554",
    "end": "2750989"
  },
  {
    "text": "usually lucky?\nIf I have the input already sorted, I am going to be\nunlucky.",
    "start": "2750989",
    "end": "2760000"
  },
  {
    "text": "Excuse me?\nYou could randomly arrange the elements, that is one way.\nWhat is another way?",
    "start": "2760000",
    "end": "2767521"
  },
  {
    "text": "That is a perfectly good way,\nactually. In fact, it is a common thing\nto do.",
    "start": "2767521",
    "end": "2773906"
  },
  {
    "text": "Randomly choose the pivot,\nOK. It turns out those are\neffectively equivalent,",
    "start": "2773906",
    "end": "2780379"
  },
  {
    "text": "but we are going to do the\nrandomly choose the pivot because it is a little bit\neasier to analyze.",
    "start": "2780379",
    "end": "2790000"
  },
  {
    "text": "But they are effectively\nequivalent. That gives us the algorithm\ncalled randomized quicksort.",
    "start": "2790000",
    "end": "2799000"
  },
  {
    "text": "And the nice thing about\nrandomized quicksort is that the",
    "start": "2806000",
    "end": "2813259"
  },
  {
    "text": "running time is independent of\nthe input ordering.",
    "start": "2813259",
    "end": "2820000"
  },
  {
    "text": "Very much for the same reason\nthat if I just scramble the input, it would be independent\nof the input ordering.",
    "start": "2820000",
    "end": "2828481"
  },
  {
    "text": "If I randomly scramble the\ninput then it doesn't matter what the order of the input was.\nWhereas, original quicksort has",
    "start": "2828481",
    "end": "2837670"
  },
  {
    "text": "some slow cases,\ninput sorted or reverse sorted, and some fast cases.\nIn particular,",
    "start": "2837670",
    "end": "2844031"
  },
  {
    "text": "it turns out that if it is\nrandom it is going to be pretty fast.\nIf I actually randomly scramble",
    "start": "2844031",
    "end": "2851855"
  },
  {
    "text": "the input or pivot on a random\nelement, it doesn't matter what the input was.\nOne way of thinking about this",
    "start": "2851855",
    "end": "2858141"
  },
  {
    "text": "is with an adversary.\nImagine your adversary, you are saying I have a good\nsorting algorithm and he says I",
    "start": "2858141",
    "end": "2864307"
  },
  {
    "text": "have a good sorting algorithm\nand you're trying to sell to a single customer.\nAnd the customer says OK,",
    "start": "2864308",
    "end": "2870294"
  },
  {
    "text": "you guys come up with\nbenchmarks for each of your algorithms.\nAnd you get to look at his",
    "start": "2870294",
    "end": "2875383"
  },
  {
    "text": "algorithm.\nWell, you look and you say oh, he is using quicksort.\nI will just give him something",
    "start": "2875383",
    "end": "2882947"
  },
  {
    "text": "that is already sorted.\nThat is what you could do to him.\nIf you had quicksort,",
    "start": "2882947",
    "end": "2888459"
  },
  {
    "text": "he would do the same thing to\nyou. So, how can you defeat him?\nWell, one way is with",
    "start": "2888459",
    "end": "2894334"
  },
  {
    "text": "randomization.\nBig idea in computer science, use random numbers.\nThe idea here is if I permute",
    "start": "2894334",
    "end": "2900933"
  },
  {
    "text": "the ordering at random,\nas one suggestion, or I pivot at random places,\nthen the input ordering didn't",
    "start": "2900934",
    "end": "2908114"
  },
  {
    "text": "matter.\nAnd so there is no bad ordering that he can provide that is\ngoing to make my code run",
    "start": "2908114",
    "end": "2916557"
  },
  {
    "text": "slowly.\nNow, I might get unlucky. But that is just unlucky in my\nuse of my random-number",
    "start": "2916558",
    "end": "2923274"
  },
  {
    "text": "generator.\nIt is not unlucky with respect to what the input was.\nWhat the input was doesn't",
    "start": "2923274",
    "end": "2930227"
  },
  {
    "text": "matter.\nEverybody follow that? OK.\nThe nice thing about randomized quicksort is that it makes no\nassumptions about the input",
    "start": "2930227",
    "end": "2939629"
  },
  {
    "text": "distribution.\nYou don't have to assume that",
    "start": "2939629",
    "end": "2945683"
  },
  {
    "text": "all inputs are equally likely\nbecause either you can make it",
    "start": "2945684",
    "end": "2953180"
  },
  {
    "text": "that way or you pivot in a way\nthat makes that effectively",
    "start": "2953180",
    "end": "2960422"
  },
  {
    "text": "whole.\nAnd, in particular, there is no specific input that\ncan elicit the worst-case",
    "start": "2960422",
    "end": "2970713"
  },
  {
    "text": "behavior.\nThe worst-case is determined",
    "start": "2970713",
    "end": "2985000"
  },
  {
    "text": "only by a random-number\ngenerator.",
    "start": "2985000",
    "end": "3000000"
  },
  {
    "text": "And, therefore,\nsince it is only determined by a random-number generator,\nwe can essentially bound the",
    "start": "3000000",
    "end": "3008734"
  },
  {
    "text": "unluckiness mathematically.\nWe can say what are the odds? So, we are going to analyze\nthis.",
    "start": "3008735",
    "end": "3016500"
  },
  {
    "text": "And this is where you know if\nyou belong in this course or",
    "start": "3016500",
    "end": "3021529"
  },
  {
    "text": "not.\nIf you have skipped 6.042 or whatever, this is a good place\nto do the comparison.",
    "start": "3021529",
    "end": "3030000"
  },
  {
    "text": "Since it is going to be a\nlittle bit, why don't people just stand up for a moment and\ntake a stretch break.",
    "start": "3030000",
    "end": "3037857"
  },
  {
    "text": "Since this is going to be a\nnice piece of mathematics we are going to do, you are going to\nwant to feel fresh for it.",
    "start": "3037857",
    "end": "3047000"
  },
  {
    "text": "Stretch break is over.",
    "start": "3062000",
    "end": "3064000"
  },
  {
    "text": "Analysis.\nGood. I think we are going to make\nthis.",
    "start": "3070000",
    "end": "3076364"
  },
  {
    "text": "I am sort of racing.\nThere is a lot of stuff to",
    "start": "3076364",
    "end": "3082593"
  },
  {
    "text": "cover today.\nGood. Let's let T(n) now be the\nrandom variable for the running",
    "start": "3082593",
    "end": "3092479"
  },
  {
    "text": "time assuming --",
    "start": "3092479",
    "end": "3096000"
  },
  {
    "text": "Wow.\nI didn't even write here what we did here.\nSo, we are going to pivot on a random element.",
    "start": "3106000",
    "end": "3111000"
  },
  {
    "text": "That is the basic scheme we are\ngoing to do. And the way I do that,\nby the way, is just in the code",
    "start": "3119000",
    "end": "3125047"
  },
  {
    "text": "for partition,\nrather than partitioning on the first element,\nbefore I do the partition,",
    "start": "3125047",
    "end": "3130401"
  },
  {
    "text": "I just swap the first element\nwith some other element in the array chosen at random,\nperhaps itself.",
    "start": "3130401",
    "end": "3136511"
  },
  {
    "text": "So, they are all equally likely\nto be pivoted on. And then just run the ordinary\npartition.",
    "start": "3136511",
    "end": "3143000"
  },
  {
    "text": "This is a random variable for\nrunning in time assuming, we have to make an assumption\nfor doing probability,",
    "start": "3143000",
    "end": "3152479"
  },
  {
    "text": "the random numbers are\nindependent.",
    "start": "3152479",
    "end": "3156000"
  },
  {
    "text": "So that when I pivot in one\nplace, it is independent of how I pivoted in some other place as\nI am running this algorithm.",
    "start": "3161000",
    "end": "3168594"
  },
  {
    "text": "Then, to analyze this,\nwhat I am going to do is I want to know where we pivoted.\nFor k = 0, 1,",
    "start": "3168594",
    "end": "3177140"
  },
  {
    "text": "..., n-1, let's let,\nfor a particular partition,",
    "start": "3177140",
    "end": "3188495"
  },
  {
    "text": "the random variable X_k = 1 if\npartition generates a k :",
    "start": "3188496",
    "end": "3201785"
  },
  {
    "text": "n-k-1 split,\nand 0 otherwise.",
    "start": "3201785",
    "end": "3210000"
  },
  {
    "text": "In the partition routine,\nI am picking a random element to pivot on.\nAnd X_k is going to be my",
    "start": "3215000",
    "end": "3222558"
  },
  {
    "text": "random variable that is 1 if it\ngenerates a split that has k elements on the left side and\nn-k-1 elements on the right side",
    "start": "3222558",
    "end": "3232524"
  },
  {
    "text": "of the pivot.\nSome of those, too, of course are n-1 because\nI also have the pivot.",
    "start": "3232524",
    "end": "3240000"
  },
  {
    "text": "And 0 otherwise.\nSo, I now have n random variables that I have defined\nassociated with a single",
    "start": "3240000",
    "end": "3249108"
  },
  {
    "text": "partition where all of them are\ngoing to be zero except one of",
    "start": "3249108",
    "end": "3255148"
  },
  {
    "text": "them, whichever one happens to\noccur is going to have the value",
    "start": "3255148",
    "end": "3261286"
  },
  {
    "text": "1.\nThis is called, by the way.\nWhat is the name of this type",
    "start": "3261287",
    "end": "3266930"
  },
  {
    "text": "of random variable?",
    "start": "3266930",
    "end": "3270000"
  },
  {
    "text": "Bernoulli.\nWell, Bernoulli has other assumptions.\nIt is an indicator random",
    "start": "3277000",
    "end": "3283315"
  },
  {
    "text": "variable.\nIt turns out it is Bernoulli, but that's OK.\nIt is an indicator random",
    "start": "3283315",
    "end": "3290069"
  },
  {
    "text": "variable.\nIt just takes on the value of 0, 1.\nAnd Bernoulli random variables",
    "start": "3290070",
    "end": "3296473"
  },
  {
    "text": "are a particular type of\nindicator random variable.",
    "start": "3296473",
    "end": "3302000"
  },
  {
    "text": "Which it turns out these are.\nThat is an indicator random variable.\nIndicator random variables are",
    "start": "3302000",
    "end": "3309539"
  },
  {
    "text": "a good way when you are trying\nto understand what the sum of a bunch of things is.\nIt is a good way to break apart",
    "start": "3309539",
    "end": "3318349"
  },
  {
    "text": "your big random variables into\nsmaller ones that can be analyzed.\nLet's just take a look at this",
    "start": "3318349",
    "end": "3325730"
  },
  {
    "text": "indicator random variable.\nWhat is the expectation of X_k equal to?",
    "start": "3325730",
    "end": "3332000"
  },
  {
    "text": "In other words,\nwhat is the probability that I generate a k :\nn-k-1 split?",
    "start": "3342000",
    "end": "3348000"
  },
  {
    "text": "X_k is, let's just write out\nwhat that means,",
    "start": "3360000",
    "end": "3365157"
  },
  {
    "text": "just to refresh people's\nmemory. That is 0 times the probability\nthat X_k equals 0 plus 1 times",
    "start": "3365157",
    "end": "3375941"
  },
  {
    "text": "the probability that X_k equals\n1, which is equal,",
    "start": "3375941",
    "end": "3381683"
  },
  {
    "text": "well, that is all zero.\nThat is just equal to the",
    "start": "3381684",
    "end": "3387311"
  },
  {
    "text": "probability that X_k equals 1.\nAnd that is a general property",
    "start": "3387311",
    "end": "3394709"
  },
  {
    "text": "of indicator random variables,\nis that their expectation is",
    "start": "3394709",
    "end": "3399948"
  },
  {
    "text": "the probability that they are 1.\nThe nice thing about indicator",
    "start": "3399948",
    "end": "3405548"
  },
  {
    "text": "random variables is it directly\nconnects the probability to the",
    "start": "3405548",
    "end": "3411148"
  },
  {
    "text": "expectation without any other\nterms going on. What is the probability of X_k\nequals 1?",
    "start": "3411148",
    "end": "3418645"
  },
  {
    "text": "1/n.\nSo, all splits are equally likely.\nAnd I have n elements,",
    "start": "3418645",
    "end": "3424984"
  },
  {
    "text": "so each ones has a 1/n chance\nof being picked as the pivot.",
    "start": "3424984",
    "end": "3430241"
  },
  {
    "text": "And, once you pick the pivot,\nthat determines what is on the",
    "start": "3430241",
    "end": "3435588"
  },
  {
    "text": "left and the right and so forth.\nSo, it is 1/n. Everybody with me so far?\nMore or less?",
    "start": "3435589",
    "end": "3443202"
  },
  {
    "text": "OK.\nAs I say, this is going to test whether you're in the class.\nIf you go home and you study",
    "start": "3443202",
    "end": "3452488"
  },
  {
    "text": "this and you cannot get it,\nand you have a deficiency in your math background in trying\nto take the course,",
    "start": "3452488",
    "end": "3461733"
  },
  {
    "text": "this is a good indication that\nprobably you have taken something a little over your\nhead.",
    "start": "3461733",
    "end": "3469377"
  },
  {
    "text": "Let's write out what T(n) is\nequal to here.",
    "start": "3469377",
    "end": "3474000"
  },
  {
    "text": "T(n) is going to be equal to\nT(0) + T(n-1) + Theta(n) if we",
    "start": "3480000",
    "end": "3491836"
  },
  {
    "text": "get a 0 : n-1 split and is equal\nto T(1) + T(n-2) + order n if we",
    "start": "3491836",
    "end": "3504897"
  },
  {
    "text": "have a 1 : n-2 split.",
    "start": "3504897",
    "end": "3510000"
  },
  {
    "text": "And now down here it is going\nto be T(n-1) + T(0) + Theta(n)",
    "start": "3515000",
    "end": "3526090"
  },
  {
    "text": "if we end up with an n-1 :\n0 split.",
    "start": "3526090",
    "end": "3532481"
  },
  {
    "text": "So, this is our recurrence for\nT(n).",
    "start": "3532481",
    "end": "3540000"
  },
  {
    "text": "And, unfortunately,\nthe recurrence is kind of hairy because it has got n cases.\nAnd this is,",
    "start": "3540000",
    "end": "3546953"
  },
  {
    "text": "once again, where the\nbrilliance of being able to use indicator random variables comes\nin.",
    "start": "3546953",
    "end": "3553750"
  },
  {
    "text": "Because we will be able to take\nthis case analysis and reduce it to mathematics so we don't have\ncases using indicator random",
    "start": "3553750",
    "end": "3563281"
  },
  {
    "text": "variables.\nAnd the way we do that is using",
    "start": "3563281",
    "end": "3569666"
  },
  {
    "text": "the following trick of\nconverting the cases into a",
    "start": "3569666",
    "end": "3577043"
  },
  {
    "text": "summation.",
    "start": "3577043",
    "end": "3579000"
  },
  {
    "text": "Let's just take a look at why\nthese two things are the same.",
    "start": "3595000",
    "end": "3600666"
  },
  {
    "text": "The indicator random variable\nis zero, except if you get the",
    "start": "3600666",
    "end": "3606333"
  },
  {
    "text": "particular split.\nTherefore, this summation is going to be zero,\nexcept for that k which",
    "start": "3606333",
    "end": "3614497"
  },
  {
    "text": "actually appeared in which case\nit is the value that we say it",
    "start": "3614497",
    "end": "3620355"
  },
  {
    "text": "is.\nSee the trick using multiplication by 0,\n1 variable to handle all the",
    "start": "3620355",
    "end": "3627079"
  },
  {
    "text": "cases?\nI think that is damn clever. I think that is damn clever.\nAnd this is like the classic",
    "start": "3627079",
    "end": "3636213"
  },
  {
    "text": "thing that you do with indicator\nrandom variables. It's one of the reasons they\nare a very powerful method.",
    "start": "3636213",
    "end": "3645143"
  },
  {
    "text": "Because now we actually have a\nmathematical expression, hairy although it may be,\nfor our recurrence.",
    "start": "3645144",
    "end": "3653559"
  },
  {
    "text": "Now, what we are going to\nanalyze is the expected value of T(n).\nThat is what we want to do.",
    "start": "3653559",
    "end": "3662977"
  },
  {
    "text": "What is the expected value of\nT(n)? To do that, I just write the\nexpected value of T(n) is equal",
    "start": "3662977",
    "end": "3673235"
  },
  {
    "text": "to the expected value of this\nbig summation. And now we can go ahead and\nstart to evaluate the expected",
    "start": "3673235",
    "end": "3684264"
  },
  {
    "text": "value of that summation.\nEverybody with me?",
    "start": "3684264",
    "end": "3690000"
  },
  {
    "text": "Yes?\nAny questions at this point? I see a thumbs up.\nThat's nice to see.",
    "start": "3690000",
    "end": "3695360"
  },
  {
    "text": "But I generally believe that\nwhat I want to see is no thumbs down.\nIt is good to see the thumbs",
    "start": "3695360",
    "end": "3702508"
  },
  {
    "text": "up, but that means one person\nunderstands, or thinks he understands.\n[LAUGHTER] So,",
    "start": "3702508",
    "end": "3708724"
  },
  {
    "text": "this is, I claim,\nequal to the following. Actually, I am going to need a\nlittle space here so I am going",
    "start": "3708724",
    "end": "3716571"
  },
  {
    "text": "to move the equal sign over a\nlittle bit.",
    "start": "3716571",
    "end": "3721000"
  },
  {
    "text": "I claim that summation is equal\nto that. This expectation is equal to\nthat summation of expectations.",
    "start": "3745000",
    "end": "3752000"
  },
  {
    "text": "Why is that?\nWhat are the magic words that justify this step?\nLinearity of expectation.",
    "start": "3752000",
    "end": "3760281"
  },
  {
    "text": "The expectation of a sum is the\nsum of the expectations.",
    "start": "3760281",
    "end": "3765704"
  },
  {
    "text": "So, that is linearity of\nexpectation. I don't need independence for\nthat.",
    "start": "3765704",
    "end": "3772605"
  },
  {
    "text": "That is just always true for\nexpectation of any random",
    "start": "3772605",
    "end": "3777830"
  },
  {
    "text": "variables.\nThe sum of the expectations is",
    "start": "3777830",
    "end": "3784591"
  },
  {
    "text": "the expectation of the sum and\nvice versa.",
    "start": "3784591",
    "end": "3790867"
  },
  {
    "text": "Here we did the vice versa.\nThat is equal to now the sum of",
    "start": "3790867",
    "end": "3799744"
  },
  {
    "text": "k=0 to n-1 of expectation of X_k\n[T(k) + T(n-k-1) + Theta(n)].",
    "start": "3799744",
    "end": "3810000"
  },
  {
    "text": "Why is that true?\nWhat I have done is I've said",
    "start": "3816000",
    "end": "3822272"
  },
  {
    "text": "the expectation of the product\nis the product of the",
    "start": "3822272",
    "end": "3829227"
  },
  {
    "text": "expectations.\nThat is because of independence.\nWhat is independent of what?",
    "start": "3829227",
    "end": "3840000"
  },
  {
    "text": "The X_k here,\nrandom variable, are independent of any of the\nother partitionings in,",
    "start": "3840000",
    "end": "3846962"
  },
  {
    "text": "if you will,\nthe X_k that would exist for any of the other recursive\ncalls.",
    "start": "3846962",
    "end": "3853151"
  },
  {
    "text": "So, whatever happens in here is\nindependent of what happened",
    "start": "3853151",
    "end": "3858223"
  },
  {
    "text": "there.\nWe are actually hiding. Since we have a recurrence,\nwe are not partitioning the",
    "start": "3858223",
    "end": "3865358"
  },
  {
    "text": "same wage time.\nWe have a different one. We actually have something\ngoing on underneath the",
    "start": "3865358",
    "end": "3873168"
  },
  {
    "text": "mathematics you have to pay\nattention to that the mathematics alone isn't really\nshowing, which is that in T(k)",
    "start": "3873168",
    "end": "3880150"
  },
  {
    "text": "there is actually a set of\nrandom choices that are being made, if you will.\nAnd so you have to understand",
    "start": "3880150",
    "end": "3886745"
  },
  {
    "text": "that those are independent of\nthose, in which case we can multiple the probabilities of\ntheir expectations.",
    "start": "3886745",
    "end": "3893469"
  },
  {
    "text": "Is everybody with me?\nThat is a big one, independence of X_k from other\nrandom choices.",
    "start": "3893469",
    "end": "3900000"
  },
  {
    "text": "That is equal to now,\nwell, first of all, this is nice.\nWhat is the expectation of X_k?",
    "start": "3900000",
    "end": "3909710"
  },
  {
    "text": "1/n.\nThat actually doesn't even belong in the summation.\nWe will just pop it outside.",
    "start": "3909710",
    "end": "3920000"
  },
  {
    "text": "I get 1/n times the sum of k=0\nto n-1 of expectation of T(k) +",
    "start": "3920000",
    "end": "3935541"
  },
  {
    "text": "1/n summation k=0 to n-1 of\nexpectation of T(n-k-1) + 1/n",
    "start": "3935541",
    "end": "3949808"
  },
  {
    "text": "summation k=0 to n-1 up to\nTheta(n).",
    "start": "3949808",
    "end": "3960000"
  },
  {
    "text": "That is, again,\nusing linearity of expectation there this time to split up\nthese pieces and just factoring",
    "start": "3960000",
    "end": "3971075"
  },
  {
    "text": "out the expectation of k as\nbeing 1/n. Everybody with me still?\nAll of this is elementary.",
    "start": "3971075",
    "end": "3980430"
  },
  {
    "text": "It is just one of these things\nthat is hard just because there",
    "start": "3980430",
    "end": "3986989"
  },
  {
    "text": "are so many steps.\nAnd it takes that you have seen",
    "start": "3986989",
    "end": "3993174"
  },
  {
    "text": "some of this before.\nNow the next observation is that these two summations are,\nin fact, identical.",
    "start": "3993174",
    "end": "4003003"
  },
  {
    "text": "They are the same summation,\njust in a different order.",
    "start": "4003003",
    "end": "4008532"
  },
  {
    "text": "This is going T(0),\nT(1), T(2), T(3) up to T(n-1).",
    "start": "4008532",
    "end": "4013549"
  },
  {
    "text": "This one is going T(n-1),\nT(n-2), T(n-3) down to T(0).",
    "start": "4013549",
    "end": "4020000"
  },
  {
    "text": "These are, in fact,\nequal. So, therefore,\nI have two of them.",
    "start": "4020000",
    "end": "4025000"
  },
  {
    "text": "And then what is this term\nequal to?",
    "start": "4039000",
    "end": "4042000"
  },
  {
    "text": "What is that one equal to?\nTheta(n). Let's just see why.\nThe summation of 0 :",
    "start": "4057000",
    "end": "4065438"
  },
  {
    "text": "n of Theta(n) is Theta(n^2)\ndivided by n. Or, if I want to bring the\nTheta(n) out,",
    "start": "4065438",
    "end": "4074447"
  },
  {
    "text": "I have 1 times the summation of\nk equals1 to n of Theta(1) or of",
    "start": "4074447",
    "end": "4081631"
  },
  {
    "text": "1.\nSo, once again, you get n, either way of doing\nit.",
    "start": "4081631",
    "end": "4087888"
  },
  {
    "text": "This is, in some sense,\nbecause the summations have",
    "start": "4087888",
    "end": "4092981"
  },
  {
    "text": "identical terms,\nand this is just algebra. Now what we are going to do is\ndo something for technical",
    "start": "4092981",
    "end": "4102860"
  },
  {
    "text": "convenience.\nBecause we are going to absorb",
    "start": "4102861",
    "end": "4110216"
  },
  {
    "text": "the k=0, 1 terms into the\nTheta(n) for technical",
    "start": "4110217",
    "end": "4118390"
  },
  {
    "text": "convenience.",
    "start": "4118391",
    "end": "4121000"
  },
  {
    "text": "We have a recurrence here where\nI have an order n. And, if I look at the cases\nwhere k=0 or k=1,",
    "start": "4126000",
    "end": "4134412"
  },
  {
    "text": "I know what the expectation is.\nFor 0, 1, the expected cost is",
    "start": "4134412",
    "end": "4139929"
  },
  {
    "text": "the worst case cost,\nwhich is constant. Because I am only solving the\nproblem for a constant size.",
    "start": "4139929",
    "end": "4147920"
  },
  {
    "text": "And we know that for any of the\nboundary cases that our solution of recurrence,\nour assumption is that it is",
    "start": "4147920",
    "end": "4155142"
  },
  {
    "text": "constant time.\nSo, I basically can just take those two terms out.\nAnd all that does it accumulate",
    "start": "4155142",
    "end": "4161608"
  },
  {
    "text": "some more constant here in the\nTheta(n). It is going to make the\nsolution of the recurrence a",
    "start": "4161608",
    "end": "4167797"
  },
  {
    "text": "little bit easier.\nAnd, if I do that,",
    "start": "4167798",
    "end": "4173396"
  },
  {
    "text": "I get expectation of T(n) = 2/n\nsummation k=2 to n-1 of",
    "start": "4173396",
    "end": "4183584"
  },
  {
    "text": "expectation of T(k) + Theta(n).",
    "start": "4183584",
    "end": "4190000"
  },
  {
    "text": "So, all of that work was to\nderive the recurrence.",
    "start": "4200000",
    "end": "4206864"
  },
  {
    "text": "And now we have to solve it.\nJust to review what we did,",
    "start": "4206864",
    "end": "4214570"
  },
  {
    "text": "we started out with a\nrecurrence which was for the",
    "start": "4214570",
    "end": "4221433"
  },
  {
    "text": "random variable which involved a\ncase statement.",
    "start": "4221434",
    "end": "4229000"
  },
  {
    "text": "We converted that into some\nmathematics without the case statement, just with a product,\nand then we derived a",
    "start": "4229000",
    "end": "4237031"
  },
  {
    "text": "recurrence for the expectation.\nAnd now we are in the process of trying to solve that\nrecurrence.",
    "start": "4237031",
    "end": "4244087"
  },
  {
    "text": "We have done some\nsimplification of the recurrence so that we understand what it is\nthat we are going to solve here.",
    "start": "4244087",
    "end": "4252569"
  },
  {
    "text": "By the way, I don't give things\nlike this on quizzes. I do expect you to understand\nit.",
    "start": "4252569",
    "end": "4260000"
  },
  {
    "text": "The elements of this you will\nfind on a quiz. This is a lot of work to figure\nout.",
    "start": "4260000",
    "end": "4265602"
  },
  {
    "text": "This took smart people to do.\nEven though it is all elementary, but working out\nsomething like this at the",
    "start": "4265602",
    "end": "4272906"
  },
  {
    "text": "elementary level is still a bit\nof work even for somebody who is knowledgeable in this area.\nNow we are going to solve that",
    "start": "4272907",
    "end": "4283465"
  },
  {
    "text": "last recurrence over there and\nwe are going to prove that the",
    "start": "4283465",
    "end": "4290395"
  },
  {
    "text": "expectation of T(n) is less than\nor equal to (an lg n) for some",
    "start": "4290395",
    "end": "4297556"
  },
  {
    "text": "constant a greater than 0.\nThat is going to be what we are",
    "start": "4297556",
    "end": "4304139"
  },
  {
    "text": "going to do.\nAnd so what technique do you think we should use to prove\nthis?",
    "start": "4304139",
    "end": "4312571"
  },
  {
    "text": "Does this look like a master\nmethod?",
    "start": "4312571",
    "end": "4318000"
  },
  {
    "text": "It is nothing like the master\nmethod.",
    "start": "4323000",
    "end": "4328600"
  },
  {
    "text": "So, when in doubt do\nsubstitution.",
    "start": "4328600",
    "end": "4333733"
  },
  {
    "text": "It is the grand-daddy of all\nmethods.",
    "start": "4333733",
    "end": "4339333"
  },
  {
    "text": "What we will do is solve the\nbase case by simply choosing a",
    "start": "4339333",
    "end": "4348355"
  },
  {
    "text": "big enough so that (an lg n) is\nbigger than the expectation of",
    "start": "4348355",
    "end": "4357844"
  },
  {
    "text": "T(n) for sufficiently large\nsmall n.",
    "start": "4357844",
    "end": "4365000"
  },
  {
    "text": "So, I just pick a to be big\nenough. And this is,\nby the way, why I wanted to",
    "start": "4365000",
    "end": "4374044"
  },
  {
    "text": "exclude 0 and 1 from the\nrecurrence. Because, for example,\nwhen n=0, log of 0 is,",
    "start": "4374044",
    "end": "4383338"
  },
  {
    "text": "it's like dividing by 0,\nright, you cannot do it. Log of 1 is 0.\nSo here, even if I restricted",
    "start": "4383338",
    "end": "4392519"
  },
  {
    "text": "it to 1, here I would have a 0,\nand I can't ever pick a big",
    "start": "4392519",
    "end": "4398370"
  },
  {
    "text": "enough to dominate those cases.\nWhat I do is I just say look,",
    "start": "4398370",
    "end": "4404424"
  },
  {
    "text": "I just absorb whatever the cost\nis into the T(n) for technical",
    "start": "4404424",
    "end": "4410577"
  },
  {
    "text": "convenience.\nAnd that lets me address it as",
    "start": "4410578",
    "end": "4417169"
  },
  {
    "text": "(an lg n) to be big enough to\nhandle the base case.",
    "start": "4417169",
    "end": "4424119"
  },
  {
    "text": "So, that is why we made that\ntechnical assumption.",
    "start": "4424119",
    "end": "4430930"
  },
  {
    "text": "We are going to use a fact\nwhich is that the summation of",
    "start": "4430930",
    "end": "4438714"
  },
  {
    "text": "k=2 to n-1 of k lg k is less\nthan or equal to 1/2n^2 lg n -",
    "start": "4438714",
    "end": "4446776"
  },
  {
    "text": "1/8n^2.\nI am going to leave that as an exercise for you to workout.\nI think it is an exercise in",
    "start": "4446776",
    "end": "4455429"
  },
  {
    "text": "the book, too.\nI want you to go and evaluate this.\nThere are two ways to evaluate",
    "start": "4455429",
    "end": "4461261"
  },
  {
    "text": "it.\nOne is by using purely summations and facts about\nsummations by splitting the",
    "start": "4461261",
    "end": "4467093"
  },
  {
    "text": "summation into two pieces and\nreconstituting it to prove this bound.\nThe other way is to use the",
    "start": "4467093",
    "end": "4475338"
  },
  {
    "text": "integral method for solving\nsummations. Either way you can prove.\nThe integral method actually",
    "start": "4475338",
    "end": "4483219"
  },
  {
    "text": "gets you a tighter bound than\nthis. This is a basic fact,\nand you should go off and know",
    "start": "4483220",
    "end": "4490582"
  },
  {
    "text": "how to do that.\nNow let's do substitution.",
    "start": "4490582",
    "end": "4495000"
  },
  {
    "text": "The expectation of T(n) is less\nthan or equal to 2/n times the",
    "start": "4506000",
    "end": "4518821"
  },
  {
    "text": "summation k=2 to n-1,\nnow we do the substitution of",
    "start": "4518821",
    "end": "4529330"
  },
  {
    "text": "ak lg k, the smaller values plus\nTheta(n).",
    "start": "4529331",
    "end": "4539000"
  },
  {
    "text": "I might mentioned,\nby the way, that the hard part of doing this,\nit is easy to get the bound",
    "start": "4539000",
    "end": "4545334"
  },
  {
    "text": "without this term,\nit is easy to get this bound, 1/2n^2 lg n,\nit is harder to get the second",
    "start": "4545334",
    "end": "4551669"
  },
  {
    "text": "order term.\nIt turns out you need the second order term in order to do\nwhat we are going to do.",
    "start": "4551669",
    "end": "4559000"
  },
  {
    "text": "You have to be able to subtract\na quadratic amount of the n^2 lg",
    "start": "4559000",
    "end": "4565621"
  },
  {
    "text": "n in order to make this proof\nwork. And that is the trickier part\nin evaluating that summation.",
    "start": "4565621",
    "end": "4575291"
  },
  {
    "text": "So, we get this.\nThat is less than or equal to? Well, I happen to know how much\nthis is by using that formula.",
    "start": "4575291",
    "end": "4586537"
  },
  {
    "text": "I use my fact and get 2a/n\n(1/2n^2 lg n - 1/8n^2) +",
    "start": "4586537",
    "end": "4591792"
  },
  {
    "text": "Theta(n).\nDid I do something wrong?",
    "start": "4591792",
    "end": "4603558"
  },
  {
    "text": "There we go.\nVery good.",
    "start": "4603558",
    "end": "4611970"
  },
  {
    "text": "That is equal to -\nIf I multiply this first part",
    "start": "4611970",
    "end": "4625272"
  },
  {
    "text": "through that is an lg n.\nAnd now, so I don't make a",
    "start": "4625272",
    "end": "4634363"
  },
  {
    "text": "mistake, I want to express this\nas my desired,",
    "start": "4634363",
    "end": "4642545"
  },
  {
    "text": "this is what I want it to be,\nminus a residual.",
    "start": "4642545",
    "end": "4652000"
  },
  {
    "text": "I am going to write the\nresidual as this part.",
    "start": "4652000",
    "end": "4658702"
  },
  {
    "text": "And so, the way to write that\nis, that is going to be minus.",
    "start": "4658702",
    "end": "4667489"
  },
  {
    "text": "And then it is going to be this\nterm here, which is going to be",
    "start": "4667489",
    "end": "4676722"
  },
  {
    "text": "an/4 - Theta(n).",
    "start": "4676723",
    "end": "4680000"
  },
  {
    "text": "And that is going to be less\nthan or equal to an lg n if this",
    "start": "4685000",
    "end": "4692309"
  },
  {
    "text": "part is positive.\nAnd I can make that part positive by picking a big enough\nsuch that an/4 dominates the",
    "start": "4692309",
    "end": "4704614"
  },
  {
    "text": "constant in the Theta(n) here.\nWhatever the constant is here,",
    "start": "4704614",
    "end": "4714590"
  },
  {
    "text": "I can find an a that is big\nenough so that this term makes",
    "start": "4714590",
    "end": "4725211"
  },
  {
    "text": "this part positive.\nIf a is big enough so that an/4",
    "start": "4725211",
    "end": "4734527"
  },
  {
    "text": "dominates Theta(n).\nAnd so the running time of",
    "start": "4734527",
    "end": "4741217"
  },
  {
    "text": "randomized quicksort is order n\nlg n. That is what we just proved,\nthe expected running time is",
    "start": "4741217",
    "end": "4749064"
  },
  {
    "text": "order n lg n.\nNow, in practice, quicksort is a great algorithm.\nIt is typically three or more",
    "start": "4749064",
    "end": "4756741"
  },
  {
    "text": "times faster than mergesort.\nIt doesn't give you the strong guarantee necessarily of\nmergesort and being worst-case n",
    "start": "4756741",
    "end": "4766464"
  },
  {
    "text": "lg n.\nBut in practice, if you use randomized\nquicksort, it is generally as",
    "start": "4766464",
    "end": "4773136"
  },
  {
    "text": "much as three times faster.\nIt does require code tuning in order to get it up to be that\nfast.",
    "start": "4773136",
    "end": "4780219"
  },
  {
    "text": "You do have to go and coarsen\nthe base cases and do some other tricks there,\nbut most good sorting",
    "start": "4780219",
    "end": "4787613"
  },
  {
    "text": "algorithms that you will find\nare based on quicksort. Also one of the other reasons\nit works well is because it",
    "start": "4787613",
    "end": "4796018"
  },
  {
    "text": "tends to work well with caches\nin virtual memory. We are not really talking much\nabout caching models and so",
    "start": "4796018",
    "end": "4805431"
  },
  {
    "text": "forth, big topic these days in\nalgorithms, but it does work very well with caches in virtual\nmemory.",
    "start": "4805431",
    "end": "4812973"
  },
  {
    "text": "It is another reason that this\nis a good algorithm to use. Good recitation,\nby the way, on Friday.",
    "start": "4812973",
    "end": "4820359"
  },
  {
    "text": "We are going to see another n\nlog n time algorithm, a very important one in\nrecitation on Friday.",
    "start": "4820359",
    "end": "4827180"
  }
]