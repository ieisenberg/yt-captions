[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high-quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13340"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13340",
    "end": "22029"
  },
  {
    "text": "PROFESSOR: So did\neveryone turn in PSET1? Yes? Good.",
    "start": "22030",
    "end": "27220"
  },
  {
    "text": "OK, so there is a PSET1\ncritique due in a few days. My advice? You already did PSET1.",
    "start": "27220",
    "end": "33215"
  },
  {
    "text": "You remember what you\nwrote out on the proof. Look at the solution. Write one paragraph today,\nand you're done with it.",
    "start": "33215",
    "end": "38630"
  },
  {
    "text": "Then you go focus on PSET2. If you leave it\noff until Tuesday, you're going to have to\nread your proof again,",
    "start": "38630",
    "end": "44250"
  },
  {
    "text": "remember what you're thinking. It's a lot more work. Just do it now, get\nit out of the way, and put PSET1 behind you.",
    "start": "44250",
    "end": "51466"
  },
  {
    "text": "AUDIENCE: Is the critique\nonly for the proof? Or is this for all of them? PROFESSOR: Nope. Just the proof. So you have to compare\nyour proof with our proof?",
    "start": "51466",
    "end": "58440"
  },
  {
    "text": " AUDIENCE: Is there an\nassignment for that? Or do we just know to do it?",
    "start": "58440",
    "end": "64876"
  },
  {
    "text": "PROFESSOR: Uh. PSET1 be Stellar. ",
    "start": "64876",
    "end": "69990"
  },
  {
    "text": "Oh, no, sorry. It's not in Stellar. It's on our new grading\nsite that just went out. So you have to go to\nour new grading site,",
    "start": "69990",
    "end": "75330"
  },
  {
    "text": "and you have to type\nin your critique there. And it's one paragraph. You should aim\nfor one paragraph. If you're doing more\nthan that, then you're",
    "start": "75330",
    "end": "81760"
  },
  {
    "text": "doing something wrong. And it's LATEX Plus math mode. So you can use math mode,\nand that's about it.",
    "start": "81760",
    "end": "89460"
  },
  {
    "text": "OK, any more questions\nabout the critique? It's a new thing. We care about it because it will\nmake our grading life easier.",
    "start": "89460",
    "end": "95159"
  },
  {
    "text": "And because it'll force you to\nlook at the solutions and see what you understood\nand what you didn't. So we care about it. Don't ignore it.",
    "start": "95160",
    "end": "101960"
  },
  {
    "text": "Yes? AUDIENCE: Like, how\nmuch is it weighted? How much does it count\ntoward the grade?",
    "start": "101960",
    "end": "108294"
  },
  {
    "text": "PROFESSOR: If you\ndon't have a critique, we will most likely\ngive you a 0 for proof.",
    "start": "108294",
    "end": "113394"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE].  PROFESSOR: If your proof is bad\nand your critique of the proof",
    "start": "113394",
    "end": "120070"
  },
  {
    "text": "is good, then you\nmight get something. If your proof is bad and\nyou have no critique-- actually if your proof\nis whatever it is and you",
    "start": "120070",
    "end": "126370"
  },
  {
    "text": "have no critique, you get a 0. AUDIENCE: Yeah. [CHUCKLE] PROFESSOR: Any more\nquestions about that?",
    "start": "126370",
    "end": "131739"
  },
  {
    "text": " OK.",
    "start": "131740",
    "end": "137080"
  },
  {
    "text": "Who needs help remembering\nwhat the document distance problem is? ",
    "start": "137080",
    "end": "144910"
  },
  {
    "text": "OK. Everyone who went to lecture\nor to [INAUDIBLE] remembers. That's good. Who went to lecture last time?",
    "start": "144910",
    "end": "151360"
  },
  {
    "text": " Cool. That's good. So we did insertion\nsort and merge sort",
    "start": "151360",
    "end": "158560"
  },
  {
    "text": "from a theoretical standpoint. Today we're going to look at\nthe code for the insertion sort and, if we have time, look\nat the code for merge-sort,",
    "start": "158560",
    "end": "165099"
  },
  {
    "text": "and use the same strategy as we\ndid last time to analyze them, look at the running time, make\nsure the running time matches",
    "start": "165100",
    "end": "171290"
  },
  {
    "text": "the theory, and see how\npseudocode turns into Python. ",
    "start": "171290",
    "end": "179010"
  },
  {
    "text": "So you all have your listings. Last time in document\ndistance, we covered Main,",
    "start": "179010",
    "end": "185790"
  },
  {
    "text": "and we covered most\nof the functions except for count frequency. Can anyone remind me what\nthe call graph looked like?",
    "start": "185790",
    "end": "195200"
  },
  {
    "text": "So the call graph\nis the tree that I had up on the left,\nand it started at Main. ",
    "start": "195200",
    "end": "208650"
  },
  {
    "text": "Thank you.  So Main calls word frequencies\nfor file, which in turn calls?",
    "start": "208650",
    "end": "220610"
  },
  {
    "text": "AUDIENCE: Well, it's\nprobably line list. PROFESSOR: OK. AUDIENCE: And count frequency. ",
    "start": "220610",
    "end": "231390"
  },
  {
    "text": "PROFESSOR: So we pretend we\ndon't see the read file called. We assume that the data\nis already in memory",
    "start": "231390",
    "end": "237360"
  },
  {
    "text": "or that the call\ntakes time that's proportional to the running--\nto the length of the file.",
    "start": "237360",
    "end": "243730"
  },
  {
    "text": "And we only look at get-word\nfrom line list and count frequency. ",
    "start": "243730",
    "end": "253340"
  },
  {
    "text": "OK. Who else does Main call? AUDIENCE: Vector angle? ",
    "start": "253340",
    "end": "265760"
  },
  {
    "text": "PROFESSOR: And the vector angle? AUDIENCE: Inner product. ",
    "start": "265760",
    "end": "278017"
  },
  {
    "text": "PROFESSOR: OK. Let's put up the constants\nfor-- for the document distance",
    "start": "278017",
    "end": "283370"
  },
  {
    "text": "problem that we used last time. So we said that the\ndocument has W words.",
    "start": "283370",
    "end": "291780"
  },
  {
    "text": "And then when you take\nthat list of words and you turn it into\na distance vector,",
    "start": "291780",
    "end": "297330"
  },
  {
    "text": "you will get assigned\nto a document vector. You will get L elements, which\nbasically means L unique words.",
    "start": "297330",
    "end": "304180"
  },
  {
    "text": "So L is the document\nvector length.",
    "start": "304180",
    "end": "309729"
  },
  {
    "text": "And we assume we're using a\nnatural language like English, so all the words\nare bounded in size.",
    "start": "309730",
    "end": "315090"
  },
  {
    "text": "Like 5 to 10\ncharacters, for example. And to make our\nlife easier, we say",
    "start": "315090",
    "end": "320210"
  },
  {
    "text": "all the words have the same\nsize W. So w is the word length.",
    "start": "320210",
    "end": "330430"
  },
  {
    "text": "Using these numbers,\ncan anyone remind me what we said the costs\nfor these methods are?",
    "start": "330430",
    "end": "336190"
  },
  {
    "text": "And we didn't analyze\ncount frequency, so it's OK to not\ntake my word for it and not tell me what\nI said last time.",
    "start": "336190",
    "end": "342800"
  },
  {
    "text": "But I would like numbers for\nword frequencies from file, get word from line list, vector\nangle, and inner product.",
    "start": "342800",
    "end": "350084"
  },
  {
    "text": "AUDIENCE: Was that mu squared? That was last time. PROFESSOR: OK.",
    "start": "350084",
    "end": "355380"
  },
  {
    "text": "Which-- which one? Does anyone-- does\nanyone else want to try?",
    "start": "355380",
    "end": "361410"
  },
  {
    "text": "Let's not do guessing. I'll pull them up\nif nobody remembers.",
    "start": "361410",
    "end": "368290"
  },
  {
    "text": "I spent an entire hour on\nthat, and you guys did too. It was painful. AUDIENCE: I know. But we had to, like, you\nknow, add them up, and then--",
    "start": "368290",
    "end": "374924"
  },
  {
    "text": "PROFESSOR: Yeah. So we did a lot of\nwork for those numbers. ",
    "start": "374924",
    "end": "380280"
  },
  {
    "text": "So get word from line list\nwas order of W squared. Does anyone remember why?",
    "start": "380280",
    "end": "386490"
  },
  {
    "text": "What made it take so much time? ",
    "start": "386490",
    "end": "394020"
  },
  {
    "text": "AUDIENCE: 'Cause you\nappend it to the word list. For, like, you add it to\nthe end to go through.",
    "start": "394020",
    "end": "399466"
  },
  {
    "text": "PROFESSOR: OK.  So you add it.",
    "start": "399467",
    "end": "404530"
  },
  {
    "text": "So what? AUDIENCE: So, like,\nevery time you need it, you, like, do word list equals\nword list plus words in line.",
    "start": "404530",
    "end": "412260"
  },
  {
    "text": "PROFESSOR: OK. Excellent. So get words from\nline list, line five.",
    "start": "412260",
    "end": "418199"
  },
  {
    "text": "There's a plus there. And that plus sign messes\nup the performance.",
    "start": "418200",
    "end": "423629"
  },
  {
    "text": "So that's why it's w squared. Count frequency,\nwe didn't cover it,",
    "start": "423630",
    "end": "428800"
  },
  {
    "text": "you had to take my word for it. So we will cover it now. And, inner product.",
    "start": "428800",
    "end": "435145"
  },
  {
    "start": "435145",
    "end": "446060"
  },
  {
    "text": "So suppose you have two vectors\nof line-- length L1 and L2. How much time does it take\nto compute the inner product?",
    "start": "446060",
    "end": "452699"
  },
  {
    "text": "AUDIENCE: L1, L2 time. PROFESSOR: OK. ",
    "start": "452700",
    "end": "458880"
  },
  {
    "text": "So how much time does\nvector angle take? ",
    "start": "458880",
    "end": "468335"
  },
  {
    "text": "AUDIENCE: L1 L2 time. ",
    "start": "468335",
    "end": "473750"
  },
  {
    "text": "PROFESSOR: L1 L2. So it makes three calls, right? You get the two things.",
    "start": "473750",
    "end": "479270"
  },
  {
    "text": "First, it computes the inner\nproduct of the two lists. And then it has to compute the\ninner product of each vector--",
    "start": "479270",
    "end": "485890"
  },
  {
    "text": "of each document\nvector with itself. Because that's what's on\nthe bottom of the fraction. ",
    "start": "485890",
    "end": "493330"
  },
  {
    "text": "So what's the running\ntime for that? AUDIENCE: Plus L1\nsquared, plus L2 squared.",
    "start": "493330",
    "end": "498710"
  },
  {
    "text": "PROFESSOR: Plus L1\nsquared, plus L2 squared. So someone was really helpful\nlast time and asked me,",
    "start": "498710",
    "end": "505380"
  },
  {
    "text": "can you make this\nsimpler with some math? And I said, I don't know\nso I don't think I will. But I looked at-- my, I\nlooked at my high school math",
    "start": "505380",
    "end": "512820"
  },
  {
    "text": "afterwards, and it turns out\nthat these-- so L1 squared plus L2 squared are guaranteed\nto be greater than L1 L2",
    "start": "512820",
    "end": "520830"
  },
  {
    "text": "as long as these\nnumbers are positive. And we're working\nwith document list, so they're always positive.",
    "start": "520830",
    "end": "526350"
  },
  {
    "text": "So this will go away. ",
    "start": "526350",
    "end": "534320"
  },
  {
    "text": "So let's assume count frequency\nis w squared or smaller.",
    "start": "534320",
    "end": "540080"
  },
  {
    "text": "So the total running time for\nword frequencies from file is w squared.",
    "start": "540080",
    "end": "546580"
  },
  {
    "text": "What's the running\ntime for everything? ",
    "start": "546580",
    "end": "553114"
  },
  {
    "text": "AUDIENCE: Would just\nbe, like, w squared plus L1 squared plus L2 squared? PROFESSOR: Almost.",
    "start": "553114",
    "end": "558160"
  },
  {
    "text": "AUDIENCE: Actually, it depends\non which one's greater, right? PROFESSOR: Well, almost. So here W works, assuming you\nget one document with W words.",
    "start": "558160",
    "end": "567580"
  },
  {
    "text": "But word frequencies from\nfiles is called twice, once for each document. First document has W1 words,\nsecond document has W2 words.",
    "start": "567580",
    "end": "576060"
  },
  {
    "text": "So what's the running time? AUDIENCE: W1 squared\nplus W2 squared.",
    "start": "576060",
    "end": "582750"
  },
  {
    "text": "PROFESSOR: W1 squared\nplus W2 squared.",
    "start": "582750",
    "end": "588000"
  },
  {
    "text": "So I take this, and I add this. Right? Except when I add this, if\nI want to add L1 squared,",
    "start": "588000",
    "end": "595380"
  },
  {
    "text": "I know L1 is the number\nof unique documents-- of unique words in the document.",
    "start": "595380",
    "end": "600600"
  },
  {
    "text": "And W1 is the total number\nof words in the document. W1 guaranteed to be\ngreater or equal than L1,",
    "start": "600600",
    "end": "607177"
  },
  {
    "text": "so it's going to dominate. I don't need to add it. Same for L2. This is it.",
    "start": "607177",
    "end": "612178"
  },
  {
    "text": " OK. You guys don't seem to\nremember the numbers for these.",
    "start": "612178",
    "end": "618054"
  },
  {
    "text": "So that means I didn't\ntorture you enough last time. So let's do more. Let's look at count frequency.",
    "start": "618054",
    "end": "623270"
  },
  {
    "text": "And let's compute\nthe cost for that. ",
    "start": "623270",
    "end": "636830"
  },
  {
    "text": "So what we did last time was, we\nwent through each line of code. We thought, how\nmuch time does it",
    "start": "636830",
    "end": "642820"
  },
  {
    "text": "take to execute the line once? And how many times\ndoes the line run? And then we compute the product\nof that, add everything up,",
    "start": "642820",
    "end": "649819"
  },
  {
    "text": "and that's the cost\nfor the function. ",
    "start": "649819",
    "end": "655940"
  },
  {
    "text": "First off, before\nI put numbers here, what does the method to do? ",
    "start": "655940",
    "end": "669480"
  },
  {
    "text": "AUDIENCE: It takes\na list of words-- PROFESSOR: OK. AUDIENCE: For each\nitem in that list,",
    "start": "669480",
    "end": "676149"
  },
  {
    "text": "checks to see if\nit's-- you know, list of words that\nit's-- counted, right?",
    "start": "676150",
    "end": "685407"
  },
  {
    "text": "PROFESSOR: OK. So you're telling me\nwhat the code does. AUDIENCE: Yeah. PROFESSOR: Try to\nlook at Main or try",
    "start": "685407",
    "end": "691070"
  },
  {
    "text": "to look at word\nfrequencies for files. So look at it top-down, and tell\nme what the purpose of it is.",
    "start": "691070",
    "end": "696540"
  },
  {
    "text": "What's the goal? AUDIENCE: Making a list\nof-- and each object",
    "start": "696540",
    "end": "705108"
  },
  {
    "text": "is a list with a\nword and a number. PROFESSOR: OK. Excellent. So big picture, I have\nthe first document.",
    "start": "705108",
    "end": "711790"
  },
  {
    "text": "I read it in. I break it up into words. And I have a list of words. That's what word\nfrequencies for file",
    "start": "711790",
    "end": "718380"
  },
  {
    "text": "gives me-- sorry, that's what\nyou get words from line list gives me. List of words. ",
    "start": "718380",
    "end": "728720"
  },
  {
    "text": "The fox is in the hat.",
    "start": "728720",
    "end": "736000"
  },
  {
    "text": " And this gets passed\nto count frequency,",
    "start": "736000",
    "end": "741600"
  },
  {
    "text": "and count frequency\ngives me, you said, an object, which is a list.",
    "start": "741600",
    "end": "747430"
  },
  {
    "text": "Of lists, where each\nof them has the word and how many times it shows up. So I would have \"the\" shows\nup twice, \"fox\" shows up",
    "start": "747430",
    "end": "759510"
  },
  {
    "text": "once, \"is\" shows up\nonce, \"in\" shows up once,",
    "start": "759510",
    "end": "771110"
  },
  {
    "text": "and-- I need a shorter\nexample-- \"hat\" shows up once. So it takes this and\nturns it into that.",
    "start": "771110",
    "end": "778154"
  },
  {
    "text": " So on line 2, I have a\nlist L that's initialized.",
    "start": "778155",
    "end": "785090"
  },
  {
    "text": "And then, at the\nend, it's returned. So I'm going to guess that L\nis going to look like this. ",
    "start": "785090",
    "end": "793350"
  },
  {
    "text": "Line 3, for new word in word\nlist, iterates over the input. So iterates over this.",
    "start": "793350",
    "end": "799430"
  },
  {
    "text": "And then, line 4 checks\nto see, for each new word, it looks at the list that\nI have under construction.",
    "start": "799430",
    "end": "806150"
  },
  {
    "text": "So exam-- for example, if\nI ran through all the words and then I'm trying to\nput in hat right now,",
    "start": "806150",
    "end": "813360"
  },
  {
    "text": "I wouldn't have it here. What line 4 does is, it\nlooks at all the entries.",
    "start": "813360",
    "end": "819890"
  },
  {
    "text": "And it says, if I\ncan find the words-- so if I can find the\nword hat somewhere here--",
    "start": "819890",
    "end": "825180"
  },
  {
    "text": "then increment the number. If I can't, then\nmake a new entry and say that the word shows up\nonce, because it's the first",
    "start": "825180",
    "end": "832100"
  },
  {
    "text": "I see it.  So this is what the code does.",
    "start": "832100",
    "end": "837590"
  },
  {
    "text": "Now let's see how\nfast it does that. So line 2 initialize the\noutput to an empty list.",
    "start": "837590",
    "end": "847450"
  },
  {
    "text": "What's the cost for that? AUDIENCE: [INAUDIBLE]. PROFESSOR: Very good. How many times?",
    "start": "847450",
    "end": "852580"
  },
  {
    "start": "852580",
    "end": "858370"
  },
  {
    "text": "For new word in word lists. Cost? ",
    "start": "858370",
    "end": "863726"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. I know the cost is 1.",
    "start": "863726",
    "end": "869070"
  },
  {
    "text": "PROFESSOR: OK, so we are-- here,\nit's a bit confusing, right? We're saying that, oh, there's\ndoes iteration over a list.",
    "start": "869070",
    "end": "875610"
  },
  {
    "text": "And each step of the\niteration is constant time, but the iteration\nhappens L times.",
    "start": "875610",
    "end": "882209"
  },
  {
    "text": "I'm sorry, not L times. The length of the list times. How many-- how many\nelements are in word lists?",
    "start": "882210",
    "end": "888120"
  },
  {
    "text": " I heard a very low W, so\nI will pretend I heard it.",
    "start": "888120",
    "end": "897730"
  },
  {
    "text": "Or I hope I heard W. So\nword list, the words I got from the document,\nW. How about the if.",
    "start": "897730",
    "end": "906690"
  },
  {
    "text": "So, it looks at the\nword that I have-- oh.",
    "start": "906690",
    "end": "913570"
  },
  {
    "text": "This code is confusing because\nI forgot a line, right? Pretend that between line--\noh, no, sorry, I didn't.",
    "start": "913570",
    "end": "920580"
  },
  {
    "text": "New word is-- new word\nis assigned in line 3. So new word in line 3 is\ncompared to the first element",
    "start": "920580",
    "end": "929030"
  },
  {
    "text": "of the entry that's\nassigned in line 4. So hat is compared with\nthe, fox, so on, so forth.",
    "start": "929030",
    "end": "936960"
  },
  {
    "text": "And if the comparison is\ntrue, it runs line 6 and 7. And if not, it keeps looping.",
    "start": "936960",
    "end": "945230"
  },
  {
    "text": "So line 5, the if how,\nmany times does it run?",
    "start": "945230",
    "end": "950300"
  },
  {
    "text": "Just the comparison. AUDIENCE: W. PROFESSOR: W. AUDIENCE: Oh, no, no, no.",
    "start": "950300",
    "end": "956148"
  },
  {
    "text": "No. I'm thinking of line 4. PROFESSOR: Oh. Yeah. I'm getting confused too.",
    "start": "956148",
    "end": "962260"
  },
  {
    "text": "So let's start with line 4. Sorry. Shouldn't do line 5. AUDIENCE: --new word,\nthen you're not-- like,",
    "start": "962260",
    "end": "968059"
  },
  {
    "text": "you're not going to\nrun through that again. PROFESSOR: Yeah. Let's worry about\nthat right afterwards. Let's do line 4 first.",
    "start": "968059",
    "end": "973760"
  },
  {
    "text": "Sorry, I jumped over line 4. So, line 4 definitely\nruns W times",
    "start": "973760",
    "end": "979519"
  },
  {
    "text": "because it's inside the for\nloop from line 3 to line 9. So everything here will\ndefinitely run W times.",
    "start": "979520",
    "end": "989509"
  },
  {
    "text": "But how many times\ndoes it run overall? So, line 4 iterates over\nall the entries here.",
    "start": "989510",
    "end": "996376"
  },
  {
    "text": "How many times does that happen?  AUDIENCE: 1 plus W\nover-- times 10/2,",
    "start": "996377",
    "end": "1007570"
  },
  {
    "text": "because it's just worst case,\nL-- the length of L increases",
    "start": "1007570",
    "end": "1014588"
  },
  {
    "text": "by 1 every time. [INAUDIBLE] PROFESSOR: OK, so I like that\nyou started with worst case.",
    "start": "1014588",
    "end": "1022350"
  },
  {
    "text": "Normally I would\nsay exactly that. Worst case or W. But we\nhad a different constant",
    "start": "1022350",
    "end": "1027619"
  },
  {
    "text": "for the number of words\nthat you have in the end. So let's say something a little\nbit better than W. Let's say,",
    "start": "1027619",
    "end": "1036230"
  },
  {
    "text": "let's put the lower bound on it. So yeah, worst case, all\nthe words are different. But what if they're\nnot all different?",
    "start": "1036230",
    "end": "1041619"
  },
  {
    "text": "And what if in the end\nI know I have L words? CLASS: [INAUDIBLE].",
    "start": "1041619",
    "end": "1047652"
  },
  {
    "text": "PROFESSOR: Worst case. ",
    "start": "1047653",
    "end": "1053001"
  },
  {
    "text": "Almost.  So, I know I have a W\nfrom the outer loop.",
    "start": "1053001",
    "end": "1059940"
  },
  {
    "text": "For each word in the\nouter loop, how many times does the inner loop execute?",
    "start": "1059940",
    "end": "1066800"
  },
  {
    "text": "How many times do I have\nto go through something in the inner list? So I know here I have\nW words, suppose here I",
    "start": "1066800",
    "end": "1073090"
  },
  {
    "text": "have L elements in the vector. For each one of\nthese, how many times",
    "start": "1073090",
    "end": "1078195"
  },
  {
    "text": "do I have to go through--\nSo how many elements do I have to go through here?",
    "start": "1078195",
    "end": "1083945"
  },
  {
    "text": "AUDIENCE: Depends on\nwhere you are, though. For the first word, you\nonly have to go through one. PROFESSOR: Yep. But-- AUDIENCE: For the second\nword, you have to through--",
    "start": "1083946",
    "end": "1089590"
  },
  {
    "text": "PROFESSOR: Yep. But I heard the worst case. And I like that,\nbecause it's easier to reason about the worst case. And most of the time it's\nsort of like the average case.",
    "start": "1089590",
    "end": "1097480"
  },
  {
    "text": "AUDIENCE: So then,\nlength of list-- L. PROFESSOR: The length of the\nlist, and that's L. Worst case,",
    "start": "1097480",
    "end": "1105529"
  },
  {
    "text": "the first words that I see\nwill be L different words. And then all the\nwords that I see will be the same as the\nwords that I saw before.",
    "start": "1105530",
    "end": "1112840"
  },
  {
    "text": "So worst case, the list\nwill grow to L very fast, and then I'll keep\nseeing L L L. And I'll",
    "start": "1112840",
    "end": "1119085"
  },
  {
    "text": "ignore what was there\nin the beginning, and I'll say L times.",
    "start": "1119085",
    "end": "1124460"
  },
  {
    "text": "So I know the second list\nis bounded by L in length, the first list is\nbounded by W in length.",
    "start": "1124460",
    "end": "1129470"
  },
  {
    "text": "So worst case this\nruns L times W times. And what's the\ncost of iterating?",
    "start": "1129470",
    "end": "1136393"
  },
  {
    "text": "AUDIENCE: What is the\ndifference between L and W? L is the document vector length,\nand W is the number of words.",
    "start": "1136394",
    "end": "1141965"
  },
  {
    "text": "But isn't the number of\nelements in the document vector the number of words?",
    "start": "1141965",
    "end": "1147799"
  },
  {
    "text": "PROFESSOR: How about this case? What's W? ",
    "start": "1147799",
    "end": "1155134"
  },
  {
    "text": "AUDIENCE: 6, yeah. ",
    "start": "1155134",
    "end": "1160140"
  },
  {
    "text": "PROFESSOR: So L is the number\nof unique words in a document. And I heard a\nreally cool argument",
    "start": "1160140",
    "end": "1165580"
  },
  {
    "text": "that I liked last time. Does anyone remember? About L? ",
    "start": "1165580",
    "end": "1173450"
  },
  {
    "text": "If we're really dealing with a\nnatural language like English, how many words do\nI have in English?",
    "start": "1173450",
    "end": "1179636"
  },
  {
    "text": "AUDIENCE: Well, I\nthink, at the max, there's actually around\n250,000, but a lot of them are not used anymore.",
    "start": "1179636",
    "end": "1185157"
  },
  {
    "text": "PROFESSOR: OK. So 250,000, right? Max. So that's a constant.",
    "start": "1185157",
    "end": "1190480"
  },
  {
    "text": "If I have a document\nthat contains all the writings of all the\nauthors that were ever done,",
    "start": "1190480",
    "end": "1196060"
  },
  {
    "text": "and say that's a billion words,\nL is still going to be 250,000.",
    "start": "1196060",
    "end": "1202771"
  },
  {
    "text": "Right? So L can be very\ndifferent from W. That's why we're keeping\ntrack of them separately. ",
    "start": "1202771",
    "end": "1211510"
  },
  {
    "text": "One W L times W. What's\nthe cost of iterating? ",
    "start": "1211510",
    "end": "1219190"
  },
  {
    "text": "So we know how many\ntimes line 4 runs, but what's the cost of one\nstep of iterating in the list?",
    "start": "1219190",
    "end": "1226930"
  },
  {
    "text": "1. Very good.  Line 5.",
    "start": "1226930",
    "end": "1232036"
  },
  {
    "text": "How many times does it run? ",
    "start": "1232036",
    "end": "1237420"
  },
  {
    "text": "AUDIENCE: W times L? PROFESSOR: Yep. Same as line 4, right? The if is run all the time.",
    "start": "1237420",
    "end": "1243799"
  },
  {
    "text": "And lines 5 and 6 only run\nsometimes, but-- sorry, line 6 and 7 only run sometimes,\nbut line 5 runs all the time.",
    "start": "1243800",
    "end": "1253750"
  },
  {
    "text": "What is the cost? ",
    "start": "1253750",
    "end": "1261642"
  },
  {
    "text": "AUDIENCE: We can\nsay it's constant. PROFESSOR: We can\nsay it's constant. I like we can say\nit's constant, but why",
    "start": "1261642",
    "end": "1267560"
  },
  {
    "text": "is it that we can\nsay it's constant? Why don't I just say 1,\nif-- this is an empty list. This is a number.",
    "start": "1267560",
    "end": "1273280"
  },
  {
    "text": "AUDIENCE: Depends\non the word length. PROFESSOR: OK. It depends on the word\nlis-- length, very good. AUDIENCE: And we're\nassuming that words",
    "start": "1273280",
    "end": "1278690"
  },
  {
    "text": "are all the same length. PROFESSOR: OK. AUDIENCE: And? So, 1 times L W. Little w.",
    "start": "1278690",
    "end": "1286190"
  },
  {
    "text": "PROFESSOR: OK, very good. So we do assume that all the\nwords are the same length. But unless I tell you that\nthe length is really small,",
    "start": "1286190",
    "end": "1294919"
  },
  {
    "text": "which I did, you can't say 1. So, when you said we can say\nit's constant, it's right.",
    "start": "1294920",
    "end": "1301000"
  },
  {
    "text": "We can say, but we\nalso have to say why, or at least think\nwhy, that's the case. So it's W-- we're going to use\nW here and when we copy it here,",
    "start": "1301000",
    "end": "1308760"
  },
  {
    "text": "we're going to forget about it. AUDIENCE: Can you put\na top bar on the W, just so I can tell that\nit's not the other W.",
    "start": "1308760",
    "end": "1316830"
  },
  {
    "text": "PROFESSOR: OK But you have to\nbe responsible for reminding",
    "start": "1316830",
    "end": "1327950"
  },
  {
    "text": "me to put that. AUDIENCE: OK. PROFESSOR: OK. So string comparison,\nnot constant.",
    "start": "1327950",
    "end": "1335470"
  },
  {
    "text": "If I have two very\nlong strings that only differ in the\nlast character, I have to go through them\ncharacter by character",
    "start": "1335470",
    "end": "1341550"
  },
  {
    "text": "by character until I find\nthe last character that's different. Because until I look at that,\nthe strings might be equal.",
    "start": "1341550",
    "end": "1348769"
  },
  {
    "text": "So comparing two\nlong strings takes time that's proportional to\nthe length of the strings. ",
    "start": "1348770",
    "end": "1356680"
  },
  {
    "text": "OK, so line 5 costs\nw, tricky part, runs L times W part--\nL times W times.",
    "start": "1356680",
    "end": "1364420"
  },
  {
    "text": "How about line 6 and 7? ",
    "start": "1364420",
    "end": "1372860"
  },
  {
    "text": "I didn't ask line 6, I\nasked line 6 and 7 together, because there is a trick there. ",
    "start": "1372860",
    "end": "1385690"
  },
  {
    "text": "AUDIENCE: I think it's\nconstant for line 6, right? PROFESSOR: Why? AUDIENCE: 'Cause it's a number.",
    "start": "1385690",
    "end": "1392857"
  },
  {
    "text": "And one place in the entry. We've already grabbed the entry. PROFESSOR: So the cost\nof running it once is 1.",
    "start": "1392858",
    "end": "1400420"
  },
  {
    "text": "Good. I can tell you that that's\nthe same case for 7. How many times do they run?",
    "start": "1400420",
    "end": "1406559"
  },
  {
    "text": " This is the hard part.",
    "start": "1406560",
    "end": "1412490"
  },
  {
    "text": "AUDIENCE: Wait, does break\nline break out of one loop? PROFESSOR: Yep. Break breaks out of the\nloop between lines 4 and 7.",
    "start": "1412490",
    "end": "1419940"
  },
  {
    "text": "I have a question. AUDIENCE: Is L supposed\nto be not in line with if?",
    "start": "1419940",
    "end": "1426350"
  },
  {
    "text": "Yes. PROFESSOR: It is supposed\nto be where it is. I will talk-- yes. So what happens is, that\nelse is in line with a for.",
    "start": "1426350",
    "end": "1433880"
  },
  {
    "text": "And if the for loop\nruns to completion, then it does get executed.",
    "start": "1433880",
    "end": "1440860"
  },
  {
    "text": "If there's a break\nsomewhere inside the for, then it doesn't get executed. ",
    "start": "1440860",
    "end": "1448140"
  },
  {
    "text": "So the idea behind\nthat is, usually use this for finding stuff. So you iterate over a list,\nand when you find something,",
    "start": "1448140",
    "end": "1455760"
  },
  {
    "text": "break out of the loop. You did something, you\nbreak out of the loop. If you didn't find it,\nyou can put an else",
    "start": "1455760",
    "end": "1461435"
  },
  {
    "text": "and then say what code happens. And you don't have to\nwrite code on your own to check if you broke\nout of the loop.",
    "start": "1461435",
    "end": "1469420"
  },
  {
    "text": "So if break executes,\nthen it's going to take us out of the loop.",
    "start": "1469420",
    "end": "1474570"
  },
  {
    "text": "It's going to ignore the else. And it's going to run\nthe loop on line 3 again. So it's going to do\nanother iteration.",
    "start": "1474570",
    "end": "1479865"
  },
  {
    "text": " So line 6 and 7, how many times? AUDIENCE: W minus L?",
    "start": "1479865",
    "end": "1487120"
  },
  {
    "text": "PROFESSOR: W minus L. AUDIENCE: Like, if\nit's the difference in number of words and\nnumber of-- unique words.",
    "start": "1487120",
    "end": "1494962"
  },
  {
    "text": "PROFESSOR: Smart. You gave the precise answer\nright the first time.",
    "start": "1494962",
    "end": "1500520"
  },
  {
    "text": "W minus L. Very good. ",
    "start": "1500520",
    "end": "1506830"
  },
  {
    "text": "And what happens once--\nwhat happens once this runs?",
    "start": "1506830",
    "end": "1513960"
  },
  {
    "text": "Why do I know-- why do I know\nthat the if won't be-- Oh.",
    "start": "1513960",
    "end": "1521730"
  },
  {
    "text": "Sorry, I'm getting\nmyself confused. So it's going to run W\nminus L times total, right?",
    "start": "1521730",
    "end": "1527950"
  },
  {
    "text": "Total times overall\nwithout this W thing here, so I should put\nan arrow and say--",
    "start": "1527950",
    "end": "1533547"
  },
  {
    "text": " Now suppose I\ndidn't notice this.",
    "start": "1533547",
    "end": "1541070"
  },
  {
    "text": "Is there another way I\ncan get the decent bounds? So this is the right,\nperfect answer. You have this, you're done.",
    "start": "1541070",
    "end": "1546290"
  },
  {
    "text": "You don't need to think further. Suppose you don't have this. What else can you do? ",
    "start": "1546290",
    "end": "1553479"
  },
  {
    "text": "AUDIENCE: But we\ndon't have what? PROFESSOR: If I didn't\nnotice that, hey, there are L words-- There\nare L new words,",
    "start": "1553479",
    "end": "1563330"
  },
  {
    "text": "W words total, so W minus\nL words repeat themselves. So this is how many times\nthe if is going to be true.",
    "start": "1563330",
    "end": "1571230"
  },
  {
    "text": "If I didn't have\nthat, then I could see that line 7 breaks\nout of the loop.",
    "start": "1571230",
    "end": "1576750"
  },
  {
    "text": "So if that if runs\nonce, then we're done. We're out of the loop. It's not going to run again.",
    "start": "1576750",
    "end": "1582429"
  },
  {
    "text": "So a bound that's not as\nprecise as the one you gave me is 1 times W, because it\nruns, at most, once per loop.",
    "start": "1582430",
    "end": "1591265"
  },
  {
    "start": "1591265",
    "end": "1600030"
  },
  {
    "text": "Does people see this? So this is an easy way\nto cop out of thinking.",
    "start": "1600030",
    "end": "1605809"
  },
  {
    "text": "And I don't like to think more\nthan necessary, because you have finite time on\na test or in life, and you don't want to spend\ntoo much time on one thing.",
    "start": "1605810",
    "end": "1612720"
  },
  {
    "text": " We covered the loop. Let's look at else and append.",
    "start": "1612720",
    "end": "1619010"
  },
  {
    "text": "I already got a\nhelpful question, so I explained when\nthe else would run. The running time for else.",
    "start": "1619010",
    "end": "1625240"
  },
  {
    "text": "Else is a flow--\ncontrol flow statement. It's like break,\nso Python will keep",
    "start": "1625240",
    "end": "1630243"
  },
  {
    "text": "track of whether a\nloop completed or not in constant time. I'll give you that. That's in the cost model.",
    "start": "1630244",
    "end": "1636750"
  },
  {
    "text": "How many times does\nthis else run, at most? OK, L. Good.",
    "start": "1636750",
    "end": "1642840"
  },
  {
    "text": " Perfect. How about line 9? ",
    "start": "1642840",
    "end": "1656012"
  },
  {
    "text": "Loop stops here.  How about line 9?",
    "start": "1656012",
    "end": "1662200"
  },
  {
    "text": "How many times does it run? That's easy. AUDIENCE: [INAUDIBLE]. PROFESSOR: Yep.",
    "start": "1662200",
    "end": "1667800"
  },
  {
    "text": "And what does it do? It's an append. What's the cost for append?",
    "start": "1667800",
    "end": "1673111"
  },
  {
    "text": "AUDIENCE: Constant.  PROFESSOR: OK Line 10\nruns how many times?",
    "start": "1673111",
    "end": "1679680"
  },
  {
    "text": "What's the cost? AUDIENCE: 1? ",
    "start": "1679680",
    "end": "1687307"
  },
  {
    "text": "PROFESSOR: You guys didn't\nlisten to me last time. So I was saying you have\nto look at the notes and you have to practice this. Because you have to have\nthis model in your mind.",
    "start": "1687307",
    "end": "1694480"
  },
  {
    "text": "So that when you're\nwriting code, this has to happen\nautomatically. You shouldn't have to\nthink explicitly about it.",
    "start": "1694480",
    "end": "1700305"
  },
  {
    "text": "Because if you do, you're\nnot going to do it. AUDIENCE: For the\nelse, shouldn't it be W tim-- I mean, it would\nbe called W times not L times?",
    "start": "1700306",
    "end": "1708612"
  },
  {
    "text": "Because you want to look\nat the outer loop and not the inner loop? So it can-- you call all--\nonce at the end of the total--",
    "start": "1708612",
    "end": "1715942"
  },
  {
    "text": "the inner for. Right? So, so it could be-- happen W\ntimes, maximum, not L times.",
    "start": "1715942",
    "end": "1723590"
  },
  {
    "text": "'Cause the L is the for loop\nthat the else coincides with. And the else would\nonly happen once",
    "start": "1723590",
    "end": "1730502"
  },
  {
    "text": "for every total\niteration of that. PROFESSOR: OK so\nyou're proposing W as the bound for\nthe else, right?",
    "start": "1730502",
    "end": "1738070"
  },
  {
    "text": "Here. AUDIENCE: Yeah. PROFESSOR: So I could say,\nhey, it runs, at most, once for outer loop.",
    "start": "1738070",
    "end": "1744140"
  },
  {
    "text": "So it's, at most, W times. This is a nice, easy argument. We have a bound.",
    "start": "1744140",
    "end": "1749680"
  },
  {
    "text": "L is a tighter bound. And when I got L,\nwhat happened here",
    "start": "1749680",
    "end": "1754730"
  },
  {
    "text": "was the same kind of\nthinking that you did earlier to get this. So this bound is good,\nthis bound is tighter.",
    "start": "1754730",
    "end": "1761580"
  },
  {
    "text": "This bound is good,\nthis bound is tighter. And the argument behind\nthis one is that, hey, this",
    "start": "1761580",
    "end": "1767850"
  },
  {
    "text": "else only happens for new words. If there's no new-- if the\nword that I looked at is old,",
    "start": "1767850",
    "end": "1773299"
  },
  {
    "text": "then break is going to execute. And else is not\ngoing to execute.",
    "start": "1773300",
    "end": "1779040"
  },
  {
    "text": " So that's why I can say L.",
    "start": "1779040",
    "end": "1785330"
  },
  {
    "text": "The beauty of\nasymptotics is that I can use either of the\nbounds and I'll still get the correct running time.",
    "start": "1785330",
    "end": "1790950"
  },
  {
    "text": "So I'm not going to\nfuss over it too much. I like the tighter ones, because\nit means you guys are thinking.",
    "start": "1790950",
    "end": "1796290"
  },
  {
    "text": "And you're looking\nat the algorithm, and you're understanding it. But if you don't\nhave them, you'll still get the correct\nrunning times.",
    "start": "1796290",
    "end": "1802329"
  },
  {
    "text": "So I think that's nice. PROFESSOR: OK, let's get the\nrunning time for everything.",
    "start": "1802329",
    "end": "1807540"
  },
  {
    "text": "Can someone do it in one step? ",
    "start": "1807540",
    "end": "1813890"
  },
  {
    "text": "Then let's do it step by step. So let's compute\npartial products. What are they?",
    "start": "1813890",
    "end": "1820659"
  },
  {
    "text": "AUDIENCE: 1. W. LW. L, W, little w-- with the bar.",
    "start": "1820660",
    "end": "1829894"
  },
  {
    "text": "AUDIENCE: (LAUGHING)\nWith the bar. PROFESSOR: Awesome. AUDIENCE: W minus L. W. L, L, 1.",
    "start": "1829894",
    "end": "1839257"
  },
  {
    "text": " PROFESSOR: OK, so if I add them\nup, this is all asymptotic.",
    "start": "1839258",
    "end": "1845020"
  },
  {
    "text": "So the biggest\none will dominate. In general, I can\njust take a max instead of doing\nactual addition.",
    "start": "1845020",
    "end": "1852100"
  },
  {
    "text": "So who dominates here? AUDIENCE: The fourth one down?",
    "start": "1852100",
    "end": "1857782"
  },
  {
    "text": "PROFESSOR: Fourth-- OK. Yep. So line 5 is the biggest time\nconsumer in this algorithm.",
    "start": "1857782",
    "end": "1868820"
  },
  {
    "text": "And I know it's W times w-bar. So now I'm going\nto copy it here. What did I say I'll do\nwhen I'm copying it here?",
    "start": "1868820",
    "end": "1876575"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Yep. So I'm assuming English\nfive- to ten-character words.",
    "start": "1876575",
    "end": "1882640"
  },
  {
    "text": "W L. And W L is\nsmaller than w squared, so the assumption that\nI had before is correct.",
    "start": "1882640",
    "end": "1888779"
  },
  {
    "text": "I don't have to\nchange anything here. That is good. ",
    "start": "1888780",
    "end": "1898560"
  },
  {
    "text": "So we noticed last time,\nand already forgot by now, that the biggest problem in\nthis whole implementation",
    "start": "1898560",
    "end": "1906230"
  },
  {
    "text": "was the plus in get\nwords from line list. Suppose we forgot about it and\nwe have this big pile of code,",
    "start": "1906230",
    "end": "1914300"
  },
  {
    "text": "how do I go about\nmaking it faster?  Method one, go\nthrough every method.",
    "start": "1914300",
    "end": "1921720"
  },
  {
    "text": "Do this. Compute the running times, and\nsee which one's the slowest.",
    "start": "1921720",
    "end": "1926740"
  },
  {
    "text": "Does this scale to\n1,000 lines of code? Not so much. We're going to be giving you\nroughly 1,000 lines of code",
    "start": "1926740",
    "end": "1934700"
  },
  {
    "text": "for PSET2, and we're going\nto ask it to make it faster. Do want to understand\neverything? No.",
    "start": "1934700",
    "end": "1942350"
  },
  {
    "text": "Instead what you want\nto do is run the code through a profiler. So we have a computer. The computer can\ntell you which line",
    "start": "1942350",
    "end": "1948770"
  },
  {
    "text": "takes the most time to run. So you don't have to\ndo it on pen and paper. Whenever we can automate, do so.",
    "start": "1948770",
    "end": "1954940"
  },
  {
    "text": "So we'll teach you\nhow to run a profiler. It's in the notes. And if you look in\nthe code outputs right",
    "start": "1954940",
    "end": "1960870"
  },
  {
    "text": "after [INAUDIBLE], you'll\nsee a profiler output. So what that tells you\nis for each function,",
    "start": "1960870",
    "end": "1967580"
  },
  {
    "text": "how much time does it take--\nthat's the total time? And there's the\ncumulative time, which",
    "start": "1967580",
    "end": "1973669"
  },
  {
    "text": "is how much does it take\ntogether with its children? ",
    "start": "1973670",
    "end": "1979680"
  },
  {
    "text": "In this case for word\nfrequencies from file, order of W-- this is how\nmuch time it takes",
    "start": "1979680",
    "end": "1986360"
  },
  {
    "text": "including the\nfunctions it's called. So this is the cumulative time. Cumulative time is useful if\nI'm during runtime analysis.",
    "start": "1986360",
    "end": "1993940"
  },
  {
    "text": "Is not so useful if\nI'm looking at where's the slowness in my program? Because if you look\nat cumulative time,",
    "start": "1993940",
    "end": "2000370"
  },
  {
    "text": "you might see the slowness\nin one of the functions that get-- that word frequencies\nfrom file called.",
    "start": "2000370",
    "end": "2007930"
  },
  {
    "text": "So the cumulative time\nfor this is really big, but the total time-- the\ntime that's spent inside it--",
    "start": "2007930",
    "end": "2015140"
  },
  {
    "text": "is not that bad. Instead if you\nlook at total time, you'll see that the worst\nfunction is-- surprise,",
    "start": "2015140",
    "end": "2021520"
  },
  {
    "text": "surprise-- get words\nfrom line list. So 5 lines to look at--\nhey, there's a plus there.",
    "start": "2021520",
    "end": "2028150"
  },
  {
    "text": "I remember from lecture\nthat plus copies over lists, and it's kind of slow, so maybe\nI should use something else.",
    "start": "2028150",
    "end": "2034700"
  },
  {
    "text": "Does d remember what\nelse we should use? We talked about that\nlast recitation.",
    "start": "2034700",
    "end": "2040289"
  },
  {
    "text": "Extend. Document distance 2 . The only difference between\nit an document distance 1",
    "start": "2040290",
    "end": "2046580"
  },
  {
    "text": "is get words from\nline list, line 5. That plus turned into an extend.",
    "start": "2046580",
    "end": "2052579"
  },
  {
    "text": "One character turned to six,\nso about eight keystrokes, 30% runtime improvement.",
    "start": "2052580",
    "end": "2058440"
  },
  {
    "text": "Very good return on investment. Everything else is\ngoing to be harder.",
    "start": "2058440",
    "end": "2064530"
  },
  {
    "text": "So let's look at that line,\nbecause that line dominated the running time of get\nwords from line list.",
    "start": "2064530",
    "end": "2069770"
  },
  {
    "text": "And think what's, then,\nyour running time for it now that I have extend? ",
    "start": "2069770",
    "end": "2105440"
  },
  {
    "text": "Does anyone remember what get\nwords from line list does? ",
    "start": "2105440",
    "end": "2116130"
  },
  {
    "text": "AUDIENCE: It gets the\nwords out of the document. PROFESSOR: OK . It gets the word\nout of the document.",
    "start": "2116130",
    "end": "2122109"
  },
  {
    "text": "So it reads a document that\nlooks like a regular text file, and it gets this out of it.",
    "start": "2122110",
    "end": "2130240"
  },
  {
    "text": "The way it does that is\nit goes through each line, reads the line as a string,\nbreaks up the string",
    "start": "2130240",
    "end": "2136640"
  },
  {
    "text": "into a list of words,\nand then combines all those lists\nof words together.",
    "start": "2136640",
    "end": "2142240"
  },
  {
    "text": "Get words from string,\nline 4, returns the number of words in a line. Sorry, the list of words\nin the line, and then",
    "start": "2142240",
    "end": "2149030"
  },
  {
    "text": "extend combines\nthe lists together. Let's add some constants\nthat we had last time.",
    "start": "2149030",
    "end": "2156140"
  },
  {
    "text": "I think we had that K is the\nnumber of words per line.",
    "start": "2156140",
    "end": "2168220"
  },
  {
    "text": "And Z is the number\nof total lines.",
    "start": "2168220",
    "end": "2176849"
  },
  {
    "text": "So this K is actually-- W\nover Z. No, I don't like that.",
    "start": "2176850",
    "end": "2189492"
  },
  {
    "text": "That's work.  So Z is K W over\nK. And we argued",
    "start": "2189492",
    "end": "2203730"
  },
  {
    "text": "that we're not going\nto talk about K too much, because a document\nneeds to fit on a screen or needs to fit on\na piece of paper.",
    "start": "2203730",
    "end": "2210820"
  },
  {
    "text": "So the line length has\nto be finite, right? Otherwise, if I have a document\nthat has 10,000 character",
    "start": "2210820",
    "end": "2216069"
  },
  {
    "text": "lines, I can't even\nwrite it on this board. Even though it's really long. So K, the number of words in\na line, is going to be finite.",
    "start": "2216069",
    "end": "2223300"
  },
  {
    "text": "But we'll need it\nfor this analysis. So line 4 returns a list\nwith the words on a line.",
    "start": "2223300",
    "end": "2230650"
  },
  {
    "text": "How many elements in that list? ",
    "start": "2230650",
    "end": "2239010"
  },
  {
    "text": "This returns a list\nwith how many elements? ",
    "start": "2239010",
    "end": "2248408"
  },
  {
    "text": "AUDIENCE: Could K\n[INAUDIBLE] words on line. PROFESSOR: So even if\nI ask easy questions, you guys have to answer.",
    "start": "2248408",
    "end": "2254249"
  },
  {
    "text": "Because otherwise I'll\nstall until you do. So 4 gives me a list\nwith K elements, and 5 appends that small\nlist to the big list of words",
    "start": "2254249",
    "end": "2263060"
  },
  {
    "text": "in the entire document. Before I used plus and\nthat did something bad. Now I'm using extend.",
    "start": "2263060",
    "end": "2268460"
  },
  {
    "text": "What's the cost of\none extend called? AUDIENCE: Constant?",
    "start": "2268460",
    "end": "2274706"
  },
  {
    "text": "Order of K? PROFESSOR: I want to know\nyour Python implementation. ",
    "start": "2274706",
    "end": "2282288"
  },
  {
    "text": "AUDIENCE: If Python did\nit like a linked list , like doubly linked lists,\ncould be order constant?",
    "start": "2282288",
    "end": "2288477"
  },
  {
    "text": "PROFESSOR: I like your question. So if Python lists were\nactually linked lists--",
    "start": "2288477",
    "end": "2293720"
  },
  {
    "text": "so if the name\nwasn't confusing-- then yes, merging two\nlists would be constant. But then accessing one element\nin the middle of a list",
    "start": "2293720",
    "end": "2301520"
  },
  {
    "text": "would not be constant anymore. Say I want to access\nelement number 200 in a list of\n10,000 elements.",
    "start": "2301520",
    "end": "2309160"
  },
  {
    "text": "I have to go through\n200 elements. We didn't do linked\nlists when we ran it, so don't worry about it. So they decided that it's\nless confusing to have",
    "start": "2309160",
    "end": "2316230"
  },
  {
    "text": "lists actually be arrays. So Python lists, array in CLRS.",
    "start": "2316230",
    "end": "2322500"
  },
  {
    "text": " AUDIENCE: That can use\ntheir storage contiguously? PROFESSOR: Yep.",
    "start": "2322500",
    "end": "2328200"
  },
  {
    "text": "AUDIENCE: So when you copy,\nwhy can't you copy a block? Why do you have to\naccess each other? Does that make sense?",
    "start": "2328200",
    "end": "2334720"
  },
  {
    "text": "PROFESSOR: So, you\ncan copy a block, but in order to copy\na block, you still have to move everything.",
    "start": "2334720",
    "end": "2340270"
  },
  {
    "text": "So if your block\nis 10,000 elements, you still have to move 10,000\nbytes times element size.",
    "start": "2340270",
    "end": "2348370"
  },
  {
    "text": "And the CPU works on 4 bytes\nat a time or 8 bytes at a time. ",
    "start": "2348370",
    "end": "2353990"
  },
  {
    "text": "OK. But this is the\nright kind of thing to be thinking about when\nyou're doing the cost model. And this is what you\nwant to have in your head",
    "start": "2353990",
    "end": "2359299"
  },
  {
    "text": "when you're writing Python. So, good. I like your question. I wanted to say\nthat at some point,",
    "start": "2359300",
    "end": "2364950"
  },
  {
    "text": "but I didn't get\nthe occasion yet. Lists in Python are\nnot lists in CLRS. ",
    "start": "2364950",
    "end": "2370561"
  },
  {
    "text": "OK. So with that long\nexplanation, an extend is a list-- is a sequence\nof appends, right?",
    "start": "2370561",
    "end": "2377590"
  },
  {
    "text": "If you have two\nlists and you want to extend the first\nlist to the second list, extend basically goes through\neach element in the second list",
    "start": "2377590",
    "end": "2384640"
  },
  {
    "text": "and calls append\non the first list. The list is length K, the\nsecond list is length K,",
    "start": "2384640",
    "end": "2390380"
  },
  {
    "text": "so K appends are\ngoing to happen. And append is constant time. Total cost, K.",
    "start": "2390380",
    "end": "2395910"
  },
  {
    "text": "Now many times does line 5 run? ",
    "start": "2395910",
    "end": "2401227"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Very good. ",
    "start": "2401227",
    "end": "2407140"
  },
  {
    "text": "So what is the\ntotal running cost of the algorithm if this\nis the line that dominates?",
    "start": "2407140",
    "end": "2412470"
  },
  {
    "text": "I don't want to do\nevery other line, so I'll promise that this\nis the line that dominates. What is the total running time?",
    "start": "2412470",
    "end": "2419300"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: OK. Very good. K times L. And that is? ",
    "start": "2419300",
    "end": "2427529"
  },
  {
    "text": "Oh, K. So I shouldn't have\nsaid K times L, sorry.",
    "start": "2427530",
    "end": "2433160"
  },
  {
    "text": "L is not the number of lines. L is the number here, so\nZ is the number of lines.",
    "start": "2433160",
    "end": "2440250"
  },
  {
    "text": "So it's K times Z. Which\nmeans I'm using bad letters,",
    "start": "2440250",
    "end": "2445720"
  },
  {
    "text": "so please bear with me. We'll forget about\nthem in a minute. So K times Z equals?",
    "start": "2445720",
    "end": "2450830"
  },
  {
    "text": "AUDIENCE: W. PROFESSOR: W. So\nwhat do I write here?",
    "start": "2450830",
    "end": "2457660"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE].",
    "start": "2457660",
    "end": "2462910"
  },
  {
    "text": "PROFESSOR: OK. Good. Very good. What do I write here?",
    "start": "2462910",
    "end": "2468800"
  },
  {
    "text": "Word frequencies from file. AUDIENCE: W L. PROFESSOR: OK. ",
    "start": "2468800",
    "end": "2476460"
  },
  {
    "text": "What do I write here?  AUDIENCE: W 1.",
    "start": "2476460",
    "end": "2481990"
  },
  {
    "start": "2481990",
    "end": "2495150"
  },
  {
    "text": "AUDIENCE: We have to-- put L\n1 squared and L 2 squared back in. PROFESSOR: OK, do we?",
    "start": "2495150",
    "end": "2500160"
  },
  {
    "text": "Well, the-- No. W, you want to always be\nbigger than L. I hope.",
    "start": "2500160",
    "end": "2505535"
  },
  {
    "text": "PROFESSOR: Yep. So if I put it\nin, L 1 squared is L 1 L 1, which is\nsmaller than W 1 L 1.",
    "start": "2505535",
    "end": "2513569"
  },
  {
    "text": "But I have to think about\nit before doing that. I can't ignore this completely. ",
    "start": "2513570",
    "end": "2522240"
  },
  {
    "text": "So this is document distance 2. The asymptotic complexity\nimproved, the running time improved.",
    "start": "2522240",
    "end": "2527707"
  },
  {
    "start": "2527707",
    "end": "2534530"
  },
  {
    "text": "Next thing that happens\nto make this faster is-- I'm not giving you\nthe profiler output, but you have to take my word for\nit that the longest methods are",
    "start": "2534530",
    "end": "2543040"
  },
  {
    "text": "count frequency\nand inner product. So what I'm going\nto do first is I'm",
    "start": "2543040",
    "end": "2549770"
  },
  {
    "text": "going to make inner\nproduct faster. But in order to do\nthat, I have to make word frequencies\nfor file slower.",
    "start": "2549770",
    "end": "2556549"
  },
  {
    "text": "And that is because\nI happen to know an algorithm for inner product\nthat is a lot faster, if only",
    "start": "2556550",
    "end": "2564030"
  },
  {
    "text": "you can promise me that in this\nlist, the words are ordered. The words are sorted. ",
    "start": "2564030",
    "end": "2571210"
  },
  {
    "text": "So what happens in that list\n1 is, the moment I see a word,",
    "start": "2571210",
    "end": "2577000"
  },
  {
    "text": "if it's not in the list\nI add it at the end. So the words here show up\npretty much in the order that they show up in the file.",
    "start": "2577000",
    "end": "2583710"
  },
  {
    "text": "Well, if instead I\ncould have something that looks like-- what is it?",
    "start": "2583710",
    "end": "2591089"
  },
  {
    "text": "Fox. In. His. ",
    "start": "2591090",
    "end": "2596890"
  },
  {
    "text": "Hat is somewhere here. So if these words\nwould be in this order,",
    "start": "2596890",
    "end": "2602650"
  },
  {
    "text": "together with the\nword that I'm missing, then I can combine two lists. I can do an inner\nproduct a lot faster.",
    "start": "2602650",
    "end": "2611619"
  },
  {
    "text": "Let's see how that would work. And I'm already getting confused\nmy words, so let's do a trick.",
    "start": "2611620",
    "end": "2617359"
  },
  {
    "text": "Let's say that instead of\nwords, we'll use numbers. So instead of saying\n\"the,\" I'm going to say the is the 50th\nword in the dictionary.",
    "start": "2617360",
    "end": "2625060"
  },
  {
    "text": "So I'm going to use number 50. Because I want to write numbers. The numbers are\neasier to deal with.",
    "start": "2625060",
    "end": "2630940"
  },
  {
    "text": "So say the first\ndocument that I have-- the fox is in the hat-- as\nwords number 3, 4, 6, 8, and 9.",
    "start": "2630940",
    "end": "2639839"
  },
  {
    "text": "And they show up twice,\nonce, once, once. ",
    "start": "2639840",
    "end": "2646359"
  },
  {
    "text": "9, once. And say I'm trying to compute\nthe inner product of this",
    "start": "2646360",
    "end": "2657160"
  },
  {
    "text": "with a document that\nhas word number 2 showing up once, word number\n3 showing up once, word number",
    "start": "2657160",
    "end": "2663290"
  },
  {
    "text": "6 showing up once, word\nnumber 7 showing up once,",
    "start": "2663290",
    "end": "2668350"
  },
  {
    "text": "word number 8 showing up once. ",
    "start": "2668350",
    "end": "2673737"
  },
  {
    "text": "OK, the algorithm for inner\nproduct that we talked about last time was, go\nthrough each element in one",
    "start": "2673737",
    "end": "2679050"
  },
  {
    "text": "of the vectors, find an\nelement with the same word in the second vector,\nand if you can find it,",
    "start": "2679050",
    "end": "2685410"
  },
  {
    "text": "then take the number of\ntimes the words show up and multiply them. So here I have a 3, 2.",
    "start": "2685410",
    "end": "2690560"
  },
  {
    "text": "I would find this element\nhere that has 3, 1. I have these everywhere. ",
    "start": "2690560",
    "end": "2698030"
  },
  {
    "text": "And I take the 2 and the\n1 and I multiply them. So the 3s have to be the same,\nthen I think the 2 and the 1,",
    "start": "2698030",
    "end": "2703920"
  },
  {
    "text": "and I multiply them. And for all the elements\nwhere that's case, I add up the results\nof the multiplication.",
    "start": "2703920",
    "end": "2710430"
  },
  {
    "text": " So step one, go through\neach element in a vector.",
    "start": "2710430",
    "end": "2716930"
  },
  {
    "text": "That's not going to get\nfaster if this other vector is sorted, right? But the step of looking up the\nsecond element can be sped up.",
    "start": "2716930",
    "end": "2727740"
  },
  {
    "text": "The first and easiest way I\ncan speed this up is, hey, this is sorted. If I'm looking up three,\nwhy not do a binary search?",
    "start": "2727740",
    "end": "2737340"
  },
  {
    "text": "What would be the\ncost if I do that? So here I have L1 element,\nhere I have L2 elements.",
    "start": "2737340",
    "end": "2743670"
  },
  {
    "text": "What's the cost of doing\none binary search here? AUDIENCE: Log of L2?",
    "start": "2743670",
    "end": "2748940"
  },
  {
    "text": "PROFESSOR: OK. And how many times do\nI do a binary search?",
    "start": "2748940",
    "end": "2755201"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: So if I go\nthrough each element here and I do a binary search, which\nis a nice and easy algorithm",
    "start": "2755201",
    "end": "2762139"
  },
  {
    "text": "that I can explain\nin 10 seconds, I'm already faster than L1 L2. So it's worth sorting.",
    "start": "2762139",
    "end": "2768680"
  },
  {
    "text": "Now, the algorithm\nthat we use in class takes time proportional\nto L1 plus L2.",
    "start": "2768680",
    "end": "2775790"
  },
  {
    "text": "So that's even\ntrickier, and it's going to take a bit\nmore time to explain. ",
    "start": "2775790",
    "end": "2781970"
  },
  {
    "text": "Does-- did anyone understand\nthe algorithm for class and wants to help me explain it? ",
    "start": "2781970",
    "end": "2790579"
  },
  {
    "text": "Didn't think so. OK. So idea is that both of\nthese vectors are sorted.",
    "start": "2790580",
    "end": "2799230"
  },
  {
    "text": "So if I have a 3 here and I\nfound my 3 here, next time when",
    "start": "2799230",
    "end": "2806390"
  },
  {
    "text": "I get to 4, I know\nfor sure that 4 is not going to be anywhere here,\nbecause this vector is sorted.",
    "start": "2806390",
    "end": "2814370"
  },
  {
    "text": "Say I couldn't find\n4, then I go to 6. If 6 is here, when I\nhave to look for 8,",
    "start": "2814370",
    "end": "2820850"
  },
  {
    "text": "I know for sure that 8 is not\ngoing to be anywhere up here. ",
    "start": "2820850",
    "end": "2827210"
  },
  {
    "text": "So what I do is, I have a\npointer here that remembers, where's the last element\nthat I have seen?",
    "start": "2827210",
    "end": "2835684"
  },
  {
    "text": "Does this make sense to people?  So when I start here\nand I look at 3,",
    "start": "2835684",
    "end": "2842500"
  },
  {
    "text": "I have a pointer here that says,\nI didn't see anything here. I look at 2, it's not 3.",
    "start": "2842500",
    "end": "2848170"
  },
  {
    "text": "It's smaller. I look at 3. I found it, good. I do my product. Then I go look for the\nnext element here, 4.",
    "start": "2848170",
    "end": "2855609"
  },
  {
    "text": "I look at 6. 6 is bigger than 4. So I know for sure that nothing\nbelow it is going to be 4.",
    "start": "2855610",
    "end": "2862980"
  },
  {
    "text": "So I can stop right here\nand keep my pointer here. Then I go to 6 here. And I look here.",
    "start": "2862980",
    "end": "2868580"
  },
  {
    "text": "Where did I stop? I stop here. This element matches this. I do my product.",
    "start": "2868580",
    "end": "2873750"
  },
  {
    "text": "Keep it in. Now I go to 8 here. I was at 6.",
    "start": "2873750",
    "end": "2879310"
  },
  {
    "text": "6 is smaller than 8. 7 is smaller than 8. 8 is equal to 8.",
    "start": "2879310",
    "end": "2884420"
  },
  {
    "text": "I found something. Sweet. I do a product. And then I stop.",
    "start": "2884420",
    "end": "2889730"
  },
  {
    "text": "And I look at the next element. I know for sure that nothing\nhere is going to be 9,",
    "start": "2889730",
    "end": "2895830"
  },
  {
    "text": "so I can keep looking down. I hit the end of my list. OK.",
    "start": "2895830",
    "end": "2901309"
  },
  {
    "text": "Whatever I have down here--\nit's going 9, 10, 11, 12-- is not going to be in this\nlist, because it was sorted.",
    "start": "2901310",
    "end": "2907360"
  },
  {
    "text": "So I can stop. AUDIENCE: How do\nyou keep going--",
    "start": "2907360",
    "end": "2914340"
  },
  {
    "text": "What algorithm so you use\nto keep looking down on L2? PROFESSOR: Plus 1. AUDIENCE: So what if-- PROFESSOR: I keep going down.",
    "start": "2914340",
    "end": "2920328"
  },
  {
    "text": "AUDIENCE: What if the left\nside was 3, 4, 6, 9243?",
    "start": "2920328",
    "end": "2926359"
  },
  {
    "text": "PROFESSOR: 9,000, what? AUDIENCE: Just a big number. AUDIENCE: Right. Then you have to\nincrement by 1 each time--",
    "start": "2926360",
    "end": "2932713"
  },
  {
    "text": "PROFESSOR: So I'm\nnot incrementing the number I'm looking at. Here, I looked at 6. Then I'm looking for 8.",
    "start": "2932714",
    "end": "2939609"
  },
  {
    "text": "And after I found 8,\nI'm looking for 19,000. So I'm going to go down,\neither until I find 90,000",
    "start": "2939610",
    "end": "2946800"
  },
  {
    "text": "or until I stop. AUDIENCE: So are you going\nto go down one at a time, PROFESSOR: Yep. AUDIENCE: --why not\ndo a binary search?",
    "start": "2946800",
    "end": "2953840"
  },
  {
    "text": "PROFESSOR: Because if\nI do a binary search, the analysis that says it's\nfast is not going to work.",
    "start": "2953840",
    "end": "2960550"
  },
  {
    "text": "It turns out that this gives\nme the optimal running time. If I do a binary search, suppose\nI have a list that's like this.",
    "start": "2960550",
    "end": "2968830"
  },
  {
    "text": "1, 2, 3, 4, 5, all the\nway down to 10,000. Ugh, I can't write.",
    "start": "2968830",
    "end": "2976750"
  },
  {
    "text": "And I have another list\nthat's like this- 1, 2, 3, 4, all the way down to 10,000.",
    "start": "2976750",
    "end": "2982799"
  },
  {
    "text": "1, 1. I do a binary search,\ntakes log N. I look at 2.",
    "start": "2982800",
    "end": "2989830"
  },
  {
    "text": "I do a binary search, takes\nalmost log N. I look at 3, do a binary search, takes\nalmost log N. So on, so forth.",
    "start": "2989830",
    "end": "2996352"
  },
  {
    "text": " So this is-- AUDIENCE: But if your\nleft list had been",
    "start": "2996352",
    "end": "3003214"
  },
  {
    "text": "PROFESSOR: Log N plus log N. AUDIENCE: --10,000. PROFESSOR: Yeah. AUDIENCE: You'd\nhave taken N time.",
    "start": "3003214",
    "end": "3009770"
  },
  {
    "text": "PROFESSOR: Yes. Well, this algorithm\ntakes N time, even if I have to\nlist like this.",
    "start": "3009770",
    "end": "3015800"
  },
  {
    "text": "It takes 10,000\nplus 10,000 time. Whereas this algorithm will\ntake time that's actually",
    "start": "3015800",
    "end": "3021700"
  },
  {
    "text": "proportional to\n10,000 log 10,000.",
    "start": "3021700",
    "end": "3029910"
  },
  {
    "text": "You believe me. So, a way to look at this\nis to do bounds and say, for the elements\n1 through 5,000,",
    "start": "3029910",
    "end": "3037140"
  },
  {
    "text": "it's going to do a binary search\nfor more than 5,000 elements. So, the time-- the running\ntime is definitely bigger",
    "start": "3037140",
    "end": "3044170"
  },
  {
    "text": "than N over 2 log N over 2. ",
    "start": "3044170",
    "end": "3051840"
  },
  {
    "text": "Constant. This becomes log N\nminus 1 and log N.",
    "start": "3051840",
    "end": "3060710"
  },
  {
    "text": "That is a good question. I wondered about that the first\ntime I saw merge-sort too. And I was thinking,\nhey, I'm going",
    "start": "3060710",
    "end": "3065810"
  },
  {
    "text": "to do a binary search\nhere because it's faster, and I'm going to make a faster\nalgorithm than anyone has ever seen.",
    "start": "3065810",
    "end": "3071390"
  },
  {
    "text": "Well, if you do the\nanalysis, not so much. But you need to think\nabout it, and you need to know why that's\ntrue or that's not true.",
    "start": "3071390",
    "end": "3076660"
  },
  {
    "text": "So I like your question. Thank you. So now let's get down so\nthe plain old merge-sort",
    "start": "3076660",
    "end": "3082519"
  },
  {
    "text": "that everyone-- sorry,\nmerge that everyone knows. So if we go through\nthese one by one,",
    "start": "3082520",
    "end": "3090610"
  },
  {
    "text": "how many times am I going to\nbe advancing this pointer? In total? AUDIENCE: L2?",
    "start": "3090610",
    "end": "3096920"
  },
  {
    "text": "PROFESSOR: L2 times. So this pointer can\nonly go down, right?",
    "start": "3096920",
    "end": "3102539"
  },
  {
    "text": "So worst case is going\nto go down L2 times. And then I'm done\nwith the list, return.",
    "start": "3102540",
    "end": "3108549"
  },
  {
    "text": "How many elements am I\ngoing to look through? So how many times does this\npointer going to advance? AUDIENCE: L1?",
    "start": "3108550",
    "end": "3113842"
  },
  {
    "text": " PROFESSOR: This one.",
    "start": "3113842",
    "end": "3119079"
  },
  {
    "text": "AUDIENCE: But I thought, like-- AUDIENCE: Then you get\nextra ones in between. PROFESSOR: What if\nL2 is bigger than L1?",
    "start": "3119080",
    "end": "3125560"
  },
  {
    "text": "What if-- AUDIENCE: Oh, right. OK, never mind. The reason I said\nL2 was because-- PROFESSOR: You're thinking after\nI'm going through this list,",
    "start": "3125560",
    "end": "3133040"
  },
  {
    "text": "I'm out, right? AUDIENCE: Right,\nthat's what I thought. PROFESSOR: So, your answer\nworks if this list, say, has 10 elements and this has 10,000.",
    "start": "3133040",
    "end": "3139619"
  },
  {
    "text": "And I go through this\none really quickly. But if this list has 10 elements\nand this list has 10,000,",
    "start": "3139620",
    "end": "3145697"
  },
  {
    "text": "and they both start\nwith 1 through 10, I have to say a 1 because\nthat's a better bound.",
    "start": "3145697",
    "end": "3151660"
  },
  {
    "text": "So I have to say this. AUDIENCE: Could you\nsay the opposite value of the difference\nbetween the two of them?",
    "start": "3151660",
    "end": "3157450"
  },
  {
    "text": "Because if you're going\nto stop at 1 has 10 and the other one has\n10,000, and let's say",
    "start": "3157450",
    "end": "3163120"
  },
  {
    "text": "that only the first\nten are actually equal, then you're going to go\nthrough that list, find all 10,",
    "start": "3163120",
    "end": "3168870"
  },
  {
    "text": "and you stop. That would be 9,000-- PROFESSOR: I could say about\nthat if I'm looking at one case, but the magic trick\nis-- let's-- we're looking",
    "start": "3168870",
    "end": "3176160"
  },
  {
    "text": "at the worst case. So worst case, if\nI have 10 elements, they'll be all the way\ndown in the other list.",
    "start": "3176160",
    "end": "3181760"
  },
  {
    "text": "Or they won't be there at all. And I have to go down\nthrough all the list. AUDIENCE: OK.",
    "start": "3181760",
    "end": "3187670"
  },
  {
    "text": "PROFESSOR: So worst\ncase, L1 plus L2. ",
    "start": "3187670",
    "end": "3195000"
  },
  {
    "text": "Let me see if I\nhave any time left. Nope. So, what I would like you to do\nis go through insertion sort.",
    "start": "3195000",
    "end": "3205050"
  },
  {
    "text": "Insertion sort\nmatches the textbook. Look at the definition in the\ntextbook, look at the code,",
    "start": "3205050",
    "end": "3210540"
  },
  {
    "text": "convince yourself it's the same. Look at the running\ntime, convince yourself it's N squared. Then look at inner product\nand convince yourself",
    "start": "3210540",
    "end": "3218880"
  },
  {
    "text": "that this is what it does. Go through this line by\nline, see where they match,",
    "start": "3218880",
    "end": "3224820"
  },
  {
    "text": "put the cost on. Make sure that the\ncost is L1 plus L2. And last, go through\nmerge-sort and notice",
    "start": "3224820",
    "end": "3232810"
  },
  {
    "text": "that merge in [INAUDIBLE]\n6 is exactly the same as inner product.",
    "start": "3232810",
    "end": "3237880"
  },
  {
    "text": "So this pointer\nmagic that I did here is exactly what's\nhappening inside merge. And understand merge-sort.",
    "start": "3237880",
    "end": "3243569"
  },
  {
    "text": "Look at the textbook,\nlook at the notes, and see how they match. OK.",
    "start": "3243570",
    "end": "3248870"
  },
  {
    "text": "Thanks, guys.",
    "start": "3248870",
    "end": "3250720"
  }
]