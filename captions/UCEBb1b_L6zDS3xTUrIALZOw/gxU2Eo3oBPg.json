[
  {
    "start": "0",
    "end": "0"
  },
  {
    "text": "We are going to compare the behavior of 3\ndifferent cache configurations on a benchmark",
    "start": "350",
    "end": "5979"
  },
  {
    "text": "program to better understand the impact of\nthe cache configuration on the performance",
    "start": "5979",
    "end": "11450"
  },
  {
    "text": "of the benchmark.",
    "start": "11450",
    "end": "13490"
  },
  {
    "text": "The first cache we will consider is a 64-line\ndirect mapped cache.",
    "start": "13490",
    "end": "18950"
  },
  {
    "text": "The second is a 2-way set associative cache\nthat uses the LRU, or least recently used,",
    "start": "18950",
    "end": "25320"
  },
  {
    "text": "replacement strategy, and has a total of 64\nlines.",
    "start": "25320",
    "end": "29840"
  },
  {
    "text": "The third is a 4-way set associative cache\nthat uses the LRU replacement strategy, and",
    "start": "29840",
    "end": "36280"
  },
  {
    "text": "also has a total of 64 lines.",
    "start": "36280",
    "end": "39979"
  },
  {
    "text": "Note that all three caches have the same capacity\nin that they can store a total of 64 words",
    "start": "39979",
    "end": "45910"
  },
  {
    "text": "of data.",
    "start": "45910",
    "end": "47600"
  },
  {
    "text": "In a direct mapped cache any particular memory\naddress maps to exactly one line in the cache.",
    "start": "47600",
    "end": "54760"
  },
  {
    "text": "Let's assume that our data is 32 bits, or\n4 bytes wide.",
    "start": "54760",
    "end": "59248"
  },
  {
    "text": "This means that consecutive addresses are\n4 bytes apart, so we treat the bottom two",
    "start": "59249",
    "end": "64500"
  },
  {
    "text": "address bits as always being 00 so that our\naddress is on a data word boundary.",
    "start": "64500",
    "end": "71390"
  },
  {
    "text": "Next, we want to determine which cache line\nthis particular address maps to.",
    "start": "71390",
    "end": "77320"
  },
  {
    "text": "Since there are 64 lines in this cache, we\nneed 6 bits to select one of the 64 lines.",
    "start": "77320",
    "end": "84409"
  },
  {
    "text": "These 6 bits are called the index.",
    "start": "84409",
    "end": "87259"
  },
  {
    "text": "In this example, the index is 000011, so this\nparticular address maps to line 3 of the cache.",
    "start": "87260",
    "end": "96860"
  },
  {
    "text": "The data that gets stored in the cache is\nthe tag portion of the address of the line",
    "start": "96860",
    "end": "102070"
  },
  {
    "text": "plus the 32 bits of data.",
    "start": "102070",
    "end": "105130"
  },
  {
    "text": "The tag is used for comparison when checking\nif a particular address is in the cache or",
    "start": "105130",
    "end": "110450"
  },
  {
    "text": "not.",
    "start": "110450",
    "end": "111450"
  },
  {
    "text": "It uniquely identifies the particular memory\naddress.",
    "start": "111450",
    "end": "115710"
  },
  {
    "text": "In addition, each cache line has a valid bit\nthat lets you know whether the data in the",
    "start": "115710",
    "end": "120540"
  },
  {
    "text": "cache is currently valid or not.",
    "start": "120540",
    "end": "123640"
  },
  {
    "text": "This is important upon startup because without\nthis bit there is no way to know whether the",
    "start": "123640",
    "end": "128630"
  },
  {
    "text": "data in the cache is garbage or real data.",
    "start": "128630",
    "end": "133150"
  },
  {
    "start": "133000",
    "end": "133000"
  },
  {
    "text": "In a 2-way set associative cache, the cache\nis divided into 2 sets each with half the",
    "start": "133150",
    "end": "138829"
  },
  {
    "text": "number of lines.",
    "start": "138830",
    "end": "140800"
  },
  {
    "text": "So we have two sets with 32 lines each.",
    "start": "140800",
    "end": "144360"
  },
  {
    "text": "Since there are only 32 lines, we now only\nneed a 5 bit index to select the line.",
    "start": "144360",
    "end": "150320"
  },
  {
    "text": "However, any given index can map to two distinct\nlocations, one in each set.",
    "start": "150320",
    "end": "156660"
  },
  {
    "text": "This also means that when the tag comparisons\nare done, two comparisons are required, one",
    "start": "156660",
    "end": "162170"
  },
  {
    "text": "per set.",
    "start": "162170",
    "end": "163880"
  },
  {
    "text": "In a 4-way set associative cache, the cache\nis divided into 4 sets each with 16 lines.",
    "start": "163880",
    "end": "170480"
  },
  {
    "text": "The width of the index is now 4 bits to select\nthe cache line.",
    "start": "170480",
    "end": "174730"
  },
  {
    "text": "Here, selecting a line identifies one of 4\nwords as possible locations for reading or",
    "start": "174730",
    "end": "180739"
  },
  {
    "text": "writing the associated data.",
    "start": "180740",
    "end": "184210"
  },
  {
    "text": "This also implies that 4 tags need to be compared\nwhen trying to read from the cache to determine",
    "start": "184210",
    "end": "190190"
  },
  {
    "text": "if the desired address is stored in the cache\nor not.",
    "start": "190190",
    "end": "195590"
  },
  {
    "text": "The test program begins by defining a few\nconstants, J, A, B, and N.",
    "start": "195590",
    "end": "203230"
  },
  {
    "text": "J specifies the address where the program\nlives.",
    "start": "203230",
    "end": "206890"
  },
  {
    "text": "A is the starting address of data region 1,\nand B is the starting address of data region",
    "start": "206890",
    "end": "213450"
  },
  {
    "text": "2.",
    "start": "213450",
    "end": "214450"
  },
  {
    "text": "Finally, N specifies the size of the data\nregions.",
    "start": "214450",
    "end": "219010"
  },
  {
    "text": "Since one word consists of 4 bytes, 16 bytes\nof data mean that there are 4 data elements",
    "start": "219010",
    "end": "224849"
  },
  {
    "text": "per region.",
    "start": "224850",
    "end": "227340"
  },
  {
    "text": "Next the assembler is told that the beginning\nof the program is at address 0x1000.",
    "start": "227340",
    "end": "235310"
  },
  {
    "text": "The green rectangle identifies the outer loop,\nand the yellow rectangle identifies the inner",
    "start": "235310",
    "end": "240700"
  },
  {
    "text": "loop of the code.",
    "start": "240700",
    "end": "242610"
  },
  {
    "text": "Before entering the outer loop, a loop counter,\nwhich is stored in register R6 is initialized",
    "start": "242610",
    "end": "248590"
  },
  {
    "text": "to 1,000.",
    "start": "248590",
    "end": "250930"
  },
  {
    "text": "Then each time through the outer loop, R6\nis decremented by 1 and the loop is repeated",
    "start": "250930",
    "end": "256539"
  },
  {
    "text": "as long as R6 is not equal to 0.",
    "start": "256540",
    "end": "259390"
  },
  {
    "text": "The outer loop also resets R0 to N each time\nthrough the loop.",
    "start": "259390",
    "end": "265180"
  },
  {
    "text": "R0 is used to hold the desired array offset.",
    "start": "265180",
    "end": "269680"
  },
  {
    "text": "Since the last element of the array is stored\nat location N – 4, the first step of the",
    "start": "269680",
    "end": "275460"
  },
  {
    "text": "inner loop, is to decrement R0 by 4.",
    "start": "275460",
    "end": "279080"
  },
  {
    "text": "R1 is then loaded with the value at address\nA + N – 4 which is the address of A[3] because",
    "start": "279080",
    "end": "287681"
  },
  {
    "text": "array indeces begin at 0.",
    "start": "287681",
    "end": "290900"
  },
  {
    "text": "R2 is loaded with B[3].",
    "start": "290900",
    "end": "294650"
  },
  {
    "text": "As long as R0 is not equal to 0, the loop\nrepeats itself, each time accessing the previous",
    "start": "294650",
    "end": "301210"
  },
  {
    "text": "element of each array until the first element\n(index 0) is loaded.",
    "start": "301210",
    "end": "307600"
  },
  {
    "text": "Then the outer loop decrements R6 and repeats\nthe entire thing 1000 times.",
    "start": "307600",
    "end": "312980"
  },
  {
    "text": "Now that we understand the configuration of\nour three caches and the behavior of our test",
    "start": "312980",
    "end": "319870"
  },
  {
    "start": "314000",
    "end": "314000"
  },
  {
    "text": "benchmark, we can begin comparing the behavior\nof this benchmark on the three caches.",
    "start": "319870",
    "end": "326280"
  },
  {
    "text": "The first thing we want to ask ourselves is\nwhich of the three cache configurations gets",
    "start": "326280",
    "end": "331430"
  },
  {
    "text": "the highest hit ratio.",
    "start": "331430",
    "end": "334130"
  },
  {
    "text": "Here we are not asked to calculate an actual\nhit ratio, instead we just need to realize",
    "start": "334130",
    "end": "340260"
  },
  {
    "text": "that there are 3 distinct regions of data\nin this benchmark.",
    "start": "340260",
    "end": "344260"
  },
  {
    "text": "The first holds the instructions, the second\nholds array A, and the third holds array B.",
    "start": "344260",
    "end": "351910"
  },
  {
    "text": "If we think about the addresses of each of\nthese regions in memory, we see that the first",
    "start": "351910",
    "end": "356940"
  },
  {
    "text": "instruction is at address 0x1000.",
    "start": "356940",
    "end": "361020"
  },
  {
    "text": "This will result in an index of 0 regardless\nof which cache you consider, so for all three",
    "start": "361020",
    "end": "367379"
  },
  {
    "text": "caches the first instruction would map to\nthe first line of the cache.",
    "start": "367380",
    "end": "373010"
  },
  {
    "text": "Similarly the first element of arrays A and\nB are at address 0x2000 and 0x3000.",
    "start": "373010",
    "end": "382100"
  },
  {
    "text": "These addresses will also result in an index\nof 0 regardless of which of the three caches",
    "start": "382100",
    "end": "387410"
  },
  {
    "text": "you consider.",
    "start": "387410",
    "end": "389450"
  },
  {
    "text": "So we see that the 1st CMOVE, A[0], and B[0]\nwould all map to line 0 of the cache.",
    "start": "389450",
    "end": "397450"
  },
  {
    "text": "Similarly, the 2nd CMOVE whose address is\n0x1004 would map to line 1 of the cache as",
    "start": "397450",
    "end": "406360"
  },
  {
    "text": "would array elements A[1] and B[1].",
    "start": "406360",
    "end": "411918"
  },
  {
    "text": "This tells us that if we use the direct mapped\ncache, or a 2-way set associative cache, then",
    "start": "411919",
    "end": "417440"
  },
  {
    "text": "we will have cache collisions between the\ninstructions, and the array elements.",
    "start": "417440",
    "end": "422639"
  },
  {
    "text": "Collisions in the cache imply cache misses\nas we replace one piece of data with another",
    "start": "422639",
    "end": "427790"
  },
  {
    "text": "in the cache.",
    "start": "427790",
    "end": "429330"
  },
  {
    "text": "However, if we use a 4-way set associative\ncache then each region of memory can go in",
    "start": "429330",
    "end": "435448"
  },
  {
    "text": "a distinct set in the cache thus avoiding\ncollisions and resulting in 100% hit rate",
    "start": "435449",
    "end": "441470"
  },
  {
    "text": "after the first time through the loop.",
    "start": "441470",
    "end": "444610"
  },
  {
    "text": "Note that the first time through the loop\neach instruction and data access will result",
    "start": "444610",
    "end": "449229"
  },
  {
    "text": "in a cache miss because the data needs to\ninitially be brought into the cache.",
    "start": "449230",
    "end": "454130"
  },
  {
    "text": "But when the loop is repeated, the data is\nalready there and results in cache hits.",
    "start": "454130",
    "end": "461490"
  },
  {
    "start": "461000",
    "end": "461000"
  },
  {
    "text": "Now suppose that we make a minor modification\nto our test program by changing B from 0x3000",
    "start": "461490",
    "end": "469960"
  },
  {
    "text": "to 0x2000.",
    "start": "469960",
    "end": "472530"
  },
  {
    "text": "This means that array A and array B now refer\nto same locations in memory.",
    "start": "472530",
    "end": "478790"
  },
  {
    "text": "We want to determine, which of the cache's\nhit rate will show a noticeable improvement",
    "start": "478790",
    "end": "484430"
  },
  {
    "text": "as a result of this change.",
    "start": "484430",
    "end": "486979"
  },
  {
    "text": "The difference between our original benchmark\nand this modified one is that we now have",
    "start": "486980",
    "end": "492290"
  },
  {
    "text": "two distinct regions of memory to access,\none for the instructions, and one for the",
    "start": "492290",
    "end": "497560"
  },
  {
    "text": "data.",
    "start": "497560",
    "end": "498930"
  },
  {
    "text": "This means that the 2-way set associative\ncache will no longer experience collisions",
    "start": "498930",
    "end": "504020"
  },
  {
    "text": "in its cache, so its hit rate will be significantly\nbetter than with the original benchmark.",
    "start": "504020",
    "end": "511440"
  },
  {
    "text": "Now suppose that we change our benchmark once\nagain, this time making J, A and B all equal",
    "start": "511440",
    "end": "517870"
  },
  {
    "text": "to 0, and changing N to be 64.",
    "start": "517870",
    "end": "522209"
  },
  {
    "text": "This means that we now have 16 elements in\nour arrays instead of 4.",
    "start": "522209",
    "end": "527649"
  },
  {
    "text": "It also means that the array values that we\nare loading for arrays A and B are actually",
    "start": "527649",
    "end": "533199"
  },
  {
    "text": "the same as the instructions of the program.",
    "start": "533199",
    "end": "536959"
  },
  {
    "text": "Another way of thinking about this is that\nwe now only have one distinct region of memory",
    "start": "536960",
    "end": "541540"
  },
  {
    "text": "being accessed.",
    "start": "541540",
    "end": "542889"
  },
  {
    "text": "What we want to determine now, is the total\nnumber of cache misses that will occur for",
    "start": "542889",
    "end": "548339"
  },
  {
    "text": "each of the cache configurations.",
    "start": "548339",
    "end": "552600"
  },
  {
    "start": "552000",
    "end": "552000"
  },
  {
    "text": "Let's begin by considering the direct mapped\ncache.",
    "start": "552600",
    "end": "556269"
  },
  {
    "text": "In the direct mapped cache, we would want\nto first access the first CMOVE instruction.",
    "start": "556269",
    "end": "561808"
  },
  {
    "text": "Since this instruction is not yet in the cache,\nour first access is a cache miss.",
    "start": "561809",
    "end": "567850"
  },
  {
    "text": "We now bring the binary equivalent of this\ninstruction into line 0 of our cache.",
    "start": "567850",
    "end": "573480"
  },
  {
    "text": "Next, we want to access the second CMOVE instruction.",
    "start": "573480",
    "end": "578839"
  },
  {
    "text": "Once again the instruction is not in our cache\nso we get another cache miss.",
    "start": "578839",
    "end": "584889"
  },
  {
    "text": "This results in our loading the 2nd CMOVE\ninstruction to line 1 of our cache.",
    "start": "584889",
    "end": "591079"
  },
  {
    "text": "We continue in the same manner with the SUBC\ninstruction and the first LD instruction.",
    "start": "591079",
    "end": "598290"
  },
  {
    "text": "Again we get cache misses for each of those\ninstructions and that in turn causes us to",
    "start": "598290",
    "end": "603300"
  },
  {
    "text": "load those instructions into our cache.",
    "start": "603300",
    "end": "606240"
  },
  {
    "text": "Now, we are ready to execute our first load\noperation.",
    "start": "606240",
    "end": "611128"
  },
  {
    "text": "This operation wants to load A[15] into R1.",
    "start": "611129",
    "end": "615949"
  },
  {
    "text": "Because the beginning of array A is at address\n0, then A[15] maps to line 15 of our cache.",
    "start": "615949",
    "end": "623980"
  },
  {
    "text": "Since we have not yet loaded anything into\nline 15 of our cache, this means that our",
    "start": "623980",
    "end": "628949"
  },
  {
    "text": "first data access is a miss.",
    "start": "628949",
    "end": "632378"
  },
  {
    "text": "We continue with the second load instruction.",
    "start": "632379",
    "end": "635149"
  },
  {
    "text": "This instruction is not yet in the cache,\nso we get a cache miss and then load it into",
    "start": "635149",
    "end": "640139"
  },
  {
    "text": "line 4 of our cache.",
    "start": "640139",
    "end": "642329"
  },
  {
    "text": "We then try to access B[15].",
    "start": "642330",
    "end": "645279"
  },
  {
    "text": "B[15] corresponds to the same piece of data\nas A[15], so this data access is already in",
    "start": "645279",
    "end": "652709"
  },
  {
    "text": "the cache thus resulting in a data hit for\nB[15].",
    "start": "652709",
    "end": "657950"
  },
  {
    "text": "So far we have gotten 5 instruction misses,\n1 data miss and 1 data hit.",
    "start": "657950",
    "end": "664519"
  },
  {
    "text": "Next we need to access the BNE instruction.",
    "start": "664519",
    "end": "669188"
  },
  {
    "text": "Once again we get a cache miss which results\nin loading the BNE instruction into line 5",
    "start": "669189",
    "end": "675170"
  },
  {
    "text": "of our cache.",
    "start": "675170",
    "end": "677019"
  },
  {
    "text": "The inner loop is now repeated with R0 = 60\nwhich corresponds to element 14 of the arrays.",
    "start": "677019",
    "end": "687230"
  },
  {
    "text": "This time through the loop, all the instructions\nare already in the cache and result in instruction",
    "start": "687230",
    "end": "692709"
  },
  {
    "text": "hits.",
    "start": "692709",
    "end": "694069"
  },
  {
    "text": "A[14] which maps to line 14 of our cache results\nin a data miss because it is not yet present",
    "start": "694069",
    "end": "701009"
  },
  {
    "text": "in our cache.",
    "start": "701010",
    "end": "702440"
  },
  {
    "text": "So we bring A[14] into the cache.",
    "start": "702440",
    "end": "707029"
  },
  {
    "text": "Then as before, when we try to access B[14],\nwe get a data hit because it corresponds to",
    "start": "707029",
    "end": "713459"
  },
  {
    "text": "the same piece of data as A[14].",
    "start": "713459",
    "end": "717730"
  },
  {
    "text": "So in total, we have now seen 6 instruction\nmisses and 2 data misses.",
    "start": "717730",
    "end": "723040"
  },
  {
    "text": "The rest of the accesses have all been hits.",
    "start": "723040",
    "end": "728779"
  },
  {
    "text": "This process repeats itself with a data miss\nfor array element A[i], and a data hit for",
    "start": "728779",
    "end": "734850"
  },
  {
    "text": "array element B[i] until we get to A[5] which\nactually results in a hit because it corresponds",
    "start": "734850",
    "end": "742209"
  },
  {
    "text": "to the location in memory that holds the BNE(R0,\nR) instruction which is already in the cache",
    "start": "742209",
    "end": "749000"
  },
  {
    "text": "at line 5.",
    "start": "749000",
    "end": "751089"
  },
  {
    "text": "From then on the remaining data accesses all\nresult in hits.",
    "start": "751089",
    "end": "756498"
  },
  {
    "text": "At this point we have completed the inner\nloop and proceed to the remaining instructions",
    "start": "756499",
    "end": "761209"
  },
  {
    "text": "in the outer loop.",
    "start": "761209",
    "end": "763170"
  },
  {
    "text": "These instructions are the second SUBC and\nthe second BNE instructions.",
    "start": "763170",
    "end": "768678"
  },
  {
    "text": "These correspond to the data that is in lines\n6 and 7 of the cache thus resulting in hits.",
    "start": "768679",
    "end": "775679"
  },
  {
    "text": "The loop then repeats itself 1000 times but\neach time through all the instructions and",
    "start": "775679",
    "end": "782110"
  },
  {
    "text": "all the data is in the cache so they all result\nin hits.",
    "start": "782110",
    "end": "787170"
  },
  {
    "text": "So the total number of misses that we get\nwhen executing this benchmark on a direct",
    "start": "787170",
    "end": "791790"
  },
  {
    "text": "mapped cache is 16.",
    "start": "791790",
    "end": "794949"
  },
  {
    "text": "These are known as compulsory misses which\nare misses that occur when you are first loading",
    "start": "794949",
    "end": "799709"
  },
  {
    "text": "the data into your cache.",
    "start": "799709",
    "end": "802600"
  },
  {
    "text": "Recall that the direct mapped cache has one\nset of 64 lines in the cache.",
    "start": "802600",
    "end": "808480"
  },
  {
    "start": "803000",
    "end": "803000"
  },
  {
    "text": "The 2-way set associative has 2 sets of 32\nlines each, and the 4-way set associative",
    "start": "808480",
    "end": "815730"
  },
  {
    "text": "has 4 sets of 16 lines each.",
    "start": "815730",
    "end": "819618"
  },
  {
    "text": "Since only 16 lines are required to fit all\nthe instructions and data associated with",
    "start": "819619",
    "end": "825660"
  },
  {
    "text": "this benchmark, this means that effectively,\nonly one set will be used in the set associative",
    "start": "825660",
    "end": "832269"
  },
  {
    "text": "caches, and because even in the 4-way set\nassociative cache there are 16 lines, that",
    "start": "832269",
    "end": "839449"
  },
  {
    "text": "means that once the data is loaded into the\ncache it does not need to be replaced with",
    "start": "839449",
    "end": "844410"
  },
  {
    "text": "other data so after the first miss per line,\nthe remaining accesses in the entire benchmark",
    "start": "844410",
    "end": "850998"
  },
  {
    "text": "will be hits.",
    "start": "850999",
    "end": "852850"
  },
  {
    "text": "So the total number of misses in the 2-way\nand 4-way set associative caches is also 16.",
    "start": "852850",
    "end": "860019"
  }
]