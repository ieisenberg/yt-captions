[
  {
    "start": "0",
    "end": "22000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5310"
  },
  {
    "text": "Your support will help\nMIT OpenCourseWare continue to offer high-quality\neducational resources for free.",
    "start": "5310",
    "end": "11610"
  },
  {
    "text": "To make a donation or to\nview additional materials from hundreds of MIT courses,\nvisit MIT OpenCourseWare",
    "start": "11610",
    "end": "18140"
  },
  {
    "text": "at ocw.mit.edu. ",
    "start": "18140",
    "end": "24099"
  },
  {
    "start": "22000",
    "end": "86000"
  },
  {
    "text": "CHARLES LEISERSON:\nSo today we're going to do some\nreally cool stuff",
    "start": "24100",
    "end": "31250"
  },
  {
    "text": "having to do with\nnondeterministic parallel programming. This is where the course\nstarts to get hard. ",
    "start": "31250",
    "end": "41230"
  },
  {
    "text": "Because nondeterminism\nis really nasty. We'll talk about\nit a little bit.",
    "start": "41230",
    "end": "47060"
  },
  {
    "text": "It's really nasty. Parallel computing, as you\nknow, is pretty easy, right?",
    "start": "47060",
    "end": "52630"
  },
  {
    "text": "It's just work and span. Easy stuff, right?",
    "start": "52630",
    "end": "57800"
  },
  {
    "text": "It makes sense. You can measure these\nthings, can learn some skills",
    "start": "57800",
    "end": "62950"
  },
  {
    "text": "around them, and so forth. But nondeterminism is\nnasty, really nasty.",
    "start": "62950",
    "end": "70780"
  },
  {
    "text": "So first let's talk about\nwhat we mean by determinism. So we say that a program is\ndeterministic on a given input",
    "start": "70780",
    "end": "79450"
  },
  {
    "text": "if every memory location is\nupdated with a sequence-- the same sequence of\nvalues in every execution.",
    "start": "79450",
    "end": "87440"
  },
  {
    "text": "So the program always\nbehaves the same.",
    "start": "87440",
    "end": "94060"
  },
  {
    "text": "And you may end up-- if it's\na parallel program having different memory locations\nupdated in different orders--",
    "start": "94060",
    "end": "102200"
  },
  {
    "text": "I may do A and then B, versus\nupdating B and then A--",
    "start": "102200",
    "end": "109030"
  },
  {
    "text": "but if I look at a single\nmemory location, A say, I'm always updating A with\nthe same sequence of values.",
    "start": "109030",
    "end": "116455"
  },
  {
    "text": " There are lots of\ndefinitions of determinism.",
    "start": "116455",
    "end": "122260"
  },
  {
    "text": "This is not the only one. There are some where\npeople say, well, it only",
    "start": "122260",
    "end": "127720"
  },
  {
    "text": "matters if the output\nis always the same. And there are others where\nyou say not only does it",
    "start": "127720",
    "end": "135010"
  },
  {
    "text": "have to be the same but\nevery write to a location has to be in the\nsame order globally.",
    "start": "135010",
    "end": "142165"
  },
  {
    "text": " That turns out to be\nactually pretty hard,",
    "start": "142165",
    "end": "147849"
  },
  {
    "text": "because if you have\nparallel computing you're not going to get them\nall updated the same unless you",
    "start": "147850",
    "end": "153580"
  },
  {
    "text": "only have one processor\nexecuting instructions.",
    "start": "153580",
    "end": "161162"
  },
  {
    "text": "And so we'll talk about this. We'll talk a little bit more\nabout this kind of thing. So why-- what's\nthe big advantage",
    "start": "161162",
    "end": "170140"
  },
  {
    "text": "of deterministic programs?",
    "start": "170140",
    "end": "175360"
  },
  {
    "text": "Why should we care whether\nit's deterministic or nondeterministic? ",
    "start": "175360",
    "end": "182491"
  },
  {
    "text": "Sure. AUDIENCE: It's repeatable. CHARLES LEISERSON:\nIt's repeatable. OK. So what?",
    "start": "182492",
    "end": "187692"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] a lot\nof programs [INAUDIBLE].. ",
    "start": "187692",
    "end": "197920"
  },
  {
    "text": "CHARLES LEISERSON: Why is that? AUDIENCE: [INAUDIBLE] like a--",
    "start": "197920",
    "end": "203820"
  },
  {
    "text": "Why? Because sometimes\nthat's what you want. CHARLES LEISERSON: Because\nsometimes that's what you want.",
    "start": "203820",
    "end": "208920"
  },
  {
    "text": "OK. That doesn't-- so if-- I mean, there's a lot of\nthings I might sometimes want.",
    "start": "208920",
    "end": "215700"
  },
  {
    "text": "Why is that important\nto want that? Yes. AUDIENCE: Because\nconsistency makes",
    "start": "215700",
    "end": "220937"
  },
  {
    "text": "it easier to debug source code. CHARLES LEISERSON: Yes. Makes it easier to debug. That's probably the number\none reason, debugging.",
    "start": "220938",
    "end": "227760"
  },
  {
    "text": "If it does the same thing every\ntime, then if you have a bug,",
    "start": "227760",
    "end": "234180"
  },
  {
    "text": "you can run it again. You expect to see the bug again. So every time you run through,\nhey, I get the same bug.",
    "start": "234180",
    "end": "243140"
  },
  {
    "text": "But if it's nondeterministic,\nI get a bug, and now I go to look for it and\nthe bug is nowhere to be found.",
    "start": "243140",
    "end": "251970"
  },
  {
    "text": "Makes debugging a lot harder. There are other reasons\nfor wanting repeatability, so your answer is actually\na broader correct answer.",
    "start": "251970",
    "end": "260730"
  },
  {
    "text": "But the big advantage is\nin the specific application of repeatability to debugging.",
    "start": "260730",
    "end": "266074"
  },
  {
    "text": " So here's the golden rule\nof parallel programming.",
    "start": "266075",
    "end": "273780"
  },
  {
    "start": "271000",
    "end": "371000"
  },
  {
    "text": "Never write nondeterministic\nparallel programs. ",
    "start": "273780",
    "end": "280500"
  },
  {
    "text": "They can exhibit\nanomalous behaviors and it's hard to debug them.",
    "start": "280500",
    "end": "286480"
  },
  {
    "text": "So never ever write\nnondeterministic programs. ",
    "start": "286480",
    "end": "294009"
  },
  {
    "text": "Unfortunately, this is one\nof these things that is kind of hard in practice to do.",
    "start": "294010",
    "end": "302260"
  },
  {
    "text": " So why might you want to write\na nondeterministic program",
    "start": "302260",
    "end": "308470"
  },
  {
    "text": "even though-- even when famous masters\nin the area of performance",
    "start": "308470",
    "end": "317199"
  },
  {
    "text": "engineering, with\nhighly credentialed--",
    "start": "317200",
    "end": "322240"
  },
  {
    "text": " numerous awards and\nso forth, tell you",
    "start": "322240",
    "end": "328540"
  },
  {
    "text": "you shouldn't write\nnondeterministic programs? Why might you want\nto do it anyway?",
    "start": "328540",
    "end": "334425"
  },
  {
    "start": "334425",
    "end": "341340"
  },
  {
    "text": "Yes. AUDIENCE: You get\nbetter performance. CHARLES LEISERSON: Yes. You might get\nbetter performance.",
    "start": "341340",
    "end": "346520"
  },
  {
    "text": "That's one of the big ones. That's one of the big ones. And sometimes you can't.",
    "start": "346520",
    "end": "352980"
  },
  {
    "text": "The nature of the\nproblem is maybe that it's not deterministic. You may have asynchronous\ninputs coming in and so forth.",
    "start": "352980",
    "end": "363210"
  },
  {
    "text": " So this is the golden rule.",
    "start": "363210",
    "end": "369420"
  },
  {
    "text": "We also have a silver rule. Silver rule says never write\nnondeterministic parallel",
    "start": "369420",
    "end": "375650"
  },
  {
    "start": "371000",
    "end": "645000"
  },
  {
    "text": "programs, but if you must\nalways devise a test strategy",
    "start": "375650",
    "end": "381710"
  },
  {
    "text": "to manage the nondeterminism. So this gets into\nyou better have",
    "start": "381710",
    "end": "387409"
  },
  {
    "text": "some way of handling how\nyou're going to tell what's going on if you have a bug.",
    "start": "387410",
    "end": "394430"
  },
  {
    "text": "So what are some of the\ntypical test strategies that you could use that would\nmanage the nondeterminism?",
    "start": "394430",
    "end": "404560"
  },
  {
    "text": "So imagine you've got\na parallel program and it's got races\nin it and so forth,",
    "start": "404560",
    "end": "411350"
  },
  {
    "text": "and it's operating\nnondeterministically. What-- and that's OK if\neverything's going right.",
    "start": "411350",
    "end": "419360"
  },
  {
    "text": "How would you-- you find\na bug in the program. How are you-- what\nare you going to do? ",
    "start": "419360",
    "end": "425996"
  },
  {
    "text": "What kinds of ideas do you have? Yes. AUDIENCE: You could temporarily\nremove the nondeterminism.",
    "start": "425997",
    "end": "431712"
  },
  {
    "text": "CHARLES LEISERSON: Yes. You could turn off\nthe nondeterminism. You put a switch in\nthere that says, well,",
    "start": "431712",
    "end": "437800"
  },
  {
    "text": "I know the source of this\nnondeterministic behavior. Let me do that. Let me give you an\nexample of that.",
    "start": "437800",
    "end": "445090"
  },
  {
    "text": "For security reasons these\ndays, when you allocate memory,",
    "start": "445090",
    "end": "450610"
  },
  {
    "text": "it's allocated to\ndifferent locations on different runs\nof the program. It's allocated in random places.",
    "start": "450610",
    "end": "457240"
  },
  {
    "text": "They want to randomize the\naddresses when you call malloc. That means that you can end\nup with different behaviors",
    "start": "457240",
    "end": "468040"
  },
  {
    "text": "from run to run, and that can\ncompromise your performance.",
    "start": "468040",
    "end": "474100"
  },
  {
    "text": "But it turns out that\nthere is a compiler switch, and if you run it\nin debug mode it",
    "start": "474100",
    "end": "480870"
  },
  {
    "text": "will always deliver\nthe results of malloc",
    "start": "480870",
    "end": "486729"
  },
  {
    "text": "in deterministic\nlocations, where",
    "start": "486730",
    "end": "492340"
  },
  {
    "text": "the locations of the\nthings you're mallocing are repeatable.",
    "start": "492340",
    "end": "498789"
  },
  {
    "text": "So that's good because\nthey're supported. They said, yes, we have to\nrandomize for security reasons",
    "start": "498790",
    "end": "505700"
  },
  {
    "text": "so that people can't\ndeterministically exploit buffer overflow\nerrors, for example,",
    "start": "505700",
    "end": "511900"
  },
  {
    "text": "but I don't want to have\nto do that every time. So I don't want to\nrandomize every time I run.",
    "start": "511900",
    "end": "522130"
  },
  {
    "text": "I want to have the\noption of making it so that that randomization\nis turned off. So that's a good one.",
    "start": "522130",
    "end": "527350"
  },
  {
    "text": "What's another one\nthat can be done? ",
    "start": "527350",
    "end": "537350"
  },
  {
    "text": "You're full of good ideas. Let's try somebody else for now. But I like that, I like that.",
    "start": "537350",
    "end": "543650"
  },
  {
    "text": "What are some other ideas? What else can you do to\nhandle nondeterminism?",
    "start": "543650",
    "end": "549740"
  },
  {
    "text": "You got a program and it's--  yes, yes, yes. AUDIENCE: If you use random\nnumbers, use the same seed.",
    "start": "549740",
    "end": "557529"
  },
  {
    "text": "CHARLES LEISERSON: Yes. If you have random numbers,\nyou use the same seed. In some sense that's\nkind of the same thing",
    "start": "557530",
    "end": "564560"
  },
  {
    "text": "if you're turning\noff nondeterminism. But that's a great one. There are other places. For example, if you read--",
    "start": "564560",
    "end": "571570"
  },
  {
    "text": "if you do get time of day\nfor something in your program for something, you could have\nan option where it will put",
    "start": "571570",
    "end": "579310"
  },
  {
    "text": "in a particular fixed value\nthere so you can make sure that it doesn't-- even a serial program\nisn't nondeterministic.",
    "start": "579310",
    "end": "587800"
  },
  {
    "text": "So that's good, but I also\nconsider that to be-- it's another great example of\nturning off and on determinism.",
    "start": "587800",
    "end": "594572"
  },
  {
    "text": "What other things can you do?  Yes. AUDIENCE: You could record the\nrandomized outputs or inputs",
    "start": "594572",
    "end": "606089"
  },
  {
    "text": "to determine correctness. CHARLES LEISERSON: Yes. You can do record-replay\nfor some things. Is that what you're saying?",
    "start": "606090",
    "end": "612020"
  },
  {
    "text": "Is that what you mean? Or am I-- AUDIENCE: Maybe. [INAUDIBLE] CHARLES LEISERSON: So\nrecord-replay says you run it",
    "start": "612020",
    "end": "617450"
  },
  {
    "text": "through-- you can run it\nthrough with random numbers, but it's recording those things,\nso that when you run it again,",
    "start": "617450",
    "end": "626570"
  },
  {
    "text": "instead of using\nthe random numbers-- new random numbers, it uses\nthe ones that you used to use.",
    "start": "626570",
    "end": "632300"
  },
  {
    "text": "So that's the\nrecord-replay thing. Is that what you're saying, or\nare you saying something else? Yes, OK, good.",
    "start": "632300",
    "end": "638510"
  },
  {
    "text": "So that's using some tools. There are actually\na lot of strategies. Let me just move on and answer.",
    "start": "638510",
    "end": "645200"
  },
  {
    "start": "645000",
    "end": "866000"
  },
  {
    "text": "So another thing you can do is\nencapsulate the nondeterminism. So that's actually done in a\nCilk runtime system already.",
    "start": "645200",
    "end": "652779"
  },
  {
    "text": "The runtime system is using\na random scheduling strategy,",
    "start": "652780",
    "end": "658580"
  },
  {
    "text": "but you don't see that it's\nrandom in the execution of your code if you don't--\nif you have no race conditions",
    "start": "658580",
    "end": "665329"
  },
  {
    "text": "in your code. It's encapsulated. So that the-- in the platform.",
    "start": "665330",
    "end": "673628"
  },
  {
    "text": "So the platform is\ngoing to guarantee you deterministic results even\nthough underneath the covers it's doing\nnondeterministic things.",
    "start": "673628",
    "end": "682310"
  },
  {
    "text": "You can also substitute a\ndeterministic alternative. Sometimes there's a way\nof computing something",
    "start": "682310",
    "end": "689750"
  },
  {
    "text": "that is nondeterministic,\nbut in debug mode, ah, let me not use the\nnondeterministic one.",
    "start": "689750",
    "end": "699560"
  },
  {
    "text": "And you can also\nuse analysis tools, which can tell you\nthings about your program",
    "start": "699560",
    "end": "705649"
  },
  {
    "text": "and which you can\ncontrol things. So there's a lot of things.",
    "start": "705650",
    "end": "711020"
  },
  {
    "text": "So whenever you have a\nnondeterministic program, you want to find some\nway of controlling it.",
    "start": "711020",
    "end": "717860"
  },
  {
    "text": "Often, the nondeterminism\nis over in this corner but your bug is\nover in this corner.",
    "start": "717860",
    "end": "723150"
  },
  {
    "text": "So if you can turn this\nthing off in some way, or encapsulate it,\nor otherwise control",
    "start": "723150",
    "end": "731900"
  },
  {
    "text": "the nondeterminism\nover there, now you have a better chance of\ncatching the stuff over here.",
    "start": "731900",
    "end": "737450"
  },
  {
    "text": "That's going to be particularly\nimportant in project 4 when we get to\nit, because that's going to be actually\ngoing to be doing",
    "start": "737450",
    "end": "743053"
  },
  {
    "text": "nondeterministic programming\nfor a game playing program.",
    "start": "743053",
    "end": "748100"
  },
  {
    "text": "And one of the things\nis that the processors are, in this case, keeping\nthe game positions together.",
    "start": "748100",
    "end": "756980"
  },
  {
    "text": "And so if one processor\nstores something into what's called a\ntransposition table, which",
    "start": "756980",
    "end": "764510"
  },
  {
    "text": "is essentially a big hash\ntable of positions it's seen, another one can see that\nvalue and change its behavior.",
    "start": "764510",
    "end": "772420"
  },
  {
    "text": "And so one of the\nthings you want to be do is turn off transposition\ntable so that you",
    "start": "772420",
    "end": "778160"
  },
  {
    "text": "don't take advantage of\nthat performance advantage, but now you can debug\nthe search code, or you can debug the\nevaluation code, and so forth.",
    "start": "778160",
    "end": "786580"
  },
  {
    "text": "You can also do things\nlike unit testing so you know whether or not a\nparticular piece is correct",
    "start": "786580",
    "end": "793550"
  },
  {
    "text": "that might have--  so that you can test\nthis thing separately",
    "start": "793550",
    "end": "799340"
  },
  {
    "text": "from the rest of your system\nwhich may have nondeterminism. Anyway, this is a major thing.",
    "start": "799340",
    "end": "804410"
  },
  {
    "text": "So never write them. But if you have\nto, you always want to have some test strategy.",
    "start": "804410",
    "end": "811759"
  },
  {
    "text": "And so for people who are\nnot watching this video and who are not in\nclass today, they",
    "start": "811760",
    "end": "818480"
  },
  {
    "text": "are going to be\nsorely hampered by not knowing this lesson when they\ngo into the fourth project.",
    "start": "818480",
    "end": "826579"
  },
  {
    "start": "826580",
    "end": "832690"
  },
  {
    "text": "So what we're going\nto do is now we're going to talk about how to do\nnondeterministic programming.",
    "start": "832690",
    "end": "841420"
  },
  {
    "text": "So this is-- there's always\nsome part of your code",
    "start": "841420",
    "end": "846550"
  },
  {
    "text": "which has a skull\nand crossbones. Like you have this abstraction. It's beautiful, and you\ncan design, et cetera.",
    "start": "846550",
    "end": "853029"
  },
  {
    "text": "And then somewhere there's\nthis really ugly thing that nobody should know, and\nyou put the skull and crossbones",
    "start": "853030",
    "end": "859000"
  },
  {
    "text": "on that, and only experts go in. Well, anyway, that's the\nbarrier we're crossing here.",
    "start": "859000",
    "end": "865558"
  },
  {
    "text": "And we're going to start out\nby talking about something that you've probably\nseen in some of the other classes, mutual\nexclusion and atomicity.",
    "start": "865558",
    "end": "875029"
  },
  {
    "start": "866000",
    "end": "1041000"
  },
  {
    "text": "So I'm going to use the\nexample of a hash table. ",
    "start": "875030",
    "end": "881910"
  },
  {
    "text": "So here's a typical hash table. It's got collisions\nresolved by chaining. So you have a bunch\nof linked lists.",
    "start": "881910",
    "end": "889300"
  },
  {
    "text": "You hash to a particular\nslot in the table, and then you chase down the\nlinked list to find the value.",
    "start": "889300",
    "end": "895790"
  },
  {
    "text": "And so, for example,\nif I'm going to insert x which has\na key value of 81,",
    "start": "895790",
    "end": "902780"
  },
  {
    "text": "what I do is figure\nout which slot I go to by hashing the key.",
    "start": "902780",
    "end": "909830"
  },
  {
    "text": "And then in this case I\nmade it be the last one so that the animations\ncould be easier",
    "start": "909830",
    "end": "915870"
  },
  {
    "text": "than if it were in the middle.  So now what do I do is\nI make the pointer of x",
    "start": "915870",
    "end": "925190"
  },
  {
    "text": "go to the first\nelement of that list, and then I make the slot\nvalue now point to x.",
    "start": "925190",
    "end": "933890"
  },
  {
    "text": "And that effectively, with a\nconstant number of operations, inserts x into the hash\ntable, and in particular",
    "start": "933890",
    "end": "942500"
  },
  {
    "text": "into the linked list in the\nslot that it's supposed to be. This is all familiar, right?",
    "start": "942500",
    "end": "949040"
  },
  {
    "text": "So now what happens\nwhen you have multiple parallel\ninstructions that are",
    "start": "949040",
    "end": "956570"
  },
  {
    "text": "accessing the same locations? ",
    "start": "956570",
    "end": "967170"
  },
  {
    "text": "So here we have two\nthreads, one inserting x and one inserting y.",
    "start": "967170",
    "end": "972690"
  },
  {
    "text": "And x goes, it does its thing. It hashes to there, and it\nthen sets the next pointer",
    "start": "972690",
    "end": "980790"
  },
  {
    "text": "to be the-- to add itself into the list.",
    "start": "980790",
    "end": "987655"
  },
  {
    "text": "And then there's\nthis other thing going on in parallel which\neffectively says, oh, I'm going to hash.",
    "start": "987655",
    "end": "992899"
  },
  {
    "text": "Oh, we're going\nto the same slot. It doesn't know that\nsomebody is already there. And so then it\ndecides it's going",
    "start": "992900",
    "end": "999470"
  },
  {
    "text": "to put itself in as the\nfirst element of the list.",
    "start": "999470",
    "end": "1006009"
  },
  {
    "text": "And then it sets\nthe value of y-- it sets the value of\nthe slot to point to y.",
    "start": "1006010",
    "end": "1012490"
  },
  {
    "text": "And then along comes x,\nfinishing off what it's doing, and it points the value to x.",
    "start": "1012490",
    "end": "1017889"
  },
  {
    "text": "And you can see that we have a\nrace bug here, a really nasty",
    "start": "1017890",
    "end": "1024609"
  },
  {
    "text": "one because we've just destroyed\nthe integrity of our system. We now have-- in particular,\ny is sort of floating,",
    "start": "1024609",
    "end": "1033189"
  },
  {
    "text": "not in the list when it's\nsupposed to be in the list. ",
    "start": "1033190",
    "end": "1039579"
  },
  {
    "text": "So the standard\nsolution to this is to make some of these\ninstructions be atomic. ",
    "start": "1039579",
    "end": "1047040"
  },
  {
    "start": "1041000",
    "end": "1384000"
  },
  {
    "text": "And what that means is\nthe rest of the system can never view them as\nbeing partially executed.",
    "start": "1047040",
    "end": "1054610"
  },
  {
    "text": "So they either all have been\nexecuted or none of them have been executed\nat any point in time",
    "start": "1054610",
    "end": "1061870"
  },
  {
    "text": "as far as the rest of\nthe system is concerned. And the part of code that\nis within the atomic region",
    "start": "1061870",
    "end": "1069890"
  },
  {
    "text": "is called the critical section. And, typically, a\ncritical section of code",
    "start": "1069890",
    "end": "1074920"
  },
  {
    "text": "is some place that should\nnot be being executed by two things at the same time.",
    "start": "1074920",
    "end": "1081590"
  },
  {
    "text": "So the standard\nsolution to atomicity is to use what's called a mutex\nlock, or a mutual exclusion",
    "start": "1081590",
    "end": "1087100"
  },
  {
    "text": "lock. And it's basically an object\nwith a lock and unlock member functions.",
    "start": "1087100",
    "end": "1092289"
  },
  {
    "text": "And an attempt by a thread to\nlock an already locked mutex causes the thread to block--",
    "start": "1092290",
    "end": "1099880"
  },
  {
    "text": "that is, wait-- until\nthe mutex is unlocked. So if somebody grabs the lock,\nsomebody else grabs the lock",
    "start": "1099880",
    "end": "1108010"
  },
  {
    "text": "and it's already taken,\nthen they have to wait. And they sit there waiting\nuntil this guy says,",
    "start": "1108010",
    "end": "1114202"
  },
  {
    "text": "yes, I'm going to release it.  So what we'll do\nnow is we'll make",
    "start": "1114202",
    "end": "1121029"
  },
  {
    "text": "each slot be a struct with a\nmutex L, and a pointer, head,",
    "start": "1121030",
    "end": "1126190"
  },
  {
    "text": "to the slot context. So it's going to\nbe the same data structure we had\nbefore but now I'm going to have not just\nthe pointer from the slot",
    "start": "1126190",
    "end": "1132730"
  },
  {
    "text": "but I'll also have a-- also have a lock\nin that position.",
    "start": "1132730",
    "end": "1143230"
  },
  {
    "text": "And so the idea of-- in the code now is that\nbefore I access the lock--",
    "start": "1143230",
    "end": "1149770"
  },
  {
    "text": "before I access\nthe list, I'm going to lock that list in the\ntable by locking slot.",
    "start": "1149770",
    "end": "1159610"
  },
  {
    "text": "Then I'll do the things\nthat I need to do, and then I'll unlock it, and\nnow anything else can go on.",
    "start": "1159610",
    "end": "1164680"
  },
  {
    "text": "Because what's happening\nis-- the reason we're getting into\ntrouble is because we've",
    "start": "1164680",
    "end": "1170950"
  },
  {
    "text": "got some sort of\ninterleaving of operations. And our goal is to\nmake sure that it's either doing this or\ndoing this, and never",
    "start": "1170950",
    "end": "1178390"
  },
  {
    "text": "this, to make sure that-- so that each thing,\neach piece of code,",
    "start": "1178390",
    "end": "1184420"
  },
  {
    "text": "is restoring the invariant of\ncorrectness after it executes",
    "start": "1184420",
    "end": "1189530"
  },
  {
    "text": "the pointer swaps. The invariance in this\ncase is that the elements are in a list.",
    "start": "1189530",
    "end": "1195130"
  },
  {
    "text": "And so you want to restore\nthat with each one. ",
    "start": "1195130",
    "end": "1200700"
  },
  {
    "text": "So mutexes-- this is\none way you can use mutexes to implement atomicity.",
    "start": "1200700",
    "end": "1207610"
  },
  {
    "text": "So now let's just go back. ",
    "start": "1207610",
    "end": "1215980"
  },
  {
    "text": "Who has seen mutexes before? Is that pretty much everybody? Yes. OK, good.",
    "start": "1215980",
    "end": "1222159"
  },
  {
    "text": "I hope that this is not brand\nnew for too many of you. If it is brand\nnew, that's great. But what I'm trying\nto do is make it-- so",
    "start": "1222160",
    "end": "1229270"
  },
  {
    "text": "let's go back a little bit\nand recall in this class our discussion of\ndeterminacy races. So, remember, a\ndeterminacy race occurs",
    "start": "1229270",
    "end": "1236830"
  },
  {
    "text": "when you have two logically\nparallel instructions that access the same memory\nlocation and at least one",
    "start": "1236830",
    "end": "1243910"
  },
  {
    "text": "of them performs a write. So mutex locks can guarantee\nthat critical sections behave",
    "start": "1243910",
    "end": "1250179"
  },
  {
    "text": "atomically, but the\nresulting code is",
    "start": "1250180",
    "end": "1257030"
  },
  {
    "text": "inherently nondeterministic\nbecause you've got a-- we had a race bug there.",
    "start": "1257030",
    "end": "1263210"
  },
  {
    "text": "We had two things trying\nto access the same slot. But that may be what I want.",
    "start": "1263210",
    "end": "1268830"
  },
  {
    "text": "I want to have a shared hash\ntable maybe for these things. So I want something\nwhere there is a race,",
    "start": "1268830",
    "end": "1276650"
  },
  {
    "text": "but I just don't want to have\nthe anomalies that arise. In this case, the race\nbug caused things,",
    "start": "1276650",
    "end": "1282710"
  },
  {
    "text": "and I can solve\nthat with atomicity. ",
    "start": "1282710",
    "end": "1290480"
  },
  {
    "text": "If you have no\ndeterminacy races, it means that the program is\ndeterministic on that input",
    "start": "1290480",
    "end": "1297470"
  },
  {
    "text": "and that it always\nbehaves the same. And remember also that if\na deterministic race exists",
    "start": "1297470",
    "end": "1304640"
  },
  {
    "text": "in an ostensibly\ndeterministic program, then it guarantees to find a race.",
    "start": "1304640",
    "end": "1311600"
  },
  {
    "text": "Now, if you put in\nmutexes, you still have a nondeterministic program. You still have a race.",
    "start": "1311600",
    "end": "1317903"
  },
  {
    "text": "Because you have two\nthings that are logically parallel that are both\naccessing the lock.",
    "start": "1317903",
    "end": "1323149"
  },
  {
    "text": "That's a race. That's a determinacy race. If you have two things,\nthey're in parallel,",
    "start": "1323150",
    "end": "1328550"
  },
  {
    "text": "they're both accessing the\nlock, that's a determinacy race. It may be a safe, correct one,\nbut it is a determinacy race.",
    "start": "1328550",
    "end": "1339260"
  },
  {
    "text": "And so any codes\nthat use locks are nondeterministic by\nintention, and they're",
    "start": "1339260",
    "end": "1344299"
  },
  {
    "text": "going to invalidate the Cilksan\nguarantee of finding those race bugs.",
    "start": "1344300",
    "end": "1349490"
  },
  {
    "text": " So you will end up\nwith races in your code",
    "start": "1349490",
    "end": "1354580"
  },
  {
    "text": "if you're not careful. And so this is one reason\nit's important to have some way of turning off\nnondeterminism to detect stuff.",
    "start": "1354580",
    "end": "1362740"
  },
  {
    "text": "Because what you don't\nwant is a whole rash of false positives\nsaying, oh, you raced on gathering this lock.",
    "start": "1362740",
    "end": "1370180"
  },
  {
    "text": "Nor do you want to ignore\nthat and then discover that a race has popped\nup somewhere else.",
    "start": "1370180",
    "end": "1376390"
  },
  {
    "text": "Now, some people feel that-- so this is basically talking\nabout having a data race.",
    "start": "1376390",
    "end": "1384610"
  },
  {
    "text": "And a data race is\nsimilar to the definition of determinacy race,\nbut it says that you",
    "start": "1384610",
    "end": "1392679"
  },
  {
    "text": "have two logically\nparallel instructions and they don't hold\nlocks in common.",
    "start": "1392680",
    "end": "1400490"
  },
  {
    "text": "And then it's the\nsame definition. If they access the same memory\nlocation and one of them performs a write,\nthen you have a--",
    "start": "1400490",
    "end": "1407750"
  },
  {
    "text": "then you have a data race bug. But if they have\nthe locks in common,",
    "start": "1407750",
    "end": "1416260"
  },
  {
    "text": "if they both have acquired at\nleast one lock that's the same, then you don't have a\ndata race, because that",
    "start": "1416260",
    "end": "1424370"
  },
  {
    "text": "means that you've now\nsuccessfully protected the atomicity.",
    "start": "1424370",
    "end": "1429380"
  },
  {
    "text": "But it is still\nnondeterministic and there is a determinacy race,\njust no data race.",
    "start": "1429380",
    "end": "1434630"
  },
  {
    "text": "And that's the big\ndistinction between data races and determinacy races. And on quiz 2, you better\nknow the difference",
    "start": "1434630",
    "end": "1441649"
  },
  {
    "text": "between data races\nand determinacy races, because they are different.",
    "start": "1441650",
    "end": "1447830"
  },
  {
    "text": "So a program may\nhave no determine-- may have no data races. That doesn't mean\nthat it doesn't",
    "start": "1447830",
    "end": "1453050"
  },
  {
    "text": "have a determinacy race. In fact, if it's got\nany locks, it probably has a determinacy race.",
    "start": "1453050",
    "end": "1458600"
  },
  {
    "start": "1458600",
    "end": "1465289"
  },
  {
    "text": "So one of the things is,\nif I have no data races, does that mean I have no bugs?",
    "start": "1465290",
    "end": "1470450"
  },
  {
    "text": "Suppose I have no\ndata races in my code. Does that mean I have no bugs?",
    "start": "1470450",
    "end": "1476750"
  },
  {
    "text": "This is like an obvious answer\njust by quizmanship, right?",
    "start": "1476750",
    "end": "1483110"
  },
  {
    "text": "So what might happen? ",
    "start": "1483110",
    "end": "1489113"
  },
  {
    "text": "Think about it a little bit. What might happen?  How could I have no data\nraces and yet there still",
    "start": "1489113",
    "end": "1497809"
  },
  {
    "text": "be a bug, even though-- I'm assuming it's a correct\npiece of code otherwise.",
    "start": "1497810",
    "end": "1502957"
  },
  {
    "text": "In other words, when it\nruns serially or whatever, it's correct. How could I end up having a\ncode-- no data races but still",
    "start": "1502957",
    "end": "1512060"
  },
  {
    "text": "have a bug? ",
    "start": "1512060",
    "end": "1521916"
  },
  {
    "text": "AUDIENCE: It's still\nnondeterministic [INAUDIBLE]..",
    "start": "1521916",
    "end": "1527067"
  },
  {
    "text": "CHARLES LEISERSON: Yes, but that\ndoesn't mean it's bad, right? AUDIENCE: Well, you said that\nit runs correctly serially.",
    "start": "1527067",
    "end": "1533610"
  },
  {
    "text": "CHARLES LEISERSON: Yes. AUDIENCE: So the order that\nthings are put in or generated might still be--",
    "start": "1533610",
    "end": "1539700"
  },
  {
    "text": "CHARLES LEISERSON: Might\nstill be different, yes. AUDIENCE: [INAUDIBLE].",
    "start": "1539700",
    "end": "1545020"
  },
  {
    "text": "CHARLES LEISERSON: OK. Yes. Let me give you an example\nwhich is more to the point.",
    "start": "1545020",
    "end": "1553270"
  },
  {
    "text": "Here is a way of\nmaking sure that I have no data race, which is I\nlock before I follow the table",
    "start": "1553270",
    "end": "1568240"
  },
  {
    "text": "slot value. Then I unlock, and I lock\nagain and then I set the value.",
    "start": "1568240",
    "end": "1574940"
  },
  {
    "text": "So I haven't prevented\nthe atomicity. Right now I've got an\natomicity violation, but I have no data\nraces, because I never",
    "start": "1574940",
    "end": "1583893"
  },
  {
    "text": "have two things--\nany two things that are going to access\nthings at the same time is protected by the lock. ",
    "start": "1583893",
    "end": "1591220"
  },
  {
    "text": "But it didn't solve my\natomicity, so there's a-- ",
    "start": "1591220",
    "end": "1599370"
  },
  {
    "text": "you can definitely\nhave no data races, but that doesn't mean\nyou have no bugs. ",
    "start": "1599370",
    "end": "1607390"
  },
  {
    "text": "But, usually, what happens\nis, if you have no data races,",
    "start": "1607390",
    "end": "1614470"
  },
  {
    "text": "then usually the programmer\nactually got this code right.",
    "start": "1614470",
    "end": "1620380"
  },
  {
    "text": "It's one of these things where\ndemonstrating no data races is in fact a very positive\nthing in your code.",
    "start": "1620380",
    "end": "1627294"
  },
  {
    "text": "It doesn't mean the\nprogrammer did right. But most of the time, the reason\nthey're putting in the locks",
    "start": "1627295",
    "end": "1632860"
  },
  {
    "text": "is to provide atomicity\nfor something, and they usually get it right. They don't always get it right.",
    "start": "1632860",
    "end": "1637960"
  },
  {
    "text": "In fact, Java, for example,\nhad a very famous bug early on in the way\nthat it specified",
    "start": "1637960",
    "end": "1647200"
  },
  {
    "text": "locking such that the-- you could look at the length\nof a string and then modify it,",
    "start": "1647200",
    "end": "1654220"
  },
  {
    "text": "and then you would\nend up with a race bug because somebody else\ncould swoop in in between. So they thought they were\nproviding atomicity and they",
    "start": "1654220",
    "end": "1661550"
  },
  {
    "text": "didn't.  So there's another\nset of issues here",
    "start": "1661550",
    "end": "1672180"
  },
  {
    "text": "having to do with benign races. Now, there's some people who\nargue that no races are--",
    "start": "1672180",
    "end": "1678310"
  },
  {
    "text": "no determinacy races are benign. ",
    "start": "1678310",
    "end": "1683480"
  },
  {
    "text": "And they make\nacademic statements that I find quite\ncompelling, actually,",
    "start": "1683480",
    "end": "1689080"
  },
  {
    "text": "what they say, about races\nand whether races are benign.",
    "start": "1689080",
    "end": "1694870"
  },
  {
    "text": "But, nevertheless,\nthe literature also continues to use\nthe term benign race",
    "start": "1694870",
    "end": "1700660"
  },
  {
    "text": "for this kind of example. So suppose we want to identify\nwhat is the set of digits",
    "start": "1700660",
    "end": "1706600"
  },
  {
    "text": "that occurred in some array. So here's an array with\na bunch of values in it,",
    "start": "1706600",
    "end": "1714280"
  },
  {
    "text": "each one being a\ndigit from 0 to 9. So I could write a\nlittle piece of code that runs through a\ndigits array of length 10",
    "start": "1714280",
    "end": "1724630"
  },
  {
    "text": "and sets the number of digits\nI've seen so far of each value to be 0.",
    "start": "1724630",
    "end": "1731500"
  },
  {
    "text": "And now I go through-- and I'm going to do\nthis in parallel-- and I'm going to set, every\ntime I see a value A of i--",
    "start": "1731500",
    "end": "1743470"
  },
  {
    "text": "suppose A of i is 3-- I set the location\nof A3 to be 1.",
    "start": "1743470",
    "end": "1750540"
  },
  {
    "text": "And, otherwise, and\nnow-- otherwise, it's 0 because that's\nwhat I had it before.",
    "start": "1750540",
    "end": "1756820"
  },
  {
    "text": "So here's the kind\nof thing I have. So, for example, I can\nhave both of those 6's--",
    "start": "1756820",
    "end": "1761950"
  },
  {
    "text": "or in parallel, we're going\nto access the location",
    "start": "1761950",
    "end": "1766990"
  },
  {
    "text": "6 to set it to 1. But they're both\nsetting it to 1. It doesn't really matter\nwhat order they do it in.",
    "start": "1766990",
    "end": "1773200"
  },
  {
    "text": "You're going to get the\nsame value there, 1. And so there's a race.",
    "start": "1773200",
    "end": "1781060"
  },
  {
    "text": "Maybe we don't too much\ncare about that race, because they're both\nsetting the same value. We're not going to get\nan incorrect value.",
    "start": "1781060",
    "end": "1788650"
  },
  {
    "text": "Well, not exactly. We might get it on\nsome architecture. On the Intel architectures, you\nwon't get an incorrect value,",
    "start": "1788650",
    "end": "1795970"
  },
  {
    "text": "on x86. But there are codes\nwhere the elements--",
    "start": "1795970",
    "end": "1803799"
  },
  {
    "text": "the array values are\nnot set atomically. So, for example, on\nthe MIPS architecture,",
    "start": "1803800",
    "end": "1811270"
  },
  {
    "text": "in order to set a bite\nto be a particular value, you have to fetch the word,\nmask out, set the word,",
    "start": "1811270",
    "end": "1819160"
  },
  {
    "text": "and then store it back in. Set the byte and then store\nit back into the word.",
    "start": "1819160",
    "end": "1824289"
  },
  {
    "text": "And so if there are two\nguys who are basically operating on that\nsame word location,",
    "start": "1824290",
    "end": "1831429"
  },
  {
    "text": "they will have a race,\neven though in the code it looks like they're\njust setting bytes. Does that make sense?",
    "start": "1831430",
    "end": "1837760"
  },
  {
    "text": "So nasty. Nasty bugs. That's why you should never do\nnondeterministic programming",
    "start": "1837760",
    "end": "1846190"
  },
  {
    "text": "unless you have to.  So Cilksan allows you to\nturn off race detection",
    "start": "1846190",
    "end": "1855880"
  },
  {
    "start": "1854000",
    "end": "2040000"
  },
  {
    "text": "for intentional races. So if you really meant there\nto be a race, as in this case,",
    "start": "1855880",
    "end": "1862060"
  },
  {
    "text": "you can turn it off. This is dangerous but\npractical, it turns out.",
    "start": "1862060",
    "end": "1868675"
  },
  {
    "text": "Usually you're\nnot turning it off for-- because here's\nwhat can happen. You can turn it off and yet-- then there's something else\nwhich is using that same stuff,",
    "start": "1868675",
    "end": "1875050"
  },
  {
    "text": "and now you're running Cilksan\nwithout having turned it off",
    "start": "1875050",
    "end": "1880210"
  },
  {
    "text": "for exactly what\nyour race might be. There are better solutions. So in Intel's Cilk\nScreen, there's",
    "start": "1880210",
    "end": "1886509"
  },
  {
    "text": "the notion of fake locks. We just have not yet implemented\nit in the open Cilk compiler",
    "start": "1886510",
    "end": "1895030"
  },
  {
    "text": "and in Cilksan. We'll eventually\nget to doing that. And then people who take\nthis class in the future",
    "start": "1895030",
    "end": "1900970"
  },
  {
    "text": "will have an easier time\nwith that, because we'll be able to check for that as well.",
    "start": "1900970",
    "end": "1906070"
  },
  {
    "text": "So any questions\nabout these notions? So you can see the notions\nof races can get quite hairy",
    "start": "1906070",
    "end": "1912610"
  },
  {
    "text": "and make it quite difficult\nto do your debugging,",
    "start": "1912610",
    "end": "1919270"
  },
  {
    "text": "and in fact even can\nconfound your tools that are supposed to be helping\nyou to get correct code.",
    "start": "1919270",
    "end": "1927429"
  },
  {
    "text": "All in the name of performance. But we like performance.",
    "start": "1927430",
    "end": "1932560"
  },
  {
    "text": "Any questions? Yes. AUDIENCE: So I don't\nreally understand",
    "start": "1932560",
    "end": "1940000"
  },
  {
    "text": "how some architectures can cause\nsome error in race conditions. CHARLES LEISERSON: Yes.",
    "start": "1940000",
    "end": "1945170"
  },
  {
    "text": "So how can some architectures\ncause some error? So here's the\nthing, is that if I have a, let's say,\na byte array, it",
    "start": "1945170",
    "end": "1959150"
  },
  {
    "text": "may be that this is stored\nas a set of let's say four-byte words. ",
    "start": "1959150",
    "end": "1970340"
  },
  {
    "text": "And so although you\nmay write that A of 0",
    "start": "1970340",
    "end": "1975650"
  },
  {
    "text": "gets 1, what it does is it says,\nlet me fetch these four values,",
    "start": "1975650",
    "end": "1982520"
  },
  {
    "text": "because there is no\nbyte set instruction on some architectures. It can only set, in\nthis case, 32-bit words.",
    "start": "1982520",
    "end": "1991550"
  },
  {
    "text": "So it fetches the values. It then-- into a register.",
    "start": "1991550",
    "end": "1997280"
  },
  {
    "text": "It then sets the value in\nthe register by masking.",
    "start": "1997280",
    "end": "2002440"
  },
  {
    "text": "So it doesn't set the\nother things here. And then it stores it back\nso that it has a 1 here.",
    "start": "2002440",
    "end": "2009190"
  },
  {
    "text": "But what if somebody,\nat the same time, is storing into this location? They will fetch it into\ntheir own register,",
    "start": "2009190",
    "end": "2017710"
  },
  {
    "text": "set their byte,\nmask it, et cetera. And now my writeback\nis going to--",
    "start": "2017710",
    "end": "2023370"
  },
  {
    "text": "we're going to have a lost\nupdate in the writebacks. Does that make sense? AUDIENCE: [INAUDIBLE].",
    "start": "2023370",
    "end": "2028840"
  },
  {
    "text": "CHARLES LEISERSON: OK. Good. Very good question. Yes, I know. I went through that orally\na little bit quicker",
    "start": "2028840",
    "end": "2034390"
  },
  {
    "text": "than maybe I should have.  Great.",
    "start": "2034390",
    "end": "2039750"
  },
  {
    "text": "So let's talk a little\nbit about implementation. I always like to take\nthings down one level below what you necessarily need\nto know in order to do things.",
    "start": "2039750",
    "end": "2047040"
  },
  {
    "text": "But it's helpful to sort\nof see how these things are implemented, because then\nthat gives you a better",
    "start": "2047040",
    "end": "2055230"
  },
  {
    "text": "sense at a higher level\nwhat your capabilities are and how things are actually\nworking underneath.",
    "start": "2055230",
    "end": "2062669"
  },
  {
    "text": "So let's talk about mutexes. So here, first of\nall, understand there are lots of different mutexes.",
    "start": "2062670",
    "end": "2068520"
  },
  {
    "text": "If you look at an\noperating system, they may have a half a dozen\nor more different mutexes,",
    "start": "2068520",
    "end": "2074070"
  },
  {
    "text": "different locks that can\nprovide mutual exclusion, or parameters that can be\nset for what kind of mutexes.",
    "start": "2074070",
    "end": "2085399"
  },
  {
    "text": "So the first basic\ndifference in most things is whether the mutex is\nyielding or spinning.",
    "start": "2085400",
    "end": "2094020"
  },
  {
    "text": "So a yielding mutex returns\ncontrol to the operating system when it blocks. When a program tries to get--",
    "start": "2094020",
    "end": "2101069"
  },
  {
    "text": "when it tries to\nget access, when a thread tries to get access to\na given lock, if it is blocked,",
    "start": "2101070",
    "end": "2107440"
  },
  {
    "text": "it doesn't just sit\nthere and keep-- and spinning, where you're\nbasically-- spinning",
    "start": "2107440",
    "end": "2113099"
  },
  {
    "text": "means I just sit there checking\nit and checking it and checking it and checking it. Instead what it does\nis it says, oh, I'm",
    "start": "2113100",
    "end": "2119880"
  },
  {
    "text": "doing useless work here. Let me go and return control\nto the operating system. Maybe there's another thread\nthat can run at the same time,",
    "start": "2119880",
    "end": "2128280"
  },
  {
    "text": "and therefore I'll give-- by switching myself out, by\nyielding my scheduling quantum,",
    "start": "2128280",
    "end": "2135779"
  },
  {
    "text": "I will get better\nefficiency overall, because somebody--\nsome other thread that is capable of running\ncan run at that point.",
    "start": "2135780",
    "end": "2142250"
  },
  {
    "text": "So is that a clear distinction\nbetween spinning and yielding? ",
    "start": "2142250",
    "end": "2148470"
  },
  {
    "text": "Another one is whether the mutex\nis reentrant or nonreentrant.",
    "start": "2148470",
    "end": "2154109"
  },
  {
    "start": "2149000",
    "end": "2213000"
  },
  {
    "text": "A reentrant mutex\nallows a thread that is already holding a\nlock to acquire it again.",
    "start": "2154110",
    "end": "2161390"
  },
  {
    "text": "A nonreentrant one\ndeadlocks if the thread attempts to require a\nmutex it already holds.",
    "start": "2161390",
    "end": "2169050"
  },
  {
    "text": "So I grab a lock, and now\nI go to a piece of code that says grab that lock.",
    "start": "2169050",
    "end": "2175980"
  },
  {
    "text": "So very simple. I can check to see\nwhether I have-- if I want to be\nreentrant, I can check, do I have that lock already?",
    "start": "2175980",
    "end": "2182520"
  },
  {
    "text": "And if I do, then I don't\nactually have to acquire it. I just keep going. But that's extra overhead.",
    "start": "2182520",
    "end": "2188880"
  },
  {
    "text": "It's faster for me to\nhave a nonreentrant lock, where I just simply\ngrab the lock,",
    "start": "2188880",
    "end": "2195090"
  },
  {
    "text": "and if somebody has\ngot it, including me, then it's a deadlock. But now if there's\nthe possibility",
    "start": "2195090",
    "end": "2202050"
  },
  {
    "text": "that I could reacquire a lock,\nthen that might not be safe. You have to worry\nabout-- the program has",
    "start": "2202050",
    "end": "2208140"
  },
  {
    "text": "to worry about that now. Is that clear, that one?",
    "start": "2208140",
    "end": "2213270"
  },
  {
    "start": "2213000",
    "end": "2368000"
  },
  {
    "text": "And then a final basic\nproperty of mutexes is whether they're\nfair or unfair.",
    "start": "2213270",
    "end": "2220920"
  },
  {
    "text": "So here's the thing. It's the easiest to think about\nit in the context of spinning.",
    "start": "2220920",
    "end": "2225990"
  },
  {
    "text": "I have several\nthreads that basically came to the same lock, and we\ndecided they're going to spin.",
    "start": "2225990",
    "end": "2234690"
  },
  {
    "text": "They're just going to sit there\ncontinually checking, waiting for that lock to be free.",
    "start": "2234690",
    "end": "2241109"
  },
  {
    "text": "So when finally the guy\nwho has it unlocks it,",
    "start": "2241110",
    "end": "2246870"
  },
  {
    "text": "maybe I've got a half a\ndozen threads sitting there. One of them wins. ",
    "start": "2246870",
    "end": "2253760"
  },
  {
    "text": "And which one wins? Well, they're spinning. It could be any one of them.",
    "start": "2253760",
    "end": "2259970"
  },
  {
    "text": "Then it has one. And so the issue\nthat can go on is",
    "start": "2259970",
    "end": "2265300"
  },
  {
    "text": "you could have what's called\na starvation problem, where some guy is sitting there for\na really long time waiting",
    "start": "2265300",
    "end": "2273730"
  },
  {
    "text": "while everybody else is\ncontinually grabbing locks out from under his or her nose.",
    "start": "2273730",
    "end": "2281710"
  },
  {
    "text": "So with a fair mutex,\nbasically what you do is you go for the one that's\nbeen waiting the longest,",
    "start": "2281710",
    "end": "2288130"
  },
  {
    "text": "essentially. And so, therefore,\nyou never have to wait more than for however\nmany things were there",
    "start": "2288130",
    "end": "2294940"
  },
  {
    "text": "when you got there\nbefore you're able to go. Question.",
    "start": "2294940",
    "end": "2300722"
  },
  {
    "text": "AUDIENCE: Why is that better?  CHARLES LEISERSON: It can be\nbetter because you may freeze",
    "start": "2300722",
    "end": "2306740"
  },
  {
    "text": "out our service if there's\nsomething that's-- you may never get to do the\nthing that you want to do",
    "start": "2306740",
    "end": "2315650"
  },
  {
    "text": "because there's something\nelse always interfering with the ability for that part of\nthe program to make progress.",
    "start": "2315650",
    "end": "2321260"
  },
  {
    "text": "This tends to be\nmore of an issue in concurrent\nprogramming, where you",
    "start": "2321260",
    "end": "2326750"
  },
  {
    "text": "have different programs\nthat are trying to accomplish\ndifferent tasks and you want to accomplish both tasks.",
    "start": "2326750",
    "end": "2334782"
  },
  {
    "text": "It does not come across-- in parallel programming,\nmostly we deal with unfair--",
    "start": "2334782",
    "end": "2341480"
  },
  {
    "text": "often unfair spinning locks\nbecause they're the cheapest. And we just trust\nthat, a, we're not",
    "start": "2341480",
    "end": "2349100"
  },
  {
    "text": "going to have any critical\nregions-- we write our code so we don't have\ncritical regions that are really long, so nobody ever\nhas to wait a very long time.",
    "start": "2349100",
    "end": "2357500"
  },
  {
    "text": "But, indeed, dealing\nwith a contention issue, as we talked about last\nweek, can make a difference.",
    "start": "2357500",
    "end": "2366260"
  },
  {
    "text": "good. So here's an implementation\nof a simple spinning mutex an assembly language.",
    "start": "2366260",
    "end": "2371810"
  },
  {
    "text": " So the first thing\nit does is it checks",
    "start": "2371810",
    "end": "2377480"
  },
  {
    "text": "to see if the-- the mutex\nis free if its value is 0. So it compares the\nvalue of the mutex to 0.",
    "start": "2377480",
    "end": "2383690"
  },
  {
    "text": "And if it is 0, it\nsays, oh, it's free. Let me go get it. It then-- to get the mutex,\nwhat it does is it moves a 1",
    "start": "2383690",
    "end": "2395450"
  },
  {
    "text": "into the-- it basically moves\n1 into a register,",
    "start": "2395450",
    "end": "2400700"
  },
  {
    "text": "and then it exchanges the\nmutex with that register eax.",
    "start": "2400700",
    "end": "2407599"
  },
  {
    "text": "And then it compares\nto see whether or not it actually got the mutex.",
    "start": "2407600",
    "end": "2413780"
  },
  {
    "text": "And if it didn't, then it\ngoes back up to the top and starts again.",
    "start": "2413780",
    "end": "2418880"
  },
  {
    "text": "And then the other branch\nis at the top there. It does this pause,\nand this apparently",
    "start": "2418880",
    "end": "2424579"
  },
  {
    "text": "is due to a bug in\nx86 that they end up having to put this pause\ninstruction in there.",
    "start": "2424580",
    "end": "2430550"
  },
  {
    "text": "And then, otherwise,\nyou jump to where the Spin_Mutex is and go again.",
    "start": "2430550",
    "end": "2436880"
  },
  {
    "text": "And then, once you've\ndone the Critical_Section, when you're done you free\nit by just setting it to 0.",
    "start": "2436880",
    "end": "2442369"
  },
  {
    "text": "So the question here is--\nso the exchange instruction",
    "start": "2442370",
    "end": "2455570"
  },
  {
    "text": "is an atomic exchange. So it takes the register and the\nmemory value and it swaps them,",
    "start": "2455570",
    "end": "2460950"
  },
  {
    "text": "and you can't have\nanything come in. So one of the things\nthat might have you confused a little bit\nhere is, wait a second.",
    "start": "2460950",
    "end": "2467060"
  },
  {
    "text": "I checked to see if\nthe mutex is free, and then I tried to get it\nto test if I was successful.",
    "start": "2467060",
    "end": "2473300"
  },
  {
    "text": "Why? Why can't I just start out by\nessentially going to get mutex?",
    "start": "2473300",
    "end": "2480260"
  },
  {
    "text": " I mean, why do I need any of\nthe code between Spin_Mutex",
    "start": "2480260",
    "end": "2488710"
  },
  {
    "text": "and Get_Mutex? ",
    "start": "2488710",
    "end": "2496790"
  },
  {
    "text": "So if I just started with\nGet_Mutex, I would move a 1 in. I would exchange, check\nto see if I could get it.",
    "start": "2496790",
    "end": "2503240"
  },
  {
    "text": "If I had it, fine. Then I execute the end. If not, I would go\nback and try again.",
    "start": "2503240",
    "end": "2516690"
  },
  {
    "text": "So why-- because if\nsomebody has it, by the way,",
    "start": "2516690",
    "end": "2523168"
  },
  {
    "text": "the value that I'm going\nto get is going to be 1. And that's what I swapped in,\nso I haven't changed anything.",
    "start": "2523168",
    "end": "2528900"
  },
  {
    "text": "I go back and I check again. So why do I need\nthat first part? Yes.",
    "start": "2528900",
    "end": "2534160"
  },
  {
    "text": "AUDIENCE: Maybe it's faster\nto just get [INAUDIBLE].. CHARLES LEISERSON: Yes. Maybe it's faster.",
    "start": "2534160",
    "end": "2540010"
  },
  {
    "text": "So, indeed, it's\nbecause it's faster. Even though you're executing\nextra code, it's faster.",
    "start": "2540010",
    "end": "2546150"
  },
  {
    "text": "Tell me why it's faster. And this will take\nyou-- you have to think a little bit\nabout the cache protocols",
    "start": "2546150",
    "end": "2552900"
  },
  {
    "text": "and the invalidation issue. So why is it going to be faster? ",
    "start": "2552900",
    "end": "2560990"
  },
  {
    "text": "Yes. AUDIENCE: Because I do\nthe atomic exchange. CHARLES LEISERSON: OK, good. Say more.",
    "start": "2560990",
    "end": "2567078"
  },
  {
    "text": "AUDIENCE: Basically, just\nto exchange atomically, you have to have [INAUDIBLE]. ",
    "start": "2567078",
    "end": "2577265"
  },
  {
    "text": "And you bring it in\nonly just to do a swap. CHARLES LEISERSON: Yes. So it turns out the exchange\noperation is like a write.",
    "start": "2577266",
    "end": "2585100"
  },
  {
    "text": "And so in order to\ndo a write, what do I need to do for the\ncache line that it's on?",
    "start": "2585100",
    "end": "2592210"
  },
  {
    "text": "AUDIENCE: To bring it in. CHARLES LEISERSON:\nTo bring it in. But how does it have\nto be brought in? Remember, the cache lines have--",
    "start": "2592210",
    "end": "2598610"
  },
  {
    "text": "let's ima-- AUDIENCE: [INAUDIBLE]. CHARLES LEISERSON: You have to\ninvalidate on the other ones,",
    "start": "2598610",
    "end": "2603680"
  },
  {
    "text": "and you have to hold\nit in what state? Remember, the cache lines have-- if we take a look at just a\nsimplified protocol where--",
    "start": "2603680",
    "end": "2612609"
  },
  {
    "text": "the MSI's protocol. AUDIENCE: [INAUDIBLE]. ",
    "start": "2612610",
    "end": "2620702"
  },
  {
    "text": "CHARLES LEISERSON: Yes. You have to have it-- in MSI or MESI, you have\nto bring it in in modified",
    "start": "2620702",
    "end": "2628530"
  },
  {
    "text": "or at least exclusive state. So exclusive is for\nthe MESI protocol.",
    "start": "2628530",
    "end": "2633960"
  },
  {
    "text": "We mentioned that but\nwe didn't really do it. Mostly we just went-- but I have to bring\nit in and modify it,",
    "start": "2633960",
    "end": "2639120"
  },
  {
    "text": "where I guarantee there\nare no other copies. So if I've got two guys that\nare polling on this location,",
    "start": "2639120",
    "end": "2645270"
  },
  {
    "text": "they're both continually\ninvalidating each other, and you create a whole bunch of\ntraffic on the memory network.",
    "start": "2645270",
    "end": "2652300"
  },
  {
    "text": "That's going to slow\neverything down. Whereas if I do the first one,\nwhat state do I get it in?",
    "start": "2652300",
    "end": "2658230"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. CHARLES LEISERSON: Then\nyou get it in shared state. What does the other\nguy get it in? AUDIENCE: Shared. CHARLES LEISERSON: Shared state.",
    "start": "2658230",
    "end": "2664303"
  },
  {
    "text": "And now I keep\ngoing, just having it spinning in my\nown local cache, not generating any local\ntraffic until the--",
    "start": "2664303",
    "end": "2674220"
  },
  {
    "text": "until somebody releases\nthe lock, in which case it invalidates all those.",
    "start": "2674220",
    "end": "2679859"
  },
  {
    "text": "And now you can actually\nget a little bit of a storm after the fact. There are in fact locks\nwhere you don't even",
    "start": "2679860",
    "end": "2685333"
  },
  {
    "text": "get a storm after the\nfact called MCS locks. But this kind of lock is,\nfor most practical purposes,",
    "start": "2685333",
    "end": "2693420"
  },
  {
    "text": "just fine.  So everybody follow\nthat description",
    "start": "2693420",
    "end": "2700398"
  },
  {
    "text": "of what's going on there? So that first code, for\ncorrectness purpose, is not important. For performance,\nit is important.",
    "start": "2700398",
    "end": "2706780"
  },
  {
    "text": " Isn't it great that you guys\ncan read assembly language?",
    "start": "2706780",
    "end": "2711880"
  },
  {
    "start": "2711880",
    "end": "2720490"
  },
  {
    "text": "Now suppose that-- this\nis a spinning mutex. Suppose that I want to\ndo a yielding mutex.",
    "start": "2720490",
    "end": "2726538"
  },
  {
    "text": "How does this code\nhave to change? ",
    "start": "2726538",
    "end": "2733947"
  },
  {
    "text": "So this is a spinning one. It just keeps checking. Instead, I want\nto return control to the operating system. ",
    "start": "2733947",
    "end": "2741210"
  },
  {
    "text": "So how does this code\nchange if I do that? Yes. AUDIENCE: Instead of\nthe pause, [INAUDIBLE]..",
    "start": "2741210",
    "end": "2747121"
  },
  {
    "text": " CHARLES LEISERSON: Like that.",
    "start": "2747122",
    "end": "2753730"
  },
  {
    "text": "Yes, exactly. So instead of doing that\npause instruction, which--",
    "start": "2753730",
    "end": "2762089"
  },
  {
    "text": "the documentation on\nthis is not very clear. I'd love to have the inside\nscoop on why they really",
    "start": "2762090",
    "end": "2768850"
  },
  {
    "text": "had to do the pause there. But in any case,\nyou take that no op",
    "start": "2768850",
    "end": "2774040"
  },
  {
    "text": "that they want to have in\nthere and you replace it with just a call to the yield,\nwhich allows the operating",
    "start": "2774040",
    "end": "2781780"
  },
  {
    "text": "system to schedule\nsomething else. And then when it's\nyour turn again, it resumes from that point.",
    "start": "2781780",
    "end": "2788320"
  },
  {
    "text": "So that's the yield.  So that's the difference\nin implementation,",
    "start": "2788320",
    "end": "2794950"
  },
  {
    "text": "essentially, between a spinning\nmutex and a yielding mutex. ",
    "start": "2794950",
    "end": "2801869"
  },
  {
    "text": "Now, there's another\nkind of mutex that is kind of cool which is\ncalled a competitive mutex.",
    "start": "2801870",
    "end": "2808710"
  },
  {
    "text": "So think about it this way. I have competing goals. One is I want to get the\nmutex as quickly as possible",
    "start": "2808710",
    "end": "2818820"
  },
  {
    "text": "after it's released. I don't want-- if\nit's unlocked, I don't want to sit there\nfor a really long time",
    "start": "2818820",
    "end": "2827970"
  },
  {
    "text": "before I actually acquire it. And, two, yes, but I don't\nwant to sit there spinning",
    "start": "2827970",
    "end": "2835020"
  },
  {
    "text": "for a really long time. And then-- because as\nlong as I'm doing that,",
    "start": "2835020",
    "end": "2841760"
  },
  {
    "text": "I'm taking up cycles and\nnot accomplishing anything. Let me turn it over to some\nother thread that can use",
    "start": "2841760",
    "end": "2847670"
  },
  {
    "text": "the cycles more effectively. So there are those two goals.",
    "start": "2847670",
    "end": "2853890"
  },
  {
    "text": "How can I get the best\nof both worlds here? ",
    "start": "2853890",
    "end": "2859967"
  },
  {
    "text": "Something that's close to\nthe best of both worlds. It's not absolutely the\nbest of both worlds, but it's close to the\nbest of both worlds.",
    "start": "2859967",
    "end": "2866140"
  },
  {
    "text": " What strategy could I do?",
    "start": "2866140",
    "end": "2871799"
  },
  {
    "text": "So I want to claim it very soon. So the point is that\nthe spinning mutex",
    "start": "2871800",
    "end": "2876940"
  },
  {
    "text": "achieves goal 1, and the\nyielding mutex achieved goal 2.",
    "start": "2876940",
    "end": "2884890"
  },
  {
    "text": "So how can I-- what can\nI do to get both goals? Yes. AUDIENCE: [INAUDIBLE] you\ncould use some sort of message",
    "start": "2884890",
    "end": "2890873"
  },
  {
    "text": "passing to [INAUDIBLE]. ",
    "start": "2890873",
    "end": "2903542"
  },
  {
    "text": "CHARLES LEISERSON:\nSo you're saying use message passing to inform--",
    "start": "2903542",
    "end": "2909106"
  },
  {
    "text": "AUDIENCE: The waiting threads. CHARLES LEISERSON:\n--the waiting threads. I'm think of something a\nlot simpler in this context.",
    "start": "2909106",
    "end": "2917812"
  },
  {
    "text": "Because the message\npassing, you're going to have to go through-- to do message passing\nproperly, you actually need to use mutexes that\nare to implement it.",
    "start": "2917812",
    "end": "2926320"
  },
  {
    "text": "So you want to be a little\nbit careful about that.",
    "start": "2926320",
    "end": "2931930"
  },
  {
    "text": "But interesting idea. Yes. AUDIENCE: Could you\ntry using an interrupt?",
    "start": "2931930",
    "end": "2938150"
  },
  {
    "text": "CHARLES LEISERSON:\nUsing an interrupt. How would you do that? AUDIENCE: Like once\nthe [INAUDIBLE]..",
    "start": "2938150",
    "end": "2946531"
  },
  {
    "text": " CHARLES LEISERSON: Yes. So, typically, if you\nimplement interrupt",
    "start": "2946531",
    "end": "2951588"
  },
  {
    "text": "you also need to have some\nmutual exclusions to do it properly, but-- I mean, hardware\nwill support that.",
    "start": "2951588",
    "end": "2958579"
  },
  {
    "text": "That's pretty\nheavy-handed as well. There's actually a\nvery simple solution. ",
    "start": "2958580",
    "end": "2969920"
  },
  {
    "text": "I'm seeing familiar hands. I want to see some\nunfamiliar hands. Who's got an unfamiliar hand? ",
    "start": "2969920",
    "end": "2977390"
  },
  {
    "text": "I see. You raised your\nleft hand that time instead of your right hand. Yes.",
    "start": "2977390",
    "end": "2983075"
  },
  {
    "text": "AUDIENCE: You try\nto have whichever one is closest to being back\nto the beginning of the cycle",
    "start": "2983075",
    "end": "2988597"
  },
  {
    "text": "take the lock. CHARLES LEISERSON: Hard\nto measure that, right? How would you write\ncode to measure that?",
    "start": "2988597",
    "end": "2994250"
  },
  {
    "text": "Yes. Hmm. Hmm. Yes.",
    "start": "2994250",
    "end": "2999640"
  },
  {
    "text": "Go ahead. AUDIENCE: I have a\nquestion, actually. CHARLES LEISERSON: OK, good. AUDIENCE: Why does\nit [INAUDIBLE]??",
    "start": "2999640",
    "end": "3006200"
  },
  {
    "text": " CHARLES LEISERSON:\nWhy doesn't it have a?",
    "start": "3006200",
    "end": "3012530"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. Why does yielding\nmutex [INAUDIBLE]?? ",
    "start": "3012530",
    "end": "3019380"
  },
  {
    "text": "CHARLES LEISERSON:\nBecause if I yield-- so what's the-- how often does--",
    "start": "3019380",
    "end": "3024660"
  },
  {
    "text": "if I context switch, how often\nis it going to be that I-- how long am I going to\nhave to wait, typically,",
    "start": "3024660",
    "end": "3031650"
  },
  {
    "text": "before I am scheduled again?  When a code yields to\nthe operating system,",
    "start": "3031650",
    "end": "3038790"
  },
  {
    "text": "how often does the\noperating system normally do context switching?",
    "start": "3038790",
    "end": "3044070"
  },
  {
    "text": "What's the rate at which\nit context switches for the different\nmultiplexing of threads that it does onto the\navailable processors?",
    "start": "3044070",
    "end": "3053760"
  },
  {
    "text": "What's the rate at\nwhich it shifts? Oh, this is-- OK, that's going\nto be on the quiz.",
    "start": "3053760",
    "end": "3062230"
  },
  {
    "text": "This is a numeracy thing. Yes. Do you know how frequently? AUDIENCE: [INAUDIBLE]\nsub-millisecond [INAUDIBLE]..",
    "start": "3062230",
    "end": "3070490"
  },
  {
    "text": "CHARLES LEISERSON:\nNot quite, but you're not off by more than\nan order of magnitude.",
    "start": "3070490",
    "end": "3077392"
  },
  {
    "text": " So what are the typical\nrates that the system",
    "start": "3077393",
    "end": "3083450"
  },
  {
    "text": "does context switching? So in human time, it's\nthe blink of an eye.",
    "start": "3083450",
    "end": "3091083"
  },
  {
    "text": "So it's actually\naround 10 milliseconds. So it does a hundred\ntimes a second. Some of them do. Some do 60 times a second.",
    "start": "3091083",
    "end": "3098329"
  },
  {
    "text": "That's how often it switches. Now, let's say it's a\nhundred times a second, 10",
    "start": "3098330",
    "end": "3104600"
  },
  {
    "text": "milliseconds. So you're pretty close. 10 milliseconds. How many orders of magnitude\nis that from the execution",
    "start": "3104600",
    "end": "3113510"
  },
  {
    "text": "of a simple instruction? So we're going at\nmore than a gigahertz.",
    "start": "3113510",
    "end": "3118960"
  },
  {
    "text": " And so a gigahertz\nis 10 to the ninth,",
    "start": "3118960",
    "end": "3125200"
  },
  {
    "text": "and we're talking\n10 to the minus 9, and we're talking\n10 to the minus 2.",
    "start": "3125200",
    "end": "3130359"
  },
  {
    "text": "So that's 10 million\ninstruction opportunities",
    "start": "3130360",
    "end": "3137110"
  },
  {
    "text": "that we miss if we switch out. And, of course, we'd probably\nonly switch out for half our--",
    "start": "3137110",
    "end": "3142210"
  },
  {
    "text": "where are you along the thing. So you're only switching\nout maybe for half, assuming nothing else\nis going on there.",
    "start": "3142210",
    "end": "3147760"
  },
  {
    "text": "But that means you're not\ngrabbing the lock quickly after it's released,\nbecause you've",
    "start": "3147760",
    "end": "3153430"
  },
  {
    "text": "got 10 million instructions\nthat are going to execute before you're going to have a\nchance to come back in and grab",
    "start": "3153430",
    "end": "3160480"
  },
  {
    "text": "it. So that's why a yielding one\ndoes not grab it quickly.",
    "start": "3160480",
    "end": "3168760"
  },
  {
    "text": "Whereas spinning is like\nwe're executing this stuff at the rate of gigahertz,\nchecking again, checking again,",
    "start": "3168760",
    "end": "3173980"
  },
  {
    "text": "checking again. So why-- so what's\nthe strategy here?",
    "start": "3173980",
    "end": "3180109"
  },
  {
    "text": "What can I do? Yes. AUDIENCE: Maybe we could\nspin for a little bit and then yield.",
    "start": "3180110",
    "end": "3186052"
  },
  {
    "text": "CHARLES LEISERSON:\nHey, what a good idea. ",
    "start": "3186052",
    "end": "3191140"
  },
  {
    "text": "Spin for a while and then yield. So the idea being, hey, if\nthe lock is released soon,",
    "start": "3191140",
    "end": "3202780"
  },
  {
    "text": "then I will be able\nto grab it immediately because I'm spinning.",
    "start": "3202780",
    "end": "3208220"
  },
  {
    "text": "If it takes a long time\nfor the lock to yield, well, I will yield eventually.",
    "start": "3208220",
    "end": "3213330"
  },
  {
    "text": "So yes, but how long to spin? ",
    "start": "3213330",
    "end": "3222510"
  },
  {
    "text": "How long shall I spin? Sure. AUDIENCE: Somewhere close\nto the amount of time",
    "start": "3222510",
    "end": "3228938"
  },
  {
    "text": "it takes to yield and come back. CHARLES LEISERSON: Yes. Basically as long as a\ncontext switch takes, as long",
    "start": "3228938",
    "end": "3235570"
  },
  {
    "text": "as it takes to go\nout and come back. And if you do that,\nthen you never",
    "start": "3235570",
    "end": "3243520"
  },
  {
    "text": "wait more than twice\nthe optimal time. This is competitive analysis,\nwhich the theoreticians have",
    "start": "3243520",
    "end": "3251580"
  },
  {
    "text": "gone off-- there's brilliant\nwork in competitive analysis. So the idea here is\nthat if the mutex is",
    "start": "3251580",
    "end": "3258090"
  },
  {
    "text": "released while you're spinning,\nthen this strategy is optimal. ",
    "start": "3258090",
    "end": "3264740"
  },
  {
    "text": "Because you just\nsat there spinning, and as soon as it was there\nyou got it on the next cycle.",
    "start": "3264740",
    "end": "3271099"
  },
  {
    "text": "If the mutex is released\nafter the yield, you've already spun\nfor the equal to that.",
    "start": "3271100",
    "end": "3277619"
  },
  {
    "text": "So you'll come back and get it\nwithin at most a factor of 2.",
    "start": "3277620",
    "end": "3283790"
  },
  {
    "text": "This is-- by the\nway, this shows up in the theory literature,\nif you're interested, is it's called the\nski rental problem.",
    "start": "3283790",
    "end": "3290930"
  },
  {
    "text": "And here's the idea. You're going to go-- your friends have persuaded\nyou to go try skiing.",
    "start": "3290930",
    "end": "3297290"
  },
  {
    "text": "Snow skiing, right? Pu-chu, pu-chu, pu-chu. Right? And so you say, gee,\nshould I buy the equipment",
    "start": "3297290",
    "end": "3305360"
  },
  {
    "text": "or should I rent? After all, you may discover\nthat you rent and then--",
    "start": "3305360",
    "end": "3311870"
  },
  {
    "text": "you buy it, and then\nyou break your leg and never want to go back. Well, then, if you've bought\nit's been very expensive.",
    "start": "3311870",
    "end": "3318900"
  },
  {
    "text": "And if you've rented, well,\nthen you're probably better off. On the other hand, if it\nturns out you like it,",
    "start": "3318900",
    "end": "3324500"
  },
  {
    "text": "you're now accumulating\nthe costs going forward. And so the question is,\nwell, what's your strategy?",
    "start": "3324500",
    "end": "3332030"
  },
  {
    "text": "And the idea is, well, let's\nlook at what renting costs and what buying costs. Let me rent until it's\nequal to the cost of buying",
    "start": "3332030",
    "end": "3342890"
  },
  {
    "text": "and then buy. And then I'm within\na factor of 2 of having spent the optimal\namount of money for--",
    "start": "3342890",
    "end": "3349700"
  },
  {
    "text": "because then if I break my leg\nafter that, well, at least I-- ",
    "start": "3349700",
    "end": "3356059"
  },
  {
    "text": "I got-- I didn't spend\nmore than a factor of 2. And if I get it before,\nthen I've spent optimally.",
    "start": "3356060",
    "end": "3364460"
  },
  {
    "text": "Yes. AUDIENCE: So when you say how\nlong a context switch takes,",
    "start": "3364460",
    "end": "3369790"
  },
  {
    "text": "is that in milliseconds or-- CHARLES LEISERSON: Yes. 10 milliseconds. Yes.",
    "start": "3369790",
    "end": "3375060"
  },
  {
    "text": "So spin for 10 milliseconds,\nand then switch. So now the point is that\nwhen you come back in,",
    "start": "3375060",
    "end": "3384270"
  },
  {
    "text": "the other job's going to run\nfor 10 milliseconds or whatever. ",
    "start": "3384270",
    "end": "3390359"
  },
  {
    "text": "So if you get switched out,\nthen if the lock is released, you're going to be done\nin 20 milliseconds.",
    "start": "3390360",
    "end": "3399690"
  },
  {
    "text": "And so you'll be\nwithin a factor of 2. And if it happened if the\nlockout released before then, you're right there to grab it.",
    "start": "3399690",
    "end": "3407580"
  },
  {
    "text": "Now, it turns out that\nthere's a really clever randomized algorithm-- I love this algorithm--",
    "start": "3407580",
    "end": "3413520"
  },
  {
    "text": "from 1994 that achieves\na competitive ratio of e over e minus 1 using\na randomized strategy.",
    "start": "3413520",
    "end": "3422609"
  },
  {
    "text": "And I'll encourage\nyou, those of you have a theoretical bent,\nto go take a look at that.",
    "start": "3422610",
    "end": "3429120"
  },
  {
    "text": "It's very clever. So, basically, you have\nsome probability of,",
    "start": "3429120",
    "end": "3434369"
  },
  {
    "text": "at every step, of whether\nyou, at that point, decide to yield or\ncontinue spinning.",
    "start": "3434370",
    "end": "3444360"
  },
  {
    "text": "And by using a\nrandomized strategy, you can actually get\nthis to e over e minus 1.",
    "start": "3444360",
    "end": "3452579"
  },
  {
    "text": "Questions about this? So this is sort of\nsome of the basics. I'm glad we went\nover some of that, because everybody should know\nthese basic numbers about what",
    "start": "3452580",
    "end": "3460440"
  },
  {
    "text": "things cost. Because, otherwise, you\ndon't know where to spend it. So context switching time is on\nthe order of 10 milliseconds.",
    "start": "3460440",
    "end": "3466170"
  },
  {
    "text": "How long is a disk\naccess compared to--",
    "start": "3466170",
    "end": "3473410"
  },
  {
    "text": "yes. What's a disk access? AUDIENCE: 150 cycles? CHARLES LEISERSON: 150 cycles?",
    "start": "3473410",
    "end": "3481518"
  },
  {
    "text": "Hmm, that's a-- AUDIENCE: Or is that the cache? CHARLES LEISERSON: That\nwould be accessing DRAM.",
    "start": "3481518",
    "end": "3487270"
  },
  {
    "text": " Accessing DRAM, if it wasn't\nin cache, might be 150 cycles.",
    "start": "3487270",
    "end": "3495070"
  },
  {
    "text": "So two orders of\nmagnitude or so. So what about a disk access? How long does that take?",
    "start": "3495070",
    "end": "3501450"
  },
  {
    "text": "Yes. AUDIENCE: Milliseconds? CHARLES LEISERSON: Yes. Several milliseconds. So 10 milliseconds or 5\nmilliseconds depending",
    "start": "3501450",
    "end": "3507160"
  },
  {
    "text": "upon how fast your disk is. But, once again, it's on\nthe order of milliseconds. So it's helpful to know\nsome of these numbers,",
    "start": "3507160",
    "end": "3513280"
  },
  {
    "text": "because, otherwise, where\nare you spending your time? Especially, we're sort of\ndoing performance engineering",
    "start": "3513280",
    "end": "3521109"
  },
  {
    "text": "in the small, basically\nlooking within the pro-- within a multicore processor.",
    "start": "3521110",
    "end": "3526120"
  },
  {
    "text": "Most performance engineering\nis on all the stuff on the outside, dealing with\nnetworking, and file systems,",
    "start": "3526120",
    "end": "3531910"
  },
  {
    "text": "and stuff where things\nare really costly, and where, if you actually\nhave a lot of time, you can write a fast piece\nof code that can figure out",
    "start": "3531910",
    "end": "3539650"
  },
  {
    "text": "how you should best deal\nwith these slow parts of your system.",
    "start": "3539650",
    "end": "3545050"
  },
  {
    "text": "So those are all sort\nof good numbers to know. You'll probably see\nsome of them on quiz 2. ",
    "start": "3545050",
    "end": "3556680"
  },
  {
    "text": "Deadlock. I mentioned deadlock earlier. Let's talk about what deadlock\nis and understand this.",
    "start": "3556680",
    "end": "3565170"
  },
  {
    "text": "Once again, I expect some\nof you have seen this, but I still want to go\nthrough it because it's hugely important material.",
    "start": "3565170",
    "end": "3573120"
  },
  {
    "start": "3567000",
    "end": "3599000"
  },
  {
    "text": "And this is the issue, that\nholding more than one lock at a time can be dangerous.",
    "start": "3573120",
    "end": "3578550"
  },
  {
    "text": "So imagine that thread 1 says,\nI'm going to lock A, lock B,",
    "start": "3578550",
    "end": "3583800"
  },
  {
    "text": "execute the critical section,\nunlock B, unlock A, were A and B are mutexes. And thread 2 does\nsomething very similar.",
    "start": "3583800",
    "end": "3591450"
  },
  {
    "text": "It locks B and locks A. Then\nit does the critical section, then it unlocks A\nand then unlocks",
    "start": "3591450",
    "end": "3596970"
  },
  {
    "text": "B. So what can happen here? So thread 1 locks\nA, thread 2 locks",
    "start": "3596970",
    "end": "3604260"
  },
  {
    "text": "B. Thread 1 can't go and lock\nB because thread 2 has it.",
    "start": "3604260",
    "end": "3613190"
  },
  {
    "text": "Thread 2 can't go and lock\nA because thread 1 has it. So they sit there, blocked.",
    "start": "3613190",
    "end": "3619100"
  },
  {
    "text": "I don't care if they're\nspinning or yielding. They're not going anywhere.",
    "start": "3619100",
    "end": "3624319"
  },
  {
    "text": "So this is the ultimate\nloss of performance. It's like-- it's incorrect.",
    "start": "3624320",
    "end": "3630440"
  },
  {
    "text": "It's like you're stuck,\nyou've deadlocked. Now, there's three basic\nconditions for deadlock.",
    "start": "3630440",
    "end": "3638540"
  },
  {
    "text": "Everybody understands\nthis, right? Is there anybody who has\na question, because just--",
    "start": "3638540",
    "end": "3644980"
  },
  {
    "text": "OK. There's three conditions\nyou need for deadlock. The first one is\nmutual exclusion,",
    "start": "3644980",
    "end": "3651060"
  },
  {
    "text": "that you're going to\nhave exclusive control over the resources. The second is nonpreemption.",
    "start": "3651060",
    "end": "3656630"
  },
  {
    "text": "You don't release\nyour resources. You hold until you\nfinish using them.",
    "start": "3656630",
    "end": "3662990"
  },
  {
    "text": "And three is circular waiting. You have a cycle of threads,\nin which each thread is blocked waiting for resources\nheld by the next one.",
    "start": "3662990",
    "end": "3670580"
  },
  {
    "text": "In this case, the\nresource is the lock. And so if you remove any\none of these constraints,",
    "start": "3670580",
    "end": "3678710"
  },
  {
    "text": "you can come up with\nsolutions that won't deadlock. So, for example, it\ncould be that when I try to acquire a lock,\nif somebody else has them,",
    "start": "3678710",
    "end": "3687260"
  },
  {
    "text": "I take it away.  That could be one thing.",
    "start": "3687260",
    "end": "3692420"
  },
  {
    "text": "Now, they may get into other\nissues, which is like, well, but what if he's actually\ndoing real work or whatever?",
    "start": "3692420",
    "end": "3699500"
  },
  {
    "text": "So all of these\nthings have things. Or I don't insist that it be\nmutual exclusion, except that's",
    "start": "3699500",
    "end": "3706460"
  },
  {
    "text": "the kind of problem that\nwe're trying to solve. So these are generally\nthe three things",
    "start": "3706460",
    "end": "3711950"
  },
  {
    "text": "that are necessary in order\nto have a deadlock situation.",
    "start": "3711950",
    "end": "3718820"
  },
  {
    "text": "Now, in any discussion\nof deadlock, you have to talk about\ndining philosophers.",
    "start": "3718820",
    "end": "3724069"
  },
  {
    "text": "When I was an undergraduate-- and I graduated in 1975 from\nYale, a humanities school--",
    "start": "3724070",
    "end": "3734540"
  },
  {
    "text": " I was taught the\ndining philosophers,",
    "start": "3734540",
    "end": "3740720"
  },
  {
    "text": "because, after all,\nphilosophy is what you find at humanities schools.",
    "start": "3740720",
    "end": "3746177"
  },
  {
    "text": "I mean, we have a\nphilosophy department too. Don't get me wrong. But at Yale the\nhumanities is huge.",
    "start": "3746177",
    "end": "3751820"
  },
  {
    "text": "And so philosophy,\nI guess they thought this would appeal to\nthe people who were not real techies in the background.",
    "start": "3751820",
    "end": "3758570"
  },
  {
    "text": "I sort of like-- I was a techie in the midst of\nall these non-technical people.",
    "start": "3758570",
    "end": "3764809"
  },
  {
    "text": "Dining philosophers\nis a story of deadlock told by Tony Hoare based\non an examination question",
    "start": "3764810",
    "end": "3773990"
  },
  {
    "text": "by Edsger Dijkstra. And it's been embellished\nover the years by many, many, many retellers.",
    "start": "3773990",
    "end": "3781550"
  },
  {
    "text": "And I like the Chinese\nversion of this. There's versions where they\nuse forks, but I'm going to--",
    "start": "3781550",
    "end": "3786950"
  },
  {
    "text": "this is going to\nbe-- they're dining-- I'm going to say that they are\neating noodles with chopsticks.",
    "start": "3786950",
    "end": "3793130"
  },
  {
    "text": "And there are n philosophers\nseated around the table, and between every plate of\nnoodles there's a chopstick.",
    "start": "3793130",
    "end": "3801320"
  },
  {
    "text": "And so in order\nto eat the noodles they need two chopsticks, which\nto me sounds very natural.",
    "start": "3801320",
    "end": "3811190"
  },
  {
    "text": "And so here's the code\nfor philosopher i. So he's a philosopher, so he\nstarts by thinking for a while.",
    "start": "3811190",
    "end": "3820760"
  },
  {
    "text": "And then he gets hungry,\nhe or she gets hungry.",
    "start": "3820760",
    "end": "3826010"
  },
  {
    "text": "So the philosopher grabs\nthe chopstick on the right--",
    "start": "3826010",
    "end": "3833680"
  },
  {
    "text": "on the left, sorry. And then he grabs the one on\nthe right, which is i plus 1.",
    "start": "3833680",
    "end": "3843339"
  },
  {
    "text": "But he has to do that mod n,\nbecause if it's the last one, you've got to go around\nand grab the first one.",
    "start": "3843340",
    "end": "3849880"
  },
  {
    "text": "Then eats, and then it\nunlocks the two chopsticks. And now they can be used by\nthe other dining philosophers",
    "start": "3849880",
    "end": "3857650"
  },
  {
    "text": "because they don't think much\nabout sanitation and so forth.",
    "start": "3857650",
    "end": "3865349"
  },
  {
    "text": "Because they're too\nbusy thinking, right?  But what happens?",
    "start": "3865350",
    "end": "3870760"
  },
  {
    "text": "What's wrong with this solution? What happens? What can happen for this? It's very simple. I need two chopsticks.",
    "start": "3870760",
    "end": "3876730"
  },
  {
    "text": "I grab one, I grab\nthe other, I eat. One day, what happens?",
    "start": "3876730",
    "end": "3882010"
  },
  {
    "text": " Yes. AUDIENCE: Everyone grabs\nthe chopstick to the left",
    "start": "3882010",
    "end": "3888080"
  },
  {
    "text": "and they're all stuck\nwith one chopstick. CHARLES LEISERSON: Yes. They grab one to the left,\nand now they go to the right.",
    "start": "3888080",
    "end": "3893890"
  },
  {
    "text": "It's not there, and they starve. One day they grab\nall the things,",
    "start": "3893890",
    "end": "3899500"
  },
  {
    "text": "so we have the starving\nphilosophers problem. ",
    "start": "3899500",
    "end": "3905980"
  },
  {
    "text": "So motivated by this\nproblem-- yes, question. AUDIENCE: Is there any way\nto temporarily unlock it?",
    "start": "3905980",
    "end": "3912690"
  },
  {
    "text": "Like the philosopher could just\nhand the chopstick [INAUDIBLE].. CHARLES LEISERSON: Yes. So if you're willing to preempt,\nthen that would be preemption.",
    "start": "3912690",
    "end": "3918800"
  },
  {
    "text": "As I say, it's got to be\nnonpreemptive in order for deadlock to occur. In this case, yes. But you also have to\nworry in those cases.",
    "start": "3918800",
    "end": "3925690"
  },
  {
    "text": "Could be, oh, well if\nI couldn't get both, let me put them both down. But then you can have a\nthing that's called livelock.",
    "start": "3925690",
    "end": "3934900"
  },
  {
    "text": "So they all pick up their left. They see the right one's\nbusy, so they put it down so somebody else can have it.",
    "start": "3934900",
    "end": "3939950"
  },
  {
    "text": "They look around. Oh, OK. Let me pick up one. Oh, no. OK.",
    "start": "3939950",
    "end": "3946109"
  },
  {
    "text": "And so they still starve even\nthough they've done that. So in that kind of situation,\nyou could put in a time delay.",
    "start": "3946110",
    "end": "3953099"
  },
  {
    "text": "You could say-- let everybody\npick a random number to have a randomized scheme\nso that we're not--",
    "start": "3953100",
    "end": "3959580"
  },
  {
    "text": "so there are other\nsolutions if you don't insist on nonpreemption. I'm going to give you one\nwhere we have nonpreemption",
    "start": "3959580",
    "end": "3966540"
  },
  {
    "text": "but we still avoid\ndeadlock, and it's to go for that cyclic problem.",
    "start": "3966540",
    "end": "3971950"
  },
  {
    "text": "So here's the idea. Suppose that we can\nlinearly order the mutexes.",
    "start": "3971950",
    "end": "3977400"
  },
  {
    "text": "So I pick some order\nof the mutexes, so that whenever a thread\nholds a mutex L sub i",
    "start": "3977400",
    "end": "3984240"
  },
  {
    "text": "and attempts to lock\nanother mutex L sub j, we have that in\nthis linear order--",
    "start": "3984240",
    "end": "3990465"
  },
  {
    "text": "L sub i comes before L sub j. Then you can't have a deadlock.",
    "start": "3990465",
    "end": "3995655"
  },
  {
    "text": " So in this case, for\nthe dining philosophers,",
    "start": "3995655",
    "end": "4000750"
  },
  {
    "text": "it would, for example, number\nthe chopsticks from 1 to n,",
    "start": "4000750",
    "end": "4009360"
  },
  {
    "text": "or 0 to n minus 1, whatever. And then grab the smaller one\nand then grab the larger one.",
    "start": "4009360",
    "end": "4015180"
  },
  {
    "text": "And then it says then you\nwould never have a deadlock. And so here's the proof. You know I like proofs.",
    "start": "4015180",
    "end": "4023490"
  },
  {
    "text": "Proofs are really important. So I'm going to show you that\nif you do that, you couldn't have a cycle of waiting.",
    "start": "4023490",
    "end": "4029500"
  },
  {
    "text": "So suppose you had\na cycle of waiting. We're in a situation\nwhere everybody is holding chopsticks,\nand one of them",
    "start": "4029500",
    "end": "4037277"
  },
  {
    "text": "is waiting for another\none, which is waiting for-- all the way around\nto the first one. That's what we need\nfor deadlock to occur.",
    "start": "4037277",
    "end": "4043530"
  },
  {
    "text": "So let me just look at what's\nthe largest mutex on the cycle.",
    "start": "4043530",
    "end": "4049540"
  },
  {
    "text": "Let's call that L max. And suppose that it's waiting on\nmutex L held by the next thread",
    "start": "4049540",
    "end": "4056040"
  },
  {
    "text": "in the cycle. Well, then, we have\nsomething that's bigger than the maximum one.",
    "start": "4056040",
    "end": "4064790"
  },
  {
    "text": "And so that contradicts the\nfact that I grab them-- whenever I grab them, I do it in order.",
    "start": "4064790",
    "end": "4072440"
  },
  {
    "text": "So very simple-- very simple\nproof that you can't have deadlock if you grab them\naccording to a linear order.",
    "start": "4072440",
    "end": "4080480"
  },
  {
    "text": "And so for this\nparticular problem, what I do is,\ninstead of grabbing",
    "start": "4080480",
    "end": "4085910"
  },
  {
    "text": "the one on the left and\none the right, as I say, you grab the smaller of\nthe two and then grab the larger of the two.",
    "start": "4085910",
    "end": "4091820"
  },
  {
    "text": "And then you're guaranteed\nto have no deadlock. Does that make sense?",
    "start": "4091820",
    "end": "4098920"
  },
  {
    "text": "Now, if you're going\nto use locks in Cilk, you have to realize\nthat in the operating--",
    "start": "4098920",
    "end": "4104140"
  },
  {
    "text": "in the runtime system\nof Cilk, they're doing-- they're using locks.",
    "start": "4104140",
    "end": "4109630"
  },
  {
    "text": "You can't see them. They're encapsulated,\nas we talked about. The nondeterminism in\nCilk is encapsulated.",
    "start": "4109630",
    "end": "4115720"
  },
  {
    "text": "It's still going on\nunderneath the covers. And if you start introducing\nyour own nondeterminism",
    "start": "4115720",
    "end": "4122080"
  },
  {
    "text": "through the use of locks\nyou can run into trouble if you're not careful. And let me give you an example.",
    "start": "4122080",
    "end": "4129460"
  },
  {
    "text": "This is a situation-- you can\ndeadlock your program in Cilk with just one lock.",
    "start": "4129460",
    "end": "4137890"
  },
  {
    "text": "So here's an example of\na code that does that. So main spawns off foo.",
    "start": "4137890",
    "end": "4143520"
  },
  {
    "text": "And foo basically locks the\nlock L and then unlocks it.",
    "start": "4143520",
    "end": "4150439"
  },
  {
    "text": "And, meanwhile, after\nit spawns off foo, the continuation goes\nand it locks L itself,",
    "start": "4150439",
    "end": "4156130"
  },
  {
    "text": "and then does a sync,\nand then it unlocks it. So what happens here?",
    "start": "4156130",
    "end": "4161830"
  },
  {
    "text": "We sort of have a\nsituation like this, where the locking I've\ndone with an open bracket,",
    "start": "4161830",
    "end": "4169149"
  },
  {
    "text": "and an unlock, a release, I'm\ndoing with a closed bracket. So I'm spawning off foo,\nwhich is the lower part there,",
    "start": "4169149",
    "end": "4176649"
  },
  {
    "text": "and locking and unlocking. And up above unlocking\nthen unlocking. So what can happen here?",
    "start": "4176649",
    "end": "4182799"
  },
  {
    "text": "I can go and I basically spawn\noff the child, but then I lock.",
    "start": "4182800",
    "end": "4189399"
  },
  {
    "text": "And now the child goes and\nit says, whoops, can't-- foo is going to wait here\nbecause it can't grab the lock",
    "start": "4189399",
    "end": "4196840"
  },
  {
    "text": "because it's owned by main. And now we get to\nthe point where",
    "start": "4196840",
    "end": "4203650"
  },
  {
    "text": "main has to wait for\nthe sync, and the child",
    "start": "4203650",
    "end": "4210940"
  },
  {
    "text": "is never going to\ncomplete because I hold the resource that the\nchild needs to complete.",
    "start": "4210940",
    "end": "4216610"
  },
  {
    "text": "So don't hold mutexes\nacross Cilk syncs. That's the lesson there.",
    "start": "4216610",
    "end": "4222830"
  },
  {
    "text": "There are actually\nplaces you can, but if you don't hold\nthem across that, then you won't run into\nthis particular problem.",
    "start": "4222830",
    "end": "4229820"
  },
  {
    "text": "A good strategy is only\nholding mutexes within strands. So there's no parallelism.",
    "start": "4229820",
    "end": "4235619"
  },
  {
    "text": "So you have it bounded. And also, that's a\ngood idea generally because you want to hold\nmutexes as short amount of time",
    "start": "4235620",
    "end": "4242200"
  },
  {
    "text": "as you possibly can. So, for example, if you\nhave a big calculation and then you want to assign\nsomething atomically,",
    "start": "4242200",
    "end": "4248980"
  },
  {
    "text": "don't put the big calculation\ninside the critical region. Move the calculation\noutside the critical region,",
    "start": "4248980",
    "end": "4256120"
  },
  {
    "text": "do the calculation\nyou need to do, and then acquire the locks\njust to do the interaction",
    "start": "4256120",
    "end": "4262070"
  },
  {
    "text": "you need to set a value. And then you'll have\na lot faster code",
    "start": "4262070",
    "end": "4267770"
  },
  {
    "text": "because you're not holding up\nother threads for a long time. And always try to avoid\nnondeterministic programming.",
    "start": "4267770",
    "end": "4276578"
  },
  {
    "text": "But that's not always possible.  So any questions about that?",
    "start": "4276578",
    "end": "4282220"
  },
  {
    "text": "Then I want to go on a\nreally interesting topic because it's a really\nrecent research level topic,",
    "start": "4282220",
    "end": "4290409"
  },
  {
    "text": "and that's to talk about\ntransactional memory. Who's heard this term before?",
    "start": "4290410",
    "end": "4296200"
  },
  {
    "text": "Anybody? So the idea is to have\ndatabase transactions, that you have things like\ndatabase transactions",
    "start": "4296200",
    "end": "4303110"
  },
  {
    "text": "where the atomicity is\nhappening implicitly. You don't specify locks. You just say this is\na critical region.",
    "start": "4303110",
    "end": "4310510"
  },
  {
    "text": "Don't interrupt me while\nI do this critical region. The system works everything out. Here's a good example of\nwhere it might be useful.",
    "start": "4310510",
    "end": "4318320"
  },
  {
    "text": "Suppose we want to do a\nconcurrent graph computation.",
    "start": "4318320",
    "end": "4323469"
  },
  {
    "text": "And so you take people\ninvolved in parallel and distributed computing\nat MIT and you say,",
    "start": "4323470",
    "end": "4332120"
  },
  {
    "text": "OK, I want to do Gaussian\nelimination on this graph. Now, you guys, I'm\nsure most of you",
    "start": "4332120",
    "end": "4338020"
  },
  {
    "text": "know Gaussian elimination\nfrom the matrix context. Do you know what it\nmeans in a graph context?",
    "start": "4338020",
    "end": "4343719"
  },
  {
    "text": "So if you have a sparse matrix,\nyou actually have a graph. And Gaussian elimination is a\nway of manipulating the graph,",
    "start": "4343720",
    "end": "4350409"
  },
  {
    "text": "and you get exactly\nthe same behavior as you get in the dense one. So I'll show you what it is.",
    "start": "4350410",
    "end": "4356020"
  },
  {
    "text": "You basically pick\nsomebody to eliminate. [STUDENTS LAUGH]",
    "start": "4356020",
    "end": "4362542"
  },
  {
    "text": " And now what you do is look at\nall this vertex's neighbors.",
    "start": "4362542",
    "end": "4371650"
  },
  {
    "text": "Those guys. And what you do is you\neliminate that vertex--",
    "start": "4371650",
    "end": "4377020"
  },
  {
    "text": "bye bye-- and you\ninterconnect all the neighbors with all the edges that\ndon't already exist.",
    "start": "4377020",
    "end": "4385320"
  },
  {
    "text": "And that's Gaussian elimination. And if you think of it in\nterms of matrix fashion, the question is, if you\nhave a sparse matrix,",
    "start": "4385320",
    "end": "4391692"
  },
  {
    "text": "where are you going\nto get fill in? What are the places\nthat you need to update when you do\na pivot in Gaussian",
    "start": "4391692",
    "end": "4398100"
  },
  {
    "text": "elimination in a matrix? So that's the basic\nnotion of graph--",
    "start": "4398100",
    "end": "4404580"
  },
  {
    "text": "of doing Gaussian elimination. But now we want to deal\nwith the concurrency.",
    "start": "4404580",
    "end": "4410190"
  },
  {
    "text": "And the problem occurs\nif I want to eliminate",
    "start": "4410190",
    "end": "4415290"
  },
  {
    "text": "two nodes at the same time.",
    "start": "4415290",
    "end": "4421020"
  },
  {
    "text": "Because now they're\nadjacent to each other, and if I just do\nwhat I expressed, there's going to be all kinds\nof atomicity violations,",
    "start": "4421020",
    "end": "4427930"
  },
  {
    "text": "et cetera. By the way, the reason I'm\npicking these two folks is because they're\ngoing to a better place.",
    "start": "4427930",
    "end": "4433110"
  },
  {
    "start": "4433110",
    "end": "4440500"
  },
  {
    "text": "So how do you deal with this? And so in transactional memory,\nwhat I want to be able to do",
    "start": "4440500",
    "end": "4446790"
  },
  {
    "text": "is just simply say,\nOK, here's the thing that I need to be atomic. And so if I look\nat this code, it's",
    "start": "4446790",
    "end": "4453210"
  },
  {
    "text": "basically saying who\nare my neighbors, and then let me identify\nall of the edges that",
    "start": "4453210",
    "end": "4461220"
  },
  {
    "text": "need to be removed, the\nones that I just showed you that we removed. Now let me get rid\nof the element v.",
    "start": "4461220",
    "end": "4470190"
  },
  {
    "text": "And now, for all of\nthe neighbors of u,",
    "start": "4470190",
    "end": "4477390"
  },
  {
    "text": "let us add in the edge\nbetween the neighbor and-- between the pairs of neighbors.",
    "start": "4477390",
    "end": "4483720"
  },
  {
    "text": "So that's basically\nwhat it's doing. And I'd like to just\nsay that's atomic.",
    "start": "4483720",
    "end": "4489869"
  },
  {
    "text": "And so the idea is\nthat if I express that as a transaction,\nthen the idea is that, on the\ntransaction commit,",
    "start": "4489870",
    "end": "4496890"
  },
  {
    "text": "all the memory updates\nin the critical region appear to take it\nhappen at once.",
    "start": "4496890",
    "end": "4502804"
  },
  {
    "text": "However, in\ntransaction, remember the idea is, rather than\nforcing it to go forward, I can have the\ntransactions abort.",
    "start": "4502805",
    "end": "4510900"
  },
  {
    "text": "So if I get a conflict, I'll\nabort one and restart it. And then the\nrestarted transaction",
    "start": "4510900",
    "end": "4516522"
  },
  {
    "text": "may take a different code\npath, because, after all, I may have restructured\nthe graph underneath.",
    "start": "4516522",
    "end": "4521770"
  },
  {
    "text": "And so it may do something\ndifferent the second time through than the first. It may also abort\nagain and so forth.",
    "start": "4521770",
    "end": "4528880"
  },
  {
    "text": "So when you study transaction,\ntransactional memory-- let me just do a\ncouple of definitions.",
    "start": "4528880",
    "end": "4534270"
  },
  {
    "text": "One is a conflict. That's when you have two\ntransactions that are--",
    "start": "4534270",
    "end": "4539310"
  },
  {
    "text": "they can't both complete. One of them has to be aborted. And aborting, by the\nway, is once again",
    "start": "4539310",
    "end": "4545370"
  },
  {
    "text": "violating the\nnonpreemptive nature. Here we're going to\npreempt one of them",
    "start": "4545370",
    "end": "4551699"
  },
  {
    "text": "by keeping all the states\nso I can roll a state back and restart it from scratch.",
    "start": "4551700",
    "end": "4557530"
  },
  {
    "text": "So contention\nresolution is deciding which of the two\nconflicting transactions to wait or to abort and restart,\nand under what conditions",
    "start": "4557530",
    "end": "4565170"
  },
  {
    "text": "you do that. So the resolution\nmanager has to figure out",
    "start": "4565170",
    "end": "4570720"
  },
  {
    "text": "what happens in the\ncase of contention. And then forward progress is\navoiding deadlock of course,",
    "start": "4570720",
    "end": "4578190"
  },
  {
    "text": "but also livelock\nand starvation. You want to make sure that\nyou're going to make-- because what you don't\nwant to have happen,",
    "start": "4578190",
    "end": "4584682"
  },
  {
    "text": "for example, is that\ntwo transactions keep aborting each other and\nyou never make forward progress.",
    "start": "4584682",
    "end": "4590219"
  },
  {
    "text": "And throughput, well, you'd\nlike to run as many transactions as concurrently as possible. ",
    "start": "4590220",
    "end": "4597732"
  },
  {
    "text": "So I'm going to show you an\nalgorithm for doing this. It's a really simple algorithm.",
    "start": "4597732",
    "end": "4603540"
  },
  {
    "text": "It happens to be one\nthat I discovered just a couple of years ago. And I was surprised that it did\nnot appear in the literature,",
    "start": "4603540",
    "end": "4612000"
  },
  {
    "text": "and so I wrote a very\nshort paper on it. Because what happens for\na lot of people is they--",
    "start": "4612000",
    "end": "4620159"
  },
  {
    "text": "if they discover there's\na lot of aborting, they say, oh, well let's\ngrab a global lock.",
    "start": "4620160",
    "end": "4626010"
  },
  {
    "text": "And then if everybody\ngrabs a global lock, you can do this sort of thing. You can't deadlock\nwith a single lock",
    "start": "4626010",
    "end": "4632670"
  },
  {
    "text": "if you're not also doing things\nlike Cilk sync or whatever.",
    "start": "4632670",
    "end": "4638219"
  },
  {
    "text": "But, in any case, if you\nhave just a single lock, everybody falls back\nto the single lock,",
    "start": "4638220",
    "end": "4643829"
  },
  {
    "text": "and then you have no\nconcurrency in your program, no performance,\nuntil everybody gets",
    "start": "4643830",
    "end": "4650580"
  },
  {
    "text": "through the difficult time. So this is an algorithm that\ndoesn't require a global lock. So it assumes the\ntransactional memory system",
    "start": "4650580",
    "end": "4659040"
  },
  {
    "text": "will log the reads and writes. That's typically true of\nany transaction, where you log what reads\nand writes you're",
    "start": "4659040",
    "end": "4664080"
  },
  {
    "text": "doing so that you can\neither abort and roll back, or you can--",
    "start": "4664080",
    "end": "4670469"
  },
  {
    "text": "when you abort-- or else\nyou sandbox things and then atomically commit them.",
    "start": "4670470",
    "end": "4676535"
  },
  {
    "text": "And so we have\nall the mechanisms for aborting and rolling back. These are all very interesting\nin their own right, and restarting.",
    "start": "4676535",
    "end": "4682440"
  },
  {
    "text": "And this is going to basically\nuse a lock-based approach that uses two ideas.",
    "start": "4682440",
    "end": "4688020"
  },
  {
    "text": "One is the notion of what's\ncalled a finite ownership array, and another is a thing\ncalled release-sort-reacquire.",
    "start": "4688020",
    "end": "4696599"
  },
  {
    "text": "And let me explain\nthose two things, and I'll show you really quickly\nhow this beautiful algorithm",
    "start": "4696600",
    "end": "4702570"
  },
  {
    "text": "works. So you have an array of\nanti-starvation mutual",
    "start": "4702570",
    "end": "4707580"
  },
  {
    "text": "exclusion locks. So these are ones that are\ngoing to be fair, so that you're",
    "start": "4707580",
    "end": "4712590"
  },
  {
    "text": "always going to the oldest one. And you can do an\nacquire, but we're also going to add in a try acquire.",
    "start": "4712590",
    "end": "4718890"
  },
  {
    "text": "Tell me whether, if I tried\nto acquire, I would get it. That is, if I get\nit, give it to me.",
    "start": "4718890",
    "end": "4725280"
  },
  {
    "text": "If I don't get it, don't wait. Just tell me that I didn't\nget it, and then release.",
    "start": "4725280",
    "end": "4731260"
  },
  {
    "text": "And there's an owner function\nthat maps all of the--",
    "start": "4731260",
    "end": "4738510"
  },
  {
    "text": "function h that maps my\nuniverse of memory locations",
    "start": "4738510",
    "end": "4744809"
  },
  {
    "text": "to the indexes in\nthis finite ownership array, this lock array.",
    "start": "4744810",
    "end": "4750490"
  },
  {
    "text": "So the lock has length-- array has length n,\nhas n slots in it. To lock a location x in the\nset of all possible memory",
    "start": "4750490",
    "end": "4759380"
  },
  {
    "text": "locations, you actually\nacquire lock of h of x. So you can think of\nh as a hash function,",
    "start": "4759380",
    "end": "4765782"
  },
  {
    "text": "but it doesn't have to be a\nfair hash function or whatever. Any function will do. And then, yes, there will be\nsome advantages to picking",
    "start": "4765782",
    "end": "4773700"
  },
  {
    "text": "some functions or another one. So rather than actually\nlocking the location or locking the object,\nI lock a location",
    "start": "4773700",
    "end": "4782890"
  },
  {
    "text": "that essentially I hash\nto from that object. So if two guys are trying\nto grab the same location,",
    "start": "4782890",
    "end": "4790030"
  },
  {
    "text": "they will both\ngrab the same lock because they've got\nthe same hash function. But I may have\ninadvertent locks where",
    "start": "4790030",
    "end": "4797200"
  },
  {
    "text": "if I were locking the\nobjects themselves, I wouldn't have them both\ntrying to acquire the same lock.",
    "start": "4797200",
    "end": "4804040"
  },
  {
    "text": "That might happen\nin this algorithm. So here's the idea.",
    "start": "4804040",
    "end": "4809440"
  },
  {
    "text": "The first idea is called\nrelease, sort, and reacquire. So that's the ownership array\npart that I just explained.",
    "start": "4809440",
    "end": "4815139"
  },
  {
    "text": "Now here's the release,\nsort, reacquire. Before you access a\nmemory location x,",
    "start": "4815140",
    "end": "4821409"
  },
  {
    "text": "simply try to grab\nlock of x greedily. And if you have a conflict--",
    "start": "4821410",
    "end": "4827286"
  },
  {
    "text": "so if you don't have a\nconflict, you get it. You just simply try to get it. And if you can, that's great. If not, then what I'm going to\ndo is roll back the transaction",
    "start": "4827287",
    "end": "4834969"
  },
  {
    "text": "but don't release\nthe locks I hold, and then release all\nthe locks with indexes",
    "start": "4834970",
    "end": "4840010"
  },
  {
    "text": "greater than h of x.  And then I'm going to\nacquire the lock that I want.",
    "start": "4840010",
    "end": "4847320"
  },
  {
    "text": "And now, at that point, I've\nreleased all the bigger locks, so I'm acquiring the next lock.",
    "start": "4847320",
    "end": "4854350"
  },
  {
    "text": "And then I reacquire the\nreleased locks in sorted order. So I go through all the locks\nI released and I reacquire them",
    "start": "4854350",
    "end": "4861639"
  },
  {
    "text": "in sorted order. And then I start my\ntransaction over again. I try again.",
    "start": "4861640",
    "end": "4867490"
  },
  {
    "text": "So what happens each time\nthrough this process, I'm always-- whenever I'm trying\nto acquire a lock,",
    "start": "4867490",
    "end": "4874270"
  },
  {
    "text": "I'm only holding locks\nthat are smaller. But each time that I\nrestart, I have one more lock",
    "start": "4874270",
    "end": "4881390"
  },
  {
    "text": "that I didn't used to\nhave before I restart my transaction, which I've\nacquired in the order,",
    "start": "4881390",
    "end": "4887720"
  },
  {
    "text": "in the linear order, in\nthat ownership array from 0",
    "start": "4887720",
    "end": "4895250"
  },
  {
    "text": "to n minus 1. And so here's the algorithm. I'll let you guys look\nat it in more detail,",
    "start": "4895250",
    "end": "4903260"
  },
  {
    "text": "because I see our time is up. And it's actually fun\nto take a look at,",
    "start": "4903260",
    "end": "4909710"
  },
  {
    "text": "and we'll put the paper online. There's one other topic that\nI wanted to go through here",
    "start": "4909710",
    "end": "4916639"
  },
  {
    "text": "which you should know about,\nis this locking anomaly called convoying. And this was actually a bug\nthat we had-- a performance bug",
    "start": "4916640",
    "end": "4923300"
  },
  {
    "text": "that we had in our\noriginal and MIT-Cilk. So it's kind of a neat one to\nsee and how we resolved it.",
    "start": "4923300",
    "end": "4929525"
  },
  {
    "text": "And that's it. ",
    "start": "4929525",
    "end": "4931917"
  }
]