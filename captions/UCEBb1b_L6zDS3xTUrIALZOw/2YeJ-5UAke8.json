[
  {
    "start": "0",
    "end": "120000"
  },
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6860"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13320",
    "end": "21896"
  },
  {
    "text": "PROFESSOR: Good\nmorning everyone. Morning. Let's get started.",
    "start": "21896",
    "end": "28910"
  },
  {
    "text": "So the second of two\nlectures on numerics. Last time we had this\nmotivating question",
    "start": "28910",
    "end": "37210"
  },
  {
    "text": "of finding the millionth\ndigit of the square root of 2, or the square root\nof quantities that",
    "start": "37210",
    "end": "44530"
  },
  {
    "text": "end up becoming irrational. And we talked about\nhigh-precision arithmetic,",
    "start": "44530",
    "end": "51059"
  },
  {
    "text": "and we use Newton's method\nto compute the square roots. You saw a demo of\ncomputing square roots,",
    "start": "51060",
    "end": "59010"
  },
  {
    "text": "but there's a few\nthings missing. We don't quite know how\nto do division, which",
    "start": "59010",
    "end": "65840"
  },
  {
    "text": "is required for the\nNewton's method, and we didn't really talk at\nall about algorithmic complexity",
    "start": "65840",
    "end": "73680"
  },
  {
    "text": "beyond talking about the\ncomplexity of multiplication. So multiplication is a\nprimitive that at this point",
    "start": "73680",
    "end": "80369"
  },
  {
    "text": "we know how to do in a\ncouple of different ways, including the naive\norder n squared",
    "start": "80370",
    "end": "86050"
  },
  {
    "text": "algorithm and the\nKaratsuba algorithm, which is something\nlike n raised to 1.58.",
    "start": "86050",
    "end": "91370"
  },
  {
    "text": "But how many times\nis multiplication called when you\ncompute square roots?",
    "start": "91370",
    "end": "97500"
  },
  {
    "text": "In fact, multiplication\nis called when you call the\ndivision operator",
    "start": "97500",
    "end": "103141"
  },
  {
    "text": "when you compute square roots. So there's really two levels\noff a computation going on here",
    "start": "103141",
    "end": "108510"
  },
  {
    "text": "and we need to open this\nup, and look at in detail, and figure out what our overall\nalgorithmic complexity is.",
    "start": "108510",
    "end": "115500"
  },
  {
    "text": "So that's really the\nmeat of today's lecture.",
    "start": "115500",
    "end": "120800"
  },
  {
    "start": "120000",
    "end": "210000"
  },
  {
    "text": "Getting to the\npoint where we know what we have with respect\nto asymptotic complexity",
    "start": "120800",
    "end": "127579"
  },
  {
    "text": "of computing the square\nroot of a number. So let me start with a review\nof what we covered last time.",
    "start": "127580",
    "end": "135800"
  },
  {
    "text": " We decided that we wanted\nthe millionth digit",
    "start": "135800",
    "end": "144230"
  },
  {
    "text": "of square root of 2. And the way we're\ngoing to do this is by working with integers\nand computing the floor,",
    "start": "144230",
    "end": "155280"
  },
  {
    "text": "since we needed to be an\ninteger, of 2 times 10 raised",
    "start": "155280",
    "end": "161810"
  },
  {
    "text": "to 2d, where d is the number\nof digits of precision. ",
    "start": "161810",
    "end": "173940"
  },
  {
    "text": "N over there. So we'll take a look\nat an example or two",
    "start": "173940",
    "end": "181080"
  },
  {
    "text": "here as to how this\nworks with integers. But what we do is compute\nessentially the floor",
    "start": "181080",
    "end": "192180"
  },
  {
    "text": "of some quantity a, the square\nroot of some quantity a, via Newton's method.",
    "start": "192180",
    "end": "197269"
  },
  {
    "start": "197270",
    "end": "207170"
  },
  {
    "text": "And the way Newton's\nmethod works is you go through an iteration.",
    "start": "207170",
    "end": "212280"
  },
  {
    "start": "210000",
    "end": "310000"
  },
  {
    "text": "You start with x0 being one,\nwhich is your initial guess,",
    "start": "212280",
    "end": "219459"
  },
  {
    "text": "and compute xi plus 1 equals\nxi plus a divided by xi over 2.",
    "start": "219460",
    "end": "230949"
  },
  {
    "text": "And as you can see,\nthis requires division, because we're computing\na divided by xi. That's the outer\nNewton iteration.",
    "start": "230949",
    "end": "238380"
  },
  {
    "text": "And I said a couple\nof things that's said",
    "start": "238380",
    "end": "245870"
  },
  {
    "text": "you are going to have a\nquadratic rate of convergence.",
    "start": "245870",
    "end": "251260"
  },
  {
    "text": "The precision with respect\nto the number of digits",
    "start": "251260",
    "end": "257000"
  },
  {
    "text": "is going to increase by a\nfactor of 2 every iteration.",
    "start": "257000",
    "end": "262680"
  },
  {
    "text": "And so if you started out\nwith one digit of precision, you go to two, then\nfour, eight, et cetera.",
    "start": "262680",
    "end": "268319"
  },
  {
    "text": "And so that's a\ngeometric progression. And that means that\nwe're going to have",
    "start": "268320",
    "end": "275250"
  },
  {
    "text": "a logarithmic number of\niterations, which is nice. And we were all happy about\nthat, and you believed me.",
    "start": "275250",
    "end": "285340"
  },
  {
    "text": "I gave you an example and\nit looked pretty good, but didn't really prove anything\nabout the rate of convergence.",
    "start": "285340",
    "end": "292889"
  },
  {
    "text": "What I'd like to do now is\ntake a look at this particular",
    "start": "292890",
    "end": "299480"
  },
  {
    "text": "iterative computation, where\nwe're computing xi plus 1 given xi , and argue\nthat this, in fact,",
    "start": "299480",
    "end": "305990"
  },
  {
    "text": "has a quadratic\nrate of convergence.  So you can think\nof this as doing",
    "start": "305990",
    "end": "313110"
  },
  {
    "start": "310000",
    "end": "470000"
  },
  {
    "text": "an error analysis\nof Newton's method.",
    "start": "313110",
    "end": "318789"
  },
  {
    "start": "318790",
    "end": "326310"
  },
  {
    "text": "And let's say that xn equals\nsquare root of a 1 plus epsilon",
    "start": "326310",
    "end": "334960"
  },
  {
    "text": "n, where epsilon may be\npositive or negative.",
    "start": "334960",
    "end": "342370"
  },
  {
    "text": "So we have an error\nassociated with xn",
    "start": "342370",
    "end": "348080"
  },
  {
    "text": "in the n-th iteration with\nrespect to what we want, which is the square root of a. And it's off by something.",
    "start": "348080",
    "end": "354569"
  },
  {
    "text": "It may be a large\nquantity in the beginning. We want to show\nconvergence, so obviously we want epsilon n, as n\nbecomes large, do tend to 0.",
    "start": "354570",
    "end": "364210"
  },
  {
    "text": "How fast does this approach 0? That's the question. And so if you take this equation\nand plug this into that,",
    "start": "364210",
    "end": "374130"
  },
  {
    "text": "and say, what is xn plus 1? xn plus 1 would be square root\nof a times 1 plus epsilon n",
    "start": "374130",
    "end": "389040"
  },
  {
    "text": "plus a divided by square\nroot of a 1 plus epsilon n divided by 2.",
    "start": "389040",
    "end": "399990"
  },
  {
    "text": "Just plugging it\nin, the value of xn. And then some a couple of steps\nof algebraic simplification,",
    "start": "399990",
    "end": "407990"
  },
  {
    "text": "you can pull out the\nsquare root of a here, then you have 1\nplus epsilon n, 1",
    "start": "407990",
    "end": "416289"
  },
  {
    "text": "divided by 1 plus\nepsilon n over here. The whole thing divided by 2.",
    "start": "416290",
    "end": "424650"
  },
  {
    "text": "And if you keep going-- there's\none step that I'm skipping here",
    "start": "424650",
    "end": "432729"
  },
  {
    "text": "in terms of\nsimplification, but let me write this last result out.",
    "start": "432730",
    "end": "439340"
  },
  {
    "start": "439340",
    "end": "444590"
  },
  {
    "text": "Which is xn plus 1 is\nsquare root of a times 1",
    "start": "444590",
    "end": "452560"
  },
  {
    "text": "plus epsilon n squared\ndivided by 2 times 1",
    "start": "452560",
    "end": "459760"
  },
  {
    "text": "plus epsilon n\ndown at the bottom. So what do we have here in\nterms of the overall observation",
    "start": "459760",
    "end": "471990"
  },
  {
    "start": "470000",
    "end": "555000"
  },
  {
    "text": "for epsilon n plus 1,\nwhich is the error in the n plus 1-th iteration given\nthat you have an epsilon n",
    "start": "471990",
    "end": "479700"
  },
  {
    "text": "error in the n-th iteration? You have a relationship like\nso where epsilon n plus 1",
    "start": "479700",
    "end": "489920"
  },
  {
    "text": "is related to epsilon\nn whole square. And this part here,\nas n becomes large,",
    "start": "489920",
    "end": "497920"
  },
  {
    "text": "epsilon n is going\nto go to 0 assuming a decent initial guess.",
    "start": "497920",
    "end": "504140"
  },
  {
    "text": "And so you can say that\nthis is essentially 1, which means you have this\nquadratic rate of convergence",
    "start": "504140",
    "end": "512789"
  },
  {
    "text": "where the error, which\nis a small quantity, is getting squared\nat every iteration.",
    "start": "512789",
    "end": "520159"
  },
  {
    "text": "And so if you have\nsomething like a 0.01 error at the beginning for\nepsilon n, epsilon n squared",
    "start": "520159",
    "end": "526640"
  },
  {
    "text": "is going to be 0.0001.",
    "start": "526640",
    "end": "535040"
  },
  {
    "text": "So that's where you get the\nquadratic rate of convergence. So it really comes from this\nrelationship, the relationship",
    "start": "535040",
    "end": "542560"
  },
  {
    "text": "epsilon n squared\nto epsilon n plus 1, Any questions about this? ",
    "start": "542560",
    "end": "552010"
  },
  {
    "text": "Great. So if you have the quadratic\nrate of convergence,",
    "start": "552010",
    "end": "557160"
  },
  {
    "start": "555000",
    "end": "635000"
  },
  {
    "text": "if you want to go to d digits\nof precision like I have here,",
    "start": "557160",
    "end": "567610"
  },
  {
    "text": "you can argue that you\nneed to log d iterations. ",
    "start": "567610",
    "end": "575612"
  },
  {
    "text": "So that's kind of nice, you\nhave a logarithmic number of iterations. I'm going to get back to that. There's one little\nsubtlety that is associated",
    "start": "575612",
    "end": "585029"
  },
  {
    "text": "with asymptotic analysis\nthat goes beyond simply the number of\niterations that you have",
    "start": "585030",
    "end": "591510"
  },
  {
    "text": "and the digits of precision. But so far so good. We're happy with this\nlogarithmic number",
    "start": "591510",
    "end": "597730"
  },
  {
    "text": "of iterations. And if we can now compute the\ncomplexity of the division,",
    "start": "597730",
    "end": "608020"
  },
  {
    "text": "then obviously we need\nan algorithm for that. But if you have an\nalgorithm and we figure out",
    "start": "608020",
    "end": "613130"
  },
  {
    "text": "what the complexity of\nthe division algorithm is, then we have complexity\nfor the square root of 2",
    "start": "613130",
    "end": "620520"
  },
  {
    "text": "or square root of a\nusing Newton's method. ",
    "start": "620520",
    "end": "625540"
  },
  {
    "text": "So just justified what I\nsaid last time with respect to quadratic rate\nof convergence.",
    "start": "625540",
    "end": "633000"
  },
  {
    "text": "And then we talked about\nmultiplication last time. I want to revisit that.",
    "start": "633000",
    "end": "639460"
  },
  {
    "text": "You have multiplication\nalgorithms,",
    "start": "639460",
    "end": "650090"
  },
  {
    "text": "and we want to be able to\nmultiply d digit numbers.",
    "start": "650090",
    "end": "655205"
  },
  {
    "text": " And the naive algorithm.",
    "start": "655205",
    "end": "661560"
  },
  {
    "text": "And you could imagine\ndoing divide and conquer. ",
    "start": "661560",
    "end": "670690"
  },
  {
    "text": "So you take x1,\nx0; y1, y0 where x1",
    "start": "670690",
    "end": "677870"
  },
  {
    "text": "is the most\nsignificant half of x. You're trying to\nmultiply x times y.",
    "start": "677870",
    "end": "683055"
  },
  {
    "text": " And same thing for y1 and y0.",
    "start": "683055",
    "end": "690970"
  },
  {
    "text": "So each of these will have\nd by 2, digits of precision.",
    "start": "690970",
    "end": "696100"
  },
  {
    "text": "And if you implement\nthe naive algorithm that looks like tn equals 4\ntn by 2 plus theta n,",
    "start": "696100",
    "end": "708730"
  },
  {
    "text": "you end up with theta n\nsquared complexity out so you have to do four\nmultiplications corresponding",
    "start": "708730",
    "end": "715690"
  },
  {
    "text": "to x1 times Y1 x1\ntimes y0, et cetera. And at each level in\nthe recursive tree,",
    "start": "715690",
    "end": "722790"
  },
  {
    "text": "you're breaking things down\nby a factor of 2 respect to the digits of\nprecision that you",
    "start": "722790",
    "end": "728850"
  },
  {
    "text": "need to multiply on as\nyou're going down the tree. And this is the four\nmultiplications.",
    "start": "728850",
    "end": "734200"
  },
  {
    "text": "You get your theta n\nsquared complexity. This gentleman by\nthe name of Karatsuba",
    "start": "734200",
    "end": "739760"
  },
  {
    "text": "recognized that you could play\na few mathematical tricks, which",
    "start": "739760",
    "end": "745070"
  },
  {
    "text": "I won't go over\nagain, but reduce to three multiplications.",
    "start": "745070",
    "end": "752339"
  },
  {
    "text": "And you do a few more\nadditions, but given",
    "start": "752340",
    "end": "757510"
  },
  {
    "text": "that the additions have\ntheta n complexity, the recurrence relationship\nturns into tn equals 3t of n",
    "start": "757510",
    "end": "769610"
  },
  {
    "text": "over 2 plus theta n. And this ends up having\n1.58 dot dot dot complexity.",
    "start": "769610",
    "end": "783029"
  },
  {
    "text": "No reason to stop with breaking\nthings up into two parts.",
    "start": "783030",
    "end": "789470"
  },
  {
    "text": "You could imagine\ngeneralizing Karatsuba and people have done this. ",
    "start": "789470",
    "end": "798200"
  },
  {
    "text": "Two different researchers,\nToom and Cook, generalized Karatsuba\nfor the case",
    "start": "798200",
    "end": "806230"
  },
  {
    "text": "where k is greater than\nor equal to 2, where you're breaking it into k parts.",
    "start": "806230",
    "end": "812020"
  },
  {
    "text": "So the Toom-Cook 2 algorithm\nis basically Karatsuba, but you have Toom 3,\nToom 4, and so on.",
    "start": "812020",
    "end": "819720"
  },
  {
    "text": "And I'm not going to give\nyou a lot of details on this. We don't expect you to work\non this, at least in 6006.",
    "start": "819720",
    "end": "830190"
  },
  {
    "text": "But just to give you a\nsense of what happens,",
    "start": "830190",
    "end": "835500"
  },
  {
    "text": "the Toom 3 method, or\nthe Toom-Cook 3 method,",
    "start": "835500",
    "end": "840750"
  },
  {
    "text": "breaks and number\nup into three parts. So each of these would have\nd by 3 digits of precision.",
    "start": "840750",
    "end": "850290"
  },
  {
    "text": "So this is what you're\nstarting out with. You're starting out\nwith a d digit number. But the very first level\nof recursion, you're",
    "start": "850290",
    "end": "856070"
  },
  {
    "text": "going to break things up\ninto three xi numbers that are d by 3 digits long.",
    "start": "856070",
    "end": "862370"
  },
  {
    "text": "Same thing for y. And if you did a naive\nmultiplication of this,",
    "start": "862370",
    "end": "867820"
  },
  {
    "text": "how many multiplications\ndo I need? If I just forget about\nany mathematical tricks,",
    "start": "867820",
    "end": "874000"
  },
  {
    "text": "if I just tried to\nmultiply these things out, how many d by 3 by d by 3\nmultiplications do I need?",
    "start": "874000",
    "end": "883680"
  },
  {
    "text": "AUDIENCE: Nine. PROFESSOR: Nine. So if you can beat nine\nusing mathematical tricks,",
    "start": "883680",
    "end": "890390"
  },
  {
    "text": "you have a better divide\nand conquer algorithm. And it turns out that Toom 3\nplays some arithmetic games",
    "start": "890390",
    "end": "902970"
  },
  {
    "text": "and ends up with a\nrecurrence relationship that",
    "start": "902970",
    "end": "913779"
  },
  {
    "text": "looks like this. Where you reduce the nine\nmultiplications down to five.",
    "start": "913780",
    "end": "921019"
  },
  {
    "text": "So that's a win. And that ends up being\ntheta of n raised to what?",
    "start": "921020",
    "end": "933070"
  },
  {
    "text": "Someone? Someone loudly. Log--",
    "start": "933070",
    "end": "938660"
  },
  {
    "text": "AUDIENCE: Base 3. PROFESSOR: Log\nwith a base 3 of 5. Another irrational number.",
    "start": "938660",
    "end": "946440"
  },
  {
    "text": "And this ends up being\nn raised to 1.465.",
    "start": "946440",
    "end": "951940"
  },
  {
    "text": "So you won. If you use Toom 3, assuming\nthe constants worked out-- and Victor can say\na little bit more",
    "start": "951940",
    "end": "958990"
  },
  {
    "text": "about that, because we're having\na little trouble justifying",
    "start": "958990",
    "end": "964290"
  },
  {
    "text": "this particular\nproblem set question that we want to give you, given\nthe constant factors involved.",
    "start": "964290",
    "end": "969670"
  },
  {
    "text": "So the issue really\nhere is this is correct. It's n raised to 1.46.",
    "start": "969670",
    "end": "976550"
  },
  {
    "text": "That's n raised to 1.5. And then the naive\nalgorithm is n square. But how big does n\nhave to be in order",
    "start": "976550",
    "end": "984470"
  },
  {
    "text": "for the n raised\nto 1.58 algorithm to beat the n square\nalgorithm, and for the n raised",
    "start": "984470",
    "end": "990850"
  },
  {
    "text": "to 1.46 algorithm\nto beat the n raised to 1.58 algorithm, et cetera. And it turns out n needs\nto be really, really large",
    "start": "990850",
    "end": "998010"
  },
  {
    "text": "if you implement\nthese in Python. So if you're having a\nlittle trouble here, giving you this\npristine problem set",
    "start": "998010",
    "end": "1005900"
  },
  {
    "text": "that you can go off and\nlearn about multiplication, and also appreciate\nasymptotic complexity.",
    "start": "1005900",
    "end": "1012785"
  },
  {
    "text": " So that's a bit of a catch-22.",
    "start": "1012785",
    "end": "1018010"
  },
  {
    "text": "Anyway, for the purposes\nof theory, this is great. It turns people have\ndone even better.",
    "start": "1018010",
    "end": "1024980"
  },
  {
    "text": "Multiplication is just this\nobviously incredibly important",
    "start": "1024980",
    "end": "1030359"
  },
  {
    "text": "primitive that you\nwould need for doing any reasonable computation.",
    "start": "1030359",
    "end": "1036240"
  },
  {
    "text": "And so people have worked on\nusing things like fast Fourier",
    "start": "1036240",
    "end": "1042619"
  },
  {
    "text": "transforms and other\ntechniques improve the complexity of\nmultiplication.",
    "start": "1042619",
    "end": "1049010"
  },
  {
    "text": "And best scheme\nuntil a few years",
    "start": "1049010",
    "end": "1057480"
  },
  {
    "start": "1050000",
    "end": "1145000"
  },
  {
    "text": "ago was this scheme called\nSchonhage-Strassen scheme, which is almost\nlinear in complexity.",
    "start": "1057480",
    "end": "1064920"
  },
  {
    "text": "It's n log n log log n time.",
    "start": "1064920",
    "end": "1073480"
  },
  {
    "text": "And this uses the fast\nFourier transform, FFT.",
    "start": "1073480",
    "end": "1078940"
  },
  {
    "text": "And you can play with\nall of these things. You can play with Karatsuba\nthe naive algorithm, Toom 3,",
    "start": "1078940",
    "end": "1086210"
  },
  {
    "text": "et cetera in the gmpy\npackage in Python.",
    "start": "1086210",
    "end": "1093220"
  },
  {
    "text": "And you can see as to\nwhat the value of n needs to be in order for\none of these algorithms",
    "start": "1093220",
    "end": "1099540"
  },
  {
    "text": "to beat the other. This is not\nsomething that you're going to do specifically\nin the problem set,",
    "start": "1099540",
    "end": "1104840"
  },
  {
    "text": "but I say that as an aside. These algorithms\nare implemented, and they're used in real life.",
    "start": "1104840",
    "end": "1110299"
  },
  {
    "text": "Eric? ERIC: It may be worth\nmentioning that Python itself for long integers\nuses Karatsuba.",
    "start": "1110300",
    "end": "1115660"
  },
  {
    "text": "PROFESSOR: Yeah, so Python\nuses-- beyond a certain n, you are going to\nhave decisions that",
    "start": "1115660",
    "end": "1122480"
  },
  {
    "text": "are made within the package. And Python shifts to Karatsuba\nafter n becomes large.",
    "start": "1122480",
    "end": "1130210"
  },
  {
    "text": "But if n is small,\nthen it's going to run the naive algorithm. Now if you write your\nown multiplication,",
    "start": "1130210",
    "end": "1135378"
  },
  {
    "text": "you can do whatever you want. You can have your own\nadaptive scheme, assuming you have many of these\nalgorithms implemented,",
    "start": "1135378",
    "end": "1141380"
  },
  {
    "text": "or you're calling them\nusing the gmpy package. ",
    "start": "1141380",
    "end": "1146600"
  },
  {
    "start": "1145000",
    "end": "1400000"
  },
  {
    "text": "So lastly, this looked\npretty good for a while. And from a\ntheoretical standpoint",
    "start": "1146600",
    "end": "1154660"
  },
  {
    "text": "there was a breakthrough. Guy by the name of Furer came\nup with this algorithm that",
    "start": "1154660",
    "end": "1164620"
  },
  {
    "text": "is n log n-- and let me write\nthis carefully-- 2 raised",
    "start": "1164620",
    "end": "1172140"
  },
  {
    "text": "big O-- that's an upper\nbound-- of log star n.",
    "start": "1172140",
    "end": "1181620"
  },
  {
    "text": "That makes sense? No. I'll have to explain it. OK, so what does this mean?",
    "start": "1181620",
    "end": "1187309"
  },
  {
    "text": "This part is clear. This is like sorting. It doesn't need to really use\nsorting, but that's n log n.",
    "start": "1187310",
    "end": "1193280"
  },
  {
    "text": "And then you have this 2\nraised to big O log star n. I need to define\nwhat log star n is.",
    "start": "1193280",
    "end": "1198929"
  },
  {
    "text": "And log star n is what's called\nthe iterative algorithm--",
    "start": "1198930",
    "end": "1206460"
  },
  {
    "text": "logarithm, rather.  I guess it's an\niterative algorithm,",
    "start": "1206460",
    "end": "1211740"
  },
  {
    "text": "but it computes logs. And the iterative\nlogarithm is the number",
    "start": "1211740",
    "end": "1217640"
  },
  {
    "text": "of times log needs to be\napplied to get a result that",
    "start": "1217640",
    "end": "1237420"
  },
  {
    "text": "is less than or equal to 1. So this thing really cuts\nyou down to size really fast.",
    "start": "1237420",
    "end": "1246790"
  },
  {
    "text": "So it doesn't matter. You could be a 10 raised\nto 24, or 2 raised to 50,",
    "start": "1246790",
    "end": "1252520"
  },
  {
    "text": "let's say, if you were\ndoing binary logs. And in the very first iteration\nyou go down to 50, right?",
    "start": "1252520",
    "end": "1259690"
  },
  {
    "text": "And then you take a log of\n50 and you go down to about 7 or something.",
    "start": "1259690",
    "end": "1264990"
  },
  {
    "text": "And then you take the log of 7. And if you're talking\nabout base 2, like we were,",
    "start": "1264990",
    "end": "1271470"
  },
  {
    "text": "you're down to less than 3. And so four or five\niterations, you're",
    "start": "1271470",
    "end": "1277160"
  },
  {
    "text": "down to less than or equal to 1. And that's what log\nstar n computes.",
    "start": "1277160",
    "end": "1284280"
  },
  {
    "text": "It's not the logarithm as\nmuch as the number of times so you have to apply log to\nget the result that's less than",
    "start": "1284280",
    "end": "1292289"
  },
  {
    "text": "or equal to 1. So you have these giant numbers,\nand it's only like five, six, eight times do you apply\nlog and you're down to one.",
    "start": "1292290",
    "end": "1301309"
  },
  {
    "text": "So for all practical\npurposes, you can think of-- and this is upper bound--\nyou can think of this,",
    "start": "1301310",
    "end": "1306680"
  },
  {
    "text": "even though this is 2\nraised to something, it's 2 raised to a\npretty small number. 2 raised to 10,\nthat would be 1,000.",
    "start": "1306680",
    "end": "1313470"
  },
  {
    "text": "And so from an asymptotic\ncomplexity standpoint, this is the winner. From a practical standpoint,\nSchonhage-Strassen",
    "start": "1313470",
    "end": "1322490"
  },
  {
    "text": "is really what you\nprobably want to use when n becomes very\nlarge, to the billions",
    "start": "1322490",
    "end": "1328220"
  },
  {
    "text": "and so on and so forth. And as of now, to the\nbest of my knowledge this hasn't been implemented\nin the gmpy package.",
    "start": "1328220",
    "end": "1336310"
  },
  {
    "text": "So if you actually want to use\ngmpy, this is where you stop.",
    "start": "1336310",
    "end": "1343110"
  },
  {
    "text": "So that's multiplication. So we have a bunch\nof different ways that you could do\nmultiplication.",
    "start": "1343110",
    "end": "1349000"
  },
  {
    "text": "What I'd like to do is give\nyou a sense of assuming a given",
    "start": "1349000",
    "end": "1354860"
  },
  {
    "text": "complexity of multiplication,\nhow long would division take?",
    "start": "1354860",
    "end": "1360270"
  },
  {
    "text": "So we are 1 and 1/2 lectures\nin, and I haven't really",
    "start": "1360270",
    "end": "1367150"
  },
  {
    "text": "told you how we're going\nto do division, which is what we have to do when we\ncompute a divided by xi, which",
    "start": "1367150",
    "end": "1375140"
  },
  {
    "text": "is the basic integration\nin the Newton method. So let's get to that. ",
    "start": "1375140",
    "end": "1399429"
  },
  {
    "text": "So finally\nhigh-precision division.",
    "start": "1399430",
    "end": "1405325"
  },
  {
    "start": "1405325",
    "end": "1410630"
  },
  {
    "text": "So we want a high-precision\nrep off a divided by b.",
    "start": "1410630",
    "end": "1422600"
  },
  {
    "text": "And we're going to compute\na high-precision rep off 1 divided by b first.",
    "start": "1422600",
    "end": "1432430"
  },
  {
    "text": "And what we mean by\nthat is that we'll",
    "start": "1432430",
    "end": "1439440"
  },
  {
    "text": "compute r divided\nby b floor where",
    "start": "1439440",
    "end": "1450639"
  },
  {
    "text": "r is a really large value. ",
    "start": "1450640",
    "end": "1458030"
  },
  {
    "text": "And more importantly,\nit's easy to divide",
    "start": "1458030",
    "end": "1468250"
  },
  {
    "text": "by r in a particular base. So for example, r\nequals 2 raised to k,",
    "start": "1468250",
    "end": "1474820"
  },
  {
    "text": "when we use base\n2, you can easily divide through a shift operator.",
    "start": "1474820",
    "end": "1481240"
  },
  {
    "text": "So if I give you r divided\nby b and I give you this long computer word that's\nin base 2, which typically",
    "start": "1481240",
    "end": "1489230"
  },
  {
    "text": "could have millions of\ndigits in its representation, I can shift that by\nthe appropriate amount",
    "start": "1489230",
    "end": "1496106"
  },
  {
    "text": "to a given r divided by b. I can get 1 over b by\nshifting that quantity.",
    "start": "1496107",
    "end": "1502440"
  },
  {
    "text": "So it feels like,\nhey wait a minute. Why are we dividing by r? Well remember that\nyou want 1 over b.",
    "start": "1502440",
    "end": "1508740"
  },
  {
    "text": "And if you're computing\nr divided by b floor, and you actually want 1\nover b, which then you",
    "start": "1508740",
    "end": "1515400"
  },
  {
    "text": "could use to multiply by a\nso you can run your Newton iteration, then you\nwant to divide by r.",
    "start": "1515400",
    "end": "1522370"
  },
  {
    "text": "And that division\nis essentially going to be something that\nshifts things to the right.",
    "start": "1522370",
    "end": "1528740"
  },
  {
    "text": "So the most significant\nbits move to the right, and you get a smaller number.",
    "start": "1528740",
    "end": "1533950"
  },
  {
    "text": "That make sense? So we all know how\nto divide by using shifting assuming the\nbases work out right.",
    "start": "1533950",
    "end": "1541730"
  },
  {
    "text": "And if you had a representation\nthat was decimal, suddenly you could certainly\ndivide by 10 raised to k.",
    "start": "1541730",
    "end": "1548830"
  },
  {
    "text": "That's easy. You've done this many times. But you just changed\nthe decimal point when you're working\nwith decimal arithmetic.",
    "start": "1548830",
    "end": "1555493"
  },
  {
    "text": "When you divide 72 by\n100 and you get 0.72. And that's a very\nsimilar notion here.",
    "start": "1555493",
    "end": "1562550"
  },
  {
    "text": "It doesn't really matter what\nbase you're talking about. So that's the setup.",
    "start": "1562550",
    "end": "1568270"
  },
  {
    "text": "That's how are we\ngoing to try and tackle this division problem. But we still have this problem\nof computing r divided by b.",
    "start": "1568270",
    "end": "1578460"
  },
  {
    "text": "So how are we going to\ncompute r divided by b? ",
    "start": "1578460",
    "end": "1585429"
  },
  {
    "text": "And we want this to be a large\nnumber of digits of precision. So we're going to use\nNewton's method again.",
    "start": "1585430",
    "end": "1592070"
  },
  {
    "text": " You've got some non-linearity\nhere with respect to 1 over x.",
    "start": "1592070",
    "end": "1602850"
  },
  {
    "text": "And we're gonna use\nNewton's method again. And we'll have to hope\nthat this works out,",
    "start": "1602850",
    "end": "1608830"
  },
  {
    "text": "that we can get Newton's\nmethod, it'll converge, and it'll require operations\nthat we know how to do.",
    "start": "1608830",
    "end": "1619830"
  },
  {
    "text": "And all of this is going\nto work out really well. I'm going to set\nup a function, f of x equals 1 divided by\nx minus b divided by r.",
    "start": "1619830",
    "end": "1634549"
  },
  {
    "text": "So what this means is\nthat this function has a 0 at x equals r divided by b.",
    "start": "1634550",
    "end": "1643790"
  },
  {
    "text": "So if I try and find\nthe 0 of this function, and I start out with a\ndecent initial guess,",
    "start": "1643790",
    "end": "1651230"
  },
  {
    "text": "I'm going to end up\nwith r divided by b. And if I'm working\nwith integers, effectively that's the floor\nthat I have for r divided by b.",
    "start": "1651230",
    "end": "1658710"
  },
  {
    "text": "And then I do my shift and\nI end up with 1 over b.",
    "start": "1658710",
    "end": "1663799"
  },
  {
    "text": "So someone who remembers\ndifferentiation,",
    "start": "1663800",
    "end": "1669812"
  },
  {
    "text": "if you're gonna apply\nNewton's method, tell me what the\nderivative of f of x is.",
    "start": "1669812",
    "end": "1676630"
  },
  {
    "text": " Somebody's stretching\nat the back, but I don't think\nthat was an answer.",
    "start": "1676630",
    "end": "1683720"
  },
  {
    "text": "Someone at the back? Too easy a question? For the cushion.",
    "start": "1683720",
    "end": "1690445"
  },
  {
    "text": "AUDIENCE: 1 over\nnegative x squared. PROFESSOR: 1 over\nnegative x squared. Who's that? All right. You can come pick this up.",
    "start": "1690446",
    "end": "1697650"
  },
  {
    "text": "Whatever. Cut the monotony here.  Just veered to the left.",
    "start": "1697650",
    "end": "1703570"
  },
  {
    "text": "I think next time I'm going\nto weight them or something. Let's just do\nfrisbees next time. Let's just do\nfrisbees next time.",
    "start": "1703570",
    "end": "1710230"
  },
  {
    "text": "It makes it easy. Forget cushions. No? Frisbees or cushions?",
    "start": "1710230",
    "end": "1717050"
  },
  {
    "text": "How many want frisbees? How many want cushions? Frisbees win.",
    "start": "1717050",
    "end": "1724470"
  },
  {
    "text": "So you got derivative of x is\nminus 1 divided by x squared.",
    "start": "1724470",
    "end": "1729870"
  },
  {
    "text": "And then if you go off and\napply Newton's method-- and I'm not going to go through\nthe symbolic equations here",
    "start": "1729870",
    "end": "1738400"
  },
  {
    "text": "associated with\nNewton's method-- but that's basically the\nsame as we did before. You are computing a tangent,\nand the new value of xi plus 1",
    "start": "1738400",
    "end": "1749380"
  },
  {
    "text": "given the value of xi\nis the x-intercept. And we needed the\nderivative to compute that.",
    "start": "1749380",
    "end": "1756740"
  },
  {
    "text": "But bottom line, you\nhave xi plus 1 equals xi minus f of xi divided\nby f prime of xi.",
    "start": "1756740",
    "end": "1770830"
  },
  {
    "text": "So that's the Newton iteration. And it's worth plugging in\nthe various values here.",
    "start": "1770830",
    "end": "1782130"
  },
  {
    "text": "1 divided by xi\nminus b divided by r. That's f of x on top divided by\nminus 1 divided by xi square.",
    "start": "1782130",
    "end": "1792809"
  },
  {
    "text": "So that's the\nderivative over here. So all I'm doing is\nplugging things in. But you want to visualize\nthis because this is really",
    "start": "1792810",
    "end": "1800140"
  },
  {
    "text": "what we need to compute. And we have xi plus 1 equals\nxi plus xi square times",
    "start": "1800140",
    "end": "1810820"
  },
  {
    "text": "1 over xi minus b divided by r.",
    "start": "1810820",
    "end": "1816049"
  },
  {
    "text": "And finally I get 2xi minus\nb xi square divided by r.",
    "start": "1816050",
    "end": "1824800"
  },
  {
    "text": "That is key. This is pretty important. So let's us look all the\nway to the left, which",
    "start": "1824800",
    "end": "1832379"
  },
  {
    "text": "is xi plus 1, all the way\nto the right, 2 times xi.",
    "start": "1832380",
    "end": "1837620"
  },
  {
    "text": "That doesn't scare\nus, 2 times something. Especially base 2, pretty easy.",
    "start": "1837620",
    "end": "1843070"
  },
  {
    "text": "That's a multiply. Multiplies don't\nscare us because we know how to do\nmultiplies anyway. This is a simple multiply.",
    "start": "1843070",
    "end": "1849809"
  },
  {
    "text": "And then I got a square here. Square. Not a square root. Squares don't scare us\nbecause that's a multiply,",
    "start": "1849810",
    "end": "1857240"
  },
  {
    "text": "just multiplying the\nsame number to itself. And this doesn't\nscare us because we know that we've chosen r\nto be an easy division.",
    "start": "1857240",
    "end": "1866620"
  },
  {
    "text": "So all of the operations\nhere are either easy,",
    "start": "1866620",
    "end": "1872140"
  },
  {
    "text": "or they require a multiply. So remember I'm going to put a\npicture up towards the end here",
    "start": "1872140",
    "end": "1879289"
  },
  {
    "text": "that tells you the overall\nstructure for computing square root of a or\nsquare root of 2.",
    "start": "1879290",
    "end": "1885400"
  },
  {
    "text": "But we've just sort of sold\nout to Newton, if you will. Because we said that we're\ngoing to use Newton's method",
    "start": "1885400",
    "end": "1892360"
  },
  {
    "text": "to compute essentially,\niteratively, square root of a.",
    "start": "1892360",
    "end": "1899960"
  },
  {
    "text": "And within the Newton\nmethod, the first iteration, if you will, of\nthe Newton method, we had to compute a reciprocal.",
    "start": "1899960",
    "end": "1907750"
  },
  {
    "text": "We had to compute 1 over xi. And in order to\ncompute 1 over xi, we're going to apply Newton's\nmethod again like I showed over",
    "start": "1907750",
    "end": "1916320"
  },
  {
    "text": "here and over there. And so that division is\ngoing to require iteration.",
    "start": "1916320",
    "end": "1923920"
  },
  {
    "text": "But the iteration at the second\nlevel is one of multiplication.",
    "start": "1923920",
    "end": "1929150"
  },
  {
    "text": "You're gonna repeatedly\napply multiplication because you're going\nto go xi plus 1 based on xi using multiplication\nand some easy operations.",
    "start": "1929150",
    "end": "1937890"
  },
  {
    "text": "And then you go xi plus 2, xi\nplus 3, and so on and so forth. That make sense?",
    "start": "1937890",
    "end": "1944061"
  },
  {
    "text": "I'll try and put this up to\ngive you the complete picture once we're done talking\nabout the division",
    "start": "1944062",
    "end": "1952250"
  },
  {
    "text": "algorithm and its complexity. But before I do\nthat, I just want to give you a sense of the\nconvergence of this scheme.",
    "start": "1952250",
    "end": "1961440"
  },
  {
    "text": "Again, I want to give\nyou an example first, and then I'll argue\nabout the convergence. ",
    "start": "1961440",
    "end": "1970330"
  },
  {
    "text": "You have to run\nthis iteratively. You've got to make i\nto get to the point where it's large enough that you\nhave your digits of precision.",
    "start": "1970330",
    "end": "1979230"
  },
  {
    "text": "And just as an\nexample, let's say we want r divided by b equals\n2 raised to 16 divided by 5.",
    "start": "1979230",
    "end": "1988387"
  },
  {
    "start": "1980000",
    "end": "2600000"
  },
  {
    "text": "So this is a fairly\nstraightforward example. But when you get up to integers,\nit turns out it's evocative.",
    "start": "1988387",
    "end": "1994659"
  },
  {
    "text": "So r was selected to be 2 raised\nto k to make for easy division.",
    "start": "1994660",
    "end": "2001760"
  },
  {
    "text": "And what I really want is that.",
    "start": "2001760",
    "end": "2006780"
  },
  {
    "text": "And I want to see how I get\nto that using Newton's method. And our initial\nguess, let's say we",
    "start": "2006780",
    "end": "2022180"
  },
  {
    "text": "try 2 raised to 16\ndivided by 4, because we know how to divide\nby a power of two.",
    "start": "2022180",
    "end": "2029010"
  },
  {
    "text": "And so that's 2 raised to 14. And that's our initial guess. So think of that as being x0.",
    "start": "2029010",
    "end": "2036400"
  },
  {
    "text": "That is x0. And that 16384.",
    "start": "2036400",
    "end": "2042834"
  },
  {
    "text": "x1 is going to be 2 times\n16384, which is exactly that,",
    "start": "2042834",
    "end": "2050679"
  },
  {
    "text": "minus 5 times\n16384 whole square.",
    "start": "2050679",
    "end": "2056849"
  },
  {
    "text": "So now you're starting to\nsquare a fairly big number. And obviously if you'd\nstarted with an even bigger r,",
    "start": "2056850",
    "end": "2062158"
  },
  {
    "text": "this would be a large number.  You go 65536 equals--\nand this is 12288.",
    "start": "2062159",
    "end": "2075660"
  },
  {
    "text": "So you really have one\ndigit of precision there. But the next time around,\nyou get 2 times 12288 minus 5",
    "start": "2075661",
    "end": "2086440"
  },
  {
    "text": "times 12288 square\ndivided by 65536.",
    "start": "2086440",
    "end": "2093158"
  },
  {
    "text": "And this division is easy. It's a shift. You get to 13056.",
    "start": "2093159",
    "end": "2099810"
  },
  {
    "text": "And I won't write\nthis whole thing out, but if you take that, the next\nthing you'll get is 13107.",
    "start": "2099810",
    "end": "2107079"
  },
  {
    "text": "So as you can see, there's\nrapid convergence here. And you can actually do a very\nsimilar analysis to the epsilon",
    "start": "2107080",
    "end": "2116660"
  },
  {
    "text": "analysis-- and I'll\nput it in the notes, but I won't do it here-- that\nI did for the square root",
    "start": "2116660",
    "end": "2122220"
  },
  {
    "text": "iteration to show that you\nhave a quadratic the rate of convergence when you apply\nNewton's method to division as",
    "start": "2122220",
    "end": "2131800"
  },
  {
    "text": "well. So you can prove that using\nthe symbolic analysis than we",
    "start": "2131800",
    "end": "2138190"
  },
  {
    "text": "did very similar to the\nepsilon n relationship to epsilon n plus 1. I'd suggest that it's\na difference equation",
    "start": "2138190",
    "end": "2144740"
  },
  {
    "text": "here so that analysis\nis not exactly the same. But you can run\nthrough that, and you",
    "start": "2144740",
    "end": "2150330"
  },
  {
    "text": "can read that in the notes. So we're in business. Finally things are\nlooking up with respect",
    "start": "2150330",
    "end": "2157250"
  },
  {
    "text": "to being able to actually\nimplement this in practice. I want to talk about complexity.",
    "start": "2157250",
    "end": "2162850"
  },
  {
    "text": "And I promise that there\nwas a subtlety associated with the complexity of division\nin relation to multiplication,",
    "start": "2162850",
    "end": "2171400"
  },
  {
    "text": "but let me just go over and\nwrite down what I just told you",
    "start": "2171400",
    "end": "2176490"
  },
  {
    "text": "with respect to the\nnumber of iterations that division requires.",
    "start": "2176490",
    "end": "2183150"
  },
  {
    "text": "So division,\nquadratic convergence.",
    "start": "2183150",
    "end": "2190880"
  },
  {
    "text": " So number of digits\ndoubles at each step.",
    "start": "2190880",
    "end": "2203470"
  },
  {
    "text": "Good news. So d digits of precision,\nlog d iterations.",
    "start": "2203470",
    "end": "2216770"
  },
  {
    "text": " Now let's say that we have\na particular algorithm",
    "start": "2216770",
    "end": "2225319"
  },
  {
    "text": "for multiplication that\nI'm just going to say, since we have so many\ndifferent algorithms,",
    "start": "2225320",
    "end": "2233330"
  },
  {
    "text": "I'm going to say multiplication\nin theta n raised",
    "start": "2233330",
    "end": "2238660"
  },
  {
    "text": "to alpha time, where alpha is\ngreater than or equal to 1.",
    "start": "2238660",
    "end": "2244289"
  },
  {
    "text": "I just want to be\ngeneral about it. And so assuming that I have a\nmultiplication algorithm, that",
    "start": "2244290",
    "end": "2252640"
  },
  {
    "text": "can run in theta\nn raised to alpha, where clearly you know alpha can\nbe 1.46 for Toom 3, et cetera.",
    "start": "2252640",
    "end": "2260950"
  },
  {
    "text": "And it's not quite that\nfor Schonhage-Strassen, but I just want to be working\nwith one particular complexity.",
    "start": "2260950",
    "end": "2270450"
  },
  {
    "text": "So I'll parameterize\nit in this fashion. And everything I say is going to\nbe true for Schonhage-Strassen",
    "start": "2270450",
    "end": "2276620"
  },
  {
    "text": "and Furer as well. But first, easy question. What is the\ncomplexity of division",
    "start": "2276620",
    "end": "2283890"
  },
  {
    "text": "using the analysis that I've\nput on the board so far?",
    "start": "2283890",
    "end": "2289609"
  },
  {
    "text": "n digit numbers\nit's going to be? I wanna hear from you.",
    "start": "2289610",
    "end": "2294980"
  },
  {
    "text": " How many hard\nmultipliers do I have?",
    "start": "2294980",
    "end": "2301640"
  },
  {
    "text": " Log of? AUDIENCE: n. PROFESSOR: Log of n, right?",
    "start": "2301640",
    "end": "2307530"
  },
  {
    "text": "It wasn't a hard question. So division would be theta\nlog n times n raised to alpha.",
    "start": "2307530",
    "end": "2317240"
  },
  {
    "text": " Everybody buy that? ",
    "start": "2317240",
    "end": "2324651"
  },
  {
    "text": "No? ",
    "start": "2324651",
    "end": "2330143"
  },
  {
    "text": "Ask a question if\nyou're confused. ",
    "start": "2330144",
    "end": "2335610"
  },
  {
    "text": "Maybe I should say\neverybody buy that?",
    "start": "2335610",
    "end": "2340620"
  },
  {
    "text": " How many people agree with that?",
    "start": "2340620",
    "end": "2346130"
  },
  {
    "text": "Big O? How many people agree with that? ",
    "start": "2346130",
    "end": "2352099"
  },
  {
    "text": "Yeah, that's right. Big O. I'm hedging my bets here. I'm just saying big O. I\ncould say big O of n cubed",
    "start": "2352099",
    "end": "2359680"
  },
  {
    "text": "and you should\nall agree with me. Or big O of whatever. You had a question? AUDIENCE: What's the\nlongest [INAUDIBLE]",
    "start": "2359680",
    "end": "2365482"
  },
  {
    "text": "number of [INAUDIBLE]\nwe need to get a certain level of [INAUDIBLE]? PROFESSOR: That's right. So if you want d\ndigits of precision,",
    "start": "2365482",
    "end": "2375990"
  },
  {
    "text": "then according to this\nargument-- and I think you",
    "start": "2375990",
    "end": "2381002"
  },
  {
    "text": "guys are a little\ndoubtful here because I kept talking about subtleties,\nand in fact there's a subtlety here, which I want\nto get to-- but this big O",
    "start": "2381002",
    "end": "2388910"
  },
  {
    "text": "thing is perfectly correct. But to answer your\nquestion, yes. Let's assume that it's\nn digits of precision.",
    "start": "2388910",
    "end": "2393980"
  },
  {
    "text": "That's what we assume\nwhether it's n or d. You can plug in the\nappropriate symbol here. And we're saying that, look,\nevery iteration is bounded",
    "start": "2393980",
    "end": "2402130"
  },
  {
    "text": "by n raised to alpha\ncomplexity for the multiply. And I'm going to do\na logarithmic number",
    "start": "2402130",
    "end": "2408860"
  },
  {
    "text": "of iterations. So I end up getting log n\ntimes n raised to alpha. So that is correct, in fact.",
    "start": "2408860",
    "end": "2415220"
  },
  {
    "text": "Big O is correct. So now it comes to the\ninteresting question, which is can you do\na better analysis?",
    "start": "2415220",
    "end": "2423050"
  },
  {
    "text": "So this sort of hearkens\nback to three weeks ago, maybe you've forgotten. Maybe you've blanked\nit out of your memory,",
    "start": "2423050",
    "end": "2429560"
  },
  {
    "text": "but I thought I described\nto you build max-heap.",
    "start": "2429560",
    "end": "2434670"
  },
  {
    "text": "And we had this\nstraightforward analysis of build max-heap that\nwas n log n complexity. And then we looked at it\na little more carefully,",
    "start": "2434670",
    "end": "2441420"
  },
  {
    "text": "and we started adding things\nup much more carefully. We turned into bank accountants. And then we decided that\nit was theta n complexity.",
    "start": "2441420",
    "end": "2449369"
  },
  {
    "text": "People remember that? Right? So I want you to turn\ninto bank accountants again, and then tell me first,\nthere's a nice observation",
    "start": "2449370",
    "end": "2457920"
  },
  {
    "text": "that you can make here\nthat we haven't made yet with respect to the\nsize of these numbers.",
    "start": "2457920",
    "end": "2465542"
  },
  {
    "text": "We know what we\nwant to eventually, but there's a nice observation\nwe can make it with respect to the size of these numbers.",
    "start": "2465542",
    "end": "2470930"
  },
  {
    "text": "And then we want to\nexploit that observation to do a better analysis of the\ntheta complexity of division.",
    "start": "2470930",
    "end": "2479830"
  },
  {
    "text": "So who wants to tell me\nwhat the observation is. This is definitely\nworth a cushion.",
    "start": "2479830",
    "end": "2485260"
  },
  {
    "text": "What's the observation? I want to end up with\nd digits of precision. ",
    "start": "2485260",
    "end": "2492930"
  },
  {
    "text": "If I give you another hint,\nI'm gonna give it away. Someone tell me.",
    "start": "2492930",
    "end": "2498690"
  },
  {
    "text": "This is a dynamic process, OK? So what do I start with?",
    "start": "2498690",
    "end": "2506160"
  },
  {
    "text": "What do I start with? If I want to compute\nsomething and you want to use Newton's method,\nwhat do you start with?",
    "start": "2506160",
    "end": "2513320"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] PROFESSOR: You start with\none digit of precision. That's fantastic.",
    "start": "2513320",
    "end": "2519507"
  },
  {
    "text": "I don't know if you already\nhave a cushion or not, but here's the second one. So you start with a small\nnumber of digits of precision.",
    "start": "2519507",
    "end": "2527829"
  },
  {
    "text": "And then you end up with a\nlarge million, whatever, number, which is your d.",
    "start": "2527830",
    "end": "2535100"
  },
  {
    "text": "So what does that mean? So now somebody take\nthat and run with it. Somebody take that\nand run with it.",
    "start": "2535100",
    "end": "2542770"
  },
  {
    "text": "You already have a cushion. Like many? ",
    "start": "2542770",
    "end": "2548510"
  },
  {
    "text": "You guys, usual suspects. So someone take that\nand run with it.",
    "start": "2548510",
    "end": "2553619"
  },
  {
    "text": "What can I do now? What does it mean if I start\nwith a small number of digits of precision? My initial guess was one, right?",
    "start": "2553620",
    "end": "2560230"
  },
  {
    "text": "I mean, that had one\ndigit of precision. And then the number of digits\ndoubles with each step.",
    "start": "2560230",
    "end": "2566330"
  },
  {
    "text": "So is there any\nreason why I'm doing, if I had d digits of\nprecision, eventually",
    "start": "2566330",
    "end": "2572450"
  },
  {
    "text": "that I'll have to do d digit\nmultiplies in each iteration?",
    "start": "2572450",
    "end": "2580550"
  },
  {
    "text": "Any reason why? Yeah. AUDIENCE: You don't have to,\nbecause [INAUDIBLE] multiplies are going to be trivial. And [INAUDIBLE] then you're\ngoing to eventually approach",
    "start": "2580550",
    "end": "2587525"
  },
  {
    "text": "the d to the alpha iteration. PROFESSOR: That's exactly right. Exactly right. That's worth a cushion. But now I want you\nor someone else,",
    "start": "2587525",
    "end": "2595490"
  },
  {
    "text": "tell me what the\niteration looks like. So this is the key observation.",
    "start": "2595490",
    "end": "2601250"
  },
  {
    "start": "2600000",
    "end": "2825000"
  },
  {
    "text": "The key observation is that if\nI want d digits of precision,",
    "start": "2601250",
    "end": "2620390"
  },
  {
    "text": "I'm going to start with\nmaybe one digit of precision. So this is d of p, or dig\nof p, not to be confused.",
    "start": "2620390",
    "end": "2629119"
  },
  {
    "text": "I start with 1, 2, 4,\nand I end up with d. And our claim was that this\nwas log d iterations, right?",
    "start": "2629120",
    "end": "2637460"
  },
  {
    "text": "So the initial\nmultiplies are easy.",
    "start": "2637460",
    "end": "2645460"
  },
  {
    "text": "Initially you're\ndoing constant work if you have really\nsmall numbers associated",
    "start": "2645460",
    "end": "2650530"
  },
  {
    "text": "with these multiplies. It's only towards the\nend that you end up doing a lot more work, right?",
    "start": "2650530",
    "end": "2656720"
  },
  {
    "text": "So someone tell me if I\nhave n raised to alpha,",
    "start": "2656720",
    "end": "2664510"
  },
  {
    "text": "and if I say I want\nto write an equation.",
    "start": "2664510",
    "end": "2670440"
  },
  {
    "text": "And I don't want\nto use theta here. I'm going to use\nconstants because I want to add up constants,\nand it's a little iffy then",
    "start": "2670440",
    "end": "2678200"
  },
  {
    "text": "you add up thetas. You need to be\nlooking at constants.",
    "start": "2678200",
    "end": "2683630"
  },
  {
    "text": "Now I can imagine that for this\niteration, the very first one,",
    "start": "2683630",
    "end": "2692329"
  },
  {
    "text": "that I have something like\nc times 1 raised to alpha, because it's just a\nsingle digit of precision.",
    "start": "2692330",
    "end": "2698070"
  },
  {
    "text": "OK And the next one, I'm\nusing the same algorithm. This is c times 2 raised\nto alpha, c times 4",
    "start": "2698070",
    "end": "2705646"
  },
  {
    "text": "raised to alpha.  And then out here\nI'm going to have",
    "start": "2705646",
    "end": "2712890"
  },
  {
    "text": "c times d by 4 raised to\nalpha plus c times d by 2",
    "start": "2712890",
    "end": "2719000"
  },
  {
    "text": "raised to alpha plus finally\nc times d raised to alpha.",
    "start": "2719000",
    "end": "2724120"
  },
  {
    "text": "And someone give me a bound. Who wants to give\nme a bound on this?",
    "start": "2724120",
    "end": "2730755"
  },
  {
    "text": " Who wants to give\nme a bound on this?",
    "start": "2730755",
    "end": "2737370"
  },
  {
    "text": "Less than or equal to. Let's just make it less than. What?",
    "start": "2737370",
    "end": "2743029"
  },
  {
    "text": "Someone?  Just plug in a value of alpha.",
    "start": "2743030",
    "end": "2749650"
  },
  {
    "text": "And remember your convergent\ngeometric series and things like that.",
    "start": "2749650",
    "end": "2755084"
  },
  {
    "text": "What is that?  Someone? Yeah.",
    "start": "2755084",
    "end": "2760549"
  },
  {
    "text": "AUDIENCE: Just some constant\ntimes d to the alpha? PROFESSOR: That's exactly right. Just some constant\ntimes d to the alpha.",
    "start": "2760550",
    "end": "2767710"
  },
  {
    "text": "And in fact, you can say,\nit's 2c d to the alpha. ",
    "start": "2767710",
    "end": "2776100"
  },
  {
    "text": "Keep a question for you aside. So that' sit. That's the little careful\nanalysis that we had to do,",
    "start": "2776100",
    "end": "2782280"
  },
  {
    "text": "which basically without\nchanging your code, really, suddenly gave you a\nbetter complexity.",
    "start": "2782280",
    "end": "2788810"
  },
  {
    "text": "Isn't that fun? That's always fun. You had this neat\nalgorithm to begin with.",
    "start": "2788810",
    "end": "2794760"
  },
  {
    "text": "And bottom line is you're\njust computing things a little more accurately,\nthan essentially saying",
    "start": "2794760",
    "end": "2801130"
  },
  {
    "text": "that you had to do\nall of this work with large number of digits of\nprecision at every iteration.",
    "start": "2801130",
    "end": "2808360"
  },
  {
    "text": "The number of digits\nactually increases. So what does this mean? I guess ultimately, the\ncomplexity of division",
    "start": "2808360",
    "end": "2816000"
  },
  {
    "text": "is now what? It's the same as the complexity\nof multiplication, right?",
    "start": "2816000",
    "end": "2823650"
  },
  {
    "text": "So regardless of whether we\ndid a Newton iteration or not, the complexity of division.",
    "start": "2823650",
    "end": "2832905"
  },
  {
    "start": "2832905",
    "end": "2844940"
  },
  {
    "text": "You are doing a logarithmic\nnumber of iterations, but since eventually\nall of the work is going to get done\nat the end here.",
    "start": "2844940",
    "end": "2852766"
  },
  {
    "text": "Most of the work is getting\ndone at the end when you have these long numbers. That's basically the\nessence of the argument.",
    "start": "2852766",
    "end": "2860250"
  },
  {
    "text": "So let me finish up and\ntalk about the complexity of computing square roots.",
    "start": "2860250",
    "end": "2865785"
  },
  {
    "start": "2865785",
    "end": "2871000"
  },
  {
    "text": "And as you can imagine,\neven though you",
    "start": "2871000",
    "end": "2876030"
  },
  {
    "text": "have two nested Newton\niterations here, you can make basically\nthe same argument.",
    "start": "2876030",
    "end": "2881850"
  },
  {
    "text": "So let's recall what\nwe're doing in terms of computing square roots. We want to compute\nsquare root of a.",
    "start": "2881850",
    "end": "2889319"
  },
  {
    "text": "And we said, well we don't\nquite know how to do this. We're going to end up doing\n10 raised to 2d times a,",
    "start": "2889320",
    "end": "2898370"
  },
  {
    "text": "and we're going to run\nNewton's method on it. So you've got one level\nof Newton's method.",
    "start": "2898370",
    "end": "2904000"
  },
  {
    "text": " And the iteration here with\nrespect to Newton's method",
    "start": "2904000",
    "end": "2909730"
  },
  {
    "text": "is something like xi plus 1\nequals xi plus a divided by xi.",
    "start": "2909730",
    "end": "2920100"
  },
  {
    "text": "Now every time you do\nthat for a particular xi, you're going to end up\nhaving to call a division.",
    "start": "2920100",
    "end": "2929320"
  },
  {
    "text": "So you're going to\ncall a division here, and then you're going\nto call a division here.",
    "start": "2929320",
    "end": "2936050"
  },
  {
    "text": "For each iteration you\nhave to call a division. And what we're\nsaying is, well we're going to end up having to call\nfor each of these division",
    "start": "2936050",
    "end": "2943747"
  },
  {
    "text": "methods we're going to\ncall Newton's method. ",
    "start": "2943747",
    "end": "2949260"
  },
  {
    "text": "And what that is\nsomething like 2xi",
    "start": "2949260",
    "end": "2956830"
  },
  {
    "text": "minus b xi square divided by r.",
    "start": "2956830",
    "end": "2962520"
  },
  {
    "text": "And that's going to be a\nbunch of multiplications. ",
    "start": "2962520",
    "end": "2968600"
  },
  {
    "text": "And what we argued up\nuntil this point was that the complexity\nof the division, even though we had a\nbunch of iterations here,",
    "start": "2968600",
    "end": "2975640"
  },
  {
    "text": "a logarithmic number of\niterations, the complexity of the division was the\nsame as the complexity of the multiplication\nbecause the numbers",
    "start": "2975640",
    "end": "2982240"
  },
  {
    "text": "started out small and grew big. All right? Everybody buy that? I'm going to use exactly\nthe same argument",
    "start": "2982240",
    "end": "2989250"
  },
  {
    "text": "for this level of\niteration as well. And again, when you start out\nwith the digits of precision",
    "start": "2989250",
    "end": "2997010"
  },
  {
    "text": "corresponding to\nsquare root of 2, you're going to start\nout guessing 1.5, which is your initial guess\nfor the square root of 2,",
    "start": "2997010",
    "end": "3004434"
  },
  {
    "text": "and it's going to be a small\nnumber of digits of precision. And eventually you'll\nget to a million digits.",
    "start": "3004435",
    "end": "3009560"
  },
  {
    "text": "So using essentially the\nsame equation summing,",
    "start": "3009560",
    "end": "3014840"
  },
  {
    "text": "you can argue that the\ncomplexity of computing square roots is the complexity\nof division, which of course is",
    "start": "3014840",
    "end": "3025060"
  },
  {
    "text": "the complexity of\nmultiplication. ",
    "start": "3025060",
    "end": "3032500"
  },
  {
    "text": "And that's the story. So obviously the code would\nbe a little more complicated",
    "start": "3032500",
    "end": "3037990"
  },
  {
    "text": "than a multiplication\ncode, because you have all this control\nstructure outside of it. It's really two nested loops.",
    "start": "3037990",
    "end": "3044920"
  },
  {
    "text": "The multiply is getting\ncalled a bunch of times to do the divide,\nand the divide is getting called a bunch of times\nto compute the square root.",
    "start": "3044920",
    "end": "3051840"
  },
  {
    "text": "But ultimately, because\nthe numbers are growing and you start out with small\nnumbers, most of the work is done when you get to\nthe millions of digits",
    "start": "3051840",
    "end": "3058819"
  },
  {
    "text": "of precision. And you basically\nhave theta n raised to alpha complexity for\ncomputing square roots.",
    "start": "3058820",
    "end": "3066940"
  },
  {
    "text": "If you have n raised\nto alpha multiply, and you want n\ndigits of precision.",
    "start": "3066940",
    "end": "3073060"
  },
  {
    "text": "All right? See you next time. Stick around for questions.",
    "start": "3073060",
    "end": "3076980"
  }
]