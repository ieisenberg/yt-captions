[
  {
    "start": "0",
    "end": "20000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6340"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation, or\nview additional materials",
    "start": "6340",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13320",
    "end": "21092"
  },
  {
    "start": "20000",
    "end": "40000"
  },
  {
    "text": "PROFESSOR: So this\nhour we're going to talk about SIMD\nprogramming with cell. ",
    "start": "21092",
    "end": "27284"
  },
  {
    "text": "First we'll talk a\nlittle bit about what SIMD is and then\nabout the facilities",
    "start": "27284",
    "end": "32810"
  },
  {
    "text": "that cell and the\ncompiler provide for programming with SIMD. And then some design\nconsiderations",
    "start": "32810",
    "end": "37910"
  },
  {
    "text": "that you have to keep in mind\nwhen you're doing things.  All right so the\nsituation these days",
    "start": "37910",
    "end": "44310"
  },
  {
    "text": "is that most compute\nbound applications are running through\na large piece of data",
    "start": "44310",
    "end": "49870"
  },
  {
    "text": "and running the same\ncomputations on it over and over again,\nor rather running the same computations across all\nthe pieces of different data.",
    "start": "49870",
    "end": "56860"
  },
  {
    "text": "And very frequently\nthere'll be no dependence between iterations when you're\ngoing through this data.",
    "start": "56860",
    "end": "63110"
  },
  {
    "text": "So that means\nthere's opportunities for you to data parallelize. ",
    "start": "63110",
    "end": "69970"
  },
  {
    "start": "68000",
    "end": "177000"
  },
  {
    "text": "So as an example, if\nwe have for example,",
    "start": "69970",
    "end": "75390"
  },
  {
    "text": "say we're multiplying\na0 and b0 to get c0.",
    "start": "75390",
    "end": "80510"
  },
  {
    "text": "And suppose we want\nto actually perform this operation across all the\nelements of arrays a, b and c.",
    "start": "80510",
    "end": "89250"
  },
  {
    "text": "So instead of multiplying\ntwo elements or two integers together, we're actually\ngoing to be taking two arrays",
    "start": "89250",
    "end": "97990"
  },
  {
    "text": "an element-wise multiplying\neach of the-- multiplying each of the pairs\nelement-wise and writing",
    "start": "97990",
    "end": "105390"
  },
  {
    "text": "the results to a third array. So the picture's going to\nlook something like this. And you would of\ncourse represent this",
    "start": "105390",
    "end": "112120"
  },
  {
    "text": "using for example, four loop. Now what we're going to do\nis instead of-- let's see,",
    "start": "112120",
    "end": "121659"
  },
  {
    "text": "so you can think of this as\nkind of an operation that's abstractly operating\non these entire arrays.",
    "start": "121660",
    "end": "129289"
  },
  {
    "text": "And we're not going\nto go quite that far, but what we're\ngoing to do is we're",
    "start": "129289",
    "end": "134349"
  },
  {
    "text": "going to think of\nthese operations as acting on these kind\nof bundles of elements. So we're going to bundle\nour arrayed elements",
    "start": "134350",
    "end": "141480"
  },
  {
    "text": "into groups of four. And then each time we're\ngoing to take a group and multiply with\nanother group using",
    "start": "141480",
    "end": "147580"
  },
  {
    "text": "this element-wise multiplication\nand write the result to this third bundle. OK does that make sense?",
    "start": "147580",
    "end": "155480"
  },
  {
    "text": "Now the thing about\nthis kind of model is that cell is going to\nprovide very good hardware support for something that\nlooks kind of like this.",
    "start": "155480",
    "end": "163181"
  },
  {
    "text": "AUDIENCE: Is that\nactual cell [INAUDIBLE] ",
    "start": "163181",
    "end": "168770"
  },
  {
    "text": "PROFESSOR: Yes,\nI'll get into this. In fact, this is what we'll\nbe talking about the syntax and meaning of\nthis kind of thing.",
    "start": "168770",
    "end": "175940"
  },
  {
    "text": "All right?  So for this kind\nof thing to happen",
    "start": "175940",
    "end": "183530"
  },
  {
    "text": "we need the compiler to\nsupport two different things. First is we need to be able to\naddress these kind of bundles",
    "start": "183530",
    "end": "189680"
  },
  {
    "text": "of elements and these are\ngoing to be called vectors. And second we need to be\nable to perform operations",
    "start": "189680",
    "end": "195590"
  },
  {
    "text": "on these vectors. So cell and the XLC compiler\ngive us support for this.",
    "start": "195590",
    "end": "205590"
  },
  {
    "start": "197000",
    "end": "264000"
  },
  {
    "text": "And what they're going\nto do is provide first, registers which are\ncapable of holding vectors.",
    "start": "205590",
    "end": "210939"
  },
  {
    "text": "Now normally you\nthink of a register as holding on a 32-bit\nmachine, one machine word",
    "start": "210940",
    "end": "218299"
  },
  {
    "text": "will hold a 32-bit\nint, for example. What we're going\nto have on the cell is these 128-bit\nregisters which are",
    "start": "218300",
    "end": "225562"
  },
  {
    "text": "going to be able to\nhold for example four ints right next to each other. So we're going to be able\nto take this bundle of ints",
    "start": "225562",
    "end": "232549"
  },
  {
    "text": "and operate it--\noperate on it as a unit. And the second\npart is we're going",
    "start": "232550",
    "end": "239290"
  },
  {
    "text": "to have operations that act\non these vector registers. So the cell is going to support\nspecial assembly instructions",
    "start": "239290",
    "end": "246957"
  },
  {
    "text": "and it's going to be\nable to interpret those as acting on particular vectors.",
    "start": "246957",
    "end": "252019"
  },
  {
    "text": "But also we're going to have C++\nlanguage extensions which are called intrinsics. And those are going\nto give us access",
    "start": "252020",
    "end": "257180"
  },
  {
    "text": "to these special\nassembly instructions, but not require us to be\npoking around in the assembly.",
    "start": "257180",
    "end": "265200"
  },
  {
    "start": "264000",
    "end": "355000"
  },
  {
    "text": "All right now the\nbig draw of this is that these\noperations are going to be pretty much as fast\nas single operations, which",
    "start": "265200",
    "end": "273545"
  },
  {
    "text": "means that if we take\nadvantage of them we can make our code run\nsay four times as fast. ",
    "start": "273545",
    "end": "281790"
  },
  {
    "text": "OK so how do we refer to these\nvectors when we're coding? ",
    "start": "281790",
    "end": "288470"
  },
  {
    "text": "XLC is going to provide\nus with these intrinsics. And we have these\nvector data types",
    "start": "288470",
    "end": "294150"
  },
  {
    "text": "and each one is just\ngoing to specify how to interpret a\nconsecutive group of 128-bits",
    "start": "294150",
    "end": "300120"
  },
  {
    "text": "as some sort of vector. And you can have vectors\nof varying element sizes and varying number of elements.",
    "start": "300120",
    "end": "308400"
  },
  {
    "text": "So when you're programming\non the PPU or the SPU you get these four different\nkinds of vector data types.",
    "start": "308400",
    "end": "316680"
  },
  {
    "text": "You can declare things\nas for example, vector signed int, which is what\nI mentioned in the example.",
    "start": "316680",
    "end": "323120"
  },
  {
    "text": "Which is where you have four\nints next to each other each 32-bits. You could also\nhave vectors which",
    "start": "323120",
    "end": "328639"
  },
  {
    "text": "contains 16-bit integers\nor 8-bit integers. And you could also have\nvectors of floating point--",
    "start": "328640",
    "end": "338220"
  },
  {
    "text": "floating point numbers. I should mention\nthat all of these",
    "start": "338220",
    "end": "343680"
  },
  {
    "text": "signed integer types also\nhave unsigned equivalence. Anyway, so you can just declare\nthese anywhere in your code",
    "start": "343680",
    "end": "350300"
  },
  {
    "text": "and use them as if they\nwere a C++ data type. All right any questions?",
    "start": "350300",
    "end": "356270"
  },
  {
    "start": "355000",
    "end": "371000"
  },
  {
    "text": "On the SPU you also get some\nadditional vector data types. One is vector signed\nlong-long, which is 64-bit ints",
    "start": "356270",
    "end": "363235"
  },
  {
    "text": "and you can fit two\nof those in 128. And you can also fit two\ndouble precision floating",
    "start": "363235",
    "end": "368660"
  },
  {
    "text": "point numbers in 128-bits.  Now the compiler's actually\nsupport these types",
    "start": "368660",
    "end": "375699"
  },
  {
    "start": "371000",
    "end": "403000"
  },
  {
    "text": "pretty nicely. So not only can you declare\nvariables of these types pretty much anywhere\nin your code, you can also declare pointers\nto these types and arrays",
    "start": "375700",
    "end": "382680"
  },
  {
    "text": "of these types. All right. And so they look pretty\nmuch like natural C++ types,",
    "start": "382680",
    "end": "389130"
  },
  {
    "text": "except that they translate\ndirectly into these particular types that the\nhardware supports. ",
    "start": "389130",
    "end": "398510"
  },
  {
    "text": "Now in order to manipulate\nthese vector data,",
    "start": "398510",
    "end": "404199"
  },
  {
    "start": "403000",
    "end": "497000"
  },
  {
    "text": "we're going to have\nthe-- we're going to have compiler\nextensions called intrinsics, which are going to\nprovide access to the assembly",
    "start": "404199",
    "end": "411060"
  },
  {
    "text": "level features that we want. Remember we're going to have\nspecific assembly instructions that correspond to for example,\nmultiplying two vectors which",
    "start": "411060",
    "end": "422139"
  },
  {
    "text": "contain each four,\n32-bit integers. And instead of writing\nout-- instead of going",
    "start": "422140",
    "end": "430539"
  },
  {
    "text": "into the assembly and actually\ninserting that instruction ourselves, we just use a\ncompiler intrinsic inside",
    "start": "430540",
    "end": "437250"
  },
  {
    "text": "our C++ code. And what it does is it\nprovides this notation that looks a lot like\na function call,",
    "start": "437250",
    "end": "442327"
  },
  {
    "text": "but the compiler\nautomatically translates it into the correct\nassembly instruction. And again you\ndon't have to worry",
    "start": "442327",
    "end": "447890"
  },
  {
    "text": "about going into the\nassembly and messing around with this instruction\nthat's supposed to apply to these registers.",
    "start": "447890",
    "end": "453414"
  },
  {
    "text": "You don't have to worry about\nregister allocation at all. The compiler just figures\nout the right thing for you.",
    "start": "453415",
    "end": "459426"
  },
  {
    "text": "And to use these in your SPU\nprogram you're going to want to include SPU_intrinsics.h. ",
    "start": "459426",
    "end": "466736"
  },
  {
    "text": "Now what's a little\nbit confusing is that you're going to have\nslightly different intrinsics available on the\nPPU and the SPU,",
    "start": "466736",
    "end": "472567"
  },
  {
    "text": "because those are actually going\nto have different instruction sets. But anyway as an example,\nyou can declare two variables",
    "start": "472567",
    "end": "483320"
  },
  {
    "text": "of type vector\nsigned int and then you can multiply them using\nthis intrinsic called SPU add.",
    "start": "483320",
    "end": "490879"
  },
  {
    "text": "All right and assign them to\na third vector signed int. Questions? Yep.",
    "start": "490880",
    "end": "496834"
  },
  {
    "text": "AUDIENCE: In what way are\nthey introduced if you're on the SPU or the PPU? Is it just-- not\nentirely the same set",
    "start": "496834",
    "end": "504740"
  },
  {
    "start": "497000",
    "end": "583000"
  },
  {
    "text": "of operations available? Or are there actually\nsemantic differences? Could make a little header file\nthat masks over the differences",
    "start": "504740",
    "end": "511080"
  },
  {
    "text": "mostly. PROFESSOR: There are going\nto be some operations that are only available on\none and not the other.",
    "start": "511080",
    "end": "517190"
  },
  {
    "text": "But in general, if\nyou look at the names, if the names\ncorrespond, and I'll go into that in a\nlittle bit, then they",
    "start": "517190",
    "end": "524195"
  },
  {
    "text": "should perform essentially\nthe same function. AUDIENCE: [INAUDIBLE] mostly\nwas the [INAUDIBLE] also",
    "start": "524195",
    "end": "536050"
  },
  {
    "text": "some name differences where\nthere really don't need to be. For instance, if you try\nto do a shift on the PPU",
    "start": "536050",
    "end": "543465"
  },
  {
    "text": "I believe it's a [INAUDIBLE]\nSL, shift logical right,",
    "start": "543465",
    "end": "549450"
  },
  {
    "text": "shift logical left or\nshift arithmetic right. Sort of things you\nwould remember.",
    "start": "549450",
    "end": "555529"
  },
  {
    "text": "On the SPU it's the acronym\nfor rotate and mask for shift.",
    "start": "555530",
    "end": "565900"
  },
  {
    "text": "So R-O-T-M-A-R or\nsomething like that. ",
    "start": "565900",
    "end": "572880"
  },
  {
    "text": "So yes there's some differences\nthat don't need to be there. ",
    "start": "572880",
    "end": "584294"
  },
  {
    "start": "583000",
    "end": "670000"
  },
  {
    "text": "PROFESSOR: OK so\nto actually create these vectors there's a\ncouple of different notations you can use.",
    "start": "584294",
    "end": "589540"
  },
  {
    "text": "The first is, you can use this\nthing which looks like a cast to, for example,\nvector signed int.",
    "start": "589540",
    "end": "595800"
  },
  {
    "text": "So you do vector signed\nint in parentheses and then a list of four\nintegers you want to fill in.",
    "start": "595800",
    "end": "602769"
  },
  {
    "text": "And that will create an integer\nvector and assign it to a.",
    "start": "602770",
    "end": "607950"
  },
  {
    "text": "You can also, I\nbelieve you can also use that notation\nwith just one integer",
    "start": "607950",
    "end": "613930"
  },
  {
    "text": "and it will fill in that\ninteger in all four positions. There's also an SPU\nintrinsic called splats",
    "start": "613930",
    "end": "621830"
  },
  {
    "text": "that you can use to basically\ncopy the same integer to all four components. AUDIENCE: How does\nit know you're not",
    "start": "621830",
    "end": "627788"
  },
  {
    "text": "using a comma operator? ",
    "start": "627788",
    "end": "633145"
  },
  {
    "text": "PROFESSOR: Yeah I don't--\nis that right David, with the parentheses\nin the second part? OK.",
    "start": "633145",
    "end": "639778"
  },
  {
    "text": "AUDIENCE: Whatever. AUDIENCE: Another\ncaveat here from someone who's been in the trenches is\nthat XLC likes this notation.",
    "start": "639778",
    "end": "648520"
  },
  {
    "text": "GCC sometimes likes curly\nbrace notations instead.",
    "start": "648520",
    "end": "653686"
  },
  {
    "text": "PROFESSOR: So I'd\nseen both of those and I do know which to do. [INTERPOSING VOICES] AUDIENCE: [INAUDIBLE]. ",
    "start": "653686",
    "end": "664610"
  },
  {
    "text": "PROFESSOR: OK great thanks. ",
    "start": "664610",
    "end": "670430"
  },
  {
    "start": "670000",
    "end": "729000"
  },
  {
    "text": "All right. And after you've assigned some\nof these variables in order to get back the pieces out,\none way you can do it is to use",
    "start": "670430",
    "end": "678720"
  },
  {
    "text": "this union trick where you\nassign or rather you allocate",
    "start": "678720",
    "end": "684430"
  },
  {
    "text": "something of vector signed int\nand then you tell C++ that it",
    "start": "684430",
    "end": "689649"
  },
  {
    "text": "can find an array of\nintegers in the same place. And what that will do is\npull out the components. ",
    "start": "689650",
    "end": "697410"
  },
  {
    "text": "So if you define\nthis union this way, then you get a\ntype called intVec. And any time you have\nan intVec you can either",
    "start": "697410",
    "end": "705060"
  },
  {
    "text": "do dot Vec to get at the vector\nsigned int, the vector data",
    "start": "705060",
    "end": "710160"
  },
  {
    "text": "type. Or you can use dot\nvals to-- with an array index get at the\ncomponents of the vector.",
    "start": "710160",
    "end": "719640"
  },
  {
    "text": "And you could also use\nthis intrinsic call SPU extract to pick out\nthe same components.",
    "start": "719640",
    "end": "725740"
  },
  {
    "start": "725740",
    "end": "731290"
  },
  {
    "start": "729000",
    "end": "760000"
  },
  {
    "text": "XLC provides a bunch of\ndifferent vector operations that you can use. There's integer operations,\nfloating point operations,",
    "start": "731290",
    "end": "738590"
  },
  {
    "text": "there are a permutation\nand formatting operations which you can use to shuffle\ndata around inside vector.",
    "start": "738590",
    "end": "746240"
  },
  {
    "text": "And there's also load\nand store instructions. And I believe we have a\nreference linked off the course",
    "start": "746240",
    "end": "752830"
  },
  {
    "text": "website if you want to\nfigure out more about these. I'm only going to\ntouch on a few of them.",
    "start": "752830",
    "end": "761310"
  },
  {
    "start": "760000",
    "end": "835000"
  },
  {
    "text": "OK so the arithmetic and\nlogical operations like I said,",
    "start": "761310",
    "end": "767610"
  },
  {
    "text": "most of these are the same\nbetween the PPU and the SPU. There's some that are\nnamed slightly differently",
    "start": "767610",
    "end": "775509"
  },
  {
    "text": "and some that are not\navailable on the PPU. So these are all things you\nwould expect, add, subtract.",
    "start": "775510",
    "end": "781540"
  },
  {
    "text": "Madd is multiply and\nthen add with three-- with three arguments.",
    "start": "781540",
    "end": "787280"
  },
  {
    "text": "Multiply, re is for reciprocal. You can also do\nbit-wise and, or xor",
    "start": "787280",
    "end": "794460"
  },
  {
    "text": "and I believe there are other\nlogical operations there too. Now the thing is\nyou have to worry about which PPU or SPU\ninstruction you're using.",
    "start": "794460",
    "end": "802540"
  },
  {
    "text": "But you usually don't have\nto worry about selecting the right vector type.",
    "start": "802540",
    "end": "810370"
  },
  {
    "text": "The compiler should figure out\nwhich vector types you're using and substitute the\nappropriate assembly",
    "start": "810370",
    "end": "816200"
  },
  {
    "text": "instruction that produces a\nresult of the same vector type. So all these operations\nare what we call generic.",
    "start": "816200",
    "end": "823960"
  },
  {
    "text": "And they stand in for all\nthe specific instructions, which are-- which only apply\nto a single vector type.",
    "start": "823960",
    "end": "831576"
  },
  {
    "text": "Does that make sense? ",
    "start": "831576",
    "end": "836830"
  },
  {
    "start": "835000",
    "end": "960000"
  },
  {
    "text": "OK so one handy thing is\na permutation operation. And this allows you to rearrange\nthe bytes inside a vector",
    "start": "836830",
    "end": "844070"
  },
  {
    "text": "or two vectors arbitrarily. And so the syntax\nis SPU shuffle a, b which are your source\nvectors and pattern which",
    "start": "844070",
    "end": "852130"
  },
  {
    "text": "tells you how to shuffle them. And pattern is going\nto be interpreted as a vector of 16-bytes.",
    "start": "852130",
    "end": "861040"
  },
  {
    "text": "And each byte is\ngoing to tell you-- each byte is going to tell\nthe compiler how to pick out one of these bytes\nin the result.",
    "start": "861040",
    "end": "868560"
  },
  {
    "text": "And how the byte is\ninterpreted is the low,",
    "start": "868560",
    "end": "875510"
  },
  {
    "text": "the low four bits\nare going to specify which position the source\nis going to come from.",
    "start": "875510",
    "end": "882790"
  },
  {
    "text": "And the fourth byte is going\nto specify whether you're going to pull from a or b.",
    "start": "882790",
    "end": "888080"
  },
  {
    "text": "So as an example,\nhere's the pattern VC and if you look at the\nsecond byte which is",
    "start": "888080",
    "end": "894570"
  },
  {
    "text": "one, which is one, four in hex. Then that means the\ndestination register",
    "start": "894570",
    "end": "902750"
  },
  {
    "text": "is going to contain the fourth\nbyte or the fourth byte of b,",
    "start": "902750",
    "end": "908140"
  },
  {
    "text": "all right. So four means select the element\nnumbered four and one means",
    "start": "908140",
    "end": "913190"
  },
  {
    "text": "select from b. Does that make sense? And this is very versatile\nby putting in the right,",
    "start": "913190",
    "end": "919140"
  },
  {
    "text": "by putting in the right\npattern vector you can arrange for all these bytes to be\nshuffled around however",
    "start": "919140",
    "end": "924170"
  },
  {
    "text": "you want. AUDIENCE: The pattern is\na constant [INAUDIBLE]. PROFESSOR: Pardon? AUDIENCE: The\npattern is a constant",
    "start": "924170",
    "end": "929407"
  },
  {
    "text": "in intermediate parameter. ",
    "start": "929407",
    "end": "934714"
  },
  {
    "text": "PROFESSOR: You can fill in\nthe parameter at run time if that's what you're asking. AUDIENCE: [INAUDIBLE]",
    "start": "934715",
    "end": "941707"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "941707",
    "end": "950365"
  },
  {
    "text": "PROFESSOR: OK, also useful\nare these rotation operations which will let you\nshift your vector left",
    "start": "950365",
    "end": "957490"
  },
  {
    "text": "or right by some amount. ",
    "start": "957490",
    "end": "962550"
  },
  {
    "text": "Now one thing to be aware\nof is that on the SPU you only have these\n128-bit registers.",
    "start": "962550",
    "end": "969339"
  },
  {
    "text": "So on the PPU you have\ndifferent registers which are suitable for\nholding different types.",
    "start": "969340",
    "end": "975240"
  },
  {
    "text": "For example, there's word-sized\nregisters for holding ints and PPU also has these\n128-bit registers.",
    "start": "975240",
    "end": "983230"
  },
  {
    "text": "But the SPU has nothing else. So that means whenever you're\nusing scalar types on the SPU",
    "start": "983230",
    "end": "989940"
  },
  {
    "text": "they're all going to be\nusing these large registers. No matter what the size of\nthe scalar you're using.",
    "start": "989940",
    "end": "996860"
  },
  {
    "text": "And depending on the\nsize of the scalar you're using it's going to\ngo in a particular position",
    "start": "996860",
    "end": "1003449"
  },
  {
    "text": "inside this wide register. It's called a quadword\nregister, because it's 16-bytes.",
    "start": "1003450",
    "end": "1009210"
  },
  {
    "text": " Now the thing to\nwatch out for is that whenever you load\nsomething from memory",
    "start": "1009210",
    "end": "1016060"
  },
  {
    "text": "into-- whenever you load\na scalar from memory into one of these\nregisters, there's",
    "start": "1016060",
    "end": "1021829"
  },
  {
    "text": "going to have to be a little\nextra processing done in order to shift-- in order\nto possibly shift",
    "start": "1021830",
    "end": "1027449"
  },
  {
    "text": "the scalar into the right\nplace inside this register. And furthermore, the\nhardware is always",
    "start": "1027450",
    "end": "1035449"
  },
  {
    "text": "going to want to grab one of\nthese quadwords all at a time. So loading a scalar\nis not going to be",
    "start": "1035450",
    "end": "1040630"
  },
  {
    "text": "any cheaper than loading one\nof these quadword registers. So one possible\nyou're going to want",
    "start": "1040630",
    "end": "1045829"
  },
  {
    "text": "to load an entire quadword\nregister at a time. And if you just\nneed a part of it,",
    "start": "1045829",
    "end": "1051870"
  },
  {
    "text": "then you can figure\nthat out later. But you might as well\nget the whole thing. Questions?",
    "start": "1051870",
    "end": "1058708"
  },
  {
    "text": "AUDIENCE: So when you--\njust a scalar question. So when you load a\nscalar value that's",
    "start": "1058708",
    "end": "1065860"
  },
  {
    "text": "not aligned-- it's not aligned\nwith the preferred position is",
    "start": "1065860",
    "end": "1073380"
  },
  {
    "text": "that-- is there overhead\nassociated with that? PROFESSOR: I'm not\nsure how much overhead is associated with that.",
    "start": "1073380",
    "end": "1079040"
  },
  {
    "text": "Pardon? Oh do you know? AUDIENCE: Well, unlike\nscalar it's [INAUDIBLE], it can only load on\n16-byte boundaries.",
    "start": "1079040",
    "end": "1087080"
  },
  {
    "text": "So it's going to load the-- load\nsomething that includes that and that's going to have to\nshift to the another position.",
    "start": "1087080",
    "end": "1095531"
  },
  {
    "text": "PROFESSOR: So do\nunaligned-- when it has to shift\nthe scalar around, does that actually\ntake longer than",
    "start": "1095531",
    "end": "1101750"
  },
  {
    "text": "went in-- when it's natural? AUDIENCE: I don't know if\nit's-- well what you can do,",
    "start": "1101750",
    "end": "1107730"
  },
  {
    "text": "you can set some\nflags in XLC that say, align all of my\nscalars correctly.",
    "start": "1107730",
    "end": "1114340"
  },
  {
    "text": "And we'll waste 4x overhead. It'll even say align my array,\nhave my elements so that I",
    "start": "1114340",
    "end": "1121087"
  },
  {
    "text": "can have the scalar array\nat the back-- I can load and it will waste the overhead's\nthat everything in the array is [INAUDIBLE].",
    "start": "1121087",
    "end": "1126760"
  },
  {
    "text": "So you can have the\ncompiler trade off space versus time for\nyou off two switches. PROFESSOR: I see.",
    "start": "1126760",
    "end": "1131812"
  },
  {
    "start": "1131812",
    "end": "1137490"
  },
  {
    "start": "1136000",
    "end": "1868000"
  },
  {
    "text": "OK so we're going to want to\nlook at the sim application from recitation two. And we want to adapt that to\nmake use of SIMD data types",
    "start": "1137490",
    "end": "1145040"
  },
  {
    "text": "and intrinsics. So what we've done is,\nremember we had these x, y, z",
    "start": "1145040",
    "end": "1152380"
  },
  {
    "text": "coordinates that we\nwere manipulating. What we're going to do is\nwe're going to pad each one. It was three words\nbefore and we're",
    "start": "1152380",
    "end": "1157778"
  },
  {
    "text": "going to pad each one so\nthat it fills a quadword. And so for each\nquadword of course",
    "start": "1157778",
    "end": "1162910"
  },
  {
    "text": "the first three words are going\nto correspond to the x, y, z components. And we can grab those\nout using SPU extract",
    "start": "1162910",
    "end": "1169850"
  },
  {
    "text": "or some other intrinsics. Now when we're\ndoing manipulations",
    "start": "1169850",
    "end": "1174880"
  },
  {
    "text": "with these components\nfor example, we wanted to find\nthe displacement",
    "start": "1174880",
    "end": "1180000"
  },
  {
    "text": "between two locations. And that's just subtracting\ntwo of these coordinates. So we can do that subtraction\nwhich before required three",
    "start": "1180000",
    "end": "1187970"
  },
  {
    "text": "floating point subtractions. We can replace that with\na single SIMD instruction. Does that make sense?",
    "start": "1187970",
    "end": "1193680"
  },
  {
    "text": " OK so all this-- most of\nthis has already been done",
    "start": "1193680",
    "end": "1203580"
  },
  {
    "text": "and we're providing most\nof the implementation of this SIMD version of sim.",
    "start": "1203580",
    "end": "1211320"
  },
  {
    "text": "And what we want you to do\nis download this, download the tarball for this\nrecitation and then go in there",
    "start": "1211320",
    "end": "1218700"
  },
  {
    "text": "and what we want you to do\nis fill in one of the blanks. All right. So there's just\none function here that's been left unimplemented.",
    "start": "1218700",
    "end": "1224721"
  },
  {
    "text": " And to see if you\nknow what's going on,",
    "start": "1224721",
    "end": "1230210"
  },
  {
    "text": "see if you can fill in the\nimplementation for this. Any questions? So this question-- this\nfunction you want to implement",
    "start": "1230210",
    "end": "1236370"
  },
  {
    "text": "is basically going to\ntake a vector float",
    "start": "1236370",
    "end": "1241390"
  },
  {
    "text": "and if that float\ncontains a, b, c and d you want to return\na-- you want to return",
    "start": "1241390",
    "end": "1247130"
  },
  {
    "text": "a vector which each\nof whose elements is a plus b plus c plus d.",
    "start": "1247130",
    "end": "1252779"
  },
  {
    "text": "Questions?  AUDIENCE: What\ndirectory under the--",
    "start": "1252780",
    "end": "1260630"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: So we're going\nto go into sim a list. ",
    "start": "1260630",
    "end": "1273168"
  },
  {
    "text": "AUDIENCE: But we can stay\naround afterwards and help you figure out what's going on. PROFESSOR: OK so here's\none implementation.",
    "start": "1273168",
    "end": "1281280"
  },
  {
    "text": " Basically we're going to just\ndeclare another vector float",
    "start": "1281280",
    "end": "1288220"
  },
  {
    "text": "and that vector\nfloat we're going to-- that's basically we're\njust going to do these swaps.",
    "start": "1288220",
    "end": "1300559"
  },
  {
    "text": "So notice in this\none we're swapping the first and second--\nwe're swapping",
    "start": "1300560",
    "end": "1307350"
  },
  {
    "text": "the first and second words. So that means down\nhere we're going to want to carry bits four,\nfive, six, seven and then--",
    "start": "1307350",
    "end": "1315500"
  },
  {
    "text": "or bytes four, five, six, seven\nfirst and then bytes 0, 1, 2, 3. And then over here we want\nbytes 12, 13, 14, 15 and then",
    "start": "1315500",
    "end": "1323880"
  },
  {
    "text": "8, 9, 10, 11. Everyone see what's going\non for the first shuffle? ",
    "start": "1323880",
    "end": "1329821"
  },
  {
    "text": "And then we're going to just\nadd that to our original vector to get this. And we can do that\nagain, this time now",
    "start": "1329821",
    "end": "1337840"
  },
  {
    "text": "we just want to swap\nthese two halves. So the shuffle pattern is going\nto be 8, 9, 10, 11, 12, 13, 14,",
    "start": "1337840",
    "end": "1345143"
  },
  {
    "text": "15 followed by 0,\n1, 2, 3, 4, 5, 6, 7. ",
    "start": "1345144",
    "end": "1352120"
  },
  {
    "text": "Make sense? ",
    "start": "1352120",
    "end": "1358750"
  },
  {
    "text": "OK so the way we translated the\nprogram we just used into SIMD",
    "start": "1358750",
    "end": "1364490"
  },
  {
    "text": "was we used a struct of arrays. Basically each of\nthese structs that we",
    "start": "1364490",
    "end": "1369610"
  },
  {
    "text": "had from our previous\nimplementation just carried over and we just\nput all those into an array. So the structs were\nright next to each other.",
    "start": "1369610",
    "end": "1377600"
  },
  {
    "text": "Alternatively we could\nhave laid out the, laid out the data in\nmemory in a different way",
    "start": "1377600",
    "end": "1383390"
  },
  {
    "text": "and this is called an\narray of structs layout. Instead what we can do is\nput all the like fields",
    "start": "1383390",
    "end": "1389680"
  },
  {
    "text": "next to each other so\nthat we have, for example, an array of all the\nx components, then an array of all the\ny components, then",
    "start": "1389680",
    "end": "1395590"
  },
  {
    "text": "an array of all\nthe z components. And when you reorder\nthe data this way",
    "start": "1395590",
    "end": "1401610"
  },
  {
    "text": "you get different ways\nyou can use to process it. So for example,\nnow each quadword",
    "start": "1401610",
    "end": "1409460"
  },
  {
    "text": "instead of containing the\ndata for a single point is going to contain the data\nfor the same component of four",
    "start": "1409460",
    "end": "1415790"
  },
  {
    "text": "consecutive points. Everyone see that?  And actually we can\nimplement the algorithm",
    "start": "1415790",
    "end": "1423080"
  },
  {
    "text": "from before in this new layout. But we have to be a little\nbit more clever in how we're",
    "start": "1423080",
    "end": "1429590"
  },
  {
    "text": "putting together the elements. Before we were able\nto just subtract each-- subtract or multiply\nthe quadwords with each other,",
    "start": "1429590",
    "end": "1438000"
  },
  {
    "text": "because those would just\ncorrespond to for example, subtracting the\ncoordinates of two points.",
    "start": "1438000",
    "end": "1445540"
  },
  {
    "text": "Now this time we have to do some\nadditional computation in order to put all the pieces together.",
    "start": "1445540",
    "end": "1451630"
  },
  {
    "text": "The trick behind this structure\nof arrays implementation which I'll just gloss\nover is, if we're",
    "start": "1451630",
    "end": "1459929"
  },
  {
    "text": "storing state for\neight objects then we're going to need-- eight\nobjects hold the-- hold 24.",
    "start": "1459930",
    "end": "1470310"
  },
  {
    "text": "Rather for each object we need\nthe position and the velocity. And for each of those\nwe have x, y and z.",
    "start": "1470310",
    "end": "1475860"
  },
  {
    "text": "So that means to store\nstate for each object, for eight objects we need\n8 times 6 is 48 words.",
    "start": "1475860",
    "end": "1483570"
  },
  {
    "text": "And so we can put\nthose in 12 quadwords if we pack them right. And when we do SIMD\noperations on these quadwords",
    "start": "1483570",
    "end": "1491540"
  },
  {
    "text": "that we pull out, we can\nget four pair interactions. So suppose this is a\nquadword and it's contained--",
    "start": "1491540",
    "end": "1498290"
  },
  {
    "text": "and it contains\ndata corresponding to elements a, b, c and d. And over here we have a quadword\ncontaining data corresponding",
    "start": "1498290",
    "end": "1505140"
  },
  {
    "text": "to elements one,\ntwo, three, and four. With some SIMD\noperations we can kind of",
    "start": "1505140",
    "end": "1510990"
  },
  {
    "text": "figure out the\npairwise interaction between objects a and\none, between b and two, c and three and d and four.",
    "start": "1510990",
    "end": "1519210"
  },
  {
    "text": "But of course we have to be\nable to find the interactions between any pair.",
    "start": "1519210",
    "end": "1524400"
  },
  {
    "text": "It's not just these\npairs that lineup. So what we have to do is rotate\nthe quadword over by one word",
    "start": "1524400",
    "end": "1531050"
  },
  {
    "text": "and then do the\nsame thing again. We do that four times in all\nand then we add up the results.",
    "start": "1531050",
    "end": "1537109"
  },
  {
    "text": "So as you can see\nthis implementation is a little bit more\ninvolved and less--",
    "start": "1537109",
    "end": "1542400"
  },
  {
    "text": "it maps to the original\nimplementation less directly. ",
    "start": "1542400",
    "end": "1548490"
  },
  {
    "text": "On the other hand, it does give\nus a really dramatic speedup. Because we're using more\nof the vector words.",
    "start": "1548490",
    "end": "1558370"
  },
  {
    "text": "Notice that in the\nfirst packing we had. We had x, y and z and then\nthe fourth blank was unused.",
    "start": "1558370",
    "end": "1564529"
  },
  {
    "text": "Anyway, this time the structure\nof a race implementation is actually 7 1/2 times faster\nthan the array of structures",
    "start": "1564530",
    "end": "1573210"
  },
  {
    "text": "implementation. So choosing this\ndata layout correctly can actually be one of the\nreally big determinants",
    "start": "1573210",
    "end": "1580740"
  },
  {
    "text": "of how your program performs. AUDIENCE: The scalar version\nwas like what 480, something like that?",
    "start": "1580740",
    "end": "1585786"
  },
  {
    "text": "Or is it not comparable? PROFESSOR: I let's see,\nDavid, do you remember?",
    "start": "1585786",
    "end": "1592681"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: OK so-- AUDIENCE: [INAUDIBLE].",
    "start": "1592681",
    "end": "1598794"
  },
  {
    "text": "AUDIENCE: No that\nwas just on the PPU. AUDIENCE: [INAUDIBLE] ",
    "start": "1598794",
    "end": "1608137"
  },
  {
    "text": "[INTERPOSING VOICES] ",
    "start": "1608137",
    "end": "1614210"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: OK, so\nsomething like 400 for the double buffered one\nand 300 for array of structs.",
    "start": "1614210",
    "end": "1623680"
  },
  {
    "text": " OK one other thing\nto worry about",
    "start": "1623680",
    "end": "1629170"
  },
  {
    "text": "is when you're dealing\nwith these-- when you're dealing with these\nSIMD instructions,",
    "start": "1629170",
    "end": "1634210"
  },
  {
    "text": "you want to make sure that all\nyour data are aligned correctly in memory. And like I said before,\nwhen you're pulling things",
    "start": "1634210",
    "end": "1640490"
  },
  {
    "text": "in from memory you\nwant to make sure that whatever you're\npulling in is going to be aligned on a quadword boundary.",
    "start": "1640490",
    "end": "1647270"
  },
  {
    "text": "And you can use the\nalign compiler directive to tell the compiler,\nI want this piece of data aligned at\na particular place.",
    "start": "1647270",
    "end": "1654350"
  },
  {
    "text": "And if you do that on all\nyour arrays for example, and make sure that your\narray-- the array elements",
    "start": "1654350",
    "end": "1660169"
  },
  {
    "text": "are going to fit\nneatly into quadwords then you should be OK.",
    "start": "1660170",
    "end": "1666330"
  },
  {
    "text": "Again like I said\nbefore, you also want to transfer only\nmultiples of 16-bytes",
    "start": "1666330",
    "end": "1671550"
  },
  {
    "text": "on the load and store.",
    "start": "1671550",
    "end": "1677370"
  },
  {
    "text": "And so when you're doing\nprocessing it may help, it may help you if you actually\npad the end of your-- pad",
    "start": "1677370",
    "end": "1683760"
  },
  {
    "text": "the end of your array's\nso that they fill out a multiple of 16-bytes. Because it's easier to just do\nthat processing with the SIMD",
    "start": "1683760",
    "end": "1690460"
  },
  {
    "text": "instruction rather\nthan just have one or two elements hanging off\nand have to worry about those.",
    "start": "1690460",
    "end": "1698192"
  },
  {
    "text": "AUDIENCE: Question. PROFESSOR: Yep. AUDIENCE: Is it a good idea to\npass parameters 2.2 [INAUDIBLE]",
    "start": "1698192",
    "end": "1706590"
  },
  {
    "text": "I mean, which one is preferred? [INAUDIBLE] AUDIENCE: So you\nshould [INAUDIBLE]",
    "start": "1706590",
    "end": "1718446"
  },
  {
    "text": "for figuring out\nwhether something can scale easily or not. So you might make [INAUDIBLE].",
    "start": "1718446",
    "end": "1725362"
  },
  {
    "text": "So in cases where you\ncan avoid using pointers, you should do that. ",
    "start": "1725362",
    "end": "1732772"
  },
  {
    "text": "PROFESSOR: OK. [SIDE CONVERSATION] ",
    "start": "1732772",
    "end": "1807380"
  },
  {
    "text": "PROFESSOR: So one last\nthing that I should mention. I haven't really let on,\nbut compilers can actually",
    "start": "1807380",
    "end": "1816470"
  },
  {
    "text": "generate some of these SIMD\ninstructions by themselves. If you declare your types to\nbe vector and then use just",
    "start": "1816470",
    "end": "1822039"
  },
  {
    "text": "regular operations\napparently GCC and XLC yes, will substitute the\ncorrect intrinsics for you.",
    "start": "1822040",
    "end": "1829539"
  },
  {
    "text": "Of course that doesn't get\nyou all the operations which are available with\nintrinsics, but anyway",
    "start": "1829539",
    "end": "1836840"
  },
  {
    "text": "automatically\nsimbianizing your code is something that's\nreally worth looking into.",
    "start": "1836840",
    "end": "1842870"
  },
  {
    "text": "As we saw it can give you a\ngreat performance improvement. And the thing is that\ncompilers are still not",
    "start": "1842870",
    "end": "1849010"
  },
  {
    "text": "very good at automatically\ndoing this transformation. So unlike instruction scheduling\nwhere if your passing 05",
    "start": "1849010",
    "end": "1855412"
  },
  {
    "text": "your compiler will do a much\nbetter job than you would have time to do. This is something that\nyou should probably",
    "start": "1855412",
    "end": "1861140"
  },
  {
    "text": "reserve some time for. That's all. If you have any questions\nyou can stick around and I'll try and help you.",
    "start": "1861140",
    "end": "1867850"
  },
  {
    "start": "1867850",
    "end": "1868579"
  }
]