[
  {
    "start": "0",
    "end": "430000"
  },
  {
    "start": "0",
    "end": "190618"
  },
  {
    "text": "PROFESSOR: I'm sorry. I have to give this to you. Basically OK, except you\ndidn't understand",
    "start": "190618",
    "end": "195777"
  },
  {
    "text": "it the first time.  OK. Good morning. Happy spring.",
    "start": "195777",
    "end": "201965"
  },
  {
    "text": "Happy April. We're running a little late. I'll try to finish chapter\nnine today and start on",
    "start": "201965",
    "end": "209849"
  },
  {
    "text": "chapter ten. Ashish may have chapter\nten here later. If not, it'll be on the web.",
    "start": "209850",
    "end": "217920"
  },
  {
    "text": "So we've been talking about\nconvolutional codes. Specifically rate 1/n\nconvolutional codes.",
    "start": "217920",
    "end": "224710"
  },
  {
    "text": "One input n outputs. As you may imagine, there\nare also rate k/n",
    "start": "224710",
    "end": "230110"
  },
  {
    "text": "convolutional codes. Generalization to k\ninputs n outputs.",
    "start": "230110",
    "end": "235250"
  },
  {
    "text": "These have not been so much used\nin practice, because in",
    "start": "235250",
    "end": "240870"
  },
  {
    "text": "general, we're using these\nbinary codes in the power limited regime, and\nwe want low rates.",
    "start": "240870",
    "end": "246630"
  },
  {
    "text": "So 1/n is a good rate. 1/2, 1/3, 1/4, or down to 1/6\nare common kinds of rates.",
    "start": "246630",
    "end": "254750"
  },
  {
    "text": "So I haven't bothered to develop\nthe more elaborate theory for rate k/n codes. The rate 1/n codes,\njust to review.",
    "start": "254750",
    "end": "264670"
  },
  {
    "text": "The code is simply defined as\nthe set of all possible output sequences of a convolutional\nencoder, whose N impulse",
    "start": "264670",
    "end": "274050"
  },
  {
    "text": "responses are written as an\nn-tuple g of d as the inputs",
    "start": "274050",
    "end": "279580"
  },
  {
    "text": "range over all Laurent sequences, bi-infinite sequences.",
    "start": "279580",
    "end": "285680"
  },
  {
    "text": "And what we showed last time\nis that without loss of generality or optimality, we\ncould always take this g of d",
    "start": "285680",
    "end": "295620"
  },
  {
    "text": "to be of a particular\ncanonical form. Namely, the g of d could be\ntaken to be a set of n",
    "start": "295620",
    "end": "302300"
  },
  {
    "text": "polynomials, g_j of d, that\nwere relatively prime.",
    "start": "302300",
    "end": "308900"
  },
  {
    "text": "And for any code, you can find\nsuch a canonical encoder by its unique [UNINTELLIGIBLE] two\nunits, and specifies the",
    "start": "308900",
    "end": "318990"
  },
  {
    "text": "code, clearly, by this. So that's a nice canonical\nencoder to take.",
    "start": "318990",
    "end": "327230"
  },
  {
    "text": "It furthermore has the property\nthat there's an obvious realization of\nthis encoder in the [UNINTELLIGIBLE] register form\nwith nu memory units.",
    "start": "327230",
    "end": "335810"
  },
  {
    "text": "And therefore 2 to\nthe nu states. And we will prove in chapter ten\nthat this is the minimal",
    "start": "335810",
    "end": "343560"
  },
  {
    "text": "possible encoder\nfor this code. In other words, there are lots\nof different encoders that generate this code, but you\ncan't possibly encode it with",
    "start": "343560",
    "end": "351340"
  },
  {
    "text": "fewer than the state space of\ndimension less than nu.",
    "start": "351340",
    "end": "358422"
  },
  {
    "text": "That's the way it's going\nto sound in chapter ten. So we haven't quite got there\nyet, but it's a minimal",
    "start": "358422",
    "end": "363980"
  },
  {
    "text": "encoder, therefore,\nin that sense. All right. Today we're going to go now and\nexploit the finite state",
    "start": "363980",
    "end": "373560"
  },
  {
    "text": "structure of this code, to get\na very efficient maximum",
    "start": "373560",
    "end": "384100"
  },
  {
    "text": "likelihood sequence decoding\nalgorithm called the Viterbi algorithm, which I'm sure\nyou've all heard of.",
    "start": "384100",
    "end": "390470"
  },
  {
    "text": "It's become very famous, not\nonly in this field, but really in any place where you're trying\nto observe a finite",
    "start": "390470",
    "end": "398470"
  },
  {
    "text": "state machine in memory-less\nnoise. A finite state hidden markov\nmodel, if you like.",
    "start": "398470",
    "end": "405210"
  },
  {
    "text": "And so now it's used, for\ninstance, in the detection of genomes, where the exons end and\nthe introns start and so",
    "start": "405210",
    "end": "413030"
  },
  {
    "text": "forth, and the garbage is. And people use it who have no\nidea that it was originally a",
    "start": "413030",
    "end": "419970"
  },
  {
    "text": "digital communications\nalgorithm. But it's a very obvious\nalgorithm. It's come up in many different\nforms, and Viterbi, in a way,",
    "start": "419970",
    "end": "427850"
  },
  {
    "text": "was just lucky to get\nhis name on it. Because it would come up very\neasily as soon as you pose the",
    "start": "427850",
    "end": "435830"
  },
  {
    "text": "problem correctly. Let's start out with terminated",
    "start": "435830",
    "end": "441315"
  },
  {
    "text": "convolutional codes. ",
    "start": "441315",
    "end": "447919"
  },
  {
    "text": "Which I forget whether I started\non this last time. I think I may have.",
    "start": "447920",
    "end": "454460"
  },
  {
    "text": "But we'll start from\nscratch again. When I say terminated, I mean\nthat we're going to take only",
    "start": "454460",
    "end": "463129"
  },
  {
    "text": "a subset of the code words\nthat start at a certain time -- say, time 0 --",
    "start": "463130",
    "end": "469350"
  },
  {
    "text": "continue for some finite\ntime, and then end. And in this set up, with this\ncanonical encoder, it's",
    "start": "469350",
    "end": "476830"
  },
  {
    "text": "polynomial, the easy way to\nspecify that is to let u of d",
    "start": "476830",
    "end": "485639"
  },
  {
    "start": "480000",
    "end": "610000"
  },
  {
    "text": "be a finite sequence that\nstarts at time 0. That's called a polynomial.",
    "start": "485640",
    "end": "493570"
  },
  {
    "text": "and let's restrict\nits degree -- degree u of d less than k.",
    "start": "493570",
    "end": "503680"
  },
  {
    "text": "In other words, it looks like u0\nplus u1 d plus so forth up",
    "start": "503680",
    "end": "509150"
  },
  {
    "text": "to uk minus 1 d. Therefore I've chosen k, so I\nreally have k information bits",
    "start": "509150",
    "end": "518150"
  },
  {
    "text": "or input bits.  All right?",
    "start": "518150",
    "end": "524210"
  },
  {
    "text": " So I specify u0 through\nuk minus 1.",
    "start": "524210",
    "end": "529730"
  },
  {
    "text": "I use that as the input\nin my encoder. What is then my code,\nmy truncated code,",
    "start": "529730",
    "end": "536220"
  },
  {
    "text": "let's call it ck -- that's not a very good notation,\nbut we'll use it",
    "start": "536220",
    "end": "543650"
  },
  {
    "text": "just for now -- will be the set of all u of d,\ng of d such that u of d is",
    "start": "543650",
    "end": "555230"
  },
  {
    "text": "polynomial and the degree of\nu of d is less than k.",
    "start": "555230",
    "end": "563310"
  },
  {
    "text": " OK. So we ask what that code\nis going to be.",
    "start": "563310",
    "end": "570110"
  },
  {
    "text": "And let's take some\nsimple examples.",
    "start": "570110",
    "end": "575990"
  },
  {
    "text": "Turns out when we terminate\ncodes, we always choose polynomial encoders, so the code\nwill naturally collapse",
    "start": "575990",
    "end": "584750"
  },
  {
    "text": "back to the 0 state. How long? Nu time units after the\ninput stops coming in.",
    "start": "584750",
    "end": "595279"
  },
  {
    "text": "The outputs will be all 0 at\nthat point and forevermore. The shift register will clear\nitself out nu time units",
    "start": "595280",
    "end": "602870"
  },
  {
    "text": "later, and then they'll\nbe all 0.",
    "start": "602870",
    "end": "608390"
  },
  {
    "text": "So the code really starts\nat time 0 and ends at time k plus nu.",
    "start": "608390",
    "end": "615750"
  },
  {
    "start": "610000",
    "end": "645000"
  },
  {
    "text": "So we aren't going to worry, in\nthis case, whether the code is non-catastrophic or not.",
    "start": "615750",
    "end": "622029"
  },
  {
    "text": "Here one of the principal\nproperties that we had was this property guaranteed\nnon-catastrophic.",
    "start": "622030",
    "end": "630120"
  },
  {
    "text": " And in fact, is necessary\nfor non-catastrophicity.",
    "start": "630120",
    "end": "639270"
  },
  {
    "text": "So we spent a lot of time\ntalking about why that would be a bad thing, to\nbe catastrophic.",
    "start": "639270",
    "end": "645339"
  },
  {
    "start": "645000",
    "end": "690000"
  },
  {
    "text": "OK. But let's take a catastrophic\nrate 1/1 encoder, which simply",
    "start": "645340",
    "end": "654980"
  },
  {
    "text": "we have g of d equals\n1 plus d. You remember this encoder\nas nu equals 1.",
    "start": "654980",
    "end": "662529"
  },
  {
    "text": "The input looks like this. uk, uk minus 1.",
    "start": "662530",
    "end": "668209"
  },
  {
    "text": "And we simply add these, yk. So we get y of d equals\n1 plus d u of d.",
    "start": "668210",
    "end": "679680"
  },
  {
    "text": " OK. Now, if the input to this is a\nfinite sequence, a polynomial,",
    "start": "679680",
    "end": "693720"
  },
  {
    "start": "690000",
    "end": "850000"
  },
  {
    "text": "let's see what this code\ncan possibly be. What the code's going\nto look like.",
    "start": "693720",
    "end": "699720"
  },
  {
    "text": "The code's going to start\nin state 0, at time 0. So here's the time.",
    "start": "699720",
    "end": "707420"
  },
  {
    "text": "At the first time, we can either\nget a 0 in our a 1 in, and accordingly, it will\ngo to state 0 or 1.",
    "start": "707420",
    "end": "713865"
  },
  {
    "text": " At the second time, we can go\nto state 0 with another 0 or",
    "start": "713865",
    "end": "722300"
  },
  {
    "text": "just state 1 with a 1. If we get a 1 in and we're in\nstate 1, then the output is",
    "start": "722300",
    "end": "728910"
  },
  {
    "text": "going to be 0, and we'll\nstay in state 1. If we get a 0 in, the output\nwill be a 1, and we'll go back",
    "start": "728910",
    "end": "736140"
  },
  {
    "text": "to state 0. So this is what a\ntypical trellis section looks like here.",
    "start": "736140",
    "end": "741209"
  },
  {
    "text": "We have all possible\ntransitions between the two states. And so now it goes on for\na while like this.",
    "start": "741210",
    "end": "749380"
  },
  {
    "text": "Time invariantly. There are 1, dot dot dot, and\nthen finally, at some time --",
    "start": "749380",
    "end": "760640"
  },
  {
    "text": "say this is time k, or maybe\nit's time k minus 1 --",
    "start": "760640",
    "end": "767050"
  },
  {
    "text": "time index is a little fuzzy\nhere -- we don't put any more 1s in.",
    "start": "767050",
    "end": "775730"
  },
  {
    "text": "We only put 0s on from\nthat time forward. So we could have one more\ntransition back to state 0,",
    "start": "775730",
    "end": "781930"
  },
  {
    "text": "and then after that it just\nstays in state 0 forevermore. And this isn't very\ninteresting.",
    "start": "781930",
    "end": "789029"
  },
  {
    "text": "It was in time 0 all the\ntime before here. It was in state 0 all the time\nbefore there and put out 0s.",
    "start": "789030",
    "end": "795570"
  },
  {
    "text": "It was in state 0 all the time\nafter here and put out 0s. And this is clearly not\nconveying any information.",
    "start": "795570",
    "end": "803779"
  },
  {
    "text": "Not an interesting\npart of the code. So we're going to consider the\ncode just to be defined over these k plus 1 units of time.",
    "start": "803780",
    "end": "816140"
  },
  {
    "text": "And so y of d we're going\nto consider to be a",
    "start": "816140",
    "end": "822690"
  },
  {
    "text": "polynomial of degree k. ",
    "start": "822690",
    "end": "831840"
  },
  {
    "text": "Now we're going to assume\nthat they're k bits in. Then we're going to wait one\nmore time to let the shift",
    "start": "831840",
    "end": "837800"
  },
  {
    "text": "register clear out,\nwhich is nu. And at that time, we're going\nto take whatever y is, and",
    "start": "837800",
    "end": "846095"
  },
  {
    "text": "then we're going to\nterminate it. So if we consider this now, we\nhave a block code whose length",
    "start": "846095",
    "end": "857220"
  },
  {
    "start": "850000",
    "end": "930000"
  },
  {
    "text": "is the number of non-zero\ncoefficients of y of d.",
    "start": "857220",
    "end": "862800"
  },
  {
    "text": "So we have n equals k plus\n1, we have k by design",
    "start": "862800",
    "end": "868450"
  },
  {
    "text": "information bits, and\nwhat's the minimum",
    "start": "868450",
    "end": "874480"
  },
  {
    "text": "non-zero weight of this? It's linear. What's its minimum\nnon-zero weight, or its minimum distance?",
    "start": "874480",
    "end": "879915"
  },
  {
    "text": " AUDIENCE: [INAUDIBLE] PROFESSOR: 1. Show me a code word\nof weight 1.",
    "start": "879915",
    "end": "887300"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "887300",
    "end": "894425"
  },
  {
    "text": "PROFESSOR: I claim the minimum\nnon-zero weight is 2 by typical argument.",
    "start": "894425",
    "end": "900580"
  },
  {
    "text": "I have the all 0 sequence. If I ever leave the all 0\nsequence, I accumulate 1 unit",
    "start": "900580",
    "end": "906139"
  },
  {
    "text": "of Hamming weight. And I need to ultimately come\nback to the all 0 sequence, because I've made everything\nfinite here.",
    "start": "906140",
    "end": "913370"
  },
  {
    "text": "So in this case, I can make\nthe argument that I always have to come back to\nthe all 0 sequence. Whenever I merge back into\nthe all 0 sequence, I'll",
    "start": "913370",
    "end": "921140"
  },
  {
    "text": "accumulate another\nunit of weight. So this is a code with\nminimum distance 2.",
    "start": "921140",
    "end": "929910"
  },
  {
    "text": "Minimum non-zero weight 2. And in fact, it's just the\nsingle parity-check code of",
    "start": "929910",
    "end": "937620"
  },
  {
    "start": "930000",
    "end": "970000"
  },
  {
    "text": "length n equals k plus 1. ",
    "start": "937620",
    "end": "946060"
  },
  {
    "text": "OK? And if you ask yourself,\ncan you generate any --",
    "start": "946060",
    "end": "952769"
  },
  {
    "text": "this is supposedly the\neven weight code. It contains all even weight\nk plus 1-tuples.",
    "start": "952770",
    "end": "960730"
  },
  {
    "text": "And I think you can convince\nyourself that you can generate any of these k plus 1 even\nweight k-tuples.",
    "start": "960730",
    "end": "971050"
  },
  {
    "start": "970000",
    "end": "1060000"
  },
  {
    "text": "In fact, the generator\nmatrix for this code. Look. Here's a set of generators. 1 1 is in the code.",
    "start": "971050",
    "end": "977120"
  },
  {
    "text": "0 1 1 is in the code. 0 0 1 1 in the code. So here's a set of generators.",
    "start": "977120",
    "end": "984480"
  },
  {
    "text": "0 1 1. Generator matrix for the\ncode looks like this.",
    "start": "984480",
    "end": "989785"
  },
  {
    "text": " We just go like that. And with these k generators,\nyou can generate any even",
    "start": "989785",
    "end": "997870"
  },
  {
    "text": "weight code word. So we get a kind of\nconvolutional form to the",
    "start": "997870",
    "end": "1005150"
  },
  {
    "text": "generator matrix. A sliding parity-check form\nto the generator matrix.",
    "start": "1005150",
    "end": "1010920"
  },
  {
    "text": "OK. So I assert that this is the\nsingle parity-check code. So here's a trellis",
    "start": "1010920",
    "end": "1016629"
  },
  {
    "text": "representation for a block code. Yeah? AUDIENCE: [INAUDIBLE] ",
    "start": "1016630",
    "end": "1027990"
  },
  {
    "text": "PROFESSOR: I'm sure I've got the\ntime indices screwed up. But I put in k bits.",
    "start": "1027990",
    "end": "1035390"
  },
  {
    "text": "I wait 1 more unit of time -- nu equals 1 -- for this to clear out. So I get out k plus 1 bits.",
    "start": "1035390",
    "end": "1042559"
  },
  {
    "text": "Think of it in terms\nof this here. I put in k, the last input you\nthink of as necessarily being",
    "start": "1042560",
    "end": "1049390"
  },
  {
    "text": "0, and I take the outputs\nhere for k plus 1 times. ",
    "start": "1049390",
    "end": "1057920"
  },
  {
    "text": "OK. So first of all, a couple\npoints here. AUDIENCE: In general, the length\nwill be k plus nu?",
    "start": "1057920",
    "end": "1064195"
  },
  {
    "start": "1060000",
    "end": "1130000"
  },
  {
    "text": "PROFESSOR: In general, length\nwill be k plus nu. So let's write that down. ",
    "start": "1064195",
    "end": "1072620"
  },
  {
    "text": "So in general, by terminating\na rate 1/n --",
    "start": "1072620",
    "end": "1089010"
  },
  {
    "text": "nu is called the constraint\nlength -- constraint length nu, or 2\nto the nu state code --",
    "start": "1089010",
    "end": "1098380"
  },
  {
    "text": "convolutional code after k\ninputs, we get a binary linear",
    "start": "1098380",
    "end": "1112160"
  },
  {
    "text": "block code whose parameters\nare -- we have k information bits.",
    "start": "1112160",
    "end": "1120010"
  },
  {
    "text": "We have k plus nu non-trivial\noutput times.",
    "start": "1120010",
    "end": "1127150"
  },
  {
    "text": "At each output time, I\nget n output bits. So it's n times k plus nu\nis the total effective",
    "start": "1127150",
    "end": "1137070"
  },
  {
    "text": "length of the code. And the distance, we would have\nto say, is greater than",
    "start": "1137070",
    "end": "1146140"
  },
  {
    "text": "or equal to the distance of the\nblock code is greater than or equal to the distance of\nthe convolutional code.",
    "start": "1146140",
    "end": "1153260"
  },
  {
    "text": "Why? Because all of the words in this\nblock code are actually",
    "start": "1153260",
    "end": "1162490"
  },
  {
    "text": "sequences in the convolutional\ncode. I'm assuming here that the code\nis not catastrophic, so",
    "start": "1162490",
    "end": "1170960"
  },
  {
    "text": "it's sufficient to look at all\nthe finite sequences in the convolutional code.",
    "start": "1170960",
    "end": "1176300"
  },
  {
    "text": "All right. And in general, the block code\ndistance is almost always going to be equal to the\nconvolutional code distance.",
    "start": "1176300",
    "end": "1182540"
  },
  {
    "text": " And this is just for\nfinite code words.",
    "start": "1182540",
    "end": "1188442"
  },
  {
    "start": "1188442",
    "end": "1194710"
  },
  {
    "text": "So as another example, suppose\nwe take our standard rate 1/2,",
    "start": "1194710",
    "end": "1211820"
  },
  {
    "text": "nu equals 2, distance equals\n5, convolutional code.",
    "start": "1211820",
    "end": "1218549"
  },
  {
    "text": "Our example 1 that we've\nbeen using all along. Suppose I terminate with\nk equals 4, then I'm",
    "start": "1218550",
    "end": "1233620"
  },
  {
    "text": "going to get what? I'm going to get a 2 times 6,\nI'm going to get a 12, 4, 5",
    "start": "1233620",
    "end": "1244760"
  },
  {
    "text": "binary linear block code. ",
    "start": "1244760",
    "end": "1251170"
  },
  {
    "text": "That is not so bad, actually. There's a point that I'm\nnot going to make",
    "start": "1251170",
    "end": "1257870"
  },
  {
    "text": "very strongly here. But terminated convolutional\ncodes can be good block codes.",
    "start": "1257870",
    "end": "1268716"
  },
  {
    "start": "1260000",
    "end": "1620000"
  },
  {
    "start": "1268717",
    "end": "1274660"
  },
  {
    "text": "And in fact, asymptotically,\nby choosing the parameters correctly, you can show that you\ncan get a random ensemble",
    "start": "1274660",
    "end": "1284960"
  },
  {
    "text": "of terminated convolutional\ncodes that is as good as the best possible random ensemble\nof block codes.",
    "start": "1284960",
    "end": "1293149"
  },
  {
    "text": "So terminated convolutional\ncodes is one way of constructing optimal block codes\nin the asymptotic limit.",
    "start": "1293150",
    "end": "1301860"
  },
  {
    "text": "These parameters aren't bad. Here's a rate 1/3 code\nwith distance 5.",
    "start": "1301860",
    "end": "1307670"
  },
  {
    "text": "Not too long. You know, you might compare\nit to what?",
    "start": "1307670",
    "end": "1313110"
  },
  {
    "text": "The BCH code? There's a 15 7 5 BCH code,\nwhich is clearly better,",
    "start": "1313110",
    "end": "1323650"
  },
  {
    "text": "because it's higher rate. But if you shorten this code,\nyou have to shorten this by 3,",
    "start": "1323650",
    "end": "1328690"
  },
  {
    "text": "this by 3 to keep\nthe distance. You would get the same code. So it's not optimum, but\nit's not too bad.",
    "start": "1328690",
    "end": "1338690"
  },
  {
    "text": "And furthermore, from this\nconstruction, you get a trellis representation,\nwhich in this case",
    "start": "1338690",
    "end": "1350030"
  },
  {
    "text": "would look like this. It looks like the trellis that\nwe started to draw last time.",
    "start": "1350030",
    "end": "1356139"
  },
  {
    "text": " Sorry. Doesn't look like that.",
    "start": "1356140",
    "end": "1364710"
  },
  {
    "text": "This guy goes down here,\nthis guy comes here, this guy goes here.",
    "start": "1364710",
    "end": "1370860"
  },
  {
    "text": "This continues for a while. ",
    "start": "1370860",
    "end": "1383410"
  },
  {
    "text": "And then finally, when we start\nto enforce all zeros, we only have one possible output\nfrom each of these.",
    "start": "1383410",
    "end": "1390250"
  },
  {
    "text": " And we get a trellis that\nlooks like that.",
    "start": "1390250",
    "end": "1397024"
  },
  {
    "text": "All right? Which is 1, 2, 3 -- I did it correctly for\nthis code, actually.",
    "start": "1397025",
    "end": "1402430"
  },
  {
    "text": "Because each of these\nis going to have a 2-tuple output on it. And that looked like 0,0\n0,0 0,0 0,0 0,0.",
    "start": "1402430",
    "end": "1413000"
  },
  {
    "text": "Each of the information bits\ncauses a two-way branch, no matter where you are\nin the trellis. So here's 1, here's 2,\nhere's 3, here's 4.",
    "start": "1413000",
    "end": "1421070"
  },
  {
    "text": "That's the end of them. We wait for nu equal 2 to let\nthe states converge back to 0.",
    "start": "1421070",
    "end": "1427480"
  },
  {
    "text": "So that's a trellis\nrepresentation of this 12 4 5",
    "start": "1427480",
    "end": "1433160"
  },
  {
    "text": "block code.  OK.",
    "start": "1433160",
    "end": "1439270"
  },
  {
    "text": "I want to talk about terminated\nblock codes, terminated trellis codes,\nconvolutional codes as block",
    "start": "1439270",
    "end": "1446929"
  },
  {
    "text": "codes, for two reasons. One is to say we can get\nblock codes that way.",
    "start": "1446930",
    "end": "1453960"
  },
  {
    "text": "But the other is to introduce\nthe Viterbi algorithm for",
    "start": "1453960",
    "end": "1460130"
  },
  {
    "text": "terminated convolutional\ncodes. ",
    "start": "1460130",
    "end": "1465730"
  },
  {
    "text": "I think it's easier first to\nlook at how the algorithm works when you have a finite\ntrellis like this, and then",
    "start": "1465730",
    "end": "1472390"
  },
  {
    "text": "we'll go on and say, well, how\nwould this work if we let the trellis become very long, or\nin principle, infinite?",
    "start": "1472390",
    "end": "1480700"
  },
  {
    "text": "Would the Viterbi algorithm\nstill work? And it becomes obvious\nthat it does.",
    "start": "1480700",
    "end": "1486130"
  },
  {
    "text": "So this is going to be a maximum\nlikelihood sequence detection or decoding\nalgorithm.",
    "start": "1486130",
    "end": "1491419"
  },
  {
    "start": "1491420",
    "end": "1500020"
  },
  {
    "text": "We're going to assume that each\ntime here, we get to see two things. Corresponding to the two\nbits we transmit.",
    "start": "1500020",
    "end": "1507100"
  },
  {
    "text": "So we transmit yk according\nto which trellis",
    "start": "1507100",
    "end": "1512940"
  },
  {
    "text": "branch we're on -- y0 at this point -- and we\nreceive a 2-tuple r0.",
    "start": "1512940",
    "end": "1519330"
  },
  {
    "text": "If we were on a binary input\nadditive white Gaussian channel, this would go into,\nactually, the 2-PAM map, two",
    "start": "1519330",
    "end": "1530400"
  },
  {
    "text": "plus or minus alphas, and be\nreceived as two real numbers.",
    "start": "1530400",
    "end": "1536470"
  },
  {
    "text": "And we do the same thing here. y1, we receive r1, and so forth,\nup to yk plus nu, or k",
    "start": "1536470",
    "end": "1546670"
  },
  {
    "text": "plus nu minus 1, I think it\nis, rk plus nu minus 1.",
    "start": "1546670",
    "end": "1553645"
  },
  {
    "text": "OK. So we have a transmit 2-tuple\nand a received 2-tuple every time.",
    "start": "1553645",
    "end": "1558670"
  },
  {
    "text": "And we're going to assume that\nthe channel is memoryless so that the probabilities of\nreceiving the various possible",
    "start": "1558670",
    "end": "1567130"
  },
  {
    "text": "received values, the\nlikelihoods, are independent from time unit to time unit.",
    "start": "1567130",
    "end": "1573230"
  },
  {
    "text": "That's the only way\nthis works. Then if I want to get the total\nprobability of r given",
    "start": "1573230",
    "end": "1586330"
  },
  {
    "text": "y, where now I'm talking about\nover the whole block, this factors into the probabilities\nof rk given yk, yes?",
    "start": "1586330",
    "end": "1600289"
  },
  {
    "text": "That's what I'm going\nto depend on. This is what's called the\nmemoryless condition,",
    "start": "1600290",
    "end": "1606710"
  },
  {
    "text": "memoryless channel. The transition probabilities do\nnot depend on what's been",
    "start": "1606710",
    "end": "1614200"
  },
  {
    "text": "sent or received in\nprevious blocks. Or it's more convenient to use\nthe minus log likelihood",
    "start": "1614200",
    "end": "1623970"
  },
  {
    "start": "1620000",
    "end": "1690000"
  },
  {
    "text": "equals now the sum of the minus\nlog p of rk given yk.",
    "start": "1623970",
    "end": "1631380"
  },
  {
    "text": " So maximum likelihood is\nequivalent to minimize the",
    "start": "1631380",
    "end": "1644350"
  },
  {
    "text": "neg-log likelihood. ",
    "start": "1644350",
    "end": "1653280"
  },
  {
    "text": "OK. I receive only one thing\nin each time unit.",
    "start": "1653280",
    "end": "1659040"
  },
  {
    "text": "And each trellis branch\ncorresponds to transmitting a specific thing.",
    "start": "1659040",
    "end": "1664860"
  },
  {
    "text": "So I can label each trellis\nbranch with the appropriate",
    "start": "1664860",
    "end": "1680650"
  },
  {
    "text": "minus log p of rk given yk.",
    "start": "1680650",
    "end": "1686970"
  },
  {
    "text": "Do you see that? In other words, for this trellis\nbranch down here,",
    "start": "1686970",
    "end": "1693789"
  },
  {
    "start": "1690000",
    "end": "1725000"
  },
  {
    "text": "which is associated with y2\nequals 0 1, or s of y2 equals",
    "start": "1693790",
    "end": "1701520"
  },
  {
    "text": "alpha minus alpha, suppose I\nreceive r2 equals r1, r2, I",
    "start": "1701520",
    "end": "1712040"
  },
  {
    "text": "would label this by, say, the\nEuclidean distance between what I transmitted for that\nbranch and what I received.",
    "start": "1712040",
    "end": "1720580"
  },
  {
    "text": "For instance, on the additive\nwhite Gaussian channel, this would simply be rk\nminus s of yk.",
    "start": "1720580",
    "end": "1731940"
  },
  {
    "text": "The Euclidean distance\nsquared.  Or equivalently, minus the inner\nproduct, the correlation",
    "start": "1731940",
    "end": "1741020"
  },
  {
    "text": "between rk and s of yk. You know, these are equivalent\nmetrics.",
    "start": "1741020",
    "end": "1748809"
  },
  {
    "text": "Or on a binary symmetric\nchannel, might be the Hamming distance between what I\nreceived and what I",
    "start": "1748810",
    "end": "1757600"
  },
  {
    "text": "transmitted, both of which\nwould be binary 2-tuples, in this case. ",
    "start": "1757600",
    "end": "1763799"
  },
  {
    "text": "It's just some measure\nof distance -- Log likelihood distance,\nEuclidean distance, Hamming distance --",
    "start": "1763800",
    "end": "1769900"
  },
  {
    "start": "1765000",
    "end": "1975000"
  },
  {
    "text": "between the particular thing I\nwould have transmitted if I'd been on this branch and the\nparticular thing that I",
    "start": "1769900",
    "end": "1777700"
  },
  {
    "text": "actually did receive. So having received a whole block\nof data, I can now put a",
    "start": "1777700",
    "end": "1784230"
  },
  {
    "text": "cost on each of these\nbranches. What's the minus log likelihood\ncost if I say that",
    "start": "1784230",
    "end": "1791695"
  },
  {
    "text": "the code word goes through\nthat branch? What does it cost me? ",
    "start": "1791695",
    "end": "1798077"
  },
  {
    "text": "All right.  Now what I'm basically depending\non is note, there's",
    "start": "1798077",
    "end": "1806790"
  },
  {
    "text": "a one-to-one map between\ncode words y and",
    "start": "1806790",
    "end": "1816850"
  },
  {
    "text": "c and trellis paths. ",
    "start": "1816850",
    "end": "1825610"
  },
  {
    "text": "For this specific trellis up\nhere, how many paths are there",
    "start": "1825610",
    "end": "1830710"
  },
  {
    "text": "through the trellis? ",
    "start": "1830710",
    "end": "1837117"
  },
  {
    "text": "Do you see that however I go\nthrough the trellis, I'm going to meet four two-way branches?",
    "start": "1837118",
    "end": "1844132"
  },
  {
    "text": "All right? According to [UNINTELLIGIBLE],\nthere are four yes-no questions. It's a binary tree.",
    "start": "1844132",
    "end": "1849330"
  },
  {
    "text": "So there are 16 possible ways\nto get through this trellis from start to finish, if I view\nit as a maze problem.",
    "start": "1849330",
    "end": "1858919"
  },
  {
    "text": "And they correspond -- I haven't labeled all\nthe branche -- but they do correspond to all\n16 words in this block code.",
    "start": "1858920",
    "end": "1866270"
  },
  {
    "text": " So now what is maximum\nlikely decoding?",
    "start": "1866270",
    "end": "1873440"
  },
  {
    "text": "I want to find the one of those\n16 words that has the",
    "start": "1873440",
    "end": "1879330"
  },
  {
    "text": "greatest likelihood, or the\nleast negative log likelihood,",
    "start": "1879330",
    "end": "1885120"
  },
  {
    "text": "over all of these 12 received\nsymbols or 6 received times.",
    "start": "1885120",
    "end": "1891355"
  },
  {
    "text": " So what will that be? Once I've labeled each of these\nbranches with a log",
    "start": "1891355",
    "end": "1899310"
  },
  {
    "text": "likelihood cost, I simply want\nto find the least cost path through this trellis.",
    "start": "1899310",
    "end": "1905890"
  },
  {
    "text": "And that will correspond to\nthe most likely code word. This is the essence of it.",
    "start": "1905890",
    "end": "1912159"
  },
  {
    "text": "Do you all see that? AUDIENCE: [INAUDIBLE]  PROFESSOR: The independent\ntransmission allows me to",
    "start": "1912160",
    "end": "1920220"
  },
  {
    "text": "break it up into a\nsymbol-by-symbol or",
    "start": "1920220",
    "end": "1925590"
  },
  {
    "text": "time-by-time expression. So I can simply cumulate over\nthis sum right here.",
    "start": "1925590",
    "end": "1932830"
  },
  {
    "text": "And I'm just looking for the\nminimum sum over all the possible ways I could get\nthrough this trellis. ",
    "start": "1932830",
    "end": "1940909"
  },
  {
    "text": "So now we translated this into\nfinding the minimum cost path",
    "start": "1940910",
    "end": "1951120"
  },
  {
    "text": "through a graph. Through a graph with a very\nspecial structure, nice",
    "start": "1951120",
    "end": "1957410"
  },
  {
    "text": "regular structure. ",
    "start": "1957410",
    "end": "1965190"
  },
  {
    "text": "OK. Once you've got that, then I\nthink it's very obvious how to",
    "start": "1965190",
    "end": "1970350"
  },
  {
    "text": "come up with a nice recursive\nalgorithm for doing that.",
    "start": "1970350",
    "end": "1975600"
  },
  {
    "start": "1975000",
    "end": "2285000"
  },
  {
    "text": "Here's my recursive algorithm. ",
    "start": "1975600",
    "end": "1983169"
  },
  {
    "text": "I'm going to start computing\nweights. I'm going to start here. I'm going to assign\nweight zero here.",
    "start": "1983170",
    "end": "1991070"
  },
  {
    "text": "Right here I'm going to assign a\nweight which is equal to the",
    "start": "1991070",
    "end": "1996200"
  },
  {
    "text": "cost of the best path to get\nto that node in the graph. In this case, it's just the\ncost of that branch.",
    "start": "1996200",
    "end": "2004340"
  },
  {
    "text": "Similarly down here. Similarly I proceed\nto these four. There's only one way to get to\neach of these four, and I",
    "start": "2004340",
    "end": "2012040"
  },
  {
    "text": "simply add up what the\ntotal weight is.",
    "start": "2012040",
    "end": "2017900"
  },
  {
    "text": "Now here's the first point where\nit gets interesting, where I have two possible ways\nto get to this node.",
    "start": "2017900",
    "end": "2025260"
  },
  {
    "text": "One way is via these three\nbranches, and that has a certain cost.",
    "start": "2025260",
    "end": "2030389"
  },
  {
    "text": "Another way is via these three\nbranches, and that has a certain cost.",
    "start": "2030390",
    "end": "2035840"
  },
  {
    "text": "Suppose the cost of these three\nbranches is higher than the cost of these\nthree branches.",
    "start": "2035840",
    "end": "2042540"
  },
  {
    "text": "Just pair-wise. All right? Claim that I can pick the\nminimum cost path to this",
    "start": "2042540",
    "end": "2052710"
  },
  {
    "text": "node, throw away the other\npossibility, and I can never",
    "start": "2052710",
    "end": "2059800"
  },
  {
    "text": "have thrown away something which\nitself is part of the minimum cost path through\nthe whole trellis. ",
    "start": "2059800",
    "end": "2067610"
  },
  {
    "text": "Clearly. Suppose this is the best\npath from here to here.",
    "start": "2067610",
    "end": "2074480"
  },
  {
    "text": "This is worse. X, X, X, X X. And now I find the\nminimum cost path through",
    "start": "2074480",
    "end": "2081589"
  },
  {
    "text": "the whole trellis goes\nthrough this node. Say it's like that.",
    "start": "2081590",
    "end": "2088899"
  },
  {
    "text": "Could it have started\nwith this? No. Because I can always replace\nthis with a path that starts",
    "start": "2088900",
    "end": "2095870"
  },
  {
    "text": "with that and get\na better path. So at this point, I can make a\ndecision between all the paths",
    "start": "2095870",
    "end": "2102880"
  },
  {
    "text": "that get to that node\nand pick just one. The best one that gets\nto that node. And that's called\nthe survivor.",
    "start": "2102880",
    "end": "2110270"
  },
  {
    "text": "This is really the key concept\nthat Viterbi introduced. ",
    "start": "2110270",
    "end": "2117619"
  },
  {
    "text": "We only need to say one, the\nbest up to that time. We need to do it for all the\n2 to the nu possibilities.",
    "start": "2117620",
    "end": "2125780"
  },
  {
    "text": "So we have 2 to the nu survivors\nat time k or time i,",
    "start": "2125780",
    "end": "2132772"
  },
  {
    "text": "whatever your time index is. Used k for something else.",
    "start": "2132772",
    "end": "2138020"
  },
  {
    "text": "OK. So I can throw away half\nthe possibilities.",
    "start": "2138020",
    "end": "2143260"
  },
  {
    "text": "Now each survivor, I remember\nwhat its past history is, and I remember what its cost\nis to that point.",
    "start": "2143260",
    "end": "2150830"
  },
  {
    "text": "Now to proceed, the recursion\nis to proceed one time unit ahead, to add the incremental\ncost -- say, to make a",
    "start": "2150830",
    "end": "2160130"
  },
  {
    "text": "decision here, I need to add\nthe incremental cost to the two survivors that were\nhere and here.",
    "start": "2160130",
    "end": "2165830"
  },
  {
    "text": "So I add an incremental cost,\naccording to what these branches are labeled with. And now I find the best of these\ntwo possibilities to get",
    "start": "2165830",
    "end": "2175890"
  },
  {
    "text": "to this node. So the recursion is called an\nACS operation for add, we add",
    "start": "2175890",
    "end": "2188770"
  },
  {
    "text": "increments to each of these\npaths, we compare which is the best, and we select\nthe best one.",
    "start": "2188770",
    "end": "2195040"
  },
  {
    "text": "We keep that. We throw away the other. We now have a one unit longer\nbest path to this node and its",
    "start": "2195040",
    "end": "2203569"
  },
  {
    "text": "cost for all 2 the nu survivors\nat time i plus 1.",
    "start": "2203570",
    "end": "2211770"
  },
  {
    "text": "And just proceeding in that way,\nwe go through until we finally get to the\nterminating node.",
    "start": "2211770",
    "end": "2219210"
  },
  {
    "text": "And at this point, when we've\nfound the best path to this node, we've found the best path",
    "start": "2219210",
    "end": "2225000"
  },
  {
    "text": "through the whole trellis. OK? So that's all it is.",
    "start": "2225000",
    "end": "2230566"
  },
  {
    "text": "I believe it's just totally\nobvious once you reduce it to",
    "start": "2230566",
    "end": "2235890"
  },
  {
    "text": "a search for a minimum cost\npath through the trellis.",
    "start": "2235890",
    "end": "2242260"
  },
  {
    "text": "It's very well suited to the\napplication of convolutional codes, because we really are\nthinking of sending these bits",
    "start": "2242260",
    "end": "2249390"
  },
  {
    "text": "as a stream in time. And at the receiver, you can\nthink of just proceeding forward one unit of time, 2 to\nthe nu, add, compare, selects,",
    "start": "2249390",
    "end": "2259150"
  },
  {
    "text": "and we've got a new\nset of survivors. There are nice implications of\nthis that involve, you can",
    "start": "2259150",
    "end": "2265030"
  },
  {
    "text": "build a computer for every\nnode or for every pair of nodes to do the ACS operation,\nmake a very fast recursion",
    "start": "2265030",
    "end": "2273080"
  },
  {
    "text": "through here. So that's it. That's the Viterbi algorithm\nfor terminated",
    "start": "2273080",
    "end": "2279740"
  },
  {
    "text": "convolutional codes. ",
    "start": "2279740",
    "end": "2286690"
  },
  {
    "start": "2285000",
    "end": "2380000"
  },
  {
    "text": "Now let's ask about the\nVIterbi algorithm for unterminated convolutional\ncodes.",
    "start": "2286690",
    "end": "2292270"
  },
  {
    "start": "2292270",
    "end": "2301500"
  },
  {
    "text": "Suppose this trellis\nbecomes very long. ",
    "start": "2301500",
    "end": "2306680"
  },
  {
    "text": "Across the whole page. ",
    "start": "2306680",
    "end": "2311750"
  },
  {
    "text": "What are these survivors\ngoing to look like? Suppose we start from a definite\nnode here, and we've",
    "start": "2311750",
    "end": "2318620"
  },
  {
    "text": "got a four state convolutional\ncode, and we iterate and we iterate and we iterate with\nthe Viterbi algorithm.",
    "start": "2318620",
    "end": "2325730"
  },
  {
    "text": "After a long time, somewhere out\nhere, we're going to have four survivors and\ntheir histories.",
    "start": "2325730",
    "end": "2335150"
  },
  {
    "text": "And I've greatly simplified,\nbut basically the histories are going to look schematically\nsomething --",
    "start": "2335150",
    "end": "2343960"
  },
  {
    "text": "I don't know -- could\nbe anything. Look like this. ",
    "start": "2343960",
    "end": "2350830"
  },
  {
    "text": "The point I'm illustrating here\nis that the histories will be distinct right\nat this time.",
    "start": "2350830",
    "end": "2357090"
  },
  {
    "text": "They have to be, because\nthey're going to four distinct stages. But as you go backwards in\ntime, you will find they merge, any two histories will\nmerge, at a certain time back.",
    "start": "2357090",
    "end": "2366750"
  },
  {
    "text": "And this is a probablistic\nthing. It depends on what's happening\non the channel and so forth. But with high probability, they\nwill have merged not too",
    "start": "2366750",
    "end": "2376240"
  },
  {
    "text": "far back in time. So even if we never get to a\nfinal node, even if we just",
    "start": "2376240",
    "end": "2384119"
  },
  {
    "text": "let this process continue\nforever, at this point we can say, we can make a definite\ndecision at this time.",
    "start": "2384120",
    "end": "2393440"
  },
  {
    "text": "Right? Because all survivors\nstart with a common initial part, up to here.",
    "start": "2393440",
    "end": "2400780"
  },
  {
    "text": "So one way to operate the\nViterbi algorithm would be just to, at this\npoint, say, OK.",
    "start": "2400780",
    "end": "2406690"
  },
  {
    "text": "I'm going to put out everything\nbefore this time. No matter how long I run the\ndecoder, the first part of it",
    "start": "2406690",
    "end": "2412890"
  },
  {
    "text": "is always going to\nbe this part. So these are definitely decided\nup to this time. And then I still don't\nknow about here.",
    "start": "2412890",
    "end": "2419700"
  },
  {
    "text": "I'm going to have to go\na little bit further. You proceed further, and after\na while, you find more that's",
    "start": "2419700",
    "end": "2427540"
  },
  {
    "text": "definitely done. In practice, that would lead\nto a sporadic output rate.",
    "start": "2427540",
    "end": "2432950"
  },
  {
    "text": "That isn't really\nwhat you want. So in practice what you do is\nyou establish a decision",
    "start": "2432950",
    "end": "2440230"
  },
  {
    "text": "delay, delta.",
    "start": "2440230",
    "end": "2448500"
  },
  {
    "text": "And what you put out is you hope\nthat 99.999% of the time,",
    "start": "2448500",
    "end": "2455290"
  },
  {
    "text": "that if you look back delta on\nall the survivors, they will all be a common path,\ndelta back here.",
    "start": "2455290",
    "end": "2462430"
  },
  {
    "text": "So there's a very\nhigh probability you will have converged. And so simply at this time, you\nput out what you decided",
    "start": "2462430",
    "end": "2470240"
  },
  {
    "text": "on delta time units earlier. Next time you put out\nthe next one. Next time you put out\nthe next one.",
    "start": "2470240",
    "end": "2475550"
  },
  {
    "text": "So you get a nice, regular,\nsynchronous stream of data coming out of here. Every so often, it may happen\nthat you get out to here and",
    "start": "2475550",
    "end": "2484380"
  },
  {
    "text": "you still haven't\nmade a decision. Then you have to do something.",
    "start": "2484380",
    "end": "2489420"
  },
  {
    "text": "And it really doesn't matter\nterribly much what you do. You might pick the guy who has\nthe best metric at this time,",
    "start": "2489420",
    "end": "2498430"
  },
  {
    "text": "or you simply might say, well,\nI'm always going to pick the one that goes to all zeros. That wouldn't be symmetric.",
    "start": "2498430",
    "end": "2503799"
  },
  {
    "text": "You can make any decision\nyou like. And you could be wrong.",
    "start": "2503800",
    "end": "2510640"
  },
  {
    "text": "But you pick delta large enough\nso that the probability of this happening is very rare,\nand this just adds a",
    "start": "2510640",
    "end": "2517340"
  },
  {
    "text": "little bit to your error\nprobability, and as long as the probability of making an\nerror because of this kind of",
    "start": "2517340",
    "end": "2522620"
  },
  {
    "text": "operation is much lower than\nyour probability of making an ordinary decoding error, then\nyou're going to be OK.",
    "start": "2522620",
    "end": "2529410"
  },
  {
    "text": " For convolutional codes way back\nat the beginning of time,",
    "start": "2529410",
    "end": "2536140"
  },
  {
    "text": "people decided that a decision\ndelay a 5 times nu, 5 times",
    "start": "2536140",
    "end": "2541369"
  },
  {
    "text": "the constraint length, was\nthe right rule of thumb. And that's been the rule of\nthumb for rate 1/n codes",
    "start": "2541370",
    "end": "2548770"
  },
  {
    "text": "forever after. The point is, delta should\nbe a lot more than nu.",
    "start": "2548770",
    "end": "2555510"
  },
  {
    "text": "You know, after one constraint\nlength, you certainly won't have converged. After five constraint lengths,\nyou're highly",
    "start": "2555510",
    "end": "2561580"
  },
  {
    "text": "likely to have converged. And theoretically, the\nprobability of not converging",
    "start": "2561580",
    "end": "2569960"
  },
  {
    "text": "goes down exponentially\nwith delta. So big enough is\ngoing to work.",
    "start": "2569960",
    "end": "2575210"
  },
  {
    "text": "And a final point is that\nsometimes, you really care that what you put out to\nbe a true code word.",
    "start": "2575210",
    "end": "2581930"
  },
  {
    "text": "In that case, if you get to this\nsituation, you have to make a choice, you make a choice\nhere, then you have to",
    "start": "2581930",
    "end": "2589500"
  },
  {
    "text": "actually eliminate all the\nsurvivors that are not consistent with that choice.",
    "start": "2589500",
    "end": "2595980"
  },
  {
    "text": "And you can do that simply by\nputting an infinite metric on this guy here.",
    "start": "2595980",
    "end": "2601890"
  },
  {
    "text": "Then he'll get wiped out as\nsoon as he's compared with anybody else. ",
    "start": "2601890",
    "end": "2608630"
  },
  {
    "text": "And that will ensure that\nwhatever you eventually put out, you keep the\nsequence being a",
    "start": "2608630",
    "end": "2614950"
  },
  {
    "text": "legitimate code sequence. So that's a very fine point. OK. So there really isn't any\nserious problem with letting",
    "start": "2614950",
    "end": "2624200"
  },
  {
    "start": "2620000",
    "end": "2960000"
  },
  {
    "text": "the Viterbi algorithm run\nindefinitely in time once you've got it started.",
    "start": "2624200",
    "end": "2629870"
  },
  {
    "text": "How do you get it started? Suppose you came online and\nyou simply had a stream of",
    "start": "2629870",
    "end": "2637619"
  },
  {
    "text": "outputs, transmitted from a\nconvolutional code over a channel, and you didn't know\nwhat state to start in.",
    "start": "2637620",
    "end": "2643930"
  },
  {
    "text": "How do you use synchronize\nto a starting state? Well, this is not hard either.",
    "start": "2643930",
    "end": "2650400"
  },
  {
    "text": "Basically you start, you're in\none of four states, or 2 to the nu states. You don't know which one.",
    "start": "2650400",
    "end": "2656840"
  },
  {
    "text": "Let's just give them all cost\n0 and start decoding, using",
    "start": "2656840",
    "end": "2663250"
  },
  {
    "text": "the four state trellis. And we just start receiving\n2-tuples from here on.",
    "start": "2663250",
    "end": "2673160"
  },
  {
    "text": "We get rk, r k plus\n1, and so forth. So how should we start? Well, we'll just start\nlike that.",
    "start": "2673160",
    "end": "2678289"
  },
  {
    "text": "And we get sort of the mirror\nimage of this -- that after a time, these will\nall converge to a single path.",
    "start": "2678290",
    "end": "2691900"
  },
  {
    "text": "Or after a time, when we're way\ndown here, this is what the situation will look like.",
    "start": "2691900",
    "end": "2698300"
  },
  {
    "text": "These things will each have a\ndifferent route over here, but they will have converged\nin here.",
    "start": "2698300",
    "end": "2703670"
  },
  {
    "text": "There will be a long path over\nwhich they're all converged, and then towards the end,\nthey'll be unrooted again.",
    "start": "2703670",
    "end": "2710560"
  },
  {
    "text": "OK. Well, that's fine. What does that mean\nin practice? That means we make errors during\nthe synchronization.",
    "start": "2710560",
    "end": "2718190"
  },
  {
    "text": " But we say we're synchronized\nwhen we get this case where",
    "start": "2718190",
    "end": "2727800"
  },
  {
    "text": "all the paths going to all the\ncurrent survivors have a common central stage.",
    "start": "2727800",
    "end": "2733820"
  },
  {
    "text": "And how long does it take\nto synchronize? Again, by analysis, it's exactly\nthis same delta again.",
    "start": "2733820",
    "end": "2741540"
  },
  {
    "text": "The probability of not being\nsynchronized after delta goes down exponentially with delta\nin exactly the same way.",
    "start": "2741540",
    "end": "2748130"
  },
  {
    "text": "It's just a mirror image from\none end to the other. So from a practical point of\nview, this is no problem.",
    "start": "2748130",
    "end": "2754930"
  },
  {
    "text": "And just starting the Viterbi\ndecoder up, with arbitrary metrics here, and after five\nconstraint lengths, if you",
    "start": "2754930",
    "end": "2762330"
  },
  {
    "text": "like, it's highly likely to\nhave gotten synchronized. You'll make errors for five\nconstraint lengths and after",
    "start": "2762330",
    "end": "2767880"
  },
  {
    "text": "that, you'll be OK, as though\nyou knew the starting state. ",
    "start": "2767880",
    "end": "2773640"
  },
  {
    "text": "So the moral is, no problem.",
    "start": "2773640",
    "end": "2781029"
  },
  {
    "text": "You can just set up the Viterbi algorithm and let it run. ",
    "start": "2781030",
    "end": "2791330"
  },
  {
    "text": "The costs will all, of course,\nincrease without bound, which is [UNINTELLIGIBLE].",
    "start": "2791330",
    "end": "2796570"
  },
  {
    "text": "You can always renormalize them,\nsubtract a common cost from all of them. That won't change anything.",
    "start": "2796570",
    "end": "2802490"
  },
  {
    "text": "Keep them within running time. So we don't need to terminate\nconvolutional codes in order",
    "start": "2802490",
    "end": "2809410"
  },
  {
    "text": "to run the Viterbi algorithm. We just let it self-synchronize\nand we make",
    "start": "2809410",
    "end": "2814470"
  },
  {
    "text": "decisions with some\ndecision delay. And the additional problems\nthat we have",
    "start": "2814470",
    "end": "2820290"
  },
  {
    "text": "are very, very small. There are no additional\nproblems. Yeah?",
    "start": "2820290",
    "end": "2825561"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] ",
    "start": "2825561",
    "end": "2833910"
  },
  {
    "text": "PROFESSOR: At this point? Well, notice that we don't know\nthat we've synchronized",
    "start": "2833910",
    "end": "2839220"
  },
  {
    "text": "until we've continued further,\nand we've got -- you know, where we've really\nsynchronized is when we see",
    "start": "2839220",
    "end": "2845420"
  },
  {
    "text": "that every survivor path\nhas the common root. ",
    "start": "2845420",
    "end": "2851840"
  },
  {
    "text": "So at that point, there is\nreally only one path here.",
    "start": "2851840",
    "end": "2857490"
  },
  {
    "text": "And we can say that the\nsynchronized part is definitely decoded. ",
    "start": "2857490",
    "end": "2864450"
  },
  {
    "text": "And we can't really say too\nmuch about this out here, because this depends on what's\nhappened out in the past.",
    "start": "2864450",
    "end": "2870660"
  },
  {
    "text": "So you say this is erasures,\nif you like.",
    "start": "2870660",
    "end": "2876079"
  },
  {
    "text": "The stuff that we're pretty sure\nhas a high probability of being wrong. AUDIENCE: [INAUDIBLE]",
    "start": "2876080",
    "end": "2881470"
  },
  {
    "text": " PROFESSOR: There is\nonly one decoded",
    "start": "2881470",
    "end": "2888740"
  },
  {
    "text": "path during this interval. AUDIENCE: But before that\ninterval there are branches and so on right.",
    "start": "2888740",
    "end": "2894926"
  },
  {
    "text": " PROFESSOR: Well here, we\ndon't know anything. Here we know the results\nof one computation.",
    "start": "2894926",
    "end": "2903930"
  },
  {
    "text": "What are you suggesting? Just pick the best one\nat that point? AUDIENCE: And finally after\nyou reach the [INAUDIBLE]?",
    "start": "2903930",
    "end": "2909254"
  },
  {
    "text": " PROFESSOR: And finally?",
    "start": "2909254",
    "end": "2914800"
  },
  {
    "text": "I'm just not sure\nexactly what the logic is of your algorithm. It's clear for this, it wouldn't\nmake any difference",
    "start": "2914800",
    "end": "2920730"
  },
  {
    "text": "if we just started off\narbitrarily so, we're going to start in the zero state. And we only allow things to\nstart in the zero state.",
    "start": "2920730",
    "end": "2928110"
  },
  {
    "text": "Well, we'll eventually get\nto this path anyway. So it really doesn't matter\nhow you start.",
    "start": "2928110",
    "end": "2933820"
  },
  {
    "text": "You're going to have garbage for\na while, and then you're going to be OK.  There's no point in doing\nanything more",
    "start": "2933820",
    "end": "2939910"
  },
  {
    "text": "sophisticated than that. ",
    "start": "2939910",
    "end": "2948609"
  },
  {
    "text": "I don't want to discuss what\nyou're suggesting, because I think there's a flaw in it.",
    "start": "2948610",
    "end": "2954210"
  },
  {
    "text": "Try to figure out what time\nyou're going to make this decision at. ",
    "start": "2954210",
    "end": "2959720"
  },
  {
    "text": "OK. Do we all understand the\nViterbi algorithm? Yes?",
    "start": "2959720",
    "end": "2965570"
  },
  {
    "start": "2960000",
    "end": "3178000"
  },
  {
    "text": "Good. We can easily program it up. There will be an exercise\non the homework.",
    "start": "2965570",
    "end": "2971776"
  },
  {
    "text": " But now you can all do the\nViterbi algorithm.",
    "start": "2971776",
    "end": "2977110"
  },
  {
    "text": " All right. So -- and oh. What's the complexity of\nthe Viterbi algorithm?",
    "start": "2977110",
    "end": "2984026"
  },
  {
    "start": "2984027",
    "end": "2991190"
  },
  {
    "text": "What is the complexity? We always want to be talking\nabout performance versus",
    "start": "2991190",
    "end": "2997530"
  },
  {
    "text": "complexity.  So it's a recursive algorithm.",
    "start": "2997530",
    "end": "3003520"
  },
  {
    "text": "We do exactly the same\noperations every unit of time. What do the operations\nconsist of?",
    "start": "3003520",
    "end": "3009990"
  },
  {
    "text": "They consist of add,\ncompare, select. How many additions to\nwe have to make?",
    "start": "3009990",
    "end": "3016259"
  },
  {
    "text": "Additions are basically equal\nto the number of branches in each unit of time in the\ntrellis, which is 2",
    "start": "3016260",
    "end": "3022520"
  },
  {
    "text": "to the nu plus one. Is that clear? We have 2 to the nu states. Two branches out of, two\nbranches into each state,",
    "start": "3022520",
    "end": "3029670"
  },
  {
    "text": "always for rate one. So we have 2 to the nu\nplus 1 additions.",
    "start": "3029670",
    "end": "3038100"
  },
  {
    "text": "We get 2 the nu compares,\none for each state.",
    "start": "3038100",
    "end": "3043520"
  },
  {
    "text": "Which is really, you can\nconsider the select to be part of the compare.",
    "start": "3043520",
    "end": "3048780"
  },
  {
    "text": "Overall, you can say the\ncomplexity is of the order of",
    "start": "3048780",
    "end": "3055510"
  },
  {
    "text": "2 to the nu or 2 to\nthe nu plus 1. ",
    "start": "3055510",
    "end": "3062030"
  },
  {
    "text": "This is the number of states\nor the state complexity. This is the number\nof branches.",
    "start": "3062030",
    "end": "3067950"
  },
  {
    "text": " I will argue a little bit\nlater that the branch",
    "start": "3067950",
    "end": "3074490"
  },
  {
    "text": "complexity is really\nmore fundamental. You've got to do at least one\nthing for each branch.",
    "start": "3074490",
    "end": "3080609"
  },
  {
    "text": "So in different set up,\nthe branch complexity. But these are practically the\nsame thing, and so we say that",
    "start": "3080610",
    "end": "3088869"
  },
  {
    "text": "the complexity of the Viterbi\nalgorithm is basically like the number of states.",
    "start": "3088870",
    "end": "3093950"
  },
  {
    "text": "We have a four state encoder,\nthe complexity's like four, it goes up exponentially with\nthe constraint length.",
    "start": "3093950",
    "end": "3099970"
  },
  {
    "text": "This says, this is going to be\nnice, as long as we have short constraint length.",
    "start": "3099970",
    "end": "3105010"
  },
  {
    "text": "For longer constraint lengths,\nyou know, a constraint length 20, it's going to be a pretty\nhorrible algorithm.",
    "start": "3105010",
    "end": "3111720"
  },
  {
    "text": "So we can only use the Viterbi\nalgorithm relatively short constraint length codes,\nrelatively",
    "start": "3111720",
    "end": "3118390"
  },
  {
    "text": "small numbers of states. The biggest Viterbi algorithm\nthat I'm aware has ever been",
    "start": "3118390",
    "end": "3123990"
  },
  {
    "text": "built is a 2 the 14th\nstate algorithm. The so-called big Viterbi\ndecoder out at JPL.",
    "start": "3123990",
    "end": "3130360"
  },
  {
    "text": "It was used for the Galileo\nspace missions. It's in a rack that big. I'm sure nowadays you could\npractically get it on a chip,",
    "start": "3130360",
    "end": "3137460"
  },
  {
    "text": "and you could maybe do\n2 the 20th states. But so this exponential\ncomplexity, in computer",
    "start": "3137460",
    "end": "3148510"
  },
  {
    "text": "science terms, not really\nwhat we want. But when we're talking about\nmoderate complexity decoders,",
    "start": "3148510",
    "end": "3156230"
  },
  {
    "text": "these really have proved to be\nthe most effective, and become the standard moderate\ncomplexity decoder.",
    "start": "3156230",
    "end": "3163590"
  },
  {
    "text": "The advantage is that we can\ndo true maximum likelihood decoding on a sequence basis,\nusing soft decisions, using",
    "start": "3163590",
    "end": "3172370"
  },
  {
    "text": "whatever reliability information\nthe channel has, as long as it's memoryless.",
    "start": "3172370",
    "end": "3178270"
  },
  {
    "start": "3178000",
    "end": "3600000"
  },
  {
    "text": "So last topic is to talk\nabout performance.",
    "start": "3178270",
    "end": "3183550"
  },
  {
    "text": "How are we going to evaluate\nthe performance of convolutional codes? You remember what we\ndid on block codes?",
    "start": "3183550",
    "end": "3191119"
  },
  {
    "text": "We basically looked at the\npairwise error probability between block code words, we\nthen did the union bound,",
    "start": "3191120",
    "end": "3199119"
  },
  {
    "text": "based on the pairwise\nerror probabilities.",
    "start": "3199120",
    "end": "3205360"
  },
  {
    "text": "And we observed that the union\nbound was typically dominated by the minimum distance error\nevents, and so we get the",
    "start": "3205360",
    "end": "3211370"
  },
  {
    "text": "union bound estimate, which\nwas purely based on the minimum distance possible\nerrors.",
    "start": "3211370",
    "end": "3218619"
  },
  {
    "text": "And we can do exactly the\nsame thing in the convolutional case. Convolutional case, again,\nis a linear code.",
    "start": "3218620",
    "end": "3225530"
  },
  {
    "text": "That means it has the group\nproperty, has symmetry such that the distances from every\npossible code sequence to all",
    "start": "3225530",
    "end": "3233180"
  },
  {
    "text": "other code sequences are going\nto be the same, since we're talking on a long or possibly\ninfinite sequence basis.",
    "start": "3233180",
    "end": "3242730"
  },
  {
    "text": "And we need to be just a little\nbit more careful about",
    "start": "3242730",
    "end": "3247840"
  },
  {
    "text": "what an error consists of. We need to talk about\nerror events.",
    "start": "3247840",
    "end": "3253849"
  },
  {
    "text": "And this is a simple concept. Let us again draw a path\ncorresponding to the",
    "start": "3253850",
    "end": "3262970"
  },
  {
    "text": "transmitted code words. A very long path, potentially\ninfinite, but it is some",
    "start": "3262970",
    "end": "3272460"
  },
  {
    "text": "definite sequence. And let's run it through a\nmemory list channel, use the",
    "start": "3272460",
    "end": "3278520"
  },
  {
    "text": "Viterbi algorithm, and we're\ngoing to get some received code word, or decoded\ncode word.",
    "start": "3278520",
    "end": "3285336"
  },
  {
    "start": "3285336",
    "end": "3291170"
  },
  {
    "text": "This is one place where you\nmight want to insist that the Viterbi algorithm actually\nput out a code word.",
    "start": "3291170",
    "end": "3297650"
  },
  {
    "text": "What is that going\nto look like? Well, if you're running\nnormally, the received code",
    "start": "3297650",
    "end": "3302660"
  },
  {
    "text": "word is going to equal\nthe transmitted code word most the time. Except it's going\nto make errors.",
    "start": "3302660",
    "end": "3308750"
  },
  {
    "text": "And what will the errors\nlook like? They'll look like a branch off\nthrough the trellis, and then",
    "start": "3308750",
    "end": "3314090"
  },
  {
    "text": "eventually a reemerging\ninto the same state. And similarly, you go on longer,\nand you might have",
    "start": "3314090",
    "end": "3321110"
  },
  {
    "text": "another error. And any place where there's\na difference --",
    "start": "3321110",
    "end": "3326276"
  },
  {
    "text": " should have done a different\ncolor here --",
    "start": "3326276",
    "end": "3331410"
  },
  {
    "text": "any place where there's\ndifference, this is called an error event. ",
    "start": "3331410",
    "end": "3336950"
  },
  {
    "text": "So what I'm illustrating is a\ncase when we had two disjoint error events.",
    "start": "3336950",
    "end": "3342740"
  },
  {
    "text": "Is that concept clear? We're going to draw the trellis\npaths corresponding the transmitted code word and\nthe decoded code word.",
    "start": "3342740",
    "end": "3352099"
  },
  {
    "text": "Wherever they diverge over a\nperiod of time, we're going to call it an error event. But eventually they will\nre-merge again.",
    "start": "3352100",
    "end": "3360530"
  },
  {
    "text": "So it could be a short time. Can't be any shorter than the\nconstraint length plus 1.",
    "start": "3360530",
    "end": "3367060"
  },
  {
    "text": "That would be the minimum\nlength error event. Could be a longer time. Unbounded, actually.",
    "start": "3367060",
    "end": "3372260"
  },
  {
    "text": " OK. What is going to be the\nprobability of an error event",
    "start": "3372260",
    "end": "3381870"
  },
  {
    "text": "starting at some time? ",
    "start": "3381870",
    "end": "3397340"
  },
  {
    "text": "And when I say an error event\nstarting at time k, let's suppose I've been going along\non the transmitted path, and",
    "start": "3397340",
    "end": "3404180"
  },
  {
    "text": "the decoder has still\ngot that there. I'm asking, what is the\nprobability that this code",
    "start": "3404180",
    "end": "3410660"
  },
  {
    "text": "word is actually more likely\non a maximum likelihood sequence detection basis\nthan this one?",
    "start": "3410660",
    "end": "3418190"
  },
  {
    "text": "Well, simply the probability\nthat the received sequence is closer to this one\nthan this one.",
    "start": "3418190",
    "end": "3424710"
  },
  {
    "text": "We know how to analyze that\nfor a finite differences. What is the difference here?",
    "start": "3424710",
    "end": "3432850"
  },
  {
    "text": "The difference, call this y\nof d and this y hat of d.",
    "start": "3432850",
    "end": "3442030"
  },
  {
    "text": "What is y of d minus\ny hat of d? We'll call that e of d.",
    "start": "3442030",
    "end": "3450980"
  },
  {
    "text": "This is a code word. This is a decoded code word. So the error event has\nto be a code word.",
    "start": "3450980",
    "end": "3458400"
  },
  {
    "text": "Right?  Decoder made a mistake. The mistake has to\nbe a code word.",
    "start": "3458400",
    "end": "3466160"
  },
  {
    "text": "So we're asking, what is the\nprobability that y of d sent y",
    "start": "3466160",
    "end": "3473839"
  },
  {
    "text": "hat of d decoded, where\ny hat of d equals y",
    "start": "3473840",
    "end": "3481300"
  },
  {
    "text": "of d plus e of d? We'll just ask for that\nparticular event.",
    "start": "3481300",
    "end": "3488880"
  },
  {
    "text": "This is the probability that\nr of d closer to y hat",
    "start": "3488880",
    "end": "3500829"
  },
  {
    "text": "of d than y of d. ",
    "start": "3500830",
    "end": "3508680"
  },
  {
    "text": "Now, making a big leap. ",
    "start": "3508680",
    "end": "3514030"
  },
  {
    "text": "This is equal to -- we're just talking about two\nsequences in Euclidean space.",
    "start": "3514030",
    "end": "3521790"
  },
  {
    "text": "All that matters is\nthe Euclidean distance between them. What is the Euclidean distance\nbetween them?",
    "start": "3521790",
    "end": "3527870"
  },
  {
    "text": "It's 4 alpha squared times the\nweight of this error event, the Hamming weight of\nthis error event.",
    "start": "3527870",
    "end": "3533180"
  },
  {
    "text": " And so if you remember how to\ncalculate pairwise error",
    "start": "3533180",
    "end": "3540050"
  },
  {
    "text": "probabilities, this is just\nalpha squared D over sigma",
    "start": "3540050",
    "end": "3545540"
  },
  {
    "text": "squared, where D is the\ndistance of e of d.",
    "start": "3545540",
    "end": "3551950"
  },
  {
    "text": "The weight, the Hamming\nweight of e of d.",
    "start": "3551950",
    "end": "3558054"
  },
  {
    "text": "Call it sigma squared. Remember something that\nlooked like that? ",
    "start": "3558054",
    "end": "3565099"
  },
  {
    "text": "So once again, we go from the\nHamming weight of a possible error event to a Euclidean\nweight, which is 4 alpha",
    "start": "3565100",
    "end": "3572450"
  },
  {
    "text": "squared times the\nHamming weight. We actually take the square root\nof that and we only need",
    "start": "3572450",
    "end": "3580190"
  },
  {
    "text": "to make an error, a noise\nof half of that length. So that's where the\n4 disappears.",
    "start": "3580190",
    "end": "3588250"
  },
  {
    "text": "And we just get q of d squared\nover sigma squared, where d is the distance to the\ndecision boundary.",
    "start": "3588250",
    "end": "3596550"
  },
  {
    "text": "Compressing a lot of steps,\nbut it's all something you felt you knew well a\nfew chapters ago.",
    "start": "3596550",
    "end": "3606110"
  },
  {
    "text": "So the union bound would simply\nbe the sum over all",
    "start": "3606110",
    "end": "3616680"
  },
  {
    "text": "error events in the code\nsuch that the start --",
    "start": "3616680",
    "end": "3622920"
  },
  {
    "text": "so e of d is -- you want them to start\nat time 0, say. Let's ask for the probably\nof an error event",
    "start": "3622920",
    "end": "3629970"
  },
  {
    "text": "starting at time 0. So we want it to be polynomial,\nhave no non-zero",
    "start": "3629970",
    "end": "3637589"
  },
  {
    "text": "negative coefficients, and have\nthe coefficient at time 0 be 1, or not 0.",
    "start": "3637590",
    "end": "3646300"
  },
  {
    "text": "I'm doing this very roughly. Of q to the square root of alpha\nsquared times the weight",
    "start": "3646300",
    "end": "3655220"
  },
  {
    "text": "Hamming of e of d over\nsigma squared. ",
    "start": "3655220",
    "end": "3662390"
  },
  {
    "text": "Just as before. So to get the union bound, we\nsum up over the weights of all",
    "start": "3662390",
    "end": "3667540"
  },
  {
    "text": "sequences that start\nat time 0. Let's do it for our\nfavorite example.",
    "start": "3667540",
    "end": "3675916"
  },
  {
    "text": "Suppose g of d is 1 plus d\nsquared, 1 plus d plus d",
    "start": "3675916",
    "end": "3682630"
  },
  {
    "text": "squared, then what are the\npossible e of d's that I'm talking about?",
    "start": "3682630",
    "end": "3688380"
  },
  {
    "text": "I have this itself. 1 plus d squared, 1 plus\nd plus d squared.",
    "start": "3688380",
    "end": "3694390"
  },
  {
    "text": "This is weight equal to 5. What's my next possible\nerror event?",
    "start": "3694390",
    "end": "3701000"
  },
  {
    "text": "Would be 1 plus d times this. So it's going to be a table.",
    "start": "3701000",
    "end": "3710740"
  },
  {
    "text": "We have g of d, 1 plus d times\ng of d, which is equal to 1",
    "start": "3710740",
    "end": "3716570"
  },
  {
    "text": "plus d plus d squared plus d\ncubed, 1 plus d cubed, that",
    "start": "3716570",
    "end": "3722320"
  },
  {
    "text": "has weight equals 6. What's my next longer one?",
    "start": "3722320",
    "end": "3727520"
  },
  {
    "text": "1 plus d squared times g of d\nequals 1 plus d fourth, 1 plus",
    "start": "3727520",
    "end": "3736010"
  },
  {
    "text": "d plus d third plus d fourth,\nthat has weight 6.",
    "start": "3736010",
    "end": "3742380"
  },
  {
    "text": "1 plus d plus d squared\ntimes g of d. ",
    "start": "3742380",
    "end": "3751160"
  },
  {
    "text": "1 plus d plus -- this is 1 plus d plus -- ",
    "start": "3751160",
    "end": "3762369"
  },
  {
    "text": "plus d third, plus d forth. I may be making a\nmistake here.",
    "start": "3762370",
    "end": "3767619"
  },
  {
    "text": "1 plus d squared\nplus d fourth. It's hard to do this by\nhand after a while.",
    "start": "3767620",
    "end": "3774549"
  },
  {
    "text": "OK. Notice, we start tabulating all\nthe error events, which I can do in order of the degree of\nu of d, always keeping the",
    "start": "3774550",
    "end": "3784730"
  },
  {
    "text": "non-zero, the time 0\nterm equal to 1. So this is the only\none of length 1.",
    "start": "3784730",
    "end": "3790910"
  },
  {
    "text": "This is [UNINTELLIGIBLE] of degree 0. This is the only one\nof degree 1. There are two of them\nof degree 2.",
    "start": "3790910",
    "end": "3797170"
  },
  {
    "text": "There will be four of them of\ndegree 3, and so forth. So I can lay out what all the\nerror events could be, and I",
    "start": "3797170",
    "end": "3805870"
  },
  {
    "text": "look at what their\nweights are. Here's my minimum weight\nerror event. Then I have two of weight\nsix and so forth.",
    "start": "3805870",
    "end": "3812260"
  },
  {
    "text": "So the union bound, I'd be\nadding up this term. I'd get one term where the\nweight is 5, two where the",
    "start": "3812260",
    "end": "3820079"
  },
  {
    "text": "weight is 6, I don't know how\nmany where the weight is 7. I happen to know there\nwere only two",
    "start": "3820080",
    "end": "3826380"
  },
  {
    "text": "weight 6 error events. And you simply have to find out\nwhat the weight profile is",
    "start": "3826380",
    "end": "3831890"
  },
  {
    "text": "and put it in the union bound. Or you can use the union bound\nestimate, which is simply --",
    "start": "3831890",
    "end": "3840470"
  },
  {
    "text": "let's just take k nd, the number\nof error events of",
    "start": "3840470",
    "end": "3849869"
  },
  {
    "text": "minimum weight d, times q to\nthe square root of alpha",
    "start": "3849870",
    "end": "3855010"
  },
  {
    "text": "squared d, where d equals min\nweight over sigma squared.",
    "start": "3855010",
    "end": "3864805"
  },
  {
    "text": " OK. In this case, nd equals\n1, d equals 6.",
    "start": "3864805",
    "end": "3872800"
  },
  {
    "text": "Let me take this one\nstep further. nd times q to the square\nroot of -- ",
    "start": "3872800",
    "end": "3880150"
  },
  {
    "text": "what is sigma squared\nequals n0 over 2?",
    "start": "3880150",
    "end": "3886398"
  },
  {
    "text": "And Eb equals n times\nalpha squared.",
    "start": "3886398",
    "end": "3893250"
  },
  {
    "text": "The energy per transmitted\nbit is alpha squared. We're going to transmit n bits\nfor every information bit.",
    "start": "3893250",
    "end": "3900760"
  },
  {
    "text": "So plugging those in, I get 2d\nover n times Eb over N0, which",
    "start": "3900760",
    "end": "3911460"
  },
  {
    "text": "is again of the form nd q to the\nsquare root of 2 times the",
    "start": "3911460",
    "end": "3916830"
  },
  {
    "text": "coding gain of the code\ntimes Eb over N0.",
    "start": "3916830",
    "end": "3922310"
  },
  {
    "text": "Bottom line is I get precisely\nthe same performance analysis, or I get a nominal\ncoding gain of --",
    "start": "3922310",
    "end": "3936020"
  },
  {
    "text": " in general, it's kd over n. If it were a rate k over n\ncode, since we're only",
    "start": "3936020",
    "end": "3944940"
  },
  {
    "text": "considering rate 1 over n codes,\nit's just d over n. And I get an error coefficient\nwhich equals the number of",
    "start": "3944940",
    "end": "3959720"
  },
  {
    "text": "weight d code words,\nstarting time 0.",
    "start": "3959720",
    "end": "3965690"
  },
  {
    "text": " Of course an error event could\nstart at any time.",
    "start": "3965690",
    "end": "3973000"
  },
  {
    "text": "If there are nd starting\nat time 0, how many start at time 1?",
    "start": "3973000",
    "end": "3980230"
  },
  {
    "text": "Time invariant code. So it's going to be the same\nnumbers could possibly",
    "start": "3980230",
    "end": "3986619"
  },
  {
    "text": "start at time 1. So what I'm computing here is\nthe probability of an error event starting at a\nparticular time.",
    "start": "3986620",
    "end": "3994500"
  },
  {
    "text": "For this particular code,\nwhat do I have? I have one event of weight 5.",
    "start": "3994500",
    "end": "4006000"
  },
  {
    "text": "So the nominal coding gain\nis 5 over n, which is 2.",
    "start": "4006000",
    "end": "4015360"
  },
  {
    "text": "Which is -- 5 is 7 dB, 2 is 3 dB,\nso this is 4 dB.",
    "start": "4015360",
    "end": "4023920"
  },
  {
    "text": "That's pretty good. Nominal coding gain of 4 dB with\nonly a four state code.",
    "start": "4023920",
    "end": "4030370"
  },
  {
    "text": "Obviously a very simple\ndecoder for this code. ",
    "start": "4030370",
    "end": "4035770"
  },
  {
    "text": "And what is kd equals 1? That implies --",
    "start": "4035770",
    "end": "4041400"
  },
  {
    "text": "again, we have the same argument\nabout whatever the error coefficient is.",
    "start": "4041400",
    "end": "4048299"
  },
  {
    "text": "You could plot this curve. The larger the error coefficient\nis, the more the",
    "start": "4048300",
    "end": "4053390"
  },
  {
    "text": "curve moves up, and\ntherefore over. You get an effective coding\ngain which is less.",
    "start": "4053390",
    "end": "4059349"
  },
  {
    "text": "But this means since it's 1,\nyou don't have to do that. The effective coding gain\nis the same as the",
    "start": "4059350",
    "end": "4065720"
  },
  {
    "text": "nominal coding gain. It's still 4 dB. So it's a real 4 dB of coding\ngain for the simple little two",
    "start": "4065720",
    "end": "4074010"
  },
  {
    "text": "state code. ",
    "start": "4074010",
    "end": "4079220"
  },
  {
    "text": "This code compares very directly\nwith the 8 4 4",
    "start": "4079220",
    "end": "4087630"
  },
  {
    "text": "Reed-Muller code, block code. This code also has rate 1/2.",
    "start": "4087630",
    "end": "4093550"
  },
  {
    "text": "It has the same rate. We'll see that it also has a\nfour-state trellis diagram.",
    "start": "4093550",
    "end": "4098950"
  },
  {
    "text": "But it only has distance four,\nwhich means its nominal coding gain is only 2, 3 dB.",
    "start": "4098950",
    "end": "4106969"
  },
  {
    "text": "And furthermore, it has 14\nminimum weight words, which",
    "start": "4106970",
    "end": "4114370"
  },
  {
    "text": "even dividing by 4 to get the\nnumber per bit, there's still a factor of 3, still going to\ncost us another couple of",
    "start": "4114370",
    "end": "4121778"
  },
  {
    "text": "tenths of a dB. Its effective coding gain is\nonly about 2.6 or 2.7 dB.",
    "start": "4121779",
    "end": "4128457"
  },
  {
    "text": "All right? So this code has much better\nperformance for about the same",
    "start": "4128457",
    "end": "4134100"
  },
  {
    "text": "complexity as this code,\nat the same rate.",
    "start": "4134100",
    "end": "4139920"
  },
  {
    "text": "And this tends to be typical. Convolutional codes just beat\nblock codes when you compare",
    "start": "4139920",
    "end": "4145939"
  },
  {
    "text": "them in this way. Notice that we're assuming\nmaximum likelihood decoding.",
    "start": "4145939",
    "end": "4151620"
  },
  {
    "text": "We don't yet have a maximum\nlikelihood decoding algorithm for this code. We'll find for this code, we can\nalso decode it using the",
    "start": "4151620",
    "end": "4159509"
  },
  {
    "text": "Viterbi algorithm with\na four state decoder comparable to this one. So it would be, I would say,\nfor maximum likelihood",
    "start": "4159510",
    "end": "4166640"
  },
  {
    "text": "decoding -- about same complexity. But we simply get much better\nperformance with the",
    "start": "4166640",
    "end": "4173080"
  },
  {
    "text": "convolutional. Yeah? AUDIENCE: [INAUDIBLE]  PROFESSOR: Say again?",
    "start": "4173080",
    "end": "4178500"
  },
  {
    "text": "AUDIENCE: What happened\nto the k? PROFESSOR: Why is\nk equal to 1? Which k?",
    "start": "4178500",
    "end": "4183660"
  },
  {
    "text": "Over here? AUDIENCE: Yeah. kd\n[INAUDIBLE]. PROFESSOR: All right. We're only considering\nrate 1/n codes.",
    "start": "4183660",
    "end": "4190955"
  },
  {
    "text": "If it were a rate k/n code, we\nwould get k over n, because this would be n over k\ntimes alpha squared.",
    "start": "4190955",
    "end": "4200000"
  },
  {
    "text": "Just the same as before. In fact, I just want to wave my\nhand, say, everything goes",
    "start": "4200000",
    "end": "4205800"
  },
  {
    "text": "through as before. As soon as you get the error\nevent concept, you can reduce",
    "start": "4205800",
    "end": "4210830"
  },
  {
    "text": "it to the calculation of\npairwise error probabilities, and then the union bound\nestimate is as before.",
    "start": "4210830",
    "end": "4216160"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]? ",
    "start": "4216160",
    "end": "4222180"
  },
  {
    "text": "PROFESSOR: Well, I had my\nlittle trellis here.",
    "start": "4222180",
    "end": "4227600"
  },
  {
    "text": "And how long in real time\ndoes it take for",
    "start": "4227600",
    "end": "4233270"
  },
  {
    "text": "two paths to merge?  An error event has got to take\nat least nu plus 1 time units",
    "start": "4233270",
    "end": "4241560"
  },
  {
    "text": "for two paths to diverge\nand then merge again in the trellis.",
    "start": "4241560",
    "end": "4246900"
  },
  {
    "text": " Is that clear? ",
    "start": "4246900",
    "end": "4257849"
  },
  {
    "text": "Or put another way, the lowest\ndegree of any possible error",
    "start": "4257850",
    "end": "4263660"
  },
  {
    "text": "event is nu, which means it\nactually takes place over nu plus 1 time units.",
    "start": "4263660",
    "end": "4269575"
  },
  {
    "text": " OK? From this.",
    "start": "4269575",
    "end": "4274619"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] PROFESSOR: Why is\nthe lowest --? ",
    "start": "4274620",
    "end": "4281390"
  },
  {
    "text": "I'm taking g of d -- the definition of nu is what? The maximum degree of g of d.",
    "start": "4281390",
    "end": "4289230"
  },
  {
    "text": "OK? So if that's so, then the\nshortest length error event is",
    "start": "4289230",
    "end": "4295429"
  },
  {
    "text": "1 times g of d, which takes nu\nplus 1 time units to run out.",
    "start": "4295430",
    "end": "4301460"
  },
  {
    "text": "So error events have to be at\nleast this long, and then they can be any integer length\nlonger than that.",
    "start": "4301460",
    "end": "4307310"
  },
  {
    "start": "4307310",
    "end": "4313350"
  },
  {
    "text": "You don't look totally happy. AUDIENCE: [INAUDIBLE] PROFESSOR: You understand? OK. AUDIENCE: [INAUDIBLE]",
    "start": "4313350",
    "end": "4319140"
  },
  {
    "start": "4319140",
    "end": "4326820"
  },
  {
    "text": "PROFESSOR: How I see it\nfrom this diagram? Where have I got a picture\nof a trellis?",
    "start": "4326820",
    "end": "4331880"
  },
  {
    "text": "Here I've got a picture\nof a trellis. I've defined an error\nevent by taking a",
    "start": "4331880",
    "end": "4339520"
  },
  {
    "text": "transmitted code word. It's a code sequence. This is supposed to represent\nsome path through the trellis.",
    "start": "4339520",
    "end": "4345320"
  },
  {
    "text": "There's one-to-one\ncorrespondence between code sequences and trellis paths. Then I find another code\nsequence, which is the one I",
    "start": "4345320",
    "end": "4352890"
  },
  {
    "text": "actually decided on. Call that the decoded\ncode sequence. And I say, what's the minimum\nlength of time they could be",
    "start": "4352890",
    "end": "4360310"
  },
  {
    "text": "diverged from one another? All right? Let's take this particular\ntrellis.",
    "start": "4360310",
    "end": "4366230"
  },
  {
    "text": "What's the minimum length\nof time any two paths -- say, here's the transmitted\npath.",
    "start": "4366230",
    "end": "4371995"
  },
  {
    "text": " Suppose I try to find another\npath that diverges from it?",
    "start": "4371995",
    "end": "4378690"
  },
  {
    "text": "Here's one. Comes back to it. Here's one. Another one. Comes back to it.",
    "start": "4378690",
    "end": "4386730"
  },
  {
    "text": "I say that the minimum length\nof time it could take is nu plus 1. Why? Because the difference between\nthese two paths is itself a",
    "start": "4386730",
    "end": "4394940"
  },
  {
    "text": "code sequence, is therefore\na non-zero polynomial multiple of g of d.",
    "start": "4394940",
    "end": "4403309"
  },
  {
    "text": "OK? Same argument. ",
    "start": "4403310",
    "end": "4410210"
  },
  {
    "text": "OK. So I guess I'm not going to get\ninto chapter 10, so I'll",
    "start": "4410210",
    "end": "4416270"
  },
  {
    "text": "discourse a little bit more\nabout convolutional codes versus block codes.",
    "start": "4416270",
    "end": "4422490"
  },
  {
    "start": "4422490",
    "end": "4434940"
  },
  {
    "text": "How do you construct\nconvolutional codes, actually? You see that really, what you\nwant to do is to first of all,",
    "start": "4434940",
    "end": "4443820"
  },
  {
    "text": "maximize the minimum distance\nfor certain constraint length. Subject to that, you want to\nminimize the number of minimum",
    "start": "4443820",
    "end": "4450220"
  },
  {
    "text": "distance words. You want to, in fact, get the\nbest distance profile.",
    "start": "4450220",
    "end": "4458050"
  },
  {
    "text": "Is there any block codes? We had nice, algebraic\nways of doing this.",
    "start": "4458050",
    "end": "4463340"
  },
  {
    "text": "Roots of polynomials,\nReed-Solomon codes. We could develop an algebraic\nformula which told us what the",
    "start": "4463340",
    "end": "4471090"
  },
  {
    "text": "minimum distance was. Do we have any nice algebraic\nconstructions like that convolutional code? No.",
    "start": "4471090",
    "end": "4478300"
  },
  {
    "text": "Basically, you've just got to\nsearch all the possible polynomials where the maximum\ndegree is nu.",
    "start": "4478300",
    "end": "4485360"
  },
  {
    "text": "Take pairs of polynomials. If you want a rate 1/2 code of\ndegree nu, there's not that",
    "start": "4485360",
    "end": "4490690"
  },
  {
    "text": "many things you have\nto search. All right? You just take all possible pairs\nof binary polynomials of",
    "start": "4490690",
    "end": "4496660"
  },
  {
    "text": "degree nu or less, making sure\nthat you don't take any two",
    "start": "4496660",
    "end": "4501760"
  },
  {
    "text": "which have a common divisor, an\nuntrivial common divisor, so you can wipe those out.",
    "start": "4501760",
    "end": "4508790"
  },
  {
    "text": "You want to make sure that\nthe constant term is 1. There's no point in sliding one\nover so it has a larger",
    "start": "4508790",
    "end": "4514260"
  },
  {
    "text": "constant term than 1. But subject to those provisos,\nyou simply try all pairs g1,",
    "start": "4514260",
    "end": "4520750"
  },
  {
    "text": "g2, and you just do -- as soon as you've assured\nyourself they're not",
    "start": "4520750",
    "end": "4527690"
  },
  {
    "text": "catastrophic, they don't have a\ncommon divisor, then you can just list, you know, the finite\ncode words are going to",
    "start": "4527690",
    "end": "4533600"
  },
  {
    "text": "be the ones that are\ngenerated by finite information sequences. So you can just list all the\ncode words, as I've started to",
    "start": "4533600",
    "end": "4540179"
  },
  {
    "text": "do up here. Or since the trellis is, in\nfact, a way of listing all the",
    "start": "4540180",
    "end": "4547550"
  },
  {
    "text": "code words, there's a one-to-one\ncorrespondence between code words and trellis\npaths, you can just start",
    "start": "4547550",
    "end": "4553330"
  },
  {
    "text": "searching through the trellis\nand you will quickly find all the minimum weight code words,\nand thereby establish the",
    "start": "4553330",
    "end": "4561020"
  },
  {
    "text": "minimum distance, the\nweight profile as far out as you like. And you choose the best. You try all possibilities.",
    "start": "4561020",
    "end": "4567030"
  },
  {
    "text": "So Joseph Odenwalder did this\nas soon as people recognized that short convolutional codes\ncould be practical, and he",
    "start": "4567030",
    "end": "4575130"
  },
  {
    "text": "published the tables back in his\nPhD thesis in '69, so he",
    "start": "4575130",
    "end": "4580139"
  },
  {
    "text": "got a PhD thesis out of this. It wasn't that hard, it's done\nonce and for all, and the",
    "start": "4580140",
    "end": "4585510"
  },
  {
    "text": "results are in the notes. The tables. And you can see from the\ntables that in terms of",
    "start": "4585510",
    "end": "4596750"
  },
  {
    "text": "performance versus moderate\ncomplexity, things go pretty well. Here's this four state code.",
    "start": "4596750",
    "end": "4603659"
  },
  {
    "text": "It already gets you 4 dB of\neffective coding gain. To get to 6 dB of effective\ncoding gain, you need to go up",
    "start": "4603660",
    "end": "4611610"
  },
  {
    "text": "to about 64 states. First person to do this was\nJerry Heller at Jet Propulsion",
    "start": "4611610",
    "end": "4617850"
  },
  {
    "text": "Laboratory. Again, about '68, immediately\nafter Viterbi proposed his",
    "start": "4617850",
    "end": "4623550"
  },
  {
    "text": "algorithm in '67, Heller was the\nfirst to go out and say,",
    "start": "4623550",
    "end": "4628639"
  },
  {
    "text": "well, let's see how\nthese perform. So he found a good 64 state\nrate 1/2 code, and he did",
    "start": "4628640",
    "end": "4635550"
  },
  {
    "text": "probability of error versus Eb\nover N0, and he said, wow. I get a 6 dB coding gain.",
    "start": "4635550",
    "end": "4641340"
  },
  {
    "text": "And Viterbi had no idea that his\nalgorithm would actually be useful in practice.",
    "start": "4641340",
    "end": "4647650"
  },
  {
    "text": "He was just using it\nto make a proof. And he didn't even know\nit was optimum.",
    "start": "4647650",
    "end": "4653330"
  },
  {
    "text": "But he's always given the credit\nto Heller for realizing it could be practical. And so that 64 state rate 1/2\ncode with Viterbi algorithm",
    "start": "4653330",
    "end": "4663450"
  },
  {
    "text": "decoding became very popular\nin the '70s. Heller and Viterbi and Jacobs\nwent off to form a company",
    "start": "4663450",
    "end": "4670780"
  },
  {
    "text": "called Linkabit. And for the technology of the\ntime, that seemed to be a very",
    "start": "4670780",
    "end": "4678179"
  },
  {
    "text": "appropriate solution. You see you get approximately\nthe same thing as a rate 1/3, rate 1/4.",
    "start": "4678180",
    "end": "4684219"
  },
  {
    "text": "If you go lower in rate you\ncan do marginally better. If you are after tenths of\na dB, it's worthwhile.",
    "start": "4684220",
    "end": "4689675"
  },
  {
    "text": " Later in the decade, is the best\nway to get more gain to",
    "start": "4689675",
    "end": "4697280"
  },
  {
    "text": "go to more and more complicated convolutional codes? No.",
    "start": "4697280",
    "end": "4702840"
  },
  {
    "text": "The best way is to use the\nconcatenated idea.",
    "start": "4702840",
    "end": "4707889"
  },
  {
    "text": "Once you use these maximum\nlikelihood decoders, the",
    "start": "4707890",
    "end": "4712950"
  },
  {
    "text": "Viterbi decoders, to get your\nerror rate down to 10 to the minus 3 or something, 1 in 1000,\nat that point you have",
    "start": "4712950",
    "end": "4720330"
  },
  {
    "text": "very few errors, and you can\napply then an outer code to clean up the error events\nthat do occur.",
    "start": "4720330",
    "end": "4727550"
  },
  {
    "text": "You see, you're going to get\nbursts of errors in your decoded sequence. It's a very natural idea to have\nan outer code, which is",
    "start": "4727550",
    "end": "4737449"
  },
  {
    "text": "based on gf of 256,\nsay, 8 bit bytes.",
    "start": "4737450",
    "end": "4742740"
  },
  {
    "text": "And so a Reed-Solomon code comes\nalong and cleans up the",
    "start": "4742740",
    "end": "4747975"
  },
  {
    "text": "errors that do occur, and drives\nthe error probability down to 10 to the minus 12, to\nwhatever you like it, with",
    "start": "4747975",
    "end": "4753580"
  },
  {
    "text": "very little redundancy, very\nlittle additional cost. So that became the standard\napproach for space",
    "start": "4753580",
    "end": "4761930"
  },
  {
    "text": "communications in the '70s\nand indeed '80s.",
    "start": "4761930",
    "end": "4767430"
  },
  {
    "text": "I've already mentioned that\naround '90, they went up to this 2 to the fourteenth\nstate Viterbi decoder.",
    "start": "4767430",
    "end": "4775820"
  },
  {
    "text": "They went to much more powerful outer codes, much cleverer. And they were able to get to\nwithin about 2 or 3 dB of the",
    "start": "4775820",
    "end": "4783670"
  },
  {
    "text": "Shannon limit. And that was the\nstate-of-the-art on the eve of the discovery of turbo codes,\nwhich is where we're going in",
    "start": "4783670",
    "end": "4790520"
  },
  {
    "text": "all of this. So from a practical point\nof view, in the moderate complexity regime, simple\nconvolutional codes with",
    "start": "4790520",
    "end": "4798659"
  },
  {
    "text": "moderate complexity Viterbi\ndecoding are the best still that anybody knows how to do.",
    "start": "4798660",
    "end": "4804790"
  },
  {
    "text": "They have all these\nsystem advantages. They work with nice synchronous\nstreams of",
    "start": "4804790",
    "end": "4809820"
  },
  {
    "text": "traffic, which is what you want\nfor data transmission. They use soft decisions. They use any kind\nof reliability",
    "start": "4809820",
    "end": "4815750"
  },
  {
    "text": "information you have. They're not limited\nby hard decisions. They're not limited by bounded\nsystems as the algebraic",
    "start": "4815750",
    "end": "4822880"
  },
  {
    "text": "schemes are. So it just proved to be a better\nway to go on channels",
    "start": "4822880",
    "end": "4828470"
  },
  {
    "text": "like the additive white Gaussian\nnoise channel. OK. So we didn't get into\nchapter 10.",
    "start": "4828470",
    "end": "4833810"
  },
  {
    "text": "We'll start that next time. ",
    "start": "4833810",
    "end": "4857002"
  }
]