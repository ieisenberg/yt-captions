[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "7904"
  },
  {
    "text": " JASON KU: Good\nmorning, everybody.",
    "start": "7904",
    "end": "16580"
  },
  {
    "text": "How's everybody doing? Nice long weekend\nwe just came from-- I'm doing well.",
    "start": "16580",
    "end": "21820"
  },
  {
    "text": "I'm actually getting\nover a little cold. Aw-- yeah, unfortunately.",
    "start": "21820",
    "end": "27220"
  },
  {
    "text": "But after this, I don't have\nanything else this week, so that's good.",
    "start": "27220",
    "end": "32470"
  },
  {
    "text": "OK, so last time, last\nweek, we talked about how--",
    "start": "32470",
    "end": "40390"
  },
  {
    "text": "we looked at the search\nproblem that we talked about",
    "start": "40390",
    "end": "45550"
  },
  {
    "text": "earlier that week\nand showed that, in a certain model\nof computation,",
    "start": "45550",
    "end": "51200"
  },
  {
    "text": "where I could only compare\ntwo objects that I'm",
    "start": "51200",
    "end": "57080"
  },
  {
    "text": "storing in my-- that I'm storing and\nget some constant number",
    "start": "57080",
    "end": "62480"
  },
  {
    "text": "of outputs on what I could-- how I could identify\nthese things, like equal, or less\nthan, or something",
    "start": "62480",
    "end": "68180"
  },
  {
    "text": "like that, then we\ndrew a decision tree and we got this bound\nthat, if I had n outputs,",
    "start": "68180",
    "end": "77430"
  },
  {
    "text": "I would require my decision tree\nto be at least log n height. And so in this model, I\ncan't find the things faster",
    "start": "77430",
    "end": "87000"
  },
  {
    "text": "than log n time. But luckily, we are in a\nmodel of computation which",
    "start": "87000",
    "end": "93619"
  },
  {
    "text": "has a stronger operation-- namely, random accessing.",
    "start": "93620",
    "end": "98680"
  },
  {
    "text": "And if we stored the things\nthat we're looking for, we have unique keys, and\nthose keys are integers.",
    "start": "98680",
    "end": "107710"
  },
  {
    "text": "Then, if I have an\nitem with key K, if I store it at\nindex K in my array,",
    "start": "107710",
    "end": "117539"
  },
  {
    "text": "then I can find it and\nmanipulate it in constant time. That's pretty cool.",
    "start": "117540",
    "end": "124667"
  },
  {
    "text": "That's what we called\na direct access array. A direct access array--\nreally not different than a regular array,\nexcept how are you using it",
    "start": "124667",
    "end": "131000"
  },
  {
    "text": "when we were talking\nabout sequences is we are giving extrinsic\nsemantics to the slots where",
    "start": "131000",
    "end": "139910"
  },
  {
    "text": "we are storing these things. Basically, I could put\nany item in any slot.",
    "start": "139910",
    "end": "146120"
  },
  {
    "text": "Where it was in my\narray had nothing to do with what\nthose things were. Here we are imposing intrinsic\nsemantics on my array",
    "start": "146120",
    "end": "155900"
  },
  {
    "text": "that, if I have an item with\nkey K, it must be at index K.",
    "start": "155900",
    "end": "162980"
  },
  {
    "text": "That's the thing that we're\ntaking advantage of here. And then we can use this nice,\npowerful linear branching",
    "start": "162980",
    "end": "170540"
  },
  {
    "text": "random access operation to find\nthat thing in constant time, because that's our\nmodel of computation.",
    "start": "170540",
    "end": "175850"
  },
  {
    "text": "OK, then what was the problem\nwith this direct access array?",
    "start": "175850",
    "end": "181160"
  },
  {
    "text": "Anyone shout it out. ",
    "start": "181160",
    "end": "186180"
  },
  {
    "text": "Space-- right. So we had to instantiate\na direct access array that was the size\nof the space of our keys.",
    "start": "186180",
    "end": "195180"
  },
  {
    "text": "In general, my\nindex location is-- could go from 0 to\nsome positive number.",
    "start": "195180",
    "end": "201519"
  },
  {
    "text": "If I a very large positive\nnumbers, if I was sorting-- if I was searching\namong your MIT IDs,",
    "start": "201520",
    "end": "207420"
  },
  {
    "text": "I'd have to have a\ndirect access array that was that spanned that space of\npossible keys you could have.",
    "start": "207420",
    "end": "213450"
  },
  {
    "text": "And that could be\nmuch larger than n. And so the rest of the\ntime we talked about how",
    "start": "213450",
    "end": "219510"
  },
  {
    "text": "to fix that space problem. We can reduce the space by\ntaking that larger key space",
    "start": "219510",
    "end": "226500"
  },
  {
    "text": "from 0 to u, which\ncould be very large, and map it down\nto a small space.",
    "start": "226500",
    "end": "231689"
  },
  {
    "text": "Now, in general, if I give you\na fixed hash function there,",
    "start": "231690",
    "end": "236740"
  },
  {
    "text": "that's not going to be\ngood in-- for all inputs. If your inputs are very well\ndistributed over the key space,",
    "start": "236740",
    "end": "244160"
  },
  {
    "text": "then it is good, but\nin general, there would be hash functions with\nsome inputs that will be bad.",
    "start": "244160",
    "end": "252680"
  },
  {
    "text": "That's what we argued. And so for the rest\nof the time there, we talked about hash families,\nchoosing a hash function",
    "start": "252680",
    "end": "260390"
  },
  {
    "text": "randomly from among a large\nset of hash functions, which had a property that, if\nI chose this thing randomly",
    "start": "260390",
    "end": "268849"
  },
  {
    "text": "and you, generating your\ninput, didn't know which random numbers I was picking, the\nexpectation over my random",
    "start": "268850",
    "end": "278170"
  },
  {
    "text": "choice-- me-- I'm the one running\nthe algorithm, not you giving me the input--",
    "start": "278170",
    "end": "283800"
  },
  {
    "text": "that random choice--\nmy algorithm actually behaves really\nwell in expectation. In particular, I\ngot constant time",
    "start": "283800",
    "end": "290759"
  },
  {
    "text": "for finding, inserting,\nand deleting into this data structure, in expectation.",
    "start": "290760",
    "end": "297390"
  },
  {
    "text": "We did a little proof of-- that the chain links where we\nstored collisions in our hash",
    "start": "297390",
    "end": "304500"
  },
  {
    "text": "function-- in our hash table-- sorry-- those\nwouldn't be very long,",
    "start": "304500",
    "end": "310750"
  },
  {
    "text": "and so if they were\nconstant, then I don't have to search more than\na constant number of things",
    "start": "310750",
    "end": "316560"
  },
  {
    "text": "when I go to an-- a\nhashed index location. Does everyone remember what\nwe talked about last week?",
    "start": "316560",
    "end": "323069"
  },
  {
    "text": " I didn't show you\nthis chart at the end,",
    "start": "323070",
    "end": "329120"
  },
  {
    "text": "but I'm showing it to you now. Essentially, what we had was we\nhave a bunch of different ways",
    "start": "329120",
    "end": "334430"
  },
  {
    "text": "to deal with this set interface. And last week, we talked\nabout the sorted array,",
    "start": "334430",
    "end": "340849"
  },
  {
    "text": "and then we talked about this\ndirect access array and this hash table, which do better for\nthese dictionary-- the find,",
    "start": "340850",
    "end": "352300"
  },
  {
    "text": "and insert, and\ndelete operations-- or at least better\nin an expected sense.",
    "start": "352300",
    "end": "358750"
  },
  {
    "text": "What's the worst case\nperformance of a hash table? ",
    "start": "358750",
    "end": "366289"
  },
  {
    "text": "If I have to look up\nsomething in a hash table, and I happen to choose a bad\nhash table-- hash function,",
    "start": "366290",
    "end": "372199"
  },
  {
    "text": "what's the worst case here? What? n, right? It's worse than a sorted\narray, because potentially, I",
    "start": "372200",
    "end": "380300"
  },
  {
    "text": "hashed everything\nthat I was storing to the same index\nin my hash table, and to be able to\ndistinguish between them,",
    "start": "380300",
    "end": "387379"
  },
  {
    "text": "I can't do anything more\nthan a linear search. I could store another set's\ndata structure as my chain",
    "start": "387380",
    "end": "395810"
  },
  {
    "text": "and do better that way. That's actually\nhow Java does it. They store a data\nstructure we're",
    "start": "395810",
    "end": "402139"
  },
  {
    "text": "going to be talking about\nnext week as the chains so that they can get,\nworst case, log n.",
    "start": "402140",
    "end": "408170"
  },
  {
    "text": "But in general, that\nhash table is only good",
    "start": "408170",
    "end": "414138"
  },
  {
    "text": "if we're allowing-- OK, I want this to be expected\ngood, but in the worst case, if I really need that\noperation to be worst case--",
    "start": "414138",
    "end": "421080"
  },
  {
    "text": "I really can't afford\nlinear time ever for an operation of that kind-- then I don't want\nto use a hash table.",
    "start": "421080",
    "end": "427050"
  },
  {
    "text": "And so on your p set 2,\neverything we ask you for is worst case, so\nprobably, you don't",
    "start": "427050",
    "end": "432570"
  },
  {
    "text": "want to be using hash tables. OK? Yes? AUDIENCE: What does\nthe subscript e mean?",
    "start": "432570",
    "end": "438310"
  },
  {
    "text": "JASON KU: What does\nthe subscript e mean? That's great. In this chart, I put a subscript\non this is an expected runtime,",
    "start": "438310",
    "end": "448840"
  },
  {
    "text": "or an A meaning this is\nan amortized runtime. At the end, we talked about\nhow, if we had too many things",
    "start": "448840",
    "end": "455290"
  },
  {
    "text": "in our hash table, then, as long\nas we didn't do it too often--",
    "start": "455290",
    "end": "460870"
  },
  {
    "text": "this is a little\nhand wavey argument, but the same kinds of ideas\nas the dynamic array-- if, whenever we got a linear--",
    "start": "460870",
    "end": "468720"
  },
  {
    "text": "we are more than a linear factor\naway from where we are trying--",
    "start": "468720",
    "end": "473970"
  },
  {
    "text": "basically, the fill factor\nwe were trying to be, then we could just completely\nrebuild the hash table with the new hash\nfunction randomly",
    "start": "473970",
    "end": "480780"
  },
  {
    "text": "chosen from our hash\ntable with a new size, and we could get\namortized bounds. And so that's what Python--",
    "start": "480780",
    "end": "487220"
  },
  {
    "text": "how Python implements\ndictionaries, or sets, or even objects when it's trying to\nmap keys to different things.",
    "start": "487220",
    "end": "497500"
  },
  {
    "text": "So that's hash tables. That's great. The key thing here is, well,\nactually, if your range of keys",
    "start": "497500",
    "end": "505350"
  },
  {
    "text": "is small, or if\nyou as a programmer have the ability to choose\nthe keys that you identify",
    "start": "505350",
    "end": "511919"
  },
  {
    "text": "your objects with,\nyou can actually choose that range to\nbe small, to be linear, to be small with\nrespect to your items.",
    "start": "511920",
    "end": "519107"
  },
  {
    "text": "And you don't need a hash table. You can just use a\ndirect access array, because if you know your key\nspace is small, that's great.",
    "start": "519107",
    "end": "528579"
  },
  {
    "text": "So a lot of C\nprogrammers probably would like to do something\nlike that, because they don't have access to-- maybe C++ programmers would\nhave access to their hash table.",
    "start": "528580",
    "end": "538759"
  },
  {
    "text": "Any questions on this\nstuff before we move on? Yeah? AUDIENCE: So why is [INAUDIBLE]?",
    "start": "538760",
    "end": "547240"
  },
  {
    "text": "JASON KU: Why is it expected? When I'm building,\nI could insert--",
    "start": "547240",
    "end": "552610"
  },
  {
    "text": "I'm inserting these things from\nx 1 by 1 into my hash table. Each of those\ninsert operations--",
    "start": "552610",
    "end": "559839"
  },
  {
    "text": "I'm looking up to\nsee whether that-- an item with that key already\nexists in my hash table.",
    "start": "559840",
    "end": "565459"
  },
  {
    "text": "And so I have to look down\nthe chain to see where it is. However, if I happen to\nknow that all of my keys",
    "start": "565460",
    "end": "573010"
  },
  {
    "text": "are unique in my input, all\nthe items I'm trying to store are unique, then I don't\nhave to do that check",
    "start": "573010",
    "end": "578380"
  },
  {
    "text": "and I can get worst\ncase linear time. Does that make sense? All right. It's a subtlety, but\nthat's a great question.",
    "start": "578380",
    "end": "585360"
  },
  {
    "text": "OK, so today, instead of\ntalking about searching, we're talking about sorting.",
    "start": "585360",
    "end": "592030"
  },
  {
    "text": "Last week, we saw a\nfew ways to do sort.",
    "start": "592030",
    "end": "597360"
  },
  {
    "text": "Some of them were quadratic--\ninsertion sort and selection sort-- and then we had one\nthat was n log n. And this thing, n log\nn, seemed pretty good,",
    "start": "597360",
    "end": "606330"
  },
  {
    "text": "but can I do better?  Can I do better?",
    "start": "606330",
    "end": "612788"
  },
  {
    "text": "Well, what we're going to show\nat the beginning of this class is, in this\ncomparison model, no.",
    "start": "612788",
    "end": "619640"
  },
  {
    "text": "n log n is optimal. And we're going to go\nthrough the exact same line of reasoning that\nwe had last week.",
    "start": "619640",
    "end": "626430"
  },
  {
    "text": "So in the comparison\nmodel, what did we",
    "start": "626430",
    "end": "635339"
  },
  {
    "text": "use when we were trying\nto make this argument that any comparison\nmodel algorithm was going",
    "start": "635340",
    "end": "645830"
  },
  {
    "text": "to take at least log n time? What we did was\nwe said, OK, I can think of any model in\nthe comparison model--",
    "start": "645830",
    "end": "654080"
  },
  {
    "text": "any algorithm in the comparison\nmodel as kind of this-- some comparisons happen.",
    "start": "654080",
    "end": "661250"
  },
  {
    "text": "They branch in a\nbinary sense, but you could have it generalized to\nany constant branching factor.",
    "start": "661250",
    "end": "667260"
  },
  {
    "text": "But for our purposes,\nbinary's fine. And what we said was that\nthere were at least n outputs--",
    "start": "667260",
    "end": "676040"
  },
  {
    "text": "really n plus 1, but-- at least order n outputs. And we showed that--",
    "start": "676040",
    "end": "682520"
  },
  {
    "text": "or we argued to you that\nthe height of this tree had to be at least log n--",
    "start": "682520",
    "end": "689210"
  },
  {
    "text": " log the number of leaves. It had to be at least\nlog the number of leaves.",
    "start": "689210",
    "end": "696320"
  },
  {
    "text": "That was the height\nof the decision tree. And if this decision tree\nrepresented a search algorithm,",
    "start": "696320",
    "end": "704120"
  },
  {
    "text": "I had to walk down and\nperform these comparisons in order, reach a leaf where\nI would output something.",
    "start": "704120",
    "end": "713930"
  },
  {
    "text": "If the minimum height of any\nbinary tree on a linear number",
    "start": "713930",
    "end": "720050"
  },
  {
    "text": "of leaves is log n,\nthen any algorithm in the comparison model\nalso has to take log n time,",
    "start": "720050",
    "end": "730570"
  },
  {
    "text": "because it has to do that many\ncomparisons to differentiate between all possible outputs.",
    "start": "730570",
    "end": "736150"
  },
  {
    "text": "Does that make sense? All right. So in the sort problem, how\nmany possible outputs are there?",
    "start": "736150",
    "end": "748070"
  },
  {
    "text": " What is the output of\na sorting algorithm?",
    "start": "748070",
    "end": "753404"
  },
  {
    "start": "753405",
    "end": "758740"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JASON KU: What? What's up? A list-- in particular,\ngiven my input--",
    "start": "758740",
    "end": "768080"
  },
  {
    "text": "some set of items\nA that has size n--",
    "start": "768080",
    "end": "776330"
  },
  {
    "text": "what I'm going to give you is\nsome permutation of that list. So for each index, say, I\ncould tell you where it goes.",
    "start": "776330",
    "end": "786310"
  },
  {
    "text": " Another way I could say is,\nwhere does the first item",
    "start": "786310",
    "end": "793060"
  },
  {
    "text": "go to, where does\nthe second item go to, where does the third\nitem go to-- blah, blah,",
    "start": "793060",
    "end": "798690"
  },
  {
    "text": "blah-- like that. So how many different choices\nof a permutation are there?",
    "start": "798690",
    "end": "805209"
  },
  {
    "text": "Well, how many choices do I have\nfor the first thing of where it could be in the\nfinal sorted array?",
    "start": "805210",
    "end": "811740"
  },
  {
    "text": "It could be in any of\nthe places, so it's n.",
    "start": "811740",
    "end": "816790"
  },
  {
    "text": "How about this one,\nthe second one? Well, it can't go to\nwhere this one went, right but it can\ngo anywhere else.",
    "start": "816790",
    "end": "823430"
  },
  {
    "text": "So it's n minus 1. And since these are\nindependent choices I'm making, if I multiply them\nall together, I",
    "start": "823430",
    "end": "829240"
  },
  {
    "text": "get 9 factorial\npermutations that are the number of\npossible outputs that I have to my\nsorting algorithm.",
    "start": "829240",
    "end": "835780"
  },
  {
    "text": "So for me, to have an output\nto my sorting algorithm be correct, I need at\nleast n factorial leaves.",
    "start": "835780",
    "end": "841990"
  },
  {
    "text": "Does that make sense? OK. ",
    "start": "841990",
    "end": "847260"
  },
  {
    "text": "The nice thing about\ndoing this last week is this is really just\nthe number of leaves",
    "start": "847260",
    "end": "854010"
  },
  {
    "text": "and this is really\nthe number of leaves. So what's the number of\nleaves is theta n factorial.",
    "start": "854010",
    "end": "861089"
  },
  {
    "text": "Here it's actually n\nfactorial, but I'm just going to put it there. And here we get an n factorial.",
    "start": "861090",
    "end": "867690"
  },
  {
    "start": "867690",
    "end": "873460"
  },
  {
    "text": "I see. So it's at least\nomega n factorial.",
    "start": "873460",
    "end": "879640"
  },
  {
    "text": "Does that make you happier? Theta here-- thank you-- has to be at least.",
    "start": "879640",
    "end": "887040"
  },
  {
    "text": "So this was right.  OK, so at least this many--",
    "start": "887040",
    "end": "893820"
  },
  {
    "text": "there are algorithms\nthat, if it got-- it could take two\ndifferent routes",
    "start": "893820",
    "end": "899100"
  },
  {
    "text": "to get to the same output. So this is a lower bound\non the number of leaves. OK?",
    "start": "899100",
    "end": "905069"
  },
  {
    "text": "So what this\nargument is saying is that, if I just replace\nthe number of leaves n here",
    "start": "905070",
    "end": "910110"
  },
  {
    "text": "with n factorial, I get\na similar comparison sort lower bound now.",
    "start": "910110",
    "end": "915660"
  },
  {
    "text": "So what is log of n factorial? ",
    "start": "915660",
    "end": "920980"
  },
  {
    "text": "This is familiar\nfrom p set 1 maybe. So one thing I could do is I\ncould put in Sterling formula,",
    "start": "920980",
    "end": "928820"
  },
  {
    "text": "right?  And that'll give me something\nof the form n log n.",
    "start": "928820",
    "end": "935370"
  },
  {
    "text": "But what's another way I\ncould lower bound n factorial?",
    "start": "935370",
    "end": "941180"
  },
  {
    "text": "Well, I have a bunch\nof things here.  That's n factorial.",
    "start": "941180",
    "end": "948280"
  },
  {
    "text": "Half of these things-- these half, n/2 things--",
    "start": "948280",
    "end": "953980"
  },
  {
    "text": "are bigger than or equal to n/2. That make sense?",
    "start": "953980",
    "end": "960600"
  },
  {
    "text": "So I can certainly lower bound\nthis thing by n/2 to the n/2.",
    "start": "960600",
    "end": "968930"
  },
  {
    "text": "That's a little easier\nthing to take a log of. If you take a log of that,\nthat's asymptotically n log n.",
    "start": "968930",
    "end": "977250"
  },
  {
    "text": "So what we're getting here\nis any sorting algorithm here takes at least n\nlog n comparisons,",
    "start": "977250",
    "end": "984269"
  },
  {
    "text": "and so a merge sort's\nthe best we can do.  That make sense to everybody?",
    "start": "984270",
    "end": "990480"
  },
  {
    "text": "We're just piggybacking on the\nanalysis we had about decision trees, connecting leaves\nwith the minimum height",
    "start": "990480",
    "end": "998800"
  },
  {
    "text": "of any binary tree on\nthat number of leaves, and just replacing\nn with n factorial--",
    "start": "998800",
    "end": "1006090"
  },
  {
    "text": "nothing super interesting here. Yeah? AUDIENCE: [INAUDIBLE]\nthe n over 2.",
    "start": "1006090",
    "end": "1011450"
  },
  {
    "text": "JASON KU: Yeah, sure. You can just plug\nin Sterling formula, but I did this, so I\nmight as well clarify.",
    "start": "1011450",
    "end": "1018950"
  },
  {
    "text": "There are n terms\nhere in the product. Half of them are at least n/2.",
    "start": "1018950",
    "end": "1026214"
  },
  {
    "text": "Does that make sense?  I can lower bound this\nproduct by something",
    "start": "1026214",
    "end": "1032300"
  },
  {
    "text": "smaller than half of the terms-- a product of that,\nand that'll be fine.",
    "start": "1032300",
    "end": "1038119"
  },
  {
    "text": "So I'm taking n/2 of them and\nI'm multiplying n/2 altogether,",
    "start": "1038119",
    "end": "1043819"
  },
  {
    "text": "n/2 times. Does that make sense?  It's just providing\na lower bound.",
    "start": "1043819",
    "end": "1051250"
  },
  {
    "text": "I just need something\nthat's smaller than all of these terms. And multiply them all\ntogether, and that'll",
    "start": "1051250",
    "end": "1056260"
  },
  {
    "text": "give me a lower bound. OK, so we can't do better than\nn log n in the comparison model,",
    "start": "1056260",
    "end": "1063210"
  },
  {
    "text": "but what we did\nlast week was use random access and a direct\naccess array to do better.",
    "start": "1063210",
    "end": "1069500"
  },
  {
    "text": "OK? Can anyone think of how to\nuse that idea to sort faster?",
    "start": "1069500",
    "end": "1077170"
  },
  {
    "text": "And I'm going to give\nyou a caveat here. I'm going to let you assume that\nthe keys of the things you're",
    "start": "1077170",
    "end": "1084399"
  },
  {
    "text": "trying to sort out are unique.  And say they're in a\nbound-- in a small range.",
    "start": "1084400",
    "end": "1093760"
  },
  {
    "text": "So how could I use a direct\naccess array to sort faster?",
    "start": "1093760",
    "end": "1099610"
  },
  {
    "text": "Any ideas? Yeah? AUDIENCE: Could\nyou just literally insert [INAUDIBLE] into\na direct access array?",
    "start": "1099610",
    "end": "1106267"
  },
  {
    "text": "JASON KU: Uh-huh. AUDIENCE: And then you look at\nthat array and how to sort it.",
    "start": "1106267",
    "end": "1111410"
  },
  {
    "text": "JASON KU: OK. So what your colleague is\nsaying is exactly correct. It's something that I like to\ncall direct access array sort.",
    "start": "1111410",
    "end": "1117620"
  },
  {
    "text": "We won't really call it that,\nbecause there's something more general that we'll talk\nabout in just a second.",
    "start": "1117620",
    "end": "1125190"
  },
  {
    "text": "But what your colleague\nwas saying is, instantiate a big\ndirect access array--",
    "start": "1125190",
    "end": "1130610"
  },
  {
    "text": "direct access array sort. ",
    "start": "1130610",
    "end": "1136570"
  },
  {
    "text": "I'm instantiating\nthis big direct access array of the space\nof my keys, and what",
    "start": "1136570",
    "end": "1143910"
  },
  {
    "text": "your colleague was\nsaying was I take each one of the items in my-- the things that\nI'm trying to sort,",
    "start": "1143910",
    "end": "1150270"
  },
  {
    "text": "I look at each\none of their keys, and I stick it in\nthe direct accessory",
    "start": "1150270",
    "end": "1156240"
  },
  {
    "text": "exactly where it needs\nto go, in constant time. That's great.",
    "start": "1156240",
    "end": "1162150"
  },
  {
    "text": "Now, I gave you this caveat\nthat all the keys were unique, so I don't have to deal\nwith collisions here.",
    "start": "1162150",
    "end": "1167580"
  },
  {
    "text": "But then, after I'm done with\nthis, all of these things are now in sorted\norder, and what I can do",
    "start": "1167580",
    "end": "1173040"
  },
  {
    "text": "is I can just walk\ndown this list. A lot of these cells\nare empty, potentially.",
    "start": "1173040",
    "end": "1179550"
  },
  {
    "text": " Some of the keys might\nnot be there, but what",
    "start": "1179550",
    "end": "1184890"
  },
  {
    "text": "I can do is just\nwalk down this list, pick off every item that does\nexist, stick them in an array--",
    "start": "1184890",
    "end": "1191950"
  },
  {
    "text": "I'm done.  Stick a key into here and then--",
    "start": "1191950",
    "end": "1200400"
  },
  {
    "text": "all right. Make direct access array.",
    "start": "1200400",
    "end": "1208750"
  },
  {
    "text": "Store items-- item\nx in index x.key.",
    "start": "1208750",
    "end": "1220630"
  },
  {
    "start": "1220630",
    "end": "1225700"
  },
  {
    "text": "Walk down direct access array,\nand return items seen in order.",
    "start": "1225700",
    "end": "1243000"
  },
  {
    "text": "Does that make\nsense to everybody? All right, how long\ndoes this step take? ",
    "start": "1243000",
    "end": "1253910"
  },
  {
    "text": "Building a direct\naccess array order u-- OK, so this is order u--",
    "start": "1253910",
    "end": "1261970"
  },
  {
    "text": "how long does this take?  How many items you\nhave to insert?",
    "start": "1261970",
    "end": "1268160"
  },
  {
    "text": "Order n, or just n-- and how long does it take to\ninsert each one of these things",
    "start": "1268160",
    "end": "1274210"
  },
  {
    "text": "into my direct access array? Worst case constant time--",
    "start": "1274210",
    "end": "1280850"
  },
  {
    "text": "so this is n times worst\ncase constant time--",
    "start": "1280850",
    "end": "1286220"
  },
  {
    "text": "great. How long does this\nlast one take? ",
    "start": "1286220",
    "end": "1295030"
  },
  {
    "text": "Anyone? O of u also-- right,\nbecause I'm walking down the entire length of u.",
    "start": "1295030",
    "end": "1300149"
  },
  {
    "text": " So this algorithm takes,\nin total, n plus u time.",
    "start": "1300150",
    "end": "1310840"
  },
  {
    "text": "This is great. u is bigger than n, because\nwe assumed distinct keys.",
    "start": "1310840",
    "end": "1316375"
  },
  {
    "text": " But if u is on the\norder of n, then we now",
    "start": "1316375",
    "end": "1323150"
  },
  {
    "text": "have linear time\nsorting algorithm. Yes? What's up?",
    "start": "1323150",
    "end": "1328306"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] JASON KU: I'm sorry. You have to speak up. AUDIENCE: How do you attach\nkeys to the [INAUDIBLE]??",
    "start": "1328306",
    "end": "1336670"
  },
  {
    "text": "JASON KU: How do I attach\nkeys to my inputs in my--",
    "start": "1336670",
    "end": "1341760"
  },
  {
    "text": "for a set data structure that\nwe've been talking about, all of my items have keys.",
    "start": "1341760",
    "end": "1347350"
  },
  {
    "text": "That's just something that\nwe impose on our input. AUDIENCE: [INAUDIBLE]",
    "start": "1347350",
    "end": "1354310"
  },
  {
    "text": "JASON KU: Each of the\nkeys is-- in this case, it has to be a number. ",
    "start": "1354310",
    "end": "1360379"
  },
  {
    "text": "That's a nice point. We do this to talk about\nsorting items generally so",
    "start": "1360380",
    "end": "1368260"
  },
  {
    "text": "that we don't have to deal with\npotentially if these keys have values associated with--\nor other stuff associated--",
    "start": "1368260",
    "end": "1373360"
  },
  {
    "text": "put them on that item, and\nthey'll still be there. But in general, if you just\nwanted to sort integers,",
    "start": "1373360",
    "end": "1379090"
  },
  {
    "text": "you could say that .key is-- points back to\nthe object itself,",
    "start": "1379090",
    "end": "1384544"
  },
  {
    "text": "if you want to just\nsort some integers. Does that make sense? It's a good question, though. OK, so that gives us a\nlinear time algorithm",
    "start": "1384545",
    "end": "1392880"
  },
  {
    "text": "when u is small, and\nunder this condition that I have unique keys\nwhen I want to sort.",
    "start": "1392880",
    "end": "1400050"
  },
  {
    "text": "Those are fairly\nrestrictive, so we might want to generalize\nthis a little bit. OK?",
    "start": "1400050",
    "end": "1406160"
  },
  {
    "text": "So that's direct\naccess array sort. What if we had a set of keys\nthat was a little larger?",
    "start": "1406160",
    "end": "1414410"
  },
  {
    "start": "1414410",
    "end": "1420480"
  },
  {
    "text": "So let's say u is theta n\nimplies linear time sorting.",
    "start": "1420480",
    "end": "1433250"
  },
  {
    "text": "That's great. So now, what happens if we\nexpand that range a little bit?",
    "start": "1433250",
    "end": "1439250"
  },
  {
    "text": "Say u is less than or\nequal to n squared-- maybe just less than. ",
    "start": "1439250",
    "end": "1446470"
  },
  {
    "text": "OK, this is a bigger range\nAnd if we instantiated",
    "start": "1446470",
    "end": "1454299"
  },
  {
    "text": "a direct access array\nof quadratics size, we'd have a quadratic\ntime algorithm.",
    "start": "1454300",
    "end": "1460210"
  },
  {
    "text": "This is not helpful.  Anyone have a way in which\nwe could sort integers that",
    "start": "1460210",
    "end": "1470740"
  },
  {
    "text": "are between 0 and n squared? ",
    "start": "1470740",
    "end": "1476070"
  },
  {
    "text": "Maybe using the stuff\nthat we had above-- ",
    "start": "1476070",
    "end": "1482860"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE]\nsort by the first n, kind of like the first digit.",
    "start": "1482860",
    "end": "1489789"
  },
  {
    "text": "JASON KU: Your colleague\nis saying exactly the thing that I'm looking\nfor, which is great,",
    "start": "1489790",
    "end": "1494980"
  },
  {
    "text": "which is maybe we could break\nthis larger number into two",
    "start": "1494980",
    "end": "1502970"
  },
  {
    "text": "smaller numbers. Any integer that is between 0\nn squared can be written as--",
    "start": "1502970",
    "end": "1512809"
  },
  {
    "text": " key can be some a and b, where\na is essentially the higher n",
    "start": "1512810",
    "end": "1526580"
  },
  {
    "text": "and b is the lower n. This is kind of weird. OK, so what do I\nactually mean by this?",
    "start": "1526580",
    "end": "1533340"
  },
  {
    "text": "I mean that let's let a be\nK, when I divide it by n--",
    "start": "1533340",
    "end": "1543350"
  },
  {
    "text": "integer, the floor-- key\ninteger to divide by n.",
    "start": "1543350",
    "end": "1551299"
  },
  {
    "text": "And b equals K mod n.",
    "start": "1551300",
    "end": "1557000"
  },
  {
    "text": "So this is a number that's\nless than n and this is a number that's less than n.",
    "start": "1557000",
    "end": "1563120"
  },
  {
    "text": "Does that make sense? And actually, I can\nrecover K at any time",
    "start": "1563120",
    "end": "1568429"
  },
  {
    "text": "by saying K equals an plus b. I've essentially decomposed\nthis into a base n",
    "start": "1568430",
    "end": "1577710"
  },
  {
    "text": "representation of this number. And I have two digits\nin that number.",
    "start": "1577710",
    "end": "1583690"
  },
  {
    "text": "This is the n-th-- n digit, and this\nis the ones digit.",
    "start": "1583690",
    "end": "1589560"
  },
  {
    "text": "Does that make sense? All right, so now let's say\nI have this list of numbers--",
    "start": "1589560",
    "end": "1596034"
  },
  {
    "start": "1596035",
    "end": "1603980"
  },
  {
    "text": "17, 3, 24, 22, 12.",
    "start": "1603980",
    "end": "1609390"
  },
  {
    "start": "1609390",
    "end": "1614660"
  },
  {
    "text": "Here I have five numbers. So what's n in this case?",
    "start": "1614660",
    "end": "1620290"
  },
  {
    "text": "5-- OK, not so interesting. n is 5 here.",
    "start": "1620290",
    "end": "1626320"
  },
  {
    "text": "And I'm going to represent\nthis as five pairs of numbers",
    "start": "1626320",
    "end": "1631870"
  },
  {
    "text": "that are each within\nthe bounds of 0 to 4. Does that makes sense?",
    "start": "1631870",
    "end": "1637310"
  },
  {
    "text": "So what is my a, b\nrepresentation of 17? ",
    "start": "1637310",
    "end": "1644320"
  },
  {
    "text": "3, 2-- OK.",
    "start": "1644320",
    "end": "1650380"
  },
  {
    "text": "Yeah, so there are\n3 times 5 plus 2.",
    "start": "1650380",
    "end": "1655400"
  },
  {
    "text": "That's good. That's 17. Yeah? I think your colleague\ndid that, right?",
    "start": "1655400",
    "end": "1661600"
  },
  {
    "text": "I have all of\nthese written down, so I'm just going\nto write it out. ",
    "start": "1661600",
    "end": "1673809"
  },
  {
    "text": "And I hope I did it correctly. OK-- 3, 2; 0, 3;\n4, 4; 4, 2; 2, 2--",
    "start": "1673810",
    "end": "1680889"
  },
  {
    "text": "OK. So now I have a bunch\nof things that I want to sort based on\nthis function that I have.",
    "start": "1680890",
    "end": "1692480"
  },
  {
    "text": "These are no longer just\nintegers that I need to sort. I need to sort by this\ntransformation of this thing",
    "start": "1692480",
    "end": "1699470"
  },
  {
    "text": "into a number. Does that make sense? So anyone have any\nideas on how we could--",
    "start": "1699470",
    "end": "1707490"
  },
  {
    "text": "by the way, these are both\nconstant time operations on your computer, as long\nas it's an integer division",
    "start": "1707490",
    "end": "1716370"
  },
  {
    "text": "and this is mod. Python also has a\nnice thing, I think, in its standard operations,\nwhich is divmod of K, n.",
    "start": "1716370",
    "end": "1731100"
  },
  {
    "text": "Is that right? Yeah. So if you want to\nuse that, you can. ",
    "start": "1731100",
    "end": "1738179"
  },
  {
    "text": "OK, so how do we\nsort these tuples? These are tuples, right? You guys are, I'm sure, very\nfamiliar with tuples by now.",
    "start": "1738180",
    "end": "1746250"
  },
  {
    "text": " How do I sort these tuples? ",
    "start": "1746250",
    "end": "1754679"
  },
  {
    "text": "What's the most important\ndigit of this thing? If I had to sort\none of the digits",
    "start": "1754680",
    "end": "1761120"
  },
  {
    "text": "and get something\nthat's close to sorted, what's more important-- the\n1's digit or the n's digit?",
    "start": "1761120",
    "end": "1768800"
  },
  {
    "text": "OK, we have discrepancy here. Who says 1? Who says n?",
    "start": "1768800",
    "end": "1775380"
  },
  {
    "text": "Someone who said n tell me why. ",
    "start": "1775380",
    "end": "1781620"
  },
  {
    "text": "Oh, you all think that\nway for no reason. AUDIENCE: [INAUDIBLE]",
    "start": "1781620",
    "end": "1787559"
  },
  {
    "text": "JASON KU: Yeah. Sorry. This is a little confusing. This is the 1's digit. This is the n's digit.",
    "start": "1787560",
    "end": "1793110"
  },
  {
    "text": "This is the n's digit. This is the 1's digit\nin how I'm writing this. Does that makes sense?",
    "start": "1793110",
    "end": "1798710"
  },
  {
    "text": "Yeah? AUDIENCE: [INAUDIBLE] have\na different ones digit inside of it.",
    "start": "1798710",
    "end": "1804700"
  },
  {
    "text": "So you could have\n[INAUDIBLE] but that only tells you where\nthey are with regard",
    "start": "1804700",
    "end": "1810211"
  },
  {
    "text": "to the specific n\ncategory they're in. So it's more of a [INAUDIBLE]. JASON KU: Yeah. So what your colleague is\nsaying is exactly correct.",
    "start": "1810211",
    "end": "1818010"
  },
  {
    "text": "I could vary b all I want\nright with the same a.",
    "start": "1818010",
    "end": "1823760"
  },
  {
    "text": "If I change a by 1,\nit doesn't matter what b is-- it's going to be bigger. ",
    "start": "1823760",
    "end": "1831840"
  },
  {
    "text": "Does that make sense? The K is much more\nsensitive to a than it is to b, so a is\nmore important than b.",
    "start": "1831840",
    "end": "1840039"
  },
  {
    "text": "Does that make sense? So if I just wanted to get\nsome linear time algorithm,",
    "start": "1840040",
    "end": "1847559"
  },
  {
    "text": "I could just sort by\ntheir bigger digits and hope they don't differ very\nmuch on the smaller things.",
    "start": "1847560",
    "end": "1855630"
  },
  {
    "text": "I've kind of sorted\nthese things. Does that make sense? OK. What if I actually want\nto sort these things?",
    "start": "1855630",
    "end": "1861900"
  },
  {
    "text": " Any hints?",
    "start": "1861900",
    "end": "1866970"
  },
  {
    "text": " Yeah?",
    "start": "1866970",
    "end": "1872590"
  },
  {
    "text": "I need to sort on\nboth, in some sense. ",
    "start": "1872590",
    "end": "1877630"
  },
  {
    "text": "What I'm going to\ntell you right now is an algorithm that I\nlike to call tuple sort,",
    "start": "1877630",
    "end": "1883690"
  },
  {
    "text": "but you can also think of it\nas Excel spreadsheets sort. I have an Excel spreadsheet\nof a bunch of data.",
    "start": "1883690",
    "end": "1891220"
  },
  {
    "text": "I have a prioritization on how\nimportant the keys are to me-- the columns. ",
    "start": "1891220",
    "end": "1897720"
  },
  {
    "text": "And if I have a very\nimportant column and an order",
    "start": "1897720",
    "end": "1902730"
  },
  {
    "text": "of the columns of how\nimportant they are to me, I can repeatedly\nsought on the columns",
    "start": "1902730",
    "end": "1909730"
  },
  {
    "text": "until they're sorted\nbased on my preference. That's something that\nyou may have done.",
    "start": "1909730",
    "end": "1917080"
  },
  {
    "text": "Now, if I have an ordering on\nthe preferences of my columns, do I start by\nsorting all of them",
    "start": "1917080",
    "end": "1924429"
  },
  {
    "text": "on the most important thing\nor the least important thing? What?",
    "start": "1924430",
    "end": "1930320"
  },
  {
    "text": "Who says most? Who says least? ",
    "start": "1930320",
    "end": "1936090"
  },
  {
    "text": "There's discrepancy here. All right, let's try it out.",
    "start": "1936090",
    "end": "1942520"
  },
  {
    "text": "All right, tuple sort-- let's start by sorting\nthese things by least",
    "start": "1942520",
    "end": "1950950"
  },
  {
    "text": "significant first, and then-- no, most significant first\nand then least significant.",
    "start": "1950950",
    "end": "1956140"
  },
  {
    "text": "That was the first thing\nI asked you, right? All right, so these are the\nmost significant things,",
    "start": "1956140",
    "end": "1961940"
  },
  {
    "text": "the first ones. And these are the less\nsignificant things. All right, instead of\nwriting it as tuples,",
    "start": "1961940",
    "end": "1968930"
  },
  {
    "text": "I'm going to write them\nas 32, 03, 44, 42, 22.",
    "start": "1968930",
    "end": "1975110"
  },
  {
    "text": "Is everyone cool that? This is just base\nfive representation.",
    "start": "1975110",
    "end": "1980440"
  },
  {
    "text": "All right, so let's start by\nsorting all of these things by the most significant\nthing, which",
    "start": "1980440",
    "end": "1988179"
  },
  {
    "text": "is by this guy, this guy, this\nguy, this guy, and this guy. So how do I do it?",
    "start": "1988180",
    "end": "1993470"
  },
  {
    "text": "The first one is 03, second one\nis 22, the next one is 32, 42,",
    "start": "1993470",
    "end": "2002530"
  },
  {
    "text": "and then 44--  maybe 44?",
    "start": "2002530",
    "end": "2007800"
  },
  {
    "text": "I don't know. Does it matter, the order\nin which I put these things?",
    "start": "2007800",
    "end": "2013208"
  },
  {
    "text": "I don't know. I'm just going to keep it\nthe same order for now. All right, so I've sorted it\nby the least significant--",
    "start": "2013208",
    "end": "2018669"
  },
  {
    "text": "or the most\nsignificant-- sorry-- the leading term. And now I'm going to sort\nby the least significant.",
    "start": "2018670",
    "end": "2026720"
  },
  {
    "text": "So what's the least\nsignificant here? 22-- then 2 is also--",
    "start": "2026720",
    "end": "2033950"
  },
  {
    "text": "this is also 2. This is also 2. This is 3.",
    "start": "2033950",
    "end": "2039440"
  },
  {
    "text": "And sorted list-- voila. ",
    "start": "2039440",
    "end": "2044640"
  },
  {
    "text": "Why did that not work?  Yeah?",
    "start": "2044640",
    "end": "2050471"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]",
    "start": "2050471",
    "end": "2057033"
  },
  {
    "text": "JASON KU: Yeah. So what happened is I\ndid take into account the significant\ndigit sort, but when",
    "start": "2057034",
    "end": "2063179"
  },
  {
    "text": "I did the less significant\nthing, it erased all of my work from up here.",
    "start": "2063179",
    "end": "2068739"
  },
  {
    "text": "Does that make sense? In the case of ties, we want\nthe more significant thing",
    "start": "2068739",
    "end": "2076780"
  },
  {
    "text": "to take precedence, so we\nwant to do that thing last. Does that makes sense? So the right way to do this--",
    "start": "2076780",
    "end": "2084560"
  },
  {
    "text": "this is the most significant\nfirst [INAUDIBLE] not good.",
    "start": "2084560",
    "end": "2094415"
  },
  {
    "text": "All right, at least\nsignificant first-- let's try that. So least significant here is 2.",
    "start": "2094415",
    "end": "2102370"
  },
  {
    "text": "OK, so I see 32, 42,\n22, 03, and then 44.",
    "start": "2102370",
    "end": "2116520"
  },
  {
    "text": "OK? Sound good? Least significant first--\nnow I do most significant.",
    "start": "2116520",
    "end": "2124013"
  },
  {
    "text": "I sort the most\nsignificant thing. OK, so what's the most\nsignificant thing? 03, 22, 32-- most\nsignificant four--",
    "start": "2124013",
    "end": "2137610"
  },
  {
    "text": "44, and 42-- cool. We're sorted, right?",
    "start": "2137610",
    "end": "2144260"
  },
  {
    "text": "I did what you told me to do. I sorted by the most\nsignificant thing.",
    "start": "2144260",
    "end": "2150750"
  },
  {
    "text": "What's the problem here? ",
    "start": "2150750",
    "end": "2158920"
  },
  {
    "text": "What did I do wrong? You wanted me to put 42\nhere and 44 here, right?",
    "start": "2158920",
    "end": "2165830"
  },
  {
    "text": "Because 42 came first\nin the input and 44 came second, right?",
    "start": "2165830",
    "end": "2171010"
  },
  {
    "text": " OK, if a sorting algorithm\nmaintains this property that,",
    "start": "2171010",
    "end": "2178510"
  },
  {
    "text": "if they are the same\nthing, then the output",
    "start": "2178510",
    "end": "2185050"
  },
  {
    "text": "maintains their order from\nthe input to the output-- their relative order-- that's\nwhat we call a stable sorting",
    "start": "2185050",
    "end": "2193260"
  },
  {
    "text": "algorithm. And so if we have a stable\nsorting algorithm when we're doing tuple sort, when\nwe're sorting on different keys",
    "start": "2193260",
    "end": "2200849"
  },
  {
    "text": "or columns of a\nset, we really want to be using a stable\nsorting algorithm.",
    "start": "2200850",
    "end": "2208110"
  },
  {
    "text": "Does that makes sense? Because otherwise,\nwe may mess up work we did before\nin a previous sort",
    "start": "2208110",
    "end": "2216330"
  },
  {
    "text": "of the less significant things. And so yes, we want a stable\nsorting algorithm here,",
    "start": "2216330",
    "end": "2224610"
  },
  {
    "text": "because then we will end\nup sorting our thing. Does that make sense?",
    "start": "2224610",
    "end": "2230190"
  },
  {
    "text": "Yes? AUDIENCE: [INAUDIBLE]",
    "start": "2230190",
    "end": "2237760"
  },
  {
    "text": "JASON KU: So what your\ncolleague is saying-- let's sort by most significant,\nthen look at all of the things",
    "start": "2237760",
    "end": "2246220"
  },
  {
    "text": "with one of those that are\nthe same, and now sort that.",
    "start": "2246220",
    "end": "2252530"
  },
  {
    "text": "That's something we could do. How long would that take? Well, let's say I didn't use\nhalf of my more significant set",
    "start": "2252530",
    "end": "2263220"
  },
  {
    "text": "of digits. Say I'm only using n/2 or--",
    "start": "2263220",
    "end": "2269960"
  },
  {
    "text": "that's not quite going\nto get what I want.  AUDIENCE: [INAUDIBLE]",
    "start": "2269960",
    "end": "2278517"
  },
  {
    "text": "JASON KU: Say again. AUDIENCE: We'll take\nn squared [INAUDIBLE].. JASON KU: Yeah. So what we're going to do, if we\nhave direct access array sort--",
    "start": "2278517",
    "end": "2286760"
  },
  {
    "text": "if I then go into each\none of these digits and try to sort the\nthings that are in there, that's going to take time.",
    "start": "2286760",
    "end": "2293210"
  },
  {
    "text": "It's going to take time\nfor each of those digits. There might be a\nton of collisions",
    "start": "2293210",
    "end": "2300440"
  },
  {
    "text": "into one of the things, and\nso I might take more time to sort that than linear.",
    "start": "2300440",
    "end": "2306860"
  },
  {
    "text": "Does that make sense? So I would prefer to do this\ntuple sort kind of behavior, sorting the smaller thing,\nsorting the bigger thing.",
    "start": "2306860",
    "end": "2314990"
  },
  {
    "text": "And because I only have a\nconstant number of things in my tuples, this is\nimportant, because I only",
    "start": "2314990",
    "end": "2320539"
  },
  {
    "text": "have two things I'm\nworried about here. I only have to do two passes\nof a sorting algorithm",
    "start": "2320540",
    "end": "2328839"
  },
  {
    "text": "to be able to sort\nthese numbers. However, can I use direct\naccess array sort here?",
    "start": "2328840",
    "end": "2336180"
  },
  {
    "text": "What was the initial stipulation\nI had on direct access array? That the keys were unique--",
    "start": "2336180",
    "end": "2343048"
  },
  {
    "text": "that's exactly the opposite\nof what we have here. We have things that\ncould be the same. ",
    "start": "2343048",
    "end": "2350970"
  },
  {
    "text": "So we give up-- can't do it. ",
    "start": "2350970",
    "end": "2356093"
  },
  {
    "text": "What do we do instead?  Yeah?",
    "start": "2356093",
    "end": "2361290"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]",
    "start": "2361290",
    "end": "2369030"
  },
  {
    "text": "JASON KU: You've already said\nthe thing that I'm looking for, so that's great. Your colleague\nsaid, why can't we",
    "start": "2369030",
    "end": "2375180"
  },
  {
    "text": "just put more things at a key? Why can't we put a list there?",
    "start": "2375180",
    "end": "2381529"
  },
  {
    "text": "That's exactly what we do. This is called counting sort. ",
    "start": "2381530",
    "end": "2388340"
  },
  {
    "text": "And what we do here is we\nstill have this direct access array of space u\nminus 0 to u minus 1,",
    "start": "2388340",
    "end": "2396140"
  },
  {
    "text": "but instead of storing one\nthing here at each key K,",
    "start": "2396140",
    "end": "2403390"
  },
  {
    "text": "we store a pointer to a chain. This sounds like hashing, right?",
    "start": "2403390",
    "end": "2410350"
  },
  {
    "text": "But the important\nthing is that I need to make sure, as\nI'm inserting things",
    "start": "2410350",
    "end": "2416290"
  },
  {
    "text": "in here, that I'm maintaining\nthe order in which they came in. I can't just throw\nthem willy nilly,",
    "start": "2416290",
    "end": "2421930"
  },
  {
    "text": "or else we have this problem\nup here that we had before. So I need what I would\nsay is sequence data",
    "start": "2421930",
    "end": "2428350"
  },
  {
    "text": "structure, something that will\nmaintain the order that I-- the extrinsic order\nthat I had when",
    "start": "2428350",
    "end": "2434140"
  },
  {
    "text": "I'm putting these things in. So as I have multiple\nthings with K,",
    "start": "2434140",
    "end": "2443920"
  },
  {
    "text": "I'm going to put\nthem in the order. I can put-- have a pointer to a\ndynamic array or a linked list,",
    "start": "2443920",
    "end": "2450160"
  },
  {
    "text": "where I just add\nthings to the end. And then, at the\nend of my algorithm, when I read off the\nthings, I can just",
    "start": "2450160",
    "end": "2458890"
  },
  {
    "text": "look at anyone that\nhas a non-empty data structure under here and\nread them off in the order",
    "start": "2458890",
    "end": "2464980"
  },
  {
    "text": "that they came. Does that makes sense? So for this example,\nI'm just going",
    "start": "2464980",
    "end": "2474200"
  },
  {
    "text": "to do this last step\nhere from the first row",
    "start": "2474200",
    "end": "2480230"
  },
  {
    "text": "to the second row. I'm going to have this direct\naccess array with 0, 1, 2, 3, 4",
    "start": "2480230",
    "end": "2488030"
  },
  {
    "text": "on the slots.  So how am I going to do\nthis counting sort now?",
    "start": "2488030",
    "end": "2495930"
  },
  {
    "text": "I have 32, 42, 22, 03, and 44.",
    "start": "2495930",
    "end": "2501540"
  },
  {
    "text": "I can take the first one, 32. I'm sorting by the\nmost significant thing. I stick it here--",
    "start": "2501540",
    "end": "2508890"
  },
  {
    "text": "32, and then 44-- 42-- sorry-- 42, 22.",
    "start": "2508890",
    "end": "2519359"
  },
  {
    "text": "This is not so much different\nyet then dynamic array--",
    "start": "2519360",
    "end": "2526800"
  },
  {
    "text": "direct access array sort. But when we get\nto this duplicate,",
    "start": "2526800",
    "end": "2534700"
  },
  {
    "text": "44 here, we now have two\nthings in this thing. And because we are keeping\nthem in order in this sequence,",
    "start": "2534700",
    "end": "2544230"
  },
  {
    "text": "I'm appending to the end. Then, when I go and read\noff the different things,",
    "start": "2544230",
    "end": "2551700"
  },
  {
    "text": "then I'm returning them\nin a stable way in the way that I want them to be. Does that makes sense.",
    "start": "2551700",
    "end": "2558620"
  },
  {
    "text": "And it's not\noverwriting the work I did on the lower\nsignificant digits. ",
    "start": "2558620",
    "end": "2564900"
  },
  {
    "text": "So how long does this take?  This also only takes\norder n plus u,",
    "start": "2564900",
    "end": "2576289"
  },
  {
    "text": "because I'm instantiating\nthis thing of size u. And then, how big are\nthese data structures?",
    "start": "2576290",
    "end": "2582730"
  },
  {
    "text": "Well, maybe I'm storing one, a\nconstant amount for each index. So that's a u overhead.",
    "start": "2582730",
    "end": "2589720"
  },
  {
    "text": "And then I'm paying 1 for\nevery item I'm storing. These things are\nonly the lengths.",
    "start": "2589720",
    "end": "2598030"
  },
  {
    "text": "The sum total of\ntheir lengths is n, because I'm only storing\nn things in there.",
    "start": "2598030",
    "end": "2604990"
  },
  {
    "text": "So the total amount of\nspace, the total amount of work I have to do is order--",
    "start": "2604990",
    "end": "2612480"
  },
  {
    "text": "I need to be able to\nspend in constant time and I need to be able to\ncycle through these things,",
    "start": "2612480",
    "end": "2618390"
  },
  {
    "text": "iterate over them\nin linear time. But if I have that,\nI get n plus u. Yeah?",
    "start": "2618390",
    "end": "2624110"
  },
  {
    "text": "AUDIENCE: How do\nyou ensure that, within your linked list or\nyour dynamic-- those elements,",
    "start": "2624110",
    "end": "2629167"
  },
  {
    "text": "like four equals four--\nhow do you make sure that those are sorted?",
    "start": "2629167",
    "end": "2635460"
  },
  {
    "text": "JASON KU: So your\ncolleague is saying, how do I ensure that the\nthings in these lists,",
    "start": "2635460",
    "end": "2641280"
  },
  {
    "text": "where they collide, how do you\nensure that they're sorted? I don't. I just ensure that they came\nin the order that they came.",
    "start": "2641280",
    "end": "2649740"
  },
  {
    "text": "But as long as I sorted the\nlower order digits correctly in the previous things,\nthen I'm assuming",
    "start": "2649740",
    "end": "2659140"
  },
  {
    "text": "that their order as\nthey come in will be sorted, if they collide. That's the assumption. That's the reason why I'm\ndoing these building up",
    "start": "2659140",
    "end": "2667996"
  },
  {
    "text": "from the least\nsignificant to the most significant is so that I\nknow that, when they collide,",
    "start": "2667997",
    "end": "2673690"
  },
  {
    "text": "the underlying stuff there is\nsorted already in the input. Does that make sense? Great-- yeah?",
    "start": "2673690",
    "end": "2679422"
  },
  {
    "text": "AUDIENCE: So this array\nisn't as big as u.",
    "start": "2679422",
    "end": "2685246"
  },
  {
    "text": "It's as big as n. JASON KU: I'm using a direct\naccess array on the keys--",
    "start": "2685246",
    "end": "2690680"
  },
  {
    "text": "oh, this is n. ",
    "start": "2690680",
    "end": "2696080"
  },
  {
    "text": "So counting sort is\ngeneral for any u. I just happened to pick u being\nn in this case when I broke",
    "start": "2696080",
    "end": "2704359"
  },
  {
    "text": "this thing up into n squared. But this general concept is-- ",
    "start": "2704360",
    "end": "2710440"
  },
  {
    "text": "doesn't matter what\nI choose for u. Does that make sense? OK.",
    "start": "2710440",
    "end": "2715600"
  },
  {
    "text": "But we will use that\nright now to sort larger ranges of numbers. ",
    "start": "2715600",
    "end": "2725829"
  },
  {
    "text": "This was exactly the idea. We're going to combine\ntuple sort, use counting sort as its auxiliary sorting--",
    "start": "2725830",
    "end": "2732910"
  },
  {
    "text": "stable sorting algorithm to do\nall its work on these digits.",
    "start": "2732910",
    "end": "2738039"
  },
  {
    "text": "And so to sort of on n\nsquared size numbers,",
    "start": "2738040",
    "end": "2745090"
  },
  {
    "text": "I get linear time,\nwhich is great, because u is n in this case. ",
    "start": "2745090",
    "end": "2754890"
  },
  {
    "text": "But can I extend that? What if I had n cubed? What if I had up to size u\nequals n cubed, or less than n",
    "start": "2754890",
    "end": "2764700"
  },
  {
    "text": "cubed? How many digits\nwould I have there? ",
    "start": "2764700",
    "end": "2772290"
  },
  {
    "text": "How many size n digits\nwhat I need to represent a number of size n cubed?",
    "start": "2772290",
    "end": "2778400"
  },
  {
    "text": " Any ideas? ",
    "start": "2778400",
    "end": "2784920"
  },
  {
    "text": "What did we do here? We divided off an n. We took it and stored it.",
    "start": "2784920",
    "end": "2790050"
  },
  {
    "text": "We're left with\nsomething of size n. If I had a number of size n\ncubed, I could divide off an n.",
    "start": "2790050",
    "end": "2796680"
  },
  {
    "text": "I'm left with\nsomething of n squared. I don't know how to deal\nwith something of n squared. Actually, I do.",
    "start": "2796680",
    "end": "2802530"
  },
  {
    "text": "I can split it up into\ntwo size n numbers. So if I had numbers bound--\nupper bounded by a cubic--",
    "start": "2802530",
    "end": "2812210"
  },
  {
    "text": "n cubed-- I could split\nit up into three digits. Three is still constant.",
    "start": "2812210",
    "end": "2817850"
  },
  {
    "text": "And so I could split it\nup into three digits, tuple sort them in their\nincreasing priority,",
    "start": "2817850",
    "end": "2826310"
  },
  {
    "text": "and sort those. Again, I'm doing\nlinear work per digit. I have a constant\nnumber of digits,",
    "start": "2826310",
    "end": "2832200"
  },
  {
    "text": "so I get a linear\ntime algorithm. Yeah? AUDIENCE: When it comes\nto sorting [INAUDIBLE]----",
    "start": "2832200",
    "end": "2838040"
  },
  {
    "text": "JASON KU: Uh-huh. AUDIENCE: Are you ensuring\nthat that runtime is also big O of n plus u?",
    "start": "2838040",
    "end": "2843704"
  },
  {
    "text": "JASON KU: Yeah. So it's always going to\nbe big O of n plus u, but because I'm bounding\nmy digit size to be n,",
    "start": "2843705",
    "end": "2853300"
  },
  {
    "text": "u is n there, and so\nI'm getting linear time. Does that make sense? Yeah. So the idea here--",
    "start": "2853300",
    "end": "2859579"
  },
  {
    "text": "this is what we call radix sort. Radix sort-- break up\nintegers, max size u,",
    "start": "2859580",
    "end": "2881180"
  },
  {
    "text": "into a base and tuple.",
    "start": "2881180",
    "end": "2890645"
  },
  {
    "text": " So basically, each one of my\ndigits can range from 0 to n.",
    "start": "2890645",
    "end": "2897650"
  },
  {
    "text": " How many base n digits do if\nI have a number of size u?",
    "start": "2897650",
    "end": "2904760"
  },
  {
    "text": " Yeah, log n of u--",
    "start": "2904760",
    "end": "2910690"
  },
  {
    "text": "number of digits is log n of u--",
    "start": "2910690",
    "end": "2916900"
  },
  {
    "text": "log base n of u. ",
    "start": "2916900",
    "end": "2921930"
  },
  {
    "text": "And then tuple sort on\ndigits using counting sort,",
    "start": "2921930",
    "end": "2936059"
  },
  {
    "text": "from least to most significant--",
    "start": "2936060",
    "end": "2945190"
  },
  {
    "text": "that's the algorithm. How long does that take?",
    "start": "2945190",
    "end": "2950200"
  },
  {
    "text": "How long does it take\nto sort on a digit that spans the key 0 to n?",
    "start": "2950200",
    "end": "2957550"
  },
  {
    "text": "Linear time, right? Order n time-- how many times\ndo I have to do this tuple sort?",
    "start": "2957550",
    "end": "2963790"
  },
  {
    "text": "The number of\ndigits times, right? So the running time\nof this algorithm--",
    "start": "2963790",
    "end": "2969370"
  },
  {
    "text": "first, I have to do this stuff,\nbreak up each of the integers.",
    "start": "2969370",
    "end": "2975230"
  },
  {
    "text": "That takes n time-- n times the number of digits. I had to create each\none of these tuples--",
    "start": "2975230",
    "end": "2982099"
  },
  {
    "text": "so n plus n times the\nnumber of digits--",
    "start": "2982100",
    "end": "2987850"
  },
  {
    "text": "log base n of u.",
    "start": "2987850",
    "end": "2994900"
  },
  {
    "text": "So here I had to loop\nthrough all the things. And then here, for each\nthing, I broke it up",
    "start": "2994900",
    "end": "3001170"
  },
  {
    "text": "into log base n of\nu digits, and that's",
    "start": "3001170",
    "end": "3009500"
  },
  {
    "text": "how long the first thing took. And then, how long did\nit take me to tuple sort?",
    "start": "3009500",
    "end": "3015250"
  },
  {
    "text": "n time per digit-- so I also get this factor. Does that make sense? ",
    "start": "3015250",
    "end": "3023790"
  },
  {
    "text": "How long is that? Is that good? Is that bad? For what values of u\nis this linear time?",
    "start": "3023790",
    "end": "3030430"
  },
  {
    "start": "3030430",
    "end": "3035500"
  },
  {
    "text": "If u is less than n to\nthe c for some constant c,",
    "start": "3035500",
    "end": "3043390"
  },
  {
    "text": "then the c comes out of the\nlogarithm, log n of n is 1,",
    "start": "3043390",
    "end": "3048430"
  },
  {
    "text": "and we get a linear\ntime algorithm. Does that makes sense? OK. So that's how we can\nsort in linear time,",
    "start": "3048430",
    "end": "3056059"
  },
  {
    "text": "if our things are only\npolynomially large. So in counting sort,\nwe get n plus u.",
    "start": "3056060",
    "end": "3064099"
  },
  {
    "text": "In radix sort, we get also\na stable sorting algorithm where the running time is n\nplus n times log base n of u.",
    "start": "3064100",
    "end": "3074140"
  },
  {
    "text": "Does that makes sense? And then, in the\nsituations where--",
    "start": "3074140",
    "end": "3080855"
  },
  {
    "text": "there's a typo there\nin counting sort-- that should be\nwhen u is order n-- counting short runs\nin linear time.",
    "start": "3080855",
    "end": "3087490"
  },
  {
    "text": "And it's linear time also\nin the case of rating sort, if our things are bounded\nby a polynomial in n,",
    "start": "3087490",
    "end": "3095380"
  },
  {
    "text": "by n to the c for\nsome constant c. Does that make sense?",
    "start": "3095380",
    "end": "3101180"
  },
  {
    "text": "All right, so that's how\nto sort in linear time, with the caveat that your\nnumbers aren't too big.",
    "start": "3101180",
    "end": "3107690"
  },
  {
    "text": "OK, see you next week. ",
    "start": "3107690",
    "end": "3117000"
  }
]