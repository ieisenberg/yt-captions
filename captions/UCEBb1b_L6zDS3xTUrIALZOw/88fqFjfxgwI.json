[
  {
    "start": "0",
    "end": "76000"
  },
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "7410"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation or view\nadditional materials from",
    "start": "7410",
    "end": "13960"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu.",
    "start": "13960",
    "end": "19140"
  },
  {
    "text": " PROFESSOR: So the way that I\nenvision recitations going is",
    "start": "19140",
    "end": "25940"
  },
  {
    "text": "I'll start off kind of reviewing\nsome of the points, some of the high points from\nlectures, might go into detail",
    "start": "25940",
    "end": "33380"
  },
  {
    "text": "on some of the more\nimportant topics. And this is also a time for\nyou to ask questions.",
    "start": "33380",
    "end": "38450"
  },
  {
    "text": "There's only 25-30 of you here,\nso you should feel a",
    "start": "38450",
    "end": "43830"
  },
  {
    "text": "little bit more comfortable\nasking questions. And there are no stupid\nquestions here.",
    "start": "43830",
    "end": "49489"
  },
  {
    "text": "For the most part, you're all\nbeginners at programming. Am I wrong? Has anyone programmed\nhere before?",
    "start": "49490",
    "end": "57449"
  },
  {
    "text": "OK. So presumably, none of you have\nany experience with what we're talking about. And so if you ask a question, no\nmatter how basic you think",
    "start": "57450",
    "end": "65620"
  },
  {
    "text": "it is, it's not stupid. Because everyone's been there,\nincluding me and the professor when we started programing.",
    "start": "65620",
    "end": "71930"
  },
  {
    "text": "And we've made, ourselves,\nreally stupid mistakes too. So. That said.",
    "start": "71930",
    "end": "77820"
  },
  {
    "start": "76000",
    "end": "258000"
  },
  {
    "text": "We started out by talking\nabout the purpose of the class, which is to teach you\nhow to take problems, real",
    "start": "77820",
    "end": "83080"
  },
  {
    "text": "world problems, break them down,\nabstract them, and divvy them up so that you can solve\nthem with a computer.",
    "start": "83080",
    "end": "89450"
  },
  {
    "text": "And when we talk about computer,\nwe're talking about a very simple model where--",
    "start": "89450",
    "end": "96100"
  },
  {
    "text": "and this is the only time you'll\nsee anything related to hardware in this class.",
    "start": "96100",
    "end": "101980"
  },
  {
    "text": "When we talk about a computer,\nwe're talking about something very simple with a CPU and\nmemory and maybe some input",
    "start": "101980",
    "end": "109810"
  },
  {
    "text": "and output. All right. And when we talk about programs,\nthese are sequences",
    "start": "109810",
    "end": "117880"
  },
  {
    "text": "of instructions that are loaded\ninto the computer's memory which can be divided up\ninto little cells like this.",
    "start": "117880",
    "end": "125760"
  },
  {
    "text": "All right. And what they might\nlook like is-- ",
    "start": "125760",
    "end": "134690"
  },
  {
    "text": "This actually doesn't mean\nanything, but it's just, you know, for the sake\nof demonstration.",
    "start": "134690",
    "end": "140330"
  },
  {
    "text": "This is what a computer\nwould see. As the CPU starts running\na program, it looks at",
    "start": "140330",
    "end": "146150"
  },
  {
    "text": "whatever's in this memory\nlocation and says, this is an instruction I can handle,\nso I'm gonna go do this. So this might be like add\ntwo numbers together",
    "start": "146150",
    "end": "154890"
  },
  {
    "text": "and produce a result. Something very simple,\nvery basic. And as it moves along in a\nstraight line fashion, it just",
    "start": "154890",
    "end": "161140"
  },
  {
    "text": "executes this instruction,\nthis instruction, this instruction, et cetera,\net cetera. The problem is is that while\nthe computer is perfectly",
    "start": "161140",
    "end": "166370"
  },
  {
    "text": "happy to look at this, this\nis gibberish to us. And most people, most sane\npeople, if they're actually",
    "start": "166370",
    "end": "173870"
  },
  {
    "text": "looking at computer code,\ncan't decipher this. So this is where programming\nlanguages come in.",
    "start": "173870",
    "end": "181470"
  },
  {
    "text": "We can move up a level. We can abstract away from this,\nand maybe say something like this stands for --",
    "start": "181470",
    "end": "188330"
  },
  {
    "text": "move a number into a register\nor something like that. You don't have to know\nwhat this means. All you have to know is that\nthis is a little bit more",
    "start": "188330",
    "end": "195430"
  },
  {
    "text": "readable than this. And it represents an instruction\nthat the computer can understand. The problem is that even at this\nlevel, this is still very",
    "start": "195430",
    "end": "202420"
  },
  {
    "text": "atomic and very low level, and\nreally you can't understand what's going on. So--",
    "start": "202420",
    "end": "207460"
  },
  {
    "text": " just so I can fill this in. ",
    "start": "207460",
    "end": "216659"
  },
  {
    "text": "We move into say, I'm gonna say\nx is equal to 1 and I'm",
    "start": "216660",
    "end": "222250"
  },
  {
    "text": "gonna add x plus 5 and\nthen multiply by 2.",
    "start": "222250",
    "end": "227850"
  },
  {
    "text": "This is a lot easier for\nus to understand. And this is what we're talking\nabout when we're talking about",
    "start": "227850",
    "end": "233330"
  },
  {
    "text": "any sort of programming\nlanguage that we'll be studying in this course. And we're studying Python.",
    "start": "233330",
    "end": "238760"
  },
  {
    "text": "So there are hundreds of\nlanguages that allow you to express these concepts in\na form similar to that.",
    "start": "238760",
    "end": "246069"
  },
  {
    "text": "And all it does is it allows us\nto talk to the computer in this language.",
    "start": "246070",
    "end": "251260"
  },
  {
    "text": "So everyone good with that? Cool? All right. ",
    "start": "251260",
    "end": "258850"
  },
  {
    "start": "258000",
    "end": "456000"
  },
  {
    "text": "So when we have these\nprogramming languages, they're",
    "start": "258850",
    "end": "266710"
  },
  {
    "text": "put together in specific ways. So does everyone remember\nthe term syntax?",
    "start": "266710",
    "end": "275510"
  },
  {
    "text": "Can anyone tell me what it meant\nor means in terms of programming languages? ",
    "start": "275510",
    "end": "283800"
  },
  {
    "text": "AUDIENCE: I could guess. It is the way that the\nstring is structured? PROFESSOR: Yeah. It's the way the parts of the\nlanguage are put together.",
    "start": "283800",
    "end": "290870"
  },
  {
    "text": "So let's say that I take a\nvery simple statement.",
    "start": "290870",
    "end": "303389"
  },
  {
    "text": "I'm taking a variable\nplus this variable. This is a valid piece of\nsyntax for Python, for",
    "start": "303390",
    "end": "309389"
  },
  {
    "text": "example, or, say, arithmetic,\nor a bunch of different languages.",
    "start": "309390",
    "end": "315270"
  },
  {
    "text": "So this is good. ",
    "start": "315270",
    "end": "324430"
  },
  {
    "text": "I can't write.  On the other hand, if we say\nvariable variable plus, this",
    "start": "324430",
    "end": "332360"
  },
  {
    "text": "isn't valid in Python,\nfor example. It might be valid in another\nlanguage, but the syntax of",
    "start": "332360",
    "end": "338250"
  },
  {
    "text": "Python won't allow this. So this is bad syntax. So.",
    "start": "338250",
    "end": "343600"
  },
  {
    "text": " All right. So is everyone kind of\nunderstand what syntax is?",
    "start": "343600",
    "end": "350512"
  },
  {
    "text": "All right. What about static semantics? Talked about that in class.",
    "start": "350512",
    "end": "357370"
  },
  {
    "text": "Can anyone give me kind of a\nrough view of what that is?",
    "start": "357370",
    "end": "362520"
  },
  {
    "text": "Can I choose someone? All right. When we talk about static\nsemantics, we're talking about",
    "start": "362520",
    "end": "375370"
  },
  {
    "text": "syntactically valid statements\nthat mean something. So let's say that I have\nvariable a is equal to 5 and b",
    "start": "375370",
    "end": "385310"
  },
  {
    "text": "is equal to 2.  A statement that's syntactically\ncorrect and is",
    "start": "385310",
    "end": "392260"
  },
  {
    "text": "also meaningful with respect to\nstatic semantics could be something like a divided\nby 2, right.",
    "start": "392260",
    "end": "400569"
  },
  {
    "text": "Or a divided by b. They're valid statements\nsyntactically.",
    "start": "400570",
    "end": "406160"
  },
  {
    "text": "And we know that 5 divided by\n2 or a divided by b, they're both numbers. They mean something.",
    "start": "406160",
    "end": "411670"
  },
  {
    "text": "On the other hand, let's\nsay that I had this. ",
    "start": "411670",
    "end": "421070"
  },
  {
    "text": "I'm gonna say that this variable\nd is a string 'foo'. All right.",
    "start": "421070",
    "end": "426610"
  },
  {
    "text": "This c divided by d where c is\na number and d is a string,",
    "start": "426610",
    "end": "433560"
  },
  {
    "text": "that's something that's\nnot meaningful, right. What does a number divided\nby a string mean? Nothing.",
    "start": "433560",
    "end": "439919"
  },
  {
    "text": "So that's what we're talking\nabout with static semantics. So bad.",
    "start": "439920",
    "end": "446490"
  },
  {
    "text": "These two aspects of computer\nprograms are pretty easy to check for a compiler interpreter\nbecause they're",
    "start": "446490",
    "end": "454319"
  },
  {
    "text": "pretty explicit rules, right. The part that we spend most\nof our time in is",
    "start": "454320",
    "end": "463430"
  },
  {
    "start": "456000",
    "end": "600000"
  },
  {
    "text": "the semantic part. ",
    "start": "463430",
    "end": "469050"
  },
  {
    "text": "And this is where the syntax\nchecks out, the statements are",
    "start": "469050",
    "end": "474949"
  },
  {
    "text": "meaningful in and of themselves,\nbut the program as a whole, or the whole kind\nof recipe, doesn't work.",
    "start": "474950",
    "end": "482010"
  },
  {
    "text": "So as an example, so this,\nas we know is fine.",
    "start": "482010",
    "end": "493620"
  },
  {
    "text": "That's correct. But let's say we have this. ",
    "start": "493620",
    "end": "500540"
  },
  {
    "text": "So a is 6, c is 0. I do that, what's\n6 divided by 0?",
    "start": "500540",
    "end": "509280"
  },
  {
    "text": "It's an error. But syntactically\nthis is fine. And by static semantics,\nthis is fine.",
    "start": "509280",
    "end": "515200"
  },
  {
    "text": "So this is the type of thing\nwe're talking about with the semantic aspects of a program.",
    "start": "515200",
    "end": "522299"
  },
  {
    "text": "Does it work properly? And before I jump into Python,\none tip to keep in mind is",
    "start": "522299",
    "end": "533040"
  },
  {
    "text": "that when you're writing\nprograms and you're trying to do your problem sets, your\nprogram is very explicit.",
    "start": "533040",
    "end": "541660"
  },
  {
    "text": "It's not ambiguous. So a program will do what\nyou tell it to do and",
    "start": "541660",
    "end": "548210"
  },
  {
    "text": "no more and no less.  And a statement doesn't\nmean two things.",
    "start": "548210",
    "end": "555550"
  },
  {
    "text": "So like if I make the statement\nin English, I cannot say enough good things or\nrecommend this person highly",
    "start": "555550",
    "end": "561610"
  },
  {
    "text": "enough, if you write that out\nthat can be considered a statement with two different\nmeanings.",
    "start": "561610",
    "end": "567900"
  },
  {
    "text": "One of them is not too\ncomplimentary. All right. So when you're writing your\nprograms, if it's not doing",
    "start": "567900",
    "end": "575390"
  },
  {
    "text": "what you think it's doing, one\nof the skills that you need to learn throughout the semester is\nto be able to read the code",
    "start": "575390",
    "end": "582040"
  },
  {
    "text": "and try to follow along in your\nmind what's going on. It's not magic. OK.",
    "start": "582040",
    "end": "587760"
  },
  {
    "text": "So now we're at Python. We're past kind of the generic introductory scaffolding stuff.",
    "start": "587760",
    "end": "593460"
  },
  {
    "text": "Now we're onto something that's\nactually gonna be meaningful for you for the\nnext 12, 13, 14 weeks.",
    "start": "593460",
    "end": "601350"
  },
  {
    "start": "600000",
    "end": "680000"
  },
  {
    "text": "All right. So Python is a general\npurpose language. It's used for all sorts of\nthings, web development, small",
    "start": "601350",
    "end": "611190"
  },
  {
    "text": "device development, desktop\nprograms, et cetera. It's an interpreted language,\nwhich means that if I have a",
    "start": "611190",
    "end": "621480"
  },
  {
    "text": "program, blah, blah, blah, blah,\nthen Python executes it",
    "start": "621480",
    "end": "632070"
  },
  {
    "text": "for me straight away. Some languages, compiled\nlanguages, have to go through",
    "start": "632070",
    "end": "639630"
  },
  {
    "text": "a compiler, and then you\nhave to run them.",
    "start": "639630",
    "end": "647592"
  },
  {
    "text": "All right. It's an extra step. The nice thing about having an\ninterpreted language is that",
    "start": "647592",
    "end": "652839"
  },
  {
    "text": "as you may changes to the code,\nyou can instantly see what's going on with\nyour program.",
    "start": "652840",
    "end": "658060"
  },
  {
    "text": "So. See. It's got a very simple syntax. And it's also very widely used\nand has been getting--",
    "start": "658060",
    "end": "666820"
  },
  {
    "text": "more and more people have\nstarted using it, oh, for the past, say, 15 years. So. 10 years ago when I first heard\nabout it, it was kind of",
    "start": "666820",
    "end": "674220"
  },
  {
    "text": "like this little\ncute language. Now it's kind of blossomed into\nthis wonderful language that everyone uses and loves.",
    "start": "674220",
    "end": "679495"
  },
  {
    "text": " So. Programs in Python, and in all\nlanguages, are sequences of",
    "start": "679495",
    "end": "689140"
  },
  {
    "start": "680000",
    "end": "774000"
  },
  {
    "text": "expressions. So this is getting\nback to syntax.",
    "start": "689140",
    "end": "695065"
  },
  {
    "start": "695065",
    "end": "702800"
  },
  {
    "text": "And these expressions, they are\ncomposed of operands and operators and functions.",
    "start": "702800",
    "end": "709649"
  },
  {
    "text": "So let's say, for example,\nthis is an expression.",
    "start": "709650",
    "end": "723970"
  },
  {
    "text": "This is a variable name. This is the assignment\noperator, and this is a string literal.",
    "start": "723970",
    "end": "730830"
  },
  {
    "text": "When I say operand, what\nI'm referring to are things in the language.",
    "start": "730830",
    "end": "737030"
  },
  {
    "text": "That's what a literal\nand a variable are. And then if I say operator, this\nis something that does",
    "start": "737030",
    "end": "744290"
  },
  {
    "text": "something to things. So it's-- this is an example of what we\ncall an assignment operator.",
    "start": "744290",
    "end": "752170"
  },
  {
    "text": "What it does is it says, take\nwhat I'm referring to my right hand side here, create a name\ncalled myvar, and say that",
    "start": "752170",
    "end": "761920"
  },
  {
    "text": "every time that I reference\nmyvar, I get this value.",
    "start": "761920",
    "end": "767050"
  },
  {
    "text": "We'll talk more about\nthat later on. Um. Let's see.",
    "start": "767050",
    "end": "772102"
  },
  {
    "text": "Where am I going? So one important thing to know\nabout Python is that",
    "start": "772102",
    "end": "780880"
  },
  {
    "start": "774000",
    "end": "1120000"
  },
  {
    "text": "everything-- so these things-- are objects. ",
    "start": "780880",
    "end": "799649"
  },
  {
    "text": "For now, you don't have to get\ntoo familiar with what an object is just-- if you know anything, especially\nfor the first quiz,",
    "start": "799650",
    "end": "807540"
  },
  {
    "text": "this is something to know. ",
    "start": "807540",
    "end": "813589"
  },
  {
    "text": "These objects, they\nhave types, right. So some types that we have\nin Python are ints.",
    "start": "813590",
    "end": "818940"
  },
  {
    "text": "What are examples of\nints or integers? What? AUDIENCE: 7.",
    "start": "818940",
    "end": "824870"
  },
  {
    "text": "PROFESSOR: Yeah. Just rattle a few off. So 7, 0, negative\n1, 2, et cetera.",
    "start": "824870",
    "end": "829970"
  },
  {
    "text": "Now there's another number\ntype, floats, right. So this is what we normally\nthink of as real numbers.",
    "start": "829970",
    "end": "838800"
  },
  {
    "text": "But when you're talking about\nreal numbers on the computer, they are kind of dicey to deal\nwith-- and we'll actually",
    "start": "838800",
    "end": "845240"
  },
  {
    "text": "cover that later on in the\nsemester when we talk about kind of the inexactness\nof these. But for now, just know that\nthese are numbers with like",
    "start": "845240",
    "end": "854020"
  },
  {
    "text": "decimal points. All right.  OK.",
    "start": "854020",
    "end": "859089"
  },
  {
    "text": "Where am I going next? AUDIENCE: [INAUDIBLE]? PROFESSOR: Actually,\nsyntactically, yes.",
    "start": "859090",
    "end": "866390"
  },
  {
    "text": "So one thing that you might\nencounter when you're dealing with your programs-- this is\nkind of off on a tangent--",
    "start": "866390",
    "end": "873430"
  },
  {
    "text": "is when you say assign a number\nto a variable, when you",
    "start": "873430",
    "end": "887260"
  },
  {
    "text": "have a literal like this number\nhere, 0, Python infers what type you're\ntalking about.",
    "start": "887260",
    "end": "893700"
  },
  {
    "text": "So in this case, it's gonna\ncreate a number, and it's gonna call it a type integer.",
    "start": "893700",
    "end": "899029"
  },
  {
    "text": "All right. If it sees this, it's gonna\ncreate this variable, and it's",
    "start": "899030",
    "end": "908820"
  },
  {
    "text": "gonna have a type of float. Now, it might seem like\nsomething minor to you right now, but when you start doing\nsome of the math on problem",
    "start": "908820",
    "end": "917280"
  },
  {
    "text": "set one, if you divide by an\ninteger, you might run into",
    "start": "917280",
    "end": "923260"
  },
  {
    "text": "problems, right, because in\ncomputer-land 5 integer",
    "start": "923260",
    "end": "931420"
  },
  {
    "text": "divided by 2 integer\nis equal to 2.",
    "start": "931420",
    "end": "936700"
  },
  {
    "text": "Whereas in the real world,\nit's equal to that.",
    "start": "936700",
    "end": "943920"
  },
  {
    "text": "So just be aware when you're\nworking with numbers that you need to be aware of their type,\nall right, especially",
    "start": "943920",
    "end": "949790"
  },
  {
    "text": "when you're talking about the\ndifferent operations you can do on them. So. ",
    "start": "949790",
    "end": "959500"
  },
  {
    "text": "So for these number types, you\nhave addition, subtraction,",
    "start": "959500",
    "end": "964990"
  },
  {
    "text": "multiplication, division. For integers, exponentiation,\nwhich is",
    "start": "964990",
    "end": "971910"
  },
  {
    "text": "represented by two asterisks. And for integers, modulo.",
    "start": "971910",
    "end": "979220"
  },
  {
    "text": "And then for floats\nplus, minus, same thing except no modulo.",
    "start": "979220",
    "end": "985020"
  },
  {
    "text": " All right. So back to the list.",
    "start": "985020",
    "end": "990920"
  },
  {
    "text": "AUDIENCE: Can I ask\na quick question? PROFESSOR: Yes. AUDIENCE: Could you explain\nwhy like maybe briefly 5",
    "start": "990920",
    "end": "996096"
  },
  {
    "text": "divided by 2 is 2? You said in computer-land,\nlike what? Is it doing some sort\nof weird rounding? Or like why, why is that\ndifferent than--?",
    "start": "996096",
    "end": "1004810"
  },
  {
    "text": "PROFESSOR: This is because\nthe type of the variable is an integer. And when you say something is\nan integer, you're talking",
    "start": "1004810",
    "end": "1012180"
  },
  {
    "text": "about only these\nnumbers, right. So 2 and a 1/2 as an integer\ndoesn't exist.",
    "start": "1012180",
    "end": "1019800"
  },
  {
    "text": "It only exists as a float. But when you have an operand\nlike this that takes two",
    "start": "1019800",
    "end": "1026770"
  },
  {
    "text": "numbers on both sides, if both\nnumbers are integers, this produces a result that\nis an integer.",
    "start": "1026770",
    "end": "1033410"
  },
  {
    "text": "So when you have these math\noperators, these produce a",
    "start": "1033410",
    "end": "1040020"
  },
  {
    "text": "result, right. So that result has\na type as well.",
    "start": "1040020",
    "end": "1045900"
  },
  {
    "text": "Because I can take that\nresult and I say c is equal to 5 and 1/2.",
    "start": "1045900",
    "end": "1051650"
  },
  {
    "text": "C is now a variable\nin the language. That means that it has\nto have a type. And Python says that because I\ndid this operation with two",
    "start": "1051650",
    "end": "1059280"
  },
  {
    "text": "integers, I'm gonna give it\na type as an integer. And the closest representation\nto 2 and 1/2 in",
    "start": "1059280",
    "end": "1064990"
  },
  {
    "text": "integer terms is 2. AUDIENCE: I thought it\nwould round up to 3. I assumed that it would round\nup to [UNINTELLIGIBLE].",
    "start": "1064990",
    "end": "1071593"
  },
  {
    "text": "PROFESSOR: Oh, yeah. You're talking about\na separate issue. It's not necessarily that it's\nclosest, but it truncates.",
    "start": "1071593",
    "end": "1078980"
  },
  {
    "text": "AUDIENCE: OK. PROFESSOR: So when\nit converts-- yeah, it just truncates\nthe decimal. AUDIENCE: What happens if you\nhave 5 divided by 2--",
    "start": "1078980",
    "end": "1084935"
  },
  {
    "text": "[UNINTELLIGIBLE]?  PROFESSOR: So when you get into\nstuff like that, Python's",
    "start": "1084935",
    "end": "1090530"
  },
  {
    "text": "gonna look at, see it's an\ninteger and a float, and-- this is something that we're\ngonna have to actually test",
    "start": "1090530",
    "end": "1096760"
  },
  {
    "text": "out when I turn on\nthe computer. It should convert to a float,\nbut it might not. So.",
    "start": "1096760",
    "end": "1101855"
  },
  {
    "text": "We'll test that out, actually. That's one of the nice things\nabout Python is that if you have a question like that,\nyou can test it out",
    "start": "1101855",
    "end": "1108370"
  },
  {
    "text": "instantaneously. So remind me ints divided\nby float, and",
    "start": "1108370",
    "end": "1117759"
  },
  {
    "text": "we'll demonstrate it. OK. All right.",
    "start": "1117760",
    "end": "1122790"
  },
  {
    "start": "1120000",
    "end": "1232000"
  },
  {
    "text": "So another data type, string. Anyone know what a string\nis or can tell me?",
    "start": "1122790",
    "end": "1130680"
  },
  {
    "text": "Shout it out. Pantomime it. AUDIENCE: Sequence\nof characters. PROFESSOR: OK. So it's something like this.",
    "start": "1130680",
    "end": "1136945"
  },
  {
    "text": " All right. And you can--",
    "start": "1136945",
    "end": "1142890"
  },
  {
    "text": "does anyone mind if\nI erase this? ",
    "start": "1142890",
    "end": "1149480"
  },
  {
    "text": "So in Python, you can specify\nstrings a couple ways. One is with single quotes\non the sides.",
    "start": "1149480",
    "end": "1154900"
  },
  {
    "text": "And the other is with\ndouble quotes. ",
    "start": "1154900",
    "end": "1162279"
  },
  {
    "text": "This is useful, for example,\nif you need to embed quotes inside a string. So if I need to, say, have this\nas a quoted string, I",
    "start": "1162280",
    "end": "1180970"
  },
  {
    "text": "would have single quotes on the\noutside and then double quotes on the inside,\nor vice versa. I could do double quotes\nand then single quotes.",
    "start": "1180970",
    "end": "1187500"
  },
  {
    "text": "The point is that Python needs\nto know when and where the string starts and where\nthe string ends.",
    "start": "1187500",
    "end": "1195060"
  },
  {
    "text": "We good? All right. AUDIENCE: [UNINTELLIGIBLE]. ",
    "start": "1195060",
    "end": "1203059"
  },
  {
    "text": "PROFESSOR: So if you put that?",
    "start": "1203060",
    "end": "1210250"
  },
  {
    "text": "If you write this, Python's\ngonna call that a string. It's a string that contains\nthe character two, though.",
    "start": "1210250",
    "end": "1215286"
  },
  {
    "text": "All right.  I guess you're asking\nbecause of the input",
    "start": "1215286",
    "end": "1220950"
  },
  {
    "text": "with the problem set? AUDIENCE: --divide that by a\nstring, by an integer that would [UNINTELLIGIBLE]. PROFESSOR: So in your program,\nthere's a point where you have",
    "start": "1220950",
    "end": "1227830"
  },
  {
    "text": "to enter in numbers\nfor problem set 1. Oh, you didn't start?",
    "start": "1227830",
    "end": "1233330"
  },
  {
    "start": "1232000",
    "end": "1398000"
  },
  {
    "text": " Well there is a place where\nyou have to enter numbers. So raw_input, for example, is\ngonna return a variable, and",
    "start": "1233330",
    "end": "1258260"
  },
  {
    "text": "the type of this is\ngonna be a string. So if you need to use it as an\ninteger or as a float, you can",
    "start": "1258260",
    "end": "1264440"
  },
  {
    "text": "convert it. ",
    "start": "1264440",
    "end": "1275610"
  },
  {
    "text": "So now this is an integer, and\nyou can do math with it.",
    "start": "1275610",
    "end": "1280760"
  },
  {
    "text": "Or you can also say-- ",
    "start": "1280760",
    "end": "1294700"
  },
  {
    "text": "Does that make sense? That's something that'll be\nuseful in your problem set. So just FYI.",
    "start": "1294700",
    "end": "1302719"
  },
  {
    "text": "All right. Another data type, Boolean. ",
    "start": "1302719",
    "end": "1310250"
  },
  {
    "text": "Does anyone know what\na Boolean is? AUDIENCE: [UNINTELLIGIBLE].",
    "start": "1310250",
    "end": "1315970"
  },
  {
    "text": "PROFESSOR: What's that? AUDIENCE: It's like an\nif-then statement? PROFESSOR: It has to\ndo with if-then statements, but it's a variable.",
    "start": "1315970",
    "end": "1322300"
  },
  {
    "text": "It's a type that only has two\nvalues, true or false.",
    "start": "1322300",
    "end": "1328108"
  },
  {
    "text": "OK. And we'll talk about this, all\nof these, when I start talking about operations on them.",
    "start": "1328108",
    "end": "1336570"
  },
  {
    "text": "Last one that you need to know\nof right now is the none type.",
    "start": "1336570",
    "end": "1341750"
  },
  {
    "text": "The way to think about none\nis that it's sort of like dark matter.",
    "start": "1341750",
    "end": "1347070"
  },
  {
    "text": "It's there. We know it's there. It holds a place, but we can't\ndo anything with it.",
    "start": "1347070",
    "end": "1353919"
  },
  {
    "text": "It's there just so that you know\nthat there's a variable that should refer to something\nbut that something doesn't exactly exist.",
    "start": "1353920",
    "end": "1361650"
  },
  {
    "text": "OK. You'll see more of it. But it's nothing,\nbut it's there.",
    "start": "1361650",
    "end": "1367550"
  },
  {
    "text": "And then later on\nin the semester, there's other data types. I mean, there's a lot of data\ntypes, but these are the big",
    "start": "1367550",
    "end": "1374350"
  },
  {
    "text": "ones that you need to\nknow right now. Other data types that we might\nlook at are lists, tuples, and",
    "start": "1374350",
    "end": "1381680"
  },
  {
    "text": "dictionaries. ",
    "start": "1381680",
    "end": "1387500"
  },
  {
    "text": "These are other major data\ntypes in Python. You don't need to know them\nright now 'cause Professor Guttag will go over\nthem in lecture.",
    "start": "1387500",
    "end": "1394420"
  },
  {
    "text": "But just keep them\nin your brain. OK. So we've already talked about\nthe operations that we can do",
    "start": "1394420",
    "end": "1402650"
  },
  {
    "start": "1398000",
    "end": "1498000"
  },
  {
    "text": "on numbers. We can also do operations\non strings. So we can do something\ncalled concatenation. ",
    "start": "1402650",
    "end": "1412960"
  },
  {
    "text": "So concatenation is just\na big word for sticking two things together. So if I have s1 and s2 and I\nwant to concatenate them to",
    "start": "1412960",
    "end": "1432130"
  },
  {
    "text": "together, I use the\nplus operator.",
    "start": "1432130",
    "end": "1438710"
  },
  {
    "text": "So the other thing, too, that I\nwant to point out is that we",
    "start": "1438710",
    "end": "1445049"
  },
  {
    "text": "have a plus operator for ints. We got a plus operator\nfor float. We've got one for strings.",
    "start": "1445050",
    "end": "1450598"
  },
  {
    "text": "I don't think they work for\nbools, but they work for lists and tuples. ",
    "start": "1450598",
    "end": "1457020"
  },
  {
    "text": "This is what's known as an\noverloaded operator. So it changes shape or changes\nits behavior depending on the",
    "start": "1457020",
    "end": "1463810"
  },
  {
    "text": "data types of its operands. So that's why when you're\ndividing an ints by a float,",
    "start": "1463810",
    "end": "1472460"
  },
  {
    "text": "some languages will convert\nit to a float for you. Other languages will\nconvert to an ints.",
    "start": "1472460",
    "end": "1477800"
  },
  {
    "text": " It's something that varies. That's why I'm not sure of\nmy answer right now.",
    "start": "1477800",
    "end": "1484464"
  },
  {
    "text": "So. AUDIENCE: [INAUDIBLE]? PROFESSOR: No. If your computer blows\nup in your face, then that's an issue.",
    "start": "1484464",
    "end": "1492890"
  },
  {
    "text": "That's a separate issue.  All right.",
    "start": "1492890",
    "end": "1498860"
  },
  {
    "start": "1498000",
    "end": "1578000"
  },
  {
    "text": "So some other operations that\nwe have, and they relate to",
    "start": "1498860",
    "end": "1507320"
  },
  {
    "text": "Booleans, are comparison\noperations.",
    "start": "1507320",
    "end": "1515750"
  },
  {
    "start": "1515750",
    "end": "1522060"
  },
  {
    "text": "What these mean are these take\ntwo operands and compare them.",
    "start": "1522060",
    "end": "1527920"
  },
  {
    "text": "So if I want to see if-- ",
    "start": "1527920",
    "end": "1538190"
  },
  {
    "text": "if I say a less than b and a is\n2 and b is 3, then this is gonna return true.",
    "start": "1538190",
    "end": "1545040"
  },
  {
    "text": "The value of this expression\nbecomes true. And if I say a greater than\nb, obviously it's",
    "start": "1545040",
    "end": "1553549"
  },
  {
    "text": "gonna be false, right. And all of these operators\nwork in",
    "start": "1553550",
    "end": "1559640"
  },
  {
    "text": "basically the same way. They take two operations,\nand they give you a Boolean value back. All right.",
    "start": "1559640",
    "end": "1565465"
  },
  {
    "text": " Any questions on that? AUDIENCE: So are Boolean values\nalways true or false?",
    "start": "1565465",
    "end": "1571385"
  },
  {
    "text": "PROFESSOR: Always\ntrue or false. And I'm actually gonna\nget to that now.",
    "start": "1571385",
    "end": "1576559"
  },
  {
    "text": "So Boolean values-- and this is\nkind of the last major one",
    "start": "1576560",
    "end": "1581720"
  },
  {
    "start": "1578000",
    "end": "1782000"
  },
  {
    "text": "we're gonna talk about-- have three operators,\nAND, OR, and NOT.",
    "start": "1581720",
    "end": "1592500"
  },
  {
    "text": "Actually, these should\nbe lowercase.  These, AND and OR, take two\noperands, NOT takes one.",
    "start": "1592500",
    "end": "1605250"
  },
  {
    "text": "And what they do is if you have\nsomething like a is true,",
    "start": "1605250",
    "end": "1617940"
  },
  {
    "text": "b is true, c is false, if you\nsay like a AND b, then this",
    "start": "1617940",
    "end": "1628399"
  },
  {
    "text": "entire expression is gonna\nreturn true, right. ",
    "start": "1628400",
    "end": "1633630"
  },
  {
    "text": "If I say a AND c, this\nwill be false.",
    "start": "1633630",
    "end": "1639940"
  },
  {
    "text": "AND returns true, if and only\nif both operands are true,",
    "start": "1639940",
    "end": "1645360"
  },
  {
    "text": "false otherwise. If you say a OR c, OR returns\ntrue if both operands or one",
    "start": "1645360",
    "end": "1660270"
  },
  {
    "text": "operand is true. So if any of them are true\nor both are true. If they're both false, then\nit returns false.",
    "start": "1660270",
    "end": "1665495"
  },
  {
    "text": " And NOT, all this does is if I\nsay NOT a, it'll return false.",
    "start": "1665495",
    "end": "1677100"
  },
  {
    "text": "It reverses it. Now we can combine\nthese together. So these are very simple\nexpressions, but we can also",
    "start": "1677100",
    "end": "1688310"
  },
  {
    "text": "combine them. So we can say like a\nAND b OR c, right.",
    "start": "1688310",
    "end": "1696590"
  },
  {
    "text": "So if both a amd b are true,\nthen this becomes true. And then this entire expression\nbecomes true if",
    "start": "1696590",
    "end": "1704429"
  },
  {
    "text": "this part is true or\nthis part is true. So you can build up pretty\ncomplicated expressions.",
    "start": "1704430",
    "end": "1711550"
  },
  {
    "text": "And then the way that they\nrelate to these logical operators is, remember, these\ntake numbers on either side",
    "start": "1711550",
    "end": "1718460"
  },
  {
    "text": "and they produce\nBoolean values. So if I have-- ",
    "start": "1718460",
    "end": "1729900"
  },
  {
    "text": "I can say d is less than e. This is gonna give me a Boolean\nvalue, right, which I",
    "start": "1729900",
    "end": "1738409"
  },
  {
    "text": "can then use the AND operator\non and I can say--",
    "start": "1738410",
    "end": "1743480"
  },
  {
    "text": " So what this does is it says if\nd is less than e and e is",
    "start": "1743480",
    "end": "1751460"
  },
  {
    "text": "less than f, then return true. This, by the way, would check to\nsee that these numbers are",
    "start": "1751460",
    "end": "1758250"
  },
  {
    "text": "in order, so 3, 4, 5, as\nopposed to 5, 4, 3.",
    "start": "1758250",
    "end": "1764350"
  },
  {
    "text": "So is everyone good\non all that? Did I lose anyone? No questions?",
    "start": "1764350",
    "end": "1770019"
  },
  {
    "text": "All right.  So the last couple of things and\nthen I'm gonna turn on the",
    "start": "1770020",
    "end": "1777730"
  },
  {
    "text": "computer and actually walk\nthrough some code with you and we'll be done for the day. So this is kind of the crash\ncourse in basic syntax for our",
    "start": "1777730",
    "end": "1787870"
  },
  {
    "start": "1782000",
    "end": "2029000"
  },
  {
    "text": "basic types for Python. So there were three--",
    "start": "1787870",
    "end": "1793690"
  },
  {
    "start": "1793690",
    "end": "1799519"
  },
  {
    "text": "So what we have now is a way to\ncreate programs that run in a straight line, right.",
    "start": "1799520",
    "end": "1804870"
  },
  {
    "text": "So can anyone give me kind of a\nsynopsis of what a straight line program is?",
    "start": "1804870",
    "end": "1810370"
  },
  {
    "text": " AUDIENCE: Go down\nline by line. PROFESSOR: What's that? AUDIENCE: Everything one--\ngo down line by line.",
    "start": "1810370",
    "end": "1816370"
  },
  {
    "text": "PROFESSOR: Go down line by\nline, do everything once. All right. The problem is that this\ndoesn't allow us to do",
    "start": "1816370",
    "end": "1822590"
  },
  {
    "text": "anything, right. So we have branching. ",
    "start": "1822590",
    "end": "1830929"
  },
  {
    "text": "This is implemented\nby something called an IF statement.",
    "start": "1830930",
    "end": "1836700"
  },
  {
    "text": "Now, the way you use an\nIF statement is-- ",
    "start": "1836700",
    "end": "1859846"
  },
  {
    "text": "all right. This is the full version\nof the IF statement. It's saying, if this condition\nis true, I'm gonna execute the",
    "start": "1859846",
    "end": "1868440"
  },
  {
    "text": "code in this block. If this condition is true, if\nthis condition is false and",
    "start": "1868440",
    "end": "1874140"
  },
  {
    "text": "this condition is true,\nthen I'm gonna execute the code here. And if none of those\nwere true, then I",
    "start": "1874140",
    "end": "1880135"
  },
  {
    "text": "execute what's here. You don't need to have an ELIF,\nand you don't need to",
    "start": "1880135",
    "end": "1885440"
  },
  {
    "text": "have an ELSE. You can just have an IF\nor an IF and an ELSE. So the three versions\nof this branching--",
    "start": "1885440",
    "end": "1896870"
  },
  {
    "start": "1896870",
    "end": "1905210"
  },
  {
    "text": "Now when I, just by way of\nexplanation, when I draw like a line like that, I'm talking\nabout a block of code.",
    "start": "1905210",
    "end": "1912250"
  },
  {
    "text": "Can anyone tell me how Python\nrepresents blocks of code? AUDIENCE: Indents? PROFESSOR: Yeah.",
    "start": "1912250",
    "end": "1918140"
  },
  {
    "text": "So indentation, right. We kind of talked about\nthat on Thursday. So blocks of code are chunks\nof code that belong kind of",
    "start": "1918140",
    "end": "1928070"
  },
  {
    "text": "logically together. So what this saying is that if I\nexecute this, all this block",
    "start": "1928070",
    "end": "1933240"
  },
  {
    "text": "is gonna get executed, all this\nblock is going to get executed, et cetera. ",
    "start": "1933240",
    "end": "1947270"
  },
  {
    "text": "So if I were to represent this\npictorially, then this is kind",
    "start": "1947270",
    "end": "1955460"
  },
  {
    "text": "of the main part of the program\nand then this is the if statement and the block.",
    "start": "1955460",
    "end": "1960685"
  },
  {
    "text": "And then it goes back\nto whatever code is down here, right. If I represent this\npictorially, this",
    "start": "1960685",
    "end": "1969010"
  },
  {
    "text": "would be the true part. So this part of code,\nthis would be else.",
    "start": "1969010",
    "end": "1978190"
  },
  {
    "text": " And then this part would\nbe multiple excursions.",
    "start": "1978190",
    "end": "1986410"
  },
  {
    "text": "So it would look a little\nbit like a tree. ",
    "start": "1986410",
    "end": "2013200"
  },
  {
    "text": "All right. So different branches for the\ndifferent bits of code.",
    "start": "2013200",
    "end": "2019286"
  },
  {
    "text": "Is everyone puzzled on that? Or anyone puzzled on that? OK. And there was a last\nbit of flow control",
    "start": "2019286",
    "end": "2025820"
  },
  {
    "text": "that we talked about. What was it? So if we want to do something\nmultiple times?",
    "start": "2025820",
    "end": "2032938"
  },
  {
    "start": "2029000",
    "end": "2179000"
  },
  {
    "text": "AUDIENCE: Iterations or loops PROFESSOR: Iterations\nor loops, right. So it's called a loop because\nit looks like a loop in the",
    "start": "2032938",
    "end": "2051510"
  },
  {
    "text": "code, right. And there's two variants. There's a WHILE loop and\nthere's a FOR loop.",
    "start": "2051510",
    "end": "2057449"
  },
  {
    "start": "2057449",
    "end": "2065608"
  },
  {
    "text": "A FOR loop is when you want\nto iterate over a finite set of elements.",
    "start": "2065609",
    "end": "2070850"
  },
  {
    "text": " So what this FOR loop does is\nit says I'm gonna take--",
    "start": "2070850",
    "end": "2086250"
  },
  {
    "text": "this is the range function,\nso we'll talk about this a little bit later.",
    "start": "2086250",
    "end": "2091440"
  },
  {
    "text": "But all it does is it gives me\nall the numbers from 1 to 9. It goes 1 past.",
    "start": "2091440",
    "end": "2098530"
  },
  {
    "text": "So. But you don't need to\nknow it just yet. What this is telling Python,\nthough, is that we're gonna",
    "start": "2098530",
    "end": "2104289"
  },
  {
    "text": "execute this block of code\n9 times, all right.",
    "start": "2104290",
    "end": "2110270"
  },
  {
    "text": "And on each iteration through\nthis block of code, we're gonna set i to 1, and then set\nit to 2, set it to 3, 4, 5, 6,",
    "start": "2110270",
    "end": "2119440"
  },
  {
    "text": "7, 8, 9, 10. Anyone lost by that?",
    "start": "2119440",
    "end": "2125050"
  },
  {
    "text": "We'll see an example of\nit pretty shortly. And then the last one\nis a WHILE loop.",
    "start": "2125050",
    "end": "2132066"
  },
  {
    "text": "A WHILE loop executes as long\nas a condition is true.",
    "start": "2132066",
    "end": "2137710"
  },
  {
    "text": "So it's useful-- ",
    "start": "2137710",
    "end": "2143130"
  },
  {
    "text": "don't want to do that. ",
    "start": "2143130",
    "end": "2149089"
  },
  {
    "text": "It's useful when you're not\nnecessarily iterating over",
    "start": "2149090",
    "end": "2154210"
  },
  {
    "text": "this finite set of elements or\nyou don't necessarily know how many times you need to execute\na specific loop.",
    "start": "2154210",
    "end": "2162040"
  },
  {
    "text": "You just know that you need to\nkeep executing this code while something is true. And we'll see an example\nof that pretty quickly.",
    "start": "2162040",
    "end": "2169470"
  },
  {
    "text": "So I basically shotgun blasted a\nwhole bunch of stuff at you.",
    "start": "2169470",
    "end": "2175140"
  },
  {
    "text": "Is there anything that people\nwant me to touch on before I pull down the screen and we\nstart looking at code?",
    "start": "2175140",
    "end": "2181579"
  },
  {
    "start": "2179000",
    "end": "2269000"
  },
  {
    "text": "All right. So has everyone been able\nto get Python set up?",
    "start": "2181580",
    "end": "2188468"
  },
  {
    "text": "All right. So you'll know that this is\nthe editor window, right. So what we use to edit\nlonger scripts in?",
    "start": "2188468",
    "end": "2194440"
  },
  {
    "text": "And you know that this is\nthe interactive prompt. Before I forget, let's see what\nhappens if I divide the",
    "start": "2194440",
    "end": "2200230"
  },
  {
    "text": "integer 5 by the float 2. So Python does what you would\nhope it would do.",
    "start": "2200230",
    "end": "2206130"
  },
  {
    "text": "It turns it into a float. If I do this, though,\nit gives me 2.",
    "start": "2206130",
    "end": "2212670"
  },
  {
    "text": "All right. So it's an easy way to test.  So we've got two chunks\nof code here that",
    "start": "2212670",
    "end": "2220650"
  },
  {
    "text": "I want to go over.  One of them, you've\nalready seen.",
    "start": "2220650",
    "end": "2226670"
  },
  {
    "text": "It's the program that tries\nto find the cube root of a perfect cube.",
    "start": "2226670",
    "end": "2232900"
  },
  {
    "text": "And why don't we just walk\nthrough it and read the code?",
    "start": "2232900",
    "end": "2238900"
  },
  {
    "text": "All right. So here's that raw_input\nfunction that I told you about.",
    "start": "2238900",
    "end": "2244170"
  },
  {
    "text": "Now, it's gonna take a string\nand it's gonna print the string out on the screen\nand it's gonna say enter an integer.",
    "start": "2244170",
    "end": "2250500"
  },
  {
    "text": "And, comment this out. ",
    "start": "2250500",
    "end": "2261549"
  },
  {
    "text": "So let's enter-- what's a perfect cube? All right, the return type of\nraw_input is a string, right.",
    "start": "2261550",
    "end": "2274010"
  },
  {
    "start": "2269000",
    "end": "2544000"
  },
  {
    "text": "So that int will convert to x. Now, here's an example of\na loop, the WHILE loop.",
    "start": "2274010",
    "end": "2283890"
  },
  {
    "text": "And because we don't have\nknowledge of what the user's gonna input when the program\nis run, a while loop is an",
    "start": "2283890",
    "end": "2292850"
  },
  {
    "text": "appropriate kind of control\nloop to use, right. Because we can test a condition\nwhere our guess,",
    "start": "2292850",
    "end": "2305770"
  },
  {
    "text": "which is what's represented by\nans, if we cube it, is it still less than x.",
    "start": "2305770",
    "end": "2312432"
  },
  {
    "text": "All right. I explained that a little\nbit incorrectly. What we're doing here is we're\nmaking a guess, and we're",
    "start": "2312432",
    "end": "2320040"
  },
  {
    "text": "calling it ans right now,\nand we're gonna set it initially to zero.",
    "start": "2320040",
    "end": "2325289"
  },
  {
    "text": "And then we're gonna enter\nthis WHILE loop and we're gonna say we're gonna take\nanswer and we're gonna multiply it three times.",
    "start": "2325290",
    "end": "2331000"
  },
  {
    "text": "We're gonna cube it. And if the value of ans cubed\nis less than whatever input",
    "start": "2331000",
    "end": "2339190"
  },
  {
    "text": "the user gave us, then we're\ngonna keep looping. And on each loop, we're gonna\nincrease the value of our",
    "start": "2339190",
    "end": "2347380"
  },
  {
    "text": "guess for ans, right. And if it turns out that x is a\nperfect cube, eventually, by",
    "start": "2347380",
    "end": "2356780"
  },
  {
    "text": "just iterating through all the\nintegers from 1 to whatever,",
    "start": "2356780",
    "end": "2362450"
  },
  {
    "text": "whatever the cube root of x is,\nwe will find the answer.",
    "start": "2362450",
    "end": "2367810"
  },
  {
    "text": "And we'll know we find the\nanswer because answer cubed is going be less than x.",
    "start": "2367810",
    "end": "2375180"
  },
  {
    "text": "Now, can anyone tell me\nwhy we have abs here? ",
    "start": "2375180",
    "end": "2382784"
  },
  {
    "text": "AUDIENCE: The absolute value. PROFESSOR: Right. So let's say that the user\nentered in like negative 27.",
    "start": "2382784",
    "end": "2391036"
  },
  {
    "text": "It still has a cube, right. It's still negative 3.",
    "start": "2391036",
    "end": "2397060"
  },
  {
    "text": "But the way that we set up our\nloop, if we were to take this out, the program would just\ncontinue executing forever.",
    "start": "2397060",
    "end": "2405500"
  },
  {
    "text": "Well, for actually a very,\nvery long time, but-- the universe would die\nbefore this finished.",
    "start": "2405500",
    "end": "2410845"
  },
  {
    "text": " So we have this absolute\nvalue here. Is anyone puzzled by this?",
    "start": "2410845",
    "end": "2416405"
  },
  {
    "text": "Do I need to belabor\nthe point? OK. So eventually I've entered\n27 and we can actually--",
    "start": "2416405",
    "end": "2427370"
  },
  {
    "text": "a good way to kind of check\nourselves is to print out diagnostic input. ",
    "start": "2427370",
    "end": "2433300"
  },
  {
    "text": "So if guess is 1, that's not-- 1 cubed is obviously not 27.",
    "start": "2433300",
    "end": "2439660"
  },
  {
    "text": "2 cubed is not 27. 3 cubed is 27. And when we get to that point,\nwe leave the loop.",
    "start": "2439660",
    "end": "2446330"
  },
  {
    "text": "And now we're down in\nthis bit of code. All right. Now, because we're asking for\ncube roots, we need to check",
    "start": "2446330",
    "end": "2456660"
  },
  {
    "text": "the condition for when the--",
    "start": "2456660",
    "end": "2464150"
  },
  {
    "text": "sorry, I'm kind of\nmixed up here. Sorry.",
    "start": "2464150",
    "end": "2470950"
  },
  {
    "text": "So when we exit the WHILE loop,\nif we've had a number",
    "start": "2470950",
    "end": "2477530"
  },
  {
    "text": "that's not a perfect cube, then\nwe know that the value",
    "start": "2477530",
    "end": "2483810"
  },
  {
    "text": "the answer stopped on is not\ngoing to equal the cube of it,",
    "start": "2483810",
    "end": "2491670"
  },
  {
    "text": "by way of explanation. ",
    "start": "2491670",
    "end": "2511059"
  },
  {
    "text": "So my last guess\n3 cubed is 27. Let's run it again.",
    "start": "2511060",
    "end": "2517650"
  },
  {
    "text": "Let's say that I\nhave 20, right.",
    "start": "2517650",
    "end": "2526279"
  },
  {
    "text": "So what happens is\nit gets to 4. So 4 cubed is 64, right.",
    "start": "2526280",
    "end": "2531310"
  },
  {
    "text": "That's obviously not 28. ",
    "start": "2531310",
    "end": "2536340"
  },
  {
    "text": "And that's what this\ncondition checks. And so it knows that if it gets\nto that point, it's not a perfect cube.",
    "start": "2536340",
    "end": "2541820"
  },
  {
    "text": " Now, this ELIF statement here\nsays, OK, so if this turns out",
    "start": "2541820",
    "end": "2552829"
  },
  {
    "start": "2544000",
    "end": "2674000"
  },
  {
    "text": "to be true, that means that\nit wasn't a perfect cube. But let's say that it was a\nperfect cube, this will be",
    "start": "2552830",
    "end": "2559850"
  },
  {
    "text": "true, and Python will then start\nto look at this and say, well, let's look at this if\ncondition, or actually--",
    "start": "2559850",
    "end": "2566070"
  },
  {
    "text": "I'm sorry. This condition will be false if\nit's a perfect cube, right.",
    "start": "2566070",
    "end": "2571860"
  },
  {
    "text": " And Python will say, OK, look\nat the next part of the",
    "start": "2571860",
    "end": "2577330"
  },
  {
    "text": "IF-ELIF statement and will say,\nwell, was x less than 0? What it's doing here, it's\nchecking whether or not we've",
    "start": "2577330",
    "end": "2586579"
  },
  {
    "text": "entered a negative\nnumber or not. So if we enter negative 27, what\nit would do is it would",
    "start": "2586580",
    "end": "2599560"
  },
  {
    "text": "to enter this branch, and then\nit would negate whatever answer it got. Because we found the answer\nfor a positive",
    "start": "2599560",
    "end": "2605320"
  },
  {
    "text": "perfect cube, right. ",
    "start": "2605320",
    "end": "2614324"
  },
  {
    "text": "Did I break it? ",
    "start": "2614324",
    "end": "2627570"
  },
  {
    "text": "We are having technical\ndifficulties. ",
    "start": "2627570",
    "end": "2632896"
  },
  {
    "text": "Oh, OK. I'm not sure what\nhappened there.",
    "start": "2632896",
    "end": "2638382"
  },
  {
    "text": "So anyway. So we go about trying to find\nthe cube root of 27, which is",
    "start": "2638382",
    "end": "2646620"
  },
  {
    "text": "the absolute value of 27. And we, of course, find it. It's 3. But then because we've entered\na negative number, Python's",
    "start": "2646620",
    "end": "2655790"
  },
  {
    "text": "gonna enter this branch and\nnegate whatever answer we got. Because we know that in order\nfor it to be negative, then it",
    "start": "2655790",
    "end": "2661110"
  },
  {
    "text": "would have to have been a\nnegative number, right. Is anyone lost? Everyone good?",
    "start": "2661110",
    "end": "2667180"
  },
  {
    "text": " AUDIENCE: Do you need an\nexclamation mark for the--?",
    "start": "2667180",
    "end": "2673810"
  },
  {
    "text": "PROFESSOR: Oh, this one? AUDIENCE: Yeah. PROFESSOR: So this is one of\nthe comparison operators.",
    "start": "2673810",
    "end": "2679150"
  },
  {
    "start": "2674000",
    "end": "2734000"
  },
  {
    "text": "This stands for not equal to. So if I have--",
    "start": "2679150",
    "end": "2684470"
  },
  {
    "text": " do a little Python work here--\nif I have a is equal to 5 and",
    "start": "2684470",
    "end": "2690355"
  },
  {
    "text": "b is equal to 6, if I say a is\ndouble equal, that's gonna",
    "start": "2690355",
    "end": "2696330"
  },
  {
    "text": "check and see if they're\nthe same value. Obviously, they're not, so\nit's gonna return false. On the other hand, if I say\nnot equal-- or bang equal",
    "start": "2696330",
    "end": "2705619"
  },
  {
    "text": "sometimes we call-- this will return true.",
    "start": "2705620",
    "end": "2710852"
  },
  {
    "text": "OK. Any other questions? AUDIENCE: The one that you did\n28 for, shouldn't it not print",
    "start": "2710852",
    "end": "2719569"
  },
  {
    "text": "the cube root of 28 is 4? ",
    "start": "2719570",
    "end": "2726770"
  },
  {
    "text": "PROFESSOR: Oh. Yeah. So yeah.",
    "start": "2726770",
    "end": "2737720"
  },
  {
    "start": "2734000",
    "end": "2884000"
  },
  {
    "text": "Should it be indented? Because if we indented\nhere, right, then what's gonna happen? It's only gonna print\nout the cube root",
    "start": "2737720",
    "end": "2744200"
  },
  {
    "text": "for negative numbers. So what-- what's that?",
    "start": "2744200",
    "end": "2749250"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Well, again, if we\nput an ELSE statement, then it won't print out the cube root\nfor negative numbers.",
    "start": "2749250",
    "end": "2756580"
  },
  {
    "text": "What we could do, and this is\nkind of a hackish way, is",
    "start": "2756580",
    "end": "2761800"
  },
  {
    "text": "write it like this. But that's kind of ugly,\nright, because you're repeating yourself.",
    "start": "2761800",
    "end": "2768390"
  },
  {
    "text": "And one thing about computer\nprogrammers is that we are the laziest people on the\nface of the earth.",
    "start": "2768390",
    "end": "2775030"
  },
  {
    "text": "Like, we'll spend 20 hours\nwriting a program to do something in five minutes that\nwe could have originally done",
    "start": "2775030",
    "end": "2783640"
  },
  {
    "text": "in 10 minutes. It's just our nature. So anyway.",
    "start": "2783640",
    "end": "2789400"
  },
  {
    "text": "So we're repeating ourselves. And while I'm speaking,\nthis is the solution I came up with.",
    "start": "2789400",
    "end": "2794740"
  },
  {
    "text": "If I were to go back and rewrite\nthis, I'd probably make it a little bit\nless convoluted.",
    "start": "2794740",
    "end": "2804740"
  },
  {
    "text": "So maybe, let's try this. ",
    "start": "2804740",
    "end": "2811860"
  },
  {
    "text": "So we're gonna check if we\nwere successful, and then we're gonna check if\nx is less than 0.",
    "start": "2811860",
    "end": "2817530"
  },
  {
    "start": "2817530",
    "end": "2834890"
  },
  {
    "text": "Now we're not repeating\nourselves. And we catch all the cases.",
    "start": "2834890",
    "end": "2841630"
  },
  {
    "text": "So let's make sure that my fix\nworks because oftentimes when you write programs, you'll\nintroduced bugs of your own.",
    "start": "2841630",
    "end": "2848190"
  },
  {
    "text": "So we've tested when\nit is a cube. Let's test it when it's not. OK.",
    "start": "2848190",
    "end": "2854280"
  },
  {
    "text": " So there we fixed it, I think.",
    "start": "2854280",
    "end": "2862150"
  },
  {
    "text": "One thing about computer\nprograms is that this is a very simple case, but for\nlonger, more complicated",
    "start": "2862150",
    "end": "2868690"
  },
  {
    "text": "programs, it's almost\nimpossible to get out all of the bugs. But in this case, pretty\nconfident that we were successful, right.",
    "start": "2868690",
    "end": "2876040"
  },
  {
    "text": "So does anyone else have\nany other questions on this bit, right?",
    "start": "2876040",
    "end": "2881740"
  },
  {
    "text": "All right. The last thing that I'm gonna go\nover is something called a fizzbuzz program.",
    "start": "2881740",
    "end": "2887860"
  },
  {
    "start": "2884000",
    "end": "3039000"
  },
  {
    "text": "This is just a silly\nlittle program. This is the English\nspecification.",
    "start": "2887860",
    "end": "2892869"
  },
  {
    "text": "And this is kind of a first\ninstance of where we're gonna take English and kind of break\nit down into code, figure out",
    "start": "2892870",
    "end": "2900410"
  },
  {
    "text": "how to break it up, chunk it\nup, and abstract it into something that actually works. So the problem is to write a\nprogram the prints the numbers",
    "start": "2900410",
    "end": "2907960"
  },
  {
    "text": "from 1 to 100, but for multiples\nof three, print fizz instead of the number. And for multiples of\n5, print buzz.",
    "start": "2907960",
    "end": "2914880"
  },
  {
    "text": "And if there are multiples are\nboth 3 and 5, print fizzbuzz.",
    "start": "2914880",
    "end": "2920170"
  },
  {
    "text": "So if it says numbers from 1 to\n100, when you see something like this when you're trying\nto figure out how to write",
    "start": "2920170",
    "end": "2928460"
  },
  {
    "text": "your programs, the first thing\nthat should go off in your mind is, I probably need a for\nloop because I'm iterating",
    "start": "2928460",
    "end": "2933950"
  },
  {
    "text": "over a set of numbers. So we happen to know the\nnumbers 1 to 100.",
    "start": "2933950",
    "end": "2942260"
  },
  {
    "text": "And here's a range\nfunction again. And we'll talk about range\nnext week most likely.",
    "start": "2942260",
    "end": "2948190"
  },
  {
    "text": "And all we're gonna do is first\nwe're gonna get the",
    "start": "2948190",
    "end": "2953380"
  },
  {
    "text": "string value of this number. So remember how earlier you\nasked if, or one of the",
    "start": "2953380",
    "end": "2959810"
  },
  {
    "text": "students asked, if we had a\nnumber in the string, if that was a number or not? ",
    "start": "2959810",
    "end": "2967250"
  },
  {
    "text": "So like this. ",
    "start": "2967250",
    "end": "2972280"
  },
  {
    "text": "That's what that STR\nfunction does. So if I have a variable a is\nequal to 1, I can say s is",
    "start": "2972280",
    "end": "2979840"
  },
  {
    "text": "equal to STR a, and s is\nnow gonna be that.",
    "start": "2979840",
    "end": "2987106"
  },
  {
    "text": "All right. And then what I'm gonna do here\nis I'm gonna check the",
    "start": "2987106",
    "end": "2992660"
  },
  {
    "text": "integer value, so i, and\nsee if it's evenly",
    "start": "2992660",
    "end": "2998500"
  },
  {
    "text": "divisible by 3 or 5. And the way that I\nchecked that is I use a modulo operator.",
    "start": "2998500",
    "end": "3003800"
  },
  {
    "text": "That's what that percent\nsign is. What this operator does is it\ntakes two integer values and",
    "start": "3003800",
    "end": "3010220"
  },
  {
    "text": "it returns the remainder after\nyou've divided the left integer by the right integer.",
    "start": "3010220",
    "end": "3016910"
  },
  {
    "text": "So if I have 6 modulo 3,\nwhat's that gonna be?",
    "start": "3016910",
    "end": "3025176"
  },
  {
    "text": "It should be 0, right, because\nyou can divide 6 evenly by 3. The other hand, if I say 5\nmodulo 3, then that's going to",
    "start": "3025176",
    "end": "3033390"
  },
  {
    "text": "be 2, right. Yeah, I had to think about\nit for a second.",
    "start": "3033390",
    "end": "3040450"
  },
  {
    "text": "OK. So that's all this does. And these are two expressions\nthat return a",
    "start": "3040450",
    "end": "3048210"
  },
  {
    "text": "Boolean value, right. Because this modulo operation\nis gonna return an integer,",
    "start": "3048210",
    "end": "3054250"
  },
  {
    "text": "and I'm gonna use the equality\noperator to compare it to a number, another integer, 0,\nand that's gonna give me a",
    "start": "3054250",
    "end": "3061020"
  },
  {
    "text": "Boolean value. This expression also gives\nme a Boolean value.",
    "start": "3061020",
    "end": "3066310"
  },
  {
    "text": "And then I'm gonna combine\nthem into-- using the or operator\nfor Boolean values--",
    "start": "3066310",
    "end": "3071780"
  },
  {
    "text": "into a larger expression. And then if this is true, then\nI know that I'm gonna have to",
    "start": "3071780",
    "end": "3078625"
  },
  {
    "text": "at lease print fizz,\nbuzz, or fizzbuzz. Because I'm not gonna print\nthe number, right, because",
    "start": "3078625",
    "end": "3084109"
  },
  {
    "text": "it's a multiple of 3 or 5. And so all this code does is\njust figures out if it's",
    "start": "3084110",
    "end": "3092890"
  },
  {
    "text": "evenly divisible by 3, then\nI know I print fizz. So I'm gonna concatenate my\nfinal string onto it.",
    "start": "3092890",
    "end": "3098970"
  },
  {
    "text": "And then if it's evenly\ndivisible by 5, then I know I",
    "start": "3098970",
    "end": "3104570"
  },
  {
    "text": "need to print buzz. So then I'm gonna attach\nbuzz onto my output. And then I'm just gonna print\nwhatever I'm left over with.",
    "start": "3104570",
    "end": "3112250"
  },
  {
    "text": "So to see this in action\nbecause we are way out of time right now.",
    "start": "3112250",
    "end": "3117730"
  },
  {
    "start": "3117730",
    "end": "3126980"
  },
  {
    "text": "So 1, 2, fizz, 4, buzz,\n6, fizz, 7, 8.",
    "start": "3126980",
    "end": "3132740"
  },
  {
    "text": "Then we have fizzbuzz for 15. So it seems to work.",
    "start": "3132740",
    "end": "3137860"
  },
  {
    "text": "Everyone follow that? We good? So I'm done for this\nrecitation.",
    "start": "3137860",
    "end": "3143970"
  },
  {
    "start": "3143970",
    "end": "3148330"
  }
]