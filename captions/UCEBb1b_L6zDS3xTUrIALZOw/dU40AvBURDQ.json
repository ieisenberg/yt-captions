[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6350"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6350",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13320",
    "end": "20552"
  },
  {
    "text": "PROFESSOR SRINI\nDEVADAS: Erik and I have been tag teaming\nthis lecture in this class so we're going to\nsplit this lecture.",
    "start": "20552",
    "end": "28250"
  },
  {
    "text": "So I get to do the\nfirst 2 minutes. No.",
    "start": "28250",
    "end": "33950"
  },
  {
    "text": "I get to do the first\n20 minutes, or so, talking about some\nof my research",
    "start": "33950",
    "end": "40670"
  },
  {
    "text": "in parallel architecture. And Erik's going to talk\nabout a bunch of things that he's been up to over\nthe years in Algorithm Design",
    "start": "40670",
    "end": "48770"
  },
  {
    "text": "and Analysis. So let's get started. ",
    "start": "48770",
    "end": "56060"
  },
  {
    "text": "When was the first\nPC built, anybody? ",
    "start": "56060",
    "end": "61399"
  },
  {
    "text": "Yeah. AUDIENCE: In the 1950s. PROFESSOR SRINI DEVADAS: No. The first personal\ncomputer was 1981--",
    "start": "61400",
    "end": "66580"
  },
  {
    "text": "not the first computer. So all of you know about\nIntel, and Microsoft, and IBM,",
    "start": "66580",
    "end": "74920"
  },
  {
    "text": "and so on.  Intel's gift to humankind\nis the x86 architecture.",
    "start": "74920",
    "end": "83430"
  },
  {
    "text": "Though, some people\nwould argue that point. And the x86 architecture\nwas invented in 1981,",
    "start": "83430",
    "end": "92110"
  },
  {
    "text": "and was part of the first PC-- that provided the horsepower\nfor the first PC-- the IBM PC.",
    "start": "92110",
    "end": "101270"
  },
  {
    "text": "And it ran at 5 megahertz. ",
    "start": "101270",
    "end": "108930"
  },
  {
    "text": "And x86 has been around-- you still can buy x86 computers. The 80486, in 1989,\nran at 25 megahertz.",
    "start": "108930",
    "end": "121570"
  },
  {
    "text": "So you can see a trend here. And the 80486, as it\nturns out, ended up",
    "start": "121570",
    "end": "127060"
  },
  {
    "text": "being called the\nI486 because there was a court ruling that said\nthat you couldn't trademark",
    "start": "127060",
    "end": "134000"
  },
  {
    "text": "numbers. And so Intel, at\nthat point, decided to start naming\ntheir processors.",
    "start": "134000",
    "end": "139189"
  },
  {
    "text": " So the Pentium, which is\none of the more famous Intel",
    "start": "139190",
    "end": "147170"
  },
  {
    "text": "processors, was built\nand came out in 1993. And the clock speed\nwent up to 66 megahertz,",
    "start": "147170",
    "end": "155240"
  },
  {
    "text": "back in the early '90s. And since this is\njust such a cool name,",
    "start": "155240",
    "end": "162010"
  },
  {
    "text": "Intel continued to call\nits processors Pentium. And the Pentium 4, in 2000, had\nthis incredibly deep pipeline",
    "start": "162010",
    "end": "172855"
  },
  {
    "text": "where you broke\nup the computation into a bunch of stages. In fact, it had a\n30 stage pipeline. And so the clock speed went up\nall the way to 1.5 gigahertz.",
    "start": "172855",
    "end": "182580"
  },
  {
    "text": "The Pentium was famous\nfor many things, including a couple of\nbugs in the floating point",
    "start": "182580",
    "end": "190010"
  },
  {
    "text": "pipeline where division,\nin particular corner cases,",
    "start": "190010",
    "end": "195540"
  },
  {
    "text": "wasn't done correctly. And there was also this bug\ncalled the F00F bug, which",
    "start": "195540",
    "end": "204170"
  },
  {
    "text": "allowed a malicious program\nto crash the entire system, regardless of whether it had\nadministrative privileges",
    "start": "204170",
    "end": "212600"
  },
  {
    "text": "or not. But the Pentium was\nobviously very successful. A lot of machines sold.",
    "start": "212600",
    "end": "220020"
  },
  {
    "text": "And it felt like it was only\ngoing to be a matter of time before we got to\n10s of gigahertz,",
    "start": "220020",
    "end": "227180"
  },
  {
    "text": "the way things were going. As you can see, this is\na pretty steep growth from 5 megahertz to\n25 to 1.5 gigahertz",
    "start": "227180",
    "end": "234070"
  },
  {
    "text": "in the space of about 20 years. As it turns out, after the\nPentium D, which came out",
    "start": "234070",
    "end": "243760"
  },
  {
    "text": "in 2005, where the clock speed\npeaked at about 3.2 gigahertz,",
    "start": "243760",
    "end": "249769"
  },
  {
    "text": "clock frequency\nstopped increasing. And what you see\nnow are things that",
    "start": "249770",
    "end": "257880"
  },
  {
    "text": "correspond to multiple\nprocessors on a chip. So for example, the Quad\nCore Xeon came out in 2008.",
    "start": "257880",
    "end": "266110"
  },
  {
    "text": "You can still buy it. Only runs at 3 gigahertz,\nwhich is basically about",
    "start": "266110",
    "end": "271370"
  },
  {
    "text": "the same as the Pentium D ran. Each of these has a\nrange of frequencies.",
    "start": "271370",
    "end": "277099"
  },
  {
    "text": "And beyond about\n2005, the clock speed of processors that\nyou can buy is kind of",
    "start": "277100",
    "end": "283540"
  },
  {
    "text": "saturated at about 3 gigahertz. And the way you're\ngetting performance",
    "start": "283540",
    "end": "290060"
  },
  {
    "text": "is by putting multiple\nprocessors on the chip. And people use the term cores\nsynonymously with processors.",
    "start": "290060",
    "end": "299570"
  },
  {
    "text": "So a quad core\nmeans that they're, in effect, four x86\nprocessors on the same silicon",
    "start": "299570",
    "end": "305910"
  },
  {
    "text": "integrated circuit. And they're\ninterconnected together. And they talk to memory.",
    "start": "305910",
    "end": "311920"
  },
  {
    "text": "And you have, essentially,\na parallel processor on a single chip.",
    "start": "311920",
    "end": "316980"
  },
  {
    "text": "And the single user, potentially\nrunning many programs, is using this system.",
    "start": "316980",
    "end": "322350"
  },
  {
    "text": "And you have dual core\nprocessors on your laptops. And so the scale, now, is--",
    "start": "322350",
    "end": "328250"
  },
  {
    "text": "the metric now, I should say-- is how many cores do\nyou have on a chip. And people are\npredicting that we're",
    "start": "328250",
    "end": "334330"
  },
  {
    "text": "going to have 1,000\ncores by 2020, on a chip. So this brings us to the problem\nof how do we use parallelism.",
    "start": "334330",
    "end": "343450"
  },
  {
    "text": "So there's a lot of work\nin parallel algorithms. And there's also work\nin building hardware,",
    "start": "343450",
    "end": "348770"
  },
  {
    "text": "such that algorithms can\nsort of automatically be parallelized while\nthey're running in hardware,",
    "start": "348770",
    "end": "354210"
  },
  {
    "text": "so they can run faster,\nand so on and so forth. So some of my research is\nin parallel architecture.",
    "start": "354210",
    "end": "360240"
  },
  {
    "text": "Some of it is in\nparallel algorithms. I want to give you\na sense of what the problems are in building\nparallel architectures.",
    "start": "360240",
    "end": "368669"
  },
  {
    "text": "And in particular, I'll start\nwith a canonical system that corresponds to, let's say,\nthis quad core system.",
    "start": "368670",
    "end": "376215"
  },
  {
    "text": "And so you have 4 processors on\nthis single integrated circuit.",
    "start": "376215",
    "end": "383730"
  },
  {
    "text": "So that signifies that. And typically, you have a lot\nof fast, static random-access",
    "start": "383730",
    "end": "392040"
  },
  {
    "text": "memory, SRAM, on the same chip. So typically,\nmegabytes of the memory",
    "start": "392040",
    "end": "398960"
  },
  {
    "text": "on the chip and gigabytes\nof memory in DRAM,",
    "start": "398960",
    "end": "405819"
  },
  {
    "text": "which are separate modules that\nare connected via high speed bus, off the chip. So there are usually\nmany DRAM modules.",
    "start": "405820",
    "end": "413810"
  },
  {
    "text": "They're called DIMMS-- if you\nmight have heard the term. So the connection between\nthe processors and the SRAM",
    "start": "413810",
    "end": "421670"
  },
  {
    "text": "is typically very fast. It's on-chip. Things being clocked\nat gigahertz.",
    "start": "421670",
    "end": "428540"
  },
  {
    "text": "And when you go\noff-chip, you're down to a few hundred megahertz. So typically, an order\nof magnitude less speed.",
    "start": "428540",
    "end": "435060"
  },
  {
    "text": "But you're accessing\nmuch more memory. So this is really\ngigabytes and this is at the level of megabytes. ",
    "start": "435060",
    "end": "442514"
  },
  {
    "text": "If you see this picture, here-- if you think about the number\nof processors increasing",
    "start": "442515",
    "end": "448720"
  },
  {
    "text": "from four to eight to\n16, all the way to, say, to hundreds\nof processors, you",
    "start": "448720",
    "end": "456180"
  },
  {
    "text": "can see that there's going\nto be a bottleneck associated with accessing the memory.",
    "start": "456180",
    "end": "461550"
  },
  {
    "text": "The big problem is\nyou can't possibly build memory that\nserves hundreds",
    "start": "461550",
    "end": "468210"
  },
  {
    "text": "of requests in parallel. If you try and\nmake a large SRAM, which is megabytes long, the\nnumber of ports in the SRAM--",
    "start": "468210",
    "end": "475919"
  },
  {
    "text": "read ports-- is roughly\nof the order of four.",
    "start": "475920",
    "end": "481760"
  },
  {
    "text": "And after that it's\nkind of hard to build. So this architecture isn't going\nto be sustainable beyond 4, 8,",
    "start": "481760",
    "end": "492220"
  },
  {
    "text": "maybe 16 cores. So typically, what\npeople build is-- or people are trying\nto build in academia--",
    "start": "492220",
    "end": "499790"
  },
  {
    "text": "is something that\ncorresponds to a distributed architecture on the\nchip, where you have",
    "start": "499790",
    "end": "508450"
  },
  {
    "text": "processors and memory in tiles. So you have,\nessentially, something",
    "start": "508450",
    "end": "519059"
  },
  {
    "text": "like this, where you can\nimagine having literally 100 processors on a chip that\ncorrespond to an implementation",
    "start": "519059",
    "end": "530657"
  },
  {
    "text": "where you build tiles, where\nyou have a processor that's doing the computation,\nand you have memory--",
    "start": "530657",
    "end": "536510"
  },
  {
    "text": "sometimes called cache memory. But there's multiple levels\nof caches, typically,",
    "start": "536510",
    "end": "541560"
  },
  {
    "text": "that are attached to\neach of these processors. And the space between\nthe processor tiles",
    "start": "541560",
    "end": "551400"
  },
  {
    "text": "is reserved for interconnect\nor for wires that",
    "start": "551400",
    "end": "557730"
  },
  {
    "text": "connect these processors up. And so there's research that\ngoes on in routing algorithms.",
    "start": "557730",
    "end": "563270"
  },
  {
    "text": "How you figure out if\nthese processors want to talk to each\nother; what the best",
    "start": "563270",
    "end": "568480"
  },
  {
    "text": "way of routing the\nmessages are; you want to find the shortest path. In this case, the\nweight corresponds",
    "start": "568480",
    "end": "573520"
  },
  {
    "text": "to the congestion\nthat's associated with each of these\nchannels that you have.",
    "start": "573520",
    "end": "579570"
  },
  {
    "text": "And people actually\nuse algorithms like weighted shortest\npaths, in hardware,",
    "start": "579570",
    "end": "584880"
  },
  {
    "text": "to determine what the best way\nof getting from here to there is. It may not be this way. It may be going around the\nchip simply because that path--",
    "start": "584880",
    "end": "593820"
  },
  {
    "text": "the latter one is\nless congested.  The other issue\nthat comes up has",
    "start": "593820",
    "end": "600620"
  },
  {
    "text": "to do with how long it\ntakes to go across the chip and come back.",
    "start": "600620",
    "end": "606560"
  },
  {
    "text": "So if this processor wants\nto access its local memory-- that's typically\npretty simple or fast.",
    "start": "606560",
    "end": "614710"
  },
  {
    "text": "But if it wants to\naccess remote memory-- and it's quite\npossible that it's sharing some data with a\ndifferent thread running",
    "start": "614710",
    "end": "622290"
  },
  {
    "text": "on a different processor. So typically, there's\na program running on this processor,\nsometimes called a thread,",
    "start": "622290",
    "end": "629209"
  },
  {
    "text": "and this program may share data\nwith a different program, which",
    "start": "629210",
    "end": "634480"
  },
  {
    "text": "is running on this processor. Or it may just require\na lot more space. And what this program has\nto do is make a request",
    "start": "634480",
    "end": "643080"
  },
  {
    "text": "all the way to this processor\nand this particular cache in this processor.",
    "start": "643080",
    "end": "648860"
  },
  {
    "text": "And then it gets the data back. So what you see here\nis a round trip access",
    "start": "648860",
    "end": "657990"
  },
  {
    "text": "that goes across the chip. And this distance,\nif it's large,",
    "start": "657990",
    "end": "665510"
  },
  {
    "text": "could take 10s of cycles. So typically, it's\na single cycle to access local memory--\nthe fastest local memory,",
    "start": "665510",
    "end": "671990"
  },
  {
    "text": "called the L1 cache. But it could take\n10s of cycles to go send a message across the\nchip and 10s of cycles",
    "start": "671990",
    "end": "677310"
  },
  {
    "text": "to get the data back. So the bottleneck, really,\nin parallel processing",
    "start": "677310",
    "end": "683480"
  },
  {
    "text": "from a standpoint\nof communication is this routing of messages\nand getting the messages back.",
    "start": "683480",
    "end": "691028"
  },
  {
    "text": "One of the things that my\nresearch group is doing is looking at the\nnotion of migrating",
    "start": "691028",
    "end": "697460"
  },
  {
    "text": "computation as opposed to data. We call it execution migration,\nwhere you could say--",
    "start": "697460",
    "end": "706640"
  },
  {
    "text": "suppose I have a processor\nrunning a particular program,",
    "start": "706640",
    "end": "713900"
  },
  {
    "text": "out here. And if this program wanted to\naccess a remote memory, then,",
    "start": "713900",
    "end": "720920"
  },
  {
    "text": "rather than doing what I\njust showed you there-- send a message,\nget the data back-- you could imagine that you could\nmigrate the program itself.",
    "start": "720920",
    "end": "730420"
  },
  {
    "text": "And in particular,\nyou think of it as migrating the\ncontext of the program",
    "start": "730420",
    "end": "736830"
  },
  {
    "text": "from this processor to this one. And so what is the context? For those of you who\nhave taken 6.004 probably",
    "start": "736830",
    "end": "747540"
  },
  {
    "text": "know what this is. But it's simply where\nyou are in terms",
    "start": "747540",
    "end": "753630"
  },
  {
    "text": "of executing your program. And that's typically\ngiven to you by our program counter, and your\ncurrent state of your register",
    "start": "753630",
    "end": "761340"
  },
  {
    "text": "file, and a few other things,\nincluding cache memory",
    "start": "761340",
    "end": "767450"
  },
  {
    "text": "and so on and so forth. So the advantage with\nexecution migration is that it's a one way trip,\nas opposed to a round trip.",
    "start": "767450",
    "end": "776160"
  },
  {
    "text": " You don't have to send a\nmessage and get the data back,",
    "start": "776160",
    "end": "785620"
  },
  {
    "text": "which would be two\nmessages, if you will-- one in the case of the address\nand the other for the data--",
    "start": "785620",
    "end": "791520"
  },
  {
    "text": "but you migrate your execution. Since you have\ncomputation out here, you can run on this\nremote processor.",
    "start": "791520",
    "end": "800569"
  },
  {
    "text": "So that's one of the advantages\nof execution migration One of the downsides\nof it is that this",
    "start": "800570",
    "end": "807860"
  },
  {
    "text": "can be multiple kilobytes-- or kilobits. And it could be significantly\nmore in terms of size,",
    "start": "807860",
    "end": "815750"
  },
  {
    "text": "or in terms of bits, than the\ndata that you want to access. So there's a trade-off here.",
    "start": "815750",
    "end": "821180"
  },
  {
    "text": "And then, when any time\nyou have a trade-off, you can think of an\nalgorithm to try and find the optimal trade-off.",
    "start": "821180",
    "end": "827100"
  },
  {
    "text": "So this is the context for the\nparticular optimization problem",
    "start": "827100",
    "end": "834649"
  },
  {
    "text": "that we need to solve,\nhere, that corresponds to really deciding when you\nwant to do data migration",
    "start": "834650",
    "end": "843230"
  },
  {
    "text": "and when you want to\ndo execution migration. There's a choice.",
    "start": "843230",
    "end": "848870"
  },
  {
    "text": "At the top level, it's a\nround trip to get the data. So you're really\ntraveling longer--",
    "start": "848870",
    "end": "856760"
  },
  {
    "text": "twice as long. The distance is twice as much. But it's possible\nthat the amount",
    "start": "856760",
    "end": "863589"
  },
  {
    "text": "of state that\nyou'd have to move, in terms of taking your\ncontext of your thread",
    "start": "863590",
    "end": "869790"
  },
  {
    "text": "and moving across the\nchip, could be large enough that it offsets the advantage\nof the shorter distance.",
    "start": "869790",
    "end": "878020"
  },
  {
    "text": "So we set this up as an\noptimization problem. So now we're in the realm of--\nwe moved from 6.004 to 6.006,",
    "start": "878020",
    "end": "886110"
  },
  {
    "text": "here, in the last\ncouple of seconds. So assume we know or\ncan predict the access",
    "start": "886110",
    "end": "897990"
  },
  {
    "text": "pattern of a program.",
    "start": "897990",
    "end": "904720"
  },
  {
    "text": "And you can do this--\npeople build these things in hardware-- prefetch engines, branch\npredictors, and so on.",
    "start": "904720",
    "end": "911100"
  },
  {
    "text": "They're in the x86 machines. And you can tell-- especially\nif you're going through a loop over and over--",
    "start": "911100",
    "end": "916660"
  },
  {
    "text": "you can make this prediction. So you have some\namount of look ahead. And you know that\nm1 through mn are",
    "start": "916660",
    "end": "925000"
  },
  {
    "text": "the memory accesses that this\nprogram is going to make. And these other\nmemory addresses.",
    "start": "925000",
    "end": "930725"
  },
  {
    "text": " And I'm going to think about\np of m1, p of m2, p of mn,",
    "start": "930725",
    "end": "942670"
  },
  {
    "text": "as the processor\ncaches for each mi.",
    "start": "942670",
    "end": "952399"
  },
  {
    "text": "So what might be the\ncase, in a simple example, is you want to access\nmemory in processor one.",
    "start": "952400",
    "end": "962827"
  },
  {
    "text": "You're sitting there and\nyou want to access memory in processor one. And then, the next one,\nyou want to access memory",
    "start": "962827",
    "end": "968370"
  },
  {
    "text": "in processor two. And so on and so forth.",
    "start": "968370",
    "end": "973378"
  },
  {
    "text": "So you might see\nsomething like that. So the sequence of\nmemory addressees-- if you're sitting on processor\none-- this first one is local.",
    "start": "973378",
    "end": "980203"
  },
  {
    "text": "And then, after that,\nyou want to access processor two's memory because\nyou're sharing data with it. Then you're back home,\nagain, to processor one.",
    "start": "980203",
    "end": "987311"
  },
  {
    "text": "And so on and so forth.  So that's one\nexample of a set up.",
    "start": "987312",
    "end": "994610"
  },
  {
    "text": "And we can think of about the\ncost of migration as-- if you",
    "start": "994610",
    "end": "999910"
  },
  {
    "text": "want to go from s to d-- as being a function\nof the distance,",
    "start": "999910",
    "end": "1005400"
  },
  {
    "text": "s comma d, plus\nsome constant, which is proportional to\nthe context size.",
    "start": "1005400",
    "end": "1013987"
  },
  {
    "text": "And that context size,\nwe're going to assume is fixed for a\nparticular architecture.",
    "start": "1013987",
    "end": "1019070"
  },
  {
    "text": "It may change for\ndifferent architectures, but if it's a few\nkilobits, then there's",
    "start": "1019070",
    "end": "1024368"
  },
  {
    "text": "going to be some overhead\nassociated with putting the context onto the network. And it's a sizable overhead that\nneeds to be taken into account.",
    "start": "1024368",
    "end": "1032000"
  },
  {
    "text": "That's the cost of migration. The cost of an\naccess, s comma d,",
    "start": "1032000",
    "end": "1038209"
  },
  {
    "text": "is twice the distance\nbetween s and d. And it's typically just a\nword that you want to access--",
    "start": "1038210",
    "end": "1047589"
  },
  {
    "text": "32 bits, 64 bits-- and so there's no\nadditional overhead associated with a data access.",
    "start": "1047589",
    "end": "1054750"
  },
  {
    "text": "So there you go. You have the formulation\nof the problem.",
    "start": "1054750",
    "end": "1059800"
  },
  {
    "text": "You have the trade-off written,\nwhere the cost of migration has just the distance.",
    "start": "1059800",
    "end": "1066500"
  },
  {
    "text": "But it has a constant factor. And you've got twice the\ndistance, here, for the access.",
    "start": "1066500",
    "end": "1072780"
  },
  {
    "text": "Now if s equals d, and I\nwant to write this down, you have a local access.",
    "start": "1072780",
    "end": "1078139"
  },
  {
    "text": "And the cost is\nassumed to be zero. You could change that. We are in the realm of\nthe theory and symbols.",
    "start": "1078140",
    "end": "1085760"
  },
  {
    "text": "So you can do whatever you want. But given those\nequations, our problem",
    "start": "1085760",
    "end": "1092770"
  },
  {
    "text": "is decide when to migrate to\nminimize total memory access",
    "start": "1092770",
    "end": "1106780"
  },
  {
    "text": "cost. ",
    "start": "1106780",
    "end": "1113940"
  },
  {
    "text": "So in our example\nthere, I suppose we had p1, p2, p2, et cetera.",
    "start": "1113940",
    "end": "1121850"
  },
  {
    "text": "And let's say you start at p1.  This first one would\nbe a local access.",
    "start": "1121850",
    "end": "1129447"
  },
  {
    "text": "And then, you may\ndecide that you want to migrate to p2, over here. ",
    "start": "1129447",
    "end": "1136120"
  },
  {
    "text": "In this case, you get this\nas a local access, as well. So is this one. Right here, you might want to\nmigrate to p1 back to be p1.",
    "start": "1136120",
    "end": "1143933"
  },
  {
    "text": " So this becomes a local access. That's a local access.",
    "start": "1143933",
    "end": "1150019"
  },
  {
    "text": "They're all, essentially, free. And then, if you\njust stay at p1, over here, you may end up doing\nremote accesses to p3 and p2,",
    "start": "1150020",
    "end": "1159140"
  },
  {
    "text": "respectively. And so you have a\ncost of migration-- the cost of migration and the\ncost of two remote access.",
    "start": "1159140",
    "end": "1167130"
  },
  {
    "text": " So that's the set up. How are we going to\nsolve this problem?",
    "start": "1167130",
    "end": "1172895"
  },
  {
    "text": " Are we going Dijkstra?",
    "start": "1172895",
    "end": "1178610"
  },
  {
    "text": "Are we going to\nuse Bellman-Ford? Are we going to use\nbalanced search trees? Are we going to\nuse hash functions?",
    "start": "1178610",
    "end": "1184158"
  },
  {
    "text": "What are we going to use? AUDIENCE: Dynamic Programming. PROFESSOR SRINI DEVADAS:\nDynamic Programming. All together. EVERYONE: Dynamic Programming.",
    "start": "1184158",
    "end": "1190410"
  },
  {
    "text": "PROFESSOR SRINI DEVADAS:\nDynamic programming, all right. We're going to use\ndynamic programming to solve this problem. ",
    "start": "1190410",
    "end": "1197180"
  },
  {
    "text": "Good. So Erik taught you something. AUDIENCE: Where are the erasers?",
    "start": "1197180",
    "end": "1202220"
  },
  {
    "text": "PROFESSOR SRINI DEVADAS: Yeah. Where are the erasers? I think they\nfluttered down here. All right. Let me bail out and use this\nwhile you find the erasers.",
    "start": "1202220",
    "end": "1208545"
  },
  {
    "text": " So a program at p1, which\nis the processor, initially.",
    "start": "1208545",
    "end": "1216150"
  },
  {
    "text": "I'm just going to\nset up this DP. Let's assume that the number\nof processors equals Q. Now,",
    "start": "1216150",
    "end": "1229808"
  },
  {
    "text": "what are the subproblems? ",
    "start": "1229808",
    "end": "1235100"
  },
  {
    "text": "You could do this\nmany different ways. Let's go ahead and use prefixes.",
    "start": "1235100",
    "end": "1241100"
  },
  {
    "text": "And so DP(k,p1) is the cost\nof the optimal solution",
    "start": "1241100",
    "end": "1253710"
  },
  {
    "text": "for the prefix m1 through\nmk of memory accesses,",
    "start": "1253710",
    "end": "1267840"
  },
  {
    "text": "when the program starts\nat p1 and ends at pi.",
    "start": "1267840",
    "end": "1278111"
  },
  {
    "text": "So that's my subproblem. I want to know, as\nI build this up, what is the optimal\nway that I'm going",
    "start": "1278111",
    "end": "1284630"
  },
  {
    "text": "to choose between\nmigrations and accesses for the first k memory access,\nassuming a starting point at p1",
    "start": "1284630",
    "end": "1294690"
  },
  {
    "text": "and ending at some pi. And I need to build\nup these subproblems. And I want to grow them.",
    "start": "1294690",
    "end": "1300200"
  },
  {
    "text": " Let's go ahead and set this up.",
    "start": "1300200",
    "end": "1308460"
  },
  {
    "text": "What I want to do now is\nfigure out DP(k plus 1, pj). ",
    "start": "1308460",
    "end": "1316050"
  },
  {
    "text": "And assuming I have all\nof the k, pi's computed--",
    "start": "1316050",
    "end": "1321400"
  },
  {
    "text": "and how many\nsubproblems do I have? How many subproblems do I have?",
    "start": "1321400",
    "end": "1327820"
  },
  {
    "text": "Total? Look at this and tell me what\nthe ranges of the possibilities",
    "start": "1327820",
    "end": "1334880"
  },
  {
    "text": "are. So how many subproblems\nwould I have? Someone? ",
    "start": "1334880",
    "end": "1342880"
  },
  {
    "text": "N times Q. So you have\nN times Q subproblems.",
    "start": "1342880",
    "end": "1347950"
  },
  {
    "text": " So you've set this up for\nup until k and for all",
    "start": "1347950",
    "end": "1357260"
  },
  {
    "text": "of the pi's. Now, what you have to do\nis essentially say, well,",
    "start": "1357260",
    "end": "1363230"
  },
  {
    "text": "DP of k plus 1,\npj is going to be k, pj plus cost of\naccess pj, p of mk plus 1",
    "start": "1363230",
    "end": "1381220"
  },
  {
    "text": "if pj is not equal\nto p of mk plus 1.",
    "start": "1381220",
    "end": "1387655"
  },
  {
    "text": "So there's going\nto be two cases. I'll just write this\nout and I'll explain it.",
    "start": "1387655",
    "end": "1393250"
  },
  {
    "text": "But the first case corresponds\nto if the new memory access is not in the processor\ncache corresponding to pj,",
    "start": "1393250",
    "end": "1401590"
  },
  {
    "text": "then what you could do\nis use the optimum value,",
    "start": "1401590",
    "end": "1406640"
  },
  {
    "text": "where you ended\npj, and simply do a remote access that corresponds\nto accessing mk plus 1.",
    "start": "1406640",
    "end": "1415020"
  },
  {
    "text": "So that's one case. The case is to use\nthe minimum solution--",
    "start": "1415020",
    "end": "1427600"
  },
  {
    "text": "optimum solution\ncorresponding to ending at pi",
    "start": "1427600",
    "end": "1433470"
  },
  {
    "text": "and do a migration. You have cost of\nmigration from pi to pj.",
    "start": "1433470",
    "end": "1441460"
  },
  {
    "text": "And you do this if you want\nto go do p of mk plus 1--",
    "start": "1441460",
    "end": "1453220"
  },
  {
    "text": "the processor corresponding\nto p of mk plus 1. So that's the set up for\nthis dynamic program.",
    "start": "1453220",
    "end": "1461120"
  },
  {
    "text": "What you've done is created\na sub problem, its optimum, and then you look\nat the two cases.",
    "start": "1461120",
    "end": "1467279"
  },
  {
    "text": "You want to go migrate\nand do a local access-- that's this case over here.",
    "start": "1467280",
    "end": "1472870"
  },
  {
    "text": "Migrate to the processor\nand do a local access there. That will be this case. And in this case, you stay where\nyou are and do a remote access.",
    "start": "1472870",
    "end": "1480185"
  },
  {
    "text": " In the case of migration, you\ncould end up choosing different",
    "start": "1480185",
    "end": "1492360"
  },
  {
    "text": "initial starting points\ncorresponding to the pi's. And you have to run\nthrough all of those.",
    "start": "1492360",
    "end": "1498880"
  },
  {
    "text": "So what's the cost of a\nsubproblem, or the running",
    "start": "1498880",
    "end": "1504930"
  },
  {
    "text": "time of computing\none of these things-- it's order?",
    "start": "1504930",
    "end": "1510630"
  },
  {
    "text": "Q. And so the total\ncost is NQ squared.",
    "start": "1510630",
    "end": "1519050"
  },
  {
    "text": " It's a little review of DP.",
    "start": "1519050",
    "end": "1527270"
  },
  {
    "text": "I'm going to stop here\nand let Erik take over. Just, in closing, while\nthis makes some assumptions,",
    "start": "1527270",
    "end": "1536529"
  },
  {
    "text": "It's actually\nfairly close to what we're building in hardware. This type of\nanalysis is something",
    "start": "1536530",
    "end": "1542570"
  },
  {
    "text": "that we have to do in hardware. My research group is\nbuilding a 128 processor machine, that we call the\nExecution Migration Machine.",
    "start": "1542570",
    "end": "1550470"
  },
  {
    "text": "And it does exactly what\nI've described to you, decide whether to\ndo a remote access or to do a migration based\non this kind of analysis.",
    "start": "1550470",
    "end": "1559649"
  },
  {
    "text": "So hand it over to Erik. PROFESSOR ERIK DEMAINE:\nI have a microphone. PROFESSOR SRINI\nDEVADAS: All right. Good.",
    "start": "1559650",
    "end": "1565070"
  },
  {
    "text": " PROFESSOR ERIK DEMAINE:\nSo I have a few things",
    "start": "1565070",
    "end": "1570720"
  },
  {
    "text": "to tell you a little bit about. Srini talked about\none topic in detail. I'm going to talk about\nmany topics in less detail,",
    "start": "1570720",
    "end": "1577040"
  },
  {
    "text": "as I said \"shallowly.\" And these are my main\nareas of research.",
    "start": "1577040",
    "end": "1582370"
  },
  {
    "text": "I do geometry, in\nparticular, folding, and data structures, graphs,\nand recreational algorithms.",
    "start": "1582370",
    "end": "1589470"
  },
  {
    "text": "That's the really fun stuff. A lot of these have\ncorresponding courses",
    "start": "1589470",
    "end": "1595040"
  },
  {
    "text": "if you're interested in\nmore about this stuff. Computational geometry,\nin general, is--",
    "start": "1595040",
    "end": "1600342"
  },
  {
    "text": "I'm not going to\nremember all numbers. 840? 50?",
    "start": "1600342",
    "end": "1606890"
  },
  {
    "text": "50. 6.850. That's a class I don't teach.",
    "start": "1606890",
    "end": "1613450"
  },
  {
    "text": "Folding is 6.849. Data Structures is 6.851.",
    "start": "1613450",
    "end": "1621610"
  },
  {
    "text": "And Graphs was being\ntaught this semester, in parallel with this class.",
    "start": "1621610",
    "end": "1627350"
  },
  {
    "text": "6.889. And recreational algorithms\nisn't fully covered but you could check\nout SP.268, which",
    "start": "1627350",
    "end": "1635321"
  },
  {
    "text": "was offered last semester. And especially for\nthose watching at home on MIT OpenCourseWare--",
    "start": "1635321",
    "end": "1641650"
  },
  {
    "text": "this class, all the video\nlectures are online for free. 6.851, we'll do\nthat next semester.",
    "start": "1641650",
    "end": "1646940"
  },
  {
    "text": "And 6.889 are all\nonline, right now. And there's some lecture notes\nfor SP.268 on OpenCourseWare.",
    "start": "1646940",
    "end": "1654190"
  },
  {
    "text": "There's a lot of material, here. And in particular, the obvious\nnext class for you to be taking is 6.046.",
    "start": "1654190",
    "end": "1660820"
  },
  {
    "text": "But why should you\nbe taking 6.046? Because then you can take\nall these exciting classes and many others\nabout algorithms.",
    "start": "1660820",
    "end": "1666769"
  },
  {
    "text": "There's a complete list\nof follow-on classes in the lecture notes,\nwhich are online.",
    "start": "1666770",
    "end": "1671930"
  },
  {
    "text": "And there's a ton of-- there's so much\nresearch in algorithms. It's a really exciting area. This is just the beginning--",
    "start": "1671930",
    "end": "1677840"
  },
  {
    "text": "just a taste. And I want to show you various\nexciting places it can go. ",
    "start": "1677840",
    "end": "1688670"
  },
  {
    "text": "Let's do some algorithms. ",
    "start": "1688670",
    "end": "1710680"
  },
  {
    "text": "So the first topic I'll tell\nyou a little bit about-- maybe the most fun--",
    "start": "1710680",
    "end": "1716510"
  },
  {
    "text": "is geometric folding algorithms. ",
    "start": "1716510",
    "end": "1721920"
  },
  {
    "text": "That's the title of the\ntextbook and the class 6.849. And in general--\nwell, there's a lot",
    "start": "1721920",
    "end": "1729106"
  },
  {
    "text": "of different kinds of\nfolding, in the world, but maybe the most accessible\nand fun is origami.",
    "start": "1729107",
    "end": "1734289"
  },
  {
    "text": "So you have, on the one\nhand, a piece of paper. And you'd like to turn\nit into some crazy,",
    "start": "1734290",
    "end": "1740410"
  },
  {
    "text": "three dimensional\nshape, which I'm not going to try to draw here. You want to fold\na giraffe or you",
    "start": "1740410",
    "end": "1745899"
  },
  {
    "text": "want to make some\ngeometric sculpture. How do you do this? So, usually, you put some\ncreases into the piece of paper",
    "start": "1745900",
    "end": "1753170"
  },
  {
    "text": "in some reasonable way.  And one of the questions is\nwhat are the rules for putting",
    "start": "1753170",
    "end": "1759880"
  },
  {
    "text": "creases into a piece of paper? When is that possible? And then you'd like to\nfold it into that shape.",
    "start": "1759880",
    "end": "1766690"
  },
  {
    "text": "So there are really\ntwo big problems here. One is I guess you could\ncall it foldability.",
    "start": "1766690",
    "end": "1772529"
  },
  {
    "text": " And this is what you do\nif you practice origami",
    "start": "1772530",
    "end": "1778100"
  },
  {
    "text": "in the typical way. You get origami diagrams,\nand they say, \"fold this.\" And you're like, oh, gosh.",
    "start": "1778100",
    "end": "1783530"
  },
  {
    "text": "Takes you hours to figure\nout how to fold something. Especially, if they just\ngave you a crease pattern. Can you even tell does it fold\ninto anything, first of all.",
    "start": "1783530",
    "end": "1790760"
  },
  {
    "text": "And then, if so, how do I do it? That problem-- folding increase\npattern and understanding what",
    "start": "1790760",
    "end": "1805830"
  },
  {
    "text": "crease patterns are valid-- unfortunately, is NP-complete. So there's no good way to\nreally understand that.",
    "start": "1805830",
    "end": "1813260"
  },
  {
    "text": "So origami is hard. In some sense, the more\ninteresting direction, though, is the reverse\ndirection, which",
    "start": "1813260",
    "end": "1820090"
  },
  {
    "text": "I would call origami design. I have an intended 3D\nshape I want to design.",
    "start": "1820090",
    "end": "1826299"
  },
  {
    "text": "How can I come up with-- how\ncan I, as an algorithm, convert that 3D shape into a crease\npattern that does fold,",
    "start": "1826300",
    "end": "1833320"
  },
  {
    "text": "that's guaranteed to\nfold into that 3D shape. And that's actually solvable.",
    "start": "1833320",
    "end": "1838790"
  },
  {
    "text": "So design is easier.  And there's all sorts\nof different versions",
    "start": "1838790",
    "end": "1844170"
  },
  {
    "text": "of the design problem. Some of them, you could\nsolve in polynomial time. Some of them, you can't.",
    "start": "1844170",
    "end": "1849570"
  },
  {
    "text": "If you really want\noptimal design, that can be NP-complete again. But in particular, there's a way\nto fold any 3D shape you want.",
    "start": "1849570",
    "end": "1859390"
  },
  {
    "text": "So there's an algorithm-- the coolest one, right\nnow, is called Origamizer. It's free software\nonline, by Tomohiro Tachi.",
    "start": "1859390",
    "end": "1866420"
  },
  {
    "text": "And you give it a 3D\nmodel of a polyhedron. And it outputs a\ngiant crease pattern",
    "start": "1866420",
    "end": "1873070"
  },
  {
    "text": "on a square piece of paper that\nfolds into that 3D polyhedron. And it's reasonably practical.",
    "start": "1873070",
    "end": "1878710"
  },
  {
    "text": "And he's folded tons\nof models in that way. ",
    "start": "1878710",
    "end": "1883809"
  },
  {
    "text": "Let's see. I'll show you some other things.",
    "start": "1883810",
    "end": "1888980"
  },
  {
    "text": "Here's a simple example of\na geometric origami model. So this is folded from a square\npaper with concentric squares",
    "start": "1888980",
    "end": "1897419"
  },
  {
    "text": "as creases. Alternating mountain and valley. So you see mountain\nvalley, mountain valley. Also fold the diagonals.",
    "start": "1897420",
    "end": "1903470"
  },
  {
    "text": "It's very easy to make. And what's funny--\nwhat's cool about it is that when you put\nall those creases in,",
    "start": "1903470",
    "end": "1908850"
  },
  {
    "text": "it pops into this 3D shape,\nwhich for many years people conjectured was a\nhyperbolic parabola.",
    "start": "1908850",
    "end": "1914220"
  },
  {
    "text": "This design is one of the\nearliest geometric origami designs. It goes back to late '20s in\nthe Bauhaus School of Design.",
    "start": "1914220",
    "end": "1921920"
  },
  {
    "text": "And it's very cool. People fold them a lot. I've personally folded\nthousands of them",
    "start": "1921920",
    "end": "1929600"
  },
  {
    "text": "for sculpture and things. We also do a lot of algorithmic\nsculpture, which I won't talk about in detail here.",
    "start": "1929600",
    "end": "1935590"
  },
  {
    "text": "But we discovered, two years\nago, that this does not exist.",
    "start": "1935590",
    "end": "1940770"
  },
  {
    "text": "It is impossible to fold\na square piece of paper with this crease pattern. That was a bit of a surprise.",
    "start": "1940770",
    "end": "1947160"
  },
  {
    "text": "And it's kind of fun to make\nthings that don't exist. AUDIENCE: So what is that? PROFESSOR ERIK DEMAINE:\nSo what is this?",
    "start": "1947160",
    "end": "1953490"
  },
  {
    "text": "Well, somehow, physical world is\ndiffering from the real world.",
    "start": "1953490",
    "end": "1959090"
  },
  {
    "text": "Now, some ways it\nmight be differing are that these\ncreases might not be",
    "start": "1959090",
    "end": "1965750"
  },
  {
    "text": "creases in the technical sense. A crease is a place that\nshould be non-differentiable. So maybe they're kind\nof rounding it out.",
    "start": "1965750",
    "end": "1971120"
  },
  {
    "text": "And then, who knows\nwhat's happening. Then, kind of all bets are off. Another possibility of\nwhat I think is happening",
    "start": "1971120",
    "end": "1976300"
  },
  {
    "text": "is that their are extra creases,\nin here, that you don't see. They're very small. If you look, especially the raw\nedge, here, and that profile.",
    "start": "1976300",
    "end": "1984420"
  },
  {
    "text": "It's a little bit wavy. And it's conceivable there's\nsome points here that look non-differentiable to me.",
    "start": "1984420",
    "end": "1989680"
  },
  {
    "text": "And I always thought I wasn't\nfolding it well enough. But in fact, something\nlike that has to happen.",
    "start": "1989680",
    "end": "1995180"
  },
  {
    "text": "And my conjecture\nis, if you look at this under a microscope,\nwhich we haven't done yet, there are little creases\nthat are so shallow they're",
    "start": "1995180",
    "end": "2001580"
  },
  {
    "text": "hard to see, but are there. And the theorem says some\ncreases have to be there.",
    "start": "2001580",
    "end": "2006662"
  },
  {
    "text": "It is possible to fold\nthis with extra creases, but not with these.",
    "start": "2006662",
    "end": "2011740"
  },
  {
    "text": "So get rid of that. On the other hand, if\nyou do the same thing with concentric circular\ncreases-- this a little harder",
    "start": "2011740",
    "end": "2018770"
  },
  {
    "text": "to unfold. It really wants to be in\nthis kind of Pringles shape. This also is from about Bauhaus.",
    "start": "2018770",
    "end": "2025690"
  },
  {
    "text": "It's a little harder to\nfold concentric circles. But this, we think, does exist.",
    "start": "2025690",
    "end": "2030700"
  },
  {
    "text": "Can't prove it yet. So we've done a lot of\nsculpture based on these guys.",
    "start": "2030700",
    "end": "2036815"
  },
  {
    "text": "What else do I want to say?  Another demo. So here's a fun problem.",
    "start": "2036815",
    "end": "2042480"
  },
  {
    "text": "This is a magic trick. Goes back to Houdini and others. So imagine I take a rectangle\nof paper and then I fold it flat",
    "start": "2042480",
    "end": "2053010"
  },
  {
    "text": "and take my scissors-- not strict origami, here-- and I make one\ncomplete straight cut.",
    "start": "2053010",
    "end": "2058119"
  },
  {
    "text": " In this case, I get two pieces.",
    "start": "2058120",
    "end": "2064310"
  },
  {
    "text": "And I unfold the pieces. And the question is what shapes\ncan I get out of those pieces? In this case, I get a swan.",
    "start": "2064310",
    "end": "2071408"
  },
  {
    "text": "You're not impressed\nso I'll another one. Make one straight cut.",
    "start": "2071409",
    "end": "2076879"
  },
  {
    "text": "These are on my web\npage if you want to impress all your friends. ",
    "start": "2076880",
    "end": "2082281"
  },
  {
    "text": "You could take the class if\nyou want to know how it's done. ",
    "start": "2082281",
    "end": "2087642"
  },
  {
    "text": "This example has\na lot of symmetry. You get a little angelfish. I only have one more example.",
    "start": "2087642",
    "end": "2093419"
  },
  {
    "text": "I hope you'll be impressed. This is very hard to fold.",
    "start": "2093420",
    "end": "2098600"
  },
  {
    "text": "It was an MIT spotlight\npicture, at some point. And it's even harder to cut. ",
    "start": "2098600",
    "end": "2106350"
  },
  {
    "text": "Straight cut. ",
    "start": "2106350",
    "end": "2114290"
  },
  {
    "text": "This should be the MIT logo.",
    "start": "2114290",
    "end": "2119876"
  },
  {
    "text": "[APPLAUSE] ",
    "start": "2119876",
    "end": "2125200"
  },
  {
    "text": "So the theorem is there's\nan algorithm, given any set of polygons\nin the plane, you could fold, make\none straight cut,",
    "start": "2125200",
    "end": "2131000"
  },
  {
    "text": "and get exactly those polygons. There's some\nlimits, in practice, because of paper thickness. But in theory, you\ncan do everything.",
    "start": "2131000",
    "end": "2138240"
  },
  {
    "text": "All right. Fun stuff. ",
    "start": "2138240",
    "end": "2144580"
  },
  {
    "text": "I don't think I have time\nto talk about self-assembly. Let me talk a little bit\nabout data structures because, conveniently, Srini drew\nthis diagram for me.",
    "start": "2144580",
    "end": "2152650"
  },
  {
    "text": "And I have the\nexact same diagram-- the left one, though. I'm old fashioned. ",
    "start": "2152650",
    "end": "2159559"
  },
  {
    "text": "So the models of computation\nwe've used, in this class, are pretty simple.",
    "start": "2159560",
    "end": "2164770"
  },
  {
    "text": "We have, in particular,\nthe Word RAM. You can read a word. You can add two words. Do whatever you want with\na constant number words.",
    "start": "2164770",
    "end": "2170970"
  },
  {
    "text": "Send them out to main memory. Everything's the\nsame amount of time. It's all constant,\nanyway, so who cares?",
    "start": "2170970",
    "end": "2178079"
  },
  {
    "text": "Except there's this\nissue in real computers, and it gets even worse\nwith parallel, but let's",
    "start": "2178080",
    "end": "2183140"
  },
  {
    "text": "stick to sequential old\nfashioned computers.",
    "start": "2183140",
    "end": "2189789"
  },
  {
    "text": "So you have this slow bottleneck\nbetween main memory and cache. Cache is really fast.",
    "start": "2189790",
    "end": "2195030"
  },
  {
    "text": "Think of this as\na really fat pipe. And this is a very thin pipe.",
    "start": "2195030",
    "end": "2200047"
  },
  {
    "text": "What do we do? We'd like to always work\nwith things in cache, but that's kind of\ndifficult. At some point,",
    "start": "2200047",
    "end": "2205500"
  },
  {
    "text": "you run out of space. You've got to go to main memory. And maybe to disc, other\nlevels of the memory hierarchy.",
    "start": "2205500",
    "end": "2211200"
  },
  {
    "text": "So what systems do is, when you\nfetch something from memory, you don't just get one word,\nyou get an entire cache line.",
    "start": "2211200",
    "end": "2219260"
  },
  {
    "text": "And cache lines are\ngetting bigger and bigger. But memory transfers\nhappen in blocks, when",
    "start": "2219260",
    "end": "2229320"
  },
  {
    "text": "you're going to a big memory. ",
    "start": "2229320",
    "end": "2239600"
  },
  {
    "text": "So let's say B is\nthe size of a block. There is another\nmodel of computation that's more sophisticated\nthan the Word RAM that",
    "start": "2239600",
    "end": "2246770"
  },
  {
    "text": "says how should my running time\ndepend on B. How many memory transfers do I need to do,\nas a function of B and n?",
    "start": "2246770",
    "end": "2255466"
  },
  {
    "text": "And so for example, if\nyou want to do search-- normally, we think of\ndoing binary search.",
    "start": "2255466",
    "end": "2261380"
  },
  {
    "text": "That takes log(n) accesses\nif everything is uniform. But with asymmetry,\nand if you're reading in entire blocks,\nif you do it right,",
    "start": "2261380",
    "end": "2269340"
  },
  {
    "text": "you can do it in log base B\nof n, instead of log base 2.",
    "start": "2269340",
    "end": "2276190"
  },
  {
    "text": "This is counting memory\ntransfers, not computation. Computation here is free. It's a little weird,\nbut you get used to it.",
    "start": "2276190",
    "end": "2283720"
  },
  {
    "text": "Sorting. They're classic. Just to give you an idea of how\nthis gets a little complicated.",
    "start": "2283720",
    "end": "2290230"
  },
  {
    "text": "You get n divided by B times\nlog base C of n divided by B. C",
    "start": "2290230",
    "end": "2295710"
  },
  {
    "text": "is the number of blocks\nthat fit in here. So there's C different blocks\nthat fit in your cache.",
    "start": "2295710",
    "end": "2304970"
  },
  {
    "text": "That's the optimal way to sort. Just upper and lower bounds\nin the comparison model. Just to give you a flavor.",
    "start": "2304970",
    "end": "2310770"
  },
  {
    "text": "And there's a whole study\nof algorithms to do this. What's really cool is you\ncan achieve these bounds even",
    "start": "2310770",
    "end": "2316119"
  },
  {
    "text": "if you don't know what B is. And if you don't know what C is. There's one algorithm,\nthat whatever",
    "start": "2316120",
    "end": "2321320"
  },
  {
    "text": "the architecture\nis underlying it, we'll still achieve\nthe same bounds. Those are called\ncache-oblivious algorithms,",
    "start": "2321320",
    "end": "2326813"
  },
  {
    "text": "and they were\ninvented, here, at MIT. ",
    "start": "2326813",
    "end": "2333065"
  },
  {
    "text": "I think I want to-- this is too much fun to pass up.",
    "start": "2333065",
    "end": "2338099"
  },
  {
    "text": "On the Word RAM, there's\nthis problem, which we've dealt with several times.",
    "start": "2338100",
    "end": "2344569"
  },
  {
    "text": "What if you want to maintain\na dynamic set of elements-- integers.",
    "start": "2344570",
    "end": "2349819"
  },
  {
    "text": "I want to do insert, delete,\npredecessor, successor. This is what binary\nsearch trees do.",
    "start": "2349820",
    "end": "2356810"
  },
  {
    "text": "But you can do better. If we have integers-- n integers-- in the\nrange 0 to u minus 1.",
    "start": "2356810",
    "end": "2368760"
  },
  {
    "text": "So u is the size\nof the universe. Then, we already know\nhow to do log(n).",
    "start": "2368760",
    "end": "2377840"
  },
  {
    "text": "But you can do two bounds. One is log(log(u)). ",
    "start": "2377840",
    "end": "2384723"
  },
  {
    "text": "This is a data structure\ncalled van Emde Boas. ",
    "start": "2384723",
    "end": "2390700"
  },
  {
    "text": "And it's in CLRS, if\nyou're interested. You can also do log(log(n))\ndivided by log(log(u)).",
    "start": "2390700",
    "end": "2401025"
  },
  {
    "text": "This is a data structure\ncalled fusion trees. It's an advanced data structure. 6.851, if you're interested.",
    "start": "2401025",
    "end": "2408030"
  },
  {
    "text": "And you can take the\nmin of those two. That's, essentially,\nthe best possible, the matching lower\nbound, that that that's",
    "start": "2408030",
    "end": "2413800"
  },
  {
    "text": "all you can achieve.  And so just to state it\nin terms that you know,",
    "start": "2413800",
    "end": "2420527"
  },
  {
    "text": "which is normal n bounds. You take the min of\nthose two things,",
    "start": "2420528",
    "end": "2425559"
  },
  {
    "text": "there are always at most\nsquare root log(n) divided",
    "start": "2425560",
    "end": "2431955"
  },
  {
    "text": "by log(log(n)). ",
    "start": "2431955",
    "end": "2437680"
  },
  {
    "text": "Compare that with log(n). It's way better. A whole square root better. And a little tiny\nsavings better.",
    "start": "2437680",
    "end": "2444045"
  },
  {
    "text": "And this is optimal. It is a function of n. That's the best you can do\nfor the predecessor problem. So pretty crazy stuff.",
    "start": "2444045",
    "end": "2450000"
  },
  {
    "text": "It's a very\ncomplicated structure. It's probably\ncompletely impractical. But, hey.",
    "start": "2450000",
    "end": "2455240"
  },
  {
    "text": "They're, theoretically,\npretty cool. I'll tell you a little bit\nabout graph algorithms. ",
    "start": "2455240",
    "end": "2481070"
  },
  {
    "text": "We've seen a lot of graph\nalgorithms in this class. One way to make them new and fun\nagain is to suppose your graph",
    "start": "2481070",
    "end": "2487980"
  },
  {
    "text": "is planar or almost planer. Meaning you can draw\nit in two dimensions without any crossings, as you\nmight get from a graph that's",
    "start": "2487980",
    "end": "2494280"
  },
  {
    "text": "drawn on the earth, like a\nroad network or something with no or few overpasses.",
    "start": "2494280",
    "end": "2501100"
  },
  {
    "text": "Then you can do\nthings a lot better. For example, you can\ndo the equivalent of Dijkstra's algorithm.",
    "start": "2501100",
    "end": "2506360"
  },
  {
    "text": "So non-negative weight\nshortest path, in linear time. ",
    "start": "2506360",
    "end": "2512700"
  },
  {
    "text": "That's not so impressive cause\nDijkstra is number of edges. Here, I mean number of vertices.",
    "start": "2512700",
    "end": "2517960"
  },
  {
    "text": "It doesn't really matter\nwith planar graphs. And we had E log(V). You can write E,\nhere, if you prefer.",
    "start": "2517960",
    "end": "2524780"
  },
  {
    "text": "It's only a log savings. More impressive, is you can\ndo with negative weights-- the equivalent of Bellman-Ford--",
    "start": "2524780",
    "end": "2529830"
  },
  {
    "text": " in almost linear time.",
    "start": "2529830",
    "end": "2534840"
  },
  {
    "text": " So some log factors.",
    "start": "2534840",
    "end": "2540740"
  },
  {
    "text": "Log squared n divided\nby log(log(n)). It's the best bound\nknown to date. That was a result\nfrom last year. So it's still a\nwork in progress.",
    "start": "2540740",
    "end": "2547560"
  },
  {
    "text": "And if you're interested\nin this kind of stuff, you should check out the videos\nfor the class we just taught,",
    "start": "2547560",
    "end": "2553330"
  },
  {
    "text": "6.889. And recreation algorithms. I've actually already told\nyou about a lot of these--",
    "start": "2553330",
    "end": "2559210"
  },
  {
    "text": "like algorithms for\nsolving a Rubik's cube in n squared divided by log(n) steps. That was a paper this year.",
    "start": "2559210",
    "end": "2565410"
  },
  {
    "text": "Tetris is NP-complete. A whole bunch of\nNP-completeness, and x time completeness, and so on.",
    "start": "2565410",
    "end": "2571130"
  },
  {
    "text": "Results for games. Other fun stuff, like\nballoon twisting-- algorithms for\ndesigning how to balloon",
    "start": "2571130",
    "end": "2577020"
  },
  {
    "text": "twist a given\npolyhedron, optimally, using the fewest balloons. Algorithmic magic tricks.",
    "start": "2577020",
    "end": "2582780"
  },
  {
    "text": "There's tons of stuff out there. It's really fun. I should teach a class\nabout some of those things, but I haven't yet.",
    "start": "2582780",
    "end": "2587900"
  },
  {
    "text": " The last thing we wanted\nto do is together.",
    "start": "2587900",
    "end": "2593670"
  },
  {
    "text": "And it has to do with these PROFESSOR SRINI DEVADAS:\nGetting rid of these-- PROFESSOR ERIK DEMAINE:\nThese cushions. Getting rid of\nthese damn cushions.",
    "start": "2593670",
    "end": "2600400"
  },
  {
    "text": "We have so many\nof these cushions. Just gotta get rid of them. ",
    "start": "2600400",
    "end": "2607350"
  },
  {
    "text": "That's two freebies. PROFESSOR SRINI\nDEVADAS: Now, you're going to have to pay\nfor these cushions. PROFESSOR ERIK\nDEMAINE: He's kidding.",
    "start": "2607350",
    "end": "2613490"
  },
  {
    "text": "He's kidding. Actually we're having trouble. We're having trouble\ngiving them away because-- I don't know-- some people seem\nto not like them very much.",
    "start": "2613490",
    "end": "2619980"
  },
  {
    "text": "And neither do we. So we wanted to give you some\nmotivation for why you really",
    "start": "2619980",
    "end": "2626700"
  },
  {
    "text": "need some of these cushions. So we actually\nprepared a top 10 list. PROFESSOR SRINI DEVADAS:\nThis is the top 10",
    "start": "2626700",
    "end": "2633230"
  },
  {
    "text": "uses of 6.006 cushions. We're going to alternate here.",
    "start": "2633230",
    "end": "2639130"
  },
  {
    "text": "Number 10. PROFESSOR ERIK DEMAINE:\nYou can sit on it and get guaranteed\ninspiration in constant time.",
    "start": "2639130",
    "end": "2646067"
  },
  {
    "text": "PROFESSOR SRINI DEVADAS:\nDon't forget to bring one for the final exam. PROFESSOR ERIK DEMAINE:\nHighly recommended it.",
    "start": "2646067",
    "end": "2651150"
  },
  {
    "text": "Number nine. PROFESSOR SRINI DEVADAS:\nYou can use it as a Frisbee. You've seen that before, except\nyou cut it into a circle.",
    "start": "2651150",
    "end": "2658330"
  },
  {
    "text": "You cut it into a circle. And it works really well.  PROFESSOR ERIK DEMAINE: We had\nfun with a Bandsaw, last night.",
    "start": "2658330",
    "end": "2665820"
  },
  {
    "text": "PROFESSOR SRINI\nDEVADAS: Number eight. PROFESSOR ERIK DEMAINE: You can\nsell it as a limited edition collectible on eBay.",
    "start": "2665820",
    "end": "2672272"
  },
  {
    "text": "PROFESSOR SRINI\nDEVADAS: It's never ever going to be made, again. You can make money\noff this in 5 years--",
    "start": "2672272",
    "end": "2678710"
  },
  {
    "text": "10 years. PROFESSOR ERIK\nDEMAINE: At least $5. I don't know.  Number seven.",
    "start": "2678710",
    "end": "2684310"
  },
  {
    "text": "PROFESSOR SRINI\nDEVADAS: Number seven. If you had two of these, you\ncould stick them like this,",
    "start": "2684310",
    "end": "2689740"
  },
  {
    "text": "and remove the branding, and\nuse it as a regular cushion.",
    "start": "2689740",
    "end": "2694865"
  },
  {
    "text": "PROFESSOR ERIK DEMAINE:\nNow, no one will ever know you took this class. You just need two. ",
    "start": "2694865",
    "end": "2701550"
  },
  {
    "text": "PROFESSOR SRINI\nDEVADAS: Number six. PROFESSOR ERIK\nDEMAINE: Number six. It's a holiday\nconversation starter. PROFESSOR SRINI DEVADAS:\nAnd conversation stopper.",
    "start": "2701550",
    "end": "2708620"
  },
  {
    "text": " PROFESSOR ERIK\nDEMAINE: Number five.",
    "start": "2708620",
    "end": "2714710"
  },
  {
    "text": "PROFESSOR SRINI DEVADAS:\nAsymptotically optimal-- we had to use that term,\nacoustic acoustic paneling. PROFESSOR ERIK DEMAINE: That\nwas a suggestion from a student.",
    "start": "2714710",
    "end": "2722097"
  },
  {
    "text": "You just need a lot of them. This would be great for piano,\nguitar fingering practice. You know you're doing your DP.",
    "start": "2722097",
    "end": "2729188"
  },
  {
    "text": "PROFESSOR SRINI\nDEVADAS: Number four. PROFESSOR ERIK\nDEMAINE: Number four. You can use it as target\npractice for your next larp session.",
    "start": "2729188",
    "end": "2734460"
  },
  {
    "text": " Woah. Misfire.",
    "start": "2734460",
    "end": "2739695"
  },
  {
    "text": " I'm missing. PROFESSOR SRINI DEVADAS:\nYou haven't hit me yet.",
    "start": "2739695",
    "end": "2745120"
  },
  {
    "text": " All right. Finally, you got one. [APPLAUSE]",
    "start": "2745120",
    "end": "2751369"
  },
  {
    "text": " PROFESSOR ERIK\nDEMAINE: Number three.",
    "start": "2751369",
    "end": "2756820"
  },
  {
    "text": "PROFESSOR SRINI\nDEVADAS: All right. 10 years from now,\nit might be all you remember about double 0 6. ",
    "start": "2756820",
    "end": "2763810"
  },
  {
    "text": "PROFESSOR ERIK DEMAINE:\nIn truth, you might also remember this top 10 list. PROFESSOR SRINI\nDEVADAS: All right. Number two.",
    "start": "2763810",
    "end": "2769530"
  },
  {
    "text": "PROFESSOR ERIK\nDEMAINE: Number two. You can use it as your\nfinal exam cheat sheet. This is a new rule.",
    "start": "2769530",
    "end": "2774824"
  },
  {
    "text": "Instead of 8 and\n1/2 by 11, you could bring in the appropriate\nnumber of cushions.",
    "start": "2774824",
    "end": "2781430"
  },
  {
    "text": "And the number one-- number one\nuse for a double 0 6 cushion. PROFESSOR SRINI\nDEVADAS: Three words.",
    "start": "2781430",
    "end": "2787650"
  },
  {
    "text": "OK Cupid profile picture. ",
    "start": "2787650",
    "end": "2795220"
  },
  {
    "text": "Don't use this cheat sheet. But come to the final\nexam and good luck. PROFESSOR ERIK DEMAINE: Thanks.",
    "start": "2795220",
    "end": "2800440"
  },
  {
    "text": " [APPLAUSE] ",
    "start": "2800440",
    "end": "2805968"
  }
]