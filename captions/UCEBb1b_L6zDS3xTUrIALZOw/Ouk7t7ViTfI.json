[
  {
    "text": "So far we've talked about assembling instructions.",
    "start": "630",
    "end": "3860"
  },
  {
    "text": "What about data?",
    "start": "3860",
    "end": "5390"
  },
  {
    "text": "How do we allocate and initialize data storage\nand how do we get those values into registers",
    "start": "5390",
    "end": "11000"
  },
  {
    "text": "so that they can be used as operands?",
    "start": "11000",
    "end": "13519"
  },
  {
    "text": "Here we see a program that allocates and initializes\ntwo memory locations using the LONG macro.",
    "start": "13519",
    "end": "20019"
  },
  {
    "text": "We've used labels to remember the addresses\nof these locations for later reference.",
    "start": "20019",
    "end": "26738"
  },
  {
    "text": "When the program is assembled the values of\nthe label N and factN are 0 and 4 respectively,",
    "start": "26739",
    "end": "33460"
  },
  {
    "text": "the addresses of the memory locations holding\nthe two data values.",
    "start": "33460",
    "end": "38040"
  },
  {
    "text": "To access the first data value, the program\nuses a LD instruction, in this case one of",
    "start": "38040",
    "end": "42790"
  },
  {
    "text": "convenience macros that supplies R31 as the\ndefault value of the Ra field.",
    "start": "42790",
    "end": "49970"
  },
  {
    "text": "The assembler replaces the reference to the\nlabel N with its value 0 from the symbol table.",
    "start": "49970",
    "end": "55990"
  },
  {
    "text": "When the LD is executed, it computes the memory\naddress by adding the constant (0) to the",
    "start": "55990",
    "end": "61640"
  },
  {
    "text": "value of the Ra register (which is R31 and\nhence the value is 0)",
    "start": "61640",
    "end": "66369"
  },
  {
    "text": "to get the address (0) of the memory location\nfrom which to fetch the value to be placed",
    "start": "66369",
    "end": "72689"
  },
  {
    "text": "in R1.",
    "start": "72689",
    "end": "74890"
  },
  {
    "text": "The constants needed as values for data words\nand instruction fields can be written as expressions.",
    "start": "74890",
    "end": "80880"
  },
  {
    "text": "These expressions are evaluated by the assembler\nas it assembles the program and the resulting",
    "start": "80880",
    "end": "86000"
  },
  {
    "text": "value is used as needed.",
    "start": "86000",
    "end": "88840"
  },
  {
    "text": "Note that the expressions are evaluated at\nthe time the assembler runs.",
    "start": "88840",
    "end": "93200"
  },
  {
    "text": "By the time the program runs on the Beta,\nthe resulting value is used.",
    "start": "93200",
    "end": "98078"
  },
  {
    "text": "The assembler does NOT generate ADD and MUL\ninstructions to compute the value during program",
    "start": "98079",
    "end": "103569"
  },
  {
    "text": "execution.",
    "start": "103569",
    "end": "104569"
  },
  {
    "text": "If a value is needed for an instruction field\nor initial data value, the assembler has to",
    "start": "104569",
    "end": "110079"
  },
  {
    "text": "be able to perform the arithmetic itself.",
    "start": "110079",
    "end": "113479"
  },
  {
    "text": "If you need the program to compute a value\nduring execution, you have to write the necessary",
    "start": "113479",
    "end": "118328"
  },
  {
    "text": "instructions as part of your program.",
    "start": "118329",
    "end": "121490"
  },
  {
    "text": "One last UASM feature: there's a special symbol\n\".\", called \"dot\", whose value is the address",
    "start": "121490",
    "end": "128319"
  },
  {
    "text": "of the next main memory location to be filled\nby the assembler when it generates binary",
    "start": "128319",
    "end": "133220"
  },
  {
    "text": "data.",
    "start": "133220",
    "end": "134610"
  },
  {
    "text": "Initially \".\" is 0 and it's incremented each\ntime a new byte value is generated.",
    "start": "134610",
    "end": "141090"
  },
  {
    "text": "We can set the value of \".\" to tell the assembler\nwhere in memory we wish to place a value.",
    "start": "141090",
    "end": "147000"
  },
  {
    "text": "In this example, the constant 0xDEADBEEF is\nplaced into location 0x100 of main memory.",
    "start": "147000",
    "end": "154970"
  },
  {
    "text": "And we can use \".\" in expressions to compute\nthe values for other symbols, as shown here",
    "start": "154970",
    "end": "159930"
  },
  {
    "text": "when defining the value for the symbol \"k\".",
    "start": "159930",
    "end": "163060"
  },
  {
    "text": "In fact, the label definition \"k:\" is exactly\nequivalent to the UASM statement \"k = .\"",
    "start": "163060",
    "end": "170200"
  },
  {
    "text": "We can even increment the value of \".\" to\nskip over locations, e.g., if we wanted to",
    "start": "170200",
    "end": "176790"
  },
  {
    "text": "leave space for an un initialized array.",
    "start": "176790",
    "end": "181939"
  },
  {
    "text": "And that's assembly language!",
    "start": "181940",
    "end": "184010"
  },
  {
    "text": "We use assembly language as a convenient notation\nfor generating the binary encoding for instructions",
    "start": "184010",
    "end": "189170"
  },
  {
    "text": "and data.",
    "start": "189170",
    "end": "190450"
  },
  {
    "text": "We let the assembler build the bit-level representations\nwe need and to keep track of the addresses",
    "start": "190450",
    "end": "195750"
  },
  {
    "text": "where these values are stored in main memory.",
    "start": "195750",
    "end": "198780"
  },
  {
    "text": "UASM itself provides support for values, symbols,\nlabels and macros.",
    "start": "198780",
    "end": "205630"
  },
  {
    "text": "Values can be written as constants or expressions\ninvolving constants.",
    "start": "205630",
    "end": "210200"
  },
  {
    "text": "We use symbols to give meaningful names to\nvalues so that our programs will be more readable",
    "start": "210200",
    "end": "215430"
  },
  {
    "text": "and more easily modified.",
    "start": "215430",
    "end": "217500"
  },
  {
    "text": "Similarly, we use labels to give meaningful\nnames to addresses in main memory and then",
    "start": "217500",
    "end": "223370"
  },
  {
    "text": "use the labels in referring to data locations\nin LD or ST instructions, or to instruction",
    "start": "223370",
    "end": "230099"
  },
  {
    "text": "locations in branch instructions.",
    "start": "230100",
    "end": "234150"
  },
  {
    "text": "Macros hide the details of how instructions\nare assembled from their component fields.",
    "start": "234150",
    "end": "238860"
  },
  {
    "text": "And we can use \".\" to control where the assembler\nplaces values in main memory.",
    "start": "238860",
    "end": "246510"
  },
  {
    "text": "The assembler is itself a program that runs\non our computer.",
    "start": "246510",
    "end": "250120"
  },
  {
    "text": "That raises an interesting \"chicken and egg\nproblem\":",
    "start": "250120",
    "end": "253849"
  },
  {
    "text": "how did the first assembler program get assembled\ninto binary so it could run on a computer?",
    "start": "253850",
    "end": "259250"
  },
  {
    "text": "Well, it was hand-assembled into binary.",
    "start": "259250",
    "end": "262049"
  },
  {
    "text": "I suspect it processed a very simple language\nindeed, with the bells and whistles of symbols,",
    "start": "262050",
    "end": "268690"
  },
  {
    "text": "labels, macros, expression evaluation, etc.\nadded only after basic instructions could",
    "start": "268690",
    "end": "273720"
  },
  {
    "text": "be assembled by the program.",
    "start": "273720",
    "end": "275380"
  },
  {
    "text": "And I'm sure they were very careful not loose\nthe binary so they wouldn't have to do the",
    "start": "275380",
    "end": "281090"
  },
  {
    "text": "hand-assembly a second time!",
    "start": "281090",
    "end": "282940"
  }
]