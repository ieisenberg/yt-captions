[
  {
    "text": " The following content is\nprovided under a Creative Commons license.",
    "start": "0",
    "end": "5340"
  },
  {
    "text": "Your support will help\nMIT OpenCourseWare continue to offer high-quality\neducational resources for free.",
    "start": "5340",
    "end": "11640"
  },
  {
    "text": "To make a donation or to\nview additional materials from hundreds of MIT courses\nvisit MIT OpenCourseWare",
    "start": "11640",
    "end": "18110"
  },
  {
    "text": "at ocw.MIT.edu.  PROFESSOR: Self-driving\ncars are pretty cool.",
    "start": "18110",
    "end": "23330"
  },
  {
    "text": "It's pretty hot\nnowadays, so we're going to use this as an example. And in the past we have seen\nhow we can give an autonomous",
    "start": "23330",
    "end": "31850"
  },
  {
    "text": "vehicle a goal-- some\ncondition we want it to reach. For example, we\nmight have a car that",
    "start": "31850",
    "end": "36956"
  },
  {
    "text": "wants to pick up some\npassengers along the way, get to some destination, and\nmaybe navigate some worlds.",
    "start": "36956",
    "end": "44300"
  },
  {
    "text": "But let's consider\nthat for something like a self-driving car, we also\nhave a number of other goals",
    "start": "44300",
    "end": "50870"
  },
  {
    "text": "or requirements that are sort of\nimplicit along the way, in that we want our self-driving car\nto obey the rules of the road",
    "start": "50870",
    "end": "57690"
  },
  {
    "text": "as it's driving. And these aren't\njust goal conditions which is a sort of single goal\nthat you're trying to reach,",
    "start": "57690",
    "end": "64565"
  },
  {
    "text": "but these are sort\nof goals that you're trying to maintain throughout\nthe path that you're traveling.",
    "start": "64565",
    "end": "71090"
  },
  {
    "text": "So one example of this\nis a traffic light.",
    "start": "71090",
    "end": "77000"
  },
  {
    "text": "So maybe you guys can\nhelp me out with this. Just in plain\nEnglish, how would you describe the rules\nof how you would",
    "start": "77000",
    "end": "84976"
  },
  {
    "text": "want a car to behave when it\ncomes across a traffic light?",
    "start": "84976",
    "end": "90110"
  },
  {
    "text": "Anything? It's very simple. Yes? AUDIENCE: Slow down when you see\nyellow, stop when you see red,",
    "start": "90110",
    "end": "95490"
  },
  {
    "text": "go if you see green. PROFESSOR: Yeah. So pretty much stop if you\nsee red, go if you see green,",
    "start": "95490",
    "end": "103600"
  },
  {
    "text": "and specifically, if you\nsee red and you stop, you're going to want\nto stop until you",
    "start": "103600",
    "end": "108605"
  },
  {
    "text": "see the green, at which\npoint that sort of condition that you're stopping goes away,\nand you're able to move on.",
    "start": "108606",
    "end": "114883"
  },
  {
    "start": "114883",
    "end": "121140"
  },
  {
    "text": "And in addition to things\nlike obeying traffic lights, there might also be some\nother rules of the road that we want to follow.",
    "start": "121140",
    "end": "127969"
  },
  {
    "text": "For example, we might\nwant to always stay within the speed limit. And then there might also be\nsome other practical conditions",
    "start": "127970",
    "end": "135340"
  },
  {
    "text": "of driving down the road,\nwhich is that at some point we're going to need to refuel. And if we consider\na car that might",
    "start": "135340",
    "end": "141765"
  },
  {
    "text": "be driving for a really long\ntime, one logical statement we could say about the\npath that this car takes,",
    "start": "141766",
    "end": "149890"
  },
  {
    "text": "and the sequence of states\nthat it goes through is that at every\npoint in time we",
    "start": "149890",
    "end": "155020"
  },
  {
    "text": "want the plan to have some\nfuture state when we are going to visit a gas station.",
    "start": "155020",
    "end": "160490"
  },
  {
    "text": "So this isn't just a single\ngoal that we're trying to reach, but over a very long\ntime, even if we consider",
    "start": "160490",
    "end": "166760"
  },
  {
    "text": "the car to be driving an\ninfinite amount of time, at every point in\nthe time, we're going to be thinking\nahead that there's",
    "start": "166760",
    "end": "173340"
  },
  {
    "text": "going to be some time when we\nreach a gas station and refuel. ",
    "start": "173340",
    "end": "181299"
  },
  {
    "text": "So these types of\nconditions, things like staying at a red\nlight until it turns green,",
    "start": "181300",
    "end": "187750"
  },
  {
    "text": "always staying within\na certain speed limit, or always having some\npath in the future-- some state in the future\nwhen we reach a gas station,",
    "start": "187750",
    "end": "194990"
  },
  {
    "text": "are things that we can\nexpress with a type of logic called temporal logic. And there are two\nthings that we hope",
    "start": "194990",
    "end": "200560"
  },
  {
    "text": "you're going to be able\nto do by the time you leave this lecture. The first is be able to model\nthese temporally extended goals",
    "start": "200560",
    "end": "207820"
  },
  {
    "text": "using a specific type\nof temporal logic called Linear Temporal Logic, or LTL.",
    "start": "207820",
    "end": "214110"
  },
  {
    "text": "And secondly,\nwe're going to hope that you'll be able to actually\napply this to planning, create plans with these\ntemporally extended goals,",
    "start": "214110",
    "end": "221440"
  },
  {
    "text": "and in addition just sort\nof this regular planning we've been dealing with,\nactually incorporating",
    "start": "221440",
    "end": "227190"
  },
  {
    "text": "this idea of preferences\ninto your plans. So a preference basically\nis not a required condition,",
    "start": "227190",
    "end": "235630"
  },
  {
    "text": "but a desired condition\nthat you can use to select between alternative paths.",
    "start": "235630",
    "end": "242647"
  },
  {
    "text": "So you know, you might have many\ndifferent ways that you could reach your goal,\nbut we can use some of these temporally\nextended goals,",
    "start": "242647",
    "end": "249100"
  },
  {
    "text": "like maybe you prefer to break\nas few of the rules of the road as you can, and you can use\nthose a preferences to choose",
    "start": "249100",
    "end": "258459"
  },
  {
    "text": "between plans. So just as an\noutline, first we're just going to do a\nlittle introduction",
    "start": "258459",
    "end": "264520"
  },
  {
    "text": "to linear temporal logic. We're going to talk\nabout what this is-- what LTL is, why\nwe want to use it,",
    "start": "264520",
    "end": "270815"
  },
  {
    "text": "and we're going to go through\nthe syntax and the semantics of different LTL operators.",
    "start": "270815",
    "end": "276190"
  },
  {
    "text": "Then we're going to walk\nyou through some example LTL problems, and actually talk\nabout complications to plans--",
    "start": "276190",
    "end": "281490"
  },
  {
    "text": "how you create plans with\nthese linear temporal logic and temporal goals.",
    "start": "281490",
    "end": "287044"
  },
  {
    "text": "Finally we're going to\nincorporate preferences into this, talk about how\nyou express preferences, and specifically talk\nabout a language called",
    "start": "287044",
    "end": "293110"
  },
  {
    "text": "LPP that allows you to plan with\ntemporal logic and preferences. ",
    "start": "293110",
    "end": "300650"
  },
  {
    "text": "So now for the introduction\nto linear temporal logic. Temporal logic at its\ncore is a formalism",
    "start": "300650",
    "end": "307720"
  },
  {
    "text": "for specifying properties of\na system that vary with time. So these aren't\njust conditions that",
    "start": "307720",
    "end": "313639"
  },
  {
    "text": "are true at single\nstate, which is what we've mostly been dealing\nwith prepositional logic. Right, so we've been saying\nthings like, condition A and B,",
    "start": "313640",
    "end": "324320"
  },
  {
    "text": "but not C, are true\nat a given state, and that's prepositional logic. Temporal logic is\nsort of a layer on top",
    "start": "324320",
    "end": "329960"
  },
  {
    "text": "of that, when we're dealing\nnot just with what's true at a single state, but\nactually extending over time as the system moves through\na sequence of states,",
    "start": "329960",
    "end": "337050"
  },
  {
    "text": "and expressing properties\non a temporal level. ",
    "start": "337050",
    "end": "342990"
  },
  {
    "text": "So you might have a system that\ncan be represented as a state machine, and a\n[INAUDIBLE],, and it",
    "start": "342990",
    "end": "350360"
  },
  {
    "text": "can go through a sequence\nof different states. And while you might be able\nto represent the whole system",
    "start": "350360",
    "end": "357310"
  },
  {
    "text": "like this, if we actually\nexecute the system we're going to get one\npath through the system.",
    "start": "357310",
    "end": "363045"
  },
  {
    "text": "And that's often called\na trace of the system, and you can also think of it\nas a timeline of the system.",
    "start": "363045",
    "end": "369040"
  },
  {
    "text": "So one example\ntimeline of this system is it might start\nin state A, and then go to state C, and then go to\nD, and keep looping around in D",
    "start": "369040",
    "end": "377340"
  },
  {
    "text": "forever. So that's one trace, or\none timeline of the system, and that's really just\na sequence of states that it goes through.",
    "start": "377340",
    "end": "383205"
  },
  {
    "text": " And in the past we've seen these\nin some of the problem sets.",
    "start": "383205",
    "end": "388720"
  },
  {
    "text": "For example when we were\nmodeling the warp reactor,",
    "start": "388720",
    "end": "394190"
  },
  {
    "text": "we had the valves\nthat could transition between open and closed states. It could also be\nthe whole system--",
    "start": "394190",
    "end": "401380"
  },
  {
    "text": "the starship going\nthrough different planets, transitioning through a\nlarger set of locations,",
    "start": "401380",
    "end": "407772"
  },
  {
    "text": "picking up passengers,\ndropping them off. So these could be quite complex. ",
    "start": "407772",
    "end": "414569"
  },
  {
    "text": "And so as I said,\npreviously in our problems that we've been modeling, we've\nbeen going through a system,",
    "start": "414569",
    "end": "421845"
  },
  {
    "text": "and we've been searching for\na single state that satisfies all of our goal conditions.",
    "start": "421845",
    "end": "427640"
  },
  {
    "text": "Maybe we to reach\n[? Lavinia ?] and save a certain number of people. But with temporal\nlogic, we can actually",
    "start": "427640",
    "end": "435639"
  },
  {
    "text": "express goals that are satisfied\nover a number of states, and this allows us to do\nsome more expressive goals",
    "start": "435640",
    "end": "444959"
  },
  {
    "text": "than we could capture\njust by looking at a single state at the end. ",
    "start": "444959",
    "end": "452460"
  },
  {
    "text": "So for example,\nwhat if a problem requires some\ncondition to be met",
    "start": "452460",
    "end": "458630"
  },
  {
    "text": "until another condition is met? And for example, you know,\nwhen you see a red light, that implies that we should\nstop until we see a green light.",
    "start": "458630",
    "end": "467990"
  },
  {
    "text": "And if we look at a\ntimeline, or a trace of one of these systems, that might\nlook something like this.",
    "start": "467990",
    "end": "474160"
  },
  {
    "text": "So we're going along\nthrough our system, and at one of the states,\nwe see the red light. So that adds this condition\nthat we should stop.",
    "start": "474160",
    "end": "482960"
  },
  {
    "text": "And then that condition\nwill hold forever until we see a green\nlight, at which point that condition is dropped,\nand we can keep moving on.",
    "start": "482960",
    "end": "490820"
  },
  {
    "text": "Another example where we might\nwant to use temporal logic is, what if our problem\nrequires a condition",
    "start": "490820",
    "end": "496130"
  },
  {
    "text": "to always eventually be met. And this is what I was talking\nabout with the gas station. So we want to be\ngoing on forever,",
    "start": "496130",
    "end": "503750"
  },
  {
    "text": "and there should always be\nsome point in the future when we do have a state\nwhere we're at a gas station.",
    "start": "503750",
    "end": "510110"
  },
  {
    "text": "So we might start our\nsystem at a certain state. And our plan says\nthat at some point",
    "start": "510110",
    "end": "517060"
  },
  {
    "text": "we do reach a gas\nstation, so that's good. But then when we get\nto the next state, we also want it to be\ntrue that from that point",
    "start": "517060",
    "end": "522440"
  },
  {
    "text": "on, we're going to reach another\ngas station, and after that, going on and on and\non into the future.",
    "start": "522440",
    "end": "530070"
  },
  {
    "text": "These are things that you\ncan't express very easily with the types of logic that\nwe've been dealing with before.",
    "start": "530070",
    "end": "536550"
  },
  {
    "text": " So one important distinction\nthat we should clear up",
    "start": "536550",
    "end": "542230"
  },
  {
    "text": "before we really dive\ninto the syntax of how these linear\ntemporal logics work",
    "start": "542230",
    "end": "548420"
  },
  {
    "text": "is the difference between\nbranching time and linear time. They're really two\ndifferent models of time",
    "start": "548420",
    "end": "553480"
  },
  {
    "text": "that we can be working with. There's two different\ntypes of temporal logic that exist to express these\ndifferent types of time.",
    "start": "553480",
    "end": "560079"
  },
  {
    "text": "So linear time is more\nsimilar to the world that we live in, unless you're\nliving in some sci-fi movie",
    "start": "560080",
    "end": "567920"
  },
  {
    "text": "where time is branching\ninto different realities, and all sorts of crazy\nstuff is going on. You can think of time as\njust this linear timeline.",
    "start": "567920",
    "end": "575930"
  },
  {
    "text": "So right now, it's\none future state that's going to happen for me. And you know, regardless\nof how many options I have,",
    "start": "575930",
    "end": "583170"
  },
  {
    "text": "there's one realization\nof the time. And what this lets us\ndo is that it gives us",
    "start": "583170",
    "end": "590890"
  },
  {
    "text": "a single path for our system,\nand we can reason very exactly",
    "start": "590890",
    "end": "596600"
  },
  {
    "text": "about the conditions that\nare met within that path.",
    "start": "596600",
    "end": "601940"
  },
  {
    "text": "And this lets us describe what\nwill always happen in a system.",
    "start": "601940",
    "end": "611680"
  },
  {
    "text": "For example, we can\nguarantee that we always stop at a red light until\nwe see a green light,",
    "start": "611680",
    "end": "617180"
  },
  {
    "text": "or we always stay\nwithin the speed limit.",
    "start": "617180",
    "end": "623080"
  },
  {
    "text": "This is contrasted with a\ndifferent model of time, called branching time.",
    "start": "623080",
    "end": "628360"
  },
  {
    "text": "And in this model of time,\nat each time instant, we consider all\npossible futures.",
    "start": "628360",
    "end": "634560"
  },
  {
    "text": "So if we have multiple\nactions that we could perform at a given state, we're going\nto consider different timelines",
    "start": "634560",
    "end": "640570"
  },
  {
    "text": "that branch off for each of\nthose possible behaviors. And this results in\nalternate courses of time",
    "start": "640570",
    "end": "648750"
  },
  {
    "text": "that we can reason\nabout as a set. And instead of thinking about\nthis as always conditions-- so,",
    "start": "648750",
    "end": "655250"
  },
  {
    "text": "our path always\ndoes this-- we can think about this more\nin possibilities. And if we're using branching\ntime, we can say, you know,",
    "start": "655250",
    "end": "661650"
  },
  {
    "text": "at this state and time,\nthere exists a future path in which we will always\nstay under the speed limit,",
    "start": "661650",
    "end": "667860"
  },
  {
    "text": "or, at this point in time,\nall our future paths satisfy a certain condition.",
    "start": "667860",
    "end": "673110"
  },
  {
    "text": "So whereas linear\ntemporal logic is more about guaranteeing what\nwill happen on a given path,",
    "start": "673110",
    "end": "680930"
  },
  {
    "text": "branching time\nallows us to reason about what might possibly\nhappen in the system.",
    "start": "680930",
    "end": "687070"
  },
  {
    "text": "So for our purposes\nwith planning, in part because it's\nmore attractable, and in part because it gives\nus an exact analysis of a given",
    "start": "687070",
    "end": "695000"
  },
  {
    "text": "path, we're going to\nbe doing linear time, and for that reason,\nwe use what's called linear temporal logic.",
    "start": "695000",
    "end": "700610"
  },
  {
    "text": "There's a different\ntype of temporal logic. There's one called CTL and CTL*\nthat deal with branching time.",
    "start": "700610",
    "end": "707255"
  },
  {
    "text": "And those are sort\nof an extension of linear temporal logic. They add a few\nother operators that",
    "start": "707255",
    "end": "712750"
  },
  {
    "text": "allow you to reason\nover multiple paths. But for our purposes,\nwe're just going to be using the\nlinear time model.",
    "start": "712750",
    "end": "720818"
  },
  {
    "text": "So kind of as a recap,\nwhat linear temporal logic involves--",
    "start": "720818",
    "end": "725910"
  },
  {
    "text": "we're using this\nlinear time model. Another important distinction\nis that we're actually going to be talking about\ninfinite sequences of states.",
    "start": "725910",
    "end": "733900"
  },
  {
    "text": "So instead of us just reasoning\nup until a certain goal condition is met, we're\nthinking about systems",
    "start": "733900",
    "end": "740520"
  },
  {
    "text": "that could theoretically\nkeep transitioning over time, over and over and\nover into the future.",
    "start": "740520",
    "end": "746560"
  },
  {
    "text": "So if you have one of\nthese state machines, you could think,\nat each time step, it's going to visit\nthe new state.",
    "start": "746560",
    "end": "751860"
  },
  {
    "text": "And if you give it\nenough time, it's just going to generate an\ninfinite sequence of states. And we can actually\nexpress properties",
    "start": "751860",
    "end": "757800"
  },
  {
    "text": "that can hold over an\ninfinite number of states, not just the discrete\nnumber of states that we might usually\nthink of to reach a goal.",
    "start": "757800",
    "end": "766300"
  },
  {
    "text": "And linear temporal\nlogic can actually be modified to work with\ndiscrete set of states.",
    "start": "766300",
    "end": "772470"
  },
  {
    "text": "It just requires an\nadditional operator. But the ability to reason about\ninfinite sequences of states",
    "start": "772470",
    "end": "779330"
  },
  {
    "text": "gives us a lot of power in\ntalking about guarantees for our system, regardless\nof how much time we're",
    "start": "779330",
    "end": "785680"
  },
  {
    "text": "talking about it.  Finally, all the\noperators we're going",
    "start": "785680",
    "end": "791730"
  },
  {
    "text": "to be looking at\nin our logic system are what we call\nforward-looking conditions.",
    "start": "791730",
    "end": "798010"
  },
  {
    "text": "So when we're\ngiven a state we're going to reasoning\nabout what's going to happen in the future for\na potentially infinite amount",
    "start": "798010",
    "end": "806205"
  },
  {
    "text": "of time in the future. There's sort of a symmetric\nversion of this logic that reasons about the past.",
    "start": "806205",
    "end": "813550"
  },
  {
    "text": "So for example, we can say-- talk about guarantees that\nsomething will eventually",
    "start": "813550",
    "end": "818880"
  },
  {
    "text": "happen in the future-- there's sort of a\nsymmetric version where we can talk about,\ngiven a certain state,",
    "start": "818880",
    "end": "824500"
  },
  {
    "text": "we can guarantee that\nsomething had eventually happened in the past. But for us in that we're\ngoing to focus on planning--",
    "start": "824500",
    "end": "831832"
  },
  {
    "text": "we're typically planning about\nwhat to do in the future, and it makes more sense for us\nto use this future of updating",
    "start": "831832",
    "end": "837190"
  },
  {
    "text": "the set for operators. And so I guess one\nlittle nuance here",
    "start": "837190",
    "end": "843897"
  },
  {
    "text": "that I sort of pointed\nout in the previous slide is that because we're using\na linear model of time",
    "start": "843897",
    "end": "848980"
  },
  {
    "text": "and not a branching\nmodel of time, we're going to be expressing\nproperties that happen over a single path of states, and\nnot properties that happen over",
    "start": "848980",
    "end": "856430"
  },
  {
    "text": "several path of states. ",
    "start": "856430",
    "end": "862260"
  },
  {
    "text": "So finally I'm just going\nto talk about a couple of the main application\nfor linear temporal logic",
    "start": "862260",
    "end": "868580"
  },
  {
    "text": "before Ellie will\ndive in, and actually talk more about the\nsemantics and syntax of how",
    "start": "868580",
    "end": "874460"
  },
  {
    "text": "we use this logic. So the first menus is\nverification and model",
    "start": "874460",
    "end": "880670"
  },
  {
    "text": "checking. We can use this\nlinear temporal logic",
    "start": "880670",
    "end": "885990"
  },
  {
    "text": "to create guarantees\nabout a system, and formally verify it for a\ncouple different properties.",
    "start": "885990",
    "end": "896020"
  },
  {
    "text": "For example, we can talk about\nthe safety of the system. We can say, over the\ncourse of this system,",
    "start": "896020",
    "end": "901160"
  },
  {
    "text": "we guarantee that\nit will never enter a state of a certain condition. We could also talk about the\nmaintenance of properties.",
    "start": "901160",
    "end": "908610"
  },
  {
    "text": "So over the entire\nlifetime of this system, we guarantee that a certain\ncondition will always hold.",
    "start": "908610",
    "end": "914598"
  },
  {
    "text": " The other main application\nfor temporal logic,",
    "start": "914598",
    "end": "920565"
  },
  {
    "text": "the one that we're going to be\nfocusing on, is for planning. And this planning\nusing these temporally",
    "start": "920565",
    "end": "926460"
  },
  {
    "text": "extended goals that\nI've been talking about, and it actually extends\nnicely to talking about temporally\nextended preferences.",
    "start": "926460",
    "end": "933279"
  },
  {
    "text": "So this is given that we have\na number of different paths that could reach a goal, we\ncan actually look at all those",
    "start": "933280",
    "end": "939570"
  },
  {
    "text": "and see which paths\nsatisfy certain conditions over the sequence of states,\nand use those conditions",
    "start": "939570",
    "end": "948029"
  },
  {
    "text": "as a way of choosing\nwhich ones we prefer. So with that, Ellie is now\ngoing to talk about some",
    "start": "948030",
    "end": "955020"
  },
  {
    "text": "of the syntax of\nlinear temporal logic. ",
    "start": "955020",
    "end": "962771"
  },
  {
    "text": "ELLIE: Hi guys. My name is Ellie, and\nI'm going to be talking about the syntax of LTL.",
    "start": "962771",
    "end": "970220"
  },
  {
    "text": "So an LTL formula is\na series of states. And at each state, you can\nhave various propositions",
    "start": "970220",
    "end": "976870"
  },
  {
    "text": "than can be either\ntrue or false. So for example-- is it OK\nif I erase this, Steve?",
    "start": "976870",
    "end": "983394"
  },
  {
    "text": "STEVE: Yeah. Go ahead.  ELLIE: So for example you can\nhave a [INAUDIBLE] animation",
    "start": "983394",
    "end": "993640"
  },
  {
    "text": "show that has a series of\nstates that goes on to infinity.",
    "start": "993640",
    "end": "999131"
  },
  {
    "text": "And at each state you\ncan have propositions that are either true or false.",
    "start": "999131",
    "end": "1004149"
  },
  {
    "text": "So the traffic could\nbe red could be an example for a proposition. We could be stopped, et cetera.",
    "start": "1004150",
    "end": "1013024"
  },
  {
    "text": " And there's various\nlogical operators",
    "start": "1013024",
    "end": "1019710"
  },
  {
    "text": "that we can apply\nto these formulas-- these sets of states,\nand we can determine if these logical operators\nare either true or false",
    "start": "1019710",
    "end": "1027880"
  },
  {
    "text": "about each set of\nstates-- each formula.",
    "start": "1027880",
    "end": "1034079"
  },
  {
    "text": "So there's the not operator,\nthe or operator, the and, the implies, if and only and,\nand like I said, the state--",
    "start": "1034079",
    "end": "1040896"
  },
  {
    "text": "each proposition of [INAUDIBLE]\ncan either be true or false. So just to go through\nsome examples of these,",
    "start": "1040896",
    "end": "1050530"
  },
  {
    "text": "the logical operator\ntrue says that-- essentially what the operator\ntrue says is it's not saying,",
    "start": "1050530",
    "end": "1058159"
  },
  {
    "text": "oh, this state is true. The operator just\ntrue says that there are states for all infinity.",
    "start": "1058160",
    "end": "1063179"
  },
  {
    "text": "So true is always true. So no matter what you\nhad for your state here, the logical operator true holds.",
    "start": "1063180",
    "end": "1070490"
  },
  {
    "text": "However, when you talk\nabout the logical operator true with respect to a certain\nstate or a certain proposition,",
    "start": "1070490",
    "end": "1077330"
  },
  {
    "text": "then it can either\nbe true or false. So for example, here, the\nlogical operator red light",
    "start": "1077330",
    "end": "1084460"
  },
  {
    "text": "is true at the first state. If this was green, then\nthe logical operator red",
    "start": "1084460",
    "end": "1090535"
  },
  {
    "text": "would be false at\nthe first state. Does that make sense? All right.",
    "start": "1090535",
    "end": "1096060"
  },
  {
    "text": "One important thing to note\nabout the logical o operators is that they just apply\nto the very first state",
    "start": "1096060",
    "end": "1103580"
  },
  {
    "text": "in your statement. So when we're discussing\nlogical operators, we haven't gotten\nto the point where",
    "start": "1103580",
    "end": "1109289"
  },
  {
    "text": "we can express\ntemporal information about our sequence of states.",
    "start": "1109290",
    "end": "1114900"
  },
  {
    "start": "1114900",
    "end": "1120400"
  },
  {
    "text": "The next operator is, not. So as you can see\nhere, the traffic light",
    "start": "1120400",
    "end": "1126120"
  },
  {
    "text": "is read at the first state. So the traffic\nlight's not green. Hold, because the\nproposition green is not",
    "start": "1126120",
    "end": "1133480"
  },
  {
    "text": "true at the first state. And the logical operator,\nand, at this first state",
    "start": "1133480",
    "end": "1140130"
  },
  {
    "text": "is we're at the red light,\nand we're getting gas. And so both that\nwe're at the red light",
    "start": "1140130",
    "end": "1146606"
  },
  {
    "text": "and that we're getting gas\nholds for the first state. ",
    "start": "1146606",
    "end": "1152272"
  },
  {
    "text": "And then the operator,\nor, essentially says-- I guess a lot of this\nis probably review",
    "start": "1152272",
    "end": "1158250"
  },
  {
    "text": "for you guys--\nlogical operators-- but essentially if\nyou have red or green",
    "start": "1158250",
    "end": "1163985"
  },
  {
    "text": "then you could either have\nthe traffic light be red or the traffic light be\ngreen at the first state. And as long as one of those\ntwo hold, or both of them",
    "start": "1163985",
    "end": "1171547"
  },
  {
    "text": "hold, then it's true. And one thing to note about\nor lies in if and only",
    "start": "1171547",
    "end": "1179110"
  },
  {
    "text": "if these can be re-written with\njust the logical operators, and, and, not.",
    "start": "1179110",
    "end": "1184700"
  },
  {
    "text": "So another way of\nexpressing red and green is to say that you can't have\nthe scenario where both is not",
    "start": "1184700",
    "end": "1192010"
  },
  {
    "text": "red, and it's not green. And I'm not going to go\nover that for, implies, and, if and only if, just\nfor the sake of time.",
    "start": "1192010",
    "end": "1200962"
  },
  {
    "text": "So that's just a review\nof the logical operators, and now we're going to go\ninto the temporal operators.",
    "start": "1200962",
    "end": "1206340"
  },
  {
    "text": "So when we're talking\nabout our autonomous car, what are some useful\ntemporal operators?",
    "start": "1206340",
    "end": "1212360"
  },
  {
    "text": "Because up until\nnow, we just are describing of the first\nstate in our sequence, which isn't really useful\nif we want to talk",
    "start": "1212360",
    "end": "1218129"
  },
  {
    "text": "about the entire set of\nsequences [INAUDIBLE] states. So what do you guys think are\nsome mutual things that we",
    "start": "1218130",
    "end": "1225270"
  },
  {
    "text": "want to be able to describe? I know Ben touched on some\nof them at the beginning, but if you guys could\nrecount some of them.",
    "start": "1225270",
    "end": "1230980"
  },
  {
    "text": "Yes. AUDIENCE: State connection. ELLIE: Mm-hmm. State connections. So exactly.",
    "start": "1230980",
    "end": "1238510"
  },
  {
    "text": "So if I'm in a state\nright now, might there be concerns about\nthe next state? Is that kind of like\nwhat you're saying?",
    "start": "1238510",
    "end": "1244192"
  },
  {
    "text": "Exactly. Yeah. So next is one of\nthe things that we might be concerned\nabout, the next state.",
    "start": "1244192",
    "end": "1250216"
  },
  {
    "start": "1250216",
    "end": "1256677"
  },
  {
    "text": "Are there any other tings\nyou guys can think of? AUDIENCE: Always or [INAUDIBLE] ELLIE: Yes, exactly.",
    "start": "1256677",
    "end": "1262638"
  },
  {
    "text": "Always. ",
    "start": "1262638",
    "end": "1269599"
  },
  {
    "text": "So like Ben said, we always\nwant to follow the speed limit.",
    "start": "1269599",
    "end": "1276485"
  },
  {
    "text": "We always want to be\nunder 35 miles an hour, or whatever the speed limit is. Anything else?",
    "start": "1276485",
    "end": "1282169"
  },
  {
    "text": "AUDIENCE: Until. ELLIE: Until. Yep. So like he said, you\nwant to be stopped",
    "start": "1282169",
    "end": "1287470"
  },
  {
    "text": "until the light turns green. Yes. AUDIENCE: Eventually. ELLIE: Eventually. Yep. So we eventually\nwant to get gas.",
    "start": "1287470",
    "end": "1298152"
  },
  {
    "text": "And eventually. Any other things?",
    "start": "1298152",
    "end": "1303931"
  },
  {
    "text": "Yes. AUDIENCE: At this state. ELLIE: At this state. Yep. And so, at this state, is kind\nof what the logical operators",
    "start": "1303931",
    "end": "1309824"
  },
  {
    "text": "were doing at the\nbeginning, but I agree that's something we\nhave to be able to express. So that's not a specific\ntemporal operator,",
    "start": "1309824",
    "end": "1316498"
  },
  {
    "text": "but it's included\nin the logical one, so I'll just write\nit up here for you. AUDIENCE: Can I ask a question?",
    "start": "1316499",
    "end": "1321627"
  },
  {
    "text": "ELLIE: Uh huh. AUDIENCE: So the\nlogical operators, are they acting on the-- so\nthey're acting for a state? They're not acting\non the entire chain.",
    "start": "1321627",
    "end": "1328844"
  },
  {
    "text": "ELLIE: They act for a state. And so if you just wrote\nthe logical operators,",
    "start": "1328844",
    "end": "1334460"
  },
  {
    "text": "just by the\ndefinition of LTL, it means let's just\nanalyze the first state and see if it's true.",
    "start": "1334460",
    "end": "1340509"
  },
  {
    "text": "And so it won't tell us\nanything about the third state or the fourth state or the\nsecond state, which is why we have to look at the next state.",
    "start": "1340510",
    "end": "1347059"
  },
  {
    "text": "So yeah. Any other questions?",
    "start": "1347059",
    "end": "1352438"
  },
  {
    "text": "OK. So like you said, next\nis an important one.",
    "start": "1352438",
    "end": "1359024"
  },
  {
    "text": "So right here we consider OK,\nthe next light will be green. ",
    "start": "1359024",
    "end": "1367412"
  },
  {
    "text": "And until is the one\nthat she mentioned, so the light will be red until\nit becomes green eventually.",
    "start": "1367412",
    "end": "1380050"
  },
  {
    "text": "So the light will eventually\nat some point in the future turn green. So you might be waiting at\nthe red light for a long time,",
    "start": "1380050",
    "end": "1386270"
  },
  {
    "text": "but eventually it's going\nto turn green for us. The light will\nalways be red, so I",
    "start": "1386270",
    "end": "1391932"
  },
  {
    "text": "guess you're stuck at the\ntraffic light for a long time, or globally-- that's\nanother name for always.",
    "start": "1391932",
    "end": "1398659"
  },
  {
    "text": "And lastly, this on is a\nlittle bit less intuitive.",
    "start": "1398660",
    "end": "1405040"
  },
  {
    "text": "So what this is\nsaying is the light will always be red until\nanother circumstance coincides",
    "start": "1405040",
    "end": "1412050"
  },
  {
    "text": "with the same state. So the light will be always\nred until the car gets gas. And then after it gets its\ngas, then the red is released,",
    "start": "1412050",
    "end": "1420520"
  },
  {
    "text": "and the light can be either\ngreen or red after that. So you have red red red red red\nuntil we have both red and gas.",
    "start": "1420520",
    "end": "1429100"
  },
  {
    "text": "And then it can be green or\nit can be red [INAUDIBLE] it's not constrained\nto being red. Does that make sense? That one's a little bit\nless intuitive, so--",
    "start": "1429100",
    "end": "1436956"
  },
  {
    "text": "is that good?  OK.",
    "start": "1436956",
    "end": "1444019"
  },
  {
    "text": "All right. So now that we've gone\nover just the intuitive understanding of that,\nI'm going to give you",
    "start": "1444020",
    "end": "1449520"
  },
  {
    "text": "the actual syntax for that. So x is representative of next.",
    "start": "1449520",
    "end": "1456570"
  },
  {
    "text": "So in the first state, we\ndon't care if p is true. p could be not true,\np could be true.",
    "start": "1456570",
    "end": "1462370"
  },
  {
    "text": "It doesn't matter. But in the second\nstate, the next one up in the first state, p,\nhas to hold in order for xp",
    "start": "1462370",
    "end": "1469610"
  },
  {
    "text": "to be a true statement about\nour sequence of states. So what do you guys\nthink if I wrote this?",
    "start": "1469610",
    "end": "1483169"
  },
  {
    "text": "What would that mean? ",
    "start": "1483169",
    "end": "1489060"
  },
  {
    "text": "AUDIENCE: Different\nstate [INAUDIBLE] ELLIE: Yep. So this one over here? AUDIENCE: Sure. [INAUDIBLE]",
    "start": "1489061",
    "end": "1494636"
  },
  {
    "text": "ELLIE: Yeah. Perfect. All right. The until operator.",
    "start": "1494636",
    "end": "1500116"
  },
  {
    "text": "The until operator essentially\nsays, like Ben said, we're stopped until\nthe light is green.",
    "start": "1500116",
    "end": "1507580"
  },
  {
    "text": "So if you have p\nuntil w, you just p has to be true at every state\nuntil w, and after that point,",
    "start": "1507580",
    "end": "1513980"
  },
  {
    "text": "p can be whatever\nit wants to be.  p eventually, or\nfuture operator,",
    "start": "1513980",
    "end": "1521340"
  },
  {
    "text": "says that at some point in\nthe future we will get gas. However it's important to note--",
    "start": "1521340",
    "end": "1527600"
  },
  {
    "text": "I know when we talked\nabout getting gas we said, oh, we have to always get gas\nat some point in the future,",
    "start": "1527600",
    "end": "1532840"
  },
  {
    "text": "but the future eventually\noperator is just at one point in the future.",
    "start": "1532840",
    "end": "1538050"
  },
  {
    "text": "So once you get gas, you\ndon't have to get it again. Yes. AUDIENCE: On the\nprevious slide you had a not at the\nbottom that said that w",
    "start": "1538050",
    "end": "1544640"
  },
  {
    "text": "is required to become true. Does that mean an\nuntil operator also implies a future operator on w?",
    "start": "1544640",
    "end": "1550746"
  },
  {
    "text": "ELLIE: Yeah. AUDIENCE: All right. [INAUDIBLE] ELLIE: Yep. But it's the added\ncondition that p will be true until the w.",
    "start": "1550746",
    "end": "1556940"
  },
  {
    "text": "AUDIENCE: But like whenever\nyou use until, you say p until w that you'd\nalso have to add",
    "start": "1556940",
    "end": "1562940"
  },
  {
    "text": "at some point in the\nfuture [INAUDIBLE] ELLIE: Yeah. Yep, you're right. ",
    "start": "1562940",
    "end": "1568816"
  },
  {
    "text": "AUDIENCE: Well, I mean, it would\nbe possible that this stays p, right? ELLIE: It could. Yeah. But then if your system-- that\nwould be totally fine if you",
    "start": "1568816",
    "end": "1576203"
  },
  {
    "text": "had your system just be p, but\nthen the operator p until w wouldn't hold unless you had a\nw at some point in that sequence",
    "start": "1576203",
    "end": "1583770"
  },
  {
    "text": "of p's. Does that make sense. AUDIENCE: Yeah. [INAUDIBLE] I guess it does\nif that's the way to do it,",
    "start": "1583770",
    "end": "1589231"
  },
  {
    "text": "but it doesn't make\nsense [INAUDIBLE] it. ",
    "start": "1589232",
    "end": "1596255"
  },
  {
    "text": "ELLIE: So you're\nsaying that we could have a bunch of p's, right? Is that what you're saying? And I'm saying that this\nis a fine state to have.",
    "start": "1596255",
    "end": "1606008"
  },
  {
    "text": "You can have whatever you want. And we're just analyzing if\na sentence is true about it.",
    "start": "1606009",
    "end": "1611755"
  },
  {
    "text": "So this statement,\nit's not true-- or, sorry. I'm saying that it's not\ntrue that we have p and lw",
    "start": "1611755",
    "end": "1623010"
  },
  {
    "text": "because there's\nno w in our state. But if we add in a w somewhere\nand we keep all the p's, then",
    "start": "1623010",
    "end": "1630070"
  },
  {
    "text": "it's true because we have\np up until we get to a w. Did that make sense?",
    "start": "1630070",
    "end": "1635909"
  },
  {
    "text": "AUDIENCE: It made sense\nthat that's the rule, but it doesn't make\nsense to me why. Because the\nstatement [INAUDIBLE] true and if w never appears.",
    "start": "1635909",
    "end": "1642850"
  },
  {
    "text": "You have p until w,\nwhich never happened. ELLIE: Yeah. If w never happened,\nthen it wouldn't be true.",
    "start": "1642850",
    "end": "1649759"
  },
  {
    "text": "AUDIENCE: I mean, technically,\nfor the English language it would be true. AUDIENCE: I guess it's not-- AUDIENCE: If you have\np out to infinity,",
    "start": "1649759",
    "end": "1657094"
  },
  {
    "text": "and you never have w's. p until w is true. AUDIENCE: p until anything\nis true [INAUDIBLE]",
    "start": "1657094",
    "end": "1663280"
  },
  {
    "text": "AUDIENCE: Like if\nyou say that I'm hungry until I eat,\nand you never eat, then you will always be hungry. ELLIE: Oh, I see.",
    "start": "1663280",
    "end": "1670040"
  },
  {
    "text": "So that makes sense\nin a logical sense, but that's not how\nit's described in LTL. PROFESSOR: There's\nalso an operator that's",
    "start": "1670040",
    "end": "1675303"
  },
  {
    "text": "sort of unofficial\ncalled the weak until, and that's sort of saying\np until w, or always p.",
    "start": "1675303",
    "end": "1681720"
  },
  {
    "text": "So that kind of gets\nrid of the condition that it reaches w at some point. AUDIENCE: It aligns more\nwith the English, too.",
    "start": "1681720",
    "end": "1687593"
  },
  {
    "text": "PROFESSOR: Yeah. ELLIE: Yeah. AUDIENCE: But just the\nuntil operator on its own is just sort of\nlike a strong until. ELLIE: Yeah. PROFESSOR: So it adds the--",
    "start": "1687593",
    "end": "1693111"
  },
  {
    "text": "AUDIENCE: Yeah, that's fine. ELLIE: OK. PROFESSOR: This is\nthe way it works. ELLIE: Yeah. Sometimes-- yeah, I get\nconfused about this sometimes.",
    "start": "1693111",
    "end": "1698410"
  },
  {
    "text": "I'll be like, why\nthey necessarily [? chose any of these, ?]\nbut, OK. And then the globally\none, which we",
    "start": "1698410",
    "end": "1704076"
  },
  {
    "text": "said-- this is the one that\nyou were just describing here [INAUDIBLE] when\nyou were talking about the p at every\nsingle state in the future.",
    "start": "1704076",
    "end": "1710295"
  },
  {
    "text": "And then the release\noperator is you have to have p until you\nhave w, but p and w also",
    "start": "1710295",
    "end": "1716750"
  },
  {
    "text": "have to share the same state\nwhen they switch from-- so in until, you don't\nhave to have the p here,",
    "start": "1716750",
    "end": "1726110"
  },
  {
    "text": "but with release, you have\nto have the p and w occur in the same state. Does that make sense?",
    "start": "1726110",
    "end": "1732502"
  },
  {
    "text": "Yes? OK.  So just like before, operators\ncan be described using not",
    "start": "1732502",
    "end": "1741785"
  },
  {
    "text": "and and. The future, released, and\nthe globally operators can also be described using\nother temporal operators.",
    "start": "1741786",
    "end": "1753030"
  },
  {
    "text": "And so just as an exercise, can\nany of you guys tell me which-- these are not in order--\nwhich of these line up",
    "start": "1753030",
    "end": "1760170"
  },
  {
    "text": "with the other-- like, whichever\nones they line up with. And I'll give you guys\nlike three minutes",
    "start": "1760170",
    "end": "1765553"
  },
  {
    "text": "to just think about it, and then\nwe'll work through it together on the board. ",
    "start": "1765553",
    "end": "1853336"
  },
  {
    "text": "All right, so have\nany of you guys thought about which ones\nmight correlate to which ones? Does anyone have\nany suggestions?",
    "start": "1853336",
    "end": "1860804"
  },
  {
    "text": "Yes. AUDIENCE: The first\none's the top one. ELLIE: This one is the top one. That's exactly right. So let's continue\nthis state again.",
    "start": "1860804",
    "end": "1870870"
  },
  {
    "text": "So the statement, true,\ndoesn't say anything",
    "start": "1870870",
    "end": "1876149"
  },
  {
    "text": "about what the propositions are. It's just something that's\ntrue for all states, right? So if we're saying,\ntrue until pi,",
    "start": "1876149",
    "end": "1883129"
  },
  {
    "text": "that means that you\ncan have whatever you want until p occurs.",
    "start": "1883129",
    "end": "1888350"
  },
  {
    "text": "So does that make sense that,\nat some point in the future, p has to occur, exactly because\nwe had the strong until, right.",
    "start": "1888350",
    "end": "1896590"
  },
  {
    "text": "Does that make\nsense to everyone? You guys want to see\nsome [INAUDIBLE]?? All right and now\nwhat about this one?",
    "start": "1896590",
    "end": "1902280"
  },
  {
    "text": "We have not as not p. So this is saying that\nat some point, if you",
    "start": "1902280",
    "end": "1914110"
  },
  {
    "text": "can't get a p set at\nsome point in the future, you don't have p. So what do you think\nthat would correspond to?",
    "start": "1914110",
    "end": "1920360"
  },
  {
    "text": "If at some point\nin the future, you can't have the situation\nwhere there's not p. AUDIENCE: The third one.",
    "start": "1920360",
    "end": "1925510"
  },
  {
    "text": "ELLIE: The third one? [INAUDIBLE] So that\nwould be if you have p at every\nsingle state, then",
    "start": "1925510",
    "end": "1932206"
  },
  {
    "text": "you would never have a situation\nwhere you don't have p, right? And so that leaves\nthis last one.",
    "start": "1932207",
    "end": "1937750"
  },
  {
    "text": " You don't have a scenario where\nyou have not p until not w.",
    "start": "1937750",
    "end": "1947737"
  },
  {
    "text": "So if you have not--",
    "start": "1947738",
    "end": "1953686"
  },
  {
    "text": "OK. It's still a little hard. But I'll come back to\nthat one at the end, OK?",
    "start": "1953686",
    "end": "1960650"
  },
  {
    "text": "But it's just important to\nremember that you can describe these operators\nwith similar to them",
    "start": "1960650",
    "end": "1968075"
  },
  {
    "text": "so that your\nplanner doesn't have to deal with the global operator\nor these operators-- eventually",
    "start": "1968075",
    "end": "1973184"
  },
  {
    "text": "operator, it can have less\n[INAUDIBLE] to deal with.",
    "start": "1973185",
    "end": "1978200"
  },
  {
    "text": "So yeah, you guys were right. Perfect. And then this is just a recap\nof the different operators",
    "start": "1978200",
    "end": "1984600"
  },
  {
    "text": "and the other ways that\nyou can express them.",
    "start": "1984600",
    "end": "1990205"
  },
  {
    "text": "And so there's a few\nmore really cool things that you can do combining\nthese different operators,",
    "start": "1990205",
    "end": "1995779"
  },
  {
    "text": "and the first is that-- remember when Ben was describing\nthat we need to get gas?",
    "start": "1995780",
    "end": "2003130"
  },
  {
    "text": "And we need to get\nit in the future, but even after we\nget gas, we're going to have to get it again\nsome time in the future.",
    "start": "2003130",
    "end": "2010830"
  },
  {
    "text": "So it's important that\nwe can describe something that happens infinitely often. And the way that we describe\nthat is saying that we always",
    "start": "2010830",
    "end": "2018680"
  },
  {
    "text": "have the scenario where you\nwill eventually reach p.",
    "start": "2018680",
    "end": "2024660"
  },
  {
    "text": "So I'm trying to think of\nanother way to describe that, but does that make sense\nthat right now in the future,",
    "start": "2024660",
    "end": "2032510"
  },
  {
    "text": "I'm going to get gas. And even after I get that gas,\nI will eventually in the future",
    "start": "2032510",
    "end": "2037520"
  },
  {
    "text": "also need to get gas again,\nbecause your car will always be needing to get gas. Does that make sense?",
    "start": "2037520",
    "end": "2044658"
  },
  {
    "text": "Cool. And then eventually\nforever is another scenario that's important to describe.",
    "start": "2044658",
    "end": "2051066"
  },
  {
    "text": "So let's say that the\ntraffic light will eventually turn green forever. We need to be able to say that\nat some point in the future,",
    "start": "2051067",
    "end": "2057984"
  },
  {
    "text": "although we don't know when, the\ntraffic light will turn green. So the future operator says that\nat some point in the future,",
    "start": "2057985",
    "end": "2066710"
  },
  {
    "text": "you will have\nsomething come true. And so at this state, p becomes\ntrue, but the global operators",
    "start": "2066710",
    "end": "2074570"
  },
  {
    "text": "that happened from this\nstate forever afterwards, which is saying that you\neventually will always",
    "start": "2074570",
    "end": "2083690"
  },
  {
    "text": "have this state B be true. ",
    "start": "2083690",
    "end": "2089062"
  },
  {
    "text": "Do you guys have any\nquestions on that? Did I explain that good enough. AUDIENCE: It seems weird to me\nthat the gas tank is becoming",
    "start": "2089062",
    "end": "2094610"
  },
  {
    "text": "this occasional temporal\noperator instead of just like the state that\nwe actually have gas, would just be the logical\nthing that [INAUDIBLE]",
    "start": "2094610",
    "end": "2104817"
  },
  {
    "text": "ELLIE: Oh, yeah, I-- AUDIENCE: Why is the act of\ngetting gas showing up here like that, versus just, you\nalways need quantity of gas.",
    "start": "2104817",
    "end": "2112529"
  },
  {
    "text": "ELLIE: That's true. We do always need\nsome quantity of gas, and you would describe\nthat, like you said, just with the always\noperator, but I",
    "start": "2112529",
    "end": "2118410"
  },
  {
    "text": "guess my action\nof getting gas is I was thinking of actually\ndriving up to the gas station and filling it up with gas.",
    "start": "2118410",
    "end": "2124760"
  },
  {
    "text": "And if you didn't do\nthat, you wouldn't",
    "start": "2124760",
    "end": "2129830"
  },
  {
    "text": "be able to always have gas. Does that make sense? AUDIENCE: Right,\nso I would think",
    "start": "2129830",
    "end": "2135140"
  },
  {
    "text": "that always having gas would\nmake [INAUDIBLE] of you plan [INAUDIBLE] ELLIE: Yeah, and depending\non how you make your model,",
    "start": "2135140",
    "end": "2141086"
  },
  {
    "text": "you definitely could do\nthat, and that definitely would satisfy the condition. [INTERPOSING VOICES] AUDIENCE: --the usual\nway to deal with it?",
    "start": "2141086",
    "end": "2147752"
  },
  {
    "text": "ELLIE: Well, it depends\non the situation. Maybe you [INAUDIBLE]\nwant to say",
    "start": "2147752",
    "end": "2153490"
  },
  {
    "text": "at some point in the future,\nthe light will always be green, because you want to make sure\nthat cars can go through,",
    "start": "2153490",
    "end": "2158500"
  },
  {
    "text": "and there's a\ndifference between red, and some point it will\nbe green in the future. So it really depends\non your model and how--",
    "start": "2158500",
    "end": "2163930"
  },
  {
    "text": "I think the way\nyou're saying it, where you always\nwant to have gas, and the proposition gas is how\nmuch gas you have in your tank,",
    "start": "2163930",
    "end": "2173692"
  },
  {
    "text": "and if you have it\nor don't, then I think that that would be a\nreally good way to model it, too. AUDIENCE: Because this way, if\nyou said, I have to get gas.",
    "start": "2173692",
    "end": "2179728"
  },
  {
    "text": "I planned it for next week, but\nI've run out of gas this week. Do you know what I mean, like,\nyou have to somehow be tracking",
    "start": "2179728",
    "end": "2185592"
  },
  {
    "text": "the quantity of gas also. ELLIE: I agree. I agree. I was just using it as an\nexample to explain the concept,",
    "start": "2185592",
    "end": "2190890"
  },
  {
    "text": "but I agree that that\ndefinitely probably could be better with more work. AUDIENCE: Well, I\nthink in both cases what it could represent is\nhaving gas all the time,",
    "start": "2190890",
    "end": "2199460"
  },
  {
    "text": "or explicitly saying that you're\ngoing to be in gas stations eventually--",
    "start": "2199460",
    "end": "2206056"
  },
  {
    "text": "always eventually. It depends on how-- maybe we'd want to always\nhave gas from a station,",
    "start": "2206056",
    "end": "2213260"
  },
  {
    "text": "and also getting gas from it. So depending on how you want\nto model it, but I think",
    "start": "2213260",
    "end": "2218950"
  },
  {
    "text": "both will work. ",
    "start": "2218950",
    "end": "2223980"
  },
  {
    "text": "AUDIENCE: So infinite\nand often, doesn't really care about how frequently-- ELLIE: Yeah, it doesn't\ncare how frequently.",
    "start": "2223980",
    "end": "2229780"
  },
  {
    "text": "AUDIENCE: But [INAUDIBLE]\nfor instance something that happens every 60 years. My system lifetime\nserver is 30 years,",
    "start": "2229780",
    "end": "2236304"
  },
  {
    "text": "which means something\nhappens only once. So in this case,\ninfinite and often, how can you filter\na switch operator",
    "start": "2236304",
    "end": "2242320"
  },
  {
    "text": "could be the same, right? ELLIE: Can you repeat\nthat again [INAUDIBLE] AUDIENCE: So for\ninstance something",
    "start": "2242320",
    "end": "2248005"
  },
  {
    "text": "happens every 60 years. My system lifetime\ngoes to 30 years. After 30 years, I have to\nget a re-up on the system.",
    "start": "2248005",
    "end": "2254210"
  },
  {
    "text": "Then so during this [INAUDIBLE]\nonly one thing happened. And so it happens\noff into infinity,",
    "start": "2254210",
    "end": "2259814"
  },
  {
    "text": "but in the lifetime\nof the system, it only happened\nonce, and therefore in this condition, the\ninfinite and often should",
    "start": "2259814",
    "end": "2266570"
  },
  {
    "text": "be set the same as the future,\nright, in the current state. Something happened\nin the future, I would say something\ncould never happen again.",
    "start": "2266570",
    "end": "2273960"
  },
  {
    "text": "ELLIE: Kind of. So when you're talking\nabout a system that's dying after 30 years, the LTL\ndoesn't actual model something",
    "start": "2273960",
    "end": "2282320"
  },
  {
    "text": "that ends. It would model\nsomething to infinity, although there is an\nextension to LTL that can incorporate that into it,\nhaving it have an actual end",
    "start": "2282320",
    "end": "2292590"
  },
  {
    "text": "goal state. And I think in that case,\nthen infinitely often would be different, and would--",
    "start": "2292590",
    "end": "2299384"
  },
  {
    "text": "I don't know exactly how that\nwould find that situation. Do you know, Ben? I know you had kind of--",
    "start": "2299384",
    "end": "2305909"
  },
  {
    "text": "BEN: So there's something called\nmetric temporal logic, which associates a time scale of\neach of these operators.",
    "start": "2305909",
    "end": "2311703"
  },
  {
    "text": "So I think you'd have to\nuse that if you were trying to express that you had to\nalways meet those conditions",
    "start": "2311704",
    "end": "2317210"
  },
  {
    "text": "still within your lifetime. You could have some sort of\nqualifier to these operators to specify an actual time\n[INAUDIBLE] where that operator",
    "start": "2317210",
    "end": "2324730"
  },
  {
    "text": "[INAUDIBLE] AUDIENCE: So which\nwould you file for the instance infinitely\noften [INAUDIBLE] scenario something at a\nlittle bit more frequent",
    "start": "2324730",
    "end": "2330849"
  },
  {
    "text": "of a general system\nby the time, right. Now we have something you\nknow [INAUDIBLE] 100 years ago",
    "start": "2330850",
    "end": "2336290"
  },
  {
    "text": "for years. BEN: You know, it's\nimportant that the LTL we're explaining here is only\ndealing with infinite states.",
    "start": "2336290",
    "end": "2342820"
  },
  {
    "text": "So I agree, it's\na little bit-- you have to think about\nthat process of how do apply something that goes\non forever to a real system.",
    "start": "2342820",
    "end": "2349219"
  },
  {
    "text": "It obviously doesn't\nmodel correctly. AUDIENCE: There has\nto be a way to-- I mean the future thing,\nif he has a system that",
    "start": "2349219",
    "end": "2354330"
  },
  {
    "text": "lasts 30 years, and\nyou say future p, somewhere in your\ndesign of the system is going to say that the\nconstraint on future p",
    "start": "2354330",
    "end": "2361095"
  },
  {
    "text": "is that it has to happen\nwithin 30 years, right? Because future p\nhere, for getting gas, has to happen before\nI run out of gas.",
    "start": "2361095",
    "end": "2367750"
  },
  {
    "text": "It's not just-- this\nrepresentation says it just happens in the future, but\nsomewhere in your constraint",
    "start": "2367750",
    "end": "2373554"
  },
  {
    "text": "checking, it's going\nto say, hey, we didn't get gas in this\nplan soon enough, right? ELLIE: Yeah. AUDIENCE: Somehow.",
    "start": "2373554",
    "end": "2378560"
  },
  {
    "text": "ELLIE: Yes, that's\ndefinitely true. And these are just tools\nto help you model it,",
    "start": "2378560",
    "end": "2383917"
  },
  {
    "text": "but it's definitely not the\nentire model of your system obviously, and so I agree\nthat we definitely would",
    "start": "2383917",
    "end": "2389505"
  },
  {
    "text": "have to incorporate that in. And for finance systems you\nhave to account for that. And that's why they have\nthe extension of LTL which",
    "start": "2389505",
    "end": "2396270"
  },
  {
    "text": "is the finance systems,\nwhich we can certainly drop a link of of\nthe papers, and where",
    "start": "2396270",
    "end": "2401870"
  },
  {
    "text": "we got the information, to\nthe class if you guys would like that. AUDIENCE: Yeah, I think you\nguys have done a very good job",
    "start": "2401870",
    "end": "2408930"
  },
  {
    "text": "of answering the questions. The three extensions\nto LTL that I've found to be the most\nrelevant kinds of things",
    "start": "2408930",
    "end": "2414880"
  },
  {
    "text": "that we're doing is\nmetric temporal logic, which is the first one\nthat you mentioned, also to be able to have it over\nbounded time, which is related,",
    "start": "2414880",
    "end": "2422069"
  },
  {
    "text": "and you mentioned. And then the last one is\nto deal with uncertainty, and is then a problem of\nlinear temporal logic.",
    "start": "2422070",
    "end": "2428129"
  },
  {
    "text": "ELLIE: OK. Cool. All right. So I meant to have this\nas two separate slides,",
    "start": "2428129",
    "end": "2434545"
  },
  {
    "text": "but what are some true\nstatements about LTL that you guys can tell\nme about to look at this,",
    "start": "2434545",
    "end": "2442173"
  },
  {
    "text": "or do, and explain\nwhy if you look at it. ",
    "start": "2442173",
    "end": "2450190"
  },
  {
    "text": "OK, so why is the next red true? AUDIENCE: The next\nstep is slow down.",
    "start": "2450190",
    "end": "2455776"
  },
  {
    "text": "ELLIE: Yep, exactly. Because the next one is red. Why is it true that in the\nfuture, that it's green? [INAUDIBLE]",
    "start": "2455776",
    "end": "2461765"
  },
  {
    "text": "Because in the\nfuture, it's green. And why is it true that\nthere's red until green? AUDIENCE: It keeps being\nred until it's green.",
    "start": "2461766",
    "end": "2469438"
  },
  {
    "text": "ELLIE: Exactly. So it makes sense\nthat if all of these are true, that this culmination\nof the and statements",
    "start": "2469438",
    "end": "2475786"
  },
  {
    "text": "between all of them\nis also true, right? And so you could do\nthat with or as well, or you could do that with--",
    "start": "2475786",
    "end": "2481170"
  },
  {
    "text": "if you had sequences\nbehind here, you could put a future\naround this whole thing,",
    "start": "2481170",
    "end": "2486410"
  },
  {
    "text": "and it would be true that\nat some point in the future, all of this would hold. Does that make sense?",
    "start": "2486410",
    "end": "2491911"
  },
  {
    "text": "Yes? OK. AUDIENCE: Why keep it red there? Your red is the next step.",
    "start": "2491912",
    "end": "2497160"
  },
  {
    "text": "ELLIE: Yep. Exactly. I was just saying if you\nhad more in the past, and you were considering\nit from the previous--",
    "start": "2497160",
    "end": "2503856"
  },
  {
    "text": "All right so now\nNadia's going to talk about expressing LTL in PDDL3. ",
    "start": "2503856",
    "end": "2517920"
  },
  {
    "text": "So Ben and Ellie have\nguided through how",
    "start": "2517920",
    "end": "2523270"
  },
  {
    "text": "expressive LTL formulation is. I'm going to formulate the\nLTL in a classical planner",
    "start": "2523270",
    "end": "2531820"
  },
  {
    "text": "like PDDL3. Now I'm using PDDL3, which is an\ncomposed extension of PDDL2.2,",
    "start": "2531820",
    "end": "2539340"
  },
  {
    "text": "which supports some\nof the LTL operators.",
    "start": "2539340",
    "end": "2546170"
  },
  {
    "text": "So these are the basic\noperators that you can use to express\nthe constraints",
    "start": "2546170",
    "end": "2551920"
  },
  {
    "text": "and goals of your plan. So you have at end,\nalways, sometimes, within,",
    "start": "2551920",
    "end": "2557875"
  },
  {
    "text": "at-most-once, sometime-after,\nsometime-before, always-within,",
    "start": "2557875",
    "end": "2563020"
  },
  {
    "text": "and hold-during. So again, now here is a numeric\ncontrols that you can specify,",
    "start": "2563020",
    "end": "2570940"
  },
  {
    "text": "and the ellipses represents an\nalready-existing [INAUDIBLE]",
    "start": "2570940",
    "end": "2577550"
  },
  {
    "text": "goal. This is a goal description-- [INAUDIBLE] So some of the operators\nmay look familiar to you,",
    "start": "2577550",
    "end": "2585580"
  },
  {
    "text": "because they can also be used to\nexpress the constraint in STN, the Simple Temporal Network,\nthat we learned in class.",
    "start": "2585580",
    "end": "2593200"
  },
  {
    "text": "And there are some\noperators that are unique to LTL\nor other kinds,",
    "start": "2593200",
    "end": "2599450"
  },
  {
    "text": "like metric temporal network,\nlike always, for example.",
    "start": "2599450",
    "end": "2604910"
  },
  {
    "text": "So now we are going\nto take a look at how you can express\nthe operators using",
    "start": "2604910",
    "end": "2615144"
  },
  {
    "text": "the PDDL3 language. So we can use, within one\noccurrence to the next,",
    "start": "2615144",
    "end": "2624089"
  },
  {
    "text": "because there is no\nexplicit next in the PDDL3. And you use always\nuntil to express until.",
    "start": "2624090",
    "end": "2632625"
  },
  {
    "text": "And in the future, you\nuse sometimes after, and globally, you\ncan use always.",
    "start": "2632625",
    "end": "2639320"
  },
  {
    "text": "And for release,\nsince it can always be omega or always until\nomega when you see p.",
    "start": "2639320",
    "end": "2649930"
  },
  {
    "text": "You can use all costs, too,\nalthough this [INAUDIBLE].. ",
    "start": "2649930",
    "end": "2657380"
  },
  {
    "text": "OK, let's see some examples. So if your goal is to have\nthe traffic light turn",
    "start": "2657380",
    "end": "2665877"
  },
  {
    "text": "red in the next\nstate, you would want to formulate it using\nwithin one occurrence,",
    "start": "2665877",
    "end": "2676775"
  },
  {
    "text": "the traffic light\nwould turn red.  And let's take a look at a\nmore complicated example.",
    "start": "2676775",
    "end": "2685320"
  },
  {
    "text": "So if you want to model a\ngoal saying that the traffic light would be green until\nit turns red, at which point",
    "start": "2685320",
    "end": "2696558"
  },
  {
    "text": "it would be red forever. So this is temporal\nlogic of predicates",
    "start": "2696558",
    "end": "2703862"
  },
  {
    "text": "that express this goal. And then if you want to\nmodel that using PDDL,",
    "start": "2703862",
    "end": "2713799"
  },
  {
    "text": "there is a direct mapping. You can see the direct\nmapping between the predicates and the PDDL.",
    "start": "2713800",
    "end": "2720220"
  },
  {
    "text": "So this is basically\nsaying, it would always",
    "start": "2720220",
    "end": "2725740"
  },
  {
    "text": "be green until it turns red. And turning red implies\nit will always turn red.",
    "start": "2725740",
    "end": "2731740"
  },
  {
    "text": " So next, [? Arleese ?] will tell\nus how to map between the LTL",
    "start": "2731740",
    "end": "2742640"
  },
  {
    "text": "to PDDL with a\nBuchi Automata which is a specialized automata. ",
    "start": "2742640",
    "end": "2750752"
  },
  {
    "text": "GUEST SPEAKER: Cool. So I'm [? Arleese. ?] I have\nbridged the gap between LTL and the planning world.",
    "start": "2750752",
    "end": "2756403"
  },
  {
    "text": "So this is kind of\nthe framework for how you would go from\ntaking a problem with temporally extended\ngoals all the way to a plan.",
    "start": "2756404",
    "end": "2763000"
  },
  {
    "text": "So as you can kind\nof imagine from what Ben and Ellie were\ntalking about, LTL is pretty expressive.",
    "start": "2763000",
    "end": "2768195"
  },
  {
    "text": "You can express a lot of\ndifferent types of goals that include more temporal\nproperties than just a time",
    "start": "2768195",
    "end": "2774170"
  },
  {
    "text": "window for a goal\nto be completed. So once we have a kind\nof defined problem",
    "start": "2774170",
    "end": "2779195"
  },
  {
    "text": "with these temporary\nextended goals, then you want to model it in\na language like LTL or PDDL.",
    "start": "2779196",
    "end": "2786021"
  },
  {
    "text": "So if you have a\nlanguage like PDDL, and you have a planner that\ncan do an algorithm called progression, which I'll\ntalk about a little later,",
    "start": "2786021",
    "end": "2792200"
  },
  {
    "text": "you can go directly to a plan. Basically how progression works\nis it's kind of an algorithm",
    "start": "2792200",
    "end": "2798503"
  },
  {
    "text": "that tells you when\nyou're analyzing a state, and you're analyzing\nLTL-like formulas that are true in a specific\nstate, how to push formulas",
    "start": "2798503",
    "end": "2807360"
  },
  {
    "text": "that you need to evaluate\nlater on to the next state, and how to keep track\nof things that you need to continue to evaluate for\nsatisfaction in future states.",
    "start": "2807360",
    "end": "2816890"
  },
  {
    "text": "Another way you can do this\nis by taking LTL formulations and translating them\ninto Buchi Automata.",
    "start": "2816890",
    "end": "2822640"
  },
  {
    "text": "So Buchi Automata are\nbasically finite state machines that are extended to handle an\ninfinite sequence of states.",
    "start": "2822640",
    "end": "2830530"
  },
  {
    "text": "And I'll get into more about\nhow Buchi Automata work. After you have a\nBuchi Automata, you",
    "start": "2830530",
    "end": "2835664"
  },
  {
    "text": "can then translate\nthat into PDDL2, which you guys are\nall familiar with, and then that PDDL2 can be used\nfrom the classical planner,",
    "start": "2835664",
    "end": "2842390"
  },
  {
    "text": "and get a plan.  So a little bit more\nabout Buchi Automata.",
    "start": "2842390",
    "end": "2848528"
  },
  {
    "text": "Again, like I said,\nit's an extension of a finite state machine. Oh, yes. AUDIENCE: Why would have a Buchi\nAutomata when you could just",
    "start": "2848528",
    "end": "2854973"
  },
  {
    "text": "use a planner that will go from\nPDDL3 straight to the plan? GUEST SPEAKER: I guess\nit just depends on how--",
    "start": "2854973",
    "end": "2861060"
  },
  {
    "text": "what kind of planners\nwe have access to, what other systems you have. It's done both ways. So PDDL3 is still kind of\nnew, and so there's not",
    "start": "2861060",
    "end": "2867951"
  },
  {
    "text": "a lot of planners that actually\nhave progression and can handle PDDL3. ",
    "start": "2867951",
    "end": "2874060"
  },
  {
    "text": "AUDIENCE: And it's also the case\nthat the particular algorithms that are trying to either be\nverification or planning, maybe",
    "start": "2874060",
    "end": "2881350"
  },
  {
    "text": "exploiting particular properties\nof the Buchi Automaton, as opposed to the properties\nof the native language.",
    "start": "2881350",
    "end": "2886384"
  },
  {
    "text": " GUEST SPEAKER: So you guys are\nall familiar with regular state",
    "start": "2886384",
    "end": "2891870"
  },
  {
    "text": "machines. Buchi Automata has a\nvery similar formulation. Some slight differences--\nyou have a set of states,",
    "start": "2891870",
    "end": "2897210"
  },
  {
    "text": "you have an initial state, and\nyou have a transition relation, and then you have a set\nof accepting states.",
    "start": "2897210",
    "end": "2903020"
  },
  {
    "text": "These accepting\nstates are essentially what replaces finite states\nin the state machine. We also have a set of\nsymbols that are again simply",
    "start": "2903020",
    "end": "2910569"
  },
  {
    "text": "the transitions between states. So what an accepting state\nis, is a Buchi Automata",
    "start": "2910570",
    "end": "2915630"
  },
  {
    "text": "can only be valid if the\nsequence of transitions visits an accepting state\nan infinite amount of times.",
    "start": "2915630",
    "end": "2922954"
  },
  {
    "text": "So I'll get into\na couple examples. So let's say you want to model\nthe ticking-tocking of a clock.",
    "start": "2922954",
    "end": "2928660"
  },
  {
    "text": "This is just a regular\nfinite state machine. As you can see, after some\nnumber of ticks and tocks,",
    "start": "2928660",
    "end": "2934560"
  },
  {
    "text": "you get into S2,\nand you're in S2 because you can be in\ntransition only [INAUDIBLE] So you're in S2 basically\nforever once you get to S2.",
    "start": "2934560",
    "end": "2941900"
  },
  {
    "text": "So we can model this\nas a Buchi Automata by making S2 an accepted state.",
    "start": "2941900",
    "end": "2947970"
  },
  {
    "text": "This example, making\nit a Buchi Automata, doesn't really do\nanything for you. It's just kind of to illustrate\nwhat the accepting state does.",
    "start": "2947970",
    "end": "2954030"
  },
  {
    "text": "So the accepting words are\na sequence of transitions. In this case it would be\nan infinite combination",
    "start": "2954030",
    "end": "2960599"
  },
  {
    "text": "of ticks and tocks that would\nmake this Buchi Automata valid. Does that make sense.",
    "start": "2960600",
    "end": "2967218"
  },
  {
    "text": "Questions about that? Here's another\nexample, for example, if I have changed what\nmy accepting state was.",
    "start": "2967218",
    "end": "2974779"
  },
  {
    "text": "So if our accepting\nstate was S1, I now have to visit S1 an\ninfinite amount of times for this Buchi\nAutomata to be valid.",
    "start": "2974780",
    "end": "2980980"
  },
  {
    "text": "That means the\nonly valid sequence of transitions I could\nhave is tock tick tick tick",
    "start": "2980980",
    "end": "2986589"
  },
  {
    "text": "tick for an infinite\namount of times. So you can kind of\nrepresent different things and different\nsequences of inputs",
    "start": "2986589",
    "end": "2992420"
  },
  {
    "text": "you might want to have based on\nwhich accepting state you use. ",
    "start": "2992420",
    "end": "2997596"
  },
  {
    "text": "This is another example. If you wanted your clock to be\ntick tock tick tock tick tock, you can have more than\none accepting state,",
    "start": "2997596",
    "end": "3003795"
  },
  {
    "text": "and now I have to visit S0 and\nS1 an infinite amount of times if I want this Buchi\nAutomata to be valid.",
    "start": "3003795",
    "end": "3011620"
  },
  {
    "text": "So then the sequence\nof transitions I get is tick tock tick\ntock tick tock. Does anyone have any questions\nto really think about",
    "start": "3011620",
    "end": "3017938"
  },
  {
    "text": "in general with Buchi Automata? OK.",
    "start": "3017938",
    "end": "3024619"
  },
  {
    "text": "It might help to see how we\nmodel LTL as Buchi Automata. So here's an example of\nof these LTL formulas",
    "start": "3024620",
    "end": "3032800"
  },
  {
    "text": "modeled as a Buchi Automata. I guess take a few\nminutes and see if you can get which\none this one might be.",
    "start": "3032800",
    "end": "3040066"
  },
  {
    "start": "3040066",
    "end": "3053953"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] GUEST SPEAKER: Yeah. Just so that everyone can kind\nof see that, and future events,",
    "start": "3053954",
    "end": "3059620"
  },
  {
    "text": "we remember that means\nthat eventually p has to be true at least once. So from any sort of input\nstate, you go to S0,",
    "start": "3059620",
    "end": "3069740"
  },
  {
    "text": "and then I do have amount\np for some amount of time, but as soon as I have\np, I have to get to p,",
    "start": "3069740",
    "end": "3075673"
  },
  {
    "text": "because I have to be\nin my subject state an infinite amount of times. So I have to execute\np at some point to get to my accepting state\nfor this Buchi Automata",
    "start": "3075674",
    "end": "3083650"
  },
  {
    "text": "to be valid. And then once I'm\nat S1, I can have any other amount of inputs. I'll always be in S1, and that's\nwhat the true label means.",
    "start": "3083650",
    "end": "3093435"
  },
  {
    "text": "AUDIENCE: And it's\nalso something stronger, right,\nwhich is you could-- it's eventually globally? GUEST SPEAKER: Right.",
    "start": "3093435",
    "end": "3100150"
  },
  {
    "text": "Yeah, so actually in this\ncase, after it gets here,",
    "start": "3100150",
    "end": "3105730"
  },
  {
    "text": "my input could be anything. So this basically just says\nthat for my initial state, I have to execute p\nat least once to get",
    "start": "3105730",
    "end": "3112046"
  },
  {
    "text": "to this accepting state,\nand once I'm there, I can be there-- I'm always there. Any input will believe me in S1.",
    "start": "3112046",
    "end": "3119576"
  },
  {
    "text": "AUDIENCE: So just to make this\nclear for myself and maybe for others, the\ndata string executed",
    "start": "3119576",
    "end": "3124730"
  },
  {
    "text": "that's at R state something\nthat's on the loop. If you go from s0 to\ns0, that's essentially",
    "start": "3124730",
    "end": "3131650"
  },
  {
    "text": "saying that one of\nthe nodes is not p. If you go from s0 to s1, it's\nsaying that one of the nodes",
    "start": "3131650",
    "end": "3137250"
  },
  {
    "text": "is p. GUEST SPEAKER: Yeah. AUDIENCE: If you\ngo from s1 to s1 and take whatever it would\nbe because you set it true.",
    "start": "3137250",
    "end": "3145010"
  },
  {
    "text": "AUDIENCE: So if you put p\nwhere the true is right now, then you you won't\nhave to go through. PROFESSOR: Right.",
    "start": "3145010",
    "end": "3150078"
  },
  {
    "text": "That's what I missed. By the way, you guys\nhave 25 more minutes.",
    "start": "3150078",
    "end": "3155287"
  },
  {
    "text": " GUEST SPEAKER: So that's\nwhat we talked about. This is future.",
    "start": "3155287",
    "end": "3161232"
  },
  {
    "text": "So the accepted\nsequence of propositions would be not to not p. Then you have p.",
    "start": "3161232",
    "end": "3167600"
  },
  {
    "text": "Then it can be anything\nafter you get to p. And then in this case, for\nBuchi Automata states, which are like [INAUDIBLE],, slightly\ndifferent than the LTL states",
    "start": "3167600",
    "end": "3174980"
  },
  {
    "text": "we've been talking about. In this case, you're in s0. And then once you get to\ns1, you're forever in s1. ",
    "start": "3174980",
    "end": "3183470"
  },
  {
    "text": "So globally, looks\npretty similar to this. Take a few minutes\nto think about how",
    "start": "3183470",
    "end": "3188839"
  },
  {
    "text": "I might change this Buchi\nAutomata to [INAUDIBLE] globally after [INAUDIBLE]",
    "start": "3188840",
    "end": "3201845"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] GUEST SPEAKER: Yeah, exactly. ",
    "start": "3201845",
    "end": "3209290"
  },
  {
    "text": "So you have initially,\nyour first state by your n because p has to be\ntrue forever after you",
    "start": "3209290",
    "end": "3214809"
  },
  {
    "text": "get to this first state. You have an\naccepting state in p. You can also model not p.",
    "start": "3214810",
    "end": "3220715"
  },
  {
    "text": "If you want to,\nyou can also just have this single see\nwhich would encapsulate exactly what Buchi is.",
    "start": "3220715",
    "end": "3227552"
  },
  {
    "text": "This is how you go from\nLTL to Buchi Automata. In a real-world scenario, we\nhave multiple LTL formulas all",
    "start": "3227552",
    "end": "3234304"
  },
  {
    "text": "combined. You're Buchi Automata are\ngoing to look a little bit more complicated than this. Try multiple accepting states.",
    "start": "3234304",
    "end": "3242290"
  },
  {
    "text": "There's a full\nweighted model of what an LTL is trying to represent. ",
    "start": "3242290",
    "end": "3249826"
  },
  {
    "text": "AUDIENCE: If we have the not\np transition out of there, Like it's possible you can come\ninto s0 to accept the Buchi",
    "start": "3249826",
    "end": "3256600"
  },
  {
    "text": "Automata because it\nwould go to s1, right? GUEST SPEAKER: Accepting a\nBuchi Automata after that,",
    "start": "3256600",
    "end": "3261690"
  },
  {
    "text": "it's a little confusing. A Buchi Automata is only\nvalid if the infinite sequence of states satisfies it.",
    "start": "3261690",
    "end": "3268345"
  },
  {
    "text": "If I were to go the\np instead of not p, my sequence would accept a\ntransition of p, p, not p.",
    "start": "3268345",
    "end": "3276455"
  },
  {
    "text": "Then that would not\nbe a valid sequence of transition for\nthis Buchi Automata because I'm transitioning\nout of my accepting state,",
    "start": "3276456",
    "end": "3283380"
  },
  {
    "text": "which I need to have been in for\nat least the amount of times. And there's no way I\ncan get back to success.",
    "start": "3283380",
    "end": "3289346"
  },
  {
    "start": "3289346",
    "end": "3296436"
  },
  {
    "text": "Also, a more defined algorithm\n[INAUDIBLE] an intuitive way to build a Buchi Automata,\nor is an algorithm.",
    "start": "3296436",
    "end": "3302443"
  },
  {
    "text": "The other one that's\nmost popularly used was developed by [INAUDIBLE]. This is a pseudocode\nversion of the algorithm.",
    "start": "3302444",
    "end": "3309885"
  },
  {
    "text": "We go from LTL to Buchi. As you've noticed, it\nactually uses progression, which is something that planners\nthat take PDDL use to generate",
    "start": "3309885",
    "end": "3318990"
  },
  {
    "text": "plans. An important thing\nto note, which I won't go into too much\ndetail, this algorithm",
    "start": "3318990",
    "end": "3324570"
  },
  {
    "text": "generates a generalized\nBuchi Automata, which you then change to\na simple Buchi Automata.",
    "start": "3324570",
    "end": "3330019"
  },
  {
    "text": "The difference is, the\ngeneralized Buchi Automata has a set of sets\nof accepting states.",
    "start": "3330019",
    "end": "3335940"
  },
  {
    "text": "For a generalized Buchi\nAutomata to be accepted, you need to visit\nan accepting state",
    "start": "3335940",
    "end": "3341325"
  },
  {
    "text": "in each one of those\nsets of accepting states. At least one of those\nstates has to be listed. For a simple Buchi\nAutomata, you only",
    "start": "3341325",
    "end": "3348430"
  },
  {
    "text": "have one set of\naccepting states. And you can visit any one of\nthose for the Buchi Automata to be valid.",
    "start": "3348430",
    "end": "3354255"
  },
  {
    "text": "On the translation between\nthose two is a little bit more complicated. We'll have paper in the\npreference that will",
    "start": "3354255",
    "end": "3360052"
  },
  {
    "text": "walk through how to do that. But we're not going\nto do that now. This is a progression algorithm.",
    "start": "3360052",
    "end": "3367800"
  },
  {
    "text": "Basically, it just tells you\nhow if have a LTL formula f and some current state N--",
    "start": "3367800",
    "end": "3374180"
  },
  {
    "text": "and usually they\ninvolve some time step because we're in the real\nworld and we can't really model infinite amount\nof time, and we",
    "start": "3374180",
    "end": "3381770"
  },
  {
    "text": "have to make it discrete. So we have some time step,\nwhich means successive state.",
    "start": "3381770",
    "end": "3388125"
  },
  {
    "text": "How do you push certain LTL\nformulas onto next states to be evaluated later?",
    "start": "3388125",
    "end": "3393792"
  },
  {
    "text": "For example, I'll take\nthis next f as an example. So if f was a next f\nof some LTL formula,",
    "start": "3393792",
    "end": "3400730"
  },
  {
    "text": "you need to append that\nformula to the next state to be evaluated\nin the next state",
    "start": "3400730",
    "end": "3406820"
  },
  {
    "text": "to see if that's going\nto be true or not. Similar things for LTL. And I won't go through\nthis [INAUDIBLE]",
    "start": "3406820",
    "end": "3414770"
  },
  {
    "text": "it's here for reference. The next step to this process\nis going from Buchi Automata,",
    "start": "3414770",
    "end": "3420950"
  },
  {
    "text": "that's a PDDL2. This process is confusing. At least it is confusing\nfor me to understand.",
    "start": "3420950",
    "end": "3426960"
  },
  {
    "text": "The first thing I'll say is\nthat Buchi states are not equivalent to\ntraditional PDDL states. In a PDDL state, if\nyou have two states,",
    "start": "3426960",
    "end": "3434570"
  },
  {
    "text": "you have the same propositions\nthat are true and false, those states are identical. In the Buchi Automata,\nthat's not necessarily true.",
    "start": "3434570",
    "end": "3443133"
  },
  {
    "text": "In the Buchi Automata\nyou also have to encapsulate which\ntransitions you can make out of each Buchi state.",
    "start": "3443133",
    "end": "3448560"
  },
  {
    "text": "So s1 and s2 couldn't have\nthe same set of propositions that are [INAUDIBLE] hold.",
    "start": "3448560",
    "end": "3455830"
  },
  {
    "text": "But out of s1-- actually, back up. This is the Buchi Automata\nfor FutureGlobally,",
    "start": "3455830",
    "end": "3462230"
  },
  {
    "text": "which is what [INAUDIBLE]\nwas talking about. So if I enter an\nf1, the star means I can have any transition\nthat I want in s1.",
    "start": "3462230",
    "end": "3472560"
  },
  {
    "text": "At some point, I\nmake the transition p and whatever the s2, I have\nto take transition p forever. ",
    "start": "3472560",
    "end": "3480240"
  },
  {
    "text": "However, if I get a sequence\nof inputs, let's say I get p",
    "start": "3480240",
    "end": "3485380"
  },
  {
    "text": "and then b, and p\nagain, and then p again,",
    "start": "3485380",
    "end": "3491000"
  },
  {
    "text": "it's not clear if\nI'm in s1 or s2 because in s1 I can execute\nany kind of state I want.",
    "start": "3491000",
    "end": "3496070"
  },
  {
    "text": "In s1 I can execute any\ntransition I want in s1. 2 I have to execute only p.",
    "start": "3496070",
    "end": "3501500"
  },
  {
    "text": "So if I got a sequence of p's,\nI could be in either state. You need something else to\nactivate PDDL2 to basically",
    "start": "3501500",
    "end": "3509120"
  },
  {
    "text": "to determine which state\nyou're and which transitions you can make from that state.",
    "start": "3509120",
    "end": "3514644"
  },
  {
    "text": "Does that make\nsense to everyone? ",
    "start": "3514644",
    "end": "3520490"
  },
  {
    "text": "So there's two ways\nwe can transform PDDL2 to encapsulate what a\nBuchi Automata encapsulates.",
    "start": "3520490",
    "end": "3527020"
  },
  {
    "text": "The first thing\nis you can create new actions that can encapsulate\nthe allowable transitions of each state.",
    "start": "3527020",
    "end": "3533490"
  },
  {
    "text": "So basically, for\nevery action you have in your\ntraditional PDDL, you have create a repetitive action\nfor each one of these states",
    "start": "3533490",
    "end": "3542279"
  },
  {
    "text": "so you know exactly\nwhich transitions you can take out of that state. This can get long\nbecause you have",
    "start": "3542279",
    "end": "3548280"
  },
  {
    "text": "to make a new action\nfor every single one of these states for every\naction that you want to take.",
    "start": "3548280",
    "end": "3553760"
  },
  {
    "text": "That is one way you can do it. Another way you can do it is\nintroducing derived predicates.",
    "start": "3553760",
    "end": "3559186"
  },
  {
    "text": "Derived predicates\nare predicates that don't depend\nthe actions at all and just depend on some\nother formula in your plan.",
    "start": "3559186",
    "end": "3565267"
  },
  {
    "text": "For example, we can\nhave a derived predicate that explicitly tells\nyou whether you're in s1 or whether you're in s2.",
    "start": "3565267",
    "end": "3571540"
  },
  {
    "text": "And you can use these\npredicates in your actions in PDDL2 to make sure, even\nthough which state, x1 or x2,",
    "start": "3571540",
    "end": "3578120"
  },
  {
    "text": "you're in in your\nBuchi Automata. And then, in your\nformulation of your plan, you set your final state to be\none of the accepting states.",
    "start": "3578120",
    "end": "3586747"
  },
  {
    "text": "I guess that answers one\nof the questions, though, how you go from being\ninfinite to finite.",
    "start": "3586747",
    "end": "3591800"
  },
  {
    "text": "The accepting state\nis usually what you place as your final state. AUDIENCE: Then in the\nderived predicates,",
    "start": "3591800",
    "end": "3597006"
  },
  {
    "text": "you're purely in\nthe pre-conditions? Or do they also\nappear in the effects. GUEST SPEAKER: They also\nappear in the effects",
    "start": "3597006",
    "end": "3602936"
  },
  {
    "text": "because you need to know how\nto transition out of s1 to s2. So you'd likely have a\nderived predicate for both s1",
    "start": "3602936",
    "end": "3610520"
  },
  {
    "text": "and a derived predicate for s2. And that is also a lot of work\nto add to the PDDL2 problem.",
    "start": "3610520",
    "end": "3616572"
  },
  {
    "text": "But it's definitely\nshorter than the first way. And it definitely\nencapsulates everything, by the Buchi\nAutomata [INAUDIBLE]",
    "start": "3616572",
    "end": "3622774"
  },
  {
    "text": "Does anyone have any\nquestions about that? AUDIENCE: So you're\nchanging the action then?",
    "start": "3622774",
    "end": "3627916"
  },
  {
    "text": "GUEST SPEAKER: Yeah. You're changing\nthe action but you don't need make a new\naction for every state.",
    "start": "3627916",
    "end": "3633960"
  },
  {
    "text": "In the first\nformulation, let's say I have some traditional\naction, like move blue block,",
    "start": "3633960",
    "end": "3640799"
  },
  {
    "text": "or something. I have to create a\nmove block action for each one of these\nstates because I need to know exactly\nwhich transitions",
    "start": "3640799",
    "end": "3646450"
  },
  {
    "text": "I can take out of that action. AUDIENCE: In the second example? GUEST SPEAKER: And\nin the second one I can just have one move block.",
    "start": "3646450",
    "end": "3652710"
  },
  {
    "text": "But in my move block I'll\nhave a derived predicate that tells me which state I'm\nin when I execute that action.",
    "start": "3652710",
    "end": "3660800"
  },
  {
    "text": " The number of actions\nyou have to write",
    "start": "3660800",
    "end": "3667210"
  },
  {
    "text": "is less because\nyou explicitly have predicates that are telling\nyou which state that you're in.",
    "start": "3667210",
    "end": "3674533"
  },
  {
    "text": "Now I'm going to\nhand it over to-- if there are no more questions--\nhand it over to Mark. And he's going to talk\nabout preferences.",
    "start": "3674533",
    "end": "3681524"
  },
  {
    "text": " MARK: We're getting\na little low on time.",
    "start": "3681524",
    "end": "3687697"
  },
  {
    "text": "Now I'll transition\nto talking about-- we talked about\ntemporally extended goals. We said that goals are things\nthat always have to be true.",
    "start": "3687697",
    "end": "3694230"
  },
  {
    "text": "So now let's talk\nabout preferences. Preferences are things\nthat don't necessarily have to be true, but are things\nthat you'd like to be true.",
    "start": "3694230",
    "end": "3701470"
  },
  {
    "text": "In the classical\nplanning problem, we can formulate it like that. We can set a state S, set a\nstate s0, a set of operators,",
    "start": "3701470",
    "end": "3708860"
  },
  {
    "text": "and a set of goal states. The problem is transition\nfrom the initial states and any state.",
    "start": "3708860",
    "end": "3713880"
  },
  {
    "text": "But those are goal states\nusing the operators [INAUDIBLE] Preference based\nplanning problem",
    "start": "3713880",
    "end": "3719020"
  },
  {
    "text": "introduces a\ntraditional field R, which is a partial or total\nrelation expressing preferences",
    "start": "3719020",
    "end": "3725840"
  },
  {
    "text": "between plans. And this is a little\npreference symbol right there. That tells you, if\nthere are multiple plans",
    "start": "3725840",
    "end": "3732690"
  },
  {
    "text": "you need to\naccomplish your goal, which one do you want to use. And again, preferences\nare properties",
    "start": "3732690",
    "end": "3738590"
  },
  {
    "text": "that are desired but not\nnecessarily required. ",
    "start": "3738590",
    "end": "3743740"
  },
  {
    "text": "There are two [INAUDIBLE]\ndifferent types of preference languages,\nquantitative and qualitative.",
    "start": "3743740",
    "end": "3748752"
  },
  {
    "text": "As you would expect, in\nquantitative languages, we actually assign a numeric\nvalue to the different plans",
    "start": "3748752",
    "end": "3754575"
  },
  {
    "text": "in order to compare them. So these plans are a weight\nof four, and a weight of two, and that tells you\nwhich one to prefer.",
    "start": "3754575",
    "end": "3760740"
  },
  {
    "text": "Here are some\nlanguages that do that. For qualitative\nlanguages, they actually just have a plan\nwith this property",
    "start": "3760740",
    "end": "3768420"
  },
  {
    "text": "is preferred to this other\nplan with this property. But we don't actually\nknow any information that",
    "start": "3768420",
    "end": "3773870"
  },
  {
    "text": "knows how much we\nprefer one to the other, or something like that. An important element\nof this is when",
    "start": "3773870",
    "end": "3779326"
  },
  {
    "text": "you have quantitative languages,\nthey're totally comparable. Any two sets of plans\nyou can determine",
    "start": "3779326",
    "end": "3784350"
  },
  {
    "text": "which one is preferred. Whereas in\nqualitative languages, you could have situations\nwhere plan one is preferred",
    "start": "3784350",
    "end": "3789638"
  },
  {
    "text": "to plan two, and plan one\nis also preferred to plan 3, but that doesn't give you any\ninformation about whether plan two is preferred to plan three.",
    "start": "3789638",
    "end": "3796938"
  },
  {
    "text": "So it's a little bit less\nexpressive [INAUDIBLE].. To go into how you actually\nexpress preferences in PDDL3,",
    "start": "3796938",
    "end": "3804972"
  },
  {
    "text": "like we talked about\ntemporally extended goals, there is a PDDL3\nsyntax to do this. There's a preference label here\nthat you can put on fluents",
    "start": "3804972",
    "end": "3813150"
  },
  {
    "text": "to represent things you prefer. And then there's a\nfunction call is-violated",
    "start": "3813150",
    "end": "3818480"
  },
  {
    "text": "that essentially returns\nthe number of times that any fluent that\nhas a preference label",
    "start": "3818480",
    "end": "3823990"
  },
  {
    "text": "was not satisfied in your plan. For example, if you\nhave a preference, \"Traffic light is green\nuntil it turns red.\"",
    "start": "3823990",
    "end": "3829710"
  },
  {
    "text": "Here's our PDDL3 template. It extended this\nkid's preference, in which we label it with\na preference label here.",
    "start": "3829710",
    "end": "3837030"
  },
  {
    "text": "And this is just a name. And then or plan tries to\nminimize the number of times",
    "start": "3837030",
    "end": "3842710"
  },
  {
    "text": "that this preference\nis violated. That's one way to express\npreferences directly in PDDL3.",
    "start": "3842710",
    "end": "3848460"
  },
  {
    "text": " So now we talk about LDP.",
    "start": "3848460",
    "end": "3853950"
  },
  {
    "text": "LDP is a different\nlanguage that is quite expressive in terms\nof types of preferences",
    "start": "3853950",
    "end": "3858980"
  },
  {
    "text": "you can represent. It is a quantitative\nlanguage, which means we're going to have\nweights for each of our plans",
    "start": "3858980",
    "end": "3865660"
  },
  {
    "text": "to express our preferences. We can actually express the\nstrength of the preference. So Goal A is preferred twice or\nthree times as much as Goal B.",
    "start": "3865660",
    "end": "3873736"
  },
  {
    "text": "It's an extension of an\nolder language named PP. Here is the paper if you\nwant to actually check out",
    "start": "3873736",
    "end": "3879133"
  },
  {
    "text": "these details. The formulas are\nconstructed hierarchically. I'll go through quickly\nhow we actually construct",
    "start": "3879133",
    "end": "3885920"
  },
  {
    "text": "these preference formulas. The lowest level is called a\nBasic Design Formula, or BDF.",
    "start": "3885920",
    "end": "3891230"
  },
  {
    "text": "That just expresses\nour temporally extended proposition. So this is just a\nstraight up LTL, basically, that we saw\nin the first section",
    "start": "3891230",
    "end": "3897436"
  },
  {
    "text": "of the presentation. I'm going to use that\nI'm cooking dinner example for these slides. In this case, we always\nuse the future operators.",
    "start": "3897436",
    "end": "3904609"
  },
  {
    "text": "At some point, I might want\nto cook this program plan. Maybe I want to order\ntakeout to eat dinner.",
    "start": "3904610",
    "end": "3910160"
  },
  {
    "text": "And then I have some eating\nspaghetti or eating pizza. Those are two different\nthings, two different options that I could have in my plan.",
    "start": "3910160",
    "end": "3915678"
  },
  {
    "text": "I don't have to have\neither of those. Those are just options\nthat I could have. That's the lowest level.",
    "start": "3915678",
    "end": "3921070"
  },
  {
    "text": "The next level is called Atomic\nPreference Formulas, or APFs. There are where we express our\npreferences between the BDFs",
    "start": "3921070",
    "end": "3927670"
  },
  {
    "text": "that we formed in\nthe previous slide. So in this example\nI'm using weight, specifically to\nrepresent preference,",
    "start": "3927670",
    "end": "3933270"
  },
  {
    "text": "with lower weight\nbeing preferred. Here we're saying, we prefer\nto cook over ordering takeout.",
    "start": "3933270",
    "end": "3939292"
  },
  {
    "text": "This is you where\nyou have to cook, this is where you\nhave to order takeout. And we apply weights to\nthose two expressions.",
    "start": "3939292",
    "end": "3945496"
  },
  {
    "text": "The first one's\npreferred, and how much it is preferred over this plan. And here is you prefer to eat\nspaghetti over eating pizza.",
    "start": "3945496",
    "end": "3953794"
  },
  {
    "text": "So that's the second level. Third levels called General\nPurpose Formulas, or GPS.",
    "start": "3953794",
    "end": "3959059"
  },
  {
    "text": "These are where we can do\nconjunctions or disjunctions, or qualification of\nour previous formulas.",
    "start": "3959060",
    "end": "3964200"
  },
  {
    "text": "So for example, if\nwe want to say-- because in the previous\nslides we had two APFs. We had prefer to cook and\nprefer to eat spaghetti.",
    "start": "3964200",
    "end": "3973217"
  },
  {
    "text": "And here we can\nexpress that we really don't care which one of\nthese we want to satisfy.",
    "start": "3973217",
    "end": "3979040"
  },
  {
    "text": "You can think of\nthis as we actually tried to satisfy APF\nat the lowest weight. So if we have this\n\"or\" operating here,",
    "start": "3979040",
    "end": "3985114"
  },
  {
    "text": "that means that our planner\nis going to try and satisfy the lowest weight among all\nthese different options here, which means that he\ndoesn't prefer to cook.",
    "start": "3985114",
    "end": "3991569"
  },
  {
    "text": "That's its first goal. You can also use a handoff\nrigor, for example. And that's going to\nminimize the maximum weight",
    "start": "3991570",
    "end": "3998620"
  },
  {
    "text": "against both of those options. Basically, what's it\ngoing to try and do-- oops-- what it's\ngoing to try and do",
    "start": "3998620",
    "end": "4004230"
  },
  {
    "text": "is minimize the highest weight\namong these two options. So it's going to try\nand cook, and then it's",
    "start": "4004230",
    "end": "4012059"
  },
  {
    "text": "going to try and eat\nspaghetti versus doing these other options. ",
    "start": "4012059",
    "end": "4018100"
  },
  {
    "text": "So those are GPFs. I'm now moving on to Aggregated\nPreference Formulas, which are the highest level.",
    "start": "4018100",
    "end": "4024380"
  },
  {
    "text": "So with APFs, these\ndefine the order in which our different\npreferences are relaxed. You can, of course, express a\nlot of different preferences",
    "start": "4024380",
    "end": "4030964"
  },
  {
    "text": "for your planner,\nbut not all of them may be achievable,\nespecially if you're trying to achieve a large number\nof preferences at the same.",
    "start": "4030965",
    "end": "4037170"
  },
  {
    "text": "You may not actually be able\nto achieve all of those. So how do we produce our\nset in the correct order,",
    "start": "4037170",
    "end": "4043670"
  },
  {
    "text": "in the preferred order so\nthat our plan we end up with isn't even the most\npreferred plan? That's what APFs like to do.",
    "start": "4043670",
    "end": "4051049"
  },
  {
    "text": "You can express, using\nthis preference operator.",
    "start": "4051050",
    "end": "4056744"
  },
  {
    "text": "First, I want to try and\nsatisfy both of these in the previous slide. Then if I can't, I want to\nrelax it so I only satisfy G2.",
    "start": "4056744",
    "end": "4063620"
  },
  {
    "text": "And then if I can't\ndo that, then I want to relax it so I\nonly try and satisfy G1. So that gives us the order\nin which things are relaxed.",
    "start": "4063620",
    "end": "4070760"
  },
  {
    "text": "It's important here that if\nyou have these situations where you can't distinguish\nfrom one another, or you don't really care,\nwe can establish some order.",
    "start": "4070760",
    "end": "4077390"
  },
  {
    "text": "So at the very\nlowest type of level, we can sort them alphabetically,\nor something, just",
    "start": "4077390",
    "end": "4082425"
  },
  {
    "text": "to provide some sort of order. ",
    "start": "4082425",
    "end": "4088280"
  },
  {
    "text": "This is just a review of\nwhat I've been talking about. BDFs are the lowest\nlevel, which express",
    "start": "4088280",
    "end": "4093590"
  },
  {
    "text": "temporally extended\npropositions. We can apply preference\nto those using APFs.",
    "start": "4093590",
    "end": "4098839"
  },
  {
    "text": "Then we can combine or join APFs\nusing tell preference formulas.",
    "start": "4098840",
    "end": "4105469"
  },
  {
    "text": "And finally, we can aggregate\nthose preference formulas to determine the order\nin which you shouldn't",
    "start": "4105470",
    "end": "4111630"
  },
  {
    "text": "relax the propositions to allow\nyourself to plan it right. So using this\nscheme in LPP, we're",
    "start": "4111630",
    "end": "4119259"
  },
  {
    "text": "using both LTL syntax and\nrules that we talked about in the first section to\nexpress temporally extended",
    "start": "4119260",
    "end": "4125439"
  },
  {
    "text": "preferences. The plans that's actually\nused to solve these types of problems is called P Plan.",
    "start": "4125439",
    "end": "4131830"
  },
  {
    "text": "P Plans can actually handle\ntemplates, and the preferences, and a goal at the end, as well. And it does basically\na best first search",
    "start": "4131830",
    "end": "4138280"
  },
  {
    "text": "among all your\ndifferent options. It's actually one of the planner\nthat uses the left branch. But the one we showed\nuses progression to take",
    "start": "4138281",
    "end": "4144699"
  },
  {
    "text": "LTL formulas at each\npoint in the plan and determine whether you've\nsatisfied those formulas or not. And if not, it will push\nthem to the next state,",
    "start": "4144700",
    "end": "4152774"
  },
  {
    "text": "so that in the next state you\ncan evaluate whether you've satisfied those formulas. That's how it prunes\nthe search space",
    "start": "4152774",
    "end": "4159119"
  },
  {
    "text": "and tries to always find the\nmost preferred plan to meet your goal.",
    "start": "4159119",
    "end": "4164290"
  },
  {
    "text": "All right. So that's our presentation. Any questions from anyone?",
    "start": "4164290",
    "end": "4169990"
  },
  {
    "start": "4169990",
    "end": "4175974"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] question. I have a question about\n[INAUDIBLE] presentation. You guys [INAUDIBLE]\nand then believes omega.",
    "start": "4175974",
    "end": "4183818"
  },
  {
    "text": "Would you say that\nomega has to hold if p happens, and they have\na conjunction in one state?",
    "start": "4183819",
    "end": "4192390"
  },
  {
    "text": "ELLIE: Omega doesn't have to\nhold until we [INAUDIBLE].. Omega just has to hold\nat the last state of p.",
    "start": "4192390",
    "end": "4199250"
  },
  {
    "text": "Essentially what it's\nsaying is omega releases p. So once omega happened, p\nhas to happen at the state.",
    "start": "4199250",
    "end": "4205890"
  },
  {
    "text": "And the omega has to release p. Now it happens, so p,\nyou can don't you want. You can be true,\nyou can be false.",
    "start": "4205890",
    "end": "4212453"
  },
  {
    "text": "AUDIENCE: Sorry. So p has to hold\nuntil omega happens. ELLIE: Yep. And then omega--",
    "start": "4212454",
    "end": "4218190"
  },
  {
    "text": "[INTERPOSING VOICES] AUDIENCE: So the definition is\njust switched to p [INAUDIBLE].. ELLIE: This is an occasion.",
    "start": "4218190",
    "end": "4224007"
  },
  {
    "text": "Occasionally, you have pR omega. ",
    "start": "4224007",
    "end": "4229384"
  },
  {
    "text": "But like intuitively-- AUDIENCE: It's just\nthe definition-- oh-- [INTERPOSING VOICES] AUDIENCE: That's all I was\nwondering because then I",
    "start": "4229384",
    "end": "4235900"
  },
  {
    "text": "saw that and it was confusing. So that's all. OK, sorry. ELLIE: That's fine. ",
    "start": "4235900",
    "end": "4244830"
  },
  {
    "text": "MARK: Any other questions? AUDIENCE: Since there\nare multiple ways",
    "start": "4244830",
    "end": "4250580"
  },
  {
    "text": "to express the same formula\nusing the grammar, is there",
    "start": "4250580",
    "end": "4257125"
  },
  {
    "text": "any notion of canonical forms,\nor a least complicated form,",
    "start": "4257125",
    "end": "4262330"
  },
  {
    "text": "or something like that? MARK: Yeah, there is. Typically they actually--\nlet me find the slide.",
    "start": "4262330",
    "end": "4270560"
  },
  {
    "text": "So to simplify the algorithms\nthey typically apply the kind of reductions\nthat we showed in the slide",
    "start": "4270560",
    "end": "4276812"
  },
  {
    "text": "to reduce the release\nand the globally and the future down to just\nthe [INAUDIBLE] of an x. Otherwise, your\nalgorithms going to be",
    "start": "4276812",
    "end": "4282465"
  },
  {
    "text": "able to handle fewer cases. And then they apply\nthe usual rules, trying to push nots out\nto the left-hand side.",
    "start": "4282465",
    "end": "4288246"
  },
  {
    "start": "4288246",
    "end": "4300760"
  },
  {
    "text": "All right. Thanks, everyone. [APPLAUSE] ",
    "start": "4300760",
    "end": "4307440"
  }
]