[
  {
    "text": "ANNOUNCER: Open content is\nprovided under creative commons license. Your support will help MIT\nOpenCourseWare continue to",
    "start": "0",
    "end": "6840"
  },
  {
    "text": "offer high-quality educational\nresources for free. To make a donation, or view\nadditional materials from",
    "start": "6840",
    "end": "13380"
  },
  {
    "text": "hundreds of MIT courses, visit\nMIT OpenCourseWare at ocw.mit.edu .",
    "start": "13380",
    "end": "19930"
  },
  {
    "text": "PROFESSOR ERIC GRIMSON: As\nI've done in the previous lectures, let me set the stage\nfor what we've been doing, so",
    "start": "19930",
    "end": "25810"
  },
  {
    "text": "we can use that to talk about\nwhat we're going to do today. So far, we have the following\nin our language.",
    "start": "25810",
    "end": "35840"
  },
  {
    "text": "Right, we have assignment.",
    "start": "35840",
    "end": "41760"
  },
  {
    "text": "We have conditionals. We have input/output.",
    "start": "41760",
    "end": "47520"
  },
  {
    "text": "And we have looping\nconstructs.",
    "start": "47520",
    "end": "55350"
  },
  {
    "text": "These are things like\nFOR and WHILE loops.",
    "start": "55350",
    "end": "60850"
  },
  {
    "text": "And of course we've got some\ndata to go with that. One of the things we said last\ntime was, with that set of",
    "start": "60850",
    "end": "67650"
  },
  {
    "text": "things, the ability to give\nvalues-- sorry, to give names to values-- the ability to make\ndecisions, the ability to",
    "start": "67650",
    "end": "74480"
  },
  {
    "text": "loop as a function of that, the\nability get things in and out, we said that that actually\ngave us a language we",
    "start": "74480",
    "end": "81260"
  },
  {
    "text": "said was Turing-complete.",
    "start": "81260",
    "end": "86640"
  },
  {
    "text": "And that meant, in English, that\nthis was enough to write any program.",
    "start": "86640",
    "end": "92590"
  },
  {
    "text": "Now that's a slight lie-- or\nactually in these days of political debates, a slight\nmisspeaking, a wonderful",
    "start": "92590",
    "end": "97890"
  },
  {
    "text": "word-- it is technically\ncorrect. It is enough to allow us to\nwrite any program, but it's",
    "start": "97890",
    "end": "103310"
  },
  {
    "text": "not enough to allow us to easily\nwrite any program. And so I joked, badly, I'll\nagree, at the end of last",
    "start": "103310",
    "end": "110990"
  },
  {
    "text": "lecture, that we can just stop\nnow, go straight to the final exam, because this is all\nyou need to know. The point is, yes it's enough to\nstart with, but we want to",
    "start": "110990",
    "end": "118000"
  },
  {
    "text": "add things to this that let\nus problem solve well. And one of the things to think\nabout is, even though I've got",
    "start": "118000",
    "end": "123970"
  },
  {
    "text": "all of that, let's think about\nwhat I could do, if I wanted to write a piece of code.",
    "start": "123970",
    "end": "129450"
  },
  {
    "text": "Right now, you've got to\nwrite it in one file. It's a long sequence of\ninstructions, it starts at the",
    "start": "129450",
    "end": "134570"
  },
  {
    "text": "beginning, walks through, may\njump around a little bit, but eventually comes down\nat the end.",
    "start": "134570",
    "end": "139830"
  },
  {
    "text": "It's okay for the things you're\ndoing for the early problem sets. Ten lines of code. Twenty lines of code.",
    "start": "139830",
    "end": "145900"
  },
  {
    "text": "Imagine instead, you're writing\ncode that's a hundred thousand lines, a million\nlines, of code.",
    "start": "145900",
    "end": "151130"
  },
  {
    "text": "You don't want to write\nit in this form. All right, and the reason you\ndon't want to do that is,",
    "start": "151130",
    "end": "156400"
  },
  {
    "text": "well, several. First of all, it's really hard\nto figure out where everything is, where everything goes,\nmaking sure I'm in the right place.",
    "start": "156400",
    "end": "162370"
  },
  {
    "text": "To use an ancient expression\nfrom the 1970's, which only John and I will appreciate, it's\nreally hard to grok what",
    "start": "162370",
    "end": "168700"
  },
  {
    "text": "that code is doing, to\nunderstand what it's trying to make happen. And the reason that that's the\ncase is, what we don't have,",
    "start": "168700",
    "end": "175830"
  },
  {
    "text": "are two important things. We don't have decomposition, and\nwe don't have abstraction.",
    "start": "175830",
    "end": "192460"
  },
  {
    "text": "And that's what we're\ngoing to add today. So what does that mean? Those are fancy terms.\nDecomposition is a way of",
    "start": "192460",
    "end": "198880"
  },
  {
    "text": "putting structure\nonto the code. It's a way of breaking the\ncode up into modules. Modules that makes sense\non their own.",
    "start": "198880",
    "end": "205579"
  },
  {
    "text": "Modules that we can reuse\nin multiple places. Modules that, if you\nlike, isolate components of the process.",
    "start": "205580",
    "end": "212959"
  },
  {
    "text": "And abstraction is related to\nthat, abstraction is going to let us suppress details.",
    "start": "212960",
    "end": "217980"
  },
  {
    "text": "It's going to let us bury away\nthe specifics of something, and treat that computation\nlike a black box.",
    "start": "217980",
    "end": "224980"
  },
  {
    "text": "And by black box, I mean,\nliterally behaves like a mysterious little black box. You put some inputs in, it has\na contract that says if you",
    "start": "224980",
    "end": "232200"
  },
  {
    "text": "put the right kind of inputs\nin you'll get a specific output coming out, but you\ndon't have to know what's inside of that box.",
    "start": "232200",
    "end": "238510"
  },
  {
    "text": "And that abstraction is\nreally important. Again, imagine if I'm a writing\na piece of code.",
    "start": "238510",
    "end": "244960"
  },
  {
    "text": "I want to just use it, I\nshouldn't have to worry about what variables I use inside of\nit, I have shouldn't have to worry about where that is in the\ncode, I should be able to",
    "start": "244960",
    "end": "252060"
  },
  {
    "text": "just abstract it away. And that's what we want to add\ntoday, are those two things. Now, our mechanism for doing\nthat-- or at least one",
    "start": "252060",
    "end": "259769"
  },
  {
    "text": "mechanism, I shouldn't say the\nonly one-- one mechanism for doing that is going to be to add\nfunctions to our language.",
    "start": "259770",
    "end": "270810"
  },
  {
    "text": "Now, the point of a function is\nthat it's going to provide both of these things, so the\nfirst thing it's going to do",
    "start": "270810",
    "end": "277030"
  },
  {
    "text": "is, it's going to let us\nbreak up into modules.",
    "start": "277030",
    "end": "284730"
  },
  {
    "text": "Second thing they're going to do\nis let us suppress detail.",
    "start": "284730",
    "end": "291060"
  },
  {
    "text": "And in essence what that does\nis, the functions, and we're going to look at a bunch of\nexamples in a second, these functions are going to give us\na way to, in some or in one",
    "start": "291060",
    "end": "298560"
  },
  {
    "text": "way of thinking about it is\nto create new primitives. And I'm going to put those in\nquotes, it's a generalization.",
    "start": "298560",
    "end": "310360"
  },
  {
    "text": "What do I mean by that? The idea of a function is, that\nI'm going to capture a common pattern of computation.",
    "start": "310360",
    "end": "317850"
  },
  {
    "text": "Computing square root. I'm going to capture it in a\npiece of code, I'm going to be able to refer to it by a name,\nand I'm going to suppress the",
    "start": "317850",
    "end": "324300"
  },
  {
    "text": "details, meaning inside of that\ncomputation, you don't need to know what it does. You just need to know, if I\ngive it the right kind of input, it'll give me back an\ninput that satisfies the",
    "start": "324300",
    "end": "331850"
  },
  {
    "text": "contract that I set up. And that in essence says, I've\njust created the equivalent of",
    "start": "331850",
    "end": "337555"
  },
  {
    "text": "a new primitive. Same way that I have\nmultiplication or division as a primitive, functions are going\nto give me, or somebody",
    "start": "337555",
    "end": "343940"
  },
  {
    "text": "else who wrote them for me as\npart of a library, a new primitive that I'm going\nto be able to use. And that gives me a lot of power\nin terms of what I want",
    "start": "343940",
    "end": "350580"
  },
  {
    "text": "to have inside of the language. OK. So, let's look at an example.",
    "start": "350580",
    "end": "358389"
  },
  {
    "text": "To try to see what we're\ngoing to do with this. Before I do that though, let me\ntry and give you an analogy to keep this in mind of why we\nwant to basically build these",
    "start": "358390",
    "end": "366060"
  },
  {
    "text": "abstractions and what\nwe need in order to have them work together. So here's the supposed\nto say silly analogy.",
    "start": "366060",
    "end": "373520"
  },
  {
    "text": "You can tell my jokes\nare always bad. John's are much better, by the\nway, which is why Thursday will be a much better lay--\na better lecture.",
    "start": "373520",
    "end": "379560"
  },
  {
    "text": "But here's the example. You've been hired by PBS to\nproduce a nice thirteen-hour documentary, or drama,\nthat's going to run.",
    "start": "379560",
    "end": "388310"
  },
  {
    "text": "And, you know, you start by\nsaying, OK, thirteen hours, I'm going to break it up into\nthirteen different chunks.",
    "start": "388310",
    "end": "394390"
  },
  {
    "text": "I'm going to assign each chunk\nto a different writer. And they're going to go off and\nwrite that element, that",
    "start": "394390",
    "end": "399640"
  },
  {
    "text": "hour's worth of stuff. You can imagine what you get:\neach hours worth of drama, if",
    "start": "399640",
    "end": "405620"
  },
  {
    "text": "you like, may be great, but it\nmay have absolutely nothing to do with the other\ntwelve hours.",
    "start": "405620",
    "end": "411500"
  },
  {
    "text": "And unless, you know, you've\nbeen hired to do Pirandello's Six Characters In Search Of An\nAuthor, this is not a great",
    "start": "411500",
    "end": "417420"
  },
  {
    "text": "thing, because you\nget something that is really confusing. Now, what's the point\nof the analogy? What do I need for\nthose writers to",
    "start": "417420",
    "end": "423465"
  },
  {
    "text": "all interact together? I need a specification. I need a contract that says,\nhere's what I want in terms of",
    "start": "423465",
    "end": "430590"
  },
  {
    "text": "things that you're going to take\nas input, to begin your part of the drama, here's what\nyou're going to produce at the output, and the details\nof what they do",
    "start": "430590",
    "end": "437610"
  },
  {
    "text": "inside are up to them. An idea of abstraction, that\nidea of specification, is exactly what we want to use\ninside of our functions.",
    "start": "437610",
    "end": "445500"
  },
  {
    "text": "We won't make you write dramas\nlike Pirandello, but we're going to try make you at\nleast write good code. And that's we're going\nto try and do. All right.",
    "start": "445500",
    "end": "451790"
  },
  {
    "text": "Let's set the stage for it. Up on the screen, I've got-- I commented it out, but I've\ngot a piece of code that",
    "start": "451790",
    "end": "459420"
  },
  {
    "text": "you've seen before,\nright up here. OK? What is that? It's the piece of code we wrote\nfor computing square",
    "start": "459420",
    "end": "465120"
  },
  {
    "text": "roots, square roots of actually\nperfect squares. [UNINTELLIGIBLE] Just to remind you what it\ndoes, we bound x to some",
    "start": "465120",
    "end": "471530"
  },
  {
    "text": "value, we set up an initial\nvariable called ANS or answer, and then we run through\na little loop.",
    "start": "471530",
    "end": "477960"
  },
  {
    "text": "All right, we're-- well\nactually, I should say that better, we first check to see,\nis x greater than or equal to zero, if it's not, then we come\ndown here and we print",
    "start": "477960",
    "end": "485009"
  },
  {
    "text": "something out, otherwise we run\nthrough a little loop to get the answer, and then\nwe check it and we spit something out.",
    "start": "485010",
    "end": "490700"
  },
  {
    "text": "It does the computation,\nthat's fine. Suppose I want to compute square\nroots a lot of places",
    "start": "490700",
    "end": "496449"
  },
  {
    "text": "in a big chunk of code. Right now, I have to take that\npiece of code and replicate it",
    "start": "496450",
    "end": "502060"
  },
  {
    "text": "everywhere I want in\nmy larger file. And I've got to worry about,\nis somebody else using ANS,",
    "start": "502060",
    "end": "507919"
  },
  {
    "text": "answer, as a variable, in which\ncase I've got to be really careful. Is somebody else using\nx as a variable?",
    "start": "507920",
    "end": "512950"
  },
  {
    "text": "I've got to deal with a\nlot of those details. I want to abstract that. And the abstraction you\nsee, right here.",
    "start": "512950",
    "end": "520310"
  },
  {
    "text": "I'm going to highlight it for\na second so you can see it. I want you to look at it\non the handout as well. This is the creation\nof a function.",
    "start": "520310",
    "end": "528139"
  },
  {
    "text": "And I want to describe both the\nsyntax, what we're doing, and then the semantics of\nhow do we use it and",
    "start": "528140",
    "end": "533350"
  },
  {
    "text": "what does that mean. So. Here's the syntax\nof the function.",
    "start": "533350",
    "end": "541150"
  },
  {
    "text": "First of all, we have\na keyword. def. Definition or define, depending\non which sort of",
    "start": "541150",
    "end": "547260"
  },
  {
    "text": "piece of history\nyou come from. This is a keyword to Python that\nsays, when it reads this in the file, it says, I'm\ncreating a definition.",
    "start": "547260",
    "end": "553480"
  },
  {
    "text": "I'm creating a function. And that's follow-- so this\nis, let me say this is a keyboard-- that is followed\nimmediately by a name.",
    "start": "553480",
    "end": "564450"
  },
  {
    "text": "And this equates to that. In this case, sqrt,\nsquare root. I'm saying, this is the\nname I'm going to",
    "start": "564450",
    "end": "570170"
  },
  {
    "text": "give to this function. This is the name to which I'm\ngoing to refer when I want to use this function. All right?",
    "start": "570170",
    "end": "575910"
  },
  {
    "text": "And notice, immediately after\nthat name, we have an open and",
    "start": "575910",
    "end": "581610"
  },
  {
    "text": "close paren with another\nvariable name inside of that. And this defines formal\nparameters of this function.",
    "start": "581610",
    "end": "596190"
  },
  {
    "text": "Yup. PROFESSOR JOHN GUTTAG:\n[INAUDIBLE] PROFESSOR ERIC GRIMSON: It\ndoes indeed, thank you. This is me being a Scheme\nhacker, not a Python hacker.",
    "start": "596190",
    "end": "602730"
  },
  {
    "text": "Yes, def has to be lowercase\nor won't recognize it. Thank you, John. OK. def's the keyword.",
    "start": "602730",
    "end": "608120"
  },
  {
    "text": "I'm creating a function.\nsqrt-- again, I'm being careful about case-sensitive,\nI'm using all lowercase here, followed by an open paren, and\nI said, formal parameters.",
    "start": "608120",
    "end": "615460"
  },
  {
    "text": "We'll see there could be\nmore than one there. We're going to come back to what\nthey mean in a second, but for now, think of them as,\nor think of x, in this case,",
    "start": "615460",
    "end": "622510"
  },
  {
    "text": "as the place holder. This place holder is saying, if\nyou give me a value for x,",
    "start": "622510",
    "end": "627540"
  },
  {
    "text": "inside the body of this function\nI'm going to use that value everywhere I see x. Question.",
    "start": "627540",
    "end": "632790"
  },
  {
    "text": "STUDENT: [INAUDIBLE] PROFESSOR ERIC GRIMSON: Ah,\nwe're going to come back to this in a second. But the question was, do\nI always need an input?",
    "start": "632790",
    "end": "639120"
  },
  {
    "text": "I can have functions with no\nparameters, that's fine, I will still need the open and\nclose paren there to identify",
    "start": "639120",
    "end": "645910"
  },
  {
    "text": "that I have no parameters. We're going to see an\nexample in a second. Good question. Actually, I've got to get rid of\nthis candy, so since it was",
    "start": "645910",
    "end": "651240"
  },
  {
    "text": "a good question, here you go. Nice catch.",
    "start": "651240",
    "end": "656280"
  },
  {
    "text": "Almost. Sorry. OK. No, I'm not. I'm sorry. I thought you had it, and then\nI've got the wrong glasses on",
    "start": "656280",
    "end": "662700"
  },
  {
    "text": "and I realized you didn't,\nso I will, ah come back to that later. What are we doing here? We got definition, we got name,\nwe got a set of formal",
    "start": "662700",
    "end": "668930"
  },
  {
    "text": "parameters. Right. If you look at the rest of that\ncode, gee, it looks a lot like what I had elsewhere.",
    "start": "668930",
    "end": "674899"
  },
  {
    "text": "Of what I had outside\nof it, right? It's running through a\nsimilar set of loops. So in some sets, as long as x\nhas the value I want, it ought",
    "start": "674900",
    "end": "681130"
  },
  {
    "text": "to do the right thing. However, there's a couple of\nother changes there that we want to highlight.",
    "start": "681130",
    "end": "686279"
  },
  {
    "text": "In particular, notice-- let me\nhighlight it for you, if I can",
    "start": "686280",
    "end": "691850"
  },
  {
    "text": "find it with the wrong glasses\non-- we've got these return commands.",
    "start": "691850",
    "end": "697860"
  },
  {
    "text": "So return is another keyword. And it basically says, when you\nget to this point in the",
    "start": "697860",
    "end": "708709"
  },
  {
    "text": "computation, stop\nthe computation. Literally, return the control\nfrom this function, and take",
    "start": "708710",
    "end": "716460"
  },
  {
    "text": "the value of the next\nexpression, and return that as the value of the whole\ncomputation.",
    "start": "716460",
    "end": "722290"
  },
  {
    "text": "Now, the one that we're most\ninterested in is the one where, in fact, it gets out ANS,\nso you see down here in",
    "start": "722290",
    "end": "727340"
  },
  {
    "text": "the code, there's a spot where\nit's going to return the value of ANS, which is what\nwe want, right?",
    "start": "727340",
    "end": "732370"
  },
  {
    "text": "That's the thing that holds the\nvalue that we intended to have. But there's another couple of\nplaces in that code where it's",
    "start": "732370",
    "end": "737950"
  },
  {
    "text": "got this funky-looking thing,\nreturn none, and notice none's in a different color. None is a special value, and\nit has the following",
    "start": "737950",
    "end": "753830"
  },
  {
    "text": "slightly-odd behavior: it is\na value, we can return it-- God bless-- but what none says\nis, there is no value coming",
    "start": "753830",
    "end": "762459"
  },
  {
    "text": "back from this computation. So when it is returned, and\nwe'll see this in a second, to the interpreter, it\ndoesn't print.",
    "start": "762460",
    "end": "769180"
  },
  {
    "text": "OK. It simply doesn't\nprint anything. Nonetheless, it is actually a\nvalue and we can use it, for example, to do comparisons.",
    "start": "769180",
    "end": "775860"
  },
  {
    "text": "If we want to know, did this\nfunction return a value or not, rather than reserving, say,\n-1 or some other special",
    "start": "775860",
    "end": "781620"
  },
  {
    "text": "thing which you might want to\nuse some other ways, it literally returns this very\nspecial value that says, there is no actual value return\nfrom this computation.",
    "start": "781620",
    "end": "789740"
  },
  {
    "text": "OK. Note, by the way, if I chase\nthrough each possible path,",
    "start": "789740",
    "end": "795269"
  },
  {
    "text": "like there's some IFs in here,\nthere's some places to go, at least in this piece of code,\nevery possible path through",
    "start": "795270",
    "end": "801339"
  },
  {
    "text": "this code ends in a return. And that's a good programming\ndiscipline, to make sure that happens.",
    "start": "801340",
    "end": "807020"
  },
  {
    "text": "There's an exception, which\nwe'll see in a second, but I'll highlight, which is, if\nwe get to the end of the procedure, there's sort of\nan implicit return there.",
    "start": "807020",
    "end": "814170"
  },
  {
    "text": "In fact, a return of\nnone, in that case. It comes out of it. But if I look at this, right? If I come into this code, I'm\ngoing to check this branch",
    "start": "814170",
    "end": "821040"
  },
  {
    "text": "first, if it's not true, ah,\nthere's a return at the end of that branch. If it is true, I do that, and\nthen I've got a second test.",
    "start": "821040",
    "end": "828459"
  },
  {
    "text": "If it's true, I return,\notherwise a return. So there's a return branch\non every possible path through the code.",
    "start": "828460",
    "end": "834350"
  },
  {
    "text": "And that's valuable, it's\nsomething you want to think about as your right your own. OK.",
    "start": "834350",
    "end": "840820"
  },
  {
    "text": "What do I do to use this,\nin particular? How do I invoke this?",
    "start": "840820",
    "end": "847160"
  },
  {
    "text": "OK, so I'm going to invoke a\nfunction by passing in values",
    "start": "847160",
    "end": "857879"
  },
  {
    "text": "for the parameters.",
    "start": "857880",
    "end": "864100"
  },
  {
    "text": "And in this case, that literally\nmeans typing sqrt,",
    "start": "864100",
    "end": "869769"
  },
  {
    "text": "with some value inside\nthe parens. OK.",
    "start": "869770",
    "end": "876030"
  },
  {
    "text": "Now, let's just try this out\nto see what happens. I'm going to make sure I've got\nit there, so if I type,",
    "start": "876030",
    "end": "882440"
  },
  {
    "text": "for example, sqrt\nof 16, ah-ha!",
    "start": "882440",
    "end": "890470"
  },
  {
    "text": "What did it do? Well, let's talk about\nwhat it did. What this invocation does, is\nthe following: it binds, and",
    "start": "890470",
    "end": "898810"
  },
  {
    "text": "I'm going to say this\nspecifically for this example, rather than general,\nit binds x to 16.",
    "start": "898810",
    "end": "906680"
  },
  {
    "text": "Just as you would have done with\nan assignment statement up in the top level thing. But this binding is local.",
    "start": "906680",
    "end": "916130"
  },
  {
    "text": "Meaning it only holds within\nthe confines of the code of this procedure.",
    "start": "916130",
    "end": "922000"
  },
  {
    "text": "Relative to that, think of that\nas creating what we, I'm going to call a new\nenvironment. Relative to that, it does all\nthe other execution we would",
    "start": "922000",
    "end": "928960"
  },
  {
    "text": "do, including, notice the first\ninstruction there is to the set up a binding for ANS. So answer, or ANS, is also\nbound only locally.",
    "start": "928960",
    "end": "942410"
  },
  {
    "text": "Meaning, inside the\nconfines of this environment of this procedure. ANS starts off with a value of\n0 and now we just run through",
    "start": "942410",
    "end": "949310"
  },
  {
    "text": "that loop just like\nwe did before. Writing Increments it slowly,\nchecking to see if ANS squared is bigger than x, and when it\ngets to that point, it checks",
    "start": "949310",
    "end": "956020"
  },
  {
    "text": "to see, is it actually a perfect\nsquare or not, and it returns it. And once it returns it, it\nreturns a value from that",
    "start": "956020",
    "end": "962339"
  },
  {
    "text": "return, that in this case\nis just printed out. All right. Now I want to say a\ncouple of things",
    "start": "962340",
    "end": "968550"
  },
  {
    "text": "about these local bindings. I'm going to repeat this\na second time, because it's important.",
    "start": "968550",
    "end": "976400"
  },
  {
    "text": "These local bindings do not\naffect any global bindings.",
    "start": "976400",
    "end": "988680"
  },
  {
    "text": "What does that mean? Let me show you a little\nexample, and then we'll come back to this.",
    "start": "988680",
    "end": "994240"
  },
  {
    "text": "I've got a little\nfunction here. See, I've defined f of x to be\na function that takes a value",
    "start": "994240",
    "end": "1000670"
  },
  {
    "text": "of x in, changes x to x+1, and\nthen just returns the value. OK. So it's just adding 1 to x.",
    "start": "1000670",
    "end": "1007290"
  },
  {
    "text": "But I want you to see now what\nhappens if I use this. Let's bind x to the\nvalue of 3.",
    "start": "1007290",
    "end": "1013580"
  },
  {
    "text": "It's creating a binding for x\nin this global environment. This is what the interpreter\nsees. All right?",
    "start": "1013580",
    "end": "1018850"
  },
  {
    "text": "In fact, if I look at\nx, its value is 3. Let's bind z eh let's bind z\nto the-- if I could type it",
    "start": "1018850",
    "end": "1028260"
  },
  {
    "text": "would help-- say, f of 3.",
    "start": "1028260",
    "end": "1035780"
  },
  {
    "text": "OK? So the value is z is 4, it's\nwhat I expect, right? Locally x got bound to 3, I\nadded 1 to it, whoop-dee-doo,",
    "start": "1035780",
    "end": "1042819"
  },
  {
    "text": "I get back a 4. But what's the value of x? It's still 3.",
    "start": "1042820",
    "end": "1049650"
  },
  {
    "text": "The way to think of this is,\nagain, I've got multiple scopes, or multiple frames, or\nif we're going to come back to",
    "start": "1049650",
    "end": "1055430"
  },
  {
    "text": "those terms, I'm going to use\nthe word environment, because I'm an old-time Lisp hacker,\nmultiple environments in which there are bindings.",
    "start": "1055430",
    "end": "1060810"
  },
  {
    "text": "So let me spell this out in just\na little bit more detail. What this is saying\nis the following.",
    "start": "1060810",
    "end": "1075760"
  },
  {
    "text": "When I'm talking to the\ninterpreter, when I'm typing things in as I just did, to that\nPython environment, I'm",
    "start": "1075760",
    "end": "1081600"
  },
  {
    "text": "getting what I'm going to\ncall global bindings. I'm going to draw a\nlittle chart here.",
    "start": "1081600",
    "end": "1095220"
  },
  {
    "text": "Think of this as the, as the\nworld of the interpreter, in that I've got things like x\nbound to the value of 3.",
    "start": "1095220",
    "end": "1103750"
  },
  {
    "text": "When I call or invoke a\nfunction, think of it as",
    "start": "1103750",
    "end": "1110980"
  },
  {
    "text": "creating a local table.",
    "start": "1110980",
    "end": "1121160"
  },
  {
    "text": "Inside that local table, I bind\nthe formal parameter,",
    "start": "1121160",
    "end": "1127330"
  },
  {
    "text": "which is what I do I did\n16 right to some value. This x only gets seen by sqrt.",
    "start": "1127330",
    "end": "1135630"
  },
  {
    "text": "Inside of there, I can bind\nother things, like ANS gets locally bound to 0, and then\nit increments around and",
    "start": "1135630",
    "end": "1142330"
  },
  {
    "text": "eventually we return\nthat value out. When I get to a return from\nsqrt, some value is returned",
    "start": "1142330",
    "end": "1149340"
  },
  {
    "text": "back to the interpreter, and\nthat table goes away.",
    "start": "1149340",
    "end": "1154760"
  },
  {
    "text": "But that table does not affect\nany bindings for other instances of the variable\nlike x for ANS.",
    "start": "1154760",
    "end": "1162620"
  },
  {
    "text": "OK. Let's look at a couple of\nexamples, just to sort of stress that. And one of the things I\nwanted to show is, OK.",
    "start": "1162620",
    "end": "1173970"
  },
  {
    "text": "Again, I can now use a function\njust as if it was a primitive, so this is just an\nassignment and I going to take",
    "start": "1173970",
    "end": "1179260"
  },
  {
    "text": "test to be the value of that, of\ncourse nothing gets printed because that was an assignment\nstatement. All right? So if I called sqrt alone, that\nreturn value is done, but",
    "start": "1179260",
    "end": "1187100"
  },
  {
    "text": "in this case I bound it to\ntest, so I can go look at test, and there it is. What happens if I do that?",
    "start": "1187100",
    "end": "1198809"
  },
  {
    "text": "OK. If you look at the code, it\nprinted out, it's not a perfect square, which is what I\nwanted, but now, what's the value of test?",
    "start": "1198810",
    "end": "1205720"
  },
  {
    "text": "OK, I bound test to something,\nif I look at it, it doesn't print anything, but--\nif I could type--",
    "start": "1205720",
    "end": "1215549"
  },
  {
    "text": "I can ask, is test bound to\nthat special name none? The answer is yes.",
    "start": "1215550",
    "end": "1223130"
  },
  {
    "text": "Boy, this seems like\na nuance, right? But it's a valuable thing. It says, in each case, I return\nsome useful value from",
    "start": "1223130",
    "end": "1230880"
  },
  {
    "text": "this procedure. I can check it, so if this\nwas part of some other computation, I want to\nknow, did it find a perfect square or not?",
    "start": "1230880",
    "end": "1236700"
  },
  {
    "text": "I don't have to go read what it\nprinted out in the screen. This has returned a value\nthat I can use. Because I could do a test to\nsay, is this a return value?",
    "start": "1236700",
    "end": "1244190"
  },
  {
    "text": "If it's not, I'll do something\nelse with it. So the binding is still\nthere, it simply doesn't print it out.",
    "start": "1244190",
    "end": "1251030"
  },
  {
    "text": "OK. What do we have out of this? Simple, seems like,\nat least addition.",
    "start": "1251030",
    "end": "1256700"
  },
  {
    "text": "We've added this notion\nof a function. I've highlighted some of the key\nthings we got here, right?",
    "start": "1256700",
    "end": "1262090"
  },
  {
    "text": "We have that def keyword, we've\ngot a name, we've got a list-- or I shouldn't say\na word list, we have a collection of formal parameters\nthat we're going to",
    "start": "1262090",
    "end": "1268259"
  },
  {
    "text": "use-- we have a body, and the\nbody looks just like the normal instructions we'd use,\nalthough by the way, we ought",
    "start": "1268260",
    "end": "1273640"
  },
  {
    "text": "to be able to use functions\ninside the body, which we're going to do in a second, and\nthen we're going to simply return some values\nout of this.",
    "start": "1273640",
    "end": "1280460"
  },
  {
    "text": "Now I started by saying,\nbuild these functions. I'm trying to get both\ndecomposition and abstraction.",
    "start": "1280460",
    "end": "1287840"
  },
  {
    "text": "Well, you hopefully can see\nthe decomposition, right? I now have a module. OK, let me set the stage.",
    "start": "1287840",
    "end": "1293020"
  },
  {
    "text": "Imagine I wanted to do sqrt, or\nsquare root-- no, I'm going to use sqrt, that's the name I'm\nusing here-- square root a hundred different places\nin some piece of code.",
    "start": "1293020",
    "end": "1300549"
  },
  {
    "text": "Without function, I'd have to\ncopy that piece of code everywhere. Now I got one just simple\nthing, and I simply have",
    "start": "1300550",
    "end": "1307730"
  },
  {
    "text": "isolated that module inside\nof that function. What about abstraction?",
    "start": "1307730",
    "end": "1313550"
  },
  {
    "text": "Well, I've got part of what\nI want for abstraction. Abstraction, again, says I'm\ngoing to suppress details.",
    "start": "1313550",
    "end": "1318570"
  },
  {
    "text": "Now that I've written sqrt, I\ncan just use it anywhere I want in the code. You've got to rely on the fact\nthat I wrote it correctly, but",
    "start": "1318570",
    "end": "1325000"
  },
  {
    "text": "you can basically suppress the\ndetails of how it's used. There's one more piece that we'd\nlike to get out of that,",
    "start": "1325000",
    "end": "1330640"
  },
  {
    "text": "and that is-- you may have been\nwondering, what's with the funky stuttering here of\nthree double-quotes in a row.",
    "start": "1330640",
    "end": "1337140"
  },
  {
    "text": "All right? And that is a specification. Which is a really valuable\nthing to have.",
    "start": "1337140",
    "end": "1342280"
  },
  {
    "text": "So what is the specification\ngoing to do? It is my place, as a programmer,\nto write",
    "start": "1342280",
    "end": "1348740"
  },
  {
    "text": "information to the user. This is me writing one hour of\nthat episode of Pirandello and",
    "start": "1348740",
    "end": "1353750"
  },
  {
    "text": "telling the other authors,\nhere's what I'm assuming as you use it. So it's up to me to do it right,\nbut if I do it, I'm",
    "start": "1353750",
    "end": "1359810"
  },
  {
    "text": "going to specify, what does\nthis function do? What does it expect as input,\nand any other information I",
    "start": "1359810",
    "end": "1365200"
  },
  {
    "text": "want to pass on. And notice, by the way, if I\ndo that, I'm going to come down here, and I type sqrt and\nopen the paren, ah-ha!",
    "start": "1365200",
    "end": "1376240"
  },
  {
    "text": "It shows me what the creator, in\nthis case actually I stole this from John so what Professor\nGuttag put up as his",
    "start": "1376240",
    "end": "1382740"
  },
  {
    "text": "specification for this\npiece of code. Now, it's not guaranteed\nit's right, right? You're trusting the programmer\ndid it right, but this now",
    "start": "1382740",
    "end": "1390110"
  },
  {
    "text": "tells you something. What is this? This is a wonderful piece\nof abstraction. It is saying, you don't need\nto know squat about what's",
    "start": "1390110",
    "end": "1396040"
  },
  {
    "text": "inside the body of\nthis function. You don't have to worry about\nthe parameter names, because they're going to be preserved,\nyou don't need to worry about",
    "start": "1396040",
    "end": "1401490"
  },
  {
    "text": "how I'm doing it, this tells you\nhow you can use this, in order to use it correctly.",
    "start": "1401490",
    "end": "1406560"
  },
  {
    "text": "Of course, I can then close\nit off, and off we go. All right, so that notion of\nabstraction and I was going to",
    "start": "1406560",
    "end": "1412360"
  },
  {
    "text": "come back-- we're going to come\nback to multiple times during the term-- and it's not\njust abstraction, it's the idea of a specification.",
    "start": "1412360",
    "end": "1419429"
  },
  {
    "text": "And just to look ahead a little\nbit, you could easily imagine that I might want to\nnot just put a statement in there, what the specs are,\nI might want to put some",
    "start": "1419430",
    "end": "1425780"
  },
  {
    "text": "constraints. Some specific things to check\nfor, to make sure that you're calling the code right. And it becomes a powerful way of\nreasoning about the code, a",
    "start": "1425780",
    "end": "1433710"
  },
  {
    "text": "powerful way of using the code,\nso those notions of specs are really important.",
    "start": "1433710",
    "end": "1438960"
  },
  {
    "text": "Look, part of the reason I'm\nflaming at you is, something like square root, it seems dumb\nto write specs on it.",
    "start": "1438960",
    "end": "1445830"
  },
  {
    "text": "Everybody knows what this\nis going to do. But you want to get into that\ndiscipline of good hygiene, good style.",
    "start": "1445830",
    "end": "1450880"
  },
  {
    "text": "You want to write the specs so\nthat everybody does in fact know what this piece of code is\ndoing, and you're writing it each time around.",
    "start": "1450880",
    "end": "1458870"
  },
  {
    "text": "OK. Now that we've got functions,\nlet's see what we can do as a",
    "start": "1458870",
    "end": "1465690"
  },
  {
    "text": "problem-solving tool\nusing them. In a particular, I've already\nsaid I want to get this notion of modularity, it's a module I\ncan isolate, and I want to get",
    "start": "1465690",
    "end": "1472730"
  },
  {
    "text": "the notion of abstracting away\nthe details, let's see how we can actually use that to\nactually write some reasonably",
    "start": "1472730",
    "end": "1479230"
  },
  {
    "text": "interesting pieces of code, but\nin particular, to see how we can use it to capture the\nideas of decomposition and",
    "start": "1479230",
    "end": "1485970"
  },
  {
    "text": "abstraction. So I'm going to shift gears. Start with a simple problem.",
    "start": "1485970",
    "end": "1497309"
  },
  {
    "text": "Boy, we're suddenly be\ntransported to Nebraska. Or where I grew up,\nSaskatchewan. All right, we've got\na farm air problem.",
    "start": "1497310",
    "end": "1503550"
  },
  {
    "text": "I got a farmer, walks out into\nhis yard, one morning. This farmer has a bunch of pigs\nin a punch-- it's been a",
    "start": "1503550",
    "end": "1510896"
  },
  {
    "text": "long day-- a bunch of pigs\nand a bunch of chickens. And he walks out into the\nfarmyard and he observes 20",
    "start": "1510896",
    "end": "1517740"
  },
  {
    "text": "heads and 56 legs. And for sake of argument, there\nare no amputees among",
    "start": "1517740",
    "end": "1526970"
  },
  {
    "text": "the chickens and the pigs. And the question is, so how many\npigs does he have, and how many chickens does he have?",
    "start": "1526970",
    "end": "1533630"
  },
  {
    "text": "Wow. What a deep problem, right? But you're going to see\nwhy we're going to use this in a second. So you know how to solve\nthis, this is a",
    "start": "1533630",
    "end": "1539280"
  },
  {
    "text": "fifth-grade problem, right? And what's the way\nto solve this? System of linear equations. What are the equations here?",
    "start": "1539280",
    "end": "1544820"
  },
  {
    "text": "Well, I could say, you know,\nthe number of pigs plus the number of chickens\nequals 20, right?",
    "start": "1544820",
    "end": "1553570"
  },
  {
    "text": "Because we've got 20 heads. And then what else do I have? Four times the number of pigs\nplus two times the number of",
    "start": "1553570",
    "end": "1560470"
  },
  {
    "text": "chickens, assuming they're\nnot next to a nuclear reactor, is 56.",
    "start": "1560470",
    "end": "1567700"
  },
  {
    "text": "And then how would\nyou solve this? Well, it's, you sort of know\nhow you'd do it if this was grammar school right?",
    "start": "1567700",
    "end": "1572860"
  },
  {
    "text": "You'd pull out your pencil and\npaper, you can do it as a matrix inversion if you know\nhow to do that, or you can just simply do substitution\nof one equation into",
    "start": "1572860",
    "end": "1579360"
  },
  {
    "text": "another to solve it. That's certainly one way to do\nit, but for computers that's not necessarily the\neasiest way.",
    "start": "1579360",
    "end": "1586870"
  },
  {
    "text": "So another way of solving it is\nto do something we already saw last time, which is\nbasically, why not simply",
    "start": "1586870",
    "end": "1591910"
  },
  {
    "text": "enumerate all possible examples\nand check them? You could say, I could have\nzero chickens and 20 pigs,",
    "start": "1591910",
    "end": "1599120"
  },
  {
    "text": "does that work? I've got one chicken and\nnineteen pigs, does that work? I've got two chickens\nand eighteen pigs, you get the idea.",
    "start": "1599120",
    "end": "1604460"
  },
  {
    "text": "So I'm going to solve this by\nenumerate and check, which is",
    "start": "1604460",
    "end": "1612049"
  },
  {
    "text": "an example of what's called\na brute-force algorithm.",
    "start": "1612050",
    "end": "1620840"
  },
  {
    "text": "Meaning, I'm just going\nto write a little loop that does that. All right, so let's go\nback to our code.",
    "start": "1620840",
    "end": "1627440"
  },
  {
    "text": "That's right, let me pull\nthis over a little bit, so I can see it.",
    "start": "1627440",
    "end": "1634320"
  },
  {
    "text": "And what I'd like you to look\nat, I'm going to highlight it just for a second here, is\nthose two pieces of code.",
    "start": "1634320",
    "end": "1639799"
  },
  {
    "text": "OK? Let's start with solve. OK. Here's the idea of solve.",
    "start": "1639800",
    "end": "1645580"
  },
  {
    "text": "I'm going to have it take in as\ninput how many legs I got, how many heads do I have,\nand I just want to",
    "start": "1645580",
    "end": "1650640"
  },
  {
    "text": "write a little loop. OK. I know how to do that, right? Write a little loop, all\nI'm going to do, is",
    "start": "1650640",
    "end": "1656580"
  },
  {
    "text": "run a FOR loop here. I'm going to let the number of\nchickens be in this range. Remember what range does, it\ngives me a set or a collection",
    "start": "1656580",
    "end": "1663730"
  },
  {
    "text": "or a tuple of integers from 0\nup to 1 - is the last value, so it's going to give me\neverything from 0 up to the",
    "start": "1663730",
    "end": "1669770"
  },
  {
    "text": "total number of heads. Knowing that, I'm going to say,\nOK, how many pigs are there, well that's just how\nwe're, however many I had",
    "start": "1669770",
    "end": "1675040"
  },
  {
    "text": "total, minus that amount, and\nthen I can see, how many legs does that give, and then I can\ncheck, that the number of legs",
    "start": "1675040",
    "end": "1681190"
  },
  {
    "text": "that I would get for that\nsolution, is it even equal to the number of legs I\nstarted with, ah!",
    "start": "1681190",
    "end": "1686330"
  },
  {
    "text": "Interesting. A return. In particular, I'm going\nto return a tuple. So, a pair or collection\nof those two values.",
    "start": "1686330",
    "end": "1694420"
  },
  {
    "text": "If it isn't, then I'm going to\ngo back around the loop, and notice what happens. If I get all the way around the\nloop, that is, all the way",
    "start": "1694420",
    "end": "1702100"
  },
  {
    "text": "through that FOR loop and I\nnever find a path that takes me through here, then the last\nthing I'm going to do is",
    "start": "1702100",
    "end": "1707350"
  },
  {
    "text": "return a pair or a tuple\nwith a special simple number none twice. Yep.",
    "start": "1707350",
    "end": "1712630"
  },
  {
    "text": "Are you telling me I want\nparens there and not, and not braces? All right.",
    "start": "1712630",
    "end": "1717650"
  },
  {
    "text": "I hate this language, because I\nalways want to have parens. Every time you see a square\nbracket, put a paren in. All right?",
    "start": "1717650",
    "end": "1724750"
  },
  {
    "text": "Thank you, Christy. I'll get it eventually . Having done that, right,\nnotice what I've got.",
    "start": "1724750",
    "end": "1731050"
  },
  {
    "text": "First of all, two parameters. It's OK. All it says is, when I call\nthis, I need to pass in two",
    "start": "1731050",
    "end": "1736910"
  },
  {
    "text": "parameters for this to work. All right? Now, if I want to use that,\nI'm going to use a second",
    "start": "1736910",
    "end": "1742370"
  },
  {
    "text": "piece of code here,\ncalled Barnyard. I'm going to read in a couple\nof values, convert them into integers, and then I'm\ngoing to use solve to",
    "start": "1742370",
    "end": "1749735"
  },
  {
    "text": "get a solution out. And what do I know\nabout solve? It is going to give me back a\ntuple a collection of two",
    "start": "1749735",
    "end": "1756130"
  },
  {
    "text": "things, and so check\nout the syntax. I can give two names, which\nwill get bound to the two",
    "start": "1756130",
    "end": "1762780"
  },
  {
    "text": "parts of that return tuple. OK, pigs will be the first part,\nchickens will be the second part.",
    "start": "1762780",
    "end": "1769010"
  },
  {
    "text": "OK, and then once I've got that,\nwell, notice: I can then check to see, did I return\nthat special symbol none?",
    "start": "1769010",
    "end": "1775450"
  },
  {
    "text": "Is the first part. That says, I took the branch\nthrough here that eventually got to the end and said, there\nwasn't a solution, in which",
    "start": "1775450",
    "end": "1781539"
  },
  {
    "text": "case I'm going to print out, there ain't\nno solution, otherwise I'll print out the pieces.",
    "start": "1781540",
    "end": "1787030"
  },
  {
    "text": "All right, let's check it out. Ah, what did I say? Twenty and 56, Right?",
    "start": "1787030",
    "end": "1794800"
  },
  {
    "text": "OK, notice the form. I've got two parameters, they're\nseparated by a comma.",
    "start": "1794800",
    "end": "1802930"
  },
  {
    "text": "Ah, right. Sorry?",
    "start": "1802930",
    "end": "1809159"
  },
  {
    "text": "Yeah, but I see-- it's legs and\nheads, but it should not still have--",
    "start": "1809160",
    "end": "1816789"
  },
  {
    "text": "Oh, sorry. Thank you. I've been doing the\nwrong thing. I want Barnyard this way, and if\nI had looked when I opened",
    "start": "1816790",
    "end": "1824420"
  },
  {
    "text": "the paren, it would have shown\nme a closed paren with no parameters. Aren't you glad I make mistakes,\nso you can see how",
    "start": "1824420",
    "end": "1829640"
  },
  {
    "text": "well I can fix from these? All right. Now I call that, and it says,\ntell me how many heads you want, give it a 20, and tell\nit how many legs you want,",
    "start": "1829640",
    "end": "1837086"
  },
  {
    "text": "give it 56, and it prints\nout the answers.",
    "start": "1837086",
    "end": "1843190"
  },
  {
    "text": "I know, whoop-dee-doo. But notice what's\ninside if here. First of all, notice\nthe modularity. I've used solve.",
    "start": "1843190",
    "end": "1848830"
  },
  {
    "text": "All right? Right there. I've captured it as\na computation. It's buried away, all the\ndetails are suppressed.",
    "start": "1848830",
    "end": "1857720"
  },
  {
    "text": "I can use that to return values,\nwhich I can then use elsewhere, which I did-- and\nif I just come back and highlight this-- inside\nof that computation.",
    "start": "1857720",
    "end": "1865480"
  },
  {
    "text": "But I don't have to know, inside\nof Barnyard, what the values are used inside\nof solve.",
    "start": "1865480",
    "end": "1871429"
  },
  {
    "text": "I don't know what the names of\nthe variables are, I don't care, I can basically suppress\naway that detail.",
    "start": "1871430",
    "end": "1877380"
  },
  {
    "text": "Second thing we saw is, that\nusing this as a computation, I can return multiple values. Which is actually of\nreal value to me",
    "start": "1877380",
    "end": "1883380"
  },
  {
    "text": "here as I use that. OK. Yeah. Question. STUDENT: [INAUDIBLE]",
    "start": "1883380",
    "end": "1898480"
  },
  {
    "text": "PROFESSOR ERIC GRIMSON: Ah. The question was, when it\nreturns, how does it distinguish between local\nand other things? So let me try and answer that.",
    "start": "1898480",
    "end": "1903940"
  },
  {
    "text": "Inside of solve, solve creates\nan environment where inside of that, it has bindings for the\nparameters it's going to use.",
    "start": "1903940",
    "end": "1910600"
  },
  {
    "text": "All right? Like, number of-- wait, what\ndid we call a were solve-- number of legs and\nnumber of heads.",
    "start": "1910600",
    "end": "1916560"
  },
  {
    "text": "OK, those are bound locally. When solve is done, it wraps up,\nif you like, a value that",
    "start": "1916560",
    "end": "1922110"
  },
  {
    "text": "it returns. Which is that. That expression, or that\nvalue, or that value,",
    "start": "1922110",
    "end": "1929370"
  },
  {
    "text": "literally gets passed back out\nof that local environment to the value that comes\nback out of it.",
    "start": "1929370",
    "end": "1934700"
  },
  {
    "text": "So in particular, what's solved\nreturns is a pair. It could be the pair of none,\nnone, it could be the pair of,",
    "start": "1934700",
    "end": "1942210"
  },
  {
    "text": "you know, whatever the answer\nwas that we put up there. That value comes back out and\nis now available inside the",
    "start": "1942210",
    "end": "1948259"
  },
  {
    "text": "scope of Barnyard. OK. And Barnyard then uses that.",
    "start": "1948260",
    "end": "1953800"
  },
  {
    "text": "Question? STUDENT: [INAUDIBLE]",
    "start": "1953800",
    "end": "1959990"
  },
  {
    "text": "PROFESSOR ERIC GRIMSON: Here? So the question is, why is this\nreturn on the same level as the FOR? Why do you think? STUDENT: [INAUDIBLE]",
    "start": "1959990",
    "end": "1976520"
  },
  {
    "text": "PROFESSOR ERIC GRIMSON: No. Good question. All right? So what's going to\nhappen here? If I'm inside this FOR, OK, and\nI'm running around, if I",
    "start": "1976520",
    "end": "1982690"
  },
  {
    "text": "ever hit a place where this\ntest is true, I'm going to execute that return,\nthat return returns",
    "start": "1982690",
    "end": "1988790"
  },
  {
    "text": "from the entire procedure. OK? So the return comes back\nfrom the procedure.",
    "start": "1988790",
    "end": "1993860"
  },
  {
    "text": "So the question was, why is\nthis return down at this level, it says, well if I ever\nexecute out of this FOR loop,",
    "start": "1993860",
    "end": "2000130"
  },
  {
    "text": "I get to the end of the FOR\nloop without hitting that branch that took me through the\nreturn, then and only then",
    "start": "2000130",
    "end": "2005480"
  },
  {
    "text": "do I want to actually say,\ngee, I got to this place, there isn't any value to return,\nI'm going to return none and none.",
    "start": "2005480",
    "end": "2011780"
  },
  {
    "text": "I'm still trying to get rid\nof this candy, Halloween's coming, where were we? There's one, thank you. I don't think I'm going\nto make it, I did.",
    "start": "2011780",
    "end": "2018680"
  },
  {
    "text": "Thank you. Make sense?",
    "start": "2018680",
    "end": "2028540"
  },
  {
    "text": "The answer is no, I want parens\nto create tuple and I get really confused about\nthe difference between lists and tuples.",
    "start": "2028540",
    "end": "2033700"
  },
  {
    "text": "For now, the code is working.",
    "start": "2033700",
    "end": "2040549"
  },
  {
    "text": "Yes is the answer, all right? And we're having a difference\nof opinion as to whether we should use a tuple or\na list here, right?",
    "start": "2040550",
    "end": "2046610"
  },
  {
    "text": "But the answer is\nyes, you can. And my real answer is, go try it\nout, because obviously you can tell I frequently do this\nthe wrong way and the TAs give",
    "start": "2046610",
    "end": "2052960"
  },
  {
    "text": "me a hard time every time. John. PROFESSOR JOHN GUTTAG:\nIs the microphone on? PROFESSOR ERIC GRIMSON: Yes.",
    "start": "2052960",
    "end": "2058730"
  },
  {
    "text": "PROFESSOR JOHN GUTTAG: As you'll\nsee next week, tuples and lists are very close\nto the same thing. In almost any place where you\ncan get away with using tuples",
    "start": "2058730",
    "end": "2067740"
  },
  {
    "text": "you can use lists. PROFESSOR ERIC GRIMSON: Yes. PROFESSOR JOHN GUTTAG: But\nwant to emphasize word is almost, because we'll see a\ncouple of places where if it",
    "start": "2067740",
    "end": "2074970"
  },
  {
    "text": "expects a tuple and you\nuse a list you'll get an error message. But we'll see all\nthat next week.",
    "start": "2074970",
    "end": "2080950"
  },
  {
    "text": "PROFESSOR ERIC GRIMSON: Right,\nwhen the real pro comes in to pick up the pieces I'm leaving\nbehind for him.",
    "start": "2080950",
    "end": "2086500"
  },
  {
    "text": "OK. Let me pull this back up. What we're doing now is we're\nbuilding this encapsulation. Now one of the things you notice\nhere by the way is, you",
    "start": "2086500",
    "end": "2093610"
  },
  {
    "text": "know, this in essence just\nsolves the simple problems. Suppose I now add one\nother piece to this.",
    "start": "2093610",
    "end": "2101190"
  },
  {
    "text": "The farmer is not keeping a\ngreat set of things so in addition to pigs, and chickens\nhe raises spiders.",
    "start": "2101190",
    "end": "2111390"
  },
  {
    "text": "I have no idea why. He's making silk I guess.",
    "start": "2111390",
    "end": "2116970"
  },
  {
    "text": "Right? Why am I giving you\nthis example? I want to show you how easy\nit is to change the code. But, notice, once I've\nadded this I",
    "start": "2116970",
    "end": "2122130"
  },
  {
    "text": "actually have a problem. This is now an under-constrained\nproblem. I have more unknowns than\nI have equations.",
    "start": "2122130",
    "end": "2128530"
  },
  {
    "text": "So you know from algebra I can't\nactually solve this. There may be multiple\nsolutions to this. What would I have to do\nto change my code?",
    "start": "2128530",
    "end": "2135839"
  },
  {
    "text": "And the answer is fortunately\nnot a lot. So I'm going to ask you to\nlook now at this set of",
    "start": "2135840",
    "end": "2141010"
  },
  {
    "text": "things, which is solve\n1 and Barnyard 1. OK.",
    "start": "2141010",
    "end": "2147040"
  },
  {
    "text": "The change is, well, on Barnyard\n1 it looks much the same as it did for Barnyard. Right, I'm going to read in the\nvalues of the number of",
    "start": "2147040",
    "end": "2152480"
  },
  {
    "text": "heads and the number of legs. I'm going to use solve 1 as\nbefore, but now I'm going to bind out three variables.",
    "start": "2152480",
    "end": "2158170"
  },
  {
    "text": "And then I'm going to do\na similar thing to print things out. But would the solver do? Well here what I'd like\nto do is to run",
    "start": "2158170",
    "end": "2163690"
  },
  {
    "text": "through a couple of loops. Right, how would I solve\nthis problem? You can use the same enumerate\nand check idea, but now say",
    "start": "2163690",
    "end": "2170970"
  },
  {
    "text": "gee let me pick how many\npigs there are. Is that the one I used first? Sorry, let me pick the number\nof spiders there are.",
    "start": "2170970",
    "end": "2178369"
  },
  {
    "text": "Having chosen the number of\nspiders, let me pick how many chickens I have. With those two\nin place, I now know how",
    "start": "2178370",
    "end": "2185880"
  },
  {
    "text": "many pigs I must have\nand I can run through the same solution. The reason I'm showing you this\nis this is another very",
    "start": "2185880",
    "end": "2191800"
  },
  {
    "text": "standard structure. I now have two nested loops. One running through a choice for\none parameter, another one",
    "start": "2191800",
    "end": "2198590"
  },
  {
    "text": "running through a choice\nfor a second parameter. And then the rest\nof the solution looks much like before. I'm going to get the total\nnumber of legs out.",
    "start": "2198590",
    "end": "2204140"
  },
  {
    "text": "I'm going to check to see\nif it's right or not. And again I'm going to return\neither a three tuple there or a three tuple there.",
    "start": "2204140",
    "end": "2210420"
  },
  {
    "text": "It's part of what I want,\nbecause I'm going to bind those values out. And if I run that example,\nBarnyard 1, I don't know we'll",
    "start": "2210420",
    "end": "2223119"
  },
  {
    "text": "give it 20 heads, 56 legs;\nand it find a solution.",
    "start": "2223120",
    "end": "2229010"
  },
  {
    "text": "I ought to be able to\nrun something else.",
    "start": "2229010",
    "end": "2234520"
  },
  {
    "text": "I don't know, give\nme some numbers. How many heads? Pick an integer, somebody. STUDENT: 5. PROFESSOR ERIC GRIMSON: 5. All right.",
    "start": "2234520",
    "end": "2239829"
  },
  {
    "text": "How many legs? 10? All right.",
    "start": "2239830",
    "end": "2244880"
  },
  {
    "text": "We got an easy one. Let's just for the\nheck of it -- I should have found some\nbetter examples before I tried this.",
    "start": "2244880",
    "end": "2257720"
  },
  {
    "text": "No mutant spiders here. OK, so what have I done? I just added a little\nbit more now. I'm now running through\na pair of loops.",
    "start": "2257720",
    "end": "2263619"
  },
  {
    "text": "Again notice the encapsulation,\nthat nice abstraction going on, which\nis what I want. Once I get to this stage though\nby the way, there might",
    "start": "2263620",
    "end": "2270339"
  },
  {
    "text": "be more than one solution. Because in an under-constrained\nproblem there could be multiple\nsolutions.",
    "start": "2270340",
    "end": "2275609"
  },
  {
    "text": "So suppose I want to capture\nall of them or print all of them out. Well I ought to be able\nto do that by simply",
    "start": "2275610",
    "end": "2280920"
  },
  {
    "text": "generalizing the loop. And that's what the next\npiece of code on your a",
    "start": "2280920",
    "end": "2287320"
  },
  {
    "text": "hand out shows you. I'm just going to let\nyou look at this. If you look at solve 2, it's\ngoing to run through the same",
    "start": "2287320",
    "end": "2293360"
  },
  {
    "text": "kind of loop, printing out\nall of the answers. But it's going to keep going. In other words it doesn't just\nreturn when it finds one, it's",
    "start": "2293360",
    "end": "2299670"
  },
  {
    "text": "going to run through\nall of them. All right? Sounds like a reasonable\nthing to do. Notice one last piece.",
    "start": "2299670",
    "end": "2306000"
  },
  {
    "text": "If I'm going to do that, run\nthrough all possible answers, I still want to know,\ngee, what if",
    "start": "2306000",
    "end": "2311480"
  },
  {
    "text": "there aren't any answers? How do I return that case? And that shows you one other\nnice little thing we want to",
    "start": "2311480",
    "end": "2317230"
  },
  {
    "text": "do, which is if I look in this\ncode notice I set up a variable up here called Solution\nFound, initially",
    "start": "2317230",
    "end": "2322890"
  },
  {
    "text": "bound to false. The rest of that code's\na pair of loops. Pick the number of spiders.",
    "start": "2322890",
    "end": "2328110"
  },
  {
    "text": "Pick the number of chickens. That sets up the\nnumber of pigs. Figure out the legs. See if it's right. If it is right, I'm going to\nprint out the information but",
    "start": "2328110",
    "end": "2335200"
  },
  {
    "text": "I'm also going to change\nthat variable to true. And that allows me then, at the\nend of that pair of loops",
    "start": "2335200",
    "end": "2341619"
  },
  {
    "text": "when I get down to this point\nright here, I can check to see did I find any solution and if\nnot in that case print out",
    "start": "2341620",
    "end": "2348980"
  },
  {
    "text": "there is no solution. So this gives you another nice\npiece which is I can now look",
    "start": "2348980",
    "end": "2354320"
  },
  {
    "text": "for first solution, I can look\nfor all solutions, and I can maintain some internal variables\nthat let me know",
    "start": "2354320",
    "end": "2360010"
  },
  {
    "text": "what I found. A trick that you're going to\nuse a lot as you write your own functions. All right, I want to end up with\nthe last 10 minutes with",
    "start": "2360010",
    "end": "2367140"
  },
  {
    "text": "a different variation on how\nto use functions to think about problems. And that is to",
    "start": "2367140",
    "end": "2372510"
  },
  {
    "text": "introduce the idea of recursion. How many of you have heard\nthe term used before?",
    "start": "2372510",
    "end": "2384240"
  },
  {
    "text": "How may have you heard the term\nused before in terms of programming languages?",
    "start": "2384240",
    "end": "2390180"
  },
  {
    "text": "Great. For the rest you,\ndon't sweat it. This is a highfalutin term that\ncomputer scientists use to try and make them look like\nthey're smarter than they",
    "start": "2390180",
    "end": "2397010"
  },
  {
    "text": "really are. But it is a very handy way of\nthinking about, not just how to program, but how to\nbreak problems down",
    "start": "2397010",
    "end": "2404710"
  },
  {
    "text": "into nice sized chunks. And the idea behind recursion\nI'm going to describe with a simple example.",
    "start": "2404710",
    "end": "2411309"
  },
  {
    "text": "And then I'm going to show you\nhow we can actually use it.",
    "start": "2411310",
    "end": "2416720"
  },
  {
    "text": "The idea of recursion is that\nI'm going to take a problem and break it down into a simpler\nversion of the same",
    "start": "2416720",
    "end": "2423000"
  },
  {
    "text": "problem plus some steps\nthat I can execute. I'm go to show you an example\nof a procedure, sorry a",
    "start": "2423000",
    "end": "2428589"
  },
  {
    "text": "function, in a second. But let me give you actually\nan analogy. If you look at US law, and you\nlook at the definition of the",
    "start": "2428590",
    "end": "2437080"
  },
  {
    "text": "US legal code that defines\nthe notion of a natural born US citizen. It's actually a wonderful\nrecursive definition.",
    "start": "2437080",
    "end": "2443849"
  },
  {
    "text": "So what's the definition? If you're born in the United\nStates you are by definition a",
    "start": "2443850",
    "end": "2449950"
  },
  {
    "text": "natural born US citizen. We call that a base case.",
    "start": "2449950",
    "end": "2458140"
  },
  {
    "text": "It's basically the\nsimplest possible",
    "start": "2458140",
    "end": "2465029"
  },
  {
    "text": "solution to the problem. Now if you were not born in\nthe United States, you may still be, under definition, a\nnatural born US citizen if",
    "start": "2465030",
    "end": "2474150"
  },
  {
    "text": "you're born outside this United\nStates, both of your parents are citizens of the\nUnited States and at least one",
    "start": "2474150",
    "end": "2479779"
  },
  {
    "text": "parent has lived in\nthe United States. There's a wonderful\nlegal expression. But notice what that is.",
    "start": "2479780",
    "end": "2485570"
  },
  {
    "text": "It's a recursive definition. How do you know that your\nparents, at least one of your",
    "start": "2485570",
    "end": "2490580"
  },
  {
    "text": "parents satisfies\nthe definition? Well I've reduced the problem\nfrom am I a natural born US",
    "start": "2490580",
    "end": "2496970"
  },
  {
    "text": "citizen to is one\nof my parents a natural born US citizen? And that may generalize again\nand it keeps going until you",
    "start": "2496970",
    "end": "2504070"
  },
  {
    "text": "either get back to Adam\nand Eve, I guess. I don't think they were born in\nthe US as far as I know, or",
    "start": "2504070",
    "end": "2509740"
  },
  {
    "text": "you find somebody who satisfies\nthat definition or you find that none\nof your parents actually are in that category.",
    "start": "2509740",
    "end": "2515920"
  },
  {
    "text": "But that second one is called\nthe inductive step, or the recursive step.",
    "start": "2515920",
    "end": "2521630"
  },
  {
    "text": "And in my words it says break\nthe problem into a simpler",
    "start": "2521630",
    "end": "2530339"
  },
  {
    "text": "version of the same problem\nand some other steps.",
    "start": "2530340",
    "end": "2548550"
  },
  {
    "text": "And I think this is best\nillustrated by giving you a simple little piece of code. I use simple advisedly here.",
    "start": "2548550",
    "end": "2555450"
  },
  {
    "text": "This is actually a piece of code\nthat is really easy to think about recursively and is\nmuch more difficult to think",
    "start": "2555450",
    "end": "2561010"
  },
  {
    "text": "about in other ways. And the piece of code is suppose\nI have a spring and I want to know if it's\na palindrome.",
    "start": "2561010",
    "end": "2566589"
  },
  {
    "text": "Does it read the same\nthing left to right as right to left. OK?",
    "start": "2566590",
    "end": "2571890"
  },
  {
    "text": "How would I solve that? If the string has no elements\nin it it is obviously a",
    "start": "2571890",
    "end": "2578150"
  },
  {
    "text": "palindrome. If the string has one element\nin it, it's a palindrome. There's the base case.",
    "start": "2578150",
    "end": "2584650"
  },
  {
    "text": "If it's longer than one,\nwhat do I want to do? Well I'd like to check the two\nend points to see are they the",
    "start": "2584650",
    "end": "2590880"
  },
  {
    "text": "same character? And if they are, then oh,\nI just need to know is everything else in the\nmiddle a palindrome?",
    "start": "2590880",
    "end": "2599030"
  },
  {
    "text": "I know it sounds simple, but\nnotice what I just did. I just used a recursive\ndefinition. I just reduced it to a smaller\nversion of the same problem.",
    "start": "2599030",
    "end": "2607080"
  },
  {
    "text": "That is if I can write code that\nwould solve all instances of smaller size strings, then\nwhat I just described will",
    "start": "2607080",
    "end": "2614560"
  },
  {
    "text": "solve the larger size one. And in fact that's exactly what\nI have. I would like you to look at this piece of\ncode right here called",
    "start": "2614560",
    "end": "2622020"
  },
  {
    "text": "isPalindrome. Notice what it says. I'm going to pass in a string,\ncall it s, binds it locally,",
    "start": "2622020",
    "end": "2631360"
  },
  {
    "text": "and it says the following. It says if this is a string of\nlength 0 or 1, I'm done.",
    "start": "2631360",
    "end": "2637690"
  },
  {
    "text": "I'm going to return\nthe answer true. Otherwise I'm going to check to\nsee is the first and last,",
    "start": "2637690",
    "end": "2644880"
  },
  {
    "text": "there's that - 1 indexing, is\nthe first and last element of the string the same?",
    "start": "2644880",
    "end": "2650480"
  },
  {
    "text": "And if that's true is everything\nin the string, starting at the first element\nand removing the last element,",
    "start": "2650480",
    "end": "2657480"
  },
  {
    "text": "a palindrome? Let me remind you. By saying first element remember\nwe start at 0 as the initial indexing point.",
    "start": "2657480",
    "end": "2664890"
  },
  {
    "text": "Wonderful recursive\ndefinition. OK, let's try it out.",
    "start": "2664890",
    "end": "2671109"
  },
  {
    "text": "Go back over here and we're\ngoing to say isPalindrome. How did I actually spell this?",
    "start": "2671110",
    "end": "2677579"
  },
  {
    "text": "Palindrome with a capital P.\nOnly in New York, in Canada we",
    "start": "2677580",
    "end": "2684470"
  },
  {
    "text": "pronounce it Palindrome. When you're teaching it you get\nto call it your way, I'm going to call it my way.",
    "start": "2684470",
    "end": "2689610"
  },
  {
    "text": "Sorry John, you're\nabsolutely right. OK. Notice by the way, there's\nthat nice speck going on",
    "start": "2689610",
    "end": "2695740"
  },
  {
    "text": "saying put a string here. It's going to return true if\nit's a PAIL-indrome and false if it's a PAL-indrome.",
    "start": "2695740",
    "end": "2703260"
  },
  {
    "text": "And it says true. Now maybe you're\nbugged by this. I know you're bugged by my\nbad humor, but too bad.",
    "start": "2703260",
    "end": "2709049"
  },
  {
    "text": "Maybe you're bugged by this,\nsaying wait a minute, how does this thing stop? This is the kind of definition\nthat your high school geometry",
    "start": "2709050",
    "end": "2716520"
  },
  {
    "text": "teacher would have rapped\nyour knuckles over. You can't define things in\nterms of themselves. This is an inductive\ndefinition.",
    "start": "2716520",
    "end": "2722280"
  },
  {
    "text": "Actually we could prove\ninductively that it holds, but how do we know it stops? Well notice what the computation\nis doing. it's",
    "start": "2722280",
    "end": "2728000"
  },
  {
    "text": "looking first to see am I in the\nbase case, which I'm done. If I'm not I'm just going to\nreduce this to a smaller",
    "start": "2728000",
    "end": "2734680"
  },
  {
    "text": "computation. And as long as that smaller\ncomputation reduces to another smaller computation, eventually\nI ought to get to",
    "start": "2734680",
    "end": "2741220"
  },
  {
    "text": "the place where I'm down\nin that base case. And to see that I've written\nanother version of this, which I'm going to use here, where I'm\ngoing to give it a little",
    "start": "2741220",
    "end": "2749839"
  },
  {
    "text": "indentation.",
    "start": "2749840",
    "end": "2756110"
  },
  {
    "text": "I'm going to call this\npalindrome 1. Sorry about that. Palindrome 1. I'm going to give it a\nlittle indentation so",
    "start": "2756110",
    "end": "2763600"
  },
  {
    "text": "that we can see this. OK. Code is right here.",
    "start": "2763600",
    "end": "2770130"
  },
  {
    "text": "And all it's doing is when I'm\ngetting into the different places I'm simply printing out\ninformation about where I am.",
    "start": "2770130",
    "end": "2775890"
  },
  {
    "text": "What I want you to see is notice\nwhat happened here. OK. I'm calling palindrome\nwith that.",
    "start": "2775890",
    "end": "2782550"
  },
  {
    "text": "It first calls it\non that problem. And the code over here says,\nOK gee, if I'm in the base",
    "start": "2782550",
    "end": "2788280"
  },
  {
    "text": "case do something. I'm not, so come down here check\nthat the two end points a and a are the same and\ncall this again also.",
    "start": "2788280",
    "end": "2798369"
  },
  {
    "text": "Notice what happens. There's this nice unwrapping\nof the problem. I just doubled the indentation\neach time so you can see it.",
    "start": "2798370",
    "end": "2805480"
  },
  {
    "text": "So each successive call, notice\nwhat's happening. The argument is getting\nreduced.",
    "start": "2805480",
    "end": "2812960"
  },
  {
    "text": "And we're going another\nlevel in. When we get down to this point,\nwe're calling it with just a string of length one.",
    "start": "2812960",
    "end": "2818510"
  },
  {
    "text": "At that point we're in the base\ncase and we can unwrap this computation. We say, ah, that's now true.",
    "start": "2818510",
    "end": "2824570"
  },
  {
    "text": "So I can return true here. Given that that's true and I\nalready checked the two end points, that's true,\nthat's true.",
    "start": "2824570",
    "end": "2830610"
  },
  {
    "text": "And I unwrap the computation\nto get back. You are going to have to\ngo play with this.",
    "start": "2830610",
    "end": "2836610"
  },
  {
    "text": "Rock it if you like to try\nand see where it goes. But I want to stress again, as\nlong as I do the base case",
    "start": "2836610",
    "end": "2841800"
  },
  {
    "text": "right and my inductive or\nrecursive step reduces it to a smaller version of the same\nproblem, the code will in fact",
    "start": "2841800",
    "end": "2848280"
  },
  {
    "text": "converge and give me\nout an answer. All right, I want to show you\none last example of using",
    "start": "2848280",
    "end": "2855700"
  },
  {
    "text": "recursion because we're going\nto come back to this. This is a classic example\nof using recursion. And that is dating from\nthe 1200s and",
    "start": "2855700",
    "end": "2864255"
  },
  {
    "text": "it is due to Fibonacci. Does anyone know the history\nof what Fibonacci was trying to do?",
    "start": "2864255",
    "end": "2871270"
  },
  {
    "text": "Sorry, let me re-ask that. Fibonacci. Which actually is son of Bonacci\nwhich is the name of",
    "start": "2871270",
    "end": "2878270"
  },
  {
    "text": "his father who was apparently\na very friendly guy. First of all, does anyone know\nwhat a Fibonacci number is?",
    "start": "2878270",
    "end": "2885250"
  },
  {
    "text": "Wow. STUDENT: [INAUDIBLE]",
    "start": "2885250",
    "end": "2890690"
  },
  {
    "text": "PROFESSOR ERIC GRIMSON: Right,\nwe're going to do that in a second, but the answer is\nFibonacci numbers, we define the first two. Which are both defined to be,\nor I can define them in",
    "start": "2890690",
    "end": "2896295"
  },
  {
    "text": "multiple ways, 0 and 1. And then the next Fibonacci\nnumber is the sum of the previous two. And the next number is the\nsum of the previous two.",
    "start": "2896295",
    "end": "2902230"
  },
  {
    "text": "Do you know the history\nof this? STUDENT: [INAUDIBLE].",
    "start": "2902230",
    "end": "2910839"
  },
  {
    "text": "PROFESSOR ERIC GRIMSON:\nExactly. Thank you. Bad throw, I'm playing\nfor the Yankees. Sorry John.",
    "start": "2910840",
    "end": "2916289"
  },
  {
    "text": "The answer is Fibonacci actually\nwas actually trying to count rabbits back\nin the 1200s. The idea was that rabbits could\nmate after a month, at",
    "start": "2916290",
    "end": "2923400"
  },
  {
    "text": "age one month. And so he said, if you start off\nwith a male and a female, at the end of one month they\nhave an offspring.",
    "start": "2923400",
    "end": "2929700"
  },
  {
    "text": "Let's assume they have\ntwo offspring. At the end of the next month\nlet's assume those offspring have offspring. Again a male and female.",
    "start": "2929700",
    "end": "2935619"
  },
  {
    "text": "The question was how many\nrabbits do you have at the end of a year? At the end of two years? At the end of more than that\nnumber of years, and so.",
    "start": "2935620",
    "end": "2941470"
  },
  {
    "text": "We can do this with the\nfollowing level definition. We're going to let pairs of 0,\nthe number of pairs at month",
    "start": "2941470",
    "end": "2948320"
  },
  {
    "text": "0, actually it would not\nbe 0 it would be 1. We let the number of pairs\nat month 1 be 1.",
    "start": "2948320",
    "end": "2957650"
  },
  {
    "text": "And then the number of pairs\nat month n is the number of pairs at month n - 1 plus\nthe number of pairs",
    "start": "2957650",
    "end": "2965880"
  },
  {
    "text": "at month n - 2. The sum of the previous two.",
    "start": "2965880",
    "end": "2970910"
  },
  {
    "text": "If I write Fibonacci, you\nsee it right there. And the reason I want to show\nyou this is to notice that the",
    "start": "2970910",
    "end": "2977390"
  },
  {
    "text": "recursion can be doubled. So this says, given a value x,\nif it's either 0 or 1, either",
    "start": "2977390",
    "end": "2983570"
  },
  {
    "text": "of those two cases,\njust return 1. Otherwise break this down\ninto two versions",
    "start": "2983570",
    "end": "2989260"
  },
  {
    "text": "of a simpler problem. Fib of x - 1 and fib of x - 2,\nand then take the sum of those",
    "start": "2989260",
    "end": "2994870"
  },
  {
    "text": "and return that as the value. Notice if I'm going to have two\ndifferent sub problems I",
    "start": "2994870",
    "end": "3001119"
  },
  {
    "text": "need to have two base cases\nhere to catch this. And if I only had one\nit would error out.",
    "start": "3001120",
    "end": "3006200"
  },
  {
    "text": "And as a consequence, I can go\noff and ask about rabbits.",
    "start": "3006200",
    "end": "3011730"
  },
  {
    "text": "Let's see. At the end of 12 months,\nnot so bad.",
    "start": "3011730",
    "end": "3018350"
  },
  {
    "text": "At the end of two years, we're\nnot looking so good.",
    "start": "3018350",
    "end": "3024990"
  },
  {
    "text": "At the end of three years,\nwe are now in Australia.",
    "start": "3024990",
    "end": "3030790"
  },
  {
    "text": "Overrun with rabbits. In fact I don't think the thing\never comes back, so I'm going to stop it because it\nreally gets hung up here.",
    "start": "3030790",
    "end": "3037580"
  },
  {
    "text": "And I'm going to restart it. What's the point of this? Again, now that I can think\nabout things recursively, I",
    "start": "3037580",
    "end": "3044600"
  },
  {
    "text": "can similarly break things down\ninto simpler versions of the same problem. It could be one version.",
    "start": "3044600",
    "end": "3049770"
  },
  {
    "text": "It could be multiple versions. And we're going to come back\nthroughout the term to think about how to code programs\nthat reflect this.",
    "start": "3049770",
    "end": "3056910"
  },
  {
    "text": "The last point I want to make\nto you is, you've started writing programs that you\nwould think of as being inherently iterative.",
    "start": "3056910",
    "end": "3062010"
  },
  {
    "text": "They're running through\na loop. It's a common way of thinking\nabout problems. Some problems",
    "start": "3062010",
    "end": "3067290"
  },
  {
    "text": "are naturally tackled\nthat way. There are other problems that\nare much more naturally thought of in a recursive\nfashion.",
    "start": "3067290",
    "end": "3073900"
  },
  {
    "text": "And I would suggest palindrome\nas a great example of that. That's easy to think\nabout recursively. It's much harder to think\nabout iteratively.",
    "start": "3073900",
    "end": "3080619"
  },
  {
    "text": "And you want to get into the\nhabit of deciding which is the right one for you to use. And with that, we'll\nsee you next time.",
    "start": "3080620",
    "end": "3087069"
  }
]