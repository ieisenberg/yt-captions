[
  {
    "text": "[SQUEAKING]\n[RUSTLING] [CLICKING] ",
    "start": "0",
    "end": "16299"
  },
  {
    "text": "ANA BELL: All right,\nlet's get started. So today, we're\ngoing to be starting a completely new set of topics.",
    "start": "16300",
    "end": "23890"
  },
  {
    "text": "And we'll be talking about\nthese topics for the next four lectures. And it's a big topic.",
    "start": "23890",
    "end": "29660"
  },
  {
    "text": "The big idea we're trying to\naccomplish in these next four lectures is for us to start\ndefining our own object types.",
    "start": "29660",
    "end": "38530"
  },
  {
    "text": "And we'll be defining\nthese object types through these things\ncalled Python classes.",
    "start": "38530",
    "end": "46300"
  },
  {
    "text": "So today's lecture,\nwe'll just give you a really-- we'll just define\na really simple object type.",
    "start": "46300",
    "end": "52000"
  },
  {
    "text": "And then we'll build\nup from there on. So let's take a\nstep back and think about particular objects,\nreally specific objects",
    "start": "52000",
    "end": "61450"
  },
  {
    "text": "that we've been working with. So for example,\nwe've been working with probably the number 1234.",
    "start": "61450",
    "end": "68200"
  },
  {
    "text": "We've been working with\nthe float pi, 3.14159. We've been working\nwith sequences of characters like Hello,\nwith lists of numbers.",
    "start": "68200",
    "end": "77690"
  },
  {
    "text": "So here's a list with those\nspecific elements within it. And we've been working\nwith dictionaries. And here's a specific\ndictionary with these entries.",
    "start": "77690",
    "end": "87210"
  },
  {
    "text": "Now, every one of these\nthings up here is an object. We have it in our program.",
    "start": "87210",
    "end": "93590"
  },
  {
    "text": "We can manipulate it. We can add it to other things. We can index. We can do all these things. But every one of these objects\nbasically has a certain type.",
    "start": "93590",
    "end": "102470"
  },
  {
    "text": "We talked about this\nback in lecture 1 when I introduced\ntypes of objects.",
    "start": "102470",
    "end": "108150"
  },
  {
    "text": "So what does that mean? Well, in that lecture, I said\nthat the type of an object",
    "start": "108150",
    "end": "113299"
  },
  {
    "text": "basically tells us the kinds of\nthings that we can do with it. So the things you\ncan do with a number",
    "start": "113300",
    "end": "118537"
  },
  {
    "text": "are going to be different\nthan the kinds of things you can do with strings. And we've been seeing this since\nthat lecture up until today.",
    "start": "118537",
    "end": "126020"
  },
  {
    "text": "Today, we're going to see how\nwe can create our own object types. So to do that, we have to\nunderstand the following thing.",
    "start": "126020",
    "end": "132549"
  },
  {
    "text": "And this is something\nI'll keep repeating today. So once you decide to\ncreate an object type--",
    "start": "132550",
    "end": "137570"
  },
  {
    "text": "every one of these\nobjects, for example, has been created\nusing some blueprint. And when you're\ncreating these objects,",
    "start": "137570",
    "end": "144410"
  },
  {
    "text": "you need to think\nabout two things. The first is what data\nwill represent this object. And the second is what\nbehaviors will this object have.",
    "start": "144410",
    "end": "151980"
  },
  {
    "text": "Now, the objects up here\nare pretty simple, right? The kinds of data that\nrepresents this integer",
    "start": "151980",
    "end": "158640"
  },
  {
    "text": "is-- well, there's\nno data, really. It's just the number itself. But it has some operations,\nsome things that you",
    "start": "158640",
    "end": "164370"
  },
  {
    "text": "can do with this integer. Now, the data that\nrepresents a list",
    "start": "164370",
    "end": "169500"
  },
  {
    "text": "is going to be different\nthan the data that represents an integer because the\nlist is kind of made up of a sequence of\nnumbers or objects.",
    "start": "169500",
    "end": "177780"
  },
  {
    "text": "And then the data that makes\nup a dictionary is completely different than the\ndata that makes up the list because\na dictionary has",
    "start": "177780",
    "end": "184050"
  },
  {
    "text": "entries, where each entry\nhas a key and a value pair. And then you have a\nbunch of these entries.",
    "start": "184050",
    "end": "189630"
  },
  {
    "text": "So the data representing\neach one of these objects is different. And we're going to decide what\ndata represents the new objects",
    "start": "189630",
    "end": "195270"
  },
  {
    "text": "that we want to create. And of course, this\nis something we've known from the first lecture.",
    "start": "195270",
    "end": "200515"
  },
  {
    "text": "The kinds of ways that we can\ninteract with these objects is also different amongst all\nthese different object types.",
    "start": "200515",
    "end": "206190"
  },
  {
    "text": "So in terms of terminology,\nwhen we create an actual object that we want to manipulate, we\ncall it an instance of a type.",
    "start": "206190",
    "end": "215640"
  },
  {
    "text": "So this specific number, 1234,\nis an instance of an integer.",
    "start": "215640",
    "end": "221050"
  },
  {
    "text": "And this specific sequence of\ncharacters-- lowercase hello, is an instance of a string.",
    "start": "221050",
    "end": "228800"
  },
  {
    "text": "All right, so the idea of\nobject-oriented programming is basically that everything\nin Python is an object.",
    "start": "228800",
    "end": "235920"
  },
  {
    "text": "And this we've talked about when\nwe were introducing functions. We treated functions\nlike objects. And what that means is that\nwe can create new objects that",
    "start": "235920",
    "end": "245300"
  },
  {
    "text": "have some type. So we actually create\nthese very specific objects that we can manipulate.",
    "start": "245300",
    "end": "250580"
  },
  {
    "text": "And we can also\ndestroy the objects. So you can create\nthem, manipulate them, and destroy them as you will. But each one of these\nobjects has a specific type.",
    "start": "250580",
    "end": "258680"
  },
  {
    "text": "So let's talk a little bit more\nabout the data abstraction. So once you have an object\nthat you'd like to create--",
    "start": "258680",
    "end": "266240"
  },
  {
    "text": "so think of anything in\nthe world, some something--",
    "start": "266240",
    "end": "271360"
  },
  {
    "text": "the two things that\nyou need to think about are what is going to be\nthe way that you represent",
    "start": "271360",
    "end": "277090"
  },
  {
    "text": "the object in terms of data. And the other thing is what are\nthe behaviors of this object.",
    "start": "277090",
    "end": "283060"
  },
  {
    "text": "How can other programmers\nor other objects interact with this thing\nthat you're creating?",
    "start": "283060",
    "end": "288880"
  },
  {
    "text": "So when we're creating\nour own object type, we have to think about\nthese data abstractions.",
    "start": "288880",
    "end": "294310"
  },
  {
    "text": "So let's take a more\nreal life example. So let's say I have these\ntwo very specific cars that",
    "start": "294310",
    "end": "300390"
  },
  {
    "text": "actually exist in\nthe real world. So we can actually\ndrive these cars around. We can manipulate them.",
    "start": "300390",
    "end": "306450"
  },
  {
    "text": "They have already been created. They are actual objects. Well, behind the\nscenes, these objects",
    "start": "306450",
    "end": "312990"
  },
  {
    "text": "were created using\nsome blueprint. This blueprint is not an\nactual tangible thing.",
    "start": "312990",
    "end": "319170"
  },
  {
    "text": "It's basically some\nabstract notion of how to create those specific\nobjects, those specific cars.",
    "start": "319170",
    "end": "327039"
  },
  {
    "text": "So as we're thinking about\ncreating our own object types, we have to think about\ndesign decisions.",
    "start": "327040",
    "end": "333940"
  },
  {
    "text": "If I want to create\na blueprint for a car that somebody can\nthen use to create an actual car in real life,\nhow do I abstract the car?",
    "start": "333940",
    "end": "342100"
  },
  {
    "text": "And as we're creating\nthese objects ourselves, we get to make these\ndesign decisions, which is pretty cool.",
    "start": "342100",
    "end": "347840"
  },
  {
    "text": "So if I were creating this\ncar, the blueprint for a car, I would say, well,\nI'm going to use maybe the length of the\ncar, the width of the car,",
    "start": "347840",
    "end": "354550"
  },
  {
    "text": "and the height of the car,\nand the color of the car. And those four data attributes\nwill represent a car object.",
    "start": "354550",
    "end": "362140"
  },
  {
    "text": "But of course, that's\nmy design decision. If you were more\nfamiliar with cars or if you wanted to get into\na more detailed description",
    "start": "362140",
    "end": "368830"
  },
  {
    "text": "or representation,\nyou would also have a number for how\nmany horsepowers it has,",
    "start": "368830",
    "end": "375160"
  },
  {
    "text": "how many doors it has, maybe\nhow many people could fit, other things like that. But a very simple data\nabstraction for a car",
    "start": "375160",
    "end": "382960"
  },
  {
    "text": "is length, width,\nheight, and color. So that's data abstraction,\nso what data represents,",
    "start": "382960",
    "end": "389800"
  },
  {
    "text": "this object you're\ntrying to create. Now, how about the interface? Well, in terms of\nthe interface, we decide what are some ways\nthat programmers can interact",
    "start": "389800",
    "end": "397720"
  },
  {
    "text": "with the object or other objects\ncan interact with this object. So we could say that we\ncould let the users change",
    "start": "397720",
    "end": "404979"
  },
  {
    "text": "the color of the car. We could say that we can\nlet the car make a noise.",
    "start": "404980",
    "end": "412120"
  },
  {
    "text": "So honk the horn could be\nmaybe one thing, one function that this car could do.",
    "start": "412120",
    "end": "417740"
  },
  {
    "text": "And if we say honk\nthe horn, then maybe it would print\nsomething to the screen, something like that. And then we can have the car\ndrive from point A to point B.",
    "start": "417740",
    "end": "425500"
  },
  {
    "text": "Or we could have the\ncar go in a circle. You could have the\ncar crash another car.",
    "start": "425500",
    "end": "430990"
  },
  {
    "text": "And all of these behaviors\nare part of this the interface",
    "start": "430990",
    "end": "437949"
  },
  {
    "text": "for this particular car. But we're going to\ndefine them such that any car that we\ncreate from here on,",
    "start": "437950",
    "end": "443410"
  },
  {
    "text": "any actual object\nthat we create will have all of these behaviors and\nall of these data attributes.",
    "start": "443410",
    "end": "449090"
  },
  {
    "text": "So an example a little\ncloser to home is the list. We've been working\nwith lists so far.",
    "start": "449090",
    "end": "455570"
  },
  {
    "text": "So behind the scenes, somebody\ncreated the data type list.",
    "start": "455570",
    "end": "461360"
  },
  {
    "text": "So there's some code in Python\nthat basically defines the data that makes up the list,\nthe data attributes--",
    "start": "461360",
    "end": "467090"
  },
  {
    "text": "how is a list described-- and the behaviors,\nthe procedures,",
    "start": "467090",
    "end": "472310"
  },
  {
    "text": "the functions that\na list can do. So in terms of data\nattributes, well, there's many design\ndecisions that whoever",
    "start": "472310",
    "end": "479780"
  },
  {
    "text": "decided to create this\nlist class could have done. How could they have\nrepresented the list? Well, they could\nhave said, I'm going",
    "start": "479780",
    "end": "485270"
  },
  {
    "text": "to allocate sort of a\ncontiguous block of memory. And your elements\nwill go in that order",
    "start": "485270",
    "end": "491990"
  },
  {
    "text": "from the smallest memory value\nto the biggest memory value. That's one design decision. Another one could be that,\ninstead of allocating",
    "start": "491990",
    "end": "500210"
  },
  {
    "text": "a contiguous block of\nmemory, you could say, I can allocate memories\nhere and there. That's OK. But then each element\nin my list will then",
    "start": "500210",
    "end": "510380"
  },
  {
    "text": "be represented by two things-- the first being the\nvalue at that location. And the second could be maybe\nanother integer or something",
    "start": "510380",
    "end": "517380"
  },
  {
    "text": "that tells Python which memory\nlocation to go to to get the next element in the list.",
    "start": "517380",
    "end": "523000"
  },
  {
    "text": "So both valid design decisions-- I think Python did\nthe second one.",
    "start": "523000",
    "end": "528540"
  },
  {
    "text": "So that's how you represent the\ndata that represents the list. And in terms of\nbehaviors, well, we've",
    "start": "528540",
    "end": "534747"
  },
  {
    "text": "already been working with lists. So we know a bunch of the\nbehaviors that lists have. You can index into it.",
    "start": "534747",
    "end": "539880"
  },
  {
    "text": "You can sort a list. You can append an item\nto the end of the list. You can get the maximum\nelement within the list. All of these different\nprocedures, functions",
    "start": "539880",
    "end": "548010"
  },
  {
    "text": "are things that you\ncan do with lists. And we've been\nworking with them. And we've been working with\nlists without actually knowing",
    "start": "548010",
    "end": "553557"
  },
  {
    "text": "the representation-- how\nsomebody decided to represent this class-- which is pretty cool.",
    "start": "553557",
    "end": "560080"
  },
  {
    "text": "So a couple more\nreal life examples-- if we were to think about\nrepresenting each of these--",
    "start": "560080",
    "end": "566530"
  },
  {
    "text": "so if we think about\nthe object, an elevator, again, it's up to us to\nmake the design decision.",
    "start": "566530",
    "end": "572130"
  },
  {
    "text": "It's basically a box that\ncan change floors, right? So we could represent it\nusing the length, the width, the height, which are all\nfloats or something like that.",
    "start": "572130",
    "end": "581680"
  },
  {
    "text": "We can also represent it\nusing the max capacity and the current floor it's at.",
    "start": "581680",
    "end": "586990"
  },
  {
    "text": "So all five of these\nvariables together,",
    "start": "586990",
    "end": "592350"
  },
  {
    "text": "values together,\nrepresent my elevator. And again, it's my design\ndecision to do this. Yours might be different.",
    "start": "592350",
    "end": "598500"
  },
  {
    "text": "And in terms of things\nthat the elevator can do, well, we can change its current\nfloor, which is basically",
    "start": "598500",
    "end": "604860"
  },
  {
    "text": "saying change the value of\nthe variable current floor to be something else. Add people to it--\nmaybe checking",
    "start": "604860",
    "end": "611040"
  },
  {
    "text": "if you're at max capacity or\nnot and maybe printing out a Warning if you're\nabove that, removing people, things like that.",
    "start": "611040",
    "end": "617740"
  },
  {
    "text": "An employee is also a pretty\ncommon example of something that's typically implemented\nin a bunch of programming",
    "start": "617740",
    "end": "625120"
  },
  {
    "text": "languages. So an employee, basically\na person that has a salary, maybe works for\nCompany X. So you",
    "start": "625120",
    "end": "631120"
  },
  {
    "text": "could represent this\nemployee using their name, maybe a string for\nthe first name, a string for the last name, and\nthen their birth date maybe,",
    "start": "631120",
    "end": "638500"
  },
  {
    "text": "and then their salary, which is\na float or something like that. And in terms of behaviors,\nwhat can employees do?",
    "start": "638500",
    "end": "645547"
  },
  {
    "text": "Well, you can change their name. You can change their salary. You can maybe activate\nor deactivate them as current employees,\nthings like that.",
    "start": "645547",
    "end": "652120"
  },
  {
    "text": "A queue at a store, also\na really nice example. And it kind of goes hand in\nhand with a stack of pancakes.",
    "start": "652120",
    "end": "659800"
  },
  {
    "text": "How would you represent\na queue at a store? Well, the representation isn't\ngoing to be a set of things.",
    "start": "659800",
    "end": "666370"
  },
  {
    "text": "The representation could\nbe something really simple, like just a list, which is fine.",
    "start": "666370",
    "end": "673540"
  },
  {
    "text": "So maybe the list\nwill have some strings with the names of the\npeople who are currently in the queue at a store.",
    "start": "673540",
    "end": "679890"
  },
  {
    "text": "But what's going to make\na queue kind of special is the way that\nwe'll be using it.",
    "start": "679890",
    "end": "687070"
  },
  {
    "text": "So the representation\nisn't super unique. It's just a list. But the way that\na queue operates",
    "start": "687070",
    "end": "694340"
  },
  {
    "text": "will be special because, if\nyou think about the queue, the first person who\ncomes into the queue will be the first person\nout of the queue--",
    "start": "694340",
    "end": "700970"
  },
  {
    "text": "first in, first out\nkind of situation. So that means, if\nyou make the design decision to add new people\nat the end of the queue--",
    "start": "700970",
    "end": "708200"
  },
  {
    "text": "so if I have a new person\nthat gets added here,",
    "start": "708200",
    "end": "713480"
  },
  {
    "text": "they're the newest person in. That means if I'm removing\na person from the queue, I better remove the\noldest one, which",
    "start": "713480",
    "end": "718730"
  },
  {
    "text": "is going to be\nover at the first, at the beginning of my list. So the way that\nyou use the queue",
    "start": "718730",
    "end": "724190"
  },
  {
    "text": "will be consistent\nwith this idea. And then you can basically\nsimulate the queue.",
    "start": "724190",
    "end": "729350"
  },
  {
    "text": "And the stack of\npancakes is very similar. If you think about pancakes,\nthe first one you made",
    "start": "729350",
    "end": "735769"
  },
  {
    "text": "is the last one you eat. So it's a first in, last\nout kind of situation.",
    "start": "735770",
    "end": "740910"
  },
  {
    "text": "So that means that we can still\nrepresent a stack of pancakes using a list.",
    "start": "740910",
    "end": "749089"
  },
  {
    "text": "So the representation,\nthe data representation for a stack of pancakes,\nwill be the same as a queue,",
    "start": "749090",
    "end": "755630"
  },
  {
    "text": "except that the behavior\nwill be different because if I just made a new\npancake and it goes at the end",
    "start": "755630",
    "end": "761000"
  },
  {
    "text": "here, the newest one that I\nmade is the first one that I'm going to eat.",
    "start": "761000",
    "end": "767630"
  },
  {
    "text": "If I add a pancake to\nthe end of my list, I'm going to remove\nthe pancake that I want to eat from the\nend of my list as well.",
    "start": "767630",
    "end": "775310"
  },
  {
    "text": "OK. So the idea of object-oriented\nprogramming and the reason we're doing this is\nbecause now we're",
    "start": "775310",
    "end": "780350"
  },
  {
    "text": "bundling basically data and\nbehaviors into one thing. And so we can create all\nof these objects that",
    "start": "780350",
    "end": "788540"
  },
  {
    "text": "have the same type\nthat all are going to function in the same way. We know they're going\nto be consistent, right?",
    "start": "788540",
    "end": "795470"
  },
  {
    "text": "They're going to be\nconsistent in the data that represents them and\nconsistent in the way that we use them right.",
    "start": "795470",
    "end": "802520"
  },
  {
    "text": "We know for sure\nthat the queue is going to be a first in,\nfirst out kind of situation.",
    "start": "802520",
    "end": "808910"
  },
  {
    "text": "And the way we're\ngoing to implement this is using these things\ncalled Python classes. And the reason we create\nthese Python classes",
    "start": "808910",
    "end": "815690"
  },
  {
    "text": "is to make code that's\nvery nicely reusable. We can create really\nsimple Python classes that we'll see today.",
    "start": "815690",
    "end": "821640"
  },
  {
    "text": "And then we can build\nupon these Python classes to create more complex classes,\nwhich we'll see on Wednesday.",
    "start": "821640",
    "end": "828900"
  },
  {
    "text": "But the big idea here--\nand this is something that I was a little bit\nconfused about when I first",
    "start": "828900",
    "end": "833940"
  },
  {
    "text": "started learning about\nobject-oriented programming-- is you get to be in charge\nof the design decision.",
    "start": "833940",
    "end": "840180"
  },
  {
    "text": "So you get to decide what\ndata represents the class. And you decide what behaviors\nrepresent the class.",
    "start": "840180",
    "end": "846310"
  },
  {
    "text": "So if you wanted to say that--\nyou represent a queue using a list--",
    "start": "846310",
    "end": "851430"
  },
  {
    "text": "first in, first out-- if you add items to the\nend, you remove items from the beginning. That's one design decision.",
    "start": "851430",
    "end": "857709"
  },
  {
    "text": "Another design\ndecision could be, well, you still\nrepresent it as a list, but new items get\nadded to the front.",
    "start": "857710",
    "end": "863910"
  },
  {
    "text": "But to be consistent with the\nidea of a queue, that means you remove items from the back. And then the\nbehavior is the same.",
    "start": "863910",
    "end": "870570"
  },
  {
    "text": "We're implementing\na queue no matter which one of those design\ndecisions we've made.",
    "start": "870570",
    "end": "876950"
  },
  {
    "text": "OK. So as we're going\nthrough today's lecture, I want to make a note\nof a couple of things.",
    "start": "876950",
    "end": "882380"
  },
  {
    "text": "So I've got these little\ntabs up at the top here. We're going to be\nbasically switching",
    "start": "882380",
    "end": "888760"
  },
  {
    "text": "our brains a little bit today. We're going to be\ndefining a Python object.",
    "start": "888760",
    "end": "894945"
  },
  {
    "text": "So we're going to\nbe writing code that tells Python, hey, I\nam telling you I would like to create this object type.",
    "start": "894945",
    "end": "900865"
  },
  {
    "text": " This is the data that\nrepresents them, represents it.",
    "start": "900865",
    "end": "907612"
  },
  {
    "text": "And these are the behaviors\nthat represents it. So that's us\nimplementing the class, so telling Python that\nwe are now creating",
    "start": "907612",
    "end": "914310"
  },
  {
    "text": "and telling you what an object\nof this type is and does. And the other thing\nis, once we have",
    "start": "914310",
    "end": "921080"
  },
  {
    "text": "a definition for\nthis object type, we're going to\nactually use the type.",
    "start": "921080",
    "end": "926600"
  },
  {
    "text": "We're going to create\nnew objects of this type. So when we're creating\nthe class, when",
    "start": "926600",
    "end": "932520"
  },
  {
    "text": "we're telling Python that\nan object like this exists, we're deciding the\nname of our class.",
    "start": "932520",
    "end": "937810"
  },
  {
    "text": "We're deciding what\ndata abstracts it. We're deciding what\nbehaviors we can do with it.",
    "start": "937810",
    "end": "943350"
  },
  {
    "text": "So if we think about the\nlist, we haven't actually seen the code to do this. But someone wrote code to\ndefine this list class.",
    "start": "943350",
    "end": "952120"
  },
  {
    "text": "Now, using the class\nmeans that we're assuming that this code already exists.",
    "start": "952120",
    "end": "957340"
  },
  {
    "text": "And you're just creating a whole\nbunch of objects of this type. So we've been doing\nthis definitely, right?",
    "start": "957340",
    "end": "962560"
  },
  {
    "text": "If we think about the list\nclass again, here for example, we created an actual object\nthat we can manipulate.",
    "start": "962560",
    "end": "968590"
  },
  {
    "text": "L is equal to 1 comma 2. We've also created L is equal\nto 3 comma 4, comma 5, and all",
    "start": "968590",
    "end": "974350"
  },
  {
    "text": "these things. We're basically\ncreating these instances that we can manipulate\nand use in our program",
    "start": "974350",
    "end": "979720"
  },
  {
    "text": "to achieve something useful. And today, we're\ngoing to see how we can do both of those things.",
    "start": "979720",
    "end": "985980"
  },
  {
    "text": "I want to draw a little parallel\nwith functions because it's going to feel very similar. And with functions, when we\nwere defining a function,",
    "start": "985980",
    "end": "994830"
  },
  {
    "text": "we were telling\nPython that I would like to abstract some code\nthat does something useful",
    "start": "994830",
    "end": "1001550"
  },
  {
    "text": "using this class-- using this function definition. So we were writing the\ndefinition for the function",
    "start": "1001550",
    "end": "1007850"
  },
  {
    "text": "in this abstract way. We didn't actually run the\nfunction at that point. We just defined it.",
    "start": "1007850",
    "end": "1014040"
  },
  {
    "text": "And so when we define\na class, that's basically what we're doing. We're telling Python\nthat we're creating this object that bundles\ndata and behaviors together.",
    "start": "1014040",
    "end": "1024650"
  },
  {
    "text": "When we create an\ninstances of this data type that we're going\nto define, that's",
    "start": "1024650",
    "end": "1030680"
  },
  {
    "text": "kind of like we called\nthe actual function that we defined.",
    "start": "1030680",
    "end": "1035809"
  },
  {
    "text": "So when we called\nthe function, we were now doing something\nuseful in our program.",
    "start": "1035810",
    "end": "1041270"
  },
  {
    "text": "We said, here are\nsome actual parameters I want you to run\nthis function with. Now, tell me what the output is.",
    "start": "1041270",
    "end": "1047231"
  },
  {
    "text": "And that's exactly\nwhat we're going to do when we create\ninstances of the data type we're defining.",
    "start": "1047232",
    "end": "1053370"
  },
  {
    "text": "We're now creating\nactual objects that we can manipulate\nand use in our class.",
    "start": "1053370",
    "end": "1060660"
  },
  {
    "text": "OK. So the object we're going\nto create in today's lecture is a coordinate in a 2D plane--",
    "start": "1060660",
    "end": "1068110"
  },
  {
    "text": "pretty simple,\npretty mathematical. So before we actually\nwrite the code, let's think about\nwhat it actually",
    "start": "1068110",
    "end": "1075519"
  },
  {
    "text": "means to put a\ncoordinate in a 2D plane. So we're going to think about\nif we had a bunch of instances,",
    "start": "1075520",
    "end": "1081160"
  },
  {
    "text": "if we had a bunch of\ncoordinates in a 2D plane, what do they look like? What kind of data\nare we interested",
    "start": "1081160",
    "end": "1086260"
  },
  {
    "text": "in grabbing from\nthese instances? What are some things\nwe can do with it? So here, I have a\npoint in my 2D plane.",
    "start": "1086260",
    "end": "1094169"
  },
  {
    "text": "So if we think about how\nwe look at this coordinate,",
    "start": "1094170",
    "end": "1099500"
  },
  {
    "text": "well, we know how far away the\ncoordinate is on the x-axis. And we know how far away the\ncoordinate is on the y-axis.",
    "start": "1099500",
    "end": "1107630"
  },
  {
    "text": "So that's one instance\nof a coordinate object. Now, let's say we\nhad another one.",
    "start": "1107630",
    "end": "1113480"
  },
  {
    "text": "Here's another dot\nin my 2D plane. Again, this dot will\nalso know how far away it is on the x-axis and how\nfar away it is on the y-axis.",
    "start": "1113480",
    "end": "1122870"
  },
  {
    "text": "So one reasonable\ndata abstraction for a coordinate\nin a 2D plane could",
    "start": "1122870",
    "end": "1129410"
  },
  {
    "text": "be to say I want two numbers,\none representing how far",
    "start": "1129410",
    "end": "1134810"
  },
  {
    "text": "away it is on the x-axis\nand one for how far away it is on the y-axis. That seems pretty reasonable.",
    "start": "1134810",
    "end": "1141110"
  },
  {
    "text": "I don't care about color, even\nthough I colored these things. But you can imagine\nmaking a cuter version",
    "start": "1141110",
    "end": "1148472"
  },
  {
    "text": "of this coordinate\nobject that also has a color associated with it. So the data that will represent\nmy point in a coordinate plane,",
    "start": "1148472",
    "end": "1156480"
  },
  {
    "text": "in a 2D coordinate plane\nis just two numbers-- one for the x, one for the y.",
    "start": "1156480",
    "end": "1162653"
  },
  {
    "text": "Now, what are some\nthings that we can do with these coordinate objects? Certainly something\nreally simple we can do",
    "start": "1162653",
    "end": "1167679"
  },
  {
    "text": "is to say, well, one\nof these points-- the orange one, for\nexample-- tell me",
    "start": "1167680",
    "end": "1174130"
  },
  {
    "text": "how far away you\nare on the x-axis or tell me how far away\nyou are on the y-axis.",
    "start": "1174130",
    "end": "1179260"
  },
  {
    "text": "So those two commands could\nreturn something like 3 for that's how far away\nthat point is on the x-axis",
    "start": "1179260",
    "end": "1184960"
  },
  {
    "text": "or 4 for how far away\nit is on the y-axis. Those are pretty\nsimple things to do.",
    "start": "1184960",
    "end": "1190462"
  },
  {
    "text": "One more interesting\nthing to do is to say, well, hey, you,\norange point right over there, can you tell me how far away\nyou are between the green point?",
    "start": "1190462",
    "end": "1199660"
  },
  {
    "text": "So that would be the Euclidean\ndistance between these two points. And we're going to write\na code that figures out",
    "start": "1199660",
    "end": "1206500"
  },
  {
    "text": "how far away one\ncoordinate object is from another coordinate object. ",
    "start": "1206500",
    "end": "1212379"
  },
  {
    "text": "All right, so let's start\ndefining this class coordinate. You can see here, this is the\ncode that implements the class.",
    "start": "1212380",
    "end": "1219409"
  },
  {
    "text": "So this will tell Python\nthat we are now creating this object type coordinate.",
    "start": "1219410",
    "end": "1225820"
  },
  {
    "text": "So we're not using it yet. We're not creating any\nobjects, any object instances. We're just telling\nPython that we'd like",
    "start": "1225820",
    "end": "1232480"
  },
  {
    "text": "to create this object type. So we start with\nthe keyword class.",
    "start": "1232480",
    "end": "1238510"
  },
  {
    "text": "In parallel, we started\nwith the keyword def to define a function. Then we say the name\nof our object type.",
    "start": "1238510",
    "end": "1244550"
  },
  {
    "text": "So this will be literally\nthe type of the object, so coordinate, just like\nwe had list and float, all",
    "start": "1244550",
    "end": "1250508"
  },
  {
    "text": "those things. This will be of type coordinate. And then in parentheses\nhere, we say to the parent of this class.",
    "start": "1250508",
    "end": "1257460"
  },
  {
    "text": "So usually, we say object until\ntwo lectures from now when we're going to see\nwhat happens when",
    "start": "1257460",
    "end": "1262520"
  },
  {
    "text": "we put something else in there. But when we put object\nin the parentheses there, we're telling\nPython that anything",
    "start": "1262520",
    "end": "1268220"
  },
  {
    "text": "a generic Python object can\ndo our object can do as well. So something\nreally, really basic",
    "start": "1268220",
    "end": "1277880"
  },
  {
    "text": "is saying that I'm going to\ncreate this object in memory and assign a variable\nto it so that I",
    "start": "1277880",
    "end": "1283130"
  },
  {
    "text": "get a handle for that object\nusing this variable-- something super basic. Any Python object\nhas this ability.",
    "start": "1283130",
    "end": "1289340"
  },
  {
    "text": "And ours will too because\nI've put this object in the parentheses here. ",
    "start": "1289340",
    "end": "1296150"
  },
  {
    "text": "All right, so now,\nwe've told Python we're creating a data\ntype called coordinate.",
    "start": "1296150",
    "end": "1301910"
  },
  {
    "text": "What are we going to fill\nin the body of this class? So the things we need to fill in\nare going to be our attributes.",
    "start": "1301910",
    "end": "1309120"
  },
  {
    "text": "Now, again, what\nmakes up an object? Two things-- the\ndata that you want to represent this object with\nand the procedures, a.k.a.",
    "start": "1309120",
    "end": "1316820"
  },
  {
    "text": "functions, a.k.a. behaviors that\nyou'd like this object to have.",
    "start": "1316820",
    "end": "1322220"
  },
  {
    "text": "So the data will be two things. We decided that we're\ngoing to represent a coordinate using two numbers.",
    "start": "1322220",
    "end": "1329240"
  },
  {
    "text": "Now, what about behaviors? Behaviors will\nessentially be functions that work with objects\nof this particular type.",
    "start": "1329240",
    "end": "1337740"
  },
  {
    "text": "So we're going to define\nthem as functions. But we're going to define them\nin a really special way that tells Python you can\nonly run this function",
    "start": "1337740",
    "end": "1345830"
  },
  {
    "text": "on an object of type\ncoordinate, which makes sense. I would not like to find the\ndistance between two integers",
    "start": "1345830",
    "end": "1353350"
  },
  {
    "text": "that's just subtraction. Or I would not like to find\nthe distance between two dictionaries. What does that even mean?",
    "start": "1353350",
    "end": "1358510"
  },
  {
    "text": "So distance method,\nthat we mentioned is one thing we'd\nlike to implement, will only work with\nobjects of type coordinate.",
    "start": "1358510",
    "end": "1365970"
  },
  {
    "text": "So these special functions\nare actually called methods. And I'm going to use this\nterm a little bit today.",
    "start": "1365970",
    "end": "1373440"
  },
  {
    "text": "Hopefully, you get used to it. And then from next\nlecture on, I'll just use the word methods to\nrefer to functions that only",
    "start": "1373440",
    "end": "1380549"
  },
  {
    "text": "work with objects of this type. So we so far, in\nthe previous slide,",
    "start": "1380550",
    "end": "1386789"
  },
  {
    "text": "had class coordinate object. Now , what is the next\nthing you have to do?",
    "start": "1386790",
    "end": "1392220"
  },
  {
    "text": "So the next thing you\nalways have to do, when you tell Python you're\ncreating a new data type,",
    "start": "1392220",
    "end": "1397230"
  },
  {
    "text": "is to tell Python how you want\nto construct this data type,",
    "start": "1397230",
    "end": "1403790"
  },
  {
    "text": "kind of a constructor function. And the way we do this is by\ndefining-- so you can see we're",
    "start": "1403790",
    "end": "1411110"
  },
  {
    "text": "defining it like a function, ef. But we're going to\ndefine a function that has a special name.",
    "start": "1411110",
    "end": "1416780"
  },
  {
    "text": "And the name is __init__.",
    "start": "1416780",
    "end": "1422570"
  },
  {
    "text": "So that's the name\nof this function. And you can see it's a function,\ndef name, and then parentheses.",
    "start": "1422570",
    "end": "1427679"
  },
  {
    "text": "And there's a bunch of\nstuff in the parentheses. The first thing will be\nthis thing called self. So already, it's going\nto be a little bit",
    "start": "1427680",
    "end": "1434180"
  },
  {
    "text": "different than\nregular functions. Now, I'm going to--",
    "start": "1434180",
    "end": "1439340"
  },
  {
    "text": "this is not the only\ntime I'll explain self. I'll explain it\nthroughout this lecture. But the basic idea of\nself is that it's always",
    "start": "1439340",
    "end": "1448010"
  },
  {
    "text": "going to be the first parameter\nof a method, a function that only works with an\nobject of this class--",
    "start": "1448010",
    "end": "1453799"
  },
  {
    "text": "of this type. And the reason why\nwe have it here is because all we're doing\nhere is telling Python",
    "start": "1453800",
    "end": "1461840"
  },
  {
    "text": "that we'd like to\ncreate this object type. We don't have an actual\nobject to manipulate.",
    "start": "1461840",
    "end": "1468179"
  },
  {
    "text": "I haven't created an\nactual object yet. I'm just telling Python I'd\nlike to create this object.",
    "start": "1468180",
    "end": "1474100"
  },
  {
    "text": "So if I don't have an\nactual object created yet, I need some way to\nrefer to an instance",
    "start": "1474100",
    "end": "1481860"
  },
  {
    "text": "without actually having one yet. And that's what\nthe self is doing. It's basically a variable\nthat tells Python",
    "start": "1481860",
    "end": "1489750"
  },
  {
    "text": "that this is an object of-- that this is a function\nthat only works with an object of this type.",
    "start": "1489750",
    "end": "1495389"
  },
  {
    "text": "And I'm going to use this\nvariable, self, to refer to this object, myself, my data\nattributes, and my methods,",
    "start": "1495390",
    "end": "1504420"
  },
  {
    "text": "and things like that. So it will become clear. There will be many examples. But for now, it's\nbasically a way for us",
    "start": "1504420",
    "end": "1511020"
  },
  {
    "text": "to refer to an\nobject of this type-- an instance of this type without\nactually having created one.",
    "start": "1511020",
    "end": "1517210"
  },
  {
    "text": "Anything after self is\nbasically parameters you'd like to create\nthis object with.",
    "start": "1517210",
    "end": "1523280"
  },
  {
    "text": "So for us, it doesn't\nmake sense to say, create this coordinate object\nwithout actually initializing",
    "start": "1523280",
    "end": "1529840"
  },
  {
    "text": "its x and y values. When we put a coordinate\nobject in a 2D plane, I would like to put\nit in that 2D plane.",
    "start": "1529840",
    "end": "1536080"
  },
  {
    "text": "So it needs an initial\nx and initial y value. So these parameters\nhere will tell",
    "start": "1536080",
    "end": "1541480"
  },
  {
    "text": "Python you need to pass\nin a value for x and y when you create your object. And then the body of this it\nwill have whatever you'd like,",
    "start": "1541480",
    "end": "1551880"
  },
  {
    "text": "whatever code you'd like\nto initialize your object. Yes, question?",
    "start": "1551880",
    "end": "1557100"
  },
  {
    "text": "STUDENT: The way you\nput the underscores, is that part of\nhow you write it? ANA BELL: The underscores\nis part of how you write it.",
    "start": "1557100",
    "end": "1563950"
  },
  {
    "text": "So you have to have __init__. Yeah, it's a special function. We'll talk about\nthem next lecture.",
    "start": "1563950",
    "end": "1569998"
  },
  {
    "text": "It's called a Dunder\nfunction, double underscore function, Dunder. ",
    "start": "1569998",
    "end": "1577000"
  },
  {
    "text": "OK. So the body of this\nfunction can contain a bunch of initialization code. So anything you'd\nlike to initialize",
    "start": "1577000",
    "end": "1582929"
  },
  {
    "text": "when you create an object\nof this type, that's what you stick in here.",
    "start": "1582930",
    "end": "1587940"
  },
  {
    "text": "Usually, most of the\ntime, 99% of the time, you want to initialize the\ndata that makes up your object.",
    "start": "1587940",
    "end": "1595230"
  },
  {
    "text": "So the data we decided\nmakes up our object is how far you are on the\nx-axis and how far away",
    "start": "1595230",
    "end": "1600600"
  },
  {
    "text": "you are on the y-axis. So here, this data that\nI want every single one",
    "start": "1600600",
    "end": "1606269"
  },
  {
    "text": "of my objects to have-- a value for x and\na value for y-- is initialized using self.--",
    "start": "1606270",
    "end": "1613320"
  },
  {
    "text": "so self. a variable\nnamed x and self. a variable named y. And the self.",
    "start": "1613320",
    "end": "1619550"
  },
  {
    "text": "before these variables\ndistinguishes these variables, x and y here, from\nregular variables.",
    "start": "1619550",
    "end": "1626890"
  },
  {
    "text": "If I were to just say x\nequals xval and y equals yval, x and y will just be\nregular variables.",
    "start": "1626890",
    "end": "1632770"
  },
  {
    "text": "As soon as my init\nfunction terminates, those variables are gone. But because I've got\nself.x and self.y,",
    "start": "1632770",
    "end": "1640029"
  },
  {
    "text": "this means that these\nvalues, x and y, will persist throughout\nthe lifetime of my object",
    "start": "1640030",
    "end": "1646270"
  },
  {
    "text": "when I create my actual object. And every single\nobject I create will have their own x and y values.",
    "start": "1646270",
    "end": "1653040"
  },
  {
    "text": "Question? STUDENT: Does it have to\nbe different to the xval?",
    "start": "1653040",
    "end": "1658530"
  },
  {
    "text": "So kind of self.xval or-- ANA BELL: Yeah, good question. Does this self.",
    "start": "1658530",
    "end": "1663690"
  },
  {
    "text": "Thing have to be different? It does not have to be. So you can have self.xval equals\nxval and self.yval equals yval.",
    "start": "1663690",
    "end": "1672360"
  },
  {
    "text": "The reason I did it here is\nto showcase that they actually do not have to be the same. Yeah, they are\ncompletely different.",
    "start": "1672360",
    "end": "1679770"
  },
  {
    "text": "So self.x is\ndifferent than xval. We just happen to be\nassigning this value",
    "start": "1679770",
    "end": "1685230"
  },
  {
    "text": "to be whatever is passed in.  OK.",
    "start": "1685230",
    "end": "1690910"
  },
  {
    "text": "So a little bit of, again, just\nexplaining what the self is",
    "start": "1690910",
    "end": "1696400"
  },
  {
    "text": "in the context of a blueprint--\nso if we think about a blueprint in real life-- so here, I have a\nblueprint for a room",
    "start": "1696400",
    "end": "1702669"
  },
  {
    "text": "that I might want to create. I don't actually have\nthis room created yet. It's just an idea.",
    "start": "1702670",
    "end": "1708250"
  },
  {
    "text": "But what I know is that I'm\ngoing to use this blueprint",
    "start": "1708250",
    "end": "1715630"
  },
  {
    "text": "to have a room that contains\ntwo chairs, a coffee table, and a sofa. So in this blueprint, I\ndon't have actual rooms",
    "start": "1715630",
    "end": "1722440"
  },
  {
    "text": "that I've implemented\nthis thing in. I don't have actual rooms where\nI've put two chairs, a coffee",
    "start": "1722440",
    "end": "1728260"
  },
  {
    "text": "table, and a sofa in. It's just an idea. But self is the way\nthat a blueprint",
    "start": "1728260",
    "end": "1735789"
  },
  {
    "text": "accesses its attributes. So if I say self.coffeetable,\nthat means if, in the future,",
    "start": "1735790",
    "end": "1742840"
  },
  {
    "text": "I have an actual\nroom, self.coffeetable means I'm referring to\nthat room's coffee table.",
    "start": "1742840",
    "end": "1750799"
  },
  {
    "text": "So the self is a\nvariable that we use to refer to data or to\nattributes for a blueprint",
    "start": "1750800",
    "end": "1762200"
  },
  {
    "text": "when I don't have\nactual rooms created. But once I create\ninstances of rooms--",
    "start": "1762200",
    "end": "1767750"
  },
  {
    "text": "so for example here,\nI have something called livingroom created. So I've taken my blueprint. And now, somebody asked\nme to create a room",
    "start": "1767750",
    "end": "1774372"
  },
  {
    "text": "with this blueprint. Now, I no longer\nuse self because I have an actual room in hand.",
    "start": "1774372",
    "end": "1780660"
  },
  {
    "text": "So now, I would\nrefer to coffee table in this living room as\nlivingroom.coffeetable",
    "start": "1780660",
    "end": "1786020"
  },
  {
    "text": "or livingroom's coffeetable,\nno longer self's coffeetable. So self is only used in the\ncontext of my blueprint.",
    "start": "1786020",
    "end": "1794300"
  },
  {
    "text": "And to bring the\nlast point home, the idea that with\nthe blueprint you can create many different\ninstances, well,",
    "start": "1794300",
    "end": "1801139"
  },
  {
    "text": "here's a living room that\nI've applied my blueprint to. And here's another living\nroom, completely different room",
    "start": "1801140",
    "end": "1806938"
  },
  {
    "text": "that somebody asked me to use\nmy blueprint for to create it-- different chairs,\ndifferent coffee tables, different colored things.",
    "start": "1806938",
    "end": "1813320"
  },
  {
    "text": "These are all\ndifferent instances that I used my one template,\nmy one blueprint for the room.",
    "start": "1813320",
    "end": "1820330"
  },
  {
    "text": "So when we're defining a class,\nwe don't have actual objects. Again, that's just a\nreally big idea here.",
    "start": "1820330",
    "end": "1826779"
  },
  {
    "text": "We're just telling Python,\nI'd like to create this object and this is what it looks like. I'm bundling this data with\nthese behaviors together.",
    "start": "1826780",
    "end": "1833110"
  },
  {
    "text": "But I don't have actual objects\nof this type created yet. So let's actually\ncreate some objects.",
    "start": "1833110",
    "end": "1839110"
  },
  {
    "text": "The code that does\nthis is as follows. So I've put the definition\nfor my class, the constructor,",
    "start": "1839110",
    "end": "1847450"
  },
  {
    "text": "the init method for\nmy class up here, just to remind us\nwhat it looks like. And with that code, we can now\nstart to create actual objects",
    "start": "1847450",
    "end": "1855340"
  },
  {
    "text": "that we can manipulate. So when we created\nsomething like L is equal to square\nbracket lists 1 comma 2,",
    "start": "1855340",
    "end": "1861820"
  },
  {
    "text": "now I'm creating these\nactual coordinates in my code using my blueprint. So the way we do that is we\ninvoke the name of our class.",
    "start": "1861820",
    "end": "1870650"
  },
  {
    "text": "So you say coordinate-- that's\nwhat we named it, right? That's our data type. And here, I'm passing in\nevery single parameter",
    "start": "1870650",
    "end": "1876940"
  },
  {
    "text": "except for self. So I initialized a coordinate\nobject using xval and yval.",
    "start": "1876940",
    "end": "1883570"
  },
  {
    "text": "So I need to put\nin two parameters here for xval and yval. And self actually becomes this\nthing that I just created,",
    "start": "1883570",
    "end": "1892780"
  },
  {
    "text": "this object. So coordinate 3 comma\n4 is now an object",
    "start": "1892780",
    "end": "1897880"
  },
  {
    "text": "that's being referenced by\na variable named C, which",
    "start": "1897880",
    "end": "1903030"
  },
  {
    "text": "is why I'm not passing in self. So it's kind of\nweird to think about. But now, I have one\nobject in memory.",
    "start": "1903030",
    "end": "1909390"
  },
  {
    "text": "It's referenced by name C. And on the next line, I have\nanother object in memory.",
    "start": "1909390",
    "end": "1914460"
  },
  {
    "text": "Again, I've invoked the name\nof my class, coordinate. This particular object,\nx value will be 0",
    "start": "1914460",
    "end": "1919799"
  },
  {
    "text": "and y value will be 0,\nso different than the one I just did on the previous line.",
    "start": "1919800",
    "end": "1925350"
  },
  {
    "text": "But it'll have the\nsame structure. So they will both have\nsome x and y-value.",
    "start": "1925350",
    "end": "1930419"
  },
  {
    "text": "They'll just be different\nfrom each other. But they'll both have x\nand they'll both have y. The one I've named down\nhere is going to be origin.",
    "start": "1930420",
    "end": "1939270"
  },
  {
    "text": "So I've got two objects\nof type coordinate. One is referenced\nby C, by name C. And the other one is\nreferenced by name origin.",
    "start": "1939270",
    "end": "1946580"
  },
  {
    "text": "So now that I have\nthese objects in hand, I can access any of\ntheir attributes. And Python will grab\nfor me the attribute",
    "start": "1946580",
    "end": "1954130"
  },
  {
    "text": "of that particular object. So here, I've got this thing\ncalled dot notation, which",
    "start": "1954130",
    "end": "1960539"
  },
  {
    "text": "we've seen before. And I'll explain it again\nin a couple of slides. But the dot notation tells\nPython to access the x data",
    "start": "1960540",
    "end": "1969000"
  },
  {
    "text": "attribute of object C.\nSo this will grab for me",
    "start": "1969000",
    "end": "1974170"
  },
  {
    "text": "the x value of C, 3. And the next line will grab for\nme the x value of origin, 0.",
    "start": "1974170",
    "end": "1983600"
  },
  {
    "text": "And this is all made\npossible because x-- and we could also access y-- x\nand y were defined in the class",
    "start": "1983600",
    "end": "1991940"
  },
  {
    "text": "definition using self. If I didn't use self., those\nwould just be variables.",
    "start": "1991940",
    "end": "1997310"
  },
  {
    "text": "And as soon as I\ncreated my object, they would have gone away\nbecause that function had terminated. But in order to have\nthese variables, x and y,",
    "start": "1997310",
    "end": "2004480"
  },
  {
    "text": "persist throughout the\nlifetime of my object, I've defined them using\nself.x and self.y.",
    "start": "2004480",
    "end": "2010690"
  },
  {
    "text": "So any object I've created\nthat's of type coordinate will have some value for\nx and some value for y.",
    "start": "2010690",
    "end": "2016370"
  },
  {
    "text": "So we can access that value\nthrough this notation. Does that make sense so far?",
    "start": "2016370",
    "end": "2021650"
  },
  {
    "text": "Is that all right?  OK. So we're going to visualize this\nin a slightly different way.",
    "start": "2021650",
    "end": "2029540"
  },
  {
    "text": "So the exact same code\nas on the previous slide, we're now going to do it\nin our little memory type.",
    "start": "2029540",
    "end": "2036410"
  },
  {
    "text": "So here, I have C is equal to\ncoordinate 3, 4, exactly what I had on the previous slide. So in memory, the way\nyou think about it",
    "start": "2036410",
    "end": "2043480"
  },
  {
    "text": "is as we've been thinking\nabout other objects. It's not much different. We have C is our name.",
    "start": "2043480",
    "end": "2050260"
  },
  {
    "text": "And it's bound to an\nobject of type coordinate. It just so happens we\ndefine this object.",
    "start": "2050260",
    "end": "2055750"
  },
  {
    "text": "But it's the same idea. I've got a name\nbound to some object. And this object has its own\nx value and its own y value.",
    "start": "2055750",
    "end": "2064719"
  },
  {
    "text": "So when you evaluate c.x, Python\ngoes into memory and says, hey, what type is C? And it says, oh, it's\na coordinate object.",
    "start": "2064719",
    "end": "2071469"
  },
  {
    "text": "Does coordinate object have\na data attribute named x? Yes, it does, because\nit looks at the init.",
    "start": "2071469",
    "end": "2076540"
  },
  {
    "text": "And then it says,\nwell, what's its value? It's 3. And so it just returns that.",
    "start": "2076540",
    "end": "2082780"
  },
  {
    "text": "And so the next\nthree lines here are",
    "start": "2082780",
    "end": "2088020"
  },
  {
    "text": "slightly different from two\nslides ago, but very similar. a is equal to 0 creates for\nme a variable named a bound",
    "start": "2088020",
    "end": "2096388"
  },
  {
    "text": "to the value 0, just\nto showcase that it's exactly the same as having\na variable named c bound",
    "start": "2096389",
    "end": "2101790"
  },
  {
    "text": "to this object that we created. And then when I say orig equals\nCoordinate(a,a), Python says,",
    "start": "2101790",
    "end": "2109470"
  },
  {
    "text": "all right, well, here's\na name orig, for origin.",
    "start": "2109470",
    "end": "2114570"
  },
  {
    "text": "What is it bound to? Well, it's also bound to an\nobject of type coordinate. And it's an object we defined.",
    "start": "2114570",
    "end": "2121369"
  },
  {
    "text": "So we defined an object\nof type coordinate having an x and y value. So here they are. And they're originally 0.",
    "start": "2121370",
    "end": "2127869"
  },
  {
    "text": "They're set to 0 when\nI created this object. So when I say orig.x,\nPython will look up orig.",
    "start": "2127870",
    "end": "2134140"
  },
  {
    "text": "It's going to say,\nhey, what type are you? Oh, you're a coordinate. Do you have an x value? You do.",
    "start": "2134140",
    "end": "2139642"
  },
  {
    "text": "That's what we\ndefined in the init. Let me grab that value from you. ",
    "start": "2139642",
    "end": "2147660"
  },
  {
    "text": "So we're just manipulating\nobjects in memory. Now that we've written the code\nto work with objects that we",
    "start": "2147660",
    "end": "2153480"
  },
  {
    "text": "created, we're just\ncreating a whole bunch of these objects in memory, and\nthen grabbing their x values. And then we're going\nto get the distance",
    "start": "2153480",
    "end": "2160110"
  },
  {
    "text": "between two objects in a bit. One more way to show you\nthat exact same code is",
    "start": "2160110",
    "end": "2168460"
  },
  {
    "text": "to visualize it. So here is the code,\nthe entire code",
    "start": "2168460",
    "end": "2174100"
  },
  {
    "text": "as you would have it in a file. So you would have\nall this altogether.",
    "start": "2174100",
    "end": "2179920"
  },
  {
    "text": "The gray box is the\ndefinition for my object type. And the blue box is\nme using this object",
    "start": "2179920",
    "end": "2187750"
  },
  {
    "text": "that I just created. I've just separated that\nout just for clarity.",
    "start": "2187750",
    "end": "2192940"
  },
  {
    "text": "So when I have my gray box,\nthere's nothing to display. It just sits in memory.",
    "start": "2192940",
    "end": "2200510"
  },
  {
    "text": "And Python knows of this\ntype of class coordinate that has two data attributes--\nthe things that I've defined using self., x and y.",
    "start": "2200510",
    "end": "2208280"
  },
  {
    "text": "When I create c is equal\nto Coordinate(3,4), visualizing what we're\ntrying to do here, here,",
    "start": "2208280",
    "end": "2213380"
  },
  {
    "text": "I've got this object\nwhose name is c. And it's at 3 comma 4. And then I've got this\nobject named origin.",
    "start": "2213380",
    "end": "2221330"
  },
  {
    "text": "And its x and y\nvalues are 0 comma 0. So because I've\ncreated these objects",
    "start": "2221330",
    "end": "2226880"
  },
  {
    "text": "using the same blueprint,\nthe coordinate blueprint that I've defined\nup in the gray, that means every object that\nI've created, c and origin,",
    "start": "2226880",
    "end": "2234470"
  },
  {
    "text": "has a self.x and self.y value. It just so happens that the\nactual values for x and y",
    "start": "2234470",
    "end": "2241580"
  },
  {
    "text": "are different between\nthese two objects. So when I grab origin.x,\nI'm looking up origin",
    "start": "2241580",
    "end": "2249240"
  },
  {
    "text": "and I'm grabbing its x\nvalue, 0, so just another way to visualize it.",
    "start": "2249240",
    "end": "2255890"
  },
  {
    "text": "OK. Is everyone OK with\nthese data attributes? All right.",
    "start": "2255890",
    "end": "2261390"
  },
  {
    "text": "So now, let's add a method. So a method, remember,\nis just a function",
    "start": "2261390",
    "end": "2267300"
  },
  {
    "text": "that works with an\nobject of this type. So the way that we tell Python\nwe'd like to create a method",
    "start": "2267300",
    "end": "2275820"
  },
  {
    "text": "is by passing in self\nas the first parameter. So let's create this\nfunction named distance.",
    "start": "2275820",
    "end": "2286089"
  },
  {
    "text": "If you look in the actual\nPython code for today, I've got two more\nfunctions-- one to get the x value of this\ncurrent object and one",
    "start": "2286090",
    "end": "2293559"
  },
  {
    "text": "to get the y value. But those are not\nas interesting. This distance one is\ninteresting, though.",
    "start": "2293560",
    "end": "2299540"
  },
  {
    "text": "So I would like to\ncreate this function that only works with an\nobject of type coordinate.",
    "start": "2299540",
    "end": "2305810"
  },
  {
    "text": "So what we've done so far\nis these lines up here. So now, we've got def--\nagain, it's just the function.",
    "start": "2305810",
    "end": "2311000"
  },
  {
    "text": "So we've got def-- name of it, distance,\nand then the parameters.",
    "start": "2311000",
    "end": "2316359"
  },
  {
    "text": "So again, since this\nis a function that only works with an object\nof type coordinate, I need to put self as\nthe first parameter.",
    "start": "2316360",
    "end": "2323840"
  },
  {
    "text": "And this self will help\nus refer to the object when I call the method on it.",
    "start": "2323840",
    "end": "2331190"
  },
  {
    "text": "So if self is the\nfirst parameter, that means that this distance\nmethod will be called on self.",
    "start": "2331190",
    "end": "2339020"
  },
  {
    "text": "So when I have an\nactual object in hand that I'm calling distance\non, the self parameter",
    "start": "2339020",
    "end": "2345680"
  },
  {
    "text": "will take on the value\nthat is that object. We're going to see\nthis in the next slide.",
    "start": "2345680",
    "end": "2350750"
  },
  {
    "text": "So self is the thing that\nI'm calling this function on. And then what other\nparameters do I want to give to this function?",
    "start": "2350750",
    "end": "2358490"
  },
  {
    "text": "Well, I want to find the\ndistance between my self, so this object that I'm\ngoing to call distance on,",
    "start": "2358490",
    "end": "2364160"
  },
  {
    "text": "and another coordinate object. Now, other than maybe\na docstring here",
    "start": "2364160",
    "end": "2372560"
  },
  {
    "text": "that says, hey,\nwarning, other should be an object of type coordinate,\nthere isn't really anything",
    "start": "2372560",
    "end": "2379130"
  },
  {
    "text": "that enforces the type of other\nwhen you make a function call-- or when you make a method call.",
    "start": "2379130",
    "end": "2385460"
  },
  {
    "text": "So you can call\nthis distance method with other being an\ninteger, which is not",
    "start": "2385460",
    "end": "2391610"
  },
  {
    "text": "an object of type coordinate. The code will run,\nbut will immediately crash because of\nwhat's going on inside.",
    "start": "2391610",
    "end": "2399119"
  },
  {
    "text": "So the only way\nthis code will work is if you're calling\nit on an object of type coordinate for the other.",
    "start": "2399120",
    "end": "2406320"
  },
  {
    "text": "So the reason for\nthat is because, well, when we think about grabbing\nthe distance between two objects that are\ncoordinates in a 2D plane,",
    "start": "2406320",
    "end": "2413850"
  },
  {
    "text": "we take the difference\nbetween the x values, square that, take the\ndifference between the y values,",
    "start": "2413850",
    "end": "2419510"
  },
  {
    "text": "square that-- Pythagoras-- add those two\ntogether, take the square root.",
    "start": "2419510",
    "end": "2425240"
  },
  {
    "text": "So if I'm calling\nthis distance method on an object of type\ncoordinate, i.e. self,",
    "start": "2425240",
    "end": "2431350"
  },
  {
    "text": "how do I grab my self's x value? Well, I just say self.x.",
    "start": "2431350",
    "end": "2437150"
  },
  {
    "text": "My x value, what is it? And then I would\nlike to subtract that from the other coordinate\nobject's x value.",
    "start": "2437150",
    "end": "2445753"
  },
  {
    "text": "What's my other\ncoordinate object? It's the thing that I'm\npassing in as a parameter. So grab their x value.",
    "start": "2445753",
    "end": "2452109"
  },
  {
    "text": "So if I take self.x\nminus other.x, Python will grab my\nx value, subtract it from other's x\nvalue, square that.",
    "start": "2452110",
    "end": "2459750"
  },
  {
    "text": "We do the exact\nsame thing with y. We grab my y value, subtract\nit from other's y value,",
    "start": "2459750",
    "end": "2466050"
  },
  {
    "text": "square that. And then the rest\nis just Pythagoras. Add those two and\ntake the square root.",
    "start": "2466050",
    "end": "2471119"
  },
  {
    "text": "And you take it to\nthe power of 1/2. And this function is just\na regular function other",
    "start": "2471120",
    "end": "2476930"
  },
  {
    "text": "than the self being\nthe first parameter and us working with data\nattributes of my self",
    "start": "2476930",
    "end": "2483350"
  },
  {
    "text": "and potentially\nother parameters. But you can see it\nreturns a value.",
    "start": "2483350",
    "end": "2488420"
  },
  {
    "text": "It has the def, the name,\nand things like that. So the way we're going to use\nthis method that we just wrote",
    "start": "2488420",
    "end": "2495830"
  },
  {
    "text": "is using the dot operator. Just like we accessed a\ndata attribute of an object",
    "start": "2495830",
    "end": "2501680"
  },
  {
    "text": "that I created, I can access\na procedural attribute, i.e. a method of an\nobject I just created.",
    "start": "2501680",
    "end": "2508619"
  },
  {
    "text": "So we use the dot\noperator for this. The thing before the\ndot is the object",
    "start": "2508620",
    "end": "2513830"
  },
  {
    "text": "I would like to call\nthe method on dot the name of the method\nI'd like to call.",
    "start": "2513830",
    "end": "2520450"
  },
  {
    "text": "And in parentheses,\nit's just a function. So I need to give it any\nparameters this method expects.",
    "start": "2520450",
    "end": "2526820"
  },
  {
    "text": "Now this, should\nlook very familiar. We introduced dot notation\nwhen we worked with lists.",
    "start": "2526820",
    "end": "2532160"
  },
  {
    "text": "Remember that? And I said, when we\nwork with a list, you, for now, have\nto remember why",
    "start": "2532160",
    "end": "2538620"
  },
  {
    "text": "we use this special way\nof writing this function. But it was the same idea. The thing before\nthe dot was the list",
    "start": "2538620",
    "end": "2545069"
  },
  {
    "text": "I wanted to apply\nthe function to. So my_list is the name\nof a list variable.",
    "start": "2545070",
    "end": "2551070"
  },
  {
    "text": "I wanted to apply\nthe function append. And it happened to take\nan integer as a parameter.",
    "start": "2551070",
    "end": "2557079"
  },
  {
    "text": "And same with sort here\nis also another one. But this one didn't\ntake any parameters. But it's the same\nidea, the dot notation.",
    "start": "2557080",
    "end": "2564040"
  },
  {
    "text": "So in terms of our class, here,\nI've got two corded objects.",
    "start": "2564040",
    "end": "2569580"
  },
  {
    "text": "And I've got a dot\nnotation being used here to find the distance between\none object and another one.",
    "start": "2569580",
    "end": "2576780"
  },
  {
    "text": "So the thing before\nthe dot is an object I would like to use\nthe distance method on. Pick one of them, c.distance,\nthe name of the method I",
    "start": "2576780",
    "end": "2584960"
  },
  {
    "text": "would like to call. And in parentheses, I've got\nanother coordinate object,",
    "start": "2584960",
    "end": "2590299"
  },
  {
    "text": "orig. So here, I am using the class.",
    "start": "2590300",
    "end": "2597270"
  },
  {
    "text": "And I've got actual\nvalues, actual objects that I'm manipulating-- c and orig.",
    "start": "2597270",
    "end": "2603375"
  },
  {
    "text": " So this might look\na little bit weird.",
    "start": "2603375",
    "end": "2609760"
  },
  {
    "text": "But when we actually call\nthe function, remember, we omitted self-- when we omitted--\nsorry, we omitted self",
    "start": "2609760",
    "end": "2616240"
  },
  {
    "text": "when we made this function call. But that's because\nself implicitly becomes the thing before\nthe dot, the thing you're",
    "start": "2616240",
    "end": "2623140"
  },
  {
    "text": "calling this method on. So let's visualize\nthat in our memory.",
    "start": "2623140",
    "end": "2628510"
  },
  {
    "text": "So here, I've got my class\ndefinition for a coordinate. It has some data attributes\nand some procedural attributes.",
    "start": "2628510",
    "end": "2634500"
  },
  {
    "text": "I've got these two\nobjects being created. c is this object of\ntype coordinate. orig is",
    "start": "2634500",
    "end": "2640737"
  },
  {
    "text": "this object of type coordinate. They've got different\nx and y values. But they both have\nsome x and y values.",
    "start": "2640738",
    "end": "2647890"
  },
  {
    "text": "When I make a\nfunction call to c--",
    "start": "2647890",
    "end": "2653089"
  },
  {
    "text": "sorry, a method\ncall on c, Python says, all right, let me look\nat this thing before the dot.",
    "start": "2653090",
    "end": "2659680"
  },
  {
    "text": "What is it? It's an object of\ntype coordinate. ",
    "start": "2659680",
    "end": "2664960"
  },
  {
    "text": "Then it looks at the method\nyou're trying to call, distance. It says, hey, does coordinate\nhave a distance method defined?",
    "start": "2664960",
    "end": "2672070"
  },
  {
    "text": "Why, yes, it does. We just wrote it. And then it says,\nall right, well, let me call this\ndistance method.",
    "start": "2672070",
    "end": "2678080"
  },
  {
    "text": "It's going to set self as\nc, the thing before the dot.",
    "start": "2678080",
    "end": "2684410"
  },
  {
    "text": "And any other parameters will\nbe set in order to whatever is being passed in here. So orig will become\nthe other parameter",
    "start": "2684410",
    "end": "2692990"
  },
  {
    "text": "from my definition\nfor that function. ",
    "start": "2692990",
    "end": "2699540"
  },
  {
    "text": "So this is just the conventional\nway of calling methods. And it's the way\nwe've been working",
    "start": "2699540",
    "end": "2705200"
  },
  {
    "text": "with lists, and dictionaries,\nand things like that. So again, we've got some object,\nthe thing before the dot,",
    "start": "2705200",
    "end": "2712520"
  },
  {
    "text": "some method to run.  And when we call it this\nway, the thing before the dot",
    "start": "2712520",
    "end": "2719320"
  },
  {
    "text": "becomes self in our\nclass definition, in our method definition. And then all the\nother parameters",
    "start": "2719320",
    "end": "2725500"
  },
  {
    "text": "become assigned one by\none, except for self. Now, to demystify\nthis, I would like",
    "start": "2725500",
    "end": "2733220"
  },
  {
    "text": "to show you what this is\nactually equivalent to. So we can run the\nfunction, the method that we defined by actually\npassing in a value for self,",
    "start": "2733220",
    "end": "2743720"
  },
  {
    "text": "if this is clearer to you. So in that case, the thing\nbefore the dot cannot be",
    "start": "2743720",
    "end": "2750410"
  },
  {
    "text": "an object because if it is an\nobject of the type coordinate, then Python will say, well,\nthis is the object I'm running",
    "start": "2750410",
    "end": "2757700"
  },
  {
    "text": "the distance method on. So to demystify this,\nyou can actually invoke the name of\nthe class, the object",
    "start": "2757700",
    "end": "2764990"
  },
  {
    "text": "that you're trying to create,\nthe name, the data type, coordinate. And then Python says,\noh, I see, you're",
    "start": "2764990",
    "end": "2771140"
  },
  {
    "text": "calling the name of the class. It's not an object. So then what do\nyou want from me?",
    "start": "2771140",
    "end": "2778480"
  },
  {
    "text": "The thing after the\ndot says, I would like to run this method on you. But now, it needs all the\nparameters in the parameter",
    "start": "2778480",
    "end": "2786190"
  },
  {
    "text": "list, including self. So here, I would have\nto give it explicitly",
    "start": "2786190",
    "end": "2792780"
  },
  {
    "text": "c comma 0 instead of\njust 0 because the thing before the dot is the name of\nmy class, not an actual object,",
    "start": "2792780",
    "end": "2799440"
  },
  {
    "text": "like it is on this side. So this is actually the\nconventional way to do this. This is the shorthand, the\nPythonic way to do this.",
    "start": "2799440",
    "end": "2805650"
  },
  {
    "text": "But this hopefully\ndemystifies the self deal and the way we actually set that\nfirst parameter to the thing",
    "start": "2805650",
    "end": "2814800"
  },
  {
    "text": "before the dot. All right. Yes, question? STUDENT: When you were\ngoing to do the first one,",
    "start": "2814800",
    "end": "2820289"
  },
  {
    "text": "you had more than one\nparameter [INAUDIBLE] 0 comma-- ANA BELL: Yeah, exactly. If there's more\nparameter, just pop in those extra ones with commas,\njust like a regular function.",
    "start": "2820290",
    "end": "2828830"
  },
  {
    "text": "So this dot operator basically\naccesses either our data, c.x, or our methods,\nc.distance, or whatever,",
    "start": "2828830",
    "end": "2836180"
  },
  {
    "text": "or whatever method name we have. So that's it for\ntoday's lecture. Next lecture, we're going to\nbuild on this coordinate object",
    "start": "2836180",
    "end": "2843350"
  },
  {
    "text": "by creating circles. And then we'll create\nsome fraction objects. And we'll look at\nsome other objects",
    "start": "2843350",
    "end": "2850640"
  },
  {
    "text": "that we can bundle together. OK. ",
    "start": "2850640",
    "end": "2867000"
  }
]