[
  {
    "text": "We only have four more lectures\nleft, and what Professor Demaine",
    "start": "7000",
    "end": "12688"
  },
  {
    "text": "and I have decided to do is give\ntwo series of lectures on sort",
    "start": "12688",
    "end": "18286"
  },
  {
    "text": "of advanced topics.\nSo, today at Wednesday we're going to talk about parallel\nalgorithms, algorithms where you",
    "start": "18287",
    "end": "27949"
  },
  {
    "text": "have more than one processor\nwhacking away on your problem.",
    "start": "27949",
    "end": "34000"
  },
  {
    "text": "And this is a very hot topic\nright now because all of the chip manufacturers are now\nproducing so-called multicore",
    "start": "34000",
    "end": "42691"
  },
  {
    "text": "processors where you have more\nthan one processor per chip. So, knowing something about\nthat is good.",
    "start": "42692",
    "end": "50367"
  },
  {
    "text": "The second topic we're going to\ncover is going to be caching, and how you design algorithms\nfor systems with cache.",
    "start": "50367",
    "end": "60000"
  },
  {
    "text": "Right now, we've sort of\nprogram to everything as if it were just a single level of\nmemory, and for some problems",
    "start": "60000",
    "end": "67990"
  },
  {
    "text": "that's not an entirely realistic\nmodel. You'd like to have some model\nfor how the caching hierarchy",
    "start": "67990",
    "end": "74963"
  },
  {
    "text": "works, and how you can take\nadvantage of that. And there's been a lot of\nresearch in that area as well.",
    "start": "74963",
    "end": "82227"
  },
  {
    "text": "So, both of those actually turn\nout to be my area of research. So, this is actually fun for\nme.",
    "start": "82227",
    "end": "90000"
  },
  {
    "text": "Actually, most of it's fun\nanyway. So, today we'll talk about\nparallel algorithms.",
    "start": "90000",
    "end": "97972"
  },
  {
    "text": "And the particular topic,\nit turns out that there are",
    "start": "97972",
    "end": "103220"
  },
  {
    "text": "lots of models for parallel\nalgorithms, and for parallelism.",
    "start": "103220",
    "end": "109174"
  },
  {
    "text": "And it's one of the reasons\nthat, whereas for serial",
    "start": "109174",
    "end": "114321"
  },
  {
    "text": "algorithms, most people sort of\nhave this basic model that we've",
    "start": "114321",
    "end": "120678"
  },
  {
    "text": "been using.\nIt's sometimes called a random access machine model,\nwhich is what we've been using",
    "start": "120678",
    "end": "128386"
  },
  {
    "text": "to analyze things,\nwhereas in the parallel space, there's just a huge number of\nmodels, and there is no general",
    "start": "128386",
    "end": "135568"
  },
  {
    "text": "agreement on what is the best\nmodel because there are different machines that are made\nwith different configurations,",
    "start": "135568",
    "end": "143150"
  },
  {
    "text": "etc.\nand people haven't, sort of, agreed on,\neven how parallel machines should be organized.\nSo, we're going to deal with a",
    "start": "143150",
    "end": "152937"
  },
  {
    "text": "particular model,\nwhich goes under the rubric of dynamic multithreading,\nwhich is appropriate for the",
    "start": "152937",
    "end": "162534"
  },
  {
    "text": "multicore machines that are now\nbeing built for shared memory",
    "start": "162534",
    "end": "168409"
  },
  {
    "text": "programming.\nIt's not appropriate for what's called distributed memory\nprograms particularly because",
    "start": "168409",
    "end": "177907"
  },
  {
    "text": "the processors are able to\naccess things.",
    "start": "177908",
    "end": "183000"
  },
  {
    "text": "And for those,\nyou need more involved models. And so, let me start just by\ngiving an example of how one",
    "start": "183000",
    "end": "190692"
  },
  {
    "text": "would write something.\nI'm going to give you a program for calculating the nth\nFibonacci number in this model.",
    "start": "190692",
    "end": "198923"
  },
  {
    "text": "This is actually a really bad\nalgorithm that I'm going to give you because it's going to be the\nexponential time algorithm,",
    "start": "198923",
    "end": "208153"
  },
  {
    "text": "whereas we know from week one\nor two that you can calculate the nth Fibonacci number and how\nmuch time?",
    "start": "208153",
    "end": "217000"
  },
  {
    "text": "Log n time.\nSo, this is too exponentials off what you should be able to\nget, OK, two exponentials off.",
    "start": "217000",
    "end": "226428"
  },
  {
    "text": "OK, so here's the code.",
    "start": "226428",
    "end": "229000"
  },
  {
    "text": "OK, so this is essentially the\npseudocode we would write. And let me just explain a\nlittle bit about,",
    "start": "276000",
    "end": "284209"
  },
  {
    "text": "we have a couple of key words\nhere we haven't seen before: in particular,\nspawn and sync.",
    "start": "284209",
    "end": "292000"
  },
  {
    "text": "OK, so spawn,\nthis basically says that the",
    "start": "292000",
    "end": "298295"
  },
  {
    "text": "subroutine that you're calling,\nyou use it as a keyword before",
    "start": "298295",
    "end": "307662"
  },
  {
    "text": "a subroutine,\nthat it can execute at the same",
    "start": "307662",
    "end": "314418"
  },
  {
    "text": "time as its parent.\nSo, here, what we say x equals",
    "start": "314419",
    "end": "321943"
  },
  {
    "text": "spawn of n minus one,\nwe immediately go onto the next",
    "start": "321943",
    "end": "329927"
  },
  {
    "text": "statement.\nAnd now, while we're executing",
    "start": "329928",
    "end": "336720"
  },
  {
    "text": "fib of n minus one,\nwe can also be executing,",
    "start": "336720",
    "end": "342175"
  },
  {
    "text": "now, this statement which\nitself will spawn something off.",
    "start": "342175",
    "end": "349244"
  },
  {
    "text": "OK, and we continue,\nand then we hit the sync",
    "start": "349244",
    "end": "354698"
  },
  {
    "text": "statement.\nAnd, what sync says is, wait until all children are\ndone.",
    "start": "354699",
    "end": "364000"
  },
  {
    "text": "OK, so it says once you get to\nthis point, you've got to wait",
    "start": "364000",
    "end": "369934"
  },
  {
    "text": "until everything here has\ncompleted before you execute the",
    "start": "369934",
    "end": "375570"
  },
  {
    "text": "x plus y because otherwise\nyou're going to try to execute",
    "start": "375571",
    "end": "381109"
  },
  {
    "text": "the calculation of x plus y\nwithout having computed it yet.",
    "start": "381109",
    "end": "386846"
  },
  {
    "text": "OK, so that's the basic\nstructure. What this describes,\nnotice in here we never said",
    "start": "386846",
    "end": "393944"
  },
  {
    "text": "how many processors or anything\nwe are running on. OK, so this actually is just\ndescribing logical parallelism",
    "start": "393944",
    "end": "400509"
  },
  {
    "text": "--",
    "start": "400509",
    "end": "401000"
  },
  {
    "text": "-- not the actual parallelism\nwhen we execute it.",
    "start": "411000",
    "end": "422208"
  },
  {
    "text": "And so, what we need is a\nscheduler, OK,",
    "start": "422208",
    "end": "431314"
  },
  {
    "text": "to determine how to map this\ndynamically, unfolding execution",
    "start": "431314",
    "end": "445324"
  },
  {
    "text": "onto whatever processors you\nhave available.",
    "start": "445324",
    "end": "457000"
  },
  {
    "text": "OK, and so, today actually\nwe're going to talk mostly about",
    "start": "457000",
    "end": "465285"
  },
  {
    "text": "scheduling.\nOK, and then, next time we're going to talk\nabout specific application",
    "start": "465285",
    "end": "476570"
  },
  {
    "text": "algorithms, and how you analyze\nthem.",
    "start": "476571",
    "end": "481714"
  },
  {
    "text": "OK, so you can view the actual\nmultithreaded computation.",
    "start": "481714",
    "end": "491000"
  },
  {
    "text": "If you take a look at the\nparallel instruction stream,",
    "start": "491000",
    "end": "496968"
  },
  {
    "text": "it's just a directed acyclic\ngraph, OK? So, let me show you how that\nworks.",
    "start": "496968",
    "end": "505076"
  },
  {
    "text": "So, normally when we have an\ninstruction stream,",
    "start": "505076",
    "end": "510369"
  },
  {
    "text": "I look at each instruction\nbeing executed.",
    "start": "510369",
    "end": "516000"
  },
  {
    "text": "If I'm in a loop,\nI'm not looking at it as a loop.\nI'm just looking at the sequence of instructions that\nactually executed.",
    "start": "516000",
    "end": "522836"
  },
  {
    "text": "I can do that just as a chain.\nBefore I execute one instruction, I have to execute\nthe one before it.",
    "start": "522837",
    "end": "528515"
  },
  {
    "text": "Before I execute that,\nI've got to execute the one before it.\nAt least, that's the abstraction.\nIf you've studied processors,",
    "start": "528515",
    "end": "535469"
  },
  {
    "text": "you know that there are a lot\nof tricks there in figuring out instruction level parallelism,\nand how you can actually make",
    "start": "535469",
    "end": "542364"
  },
  {
    "text": "that serial instruction stream\nactually execute in parallel. But what we are going to be\nmostly talking about is the",
    "start": "542364",
    "end": "555027"
  },
  {
    "text": "logical parallelism here,\nand what we can do in that",
    "start": "555027",
    "end": "562608"
  },
  {
    "text": "context.\nSo, in this DAG, the vertices are threads,\nwhich are maximal sequences of",
    "start": "562608",
    "end": "574351"
  },
  {
    "text": "instructions not containing --",
    "start": "574351",
    "end": "580000"
  },
  {
    "text": "-- parallel control.\nAnd by parallel control,",
    "start": "587000",
    "end": "592345"
  },
  {
    "text": "I just mean spawn,\nsync, and return from a spawned",
    "start": "592345",
    "end": "598298"
  },
  {
    "text": "procedure.\nSo, let's just mark the, so the vertices are threads.\nSo, let's just mark what the",
    "start": "598299",
    "end": "606844"
  },
  {
    "text": "vertices are here,\nOK, what the threads are here. So, when we enter the function\nhere, we basically execute up to",
    "start": "606844",
    "end": "616256"
  },
  {
    "text": "the point where,\nbasically, here, let's call that thread A where\nwe are just doing a sequential",
    "start": "616256",
    "end": "624128"
  },
  {
    "text": "execution up to either returning\nor starting to do the spawn,",
    "start": "624128",
    "end": "629261"
  },
  {
    "text": "fib of n minus one.\nSo actually, thread A would include the\ncalculation of n minus one right",
    "start": "629262",
    "end": "638633"
  },
  {
    "text": "up to the point where you\nactually make the subroutine",
    "start": "638633",
    "end": "643656"
  },
  {
    "text": "jump.\nThat's thread A. Thread B would be the stuff\nthat you would do,",
    "start": "643656",
    "end": "649910"
  },
  {
    "text": "executing from fib of,\nsorry, B would be from the, right.\nWe'd go up to the spawn.",
    "start": "649911",
    "end": "657398"
  },
  {
    "text": "So, we've done the spawn.\nI'm really looking at this.",
    "start": "657398",
    "end": "663099"
  },
  {
    "text": "So, B would be up to the spawn\nof y. OK, spawn of fib of n minus two\nto compute y,",
    "start": "663099",
    "end": "669241"
  },
  {
    "text": "and then we'd have essentially\nan empty thread. So, I'll ignore that for now,\nbut really then we have after",
    "start": "669241",
    "end": "677327"
  },
  {
    "text": "the sync up to the point that we\nget to the return of x plus y. So basically,\nwe're just looking at maximal",
    "start": "677327",
    "end": "685412"
  },
  {
    "text": "sequences of instructions that\nare all serial. And every time I do a parallel\ninstruction, OK,",
    "start": "685412",
    "end": "694194"
  },
  {
    "text": "spawn or a sync,\nor return from it, that terminates the current\nthread.",
    "start": "694194",
    "end": "700395"
  },
  {
    "text": "OK, so we can look at that as a\nbunch of small threads. So those of you who are\nfamiliar with threads from Java",
    "start": "700395",
    "end": "710243"
  },
  {
    "text": "threads, or POSIX threads,\nOK, so-called P threads, those are sort of heavyweight\nstatic threads.",
    "start": "710243",
    "end": "720000"
  },
  {
    "text": "This is a much lighter weight\nnotion of thread, OK, that we are using in this\nmodel.",
    "start": "720000",
    "end": "728017"
  },
  {
    "text": "OK, so these are the vertices.\nAnd now, let me map out a",
    "start": "728017",
    "end": "733460"
  },
  {
    "text": "little bit how this works,\nso we can where the edges come",
    "start": "733460",
    "end": "739003"
  },
  {
    "text": "from.\nSo, let's imagine we're executing fib of four.\nSo, I'm going to draw a",
    "start": "739003",
    "end": "746227"
  },
  {
    "text": "horizontal oval.\nThat's going to correspond to",
    "start": "746228",
    "end": "751868"
  },
  {
    "text": "the procedure execution.\nAnd, in this procedure, there are essentially three\nthreads.",
    "start": "751868",
    "end": "759977"
  },
  {
    "text": "We start out with A,\nso this is our initial thread is this guy here.\nAnd then, when he executes a",
    "start": "759978",
    "end": "769274"
  },
  {
    "text": "spawn, OK, he's going to execute\na spawn, we are going to create",
    "start": "769274",
    "end": "775505"
  },
  {
    "text": "a new procedure,\nand he's going to execute a new A recursively within that\nprocedure.",
    "start": "775505",
    "end": "785000"
  },
  {
    "text": "But at the same time,\nwe're also going to be, now, aloud to go on and execute\nB in the parent,",
    "start": "785000",
    "end": "794215"
  },
  {
    "text": "we have parallelism here when I\ndo a spawn. OK, and so there's an edge\nhere.",
    "start": "794215",
    "end": "801607"
  },
  {
    "text": "This edge we are going to call\na spawn edge, and this is called a\ncontinuation edge because it's",
    "start": "801607",
    "end": "811024"
  },
  {
    "text": "just simply continuing the\nprocedure execution.",
    "start": "811025",
    "end": "817000"
  },
  {
    "text": "OK, now at this point,\nthis guy, we now have two things that can execute at the\nsame time.",
    "start": "817000",
    "end": "825166"
  },
  {
    "text": "Once I've executed A,\nI now have two things that can execute.\nOK, so this one,",
    "start": "825166",
    "end": "832205"
  },
  {
    "text": "for example,\nmay spawn another thread here. Oh, so this is fib of three,\nright?",
    "start": "832205",
    "end": "839339"
  },
  {
    "text": "And this is now fib of two.\nOK, so he spawns another guy",
    "start": "839339",
    "end": "847406"
  },
  {
    "text": "here, and simultaneously,\nhe can go on and execute B",
    "start": "847406",
    "end": "855431"
  },
  {
    "text": "here, OK, with a continued edge.\nAnd B, in fact,",
    "start": "855431",
    "end": "862827"
  },
  {
    "text": "can also spawn at this point.\nOK, and this is now fib of two",
    "start": "862827",
    "end": "872111"
  },
  {
    "text": "also.\nAnd now, at this point, we can't execute C yet here\neven though I've spawned things",
    "start": "872111",
    "end": "884125"
  },
  {
    "text": "off.\nAnd the reason is because C won't execute until we've\nexecuted the sync statement,",
    "start": "884125",
    "end": "894625"
  },
  {
    "text": "which can't occur until A and B\nhave both been executed,",
    "start": "894625",
    "end": "901500"
  },
  {
    "text": "OK?\nSo, he just sort of sits there",
    "start": "901500",
    "end": "906536"
  },
  {
    "text": "waiting, OK, and a scheduler\ncan't try to schedule him.",
    "start": "906536",
    "end": "912901"
  },
  {
    "text": "Or if he does,\nthen nothing's going to happen",
    "start": "912901",
    "end": "918087"
  },
  {
    "text": "here, OK?\nSo, we can go on. Let's see, here we could call\nfib of one.",
    "start": "918087",
    "end": "925865"
  },
  {
    "text": "The fib of one is only going to\nexecute an A statement here.",
    "start": "925866",
    "end": "934000"
  },
  {
    "text": "OK, of course it can't continue\nhere because A is the only",
    "start": "934000",
    "end": "939896"
  },
  {
    "text": "thing, when I execute fib of\none, if we look at the code,",
    "start": "939896",
    "end": "945689"
  },
  {
    "text": "it never executes B or C.\nOK, and similarly here, this guy here to do fib of one.\nOK, and this guy,",
    "start": "945689",
    "end": "955620"
  },
  {
    "text": "I guess, could execute A here\nof fib of one.",
    "start": "955620",
    "end": "961000"
  },
  {
    "text": "OK, and maybe now this guy\ncalls his another fib of one,",
    "start": "970000",
    "end": "977768"
  },
  {
    "text": "and this guy does another one.\nThis is going to be fib of",
    "start": "977768",
    "end": "985677"
  },
  {
    "text": "zero, right?\nI keep drawing that arrow to",
    "start": "985677",
    "end": "991327"
  },
  {
    "text": "the wrong place,\nOK? And now, once these guys\nreturn, well,",
    "start": "991327",
    "end": "998258"
  },
  {
    "text": "let's say these guys return\nhere, I can now execute C. But I can't execute with them\nuntil both of these guys are",
    "start": "998258",
    "end": "1007946"
  },
  {
    "text": "done, and that guy is done.\nSo, you see that we get a synchronization point here\nbefore executing C.",
    "start": "1007946",
    "end": "1016488"
  },
  {
    "text": "And then, similarly here,\nnow that we've executed this and this, we can now execute\nthis guy here.",
    "start": "1016488",
    "end": "1026000"
  },
  {
    "text": "And so, those returns go to\nthere.",
    "start": "1026000",
    "end": "1031051"
  },
  {
    "text": "Likewise here,\nthis guy can now execute his C,",
    "start": "1031051",
    "end": "1037938"
  },
  {
    "text": "and now once both of those are\ndone, we can execute this guy",
    "start": "1037938",
    "end": "1046969"
  },
  {
    "text": "here.\nAnd then we are done. This is our final thread.\nSo, I should have labeled also",
    "start": "1046969",
    "end": "1061696"
  },
  {
    "text": "that when I get one of these\nguys here, that's a return edge.",
    "start": "1061696",
    "end": "1073088"
  },
  {
    "text": "So, the three types of edges\nare spawn, return,",
    "start": "1073088",
    "end": "1081822"
  },
  {
    "text": "and continuation.\nOK, and by describing it in",
    "start": "1081822",
    "end": "1088018"
  },
  {
    "text": "this way, I essentially get a\nDAG that unfolds. So, rather than having just a\nserial execution trace,",
    "start": "1088018",
    "end": "1095345"
  },
  {
    "text": "I get something where I have\nstill some serial dependencies. There are still some things\nthat have to be done before",
    "start": "1095345",
    "end": "1103794"
  },
  {
    "text": "other things,\nbut there are also things that can be done at the same time.\nSo how are we doing?",
    "start": "1103794",
    "end": "1111571"
  },
  {
    "text": "Yeah, question?\nIs every spawn were covered by a sync, effectively,\nyeah, yeah, effectively.",
    "start": "1111571",
    "end": "1118564"
  },
  {
    "text": "There's actually a null thread\nthat gets executed in there, which I hadn't bothered to\nshow.",
    "start": "1118564",
    "end": "1125557"
  },
  {
    "text": "But yes, basically you would\nthen not have any parallelism, OK, because you would spawn it\noff, but then you're not doing",
    "start": "1125557",
    "end": "1134828"
  },
  {
    "text": "anything in the parent.\nSo it's pretty much the same, yeah, as if it had executed\nserially.",
    "start": "1134828",
    "end": "1143000"
  },
  {
    "text": "Yep, OK, so you can see that\nbasically what we had here in some sense is a DAG embedded in\na tree.",
    "start": "1143000",
    "end": "1149168"
  },
  {
    "text": "OK, so you have a tree that's\nsort of the procedure structure, but in their you have a DAG,\nand that DAG can actually get",
    "start": "1149168",
    "end": "1156831"
  },
  {
    "text": "to be pretty complicated.\nOK, now what I want to do is now that we understand that\nwe've got an underlying DAG,",
    "start": "1156831",
    "end": "1163844"
  },
  {
    "text": "I want to switch to trying to\nstudy the performance attributes of a particular DAG execution,\nso looking at performance",
    "start": "1163844",
    "end": "1171376"
  },
  {
    "text": "measures.",
    "start": "1171376",
    "end": "1173000"
  },
  {
    "text": "So, the notation that we'll use\nis we'll let T_P be the running",
    "start": "1185000",
    "end": "1195689"
  },
  {
    "text": "time of whatever our computation\nis on P processors.",
    "start": "1195689",
    "end": "1205000"
  },
  {
    "text": "OK, so, T_P is,\nhow long does it take to execute this on P processors?\nNow, in general,",
    "start": "1205000",
    "end": "1210638"
  },
  {
    "text": "this is not going to be just a\nparticular number, OK, because I can have\ndifferent scheduling disciplines",
    "start": "1210638",
    "end": "1217486"
  },
  {
    "text": "would lead me to get numbers for\nT_P, OK? But when we talk about the\nrunning time,",
    "start": "1217486",
    "end": "1222789"
  },
  {
    "text": "we'll still sort of use this\nnotation, and I'll try to be careful as we go through to make\nsure that there's no confusion",
    "start": "1222789",
    "end": "1230710"
  },
  {
    "text": "about what that means in\ncontext. There are a couple of them,\nthough, which are fairly well",
    "start": "1230710",
    "end": "1238055"
  },
  {
    "text": "defined.\nOne is based on this. One is T_1.\nSo, T_1 is the running time on",
    "start": "1238055",
    "end": "1243125"
  },
  {
    "text": "one processor.\nOK, so if I were to execute this on one processor,\nyou can imagine it's just as if",
    "start": "1243125",
    "end": "1249933"
  },
  {
    "text": "I had just gotten rid of the\nspawn, and syncs, and everything,\nand just executed it.",
    "start": "1249933",
    "end": "1255799"
  },
  {
    "text": "That will give me a particular\nrunning time. We call that running time on\none processor the work.",
    "start": "1255799",
    "end": "1266322"
  },
  {
    "text": "It's essentially the serial\ntime. OK, so when we talk about the\nwork of a computation,",
    "start": "1266322",
    "end": "1276611"
  },
  {
    "text": "we just been essentially a\nserial running time.",
    "start": "1276611",
    "end": "1282314"
  },
  {
    "text": "OK, the other measure that ends\nup being interesting is what we",
    "start": "1282314",
    "end": "1290000"
  },
  {
    "text": "call T infinity.\nOK, and this is the critical",
    "start": "1290000",
    "end": "1295454"
  },
  {
    "text": "pathlength, OK,\nwhich is essentially the longest path in the DAG.\nSo, for example,",
    "start": "1295454",
    "end": "1306361"
  },
  {
    "text": "if we look at the fib of four\nin this example, it has T of one equal to,\nso let's assume we have unit",
    "start": "1306361",
    "end": "1314702"
  },
  {
    "text": "time threads.\nI know they're not unit time, but let's just imagine,\nfor the purposes of",
    "start": "1314702",
    "end": "1321851"
  },
  {
    "text": "understanding this,\nthat every thread costs me one unit of time to execute.\nWhat would be the work of this",
    "start": "1321851",
    "end": "1332349"
  },
  {
    "text": "particular computation?\n17, right, OK, because all we do is just add\nup three, six,",
    "start": "1332349",
    "end": "1341281"
  },
  {
    "text": "nine, 12, 13,\n14, 15, 16, 17. So, the work is 17 in this case\nif it were unit time threads.",
    "start": "1341281",
    "end": "1352000"
  },
  {
    "text": "In general, you would add up\nhow many instructions or whatever were in there.\nOK, and then T infinity is the",
    "start": "1352000",
    "end": "1359601"
  },
  {
    "text": "longest path.\nSo, this is the longest sequence.\nIt's like, if you had an infinite number of processors,\nyou still can't just do",
    "start": "1359601",
    "end": "1368434"
  },
  {
    "text": "everything at once because some\nthings have to come before other things.\nBut if you had an infinite",
    "start": "1368434",
    "end": "1375384"
  },
  {
    "text": "number of processors,\nas many processors as you want, what's the fastest you could\npossibly execute this?",
    "start": "1375384",
    "end": "1384000"
  },
  {
    "text": "A little trickier.\nSeven? So, what's your seven?\nSo, one, two,",
    "start": "1384000",
    "end": "1392759"
  },
  {
    "text": "three, four,\nfive, six, seven, eight, yeah,\neight is the longest path.",
    "start": "1392759",
    "end": "1402706"
  },
  {
    "text": "So, the work and the critical\npath length, as we'll see,",
    "start": "1402707",
    "end": "1410873"
  },
  {
    "text": "are key attributes of any\ncomputation.",
    "start": "1410873",
    "end": "1418000"
  },
  {
    "text": "And abstractly,\nand this is just for [the",
    "start": "1418000",
    "end": "1424424"
  },
  {
    "text": "notes?], if they're unit time\nthreads.",
    "start": "1424424",
    "end": "1430367"
  },
  {
    "text": "OK, so we can use these two\nmeasures to derive lower bounds",
    "start": "1430367",
    "end": "1439683"
  },
  {
    "text": "on T_P for P that fall between\none and infinity,",
    "start": "1439683",
    "end": "1447233"
  },
  {
    "text": "OK?",
    "start": "1447233",
    "end": "1449000"
  },
  {
    "text": "OK, so the first lower bound we\ncan derive is that T_P has got",
    "start": "1460000",
    "end": "1470414"
  },
  {
    "text": "to be at least T_1 over P.\nOK, so why is that a lower",
    "start": "1470414",
    "end": "1479292"
  },
  {
    "text": "bound?\nYeah? But if I have P processors,\nand, OK, and why would I have",
    "start": "1479292",
    "end": "1497567"
  },
  {
    "text": "this lower bound?\nOK, yeah, you've got the right",
    "start": "1497567",
    "end": "1505167"
  },
  {
    "text": "idea.\nSo, but can we be a little bit more articulate about it?\nSo, that's right,",
    "start": "1505167",
    "end": "1510730"
  },
  {
    "text": "so you want to use all of\nprocessors. If you could use all of\nprocessors, why couldn't I use",
    "start": "1510730",
    "end": "1517158"
  },
  {
    "text": "all the processors,\nthough, and have T_P be less than this?\nWhy does it have to be at least",
    "start": "1517159",
    "end": "1523517"
  },
  {
    "text": "as big as T_1 over P?\nI'm just asking for a little more precision in the answer.\nYou've got exactly the right",
    "start": "1523517",
    "end": "1531174"
  },
  {
    "text": "idea, but I need a little more\nprecision if we're going to persuade the rest of the class\nthat this is the lower bound.",
    "start": "1531174",
    "end": "1541000"
  },
  {
    "text": "Yeah?",
    "start": "1541000",
    "end": "1542000"
  },
  {
    "text": "Yeah, that's another way of\nlooking at it. If you were to serialize the\ncomputation, OK,",
    "start": "1550000",
    "end": "1556268"
  },
  {
    "text": "so whatever things you execute\non each step, you do P of them,\nand so if you serialized it,",
    "start": "1556268",
    "end": "1562757"
  },
  {
    "text": "somehow then it would take you\nP steps to execute one step of a P way, a machine with P\nprocessors.",
    "start": "1562758",
    "end": "1569836"
  },
  {
    "text": "So then, OK,\nyeah? OK, maybe a little more\nprecise. David?",
    "start": "1569837",
    "end": "1575000"
  },
  {
    "text": "Yeah, good, so let me just\nstate this a little bit.",
    "start": "1588000",
    "end": "1593653"
  },
  {
    "text": "So, P processors,\nso what are we relying on? P processors can do,\nat most, P work in one step,",
    "start": "1593653",
    "end": "1603942"
  },
  {
    "text": "right?\nSo, in one step they do, at most P work.\nThey can't do more than P work.",
    "start": "1603942",
    "end": "1612535"
  },
  {
    "text": "And so, if they can do,\nat most P work in one step,",
    "start": "1612535",
    "end": "1618188"
  },
  {
    "text": "then if the number of steps\nwas, in fact, less than T_1 over P,\nthey would be able to do more",
    "start": "1618188",
    "end": "1628364"
  },
  {
    "text": "than T_1 work in P steps.\nAnd, there's only T_1 work to",
    "start": "1628364",
    "end": "1635785"
  },
  {
    "text": "be done.\nOK, I just stated that almost as badly as all the responses I\ngot.",
    "start": "1635785",
    "end": "1642700"
  },
  {
    "text": "[LAUGHTER] OK,\nP processors can do, at most, P work in one step,\nright?",
    "start": "1642700",
    "end": "1650000"
  },
  {
    "text": "So, if there's T_1 work to be\ndone, the number of steps is going to be at least T_1 over P,\nOK?",
    "start": "1650000",
    "end": "1657198"
  },
  {
    "text": "There we go.\nOK, it wasn't that hard. It's just like,\nI've got a certain amount of,",
    "start": "1657198",
    "end": "1663457"
  },
  {
    "text": "I've got T_1 work to do.\nI can knock off, at most, P on every step.\nHow many steps?",
    "start": "1663457",
    "end": "1669716"
  },
  {
    "text": "Just divide.\nOK, so it's going to have to be at least that amount.\nOK, good.",
    "start": "1669716",
    "end": "1675427"
  },
  {
    "text": "The other lower bound is T_P is\ngreater than or equal to T infinity.\nSomebody explain to me why that",
    "start": "1675427",
    "end": "1684544"
  },
  {
    "text": "might be true.\nYeah? Yeah, if you have an infinite\nnumber of processors,",
    "start": "1684545",
    "end": "1690211"
  },
  {
    "text": "you have P.\nso if you could do it in a certain amount of time with P,\nyou can certainly do it in that",
    "start": "1690212",
    "end": "1698260"
  },
  {
    "text": "time with an infinite number of\nprocessors. OK, this is in this model\nwhere, you know,",
    "start": "1698260",
    "end": "1705076"
  },
  {
    "text": "there is lots of stuff that\nthis model doesn't model like communication costs and\ninterference,",
    "start": "1705077",
    "end": "1712632"
  },
  {
    "text": "and all sorts of things.\nBut it is simple model,",
    "start": "1712632",
    "end": "1717805"
  },
  {
    "text": "which actually in practice\nworks out pretty well, OK, you're not going to be able\nto do more work with P",
    "start": "1717806",
    "end": "1725737"
  },
  {
    "text": "processors than you are with an\ninfinite number of processors.",
    "start": "1725738",
    "end": "1731000"
  },
  {
    "text": "OK, so those are helpful bounds\nto understand when we are trying",
    "start": "1746000",
    "end": "1752121"
  },
  {
    "text": "to make something go faster,\nit's nice to know what you",
    "start": "1752121",
    "end": "1757367"
  },
  {
    "text": "could possibly hope to achieve,\nOK, as opposed to beating your",
    "start": "1757368",
    "end": "1763295"
  },
  {
    "text": "head against a wall,\nhow come I can't get it to go much faster?\nMaybe it's because one of these",
    "start": "1763295",
    "end": "1773456"
  },
  {
    "text": "lower bounds is operating.\nOK, well, we're interested in",
    "start": "1773456",
    "end": "1779587"
  },
  {
    "text": "how fast we can go.\nThat's the main reason for",
    "start": "1779587",
    "end": "1784604"
  },
  {
    "text": "using multiple processors is you\nhope you're going to go faster",
    "start": "1784604",
    "end": "1791516"
  },
  {
    "text": "than you could with one\nprocessor. So, we define T_1 over T_P to\nbe the speedup on P processors.",
    "start": "1791516",
    "end": "1803000"
  },
  {
    "text": "OK, so we say,\nhow much faster is it on P",
    "start": "1803000",
    "end": "1809236"
  },
  {
    "text": "processors than on one\nprocessor? OK, that's the speed up.\nIf T_1 over T_P is order P,",
    "start": "1809236",
    "end": "1822177"
  },
  {
    "text": "we say that it's linear\nspeedup. OK, in other words,\nwhy?",
    "start": "1822177",
    "end": "1832000"
  },
  {
    "text": "Because that says that it means\nthat if I've thrown P processors",
    "start": "1832000",
    "end": "1838280"
  },
  {
    "text": "at the job I'm going to get a\nspeedup that's proportional to",
    "start": "1838280",
    "end": "1844161"
  },
  {
    "text": "P.\nOK, so when I throw P processors at the job and I get\nT_P, if that's order P,",
    "start": "1844161",
    "end": "1851838"
  },
  {
    "text": "that means that in some sense\nmy processors each contributed",
    "start": "1851838",
    "end": "1857719"
  },
  {
    "text": "within a constant factor its\nfull measure of support.",
    "start": "1857719",
    "end": "1864000"
  },
  {
    "text": "If this, in fact,\nwere equal to P, we'd call that perfect linear\nspeedup.",
    "start": "1864000",
    "end": "1873627"
  },
  {
    "text": "OK, so but here we're looking\nat giving ourselves,",
    "start": "1873628",
    "end": "1880368"
  },
  {
    "text": "for theoretical purposes,\na little bit of a constant",
    "start": "1880368",
    "end": "1887382"
  },
  {
    "text": "buffer here, perhaps.\nIf T_1 over T_P is greater than",
    "start": "1887382",
    "end": "1894534"
  },
  {
    "text": "P, we call that super linear\nspeedup.",
    "start": "1894535",
    "end": "1901000"
  },
  {
    "text": "OK, so can somebody tell me,\nwhen can I get super linear speedup?",
    "start": "1901000",
    "end": "1906000"
  },
  {
    "text": "When can I get super linear\nspeed up? Never.\nOK, why never?",
    "start": "1916000",
    "end": "1921245"
  },
  {
    "text": "Yeah, if we buy these lower\nbounds, the first lower bound",
    "start": "1921245",
    "end": "1926491"
  },
  {
    "text": "there, it is T_P is greater than\nor equal to T_1 over P.",
    "start": "1926491",
    "end": "1931643"
  },
  {
    "text": "And, if I just take T_1 over\nT_P, that says it's less than or",
    "start": "1931644",
    "end": "1937264"
  },
  {
    "text": "equal to P.\nso, this is never, OK, not possible in this model.\nOK, there are other models",
    "start": "1937264",
    "end": "1945320"
  },
  {
    "text": "where it is possible to get\nsuper linear speed up due to",
    "start": "1945320",
    "end": "1950472"
  },
  {
    "text": "caching effects,\nand things of that nature.",
    "start": "1950473",
    "end": "1956000"
  },
  {
    "text": "But in this simple model that\nwe are dealing with,",
    "start": "1956000",
    "end": "1963700"
  },
  {
    "text": "it's not possible to get super\nlinear speedup.",
    "start": "1963700",
    "end": "1970771"
  },
  {
    "text": "OK, not possible.\nNow, the maximum possible",
    "start": "1970771",
    "end": "1977371"
  },
  {
    "text": "speedup, given some amount of\nwork and critical path length is",
    "start": "1977371",
    "end": "1986957"
  },
  {
    "text": "what?\nWhat's the maximum possible",
    "start": "1986957",
    "end": "1993004"
  },
  {
    "text": "speed up I could get over any\nnumber of processors?",
    "start": "1993004",
    "end": "2000421"
  },
  {
    "text": "What's the maximum I could\npossibly get?",
    "start": "2000421",
    "end": "2006205"
  },
  {
    "text": "No, I'm saying,\nno matter how many processors,",
    "start": "2006205",
    "end": "2012880"
  },
  {
    "text": "what's the most speedup that I\ncould get?",
    "start": "2012880",
    "end": "2020000"
  },
  {
    "text": "T_1 over T infinity,\nbecause this is the, so T_1 over T infinity is the\nmaximum I could possibly get.",
    "start": "2020000",
    "end": "2029919"
  },
  {
    "text": "OK, if I threw an infinite\nnumber of processors at the",
    "start": "2029919",
    "end": "2035283"
  },
  {
    "text": "problem, that's going to give me\nmy biggest speedup.",
    "start": "2035283",
    "end": "2040445"
  },
  {
    "text": "OK, and we call that the\nparallelism. OK, so that's defined to be the\nparallelism.",
    "start": "2040445",
    "end": "2048111"
  },
  {
    "text": "So the parallelism of the\nparticular algorithm is essentially the work divided by\nthe critical path length.",
    "start": "2048111",
    "end": "2056000"
  },
  {
    "text": "Another way of viewing it is\nthat this is the average amount",
    "start": "2056000",
    "end": "2071360"
  },
  {
    "text": "of work that can be done in\nparallel along each step of the",
    "start": "2071360",
    "end": "2086461"
  },
  {
    "text": "critical path.\nAnd, we denote it often by P",
    "start": "2086461",
    "end": "2097396"
  },
  {
    "text": "bar.\nSo, do not get confused. P bar does not have anything to\ndo with P at some level.",
    "start": "2097396",
    "end": "2105969"
  },
  {
    "text": "OK, P is going to be a certain\nnumber of processors you're running.\nP bar is defined just in terms",
    "start": "2105969",
    "end": "2113148"
  },
  {
    "text": "of the computation you're\nexecuting, not in terms of the machine you're running it on.\nOK, it's just the average",
    "start": "2113148",
    "end": "2121385"
  },
  {
    "text": "amount of work that can be done\nin parallel along each step of the critical path.\nOK, questions so far?",
    "start": "2121385",
    "end": "2130000"
  },
  {
    "text": "So mostly we're just doing\ndefinitions so far. OK, now we get into,\nOK, so it's helpful to know",
    "start": "2130000",
    "end": "2137340"
  },
  {
    "text": "what the parallelism is,\nbecause the parallelism is going to, there's no real point\nin trying to get speed up bigger",
    "start": "2137340",
    "end": "2146356"
  },
  {
    "text": "than the parallelism.\nOK, so if you are given a particular computation,\nyou'll be able to say,",
    "start": "2146356",
    "end": "2153617"
  },
  {
    "text": "oh, it doesn't go any faster.\nYou're throwing more processors at it.\nWhy is it that going any",
    "start": "2153617",
    "end": "2163369"
  },
  {
    "text": "faster?\nAnd the answer could be, no more parallelism.\nOK, let's see what I want to,",
    "start": "2163369",
    "end": "2174601"
  },
  {
    "text": "yeah, I think we can raise the\nexample here.",
    "start": "2174602",
    "end": "2180640"
  },
  {
    "text": "We'll talk more about this\nmodel. Mostly, now,\nwe're going to just talk about",
    "start": "2180640",
    "end": "2191030"
  },
  {
    "text": "DAG's.\nSo, we'll talk about the programming model next time.\nSo, let's talk about",
    "start": "2191030",
    "end": "2203357"
  },
  {
    "text": "scheduling.\nThe goal of scheduler is to map the computation to P processors.\nAnd this is typically done by a",
    "start": "2203357",
    "end": "2215735"
  },
  {
    "text": "runtime system,\nwhich, if you will, is an algorithm that is running\nunderneath the language layer",
    "start": "2215735",
    "end": "2226817"
  },
  {
    "text": "that I showed you.\nOK, so the programmer designs",
    "start": "2226817",
    "end": "2232151"
  },
  {
    "text": "an algorithm using spawns,\nand syncs, and so forth. Then, underneath that,\nthere's an algorithm that has",
    "start": "2232151",
    "end": "2239645"
  },
  {
    "text": "to actually map that executing\nprogram onto the processors of the machine as it executes.\nAnd that's the scheduler.",
    "start": "2239645",
    "end": "2247953"
  },
  {
    "text": "OK, so it's done by the\nlanguage runtime system, typically.\nOK, so it turns out that online",
    "start": "2247954",
    "end": "2257114"
  },
  {
    "text": "schedulers, let me just say\nthey're complex.",
    "start": "2257114",
    "end": "2262820"
  },
  {
    "text": "OK, they're not necessarily\neasy things to build.",
    "start": "2262820",
    "end": "2269191"
  },
  {
    "text": "OK, they're not too bad\nactually. But, we are not going to go\nthere because we only have two",
    "start": "2269191",
    "end": "2281003"
  },
  {
    "text": "lectures to do this.\nInstead, we're going to do is",
    "start": "2281003",
    "end": "2287505"
  },
  {
    "text": "we'll illustrate the ideas using\noff-line scheduling.",
    "start": "2287506",
    "end": "2296000"
  },
  {
    "text": "OK, so you'll get an idea out\nof this for what a scheduler does, and it turns out that\ndoing these things online is",
    "start": "2296000",
    "end": "2304615"
  },
  {
    "text": "another level of complexity\nbeyond that. And typically,\nthe online schedulers that are",
    "start": "2304615",
    "end": "2311000"
  },
  {
    "text": "good, these days,\nare randomized schedulers. And they have very strong\nproofs of their ability to",
    "start": "2311000",
    "end": "2322083"
  },
  {
    "text": "perform.\nBut we're not going to go there.\nWe'll keep it simple.",
    "start": "2322083",
    "end": "2330416"
  },
  {
    "text": "And in particular,\nwe're going to look at a",
    "start": "2330416",
    "end": "2336250"
  },
  {
    "text": "particular type of scheduler\ncalled a greedy scheduler.",
    "start": "2336250",
    "end": "2345000"
  },
  {
    "text": "So, if you have a DAG to\nexecute, so the basic rules of the scheduler is you can't\nexecute a node until all of the",
    "start": "2345000",
    "end": "2355122"
  },
  {
    "text": "nodes that precede it in the DAG\nhave executed. OK, so you've got to wait until\neverything is executed.",
    "start": "2355122",
    "end": "2364242"
  },
  {
    "text": "So, a greedy scheduler,\nwhat it says is let's just try to do as much as possible on\nevery step, OK?",
    "start": "2364242",
    "end": "2374000"
  },
  {
    "text": "In other words,\nit says I'm never going to try to guess that it's worthwhile\ndelaying doing something.",
    "start": "2390000",
    "end": "2396556"
  },
  {
    "text": "If I could do something now,\nI'm going to do it. And so, each step is going to\ncorrespond to be one of two",
    "start": "2396556",
    "end": "2408576"
  },
  {
    "text": "types.\nThe first type is what we'll",
    "start": "2408576",
    "end": "2413783"
  },
  {
    "text": "call a complete step.\nAnd this is a step in which",
    "start": "2413783",
    "end": "2421135"
  },
  {
    "text": "there are at least P threads\nready to run.",
    "start": "2421135",
    "end": "2427414"
  },
  {
    "text": "And, I'm executing on P\nprocessors.",
    "start": "2427414",
    "end": "2434000"
  },
  {
    "text": "There are at least P threads\nready to run. So, what's a greedy strategy\nhere?",
    "start": "2434000",
    "end": "2442371"
  },
  {
    "text": "I've got P processors.\nI've got at least P threads.",
    "start": "2442372",
    "end": "2448029"
  },
  {
    "text": "Run any P.\nYeah, first P would be if you had a notion of ordering.\nThat would be perfectly",
    "start": "2448029",
    "end": "2457871"
  },
  {
    "text": "reasonable.\nHere, we are just going to execute any P.\nWe might make a mistake there,",
    "start": "2457872",
    "end": "2467259"
  },
  {
    "text": "because there may be a\nparticular one that if we execute now, that'll enable more\nparallelism later on.",
    "start": "2467259",
    "end": "2474792"
  },
  {
    "text": "We might not execute that one.\nWe don't know. OK, but basically,\nwhat we're going to do is just",
    "start": "2474792",
    "end": "2481722"
  },
  {
    "text": "execute any P willy-nilly.\nSo, there's some, if you will,\nnon-determinism in this step",
    "start": "2481722",
    "end": "2487974"
  },
  {
    "text": "here because which one you\nexecute may or may not be a good choice.\nOK, the second type of step",
    "start": "2487974",
    "end": "2498655"
  },
  {
    "text": "we're going to have is an\nincomplete step.",
    "start": "2498655",
    "end": "2505724"
  },
  {
    "text": "And this is a situation where\nwe have fewer than P threads",
    "start": "2505724",
    "end": "2515551"
  },
  {
    "text": "ready to run.\nSo, what's our strategy there?",
    "start": "2515551",
    "end": "2524000"
  },
  {
    "text": "Execute all of them.\nOK, if it's greedy,",
    "start": "2524000",
    "end": "2530247"
  },
  {
    "text": "no point in not executing.\nOK, so if I've got more than P",
    "start": "2530247",
    "end": "2539218"
  },
  {
    "text": "threads ready to run,\nI execute any P.",
    "start": "2539218",
    "end": "2545145"
  },
  {
    "text": "If I have fewer than P threads\nready to run,",
    "start": "2545145",
    "end": "2552033"
  },
  {
    "text": "we execute all of them.\nSo, it turns out this is a good",
    "start": "2552033",
    "end": "2559702"
  },
  {
    "text": "strategy.\nIt's not a perfect strategy. In fact, the strategy of trying\nto schedule optimally a DAG on P",
    "start": "2559702",
    "end": "2568418"
  },
  {
    "text": "processors is NP complete,\nmeaning it's very difficult. So, those of you going to take\n6.045 or 6.840,",
    "start": "2568418",
    "end": "2577048"
  },
  {
    "text": "I highly recommend these\ncourses, and we'll talk more about that in the last lecture\nas we talked a little bit about",
    "start": "2577048",
    "end": "2586898"
  },
  {
    "text": "what's coming up in the theory\nengineering concentration.",
    "start": "2586898",
    "end": "2593000"
  },
  {
    "text": "You can learn about NP\ncompleteness and about how you show that certain problems,\nthere are no good algorithms",
    "start": "2593000",
    "end": "2599938"
  },
  {
    "text": "for them, OK,\nthat we are aware of, OK, and what exactly that\nmeans. So, it turns out that this type\nof scheduling problem turns out",
    "start": "2599938",
    "end": "2608174"
  },
  {
    "text": "to be a very difficult problem\nto get it optimal. But, there's nice theorem,\ndue independently to Graham and",
    "start": "2608174",
    "end": "2626250"
  },
  {
    "text": "Brent.\nIt says, essentially,",
    "start": "2626250",
    "end": "2633000"
  },
  {
    "text": "a greedy scheduler executes any\ncomputation,",
    "start": "2633000",
    "end": "2645000"
  },
  {
    "text": "G, with work,\nT_1, and critical path length,",
    "start": "2645000",
    "end": "2655305"
  },
  {
    "text": "T infinity in time,\nT_P, less than or equal to T_1",
    "start": "2655305",
    "end": "2667048"
  },
  {
    "text": "over P plus T infinity --",
    "start": "2667049",
    "end": "2674000"
  },
  {
    "text": "-- on a computer with P\nprocessors.",
    "start": "2684000",
    "end": "2689016"
  },
  {
    "text": "OK, so, it says that I can\nachieve T_1 over P plus T",
    "start": "2689016",
    "end": "2696540"
  },
  {
    "text": "infinity.\nSo, what does that say?",
    "start": "2696540",
    "end": "2702000"
  },
  {
    "text": "If we take a look and compare\nthis with our lower bounds on",
    "start": "2702000",
    "end": "2709222"
  },
  {
    "text": "runtime, how efficient is this?\nHow does this compare with the",
    "start": "2709222",
    "end": "2716817"
  },
  {
    "text": "optimal execution?\nYeah, it's two competitive.",
    "start": "2716818",
    "end": "2722422"
  },
  {
    "text": "It's within a factor of two of\noptimal because this is a lower",
    "start": "2722422",
    "end": "2730018"
  },
  {
    "text": "bound and this is a lower bound.\nAnd so, if I take twice the max",
    "start": "2730018",
    "end": "2737546"
  },
  {
    "text": "of these two,\ntwice the maximum of these two, that's going to be bigger than\nthe sum.",
    "start": "2737546",
    "end": "2744283"
  },
  {
    "text": "So, I'm within a factor of two\nof which ever is the stronger, lower bound for any situation.\nSo, this says you get within a",
    "start": "2744283",
    "end": "2754140"
  },
  {
    "text": "factor of two of efficiency of\nscheduling in terms of the runtime on P processors.\nOK, does everybody see that?",
    "start": "2754141",
    "end": "2764000"
  },
  {
    "text": "So, let's prove this theorem.\nIt's quite an elegant theorem.",
    "start": "2764000",
    "end": "2770134"
  },
  {
    "text": "It's not a hard theorem.\nOne of the nice things, by the way, about this week,\nis that nothing is very hard.",
    "start": "2770134",
    "end": "2780948"
  },
  {
    "text": "It just requires you to think\ndifferently. OK, so the proof has to do with\ncounting up how many complete",
    "start": "2780948",
    "end": "2791449"
  },
  {
    "text": "steps we have,\nand how many incomplete steps we have.\nOK, so we'll start with the",
    "start": "2791449",
    "end": "2801836"
  },
  {
    "text": "number of complete steps.\nSo, can somebody tell me what's",
    "start": "2801836",
    "end": "2809794"
  },
  {
    "text": "the largest number of complete\nsteps I could possibly have?",
    "start": "2809794",
    "end": "2818036"
  },
  {
    "text": "Yeah, I heard somebody mumble\nit back there.",
    "start": "2818036",
    "end": "2825000"
  },
  {
    "text": "T_1 over P.\nWhy is that? Yeah, so the number of complete\nsteps is, at most,",
    "start": "2825000",
    "end": "2837303"
  },
  {
    "text": "T_1 over P because why?\nYeah, once you've had this",
    "start": "2837303",
    "end": "2845677"
  },
  {
    "text": "many, you've done T_1 work,\nOK?",
    "start": "2845677",
    "end": "2852000"
  },
  {
    "text": "So, every complete step I'm\ngetting P work done. So, if I did more than T_1 over\nP steps, there would be no more",
    "start": "2852000",
    "end": "2861502"
  },
  {
    "text": "work to be done.\nSo, the number of complete steps can't be bigger than T_1\nover P.",
    "start": "2861502",
    "end": "2869000"
  },
  {
    "text": "OK, so that's this piece.\nOK, now we're going to count up",
    "start": "2890000",
    "end": "2896322"
  },
  {
    "text": "the incomplete steps,\nand show its bounded by T",
    "start": "2896322",
    "end": "2901516"
  },
  {
    "text": "infinity.\nOK, so let's consider an incomplete step.\nAnd, let's see what happens.",
    "start": "2901516",
    "end": "2911000"
  },
  {
    "text": "And, let's let G prime be the\nsubgraph of G that remains to be",
    "start": "2919000",
    "end": "2937638"
  },
  {
    "text": "executed.\nOK, so we'll draw a picture",
    "start": "2937638",
    "end": "2942928"
  },
  {
    "text": "here.\nSo, imagine we have, let's draw it on a new board.",
    "start": "2942928",
    "end": "2947000"
  },
  {
    "text": "So here, we're going to have a\ngraph, our graph,",
    "start": "2966000",
    "end": "2972316"
  },
  {
    "text": "G.\nWe're going to do actually P equals three as our example\nhere.",
    "start": "2972316",
    "end": "2980648"
  },
  {
    "text": "So, imagine that this is the\ngraph, G. And, I'm not showing the\nprocedures here because this",
    "start": "2980648",
    "end": "2992608"
  },
  {
    "text": "actually is a theorem that works\nfor any DAG.",
    "start": "2992608",
    "end": "3000000"
  },
  {
    "text": "And, the procedure outlines are\nnot necessary.",
    "start": "3000000",
    "end": "3009606"
  },
  {
    "text": "All we care about is the\nthreads.",
    "start": "3009606",
    "end": "3016438"
  },
  {
    "text": "I missed one.\nOK, so imagine that's my DAG,",
    "start": "3016438",
    "end": "3025404"
  },
  {
    "text": "G, and imagine that I have\nexecuted up to this point.",
    "start": "3025404",
    "end": "3038000"
  },
  {
    "text": "Which ones have I executed?\nYeah, I've executed these guys.",
    "start": "3038000",
    "end": "3047666"
  },
  {
    "text": "So, the things that are in G\nprime are just the things that",
    "start": "3047666",
    "end": "3057333"
  },
  {
    "text": "have yet to be executed.\nAnd these guys are the ones",
    "start": "3057333",
    "end": "3064509"
  },
  {
    "text": "that are already executed.\nAnd, we'll imagine that all of",
    "start": "3064509",
    "end": "3069715"
  },
  {
    "text": "them are unit time threads\nwithout loss of generality. The theorem would go through,\neven if each of these had a",
    "start": "3069715",
    "end": "3079847"
  },
  {
    "text": "particular time associated with\nit. The same scheduling algorithm\nwill work just fine.",
    "start": "3079847",
    "end": "3087563"
  },
  {
    "text": "So, how can I characterize the\nthreads that are ready to be",
    "start": "3087563",
    "end": "3092954"
  },
  {
    "text": "executed?\nWhich are the threads that are",
    "start": "3092954",
    "end": "3098176"
  },
  {
    "text": "ready to be executed here?\nLet's just see. So, that one?\nNo, that's not ready to be",
    "start": "3098176",
    "end": "3106647"
  },
  {
    "text": "executed.\nWhy? Because it's got a predecessor\nhere, this guy.",
    "start": "3106647",
    "end": "3112787"
  },
  {
    "text": "OK, so this guy is ready to be\nexecuted, and this guy is ready",
    "start": "3112788",
    "end": "3119247"
  },
  {
    "text": "to be executed.\nOK, so those two threads are",
    "start": "3119247",
    "end": "3124519"
  },
  {
    "text": "ready to be, how can I\ncharacterize this? What's their property?\nWhat's a graph theoretic",
    "start": "3124519",
    "end": "3132260"
  },
  {
    "text": "property in G prime that tells\nme whether or not something is",
    "start": "3132260",
    "end": "3137659"
  },
  {
    "text": "ready to be executed?\nIt has no predecessor, but what's another way of\nsaying that?",
    "start": "3137659",
    "end": "3144860"
  },
  {
    "text": "It's got no predecessor in G\nprime. What does it mean for a node\nnot to have a predecessor in a",
    "start": "3144860",
    "end": "3158810"
  },
  {
    "text": "graph?\nIts in degree is zero, right?\nSame thing.",
    "start": "3158810",
    "end": "3166422"
  },
  {
    "text": "OK, the threads with in degree,\nzero and G prime are the ones",
    "start": "3166422",
    "end": "3176572"
  },
  {
    "text": "that are ready to be executed.\nOK, and if it's incomplete",
    "start": "3176572",
    "end": "3186127"
  },
  {
    "text": "step, what do I do?\nI'm going to execute says,",
    "start": "3186127",
    "end": "3191539"
  },
  {
    "text": "if it's an incomplete step,\nI execute all of them.",
    "start": "3191539",
    "end": "3197432"
  },
  {
    "text": "OK, so I execute all of these.\nOK, now I execute all of the in",
    "start": "3197432",
    "end": "3204768"
  },
  {
    "text": "degree zero threads,\nwhat happens to the critical",
    "start": "3204769",
    "end": "3210542"
  },
  {
    "text": "path length of the graph that\nremains to be executed?",
    "start": "3210542",
    "end": "3218000"
  },
  {
    "text": "It decreases by one.\nOK, so the critical path length",
    "start": "3218000",
    "end": "3228017"
  },
  {
    "text": "of what remains to be executed,\nG prime, is reduced by one.",
    "start": "3228017",
    "end": "3240000"
  },
  {
    "text": "So, what's left to be executed\non every incomplete step, what's left to be executed\nalways reduces by one.",
    "start": "3240000",
    "end": "3248158"
  },
  {
    "text": "Notice the next step here is\ngoing to be a complete step, because I've got four things\nthat are ready to go.",
    "start": "3248158",
    "end": "3256475"
  },
  {
    "text": "And, I can execute them in such\na way that the critical path length doesn't get reduced on\nthat step.",
    "start": "3256475",
    "end": "3264237"
  },
  {
    "text": "OK, but if I had to execute all\nof them, then it does reduce the critical path length.\nNow, of course,",
    "start": "3264237",
    "end": "3273721"
  },
  {
    "text": "both could happen,\nOK, at the same time, OK, but any time that I have an\nincomplete step,",
    "start": "3273721",
    "end": "3283590"
  },
  {
    "text": "I'm guaranteed to reduce the\ncritical path length by one.",
    "start": "3283590",
    "end": "3290016"
  },
  {
    "text": "OK, so that implies that the\nnumber of incomplete steps is,",
    "start": "3290016",
    "end": "3296672"
  },
  {
    "text": "at most, T infinity.\nAnd so, therefore, T of P is, at most,\nthe number of complete steps",
    "start": "3296672",
    "end": "3305635"
  },
  {
    "text": "plus the number of incomplete\nsteps. And we get our bound.\nThis is sort of an amortized",
    "start": "3305635",
    "end": "3312919"
  },
  {
    "text": "argument if you want to think of\nit that way, OK, that at every step I'm either\namortizing the step against the",
    "start": "3312919",
    "end": "3322283"
  },
  {
    "text": "work, or I'm amortizing it\nagainst the critical path length, or possibly both.\nBut I'm at least doing one of",
    "start": "3322283",
    "end": "3332298"
  },
  {
    "text": "those for every step,\nOK, and so, in the end, I just have to add up the two\ncontributions.",
    "start": "3332298",
    "end": "3339192"
  },
  {
    "text": "Any questions about that?\nSo this, by the way, is the fundamental theorem of\nall scheduling.",
    "start": "3339193",
    "end": "3346247"
  },
  {
    "text": "If ever you study anything\nhaving to do with scheduling, this basic result is sort of\nthe foundation of a huge number",
    "start": "3346247",
    "end": "3355283"
  },
  {
    "text": "of things.\nAnd then what people do is they gussy it up, like,\nlet's do this online,",
    "start": "3355283",
    "end": "3361623"
  },
  {
    "text": "OK, with a scheduler,\netc., that everybody's trying to match these bounds,\nOK, of what an omniscient",
    "start": "3361623",
    "end": "3369311"
  },
  {
    "text": "greedy scheduler would achieve,\nOK, and there are all kinds of other things.\nBut this is sort of the basic",
    "start": "3369311",
    "end": "3379939"
  },
  {
    "text": "theorem that just pervades the\nwhole area of scheduling.",
    "start": "3379939",
    "end": "3385513"
  },
  {
    "text": "OK, let's do a quick corollary.\nI'm not going to erase those.",
    "start": "3385513",
    "end": "3392000"
  },
  {
    "text": "Those are just too important.\nI want to erase those.",
    "start": "3392000",
    "end": "3397292"
  },
  {
    "text": "Let's not erase those.\nI want to erase that either.",
    "start": "3397292",
    "end": "3402481"
  },
  {
    "text": "We're going to go back to the\ntop. Actually, we'll put the\ncorollary here because that's",
    "start": "3402481",
    "end": "3411301"
  },
  {
    "text": "just one line.\nOK.",
    "start": "3411301",
    "end": "3414000"
  },
  {
    "text": "The corollary says you get\nlinear speed up if the number of",
    "start": "3431000",
    "end": "3437996"
  },
  {
    "text": "processors that you allocate,\nthat you run your job on is",
    "start": "3437996",
    "end": "3444750"
  },
  {
    "text": "order, the parallelism.\nOK, so greedy scheduler gives",
    "start": "3444750",
    "end": "3451023"
  },
  {
    "text": "you linear speed up if you're\nrunning on essentially",
    "start": "3451023",
    "end": "3457175"
  },
  {
    "text": "parallelism or fewer processors.\nOK, so let's see why that is.",
    "start": "3457175",
    "end": "3466989"
  },
  {
    "text": "And I hope I'll fit this,\nOK? So, P bar is T_1 over T\ninfinity.",
    "start": "3466989",
    "end": "3478000"
  },
  {
    "text": "And that implies that if P\nequals order T_1 over T",
    "start": "3478000",
    "end": "3484258"
  },
  {
    "text": "infinity, then that says just\nbringing those around,",
    "start": "3484258",
    "end": "3490772"
  },
  {
    "text": "T infinity is order T_1 over P.\nSo, everybody with me?",
    "start": "3490772",
    "end": "3497542"
  },
  {
    "text": "It's just algebra.\nSo, it says this is the",
    "start": "3497542",
    "end": "3502778"
  },
  {
    "text": "definition of parallelism,\nT_1 over T infinity,",
    "start": "3502778",
    "end": "3508654"
  },
  {
    "text": "and so, if P is order\nparallelism, then it's order T_1",
    "start": "3508654",
    "end": "3515423"
  },
  {
    "text": "over T infinity.\nAnd now, just bring it around.",
    "start": "3515423",
    "end": "3523669"
  },
  {
    "text": "It says T infinity is order T_1\nover P.",
    "start": "3523669",
    "end": "3529584"
  },
  {
    "text": "So, that says T infinity is\norder T_1 over P.",
    "start": "3529584",
    "end": "3536433"
  },
  {
    "text": "OK, and so, therefore,\ncontinue the proof here,",
    "start": "3536433",
    "end": "3543594"
  },
  {
    "text": "thus T_P is at most T_1 over P\nplus T infinity.",
    "start": "3543594",
    "end": "3552000"
  },
  {
    "text": "Well, if this is order T_1 over\nP, the whole thing is order T_1",
    "start": "3552000",
    "end": "3563049"
  },
  {
    "text": "over P.\nOK, and so, now I have T_P is",
    "start": "3563049",
    "end": "3569465"
  },
  {
    "text": "order T_1 over P,\nand what we need is to compute",
    "start": "3569465",
    "end": "3577841"
  },
  {
    "text": "T_1 over T_P,\nand that's going to be order",
    "start": "3577841",
    "end": "3585148"
  },
  {
    "text": "T_P.\nOK? Does everybody see that?\nSo what that says is that if I",
    "start": "3585148",
    "end": "3591652"
  },
  {
    "text": "have a certain amount of\nparallelism, if I run essentially on fewer processors\nthan that parallelism,",
    "start": "3591652",
    "end": "3598280"
  },
  {
    "text": "I get linear speed up if I use\ngreedy scheduling. OK, if I run on more processors\nthan the parallelism,",
    "start": "3598280",
    "end": "3605077"
  },
  {
    "text": "in some sense I'm being\nwasteful because I can't possibly get enough speed up to\njustify those extra processors.",
    "start": "3605077",
    "end": "3611528"
  },
  {
    "text": "So, understanding parallelism\nof a job says that's sort of a limit on the number of\nprocessors I want to have.",
    "start": "3611529",
    "end": "3617862"
  },
  {
    "text": "And, in fact,\nI can achieve that. Question?",
    "start": "3617862",
    "end": "3621000"
  },
  {
    "text": "Yeah, really,\nin some sense, this is saying it should be\nomega P. Yeah, so that's fine.\nIt's a question of,",
    "start": "3639000",
    "end": "3646586"
  },
  {
    "text": "so ask again.",
    "start": "3646586",
    "end": "3648000"
  },
  {
    "text": "No, no, it's only if it's\nbounded above by a constant. T_1 and T infinity aren't\nconstants.",
    "start": "3663000",
    "end": "3668804"
  },
  {
    "text": "They're variables in this.\nSo, we are doing multivariable asymptotic analysis.\nSo, any of these things can be",
    "start": "3668804",
    "end": "3675795"
  },
  {
    "text": "a function of anything else,\nand can be growing as much as we want.\nSo, the fact that we say we are",
    "start": "3675795",
    "end": "3682127"
  },
  {
    "text": "given it for a particular thing,\nwe're really not given that number.\nWe're given a whole class of",
    "start": "3682127",
    "end": "3688327"
  },
  {
    "text": "DAG's or whatever of various\nsizes is really what we're talking about.\nSo, I can look at the growth.",
    "start": "3688327",
    "end": "3697787"
  },
  {
    "text": "Here, where it's talking about\nthe growth of the parallelism,",
    "start": "3697788",
    "end": "3705626"
  },
  {
    "text": "sorry, the growth of the\nruntime T_P as a function of T_1",
    "start": "3705626",
    "end": "3712941"
  },
  {
    "text": "and T infinity.\nSo, I am talking about things",
    "start": "3712941",
    "end": "3718689"
  },
  {
    "text": "that are growing here,\nOK? OK, so let's put this to work,\nOK?",
    "start": "3718689",
    "end": "3726018"
  },
  {
    "text": "And, in fact,\nso now I'm going to go back to here.\nNow I'm going to tell you about",
    "start": "3726018",
    "end": "3733243"
  },
  {
    "text": "a little bit of my own research,\nand how we use this in some of",
    "start": "3733243",
    "end": "3738913"
  },
  {
    "text": "the work that we did.\nOK, so we've developed a dynamic multithreaded language\ncalled Cilk, spelled with a C",
    "start": "3738914",
    "end": "3748426"
  },
  {
    "text": "because it's based on the\nlanguage, C. And, it's not an acronym\nbecause silk is like nice",
    "start": "3748426",
    "end": "3759837"
  },
  {
    "text": "threads, OK, although at one\npoint my students had a",
    "start": "3759837",
    "end": "3766953"
  },
  {
    "text": "competition for what the acronym\nsilk could mean.",
    "start": "3766953",
    "end": "3773651"
  },
  {
    "text": "The winner, turns out,\nwas Charles' Idiotic Linguistic",
    "start": "3773651",
    "end": "3781046"
  },
  {
    "text": "Kluge.\nSo anyway, if you want to take",
    "start": "3781046",
    "end": "3786213"
  },
  {
    "text": "a look at it,\nyou can find some stuff on it here.\nOK,",
    "start": "3786214",
    "end": "3792000"
  },
  {
    "text": "OK, and what it uses is\nactually one of these more",
    "start": "3800000",
    "end": "3808412"
  },
  {
    "text": "complicated schedulers.\nIt's a randomized online",
    "start": "3808412",
    "end": "3816480"
  },
  {
    "text": "scheduler, OK,\nand if you look at its expected",
    "start": "3816480",
    "end": "3824206"
  },
  {
    "text": "runtime on P processors,\nit gets effectively T_1 over P",
    "start": "3824206",
    "end": "3833476"
  },
  {
    "text": "plus O of T infinity provably.\nOK, and empirically,",
    "start": "3833476",
    "end": "3841428"
  },
  {
    "text": "if you actually look at what\nkind of runtimes you get to find out what's hidden in the big O\nthere, it turns out,",
    "start": "3841428",
    "end": "3849285"
  },
  {
    "text": "in fact, it's T_1 over P plus T\ninfinity with the constants here being very close to one\nempirically.",
    "start": "3849285",
    "end": "3856285"
  },
  {
    "text": "So, no guarantees,\nbut this turns out to be a pretty good bound.\nSometimes, you see a",
    "start": "3856285",
    "end": "3862142"
  },
  {
    "text": "coefficient on T infinity that's\nup maybe close to four or something.\nBut generally,",
    "start": "3862142",
    "end": "3869385"
  },
  {
    "text": "you don't see something that's\nmuch bigger than that.",
    "start": "3869385",
    "end": "3874533"
  },
  {
    "text": "And mostly, it tends to be\naround, if you do a linear",
    "start": "3874533",
    "end": "3879680"
  },
  {
    "text": "regression curve fit,\nyou get that the constant here",
    "start": "3879680",
    "end": "3884729"
  },
  {
    "text": "is close to one.\nAnd so, with this, you get near perfect if you use\nthis formula as a model for your",
    "start": "3884729",
    "end": "3894331"
  },
  {
    "text": "runtime.\nYou get near perfect linear speed up if the number of\nprocessors you're running on is",
    "start": "3894331",
    "end": "3903338"
  },
  {
    "text": "much less than your average\nparallelism, which, of course, is the same thing as\nif T infinity is much less than",
    "start": "3903339",
    "end": "3914030"
  },
  {
    "text": "T_1 over P.\nSo, what happens here is that",
    "start": "3914030",
    "end": "3919481"
  },
  {
    "text": "when P is much less than P\ninfinity, that is, T infinity is much less than\nT_1 over P, this term ceases to",
    "start": "3919481",
    "end": "3928297"
  },
  {
    "text": "matter very much,\nand you get very good speedup, OK, in fact,\nalmost perfect speedup.",
    "start": "3928297",
    "end": "3936000"
  },
  {
    "text": "So, each processor gives you\nanother processor's work as long",
    "start": "3936000",
    "end": "3942357"
  },
  {
    "text": "as you are the range where the\nnumber of processors is much",
    "start": "3942357",
    "end": "3948503"
  },
  {
    "text": "less than the number of\nparallelism. Now, with this language many\nyears ago, which seems now like",
    "start": "3948503",
    "end": "3958463"
  },
  {
    "text": "many years ago,\nOK, it turned out we competed. We built a bunch of chess\nprograms.",
    "start": "3958463",
    "end": "3968000"
  },
  {
    "text": "And, among our programs were\nStarsocrates, and Cilkchess,\nand we also had several others.",
    "start": "3968000",
    "end": "3976312"
  },
  {
    "text": "And these were,\nI would call them, world-class.\nIn particular,",
    "start": "3976312",
    "end": "3982014"
  },
  {
    "text": "we tied for first in the 1995\nWorld Computer Chess Championship in Hong Kong,\nand then we had a playoff and",
    "start": "3982014",
    "end": "3992066"
  },
  {
    "text": "we lost.\nIt was really a shame. We almost won,\nrunning on a big parallel",
    "start": "3992066",
    "end": "3999157"
  },
  {
    "text": "machine.\nThat was, incidentally, some of you may know about the\nDeep Blue chess playing program.",
    "start": "3999157",
    "end": "4007020"
  },
  {
    "text": "That was the last time before\nthey faced then world champion Kasparov that they competed\nagainst programs.",
    "start": "4007020",
    "end": "4015728"
  },
  {
    "text": "They tied for third in that\ntournament. OK, so we actually out-placed\nthem.",
    "start": "4015728",
    "end": "4023000"
  },
  {
    "text": "However, in the head-to-head\ncompetition, we lost to them. So we had one loss in the\ntournament up to the point of",
    "start": "4023000",
    "end": "4031099"
  },
  {
    "text": "the finals.\nThey had a loss and a draw. Most people aren't aware that\nDeep Blue, in fact,",
    "start": "4031099",
    "end": "4037375"
  },
  {
    "text": "was not the reigning World\nComputer Chess Championship when they faced Kasparov.\nThe reason that they faced",
    "start": "4037375",
    "end": "4044963"
  },
  {
    "text": "Kasparov was because IBM was\nwilling to put up the money.",
    "start": "4044964",
    "end": "4050000"
  },
  {
    "text": "OK, so we developed these chess\nprograms, and the way we",
    "start": "4050000",
    "end": "4058030"
  },
  {
    "text": "developed them,\nlet me in particular talk about",
    "start": "4058030",
    "end": "4064747"
  },
  {
    "text": "Starsocrates.\nWe had this interesting anomaly",
    "start": "4064747",
    "end": "4071172"
  },
  {
    "text": "come up.\nWe were running on a 32 processor computer at MIT for\ndevelopment.",
    "start": "4071172",
    "end": "4083000"
  },
  {
    "text": "And, we had access to a 512\nprocessor computer for the tournament at NCSA at the\nUniversity of Illinois.",
    "start": "4083000",
    "end": "4091505"
  },
  {
    "text": "So, we had this big machine.\nOf course, they didn't want to give it to us very much,\nbut we have the same machine,",
    "start": "4091505",
    "end": "4100852"
  },
  {
    "text": "just a small one,\nat MIT. So, we would develop on this,\nand occasionally we'd be able",
    "start": "4100852",
    "end": "4107756"
  },
  {
    "text": "to run on this,\nand this was what we were developing for on our processor.\nSo, let me show you sort of the",
    "start": "4107757",
    "end": "4117718"
  },
  {
    "text": "anomaly that came up,\nOK?",
    "start": "4117719",
    "end": "4120000"
  },
  {
    "text": "So, we had a version of a\nprogram that I'll call the",
    "start": "4128000",
    "end": "4135974"
  },
  {
    "text": "original program,\nOK, and we had an optimized",
    "start": "4135974",
    "end": "4142854"
  },
  {
    "text": "program that included some new\nfeatures that were supposed to",
    "start": "4142854",
    "end": "4152235"
  },
  {
    "text": "make the program go faster.\nAnd so, we timed it on our 32",
    "start": "4152236",
    "end": "4160991"
  },
  {
    "text": "processor machine.\nAnd, it took us 65 seconds to",
    "start": "4160992",
    "end": "4168340"
  },
  {
    "text": "run it.\nOK, and then we timed this new",
    "start": "4168341",
    "end": "4173838"
  },
  {
    "text": "program.\nSo, I'll call that T prime of sub 32 on our 32 processor\nmachine, and it ran and 40",
    "start": "4173839",
    "end": "4182260"
  },
  {
    "text": "seconds to do this particular\nbenchmark. Now, let me just say,\nI've lied about the actual",
    "start": "4182261",
    "end": "4190400"
  },
  {
    "text": "numbers here to make the\ncalculations easy. But, the same idea happened.\nJust the numbers were messier.",
    "start": "4190400",
    "end": "4201000"
  },
  {
    "text": "OK, so this looks like a\nsignificant improvement in",
    "start": "4201000",
    "end": "4207275"
  },
  {
    "text": "runtime, but we rejected the\noptimization.",
    "start": "4207275",
    "end": "4212421"
  },
  {
    "text": "OK, and the reason we rejected\nit is because we understood",
    "start": "4212421",
    "end": "4219573"
  },
  {
    "text": "about the issues of work and\ncritical path.",
    "start": "4219574",
    "end": "4224846"
  },
  {
    "text": "So, let me show you the\nanalysis that we did,",
    "start": "4224846",
    "end": "4230368"
  },
  {
    "text": "OK?\nSo the analysis, it turns out,\nif we looked at our",
    "start": "4230368",
    "end": "4237441"
  },
  {
    "text": "instrumentation,\nthe work in this case was 2,048.\nAnd, the critical path was one",
    "start": "4237441",
    "end": "4246170"
  },
  {
    "text": "second, which,\nover here with the optimized program, the work was,\nin fact, 1,024.",
    "start": "4246170",
    "end": "4255125"
  },
  {
    "text": "But the critical path was\neight. So, if we plug into our simple\nmodel here, the one I have up",
    "start": "4255125",
    "end": "4267375"
  },
  {
    "text": "there with the approximation\nthere, I have T_32 is equal to",
    "start": "4267375",
    "end": "4274625"
  },
  {
    "text": "T_1 over 32 plus T infinity,\nand that's equal to,",
    "start": "4274625",
    "end": "4280625"
  },
  {
    "text": "well, the work is 2,048 divided\nby 32. What's that?\n64, good, plus the critical",
    "start": "4280625",
    "end": "4290125"
  },
  {
    "text": "path, one, that's 65.\nSo, that checks out with what",
    "start": "4290125",
    "end": "4297625"
  },
  {
    "text": "we saw.\nOK, in fact, we did that,\nand it checked out.",
    "start": "4297625",
    "end": "4303875"
  },
  {
    "text": "OK, it was very close.\nOK, over here, T prime of 32 is T prime,\none over 32 plus T infinity",
    "start": "4303875",
    "end": "4314875"
  },
  {
    "text": "prime, and that's equal to 1,024\ndivided by 32 is 32 plus eight,",
    "start": "4314875",
    "end": "4322750"
  },
  {
    "text": "the critical path here.\nThat's 40.",
    "start": "4322750",
    "end": "4327981"
  },
  {
    "text": "So, that checked out too.\nSo, now what we did is we said",
    "start": "4327981",
    "end": "4333377"
  },
  {
    "text": "is we said, OK,\nlet's extrapolate to our big machine.\nHow fast are these things going",
    "start": "4333377",
    "end": "4341422"
  },
  {
    "text": "to run on our big machine?\nWell, for that, we want T of 512.\nAnd, that's equal to T_1 over",
    "start": "4341422",
    "end": "4349958"
  },
  {
    "text": "512 plus T infinity.\nAnd so, what's 2,048 divided by",
    "start": "4349958",
    "end": "4356913"
  },
  {
    "text": "512?\nIt's four, plus T infinity is one.\nThat's equal to five.",
    "start": "4356913",
    "end": "4364235"
  },
  {
    "text": "So, go quite a bit faster on\nthis. But here, T prime of 512 is\nequal to T one prime over 512",
    "start": "4364235",
    "end": "4375470"
  },
  {
    "text": "plus T infinity prime is equal\nto, well, 1,024 plus divided by",
    "start": "4375471",
    "end": "4383172"
  },
  {
    "text": "512 is two plus critical path of\neight, that's ten.",
    "start": "4383172",
    "end": "4391000"
  },
  {
    "text": "OK, and so, you see that on the\nbig machine, we would have been running twice as slow had we\nadopted that,",
    "start": "4391000",
    "end": "4399163"
  },
  {
    "text": "quote, \"optimization\",\nOK, because we had run out of parallelism, and this was making\nthe path longer.",
    "start": "4399163",
    "end": "4407009"
  },
  {
    "text": "We needed to have a way of\ndoing it where we could reduce the work.\nYeah, it's good to reduce the",
    "start": "4407009",
    "end": "4414459"
  },
  {
    "text": "work but not as the critical\npath ends up getting rid of the parallels that we hope to be\nable to use during the runtime.",
    "start": "4414459",
    "end": "4425000"
  },
  {
    "text": "So, it's twice as slow,\nOK, twice as slow. So the moral is that the work\nand critical path length predict",
    "start": "4425000",
    "end": "4432927"
  },
  {
    "text": "the performance better than the\nexecution time alone, OK, when you look at\nscalability.",
    "start": "4432927",
    "end": "4440000"
  },
  {
    "text": "And a big issue on a lot of\nthese machines is scalability; not always, sometimes you're\nnot worried about scalability.",
    "start": "4440000",
    "end": "4447263"
  },
  {
    "text": "Sometimes you just care.\nHad we been running in the competition on a 32 processor\nmachine, we would have accepted",
    "start": "4447263",
    "end": "4454210"
  },
  {
    "text": "this optimization.\nIt would have been a good trade-off.\nOK, but because we knew that we",
    "start": "4454210",
    "end": "4459514"
  },
  {
    "text": "were running on a machine with a\nlot more processors, and that we were close to\nrunning out of the parallelism,",
    "start": "4459515",
    "end": "4466336"
  },
  {
    "text": "it didn't make sense to be\nincreasing the critical path at that point, because that was\njust reducing the parallelism of",
    "start": "4466336",
    "end": "4473726"
  },
  {
    "text": "our calculation.\nOK, next time, any questions about that first?\nNo?",
    "start": "4473726",
    "end": "4479041"
  },
  {
    "text": "OK.\nNext time, now that we understand the model for\nexecution, we're going to start",
    "start": "4479041",
    "end": "4484111"
  },
  {
    "text": "looking at the performance of\nparticular algorithms what we code them up in a dynamic,\nmultithreaded style,",
    "start": "4484111",
    "end": "4490701"
  },
  {
    "text": "OK?",
    "start": "4490701",
    "end": "4491701"
  }
]