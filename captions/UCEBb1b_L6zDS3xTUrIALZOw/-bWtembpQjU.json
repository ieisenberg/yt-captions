[
  {
    "text": "A modern compiler starts by analyzing the\nsource program text to produce an equivalent",
    "start": "640",
    "end": "5890"
  },
  {
    "text": "sequence of operations expressed in a language-\nand machine-independent intermediate representation",
    "start": "5890",
    "end": "11460"
  },
  {
    "text": "(IR).",
    "start": "11460",
    "end": "12720"
  },
  {
    "text": "The analysis, or frontend, phase checks that\nprogram is well-formed, i.e., that the syntax",
    "start": "12720",
    "end": "18689"
  },
  {
    "text": "of each high-level language statement is correct.",
    "start": "18689",
    "end": "22178"
  },
  {
    "text": "It understands the meaning (semantics) of\neach statement.",
    "start": "22179",
    "end": "26409"
  },
  {
    "text": "Many high-level languages include declarations\nof the type - e.g., integer, floating point,",
    "start": "26409",
    "end": "31499"
  },
  {
    "text": "string, etc. - of each variable,\nand the frontend verifies that all operations",
    "start": "31499",
    "end": "36840"
  },
  {
    "text": "are correctly applied, ensuring that numeric\noperations have numeric-type operands, string",
    "start": "36840",
    "end": "42800"
  },
  {
    "text": "operations have string-type operands, and\nso on.",
    "start": "42800",
    "end": "46800"
  },
  {
    "text": "Basically the analysis phase converts the\ntext of the source program into an internal",
    "start": "46800",
    "end": "51859"
  },
  {
    "text": "data structure that specifies the sequence\nand type of operations to be performed.",
    "start": "51859",
    "end": "58079"
  },
  {
    "text": "Often there are families of frontend programs\nthat translate a variety of high-level languages",
    "start": "58079",
    "end": "62559"
  },
  {
    "text": "(e.g, C, C++, Java) into a common IR.",
    "start": "62559",
    "end": "70140"
  },
  {
    "text": "The synthesis, or backend, phase then optimizes\nthe IR to reduce the number of operations",
    "start": "70140",
    "end": "76450"
  },
  {
    "text": "that will be executed when the final code\nis run.",
    "start": "76450",
    "end": "79880"
  },
  {
    "text": "For example, it might find operations inside\nof a loop that are independent of the loop",
    "start": "79880",
    "end": "84740"
  },
  {
    "text": "index and can moved outside the loop, where\nthey are performed once instead of repeatedly",
    "start": "84740",
    "end": "90560"
  },
  {
    "text": "inside the loop.",
    "start": "90560",
    "end": "92640"
  },
  {
    "text": "Once the IR is in its final optimized form,\nthe backend generates code sequences for the",
    "start": "92640",
    "end": "98880"
  },
  {
    "text": "target ISA and looks for further optimizations\nthat take advantage of particular features",
    "start": "98880",
    "end": "105380"
  },
  {
    "text": "of the ISA.",
    "start": "105380",
    "end": "107298"
  },
  {
    "text": "For example, for the Beta ISA we saw how a\nCMOVE followed by an arithmetic operation",
    "start": "107299",
    "end": "113280"
  },
  {
    "text": "can be shorted to a single operation with\na constant operand.",
    "start": "113280",
    "end": "117750"
  },
  {
    "text": "The analysis phase starts by scanning the\nsource text and generating a sequence of token",
    "start": "117750",
    "end": "122760"
  },
  {
    "text": "objects that identify the type of each piece\nof the source text.",
    "start": "122760",
    "end": "127330"
  },
  {
    "text": "While spaces, tabs, newlines, and so on were\nneeded to separate tokens in the source text,",
    "start": "127330",
    "end": "133150"
  },
  {
    "text": "they've all been removed during the scanning\nprocess.",
    "start": "133150",
    "end": "136510"
  },
  {
    "text": "To enable useful error reporting, token objects\nalso include information about where in the",
    "start": "136510",
    "end": "141930"
  },
  {
    "text": "source text each token was found, e.g., the\nfile name, line number, and column number.",
    "start": "141930",
    "end": "149010"
  },
  {
    "text": "The scanning phase reports illegal tokens,\ne.g., the token \"3x\" would cause an error",
    "start": "149010",
    "end": "154989"
  },
  {
    "text": "since in C it would not be a legal number\nor a legal variable name.",
    "start": "154989",
    "end": "160810"
  },
  {
    "text": "The parsing phase processes the sequence of\ntokens to build the syntax tree, which captures",
    "start": "160810",
    "end": "166599"
  },
  {
    "text": "the structure of the original program in a\nconvenient data structure.",
    "start": "166599",
    "end": "171470"
  },
  {
    "text": "The operands have been organized for each\nunary and binary operation.",
    "start": "171470",
    "end": "175840"
  },
  {
    "text": "The components of each statement have been\nfound and labeled.",
    "start": "175840",
    "end": "179720"
  },
  {
    "text": "The role of each source token has been determined\nand the information captured in the syntax",
    "start": "179720",
    "end": "185220"
  },
  {
    "text": "tree.",
    "start": "185220",
    "end": "187120"
  },
  {
    "text": "Compare the labels of the nodes in the tree\nto the templates we discussed in the previous",
    "start": "187120",
    "end": "191159"
  },
  {
    "text": "segment.",
    "start": "191159",
    "end": "192159"
  },
  {
    "text": "We can see that it would be easy to write\na program that did a depth-first tree walk,",
    "start": "192159",
    "end": "196860"
  },
  {
    "text": "using the label of each tree node to select\nthe appropriate code generation template.",
    "start": "196860",
    "end": "201349"
  },
  {
    "text": "We won't do that quite yet since there's still\nsome work to be done analyzing and transforming",
    "start": "201349",
    "end": "206069"
  },
  {
    "text": "the tree.",
    "start": "206069",
    "end": "207750"
  },
  {
    "text": "The syntax tree makes it easy to verify that\nthe program is semantically correct, e.g.,",
    "start": "207750",
    "end": "212890"
  },
  {
    "text": "to check that the types of the operands are\ncompatible with the requested operation.",
    "start": "212890",
    "end": "218260"
  },
  {
    "text": "For example, consider the statement x = \"bananas\".",
    "start": "218260",
    "end": "223290"
  },
  {
    "text": "The syntax of the assignment operation is\ncorrect: there's a variable on the left-hand",
    "start": "223290",
    "end": "227780"
  },
  {
    "text": "side and an expression on the right-hand side.",
    "start": "227780",
    "end": "230680"
  },
  {
    "text": "But the semantics is not correct, at least\nin the C language!",
    "start": "230680",
    "end": "234930"
  },
  {
    "text": "By looking in its symbol table to check the\ndeclared type for the variable x (int) and",
    "start": "234930",
    "end": "241109"
  },
  {
    "text": "comparing it to the type of the expression\n(string),",
    "start": "241110",
    "end": "244470"
  },
  {
    "text": "the semantic checker for the \"op =\" tree node\nwill detect that the types are not compatible,",
    "start": "244470",
    "end": "250890"
  },
  {
    "text": "i.e., that we can't store a string value into\nan integer variable.",
    "start": "250890",
    "end": "257000"
  },
  {
    "text": "When the semantic analysis is complete, we\nknow that the syntax tree represents a syntactically",
    "start": "257000",
    "end": "262410"
  },
  {
    "text": "correct program with valid semantics, and\nwe've finished converting the source program",
    "start": "262410",
    "end": "267820"
  },
  {
    "text": "into an equivalent, language-independent sequence\nof operations.",
    "start": "267820",
    "end": "271510"
  }
]