[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6880"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation, or\nview additional materials",
    "start": "6880",
    "end": "13349"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13350",
    "end": "22460"
  },
  {
    "text": "PROFESSOR: Good\nmorning, everyone. Let's get started\non lecture number two of four lecture\nsequences of shortest paths.",
    "start": "22460",
    "end": "30580"
  },
  {
    "text": "So, last time, we talked\nabout a general structure for a shortest path algorithm.",
    "start": "30580",
    "end": "37160"
  },
  {
    "text": "Today, we'll actually look\nat a concrete algorithm that's due to Dijkstra. ",
    "start": "37160",
    "end": "43989"
  },
  {
    "text": "Before we get to\nthat, I want to do a little bit of a\nreview of the concepts",
    "start": "43990",
    "end": "49610"
  },
  {
    "text": "that we covered in\nthe lecture last week. In particular, we\ntalked about this notion",
    "start": "49610",
    "end": "56590"
  },
  {
    "text": "of relaxation, which is\na fundamental operation in all shortest path algorithms.",
    "start": "56590",
    "end": "61629"
  },
  {
    "text": "And I want to go\nover that again. We look at a couple\nof special cases today, with respect to\nalgorithms for shortest paths.",
    "start": "61630",
    "end": "70079"
  },
  {
    "text": "We look at a Directed\nAcyclic Graph. Then your graph has\nno cycles in it.",
    "start": "70080",
    "end": "77430"
  },
  {
    "text": "Regardless of whether you\nhave negative edges or not,",
    "start": "77430",
    "end": "82770"
  },
  {
    "text": "there's a\nstraightforward algorithm that we look at to find\nshortest paths and DAGs.",
    "start": "82770",
    "end": "88760"
  },
  {
    "text": "And then, we'll\nfocus in on the case where there are\nno negative edges. And talk about\nDijkstra's algorithm.",
    "start": "88760",
    "end": "95970"
  },
  {
    "text": "So, to start with\nthe review, here's,",
    "start": "95970",
    "end": "103190"
  },
  {
    "text": "really, a trivial\nexample of a graph that we want to compute\nthe shortest paths on.",
    "start": "103190",
    "end": "110000"
  },
  {
    "text": "And the numbers that are\ninside these vertices",
    "start": "110000",
    "end": "116780"
  },
  {
    "text": "are our priority values. So, think of d of v as the\nlength of the current shortest",
    "start": "116780",
    "end": "129720"
  },
  {
    "text": "path from the source, s, to v.",
    "start": "129720",
    "end": "136250"
  },
  {
    "text": "And, given the source, s, the\nlength to the source is 0.",
    "start": "136250",
    "end": "142900"
  },
  {
    "text": "So d of s is 0. It starts at 0 and ends at 0. And other ones, I\ninitialized to infinity.",
    "start": "142900",
    "end": "149940"
  },
  {
    "text": "And through this process\nthat we call relaxation,",
    "start": "149940",
    "end": "155180"
  },
  {
    "text": "we can generally\nreduce these d values,",
    "start": "155180",
    "end": "160769"
  },
  {
    "text": "that are the lengths of\nthe current shortest paths, down to what we call\nthe delta values.",
    "start": "160770",
    "end": "167025"
  },
  {
    "text": " Which is the length\nof our shortest path.",
    "start": "167025",
    "end": "173790"
  },
  {
    "text": " It may be unique. It may not be unique.",
    "start": "173790",
    "end": "179750"
  },
  {
    "text": "But you have to get\nthe minimum value. And then, all of the vertices\nhave convergent values",
    "start": "179750",
    "end": "189330"
  },
  {
    "text": "of d that converge to delta. Then, your algorithm is done. And one last thing that is\nimportant to reconstruct",
    "start": "189330",
    "end": "199489"
  },
  {
    "text": "the path is the notion\nof a predecessor and pi v",
    "start": "199490",
    "end": "206900"
  },
  {
    "text": "is the predecessor of v in\nthe shortest path from s",
    "start": "206900",
    "end": "216530"
  },
  {
    "text": "to v. And you can\nfollow this predecessor",
    "start": "216530",
    "end": "224180"
  },
  {
    "text": "chain to reconstruct\nthe shortest path, once you've converged,\nand all of the values",
    "start": "224180",
    "end": "231560"
  },
  {
    "text": "are down to the delta s comma\nv. So, in this trivial example,",
    "start": "231560",
    "end": "237140"
  },
  {
    "text": "you start with d of s being 0, d\nof a and d of b being infinity.",
    "start": "237140",
    "end": "244580"
  },
  {
    "text": "Let's put on it a\nfew weights here.",
    "start": "244580",
    "end": "250560"
  },
  {
    "text": "And what you do is\npotentially relax the edges that go out of s.",
    "start": "250560",
    "end": "256510"
  },
  {
    "text": "And this notion of relaxation,\nthat I'll write out formally in a minute-- we\nlooked at it last time,",
    "start": "256510",
    "end": "261940"
  },
  {
    "text": "is a process of\nfollowing this edge, and updating the d of a value. And this infinity becomes\n1 because you say, well,",
    "start": "261940",
    "end": "270139"
  },
  {
    "text": "if I start here with 0 and\nI add 1 to it, I get 1 here. Similarly, this\ninfinity becomes 3.",
    "start": "270140",
    "end": "275830"
  },
  {
    "text": "And, at this point,\nyou've relaxed the edges that go out of s two these\nother two nodes, a and b.",
    "start": "275830",
    "end": "283040"
  },
  {
    "text": "You're not quite done yet. At this point, you could imagine\nthat, at least in this example,",
    "start": "283040",
    "end": "289770"
  },
  {
    "text": "you found the shortest\npath to the vertex a. But it is, in fact, a path\nof length, 2, to vertex b.",
    "start": "289770",
    "end": "297940"
  },
  {
    "text": "Right now, we think that the\nthe current shortest path to b, after the first step of\nrelaxing the edges from s,",
    "start": "297940",
    "end": "305500"
  },
  {
    "text": "happens to be 3. But if you go like so,\nthen you end up with the 2.",
    "start": "305500",
    "end": "313360"
  },
  {
    "text": "And, at this point, you're done. Now we have to prove that any\nparticular algorithm we put up",
    "start": "313360",
    "end": "320380"
  },
  {
    "text": "is going to converge to the\ndelta values, and the algorithm to terminate. And then, we have to worry\nabout the asymptotic complexity",
    "start": "320380",
    "end": "327789"
  },
  {
    "text": "of the algorithm. But that's the\ngeneral overall flow. And we look at, as I said,\ntwo algorithms today.",
    "start": "327790",
    "end": "334060"
  },
  {
    "text": "Both special cases. One for DAGs and one\nfor non-negative edges. And we'll go through, and\nmaybe not do a formal proof,",
    "start": "334060",
    "end": "341430"
  },
  {
    "text": "but suddenly give you\na strong intuition as to why these algorithms work.",
    "start": "341430",
    "end": "346990"
  },
  {
    "text": "Any questions about\nthis material?",
    "start": "346990",
    "end": "352750"
  },
  {
    "text": "OK. So, what I want\nto do is give you",
    "start": "352750",
    "end": "358220"
  },
  {
    "text": "a sense for why this\nrelaxation step is useful.",
    "start": "358220",
    "end": "364770"
  },
  {
    "text": "But also, importantly,\nsafe, or correct. And recall that our basic\nrelaxation operation, which",
    "start": "364770",
    "end": "375220"
  },
  {
    "text": "we did over here, as we\nupdated the infinity value to 1 and the 3 value to 2, et\ncetera, looks like this.",
    "start": "375220",
    "end": "384099"
  },
  {
    "text": "It says, if d of v is greater\nthan d of u plus w u,v. Then,",
    "start": "384100",
    "end": "393510"
  },
  {
    "text": "I'm going to update d of v\nto be d of u plus w u, v.",
    "start": "393510",
    "end": "400100"
  },
  {
    "text": "You found a better way\nof reaching vertex v. A shorter way. ",
    "start": "400100",
    "end": "408560"
  },
  {
    "text": "And this way happens to be\ngoing through the vertex, u. So you update not only the\npriority value, but also",
    "start": "408560",
    "end": "415330"
  },
  {
    "text": "the predecessor relationship. All right? That's the relaxation step. Now, I want to be able to\nshow that relaxation is safe.",
    "start": "415330",
    "end": "424805"
  },
  {
    "start": "424805",
    "end": "430199"
  },
  {
    "text": "What do I mean by that? Well, I want to make sure\nthat I never relax an edge",
    "start": "430200",
    "end": "436470"
  },
  {
    "text": "and somehow do\nsomething wrong, which gets me a value that's\nless than delta s v.",
    "start": "436470",
    "end": "443319"
  },
  {
    "text": "I want to be able to\nconverge from the top. I want to be able to start\nwith these infinity values",
    "start": "443320",
    "end": "448840"
  },
  {
    "text": "because I don't have a path\nto this particular vertex, and continually reduce the\nvalues of the priorities.",
    "start": "448840",
    "end": "455700"
  },
  {
    "text": "And then get down to delta, the\ncorrect values, and don't go, I don't want to go any further.",
    "start": "455700",
    "end": "460750"
  },
  {
    "text": "All right? Because, if I get below,\nthen you're talking about, essentially, you may\nbe able to get back up,",
    "start": "460750",
    "end": "466170"
  },
  {
    "text": "but that is not the kind\nof algorithm that we want. At least, algorithms\nwe look at here.",
    "start": "466170",
    "end": "471960"
  },
  {
    "text": "And that is dangerous. So we want relaxation\nto be safe. And we can fairly easily\nprove a simple lemma,",
    "start": "471960",
    "end": "482510"
  },
  {
    "text": "using induction, that\nsays that the relaxation",
    "start": "482510",
    "end": "490280"
  },
  {
    "text": "operation-- and\nit doesn't matter what sequence you relax things.",
    "start": "490280",
    "end": "495690"
  },
  {
    "text": "This is a fairly\npowerful lemma that says that if you have an\nalgorithm that uses relaxation,",
    "start": "495690",
    "end": "500850"
  },
  {
    "text": "and that's the only way of\nupdating these d values, then it's safe.",
    "start": "500850",
    "end": "507560"
  },
  {
    "text": "You're not going to get a\nwrong, shortest path value. Either at the end\nof the algorithm or at any time during the\nrunning, or the execution,",
    "start": "507560",
    "end": "515298"
  },
  {
    "text": "of this algorithm. OK? So the relaxation\noperation algorithm maintains the\ninvariant that d of v",
    "start": "515299",
    "end": "533160"
  },
  {
    "text": "is greater than or equal to\ndelta s, v for all vertices.",
    "start": "533160",
    "end": "542310"
  },
  {
    "text": "OK? So that's a powerful lemma. It's a fairly straightforward\nlemma to prove. But it's an important lemma.",
    "start": "542310",
    "end": "549750"
  },
  {
    "text": "It tells us that we can\ncreate the generic structure of the shortest path algorithm\nthat I talked about last week.",
    "start": "549750",
    "end": "556480"
  },
  {
    "text": "It says, pick an edge. Relax it. Pick another edge. Relax it.",
    "start": "556480",
    "end": "561997"
  },
  {
    "text": "And hopefully\neverything will work out and you'll get\nyour delta values. And what this lemma\nsays is, you'll",
    "start": "561997",
    "end": "568927"
  },
  {
    "text": "never get something\nin the middle that is less than your\nshortest path value. And if you keep running\nover for long enough time,",
    "start": "568927",
    "end": "575780"
  },
  {
    "text": "depending on the\nparticular heuristic that you use for\nselecting the edges, your algorithm will\neventually terminate.",
    "start": "575780",
    "end": "581570"
  },
  {
    "text": "And, hopefully, it'll\nrun in polynomial time.",
    "start": "581570",
    "end": "586740"
  },
  {
    "text": "So, how do we prove this? I'm going to do\nabout half of it,",
    "start": "586740",
    "end": "592620"
  },
  {
    "text": "then try and get\nyou to finish it. So it's by induction\non the number of steps,",
    "start": "592620",
    "end": "604639"
  },
  {
    "text": "in the sense that we are going\nto essentially assume that d",
    "start": "604640",
    "end": "614920"
  },
  {
    "text": "of u is greater than\nor equal to delta s,u.",
    "start": "614920",
    "end": "623950"
  },
  {
    "text": "And we're going to do\nthis relaxation operation. So it's like a base case\nis that this is correct.",
    "start": "623950",
    "end": "633235"
  },
  {
    "text": " And now we want to show that\nthe relaxation operation doesn't",
    "start": "633235",
    "end": "643450"
  },
  {
    "text": "make d of v incorrect. So, that's the\ninductive hypothesis.",
    "start": "643450",
    "end": "652025"
  },
  {
    "text": " Now, we can say by the\ntriangle inequality",
    "start": "652025",
    "end": "660680"
  },
  {
    "text": "that I talked about late\nin last week's lecture, you have delta s, v less than\nor equal to delta s comma",
    "start": "660680",
    "end": "672050"
  },
  {
    "text": "u plus delta u comma\nv. And what is that?",
    "start": "672050",
    "end": "677660"
  },
  {
    "text": "Well, that just says, if I\nhave something like this,",
    "start": "677660",
    "end": "686670"
  },
  {
    "text": "that I have s. Let's call this u and v.",
    "start": "686670",
    "end": "695570"
  },
  {
    "text": "This is not an edge between\ns and v. It's a path. It could be a single edge. But we think of this\nas a path between s",
    "start": "695570",
    "end": "702600"
  },
  {
    "text": "and v. This is a\npath between s and u. This is a path between u and v.",
    "start": "702600",
    "end": "710890"
  },
  {
    "text": "And, in particular,\nif there's a way",
    "start": "710890",
    "end": "717780"
  },
  {
    "text": "of getting from s to u and u\nto v that happens to be shorter",
    "start": "717780",
    "end": "728640"
  },
  {
    "text": "then the best way of\ngetting from s to v, well, that's a contradiction.",
    "start": "728640",
    "end": "734831"
  },
  {
    "text": "OK? Because this is the shortest\nway of getting from s to v.",
    "start": "734831",
    "end": "741270"
  },
  {
    "text": "And it has no constraints\nover the number of edges that it incorporates.",
    "start": "741270",
    "end": "746750"
  },
  {
    "text": "And so, by definition,\nthe shortest way of getting from s to v is\neither some direct way. Maybe there's a single edge.",
    "start": "746750",
    "end": "752460"
  },
  {
    "text": "Or it may go through\nthis vertex, u. All right? So that's the\ntriangle inequality.",
    "start": "752460",
    "end": "759890"
  },
  {
    "text": "Notice that, what I\nhave here, is something where going from s,\nto a, to b is actually",
    "start": "759890",
    "end": "770670"
  },
  {
    "text": "shorter than going from s to b. But these are single\nedges we're talking about. These are weights\nwe're talking about.",
    "start": "770670",
    "end": "776220"
  },
  {
    "text": "And there's no\ncontradiction here because all this says is\nthat, what I want to see here",
    "start": "776220",
    "end": "781930"
  },
  {
    "text": "is delta s comma b\nis going to be 2.",
    "start": "781930",
    "end": "787470"
  },
  {
    "text": "OK? Initially, I may be starting\nout with infinity and 3 for the d values.",
    "start": "787470",
    "end": "792900"
  },
  {
    "text": "But the delta value,\nwhich is the shortest way of getting to b,\nhappens to go through a. And so, if you use that,\nthen the triangle inequality",
    "start": "792900",
    "end": "800150"
  },
  {
    "text": "makes sense. So don't get confused\nwhen you see pictures like this, where the weights\ndon't obey the triangle",
    "start": "800150",
    "end": "809020"
  },
  {
    "text": "inequality. The triangle inequality has to\ndo with the shortest paths, not the single edge ways.",
    "start": "809020",
    "end": "815101"
  },
  {
    "text": "OK?  So, that's half the proof here.",
    "start": "815101",
    "end": "822319"
  },
  {
    "text": "What I've done is assumed\nthat d of u is correct. And I've used the\ntriangle inequality.",
    "start": "822320",
    "end": "830060"
  },
  {
    "text": "And I've just written this down. Now, someone do the last step,\nor the second to last step,",
    "start": "830060",
    "end": "838200"
  },
  {
    "text": "of this proof. Anybody?  What can I say now, given\nthat what I have here.",
    "start": "838200",
    "end": "845800"
  },
  {
    "text": "Look at these two values. What can I say\nabout these values?",
    "start": "845800",
    "end": "852620"
  },
  {
    "text": "How can I prove what\nI want to prove, which is, basically, delta of\ns comma v should be less than",
    "start": "852620",
    "end": "859750"
  },
  {
    "text": "or equal to d of v? OK. That's what I want to show. I've just written\nanother way here.",
    "start": "859750",
    "end": "866779"
  },
  {
    "text": "How do I do that?  Anyone? ",
    "start": "866780",
    "end": "876380"
  },
  {
    "text": "What can I substitute for--\nthere's a less than operator,",
    "start": "876380",
    "end": "885810"
  },
  {
    "text": "which means that I can\nreplace things over here. Yeah. AUDIENCE: If you, like,\nyou have a [INAUDIBLE]?",
    "start": "885810",
    "end": "893017"
  },
  {
    "text": "PROFESSOR: Ah. Excellent. So the first thing is, I could\nput d of u over here, right?",
    "start": "893017",
    "end": "899259"
  },
  {
    "text": "Less than or equal to d of u. And the reason I can do\nthat is because d of u",
    "start": "899260",
    "end": "906770"
  },
  {
    "text": "is greater then delta s comma u. So that's cool, right?",
    "start": "906770",
    "end": "913070"
  },
  {
    "text": "Sorry, delta. Thank you. Delta s comma u. Thank you. And so, that's what I got here.",
    "start": "913070",
    "end": "918630"
  },
  {
    "text": "What else? Yeah? AUDIENCE: You replace\ndelta u, v with w u, v.",
    "start": "918630",
    "end": "924074"
  },
  {
    "text": "PROFESSOR: I can replace\ndelta u, v with w, u, v. Exactly right. Exactly right.",
    "start": "924074",
    "end": "929720"
  },
  {
    "text": "Great. That deserves a cushion. I think you already have one. Yep.",
    "start": "929720",
    "end": "935040"
  },
  {
    "text": "Oh, man. I should have not-- so you\nget that because I messed up. Seems like you\nneed to get-- whoa.",
    "start": "935041",
    "end": "940930"
  },
  {
    "text": "Hey. OK. You get one because I\nhit you on the head. All right. And this time, I'll just save.",
    "start": "940930",
    "end": "946440"
  },
  {
    "text": "I'm running out\nof cushions here. But I've got some in my office.",
    "start": "946440",
    "end": "951890"
  },
  {
    "text": "All right. So that's it. That's the proof. OK? Fairly straightforward.",
    "start": "951890",
    "end": "956990"
  },
  {
    "text": " You get to the\npoint where you want",
    "start": "956990",
    "end": "964290"
  },
  {
    "text": "to apply the\ntriangle inequality. You simply look at each of\nthese terms and, by induction",
    "start": "964290",
    "end": "972990"
  },
  {
    "text": "hypothesis, you\ncould put d,u here. And, I just talked\nabout the weights,",
    "start": "972990",
    "end": "978500"
  },
  {
    "text": "and so on, and so forth. And you know that w u,v,\nwhich is a direct way,",
    "start": "978500",
    "end": "983630"
  },
  {
    "text": "a single edge way,\nof getting to a node,",
    "start": "983630",
    "end": "989640"
  },
  {
    "text": "has to be greater than\nthe shortest path. Like here, this 3\nvalue is a direct way",
    "start": "989640",
    "end": "996290"
  },
  {
    "text": "of getting from s to b. And, in this case, it's\ngreater than the shortest path, which is of length 2.",
    "start": "996290",
    "end": "1002770"
  },
  {
    "text": "But it can never be smaller\nthan the shortest path. And so, once we have that\nhere, we can essentially say,",
    "start": "1002770",
    "end": "1011250"
  },
  {
    "text": "we know that delta s, v is less\nthan or equal to d u plus d v. Which implies, of course,\nthat this is simply--",
    "start": "1011250",
    "end": "1017530"
  },
  {
    "text": "once we are done with the\nrelaxation step-- that equals d v. This part\nhere equals d v. OK?",
    "start": "1017530",
    "end": "1027630"
  },
  {
    "text": "That's how that works. So that's good news. We have a relaxation\nalgorithm that is safe.",
    "start": "1027630",
    "end": "1035276"
  },
  {
    "text": "We can now\narbitrarily, and we'll do this for all of algorithms\nwe look at, really.",
    "start": "1035276",
    "end": "1041520"
  },
  {
    "text": "At least in 006,\nfor shortest paths. Which applies some\nsequence of relaxations.",
    "start": "1041520",
    "end": "1047559"
  },
  {
    "text": "And, depending on the\nspecial case of the problem, we're going to apply these\nthings in different ways",
    "start": "1047560",
    "end": "1053640"
  },
  {
    "text": "to get the most\nefficient algorithm. All right? So, we can now do algorithms.",
    "start": "1053640",
    "end": "1060889"
  },
  {
    "text": "Let's look at DAGs first. ",
    "start": "1060890",
    "end": "1073669"
  },
  {
    "text": "So, DAG stands for\nDirected Acyclic Graphs. So that means we\ncan't have cycles.",
    "start": "1073670",
    "end": "1088430"
  },
  {
    "text": "So we can't have\nnegative cycles. So that's why this is an\ninteresting special case. It makes things a\nlittle bit easier for us",
    "start": "1088430",
    "end": "1095470"
  },
  {
    "text": "because we don't have to\nworry about negative cycles. We're actually going\nto look at DAGs that have negative\nedges in them.",
    "start": "1095470",
    "end": "1102275"
  },
  {
    "text": "All right? So, we're allowed to have\nnegative edges in these DAGs. But we don't have\nnegative cycles.",
    "start": "1102275",
    "end": "1107730"
  },
  {
    "text": "And, as I said\nlast time, it's not the negative edges\nthat cause a problem. If you only go through\nat negative edge once,",
    "start": "1107730",
    "end": "1114266"
  },
  {
    "text": "you can just\nsubtract that value. And it's cool. It's only when you\nget into a situation where you're going\nthrough a negative edge,",
    "start": "1114266",
    "end": "1121370"
  },
  {
    "text": "a negative cycle. And you can just iterate through\nthem to get to minus infinity. And you have an indeterminate\nshortest path value.",
    "start": "1121370",
    "end": "1129840"
  },
  {
    "text": "So the way this is going\nto work-- if you ever have a DAG, by the way, the\nfirst thing you want to try--",
    "start": "1129840",
    "end": "1136820"
  },
  {
    "text": "and this is certainly\ntrue in your problem set-- when there's a question, try\nto topologically sort it.",
    "start": "1136820",
    "end": "1141840"
  },
  {
    "text": "OK? It's a fine hammer to\nuse, when you have a DAG. And it's not an exception here.",
    "start": "1141840",
    "end": "1151690"
  },
  {
    "text": "To do shortest\npaths, we're going to topologically sort the DAG.",
    "start": "1151690",
    "end": "1157760"
  },
  {
    "text": "And the path from u\nto v implies that u",
    "start": "1157760",
    "end": "1172770"
  },
  {
    "text": "is before v in the ordering. ",
    "start": "1172770",
    "end": "1181820"
  },
  {
    "text": "And, once you do that,\nyou have this linear. And I'll show you an example. You have this linear ordering. And we're just going to\ngo through, in order,",
    "start": "1181820",
    "end": "1189080"
  },
  {
    "text": "from left to right,\nrelaxing these edges. And we're going to\nget our shortest paths for all the vertices.",
    "start": "1189080",
    "end": "1195240"
  },
  {
    "text": "So, the second and last step\nis, one pass, left to right,",
    "start": "1195240",
    "end": "1201080"
  },
  {
    "text": "over the vertices, in\ntopologically sorted order.",
    "start": "1201080",
    "end": "1207460"
  },
  {
    "start": "1207460",
    "end": "1217000"
  },
  {
    "text": "And we're going to\nrelax each edge that leaves the particular\nvertex we are",
    "start": "1217000",
    "end": "1222123"
  },
  {
    "text": "trying to process right now. ",
    "start": "1222124",
    "end": "1232940"
  },
  {
    "text": "And so, we know topological\nsorting is order v plus e, includes depth-first search.",
    "start": "1232940",
    "end": "1238660"
  },
  {
    "text": "And this pass over the vertices,\nyou're touching each vertex. And you're touching every edge\na constant number of times.",
    "start": "1238660",
    "end": "1244490"
  },
  {
    "text": "In this case, once. So this is our first special\ncase shortest path algorithm.",
    "start": "1244490",
    "end": "1253179"
  },
  {
    "text": "And that takes\norder v plus e time. All right? Why does this work?",
    "start": "1253180",
    "end": "1258570"
  },
  {
    "text": "And just one little\ninteresting aspect",
    "start": "1258570",
    "end": "1266149"
  },
  {
    "text": "of this, which is\nrelated to a DAG. And the relationship between the\nDAG and the particular starting",
    "start": "1266150",
    "end": "1274809"
  },
  {
    "text": "vertex that we're\ngoing to be looking at. So, this is an example.",
    "start": "1274810",
    "end": "1280500"
  },
  {
    "text": "Suppose I have a DAG like this. And I marked this vertex as s.",
    "start": "1280500",
    "end": "1286720"
  },
  {
    "text": "And I want to find the\nshortest path from s to these other nodes\nthat are a and b.",
    "start": "1286720",
    "end": "1293330"
  },
  {
    "text": "Well, they don't exist, right? So, in this case, I'm\ngoing to have a shortest",
    "start": "1293330",
    "end": "1300170"
  },
  {
    "text": "path to a being infinity\nand shortest path to b being infinity. And this is a trivial example.",
    "start": "1300170",
    "end": "1306080"
  },
  {
    "text": "So, this algorithm is general. It doesn't say anything about\nwhat the starting vertex is.",
    "start": "1306080",
    "end": "1311730"
  },
  {
    "text": "Right? It should work for any\nchoice of starting vertex. The nice thing is that you\ncan do the topological sort.",
    "start": "1311730",
    "end": "1320530"
  },
  {
    "text": "And then you can commit to\nwhat the starting vertex is. And you can go off, and you can\nsay, from this starting vertex,",
    "start": "1320530",
    "end": "1328890"
  },
  {
    "text": "I'm going to go and\ncompute the shortest paths to the other vertices\nthat I can actually reach.",
    "start": "1328890",
    "end": "1335340"
  },
  {
    "text": "OK? So let's say that you had\na DAG that looks like this. All right, once you've\ntopologically sorted it,",
    "start": "1335340",
    "end": "1341640"
  },
  {
    "text": "you can always draw\na DAG in linear form.",
    "start": "1341640",
    "end": "1347087"
  },
  {
    "text": "That's a nice thing. ",
    "start": "1347087",
    "end": "1357912"
  },
  {
    "text": "I'm going to put edge\nweights down in a minute. ",
    "start": "1357912",
    "end": "1368150"
  },
  {
    "text": "All right. So that's my DAG.  Let's see.",
    "start": "1368150",
    "end": "1373380"
  },
  {
    "text": "5, 3, 2, 6, 7, 4,\n2, minus 1, minus 2.",
    "start": "1373380",
    "end": "1384160"
  },
  {
    "text": " So that's my DAG.",
    "start": "1384160",
    "end": "1389240"
  },
  {
    "text": "And I've drawn it in\ntopologically sorted form. And I go left to right.",
    "start": "1389240",
    "end": "1394299"
  },
  {
    "text": "Now, let's say that, at this\npoint, I get to step two. And I want to find\nshortest paths.",
    "start": "1394300",
    "end": "1400809"
  },
  {
    "text": "Now, I have to say,\nwhat is my source? And, if I just happen to\nhave this as my source,",
    "start": "1400810",
    "end": "1408850"
  },
  {
    "text": "well, there's\nnothing to do here. There's no edges\nthat go out of this. And so that means that\neverything to the left of me",
    "start": "1408850",
    "end": "1416509"
  },
  {
    "text": "is infinity. OK? So the first thing\nthat you do is, you say, find the\nsource that corresponds",
    "start": "1416510",
    "end": "1424179"
  },
  {
    "text": "to the starting vertex. And let's say, this is the\nstarting vertex, in this case.",
    "start": "1424180",
    "end": "1430210"
  },
  {
    "text": "Which I'll mark in bold. So that's my starting vertex. I'll take a nontrivial case.",
    "start": "1430210",
    "end": "1437059"
  },
  {
    "text": "And everything to\nthe left is going to get marked with infinity.",
    "start": "1437060",
    "end": "1442980"
  },
  {
    "text": "And now, I've got to do\nsome work on relaxation. And I'm not going to get\nthe shortest path instantly",
    "start": "1442980",
    "end": "1450080"
  },
  {
    "text": "for a particular vertex, once\nI get to it, because there may be better ways\nof getting there.",
    "start": "1450080",
    "end": "1456250"
  },
  {
    "text": "And especially if I\nhave negative edges. And that's certainly possible,\nthat a longer length path",
    "start": "1456250",
    "end": "1461970"
  },
  {
    "text": "is going to be\nthe shortest path. But what I'll do is take s.",
    "start": "1461970",
    "end": "1467020"
  },
  {
    "text": "And I'm going to relax\nedges that emanate from s. And so, step one,\nall of these are",
    "start": "1467020",
    "end": "1472520"
  },
  {
    "text": "going to be infinity\nto start with. So everything is infinity. The ones to the\nleft stay infinity.",
    "start": "1472520",
    "end": "1477780"
  },
  {
    "text": "The ones to the right are\ngoing to be reachable. And you're going to\nupdate those values.",
    "start": "1477780",
    "end": "1487110"
  },
  {
    "text": "And so, when you go\nlike so, this becomes 2. This becomes 6.",
    "start": "1487110",
    "end": "1492970"
  },
  {
    "text": "As I follow that. And I'm done with\nthis vertex, s.",
    "start": "1492970",
    "end": "1498940"
  },
  {
    "text": "And this is what I have. 2 and 6. So the next step is\nto get to this vertex.",
    "start": "1498940",
    "end": "1504560"
  },
  {
    "text": "Let's call that the vertex a. And I'm going relax the\nedges going out of a.",
    "start": "1504560",
    "end": "1509900"
  },
  {
    "text": "And, when I go out\nof a, I get 2 plus 7 is 9, which is greater than 6.",
    "start": "1509900",
    "end": "1517010"
  },
  {
    "text": "So there's no reason\nto update that. 2 plus 4 is less than infinity.",
    "start": "1517010",
    "end": "1522840"
  },
  {
    "text": "And so, that's 6. 2 plus 2 gives me 4 here.",
    "start": "1522840",
    "end": "1531140"
  },
  {
    "text": "And so on and so forth. So then, now I'm\ndone with vertex a. If this vertex is b, then I\nhave a value of 6 for this.",
    "start": "1531140",
    "end": "1539020"
  },
  {
    "text": "And 6 minus 1 is less than 6. So this becomes 5.",
    "start": "1539020",
    "end": "1544810"
  },
  {
    "text": "And 5 minus 2-- well, that's\nthe next step after that.",
    "start": "1544810",
    "end": "1549930"
  },
  {
    "text": "I haven't put-- this is a 1. And so 6 plus 1 is 7.",
    "start": "1549930",
    "end": "1555717"
  },
  {
    "text": "But that's greater than 4. So we don't have\nto anything there. So the final values that I end\nup getting are 3 for this one.",
    "start": "1555717",
    "end": "1565410"
  },
  {
    "text": "So this is the final value. 5 is the final value here. 6 is the final value here.",
    "start": "1565410",
    "end": "1572090"
  },
  {
    "text": "2 is the final value here. And that one is 0. And this stays infinity.",
    "start": "1572090",
    "end": "1577460"
  },
  {
    "text": "OK? So fairly straightforward. Do a topological sort.",
    "start": "1577460",
    "end": "1582560"
  },
  {
    "text": "Find the starting point. And then run all the\nway to the right. Interestingly, this is actually\na really simple example",
    "start": "1582560",
    "end": "1590580"
  },
  {
    "text": "of dynamic programming,\nwhich we'll talk about in gory detail,\nlater in November.",
    "start": "1590580",
    "end": "1596460"
  },
  {
    "text": "But what I have here is\nthe simplest special case",
    "start": "1596460",
    "end": "1604250"
  },
  {
    "text": "of a graph that has an\norder of v e [INAUDIBLE] shortest path algorithm.",
    "start": "1604250",
    "end": "1609430"
  },
  {
    "text": "And the reason for that\nis we don't have cycles. All right? Any questions about this?",
    "start": "1609430",
    "end": "1615220"
  },
  {
    "text": "People buy this? It works? OK. So, we've got one\nalgorithm under our belt.",
    "start": "1615220",
    "end": "1622260"
  },
  {
    "text": "And we look at, really,\na more interesting case because most graphs are\ngoing to have cycles in them.",
    "start": "1622260",
    "end": "1628380"
  },
  {
    "text": "But we will stay\nwith the special case of no negative edges, now. All right?",
    "start": "1628380",
    "end": "1633840"
  },
  {
    "text": "So Dijkstra's algorithm doesn't\nwork for negative edges. So it's different.",
    "start": "1633840",
    "end": "1640070"
  },
  {
    "text": "This algorithm is not\nsubsumed by Dijkstra. That's important to understand.",
    "start": "1640070",
    "end": "1645100"
  },
  {
    "text": "So Dijkstra's algorithm\nworks for graphs with cycles. But all of the edge ways have\nto be either 0 or positive.",
    "start": "1645100",
    "end": "1652740"
  },
  {
    "text": "This algorithm works for DAGs\nthat can have negative edges. But you can't have cycles. So both of these algorithms\nhave their place under the sun.",
    "start": "1652740",
    "end": "1660450"
  },
  {
    "text": " So, let's take a look\nat Dijkstra's algorithm.",
    "start": "1660450",
    "end": "1666230"
  },
  {
    "text": "Actually, I guess I have a demo. So, the one demo\nwe have in 6006.",
    "start": "1666230",
    "end": "1677390"
  },
  {
    "text": "[INAUDIBLE] Dijkstra is a very\nstraightforward algorithm. It's not trivial to\nprove its correctness.",
    "start": "1677390",
    "end": "1684590"
  },
  {
    "text": "But from a standpoint of\ncoding, from a standpoint of understanding the flow,\nit's a very straightforward",
    "start": "1684590",
    "end": "1690640"
  },
  {
    "text": "algorithm. One of the reasons\nwhy that's the case is because it's a\ngreedy algorithm.",
    "start": "1690640",
    "end": "1697260"
  },
  {
    "text": "It does things incrementally,\nmaximizing the benefit, as you will.",
    "start": "1697260",
    "end": "1702779"
  },
  {
    "text": "And intuitively builds\nthe shortest paths. And it goes vertex by vertex.",
    "start": "1702780",
    "end": "1708770"
  },
  {
    "text": "So here's a demo\nof Dijkstra, which, the reason I want\nto show you this, is because it will give you some\nintuition as to why Dijkstra",
    "start": "1708770",
    "end": "1715960"
  },
  {
    "text": "works. Now, some points of note.",
    "start": "1715960",
    "end": "1721040"
  },
  {
    "text": "I can't tilt this more\nthan about this much because then these\nballs will fall off. So, cameraman, can you get this?",
    "start": "1721040",
    "end": "1729180"
  },
  {
    "text": "All right? For posterity. So I got an undirected\ngraph here, right?",
    "start": "1729180",
    "end": "1735440"
  },
  {
    "text": "And each of these\nthings are nodes. The balls are the\nnodes of the vertices.",
    "start": "1735440",
    "end": "1741200"
  },
  {
    "text": "And I've drawn the\npicture over there. And G stands for green. And Y stands for\nyellow, et cetera.",
    "start": "1741200",
    "end": "1746350"
  },
  {
    "text": "So, this graph is essentially\nwhat I have up there. And I've put strings connecting\nthese balls, associated",
    "start": "1746350",
    "end": "1756539"
  },
  {
    "text": "with the weights that\nyou see up there.",
    "start": "1756540",
    "end": "1761970"
  },
  {
    "text": "So, if I got this\nright, the string that's connecting the green ball\nto the yellow ball up on top",
    "start": "1761970",
    "end": "1770190"
  },
  {
    "text": "is 19 centimeters. And so on and so forth\nfor these other ones. All right?",
    "start": "1770190",
    "end": "1775250"
  },
  {
    "text": "So, that's Dijkstra. And what do you\nthink I have to do",
    "start": "1775250",
    "end": "1781610"
  },
  {
    "text": "to compute shortest paths,\nmechanically speaking? What do you think I have to do?",
    "start": "1781610",
    "end": "1787500"
  },
  {
    "text": " Yeah, someone. ",
    "start": "1787500",
    "end": "1793741"
  },
  {
    "text": "AUDIENCE: Pick up the\ngreen ball and just-- PROFESSOR: Pick up the\nball and lift it up. That's right. Good. It's worth a cushion.",
    "start": "1793741",
    "end": "1800250"
  },
  {
    "text": "All right, so, let's\nall this works. ",
    "start": "1800250",
    "end": "1805760"
  },
  {
    "text": "So, first, let me show you by\nthose values that I have there. If the green ball is the\nstarting vertex, then",
    "start": "1805760",
    "end": "1815730"
  },
  {
    "text": "the shortest path to the\npurple vertex, p, is 7.",
    "start": "1815730",
    "end": "1821790"
  },
  {
    "text": "And that's the\nclosest node to G. And then, the next\nclosest node is",
    "start": "1821790",
    "end": "1827360"
  },
  {
    "text": "the blue one, which\nis b, which is 12. 7 plus 5. And so on and so forth.",
    "start": "1827360",
    "end": "1833210"
  },
  {
    "text": "And so, if this all works,\nand I haven't tried this out, because this is a one use demo. Once I pull this up, the\nstrings get so tangled up,",
    "start": "1833210",
    "end": "1841780"
  },
  {
    "text": "it doesn't work anymore. All right? So that's why I had to do\nall of this, lug these over. Otherwise, it'd\nbe-- so this is not",
    "start": "1841780",
    "end": "1847779"
  },
  {
    "text": "a computer reversible\nkind of thing. So, if you want to\ncode Dijkstra up. OK, so if I just lift\nit up, and if I do that,",
    "start": "1847780",
    "end": "1854669"
  },
  {
    "text": "and if I tilt it in\nthe right direction. Yeah. I want to that. So you can see that this is a\nlittle bit of fudging going on",
    "start": "1854670",
    "end": "1859720"
  },
  {
    "text": "here, with respect to\ngetting this right. But you see green is up on top. And what is the\nnext one you see? AUDIENCE: Purple.",
    "start": "1859720",
    "end": "1865010"
  },
  {
    "text": "PROFESSOR: Purple. That's good. What's the next one you see? AUDIENCE: Blue. PROFESSOR: Blue. That's good.",
    "start": "1865010",
    "end": "1870220"
  },
  {
    "text": "Y, and then R. And\nstrings that are taught, that have tension in them, are\nthe predecessor vertices, OK?",
    "start": "1870220",
    "end": "1878310"
  },
  {
    "text": "That's the pie. All right? So, again, I computed the\nshortest paths, right?",
    "start": "1878310",
    "end": "1883350"
  },
  {
    "text": "Mechanically. And, if I could have a way\nof measuring the tension on the strings, I have my pie,\nmy predecessor relationship,",
    "start": "1883350",
    "end": "1890921"
  },
  {
    "text": "as well. All right? Now, let's see if this works. This works, right? So, if the second thing doesn't\nwork, don't hold it against me.",
    "start": "1890921",
    "end": "1900270"
  },
  {
    "text": "But, let's say if I take R,\nand I lift it up like that. Yikes.",
    "start": "1900270",
    "end": "1906809"
  },
  {
    "text": "So, R, followed by Y,\nfollowed by B, followed by P, followed by G. Hey.",
    "start": "1906810",
    "end": "1912820"
  },
  {
    "text": "Come on. All right? This works. Thank you. Thank you. All right.",
    "start": "1912820",
    "end": "1919290"
  },
  {
    "text": "So there's actually a\nreason why I did that demo.",
    "start": "1919290",
    "end": "1926750"
  },
  {
    "text": "There's a greedy algorithm here. And, I guess, greedy is gravity. Right?",
    "start": "1926750",
    "end": "1931890"
  },
  {
    "text": "Gravity is greedy. So, obviously, the reason\nwhy those balls are hanging",
    "start": "1931890",
    "end": "1936903"
  },
  {
    "text": "is because they have weight. And they have gravity. And you can imagine that you\ncould now-- people in physics. I don't know anybody\nmajoring in physics.",
    "start": "1936904",
    "end": "1943520"
  },
  {
    "text": "Anyone double majoring in\nphysics or something here? All right. So, you know your Newton's\nlaws of mechanics.",
    "start": "1943520",
    "end": "1950000"
  },
  {
    "text": "And you know about\ngravity, and all of that. So you can imagine that\nyou said, you know, the heck with all this priority\nqueue stuff in the problem set.",
    "start": "1950000",
    "end": "1956775"
  },
  {
    "text": "In the algorithm\nthat we're going to be talking\nabout for Dijkstra, I'm going to do a kinetic\nsimulation of shortest paths",
    "start": "1956775",
    "end": "1963770"
  },
  {
    "text": "in order to get the actual\nvalues of these shortest paths. OK? Now, that would be cool.",
    "start": "1963770",
    "end": "1969790"
  },
  {
    "text": "But it'd be horribly slow. And so, the Dijkstra algorithm\nwe're going to be talking about is going to just compute the\nsteady state, corresponding",
    "start": "1969790",
    "end": "1977980"
  },
  {
    "text": "to the closest vertex that\nis closest to G. All right?",
    "start": "1977980",
    "end": "1984809"
  },
  {
    "text": "So Dijkstra, the algorithm,\nthe intuition behind it, is that it's going to greedily\nconstruct shortest paths.",
    "start": "1984810",
    "end": "1990710"
  },
  {
    "text": "And it's going to\nbe starting with G, which is your source vertex. And then, the first\nthing that it's going to process, and\nfind the shortest path to",
    "start": "1990710",
    "end": "1997455"
  },
  {
    "text": "is going to be\nthe purple vertex. And then the blue. And then the yellow. And then the red. All right? So it actually mimics, to\nsome extent, this demo.",
    "start": "1997455",
    "end": "2006529"
  },
  {
    "text": "All right? So, let's take a look at\nthe pseudocode for Dijkstra.",
    "start": "2006530",
    "end": "2011970"
  },
  {
    "start": "2011970",
    "end": "2040090"
  },
  {
    "text": "So, g is your graph. w are the weights. Small s is the starting vertex.",
    "start": "2040090",
    "end": "2046760"
  },
  {
    "text": "We're going to initialize g\nand s, which means we just mark",
    "start": "2046760",
    "end": "2056370"
  },
  {
    "text": "s a starting vertex. And we're going to also have\nthis capital S, that I'll",
    "start": "2056370",
    "end": "2062780"
  },
  {
    "text": "use these little bars to\ndifferentiate from small s. So this is a set.",
    "start": "2062780",
    "end": "2068199"
  },
  {
    "text": "Capital S is a set. And we're going to\ninitialize that to null.",
    "start": "2068199",
    "end": "2073589"
  },
  {
    "text": "And there's another\nset called Q, which is initialized to\nthe entire set of vertices.",
    "start": "2073590",
    "end": "2080399"
  },
  {
    "text": "And all this means is\nthat, initially, we haven't done any processing. And we don't know the\nshortest paths to any vertex",
    "start": "2080400",
    "end": "2089230"
  },
  {
    "text": "because this set of\nvertices is null. And Q is the set of vertices\nthat need to be processed.",
    "start": "2089230",
    "end": "2096310"
  },
  {
    "text": "And, as we start\nprocessing vertices from Q, we're going to move\nthem to capital S.",
    "start": "2096310",
    "end": "2101960"
  },
  {
    "text": "And they're going to\ncontain the set of vertices that we know the shortest\npaths to already.",
    "start": "2101960",
    "end": "2108660"
  },
  {
    "text": "And that's the invariant\nin this algorithm. s is going to contain\nthe set of vertices that we know the\nshortest paths to.",
    "start": "2108660",
    "end": "2114880"
  },
  {
    "text": " And so, Dijkstra is\na little while loop",
    "start": "2114880",
    "end": "2122970"
  },
  {
    "text": "that says, while\nthey're vertices that need to be processed,\nthen I'm going to take u.",
    "start": "2122970",
    "end": "2132300"
  },
  {
    "text": "And I'm going to\nextract-min from Q.",
    "start": "2132300",
    "end": "2146190"
  },
  {
    "text": "And this is going\nto delete u from Q.",
    "start": "2146190",
    "end": "2154410"
  },
  {
    "text": "And this\ninitialization-- and this is a small s here-- is\ngoing to set d of s to be 0.",
    "start": "2154410",
    "end": "2165240"
  },
  {
    "text": "That's all this\ninitialization does. Because that's all we know. We have a starting vertex.",
    "start": "2165240",
    "end": "2170334"
  },
  {
    "text": "And we know that the shortest\npath to the starting vertex, from the starting vertex, is 0. So, all that means is\nthat, all of the other ones",
    "start": "2170334",
    "end": "2178150"
  },
  {
    "text": "have infinity values. So, at this very first\nstep, it makes sense that extract-min\nQ is going to pull",
    "start": "2178150",
    "end": "2184730"
  },
  {
    "text": "the starting vertex,\nsmall s, out. And is going to assign\nit to this u value.",
    "start": "2184730",
    "end": "2191660"
  },
  {
    "text": "And we're going to\nset s to be-- capital S-- to be capital S union u.",
    "start": "2191660",
    "end": "2202520"
  },
  {
    "text": "And then, all we have to do is\nrelax the edges from the vertex",
    "start": "2202520",
    "end": "2209350"
  },
  {
    "text": "that we just added. So, for each vertex, v\nbelonging to adjacent",
    "start": "2209350",
    "end": "2217910"
  },
  {
    "text": "s, so that you can reach from u. We relax u, v, w.",
    "start": "2217910",
    "end": "2225787"
  },
  {
    "text": " All right? That's it. That's Dijkstra.",
    "start": "2225788",
    "end": "2230916"
  },
  {
    "text": " It's a greedy algorithm.",
    "start": "2230916",
    "end": "2237460"
  },
  {
    "text": "It's iterative. And the reason it's greedy\nis because of this step here. It's just picking\nthe min priority",
    "start": "2237460",
    "end": "2245589"
  },
  {
    "text": "from the un-processed\nvertices, Q. And, essentially,",
    "start": "2245590",
    "end": "2250760"
  },
  {
    "text": "claiming that this min value\nis something that you already",
    "start": "2250760",
    "end": "2257590"
  },
  {
    "text": "computed the shortest paths for. So, when you're putting\nsomething into S,",
    "start": "2257590",
    "end": "2262799"
  },
  {
    "text": "you're saying, I'm done. I know the shortest path\nto this particular vertex.",
    "start": "2262800",
    "end": "2268220"
  },
  {
    "text": "And I need to now process\nit, in the sense that I have to relax the edges that\nare coming out of this vertex.",
    "start": "2268220",
    "end": "2275250"
  },
  {
    "text": "And update the priority\nvalues because relax is going to go change\nthe d values, as we know,",
    "start": "2275250",
    "end": "2282780"
  },
  {
    "text": "corresponding to the vertex,\nv. It might change the value. It might not.",
    "start": "2282780",
    "end": "2288310"
  },
  {
    "text": "But there's a possibility\nthat it would. And you're going to do\nthis for all of the edges that are emanating\nout of the vertex, u.",
    "start": "2288310",
    "end": "2295937"
  },
  {
    "text": "And so you may be changing a\nbunch of different priority values. So the next time\naround, you will",
    "start": "2295937",
    "end": "2300940"
  },
  {
    "text": "get a different minimum\npriority vertex.",
    "start": "2300940",
    "end": "2307270"
  },
  {
    "text": "For two reasons. One is that you've extracted\nout the minimum priority vertex. You've deleted it from\nQ. And the second reason",
    "start": "2307270",
    "end": "2314150"
  },
  {
    "text": "is that these\npriority values change as you go through the loop. All right? And so, in our demo,\nessentially what happened was,",
    "start": "2314150",
    "end": "2321960"
  },
  {
    "text": "the first time, the process\nof lifting the green vertex, corresponding to choosing\nit as a starting vertex.",
    "start": "2321960",
    "end": "2329220"
  },
  {
    "text": "And the first thing\nthat was closest to it, which had the taught\nstring hanging from it,",
    "start": "2329220",
    "end": "2335550"
  },
  {
    "text": "has the min priority value. And you pull that out. And then so on and so\nforth, as you go down.",
    "start": "2335550",
    "end": "2341420"
  },
  {
    "text": "And I'm not going to go\nthrough and prove this. But it's certainly something\nthat is worth reading.",
    "start": "2341420",
    "end": "2346570"
  },
  {
    "text": "It's half of page proof,\nmaybe a page in CLRS. And you should read\nthe proof for Dijkstra,",
    "start": "2346570",
    "end": "2352480"
  },
  {
    "text": "the formal proof for Dijkstra. Which just, essentially,\ndoes all the accounting and gets things right. And uses the lemma that we have,\nwith respect to the relaxation",
    "start": "2352480",
    "end": "2360290"
  },
  {
    "text": "operation being safe. OK?",
    "start": "2360290",
    "end": "2365370"
  },
  {
    "text": "Any questions about Dijkstra? Or about the pseudocode,\nin particular? I guess you guys are going\nto code this at some point.",
    "start": "2365370",
    "end": "2371390"
  },
  {
    "text": "Yeah? AUDIENCE: How are the\nvertices comparable? In what way? PROFESSOR: Oh, so\nthat's a good question. And I should have\nmade that clearer.",
    "start": "2371390",
    "end": "2377515"
  },
  {
    "text": " So, Q is a priority queue.",
    "start": "2377515",
    "end": "2383420"
  },
  {
    "text": "And the priorities of the\nvertices are the d values, OK? ",
    "start": "2383420",
    "end": "2392890"
  },
  {
    "text": "s being null is clear, I hope. That's clear. And then Q being the set of\nvertices are clear, as well.",
    "start": "2392890",
    "end": "2399579"
  },
  {
    "text": "Now, Q is a priority queue, OK? And we'll talk about how\nwe'll implement this priority",
    "start": "2399580",
    "end": "2406530"
  },
  {
    "text": "queue, and the\ncomplexity of Dijkstra, before we're done here. But, as an ADT, as an\nAbstract Data Type,",
    "start": "2406530",
    "end": "2412440"
  },
  {
    "text": "think of Q as being\na priority queue. And there's\npriorities associated with each vertex that's in Q.\nAnd these priorities change.",
    "start": "2412440",
    "end": "2419650"
  },
  {
    "text": "And they're the d values. All right? So the priorities. ",
    "start": "2419650",
    "end": "2430720"
  },
  {
    "text": "So, initially, d of\ns-- small s-- is 0. And all of the other\nones are infinity.",
    "start": "2430720",
    "end": "2437280"
  },
  {
    "text": "So it's clear that, the\nvery first time, you're going to set u to be small s,\nwhich is a starting vertex.",
    "start": "2437280",
    "end": "2442590"
  },
  {
    "text": "And then you relax the\nedges coming out of s, potentially change some of\nthese other infinity values",
    "start": "2442590",
    "end": "2447890"
  },
  {
    "text": "of the vertices\nthat you can reach from s to be less than infinity. And you're going\nto, essentially,",
    "start": "2447890",
    "end": "2455420"
  },
  {
    "text": "change the values of\nthe priority queue. And go around. And then select the min\nvalue the next time.",
    "start": "2455420",
    "end": "2461020"
  },
  {
    "text": "And so on and so forth. OK? Thanks for the question. Any other questions? ",
    "start": "2461020",
    "end": "2469320"
  },
  {
    "text": "OK. So, let's just go through a\ncouple of steps in an example.",
    "start": "2469320",
    "end": "2479350"
  },
  {
    "text": "I'm not going to go\nthrough the whole thing. But you'll see an execution\nof Dijkstra in the nodes.",
    "start": "2479350",
    "end": "2487859"
  },
  {
    "text": "I think it's worth spending\njust a couple of minutes going through the first few steps\nof a Dijkstra execution.",
    "start": "2487860",
    "end": "2496300"
  },
  {
    "text": "Just so how this priority\nqueue works is clear,",
    "start": "2496300",
    "end": "2505340"
  },
  {
    "text": "let's take a look at a directed\ngraph that has five vertices. ",
    "start": "2505340",
    "end": "2522400"
  },
  {
    "text": "So that's 7. ",
    "start": "2522400",
    "end": "2534040"
  },
  {
    "text": "So let's start with a\nbeing the starting vertex. And so d of a is 0.",
    "start": "2534040",
    "end": "2541490"
  },
  {
    "text": "And d of b through\ne are all infinity. Your s is null to begin with.",
    "start": "2541490",
    "end": "2551579"
  },
  {
    "text": "And Q has all of the\nfive vertices in it. ",
    "start": "2551580",
    "end": "2559710"
  },
  {
    "text": "So extract-min is\ngoing to select a. That's the only one that is a 0.",
    "start": "2559710",
    "end": "2566829"
  },
  {
    "text": "Because you've got 0, infinity,\ninfinity, infinity, infinity. And so, you select that,\nand you set s to be a.",
    "start": "2566830",
    "end": "2576130"
  },
  {
    "text": "And once you set s\nto be a, you relax the edges coming out of a. And there's two of them. So you end up with 0, 10,\n3, infinity, infinity.",
    "start": "2576130",
    "end": "2587010"
  },
  {
    "text": "And the next extract-min\nis going to select 3. And you're going to\nset s to be a comma c.",
    "start": "2587010",
    "end": "2594819"
  },
  {
    "text": "And so you're,\nessentially, doing kind of a breadth-first search. But you're being greedy.",
    "start": "2594820",
    "end": "2601100"
  },
  {
    "text": "It's a mixed breadth-first\ndepth-first search. You do a breadth-first\nsearch when you're given a\nparticular vertex, and you look at\nall of the vertices",
    "start": "2601100",
    "end": "2607408"
  },
  {
    "text": "that you can reach\nfrom that vertex. And then you say, I'm\na greedy algorithm. I'm going to pick the\nvertex in this frontier",
    "start": "2607408",
    "end": "2614710"
  },
  {
    "text": "that I've just created, that\nis the shortest distance away from me, that has\nthe lowest priority value.",
    "start": "2614710",
    "end": "2620349"
  },
  {
    "text": "And, in this case, it would be\nc because this other one is 10. And this is shorter. Right? So that's why we\npick c over here.",
    "start": "2620350",
    "end": "2626690"
  },
  {
    "text": "And one last one. Once you process c,\nyou're going to end up",
    "start": "2626690",
    "end": "2632940"
  },
  {
    "text": "processing this\nedge going out here. This edge going out there. This edge going out this way. And you're going to end\nup with 0, 7, 3, 11, 5.",
    "start": "2632940",
    "end": "2645070"
  },
  {
    "text": "And you've processed a bunch\nof edges coming out of c. And, at this point, 0\nis gone and 3 is gone.",
    "start": "2645070",
    "end": "2651730"
  },
  {
    "text": "I'm just writing\nthe values here, just so you know what they are. But these are out of the picture\nbecause, in s, those values",
    "start": "2651730",
    "end": "2657670"
  },
  {
    "text": "should never change. Dijkstra essentially guarantees. And that's the\nproof of correctness",
    "start": "2657670",
    "end": "2663100"
  },
  {
    "text": "that takes a bit of doing,\nis that this value is never",
    "start": "2663100",
    "end": "2668380"
  },
  {
    "text": "going to reduce anymore. The pre-value is\nnever going to reduce. And it's been put into s.",
    "start": "2668380",
    "end": "2673710"
  },
  {
    "text": "But what's remaining now is 5. And that corresponds\nto the e vertex.",
    "start": "2673710",
    "end": "2679090"
  },
  {
    "text": "So s becomes a, c, e.",
    "start": "2679090",
    "end": "2685130"
  },
  {
    "text": "The 5 gets stuck in there. And so on and so forth. All right?",
    "start": "2685130",
    "end": "2690220"
  },
  {
    "text": "So, that's Dijkstra. And now, let's start complexity. ",
    "start": "2690220",
    "end": "2695630"
  },
  {
    "text": "So, it we have the code\nfor Dijkstra on the left, we have an ADT associated\nwith the priority queue.",
    "start": "2695630",
    "end": "2703529"
  },
  {
    "text": "And now, we're back\nto talking like we did early on in the term,\nwhere we compared linked lists,",
    "start": "2703530",
    "end": "2711410"
  },
  {
    "text": "and arrays, and\nheaps, and trees. And said, for a particular\nset of operations,",
    "start": "2711410",
    "end": "2721579"
  },
  {
    "text": "which one is going\nto be the best? OK? So, if you analyze Dijkstra,\nand you look at the pseudocode",
    "start": "2721580",
    "end": "2729099"
  },
  {
    "text": "first, and you say, what are the\noperations that I'm performing?",
    "start": "2729100",
    "end": "2734320"
  },
  {
    "text": " I got an operation here,\ncorresponding to theta v",
    "start": "2734320",
    "end": "2743440"
  },
  {
    "text": "inserts into the priority queue. ",
    "start": "2743440",
    "end": "2753760"
  },
  {
    "text": "And that's inserting\nthings into Q. I got theta v\nextract-min operations.",
    "start": "2753760",
    "end": "2762859"
  },
  {
    "start": "2762860",
    "end": "2768290"
  },
  {
    "text": "I'm only going to delete a\nvertex once, process of vertex once. And that's why I have\ntheta v extract operations.",
    "start": "2768290",
    "end": "2775780"
  },
  {
    "text": "And I have theta e, what\ndecrease key or update",
    "start": "2775780",
    "end": "2782840"
  },
  {
    "text": "key operations because\nwhen I do, I relax here.",
    "start": "2782840",
    "end": "2789690"
  },
  {
    "text": "I'm decreasing the key. ",
    "start": "2789690",
    "end": "2794719"
  },
  {
    "text": "It's in particular,\nit's not an update key. It happens to be a decrease\nkey, which is not a big deal. We don't need to get into that.",
    "start": "2794719",
    "end": "2800620"
  },
  {
    "text": "But you are reducing\nthe d value. So it's a decrease\nkey operation. And, again, it's theta e\nbecause, in a directed graph,",
    "start": "2800620",
    "end": "2811295"
  },
  {
    "text": "you're only going to\nprocess each edge that's coming out of the vertex once. Since you're processing\neach vertex once,",
    "start": "2811295",
    "end": "2817220"
  },
  {
    "text": "and you're looking at\nall of the outgoing edges from that vertex. OK?",
    "start": "2817220",
    "end": "2822530"
  },
  {
    "text": "So that's what you can get\nlooking at the pseudocode. And now, you're a data\nstructure designer.",
    "start": "2822530",
    "end": "2829230"
  },
  {
    "text": "And you have some choices\nhere, with respect to actually implementing\nthe priority queue.",
    "start": "2829230",
    "end": "2834910"
  },
  {
    "text": "And let's look at the complexity\nof Dijkstra for arrays.",
    "start": "2834910",
    "end": "2841030"
  },
  {
    "text": "So, suppose I ended\nup using an array structure for the\npriority queue.",
    "start": "2841030",
    "end": "2848040"
  },
  {
    "text": "But then, what do I have? I have, if I look at\nthis, my extract-min, what",
    "start": "2848040",
    "end": "2857570"
  },
  {
    "text": "is the complexity of\nextract-min in an array? AUDIENCE: Theta v. PROFESSOR: Theta v. And\nwhat's the complexity",
    "start": "2857570",
    "end": "2864270"
  },
  {
    "text": "of a decrease key in an array? I just go access that element.",
    "start": "2864270",
    "end": "2870210"
  },
  {
    "text": "And I change it. State of one, right? So I have theta v\nfor extract-min.",
    "start": "2870210",
    "end": "2879010"
  },
  {
    "text": "I'll just call it ex-min. Theta one for decrease key.",
    "start": "2879010",
    "end": "2886750"
  },
  {
    "text": "And if I go do the\nmultiplication, I get theta v times v plus\ne times 1, or a constant,",
    "start": "2886750",
    "end": "2897289"
  },
  {
    "text": "which is theta v squared. Because I know that\ne is order v squared.",
    "start": "2897290",
    "end": "2903260"
  },
  {
    "text": "Right? If I have a simple graph,\nit may be a complete graph, but-- we talked\nabout this last time.",
    "start": "2903260",
    "end": "2909460"
  },
  {
    "text": "e is, at most, v squared. So I can just call\nthis theta v squared. All right?",
    "start": "2909460",
    "end": "2915340"
  },
  {
    "text": "So we have a theta v squared\nDijkstra implementation that uses an array structure.",
    "start": "2915340",
    "end": "2922012"
  },
  {
    "text": "But do we want to use\nan array structure? What data structure\nshould we use?",
    "start": "2922012",
    "end": "2929290"
  },
  {
    "text": "Yeah? AUDIENCE: Heap. PROFESSOR: You can\nuse it a min-heap. Exactly right. So, if you use a\nbinary min-heap,",
    "start": "2929290",
    "end": "2940840"
  },
  {
    "text": "then my extract-min is\nfinding the min is a constant",
    "start": "2940840",
    "end": "2956830"
  },
  {
    "text": "because you just pick\nit up from the top. But we know that, if you\nwant to update the heap,",
    "start": "2956830",
    "end": "2962770"
  },
  {
    "text": "and delete it, then it's going\nto take that theta log v.",
    "start": "2962770",
    "end": "2968220"
  },
  {
    "text": "And decrease key\nis the same thing. Theta log v. So that's\nworse than array.",
    "start": "2968220",
    "end": "2975336"
  },
  {
    "text": " And if I go do the\nmultiplication again, I get v log v plus e log v. OK?",
    "start": "2975336",
    "end": "2985920"
  },
  {
    "text": "And this is not quite the\ncomplexity that I put up, as some of you may\nremember, last time.",
    "start": "2985920",
    "end": "2994330"
  },
  {
    "text": "This is not the optimum\ncomplexity of Dijkstra. Or an optimal\ncomplexity of Dijkstra.",
    "start": "2994330",
    "end": "3001280"
  },
  {
    "text": "You can actually take this out\nby using a data structure that we won't talk about in 006.",
    "start": "3001280",
    "end": "3008460"
  },
  {
    "text": "But you can read about it. It's not 6006 level material.",
    "start": "3008460",
    "end": "3015660"
  },
  {
    "text": "You're not responsible\nfor this in 006. But it's got a Fibonacci heap. And you might learn\nabout it in 6046.",
    "start": "3015660",
    "end": "3022780"
  },
  {
    "text": "The Fibonacci heap is an\namortized data structure that has theta log\nv for extract-min.",
    "start": "3022780",
    "end": "3031980"
  },
  {
    "text": "And theta one amortized\ntime for decrease key.",
    "start": "3031980",
    "end": "3043090"
  },
  {
    "text": "And what's nice\nabout it is that, once you do that, you end up\nwith theta v log v plus e time.",
    "start": "3043090",
    "end": "3052319"
  },
  {
    "text": "And that's the complexity\nI put up way back, I guess, last Thursday.",
    "start": "3052320",
    "end": "3059610"
  },
  {
    "text": "So that's to show you, with\nrespect to two special cases, we have the DAGs, which are\nlinear time, essentially.",
    "start": "3059610",
    "end": "3068930"
  },
  {
    "text": "And Dijkstra, with amortized,\nand their proper data structure, also,\nessentially, linear time.",
    "start": "3068930",
    "end": "3076100"
  },
  {
    "text": "Right? Next time, we'll look\nat the general case where we have potentially\nnegative cycles. And we end up with algorithms\nthat have greater complexity.",
    "start": "3076101",
    "end": "3084070"
  },
  {
    "text": "See you next time.",
    "start": "3084070",
    "end": "3086220"
  }
]