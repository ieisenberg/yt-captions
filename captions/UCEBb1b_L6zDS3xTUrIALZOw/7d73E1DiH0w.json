[
  {
    "text": " The following content is\nprovided under a Creative Commons license. Your support will help\nMIT OpenCourseWare",
    "start": "0",
    "end": "6050"
  },
  {
    "text": "continue to offer high quality\neducational resources for free. To make a donation or to\nview additional materials",
    "start": "6050",
    "end": "12690"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "12690",
    "end": "25755"
  },
  {
    "text": "PROFESSOR: All right. Welcome to 6.890,\nAlgorithmic Lower Bounds, Fun with Hardness Proofs.",
    "start": "25755",
    "end": "31030"
  },
  {
    "text": "I am your host, Erik Demaine. We have on my left Jayson Lynch\nand Sarah Eisenstat, your TAs.",
    "start": "31030",
    "end": "40100"
  },
  {
    "text": "First question is what\nis this class about? The tag line is\nhardness made easy.",
    "start": "40100",
    "end": "46160"
  },
  {
    "text": "In general, we're interested\nin proving problems hard. Proving that there's no fast\nalgorithms to solve problems",
    "start": "46160",
    "end": "52420"
  },
  {
    "text": "under certain assumptions. And the goal is to give\nyou a practical guide",
    "start": "52420",
    "end": "59520"
  },
  {
    "text": "and give you lots of experience\nin how to prove problems hard, to make that an easy process.",
    "start": "59520",
    "end": "64640"
  },
  {
    "text": "There's a lot of\ntechnique involved, and the more experience\nyou get improving hardness, it becomes relatively\nstraightforward to take",
    "start": "64640",
    "end": "71670"
  },
  {
    "text": "whatever problem you're\ninterested in and prove it hard So the three of us\nare pretty good at it,",
    "start": "71670",
    "end": "77080"
  },
  {
    "text": "and our goal is to share\nwith you that expertise so that everyone's good at it.",
    "start": "77080",
    "end": "83570"
  },
  {
    "text": "This is not a complexity class. Because there are lots of\ncomputational complexity classes at MIT.",
    "start": "83570",
    "end": "89780"
  },
  {
    "text": "So we're not going\nto talk about lots of beautiful deep\nmathematics about relations",
    "start": "89780",
    "end": "95740"
  },
  {
    "text": "between complexity classes. We're just going to use\na lot of those results wholesale without proving them.",
    "start": "95740",
    "end": "101815"
  },
  {
    "text": "And you can take one of the\nmany computational complexity classes to get that background. I will tell you everything you\nneed to know about complexity.",
    "start": "101815",
    "end": "109140"
  },
  {
    "text": "So if you've taken\na complexity class, there will be a small\namount of repetition. Most of it will be contained\nin today's lecture.",
    "start": "109140",
    "end": "114870"
  },
  {
    "text": "But very little repetition, but\nalso no background required. I do expect you to have a\nbackground in algorithms,",
    "start": "114870",
    "end": "121110"
  },
  {
    "text": "because we take a kind of\nalgorithmic perspective. I call it an anti-algorithmic\nperspective, if you like.",
    "start": "121110",
    "end": "129869"
  },
  {
    "text": "And so, yeah. So that's what this class is.",
    "start": "129870",
    "end": "135320"
  },
  {
    "text": "Why would you want\nto take this class? Why prove hardness? Well, the main reason\nis to show that you",
    "start": "135320",
    "end": "140990"
  },
  {
    "text": "can't design algorithms\nin whatever model you're interested in. That encourages you either\nto change the problem, like",
    "start": "140990",
    "end": "147149"
  },
  {
    "text": "to look for\napproximation algorithms, or fixed parameter algorithms. That's, of course, the\ntopics of algorithms class.",
    "start": "147149",
    "end": "152280"
  },
  {
    "text": "Our goal is to prove\nwhen these things are not possible in this class. We're going to master\na lot of techniques.",
    "start": "152280",
    "end": "157629"
  },
  {
    "text": "You'll see a lot of key problems\nto reduce from to your problem.",
    "start": "157630",
    "end": "162800"
  },
  {
    "text": "Get a lot of proof\nstyles that are quite common in the\nliterature, but unless you've done them and\nexperienced them, it's",
    "start": "162800",
    "end": "168910"
  },
  {
    "text": "hard to know what to look for. And one of the big ideas\nin this class is gadgets. And you may have\nseen gadgets before,",
    "start": "168910",
    "end": "175270"
  },
  {
    "text": "but we're going to explore\ngadgets to their fullest. The idea of taking lots\nof small components and combining them together.",
    "start": "175270",
    "end": "182857"
  },
  {
    "text": "Even if you don't\ncare about hardness, I think this class is a\nlot of fun for two reasons. Maybe three.",
    "start": "182857",
    "end": "188790"
  },
  {
    "text": "One is that you see\nlots of cool connections between different problems\nthat you might not think are related at first glance.",
    "start": "188790",
    "end": "194380"
  },
  {
    "text": "Most of the problems\nin this class are equivalent to each other. And it's all about proving that. That's the goal.",
    "start": "194380",
    "end": "201380"
  },
  {
    "text": "We'll also study\nlots of fun problems, like Super Mario Brothers. We'll NP-complete today.",
    "start": "201380",
    "end": "207380"
  },
  {
    "text": "Tetris, we'll do in\na lecture or two. There are also serious problems,\nso if you don't like fun, don't worry.",
    "start": "207380",
    "end": "214019"
  },
  {
    "text": "And in general,\nproving problems hard is really like solving a puzzle. And it's a lot of fun.",
    "start": "214020",
    "end": "219920"
  },
  {
    "text": "And this is one\nof the rare areas where you can basically\nplay with puzzles all day, and in the end have\npublishable papers.",
    "start": "219920",
    "end": "226650"
  },
  {
    "text": "So we're going to do\nthat in particular through an open problem\nsession, which is optional. If you want to\nsolve open problems",
    "start": "226650",
    "end": "233200"
  },
  {
    "text": "that no one knows\nthe answer to, we will try to do it once a week. We'll be sending email\nwith a call for times when",
    "start": "233200",
    "end": "240070"
  },
  {
    "text": "that's ideal for everybody. We talked about background\nand requirements.",
    "start": "240070",
    "end": "247750"
  },
  {
    "text": "So first requirement\nof the class is to fill out the survey, which\nis circulating Does anyone not have a survey?",
    "start": "247750",
    "end": "253060"
  },
  {
    "text": "Good. Everyone has one. So fill that out, so\nwe know who you are.",
    "start": "253060",
    "end": "259230"
  },
  {
    "text": "You should also join\nthe mailing list. By filling out that\nsurvey, you should auto join the mailing list. But just in case, if you\nhaven't, the mailing list",
    "start": "259230",
    "end": "265780"
  },
  {
    "text": "is on the course website.  Yeah.",
    "start": "265780",
    "end": "270810"
  },
  {
    "text": "Good. Another requirement\nis to attend lectures. You're doing good\non that so far.",
    "start": "270811",
    "end": "277260"
  },
  {
    "text": "And you'll have scribe-- I would guess at\nthis scale, you'll",
    "start": "277260",
    "end": "283050"
  },
  {
    "text": "scribe once, probably in a team. But we will figure that\nout as time goes on.",
    "start": "283050",
    "end": "290150"
  },
  {
    "text": "Again, they'll be email about\nsigning up for scribing. Scribing is taking\nnotes in the lecture",
    "start": "290150",
    "end": "295630"
  },
  {
    "text": "so we have another\nform of notes. There will be\nsomething like five P sets every two to three weeks.",
    "start": "295630",
    "end": "301220"
  },
  {
    "text": "The first one will go\nout Tuesday is the plan. And then the big\npart of the class",
    "start": "301220",
    "end": "307390"
  },
  {
    "text": "is the project and presentation,\nso the final project, you could do it on\nalmost anything related",
    "start": "307390",
    "end": "313360"
  },
  {
    "text": "to the content of the class. Typical projects are do\nsomething new theoretically,",
    "start": "313360",
    "end": "318870"
  },
  {
    "text": "prove a problem hard, find\nsome nice open problems, survey existing material, something\nthat's not covered in class.",
    "start": "318870",
    "end": "326620"
  },
  {
    "text": "You can code something. I think in this context,\nthe most natural thing to do is to visualize\ncool proofs that we",
    "start": "326620",
    "end": "332860"
  },
  {
    "text": "cover in class in a new way. You could contribute\nto Wikipedia, or you could make\nsome art piece,",
    "start": "332860",
    "end": "338870"
  },
  {
    "text": "like a sculpture,\nor a performance, or whatever you want\nrelated to hardness proofs.",
    "start": "338870",
    "end": "345080"
  },
  {
    "text": "That's your project\npossibilities. So what is in this class?",
    "start": "345080",
    "end": "351310"
  },
  {
    "text": "I will look at what\nspecific topics are covered. This is on the website.",
    "start": "351310",
    "end": "357320"
  },
  {
    "text": "So a lot of the class will\nbe about NP-completeness, which I will define in a bit.",
    "start": "357320",
    "end": "362440"
  },
  {
    "text": "But we'll also look\nat even harder-- these are all notions of no\npolynomial time algorithm.",
    "start": "362440",
    "end": "367590"
  },
  {
    "text": "We'll do even harder notions\nthen NP, like PSPACE and X time, and so on. In particular, we'll be studying\nthose in the context of games",
    "start": "367590",
    "end": "374640"
  },
  {
    "text": "and puzzles, and there's a whole\ntheory called games, puzzles, and computation, the\ntopic of this book,",
    "start": "374640",
    "end": "380710"
  },
  {
    "text": "which we will talk\nabout at length. Then, we will go to\ninapproximability.",
    "start": "380710",
    "end": "388650"
  },
  {
    "text": "This is not necessarily in\norder, so I should say then. But we'll talk about when you\ncannot find good approximation",
    "start": "388650",
    "end": "394340"
  },
  {
    "text": "algorithms, and what good means\ndepends on what sort of problem you're looking at, and when\nyou cannot find fixed parameter",
    "start": "394340",
    "end": "400860"
  },
  {
    "text": "algorithms, which are fast\nalgorithms when the optimal solutions happens to be small.",
    "start": "400860",
    "end": "406570"
  },
  {
    "text": "So that's all about\nnot polynomial. Then, there's a\nsmall amount of work on understanding the polynomial\naspect for small polynomials,",
    "start": "406570",
    "end": "415180"
  },
  {
    "text": "distinguishing almost\nlinear time from n squared time or n cubed time. That sort of thing.",
    "start": "415180",
    "end": "420925"
  },
  {
    "text": "Then there are other\nsorts of problems. We can think about less\ncommon types of problems, like where you want to count\nthe number of solutions",
    "start": "420925",
    "end": "426879"
  },
  {
    "text": "instead of just\nfind one, or tell whether the solution is unique. There's some economic\ngame theory stuff.",
    "start": "426880",
    "end": "433560"
  },
  {
    "text": "This existential\ntheory, the reals, comes up in some\ngeometric settings. And if there's time,\nwe'll talk a little bit",
    "start": "433560",
    "end": "438720"
  },
  {
    "text": "about undecidability,\nalthough that's a pretty different world. That's where there's\nno algorithm given",
    "start": "438720",
    "end": "445250"
  },
  {
    "text": "any finite time bound. So that's in a nutshell\nwhat's the entire class is.",
    "start": "445250",
    "end": "451690"
  },
  {
    "text": "Today, we're going to do\na sort of crash course on computational complexity.",
    "start": "451690",
    "end": "458250"
  },
  {
    "text": "Most of what you should need\nfor the entire course, I think, will fit in about 40 minutes.",
    "start": "458250",
    "end": "465540"
  },
  {
    "text": "Maybe 50 minutes. Something. And that will serve\nas a guideline. If anything's not clear, if I\ngo too fast, feel free to stop,",
    "start": "465540",
    "end": "472940"
  },
  {
    "text": "ask questions during\nclass or after class. And let's see.",
    "start": "472940",
    "end": "478159"
  },
  {
    "text": "So we have some-- there's no real\ntextbook for the class, but there are two\nrecommended reading books.",
    "start": "478160",
    "end": "485550"
  },
  {
    "text": "They are Garey and Johnson. Computers and\nIntractability is the title. Most people call it\nGarey and Johnson.",
    "start": "485550",
    "end": "491560"
  },
  {
    "text": "This is an old book\nfrom pretty much early on in the world\nof NP completeness, but it's still a\nreally good book.",
    "start": "491560",
    "end": "498460"
  },
  {
    "text": "So that's good to check out. And then there's my\nbook with Bob Hearn.",
    "start": "498460",
    "end": "504270"
  },
  {
    "text": "This is Bob Hearn's PhD\nthesis at MIT, Games, Puzzles, and Computation. This is available\nelectronically for free online",
    "start": "504270",
    "end": "511090"
  },
  {
    "text": "to all MIT people. So if you look it\nup in MIT libraries, it's actually linked right here.",
    "start": "511090",
    "end": "517599"
  },
  {
    "text": "So you're seeing that base. You can get an electronic copy. If you want to buy one,\ntalk to me or order it.",
    "start": "517600",
    "end": "523539"
  },
  {
    "text": " There's a couple other\nlinks on the website. There was some followup\nto the Garey and Johnson",
    "start": "523539",
    "end": "531000"
  },
  {
    "text": "book by Johnson and some\nother cool websites.",
    "start": "531000",
    "end": "536800"
  },
  {
    "text": "All right. So I think that is the\nadministrative part.",
    "start": "536800",
    "end": "542180"
  },
  {
    "text": "Now we can start the\nfun part of the class. So let's do our crash\ncourse on complexity.",
    "start": "542180",
    "end": "550449"
  },
  {
    "text": "So if you've seen complexity\nbefore, some of this will be review. We start with our favorite\nclass of problems that can",
    "start": "550449",
    "end": "562060"
  },
  {
    "text": "be solved in polynomial time. ",
    "start": "562060",
    "end": "575490"
  },
  {
    "text": "Say on a RAM, I should\nspecify model of computation and exactly what a\nproblem is, but I'll be a little bit informal here.",
    "start": "575490",
    "end": "581050"
  },
  {
    "text": "Polynomial time means\nn to some constant,",
    "start": "581050",
    "end": "586190"
  },
  {
    "text": "where n is the size of\nthe problem instance. And we will talk\na little bit more",
    "start": "586190",
    "end": "592089"
  },
  {
    "text": "about subtleties in defining n. But usually, polynomial\ntime is pretty clear.",
    "start": "592090",
    "end": "597270"
  },
  {
    "text": "This is what we consider\ngood algorithms. An example of something\nwe consider bad is exponential time.",
    "start": "597270",
    "end": "602700"
  },
  {
    "text": "So x is going to be all\nthe problems that can be solved in exponential time. ",
    "start": "602700",
    "end": "611470"
  },
  {
    "text": "And exponential's a little\nless a uniquely defined, but I'll define it this way.",
    "start": "611470",
    "end": "617330"
  },
  {
    "text": "I think this is the\nusual definition for x. . So 2 to a polynomial. Of course, it could\nbe 3 if you prefer.",
    "start": "617330",
    "end": "624519"
  },
  {
    "text": "Any constant will\nbe the same here. This constant dwarfs\nany constant there.",
    "start": "624520",
    "end": "629950"
  },
  {
    "text": "So that is-- this is a\nhuge class, any problem you can in exponential time. Most problems can be\nsolved exponential time,",
    "start": "629950",
    "end": "636530"
  },
  {
    "text": "though not all. Most problems we\nencounter, I should say.",
    "start": "636530",
    "end": "642930"
  },
  {
    "text": "And then I'll define\none more just for kicks. R is a recursively\nenumerable problems, or recursive problems.",
    "start": "642930",
    "end": "649169"
  },
  {
    "text": "These are all the problems that\ncan be solved in finite time. ",
    "start": "649169",
    "end": "656330"
  },
  {
    "text": "Always. And these are all\nworst case bounds. So I'm going to have\na running picture.",
    "start": "656330",
    "end": "663790"
  },
  {
    "text": "This is my favorite\npicture to draw. We have on the x-axis\na somewhat vague notion",
    "start": "663790",
    "end": "673750"
  },
  {
    "text": "of computational difficulty. What you might call\nhardness colloquially.",
    "start": "673750",
    "end": "680610"
  },
  {
    "text": "This is a bit informal,\nbut it's still a useful way to think about things. So this initial\nchunk here is going",
    "start": "680610",
    "end": "688139"
  },
  {
    "text": "to be P. I'm going to\nleave in some space to fill in some other things.",
    "start": "688140",
    "end": "693440"
  },
  {
    "text": "And probably go to here. And this part is\ngoing to be EXP,",
    "start": "693440",
    "end": "703839"
  },
  {
    "text": "and then everything to\nthe left of this line",
    "start": "703840",
    "end": "711830"
  },
  {
    "text": "are the problems that are\nsolvable in finite time. Everything to the\nright of that line is not solvable by algorithms.",
    "start": "711830",
    "end": "717149"
  },
  {
    "text": "That would be undecidable. OK. So obviously, anything\nwe saw in polynomial time",
    "start": "717150",
    "end": "722440"
  },
  {
    "text": "can also be solved\nin exponential time. That's all that this is saying. Cool. So I have examples.",
    "start": "722440",
    "end": "730980"
  },
  {
    "text": "I'll give you some\nexamples to think about. For example, n by n Chess.",
    "start": "730980",
    "end": "740010"
  },
  {
    "text": "So this is, I give you a Chess\nconfiguration on an n by n, and I want to know,\nlet's say, white to move. Can white force a win?",
    "start": "740010",
    "end": "748600"
  },
  {
    "text": "This turns out to be\nsolvable in exponential time,",
    "start": "748600",
    "end": "754790"
  },
  {
    "text": "and is not solvable\nin polynomial time.",
    "start": "754790",
    "end": "761519"
  },
  {
    "text": "So that's a nice result.\nSomething we will get to. Another example is Tetris,\nsuitably generalized.",
    "start": "761520",
    "end": "772019"
  },
  {
    "text": "So we're thinking\nabout problems where you have all the information. Usually in Tetris, you\ndon't know all the pieces that are going to come.",
    "start": "772020",
    "end": "777368"
  },
  {
    "text": "But supposing you knew\nthe future, I give you the entire sequence of pieces\nthat are going to come,",
    "start": "777368",
    "end": "782449"
  },
  {
    "text": "sort of a Tetris puzzle. They used to publish these\nin Nintendo Power Magazine. And you want to\nknow, can I survive",
    "start": "782450",
    "end": "788220"
  },
  {
    "text": "from this board position? Can I survive this\nsequence of pieces This is also in EXP. You can solve this\nin exponential time.",
    "start": "788220",
    "end": "794800"
  },
  {
    "text": "That's a little more obvious. But we don't know whether\nit's in P. Probably it's not,",
    "start": "794800",
    "end": "803940"
  },
  {
    "text": "and we'll see why in a moment. ",
    "start": "803940",
    "end": "811140"
  },
  {
    "text": "If you've taken an\nalgorithms class, you know tons of\nexamples of problems that are in P, like shortest\npaths or lots of good things.",
    "start": "811140",
    "end": "820860"
  },
  {
    "text": "Halting problem, you've\nprobably heard of. Kind of a classic.",
    "start": "820860",
    "end": "828470"
  },
  {
    "text": "Halting problem is, given an\nalgorithm, does it terminate, or given some computer\ncode, does it terminate?",
    "start": "828470",
    "end": "835780"
  },
  {
    "text": "This is not recursive,\nmeaning there's no algorithm to solve it in\nfinite time in the worst case.",
    "start": "835780",
    "end": "843090"
  },
  {
    "text": "There's a more\ndepressing result, which is that in\nfact, most problems-- let's say most decision\nproblems are not in R.",
    "start": "843090",
    "end": "858930"
  },
  {
    "text": "Most problems cannot be\nsolved by an algorithm. If you haven't seen that,\nit's cool result. Basically,",
    "start": "858930",
    "end": "864550"
  },
  {
    "text": "the proof is that the number\nof problems in the universe",
    "start": "864550",
    "end": "872810"
  },
  {
    "text": "is about 2 to the N. And\nthe number of algorithms is only about N. So if you\nknow set theory, great.",
    "start": "872810",
    "end": "881020"
  },
  {
    "text": "Otherwise, ignore this sentence. So you could think of an\nalgorithm as a number.",
    "start": "881020",
    "end": "887180"
  },
  {
    "text": "It's like, you take this\nstring and convert it to a giant number. So that's integers over here.",
    "start": "887180",
    "end": "893420"
  },
  {
    "text": "You can think of\nproblems as a mapping from inputs to Yes or No. Yes or No is the 2.",
    "start": "893420",
    "end": "898810"
  },
  {
    "text": "Inputs is the N. This is\nthe same as real numbers. This is the integers, and there\nare a lot more real numbers",
    "start": "898810",
    "end": "905630"
  },
  {
    "text": "than integers. You probably heard of that. So this means most problems have\nno algorithm if an algorithm can only solve one problem.",
    "start": "905630",
    "end": "911780"
  },
  {
    "text": "That's the sad news of life. Luckily, most of the\nproblems we tend to pose do have an algorithm, and\nit's more about P versus EXP",
    "start": "911780",
    "end": "918975"
  },
  {
    "text": "that this class is about. So let's go to more\ninteresting things.",
    "start": "918975",
    "end": "925209"
  },
  {
    "text": " I'm going to define a class\nNP, which is in between here.",
    "start": "925210",
    "end": "935560"
  },
  {
    "text": "In between P and EXP. ",
    "start": "935560",
    "end": "944630"
  },
  {
    "text": "So as I said, decision\nproblems are problems where the answer is Yes or No. ",
    "start": "944630",
    "end": "951670"
  },
  {
    "text": "There are lots of possible\ndefinitions of NP. I will cover two. ",
    "start": "951670",
    "end": "958628"
  },
  {
    "text": "I would like there\nto be an algorithm to solve the problem\nin polynomial time, but not in a regular\nmodel of computation,",
    "start": "958629",
    "end": "965470"
  },
  {
    "text": "But with something I\ncall a lucky algorithm. ",
    "start": "965470",
    "end": "973980"
  },
  {
    "text": "Lucky algorithm\ncomes to a decision, and it always makes\nthe right one.",
    "start": "973980",
    "end": "979504"
  },
  {
    "text": "It's just lucky. It doesn't have any reason to\nbelieve that's the right one. It just always makes the\nright choice given the choice",
    "start": "979504",
    "end": "985390"
  },
  {
    "text": "between two options, let's say. So this is, you\nmake lucky guesses. You always guess the right one.",
    "start": "985390",
    "end": "993810"
  },
  {
    "text": "It's a little bit biased\nin a way that I should say. So let me be a\nlittle more precise.",
    "start": "993810",
    "end": "998930"
  },
  {
    "text": "This is called a\nnon-deterministic model. And the N in NP is\nnon-deterministic.",
    "start": "998930",
    "end": "1007570"
  },
  {
    "start": "1007570",
    "end": "1013090"
  },
  {
    "text": "So the idea is\nthat the algorithm makes a series of guesses. It could do it at the\nbeginning, or could do it",
    "start": "1013090",
    "end": "1019288"
  },
  {
    "text": "in the middle of\nthe computation. And eventually, it\noutputs an answer.",
    "start": "1019288",
    "end": "1026189"
  },
  {
    "text": "So it's going to say\neither Yes or No. And what we guarantee in this\nweird non-deterministic lucky",
    "start": "1026190",
    "end": "1034589"
  },
  {
    "text": "model of computation is that\nyou will be led to a Yes answer",
    "start": "1034589",
    "end": "1040660"
  },
  {
    "text": "if it's possible. So it guesses--\nthis is asymmetric. ",
    "start": "1040660",
    "end": "1061640"
  },
  {
    "text": "So what this means is say\nyou run your magical lucky algorithm, and it outputs No. That means no matter\nwhat set of choices",
    "start": "1061640",
    "end": "1069919"
  },
  {
    "text": "you made for each guess, you\nwould always get to a No. If you get a Yes\nanswer, you just",
    "start": "1069920",
    "end": "1075250"
  },
  {
    "text": "know there's some set of guesses\nthat lead to a Yes answer. So one is an existential\nquantifier, one's universal.",
    "start": "1075250",
    "end": "1081520"
  },
  {
    "text": "So this is asymmetric. There is a notion of CoNP,\nwhich is exactly the reverse.",
    "start": "1081520",
    "end": "1089430"
  },
  {
    "text": "CoNP, you let's say\nflip Yes with No. So CoNP, you prefer no\nanswers if you can get them.",
    "start": "1089430",
    "end": "1098460"
  },
  {
    "text": "All right. So let me give another\ndefinition of NP.",
    "start": "1098460",
    "end": "1105390"
  },
  {
    "start": "1105390",
    "end": "1128434"
  },
  {
    "text": "Another way to think of the\nsame definition, really. ",
    "start": "1128434",
    "end": "1156350"
  },
  {
    "text": "So you can also\nthink of NP problems as problems that have solutions\nthat are relatively succinct and can be checked\nin polynomial time.",
    "start": "1156350",
    "end": "1163490"
  },
  {
    "text": "I guess really they need to\nbe checkable efficiently. So what you can think\nof this as saying is,",
    "start": "1163490",
    "end": "1171070"
  },
  {
    "text": "well, every time I\nmake a guess, I'll write down whether I went\nleft or went right in my maze,",
    "start": "1171070",
    "end": "1176559"
  },
  {
    "text": "I guess. And so that you could\nthink of as a certificate. If you know what the right\nsequence of guesses are,",
    "start": "1176560",
    "end": "1182910"
  },
  {
    "text": "of course, you can\nrun the algorithm, because it's a polynomial\ntime algorithm. Conversely, if I don't have\nthe solution to the problem,",
    "start": "1182910",
    "end": "1191900"
  },
  {
    "text": "yet I'm told that it exists,\nat the top of my algorithm, I could just guess what that\nsolution is, and then check it.",
    "start": "1191900",
    "end": "1198470"
  },
  {
    "text": "So if I'm given\nsuch an algorithm, I can convert it into\na lucky algorithm. If I'm given a\nlucky algorithm, I can convert it into one of\nthese checking algorithms.",
    "start": "1198470",
    "end": "1206650"
  },
  {
    "text": "OK.  So let's do an example.",
    "start": "1206650",
    "end": "1213274"
  },
  {
    "text": " Let's say Tetris is in NP.",
    "start": "1213275",
    "end": "1222880"
  },
  {
    "text": "So if I give you a board, and\nI give you a sequence of pieces",
    "start": "1222880",
    "end": "1228070"
  },
  {
    "text": "that are going to come. How would I prove to\nyou that I can survive those sequence of pieces? ",
    "start": "1228070",
    "end": "1234840"
  },
  {
    "text": "AUDIENCE: Say where they go? PROFESSOR: Just\nsay where they go. Say what sequence or moves I\npress, and at what times say.",
    "start": "1234840",
    "end": "1241960"
  },
  {
    "text": "Just where should\nI drop each piece? So then all you need to do\nfor this definition is check",
    "start": "1241960",
    "end": "1247230"
  },
  {
    "text": "that that's about\nsolution that you never have to push a piece\nup, for example, to get it into the\nright position.",
    "start": "1247230",
    "end": "1255100"
  },
  {
    "text": "Or you can think\nof the same thing as an algorithm\nthat says, oh, OK. Every time I have to press left,\nor right, or wait a second,",
    "start": "1255100",
    "end": "1261590"
  },
  {
    "text": "or push down, I'll\njust guess which one to do, and then do that. So these are the same\nalgorithm, essentially.",
    "start": "1261590",
    "end": "1269570"
  },
  {
    "text": "And that's why Tetris is in NP. In general, let's see. Every problem that I can\nsolve in polynomial time,",
    "start": "1269570",
    "end": "1277250"
  },
  {
    "text": "of course, I can solve in\nnon-deterministic polynomial time, so that's\nthat containment. If I have an NP\nproblem and I want",
    "start": "1277250",
    "end": "1284010"
  },
  {
    "text": "to solve it in\nexponential time, well, I could just simulate all the\npossible guessing paths,",
    "start": "1284010",
    "end": "1289090"
  },
  {
    "text": "because I run for\nonly polynomial time. And so for each one,\nmaybe I have two choices. I'll just try both.",
    "start": "1289090",
    "end": "1294680"
  },
  {
    "text": "I'll do this sort\nof depth research. And yeah. I have exponential is\nexactly 2 to that polynomial,",
    "start": "1294680",
    "end": "1302390"
  },
  {
    "text": "so I can afford to branch\nin both directions. So I guess my guesses\nhere are just binary.",
    "start": "1302390",
    "end": "1307490"
  },
  {
    "text": "I could afford to branch\nin both directions, and eventually see whether\nany of them leads to a Yes. I could also figure out whether\nany of them leads to a No.",
    "start": "1307490",
    "end": "1314810"
  },
  {
    "text": "But in general, NP\nis contained in EXP. Cool.",
    "start": "1314810",
    "end": "1321400"
  },
  {
    "text": "Still not too interesting.  Where it gets\ninteresting is when",
    "start": "1321400",
    "end": "1327670"
  },
  {
    "text": "we start talking about\nhardness, which is next. I should mention big open\nquestion is whether there's",
    "start": "1327670",
    "end": "1335340"
  },
  {
    "text": "any problem in\nhere in NP minus P. This is the same as P\nequals NP open problem.",
    "start": "1335340",
    "end": "1341020"
  },
  {
    "text": "Most sane people in the universe\nbelieve P does not equal NP.",
    "start": "1341020",
    "end": "1346140"
  },
  {
    "text": "What this means intuitively is\nthat you can't engineer luck.",
    "start": "1346140",
    "end": "1352570"
  },
  {
    "text": "Luck shouldn't exist\nin the real world. You can't just like,\ngo one way or the other",
    "start": "1352570",
    "end": "1358606"
  },
  {
    "text": "and always make\nthe right choice. You could make a random choice. You could try both choices. But you shouldn't be able to\nalways make the right choice",
    "start": "1358606",
    "end": "1365820"
  },
  {
    "text": "for all problems. That seems insane. So if you believe that, you\nbelieve P does not equal NP and you believe there's some\nthings in between those two",
    "start": "1365820",
    "end": "1372920"
  },
  {
    "text": "lines. But we don't know,\nunfortunately. So let me talk about hardness.",
    "start": "1372920",
    "end": "1383250"
  },
  {
    "text": "So if I have some\ncomplexity class X, X could be NP, or\nEXP at this point.",
    "start": "1383250",
    "end": "1391540"
  },
  {
    "text": "P we won't talk about. P hardness is a little weird. ",
    "start": "1391540",
    "end": "1397457"
  },
  {
    "text": "I'm not going to define this\nformally until a little bit later in today's class. ",
    "start": "1397457",
    "end": "1408670"
  },
  {
    "text": "So problem is X-hard if\nit's sort of the hardest problem in the class X, if it's\nas hard as every other problem",
    "start": "1408670",
    "end": "1415540"
  },
  {
    "text": "in X. Actually, this\nproblem may not be in X, so I should say it's hard\nas every problem in X.",
    "start": "1415540",
    "end": "1422700"
  },
  {
    "text": "So what that means in this\npicture is the following.",
    "start": "1422700",
    "end": "1431029"
  },
  {
    "text": " So every problem from\nhere onward is EXP-hard.",
    "start": "1431030",
    "end": "1438380"
  },
  {
    "text": " And every problem from\nhere onward is NP-hard.",
    "start": "1438380",
    "end": "1448130"
  },
  {
    "text": " Whoops.",
    "start": "1448130",
    "end": "1453760"
  },
  {
    "text": "Here. We won't talk about P hardness. That's a notion in\nparallel computing.",
    "start": "1453760",
    "end": "1460505"
  },
  {
    "text": "I mean, maybe we'll have\ntime to talk about it, but it's not\ncurrently on the plan. So this is the lower\nbound side, right?",
    "start": "1460505",
    "end": "1468517"
  },
  {
    "text": "You're proving that\nyou're at least as hard as the very\nhardest problem in NP, or you're at least as hard\nas the problem in EXP.",
    "start": "1468517",
    "end": "1476590"
  },
  {
    "text": "The reason, the only reason,\nI know that Chess is not NP",
    "start": "1476590",
    "end": "1483510"
  },
  {
    "text": "is because I know that\nChess is actually X-hard. I know it's at least as hard\nas all problems solvable",
    "start": "1483510",
    "end": "1489830"
  },
  {
    "text": "an exponential time. And there's a great theorem\ncalled time hierarchy theorem that tells you that P does\nnot equal EXP in particular.",
    "start": "1489830",
    "end": "1498000"
  },
  {
    "text": "So we know there are\nsome problems in EXP that are not in P. Some problems that\nrequire exponential time can't",
    "start": "1498000",
    "end": "1504200"
  },
  {
    "text": "be done in polynomial time. And we know that Chess is\nas hard as all of them, so in particular, it also can't\nbe solved in polynomial time.",
    "start": "1504200",
    "end": "1512882"
  },
  {
    "text": "Mind you, though, I haven't\ndefined what as hard as a means yet, but I will get there.",
    "start": "1512882",
    "end": "1519320"
  },
  {
    "text": "Another good term to\nknow is X-completeness. This is just the and of two\nthings, being X-hard and being",
    "start": "1519320",
    "end": "1529090"
  },
  {
    "text": "in X. So in my picture, this\ndot right here is NP-complete.",
    "start": "1529090",
    "end": "1539809"
  },
  {
    "text": " And this dot right here is--",
    "start": "1539810",
    "end": "1547230"
  },
  {
    "text": "got to write it this way-- is X-complete. ",
    "start": "1547230",
    "end": "1555671"
  },
  {
    "text": "OK. I already mentioned\nthat Chess is in EXP. So in fact, Chess is X-complete.",
    "start": "1555671",
    "end": "1560919"
  },
  {
    "text": "It means there's an upper bound\nsaying that you can solve it in exponential time. There's a lower bound\nsaying that it's at least as",
    "start": "1560920",
    "end": "1566360"
  },
  {
    "text": "hard as everything in EXP. And both are true, so you would\nknow you're kind of right here. From the resolution\nof this picture,",
    "start": "1566360",
    "end": "1572770"
  },
  {
    "text": "that's all you could\nhope to know about Chess. ",
    "start": "1572770",
    "end": "1578360"
  },
  {
    "text": "So, good. ",
    "start": "1578360",
    "end": "1584350"
  },
  {
    "text": "One more class of problems\ngood to know about, and it will come up a lot in\ngames, is the notion of PSPACE.",
    "start": "1584350",
    "end": "1594870"
  },
  {
    "text": "So so far, we've only\nthought about time. But usually, we\nmeasure algorithms in terms of time and space. How much memory does\nyour algorithm use?",
    "start": "1594870",
    "end": "1602520"
  },
  {
    "text": "And so PSPACE is going to be, I\nguess, say let's say problems.",
    "start": "1602520",
    "end": "1609005"
  },
  {
    "start": "1609005",
    "end": "1618185"
  },
  {
    "text": "As you might guess, this\nis problems solvable in polynomial space. In general, if you can solve\na problem in polynomial space,",
    "start": "1618185",
    "end": "1625560"
  },
  {
    "text": "you can solve it in\nexponential time, because there are only\nexponentially many states of your machine if you\nonly have polynomial space.",
    "start": "1625560",
    "end": "1632600"
  },
  {
    "text": "So PSPACE fits here\nin between NP and EXP.",
    "start": "1632600",
    "end": "1640320"
  },
  {
    "text": " And of course, there's\nPSPACE-hard and",
    "start": "1640320",
    "end": "1654153"
  },
  {
    "text": "PSPACE-complete. ",
    "start": "1654154",
    "end": "1661190"
  },
  {
    "text": "If you don't remember\nanything from today except one blackboard,\nremember this blackboard.",
    "start": "1661190",
    "end": "1666740"
  },
  {
    "text": "It's like the cheat sheet\nto everything we've defined. You just have to remember\nwhat all the letters mean.",
    "start": "1666740",
    "end": "1673039"
  },
  {
    "text": "But not too hard. So that's pretty much all\nthe classes we'll be using. There are a few others.",
    "start": "1673040",
    "end": "1679059"
  },
  {
    "text": "I'm sorry. I'll give you one example to\ngo with our other examples. The problem we'll look\nat today is Rush Hour.",
    "start": "1679060",
    "end": "1685870"
  },
  {
    "text": " This is a one\nplayer puzzle, where you're trying to move the\ncars, and they could only",
    "start": "1685870",
    "end": "1692580"
  },
  {
    "text": "go vertically or horizontally. This is in PSPACE, which\nis maybe not so obvious.",
    "start": "1692580",
    "end": "1701110"
  },
  {
    "text": "And actually, it's\nPSPACE-complete. So this is from the\ndiagram, PSPACE-complete",
    "start": "1701110",
    "end": "1712570"
  },
  {
    "text": "is harder than NP-complete. Now of course, we don't actually\nknow whether these two points are the same.",
    "start": "1712570",
    "end": "1718904"
  },
  {
    "text": "It's kind of annoying. We don't know whether these\ntwo points are the same. We don't know whether these\ntwo points are the same.",
    "start": "1718904",
    "end": "1724180"
  },
  {
    "text": "This whole thing could collapse. We do know these two\npoints are different. So somewhere here, or here, or\nhere, we have a positive range.",
    "start": "1724180",
    "end": "1731890"
  },
  {
    "text": "Most people believe all of\nthese have problems in them, so none of these\nthings are the same.",
    "start": "1731890",
    "end": "1737650"
  },
  {
    "text": "It could be NP-complete is\nthe same as PSPACE-complete. But again, most people\nbelieve these are different.",
    "start": "1737650",
    "end": "1742960"
  },
  {
    "text": "So in some sense, Rush\nHour, which is here, is harder than\nTetris, which is here. ",
    "start": "1742960",
    "end": "1750730"
  },
  {
    "text": "Cool. And if you believe that either\none of these is non-empty,",
    "start": "1750730",
    "end": "1756779"
  },
  {
    "text": "then we know that Rush Hour\ndoes not have a polynomial time algorithm. So to show that Rush Hour is\nnot in P, you have a choice.",
    "start": "1756780",
    "end": "1763679"
  },
  {
    "text": "You could prove either\none of these as non-empty. For Tetris, you have\nto prove this one. So you'd be less famous\nif you prove this one.",
    "start": "1763679",
    "end": "1770690"
  },
  {
    "text": "Still pretty famous, but you\nwouldn't win the million dollar bounty that's on P versus NP. ",
    "start": "1770690",
    "end": "1777380"
  },
  {
    "text": "All right. There are bigger classes. We talked about\nexponential time. You can, of course, talk\nabout exponential space.",
    "start": "1777380",
    "end": "1784282"
  },
  {
    "text": "In general, these interleave. You go polynomial\ntime, polynomial space, exponential time, exponential\nspace, doubly exponential time,",
    "start": "1784282",
    "end": "1791440"
  },
  {
    "text": "doubly exponential\nspace, and so on. That's the order in\nwhich they occur.",
    "start": "1791440",
    "end": "1797280"
  },
  {
    "text": "The only things we know\nis that polynomial time is different from\nexponential time is different from doubly\nexponential time,",
    "start": "1797280",
    "end": "1803144"
  },
  {
    "text": "or any function of time, really. And we know that\npolynomial space is different from exponential\nspace is different from doubly",
    "start": "1803144",
    "end": "1810360"
  },
  {
    "text": "exponential space. But we don't know\nabout the interrelation between time and space. That's one of the big questions.",
    "start": "1810360",
    "end": "1816460"
  },
  {
    "text": "The other big question\nis non-determinism. One fun fact you should know\nis that PSPACE equals NPSPACE.",
    "start": "1816460",
    "end": "1825300"
  },
  {
    "text": "This is a useful fact. NPSPACE is non-deterministic\npolynomial space.",
    "start": "1825300",
    "end": "1831830"
  },
  {
    "text": "So you take a lucky\nalgorithm, and you don't guarantee how\nmuch time it takes, it will be a most\nexponential time.",
    "start": "1831830",
    "end": "1837134"
  },
  {
    "text": "You only guarantee the\namount of space it uses is, at most, polynomial.",
    "start": "1837134",
    "end": "1842180"
  },
  {
    "text": "This is a theorem\ncalled Savages Theorem, and it works for\nany space bound. In general, the\nspace bound, I think,",
    "start": "1842180",
    "end": "1847366"
  },
  {
    "text": "grows to the square\nof its original, if you want to convert\nnon-deterministic to deterministic. This is useful for Rush Hour,\nbecause to play a Rush Hour",
    "start": "1847366",
    "end": "1855191"
  },
  {
    "text": "game, in general, the number\nof moves you might have to make is exponential, so\nit's not obviously",
    "start": "1855191",
    "end": "1860929"
  },
  {
    "text": "in NP, because NP\nwould have to have a short polynomial-length\nsolution that you can check in polynomial time.",
    "start": "1860930",
    "end": "1868429"
  },
  {
    "text": "But Rush Hour, you can\nsolve in polynomial space if you're really lucky\nbecause you say, well, what move should I make? Well, I'll guess one,\nthen I'll make that move.",
    "start": "1868430",
    "end": "1875449"
  },
  {
    "text": "Guess another move. Make the move. And just maintaining\nthe state of the board only takes polynomial space.",
    "start": "1875449",
    "end": "1881740"
  },
  {
    "text": "So then if you solve\nit, you're happy. If there's no way to solve\nit, you will return No.",
    "start": "1881740",
    "end": "1887660"
  },
  {
    "text": "I guess you have a timer. After you've made\nexponentially many moves, if you still haven't solved\nthe puzzle, you can return No.",
    "start": "1887660",
    "end": "1893789"
  },
  {
    "text": "And in the lucky\nworld, that means you will find a solution\nif there is one. Conveniently, lucky\nalgorithms can",
    "start": "1893790",
    "end": "1899730"
  },
  {
    "text": "be turned into\nregular algorithms when you're only worried\nabout space bounds. And so that's how you prove\nRush Hour is in PSPACE.",
    "start": "1899730",
    "end": "1907730"
  },
  {
    "text": "So that's a good fact to know.  Cool.",
    "start": "1907730",
    "end": "1913630"
  },
  {
    "text": "All right. There's one key thing\nwe haven't defined yet, which is as hard as.",
    "start": "1913630",
    "end": "1919220"
  },
  {
    "text": "So let's get to that. This is really the\nheart of the class.",
    "start": "1919220",
    "end": "1925669"
  },
  {
    "text": "Let me go up there. ",
    "start": "1925669",
    "end": "1961230"
  },
  {
    "text": "So this class is really\nall about one notion, and that notion is reductions.",
    "start": "1961230",
    "end": "1967040"
  },
  {
    "text": "So if I have two\nproblems A and B, then there's this notion of\na reduction from A to B. This will be an algorithm.",
    "start": "1967040",
    "end": "1973740"
  },
  {
    "text": "For us, almost all the time\nit will be a polynomial time algorithm, although you could\nput in a different adjective",
    "start": "1973740",
    "end": "1979740"
  },
  {
    "text": "here than polynomial time. Most of the time,\nthat is what we want. ",
    "start": "1979740",
    "end": "1992070"
  },
  {
    "text": "And it's going to convert an\ninstance of the A problem-- so instance just means input--",
    "start": "1992070",
    "end": "1997945"
  },
  {
    "text": " and we'll convert it into an\ninstance of the B problem.",
    "start": "1997945",
    "end": "2003190"
  },
  {
    "text": " And it's going to do so in a\nway such that the solution to A",
    "start": "2003190",
    "end": "2015770"
  },
  {
    "text": "equals the solution\nto B. I mean,",
    "start": "2015770",
    "end": "2022410"
  },
  {
    "text": "the solution of\nthat instance of A is the same as the solution\nof the instance to B.",
    "start": "2022410",
    "end": "2028190"
  },
  {
    "text": "So this is-- think\ndecision problems. The answer's either Yes or No. So we want to convert A into\nan equivalent instance of B,",
    "start": "2028190",
    "end": "2036909"
  },
  {
    "text": "equivalent meaning that\nit has the same answer. Why do we care? Because let's suppose we\nhad an algorithm to solve B.",
    "start": "2036910",
    "end": "2047890"
  },
  {
    "text": "That would be this arrow. So let's say if we\ncan solve B, then",
    "start": "2047890",
    "end": "2056870"
  },
  {
    "text": "we can solve A by this diagram. Take an instance of A, convert\nit into an equivalence of B,",
    "start": "2056870",
    "end": "2063969"
  },
  {
    "text": "solve B, and then that solution\nis equal to the solution to A, so we solved A.",
    "start": "2063969",
    "end": "2077299"
  },
  {
    "text": "This is as hard as. So what we say is\nB is as hard as A.",
    "start": "2077300",
    "end": "2091550"
  },
  {
    "text": "That's a definition\nof this hardness. In general, depending on\nyour definition of reduction,",
    "start": "2091550",
    "end": "2096929"
  },
  {
    "text": "you'll get a different\nnotion of as hard as, but we will stick primarily\nto polynomial time.",
    "start": "2096929",
    "end": "2102680"
  },
  {
    "text": "Reductions. This is what you might\ncall a one call reduction.",
    "start": "2102680",
    "end": "2108944"
  },
  {
    "text": "This is kind of a technicality.  Also called a Karp\nstyle reduction",
    "start": "2108944",
    "end": "2115990"
  },
  {
    "text": "because Karp gave a whole bunch\nof them in the '70s, '80s.",
    "start": "2115990",
    "end": "2123190"
  },
  {
    "text": "So the idea is you only get to\ncall your solution to be once. In general, you could imagine\nan algorithm that calls",
    "start": "2123190",
    "end": "2129330"
  },
  {
    "text": "your solution to be many times. That would also be a\nnotion of as hard as. For the problems we'll look,\nbasically, these two notions",
    "start": "2129330",
    "end": "2138022"
  },
  {
    "text": "don't seem very\nhelpful, let's say. So we'll stick to\none call reductions because they seem\nsufficient for everything",
    "start": "2138022",
    "end": "2144190"
  },
  {
    "text": "that we will cover\nin this class. Probably. Maybe in some very\nlate lecture, we'll talk about multi-call\nreductions.",
    "start": "2144190",
    "end": "2149200"
  },
  {
    "text": "But they're not so prominent. One call reductions are the\nbread and butter of hardness.",
    "start": "2149200",
    "end": "2154480"
  },
  {
    "text": "So as you might imagine, this\nis how you prove a problem hard. Basically, all hardness\nproofs in the known universe",
    "start": "2154480",
    "end": "2164060"
  },
  {
    "text": "are based on a reduction. You start from a\nproblem which you know is hard in whatever\nclass you care about,",
    "start": "2164060",
    "end": "2170050"
  },
  {
    "text": "and you reduce from that\nproblem, the known hard problem, to your problem\nthat you're not sure about.",
    "start": "2170050",
    "end": "2175840"
  },
  {
    "text": "If you can do that,\nthen you prove that your problem is as hard\nas the original problem.",
    "start": "2175840",
    "end": "2180869"
  },
  {
    "text": "If you know that one is\nhard, than this one is hard. Don't get this backwards.",
    "start": "2180870",
    "end": "2186339"
  },
  {
    "text": "You will anyway, but try\nnot to get it backwards. You're always reducing\nfrom the known hard problem",
    "start": "2186340",
    "end": "2192640"
  },
  {
    "text": "to your problem. OK. So usually say, our proof is\nbased on a reduction from--",
    "start": "2192640",
    "end": "2198650"
  },
  {
    "text": "pick your favorite problem. Never two. Easy to get wrong, because\nit's easy to make a sign error.",
    "start": "2198650",
    "end": "2205420"
  },
  {
    "text": "But that's life. So good. Anything else?",
    "start": "2205420",
    "end": "2211260"
  },
  {
    "text": "Now if you've taken\nan algorithms class, you've seen lots of reductions. Reductions are a powerful\ntool in algorithms too.",
    "start": "2211260",
    "end": "2217170"
  },
  {
    "text": "For example, some\nlame examples like, if you have an unweighted\nshortest path problem,",
    "start": "2217170",
    "end": "2224000"
  },
  {
    "text": "you can reduce that to a\nweighted shortest path problem. How do you do that? You set all the weights to 1.",
    "start": "2224000",
    "end": "2229798"
  },
  {
    "text": "Yay. Why would you do that? Well, never mind. ",
    "start": "2229798",
    "end": "2236170"
  },
  {
    "text": "It kind of illustrates\nwhat's going on here. What we're showing is\nthat A is a special case",
    "start": "2236170",
    "end": "2242099"
  },
  {
    "text": "of B. Unweighted shortest\npaths is a special case of weighted shortest paths. In some sense, all\nreductions are that,",
    "start": "2242100",
    "end": "2248250"
  },
  {
    "text": "but they're usually\nmuch less obvious than unweighted shortest paths\nto weighted shortest paths. And the reason we\ncan say B is as hard",
    "start": "2248250",
    "end": "2254250"
  },
  {
    "text": "as A is because [? modular ?]\nthis conversion algorithm A is a special case\nof B. So of course,",
    "start": "2254250",
    "end": "2260319"
  },
  {
    "text": "if B has more cases than\nA, or maybe the same, but if it has at least as many\ncases as A, then of course,",
    "start": "2260320",
    "end": "2265550"
  },
  {
    "text": "B is at at least\nas hard to solve as A in this formal sense. OK.",
    "start": "2265550",
    "end": "2271290"
  },
  {
    "text": "Cool. There are more\ninteresting examples you've probably seen\nin problem sets, like if you want in\nthe arbitrage problem,",
    "start": "2271290",
    "end": "2278250"
  },
  {
    "text": "you want to find a path that\nhas the minimum product of all the values, to convert\nproducts into a min.",
    "start": "2278250",
    "end": "2284214"
  },
  {
    "text": "Some problem, you just take\nlogs of all the values. So the reduction is compute\nlogs and all the weights. So you've probably seen\nlots of things like that.",
    "start": "2284215",
    "end": "2291630"
  },
  {
    "text": "Some are more\ncomplicated than others. What we're going to do in this\nclass is reduce instead of--",
    "start": "2291630",
    "end": "2300380"
  },
  {
    "text": "so for algorithms, you\nwant to reduce to something you know how to solve. We're going to\nreduce from something",
    "start": "2300380",
    "end": "2306120"
  },
  {
    "text": "we know we can't solve\nunder certain assumptions. So assuming P does not\nequal NP, if A is NP-hard",
    "start": "2306120",
    "end": "2312880"
  },
  {
    "text": "and we reduce from A to B,\nthen we know the B is NP-hard.",
    "start": "2312880",
    "end": "2318819"
  },
  {
    "text": "That's a theorem. So in this situation,\nif we have a reduction,",
    "start": "2318820",
    "end": "2325700"
  },
  {
    "text": "let's say if A reduces to\nB, I'll be explicit, and A--",
    "start": "2325700",
    "end": "2334290"
  },
  {
    "text": "better get this right. It would be pretty\nembarrassing if I got it wrong, but I probably will get it wrong\nat some point in this class.",
    "start": "2334290",
    "end": "2340020"
  },
  {
    "text": "Hopefully not today. Then B is X-hard. ",
    "start": "2340020",
    "end": "2347010"
  },
  {
    "text": "OK. That's actually kind\nof a trivial theorem if you read all the definitions. What did X-hard?",
    "start": "2347010",
    "end": "2352120"
  },
  {
    "text": "It meant as hard as\nevery problem in X. And as hard as meant\nthere was a reduction.",
    "start": "2352120",
    "end": "2359470"
  },
  {
    "text": "So that means-- get this right-- there's reduction from every\nproblem in X to your problem.",
    "start": "2359470",
    "end": "2366640"
  },
  {
    "text": "So if A is NP-hard\nthere's a reduction from every problem\nto A, and we're saying now what if there's\nalso a reduction from A to B,",
    "start": "2366640",
    "end": "2373330"
  },
  {
    "text": "well then, we can\njust chain those are two reductions together,\nconvert any problem in X to A, then convert it to B. And so\nwe've shown every problem in X",
    "start": "2373330",
    "end": "2381050"
  },
  {
    "text": "can be reduced to B,\nwhere B is X-hard. This is an easy theorem.",
    "start": "2381050",
    "end": "2386920"
  },
  {
    "text": "The converse would be if B\ncan be solved in class X, and X contains\npolynomial time, then",
    "start": "2386920",
    "end": "2394660"
  },
  {
    "text": "you could can also solve A\nin the same complexity class.",
    "start": "2394660",
    "end": "2399750"
  },
  {
    "text": "So for example,\nif B is in PSPACE, then we learn that\nA is in PSPACE. Something like that.",
    "start": "2399750",
    "end": "2406220"
  },
  {
    "text": "Cool. Any questions at this point?",
    "start": "2406220",
    "end": "2411814"
  },
  {
    "text": "AUDIENCE: Question. PROFESSOR: Yeah? AUDIENCE: You've talked\na lot about thi NP thing. Why don't you ever talk about\nnon-deterministic exponential",
    "start": "2411814",
    "end": "2417952"
  },
  {
    "text": "orobelms or things like that. PROFESSOR: OK. Yeah, I didn't define\nnon-deterministic exponential",
    "start": "2417952",
    "end": "2423040"
  },
  {
    "text": "problems, but that's\na valid thing. I think it's usually\nwritten NEXP. And I believe there\nis a class of games",
    "start": "2423040",
    "end": "2431390"
  },
  {
    "text": "that naturally fits into NEXP. Its mainly an issue of\nwhich classes commonly arise in problems that we care about.",
    "start": "2431390",
    "end": "2437956"
  },
  {
    "text": "This is a pretty rare\none, but I think there might be one instance where-- we might touch on this. Yeah, we definitely can.",
    "start": "2437957",
    "end": "2444250"
  },
  {
    "text": "It's the same open problem\nwhere EXP equals NEXP. I mean, it's another\nopen problem. I shouldn't say it's the same.",
    "start": "2444250",
    "end": "2449936"
  },
  {
    "text": "I think you could solve\none without the other. Again, everyone believes\nyou can't do it. If you believe\nyou can't engineer",
    "start": "2449936",
    "end": "2454955"
  },
  {
    "text": "luckiness, then of course,\nNEXP doesn't equal EXP. But that would fit\nright after EXP.",
    "start": "2454955",
    "end": "2463369"
  },
  {
    "text": "If you get NEXP, and\nthen you get EXPSPACE. According to the things we've\nwritten down and cared about, that would be the\norder of things.",
    "start": "2463370",
    "end": "2469646"
  },
  {
    "text": "Of course there are\nclasses in between these, but these are the ones\nthat appear normally. Yeah?",
    "start": "2469646",
    "end": "2474922"
  },
  {
    "text": "AUDIENCE: Do we know how to\nuse hardness assumptions, for example, P not\nequal to NP to say whether there exists problems\nthat are not in P nor NP",
    "start": "2474922",
    "end": "2481635"
  },
  {
    "text": "complete? PROFESSOR: Yeah. That's another\nbig open question.",
    "start": "2481635",
    "end": "2487289"
  },
  {
    "text": "Let's say P does not equal NP. Are there problems here? Which is to say strictly\nin between being--",
    "start": "2487290",
    "end": "2494160"
  },
  {
    "text": "so they're still not in P\nto the right of this line, but they're also easier\nthan NP-complete problems.",
    "start": "2494160",
    "end": "2499450"
  },
  {
    "text": "There are a couple\nproblems that are famously conjectured to live there, like\nfactoring integers and graph",
    "start": "2499450",
    "end": "2506880"
  },
  {
    "text": "isomorphism. But I'm not aware of any\nnice complexity class there.",
    "start": "2506880",
    "end": "2512859"
  },
  {
    "text": "You can, of course, say-- you can talk about\na class of problems that are as hard as graph\nisomorphism in a certain sense,",
    "start": "2512860",
    "end": "2521170"
  },
  {
    "text": "that if you believe-- if you have a graph isomorphism\nOracle, what can you do? So there's a little bit of work\ntrying to chart that space,",
    "start": "2521170",
    "end": "2527900"
  },
  {
    "text": "but I'd say in general, it's\nbeen not super successful. Don't quote me on that, though. I also don't know the\nliterature super well there.",
    "start": "2527900",
    "end": "2535310"
  },
  {
    "text": "So that's a big uncharted\nterritory, let's say. Could be a big project. Probably lots of\nopen problems there.",
    "start": "2535310",
    "end": "2543080"
  },
  {
    "text": "Other questions? I think most people believe\nthere are things there. One thing you could\nprove is there's",
    "start": "2543080",
    "end": "2548680"
  },
  {
    "text": "a thing called exponential\ntime hypothesis, which would say that [? sat ?] has\nno sub-exponential algorithm.",
    "start": "2548680",
    "end": "2555510"
  },
  {
    "text": "Nothing to the\n[? little o of ?] N. If you believe that,\nthen it's known there are some\nthings in between.",
    "start": "2555510",
    "end": "2560670"
  },
  {
    "text": "You can pick your\nfavorite function, like N to Log [? Log ?] N. That's\nbigger than polynomial, but smaller than exponential.",
    "start": "2560670",
    "end": "2566000"
  },
  {
    "text": "And there are problems that are\nin that class and not [? NP. ?] So definitely with\nETH, you can do it. Yeah.",
    "start": "2566000",
    "end": "2571961"
  },
  {
    "text": "AUDIENCE: So regarding\nthat question, I think it has been proven\nthat if P not equal NP, then",
    "start": "2571961",
    "end": "2577560"
  },
  {
    "text": "there is stuff in there. PROFESSOR: Oh, there is. Yeah. AUDIENCE: Or you can kind\nof do a diagonalization.",
    "start": "2577560",
    "end": "2583240"
  },
  {
    "text": "PROFESSOR: Other questions? Yeah? AUDIENCE: What's the decision\nproblem for the factoring?",
    "start": "2583240",
    "end": "2589180"
  },
  {
    "text": "PROFESSOR: Decision\nproblem for factoring. I think one version is\nI give you a number,",
    "start": "2589180",
    "end": "2596089"
  },
  {
    "text": "and I give you a\nbit position, and I want to know whether there\nis a factor that has a 0 or 1",
    "start": "2596090",
    "end": "2601280"
  },
  {
    "text": "in that position. So if you can solve the\nproblem, then by repeated calls, you could actually find\na factor that's not 1.",
    "start": "2601280",
    "end": "2609900"
  },
  {
    "text": "I don't know if there's a\nbetter version than that. You have to be careful, of\ncourse, if you say, well, is the number prime?",
    "start": "2609900",
    "end": "2615180"
  },
  {
    "text": "Then that's in polynomial time. That was a big result\na bunch of years ago. So, yeah.",
    "start": "2615180",
    "end": "2620340"
  },
  {
    "text": " Most of the time, it's easy\nto go from your optimization",
    "start": "2620340",
    "end": "2626750"
  },
  {
    "text": "problem to a decision problem. But factoring is one\nwhere it's less clear.",
    "start": "2626750",
    "end": "2633876"
  },
  {
    "text": "More questions? ",
    "start": "2633876",
    "end": "2639020"
  },
  {
    "text": "That was a lot in a\nsmall amount of time. But that's all you should\nneed from complexity theory. Yeah?",
    "start": "2639020",
    "end": "2644309"
  },
  {
    "text": "AUDIENCE: OK. I guess I have a question\nabout the way you defined NP with the [INAUDIBLE] algorithms?",
    "start": "2644309",
    "end": "2650036"
  },
  {
    "text": "PROFESSOR: Yup. AUDIENCE: So the\ndefinition that I've seen before is in\nterms of [INAUDIBLE]..",
    "start": "2650036",
    "end": "2655542"
  },
  {
    "text": "PROFESSOR: Right. AUDIENCE: And there, it\nspecifically constrains every branch in the computation\nto run polynomial time,",
    "start": "2655542",
    "end": "2662638"
  },
  {
    "text": "whereas you can imagine a lucky\nalgorithm that avoids infinite looping just because it's lucky.",
    "start": "2662638",
    "end": "2669387"
  },
  {
    "text": "PROFESSOR: Oh. OK. Yeah. I was a little vague here. For the definition of NP\n, I said polynomial time",
    "start": "2669387",
    "end": "2675340"
  },
  {
    "text": "in the worst case. Probably I need to say it's\npolynomial time no matter what branch you take.",
    "start": "2675340",
    "end": "2682470"
  },
  {
    "text": "Not sure it matters. Because maybe if you\nknow your algorithm's supposed to run in polynomial\ntime, you could have a timer,",
    "start": "2682470",
    "end": "2690099"
  },
  {
    "text": "and if it ever exceeds\nthat time, just return no. So you might be able\nto convert the weaker",
    "start": "2690100",
    "end": "2696250"
  },
  {
    "text": "notion of polynomial\ntime to the stronger one. But it won't matter too much.",
    "start": "2696250",
    "end": "2701310"
  },
  {
    "text": "I mean, in all the\nalgorithms we'll think about, every branch you could\npossibly think of even,",
    "start": "2701310",
    "end": "2706339"
  },
  {
    "text": "the non-lucky ones,\nare polynomial time. So we will stick to that. We won't spend much\ntime in general proving",
    "start": "2706340",
    "end": "2712130"
  },
  {
    "text": "that problems are\nin NP or NPSPACE, only to check that this\nis the right class we're supposed to be working in.",
    "start": "2712130",
    "end": "2717180"
  },
  {
    "text": "We'll spend most of our time\nproving the hardness cases, the lower bounds. Yeah? AUDIENCE: So you\nmentioned that if you",
    "start": "2717180",
    "end": "2723965"
  },
  {
    "text": "use different notions of a\nreduction, different limit space equally on\nthe competition,",
    "start": "2723966",
    "end": "2728994"
  },
  {
    "text": "you get different\nmeasures of as hard as. PROFESSOR: Yes. AUDIENCE: So as your\nclasses get bigger, does it matter if you start\nusing more polynomial time",
    "start": "2728994",
    "end": "2735739"
  },
  {
    "text": "in your reduction? Does it actually change? PROFESSOR: I'm sure it matters. But again, it's\nbeyond the classes",
    "start": "2735739",
    "end": "2743980"
  },
  {
    "text": "that are usually considered\nfrom an algorithmic standpoint. Bigger than these classes\ndon't seem to matter much.",
    "start": "2743980",
    "end": "2749250"
  },
  {
    "text": "And in these, maybe\nonce I've seen like, a polynomial space reduction\nto prove X-hardness,",
    "start": "2749250",
    "end": "2754990"
  },
  {
    "text": "so it's a slightly\nweaker notion than if you do a polynomial time\nreduction, but if you",
    "start": "2754990",
    "end": "2760520"
  },
  {
    "text": "believe PSPACE does not equal\nX, but still a separation. So sometimes, things\nlike that happen.",
    "start": "2760520",
    "end": "2766280"
  },
  {
    "text": "I think the most common is\njust switching to a space measure over time measure. I don't think it will matter\nin anything we see here.",
    "start": "2766280",
    "end": "2773040"
  },
  {
    "text": "But it does arise\nin the literature. Definitely. I think PSPACE or log space\nare the two common ones.",
    "start": "2773040",
    "end": "2780740"
  },
  {
    "text": "And of course, when you're doing\nP-completeness, it's another. Yeah? AUDIENCE: You mentioned\nsetting it [INAUDIBLE],,",
    "start": "2780740",
    "end": "2787340"
  },
  {
    "text": "and I'm curious how\nyou could do that. Because for any\ninstance of the problem,",
    "start": "2787340",
    "end": "2795090"
  },
  {
    "text": "you can't say that I've\nused exponential time. It could just be that there's\na bigger constant out front.",
    "start": "2795090",
    "end": "2800707"
  },
  {
    "text": "PROFESSOR: OK. Yeah, so you need to know\nwhat the polynomial is for it to have a timer.",
    "start": "2800707",
    "end": "2805860"
  },
  {
    "text": "That's a small catch.  Yeah. I don't see an easy\nway to avoid that.",
    "start": "2805860",
    "end": "2813780"
  },
  {
    "text": "Yeah. There's some few subtle\nconstructive issues there. If you don't know\nwhat the bound is, then things get more annoying.",
    "start": "2813780",
    "end": "2819927"
  },
  {
    "text": "None of those things\nwill happen in reality. So remember, this not\na complexity class. We're looking at\nalgorithms here.",
    "start": "2819927",
    "end": "2828089"
  },
  {
    "text": "This part is actually easy. It's all about the reductions. That's where the meat\nof this class will be.",
    "start": "2828090",
    "end": "2834520"
  },
  {
    "text": "And for that, we need\nto get NP-hardcore. AUDIENCE: [LAUGHING].",
    "start": "2834520",
    "end": "2840369"
  },
  {
    "text": "PROFESSOR: I think all of\nyou soon will be NP-hardore, and we'll be able to prove\nreally hard problems really",
    "start": "2840370",
    "end": "2847520"
  },
  {
    "text": "hard. So in the spirit\nof NP-hardcoreness,",
    "start": "2847520",
    "end": "2852830"
  },
  {
    "text": "we're going to take the classic\nof hardcore video games, Super Mario Brothers. And our first proof will be\nthat Mario Brothers is NP-hard.",
    "start": "2852830",
    "end": "2861150"
  },
  {
    "text": "This got lots of\npress, like here's Kotaku saying, \"Science\nproves old video games were super hard.\"",
    "start": "2861150",
    "end": "2866654"
  },
  {
    "text": "AUDIENCE: [LAUGHING]. PROFESSOR: This is proving\nthe obvious, I guess.",
    "start": "2866654",
    "end": "2874060"
  },
  {
    "text": "But anyway. So let me tell you a little\nbit about how this proof goes,",
    "start": "2874060",
    "end": "2880720"
  },
  {
    "text": "and then we will see it. ",
    "start": "2880720",
    "end": "2898160"
  },
  {
    "text": "All right. So we need a problem\nto reduce from.",
    "start": "2898160",
    "end": "2904040"
  },
  {
    "text": "The problem is 3SAT. This is probably the most\ncommon problem to reduce from. We will spend a bunch\nof lectures on it.",
    "start": "2904040",
    "end": "2909740"
  },
  {
    "text": "It won't be our very\nnext class, but we will get to it pretty soon. This is also known\nas 3-Satisfiability. ",
    "start": "2909740",
    "end": "2917250"
  },
  {
    "text": "If you're ever trying\nto prove NP-hardness and you don't know where to\nstart from, the answer is 3SAT. Almost always, but not always.",
    "start": "2917250",
    "end": "2924005"
  },
  {
    "text": " AUDIENCE: [LAUGHING]",
    "start": "2924005",
    "end": "2931976"
  },
  {
    "text": "PROFESSOR: OK. Whatever. So what's the problem? You're given a 3CNF formula.",
    "start": "2931976",
    "end": "2940320"
  },
  {
    "text": "This means something\nlike x5, or I'll",
    "start": "2940320",
    "end": "2946330"
  },
  {
    "text": "be nice and write\nEnglish, or x3, or not x1.",
    "start": "2946330",
    "end": "2954180"
  },
  {
    "text": " And another thing like\nthat. x7, or not x2, or x5.",
    "start": "2954180",
    "end": "2967510"
  },
  {
    "text": "Whatever.  So some key words\nyou should know.",
    "start": "2967510",
    "end": "2975590"
  },
  {
    "text": "xI's. Those are called variables.  xI or not xI.",
    "start": "2975590",
    "end": "2982690"
  },
  {
    "text": "Those are called literals. You have two choices. You could either have\na positive variable",
    "start": "2982690",
    "end": "2989410"
  },
  {
    "text": "or a negative variable. Then you always have\nthree literals per clause.",
    "start": "2989410",
    "end": "2996579"
  },
  {
    "text": "These things are called-- each row of this thing that\nI drew is called a clause. ",
    "start": "2996580",
    "end": "3003480"
  },
  {
    "text": "The whole thing's\ncalled a formula. And the question is, can\nyou make this formula true?",
    "start": "3003480",
    "end": "3009740"
  },
  {
    "text": "So that's what you want to know. Do there exist xI's such\nthat the formula is true?",
    "start": "3009740",
    "end": "3019929"
  },
  {
    "text": "That's the decision problem. ",
    "start": "3019929",
    "end": "3025550"
  },
  {
    "text": "And it's NP-complete.  It is almost the first\nproblem proved NP-complete.",
    "start": "3025550",
    "end": "3031360"
  },
  {
    "start": "3031360",
    "end": "3037030"
  },
  {
    "text": "It's like the second\nproblem that's NP-complete. The first one was without\nthis particular style.",
    "start": "3037030",
    "end": "3044730"
  },
  {
    "text": "It was just a bunch of\nands and or's and nots in any combination. But this is also hard,\nand it's usually easier",
    "start": "3044730",
    "end": "3050850"
  },
  {
    "text": "to start from this situation. So what we want to do\nis reduce from 3SAT",
    "start": "3050850",
    "end": "3056110"
  },
  {
    "text": "to Super Mario Brothers. OK. So let's do it.",
    "start": "3056110",
    "end": "3063060"
  },
  {
    "text": "So I should mention our proof\nholds Super Mario Brothers 1, Lost Levels, and 3.",
    "start": "3063060",
    "end": "3069044"
  },
  {
    "text": "Super Mario Brothers\n2 is another world. Also, Super Mario\nWorlds, I think 1 and 2.",
    "start": "3069044",
    "end": "3074750"
  },
  {
    "text": "But most the pictures will be\nSuper Mario Brothers Original. So what we're going to\ndo are build gadgets.",
    "start": "3074750",
    "end": "3082220"
  },
  {
    "text": "Gadgets are in this\ncase little pieces of levels that we're\ngoing to join together to make the actual reduction.",
    "start": "3082220",
    "end": "3089180"
  },
  {
    "text": "So it's usually--\nit's not typical that you look at the instance of\nA, and just think really hard,",
    "start": "3089180",
    "end": "3095190"
  },
  {
    "text": "and then just output an\ninstance of B from nowhere. You just say, well, OK, instance\nof A has lots of little pieces.",
    "start": "3095190",
    "end": "3102860"
  },
  {
    "text": "It's got variables,\nand literals, and clauses, and a formula. I'm just going to take\neach of those little pieces",
    "start": "3102860",
    "end": "3108340"
  },
  {
    "text": "and convert them into a\nlittle piece in my output, and then just string\nthem altogether in a usually fairly obvious\nway, though sometimes, there's",
    "start": "3108340",
    "end": "3114465"
  },
  {
    "text": "some subtleties there. Almost all of our proofs\nwill follow this structure. This is gadget\nstructure, and this is",
    "start": "3114465",
    "end": "3120020"
  },
  {
    "text": "the thing you're here to learn. And it's super cool. Because once you know\nthat you want to do 3SAT,",
    "start": "3120020",
    "end": "3125869"
  },
  {
    "text": "you're like, OK, I need\nvariables in closets. So here's the variable. Got Mario on the top.",
    "start": "3125870",
    "end": "3132450"
  },
  {
    "text": "Mario has to decide should\nhe go left or right?",
    "start": "3132450",
    "end": "3137720"
  },
  {
    "text": "I mean, you could\ngo back, but if you want to go through\nthis gadget, you can either fall\nleft or fall right.",
    "start": "3137720",
    "end": "3144470"
  },
  {
    "text": "And all of these heights\nare so large that once you make that decision, you can't\ncome back up because you have a limited jump height.",
    "start": "3144470",
    "end": "3152119"
  },
  {
    "text": "OK. Here's the clause gadget. So the idea of variables\nwe're choosing,",
    "start": "3152120",
    "end": "3158290"
  },
  {
    "text": "do I set x5 to be true or false? Let's say the left branch\ncorresponds to true, the right branch\ncorresponds to false.",
    "start": "3158290",
    "end": "3164630"
  },
  {
    "text": "How that happens,\nwe'll see in a moment. That's about how the\ngadgets fit together. Clause gadget has two parts.",
    "start": "3164630",
    "end": "3171390"
  },
  {
    "text": "On the one hand, you have\nthese three entry points where your goal is to hit\nkoopas and bounce them around.",
    "start": "3171390",
    "end": "3178810"
  },
  {
    "text": "And then the other part is down\nhere, is a bunch of bricks. And at the end of the level,\nwe're going to set it up",
    "start": "3178810",
    "end": "3185200"
  },
  {
    "text": "so Mario has to go\nthrough this part. And this will be\ntraversable if and only",
    "start": "3185200",
    "end": "3191230"
  },
  {
    "text": "if these bricks\nhave been broken. So how would you do that? This brick-- well, various\nthings are in the way here,",
    "start": "3191230",
    "end": "3199430"
  },
  {
    "text": "so what you need to do-- interesting.",
    "start": "3199430",
    "end": "3204717"
  },
  {
    "text": "But we're going to change\nthis gadget in a second. I already see some\nissues with it. But this was our original.",
    "start": "3204717",
    "end": "3210270"
  },
  {
    "text": "Original proof\ndidn't get published, and we ended up fixing it\nbefore we submitted it.",
    "start": "3210270",
    "end": "3216340"
  },
  {
    "text": "So the idea is what we want\nMario to do is come down here, hit the koopa, and then\nknock the shell out here,",
    "start": "3216340",
    "end": "3223135"
  },
  {
    "text": "and it will bounce\nand eventually break all these bricks. Right? Well, no, that would be\nSuper Mario Brothers 3, where",
    "start": "3223135",
    "end": "3229560"
  },
  {
    "text": "turtles actually break bricks. In Super Mario\nBrothers 1, they don't. So we will use a\ndifferent gadget",
    "start": "3229560",
    "end": "3237380"
  },
  {
    "text": "with fire bars and\nquestion blocks with invincibility\nstars in them.",
    "start": "3237380",
    "end": "3244010"
  },
  {
    "text": "OK. So same idea. There are three\nentrances down here. If you hit any one of\nthem, then the star",
    "start": "3244010",
    "end": "3251030"
  },
  {
    "text": "will just float\naround here forever. We tested it. It goes there for as long\nas the level can last.",
    "start": "3251030",
    "end": "3256549"
  },
  {
    "text": "Then later, if you come\nhere, lots of testing involved, of course.",
    "start": "3256550",
    "end": "3263040"
  },
  {
    "text": "Later if you come into here,\nand you can get the star, you have just enough time to\nrun through all these fire. Bars if you don't, you will die.",
    "start": "3263040",
    "end": "3270630"
  },
  {
    "text": "OK? So that's the clause gadget. So if you visit in at least\none of these three places--",
    "start": "3270630",
    "end": "3277710"
  },
  {
    "text": "you can visit all\nof them, it doesn't help to have three stars\nversus one in this case, because they don't\nstack or anything--",
    "start": "3277710",
    "end": "3285270"
  },
  {
    "text": "then and only then can you\ngo through the top part. This is what we might call\na traversal, and this is--",
    "start": "3285270",
    "end": "3291609"
  },
  {
    "text": "you could call it setting\nthe gadget to True. How does this all fit together? This is sort of\nthe bigger issue.",
    "start": "3291610",
    "end": "3298520"
  },
  {
    "text": "So we're going to take\nthis three set instance. It's got variables and clauses.",
    "start": "3298520",
    "end": "3305780"
  },
  {
    "text": "And let's ignore the\nnegations for now. Am I going to ignore them? No, I'm not going\nto ignore them.",
    "start": "3305780",
    "end": "3311900"
  },
  {
    "text": "But on the one hand,\nwe have variables. On the other hand,\nwe have clauses. And we're going to\nconnect each variable",
    "start": "3311900",
    "end": "3319080"
  },
  {
    "text": "to the clause that contains it. So this is an actual set\nof four clauses here,",
    "start": "3319080",
    "end": "3324640"
  },
  {
    "text": "and you can trace them all. So the claim is that\nx in the positive form appears in the first clause\nand the second clause.",
    "start": "3324640",
    "end": "3331940"
  },
  {
    "text": "You can see there's an\nx here and an x here. It appears in the negative\none-- this is not x-- in clause three and four,\nbecause here's not x and not x.",
    "start": "3331940",
    "end": "3343640"
  },
  {
    "text": "And so on. So that's what all these\nconnections in the middle are. In general, it's kind\nof a bipartite graph. You've got variables on\nthe one side, clauses",
    "start": "3343640",
    "end": "3350640"
  },
  {
    "text": "on the other side,\nand we happened to have coalesced\nthings in these groups.",
    "start": "3350640",
    "end": "3356110"
  },
  {
    "text": "What these edges are now\ngoing to be converted into are paths for Mario to follow.",
    "start": "3356110",
    "end": "3361470"
  },
  {
    "text": "So this is the variable gadget. It's this thing. We're just going to\nplug that in here.",
    "start": "3361470",
    "end": "3366900"
  },
  {
    "text": "So the idea is you\nenter from here, and then you have two\nways that you can go,",
    "start": "3366900",
    "end": "3373630"
  },
  {
    "text": "either the true way\nor the false way. If you set the\nvariable to True, you can then go and visit\nthe corresponding clauses",
    "start": "3373630",
    "end": "3381760"
  },
  {
    "text": "that contain it and\nget one of the stars. OK.",
    "start": "3381760",
    "end": "3386810"
  },
  {
    "text": "Now, for each\nvariable, you only get to make one of\nthose choices then you satisfy all the causes\nthat contain that literal.",
    "start": "3386810",
    "end": "3394830"
  },
  {
    "text": "And then when you're done, you\ncan walk to the next variable. ",
    "start": "3394830",
    "end": "3400270"
  },
  {
    "text": "So there's actually two\nentrances to the variable. I guess that kind of matters. What we want in the variable--",
    "start": "3400270",
    "end": "3405990"
  },
  {
    "text": "so you came from\nthe True setting, or you came from\nthe False setting, you don't want to be\nable to run and jump over",
    "start": "3405990",
    "end": "3411460"
  },
  {
    "text": "to the other side\nand the satisfy the previous variable\nboth true and false. You only get to make one choice.",
    "start": "3411460",
    "end": "3416950"
  },
  {
    "text": "Lots of things check here. Then in the end, at the\nvery end after you've set the last variable,\nyou have to traverse",
    "start": "3416950",
    "end": "3423650"
  },
  {
    "text": "all of these clauses\nthrough the fire bars. And that's going to be\npossible if and only if every one of the\ncauses has a star in it.",
    "start": "3423650",
    "end": "3430842"
  },
  {
    "text": "In other words, the variables\nsatisfy all the clauses. In other words, the\nformula is true, because the clauses are\ncombined with an and.",
    "start": "3430842",
    "end": "3438520"
  },
  {
    "text": "OK? That is in a nutshell the proof. Once you've made\nthis construction that the solution to 3SAT is\nequal to the solution to Mario",
    "start": "3438520",
    "end": "3451849"
  },
  {
    "text": "in general, you want to\nprove on the one hand if the answer is yes\nto 3SAT, if there's",
    "start": "3451850",
    "end": "3457410"
  },
  {
    "text": "a valid setting\nfor the variables, then there is a solution\nto this Mario instance. You can actually\nsolve the level.",
    "start": "3457410",
    "end": "3463819"
  },
  {
    "text": "The decision question\nhere is, can I make it to the end of the level? There's a flag over there.",
    "start": "3463820",
    "end": "3468950"
  },
  {
    "text": "And conversely, if there is an\nactual solution to this puzzle, you want to show that\nyou can convert it",
    "start": "3468950",
    "end": "3474850"
  },
  {
    "text": "into a valid setting for 3SAT\nthat satisfies the formula. You need to check both. That gives you\nthe equality here.",
    "start": "3474850",
    "end": "3482930"
  },
  {
    "text": "Question? AUDIENCE: Don't you need\nthis graph to be planar? PROFESSOR: Good question.",
    "start": "3482930",
    "end": "3488690"
  },
  {
    "text": "This graph is not planar, and\nso there are these crossings. So there's one more gadget,\nthe crossover gadget.",
    "start": "3488690",
    "end": "3495060"
  },
  {
    "text": "And this is on the poster,\nso if you were analyzing it. There are many ways\nto do crossover, and this one is kind of\noverkill unless I tell you",
    "start": "3495060",
    "end": "3501780"
  },
  {
    "text": "that Super Mario Brothers\nhas tons of hacks and cheats that you can play,\nand run through walls,",
    "start": "3501780",
    "end": "3507390"
  },
  {
    "text": "and crazy things. But never mind that. The idea here is\nyou are a big Mario.",
    "start": "3507390",
    "end": "3513160"
  },
  {
    "text": "At the beginning of a\nlevel, there's a mushroom. And you better not lose it. Otherwise, you're in trouble. So on the one hand, I can\ngo from left to right.",
    "start": "3513160",
    "end": "3520900"
  },
  {
    "text": "It's a directional crossover. Or I can go from-- this is the bottom to the top.",
    "start": "3520900",
    "end": "3526309"
  },
  {
    "text": "But I can't go from\nbottom to right. I can't go from bottom to left. All these sorts of things.",
    "start": "3526310",
    "end": "3531380"
  },
  {
    "text": "Why? OK. Let's do the\npositive case first. Say I'm from the bottom.",
    "start": "3531380",
    "end": "3536490"
  },
  {
    "text": "I fall here. Can't go back. I can jump. If I'm big Mario, I can break\nthrough a couple bricks,",
    "start": "3536490",
    "end": "3542089"
  },
  {
    "text": "and then I can escape. OK? But I could run under here.",
    "start": "3542090",
    "end": "3548882"
  },
  {
    "text": "For example, if you're good,\nyou can crouch slide, and then jump, jump, jump, jump, jump. You get to here. But you cannot get through this.",
    "start": "3548882",
    "end": "3555520"
  },
  {
    "text": "Or maybe I need to\nadd one more wiggle. A little easier\nto see over here. Maybe I can get\nhere and move over.",
    "start": "3555520",
    "end": "3561580"
  },
  {
    "text": "But if you're in\nthis position, you have no momentum you\ncan gain, and so you",
    "start": "3561580",
    "end": "3567300"
  },
  {
    "text": "can't crouch slide into there. So if you're here coming from\nthe bottom, you can't get out.",
    "start": "3567300",
    "end": "3573510"
  },
  {
    "text": "Alternatively, if you\ncome from the left-- it's so tempting\nto kill the goomba.",
    "start": "3573510",
    "end": "3579960"
  },
  {
    "text": "But instead of\nkilling him, you take damage, become small\nMario, then you can traverse through\nhere, because you",
    "start": "3579960",
    "end": "3586444"
  },
  {
    "text": "don't need to crouch slide. You just jump. And there's another mushroom\nfor you to restore big Mario",
    "start": "3586445",
    "end": "3591579"
  },
  {
    "text": "and restore the invariant. And you better take it\nbecause otherwise, you can't get out through here.",
    "start": "3591580",
    "end": "3597910"
  },
  {
    "text": "So you're almost forced to go\nleft to right or bottom to top. Now if you traverse\nboth of these gadgets",
    "start": "3597910",
    "end": "3604880"
  },
  {
    "text": "in both directions,\nthen all bets are off. Then you can go from\nanywhere to anywhere.",
    "start": "3604880",
    "end": "3609950"
  },
  {
    "text": "That's OK. Because what we're\nworried about in",
    "start": "3609950",
    "end": "3615480"
  },
  {
    "text": "this reduction is whether\nyou can reach certain things. If you can reach something, I\ndon't care whether you reach it",
    "start": "3615480",
    "end": "3622475"
  },
  {
    "text": "now or later. It's just you don't\nwant to be able to reach unreachable things. When you set the\nvariable to True,",
    "start": "3622475",
    "end": "3628589"
  },
  {
    "text": "I don't want to be able to\nvisit this false vertex ever. And if you check\nall the crossovers,",
    "start": "3628590",
    "end": "3634670"
  },
  {
    "text": "it's enough to build this kind\nof thing, which either you traverse left to right,\nor bottom to top,",
    "start": "3634670",
    "end": "3641250"
  },
  {
    "text": "or you can reach both\nthe left and the bottom, and then you can reach anything. And you never have\nto go right to left.",
    "start": "3641250",
    "end": "3647822"
  },
  {
    "text": "You never have to\ngo top to bottom. Because we always know\nthe order in which we're traversing\nthings and so on. OK.",
    "start": "3647822",
    "end": "3652980"
  },
  {
    "text": "I think I've waved\nmy hands enough. There are details to check,\nbut if you're interested, you can wait 'til this part\nof the class, where we'll",
    "start": "3652980",
    "end": "3659460"
  },
  {
    "text": "cover the Legend of Zelda,\nPokemon, Metroid, and I'm",
    "start": "3659460",
    "end": "3666599"
  },
  {
    "text": "missing one. Donkey Kong Country. Donkey Kong Country\nis PSPACE-complete. That's a hard proof.",
    "start": "3666600",
    "end": "3672710"
  },
  {
    "text": "No pun intended. So that was Super\nMario Brothers. Any more questions?",
    "start": "3672710",
    "end": "3678840"
  },
  {
    "text": "You asked the right one. I would have gone\nto it otherwise. Yes? AUDIENCE: Are you\nsure we'll never have",
    "start": "3678840",
    "end": "3683876"
  },
  {
    "text": "to go say, left to right twice? ",
    "start": "3683876",
    "end": "3689800"
  },
  {
    "text": "PROFESSOR: Yes. That's a good question. In this gadget, we are not\nable to go left to right twice,",
    "start": "3689800",
    "end": "3696430"
  },
  {
    "text": "but that's OK. What's not really drawn\nhere but should be is",
    "start": "3696430",
    "end": "3703609"
  },
  {
    "text": "we're really taking an\nEuler tour of this star, so we're going to go\nsort of on the left path. There's actually two\npaths down here maybe.",
    "start": "3703610",
    "end": "3711005"
  },
  {
    "text": "We're going to go\ndown here, then we'll come back the other way. Here, there are\nactual crossovers.",
    "start": "3711006",
    "end": "3716780"
  },
  {
    "text": "When we come back, there are\ndifferent crossover gadgets. Or you could say there's two\ncrossover gadgets for each of these, one for going one\ndirection, one for coming back.",
    "start": "3716780",
    "end": "3724400"
  },
  {
    "text": " Yeah. Four crossovers for\neach intersection,",
    "start": "3724400",
    "end": "3731880"
  },
  {
    "text": "for both directions\nand both guys. AUDIENCE: I'm mostly\nwilling to believe you, but I just have this nagging\ndoubt that you can't actually",
    "start": "3731880",
    "end": "3738810"
  },
  {
    "text": "arrange all these things\nand make them fit together. PROFESSOR: OK. So there is a top level question\nwhich is, in general, it's",
    "start": "3738810",
    "end": "3745170"
  },
  {
    "text": "the gadget assembly problem. If I have all these gadgets, can\nI actually put them together? And it's important,\nthe output instance",
    "start": "3745170",
    "end": "3753300"
  },
  {
    "text": "should have polynomial size. I probably should\nmention that here. It's important.",
    "start": "3753300",
    "end": "3759880"
  },
  {
    "text": "Of polynomials. Oh, that's polynomial\ntime algorithm.",
    "start": "3759880",
    "end": "3766745"
  },
  {
    "text": "Good, good, good. Yes. So this is in parentheses. Because it's a polynomial\ntime algorithm,",
    "start": "3766745",
    "end": "3773110"
  },
  {
    "text": "you will generate a\npolynomial size output, because our outputs have to\nbe represented explicitly for reduction.",
    "start": "3773110",
    "end": "3780020"
  },
  {
    "text": "So the main issue\nis, can you draw this in a grid of polynomial size?",
    "start": "3780020",
    "end": "3786119"
  },
  {
    "text": "And the short answer\nto your question is, use standard graph\ndrawing algorithms.",
    "start": "3786119",
    "end": "3791250"
  },
  {
    "text": "If I give you a planar graph,\nI can draw it with n vertices.",
    "start": "3791250",
    "end": "3796570"
  },
  {
    "text": "I can draw it in a grid\nthat order n by order n. I forget what the best bound is.",
    "start": "3796570",
    "end": "3802030"
  },
  {
    "text": "Maybe 6n by 6n. Doesn't matter here. Now this graph is not planar. But if you just add a vertex\nfor every intersection,",
    "start": "3802030",
    "end": "3809227"
  },
  {
    "text": "and there's at most n\nsquared intersections, then I will have a planar graph. Then I apply that algorithm. It draws everything into a grid.",
    "start": "3809227",
    "end": "3815589"
  },
  {
    "text": "I explode that grid\nby a factor of 100, whatever the largest size of\nthis gadget is, plunk them in,",
    "start": "3815590",
    "end": "3821480"
  },
  {
    "text": "and then I route the tunnels. So the only thing I\nhaven't really filled in is how do you route the tunnels\nto make them traversable?",
    "start": "3821480",
    "end": "3828380"
  },
  {
    "text": "Because if you go up,\nyou've got to have enough stairs along the way. But it's an exercise\nfor the reader.",
    "start": "3828380",
    "end": "3834042"
  },
  {
    "text": "There are definitely\ndetails there. And in some cases,\nthey are subtle. I'll tell you the most\nannoying issue that",
    "start": "3834042",
    "end": "3840140"
  },
  {
    "text": "can happen is a parity issue. Sometimes, these gadgets-- I mean, you could make them\nslightly wider or slightly",
    "start": "3840140",
    "end": "3846230"
  },
  {
    "text": "taller. It doesn't matter. Sometimes they have to\nbe even size or odd size. And then things don't\nalways fit up well.",
    "start": "3846230",
    "end": "3851960"
  },
  {
    "text": "And that's a pain to do. And I had a proof last\nmonth, where I had,",
    "start": "3851960",
    "end": "3859140"
  },
  {
    "text": "I think, three separate\nparity issues in a row. I fixed one, and it's\nlike, yes, I got the proof. And it was like, uh-oh,\nthere's another parity problem.",
    "start": "3859140",
    "end": "3866154"
  },
  {
    "text": "Then I fixed that one. And then, uh-oh, there's\nanother parity problem. And finally, the proof\nis hopefully correct.",
    "start": "3866154",
    "end": "3871930"
  },
  {
    "text": "And we might go through\nthat as an example. So there are\ndefinitely issues that can come up in gadget\nassembly, but this one",
    "start": "3871930",
    "end": "3878470"
  },
  {
    "text": "I'm not worried\nabout, let's say. Yeah? AUDIENCE: Did the original\nSuper Mario Brothers allow you to go left?",
    "start": "3878470",
    "end": "3883790"
  },
  {
    "text": "PROFESSOR: No. In the original\nSuper Mario Brothers, you cannot scroll\nthe screen left. Mario can go left. So this is all one screen.",
    "start": "3883790",
    "end": "3892340"
  },
  {
    "text": "You always have to generalize\nsomething in your problem. And if you say the size of\nyour screen, it's 320 by 240,",
    "start": "3892340",
    "end": "3900890"
  },
  {
    "text": "or whatever in the\noriginal is constant, then you can solve\nMario in polynomial time by dynamic programming.",
    "start": "3900890",
    "end": "3906100"
  },
  {
    "text": "So that's not as interesting. Mario 1. Of course, any other\nMario, you can go left,",
    "start": "3906100",
    "end": "3912460"
  },
  {
    "text": "except sometimes it forgets\nthe status of your monsters. ",
    "start": "3912460",
    "end": "3919151"
  },
  {
    "text": "Again, if you have that, you\ncan solve it in polynomial time by dynamic programming. So we're in the\nsort of, we'll say,",
    "start": "3919151",
    "end": "3925210"
  },
  {
    "text": "as intended model, which is\nyou can have a big level. 4K is already happening.",
    "start": "3925210",
    "end": "3931630"
  },
  {
    "text": "Imagine the future, you\nhave a giant screen, and you play a giant level. AUDIENCE: [LAUGHING]",
    "start": "3931630",
    "end": "3939599"
  },
  {
    "text": "PROFESSOR: Other questions? Now, one question is is Mario\nBrothers an NP conjecture?",
    "start": "3939600",
    "end": "3946070"
  },
  {
    "text": "No, I think by now we\nmight have a proof that is PSPACE complete. But that's not published\nyet, or even written yet.",
    "start": "3946070",
    "end": "3952690"
  },
  {
    "text": "So it's certainly not\nguaranteed, but we think so. OK.",
    "start": "3952690",
    "end": "3959289"
  },
  {
    "text": "Last proof is Rush Hour.",
    "start": "3959290",
    "end": "3964440"
  },
  {
    "text": "Before I get to Rush Hour,\nI'm going to tell you about another source problem.",
    "start": "3964440",
    "end": "3971109"
  },
  {
    "text": "So 3SAT is the most\ncommon problem for-- you might call\nthem short puzzles.",
    "start": "3971110",
    "end": "3979589"
  },
  {
    "text": "Mario Brothers is\nmaybe a short puzzle. If you have a time\nlimit in Mario Brothers, then you're guaranteed\nyou're going to make at most,",
    "start": "3979590",
    "end": "3985236"
  },
  {
    "text": "let's say, n moves, and\nthen the game is over. You either dire or you finish.",
    "start": "3985236",
    "end": "3990380"
  },
  {
    "text": "And 3-Satisfiability is a\ngood representation of that. For longer games, another\nmodel called constraint logic",
    "start": "3990380",
    "end": "3998500"
  },
  {
    "text": "or constraint graphs is useful. So let me tell you this problem. It's in some sense\nsimpler than 3SATs.",
    "start": "3998500",
    "end": "4004700"
  },
  {
    "text": "On a graph, you have red\nedges and blue edges. Notice the blue\nedges are thicker. That means they're twice\nas heavy, so that you",
    "start": "4004700",
    "end": "4012030"
  },
  {
    "text": "think of this as your machine. Now a state of the\nmachine is going to be an orientation\nof the graph.",
    "start": "4012030",
    "end": "4019130"
  },
  {
    "text": "So every edge is just\ngoing to be oriented one way or the other. And the constraint--\nin general, this",
    "start": "4019130",
    "end": "4024710"
  },
  {
    "text": "is called a constrained graph. And the constraint\nyou have to satisfy is that at every vertex, you\nhave at least two units of flow",
    "start": "4024710",
    "end": "4031780"
  },
  {
    "text": "pointed into the vertex. So here there's actually three\nunits of flow pointed in. There's the red single unit\nand the blue double unit.",
    "start": "4031780",
    "end": "4037890"
  },
  {
    "text": "Blue's always 2,\nred is always 1. So if you get the Kindle\nedition of this book,",
    "start": "4037890",
    "end": "4044199"
  },
  {
    "text": "don't read it on a\nblack and white display.  Or the PDF, whatever.",
    "start": "4044199",
    "end": "4050780"
  },
  {
    "text": "So what you're allowed\nto do in this game, the move you're allowed\nto do, is reverse an edge.",
    "start": "4050780",
    "end": "4056160"
  },
  {
    "text": "As long as you always\nsatisfy this invariant that at least two units\nare in, then you're OK. So I think here, we're going\nto reverse this one first.",
    "start": "4056160",
    "end": "4063274"
  },
  {
    "text": "So now we have three\nunits of flow pointed in. You have to check that the\nother vertice's satisfied, but this one's certainly OK.",
    "start": "4063274",
    "end": "4068960"
  },
  {
    "text": "Now because there\nare two red units, we can reverse the blue one. And we cannot reverse\nthe red ones right now,",
    "start": "4068960",
    "end": "4077580"
  },
  {
    "text": "because that would leave only\none unit of flow inwards. There's always two.",
    "start": "4077580",
    "end": "4083109"
  },
  {
    "text": "So in fact, this vertex that\nI've drawn is in some sense an AND gate. We call it an AND\nvertex, because it's not",
    "start": "4083110",
    "end": "4089510"
  },
  {
    "text": "a regular gate. Over here, we're\ngoing to think of--",
    "start": "4089510",
    "end": "4094732"
  },
  {
    "text": "it's a little bit asymmetric. We're going to think of these\nas the inputs to the gate, and this as the\noutput of the gate.",
    "start": "4094732",
    "end": "4100620"
  },
  {
    "text": "And if the inputs are\npointing out, that's a false. If they're pointing\nin, that's a true. And the output is reverse,\nso if it's pointing in,",
    "start": "4100620",
    "end": "4107464"
  },
  {
    "text": "that's a false. If it's pointing\nout, it's a true. So here's one\nstate false, false.",
    "start": "4107465",
    "end": "4112729"
  },
  {
    "text": "And so the AND of false\nand false is false. Here's another state where\nboth inputs are true,",
    "start": "4112729",
    "end": "4118580"
  },
  {
    "text": "and then the output can be true. It doesn't have to be, though. So in this example, let's\nsay we reverse this edge.",
    "start": "4118580",
    "end": "4125149"
  },
  {
    "text": "So now, we have false and true. Still, we can't reverse this\nbecause false and true is",
    "start": "4125149",
    "end": "4130549"
  },
  {
    "text": "false, and because\nthere would only be one unit of incoming flow\nbefore we can reverse this.",
    "start": "4130550",
    "end": "4135680"
  },
  {
    "text": "If I could reverse it back, I\ncould reverse the other one. Only once I reverse\nboth of the inputs am",
    "start": "4135680",
    "end": "4143549"
  },
  {
    "text": "I allowed to reverse the output. But I don't have. I could just let it sit there.",
    "start": "4143550",
    "end": "4148729"
  },
  {
    "text": "It's not a gate in\nthe sense that it doesn't compute the answer. But what you know is that if\nyou have an output of true,",
    "start": "4148729",
    "end": "4156339"
  },
  {
    "text": "you know that the\ninputs must be true. So it's kind of an AND.",
    "start": "4156340",
    "end": "4161740"
  },
  {
    "text": "We call it a\nconstraint logic AND. Now here, this I claim is an OR. Now if you look at this in a\ngraph, it's totally symmetric.",
    "start": "4161740",
    "end": "4169410"
  },
  {
    "text": "It's just three blue edges. But if you think of these\ntwo as inputs and these two as outputs, it's an OR.",
    "start": "4169410",
    "end": "4175818"
  },
  {
    "text": "And so what's the point? Well, if I reverse any of the\nedges, the incoming edges,",
    "start": "4175819",
    "end": "4182880"
  },
  {
    "text": "the input edges I\nshould say, then I can reverse the bottom edge. I don't have to.",
    "start": "4182880",
    "end": "4188310"
  },
  {
    "text": "And I could also do both true. This could still\nbe true, and so on.",
    "start": "4188310",
    "end": "4195298"
  },
  {
    "text": "AUDIENCE: So if\nit's symmetric, how do you constrain some of\nthem to be inputs and others to be outputs? PROFESSOR: The inputs\nand output distinction",
    "start": "4195298",
    "end": "4201293"
  },
  {
    "text": "is only in your head. The way that I\nused it is I said, an input is true if\nit's pointing in,",
    "start": "4201293",
    "end": "4208890"
  },
  {
    "text": "an output is true if\nit's pointing out. So that's asymmetric,\nand it's just",
    "start": "4208890",
    "end": "4214760"
  },
  {
    "text": "a way of interpreting what's\nhappening in the graph. the graph knows no difference.",
    "start": "4214760",
    "end": "4220460"
  },
  {
    "text": "This is useful, of course,\nbecause your output is the next vertex's\ninput probably if you're building a\nbunch of ANDS and ORs.",
    "start": "4220460",
    "end": "4228440"
  },
  {
    "text": "If you're building\na regular circuit. So you want that definition\nto be asymmetric. It gets a little bit\nconfusing, and we",
    "start": "4228440",
    "end": "4235772"
  },
  {
    "text": "will spend a lot more\ntime on constraint logic. This is more of a teaser. But that's just in\nthe naming of things.",
    "start": "4235772",
    "end": "4244550"
  },
  {
    "text": "Naming of true and false. OK. So constraint logic, let's say,\nwhat's the decision problem?",
    "start": "4244550",
    "end": "4251780"
  },
  {
    "text": "I give you such a graph. Notice every vertex is either\nan AND, two red and a blue,",
    "start": "4251780",
    "end": "4258810"
  },
  {
    "text": "or an OR, three blues. And I want to know, can\nI reverse that edge?",
    "start": "4258810",
    "end": "4264090"
  },
  {
    "text": "This is actually a crossover\ngadget if you're curious. In this world,\ncrossover gadgets, you can just build\nusing ANDs and ORs.",
    "start": "4264090",
    "end": "4271500"
  },
  {
    "text": "There's no NOTs in this world. NOTs don't even make\nsense because you can't force anything.",
    "start": "4271500",
    "end": "4276790"
  },
  {
    "text": "But it turns out this\nproblem is PSPACE complete. So even harder than\n3SAT, assuming NP",
    "start": "4276790",
    "end": "4285560"
  },
  {
    "text": "does not equal PSPACE. And the cool thing is\nonce you have developed",
    "start": "4285560",
    "end": "4291690"
  },
  {
    "text": "all that infrastructure, if you\nwant to take a puzzle like Rush Hour-- so these are cars.",
    "start": "4291690",
    "end": "4296870"
  },
  {
    "text": "Each car can slide in\nthe direction of the car, no turns allowed, and your\ngoal is to get some car out,",
    "start": "4296870",
    "end": "4303795"
  },
  {
    "text": "or to move some car\nat all, let's say, I need to do two things. I need to construct an AND\ndate and construct an OR gate,",
    "start": "4303795",
    "end": "4312489"
  },
  {
    "text": "and then I need to check\nthat they fit together. So let me convince\nyou this is an AND",
    "start": "4312490",
    "end": "4318100"
  },
  {
    "text": "with this kind of orientation. And yeah.",
    "start": "4318100",
    "end": "4323870"
  },
  {
    "text": "So this is going to\nfeel a little backwards. Inward pointing means\nthat the block is out,",
    "start": "4323870",
    "end": "4331070"
  },
  {
    "text": "and outward pointing\nmeans the block is in. Ignore this picture\nfor the moment.",
    "start": "4331070",
    "end": "4336789"
  },
  {
    "text": "What happens here\nis that if you want to push C into this\ngadget, imagine the dark gray blocks are rigid.",
    "start": "4336789",
    "end": "4343030"
  },
  {
    "text": "They can't they can never move. That's going to be true. We'll see why in a moment. So then it's just about\nthese inner guys moving.",
    "start": "4343030",
    "end": "4349820"
  },
  {
    "text": "If you want to\nmove C in one unit, that will be possible if\nand only if A moves out",
    "start": "4349820",
    "end": "4354910"
  },
  {
    "text": "and B moves out by one unit. A moves out by one unit,\nB moves out by one unit,",
    "start": "4354910",
    "end": "4360210"
  },
  {
    "text": "then this block can slide here,\nthis block can slide here.",
    "start": "4360210",
    "end": "4365420"
  },
  {
    "text": "This block can slide one,\nthis block can slide two, and then C can move in one.",
    "start": "4365420",
    "end": "4372800"
  },
  {
    "text": "On the other hand, this\nis an OR gate, OR vertex. If A moves out one\nor B moves out one,",
    "start": "4372800",
    "end": "4380700"
  },
  {
    "text": "then either E can move down,\nor this guy can move down. Once either of\nthose moves down, D can move all the way to\nthe right or all the way",
    "start": "4380700",
    "end": "4387629"
  },
  {
    "text": "to the left, and then\nC can move down one. This is called a protected Or.",
    "start": "4387629",
    "end": "4393610"
  },
  {
    "text": "Small, subtle detail. If A and B move out, then\neverything can fall apart. So basically, there's\na proof in this book",
    "start": "4393610",
    "end": "4402856"
  },
  {
    "text": "that says you don't need\nto worry about that. We can guarantee\nthat we'll never have both A and B move out.",
    "start": "4402856",
    "end": "4408770"
  },
  {
    "text": "Only one of them will happen. That's the protected part. So that's basically the\nproof of PSPACE-completeness",
    "start": "4408770",
    "end": "4415860"
  },
  {
    "text": "in two pictures. This is the cool thing\nabout constraint logic you don't need a crossover\ngadget because those always",
    "start": "4415860",
    "end": "4421010"
  },
  {
    "text": "happen for free. You just need to check that you\ncan fit the gadgets together. And this is the intended\ntiling to fit them together.",
    "start": "4421010",
    "end": "4427869"
  },
  {
    "text": "And you can check that as long\nthe box only move at most one unit at any time, then\nthese gray regions are solid",
    "start": "4427870",
    "end": "4436640"
  },
  {
    "text": "all the way through. I think I need to add\nsome more filler here. And therefore, the gray\nblocks can never move.",
    "start": "4436640",
    "end": "4444389"
  },
  {
    "text": "And so then, you can analyze\neach gadget one at a time and construct any constraint\nlogic graph in this way.",
    "start": "4444390",
    "end": "4453590"
  },
  {
    "text": " Questions? Yeah? AUDIENCE: So for that\ngraph orientation problem,",
    "start": "4453590",
    "end": "4463420"
  },
  {
    "text": "I do not fully understand. So you're given a graph-- PROFESSOR: You're given a\ngraph and an orientation,",
    "start": "4463420",
    "end": "4469240"
  },
  {
    "text": "and you want to know, can\nI reverse this one edge? So in this world,\nit means you're given an initial placement\nof all the blocks,",
    "start": "4469240",
    "end": "4477570"
  },
  {
    "text": "and you know whether each thing\nis in or out, because you know whether the edge is\npointed to the left",
    "start": "4477570",
    "end": "4483170"
  },
  {
    "text": "or pointed to the right. And you want to know, can\nI move this one block? AUDIENCE: OK. And then for this graph,\nyou satisfied the property",
    "start": "4483170",
    "end": "4490424"
  },
  {
    "text": "that each vertex has at least\ntwo units [? of input. ?] PROFESSOR: Yes, the\ninput-oriented graph",
    "start": "4490424",
    "end": "4496600"
  },
  {
    "text": "should already\nsatisfy the invariant. And then at every\nmove you do, you",
    "start": "4496600",
    "end": "4502489"
  },
  {
    "text": "have to also satisfy\nthe invariant. AUDIENCE: Can you give a\nsmall example of a graph which satisfies that [INAUDIBLE]?",
    "start": "4502490",
    "end": "4508250"
  },
  {
    "text": "PROFESSOR: A small example. Like this one?",
    "start": "4508250",
    "end": "4513860"
  },
  {
    "text": "This is not a single graph. But if I connect this edge to\nhere, and this edge to here,",
    "start": "4513860",
    "end": "4519940"
  },
  {
    "text": "that will satisfy the property. And it's one graph.",
    "start": "4519940",
    "end": "4525510"
  },
  {
    "text": "I don't have a small\nexample offhand but I think you could make. One",
    "start": "4525510",
    "end": "4532610"
  },
  {
    "text": "It's an interesting\nquestion, what's the smallest satisfied graph? Probably 10 vertices or\nsomething should suffice.",
    "start": "4532610",
    "end": "4541290"
  },
  {
    "text": "I should put it on\nthe problem set. But later. We'll talk about constraint\nlogic more later. ",
    "start": "4541290",
    "end": "4548730"
  },
  {
    "text": "More questions?  So we did a lot. We proved Mario is NP-complete.",
    "start": "4548730",
    "end": "4555970"
  },
  {
    "text": "I mean, some hand\nwaving involved. We proved that Rush\nHour is PSPACE-complete",
    "start": "4555970",
    "end": "4561630"
  },
  {
    "text": "if you believe that constraint\nlogic PSPACE-complete. In general, this whole\nclass is about reductions,",
    "start": "4561630",
    "end": "4567180"
  },
  {
    "text": "about taking a\nknown hard problem and converting it\ninto your problem. We will see a ton of them, and\neach kind of type of problem",
    "start": "4567180",
    "end": "4577570"
  },
  {
    "text": "has a different flavor. There's a whole range of\ndifferent 3SAT proofs.",
    "start": "4577570",
    "end": "4582800"
  },
  {
    "text": "This is not the\nonly form of 3SAT. There are probably\na dozen of them . But they all follow\nthe same pattern, which",
    "start": "4582800",
    "end": "4589889"
  },
  {
    "text": "is come up with a clause gadget,\ncome up with a variable gadget, come up with ways to\nconnect them together. And that's a very\nuseful way of thinking",
    "start": "4589890",
    "end": "4596400"
  },
  {
    "text": "about things for some problems. And then for other problems,\nyou might use things",
    "start": "4596400",
    "end": "4602014"
  },
  {
    "text": "like constraint logic. Constraint logic\nis most relevant when it's designed\naround games and puzzles, but it comes up in\nother scenarios too.",
    "start": "4602014",
    "end": "4608992"
  },
  {
    "text": "I think in graph\nlabeling, there have been proofs of\nPSPACE-completeness using constraint logic.",
    "start": "4608992",
    "end": "4616790"
  },
  {
    "text": "Next class, we'll\ntalk about a problem called three partition, which\nis really useful for problems that involve numbers and adding\nup numbers, where 3SAT isn't",
    "start": "4616790",
    "end": "4624940"
  },
  {
    "text": "really useful but three\npartition turns out to be the right thing.",
    "start": "4624940",
    "end": "4630160"
  },
  {
    "text": "So that will be next. And that's all for today.",
    "start": "4630160",
    "end": "4636040"
  },
  {
    "start": "4636040",
    "end": "4650446"
  }
]