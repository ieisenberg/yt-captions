[
  {
    "text": "[SQUEAKING] [RUSTLING] [CLICKING]",
    "start": "0",
    "end": "8347"
  },
  {
    "text": " ANA BELL: All right. Welcome, everyone.",
    "start": "8347",
    "end": "13720"
  },
  {
    "text": "So in case you\nmissed last lecture, I've got some extra\ndebugging ducks",
    "start": "13720",
    "end": "19680"
  },
  {
    "text": "that were left over from last\nlecture's debugging lecture. Please take them home.",
    "start": "19680",
    "end": "25865"
  },
  {
    "text": "I don't want to have to\ntake them back to my office and then bring them\nback so many times. So please, give\nthem a good home.",
    "start": "25865",
    "end": "32729"
  },
  {
    "text": "If you find them useful\nin your debugging strategy throughout your\nprogramming careers,",
    "start": "32729",
    "end": "40739"
  },
  {
    "text": "I suggest you\nupgrade to carrying a debugging duck\nwith you everywhere, as I have on my phone.",
    "start": "40740",
    "end": "46140"
  },
  {
    "text": "I use it in my day to day life. So that's just the next\nstep beyond an actual duck.",
    "start": "46140",
    "end": "53100"
  },
  {
    "text": "All right, so let's get\nstarted on today's lecture. We will be going over the idea\nof exceptions and assertions.",
    "start": "53100",
    "end": "62370"
  },
  {
    "text": "And these are basically\nthose scary red errors that we get when\nour program crashes.",
    "start": "62370",
    "end": "69670"
  },
  {
    "text": "OK? Today's lecture will\nhopefully shed some light on exactly what\nthese exceptions are",
    "start": "69670",
    "end": "75280"
  },
  {
    "text": "and how we can actually use them\nto our advantage in our code. So let's start by\ntalking about exceptions.",
    "start": "75280",
    "end": "83050"
  },
  {
    "text": "So when you run your code,\nusually it runs without error,",
    "start": "83050",
    "end": "88260"
  },
  {
    "text": "produces the right output\nall the time, like mine does. But sometimes it so\nhappens that your code",
    "start": "88260",
    "end": "95970"
  },
  {
    "text": "hits an unexpected condition. And when that unexpected\ncondition is run,",
    "start": "95970",
    "end": "101730"
  },
  {
    "text": "you get an exception to\nsomething that was expected. So we've already seen a bunch\nof different exception examples.",
    "start": "101730",
    "end": "108910"
  },
  {
    "text": "So we even talked about a\ncouple of these last lecture. So we've got index\nerrors where you index too far into some\nlist, type errors where",
    "start": "108910",
    "end": "116610"
  },
  {
    "text": "you're doing funky things\nwith types that Python doesn't like syntax. Errors are also exceptions.",
    "start": "116610",
    "end": "122576"
  },
  {
    "text": "Name errors are also exceptions. So a bunch of these errors\nthat we've encountered are types of exceptions.",
    "start": "122577",
    "end": "128990"
  },
  {
    "text": "So it turns out so far in\nour programming experience that whenever we\nget an exception,",
    "start": "128990",
    "end": "136640"
  },
  {
    "text": "the program immediately crashes. And really we don't have any\nway to handle these exceptions.",
    "start": "136640",
    "end": "142000"
  },
  {
    "text": "We just accept the\nfact that it crashed and we go back to\nthe debugging board. But it turns out that in Python\nwe can actually write code",
    "start": "142000",
    "end": "150100"
  },
  {
    "text": "to handle these exceptions. So if your code does happen\nto throw an exception,",
    "start": "150100",
    "end": "155120"
  },
  {
    "text": "so an error occurs or\nsomething unexpected happens, you can write code that\ndeals with that situation.",
    "start": "155120",
    "end": "162519"
  },
  {
    "text": "And either decides to ignore\nthe fact that an error occurred, set some default values, or\njust raise your own exception",
    "start": "162520",
    "end": "172720"
  },
  {
    "text": "and move on. So we're going to see a bunch\nof examples of these cases.",
    "start": "172720",
    "end": "178260"
  },
  {
    "text": "So the way that we\ndeal with exceptions is using some code blocks.",
    "start": "178260",
    "end": "183950"
  },
  {
    "text": "The way that we\nhandle exceptions is using these try\nand except blocks. So the way that we write\nan exception handler",
    "start": "183950",
    "end": "193810"
  },
  {
    "text": "is to put some potentially\nproblematic code inside this try block.",
    "start": "193810",
    "end": "199700"
  },
  {
    "text": "So the try is a\nkeyword in Python, so obviously you can't name\na variable try or anything like that.",
    "start": "199700",
    "end": "205150"
  },
  {
    "text": "If you type it in your code,\nyou'll see it turns blue. And try tells Python that you're\nstarting a code block that",
    "start": "205150",
    "end": "211240"
  },
  {
    "text": "contains some lines of code\nyou'd like Python to execute. So just normal code.",
    "start": "211240",
    "end": "217720"
  },
  {
    "text": "If Python is able to\nsuccessfully execute these lines of code without\nan exception being raised,",
    "start": "217720",
    "end": "222860"
  },
  {
    "text": "so without the program\ncrashing, then nothing happens. Nothing is run inside\nthis except block.",
    "start": "222860",
    "end": "229840"
  },
  {
    "text": "And the code just\ncontinues as normal. But if it so happens that,\nin that code that you ran",
    "start": "229840",
    "end": "236680"
  },
  {
    "text": "something strange has\nhappened and the code would have crashed.",
    "start": "236680",
    "end": "241750"
  },
  {
    "text": "The code actually\ndoesn't crash, because we can catch the exception\nthat gets raised",
    "start": "241750",
    "end": "247630"
  },
  {
    "text": "inside this except block. So if we have an associated\nexcept block over here to a try",
    "start": "247630",
    "end": "254580"
  },
  {
    "text": "block from here. Python is going to try\nto run this potentially problematic code. And if an exception\nis raised, it",
    "start": "254580",
    "end": "261180"
  },
  {
    "text": "will stop running any further\nlines inside the try block and immediately hop to the\nlines in the except block.",
    "start": "261180",
    "end": "268380"
  },
  {
    "text": "And the lines in the except\nblock will then get executed. So to just draw a\nparallel to, if I",
    "start": "268380",
    "end": "276600"
  },
  {
    "text": "were to say this in\nterms of if and else. The way that I would describe\nthe try and accept blocks",
    "start": "276600",
    "end": "282390"
  },
  {
    "text": "is I would say if,\nand then I would put all the potentially\nproblematic lines of code",
    "start": "282390",
    "end": "288720"
  },
  {
    "text": "that I'd like to write inside\nthis condition for the if. And if all of\nthese lines of code",
    "start": "288720",
    "end": "294000"
  },
  {
    "text": "manage to successfully run,\nthen nothing else happens. The inside of this if is\nessentially just a pass.",
    "start": "294000",
    "end": "300720"
  },
  {
    "text": "And we don't execute\nthe else and then we just carry on with\nthe rest of our lives. But if there is\nsome line of code",
    "start": "300720",
    "end": "307170"
  },
  {
    "text": "here that we're trying to run\nthat crashes or that causes the program to crash,\nPython will say nope,",
    "start": "307170",
    "end": "313120"
  },
  {
    "text": "I'm not going to crash\njust yet, let me see what the code would like me to do. And so we'd hop inside\nthis else and then",
    "start": "313120",
    "end": "319450"
  },
  {
    "text": "we'd do something to\nhandle the problem. The something we do is\ninside this except block.",
    "start": "319450",
    "end": "324560"
  },
  {
    "text": "So again, this is not\ncode we'd ever write. It's just kind of a\nway to draw parallel with what we know so far.",
    "start": "324560",
    "end": "331370"
  },
  {
    "text": "The code that we would write\nis this try a bunch of code, except, do some lines of code\nif an error should come up",
    "start": "331370",
    "end": "341140"
  },
  {
    "text": "in the try block. So let's look at some\nexamples with code that you should be able to write\nat this point in the course.",
    "start": "341140",
    "end": "348470"
  },
  {
    "text": "So we have some code\non the left here. It's a function\ncalled some digits.",
    "start": "348470",
    "end": "354310"
  },
  {
    "text": "And we're writing this code\nwithout any exceptions OK? We're just writing it as if you\nwere given this code on a quiz.",
    "start": "354310",
    "end": "361669"
  },
  {
    "text": "What would be one solution? So this some digits\ntakes in a string S.",
    "start": "361670",
    "end": "368611"
  },
  {
    "text": "And we say it's non-empty,\ncontaining some digits, and I want to return the\nsum of all the characters that are digits.",
    "start": "368611",
    "end": "374130"
  },
  {
    "text": "So I don't actually say anything\nabout whether this string S contains non digit characters.",
    "start": "374130",
    "end": "380580"
  },
  {
    "text": "But let's write it in\na robust way anyway. So we'd have a loop that\ngoes through every character",
    "start": "380580",
    "end": "387530"
  },
  {
    "text": "in that string S. And I'm\nusing this in keyword here, this nice little\ntrick here that says",
    "start": "387530",
    "end": "392690"
  },
  {
    "text": "if that character, so\nwhatever character it may be, is inside this string of digits,\nthen I know it's a number--",
    "start": "392690",
    "end": "403419"
  },
  {
    "text": "Sorry, I know it's a digit. And I'm going to\ncast that digits 0 through 9, whatever it\nmay be, to an integer,",
    "start": "403420",
    "end": "409710"
  },
  {
    "text": "add it to my running total. And then that loop does\nits thing until it's done. And then I return the total.",
    "start": "409710",
    "end": "416560"
  },
  {
    "text": "So in terms of\nrunning the code, this",
    "start": "416560",
    "end": "421770"
  },
  {
    "text": "is just as I have\nit on the slide. So here, if the user gives\nme the string 1, 2, 3, I'm going to sum 1,\nplus 2, plus 3, six.",
    "start": "421770",
    "end": "429990"
  },
  {
    "text": "Perfect. And if the user gives\nme 1, 2, 3, and then some random characters\nthat I know I can't add,",
    "start": "429990",
    "end": "437040"
  },
  {
    "text": "Python will still be able\nto evaluate it, because that if statement will not be run.",
    "start": "437040",
    "end": "442990"
  },
  {
    "text": "Right? For A, B, and C, we\ndon't go inside the if. So there's no need\nto cast anything. All right.",
    "start": "442990",
    "end": "448490"
  },
  {
    "text": "So the code still works. If I didn't have\nthis if here, if I",
    "start": "448490",
    "end": "453759"
  },
  {
    "text": "decided to just cast to an\nint every single thing that comes my way, the first line\nof code will still work,",
    "start": "453760",
    "end": "460100"
  },
  {
    "text": "but the second line of code\nwill throw an exception. You see? I have on the right hand\nside my scary red text",
    "start": "460100",
    "end": "467710"
  },
  {
    "text": "that says ValueError, invalid\nliteral for int with base 10 a.",
    "start": "467710",
    "end": "473610"
  },
  {
    "text": "Kind of hard to parse. But after you've seen\na bunch of these,",
    "start": "473610",
    "end": "479688"
  },
  {
    "text": "you'll figure out that\nthere's something going on with my types. And then I'm trying to cast--",
    "start": "479688",
    "end": "485690"
  },
  {
    "text": "I'm trying to cast to\nan integer the string a. Obviously, it doesn't\nknow how to do that.",
    "start": "485690",
    "end": "492419"
  },
  {
    "text": "So that's the potentially\nproblematic line. Right? Casting to an integer.",
    "start": "492420",
    "end": "498190"
  },
  {
    "text": "So let's try to\nwrite the same code, except that now we'll do\nit with exception handling.",
    "start": "498190",
    "end": "503830"
  },
  {
    "text": "So a bunch of it is\ngoing to be the same. What we're going to change is--",
    "start": "503830",
    "end": "509260"
  },
  {
    "text": "The potentially problematic\ncode is these 2 lines here. Right? I don't need the if anymore.",
    "start": "509260",
    "end": "517500"
  },
  {
    "text": "Instead, I'm going\nto just assume I can cast every single\ncharacter to an integer.",
    "start": "517500",
    "end": "523129"
  },
  {
    "text": "And I'm going to try to do that. So I'm going to try to\ncast every single character to an integer, and then\nadd it to my running total.",
    "start": "523130",
    "end": "531125"
  },
  {
    "text": " Most of the time that's\ngoing to work if the input is",
    "start": "531125",
    "end": "537580"
  },
  {
    "text": "a digit, but sometimes\nthe users give me something that's non-digit.",
    "start": "537580",
    "end": "542920"
  },
  {
    "text": "In that case, you\nsaw what happens, the code throws a value error. So if we didn't have the except\nblock, nor the try block,",
    "start": "542920",
    "end": "550600"
  },
  {
    "text": "the code crashes immediately. No answer is even given. But with the except\nblock, Python",
    "start": "550600",
    "end": "556210"
  },
  {
    "text": "will say, oh, in this\nparticular for loop run I had an exception raised.",
    "start": "556210",
    "end": "563329"
  },
  {
    "text": "So I'm going to execute whatever\nis inside the except block. And the except block says\nprint, can't convert,",
    "start": "563330",
    "end": "569230"
  },
  {
    "text": "and then the character that\nit couldn't convert that time through the loop. And then that loop\niteration is done",
    "start": "569230",
    "end": "576230"
  },
  {
    "text": "and it goes on to the next\ncharacter in the sequence. ",
    "start": "576230",
    "end": "582000"
  },
  {
    "text": "So let's run the code. And this is-- Some\ndigits with the except.",
    "start": "582000",
    "end": "588270"
  },
  {
    "text": "So here I've got the user\ngiving me perfectly fine input. No exceptions are raised.",
    "start": "588270",
    "end": "594330"
  },
  {
    "text": "The code worked well. If the user gives me some\ncharacters within there,",
    "start": "594330",
    "end": "600030"
  },
  {
    "text": "the loops go through. It adds 1, plus 2, plus 3. But then, when it tries to\ncast to an integer, the a,",
    "start": "600030",
    "end": "608270"
  },
  {
    "text": "over here, as the\niteration goes to the a, is going to say this raises a\nvalue error, as we just saw.",
    "start": "608270",
    "end": "615750"
  },
  {
    "text": "And I'm going to\nexecute whatever is inside the except block. So it prints couldn't\nconvert character. There it is.",
    "start": "615750",
    "end": "621110"
  },
  {
    "text": "And then I actually\ngave the user the character it\ncouldn't convert. It goes on to the next\niteration, the next character",
    "start": "621110",
    "end": "626780"
  },
  {
    "text": "in the sequence. The B, again,\ntries to convert B. It can't cast it to an integer.",
    "start": "626780",
    "end": "632400"
  },
  {
    "text": "So we print couldn't convert B. And then lastly, the C,\nsame with the C. Does",
    "start": "632400",
    "end": "638080"
  },
  {
    "text": "that make sense? Is that all right so far? So kind of like a little if\nelse situation going on here?",
    "start": "638080",
    "end": "643300"
  },
  {
    "text": " Nice. Places to put try/except\nblocks are when you're",
    "start": "643300",
    "end": "650480"
  },
  {
    "text": "dealing with user input, because\nthe users, when they give you some inputs for using\nthe actual input command,",
    "start": "650480",
    "end": "658410"
  },
  {
    "text": "they're very unpredictable. We don't know what kinds\nof things they'll give you, even though you give\nthem clear instructions",
    "start": "658410",
    "end": "664310"
  },
  {
    "text": "to tell me one number or\ntell me another number. So in these 3 lines\nof code, down here,",
    "start": "664310",
    "end": "676200"
  },
  {
    "text": "I've got the user\ngiving me 2 numbers. And then I print the first\none divided by the second one.",
    "start": "676200",
    "end": "682530"
  },
  {
    "text": "So I'm a nice user. I do what I'm told, so I'm\ngoing to do 5 divided by 8.",
    "start": "682530",
    "end": "687769"
  },
  {
    "text": "Perfect. The code runs well.  Let's say somebody else\nruns the code and this time",
    "start": "687770",
    "end": "695210"
  },
  {
    "text": "they decide to do seven\ndivided by, I don't know, five, like that.",
    "start": "695210",
    "end": "700940"
  },
  {
    "text": "Value error. So that's one thing\nthat could go wrong. The user tries to be funny.",
    "start": "700940",
    "end": "708740"
  },
  {
    "text": "And then another thing\nthat could go wrong is, let's say, the user gives\nme a 0 for the second number.",
    "start": "708740",
    "end": "714720"
  },
  {
    "text": "So in this case, I get\na ZeroDivisionError. You can see Python doesn't\nknow how to divide by 0. So it raises an exception.",
    "start": "714720",
    "end": "721829"
  },
  {
    "text": "This thing is ZeroDivisionError.  So this is a case where I'm\ndealing with potentially",
    "start": "721830",
    "end": "729520"
  },
  {
    "text": "problematic inputs. So I'm going to wrap my\npotentially problematic lines of code in a try\nand except block.",
    "start": "729520",
    "end": "735920"
  },
  {
    "text": "So I've got those 3 lines\nthat I'm going to try to do. And if anything goes\nwrong, I'm going",
    "start": "735920",
    "end": "741258"
  },
  {
    "text": "to execute whatever is\nin the except block, and all I do is print\nbug in user input.",
    "start": "741258",
    "end": "746589"
  },
  {
    "text": "OK. So let's run that. That's this one here.",
    "start": "746590",
    "end": "752500"
  },
  {
    "text": "So here, again, proper\ninput works well. If the user gives me a\nletter, bug and user input.",
    "start": "752500",
    "end": "762490"
  },
  {
    "text": "So a much nicer friendlier\nway to crash the program then value error or whatever it was.",
    "start": "762490",
    "end": "768740"
  },
  {
    "text": "And then again, if\nthe user gives me a 0, bug in user input.",
    "start": "768740",
    "end": "774230"
  },
  {
    "text": "Again, much nicer way\nto crash the program. So what we can actually do\nis have specific behaviors",
    "start": "774230",
    "end": "786330"
  },
  {
    "text": "depending on what\nexceptions are raised. Right? So maybe I don't\nwant a generic text",
    "start": "786330",
    "end": "792360"
  },
  {
    "text": "that says bug in user input\nfor both of those cases. Right? Maybe if the user\ndivides by 0, I",
    "start": "792360",
    "end": "798302"
  },
  {
    "text": "want to give them a different\nmessage than if the user gave me a letter. So in that case,\nwhat I can do is",
    "start": "798302",
    "end": "805589"
  },
  {
    "text": "I can have different\nexcept blocks for every different error\nthat I might come up.",
    "start": "805590",
    "end": "811270"
  },
  {
    "text": "So as I'm writing this code,\nI can think ahead, right? And I can try to\ncatch specific errors.",
    "start": "811270",
    "end": "818079"
  },
  {
    "text": "So here I can catch\nthe value error. So I say except and then I\nsay the name of the error",
    "start": "818080",
    "end": "824880"
  },
  {
    "text": "that I'd like to catch. And this block of code,\nthis except block of code",
    "start": "824880",
    "end": "830910"
  },
  {
    "text": "will be run only if the\ncode in the try block crashes with that\nspecific value error.",
    "start": "830910",
    "end": "837660"
  },
  {
    "text": "Right? And then I can also catch my\nzero division error down here. And in this particular\ncase, this except block",
    "start": "837660",
    "end": "846630"
  },
  {
    "text": "is only run when the\nZeroDivisionError is raised. Right?",
    "start": "846630",
    "end": "852300"
  },
  {
    "text": "So here in the value error I'm\ngoing to print for the user, I could not convert to a number.",
    "start": "852300",
    "end": "857430"
  },
  {
    "text": "So a more specific error\nmessage so they know what's up. And in a ZeroDivisionError\nI can also",
    "start": "857430",
    "end": "864310"
  },
  {
    "text": "flag that there was an issue. I can't divide by 0 by\nprinting that to the screen. And then I can say a\ndivided by b is infinity.",
    "start": "864310",
    "end": "871480"
  },
  {
    "text": "And I can continue\nthe last statement that was supposed to be done\nin the try block, a plus b,",
    "start": "871480",
    "end": "878155"
  },
  {
    "text": "I can give them the\nanswer to a plus b, because we can add a 0 to a. No problem.",
    "start": "878155",
    "end": "884680"
  },
  {
    "text": "The last except\nblock down here is catching anything else that's\nnot a value error and not",
    "start": "884680",
    "end": "890830"
  },
  {
    "text": "a zero division error. So I can't think of anything\nthat could go wrong. So if we happen to go in here,\nsomething went very wrong.",
    "start": "890830",
    "end": "900019"
  },
  {
    "text": "I would say the only\nthing I can think of is if our computer\nis almost out of memory,",
    "start": "900020",
    "end": "906610"
  },
  {
    "text": "and running this little piece\nof code pushes it over the edge. Right? Then Python will probably\ncrash and maybe it'll",
    "start": "906610",
    "end": "913630"
  },
  {
    "text": "print that error before\ncompletely shutting down the computer or something. But that last one\nshould never really run.",
    "start": "913630",
    "end": "921089"
  },
  {
    "text": "So let me show you\nwhat happens when we run the code with these\nspecific except blocks now.",
    "start": "921090",
    "end": "927160"
  },
  {
    "text": "So if the user gives me\nperfectly nice input, then the program\nproceeds as normal. Every line of code\ninside the try block",
    "start": "927160",
    "end": "933839"
  },
  {
    "text": "is executed over here. None of the accept\nblocks are executed.",
    "start": "933840",
    "end": "938990"
  },
  {
    "text": "The user gives me a letter. I end the program\ngracefully with the message",
    "start": "938990",
    "end": "945550"
  },
  {
    "text": "could not convert to\na number so then they know that I caught them. And then the last one is\nif I try to divide by 0.",
    "start": "945550",
    "end": "954290"
  },
  {
    "text": "Again, I've got the little\nmessage, can't divide by 0. And then I give them their\ndivision to be infinity.",
    "start": "954290",
    "end": "959930"
  },
  {
    "text": "And a plus b is 6. So I do all the lines of code\nthat are caught over here. ",
    "start": "959930",
    "end": "967090"
  },
  {
    "text": "Questions so far? Seems all right so far. OK.",
    "start": "967090",
    "end": "972260"
  },
  {
    "text": "So really nice ways for us to\ndeal with exceptions that get raised in our programs.",
    "start": "972260",
    "end": "977959"
  },
  {
    "text": "Now the things\nthat I've told you that we can associate\nwith a try block",
    "start": "977960",
    "end": "983780"
  },
  {
    "text": "is an except block, right? So we've done that. But we can actually associate\na couple other things",
    "start": "983780",
    "end": "989180"
  },
  {
    "text": "with try blocks. And we don't really\nuse them in this class, but I just thought\nI'd mention them. So if you have an else block\nassociated with a try block,",
    "start": "989180",
    "end": "997280"
  },
  {
    "text": "that means the lines of\ncode inside the else block will execute when everything\ninside the try block",
    "start": "997280",
    "end": "1003460"
  },
  {
    "text": "is executed perfectly. So if everything goes\naccording to plan, whatever you put inside the else\nblock will also get executed.",
    "start": "1003460",
    "end": "1011660"
  },
  {
    "text": "And then you can have a\nfinally block as well. So just like we have\na try and accept,",
    "start": "1011660",
    "end": "1017650"
  },
  {
    "text": "you can also have a finally\nassociated with those. And the body of the finally\nwill be executed no matter what.",
    "start": "1017650",
    "end": "1022810"
  },
  {
    "text": "If an exception was raised,\nyou also execute the finally. If the code worked\nperfectly fine without raising any errors,\nthe finally also gets executed.",
    "start": "1022810",
    "end": "1030920"
  },
  {
    "text": "So I gave an example\nhere of something that you might put\ninside the finally block, so sort of clean up code.",
    "start": "1030920",
    "end": "1037349"
  },
  {
    "text": "So if you're writing code\nthat opens files from the file system, a good idea\nis to close them",
    "start": "1037349",
    "end": "1042530"
  },
  {
    "text": "before you finish your program. So that's something\nthat you might want to do inside the finally\nblock just close files",
    "start": "1042530",
    "end": "1048380"
  },
  {
    "text": "before shutting down, before\nyour program terminates.",
    "start": "1048380",
    "end": "1053990"
  },
  {
    "text": "OK. So I've shown you how\nto deal with exceptions, but now what do we do\ninside the accept blocks?",
    "start": "1053990",
    "end": "1062240"
  },
  {
    "text": "OK. We've done a couple\nof different things, mostly printing out that\nsomething went wrong, but we can do\nvarious other things.",
    "start": "1062240",
    "end": "1069799"
  },
  {
    "text": "One thing, and I don't\nrecommend doing this, is to just fail silently. Certainly we could write\ncode that basically has--",
    "start": "1069800",
    "end": "1077120"
  },
  {
    "text": "Yeah. There's a question. AUDIENCE: Sorry. The last time when you said-- ANA BELL: Yep. AUDIENCE: Like,\nhow is it different",
    "start": "1077120",
    "end": "1083617"
  },
  {
    "text": "from like normal else? ANA BELL: So this is an else\nthat we'd associate with a try. So we would do\nsomething like else,",
    "start": "1083617",
    "end": "1091960"
  },
  {
    "text": "and then you would\nprint something here, success or something.",
    "start": "1091960",
    "end": "1097740"
  },
  {
    "text": "And then if the code executes\nperfectly without an error, then you'll also print success.",
    "start": "1097740",
    "end": "1103717"
  },
  {
    "text": "AUDIENCE: OK. ANA BELL: Yeah.  So what do we do inside\nthe except blocks?",
    "start": "1103718",
    "end": "1112169"
  },
  {
    "text": "One thing is to\nfail silently, which means that well, you could\ntry your entire piece of code,",
    "start": "1112170",
    "end": "1118650"
  },
  {
    "text": "and then you could say except. And then the only line\nyou have in except is maybe a line that says pass.",
    "start": "1118650",
    "end": "1124200"
  },
  {
    "text": "So that means any error that\nhappens, you would catch, but you do absolutely\nnothing and let the program continue with a\npotentially bad value being",
    "start": "1124200",
    "end": "1132420"
  },
  {
    "text": "passed along. That's not a good idea. You could also silently\nsubstitute values",
    "start": "1132420",
    "end": "1138090"
  },
  {
    "text": "that you know might\nbe problematic without flagging things happening. Also not good ideas.",
    "start": "1138090",
    "end": "1145840"
  },
  {
    "text": "At the very least, you should\nflag something to the output that something\nweird has happened.",
    "start": "1145840",
    "end": "1151350"
  },
  {
    "text": "Another thing you could do\nis return some error value. So you could have a whole\nbunch of variables in your code",
    "start": "1151350",
    "end": "1156480"
  },
  {
    "text": "that you could set\nto some values, like flags kind of thing,\nwhenever your code runs",
    "start": "1156480",
    "end": "1164820"
  },
  {
    "text": "into an exception block. Right? But the problem with\nthat is that you have to now check for all these\nvalues further on in your code.",
    "start": "1164820",
    "end": "1173380"
  },
  {
    "text": "Right? So now your code becomes\noverly complicated, because you have a whole bunch\nof extra variables you're constantly checking to see\nif any errors were flagged",
    "start": "1173380",
    "end": "1181050"
  },
  {
    "text": "or something like that happened. One last thing, and this is\nwhat I'll show you you can do,",
    "start": "1181050",
    "end": "1186269"
  },
  {
    "text": "is to actually still\nstop the execution. So much like when\nwe input when we tried to run the\nsum digits program",
    "start": "1186270",
    "end": "1193800"
  },
  {
    "text": "and it crashed\nwith a value error. We could still make\nour program crash,",
    "start": "1193800",
    "end": "1198840"
  },
  {
    "text": "but it's on our own terms. So we can raise our\nown ValueErrors,",
    "start": "1198840",
    "end": "1204000"
  },
  {
    "text": "or whatever kind of error\nyou'd like to raise, with your own custom message. So the code still\ncrashes, which is fine,",
    "start": "1204000",
    "end": "1211830"
  },
  {
    "text": "because maybe you don't want\nproblematic code to move on, but you're basically having\nit crash with a custom",
    "start": "1211830",
    "end": "1219450"
  },
  {
    "text": "message and a custom\nerror type being raised. So this is a keyword in Python.",
    "start": "1219450",
    "end": "1224850"
  },
  {
    "text": "You raise your own\nValueError and then in parentheses, you put whatever\nmessage you would like to put.",
    "start": "1224850",
    "end": "1231690"
  },
  {
    "text": "So here's an example\nof the sum digits where we raise our own exception. So let's say that\nindeed, we only",
    "start": "1231690",
    "end": "1238890"
  },
  {
    "text": "wanted the user\nto give us digits and we don't actually\nwant this function",
    "start": "1238890",
    "end": "1244470"
  },
  {
    "text": "to keep running and\npassing along the total if the user ever gave us a\nstring that contains letters.",
    "start": "1244470",
    "end": "1250350"
  },
  {
    "text": "Right. So in that particular\ncase, I'm going to still put a try block\nand an except block.",
    "start": "1250350",
    "end": "1257875"
  },
  {
    "text": "A try block around\nthe problematic code and except block to\ncatch any errors. But now, instead of printing\nsomething and letting",
    "start": "1257875",
    "end": "1265770"
  },
  {
    "text": "the code carry on\nwith the loop, we're going to raise a value\nerror with our own message.",
    "start": "1265770",
    "end": "1273020"
  },
  {
    "text": "So my message is that this\ndrink contained a character. So if I run this code.",
    "start": "1273020",
    "end": "1278690"
  },
  {
    "text": "And it's actually up here. If I run this code with\nperfectly fine inputs,",
    "start": "1278690",
    "end": "1284260"
  },
  {
    "text": "there's no issue. Right? We just calculate\nthe total as we want. But if the user gives\nus some string that",
    "start": "1284260",
    "end": "1292690"
  },
  {
    "text": "does contain extra characters\nwhich maybe we don't actually want to have happen,\nyou see, I still",
    "start": "1292690",
    "end": "1299440"
  },
  {
    "text": "have a ValueError, which is\nthe same kind of exception that was raised without\nthe try and except.",
    "start": "1299440",
    "end": "1306130"
  },
  {
    "text": "But now the message\nthat I've passed in is string contained a character,\nas opposed to invalid literal",
    "start": "1306130",
    "end": "1313090"
  },
  {
    "text": "for whatever that\ncryptic message was.",
    "start": "1313090",
    "end": "1318159"
  },
  {
    "text": "So this is a much\nnicer way to flag or to stop the program,\nto terminate the program,",
    "start": "1318160",
    "end": "1325690"
  },
  {
    "text": "but do it on your own terms.  So let's have you work on\nthis for a couple of minutes.",
    "start": "1325690",
    "end": "1332910"
  },
  {
    "text": "You'll raise your\nown ValueErrors. I'd like you to write\nthis function that's called pairwise division.",
    "start": "1332910",
    "end": "1338460"
  },
  {
    "text": "It takes in 2 lists. The lists should be non-empty\nand they're equal lengths. Right? So per this example, here's\n2 lists that are not empty",
    "start": "1338460",
    "end": "1347700"
  },
  {
    "text": "and they're the same length. And I would like the code\nto basically go element",
    "start": "1347700",
    "end": "1353220"
  },
  {
    "text": "by element. And create a new list where\neach element is going to be,",
    "start": "1353220",
    "end": "1358720"
  },
  {
    "text": "for example, 4 divided\nby 1, 5 divided by 2, and 6 divided by 3. So pairwise, you\ndo the division,",
    "start": "1358720",
    "end": "1365260"
  },
  {
    "text": "put all those elements in a\nnew list, and return that list. If the denominator--\nSo the second parameter",
    "start": "1365260",
    "end": "1374179"
  },
  {
    "text": "passed in Ldenom contains\nany 0, raise a value error.",
    "start": "1374180",
    "end": "1379750"
  },
  {
    "text": "OK. So don't let the code crash\nwith the zero division error, but instead raise a ValueError\nwith a nice message.",
    "start": "1379750",
    "end": "1387190"
  },
  {
    "text": "So start with just the\ncode to do the task, and then add the value\nerror bit at the end.",
    "start": "1387190",
    "end": "1395300"
  },
  {
    "text": "OK. Does anyone have a\nstart how would you like to solve this problem? How do you want to write it?",
    "start": "1395300",
    "end": "1401480"
  },
  {
    "text": "Yeah. AUDIENCE: [INAUDIBLE] ANA BELL: Yep.",
    "start": "1401480",
    "end": "1406706"
  },
  {
    "text": "AUDIENCE: And then try\nto do the [INAUDIBLE],,",
    "start": "1406706",
    "end": "1412020"
  },
  {
    "text": "L [INAUDIBLE] Lnum i over Ldenom\ni [INAUDIBLE] Sorry, for i,",
    "start": "1412020",
    "end": "1418180"
  },
  {
    "text": "I guess, over the\nwhole [INAUDIBLE].. ANA BELL: Lnum at i\ndivided by Ldenom--",
    "start": "1418180",
    "end": "1425760"
  },
  {
    "text": "whoops-- at i. So we do the division for i, in.",
    "start": "1425760",
    "end": "1433780"
  },
  {
    "start": "1433780",
    "end": "1440490"
  },
  {
    "text": "So here, what is i? Is it the element\nor is it an index? Yeah. So how do we grab\nlike basically numbers",
    "start": "1440490",
    "end": "1448850"
  },
  {
    "text": "0 through the length\nof one of these lists? If you want to do it.",
    "start": "1448850",
    "end": "1454347"
  },
  {
    "text": "Yeah. AUDIENCE: Oh. So for i in len Lnum.",
    "start": "1454347",
    "end": "1461765"
  },
  {
    "text": "ANA BELL: Yeah. So we have to do\nrange, remember. Yeah, range(len(Lnum)).",
    "start": "1461765",
    "end": "1466860"
  },
  {
    "text": "Yeah. I think those are\nmy parentheses. That's cool that you did list\ncomprehension right away.",
    "start": "1466860",
    "end": "1474100"
  },
  {
    "text": "Does anyone want to\nrewrite this using a loop? ",
    "start": "1474100",
    "end": "1485390"
  },
  {
    "text": "It's true. Oh, yeah. Go.  AUDIENCE: For e in Lnum. ANA BELL: Yep.",
    "start": "1485390",
    "end": "1492470"
  },
  {
    "text": "AUDIENCE: Lnum of e-- Or I got to say how L is equal\nto L.append in [INAUDIBLE]..",
    "start": "1492470",
    "end": "1502208"
  },
  {
    "text": " ANA BELL: So we still want\nto use the index, right? Because if we're looking\nat the element in Lnum,",
    "start": "1502208",
    "end": "1510150"
  },
  {
    "text": "it's going to be hard for us to\ngrab the same element in Lnum. So let's iterate through\n0 through the range.",
    "start": "1510150",
    "end": "1518529"
  },
  {
    "text": "Right? So basically what\nwe did up there, range, len, and then\npick one of them because they're the same length.",
    "start": "1518530",
    "end": "1524860"
  },
  {
    "text": "So now let's change this to\ni just so we're not confused. I would say i is 0, 1, 2, 3, 4.",
    "start": "1524860",
    "end": "1531040"
  },
  {
    "text": "Right? So now we know\nthis is the index. So with this index in hand,\nthis is the right start.",
    "start": "1531040",
    "end": "1537070"
  },
  {
    "text": "Right? Lnum at i gives me\nthe element in Lnum. Divide by Ldenom exactly at i.",
    "start": "1537070",
    "end": "1546519"
  },
  {
    "text": "AUDIENCE: And then we\ntake that L of [INAUDIBLE] ANA BELL: Yeah.",
    "start": "1546520",
    "end": "1552669"
  },
  {
    "text": "L. We can do L.append,\nsomething like that.",
    "start": "1552670",
    "end": "1558530"
  },
  {
    "text": "We can't say L at i equals\nthat, because our L is-- AUDIENCE: Not [INAUDIBLE].",
    "start": "1558530",
    "end": "1563620"
  },
  {
    "text": "ANA BELL: --not [INAUDIBLE]. Exactly. Yes. Perfect. So we could do like this. So this is just another way.",
    "start": "1563620",
    "end": "1569770"
  },
  {
    "text": " And then at the end we\ncan return our variable.",
    "start": "1569770",
    "end": "1577885"
  },
  {
    "text": "Right.  OK. So that solves our problem.",
    "start": "1577885",
    "end": "1583250"
  },
  {
    "text": "How do we add the piece\nwhere we raise a value error? So how do you want to\ncheck that Ldenom has a 0.",
    "start": "1583250",
    "end": "1592400"
  },
  {
    "text": "Because this should hopefully\nrun work with our code without-- Oh.",
    "start": "1592400",
    "end": "1597740"
  },
  {
    "text": "Oops. Did I do it twice? Sorry. Yes I did. Let me just comment\none of these out.",
    "start": "1597740",
    "end": "1602820"
  },
  {
    "text": "Oops.  There. So how do I add the\npiece about valuers.",
    "start": "1602820",
    "end": "1611480"
  },
  {
    "text": "Yes. AUDIENCE: Depend on your try. And then you add except. And then [INAUDIBLE]\ndo not contain zero.",
    "start": "1611480",
    "end": "1619507"
  },
  {
    "text": "ANA BELL: Yep. So we can pop this into\na try and then except",
    "start": "1619507",
    "end": "1625480"
  },
  {
    "text": "and raise ValueError. Yep. And with some nice message here.",
    "start": "1625480",
    "end": "1632340"
  },
  {
    "text": "Nice message.  And we can also put the\nentire for loop under the try.",
    "start": "1632340",
    "end": "1639470"
  },
  {
    "text": "The code is not very long. It wouldn't make a difference. So if we try to run\nit like that now,",
    "start": "1639470",
    "end": "1645950"
  },
  {
    "text": "I've got my value error\nwith my nice message. ",
    "start": "1645950",
    "end": "1650960"
  },
  {
    "text": "Yeah. Another way we could\nraise the ValueError, just for completion's sake,\nis to say something like--",
    "start": "1650960",
    "end": "1657460"
  },
  {
    "text": "You can even raise things\ninside if statements. They don't have to be\npart of except blocks. Before we even do\nanything with the code,",
    "start": "1657460",
    "end": "1663880"
  },
  {
    "text": "we can say if 0 is in\nLdenom, raise value error.",
    "start": "1663880",
    "end": "1669550"
  },
  {
    "text": "That would also be\na fine thing to do. ",
    "start": "1669550",
    "end": "1674720"
  },
  {
    "text": "All right. So we can raise valuers\nwherever we'd like. So now I'd like to talk a\nlittle bit about assertions.",
    "start": "1674720",
    "end": "1682160"
  },
  {
    "text": "So assertions are actually still\nexceptions that get raised. They're just a very\nspecial type of exceptions",
    "start": "1682160",
    "end": "1690040"
  },
  {
    "text": "that we mostly use as a\ndefensive programming tool. So assertions are basically\nused to enforce these contracts",
    "start": "1690040",
    "end": "1700059"
  },
  {
    "text": "that we make\nbetween somebody who writes a function and\nsomebody who uses a function. So that's basically the\nfunction docstrings.",
    "start": "1700060",
    "end": "1707110"
  },
  {
    "text": "Right? When we talked\nabout docstrings, I said that it's very\nhard for us to enforce",
    "start": "1707110",
    "end": "1712180"
  },
  {
    "text": "the text within the docstring. Right? Because the person who's\nwriting the function",
    "start": "1712180",
    "end": "1718945"
  },
  {
    "text": "is saying the input list should\nnot be empty or to input lists,",
    "start": "1718945",
    "end": "1724899"
  },
  {
    "text": "like in the previous example,\nshould be the same length. And there's no way for us\nto really enforce that. It's just something\nthat's nice to have.",
    "start": "1724900",
    "end": "1731450"
  },
  {
    "text": "And we're going to\nguarantee that the code runs if these things are upheld. But it turns out that\nassertions are actually",
    "start": "1731450",
    "end": "1738400"
  },
  {
    "text": "a nice way for us to\nadd to a nice thing to add to our\nfunctions that do try",
    "start": "1738400",
    "end": "1743660"
  },
  {
    "text": "to enforce this contract\nthrough the specification. So the way we create\nan assert, we say,",
    "start": "1743660",
    "end": "1749680"
  },
  {
    "text": "assert and I'm asserting\nthat this statement is true. So if I want that the\ninput length for a function",
    "start": "1749680",
    "end": "1756700"
  },
  {
    "text": "to be non-zero, I would assert\nthat the length L is not equal to 0 or\nsomething like that.",
    "start": "1756700",
    "end": "1762680"
  },
  {
    "text": "And if the assertion is true,\nif that condition is met, then the code\ncarries on as normal.",
    "start": "1762680",
    "end": "1768920"
  },
  {
    "text": "But if the assertion\nis not true, then Python ends with\nan assertion error and then some message that\nthe condition was not true.",
    "start": "1768920",
    "end": "1777340"
  },
  {
    "text": "And these are really\nnice because it halts the execution of a program\nas soon as that contract is not",
    "start": "1777340",
    "end": "1783019"
  },
  {
    "text": "held. Right? As soon as something within the\nspecification has gone wrong, then the program terminates\nwith those assertion errors.",
    "start": "1783020",
    "end": "1790060"
  },
  {
    "text": "And it's nice to see\nthem, because if you're debugging your\ncode, you don't want to propagate bad values through\nfunctions, because that value",
    "start": "1790060",
    "end": "1801388"
  },
  {
    "text": "might get propagated\nlater and later, and later, and then it would\nmake your debugging very hard.",
    "start": "1801388",
    "end": "1806420"
  },
  {
    "text": "OK? So if you stop the execution\nas soon as something is just strange or off, as in\nsomething like an assumption",
    "start": "1806420",
    "end": "1815810"
  },
  {
    "text": "a parameter is not\nmet, then that's good.",
    "start": "1815810",
    "end": "1820820"
  },
  {
    "text": "So in some digits example, here\nis the code that we wrote last.",
    "start": "1820820",
    "end": "1826519"
  },
  {
    "text": "So total down to the bottom\nis exactly what we had before. All we're going to add\nis this assert statement",
    "start": "1826520",
    "end": "1832160"
  },
  {
    "text": "up here that the\nlength of is not empty, because part of my\ncontract here is that s is a non-empty string.",
    "start": "1832160",
    "end": "1838800"
  },
  {
    "text": "Right? So that's a nice\nthing to assert. If the user ever gives\nus an empty string, the program will terminate.",
    "start": "1838800",
    "end": "1845039"
  },
  {
    "text": "So in this example here,\nI've got some digits with the assert.",
    "start": "1845040",
    "end": "1850790"
  },
  {
    "text": "So if the user gives us an empty\nstring, no total was created",
    "start": "1850790",
    "end": "1856580"
  },
  {
    "text": "and the assert was\nimmediately false. So length was equal to 0.",
    "start": "1856580",
    "end": "1862370"
  },
  {
    "text": "The assertion error was raised\nwith the message s is empty.",
    "start": "1862370",
    "end": "1867450"
  },
  {
    "text": "So what I had here.  If I have fine input, then\nno assertion is raised,",
    "start": "1867450",
    "end": "1876809"
  },
  {
    "text": "and the code carries\non as normal. So that's nice. ",
    "start": "1876810",
    "end": "1882560"
  },
  {
    "text": "So let's have you add one more\nline of code to the program that we just wrote.",
    "start": "1882560",
    "end": "1887929"
  },
  {
    "text": "Just add an assert statement\nthat enforces the contract.",
    "start": "1887930",
    "end": "1893120"
  },
  {
    "text": "So I have Lnum and Ldenom\nare non-empty lists of equal lengths.",
    "start": "1893120",
    "end": "1898250"
  },
  {
    "text": "So you can do this all\nin one assert statement, or you can put 2 separate\nassert statements with 2 separate messages.",
    "start": "1898250",
    "end": "1904890"
  },
  {
    "text": "However you'd like,\nit is fine with me. So I'll give you a\nminute to work on that and then we can write it.",
    "start": "1904890",
    "end": "1912299"
  },
  {
    "text": "All right. What assertions\nshould I put in here? Yeah.",
    "start": "1912300",
    "end": "1918910"
  },
  {
    "text": "AUDIENCE: Maybe assert\nlen(Lnum) and then [INAUDIBLE]",
    "start": "1918910",
    "end": "1925441"
  },
  {
    "text": "Ldenom, and then [INAUDIBLE]. ANA BELL: So the thing I'm\nasserting should be true.",
    "start": "1925441",
    "end": "1930450"
  },
  {
    "text": "So do I want them to be equal? Yes. Exactly. So I want len(Lnum) to\nequal len(Ldenom) Yeah.",
    "start": "1930450",
    "end": "1941050"
  },
  {
    "text": "Ldenom, like that. Yep, that's one. Right? So the thing you want, you're\nasserting that this is true,",
    "start": "1941050",
    "end": "1947080"
  },
  {
    "text": "and if not, comma, we're\ngoing to put a message. Right? Lengths different or\nsomething like that.",
    "start": "1947080",
    "end": "1953919"
  },
  {
    "text": " Do you want to do the\nother assert statement? Or does somebody else\nwant to take a crack",
    "start": "1953920",
    "end": "1961210"
  },
  {
    "text": "at the other assert? ",
    "start": "1961210",
    "end": "1966980"
  },
  {
    "text": "So the other one is that\nthey are non-empty lists. ",
    "start": "1966980",
    "end": "1972169"
  },
  {
    "text": "Yeah. AUDIENCE: And assert\nat the length of Lnum is not like a exclamation point.",
    "start": "1972170",
    "end": "1981200"
  },
  {
    "text": "Same thing for Ldenom. And that should take\nout [INAUDIBLE]..",
    "start": "1981200",
    "end": "1989697"
  },
  {
    "text": "ANA BELL: Yep. So we can definitely do that. Not equal to 0, comma. ",
    "start": "1989697",
    "end": "1997880"
  },
  {
    "text": "Empty list or\nsomething like that. Yep. Very nice. So here we're trying to\nenforce our nice contracts.",
    "start": "1997880",
    "end": "2004540"
  },
  {
    "text": "And I've got 2\nexamples down here. So here I've got 2\ndifferent lengths of lists. So there you go.",
    "start": "2004540",
    "end": "2010390"
  },
  {
    "text": "My assertion was raised with the\nnice message, lengths differ.",
    "start": "2010390",
    "end": "2016970"
  },
  {
    "text": "And then the code\nwould immediately stop and it would force\nus to check to see why these links are different.",
    "start": "2016970",
    "end": "2022250"
  },
  {
    "text": "So these bad lists won't\npropagate any further if I had larger pieces of code. And then same here.",
    "start": "2022250",
    "end": "2028300"
  },
  {
    "text": "I've got this assertion error\nthat I have an empty list. ",
    "start": "2028300",
    "end": "2037110"
  },
  {
    "text": "Any questions so far?  OK.",
    "start": "2037110",
    "end": "2042919"
  },
  {
    "text": "One more example I\nwant to go through. I'm not going to\nactually run this one, but it is in the Python slides.",
    "start": "2042920",
    "end": "2048379"
  },
  {
    "text": "I just wanted to give you\nanother example of how we can use exceptions\nand assertions in just",
    "start": "2048380",
    "end": "2055429"
  },
  {
    "text": "a different setting. And it hopefully shows\nthat as a programmer, you get to choose how\nyou add these exceptions",
    "start": "2055429",
    "end": "2064730"
  },
  {
    "text": "and assertions. Right? So wherever they seem reasonable\nto add, you should add them.",
    "start": "2064730",
    "end": "2070260"
  },
  {
    "text": "So in this particular\nexample, we are assuming that we\nhave a class list.",
    "start": "2070260",
    "end": "2076020"
  },
  {
    "text": "In this case, I only have\n2 students in my class. So these are their test grades.",
    "start": "2076020",
    "end": "2082969"
  },
  {
    "text": "So I've got a list\nthat looks like this. It looks complicated, but\nI'll walk you through it.",
    "start": "2082969",
    "end": "2088800"
  },
  {
    "text": "This is one student in my list. And this is another\nstudent in my list.",
    "start": "2088800",
    "end": "2095169"
  },
  {
    "text": "So I've got a list\nof lists, where these things that I've\nhighlighted in red is my students.",
    "start": "2095170",
    "end": "2100800"
  },
  {
    "text": "And for each student\nI have more lists as part of their information.",
    "start": "2100800",
    "end": "2107230"
  },
  {
    "text": "So the first list related to\none student is their name. Right?",
    "start": "2107230",
    "end": "2112680"
  },
  {
    "text": "The first element\nis their first name. Second element is\ntheir last name. And then the second\nlist for that student",
    "start": "2112680",
    "end": "2118680"
  },
  {
    "text": "is their grades in the class. So just another list of all\nthe grades in the class. OK.",
    "start": "2118680",
    "end": "2125080"
  },
  {
    "text": "So what I would\nlike to do, and this is the code I'm\ngoing to go through, is what is I'd like to\ncreate a new list based",
    "start": "2125080",
    "end": "2134610"
  },
  {
    "text": "on the original GRE test\ngrades that contains the same information as before.",
    "start": "2134610",
    "end": "2140500"
  },
  {
    "text": "So you can see, I\nstill have 2 lists of students, the first\nrow and the second row. And in each\nstudent's information",
    "start": "2140500",
    "end": "2147690"
  },
  {
    "text": "I again still have their name\nand their list of grades, but I'm adding one\nmore item at the end",
    "start": "2147690",
    "end": "2154080"
  },
  {
    "text": "for each student, which is the\naverage of the list of grades. So I've taken the\naverage of these",
    "start": "2154080",
    "end": "2159330"
  },
  {
    "text": "and plopped it as my\ninteger or float at the end. And same with my next student.",
    "start": "2159330",
    "end": "2165880"
  },
  {
    "text": "So the code that's going\nto do this looks like this. That's just the original list to\ngive you an example to look at,",
    "start": "2165880",
    "end": "2174790"
  },
  {
    "text": "because I find it hard to\nsee things without examples. So this is the code that\ngets the stats for the class.",
    "start": "2174790",
    "end": "2181760"
  },
  {
    "text": "So that creates this new\nlist containing my average at the end for each\nstudent in the class list.",
    "start": "2181760",
    "end": "2188029"
  },
  {
    "text": "So for example,\nstudent here, stu is going to be this\nlist of 2 lists.",
    "start": "2188030",
    "end": "2194030"
  },
  {
    "text": "What I'm going to do in my new\nlist that I'm creating here, new stats, is I'm\ngoing to append student",
    "start": "2194030",
    "end": "2200300"
  },
  {
    "text": "at 0, which is just their name. So just a straight\ncopy and paste. Student (1), which\nis just their grades.",
    "start": "2200300",
    "end": "2206390"
  },
  {
    "text": "Again, a straight\nup copy and paste of all their list of grades. And then I'm going to apply\na function named average",
    "start": "2206390",
    "end": "2215220"
  },
  {
    "text": "to the list of student grades.  And what we're going to see\nin the next couple of slides",
    "start": "2215220",
    "end": "2222130"
  },
  {
    "text": "is we're going to\nsee a few variations of this average\nfunction and what happens when we apply\nthese different functions.",
    "start": "2222130",
    "end": "2231210"
  },
  {
    "text": "But for now, I will assume\nthat this code will do the job.",
    "start": "2231210",
    "end": "2236490"
  },
  {
    "text": "So the original average function\nwill take in a list of grades. So this grades here will\nlook like this blue box here.",
    "start": "2236490",
    "end": "2245940"
  },
  {
    "text": "Right? So just the list of numbers. It's going to sum\nall the grades, so sum of all the\nelements inside that",
    "start": "2245940",
    "end": "2252620"
  },
  {
    "text": "list and divide by how\nmany there are average. OK.",
    "start": "2252620",
    "end": "2257950"
  },
  {
    "text": "Now let's say that I have a\nstudent that contains no quiz",
    "start": "2257950",
    "end": "2264339"
  },
  {
    "text": "grades or no grades at all. In that case, their list\nof grades will be empty.",
    "start": "2264340",
    "end": "2270505"
  },
  {
    "text": " So if I try to apply the sum\nof all the grades, divided",
    "start": "2270505",
    "end": "2277650"
  },
  {
    "text": "by the length of the\ngrades, for somebody who has no grades information,\nthat length will be 0.",
    "start": "2277650",
    "end": "2283230"
  },
  {
    "text": "So I'm going to get a\nZeroDivisionError when I run my code, and it will crash.",
    "start": "2283230",
    "end": "2289930"
  },
  {
    "text": "So what I'd like to do is to\nchange my average function to try to catch such an error.",
    "start": "2289930",
    "end": "2297580"
  },
  {
    "text": "So I'm going to try to do the\nsum divided by the length. And I'm going to catch this\nZeroDivisionError inside this",
    "start": "2297580",
    "end": "2304619"
  },
  {
    "text": "except block. And all I'm going to do is\nprint warning: no grades data.",
    "start": "2304620",
    "end": "2309830"
  },
  {
    "text": "So for any student that actually\nhas grades information here, the code will work--",
    "start": "2309830",
    "end": "2315680"
  },
  {
    "text": "the code to get the average\nwill work just fine, because it will do the\nsum divided by the length.",
    "start": "2315680",
    "end": "2320690"
  },
  {
    "text": " So that means the try\nblock will succeed,",
    "start": "2320690",
    "end": "2326510"
  },
  {
    "text": "and we're going to return the\nsum divided by the length. But if any student enters\nthe zero division error here,",
    "start": "2326510",
    "end": "2332880"
  },
  {
    "text": "we're going to print something. And what do we return? What is the function return\nif we enter the except block?",
    "start": "2332880",
    "end": "2339420"
  },
  {
    "start": "2339420",
    "end": "2350593"
  },
  {
    "text": "That's what's going\nto be printed, but what is this\nfunction actually return? What value?",
    "start": "2350593",
    "end": "2356329"
  },
  {
    "text": "None. Exactly. Right? There's no return inside\nthis except block. And no code after it either.",
    "start": "2356330",
    "end": "2362720"
  },
  {
    "text": "So you can see here,\nif it successfully completes for these 3 students,\nwe've got our numbers.",
    "start": "2362720",
    "end": "2368420"
  },
  {
    "text": "That's what we returned. But for the last student that\nhas no grades information, we're returning none.",
    "start": "2368420",
    "end": "2375650"
  },
  {
    "text": "OK. I don't like that. What I would like\nin my grades book is to have numbers\nas my value there.",
    "start": "2375650",
    "end": "2383190"
  },
  {
    "text": "So instead, let's add a\nreturn for that except block.",
    "start": "2383190",
    "end": "2390540"
  },
  {
    "text": "So we're still going\nto flag the error. We still want to know that\nsomething weird has happened.",
    "start": "2390540",
    "end": "2395640"
  },
  {
    "text": "I don't just want to\nreturn a 0 without actually telling the user that\nsomething's gone down.",
    "start": "2395640",
    "end": "2402180"
  },
  {
    "text": "I still flag the\nerror, but then I can return a 0, so that\nit's still a number. And then, if I do something\nwith numbers at the end,",
    "start": "2402180",
    "end": "2409050"
  },
  {
    "text": "then it all works out. This was a particularly\nhard first Quiz, 10, 10, 80.",
    "start": "2409050",
    "end": "2416110"
  },
  {
    "text": " OK. One last thing we can\ndo is to just assert.",
    "start": "2416110",
    "end": "2423400"
  },
  {
    "text": "Right? So if we want to make sure\nthat every student had some sort of grades information,\nmaybe if the grades data was",
    "start": "2423400",
    "end": "2431610"
  },
  {
    "text": "empty, something weird happened\nfrom a previous function that might have been\ncalled, I don't know,",
    "start": "2431610",
    "end": "2437190"
  },
  {
    "text": "but maybe we say\nlet's just assert that the length of\nthe grades is not 0,",
    "start": "2437190",
    "end": "2443160"
  },
  {
    "text": "so we only want this\ncode to execute if there are some grades information. And if not, let's just raise an\nassertion error just in case.",
    "start": "2443160",
    "end": "2451030"
  },
  {
    "text": "So we can assert that the length\nof grades is not equal to 0. And in that case, the\ncode will terminate",
    "start": "2451030",
    "end": "2459210"
  },
  {
    "text": "as soon as we try to get that\nlast student information. It will crash and it will crash\nwith this assert statement",
    "start": "2459210",
    "end": "2466020"
  },
  {
    "text": "that there's no grades data. And then we can go back\nto the code and see, did we actually\nexpect the student",
    "start": "2466020",
    "end": "2472170"
  },
  {
    "text": "to have information or not? And then we can try\nto work through. ",
    "start": "2472170",
    "end": "2477980"
  },
  {
    "text": "So just a quick summary of\nexceptions and assertions.",
    "start": "2477980",
    "end": "2483830"
  },
  {
    "text": "Hopefully, this lecture\nkind of demystified some of these exceptions\nthat we've been getting.",
    "start": "2483830",
    "end": "2489560"
  },
  {
    "text": "It showed you they're\nnot as scary, as they might have seemed originally.",
    "start": "2489560",
    "end": "2495310"
  },
  {
    "text": "But they don't always have\nto terminate the program. Right? You can catch them.",
    "start": "2495310",
    "end": "2500540"
  },
  {
    "text": "You can deal with\nthem in whatever way that makes sense for that\nparticular function or program.",
    "start": "2500540",
    "end": "2505550"
  },
  {
    "text": "You can print a nice\noutput to the screen. You can set some default values.",
    "start": "2505550",
    "end": "2510830"
  },
  {
    "text": "You can still\nterminate the program, but do it on your own\nterms with your own errors,",
    "start": "2510830",
    "end": "2515870"
  },
  {
    "text": "with your own\ncustom messages, so that the users can see\nsomething nicer than the default Python messages.",
    "start": "2515870",
    "end": "2521450"
  },
  {
    "text": "Right? And so exception handling\nis a very important part",
    "start": "2521450",
    "end": "2527000"
  },
  {
    "text": "of writing a program,\nespecially if you expect weird things to happen.",
    "start": "2527000",
    "end": "2532880"
  },
  {
    "text": "Right? Assertions, on the other\nhand, are a type of exception.",
    "start": "2532880",
    "end": "2537890"
  },
  {
    "text": "And they're useful,\nas I've mentioned, to try to enforce\nthese contracts, these specifications.",
    "start": "2537890",
    "end": "2544410"
  },
  {
    "text": "You basically use\nassertions because you don't want bad values to propagate.",
    "start": "2544410",
    "end": "2550119"
  },
  {
    "text": "So as soon as something that\nisn't as you expect it to be happens, assertion\nerror is raised",
    "start": "2550120",
    "end": "2558625"
  },
  {
    "text": "and the program\nimmediately terminates, allowing you to check to see why\nexactly those conditions were",
    "start": "2558625",
    "end": "2564330"
  },
  {
    "text": "not met. OK. So that's it. That's all I had.",
    "start": "2564330",
    "end": "2569599"
  },
  {
    "start": "2569600",
    "end": "2575000"
  }
]