[
  {
    "text": " The following\ncontent is provided under a Creative\nCommons license. Your support will help MIT\nOpenCourseWare continue",
    "start": "0",
    "end": "6859"
  },
  {
    "text": "to offer high quality\neducational resources for free. To make a donation or\nview additional materials",
    "start": "6860",
    "end": "13320"
  },
  {
    "text": "from hundreds of MIT courses,\nvisit MIT OpenCourseWare at ocw.mit.edu. ",
    "start": "13320",
    "end": "21404"
  },
  {
    "text": "PROFESSOR: Good\nmorning, everyone.  So lecture three of four in the\nshortest path module and today",
    "start": "21404",
    "end": "32150"
  },
  {
    "text": "we'll finally\nconfront our nemesis,",
    "start": "32150",
    "end": "37390"
  },
  {
    "text": "which are negative cycles\nand negative edges. And we will describe\nan algorithm",
    "start": "37390",
    "end": "44240"
  },
  {
    "text": "that is due to two\ndifferent people. They didn't collaborate\nto produce this algorithm.",
    "start": "44240",
    "end": "49360"
  },
  {
    "text": "Bellman and Ford. This computes shortest paths\nin a graph with negative edges.",
    "start": "49360",
    "end": "58720"
  },
  {
    "text": "And not only that,\neven in the graph has negative cycles\nin it, the algorithm",
    "start": "58720",
    "end": "63890"
  },
  {
    "text": "will be correct in\nthe sense that it will report the existence\nof a negative cycle",
    "start": "63890",
    "end": "69830"
  },
  {
    "text": "and, essentially, abort the\ncomputation of shortest paths that are undefined.",
    "start": "69830",
    "end": "75290"
  },
  {
    "text": "And for the few\nvertices that do not have negative cycles in\nbetween them and the source,",
    "start": "75290",
    "end": "83020"
  },
  {
    "text": "the algorithm will report\ncorrect shortest paths. So it is a polynomial\ntime algorithm.",
    "start": "83020",
    "end": "89260"
  },
  {
    "text": "It's fairly easy to describe. And what we'll do is describe\nit, analyze its complexity",
    "start": "89260",
    "end": "95080"
  },
  {
    "text": "and, for once, we'll do a\nformal proof of its correctness",
    "start": "95080",
    "end": "100800"
  },
  {
    "text": "to show that it reports the\nexistence of negative cycles if they do exist. And if they don't\nexist, it correctly",
    "start": "100800",
    "end": "107150"
  },
  {
    "text": "computes shortest path weights. ",
    "start": "107150",
    "end": "112719"
  },
  {
    "text": "So recall that when we\nlook at the general case",
    "start": "112720",
    "end": "119530"
  },
  {
    "text": "of the shortest path problem. We're going to have, let's say,\na vertex u that, in this case,",
    "start": "119530",
    "end": "127150"
  },
  {
    "text": "happens to be our source. And let's say for\nargument's sake that we have a negative\nweight cycle like so.",
    "start": "127150",
    "end": "137312"
  },
  {
    "text": "So let me to draw this in bold.  And this happens to be\na negative rate cycle.",
    "start": "137312",
    "end": "144560"
  },
  {
    "text": "Let's assume that all of these\nedges have positive weights.",
    "start": "144560",
    "end": "150930"
  },
  {
    "text": "Then, if you have\nan algorithm that",
    "start": "150930",
    "end": "157640"
  },
  {
    "text": "needs to work on this type\nof graph, what you want to be able to do is to detect\nthat this negative cycle",
    "start": "157640",
    "end": "165590"
  },
  {
    "text": "exists. And you're going\nto, essentially, say if this vertex\nis v1, for example,",
    "start": "165590",
    "end": "173170"
  },
  {
    "text": "you want to be able to say delta\nu v1 is undefined and similarly",
    "start": "173170",
    "end": "179720"
  },
  {
    "text": "for v2, v3, et cetera. For all of these things,\nthe shortest path lengths",
    "start": "179720",
    "end": "185400"
  },
  {
    "text": "are undefined because\nyou can essentially run through this negative\ncycle any number of times",
    "start": "185400",
    "end": "191330"
  },
  {
    "text": "and get whatever shortest\npath weight you want. For this node, let's call\nthat v0, we have delta u v0",
    "start": "191330",
    "end": "202400"
  },
  {
    "text": "equals 2. And there's a simple\npath of length 1",
    "start": "202400",
    "end": "209070"
  },
  {
    "text": "in this case that\ngets you from u to v0. You don't encounter a cycle\nor negative cycle in between.",
    "start": "209070",
    "end": "216790"
  },
  {
    "text": "So that's cool. All right? And of course, if you have\na vertex over here, z,",
    "start": "216790",
    "end": "224140"
  },
  {
    "text": "that can't be reached\nfrom u then we're going to have delta\nuz being infinity.",
    "start": "224140",
    "end": "231630"
  },
  {
    "text": "And you can assume at the\nbeginning of these algorithms that the source-- in this\ncase, I call the source u--",
    "start": "231630",
    "end": "238840"
  },
  {
    "text": "but the shortest\npath to u would be 0.",
    "start": "238840",
    "end": "243849"
  },
  {
    "text": "And all of the other\nones are infinity. And some of them\nmay stay infinity. Some of them may obtain\nfinite shortest path weights.",
    "start": "243850",
    "end": "253090"
  },
  {
    "text": "And some of them\nwill be undefined if you have a graph with\nnegative cycles in it. So that's sort of the\nspecification, if you will,",
    "start": "253090",
    "end": "260838"
  },
  {
    "text": "of the requirements on the\nBellman-Ford algorithm. We want it to be able to do all\nof the things I just described.",
    "start": "260839",
    "end": "267270"
  },
  {
    "text": "OK? So let's take a second look\nat our generic shortest path",
    "start": "267270",
    "end": "280539"
  },
  {
    "text": "algorithm that I put up,\nI think, about a week ago.",
    "start": "280540",
    "end": "287510"
  },
  {
    "text": "And this is a good\nreview of our notation. But there are a\ncouple more things",
    "start": "287510",
    "end": "293840"
  },
  {
    "text": "I want to say about\nthis algorithm that I didn't get to last time. So you're given a graph and\nyou set all of the vertices",
    "start": "293840",
    "end": "302910"
  },
  {
    "text": "in the graph to have\ninfinite shortest path weights, initially.",
    "start": "302910",
    "end": "310020"
  },
  {
    "text": "Set the predecessors to be null. And then we'll set\nd of s to be 0.",
    "start": "310020",
    "end": "318710"
  },
  {
    "text": "That's your source. And the main loop would\nbe something like repeat,",
    "start": "318710",
    "end": "330920"
  },
  {
    "text": "select, and edge. And we have a particular\nway of selecting this edge.",
    "start": "330920",
    "end": "337800"
  },
  {
    "text": "And we have positive\nedge weights that corresponds to\nthe minimum priority.",
    "start": "337800",
    "end": "342860"
  },
  {
    "text": "And we talked about\nDijkstra but we have, maybe, different ways of doing that. We have to select\nan edge somehow.",
    "start": "342860",
    "end": "348530"
  },
  {
    "text": "And then, we relaxed that edge. ",
    "start": "348530",
    "end": "355370"
  },
  {
    "text": "u, v, w. And you know about\nthe relaxation step. I won't bother writing\nit out right now.",
    "start": "355370",
    "end": "363000"
  },
  {
    "text": "But it's basically\nsomething where you look at the value\nof d v. And if d v",
    "start": "363000",
    "end": "369340"
  },
  {
    "text": "is greater than d u plus the\nweight, you relax the edge. And you keep doing this.",
    "start": "369340",
    "end": "377350"
  },
  {
    "text": "The other thing that\nyou do in the relaxation is to set the predecessor\npointers to be correct.",
    "start": "377350",
    "end": "383260"
  },
  {
    "text": "And that's part of\nthe relax routine. And you keep doing this until\nyou can't relax anymore.",
    "start": "383260",
    "end": "393905"
  },
  {
    "text": " All right? So that's our generic\nshortest path algorithm.",
    "start": "393905",
    "end": "400830"
  },
  {
    "text": "There are two problems\nwith this algorithm. The first, which we talked\nabout and both of these",
    "start": "400830",
    "end": "408699"
  },
  {
    "text": "have to do with the\ncomplexity but the first one is that the complexity\ncould be exponential time,",
    "start": "408700",
    "end": "420120"
  },
  {
    "text": "even for positive edge weights. ",
    "start": "420120",
    "end": "428090"
  },
  {
    "text": "And the particular\nexample we talked about was something where you had an\nexponential number of paths.",
    "start": "428090",
    "end": "436900"
  },
  {
    "text": "And if you had a graph\nthat looks like this, then it's possible that a\npathological selection of edges",
    "start": "436900",
    "end": "445949"
  },
  {
    "text": "is going to make you relax edges\nan exponential number of times.",
    "start": "445950",
    "end": "451630"
  },
  {
    "text": "And in particular, if you\nhave n nodes in this graph, it's plausible that\nyou'd end up getting",
    "start": "451630",
    "end": "457050"
  },
  {
    "text": "the complexity of order\n2 raised to n over 2. OK?",
    "start": "457050",
    "end": "462360"
  },
  {
    "text": "So that's one problem. The second problem,\nwhich is actually a more obvious problem, is that\nthis algorithm might not even",
    "start": "462360",
    "end": "472740"
  },
  {
    "text": "terminate if this--\nactually will not",
    "start": "472740",
    "end": "484800"
  },
  {
    "text": "terminate the way it's written\nif there's a negative weight",
    "start": "484800",
    "end": "494949"
  },
  {
    "text": "cycle reachable from the source. ",
    "start": "494950",
    "end": "509180"
  },
  {
    "text": "All right, so\nthere's two problems. We fixed the first one. In the case of positive\nedges are non-negative edges.",
    "start": "509180",
    "end": "518548"
  },
  {
    "text": "We have a neat algorithm that\nis an efficient algorithm called Dijkstra that we talked\nabout last time that fixed",
    "start": "518549",
    "end": "523990"
  },
  {
    "text": "the first part. But we don't know\nyet how we're going to handle negative cycles\nin the general case.",
    "start": "523990",
    "end": "531371"
  },
  {
    "text": "We know how to\nhandle negative edges in the case of a DAG-- a\ndirected acyclic graph-- but not in the general case.",
    "start": "531371",
    "end": "537760"
  },
  {
    "text": "OK?  So there's this great little\nskit from Saturday Night Live",
    "start": "537760",
    "end": "547149"
  },
  {
    "text": "from the 1980s-- so way before\nyour time-- called The Five Minute University.",
    "start": "547150",
    "end": "553130"
  },
  {
    "text": "Anybody seen this? All right. Look it up on YouTube. Don't look it up during\nlecture but afterwards.",
    "start": "553130",
    "end": "558408"
  },
  {
    "text": " So the character\nhere is a person",
    "start": "558408",
    "end": "563940"
  },
  {
    "text": "by the name of-- I\nforget his real name but his fake name is\nFather Guido Sarducci.",
    "start": "563940",
    "end": "570200"
  },
  {
    "text": "All right? So what's this Five\nMinute University about? Five Minute University,\nhe's selling this notion",
    "start": "570200",
    "end": "577940"
  },
  {
    "text": "and he says, look, five\nyears after you graduate you, essentially, are\ngoing to remember nothing.",
    "start": "577940",
    "end": "584339"
  },
  {
    "text": "OK? I mean, you're not going\nto remember anything about all the courses\nyou took, et cetera.",
    "start": "584340",
    "end": "589580"
  },
  {
    "text": "So why waste your time on a\ncollege education or waste money-- $100,000-- on\na college education?",
    "start": "589580",
    "end": "595810"
  },
  {
    "text": "You know, for $20 I'll teach\nyou in five minutes what you're",
    "start": "595810",
    "end": "600850"
  },
  {
    "text": "going to remember five\nyears after you graduate. All right? So let's take it to an extreme.",
    "start": "600850",
    "end": "607960"
  },
  {
    "text": "Here's a 30 second\nversion up 6006. And this is what I want you to\nremember five years or 10 years",
    "start": "607960",
    "end": "615700"
  },
  {
    "text": "or whatever after you graduate. All right? And maybe the 10 second version\nas polynomial time is great.",
    "start": "615700",
    "end": "623220"
  },
  {
    "text": "OK? Exponential time is bad. And infinite time\ngets you fired. OK?",
    "start": "623220",
    "end": "629720"
  },
  {
    "text": "So that's all you\nneed to remember. No, that's all you need\nto remember for the final.",
    "start": "629720",
    "end": "635350"
  },
  {
    "text": "This happens, you know, five\nyears after you graduate. So you need to remember\na lot more if you want to take your quiz next\nweek and the final exam.",
    "start": "635350",
    "end": "642850"
  },
  {
    "text": "But I think that\nsummarized over here. You have a generic\nshortest path algorithm. And you realize that\nif you do this wrong",
    "start": "642850",
    "end": "650529"
  },
  {
    "text": "you could very easily\nget into a situation where a polynomial\ntime algorithm, and we",
    "start": "650530",
    "end": "656220"
  },
  {
    "text": "know one for Dijkstra,\nturns into exponential time in the worst case, you\nknow, for a graph like that",
    "start": "656220",
    "end": "663009"
  },
  {
    "text": "because you're\nselecting edges wrongly. And in particular, that's\nproblem number one.",
    "start": "663010",
    "end": "669900"
  },
  {
    "text": "And problem number\ntwo is if you have a graph that isn't\nwhat you expect.",
    "start": "669900",
    "end": "676250"
  },
  {
    "text": "In this case, let's say\nyou expected that a graph with no negative cycles or maybe\nnot even negative edges in it.",
    "start": "676250",
    "end": "683300"
  },
  {
    "text": "You could easily\nget into a situation where your termination\ncondition is such that your algorithm\nnever completes.",
    "start": "683300",
    "end": "689519"
  },
  {
    "text": "So we need to fix\nproblem number two today using this algorithm\ncalled Bellman-Ford.",
    "start": "689520",
    "end": "696829"
  },
  {
    "text": "And as it turns\nout, this algorithm is incredibly straightforward.",
    "start": "696830",
    "end": "703300"
  },
  {
    "text": "I mean, its complexity\nwe'll have to look at. But from a description\nstandpoint, it's four lines of code.",
    "start": "703300",
    "end": "710440"
  },
  {
    "text": "And let me put that up. So Bellman-Ford takes a graph,\nweights, and a source s.",
    "start": "710440",
    "end": "724269"
  },
  {
    "text": "And you can assume an adjacency\nlist specification of the graph",
    "start": "724270",
    "end": "732990"
  },
  {
    "text": "or the representation\nof the graph. And we do some initialization. It's exactly the same\nas in the generic case",
    "start": "732990",
    "end": "740330"
  },
  {
    "text": "except the d values will still\nbe looking at the d values and talking about the\nrelaxation operation.",
    "start": "740330",
    "end": "746500"
  },
  {
    "text": "So we do an initialization. And then, this algorithm\nhas multiple passes",
    "start": "746500",
    "end": "753210"
  },
  {
    "text": "because for I equals\n1 to v minus 1. So it does v minus 1 passes\nroughly order v passes",
    "start": "753210",
    "end": "762650"
  },
  {
    "text": "where v is the\nnumber of vertices. And in each of these passes for\neach edge u v belonging to e",
    "start": "762650",
    "end": "773410"
  },
  {
    "text": "relaxes every edge. ",
    "start": "773410",
    "end": "782850"
  },
  {
    "text": "And just so everyone remembers,\nrelax u, v, w is if d of v",
    "start": "782850",
    "end": "794060"
  },
  {
    "text": "is greater than d of u plus w\nu v then we'll set d v to be--",
    "start": "794060",
    "end": "809450"
  },
  {
    "text": "and we also set pi v to be u. ",
    "start": "809450",
    "end": "815110"
  },
  {
    "text": "OK. ",
    "start": "815110",
    "end": "821079"
  },
  {
    "text": "That's relax\noperation over here. So that's the algorithm.",
    "start": "821080",
    "end": "828459"
  },
  {
    "text": "And if you know\nmagically that they're",
    "start": "828460",
    "end": "837460"
  },
  {
    "text": "no negative cycles in the graph. So if they're no negative\ncycles in the graph,",
    "start": "837460",
    "end": "844810"
  },
  {
    "text": "then after these-- we'll\nhave to prove this. But after these v\nminus 1 passes you're",
    "start": "844810",
    "end": "850310"
  },
  {
    "text": "going to get the correct\nshortest pathways. OK? ",
    "start": "850310",
    "end": "855760"
  },
  {
    "text": "You want to do a\nlittle bit more, right? I motivated what we\nwant Bellman-Ford to do",
    "start": "855760",
    "end": "861950"
  },
  {
    "text": "earlier in the lecture. So you can also do a check. So you may not know if they're\nnegative weight cycles or not.",
    "start": "861950",
    "end": "870750"
  },
  {
    "text": "But at this point,\nyou can say I'm going to do one more pass\nso the v path-- the v",
    "start": "870750",
    "end": "877190"
  },
  {
    "text": "is the number of\nvertices-- over the graph. So for each edge in the graph,\nif you do one more relaxation",
    "start": "877190",
    "end": "888940"
  },
  {
    "text": "and you see that d v is\ngreater than d u plus w u v. So",
    "start": "888940",
    "end": "895800"
  },
  {
    "text": "you're not doing a relaxation. You're doing a check to see\nif you can relax the edge.",
    "start": "895800",
    "end": "902180"
  },
  {
    "text": "Then report minus v\nnegative cycle exists.",
    "start": "902180",
    "end": "911860"
  },
  {
    "text": "So this is the check. And the first part\nis the computation.",
    "start": "911860",
    "end": "917850"
  },
  {
    "text": " So that's kind of neat.",
    "start": "917850",
    "end": "923290"
  },
  {
    "text": "I mean, it fit's on a board. We talk about the correctness.",
    "start": "923290",
    "end": "929139"
  },
  {
    "text": "The functionality,\nI hope everyone got. Do people understand\nwhat's happening here with respect to functionality?",
    "start": "929140",
    "end": "935100"
  },
  {
    "text": "Any questions?  Not about correctness\nbut functionality? Yeah? AUDIENCE: Where\ndoes the [INAUDIBLE]",
    "start": "935100",
    "end": "941214"
  },
  {
    "text": "get used in the formula? PROFESSOR: Oh, it doesn't. ",
    "start": "941214",
    "end": "946779"
  },
  {
    "text": "It's just a counter\nthat makes sure that you do v minus 1 passes. ",
    "start": "946780",
    "end": "954760"
  },
  {
    "text": "So what's that complexity\nof this algorithm using the best data structure\nthat we can think of?",
    "start": "954760",
    "end": "963490"
  },
  {
    "text": "Anyone?  Yeah, go ahead.",
    "start": "963490",
    "end": "968950"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE] v plus e\nif you're using a [INAUDIBLE] to access [INAUDIBLE]?",
    "start": "968950",
    "end": "974387"
  },
  {
    "text": "PROFESSOR: v plus e? AUDIENCE: Or v e plus e. PROFESSOR: So that would be?",
    "start": "974387",
    "end": "980631"
  },
  {
    "text": "AUDIENCE: That's\nusing a dictionary? PROFESSOR: Yeah, I know.\nv e plus e would be? That's correct but. AUDIENCE: [INAUDIBLE].",
    "start": "980632",
    "end": "986120"
  },
  {
    "text": "PROFESSOR: Right. But I mean when do v e plus\ne you can ignore the e.",
    "start": "986120",
    "end": "991800"
  },
  {
    "text": "So say you have just v times e. All right.",
    "start": "991800",
    "end": "997250"
  },
  {
    "text": "Good. Here you go.  So this part here is v times e.",
    "start": "997250",
    "end": "1004830"
  },
  {
    "text": "And it doesn't really matter. I mean, you can use an array\nstructure adjacency list.",
    "start": "1004830",
    "end": "1009990"
  },
  {
    "text": "It's not like Dijkstra where\nwe have this neat requirement for a priority queue and\nthere's different ways",
    "start": "1009990",
    "end": "1016100"
  },
  {
    "text": "of implementing\nthe priority queue. This part would be order of v e.",
    "start": "1016100",
    "end": "1022280"
  },
  {
    "text": "And that gives you the\noverall complexity. This part here is only one\npass through the edges.",
    "start": "1022280",
    "end": "1027640"
  },
  {
    "text": "So that's order\ne, like you said. So the complexities order v e.",
    "start": "1027640",
    "end": "1033329"
  },
  {
    "text": "And this could be large, as\nI said before in, I think, the first lecture.",
    "start": "1033329",
    "end": "1038930"
  },
  {
    "text": "e is order of v square\nin a simple graph.",
    "start": "1038930",
    "end": "1046709"
  },
  {
    "text": "So you might end up with\na v cubed complexity if you run Bellman-Ford. So there's no question\nthat Bellman-Ford",
    "start": "1046710",
    "end": "1053409"
  },
  {
    "text": "is, from a practical\nstandpoint, substantially slower than Dijkstra.",
    "start": "1053410",
    "end": "1058880"
  },
  {
    "text": "You can get Dijkstra down\nto linear complexity.",
    "start": "1058880",
    "end": "1066460"
  },
  {
    "text": "But this would potentially,\nat least in terms of vertices, be cubic complexity.",
    "start": "1066460",
    "end": "1072320"
  },
  {
    "text": "So when you have a chance,\nyou want to use Dijkstra. And you're forced\nto use Bellman-Ford because you could potentially\nhave negative weight",
    "start": "1072320",
    "end": "1078840"
  },
  {
    "text": "cycles while you're\nstuck with that. All right? OK, so why does this work?",
    "start": "1078840",
    "end": "1084770"
  },
  {
    "text": "This looks a bit like magic. It turns out we can actually do\na fairly straightforward proof",
    "start": "1084770",
    "end": "1092260"
  },
  {
    "text": "of correctness of Bellman-Ford. And we're going\nto do two things. We're going to not only\nshow that if negative weight",
    "start": "1092260",
    "end": "1099850"
  },
  {
    "text": "cycles don't exist that\nthis will correctly",
    "start": "1099850",
    "end": "1105539"
  },
  {
    "text": "compute shorter stats. But we also have to show that\nit will detect negative weight",
    "start": "1105540",
    "end": "1111480"
  },
  {
    "text": "cycles if they in fact exist. So there's two parts to this. And let's start.",
    "start": "1111480",
    "end": "1116645"
  },
  {
    "text": " So what we have here\nfor this algorithm",
    "start": "1116645",
    "end": "1123840"
  },
  {
    "text": "is that it can guarantee\nin a graph g equals",
    "start": "1123840",
    "end": "1135440"
  },
  {
    "text": "v E. If it contains no\nnegative weight cycles then",
    "start": "1135440",
    "end": "1153149"
  },
  {
    "text": "after Bellman-Ford\nfinishes execution,",
    "start": "1153150",
    "end": "1161850"
  },
  {
    "text": "d v equals delta s v for all\nv belonging to v. All right?",
    "start": "1161850",
    "end": "1173299"
  },
  {
    "text": "And then there's that. That's the theorem\nyou want to prove. And the second piece\nof it is corollary",
    "start": "1173300",
    "end": "1184230"
  },
  {
    "text": "that we want to prove. And that has to\ndo with the check. And this says if\na value of d of v",
    "start": "1184230",
    "end": "1195460"
  },
  {
    "text": "fails to converge\nafter v minus 1",
    "start": "1195460",
    "end": "1205529"
  },
  {
    "text": "passes there exists a negative\nweight cycle reachable from s.",
    "start": "1205530",
    "end": "1217416"
  },
  {
    "start": "1217416",
    "end": "1224120"
  },
  {
    "text": "So those are the two things\nthat we need to show.",
    "start": "1224120",
    "end": "1229400"
  },
  {
    "text": "I'll probably take a few\nminutes to do each of these. That theorem is a\nlittle more involved. ",
    "start": "1229400",
    "end": "1237104"
  },
  {
    "text": "So one of the first\nthings that we have to do in order\nto prove this theorem is to think about exactly what\nthe shortest path corresponds",
    "start": "1237104",
    "end": "1250879"
  },
  {
    "text": "to in a generic sense. So when we have source\nvertex s and you have",
    "start": "1250880",
    "end": "1258900"
  },
  {
    "text": "a particular vertex\nv then there's the picture that we need\nto keep in mind as we try",
    "start": "1258900",
    "end": "1267760"
  },
  {
    "text": "and prove this theorem. So you have v0, v1, v2, et\ncetera all the way to vk.",
    "start": "1267760",
    "end": "1278230"
  },
  {
    "text": "This is my vertex v. This is s. So s equals v0.",
    "start": "1278230",
    "end": "1284860"
  },
  {
    "text": "V equals vk. All right? So I'm going to have a path p.",
    "start": "1284860",
    "end": "1289970"
  },
  {
    "text": "That is v0, v1,\nall the way to vk.",
    "start": "1289970",
    "end": "1295470"
  },
  {
    "text": "OK? ",
    "start": "1295470",
    "end": "1300809"
  },
  {
    "text": "How big is k in the worst case?",
    "start": "1300810",
    "end": "1306200"
  },
  {
    "text": "How big is k?  Anybody?",
    "start": "1306200",
    "end": "1311950"
  },
  {
    "text": "How big is k?  It's up on the black board. AUDIENCE: [INAUDIBLE].",
    "start": "1311950",
    "end": "1318190"
  },
  {
    "text": "PROFESSOR: v minus 1, right? Why? ",
    "start": "1318190",
    "end": "1323370"
  },
  {
    "text": "What would happen if k\nis larger than v minus 1?",
    "start": "1323370",
    "end": "1328520"
  },
  {
    "text": "I'd have a cycle. I'd be visiting a\nvertex more than once. And it wouldn't\nbe a simple path.",
    "start": "1328520",
    "end": "1333870"
  },
  {
    "text": "Right?  So k is less than or equal to v\nminus 1 else I'd have a cycle.",
    "start": "1333870",
    "end": "1344810"
  },
  {
    "text": "OK? I wouldn't have a simple path. And we're looking for the\nshortest, simple paths",
    "start": "1344810",
    "end": "1351520"
  },
  {
    "text": "because if you ever\nget to the point where-- why are we looking\nfor shortest, simple paths? Well, in this\ncase, we're looking",
    "start": "1351520",
    "end": "1359445"
  },
  {
    "text": "for shortest, simple paths. And if there's a\nnegative cycle, we're in trouble because the\nshortest path is not",
    "start": "1359446",
    "end": "1366899"
  },
  {
    "text": "necessarily the simple\npath because you could go around the\ncycle a bunch of times.",
    "start": "1366900",
    "end": "1372730"
  },
  {
    "text": "I'll get back to that. But in the case where we're\ntrying to prove the theorem,",
    "start": "1372730",
    "end": "1378679"
  },
  {
    "text": "we know that no\nnegative cycles exist. We can assume that\nno negative cycles exist for the case\nof the theorem.",
    "start": "1378680",
    "end": "1384059"
  },
  {
    "text": "And we want to show that\nBellman-Ford correctly computes each of the\nshortest path weights.",
    "start": "1384060",
    "end": "1391230"
  },
  {
    "text": "And in that case, there's\nno negative weight cycles. We're guaranteed that k is less\nthan or equal to v minus 1.",
    "start": "1391230",
    "end": "1396955"
  },
  {
    "text": "All right? Everybody buy that? Good. All right.",
    "start": "1396955",
    "end": "1402380"
  },
  {
    "text": "So that's the picture I\nwant you keep in mind. Let's dive in and\nprove this theorem.",
    "start": "1402380",
    "end": "1410475"
  },
  {
    "text": "And we prove it using induction. ",
    "start": "1410475",
    "end": "1431560"
  },
  {
    "text": "So let v be any vertex. And let's say that\nwe're looking at a path.",
    "start": "1431560",
    "end": "1437779"
  },
  {
    "text": "v0, v1, v2, to vk. And like I said, from\nv0 equals s to vk",
    "start": "1437780",
    "end": "1446570"
  },
  {
    "text": "equals v. And in\nparticular, I'm not",
    "start": "1446570",
    "end": "1454269"
  },
  {
    "text": "going to say that this\npath p is a shortest",
    "start": "1454270",
    "end": "1462830"
  },
  {
    "text": "path with the minimum\nnumber of edges.",
    "start": "1462830",
    "end": "1468835"
  },
  {
    "text": " So there may be\nmany shortest paths.",
    "start": "1468835",
    "end": "1475770"
  },
  {
    "text": "And I'm going to\npick the one that has the minimum number of edges. If there's a unique shortest\npath, then that's a given.",
    "start": "1475770",
    "end": "1482020"
  },
  {
    "text": "But it may be that I have\na path with four edges that has the same weight as\nanother path with three edges.",
    "start": "1482020",
    "end": "1488880"
  },
  {
    "text": "I'm going to pick the\none that has three edges. OK? So it may not be\nunique with respect",
    "start": "1488880",
    "end": "1494406"
  },
  {
    "text": "that they're not necessarily\nunique shortest paths. But I can certainly pick one.",
    "start": "1494406",
    "end": "1499900"
  },
  {
    "text": "And no negative weight cycles\nimplies that p is simple.",
    "start": "1499900",
    "end": "1507370"
  },
  {
    "text": " And that implies that k is less\nthan or equal to v minus 1,",
    "start": "1507370",
    "end": "1516660"
  },
  {
    "text": "which is what I just argued. Now keep in mind that picture\nover there to the right.",
    "start": "1516660",
    "end": "1524559"
  },
  {
    "text": "And basically, the argument\nis going to go as follows.",
    "start": "1524560",
    "end": "1530850"
  },
  {
    "text": "Remember that I'm\ngoing to be relaxing every edge in each\npass of the algorithm.",
    "start": "1530850",
    "end": "1538310"
  },
  {
    "text": "OK? There's no choices here. I'm going be relaxing every edge\nin each pass of the algorithm.",
    "start": "1538310",
    "end": "1545490"
  },
  {
    "text": "And essentially, the\nproof goes as follows. I'm going to be moving\ncloser and closer to vk",
    "start": "1545490",
    "end": "1553930"
  },
  {
    "text": "and constructing this\nshortest path at every pass.",
    "start": "1553930",
    "end": "1560170"
  },
  {
    "text": "So at some point\nin the first pass, I'm going to relax\nthis edge v0, v1.",
    "start": "1560170",
    "end": "1567620"
  },
  {
    "text": "OK? And at that point, thanks to the\noptimal substructure property,",
    "start": "1567620",
    "end": "1574640"
  },
  {
    "text": "given that this is\nthe shortest path, this has to be a\nshortest path, as well. Any subset of the shortest\npath has to be a shortest path.",
    "start": "1574640",
    "end": "1582880"
  },
  {
    "text": "I'm going to relax\nthis edge and I'm going to get the value\nof delta from s to v1.",
    "start": "1582880",
    "end": "1591100"
  },
  {
    "text": "And it's going to be\nthis relaxation that's going to get me that value. And after the first pass, I'm\ngoing to be able to get to v1.",
    "start": "1591100",
    "end": "1597360"
  },
  {
    "text": "After the second\npass, I can get to v2. And after k passes, I'm going\nto be able to get to vk. So I'm just growing this\nfrontier one node every pass.",
    "start": "1597360",
    "end": "1607100"
  },
  {
    "text": "And that's your induction. And you can write that out. And I'll write it out here.",
    "start": "1607100",
    "end": "1613659"
  },
  {
    "text": "But that's basically it. So after one pass through all\nof the edges e, we have d of v1",
    "start": "1613660",
    "end": "1630640"
  },
  {
    "text": "to be delta s v1. ",
    "start": "1630640",
    "end": "1635890"
  },
  {
    "text": "And the reason for this\nis because we'll relax. ",
    "start": "1635890",
    "end": "1645310"
  },
  {
    "text": "We're guaranteed to\nrelax all the edges. And we'll relax the edge\nv0, v1 during this pass.",
    "start": "1645310",
    "end": "1653820"
  },
  {
    "text": " And we can't find a\nshorter path than this path",
    "start": "1653820",
    "end": "1659480"
  },
  {
    "text": "because, otherwise we'd violate\nthe optimum substructure property. And that means that\nit's a contradiction",
    "start": "1659480",
    "end": "1667270"
  },
  {
    "text": "that we selected a shortest\npath in the first place. So can argue that we have delta\ns v1 after the first pass.",
    "start": "1667270",
    "end": "1677070"
  },
  {
    "text": "And this goes on. I'm going to write\nout this proof because I think it's\nimportant for you guys to see the full proof.",
    "start": "1677070",
    "end": "1686340"
  },
  {
    "text": "But you can probably guess\nthe rest at this point. ",
    "start": "1686340",
    "end": "1696780"
  },
  {
    "text": "After one pass,\nthat's what you get. After two passes\nthrough e we have",
    "start": "1696780",
    "end": "1705940"
  },
  {
    "text": "d v2 equals delta s v2\nbecause in the second pass",
    "start": "1705940",
    "end": "1713710"
  },
  {
    "text": "we're going to\nrelax edge v1, v2. ",
    "start": "1713710",
    "end": "1726949"
  },
  {
    "text": "So it' a different edge\nthat needs to be relaxed. But that's cool because\nI'm relaxing all the edges. And I'm going to be able\nto grow my frontier.",
    "start": "1726949",
    "end": "1733740"
  },
  {
    "text": "I'm going to be able to\ncompute delta s v2 and the end of my second pass and\nso on and so forth.",
    "start": "1733740",
    "end": "1740820"
  },
  {
    "text": "So after k passes, we have\nd vk equals delta s vk.",
    "start": "1740820",
    "end": "1753450"
  },
  {
    "text": " And if I run through v\nminus 1 passes, which",
    "start": "1753450",
    "end": "1766320"
  },
  {
    "text": "is what I do in the algorithm,\nall reachable vertices",
    "start": "1766320",
    "end": "1777070"
  },
  {
    "text": "have delta values.  All right? That's basically it.",
    "start": "1777070",
    "end": "1784232"
  },
  {
    "text": "Any questions? ",
    "start": "1784232",
    "end": "1791220"
  },
  {
    "text": "It's actually a simpler proof\nthan the Dijkstra proof, which I just sketched last time.",
    "start": "1791220",
    "end": "1797455"
  },
  {
    "text": "I'll just give\nyou some intuition of the Dijkstra proof. It's probably a little too\npainful to do in a lecture.",
    "start": "1797455",
    "end": "1804590"
  },
  {
    "text": "But this one is, as you can\nsee, nice and clean and fits",
    "start": "1804590",
    "end": "1809659"
  },
  {
    "text": "on two boards, which is kind\nof an important criterion here. So good.",
    "start": "1809660",
    "end": "1816370"
  },
  {
    "text": "All right, so that takes\ncare of the theorem. Hopefully you're all on\nboard with the theorem.",
    "start": "1816370",
    "end": "1821940"
  },
  {
    "text": "And one thing that we haven't\ndone is talk about the check. So the argument with\nrespect to the corollary",
    "start": "1821940",
    "end": "1831179"
  },
  {
    "text": "bootstraps this particular\nargument for the theorem.",
    "start": "1831180",
    "end": "1836490"
  },
  {
    "text": "But this requires the\ninsight that if after v",
    "start": "1836490",
    "end": "1844110"
  },
  {
    "text": "minus 1 passes, if you can find\nan edge that can be relaxed,",
    "start": "1844110",
    "end": "1849790"
  },
  {
    "text": "well what does that mean? ",
    "start": "1849790",
    "end": "1863494"
  },
  {
    "text": "So at this point, let's say that\nI've done my v minus 1 passes",
    "start": "1863494",
    "end": "1871280"
  },
  {
    "text": "and we find an edge\nthat can be relaxed.",
    "start": "1871280",
    "end": "1879725"
  },
  {
    "text": " Well, this means that the\ncurrent shortest path from s",
    "start": "1879725",
    "end": "1899210"
  },
  {
    "text": "to some vertex that is\nobviously reachable v",
    "start": "1899210",
    "end": "1907200"
  },
  {
    "text": "is not simple once I've\nrelaxed this edge because I",
    "start": "1907200",
    "end": "1916370"
  },
  {
    "text": "have a repeated vertex. ",
    "start": "1916370",
    "end": "1928000"
  },
  {
    "text": "So that means it's not simple\nto have a repeated vertex that's the same as I found a cycle.",
    "start": "1928000",
    "end": "1933140"
  },
  {
    "text": " And it's a negative\nweight cycle because I",
    "start": "1933140",
    "end": "1939940"
  },
  {
    "text": "was able to relax the edge\nand reduce the weight after I added a vertex\nthat cost a cycle.",
    "start": "1939940",
    "end": "1948121"
  },
  {
    "text": "All right? So this cycle has to\nbe negative weight. Found a cycle that\nis negative weight.",
    "start": "1948121",
    "end": "1953820"
  },
  {
    "start": "1953820",
    "end": "1959929"
  },
  {
    "text": "All right. That's pretty much it. ",
    "start": "1959930",
    "end": "1966200"
  },
  {
    "text": "So it's, I guess,\na painful algorithm from a standpoint of it's\nnot particularly smart.",
    "start": "1966200",
    "end": "1972780"
  },
  {
    "text": "It's just relaxing\nall of the edges a certain fixed number of times. And it just works out because\nyou will find these cycles.",
    "start": "1972780",
    "end": "1982940"
  },
  {
    "text": "And if you keep going, it's\nlike this termination condition. What is neat is that I don't\nhave the generic shortest path",
    "start": "1982940",
    "end": "1988760"
  },
  {
    "text": "algorithm up there anymore. But in effect,\nwhat you're saying is after a certain\nnumber of passes,",
    "start": "1988760",
    "end": "1994760"
  },
  {
    "text": "if you haven't\nfinished, you can quit because you have found\na negative cycle. So it's very similar to\nthe generic shortest path",
    "start": "1994760",
    "end": "2002710"
  },
  {
    "text": "algorithm. You're not really\nselecting the edges. You're selecting all\nof them, in this case.",
    "start": "2002710",
    "end": "2008080"
  },
  {
    "text": "And you're running through\na bunch of different passes. All right?",
    "start": "2008080",
    "end": "2014260"
  },
  {
    "text": "So that's it with\nrespect to Bellman-Ford. I want to do a couple\nof special cases and revisit the\ndirected acyclic graph.",
    "start": "2014260",
    "end": "2021740"
  },
  {
    "text": "But stop me here if you have any\nquestions about Bellman-Ford. ",
    "start": "2021740",
    "end": "2028270"
  },
  {
    "text": "You first and then back there. Yeah? AUDIENCE: Maybe\nI'm just confused about the definition of a cycle.",
    "start": "2028270",
    "end": "2034748"
  },
  {
    "text": "But if you had, like, a tree,\nwhich had a negative weight edge, wouldn't it produce\nthe same situation where you relaxed that edge.",
    "start": "2034749",
    "end": "2041360"
  },
  {
    "text": "PROFESSOR: But you would have\nrelaxed that edge previously. AUDIENCE: But it wouldn't\nbe a cycle, right? PROFESSOR: Yeah, it\nwouldn't be a cycle.",
    "start": "2041360",
    "end": "2046750"
  },
  {
    "text": "So let's look at that. That's a fine question. AUDIENCE: Doesn't\nthat make assumptions about this structure?",
    "start": "2046750",
    "end": "2052529"
  },
  {
    "text": "PROFESSOR: Well if you\nhad a tree-- I mean, a tree is a really simple case. But if you had\nsomething like this",
    "start": "2052529",
    "end": "2060339"
  },
  {
    "text": "and if you did have\na minus 1 edge here,",
    "start": "2060340",
    "end": "2065610"
  },
  {
    "text": "right-- we'll do a more\ncomplicated example. But let's say you had\nsomething like this. 2 3 minus 1.",
    "start": "2065610",
    "end": "2071179"
  },
  {
    "text": "And what will happen is if this\nhappens to be your s vertex and in the first step\nyou relax all the edges.",
    "start": "2071179",
    "end": "2078949"
  },
  {
    "text": "And this one would get two. And then, depending on the\norder in which you relaxed,",
    "start": "2078949",
    "end": "2085379"
  },
  {
    "text": "it's quite possible that if\nyou relax this edge first-- let's say in the first pass\nthe ordering of the relaxation",
    "start": "2085380",
    "end": "2096070"
  },
  {
    "text": "is 1, 2, and 3. So the edges are ordered\nin a certain way each time,",
    "start": "2096070",
    "end": "2102934"
  },
  {
    "text": "and you're going to be\nrelaxing the edges in exactly the same order each time. All right?",
    "start": "2102934",
    "end": "2107940"
  },
  {
    "text": "It doesn't matter. The beauty of Bellman-Ford\nis that-- let's say you relax this edge. Initially, this is at infinity.",
    "start": "2107940",
    "end": "2114010"
  },
  {
    "text": "So this is at 0. This is at infinity. This is at infinity. This is at infinity. If you relax this\nedge, nothing happens.",
    "start": "2114010",
    "end": "2121420"
  },
  {
    "text": "All right? Then you relax, let's say, this\nedge because that's number two. This gets set to two.",
    "start": "2121420",
    "end": "2127820"
  },
  {
    "text": "You relax this edge\nbecause that's 3. And this is infinity\nso nothing happens. Of course, this is already at\ntwo so nothing would happen.",
    "start": "2127820",
    "end": "2134480"
  },
  {
    "text": "So the end of the first pass,\nwhat you have is this is 0. That's 2. This is still infinity.",
    "start": "2134480",
    "end": "2141060"
  },
  {
    "text": "That's still infinity. OK? That's going to stay infinity\nbecause you can't reach it from s.",
    "start": "2141060",
    "end": "2146180"
  },
  {
    "text": "So we can, sort of, ignore that. And then, of the second\npass, what you have is",
    "start": "2146180",
    "end": "2151220"
  },
  {
    "text": "you start with this edge again\nbecause that's the ordering. And this 2 minus 1\nwould give this a 1.",
    "start": "2151220",
    "end": "2161240"
  },
  {
    "text": "And then you relax this edge\nor try to relax this edge. Nothing happens. Try to relax this edge.",
    "start": "2161240",
    "end": "2167020"
  },
  {
    "text": "Nothing happens. And at this point,\nyou have one more pass to go because you\ngot 4 vertices.",
    "start": "2167020",
    "end": "2172110"
  },
  {
    "text": "And in that past,\nnothing changes again. So that's what you end up with. You end up with 2 for\nthis and 1 for that.",
    "start": "2172110",
    "end": "2181000"
  },
  {
    "text": "OK? That makes sense? So the important\nthing to understand",
    "start": "2181000",
    "end": "2187329"
  },
  {
    "text": "is that you are\nactually relaxing all of the edges in every pass. And there's a slightly\nmore complicated example",
    "start": "2187330",
    "end": "2193830"
  },
  {
    "text": "than this that is in the notes. And you can take a\nlook at that offline. There's another\nquestion in the back.",
    "start": "2193830",
    "end": "2200119"
  },
  {
    "text": "Did you have a question? Someone raised their hand. Yeah? AUDIENCE: Yes,\nI'm just curious-- is there a unknown\nbetter algorithm that",
    "start": "2200120",
    "end": "2207628"
  },
  {
    "text": "can do the same thing? PROFESSOR: No, there's\nno known better algorithm for solving the\ngeneral case like this.",
    "start": "2207628",
    "end": "2213670"
  },
  {
    "text": "There are a couple of\nalgorithms that assume weights",
    "start": "2213670",
    "end": "2219160"
  },
  {
    "text": "within a certain range. And then there complexities\ninclude both v and e, as well as w where w is the dynamic\nrange of the weights.",
    "start": "2219160",
    "end": "2228250"
  },
  {
    "text": "And depending on\nwhat w is, you could argue that they have\nbetter complexity.",
    "start": "2228250",
    "end": "2233750"
  },
  {
    "text": "But they're kind of\nincomparable in the sense that they have this\nextra parameter, which is the dynamic range of the w.",
    "start": "2233750",
    "end": "2238919"
  },
  {
    "text": "OK? Now there's lots\nof special cases, like I said, and well take a\nlook at the DAG special case",
    "start": "2238919",
    "end": "2245150"
  },
  {
    "text": "in a second where you\ncould imagine doing better but not for the case where you\nhave an arbitrary graph that",
    "start": "2245150",
    "end": "2252040"
  },
  {
    "text": "could have negative cycles in it\nbecause it's got negative rate edges. Yeah?",
    "start": "2252040",
    "end": "2257747"
  },
  {
    "text": "AUDIENCE: In the\ncorollary, does that assume you have a connected\ngraph because, you know, you could have a\nnegative weight edge",
    "start": "2257747",
    "end": "2264447"
  },
  {
    "text": "in a separate part\nof the graph, which isn't reachable from this. ",
    "start": "2264447",
    "end": "2271622"
  },
  {
    "text": "PROFESSOR: Yeah. So you're going to start when\nyou have an undefined weight.",
    "start": "2271622",
    "end": "2283420"
  },
  {
    "text": "Remember your\ninitialization condition. What is affected by s? Initialize is affected by s.",
    "start": "2283420",
    "end": "2290760"
  },
  {
    "text": "The rest of it\nisn't affected by s because you're just\nrelaxing the edges. Initialize is affected\nby s because d of s",
    "start": "2290760",
    "end": "2297310"
  },
  {
    "text": "starts out being 0, like I put\nover here, and the rest of them are infinity.",
    "start": "2297310",
    "end": "2302910"
  },
  {
    "text": "So there is an effect of the\nchoice of the starting vertex. And the rest of it\nfollows that you",
    "start": "2302910",
    "end": "2310240"
  },
  {
    "text": "will get an undefined\nvalue, or you will find that\nnegative cycle exists",
    "start": "2310240",
    "end": "2317220"
  },
  {
    "text": "based on whether you can\nreach it from s or not. So if you happen to\nhave s over here,",
    "start": "2317220",
    "end": "2322800"
  },
  {
    "text": "and it's just the\none node, and then it has no edges going\nout of it, this algorithm",
    "start": "2322800",
    "end": "2329870"
  },
  {
    "text": "would just be trivial. But it wouldn't detect\nany negative cycles that aren't reachable from s.",
    "start": "2329870",
    "end": "2335960"
  },
  {
    "text": "That make sense? AUDIENCE: Yeah. PROFESSOR: So there is this--\nit's kind of hidden over there.",
    "start": "2335960",
    "end": "2341410"
  },
  {
    "text": "So I'm glad you\nasked that question. But initialize is\nsetting things up. And that is something\nthat affects",
    "start": "2341410",
    "end": "2348059"
  },
  {
    "text": "the rest of the algorithm\nbecause d of s is 0 and the rest of them\nare set to infinity. All right?",
    "start": "2348060",
    "end": "2354539"
  },
  {
    "text": "So if there are no\nother questions, I'll move on to\nthe case of the DAG",
    "start": "2354540",
    "end": "2361870"
  },
  {
    "text": "and talk a little bit about\nshortest paths versus longest paths. And this is somewhat of\na preview of a lecture",
    "start": "2361870",
    "end": "2368710"
  },
  {
    "text": "that Eric is going to give a\nmonth from now on complexity",
    "start": "2368710",
    "end": "2374010"
  },
  {
    "text": "and the difference between\npolynomial time and exponential time, though I'm not going\nto go into much depth here.",
    "start": "2374010",
    "end": "2379910"
  },
  {
    "text": "But there's some\ninteresting relationships between the shortest path\nproblem and the longest path",
    "start": "2379910",
    "end": "2386950"
  },
  {
    "text": "problem that I'd like to get to. But any other questions on this?",
    "start": "2386950",
    "end": "2394140"
  },
  {
    "text": "OK, so let me ask a question.  Suppose I wanted to find\nlongest paths in a graph",
    "start": "2394140",
    "end": "2404270"
  },
  {
    "text": "and let's say that this graph\nhad all positive edge weights.",
    "start": "2404270",
    "end": "2409960"
  },
  {
    "text": "OK. What if I negated all\nof the edge weights",
    "start": "2409960",
    "end": "2417320"
  },
  {
    "text": "and ran a Bellman-Ford? ",
    "start": "2417320",
    "end": "2423110"
  },
  {
    "text": "Would I find the longest\npath in the graph? ",
    "start": "2423110",
    "end": "2429173"
  },
  {
    "text": "Do people understand\nthe question? ",
    "start": "2429174",
    "end": "2435230"
  },
  {
    "text": "I don't need this. ",
    "start": "2435230",
    "end": "2445500"
  },
  {
    "text": "So maybe we can talk about what\na longest path means first. ",
    "start": "2445500",
    "end": "2457150"
  },
  {
    "text": "So if this was s and this v1,\nv2, v3, fairly straightforward,",
    "start": "2457150",
    "end": "2463180"
  },
  {
    "text": "you know how to compute\nshortest paths now. These are all positive. Even easier.",
    "start": "2463180",
    "end": "2468450"
  },
  {
    "text": "The longest path\nto v3 is of length. Six because I go here, go\nthere, and go there, right?",
    "start": "2468450",
    "end": "2476180"
  },
  {
    "text": "So that's my longest path. OK? And the shortest path\nto v3 is of length 4.",
    "start": "2476180",
    "end": "2483930"
  },
  {
    "text": "So shortest path, longest\npaths, have these nice duality.",
    "start": "2483930",
    "end": "2489079"
  },
  {
    "text": "What if I said,\nwell, you know, I can solve the longest\npath problem, as well,",
    "start": "2489080",
    "end": "2494630"
  },
  {
    "text": "given all of what I've\nlearned about shortest paths simply by negating each of these\nedges and running Bellman-Ford.",
    "start": "2494630",
    "end": "2509750"
  },
  {
    "text": "What would happen? Yeah? AUDIENCE: [INAUDIBLE] shortest\npath branch [INAUDIBLE]",
    "start": "2509750",
    "end": "2519244"
  },
  {
    "text": "values, and if you\nswitched to absolute value, it will give you\nthe longest path.",
    "start": "2519244",
    "end": "2525220"
  },
  {
    "text": "PROFESSOR: So you\nthink it works? AUDIENCE: Yeah. It will also check the cycles. So the negative cycles will be\nthe longest path cycles that",
    "start": "2525220",
    "end": "2532760"
  },
  {
    "text": "[INAUDIBLE]. PROFESSOR: But I think\nthat's the key question. What will Bellman-Ford do\nwhen it is run on this?",
    "start": "2532760",
    "end": "2539550"
  },
  {
    "text": "What would it return? AUDIENCE: [INAUDIBLE]. PROFESSOR: No, what will\nBellman-Ford return?",
    "start": "2539550",
    "end": "2546320"
  },
  {
    "text": "I'm asking. Someone else? What will Bellman-Ford\nreturn if I ran this?",
    "start": "2546320",
    "end": "2553830"
  },
  {
    "text": "Undefined. Right? Undefined because you got this\nnegative weight cycle here.",
    "start": "2553830",
    "end": "2559574"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: Sorry? Oh! Let's put another one in there.",
    "start": "2559574",
    "end": "2565920"
  },
  {
    "text": "Oops, sorry. Now I see. You're right. You're right. I'm wrong. And why did you say undefined?",
    "start": "2565920",
    "end": "2571110"
  },
  {
    "text": "AUDIENCE: I was wrong. PROFESSOR: OK, good. I got company. Thank you. Thank you.",
    "start": "2571110",
    "end": "2578020"
  },
  {
    "text": "Good. Let's take it all over again. All over again. All right. ",
    "start": "2578020",
    "end": "2590569"
  },
  {
    "text": "All right, start over. s v1 v2 v3.",
    "start": "2590570",
    "end": "2595990"
  },
  {
    "text": " Yeah, that is a cycle. All right, good.",
    "start": "2595990",
    "end": "2603461"
  },
  {
    "text": "Cycle.  So when you actually\nnegate each of these edges,",
    "start": "2603461",
    "end": "2613579"
  },
  {
    "text": "you end up with a\nnegative weight cycle. So it's plausible that you\ncould have a graph like this one",
    "start": "2613580",
    "end": "2620250"
  },
  {
    "text": "where this strategy won't\nwork because what would happen is Bellman-Ford would come back\nwith, essentially, an abort",
    "start": "2620250",
    "end": "2630510"
  },
  {
    "text": "that says I can't compute\nshortest paths because they're undefined. All right? Now it turns out it's actually\nmore subtle than that.",
    "start": "2630510",
    "end": "2640060"
  },
  {
    "text": "What we're trying to do in\nBellman-Ford is, in the case where negative weight\ncycles don't exist,",
    "start": "2640060",
    "end": "2651770"
  },
  {
    "text": "we report on the\nshortest simple path. ",
    "start": "2651770",
    "end": "2658870"
  },
  {
    "text": "That's the whole\nnotion of the proof. We say that the path has\na certain length, which is, at most, v minus 1\nand so on and so forth.",
    "start": "2658870",
    "end": "2667290"
  },
  {
    "text": "We get the shortest simple path. ",
    "start": "2667290",
    "end": "2674620"
  },
  {
    "text": "But if you actually have a\nproblem where you say-- let",
    "start": "2674620",
    "end": "2688310"
  },
  {
    "text": "me start over again. Let's say I want to find\nthe shortest simple path for a different\ngraph and it happens",
    "start": "2688310",
    "end": "2696380"
  },
  {
    "text": "to have a negative\nweight cycle in it. So I have something like this.",
    "start": "2696380",
    "end": "2702630"
  },
  {
    "text": "2 3 minus 6, 3 over here,\n3 over here, and so on.",
    "start": "2702630",
    "end": "2710240"
  },
  {
    "text": "Maybe 2 here. And I want to find the\nshortest simple path that",
    "start": "2710240",
    "end": "2719430"
  },
  {
    "text": "reaches v from s. OK? What is the shortest simple\npath that reaches v from s?",
    "start": "2719430",
    "end": "2727670"
  },
  {
    "text": "It's this path that\ngoes horizontally, which has a weight\n3 plus 2, 5, 5",
    "start": "2727670",
    "end": "2732819"
  },
  {
    "text": "plus 3, 8, 8 plus 3,\n11, 11 plus 2, 13.",
    "start": "2732820",
    "end": "2738470"
  },
  {
    "text": "All right? So the shortest\nsimple path is 13.",
    "start": "2738470",
    "end": "2748580"
  },
  {
    "text": "Will Bellman-Ford give you any\ninformation about this path? ",
    "start": "2748580",
    "end": "2754594"
  },
  {
    "text": "AUDIENCE: [INAUDIBLE]. PROFESSOR: No because\nin [INAUDIBLE]. After it does its v minus 1\npasses, v is reachable from s.",
    "start": "2754594",
    "end": "2766200"
  },
  {
    "text": "But you potentially go through\na negative weight cycle",
    "start": "2766200",
    "end": "2771480"
  },
  {
    "text": "before you reach v. OK? So it turns out that if you have\na graph with negative weight",
    "start": "2771480",
    "end": "2778550"
  },
  {
    "text": "cycles, finding the\nshortest simple path is an NP-hard problem.",
    "start": "2778550",
    "end": "2784520"
  },
  {
    "text": "It's a really hard problem. That's what NP means. No, it means something\nelse that Eric",
    "start": "2784520",
    "end": "2790420"
  },
  {
    "text": "will explain to you\nin a month or so. But it means that we don't\nknow any algorithm that",
    "start": "2790420",
    "end": "2796600"
  },
  {
    "text": "is better than exponential\ntime to solve this problem. OK?",
    "start": "2796600",
    "end": "2802140"
  },
  {
    "text": "So amazingly, all you've done is\ntaken the shortest path problem",
    "start": "2802140",
    "end": "2808619"
  },
  {
    "text": "and changed it ever so slightly. You said I want to look for\nthe shortest simple path in the general case where\nI could, potentially,",
    "start": "2808620",
    "end": "2816970"
  },
  {
    "text": "have negative weight\ncycles in my graph. And when you do that,\nall bets are off.",
    "start": "2816970",
    "end": "2823370"
  },
  {
    "text": "You're not in the polynomial\ntime complexity domain anymore. At least, not that we know of.",
    "start": "2823370",
    "end": "2828630"
  },
  {
    "text": "And the best that you can do is\nan exponential time algorithm to find shorter simple paths.",
    "start": "2828630",
    "end": "2835430"
  },
  {
    "text": "And this problem,\nas it turns out, is equivalent to the longest\npath problem in the sense",
    "start": "2835430",
    "end": "2844850"
  },
  {
    "text": "that they're both NP-hard. If you can solve one, you\ncould solve the other. So to summarize, what\nhappens here simply",
    "start": "2844850",
    "end": "2853050"
  },
  {
    "text": "is that in the case\nof Bellman-Ford running on the original\nshortest path problem,",
    "start": "2853050",
    "end": "2861910"
  },
  {
    "text": "you're allowed to abort when\nyou detect the fact that there's a negative cycle.",
    "start": "2861910",
    "end": "2868640"
  },
  {
    "text": "So given that you're allowed\nto abort when there's a negative cycle, you have\na polynomial time solution",
    "start": "2868640",
    "end": "2875089"
  },
  {
    "text": "using Bellman-Ford\nthat is not necessarily going to give you shortest\npath weights but will",
    "start": "2875090",
    "end": "2882980"
  },
  {
    "text": "in the case of no\nnegative cycles. All right? But if you ask for more-- a\nlittle bit more-- you said,",
    "start": "2882980",
    "end": "2891770"
  },
  {
    "text": "you know, it'd be great\nif you could somehow process these negative\ncycles and tell me",
    "start": "2891770",
    "end": "2898080"
  },
  {
    "text": "that if I had a simple path and\nI don't go through cycles what",
    "start": "2898080",
    "end": "2903140"
  },
  {
    "text": "would the shortest\nweight be, it becomes a much more difficult problem. It goes from order\nof ve complexity",
    "start": "2903140",
    "end": "2909450"
  },
  {
    "text": "to exponential time complexity\nto the best of our knowledge. So that's what I'd\nlike to leave you with.",
    "start": "2909450",
    "end": "2916770"
  },
  {
    "text": "That there's much more to\nalgorithms than just the ones that we're looking at.",
    "start": "2916770",
    "end": "2922230"
  },
  {
    "text": "And we get a little\nbit of a preview of this-- so the difference\nbetween polynomial time an exponential time--\nlater on in the term.",
    "start": "2922230",
    "end": "2929510"
  },
  {
    "start": "2929510",
    "end": "2930264"
  }
]