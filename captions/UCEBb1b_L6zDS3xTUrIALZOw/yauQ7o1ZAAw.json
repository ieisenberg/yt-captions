[
  {
    "start": "0",
    "end": "61000"
  },
  {
    "text": "Let's start by redrawing and simplifying the\nBeta data path so that it will be easier to",
    "start": "500",
    "end": "5390"
  },
  {
    "text": "reason about when we add pipelining.",
    "start": "5390",
    "end": "8340"
  },
  {
    "text": "The first simplification is to focus on sequential\nexecution and so leave out the branch addressing",
    "start": "8340",
    "end": "13690"
  },
  {
    "text": "and PC mux logic.",
    "start": "13690",
    "end": "15660"
  },
  {
    "text": "Our simplified Beta always executes the next\ninstruction from PC+4.",
    "start": "15660",
    "end": "20560"
  },
  {
    "text": "We'll add back the branch and jump logic when\nwe discuss control hazards.",
    "start": "20560",
    "end": "25960"
  },
  {
    "text": "The second simplification is to have the register\nfile appear twice in the diagram so that we",
    "start": "25960",
    "end": "31179"
  },
  {
    "text": "can tease apart the read and write operations\nthat occur at different stages of instruction",
    "start": "31180",
    "end": "35800"
  },
  {
    "text": "execution.",
    "start": "35800",
    "end": "37710"
  },
  {
    "text": "The top Register File shows the combinational\nread ports, used to when reading the register",
    "start": "37710",
    "end": "42829"
  },
  {
    "text": "operands in the RF stage.",
    "start": "42830",
    "end": "45239"
  },
  {
    "text": "The bottom Register File shows the clocked\nwrite port, used to write the result into",
    "start": "45239",
    "end": "49440"
  },
  {
    "text": "the destination register at the end of the\nWB stage.",
    "start": "49440",
    "end": "53280"
  },
  {
    "text": "Physically, there's only one set of 32 registers,\nwe've just drawn the read and write circuity",
    "start": "53280",
    "end": "58718"
  },
  {
    "text": "as separate components in the diagram.",
    "start": "58719",
    "end": "61430"
  },
  {
    "start": "61000",
    "end": "150000"
  },
  {
    "text": "If we add pipeline registers to the simplified\ndiagram, we see that execution proceeds through",
    "start": "61430",
    "end": "66790"
  },
  {
    "text": "the five stages from top to bottom.",
    "start": "66790",
    "end": "69750"
  },
  {
    "text": "If we consider execution of instruction sequences\nwith no data hazards, information is flowing",
    "start": "69750",
    "end": "75000"
  },
  {
    "text": "down the pipeline and the pipeline will correctly\noverlap the execution of all the instructions",
    "start": "75000",
    "end": "80250"
  },
  {
    "text": "in the pipeline.",
    "start": "80250",
    "end": "82220"
  },
  {
    "text": "The diagram shows the components needed to\nimplement each of the five stages.",
    "start": "82220",
    "end": "87470"
  },
  {
    "text": "The IF stage contains the program counter\nand the main memory interface for fetching",
    "start": "87470",
    "end": "92270"
  },
  {
    "text": "instructions.",
    "start": "92270",
    "end": "93270"
  },
  {
    "text": "The RF stage has the register file and operand\nmultiplexers.",
    "start": "93270",
    "end": "97610"
  },
  {
    "text": "The ALU stage uses the operands and computes\nthe result.",
    "start": "97610",
    "end": "102060"
  },
  {
    "text": "The MEM stage handles the memory access for\nload and store operations.",
    "start": "102060",
    "end": "107118"
  },
  {
    "text": "And the WB stage writes the result into the\ndestination register.",
    "start": "107119",
    "end": "112520"
  },
  {
    "text": "In each clock cycle, each stage does its part\nin the execution of a particular instruction.",
    "start": "112520",
    "end": "117188"
  },
  {
    "text": "In a given clock cycle, there are five instructions\nin the pipeline.",
    "start": "117189",
    "end": "122469"
  },
  {
    "text": "Note that data accesses to main memory span\nalmost two clock cycles.",
    "start": "122469",
    "end": "126610"
  },
  {
    "text": "Data accesses are initiated at the beginning\nof the MEM stage and returning data is only",
    "start": "126610",
    "end": "131390"
  },
  {
    "text": "needed just before the end of the WB stage.",
    "start": "131390",
    "end": "134730"
  },
  {
    "text": "The memory is itself pipelined and can simultaneously\nfinish the access from an earlier instruction",
    "start": "134730",
    "end": "140530"
  },
  {
    "text": "while starting an access for the next instruction.",
    "start": "140530",
    "end": "144510"
  },
  {
    "text": "This simplified diagram isn't showing how\nthe control logic is split across the pipeline",
    "start": "144510",
    "end": "148640"
  },
  {
    "text": "stages.",
    "start": "148640",
    "end": "149730"
  },
  {
    "text": "How does that work?",
    "start": "149730",
    "end": "151200"
  },
  {
    "text": "Note that we've included instruction registers\nas part of each pipeline stage, so that each",
    "start": "151200",
    "end": "156040"
  },
  {
    "text": "stage can compute the control signals it needs\nfrom its instruction register.",
    "start": "156040",
    "end": "160790"
  },
  {
    "text": "The encoded instruction is simply passed from\none stage to the next as the instruction flows",
    "start": "160790",
    "end": "165939"
  },
  {
    "text": "through the pipeline..",
    "start": "165940",
    "end": "168220"
  },
  {
    "text": "Each stage computes its control signals from\nthe opcode field of its instruction register.",
    "start": "168220",
    "end": "172830"
  },
  {
    "text": "The RF stage needs the RA, RB, and literal\nfields from its instruction register.",
    "start": "172830",
    "end": "177640"
  },
  {
    "text": "And the WB stage needs the RC field from its\ninstruction register.",
    "start": "177640",
    "end": "183010"
  },
  {
    "text": "The required logic is very similar to the\nunpipelined implementation, it's just been",
    "start": "183010",
    "end": "187459"
  },
  {
    "text": "split up and moved to the appropriate pipeline\nstage.",
    "start": "187459",
    "end": "191530"
  },
  {
    "text": "We'll see that we will have to add some additional\ncontrol logic to deal correctly with pipeline",
    "start": "191530",
    "end": "196370"
  },
  {
    "text": "hazards.",
    "start": "196370",
    "end": "198459"
  },
  {
    "start": "197000",
    "end": "230000"
  },
  {
    "text": "Our simplified diagram isn't so simple anymore!",
    "start": "198459",
    "end": "201050"
  },
  {
    "text": "To see how the pipeline works, let's follow\nalong as it executes this sequence of six",
    "start": "201050",
    "end": "206540"
  },
  {
    "text": "instructions.",
    "start": "206540",
    "end": "207540"
  },
  {
    "text": "Note that the instructions are reading and\nwriting from different registers, so there",
    "start": "207540",
    "end": "211319"
  },
  {
    "text": "are no potential data hazards.",
    "start": "211320",
    "end": "214020"
  },
  {
    "text": "And there are no branches and jumps, so there\nare no potential control hazards.",
    "start": "214020",
    "end": "219519"
  },
  {
    "text": "Since there are no potential hazards, the\ninstruction executions can be overlapped and",
    "start": "219519",
    "end": "224129"
  },
  {
    "text": "their overlapped execution in the pipeline\nwill work correctly.",
    "start": "224129",
    "end": "227659"
  },
  {
    "text": "Okay, here we go!",
    "start": "227659",
    "end": "229940"
  },
  {
    "text": "During cycle 1, the IF stage sends the value\nfrom the program counter to main memory to",
    "start": "229940",
    "end": "235620"
  },
  {
    "start": "230000",
    "end": "264000"
  },
  {
    "text": "fetch the first instruction (the green LD\ninstruction), which will be stored in the",
    "start": "235620",
    "end": "240159"
  },
  {
    "text": "RF-stage instruction register at the end of\nthe cycle.",
    "start": "240160",
    "end": "244070"
  },
  {
    "text": "Meanwhile, it's also computing PC+4, which\nwill be the next value of the program counter.",
    "start": "244070",
    "end": "250769"
  },
  {
    "text": "We've colored the next value blue to indicate\nthat it's the address of the blue instruction",
    "start": "250769",
    "end": "256018"
  },
  {
    "text": "in the sequence.",
    "start": "256019",
    "end": "257660"
  },
  {
    "text": "We'll add the appropriately colored label\non the right of each pipeline stage to indicate",
    "start": "257660",
    "end": "261840"
  },
  {
    "text": "which instruction the stage is processing.",
    "start": "261840",
    "end": "265500"
  },
  {
    "start": "264000",
    "end": "304000"
  },
  {
    "text": "At the start of cycle 2, we see that values\nin the PC and instruction registers for the",
    "start": "265500",
    "end": "271530"
  },
  {
    "text": "RF stage now correspond to the green instruction.",
    "start": "271530",
    "end": "275650"
  },
  {
    "text": "During the cycle the register file will be\nreading the register operands, in this case",
    "start": "275650",
    "end": "280090"
  },
  {
    "text": "R1, which is needed for the green instruction.",
    "start": "280090",
    "end": "282949"
  },
  {
    "text": "Since the green instruction is a LD, ASEL\nis 0 and BSEL is 1, selecting the appropriate",
    "start": "282950",
    "end": "289210"
  },
  {
    "text": "values to be written into the A and B operand\nregisters at the end of the cycle.",
    "start": "289210",
    "end": "294710"
  },
  {
    "text": "Concurrently, the IF stage is fetching the\nblue instruction from main memory and computing",
    "start": "294710",
    "end": "300440"
  },
  {
    "text": "an updated PC value for the next cycle.",
    "start": "300440",
    "end": "304789"
  },
  {
    "start": "304000",
    "end": "421000"
  },
  {
    "text": "In cycle 3, the green instruction is now in\nthe ALU stage, where the ALU is adding the",
    "start": "304789",
    "end": "310760"
  },
  {
    "text": "values in its operand registers (in this case\nthe value of R1 and the constant 4) and the",
    "start": "310760",
    "end": "316410"
  },
  {
    "text": "result will be stored in Y_MEM register at\nthe end of the cycle.",
    "start": "316410",
    "end": "321740"
  },
  {
    "text": "In cycle 4, we're overlapping execution of\nfour instructions.",
    "start": "321740",
    "end": "326780"
  },
  {
    "text": "The MEM stage initiates a memory read for\nthe green LD instruction.",
    "start": "326780",
    "end": "331449"
  },
  {
    "text": "Note that the read data will first become\navailable in the WB stage - it's not available",
    "start": "331449",
    "end": "336330"
  },
  {
    "text": "to CPU in the current clock cycle.",
    "start": "336330",
    "end": "340310"
  },
  {
    "text": "In cycle 5, the results of the main memory\nread initiated in cycle 4 are available for",
    "start": "340310",
    "end": "345210"
  },
  {
    "text": "writing to the register file in the WB stage.",
    "start": "345210",
    "end": "349180"
  },
  {
    "text": "So execution of the green LD instruction will\nbe complete when the memory data is written",
    "start": "349180",
    "end": "354150"
  },
  {
    "text": "to R2 at the end of cycle 5.",
    "start": "354150",
    "end": "356960"
  },
  {
    "text": "Meanwhile, the MEM stage is initiating a memory\nread for the blue LD instruction.",
    "start": "356960",
    "end": "362569"
  },
  {
    "text": "The pipeline continues to complete successive\ninstructions in successive clock cycles.",
    "start": "362569",
    "end": "367840"
  },
  {
    "text": "The latency for a particular instruction is\n5 clock cycles.",
    "start": "367840",
    "end": "371550"
  },
  {
    "text": "The throughput of the pipelined CPU is 1 instruction/cycle.",
    "start": "371550",
    "end": "376069"
  },
  {
    "text": "This is the same as the unpipelined implementation,\nexcept that the clock period is shorter because",
    "start": "376070",
    "end": "381600"
  },
  {
    "text": "each pipeline stage has fewer components.",
    "start": "381600",
    "end": "385710"
  },
  {
    "text": "Note that the effects of the green LD, i.e.,\nfilling R2 with a new value, don't happen",
    "start": "385710",
    "end": "391210"
  },
  {
    "text": "until the rising edge of the clock at the\nend of cycle 5.",
    "start": "391210",
    "end": "395280"
  },
  {
    "text": "In other words, the results of the green LD\naren't available to other instructions until",
    "start": "395280",
    "end": "400330"
  },
  {
    "text": "cycle 6.",
    "start": "400330",
    "end": "402580"
  },
  {
    "text": "If there were instructions in the pipeline\nthat read R2 before cycle 6, they would have",
    "start": "402580",
    "end": "407520"
  },
  {
    "text": "gotten an old value!",
    "start": "407520",
    "end": "410270"
  },
  {
    "text": "This is an example of a data hazard.",
    "start": "410270",
    "end": "411819"
  },
  {
    "text": "Not a problem for us, since our instruction\nsequence didn't trigger this data hazard.",
    "start": "411820",
    "end": "418009"
  },
  {
    "text": "Tackling data hazards is our next task.",
    "start": "418009",
    "end": "420580"
  }
]